# file opened: eliteNext.asm
   1  0000                  DEVICE ZXSPECTRUMNEXT
   2  0000                  SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION
   3  0000                  DEFINE  DOUBLEBUFFER 1
   4  0000                  DEFINE  LATECLIPPING 1
   5  0000                  DEFINE  SIMPLEWARP   1
   6  0000                  ;DEFINE DEBUGCIRCLE1 1
   7  0000                  ;DEFINE DEBUGCIRCLE2 1
   8  0000                  ;DEFINE DEBUGCIRCLE3 1
   9  0000                  ;DEFINE DEBUGCIRCLE4 1
  10  0000                  ;DEFINE DEBUGCIRCLE5 1
  11  0000                  ;DEFINE DEBUGCIRCLE6 1
  12  0000                  ;DEFINE  DEBUGPLANET 1
  13  0000                  ;DEFINE  DEBUGPLANETCIRCLE 1
  14  0000                  ;DEFINE  MERIDANLINEDEBUG 1
  15  0000                  DEFINE  PLANETSARESOLID 1
  16  0000                  ;DEFINE DEBUG_LL122_DIRECT 1 ; PASS
  17  0000                  ;DEFINE DEBUG_LL121_DIRECT 1 ; PASS
  18  0000                  ;DEFINE DEBUG_LL129_DIRECT 1 ; PASS
  19  0000                  ;DEFINE DEBUG_LL120_DIRECT 1 ; PASS
  20  0000                  ;DEFINE DEBUG_LL123_DIRECT 1 ; PASS
  21  0000                  ;DEFINE DEBUG_LL118_DIRECT 1
  22  0000                  ;DEFINE DEBUG_LL128_DIRECT
  23  0000              ;                  DEFINE DEBUG_LL123_DIRECT 1
  24  0000              ;                  DEFINE DEBUG_LL118_DIRECT 1
  25  0000              ;                  DEFINE DEBUG_LL28_6502
  26  0000                                ;DEFINE DEBUG_LL145_6502 1
  27  0000              ;                DEFINE DEBUG_LL129
  28  0000               ;               DEFINE DEBUG_LL120 1
  29  0000                         ; DEFINE DEBUGCLIP 1
  30  0000                  ;DEFINE SKIPATTRACTMUSIC 1
  31  0000                  ;DEFINE SKIPATTRACTGRAPHICS 1
  32  0000                  ;DEFINE  SKIPATTRACT 1
  33  0000                  ;DEFINE  LOGDIVIDEDEBUG 1
  34  0000                  ; DEFINE  BLINEDEBUG 1
  35  0000                  ;DEFINE  TESTMERIDIAN 1
  36  0000                  ;DEFINE  CLIPVersion3 1
  37  0000                  ;DEFINE  LOGMATHS     1
  38  0000                  ;DEFINE  DIAGSPRITES 1
  39  0000              ;    DEFINE   SKIPATTRACT
  40  0000                  ; DEFINE DEBUGMISSILETEST 1
  41  0000                  ; DEFINE DEBUGLINEDRAW 1
  42  0000                   DEFINE  LASER_V2    1
  43  0000               CSPECTMAP eliteN.map
  44  0000               OPT --zxnext=cspect --syntax=a --reversepop
  45  0000                              DEFINE  SOUNDPACE 3
  46  0000              ;                DEFINE  ENABLE_SOUND 1
  47  0000                             DEFINE     MAIN_INTERRUPTENABLE 1
  48  0000              ;               DEFINE INTERRUPT_BLOCKER 1
  49  0000              DEBUGSEGSIZE   equ 1
  50  0000              DEBUGLOGSUMMARY equ 1
  51  0000              ;DEBUGLOGDETAIL equ 1
  52  0000
  53  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  54  0000              ; Game Defines
  55  0000              ScreenLocal      EQU 0
  56  0000              ScreenGalactic   EQU ScreenLocal + 1
  57  0000              ScreenMarket     EQU ScreenGalactic + 1
  58  0000              ScreenMarketDsp  EQU ScreenMarket + 1
  59  0000              ScreenStatus     EQU ScreenMarketDsp + 1
  60  0000              ScreenInvent     EQU ScreenStatus + 1
  61  0000              ScreenPlanet     EQU ScreenInvent + 1
  62  0000              ScreenEquip      EQU ScreenPlanet + 1
  63  0000              ScreenLaunch     EQU ScreenEquip + 1
  64  0000              ScreenFront      EQU ScreenLaunch + 1
  65  0000              ScreenAft        EQU ScreenFront+1
  66  0000              ScreenLeft       EQU ScreenAft+1
  67  0000              ScreenRight      EQU ScreenLeft+1
  68  0000              ScreenDocking    EQU ScreenRight+1
  69  0000              ScreenHyperspace EQU ScreenDocking+1
  70  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  71  0000              ; Colour Defines
  72  0000                  INCLUDE "./Hardware/L2ColourDefines.asm"
# file opened: ./Hardware/L2ColourDefines.asm
   1+ 0000              L2ColourBLACK           EQU   0
   2+ 0000              L2ColourRED_1           EQU 224                 ; RGB 255,  0,  0
   3+ 0000              L2ColourRED_2           EQU 192                 ; RGB 218,  0,  0
   4+ 0000              L2ColourRED_3           EQU 160                 ; RGB 182,  0,  0
   5+ 0000              L2ColourRED_4           EQU 128                 ; RGB 145,  0,  0
   6+ 0000              L2ColourRED_5           EQU  96                 ; RGB 109,  0,  0
   7+ 0000              L2ColourRED_6           EQU  64                 ; RGB  72,  0,  0
   8+ 0000              L2ColourRED_7           EQU  32                 ; RGB  36,  0,  0
   9+ 0000              L2ColourYELLOW_1        EQU 252                 ; RGB 255,255,  0
  10+ 0000              L2ColourYELLOW_2        EQU 216                 ; RGB 218,218,  0
  11+ 0000              L2ColourYELLOW_3        EQU 180                 ; RGB 182,182,  0
  12+ 0000              L2ColourYELLOW_4        EQU 144                 ; RGB 145,145,  0
  13+ 0000              L2ColourYELLOW_5        EQU 108                 ; RGB 109.109,  0
  14+ 0000              L2ColourYELLOW_6        EQU  72                 ; RGB  72, 72,  0
  15+ 0000              L2ColourYELLOW_7        EQU  36                 ; RGB  36, 36,  0
  16+ 0000              L2ColourGREEN_1		    EQU  28                 ; RGB   0,255,  0
  17+ 0000              L2ColourGREEN_2		    EQU  24                 ; RGB   0,218,  0
  18+ 0000              L2ColourGREEN_3		    EQU  16                 ; RGB   0,145,  0
  19+ 0000              L2ColourGREEN_4         EQU  12                 ; RGB   0,109,  0
  20+ 0000              L2ColourGREEN_5         EQU   8                 ; RGB   0, 72,  0
  21+ 0000              L2ColourGREEN_6         EQU   4                 ; RGB   0, 36,  0
  22+ 0000              L2ColourBLUE_1          EQU   3                 ; RGB 0,0,255
  23+ 0000              L2ColourBLUE_2          EQU   2                 ; RGB 0,0,170
  24+ 0000              L2ColourBLUE_3          EQU   1                 ; RGB 0,0,85
  25+ 0000
  26+ 0000
  27+ 0000              L2ColourWHITE_1         EQU 255                 ; RGB 255,255,255
  28+ 0000              L2ColourWHITE_2         EQU 146
  29+ 0000              L2ColourGREY_1		    EQU L2ColourWHITE_2
  30+ 0000              L2ColourGREY_2		    EQU 109
  31+ 0000              L2ColourGREY_3		    EQU  73
  32+ 0000              L2ColourGREY_4		    EQU  37
  33+ 0000
  34+ 0000              L2ColourGREEN_MB        EQU  29                 ;RGB 0,255,85
  35+ 0000              L2ColourGREEN_MR        EQU 124                 ;RGB 109.255,0
  36+ 0000              L2ColourCREAM_1         EQU 218                 ; RGB 218,218,170
  37+ 0000              L2ColourCREAM_2         EQU 182                 ; RGB 182,182,170
  38+ 0000              L2ColourCREAM_3         EQU 146                 ; RGB 145,145,170
  39+ 0000
  40+ 0000              L2ColourTRANSPARENT     EQU 227                 ; RGB 255,  0,255
  41+ 0000              L2ColourMAGENTA_1       EQU 162                 ; RGB 182,  0,170
  42+ 0000              L2ColourMAGENTA_2       EQU 130                 ; RGB 145,  0,170
  43+ 0000              L2ColourMAGENTA_3       EQU  97                 ; RGB 109,  0, 85
  44+ 0000              L2ColourMAGENTA_4       EQU  65                 ; RGB  72,  0, 85
  45+ 0000              L2ColourORANGE_1        EQU 236                 ; RGB
  46+ 0000              L2ColourORANGE_2        EQU 168                 ; RGB
  47+ 0000              L2ColourORANGE_3        EQU  68                 ; RGB
  48+ 0000              L2ColourCYAN_1          EQU  31                 ; RGB   0,255, 255
  49+ 0000              L2ColourCYAN_2          EQU  18                 ; RGB
  50+ 0000              L2ColourCYAN_3          EQU   9                 ; RGB
  51+ 0000              L2ColourPURPLE_1        EQU 109                 ; RGB
  52+ 0000              L2ColourPURPLE_2        EQU  66                 ; RGB
  53+ 0000              L2ColourPURPLE_3        EQU  33                 ; RGB
  54+ 0000              L2ColourPINK_1		    EQU 231                 ; RGB
  55+ 0000              L2ColourPINK_2		    EQU 226                 ; RGB
  56+ 0000              L2ColourPINK_3		    EQU 225                 ; RGB
  57+ 0000              L2ColourPINK_4		    EQU 224                 ; RGB
  58+ 0000
# file closed: ./Hardware/L2ColourDefines.asm
  73  0000                  INCLUDE "./Hardware/L1ColourDefines.asm"
# file opened: ./Hardware/L1ColourDefines.asm
   1+ 0000
   2+ 0000              L1ColourInkBlack        EQU %00000000
   3+ 0000              L1ColourInkBlue         EQU %00000001
   4+ 0000              L1ColourInkRed          EQU %00000010
   5+ 0000              L1ColourInkMagenta      EQU %00000011
   6+ 0000              L1ColourInkGreen        EQU %00000100
   7+ 0000              L1ColourInkCyan         EQU %00000101
   8+ 0000              L1ColourInkYellow       EQU %00000110
   9+ 0000              L1ColourInkWhite        EQU %00000111
  10+ 0000              L1ColourPaperBlack      EQU %00000000
  11+ 0000              L1ColourPaperBlue       EQU %00001000
  12+ 0000              L1ColourPaperRed        EQU %00010000
  13+ 0000              L1ColourPaperMagenta    EQU %00011000
  14+ 0000              L1ColourPaperGreen      EQU %00100000
  15+ 0000              L1ColourPaperCyan       EQU %00101000
  16+ 0000              L1ColourPaperYellow     EQU %00110000
  17+ 0000              L1ColourPaperWhite      EQU %00111000
  18+ 0000              L1ColourFlash           EQU %10000000
  19+ 0000              L1ColourBright          EQU %01000000
  20+ 0000              ;----------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              ; Screen Specific Colour Defines
  22+ 0000              L1InvHighlight          EQU L1ColourBright | L1ColourPaperRed   | L1ColourInkYellow
  23+ 0000              L1InvLowlight           EQU                  L1ColourPaperBlack | L1ColourInkWhite
# file closed: ./Hardware/L1ColourDefines.asm
  74  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  75  0000              ; Total screen list
  76  0000              ; Local Chart
  77  0000              ; Galactic Chart
  78  0000              ; Market Prices
  79  0000              ; Inventory
  80  0000              ; Comander status
  81  0000              ; System Data
  82  0000              ; Mission Briefing
  83  0000              ; missio completion
  84  0000              ; Docked  Menu (only place otehr than pause you can load and save)
  85  0000              ; Pause Menu (only place you can load from )
  86  0000              ; byint and selling equipment
  87  0000              ; bying and selling stock
  88  0000
  89  0000                                      INCLUDE "./Hardware/register_defines.asm"
# file opened: ./Hardware/register_defines.asm
   1+ 0000              ; Peripheral 2
   2+ 0000              ENABLE_CPU_SPEED_MODE                   EQU %10000000
   3+ 0000              DIVERT_BEEP_ONLY                        EQU %01000000
   4+ 0000              ENABLE_50_60_SWITCH                     EQU %00100000
   5+ 0000              ENABLE_MMCAUTO_SWITCH                   EQU %00010000
   6+ 0000              ENABLE_MULTIFACE_M1                     EQU %00001000
   7+ 0000              PS2MODE_KEYBOARD                        EQU %00000000
   8+ 0000              PS2MODE_MOUSE                           EQU %00000100
   9+ 0000              AUDIO_CHIPMODE_YM                       EQU %00000000
  10+ 0000              AUDIO_CHIPMODE_AY                       EQU %00000001
  11+ 0000              AUDIO_CHIPMODE_DISABLED                 EQU %00000010
  12+ 0000              INTERNAL_SPEAKER_ENABLE                 EQU %00010000
  13+ 0000              ; Peripheral 3
  14+ 0000              UNLOCK_PORT_7FFD_PAGING                 EQU %10000000
  15+ 0000              DISABLE_RAM_IO_CONTENTION               EQU %01000000
  16+ 0000              AY_STEREO_MODE_ACB                      EQU %00100000
  17+ 0000              INTERNAL_SPEAKER                        EQU %00010000
  18+ 0000              ENABLE_DACS                             EQU %00001000
  19+ 0000              ENABLE_TIMEX_VIDEO_MODE                 EQU %00000100
  20+ 0000              ENABLE_TURBO_SOUND                      EQU %00000010
  21+ 0000              ENABLE_ISSUE2_KEYBOARD                  EQU %00000001
  22+ 0000              ; Peripheral 4
  23+ 0000              ENABLE_AY2_MONO                         EQU %10000000
  24+ 0000              ENABLE_AY1_MONO                         EQU %01000000
  25+ 0000              ENABLE_AY0_MONO                         EQU %00100000
  26+ 0000              SPRITE_ID_LOCKSTEP                      EQU %00010000
  27+ 0000              RESET_DIVMMC_MAPRAM                     EQU %00001000
  28+ 0000              SILENCE_HDMI_AUDIO                      EQU %00000100
  29+ 0000              SCALLINES_50PCT                         EQU %00000001
  30+ 0000              SCANLINES_25PCT                         EQU %00000010
  31+ 0000              SCANLINES_125PCT                        EQU %00000011
  32+ 0000              ; Audio Registers
  33+ 0000              CHANNEL_A_FINE                          EQU 0
  34+ 0000              CHANNEL_A_COARSE                        EQU 1
  35+ 0000              CHANNEL_B_FINE                          EQU 2
  36+ 0000              CHANNEL_B_COARSE                        EQU 3
  37+ 0000              CHANNEL_C_FINE                          EQU 4
  38+ 0000              CHANNEL_C_COARSE                        EQU 5
  39+ 0000              NOISE_PERIOD                            EQU 6
  40+ 0000              TONE_ENABLE                             EQU 7
  41+ 0000              CHANNEL_A_AMPLITUDE                     EQU 8
  42+ 0000              CHANNEL_B_AMPLITUDE                     EQU 9
  43+ 0000              CHANNEL_C_AMPLITUDE                     EQU 10
  44+ 0000              ENVELOPE_PERIOD_FINE                    EQU 11
  45+ 0000              ENVELOPE_PERIOD_COARSE                  EQU 12
  46+ 0000              ENVELOPE_SHAPE                          EQU 13
  47+ 0000
  48+ 0000              ENVELOPE_HOLD_ON                        EQU 1
  49+ 0000              ENVELOPE_ALTERNATE_ON                   EQU 2
  50+ 0000              ENVELOPE_ATTACK_ON                      EQU 4
  51+ 0000              ENVELOPE_CONTINUE_ON                    EQU 8
  52+ 0000
  53+ 0000              ENVELOPE_SHAPE_SINGLE_DECAY             EQU 0                                                                                    ; \____________
  54+ 0000              ENVELOPE_SHAPE_SINGLE_ATTACK            EQU                        ENVELOPE_ATTACK_ON                                            ; /|___________
  55+ 0000              ENVELOPE_SHAPE_REPEAT_DECAY             EQU ENVELOPE_CONTINUE_ON                                                                 ; \|\|\|\|\|\|\
  56+ 0000              ENVELOPE_SHAPE_REPEAT_DECAY_ATTACK      EQU ENVELOPE_CONTINUE_ON |                      ENVELOPE_ALTERNATE_ON                    ; \/\/\/\/\/\/\
  57+ 0000              ENVELOPE_SHAPE_SINGLE_DECAY_HOLD        EQU ENVELOPE_CONTINUE_ON |                      ENVELOPE_ALTERNATE_ON | ENVELOPE_HOLD_ON ; \|-----------
  58+ 0000              ENVELOPE_SHAPE_REPEAT_ATTACK            EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON                                            ; /|/|/|/|/|/|/|
  59+ 0000              ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD       EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON |                         ENVELOPE_HOLD_ON ; /------------
  60+ 0000              ENVELOPE_SHAPE_REPEAT_ATTACK_DECAY      EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON | ENVELOPE_ALTERNATE_ON                    ; /\/\/\/\/\/\/
  61+ 0000
  62+ 0000              ENVELOPE_HOLD                           EQU %00000001
  63+ 0000              ENVELOPE_ALTERNATE                      EQU %00000010
  64+ 0000              ENVELOPE_ATTACK                         EQU %00000010
  65+ 0000              ENVELOPE_CONTINUE                       EQU %00000010
  66+ 0000              ; Sound Control
  67+ 0000              TONE_CHANNEL_A                          EQU %00000001
  68+ 0000              TONE_CHANNEL_B                          EQU %00000010
  69+ 0000              TONE_CHANNEL_C                          EQU %00000100
  70+ 0000              NOISE_CHANNEL_A                         EQU %00001000
  71+ 0000              NOISE_CHANNEL_B                         EQU %00010000
  72+ 0000              NOISE_CHANNEL_C                         EQU %00100000
  73+ 0000              ; Version for AND to enabled (its inverted)
  74+ 0000              TONE_CHANNEL_A_ON                       EQU %11111110
  75+ 0000              TONE_CHANNEL_B_ON                       EQU %11111101
  76+ 0000              TONE_CHANNEL_C_ON                       EQU %11111011
  77+ 0000              NOISE_CHANNEL_A_ON                      EQU %11110111
  78+ 0000              NOISE_CHANNEL_B_ON                      EQU %11101111
  79+ 0000              NOISE_CHANNEL_C_ON                      EQU %11011111
  80+ 0000
  81+ 0000              ; Turbo Sound Control
  82+ 0000              TURBO_MANDATORY                         EQU %10011100
  83+ 0000              TURBO_LEFT                              EQU %01000000
  84+ 0000              TURBO_RIGHT                             EQU %00100000
  85+ 0000              TURBO_CHIP_AY3                          EQU %00000011
  86+ 0000              TURBO_CHIP_AY2                          EQU %00000010
  87+ 0000              TURBO_CHIP_AY1                          EQU %00000001
  88+ 0000
  89+ 0000              IO_LAYER2_PORT                          EQU $123B
  90+ 0000              IO_EXT_BANK_PORT 			            EQU $DFFD ; 57341
  91+ 0000              IO_BANK_PORT                            EQU $7FFD ; 32765
  92+ 0000              REGISTER_NUMBER_PORT					EQU $243B
  93+ 0000              REGISTER_VALUE_PORT						EQU $253B
  94+ 0000              SPRITE_SLOT_PORT						EQU $303B ; port for sprite and pattern index
  95+ 0000              SPRITE_INFO_PORT                        EQU $0057
  96+ 0000              SPRITE_PATTERN_UPLOAD_PORT				EQU $005B
  97+ 0000              TURBO_SOUND_NEXT_CONTROL                EQU $FFFD
  98+ 0000              SOUND_CHIP_REGISTER_WRITE               EQU $BFFD
  99+ 0000              IO_KEYBOARD_PORT                        EQU $FE
 100+ 0000              IO_DATAGEAR_DMA_PORT 		            EQU $6B
 101+ 0000              UART_TX_PORT_PORT                       EQU $133B
 102+ 0000              UART_RX_PORT_PORT                       EQU $143B
 103+ 0000              UART_CONTROL_PORT                       EQU $153B
 104+ 0000              UART_FRAME_PORT                         EQU $163B
 105+ 0000              CTC_CHANNEL1_PORT                       EQU $183B
 106+ 0000              CTC_CHANNEL2_PORT                       EQU $193B
 107+ 0000              CTC_CHANNEL3_PORT                       EQU $1A3B
 108+ 0000              CTC_CHANNEL4_PORT                       EQU $1B3B
 109+ 0000              PLUS_3_MEMORY_PAGING_CONTROL_PORT       EQU $1FFD
 110+ 0000              MB02_DMA_PORT                           EQU $0B
 111+ 0000              SPECDRUM_DAC_OUTPUT                     EQU $DF
 112+ 0000
 113+ 0000              Speed_3_5MHZ                            EQU 0
 114+ 0000              Speed_7MHZ                              EQU 1
 115+ 0000              Speed_14MHZ                             EQU 2
 116+ 0000              Speed_28MHZ                             EQU 3
 117+ 0000
 118+ 0000
 119+ 0000              MACHINE_ID_REGISTER						EQU 0
 120+ 0000              VERSION_REGISTER						EQU 1
 121+ 0000              RESET_REGISTER		    				EQU 2
 122+ 0000              MACHINE_TYPE_REGISTER					EQU 3
 123+ 0000              PAGE_RAM_REGISTER						EQU 4
 124+ 0000              PERIPHERAL_1_REGISTER					EQU 5   ; Sets joystick mode, video frequency and Scandoubler
 125+ 0000              PERIPHERAL_2_REGISTER					EQU 6   ; Enables CPU Speed key, DivMMC, Multiface, Mouse and AY audio.
 126+ 0000              TURBO_MODE_REGISTER						EQU 7
 127+ 0000              PERIPHERAL_3_REGISTER					EQU 8   ; ABC/ACB Stereo, Internal Speaker, SpecDrum, Timex Video Modes, Turbo Sound Next, RAM contention and [un]lock 128k paging
 128+ 0000              PERIPHERAL_4_REGISTER                   EQU 9   ; Sets scanlines, AY mono output, Sprite-id lockstep, reset DivMMC mapram and disable HDMI audio
 129+ 0000              PERIPHERAL_5_REGISTER                   EQU 10  ; Mouse
 130+ 0000              CORE_VERSION_REGISTER                   EQU 14
 131+ 0000              ANTI_BRICK_SYSTEM_REGISTER				EQU 16
 132+ 0000              VIDEO_TIMING_REGISTER                   EQU 17
 133+ 0000              LAYER2_RAM_PAGE_REGISTER				EQU 18
 134+ 0000              LAYER2_RAM_SHADOW_REGISTER      		EQU 19
 135+ 0000              TRANSPARENCY_COLOUR_REGISTER			EQU 20
 136+ 0000              SPRITE_LAYERS_SYSTEM_REGISTER			EQU 21
 137+ 0000              LAYER2_OFFSET_X_REGISTER				EQU 22
 138+ 0000              LAYER2_OFFSET_Y_REGISTER				EQU 23
 139+ 0000              CLIP_WINDOW_LAYER2_REGISTER				EQU 24
 140+ 0000              CLIP_WINDOW_SPRITES_REGISTER			EQU 25
 141+ 0000              CLIP_WINDOW_ULA_REGISTER				EQU 26
 142+ 0000              CLIP_WINDOW_TILEMAP_REGISTER            EQU 27
 143+ 0000              CLIP_WINDOW_CONTROL_REGISTER			EQU 28
 144+ 0000              ;29 not used
 145+ 0000              ACTIVE_VIDEO_LINE_MSB_REGISTER			EQU 30
 146+ 0000              ACTIVE_VIDEO_LINE_LSB_REGISTER			EQU 31
 147+ 0000              ; 32 to 34 not used
 148+ 0000              LINE_INTERRUPT_CONTROL_REGISTER			EQU 34
 149+ 0000              LINE_INTERRUPT_VALUE_LSB_REGISTER		EQU 35
 150+ 0000              ULA_X_OFFSET_REGISTER                   EQU 38
 151+ 0000              ULA_Y_OFFSET_REGSITER                   EQU 39
 152+ 0000              KEYMAP_HIGH_ADDRESS_REGISTER			EQU 40
 153+ 0000              KEYMAP_LOW_ADDRESS_REGISTER				EQU 41
 154+ 0000              KEYMAP_HIGH_DATA_REGISTER				EQU 42
 155+ 0000              KEYMAP_LOW_DATA_REGISTER				EQU 43
 156+ 0000              DAC_B_MIRROR_REGISTER                   EQU 44
 157+ 0000              DAC_AB_MIRROR_REGISTER                  EQU 45
 158+ 0000              DAC_C_MORROR_REGISTER                   EQU 46
 159+ 0000              TILEMAP_OFFSET_XMSB_REGISTER            EQU 47
 160+ 0000              TILEMAP_OFFSET_XLSB_REGISTER            EQU 48
 161+ 0000              TILEMAP_OFFSET_YMSB_REGISTER            EQU 49
 162+ 0000              LORES_OFFSET_X_REGISTER					EQU 50
 163+ 0000              LORES_OFFSET_Y_REGISTER					EQU 51
 164+ 0000              SPRITE_PORT_INDEX_REGISTER              EQU 52
 165+ 0000              SPRITE_PORT_ATTR0_REGISTER              EQU 53
 166+ 0000              SPRITE_PORT_ATTR1_REGISTER              EQU 54
 167+ 0000              SPRITE_PORT_ATTR2_REGISTER              EQU 55
 168+ 0000              SPRITE_PORT_ATTR3_REGISTER              EQU 56
 169+ 0000              SPRITE_PORT_ATTR4_REGISTER              EQU 57
 170+ 0000              PALETTE_INDEX_REGISTER					EQU 64
 171+ 0000              PALETTE_VALUE_8BIT_REGISTER				EQU 65
 172+ 0000              PALETTE_FORMAT_REGISTER					EQU 66
 173+ 0000              PALETTE_CONTROL_REGISTER				EQU 67
 174+ 0000              PALETTE_VALUE_9BIT_REGISTER				EQU 68
 175+ 0000              TRANSPARENCY_COLOUR_FALLBACK_REGISTER   EQU 69
 176+ 0000              SPRITES_TRANSPARENCY_INDEX_REGISTER     EQU 70
 177+ 0000              TILEMAP_TRANSPARENCY_INDEX_REGISTER     EQU 71
 178+ 0000              ; 72 to 79 unused
 179+ 0000              MMU_SLOT_0_REGISTER						EQU 80
 180+ 0000              MMU_SLOT_1_REGISTER						EQU 81
 181+ 0000              MMU_SLOT_2_REGISTER						EQU 82
 182+ 0000              MMU_SLOT_3_REGISTER						EQU 83
 183+ 0000              MMU_SLOT_4_REGISTER						EQU 84
 184+ 0000              MMU_SLOT_5_REGISTER						EQU 85
 185+ 0000              MMU_SLOT_6_REGISTER						EQU 86
 186+ 0000              MMU_SLOT_7_REGISTER						EQU 87
 187+ 0000              ; 88 to 95 unused
 188+ 0000              COPPER_DATA_REGISTER					EQU 96
 189+ 0000              COPPER_CONTROL_LOW_REGISTER				EQU 97
 190+ 0000              COPPER_CONTROL_HIGH_REGISTER			EQU 98
 191+ 0000              COPPER_DATA_16BIT_WRITE_REGISTER        EQU 99
 192+ 0000              VERTICAL_VIDEO_LINE_OFFSET_REGISTER     EQU 100
 193+ 0000              ULA_CONTROL_REGISTER                    EQU 104
 194+ 0000              DISPLAY_CONTROL_1_REGISTER              EQU 105
 195+ 0000              LORES_CONTROL_REGISTER                  EQU 106
 196+ 0000              TILEMAP_CONTROL_REGISTER                EQU 107
 197+ 0000              DEFAULT_TILEMAP_ATTRIBUTE_REGISTER      EQU 108
 198+ 0000              ; 109 unused
 199+ 0000              TILEMAP_BASE_ADDRESS_REGISTER           EQU 110
 200+ 0000              TILE_DEFINITIONS_BASE_ADDRESS_REGISTER  EQU 111
 201+ 0000              LAYER_2_CONTROL_REGISTER                EQU 112
 202+ 0000              LAYER_2_X_OFFSET_MSB_REGISTER           EQU 113
 203+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_1          EQU 114
 204+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_2          EQU 115
 205+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_3          EQU 116
 206+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_4          EQU 117
 207+ 0000              USER_STORAGE_0_REGISTER                 EQU 118 ; general purpose variable, e.g. for copper
 208+ 0000              EXPANSION_BUS_ENABLE_REGISTER           EQU 128
 209+ 0000              EXTENDED_KEYS_0_REGISTER                EQU 176
 210+ 0000              EXTENDED_KEYS_1_REGISTER                EQU 177
 211+ 0000
 212+ 0000              INTERUPT_CONTROL                        EQU $0C ; Interrupt control
 213+ 0000              NMI_RETURN_LSB				            EQU	$0C2	; NMI Return Address LSB
 214+ 0000              NMI_RETURN_MSB				            EQU	$0C3	; NMI Return Address MSB
 215+ 0000              INTERRUPT_EN0				            EQU	$0C4	; INT EN 0
 216+ 0000              INTERRUPT_EN1				            EQU	$0C5	; INT EN 1
 217+ 0000              INTERRUPT_EN2				            EQU	$0C6	; INT EN 2
 218+ 0000              INTERRUPT_ST0				            EQU	$0C8	; INT status 0
 219+ 0000              INTERRUPT_ST1				            EQU	$0C9	; INT status 1
 220+ 0000              INTERRUPT_ST2				            EQU	$0CA	; INT status 2
 221+ 0000              INTERRUPT_DM0				            EQU	$0CC	; INT DMA EN 0
 222+ 0000              INTERRUPT_DM1				            EQU	$0CD	; INT DMA EN 1
 223+ 0000              INTERRUPT_DM2				            EQU	$0CE	; INT DMA EN 2
 224+ 0000              CTC_CHANNEL_0				            EQU	$183B	; CTC channel 0 port
 225+ 0000              CTC_CHANNEL_1				            EQU	$193B	; CTC channel 1 port
 226+ 0000              CTC_CHANNEL_2				            EQU	$1A3B	; CTC channel 2 port
 227+ 0000              CTC_CHANNEL_3				            EQU	$1B3B	; CTC channel 3 port
 228+ 0000              CTC_CHANNEL_4				            EQU	$1C3B	; CTC channel 4 port
 229+ 0000              CTC_CHANNEL_5				            EQU	$1D3B	; CTC channel 5 port
 230+ 0000              CTC_CHANNEL_6				            EQU	$1E3B	; CTC channel 6 port
 231+ 0000              CTC_CHANNEL_7				            EQU	$1F3B	; CTC channel 7 port
 232+ 0000              CTCBASE                                 EQU $c0		; MSB Base address of buffer
 233+ 0000              CTCSIZE                                 EQU $04 	; MSB buffer length
 234+ 0000              CTCEND                                  EQU CTCBASE+(CTCSIZE*2)
 235+ 0000
 236+ 0000
 237+ 0000              DEBUG_LEDS_REGISTER						EQU 255
 238+ 0000
 239+ 0000
 240+ 0000              GetNextRegSaveBC:	MACRO register
 241+ 0000 ~                                push bc
 242+ 0000 ~                                ld bc,$243B
 243+ 0000 ~                                ld a,register
 244+ 0000 ~                                out (c),a
 245+ 0000 ~                                inc b
 246+ 0000 ~                                in a,(c)
 247+ 0000 ~                                pop bc
 248+ 0000                                  ENDM
 249+ 0000
 250+ 0000              GetNextReg:	MACRO register
 251+ 0000 ~                        ld bc,$243B
 252+ 0000 ~                        ld a,register
 253+ 0000 ~                        out (c),a
 254+ 0000 ~                        inc b
 255+ 0000 ~                        in a,(c)
 256+ 0000                          ENDM
 257+ 0000
# file closed: ./Hardware/register_defines.asm
  90  0000                                      INCLUDE "./Layer2Graphics/layer2_defines.asm"
# file opened: ./Layer2Graphics/layer2_defines.asm
   1+ 0000
   2+ 0000
   3+ 0000              LAYER2_SHIFTED_SCREEN_TOP  	 equ 0
   4+ 0000              LAYER2_SHIFTED_SCREEN_MIDDLE equ $40
   5+ 0000              LAYER2_SHIFTED_SCREEN_BOTTOM equ $80
   6+ 0000
   7+ 0000              ; note hi byte is not decoded on DMA port so can out OUTIR
   8+ 0000
   9+ 0000              IO_SPRITE_SLOT_PORT 		 equ 12347
  10+ 0000              IO_SPRITE_PATTERN_PORT       equ 91
  11+ 0000              IO_SPRITE_ATTRIBUTES_PORT    equ 87
  12+ 0000
  13+ 0000              LAYER2_VISIBLE_MASK 		equ $02
  14+ 0000              ; DEBUG 0 for always write to primary 08 for double buffering
  15+ 0000                  IFDEF DOUBLEBUFFER
  16+ 0000              LAYER2_SHADOW_SCREEN_MASK 	equ $08
  17+ 0000                  ELSE
  18+ 0000 ~            LAYER2_SHADOW_SCREEN_MASK 	equ $00
  19+ 0000                  ENDIF
  20+ 0000              LAYER2_READ_ENABLE_MASK 	equ %00000100
  21+ 0000              LAYER2_WRITE_ENABLE_MASK 	equ %00000001
  22+ 0000              LAYER2_READ_WRITE_MASK      equ %00000101
  23+ 0000              LAYER2_SCREEN_SECTION_MASK 	equ $03
  24+ 0000              LAYER2_SCREEN_SECTION_SHIFT equ 6
  25+ 0000
  26+ 0000              LAYER2_DISABLE_MEM_WRITE    equ %11111110
  27+ 0000              LAYER2_DISABLE_MEM_READ     equ %11111011
  28+ 0000              LAYER2_DISABLE_MEM_ACCESS   equ %11111010
  29+ 0000
  30+ 0000              LAYER2_SCREEN_BANK1          equ 8
  31+ 0000              LAYER2_SCREEN_BANK2          equ 9
  32+ 0000              LAYER2_SCREEN_BANK3          equ 10
  33+ 0000              LAYER2_SCREEN_BANK4          equ 11     ; used by 320 and 640 mode
  34+ 0000              LAYER2_SCREEN_BANK5          equ 12     ; used by 320 and 640 mode
  35+ 0000              LAYER2_SHADOW_BANK1          equ 13
  36+ 0000              LAYER2_SHADOW_BANK2          equ 14
  37+ 0000              LAYER2_SHADOW_BANK3          equ 15
  38+ 0000              LAYER2_SHADOW_BANK4          equ 16     ; used by 320 and 640 mode
  39+ 0000              LAYER2_SHADOW_BANK5          equ 17     ; used by 320 and 640 mode
  40+ 0000
  41+ 0000              SCREEN_HEIGHT 				 equ 192
  42+ 0000              SCREEN_RAM_BASE				 equ $0000
  43+ 0000              SCREEN_HOZ_MIN_PIX		     equ 10
  44+ 0000
  45+ 0000              SPRITES_VISIBLE_MASK         equ $01
  46+ 0000              SPRITES_ON_BORDER_MASK       equ $02
  47+ 0000              LAYER_PRIORITIES_MASK        equ $07
  48+ 0000              LORES_MODE_MASK              equ $80
  49+ 0000              LAYER_PRIORITIES_SHIFT       equ 2
  50+ 0000
  51+ 0000              LAYER_PRIORITIES_S_L_U 		equ 0
  52+ 0000              LAYER_PRIORITIES_L_S_U 		equ 1
  53+ 0000              LAYER_PRIORITIES_S_U_L  	equ 2
  54+ 0000              LAYER_PRIORITIES_L_U_S 		equ 3
  55+ 0000              LAYER_PRIORITIES_U_S_L 		equ 4
  56+ 0000              LAYER_PRIORITIES_U_L_S 		equ 5
  57+ 0000
  58+ 0000              DMA_WRO_BLOCK_PORTA_A2B_XFR  equ $7D
  59+ 0000              DMA_WRO_BLOCK_PORTA_B2A_XFR  equ $79
  60+ 0000              DMA_WR1_P1FIXED_MEMORY       equ $24
  61+ 0000              DMA_WR1_P1DEC_MEMORY         equ $04
  62+ 0000              DMA_WR1_P1INC_MEMORY         equ $14
  63+ 0000              DMA_WR2_P2FIXED_MEMORY       equ $20
  64+ 0000              DMA_WR2_P2DEC_MEMORY         equ $00
  65+ 0000              DMA_WR2_P2INC_MEMORY         equ $10
  66+ 0000              DMA_WR4_CONT_MODE            equ $AD
  67+ 0000              DMA_WR4_BURST_MODE           equ $CD
  68+ 0000              DMA_RESET                    equ $c3
  69+ 0000              DMA_RESET_PORT_A_TIMING      equ $c7
  70+ 0000              DMA_RESET_PORT_B_TIMING      equ $cb
  71+ 0000              DMA_LOAD                     equ $cf
  72+ 0000              DMA_CONTINUE                 equ $d3
  73+ 0000              DMA_DISABLE_INTERUPTS        equ $af
  74+ 0000              DMA_ENABLE_INTERUPTS         equ $ab
  75+ 0000              DMA_RESET_DISABLE_INTERUPTS  equ $a3
  76+ 0000              DMA_ENABLE_AFTER_RETI        equ $b7
  77+ 0000              DMA_READ_STATUS_BYTE         equ $bf
  78+ 0000              DMA_REINIT_STATUS_BYTE       equ $8b
  79+ 0000              DMA_START_READ_SEQUENCE      equ $a7
  80+ 0000              DMA_FORCE_READY              equ $b3
  81+ 0000              DMA_STOP_AT_END			     equ $82
  82+ 0000              DMA_DISABLE                  equ $83
  83+ 0000              DMA_ENABLE                   equ $87
  84+ 0000              DMA_WRITE_REGISTER_COMMAND   equ $bb
  85+ 0000              DMA_BURST                    equ $cd
  86+ 0000              DMA_CONTINUOUS               equ $ad
  87+ 0000              ZXN_DMA_PORT                 equ $6b
  88+ 0000
  89+ 0000
  90+ 0000              COLOUR_TRANSPARENT			 equ $E3
  91+ 0000
  92+ 0000
  93+ 0000
  94+ 0000
# file closed: ./Layer2Graphics/layer2_defines.asm
  91  0000                                      INCLUDE	"./Hardware/memory_bank_defines.asm"
# file opened: ./Hardware/memory_bank_defines.asm
   1+ 0000
   2+ 0000              membanksize			    equ	$1FFF
   3+ 0000
   4+ 0000              StartOfBank     	    equ $0000
   5+ 0000
   6+ 0000              membank0 			    equ $0000
   7+ 0000              dmaCopySrcAddr		    equ	$0000
   8+ 0000              MathsTablesAddr         equ $0000
   9+ 0000              membank1 			    equ $2000
  10+ 0000              membank2 			    equ $4000
  11+ 0000              membank3 			    equ $6000
  12+ 0000              membank4 			    equ $8000
  13+ 0000              membank5 			    equ $a000
  14+ 0000              membank6 			    equ $c000
  15+ 0000              ScreenBank              equ $c000
  16+ 0000              MenuGalChtAddr          equ $c000
  17+ 0000              MenuEquipSAddr          equ $c000
  18+ 0000              MenuInventAddr          equ $c000
  19+ 0000              MenuMarketAddr          equ $c000
  20+ 0000              DispMarketAddr          equ $c000
  21+ 0000              MenuShrChtAddr          equ $c000
  22+ 0000              MenuStatusAddr          equ $c000
  23+ 0000              MenuSystemAddr          equ $c000
  24+ 0000              ViewFrontAddr           equ $c000
  25+ 0000              SunBankAddr             equ $c000
  26+ 0000              PlanetBankAddr          equ $c000
  27+ 0000              SpaceStationBankAddr    equ $c000
  28+ 0000              UniverseBankAddr	    equ $c000
  29+ 0000              LaunchShipAddr          equ $c000
  30+ 0000              membank7 			    equ $e000
  31+ 0000              L1membankAddr   	    equ $e000
  32+ 0000              L2membankAddr   	    equ $e000
  33+ 0000              ShipModelsAddr	        equ $e000
  34+ 0000              SpritemembankAddr       equ $e000
  35+ 0000              ResetUniverseAddr       equ $e000
  36+ 0000              StockTableAddr	        equ $e000
  37+ 0000              CommanderAddr           equ $e000
  38+ 0000              LAYER2Addr              equ $e000
  39+ 0000              LAYER1Addr              equ $e000
  40+ 0000              SPRITEAddr              equ $e000
  41+ 0000              ConsoleImageAddr        equ $e000
  42+ 0000              GalaxyDataAddr          equ $e000
  43+ 0000              SoundAddr               equ $e000
  44+ 0000              KeyboardAddr            equ $e000
  45+ 0000              MathsBankedFnsAddr      equ $0000
  46+ 0000
  47+ 0000              EXSDOSMMU0              equ MMU_SLOT_0_REGISTER
  48+ 0000              MathsTablesMMU          equ MMU_SLOT_0_REGISTER
  49+ 0000              MathsBankedFnsMMU       equ MMU_SLOT_0_REGISTER
  50+ 0000              ShipReadMMU             equ MMU_SLOT_0_REGISTER
  51+ 0000              DMACpySourceMMU		    equ	MMU_SLOT_0_REGISTER
  52+ 0000              EXSDOSMMU1              equ MMU_SLOT_1_REGISTER
  53+ 0000              SunMMU 		            equ MMU_SLOT_6_REGISTER
  54+ 0000              PlanetMMU 		        equ MMU_SLOT_6_REGISTER
  55+ 0000              UniverseMMU 		    equ MMU_SLOT_6_REGISTER
  56+ 0000              SpaceStationMMU         equ MMU_SLOT_6_REGISTER
  57+ 0000              ScreenBankMMU           equ MMU_SLOT_6_REGISTER
  58+ 0000              MenuEquipSMMU           equ MMU_SLOT_6_REGISTER
  59+ 0000              MenuShrChtMMU           equ MMU_SLOT_6_REGISTER
  60+ 0000              MenuGalChtMMU           equ MMU_SLOT_6_REGISTER
  61+ 0000              MenuInventMMU           equ MMU_SLOT_6_REGISTER
  62+ 0000              MenuSystemMMU           equ MMU_SLOT_6_REGISTER
  63+ 0000              MenuMarketMMU           equ MMU_SLOT_6_REGISTER
  64+ 0000              DispMarketMMU           equ MMU_SLOT_6_REGISTER
  65+ 0000              MenuStatusMMU           equ MMU_SLOT_6_REGISTER
  66+ 0000              LaunchShipMMU           equ MMU_SLOT_6_REGISTER
  67+ 0000              L1memMMU       		    equ MMU_SLOT_7_REGISTER
  68+ 0000              L2memMMU       		    equ MMU_SLOT_7_REGISTER
  69+ 0000              SpritememMMU   		    equ MMU_SLOT_7_REGISTER
  70+ 0000              ShipModelMMU  		    equ MMU_SLOT_7_REGISTER
  71+ 0000              ResetUniverseMMU	    equ MMU_SLOT_7_REGISTER
  72+ 0000              CommanderMMU	        equ MMU_SLOT_7_REGISTER
  73+ 0000              StockTableMMU		    equ MMU_SLOT_7_REGISTER
  74+ 0000              ConsoleImageDataMMU	    equ MMU_SLOT_7_REGISTER
  75+ 0000              GalaxyDataMMU	        equ MMU_SLOT_7_REGISTER
  76+ 0000              SoundMMU                equ MMU_SLOT_7_REGISTER
  77+ 0000              KeyboardMMU             equ MMU_SLOT_7_REGISTER
  78+ 0000
  79+ 0000              ; banks 8 to 17 are reserved for layer 2 memory
  80+ 0000              BankResetUniv           equ 49
  81+ 0000              BankMenuShrCht          equ 50
  82+ 0000              BankMenuGalCht          equ 51
  83+ 0000              BankMenuInvent          equ 52
  84+ 0000              BankMenuSystem          equ 53
  85+ 0000              BankMenuMarket          equ 54
  86+ 0000              BankStockTable          equ 55
  87+ 0000              BankCommander           equ 56
  88+ 0000              BankLAYER2              equ 57
  89+ 0000              BankLAYER1              equ 58
  90+ 0000              BankShipModels1         equ 59
  91+ 0000              BankSPRITE              equ 60
  92+ 0000              BankConsole             equ 61
  93+ 0000              BankFrontView           equ 62
  94+ 0000              BankMenuStatus          equ 63
  95+ 0000              BankMenuEquipS          equ 64
  96+ 0000              BankLaunchShip          equ 65
  97+ 0000              BankDispMarket          equ 66
  98+ 0000              BankShipModels2         equ 67
  99+ 0000              BankShipModels3         equ 68
 100+ 0000              BankShipModels4         equ 69
 101+ 0000
 102+ 0000              BankUNIVDATA0           equ 70
 103+ 0000              BankSpaceStationData    equ 70
 104+ 0000              BankUNIVDATA1           equ 71
 105+ 0000              BankUNIVDATA2           equ 72
 106+ 0000              BankUNIVDATA3           equ 73
 107+ 0000              BankUNIVDATA4           equ 74
 108+ 0000              BankUNIVDATA5           equ 75
 109+ 0000              BankUNIVDATA6           equ 76
 110+ 0000              BankUNIVDATA7           equ 77
 111+ 0000              BankUNIVDATA8           equ 78
 112+ 0000              BankUNIVDATA9           equ 79
 113+ 0000              BankUNIVDATA10          equ 80
 114+ 0000              BankUNIVDATA11          equ 81
 115+ 0000              BankUNIVDATA12          equ 82
 116+ 0000              BankSunData             equ 83
 117+ 0000              BankPlanetData          equ 84
 118+ 0000
 119+ 0000              BankGalaxyData0         equ 91
 120+ 0000              BankGalaxyData1         equ 92
 121+ 0000              BankGalaxyData2         equ 93
 122+ 0000              BankGalaxyData3         equ 94
 123+ 0000              BankGalaxyData4         equ 95
 124+ 0000              BankGalaxyData5         equ 96
 125+ 0000              BankGalaxyData6         equ 97
 126+ 0000              BankGalaxyData7         equ 98
 127+ 0000
 128+ 0000              BankMathsTables         equ 99
 129+ 0000              BankSound               equ 100
 130+ 0000              BankKeyboard            equ 101
 131+ 0000              BankMathsBankedFns      equ 102
 132+ 0000
 133+ 0000              BankROM                 equ 255
 134+ 0000
 135+ 0000
# file closed: ./Hardware/memory_bank_defines.asm
  92  0000                                      INCLUDE "./Hardware/screen_equates.asm"
# file opened: ./Hardware/screen_equates.asm
   1+ 0000              ScreenHeight 		equ 192
   2+ 0000              ScreenLastRow       equ ScreenHeight -1
   3+ 0000              ScreenWidth  		equ 256
   4+ 0000              ScreenLastCol       equ ScreenWidth -1
   5+ 0000              ScreenHeightHalf	equ 96
   6+ 0000              ScreenWidthHalf  	equ 128
   7+ 0000              ScreenCenterY		equ 96
   8+ 0000              ScreenCenterX       equ 128
   9+ 0000              ViewHeight          equ 128
  10+ 0000              ViewHeightPlus1     equ 128+1
  11+ 0000              ViewLastRow       	equ ViewHeight -1
  12+ 0000              ViewWidth  			equ 256
  13+ 0000              ViewLastCol         equ ViewWidth -1
  14+ 0000              ViewHeightHalf      equ 63
  15+ 0000              ViewWidthHalf       equ 127
  16+ 0000              ViewCenterY         equ 64
  17+ 0000              ViewCenterX         equ 128
  18+ 0000                                      DISPLAY "TODO: place odler for debugging"
  19+ 0000              ShipColour			equ $FF		; place holder for debugging TODO
  20+ 0000              ScreenL1Bottom      equ $5000
  21+ 0000              ScreenL1BottomLen   equ 32 * 8 * 8
  22+ 0000              ScreenL1AttrBtm     equ $5A00
  23+ 0000              ScreenL1AttrBtmLen  equ 32 * 8
  24+ 0000
# file closed: ./Hardware/screen_equates.asm
  93  0000                                      INCLUDE "./Data/ShipModelEquates.asm"
# file opened: ./Data/ShipModelEquates.asm
   1+ 0000              ScoopDebrisOffset	        equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   2+ 0000              MissileLockLoOffset	        equ 1
   3+ 0000              MissileLockHiOffset	        equ 2
   4+ 0000              EdgeAddyOffset		        equ 3
   5+ 0000              LineX4Offset		        equ 5
   6+ 0000              GunVertexOffset		        equ 6
   7+ 0000              ExplosionCtOffset	        equ 7
   8+ 0000              VertexCountOffset           equ 8
   9+ 0000              VertexCtX6Offset	        equ 9
  10+ 0000              EdgeCountOffset		        equ 10
  11+ 0000              BountyLoOffset		        equ 11
  12+ 0000              BountyHiOffset		        equ 12
  13+ 0000              FaceCtX4Offset		        equ 13
  14+ 0000              DotOffset			        equ 14
  15+ 0000              EnergyOffset		        equ 15
  16+ 0000              SpeedOffset			        equ 16
  17+ 0000              FaceAddyOffset		        equ 17
  18+ 0000              QOffset				        equ 19
  19+ 0000              LaserOffset			        equ 20
  20+ 0000              VerticiesAddyOffset         equ 21
  21+ 0000              ShipTypeOffset              equ 23
  22+ 0000              ShipNewBitsOffset           equ 24
  23+ 0000              ShipAIFlagsOffset           equ 25
  24+ 0000              ShipECMFittedChanceOffset   equ 26
  25+ 0000              ShipSolidFlagOffset         equ 27 ; Intially for non cargo these will be garbage
  26+ 0000              ShipSolidFillOffset         equ 28
  27+ 0000              ShipSolidLenOffset          equ 29
  28+ 0000              ShipDataLength              equ ShipECMFittedChanceOffset+1
  29+ 0000
  30+ 0000              CobraTablePointer           equ 43
  31+ 0000              ;29 faulty
  32+ 0000              BankThreshold               equ 16
  33+ 0000
  34+ 0000              ShipTableALast              equ 23
  35+ 0000              ShipTableBLast              equ 39
  36+ 0000              ShipTableCLast              equ 55
  37+ 0000
# file closed: ./Data/ShipModelEquates.asm
  94  0000                                      INCLUDE "./Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1+ 0000              InitNoDoubleBuffer:         MACRO
   2+ 0000 ~                                        MMUSelectLayer1
   3+ 0000 ~                                        call	l1_cls
   4+ 0000 ~                                        ld		a,7
   5+ 0000 ~                                        call	l1_attr_cls_to_a
   6+ 0000 ~                                        MMUSelectLayer2
   7+ 0000 ~                                        call    asm_l2_double_buffer_off
   8+ 0000 ~                                        call	l2_cls	; Get some space
   9+ 0000 ~                                        MMUSelectSpriteBank
  10+ 0000 ~                                        call    sprite_cls_cursors
  11+ 0000                                          ENDM
  12+ 0000
  13+ 0000
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
  95  0000                                      INCLUDE "./Macros/graphicsMacros.asm"
# file opened: ./Macros/graphicsMacros.asm
   1+ 0000              ; General Graphics macros
   2+ 0000              DoubleBufferIfPossible: MACRO
   3+ 0000 ~                                    IFDEF DOUBLEBUFFER
   4+ 0000 ~                                        MMUSelectLayer2
   5+ 0000 ~                                        call  l2_cls
   6+ 0000 ~                                        call  l2_flip_buffers
   7+ 0000 ~                                    ENDIF
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              DoubleBuffer320IfPossible: MACRO
  11+ 0000 ~                                    IFDEF DOUBLEBUFFER
  12+ 0000 ~                                        MMUSelectLayer2
  13+ 0000 ~                                        call  l2_320_cls
  14+ 0000 ~                                        call  l2_flip_buffers
  15+ 0000 ~                                    ENDIF
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              DoubleBuffer640IfPossible: MACRO
  19+ 0000 ~                                    IFDEF DOUBLEBUFFER
  20+ 0000 ~                                        MMUSelectLayer2
  21+ 0000 ~                                        call  l2_640_cls
  22+ 0000 ~                                        call  l2_flip_buffers
  23+ 0000 ~                                    ENDIF
  24+ 0000                                      ENDM
  25+ 0000
  26+ 0000
  27+ 0000
  28+ 0000              ErrorEquStepMinusDelta: MACRO   delta_step, delta_value
  29+ 0000 ~                                    ld      hl,(delta_step)
  30+ 0000 ~                                    ld      de,(delta_value)
  31+ 0000 ~                                    ClearCarryFlag
  32+ 0000 ~                                    sbc     hl,de
  33+ 0000 ~                                    ld      (error),hl
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              ; we could hold steps and deltas in alternate registers later
  37+ 0000              ErrorPlusStep:          MACRO   delta_step
  38+ 0000 ~                                    ld      hl,(error)
  39+ 0000 ~                                    ld      de,(delta_step)
  40+ 0000 ~                                    add     hl,de
  41+ 0000 ~                                    ld      (error),hl
  42+ 0000                                      ENDM
  43+ 0000
  44+ 0000              ErrorMinusStep:         MACRO   delta_step
  45+ 0000 ~                                    ld      hl,(error)
  46+ 0000 ~                                    ld      de,(delta_step)
  47+ 0000 ~                                    ClearCarryFlag
  48+ 0000 ~                                    sbc     hl,de
  49+ 0000 ~                                    ld      (error),hl
  50+ 0000                                      ENDM
  51+ 0000
  52+ 0000              SetExitFalse:           MACRO
  53+ 0000 ~                                    xor     a
  54+ 0000 ~                                    ld      (set_exit),a
  55+ 0000                                      ENDM
  56+ 0000
  57+ 0000              ; pulls axis high byte to a, returns nz if negative, z if positive
  58+ 0000              IsAxisLT0:              MACRO   axis
  59+ 0000 ~                                    ld      a,(axis+1)
  60+ 0000 ~                                    and     $80
  61+ 0000                                      ENDM
  62+ 0000
  63+ 0000              ; modifies HL, loaded with register, returns z if >=0, nz if negative
  64+ 0000              IsMemld16GTE0           MACRO   mem
  65+ 0000 ~                                    ld      hl, (mem)
  66+ 0000 ~                                    bit     7,h
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              IsMemNegative8JumpFalse:MACRO   mem, target
  70+ 0000 ~                                    ld      a,(mem)
  71+ 0000 ~                                    and     $80
  72+ 0000 ~                                    jp      z, target
  73+ 0000                                      ENDM
  74+ 0000
  75+ 0000              IsMem16GT0JumpFalse:    MACRO   mem, target
  76+ 0000 ~                                    ld      hl, (mem)
  77+ 0000 ~                                    bit     7,h
  78+ 0000 ~                                    jp      nz, target
  79+ 0000 ~                                    ld      a,h
  80+ 0000 ~                                    or      l
  81+ 0000 ~                                    jp      z,  target
  82+ 0000                                      ENDM
  83+ 0000
  84+ 0000              FloorHLdivDETarget:     MACRO   target
  85+ 0000 ~                                    call    l_div                   ;       .  (so we swap and call l_div) HL = DE / HL, DE = DE % HL
  86+ 0000 ~                                    ld      a,d                     ;       .  get bit 7 into carry (set if negative)
  87+ 0000 ~                                    sla     a                       ;
  88+ 0000 ~                                    jr      nc,.FloorIsOK           ;
  89+ 0000 ~            .FloorAdjust:           dec     hl                      ;       .  if remainder >= adjust by 1 for negative
  90+ 0000 ~            .FloorIsOK:             ld      (target),hl             ;       .  now save the msd value
  91+ 0000                                      ENDM
  92+ 0000
# file closed: ./Macros/graphicsMacros.asm
  96  0000                                      INCLUDE "./Macros/callMacros.asm"
# file opened: ./Macros/callMacros.asm
   1+ 0000
   2+ 0000              CallIfAEqNusng:         MACRO   reg,target
   3+ 0000 ~                                    cp      reg
   4+ 0000 ~                                    call	z,target
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              CallIfAGTENusng:        MACRO   reg,target
   8+ 0000 ~                                    cp      reg
   9+ 0000 ~                                    call	nc,target
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              CallIfAGTEMemusng:      MACRO   reg,target
  13+ 0000 ~                                    ld      hl,reg
  14+ 0000 ~                                    cp      (hl)
  15+ 0000 ~                                    call	nc,target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              CallIfALTMemusng:       MACRO   reg,target
  19+ 0000 ~                                    ld      hl,reg
  20+ 0000 ~                                    cp      (hl)
  21+ 0000 ~                                    call	c,target
  22+ 0000                                      ENDM
  23+ 0000
  24+ 0000              CallIfALTNusng:         MACRO   reg,target
  25+ 0000 ~                                    cp      reg
  26+ 0000 ~                                    call	c,target
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000              CallIfMemEqMemusng:     MACRO mem, address, target
  30+ 0000 ~                                    ld      a,(mem)
  31+ 0000 ~                                    ld      hl,address
  32+ 0000 ~                                    cp      (hl)
  33+ 0000 ~                                    call    z,target
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              CallIfMemEqNusng:       MACRO mem, value, target
  37+ 0000 ~                                    ld      a,(mem)
  38+ 0000 ~                                    cp      value
  39+ 0000 ~                                    call    z,target
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000
  43+ 0000              CallIfMemGTENusng:      MACRO mem, value, target
  44+ 0000 ~                                    ld      a,(mem)
  45+ 0000 ~                                    cp      value
  46+ 0000 ~                                    call    nc,target
  47+ 0000                                      ENDM
  48+ 0000
  49+ 0000              CallIfMemTrue:          MACRO mem, target
  50+ 0000 ~                                    ld      a,(mem)
  51+ 0000 ~                                    and     a
  52+ 0000 ~                                    call    z, target
  53+ 0000                                      ENDM
  54+ 0000
  55+ 0000              CallIfMemFalse:         MACRO mem, target
  56+ 0000 ~                                    ld      a,(mem)
  57+ 0000 ~                                    and     a
  58+ 0000 ~                                    call    nz, target
  59+ 0000                                      ENDM
  60+ 0000
  61+ 0000              CallIfMemZero:          MACRO mem, target
  62+ 0000 ~                                    ld      a,(mem)
  63+ 0000 ~                                    and     a
  64+ 0000 ~                                    call    z, target
  65+ 0000                                      ENDM
  66+ 0000
  67+ 0000              CallIfMemNotZero:       MACRO mem, target
  68+ 0000 ~                                    ld      a,(mem)
  69+ 0000 ~                                    and     a
  70+ 0000 ~                                    call    nz, target
  71+ 0000                                      ENDM
  72+ 0000              CallIfATrue:            MACRO target
  73+ 0000 ~                                    and     a
  74+ 0000 ~                                    call    z, target
  75+ 0000                                      ENDM
  76+ 0000
  77+ 0000              CallIfAFalse:           MACRO target
  78+ 0000 ~                                    and     a
  79+ 0000 ~                                    call    nz, target
  80+ 0000                                      ENDM
  81+ 0000
  82+ 0000              CallIfAZero:            MACRO target
  83+ 0000 ~                                    and     a
  84+ 0000 ~                                    call    z, target
  85+ 0000                                      ENDM
  86+ 0000
  87+ 0000              CallIfANotZero:         MACRO target
  88+ 0000 ~                                    and     a
  89+ 0000 ~                                    call    nz, target
  90+ 0000                                      ENDM
# file closed: ./Macros/callMacros.asm
  97  0000                                      INCLUDE "./Macros/carryFlagMacros.asm"
# file opened: ./Macros/carryFlagMacros.asm
   1+ 0000
   2+ 0000              SetCarryFlag:           MACRO
   3+ 0000 ~                                    scf
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearCarryFlag:	        MACRO
   7+ 0000 ~                                    or a
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              FlipCarryFlag:          MACRO
  11+ 0000 ~                                    ccf
  12+ 0000                                      ENDM
  13+ 0000
# file closed: ./Macros/carryFlagMacros.asm
  98  0000                                      INCLUDE "./Macros/CopyByteMacros.asm"
# file opened: ./Macros/CopyByteMacros.asm
   1+ 0000              CopyByteAtHLixToA:		MACRO memloc
   2+ 0000 ~            						ex          de,hl                               ; save hl
   3+ 0000 ~            						ld          hl,memloc
   4+ 0000 ~            						add         hl,a
   5+ 0000 ~            						ld          a,(hl)                              ; get XX2[x]
   6+ 0000 ~            						ex          de,hl                               ; get hl back as we need it in loop
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              ; Increments IYL
  10+ 0000              ; Increments IHL
  11+ 0000              ; Gets value at hl and loads into Parameter 1 address
  12+ 0000
  13+ 0000              CopyByteAtNextHLiyl: 	MACRO memloc
  14+ 0000 ~            						inc         iyl                                 ;
  15+ 0000 ~            						inc         hl                                  ; vertex byte#1
  16+ 0000 ~            						ld          a,(hl)                              ;
  17+ 0000 ~            						ld          (memloc),a                     ; XX15+2 = (V),Y
  18+ 0000              						ENDM
  19+ 0000
  20+ 0000              ;------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              CopyByteAtNextHL:   MACRO targetaddr
  22+ 0000 ~                                inc         hl                                  ; vertex byte#1
  23+ 0000 ~                                ld          a,(hl)                              ;
  24+ 0000 ~                                ld          (targetaddr),a                     ; SunXX15+2 = (V),Y
  25+ 0000                                  ENDM
# file closed: ./Macros/CopyByteMacros.asm
  99  0000                                      INCLUDE "./Macros/ldCopyMacros.asm"
# file opened: ./Macros/ldCopyMacros.asm
   1+ 0000              ZeroA:		            MACRO
   2+ 0000 ~                                    xor a
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              SetATrue:               MACRO
   6+ 0000 ~                                    xor     a
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              SetAFalse:              MACRO
  10+ 0000 ~                                    ld      a,$FF
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              SetMemFalse             MACRO   mem
  14+ 0000 ~                                    ld      a,$FF
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetMemTrue              MACRO   mem
  19+ 0000 ~                                    xor     a
  20+ 0000 ~                                    ld      (mem),a
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              SetMemZero:             MACRO   mem
  24+ 0000 ~                                    xor     a
  25+ 0000 ~                                    ld      (mem),a
  26+ 0000                                      ENDM
  27+ 0000
  28+ 0000              SetMemToN:              MACRO   mem,value
  29+ 0000 ~                                    ld      a,value
  30+ 0000 ~                                    ld      (mem),a
  31+ 0000                                      ENDM
  32+ 0000
  33+ 0000              ldCopyStringLen:        MACRO   source, target, strlen
  34+ 0000 ~                                    ld      hl,source
  35+ 0000 ~                                    ld      de, target
  36+ 0000 ~                                    ld      bc, strlen
  37+ 0000 ~                                    ldir
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              ldCopyTextAtHLtoDE:     MACRO
  41+ 0000 ~            .CopyLoop:              ld      a,(hl)
  42+ 0000 ~                                    ld      (de),a
  43+ 0000 ~                                    cp      0
  44+ 0000 ~                                    jp      z,.DoneCopy
  45+ 0000 ~                                    inc     hl
  46+ 0000 ~                                    inc     de
  47+ 0000 ~                                    jr      .CopyLoop
  48+ 0000 ~            .DoneCopy:
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              ldClearTextLoop:        MACRO   TextSize
  52+ 0000 ~                                    ld      b,a
  53+ 0000 ~                                    ld      a,TextSize
  54+ 0000 ~            .ClearLoop:             ld      (hl),a
  55+ 0000 ~                                    inc     hl
  56+ 0000 ~                                    djnz    .ClearLoop
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000              ldCopyByte:             MACRO memfrom, memto
  60+ 0000 ~                                    ld       a,(memfrom)
  61+ 0000 ~                                    ld       (memto),a
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000
  65+ 0000              ldCopyByteABS:          MACRO memfrom, memto
  66+ 0000 ~                                    ld       a,(memfrom)
  67+ 0000 ~                                    and		$7F
  68+ 0000 ~                                    ld       (memto),a
  69+ 0000                                      ENDM
  70+ 0000
  71+ 0000              ldAtHLtoMem:            MACRO   memto
  72+ 0000 ~                                    ld      a,(hl)
  73+ 0000 ~                                    ld      (memto),a
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              ldCopyWord:             MACRO memfrom, memto
  77+ 0000 ~                                    ldCopy2Byte memfrom, memto
  78+ 0000                                      ENDM
  79+ 0000
  80+ 0000              ldCopy2Byte:            MACRO  memfrom, memto
  81+ 0000 ~                                    ld       hl,(memfrom)
  82+ 0000 ~                                    ld       (memto),hl
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              ldWriteConst            MACRO  memfrom, memto
  86+ 0000 ~                                    ld       a,memfrom
  87+ 0000 ~                                    ld       (memto),a
  88+ 0000                                      ENDM
  89+ 0000
  90+ 0000              ldWriteZero             MACRO  memto
  91+ 0000 ~                                    xor      a
  92+ 0000 ~                                    ld       (memto),a
  93+ 0000                                      ENDM
  94+ 0000
  95+ 0000              ldIXLaFromN:	        MACRO memfrom
  96+ 0000 ~                                    ld		a,(memfrom)
  97+ 0000 ~                                    ld		ixl,a
  98+ 0000                                      ENDM
  99+ 0000
 100+ 0000              ldIXHaFromN:	        MACRO memfrom
 101+ 0000 ~                                    ld		a,(memfrom)
 102+ 0000 ~                                    ld		ixh,a
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              ldIYLaFromN:	        MACRO memfrom
 106+ 0000 ~                                    ld		a,(memfrom)
 107+ 0000 ~                                    ld		iyl,a
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              ldIYHaFromN:	        MACRO memfrom
 111+ 0000 ~                                    ld		a,(memfrom)
 112+ 0000 ~                                    ld		iyh,a
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              ; Read a 32 bit value from address HL into BCDE
 116+ 0000              ldBCDEatHL:             MACRO
 117+ 0000 ~                                    ld      e,(hl)
 118+ 0000 ~                                    inc     hl
 119+ 0000 ~                                    ld      d,(hl)
 120+ 0000 ~                                    inc     hl
 121+ 0000 ~                                    ld      c,(hl)
 122+ 0000 ~                                    inc     hl
 123+ 0000 ~                                    ld      b,(hl)
 124+ 0000 ~                                    inc     hl
 125+ 0000                                      ENDM
 126+ 0000
 127+ 0000              ldBCatHL:               MACRO
 128+ 0000 ~                                    ld      c,(hl)
 129+ 0000 ~                                    inc     hl
 130+ 0000 ~                                    ld      b,(hl)
 131+ 0000 ~                                    inc     hl
 132+ 0000                                      ENDM
 133+ 0000
 134+ 0000              ldhlde:			        MACRO
 135+ 0000 ~                                    ld		h,d
 136+ 0000 ~                                    ld		l,e
 137+ 0000                                      ENDM
 138+ 0000
 139+ 0000              ldhlbc:			        MACRO
 140+ 0000 ~                                    ld		h,b
 141+ 0000 ~                                    ld		l,c
 142+ 0000                                      ENDM
 143+ 0000
 144+ 0000              ldbcde:			        MACRO
 145+ 0000 ~                                    ld		b,d
 146+ 0000 ~                                    ld		c,e
 147+ 0000                                      ENDM
 148+ 0000
 149+ 0000              lddebc:			        MACRO
 150+ 0000 ~                                    ld		d,b
 151+ 0000 ~                                    ld		e,c
 152+ 0000                                      ENDM
 153+ 0000
 154+ 0000              ldbchl:			        MACRO
 155+ 0000 ~                                    ld		b,h
 156+ 0000 ~                                    ld		c,l
 157+ 0000                                      ENDM
 158+ 0000
 159+ 0000              lddeiy:			        MACRO
 160+ 0000 ~                                    ld		d,iyh
 161+ 0000 ~                                    ld		e,iyl
 162+ 0000                                      ENDM
 163+ 0000
 164+ 0000              ldiyde:			        MACRO
 165+ 0000 ~                                    ld		iyh,d
 166+ 0000 ~                                    ld		iyl,e
 167+ 0000                                      ENDM
 168+ 0000
 169+ 0000
 170+ 0000              FourLDIInstrunctions:   MACRO
 171+ 0000 ~                                    ldi
 172+ 0000 ~                                    ldi
 173+ 0000 ~                                    ldi
 174+ 0000 ~                                    ldi
 175+ 0000                                      ENDM
 176+ 0000
 177+ 0000              FiveLDIInstrunctions:   MACRO
 178+ 0000 ~                                    ldi
 179+ 0000 ~                                    ldi
 180+ 0000 ~                                    ldi
 181+ 0000 ~                                    ldi
 182+ 0000 ~                                    ldi
 183+ 0000                                      ENDM
 184+ 0000
 185+ 0000              SixLDIInstrunctions:    MACRO
 186+ 0000 ~                                    ldi
 187+ 0000 ~                                    ldi
 188+ 0000 ~                                    ldi
 189+ 0000 ~                                    ldi
 190+ 0000 ~                                    ldi
 191+ 0000 ~                                    ldi
 192+ 0000                                      ENDM
 193+ 0000
 194+ 0000              EightLDIInstrunctions:  MACRO
 195+ 0000 ~            		                ldi
 196+ 0000 ~            		                ldi
 197+ 0000 ~            		                ldi
 198+ 0000 ~            		                ldi
 199+ 0000 ~            		                ldi
 200+ 0000 ~            		                ldi
 201+ 0000 ~            		                ldi
 202+ 0000 ~            		                ldi
 203+ 0000                                      ENDM
 204+ 0000
 205+ 0000              NineLDIInstrunctions:  MACRO
 206+ 0000 ~            		                ldi
 207+ 0000 ~            		                ldi
 208+ 0000 ~            		                ldi
 209+ 0000 ~            		                ldi
 210+ 0000 ~            		                ldi
 211+ 0000 ~            		                ldi
 212+ 0000 ~            		                ldi
 213+ 0000 ~            		                ldi
 214+ 0000 ~            		                ldi
 215+ 0000                                      ENDM
# file closed: ./Macros/ldCopyMacros.asm
 100  0000                                      INCLUDE "./Macros/ldIndexedMacros.asm"
# file opened: ./Macros/ldIndexedMacros.asm
   1+ 0000              GetByteAInTable:    MACRO table
   2+ 0000 ~                                ld          hl,table
   3+ 0000 ~                                add         hl,a
   4+ 0000 ~                                ld          a,(hl)
   5+ 0000                                  ENDM
   6+ 0000
   7+ 0000              HLWordAInTable:     MACRO table
   8+ 0000 ~                                ld          hl,table
   9+ 0000 ~                                sla         a
  10+ 0000 ~                                add         hl,a
  11+ 0000 ~                                ld          a,(hl)
  12+ 0000 ~                                inc         hl
  13+ 0000 ~                                ld          h,(hl)
  14+ 0000 ~                                ld          l,a
  15+ 0000                                  ENDM
  16+ 0000
  17+ 0000
  18+ 0000              ldAToHLixl:			MACRO value
  19+ 0000 ~            					ld          hl,value
  20+ 0000 ~            					ex          af,af'
  21+ 0000 ~            					ld          a,ixl
  22+ 0000 ~            					add         hl,a
  23+ 0000 ~            					ex          af,af'
  24+ 0000 ~            					ld          (hl),a
  25+ 0000              					ENDM
  26+ 0000
  27+ 0000              ldAToHLiyl:			MACRO value
  28+ 0000 ~            					ld          hl,value
  29+ 0000 ~            					ex          af,af'
  30+ 0000 ~            					ld          a,iyl
  31+ 0000 ~            					add         hl,a
  32+ 0000 ~            					ex          af,af'
  33+ 0000 ~            					ld          (hl),a
  34+ 0000              					ENDM
  35+ 0000
  36+ 0000
  37+ 0000              ldHLixlToA:         MACRO value
  38+ 0000 ~                                ld          hl,value
  39+ 0000 ~                                ex          af,af'
  40+ 0000 ~                                ld          a,ixl
  41+ 0000 ~                                add         hl,a
  42+ 0000 ~                                ld          a,(hl)
  43+ 0000                                  ENDM
  44+ 0000
  45+ 0000              ldHLiylToA:         MACRO value
  46+ 0000 ~                                ld          hl,value
  47+ 0000 ~                                ex          af,af'
  48+ 0000 ~                                ld          a,iyl
  49+ 0000 ~                                add         hl,a
  50+ 0000 ~                                ld          a,(hl)
  51+ 0000                                  ENDM
  52+ 0000
  53+ 0000              ldHLIdxAToA:        MACRO value
  54+ 0000 ~                                ld          hl,value
  55+ 0000 ~                                add         hl,a
  56+ 0000 ~                                ld          a,(hl)
  57+ 0000                                  ENDM
  58+ 0000
  59+ 0000              HLEquAddrAtHLPlusA: MACRO
  60+ 0000 ~                                sla         a
  61+ 0000 ~                                add         hl,a
  62+ 0000 ~                                ld          a,(hl)
  63+ 0000 ~                                inc         hl
  64+ 0000 ~                                ld          h,(hl)
  65+ 0000 ~                                ld          l,a
  66+ 0000                                  ENDM
  67+ 0000
  68+ 0000              ;-- Performs HL = |HL| - 1
  69+ 0000              DecHLABS:           MACRO
  70+ 0000 ~                                bit         7,h
  71+ 0000 ~                                jp          nz,.NegativeDec
  72+ 0000 ~            .IsHLZero:          ld          a,h                 ; if its zero it becomes negative
  73+ 0000 ~                                or          l
  74+ 0000 ~                                jp          z,.HLZero
  75+ 0000 ~            .PositiveDec:       dec         hl
  76+ 0000 ~                                jp          .Done
  77+ 0000 ~            .NegativeDec:       ld          a,h
  78+ 0000 ~                                and         $7F
  79+ 0000 ~                                ld          h,a
  80+ 0000 ~                                dec         hl
  81+ 0000 ~                                set         7,h
  82+ 0000 ~                                jp          .Done
  83+ 0000 ~            .HLZero:            ld          hl,$8001
  84+ 0000 ~            .Done:
  85+ 0000                                  ENDM
  86+ 0000
  87+ 0000              ;-- Performs HL = HL - 1
  88+ 0000              DecHLSigned:        MACRO
  89+ 0000 ~                                bit         7,h
  90+ 0000 ~                                jp          nz,.NegativeDec
  91+ 0000 ~            .IsHLZero:          ld          a,h                 ; if its zero it becomes negative
  92+ 0000 ~                                or          l
  93+ 0000 ~                                jp          z,.HLZero
  94+ 0000 ~            .PositiveDec:       dec         hl
  95+ 0000 ~                                jp          .Done
  96+ 0000 ~            .NegativeDec:       ld          a,h
  97+ 0000 ~                                and         $7F
  98+ 0000 ~                                ld          h,a
  99+ 0000 ~                                inc         hl                  ; if its already negative then add 1 to make it further
 100+ 0000 ~                                set         7,h
 101+ 0000 ~                                jp          .Done
 102+ 0000 ~            .HLZero:            ld          hl,$8001
 103+ 0000 ~            .Done:
 104+ 0000                                  ENDM
 105+ 0000
# file closed: ./Macros/ldIndexedMacros.asm
 101  0000                                      INCLUDE "./Macros/jumpMacros.asm"
# file opened: ./Macros/jumpMacros.asm
   1+ 0000              JumpIfHLNegative:       MACRO target
   2+ 0000 ~                                    bit     7,h
   3+ 0000 ~                                    jp      nz,target
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              JumpIfPositive:	        MACRO target
   7+ 0000 ~                                    jp		p, target
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              JumpIfNegative:	        MACRO target
  11+ 0000 ~                                    jp		m, target
  12+ 0000                                      ENDM
  13+ 0000
  14+ 0000
  15+ 0000              JumpIfUnderflow:	    MACRO target
  16+ 0000 ~                                    jp		po, target
  17+ 0000                                      ENDM
  18+ 0000
  19+ 0000              JumpIfOverflow:	        MACRO target
  20+ 0000 ~                                    jp		po, target
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000
  24+ 0000              JumpIfNotZero:	        MACRO target
  25+ 0000 ~                                    jp	nz,target
  26+ 0000                                      ENDM
  27+ 0000
  28+ 0000              JumpIfZero:	            MACRO target
  29+ 0000 ~                                    jp	z,target
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              ;.. Bit routines
  33+ 0000              JumpOnLeadSignSet:      MACRO   reg, target
  34+ 0000 ~                                    ld      a,reg
  35+ 0000 ~                                    and     SignOnly8Bit
  36+ 0000 ~                                    jp      nz,target
  37+ 0000                                      ENDM
  38+ 0000
  39+ 0000              JumpOnLeadSignClear:    MACRO   reg, target
  40+ 0000 ~                                    ld      a,reg
  41+ 0000 ~                                    and     SignOnly8Bit
  42+ 0000 ~                                    jp      z,target
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              JumpOnLeadSignSetA:     MACRO   target
  46+ 0000 ~                                    and     SignOnly8Bit
  47+ 0000 ~                                    jp      nz,target
  48+ 0000                                      ENDM
  49+ 0000
  50+ 0000              JumpOnLeadSignClearA:   MACRO   target
  51+ 0000 ~                                    and     SignOnly8Bit
  52+ 0000 ~                                    jp      z,target
  53+ 0000                                      ENDM
  54+ 0000
  55+ 0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
  56+ 0000 ~                                    ld      a,(mem)
  57+ 0000 ~                                    bit 	bitnbr,a
  58+ 0000 ~                                    jp      nz,target
  59+ 0000                                      ENDM
  60+ 0000
  61+ 0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
  62+ 0000 ~                                    ld      a,(mem)
  63+ 0000 ~                                    bit 	bitnbr,a
  64+ 0000 ~                                    jp      z,target
  65+ 0000                                      ENDM
  66+ 0000
  67+ 0000
  68+ 0000              JumpOnABitSet:          MACRO   bitnbr, target
  69+ 0000 ~                                    bit 	bitnbr, a
  70+ 0000 ~                                    jp      nz,target
  71+ 0000                                      ENDM
  72+ 0000
  73+ 0000              JumpOnABitClear:        MACRO   bitnbr, target
  74+ 0000 ~                                    bit 	bitnbr, a
  75+ 0000 ~                                    jp      z,target
  76+ 0000                                      ENDM
  77+ 0000
  78+ 0000              JumpOnABit5Set:         MACRO   target
  79+ 0000 ~                                    and     Bit5Only
  80+ 0000 ~                                    jp      nz,target
  81+ 0000                                      ENDM
  82+ 0000
  83+ 0000              JumpOnABit5Clear:       MACRO   target
  84+ 0000 ~                                    and     Bit5Only
  85+ 0000 ~                                    jp      z,target
  86+ 0000                                      ENDM
  87+ 0000
  88+ 0000              JumpOnBitMaskSet:       MACRO   bitmask, target
  89+ 0000 ~                                    and     bitmask
  90+ 0000 ~                                    jp      nz,target
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              JumpOnBitMaskClear:     MACRO   bitmask, target
  94+ 0000 ~                                    and     bitmask
  95+ 0000 ~                                    jp      z,target
  96+ 0000                                      ENDM
  97+ 0000
  98+ 0000              JumpOnMemBitMaskSet:    MACRO   mem, bitmask, target
  99+ 0000 ~                                    ld      a,(mem)
 100+ 0000 ~                                    and     bitmask
 101+ 0000 ~                                    jp      nz,target
 102+ 0000                                      ENDM
 103+ 0000
 104+ 0000              JumpOnMemBitMaskClear:  MACRO   mem, bitmask, target
 105+ 0000 ~                                    ld      a,(mem)
 106+ 0000 ~                                    and     bitmask
 107+ 0000 ~                                    jp      z,target
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
 111+ 0000 ~                                    bit 	bitnbr,reg
 112+ 0000 ~                                    jp      nz,target
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
 116+ 0000 ~                                    bit 	bitnbr,reg
 117+ 0000 ~                                    jp      z,target
 118+ 0000                                      ENDM
 119+ 0000
 120+ 0000              ; Comparison Routines
 121+ 0000              JumpIfAGTEusng:         MACRO
 122+ 0000 ~                                    jp		nc,target
 123+ 0000                                      ENDM
 124+ 0000
 125+ 0000              JumpIfAGTENusng:        MACRO reg,target
 126+ 0000 ~                                    cp     reg
 127+ 0000 ~                                    jp		nc,target
 128+ 0000                                      ENDM
 129+ 0000
 130+ 0000              JumpIfAGTEMemusng:      MACRO mem,target
 131+ 0000 ~                                    ld      hl,mem
 132+ 0000 ~                                    cp      (hl)
 133+ 0000 ~                                    jp		nc,target
 134+ 0000                                      ENDM
 135+ 0000
 136+ 0000              JumpIfALTMemusng:       MACRO mem,target
 137+ 0000 ~                                    ld      hl,mem
 138+ 0000 ~                                    cp      (hl)
 139+ 0000 ~                                    jp		c,target
 140+ 0000                                      ENDM
 141+ 0000
 142+ 0000              JumpIfMemGTENusng:      MACRO mem, value, target
 143+ 0000 ~                                    ld     a,(mem)
 144+ 0000 ~                                    cp     value
 145+ 0000 ~                                    jp	  nc,target
 146+ 0000                                      ENDM
 147+ 0000
 148+ 0000              JumpIfMemGTEMemusng:    MACRO mem, address, target
 149+ 0000 ~                                    ld   a,(mem)
 150+ 0000 ~                                    ld   hl,address
 151+ 0000 ~                                    cp   (hl)
 152+ 0000 ~                                    jp	  nc,target
 153+ 0000                                      ENDM
 154+ 0000
 155+ 0000              JumpIfMemEqMemusng:     MACRO mem, address, target
 156+ 0000 ~                                    ld   a,(mem)
 157+ 0000 ~                                    ld   hl,address
 158+ 0000 ~                                    cp   (hl)
 159+ 0000 ~                                    jp	  z,target
 160+ 0000                                      ENDM
 161+ 0000
 162+ 0000              JumpIfMemNeMemusng:     MACRO mem, address, target
 163+ 0000 ~                                    ld   a,(mem)
 164+ 0000 ~                                    ld   hl,address
 165+ 0000 ~                                    cp   (hl)
 166+ 0000 ~                                    jp	  nz,target
 167+ 0000                                      ENDM
 168+ 0000
 169+ 0000              JumpIfMemTrue:          MACRO mem, target
 170+ 0000 ~                                    ld      a,(mem)
 171+ 0000 ~                                    and     a
 172+ 0000 ~                                    jp      z, target
 173+ 0000                                      ENDM
 174+ 0000
 175+ 0000              JumpIfMemFalse:         MACRO mem, target
 176+ 0000 ~                                    ld      a,(mem)
 177+ 0000 ~                                    and     a
 178+ 0000 ~                                    jp      nz, target
 179+ 0000                                      ENDM
 180+ 0000
 181+ 0000              JumpIfATrue:            MACRO target
 182+ 0000 ~                                    and     a
 183+ 0000 ~                                    jp      z, target
 184+ 0000                                      ENDM
 185+ 0000
 186+ 0000              JumpIfAFalse:           MACRO target
 187+ 0000 ~                                    and     a
 188+ 0000 ~                                    jp      nz, target
 189+ 0000                                      ENDM
 190+ 0000
 191+ 0000              JumpIfANotFalse:        MACRO target
 192+ 0000 ~                                    cp      $FF
 193+ 0000 ~                                    jp      nz, target
 194+ 0000                                      ENDM
 195+ 0000
 196+ 0000              JumpIfALTusng:          MACRO target
 197+ 0000 ~                                    jp		c,target
 198+ 0000                                      ENDM
 199+ 0000
 200+ 0000              JumpIfALTNusng:         MACRO value, target
 201+ 0000 ~                                    cp      value
 202+ 0000 ~                                    jp		c, target
 203+ 0000                                      ENDM
 204+ 0000
 205+ 0000              JumpIfMemLTNusng:       MACRO mem, value, target
 206+ 0000 ~                                    ld      a,(mem)
 207+ 0000 ~                                    cp      value
 208+ 0000 ~                                    jp	  c,target
 209+ 0000                                      ENDM
 210+ 0000
 211+ 0000              JumpIfMemLTMemusng:     MACRO mem, value, target
 212+ 0000 ~                                    ld    a,(mem)
 213+ 0000 ~                                    ld    hl,value
 214+ 0000 ~                                    cp    (hl)
 215+ 0000 ~                                    jp	  c,target
 216+ 0000                                      ENDM
 217+ 0000
 218+ 0000              JumpIfMemEqNusng:       MACRO mem,value,target
 219+ 0000 ~                                    ld  a,(mem)
 220+ 0000 ~                                    cp  value
 221+ 0000 ~                                    jp  z,target
 222+ 0000                                      ENDM
 223+ 0000
 224+ 0000              JumpIfMemNeNusng:       MACRO mem,value,target
 225+ 0000 ~                                    ld  a,(mem)
 226+ 0000 ~                                    cp  value
 227+ 0000 ~                                    jp  nz,target
 228+ 0000                                      ENDM
 229+ 0000
 230+ 0000              JumpIfMemZero:          MACRO mem,target
 231+ 0000 ~                                    ld  a,(mem)
 232+ 0000 ~                                    and a
 233+ 0000 ~                                    jp  z,target
 234+ 0000                                      ENDM
 235+ 0000
 236+ 0000              JumpIfMemNotZero:       MACRO mem,target
 237+ 0000 ~                                    ld  a,(mem)
 238+ 0000 ~                                    and a
 239+ 0000 ~                                    jp  nz,target
 240+ 0000                                      ENDM
 241+ 0000
 242+ 0000              JumpIfALTMemHLusng:     MACRO target
 243+ 0000 ~                                    cp    (hl)
 244+ 0000 ~                                    jp	  c,target
 245+ 0000                                      ENDM
 246+ 0000
 247+ 0000              JumpIfANENusng:         MACRO value, target
 248+ 0000 ~                                    cp     value
 249+ 0000 ~                                    jp      nz,target
 250+ 0000                                      ENDM
 251+ 0000
 252+ 0000              JumpIfANEquNusng:       MACRO value, target
 253+ 0000 ~                                    cp     value
 254+ 0000 ~                                    jp     z,target
 255+ 0000                                      ENDM
 256+ 0000
 257+ 0000              JumpIfANEMemusng:       MACRO  value, target
 258+ 0000 ~                                    ld    hl,value
 259+ 0000 ~                                    cp    (hl)
 260+ 0000 ~                                    jp      nz,target
 261+ 0000                                      ENDM
 262+ 0000
 263+ 0000              JumpIfAEqNusng:         MACRO value, target
 264+ 0000 ~                                    cp     value
 265+ 0000 ~                                    jp      z,target
 266+ 0000                                      ENDM
 267+ 0000
 268+ 0000              JumpIfAIsZero:	        MACRO target
 269+ 0000 ~                                    and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 270+ 0000 ~                                    jp	    z, target
 271+ 0000                                      ENDM
 272+ 0000
 273+ 0000              JumpIfRegIsNotZero:     MACRO   reg, target
 274+ 0000 ~                                    ld      a,reg
 275+ 0000 ~                                    and     a
 276+ 0000 ~                                    jp	    nz,target
 277+ 0000                                      ENDM
 278+ 0000
 279+ 0000              JumpIfRegLTE:           MACRO   reg, value, target
 280+ 0000 ~                                    ld      a,reg
 281+ 0000 ~                                    cp      value
 282+ 0000 ~                                    jp	    z,target
 283+ 0000 ~                                    jp		c, target
 284+ 0000                                      ENDM
 285+ 0000
 286+ 0000              JumpIfAIsNotZero:       MACRO target
 287+ 0000 ~                                    and     a
 288+ 0000 ~                                    jp	    nz,target
 289+ 0000                                      ENDM
 290+ 0000
 291+ 0000              JumpIfMemIsNotZero:     MACRO value, target
 292+ 0000 ~                                    ld      a,(value)
 293+ 0000 ~                                    and     a
 294+ 0000 ~                                    jp	    nz,target
 295+ 0000                                      ENDM
 296+ 0000              IfResultZeroGoto:	    MACRO target
 297+ 0000 ~                                    jp	z,target
 298+ 0000                                      ENDM
 299+ 0000
 300+ 0000              IfResultNotZeroGoto:    MACRO target
 301+ 0000 ~                                    jp	nz,target
 302+ 0000                                      ENDM
 303+ 0000
# file closed: ./Macros/jumpMacros.asm
 102  0000                                      INCLUDE "./Macros/MathsMacros.asm"
# file opened: ./Macros/MathsMacros.asm
   1+ 0000              ; sets z flag is HL less than 255 else sets it to nz (note opposite of GT127)
   2+ 0000              IsHLGT255:              MACRO
   3+ 0000 ~                                    bit     7,h
   4+ 0000 ~                                    ret     z
   5+ 0000 ~                                    ld      a,h
   6+ 0000 ~                                    and     a
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              ; Sets z flat if HL = 255 else sets it to nz
  10+ 0000              IsHLEqu255:             MACRO
  11+ 0000 ~                                    ld      a,h
  12+ 0000 ~                                    and     a               ; if its non zero then it can't be 255
  13+ 0000 ~                                    ret     nz
  14+ 0000 ~                                    ld      a,l
  15+ 0000 ~                                    inc     a               ; if it was 255 the inc will set it to zero
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              ; Sets Z flag if GT 127 else nz
  19+ 0000              IsHLGT127:              MACRO
  20+ 0000 ~                                    bit     7,h             ; -ve?
  21+ 0000 ~                                    jr      nz,.DoneCheck
  22+ 0000 ~                                    ld      a,h             ; +ve > 256?
  23+ 0000 ~                                    and     a
  24+ 0000 ~                                    jr      nz,.DoneCheck
  25+ 0000 ~                                    ld      a,l
  26+ 0000 ~                                    and     $80             ; this will set z to false if bit 7 set and clear lower bits
  27+ 0000 ~                                    cp      $80             ; this will set z to true if bit 7 set
  28+ 0000 ~            .DoneCheck:
  29+ 0000                                      ENDM
  30+ 0000
  31+ 0000              ReturnIfHLGT127:        MACRO
  32+ 0000 ~                                    bit     7,h             ; -ve?
  33+ 0000 ~                                    jr      nz,.DoneCheck   ; forces check complete
  34+ 0000 ~                                    ld      a,h             ; +ve > 256?
  35+ 0000 ~                                    and     a               ;
  36+ 0000 ~                                    ret     nz              ; forces a return
  37+ 0000 ~                                    bit     7,l             ; bit 7 of lower set?
  38+ 0000 ~                                    ret     nz              ; forces a return
  39+ 0000 ~            .DoneCheck:
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              IsDEGT127:              MACRO
  43+ 0000 ~                                    bit     7,d
  44+ 0000 ~                                    jr      nz,.DoneCheck
  45+ 0000 ~                                    ld      a,d
  46+ 0000 ~                                    jr      nz,.DoneCheck
  47+ 0000 ~                                    ld      a,e
  48+ 0000 ~                                    and     $80
  49+ 0000 ~            .DoneCheck:
  50+ 0000                                      ENDM
  51+ 0000
  52+ 0000              ABSa2c:                 MACRO
  53+ 0000 ~                                    bit     7,a
  54+ 0000 ~                                    jp      z,.DoneABSa
  55+ 0000 ~                                    neg
  56+ 0000 ~            .DoneABSa:
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000              DEEquSquareA:           MACRO
  60+ 0000 ~                                    ld  d,a
  61+ 0000 ~                                    ld  e,a
  62+ 0000 ~                                    mul de
  63+ 0000                                      ENDM
  64+ 0000
  65+ 0000              ApplyMyRollToVector:    MACRO angle, vectorX, vectorY
  66+ 0000 ~                                    ldCopyByte angle,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  67+ 0000 ~                                    ldCopy2Byte vectorY, varR           ; RS =  nosev_y
  68+ 0000 ~                                    ldCopyByte  vectorX, varP           ; set P to nosevX lo (may be redundant)
  69+ 0000 ~                                    ld a,(vectorX+1)                    ; Set A = -nosev_x_hi
  70+ 0000 ~                                    xor $80                             ;
  71+ 0000 ~                                    call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  72+ 0000 ~                                    ld  (vectorY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  73+ 0000 ~                                    ldCopy2Byte vectorX, varR           ; Set (S R) = nosev_x
  74+ 0000 ~                                    ld  a,(vectorY+1)                   ;  Set A = nosev_y_hi
  75+ 0000 ~                                    call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  76+ 0000 ~                                    ld  (vectorX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  77+ 0000                                      ENDM
  78+ 0000
  79+ 0000              SignedHLTo2C:           MACRO
  80+ 0000 ~                                    bit     7,h
  81+ 0000 ~                                    jr      z,.Done2c
  82+ 0000 ~                                    ld      a,h
  83+ 0000 ~                                    and     SignMask8Bit
  84+ 0000 ~                                    ld      h,a
  85+ 0000 ~                                    NegHL
  86+ 0000 ~            .Done2c:
  87+ 0000                                      ENDM
  88+ 0000
  89+ 0000              MemSignedTo2C:          MACRO   memfrom
  90+ 0000 ~                                    ld      hl,(memfrom)
  91+ 0000 ~                                    bit     7,h
  92+ 0000 ~                                    jr      z,.Done2c
  93+ 0000 ~                                    ld      a,h
  94+ 0000 ~                                    and     SignMask8Bit
  95+ 0000 ~                                    ld      h,a
  96+ 0000 ~            .Done2c:                ld      (memfrom),hl
  97+ 0000                                      ENDM
  98+ 0000
  99+ 0000
 100+ 0000                  ;returns result in H
 101+ 0000              EDiv10Inline:           MACRO
 102+ 0000 ~                                    ld      d,0
 103+ 0000 ~                                    ld      hl,de
 104+ 0000 ~                                    add     hl,hl
 105+ 0000 ~                                    add     hl,de
 106+ 0000 ~                                    add     hl,hl
 107+ 0000 ~                                    add     hl,hl
 108+ 0000 ~                                    add     hl,de
 109+ 0000 ~                                    add     hl,hl
 110+ 0000                                      ENDM
 111+ 0000
 112+ 0000              cpHLDE:                 MACRO
 113+ 0000 ~                                    push    hl
 114+ 0000 ~                                    and     a
 115+ 0000 ~                                    sbc     hl,de
 116+ 0000 ~                                    pop     hl
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              cpABSDEHL:              MACRO
 120+ 0000 ~                                    push     hl,,de
 121+ 0000 ~                                    ld      a,h
 122+ 0000 ~                                    and     $7F
 123+ 0000 ~                                    ld      h,a
 124+ 0000 ~                                    ld      a,d
 125+ 0000 ~                                    and     $7F
 126+ 0000 ~                                    ld      d,a
 127+ 0000 ~                                    ex      de,hl
 128+ 0000 ~                                    sbc     hl,de
 129+ 0000 ~                                    pop     hl,,de
 130+ 0000                                      ENDM
 131+ 0000
 132+ 0000              ; Simple are they both the same setting z if they are
 133+ 0000              ; tehcicall this works but it measn the final ret z is alwys done
 134+ 0000              ; so jp needs to be to a target
 135+ 0000              cpHLEquDE:              MACRO   passedCheck
 136+ 0000 ~                                    ld      a,h
 137+ 0000 ~                                    cp      d
 138+ 0000 ~                                    jp      nz, passedCheck
 139+ 0000 ~                                    ld      a,l
 140+ 0000 ~                                    cp      e
 141+ 0000 ~            .NoTheSame:
 142+ 0000                                      ENDM
 143+ 0000
 144+ 0000              cpHLEquBC:              MACRO   passedCheck
 145+ 0000 ~                                    ld      a,h
 146+ 0000 ~                                    cp      b
 147+ 0000 ~                                    jp      nz, passedCheck
 148+ 0000 ~                                    ld      a,l
 149+ 0000 ~                                    cp      c
 150+ 0000 ~            .NoTheSame:
 151+ 0000                                      ENDM
 152+ 0000
 153+ 0000              cpDEEquBC:              MACRO   passedCheck
 154+ 0000 ~                                    ld      a,d
 155+ 0000 ~                                    cp      b
 156+ 0000 ~                                    jp      nz, passedCheck
 157+ 0000 ~                                    ld      a,e
 158+ 0000 ~                                    cp      c
 159+ 0000 ~            .NoTheSame:
 160+ 0000                                      ENDM
 161+ 0000              ; Simple version just sets carry if HL < DE reset, does an initial compare for z
 162+ 0000              cpHLDELeadSign:         MACRO
 163+ 0000 ~                                    ld      a,h
 164+ 0000 ~                                    cp      d
 165+ 0000 ~                                    jr      nz,.FullCompare
 166+ 0000 ~                                    ld      a,l
 167+ 0000 ~                                    cp      e
 168+ 0000 ~                                    ret     z
 169+ 0000 ~            .FullCompare:           ld      a,h
 170+ 0000 ~                                    xor     d
 171+ 0000 ~                                    and     $80
 172+ 0000 ~                                    jr      nz,.OppositeSigns   ; If opposite signs is a simple sign test
 173+ 0000 ~                                    ld      a,h                 ; same signs so a little simpler
 174+ 0000 ~                                    and     $80
 175+ 0000 ~                                    jp      z,cpHLDE            ; if h is positive then both are positive by here so just cpHLDE
 176+ 0000 ~                                    jp      cpABSDEHL           ; else we have to do ABScpDEHL
 177+ 0000 ~            .OppositeSigns:         ld      a,h
 178+ 0000 ~                                    and     $80
 179+ 0000 ~                                    and     $80
 180+ 0000 ~                                    jp      z,.HLGTDE
 181+ 0000 ~            .HLLTDE:                SetCarryFlag
 182+ 0000 ~                                    ret
 183+ 0000 ~            .HLGTDE:                ClearCarryFlag
 184+ 0000 ~                                    ret
 185+ 0000                                      ENDM
 186+ 0000
 187+ 0000              ;Unsigned
 188+ 0000              ;If HL == DE, then Z flag is set.
 189+ 0000              ;If HL != DE, then Z flag is reset.
 190+ 0000              ;If HL <  DE, then C flag is set.
 191+ 0000              ;If HL >= DE, then C flag is reset.
 192+ 0000              ;
 193+ 0000              ;Signed
 194+ 0000              ;If HL == DE, then Z flag is set.
 195+ 0000              ;If HL != DE, then Z flag is reset.
 196+ 0000              ;If HL <  DE, then S and P/V are different.
 197+ 0000              ;If HL >= DE, then S and P/V are the same.
 198+ 0000
 199+ 0000
 200+ 0000              N0equN1byN2div256:      MACRO param1,param2,param3
 201+ 0000 ~                                    ld      a,param3                        ;
 202+ 0000 ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 203+ 0000 ~                                    ld      a,param2                        ; A = XX16 element
 204+ 0000 ~                                    ld      d,a
 205+ 0000 ~                                    mul
 206+ 0000 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 207+ 0000 ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 208+ 0000                                      ENDM
 209+ 0000
 210+ 0000              AequN1xorN2:            MACRO  param1,param2
 211+ 0000 ~                                    ld      a,(param1)
 212+ 0000 ~                                    xor     param2
 213+ 0000                                      ENDM
 214+ 0000
 215+ 0000              SpeedMulAxis:           MACRO   speedreg, axis
 216+ 0000 ~                                    ld      e,speedreg
 217+ 0000 ~                                    ld      hl,(axis)
 218+ 0000 ~                                    ld      a,h
 219+ 0000 ~                                    ClearSignBitA
 220+ 0000 ~                                    ld      d,a
 221+ 0000 ~                                    mul     de
 222+ 0000 ~                                    ld      a,h
 223+ 0000 ~                                    SignBitOnlyA
 224+ 0000 ~                                    ld      b,a;ld      c,a
 225+ 0000 ~                                    ld      h,d;ld      e,d
 226+ 0000 ~                                    ld      c,0;ld      d,0
 227+ 0000                                      ENDM
 228+ 0000
 229+ 0000              ; Adds speed (8 bit) to vertex (24 bit signed)
 230+ 0000              AddSpeedToVert:         MACRO   vertex
 231+ 0000 ~                                    ld      de,(vertex+1)
 232+ 0000 ~                                    ld      a,(vertex)
 233+ 0000 ~                                    ld      l,a
 234+ 0000 ~                                    call    AddBCHtoDELsigned               ; DEL = DEL + BCH
 235+ 0000 ~                                    ld      a,l
 236+ 0000 ~                                    ld      (vertex),a
 237+ 0000 ~                                    ld      (vertex+1),de
 238+ 0000                                      ENDM
# file closed: ./Macros/MathsMacros.asm
 103  0000                                      INCLUDE "./Macros/MMUMacros.asm"
# file opened: ./Macros/MMUMacros.asm
   1+ 0000              MMUSelectROM0:       MACRO
   2+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   3+ 0000                                   ENDM
   4+ 0000
   5+ 0000              MMUSelectROMS:       MACRO
   6+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   7+ 0000 ~                                 nextreg EXSDOSMMU1,        BankROM
   8+ 0000                                   ENDM
   9+ 0000
  10+ 0000              MMUSelectMathsTables:MACRO
  11+ 0000 ~                                 nextreg MathsTablesMMU,    BankMathsTables
  12+ 0000                                   ENDM
  13+ 0000
  14+ 0000              MMUSelectKeyboard:   MACRO
  15+ 0000 ~                                 nextreg KeyboardMMU,       BankKeyboard
  16+ 0000                                   ENDM
  17+ 0000
  18+ 0000              MMUSelectSpriteBank: MACRO
  19+ 0000 ~            					 nextreg SpritememMMU,	    BankSPRITE
  20+ 0000              					 ENDM
  21+ 0000
  22+ 0000              MMUSelectConsoleBank: MACRO
  23+ 0000 ~            					 nextreg ConsoleImageDataMMU,  BankConsole
  24+ 0000              					 ENDM
  25+ 0000
  26+ 0000              MMUSelectLayer1: 	 MACRO
  27+ 0000 ~            					 nextreg L1memMMU,		    BankLAYER1
  28+ 0000              					 ENDM
  29+ 0000
  30+ 0000              MMUSelectLayer2: 	 MACRO
  31+ 0000 ~            					 nextreg L2memMMU,		    BankLAYER2
  32+ 0000              					 ENDM
  33+ 0000
  34+ 0000              MMUSelectResetUniv:  MACRO
  35+ 0000 ~                                 nextreg ResetUniverseMMU, BankResetUniv
  36+ 0000                                   ENDM
  37+ 0000
  38+ 0000              MMUSelectShipARead:  MACRO
  39+ 0000 ~                                 add    a,BankUNIVDATA0
  40+ 0000 ~                                 nextreg ShipReadMMU,       a
  41+ 0000                                   ENDM
  42+ 0000
  43+ 0000              MMUSelectShipBank1:  MACRO
  44+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels1
  45+ 0000              					 ENDM
  46+ 0000              MMUSelectShipBank2:  MACRO
  47+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels2
  48+ 0000              					 ENDM
  49+ 0000              MMUSelectShipBank3:  MACRO
  50+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels3
  51+ 0000              					 ENDM
  52+ 0000              MMUSelectShipBank4:  MACRO
  53+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels4
  54+ 0000              					 ENDM
  55+ 0000
  56+ 0000              MMUSelectShipBankA   MACRO
  57+ 0000 ~            					 nextreg ShipModelMMU,	    a
  58+ 0000              					 ENDM
  59+ 0000
  60+ 0000              MMUSelectShipBankN:  MACRO value
  61+ 0000 ~            					 nextreg ShipModelMMU,	    value
  62+ 0000              					 ENDM
  63+ 0000
  64+ 0000              MMUSelectCommander:	 MACRO
  65+ 0000 ~                                 nextreg CommanderMMU,       BankCommander
  66+ 0000              					 ENDM
  67+ 0000
  68+ 0000              MMUSelectStockTable: MACRO
  69+ 0000 ~                                 nextreg StockTableMMU,     BankStockTable
  70+ 0000              					 ENDM
  71+ 0000
  72+ 0000              MMUSelectCpySrcA:    MACRO
  73+ 0000 ~                                 nextreg DMACpySourceMMU,	a
  74+ 0000              					 ENDM
  75+ 0000
  76+ 0000              MMUSelectCpySrcN:    MACRO value
  77+ 0000 ~                                 nextreg DMACpySourceMMU,	value
  78+ 0000              					 ENDM
  79+ 0000
  80+ 0000              MMUSelectSun:        MACRO
  81+ 0000 ~                                 nextreg SunMMU,            BankSunData
  82+ 0000                                   ENDM
  83+ 0000
  84+ 0000              MMUSelectPlanet:     MACRO
  85+ 0000 ~                                 nextreg PlanetMMU,         BankPlanetData
  86+ 0000                                   ENDM
  87+ 0000
  88+ 0000              MMUSelectUniverseA:  MACRO
  89+ 0000 ~                                 add    a,BankUNIVDATA0
  90+ 0000 ~                                 nextreg UniverseMMU,       a
  91+ 0000                                   ENDM
  92+ 0000              ;Version that assumes a pre calulated A, used whn optimising many switches
  93+ 0000              MMUSelectUnivBankA:  MACRO
  94+ 0000 ~                                 nextreg UniverseMMU,       a
  95+ 0000                                   ENDM
  96+ 0000
  97+ 0000              MMUSelectUniverseN:  MACRO value
  98+ 0000 ~                                 nextreg UniverseMMU,       BankUNIVDATA0+value
  99+ 0000                                   ENDM
 100+ 0000
 101+ 0000              MMUSelectSpaceStation: MACRO
 102+ 0000 ~                                 nextreg SpaceStationMMU,         BankSpaceStationData
 103+ 0000                                   ENDM
 104+ 0000
 105+ 0000              MMUSelectMathsBankedFns   MACRO
 106+ 0000 ~                                 nextreg MathsBankedFnsMMU, BankMathsBankedFns
 107+ 0000                                   ENDM
 108+ 0000
 109+ 0000              MMUSelectGalaxyA:    MACRO
 110+ 0000 ~                                 nextreg GalaxyDataMMU,     a
 111+ 0000                                   ENDM
 112+ 0000
 113+ 0000              MMUSelectGalaxyN:    MACRO value
 114+ 0000 ~                                 nextreg GalaxyDataMMU,     BankGalaxyData0+value
 115+ 0000                                   ENDM
 116+ 0000              MMUSelectGalaxyACopy:MACRO
 117+ 0000 ~                                 nextreg UniverseMMU,       a
 118+ 0000                                   ENDM
 119+ 0000
 120+ 0000              MMUSelectUniverseAbs:MACRO value
 121+ 0000 ~                                 nextreg UniverseMMU,       value
 122+ 0000                                   ENDM
 123+ 0000
 124+ 0000              MMUSelectMenuGalCht: MACRO
 125+ 0000 ~                                 nextreg MenuGalChtMMU,		BankMenuGalCht
 126+ 0000              					 ENDM
 127+ 0000
 128+ 0000              MMUSelectMenuShrCht: MACRO
 129+ 0000 ~            					 nextreg MenuShrChtMMU,		BankMenuShrCht
 130+ 0000              					 ENDM
 131+ 0000
 132+ 0000              MMUSelectMenuInvent: MACRO
 133+ 0000 ~                                 nextreg MenuInventMMU,		BankMenuInvent
 134+ 0000              					 ENDM
 135+ 0000
 136+ 0000              MMUSelectMenuSystem: MACRO
 137+ 0000 ~                                 nextreg MenuSystemMMU,		BankMenuSystem
 138+ 0000              					 ENDM
 139+ 0000
 140+ 0000              MMUSelectMenuMarket: MACRO
 141+ 0000 ~                                 nextreg MenuMarketMMU,		BankMenuMarket
 142+ 0000              					 ENDM
 143+ 0000
 144+ 0000              MMUSelectMenuStatus: MACRO
 145+ 0000 ~                                 nextreg MenuStatusMMU,		BankMenuStatus
 146+ 0000              					 ENDM
 147+ 0000
 148+ 0000              MMUSelectViewFront:  MACRO
 149+ 0000 ~                                 nextreg ScreenBankMMU,		BankFrontView
 150+ 0000              					 ENDM
 151+ 0000
 152+ 0000              MMUSelectScreenA:    MACRO
 153+ 0000 ~                                 nextreg ScreenBankMMU,		a
 154+ 0000              					 ENDM
 155+ 0000
 156+ 0000              MMUSelectSound:      MACRO
 157+ 0000 ~                                 nextreg SoundMMU,		    BankSound
 158+ 0000              					 ENDM
# file closed: ./Macros/MMUMacros.asm
 104  0000                                      INCLUDE "./Macros/NegateMacros.asm"
# file opened: ./Macros/NegateMacros.asm
   1+ 0000
   2+ 0000              macronegate16hl:	MACRO
   3+ 0000 ~            					xor 	a
   4+ 0000 ~            					sub 	l
   5+ 0000 ~            					ld 		l,a
   6+ 0000 ~            					sbc 	a,a
   7+ 0000 ~            					sub 	h
   8+ 0000 ~            					ld 		h,a
   9+ 0000              					ENDM
  10+ 0000
  11+ 0000
  12+ 0000              macroAbsHL:         MACRO
  13+ 0000 ~                                bit     7,h
  14+ 0000 ~                                jp      z,.alreadyABS
  15+ 0000 ~            					xor 	a
  16+ 0000 ~            					sub 	l
  17+ 0000 ~            					ld 		l,a
  18+ 0000 ~            					sbc 	a,a
  19+ 0000 ~            					sub 	h
  20+ 0000 ~            					ld 		h,a
  21+ 0000 ~            .alreadyABS:
  22+ 0000                                  ENDM
  23+ 0000
  24+ 0000              macronegate16de:	MACRO
  25+ 0000 ~            					xor 	a
  26+ 0000 ~                                sub 	e
  27+ 0000 ~                                ld 		e,a
  28+ 0000 ~                                sbc 	a,a
  29+ 0000 ~                                sub 	d
  30+ 0000 ~                                ld 		d,a
  31+ 0000              					ENDM
  32+ 0000
  33+ 0000              macronegate16bc:	MACRO
  34+ 0000 ~            					xor 	a
  35+ 0000 ~                                sub 	c
  36+ 0000 ~                                ld 		c,a
  37+ 0000 ~                                sbc 	a,a
  38+ 0000 ~                                sub 	b
  39+ 0000 ~                                ld 		b,a
  40+ 0000              					ENDM
  41+ 0000
  42+ 0000              macronegate16ix:	MACRO
  43+ 0000 ~            					xor 	a
  44+ 0000 ~                                sub 	ixl
  45+ 0000 ~                                ld 		ixl,a
  46+ 0000 ~                                sbc 	a,a
  47+ 0000 ~                                sub 	ixh
  48+ 0000 ~                                ld 		ixh,a
  49+ 0000              					ENDM
  50+ 0000
  51+ 0000
  52+ 0000              NegIY:			    MACRO
  53+ 0000 ~                                xor a
  54+ 0000 ~                                sub iyl
  55+ 0000 ~                                ld iyl,a
  56+ 0000 ~                                sbc a,a
  57+ 0000 ~                                sub iyh
  58+ 0000 ~                                ld iyh,a
  59+ 0000                                  ENDM
  60+ 0000
  61+ 0000              NegHL:			    MACRO
  62+ 0000 ~                                xor a
  63+ 0000 ~                                sub l
  64+ 0000 ~                                ld l,a
  65+ 0000 ~                                sbc a,a
  66+ 0000 ~                                sub h
  67+ 0000 ~                                ld h,a
  68+ 0000                                  ENDM
  69+ 0000
  70+ 0000              NegDE:			    MACRO
  71+ 0000 ~                                xor a
  72+ 0000 ~                                sub e
  73+ 0000 ~                                ld e,a
  74+ 0000 ~                                sbc a,a
  75+ 0000 ~                                sub d
  76+ 0000 ~                                ld d,a
  77+ 0000                                  ENDM
  78+ 0000
  79+ 0000              NegBC:			    MACRO
  80+ 0000 ~                                xor a
  81+ 0000 ~                                sub c
  82+ 0000 ~                                ld c,a
  83+ 0000 ~                                sbc a,a
  84+ 0000 ~                                sub  b
  85+ 0000 ~                                ld b,a
  86+ 0000                                  ENDM
  87+ 0000
  88+ 0000              NegH                MACRO
  89+ 0000 ~                                ld      a,h
  90+ 0000 ~                                neg
  91+ 0000 ~                                ld      h,a
  92+ 0000                                  ENDM
  93+ 0000
  94+ 0000              NegD                MACRO
  95+ 0000 ~                                ld      a,d
  96+ 0000 ~                                neg
  97+ 0000 ~                                ld      d,a
  98+ 0000                                  ENDM
  99+ 0000
 100+ 0000              NegB                MACRO
 101+ 0000 ~                                ld      a,b
 102+ 0000 ~                                neg
 103+ 0000 ~                                ld      b,a
 104+ 0000                                  ENDM
 105+ 0000
# file closed: ./Macros/NegateMacros.asm
 105  0000                                      INCLUDE "./Macros/returnMacros.asm"
# file opened: ./Macros/returnMacros.asm
   1+ 0000              ReturnIfHLNegative:     MACRO   target
   2+ 0000 ~                                    bit     7,h
   3+ 0000 ~                                    ret     nz
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ReturnIfDENegative:     MACRO   target
   7+ 0000 ~                                    bit     7,d
   8+ 0000 ~                                    ret     nz
   9+ 0000                                      ENDM
  10+ 0000
  11+ 0000              ReturnOnBitSet:         MACRO  reg, bitnbr
  12+ 0000 ~                                    bit 	bitnbr,reg
  13+ 0000 ~                                    ret     nz
  14+ 0000                                      ENDM
  15+ 0000
  16+ 0000              ReturnOnMemBitSet:      MACRO mem, bitnbr
  17+ 0000 ~                                    ld   a,(mem)
  18+ 0000 ~                                    bit 	bitnbr,a
  19+ 0000 ~                                    ret     nz
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              ReturnOnBitClear:       MACRO reg, bitnbr
  23+ 0000 ~                                    bit 	bitnbr,reg
  24+ 0000 ~                                    ret		z
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              ReturnOnMemBitClear:    MACRO mem, bitnbr
  28+ 0000 ~                                    ld     a,(mem)
  29+ 0000 ~                                    bit 	bitnbr,a
  30+ 0000 ~                                    ret		z
  31+ 0000                                      ENDM
  32+ 0000
  33+ 0000              ReturnIfMemFalse:       MACRO   mem
  34+ 0000 ~                                    ld      a,(mem)
  35+ 0000 ~                                    and     a
  36+ 0000 ~                                    ret     nz
  37+ 0000                                      ENDM
  38+ 0000
  39+ 0000              ReturnIfMemTrue:        MACRO   mem
  40+ 0000 ~                                    ld      a,(mem)
  41+ 0000 ~                                    and     a
  42+ 0000 ~                                    ret     z
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              ReturnIfAIsZero:        MACRO
  46+ 0000 ~                                    and     a
  47+ 0000 ~                                    ret     z
  48+ 0000                                      ENDM
  49+ 0000
  50+ 0000              ReturnIfMemisZero:      MACRO mem
  51+ 0000 ~                                    ld   a,(mem)
  52+ 0000 ~                                    and a
  53+ 0000 ~                                    ret    z
  54+ 0000                                      ENDM
  55+ 0000
  56+ 0000              ReturnIfMemIsNegative:  MACRO mem
  57+ 0000 ~                                    ld      a,(mem)
  58+ 0000 ~                                    and     $80
  59+ 0000 ~                                    ret     nz
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              ReturnIfBitMaskClear    MACRO   bitmask
  63+ 0000 ~                                    and     bitmask
  64+ 0000 ~                                    ret     z
  65+ 0000                                      ENDM
  66+ 0000
  67+ 0000              ReturnIfBitMaskSet      MACRO   bitmask
  68+ 0000 ~                                    and     bitmask
  69+ 0000 ~                                    ret     nz
  70+ 0000                                      ENDM
  71+ 0000
  72+ 0000              ReturnIfMemEquN:        MACRO mem, value
  73+ 0000 ~                                    ld     a,(mem)
  74+ 0000 ~                                    cp     value
  75+ 0000 ~                                    ret    nz
  76+ 0000                                      ENDM
  77+ 0000
  78+ 0000              ReturnIfMemNeNusng:     MACRO mem, value
  79+ 0000 ~                                    ld   a,(mem)
  80+ 0000 ~                                    cp     value
  81+ 0000 ~                                    ret    z
  82+ 0000                                      ENDM
  83+ 0000
  84+ 0000              ReturnIfRegNotZero:     MACRO reg
  85+ 0000 ~                                    ld      a, reg
  86+ 0000 ~                                    and     a
  87+ 0000 ~                                    ret     nz
  88+ 0000                                      ENDM
  89+ 0000
  90+ 0000              ReturnIfANotZero:       MACRO
  91+ 0000 ~                                    and     a
  92+ 0000 ~                                    ret     nz
  93+ 0000                                      ENDM
  94+ 0000
  95+ 0000              ReturnIfNotZero:        MACRO
  96+ 0000 ~                                    ret     nz
  97+ 0000                                      ENDM
  98+ 0000
  99+ 0000              ReturnIfZero:           MACRO
 100+ 0000 ~                                    ret     z
 101+ 0000                                      ENDM
 102+ 0000
 103+ 0000              ReturnIfNegative:       MACRO
 104+ 0000 ~                                    ret     m
 105+ 0000                                      ENDM
 106+ 0000
 107+ 0000
 108+ 0000              ReturnIfMemNotZero:     MACRO mem
 109+ 0000 ~                                    ld     a,(mem)
 110+ 0000 ~                                    and     a
 111+ 0000 ~                                    ret    nz
 112+ 0000                                      ENDM
 113+ 0000
 114+ 0000              ReturnIfAGTEusng:       MACRO value
 115+ 0000 ~                                    cp    value
 116+ 0000 ~                                    ret	 nc
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              ReturnIfRegLTNusng:     MACRO reg, value
 120+ 0000 ~                                    ld      a,reg
 121+ 0000 ~                                    cp      value
 122+ 0000 ~                                    ret	    c
 123+ 0000                                      ENDM
 124+ 0000
 125+ 0000              ReturnIfALTNusng:       MACRO value
 126+ 0000 ~                                    cp    value
 127+ 0000 ~                                    ret	 c
 128+ 0000                                      ENDM
 129+ 0000
 130+ 0000              ReturnIfAGTENusng:      MACRO value
 131+ 0000 ~                                    cp    value
 132+ 0000 ~                                    ret	 nc
 133+ 0000                                      ENDM
 134+ 0000
 135+ 0000              ReturnIfAGTEMemusng:    MACRO value
 136+ 0000 ~                                    ld      hl,value
 137+ 0000 ~                                    cp      (hl)
 138+ 0000 ~                                    ret	    nc
 139+ 0000                                      ENDM
 140+ 0000
 141+ 0000              ReturnIfANENusng:       MACRO value
 142+ 0000 ~                                    cp      value
 143+ 0000 ~                                    ret     nz
 144+ 0000                                      ENDM
 145+ 0000
 146+ 0000              ReturnIfAEqNusng:       MACRO value
 147+ 0000 ~                                    cp      value
 148+ 0000 ~                                    ret     z
 149+ 0000                                      ENDM
 150+ 0000
# file closed: ./Macros/returnMacros.asm
 106  0000                                      INCLUDE "./Macros/ShiftMacros.asm"
# file opened: ./Macros/ShiftMacros.asm
   1+ 0000              ShiftIYRight1: MACRO
   2+ 0000 ~            			   ld 	a,iyh
   3+ 0000 ~            			   srl 	a
   4+ 0000 ~            			   ld	iyh,a
   5+ 0000 ~            			   ld 	a,iyl
   6+ 0000 ~            			   rra
   7+ 0000 ~            			   ld	iyl,a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000              ShiftIXRight1: MACRO
  11+ 0000 ~            			   ld 	a,ixh
  12+ 0000 ~            			   srl 	a
  13+ 0000 ~            			   ld	ixh,a
  14+ 0000 ~            			   ld 	a,ixl
  15+ 0000 ~            			   rra
  16+ 0000 ~            			   ld	ixl,a
  17+ 0000              			   ENDM
  18+ 0000
  19+ 0000              ShiftHLRight1: MACRO
  20+ 0000 ~            			   srl h
  21+ 0000 ~            			   rr  l
  22+ 0000              			   ENDM
  23+ 0000
  24+ 0000              ShiftDERight1: MACRO
  25+ 0000 ~            			   srl d
  26+ 0000 ~            			   rr  e
  27+ 0000              			   ENDM
  28+ 0000
  29+ 0000              ShiftBCRight1: MACRO
  30+ 0000 ~            			   srl b
  31+ 0000 ~            			   rr  c
  32+ 0000              			   ENDM
  33+ 0000
  34+ 0000
  35+ 0000
  36+ 0000              ShiftHLDiv8:   MACRO
  37+ 0000 ~            			   srl h
  38+ 0000 ~            			   rr  l
  39+ 0000 ~            			   srl h
  40+ 0000 ~            			   rr  l
  41+ 0000 ~            			   srl h
  42+ 0000 ~            			   rr  l
  43+ 0000              			   ENDM
  44+ 0000
  45+ 0000              ShiftHLLeft1:  MACRO    ; 16 T states
  46+ 0000 ~            			   sla l
  47+ 0000 ~            			   rl  h
  48+ 0000              			   ENDM
  49+ 0000
  50+ 0000              ShiftDELeft1:  MACRO    ; 16 T states
  51+ 0000 ~            			   sla e
  52+ 0000 ~            			   rl  d
  53+ 0000              			   ENDM
  54+ 0000
  55+ 0000              BarrelHLLeft3: MACRO
  56+ 0000 ~                           ex       de,hl   ; 4   43 T states vs 32 for doing ShiftHL Twice, so need at least 3 Shifts
  57+ 0000 ~                           push     bc      ; 10
  58+ 0000 ~                           ld       b,3     ; 7
  59+ 0000 ~                           bsrl     de,b    ; 8
  60+ 0000 ~                           pop      bc      ; 10
  61+ 0000 ~                           ex       de,hl   ; 4
  62+ 0000                             ENDM
  63+ 0000
  64+ 0000              BarrelHLRight3: MACRO
  65+ 0000 ~                           ex       de,hl   ; 4   43 T states vs 32 for doing ShiftHL Twice, so need at least 3 Shifts
  66+ 0000 ~                           push     bc      ; 10
  67+ 0000 ~                           ld       b,3     ; 7
  68+ 0000 ~                           bsrl     de,b    ; 8
  69+ 0000 ~                           pop      bc      ; 10
  70+ 0000 ~                           ex       de,hl   ; 4
  71+ 0000                             ENDM
  72+ 0000
  73+ 0000              RollBCLeft1:   MACRO	; 16 T states
  74+ 0000 ~                           rl  c
  75+ 0000 ~                           rl  b
  76+ 0000                             ENDM
  77+ 0000
  78+ 0000              RollDELeft1:   MACRO	; 16 T states
  79+ 0000 ~                           rl  e
  80+ 0000 ~                           rl  d
  81+ 0000                             ENDM
  82+ 0000
  83+ 0000              ShiftBCLeft1:  MACRO    ; 16 T states
  84+ 0000 ~            			   sla c
  85+ 0000 ~            			   rl  b
  86+ 0000              			   ENDM
  87+ 0000
  88+ 0000              ShiftLeftMem:       MACRO   reg
  89+ 0000 ~                                ld      hl,reg
  90+ 0000 ~                                sla     (hl)
  91+ 0000                                  ENDM
  92+ 0000
  93+ 0000
  94+ 0000
  95+ 0000              ShiftMem16Right1:   MACRO memaddr
  96+ 0000 ~                                ld    hl,(memaddr)
  97+ 0000 ~                                srl   h
  98+ 0000 ~                                rr    l
  99+ 0000 ~                                ld    (memaddr),hl
 100+ 0000                                  ENDM
 101+ 0000
 102+ 0000              ShiftMem8Right1:    MACRO memaddr
 103+ 0000 ~                                ld      a,(memaddr)
 104+ 0000 ~                                srl     a
 105+ 0000 ~                                ld      (memaddr),a
 106+ 0000                                  ENDM
 107+ 0000
 108+ 0000
 109+ 0000              ShiftMem8Left1A:    MACRO memaddr
 110+ 0000 ~                                ld      a,(memaddr)
 111+ 0000 ~                                sla     a
 112+ 0000 ~                                ld      (memaddr),a
 113+ 0000                                  ENDM
 114+ 0000
# file closed: ./Macros/ShiftMacros.asm
 107  0000                                      INCLUDE "./Macros/signBitMacros.asm"
# file opened: ./Macros/signBitMacros.asm
   1+ 0000              SetMemBitN              MACRO mem,bitnbr
   2+ 0000 ~                                    ld      hl,mem
   3+ 0000 ~                                    set     bitnbr,(hl)
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearMemBitN            MACRO mem,bitnbr
   7+ 0000 ~                                    ld      hl,mem
   8+ 0000 ~                                    res     bitnbr,(hl)
   9+ 0000                                      ENDM
  10+ 0000
  11+ 0000
  12+ 0000              ClearSignBitMem:        MACRO mem
  13+ 0000 ~                                    ld      a,(mem)
  14+ 0000 ~                                    and     SignMask8Bit
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetSignBitMem:          MACRO   mem
  19+ 0000 ~                                    ld      a,(mem)
  20+ 0000 ~                                    or      SignOnly8Bit
  21+ 0000 ~                                    ld      (mem),a
  22+ 0000                                      ENDM
  23+ 0000
  24+ 0000              FlipSignMem:            MACRO mem
  25+ 0000 ~                                    ld  a,(mem)
  26+ 0000 ~                                    xor SignOnly8Bit
  27+ 0000 ~                                    ld  (mem),a
  28+ 0000                                      ENDM
  29+ 0000
  30+ 0000              SignBitOnlyMem:         MACRO mem
  31+ 0000 ~                                    ld      a, (mem)
  32+ 0000 ~                                    and     SignOnly8Bit
  33+ 0000 ~                                    ld      (mem),a
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              ClearSignBit:           MACRO reg
  37+ 0000 ~                                    ld      a,reg
  38+ 0000 ~                                    and     SignMask8Bit
  39+ 0000 ~                                    ld      reg,a
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              SetSignBit:             MACRO   reg
  43+ 0000 ~                                    ld      a,reg
  44+ 0000 ~                                    or      SignOnly8Bit
  45+ 0000 ~                                    ld      reg,a
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              FlipSignBit:            MACRO   reg
  49+ 0000 ~                                    ld      a, reg
  50+ 0000 ~                                    xor     SignOnly8Bit
  51+ 0000 ~                                    ld      reg,a
  52+ 0000                                      ENDM
  53+ 0000
  54+ 0000              SignBitOnly:            MACRO   reg
  55+ 0000 ~                                    ld      a, reg
  56+ 0000 ~                                    and     SignOnly8Bit
  57+ 0000 ~                                    ld      reg,a
  58+ 0000                                      ENDM
  59+ 0000
  60+ 0000              ClearSignBitA:          MACRO
  61+ 0000 ~                                    and     SignMask8Bit
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              SetSignBitA:            MACRO
  65+ 0000 ~                                    or      SignOnly8Bit
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              FlipSignBitA:           MACRO
  69+ 0000 ~                                    xor     SignOnly8Bit
  70+ 0000                                      ENDM
  71+ 0000
  72+ 0000              SignBitOnlyA:           MACRO
  73+ 0000 ~                                    and     SignOnly8Bit
  74+ 0000                                      ENDM
# file closed: ./Macros/signBitMacros.asm
 108  0000                                      INCLUDE "./Macros/KeyboardMacros.asm"
# file opened: ./Macros/KeyboardMacros.asm
   1+ 0000              MacroIsKeyPressed:      MACRO C_Pressed_keycode
   2+ 0000 ~                                    ld      a,C_Pressed_keycode
   3+ 0000 ~                                    MMUSelectKeyboard
   4+ 0000 ~                                    call    is_key_pressed
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              MacroInitkeyboard:      MACRO
   8+ 0000 ~                                    MMUSelectKeyboard
   9+ 0000 ~                                    call    init_keyboard
  10+ 0000                                      ENDM
  11+ 0000
# file closed: ./Macros/KeyboardMacros.asm
 109  0000                                      INCLUDE "./Universe/UniverseMacros/asm_linedraw.asm"
# file opened: ./Universe/UniverseMacros/asm_linedraw.asm
   1+ 0000              ClippingVarsMacro:   MACRO   prefix1?
   2+ 0000 ~            ;-- Clipping code for universe objects -------------------------------------------
   3+ 0000 ~            prefix1?_XX13        DB 0
   4+ 0000 ~
   5+ 0000 ~
   6+ 0000 ~            prefix1?_varK3		 DS	4				; D2
   7+ 0000 ~            prefix1?_centreX     equ prefix1?_varK3
   8+ 0000 ~            prefix1?_varK3p2	 DB	0				; 42
   9+ 0000 ~            prefix1?_varK3p3	 DB	0				; 43
  10+ 0000 ~            prefix1?_varK3p1	 equ prefix1?_varK3+1			; D3
  11+ 0000 ~            prefix1?_varK4		 DS	4				; E0
  12+ 0000 ~            prefix1?_centreY     equ prefix1?_varK4
  13+ 0000 ~            prefix1?_varK4p1	 equ prefix1?_varK4+1			; D3
  14+ 0000 ~            prefix1?_varK5       DS  6
  15+ 0000 ~            prefix1?_varK5p2     equ prefix1?_varK5+2
  16+ 0000 ~            prefix1?_varK6       DS  6
  17+ 0000 ~            prefix1?_varK6p2     equ prefix1?_varK6+2
  18+ 0000 ~
  19+ 0000 ~            prefix1?_XX12p2      DB 0    ; The line's gradient * 256 (so 1.0 = 256)
  20+ 0000 ~            prefix1?_XX12p3      DB 0    ; The direction of slope ; + LT to BR; - TR to BL
  21+ 0000 ~            prefix1?_XX12p4      DB 0
  22+ 0000 ~            prefix1?_XX12p5      DB 0
  23+ 0000 ~            prefix1?_Delta_x     EQU prefix1?_XX12p2
  24+ 0000 ~            prefix1?_Delta_y     EQU prefix1?_XX12p4
  25+ 0000 ~            prefix1?_Tvar        DB 0    ; The gradient of slope ; 0 if it's a shallow slope (DX > DY) ; &FF if it's a steep slope (DY > DX) Returns:  XX15        m         x1 as an 8-bit coordinate XX15+2               y1 as an 8-bit coordinate
  26+ 0000 ~            prefix1?_Qvar        DB 0
  27+ 0000 ~            prefix1?_Rvar        DB 0    ; general purpose for calcs  Paired with S must be done this way round for SUBHeightFromY1 etc to work
  28+ 0000 ~            prefix1?_Svar        DB 0    ; sign variable
  29+ 0000 ~            prefix1?_SRvarPair   EQU prefix1?_Rvar
  30+ 0000 ~            prefix1?_Xreg        DB 0
  31+ 0000 ~            prefix1?_Yreg        DB 0
  32+ 0000 ~            prefix1?_YXregPair   EQU prefix1?_Xreg
  33+ 0000                                   ENDM
  34+ 0000
  35+ 0000              ;-- Name: LL28 Calculate R = 256 * A / Q
  36+ 0000              ;-- LL28+4              Skips the A >= Q check and always returns with C flag cleared, so this can be called if we know the division will work
  37+ 0000              ;-- LL31                Skips the A >= Q check and does not set the R counter, so this can be used for jumping straight into the division loop if R is already set to 254 and we know the division will work
  38+ 0000              ;   Reg mapping 6502  Z80
  39+ 0000              ;               a     a
  40+ 0000              ;               b     x
  41+ 0000              ;               c     q
  42+ 0000              ;               d     r
  43+ 0000              ;
  44+ 0000              ClippingCodeLL28Macro:      MACRO   prefix1?
  45+ 0000 ~            prefix1?_LL28_6502:         ld      hl,Qvar                 ; CMP Q                  \ If A >= Q, then the answer will not fit in one byte,
  46+ 0000 ~                                        ld      c,(hl)                  ; using c as Q var
  47+ 0000 ~                                        cp      c
  48+ 0000 ~                                        FlipCarryFlag
  49+ 0000 ~                                        jp      c, prefix1?_LL2_6502    ; BCS LL2                \ so jump to LL2 to return 255
  50+ 0000 ~                                        ld      b,$FE                   ; LDX #%11111110         \ Set R to have bits 1-7 set, so we can rotate through 7 loop iterations, getting a 1 each time, and then we use b as Rvar
  51+ 0000 ~            prefix1?_LL31_6502:          sla     a                       ; ASL A                  \ Shift A to the left
  52+ 0000 ~                                        jp      c, prefix1?_LL29_6502             ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
  53+ 0000 ~                                        FlipCarryFlag                   ;                          If A < N, then C flag is set.
  54+ 0000 ~                                        JumpIfALTNusng c, prefix1?_LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
  55+ 0000 ~                                                                            ; BCC P%+4
  56+ 0000 ~                                        sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  57+ 0000 ~                                        ClearCarryFlag
  58+ 0000 ~            prefix1?_LL31_SKIPSUB_6502:  FlipCarryFlag
  59+ 0000 ~                                        rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  60+ 0000 ~                                        jp      c, prefix1?_LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  61+ 0000 ~                                        ld      a,b
  62+ 0000 ~                                        ld      (Rvar),a
  63+ 0000 ~                                        ret                             ; RTS                    \ R left with remainder of division
  64+ 0000 ~            prefix1?_LL29_6502:          sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  65+ 0000 ~                                        SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
  66+ 0000 ~                                        rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  67+ 0000 ~                                        jp      c, prefix1?_LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  68+ 0000 ~                                        ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
  69+ 0000 ~                                        ld      (Rvar),a                ; .
  70+ 0000 ~                                        ret                             ; .                      \ remainder of the division
  71+ 0000 ~            prefix1?_LL2_6502:          ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
  72+ 0000 ~                                        ld      (Rvar),a                ; STA R                  \ possible answer to 256, i.e. R = 255
  73+ 0000 ~                                        SetCarryFlag                    ; we failed so need carry flag set
  74+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
  75+ 0000 ~
  76+ 0000 ~            prefix1?_ADDXRegtoY1:       ld      a,(Xreg)                ; Set y1 = y1 + (Y X)
  77+ 0000 ~                                        ld      c,a
  78+ 0000 ~                                        ld      b,0
  79+ 0000 ~                                        ld      hl,(prefix1?_XX1532)
  80+ 0000 ~                                        ClearCarryFlag
  81+ 0000 ~                                        adc     hl,bc
  82+ 0000 ~                                        ld      (prefix1?_XX1532),hl
  83+ 0000 ~                                        ret
  84+ 0000 ~
  85+ 0000 ~            prefix1?_ADDYXRegtoY1:      ld      bc,(YXregPair)          ; Set y1 = y1 + (Y X)
  86+ 0000 ~                                        ld      hl,(prefix1?_XX1532)
  87+ 0000 ~                                        ClearCarryFlag
  88+ 0000 ~                                        adc     hl,bc
  89+ 0000 ~                                        ld      (prefix1?_XX1532),hl
  90+ 0000 ~                                        ret
  91+ 0000 ~
  92+ 0000 ~            prefix1?_ADDYXRegtoX1:      ld      bc,(YXregPair)          ; Set x1 = x1 + (Y X)
  93+ 0000 ~                                        ld      hl,(prefix1?_XX1510)
  94+ 0000 ~                                        ClearCarryFlag
  95+ 0000 ~                                        adc     hl,bc
  96+ 0000 ~                                        ld      (prefix1?_XX1510),hl
  97+ 0000 ~                                        ret
  98+ 0000 ~
  99+ 0000 ~            prefix1?_SUBBCFromY1:       ld      hl,(prefix1?_XX1532)             ; Set (S R) = (y1_hi y1_lo) - BC where BC can be say screen height
 100+ 0000 ~                                        ClearCarryFlag
 101+ 0000 ~                                        sbc     hl,bc
 102+ 0000 ~                                        ld      (SRvarPair),hl
 103+ 0000 ~                                        ret
 104+ 0000 ~
 105+ 0000 ~            prefix1?_AddSRToYX:         ld      hl,(YXregPair)
 106+ 0000 ~                                        ld      de,(SRvarPair)
 107+ 0000 ~                                        ClearCarryFlag
 108+ 0000 ~                                        adc     hl,de
 109+ 0000 ~                                        ld      (YXregPair),hl
 110+ 0000 ~                                        ret
 111+ 0000 ~
 112+ 0000 ~            prefix1?_ClampX:            ld      a,h
 113+ 0000 ~                                        and     a
 114+ 0000 ~                                        ld      a,l
 115+ 0000 ~                                        ret     z
 116+ 0000 ~                                        jp      p,.Max255
 117+ 0000 ~            .ClampXMin0:                ZeroA
 118+ 0000 ~                                        ret
 119+ 0000 ~            .Max255:                    ld      a,$FF
 120+ 0000 ~                                        ret
 121+ 0000 ~
 122+ 0000 ~            prefix1?_ClampY:            ld      a,h
 123+ 0000 ~                                        and     a
 124+ 0000 ~                                        jp      z,.ClampYlo
 125+ 0000 ~                                        jp      p,.Max127
 126+ 0000 ~            .ClampYMin0:                ZeroA
 127+ 0000 ~                                        ret
 128+ 0000 ~            .Max127:                    ld      a,127
 129+ 0000 ~                                        ret
 130+ 0000 ~            .ClampYlo:                  ld      a,l
 131+ 0000 ~                                        and     a
 132+ 0000 ~                                        ret     p
 133+ 0000 ~                                        ld      a,127
 134+ 0000 ~                                        ret
 135+ 0000                                          ENDM
 136+ 0000              ;-- Rountes to code:
 137+ 0000              ;-- LL118
 138+ 0000              ;-- LL120   Done
 139+ 0000              ;-- LL129   Done
 140+ 0000              ;-- LL123   Done
 141+ 0000                             ; NOTE DOES ABS ONLY
 142+ 0000
 143+ 0000
 144+ 0000                              ;--- LL118 Move along a point until on screen
 145+ 0000              ; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 146+ 0000              ;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 147+ 0000              ;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 148+ 0000              ;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 149+ 0000              ;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 150+ 0000              ;  Out  XX150               x1 as an 8-bit coordinate
 151+ 0000              ;       XX152               y1 as an 8-bit coordinate
 152+ 0000              ;----------------------------------------------------------------------------------------------------------------
 153+ 0000
 154+ 0000
 155+ 0000              ;---------------------------------------------------------------------------------------------------------------------
 156+ 0000              ;--  Calculate the following:
 157+ 0000              ;--   * If T = 0, this is a shallow slope, so calculate (Y X) = (S x1_lo) * XX12+2
 158+ 0000              ;--   * If T <> 0, this is a steep slope, so calculate (Y X) = (S x1_lo) / XX12+2
 159+ 0000              ;-- giving (Y X) the opposite sign to the slope direction in XX12+3.
 160+ 0000              ;---------------------------------------------------------------------------------------------------------------------
 161+ 0000              ClippingCodeLL120Macro:     MACRO   prefix1?
 162+ 0000 ~            prefix1?_LL120_6502:        ld      a,(prefix1?_XX1510)              ;LDA XX15               \ Set R = x1_lo
 163+ 0000 ~                                        ld      (Rvar),a                ;STA R
 164+ 0000 ~                                        call    prefix1?_LL129_6502              ;JSR LL129              \ Call LL129 to do the following:  Q = XX12+2 = line gradient, A = S EOR XX12+3 = S EOR slope direction  (S R) = |S R|
 165+ 0000 ~                                        push    af                      ;PHA                    \ Store A on the stack so we can use it later
 166+ 0000 ~            ; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump
 167+ 0000 ~                                        ld      a,(Tvar)                ; .
 168+ 0000 ~                                        ld      (Xreg),a                ;. REDUNDANT REMOVE IN OPTIMISATION
 169+ 0000 ~                                        and     a                       ;BNE LL121              \ down to LL121 to calculate this instead (Y X) = (S R) / Q
 170+ 0000 ~            ; DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.                      (recover teh saved A before the cp)
 171+ 0000 ~                                        jr      nz,prefix1?_LL121_6502           ;.
 172+ 0000 ~            ;..   (Y X) = (S R) * Q - must be ABS, sign determined by opposite of the sign of the value on top of stack
 173+ 0000 ~            prefix1?_LL122_6502:         ZeroA                           ;LDA #0                 \ Set A = 0
 174+ 0000 ~
 175+ 0000 ~                                        IFDEF DEBUG_LL122_DIRECT"
 176+ 0000 ~                                              DISPLAY "DIRECT CALL TO LL122 so dummy push a to stack with 0"
 177+ 0000 ~                                              push    af
 178+ 0000 ~                                        ENDIF
 179+ 0000 ~                                        ld      (Xreg),a                ;TAX                    \ Set (Y X) = 0 so we can start building the answer here
 180+ 0000 ~                                        ld      (Yreg),a                ;TAY
 181+ 0000 ~                                        ld      hl,Svar
 182+ 0000 ~                                        ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right, so we extract bit 0 of (S R)
 183+ 0000 ~                                        ShiftBCRight1                   ;ROR R                  \ into the C flag
 184+ 0000 ~                                        ld      (SRvarPair),bc
 185+ 0000 ~                                        ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 186+ 0000 ~                                        sla     (hl)                    ;.
 187+ 0000 ~                                        jr      nc, prefix1?_LL126_6502          ;BCC LL126              \ If C (i.e. the next bit from Q) is clear, do not do
 188+ 0000 ~            ; the addition for this bit of Q, and instead skip to LL126 to just do the shifts
 189+ 0000 ~            prefix1?_LL125_6502:        call    AddSRToYX               ;TXA                    \ Set (Y X) = (Y X) + (S R)  starting with the low bytes And then doing the high bytes
 190+ 0000 ~            prefix1?_LL126_6502:        ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right
 191+ 0000 ~                                        ShiftBCRight1                   ;ROR R
 192+ 0000 ~                                        ld      (SRvarPair),bc          ;.
 193+ 0000 ~                                        ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 194+ 0000 ~                                        sla     (hl)                    ;.
 195+ 0000 ~                                        jr      c,prefix1?_LL125_6502            ;BCS LL125              \ If C (i.e. the next bit from Q) is set, loop back to LL125 to do the addition for this bit of Q
 196+ 0000 ~                                        jr      nz,prefix1?_LL126_6502           ;BNE LL126              \ If Q has not yet run out of set bits, loop back to LL126 to do the \"shift\" part of shift-and-add until we have done additions for all the set bits in Q, to give us our multiplication result
 197+ 0000 ~                                        pop     af                      ;PLA                    \ Restore A, which we calculated above, from the stack
 198+ 0000 ~                                        and     a                       ;BPL LL133              \ If A is positive jump to LL133 to negate (Y X) and
 199+ 0000 ~                                        jp      p,prefix1?_LL133_6502            ;.
 200+ 0000 ~                                        ;.. return from the subroutine using a tail call
 201+ 0000 ~                                        ret                             ;RTS                    \ Return from the subroutine
 202+ 0000                                  ENDM
 203+ 0000              ;----------------------------------------------------------------------------------------------------------------------------
 204+ 0000              ;-- Calculate the following:
 205+ 0000              ;--         * If T = 0, this is a shallow slope, so calculate (Y X) = (S R) / XX12+2 (does not use X1lo but directly SR)
 206+ 0000              ;--         * If T <> 0, this is a steep slope, so calculate (Y X) = (S R) * XX12+2  (does not use X1lo but directly SR)
 207+ 0000              ;--             giving (Y X) the opposite sign to the slope direction in XX12+3.
 208+ 0000              ClippingCodeLL122Macro:      MACRO   prefix1?
 209+ 0000 ~            prefix1?_LL123_6502:         call    prefix1?_LL129_6502              ;JSR LL129              \ Call LL129 to do the following   Q = XX12+2   = line gradient
 210+ 0000 ~                                         push    af                      ;PHA                    \ Store A on the stack so we can use it later
 211+ 0000 ~            ; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump up
 212+ 0000 ~                                         ld      a,(Tvar)                ; .
 213+ 0000 ~                                         ld      (Xreg),a                ;BNE LL122              \ to LL122 to calculate this instead:
 214+ 0000 ~                                         and     a                       ;.
 215+ 0000 ~            ;  DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.
 216+ 0000 ~                                         jr      nz,prefix1?_LL122_6502           ;.
 217+ 0000 ~            ;--  The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2
 218+ 0000 ~            prefix1?_LL121_6502:         ld      a,$FF                   ;LDA #%11111111         \ Set Y = %11111111
 219+ 0000 ~                                         ld      (Yreg),a                ;TAY
 220+ 0000 ~                                         sla     a                       ;ASL A                  \ Set X = %11111110
 221+ 0000 ~                                         ld      (Xreg),a                ;TAX
 222+ 0000 ~            ;--  This sets (Y X) = %1111111111111110, so we can rotate through 15 loop iterations, getting a 1 each time, and then getting a 0 on the 16th iteration... and we can also use it to catch our result bits into bit 0 each time
 223+ 0000 ~            prefix1?_LL130_6502:         ld      bc,(SRvarPair)          ;ASL R                  \ Shift (S R) to the left
 224+ 0000 ~                                        ShiftBCLeft1                    ;.
 225+ 0000 ~                                        ld      (SRvarPair),bc          ;ROL S
 226+ 0000 ~                                        ld      a,(Svar)                ;LDA S                  \ Set A = S
 227+ 0000 ~                                        jr      c, prefix1?_LL131_6502           ;BCS LL131              \ If bit 7 of S was set, then jump straight to the subtraction
 228+ 0000 ~                                        ld      hl,Qvar                 ;CMP Q                  \ If A < Q (i.e. S < Q), skip the following subtractions
 229+ 0000 ~                                        cp      (hl)
 230+ 0000 ~                                        FlipCarryFlag                   ; note flip carry flag here to simulate 6502 operation
 231+ 0000 ~                                        jr      nc,prefix1?_LL132A_6502          ;BCC LL132  (NOTE Carry flag reversed in Z80 for CP)
 232+ 0000 ~            prefix1?_LL131_6502:         FlipCarryFlag                   ;flip carry to make it act like a 6502 borrow
 233+ 0000 ~                                        sbc     (hl)                    ;SBC Q                  \ A >= Q (i.e. S >= Q) so set:
 234+ 0000 ~                                        ld      (Svar),a                ;STA S
 235+ 0000 ~                                        ld      a,(Rvar)                ;LDA R                  \ And then doing the high bytes
 236+ 0000 ~                                        ClearCarryFlag                  ;\   S = (A R) - Q  = (S R) - Q starting with the low bytes (we know the C flag is set so the subtraction will be correct)
 237+ 0000 ~                                        sbc     0                       ;SBC #0
 238+ 0000 ~                                        ld      (Rvar),a                ;STA R
 239+ 0000 ~                                        SetCarryFlag                    ;SEC                    \ Set the C flag to rotate into the result in (Y X)
 240+ 0000 ~                                        jp      prefix1?_LL132_6502              ;added so that we can do a 6502 style carry above
 241+ 0000 ~            prefix1?_LL132A_6502:        nop; FlipCarryFlag
 242+ 0000 ~            prefix1?_LL132_6502:         ld      bc,(YXregPair)          ; Rotate the counter in (Y X) to the left, and catch the
 243+ 0000 ~                                        RollBCLeft1                     ; ROL A                  \ result bit into bit 0 (which will be a 0 if we didn't
 244+ 0000 ~                                        ld      (YXregPair),bc          ; TAX                    \ do the subtraction, or 1 if we did)
 245+ 0000 ~                                        jr      c, prefix1?_LL130_6502           ; BCS LL130              \ If we still have set bits in (Y X), loop back to LL130 to do the next iteration of 15, until we have done the whole division
 246+ 0000 ~                    IFDEF DEBUG_LL121_DIRECT
 247+ 0000 ~                          DISPLAY "DIRECT CALL TO LL121 so dummy push"
 248+ 0000 ~                                        push    af
 249+ 0000 ~                    ENDIF
 250+ 0000 ~                                        pop     af                      ; PLA                    \ Restore A, which we calculated above, from the stack
 251+ 0000 ~                                        and     a                       ; BMI LL128              \ If A is negative jump to LL128 to return from the
 252+ 0000 ~                                        jp      m, prefix1?_LL128_6502           ; .                      \ subroutine with (Y X) as is
 253+ 0000 ~            prefix1?_LL133_6502:          ld      bc,(YXregPair)          ; TXA                    \ Otherwise negate (Y X) using two's complement by first
 254+ 0000 ~                                        macronegate16bc                 ; EOR #%11111111         \ setting the low byte to ~X + 1
 255+ 0000 ~                                        ld      (YXregPair),bc          ; ADC #1                 \ The addition works as we know the C flag is clear from\ when we passed through the BCS above
 256+ 0000 ~            prefix1?_LL128_6502:          ret                             ; RTS                    \ Return from the subroutine
 257+ 0000 ~            ;-------------------------------------------------------------------------------------------------------
 258+ 0000 ~            ;..  Do the following, in this order: Q = XX12+2 A = S EOR XX12+3 (S R) = |S R|
 259+ 0000 ~            ;..  This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 260+ 0000 ~            prefix1?_LL129_6502:        push    af                      ;LDX XX12+2             \ Set Q = XX12+2
 261+ 0000 ~                                        ld      a,(prefix1?_XX12p2)              ;.
 262+ 0000 ~                                        ld      (Xreg),a                ;.
 263+ 0000 ~                                        ld      (Qvar),a                ;STX Q
 264+ 0000 ~                                        pop     af                      ;.
 265+ 0000 ~                                        ld      a,(Svar)                ;LDA S                  \ If S is positive, jump to LL127
 266+ 0000 ~                                        and     a                       ;BPL LL127
 267+ 0000 ~                                        jp      p,prefix1?_LL127_6502            ;.
 268+ 0000 ~                                        ZeroA                           ;.LDA #0                \ Otherwise set R = -R
 269+ 0000 ~                                        ClearCarryFlag                  ;SEC
 270+ 0000 ~                                        ld      hl, Rvar                ;SBC R
 271+ 0000 ~                                        sbc     (hl)                    ;.
 272+ 0000 ~                                        ld      (Rvar),a                ;STA R
 273+ 0000 ~                                        ld      a,(Svar)                ;LDA S                  \ Push S onto the stack
 274+ 0000 ~                                        push    af                      ;PHA
 275+ 0000 ~                                        xor     $FF                     ;EOR #%11111111         \ Set S = ~S + 1 + C  ?? is this all just doing |Svar|?
 276+ 0000 ~                                        adc     0                       ;ADC #0
 277+ 0000 ~                                        ld      (Svar),a                ;STA S
 278+ 0000 ~                                        pop     af                      ;PLA                    \ Pull the original, negative S from the stack into A
 279+ 0000 ~            prefix1?_LL127_6502:        ld      hl,prefix1?_XX12p3               ;EOR XX12+3             \ Set A = original argument S EOR'd with XX12+3
 280+ 0000 ~                                        xor     (hl)                    ;.
 281+ 0000 ~                                        ret                             ;RTS                    \ Return from the subroutine
 282+ 0000 ~            ;----------------------------------------------------------------------------------------------------------------
 283+ 0000 ~            ;--- LL118 Move along a point until on screen
 284+ 0000 ~            ; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 285+ 0000 ~            ;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 286+ 0000 ~            ;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 287+ 0000 ~            ;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 288+ 0000 ~            ;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 289+ 0000 ~            ;  Out  XX150               x1 as an 8-bit coordinate
 290+ 0000 ~            ;       XX152               y1 as an 8-bit coordinate
 291+ 0000 ~            ;----------------------------------------------------------------------------------------------------------------
 292+ 0000 ~
 293+ 0000 ~            prefix1?_LL118_6502:         ld      a,(prefix1?_XX1510+1)            ; LDA XX15+1             \ If x1_hi is positive, jump down to LL119 to skip the
 294+ 0000 ~                                        and     a                       ; BPL LL119              \ .
 295+ 0000 ~                                        jp      p, prefix1?_LL119_6502           ;                        \ following
 296+ 0000 ~            .X1Negative:                ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 297+ 0000 ~                                        call    prefix1?_LL120_6502              ; Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 298+ 0000 ~                                                                ;                            (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 299+ 0000 ~                                                                ; with the sign of (Y X) set to the opposite of the line's direction of slope
 300+ 0000 ~                                        call    ADDYXRegtoY1             ; Set y1 = y1 + (Y X)
 301+ 0000 ~                                        ld      (prefix1?_XX1532),hl             ; .
 302+ 0000 ~                                        ld      hl,0                    ; Set x1 = 0
 303+ 0000 ~                                        ld      (prefix1?_XX1510),hl             ; .
 304+ 0000 ~                                        ld      a,0                     ; set 0 up for replacemetn of the TAX and BEQ bit
 305+ 0000 ~                                        ld      (Xreg),a                ; TAX                    \ Set X = 0 so the next BEQ becomes a jmp but we will do it anyway in next line
 306+ 0000 ~                                        jp      prefix1?_LL134_6502              ; just do the jump to LL134 rather than setting to equal flag and then jumping
 307+ 0000 ~            ;-- Entering LL119 a will always be the value of X1 Hi byte
 308+ 0000 ~            prefix1?_LL119_6502:         jp      z,prefix1?_LL134_6502            ; BEQ LL134              \ x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen
 309+ 0000 ~                                                                        ;                        \ (as 0 <= (x_hi x_lo) <= 255)
 310+ 0000 ~                                        ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is positive, i.e. x1 >= 256 and off
 311+ 0000 ~                                        dec     a                       ; DEC S                  \ the right side of the screen, so set S = x1_hi - 1
 312+ 0000 ~                                        ld      (Svar),a                ;
 313+ 0000 ~                                        call    prefix1?_LL120_6502              ; JSR LL120              \ Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = (x1 - 256) * gradient
 314+ 0000 ~                                                                        ;                        \                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 315+ 0000 ~                                                                        ;                        \ with the sign of (Y X) set to the opposite of the line's direction of slope
 316+ 0000 ~                                        call    ADDYXRegtoY1             ; TXA                    \ Set y1 = y1 + (Y X)
 317+ 0000 ~                                        ld      hl,255                  ; LDX #255               \ Set x1 = 255
 318+ 0000 ~                                        ld      ( prefix1?_XX1510 ),hl             ; STX XX15 ;INX; STX XX15+1
 319+ 0000 ~            ;--  We have moved the point so the x-coordinate is on  screen (i.e. in the range 0-255), so now for the  y-coordinate
 320+ 0000 ~            prefix1?_LL134_6502:        ld      a,(prefix1?_XX1532+1)            ; LDA XX15+3             \ If y1_hi is positive, jump down to LL119 to skip
 321+ 0000 ~                                        and     a                       ; BPL LL135              \ the following
 322+ 0000 ~                                        jp      p, prefix1?_LL135_6502           ; .
 323+ 0000 ~                                        ld      (Svar),a                ; STA S                  \ Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 324+ 0000 ~                                        ld      a, ( prefix1?_XX1532)             ; LDA XX15+2             \ Set R = y1_lo
 325+ 0000 ~                                        ld      (Rvar),a                ; STA R
 326+ 0000 ~                                        call    prefix1?_LL123_6502              ; JSR LL123              \ Call LL123 to calculate:  (Y X) = (S R) / XX12+2      if T = 0 = y1 / gradient
 327+ 0000 ~                                                                        ;                        \                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 328+ 0000 ~                                                                        ;                         with the sign of (Y X) set to the opposite of the line's direction of slope
 329+ 0000 ~                                        call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 330+ 0000 ~                                        ld      hl,0                    ; LDA #0                 \ Set y1 = 0
 331+ 0000 ~                                        ld      ( prefix1?_XX1532),hl             ; STA XX15+2, XX15+3
 332+ 0000 ~            prefix1?_LL135_6502:         ld      bc,128                  ; LDA XX15+2             \ Set (S R) = (y1_hi y1_lo) - screen height
 333+ 0000 ~                                        call    SUBBCFromY1             ; .                      \ .
 334+ 0000 ~                                        jr      c, prefix1?_LL136_6502           ; BCC LL136              \ If the subtraction underflowed, i.e. if y1 < screen height, then y1 is already on-screen, so jump to LL136
 335+ 0000 ~                                                                ;                        \ to return from the subroutine, as we are done
 336+ 0000 ~            ;;-   If we get here then y1 >= screen height, i.e. off the bottom of the screen
 337+ 0000 ~            prefix1?_LL139_6502:         call    prefix1?_LL123_6502              ; JSR LL123              \ Call LL123 to calculate:   (Y X) = (S R) / XX12+2      if T = 0  = (y1 - screen height) / gradient
 338+ 0000 ~            ;                        \                            (Y X) = (S R) * XX12+2      if T <> 0 = (y1 - screen height) * gradient
 339+ 0000 ~            ;                          with the sign of (Y X) set to the opposite of the line's direction of slope
 340+ 0000 ~                                        call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 341+ 0000 ~                                        ld      hl, 127                 ; LDA #Y*2-1             \ Set y1 = 2 * #Y - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view (or in our case 127)
 342+ 0000 ~                                        ld      (prefix1?_XX1532),hl             ; STA XX15+3             \ pixel row of the space view
 343+ 0000 ~            prefix1?_LL136_6502:         ret                             ; RTS                    \ Return from the subroutine
 344+ 0000 ~            ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 345+ 0000 ~            ;-- LL145 LINE CLIP
 346+ 0000 ~            ;-- OPTISIATIONS - VERTICAL HORZONTAL POINT |DX| = |DY| (and all the veriants for +/-)
 347+ 0000 ~            ;-- This routine clips the line from (x1, y1) to (x2, y2) so it fits on-screen, or returns an error if it can't be clipped to fit. The arguments are 16-bit coordinates, and the clipped line is returned using 8-bit screen coordinates.
 348+ 0000 ~            ;-- This part sets XX13 to reflect which of the two points are on-screen and off-screen.
 349+ 0000 ~            ;-- IN  : XX15(1 0) x1 XX15(3 2) y1 XX15(5 4) x2 XX12(1 0) y2
 350+ 0000 ~            ;-- OUT : (X1, Y1), (X2, Y2) Screen coordinate C flag  Clear if the clipped line fits on-screen, set if itdoesn't
 351+ 0000 ~            ;         XX13 The state of the original coordinates on-screen:* 0   = (x2, y2) on-screen* 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen* 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 352+ 0000 ~            ;              So XX13 is non-zero if the end of the line was clipped,meaning the next line sent to BLINE can't join onto the end but has to start a new segment
 353+ 0000 ~            ;         SWAP The swap status of the returned coordinates:* &FF if we swapped the values of (x1, y1) and(x2, y2) as part of the clipping process* 0 if the coordinates are still in the same order
 354+ 0000 ~            ; TODO treat horizonal/vert and single pixel as special cases
 355+ 0000                                  ENDM
 356+ 0000
 357+ 0000              ClippingCodeLL145Macro:     MACRO   prefix1?
 358+ 0000 ~            prefix1?_LL145_6502:        ZeroA                           ; LDA #0                 \ Set SWAP = 0
 359+ 0000 ~                                        ld      (SWAP),a                ; STA SWAP
 360+ 0000 ~                                        ld      a,(prefix1?_XX15X2hi)            ; LDA XX15+5             \ Set A = x2_hi (use b as a substibute for a)
 361+ 0000 ~                                        ld      b,a                     ; .
 362+ 0000 ~            ; Note that as we are interested in the sign of XX113 then this needs to be >= 128 or < 128 or 0, we will use 191 as per bbc for now
 363+ 0000 ~            ; for the screen coord we will use 127 though, we use c as a temporay X register
 364+ 0000 ~            prefix1?_LL147_6502:        ld      a,191                   ; LDX #Y*2-1             \ Set X = #Y * 2 - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view, so this sets Y2 to 191, the y-coordinate of the bottom pixel row of the space view
 365+ 0000 ~                                        ld      (Xreg),a                ; .
 366+ 0000 ~            ;                    ld      a,127
 367+ 0000 ~            ;                    ld      c,a
 368+ 0000 ~            .CheckX2Y2High:             ld      a,b                     ; ORA XX12+1             \ If one or both of x2_hi and y2_hi are non-zero, jump
 369+ 0000 ~                                        ld      hl,prefix1?_XX15Y2hi    ; .
 370+ 0000 ~                                        or      (hl)                    ; .
 371+ 0000 ~                                        jp      nz,prefix1?_LL107_6502  ; BNE LL107              \ to LL107 to skip the following, leaving X at 191
 372+ 0000 ~            .CheckY2Lo:                 ld      a,127 ;,c               ; get back the temporary x reg from c
 373+ 0000 ~                                        ld      hl,prefix1?_XX15Y2lo    ; CPX XX12               \ If y2_lo > the y-coordinate of the bottom of screen (a is being used as X at this point still)
 374+ 0000 ~                                        cp      (hl)                    ; .
 375+ 0000 ~                                        jp      c,prefix1?_LL107_6502   ; BCC LL107              \ then (x2, y2) is off the bottom of the screen, so skip the following instruction, leaving X at 127
 376+ 0000 ~                                        ZeroA                           ; LDX #0                 \ Set X = 0
 377+ 0000 ~                                        ld      (Xreg),a
 378+ 0000 ~            prefix1?_LL107_6502:        ld      a,(Xreg)                ; STX XX13               \ Set XX13 = X, so we have * XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen* XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lois off the bottom of the screen
 379+ 0000 ~                                        ld      ( prefix1?_XX13),a      ; now c is released as a temporary x reg
 380+ 0000 ~                                        ld      a,(prefix1?_XX15X1hi)   ; LDA XX15+1             \ If one or both of x1_hi and y1_hi are non-zero, jump
 381+ 0000 ~                                        ld      hl,prefix1?_XX15Y1hi    ; ORA XX15+3             \ to LL83
 382+ 0000 ~                                        or      (hl)                    ; .
 383+ 0000 ~                                        jp      nz,prefix1?_LL83_6502            ; BNE LL83
 384+ 0000 ~            ; DEBUG SIMPLIFIED CODE, now we just compare y1 lo > 127
 385+ 0000 ~                                        ld      a,(XX1532)              ; If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.) ;ld      a,127                   ; LDA #Y*2-1             \ If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.)
 386+ 0000 ~                                        ld      h,127                   ; then (x1, y1) is off the bottom of the screen, so jump                                 ;ld      hl,XX1532               ; CMP XX15+2             \ then (x1, y1) is off the bottom of the screen, so jump
 387+ 0000 ~                                        cp      h                       ; to LL83                                                                                ;cp      (hl)                    ; .                      \ to LL83
 388+ 0000 ~                                        jp      nc, prefix1?_LL83_6502         ; BCC LL83               \ . (y1 > 127 jump, i.e. 127 <= y1 )
 389+ 0000 ~                                        ld      a,( prefix1?_XX13)                ; LDA XX13               \ If we get here, (x1, y1) is on-screen. If XX13 is non-zero, i.e. (x2, y2) is off-screen, jump
 390+ 0000 ~                                        and     a                       ; BNE LL108              \ to LL108 to halve it before continuing at LL83
 391+ 0000 ~                                        jp      nz,prefix1?_LL108_6502
 392+ 0000 ~            ; If we get here, the high bytes are all zero, which means the x-coordinates are < 256 and therefore fit on screen, and neither coordinate is off the bottom of the screen. That means both coordinates are already on
 393+ 0000 ~            ; screen, so we don't need to do any clipping, all weneed to do is move the low bytes into (X1, Y1) and X2, Y2) and return
 394+ 0000 ~            ; X1 = XX15 (10)  Y1 = XX15+1 X2 = XX15+2 Y2 = XX15+3
 395+ 0000 ~            prefix1?_LL146_6502:        ld      hl,(prefix1?_XX15X1lo)           ;  Save X1 to XX1510
 396+ 0000 ~                                        call    prefix1?_ClampX
 397+ 0000 ~                                        ld      (prefix1?_XX15X1lo),a
 398+ 0000 ~                                        ld      hl,(prefix1?_XX15Y1lo)           ;  hl = y1
 399+ 0000 ~                                        call    prefix1?_ClampY
 400+ 0000 ~                                        ld      (prefix1?_XX1510+1),a            ;  XX1510... = [X1][Y1]
 401+ 0000 ~
 402+ 0000 ~                                        ld      hl,(prefix1?_XX15X2lo)           ;  de = x2
 403+ 0000 ~                                        call    prefix1?_ClampX
 404+ 0000 ~                                        ld      (prefix1?_XX1510+2),a            ;  XX1510... = [X1][Y1][X2]
 405+ 0000 ~
 406+ 0000 ~                                        ld      hl,(prefix1?_XX15Y2lo)           ;  bc = y2
 407+ 0000 ~                                        call    prefix1?_ClampY
 408+ 0000 ~                                        ld      (prefix1?_XX1510+3),a            ;  XX1510... = [X1][Y1][X2][Y2]
 409+ 0000 ~                                        ClearCarryFlag                  ; CLC                    \ Clear the C flag as the clipped line fits on-screen
 410+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
 411+ 0000 ~            prefix1?_LL109_6502:        SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 412+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
 413+ 0000 ~            prefix1?_LL108_6502:        ld      hl, prefix1?_XX13                 ; LSR XX13               \ If we get here then (x2, y2) is off-screen and XX13 is
 414+ 0000 ~                                        srl     (hl)                    ;                        \ 191, (128)  so shift XX13 right to halve it to 95 (64)
 415+ 0000 ~            ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 416+ 0000 ~            ;-- LL145 (Part 2 of 4)
 417+ 0000 ~            prefix1?_LL83_6502:         ld      a,( prefix1?_XX13)               ; LDA XX13               \ If XX13 < 128 then only one of the points is on-screen
 418+ 0000 ~                                        and     a                                ; BPL LL115              \ so jump down to LL115 to skip the checks of whether
 419+ 0000 ~                                        jp      p,prefix1?_LL115_6502            ;                        \ both points are in the strips to the right or bottom of the screen
 420+ 0000 ~            ;-- If we get here, both points are off-screen
 421+ 0000 ~                                        ld      a,(prefix1?_XX15X1hi)            ; LDA XX15+1             \ If both x1_hi and x2_hi have bit 7 set, jump to LL109
 422+ 0000 ~                                        ld      hl,prefix1?_XX15X2hi             ; AND XX15+5             \ to return from the subroutine with the C flag set, as
 423+ 0000 ~                                        and     (hl)
 424+ 0000 ~                                        jp      m, prefix1?_LL109_6502           ; BMI LL109              \ the entire line is above the top of the screen
 425+ 0000 ~                                        ld      a,(prefix1?_XX15Y1hi)            ; LDA XX15+3             \ If both y1_hi and y2_hi have bit 7 set, jump to LL109
 426+ 0000 ~                                        ld      hl,prefix1?_XX15Y2hi             ; AND XX12+1             \ to return from the subroutine with the C flag set, as
 427+ 0000 ~                                        and     (hl)                             ; BMI LL109              \ the entire line is to the left of the screen
 428+ 0000 ~                                        jp      m,prefix1?_LL109_6502            ; .
 429+ 0000 ~                                        ld      a,(prefix1?_XX15X1hi)            ; LDX XX15+1             \ Set A = X = x1_hi - 1
 430+ 0000 ~                                        dec     a                                ; DEX
 431+ 0000 ~                                        ld      (Xreg),a                         ; TXA
 432+ 0000 ~                                        push    af                               ; LDX XX15+5     SP+1    \ Set XX12+2 = x2_hi - 1, we need to save a register first
 433+ 0000 ~                                        ld      a,(prefix1?_XX15X2hi)            ; .
 434+ 0000 ~                                        dec     a                                ; DEX
 435+ 0000 ~                                        ld      (Xreg),a                         ; STX XX12+2
 436+ 0000 ~                                        pop     af                               ; .              SP+0    restore a register
 437+ 0000 ~                                        ld      hl,prefix1?_XX15Y2hi             ; ORA XX12+2             \ If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set,
 438+ 0000 ~                                        or      (hl)                             ; .
 439+ 0000 ~                                        jp      p, prefix1?_LL109_6502           ; BPL LL109              \ jump to LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 440+ 0000 ~            ; for this bit, while z80 uses carry the opposite way to 6502, 6502 uses borrow, in effect inverting the flip
 441+ 0000 ~            ;NOTEFOUND A PATH WHERE IT DOES NOT DO THIS CHECK e.g. 90 B2 8D A2
 442+ 0000 ~            prefix1?_LL83_DEBUG:          ld      a,(prefix1?_XX1532)              ; LDA XX15+2             \ If y1_lo < y-coordinate of screen bottom, clear the C
 443+ 0000 ~                                        cp      128                     ; CMP #Y*2               \ flag, otherwise set it (NOTE FLIPPED IN z80)
 444+ 0000 ~                                        ld      a,(prefix1?_XX1532+1)            ; LDA XX15+3             \ Set XX12+2 = y1_hi - (1 - C), so:
 445+ 0000 ~                                        sbc     0                       ; SBC #0                 \ .
 446+ 0000 ~                                        ld      (prefix1?_XX12p2),a              ; STA XX12+2             \  * Set XX12+2 = y1_hi - 1 if y1_lo is on-screen * Set XX12+2 = y1_hi  otherwise We do this subtraction because we are only interested
 447+ 0000 ~                                        ld      a,(prefix1?_XX1576)              ; LDA XX12               \ If y2_lo < y-coordinate of screen bottom, clear the C
 448+ 0000 ~                                        cp      128                     ; CMP #Y*2               \ flag, otherwise set it
 449+ 0000 ~                                        ld      a,(prefix1?_XX1576+1)            ; LDA XX12+1             \ Set XX12+2 = y2_hi - (1 - C), so:
 450+ 0000 ~                                        sbc     0                       ; SBC #0                   * Set XX12+1 = y2_hi - 1 if y2_lo is on-screen  * Set XX12+1 = y2_hi     otherwise
 451+ 0000 ~                                        ld      hl,prefix1?_XX12p2               ; ORA XX12+2             \ If neither XX12+1 or XX12+2 have bit 7 set, jump to
 452+ 0000 ~                                        or      (hl)                    ; .
 453+ 0000 ~                                        jp      p,prefix1?_LL109_6502            ; BPL LL109              \ LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 454+ 0000 ~            ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 455+ 0000 ~            ;-- LL145 (Part 3 of 4) Summary: Clip line: Calculate the line's gradient
 456+ 0000 ~            prefix1?_LL115_6502:        ld      a,(Yreg)                ; TYA                    \ Store Y on the stack so we can preserve it through the call to this routine
 457+ 0000 ~                                        push    af                      ; PHA            SP+1    \ call to this subroutine
 458+ 0000 ~                                        ld      hl,(prefix1?_XX15X2lo)             ; LDA XX15+4             \ Set XX12+2 = x2_lo - x1_lo
 459+ 0000 ~                                        ld      de,(prefix1?_XX15X1lo)             ; LDA XX15+5             \ Set XX12+3 = x2_hi - x1_hi
 460+ 0000 ~                                        ClearCarryFlag                  ; SBC XX15+1
 461+ 0000 ~                                        sbc     hl,de                   ; .
 462+ 0000 ~                                        ld      (delta_x),hl            ; .
 463+ 0000 ~                                        ld      hl,(prefix1?_XX15Y2lo)             ; LDA XX12               \ Set XX12+4 = y2_lo - y1_lo
 464+ 0000 ~                                        ld      de,(prefix1?_XX15Y1lo)             ;
 465+ 0000 ~                                        ClearCarryFlag                  ; SBC XX15+2
 466+ 0000 ~                                        sbc     hl,de                   ; .
 467+ 0000 ~                                        ld      (delta_y),hl            ; .
 468+ 0000 ~            ; So we now have:  delta_x in XX12(3 2)  delta_y in XX12(5 4) where the delta is (x1, y1) - (x2, y2))
 469+ 0000 ~                                        ld      a,(delta_y+1)           ; EOR XX12+3             \ Set S = the sign of delta_x * the sign of delta_y, so
 470+ 0000 ~                                        ld      hl,delta_x+1
 471+ 0000 ~                                        xor     (hl)
 472+ 0000 ~                                        ld      (Svar),a                ; STA S                  \ if bit 7 of S is set, the deltas have different signs (perhaps we should do bit 7 mask ?????????
 473+ 0000 ~                                        ld      hl,(delta_y)            ; LDA XX12+5             \ If delta_y_hi is positive, jump down to LL110 to skip
 474+ 0000 ~                                        ld      a,h
 475+ 0000 ~                                        and     a
 476+ 0000 ~                                        jp      p, prefix1?_LL110_6502  ; BPL LL110              \ the following
 477+ 0000 ~                                        NegHL                           ; LDA #0                 \ Otherwise flip the sign of delta_y to make it
 478+ 0000 ~                                        ld      (delta_y),hl            ; positive, starting with the low bytes
 479+ 0000 ~            prefix1?_LL110_6502:        ld      hl,(delta_x)            ; LDA XX12+3             \ If delta_x_hi is positive, jump down to LL111 to skip
 480+ 0000 ~                                        ld      a,h                     ; BPL LL111              \ the following
 481+ 0000 ~                                        and     a                       ; .
 482+ 0000 ~                                        jp      p,prefix1?_LL111_6502            ; .
 483+ 0000 ~                                        NegHL                           ; SEC                    \ Otherwise flip the sign of delta_x to make it
 484+ 0000 ~                                        ld      (delta_x),hl            ; LDA #0                 \ positive, starting with the low bytes
 485+ 0000 ~            ;--  We now keep halving |delta_x| and |delta_y| until both of them have zero in their high bytes
 486+ 0000 ~            prefix1?_LL111_6502:        ld      hl,(delta_x)
 487+ 0000 ~                                        ld      de,(delta_y)
 488+ 0000 ~                                        ld      a,h                     ; TAX                    \ If |delta_x_hi| is non-zero, skip the following
 489+ 0000 ~                                        or      d                       ; BNE LL112
 490+ 0000 ~                                        jp      z,prefix1?_LL113_6502            ; LDX XX12+5             \ If |delta_y_hi| = 0, jump down to LL113 (as both |delta_x_hi| and |delta_y_hi| are 0)
 491+ 0000 ~            prefix1?_LL112_6502:        ShiftHLRight1                   ; LSR A                  \ Halve the value of delta_x in (A XX12+2)
 492+ 0000 ~                                        ShiftDERight1                   ; LSR XX12+5             \ Halve the value of delta_y XX12(5 4)
 493+ 0000 ~                                        ld      (delta_x),hl
 494+ 0000 ~                                        ld      (delta_y),de            ; write them back so we don't end up in an infinite loop
 495+ 0000 ~                                        jp       prefix1?_LL111_6502                  ; JMP LL111              \ Loop back to LL111
 496+ 0000 ~            ;-- By now, the high bytes of both |delta_x| and |delta_y| are zero
 497+ 0000 ~            prefix1?_LL113_6502:        ZeroA                           ; STX T                  \ We know that X = 0 as that's what we tested with a BEQ  above, so this sets T = 0
 498+ 0000 ~                                        ld      (Tvar),a
 499+ 0000 ~                                        ld      a,(delta_x)             ; LDA XX12+2             \ If delta_x_lo < delta_y_lo, so our line is more
 500+ 0000 ~                                        ld      hl,delta_y              ; CMP XX12+4             \ vertical than horizontal, jump to LL114
 501+ 0000 ~                                        cp      (hl)
 502+ 0000 ~                                        jp      c, prefix1?_LL114_6502  ; BCC LL114              ; if delta y > delta x then its a steep slope so we do 256*dy/dx
 503+ 0000 ~            ;-- If we get here then our line is more horizontal than vertical, so it is a shallow slope
 504+ 0000 ~                                        ld      a,(delta_x)             ; STA Q                  \ Set Q = delta_x_lo
 505+ 0000 ~                                        ld      (Qvar),a                ; .
 506+ 0000 ~                                        ld      a,(delta_y)             ; LDA XX12+4             \ Set A = delta_y_lo
 507+ 0000 ~                                        call    prefix1?_LL28_6502      ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_y_lo / delta_x_lo
 508+ 0000 ~                                        jp      prefix1?_LL116_6502     ; JMP LL116              \ Jump to LL116, as we now have the line's gradient in R
 509+ 0000 ~            ;-- If we get here then our line is more vertical than horizontal, so it is a steep slope
 510+ 0000 ~            prefix1?_LL114_6502:        ld      a,(delta_y)             ; LDA XX12+4             \ Set Q = delta_y_lo
 511+ 0000 ~                                        ld      (Qvar),a                ; STA Q
 512+ 0000 ~                                        ld      a,(delta_x)             ; LDA XX12+2             \ Set A = delta_x_lo
 513+ 0000 ~                                        call    prefix1?_LL28_6502               ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_x_lo / delta_y_lo
 514+ 0000 ~                                        ld      a,$FF                   ; DEC T                  \ T was set to 0 above, so this sets T = &FF when our
 515+ 0000 ~                                        ld      (Tvar),a                ;                        \ line is steep
 516+ 0000 ~            ;----------------------------------------------------------------------------------------------------------------
 517+ 0000 ~            ;--- LL116 This part sets things up to call the routine in LL188, which does the actual clipping.
 518+ 0000 ~            ;--  If we get here, then R has been set to the gradient of the line (x1, y1) to(x2, y2), with T indicating the gradient of slope: * 0   = shallow slope (more horizontal than vertical)
 519+ 0000 ~            ;--                                                                                                                                * &FF = steep slope (more vertical than horizontal)
 520+ 0000 ~            ;-- XX13 has been set as follows: * 0   = (x1, y1) off-screen, (x2, y2) on-screen * 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen * 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 521+ 0000 ~            prefix1?_LL116_6502:        ld      a,(Rvar)                ; LDA R                  \ Store the gradient in XX12+2
 522+ 0000 ~                                        ld      (prefix1?_XX12p2),a     ; STA XX12+2
 523+ 0000 ~                                        ld      a,(Svar)                ; LDA S                  \ Store the type of slope in XX12+3, bit 7 clear means
 524+ 0000 ~                                        ld      (prefix1?_XX12p3),a              ; STA XX12+3             \ top left to bottom right, bit 7 set means top right to bottom left
 525+ 0000 ~                                        ld      a,( prefix1?_XX13)                ; LDA XX13               \ If XX13 = 0, skip the following instruction
 526+ 0000 ~                                        cp      0                       ; BEQ LL138
 527+ 0000 ~                                        jp      z,prefix1?_LL138_6502            ; .
 528+ 0000 ~                                        jp      p, prefix1?_LLX117_6502          ; If XX13 is positive, it must be 95 (64) as 128 would be negative). This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump
 529+ 0000 ~            ;-- If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 530+ 0000 ~            prefix1?_LL138_6502:          call    prefix1?_LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 531+ 0000 ~                                        ld      a,( prefix1?_XX13)                ; LDA XX13               \ If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to
 532+ 0000 ~                                        and     a
 533+ 0000 ~                                        jp      p,prefix1?_LL124_6502            ; BPL LL124              \ LL124 to return with a successfully clipped line
 534+ 0000 ~            ;-- If we get here, XX13 = 191 (128) (both coordinates areoff-screen)
 535+ 0000 ~            prefix1?_LL117_6502:          ld      a,(prefix1?_XX1510+1)            ; LDA XX15+1             \ If either of x1_hi or y1_hi are non-zero, jump to
 536+ 0000 ~                                        ld      hl,prefix1?_XX1532+1             ; ORA XX15+3             \ LL137 to return from the subroutine with the C flag
 537+ 0000 ~                                        or      (hl)
 538+ 0000 ~                                        jp      nz, prefix1?_LL137_6502          ; BNE LL137              \ set, as the line doesn't fit on-screen
 539+ 0000 ~                                        ld      a,(prefix1?_XX1532)              ; LDA XX15+2             \ If y1_lo > y-coordinate of the bottom of the screen
 540+ 0000 ~                                        cp      128                     ; CMP #Y*2               \ jump to LL137 to return from the subroutine with the
 541+ 0000 ~                                        jp      nc, prefix1?_LL137_6502          ; BCS LL137              \ C flag set, as the line doesn't fit on-screen
 542+ 0000 ~            ;-- If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 543+ 0000 ~            prefix1?_LLX117_6502:         ld      hl,( prefix1?_XX1510)             ; LDX XX15               \ Swap x1_lo = x2_lo
 544+ 0000 ~                                        ld      de,( prefix1?_XX1554)
 545+ 0000 ~                                        ld      ( prefix1?_XX1510),de
 546+ 0000 ~                                        ld      ( prefix1?_XX1554),hl
 547+ 0000 ~                                        ld      hl,( prefix1?_XX1532)             ; LDX XX15+2             \ Swap y1_lo = y2_lo
 548+ 0000 ~                                        ld      de,( prefix1?_XX1576)
 549+ 0000 ~                                        ld      ( prefix1?_XX1532),de
 550+ 0000 ~                                        ld      ( prefix1?_XX1576),hl
 551+ 0000 ~                                        call    prefix1?_LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 552+ 0000 ~                                        ld      hl,SWAP
 553+ 0000 ~                                        dec     (hl)                    ; DEC SWAP               \ Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 554+ 0000 ~            prefix1?_LL124_6502:          pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 555+ 0000 ~                                        ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 556+ 0000 ~                                        call    prefix1?_LL146_6502              ; JMP LL146              \ Jump up to LL146 to move the low bytes of (x1, y1) and (x2, y2) into (X1, Y1) and (X2, Y2), and return from the subroutine with a successfully clipped line
 557+ 0000 ~                                        ret                             ; then exit so we don't pop it twice
 558+ 0000 ~            prefix1?_LL137_6502:          pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 559+ 0000 ~                                        ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 560+ 0000 ~                                        SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 561+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
 562+ 0000 ~
 563+ 0000 ~
 564+ 0000 ~            prefix1?_l2_draw_6502_line:   ld      hl,x1                           ; copy from currnet position to 6502 variables
 565+ 0000 ~                                        ld      de, prefix1?_XX1510
 566+ 0000 ~                                        ld      bc,4*2
 567+ 0000 ~                                        ldir
 568+ 0000 ~                                        call    prefix1?_LL145_6502                      ; perform 6502 version
 569+ 0000 ~                                        ret     c                               ; returns if carry is set as its a no draw
 570+ 0000 ~            .CopyBackResults:           ld      hl,0
 571+ 0000 ~                                        ld      (x1),hl
 572+ 0000 ~                                        ld      (y1),hl
 573+ 0000 ~                                        ld      (x2),hl
 574+ 0000 ~                                        ld      (y2),hl
 575+ 0000 ~                                        ld      a,( prefix1?_XX1510)
 576+ 0000 ~                                        ld      (x1),a
 577+ 0000 ~                                        ld      c,a
 578+ 0000 ~                                        ld      a,( prefix1?_XX1510+1)
 579+ 0000 ~                                        ld      (y1),a
 580+ 0000 ~                                        ld      b,a
 581+ 0000 ~                                        ld      a,( prefix1?_XX1510+2)
 582+ 0000 ~                                        ld      (x2),a
 583+ 0000 ~                                        ld      e,a
 584+ 0000 ~                                        ld      a,( prefix1?_XX1510+3)
 585+ 0000 ~                                        ld      (y2),a
 586+ 0000 ~                                        ld      d,a
 587+ 0000 ~                                        ld      a,$FF
 588+ 0000 ~                                        ClearCarryFlag
 589+ 0000 ~                                        ret
 590+ 0000                      ENDM
# file closed: ./Universe/UniverseMacros/asm_linedraw.asm
 110  0000                                      INCLUDE "./Universe/UniverseMacros/UniverseVarsDefineMacro.asm"
# file opened: ./Universe/UniverseMacros/UniverseVarsDefineMacro.asm
   1+ 0000              ; -- AI Core data
   2+ 0000              UnivCoreAIVarsMacro:        MACRO  prefix1?
   3+ 0000 ~            prefix1?_BnKRotXCounter             DB  0                       ; INWK +29
   4+ 0000 ~            prefix1?_BnKRotZCounter             DB  0                       ; INWK +30
   5+ 0000 ~            prefix1?_BnkCam0yLo                 DB  0                       ; INWK +33 ????
   6+ 0000 ~            prefix1?_BnkCam0yHi                 DB  0                       ; INWK +34?????
   7+ 0000 ~            prefix1?_BnKShipType                DB  0
   8+ 0000 ~
   9+ 0000 ~            ; Used to make 16 bit reads a little cleaner in source code
  10+ 0000 ~            prefix1?_BnKzPoint                  DS  3
  11+ 0000 ~            prefix1?_BnKzPointLo                equ prefix1?_BnKzPoint
  12+ 0000 ~            prefix1?_BnKzPointHi                equ prefix1?_BnKzPoint+1
  13+ 0000 ~            prefix1?_BnKzPointSign              equ prefix1?_BnKzPoint+2
  14+ 0000 ~
  15+ 0000 ~            ; Used for medridan drawing routines
  16+ 0000 ~            prefix1?_BnKCx                      DW  0
  17+ 0000 ~            prefix1?_BnKCxSign                  EQU prefix1?_BnKCx+1
  18+ 0000 ~            prefix1?_BnKCy                      DW  0
  19+ 0000 ~            prefix1?_BnKCySign                  EQU prefix1?_BnKCy+1
  20+ 0000 ~            prefix1?_BnKUx                      DW  0
  21+ 0000 ~            prefix1?_BnKUxSign                  EQU prefix1?_BnKUx+1
  22+ 0000 ~            prefix1?_BnKUy                      DW  0
  23+ 0000 ~            prefix1?_BnKUySign                  EQU prefix1?_BnKUy+1
  24+ 0000 ~            prefix1?_BnKVx                      DW  0
  25+ 0000 ~            prefix1?_BnKVxSign                  EQU prefix1?_BnKVx+1
  26+ 0000 ~            prefix1?_BnKVy                      DW  0
  27+ 0000 ~            prefix1?_BnKVySign                  EQU prefix1?_BnKVy+1
  28+ 0000 ~            prefix1?_BnKSinCNT2                 DB  0
  29+ 0000 ~            prefix1?_BnKSinCNT2Sign             DB  0
  30+ 0000 ~            prefix1?_BnKCosCNT2                 DB  0
  31+ 0000 ~            prefix1?_BnKCosCNT2Sign             DB  0
  32+ 0000 ~            prefix1?_BnKUxCos                   DB  0
  33+ 0000 ~            prefix1?_BnKUxCosSign               DB  0
  34+ 0000 ~            prefix1?_BnKUyCos                   DB  0
  35+ 0000 ~            prefix1?_BnKUyCosSign               DB  0
  36+ 0000 ~            prefix1?_BnKVxSin                   DB  0
  37+ 0000 ~            prefix1?_BnKVxSinSign               DB  0
  38+ 0000 ~            prefix1?_BnKVySin                   DB  0
  39+ 0000 ~            prefix1?_BnKVySinSign               DB  0
  40+ 0000 ~            prefix1?_BnKVxVySinSign             DB  0
  41+ 0000 ~            prefix1?_BnKUxUyCosSign             DB  0
  42+ 0000 ~            prefix1?_BnKUxCosAddVxSin           DW  0
  43+ 0000 ~            prefix1?_BnKUyCosSubVySin           DW  0
  44+ 0000 ~            prefix1?_BnKAngle                   DB  0
  45+ 0000 ~            s
  46+ 0000 ~
  47+ 0000 ~            ; General local variables used in universe object
  48+ 0000 ~            prefix1?_BnKTGT                     DB  0
  49+ 0000 ~            prefix1?_BnKSTP                     DB  0
  50+ 0000 ~            prefix1?_BnKLSP                     DS  50              ; move to planet or L2 code ?
  51+ 0000 ~            prefix1?_BnKCNT                     DB  0               ; 93
  52+ 0000 ~            prefix1?_BnKCNT2                    DB  0               ; 93
  53+ 0000 ~            ; Replaced LSX2 and LSY2 with plot heaps of 64 x 2 bytes each + 1 pair for initial point
  54+ 0000 ~                IFDEF MERIDANLINEDEBUG
  55+ 0000 ~            prefix1?_BnKPlotXHeap               DS  $82			   ; &0EC0	    \ LSX2 bline buffer size?
  56+ 0000 ~            prefix1?_BnKPlotYHeap               DS  $82            ; &0F0E	    \ LSY2
  57+ 0000 ~                ENDIF
  58+ 0000 ~            prefix1?_BnKPlotIndex               DB  0
  59+ 0000 ~                DISPLAY "TODO can we remove this and just use BnkCNT = 0 as the same thing?"
  60+ 0000 ~            prefix1?_BnKFlag					DB  0
  61+ 0000 ~
  62+ 0000 ~            ; Post clipping the results are now 8 bit
  63+ 0000 ~            prefix1?_BnKVisibility              DB  0               ; replaces general purpose xx4 in renderingW
  64+ 0000 ~            prefix1?_BnKProjectedY              DB  0
  65+ 0000 ~            prefix1?_BnKProjectedX              DB  0
  66+ 0000 ~            prefix1?_BnKProjected               equ prefix1?_BnKProjectedY  ; resultant projected position
  67+ 0000 ~            prefix1?_XX15Save                   DS  8
  68+ 0000 ~            prefix1?_XX15Save2                  DS  8
  69+ 0000 ~            prefix1?_Radius                     DB  0
  70+ 0000 ~            ; Used when drawing curves for the end value from previous calls to BLINE
  71+ 0000 ~            ; held as 16 bit values pre clipping
  72+ 0000 ~            prefix1?_PrevXPos                   DW 0
  73+ 0000 ~            prefix1?_PrevYPos                   DW 0
  74+ 0000 ~            prefix1?_NewXPos                    DW 0
  75+ 0000 ~            prefix1?_NewYPos                    DW 0
  76+ 0000 ~
  77+ 0000 ~            ; Colouration
  78+ 0000 ~            ; For planets, Colour 1 is main colour, Colour 2 is outer rim
  79+ 0000 ~            ; if we are going to do outer rim then may have colour thickeness as number of pixels to simulat atmosphere
  80+ 0000 ~            prefix1?_Colour1                    DB 0
  81+ 0000 ~            prefix1?_Colour2                    DB 0
  82+ 0000 ~            prefix1?_Colour2Thickness           DB 0
  83+ 0000 ~
  84+ 0000 ~            ;        -- _pl(prf .. "Radius                     DW  0
  85+ 0000 ~            ;        -- _pl(prf .. "RadiusHigh                 equ prefix1?_Radius+1
  86+ 0000                                           ENDM
  87+ 0000
  88+ 0000              UnivPosVarsMacro:            MACRO  prefix1?
  89+ 0000 ~            prefix1?_BnKxlo                     DB  0                       ; INWK+0
  90+ 0000 ~            prefix1?_BnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
  91+ 0000 ~            prefix1?_BnKxsgn                    DB  0                       ; INWK+2
  92+ 0000 ~            prefix1?_BnKylo                     DB  0                       ; INWK+3 \ ylo
  93+ 0000 ~            prefix1?_BnKyhi                     DB  0                       ; INWK+4 \ yHi
  94+ 0000 ~            prefix1?_BnKysgn                    DB  0                       ; INWK +5
  95+ 0000 ~            prefix1?_BnKzlo                     DB  0                       ; INWK +6
  96+ 0000 ~            prefix1?_BnKzhi                     DB  0                       ; INWK +7
  97+ 0000 ~            prefix1?_BnKzsgn                    DB  0                       ; INWK +8
  98+ 0000 ~            prefix1?_CompassX                   DW  0
  99+ 0000 ~            prefix1?_CompassY                   DW  0
 100+ 0000 ~            prefix1?_BnKElipseCenterX           DW  0
 101+ 0000 ~            prefix1?_BnKElipseCenterY           DW  0
 102+ 0000 ~            prefix1?_BnKElipseRadiusU           DW  0
 103+ 0000 ~            prefix1?_BnKElipseRadiusV           DW  0
 104+ 0000                                          ENDM
 105+ 0000
 106+ 0000              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
 107+ 0000              ;-Rotation Matrix of Universe Object-----------------------------------------------------------------------------------------------
 108+ 0000              UnivRotationVarsMacro:      MACRO prefix1?
 109+ 0000 ~            prefix1?_BnKrotmatSidevX            DW  0                       ; INWK +21
 110+ 0000 ~            prefix1?_BnKrotmatSidev             equ prefix1?_BnKrotmatSidevX
 111+ 0000 ~            prefix1?_BnKrotmatSidevY            DW  0                       ; INWK +23
 112+ 0000 ~            prefix1?_BnKrotmatSidevZ            DW  0                       ; INWK +25
 113+ 0000 ~            prefix1?_BnKrotmatRoofvX            DW  0                       ; INWK +15
 114+ 0000 ~            prefix1?_BnKrotmatRoofv             equ prefix1?_BnKrotmatRoofvX
 115+ 0000 ~            prefix1?_BnKrotmatRoofvY            DW  0                       ; INWK +17
 116+ 0000 ~            prefix1?_BnKrotmatRoofvZ            DW  0                       ; INWK +19
 117+ 0000 ~            prefix1?_BnKrotmatNosevX            DW  0                       ; INWK +9
 118+ 0000 ~            prefix1?_BnKrotmatNosev             EQU prefix1?_BnKrotmatNosevX
 119+ 0000 ~            prefix1?_BnKrotmatNosevY            DW  0                       ; INWK +11
 120+ 0000 ~            prefix1?_BnKrotmatNosevZ            DW  0                       ; INWK +13
 121+ 0000                                          ENDM
 122+ 0000
 123+ 0000
 124+ 0000              XX15DefineMacro: MACRO   prefix1?
 125+ 0000 ~
 126+ 0000 ~            prefix1?_BnKXScaled                  DB  0               ; XX15+0Xscaled
 127+ 0000 ~            prefix1?_BnKXScaledSign              DB  0               ; XX15+1xsign
 128+ 0000 ~            prefix1?_BnKYScaled                  DB  0               ; XX15+2yscaled
 129+ 0000 ~            prefix1?_BnKYScaledSign              DB  0               ; XX15+3ysign
 130+ 0000 ~            prefix1?_BnKZScaled                  DB  0               ; XX15+4zscaled
 131+ 0000 ~            prefix1?_BnKZScaledSign              DB  0               ; XX15+5zsign
 132+ 0000 ~            prefix1?_XX1576                      DW  0    ; y2
 133+ 0000 ~
 134+ 0000 ~            prefix1?_XX15:                       equ prefix1?_BnKXScaled
 135+ 0000 ~            prefix1?_XX15VecX:                   equ prefix1?_XX15
 136+ 0000 ~            prefix1?_XX15VecY:                   equ prefix1?_XX15+1
 137+ 0000 ~            prefix1?_XX15VecZ:                   equ prefix1?_XX15+2
 138+ 0000 ~            prefix1?_BnKXPoint:                  equ prefix1?_XX15
 139+ 0000 ~            prefix1?_BnKXPointLo:                equ prefix1?_XX15+0
 140+ 0000 ~            prefix1?_BnKXPointHi:                equ prefix1?_XX15+1
 141+ 0000 ~            prefix1?_BnKXPointSign:              equ prefix1?_XX15+2
 142+ 0000 ~            prefix1?_BnKYPoint:                  equ prefix1?_XX15+3
 143+ 0000 ~            prefix1?_BnKYPointLo:                equ prefix1?_XX15+3
 144+ 0000 ~            prefix1?_BnKYPointHi:                equ prefix1?_XX15+4
 145+ 0000 ~            prefix1?_BnKYPointSign:              equ prefix1?_XX15+5
 146+ 0000 ~
 147+ 0000 ~            prefix1?_XX1510                      EQU prefix1?_BnKXScaled    ; x1 as a 16-bit coordinate (x1_hi x1_lo)
 148+ 0000 ~            prefix1?_XX1532                      EQU prefix1?_BnKYScaled   ; y1 as a 16-bit coordinate (y1_hi y1_lo)
 149+ 0000 ~            prefix1?_XX1554                      EQU prefix1?_BnKZScaled   ; x2
 150+ 0000 ~            prefix1?_XX1554p1                    EQU prefix1?_XX1554+1
 151+ 0000 ~            prefix1?_XX15X1lo                    EQU prefix1?_XX1510
 152+ 0000 ~            prefix1?_XX15X1hi                    EQU prefix1?_XX1510+1
 153+ 0000 ~            prefix1?_XX15Y1lo                    EQU prefix1?_XX1532
 154+ 0000 ~            prefix1?_XX15Y1hi                    EQU prefix1?_XX1532+1
 155+ 0000 ~            prefix1?_XX15X2lo                    EQU prefix1?_XX1554
 156+ 0000 ~            prefix1?_XX15X2hi                    EQU prefix1?_XX1554+1
 157+ 0000 ~            prefix1?_XX15Y2lo                    EQU prefix1?_XX1210
 158+ 0000 ~            prefix1?_XX15Y2hi                    EQU prefix1?_XX1210+1
 159+ 0000 ~            prefix1?_XX15PlotX1                  EQU prefix1?_XX15
 160+ 0000 ~            prefix1?_XX15PlotY1                  EQU prefix1?_XX15+1
 161+ 0000 ~            prefix1?_XX15PlotX2                  EQU prefix1?_XX15+2
 162+ 0000 ~            prefix1?_XX15PlotY2                  EQU prefix1?_XX15+3
 163+ 0000                          ENDM
 164+ 0000
 165+ 0000              XX12DefineMacro: MACRO   prefix1?
 166+ 0000 ~            ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
 167+ 0000 ~            ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
 168+ 0000 ~
 169+ 0000 ~            prefix1?_XX1210                     EQU prefix1?_XX1576
 170+ 0000 ~            prefix1?_XX12p1                     EQU prefix1?_XX1210+1
 171+ 0000 ~            prefix1?_XX12                       EQU prefix1?_XX1210
 172+ 0000 ~
 173+ 0000 ~
 174+ 0000 ~            prefix1?_BnKXX12xLo                 EQU prefix1?_XX12               ; XX12+0
 175+ 0000 ~            prefix1?_BnKXX12xSign               EQU prefix1?_XX12+1   ; XX12+1
 176+ 0000 ~            prefix1?_BnKXX12yLo                 EQU prefix1?_XX12+2   ; XX12+2
 177+ 0000 ~            prefix1?_BnKXX12ySign               EQU prefix1?_XX12+3   ; XX12+3
 178+ 0000 ~            prefix1?_BnKXX12zLo                 EQU prefix1?_XX12+4   ; XX12+4
 179+ 0000 ~            prefix1?_BnKXX12zSign               EQU prefix1?_XX12+5   ; XX12+5
 180+ 0000 ~            prefix1?_XX12Save                   DS  6
 181+ 0000 ~            prefix1?_XX12Save2                  DS  6
 182+ 0000 ~
 183+ 0000 ~            prefix1?_varXX12                    EQU prefix1?_XX12
 184+ 0000 ~            ; Repurposed XX12 when plotting lines
 185+ 0000 ~            prefix1?_BnkY2                      equ prefix1?_XX12+0
 186+ 0000 ~            prefix1?_BnKy2Lo                    equ prefix1?_XX12+0
 187+ 0000 ~            prefix1?_BnkY2Hi                    equ prefix1?_XX12+1
 188+ 0000 ~            prefix1?_BnkDeltaXLo                equ prefix1?_XX12+2
 189+ 0000 ~            prefix1?_BnkDeltaXHi                equ prefix1?_XX12+3
 190+ 0000 ~            prefix1?_BnkDeltaYLo                equ prefix1?_XX12+4
 191+ 0000 ~            prefix1?_BnkDeltaYHi                equ prefix1?_XX12+5
 192+ 0000 ~            prefix1?_BnkGradient                equ prefix1?_XX12+2
 193+ 0000 ~            prefix1?_BnkTemp1                   equ prefix1?_XX12+2
 194+ 0000 ~            prefix1?_BnkTemp1Lo                 equ prefix1?_XX12+2
 195+ 0000 ~            prefix1?_BnkTemp1Hi                 equ prefix1?_XX12+3
 196+ 0000 ~            prefix1?_BnkTemp2                   equ prefix1?_XX12+3
 197+ 0000 ~            prefix1?_BnkTemp2Lo                 equ prefix1?_XX12+3
 198+ 0000 ~            prefix1?_BnkTemp2Hi                 equ prefix1?_XX12+4
 199+ 0000                                          ENDM
 200+ 0000
 201+ 0000              XX16DefineMacro: MACRO   prefix1?
 202+ 0000 ~            ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
 203+ 0000 ~            prefix1?_BnkTransmatSidevX          DW  0               ; XX16+0
 204+ 0000 ~            prefix1?_BnkTransmatSidev           EQU prefix1?_BnkTransmatSidevX
 205+ 0000 ~            prefix1?_BnkTransmatSidevY          DW 0                ; XX16+2
 206+ 0000 ~            prefix1?_BnkTransmatSidevZ          DW 0                ; XX16+2
 207+ 0000 ~            prefix1?_BnkTransmatRoofvX          DW 0
 208+ 0000 ~            prefix1?_BnkTransmatRoofv           EQU prefix1?_BnkTransmatRoofvX
 209+ 0000 ~            prefix1?_BnkTransmatRoofvY          DW 0                ; XX16+2
 210+ 0000 ~            prefix1?_BnkTransmatRoofvZ          DW 0                ; XX16+2
 211+ 0000 ~            prefix1?_BnkTransmatNosevX          DW 0
 212+ 0000 ~            prefix1?_BnkTransmatNosev           EQU prefix1?_BnkTransmatNosevX
 213+ 0000 ~            prefix1?_BnkTransmatNosevY          DW 0                ; XX16+2
 214+ 0000 ~            prefix1?_BnkTransmatNosevZ          DW 0                ; XX16+2
 215+ 0000 ~            prefix1?_BnkTransmatTransX          DW 0
 216+ 0000 ~            prefix1?_BnkTransmatTransY          DW 0
 217+ 0000 ~            prefix1?_BnkTransmatTransZ          DW 0
 218+ 0000 ~            prefix1?_XX16                       equ prefix1?_BnkTransmatSidev
 219+ 0000 ~            ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
 220+ 0000 ~            prefix1?_BnkTransInvRow0x0          DW 0
 221+ 0000 ~            prefix1?_BnkTransInvRow0x1          DW 0
 222+ 0000 ~            prefix1?_BnkTransInvRow0x2          DW 0
 223+ 0000 ~            prefix1?_BnkTransInvRow0x3          DW 0
 224+ 0000 ~            prefix1?_BnkTransInvRow1y0          DW 0
 225+ 0000 ~            prefix1?_BnkTransInvRow1y1          DW 0
 226+ 0000 ~            prefix1?_BnkTransInvRow1y2          DW 0
 227+ 0000 ~            prefix1?_BnkTransInvRow1y3          DW 0
 228+ 0000 ~            prefix1?_BnkTransInvRow2z0          DW 0
 229+ 0000 ~            prefix1?_BnkTransInvRow2z1          DW 0
 230+ 0000 ~            prefix1?_BnkTransInvRow2z2          DW 0
 231+ 0000 ~            prefix1?_BnkTransInvRow2z3          DW 0
 232+ 0000 ~
 233+ 0000 ~            prefix1?_XX16Inv                    equ prefix1?_BnkTransInvRow0x0
 234+ 0000                                          ENDM
 235+ 0000
 236+ 0000              XX18DefineMacro: MACRO   prefix1?
 237+ 0000 ~            ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
 238+ 0000 ~            prefix1?_BnkDrawCam0xLo             DB  0               ; XX18+0
 239+ 0000 ~            prefix1?_BnkDrawCam0xHi             DB  0               ; XX18+1
 240+ 0000 ~            prefix1?_BnkDrawCam0xSgn            DB  0               ; XX18+2
 241+ 0000 ~            prefix1?_BnkDrawCam0x               equ prefix1?_BnkDrawCam0xLo
 242+ 0000 ~            prefix1?_BnkDrawCam0yLo             DB  0               ; XX18+3
 243+ 0000 ~            prefix1?_BnkDrawCam0yHi             DB  0               ; XX18+4
 244+ 0000 ~            prefix1?_BnkDrawCam0ySgn            DB  0               ; XX18+5
 245+ 0000 ~            prefix1?_BnkDrawCam0y               equ prefix1?_BnkDrawCam0yLo
 246+ 0000 ~            prefix1?_BnkDrawCam0zLo             DB  0               ; XX18+6
 247+ 0000 ~            prefix1?_BnkDrawCam0zHi             DB  0               ; XX18+7
 248+ 0000 ~            prefix1?_BnkDrawCam0zSgn            DB  0               ; XX18+8
 249+ 0000 ~            prefix1?_BnkDrawCam0z               equ prefix1?_BnkDrawCam0zLo
 250+ 0000 ~            prefix1?_XX18                       equ prefix1?_BnkDrawCam0xLo
 251+ 0000                                          ENDM
 252+ 0000
 253+ 0000              XX25DefineMacro: MACRO   prefix1?
 254+ 0000 ~            ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
 255+ 0000 ~            prefix1?_BnKProjxLo                 DB  0
 256+ 0000 ~            prefix1?_BnKProjxHi                 DB  0
 257+ 0000 ~            prefix1?_BnKProjxSgn                DB  0
 258+ 0000 ~            prefix1?_BnKProjx                   EQU prefix1?_BnKProjxLo
 259+ 0000 ~            prefix1?_BnKProjyLo                 DB  0
 260+ 0000 ~            prefix1?_BnKProjyHi                 DB  0
 261+ 0000 ~            prefix1?_BnKProjySgn                DB  0
 262+ 0000 ~            prefix1?_BnKProjy                   EQU prefix1?_BnKProjyLo
 263+ 0000 ~            prefix1?_BnKProjzLo                 DB  0
 264+ 0000 ~            prefix1?_BnKProjzHi                 DB  0
 265+ 0000 ~            prefix1?_BnKProjzSgn                DB  0
 266+ 0000 ~            prefix1?_BnKProjz                   EQU prefix1?_BnKProjzLo
 267+ 0000 ~            prefix1?_XX25                       EQU prefix1?_BnKProjxLo
 268+ 0000                                          ENDM
 269+ 0000
 270+ 0000              CopyPosToXX15Macro: MACRO   prefix1?
 271+ 0000 ~
 272+ 0000 ~            prefix1?_CopyPosToXX15:    ld hl,prefix1?_Bnkxhi
 273+ 0000 ~                                       ld de,prefix1?_BnkXScaled
 274+ 0000 ~                                       ldi
 275+ 0000 ~                                       ldi
 276+ 0000 ~                                       inc hl ; skip to y high
 277+ 0000 ~                                       ldi
 278+ 0000 ~                                       ldi
 279+ 0000 ~                                       inc hl ; skip to z hig
 280+ 0000 ~                                       ldi
 281+ 0000 ~                                       ldi
 282+ 0000 ~                                       ret
 283+ 0000                                  ENDM
 284+ 0000
 285+ 0000              CopyXX12ScaledToXX18Macro:  MACRO    prefix1?
 286+ 0000 ~            prefix1?_CopyXX12ScaledToXX18:
 287+ 0000 ~            prefix1?_CopyResultToDrawCam:    ld      hl, prefix1?_XX12
 288+ 0000 ~                                             ld      de, prefix1?_XX18
 289+ 0000 ~                                             ldi    ; X12+0 => XX18+0  Set XX18(2 0) = dot_sidev
 290+ 0000 ~                                             inc de ; skip to XX18+2 as it will be on XX18+1
 291+ 0000 ~                                             ldi    ; XX12+1 => XX18+2
 292+ 0000 ~                                             ldi    ; XX12+2 => XX18+3 Set XX12+1 => XX18+2
 293+ 0000 ~                                             inc de ; skip to XX18+5 as it will be on XX18+4
 294+ 0000 ~                                             ldi    ; XX12+3 => XX18+5
 295+ 0000 ~                                             ldi    ; XX12+4 => XX18+6 Set XX18(8 6) = dot_nosev
 296+ 0000 ~                                             inc de ; skip to XX18+8 as it will be on XX18+7
 297+ 0000 ~                                             ldi    ; XX12+5 => XX18+8
 298+ 0000 ~                                             ret
 299+ 0000                                          ENDM
 300+ 0000
 301+ 0000              CopyXX12toXX15Macro:        MACRO    prefix1?
 302+ 0000 ~            prefix1?_CopyXX12toXX15:         ld      hl, prefix1?_BnkXX12xLo
 303+ 0000 ~                                             ld      de, prefix1?_XX18
 304+ 0000 ~                                             ldi      ; xlo
 305+ 0000 ~                                             ldi      ; xsg
 306+ 0000 ~                                             ldi      ; xlo
 307+ 0000 ~                                             ldi      ; xsg
 308+ 0000 ~                                             ldi      ; xlo
 309+ 0000 ~                                             ldi      ; xsg
 310+ 0000 ~                                             ret
 311+ 0000                                          ENDM
 312+ 0000
 313+ 0000              InitialiseUniverseObjMacro: MACRO   prefix1?
 314+ 0000 ~            prefix1?_InitRotMat:    ld      hl, 0
 315+ 0000 ~                                    ld      (prefix1?_BnKrotmatSidevY),hl       ; set the zeroes
 316+ 0000 ~                                    ld      (prefix1?_BnKrotmatSidevZ),hl       ; set the zeroes
 317+ 0000 ~                                    ld      (prefix1?_BnKrotmatRoofvX),hl       ; set the zeroes
 318+ 0000 ~                                    ld      (prefix1?_BnKrotmatRoofvZ),hl       ; set the zeroes
 319+ 0000 ~                                    ld      (prefix1?_BnKrotmatNosevX),hl       ; set the zeroes
 320+ 0000 ~                                    ld      (prefix1?_BnKrotmatNosevY),hl       ; set the zeroes
 321+ 0000 ~            ; Optimised as already have 0 in l
 322+ 0000 ~                                    ld      h, $60	             				; 96 in hi byte
 323+ 0000 ~                                    ;ld      hl,1
 324+ 0000 ~                                    ld      (prefix1?_BnKrotmatSidevX),hl
 325+ 0000 ~                                    ld      (prefix1?_BnKrotmatRoofvY),hl
 326+ 0000 ~            ; Optimised as already have 0 in l
 327+ 0000 ~                                    ld      h, $E0					            ; -96 in hi byte which is +96 with hl bit 7 set
 328+ 0000 ~                                    ld      (prefix1?_BnKrotmatNosevZ),hl
 329+ 0000 ~                                    ret
 330+ 0000                                          ENDM
 331+ 0000
# file closed: ./Universe/UniverseMacros/UniverseVarsDefineMacro.asm
 111  0000                                      INCLUDE "./Tables/message_queue_macros.asm"
# file opened: ./Tables/message_queue_macros.asm
   1+ 0000
   2+ 0000              AnyMessagesMacro:       MACRO   NoMessageTarget
   3+ 0000 ~                                    ld      a, (MessageCount)
   4+ 0000 ~                                    and     a
   5+ 0000 ~                                    jr      z, NoMessageTarget
   6+ 0000                                      ENDM
   7+ 0000
   8+ 0000              AnyHyperSpaceMacro:     MACRO   NoMessageText
   9+ 0000 ~                                    ld      hl,(InnerHyperCount)
  10+ 0000 ~                                    ld      a,h
  11+ 0000 ~                                    or      l
  12+ 0000 ~                                    jr      z, NoMessageText
  13+ 0000                                      ENDM
  14+ 0000
# file closed: ./Tables/message_queue_macros.asm
 112  0000                                      INCLUDE "./Variables/general_variables_macros.asm"
# file opened: ./Variables/general_variables_macros.asm
   1+ 0000              ; limited to 255 character length
   2+ 0000              CountLengthHL:          MACRO   Limiter
   3+ 0000 ~                                    ld      de,hl
   4+ 0000 ~                                    ld      bc,Limiter
   5+ 0000 ~                                    xor     a
   6+ 0000 ~                                    cpir
   7+ 0000 ~                                    ClearCarryFlag
   8+ 0000 ~                                    sbc     hl,de
   9+ 0000 ~                                    ld      a,l
  10+ 0000 ~                                    ret
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              IncMemMaxN:             MACRO   mem, maxvalue
  14+ 0000 ~                                    ld      a,(mem)
  15+ 0000 ~                                    cp      maxvalue
  16+ 0000 ~                                    jr      c,.IncMaxed
  17+ 0000 ~                                    inc     a
  18+ 0000 ~                                    ld      (mem),a
  19+ 0000 ~            .IncMaxed:
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              IncMemMaxNCycle:        MACRO   mem, cyclevalue
  23+ 0000 ~                                    ld      a,(mem)
  24+ 0000 ~                                    inc     a
  25+ 0000 ~                                    cp      cyclevalue
  26+ 0000 ~                                    jr      c,.IncMaxed
  27+ 0000 ~                                    xor     a
  28+ 0000 ~            .IncMaxed:              ld      (mem),a
  29+ 0000                                      ENDM
  30+ 0000
  31+ 0000
  32+ 0000              HalfLengthHL:           MACRO
  33+ 0000 ~                                    ld      b,0
  34+ 0000 ~            .CountLenLoop:          ld      a,(hl)
  35+ 0000 ~                                    cp      0
  36+ 0000 ~                                    jr      z,.DoneCount
  37+ 0000 ~                                    inc     b
  38+ 0000 ~                                    inc     hl
  39+ 0000 ~                                    jr      .CountLenLoop
  40+ 0000 ~            .DoneCount:             ld      a,32
  41+ 0000 ~                                    sub     b
  42+ 0000 ~                                    sra     a
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              MakeInnocentMacro:		MACRO
  46+ 0000 ~            						xor		a
  47+ 0000 ~            						ld		(FugitiveInnocentStatus),a
  48+ 0000              						ENDM
  49+ 0000
  50+ 0000              NoEscapePodMacro:		MACRO
  51+ 0000 ~            						xor		a
  52+ 0000 ~            						ld		(EscapePod),a
  53+ 0000              						ENDM
  54+ 0000
  55+ 0000              MaxFuelLevel            EQU     70              ; 7.0 light years max
  56+ 0000              MaxFuelMacro:			MACRO
  57+ 0000 ~            						ld		a,MaxFuelLevel
  58+ 0000 ~            						ld		(Fuel),a
  59+ 0000              						ENDM
  60+ 0000
  61+ 0000              MaxThrottle:            MACRO
  62+ 0000 ~                                    ld      a,(SHIPMAXSPEED)
  63+ 0000 ~                                    ld      (DELTA),a
  64+ 0000 ~                                    ld      d,a
  65+ 0000 ~                                    ld      e,4
  66+ 0000 ~                                    mul
  67+ 0000 ~                                    ld      (DELT4Lo),de
  68+ 0000                                      ENDM
  69+ 0000
  70+ 0000              ZeroThrottle:           MACRO
  71+ 0000 ~                                    xor     a
  72+ 0000 ~                                    ld      (DELTA),a
  73+ 0000 ~                                    ld      (DELT4Lo),a
  74+ 0000 ~                                    ld      (DELT4Lo+1),a
  75+ 0000                                      ENDM
  76+ 0000
  77+ 0000              ZeroPitch:              MACRO
  78+ 0000 ~                                    xor     a
  79+ 0000 ~                                    ld      (BET2),a
  80+ 0000 ~                                    ld      (BET2FLIP),a
  81+ 0000 ~                                    ld      (JSTY),a
  82+ 0000 ~                                    ld      (BETA),a
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              ZeroRoll:               MACRO
  86+ 0000 ~                                    xor     a                              ; zero roll and climb
  87+ 0000 ~                                    ld      (ALP2),a
  88+ 0000 ~                                    ld      (ALP2FLIP),a
  89+ 0000 ~                                    ld      (JSTX),a
  90+ 0000 ~                                    ld      (ALPHA),a
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              CorrectPostJumpFuel:    MACRO
  94+ 0000 ~                                    ld      a,(Fuel)
  95+ 0000 ~                                    ld      hl,Distance
  96+ 0000 ~                                    sub     a,(hl)
  97+ 0000 ~                                    ld      (Fuel),a
  98+ 0000                                      ENDM
  99+ 0000
 100+ 0000              AnyMissilesLeft:        MACRO
 101+ 0000 ~                                    ld      a,(NbrMissiles)
 102+ 0000 ~                                    and     a
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              SetMissileTargetA:      MACRO
 106+ 0000 ~                                    ld      (MissileTargettingFlag),a   ; Set to slot number clearing bit 7
 107+ 0000                                      ENDM
 108+ 0000
 109+ 0000              IsMissileLaunchFlagged: MACRO
 110+ 0000 ~                                    ld      a,(MissileTargettingFlag)
 111+ 0000 ~                                    and     $80
 112+ 0000                                      ENDM
 113+ 0000
 114+ 0000              SetMissileTargetting:   MACRO
 115+ 0000 ~                                    ld      a,StageMissileTargeting
 116+ 0000 ~                                    ld      (MissileTargettingFlag),a
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              ClearMissileTargetting: MACRO
 120+ 0000 ~                                    ld      a,StageMissileNotTargeting
 121+ 0000 ~                                    ld      (MissileTargettingFlag),a
 122+ 0000                                      ENDM
 123+ 0000
 124+ 0000
 125+ 0000              ; Clear targetting bits which signals launch if lower nibble has selected target
 126+ 0000              SetMissileLaunch:       MACRO
 127+ 0000 ~                                    ld      a,(MissileTargettingFlag)
 128+ 0000 ~                                    and     $0F
 129+ 0000 ~                                    ld      (MissileTargettingFlag),a
 130+ 0000                                      ENDM
 131+ 0000
 132+ 0000              LockMissileToA:         MACRO
 133+ 0000 ~                                    or      $80
 134+ 0000 ~                                    ld      (MissileTargettingFlag),a
 135+ 0000                                      ENDM
 136+ 0000
 137+ 0000              ClearECM:               MACRO
 138+ 0000 ~                                    xor     a
 139+ 0000 ~                                    ld      (ECMCountDown),a
 140+ 0000                                      ENDM
 141+ 0000
 142+ 0000
 143+ 0000              ; Will check to see if bit 2 is set, if it is clear, then friendly hence z is set
 144+ 0000              ;                                    if hit is set then hostile hence z is not set
 145+ 0000              IsShipHostile:          MACRO
 146+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 147+ 0000 ~                                    and     ShipIsHostile
 148+ 0000                                      ENDM
 149+ 0000
 150+ 0000              ; Will check to see if bit 2 is set, if it is clear, then friendly hence z is set
 151+ 0000              ;                                    if hit is set then hostile hence z is not set
 152+ 0000              IsShipFriendly:         MACRO
 153+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 154+ 0000 ~                                    and     ShipNotHostile                  ; mask so we only have hostile bit
 155+ 0000                                      ENDM
 156+ 0000
 157+ 0000              ; Will check to see if bit 5 is set, if clear, then not exploding z clear
 158+ 0000              ;                                    if set    then exploding     z set
 159+ 0000              IsShipExploding:        MACRO
 160+ 0000 ~                                    ld      a,(UBnkaiatkecm)
 161+ 0000 ~                                    and     ShipExploding
 162+ 0000                                      ENDM
 163+ 0000
 164+ 0000              UpdateLaserOnCounter:   MACRO
 165+ 0000 ~                                    ld      a,(CurrLaserPulseOnCount)
 166+ 0000 ~                                    and     a
 167+ 0000 ~                                    jr      z,.LaserOnIsDone
 168+ 0000 ~                                    dec     a
 169+ 0000 ~                                    ld      (CurrLaserPulseOnCount),a
 170+ 0000 ~                                    jr      z,.LaserOnIsDone
 171+ 0000 ~                                    ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount
 172+ 0000 ~            .LaserOnIsDone:
 173+ 0000                                      ENDM
 174+ 0000
 175+ 0000              UpdateLaserOffCounter:  MACRO
 176+ 0000 ~                                    ld      a,(CurrLaserPulseOffTime)
 177+ 0000 ~                                    and     a
 178+ 0000 ~                                    jr      z,.LaserOffIsDone
 179+ 0000 ~                                    dec     a
 180+ 0000 ~                                    ld      (CurrLaserPulseOffTime),a
 181+ 0000 ~                                    jr      z,.LaserOffIsDone
 182+ 0000 ~                                    ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount
 183+ 0000 ~            .LaserOffIsDone:
 184+ 0000                                      ENDM
 185+ 0000
 186+ 0000              UpdateLaserRestCounter: MACRO
 187+ 0000 ~                                    ld      a,(CurrLaserPulseRestCount)
 188+ 0000 ~                                    and     a
 189+ 0000 ~                                    jr      z,.LaserRestIsDone
 190+ 0000 ~                                    dec     a
 191+ 0000 ~                                    ld      (CurrLaserPulseRestCount),a
 192+ 0000 ~                                    jr      z,.LaserRestIsDone
 193+ 0000 ~                                    ZeroA                                                                           ;    then pulse rate count = 0
 194+ 0000 ~                                    ld      (CurrLaserPulseRateCount),a                                             ;    .
 195+ 0000 ~            .LaserRestIsDone
 196+ 0000                                      ENDM
 197+ 0000
 198+ 0000              ChargeEnergyAndShields: MACRO
 199+ 0000 ~                                    ld      a,$FF
 200+ 0000 ~                                    ld      (PlayerEnergy),a
 201+ 0000 ~                                    ld      (ForeShield),a
 202+ 0000 ~                                    ld      (AftShield),a
 203+ 0000                                      ENDM
 204+ 0000
 205+ 0000              CopyPresentSystemToTarget: MACRO
 206+ 0000 ~                                    ld      hl,(PresentSystemX)
 207+ 0000 ~                                    ld      (TargetSystemX),hl
 208+ 0000                                      ENDM
 209+ 0000
 210+ 0000              CopyTargetSystemToPresent: MACRO
 211+ 0000 ~                                    ld      hl,(TargetSystemX)
 212+ 0000 ~                                    ld      (PresentSystemX),hl
 213+ 0000                                      ENDM
 214+ 0000
 215+ 0000              HalveFugitiveStatus:    MACRO
 216+ 0000 ~                                    ld      hl,FugitiveInnocentStatus
 217+ 0000 ~                                    srl     (hl)
 218+ 0000                                      ENDM
 219+ 0000
 220+ 0000              ClearForceTransition    MACRO
 221+ 0000 ~                                    ld      a,$FF
 222+ 0000 ~                                    ld      (ScreenTransitionForced),a
 223+ 0000                                      ENDM
 224+ 0000
 225+ 0000              ForceTransition:        MACRO newScreen
 226+ 0000 ~                                    ld      a,newScreen
 227+ 0000 ~                                    ld      (ScreenTransitionForced), a
 228+ 0000                                      ENDM
 229+ 0000
 230+ 0000              IsSpaceStationPresent:  MACRO
 231+ 0000 ~                                    ld      a,(SpaceStationSafeZone)
 232+ 0000 ~                                    and     a
 233+ 0000                                      ENDM
 234+ 0000
 235+ 0000              SetSafeZone:            MACRO
 236+ 0000 ~                                    xor     a
 237+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 238+ 0000                                      ENDM
 239+ 0000
 240+ 0000              ClearSafeZone:          MACRO
 241+ 0000 ~                                    ld      a,$FF
 242+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 243+ 0000                                      ENDM
 244+ 0000
 245+ 0000              ClearTemperatures:      MACRO
 246+ 0000 ~                                    xor     a
 247+ 0000 ~                                    ld      (CabinTemperature),a
 248+ 0000 ~                                    ld      (GunTemperature),a
 249+ 0000                                      ENDM
 250+ 0000
 251+ 0000              ClearWarpPressed:       MACRO
 252+ 0000 ~                                    SetMemFalse WarpPressed
 253+ 0000                                      ENDM
 254+ 0000
 255+ 0000              CoolCabin:              MACRO
 256+ 0000 ~                                    ld      a,(CabinTemperature)
 257+ 0000 ~                                    and     a
 258+ 0000 ~                                    jr      z,.AlreadyCool
 259+ 0000 ~                                    dec     a
 260+ 0000 ~                                    ld      (CabinTemperature),a
 261+ 0000 ~            .AlreadyCool:
 262+ 0000                                      ENDM
 263+ 0000
 264+ 0000              CoolLasers:             MACRO
 265+ 0000 ~                                    ld      a,(GunTemperature)
 266+ 0000 ~                                    and     a
 267+ 0000 ~                                    jr      z,.AlreadyCool
 268+ 0000 ~                                    dec     a
 269+ 0000 ~                                    ld      (GunTemperature),a
 270+ 0000 ~            .AlreadyCool:
 271+ 0000                                      ENDM
 272+ 0000
 273+ 0000              ; type 255 is "not fitted"
 274+ 0000
 275+ 0000
 276+ 0000              InitEventCounter:       MACRO
 277+ 0000 ~                                    xor     a
 278+ 0000 ~                                    ld      (EventCounter),a
 279+ 0000                                      ENDM
 280+ 0000
 281+ 0000              ClearMissJump:          MACRO
 282+ 0000 ~                                    ld      a,$FF
 283+ 0000 ~                                    ld      (MissJumpFlag),a
 284+ 0000                                      ENDM
 285+ 0000
 286+ 0000
 287+ 0000              DrainSystem:            MACRO   SystemMem, DrainMem
 288+ 0000 ~                                    ld      a,(DrainMem)
 289+ 0000 ~                                    ld      b,a
 290+ 0000 ~                                    ld      a,(SystemMem)
 291+ 0000 ~                                    sub     a,b
 292+ 0000 ~                                    ld      (SystemMem),a
 293+ 0000 ~                                    jr      c,.ZeroSystem
 294+ 0000 ~                                    jp      .ExitPoint
 295+ 0000 ~            .ZeroSystem:            ZeroA
 296+ 0000 ~                                    ld      (SystemMem),a
 297+ 0000 ~            .ExitPoint
 298+ 0000                                      ENDM
 299+ 0000
 300+ 0000              BoostSystem:            MACRO   SystemMem, BoostMem
 301+ 0000 ~                                    ld      a,(BoostMem)
 302+ 0000 ~                                    ld      b,a
 303+ 0000 ~                                    ld      a,(SystemMem)
 304+ 0000 ~                                    add     b
 305+ 0000 ~                                    ld      (SystemMem),a
 306+ 0000 ~                                    jr      c, .MaxSystem
 307+ 0000 ~                                    jp      .ExitPoint
 308+ 0000 ~            .MaxSystem:             ld      a,255
 309+ 0000 ~                                    ld      (SystemMem),a
 310+ 0000 ~            .ExitPoint
 311+ 0000                                      ENDM
 312+ 0000
 313+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER HasEngineSoundChanged:  MACRO
 314+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      a,(EngineSoundChanged)
 315+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         and     a
 316+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 317+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER
 318+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER ClearEngineSoundChanged:MACRO
 319+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         xor      a
 320+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      (EngineSoundChanged),a
 321+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 322+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER
 323+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER SetEngineSoundChanged:  MACRO
 324+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      a,$FF
 325+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      (EngineSoundChanged),a
 326+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 327+ 0000
# file closed: ./Variables/general_variables_macros.asm
 113  0000                                      INCLUDE "./Variables/UniverseSlot_macros.asm"
# file opened: ./Variables/UniverseSlot_macros.asm
   1+ 0000
   2+ 0000              AddJunkCount:           MACRO
   3+ 0000 ~                                    ld      hl,JunkCount
   4+ 0000 ~                                    inc     (hl)
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              SubJunkCount:           MACRO
   8+ 0000 ~                                    ld      hl,JunkCount
   9+ 0000 ~                                    dec     (hl)
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              ClearJunkCount:         MACRO
  13+ 0000 ~                                    ZeroA
  14+ 0000 ~                                    ld      (JunkCount),a
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              AddCop:                 MACRO
  18+ 0000 ~                                    ld      hl,CopCount
  19+ 0000 ~                                    inc     (hl)
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              SubCop:                 MACRO
  23+ 0000 ~                                    ld      hl,CopCount
  24+ 0000 ~                                    dec     (hl)
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              AddPirateCount:         MACRO
  28+ 0000 ~                                    ld      hl,PirateCount
  29+ 0000 ~                                    inc     (hl)
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              SubPirateCount:         MACRO
  33+ 0000 ~                                    ld      hl,PirateCount
  34+ 0000 ~                                    inc     (hl)
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              AreCopsPresent:         MACRO
  38+ 0000 ~                                    ld      a,(CopCount)
  39+ 0000 ~                                    and     a
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              ; Class == shiptype
  43+ 0000              SetSlotAToUnivClass:    MACRO
  44+ 0000 ~                                    ex      af,af'
  45+ 0000 ~                                    ld      a,(ShipTypeAddr)
  46+ 0000 ~                                    ld      b,a
  47+ 0000 ~                                    ex      af,af'
  48+ 0000 ~                                    call    SetSlotAToClassB
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              TestRoomForJunk:        MACRO   Target
  52+ 0000 ~                                    ld      a,3
  53+ 0000 ~                                    JumpIfMemTrue  SpaceStationSafeZone, .DoTest
  54+ 0000 ~                                    add     a,2
  55+ 0000 ~            .DoTest                 JumpIfALTMemusng    JunkCount, Target
  56+ 0000                                      ENDM
  57+ 0000
  58+ 0000              JumpIfSpaceStation:     MACRO   Target
  59+ 0000 ~                                    ld      hl,UniverseSlotType
  60+ 0000 ~                                    ld      a,(hl)
  61+ 0000 ~                                    cp      ShipTypeStation
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              ClearSlotMem:           MACRO   mem
  65+ 0000 ~                                    ld      a,(mem)
  66+ 0000 ~                                    call    ClearSlotA
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              IsSlotEmpty:            MACRO
  70+ 0000 ~                                    ld      hl,UniverseSlotList
  71+ 0000 ~                                    add     hl,a
  72+ 0000 ~                                    ld      a,(hl)
  73+ 0000 ~                                    cp      0
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              IsSlotMissile:          MACRO
  77+ 0000 ~                                    ld      hl,UniverseSlotType
  78+ 0000 ~                                    add     hl,a
  79+ 0000 ~                                    ld      a,(hl)
  80+ 0000 ~                                    cp      ShipTypeMissile
  81+ 0000                                      ENDM
  82+ 0000
  83+ 0000
  84+ 0000              ; Checks if slot is empty else A = ship type
  85+ 0000              ReturnIfSlotAEmpty:     MACRO
  86+ 0000 ~                                    ld      hl,UniverseSlotList
  87+ 0000 ~                                    add     hl,a
  88+ 0000 ~                                    ld      a,(hl)
  89+ 0000 ~                                    inc     a
  90+ 0000 ~                                    ret     z           ; if slot was ff inc would make it 0
  91+ 0000 ~                                    dec     a           ; get original value back for later
  92+ 0000                                      ENDM
  93+ 0000
  94+ 0000              JumpIfSlotAEmpty:       MACRO   Target
  95+ 0000 ~                                    ld      hl,UniverseSlotList
  96+ 0000 ~                                    add     hl,a
  97+ 0000 ~                                    ld      a,(hl)
  98+ 0000 ~                                    inc     a
  99+ 0000 ~                                    jp      z,Target    ; if slot was ff inc would make it 0
 100+ 0000 ~                                    dec     a           ; get original value back for later
 101+ 0000                                      ENDM
 102+ 0000
 103+ 0000              JumpIfSlotHLEmpty:      MACRO   Target
 104+ 0000 ~                                    ld      a,(hl)
 105+ 0000 ~                                    and     a
 106+ 0000 ~                                    jr      nz,Target
 107+ 0000                                      ENDM
# file closed: ./Variables/UniverseSlot_macros.asm
 114  0000
 115  0000                                      INCLUDE "./Data/ShipIdEquates.asm"
# file opened: ./Data/ShipIdEquates.asm
   1+ 0000
   2+ 0000
   3+ 0000
   4+ 0000              ShipID_Adder            EQU 00
   5+ 0000              ShipID_Anaconda         EQU 01
   6+ 0000              ShipID_Asp_Mk_2         EQU 02
   7+ 0000              ShipID_Boa              EQU 03
   8+ 0000              ShipID_CargoType5       EQU 04
   9+ 0000              ShipID_Boulder          EQU 05
  10+ 0000              ShipID_Asteroid         EQU 06
  11+ 0000              ShipID_Bushmaster       EQU 07
  12+ 0000              ShipID_Chameleon        EQU 08
  13+ 0000              ShipID_CobraMk3         EQU 09
  14+ 0000              ShipID_Cobra_Mk_1       EQU 10
  15+ 0000              ShipID_Cobra_Mk_3_P     EQU 11
  16+ 0000              ShipID_Constrictor      EQU 12
  17+ 0000              ShipID_Coriolis         EQU 13
  18+ 0000              ShipID_Cougar           EQU 14
  19+ 0000              ShipID_Dodo             EQU 15
  20+ 0000              ShipID_Dragon           EQU 16
  21+ 0000              ShipID_Escape_Pod       EQU 17
  22+ 0000              ShipID_Fer_De_Lance     EQU 18
  23+ 0000              ShipID_Gecko            EQU 19
  24+ 0000              ShipID_Ghavial          EQU 20
  25+ 0000              ShipID_Iguana           EQU 21
  26+ 0000              ShipID_Krait            EQU 22
  27+ 0000              ShipID_Logo             EQU 23
  28+ 0000              ShipID_Mamba            EQU 24
  29+ 0000              ShipID_Missile          EQU 25
  30+ 0000              ShipID_Monitor          EQU 26
  31+ 0000              ShipID_Moray            EQU 27
  32+ 0000              ShipID_Ophidian         EQU 28
  33+ 0000              ShipID_Plate            EQU 29
  34+ 0000              ShipID_Python           EQU 30
  35+ 0000              ShipID_Python_P         EQU 31
  36+ 0000              ShipID_Rock_Hermit      EQU 32
  37+ 0000              ShipID_ShuttleType9     EQU 33
  38+ 0000              ShipID_Shuttle_Mk_2     EQU 34
  39+ 0000              ShipID_Sidewinder       EQU 35
  40+ 0000              ShipID_Splinter         EQU 36
  41+ 0000              ShipID_TestVector       EQU 37
  42+ 0000              ShipID_Thargoid         EQU 38
  43+ 0000              ShipID_Thargon          EQU 39
  44+ 0000              ShipID_TransportType10  EQU 40
  45+ 0000              ShipID_Viper            EQU 41
  46+ 0000              ShipID_Worm             EQU 42
  47+ 0000              ShipID_Rattler          EQU 43
  48+ 0000
# file closed: ./Data/ShipIdEquates.asm
 116  0000
 117  0000
 118  0000                  IFNDEF  LASER_V2
 119  0000 ~            UpdateLaserCountersold: MACRO
 120  0000 ~                                    JumpIfMemZero CurrLaserPulseOnCount,   .SkipPulseOn     ; if beam on count > 0 then beam on count --
 121  0000 ~                                    dec     a                                               ; .
 122  0000 ~                                    ld      (CurrLaserPulseOnCount),a                       ; .
 123  0000 ~            .SkipPulseOn:           JumpIfAIsNotZero  .SkipRestCounter                      ;    if beam on = 0 then
 124  0000 ~                                    ld      a,(CurrLaserPulseOffCount)                      ;       if beam off > 0 then  beam off --
 125  0000 ~                                    JumpIfMemZero CurrLaserPulseOffCount, .SkipPulseOff     ;       .
 126  0000 ~                                    dec     a                                               ;       .
 127  0000 ~                                    ld      (CurrLaserPulseOffCount),a                      ;       .
 128  0000 ~            .SkipPulseOff:          JumpIfAIsNotZero  .SkipRestCounter                      ;       if beam off = 0
 129  0000 ~                                    JumpIfMemZero CurrLaserPulseRestCount, .ZeroRateCounter ;
 130  0000 ~                                    dec     a
 131  0000 ~                                    ld      (CurrLaserPulseRestCount),a
 132  0000 ~                                    jr      nz,.SkipRestCounter
 133  0000 ~            .ZeroRateCounter:       ld      (CurrLaserPulseRateCount),a
 134  0000 ~            .SkipRestCounter:
 135  0000 ~                                    ENDM
 136  0000                  ENDIF
 137  0000              MessageAt:              MACRO   x,y,message
 138  0000 ~                                    MMUSelectLayer1
 139  0000 ~                                    ld      d,y
 140  0000 ~                                    ld      e,x
 141  0000 ~                                    ld      hl,message
 142  0000 ~                                    call    l1_print_at_wrap
 143  0000                                      ENDM
 144  0000
 145  0000              SetBorder:              MACRO   value
 146  0000 ~                                    MMUSelectLayer1
 147  0000 ~                                    ld          a,value
 148  0000 ~                                    call        l1_set_border
 149  0000                                      ENDM
 150  0000
 151  0000              charactersetaddr		equ 15360
 152  0000              STEPDEBUG               equ 1
 153  0000
 154  0000              TopOfStack              equ $5CCB ;$6100
 155  0000
 156  0000                                      ORG $5DCB;      $6200
 157  5DCB F3           EliteNextStartup:       di
 158  5DCC CD 37 AA     .InitiliseFileIO:       call        GetDefaultDrive
 159  5DCF ED 91 07 03  .InitialiseClockSpeed:  nextreg     TURBO_MODE_REGISTER,Speed_28MHZ
 160  5DD3              .InitialiseLayerOrder:
 161  5DD3                                      DISPLAY "Starting Assembly At ", EliteNextStartup
 162  5DD3                                      ; "STARTUP"
 163  5DD3                                      ; Make sure  rom is in page 0 during load
 164  5DD3                                      MMUSelectSpriteBank
 164  5DD3 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 165  5DD7 CD 94 E5                             call		init_sprites
 166  5DDA                                      MMUSelectLayer2
 166  5DDA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 167  5DDE CD 0F E0                             call        asm_disable_l2_readwrite
 168  5DE1                                      MMUSelectROMS
 168  5DE1 ED 91 50 FF >                     nextreg EXSDOSMMU0,        BankROM
 168  5DE5 ED 91 51 FF >                     nextreg EXSDOSMMU1,        BankROM
 169  5DE9 ED 91 06 01  .InitialisePeripherals: nextreg     PERIPHERAL_2_REGISTER, AUDIO_CHIPMODE_AY ; Enable Turbo Sound
 170  5DED ED 91 08 52                          nextreg     PERIPHERAL_3_REGISTER, DISABLE_RAM_IO_CONTENTION | ENABLE_TURBO_SOUND | INTERNAL_SPEAKER_ENABLE
 171  5DF1 ED 91 09 00                          nextreg     PERIPHERAL_4_REGISTER, %00000000
 172  5DF5 ED 91 68 10                          nextreg     ULA_CONTROL_REGISTER,  %00010000                ; set up ULA CONRTROL may need to change bit 0 at least, but bit 4 is separate extended keys from main matrix
 173  5DF9                                      MMUSelectSound
 173  5DF9 ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 174  5DFD CD 4B E0                             call        InitAudio
 175  5E00 3E B0        .InitialiseInterrupts:  ld	        a,VectorTable>>8
 176  5E02 ED 47                                ld	        i,a						                        ; im2 table will be at address 0xa000
 177  5E04 ED 91 22 06                          nextreg     LINE_INTERRUPT_CONTROL_REGISTER,%00000110       ; Video interrup on
 178  5E08 ED 91 23 00                          nextreg     LINE_INTERRUPT_VALUE_LSB_REGISTER,0   ; lasta line..
 179  5E0C ED 5E                                im	2
 180  5E0E              .GenerateDefaultCmdr:   MMUSelectCommander
 180  5E0E ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 181  5E12 CD 52 E2                             call		defaultCommander
 182  5E15 CD 18 E2                             call        saveCommander
 183  5E18                                      MMUSelectLayer1
 183  5E18 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 184  5E1C CD 8F E0                             call		l1_cls
 185  5E1F 3E 07                                ld			a,7
 186  5E21 CD AA E0                             call		l1_attr_cls_to_a
 187  5E24                                      SetBorder   $FF
 187  5E24             >                        MMUSelectLayer1
 187  5E24 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 187  5E28 3E FF       >                        ld          a,$FF
 187  5E2A CD B4 E0    >                        call        l1_set_border
 188  5E2D              .InitialiseL2:          MMUSelectLayer2
 188  5E2D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 189  5E31 CD 45 E2                             call 		l2_initialise
 190  5E34              .InitialisingMessage:   MessageAt   0,0,InitialiseMessage
 190  5E34             >                        MMUSelectLayer1
 190  5E34 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 190  5E38 16 00       >                        ld      d,0
 190  5E3A 1E 00       >                        ld      e,0
 190  5E3C 21 C5 66    >                        ld      hl,InitialiseMessage
 190  5E3F CD 24 E1    >                        call    l1_print_at_wrap
 191  5E42                                      SetBorder   $01
 191  5E42             >                        MMUSelectLayer1
 191  5E42 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 191  5E46 3E 01       >                        ld          a,$01
 191  5E48 CD B4 E0    >                        call        l1_set_border
 192  5E4B                                      MessageAt   0,8,LoadingSpritesMessage
 192  5E4B             >                        MMUSelectLayer1
 192  5E4B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 192  5E4F 16 08       >                        ld      d,8
 192  5E51 1E 00       >                        ld      e,0
 192  5E53 21 D1 66    >                        ld      hl,LoadingSpritesMessage
 192  5E56 CD 24 E1    >                        call    l1_print_at_wrap
 193  5E59                                      ZeroA
 193  5E59 AF          >                        xor a
 194  5E5A 32 F5 66                             ld          (LoadCounter),a
 195  5E5D              .StreamSpriteData:      MMUSelectSpriteBank
 195  5E5D ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 196  5E61 CD 20 E6                             call        load_pattern_files
 197  5E64                                      MMUSelectKeyboard
 197  5E64 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 198  5E68 CD F7 E0                             call        init_keyboard
 199  5E6B              .PostDiag:              ClearForceTransition
 199  5E6B 3E FF       >                        ld      a,$FF
 199  5E6D 32 CA 69    >                        ld      (ScreenTransitionForced),a
 200  5E70                                      SetBorder   $04
 200  5E70             >                        MMUSelectLayer1
 200  5E70 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 200  5E74 3E 04       >                        ld          a,$04
 200  5E76 CD B4 E0    >                        call        l1_set_border
 201  5E79                                      MMUSelectSpriteBank
 201  5E79 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 202  5E7D CD AF E5                             call        sprite_diagnostic
 203  5E80                                      SetBorder   $05
 203  5E80             >                        MMUSelectLayer1
 203  5E80 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 203  5E84 3E 05       >                        ld          a,$05
 203  5E86 CD B4 E0    >                        call        l1_set_border
 204  5E89              .PostDiag2:             MMUSelectKeyboard
 204  5E89 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 205  5E8D CD F7 E1                             call        WaitForAnyKey
 206  5E90                                      MMUSelectSpriteBank
 206  5E90 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 207  5E94 CD 9F E5                             call        sprite_diagnostic_clear
 208  5E97 3E 10        TidyDEBUG:              ld          a,16
 209  5E99 32 68 68                             ld          (TidyCounter),a
 210  5E9C AF           TestText:               xor			a
 211  5E9D 32 B3 7D                             ld      (JSTX),a
 212  5EA0              DEBUGCODE:              ClearSafeZone ; just set in open space so compas treacks su n
 212  5EA0 3E FF       >                        ld      a,$FF
 212  5EA2 32 44 7F    >                        ld      (SpaceStationSafeZone),a
 213  5EA5                                      SetBorder   $06
 213  5EA5             >                        MMUSelectLayer1
 213  5EA5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 213  5EA9 3E 06       >                        ld          a,$06
 213  5EAB CD B4 E0    >                        call        l1_set_border
 214  5EAE              TRIANGLEDIAGNOSTICS:   ;break
 215  5EAE                                     ;ld          c,10
 216  5EAE                                     ;ld          e,20
 217  5EAE                                     ;ld          l,120
 218  5EAE                                     ;MMUSelectLayer2
 219  5EAE                                     ;call        l2_draw_horz_saved
 220  5EAE                                     ;break
 221  5EAE                                     ;ld          c,20
 222  5EAE                                     ;ld          e,120
 223  5EAE                                     ;ld          l,20
 224  5EAE                                     ;call        l2_draw_horz_saved
 225  5EAE                                     ;break
 226  5EAE                                     ;ld          hl,120
 227  5EAE                                     ;call        l2_drawHorzClipY
 228  5EAE                                     ;break
 229  5EAE                                     ;ld          hl,30
 230  5EAE                                     ;ld          de,50
 231  5EAE                                     ;exx
 232  5EAE                                     ;ld          hl,40
 233  5EAE                                     ;ld          de,60
 234  5EAE                                     ;ld          ix,SaveArrayS2
 235  5EAE                                     ;ld          a,$FF
 236  5EAE                                     ;call        Layer2_Save_ClipY_Line ; Why was is very slow?
 237  5EAE              ;                        ;break
 238  5EAE              ;                        ld          hl,100; x1 64 hl'
 239  5EAE              ;                        ld          de,150; x2 96 de'
 240  5EAE              ;                        ld          bc,120; x3 78 bc'
 241  5EAE              ;                        exx
 242  5EAE              ;                        ld          hl,50  ;y1 32 hl
 243  5EAE              ;                        ld          de,75  ;y2 4B de
 244  5EAE              ;                        ld          bc,90  ;y3 5A bc
 245  5EAE              ;                        MMUSelectLayer2
 246  5EAE              ;                        call        l2_draw_fillclip_tri
 247  5EAE              ;TRIANGLEDIAGDONE:       ;break          0136 0153 FF81 FF98  310, 339  = -127, -104 dx 437, 443  (218 221)  91,117
 248  5EAE                                       ;break
 249  5EAE                                       MMUSelectUniverseN  0
 249  5EAE ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 250  5EB2                                       MMUSelectLayer2
 250  5EB2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 251  5EB6
 252  5EB6                                IFDEF DEBUG_LL122_DIRECT
 253  5EB6 ~                                    call    Debug_LL122_6502
 254  5EB6                                ENDIF
 255  5EB6
 256  5EB6                                IFDEF DEBUG_LL121_DIRECT
 257  5EB6 ~                                    call Debug_LL121_6502
 258  5EB6                                ENDIF
 259  5EB6
 260  5EB6
 261  5EB6                                IFDEF DEBUG_LL129_DIRECT
 262  5EB6 ~                                    call Debug_LL129_6502
 263  5EB6                                ENDIF
 264  5EB6
 265  5EB6                                IFDEF DEBUG_LL120_DIRECT
 266  5EB6 ~                                    call Debug_LL120_6502
 267  5EB6                                ENDIF
 268  5EB6
 269  5EB6                                IFDEF DEBUG_LL123_DIRECT
 270  5EB6 ~                                    call Debug_LL123_6502
 271  5EB6                                ENDIF
 272  5EB6
 273  5EB6                                IFDEF DEBUG_LL118_DIRECT
 274  5EB6 ~                                    call Debug_LL118_6502
 275  5EB6                                ENDIF
 276  5EB6
 277  5EB6                                IFDEF DEBUG_LL28_6502
 278  5EB6 ~                                    call Debug_LL28_6502
 279  5EB6                                ENDIF
 280  5EB6
 281  5EB6                                IFDEF DEBUG_LL145_6502
 282  5EB6 ~                                    ;break
 283  5EB6 ~                                    call Debug_LL145_6502
 284  5EB6                                ENDIF
 285  5EB6
 286  5EB6
 287  5EB6                              IFDEF DEBUG_LL129
 288  5EB6 ~                                    ld      a,240
 288  5EB6 ~             ld      (XX12p2),a ; Gradient
 289  5EB6 ~                                    ld      a,$FF
 289  5EB6 ~             ld      (XX12p3),a ; Slope
 290  5EB6 ~                                    ld      hl,-50
 290  5EB6 ~             ld      (SRvarPair),hl
 291  5EB6 ~                                    call    LL129_6502  ; Should be Q = 240, A = +ve SR = 50 >> PASS
 292  5EB6 ~                                    ;break
 293  5EB6 ~                                    ld      a,240
 293  5EB6 ~             ld      (XX12p2),a ; Gradient
 294  5EB6 ~                                    ld      a,0
 294  5EB6 ~             ld      (XX12p3),a ; Slope
 295  5EB6 ~                                    ld      hl,-50
 295  5EB6 ~             ld      (SRvarPair),hl
 296  5EB6 ~                                    call    LL129_6502  ; Should be Q = 240, A = -ve SR = 50 >> PASS
 297  5EB6 ~                                    ;break
 298  5EB6 ~                                    ld      a,240
 298  5EB6 ~             ld      (XX12p2),a ; Gradient
 299  5EB6 ~                                    ld      a,$FF
 299  5EB6 ~             ld      (XX12p3),a ; Slope
 300  5EB6 ~                                    ld      hl, 150
 300  5EB6 ~             ld      (SRvarPair),hl
 301  5EB6 ~                                    call    LL129_6502  ; Should be Q = 240, A = -ve SR = 150 >> PASS
 302  5EB6 ~                                    ld      a,140
 302  5EB6 ~             ld      (XX12p2),a ; Gradient
 303  5EB6 ~                                    ld      a,$0
 303  5EB6 ~             ld      (XX12p3),a ; Slope
 304  5EB6 ~                                    ld      hl,50
 304  5EB6 ~             ld      (SRvarPair),hl
 305  5EB6 ~                                    call    LL129_6502  ; Should be Q = 140, A = +ve SR = 50 >> PASS
 306  5EB6                              ENDIF
 307  5EB6                              IFDEF DEBUG_LL120
 308  5EB6 ~                                    ;break
 309  5EB6 ~                                    ld      a,0
 309  5EB6 ~             ld      (Tvar),a   ; slope +ve so multiply
 310  5EB6 ~                                    ld      a,$FF
 310  5EB6 ~             ld      (Svar),a   ; S var -ve
 311  5EB6 ~                                    ld      hl,-10
 311  5EB6 ~             ld      (XX1510),hl; x1_lo -ve
 312  5EB6 ~                                    ld      a,168
 312  5EB6 ~             ld      (XX12p2),a ; Gradient
 313  5EB6 ~                                    ld      a,$FF
 313  5EB6 ~             ld      (XX12p3),a ; slope direction
 314  5EB6 ~                                    ; LL129 shoud be q = 168, a +ve SR 10 >> PASS
 315  5EB6 ~                                    call    LL120_6502  ; Should be -ve 10 * 168  so xy -15   >> FAIL
 316  5EB6 ~                                    ;break
 317  5EB6 ~                                    ld      a,$FF
 317  5EB6 ~             ld      (Tvar),a   ; slope -ve so divide
 318  5EB6 ~                                    ld      a,$FF
 318  5EB6 ~             ld      (Svar),a   ; S var -ve
 319  5EB6 ~                                    ld      hl,-10
 319  5EB6 ~             ld      (XX1510),hl; x1_lo -ve
 320  5EB6 ~                                    ld      a,168
 320  5EB6 ~             ld      (XX12p2),a ; Gradient
 321  5EB6 ~                                    ld      a,$FF
 321  5EB6 ~             ld      (XX12p3),a ; slope direction
 322  5EB6 ~                                    ; LL129 shoud be q = 168, a +ve SR 10 >> PASS
 323  5EB6 ~                                    call    LL120_6502  ; Should be -ve 10 / 168  so xy -6 >> PASS
 324  5EB6                              ENDIF
 325  5EB6                          IFDEF  DEBUGCLIP
 326  5EB6 ~                                    ;break
 327  5EB6 ~                                    MMUSelectUniverseN 0
 328  5EB6 ~                                    MMUSelectLayer2
 329  5EB6 ~                                    call   l2_cls_upper_two_thirds
 330  5EB6 ~                                    ld      hl,PlotTestData
 331  5EB6 ~                                    ld      b,32
 332  5EB6 ~            .testLoop:              push    bc
 333  5EB6 ~                                    push    hl
 334  5EB6 ~                                    ld      de,x1
 335  5EB6 ~                                    ld      bc, 8
 336  5EB6 ~                                    pop     hl
 337  5EB6 ~                                    ldir
 338  5EB6 ~                                    ;break
 339  5EB6 ~                                    push    hl
 340  5EB6 ~                                    call    l2_draw_6502_line;l2_draw_elite_line
 341  5EB6 ~                                    ;break
 342  5EB6 ~                                    ;MMUSelectKeyboard
 343  5EB6 ~                                    ;call    WaitForAnyKey
 344  5EB6 ~                                    pop     hl
 345  5EB6 ~                                    pop     bc
 346  5EB6 ~                                    djnz    .testLoop
 347  5EB6 ~                                    ;break
 348  5EB6 ~                                    jp      InitialiseGalaxies
 349  5EB6 ~                                  ;  ld      hl,$FFF7 : ld (x1),hl : ld hl,$0009 : ld (y1),hl : ld hl,$000F : ld (x2),hl : ld hl,$FFEF : ld (y2),hl : call l2_draw_elite_line
 350  5EB6 ~                                  ;  ld      hl,259   : ld (x1),hl : ld hl,35    : ld (y1),hl : ld hl,250   : ld (x2),hl : ld hl,-12   : ld (y2),hl : call l2_draw_elite_line
 351  5EB6 ~                                     ld      hl,237
 351  5EB6 ~              ld (x1),hl
 351  5EB6 ~              ld hl,258
 351  5EB6 ~              ld (y1),hl
 351  5EB6 ~              ld hl,353
 351  5EB6 ~              ld (x2),hl
 351  5EB6 ~              ld hl,237
 351  5EB6 ~              ld (y2),hl
 351  5EB6 ~              call l2_draw_elite_line
 352  5EB6 ~                                  ;  ld      hl,6     : ld (x1),hl : ld hl,-65   : ld (y1),hl : ld hl,-15   : ld (x2),hl : ld hl,7     : ld (y2),hl : call l2_draw_elite_line
 353  5EB6 ~
 354  5EB6 ~            PlotTestData:  ; dw  281 ,   60, 252 ,   90  ; pass
 355  5EB6 ~                           ; dw   -9 ,    9,  16 ,  -17  ; pass
 356  5EB6 ~                            dw -10  ,  -10,  50 ,   50 ;0:0:50:50   pass
 357  5EB6 ~                            dw -10  ,    0,  50 ,   50 ;0:8:50:50   fail load x1 y1 as 0,0
 358  5EB6 ~                            dw -20  ,    0,  50 ,   50 ;0:14:50:50  fail load x1 y1 as 0,0
 359  5EB6 ~                            dw  -5  ,  -10,  50 ,   50 ;4.5:0:50:50 fail load x1 y1 as 0,0
 360  5EB6 ~
 361  5EB6 ~                            dw -10  ,  -10,  50 ,   50
 362  5EB6 ~                            dw  10  ,    0,  50 ,   50
 363  5EB6 ~                            dw   0  ,    0,  50 ,   50
 364  5EB6 ~                            dw   0  ,   -5,  50 ,   50
 365  5EB6 ~
 366  5EB6 ~                            dw  259 ,   35, 250 ,  -12
 367  5EB6 ~                            dw  237 ,  258, 353 ,  237
 368  5EB6 ~                            dw    6 ,  -65, -15 ,    7
 369  5EB6 ~                            dw  280 ,   90, 300 ,   70
 370  5EB6 ~                            dw  -80 ,   90, -20 ,   70
 371  5EB6 ~                            dw  -10 ,  120,  10 ,  145
 372  5EB6 ~                            dw  120 ,  -10,  45 ,   10
 373  5EB6 ~                            dw  220 , -100,   5 ,   80
 374  5EB6 ~                            dw  220 ,  120,  35 ,  190
 375  5EB6 ~                            dw  235 ,  120,  20 ,  190
 376  5EB6 ~                            dw  -50 ,   60, 145 ,   70
 377  5EB6 ~                            dw  150 ,   60, 345 ,   70
 378  5EB6 ~                            dw  140 ,   90, 240 ,   70
 379  5EB6 ~                            dw  163 ,  256, 116 ,  173
 380  5EB6 ~                            dw   83 ,  184,  55 ,  192
 381  5EB6 ~                            dw   68 ,  192,  54 ,  103
 382  5EB6 ~                            dw  125 , 3937, 127 ,   41
 383  5EB6 ~                            dw  125 , 3937,  81 ,  111
 384  5EB6 ~                            dw  310 ,  339,  81 , 3992
 385  5EB6 ~                            dw  -37 , 4096,  38 ,  560
 386  5EB6 ~                            dw  283 , 101 ,  65 ,  163
 387  5EB6 ~                            dw  283 , 101 , 146 ,   78
 388  5EB6 ~                            dw  146 , 78  ,   3 ,   93
 389  5EB6 ~                            dw  3   , 93  ,  65 ,  163
 390  5EB6 ~                            dw  -127, 346 ,   3 ,   93
 391  5EB6 ~                            dw  44	, 351 , -43 ,  126
 392  5EB6 ~                            dw  92	, 54  , 144 ,  -14
 393  5EB6 ~                            dw  144	, -14 , 164 ,    4
 394  5EB6 ~                            dw  95	, 40  , 159 ,   31
 395  5EB6 ~                            dw  159	, 31  , 161 ,   51
 396  5EB6 ~
 397  5EB6 ~
 398  5EB6 ~
 399  5EB6 ~            /*007D FF61 FF81 006F
 400  5EB6 ~            007D FF61 017F 0029
 401  5EB6 ~            0096 FF61 FF81 004D
 402  5EB6 ~            0096 FF61 017F 004D
 403  5EB6 ~            017F 004F 0072 015F
 404  5EB6 ~            0072 015F FF81 004D
 405  5EB6 ~            0019 002B 00F6 002B
 406  5EB6 ~            00F6 002B 00F6 006F
 407  5EB6 ~            00F6 006F 0019 006F
 408  5EB6 ~            0019 006F 0019 002B
 409  5EB6 ~            005A 0079 0095 0027
 410  5EB6 ~            0096 0027 00AC 0028
 411  5EB6 ~            0051 005D 00A2 0040
 412  5EB6 ~            00A2 0040 00AA 0058
 413  5EB6 ~            005F 0056 00A3 004A
 414  5EB6 ~            00A3 004A 00A6 005F
 415  5EB6 ~            0073 0070 007D 0072
 416  5EB6 ~            007D 0072 007D 0075
 417  5EB6 ~            006C 0083 0076 0088
 418  5EB6 ~            0076 0072 007D 0074
 419  5EB6 ~            006C 0083 0076 0088
 420  5EB6 ~            0076 0088 0074 008B*/
 421  5EB6 ~
 422  5EB6 ~
 423  5EB6 ~            /*;;
 424  5EB6 ~            28 01 79 00 5a 01 8f 00 28 01 79 00 2f 01 3a 00
 425  5EB6 ~            2f 01 3a 00 5f 01 53 00 5f 01 53 00 5a 01 8f 00
 426  5EB6 ~            5a 01 8f 00 14 01 a1 00 28 01 79 00 14 01 a1 00
 427  5EB6 ~            28 01 79 00 ed 00 53 00 ed 00 53 00 2F 01 3a 00
 428  5EB6 ~            14 01 a1 00 e3 00 78 00 ed 00 53 00 e3 00 78 00
 429  5EB6 ~            47 01 6d 00 40 01 5f 00 40 01 5f 00 44 01 5d 00
 430  5EB6 ~            44 01 5d 00 4b 01 6a 00 4b 01 6a 00 47 01 6d 00
 431  5EB6 ~            42 01 5d 00 47 01 5d 00 47 01 5d 00 48 01 6d 00
 432  5EB6 ~            48 01 6d 00 43 01 6d 00 47 01 6d 00 43 01 6c 00
 433  5EB6 ~            47 01 6d 00 42 01 6c 00 14 00 dc ff 12 00 e1 ff*/
 434  5EB6 ~
 435  5EB6 ~                                     MMUSelectKeyboard
 436  5EB6 ~                                     call        WaitForAnyKey
 437  5EB6                          ELSE
 438  5EB6                                       DISPLAY "Not debugging clip code"
 439  5EB6                          ENDIF
 440  5EB6                          IFDEF LOGDIVIDEDEBUG
 441  5EB6 ~                                    ;break
 442  5EB6 ~                                    MMUSelectMathsTables
 443  5EB6 ~                                    ld      a,4
 444  5EB6 ~                                    ld      (varQTEST),a
 445  5EB6 ~                                    ld      a,1
 446  5EB6 ~                                    ld      (varATEST),a
 447  5EB6 ~                                    ld      b,250
 448  5EB6 ~                                    ld      hl, outputbuffer
 449  5EB6 ~            .LoopTest:              push    bc,,hl
 450  5EB6 ~                                    ld      a,(varQTEST)
 451  5EB6 ~                                    ld      (varQ),a
 452  5EB6 ~                                    ld      a,(varATEST)
 453  5EB6 ~                                    call    Requ256mulAdivQ_Log
 454  5EB6 ~                                    pop     bc,,hl
 455  5EB6 ~                                    ld      (hl),a
 456  5EB6 ~                                    inc     hl
 457  5EB6 ~                                    ld      a,(varATEST)
 458  5EB6 ~                                    inc     a
 459  5EB6 ~                                    ld      (varATEST),a
 460  5EB6 ~                                    ld      a,(varQTEST)
 461  5EB6 ~                                    ld      (varQTEST),a
 462  5EB6 ~                                    djnz    .LoopTest
 463  5EB6 ~                                    ;break
 464  5EB6 ~
 465  5EB6 ~            varATEST    DB  0
 466  5EB6 ~            varQTEST    DB  0
 467  5EB6 ~
 468  5EB6 ~
 469  5EB6 ~
 470  5EB6 ~            outputbuffer DS 256
 471  5EB6                          ENDIF
 472  5EB6                          IFDEF DEBUGCIRCLE1
 473  5EB6 ~                                    ;break
 474  5EB6 ~                                    ld      hl,128
 475  5EB6 ~                                    ld      de, 64
 476  5EB6 ~                                    ld      c,20
 477  5EB6 ~                                    ld      b,$59
 478  5EB6 ~                                    MMUSelectLayer2
 479  5EB6 ~                                    call    l2_draw_clipped_circle_filled
 480  5EB6                          ENDIF
 481  5EB6                          IFDEF DEBUGCIRCLE2
 482  5EB6 ~                                    ;break
 483  5EB6 ~                                    ld      hl,128
 484  5EB6 ~                                    ld      de, 64
 485  5EB6 ~                                    ld      c,200
 486  5EB6 ~                                    ld      b,$49
 487  5EB6 ~                                    MMUSelectLayer2
 488  5EB6 ~                                    call    l2_draw_clipped_circle_filled
 489  5EB6 ~                                    ;break
 490  5EB6                          ENDIF
 491  5EB6
 492  5EB6                          IFDEF DEBUGCIRCLE3
 493  5EB6 ~                                    ;break
 494  5EB6 ~                                    ld      hl,128
 495  5EB6 ~                                    ld      de, 64
 496  5EB6 ~                                    ld      c,130
 497  5EB6 ~                                    ld      b,$49
 498  5EB6 ~                                    MMUSelectLayer2
 499  5EB6 ~                                    call    l2_draw_clipped_circle_filled
 500  5EB6 ~                                    ;break
 501  5EB6                          ENDIF
 502  5EB6
 503  5EB6                          IFDEF DEBUGCIRCLE4
 504  5EB6 ~                                    ;break
 505  5EB6 ~                                    ld      hl,320
 506  5EB6 ~                                    ld      de, 128
 507  5EB6 ~                                    ld      c,10
 508  5EB6 ~                                    ld      b,$49
 509  5EB6 ~                                    MMUSelectLayer2
 510  5EB6 ~                                    call    l2_draw_clipped_circle_filled
 511  5EB6 ~                                    ;break
 512  5EB6                          ENDIF
 513  5EB6
 514  5EB6                          IFDEF DEBUGPLANET
 515  5EB6 ~            DebugPlanetCode:        MMUSelectPlanet
 516  5EB6 ~                                    call    CreatePlanet
 517  5EB6 ~                                    ld      a,0
 518  5EB6 ~                                    ld      (P_BnKzsgn),a
 519  5EB6 ~                                    ld      (P_BnKxsgn),a
 520  5EB6 ~                                    ld      (P_BnKysgn),a
 521  5EB6 ~                                    ld      hl,$0200
 522  5EB6 ~                                    ld      (P_BnKzlo),hl
 523  5EB6 ~                                    ld      hl,$00000
 524  5EB6 ~                                    ld      (P_BnKxlo),hl
 525  5EB6 ~                                    ld      (P_BnKylo),hl
 526  5EB6 ~                                    ld      a,127
 527  5EB6 ~                                    ld      (UBnKRotXCounter),a
 528  5EB6 ~                                    ld      (UBnKRotZCounter),a
 529  5EB6 ~                                    ;break
 530  5EB6 ~            .PlanetDebugLoop:       MMUSelectPlanet
 531  5EB6 ~                                    call    PlanetDraw
 532  5EB6 ~                                    call    ApplyPlanetRollAndPitch
 533  5EB6 ~                                    call    P_NormaliseRotMat
 534  5EB6 ~                                    ;call    ApplyPlanetPitch
 535  5EB6 ~
 536  5EB6 ~                                    ;MMUSelectKeyboard
 537  5EB6 ~                                    ;call        WaitForAnyKey
 538  5EB6 ~                                    ;break
 539  5EB6 ~                                    MMUSelectLayer2
 540  5EB6 ~                                    call		l2_cls
 541  5EB6 ~                                    jp          .PlanetDebugLoop
 542  5EB6                          ENDIF
 543  5EB6
 544  5EB6                          IFDEF DEBUGPLANETCIRCLE
 545  5EB6 ~            DebugPlanetCode:        MMUSelectPlanet
 546  5EB6 ~                                    call    CreatePlanet
 547  5EB6 ~                                    ld      a,0
 548  5EB6 ~                                    ld      (P_BnKzsgn),a
 549  5EB6 ~                                    ld      (P_BnKxsgn),a
 550  5EB6 ~                                    ld      (P_BnKysgn),a
 551  5EB6 ~                                    ld      hl,$0200
 552  5EB6 ~                                    ld      (P_BnKzlo),hl
 553  5EB6 ~                                    ld      hl,$00000
 554  5EB6 ~                                    ld      (P_BnKxlo),hl
 555  5EB6 ~                                    ld      (P_BnKylo),hl
 556  5EB6 ~                                    ld      a,127
 557  5EB6 ~                                    ld      (UBnKRotXCounter),a
 558  5EB6 ~                                    ld      (UBnKRotZCounter),a
 559  5EB6 ~                                    ;break
 560  5EB6 ~            .PlanetDebugLoop:       MMUSelectPlanet
 561  5EB6 ~                                    call    PlanetDraw
 562  5EB6 ~                                    call    ApplyPlanetRollAndPitch
 563  5EB6 ~                                    call    P_NormaliseRotMat
 564  5EB6 ~                                    ;call    ApplyPlanetPitch
 565  5EB6 ~
 566  5EB6 ~                                    ;MMUSelectKeyboard
 567  5EB6 ~                                    ;call        WaitForAnyKey
 568  5EB6 ~                                    ;break
 569  5EB6 ~                                    MMUSelectLayer2
 570  5EB6 ~                                    call		l2_cls
 571  5EB6 ~                                    jp          .PlanetDebugLoop
 572  5EB6                          ENDIF
 573  5EB6
 574  5EB6                          IFDEF DEBUGLINEDRAW
 575  5EB6 ~            RenderDiagnostics:      MMUSelectLayer2
 576  5EB6 ~                                    ld      h, 0
 577  5EB6 ~                                    ld      l, 0
 578  5EB6 ~                                    ld      d,0
 579  5EB6 ~                                    ld      e,255
 580  5EB6 ~                                    ld      ixl,16
 581  5EB6 ~                                    ld      a,$C5
 582  5EB6 ~                                    ld      (line_gfx_colour),a
 583  5EB6 ~                                    ; draw a grid
 584  5EB6 ~            .horizontalLoop:        push    hl,,de,,ix
 585  5EB6 ~                                    call    LineHLtoDE
 586  5EB6 ~                                    pop     hl,,de,,ix
 587  5EB6 ~                                    ld      a,h
 588  5EB6 ~                                    add     8
 589  5EB6 ~                                    ld      h,a
 590  5EB6 ~                                    ld      d,a
 591  5EB6 ~                                    dec     ixl
 592  5EB6 ~                                    jr      nz,.horizontalLoop
 593  5EB6 ~            .verticalGrid:          ld      h, 0
 594  5EB6 ~                                    ld      l, 0
 595  5EB6 ~                                    ld      d, 127
 596  5EB6 ~                                    ld      e,0
 597  5EB6 ~                                    ld  ixl,32
 598  5EB6 ~                                    ld      a,$C6
 599  5EB6 ~                                    ld      (line_gfx_colour),a
 600  5EB6 ~            .verticalLoop:          push    hl,,de,,ix
 601  5EB6 ~                                    call    LineHLtoDE
 602  5EB6 ~                                    pop     hl,,de,,ix
 603  5EB6 ~                                    ld      a,l
 604  5EB6 ~                                    add     8
 605  5EB6 ~                                    ld      l,a
 606  5EB6 ~                                    ld      e,a
 607  5EB6 ~                                    dec     ixl
 608  5EB6 ~                                    jr      nz,.verticalLoop
 609  5EB6 ~                                    ld      a,$A6
 610  5EB6 ~                                    ld      (line_gfx_colour),a
 611  5EB6 ~                                    ld      hl,0
 612  5EB6 ~                                    ld      de,$7FFF
 613  5EB6 ~                                    call    LineHLtoDE
 614  5EB6 ~                                    ld      hl,$00FF
 615  5EB6 ~                                    ld      de,$7F00
 616  5EB6 ~                                    call    LineHLtoDE
 617  5EB6 ~                                    ld      a,0
 618  5EB6 ~                                    MMUSelectUniverseA
 619  5EB6 ~                                    ; CLip -10,-10 to 20,30
 620  5EB6 ~                                    ld      a,$56
 621  5EB6 ~                                    ld      (line_gfx_colour),a
 622  5EB6 ~                                    ;break
 623  5EB6 ~            .LineTest1:             ld      hl, DrawTestDataLine1
 624  5EB6 ~                                    call    DrawClippedLineDebug
 625  5EB6 ~            .LineTest2:             ld      hl, DrawTestDataLine2
 626  5EB6 ~                                    call    DrawClippedLineDebug
 627  5EB6 ~            .LineTest3:             ld      hl, DrawTestDataLine3
 628  5EB6 ~                                    call    DrawClippedLineDebug
 629  5EB6 ~            .LineTest4:             ld      hl, DrawTestDataLine4
 630  5EB6 ~                                    call    DrawClippedLineDebug
 631  5EB6 ~                                    ld      hl, DrawTestDataLine5
 632  5EB6 ~                                    call    DrawClippedLineDebug
 633  5EB6 ~                                    ld      hl, DrawTestDataLine6
 634  5EB6 ~                                    call    DrawClippedLineDebug
 635  5EB6 ~                                    ld      hl, DrawTestDataLine7
 636  5EB6 ~                                    call    DrawClippedLineDebug
 637  5EB6 ~                                    ld      hl, DrawTestDataLine8
 638  5EB6 ~                                    call    DrawClippedLineDebug
 639  5EB6 ~                                    ld      hl, DrawTestDataLine9
 640  5EB6 ~                                    call    DrawClippedLineDebug
 641  5EB6 ~                                    ld      hl, DrawTestDataLine10
 642  5EB6 ~                                    call    DrawClippedLineDebug
 643  5EB6 ~                                    ld      hl, DrawTestDataLine11
 644  5EB6 ~                                    call    DrawClippedLineDebug
 645  5EB6 ~                                    ld      hl, DrawTestDataLine12
 646  5EB6 ~                                    call    DrawClippedLineDebug
 647  5EB6 ~                                    ld      a,$A8
 648  5EB6 ~                                    ld      (line_gfx_colour),a
 649  5EB6 ~                                    ld      hl, DrawTestDataLine13
 650  5EB6 ~                                    call    DrawClippedLineDebug
 651  5EB6 ~                                    ld      hl, DrawTestDataLine14
 652  5EB6 ~                                    call    DrawClippedLineDebug
 653  5EB6 ~                                    ld      hl, DrawTestDataLine15
 654  5EB6 ~                                    call    DrawClippedLineDebug
 655  5EB6 ~                                    ld      hl, DrawTestDataLine16
 656  5EB6 ~                                    call    DrawClippedLineDebug
 657  5EB6 ~                                    ;break
 658  5EB6 ~                                    ; draw diagonals on screen tL br, tr bl
 659  5EB6 ~                                    ; draw diagonals on screen bl tr, br tl
 660  5EB6 ~                                    ; draw clipped horzontals left clip from -1000 -10 to 50
 661  5EB6 ~                                    ; draw clipped horzontals right clip from 200 to 260 to +1000
 662  5EB6 ~                                    ; draw clipped horzontals both clip from -1000 -10 to 260 to 1000
 663  5EB6 ~                                    ; draw clipped horzontals top clip from -1000 -10 to 50
 664  5EB6 ~                                    ; draw clipped horzontals bottom clip from 200 to 260 to +1000
 665  5EB6 ~                                    ; draw clipped horzontals both clip from -1000 -10 to 260 to 1000
 666  5EB6 ~                                    ; draw diagonal left clip
 667  5EB6 ~                                    ; draw diagonal right clip
 668  5EB6 ~                                    ; draw diagonal top clip
 669  5EB6 ~                                    ; draw diagonal bottom clip
 670  5EB6 ~                                    ; draw diagonal left top clip
 671  5EB6 ~                                    ; draw diagonal right top clip
 672  5EB6 ~                                    ; draw diagonal left bottom clip
 673  5EB6 ~                                    ; draw diagonal left bottom clip
 674  5EB6 ~                                    ; draw diagnoal left clip to right clip
 675  5EB6 ~                                    ; draw diagnoal top clip to bottom clip
 676  5EB6 ~                                    ; draw diagnoal left top clip to right clip
 677  5EB6 ~                                    ; flip right to left
 678  5EB6 ~                                    ; flip bottom to top
 679  5EB6 ~            .DebugPause:           ; jp      .DebugPause
 680  5EB6 ~                                    jp      InitialiseGalaxies
 681  5EB6 ~
 682  5EB6 ~            DrawTestDataLine1:      DW      -10,   -10,   20,   30
 683  5EB6 ~            DrawTestDataLine2:      DW      265,   -10,  235,   30
 684  5EB6 ~            DrawTestDataLine3:      DW      -10,   -10,   30,   20
 685  5EB6 ~            DrawTestDataLine4:      DW      265,   -10,  225,   20
 686  5EB6 ~            DrawTestDataLine5:      DW    -1000,   -10,  127,   60
 687  5EB6 ~            DrawTestDataLine6:      DW     1000,   -10,  128,   60
 688  5EB6 ~            DrawTestDataLine7:      DW    -1000,   138,  127,   60
 689  5EB6 ~            DrawTestDataLine8:      DW     1000,   138,  128,   60
 690  5EB6 ~            DrawTestDataLine9:      DW      -10, -1000,  127,   60
 691  5EB6 ~            DrawTestDataLine10:     DW      265, -1000,  128,   60
 692  5EB6 ~            DrawTestDataLine11:     DW      -10,  1138,  127,   60
 693  5EB6 ~            DrawTestDataLine12:     DW      265,  1138,  128,   60
 694  5EB6 ~            DrawTestDataLine13:     DW      -10, -1000,  127,  360
 695  5EB6 ~            DrawTestDataLine14:     DW      265, -1000,  128,  360
 696  5EB6 ~            DrawTestDataLine15:     DW      -10,  1138,  127, -360
 697  5EB6 ~            DrawTestDataLine16:     DW      265,  1138,  128, -360
 698  5EB6 ~
 699  5EB6 ~
 700  5EB6 ~            DrawClippedLineDebug:   ld      bc,8
 701  5EB6 ~                                    ld      de,UbnkPreClipX1
 702  5EB6 ~                                    ldir
 703  5EB6 ~                                    call    ClipLine
 704  5EB6 ~                                    ld      a,(UBnkNewY1)
 705  5EB6 ~                                    ld      h,a
 706  5EB6 ~                                    ld      a,(UBnkNewX1)
 707  5EB6 ~                                    ld      l,a
 708  5EB6 ~                                    ld      a,(UBnkNewY2)
 709  5EB6 ~                                    ld      d,a
 710  5EB6 ~                                    ld      a,(UBnkNewX2)
 711  5EB6 ~                                    ld      e,a
 712  5EB6 ~                                    call    LineHLtoDE
 713  5EB6 ~                                    ret
 714  5EB6 ~
 715  5EB6                              ENDIF
 716  5EB6              ;.ClearLayer2Buffers:    DoubleBufferIfPossible
 717  5EB6              ;                        DoubleBufferIfPossible
 718  5EB6              ; Set up all 8 galaxies, 7later this will be pre built and loaded into memory from files
 719  5EB6
 720  5EB6                              IFDEF LOGDIVIDEDEBUG
 721  5EB6 ~                               DISPLAY "DEBUG: SKIPPING INIT TO SAVE MEMORY FOR LOG DIVIDE DEBUG TEST"
 722  5EB6                              ELSE
 723  5EB6                                      SetBorder   $07
 723  5EB6             >                        MMUSelectLayer1
 723  5EB6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 723  5EBA 3E 07       >                        ld          a,$07
 723  5EBC CD B4 E0    >                        call        l1_set_border
 724  5EBF              InitialiseGalaxies:     MessageAt   0,24,InitialisingGalaxies
 724  5EBF             >                        MMUSelectLayer1
 724  5EBF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 724  5EC3 16 18       >                        ld      d,24
 724  5EC5 1E 00       >                        ld      e,0
 724  5EC7 21 E0 66    >                        ld      hl,InitialisingGalaxies
 724  5ECA CD 24 E1    >                        call    l1_print_at_wrap
 725  5ECD                                      ;break
 726  5ECD CD CB 69                             call		ResetUniv                       ; Reset ship data
 727  5ED0 CD F3 69                             call        ResetGalaxy                     ; Reset each galaxy copying in code
 728  5ED3 CD 1C 6A                             call        SeedAllGalaxies
 729  5ED6                                      MMUSelectSpriteBank
 729  5ED6 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 730  5EDA CD 8A E5                             call        sprite_cls_all
 731  5EDD                                      MMUSelectLayer1
 731  5EDD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 732  5EE1 CD 8F E0                             call		l1_cls
 733  5EE4                                      SetBorder   $00
 733  5EE4             >                        MMUSelectLayer1
 733  5EE4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 733  5EE8 3E 00       >                        ld          a,$00
 733  5EEA CD B4 E0    >                        call        l1_set_border
 734  5EED                              ENDIF
 735  5EED                              IFDEF SKIPATTRACT
 736  5EED ~                                    DISPLAY "INITGALAXIES SKIP ATTRACT"
 737  5EED ~                                    jp DefaultCommander
 738  5EED                              ELSE
 739  5EED                                      DISPLAY "INITGALAXIES ATTRACT ENABLED"
 740  5EED F3           StartAttractMode:       di                                          ; we are changing interrupts
 741  5EEE                                      MMUSelectSound
 741  5EEE ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 742  5EF2 CD B7 E0                             call        InitAudioMusic
 743  5EF5 21 0D B2                             ld          hl,AttractInterrrupt
 744  5EF8 22 C4 B1                             ld          (IM2SoundHandler+1),hl
 745  5EFB CD 94 77                             call        AttractModeInit
 746  5EFE FB                                   ei
 747  5EFF                                      ;break
 748  5EFF CD E9 77                             call        AttractModeMain                 ; now drive attact mode keyboard scan
 749  5F02 F3                                   di                                          ; set up for main
 750  5F03 21 D7 B1                             ld          hl,SoundInterrupt               ; sound handler
 751  5F06 22 C4 B1                             ld          (IM2SoundHandler+1),hl
 752  5F09                                      MMUSelectSound
 752  5F09 ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 753  5F0D CD 4B E0                             call        InitAudio                       ; jsut re-init all audio for now rather than sound off
 754  5F10                                      IFDEF MAIN_INTERRUPTENABLE
 755  5F10                                          DISPLAY "Main Interrupt Enabled"
 756  5F10 FB                                       ei
 757  5F11                                      ELSE
 758  5F11 ~                                        DISPLAY "Main Interrupt Disabled"
 759  5F11                                      ENDIF
 760  5F11                                      JumpIfAIsZero  SkipDefaultCommander
 760  5F11 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 760  5F12 CA 1F 5F    >                        jp	    z, SkipDefaultCommander
 761  5F15                              ENDIF
 762  5F15              DefaultCommander:       MMUSelectCommander
 762  5F15 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 763  5F19 CD 52 E2                             call		defaultCommander
 764  5F1C C3 1F 5F                             jp          InitialiseMainLoop
 764  5F1F
 765  5F1F              SkipDefaultCommander:
 766  5F1F                                      ; This bit needs to MMU Selet exdos
 767  5F1F                                      ; bring up a browser for saves
 768  5F1F                                      ; load saves it
 769  5F1F                                      ; switch back to maths MMU
 770  5F1F              ;                        call    FindNextFreeSlotInA
 771  5F1F              ;                        ld      b,a
 772  5F1F              ;                        ld      a,13 ;Coriolis station
 773  5F1F              ;                        call    InitialiseShipAUnivB
 774  5F1F              ;                        xor     a
 775  5F1F CD 67 82     InitialiseMainLoop:     call    InitMainLoop
 776  5F22              ;..MAIN GAME LOOP..................................................................................................................
 777  5F22              ; MACRO BLOCKS.....................................................................................................................
 778  5F22              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
 779  5F22
 780  5F22
 781  5F22
 782  5F22              ; if beam on count > 0
 783  5F22              ;    then beam on count --
 784  5F22              ;         if beam on count = 0
 785  5F22              ;            then beam off count = beam off
 786  5F22              ; if beam off > 0
 787  5F22              ;    then beam off --
 788  5F22              ;         if beam off = 0 and pulse rate count = max count
 789  5F22              ;            then pulse rest count = pulse rest
 790  5F22              ; if pulse rest > 0 then pulse rest --
 791  5F22              ;    if pulse rest = 0
 792  5F22              ;       then pulse rate count = 0
 793  5F22
 794  5F22
 795  5F22              ; counter logic
 796  5F22              ;    if beam on count > 0 then beam on count --
 797  5F22              ;    if beam on = 0 then
 798  5F22              ;       if beam off count >0 then beam off count --
 799  5F22              ;       if beam off count = 0 them
 800  5F22              ;          if pulse rest count > 0 then pulse rest count --
 801  5F22              ;             if reset count = 0 then pulse rate count = 0
 802  5F22              ; shoting logic
 803  5F22              ;    if pulse on count is 0 and pulse off count is 0 and rest count is 0
 804  5F22              ;       then  if fire pressed is OK
 805  5F22              ;                if not beam type
 806  5F22              ;                   then pulse rate count ++
 807  5F22              ;                        if pulse rate count < pulse max count
 808  5F22              ;                           then pulse on count = pulse on time
 809  5F22              ;                                pulse off count = pulse off time
 810  5F22              ;                                pulse rest count = pulse rest time
 811  5F22              ;                           else pulse rest count = pulse rest time
 812  5F22              ;                                pulse rate count, pulse on count, pulse off count = 0
 813  5F22              ;                   else pulse on count = $FF
 814  5F22              ;                        pulse off time , rest time = 0
 815  5F22
 816  5F22              ;..................................................................................................................................
 817  5F22                                      INCLUDE "./GameEngine/MainLoop.asm"
# file opened: ./GameEngine/MainLoop.asm
   1+ 5F22
   2+ 5F22                  DEFINE  MAINLOOP_COOL_LASERS
   3+ 5F22                  DEFINE  MAINLOOP_ECM
   4+ 5F22                  DEFINE  MAINLOOP_KEYBOARDSCAN
   5+ 5F22              ;    DEFINE  MAINLOOP_DEMOSHIPS
   6+ 5F22              ;   DEFINE  MAINLOOP_DEBUGMISSILE 1
   7+ 5F22                  DEFINE  MAINLOOP_INPUTHANDLER
   8+ 5F22                 ; DEFINE  MAINLOOP_EVENTHANDLER 1
   9+ 5F22                  DEFINE  MAINLOOP_RECHARGE 1
  10+ 5F22               ;   DEFINE  MAINLOOP_LAUNCHMISSILE
  11+ 5F22                  DEFINE  MAINLOOP_UPDATEUNIVERSE 1
  12+ 5F22                  DEFINE  MAINLOOP_DUST_RENDER 1
  13+ 5F22                  DEFINE  MAINLOOP_SUN_RENDER 1
  14+ 5F22                  DEFINE  MAINLOOP_PLANET_RENDER 1
  15+ 5F22                  DEFINE  MAINLOOP_MODEL_RENDER    1
  16+ 5F22                  DEFINE  MAINLOOP_SPAWN_ALWAYS_OUTSIDE_SAFEZONE 1
  17+ 5F22                  DEFINE  MAINLOOP_WARP_ENABLED 1
  18+ 5F22
  19+ 5F22              ;.................................................................................................................................
  20+ 5F22              MainLoop:	    MMUSelectMathsBankedFns                                         ; make sure we are in maths routines in case a save paged out
  20+ 5F22 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  21+ 5F26 CD 37 84                     call    doRandom                                                ; redo the seeds every frame
  22+ 5F29                              IFDEF LASER_V2
  23+ 5F29 CD 4A 61                             call    LaserBeamV2
  24+ 5F2C                              ELSE
  25+ 5F2C ~                                    UpdateLaserOnCounter
  26+ 5F2C ~                                    UpdateLaserOffCounter
  27+ 5F2C ~                                    UpdateLaserRestCounter
  28+ 5F2C ~                                    CoolLasers
  29+ 5F2C                              ENDIF
  30+ 5F2C                              IFDEF MAINLOOP_ECM
  31+ 5F2C                                      INCLUDE "./GameEngine/MainLoop_ECM.asm"
# file opened: ././GameEngine/MainLoop_ECM.asm
   1++5F2C 3A 4C 7F     .ReducePlayerECM:       ld      a,(PlayerECMActiveCount)
   2++5F2F A7                                   and     a
   3++5F30 CA 42 5F                             jp      z, .DonePlayerECM
   4++5F33 3D                                   dec     a
   5++5F34 32 4C 7F                             ld      (PlayerECMActiveCount),a
   6++5F37 3A 1F 81                             ld      a,(PlayerEnergy)
   7++5F3A A7                                   and     a
   8++5F3B CA 42 5F                             jp      z, .DonePlayerECM
   9++5F3E 3D                                   dec     a
  10++5F3F 32 1F 81                             ld      (PlayerEnergy),a
  11++5F42              .DonePlayerECM:
  12++5F42 3A B1 7D     .ReduceCommonECM:       ld      a,(ECMCountDown)
  13++5F45 A7                                   and     a
  14++5F46 CA 4D 5F                             jp      z, .DoneCommonECM
  15++5F49 3D                                   dec     a
  16++5F4A 32 B1 7D                             ld      (ECMCountDown),a
  17++5F4D              .DoneCommonECM:
  18++5F4D
# file closed: ././GameEngine/MainLoop_ECM.asm
  32+ 5F4D                              ENDIF
  33+ 5F4D                              IFDEF MAINLOOP_WARP_ENABLED
  34+ 5F4D 3A 66 80                             ld      a,(WarpCooldown)
  35+ 5F50 A7                                   and     a
  36+ 5F51 CA 58 5F                             jp      z,.AlreadyCool
  37+ 5F54 3D                                   dec     a
  38+ 5F55 32 66 80                             ld      (WarpCooldown),a
  39+ 5F58              .AlreadyCool
  40+ 5F58                              ENDIF
  41+ 5F58                              IFDEF MAINLOOP_KEYBOARDSCAN
  42+ 5F58                                      MMUSelectKeyboard
  42+ 5F58 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
  43+ 5F5C CD 03 E1                             call    scan_keyboard                                           ; perform the physical input scan
  44+ 5F5F                              ENDIF
  45+ 5F5F              ;.. This bit allows cycling of ships on universe 0 in demo.........................................................................
  46+ 5F5F                              IFDEF MAINLOOP_DEMOSHIPS
  47+ 5F5F ~            DemoOfShipsDEBUG:       call    TestForNextShip
  48+ 5F5F                              ENDIF
  49+ 5F5F              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
  50+ 5F5F 3E 00        InputBlockerCheck:      ld      a,$0
  51+ 5F61                              IFDEF MAINLOOP_INPUTHANDLER
  52+ 5F61                                      JumpIfAEqNusng $01, SkipInputHandlers                           ; as we are in a transition the whole update AI is skipped
  52+ 5F61 FE 01       >                        cp     $01
  52+ 5F63 CA 91 5F    >                        jp      z,SkipInputHandlers
  53+ 5F66                                      JumpIfMemTrue TextInputMode, SkipInputHandlers                  ; in input mode all keys are processed by input
  53+ 5F66 3A 8A 80    >                        ld      a,(TextInputMode)
  53+ 5F69 A7          >                        and     a
  53+ 5F6A CA 91 5F    >                        jp      z, SkipInputHandlers
  54+ 5F6D CD C5 6A                             call    ViewKeyTest
  55+ 5F70 CD D8 67                             call    TestPauseMode
  56+ 5F73 3A 5F 80                             ld      a,(GamePaused)
  57+ 5F76 FE 00                                cp      0
  58+ 5F78 C2 22 5F                             jp      nz,MainLoop
  59+ 5F7B                                      MMUSelectKeyboard
  59+ 5F7B ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
  60+ 5F7F CD 53 E3                             call    MovementKeyTest
  61+ 5F82              ;.. Process cursor keys for respective screen if the address is 0 then we skill just skip movement.................................
  62+ 5F82                              ENDIF
  63+ 5F82 3A 90 5F     HandleMovement:         ld      a,(CallCursorRoutine+2)
  64+ 5F85                                      JumpIfAIsZero     TestAreWeDocked
  64+ 5F85 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  64+ 5F86 CA 91 5F    >                        jp	    z, TestAreWeDocked
  65+ 5F89              ;.. Handle displaying correct screen ..............................................................................................
  66+ 5F89 3E 00        HandleBankSelect:       ld      a,$00
  67+ 5F8B                                      MMUSelectScreenA
  67+ 5F8B ED 92 56    >                     nextreg ScreenBankMMU,		a
  68+ 5F8E CD 00 00     CallCursorRoutine:      call    $0000
  69+ 5F91              ;.. Check to see if we are docked as if we are (or are docking.launching then no AI/Ship updates occur.............................
  70+ 5F91              ;.. Also end up here if we have the screen input blocker set
  71+ 5F91              ;DEFUNCT?EngineSounds:       ;HasEngineSoundChanged
  72+ 5F91              ;DEFUNCT?                    ;call    nz,UpdateEngineSound
  73+ 5F91              SkipInputHandlers:
  74+ 5F91              ;.. For Docked flag its - 0 = in free space, FF = Docked, FE transition, FD = Setup open space and transition to not docked
  75+ 5F91              TestAreWeDocked:        JumpIfMemNeNusng DockedFlag, StateNormal, UpdateLoop            ; if if we are in free space do universe updateelse we skip it. As we are also in dock/transition then no models should be updated so we dont; need to draw
  75+ 5F91 3A 5E 80    >                        ld  a,(DockedFlag)
  75+ 5F94 FE 00       >                        cp  StateNormal
  75+ 5F96 C2 C8 60    >                        jp  nz,UpdateLoop
  76+ 5F99                              IFDEF MAINLOOP_EVENTHANDLER
  77+ 5F99 ~            .UpdateEventCounter:    ld      hl,EventCounter                                         ; evnery 256 cycles we do a trigger test
  78+ 5F99 ~                                    dec     (hl)
  79+ 5F99 ~            .ProcessEvent:          call    z,LoopEventTriggered
  80+ 5F99                              ENDIF
  81+ 5F99                              IFDEF MAINLOOP_RECHARGE
  82+ 5F99 3A 67 80     .ProcessRecharge:       ld      a,(EventCounter)
  83+ 5F9C E6 07                                and     7
  84+ 5F9E CC D7 82                             call    z, RechargeShip
  85+ 5FA1                              ENDIF
  86+ 5FA1                              IFDEF MAINLOOP_LAUNCHMISSILE
  87+ 5FA1 ~            .PlayerMissileLaunch:   AnyMissilesLeft
  88+ 5FA1 ~                                    jr      z,.NoMissiles                                           ; just in case last one gets destroyed
  89+ 5FA1 ~                                    IsMissileLaunchFlagged
  90+ 5FA1 ~                                    call    z,  LaunchPlayerMissile
  91+ 5FA1 ~            .NoMissiles
  92+ 5FA1                              ENDIF
  93+ 5FA1              ;.. If we get here then we are in game running mode regardless of which screen we are on, so update AI.............................
  94+ 5FA1              ;.. we do one universe slot each loop update ......................................................................................
  95+ 5FA1              ;.. First update Sun...............................................................................................................
  96+ 5FA1                              IFDEF MAINLOOP_WARP_ENABLED
  97+ 5FA1              ;... Warp or in system jump thsi moves everything by 1 on the high (sign) byte away or towards ship based on their z axis only
  98+ 5FA1              ;... its not a true move in the right direction, more a z axis warp
  99+ 5FA1              ProcessWarp:            JumpIfMemFalse  WarpPressed, .NoWarp
  99+ 5FA1 3A 8D 80    >                        ld      a,(WarpPressed)
  99+ 5FA4 A7          >                        and     a
  99+ 5FA5 C2 36 60    >                        jp      nz, .NoWarp
 100+ 5FA8              .WarpIsPressed:         SetMemFalse     WarpPressed                               ; clear and acknowlege
 100+ 5FA8 3E FF       >                        ld      a,$FF
 100+ 5FAA 32 8D 80    >                        ld      (WarpPressed),a
 101+ 5FAD                                      JumpIfMemZero   WarpCooldown, .WarpDriveCool
 101+ 5FAD 3A 66 80    >                        ld  a,(WarpCooldown)
 101+ 5FB0 A7          >                        and a
 101+ 5FB1 CA B7 5F    >                        jp  z,.WarpDriveCool
 102+ 5FB4                                      DISPLAY "TODO Need logic for in system jump drive malfunction"
 103+ 5FB4              .JumpDriveHot:          DISPLAY "TODO call bong jump drive hot"
 104+ 5FB4                                      DISPLAY "TODO flash jump drive status icon"
 105+ 5FB4 C3 36 60                             jp      .NoWarp
 106+ 5FB7              .WarpDriveCool:         JumpIfMemFalse    SpaceStationSafeZone, .NotInSpaceStationRange
 106+ 5FB7 3A 44 7F    >                        ld      a,(SpaceStationSafeZone)
 106+ 5FBA A7          >                        and     a
 106+ 5FBB C2 C1 5F    >                        jp      nz, .NotInSpaceStationRange
 107+ 5FBE              .MassLocked:            DISPLAY "TODO Mass locked by object call bong"
 108+ 5FBE                                      DISPLAY "TODO message mass locked"
 109+ 5FBE                                      DISPLAY "TODO make space station a body just like planet and sun"
 110+ 5FBE C3 36 60                             jp      .NoWarp
 111+ 5FC1 CD B9 83     .NotInSpaceStationRange:call    AreShipsPresent
 112+ 5FC4 30 F8                                jr      nc,     .MassLocked
 113+ 5FC6              .IsPlanetMassLocking:   MMUSelectPlanet                 ; is planet within 256 then mass locked
 113+ 5FC6 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 114+ 5FCA 2A 17 C0                             ld      hl,(P_BnKzhi)
 115+ 5FCD 7C                                   ld      a,h                     ; if z sign is <> 0 then mass locked
 116+ 5FCE E6 7F                                and     $7F                     ; h = abs zsign
 117+ 5FD0 B5                                   or      l                       ; to get to here a must be zero to or with l will give a quick result
 118+ 5FD1 CA BE 5F                             jp      z,     .MassLocked
 119+ 5FD4              .IsSunMassLocking:      MMUSelectSun
 119+ 5FD4 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 120+ 5FD8 2A 17 C0                             ld      hl,(SBnKzhi)
 121+ 5FDB 7C                                   ld      a,h                     ; if z sign is <> 0 then mass locked
 122+ 5FDC E6 7F                                and     $7F                     ; h = abs zsign
 123+ 5FDE B5                                   or      l                       ; to get to here a must be zero to or with l will give a quick result
 124+ 5FDF CA BE 5F                             jp      z,     .MassLocked
 125+ 5FE2                          IFDEF SIMPLEWARP
 126+ 5FE2 2A 17 C0                             ld      hl,(P_BnKzhi)           ; z hi,sign must be > 0 else we are mass locked so can't hit here
 127+ 5FE5                                      DecHLSigned
 127+ 5FE5 CB 7C       >                    bit         7,h
 127+ 5FE7 C2 F3 5F    >                    jp          nz,.NegativeDec
 127+ 5FEA 7C          >.IsHLZero:          ld          a,h                 ; if its zero it becomes negative
 127+ 5FEB B5          >                    or          l
 127+ 5FEC CA FD 5F    >                    jp          z,.HLZero
 127+ 5FEF 2B          >.PositiveDec:       dec         hl
 127+ 5FF0 C3 00 60    >                    jp          .Done
 127+ 5FF3 7C          >.NegativeDec:       ld          a,h
 127+ 5FF4 E6 7F       >                    and         $7F
 127+ 5FF6 67          >                    ld          h,a
 127+ 5FF7 23          >                    inc         hl                  ; if its already negative then add 1 to make it further
 127+ 5FF8 CB FC       >                    set         7,h
 127+ 5FFA C3 00 60    >                    jp          .Done
 127+ 5FFD 21 01 80    >.HLZero:            ld          hl,$8001
 127+ 6000             >.Done:
 128+ 6000 22 17 C0                             ld      (P_BnKzhi),hl
 129+ 6003 2A 17 C0                             ld      hl,(SBnKzhi)           ; z hi,sign must be > 0 else we are mass locked so can't hit here
 130+ 6006                                      DecHLSigned
 130+ 6006 CB 7C       >                    bit         7,h
 130+ 6008 C2 14 60    >                    jp          nz,.NegativeDec
 130+ 600B 7C          >.IsHLZero:          ld          a,h                 ; if its zero it becomes negative
 130+ 600C B5          >                    or          l
 130+ 600D CA 1E 60    >                    jp          z,.HLZero
 130+ 6010 2B          >.PositiveDec:       dec         hl
 130+ 6011 C3 21 60    >                    jp          .Done
 130+ 6014 7C          >.NegativeDec:       ld          a,h
 130+ 6015 E6 7F       >                    and         $7F
 130+ 6017 67          >                    ld          h,a
 130+ 6018 23          >                    inc         hl                  ; if its already negative then add 1 to make it further
 130+ 6019 CB FC       >                    set         7,h
 130+ 601B C3 21 60    >                    jp          .Done
 130+ 601E 21 01 80    >.HLZero:            ld          hl,$8001
 130+ 6021             >.Done:
 131+ 6021 22 17 C0                             ld      (SBnKzhi),hl
 132+ 6024                          ELSE
 133+ 6024 ~            .NotCorrectFacing:      ;       call bong, align with body
 134+ 6024 ~                                    jp      .NoWarp
 135+ 6024 ~            .JumpToPlanetCheck:     ld      a,(P_BnKzhi)
 136+ 6024 ~                                    JumpIfAGTENusng  2, .PlanetRangeOK
 137+ 6024 ~                                    ld      a,(P_BnKyhi)
 138+ 6024 ~                                    JumpIfAGTENusng  2, .PlanetRangeOK
 139+ 6024 ~                                    ld      a,(P_BnKxhi)
 140+ 6024 ~                                    JumpIfAGTENusng  2, .PlanetRangeOK
 141+ 6024 ~                                    jp      .MassLocked
 142+ 6024 ~            .PlanetRangeOK:         call    WarpPlanetCloser
 143+ 6024 ~                                    MMUSelectSun
 144+ 6024 ~                                    call    WarpSunFurther
 145+ 6024 ~                                    jp      .MoveJunk
 146+ 6024 ~            .JumpToSunCheck:        ld      a,(SBnKzsgn)
 147+ 6024 ~                                    ld      hl,SBnKxsgn
 148+ 6024 ~                                    or      (hl)
 149+ 6024 ~                                    ld      hl,SBnKysgn
 150+ 6024 ~                                    or      (hl)
 151+ 6024 ~                                    and     SignMask8Bit
 152+ 6024 ~                                    JumpIfAGTENusng  2, .SunRangeOK
 153+ 6024 ~                                    jp      .MassLocked
 154+ 6024 ~            .SunRangeOK:            call    WarpSunCloser
 155+ 6024 ~                                    MMUSelectPlanet
 156+ 6024 ~                                    call    WarpPlanetFurther
 157+ 6024                          ENDIF
 158+ 6024 CD 74 83     .MoveJunk:              call    ClearJunk;  call    WarpJunk - as it will move sign bit hi then all junk will be lost
 159+ 6027 3E 5A                                ld      a,WarpCoolDownPeriod
 160+ 6029 32 66 80                             ld      (WarpCooldown),a
 161+ 602C                                      MMUSelectLayer1
 161+ 602C ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 162+ 6030 CD 06 62                             call    WarpSFX             ; Do the visual SFX based on facing
 163+ 6033 C3 3A 60                             jp      .DoneWarp
 164+ 6036              .NoWarp:                MMUSelectLayer1
 164+ 6036 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 165+ 603A              .DoneWarp:
 166+ 603A                              ENDIF
 167+ 603A 3E 00        UpdateShipsControl:     ld      a,0
 168+ 603C A7                                   and     a
 169+ 603D                                      IFDEF MAINLOOP_UPDATEUNIVERSE
 170+ 603D CC 4B 64     .UpdateShips:               call    z, UpdateUniverseObjects
 171+ 6040                                      ENDIF
 172+ 6040                                      JumpIfMemNeNusng ScreenTransitionForced, $FF, BruteForceChange  ; if we docked then a transition would have been forced
 172+ 6040 3A CA 69    >                        ld  a,(ScreenTransitionForced)
 172+ 6043 FE FF       >                        cp  $FF
 172+ 6045 C2 0B 63    >                        jp  nz,BruteForceChange
 173+ 6048 3E 00        CheckIfViewUpdate:      ld      a,$00                                                   ; if this is set to a view number then we process a view
 174+ 604A                                      JumpIfAIsZero  UpdateLoop                                       ; This will change as more screens are added TODO
 174+ 604A A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 174+ 604B CA C8 60    >                        jp	    z, UpdateLoop
 175+ 604E              ;..Processing a view...............................................................................................................
 176+ 604E              ;..Display any message ............................................................................................................
 177+ 604E              .CheckHyperspaceMessage:AnyHyperSpaceMacro .HandleMessages
 177+ 604E 2A 64 80    >                        ld      hl,(InnerHyperCount)
 177+ 6051 7C          >                        ld      a,h
 177+ 6052 B5          >                        or      l
 177+ 6053 28 03       >                        jr      z, .HandleMessages
 178+ 6055 CD 58 75                             call    HyperSpaceMessage
 179+ 6058              .HandleMessages:        AnyMessagesMacro  .NoMessages
 179+ 6058 3A BB 7D    >                        ld      a, (MessageCount)
 179+ 605B A7          >                        and     a
 179+ 605C 28 06       >                        jr      z, .NoMessages
 180+ 605E CD 3A 75                             call    DisplayCurrentMessage
 181+ 6061 CD 19 75                             call    UpdateMessageTimer
 182+ 6064
 183+ 6064              .NoMessages:            MMUSelectLayer2
 183+ 6064 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 184+ 6068 21 88 80     CheckConsoleReDraw:     ld      hl,ConsoleRefreshCounter
 185+ 606B 35                                   dec     (hl)
 186+ 606C CA 7C 60                             jp      z,.ConsoleDrawBuffer1                                   ; when it hits 0 then frame 1 of console is drawm
 187+ 606F FA 7A 60                             jp      m,.ConsoleDrawBuffer2                                   ; need top also do next frame for double buffering
 188+ 6072              .ConsoleNotDraw:        SetMemFalse ConsoleRedrawFlag
 188+ 6072 3E FF       >                        ld      a,$FF
 188+ 6074 32 89 80    >                        ld      (ConsoleRedrawFlag),a
 189+ 6077 C3 86 60                             jp      .JustViewPortCLS
 190+ 607A 36 05        .ConsoleDrawBuffer2:    ld      (hl),ConsoleRefreshInterval
 191+ 607C              .ConsoleDrawBuffer1:    SetMemTrue ConsoleRedrawFlag
 191+ 607C AF          >                        xor     a
 191+ 607D 32 89 80    >                        ld      (ConsoleRedrawFlag),a
 192+ 6080 CD 0E E2                             call    l2_cls                                                  ; Clear layer 2 for graphics
 193+ 6083 C3 89 60                             jp      .ViewPortCLSDone
 194+ 6086 CD 8E E1     .JustViewPortCLS:       call   l2_cls_upper_two_thirds
 195+ 6089              .ViewPortCLSDone:
 196+ 6089                                      MMUSelectLayer1
 196+ 6089 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 197+ 608D              .UpdateSun:
 198+ 608D                                      IFDEF   MAINLOOP_SUN_RENDER
 199+ 608D                                          MMUSelectSun
 199+ 608D ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 200+ 6091              ;.DEBUGFORCE:
 201+ 6091                                     ;ld          hl,$0081
 202+ 6091                                     ;ld          (SBnKxlo),hl
 203+ 6091                                     ;ld          hl,$0001
 204+ 6091                                     ;ld          (SBnKylo),hl
 205+ 6091                                     ; ld          hl,$0160
 206+ 6091                                     ; ld          (SBnKzlo),hl
 207+ 6091                                      ;ld          a,$80
 208+ 6091                                      ;ld          (SBnKxsgn),a
 209+ 6091                                      ;ld          (SBnKysgn),a
 210+ 6091                                     ; ZeroA
 211+ 6091                                    ;  ld          (SBnKzsgn),a
 212+ 6091 CD 9D C7                                 call    SunUpdateAndRender
 213+ 6094                                      ENDIF
 214+ 6094              .UpdatePlanet:          IFDEF   MAINLOOP_PLANET_RENDER
 215+ 6094                                          ;break
 216+ 6094                                          MMUSelectPlanet
 216+ 6094 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 217+ 6098 CD EE CA                                 call    PlanetUpdateAndRender
 218+ 609B                                      ENDIF
 219+ 609B              ;..Later this will be done via self modifying code to load correct stars routine for view..........................................
 220+ 609B 3E DF        DrawDustForwards:       ld     a,$DF
 221+ 609D 32 B5 E2                             ld     (line_gfx_colour),a
 222+ 60A0              DustUpdateBank:         MMUSelectViewFront                                              ; This needs to be self modifying
 222+ 60A0 ED 91 56 3E >                     nextreg ScreenBankMMU,		BankFrontView
 223+ 60A4                                      IFDEF   MAINLOOP_DUST_RENDER
 224+ 60A4 CD 43 7B     DustUpdateRoutine:          call   DustForward                                              ; This needs to be self modifying
 225+ 60A7                                      ENDIF
 226+ 60A7              ;ProcessSun:             call    DrawForwardSun
 227+ 60A7                                      IFDEF   LASER_V2
 228+ 60A7              ProcessLaser:               MMUSelectSpriteBank
 228+ 60A7 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 229+ 60AB                                          JumpIfMemFalse LaserBeamOn, .NoLaser
 229+ 60AB 3A 3A 81    >                        ld      a,(LaserBeamOn)
 229+ 60AE A7          >                        and     a
 229+ 60AF C2 BB 60    >                        jp      nz, .NoLaser
 230+ 60B2 CD 3E E3     .FireLaser:                 call    sprite_laser_show
 231+ 60B5 CD 9B 81                                 call    LaserDrainSystems
 232+ 60B8 C3 BE 60                                 jp      ProcessPlanet
 233+ 60BB CD DC E4     .NoLaser:                   call    sprite_laser_hide
 234+ 60BE                                      ELSE
 235+ 60BE ~            ProcessLaser:               ld      a,(CurrLaserPulseRate)
 236+ 60BE ~                                        JumpIfAIsNotZero .CheckForPulse
 237+ 60BE ~                                        JumpIfMemFalse FireLaserPressed, .NoLaser
 238+ 60BE ~                                        jp      .FireLaser
 239+ 60BE ~            .CheckForPulse:             JumpIfMemZero CurrLaserPulseOnCount, .NoLaser
 240+ 60BE ~            .FireLaser:                 MMUSelectSpriteBank
 241+ 60BE ~                                        call    sprite_laser_show
 242+ 60BE ~                                        call    LaserDrainSystems
 243+ 60BE ~                                        jp      ProcessPlanet
 244+ 60BE ~            .NoLaser:                   MMUSelectSpriteBank
 245+ 60BE ~                                        call    sprite_laser_hide
 246+ 60BE                                      ENDIF
 247+ 60BE              ProcessPlanet:
 248+ 60BE                                      IFDEF   MAINLOOP_MODEL_RENDER
 249+ 60BE CD 43 66     ProcessShipModels:          call   DrawForwardShips                                     ; Draw all ships (this may need to be self modifying)
 250+ 60C1                                      ENDIF
 251+ 60C1                                      ; add in loop so we only update every 4 frames, need to change CLS logic too,
 252+ 60C1                                      ; every 4 frames needs to do 2 updates so updates both copies of buffer
 253+ 60C1                                      ; now will CLS bottom thrid
 254+ 60C1                                      CallIfMemTrue ConsoleRedrawFlag, UpdateConsole
 254+ 60C1 3A 89 80    >                        ld      a,(ConsoleRedrawFlag)
 254+ 60C4 A7          >                        and     a
 254+ 60C5 CC 27 6D    >                        call    z, UpdateConsole
 255+ 60C8              ;..If we were not in views then we were in display screens/menus...................................................................
 256+ 60C8              UpdateLoop:             JumpIfMemZero ScreenLoopJP+1,LoopRepeatPoint
 256+ 60C8 3A D5 60    >                        ld  a,(ScreenLoopJP+1)
 256+ 60CB A7          >                        and a
 256+ 60CC CA D7 60    >                        jp  z,LoopRepeatPoint
 257+ 60CF              ;..This is the screen update routine for menus.....................................................................................
 258+ 60CF              ;.. Also used by transition routines
 259+ 60CF 3E 00        ScreenLoopBank:         ld      a,$0
 260+ 60D1                                      MMUSelectScreenA
 260+ 60D1 ED 92 56    >                     nextreg ScreenBankMMU,		a
 261+ 60D4 CD 00 00     ScreenLoopJP:           call    $0000
 262+ 60D7 3A 5E 80     LoopRepeatPoint:        ld      a,(DockedFlag)
 263+ 60DA                                      ; Could optimise this to a jp hl lookup table
 264+ 60DA              HandleLaunched:         JumpIfAEqNusng  StateCompletedLaunch,   WeHaveCompletedLaunch
 264+ 60DA FE FD       >                        cp     StateCompletedLaunch
 264+ 60DC CA F6 60    >                        jp      z,WeHaveCompletedLaunch
 265+ 60DF                                      JumpIfAEqNusng  StateInTransition,      WeAreInTransition
 265+ 60DF FE FE       >                        cp     StateInTransition
 265+ 60E1 CA F0 62    >                        jp      z,WeAreInTransition
 266+ 60E4                                      JumpIfAEqNusng  StateHJumping,          WeAreHJumping
 266+ 60E4 FE FC       >                        cp     StateHJumping
 266+ 60E6 CA 33 61    >                        jp      z,WeAreHJumping
 267+ 60E9                                      JumpIfAEqNusng  StateHEntering,         WeAreHEntering
 267+ 60E9 FE FB       >                        cp     StateHEntering
 267+ 60EB CA 41 61    >                        jp      z,WeAreHEntering
 268+ 60EE                                      JumpIfAEqNusng  StateCompletedHJump,    WeHaveCompletedHJump
 268+ 60EE FE FA       >                        cp     StateCompletedHJump
 268+ 60F0 CA D6 61    >                        jp      z,WeHaveCompletedHJump
 269+ 60F3 C3 F0 62                             jp      DoubleBufferCheck
 270+ 60F6              ;-- Player launched from station, moved routines from eliteMext.asm to remove call and simplify code
 271+ 60F6 CD A4 61     WeHaveCompletedLaunch:  call    InitialiseLocalUniverse             ; intiailise local bubble and set us as in flight
 272+ 60F9              .GenerateSun:           MMUSelectSun
 272+ 60F9 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 273+ 60FD CD EF C2                             call    CreateSunLaunched                   ; create the local sun and set position based on seed
 274+ 6100              .GeneratePlanet:        MMUSelectPlanet
 274+ 6100 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 275+ 6104 CD 47 C6                             call    CreatePlanetLaunched
 276+ 6107 CD 2D 83                             call    ClearUnivSlotList                   ; slot list is clear to 0 is gauranteed next slot
 277+ 610A 3E 0D        .GenerateSpaceStation:  ld      a,CoriloisStation
 278+ 610C                                      MMUSelectSpaceStation                       ; Switch to space station (Universe bank 0)
 278+ 610C ED 91 56 46 >                     nextreg SpaceStationMMU,         BankSpaceStationData
 279+ 6110 CD A5 C7                             call    UnivSelSpaceStationType
 280+ 6113 FD 26 00                             ld      iyh,0
 281+ 6116 FD 6F                                ld      iyl,a
 282+ 6118 CD B6 62                             call    SpawnSpaceStation                   ; Sets position that we have to overwrite in next step
 283+ 611B CD 4F C8     .BuiltStation:          call    UnivSpawnSpaceStationLaunched       ; replaced with the 0,0,-10000 version ResetStationLaunch
 284+ 611E 3E 00        .NowInFlight:           ld      a,StateNormal
 285+ 6120 32 5E 80                             ld      (DockedFlag),a
 286+ 6123                                      ForceTransition ScreenFront
 286+ 6123 3E 09       >                        ld      a,ScreenFront
 286+ 6125 32 CA 69    >                        ld      (ScreenTransitionForced), a
 287+ 6128 3E FF                                ld      a,$FF
 288+ 612A 32 06 B1                             ld      (LAST_DELTA),a                      ; force sound update in interrupt
 289+ 612D CD C5 81                             call    ResetPlayerShip
 290+ 6130 C3 F0 62                             jp      DoubleBufferCheck                   ; Then move through to the rest of the loop
 291+ 6133 CD 4D C2     WeAreHJumping:          call    hyperspace_Lightning
 292+ 6136 DA F0 62                             jp      c,DoubleBufferCheck
 293+ 6139 3E FB                                ld      a,StateHEntering
 294+ 613B 32 5E 80                             ld      (DockedFlag),a
 295+ 613E C3 F0 62                             jp      DoubleBufferCheck
 296+ 6141 3E FA        WeAreHEntering:         ld      a,StateCompletedHJump
 297+ 6143 32 5E 80                             ld      (DockedFlag),a
 298+ 6146 C3 F0 62                             jp      DoubleBufferCheck
 299+ 6149
 300+ 6149              ;--
 301+ 6149              LaunchedFromStation:
 302+ 6149 C9                                   ret
 303+ 614A              ; laser duration goign below 0 for some reason
 304+ 614A              ; if laser is on
 305+ 614A              ;    if laser duration = master duration - do sfx
 306+ 614A              ;    laser duration ---
 307+ 614A              ;    if laser duration = 0
 308+ 614A              ;          **should set beam off***
 309+ 614A              ;       curr burst count --
 310+ 614A              ;       if busrt count = 0
 311+ 614A              ;          set cooldown to post pulserests
 312+ 614A              ;       else
 313+ 614A              ;          set cooldown to 0
 314+ 614A              ;          pause = pulse off time
 315+ 614A              ;    else
 316+ 614A              ;       return
 317+ 614A              ;  else
 318+ 614A              ;     if burst count <> 0
 319+ 614A              ;        current burst pause --
 320+ 614A              ;        return if not zero
 321+ 614A              ;        set laser beam on
 322+ 614A              ;        return
 323+ 614A              ;      else
 324+ 614A              ;         cooldown-- if not zero
 325+ 614A
 326+ 614A              LaserBeamV2:            JumpIfMemFalse LaserBeamOn, .LaserIsOff                          ; If laser is not on then skip
 326+ 614A 3A 3A 81    >                        ld      a,(LaserBeamOn)
 326+ 614D A7          >                        and     a
 326+ 614E C2 80 61    >                        jp      nz, .LaserIsOff
 327+ 6151 21 37 81     .LaserIsOn:             ld          hl,CurrLaserPulseOnTime
 328+ 6154 3A 3B 81                             ld          a,(CurrLaserDuration)
 329+ 6157 BE                                   cp          (hl)                                                ; if duration just started
 330+ 6158                                      ;call        z, SoundLaserFiring                                ; queue sound
 331+ 6158 3D                                   dec         a
 332+ 6159 32 3B 81                             ld          (CurrLaserDuration),a                               ; if duration is 0
 333+ 615C                                      ;break
 334+ 615C                                      ReturnIfANotZero                                                ; the do the end of pulse
 334+ 615C A7          >                        and     a
 334+ 615D C0          >                        ret     nz
 335+ 615E              .EndOfPulse:            SetMemFalse LaserBeamOn
 335+ 615E 3E FF       >                        ld      a,$FF
 335+ 6160 32 3A 81    >                        ld      (LaserBeamOn),a
 336+ 6163 3A 3F 81                             ld          a,(CurrLaserBurstCount)
 337+ 6166 3D                                   dec         a
 338+ 6167 32 3F 81                             ld          (CurrLaserBurstCount),a                             ; if we have run out of
 339+ 616A                                      JumpIfAIsNotZero    .SkipBurstEnd                               ; pulses then
 339+ 616A A7          >                        and     a
 339+ 616B C2 75 61    >                        jp	    nz,.SkipBurstEnd
 340+ 616E              .EndOfBurst:            ldCopyByte  CurrLaserPulseRest,  CurrentCooldown                ; main cool down
 340+ 616E 3A 39 81    >                        ld       a,(CurrLaserPulseRest)
 340+ 6171 32 3D 81    >                        ld       (CurrentCooldown),a
 341+ 6174 C9                                   ret
 342+ 6175              .SkipBurstEnd:          SetMemZero  CurrentCooldown                                     ; else its just pulse
 342+ 6175 AF          >                        xor     a
 342+ 6176 32 3D 81    >                        ld      (CurrentCooldown),a
 343+ 6179                                      ldCopyByte  CurrLaserPulseOffTime,  CurrentBurstPause           ; cooldown
 343+ 6179 3A 38 81    >                        ld       a,(CurrLaserPulseOffTime)
 343+ 617C 32 3C 81    >                        ld       (CurrentBurstPause),a
 344+ 617F C9           .SkipPulseEnd:          ret
 345+ 6180 3A 3F 81     .LaserIsOff:            ld          a,(CurrLaserBurstCount)
 346+ 6183                                      JumpIfAIsZero .FullCool
 346+ 6183 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 346+ 6184 CA 9A 61    >                        jp	    z, .FullCool
 347+ 6187 3A 3C 81     .BurstCool:             ld          a,(CurrentBurstPause)
 348+ 618A 3D                                   dec         a
 349+ 618B 32 3C 81                             ld          (CurrentBurstPause),a
 350+ 618E C0                                   ret         nz
 351+ 618F                                      SetMemTrue  LaserBeamOn
 351+ 618F AF          >                        xor     a
 351+ 6190 32 3A 81    >                        ld      (LaserBeamOn),a
 352+ 6193                                      ldCopyByte  CurrLaserPulseOnTime, CurrLaserDuration
 352+ 6193 3A 37 81    >                        ld       a,(CurrLaserPulseOnTime)
 352+ 6196 32 3B 81    >                        ld       (CurrLaserDuration),a
 353+ 6199 C9                                   ret
 354+ 619A 3A 3D 81     .FullCool:              ld          a,(CurrentCooldown)
 355+ 619D                                      ReturnIfAIsZero
 355+ 619D A7          >                        and     a
 355+ 619E C8          >                        ret     z
 356+ 619F 3D                                   dec         a
 357+ 61A0 32 3D 81                             ld          (CurrentCooldown),a
 358+ 61A3 C9                                   ret
 359+ 61A4
 360+ 61A4              ;;called from LaunchedFromStation  & WeHaveCompletedHJump to re-seed the system
 361+ 61A4              ;-- Get seed for galaxy system and copy into working vars for system and galaxy, correct post jump fuel, force to front view, set extra vessels to spawn to 0 and mark as undocked
 362+ 61A4 3A 2B 7F     InitialiseLocalUniverse:ld      a,(Galaxy)                      ; DEBUG as galaxy n is not working
 363+ 61A7                                      MMUSelectGalaxyA
 363+ 61A7 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 364+ 61AA 2A 40 7F                             ld      hl,(TargetSystemX)
 365+ 61AD 22 3E 7F                             ld      (PresentSystemX),hl
 366+ 61B0 44                                   ld      b,h
 367+ 61B1 4D                                   ld      c,l
 368+ 61B2                                      CorrectPostJumpFuel
 368+ 61B2 3A 00 84    >                        ld      a,(Fuel)
 368+ 61B5 21 60 7F    >                        ld      hl,Distance
 368+ 61B8 96          >                        sub     a,(hl)
 368+ 61B9 32 00 84    >                        ld      (Fuel),a
 369+ 61BC                                      ForceTransition ScreenFront            ; This will also trigger stars
 369+ 61BC 3E 09       >                        ld      a,ScreenFront
 369+ 61BE 32 CA 69    >                        ld      (ScreenTransitionForced), a
 370+ 61C1 3E 00                                ld      a,$00
 371+ 61C3 32 45 7F                             ld      (ExtraVesselsCounter),a
 372+ 61C6                                      DISPLAY "TODO: Check callers as they may be doign this as a duplicate"
 373+ 61C6 32 5E 80                             ld      (DockedFlag),a
 374+ 61C9 CD 6F F8                             call    GalaxyGenerateDesc             ; bc  holds new system to generate system
 375+ 61CC CD B5 84                             call    copy_working_to_system         ; and propogate copies of seeds
 376+ 61CF CD AD 84                             call    copy_working_to_galaxy         ; .
 377+ 61D2 CD 9B 85                             call    get_planet_data_working_seed   ; sort out system data
 378+ 61D5 C9                                   ret
 379+ 61D6
 380+ 61D6
 381+ 61D6              ; to create planet position
 382+ 61D6              ;       take seed 2 AND %00000011 + 3 + carry and store in z sign
 383+ 61D6              ;       take result and divide by 2 then store in x and y sign
 384+ 61D6              ;
 385+ 61D6              ;       take seed 4 AND %00000111 OR %10000001 and store in z sign
 386+ 61D6              ;       take seed 6 AND %00000011 and store in x sign and y sign
 387+ 61D6              ;       set pitch and roll to 0
 388+ 61D6              ;
 389+ 61D6              ;
 390+ 61D6              ;
 391+ 61D6              ; --- At the end of a hyperspace jump we have to reset compass, market universe sun and planets etc
 392+ 61D6 CD A4 61     WeHaveCompletedHJump:   call    InitialiseLocalUniverse
 393+ 61D9                                      ;call    GetDigramGalaxySeed           ; .
 394+ 61D9                                      MMUSelectStockTable                    ; .
 394+ 61D9 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 395+ 61DD CD AA E0                             call    generate_stock_market          ; generate new prices
 396+ 61E0 CD 2D 83                             call    ClearUnivSlotList              ; clear out any ships
 397+ 61E3 CD C5 81                             call    ResetPlayerShip
 398+ 61E6                                      HalveFugitiveStatus                    ; halves status and brings bit into carry
 398+ 61E6 21 4D 7F    >                        ld      hl,FugitiveInnocentStatus
 398+ 61E9 CB 3E       >                        srl     (hl)
 399+ 61EB                                      MMUSelectSun
 399+ 61EB ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 400+ 61EF CD CB C2                             call    CreateSun                      ; create the local sun and set position based on seed
 401+ 61F2                                      MMUSelectPlanet
 401+ 61F2 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 402+ 61F6 CD F4 C5                             call    CreatePlanet
 403+ 61F9                          DISPLAY "TODO:  GENEATE SUB AND PLANET POS"
 404+ 61F9              ;TODO                        call    generateSunAndPlanetPos        ; uses current carry state too
 405+ 61F9              ;TODO.CreateSun:             call    SetSunSlot
 406+ 61F9              ; PROBABLY NOT NEEDED NOW                      MMUSelectShipBank1
 407+ 61F9              ; PROBABLY NOT NEEDED NOW                      call    GetShipBankId
 408+ 61F9              ;;SELECT CORRECT BANK                        MMUSelectUniverseN 0
 409+ 61F9              ;;TODO                        call    CopyBodyToUniverse
 410+ 61F9              ;;TODO                        call    CreateSun
 411+ 61F9              ;;TODOCreatePlanet:          call    SetPlanetSlot
 412+ 61F9              ;;TODO                       MMUSelectShipBank1
 413+ 61F9              ;;TODO                    eliteb       call    GetShipBankId
 414+ 61F9              ;;TODO                       MMUSelectUniverseBankN 1
 415+ 61F9              ;;TODO                       call    CopyBodyToUniverse
 416+ 61F9                                      SetMemFalse DockedFlag
 416+ 61F9 3E FF       >                        ld      a,$FF
 416+ 61FB 32 5E 80    >                        ld      (DockedFlag),a
 417+ 61FE 3E FF        .TriggerEngineSound:    ld      a,$FF
 418+ 6200 32 06 B1                             ld      (LAST_DELTA),a              ; force sound update in interrupt
 419+ 6203 C3 F0 62                             jp  DoubleBufferCheck
 420+ 6206
 421+ 6206
 422+ 6206 3A 11 62     WarpSFX:                ld      a,(WarpRoutineAddr+1)
 423+ 6209 A7                                   and     a
 424+ 620A C8                                   ret     z
 425+ 620B 3E 00        WarpMMUBank:            ld      a,$00
 426+ 620D                                      MMUSelectScreenA
 426+ 620D ED 92 56    >                     nextreg ScreenBankMMU,		a
 427+ 6210 CD 00 00     WarpRoutineAddr:        call    0000
 428+ 6213 C9                                   ret
 429+ 6214
 430+ 6214              ;--- From here is the new simplified logic. This uses the current spawn table
 431+ 6214              ;--- Events such as jumping to a system, ending up in which space,
 432+ 6214              ;--- special mission events
 433+ 6214              ;--- We will need actually two tables, 1 for in station range 1 for not else flipping tables on the Z boundary
 434+ 6214              ;--- Would be difficult
 435+ 6214              ;--- load the table to work from. This then leaves all teh logic configurable
 436+ 6214              LoopEventTriggered:     ; for now just do spawn
 437+ 6214 C3 17 62                             jp      SpawnEvent
 438+ 6217                                      ; implicit ret from jp
 439+ 6217
 440+ 6217                  DEFINE  SPAWN_TABLE_SELECT   1
 441+ 6217                  DEFINE  SPAWN_GENERATE_COUNT 1
 442+ 6217                  DEFINE  SPAWN_LOOP           1
 443+ 6217              ;    DEFINE  SPAWN_IGNORE         1
 444+ 6217
 445+ 6217
 446+ 6217              SpawnEvent:             IFDEF   SPAWN_IGNORE
 447+ 6217 ~                                        ret
 448+ 6217                                      ENDIF
 449+ 6217 CD DE 83                             call    FindNextFreeSlotInC                 ; c= slot number, if we cant find a slot
 450+ 621A D8                                   ret     c                                   ; then may as well just skip routine
 451+ 621B                                      IFDEF   MAINLOOP_SPAWN_ALWAYS_OUTSIDE_SAFEZONE
 452+ 621B                                          SetMemFalse SpaceStationSafeZone
 452+ 621B 3E FF       >                        ld      a,$FF
 452+ 621D 32 44 7F    >                        ld      (SpaceStationSafeZone),a
 453+ 6220                                      ENDIF
 454+ 6220 FD 61        .SpawnIsPossible:       ld      iyh,c                               ; save slot free in iyh
 455+ 6222 CD 88 63                             call    SelectSpawnTable                    ; ix = correct row in spawn table
 456+ 6225 CD 70 63     .GetSpawnDetails:       call    SelectSpawnTableData                ; get table data,
 457+ 6228 78           .CheckIfInvalid:        ld      a,b                                 ; if b was 0
 458+ 6229 B7                                   or      a                                   ; then its an invalid
 459+ 622A C8                                   ret     z                                   ; ship or just not to spawn
 460+ 622B E5 C5        .SetNbrToSpawn:         push    hl,,bc                              ; b will be set to the
 461+ 622D CD 37 84                             call    doRandom                            ; actual number to spawn
 462+ 6230 C1                                   pop     bc                                  ; a is not really needed now as de and hl hold
 463+ 6231 A0                                   and     b                                   ; addresses for table and handler code
 464+ 6232 F6 01                                or      1                                   ; at least 1
 465+ 6234 47                                   ld      b,a                                 ; so b = the number to spawn
 466+ 6235 E1                                   pop     hl                                  ; get back address of spawn handler
 467+ 6236              ; b = nbr to spawn, hl = handler for spawn, de = lookup table of ship type to spawn
 468+ 6236 C5 D5 E5     .SpawnLoop:             push    bc,,de,,hl                          ; save loop counter lookup table and handler
 469+ 6239 EB                                   ex      de,hl                               ; hl = lookup spawn type table, de = handler for spawn
 470+ 623A CD A7 63                             call    SelectSpawnType                     ; a = shipId to Spawn
 471+ 623D CD 46 62                             call    .SpawnAShipTypeA                    ; if we get a carry then stop spawning
 472+ 6240 E1 D1 C1                             pop     bc,,de,,hl                          ; get back values
 473+ 6243 10 F1                                djnz    .SpawnLoop                          ; repeat until B = 0
 474+ 6245 C9                                   ret                                         ; we are done
 475+ 6246 EB           .SpawnAShipTypeA        ex      de,hl                               ; hl= handler to spawn, a = ship to spawn
 476+ 6247 E9                                   jp      hl                                  ; we call this so we can do a dynamic jp
 477+ 6248                                      ; implicit ret from jp                      ; SpawnShipTypeA handles free slot tests etc
 478+ 6248
 479+ 6248
 480+ 6248
 481+ 6248 00           EnemyShipBank:          DS 1
 482+ 6249 00 00 00...  EnemyMissileLaunchPos:  DS 3 * 3
 483+ 6252 00 00 00...  EnemyMissileLaunchMat:  DS 2 * 3
 484+ 6258
 485+ 6258
 486+ 6258              LaunchEnemyMissile:     ; break
 487+ 6258 3A 40 C0                             ld      a,(UbnKShipUnivBankNbr)             ; save current bank number
 488+ 625B 32 48 62                             ld      (EnemyShipBank),a                   ;
 489+ 625E 3E 05                                ld      a,5
 490+ 6260 CD 42 A5                             call    CalcLaunchOffset
 491+ 6263 3E 00                                ld      a,0                                 ; TODO For now only 1 missile type
 492+ 6265                                      GetByteAInTable ShipMissileTable            ; swap in missile data
 492+ 6265 21 25 77    >                    ld          hl,ShipMissileTable
 492+ 6268 ED 31       >                    add         hl,a
 492+ 626A 7E          >                    ld          a,(hl)
 493+ 626B CD AE 62                             call    SpawnShipTypeA                      ; spawn the ship
 494+ 626E D8                                   ret     c                                   ; return if failed
 495+ 626F CD AF C6                             call    UnivSetEnemyMissile                 ; as per player but sets as angry
 496+ 6272 3E FF                                ld      a,$FF
 497+ 6274 32 45 C0                             ld      (UBnKMissileTarget),a               ; set as definte player as target
 498+ 6277 3A 48 62                             ld      a,(EnemyShipBank)                   ; Direct restore current bank
 499+ 627A                                      MMUSelectUnivBankA                          ;
 499+ 627A ED 92 56    >                     nextreg UniverseMMU,       a
 500+ 627D 21 5C C0                             ld      hl, UBnKMissilesLeft                ; reduce enemy missile count
 501+ 6280 35                                   dec     (hl)
 502+ 6281 C9                                   ret
 503+ 6282
 504+ 6282 3E 0A        LaunchEnemyFighter:     ld      a,10
 505+ 6284                                      ;break;call    CopyUBnKtoLaunchParameters
 506+ 6284                                      ;copymatrix,rot and speed
 507+ 6284 C9                                   ret
 508+ 6285
 509+ 6285              LaunchPlayerMissile:   ; break
 510+ 6285 CD DE 83                             call    FindNextFreeSlotInC                 ; Check if we have a slot free
 511+ 6288 38 1E                                jr      c,.MissileMissFire                  ; give a miss fire indicator as we have no slots
 512+ 628A                          DISPLAY "TODO: FOR NOW ONLY 1 MISSILE TYPE"
 513+ 628A 3E 00        .LaunchGood:            ld      a,0                                 ; TODO For now only 1 missile type
 514+ 628C                                      GetByteAInTable ShipMissileTable            ; swap in missile data
 514+ 628C 21 25 77    >                    ld          hl,ShipMissileTable
 514+ 628F ED 31       >                    add         hl,a
 514+ 6291 7E          >                    ld          a,(hl)
 515+ 6292 CD AE 62                             call    SpawnShipTypeA                      ; spawn the ship
 516+ 6295 3A 22 81                             ld      a,(MissileTargettingFlag)           ; Get target from computer
 517+ 6298 32 45 C0                             ld      (UBnKMissileTarget),a               ; load target Data
 518+ 629B CD F7 C6                             call    UnivSetPlayerMissile                ; .
 519+ 629E                                      ClearMissileTargetting                      ; reset targetting
 519+ 629E 3E FF       >                        ld      a,StageMissileNotTargeting
 519+ 62A0 32 22 81    >                        ld      (MissileTargettingFlag),a
 520+ 62A3 21 4B 7F                             ld      hl, NbrMissiles
 521+ 62A6 35                                   dec     (hl)
 522+ 62A7                          DISPLAY "TODO: handle removal of missile from inventory and console"
 523+ 62A7 C9                                   ret
 524+ 62A8              .MissileMissFire:       ClearMissileTargetting
 524+ 62A8 3E FF       >                        ld      a,StageMissileNotTargeting
 524+ 62AA 32 22 81    >                        ld      (MissileTargettingFlag),a
 525+ 62AD C9                                   ret ; TODO bing bong noise misfire message
 526+ 62AE
 527+ 62AE                                      include "./SpawnShipTypeA.asm"
# file opened: ./GameEngine/./SpawnShipTypeA.asm
   1++62AE              ;.. SpawnShipTypeA
   2++62AE              ; IN
   3++62AE              ;  a = ship type to create (equates to the ship model)
   4++62AE              ; OUT
   5++62AE              ;  b = ship class
   6++62AE              ;  a = iyh = slot number
   7++62AE              SpawnShipTypeA:         ;break
   8++62AE FD 6F                                ld      iyl,a                               ; save ship type in iyh
   9++62B0 CD DE 83                             call    FindNextFreeSlotInC                 ; c = slot number to use
  10++62B3 D8                                   ret     c                                   ; if carry flag was set then no spare slots
  11++62B4 FD 61                                ld      iyh,c                               ; preserve slot number for now
  12++62B6              ; Entry point where iyl = space station type, iyh = bank 0
  13++62B6              SpawnSpaceStation:      MMUSelectShipBank1                          ; select bank 1
  13++62B6 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
  14++62BA FD 7C                                ld      a,iyh                               ; A = slot number
  15++62BC FD 45                                ld      b,iyl                               ; b = ship type
  16++62BE CD 44 83                             call    SetSlotAToTypeB                     ; Allocate slot as used
  17++62C1                                      MMUSelectUniverseA                          ; .
  17++62C1 C6 46       >                     add    a,BankUNIVDATA0
  17++62C3 ED 92 56    >                     nextreg UniverseMMU,       a
  18++62C6 FD 7C        .MarkUnivDiags:         ld      a,iyh                               ; mark diagnostics for bank number in memory
  19++62C8 C6 41                                add     "A"                                 ; so fix Universe PB<x> to correct letter
  20++62CA 32 0B C0                             ld      (StartOfUnivN),a                    ; to help debugging
  21++62CD FD 7D                                ld      a,iyl                               ; get ship model type
  22++62CF 32 0E C0                             ld      (StartOfUnivM),a                    ; set debugging for model
  23++62D2 CD 0F E0     .CopyOverShipData:      call    GetShipBankId                       ; find actual memory location of ship model data
  24++62D5                                      MMUSelectShipBankA                          ; by paging in bank a then looking up computed bank for model a
  24++62D5 ED 92 57    >					 nextreg ShipModelMMU,	    a
  25++62D8 78                                   ld      a,b                                 ; b = computed ship id for bank
  26++62D9 CD 6A E0                             call    CopyShipToUniverse                  ; copy all the ship data in to the paged in bank
  27++62DC CD 9D C8                             call    UnivSetSpawnPosition                ; set initial spawn position
  28++62DF CD 56 C9                             call    UnivInitRuntime                     ; Clear runtime data before startup, iy h and l are already set up
  29++62E2 3A 0D C4                             ld      a,(ShipTypeAddr)                    ; get ship type
  30++62E5 32 0F C0                             ld      (StartOfUnivT),a                    ; to help debugging we store type too
  31++62E8 47                                   ld      b,a                                 ; and set the type into slot table
  32++62E9 FD 7C                                ld      a,iyh                               ;
  33++62EB CD 4B 83                             call    SetSlotAToClassB                    ;
  34++62EE                                      ClearCarryFlag                              ; no carry on success
  34++62EE B7          >                        or a
  35++62EF C9                                   ret
  36++62F0
# file closed: ./GameEngine/./SpawnShipTypeA.asm
 528+ 62F0
 529+ 62F0                                      ; reset main loop counters
 530+ 62F0                                      ; from BBC TT18 jump code
 531+ 62F0                                      ; need to set system corrodinates, flush out univere ships etc
 532+ 62F0                                      ; set up new star system and landing location in system
 533+ 62F0                                      ; reset ship speed etc (RES2)
 534+ 62F0                                      ; update legal status, missle indicatrions, planet data block, sun data block (SOLAR)
 535+ 62F0                                      ;   put planet into data blokc 1 of FRIN
 536+ 62F0                                      ;   put sun inot data block (NWWSHIP)
 537+ 62F0                                      ; need to look at in system warp code (WARP) - note we need to -reorg all to code for teh station as that will never be in slot 0
 538+ 62F0
 539+ 62F0              WeAreInTransition:
 540+ 62F0 3E 00        DoubleBufferCheck:      ld      a,00
 541+ 62F2                                      IFDEF DOUBLEBUFFER
 542+ 62F2 FE 00                                    cp      0
 543+ 62F4 CA 03 63                                 jp      z,TestTransition
 544+ 62F7                                          MMUSelectLayer2
 544+ 62F7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 545+ 62FB 3A 02 E0                                 ld     a,(varL2_BUFFER_MODE)
 546+ 62FE FE 00                                    cp     0
 547+ 6300 C4 97 E2                                 call   nz,l2_flip_buffers
 548+ 6303                                      ENDIF
 549+ 6303 3A CA 69     TestTransition:         ld      a,(ScreenTransitionForced)          ; was there a bruite force screen change in any update loop
 550+ 6306 FE FF                                cp      $FF
 551+ 6308 CA 22 5F                             jp      z,MainLoop
 552+ 630B CD 3C 6A     BruteForceChange:       call    SetScreenA
 553+ 630E C3 22 5F                             jp MainLoop
 554+ 6311
 555+ 6311
 556+ 6311              ;......................................................................
 557+ 6311              ; Sound Code
 558+ 6311
 559+ 6311
 560+ 6311
 561+ 6311              ;As speed goes up so does pitch
 562+ 6311
# file closed: ./GameEngine/MainLoop.asm
 818  6311                                      INCLUDE "./GameEngine/SpawnObject.asm"
# file opened: ./GameEngine/SpawnObject.asm
   1+ 6311
   2+ 6311 CD AE 62     SpawnStationHandler:            call    SpawnShipTypeA
   3+ 6314 D8                                           ret     c                                   ; abort if failed
   4+ 6315 C9                                           ret
   5+ 6316
   6+ 6316 CD AE 62     SpawnHermitHandler:             call    SpawnShipTypeA
   7+ 6319 D8                                           ret     c                                   ; abort if failed
   8+ 631A C9                                           ret
   9+ 631B
  10+ 631B CD AE 62     SpawnAsteroidHandler:           call    SpawnShipTypeA
  11+ 631E D8                                           ret     c                                   ; abort if failed
  12+ 631F                                              ;Set random position and vector
  13+ 631F                                              ; if its a hermit jump to that to so special
  14+ 631F
  15+ 631F C9                                           ret
  16+ 6320
  17+ 6320 F5           SpawnTypeJunkHandler:           push    af
  18+ 6321                                              TestRoomForJunk .CanAddJunk
  18+ 6321 3E 03       >                        ld      a,3
  18+ 6323             >                        JumpIfMemTrue  SpaceStationSafeZone, .DoTest
  18+ 6323 3A 44 7F    >                        ld      a,(SpaceStationSafeZone)
  18+ 6326 A7          >                        and     a
  18+ 6327 CA 2C 63    >                        jp      z, .DoTest
  18+ 632A C6 02       >                        add     a,2
  18+ 632C             >.DoTest                 JumpIfALTMemusng    JunkCount, .CanAddJunk
  18+ 632C 21 46 7F    >                        ld      hl,JunkCount
  18+ 632F BE          >                        cp      (hl)
  18+ 6330 DA 34 63    >                        jp		c,.CanAddJunk
  19+ 6333 C9                                           ret
  20+ 6334 F1           .CanAddJunk:                    pop     af
  21+ 6335 CD AE 62                                     call    SpawnShipTypeA
  22+ 6338                                              AddJunkCount
  22+ 6338 21 46 7F    >                        ld      hl,JunkCount
  22+ 633B 34          >                        inc     (hl)
  23+ 633C D8                                           ret     c                                   ; abort if failed
  24+ 633D C9                                           ret
  25+ 633E
  26+ 633E CD AE 62     SpawnTypeCopHandler:            call    SpawnShipTypeA
  27+ 6341 D8                                           ret     c                                   ; abort if failed
  28+ 6342                                              ; Cops will be non hostile if there are no other ones in area
  29+ 6342                                              ; if there are, then check out cargo and fist to evalutate
  30+ 6342                                              ; if not hostile and in space station area, then patrol orbiting station
  31+ 6342                                              ; if not in space station area even split on orbiting a random point in space at distance random
  32+ 6342                                              ;                                            travelling to station
  33+ 6342                                              ;                                            travelling to sun
  34+ 6342 C9                                           ret
  35+ 6343 CD AE 62     SpawnTypeTraderHandler:         call    SpawnShipTypeA
  36+ 6346 D8                                           ret     c                                   ; abort if failed
  37+ 6347                                              ; 50/50 goign to planet or sun
  38+ 6347                                              ;                main loop AI determines if our FIST status will force a jump
  39+ 6347 C9                                           ret
  40+ 6348 CD AE 62     SpawnTypeNonTraderHandler:      call    SpawnShipTypeA
  41+ 634B D8                                           ret     c                                   ; abort if failed
  42+ 634C                                              ; 50/50 goign to planet or sun
  43+ 634C                                              ; if FIST is high then 10% chance will auto go hostile
  44+ 634C C9                                           ret
  45+ 634D CD AE 62     SpawnTypePirateHandler:         call    SpawnShipTypeA
  46+ 6350 D8                                           ret     c                                   ; abort if failed
  47+ 6351                                              ; set random position
  48+ 6351                                              ; 50/50 going to station or sun
  49+ 6351                                              ; if in safe zone, then not hostile
  50+ 6351                                              ; work out value of our cargo then go auto hostile (e.g. gems/gold, special carry nuke mission has cargo so valueable it auto sets hostile)
  51+ 6351                                              AddPirateCount                              ; another pirate has been spawned
  51+ 6351 21 4A 7F    >                        ld      hl,PirateCount
  51+ 6354 34          >                        inc     (hl)
  52+ 6355 C9                                           ret
  53+ 6356 CD AE 62     SpawnTypeHunterHandler:         call    SpawnShipTypeA
  54+ 6359 D8                                           ret     c                                   ; abort if failed
  55+ 635A                                              ; initially hunters will be non hostile and by default going to station
  56+ 635A                                              ; set random position
  57+ 635A                                              ; 50/50 going to station or sun
  58+ 635A                                              ; Check out FIST status, if very high auto hostile
  59+ 635A                                              ; else its checked on ship event loop
  60+ 635A C9                                           ret
  61+ 635B CD AE 62     SpawnTypeThargoidHandler:       call    SpawnShipTypeA
  62+ 635E D8                                           ret     c                                   ; abort if failed
  63+ 635F                                              ; initially non hostile, main AI does logic (ie.. they will go hostile always after a random time or if shot at)
  64+ 635F                                              ; start in random position
  65+ 635F C9                                           ret
  66+ 6360 C9           SpawnTypeMissionHandler:        ret
  67+ 6361
  68+ 6361 CD AE 62     SpawnTypeStationDebrisHandler: call    SpawnShipTypeA
  69+ 6364 D8                                           ret     c                                   ; abort if failed
  70+ 6365                                              ;Set random position and vector
  71+ 6365 C9                                           ret
  72+ 6366              SpawnTypeMissionEventHandler:
  73+ 6366 C9           SpawnTypeDoNotSpawnHandler:    ret
  74+ 6367
  75+ 6367
  76+ 6367
  77+ 6367 3E 29        SpawnHostileCop:        ld      a,ShipID_Viper
  78+ 6369 CD AE 62                             call    SpawnShipTypeA                      ; call rather than jump
  79+ 636C CD 1A C6                             call    SetShipHostile                      ; as we have correct universe banked in now
  80+ 636F C9                                   ret
  81+ 6370                          DISPLAY "TODO: SPAWN TRADER"
  82+ 6370              SpawnTrader:       ; TODO
  83+ 6370
  84+ 6370              ; DEFUNCT?SpawnAHostileHunter:    ld      hl, ExtraVesselsCounter             ; prevent the next spawning
  85+ 6370              ; DEFUNCT?                        inc     (hl)                                ;
  86+ 6370              ; DEFUNCT?                        and     3                                   ; a = random 0..3
  87+ 6370              ; DEFUNCT?                        MMUSelectShipBank1
  88+ 6370              ; DEFUNCT?                        GetByteAInTable ShipHunterTable             ; get hunter ship type
  89+ 6370              ; DEFUNCT?                        call    SpawnShipTypeA
  90+ 6370              ; DEFUNCT?                        call    SetShipHostile
  91+ 6370              ; DEFUNCT?                        ret
  92+ 6370
  93+ 6370
  94+ 6370
  95+ 6370              ; input IX = table for spawn data
  96+ 6370              ; output A  = table type
  97+ 6370              ;        b = maximum to spawn
  98+ 6370              ;        de = spawn table address
  99+ 6370              ;        hl = spawn handler address
 100+ 6370 DD 7E 08     SelectSpawnTableData:   ld      a,(ix+1*SpawnTableSize)             ; Table Type
 101+ 6373 21 1C 64                             ld      hl,SpawnTypeHandlers                ; hl = the location in spawn table for the call address for setting up a spawn
 102+ 6376 ED 31                                add     hl,a                                ; of type A
 103+ 6378 ED 31                                add     hl,a                                ;
 104+ 637A 7E                                   ld      a,(hl)
 105+ 637B 23                                   inc     hl
 106+ 637C 66                                   ld      h,(hl)
 107+ 637D 6F                                   ld      l,a                                 ; hl now is proper address
 108+ 637E DD 46 10                             ld      b,(ix+2*SpawnTableSize)             ; Nbr to Spawn
 109+ 6381 DD 5E 18                             ld      e,(ix+3*SpawnTableSize)             ; Spawn Table Addr Low
 110+ 6384 DD 56 20                             ld      d,(ix+4*SpawnTableSize)             ; Spawn Table Addr Hi
 111+ 6387 C9                                   ret
 112+ 6388
 113+ 6388              ; Output IX = pointer to correct row in table
 114+ 6388              ; its up to the caller if DE is right table and it it needs to load into
 115+ 6388              ; it is up to the main loop code to maintain SpaceStationSafeZone
 116+ 6388              SelectSpawnTable:
 117+ 6388              .SelectCorrectTable:    JumpIfMemTrue SpaceStationSafeZone, .SelectSpaceStationTable
 117+ 6388 3A 44 7F    >                        ld      a,(SpaceStationSafeZone)
 117+ 638B A7          >                        and     a
 117+ 638C CA 96 63    >                        jp      z, .SelectSpaceStationTable
 118+ 638F DD 21 CC 63                          ld      ix,FreeSpaceSpawnTableLow
 119+ 6393 C3 9A 63                             jp      .RandomShip
 120+ 6396 DD 21 F4 63  .SelectSpaceStationTable:ld      ix,StationSpawnTableLow
 121+ 639A CD 37 84     .RandomShip:            call    doRandom
 122+ 639D DD BE 00     .SelectLoop:            cp      (ix+0)                              ; Compare high value
 123+ 63A0 D8                                   ret     c                                   ; if random <= high threshold jump to match, we cant just do jr c as 255 would never compare
 124+ 63A1 C8                                   ret     z                                   ; if random <= high threshold jump to match, result is, last values must be 255
 125+ 63A2 DD 23                                inc     ix                                  ; move to next row
 126+ 63A4 C3 9D 63                             jp      .SelectLoop                         ; we have a 255 marker to stop infinite loop
 127+ 63A7
 128+ 63A7              ; Returns with carry set if no ship to spawn
 129+ 63A7              ; In = hl = address of first byte of table
 130+ 63A7 06 03        SelectSpawnType:        ld      b,3                                 ; maxium of 3 goes
 131+ 63A9 E5 FD E1                             ld      iy,hl                               ; save hl as we may need it if the spawn is too high rank
 132+ 63AC CD 37 84     .SelectSpawnType:       call    doRandom
 133+ 63AF E6 0F                                and     %00001111                           ; random 1 to 15
 134+ 63B1 CB 27                                sla     a                                   ; * 2 as its 2 bytes per row
 135+ 63B3 ED 31                                add     hl,a
 136+ 63B5 7E                                   ld      a,(hl)
 137+ 63B6 47                                   ld      b,a
 138+ 63B7 3A 50 7F                             ld      a,(CurrentRank)                     ; are we experienced enough to face this ship
 139+ 63BA                                      JumpIfAGTENusng b, .GoodToSpawn             ; if current rank >= table rank, we are good
 139+ 63BA B8          >                        cp     b
 139+ 63BB D2 C5 63    >                        jp		nc,.GoodToSpawn
 140+ 63BE FD E5 E1     .TooLowRank:            ld      hl,iy
 141+ 63C1 10 E9                                djnz    .SelectSpawnType                    ; 3 goes then fail out
 142+ 63C3              .NoSpawn:               SetCarryFlag
 142+ 63C3 37          >                        scf
 143+ 63C4 C9                                   ret
 144+ 63C5 3E 08        .GoodToSpawn:           ld      a,8                                 ; so we shift by 8
 145+ 63C7 ED 31                                add     hl,a                                ; to get to the ship id
 146+ 63C9 7E                                   ld      a,(hl)                              ; and fetch it in a
 147+ 63CA                                      ClearCarryFlag
 147+ 63CA B7          >                        or a
 148+ 63CB C9                                   ret
 149+ 63CC
 150+ 63CC              ; Spawn table is in two halves. if we are within range X of space station we use the second table
 151+ 63CC              ; thsi means we coudl in theory drag a hunter / pirate or thargoid say into a space station zone
 152+ 63CC              ; Probability high
 153+ 63CC              ; Class of table,       0=Station,
 154+ 63CC              ; Table to pick from (this is then based on ranking )
 155+ 63CC
 156+ 63CC              ; Its prefilled to 8 options in the table to allocate space. though the table can only accomodate 8. ther eis a 9th as a marker, value of table = 0 means no spawn
 157+ 63CC 54 9F FA FF  FreeSpaceSpawnTableLow:    DB 84,                       159,                            250,                            255,                        255,                 255,                 255,                 255
 157+ 63D0 FF FF FF FF
 158+ 63D4 03 04 05 06  FreeSpaceSpawnTableType:   DB SpawnTypeCop,             SpawnTypeTrader,                SpawnTypeNonTrader,             SpawnTypePirate,            SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn
 158+ 63D8 0C 0C 0C 0C
 159+ 63DC 01 01 01 02  FreeSpaceSpawnTableCount:  DB 1,                        1,                              1,                              2,                          0,                   0,                   0,                   0
 159+ 63E0 00 00 00 00
 160+ 63E4 D3 C3 C3 93  FreeSpaceSpawnTableAddrLo: DB low(ShipCopTableARank),   low(ShipNonTraderTableARank),   low(ShipNonTraderTableARank),   low(ShipPirateTableARank),  low(0),              low(0),              low(0),              low(0)
 160+ 63E8 00 00 00 00
 161+ 63EC 76 76 76 76  FreeSpaceSpawnTableAddrHi: DB high(ShipCopTableARank),  high(ShipNonTraderTableARank),  high(ShipNonTraderTableARank),  high(ShipPirateTableARank), high(0),             high(0),             high(0),             high(0)
 161+ 63F0 00 00 00 00
 162+ 63F4
 163+ 63F4 54 9F FA FF  StationSpawnTableLow:      DB 84,                       159,                            250,                            255,                        255,                 255,                 255,                 255
 163+ 63F8 FF FF FF FF
 164+ 63FC 03 04 05 06  StationSpawnTableType:     DB SpawnTypeCop,             SpawnTypeTrader,                SpawnTypeNonTrader,             SpawnTypePirate,            SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn
 164+ 6400 0C 0C 0C 0C
 165+ 6404 01 01 01 03  StationSpawnTableCount:    DB 1,                        1,                              1,                              3,                          0,                   0,                   0,                   0
 165+ 6408 00 00 00 00
 166+ 640C D3 C3 C3 93  StationSpawnTableAddrLo:   DB low(ShipCopTableARank),   low(ShipNonTraderTableARank),   low(ShipNonTraderTableARank),   low(ShipPirateTableARank),  low(0),              low(0),              low(0),              low(0)
 166+ 6410 00 00 00 00
 167+ 6414 76 76 76 76  StationSpawnTableAddrHi:   DB high(ShipCopTableARank),  high(ShipNonTraderTableARank),  high(ShipNonTraderTableARank),  high(ShipPirateTableARank), high(0),             high(0),             high(0),             high(0)
 167+ 6418 00 00 00 00
 168+ 641C
 169+ 641C              SpawnTableSize             EQU  FreeSpaceSpawnTableType - FreeSpaceSpawnTableLow
 170+ 641C
 171+ 641C              ; Looko in constant equates, Spawntype equates for the values for this jump table
 172+ 641C              ; note at minium it must itmust point to SpawnTypeDoNotSpawnHandlers which just does a ret
 173+ 641C 11 63 1B 63  SpawnTypeHandlers:         DW SpawnStationHandler,       SpawnAsteroidHandler,      SpawnTypeJunkHandler,          SpawnTypeCopHandler
 173+ 6420 20 63 3E 63
 174+ 6424 43 63 48 63                             DW SpawnTypeTraderHandler,    SpawnTypeNonTraderHandler, SpawnTypePirateHandler,        SpawnTypeHunterHandler
 174+ 6428 4D 63 56 63
 175+ 642C 5B 63 60 63                             DW SpawnTypeThargoidHandler,  SpawnTypeMissionHandler,   SpawnTypeStationDebrisHandler, SpawnTypeMissionEventHandler
 175+ 6430 61 63 66 63
 176+ 6434 66 63                                   DW SpawnTypeDoNotSpawnHandler
# file closed: ./GameEngine/SpawnObject.asm
 819  6436              ;..................................................................................................................................
 820  6436              ;..Process A ship..................................................................................................................
 821  6436              ; Apply Damage b to ship based on shield value of a
 822  6436              ; returns a with new shield value
 823  6436                                      INCLUDE "./GameEngine/DamagePlayer.asm"
# file opened: ./GameEngine/DamagePlayer.asm
   1+ 6436              ;..Process A ship..................................................................................................................
   2+ 6436              ; Apply Damage b to ship based on shield value of a
   3+ 6436              ; returns a with new shield value
   4+ 6436              ApplyDamage:            ClearCarryFlag
   4+ 6436 B7          >                        or a
   5+ 6437 98                                   sbc     b
   6+ 6438 D0                                   ret     nc                  ; no carry so was not negative
   7+ 6439 ED 44        .KilledShield:          neg                         ; over hit shield
   8+ 643B 4F                                   ld      c,a                 ; save overhit in c
   9+ 643C 3A 1F 81                             ld      a,(PlayerEnergy)    ; and apply it to player energy
  10+ 643F                                      ClearCarryFlag
  10+ 643F B7          >                        or a
  11+ 6440 99                                   sbc     c
  12+ 6441 F2 45 64                             jp      p,.DoneDamage       ; if result was 0 or more then completed damage
  13+ 6444 AF           .KilledPlayer:          xor     a
  14+ 6445 32 1F 81     .DoneDamage:            ld      (PlayerEnergy),a
  15+ 6448 AF                                   xor     a                   ; shield is gone
  16+ 6449 C9                                   ret
  17+ 644A
# file closed: ./GameEngine/DamagePlayer.asm
 824  644A              ;..Update Universe Objects.........................................................................................................
 825  644A                                      INCLUDE "./GameEngine/UpdateUniverseObjects.asm"
# file opened: ./GameEngine/UpdateUniverseObjects.asm
   1+ 644A              ;..................................................................................................................................
   2+ 644A              ;                           DEFINE ROTATIONDEBUG 1
   3+ 644A              ;                           DEFINE CLIPDEBUG 1
   4+ 644A 00           CurrentShipUniv:        DB      0
   5+ 644B              ;..................................................................................................................................
   6+ 644B              ; if ship is destroyed or exploding then z flag is clear, else z flag is set
   7+ 644B              IsShipDestroyedOrExploding: MACRO
   8+ 644B ~                                        ld      a,(UBnKexplDsp)                                 ; is it destroyed
   9+ 644B ~                                        and     %10100000                                       ; or exploding
  10+ 644B                                          ENDM
  11+ 644B
  12+ 644B              JumpIfShipNotClose:         MACRO   NotCloseTarget
  13+ 644B ~            .CheckIfClose:              ld      hl,(UBnKxlo)                                    ; chigh byte check or just too far away
  14+ 644B ~                                        ld      de,(UBnKylo)                                    ; .
  15+ 644B ~                                        ld      bc,(UBnKzlo)                                    ; .
  16+ 644B ~                                        or      h                                               ; .
  17+ 644B ~                                        or      d                                               ; .
  18+ 644B ~                                        or      b                                               ; .
  19+ 644B ~                                        jp      nz,NotCloseTarget                               ; .
  20+ 644B ~            .CheckLowBit7Close:         or      l                                               ; if bit 7 of low is set then still too far
  21+ 644B ~                                        or      e                                               ; .
  22+ 644B ~                                        or      c                                               ; .
  23+ 644B ~                                        ld      iyh,a                                           ; save it in case we need to check bit 6 in collision check
  24+ 644B ~                                        and     $80                                             ; .
  25+ 644B ~                                        jp      nz,NotCloseTarget                              ; .
  26+ 644B                                          ENDM
  27+ 644B
  28+ 644B              VeryCloseCheck:             MACRO
  29+ 644B ~                                        ld      a,iyh                                           ; bit 6 is still too far
  30+ 644B ~                                        and     %11000000
  31+ 644B                                          ENDM
  32+ 644B
  33+ 644B              JumpIfNotDockingCheck:      MACRO   NotDocking
  34+ 644B ~            .CheckIfDockable:           ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
  35+ 644B ~                                        JumpIfANENusng  ShipTypeStation, NotDocking             ; if its not a station so we don't test docking
  36+ 644B ~            .IsDockableHostoleCheck:    JumpOnMemBitSet ShipNewBitsAddr, ShipHostileNewBitNbr, NotDocking ; if it is angry then we dont test docking
  37+ 644B ~            .CheckHighNoseZ:            JumpIfMemLTNusng  UBnkrotmatNosevZ+1 , 214, NotDocking  ; get get high byte of rotmat this is the magic angle to be within 26 degrees +/-
  38+ 644B ~            .GetStationVector:          call    GetStationVectorToWork                          ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
  39+ 644B ~                                        JumpIfALTNusng  89, NotDocking                          ; if the z axis <89 the we are not in the 22 degree angle,m if its negative then unsigned comparison will cater for this
  40+ 644B ~            .CheckAbsRoofXHi:           ld      a,(UBnkrotmatRoofvX+1)                          ; get abs roof vector high
  41+ 644B ~                                        and     SignMask8Bit                                    ; .
  42+ 644B ~                                        JumpIfALTNusng 80, NotDocking                           ; note 80 decimal for 36.6 degrees horizontal
  43+ 644B                                          ENDM
  44+ 644B
  45+ 644B              ;..................................................................................................................................
  46+ 644B AF           UpdateUniverseObjects:  xor     a
  47+ 644C 32 61 80                             ld      (SelectedUniverseSlot),a
  48+ 644F 57           .UpdateUniverseLoop:    ld      d,a                                             ; d is unaffected by GetTypeInSlotA
  49+ 6450              ;.. If the slot is empty (FF) then skip this slot..................................................................................
  50+ 6450 CD D2 83                             call    GetTypeAtSlotA
  51+ 6453 FE FF                                cp      $FF                                             ; we don't process empty slots
  52+ 6455 CA A5 65                             jp      z,.UniverseSlotIsEmpty                          ; .
  53+ 6458 FD 6F                                ld      iyl,a                                           ; save type into iyl for later
  54+ 645A 7A           .UniverseObjectFound:   ld      a,d                                             ; Get back Universe slot as we want it
  55+ 645B                                      MMUSelectUniverseA                                      ; and we apply roll and pitch
  55+ 645B C6 46       >                     add    a,BankUNIVDATA0
  55+ 645D ED 92 56    >                     nextreg UniverseMMU,       a
  56+ 6460                      IFDEF   CLIPDEBUG
  57+ 6460 ~            .DEBUG:                     ld      a,(SelectedUniverseSlot)
  58+ 6460 ~                                        cp      0
  59+ 6460 ~                                        jr      nz,.ProperUpdate
  60+ 6460                      ENDIF
  61+ 6460                      IFDEF   DEBUG_SHIP_MOVEMENT
  62+ 6460 ~            .DebugUpdate:               call    FixStationPos
  63+ 6460                      ENDIF
  64+ 6460                      IFDEF   CLIPDEBUG
  65+ 6460 ~                                        jp      .CheckExploding
  66+ 6460                      ENDIF
  67+ 6460                                          DISPLAY "TODO: Make all 4 of these 1 call"
  68+ 6460 CD 89 D6     .ProperUpdate:          call    ApplyMyRollAndPitch                             ; todo , make all 4 of these 1 call
  69+ 6463 3A 49 C0                             ld      a,(UBnKRotZCounter)
  70+ 6466 FE 00                                cp      0
  71+ 6468 CD 65 D8                             call    ApplyShipRollAndPitch
  72+ 646B CD AB D9                             call    ApplyShipSpeed
  73+ 646E CD 8C C6                             call    UpdateSpeedAndPitch                             ; update based on rates of speed roll and pitch accelleration/decelleration
  74+ 6471              ;.. apply ships movement
  75+ 6471              ;.. If its a space station then see if we are ready to dock........................................................................
  76+ 6471              .CheckExploding:        IsShipDestroyedOrExploding                              ; fi its destroyed or exploding z flag will be clear
  76+ 6471 3A 51 C0    >                            ld      a,(UBnKexplDsp)                                 ; is it destroyed
  76+ 6474 E6 A0       >                            and     %10100000                                       ; or exploding
  77+ 6476 C2 8D 65                             jp      nz,.ProcessedUniverseSlot                       ; then no action
  78+ 6479              ;.. we can't collide with missiles, they collide with us as part of tactics
  79+ 6479              .CheckIfMissile:        JumpIfMemEqNusng ShipTypeAddr, ShipTypeMissile, .CollisionDone ; Missiles don't have ECM and do collision checks on their tactics phase
  79+ 6479 3A 0D C4    >                        ld  a,(ShipTypeAddr)
  79+ 647C FE 01       >                        cp  ShipTypeMissile
  79+ 647E CA 52 65    >                        jp  z,.CollisionDone
  80+ 6481 CD 60 C6     .ProcessECM:            call    UpdateECM                                       ; Update ECM Counters
  81+ 6484              .CheckIfClose:          JumpIfShipNotClose .PostCollisionTest
  81+ 6484 2A 20 C0    >.CheckIfClose:              ld      hl,(UBnKxlo)                                    ; chigh byte check or just too far away
  81+ 6487 ED 5B 23 C0 >                            ld      de,(UBnKylo)                                    ; .
  81+ 648B ED 4B 26 C0 >                            ld      bc,(UBnKzlo)                                    ; .
  81+ 648F B4          >                            or      h                                               ; .
  81+ 6490 B2          >                            or      d                                               ; .
  81+ 6491 B0          >                            or      b                                               ; .
  81+ 6492 C2 52 65    >                            jp      nz,.PostCollisionTest                               ; .
  81+ 6495 B5          >.CheckLowBit7Close:         or      l                                               ; if bit 7 of low is set then still too far
  81+ 6496 B3          >                            or      e                                               ; .
  81+ 6497 B1          >                            or      c                                               ; .
  81+ 6498 FD 67       >                            ld      iyh,a                                           ; save it in case we need to check bit 6 in collision check
  81+ 649A E6 80       >                            and     $80                                             ; .
  81+ 649C C2 52 65    >                            jp      nz,.PostCollisionTest                              ; .
  82+ 649F              .CheckIfDockable:       JumpIfNotDockingCheck .CollisionCheck                   ; check if we are docking or colliding
  82+ 649F 3A 0D C4    >.CheckIfDockable:           ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
  82+ 64A2             >                            JumpIfANENusng  ShipTypeStation, .CollisionCheck             ; if its not a station so we don't test docking
  82+ 64A2 FE 02       >                        cp     ShipTypeStation
  82+ 64A4 C2 D8 64    >                        jp      nz,.CollisionCheck
  82+ 64A7             >.IsDockableHostoleCheck:    JumpOnMemBitSet ShipNewBitsAddr, ShipHostileNewBitNbr, .CollisionCheck ; if it is angry then we dont test docking
  82+ 64A7 3A 0E C4    >                        ld      a,(ShipNewBitsAddr)
  82+ 64AA CB 57       >                        bit 	ShipHostileNewBitNbr,a
  82+ 64AC C2 D8 64    >                        jp      nz,.CollisionCheck
  82+ 64AF             >.CheckHighNoseZ:            JumpIfMemLTNusng  UBnkrotmatNosevZ+1 , 214, .CollisionCheck  ; get get high byte of rotmat this is the magic angle to be within 26 degrees +/-
  82+ 64AF 3A 3A C0    >                        ld      a,(UBnkrotmatNosevZ+1)
  82+ 64B2 FE D6       >                        cp      214
  82+ 64B4 DA D8 64    >                        jp	  c,.CollisionCheck
  82+ 64B7 CD 0F 68    >.GetStationVector:          call    GetStationVectorToWork                          ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
  82+ 64BA             >                            JumpIfALTNusng  89, .CollisionCheck                          ; if the z axis <89 the we are not in the 22 degree angle,m if its negative then unsigned comparison will cater for this
  82+ 64BA FE 59       >                        cp      89
  82+ 64BC DA D8 64    >                        jp		c, .CollisionCheck
  82+ 64BF 3A 30 C0    >.CheckAbsRoofXHi:           ld      a,(UBnkrotmatRoofvX+1)                          ; get abs roof vector high
  82+ 64C2 E6 7F       >                            and     SignMask8Bit                                    ; .
  82+ 64C4             >                            JumpIfALTNusng 80, .CollisionCheck                           ; note 80 decimal for 36.6 degrees horizontal
  82+ 64C4 FE 50       >                        cp      80
  82+ 64C6 DA D8 64    >                        jp		c, .CollisionCheck
  83+ 64C9              ;.. Its passed all validation and we are docking...................................................................................
  84+ 64C9              .WeAreDocking:          MMUSelectLayer1
  84+ 64C9 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  85+ 64CD 3E 06                                ld        a,$6
  86+ 64CF CD B4 E0                             call      l1_set_border
  87+ 64D2              .EnterDockingBay:       ForceTransition ScreenDocking                           ;  Force transition
  87+ 64D2 3E 0D       >                        ld      a,ScreenDocking
  87+ 64D4 32 CA 69    >                        ld      (ScreenTransitionForced), a
  88+ 64D7 C9                                   ret                                                     ;  don't bother with other objects
  89+ 64D8                                      ; So it is a candiate to test docking. Now we do the position and angle checks
  90+ 64D8              ;.. else we are just colliding and have to handle that
  91+ 64D8 FD 7D        .CollisionCheck:        ld      a,iyl
  92+ 64DA                                      JumpIfAEqNusng ShipTypeStation, .HaveCollided           ; stations dont check bit 6
  92+ 64DA FE 02       >                        cp     ShipTypeStation
  92+ 64DC CA 15 65    >                        jp      z,.HaveCollided
  93+ 64DF                                      JumpIfAEqNusng ShipTypeMissile, .PostCollisionTest      ; Missile collisions are done in the tactics code
  93+ 64DF FE 01       >                        cp     ShipTypeMissile
  93+ 64E1 CA 52 65    >                        jp      z,.PostCollisionTest
  94+ 64E4              .VeryCloseCheck:        VeryCloseCheck                                          ; bit 6 is still too far
  94+ 64E4 FD 7C       >                            ld      a,iyh                                           ; bit 6 is still too far
  94+ 64E6 E6 C0       >                            and     %11000000
  95+ 64E8 20 68                                jr      nz,.PostCollisionTest                            ; .
  96+ 64EA FD 7D        .ScoopableCheck:        ld      a,iyl                                           ; so if its not scoopable
  97+ 64EC                                      JumpIfANENusng  ShipTypeScoopable, .HaveCollided        ; then its a collision
  97+ 64EC FE 04       >                        cp     ShipTypeScoopable
  97+ 64EE C2 15 65    >                        jp      nz,.HaveCollided
  98+ 64F1 3A 1F 84     .ScoopsEquiped:         ld      a,(FuelScoop)                                   ; if there is no scoop then impact
  99+ 64F4                                      JumpIfANENusng  EquipmentItemFitted, .HaveCollided      ; .
  99+ 64F4 FE FF       >                        cp     EquipmentItemFitted
  99+ 64F6 C2 15 65    >                        jp      nz,.HaveCollided
 100+ 64F9 3A 25 C0     .ScoopRegion:           ld      a,(UBnKysgn)                                    ; if the y axis is negative then we are OK
 101+ 64FC                                      JumpIfAIsZero   .HaveCollided                           ; else its a collision
 101+ 64FC A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 101+ 64FD CA 15 65    >                        jp	    z, .HaveCollided
 102+ 6500 CD F1 C8     .CollectedCargo:        call    ShipCargoType
 103+ 6503 57           .DoWeHaveCapacity:      ld      d,a                                             ; save cargotype
 104+ 6504 CD 22 82                             call    CanWeScoopCargoD
 105+ 6507 38 03                                jr      c, .NoRoom
 106+ 6509 CD 1A 82     .CanScoop:              call    AddCargoTypeD
 107+ 650C              .NoRoom:                ClearSlotMem    SelectedUniverseSlot                    ; we only need to clear slot list as univ ship is now junk
 107+ 650C 3A 61 80    >                        ld      a,(SelectedUniverseSlot)
 107+ 650F CD 66 83    >                        call    ClearSlotA
 108+ 6512 C3 52 65                             jp      .PostCollisionTest
 109+ 6515              ; ... Generic collision
 110+ 6515              .HaveCollided:          JumpIfMemLTNusng DELTA, 5, .SmallBump
 110+ 6515 3A 96 7E    >                        ld      a,(DELTA)
 110+ 6518 FE 05       >                        cp      5
 110+ 651A DA 29 65    >                        jp	  c,.SmallBump
 111+ 651D 3A 58 C0     .BigBump:               ld      a,(UBnKEnergy)                                  ; get energy level which gives us an approximate to size and health
 112+ 6520                                      SetCarryFlag
 112+ 6520 37          >                        scf
 113+ 6521 17                                   rla                                                     ; divide by 2 but also bring in carry so its 128 + energy / 2
 114+ 6522 47                                   ld      b,a
 115+ 6523 CD C1 DC                             call    KillShip                                        ; mark ship as dead (if possible)
 116+ 6526 C3 33 65                             jp      .ApplyDamage
 117+ 6529 3A 96 7E     .SmallBump:             ld      a,(DELTA)                                       ; if out ship speed < 5 then set damage to
 118+ 652C 47                                   ld      b,a
 119+ 652D                                                  DISPLAY "TODO: det target too"
 120+ 652D CD E3 DC                             call    DamageShip                                      ; dent target too  TODO make damge totally proportional to speed
 121+ 6530 C3 33 65                             jp      .ApplyDamage
 122+ 6533 CD CC 82     .ApplyDamage:           call    SetSpeedZero
 123+ 6536 3A 28 C0                             ld      a,(UBnKzsgn)                                    ; front or back
 124+ 6539 E6 80                                and     $80
 125+ 653B 20 0C                                jr      nz,.HitRear
 126+ 653D 3A 1D 81                             ld      a,(ForeShield)
 127+ 6540 CD 36 64                             call    ApplyDamage
 128+ 6543 32 1D 81                             ld      (ForeShield),a
 129+ 6546 C3 52 65                             jp      .CollisionDone
 130+ 6549 3A 1E 81     .HitRear:               ld      a,(AftShield)
 131+ 654C CD 36 64                             call    ApplyDamage
 132+ 654F 32 1E 81                             ld      (AftShield),a
 133+ 6552              .CollisionDone:
 134+ 6552              ;.. Now check laser to see if the ship is being shot in sights
 135+ 6552 CD 5C 6B     .PostCollisionTest:     call    ShipInSights
 136+ 6555 30 36                                jr      nc,.ProcessedUniverseSlot                        ; for laser and missile we can check once
 137+ 6557 3A 36 81                             ld      a,(CurrLaserPulseRate)
 138+ 655A                                      JumpIfAIsNotZero .CheckForPulse
 138+ 655A A7          >                        and     a
 138+ 655B C2 68 65    >                        jp	    nz,.CheckForPulse
 139+ 655E                                      JumpIfMemFalse FireLaserPressed,     .NoLaser
 139+ 655E 3A 8C 80    >                        ld      a,(FireLaserPressed)
 139+ 6561 A7          >                        and     a
 139+ 6562 C2 7D 65    >                        jp      nz, .NoLaser
 140+ 6565 C3 6F 65                             jp      .LaserDamage
 141+ 6568              .CheckForPulse:         JumpIfMemZero CurrLaserPulseOnCount, .NoLaser
 141+ 6568 3A 45 81    >                        ld  a,(CurrLaserPulseOnCount)
 141+ 656B A7          >                        and a
 141+ 656C CA 7D 65    >                        jp  z,.NoLaser
 142+ 656F 3A 40 81     .LaserDamage:           ld      a,(CurrLaserDamageOutput)
 143+ 6572 CD E3 DC                             call    DamageShip
 144+ 6575 3A 51 C0                             ld      a,(UBnKexplDsp)                                 ; is it destroyed
 145+ 6578 E6 A0                                and     %10100000
 146+ 657A C2 8D 65                             jp      nz,.ProcessedUniverseSlot                       ; can't lock on debris
 147+ 657D              .NoLaser:
 148+ 657D              ; Now check missile lock
 149+ 657D              .PlayerMissileLock:     JumpIfMemNeNusng MissileTargettingFlag, StageMissileTargeting, .ProcessedUniverseSlot
 149+ 657D 3A 22 81    >                        ld  a,(MissileTargettingFlag)
 149+ 6580 FE FE       >                        cp  StageMissileTargeting
 149+ 6582 C2 8D 65    >                        jp  nz,.ProcessedUniverseSlot
 150+ 6585 3A 61 80     .LockPlayerMissile:     ld      a,(SelectedUniverseSlot)                        ; set to locked and nto launchedd
 151+ 6588                                      LockMissileToA                                          ; .
 151+ 6588 F6 80       >                        or      $80
 151+ 658A 32 22 81    >                        ld      (MissileTargettingFlag),a
 152+ 658D              .ProcessedUniverseSlot:
 153+ 658D              ;...Tactics Section................................................................................................................
 154+ 658D 3A 61 80     .AreWeReadyForAI:       ld      a,(SelectedUniverseSlot)                        ; get back current slot number
 155+ 6590                                      IsSlotMissile                                           ; Missiles update every iteration
 155+ 6590 21 7C 80    >                        ld      hl,UniverseSlotType
 155+ 6593 ED 31       >                        add     hl,a
 155+ 6595 7E          >                        ld      a,(hl)
 155+ 6596 FE 01       >                        cp      ShipTypeMissile
 156+ 6598 CA D8 65                             jp      z,.UpdateMissile                                ; so we bypass the logic check
 157+ 659B              .CheckIfSlotAITurn:     CallIfMemEqMemusng SelectedUniverseSlot, CurrentUniverseAI, UpdateShip
 157+ 659B 3A 61 80    >                        ld      a,(SelectedUniverseSlot)
 157+ 659E 21 60 80    >                        ld      hl,CurrentUniverseAI
 157+ 65A1 BE          >                        cp      (hl)
 157+ 65A2 CC AC A0    >                        call    z,UpdateShip
 158+ 65A5              .UniverseSlotIsEmpty:
 159+ 65A5 3A 61 80     .DoneAICheck:           ld      a,(SelectedUniverseSlot)                        ; Move to next ship in loop
 160+ 65A8 3C                                   inc     a                                               ; .
 161+ 65A9                                      JumpIfAGTENusng   UniverseSlotListSize, .UpdateAICounter; if we are beyond the loop then update the mast AI counter and we are done
 161+ 65A9 FE 0C       >                        cp     UniverseSlotListSize
 161+ 65AB D2 B4 65    >                        jp		nc,.UpdateAICounter
 162+ 65AE 32 61 80                             ld      (SelectedUniverseSlot),a                        ; else update loop pointer
 163+ 65B1 C3 4F 64                             jp      .UpdateUniverseLoop                             ; if there are more to go we continue
 164+ 65B4              .UpdateAICounter:       IncMemMaxNCycle CurrentUniverseAI , UniverseSlotListSize
 164+ 65B4 3A 60 80    >                        ld      a,(CurrentUniverseAI)
 164+ 65B7 3C          >                        inc     a
 164+ 65B8 FE 0C       >                        cp      UniverseSlotListSize
 164+ 65BA 38 01       >                        jr      c,.IncMaxed
 164+ 65BC AF          >                        xor     a
 164+ 65BD 32 60 80    >.IncMaxed:              ld      (CurrentUniverseAI),a
 165+ 65C0              .CheckIfStationHostile: ReturnIfMemFalse  SetStationHostileFlag                ; we coudl move this to pre loop so its only done once
 165+ 65C0 3A 62 80    >                        ld      a,(SetStationHostileFlag)
 165+ 65C3 A7          >                        and     a
 165+ 65C4 C0          >                        ret     nz
 166+ 65C5              .CheckSetStationHostile:ReturnIfMemNeNusng UniverseSlotList, ShipTypeStation
 166+ 65C5 3A 70 80    >                        ld   a,(UniverseSlotList)
 166+ 65C8 FE 02       >                        cp     ShipTypeStation
 166+ 65CA C8          >                        ret    z
 167+ 65CB                                      MMUSelectUniverseN 0
 167+ 65CB ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 168+ 65CF CD 1A C6                             call    SetShipHostile
 169+ 65D2                                      SetMemFalse    SetStationHostileFlag
 169+ 65D2 3E FF       >                        ld      a,$FF
 169+ 65D4 32 62 80    >                        ld      (SetStationHostileFlag),a
 170+ 65D7 C9                                   ret
 171+ 65D8              .UpdateMissile:         ;break
 172+ 65D8 CD AC A0                             call    UpdateShip                                      ; we do it this way top avoid double calling
 173+ 65DB C3 A5 65                             jp      .DoneAICheck                                    ; ai if the ai slot to process = missile type
 174+ 65DE              ;..................................................................................................................................
 175+ 65DE
 176+ 65DE 00 00 00...  SaveUBNK:               DS 3*3
 177+ 65E7
 178+ 65E7 E5 D5 C5 F5  SavePosition:           push    hl,,de,,bc,,af
 179+ 65EB 3A 4A 64                             ld      a,(CurrentShipUniv)
 180+ 65EE FE 02                                cp      2
 181+ 65F0 20 31                                jr      nz,.DoneSave
 182+ 65F2                                      ;break
 183+ 65F2 21 20 C0                             ld      hl, UBnKxlo
 184+ 65F5 11 DE 65                             ld      de, SaveUBNK
 185+ 65F8 01 09 00                             ld      bc, 3*3
 186+ 65FB ED B0                                ldir
 187+ 65FD 3E 00                                ld      a,0
 188+ 65FF 32 24 C0                             ld      (UBnKyhi)  ,a
 189+ 6602 32 21 C0                             ld      (UBnKxhi)  ,a
 190+ 6605 32 27 C0                             ld      (UBnKzhi)  ,a
 191+ 6608 32 22 C0                             ld      (UBnKxsgn) ,a
 192+ 660B 32 25 C0                             ld      (UBnKysgn) ,a
 193+ 660E 32 27 C0                             ld      (UBnKzhi)  ,a
 194+ 6611 32 28 C0                             ld      (UBnKzsgn) ,a
 195+ 6614 3E 05                                ld      a, $5
 196+ 6616 32 23 C0                             ld      (UBnKylo)  ,a
 197+ 6619 3E 05                                ld      a, $5
 198+ 661B 32 20 C0                             ld      (UBnKxlo)  ,a
 199+ 661E 3E 6E                                ld      a, $6E
 200+ 6620 32 26 C0                             ld      (UBnKzlo)  ,a
 201+ 6623 F1 C1 D1 E1  .DoneSave:              pop     hl,,de,,bc,,af
 202+ 6627 C9                                   ret
 203+ 6628
 204+ 6628 E5 D5 C5 F5  RestorePosition:        push    hl,,de,,bc,,af
 205+ 662C 3A 4A 64                             ld      a,(CurrentShipUniv)
 206+ 662F FE 02                                cp      2
 207+ 6631 20 0B                                jr      nz,.DoneSave
 208+ 6633                                      ;break
 209+ 6633 21 DE 65                             ld      hl, SaveUBNK
 210+ 6636 11 20 C0                             ld      de, UBnKxlo
 211+ 6639 01 09 00                             ld      bc, 3*3
 212+ 663C ED B0                                ldir
 213+ 663E F1 C1 D1 E1  .DoneSave:              pop     hl,,de,,bc,,af
 214+ 6642 C9                                   ret
 215+ 6643
 216+ 6643
 217+ 6643 AF           DrawForwardShips:       xor     a
 218+ 6644 32 4A 64     .DrawShipLoop:          ld      (CurrentShipUniv),a
 219+ 6647 CD D2 83                             call    GetTypeAtSlotA
 220+ 664A FE FF                                cp      $FF
 221+ 664C 28 12                                jr      z,.ProcessedDrawShip
 222+ 664E                                      ; Add in a fast check for ship behind to process nodes and if behind jump to processed Draw ship
 223+ 664E 3A 4A 64     .SelectShipToDraw:       ld      a,(CurrentShipUniv)
 224+ 6651                                      MMUSelectUniverseA
 224+ 6651 C6 46       >                     add    a,BankUNIVDATA0
 224+ 6653 ED 92 56    >                     nextreg UniverseMMU,       a
 225+ 6656                                      IFDEF ROTATIONDEBUG
 226+ 6656 ~                                        call    SavePosition
 227+ 6656                                      ENDIF
 228+ 6656              ;Debug set position
 229+ 6656                            ;         ld      hl,$0000
 230+ 6656                            ;         ld      a,$00
 231+ 6656                            ;         ld      (UBnKxlo),hl
 232+ 6656                            ;         ld      (UBnKxsgn),a
 233+ 6656                            ;         ld      hl,$0148
 234+ 6656                            ;         ld      a,$00
 235+ 6656                            ;         ld      (UBnKylo),hl
 236+ 6656                            ;         ld      (UBnKysgn),a
 237+ 6656                            ;         ld      hl,$0149
 238+ 6656                            ;         ld      a,$00
 239+ 6656                            ;         ld      (UBnKzlo),hl
 240+ 6656                            ;         ld      (UBnKzsgn),a
 241+ 6656                            ;         ld      hl,$A558
 242+ 6656                            ;         ld      (UBnkrotmatSidevX),hl
 243+ 6656                            ;         ld      hl,$D8CE
 244+ 6656                            ;         ld      (UBnkrotmatSidevY),hl
 245+ 6656                            ;         ld      hl,$0000
 246+ 6656                            ;         ld      (UBnkrotmatSidevZ),hl
 247+ 6656                            ;         ld      hl,$58CE
 248+ 6656                            ;         ld      (UBnkrotmatRoofvX),hl
 249+ 6656                            ;         ld      hl,$A558
 250+ 6656                            ;         ld      (UBnkrotmatRoofvY),hl
 251+ 6656                            ;         ld      hl,$0000
 252+ 6656                            ;         ld      (UBnkrotmatRoofvZ),hl
 253+ 6656                            ;         ld      hl,$8000
 254+ 6656                            ;         ld      (UBnkrotmatNosevX),hl
 255+ 6656                            ;         ld      hl,$8000
 256+ 6656                            ;         ld      (UBnkrotmatNosevY),hl
 257+ 6656                            ;         ld      hl,$6000
 258+ 6656                            ;         ld      (UBnkrotmatNosevZ),hl
 259+ 6656
 260+ 6656
 261+ 6656                                                  DISPLAY "TODO: Tune this"
 262+ 6656 CD 75 DB     .ProcessUnivShip:       call    ProcessShip          ; The whole explosion logic is now encapsulated in process ship ;TODO TUNE THIS   ;; call    ProcessUnivShip
 263+ 6659              ; Debris still appears on radar
 264+ 6659                                      IFDEF ROTATIONDEBUG
 265+ 6659 ~                                        call    RestorePosition
 266+ 6659                                      ENDIF
 267+ 6659              .UpdateRadar:
 268+ 6659              ;;;Does nothing                       ld      a,BankFrontView
 269+ 6659              ;;;Does nothing                       MMUSelectScreenA
 270+ 6659              ;;;Does nothing         ld      a,(CurrentShipUniv)
 271+ 6659              ;;;Does nothing         MMUSelectUniverseA
 272+ 6659
 273+ 6659                                      CallIfMemTrue ConsoleRedrawFlag,UpdateScannerShip ; Always update ship positions
 273+ 6659 3A 89 80    >                        ld      a,(ConsoleRedrawFlag)
 273+ 665C A7          >                        and     a
 273+ 665D CC E6 73    >                        call    z, UpdateScannerShip
 274+ 6660 3A 4A 64     .ProcessedDrawShip:     ld      a,(CurrentShipUniv)
 275+ 6663 3C                                   inc     a
 276+ 6664                                      ;   DEBUGGING SHIPS RENDERING
 277+ 6664                                      ;   JumpIfALTNusng   UniverseSlotListSize, .DrawShipLoop
 278+ 6664              .DrawSunCompass:        MMUSelectSun
 278+ 6664 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 279+ 6668 CD FF 6F                             call    UpdateCompassSun                ; Always update the sun position
 280+ 666B CD 64 72                             call    UpdateScannerSun                ; Always attempt to put the sun on the scanner
 281+ 666E              .CheckPlanetCompass:    ;JumpIfMemFalse SpaceStationSafeZone, .DrawStationCompass
 282+ 666E              .DrawPlanetCompass:     MMUSelectPlanet
 282+ 666E ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 283+ 6672 CD 80 70                             call    UpdateCompassPlanet
 284+ 6675 CD 25 73                             call    UpdateScannerPlanet
 285+ 6678 C9                                   ret
 286+ 6679              .DrawStationCompass:
 287+ 6679
 288+ 6679 C9                                   ret
 289+ 667A
 290+ 667A
 291+ 667A              ;..................................................................................................................................
 292+ 667A
 293+ 667A              TestForNextShip:        MacroIsKeyPressed c_Pressed_Quit
 293+ 667A 3E 46       >                        ld      a,c_Pressed_Quit
 293+ 667C             >                        MMUSelectKeyboard
 293+ 667C ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 293+ 6680 CD A2 E1    >                        call    is_key_pressed
 294+ 6683 C0                                   ret     nz
 295+ 6684 3A 0E 68                             ld      a,(currentDemoShip)
 296+ 6687 3C                                   inc     a
 297+ 6688 FE 2C                                cp      44
 298+ 668A 20 01                                jr      nz,.TestOK
 299+ 668C AF                                   xor     a
 300+ 668D 32 0E 68     .TestOK:                ld      (currentDemoShip),a
 301+ 6690 CD 2D 83                             call    ClearUnivSlotList
 302+ 6693 3A 0E 68                             ld      a,(currentDemoShip)
 303+ 6696 47                                   ld      b,a
 304+ 6697 AF                                   xor     a
 305+ 6698 CD 44 83                             call    SetSlotAToTypeB
 306+ 669B F5                                   push    af
 307+ 669C                                      MMUSelectUniverseN 2
 307+ 669C ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 308+ 66A0                                      SetSlotAToUnivClass
 308+ 66A0 08          >                        ex      af,af'
 308+ 66A1 3A 0D C4    >                        ld      a,(ShipTypeAddr)
 308+ 66A4 47          >                        ld      b,a
 308+ 66A5 08          >                        ex      af,af'
 308+ 66A6 CD 4B 83    >                        call    SetSlotAToClassB
 309+ 66A9 F1                                   pop     af
 310+ 66AA CD 2C C6                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 311+ 66AD 3A 0E 68                             ld      a,(currentDemoShip)
 312+ 66B0                                      MMUSelectShipBank1
 312+ 66B0 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 313+ 66B4 CD 0F E0                             call    GetShipBankId
 314+ 66B7                                      MMUSelectShipBankA
 314+ 66B7 ED 92 57    >					 nextreg ShipModelMMU,	    a
 315+ 66BA 78                                   ld      a,b
 316+ 66BB CD 6A E0                             call    CopyShipToUniverse
 317+ 66BE CD 31 6B                             call    SetInitialShipPosition
 318+ 66C1 CD 69 68                             call    DEBUGSETNODES
 319+ 66C4 C9                                   ret
 320+ 66C5
# file closed: ./GameEngine/UpdateUniverseObjects.asm
 826  66C5              ;..................................................................................................................................
 827  66C5              ;; TODODrawForwardSun:         MMUSelectSun
 828  66C5              ;; TODO                        ld      a,(SunKShipType)
 829  66C5              ;; TODO.ProcessBody:           cp      129
 830  66C5              ;; TODO                        jr      nz,.ProcessPlanet
 831  66C5              ;; TODO.ProcessSun:            call    ProcessSun
 832  66C5              ;; TODO
 833  66C5              ;; TODOProcessSun:             call    CheckSunDistance
 834  66C5              ;; TODO
 835  66C5              ;; TODO                        ret
 836  66C5              ;; TODO.ProcessPlanet:         call    ProcessPlanet
 837  66C5              ;; TODO                        ret
 838  66C5              ;..................................................................................................................................
 839  66C5
 840  66C5
 841  66C5              ;;;ProcessUnivShip:        call    CheckVisible               ; Will check for negative Z and skip (how do we deal with read and side views? perhaps minsky transformation handles that?)
 842  66C5              ;;;                        ret     c
 843  66C5              ;;;                        ld      a,(UbnkDrawAsDot)
 844  66C5              ;;;                        and     a
 845  66C5              ;;;                        jr      z,.CarryOnWithDraw
 846  66C5              ;;;.itsJustADot:           ld      bc,(UBnkNodeArray)          ; if its at dot range
 847  66C5              ;;;                        ld      a,$FF                       ; just draw a pixel
 848  66C5              ;;;                        MMUSelectLayer2                     ; then go to update radar
 849  66C5              ;;;                        call    l2_plot_pixel               ;
 850  66C5              ;;;                        ClearCarryFlag
 851  66C5              ;;;                        ret
 852  66C5              ;;;.ProcessShipNodes:      call    ProcessShip
 853  66C5              ;;;
 854  66C5              ;;;call    ProcessNodes ; it hink here we need the star and planet special cases
 855  66C5              ;;;.DrawShip:              call    CullV2				        ; culling but over aggressive backface assumes all 0 up front TOFIX
 856  66C5              ;;;                        call    PrepLines                   ; LL72, process lines and clip, ciorrectly processing face visibility now
 857  66C5              ;;;                        ld      a,(CurrentShipUniv)
 858  66C5              ;;;                        MMUSelectUniverseA
 859  66C5              ;;;                        call   DrawLines
 860  66C5              ;;;                        ClearCarryFlag
 861  66C5              ;;;                        ret
 862  66C5
 863  66C5              ;----------------------------------------------------------------------------------------------------------------------------------
 864  66C5 49 6E 74 69  InitialiseMessage       DB "Intialising",0
 864  66C9 61 6C 69 73
 864  66CD 69 6E 67 00
 865  66D1 4C 6F 61 64  LoadingSpritesMessage   DB "LoadingSprites",0
 865  66D5 69 6E 67 53
 865  66D9 70 72 69 74
 865  66DD 65 73 00
 866  66E0 49 6E 74 69  InitialisingGalaxies    DB "IntiailisingGalaxies",0
 866  66E4 61 69 6C 69
 866  66E8 73 69 6E 67
 866  66EC 47 61 6C 61
 866  66F0 78 69 65 73
 866  66F4 00
 867  66F5 00           LoadCounter             DB 0
 868  66F6 2A 00        SpriteProgress          DB "*",0
 869  66F8              ;----------------------------------------------------------------------------------------------------------------------------------
 870  66F8
 871  66F8              NeedAMessageQueue:
 872  66F8
 873  66F8              ;..................................................................................................................................
 874  66F8                                      INCLUDE "./GameEngine/HyperSpaceTimers.asm"
# file opened: ./GameEngine/HyperSpaceTimers.asm
   1+ 66F8              ;----------------------------------------------------------------------------------------------------------------------------------
   2+ 66F8 3A 65 80     UpdateCountdownNumber:  ld		a,(OuterHyperCount)
   3+ 66FB 11 52 67                             ld		de,Hyp_counter
   4+ 66FE 0E 9C                                ld	c, -100
   5+ 6700 CD 0A 67                             call	.Num1
   6+ 6703 0E F6                                ld	c,-10
   7+ 6705 CD 0A 67                             call	.Num1
   8+ 6708 0E FF                                ld	c,-1
   9+ 670A 06 2F        .Num1:	                ld	b,'0'-1
  10+ 670C 04           .Num2:	                inc		b
  11+ 670D 81                                   add		a,c
  12+ 670E 38 FC                                jr		c,.Num2
  13+ 6710 91                                   sub 	c
  14+ 6711 C5                                   push	bc
  15+ 6712 F5                                   push	af
  16+ 6713 79                                   ld		a,c
  17+ 6714 FE FF                                cp		-1
  18+ 6716 78                                   ld		a,b
  19+ 6717 12                                   ld		(de),a
  20+ 6718 13                                   inc		de
  21+ 6719 F1                                   pop		af
  22+ 671A C1                                   pop		bc
  23+ 671B C9                                   ret
  24+ 671C
  25+ 671C              ;----------------------------------------------------------------------------------------------------------------------------------
  26+ 671C 54 6F 3A     Hyp_message             DB "To:"
  27+ 671F 00 00 00...  Hyp_to                  DS 32
  28+ 673F 20           Hyp_space1              DB " "
  29+ 6740 30 2E 30     Hyp_dist_amount         DB "0.0"
  30+ 6743 2E           Hyp_decimal             DB "."
  31+ 6744 30           Hyp_fraction            DB "0"
  32+ 6745 20 4C 59 00  Hyp_dis_ly              DB " LY",0
  33+ 6749 43 68 61 72  Hyp_charging            DB "Charging:"
  33+ 674D 67 69 6E 67
  33+ 6751 3A
  34+ 6752 30 30 30 00  Hyp_counter             DB "000",0
  35+ 6756 00 00 00...  Hyp_centeredTarget      DS 32
  36+ 6776 00           Hyp_centeredEol         DB 0
  37+ 6777 00 00 00...  Hyp_bufferpadding       DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
  38+ 6797 00 00 00...  Hyp_centeredCharging    DS 32
  39+ 67B7 00           Hyp_centeredEol2        DB 0
  40+ 67B8 00 00 00...  Hyp_bufferpadding2      DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
  41+ 67D8
  42+ 67D8
# file closed: ./GameEngine/HyperSpaceTimers.asm
 875  67D8
 876  67D8
 877  67D8
 878  67D8              ;DisplayTargetAndRange
 879  67D8              ;DisplayCountDownNumber
 880  67D8              ;----------------------------------------------------------------------------------------------------------------------------------
 881  67D8 3A 5F 80     TestPauseMode:          ld      a,(GamePaused)
 882  67DB FE 00                                cp      0
 883  67DD 20 16                                jr      nz,.TestForResume
 884  67DF 3A A5 7E     .CheckViewMode:         ld      a,(ScreenIndex)                     ; we can only pause if not on screen view
 885  67E2                                      ReturnIfAGTENusng       ScreenFront
 885  67E2 FE 09       >                        cp    ScreenFront
 885  67E4 D0          >                        ret	 nc
 886  67E5              .CheckPauseKey:         MacroIsKeyPressed c_Pressed_Freeze
 886  67E5 3E 40       >                        ld      a,c_Pressed_Freeze
 886  67E7             >                        MMUSelectKeyboard
 886  67E7 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 886  67EB CD A2 E1    >                        call    is_key_pressed
 887  67EE C0                                   ret     nz
 888  67EF              .PausePressed:          SetAFalse                                  ; doesn't really matter if we were in pause already as resume is a different key
 888  67EF 3E FF       >                        ld      a,$FF
 889  67F1 32 5F 80                             ld      (GamePaused),a
 890  67F4 C9                                   ret
 891  67F5              .TestForResume:         MacroIsKeyPressed c_Pressed_Resume                  ; In pause loop so we can check for resume key
 891  67F5 3E 42       >                        ld      a,c_Pressed_Resume
 891  67F7             >                        MMUSelectKeyboard
 891  67F7 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 891  67FB CD A2 E1    >                        call    is_key_pressed
 892  67FE C0                                   ret     nz
 893  67FF AF           .ResumePressed:         xor     a
 894  6800 32 5F 80                             ld      (GamePaused),a                      ; Resume pressed to reset pause state
 895  6803 C9                                   ret
 896  6804
 897  6804              TestQuit:               MacroIsKeyPressed c_Pressed_Quit
 897  6804 3E 46       >                        ld      a,c_Pressed_Quit
 897  6806             >                        MMUSelectKeyboard
 897  6806 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 897  680A CD A2 E1    >                        call    is_key_pressed
 898  680D C9                                   ret
 899  680E 0D           currentDemoShip:        DB      13;$12 ; 13 - corirollis
 900  680F
 901  680F
 902  680F 21 20 C0     GetStationVectorToWork: ld      hl,UBnKxlo
 903  6812 11 BA 7E                             ld      de,varVector9ByteWork
 904  6815 01 09 00                             ld      bc,9
 905  6818 ED B0                                ldir
 906  681A 2A BA 7E     .CalcNormalToXX15:      ld      hl, (varVector9ByteWork)  ; X
 907  681D ED 5B BD 7E                          ld      de, (varVector9ByteWork+3); Y
 908  6821 ED 4B C0 7E                          ld      bc, (varVector9ByteWork+6); Z
 909  6825 7D                                   ld      a,l
 910  6826 B3                                   or      e
 911  6827 B1                                   or      c
 912  6828 F6 01                                or      1
 913  682A DD 6F                                ld      ixl,a                   ; or all bytes and with 1 so we have at least a 1
 914  682C 7C                                   ld      a,h
 915  682D B2                                   or      d
 916  682E B0                                   or      b                       ; or all high bytes but don't worry about 1 as its sorted on low bytes
 917  682F C5           .MulBy2Loop:            push    bc
 918  6830 DD 45                                ld      b,ixl
 919  6832 CB 20                                sla     b                       ; Shift ixl left
 920  6834 DD 68                                ld      ixl,b
 921  6836 C1                                   pop     bc
 922  6837 CB 17                                rl      a                       ; roll into a
 923  6839 38 0E                                jr      c,.TA2                  ; if bit rolled out of rl a then we can't shift any more to the left
 924  683B                                      ShiftHLLeft1                    ; Shift Left X
 924  683B CB 25       >			   sla l
 924  683D CB 14       >			   rl  h
 925  683F                                      ShiftDELeft1                    ; Shift Left Y
 925  683F CB 23       >			   sla e
 925  6841 CB 12       >			   rl  d
 926  6843                                      ShiftBCLeft1                    ; Shift Left Z
 926  6843 CB 21       >			   sla c
 926  6845 CB 10       >			   rl  b
 927  6847 18 E6                                jr      .MulBy2Loop              ; no need to do jr nc as the first check looks for high bits across all X Y and Z
 928  6849 3A BC 7E     .TA2:                   ld      a,(varVector9ByteWork+2); x sign
 929  684C CB 3C                                srl     h
 930  684E B4                                   or      h
 931  684F 32 A6 C0                             ld      (XX15VecX),a         ; note this is now a signed highbyte
 932  6852 3A BF 7E                             ld      a,(varVector9ByteWork+5); y sign
 933  6855 CB 3A                                srl     d
 934  6857 B2                                   or      d
 935  6858 32 A7 C0                             ld      (XX15VecY),a         ; note this is now a signed highbyte
 936  685B 3A C2 7E                             ld      a,(varVector9ByteWork+8); y sign
 937  685E CB 38                                srl     b
 938  6860 B0                                   or      b
 939  6861 32 A8 C0                             ld      (XX15VecZ),a         ; note this is now a signed highbyte
 940  6864 CD B8 98                             call    normaliseXX1596S7
 941  6867 C9                                   ret                          ; will return with a holding Vector Z
 942  6868
 943  6868 00           TidyCounter             DB  0
 944  6869
 945  6869                          INCLUDE "./debugMatrices.asm"
# file opened: ./debugMatrices.asm
   1+ 6869
   2+ 6869
   3+ 6869 21 8C 68     DEBUGSETNODES:          ld      hl,DEBUGUBNKDATA
   4+ 686C 11 20 C0                             ld      de,UBnKxlo
   5+ 686F 01 09 00                             ld      bc,9
   6+ 6872 ED B0                                ldir
   7+ 6874 21 95 68                             ld      hl,DEBUGROTMATDATA
   8+ 6877 11 29 C0                             ld      de,UBnkrotmatSidevX
   9+ 687A 01 12 00                             ld      bc,6*3
  10+ 687D ED B0                                ldir
  11+ 687F C9                                   ret
  12+ 6880
  13+ 6880 21 8C 68     DEBUGSETPOS:            ld      hl,DEBUGUBNKDATA
  14+ 6883 11 20 C0                             ld      de,UBnKxlo
  15+ 6886 01 06 00                             ld      bc,9 - 3
  16+ 6889 ED B0                                ldir
  17+ 688B C9                                   ret
  18+ 688C
  19+ 688C              ; culltest
  20+ 688C              ;DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$31,	$03,	$00
  21+ 688C 00 00 00 00  DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$5C,	$07,	$00
  21+ 6890 00 00 5C 07
  21+ 6894 00
  22+ 6895 00 60 00 00  DEBUGROTMATDATA:        db      $00,	$60,	$00,	$00,	$00,	$00
  22+ 6899 00 00
  23+ 689B 00 00 00 60                          db      $00,	$00,	$00,	$60,	$00,	$00
  23+ 689F 00 00
  24+ 68A1 00 00 00 00                          db      $00,	$00,	$00,	$00,	$00,	$E0
  24+ 68A5 00 E0
  25+ 68A7
  26+ 68A7              ; FAILS due to sharp angle, OK now
  27+ 68A7              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$EF,	$03,	$00
  28+ 68A7              ;DEBUGROTMATDATA:        db      $01,	$2F,	$B2,	$CC,	$4C,	$27
  29+ 68A7              ;                        db      $17,	$46,	$87,	$3C,	$95,	$20
  30+ 68A7              ;                        db      $E2,	$32,	$31,	$8C,	$EF,	$D1
  31+ 68A7              ; TOP RIGHT CORNER Passes as python and cobra
  32+ 68A7              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$5B,	$04,	$00
  33+ 68A7              ;DEBUGROTMATDATA:        db      $E2,	$03,	$3A,	$16,	$F5,	$60
  34+ 68A7              ;                        db      $D3,	$CE,	$F3,	$BA,	$4E,	$0F
  35+ 68A7              ;                        db      $03,	$BE,	$4A,	$4B,	$DB,	$8C
  36+ 68A7              ; Looks OK
  37+ 68A7              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $EE,    $02,    $00
  38+ 68A7              ;DEBUGROTMATDATA:        db      $35,    $d8,    $98,    $9f,    $b0,    $1a
  39+ 68A7              ;                        db      $4B,    $26,    $CE,    $d6,    $60,    $16
  40+ 68A7              ;                        db      $89,    $90,    $c4,    $9f,    $dd,    $d9
  41+ 68A7              ;
  42+ 68A7              ; Massive horizontal line
  43+ 68A7              ; 15th line (or line 14 has corrodinates 05,00 to D8,00) which looks wrong
  44+ 68A7              ; node array looks OK, looks liek its sorted as it was both -ve Y off screen fix added
  45+ 68A7              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $BD,    $03,    $00
  46+ 68A7              ;DEBUGROTMATDATA:        db      $59,    $CF,    $06,    $B6,    $61,    $8D
  47+ 68A7              ;                        db      $AD,    $B1,    $97,    $4F,    $C9,    $98
  48+ 68A7              ;                        db      $61,    $99,    $E0,    $0D,    $11,    $5C
  49+ 68A7              ; Line lost in clipping
  50+ 68A7              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $8B,    $04,    $00
  51+ 68A7              ;DEBUGROTMATDATA:        db      $A3,    $4D,    $A9,    $28,    $F8,    $AF
  52+ 68A7              ;                        db      $FB,    $97,    $8C,    $B5,    $FB,    $D0
  53+ 68A7              ;                        db      $DB,    $3A,    $29,    $CA,    $29,    $1C
  54+ 68A7              ;DEBUGUBNKDATA:          db      $5E,    $02,    $00,    $FE,    $00,    $FE,    $E5,    $09,    $00
  55+ 68A7              ;DEBUGROTMATDATA:        db      $A6,    $88,    $89,    $BB,    $53,    $4D
  56+ 68A7              ;                        db      $6D,    $D9,    $F0,    $99,    $BA,    $9E
  57+ 68A7              ;                        db      $4A,    $A8,    $89,    $47,    $DF,    $33
  58+ 68A7              ;
  59+ 68A7              ;DEBUGUBNKDATA:          db      $ED,    $05,    $00,    $FE,    $00,    $FE,    $F1,    $0A,    $00
  60+ 68A7              ;DEBUGROTMATDATA:        db      $1B,    $33,    $DE,    $B4,    $ED,    $C5
  61+ 68A7              ;                        db      $73,    $C4,    $BC,    $1E,    $96,    $C4
  62+ 68A7              ;                        db      $55,    $B9,    $35,    $D1,    $80,    $0F
  63+ 68A7              ; top left off right issue
  64+ 68A7              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $2F,    $03,    $00
  65+ 68A7              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  66+ 68A7              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  67+ 68A7              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  68+ 68A7              ; test middle of screen
  69+ 68A7              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  70+ 68A7              ;
  71+ 68A7              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  72+ 68A7              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  73+ 68A7              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  74+ 68A7              ; test middle of screen futher away
  75+ 68A7              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $02,    $00
  76+ 68A7              ;
  77+ 68A7              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  78+ 68A7              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  79+ 68A7              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  80+ 68A7
  81+ 68A7              ; Test left center clip still warping
  82+ 68A7              ;DEBUGUBNKDATA:          db      $80,    $00,    $80,    $00,    $00,    $00,    $20,    $01,    $00
  83+ 68A7              ;
  84+ 68A7              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  85+ 68A7              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  86+ 68A7              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  87+ 68A7              ; Test right center clip - seems to be warping values towards bottom of screen on clip
  88+ 68A7              ;DEBUGUBNKDATA:          db      $80,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  89+ 68A7              ;
  90+ 68A7              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  91+ 68A7              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  92+ 68A7              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  93+ 68A7              ; Test top center clip test 1 - good test many ships fail
  94+ 68A7              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $00,    $20,    $01,    $00
  95+ 68A7              ;
  96+ 68A7              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  97+ 68A7              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  98+ 68A7              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  99+ 68A7              ; Test top center clip test 2 - Poss 2nd ship has an issue with a small line
 100+ 68A7              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $60,    $00,    $00,    $2F,    $01,    $00
 101+ 68A7              ;
 102+ 68A7              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 103+ 68A7              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 104+ 68A7              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 105+ 68A7              ; Test bottom center clip ; complet shambles as if its forcing cip to below 128
 106+ 68A7              ; looks better now may have some clipping issues maybe ship data
 107+ 68A7              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $80,    $20,    $01,    $00
 108+ 68A7              ;
 109+ 68A7              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 110+ 68A7              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 111+ 68A7 E6 01 81 AD                          db      $E6,    $01,    $81,    $AD,    $B0,    $55
 111+ 68AB B0 55
 112+ 68AD              ; Test left top center clip
 113+ 68AD
 114+ 68AD              ; Test right top center clip
 115+ 68AD              ; Test left bottom center clip
 116+ 68AD              ; Test right bottom center clip
 117+ 68AD
 118+ 68AD              ; Tests with no clip
 119+ 68AD              ;DEBUGUBNKDATA:          db      $39,    $00,    $00,    $43,    $00,    $00,    $2F,    $04,    $00
 120+ 68AD              ;
 121+ 68AD              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 122+ 68AD              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 123+ 68AD              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 124+ 68AD              ;
 125+ 68AD              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $1F,    $00,    $00
 126+ 68AD              ;
 127+ 68AD              ; UBNKPOs example 39,01,00,43,01,00,f4,03,00
 128+ 68AD              ; rotmat  example b1, 83,ae,5d,b0,1a,5e,de,82,8a,69,16,70,99,52,19,dd,d9
 129+ 68AD
# file closed: ./debugMatrices.asm
 946  68AD
 947  68AD
 948  68AD                          DISPLAY "TODO: Optimisation"
 949  68AD              ; Need this table to handle differnet events
 950  68AD              ; 1-main loop update - just general updates specfic to that screen that are not galaxy or stars, e.g. update heat, console
 951  68AD              ; cursor key, joystick press
 952  68AD              ; cursor key, joystick press
 953  68AD              ; non cursor keys presses
 954  68AD              ;
 955  68AD                                      INCLUDE "./Tables/ScreenControlTable.asm"
# file opened: ./Tables/ScreenControlTable.asm
   1+ 68AD              ; First byte is now docked flag
   2+ 68AD              ;
   3+ 68AD              ; Padded to 8 bytes to allow a * 8 for addressing
   4+ 68AD              ; Byte 0   - Docked flag  : 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
   5+ 68AD              ; Byte 1   - Screen Id
   6+ 68AD              ; Byte 2,3 - address of keypress table
   7+ 68AD              ; Byte 4   - Bank with Display code
   8+ 68AD              ; Byte 5,6 - Function for display
   9+ 68AD              ; Byte 7,8 - Main loop update routine
  10+ 68AD              ; Byte 9   - Draw stars Y/N ; also are we in an external view that can have guns?
  11+ 68AD              ; byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
  12+ 68AD              ; byte 11  - Double Buffering 0 = no, 1 = yes
  13+ 68AD              ; byte 12,13  - cursor key input routine
  14+ 68AD              ; byte 14  - HyperspaceBlock - can not select this screen if in hyperpace - 00 can , 01 can not
  15+ 68AD              ; byte 15    padding at the momnent (should add in an "AI enabled flag" for optimistation, hold previous value and on change create ships
  16+ 68AD              ; byte 16  - block update ship
  17+ 68AD              ; byte 17,18 Function for drawing system Jump (or 0)
  18+ 68AD              ; later will add a routine for drawing
  19+ 68AD              ;                          0    1                 2                              3                               4                    5                            6                              7                     8                       9   10  11  12                          13                          14  15  16   17               18
  20+ 68AD 00 00 7D E0  ScreenKeyMap:           DB 0,   ScreenLocal     , low addr_Pressed_LocalChart,   high addr_Pressed_LocalChart,   BankMenuShrCht,      low draw_local_chart_menu,   high draw_local_chart_menu,    $00,                  $00,                    $00,$00,$00,low local_chart_cursors,    high local_chart_cursors,   $01,$00,$00, $00,             $00
  20+ 68B1 32 FC C3 00
  20+ 68B5 00 00 00 00
  20+ 68B9 5A C4 01 00
  20+ 68BD 00 00 00
  21+ 68C0 00 01 7B E0  ScreenKeyGalactic:      DB 0,   ScreenGalactic  , low addr_Pressed_GalacticChrt, high addr_Pressed_GalacticChrt, BankMenuGalCht,      low draw_galactic_chart_menu,high draw_galactic_chart_menu, low loop_gc_menu,     high loop_gc_menu,      $00,$00,$00,low galctic_chart_cursors,  high galctic_chart_cursors, $01,$00,$00, $00,             $00
  21+ 68C4 33 48 C1 7C
  21+ 68C8 C2 00 00 00
  21+ 68CC 10 C3 01 00
  21+ 68D0 00 00 00
  22+ 68D3 01 02 7F E0                          DB 1,   ScreenMarket    , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  low loop_market_menu, high loop_market_menu,  $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  22+ 68D7 36 43 C3 FA
  22+ 68DB C3 00 00 00
  22+ 68DF 00 00 01 00
  22+ 68E3 00 00 00
  23+ 68E6 02 03 7F E0                          DB 2,   ScreenMarketDsp , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  23+ 68EA 36 43 C3 00
  23+ 68EE 00 00 00 00
  23+ 68F2 00 00 01 00
  23+ 68F6 00 00 00
  24+ 68F9 00 04 81 E0  ScreenCmdr:             DB 0,   ScreenStatus    , low addr_Pressed_Status,       high addr_Pressed_Status,       BankMenuStatus,      low draw_status_menu,        high draw_status_menu,         low loop_STAT_menu,  high loop_STAT_menu,     $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  24+ 68FD 3F 02 D0 4B
  24+ 6901 D0 00 00 00
  24+ 6905 00 00 01 00
  24+ 6909 00 00 00
  25+ 690C 00 05 83 E0                          DB 0,   ScreenInvent    , low addr_Pressed_Inventory,    high addr_Pressed_Inventory,    BankMenuInvent,      low draw_inventory_menu,     high draw_inventory_menu,      $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  25+ 6910 34 F5 C1 00
  25+ 6914 00 00 00 00
  25+ 6918 00 00 01 00
  25+ 691C 00 00 00
  26+ 691F 00 06 91 E0                          DB 0,   ScreenPlanet    , low addr_Pressed_PlanetData,   high addr_Pressed_PlanetData,   BankMenuSystem,      low draw_system_data_menu,   high draw_system_data_menu,    $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  26+ 6923 35 F0 C2 00
  26+ 6927 00 00 00 00
  26+ 692B 00 00 01 00
  26+ 692F 00 00 00
  27+ 6932 01 07 79 E0                          DB 1,   ScreenEquip     , low addr_Pressed_Equip,        high addr_Pressed_Equip,        BankMenuEquipS,      low draw_eqshp_menu,         high draw_eqshp_menu,          low loop_eqshp_menu,  high loop_eqshp_menu,   $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  27+ 6936 40 EA D3 86
  27+ 693A D4 00 00 00
  27+ 693E 00 00 01 00
  27+ 6942 00 00 00
  28+ 6945 01 08 73 E0                          DB 1,   ScreenLaunch    , low addr_Pressed_Launch,       high addr_Pressed_Launch,       BankLaunchShip,      low draw_launch_ship,        high draw_launch_ship,         low loop_launch_ship, high loop_launch_ship,  $00,$01,$01,$00,                        $00,                        $01,$00,$FF, $00,             $00
  28+ 6949 41 79 C1 63
  28+ 694D C2 00 01 01
  28+ 6951 00 00 01 00
  28+ 6955 FF 00 00
  29+ 6958 02 09 49 E0  ScreenKeyFront:         DB 2,   ScreenFront     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          low update_front_view,high update_front_view, $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  29+ 695C 3E 6A C0 D2
  29+ 6960 C0 01 00 01
  29+ 6964 F6 C2 00 00
  29+ 6968 00 E2 C2
  30+ 696B 02 0A 49 E0                          DB 2,   ScreenAft       , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  30+ 696F 3E 6A C0 00
  30+ 6973 00 01 00 01
  30+ 6977 F6 C2 00 00
  30+ 697B 00 E2 C2
  31+ 697E 02 0B 49 E0                          DB 2,   ScreenLeft      , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  31+ 6982 3E 6A C0 00
  31+ 6986 00 01 00 01
  31+ 698A F6 C2 00 00
  31+ 698E 00 E2 C2
  32+ 6991 02 0C 49 E0                          DB 2,   ScreenRight     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  32+ 6995 3E 6A C0 00
  32+ 6999 00 01 00 01
  32+ 699D F6 C2 00 00
  32+ 69A1 00 E2 C2
  33+ 69A4 03 0D FF FF                          DB 3,   ScreenDocking   , $FF,                           $FF,                            BankLaunchShip,      low draw_docking_ship,       high draw_docking_ship,        low loop_docking_ship,high loop_docking_ship, $00,$01,$01,$00,                        $00,                        $01,$00,$FF, $00,             $00
  33+ 69A8 41 F5 C1 98
  33+ 69AC C2 00 01 01
  33+ 69B0 00 00 01 00
  33+ 69B4 FF 00 00
  34+ 69B7 01 0E FF FF                          DB 1,   ScreenHyperspace, $FF,                           $FF,                            BankFrontView,       low draw_hyperspace,         high draw_hyperspace,          low loop_hyperspace,  high loop_hyperspace,   $00,$01,$01,$00,                        $00,                        $01,$00,$FF, $00,             $00
  34+ 69BB 3E 9C C2 F3
  34+ 69BF C2 00 01 01
  34+ 69C3 00 00 01 00
  34+ 69C7 FF 00 00
  35+ 69CA
  36+ 69CA              ;               DB low addr_Pressed_Aft,          high addr_Pressed_Aft,          BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  37+ 69CA              ;               DB low addr_Pressed_Left,         high addr_Pressed_Left,         BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  38+ 69CA              ;               DB low addr_Pressed_Right,        high addr_Pressed_Right,        BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  39+ 69CA              ScreenMapRow        EQU ScreenKeyGalactic - ScreenKeyMap
  40+ 69CA              ScreenMapLen        EQU ($ - ScreenKeyMap) / ScreenMapRow
  41+ 69CA              ScreenViewsStart    EQU (ScreenKeyFront - ScreenKeyMap)/ScreenMapRow
  42+ 69CA              ScreenCount         EQU 15
  43+ 69CA
# file closed: ./Tables/ScreenControlTable.asm
 956  69CA
 957  69CA FF           ScreenTransitionForced  DB $FF
 958  69CB                  INCLUDE "./GameEngine/resetUniverse.asm"
# file opened: ./GameEngine/resetUniverse.asm
   1+ 69CB              ; Use bank 0 as source and bank 7 as write target
   2+ 69CB              ResetUniv:              MMUSelectCpySrcN BankUNIVDATA0	         ; master universe def in bank 0
   2+ 69CB ED 91 50 46 >                     nextreg DMACpySourceMMU,	BankUNIVDATA0
   3+ 69CF 3E 01                                ld		a,1             				 ; we can read bank 0 as if it was rom
   4+ 69D1 06 0C                                ld		b,12
   5+ 69D3 C5 F5        .ResetCopyLoop:         push	bc,,af
   6+ 69D5                                      MMUSelectUniverseA			             ; copy from bank 0 to 71 to 12
   6+ 69D5 C6 46       >                     add    a,BankUNIVDATA0
   6+ 69D7 ED 92 56    >                     nextreg UniverseMMU,       a
   7+ 69DA 21 00 C0                             ld		hl,UniverseBankAddr
   8+ 69DD 11 00 00                             ld		de,dmaCopySrcAddr
   9+ 69E0 01 2A 1E                             ld		bc,UnivBankSize
  10+ 69E3 CD 5E 7D                             call	memcopy_dma
  11+ 69E6 F1 C1                                pop		bc,,af
  12+ 69E8 57                                   ld      d,a
  13+ 69E9 C6 41                                add     "A"
  14+ 69EB 32 0B C0                             ld      (StartOfUnivN),a
  15+ 69EE 7A                                   ld      a,d
  16+ 69EF 3C                                   inc		a
  17+ 69F0 10 E1                                djnz	.ResetCopyLoop
  18+ 69F2 C9                                   ret
  19+ 69F3
  20+ 69F3              ; Use bank 0 as source and bank 7 as write target
  21+ 69F3              ResetGalaxy:            MMUSelectCpySrcN BankGalaxyData0	     ; master universe def in bank 0 we can read bank 0 as if it was rom
  21+ 69F3 ED 91 50 5B >                     nextreg DMACpySourceMMU,	BankGalaxyData0
  22+ 69F7 3E 5C                                ld		a,BankGalaxyData1 			   	 ; and write to real location for galaxy data
  23+ 69F9 06 07                                ld		b,7                              ; 8 galaxies but we start with galaxy 0
  24+ 69FB 0E 01                                ld      c,1                              ;
  25+ 69FD F5           .ResetCopyLoop:         push	af                               ;
  26+ 69FE C5                                   push	bc                               ;
  27+ 69FF                                      MMUSelectGalaxyA    	                 ; copy from bank 0 to galaxy 1 to 7
  27+ 69FF ED 92 57    >                     nextreg GalaxyDataMMU,     a
  28+ 6A02 21 00 E0                             ld		hl,GalaxyDataAddr                ; using dma transfer
  29+ 6A05 11 00 00                             ld		de,dmaCopySrcAddr                ; .
  30+ 6A08 01 DC 1C                             ld		bc,GalaxyBankSize                ; .
  31+ 6A0B CD 5E 7D                             call	memcopy_dma                      ; .
  32+ 6A0E C1                                   pop		bc                               ; .
  33+ 6A0F 21 0F E0                             ld      hl, galaxy_pg_cnt                ; write out the galaxy page nbr to the page so we can diagnose page swapping
  34+ 6A12 79                                   ld      a,c                              ;
  35+ 6A13 C6 30                                add     a, $30                           ; add $30 (48) to get ascii of galaxy nbr
  36+ 6A15 77                                   ld      (hl),a                           ; .
  37+ 6A16 0C                                   inc     c                                ; Do next bank
  38+ 6A17 F1                                   pop     af                               ; .
  39+ 6A18 3C                                   inc		a                                ; .
  40+ 6A19 10 E2                                djnz	.ResetCopyLoop                    ; .
  41+ 6A1B C9                                   ret
  42+ 6A1C
  43+ 6A1C 06 08        SeedAllGalaxies:        ld          b,8
  44+ 6A1E 0E 5B                                ld          c,BankGalaxyData0
  45+ 6A20 C5           .SeedAllGalaxiesLoop:   push        bc
  46+ 6A21 79                                   ld          a,c
  47+ 6A22                                      MMUSelectGalaxyA
  47+ 6A22 ED 92 57    >                     nextreg GalaxyDataMMU,     a
  48+ 6A25 CD 9F FC                             call        SeedGalaxy
  49+ 6A28 C1                                   pop         bc
  50+ 6A29 0C                                   inc         c
  51+ 6A2A 10 F4                                djnz        .SeedAllGalaxiesLoop
  52+ 6A2C C9                                   ret
# file closed: ./GameEngine/resetUniverse.asm
 959  6A2D
 960  6A2D
 961  6A2D              ;----------------------------------------------------------------------------------------------------------------------------------
 962  6A2D                                      DISPLAY "TODO: Check collision detection as currently can destroy space station"
 963  6A2D                                      DISPLAY "TODO: Docking works but bouncing off is wrong for space station"
 964  6A2D
 965  6A2D 3A FA 68     InitialiseCommander:    ld      a,(ScreenCmdr+1)
 966  6A30 C3 3C 6A                             jp      SetScreenA
 967  6A33
 968  6A33 3A 59 69     InitialiseFrontView:    ld      a,(ScreenKeyFront+1)
 969  6A36 C3 3C 6A                             jp      SetScreenA
 970  6A39              ; false ret here as we get it free from jp
 971  6A39              ;----------------------------------------------------------------------------------------------------------------------------------
 972  6A39                                      INCLUDE "./GameEngine/SetScreenA.asm"
# file opened: ./GameEngine/SetScreenA.asm
   1+ 6A39              ; SetScreenA.asm
   2+ 6A39              ;----------------------------------------------------------------------------------------------------------------------------------
   3+ 6A39 C3 39 6A     InvalidScreenBlock:     jp     InvalidScreenBlock
   4+ 6A3C              SetScreenA:             JumpIfAGTENusng ScreenCount, InvalidScreenBlock
   4+ 6A3C FE 0F       >                        cp     ScreenCount
   4+ 6A3E D2 39 6A    >                        jp		nc,InvalidScreenBlock
   5+ 6A41 32 A5 7E     .SetUpIndex:            ld      (ScreenIndex),a                 ; Set screen index to a
   6+ 6A44 57           .SetUpIX:               ld      d,a
   7+ 6A45 1E 13                                ld      e,ScreenMapRow
   8+ 6A47 ED 30                                mul
   9+ 6A49 DD 21 AD 68                          ld      ix,ScreenKeyMap
  10+ 6A4D DD 19                                add     ix,de
  11+ 6A4F DD 22 A6 7E                          ld      (ScreenIndexTablePointer),ix    ; optimises later fetches
  12+ 6A53                                      ClearForceTransition                    ; In case it was called by a brute force change in an update loop
  12+ 6A53 3E FF       >                        ld      a,$FF
  12+ 6A55 32 CA 69    >                        ld      (ScreenTransitionForced),a
  13+ 6A58 32 A4 7E                             ld      (ScreenChanged),a               ; Set screen changed to FF
  14+ 6A5B DD 7E 09     .IsItAViewPort:         ld      a,(ix+9)                        ; Screen Map Byte 9  - Draw stars Y/N and also guns present
  15+ 6A5E 32 49 60                             ld      (CheckIfViewUpdate+1),a         ; Set flag to determine if we are on an exterior view
  16+ 6A61                                      JumpIfAIsZero .NotViewPort              ;
  16+ 6A61 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  16+ 6A62 CA 71 6A    >                        jp	    z, .NotViewPort
  17+ 6A65 DD 7E 01                             ld      a,(ix+1)                        ; get screen view number
  18+ 6A68 D6 09                                sub     ScreenFront                     ; Now a = screen number 0 = front, 1 = aft, 2 = left 3 = right
  19+ 6A6A                                      MMUSelectCommander                      ; Load view laser to current
  19+ 6A6A ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
  20+ 6A6E CD 0E E3                             call    LoadLaserToCurrent              ;
  21+ 6A71 DD 7E 04     .NotViewPort:           ld      a,(ix+4)                        ; Screen Map Byte 4   - Bank with Display code
  22+ 6A74 32 D0 60                             ld      (ScreenLoopBank+1),a            ; setup loop
  23+ 6A77 32 8A 5F                             ld      (HandleBankSelect+1),a          ; setup cursor keys
  24+ 6A7A 32 0C 62                             ld      (WarpMMUBank+1),a               ; WarpSFXHandler
  25+ 6A7D                                      MMUSelectScreenA
  25+ 6A7D ED 92 56    >                     nextreg ScreenBankMMU,		a
  26+ 6A80 DD 7E 05                             ld      a,(ix+5)                        ; Screen Map Byte 5 & 6 - Function for display initialisation
  27+ 6A83 32 C3 6A                             ld      (ScreenUpdateAddr+1),a          ; .
  28+ 6A86 DD 7E 06                             ld      a,(ix+6)                        ; .
  29+ 6A89 32 C4 6A                             ld      (ScreenUpdateAddr+2),a          ; .
  30+ 6A8C DD 7E 07                             ld      a,(ix+7)                        ; Screen Map Byte 7 & 8 - Main loop update routine
  31+ 6A8F 32 D5 60                             ld      (ScreenLoopJP+1),a              ; .
  32+ 6A92 DD 7E 08                             ld      a,(ix+8)                        ; .
  33+ 6A95 32 D6 60                             ld      (ScreenLoopJP+2),a              ; .
  34+ 6A98 DD 7E 0A                             ld      a,(ix+10)                       ; Screen Map Byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
  35+ 6A9B 32 60 5F                             ld      (InputBlockerCheck+1),a          ; Set flag to block transitions as needed e.g. launch screen
  36+ 6A9E DD 7E 0B                             ld      a,(ix+11)                       ; Screen Map Byte 11  - Double Buffering 0 = no, 1 = yes
  37+ 6AA1 32 F1 62                             ld      (DoubleBufferCheck+1),a
  38+ 6AA4 DD 7E 0C                             ld      a,(ix+12)
  39+ 6AA7 32 8F 5F                             ld      (CallCursorRoutine+1),a
  40+ 6AAA DD 7E 0D                             ld      a,(ix+13)
  41+ 6AAD 32 90 5F                             ld      (CallCursorRoutine+2),a
  42+ 6AB0 DD 7E 10                             ld      a,(ix+16)
  43+ 6AB3 32 3B 60                             ld      (UpdateShipsControl+1),a       ; determin if we call update universe objects in this screen
  44+ 6AB6 DD 7E 11                             ld      a,(ix+17)
  45+ 6AB9 32 11 62                             ld      (WarpRoutineAddr+1),a
  46+ 6ABC DD 7E 12                             ld      a,(ix+18)
  47+ 6ABF 32 12 62                             ld      (WarpRoutineAddr+2),a
  48+ 6AC2 C3 00 00     ScreenUpdateAddr:       jp      $0000                          ; We can just drop out now and also get a free ret from caller
  49+ 6AC5
# file closed: ./GameEngine/SetScreenA.asm
 973  6AC5                                      INCLUDE "./GameEngine/ViewKeyTest.asm"
# file opened: ./GameEngine/ViewKeyTest.asm
   1+ 6AC5 3A A5 7E     ViewKeyTest:            ld      a,(ScreenIndex)
   2+ 6AC8 4F                                   ld      c,a
   3+ 6AC9 06 0F                                ld      b,ScreenMapLen                  ; For now until add screens are added
   4+ 6ACB DD 21 AD 68                          ld      ix,ScreenKeyMap                 ; IX = table head for scanning
   5+ 6ACF 2A 64 80                             ld      hl,(InnerHyperCount)
   6+ 6AD2 7C                                   ld      a,h
   7+ 6AD3 B5                                   or      l
   8+ 6AD4 FD 67                                ld      iyh,a
   9+ 6AD6 FD 7C        ViewScanLoop:           ld      a,iyh
  10+ 6AD8 A7           .HyperspaceCountdown:   and     a
  11+ 6AD9 28 08                                jr      z,.CheckDockedFlag
  12+ 6ADB DD 7E 0E                             ld      a,(ix+14)
  13+ 6ADE FE 01                                cp      1
  14+ 6AE0 CA 29 6B                             jp      z,NotReadNextKey
  15+ 6AE3 DD 7E 00     .CheckDockedFlag:       ld      a,(ix+0)                        ; Screen Map Byte 0 Docked keyboard read flag
  16+ 6AE6              ; 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
  17+ 6AE6                                      JumpIfAEqNusng 3, NotReadNextKey        ; No keypress allowed at all (e.g. in hyperspace)
  17+ 6AE6 FE 03       >                        cp     3
  17+ 6AE8 CA 29 6B    >                        jp      z,NotReadNextKey
  18+ 6AEB                                      JumpIfAIsZero    .CanReadKey            ; if its the skip check for docking status
  18+ 6AEB A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  18+ 6AEC CA 06 6B    >                        jp	    z, .CanReadKey
  19+ 6AEF 57           .DocCheck:              ld      d,a                             ; save ix+0 value
  20+ 6AF0                                      JumpIfMemEqNusng DockedFlag, StateNormal, .NotDockedCheck ; if we are not in a docked state the we ar egood
  20+ 6AF0 3A 5E 80    >                        ld  a,(DockedFlag)
  20+ 6AF3 FE 00       >                        cp  StateNormal
  20+ 6AF5 CA 00 6B    >                        jp  z,.NotDockedCheck
  21+ 6AF8 7A           .DockedCheck:           ld      a,d                             ; we are docked so only ix+0 value of 1 is allowed
  22+ 6AF9                                      JumpIfANENusng 1, NotReadNextKey        ; if we are docked and its not 1 then don't read
  22+ 6AF9 FE 01       >                        cp     1
  22+ 6AFB C2 29 6B    >                        jp      nz,NotReadNextKey
  23+ 6AFE 18 06                                jr      .CanReadKey                     ; we can now scan as normal  as its 2 and docked
  24+ 6B00 7A           .NotDockedCheck:        ld      a,d                             ; if we are not docked then code 2 is not keyscan allowed
  25+ 6B01                                      JumpIfANENusng 2,NotReadNextKey
  25+ 6B01 FE 02       >                        cp     2
  25+ 6B03 C2 29 6B    >                        jp      nz,NotReadNextKey
  26+ 6B06 DD 7E 01     .CanReadKey:            ld      a,(ix+1)                        ; Screen Map Byte 1 Screen Id
  27+ 6B09 B9                                   cp      c                               ; is the index the current screen, if so skip the scan
  28+ 6B0A 5F                                   ld      e,a
  29+ 6B0B 28 1C                                jr      z,NotReadNextKey                ; we cant transition to current screen
  30+ 6B0D DD 7E 03                             ld      a,(ix+3)                        ; Screen Map Byte 3 - address of keypress table
  31+ 6B10 FE FF                                cp      $FF                             ; if upper byte is FF then we do not respond
  32+ 6B12 28 15                                jr      z,NotReadNextKey
  33+ 6B14 32 1F 6B                             ld      (ReadKeyAddr+2),a               ; Poke address into the ld hl,(....) below
  34+ 6B17 DD 7E 02                             ld      a,(ix+2)                        ; Screen Map Byte 2 - address of keypress table
  35+ 6B1A 32 1E 6B                             ld      (ReadKeyAddr+1),a
  36+ 6B1D 2A 00 00     ReadKeyAddr:            ld      hl,($0000)                      ; address is entry in the pointer table to the actual keypress
  37+ 6B20 7E                                   ld      a,(hl)                          ; now fetch the actual keypress
  38+ 6B21                                      JumpIfAIsZero NotReadNextKey
  38+ 6B21 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  38+ 6B22 CA 29 6B    >                        jp	    z, NotReadNextKey
  39+ 6B25 7B           .ValidScreenChange:     ld      a,e                             ; entering here e= current screen search number
  40+ 6B26 C3 3C 6A                             jp      SetScreenA
  41+ 6B29              ;--- CODE WILL NOT FALL TO HERE ---
  42+ 6B29 11 13 00     NotReadNextKey:         ld      de,ScreenMapRow
  43+ 6B2C DD 19                                add     ix,de                           ; we have only processed 3 of 8 bytes at here
  44+ 6B2E 10 A6                                djnz    ViewScanLoop
  45+ 6B30 C9                                   ret
  46+ 6B31
# file closed: ./GameEngine/ViewKeyTest.asm
 974  6B31              ;----------------------------------------------------------------------------------------------------------------------------------
 975  6B31              ; Set initial ship position as X,Y,Z 000,000,03B4
 976  6B31 21 00 00     SetInitialShipPosition: ld      hl,$0000
 977  6B34 22 20 C0                             ld      (UBnKxlo),hl
 978  6B37 21 00 00                             ld      hl,$0000
 979  6B3A 22 23 C0                             ld      (UBnKylo),hl
 980  6B3D 21 B4 03                             ld      hl,$03B4
 981  6B40 22 26 C0                             ld      (UBnKzlo),hl
 982  6B43 AF                                   xor     a
 983  6B44 32 22 C0                             ld      (UBnKxsgn),a
 984  6B47 32 25 C0                             ld      (UBnKysgn),a
 985  6B4A 32 28 C0                             ld      (UBnKzsgn),a
 986  6B4D                          DISPLAY "TODO:  call    Reset TODO"
 987  6B4D CD D4 C9                             call	InitialiseOrientation            ;#00;
 988  6B50 3E 01                                ld      a,1
 989  6B52 32 96 7E                             ld      (DELTA),a
 990  6B55 21 04 00                             ld      hl,4
 991  6B58 22 97 7E                             ld      (DELTA4),hl
 992  6B5B C9                                   ret
 993  6B5C
 994  6B5C              ; Checks to see if current ship swapped in is in our sights
 995  6B5C              ; we don;t need to deal with planets or sun as they have their own memory bank
 996  6B5C              ShipInSights:           ClearCarryFlag                          ; Carry clear no hit
 996  6B5C B7          >                        or a
 997  6B5D                                      ReturnIfMemIsNegative UBnKzsgn
 997  6B5D 3A 28 C0    >                        ld      a,(UBnKzsgn)
 997  6B60 E6 80       >                        and     $80
 997  6B62 C0          >                        ret     nz
 998  6B63 3A 51 C0                             ld      a,(UBnKexplDsp)                 ; get exploding flag and or with x and y high
 999  6B66 2A 20 C0                             ld      hl,(UBnKxlo)                    ; do 16 bit fetch as we will often need both bytes
1000  6B69 ED 4B 23 C0                          ld      bc,(UBnKylo)                    ; .
1001  6B6D B4                                   or      h
1002  6B6E B0                                   or      b
1003  6B6F C0                                   ret     nz                              ; if exploding or x hi or y hi are set then its nto targetable
1004  6B70 7D                                   ld      a,l                             ; hl =xlo ^ 2
1005  6B71                                      DEEquSquareA                            ; .
1005  6B71 57          >                        ld  d,a
1005  6B72 5F          >                        ld  e,a
1005  6B73 ED 30       >                        mul de
1006  6B75 62 6B                                ld      hl,de                           ; .
1007  6B77 79                                   ld      a,c                             ; de = de = ylo ^ 2
1008  6B78                                      DEEquSquareA                            ; .
1008  6B78 57          >                        ld  d,a
1008  6B79 5F          >                        ld  e,a
1008  6B7A ED 30       >                        mul de
1009  6B7C 19                                   add     hl,de                           ; hl = xlo ^ 2 + ylo ^ 2
1010  6B7D D8                                   ret     c                               ; if there was a carry then out of line of sight
1011  6B7E ED 5B F7 C3                          ld      de,(MissileLockLoAddr)          ; get targettable area ^ 2 from blueprint copy
1012  6B82                                      cpHLDE                                  ; now compare x^2 + y^2 to target area
1012  6B82 E5          >                        push    hl
1012  6B83 A7          >                        and     a
1012  6B84 ED 52       >                        sbc     hl,de
1012  6B86 E1          >                        pop     hl
1013  6B87 28 01                                jr      z,.EdgeHit                      ; if its an edge hit then we need to set carry
1014  6B89 C9                                   ret                                     ; if its < area then its a hit and carry is set, we will not work on =
1015  6B8A              .EdgeHit:               SetCarryFlag                            ; its an edge hit then we need to set carry
1015  6B8A 37          >                        scf
1016  6B8B C9                                   ret
1017  6B8C
1018  6B8C
1019  6B8C                          INCLUDE "./Views/ConsoleDrawing.asm"
# file opened: ./Views/ConsoleDrawing.asm
   1+ 6B8C              ; bc = start position, d = length, e = colour
   2+ 6B8C              ;                        DEFINE MISSILEDIAGNOSTICS 1
   3+ 6B8C 1E 10        Draw3LineBar:           ld      e,16
   4+ 6B8E C5 D5                                push    bc,,de
   5+ 6B90                                      MMUSelectLayer2
   5+ 6B90 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   6+ 6B94 CD 84 E4                             call    l2_draw_horz_line
   7+ 6B97 D1 C1                                pop     bc,,de
   8+ 6B99 05                                   dec     b
   9+ 6B9A C5 D5                                push    bc,,de
  10+ 6B9C 1E 14                                ld      e,20
  11+ 6B9E                                      MMUSelectLayer2
  11+ 6B9E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  12+ 6BA2 CD 84 E4                             call    l2_draw_horz_line
  13+ 6BA5 D1 C1                                pop     bc,,de
  14+ 6BA7 05                                   dec     b
  15+ 6BA8                                      MMUSelectLayer2
  15+ 6BA8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  16+ 6BAC CD 84 E4                             call    l2_draw_horz_line
  17+ 6BAF C9                                   ret
  18+ 6BB0
  19+ 6BB0 1E 7C        DrawColourCodedBar:     ld      e,124
  20+ 6BB2 FE 28                                cp      40
  21+ 6BB4 30 18                                jr      nc,DrawColourEBar
  22+ 6BB6 1E 54                                ld      e,84
  23+ 6BB8 FE 1E                                cp      30
  24+ 6BBA 30 12                                jr      nc,DrawColourEBar
  25+ 6BBC 1E D8                                ld      e,216
  26+ 6BBE FE 14                                cp      20
  27+ 6BC0 1E EC                                ld      e,236
  28+ 6BC2 FE 0A                                cp      10
  29+ 6BC4 30 08                                jr      nc,DrawColourEBar
  30+ 6BC6 1E E1                                ld      e,225
  31+ 6BC8 FE 05                                cp      5
  32+ 6BCA 30 02                                jr      nc,DrawColourEBar
  33+ 6BCC 1E E0                                ld      e,224
  34+ 6BCE C5 D5        DrawColourEBar:         push    bc,,de
  35+ 6BD0                                      MMUSelectLayer2
  35+ 6BD0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  36+ 6BD4 CD 84 E4                             call    l2_draw_horz_line
  37+ 6BD7 D1 C1                                pop     bc,,de
  38+ 6BD9 05                                   dec     b
  39+ 6BDA C5 D5                                push    bc,,de
  40+ 6BDC                                      MMUSelectLayer2
  40+ 6BDC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  41+ 6BE0 CD 84 E4                             call    l2_draw_horz_line
  42+ 6BE3 D1 C1                                pop     bc,,de
  43+ 6BE5 05                                   dec     b
  44+ 6BE6                                      MMUSelectLayer2
  44+ 6BE6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  45+ 6BEA CD 84 E4                             call    l2_draw_horz_line
  46+ 6BED C9                                   ret
  47+ 6BEE
  48+ 6BEE                                      ; no ret needed as jp handles it
  49+ 6BEE
  50+ 6BEE 16 50        MissileDiagPositive:    ld      d,"P"
  51+ 6BF0 CD 13 E3                             call    l2_print_chr_at
  52+ 6BF3 C9                                   ret
  53+ 6BF4
  54+ 6BF4 16 4E        MissileDiagNegative:    ld      d,"N"
  55+ 6BF6 CD 13 E3                             call    l2_print_chr_at
  56+ 6BF9 C9                                   ret
  57+ 6BFA
  58+ 6BFA 16 5A        MissileDiagZero:        ld      d,"Z"
  59+ 6BFC CD 13 E3                             call    l2_print_chr_at
  60+ 6BFF C9                                   ret
  61+ 6C00
  62+ 6C00 1E FF        MissileValue:           ld      e,$FF
  63+ 6C02 FE 00                                cp      0
  64+ 6C04 F5                                   push    af
  65+ 6C05 CC FA 6B                             call    z,MissileDiagZero
  66+ 6C08 F1                                   pop     af
  67+ 6C09 C8                                   ret     z
  68+ 6C0A CB 7F                                bit     7,a
  69+ 6C0C F5                                   push    af
  70+ 6C0D CC F4 6B                             call    z,MissileDiagNegative
  71+ 6C10 F1                                   pop     af
  72+ 6C11 C8                                   ret     z
  73+ 6C12 C4 EE 6B                             call    nz,MissileDiagPositive
  74+ 6C15 C9                                   ret
  75+ 6C16
  76+ 6C16 30 31 32 33  Hex2Char:       DB "0123456789ABCDEF"
  76+ 6C1A 34 35 36 37
  76+ 6C1E 38 39 41 42
  76+ 6C22 43 44 45 46
  77+ 6C26
  78+ 6C26 F5 E5 C5 D5  MissileHexDigit:        push    af,,hl,,bc,,de
  79+ 6C2A E6 0F                                and     $0F
  80+ 6C2C 21 16 6C                             ld      hl, Hex2Char
  81+ 6C2F ED 31                                add     hl,a
  82+ 6C31 56                                   ld      d,(hl)
  83+ 6C32 CD 13 E3                             call    l2_print_chr_at
  84+ 6C35 D1 C1 E1 F1                          pop     af,,hl,,bc,,de
  85+ 6C39 C9                                   ret
  86+ 6C3A
  87+ 6C3A ED 23        MissileHexToChar:       swapnib
  88+ 6C3C E6 0F                                and     $0F
  89+ 6C3E 1E FF                                ld      e,$FF
  90+ 6C40                                      JumpIfALTNusng 8,.SkipNeg
  90+ 6C40 FE 08       >                        cp      8
  90+ 6C42 DA 49 6C    >                        jp		c, .SkipNeg
  91+ 6C45 1E 68                                ld      e,$68
  92+ 6C47 D6 08                                sub     8
  93+ 6C49 CD 26 6C     .SkipNeg:               call    MissileHexDigit
  94+ 6C4C ED 23                                swapnib
  95+ 6C4E F5                                   push    af
  96+ 6C4F 79                                   ld      a,c
  97+ 6C50 C6 08                                add     8
  98+ 6C52 4F                                   ld      c,a
  99+ 6C53 F1                                   pop     af
 100+ 6C54 E6 0F                                and     $0F
 101+ 6C56 CD 26 6C                             call    MissileHexDigit
 102+ 6C59 C9                                   ret
 103+ 6C5A
 104+ 6C5A 1E FF        MissileValue2Byte:      ld      e,$FF
 105+ 6C5C 7E                                   ld      a,(hl)
 106+ 6C5D 23                                   inc     hl
 107+ 6C5E B6                                   or      (hl)
 108+ 6C5F FE 00                                cp      0
 109+ 6C61 F5                                   push    af
 110+ 6C62 CC FA 6B                             call    z,MissileDiagZero
 111+ 6C65 F1                                   pop     af
 112+ 6C66 C8                                   ret     z
 113+ 6C67 7E                                   ld      a,(hl)
 114+ 6C68 CB 7F                                bit     7,a
 115+ 6C6A F5                                   push    af
 116+ 6C6B CC F4 6B                             call    z,MissileDiagNegative
 117+ 6C6E F1                                   pop     af
 118+ 6C6F C8                                   ret     z
 119+ 6C70 C4 EE 6B                             call    nz,MissileDiagPositive
 120+ 6C73 C9                                   ret
 121+ 6C74
 122+ 6C74 16 78        MissileDiagPrintBoiler: ld      d,"x"
 123+ 6C76 1E 30                                ld      e, $30
 124+ 6C78 01 88 80                             ld      bc,$8088
 125+ 6C7B CD 13 E3                             call    l2_print_chr_at
 126+ 6C7E 01 88 88                             ld      bc,$8888
 127+ 6C81 16 7A                                ld      d,"z"
 128+ 6C83 1E 30                                ld      e, $30
 129+ 6C85 CD 13 E3                             call    l2_print_chr_at
 130+ 6C88 01 88 90                             ld      bc,$9088
 131+ 6C8B 16 73                                ld      d,"s"
 132+ 6C8D 1E 30                                ld      e, $30
 133+ 6C8F CD 13 E3                             call    l2_print_chr_at
 134+ 6C92 01 48 90                             ld      bc,$9048
 135+ 6C95 16 6E                                ld      d,"n"
 136+ 6C97 1E 30                                ld      e, $30
 137+ 6C99 CD 13 E3                             call    l2_print_chr_at
 138+ 6C9C 01 48 80                             ld      bc,$8048
 139+ 6C9F 16 73                                ld      d,"s"
 140+ 6CA1 1E 30                                ld      e, $30
 141+ 6CA3 CD 13 E3                             call    l2_print_chr_at
 142+ 6CA6 01 48 88                             ld      bc,$8848
 143+ 6CA9 16 72                                ld      d,"r"
 144+ 6CAB 1E 30                                ld      e, $30
 145+ 6CAD CD 13 E3                             call    l2_print_chr_at
 146+ 6CB0 C9                                   ret
 147+ 6CB1
 148+ 6CB1              MissileDiagnotics:      MMUSelectLayer2
 148+ 6CB1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 149+ 6CB5 CD 74 6C                             call    MissileDiagPrintBoiler
 150+ 6CB8 1E FF                                ld      e,$FF
 151+ 6CBA 01 90 80                             ld      bc,$8090
 152+ 6CBD 3A A0 A2                             ld      a,(TacticsRotX)
 153+ 6CC0 CD 3A 6C                             call    MissileHexToChar; MissileValue
 154+ 6CC3 01 90 88                             ld      bc,$8890
 155+ 6CC6 3A A2 A2                             ld      a,(TacticsRotZ)
 156+ 6CC9 CD 3A 6C                             call    MissileHexToChar; MissileValue
 157+ 6CCC 01 90 90                             ld      bc,$9090
 158+ 6CCF 3A A4 A2                             ld      a,(TacticsSpeed)
 159+ 6CD2 CD 3A 6C                             call    MissileHexToChar; MissileValue
 160+ 6CD5 01 50 80     .VectorSideX:           ld      bc,$8050
 161+ 6CD8 3A 70 A2                             ld      a,(TacticsSideX+1)
 162+ 6CDB CD 3A 6C                             call    MissileHexToChar;issileValue2Byte
 163+ 6CDE 01 62 80                             ld      bc,$8062
 164+ 6CE1 3A 74 A2                             ld      a,(TacticsSideY+1)
 165+ 6CE4 CD 3A 6C                             call    MissileHexToChar
 166+ 6CE7 01 74 80                             ld      bc,$8074
 167+ 6CEA 3A 78 A2                             ld      a,(TacticsSideZ+1)
 168+ 6CED CD 3A 6C                             call    MissileHexToChar
 169+ 6CF0 01 50 88     .VectorRoofX:           ld      bc,$8850
 170+ 6CF3 3A 80 A2                             ld      a,(TacticsRoofX+1)
 171+ 6CF6 CD 3A 6C                             call    MissileHexToChar
 172+ 6CF9 01 62 88                             ld      bc,$8862
 173+ 6CFC 3A 84 A2                             ld      a,(TacticsRoofY+1)
 174+ 6CFF CD 3A 6C                             call    MissileHexToChar
 175+ 6D02 01 74 88                             ld      bc,$8874
 176+ 6D05 3A 88 A2                             ld      a,(TacticsRoofZ+1)
 177+ 6D08 CD 3A 6C                             call    MissileHexToChar
 178+ 6D0B 01 50 90     .VectorNoseX:           ld      bc,$9050
 179+ 6D0E 3A 90 A2                             ld      a,(TacticsNoseX+1)
 180+ 6D11 CD 3A 6C                             call    MissileHexToChar
 181+ 6D14 01 62 90                             ld      bc,$9062
 182+ 6D17 3A 94 A2                             ld      a,(TacticsNoseY+1)
 183+ 6D1A CD 3A 6C                             call    MissileHexToChar
 184+ 6D1D 01 74 90                             ld      bc,$9074
 185+ 6D20 3A 88 A2                             ld      a,(TacticsRoofZ+1)
 186+ 6D23 CD 3A 6C                             call    MissileHexToChar
 187+ 6D26 C9                                   ret
 188+ 6D27
 189+ 6D27              UpdateConsole:          IFDEF   MISSILEDIAGNOSTICS
 190+ 6D27 ~                                            call    MissileDiagnotics
 191+ 6D27                                      ENDIF
 192+ 6D27 3A 96 7E                             ld      a,(DELTA)
 193+ 6D2A FE 00                                cp      0                           ; don't draw if there is nothing to draw
 194+ 6D2C 28 0C                                jr      z,.UpdateRoll
 195+ 6D2E 01 D1 84                             ld      bc,SpeedoStart
 196+ 6D31 21 72 81                             ld      hl,SpeedoMapping
 197+ 6D34 ED 31                                add     hl,a
 198+ 6D36 56                                   ld      d,(hl)
 199+ 6D37 CD 8C 6B                             call    Draw3LineBar
 200+ 6D3A 3A B6 7D     .UpdateRoll:            ld      a,(ALP1)
 201+ 6D3D FE 00                                cp      0
 202+ 6D3F CA 73 6D                             jp      z,.UpdatePitch
 203+ 6D42 21 E0 8C                             ld      hl,RollMiddle
 204+ 6D45 3A B7 7D                             ld      a,(ALP2)
 205+ 6D48 FE 00                                cp      0
 206+ 6D4A CA 65 6D                             jp     z,.PosRoll
 207+ 6D4D 16 00        .NegRoll:               ld      d,0
 208+ 6D4F 3A B6 7D                             ld      a,(ALP1)
 209+ 6D52 CB 27                                sla     a
 210+ 6D54 5F                                   ld      e,a
 211+ 6D55 B7                                   or      a
 212+ 6D56 ED 52                                sbc     hl,de
 213+ 6D58 44 4D                                ld      bc,hl
 214+ 6D5A 3E E1                                ld      a,DialMiddleXPos
 215+ 6D5C 91                                   sub     c
 216+ 6D5D 57                                   ld      d,a
 217+ 6D5E 1E FF                                ld      e,$FF
 218+ 6D60 CD 8C 6B                             call    Draw3LineBar
 219+ 6D63 18 0E                                jr      .UpdatePitch
 220+ 6D65 01 E0 8C     .PosRoll:               ld      bc,RollMiddle
 221+ 6D68 3A B6 7D                             ld      a,(ALP1)
 222+ 6D6B CB 27                                sla     a
 223+ 6D6D 57                                   ld      d,a
 224+ 6D6E 1E FF                                ld      e,$FF
 225+ 6D70 CD 8C 6B                             call    Draw3LineBar
 226+ 6D73 3A AA 7D     .UpdatePitch:           ld      a,(BET1)
 227+ 6D76 FE 00                                cp      0
 228+ 6D78 CA AD 6D                             jp      z,.Fuel
 229+ 6D7B 21 E0 94                             ld      hl,PitchMiddle
 230+ 6D7E 3A AB 7D                             ld      a,(BET2)
 231+ 6D81 FE 00                                cp      0
 232+ 6D83 CA 9F 6D                             jp      z,.PosPitch
 233+ 6D86 16 00        .NegPitch:              ld      d,0
 234+ 6D88 3A AA 7D                             ld      a,(BET1)
 235+ 6D8B CB 27                                sla     a
 236+ 6D8D 5F                                   ld      e,a
 237+ 6D8E B7                                   or      a
 238+ 6D8F ED 52                                sbc     hl,de
 239+ 6D91 44 4D                                ld      bc,hl
 240+ 6D93 3E E1                                ld      a,DialMiddleXPos
 241+ 6D95 91                                   sub     c
 242+ 6D96 57                                   ld      d,a
 243+ 6D97 1E FF                                ld      e,$FF
 244+ 6D99 CD 8C 6B                             call    Draw3LineBar
 245+ 6D9C C3 AD 6D                             jp      .Fuel
 246+ 6D9F 01 E0 94     .PosPitch:              ld      bc,PitchMiddle
 247+ 6DA2 3A AA 7D                             ld      a,(BET1)
 248+ 6DA5 CB 27                                sla     a
 249+ 6DA7 57                                   ld      d,a
 250+ 6DA8 1E FF                                ld      e,$FF
 251+ 6DAA CD 8C 6B                             call    Draw3LineBar
 252+ 6DAD 3A 00 84     .Fuel:                  ld      a,(Fuel)
 253+ 6DB0 CB 3F                                srl     a               ; divide by 4 to get range on screen
 254+ 6DB2 21 4D 81                             ld      hl,FuelMapping
 255+ 6DB5 ED 31                                add     hl,a
 256+ 6DB7 7E                                   ld      a,(hl)
 257+ 6DB8 01 10 94                             ld      bc,FuelStart
 258+ 6DBB 57                                   ld      d,a
 259+ 6DBC CD B0 6B                             call    DrawColourCodedBar
 260+ 6DBF 3A 1D 81     .FrontShield:           ld      a,(ForeShield)
 261+ 6DC2 CB 3F                                srl     a
 262+ 6DC4 CB 3F                                srl     a
 263+ 6DC6 CB 3F                                srl     a
 264+ 6DC8 01 10 84                             ld      bc,FShieldStart
 265+ 6DCB 57                                   ld      d,a
 266+ 6DCC CD B0 6B                             call    DrawColourCodedBar
 267+ 6DCF 3A 1E 81     .AftShield:             ld      a,(AftShield)
 268+ 6DD2 CB 3F                                srl     a
 269+ 6DD4 CB 3F                                srl     a
 270+ 6DD6 CB 3F                                srl     a
 271+ 6DD8 01 10 8D                             ld      bc,AShieldStart
 272+ 6DDB 57                                   ld      d,a
 273+ 6DDC CD B0 6B                             call    DrawColourCodedBar
 274+ 6DDF              .SpriteDraw:            MMUSelectSpriteBank
 274+ 6DDF ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 275+ 6DE3 3A B1 7D     .DrawECM:               ld      a,(ECMCountDown)
 276+ 6DE6                                      JumpIfAIsZero   .HideECM
 276+ 6DE6 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 276+ 6DE7 CA F0 6D    >                        jp	    z, .HideECM
 277+ 6DEA CD CF E1     .ShowECM:               call    show_ecm_sprite
 278+ 6DED C3 F3 6D                             jp      .ProcessedECM
 279+ 6DF0 CD 18 E4     .HideECM:               call    sprite_ecm_hide
 280+ 6DF3              .ProcessedECM:
 281+ 6DF3 3A 4B 7F     .DrawMissiles:          ld      a,(NbrMissiles)
 282+ 6DF6 FD 6F                                ld      iyl,a
 283+ 6DF8                                      JumpIfAIsZero   .HideAllMissiles                    ; First off do we have any missiles
 283+ 6DF8 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 283+ 6DF9 CA 37 6E    >                        jp	    z, .HideAllMissiles
 284+ 6DFC 3A 22 81     .DrawMissile_1:         ld      a,(MissileTargettingFlag)                   ; have we the targetting flag
 285+ 6DFF                                      JumpIfAEqNusng  StageMissileNotTargeting,.MissileReady
 285+ 6DFF FE FF       >                        cp     StageMissileNotTargeting
 285+ 6E01 CA 0F 6E    >                        jp      z,.MissileReady
 286+ 6E04                                      JumpIfAEqNusng  StageMissileTargeting,   .MissileArmed
 286+ 6E04 FE FE       >                        cp     StageMissileTargeting
 286+ 6E06 CA 15 6E    >                        jp      z,.MissileArmed
 287+ 6E09 CD 11 E2     .Missile1Locked:        call    show_missile_1_locked
 288+ 6E0C C3 18 6E                             jp      .DrawMissile_2
 289+ 6E0F CD DA E1     .MissileReady:          call    show_missile_1_ready
 290+ 6E12 C3 18 6E                             jp      .DrawMissile_2
 291+ 6E15 CD 06 E2     .MissileArmed:          call    show_missile_1_armed
 292+ 6E18 FD 7D        .DrawMissile_2:         ld      a,iyl
 293+ 6E1A                                      JumpIfALTNusng 2, .Only1Missile
 293+ 6E1A FE 02       >                        cp      2
 293+ 6E1C DA 3A 6E    >                        jp		c, .Only1Missile
 294+ 6E1F CD E5 E1                             call    show_missile_2_ready
 295+ 6E22 FD 7D        .DrawMissile_3:         ld      a,iyl
 296+ 6E24                                      JumpIfALTNusng 3, .Only2Missiles
 296+ 6E24 FE 03       >                        cp      3
 296+ 6E26 DA 3D 6E    >                        jp		c, .Only2Missiles
 297+ 6E29 CD F0 E1                             call    show_missile_3_ready
 298+ 6E2C FD 7D        .DrawMissile_4:         ld      a,iyl
 299+ 6E2E                                      JumpIfALTNusng 4, .Only2Missiles
 299+ 6E2E FE 04       >                        cp      4
 299+ 6E30 DA 3D 6E    >                        jp		c, .Only2Missiles
 300+ 6E33 CD FB E1                             call    show_missile_4_ready
 301+ 6E36 C9                                   ret
 302+ 6E37 CD 21 E4     .HideAllMissiles:       call    sprite_missile_1_hide
 303+ 6E3A CD 2A E4     .Only1Missile:          call    sprite_missile_2_hide
 304+ 6E3D CD 33 E4     .Only2Missiles:         call    sprite_missile_3_hide
 305+ 6E40 CD 3C E4     .Only3Missiles:         call    sprite_missile_4_hide
 306+ 6E43              ;PlayerEnergy
 307+ 6E43              ; BNEED LASER temp
 308+ 6E43              ; NEED CABIN TEMP
 309+ 6E43              ;NEED ALTITUDE
 310+ 6E43              ; Draw compas - if in range draw station, else do planet
 311+ 6E43 3A 1F 81     .EnergyBars:            ld      a,(PlayerEnergy)
 312+ 6E46 CB 3F                                srl     a                   ; energy = energy / 2 so 31 per bar
 313+ 6E48                                      JumpIfALTNusng  31 + 1,     Draw1EnergyBar
 313+ 6E48 FE 20       >                        cp      31 + 1
 313+ 6E4A DA 5A 6E    >                        jp		c, Draw1EnergyBar
 314+ 6E4D                                      JumpIfALTNusng  (31*2) + 1, Draw2EnergyBars
 314+ 6E4D FE 3F       >                        cp      (31*2) + 1
 314+ 6E4F DA 64 6E    >                        jp		c, Draw2EnergyBars
 315+ 6E52                                      JumpIfALTNusng  (31*3) + 1, Draw3EnergyBars
 315+ 6E52 FE 5E       >                        cp      (31*3) + 1
 315+ 6E54 DA 7A 6E    >                        jp		c, Draw3EnergyBars
 316+ 6E57 C3 9C 6E                             jp      Draw4EnergyBars
 317+ 6E5A
 318+ 6E5A 1E E0        Draw1EnergyBar:         ld      e,224
 319+ 6E5C 57                                   ld      d,a
 320+ 6E5D 01 D5 BD                             ld      bc,EnergyBar1Start
 321+ 6E60 CD CE 6B                             call    DrawColourEBar
 322+ 6E63 C9                                   ret
 323+ 6E64 1E D8        Draw2EnergyBars:        ld      e,216
 324+ 6E66 D6 1F                                sub     31
 325+ 6E68 57                                   ld      d,a
 326+ 6E69 01 D5 B5                             ld      bc,EnergyBar2Start
 327+ 6E6C CD CE 6B                             call    DrawColourEBar
 328+ 6E6F 16 1F                                ld      d,31
 329+ 6E71 1E D8                                ld      e,216
 330+ 6E73 01 D5 BD                             ld      bc,EnergyBar1Start
 331+ 6E76 CD CE 6B                             call    DrawColourEBar
 332+ 6E79 C9                                   ret
 333+ 6E7A 1E 14        Draw3EnergyBars:        ld      e,20
 334+ 6E7C D6 3E                                sub     31*2
 335+ 6E7E 57                                   ld      d,a
 336+ 6E7F 1E 14                                ld      e,20
 337+ 6E81 01 D5 AD                             ld      bc,EnergyBar3Start
 338+ 6E84 CD CE 6B                             call    DrawColourEBar
 339+ 6E87 16 1F                                ld      d,31
 340+ 6E89 1E 14                                ld      e,20
 341+ 6E8B 01 D5 B5                             ld      bc,EnergyBar2Start
 342+ 6E8E CD CE 6B                             call    DrawColourEBar
 343+ 6E91 16 1F                                ld      d,31
 344+ 6E93 1E 14                                ld      e,20
 345+ 6E95 01 D5 BD                             ld      bc,EnergyBar1Start
 346+ 6E98 CD CE 6B                             call    DrawColourEBar
 347+ 6E9B C9                                   ret
 348+ 6E9C 1E 18        Draw4EnergyBars:        ld      e,24
 349+ 6E9E D6 5D                                sub     31*3
 350+ 6EA0                                      JumpIfALTNusng 31,.NoMax
 350+ 6EA0 FE 1F       >                        cp      31
 350+ 6EA2 DA A7 6E    >                        jp		c, .NoMax
 351+ 6EA5 3E 1F        .Max                    ld      a,31
 352+ 6EA7 57           .NoMax:                 ld      d,a
 353+ 6EA8 01 D5 A5                             ld      bc,EnergyBar4Start
 354+ 6EAB CD CE 6B                             call    DrawColourEBar
 355+ 6EAE 16 1F                                ld      d,31
 356+ 6EB0 1E 18                                ld      e,24
 357+ 6EB2 01 D5 AD                             ld      bc,EnergyBar3Start
 358+ 6EB5 CD CE 6B                             call    DrawColourEBar
 359+ 6EB8 16 1F                                ld      d,31
 360+ 6EBA 1E 18                                ld      e,24
 361+ 6EBC 01 D5 B5                             ld      bc,EnergyBar2Start
 362+ 6EBF CD CE 6B                             call    DrawColourEBar
 363+ 6EC2 16 1F                                ld      d,31
 364+ 6EC4 1E 18                                ld      e,24
 365+ 6EC6 01 D5 BD                             ld      bc,EnergyBar1Start
 366+ 6EC9 CD CE 6B                             call    DrawColourEBar
 367+ 6ECC C9                                   ret
 368+ 6ECD
 369+ 6ECD              ScannerBottom           equ 190
 370+ 6ECD              ScannerTypeMissle       equ 2
 371+ 6ECD              ScannerXRangeOffset     equ $35
 372+ 6ECD              ScannerCenter           equ 127
 373+ 6ECD
 374+ 6ECD              ScannerDefault          equ 0
 375+ 6ECD              ScannerMissile          equ 2
 376+ 6ECD              ScannerStation          equ 4
 377+ 6ECD              ScannerEnemy            equ 6
 378+ 6ECD
 379+ 6ECD
 380+ 6ECD 00           SunXScaled              DB  0
 381+ 6ECE 00           SunYScaled              DB  0
 382+ 6ECF 00           SunZScaled              DB  0
 383+ 6ED0
 384+ 6ED0                                      ;   ShipTypeNormal
 385+ 6ED0 18 1C 90 FC  ScannerColourTable:       DB  L2ColourGREEN_2,    L2ColourGREEN_1, L2ColourYELLOW_4,  L2ColourYELLOW_1,   L2ColourCYAN_2, L2ColourCYAN_1, L2ColourRED_4,  L2ColourPINK_4
 385+ 6ED4 12 1F 80 E0
 386+ 6ED8 C0 E0 C0 E0  ScannerColourTableHostile:DB  L2ColourRED_2,      L2ColourRED_1,   L2ColourRED_2,     L2ColourRED_1,      L2ColourRED_2,  L2ColourRED_1,  L2ColourRED_2,  L2ColourRED_1; just a place holder for now
 386+ 6EDC C0 E0 C0 E0
 387+ 6EE0
 388+ 6EE0              GetShipColor:           MACRO
 389+ 6EE0 ~                                    ld      hl,ScannerColourTable
 390+ 6EE0 ~                                    ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
 391+ 6EE0 ~                                    cp      1                        ; for now to bypass hostile missile
 392+ 6EE0 ~                                    jr      z,.UsingColourTable    ; for now to bypass hostile missile
 393+ 6EE0 ~                                    ld      a,(ShipNewBitsAddr)
 394+ 6EE0 ~                                    and     ShipIsHostile
 395+ 6EE0 ~                                    jr      z,.UsingColourTable
 396+ 6EE0 ~            .UsingHostileColour:    ld      hl,ScannerColourTableHostile
 397+ 6EE0 ~            .UsingColourTable:      ld      a,(ShipTypeAddr)
 398+ 6EE0 ~                                    sla     a                            ; as its byte pairs * 2
 399+ 6EE0 ~                                    add     hl,a
 400+ 6EE0 ~                                    ld      a,(hl)
 401+ 6EE0                                      ENDM
 402+ 6EE0              GetShipColorBright:     MACRO
 403+ 6EE0 ~                                    ld      hl,ScannerColourTable
 404+ 6EE0 ~                                    ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
 405+ 6EE0 ~                                    cp      1                        ; for now to bypass hostile missile
 406+ 6EE0 ~                                    jr      z,.UsingColourTable    ; for now to bypass hostile missile
 407+ 6EE0 ~                                    ld      a,(ShipNewBitsAddr)
 408+ 6EE0 ~                                    and     ShipIsHostile
 409+ 6EE0 ~                                    jr      z,.UsingColourTable
 410+ 6EE0 ~            .UsingHostileColour:    ld      hl,ScannerColourTableHostile
 411+ 6EE0 ~            .UsingColourTable:      ld      a,(ShipTypeAddr)
 412+ 6EE0 ~                                    sla     a                            ; as its byte pairs * 2
 413+ 6EE0 ~                                    inc     a
 414+ 6EE0 ~                                    add     hl,a
 415+ 6EE0 ~                                    ld      a,(hl)
 416+ 6EE0                                      ENDM
 417+ 6EE0
 418+ 6EE0              Shift24BitScan:         MACRO   regHi, reglo
 419+ 6EE0 ~                                    ld      hl,(regHi)
 420+ 6EE0 ~                                    ld      b,h
 421+ 6EE0 ~                                    ld      a,h
 422+ 6EE0 ~                                    and     SignMask8Bit
 423+ 6EE0 ~                                    ld      h,a
 424+ 6EE0 ~                                    ld      a,(reglo)
 425+ 6EE0 ~                                    sla     a
 426+ 6EE0 ~                                    rl      l
 427+ 6EE0 ~                                    rl      h
 428+ 6EE0 ~                                    sla     a
 429+ 6EE0 ~                                    rl      l
 430+ 6EE0 ~                                    rl      h
 431+ 6EE0 ~                                    sla     a
 432+ 6EE0 ~                                    rl      l
 433+ 6EE0 ~                                    rl      h
 434+ 6EE0 ~                                    sla     a
 435+ 6EE0 ~                                    rl      l
 436+ 6EE0 ~                                    rl      h
 437+ 6EE0 ~                                    sla     a
 438+ 6EE0 ~                                    rl      l
 439+ 6EE0 ~                                    rl      h
 440+ 6EE0 ~                                    sla     a
 441+ 6EE0 ~                                    rl      l
 442+ 6EE0 ~                                    rl      h
 443+ 6EE0                                      ENDM
 444+ 6EE0
 445+ 6EE0              SunShiftRight           MACRO   reglo, reghi, regsgn
 446+ 6EE0 ~                                    ld      a,regsgn
 447+ 6EE0 ~                                    srl     a
 448+ 6EE0 ~                                    rr      reghi
 449+ 6EE0 ~                                    rr      reglo
 450+ 6EE0 ~                                    ld      regsgn,a
 451+ 6EE0                                      ENDM
 452+ 6EE0
 453+ 6EE0              ;SunShiftPosTo15Bit:     ld      de,(SBnKzlo)
 454+ 6EE0              ;                        ld      a,(SBnKzsgn)
 455+ 6EE0              ;                        push    af
 456+ 6EE0              ;                        and     SignMask8Bit
 457+ 6EE0              ;                        ld      iyl,a
 458+ 6EE0              ;                        ld      hl,(SBnKxlo)
 459+ 6EE0              ;                        ld      a,(SBnKxsgn)
 460+ 6EE0              ;                        push    af
 461+ 6EE0              ;                        and     SignMask8Bit
 462+ 6EE0              ;                        ld      ixl,a
 463+ 6EE0              ;                        ld      bc,(SBnKylo)
 464+ 6EE0              ;                        ld      a,(SBnKysgn)
 465+ 6EE0              ;                        and     SignMask8Bit
 466+ 6EE0              ;                        push    af
 467+ 6EE0              ;                        ld      iyh,a
 468+ 6EE0              ;.ShiftLoop:             ld      a,iyh
 469+ 6EE0              ;                        or      iyl
 470+ 6EE0              ;                        or      ixl
 471+ 6EE0              ;                        jr      z,.ShiftBit15
 472+ 6EE0              ;.ShiftZ:                SunShiftRight iyl, d, e
 473+ 6EE0              ;.ShiftX:                SunShiftRight ixl, h, l
 474+ 6EE0              ;.ShiftY:                SunShiftRight ixh, b, c
 475+ 6EE0              ;                        jr      .ShipLoop
 476+ 6EE0              ;.ShiftBit15:            ld      a,iyh
 477+ 6EE0              ;                        or      iyl
 478+ 6EE0              ;                        or      ixl
 479+ 6EE0              ;                        jr      z,.CompletedShift
 480+ 6EE0              ;.ShiftZ:                SunShiftRight iyl, d, e
 481+ 6EE0              ;.ShiftX:                SunShiftRight ixl, h, l
 482+ 6EE0              ;.ShiftY:                SunShiftRight ixh, b, c             ; finally shift to 15 bits so we can get the sign back
 483+ 6EE0              ;.CompletedShift:        pop     af                          ; get ysgn
 484+ 6EE0              ;                        and     SignOnly8Bit
 485+ 6EE0              ;                        or      b
 486+ 6EE0              ;                        ld      b,a
 487+ 6EE0              ;                        pop     af                          ; get xsgn
 488+ 6EE0              ;                        and     SignOnly8Bit
 489+ 6EE0              ;                        or      h
 490+ 6EE0              ;                        ld      h,a
 491+ 6EE0              ;                        pop     af                          ; get zsgn
 492+ 6EE0              ;                        and     SignOnly8Bit
 493+ 6EE0              ;                        or      d
 494+ 6EE0              ;                        ld      d,a
 495+ 6EE0              ;                        ret
 496+ 6EE0              ;
 497+ 6EE0 ED 5B 17 C0  ScalePlanetPos:         ld      de,(P_BnKzhi)               ; de = abs z & save sign on stack
 498+ 6EE4 7A                                   ld      a,d                         ; .
 499+ 6EE5 F5                                   push    af                          ; .
 500+ 6EE6 E6 7F                                and     SignMask8Bit                ; .
 501+ 6EE8 57                                   ld      d,a                         ; .
 502+ 6EE9 2A 11 C0                             ld      hl,(P_BnKxhi)               ; hl = abs x & save sign on stack
 503+ 6EEC 7C                                   ld      a,h                         ; .
 504+ 6EED F5                                   push    af                          ; .
 505+ 6EEE E6 7F                                and     SignMask8Bit                ; .
 506+ 6EF0 67                                   ld      h,a                         ; .
 507+ 6EF1 ED 4B 14 C0                          ld      bc,(P_BnKyhi)                ; bc = abs y & save sign on stack
 508+ 6EF5 78                                   ld      a,b                         ; .
 509+ 6EF6 F5                                   push    af                          ; .
 510+ 6EF7 E6 7F                                and     SignMask8Bit                ; .
 511+ 6EF9 47                                   ld      b,a                         ; .
 512+ 6EFA 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 513+ 6EFB B2                                   or      d                           ; .
 514+ 6EFC B4                                   or      h                           ; .
 515+ 6EFD 28 0E                                jr      z,.Shifted                  ; .
 516+ 6EFF                                      ShiftBCRight1                       ; .
 516+ 6EFF CB 38       >			   srl b
 516+ 6F01 CB 19       >			   rr  c
 517+ 6F03                                      ShiftHLRight1                       ; .
 517+ 6F03 CB 3C       >			   srl h
 517+ 6F05 CB 1D       >			   rr  l
 518+ 6F07                                      ShiftDERight1                       ; .
 518+ 6F07 CB 3A       >			   srl d
 518+ 6F09 CB 1B       >			   rr  e
 519+ 6F0B 18 ED                                jr      .ShiftLoop
 520+ 6F0D 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 521+ 6F0E B5                                   or      l                           ;
 522+ 6F0F B3                                   or      e                           ;
 523+ 6F10 E6 80                                and     $80                         ;
 524+ 6F12 28 0C                                jr      z,.NoAdditionalShift        ;
 525+ 6F14                                      ShiftBCRight1                       ; we want 7 bit
 525+ 6F14 CB 38       >			   srl b
 525+ 6F16 CB 19       >			   rr  c
 526+ 6F18                                      ShiftHLRight1                       ; to acommodate the sign
 526+ 6F18 CB 3C       >			   srl h
 526+ 6F1A CB 1D       >			   rr  l
 527+ 6F1C                                      ShiftDERight1                       ; .
 527+ 6F1C CB 3A       >			   srl d
 527+ 6F1E CB 1B       >			   rr  e
 528+ 6F20 F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 529+ 6F21 E6 80                                and     SignOnly8Bit                ;
 530+ 6F23 47                                   ld      b,a                         ; bc = shifted signed Y
 531+ 6F24 F1                                   pop     af                          ; get xsgn
 532+ 6F25 E6 80                                and     SignOnly8Bit                ;
 533+ 6F27 67                                   ld      h,a                         ; hl = shifted signed X
 534+ 6F28 F1                                   pop     af                          ; get zsgn
 535+ 6F29 E6 80                                and     SignOnly8Bit                ;
 536+ 6F2B 57                                   ld      d,a                         ; de = shifted signed Z
 537+ 6F2C C9                                   ret
 538+ 6F2D
 539+ 6F2D ED 5B 17 C0  ScaleSunPos:            ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 540+ 6F31 7A                                   ld      a,d                         ; .
 541+ 6F32 F5                                   push    af                          ; .
 542+ 6F33 E6 7F                                and     SignMask8Bit                ; .
 543+ 6F35 57                                   ld      d,a                         ; .
 544+ 6F36 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 545+ 6F39 7C                                   ld      a,h                         ; .
 546+ 6F3A F5                                   push    af                          ; .
 547+ 6F3B E6 7F                                and     SignMask8Bit                ; .
 548+ 6F3D 67                                   ld      h,a                         ; .
 549+ 6F3E ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 550+ 6F42 78                                   ld      a,b                         ; .
 551+ 6F43 F5                                   push    af                          ; .
 552+ 6F44 E6 7F                                and     SignMask8Bit                ; .
 553+ 6F46 47                                   ld      b,a                         ; .
 554+ 6F47 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 555+ 6F48 B2                                   or      d                           ; .
 556+ 6F49 B4                                   or      h                           ; .
 557+ 6F4A 28 0E                                jr      z,.Shifted                  ; .
 558+ 6F4C                                      ShiftBCRight1                       ; .
 558+ 6F4C CB 38       >			   srl b
 558+ 6F4E CB 19       >			   rr  c
 559+ 6F50                                      ShiftHLRight1                       ; .
 559+ 6F50 CB 3C       >			   srl h
 559+ 6F52 CB 1D       >			   rr  l
 560+ 6F54                                      ShiftDERight1                       ; .
 560+ 6F54 CB 3A       >			   srl d
 560+ 6F56 CB 1B       >			   rr  e
 561+ 6F58 18 ED                                jr      .ShiftLoop
 562+ 6F5A 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 563+ 6F5B B5                                   or      l                           ;
 564+ 6F5C B3                                   or      e                           ;
 565+ 6F5D E6 80                                and     $80                         ;
 566+ 6F5F 28 0C                                jr      z,.NoAdditionalShift        ;
 567+ 6F61                                      ShiftBCRight1                       ; we want 7 bit
 567+ 6F61 CB 38       >			   srl b
 567+ 6F63 CB 19       >			   rr  c
 568+ 6F65                                      ShiftHLRight1                       ; to acommodate the sign
 568+ 6F65 CB 3C       >			   srl h
 568+ 6F67 CB 1D       >			   rr  l
 569+ 6F69                                      ShiftDERight1                       ; .
 569+ 6F69 CB 3A       >			   srl d
 569+ 6F6B CB 1B       >			   rr  e
 570+ 6F6D F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 571+ 6F6E E6 80                                and     SignOnly8Bit                ;
 572+ 6F70 47                                   ld      b,a                         ; bc = shifted signed Y
 573+ 6F71 F1                                   pop     af                          ; get xsgn
 574+ 6F72 E6 80                                and     SignOnly8Bit                ;
 575+ 6F74 67                                   ld      h,a                         ; hl = shifted signed X
 576+ 6F75 F1                                   pop     af                          ; get zsgn
 577+ 6F76 E6 80                                and     SignOnly8Bit                ;
 578+ 6F78 57                                   ld      d,a                         ; de = shifted signed Z
 579+ 6F79 C9                                   ret
 580+ 6F7A
 581+ 6F7A              ;compass sun
 582+ 6F7A              ;            if value is still 24 bit
 583+ 6F7A              ;                copy xhi/xsgn y and z to xxx15 ([2 1 0 ] [ 5 4 3] [ 8 7 6 ]
 584+ 6F7A              ;                normalise vector (note this assumes sun is just sign byte+ 2 bytes)
 585+ 6F7A              ;                tempk39 = OR 3 low bytes
 586+ 6F7A              ;                tempkA = OR 3 high bytes
 587+ 6F7A              ;                 TAL2:    repeat
 588+ 6F7A              ;                             asl tempka tempk39
 589+ 6F7A              ;                             exit if carry set
 590+ 6F7A              ;                             x coord << 1
 591+ 6F7A              ;                             y corrd << 1
 592+ 6F7A              ;                             z coord << 1
 593+ 6F7A              ;                          until carry clear
 594+ 6F7A              ;                 TA2:     shift x y and z right one and put sign bit in from sign bytes
 595+ 6F7A              ;                          now XX15 holds sign + 7 bit bytes maximused for coords
 596+ 6F7A              ;                          RQ = AP = X ^ 2
 597+ 6F7A              ;                          TP = AP = Y ^ 2
 598+ 6F7A              ;                          RQ = RQ + TP
 599+ 6F7A              ;                          TP = AP = Z ^ 2
 600+ 6F7A              ;                          RQ = RQ + TP
 601+ 6F7A              ;                          Q = SQRT (RQ)
 602+ 6F7A              ;                          for each coord - A = A/Q * 3/ 8
 603+ 6F7A              ;
 604+ 6F7A              ;
 605+ 6F7A
 606+ 6F7A ED 5B 17 C0  UpscaleSunPosition:     ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 607+ 6F7E 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 608+ 6F81 ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 609+ 6F85 7A                                   ld      a,d
 610+ 6F86 E6 80                                and     SignOnly8Bit
 611+ 6F88 CB 3F                                srl     a
 612+ 6F8A FD 6F                                ld      iyl,a
 613+ 6F8C 7C                                   ld      a,h
 614+ 6F8D E6 80                                and     SignOnly8Bit
 615+ 6F8F FD B5                                or      iyl
 616+ 6F91 CB 3F                                srl     a
 617+ 6F93 78                                   ld      a,b
 618+ 6F94 E6 80                                and     SignOnly8Bit
 619+ 6F96 FD B5                                or      iyl
 620+ 6F98 FD 6F                                ld      iyl,a                       ; IYL now equals YXH00000 where letters = sign bits
 621+ 6F9A                                      ClearSignBit d
 621+ 6F9A 7A          >                        ld      a,d
 621+ 6F9B E6 7F       >                        and     SignMask8Bit
 621+ 6F9D 57          >                        ld      d,a
 622+ 6F9E                                      ClearSignBit h
 622+ 6F9E 7C          >                        ld      a,h
 622+ 6F9F E6 7F       >                        and     SignMask8Bit
 622+ 6FA1 67          >                        ld      h,a
 623+ 6FA2                                      ClearSignBit b
 623+ 6FA2 78          >                        ld      a,b
 623+ 6FA3 E6 7F       >                        and     SignMask8Bit
 623+ 6FA5 47          >                        ld      b,a
 624+ 6FA6 78                                   ld      a,b
 625+ 6FA7 B3                                   or      e
 626+ 6FA8 B4                                   or      h
 627+ 6FA9 B5                                   or      l
 628+ 6FAA B0                                   or      b
 629+ 6FAB B1                                   or      c
 630+ 6FAC 28 41                                jr      z, .Setto1                 ; to prevent and infinite loop in upscale if all zero
 631+ 6FAE 7A                                   ld      a,d
 632+ 6FAF B3                                   or      e
 633+ 6FB0 B4                                   or      h
 634+ 6FB1 CB 27                                sla     a
 635+ 6FB3 38 15                                jr      c,.DoneCalc
 636+ 6FB5 28 13                                jr      z,.DoneCalc
 637+ 6FB7              .UpscaleLoop:           ShiftDELeft1
 637+ 6FB7 CB 23       >			   sla e
 637+ 6FB9 CB 12       >			   rl  d
 638+ 6FBB                                      ShiftHLLeft1
 638+ 6FBB CB 25       >			   sla l
 638+ 6FBD CB 14       >			   rl  h
 639+ 6FBF                                      ShiftBCLeft1
 639+ 6FBF CB 21       >			   sla c
 639+ 6FC1 CB 10       >			   rl  b
 640+ 6FC3 CB 27                                sla     a
 641+ 6FC5 38 03                                jr      c,.DoneCalc
 642+ 6FC7 C3 B7 6F                             jp      .UpscaleLoop
 643+ 6FCA              .DoneCalc               ShiftDERight1
 643+ 6FCA CB 3A       >			   srl d
 643+ 6FCC CB 1B       >			   rr  e
 644+ 6FCE                                      ShiftHLRight1
 644+ 6FCE CB 3C       >			   srl h
 644+ 6FD0 CB 1D       >			   rr  l
 645+ 6FD2                                      ShiftBCRight1
 645+ 6FD2 CB 38       >			   srl b
 645+ 6FD4 CB 19       >			   rr  c
 646+ 6FD6 5A           .NowSetResultInLowByte: ld      e,d
 647+ 6FD7 6C                                   ld      l,h
 648+ 6FD8 48                                   ld      c,b
 649+ 6FD9 FD 7D                                ld      a,iyl
 650+ 6FDB E6 80                                and     SignOnly8Bit
 651+ 6FDD 47                                   ld      b,a
 652+ 6FDE FD 7D                                ld      a,iyl
 653+ 6FE0 CB 27                                sla     a
 654+ 6FE2 FD 6F                                ld      iyl,a
 655+ 6FE4 E6 80                                and     SignOnly8Bit
 656+ 6FE6 67                                   ld      h,a
 657+ 6FE7 FD 7D                                ld      a,iyl
 658+ 6FE9 CB 27                                sla     a
 659+ 6FEB E6 80                                and     SignOnly8Bit
 660+ 6FED 57                                   ld      d,a
 661+ 6FEE C9                                   ret
 662+ 6FEF 3E 01        .Setto1:                ld      a,1
 663+ 6FF1 4F                                   ld      c,a
 664+ 6FF2 5F                                   ld      e,a
 665+ 6FF3 6F                                   ld      l,a
 666+ 6FF4 FD 7D                                ld      a,iyl
 667+ 6FF6 CB 27                                sla     a
 668+ 6FF8 CB 27                                sla     a
 669+ 6FFA E6 80                                and     SignOnly8Bit
 670+ 6FFC B3                                   or      e
 671+ 6FFD 5F                                   ld      e,a
 672+ 6FFE C9                                   ret
 673+ 6FFF
 674+ 6FFF
 675+ 6FFF              UpdateCompassSun:       MMUSelectSun
 675+ 6FFF ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 676+ 7003 CD 2D 6F                             call    ScaleSunPos                 ; get as 7 bit signed
 677+ 7006 C5 E5 D5                             push    bc,,hl,,de                  ; +3 save to stack Y, X and Z scaled and signed hihg = sign, low = 7 bit value
 678+ 7009 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 679+ 700A 59                                   ld      e,c                         ; .
 680+ 700B ED 30                                mul                                 ; .
 681+ 700D 42 4B                                ld      bc,de                       ; .
 682+ 700F 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 683+ 7010 5D                                   ld      e,l                         ; .
 684+ 7011 ED 30                                mul                                 ; .
 685+ 7013 EB                                   ex      de,hl                       ; .
 686+ 7014 D1           .normaliseZSqr:         pop     de                          ; +2 get Z saved from stack so now stack contains Y Z X
 687+ 7015 53                                   ld      d,e                         ; de = z ^
 688+ 7016 ED 30                                mul                                 ; .
 689+ 7018 19           .normaliseSqrt:         add     hl,de                       ; de = x^2 + y^2 + z^2
 690+ 7019 09                                   add     hl,bc                       ; .
 691+ 701A EB                                   ex      de,hl                       ; .
 692+ 701B CD 81 91                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 693+ 701E                                      ; if h <> 0 then more difficult
 694+ 701E 55                                   ld      d,l                         ; iyl = q
 695+ 701F FD 6A                                ld      iyl,d                       ; .
 696+ 7021 E1           .NormaliseX:            pop     hl                          ; +1 get back hl x scaled
 697+ 7022 7C                                   ld      a,h                         ; c = sign
 698+ 7023 E6 80                                and     SignOnly8Bit                ; .
 699+ 7025 4F                                   ld      c,a                         ; .
 700+ 7026 C5                                   push    bc                          ; +2 save bc temporarily as it will get altered
 701+ 7027 7D                                   ld      a,l                         ; a = 8 bit abs z
 702+ 7028 CD 46 9A                             call    AequAdivQmul96ABS           ; e = a /q * 96 (d was already loaded with q)
 703+ 702B 5F                                   ld      e,a                         ; .
 704+ 702C                                      EDiv10Inline                        ; a = e / 10
 704+ 702C 16 00       >                        ld      d,0
 704+ 702E 62 6B       >                        ld      hl,de
 704+ 7030 29          >                        add     hl,hl
 704+ 7031 19          >                        add     hl,de
 704+ 7032 29          >                        add     hl,hl
 704+ 7033 29          >                        add     hl,hl
 704+ 7034 19          >                        add     hl,de
 704+ 7035 29          >                        add     hl,hl
 705+ 7036 7C                                   ld      a,h                         ; .
 706+ 7037 C1                                   pop     bc                          ; +1 retrieve bc
 707+ 7038 FE 00                                cp      0                           ; if result in h was 0 then done
 708+ 703A 28 06                                jr      z,.DoneNormX                ; in case we end up with - 0
 709+ 703C CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 710+ 703E 28 02                                jr      z,.DoneNormX
 711+ 7040 ED 44                                neg
 712+ 7042 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 713+ 7044 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 714+ 7046 E1                                   pop     hl                          ; +0 hl y scaled
 715+ 7047 7C                                   ld      a,h                         ; c = sign
 716+ 7048 E6 80                                and     SignOnly8Bit                ; .
 717+ 704A 4F                                   ld      c,a                         ; .
 718+ 704B C5                                   push    bc                          ; +1 save sign to stack
 719+ 704C 7D                                   ld      a,l                         ; a = 8 bit signed z
 720+ 704D CD 46 9A                             call    AequAdivQmul96ABS           ; .
 721+ 7050 5F                                   ld      e,a                         ; a = e / 10
 722+ 7051                                      EDiv10Inline                        ; .
 722+ 7051 16 00       >                        ld      d,0
 722+ 7053 62 6B       >                        ld      hl,de
 722+ 7055 29          >                        add     hl,hl
 722+ 7056 19          >                        add     hl,de
 722+ 7057 29          >                        add     hl,hl
 722+ 7058 29          >                        add     hl,hl
 722+ 7059 19          >                        add     hl,de
 722+ 705A 29          >                        add     hl,hl
 723+ 705B 7C                                   ld      a,h                         ; retrieve sign
 724+ 705C C1                                   pop     bc                          ; +1 retrieve sign
 725+ 705D FE 00                                cp      0
 726+ 705F 28 06                                jr      z,.DoneNormY                ; in case we end up with - 0
 727+ 7061 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 728+ 7063 28 02                                jr      z,.DoneNormY
 729+ 7065 ED 44                                neg                                 ;
 730+ 7067 47           .DoneNormY:             ld      b,a                         ; result from Y
 731+ 7068 DD 4C                                ld      c,ixh                       ; x = saved X
 732+ 706A              .SetSprite:             MMUSelectSpriteBank
 732+ 706A ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 733+ 706E CD 05 E1                             call    compass_sun_move
 734+ 7071 3A 18 C0                             ld      a,(SBnKzsgn)
 735+ 7074 CB 7F                                bit     7,a
 736+ 7076 20 04                                jr      nz,.SunBehind
 737+ 7078 CD 1C E2     .SunInfront:            call    show_compass_sun_infront
 738+ 707B C9                                   ret
 739+ 707C CD 27 E2     .SunBehind:             call    show_compass_sun_behind
 740+ 707F C9                                   ret
 741+ 7080
 742+ 7080
 743+ 7080              UpdateCompassPlanet:    MMUSelectPlanet
 743+ 7080 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 744+ 7084 CD E0 6E                             call    ScalePlanetPos              ; get as 7 bit signed
 745+ 7087 C5 E5 D5                             push    bc,,hl,,de                  ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 746+ 708A 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 747+ 708B 59                                   ld      e,c                         ; .
 748+ 708C ED 30                                mul                                 ; .
 749+ 708E 42 4B                                ld      bc,de                       ; .
 750+ 7090 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 751+ 7091 5D                                   ld      e,l                         ; .
 752+ 7092 ED 30                                mul                                 ; .
 753+ 7094 EB                                   ex      de,hl                       ; .
 754+ 7095 D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 755+ 7096 53                                   ld      d,e                         ; de = z ^
 756+ 7097 ED 30                                mul                                 ; .
 757+ 7099 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + z^2
 758+ 709A 09                                   add     hl,bc
 759+ 709B EB                                   ex      de,hl
 760+ 709C CD 81 91                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 761+ 709F                                      ; if h <> 0 then more difficult
 762+ 709F 55                                   ld      d,l                         ; iyl = q
 763+ 70A0 FD 6A                                ld      iyl,d                       ; .
 764+ 70A2 E1           .NormaliseX:            pop     hl                          ; hl x scaled
 765+ 70A3 7C                                   ld      a,h                         ; c = sign
 766+ 70A4 E6 80                                and     SignOnly8Bit                ; .
 767+ 70A6 4F                                   ld      c,a                         ; .
 768+ 70A7 C5                                   push    bc                          ; save sign to stack
 769+ 70A8 7D                                   ld      a,l                         ; a = 8 bit abs z
 770+ 70A9 CD 46 9A                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 771+ 70AC 5F                                   ld      e,a                         ; .
 772+ 70AD                                      EDiv10Inline                        ; a = e / 10
 772+ 70AD 16 00       >                        ld      d,0
 772+ 70AF 62 6B       >                        ld      hl,de
 772+ 70B1 29          >                        add     hl,hl
 772+ 70B2 19          >                        add     hl,de
 772+ 70B3 29          >                        add     hl,hl
 772+ 70B4 29          >                        add     hl,hl
 772+ 70B5 19          >                        add     hl,de
 772+ 70B6 29          >                        add     hl,hl
 773+ 70B7 7C                                   ld      a,h                         ; .
 774+ 70B8 C1                                   pop     bc                          ; retrieve sign
 775+ 70B9 FE 00                                cp      0
 776+ 70BB 28 06                                jr      z,.DoneNormX                ; in case we end up with - 0
 777+ 70BD CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 778+ 70BF 28 02                                jr      z,.DoneNormX
 779+ 70C1 ED 44                                neg
 780+ 70C3 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 781+ 70C5 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 782+ 70C7 E1                                   pop     hl                          ; hl y scaled
 783+ 70C8 7C                                   ld      a,h                         ; c = sign
 784+ 70C9 E6 80                                and     SignOnly8Bit                ; .
 785+ 70CB 4F                                   ld      c,a                         ; .
 786+ 70CC C5                                   push    bc                          ; save sign to stack
 787+ 70CD 7D                                   ld      a,l                         ; a = 8 bit signed z
 788+ 70CE CD 46 9A                             call    AequAdivQmul96ABS           ; .
 789+ 70D1 5F                                   ld      e,a                         ; a = e / 10
 790+ 70D2                                      EDiv10Inline                        ; .
 790+ 70D2 16 00       >                        ld      d,0
 790+ 70D4 62 6B       >                        ld      hl,de
 790+ 70D6 29          >                        add     hl,hl
 790+ 70D7 19          >                        add     hl,de
 790+ 70D8 29          >                        add     hl,hl
 790+ 70D9 29          >                        add     hl,hl
 790+ 70DA 19          >                        add     hl,de
 790+ 70DB 29          >                        add     hl,hl
 791+ 70DC 7C                                   ld      a,h                         ; retrieve sign
 792+ 70DD C1                                   pop     bc                          ; retrieve sign
 793+ 70DE FE 00                                cp      0
 794+ 70E0 28 06                                jr      z,.DoneNormY                 ; in case we end up with - 0
 795+ 70E2 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 796+ 70E4 28 02                                jr      z,.DoneNormY
 797+ 70E6 ED 44                                neg                                 ;
 798+ 70E8 47           .DoneNormY:             ld      b,a                         ; result from Y
 799+ 70E9 DD 4C                                ld      c,ixh                       ; x = saved X
 800+ 70EB              .SetSprite:             MMUSelectSpriteBank
 800+ 70EB ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 801+ 70EF CD 17 E1                             call    compass_station_move
 802+ 70F2 3A 18 C0                             ld      a,(P_BnKzsgn)
 803+ 70F5 CB 7F                                bit     7,a
 804+ 70F7 20 04                                jr      nz,.PlanetBehind
 805+ 70F9 CD 32 E2     .PlanetInfront:         call    show_compass_station_infront
 806+ 70FC C9                                   ret
 807+ 70FD CD 3D E2     .PlanetBehind:          call    show_compass_station_behind
 808+ 7100 C9                                   ret
 809+ 7101
 810+ 7101              UpdatePlanetSun:        MMUSelectPlanet
 810+ 7101 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 811+ 7105                                      Shift24BitScan  P_BnKyhi, P_BnKylo
 811+ 7105 2A 14 C0    >                        ld      hl,(P_BnKyhi)
 811+ 7108 44          >                        ld      b,h
 811+ 7109 7C          >                        ld      a,h
 811+ 710A E6 7F       >                        and     SignMask8Bit
 811+ 710C 67          >                        ld      h,a
 811+ 710D 3A 13 C0    >                        ld      a,(P_BnKylo)
 811+ 7110 CB 27       >                        sla     a
 811+ 7112 CB 15       >                        rl      l
 811+ 7114 CB 14       >                        rl      h
 811+ 7116 CB 27       >                        sla     a
 811+ 7118 CB 15       >                        rl      l
 811+ 711A CB 14       >                        rl      h
 811+ 711C CB 27       >                        sla     a
 811+ 711E CB 15       >                        rl      l
 811+ 7120 CB 14       >                        rl      h
 811+ 7122 CB 27       >                        sla     a
 811+ 7124 CB 15       >                        rl      l
 811+ 7126 CB 14       >                        rl      h
 811+ 7128 CB 27       >                        sla     a
 811+ 712A CB 15       >                        rl      l
 811+ 712C CB 14       >                        rl      h
 811+ 712E CB 27       >                        sla     a
 811+ 7130 CB 15       >                        rl      l
 811+ 7132 CB 14       >                        rl      h
 812+ 7134 3A 12 C0     .IsItInRange:           ld      a,(P_BnKxsgn)                ; if the high byte is not
 813+ 7137 21 15 C0                             ld      hl,P_BnKysgn                 ; a sign only
 814+ 713A B6                                   or      (hl)                        ; then its too far away
 815+ 713B 21 18 C0                             ld      hl,P_BnKzsgn                 ; for the scanner to draw
 816+ 713E B6                                   or      (hl)                        ; so rely on the compass
 817+ 713F E6 7F                                and     SignMask8Bit                ;
 818+ 7141 C0                                   ret     nz                          ;
 819+ 7142 2A 16 C0     .ItsInRange:            ld      hl,(P_BnKzlo)                ; we will get unsigned values
 820+ 7145 ED 5B 10 C0                          ld      de,(P_BnKxlo)
 821+ 7149 ED 4B 13 C0                          ld      bc,(P_BnKylo)
 822+ 714D 7C                                   ld      a,h
 823+ 714E B2                                   or      d
 824+ 714F B0                                   or      b
 825+ 7150 E6 C0                                and     %11000000
 826+ 7152 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 827+ 7153 3A 12 C0     .MakeX2Compliment:      ld      a,(P_BnKxsgn)
 828+ 7156 CB 7F                                bit     7,a
 829+ 7158 28 04                                jr      z,.absXHi
 830+ 715A                                      NegD
 830+ 715A 7A          >                    ld      a,d
 830+ 715B ED 44       >                    neg
 830+ 715D 57          >                    ld      d,a
 831+ 715E 7A           .absXHi:                ld      a,d
 832+ 715F C6 80                                add     ScannerX
 833+ 7161 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 834+ 7163 CB 3C        .ProcessZCoord:         srl     h
 835+ 7165 CB 3C                                srl     h
 836+ 7167 3A 18 C0     .MakeZ2Compliment:      ld      a,(P_BnKzsgn)
 837+ 716A CB 7F                                bit     7,a
 838+ 716C 28 04                                jr      z,.absZHi
 839+ 716E                                      NegH
 839+ 716E 7C          >                    ld      a,h
 839+ 716F ED 44       >                    neg
 839+ 7171 67          >                    ld      h,a
 840+ 7172 3E AB        .absZHi:                ld      a,ScannerY
 841+ 7174 94                                   sub     h
 842+ 7175 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 843+ 7177 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 844+ 7179 20 0B                                jr      nz,.StickHasLength
 845+ 717B FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 846+ 717D FD 6F                                ld      iyl,a
 847+ 717F                                      MMUSelectLayer2
 847+ 717F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 848+ 7183 C3 AE 71                             jp      .NoStick
 849+ 7186 3A 15 C0     .StickHasLength:        ld      a,(P_BnKysgn)                ; if b  =  0 then no line
 850+ 7189 CB 7F                                bit     7,a
 851+ 718B 28 04                                jr      z,.absYHi
 852+ 718D                                      NegB
 852+ 718D 78          >                    ld      a,b
 852+ 718E ED 44       >                    neg
 852+ 7190 47          >                    ld      b,a
 853+ 7191 FD 7C        .absYHi:                ld      a,iyh
 854+ 7193 90           .SetStickPos:           sub     b
 855+ 7194                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 855+ 7194 FE BE       >                        cp      ScannerBottom
 855+ 7196 DA 9B 71    >                        jp		c, .StickOnScreen
 856+ 7199 3E BE                                ld      a,ScannerBottom
 857+ 719B FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 858+ 719D DD 6F                                ld      ixl,a
 859+ 719F FD 44                                ld      b,iyh                       ; from row
 860+ 71A1 DD 4C                                ld      c,ixh                       ; from col
 861+ 71A3 FD 55                                ld      d,iyl                       ; to row
 862+ 71A5 1E B4                                ld      e,L2SunScanner
 863+ 71A7                                      MMUSelectLayer2
 863+ 71A7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 864+ 71AB CD 55 E5                             call    l2_draw_vert_line_to
 865+ 71AE FD 45        .NoStick:               ld      b,iyl                       ; row
 866+ 71B0 DD 4C                                ld      c,ixh                       ; col
 867+ 71B2 3E FC                                ld      a,L2SunScannerBright
 868+ 71B4 CD B6 E2                             call    l2_plot_pixel
 869+ 71B7 FD 45                                ld      b,iyl
 870+ 71B9 DD 4C                                ld      c,ixh
 871+ 71BB 0C                                   inc     c
 872+ 71BC 3E FC                                ld      a,L2SunScannerBright
 873+ 71BE CD B6 E2                             call    l2_plot_pixel
 874+ 71C1 C9                                   ret
 875+ 71C2
 876+ 71C2              UpdateCompassStation:   MMUSelectShipBankN 0
 876+ 71C2 ED 91 57 00 >					 nextreg ShipModelMMU,	    0
 877+ 71C6
 878+ 71C6 CD 2D 6F                             call    ScaleSunPos                 ; get as 7 bit signed
 879+ 71C9 C5 D5 E5 D5                          push    bc,,de,,hl,,de              ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 880+ 71CD 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 881+ 71CE 59                                   ld      e,c                         ; .
 882+ 71CF ED 30                                mul                                 ; .
 883+ 71D1 42 4B                                ld      bc,de                       ; .
 884+ 71D3 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 885+ 71D4 5D                                   ld      e,l                         ; .
 886+ 71D5 ED 30                                mul                                 ; .
 887+ 71D7 EB                                   ex      de,hl                       ; .
 888+ 71D8 D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 889+ 71D9 53                                   ld      d,e                         ; de = z ^
 890+ 71DA ED 30                                mul                                 ; .
 891+ 71DC 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + x^2
 892+ 71DD 09                                   add     hl,bc
 893+ 71DE EB                                   ex      de,hl
 894+ 71DF CD 81 91                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 895+ 71E2                                      ; if h <> 0 then more difficult
 896+ 71E2 55                                   ld      d,l                         ; iyl = q
 897+ 71E3 FD 6A                                ld      iyl,d                       ; .
 898+ 71E5 E1           .NormaliseX:            pop     hl                          ; hl x scaled
 899+ 71E6 7C                                   ld      a,h                         ; c = sign
 900+ 71E7 E6 80                                and     SignOnly8Bit                ; .
 901+ 71E9 4F                                   ld      c,a                         ; .
 902+ 71EA C5                                   push    bc                          ; save sign to stack
 903+ 71EB 7D                                   ld      a,l                         ; a = 8 bit abs z
 904+ 71EC CD 46 9A                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 905+ 71EF 5F                                   ld      e,a                         ; .
 906+ 71F0                                      EDiv10Inline                        ; a = e / 10
 906+ 71F0 16 00       >                        ld      d,0
 906+ 71F2 62 6B       >                        ld      hl,de
 906+ 71F4 29          >                        add     hl,hl
 906+ 71F5 19          >                        add     hl,de
 906+ 71F6 29          >                        add     hl,hl
 906+ 71F7 29          >                        add     hl,hl
 906+ 71F8 19          >                        add     hl,de
 906+ 71F9 29          >                        add     hl,hl
 907+ 71FA 7C                                   ld      a,h                         ; .
 908+ 71FB C1                                   pop     bc                          ; retrieve sign
 909+ 71FC FE 00                                cp      0
 910+ 71FE 28 06                                jr      z,.DoneNormX                 ; in case we end up with - 0
 911+ 7200 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 912+ 7202 28 02                                jr      z,.DoneNormX
 913+ 7204 ED 44                                neg
 914+ 7206 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 915+ 7208 FD 55        .NormaliseZ:            ld      d,iyl                       ; d = q
 916+ 720A E1                                   pop     hl                          ; hl z scaled
 917+ 720B 7C                                   ld      a,h                         ; c = sign
 918+ 720C E6 80                                and     SignOnly8Bit                ; .
 919+ 720E 4F                                   ld      c,a                         ; .
 920+ 720F C5                                   push    bc                          ; save sign to stack
 921+ 7210 7D                                   ld      a,l                         ; e = a /q * 96
 922+ 7211 CD 46 9A                             call    AequAdivQmul96ABS              ; .
 923+ 7214 5F                                   ld      e,a                         ; a = e / 10
 924+ 7215                                      EDiv10Inline                        ; .
 924+ 7215 16 00       >                        ld      d,0
 924+ 7217 62 6B       >                        ld      hl,de
 924+ 7219 29          >                        add     hl,hl
 924+ 721A 19          >                        add     hl,de
 924+ 721B 29          >                        add     hl,hl
 924+ 721C 29          >                        add     hl,hl
 924+ 721D 19          >                        add     hl,de
 924+ 721E 29          >                        add     hl,hl
 925+ 721F 7C                                   ld      a,h                         ; retrieve sign
 926+ 7220 C1                                   pop     bc                          ; retrieve sign
 927+ 7221 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 928+ 7223 28 02                                jr      z,.DoneNormZ
 929+ 7225 ED 44                                neg
 930+ 7227 DD 6F        .DoneNormZ:             ld      ixl,a                       ; .
 931+ 7229 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 932+ 722B E1                                   pop     hl                          ; hl y scaled
 933+ 722C 7C                                   ld      a,h                         ; c = sign
 934+ 722D E6 80                                and     SignOnly8Bit                ; .
 935+ 722F 4F                                   ld      c,a                         ; .
 936+ 7230 C5                                   push    bc                          ; save sign to stack
 937+ 7231 7D                                   ld      a,l                         ; a = 8 bit signed z
 938+ 7232 CD 46 9A                             call    AequAdivQmul96ABS              ; .
 939+ 7235 5F                                   ld      e,a                         ; a = e / 10
 940+ 7236                                      EDiv10Inline                        ; .
 940+ 7236 16 00       >                        ld      d,0
 940+ 7238 62 6B       >                        ld      hl,de
 940+ 723A 29          >                        add     hl,hl
 940+ 723B 19          >                        add     hl,de
 940+ 723C 29          >                        add     hl,hl
 940+ 723D 29          >                        add     hl,hl
 940+ 723E 19          >                        add     hl,de
 940+ 723F 29          >                        add     hl,hl
 941+ 7240 7C                                   ld      a,h                         ; retrieve sign
 942+ 7241 C1                                   pop     bc                          ; retrieve sign
 943+ 7242 FE 00                                cp      0
 944+ 7244 28 06                                jr      z,.DoneNormY                ; in case we end up with - 0
 945+ 7246 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 946+ 7248 28 02                                jr      z,.DoneNormY
 947+ 724A ED 44                                neg
 948+ 724C 47           .DoneNormY:             ld      b,a                         ; .
 949+ 724D DD 4C                                ld      c,ixh
 950+ 724F              .SetSprite:             MMUSelectSpriteBank
 950+ 724F ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 951+ 7253 CD 05 E1                             call    compass_sun_move
 952+ 7256 DD 7D                                ld      a,ixl
 953+ 7258 CB 7F                                bit     7,a
 954+ 725A 20 04                                jr      nz,.SunBehind
 955+ 725C CD 1C E2     .SunInfront:            call    show_compass_sun_infront
 956+ 725F C9                                   ret
 957+ 7260 CD 27 E2     .SunBehind:             call    show_compass_sun_behind
 958+ 7263 C9                                   ret
 959+ 7264
 960+ 7264
 961+ 7264              UpdateScannerSun:       MMUSelectSun
 961+ 7264 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 962+ 7268                                      Shift24BitScan  SBnKyhi, SBnKylo
 962+ 7268 2A 14 C0    >                        ld      hl,(SBnKyhi)
 962+ 726B 44          >                        ld      b,h
 962+ 726C 7C          >                        ld      a,h
 962+ 726D E6 7F       >                        and     SignMask8Bit
 962+ 726F 67          >                        ld      h,a
 962+ 7270 3A 13 C0    >                        ld      a,(SBnKylo)
 962+ 7273 CB 27       >                        sla     a
 962+ 7275 CB 15       >                        rl      l
 962+ 7277 CB 14       >                        rl      h
 962+ 7279 CB 27       >                        sla     a
 962+ 727B CB 15       >                        rl      l
 962+ 727D CB 14       >                        rl      h
 962+ 727F CB 27       >                        sla     a
 962+ 7281 CB 15       >                        rl      l
 962+ 7283 CB 14       >                        rl      h
 962+ 7285 CB 27       >                        sla     a
 962+ 7287 CB 15       >                        rl      l
 962+ 7289 CB 14       >                        rl      h
 962+ 728B CB 27       >                        sla     a
 962+ 728D CB 15       >                        rl      l
 962+ 728F CB 14       >                        rl      h
 962+ 7291 CB 27       >                        sla     a
 962+ 7293 CB 15       >                        rl      l
 962+ 7295 CB 14       >                        rl      h
 963+ 7297 3A 12 C0     .IsItInRange:           ld      a,(SBnKxsgn)                ; if the high byte is not
 964+ 729A 21 15 C0                             ld      hl,SBnKysgn                 ; a sign only
 965+ 729D B6                                   or      (hl)                        ; then its too far away
 966+ 729E 21 18 C0                             ld      hl,SBnKzsgn                 ; for the scanner to draw
 967+ 72A1 B6                                   or      (hl)                        ; so rely on the compass
 968+ 72A2 E6 7F                                and     SignMask8Bit                ;
 969+ 72A4 C0                                   ret     nz                          ;
 970+ 72A5 2A 16 C0     .ItsInRange:            ld      hl,(SBnKzlo)                ; we will get unsigned values
 971+ 72A8 ED 5B 10 C0                          ld      de,(SBnKxlo)
 972+ 72AC ED 4B 13 C0                          ld      bc,(SBnKylo)
 973+ 72B0 7C                                   ld      a,h
 974+ 72B1 B2                                   or      d
 975+ 72B2 B0                                   or      b
 976+ 72B3 E6 C0                                and     %11000000
 977+ 72B5 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 978+ 72B6 3A 12 C0     .MakeX2Compliment:      ld      a,(SBnKxsgn)
 979+ 72B9 CB 7F                                bit     7,a
 980+ 72BB 28 04                                jr      z,.absXHi
 981+ 72BD                                      NegD
 981+ 72BD 7A          >                    ld      a,d
 981+ 72BE ED 44       >                    neg
 981+ 72C0 57          >                    ld      d,a
 982+ 72C1 7A           .absXHi:                ld      a,d
 983+ 72C2 C6 80                                add     ScannerX
 984+ 72C4 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 985+ 72C6 CB 3C        .ProcessZCoord:         srl     h
 986+ 72C8 CB 3C                                srl     h
 987+ 72CA 3A 18 C0     .MakeZ2Compliment:      ld      a,(SBnKzsgn)
 988+ 72CD CB 7F                                bit     7,a
 989+ 72CF 28 04                                jr      z,.absZHi
 990+ 72D1                                      NegH
 990+ 72D1 7C          >                    ld      a,h
 990+ 72D2 ED 44       >                    neg
 990+ 72D4 67          >                    ld      h,a
 991+ 72D5 3E AB        .absZHi:                ld      a,ScannerY
 992+ 72D7 94                                   sub     h
 993+ 72D8 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 994+ 72DA CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 995+ 72DC 20 0B                                jr      nz,.StickHasLength
 996+ 72DE FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 997+ 72E0 FD 6F                                ld      iyl,a
 998+ 72E2                                      MMUSelectLayer2
 998+ 72E2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 999+ 72E6 C3 11 73                             jp      .NoStick
1000+ 72E9 3A 15 C0     .StickHasLength:        ld      a,(SBnKysgn)                ; if b  =  0 then no line
1001+ 72EC CB 7F                                bit     7,a
1002+ 72EE 28 04                                jr      z,.absYHi
1003+ 72F0                                      NegB
1003+ 72F0 78          >                    ld      a,b
1003+ 72F1 ED 44       >                    neg
1003+ 72F3 47          >                    ld      b,a
1004+ 72F4 FD 7C        .absYHi:                ld      a,iyh
1005+ 72F6 90           .SetStickPos:           sub     b
1006+ 72F7                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
1006+ 72F7 FE BE       >                        cp      ScannerBottom
1006+ 72F9 DA FE 72    >                        jp		c, .StickOnScreen
1007+ 72FC 3E BE                                ld      a,ScannerBottom
1008+ 72FE FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
1009+ 7300 DD 6F                                ld      ixl,a
1010+ 7302 FD 44                                ld      b,iyh                       ; from row
1011+ 7304 DD 4C                                ld      c,ixh                       ; from col
1012+ 7306 FD 55                                ld      d,iyl                       ; to row
1013+ 7308 1E B4                                ld      e,L2SunScanner
1014+ 730A                                      MMUSelectLayer2
1014+ 730A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1015+ 730E CD 55 E5                             call    l2_draw_vert_line_to
1016+ 7311 FD 45        .NoStick:               ld      b,iyl                       ; row
1017+ 7313 DD 4C                                ld      c,ixh                       ; col
1018+ 7315 3E FC                                ld      a,L2SunScannerBright
1019+ 7317 CD B6 E2                             call    l2_plot_pixel
1020+ 731A FD 45                                ld      b,iyl
1021+ 731C DD 4C                                ld      c,ixh
1022+ 731E 0C                                   inc     c
1023+ 731F 3E FC                                ld      a,L2SunScannerBright
1024+ 7321 CD B6 E2                             call    l2_plot_pixel
1025+ 7324 C9                                   ret
1026+ 7325
1027+ 7325              ; This will do a planet update if we are not in space station range
1028+ 7325              UpdateScannerPlanet:    MMUSelectPlanet
1028+ 7325 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
1029+ 7329                                      Shift24BitScan  P_BnKyhi, P_BnKylo
1029+ 7329 2A 14 C0    >                        ld      hl,(P_BnKyhi)
1029+ 732C 44          >                        ld      b,h
1029+ 732D 7C          >                        ld      a,h
1029+ 732E E6 7F       >                        and     SignMask8Bit
1029+ 7330 67          >                        ld      h,a
1029+ 7331 3A 13 C0    >                        ld      a,(P_BnKylo)
1029+ 7334 CB 27       >                        sla     a
1029+ 7336 CB 15       >                        rl      l
1029+ 7338 CB 14       >                        rl      h
1029+ 733A CB 27       >                        sla     a
1029+ 733C CB 15       >                        rl      l
1029+ 733E CB 14       >                        rl      h
1029+ 7340 CB 27       >                        sla     a
1029+ 7342 CB 15       >                        rl      l
1029+ 7344 CB 14       >                        rl      h
1029+ 7346 CB 27       >                        sla     a
1029+ 7348 CB 15       >                        rl      l
1029+ 734A CB 14       >                        rl      h
1029+ 734C CB 27       >                        sla     a
1029+ 734E CB 15       >                        rl      l
1029+ 7350 CB 14       >                        rl      h
1029+ 7352 CB 27       >                        sla     a
1029+ 7354 CB 15       >                        rl      l
1029+ 7356 CB 14       >                        rl      h
1030+ 7358 3A 12 C0     .IsItInRange:           ld      a,(P_BnKxsgn)                ; if the high byte is not
1031+ 735B 21 15 C0                             ld      hl,P_BnKysgn                 ; a sign only
1032+ 735E B6                                   or      (hl)                        ; then its too far away
1033+ 735F 21 18 C0                             ld      hl,P_BnKzsgn                 ; for the scanner to draw
1034+ 7362 B6                                   or      (hl)                        ; so rely on the compass
1035+ 7363 E6 7F                                and     SignMask8Bit                ;
1036+ 7365 C0                                   ret     nz                          ;
1037+ 7366 2A 16 C0     .ItsInRange:            ld      hl,(P_BnKzlo)                ; we will get unsigned values
1038+ 7369 ED 5B 10 C0                          ld      de,(P_BnKxlo)
1039+ 736D ED 4B 13 C0                          ld      bc,(P_BnKylo)
1040+ 7371 7C                                   ld      a,h
1041+ 7372 B2                                   or      d
1042+ 7373 B0                                   or      b
1043+ 7374 E6 C0                                and     %11000000
1044+ 7376 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
1045+ 7377 3A 12 C0     .MakeX2Compliment:      ld      a,(P_BnKxsgn)
1046+ 737A CB 7F                                bit     7,a
1047+ 737C 28 04                                jr      z,.absXHi
1048+ 737E                                      NegD
1048+ 737E 7A          >                    ld      a,d
1048+ 737F ED 44       >                    neg
1048+ 7381 57          >                    ld      d,a
1049+ 7382 7A           .absXHi:                ld      a,d
1050+ 7383 C6 80                                add     ScannerX
1051+ 7385 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
1052+ 7387 CB 3C        .ProcessZCoord:         srl     h
1053+ 7389 CB 3C                                srl     h
1054+ 738B 3A 18 C0     .MakeZ2Compliment:      ld      a,(P_BnKzsgn)
1055+ 738E CB 7F                                bit     7,a
1056+ 7390 28 04                                jr      z,.absZHi
1057+ 7392                                      NegH
1057+ 7392 7C          >                    ld      a,h
1057+ 7393 ED 44       >                    neg
1057+ 7395 67          >                    ld      h,a
1058+ 7396 3E AB        .absZHi:                ld      a,ScannerY
1059+ 7398 94                                   sub     h
1060+ 7399 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
1061+ 739B CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
1062+ 739D 20 0B                                jr      nz,.StickHasLength
1063+ 739F FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
1064+ 73A1 FD 6F                                ld      iyl,a
1065+ 73A3                                      MMUSelectLayer2
1065+ 73A3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1066+ 73A7 C3 D2 73                             jp      .NoStick
1067+ 73AA 3A 15 C0     .StickHasLength:        ld      a,(P_BnKysgn)                ; if b  =  0 then no line
1068+ 73AD CB 7F                                bit     7,a
1069+ 73AF 28 04                                jr      z,.absYHi
1070+ 73B1                                      NegB
1070+ 73B1 78          >                    ld      a,b
1070+ 73B2 ED 44       >                    neg
1070+ 73B4 47          >                    ld      b,a
1071+ 73B5 FD 7C        .absYHi:                ld      a,iyh
1072+ 73B7 90           .SetStickPos:           sub     b
1073+ 73B8                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
1073+ 73B8 FE BE       >                        cp      ScannerBottom
1073+ 73BA DA BF 73    >                        jp		c, .StickOnScreen
1074+ 73BD 3E BE                                ld      a,ScannerBottom
1075+ 73BF FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
1076+ 73C1 DD 6F                                ld      ixl,a
1077+ 73C3 FD 44                                ld      b,iyh                       ; from row
1078+ 73C5 DD 4C                                ld      c,ixh                       ; from col
1079+ 73C7 FD 55                                ld      d,iyl                       ; to row
1080+ 73C9 1E B4                                ld      e,L2SunScanner
1081+ 73CB                                      MMUSelectLayer2
1081+ 73CB ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1082+ 73CF CD 55 E5                             call    l2_draw_vert_line_to
1083+ 73D2 FD 45        .NoStick:               ld      b,iyl                       ; row
1084+ 73D4 DD 4C                                ld      c,ixh                       ; col
1085+ 73D6 3E FC                                ld      a,L2SunScannerBright
1086+ 73D8 CD B6 E2                             call    l2_plot_pixel
1087+ 73DB FD 45                                ld      b,iyl
1088+ 73DD DD 4C                                ld      c,ixh
1089+ 73DF 0C                                   inc     c
1090+ 73E0 3E FC                                ld      a,L2SunScannerBright
1091+ 73E2 CD B6 E2                             call    l2_plot_pixel
1092+ 73E5 C9                                   ret
1093+ 73E6
1094+ 73E6
1095+ 73E6              ; As the space station is always ship 0 then we can just use the scanner
1096+ 73E6
1097+ 73E6              ; This will go though all the universe ship data banks and plot, for now we will just work on one bank
1098+ 73E6              ; Supports 24 bit xyz
1099+ 73E6 3A 51 C0     UpdateScannerShip:      ld      a,(UBnKexplDsp)             ; if bit 4 is clear then ship should not be drawn
1100+ 73E9 CB 67                                bit     4,a                         ; .
1101+ 73EB                                      ;DEBUG ret     z                           ; .
1102+ 73EB 3A 0D C4                             ld      a,(ShipTypeAddr)            ; if its a planet or sun, do not display
1103+ 73EE CB 7F                                bit     7,a
1104+ 73F0 C0                                   ret     nz
1105+ 73F1              ; DEBUG Add in station types later
1106+ 73F1 3A 28 C0     .NotMissile:            ld      a,(UBnKzsgn)                ; any high byte causes skip
ConsoleDrawing.asm(1107): warning: value 0xC022 is truncated to 8bit value: 0x22
1107+ 73F4 06 22                                ld      b,(UBnKxsgn)                ; .
1108+ 73F6 B0                                   or      b                           ; .
ConsoleDrawing.asm(1109): warning: value 0xC025 is truncated to 8bit value: 0x25
1109+ 73F7 06 25                                ld      b,(UBnKysgn)                ; .
1110+ 73F9 B0                                   or      b                           ; .
1111+ 73FA E6 7F                                and     SignMask8Bit                ; so we are checking to see if very high byte is non zero
1112+ 73FC C0                                   ret     nz
1113+ 73FD 2A 26 C0     .CheckLowAndMidByte:    ld      hl,(UBnKzlo)                ; Any distance > 64 causes skip
1114+ 7400 ED 5B 20 C0                          ld      de,(UBnKxlo)                ;
1115+ 7404 ED 4B 23 C0                          ld      bc,(UBnKylo)                ;
1116+ 7408 7C                                   ld      a,h                         ;
1117+ 7409 B2                                   or      d                           ;
1118+ 740A B0                                   or      b                           ;
1119+ 740B E6 C0                                and     %11000000                   ;
1120+ 740D C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
1121+ 740E 3A 22 C0     .MakeX2Compliment:      ld      a,(UBnKxsgn)
1122+ 7411 CB 7F                                bit     7,a
1123+ 7413 28 04                                jr      z,.absXHi
1124+ 7415                                      NegD
1124+ 7415 7A          >                    ld      a,d
1124+ 7416 ED 44       >                    neg
1124+ 7418 57          >                    ld      d,a
1125+ 7419 7A           .absXHi:                ld      a,d
1126+ 741A C6 80                                add     ScannerX
1127+ 741C DD 67                                ld      ixh,a                       ; store adjusted X in ixh
1128+ 741E CB 3C        .ProcessZCoord:         srl     h
1129+ 7420 CB 3C                                srl     h
1130+ 7422 3A 28 C0     .MakeZ2Compliment:      ld      a,(UBnKzsgn)
1131+ 7425 CB 7F                                bit     7,a
1132+ 7427 28 04                                jr      z,.absZHi
1133+ 7429                                      NegH
1133+ 7429 7C          >                    ld      a,h
1133+ 742A ED 44       >                    neg
1133+ 742C 67          >                    ld      h,a
1134+ 742D 3E AB        .absZHi:                ld      a,ScannerY
1135+ 742F 94                                   sub     h
1136+ 7430 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
1137+ 7432 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
1138+ 7434 20 2A                                jr      nz,.StickHasLength
1139+ 7436 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
1140+ 7438 FD 6F                                ld      iyl,a
1141+ 743A DD 7D                                ld      a,ixl
1142+ 743C                                      GetShipColorBright
1142+ 743C 21 D0 6E    >                        ld      hl,ScannerColourTable
1142+ 743F 3A 0D C4    >                        ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
1142+ 7442 FE 01       >                        cp      1                        ; for now to bypass hostile missile
1142+ 7444 28 0A       >                        jr      z,.UsingColourTable    ; for now to bypass hostile missile
1142+ 7446 3A 0E C4    >                        ld      a,(ShipNewBitsAddr)
1142+ 7449 E6 04       >                        and     ShipIsHostile
1142+ 744B 28 03       >                        jr      z,.UsingColourTable
1142+ 744D 21 D8 6E    >.UsingHostileColour:    ld      hl,ScannerColourTableHostile
1142+ 7450 3A 0D C4    >.UsingColourTable:      ld      a,(ShipTypeAddr)
1142+ 7453 CB 27       >                        sla     a                            ; as its byte pairs * 2
1142+ 7455 3C          >                        inc     a
1142+ 7456 ED 31       >                        add     hl,a
1142+ 7458 7E          >                        ld      a,(hl)
1143+ 7459                                      MMUSelectLayer2
1143+ 7459 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1144+ 745D C3 A8 74                             jp      .NoStick
1145+ 7460 3A 25 C0     .StickHasLength:        ld      a,(UBnKysgn)                ; if b  =  0 then no line
1146+ 7463 CB 7F                                bit     7,a
1147+ 7465 28 04                                jr      z,.absYHi
1148+ 7467                                      NegB
1148+ 7467 78          >                    ld      a,b
1148+ 7468 ED 44       >                    neg
1148+ 746A 47          >                    ld      b,a
1149+ 746B FD 7C        .absYHi:                ld      a,iyh
1150+ 746D 90           .SetStickPos:           sub     b
1151+ 746E                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
1151+ 746E FE BE       >                        cp      ScannerBottom
1151+ 7470 DA 75 74    >                        jp		c, .StickOnScreen
1152+ 7473 3E BE                                ld      a,ScannerBottom
1153+ 7475 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
1154+ 7477                                      GetShipColor
1154+ 7477 21 D0 6E    >                        ld      hl,ScannerColourTable
1154+ 747A 3A 0D C4    >                        ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
1154+ 747D FE 01       >                        cp      1                        ; for now to bypass hostile missile
1154+ 747F 28 0A       >                        jr      z,.UsingColourTable    ; for now to bypass hostile missile
1154+ 7481 3A 0E C4    >                        ld      a,(ShipNewBitsAddr)
1154+ 7484 E6 04       >                        and     ShipIsHostile
1154+ 7486 28 03       >                        jr      z,.UsingColourTable
1154+ 7488 21 D8 6E    >.UsingHostileColour:    ld      hl,ScannerColourTableHostile
1154+ 748B 3A 0D C4    >.UsingColourTable:      ld      a,(ShipTypeAddr)
1154+ 748E CB 27       >                        sla     a                            ; as its byte pairs * 2
1154+ 7490 ED 31       >                        add     hl,a
1154+ 7492 7E          >                        ld      a,(hl)
1155+ 7493 DD 6F                                ld      ixl,a
1156+ 7495 FD 44                                ld      b,iyh                       ; from row
1157+ 7497 DD 4C                                ld      c,ixh                       ; from col
1158+ 7499 FD 55                                ld      d,iyl                       ; to row
1159+ 749B DD 5D                                ld      e,ixl                       ; colur will only be green or yellow for now
1160+ 749D E5                                   push    hl
1161+ 749E                                      MMUSelectLayer2
1161+ 749E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1162+ 74A2 CD 55 E5                             call    l2_draw_vert_line_to
1163+ 74A5 E1                                   pop     hl
1164+ 74A6 23                                   inc     hl
1165+ 74A7 7E                                   ld      a,(hl)
1166+ 74A8 FD 45        .NoStick:               ld      b,iyl                       ; row
1167+ 74AA DD 4C                                ld      c,ixh                       ; col
1168+ 74AC F5                                   push    af
1169+ 74AD CD B6 E2                             call    l2_plot_pixel
1170+ 74B0 F1                                   pop     af
1171+ 74B1 FD 45                                ld      b,iyl
1172+ 74B3 DD 4C                                ld      c,ixh
1173+ 74B5 0C                                   inc     c
1174+ 74B6 CD B6 E2                             call    l2_plot_pixel
1175+ 74B9 C9                                   ret
1176+ 74BA
1177+ 74BA
# file closed: ./Views/ConsoleDrawing.asm
1020  74BA                          INCLUDE "./Tables/message_queue.asm"
# file opened: ./Tables/message_queue.asm
   1+ 74BA
   2+ 74BA
   3+ 74BA              ResetMessageQueue:      ZeroA
   3+ 74BA AF          >                        xor a
   4+ 74BB 32 BB 7D                             ld      (MessageCount),a
   5+ 74BE 32 BC 7D                             ld      (MessageCurrent),a
   6+ 74C1 21 BF 7D                             ld      hl,MessageQueue
   7+ 74C4 11 BD 7D                             ld      de,MessageIndex
   8+ 74C7 06 05                                ld      b,5
   9+ 74C9 7D           .ClearMessageIndexs:    ld      a,l                                 ; Wipe out the indexes to all the data
  10+ 74CA 12                                   ld      (de),a                              ;
  11+ 74CB 13                                   inc     de                                  ;
  12+ 74CC 7C                                   ld      a,h                                 ;
  13+ 74CD 12                                   ld      (de),a                              ;
  14+ 74CE 13                                   inc     de                                  ;
  15+ 74CF 3E 21                                ld      a,MESSAGESIZE                       ;
  16+ 74D1 ED 31                                add     hl,a                                ;
  17+ 74D3 10 F4                                djnz    .ClearMessageIndexs                 ;
  18+ 74D5 21 BF 7D     .ClearText:             ld      hl,MessageQueue
  19+ 74D8 11 AA 00                             ld      de,(MAXMESSAGES * MESSAGESIZE) + MAXMESSAGES    ; MessageQueue + MessageTimeout
  20+ 74DB 3E 00                                ld      a,0
  21+ 74DD CD 38 7D                             call	memfill_dma
  22+ 74E0 C9                                   ret
  23+ 74E1
  24+ 74E1              ; Message to enqeue is a string held at DE that must be terminated in \0
  25+ 74E1              ;                                       IYH = timer for message
  26+ 74E1 3A BB 7D     EnqueMessage:           ld      a,(MessageCount)                    ; Maximum message count check
  27+ 74E4                                      ReturnIfAGTENusng    MAXMESSAGES            ; we do not enque if queue is full
  27+ 74E4 FE 05       >                        cp    MAXMESSAGES
  27+ 74E6 D0          >                        ret	 nc
  28+ 74E7 3C                                   inc     a
  29+ 74E8 32 BB 7D                             ld      (MessageCount),a                    ; get ready for next message
  30+ 74EB 4F           .AddMessage:            ld      c,a
  31+ 74EC 3A BC 7D                             ld      a,(MessageCurrent)                  ; a = current message id + count + 1
  32+ 74EF 81                                   add     c                                   ;
  33+ 74F0                                      JumpIfALTNusng MAXMESSAGES, .ReadyToAdd     ; a = a modulus 5 (note we can only hit 5 messages
  33+ 74F0 FE 05       >                        cp      MAXMESSAGES
  33+ 74F2 DA F7 74    >                        jp		c, .ReadyToAdd
  34+ 74F5 D6 05        .CircularQueue:         sub     MAXMESSAGES                         ; so only need 1 cycle of modulus
  35+ 74F7 21 64 7E     .ReadyToAdd:            ld      hl,MessageTimeout                   ; write out message display time
  36+ 74FA ED 31                                add     hl,a                                ; as some may be brief messages
  37+ 74FC 4F                                   ld      c,a                                 ;
  38+ 74FD FD 7C                                ld      a,iyh                               ;
  39+ 74FF 77                                   ld      (hl),a                              ;
  40+ 7500 79                                   ld      a,c                                 ; get back index
  41+ 7501 21 BD 7D                             ld      hl,MessageIndex
  42+ 7504                                      HLEquAddrAtHLPlusA                          ; hl = target location for message
  42+ 7504 CB 27       >                    sla         a
  42+ 7506 ED 31       >                    add         hl,a
  42+ 7508 7E          >                    ld          a,(hl)
  42+ 7509 23          >                    inc         hl
  42+ 750A 66          >                    ld          h,(hl)
  42+ 750B 6F          >                    ld          l,a
  43+ 750C EB                                   ex      de,hl                               ; de = destination, hl = message
  44+ 750D                                      ldCopyTextAtHLtoDE                          ; copy over text as we have done the rest
  44+ 750D 7E          >.CopyLoop:              ld      a,(hl)
  44+ 750E 12          >                        ld      (de),a
  44+ 750F FE 00       >                        cp      0
  44+ 7511 CA 18 75    >                        jp      z,.DoneCopy
  44+ 7514 23          >                        inc     hl
  44+ 7515 13          >                        inc     de
  44+ 7516 18 F5       >                        jr      .CopyLoop
  44+ 7518             >.DoneCopy:
  45+ 7518 C9                                   ret
  46+ 7519
  47+ 7519 3A BC 7D     UpdateMessageTimer:     ld      a,(MessageCurrent)
  48+ 751C 21 64 7E                             ld      hl,MessageTimeout
  49+ 751F ED 31                                add     hl,a
  50+ 7521 7E                                   ld      a,(hl)
  51+ 7522 3D                                   dec     a
  52+ 7523 28 02                                jr      z,.UpdateQueue
  53+ 7525 77           .UpdateTimer            ld      (hl),a
  54+ 7526 C9                                   ret
  55+ 7527 77           .UpdateQueue:           ld      (hl),a
  56+ 7528 21 BB 7D                             ld      hl,MessageCount
  57+ 752B 35                                   dec     (hl)
  58+ 752C 3A BC 7D                             ld      a,(MessageCurrent)
  59+ 752F 23                                   inc     hl
  60+ 7530                                      JumpIfALTNusng MAXMESSAGES, .ReadyToUpdate
  60+ 7530 FE 05       >                        cp      MAXMESSAGES
  60+ 7532 DA 36 75    >                        jp		c, .ReadyToUpdate
  61+ 7535              .CircularQueue:         ZeroA
  61+ 7535 AF          >                        xor a
  62+ 7536 32 BC 7D     .ReadyToUpdate          ld      (MessageCurrent),a
  63+ 7539 C9                                   ret
  64+ 753A
  65+ 753A 3A BB 7D     DisplayCurrentMessage:  ld      a,(MessageCount)
  66+ 753D                                      ReturnIfAIsZero
  66+ 753D A7          >                        and     a
  66+ 753E C8          >                        ret     z
  67+ 753F 3A BC 7D                             ld      a,(MessageCurrent)
  68+ 7542 21 BD 7D                             ld      hl,MessageIndex
  69+ 7545                                      HLEquAddrAtHLPlusA
  69+ 7545 CB 27       >                    sla         a
  69+ 7547 ED 31       >                    add         hl,a
  69+ 7549 7E          >                    ld          a,(hl)
  69+ 754A 23          >                    inc         hl
  69+ 754B 66          >                    ld          h,(hl)
  69+ 754C 6F          >                    ld          l,a
  70+ 754D                                      MMUSelectLayer1
  70+ 754D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  71+ 7551 11 01 00                             ld      de,MESSAGELINE
  72+ 7554 CD 24 E1                             call    l1_print_at_wrap
  73+ 7557 C9                                   ret
  74+ 7558
  75+ 7558              HyperSpaceMessage:      MMUSelectLayer1
  75+ 7558 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  76+ 755C 11 1F 67     .DisplayHyperCountDown: ld      de,Hyp_to
  77+ 755F 21 A9 8E                             ld      hl,name_expanded
  78+ 7562                                      ldCopyTextAtHLtoDE
  78+ 7562 7E          >.CopyLoop:              ld      a,(hl)
  78+ 7563 12          >                        ld      (de),a
  78+ 7564 FE 00       >                        cp      0
  78+ 7566 CA 6D 75    >                        jp      z,.DoneCopy
  78+ 7569 23          >                        inc     hl
  78+ 756A 13          >                        inc     de
  78+ 756B 18 F5       >                        jr      .CopyLoop
  78+ 756D             >.DoneCopy:
  79+ 756D AF           .DoneName:              xor     a
  80+ 756E 12                                   ld      (de),a
  81+ 756F 32 3B 67                             ld      (Hyp_message+31),a      ; max out at 32 characters
  82+ 7572 21 1C 67     .CentreJustify:         ld      hl,Hyp_message
  83+ 7575                                      HalfLengthHL
  83+ 7575 06 00       >                        ld      b,0
  83+ 7577 7E          >.CountLenLoop:          ld      a,(hl)
  83+ 7578 FE 00       >                        cp      0
  83+ 757A 28 04       >                        jr      z,.DoneCount
  83+ 757C 04          >                        inc     b
  83+ 757D 23          >                        inc     hl
  83+ 757E 18 F7       >                        jr      .CountLenLoop
  83+ 7580 3E 20       >.DoneCount:             ld      a,32
  83+ 7582 90          >                        sub     b
  83+ 7583 CB 2F       >                        sra     a
  84+ 7585 21 56 67                             ld      hl,Hyp_centeredTarget
  85+ 7588                                      ldClearTextLoop 32
  85+ 7588 47          >                        ld      b,a
  85+ 7589 3E 20       >                        ld      a,32
  85+ 758B 77          >.ClearLoop:             ld      (hl),a
  85+ 758C 23          >                        inc     hl
  85+ 758D 10 FC       >                        djnz    .ClearLoop
  86+ 758F EB                                   ex      de,hl
  87+ 7590 21 1C 67                             ld      hl,Hyp_message
  88+ 7593                                      ldCopyTextAtHLtoDE
  88+ 7593 7E          >.CopyLoop:              ld      a,(hl)
  88+ 7594 12          >                        ld      (de),a
  88+ 7595 FE 00       >                        cp      0
  88+ 7597 CA 9E 75    >                        jp      z,.DoneCopy
  88+ 759A 23          >                        inc     hl
  88+ 759B 13          >                        inc     de
  88+ 759C 18 F5       >                        jr      .CopyLoop
  88+ 759E             >.DoneCopy:
  89+ 759E                                      ZeroA
  89+ 759E AF          >                        xor a
  90+ 759F 32 76 67                             ld      (Hyp_centeredEol),a
  91+ 75A2 21 52 67                             ld      hl,Hyp_counter           ; clear counter digits
  92+ 75A5 3E 20                                ld      a,32                     ; clear counter digits
  93+ 75A7 77                                   ld      (hl),a                   ; clear counter digits
  94+ 75A8 23                                   inc     hl                       ; clear counter digits
  95+ 75A9 77                                   ld      (hl),a                   ; clear counter digits
  96+ 75AA 23                                   inc     hl                       ; clear counter digits
  97+ 75AB 77                                   ld      (hl),a                   ; clear counter digits
  98+ 75AC CD F8 66                             call    UpdateCountdownNumber
  99+ 75AF 21 49 67                             ld      hl,Hyp_charging
 100+ 75B2                                      HalfLengthHL
 100+ 75B2 06 00       >                        ld      b,0
 100+ 75B4 7E          >.CountLenLoop:          ld      a,(hl)
 100+ 75B5 FE 00       >                        cp      0
 100+ 75B7 28 04       >                        jr      z,.DoneCount
 100+ 75B9 04          >                        inc     b
 100+ 75BA 23          >                        inc     hl
 100+ 75BB 18 F7       >                        jr      .CountLenLoop
 100+ 75BD 3E 20       >.DoneCount:             ld      a,32
 100+ 75BF 90          >                        sub     b
 100+ 75C0 CB 2F       >                        sra     a
 101+ 75C2 21 97 67                             ld      hl,Hyp_centeredCharging
 102+ 75C5                                      ldClearTextLoop 32
 102+ 75C5 47          >                        ld      b,a
 102+ 75C6 3E 20       >                        ld      a,32
 102+ 75C8 77          >.ClearLoop:             ld      (hl),a
 102+ 75C9 23          >                        inc     hl
 102+ 75CA 10 FC       >                        djnz    .ClearLoop
 103+ 75CC EB                                   ex      de,hl
 104+ 75CD 21 49 67                             ld      hl,Hyp_charging
 105+ 75D0                                      ldCopyTextAtHLtoDE
 105+ 75D0 7E          >.CopyLoop:              ld      a,(hl)
 105+ 75D1 12          >                        ld      (de),a
 105+ 75D2 FE 00       >                        cp      0
 105+ 75D4 CA DB 75    >                        jp      z,.DoneCopy
 105+ 75D7 23          >                        inc     hl
 105+ 75D8 13          >                        inc     de
 105+ 75D9 18 F5       >                        jr      .CopyLoop
 105+ 75DB             >.DoneCopy:
 106+ 75DB AF                                   xor     a
 107+ 75DC 32 B7 67                             ld      (Hyp_centeredEol2),a
 108+ 75DF 2A 64 80     .UpdateHyperCountdown:  ld      hl,(InnerHyperCount)
 109+ 75E2 2D                                   dec     l
 110+ 75E3 20 26                                jr      nz,.decHyperInnerOnly
 111+ 75E5 25                                   dec     h
 112+ 75E6 FA 0F 76                             jp      m,.HyperCountDone
 113+ 75E9 2E 0B        .resetHyperInner:       ld      l,$0B
 114+ 75EB E5                                   push    hl
 115+ 75EC 16 0C                                ld      d,12
 116+ 75EE 3E 06                                ld      a,L1ColourPaperBlack | L1ColourInkYellow
 117+ 75F0 CD 9A E0                             call    l1_attr_cls_2DlinesA
 118+ 75F3 16 60                                ld      d,12 * 8
 119+ 75F5 CD 83 E0                             call    l1_cls_2_lines_d
 120+ 75F8 11 00 60                             ld      de,$6000
 121+ 75FB 21 56 67                             ld      hl,Hyp_centeredTarget
 122+ 75FE CD D7 E0                             call    l1_print_at
 123+ 7601 11 00 68                             ld      de,$6800
 124+ 7604 21 97 67                             ld      hl,Hyp_centeredCharging
 125+ 7607 CD D7 E0                             call    l1_print_at
 126+ 760A E1                                   pop     hl
 127+ 760B 22 64 80     .decHyperInnerOnly:     ld      (InnerHyperCount),hl
 128+ 760E C9                                   ret
 129+ 760F 21 00 00     .HyperCountDone:        ld      hl,0
 130+ 7612 22 64 80                             ld      (InnerHyperCount),hl
 131+ 7615 16 0C                                ld      d,12
 132+ 7617 3E 00                                ld      a,L1ColourPaperBlack | L1ColourInkBlack
 133+ 7619 CD 9A E0                             call    l1_attr_cls_2DlinesA
 134+ 761C 16 60                                ld      d,12 * 8
 135+ 761E CD 83 E0                             call    l1_cls_2_lines_d
 136+ 7621                                      ForceTransition ScreenHyperspace                            ; transition to hyperspace
 136+ 7621 3E 0E       >                        ld      a,ScreenHyperspace
 136+ 7623 32 CA 69    >                        ld      (ScreenTransitionForced), a
 137+ 7626 C9                                   ret
 138+ 7627
# file closed: ./Tables/message_queue.asm
1021  7627                          INCLUDE "./Tables/LaserStatsTable.asm"
# file opened: ./Tables/LaserStatsTable.asm
   1+ 7627              ; LaserTypeTable
   2+ 7627              ; laser type = id of laser
   3+ 7627              ; laser pulse pause = time before next pulse
   4+ 7627              ; laser pulse duration = time laser is on per shot
   5+ 7627              ; laser damage output
   6+ 7627              ;
   7+ 7627              ; LaserType
   8+ 7627              ; LaserPulseRate                          ; how many pulses can be fired before long pause
   9+ 7627              ; LaserPulseOnTime                        ; cycles laser is on for
  10+ 7627              ; LaserPulseOffTime                       ; cycles laser is off for
  11+ 7627              ; LaserPulseRest                          ; time before pulse count resets to 0 (i.e cooldown)
  12+ 7627              ; LaserDamageOutput                       ; amount of damage for a laser hit
  13+ 7627              ; LaserEnergyDrain                        ; amount of energy drained by cycle
  14+ 7627              ; LaserHeat                               ; amount of heat generated
  15+ 7627              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
  16+ 7627              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
  17+ 7627              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
  18+ 7627              ; LaserTechLevel                          ; minimum tech level system to buy from
  19+ 7627              ;
  20+ 7627              LaserStatsTableWidth    EQU 12
  21+ 7627              ;                           0    1    2    3    4    5    6    7    8    9   10   11
  22+ 7627              ;                          Typ  Rate On   Off  Rst  Dam  Drn  Het  Dur  DAt  Mrk  Tek
  23+ 7627 00 02 05 20  LaserStatsTable:        DB $00, $02, $05, $20, $40, $03, $10, $02, $20 ,$10 ,$00, $00; basic laser
  23+ 762B 40 03 10 02
  23+ 762F 20 10 00 00
  24+ 7633 01 01 08 08                          DB $01, $01, $08, $08, $20, $03, $10, $08, $20 ,$10 ,$00, $01; pulse laser
  24+ 7637 20 03 10 08
  24+ 763B 20 10 00 01
  25+ 763F 02 03 06 06                          DB $02, $03, $06, $06, $3A, $03, $05, $02, $20 ,$10 ,$00, $02; burst laser TODO THIS ONE IS ODD
  25+ 7643 3A 03 05 02
  25+ 7647 20 10 00 02
  26+ 764B 03 01 05 05                          DB $03, $01, $05, $05, $01, $02, $04, $05, $30 ,$10 ,$00, $03; Gatling laser
  26+ 764F 01 02 04 05
  26+ 7653 30 10 00 03
  27+ 7657 04 01 01 00                          DB $04, $01, $01, $00, $00, $03, $03, $10, $20 ,$10 ,$00, $04; beam ; DOES NOT WORK
  27+ 765B 00 03 03 10
  27+ 765F 20 10 00 04
  28+ 7663 05 01 20 30                          DB $05, $01, $20, $30, $60, $03, $02, $02, $20 ,$10 ,$00, $05; mining
  28+ 7667 60 03 02 02
  28+ 766B 20 10 00 05
  29+ 766F 06 00 01 00                          DB $06, $00, $01, $00, $06, $05, $05, $05, $10 ,$10 ,$00, $08; military beam DOES NOT WORK
  29+ 7673 06 05 05 05
  29+ 7677 10 10 00 08
  30+ 767B 07 01 01 02                          DB $07, $01, $01, $02, $20, $22, $01, $30, $30 ,$11 ,$01, $10; thargoid
  30+ 767F 20 22 01 30
  30+ 7683 30 11 01 10
  31+ 7687 08 01 05 10                          DB $08, $01, $05, $10, $80, $70, $02, $03, $60 ,$11 ,$01, $10; Starkiller
  31+ 768B 80 70 02 03
  31+ 768F 60 11 01 10
  32+ 7693
  33+ 7693
  34+ 7693
  35+ 7693
  36+ 7693
  37+ 7693
  38+ 7693
# file closed: ./Tables/LaserStatsTable.asm
1022  7693                          INCLUDE "./Tables/ShipClassTable.asm"
# file opened: ./Tables/ShipClassTable.asm
   1+ 7693              ; Note when selecting its skewed by rank which ads a filter so bigger ships should be later in the table
   2+ 7693              ; More optimal will be to order all the ships and then have an entry point and length of tablea
   3+ 7693
   4+ 7693              ; Each ship type table is constructed as follows
   5+ 7693              ; Header - nbr of ships
   6+ 7693              ; table of min rank
   7+ 7693              ; table of ship ids
   8+ 7693              ; note unless "SelectSpawnType" is changed we can't put this in location $0000 as it doesn't check L in HL for speed (thsi could be done though)
   9+ 7693
  10+ 7693              ; we may nneed to rebuidl these tables for cp instruction so its max rank not min
  11+ 7693              ; Coding limit for simplicity, each table has 15 ships in it
  12+ 7693 00 00 01 01  ShipPirateTableARank:    DB RankingEQHarmless, RankingEQHarmless, RankingEQMostly,   RankingEQMostly,     RankingEQPoor,     RankingEQAverage,   RankingEQDeadly,    RankingEQDeadly
  12+ 7697 02 03 07 07
  13+ 769B 23 00 02 0B  ShipPirateTableA:        DB ShipID_Sidewinder, ShipID_Adder,      ShipID_Asp_Mk_2,   ShipID_Cobra_Mk_3_P, ShipID_Boulder,    ShipID_Bushmaster,  ShipID_Python_P,    ShipID_Anaconda
  13+ 769F 05 07 1F 01
  14+ 76A3
  15+ 76A3 00 01 03 07  ShipPirateTableBRank:    DB RankingEQHarmless, RankingEQMostly,   RankingEQAverage,  RankingEQDeadly,     RankingEQDeadly,   RankingEQAbove,     RankingEQCompetent, RankingEQCompetent
  15+ 76A7 07 04 05 05
  16+ 76AB 08 2A 2B 1F  ShipPirateTableB:        DB ShipID_Chameleon,  ShipID_Worm,       ShipID_Rattler,    ShipID_Python_P,     ShipID_Anaconda,   ShipID_Bushmaster,  ShipID_Python_P,    ShipID_Anaconda
  16+ 76AF 01 07 1F 01
  17+ 76B3
  18+ 76B3 00 00 00 00  ShipBodiesTableARank:    DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQHarmless,   RankingEQHarmless, RankingEQHarmless,  RankingEQHarmless,  RankingEQDangerous
  18+ 76B7 00 00 00 06
  19+ 76BB 06 06 06 06  ShipBodiesTableA:        DB ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Asteroid,     ShipID_Asteroid,   ShipID_Asteroid,    ShipID_Asteroid,    ShipID_Rock_Hermit
  19+ 76BF 06 06 06 20
  20+ 76C3
  21+ 76C3 00 00 00 01  ShipNonTraderTableARank: DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQMostly,     RankingEQPoor,     RankingEQAverage,   RankingEQAverage,   RankingEQCompetent
  21+ 76C7 02 03 03 05
  22+ 76CB 00 23 00 18  ShipNonTraderTableA:     DB ShipID_Adder,      ShipID_Sidewinder, ShipID_Adder,      ShipID_Mamba,        ShipID_Krait,      ShipID_Gecko,       ShipID_Python,      ShipID_Anaconda
  22+ 76CF 16 13 1E 01
  23+ 76D3
  24+ 76D3 00 00 00 00  ShipCopTableARank:       DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQHarmless,   RankingEQHarmless, RankingEQHarmless,  RankingEQAverage,   RankingEQCompetent
  24+ 76D7 00 00 03 05
  25+ 76DB 29 29 29 29  ShipCopTableA:           DB ShipID_Viper,      ShipID_Viper,      ShipID_Viper,      ShipID_Viper,        ShipID_Viper,      ShipID_Viper,       ShipID_Python,      ShipID_Anaconda
  25+ 76DF 29 29 1E 01
  26+ 76E3
  27+ 76E3 00 01 02 03  ShipHunterTableRank:     DB RankingEQHarmless, RankingEQMostly,   RankingEQPoor,     RankingEQAverage,    RankingEQAbove,    RankingEQCompetent, RankingEQCompetent, RankingEQCompetent
  27+ 76E7 04 05 05 05
  28+ 76EB 23 00 03 1E  ShipHunterTableA:        DB ShipID_Sidewinder, ShipID_Adder,      ShipID_Boa,        ShipID_Python,       ShipID_Krait,      ShipID_Fer_De_Lance,ShipID_Mamba,       ShipID_Cougar
  28+ 76EF 16 12 18 0E
  29+ 76F3
  30+ 76F3 00 05 05 06  ShipHunterTableBRank:    DB RankingEQHarmless, RankingEQCompetent,RankingEQCompetent,RankingEQDangerous,  RankingEQDangerous,RankingEQDangerous, RankingEQDeadly,    RankingEQDeadly
  30+ 76F7 06 06 07 07
  31+ 76FB 23 00 15 1E  ShipHunterTableB:        DB ShipID_Sidewinder, ShipID_Adder,      ShipID_Iguana,     ShipID_Python,       ShipID_Dragon,     ShipID_Gecko,       ShipID_Mamba,       ShipID_Anaconda
  31+ 76FF 10 13 18 01
  32+ 7703
  33+ 7703 00 05 06 06  ShipHunterTableCRank:    DB RankingEQHarmless, RankingEQCompetent,RankingEQDangerous,RankingEQDangerous,  RankingEQDeadly,   RankingEQElite,     RankingEQSkollob,   RankingEQNutter
  33+ 7707 07 08 09 0A
  34+ 770B 00 1A 1B 10  ShipHunterTableC:        DB ShipID_Adder,      ShipID_Monitor,    ShipID_Moray,      ShipID_Dragon,       ShipID_Gecko,      ShipID_Ghavial,     ShipID_Ophidian,    ShipID_Thargoid
  34+ 770F 13 14 1C 26
  35+ 7713
  36+ 7713 00 00 00 00  ShipJunkTableRankA:      DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQHarmless,   RankingEQHarmless, RankingEQAverage,   RankingEQAbove,     RankingEQCompetent
  36+ 7717 00 03 04 05
  37+ 771B 06 06 06 1D  ShipJunkTableA:          DB ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Plate,        ShipID_CargoType5, ShipID_Splinter,    ShipID_Escape_Pod,  ShipID_Rock_Hermit
  37+ 771F 04 24 11 20
  38+ 7723
  39+ 7723              ShipSuperstructureTableA
  40+ 7723
  41+ 7723
  42+ 7723              ; This is determined by system algorithm so there is no rank factor
  43+ 7723 0D           MasterStations:         DB ShipID_Coriolis
  44+ 7724 0F                                   DB ShipID_Dodo
  45+ 7725
  46+ 7725 19           ShipMissileTable        DB  ShipID_Missile
  47+ 7726              ShipMissileTableSize    EQU $ - ShipMissileTable
  48+ 7726
  49+ 7726
  50+ 7726
  51+ 7726              ;; clean up below or delte
  52+ 7726              ;ShipPirateTable:
  53+ 7726              ;ShipPackList:           DB  ShipID_Sidewinder, ShipID_Mamba, ShipID_Krait, ShipID_Adder, ShipID_Gecko, ShipID_Cobra_Mk_1, ShipID_Worm, ShipID_Cobra_Mk_3_P
  54+ 7726              ;ShipPackTableSize       EQU $ - ShipPackList
  55+ 7726              ;ShipHunterTable         DB  ShipID_Cobra_Mk_3_P, ShipID_Asp_Mk_2, ShipID_Python_P, ShipID_Fer_De_Lance
  56+ 7726              ;ShipHunterTableSize     EQU $ - ShipHunterTable
  57+ 7726              ;
  58+ 7726              ;MasterShipTable:
  59+ 7726              ;MasterStations:         DB ShipID_Coriolis
  60+ 7726              ;                        DB ShipID_Dodo
  61+ 7726              ;
  62+ 7726              ;
  63+ 7726              ;
  64+ 7726              ;MasterJunk:             DB ShipID_Asteroid
  65+ 7726              ;                        DB ShipID_Plate
  66+ 7726              ;                        DB ShipID_CargoType5
  67+ 7726              ;                        DB ShipID_Splinter
  68+ 7726              ;                        DB ShipID_Escape_Pod
  69+ 7726              ;                        DB ShipID_Rock_Hermit
  70+ 7726              ;MasterSuperstructure:
  71+ 7726              ;MasterMissile:          DB ShipID_Missile
  72+ 7726
  73+ 7726
  74+ 7726
  75+ 7726
  76+ 7726
  77+ 7726 26           MasterThargoid:         DB ShipID_Thargoid
  78+ 7727 27                                   DB ShipID_Thargon
  79+ 7728
  80+ 7728 0C           MasterMission:          DB ShipID_Constrictor
  81+ 7729
  82+ 7729
  83+ 7729
  84+ 7729
  85+ 7729
  86+ 7729 17                                   DB ShipID_Logo
  87+ 772A 25                                   DB ShipID_TestVector
  88+ 772B
# file closed: ./Tables/ShipClassTable.asm
1023  772B
1024  772B AF           SeedGalaxy0:            xor     a
1025  772C                                      MMUSelectGalaxyA
1025  772C ED 92 57    >                     nextreg GalaxyDataMMU,     a
1026  772F DD 21 16 E0                          ld      ix,galaxy_data
1027  7733 AF                                   xor		a
1028  7734 32 A1 7E                             ld		(XSAV),a
1029  7737 CD 8A 84                             call    copy_galaxy_to_system
1030  773A DD E5        SeedGalaxy0Loop:        push    ix
1031  773C D1                                   pop     de
1032  773D 21 14 7F                             ld      hl,SystemSeed
1033  7740 CD 90 84                             call    copy_seed
1034  7743 DD E5                                push    ix
1035  7745 E1                                   pop     hl
1036  7746 ED 34 08 00                          add     hl,8
1037  774A E5                                   push    hl
1038  774B DD E1                                pop     ix
1039  774D CD C5 84                             call    next_system_seed
1040  7750 3A A1 7E                             ld		a,(XSAV)
1041  7753 3D                                   dec		a
1042  7754 FE 00                                cp		0
1043  7756 C8                                   ret		z
1044  7757 32 A1 7E                             ld		(XSAV),a
1045  775A 20 DE                                jr      nz,SeedGalaxy0Loop
1046  775C C9                                   ret
1047  775D
1048  775D
1049  775D
1050  775D
1051  775D                  ;include "./ModelRender/testdrawing.asm"
1052  775D                  IFDEF SKIPATTRACT
1053  775D ~                    DISPLAY "NOT LOADING ATTRACT MODE CODE"
1054  775D                  ELSE
1055  775D                      include "./Menus/AttractMode.asm"
# file opened: ./Menus/AttractMode.asm
   1+ 775D              AttractDuration            EQU $00F0
   2+ 775D              AttractCounterStart        EQU $80
   3+ 775D F0 00        AttractTimer:              DW      AttractDuration
   4+ 775F 80           AttractCounter:            DB      AttractCounterStart
   5+ 7760
   6+ 7760 3D 08        Attract_boiler_text		DW $083D
   7+ 7762
   8+ 7762
   9+ 7762 4C 6F 61 64  ATTR_LoadCommander      DB "Load Commander (Y/N)",0
   9+ 7766 20 43 6F 6D
   9+ 776A 6D 61 6E 64
   9+ 776E 65 72 20 28
   9+ 7772 59 2F 4E 29
   9+ 7776 00
  10+ 7777
  11+ 7777 FF           LocalXCounter           DB $FF
  12+ 7778 FF           LocalZCounter           DB $FF
  13+ 7779 00           LastInterrupt           DB 0
  14+ 777A
  15+ 777A CD 37 84     RandomXCounter:         call    doRandom
  16+ 777D C0                                   ret     nz
  17+ 777E 3A 77 77                             ld      a,(LocalXCounter)
  18+ 7781 EE 80                                xor     $80
  19+ 7783 32 77 77                             ld      (LocalXCounter),a
  20+ 7786 C9                                   ret
  21+ 7787
  22+ 7787 CD 37 84     RandomYCounter:         call    doRandom
  23+ 778A C0                                   ret     nz
  24+ 778B                                      ;ReturnIfALTNusng 254
  25+ 778B 3A 78 77                             ld      a,(LocalZCounter)
  26+ 778E EE 80                                xor     $80
  27+ 7790 32 78 77                             ld      (LocalZCounter),a
  28+ 7793 C9                                   ret
  29+ 7794
  30+ 7794
  31+ 7794              AttractModeInit:        MMUSelectLayer1
  31+ 7794 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  32+ 7798 CD 8F E0                             call	l1_cls
  33+ 779B 3E 07                                ld		a,7
  34+ 779D CD AA E0                             call	l1_attr_cls_to_a
  35+ 77A0 1E FF                                ld      e,$FF
  36+ 77A2 ED 5B 60 77                          ld      de,(Attract_boiler_text)
  37+ 77A6 21 62 77                             ld      hl,ATTR_LoadCommander
  38+ 77A9 CD D7 E0                             call    l1_print_at
  39+ 77AC                                      MMUSelectSpriteBank
  39+ 77AC ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  40+ 77B0 CD 6E E5                             call        sprite_cls_cursors
  41+ 77B3              .ClearLayer2:           MMUSelectLayer2
  41+ 77B3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  42+ 77B7 CD 04 E0                             call    asm_l2_double_buffer_on
  43+ 77BA CD 0E E2                             call    l2_cls
  44+ 77BD CD 97 E2                             call    l2_flip_buffers
  45+ 77C0 CD 0E E2                             call    l2_cls
  46+ 77C3                                      MMUSelectConsoleBank
  46+ 77C3 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  47+ 77C7 21 00 50     .LoadConsole:           ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  48+ 77CA 11 00 E0                             ld          de,ConsoleImageData
  49+ 77CD 01 00 08                             ld          bc, ScreenL1BottomLen
  50+ 77D0 CD 5E 7D                             call        memcopy_dma
  51+ 77D3 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  52+ 77D6 11 00 E8                             ld          de,ConsoleAttributes
  53+ 77D9 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  54+ 77DC CD 5E 7D                             call        memcopy_dma
  55+ 77DF 3A 9A 7E                             ld          a,(InterruptCounter)
  56+ 77E2 32 79 77                             ld          (LastInterrupt),a
  57+ 77E5 CD 9E 78                             call        SelectARandomShip
  58+ 77E8 C9                                   ret
  59+ 77E9
  60+ 77E9
  61+ 77E9              ;.StartShip:             ld          a,(InterruptCounter)
  62+ 77E9              ;                        ld          hl,LastInterrupt
  63+ 77E9              ;                        cp          (hl)
  64+ 77E9              ;                        jp          z,.StartShip            ; we only refresh once per interupt
  65+ 77E9              ;                        ld          (hl),a
  66+ 77E9
  67+ 77E9              AttractModeMain:        MMUSelectKeyboard
  67+ 77E9 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
  68+ 77ED CD 03 E1                             call    scan_keyboard
  69+ 77F0 3E 50                                ld      a,c_Pressed_Yes
  70+ 77F2                                      MMUSelectKeyboard
  70+ 77F2 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
  71+ 77F6 CD 95 E1                             call    is_key_up_state
  72+ 77F9 20 0E                                jr      nz,.YPressed
  73+ 77FB 3E 52                                ld      a,c_Pressed_No
  74+ 77FD                                      MMUSelectKeyboard
  74+ 77FD ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
  75+ 7801 CD 95 E1                             call    is_key_up_state
  76+ 7804 20 06                                jr      nz,.NPressed
  77+ 7806 C3 E9 77                             jp      AttractModeMain
  78+ 7809 3E 00        .YPressed:              ld      a,0
  79+ 780B C9                                   ret
  80+ 780C 3E FF        .NPressed:              ld      a,$FF
  81+ 780E C9                                   ret
  82+ 780F
  83+ 780F              ; alternate interrupts, one clears back buffer, one processes ship, one draws ship
  84+ 780F 00           AttractStep             DB      0
  85+ 7810
  86+ 7810              AttractModeUpdate:      MMUSelectMathsBankedFns                                 ; Need to set it on entering post interrupt to make sure we are in bank 0
  86+ 7810 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  87+ 7814 2A 5D 77                             ld      hl,(AttractTimer)
  88+ 7817 2B                                   dec     hl
  89+ 7818 22 5D 77                             ld      (AttractTimer),hl
  90+ 781B 7C                                   ld      a,h
  91+ 781C B5                                   or      l
  92+ 781D C2 24 78                             jp      nz,.DrawShip
  93+ 7820 CD 9E 78                             call    SelectARandomShip
  94+ 7823 C9                                   ret
  95+ 7824              .DrawShip:              ;BREAK
  96+ 7824 CD 37 84     .RandomRotateShip:      call    doRandom
  97+ 7827                                      MMUSelectUniverseN  1
  97+ 7827 ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
  98+ 782B 3A 0F 78                             ld      a,(AttractStep)
  99+ 782E A7                                   and     a       ; 0
 100+ 782F CA 39 78                             jp      z,.ApplyShipRollAndPitch
 101+ 7832 3D                                   dec     a       ; 1
 102+ 7833 CA 58 78                             jp      z,.ProcessNodes
 103+ 7836 C3 61 78                             jp      .PrepLines ; 2
 104+ 7839
 105+ 7839 CD 65 D8     .ApplyShipRollAndPitch: call    ApplyShipRollAndPitch
 106+ 783C CD 7A 77                             call    RandomXCounter
 107+ 783F CD 87 77                             call    RandomYCounter
 108+ 7842 3A 77 77                             ld      a,(LocalXCounter)
 109+ 7845 32 48 C0                             ld      (UBnKRotXCounter),a
 110+ 7848 3A 78 77                             ld      a,(LocalZCounter)
 111+ 784B 32 49 C0                             ld      (UBnKRotZCounter),a
 112+ 784E              .ClearScreen:           MMUSelectLayer2
 112+ 784E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113+ 7852 CD 8E E1                             call    l2_cls_upper_two_thirds
 114+ 7855 C3 8F 78                             jp      .DoneIM2
 115+ 7858 CD 26 DB     .ProcessNodes:          call    ProcessNodes
 116+ 785B CD D0 D1     .CullV2:                call    CullV2
 117+ 785E C3 8F 78                             jp      .DoneIM2
 118+ 7861 CD 69 DD     .PrepLines:             call    PrepLines
 119+ 7864                                      ;break
 120+ 7864                      IFDEF LATECLIPPING
 121+ 7864 CD 53 DA     .DrawLines:             call    DrawLinesLateClipping
 122+ 7867                                      ;break
 123+ 7867                      ELSE
 124+ 7867 ~            .DrawLines:             call    DrawLines
 125+ 7867                      ENDIF
 126+ 7867 01 01 01     .Drawbox:               ld		bc,$0101
 127+ 786A 11 FD 7F                             ld		de,$7FFD
 128+ 786D 3E C0                                ld		a,$C0
 129+ 786F                                      ;break
 130+ 786F                                      MMUSelectLayer2
 130+ 786F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 131+ 7873 CD F9 E3                             call	l2_draw_box
 132+ 7876 CD 97 E2     .DoubleBuffer:          call    l2_flip_buffers
 133+ 7879 3A 5F 77     .UpdateZPosIfReady:     ld      a,(AttractCounter)
 134+ 787C                                      ;break
 135+ 787C A7                                   and     a
 136+ 787D CA 8F 78                             jp      z,.DoneIM2
 137+ 7880 3D                                   dec     a
 138+ 7881 32 5F 77                             ld      (AttractCounter),a
 139+ 7884 2A 26 C0                             ld      hl, (UBnKzlo)
 140+ 7887 11 08 00     .UpdatePos:             ld      de, $0008
 141+ 788A ED 52                                sbc     hl,de
 142+ 788C 22 26 C0                             ld      (UBnKzlo),hl
 143+ 788F 3A 0F 78     .DoneIM2:               ld      a,(AttractStep)
 144+ 7892 3C                                   inc     a
 145+ 7893 FE 03                                cp      3
 146+ 7895 32 0F 78                             ld      (AttractStep),a
 147+ 7898 C0                                   ret     nz
 148+ 7899                                      ZeroA
 148+ 7899 AF          >                        xor a
 149+ 789A 32 0F 78                             ld      (AttractStep),a
 150+ 789D                                      ;break
 151+ 789D C9                                   ret
 152+ 789E
 153+ 789E
 154+ 789E
 155+ 789E 06 01        SelectARandomShip:      ld      b,1                             ; Demo screen uses slot 1
 156+ 78A0                                      MMUSelectUniverseN  1
 156+ 78A0 ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 157+ 78A4                                      MMUSelectShipBank1
 157+ 78A4 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 158+ 78A8 FD 26 01                             ld      iyh, 1
 159+ 78AB CD 37 84     .SelectRandom:          call    doRandom
 160+ 78AE                                      JumpIfAGTENusng ShipID_Rattler+1, .SelectRandom
 160+ 78AE FE 2C       >                        cp     ShipID_Rattler+1
 160+ 78B0 D2 AB 78    >                        jp		nc,.SelectRandom
 161+ 78B3 FD 6F                                ld      iyl,a
 162+ 78B5 CD 0F E0                             call    GetShipBankId                       ; find actual memory location of data
 163+ 78B8                                      MMUSelectShipBankA
 163+ 78B8 ED 92 57    >					 nextreg ShipModelMMU,	    a
 164+ 78BB 78                                   ld      a,b
 165+ 78BC CD 6A E0                             call    CopyShipToUniverse
 166+ 78BF 3A 0D C4                             ld      a,(ShipTypeAddr)
 167+ 78C2 CB 7F                                bit     7,a                                 ; is it a type we don't want in attract mode
 168+ 78C4 20 E5                                jr      nz,.SelectRandom
 169+ 78C6 3E 01                                ld      a,1                                 ; slot 1, iyh and iyl already set
 170+ 78C8 CD 56 C9                             call    UnivInitRuntime
 171+ 78CB CD 54 C7                             call    UnivSetDemoPostion
 172+ 78CE 21 E0 01                             ld      hl,AttractDuration*2
 173+ 78D1 22 5D 77                             ld      (AttractTimer),hl
 174+ 78D4 3E 80                                ld      a, AttractCounterStart
 175+ 78D6 32 5F 77                             ld      (AttractCounter),a
 176+ 78D9                                      ZeroA
 176+ 78D9 AF          >                        xor a
 177+ 78DA 32 0F 78                             ld      (AttractStep),a
 178+ 78DD C9                                   ret
 179+ 78DE
 180+ 78DE
 181+ 78DE
# file closed: ./Menus/AttractMode.asm
1056  78DE                  ENDIF
1057  78DE
1058  78DE                  include "./Maths/Utilities/XX12EquNodeDotOrientation.asm"
# file opened: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
   1+ 78DE              ; We enter here with hl pointing at XX16 and bc = XX15 value
   2+ 78DE              ; so xx12 = XX15 * XX16 row
   3+ 78DE              XX12ProcessOneRow:
   4+ 78DE              XX12CalcXCell:
   5+ 78DE ED 4B A6 C0          ld		bc,(UBnkXScaled)
   6+ 78E2 5E           		ld		e,(hl)								    ; get orientation ZX
   7+ 78E3 23           		inc		hl
   8+ 78E4 56           		ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
   9+ 78E5 7A           		ld		a,d
  10+ 78E6 A8                   xor     b
  11+ 78E7 E6 80        		and		SignOnly8Bit                            ; a = XX 16 sign
  12+ 78E9 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  13+ 78EB 78           		ld		a,b                                     ; now make bc abs bc
  14+ 78EC E6 7F        		and		SignMask8Bit
  15+ 78EE 47           		ld		b,a                                     ; bc = abs(bc) now
  16+ 78EF E5           		push	hl
  17+ 78F0 16 00                ld      d,0                                     ; d = value
  18+ 78F2 60           		ld		h,b
  19+ 78F3 69           		ld		l,c
  20+ 78F4 CD 84 90     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  21+ 78F7 22 79 7D     		ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
  22+ 78FA DD 7C        		ld		a,ixh
  23+ 78FC 32 80 7D     		ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
  24+ 78FF E1           		pop		hl
  25+ 7900              XX12CalcYCell:
  26+ 7900 ED 4B A8 C0          ld		bc,(UBnkYScaled)
  27+ 7904 23           		inc		hl
  28+ 7905 5E           		ld		e,(hl)							    	; get orientation ZX
  29+ 7906 23           		inc		hl
  30+ 7907 56           		ld		d,(hl)
  31+ 7908 7A           		ld		a,d
  32+ 7909 A8                   xor     b
  33+ 790A E6 80        		and		SignOnly8Bit
  34+ 790C DD 67        		ld		ixh,a								    ; XX16 orientation sign to ixh
  35+ 790E 78           		ld		a,b                                     ; now make bc abs bc
  36+ 790F E6 7F        		and		SignMask8Bit
  37+ 7911 47           		ld		b,a                                     ; bc = abs(bc) now
  38+ 7912 E5           		push	hl
  39+ 7913 16 00                ld      d,0                                     ; d = value
  40+ 7915 60           		ld		h,b
  41+ 7916 69           		ld		l,c
  42+ 7917 CD 84 90     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  43+ 791A 22 7B 7D     		ld		(XX12PVarResult2),hl				    ; T = 16 bit result
  44+ 791D DD 7C        		ld		a,ixh
  45+ 791F 32 7F 7D     		ld		(XX12PVarSign2),a					    ; S = sign
  46+ 7922 E1           		pop		hl
  47+ 7923              XX12CalcZCell:
  48+ 7923 ED 4B AA C0          ld		bc,(UBnkZScaled)
  49+ 7927 23           		inc		hl
  50+ 7928 5E           		ld		e,(hl)								    ; get orientation ZX
  51+ 7929 23           		inc		hl
  52+ 792A 56           		ld		d,(hl)
  53+ 792B 7A           		ld		a,d
  54+ 792C A8                   xor     b
  55+ 792D E6 80        		and		SignOnly8Bit
  56+ 792F DD 67        		ld		ixh,a								    ; orientation sign to ixh
  57+ 7931 78           		ld		a,b                                     ; now make bc abs bc
  58+ 7932 E6 7F        		and		SignMask8Bit
  59+ 7934 47           		ld		b,a                                     ; bc = abs(bc) now
  60+ 7935 16 00                ld      d,0                                     ; d = value
  61+ 7937 60           		ld		h,b
  62+ 7938 69           		ld		l,c
  63+ 7939 CD 84 90     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  64+ 793C 22 7D 7D     		ld		(XX12PVarResult3),hl				    ; T = 16 bit result
  65+ 793F DD 7C        		ld		a,ixh
  66+ 7941 32 81 7D     		ld		(XX12PVarSign3),a					    ; S = sign
  67+ 7944              XX12CalcCellResult:
  68+ 7944 2A 79 7D     		ld		hl,(XX12PVarResult1)				    ; X Cell Result
  69+ 7947 ED 5B 7B 7D  		ld		de,(XX12PVarResult2)				    ; Y Cell Result
  70+ 794B ED 4B 7F 7D  		ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
  71+ 794F              XX12MSBOnly:
  72+ 794F 6C           		ld		l,h									    ; now move results into lower byte so / 256
  73+ 7950 5A           		ld		e,d									    ; for both results
  74+ 7951 AF           		xor		a									    ;
  75+ 7952 67           		ld		h,a									    ;
  76+ 7953 57           		ld		d,a									    ; so set high byte to 0
  77+ 7954 CD 2F 00     		call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
  78+ 7957 47           		ld		b,a									    ; move sign into b ready for next calc
  79+ 7958 3A 81 7D     		ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
  80+ 795B 4F           		ld		c,a									    ; goes into c to align with DE
  81+ 795C ED 5B 7D 7D  		ld		de,(XX12PVarResult3)				    ; now add result to Result 3
  82+ 7960 5A           		ld		e,d                                     ; d = result /256
  83+ 7961 16 00        		ld		d,0									    ; and only us high byte
  84+ 7963 CD 2F 00     		call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
  85+ 7966 C9           		ret											    ; hl = result, a = sign
  86+ 7967              								    ; hl = result, a = sign
  87+ 7967
  88+ 7967              XX12EquNodeDotTransMat:							    ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
  89+ 7967              ;...X cell
  90+ 7967 21 79 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
  91+ 796A CD DE 78             call    XX12ProcessOneRow                   ; hl = result, a = sign
  92+ 796D 47           		ld		b,a                                 ; b = sign
  93+ 796E 7C           		ld		a,h                                 ; a = high byte
  94+ 796F B0           		or		b
  95+ 7970 32 AD C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
  96+ 7973 7D           		ld		a,l                                 ; the result will be in the lower byte now
  97+ 7974 32 AC C0             ld      (UBnkXX12xLo),a						; that is result done for
  98+ 7977              ;...Y cell
  99+ 7977 21 81 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 100+ 797A CD DE 78             call    XX12ProcessOneRow
 101+ 797D 47           		ld		b,a
 102+ 797E 7C           		ld		a,h
 103+ 797F              ;		ld		a,l
 104+ 797F B0           		or		b
 105+ 7980 32 AF C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 106+ 7983 7D           		ld		a,l                                 ; the result will be in the lower byte now
 107+ 7984 32 AE C0             ld      (UBnkXX12yLo),a						; that is result done for
 108+ 7987              ;...Z cell
 109+ 7987 21 89 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 110+ 798A CD DE 78             call    XX12ProcessOneRow
 111+ 798D 47           		ld		b,a
 112+ 798E 7C                   ld		a,h
 113+ 798F              ;		ld		a,l
 114+ 798F B0           		or		b
 115+ 7990 32 B1 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 116+ 7993 7D           		ld		a,l                                 ; the result will be in the lower byte now
 117+ 7994 32 B0 C0             ld      (UBnkXX12zLo),a						; that is result done for
 118+ 7997 C9                   ret
 119+ 7998
 120+ 7998              XX12EquNodeDotOrientation:							; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 121+ 7998              ;...X cell
 122+ 7998 21 79 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
 123+ 799B CD DE 78             call    XX12ProcessOneRow                   ; hl = result, a = sign
 124+ 799E 47           		ld		b,a                                 ; b = sign
 125+ 799F 7C           		ld		a,h                                 ; a = high byte
 126+ 79A0 B0           		or		b
 127+ 79A1 32 AD C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 128+ 79A4 7D           		ld		a,l                                 ; the result will be in the lower byte now
 129+ 79A5 32 AC C0             ld      (UBnkXX12xLo),a						; that is result done for
 130+ 79A8              ;...Y cell
 131+ 79A8 21 81 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 132+ 79AB CD DE 78             call    XX12ProcessOneRow
 133+ 79AE 47           		ld		b,a
 134+ 79AF 7C           		ld		a,h
 135+ 79B0              ;		ld		a,l
 136+ 79B0 B0           		or		b
 137+ 79B1 32 AF C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 138+ 79B4 7D           		ld		a,l                                 ; the result will be in the lower byte now
 139+ 79B5 32 AE C0             ld      (UBnkXX12yLo),a						; that is result done for
 140+ 79B8              ;...Z cell
 141+ 79B8 21 89 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 142+ 79BB CD DE 78             call    XX12ProcessOneRow
 143+ 79BE 47           		ld		b,a
 144+ 79BF 7C                   ld		a,h
 145+ 79C0              ;		ld		a,l
 146+ 79C0 B0           		or		b
 147+ 79C1 32 B1 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 148+ 79C4 7D           		ld		a,l                                 ; the result will be in the lower byte now
 149+ 79C5 32 B0 C0             ld      (UBnkXX12zLo),a						; that is result done for
 150+ 79C8 C9                   ret
 151+ 79C9
 152+ 79C9              XX12EquNodeDotXX16:					         		; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 153+ 79C9              ;...X cell
 154+ 79C9 21 61 C0     		ld		hl,UBnkTransmatSidevX     			; process orientation matrix row 0
 155+ 79CC CD DE 78             call    XX12ProcessOneRow                   ; hl = result, a = sign
 156+ 79CF 47           		ld		b,a                                 ; b = sign
 157+ 79D0 7C           		ld		a,h                                 ; a = high byte
 158+ 79D1 B0           		or		b
 159+ 79D2 32 AD C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 160+ 79D5 7D           		ld		a,l                                 ; the result will be in the lower byte now
 161+ 79D6 32 AC C0             ld      (UBnkXX12xLo),a						; that is result done for
 162+ 79D9              ;...Y cell
 163+ 79D9 21 67 C0     		ld		hl,UBnkTransmatRoofvX     			; process orientation matrix row 1
 164+ 79DC CD DE 78             call    XX12ProcessOneRow
 165+ 79DF 47           		ld		b,a
 166+ 79E0 7C           		ld		a,h
 167+ 79E1              ;		ld		a,l
 168+ 79E1 B0           		or		b
 169+ 79E2 32 AF C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 170+ 79E5 7D           		ld		a,l                                 ; the result will be in the lower byte now
 171+ 79E6 32 AE C0             ld      (UBnkXX12yLo),a						; that is result done for
 172+ 79E9              ;...Z cell
 173+ 79E9 21 6D C0     		ld		hl,UBnkTransmatNosevX     			; process orientation matrix row 1
 174+ 79EC CD DE 78             call    XX12ProcessOneRow
 175+ 79EF 47           		ld		b,a
 176+ 79F0 7C                   ld		a,h
 177+ 79F1              ;		ld		a,l
 178+ 79F1 B0           		or		b
 179+ 79F2 32 B1 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 180+ 79F5 7D           		ld		a,l                                 ; the result will be in the lower byte now
 181+ 79F6 32 B0 C0             ld      (UBnkXX12zLo),a						; that is result done for
 182+ 79F9 C9                   ret
# file closed: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
1059  79FA                  include "./ModelRender/CopyXX12ToXX15.asm"
# file opened: ./ModelRender/CopyXX12ToXX15.asm
   1+ 79FA 21 AC C0     CopyXX12ToXX15:         ld      hl,XX12
   2+ 79FD 11 A6 C0                             ld      de,XX15
   3+ 7A00 01 06 00                             ld      bc,6
   4+ 7A03 ED B0                                ldir
   5+ 7A05 C9                                   ret
   6+ 7A06
   7+ 7A06 21 AC C0     CopyXX12ToXX12Save:     ld      hl,XX12
   8+ 7A09 11 B2 C0                             ld      de,XX12Save
   9+ 7A0C 01 06 00                             ld      bc,6
  10+ 7A0F ED B0                                ldir
  11+ 7A11 C9                                   ret
  12+ 7A12
  13+ 7A12 21 B2 C0     CopyXX12SaveToXX12:     ld      hl,XX12Save
  14+ 7A15 11 AC C0                             ld      de,XX12
  15+ 7A18 01 06 00                             ld      bc,6
  16+ 7A1B ED B0                                ldir
  17+ 7A1D C9                                   ret
  18+ 7A1E
  19+ 7A1E 21 AC C0     CopyXX12ToXX12Save2:    ld      hl,XX12
  20+ 7A21 11 B8 C0                             ld      de,XX12Save2
  21+ 7A24 01 06 00                             ld      bc,6
  22+ 7A27 ED B0                                ldir
  23+ 7A29 C9                                   ret
  24+ 7A2A
  25+ 7A2A 21 B8 C0     CopyXX12Save2ToXX12:    ld      hl,XX12Save2
  26+ 7A2D 11 AC C0                             ld      de,XX12
  27+ 7A30 01 06 00                             ld      bc,6
  28+ 7A33 ED B0                                ldir
  29+ 7A35 C9                                   ret
  30+ 7A36
# file closed: ./ModelRender/CopyXX12ToXX15.asm
1060  7A36                  ;;DEFUNCTinclude "./ModelRender/CopyXX15ToXX12.asm"
1061  7A36                  include "./Maths/Utilities/ScaleXX16Matrix197.asm"
# file opened: ./Maths/Utilities/ScaleXX16Matrix197.asm
   1+ 7A36              ScaleXX16Matrix197:
   2+ 7A36                      IFDEF LOGMATHS
   3+ 7A36 ~                                    ld		b,9                 ; Interate though all 9 matrix elements
   4+ 7A36 ~                                    ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
   5+ 7A36 ~                                    MMUSelectMathsTables
   6+ 7A36 ~            .ScaleXX16Loop:         ld		e,(hl)              ; set DE = matrix value              ;
   7+ 7A36 ~                                    inc		hl                  ;
   8+ 7A36 ~                                    ld		a,(hl)              ;
   9+ 7A36 ~                                    ld		d,a                 ;
  10+ 7A36 ~                                    and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  11+ 7A36 ~                                    ld		ixl,a				; retain for sign bit
  12+ 7A36 ~                                    ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  13+ 7A36 ~                                    ld      a,d                 ; a = high byte after x 2
  14+ 7A36 ~                                    push	bc                  ; save BC  counter and constant 197
  15+ 7A36 ~                                    push	hl                  ; save HL
  16+ 7A36 ~                                    call    AEquAmul256Div197Log;
  17+ 7A36 ~                                    pop		hl
  18+ 7A36 ~                                    dec     hl                  ; move back to low byte
  19+ 7A36 ~                                    ld      (hl),a              ; save result in low byte as we want to preserve high byte sign
  20+ 7A36 ~                                    inc     hl                  ; move back to high byte
  21+ 7A36 ~                                    ld      a,ixl
  22+ 7A36 ~                                    ld      (hl),a              ; write back just sign bit
  23+ 7A36 ~                                    pop		bc                  ; retrieve both counter and constant 197
  24+ 7A36 ~                                    inc     hl                  ; no to next vertex value
  25+ 7A36 ~                                    djnz	.ScaleXX16Loop
  26+ 7A36 ~                                    MMUSelectROM0
  27+ 7A36 ~                                    ret
  28+ 7A36                      ELSE
  29+ 7A36 06 09                                ld		b,9                 ; Interate though all 9 matrix elements
  30+ 7A38 0E C5                                ld		c,ConstNorm         ; c = 197
  31+ 7A3A 21 61 C0                             ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
  32+ 7A3D 7E           .ScaleXX16Loop:         ld		a,(hl)              ; set DE = matrix value
  33+ 7A3E 5F                                   ld		e,a                 ;
  34+ 7A3F 23                                   inc		hl                  ;
  35+ 7A40 7E                                   ld		a,(hl)              ;
  36+ 7A41 57                                   ld		d,a                 ;
  37+ 7A42 E6 80                                and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  38+ 7A44 DD 6F                                ld		ixl,a				; retain for sign bit
  39+ 7A46                                      ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  39+ 7A46 CB 23       >			   sla e
  39+ 7A48 CB 12       >			   rl  d
  40+ 7A4A 7A                                   ld      a,d                 ; a = high byte after x 2
  41+ 7A4B C5                                   push	bc                  ; save BC  counter and constant 197
  42+ 7A4C E5                                   push	hl                  ; save HL
  43+ 7A4D CD CC 94                             call	DIV16Amul256dCUNDOC; AEquAmul256DivD; DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
  44+ 7A50 E1                                   pop		hl
  45+ 7A51 2B                                   dec     hl                  ; move back to low byte
  46+ 7A52 71                                   ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
  47+ 7A53 23                                   inc     hl                  ; move back to high byte
  48+ 7A54                                  ;    ld      a,(hl)
  49+ 7A54                                  ;    and     $80
  50+ 7A54 DD 7D                                ld      a,ixl
  51+ 7A56 77                                   ld      (hl),a              ; write back just sign bit
  52+ 7A57 C1                                   pop		bc                  ; retrieve both counter and constant 197
  53+ 7A58 23                                   inc     hl                  ; no to next vertex value
  54+ 7A59 10 E2                                djnz	.ScaleXX16Loop
  55+ 7A5B C9                                   ret
  56+ 7A5C                      ENDIF
# file closed: ./Maths/Utilities/ScaleXX16Matrix197.asm
1062  7A5C
1063  7A5C                  include "./Universe/StarDust/StarRoutines.asm"
# file opened: ./Universe/StarDust/StarRoutines.asm
   1+ 7A5C              ;note: DIV16Amul256dCUNDOC as per
   2+ 7A5C              ;                                   BC = A0
   3+ 7A5C              ;                                   DE = 0C
   4+ 7A5C              ;                                   so BC = a * 256 / C
   5+ 7A5C
   6+ 7A5C              ; We can cheat here, Speed is always 0 or positive
   7+ 7A5C              ; z postion will always be positive if we can see it
   8+ 7A5C
   9+ 7A5C EB           InitStarAtHL:           ex      de,hl               ; preserving hl
  10+ 7A5D CD 37 84                             call    doRND               ; a = random OR bit 5
  11+ 7A60 EB                                   ex      de,hl               ; .
  12+ 7A61 F6 08                                or      8                   ; .
  13+ 7A63 77                                   ld      (hl),a              ; save to x pos
  14+ 7A64 E6 7F                                and     $7F                 ; a = abs a
  15+ 7A66 23                                   inc     hl                  ;
  16+ 7A67 77                                   ld      (hl),a              ;
  17+ 7A68 EB                                   ex      de,hl               ; preserving hl
  18+ 7A69 CD 37 84                             call    doRND               ; a = -ve (random / 2)
  19+ 7A6C EB                                   ex      de,hl               ; .
  20+ 7A6D 0F                                   rrca                        ; .
  21+ 7A6E E6 80                                and     $80                 ; .
  22+ 7A70 B6                                   or      (hl)                ; or with
  23+ 7A71 77                                   ld      (hl),a
  24+ 7A72 23                                   inc     hl
  25+ 7A73 EB                                   ex      de,hl
  26+ 7A74 CD 37 84                             call    doRND
  27+ 7A77 EB                                   ex      de,hl
  28+ 7A78 F6 04                                or      4
  29+ 7A7A 77                                   ld      (hl),a
  30+ 7A7B 23                                   inc     hl
  31+ 7A7C E6 7F                                and     $7F
  32+ 7A7E 77                                   ld      (hl),a
  33+ 7A7F EB                                   ex      de,hl
  34+ 7A80 CD 37 84                             call    doRND
  35+ 7A83 EB                                   ex      de,hl
  36+ 7A84 0F                                   rrca
  37+ 7A85 E6 80                                and     $80
  38+ 7A87 B6                                   or      (hl)
  39+ 7A88 77                                   ld      (hl),a
  40+ 7A89 23                                   inc     hl
  41+ 7A8A EB                                   ex      de,hl
  42+ 7A8B CD 37 84                             call    doRND
  43+ 7A8E EB                                   ex      de,hl
  44+ 7A8F F6 90                                or      144
  45+ 7A91 77                                   ld      (hl),a
  46+ 7A92 23                                   inc     hl
  47+ 7A93 F6 70                                or      %01110000
  48+ 7A95 E6 7F                                and     $7f     ; bodge
  49+ 7A97 77                                   ld      (hl),a
  50+ 7A98 23                                   inc     hl
  51+ 7A99 C9                                   ret
  52+ 7A9A
  53+ 7A9A EB           InitHyperStarAtHL:      ex      de,hl
  54+ 7A9B CD 37 84                             call    doRND
  55+ 7A9E CB 27                                sla     a
  56+ 7AA0 CB 27                                sla     a                ; so its * 4 as we have a blank spot
  57+ 7AA2 EB                                   ex      de,hl
  58+ 7AA3 E6 F8                                and     %11111000
  59+ 7AA5 77                                   ld      (hl),a
  60+ 7AA6 E6 7F                                and     $7F
  61+ 7AA8 23                                   inc     hl
  62+ 7AA9 77                                   ld      (hl),a
  63+ 7AAA EB                                   ex      de,hl
  64+ 7AAB CD 37 84                             call    doRND
  65+ 7AAE EB                                   ex      de,hl
  66+ 7AAF 0F                                   rrca
  67+ 7AB0 E6 80                                and     $80
  68+ 7AB2 B6                                   or      (hl)
  69+ 7AB3 77                                   ld      (hl),a
  70+ 7AB4 23                                   inc     hl
  71+ 7AB5 EB                                   ex      de,hl
  72+ 7AB6 CD 37 84                             call    doRND
  73+ 7AB9 CB 27                                sla     a
  74+ 7ABB CB 27                                sla     a               ; so its * 4 as we have a blank spot
  75+ 7ABD EB                                   ex      de,hl
  76+ 7ABE E6 F8                                and     %11111000
  77+ 7AC0 77                                   ld      (hl),a
  78+ 7AC1 23                                   inc     hl
  79+ 7AC2 E6 7F                                and     $7F
  80+ 7AC4 77                                   ld      (hl),a
  81+ 7AC5 EB                                   ex      de,hl
  82+ 7AC6 CD 37 84                             call    doRND
  83+ 7AC9 EB                                   ex      de,hl
  84+ 7ACA 0F                                   rrca
  85+ 7ACB E6 80                                and     $80
  86+ 7ACD B6                                   or      (hl)
  87+ 7ACE 77                                   ld      (hl),a
  88+ 7ACF 23                                   inc     hl
  89+ 7AD0 EB                                   ex      de,hl
  90+ 7AD1 CD 37 84                             call    doRND
  91+ 7AD4 EB                                   ex      de,hl
  92+ 7AD5 F6 5F                                or      95
  93+ 7AD7 77                                   ld      (hl),a
  94+ 7AD8 23                                   inc     hl
  95+ 7AD9 F6 70                                or      %01110000
  96+ 7ADB E6 7F                                and     $7f     ; bodge
  97+ 7ADD 77                                   ld      (hl),a
  98+ 7ADE 23                                   inc     hl
  99+ 7ADF C9                                   ret
 100+ 7AE0
 101+ 7AE0              ;----------------------------------------------------------------------------------------------------------------------------------
 102+ 7AE0 06 0B        InitialiseStars:        ld      b,MaxNumberOfStars
 103+ 7AE2 21 C2 7F                             ld      hl,varDust
 104+ 7AE5 CD 5C 7A     .InitStarsLoop:         call    InitStarAtHL
 105+ 7AE8 10 FB                                djnz    .InitStarsLoop
 106+ 7AEA C9                                   ret
 107+ 7AEB              ;----------------------------------------------------------------------------------------------------------------------------------
 108+ 7AEB 06 0B        InitialiseHyperStars:   ld      b,MaxNumberOfStars
 109+ 7AED 21 C2 7F                             ld      hl,varDust
 110+ 7AF0 CD 9A 7A     .InitStarsLoop:         call    InitHyperStarAtHL
 111+ 7AF3 10 FB                                djnz    .InitStarsLoop
 112+ 7AF5 C9                                   ret
 113+ 7AF6              ;----------------------------------------------------------------------------------------------------------------------------------
 114+ 7AF6 FD 21 C2 7F  SaveCurrentDust:        ld          iy,varDust
 115+ 7AFA DD 21 AC 7F                          ld          ix,varDustWarpRender
 116+ 7AFE 06 0B                                ld          b, MaxNumberOfStars
 117+ 7B00 FD 7E 01     .SaveLoop               ld          a,(iy+1)
 118+ 7B03 6F                                   ld          l,a
 119+ 7B04 E6 7F                                and         $7F
 120+ 7B06                                      JumpOnBitSet l,7,.StarNegXPt
 120+ 7B06 CB 7D       >                        bit 	7,l
 120+ 7B08 C2 11 7B    >                        jp      nz,.StarNegXPt
 121+ 7B0B C6 80                                add         a,$80
 122+ 7B0D 5F                                   ld          e,a
 123+ 7B0E C3 16 7B                             jp          .StarDoneX
 124+ 7B11 57           .StarNegXPt:            ld          d,a
 125+ 7B12 3E 80                                ld          a,$80
 126+ 7B14 92                                   sub         d
 127+ 7B15 5F                                   ld          e,a
 128+ 7B16 FD 7E 03     .StarDoneX:             ld          a,(iy+3)
 129+ 7B19 6F                                   ld          l,a
 130+ 7B1A E6 7F                                and         $7F
 131+ 7B1C                                      JumpOnBitSet l,7,.StarNegYPt
 131+ 7B1C CB 7D       >                        bit 	7,l
 131+ 7B1E C2 27 7B    >                        jp      nz,.StarNegYPt
 132+ 7B21 C6 60                                add         a,$60
 133+ 7B23 57                                   ld          d,a
 134+ 7B24 C3 2C 7B                             jp          .StarDoneY
 135+ 7B27 57           .StarNegYPt:            ld          d,a
 136+ 7B28 3E 60                                ld          a,$60
 137+ 7B2A 92                                   sub         d
 138+ 7B2B 57                                   ld          d,a
 139+ 7B2C DD 73 00     .StarDoneY:             ld          (ix+0),e
 140+ 7B2F DD 72 01                             ld          (ix+1),d
 141+ 7B32 DD 23                                inc         ix
 142+ 7B34 DD 23                                inc         ix
 143+ 7B36 FD E5 E1                             ld          hl,iy
 144+ 7B39 3E 06                                ld          a,6
 145+ 7B3B ED 31                                add         hl,a
 146+ 7B3D E5 FD E1                             ld          iy,hl
 147+ 7B40 10 BE                                djnz        .SaveLoop
 148+ 7B42 C9                                   ret
 149+ 7B43
 150+ 7B43              ;----------------------------------------------------------------------------------------------------------------------------------
 151+ 7B43 06 0B        DustForward:            ld      b,MaxNumberOfStars                  ; get the number of stars to process
 152+ 7B45 FD 21 C2 7F                          ld      iy,varDust                          ; hl is now a pointer to the dust array
 153+ 7B49 C5           StarProcessLoop:        push    bc                                  ; save counter +1
 154+ 7B4A FD 7E 05     .Qequ64XSpeedDivZHi:    ld      a,(iy+5)                            ; e  = z high
 155+ 7B4D 5F                                   ld      e,a                                 ; d = 0
 156+ 7B4E 16 00                                ld      d,0                                 ; de = zhi/256
 157+ 7B50 3A 96 7E                             ld      a,(DELTA)                           ; a = speed
 158+ 7B53                                      JumpIfAIsNotZero .NormalSpeed               ; if we are stationary set speed
 158+ 7B53 A7          >                        and     a
 158+ 7B54 C2 58 7B    >                        jp	    nz,.NormalSpeed
 159+ 7B57 3C                                   inc     a                                   ; so it is at least some dust movement
 160+ 7B58 47           .NormalSpeed:           ld      b,a                                 ;
 161+ 7B59 0E 00                                ld      c,0                                 ; bc = delta * 256
 162+ 7B5B CD 58 95                             call    BC_Div_DE                           ; BC = Speed/Z , HL = remainder
 163+ 7B5E                                      ShiftHLRight1
 163+ 7B5E CB 3C       >			   srl h
 163+ 7B60 CB 1D       >			   rr  l
 164+ 7B62                                      ShiftHLRight1                               ; hl = remainder/2 so now 64 * speed / zhi
 164+ 7B62 CB 3C       >			   srl h
 164+ 7B64 CB 1D       >			   rr  l
 165+ 7B66 7D                                   ld      a,l                                 ;
 166+ 7B67 F6 01                                or      1                                   ; so ensure A is at least 1 for ambient movement
 167+ 7B69 DD 6F                                ld      ixl,a                               ; preserve A which is also VarQ = 64 * speed / zhi
 168+ 7B6B FD 6E 04 FD  .ZequZMinusSpeedX64:    ld      hl,(iy+4)                           ; hl = z
 168+ 7B6F 66 05
 169+ 7B71 ED 5B 97 7E                          ld      de, (DELTA4)                         ; de = delta4 i.e. speed * 64 pre computed
 170+ 7B75 CD 53 01                             call    subHLDES15
 171+ 7B78                                      JumpOnBitSet h,7,ResetStar                  ; if z ended up negative then reset the star
 171+ 7B78 CB 7C       >                        bit 	7,h
 171+ 7B7A C2 CF 7C    >                        jp      nz,ResetStar
 172+ 7B7D FD 75 04 FD                          ld      (iy+4),hl                           ; save new z pos
 172+ 7B81 74 05
 173+ 7B83 FD 6E 00 FD  .XEquXPlusXhiMulQ       ld      hl,(iy+0)                           ; hl  = x
 173+ 7B87 66 01
 174+ 7B89 7C                                   ld      a,h                                 ;
 175+ 7B8A E6 7F                                and     $7F                                 ;
 176+ 7B8C 57                                   ld      d,a                                 ; d = abs(x hi)
 177+ 7B8D DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 178+ 7B8F ED 30                                mul                                         ; de =  abs(x hi) * Q
 179+ 7B91 7C                                   ld      a,h                                 ;
 180+ 7B92 E6 80                                and     $80                                 ;
 181+ 7B94 B2                                   or      d                                   ; set sign bit in d
 182+ 7B95 57                                   ld      d,a                                 ;
 183+ 7B96 CD 52 00                             call    ADDHLDESignedV4                  ; x = x + (x hi/256 * Q)
 184+ 7B99 7C                                   ld      a,h
 185+ 7B9A E6 7F                                and     $7F
 186+ 7B9C                                      JumpIfAGTENusng $70, ResetStar
 186+ 7B9C FE 70       >                        cp     $70
 186+ 7B9E D2 CF 7C    >                        jp		nc,ResetStar
 187+ 7BA1 FD 75 00 FD                          ld      (iy+0),hl                           ;
 187+ 7BA5 74 01
 188+ 7BA7 FD 6E 02 FD  .YEquYPlusYhiMulQ       ld      hl,(iy+2)                           ; hl  = y
 188+ 7BAB 66 03
 189+ 7BAD 7C                                   ld      a,h                                 ;
 190+ 7BAE E6 7F                                and     $7F                                 ;
 191+ 7BB0 57                                   ld      d,a                                 ; d = abs(y hi)
 192+ 7BB1 DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 193+ 7BB3 ED 30                                mul                                         ; de =  abs(y hi) * Q
 194+ 7BB5 7C                                   ld      a,h                                 ;
 195+ 7BB6 E6 80                                and     $80                                 ;
 196+ 7BB8 B2                                   or      d                                   ; set sign bit in d
 197+ 7BB9 57                                   ld      d,a                                 ;
 198+ 7BBA CD 52 00                             call    ADDHLDESignedV4                  ; y = y + (x hi/256 * Q)
 199+ 7BBD 7C                                   ld      a,h
 200+ 7BBE E6 7F                                and     $7F
 201+ 7BC0                                      JumpIfAGTENusng $60, ResetStar
 201+ 7BC0 FE 60       >                        cp     $60
 201+ 7BC2 D2 CF 7C    >                        jp		nc,ResetStar
 202+ 7BC5 7C                                   ld      a,h
 203+ 7BC6 E6 80                                and     $80
 204+ 7BC8 20 06                                jr      nz,.NoSecondCheck
 205+ 7BCA 7C                                   ld      a,h
 206+ 7BCB                                      JumpIfAGTENusng $20, ResetStar
 206+ 7BCB FE 20       >                        cp     $20
 206+ 7BCD D2 CF 7C    >                        jp		nc,ResetStar
 207+ 7BD0 FD 75 02 FD  .NoSecondCheck:         ld      (iy+2),hl                           ;
 207+ 7BD4 74 03
 208+ 7BD6              ; Now roll
 209+ 7BD6              ;  6. x = x - alpha * y / 256
 210+ 7BD6 3A B6 7D     .XRoll:                 ld      a,(ALP1)                           ; h = sign, l = magnitude
 211+ 7BD9 FE 00                                cp      0
 212+ 7BDB 28 4D                                jr      z,.NoRoll                           ; don;t roll if magnitude is 0
 213+ 7BDD                                   ;   break
 214+ 7BDD 6F                                   ld      l,a                                 ; roll magnitude
 215+ 7BDE 3A B8 7D                             ld      a,(ALP2FLIP)                        ; inverted roll sign
 216+ 7BE1 E6 80                                and     SignOnly8Bit                        ; sanitise sign bit
 217+ 7BE3 67                                   ld      h,a                                 ; h = roll sign
 218+ 7BE4 E5                                   push    hl                                  ; save on the stack
 219+ 7BE5 4F           .rxSaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 220+ 7BE6 55           .rxDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 221+ 7BE7 FD 7E 03                             ld      a,(iy+3)                            ; get high byte from x coord
 222+ 7BEA 5F                                   ld      e,a                                 ; save signed byte
 223+ 7BEB E6 80                                and     SignOnly8Bit                        ; a = sign only
 224+ 7BED 47           .rxBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 225+ 7BEE 7B           .rxEEquABSignX:         ld      a,e                                 ; e = abs byte
 226+ 7BEF E6 7F                                and     SignMask8Bit
 227+ 7BF1 5F                                   ld      e,a                                 ; save abs x hi in e
 228+ 7BF2 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 229+ 7BF4 79                                   ld      a,c                                 ; get back sign from roll
 230+ 7BF5 A8                                   xor     b                                   ; handle muliple sign bits
 231+ 7BF6 B2                                   or      d
 232+ 7BF7 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 233+ 7BF8 FD 6E 00 FD                          ld      hl,(iy+0)                           ; h = iy+1, l = iy+0
 233+ 7BFC 66 01
 234+ 7BFE CD 53 01                             call    subHLDES15                       ; we are usign add, so may need to fip sign?
 235+ 7C01 FD 75 00 FD                          ld      (iy+0),hl
 235+ 7C05 74 01
 236+ 7C07              ;  5. y = y + alpha * x / 256
 237+ 7C07              .YRoll:                 ;break
 238+ 7C07 E1                                   pop     hl                                  ; h = sign, l = magnitude
 239+ 7C08 4C           .rySaveAlphaSign:       ld      c,h                                 ; save alpha sign in c
 240+ 7C09 55           .ryDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 241+ 7C0A FD 7E 01                             ld      a,(iy+1)                            ; get high byte from x coord
 242+ 7C0D 5F                                   ld      e,a
 243+ 7C0E E6 80                                and     SignOnly8Bit
 244+ 7C10 47           .ryBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 245+ 7C11 7B           .ryEEquABSignX:         ld      a,e
 246+ 7C12 E6 7F                                and     SignMask8Bit
 247+ 7C14 5F                                   ld      e,a                                 ; save abs x hi in e
 248+ 7C15 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 249+ 7C17 79                                   ld      a,c
 250+ 7C18 A8                                   xor     b                                   ; handle muliple sign bits
 251+ 7C19 B2                                   or      d
 252+ 7C1A 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 253+ 7C1B FD 6E 02 FD                          ld      hl,(iy+2)                           ; h = iy+1, l = iy+0
 253+ 7C1F 66 03
 254+ 7C21 CD 52 00                             call    ADDHLDESignedV4                  ; we are usign add, so may need to fip sign?
 255+ 7C24 FD 75 02 FD                          ld      (iy+2),hl
 255+ 7C28 74 03
 256+ 7C2A 3A AA 7D     .NoRoll:                ld      a,(BET1)
 257+ 7C2D FE 00                                cp      0
 258+ 7C2F 28 22                                jr      z,.NoPitch
 259+ 7C31              ;  8. y = y - beta * 256
 260+ 7C31 57           .YPitch:                ld      d,a                                 ; d = BET1
 261+ 7C32 FD 7E 02                             ld      a,(iy+2)
 262+ 7C35 5F                                   ld      e,a                                 ; e = Y HI
 263+ 7C36 ED 30                                mul                                         ; de = BET1 * YHi so now D = BETA & YHI / 256
 264+ 7C38 5F                                   ld      e,a
 265+ 7C39 ED 30                                mul                                         ; so now de = (BETA & Yhi) ^ 2
 266+ 7C3B                                      ShiftDELeft1                                ; de = 2 * ((BETA & Yhi) ^ 2)
 266+ 7C3B CB 23       >			   sla e
 266+ 7C3D CB 12       >			   rl  d
 267+ 7C3F 3A AB 7D                             ld      a,(BET2)                            ; get inverted Sign
 268+ 7C42 B2                                   or      d
 269+ 7C43 57                                   ld      d,a                                 ; de = - (2 * ((BETA & Yhi) ^ 2))
 270+ 7C44 FD 6E 02 FD                          ld      hl,(iy+2)
 270+ 7C48 66 03
 271+ 7C4A CD 52 00                             call    ADDHLDESignedV4
 272+ 7C4D FD 75 02 FD                          ld      (iy+2),hl
 272+ 7C51 74 03
 273+ 7C53              ; now work out screen pos
 274+ 7C53              ; Note two optimistations, write to layer 2 - we get a free removal via double buffer cls
 275+ 7C53              ; read z dept than determine hw many pixesl to plot, e.g. 1,2,3,4
 276+ 7C53              ;        pop     de
 277+ 7C53               ;       call    ProjectStarXToScreen
 278+ 7C53                                      ;pop     de
 279+ 7C53              .NoPitch:
 280+ 7C53 FD 7E 01     .ProjectStar:           ld      a,(iy+1)
 281+ 7C56 6F                                   ld      l,a
 282+ 7C57 E6 7F                                and     $7F
 283+ 7C59                                      JumpOnBitSet l,7,StarNegXPt
 283+ 7C59 CB 7D       >                        bit 	7,l
 283+ 7C5B C2 64 7C    >                        jp      nz,StarNegXPt
 284+ 7C5E C6 80                                add     a,$80
 285+ 7C60 4F                                   ld      c,a
 286+ 7C61 C3 69 7C                             jp      StarDoneX
 287+ 7C64 47           StarNegXPt:             ld      b,a
 288+ 7C65 3E 80                                ld      a,$80
 289+ 7C67 90                                   sub     b
 290+ 7C68 4F                                   ld      c,a
 291+ 7C69 FD 7E 03     StarDoneX:              ld      a,(iy+3)
 292+ 7C6C 6F                                   ld      l,a
 293+ 7C6D E6 7F                                and     $7F
 294+ 7C6F                                      JumpOnBitSet l,7,StarNegYPt
 294+ 7C6F CB 7D       >                        bit 	7,l
 294+ 7C71 C2 7A 7C    >                        jp      nz,StarNegYPt
 295+ 7C74 C6 60                                add     a,$60
 296+ 7C76 47                                   ld      b,a
 297+ 7C77 C3 7F 7C                             jp      StarDoneY
 298+ 7C7A 47           StarNegYPt:             ld      b,a
 299+ 7C7B 3E 60                                ld      a,$60
 300+ 7C7D 90                                   sub     b
 301+ 7C7E 47                                   ld      b,a
 302+ 7C7F 3E 92        StarDoneY:              ld      a,L2DustColour
 303+ 7C81 C5                                   push    bc
 304+ 7C82              .DrawStar:              MMUSelectLayer2
 304+ 7C82 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 305+ 7C86 CD B6 E2                             call    l2_plot_pixel
 306+ 7C89 FD 7E 05                             ld      a,(iy+5)
 307+ 7C8C C1                                   pop    bc
 308+ 7C8D                                      JumpIfAGTENusng $60,EndofStarsLoop
 308+ 7C8D FE 60       >                        cp     $60
 308+ 7C8F D2 BF 7C    >                        jp		nc,EndofStarsLoop
 309+ 7C92 3E 92                                ld      a,L2DustColour
 310+ 7C94 0C                                   inc     c
 311+ 7C95 C5                                   push    bc
 312+ 7C96                                      MMUSelectLayer2
 312+ 7C96 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 313+ 7C9A CD B6 E2                             call    l2_plot_pixel
 314+ 7C9D FD 7E 05                             ld      a,(iy+5)
 315+ 7CA0 C1                                   pop    bc
 316+ 7CA1                                      JumpIfAGTENusng $37,EndofStarsLoop
 316+ 7CA1 FE 37       >                        cp     $37
 316+ 7CA3 D2 BF 7C    >                        jp		nc,EndofStarsLoop
 317+ 7CA6 3E 92                                ld      a,L2DustColour
 318+ 7CA8 04                                   inc     b
 319+ 7CA9 C5                                   push    bc
 320+ 7CAA                                      MMUSelectLayer2
 320+ 7CAA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 321+ 7CAE CD B6 E2                             call    l2_plot_pixel
 322+ 7CB1 FD 7E 05                             ld      a,(iy+5)
 323+ 7CB4 C1                                   pop    bc
 324+ 7CB5 3E 92                                ld      a,L2DustColour
 325+ 7CB7 0D                                   dec     c
 326+ 7CB8                                      MMUSelectLayer2
 326+ 7CB8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 327+ 7CBC CD B6 E2                             call    l2_plot_pixel
 328+ 7CBF C1           EndofStarsLoop:         pop     bc                                      ;  0
 329+ 7CC0 FD E5        NextStarLoop3:          push    iy                                      ; +1
 330+ 7CC2 E1                                   pop     hl                                      ;  0
 331+ 7CC3 ED 34 06 00                          add     hl,6
 332+ 7CC7 E5           NextStarLoop2:          push    hl                                      ; +1
 333+ 7CC8 FD E1                                pop     iy                                      ;  0
 334+ 7CCA 05                                   dec     b
 335+ 7CCB C2 49 7B                             jp      nz,StarProcessLoop
 336+ 7CCE C9                                   ret
 337+ 7CCF C1           ResetStar:              pop     bc                                      ; 0
 338+ 7CD0 FD E5                                push    iy                                      ; +1 (current star)
 339+ 7CD2 E1                                   pop     hl                                      ; 0
 340+ 7CD3 CD 5C 7A                             call    InitStarAtHL
 341+ 7CD6 C3 C0 7C                             jp      NextStarLoop3
 342+ 7CD9              ;----------------------------------------------------------------------------------------------------------------------------------
 343+ 7CD9 FD 4E 00     ProjectStarXToScreen:   ld      c,(iy+0)
 344+ 7CDC FD 7E 01                             ld      a,(iy+1)
 345+ 7CDF 6F                                   ld      l,a
 346+ 7CE0 E6 7F                                and     $7F
 347+ 7CE2 47                                   ld      b,a
 348+ 7CE3 CD E3 94                             call    DIV16BCDivDEUNDOC
 349+ 7CE6 7D                                   ld      a,l
 350+ 7CE7                                      JumpOnBitSet a,7,StarXNegativePoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 350+ 7CE7 CB 7F       >                        bit 	7,a
 350+ 7CE9 C2 F4 7C    >                        jp      nz,StarXNegativePoint
 351+ 7CEC              ;StarXPositivePoint:									; x was positive result
 352+ 7CEC 2E 80                                ld          l,ScreenCenterX						;
 353+ 7CEE 26 00                                ld          h,0
 354+ 7CF0 09                                   add         hl,bc								; hl = Screen Centre + X
 355+ 7CF1 C3 FB 7C                             jp          StarStoreXPoint
 356+ 7CF4              StarXNegativePoint:                                 ; x < 0 so need to subtract from the screen centre position
 357+ 7CF4 2E 80                                ld          l,ScreenCenterX
 358+ 7CF6 26 00                                ld          h,0
 359+ 7CF8                                      ClearCarryFlag
 359+ 7CF8 B7          >                        or a
 360+ 7CF9 ED 42                                sbc         hl,bc                               ; hl = Screen Centre - X
 361+ 7CFB              StarStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 362+ 7CFB 7D                                   ld          a,l
 363+ 7CFC 32 1A 80                             ld          (varStarX),a
 364+ 7CFF C9                                   ret
 365+ 7D00
 366+ 7D00 FD 46 02     ProjectStarYToScreen:   ld          b,(iy+2)
 367+ 7D03 FD 7E 03                             ld          a,(iy+3)
 368+ 7D06 6F                                   ld          l,a
 369+ 7D07 E6 7F                                and         $7F
 370+ 7D09 47                                   ld          b,a
 371+ 7D0A CD E3 94                             call        DIV16BCDivDEUNDOC
 372+ 7D0D 7D                                   ld          a,l                                 ; XX15+2 \ sign of X dist
 373+ 7D0E                                      JumpOnBitSet a,7,StarNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 373+ 7D0E CB 7F       >                        bit 	7,a
 373+ 7D10 C2 1B 7D    >                        jp      nz,StarNegativeYPoint
 374+ 7D13                                  ;StarPositiveYPoint:									; Y is positive so above the centre line
 375+ 7D13 2E 60                               ld          l,ScreenCenterY
 376+ 7D15                                      ClearCarryFlag
 376+ 7D15 B7          >                        or a
 377+ 7D16 ED 42                                sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 378+ 7D18 C3 20 7D                             jp          StarStoreYPoint
 379+ 7D1B              StarNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 380+ 7D1B 2E 60                                ld          l,ScreenCenterY
 381+ 7D1D 26 00                                ld          h,0
 382+ 7D1F 09                                   add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 383+ 7D20              StarStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 384+ 7D20 7D                                   ld          a,l
 385+ 7D21 32 1B 80                             ld          (varStarY),a
 386+ 7D24 C9                                   ret
 387+ 7D25
 388+ 7D25
# file closed: ./Universe/StarDust/StarRoutines.asm
1064  7D25              ;    include "Universe/move_object-MVEIT.asm"
1065  7D25              ;    include "./ModelRender/draw_object.asm"
1066  7D25              ;    include "./ModelRender/draw_ship_point.asm"
1067  7D25              ;    include "./ModelRender/drawforwards-LL17.asm"
1068  7D25              ;    include "./ModelRender/drawforwards-LL17.asm"
1069  7D25
1070  7D25                  INCLUDE	"./Hardware/memfill_dma.asm"
# file opened: ./Hardware/memfill_dma.asm
   1+ 7D25
   2+ 7D25 00           memfillvalue		DB 0
   3+ 7D26 83 C3 C7 CB  memfill        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   3+ 7D2A 7D
   4+ 7D2B 25 7D        memfill_astrt  		DW memfillvalue
   5+ 7D2D 00 40        memfill_length 		DB $00,$40
   6+ 7D2F 24 10 AD     					DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   7+ 7D32 00 00        memfill_bstrt  		DB $00,$00
   8+ 7D34 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   9+ 7D38              memfill_cmd_len	  	EQU $ - memfill
  10+ 7D38
  11+ 7D38              memfill_dma:
  12+ 7D38              ; "memfill_dma, hl = address to fill, a = value, de = length"
  13+ 7D38              .set_fill_value:
  14+ 7D38 32 25 7D     	ld 		(memfillvalue),a
  15+ 7D3B              .set_target:
  16+ 7D3B 22 32 7D     	ld		(memfill_bstrt),hl
  17+ 7D3E              .set_length:
  18+ 7D3E ED 53 2D 7D  	ld		(memfill_length),de
  19+ 7D42              .write_dma:
  20+ 7D42 21 26 7D     	ld 		hl, memfill
  21+ 7D45 06 12        	ld 		b, memfill_cmd_len
  22+ 7D47 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  23+ 7D49 ED B3        	otir
  24+ 7D4B C9           	ret
  25+ 7D4C
# file closed: ./Hardware/memfill_dma.asm
1071  7D4C                  INCLUDE	"./Hardware/memcopy_dma.asm"
# file opened: ./Hardware/memcopy_dma.asm
   1+ 7D4C
   2+ 7D4C 83 C3 C7 CB  memcopy        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   2+ 7D50 7D
   3+ 7D51 00 00        memcopy_astrt  		DB $00,$00
   4+ 7D53 00 40        memcopy_length 		DB $00,$40
   5+ 7D55 14 10 CD     					DB DMA_WR1_P1INC_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_BURST_MODE;DMA_WR4_CONT_MODE
   6+ 7D58 00 00        memcopy_bstrt  		DB $00,$00
   7+ 7D5A 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   8+ 7D5E              memcopy_cmd_len	  	equ $ - memcopy
   9+ 7D5E
  10+ 7D5E              memcopy_dma:
  11+ 7D5E              ; "memcopy_dma, hl = target address de = source address to copy, bc = length"
  12+ 7D5E              .set_target:
  13+ 7D5E 22 58 7D     	ld		(memcopy_bstrt),hl
  14+ 7D61              .set_source:
  15+ 7D61 ED 53 51 7D  	ld		(memcopy_astrt),de
  16+ 7D65              .set_length:
  17+ 7D65 ED 43 53 7D  	ld		(memcopy_length),bc
  18+ 7D69              .write_dma:
  19+ 7D69 21 4C 7D     	ld 		hl, memcopy
  20+ 7D6C 06 12        	ld 		b, memcopy_cmd_len
  21+ 7D6E 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  22+ 7D70 ED B3        	otir
  23+ 7D72 C9           	ret
  24+ 7D73
# file closed: ./Hardware/memcopy_dma.asm
1072  7D73 00 00        XX12PVarQ			DW 0
1073  7D75 00 00        XX12PVarR			DW 0
1074  7D77 00 00        XX12PVarS			DW 0
1075  7D79 00 00        XX12PVarResult1		DW 0
1076  7D7B 00 00        XX12PVarResult2		DW 0
1077  7D7D 00 00        XX12PVarResult3		DW 0
1078  7D7F 00           XX12PVarSign2		DB 0
1079  7D80 00           XX12PVarSign1		DB 0								; Note reversed so BC can do a little endian fetch
1080  7D81 00           XX12PVarSign3		DB 0
1081  7D82                  INCLUDE "./Variables/constant_equates.asm"
# file opened: ./Variables/constant_equates.asm
   1+ 7D82              ;Contants
   2+ 7D82
   3+ 7D82              SignMask8Bit		equ %01111111
   4+ 7D82              SignMask16Bit		equ %0111111111111111
   5+ 7D82              SignOnly8Bit		equ $80
   6+ 7D82              SignOnly16Bit		equ $8000
   7+ 7D82
   8+ 7D82              Bit7Only            equ %10000000
   9+ 7D82              Bit6Only            equ %01000000
  10+ 7D82              Bit5Only            equ %00100000
  11+ 7D82              Bit4Only            equ %00010000
  12+ 7D82              Bit3Only            equ %00001000
  13+ 7D82              Bit2Only            equ %00000100
  14+ 7D82              Bit1Only            equ %00000010
  15+ 7D82              Bit0Only            equ %00000001
  16+ 7D82              Bit7Clear           equ %01111111
  17+ 7D82              Bit6Clear           equ %10111111
  18+ 7D82              Bit5Clear           equ %11011111
  19+ 7D82              Bit4Clear           equ %11101111
  20+ 7D82              Bit3Clear           equ %11110111
  21+ 7D82              Bit2Clear           equ %11111011
  22+ 7D82              Bit1Clear           equ %11111101
  23+ 7D82              Bit0Clear           equ %11111110
  24+ 7D82              ConstPi				equ $80
  25+ 7D82              ConstNorm           equ 197
  26+ 7D82              ;OpCodes
  27+ 7D82              OpCodeSCF           equ $37
  28+ 7D82              OpCodeCCF           equ $3F
  29+ 7D82              OpCodeAndA          equ $A7
  30+ 7D82              OpCodeClearCarryFlag equ OpCodeAndA
  31+ 7D82
  32+ 7D82              ;Text Tokens
  33+ 7D82              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
  34+ 7D82              BrabenBellToken 	equ $0D
  35+ 7D82              AcorToken			equ $0C
  36+ 7D82              ; Cursor Bits
  37+ 7D82              CursorClimb         equ %10000000
  38+ 7D82              CursorDive          equ %01000000
  39+ 7D82              CursorLeft          equ %00100000
  40+ 7D82              CursorRight         equ %00010000
  41+ 7D82              CursorHome          equ %00001000
  42+ 7D82              CursorRecenter      equ %00000100
  43+ 7D82
  44+ 7D82              ; Intro Screen
  45+ 7D82              TitleShip			equ	$8C
  46+ 7D82              RotationUnity		equ $60
  47+ 7D82              DBCheckCode			equ $DB
  48+ 7D82              MaxVisibility		equ $1F
  49+ 7D82              FarInFront			equ $C0
  50+ 7D82              ; Equipment Flags
  51+ 7D82              EquipmentItemFitted     equ $FF
  52+ 7D82              EquipmentItemNotFitted  equ 0
  53+ 7D82              ; Universe Managment
  54+ 7D82              PlanetTypeMeridian      equ 128
  55+ 7D82              PlanetMinRadius         equ 6
  56+ 7D82
  57+ 7D82              ShipTotalModelCount     equ 44
  58+ 7D82              ShipTypeScoopable       equ 4         ; a sub set of junk
  59+ 7D82              ShipTypeJunk            equ 3
  60+ 7D82              ShipTypeStation         equ 2
  61+ 7D82              ShipTypeMissile         equ 1
  62+ 7D82              ShipTypeNormal          equ 0
  63+ 7D82              ShipTypeText            equ 253
  64+ 7D82              ShipTypeDebug           equ 254
  65+ 7D82              ShipTypeEmpty           equ 255
  66+ 7D82
  67+ 7D82              SpawnTypeStation        EQU 0
  68+ 7D82              SpawnTypeAsteroid       EQU SpawnTypeStation        + 1
  69+ 7D82              SpawnTypeJunk           EQU SpawnTypeAsteroid       + 1
  70+ 7D82              SpawnTypeCop            EQU SpawnTypeJunk           + 1
  71+ 7D82              SpawnTypeTrader         EQU SpawnTypeCop            + 1
  72+ 7D82              SpawnTypeNonTrader      EQU SpawnTypeTrader         + 1
  73+ 7D82              SpawnTypePirate         EQU SpawnTypeNonTrader      + 1
  74+ 7D82              SpawnTypeHunter         EQU SpawnTypePirate         + 1
  75+ 7D82              SpawnTypeThargoid       EQU SpawnTypeHunter         + 1
  76+ 7D82              SpawnTypeMission        EQU SpawnTypeThargoid       + 1
  77+ 7D82              SpawnTypeStationDebris  EQU SpawnTypeMission        + 1
  78+ 7D82              SpawnTypeMissionEvent   EQU SpawnTypeStationDebris  + 1
  79+ 7D82              SpawnTypeDoNotSpawn     EQU SpawnTypeMissionEvent   + 1
  80+ 7D82
  81+ 7D82
  82+ 7D82              ; Laser and Missile Settings
  83+ 7D82              ; Laser and Missile
  84+ 7D82              ShipLaserPower          equ %11110000
  85+ 7D82              ShipMissileCount        equ %00001111
  86+ 7D82              ShipMissiles1           equ %00000001
  87+ 7D82              ShipMissiles2           equ %00000010
  88+ 7D82              ShipMissiles3           equ %00000011
  89+ 7D82              ShipMissiles4           equ %00000100
  90+ 7D82              ShipMissiles5           equ %00000101
  91+ 7D82              ShipMissiles6           equ %00000110
  92+ 7D82              ShipMissiles7           equ %00000111
  93+ 7D82              ShipMissiles8           equ %00001000
  94+ 7D82              ShipMissiles9           equ %00001001
  95+ 7D82              ShipMissiles10          equ %00001010
  96+ 7D82              ShipMissiles11          equ %00001011
  97+ 7D82              ShipMissiles12          equ %00001100
  98+ 7D82              ShipMissiles13          equ %00001101
  99+ 7D82              ShipMissiles14          equ %00001110
 100+ 7D82              ShipMissiles15          equ %00001111
 101+ 7D82              ; AI Flags  UniverseAIControl
 102+ 7D82              ShipCanAnger            equ %10000000   ; Yes or no
 103+ 7D82              ShipFighterBaySize      equ %01110000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 104+ 7D82              ShipFighterBaySize1     equ %00010000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 105+ 7D82              ShipFighterBaySize2     equ %00100000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 106+ 7D82              ShipFighterBaySize3     equ %00110000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 107+ 7D82              ShipFighterBaySize4     equ %01000000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 108+ 7D82              ShipFighterBaySize5     equ %01010000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 109+ 7D82              ShipFighterBaySizeInf   equ %01110000   ; Infinite fighters (well 255 as thats enough)
 110+ 7D82              ShipFighterType         equ %00001100   ; 4 types 0 = Worm, 1 = Sidewinder, 2 = Viper, 3 = Thargon
 111+ 7D82              ShipFighterWorm         equ %00000000
 112+ 7D82              ShipFighterSidewinder   equ %00000100
 113+ 7D82              ShipFighterViper        equ %00001000
 114+ 7D82              ShipFighterThargon      equ %00001100
 115+ 7D82              ShipUltraHostile        equ %00000010   ; If ultra hostile, will never back down so behaves like a missile
 116+ 7D82              ShipFree                equ $00000011   ; Unused bits at present for later
 117+ 7D82              ; NewBTactics
 118+ 7D82              ShipIsTrader            equ Bit0Only   ; Trader flag  80% are peaceful 20% also have Bounty Hunter flag
 119+ 7D82              ShipIsBountyHunter      equ Bit1Only   ;
 120+ 7D82              ShipIsHostile           equ Bit2Only   ; Also used as Angry flag now
 121+ 7D82              ShipIsPirate            equ Bit3Only   ;
 122+ 7D82              ShipIsDocking           equ Bit4Only   ;
 123+ 7D82              ShipIsBystander         equ Bit5Only   ;
 124+ 7D82              ShipIsCop               equ Bit6Only   ;
 125+ 7D82              ShipHasEscapePod        equ Bit7Only   ;
 126+ 7D82              ShipHostileNewBitNbr    equ 2
 127+ 7D82
 128+ 7D82              ; UBnkaiatkecm
 129+ 7D82              ;Unused                 equ Bit0Only
 130+ 7D82              ;Unused                 equ Bit1Only
 131+ 7D82              ;Unused                 equ Bit2Only
 132+ 7D82              ShipIsDot               equ Bit3Only
 133+ 7D82              ShipKilled              equ Bit4Only    ; Ship has just been marked as killed so initiate cloud of debris
 134+ 7D82              ShipExploding           equ Bit5Only
 135+ 7D82              ShipIsVisible           equ Bit6Only
 136+ 7D82              ShipAIEnabled           equ Bit7Only   ;
 137+ 7D82
 138+ 7D82
 139+ 7D82              ; UBnkaiakecm 2
 140+ 7D82              ;ShipAngryNewBitNbr      equ 4
 141+ 7D82              ShipExplosionDuration   equ 75         ; amount of frames an explosion lasts for
 142+ 7D82              ShipNotHostile          equ Bit2Clear   ;
 143+ 7D82              ShipIsNotDot            equ Bit3Clear
 144+ 7D82              ShipIsDotBitNbr         equ 3
 145+ 7D82              ShipKilledBitNbr        equ 4
 146+ 7D82              ShipIsVisibleBitNbr     equ 6
 147+ 7D82              ShipIsScoopDockEsc      equ Bit7Only   ;
 148+ 7D82              ShipAIDisabled          equ Bit7Clear
 149+ 7D82              ShipAIEnabledBitNbr     equ 7
 150+ 7D82              ShipExplodingBitNbr     equ 5
 151+ 7D82              ; Equipment Defaults
 152+ 7D82              ECMCounterMax           equ $80
 153+ 7D82              ; Main Loop State
 154+ 7D82              StatePlayerDocked       equ $FF
 155+ 7D82              StateCompletedLaunch    equ $FD
 156+ 7D82              StateInTransition       equ $FE
 157+ 7D82              StateHJumping           equ $FC
 158+ 7D82              StateHEntering          equ $FB
 159+ 7D82              StateCompletedHJump     equ $FA
 160+ 7D82              StateNormal             equ 0
 161+ 7D82              ; Missile Stage flags , $8x = locked to ship id x, $0x = fire at ship id x requested
 162+ 7D82              StageMissileNotTargeting equ $FF
 163+ 7D82              StageMissileTargeting   equ $FE
 164+ 7D82
 165+ 7D82
 166+ 7D82              ShipMaxDistance     equ 192
 167+ 7D82              HyperSpaceTimers    equ $0B0B
 168+ 7D82
 169+ 7D82              ; -- game limts
 170+ 7D82              MaxNumberOfStars	equ 11
 171+ 7D82              ConsoleRefreshInterval  equ 5
 172+ 7D82              MaxJunkStation      equ 3
 173+ 7D82              MaxJunkFreeSpace    equ 5
 174+ 7D82              WarpCoolDownPeriod  equ 90
 175+ 7D82
 176+ 7D82              ShipTypeSize		equ	32 			;??????? just a guess for now
 177+ 7D82              ShipSST				equ 4			; its a space station
 178+ 7D82              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
 179+ 7D82              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
 180+ 7D82              ShipCountMax		equ	2			; For now just 2 ships to debug
 181+ 7D82              LineLimitPerShip	equ 70			; Max lines per ship
 182+ 7D82              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
 183+ 7D82              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
 184+ 7D82
 185+ 7D82              ; Memory page managment	(Refers to a memory slot as a place to access data)
 186+ 7D82              ShipDataSlot		equ	6			; this may move into rom swap out space later
 187+ 7D82              UniverseObjectSlot	equ	7
 188+ 7D82
 189+ 7D82              KeyForwardsView		equ	$20
 190+ 7D82              ; Game specific equates
 191+ 7D82              MissileDropHeight   equ 5           ; how far the missile is ejected on launch in y axis
 192+ 7D82              WarpSequenceCount   equ 50
 193+ 7D82
 194+ 7D82              ;...Game Colour Mapping
 195+ 7D82              L2DustColour        equ L2ColourGREY_1
 196+ 7D82              L2SunScannerBright  equ 252
 197+ 7D82              L2SunScanner        equ 180
 198+ 7D82              L2DebrisColour      equ L2ColourYELLOW_1
 199+ 7D82
 200+ 7D82
 201+ 7D82              ; Ship Data
 202+ 7D82              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
 203+ 7D82              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
 204+ 7D82              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
 205+ 7D82              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
 206+ 7D82              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
 207+ 7D82              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
 208+ 7D82              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
 209+ 7D82              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
 210+ 7D82              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
 211+ 7D82              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
 212+ 7D82              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
 213+ 7D82              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
 214+ 7D82              ;;;;00 00			 EQUW 0     \ type 12 is       Python
 215+ 7D82              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
 216+ 7D82              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
 217+ 7D82              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
 218+ 7D82              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
 219+ 7D82              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
 220+ 7D82              ;;;;00 00			 EQUW 0     \ type 18 is
 221+ 7D82              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
 222+ 7D82              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
 223+ 7D82              ;;;;00 00			 EQUW 0     \ type 21 is
 224+ 7D82              ;;;;00 00			 EQUW 0     \ type 22 is
 225+ 7D82              ;;;;00 00			 EQUW 0     \ type 23 is
 226+ 7D82              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
 227+ 7D82              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
 228+ 7D82              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
 229+ 7D82              ;;;;00 00			 EQUW 0     \ type 27 is
 230+ 7D82              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
 231+ 7D82              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
 232+ 7D82              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
 233+ 7D82              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
 234+ 7D82              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
 235+ 7D82              ;;;;			\ NEWB examples
 236+ 7D82              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
 237+ 7D82              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
 238+ 7D82              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
 239+ 7D82              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
 240+ 7D82              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
 241+ 7D82
# file closed: ./Variables/constant_equates.asm
1082  7D82                  INCLUDE "./Variables/general_variables.asm"
# file opened: ./Variables/general_variables.asm
   1+ 7D82                  IFNDEF LASER_V2
   2+ 7D82 ~                DEFINE  LASER_V2    1
   3+ 7D82                  ENDIF
   4+ 7D82
   5+ 7D82 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
   6+ 7D84 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
   7+ 7D86              ; Variables to simulate 6502 registers until code fixed
   8+ 7D86              ; These must be here in this order as reading Y and X can then be a 16 bit read
   9+ 7D86 00           regX		DB	0               ; using 16 bit read into BC this would go into C
  10+ 7D87 00           regY		DB	0               ; using 16 bit read into BC this would go into B
  11+ 7D88 00           regA		DB	0
  12+ 7D89
  13+ 7D89
  14+ 7D89 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
  15+ 7D8A 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
  16+ 7D8C 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
  17+ 7D8E
  18+ 7D8E
  19+ 7D8E
  20+ 7D8E              ;XX16		DS	16				; 16 byte Matrix
  21+ 7D8E
  22+ 7D8E              P0INWK							; page 0 & 46
  23+ 7D8E              p0INWK31						; page 0 & 65
  24+ 7D8E              P0INWK36						; PAGE 0 &6A
  25+ 7D8E
  26+ 7D8E 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
  27+ 7D8F              LastNormalVisible	equ	XX4
  28+ 7D8F              varXX4              equ XX4
  29+ 7D8F
  30+ 7D8F
  31+ 7D8F
  32+ 7D8F 00           PATG		DB	0				; 6502 &03C9
  33+ 7D90 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
  34+ 7D92
  35+ 7D92
  36+ 7D92              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
  37+ 7D92              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &F XX21-1,Y
  38+ 7D92
  39+ 7D92              ; Present System Variables
  40+ 7D92
  41+ 7D92 2B           RandomSeed				DB	43			    ; 00 DEBUG JUST SOME START VALUES
  42+ 7D93 20           RandomSeed1				DB	32	            ; 01
  43+ 7D94 0C           RandomSeed2				DB	12			    ; 02
  44+ 7D95 42           RandomSeed3				DB	66			    ; 03
  45+ 7D96 00 00 00 00  RandomSeedSave          DS  4               ; used in explosion routine to save randoms
  46+ 7D9A 00           varT1					DB	0				; 06
  47+ 7D9B 00           SClo					DB 0				; 07
  48+ 7D9C 00           SChi					DB 0				; 08
  49+ 7D9D 00           varP					DB 0 				; 10	XX16+7
  50+ 7D9E 00           varPhi					DB 0 				; 11	XX16+8
  51+ 7D9F 00           varPhi2					DB 0 				; 12	XX16+9
  52+ 7DA0              varPp1                  equ varPhi
  53+ 7DA0              varPp2                  equ varPhi2
  54+ 7DA0 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
  55+ 7DA1 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
  56+ 7DA2              UnivPointer				equ	UnivPointerLo
  57+ 7DA2 00           varV					DB 0				; 22                          XX0+4
  58+ 7DA3 00           varVHi					DB 0				; 23                          XX0+5
  59+ 7DA4 00           varXXlo                 DB 0                ; 24
  60+ 7DA5 00           varXXHi                 DB 0                ; 25
  61+ 7DA6              varXX					equ	varXXlo
  62+ 7DA6 00           YYlo                    DB 0                ; 26
  63+ 7DA7 00           YYHi                    DB 0                ; 27
  64+ 7DA8              varYY					equ	YYlo
  65+ 7DA8              											;	28
  66+ 7DA8              											;	29
  67+ 7DA8              ;PlayerShipPositionData - Must be contiguous for setup
  68+ 7DA8 00           BETA 					DB	0               ; 2A        (pitch done)
  69+ 7DA9 00           JSTY                    DB  0               ; Joystick analog
  70+ 7DAA 00           BET1 					DB	0               ; 2B        lower7 magnitude
  71+ 7DAB 00           BET2                    DB  0               ;            climb sign
  72+ 7DAC 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
  73+ 7DAD 1F           BET1MAXC                DB  31              ; max climb
  74+ 7DAE E1           BET1MAXD                DB  -31             ; max dive
  75+ 7DAF 00           XC						DB	0               ; 2C
  76+ 7DB0 00           YC						DB 	0               ; 2D
  77+ 7DB1              ;... ECM logic. If another ship adds ECM then we just set the loop A and B to starting values so they overlap
  78+ 7DB1 00           ECMCountDown            DB  0
  79+ 7DB2 00           ECMLoopB                DB  0
  80+ 7DB3 00 00        JSTX                    DW  0               ;           Joystick analog value
  81+ 7DB5 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
  82+ 7DB6 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude Also Apha
  83+ 7DB7 00           ALP2					DB  0				; 32		ALP2	Roll Sign
  84+ 7DB8 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
  85+ 7DB9 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
  86+ 7DBA E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
  87+ 7DBB
  88+ 7DBB
  89+ 7DBB              ;-- Message handler -----------------------------------------------------------------------------------------------------------------
  90+ 7DBB              MAXMESSAGES             EQU 5
  91+ 7DBB              MESSAGETIMELIMIT        EQU 20
  92+ 7DBB              MESSAGESIZE             EQU 33
  93+ 7DBB              MESSAGELINE             EQU $0001
  94+ 7DBB
  95+ 7DBB 00           MessageCount            DB  0                ; used for enquing messages later
  96+ 7DBC 00           MessageCurrent          DB  0
  97+ 7DBD 05 00        MessageIndex            DW  MAXMESSAGES
  98+ 7DBF 00 00 00...  MessageQueue            DS  MAXMESSAGES * MESSAGESIZE
  99+ 7E64 05           MessageTimeout          DB  MAXMESSAGES
 100+ 7E65 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
 101+ 7E8A
 102+ 7E8A              ; MOVED TO Universe XX19					DB	0				; page 0 &67
 103+ 7E8A              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
 104+ 7E8A              ;DEFUNCT EQUATE NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
 105+ 7E8A 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
 106+ 7E8B              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
 107+ 7E8B
 108+ 7E8B
 109+ 7E8B 00           QQ17					DB	0				;   72
 110+ 7E8C 00           XX18xlo                 DB  0               ;	72		XX18   xlo
 111+ 7E8D 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
 112+ 7E8E 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
 113+ 7E8F 00           XX18ylo                 DB  0               ;	75		XX18   ylo
 114+ 7E90 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
 115+ 7E91 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
 116+ 7E92 00           XX18zlo                 DB  0               ;	78		XX18   zlo
 117+ 7E93 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
 118+ 7E94 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
 119+ 7E95
 120+ 7E95 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
 121+ 7E96 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
 122+ 7E97 00           DELT4Lo					DB 	0				; 7E
 123+ 7E98 00           DELT4Hi					DB 	0				; 7F
 124+ 7E99              DELTA4                  equ                 DELT4Lo
 125+ 7E99
 126+ 7E99              ; SoundFX Variables -------------------------------------------------------------------------------------------
 127+ 7E99              ;DEFUNCT, uses DELTA/ LAST_DELTAEngineSoundChanged:     DB  0
 128+ 7E99 FF           SoundFxToEnqueue        DB  $FF             ; $FF No sound to enque,if it is $FF then next sound will not get enqued
 129+ 7E9A 00           InterruptCounter        DB 0                ; simple marker updated once per IM2 event
 130+ 7E9B
 131+ 7E9B
 132+ 7E9B              ; Not thise must be in this order else 16 bit fetches will fail
 133+ 7E9B 00           varU                    DB  0               ;   80
 134+ 7E9C 00           varQ					DB  0 				;	81
 135+ 7E9D 00           varR					DB  0 				;	82
 136+ 7E9E 00           varS					DB  0 				;	83
 137+ 7E9F              varRS                   equ varR
 138+ 7E9F
 139+ 7E9F 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
 140+ 7EA1
 141+ 7EA1 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
 142+ 7EA2 00           YSAV                    DB  0               ; 85
 143+ 7EA3 00           XX17					DB	0				; 86
 144+ 7EA4              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
 145+ 7EA4              varXX17                 equ  XX17
 146+ 7EA4 00           ScreenChanged           DB  0
 147+ 7EA5 00           ScreenIndex             DB  0
 148+ 7EA6 00 00        ScreenIndexTablePointer DW  0
 149+ 7EA8 00           InvertedYAxis           DB  0
 150+ 7EA9 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
 151+ 7EAA              											; Bit 7 Set  ShortRangeChart    $80
 152+ 7EAA              											; Bit 6 Set  Galactic Chart     $40
 153+ 7EAA              											; Bit 5 Set  Market Place       $20
 154+ 7EAA              											; Bit 4 Set  Status Screen      $10
 155+ 7EAA              											; Bit 3 Set  Display Inventory  $08
 156+ 7EAA                                                          ; Bit 2 Set  Planet Data        $04
 157+ 7EAA                                                          ; View bit combinations if the ones above not matched
 158+ 7EAA                                                          ; bits 1 0
 159+ 7EAA                                                          ;      1 1  Front view , i.e. $03
 160+ 7EAA                                                          ;      1 0  Aft View          $02
 161+ 7EAA                                                          ;      0 1  Left View         $01
 162+ 7EAA                                                          ;      0 0  Right view        $00
 163+ 7EAA              											; Bit 0 Set  Data On System
 164+ 7EAA              											; 0  Space View (Not a menu)
 165+ 7EAA 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
 166+ 7EAB 00           XX13                    DB  0               ;   89
 167+ 7EAC 00           TYPE					DB	0				; 8C used for ship type in drawing
 168+ 7EAD              ;Docked flag = 00 = in free space
 169+ 7EAD              ;              FF = Docked
 170+ 7EAD              ;              FE = transition
 171+ 7EAD              ;              FD = Setup open space and transition to not docked
 172+ 7EAD              ;              FC = Hyperspace manimation
 173+ 7EAD              ;              FB = Hyperspace complete
 174+ 7EAD 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
 175+ 7EAE 00           varCNT                  DB  0               ; 93
 176+ 7EAF
 177+ 7EAF 00           varK					DB	0				; 40
 178+ 7EB0 00           varKp1					DB	0				; 41
 179+ 7EB1 00           varKp2					DB	0				; 42
 180+ 7EB2 00           varKp3					DB	0				; 43
 181+ 7EB3
 182+ 7EB3 00           varK2                   DB  0               ; 9B
 183+ 7EB4 00           varK2p1                 DB  0               ; 9C K2 plus 1
 184+ 7EB5 00           varK2p2                 DB  0               ; 9D K2 plus 2
 185+ 7EB6 00           varK2p3                 DB  0               ; 9E K2 plus 3
 186+ 7EB7
 187+ 7EB7 00           Point                   DB  0               ; 9F      POINT
 188+ 7EB8
 189+ 7EB8 00           varT					DB	0				; D1
 190+ 7EB9 00           varTSign                DB  0               ; for teh odd need for a 16 bit varT
 191+ 7EBA
 192+ 7EBA 00 00 00...  varVector9ByteWork      DS  9
 193+ 7EC3
 194+ 7EC3 00 00 00 00  varK3					DS	4				; D2
 195+ 7EC7 00           varK3p2					DB	0				; 42
 196+ 7EC8 00           varK3p3					DB	0				; 43
 197+ 7EC9              varK3p1					equ varK3+1			; D3
 198+ 7EC9 00 00 00 00  varK4					DS	4				; E0
 199+ 7ECD              varK4p1					equ varK4+1			; D3
 200+ 7ECD 00 00 00...  varK5                   DS  6
 201+ 7ED3              varK5p2                 equ varK5+2
 202+ 7ED3 00 00 00...  varK6                   DS  6
 203+ 7ED9              varK6p2                 equ varK6+2
 204+ 7ED9              ;Heap
 205+ 7ED9
 206+ 7ED9 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
 207+ 7EDB 00 00 00...  HeapData				DS	50
 208+ 7F0D              ; Contains 				X 16 bit, Y ;MissileArmedStatus		DB	0				; 0344 MSAR   using MissileTarget, if missile is not armed tehn target is FF
 209+ 7F0D              ; TODO will need an read for a list of missiles, who they are targeting an the target current vector for AI persuit
 210+ 7F0D              ; i.e. a list of programmed missiles in universe slot list code
 211+ 7F0D 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
 212+ 7F14              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
 213+ 7F14              ;  #&5 Does J reverse both joystick channels
 214+ 7F14              ;  #&4 Does Y reverse joystick Y channel			03CB
 215+ 7F14              ;  #&2 Does X toggle startup message display ? PATG?	03C9
 216+ 7F14              ;  #&3 Does F toggle flashing information			03CA
 217+ 7F14              ;  #&1 Does A toggle keyboard auto-recentering ?
 218+ 7F14              ;  #&0 Caps-lock toggles keyboard flight damping
 219+ 7F14
 220+ 7F14              ;-- Galaxy and Universe Variables ----------------------------------------------------------------------------------------------------
 221+ 7F14 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
 222+ 7F19 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
 223+ 7F29 00           AlienItemsAvaliability  DB	0				; 039D
 224+ 7F2A 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
 225+ 7F2B 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
 226+ 7F2C 00 00 00...  WorkingSeeds			DS	6
 227+ 7F32 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
 228+ 7F38 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
 229+ 7F3E 00           PresentSystemX			DB	0				; System we are currently in
 230+ 7F3F 00           PresentSystemY			DB  0				; System we are currently in
 231+ 7F40 00           TargetSystemX			DB	0				; System we are targeting for jump
 232+ 7F41 00           TargetSystemY			DB	0				; System we are targeting for jump
 233+ 7F42              ; --- Current System Data ------------------------------------------------------------------------------------------------------------
 234+ 7F42 00           GovPresentSystem		DB	0				; 03AE Govenment
 235+ 7F43 00           TekPresentSystem		DB	0				; 03AF Technology
 236+ 7F44 00           SpaceStationSafeZone    DB  0               ; Flag to determine if we are in safe zone
 237+ 7F45 00           ExtraVesselsCounter     DB  0
 238+ 7F46 00           JunkCount				DB  0				; $033E
 239+ 7F47 00           AsteroidCount           DB  0               ; Not used as yet
 240+ 7F48 00           TransporterCount        DB  0
 241+ 7F49 00           CopCount                DB  0
 242+ 7F4A 00           PirateCount             DB  0
 243+ 7F4B              ;- commander and ship state variables ------------------------------------------------------------------------------------------------
 244+ 7F4B 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
 245+ 7F4C 00           PlayerECMActiveCount    DB  0               ; Countdown for player ECM
 246+ 7F4D 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
 247+ 7F4E 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
 248+ 7F50 00           CurrentRank             DB  0   			;
 249+ 7F51 00           MarketPrice				DB	0				; 03AA QQ24
 250+ 7F52 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
 251+ 7F53 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
 252+ 7F54 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
 253+ 7F55 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
 254+ 7F57              											; this is ship lines stack pointer so may be redundant with paging
 255+ 7F57              											; LS = line stack so we will have one for now to remove later
 256+ 7F57              ; - no longer used, holding here intil its safe to delte
 257+ 7F57 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
 258+ 7F58 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
 259+ 7F59              ; not needed as we don't do security on file COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
 260+ 7F59              ; - no longer used, holding here intil its safe to delte
 261+ 7F59
 262+ 7F59 00           DisplayEcononmy			DB	0				; 03B8
 263+ 7F5A 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
 264+ 7F5B 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
 265+ 7F5C 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
 266+ 7F5E 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
 267+ 7F60 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
 268+ 7F62 00 00        DisplayRadius			DW	0
 269+ 7F64 00 00 00     ParentPlanetX           DS  3               ; used when spawining space station to determine origin
 270+ 7F67 00 00 00     ParentPlanetY           DS  3               ;
 271+ 7F6A 00 00 00     ParentPlanetZ           DS  3               ;
 272+ 7F6D              ; --- Used in creation of sun and planet ------------------------------------------------------------------------------------------------
 273+ 7F6D 00           PlanetXPos              DS  1
 274+ 7F6E 00           PlanetYPos              DS  1
 275+ 7F6F 00           PlanetZPos              DS  1
 276+ 7F70 00           PlanetType              DS  1
 277+ 7F71 00           SunXPos                 DS  1
 278+ 7F72 00           SunYPos                 DS  1
 279+ 7F73 00           SunZPos                 DS  1
 280+ 7F74              ; -- Current Missile Runbtime data ------------------------------------------------------------------------------------------------
 281+ 7F74 00           CurrentMissileBank:     DB      0                                   ; used by missile logic as local copy of missile bank number
 282+ 7F75 00 00        MissileXPos             DW      0
 283+ 7F77 00           MissileXSgn             DB      0
 284+ 7F78 00 00        MissileYPos             DW      0
 285+ 7F7A 00           MissileYSgn             DB      0
 286+ 7F7B 00 00        MissileZPos             DW      0
 287+ 7F7D 00           MissileZSgn             DB      0
 288+ 7F7E 00 00        CurrentTargetXpos       DS      2
 289+ 7F80 00 00        CurrentTargetXsgn       DS      2
 290+ 7F82 00 00        CurrentTargetYpos       DS      2
 291+ 7F84 00 00        CurrentTargetYsgn       DS      2
 292+ 7F86 00 00        CurrentTargetZpos       DS      2
 293+ 7F88 00 00        CurrentTargetZsgn       DS      2
 294+ 7F8A 00 00        TargetVectorXpos        DS      2
 295+ 7F8C 00 00        TargetVectorXsgn        DS      2
 296+ 7F8E 00 00        TargetVectorYpos        DS      2
 297+ 7F90 00 00        TargetVectorYsgn        DS      2
 298+ 7F92 00 00        TargetVectorZpos        DS      2
 299+ 7F94 00 00        TargetVectorZsgn        DS      2
 300+ 7F96 00           CurrentMissileBlastRange:      DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 301+ 7F97 00           CurrentMissileBlastDamage:     DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 302+ 7F98 00           CurrentMissileDetonateRange:   DB  0                       ; TODO Initi for runtime copied in when setting up a missile, allows for proximity missiles
 303+ 7F99 00           CurrentMissileDetonateDamage:  DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 304+ 7F9A              ; --- Spawn Probability Table ---------------------------------------------------------------------------------------------------
 305+ 7F9A 00 00 00...  SpawnLowVssalue         DS 6                                ; Maxium of 6 entries in table
 306+ 7FA0 00 00 00...  SpawnHighvalue          DS 6                                ; Maxium of 6 entries in table
 307+ 7FA6 00 00 00...  ShipClassId             DS 6
 308+ 7FAC              ; --- Space dust ----------------------------------------------------------------------------------------------------------------
 309+ 7FAC 00 00 00...  varDustWarpRender       DS MaxNumberOfStars * 2 ; Copy of base positions for warp
 310+ 7FC2 00 00 00...  varDust                 DS MaxNumberOfStars * 6
 311+ 8004 00 00 00...  varDustSceen            DS MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
 312+ 801A 00           varStarX                DB 0
 313+ 801B 00           varStarY                DB 0
 314+ 801C 00 00 00...  varDustX                DS MaxNumberOfStars *2
 315+ 8032 00 00 00...  varDustY                DS MaxNumberOfStars *2
 316+ 8048 00 00 00...  varDustZ                DS MaxNumberOfStars *2
 317+ 805E              ; --- Main Loop Data -------------------------------------------------------------------------------------------------------------
 318+ 805E 00           DockedFlag				DB	0				; 8E -
 319+ 805F 00           GamePaused              DB  0
 320+ 8060 00           CurrentUniverseAI       DB  0               ; current ship unviverse slot due an AI update
 321+ 8061 00           SelectedUniverseSlot    DB  0
 322+ 8062 00           SetStationHostileFlag   DB  0               ; used to semaphore angry space station
 323+ 8063 00           ShipBlastCheckCounter   DB  0
 324+ 8064 00           InnerHyperCount			DB 	0				; 2F QQ22+1 (will move to a CTC timer later)
 325+ 8065 00           OuterHyperCount			DB 	0				; 2E QQ22
 326+ 8066 00           WarpCooldown            DB  0
 327+ 8067 00           EventCounter            DB  0
 328+ 8068 00           HyperCircle             DB  0
 329+ 8069 00           MissJumpFlag            DB  0
 330+ 806A 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
 331+ 806B 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
 332+ 806C 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
 333+ 806D 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
 334+ 806E 00           CurrentMissileCheck:    DB  0               ; if > Universe Slot list then free for next missile
 335+ 806F 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
 336+ 8070              UniverseSlotListSize    equ	12
 337+ 8070 00 00 00...  UniverseSlotList        DS  UniverseSlotListSize
 338+ 807C 00 00 00...  UniverseSlotType        DS  UniverseSlotListSize ; base type, e.g. missile, cargo etc,
 339+ 8088              ; Probably not needed UniverseTypeCount       DS  UniverseSlotListSize
 340+ 8088 05           ConsoleRefreshCounter   DB  ConsoleRefreshInterval ; Every 4 interations the console will update twice (once for primary and once for seconday buffer)
 341+ 8089 00           ConsoleRedrawFlag       DB  0
 342+ 808A 00           TextInputMode           DB  0
 343+ 808B 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
 344+ 808C                                                          ; 7    6    5    4     3    2        1    0
 345+ 808C                                                          ; Up   Down Left Right Home Recentre
 346+ 808C 00           FireLaserPressed        DB  0
 347+ 808D 00           WarpPressed             DB  0
 348+ 808E 00           CompassColor			DB	0				; 03C5
 349+ 808F 00           SoundToggle				DB	0				; 03C6
 350+ 8090 00           KeyboardRecenterToggle	DB	0				; 03C8
 351+ 8091 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
 352+ 8092 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
 353+ 8093 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
 354+ 8094 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
 355+ 8095 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
 356+ 8096 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
 357+ 8097
 358+ 8097              ; Working Data
 359+ 8097
 360+ 8097              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
 361+ 8097              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
 362+ 8097              ; $0925 =	EQUW page9+37* 1
 363+ 8097              ; $094A =	EQUW page9+37* 2
 364+ 8097              ; $096F =	EQUW page9+37* 3
 365+ 8097              ; $0994 =	EQUW page9+37* 4
 366+ 8097              ; $09B9 =	EQUW page9+37* 5
 367+ 8097              ; $09DE =	EQUW page9+37* 6
 368+ 8097              ; $0A03 =	EQUW page9+37* 7
 369+ 8097              ; $0A28 =	EQUW page9+37* 8
 370+ 8097              ; $0A4D =	EQUW page9+37* 9
 371+ 8097              ; $0A72 =	EQUW page9+37*10
 372+ 8097              ; $0A97 =	EQUW page9+37*11
 373+ 8097              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
 374+ 8097
 375+ 8097
 376+ 8097
 377+ 8097              ; 0b00 is start address of data to save
 378+ 8097              ; Now MissionData VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
 379+ 8097              											; Bit mask XXXX10XX - Thargoid plan mission
 380+ 8097
 381+ 8097 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
 382+ 8098
 383+ 8098 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
 384+ 809A 00 00        CommanderLoadAddress	DW	0				;0C03
 385+ 809C 00 00        LengthOfFile			DW	0				;0C0B
 386+ 809E 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
 387+ 80A0
 388+ 80A0 00 00 00...  EdgesBuffer				DS 50
 389+ 80D2              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
 390+ 80D2              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
 391+ 80D2
 392+ 80D2 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
 393+ 8118              ShipLineStackTop		equ $ - ShipLineStack
 394+ 8118
 395+ 8118              ; No longer needed
 396+ 8118              ;LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
 397+ 8118              ; LSX vector overlaps with LSO
 398+ 8118              ;LSX2					DS	$C0				; &0EC0	    \ LSX2 bline buffer size?
 399+ 8118              ;LSY2					DS  $C)	           	; &0F0E	    \ LSY2
 400+ 8118
 401+ 8118              ; -- Player Runtime Data
 402+ 8118 00           GunTemperature          DB  0
 403+ 8119 00           CabinTemperature        DB  0
 404+ 811A 00           PlayerForwardSheild0	DB	0 ; ?????
 405+ 811B 00           PlayerForwardSheild1    DB	0
 406+ 811C 00           PlayerForwardSheild2    DB	0
 407+ 811D 00           ForeShield				DB	0				; These three must be contiguous
 408+ 811E 00           AftShield				DB	0				; .
 409+ 811F 00           PlayerEnergy			DB	0				; and in this order
 410+ 8120 00           CompassX				DB	0				; 03A8
 411+ 8121 00           CompassY				DB	0				; 03A9
 412+ 8122              ; Simplification of missile targetting
 413+ 8122              ; $FF no missile targettting enabled
 414+ 8122              ; $FE missile targetting, no target selected
 415+ 8122              ; bit 7 set then tagetting and lower nibble holds missile target and launching
 416+ 8122              ; bit 7 clear launch at selected target in lower nibble
 417+ 8122 00           MissileTargettingFlag   DB  0
 418+ 8123              ;;MissileTarget			DB  0				; 45
 419+ 8123              ;;MissileLaunchFlag       DB  0
 420+ 8123 00 00 00...  CommanderName           DS  15
 421+ 8132 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
 422+ 8133 00           BadnessStatus           DB  0
 423+ 8134              ;note rapidly changing views could reset these so need to consider it in an array
 424+ 8134              ; LaserType
 425+ 8134              ; LaserPulseRate                          ; how many pulses can be fired before long pause
 426+ 8134              ; LaserPulsePause                         ; time before next pulse - 0 = beam
 427+ 8134              ; LaserPulseRest                          ; time before pulse count resets to 0
 428+ 8134              ; LaserDamageOutput                       ; amount of damage for a laser hit
 429+ 8134              ; LaserEnergyDrain                        ; amount of energy drained by cycle
 430+ 8134              ; LaserHeat                               ; amount of heat generated
 431+ 8134              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
 432+ 8134              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
 433+ 8134              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
 434+ 8134              ; LaserTechLevel                          ; minimum tech level system to buy from
 435+ 8134              ; need to add copy table routines
 436+ 8134 00           CurrLaserType           DB  0               ; current view laser type, copied in from LaserType array
 437+ 8135 00           CurrLaserDamage         DB  0               ; copied in from LaserDamagedFlag array
 438+ 8136 00           CurrLaserPulseRate      DB  0               ; current view laser amount of pulses
 439+ 8137 00           CurrLaserPulseOnTime    DB  0               ; how many cycles the laser is on
 440+ 8138 00           CurrLaserPulseOffTime   DB  0               ; how many cycles the laser is on
 441+ 8139 00           CurrLaserPulseRest      DB  0               ; current view laser delay setup between pulses
 442+ 813A
 443+ 813A                  IFDEF LASER_V2
 444+ 813A 00           LaserBeamOn             DB  0
 445+ 813B 00           CurrLaserDuration       DB  0   ; == CurrLaserPulseOnTime
 446+ 813C 00           CurrentBurstPause       DB  0   ; == CurrLaserPulseOffTime
 447+ 813D 00           CurrentCooldown         DB  0   ; == CurrLaserPulseRest
 448+ 813E                  ENDIF
 449+ 813E 00           CurrLaserBurstRate      DB  0
 450+ 813F 00           CurrLaserBurstCount     DB  0   ; == LaserPulseRate
 451+ 8140 00           CurrLaserDamageOutput   DB  0
 452+ 8141 00           CurrLaserEnergyDrain    DB  0
 453+ 8142 00           CurrLaserHeat           DB  0
 454+ 8143 00           CurrLaserDurability     DB  0
 455+ 8144 00           CurrLaserDurabilityAmount DB  0
 456+ 8145
 457+ 8145              ; Count down timers must be aligned like this to work
 458+ 8145 00           CurrLaserPulseOnCount   DB  0               ; how many cycles the laser is on timer
 459+ 8146 00           CurrLaserPulseOffCount  DB  0               ; how many cycles the laser is on timer
 460+ 8147 00           CurrLaserPulseRestCount DB  0               ; countdown after shooting for next shot
 461+ 8148 00           CurrLaserPulseRateCount DB  0               ; current view laser current pulses fired
 462+ 8149
 463+ 8149              ; -- Input variables
 464+ 8149 00           JoystickX				DB	0				; 034C JSTX
 465+ 814A 00           JoystickY				DB	0				; 034D JSTY
 466+ 814B 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
 467+ 814C 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
 468+ 814D
 469+ 814D              ; -- Console drawing data
 470+ 814D              FShieldStart            equ $8410
 471+ 814D              AShieldStart            equ $8D10
 472+ 814D              FuelStart               equ $9410
 473+ 814D
 474+ 814D              EnergyBar4Start         equ $A5D5
 475+ 814D              EnergyBar3Start         equ $ADD5
 476+ 814D              EnergyBar2Start         equ $B5D5
 477+ 814D              EnergyBar1Start         equ $BDD5
 478+ 814D              ; 70 /2 = 35 values
 479+ 814D              ;                            0                             1                             2                             3
 480+ 814D              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6
 481+ 814D 01 02 02 03  FuelMapping             DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,19,20,21,21,22,23,24,25,26,27,28,30,31,31
 481+ 8151 04 04 05 06
 481+ 8155 06 07 08 09
 481+ 8159 0A 0A 0B 0C
 481+ 815D 0D 0E 0E 0F
 481+ 8161 10 10 11 13
 481+ 8165 14 15 15 16
 481+ 8169 17 18 19 1A
 481+ 816D 1B 1C 1E 1F
 481+ 8171 1F
 482+ 8172              SpeedoStart             equ $84D1
 483+ 8172              ;                            0                             1                             2                             3                             4
 484+ 8172              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
 485+ 8172 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
 485+ 8176 04 04 05 06
 485+ 817A 06 07 08 09
 485+ 817E 0A 0A 0B 0C
 485+ 8182 0D 0E 0E 0F
 485+ 8186 10 10 11 12
 485+ 818A 13 14 14 15
 485+ 818E 16 17 18 18
 485+ 8192 19 1A 1A 1B
 485+ 8196 1C 1C 1D 1E
 485+ 819A 1F
 486+ 819B
 487+ 819B              DialMiddleXPos          equ $E1
 488+ 819B              RollMiddle              equ $8CE0
 489+ 819B              PitchMiddle             equ $94E0
 490+ 819B
 491+ 819B
 492+ 819B
 493+ 819B
 494+ 819B
# file closed: ./Variables/general_variables.asm
1083  819B                  INCLUDE "./Variables/general_variablesRoutines.asm"
# file opened: ./Variables/general_variablesRoutines.asm
   1+ 819B              LaserDrainSystems:      DrainSystem PlayerEnergy, CurrLaserEnergyDrain
   1+ 819B 3A 41 81    >                        ld      a,(CurrLaserEnergyDrain)
   1+ 819E 47          >                        ld      b,a
   1+ 819F 3A 1F 81    >                        ld      a,(PlayerEnergy)
   1+ 81A2 90          >                        sub     a,b
   1+ 81A3 32 1F 81    >                        ld      (PlayerEnergy),a
   1+ 81A6 38 03       >                        jr      c,.ZeroSystem
   1+ 81A8 C3 AF 81    >                        jp      .ExitPoint
   1+ 81AB             >.ZeroSystem:            ZeroA
   1+ 81AB AF          >                        xor a
   1+ 81AC 32 1F 81    >                        ld      (PlayerEnergy),a
   1+ 81AF             >.ExitPoint
   2+ 81AF                                      BoostSystem GunTemperature, CurrLaserHeat
   2+ 81AF 3A 42 81    >                        ld      a,(CurrLaserHeat)
   2+ 81B2 47          >                        ld      b,a
   2+ 81B3 3A 18 81    >                        ld      a,(GunTemperature)
   2+ 81B6 80          >                        add     b
   2+ 81B7 32 18 81    >                        ld      (GunTemperature),a
   2+ 81BA 38 03       >                        jr      c, .MaxSystem
   2+ 81BC C3 C4 81    >                        jp      .ExitPoint
   2+ 81BF 3E FF       >.MaxSystem:             ld      a,255
   2+ 81C1 32 18 81    >                        ld      (GunTemperature),a
   2+ 81C4             >.ExitPoint
   3+ 81C4 C9                                   ret
   4+ 81C5
   5+ 81C5
   6+ 81C5              ResetPlayerShip:        ZeroThrottle
   6+ 81C5 AF          >                        xor     a
   6+ 81C6 32 96 7E    >                        ld      (DELTA),a
   6+ 81C9 32 97 7E    >                        ld      (DELT4Lo),a
   6+ 81CC 32 98 7E    >                        ld      (DELT4Lo+1),a
   7+ 81CF                                      ZeroPitch
   7+ 81CF AF          >                        xor     a
   7+ 81D0 32 AB 7D    >                        ld      (BET2),a
   7+ 81D3 32 AC 7D    >                        ld      (BET2FLIP),a
   7+ 81D6 32 A9 7D    >                        ld      (JSTY),a
   7+ 81D9 32 A8 7D    >                        ld      (BETA),a
   8+ 81DC                                      ZeroRoll
   8+ 81DC AF          >                        xor     a                              ; zero roll and climb
   8+ 81DD 32 B7 7D    >                        ld      (ALP2),a
   8+ 81E0 32 B8 7D    >                        ld      (ALP2FLIP),a
   8+ 81E3 32 B3 7D    >                        ld      (JSTX),a
   8+ 81E6 32 B5 7D    >                        ld      (ALPHA),a
   9+ 81E9                                      ClearMissileTargetting
   9+ 81E9 3E FF       >                        ld      a,StageMissileNotTargeting
   9+ 81EB 32 22 81    >                        ld      (MissileTargettingFlag),a
  10+ 81EE                                      ClearECM
  10+ 81EE AF          >                        xor     a
  10+ 81EF 32 B1 7D    >                        ld      (ECMCountDown),a
  11+ 81F2                                      ChargeEnergyAndShields
  11+ 81F2 3E FF       >                        ld      a,$FF
  11+ 81F4 32 1F 81    >                        ld      (PlayerEnergy),a
  11+ 81F7 32 1D 81    >                        ld      (ForeShield),a
  11+ 81FA 32 1E 81    >                        ld      (AftShield),a
  12+ 81FD                                      ClearTemperatures
  12+ 81FD AF          >                        xor     a
  12+ 81FE 32 19 81    >                        ld      (CabinTemperature),a
  12+ 8201 32 18 81    >                        ld      (GunTemperature),a
  13+ 8204                                      ClearWarpPressed
  13+ 8204             >                        SetMemFalse WarpPressed
  13+ 8204 3E FF       >                        ld      a,$FF
  13+ 8206 32 8D 80    >                        ld      (WarpPressed),a
  14+ 8209 CD 5B 82                             call    IsLaserUseable
  15+ 820C                                      SetMemFalse LaserBeamOn
  15+ 820C 3E FF       >                        ld      a,$FF
  15+ 820E 32 3A 81    >                        ld      (LaserBeamOn),a
  16+ 8211                                      MMUSelectCommander
  16+ 8211 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
  17+ 8215 CD 0E E3                             call    LoadLaserToCurrent
  18+ 8218 C8                                   ret     z
  19+ 8219
  20+ 8219 C9                                   ret
  21+ 821A
  22+ 821A 21 03 84     AddCargoTypeD:          ld      hl,CargoTonnes
  23+ 821D 57                                   ld      d,a
  24+ 821E ED 31                                add     hl,a
  25+ 8220 34                                   inc     (hl)
  26+ 8221 C9                                   ret
  27+ 8222
  28+ 8222 7A           CanWeScoopCargoD:       ld      a,d
  29+ 8223                                      JumpIfAGTENusng  GoldIndex, .ItMayNotBeTonnes  ; if its cargo in kgs or gs then jump
  29+ 8223 FE 0E       >                        cp     GoldIndex
  29+ 8225 D2 47 82    >                        jp		nc,.ItMayNotBeTonnes
  30+ 8228 21 03 84     .ItsTonnes:             ld      hl,CargoTonnes
  31+ 822B 0E 00                                ld      c,0
  32+ 822D 06 0E                                ld      b,MineralsIndex+1           ; Only count to Gold as that is in KG
  33+ 822F 7E           .AddLoop:               ld      a,(hl)
  34+ 8230 81                                   add     c
  35+ 8231 4F                                   ld      c,a                     ; add to counter
  36+ 8232 05                                   dec     b
  37+ 8233 23                                   inc     hl
  38+ 8234 10 F9                                djnz    .AddLoop
  39+ 8236 21 14 84                             ld      hl,AlienItemsTonnes     ; Finally do alien items
  40+ 8239 7E                                   ld      a,(hl)
  41+ 823A 81                                   add     c
  42+ 823B 4F                                   ld      c,a
  43+ 823C 3A 01 84                             ld      a,(CargoBaySize)        ; Get Bay Size
  44+ 823F                                      JumpIfAEqNusng c, .CargoFull
  44+ 823F B9          >                        cp     c
  44+ 8240 CA 45 82    >                        jp      z,.CargoFull
  45+ 8243              .StillRoom:             ClearCarryFlag
  45+ 8243 B7          >                        or a
  46+ 8244 C9                                   ret
  47+ 8245              .CargoFull:             SetCarryFlag
  47+ 8245 37          >                        scf
  48+ 8246 C9                                   ret
  49+ 8247              .ItMayNotBeTonnes:      JumpIfAEqNusng  AlienItemsIndex,.ItsTonnes       ;ALienItems are tonnes
  49+ 8247 FE 11       >                        cp     AlienItemsIndex
  49+ 8249 CA 28 82    >                        jp      z,.ItsTonnes
  50+ 824C 21 03 84                             ld      hl,CargoTonnes
  51+ 824F 7A                                   ld      a,d
  52+ 8250 ED 31                                add     hl,a
  53+ 8252 7E                                   ld      a,(hl)
  54+ 8253                                      JumpIfAEqNusng  200, .StillRoom
  54+ 8253 FE C8       >                        cp     200
  54+ 8255 CA 43 82    >                        jp      z,.StillRoom
  55+ 8258 C3 45 82                             jp      .CargoFull
  56+ 825B              ; END of rountine
  57+ 825B
  58+ 825B 3A 34 81     IsLaserUseable:         ld      a,(CurrLaserType)
  59+ 825E FE FF                                cp      255
  60+ 8260 C8                                   ret     z
  61+ 8261 3A 35 81                             ld      a,(CurrLaserDamage)
  62+ 8264 FE FF                                cp      255
  63+ 8266 C9                                   ret
  64+ 8267
  65+ 8267 CD 2D 83     InitMainLoop:           call    ClearUnivSlotList
  66+ 826A AF                                   xor     a
  67+ 826B 32 60 80                             ld      (CurrentUniverseAI),a
  68+ 826E 3E 03                                ld      a,3
  69+ 8270 32 A9 7E                             ld      (MenuIdMax),a
  70+ 8273                                      SetMemFalse SetStationHostileFlag
  70+ 8273 3E FF       >                        ld      a,$FF
  70+ 8275 32 62 80    >                        ld      (SetStationHostileFlag),a
  71+ 8278                                      SetMemFalse DockedFlag
  71+ 8278 3E FF       >                        ld      a,$FF
  71+ 827A 32 5E 80    >                        ld      (DockedFlag),a
  72+ 827D              ;                        call    InitialiseFrontView
  73+ 827D CD 2D 6A                             call    InitialiseCommander
  74+ 8280                                      MMUSelectUniverseN 2
  74+ 8280 ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
  75+ 8284 CD 31 6B                             call    SetInitialShipPosition
  76+ 8287              ; Initialist screen refresh
  77+ 8287 3E 05                                ld      a, ConsoleRefreshInterval
  78+ 8289 32 88 80                             ld      (ConsoleRefreshCounter),a
  79+ 828C                                      SetMemFalse    ConsoleRedrawFlag
  79+ 828C 3E FF       >                        ld      a,$FF
  79+ 828E 32 89 80    >                        ld      (ConsoleRedrawFlag),a
  80+ 8291                                      MMUSelectStockTable
  80+ 8291 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
  81+ 8295 CD AA E0                             call    generate_stock_market
  82+ 8298 CD BA 74                             call    ResetMessageQueue
  83+ 829B                                      InitEventCounter
  83+ 829B AF          >                        xor     a
  83+ 829C 32 67 80    >                        ld      (EventCounter),a
  84+ 829F                                      ClearMissJump
  84+ 829F 3E FF       >                        ld      a,$FF
  84+ 82A1 32 69 80    >                        ld      (MissJumpFlag),a
  85+ 82A4                                      SetMemFalse TextInputMode
  85+ 82A4 3E FF       >                        ld      a,$FF
  85+ 82A6 32 8A 80    >                        ld      (TextInputMode),a
  86+ 82A9 C9                                   ret
  87+ 82AA
  88+ 82AA              ; needs to be called after a kill too
  89+ 82AA 2A 4E 7F     SetPlayerRank:          ld      hl,(KillTally)
  90+ 82AD DD 21 CD 86                          ld      ix,RankingTableLow
  91+ 82B1 06 00                                ld      b,0
  92+ 82B3 DD 56 01     .CompareLoop:           ld      d,(ix+1)
  93+ 82B6 DD 5E 00                             ld      e,(ix+0)
  94+ 82B9 A7                                   and     a             ; compare HL to DE
  95+ 82BA ED 52                                sbc     hl,de         ; we can throw away HL now
  96+ 82BC 28 09                                jr      z,.FoundRank
  97+ 82BE 38 07                                jr      c,.FoundRank
  98+ 82C0 DD 23                                inc     ix
  99+ 82C2 DD 23                                inc     ix
 100+ 82C4 04                                   inc     b
 101+ 82C5 18 EC                                jr      .CompareLoop
 102+ 82C7 78           .FoundRank:             ld      a,b
 103+ 82C8 32 50 7F                             ld      (CurrentRank),a
 104+ 82CB C9                                   ret
 105+ 82CC
 106+ 82CC 3E 00        SetSpeedZero:           ld      a,0
 107+ 82CE 32 96 7E                             ld      (DELTA),a                                       ;
 108+ 82D1 67                                   ld      h,a                                             ;
 109+ 82D2 6F                                   ld      l,a                                             ;
 110+ 82D3 22 97 7E                             ld      (DELT4Lo),hl                                    ;
 111+ 82D6 C9                                   ret
 112+ 82D7
 113+ 82D7 21 1F 81     RechargeShip:           ld      hl,PlayerEnergy                                 ; if enery >= 128
 114+ 82DA 7E                                   ld      a,(hl)
 115+ 82DB CB 7F                                bit     7,a                                             ; then we can recharge shields
 116+ 82DD 28 0D                                jr      z,.UpdatePlayerEnergy
 117+ 82DF 21 1D 81     .ShieldCharge:          ld      hl,ForeShield                                   ; charge front shield
 118+ 82E2 34                                   inc     (hl)
 119+ 82E3 20 01                                jr      nz,.DoneForeShield
 120+ 82E5 35           .ForeOverCharge:        dec     (hl)
 121+ 82E6 23           .DoneForeShield:        inc     hl                                              ; point to aft shield
 122+ 82E7 34                                   inc     (hl)
 123+ 82E8 20 01                                jr      nz,.DoneAftShield
 124+ 82EA 35                                   dec     (hl)                                            ; back to 255
 125+ 82EB 23           .DoneAftShield:         inc     hl                                              ; point to energy
 126+ 82EC 34           .UpdatePlayerEnergy:    inc     (hl)
 127+ 82ED 28 0A                                jr      z,.OverflowedEnergy
 128+ 82EF 3A 22 84                             ld      a,(ExtraEnergyUnit)
 129+ 82F2                                      ReturnIfANENusng EquipmentItemFitted                    ; if energy unit fitted an extra step
 129+ 82F2 FE FF       >                        cp      EquipmentItemFitted
 129+ 82F4 C0          >                        ret     nz
 130+ 82F5 34           .EnergyUnitFitted:      inc     (hl)
 131+ 82F6 28 01                                jr      z,.OverflowedEnergy
 132+ 82F8 C9                                   ret
 133+ 82F9 35           .OverflowedEnergy:      dec     (hl)                                            ;  restore to 255
 134+ 82FA C9                                   ret
 135+ 82FB 21 1F 81     .SkipShieldCharge:      ld      hl,PlayerEnergy
 136+ 82FE 18 EC                                jr      .UpdatePlayerEnergy
 137+ 8300
 138+ 8300              ; sets carry to true if target
 139+ 8300 3A 22 81     IsMissileLockedOn:      ld      a,(MissileTargettingFlag)
 140+ 8303 CB 7F                                bit     7,a
 141+ 8305 28 07                                jr      z, .TargetSelected
 142+ 8307 E6 70                                and     $70                         ; are all upper bits set (we can ignore bit 7)
 143+ 8309 CA 0E 83                             jp      z, .TargetSelected           ; if its only bit 7 then we have a lock
 144+ 830C                                      ClearCarryFlag                      ; if bitsd 6 to 4 were set then it must be unlocked status
 144+ 830C B7          >                        or a
 145+ 830D C9                                   ret
 146+ 830E              .TargetSelected:        JumpIfSlotAEmpty .TargetInvalid     ; does slot A have an target
 146+ 830E 21 70 80    >                        ld      hl,UniverseSlotList
 146+ 8311 ED 31       >                        add     hl,a
 146+ 8313 7E          >                        ld      a,(hl)
 146+ 8314 3C          >                        inc     a
 146+ 8315 CA 1B 83    >                        jp      z,.TargetInvalid    ; if slot was ff inc would make it 0
 146+ 8318 3D          >                        dec     a           ; get original value back for later
 147+ 8319                                      SetCarryFlag
 147+ 8319 37          >                        scf
 148+ 831A C9                                   ret
 149+ 831B 3E FF        .TargetInvalid:         ld      a, StageMissileNotTargeting     ; housekeep missile status if target gone
 150+ 831D 32 22 81                             ld      (MissileTargettingFlag),a
 151+ 8320 C9                                   ret
 152+ 8321
# file closed: ./Variables/general_variablesRoutines.asm
1084  8321                  INCLUDE "./Variables/UniverseSlotRoutines.asm"
# file opened: ./Variables/UniverseSlotRoutines.asm
   1+ 8321              ; Note this code is core code and can not be in a memory bank unless do explosion code is changed too
   2+ 8321 AF           ClearSlotCount:         xor     a
   3+ 8322 21 70 80                             ld      hl,UniverseSlotList
   4+ 8325 06 0C                                ld      b, UniverseSlotListSize ; prbably not needed + UniverseSlotTypeSize
   5+ 8327 77           .fillLoop:              ld      (hl),a
   6+ 8328 23                                   inc     hl
   7+ 8329 10 FC                                djnz    .fillLoop
   8+ 832B C9                                   ret
   9+ 832C
  10+ 832C              ; Initialises all types to a count of 1 where there is an occupied universe slot
  11+ 832C              ; this needs expanding to cater for a missing type, find type and increment count (use cpir?)
  12+ 832C              ; DOE NOT WORK CorrectSlotCount:       call    ClearSlotCount
  13+ 832C              ; DOE NOT WORK                         ld      hl,UniverseSlotCount
  14+ 832C              ; DOE NOT WORK                         ld      de,UniverseSlotList
  15+ 832C              ; DOE NOT WORK                         ld      b,UniverseSlotListSize
  16+ 832C              ; DOE NOT WORK .fillLoop:              ld      a,(de)
  17+ 832C              ; DOE NOT WORK                         cp      $FF
  18+ 832C              ; DOE NOT WORK                         jr      z,.SkipSlot
  19+ 832C              ; DOE NOT WORK .CorrectSlot:           ld      (hl),a
  20+ 832C              ; DOE NOT WORK                         inc     hl
  21+ 832C              ; DOE NOT WORK                         ld      (hl),1
  22+ 832C              ; DOE NOT WORK                         inc     hl
  23+ 832C              ; DOE NOT WORK                         inc     hl
  24+ 832C              ; DOE NOT WORK .SkipSlot               inc     de
  25+ 832C              ; DOE NOT WORK                         djnz    .fillLoop
  26+ 832C C9                                   ret
  27+ 832D              ; Wipe all items
  28+ 832D 3E FF        ClearUnivSlotList:      ld      a,$FF
  29+ 832F 21 70 80                             ld      hl,UniverseSlotList
  30+ 8332 06 18                                ld      b, UniverseSlotListSize * 2
  31+ 8334 77           .fillLoop:              ld      (hl),a
  32+ 8335 23                                   inc     hl
  33+ 8336 10 FC                                djnz    .fillLoop
  34+ 8338 C9                                   ret
  35+ 8339
  36+ 8339 21 70 80     SetSlot0ToSpaceStation: ld      hl,UniverseSlotList
  37+ 833C 36 02                                ld      (hl),ShipTypeStation
  38+ 833E 21 7C 80                             ld      hl,UniverseSlotType
  39+ 8341 36 02                                ld      (hl),ShipTypeStation
  40+ 8343 C9                                   ret
  41+ 8344
  42+ 8344 21 70 80     SetSlotAToTypeB:        ld      hl,UniverseSlotList
  43+ 8347 ED 31                                add     hl,a
  44+ 8349 70                                   ld      (hl),b
  45+ 834A C9                                   ret
  46+ 834B
  47+ 834B 21 7C 80     SetSlotAToClassB:       ld      hl,UniverseSlotType
  48+ 834E ED 31                                add     hl,a
  49+ 8350 70                                   ld      (hl),b
  50+ 8351 C9                                   ret
  51+ 8352
  52+ 8352              ; Clears all except slot A, used when say restarting a space station post launch
  53+ 8352 57           ClearFreeSlotListSaveA: ld      d,a
  54+ 8353 0E 00                                ld      c,0
  55+ 8355 21 70 80                             ld      hl,UniverseSlotList
  56+ 8358 06 18                                ld      b, UniverseSlotListSize * 2
  57+ 835A 79           .fillLoop:              ld      a,c
  58+ 835B BA                                   cp      d
  59+ 835C 28 03                                jr      z,.SkipSlot
  60+ 835E 3E FF                                ld      a,$FF
  61+ 8360 77                                   ld      (hl),a
  62+ 8361 23           .SkipSlot:              inc     hl
  63+ 8362 23                                   inc     hl
  64+ 8363 10 F5                                djnz    .fillLoop
  65+ 8365 C9                                   ret
  66+ 8366
  67+ 8366 21 70 80     ClearSlotA:             ld      hl,UniverseSlotList
  68+ 8369 ED 31                                add     hl,a
  69+ 836B 36 FF                                ld      (hl),$FF
  70+ 836D 3E 0C                                ld      a,UniverseSlotListSize  ; move to types
  71+ 836F ED 31                                add     hl,a
  72+ 8371 36 FF                                ld      (hl),$FF
  73+ 8373 C9                                   ret
  74+ 8374
  75+ 8374              ; Space Station will always be slot 0
  76+ 8374 21 7D 80     ClearJunk:              ld      hl,UniverseSlotType+1
  77+ 8377 0E 01                                ld      c,1
  78+ 8379 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
  79+ 837B 7E           .NextShip:              ld      a,(hl)
  80+ 837C FE 03                                cp      ShipTypeJunk
  81+ 837E CA 8F 83                             jp      z,.ProcessJunk
  82+ 8381 FE 04                                cp      ShipTypeScoopable
  83+ 8383 CA 8F 83                             jp      z,.ProcessJunk
  84+ 8386 23           .DoneIteration:         inc     hl
  85+ 8387 0C                                   inc     c
  86+ 8388 10 F1                                djnz    .NextShip
  87+ 838A                                      ClearJunkCount
  87+ 838A             >                        ZeroA
  87+ 838A AF          >                        xor a
  87+ 838B 32 46 7F    >                        ld      (JunkCount),a
  88+ 838E C9                                   ret
  89+ 838F 79           .ProcessJunk:           ld      a,c
  90+ 8390 CD 66 83                             call    ClearSlotA
  91+ 8393 C3 86 83                             jp      .DoneIteration
  92+ 8396
  93+ 8396
  94+ 8396 21 7D 80     WarpJunk:               ld      hl,UniverseSlotType+1
  95+ 8399 0E 01                                ld      c,1
  96+ 839B 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
  97+ 839D 7E           .NextShip:              ld      a,(hl)
  98+ 839E FE 03                                cp      ShipTypeJunk
  99+ 83A0 CA AD 83                             jp      z,.ProcessJunk
 100+ 83A3 FE 04                                cp      ShipTypeScoopable
 101+ 83A5 CA AD 83                             jp      z,.ProcessJunk
 102+ 83A8 23           .DoneIteration:         inc     hl
 103+ 83A9 0C                                   inc     c
 104+ 83AA 10 F1                                djnz    .NextShip
 105+ 83AC C9                                   ret
 106+ 83AD 79           .ProcessJunk:           ld      a,c
 107+ 83AE                                      MMUSelectUniverseA
 107+ 83AE C6 46       >                     add    a,BankUNIVDATA0
 107+ 83B0 ED 92 56    >                     nextreg UniverseMMU,       a
 108+ 83B3 CD 72 C6                             call    WarpOffset
 109+ 83B6 C3 A8 83                             jp      .DoneIteration
 110+ 83B9
 111+ 83B9
 112+ 83B9 21 7D 80     AreShipsPresent:        ld      hl,UniverseSlotType+1
 113+ 83BC 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
 114+ 83BE 7E           .NextShip:              ld      a,(hl)
 115+ 83BF FE 00                                cp      ShipTypeNormal
 116+ 83C1                                      ClearCarryFlag
 116+ 83C1 B7          >                        or a
 117+ 83C2 C8                                   ret     z
 118+ 83C3 23                                   inc     hl
 119+ 83C4 10 F8                                djnz    .NextShip
 120+ 83C6                                      SetCarryFlag
 120+ 83C6 37          >                        scf
 121+ 83C7 C9                                   ret
 122+ 83C8
 123+ 83C8 21 70 80     IsSpaceStationPresent:  ld      hl,UniverseSlotList
 124+ 83CB                                      ClearCarryFlag
 124+ 83CB B7          >                        or a
 125+ 83CC 7E           .SearchLoop:            ld      a,(hl)
 126+ 83CD                                      ReturnIfAEqNusng ShipTypeStation
 126+ 83CD FE 02       >                        cp      ShipTypeStation
 126+ 83CF C8          >                        ret     z
 127+ 83D0                                      SetCarryFlag
 127+ 83D0 37          >                        scf
 128+ 83D1 C9                                   ret
 129+ 83D2
 130+ 83D2 21 70 80     GetTypeAtSlotA:         ld      hl,UniverseSlotList
 131+ 83D5 ED 31                                add     hl,a
 132+ 83D7 7E                                   ld      a,(hl)
 133+ 83D8 C9                                   ret
 134+ 83D9
 135+ 83D9 21 71 80     IsPlanetOrSpaceStation: ld      hl,UniverseSlotList+1
 136+ 83DC 7E                                   ld      a,(hl)
 137+ 83DD C9                                   ret
 138+ 83DE
 139+ 83DE 21 70 80     FindNextFreeSlotInC:    ld      hl,UniverseSlotList
 140+ 83E1 06 0C                                ld      b, UniverseSlotListSize
 141+ 83E3 0E 00                                ld      c, 0
 142+ 83E5 7E           .SearchLoop:            ld      a,(hl)
 143+ 83E6                                      JumpIfAEqNusng $FF, .FoundSlot
 143+ 83E6 FE FF       >                        cp     $FF
 143+ 83E8 CA F1 83    >                        jp      z,.FoundSlot
 144+ 83EB 0C                                   inc     c
 145+ 83EC 23                                   inc     hl
 146+ 83ED 10 F6                                djnz    .SearchLoop
 147+ 83EF                                      SetCarryFlag
 147+ 83EF 37          >                        scf
 148+ 83F0 C9                                   ret
 149+ 83F1              .FoundSlot:             ClearCarryFlag
 149+ 83F1 B7          >                        or a
 150+ 83F2 C9                                   ret
 151+ 83F3
 152+ 83F3
 153+ 83F3 CD DE 83     FindNextFreeSlotInA:    call    FindNextFreeSlotInC
 154+ 83F6 79                                   ld      a,c
 155+ 83F7 C9                                   ret
 156+ 83F8
# file closed: ./Variables/UniverseSlotRoutines.asm
1085  83F8                  INCLUDE "./Variables/EquipmentVariables.asm"
# file opened: ./Variables/EquipmentVariables.asm
   1+ 83F8 00           AutoDocking				DB	0				; $033F
   2+ 83F9 00           PlayerECM				DB	0				; $0340
   3+ 83FA 00           Laser2					DB	0				; 0343 laser Power? Not sure
   4+ 83FB 00           LaserCount				DB	0				; 0346  LASCT  \ laser count =9 for pulse, cooled off?
   5+ 83FC 00 00 00 00  Cash					DB  0,0,0,0			; 0361 - 0364 Cash now litte endian
   6+ 8400 19           Fuel					DB	25				; 0365  QQ14
   7+ 8401 46           CargoBaySize			DB	70				; 036E
   8+ 8402 00           CargoRunningLoad        DB  0
   9+ 8403 00 00 00 00  CargoTonnes             DB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   9+ 8407 00 00 00 00
   9+ 840B 00 00 00 00
   9+ 840F 00 00 00 00
  10+ 8413              ;CargoTonnes		    DB	16,1,2,3,4,5,6,7,6,9,10,11,12,13,14,15			; 036F - 037F	QQ20
  11+ 8413              SlaveCargoTonnes		equ CargoTonnes+3
  12+ 8413              NarcoticsCargoTonnes	equ CargoTonnes+6
  13+ 8413              FirearmsCargoTonnes		equ CargoTonnes+10
  14+ 8413              GoldCargoKGs:           equ CargoTonnes+15
  15+ 8413              AlienItemsTonnes        equ CargoTonnes+17
  16+ 8413              ; For each view laser a localised copy of the stats
  17+ 8413              ; TODO - need to add code to maintain on load/save/equipment transactions
  18+ 8413 00 00 00 00  LaserType               DS  4               ; quick reference to laser type
  19+ 8417 00 00 00 00  LaserDamagedFlag        DS  4               ; probabiliy out of 255 that it will no fire, 0 = good, 255 = will not fire
  20+ 841B              ; dont need as static from table LaserPulseRate          DS  4               ; how many pulses can be fired before long pause
  21+ 841B              ; dont need as static from table LaserPulsePause         DS  4               ; time before next pulse - 0 = beam
  22+ 841B              ; dont need as static from table LaserPulseRest          DS  4               ; time before pulse count resets to 0
  23+ 841B              ; dont need as static from table LaserDamageOutput       DS  4               ; amount of damage for a laser hit
  24+ 841B              ; dont need as static from table LaserEnergyDrain        DS  4               ; amount of energy drained by cycle
  25+ 841B              ; dont need as static from table LaserHeat               DS  4               ; amount of heat generated
  26+ 841B              ; dont need as static from table LaserDurability         DS  4               ; probabability out of 255 that a hit on it unshielded will add random amount of damage
  27+ 841B              ; dont need as static from table LaserDurabilityAmount   DS  4               ; max amount of damagage can be sustained in one damage hit
  28+ 841B
  29+ 841B
  30+ 841B              QQ20                    equ CargoTonnes
  31+ 841B 00 00 00...  EquipmentFitted         DS  EQ_ITEM_COUNT    ; Series of flags for if each item is fitted
  32+ 8435              ECMPresent				EQU EquipmentFitted + EQ_ECM				; 0380
  33+ 8435              FuelScoop               EQU EquipmentFitted + EQ_FUEL_SCOOPS
  34+ 8435              EnergyBomb				EQU EquipmentFitted + EQ_ENERGY_BOMB		; 0382	Also random hyperspeace in Elite A
  35+ 8435              ExtraEnergyUnit			EQU EquipmentFitted + EQ_ENERGY_UNIT        ; 0383
  36+ 8435              DockingComputer 		EQU EquipmentFitted + EQ_DOCK_COMP    		; 0384
  37+ 8435              GalacticHyperDrive		EQU EquipmentFitted + EQ_GAL_DRIVE   		; 0385
  38+ 8435              EscapePod				EQU EquipmentFitted + EQ_ESCAPE_POD  		; 0386
  39+ 8435 01           FuelScoopsBarrelStatus	DB	1				; 0381
  40+ 8436
# file closed: ./Variables/EquipmentVariables.asm
1086  8436                  INCLUDE "./Variables/random_number.asm"
# file opened: ./Variables/random_number.asm
   1+ 8436              doRandom2:									; .DORND2	\ -> &3F85 \ Restricted for explosion dust.
   2+ 8436              doRND2:
   3+ 8436 A7           	and		a								; fast clear carry  leave bit0 of RAND+2 at 0.
   4+ 8437              doRandom:									;.DORND	\ -> &3F86 \ do random, new A, X.
   5+ 8437              ; "doRandom, Random Seed update, new value in A & C)"
   6+ 8437              ; uses a c h l registers
   7+ 8437              doRND:                  ;exx                                     ; protect bc,de,hl
   8+ 8437 3A 92 7D                             ld		a,(RandomSeed)					; Get Seed 0
   9+ 843A CB 17                                rl		a								; Rotate L including carry
  10+ 843C 4F                                   ld		c,a								; c =  double lo
  11+ 843D 21 94 7D     .AddSeed2:              ld		hl,RandomSeed2
  12+ 8440 8E                                   adc		a,(hl)							; RAND+2
  13+ 8441 32 92 7D     .SaveAtoSeed:           ld		(RandomSeed),a					; and save RAND
  14+ 8444 08           .SaveBtoSeed2:          ex		af,af'
  15+ 8445 79                                   ld		a,c
  16+ 8446 32 94 7D                             ld		(RandomSeed2),a
  17+ 8449 08                                   ex		af,af'
  18+ 844A 3A 93 7D                             ld		a,(RandomSeed1)
  19+ 844D 4F                                   ld		c,a								; C = Seed1
  20+ 844E 21 95 7D     .AddSeed3:              ld		hl,RandomSeed3
  21+ 8451 8E                                   adc		a,(hl)
  22+ 8452 32 93 7D                             ld		(RandomSeed1),a
  23+ 8455 08                                   ex		af,af'
  24+ 8456 79                                   ld		a,c
  25+ 8457 32 95 7D                             ld		(RandomSeed3),a
  26+ 845A 08                                   ex		af,af'
  27+ 845B                                      ;exx                                     ; get bc,de,hl back
  28+ 845B C9                                   ret
  29+ 845C
  30+ 845C 21 92 7D     saveRandomSeeds:        ld      hl,RandomSeed
  31+ 845F 11 96 7D                             ld      de,RandomSeedSave
  32+ 8462 01 04 00                             ld      bc,4
  33+ 8465 ED A0                                ldi
  34+ 8467 ED A0                                ldi
  35+ 8469 ED A0                                ldi
  36+ 846B ED A0                                ldi
  37+ 846D C9                                   ret
  38+ 846E
  39+ 846E 21 96 7D     restoreRandomSeeds:     ld      hl,RandomSeedSave
  40+ 8471 11 92 7D                             ld      de,RandomSeed
  41+ 8474 01 04 00                             ld      bc,4
  42+ 8477 ED A0                                ldi
  43+ 8479 ED A0                                ldi
  44+ 847B ED A0                                ldi
  45+ 847D ED A0                                ldi
  46+ 847F C9                                   ret
# file closed: ./Variables/random_number.asm
1087  8480                  INCLUDE "./Variables/galaxy_seed.asm"
# file opened: ./Variables/galaxy_seed.asm
   1+ 8480 47 41 4C 41  GALAXYSEED DB "GALAXYSEED"
   1+ 8484 58 59 53 45
   1+ 8488 45 44
   2+ 848A 21 38 7F     copy_galaxy_to_system:  ld		hl,GalaxySeeds
   3+ 848D 11 14 7F                             ld		de,SystemSeed
   4+ 8490 ED A0        copy_seed:		        ldi
   5+ 8492 ED A0                                ldi
   6+ 8494 ED A0                                ldi
   7+ 8496 ED A0                                ldi
   8+ 8498 ED A0                                ldi
   9+ 849A ED A0                                ldi
  10+ 849C C9                                   ret
  11+ 849D
  12+ 849D 21 14 7F     copy_system_to_galaxy:  ld		hl,SystemSeed
  13+ 84A0 11 38 7F                             ld		de,GalaxySeeds
  14+ 84A3 18 EB                                jr		copy_seed
  15+ 84A5
  16+ 84A5 21 38 7F     copy_galaxy_to_working: ld		hl,GalaxySeeds
  17+ 84A8 11 2C 7F                             ld		de,WorkingSeeds
  18+ 84AB 18 E3                                jr		copy_seed
  19+ 84AD
  20+ 84AD 21 2C 7F     copy_working_to_galaxy: ld		hl,WorkingSeeds
  21+ 84B0 11 38 7F                             ld		de,GalaxySeeds
  22+ 84B3 18 DB                                jr		copy_seed
  23+ 84B5
  24+ 84B5 21 2C 7F     copy_working_to_system: ld		hl,WorkingSeeds
  25+ 84B8 11 14 7F                             ld		de,SystemSeed
  26+ 84BB 18 D3                                jr		copy_seed
  27+ 84BD
  28+ 84BD 21 14 7F     copy_system_to_working: ld		hl,SystemSeed
  29+ 84C0 11 2C 7F                             ld		de,WorkingSeeds
  30+ 84C3 18 CB                                jr		copy_seed
  31+ 84C5
  32+ 84C5              next_system_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  33+ 84C5 CD C8 84     		call	.NextStep					; This logic means we hard code x4
  34+ 84C8              .NextStep:
  35+ 84C8 CD CB 84     		call	process_seed				; This logic means we hard code x2
  36+ 84CB              process_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  37+ 84CB 3A 14 7F     		ld		a,(SystemSeed)				; QQ15
  38+ 84CE B7           		or		a							; clear carry flag
  39+ 84CF 21 16 7F     		ld		hl,SystemSeed+2				; hl -> qq+2
  40+ 84D2 86           		add		a,(hl)						; a= QQ15 + QQ152
  41+ 84D3 47           		ld		b,a							; partial sum lo
  42+ 84D4 3A 15 7F     		ld		a,(SystemSeed+1)
  43+ 84D7 21 17 7F     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  44+ 84DA 8E           		adc		a,(hl)						; note add with carry
  45+ 84DB 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  46+ 84DC 3A 16 7F     		ld		a,(SystemSeed+2)
  47+ 84DF 32 14 7F     		ld		(SystemSeed+0),a			; copy qq152 to qq150
  48+ 84E2 3A 17 7F     		ld		a,(SystemSeed+3)
  49+ 84E5 32 15 7F     		ld		(SystemSeed+1),a			; copy qq153 to qq151
  50+ 84E8 3A 19 7F     		ld		a,(SystemSeed+5)
  51+ 84EB 32 17 7F     		ld		(SystemSeed+3),a			; copy qq155 to qq153
  52+ 84EE 3A 18 7F     		ld		a,(SystemSeed+4)
  53+ 84F1 32 16 7F     		ld		(SystemSeed+2),a			; copy qq154 to qq152
  54+ 84F4 B7           		or		a
  55+ 84F5 78           		ld		a,b
  56+ 84F6 21 16 7F     		ld		hl,SystemSeed+2				; hl -> qq+2
  57+ 84F9 86           		add	    a,(hl)
  58+ 84FA 32 18 7F     		ld		(SystemSeed+4),a
  59+ 84FD 79           		ld		a,c
  60+ 84FE 21 17 7F     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  61+ 8501 8E           		adc		a,(hl)
  62+ 8502 32 19 7F     		ld		(SystemSeed+5),a
  63+ 8505 C9           		ret
  64+ 8506
  65+ 8506              next_working_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  66+ 8506 CD 09 85     		call	.NextStep					; This logic means we hard code x4
  67+ 8509              .NextStep:
  68+ 8509 CD 0C 85     		call	working_seed				; This logic means we hard code x2
  69+ 850C              working_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  70+ 850C              ; x = a + c
  71+ 850C 3A 2C 7F     		ld		a,(WorkingSeeds)			; QQ15
  72+ 850F B7           		or		a							; clear carry flag
  73+ 8510 21 2E 7F     		ld		hl,WorkingSeeds+2			; hl -> qq+2 [c]
  74+ 8513 86           		add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
  75+ 8514 47           		ld		b,a							; partial sum lo [x]
  76+ 8515              ; y = b + d	+ carry
  77+ 8515 3A 2D 7F     		ld		a,(WorkingSeeds+1)          ; [b]
  78+ 8518 21 2F 7F     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
  79+ 851B 8E           		adc		a,(hl)						; note add with carry
  80+ 851C 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  81+ 851D 3A 2E 7F     		ld		a,(WorkingSeeds+2)
  82+ 8520 32 2C 7F     		ld		(WorkingSeeds+0),a			; copy qq152 to qq150 [a] = [c]
  83+ 8523 3A 2F 7F     		ld		a,(WorkingSeeds+3)
  84+ 8526 32 2D 7F     		ld		(WorkingSeeds+1),a			; copy qq153 to qq151 [b] = [d]
  85+ 8529 3A 31 7F     		ld		a,(WorkingSeeds+5)
  86+ 852C 32 2F 7F     		ld		(WorkingSeeds+3),a			; copy qq155 to qq153 [d] = [f]
  87+ 852F 3A 30 7F     		ld		a,(WorkingSeeds+4)
  88+ 8532 32 2E 7F     		ld		(WorkingSeeds+2),a			; copy qq154 to qq152 [c] = [e]
  89+ 8535 B7           		or		a
  90+ 8536 78           		ld		a,b
  91+ 8537 21 2E 7F     		ld		hl,WorkingSeeds+2		    ; hl -> qq+2
  92+ 853A 86           		add	    a,(hl)
  93+ 853B 32 30 7F     		ld		(WorkingSeeds+4),a			; e = x + [c]
  94+ 853E 79           		ld		a,c
  95+ 853F 21 2F 7F     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 )we don't inc as it affects carry)
  96+ 8542 8E           		adc		a,(hl)
  97+ 8543 32 31 7F     		ld		(WorkingSeeds+5),a			; f = y + [d] + carry
  98+ 8546 C9           		ret
  99+ 8547
 100+ 8547 32           working_distX	DB 50
 101+ 8548 32           working_distY	DB 50
 102+ 8549 00           current_distY	DB 0
 103+ 854A
 104+ 854A AF           find_present_system:    xor		a
 105+ 854B 32 A1 7E                             ld		(XSAV),a
 106+ 854E 3A 15 7F     .CounterLoop:           ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 107+ 8551 4F                                   ld		c,a
 108+ 8552 3A 3F 7F     .calcLocaldy:           ld		a,(PresentSystemY)
 109+ 8555 47                                   ld		b,a								; so b holds Y ccord
 110+ 8556 79                                   ld		a,c
 111+ 8557 90                                   sub		b
 112+ 8558 CB 7F                                bit		7,a
 113+ 855A 28 02                                jr		z,.positivedy
 114+ 855C ED 44        .negativedy:            neg
 115+ 855E 32 49 85     .positivedy:            ld		(current_distY),a				; save cuirrent_dist Y as we need it maybe
 116+ 8561 ED 5B 47 85                          ld		de,(working_distX)
 117+ 8565 BA                                   cp		d
 118+ 8566 30 24                                jr		nc,.toofar
 119+ 8568 3A 17 7F     .calcLocaldx:           ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 120+ 856B 4F                                   ld		c,a
 121+ 856C 3A 3E 7F                             ld		a,(PresentSystemX)
 122+ 856F 47                                   ld		b,a								; so b holds Y ccord
 123+ 8570 79                                   ld		a,c
 124+ 8571 90                                   sub		b
 125+ 8572 CB 7F                                bit		7,a
 126+ 8574 28 02                                jr		z,.positivedx
 127+ 8576 ED 44        .negativedx:            neg
 128+ 8578 4F           .positivedx:            ld		c,a
 129+ 8579 BB                                   cp		e
 130+ 857A 30 10                                jr		nc,.toofar
 131+ 857C 3A 49 85     .Nearer:			    ld		a,(current_distY) 				; we have a closer system
 132+ 857F 47                                   ld		b,a								; we have c to recall Y into b
 133+ 8580 ED 43 47 85                          ld		(working_distX),bc
 134+ 8584 C5                                   push	bc
 135+ 8585 CD BD 84                             call 	copy_system_to_working
 136+ 8588 C1                                   pop		bc
 137+ 8589 78                                   ld		a,b								;
 138+ 858A B1                                   or		c								;
 139+ 858B C8                                   ret		z								; if we have distance 0 then bang on
 140+ 858C CD C5 84     .toofar:                call	next_system_seed
 141+ 858F 3A A1 7E                             ld		a,(XSAV)
 142+ 8592 3D                                   dec		a
 143+ 8593 FE 00                                cp		0
 144+ 8595 C8                                   ret		z
 145+ 8596 32 A1 7E                             ld		(XSAV),a
 146+ 8599 18 B3                                jr		.CounterLoop
 147+ 859B
 148+ 859B              get_planet_data_working_seed:
 149+ 859B 3A 2D 7F     		ld		a, (WorkingSeeds+1)
 150+ 859E E6 07        		and		7
 151+ 85A0 32 59 7F     		ld		(DisplayEcononmy),a
 152+ 85A3 3A 2E 7F     		ld		a, (WorkingSeeds+2)
 153+ 85A6 CB 3F        		srl	a
 154+ 85A8 CB 3F        		srl	a
 155+ 85AA CB 3F        		srl	a
 156+ 85AC CB 3F        		srl	a								; c/8
 157+ 85AE E6 07        		and		7
 158+ 85B0 32 5A 7F     		ld		(DisplayGovernment),a
 159+ 85B3 CB 3F        		srl	a
 160+ 85B5 FE 00        		cp		0
 161+ 85B7 20 08        		jr		nz,.CanBeRich
 162+ 85B9              .Fedual:
 163+ 85B9 3A 59 7F     		ld		a,(DisplayEcononmy)
 164+ 85BC F6 02        		or		2							; Adjust Eco for Anarchy and Feudal, set bit 1.
 165+ 85BE 32 59 7F     		ld		(DisplayEcononmy),a
 166+ 85C1              .CanBeRich:
 167+ 85C1 3A 59 7F     		ld		a,(DisplayEcononmy)
 168+ 85C4 EE 07        		xor		7							; flip economy so Rich is now 7
 169+ 85C6 32 5B 7F     		ld		(DisplayTekLevel),a			; Flipped Eco, EcoEOR7, Rich Ind = 7
 170+ 85C9 47           		ld		b,a
 171+ 85CA 3A 2F 7F     		ld		a,(WorkingSeeds+3)
 172+ 85CD E6 03        		and		3
 173+ 85CF 80           		add		a,b
 174+ 85D0 32 5B 7F     		ld		(DisplayTekLevel),a			; Tek Level += seed d & 3
 175+ 85D3 3A 5A 7F     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 176+ 85D6 CB 3F        		srl		a 							; gov/2
 177+ 85D8 47           		ld		b,a
 178+ 85D9 3A 5B 7F     		ld		a,(DisplayTekLevel)
 179+ 85DC 80           		add		a,b
 180+ 85DD 32 5B 7F     		ld		(DisplayTekLevel),a			; Tek += gov /2
 181+ 85E0 CB 27        		sla		a
 182+ 85E2 CB 27        		sla		a							; Onto Population (TL-1)*= 4
 183+ 85E4 47           		ld		b,a
 184+ 85E5 3A 59 7F     		ld		a,(DisplayEcononmy)
 185+ 85E8 80           		add		a,b                  		; TechLevel*4 + Eco   7-56
 186+ 85E9 47           		ld		b,a
 187+ 85EA 3A 5A 7F     		ld		a,(DisplayGovernment)
 188+ 85ED 3C           		inc		a  							; +Government, 0 is Anarchy + 1
 189+ 85EE 32 5C 7F     		ld		(DisplayPopulation),a
 190+ 85F1 3A 59 7F     		ld		a,(DisplayEcononmy)
 191+ 85F4 EE 07        		xor		7							; Onto productivity
 192+ 85F6 C6 03        		add		3							;  (Flipped eco +3)
 193+ 85F8 57           		ld		d,a
 194+ 85F9 3A 5A 7F     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 195+ 85FC C6 04        		add		4
 196+ 85FE 5F           		ld		e,a
 197+ 85FF ED 30        		mul									; ; DE = d*e, Productivity part 1. has hsb in A, lsb in P.
 198+ 8601 3A 5C 7F     		ld		a,(DisplayPopulation)		; then we use d for radius
 199+ 8604 57           		ld		d,a
 200+ 8605 ED 30        		mul
 201+ 8607 CB 23        		sla		e
 202+ 8609 CB 1A        		rr		d
 203+ 860B CB 23        		sla		e
 204+ 860D CB 1A        		rr		d
 205+ 860F CB 23        		sla		e
 206+ 8611 CB 1A        		rr		d							; de * 8
 207+ 8613 ED 53 5E 7F  		ld		(DisplayProductivity),de
 208+ 8617              .DoRadius:
 209+ 8617 3A 2F 7F     		ld		a,(WorkingSeeds+3)
 210+ 861A 4F           		ld		c,a
 211+ 861B 3A 31 7F     		ld		a,(WorkingSeeds+5)
 212+ 861E E6 0F        		and		$0F							;  lower 4 bits of w2_h determine planet radius
 213+ 8620 C6 0B        		add		11							;  radius min = 256*11 = 2816 km
 214+ 8622 47           		ld		b,a							;
 215+ 8623 ED 43 62 7F  		ld		(DisplayRadius),bc
 216+ 8627 C9           		ret
 217+ 8628
# file closed: ./Variables/galaxy_seed.asm
1088  8628                  INCLUDE "./Tables/text_tables.asm"
# file opened: ./Tables/text_tables.asm
   1+ 8628 50 75 6C 73  StatusLaserName1	DB	"Pulse",0
   1+ 862C 65 00
   2+ 862E 42 65 61 6D  StatusLaserName2	DB	"Beam",0
   2+ 8632 00
   3+ 8633 4D 69 6C 69  StatusLaserName3    DB  "Military",0
   3+ 8637 74 61 72 79
   3+ 863B 00
   4+ 863C 4D 69 6E 69  StatusLaserName4    DB  "Mining",0
   4+ 8640 6E 67 00
   5+ 8643 43 75 73 74  StatusLaserName5    DB  "Custom",0
   5+ 8647 6F 6D 00
   6+ 864A
   7+ 864A 28 86 2E 86  StatusLaserNameIdx	DW	StatusLaserName1,StatusLaserName2,StatusLaserName3,StatusLaserName4,StatusLaserName5
   7+ 864E 33 86 3C 86
   7+ 8652 43 86
   8+ 8654              StatusLaserNameIdxLen EQU $ - StatusLaserNameIdx
   9+ 8654
  10+ 8654 44 6F 63 6B  ConditionName1		DB "Docked",0
  10+ 8658 65 64 00
  11+ 865B 47 72 65 65  ConditionName2		DB "Green",0
  11+ 865F 6E 00
  12+ 8661 59 65 6C 6C  ConditionName3		DB "Yellow",0
  12+ 8665 6F 77 00
  13+ 8668 52 65 64 00  ConditionName4		DB "Red",0
  14+ 866C
  15+ 866C 54 86 5B 86  ConditionNameIdx	DW ConditionName1,ConditionName2,ConditionName3,ConditionName4
  15+ 8670 61 86 68 86
  16+ 8674              ConditionNameIdxLen EQU $ - ConditionNameIdx
  17+ 8674
  18+ 8674 41 42 4F 55  StatusDiagrams		DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION",0
  18+ 8678 53 45 49 54
  18+ 867C 49 4C 45 54
  18+ 8680 53 54 4F 4E
  18+ 8684 4C 4F 4E 55
  18+ 8688 54 48 4E 4F
  18+ 868C 41 4C 4C 45
  18+ 8690 58 45 47 45
  18+ 8694 5A 41 43 45
  18+ 8698 42 49 53 4F
  18+ 869C 55 53 45 53
  18+ 86A0 41 52 4D 41
  18+ 86A4 49 4E 44 49
  18+ 86A8 52 45 41 3F
  18+ 86AC 45 52 41 54
  18+ 86B0 45 4E 42 45
  18+ 86B4 52 41 4C 41
  18+ 86B8 56 45 54 49
  18+ 86BC 45 44 4F 52
  18+ 86C0 51 55 41 4E
  18+ 86C4 54 45 49 53
  18+ 86C8 52 49 4F 4E
  18+ 86CC 00
  19+ 86CD
  20+ 86CD 00 00 04 00  RankingTableLow		DW	$0000,$0004,$0008,$0010,$0020,$0100,$0200,$0A00,$1900,$C1FF,$FFFF
  20+ 86D1 08 00 10 00
  20+ 86D5 20 00 00 01
  20+ 86D9 00 02 00 0A
  20+ 86DD 00 19 FF C1
  20+ 86E1 FF FF
  21+ 86E3 03 00 07 00  RankingTableHigh	DW	$0003,$0007,$000F,$001F,$00FF,$01FF,$09FF,$18FF,$C0FF,$FEFF,$FFFF
  21+ 86E7 0F 00 1F 00
  21+ 86EB FF 00 FF 01
  21+ 86EF FF 09 FF 18
  21+ 86F3 FF C0 FF FE
  21+ 86F7 FF FF
  22+ 86F9
  23+ 86F9 48 61 72 6D  RankingName1		DB 	"Harmless",0
  23+ 86FD 6C 65 73 73
  23+ 8701 00
  24+ 8702 4D 6F 73 74  RankingName2		DB 	"Mostly Harmless",0
  24+ 8706 6C 79 20 48
  24+ 870A 61 72 6D 6C
  24+ 870E 65 73 73 00
  25+ 8712 50 6F 6F 72  RankingName3		DB 	"Poor",0
  25+ 8716 00
  26+ 8717 41 76 65 72  RankingName4		DB 	"Average",0
  26+ 871B 61 67 65 00
  27+ 871F 41 62 6F 76  RankingName5		DB 	"Above Average",0
  27+ 8723 65 20 41 76
  27+ 8727 65 72 61 67
  27+ 872B 65 00
  28+ 872D 43 6F 6D 70  RankingName6		DB 	"Competent",0
  28+ 8731 65 74 65 6E
  28+ 8735 74 00
  29+ 8737 44 61 6E 67  RankingName7		DB 	"Dangerous",0
  29+ 873B 65 72 6F 75
  29+ 873F 73 00
  30+ 8741 44 65 61 64  RankingName8		DB 	"Deadly",0
  30+ 8745 6C 79 00
  31+ 8748 2D 2D 2D 2D  RankingName9		DB 	"---- E L I T E ---",0
  31+ 874C 20 45 20 4C
  31+ 8750 20 49 20 54
  31+ 8754 20 45 20 2D
  31+ 8758 2D 2D 00
  32+ 875B 53 6B 6F 6C  RankingName10		DB 	"Skollobsgod",0
  32+ 875F 6C 6F 62 73
  32+ 8763 67 6F 64 00
  33+ 8767 4E 75 74 74  RankingName11		DB 	"Nutter",0
  33+ 876B 65 72 00
  34+ 876E
  35+ 876E              RankingEQHarmless	EQU 0
  36+ 876E              RankingEQMostly		EQU 1
  37+ 876E              RankingEQPoor		EQU 2
  38+ 876E              RankingEQAverage	EQU 3
  39+ 876E              RankingEQAbove		EQU 4
  40+ 876E              RankingEQCompetent  EQU 5
  41+ 876E              RankingEQDangerous	EQU 6
  42+ 876E              RankingEQDeadly		EQU 7
  43+ 876E              RankingEQElite		EQU 8
  44+ 876E              RankingEQSkollob	EQU 9
  45+ 876E              RankingEQNutter		EQU 10
  46+ 876E
  47+ 876E
  48+ 876E
  49+ 876E F9 86 02 87  RankingNameIdx		dw RankingName1,RankingName2,RankingName3,RankingName4,RankingName5,RankingName6,RankingName7,RankingName8,RankingName9,RankingName10,RankingName11
  49+ 8772 12 87 17 87
  49+ 8776 1F 87 2D 87
  49+ 877A 37 87 41 87
  49+ 877E 48 87 5B 87
  49+ 8782 67 87
  50+ 8784              RankingNameIdxLen EQU $ - RankingNameIdx
  51+ 8784
  52+ 8784
  53+ 8784              getTableText:
  54+ 8784              ; ">getTableText, hl = indexlist, a = textnbr, returns with hl = porinter to head of text"
  55+ 8784              ; ">Note for ranking first 2 bytes are target rank"
  56+ 8784 D5           	push	de								; save DE as we will likley need it in caller
  57+ 8785 ED 31        	add		hl,a							; 0 based ref, and its 2 bytes
  58+ 8787 ED 31        	add		hl,a
  59+ 8789 5E           	ld		e,(hl)
  60+ 878A 23           	inc		hl
  61+ 878B 56           	ld		d,(hl)							; de = indexed address
  62+ 878C EB           	ex		de,hl							; flip it to hl
  63+ 878D D1           	pop		de								; retrieve de
  64+ 878E C9           	ret										; return with hl as start entry
  65+ 878F
  66+ 878F
  67+ 878F              ;               CF      ZF      Result
  68+ 878F              ;               -----------------------------------
  69+ 878F              ;               0       0       HL > DE
  70+ 878F              ;               0       1       HL == DE
  71+ 878F              ;               1       0       HL < DE
  72+ 878F              ;               1       1       Impossible
  73+ 878F              getRankIndex:
  74+ 878F              ; ">getRank, de = kill count, returns a = index,hl destroyed"
  75+ 878F              ; ">Note for ranking first 2 bytes are target rank"
  76+ 878F 7A           	ld		a,d
  77+ 8790 B3           	or		e
  78+ 8791 FE 00        	cp		0
  79+ 8793 C8           	ret		z								; quicks skip for 0 kills
  80+ 8794 AF           	xor 	a
  81+ 8795 21 CD 86     	ld		hl,RankingTableLow
  82+ 8798              .testLoop:
  83+ 8798 4E           	ld		c,(hl)
  84+ 8799 23           	inc		hl
  85+ 879A 46           	ld		b,(hl)							; bc = ranking
  86+ 879B E5           	push	hl
  87+ 879C 60           	ld		h,b
  88+ 879D 69           	ld		l,c
  89+ 879E CD 42 98     	call	compare16HLDE
  90+ 87A1 38 06        	jr		c,.HLLTDE
  91+ 87A3              .HLGTEDE									; Found the correct rank
  92+ 87A3 E1           	pop		hl
  93+ 87A4 23           	inc		hl								; move to next value
  94+ 87A5 23           	inc		hl
  95+ 87A6 3C           	inc		a								; we canloop forever as if kills was $FFFF then hits nutter rank but also +1 = 0000 as its 16 bit
  96+ 87A7 18 EF        	jr		.testLoop
  97+ 87A9              .HLLTDE:									; HL < Kills so found correct rank
  98+ 87A9 E1           	pop		hl
  99+ 87AA C9           	ret
 100+ 87AB
# file closed: ./Tables/text_tables.asm
1089  87AB                  INCLUDE "./Tables/dictionary.asm"
# file opened: ./Tables/dictionary.asm
   1+ 87AB              ; Could move this into rom area for access as it will be read only
   2+ 87AB 58 00        WordDummy					DB  "X",0
   3+ 87AD 46 72 6F 6E  WordFront					DB	"Front",0              ;1
   3+ 87B1 74 00
   4+ 87B3 52 69 67 68  WordRight					DB	"Right",0              ;2
   4+ 87B7 74 00
   5+ 87B9 4C 65 66 74  WordLeft 					DB	"Left",0               ;3
   5+ 87BD 00
   6+ 87BE 52 65 61 72  WordRear   	 				DB	"Rear",0               ;4
   6+ 87C2 00
   7+ 87C3 4C 61 72 67  WordLarge           		DB  "Large",0              ;5
   7+ 87C7 65 00
   8+ 87C9 45 73 63 61  WordEscape          		DB  "Escape",0             ;6
   8+ 87CD 70 65 00
   9+ 87D0 50 6F 64 00  WordPod             		DB  "Pod",0                ;7
  10+ 87D4 43 61 72 67  WordCargo           		DB  "Cargo",0              ;8
  10+ 87D8 6F 00
  11+ 87DA 42 61 79 00  WordBay             		DB  "Bay",0                ;9
  12+ 87DE 46 75 65 6C  WordFuel            		DB  "Fuel",0               ;10
  12+ 87E2 00
  13+ 87E3 53 63 6F 6F  WordScoops          		DB  "Scoops",0             ;11
  13+ 87E7 70 73 00
  14+ 87EA 45 2E 43 2E  WordECM             		DB  "E.C.M.",0             ;12
  14+ 87EE 4D 2E 00
  15+ 87F1 53 79 73 74  WordSystem          		DB  "System",0             ;13
  15+ 87F5 65 6D 00
  16+ 87F8 45 6E 65 72  WordEnergy					DB  "Energy",0             ;14
  16+ 87FC 67 79 00
  17+ 87FF 42 6F 6D 62  WordBomb					DB  "Bomb",0               ;15
  17+ 8803 00
  18+ 8804 4C 61 73 65  WordLaser					DB  "Laser",0              ;16
  18+ 8808 72 00
  19+ 880A 50 75 6C 73  WordPulse           		DB  "Pulse",0              ;17
  19+ 880E 65 00
  20+ 8810 42 65 61 6D  WordBeam            		DB  "Beam",0               ;18
  20+ 8814 00
  21+ 8815 4D 69 6C 69  WordMiliary         		DB  "Miliary",0            ;19
  21+ 8819 61 72 79 00
  22+ 881D 4D 69 6E 69  WordMining          		DB  "Mining",0             ;20
  22+ 8821 6E 67 00
  23+ 8824 43 75 73 74  WordCustom          		DB  "Custom",0             ;21
  23+ 8828 6F 6D 00
  24+ 882B 55 6E 69 74  WordUnit            		DB  "Unit",0               ;22
  24+ 882F 00
  25+ 8830 53 68 69 65  WordShield          		DB  "Shield",0             ;23
  25+ 8834 6C 64 00
  26+ 8837 44 6F 63 6B  WordDocking         		DB  "Docking",0            ;24
  26+ 883B 69 6E 67 00
  27+ 883F 43 6F 6D 70  WordComputers       		DB  "Computers",0          ;25
  27+ 8843 75 74 65 72
  27+ 8847 73 00
  28+ 8849 48 79 70 65  WordHyperspace      		DB  "Hyperspace",0         ;26
  28+ 884D 72 73 70 61
  28+ 8851 63 65 00
  29+ 8854 47 61 6C 61  WordGalactic        		DB  "Galactic",0           ;27
  29+ 8858 63 74 69 63
  29+ 885C 00
  30+ 885D 45 78 74 72  WordExtra           		DB  "Extra",0              ;28
  30+ 8861 61 00
  31+ 8863 43 6C 65 61  WordClean           		DB  "Clean",0              ;29
  31+ 8867 6E 00
  32+ 8869 4F 66 66 65  WordOffender        		DB  "Offender",0           ;30
  32+ 886D 6E 64 65 72
  32+ 8871 00
  33+ 8872 46 75 67 69  WordFugitive        		DB  "Fugitive",0           ;31
  33+ 8876 74 69 76 65
  33+ 887A 00
  34+ 887B 46 6F 6F 64  WordFood					DB	"Food",0               ;32
  34+ 887F 00
  35+ 8880 54 65 78 74  WordTextiles				DB 	"Textiles",0           ;33
  35+ 8884 69 6C 65 73
  35+ 8888 00
  36+ 8889 52 61 64 69  WordRadioactives			DB  "Radioactives",0       ;34
  36+ 888D 6F 61 63 74
  36+ 8891 69 76 65 73
  36+ 8895 00
  37+ 8896 53 6C 61 76  WordSlaves					DB  "Slaves",0             ;35
  37+ 889A 65 73 00
  38+ 889D 4C 69 71 75  WordLiquorWines     		DB  "Liquor/Wines",0       ;36
  38+ 88A1 6F 72 2F 57
  38+ 88A5 69 6E 65 73
  38+ 88A9 00
  39+ 88AA 4C 75 78 75  WordLuxuries  	    		DB  "Luxuries",0	       ;37
  39+ 88AE 72 69 65 73
  39+ 88B2 00
  40+ 88B3 4E 61 72 63  WordNarcotics  	    		DB  "Narcotics",0	       ;38
  40+ 88B7 6F 74 69 63
  40+ 88BB 73 00
  41+ 88BD 4D 61 63 68  WordMachinery  	    		DB  "Machinery",0	       ;39
  41+ 88C1 69 6E 65 72
  41+ 88C5 79 00
  42+ 88C7 41 6C 6C 6F  WordAlloys  				DB  "Alloys",0		       ;40
  42+ 88CB 79 73 00
  43+ 88CE 46 69 72 65  WordFirearms  	    		DB  "Firearms",0	       ;41
  43+ 88D2 61 72 6D 73
  43+ 88D6 00
  44+ 88D7 46 75 72 73  WordFurs  		    		DB  "Furs",0	           ;42
  44+ 88DB 00
  45+ 88DC 4D 69 6E 65  WordMinerals  	    		DB  "Minerals",0           ;43
  45+ 88E0 72 61 6C 73
  45+ 88E4 00
  46+ 88E5 47 6F 6C 64  WordGold  		    		DB  "Gold",0	           ;44
  46+ 88E9 00
  47+ 88EA 50 6C 61 74  WordPlatinum  	    		DB  "Platinum",0           ;45
  47+ 88EE 69 6E 75 6D
  47+ 88F2 00
  48+ 88F3 47 65 6D 2D  WordGemStones  				DB  "Gem-Stones",0         ;46
  48+ 88F7 53 74 6F 6E
  48+ 88FB 65 73 00
  49+ 88FE 41 6C 69 65  WordAlienItems      		DB  "Alien Items",0        ;47
  49+ 8902 6E 20 49 74
  49+ 8906 65 6D 73 00
  50+ 890A 54 6F 6E 6E  WordTonnes          		DB  "Tonnes",0             ;48
  50+ 890E 65 73 00
  51+ 8911 4B 69 6C 6F  WordKilograms       		DB  "Kilograms",0          ;49
  51+ 8915 67 72 61 6D
  51+ 8919 73 00
  52+ 891B 47 72 61 6D  WordGrams           		DB  "Grams",0			   ;50
  52+ 891F 73 00
  53+ 8921 53 68 6F 72  WordShort           		DB  "Short",0			   ;51
  53+ 8925 74 00
  54+ 8927 52 61 6E 67  WordRange           		DB  "Range",0			   ;52
  54+ 892B 65 00
  55+ 892D 43 68 61 72  WordChart	        		DB  "Chart",0			   ;53
  55+ 8931 74 00
  56+ 8933 44 61 74 61  WordData					DB	"Data",0			   ;54
  56+ 8937 00
  57+ 8938 4F 6E 00     WordOn						DB  "On",0                 ;55
  58+ 893B 44 69 73 74  WordDistance        		DB  "Distance",0           ;56
  58+ 893F 61 6E 63 65
  58+ 8943 00
  59+ 8944 45 63 6F 6E  WordEconomy         		DB  "Economy",0            ;57
  59+ 8948 6F 6D 79 00
  60+ 894C 47 6F 76 65  WordGovernment      		DB  "Government",0         ;58
  60+ 8950 72 6E 6D 65
  60+ 8954 6E 74 00
  61+ 8957 54 65 63 68  WordTechLevel       		DB  "TechLevel",0          ;59
  61+ 895B 4C 65 76 65
  61+ 895F 6C 00
  62+ 8961 50 6F 70 75  WordPopulation      		DB  "Population",0         ;60
  62+ 8965 6C 61 74 69
  62+ 8969 6F 6E 00
  63+ 896C 4D 69 6C 6C  WordMillion         		DB  "Million",0            ;61
  63+ 8970 69 6F 6E 00
  64+ 8974 42 69 6C 6C  WordBillion         		DB  "Billion",0            ;62
  64+ 8978 69 6F 6E 00
  65+ 897C 47 72 6F 73  WordGross           		DB  "Gross",0              ;63
  65+ 8980 73 00
  66+ 8982 50 72 6F 64  WordProductivity    		DB  "Productivity",0       ;64
  66+ 8986 75 63 74 69
  66+ 898A 76 69 74 79
  66+ 898E 00
  67+ 898F 41 76 65 72  WordAverage         		DB  "Average",0            ;65
  67+ 8993 61 67 65 00
  68+ 8997 52 61 64 69  WordRadius          		DB  "Radius",0             ;66
  68+ 899B 75 73 00
  69+ 899E 4B 4D 00     WordKM              		DB  "KM",0                 ;67
  70+ 89A1 4D 20 43 52  WordMCR             		DB  "M CR",0               ;68
  70+ 89A5 00
  71+ 89A6 52 69 63 68  WordRich					DB  "Rich",0               ;69
  71+ 89AA 00
  72+ 89AB 41 76 67 00  WordAvg         			DB  "Avg",0            	   ;70
  73+ 89AF 4D 61 69 6E  WordMainly          		DB  "Mainly",0             ;71
  73+ 89B3 6C 79 00
  74+ 89B6 50 6F 6F 72  WordPoor            		DB  "Poor",0               ;72
  74+ 89BA 00
  75+ 89BB 49 6E 64 75  WordIndustrial      		DB  "Industrial",0         ;73
  75+ 89BF 73 74 72 69
  75+ 89C3 61 6C 00
  76+ 89C6 41 67 72 69  WordAgricultural    		DB  "Agricultural",0       ;74
  76+ 89CA 63 75 6C 74
  76+ 89CE 75 72 61 6C
  76+ 89D2 00
  77+ 89D3 41 6E 61 72  WordAnarchy                 DB  "Anarchy",0            ;75
  77+ 89D7 63 68 79 00
  78+ 89DB 46 65 75 64  WordFeudal                  DB  "Feudal",0             ;76
  78+ 89DF 61 6C 00
  79+ 89E2 4D 75 6C 74  WordMultiGovernment         DB  "Multi-Government",0   ;77
  79+ 89E6 69 2D 47 6F
  79+ 89EA 76 65 72 6E
  79+ 89EE 6D 65 6E 74
  79+ 89F2 00
  80+ 89F3 44 69 63 74  WordDictatorship            DB  "Dictatorship",0       ;78
  80+ 89F7 61 74 6F 72
  80+ 89FB 73 68 69 70
  80+ 89FF 00
  81+ 8A00 43 6F 6D 6D  WordCommunist               DB  "Communist",0          ;79
  81+ 8A04 75 6E 69 73
  81+ 8A08 74 00
  82+ 8A0A 43 6F 6E 66  WordConfederacy             DB  "Confederacy",0        ;80
  82+ 8A0E 65 64 65 72
  82+ 8A12 61 63 79 00
  83+ 8A16 44 65 6D 6F  WordDemocracy               DB  "Democracy",0          ;81
  83+ 8A1A 63 72 61 63
  83+ 8A1E 79 00
  84+ 8A20 43 6F 72 70  WordCorporate               DB  "Corporate State",0    ;82
  84+ 8A24 6F 72 61 74
  84+ 8A28 65 20 53 74
  84+ 8A2C 61 74 65 00
  85+ 8A30 53 74 61 74  WordState 					DB  "State",0              ;83
  85+ 8A34 65 00
  86+ 8A36 4C 69 67 68  WordLight 					DB  "Light",0              ;84
  86+ 8A3A 74 00
  87+ 8A3C 59 65 61 72  WordYears 					DB  "Years",0              ;85
  87+ 8A40 73 00
  88+ 8A42 30 00        Word0						DB  "0",0				   ;86
  89+ 8A44 4D 61 72 6B  WordMarket					DB  "Market",0			   ;87
  89+ 8A48 65 74 00
  90+ 8A4B 50 72 69 63  WordPrices					DB  "Prices",0			   ;88
  90+ 8A4F 65 73 00
  91+ 8A52 50 72 6F 64  WordProduct    				DB  "Product",0  		   ;89
  91+ 8A56 75 63 74 00
  92+ 8A5A 55 6F 4D 00  WordUoM						DB  "UoM",0                ;90
  93+ 8A5E 50 72 69 63  WordPrice					DB  "Price",0              ;91
  93+ 8A62 65 00
  94+ 8A64 46 6F 72 00  WordFor                     DB  "For",0                ;92
  95+ 8A68 53 61 6C 65  WordSale                    DB  "Sale",0               ;93
  95+ 8A6C 00
  96+ 8A6D 74 00        Wordt						DB  "t",0                  ;94
  97+ 8A6F 6B 67 00     Wordkg						DB  "kg",0                 ;95
  98+ 8A72 67 00        Wordg						DB  "g",0                  ;96
  99+ 8A74 51 75 61 6E  WordQuantity				DB  "Quanitity",0		   ;97
  99+ 8A78 69 74 69 74
  99+ 8A7C 79 00
 100+ 8A7E 49 6E 76 00  WordInv                     DB  "Inv",0                ;98
 101+ 8A82 53 74 6F 63  WordStock                   DB  "Stock",0              ;99
 101+ 8A86 6B 00
 102+ 8A88 45 71 75 69  WordEquip                   DB  "Equip",0              ;100
 102+ 8A8C 70 00
 103+ 8A8E 53 68 69 70  WordShip                    DB  "Ship",0               ;101
 103+ 8A92 00
 104+ 8A93              ;WordMissile                 DB  "Missile",0            ;102
 105+ 8A93 48 79 70 65  WordHyperdrive              DB  "Hyperdrive",0
 105+ 8A97 72 64 72 69
 105+ 8A9B 76 65 00
 106+ 8A9E 4D 69 6C 69  WordMilitary                DB  "Military",0
 106+ 8AA2 74 61 72 79
 106+ 8AA6 00
 107+ 8AA7 41 64 64 65  WordAdder                   DB  "Adder",0
 107+ 8AAB 72 00
 108+ 8AAD 41 6E 61 63  WordAnaconda                DB  "Anaconda",0
 108+ 8AB1 6F 6E 64 61
 108+ 8AB5 00
 109+ 8AB6 41 73 70 5F  WordAsp_Mk_2                DB  "Asp_Mk_2",0
 109+ 8ABA 4D 6B 5F 32
 109+ 8ABE 00
 110+ 8ABF 42 6F 61 00  WordBoa                     DB  "Boa",0
 111+ 8AC3 43 61 72 67  WordCargoType5              DB  "CargoType5",0
 111+ 8AC7 6F 54 79 70
 111+ 8ACB 65 35 00
 112+ 8ACE 42 6F 75 6C  WordBoulder                 DB  "Boulder",0
 112+ 8AD2 64 65 72 00
 113+ 8AD6 41 73 74 65  WordAsteroid                DB  "Asteroid",0
 113+ 8ADA 72 6F 69 64
 113+ 8ADE 00
 114+ 8ADF 42 75 73 68  WordBushmaster              DB  "Bushmaster",0
 114+ 8AE3 6D 61 73 74
 114+ 8AE7 65 72 00
 115+ 8AEA 43 68 61 6D  WordChameleon               DB  "Chameleon",0
 115+ 8AEE 65 6C 65 6F
 115+ 8AF2 6E 00
 116+ 8AF4 43 6F 62 72  WordCobraMk3                DB  "CobraMk3",0
 116+ 8AF8 61 4D 6B 33
 116+ 8AFC 00
 117+ 8AFD 43 6F 62 72  WordCobra_Mk_1              DB  "Cobra_Mk_1",0
 117+ 8B01 61 5F 4D 6B
 117+ 8B05 5F 31 00
 118+ 8B08 43 6F 62 72  WordCobra_Mk_3_P            DB  "Cobra_Mk_3_P",0
 118+ 8B0C 61 5F 4D 6B
 118+ 8B10 5F 33 5F 50
 118+ 8B14 00
 119+ 8B15 43 6F 6E 73  WordConstrictor             DB  "Constrictor",0
 119+ 8B19 74 72 69 63
 119+ 8B1D 74 6F 72 00
 120+ 8B21 43 6F 72 69  WordCoriolis                DB  "Coriolis",0
 120+ 8B25 6F 6C 69 73
 120+ 8B29 00
 121+ 8B2A 43 6F 75 67  WordCougar                  DB  "Cougar",0
 121+ 8B2E 61 72 00
 122+ 8B31 44 6F 64 6F  WordDodo                    DB  "Dodo",0
 122+ 8B35 00
 123+ 8B36 44 72 61 67  WordDragon                  DB  "Dragon",0
 123+ 8B3A 6F 6E 00
 124+ 8B3D 45 73 63 61  WordEscape_Pod              DB  "Escape_Pod",0
 124+ 8B41 70 65 5F 50
 124+ 8B45 6F 64 00
 125+ 8B48 46 65 72 5F  WordFer_De_Lance            DB  "Fer_De_Lance",0
 125+ 8B4C 44 65 5F 4C
 125+ 8B50 61 6E 63 65
 125+ 8B54 00
 126+ 8B55 47 65 63 6B  WordGecko                   DB  "Gecko",0
 126+ 8B59 6F 00
 127+ 8B5B 47 68 61 76  WordGhavial                 DB  "Ghavial",0
 127+ 8B5F 69 61 6C 00
 128+ 8B63 49 67 75 61  WordIguana                  DB  "Iguana",0
 128+ 8B67 6E 61 00
 129+ 8B6A 4B 72 61 69  WordKrait                   DB  "Krait",0
 129+ 8B6E 74 00
 130+ 8B70 4C 6F 67 6F  WordLogo                    DB  "Logo",0
 130+ 8B74 00
 131+ 8B75 4D 61 6D 62  WordMamba                   DB  "Mamba",0
 131+ 8B79 61 00
 132+ 8B7B 4D 69 73 73  WordMissile                 DB  "Missile",0
 132+ 8B7F 69 6C 65 00
 133+ 8B83 4D 6F 6E 69  WordMonitor                 DB  "Monitor",0
 133+ 8B87 74 6F 72 00
 134+ 8B8B 4D 6F 72 61  WordMoray                   DB  "Moray",0
 134+ 8B8F 79 00
 135+ 8B91 4F 70 68 69  WordOphidian                DB  "Ophidian",0
 135+ 8B95 64 69 61 6E
 135+ 8B99 00
 136+ 8B9A 50 6C 61 74  WordPlate                   DB  "Plate",0
 136+ 8B9E 65 00
 137+ 8BA0 50 79 74 68  WordPython                  DB  "Python",0
 137+ 8BA4 6F 6E 00
 138+ 8BA7 50 79 74 68  WordPython_P                DB  "Python_P",0
 138+ 8BAB 6F 6E 5F 50
 138+ 8BAF 00
 139+ 8BB0 52 6F 63 6B  WordRock_Hermit             DB  "Rock_Hermit",0
 139+ 8BB4 5F 48 65 72
 139+ 8BB8 6D 69 74 00
 140+ 8BBC 53 68 75 74  WordShuttleType9            DB  "ShuttleType9",0
 140+ 8BC0 74 6C 65 54
 140+ 8BC4 79 70 65 39
 140+ 8BC8 00
 141+ 8BC9 53 68 75 74  WordShuttle_Mk_2            DB  "Shuttle_Mk_2",0
 141+ 8BCD 74 6C 65 5F
 141+ 8BD1 4D 6B 5F 32
 141+ 8BD5 00
 142+ 8BD6 53 69 64 65  WordSidewinder              DB  "Sidewinder",0
 142+ 8BDA 77 69 6E 64
 142+ 8BDE 65 72 00
 143+ 8BE1 53 70 6C 69  WordSplinter                DB  "Splinter",0
 143+ 8BE5 6E 74 65 72
 143+ 8BE9 00
 144+ 8BEA 54 65 73 74  WordTestVector              DB  "TestVector",0
 144+ 8BEE 56 65 63 74
 144+ 8BF2 6F 72 00
 145+ 8BF5 54 68 61 72  WordThargoid                DB  "Thargoid",0
 145+ 8BF9 67 6F 69 64
 145+ 8BFD 00
 146+ 8BFE 54 68 61 72  WordThargon                 DB  "Thargon",0
 146+ 8C02 67 6F 6E 00
 147+ 8C06 54 72 61 6E  WordTransportType10         DB  "TransportType10",0
 147+ 8C0A 73 70 6F 72
 147+ 8C0E 74 54 79 70
 147+ 8C12 65 31 30 00
 148+ 8C16 56 69 70 65  WordViper                   DB  "Viper",0
 148+ 8C1A 72 00
 149+ 8C1C 57 6F 72 6D  WordWorm                    DB  "Worm",0
 149+ 8C20 00
 150+ 8C21 52 61 74 74  WordRattler                 DB  "Rattler",0
 150+ 8C25 6C 65 72 00
 151+ 8C29
 152+ 8C29 AB 87 AD 87  WordIdx				DW  WordDummy,          WordFront,        WordRight,        WordLeft		;0-3
 152+ 8C2D B3 87 B9 87
 153+ 8C31 BE 87 C3 87  					DW  WordRear,           WordLarge,        WordEscape,       WordPod      	;4-7
 153+ 8C35 C9 87 D0 87
 154+ 8C39 D4 87 DA 87  					DW  WordCargo,          WordBay,          WordFuel,         WordScoops   	;8
 154+ 8C3D DE 87 E3 87
 155+ 8C41 EA 87 F1 87  					DW  WordECM,            WordSystem,       WordEnergy,       WordBomb     	;12
 155+ 8C45 F8 87 FF 87
 156+ 8C49 04 88 0A 88  					DW  WordLaser,          WordPulse,        WordBeam,         WordMiliary  	;16
 156+ 8C4D 10 88 15 88
 157+ 8C51 1D 88 24 88  					DW  WordMining,         WordCustom,       WordUnit,         WordShield   	;20
 157+ 8C55 2B 88 30 88
 158+ 8C59 37 88 3F 88  					DW  WordDocking,        WordComputers,    WordHyperspace,   WordGalactic 	;24
 158+ 8C5D 49 88 54 88
 159+ 8C61 5D 88 63 88  					DW  WordExtra,          WordClean,        WordOffender,     WordFugitive	;28
 159+ 8C65 69 88 72 88
 160+ 8C69 7B 88 80 88  					DW  WordFood,           WordTextiles,     WordRadioactives, WordSlaves		;32
 160+ 8C6D 89 88 96 88
 161+ 8C71 9D 88 AA 88  					DW  WordLiquorWines,    WordLuxuries,     WordNarcotics,    WordMachinery   ;36
 161+ 8C75 B3 88 BD 88
 162+ 8C79 C7 88 CE 88  					DW  WordAlloys,         WordFirearms,     WordFurs,         WordMinerals    ;40
 162+ 8C7D D7 88 DC 88
 163+ 8C81 E5 88 EA 88  					DW  WordGold,           WordPlatinum,     WordGemStones,    WordAlienItems  ;44               ;
 163+ 8C85 F3 88 FE 88
 164+ 8C89 0A 89 11 89  WordIdxUoMFull		DW  WordTonnes,         WordKilograms,    WordGrams,		WordShort		;48
 164+ 8C8D 1B 89 21 89
 165+ 8C91 27 89 2D 89  					DW	WordRange,		    WordChart,        WordData,         WordOn          ;52
 165+ 8C95 33 89 38 89
 166+ 8C99 3B 89 44 89  					DW  WordDistance,       WordEconomy,      WordGovernment,   WordTechLevel   ;56
 166+ 8C9D 4C 89 57 89
 167+ 8CA1 61 89 6C 89  					DW  WordPopulation,     WordMillion,      WordBillion,      WordGross       ;60
 167+ 8CA5 74 89 7C 89
 168+ 8CA9 82 89 8F 89  					DW  WordProductivity,   WordAverage,      WordRadius,       WordKM          ;64
 168+ 8CAD 97 89 9E 89
 169+ 8CB1 A1 89        					DW  WordMCR																	;68
 170+ 8CB3 A6 89 AB 89  WordIdxEconomy		DW  WordRich,           WordAvg,      	  WordMainly,       WordPoor        ;69
 170+ 8CB7 AF 89 B6 89
 171+ 8CBB BB 89 C6 89                      DW  WordIndustrial,     WordAgricultural									;73
 172+ 8CBF D3 89 DB 89  WordIdxGovernment	DW  WordAnarchy,        WordFeudal,       WordMultiGovernment, WordDictatorship ;75
 172+ 8CC3 E2 89 F3 89
 173+ 8CC7 00 8A 0A 8A                      DW  WordCommunist,      WordConfederacy,  WordDemocracy,       WordCorporate ;79
 173+ 8CCB 16 8A 20 8A
 174+ 8CCF 30 8A 36 8A  					DW  WordState,          WordLight,        WordYears,           Word0         ; 83
 174+ 8CD3 3C 8A 42 8A
 175+ 8CD7 44 8A 4B 8A  WordIdxMarketmenu	DW  WordMarket,         WordPrices,       WordProduct,         WordUoM	    ;87
 175+ 8CDB 52 8A 5A 8A
 176+ 8CDF 5E 8A 64 8A                      DW  WordPrice,          WordFor,          WordSale                          ;91
 176+ 8CE3 68 8A
 177+ 8CE5 6D 8A 6F 8A  WordIdxUomAbbrev	DW	Wordt,				Wordkg,           Wordg                 		    ;94
 177+ 8CE9 72 8A
 178+ 8CEB 74 8A 7E 8A  					DW  WordQuantity,       WordInv,          WordStock,           WordEquip	;97
 178+ 8CEF 82 8A 88 8A
 179+ 8CF3 8E 8A 7B 8B                      DW  WordShip,           WordMissile       ; 101
 180+ 8CF7 A7 8A AD 8A  WordIdxShipNames:   DW  WordAdder,          WordAnaconda,     WordAsp_Mk_2,        WordBoa
 180+ 8CFB B6 8A BF 8A
 181+ 8CFF C3 8A CE 8A                      DW  WordCargoType5,     WordBoulder,      WordAsteroid,        WordBushmaster
 181+ 8D03 D6 8A DF 8A
 182+ 8D07 EA 8A F4 8A                      DW  WordChameleon,      WordCobraMk3,     WordCobra_Mk_1,      WordCobra_Mk_3_P
 182+ 8D0B FD 8A 08 8B
 183+ 8D0F 15 8B 21 8B                      DW  WordConstrictor,    WordCoriolis,     WordCougar,          WordDodo
 183+ 8D13 2A 8B 31 8B
 184+ 8D17 36 8B 3D 8B                      DW  WordDragon,         WordEscape_Pod,   WordFer_De_Lance,    WordGecko
 184+ 8D1B 48 8B 55 8B
 185+ 8D1F 5B 8B 63 8B                      DW  WordGhavial,        WordIguana,       WordKrait,           WordLogo
 185+ 8D23 6A 8B 70 8B
 186+ 8D27 75 8B 7B 8B                      DW  WordMamba,          WordMissile,      WordMonitor,         WordMoray
 186+ 8D2B 83 8B 8B 8B
 187+ 8D2F 91 8B 9A 8B                      DW  WordOphidian,       WordPlate,        WordPython,          WordPython_P
 187+ 8D33 A0 8B A7 8B
 188+ 8D37 B0 8B BC 8B                      DW  WordRock_Hermit,    WordShuttleType9, WordShuttle_Mk_2,    WordSidewinder
 188+ 8D3B C9 8B D6 8B
 189+ 8D3F E1 8B EA 8B                      DW  WordSplinter,       WordTestVector,   WordThargoid,        WordThargon
 189+ 8D43 F5 8B FE 8B
 190+ 8D47 06 8C 16 8C                      DW  WordTransportType10,WordViper,        WordWorm,            WordRattler
 190+ 8D4B 1C 8C 21 8C
 191+ 8D4F              ; Phrases
 192+ 8D4F 05 08 09 00  TextLargeCargoBay			DB 	5,8,9,0          ;0
 193+ 8D53 06 07 00     TextEscapePod				DB	6,7,0            ;1
 194+ 8D56 0A 0B 00     TextFuelScoops				DB	10,11,0          ;2
 195+ 8D59 0C 0D 00     TextECMSystem				DB	12,13,0          ;3
 196+ 8D5C 0E 0F 00     TextEnergyBomb				DB	14,15,0          ;4
 197+ 8D5F 0E 16 00     TextEnergyUnit				DB	14,22,0          ;5
 198+ 8D62 18 19 00     TextDockingComp     		DB  24,25,0          ;6
 199+ 8D65 1B 1A 00     TextGalacticHyper			DB	27,26,0          ;7
 200+ 8D68 01 12 10 00  TextFrontLaser      		DB  01,18,16,0       ;8
 201+ 8D6C 03 12 10 00  TextLeftLaser       		DB  03,18,16,0       ;9
 202+ 8D70 02 12 10 00  TextRightLaser      		DB  02,18,16,0       ;10
 203+ 8D74 04 12 10 00  TextRearLaser       		DB  04,18,16,0       ;11
 204+ 8D78 33 34 35 00  TextShortRangeChart 		DB	51,52,53,0       ;12
 205+ 8D7C 1B 35 00     TextGalacticChart   		DB	27,53,0          ;13
 206+ 8D7F 36 37 00     TextDataOn					DB	54,55,0          ;14
 207+ 8D82 45 49 00     TextRichIndustrial          DB  69,73,0          ;15
 208+ 8D85 46 49 00     TextAvgIndustrial           DB  70,73,0			 ;16
 209+ 8D88 47 49 00     TextMainIndustrial          DB  71,73,0          ;17
 210+ 8D8B 48 49 00     TextPoorIndustrial          DB  72,73,0          ;18
 211+ 8D8E 45 4A 00     TextRichAgricultural        DB  69,74,0          ;19
 212+ 8D91 46 4A 00     TextAvgAgricultural         DB  70,74,0          ;20
 213+ 8D94 47 4A 00     TextMainAgricultural        DB  71,74,0          ;21
 214+ 8D97 48 4A 00     TextPoorAgricultural        DB  72,74,0          ;22
 215+ 8D9A 54 55 00     TextLightYears				DB  84,85,0			 ;23
 216+ 8D9D 56 54 55 00  Text0LightYears				DB  86,84,85,0		 ;24
 217+ 8DA1 57 58 00     TextMarketPrices			DB  87,88,0			 ;25
 218+ 8DA4 64 65        TextEquipShip               DB  100,101          ;26
 219+ 8DA6
 220+ 8DA6 00           TextDummy					DB  0
 221+ 8DA7
 222+ 8DA7 4F 8D 53 8D  TextTokens			DW  TextLargeCargoBay, TextEscapePod, TextFuelScoops				; 0 2
 222+ 8DAB 56 8D
 223+ 8DAD 59 8D 5C 8D  					DW  TextECMSystem, TextEnergyBomb, TextEnergyUnit					; 3 5
 223+ 8DB1 5F 8D
 224+ 8DB3 62 8D 65 8D  					DW  TextDockingComp, TextGalacticHyper  							; 6 7
 225+ 8DB7 68 8D 6C 8D  					DW	TextFrontLaser, TextLeftLaser, TextRightLaser, TextRearLaser	; 8 11
 225+ 8DBB 70 8D 74 8D
 226+ 8DBF 78 8D 7C 8D  					DW  TextShortRangeChart, TextGalacticChart, TextDataOn				; 12 14
 226+ 8DC3 7F 8D
 227+ 8DC5 82 8D 85 8D  TextTokenEconomy	DW  TextRichIndustrial, TextAvgIndustrial, TextPoorIndustrial, TextMainIndustrial, TextMainAgricultural, TextRichAgricultural, TextAvgAgricultural,  TextPoorAgricultural
 227+ 8DC9 8B 8D 88 8D
 227+ 8DCD 94 8D 8E 8D
 227+ 8DD1 91 8D 97 8D
 228+ 8DD5 9A 8D        					DW  TextLightYears		                                            ; 21 23
 229+ 8DD7 9D 8D A1 8D  					DW  Text0LightYears, TextMarketPrices
 230+ 8DDB A6 8D        					DW  TextDummy;  25
 231+ 8DDD 00 00 00...  TextBuffer			DS	33
 232+ 8DFE
 233+ 8DFE              TextEconomyOffset   EQU (TextTokenEconomy - TextTokens)/2
 234+ 8DFE              TextGovOffset       EQU (WordIdxGovernment - WordIdx)/2
 235+ 8DFE
 236+ 8DFE              CapitaliseString:
 237+ 8DFE              ; ">CapitaliseString hl = address"
 238+ 8DFE              .CapLoop:
 239+ 8DFE 23           	inc		hl
 240+ 8DFF 7E           	ld		a,(hl)
 241+ 8E00 FE 00        	cp		0
 242+ 8E02 C8           	ret		z
 243+ 8E03 FE 5B        	cp		'Z'+1
 244+ 8E05 30 F7        	jr		nc,.CapLoop
 245+ 8E07 FE 41        	cp		'A'
 246+ 8E09 38 F3        	jr		c,.CapLoop
 247+ 8E0B              .LowerCase:
 248+ 8E0B C6 20        	add		a,'a'-'A'
 249+ 8E0D 77           	ld		(hl),a
 250+ 8E0E 18 EE        	jr		.CapLoop
 251+ 8E10
 252+ 8E10 21 F7 8C     ShipIndexToAddress      ld      hl,WordIdxShipNames
 253+ 8E13 C3 19 8E                             jp      WordLookup
 254+ 8E16
 255+ 8E16 21 29 8C     WordIndexToAddress:     ld		hl,WordIdx
 256+ 8E19 ED 31        WordLookup:             add		hl,a
 257+ 8E1B ED 31                                add		hl,a
 258+ 8E1D D5                                   push	de
 259+ 8E1E 5E                                   ld		e,(hl)
 260+ 8E1F 23                                   inc		hl
 261+ 8E20 56                                   ld		d,(hl)
 262+ 8E21 EB                                   ex		de,hl
 263+ 8E22 D1                                   pop		de
 264+ 8E23 C9                                   ret
 265+ 8E24
 266+ 8E24
 267+ 8E24              expandTokenToString:
 268+ 8E24              ; ">expandTokenToString a = texttoken"
 269+ 8E24 21 A7 8D     	ld		hl,TextTokens
 270+ 8E27 CD 84 87     	call	getTableText
 271+ 8E2A 11 DD 8D     	ld		de,TextBuffer
 272+ 8E2D              .ReadLoop:
 273+ 8E2D 7E           	ld		a,(hl)
 274+ 8E2E FE 00        	cp		0
 275+ 8E30 28 1B        	jr		z,.ReadDone
 276+ 8E32 E5           	push	hl
 277+ 8E33 D5           	push	de
 278+ 8E34 21 29 8C     	ld		hl,WordIdx
 279+ 8E37 CD 84 87     	call	getTableText
 280+ 8E3A D1           	pop		de
 281+ 8E3B              .WordExpandLoop:
 282+ 8E3B 7E           	ld		a,(hl)
 283+ 8E3C FE 00        	cp		0
 284+ 8E3E 28 05        	jr		z,.AddSpace
 285+ 8E40              ;.GetChar:
 286+ 8E40 12           	ld		(de),a
 287+ 8E41 13           	inc		de
 288+ 8E42 23           	inc		hl
 289+ 8E43 18 F6        	jr		.WordExpandLoop
 290+ 8E45              .AddSpace:
 291+ 8E45 3E 20        	ld		a,' '
 292+ 8E47 12           	ld		(de),a
 293+ 8E48 13           	inc		de
 294+ 8E49 E1           	pop		hl
 295+ 8E4A 23           	inc		hl
 296+ 8E4B 18 E0        	jr		.ReadLoop
 297+ 8E4D              .ReadDone:
 298+ 8E4D 1B           	dec		de
 299+ 8E4E AF           	xor		a
 300+ 8E4F 12           	ld		(de),a
 301+ 8E50 C9           	ret
 302+ 8E51
# file closed: ./Tables/dictionary.asm
1090  8E51                  INCLUDE "./Tables/name_digrams.asm"
# file opened: ./Tables/name_digrams.asm
   1+ 8E51 41 42 4F 55  name_digrams	DB "ABOUSEITILETSTONLONUTHNO"
   1+ 8E55 53 45 49 54
   1+ 8E59 49 4C 45 54
   1+ 8E5D 53 54 4F 4E
   1+ 8E61 4C 4F 4E 55
   1+ 8E65 54 48 4E 4F
   2+ 8E69 41 4C 4C     name_digrams2   DB "ALL"
   3+ 8E6C 45 58 45 47  				DB "EXEGEZACEBISOUSESARMAINDIREA"
   3+ 8E70 45 5A 41 43
   3+ 8E74 45 42 49 53
   3+ 8E78 4F 55 53 45
   3+ 8E7C 53 41 52 4D
   3+ 8E80 41 49 4E 44
   3+ 8E84 49 52 45 41
   4+ 8E88 3F 45 52 41  				DB "?ERATENBERALAVETIEDORQUANTEISRION"
   4+ 8E8C 54 45 4E 42
   4+ 8E90 45 52 41 4C
   4+ 8E94 41 56 45 54
   4+ 8E98 49 45 44 4F
   4+ 8E9C 52 51 55 41
   4+ 8EA0 4E 54 45 49
   4+ 8EA4 53 52 49 4F
   4+ 8EA8 4E
   5+ 8EA9
   6+ 8EA9              ; TODO Moveinto galaxy data module
   7+ 8EA9 00 00 00...  name_expanded	DS 32
   8+ 8EC9 00           				DB 0
   9+ 8ECA
  10+ 8ECA
  11+ 8ECA
  12+ 8ECA              NamingLoop:
  13+ 8ECA 3A 31 7F     	ld		a,(WorkingSeeds+5)	; a = first byte of name seed
  14+ 8ECD E6 1F        	and 	$1F					; Keep bottom 5 bits only
  15+ 8ECF FE 00        	cp		0					; 0 = skip 2 chars
  16+ 8ED1 28 12        	jr		z,.SkipPhrase
  17+ 8ED3 C6 0C        	add		a,12
  18+ 8ED5 CB 27        	sla		a					; phrase = (a+12)*2
  19+ 8ED7 21 51 8E     	ld		hl,name_digrams
  20+ 8EDA ED 31        	add		hl,a
  21+ 8EDC ED A0        	ldi
  22+ 8EDE 7E           	ld		a,(hl)
  23+ 8EDF FE 3F        	cp		'?'
  24+ 8EE1 28 02        	jr		z,.SkipPhrase
  25+ 8EE3              .AddExtra:
  26+ 8EE3 ED A0        	ldi
  27+ 8EE5              .SkipPhrase:
  28+ 8EE5 D5           	push	de
  29+ 8EE6 CD 0C 85     	call	working_seed
  30+ 8EE9 D1           	pop		de
  31+ 8EEA C9           	ret
  32+ 8EEB
  33+ 8EEB              ;GetDigramGalaxySeed:
  34+ 8EEB              ;	call	copy_galaxy_to_working
  35+ 8EEB              ;	jr		GetDigramWorkingSeed
  36+ 8EEB              ;GetDigramSystemSeed:
  37+ 8EEB              ;	call	copy_system_to_working
  38+ 8EEB              ;GetDigramWorkingSeed:
  39+ 8EEB              ;; ">GetDigram a = digram seed"
  40+ 8EEB              ;	ld		de,name_expanded
  41+ 8EEB              ;	ld		b,3
  42+ 8EEB              ;	ld		a,(WorkingSeeds)
  43+ 8EEB              ;	and		$40
  44+ 8EEB              ;	jr		z,.SmallSizeName
  45+ 8EEB              ;.LargeSizeName:
  46+ 8EEB              ;	call	NamingLoop
  47+ 8EEB              ;.SmallSizeName:
  48+ 8EEB              ;	call	NamingLoop
  49+ 8EEB              ;	call	NamingLoop
  50+ 8EEB              ;	call	NamingLoop
  51+ 8EEB              ;.DoneName:
  52+ 8EEB              ;	ex		de,hl
  53+ 8EEB              ;	ld		(hl),0
  54+ 8EEB              ;	ex		de,hl
  55+ 8EEB              ;	ret
  56+ 8EEB
  57+ 8EEB
  58+ 8EEB
  59+ 8EEB              ;GetDigramWorkingSeed:
  60+ 8EEB              ;	MESSAGE ">GetDigram a = digram seed b = length"
  61+ 8EEB              ;	ld		b,5					; working seed
  62+ 8EEB              ;	ld		de,name_expanded
  63+ 8EEB              ;.ExpansionLoop:
  64+ 8EEB              ;	push	bc
  65+ 8EEB              ;	ld		hl,WorkingSeeds
  66+ 8EEB              ;	ld		a,b
  67+ 8EEB              ;	add		hl,a
  68+ 8EEB              ;	ld		a,(hl)	; a = first byte of name seed
  69+ 8EEB              ;	and 	$1F					; Keep bottom 5 bits only
  70+ 8EEB              ;	cp		0					; 0 = skip 2 chars
  71+ 8EEB              ;	jr		z,.SkipPhrase
  72+ 8EEB              ;	or		&80					; set buit 7 high (probabtyl capitalisation)
  73+ 8EEB              ;	call	TT27
  74+ 8EEB              ;.SkipPhrase:
  75+ 8EEB              ;	push	de
  76+ 8EEB              ;	call	next_working_seed
  77+ 8EEB              ;	pop		de
  78+ 8EEB              ;	pop		bc
  79+ 8EEB              ;	djnz	GetDigramWorkingSeed
  80+ 8EEB              ;.DoneName:
  81+ 8EEB              ;	ex		de,hl
  82+ 8EEB              ;	ld		(hl),0
  83+ 8EEB              ;	ex		de,hl
  84+ 8EEB              ;	ret
  85+ 8EEB              ;
  86+ 8EEB              ;ExpandToken:
  87+ 8EEB              ;	DE = target
  88+ 8EEB              ;	a = token
  89+ 8EEB              ;
  90+ 8EEB              ;PlanetDigram:
  91+ 8EEB              ;	cp		&A0							; >- 160
  92+ 8EEB              ;	jr		c,MorePage4
  93+ 8EEB              ;	and		$7F							; 128 to 159 now 0 to 31
  94+ 8EEB              ;	asl		2							; Multiply by 2
  95+ 8EEB              ;	ld		hl, name_digrams2
  96+ 8EEB              ;	add		hl,a
  97+ 8EEB              ;	ld		a,(hl)
  98+ 8EEB              ;	call	ProcessTextToken
  99+ 8EEB              ;	inc		hl
 100+ 8EEB              ;	ld		a,(hl)
 101+ 8EEB              ;	cp		'?'
 102+ 8EEB              ;	ret		z
 103+ 8EEB              ;	call	ProcessTextToken
 104+ 8EEB              ;	ret
 105+ 8EEB              ;MorePage4:
 106+ 8EEB              ;	sub		$A0
 107+ 8EEB              ;ExtraTokenCheck:
 108+ 8EEB              ;	push	de							; save target address
 109+ 8EEB              ;	push	bc
 110+ 8EEB              ;	ld		b,a
 111+ 8EEB              ;	ld		hl,varV
 112+ 8EEB              ;	ld		(VarV),0400
 113+ 8EEB              ;	ld		(varV),a
 114+ 8EEB              ;	ld
 115+ 8EEB              ;
 116+ 8EEB              ;		.TT43	\ Token > 127 page4 token or planet digram.
 117+ 8EEB              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 118+ 8EEB              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 119+ 8EEB              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 120+ 8EEB              ;0A                      ASL A		      \ *= 2
 121+ 8EEB              ;A8                      TAY 		      \ digram index = 0to62
 122+ 8EEB              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 123+ 8EEB              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 124+ 8EEB              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 125+ 8EEB              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 126+ 8EEB              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 127+ 8EEB              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 128+ 8EEB              ;
 129+ 8EEB              ;	.TT47	\ more page4, subtract #160
 130+ 8EEB              ;E9 A0                   SBC #&A0	\ -= 160
 131+ 8EEB              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 132+ 8EEB              ;AA                      TAX 		\ copy of word index
 133+ 8EEB              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 134+ 8EEB              ;85 22                   STA &22		\ V
 135+ 8EEB              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 136+ 8EEB              ;85 23                   STA &23		\ V+1
 137+ 8EEB              ;A0 00                   LDY #0
 138+ 8EEB              ;8A                      TXA 		\ token = word index
 139+ 8EEB              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 140+ 8EEB              ;	.TT51	\ counters Y letter, X token
 141+ 8EEB              ;B1 22                   LDA (&22),Y	\ (V),Y
 142+ 8EEB              ;F0 07                   BEQ TT49	\ exit as word ended
 143+ 8EEB              ;C8                      INY 		\ letter count
 144+ 8EEB              ;D0 F9                   BNE TT51	\ loop Y
 145+ 8EEB              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 146+ 8EEB              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 147+ 8EEB              ;	.TT49	\ word ended
 148+ 8EEB              ;C8                      INY
 149+ 8EEB              ;D0 02                   BNE TT59    	\ next word
 150+ 8EEB              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 151+ 8EEB              ;	.TT59	\ next word
 152+ 8EEB              ;CA                      DEX 		\ token count
 153+ 8EEB              ;D0 ED                   BNE TT51	\ loop X token
 154+ 8EEB              ;	.TT50	\ token X = 0, counter Y offset to word correct
 155+ 8EEB              ;98                      TYA
 156+ 8EEB              ;48                      PHA 		\ store Yindex
 157+ 8EEB              ;A5 23                   LDA &23		\ V+1
 158+ 8EEB              ;48                      PHA 		\ correct pointer hi
 159+ 8EEB              ;B1 22                   LDA (&22),Y 	\ (V),Y
 160+ 8EEB              ;49 23                   EOR #&23	\ decode '#'
 161+ 8EEB              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 162+ 8EEB              ;68                      PLA 		\ restore this depth's Vhi
 163+ 8EEB              ;85 23                   STA &23		\ V+1
 164+ 8EEB              ;68                      PLA
 165+ 8EEB              ;A8                      TAY 		\ restore this depth's Yindex
 166+ 8EEB              ;C8                      INY 		\ next letter
 167+ 8EEB              ;D0 02                   BNE P%+4	\ not zero so skip next page
 168+ 8EEB              ;E6 23                   INC &23		\ V+1
 169+ 8EEB              ;B1 22                   LDA (&22),Y	\ (V),Y
 170+ 8EEB              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 171+ 8EEB              ;	.TT48 	\ rts
 172+ 8EEB              ;60                      RTS 		\ end of flight token printing TT27
 173+ 8EEB              ;
 174+ 8EEB              ;
 175+ 8EEB              ;
 176+ 8EEB              ;
 177+ 8EEB              ;
 178+ 8EEB              ;
 179+ 8EEB              ;		.TT27	\ -> &36E0 \ process flight text Token in Acc
 180+ 8EEB              ;;AA                      TAX		\ copy token to count down
 181+ 8EEB              ;;F0 DE                   BEQ csh		\ Acc = 0, up to Cash
 182+ 8EEB              ;30 74                   BMI TT43	\ if token is >  127 down, page4 token or digram
 183+ 8EEB              ;CA                      DEX
 184+ 8EEB              ;F0 BC                   BEQ tal		\ Acc == 1, up, print Galaxy number.
 185+ 8EEB              ;CA                      DEX
 186+ 8EEB              ;F0 A3                   BEQ ypl		\ Acc == 2, up, present planet in QQ2.
 187+ 8EEB              ;CA                      DEX
 188+ 8EEB              ;D0 03                   BNE P%+5	\ hop over, else X == 0
 189+ 8EEB              ;4C 0A 33                JMP &330A \ cpl \ Acc = 3 print Planet name for seed QQ15
 190+ 8EEB              ;CA                      DEX
 191+ 8EEB              ;F0 8A                   BEQ cmn		\ Acc == 4, up, commander name.
 192+ 8EEB              ;CA                      DEX
 193+ 8EEB              ;F0 B5                   BEQ fwl		\ Acc == 5, up, fuel followed by cash.
 194+ 8EEB              ;CA                      DEX
 195+ 8EEB              ;D0 05                   BNE  P%+7	\ hop over, else X == 0
 196+ 8EEB              ;A9 80                   LDA #&80	\ Acc == 6, set bit 7 TT27m
 197+ 8EEB              ;85 72                   STA &72	 	\ QQ17
 198+ 8EEB              ;60                      RTS
 199+ 8EEB              ;CA                      DEX 		\ skip Acc ==7
 200+ 8EEB              ;CA                      DEX
 201+ 8EEB              ;D0 03                   BNE P%+5	\ hop over to continue Acc 9to127
 202+ 8EEB              ;86 72                   STX &72	 \ QQ17	\ else Acc ==8, QQ17 set to X = 0
 203+ 8EEB              ;60                      RTS
 204+ 8EEB              ;CA                      DEX 		\ continue 9to127 tokens
 205+ 8EEB              ;F0 38                   BEQ crlf	\ Acc == 9, down, colon on right.
 206+ 8EEB              ;C9 60                   CMP #&60	\ discard X, look at Acc = token >= 96
 207+ 8EEB              ;B0 66                   BCS ex   	\ extra >= #&60, far down
 208+ 8EEB              ;C9 0E                   CMP #14		\ < 14 ?
 209+ 8EEB              ;90 04                   BCC P%+6	\ goes to Token < 14 or > 31
 210+ 8EEB              ;C9 20                   CMP #32		\ < 32 ?
 211+ 8EEB              ;90 28                   BCC qw   	\ 14 <= token A < 32 becomes 128to145 page4 digram
 212+ 8EEB              ;		\ Token  < 14 or > 31
 213+ 8EEB              ;A6 72                   LDX &72	 	\ QQ17
 214+ 8EEB              ;F0 3D                   BEQ TT74 	\ if QQ17 = 0 Upper case, jmp TT26, print character.
 215+ 8EEB              ;30 11                   BMI TT41 	\ if bit7 set
 216+ 8EEB              ;24 72                   BIT &72		\ QQ17 has bit6 set too
 217+ 8EEB              ;70 30                   BVS TT46 	\ If only bit6 set, clear bit6 and print as Upper
 218+ 8EEB              ;	.TT42	\ Uppercase to lowercase
 219+ 8EEB              ;C9 41                   CMP #&41	\ < ascii 'A'
 220+ 8EEB              ;90 06                   BCC TT44 	\ jmp TT26, print character
 221+ 8EEB              ;C9 5B                   CMP #&5B	\ >= ascii 'Z'+1
 222+ 8EEB              ;B0 02                   BCS TT44 	\ jmp TT26, print character
 223+ 8EEB              ;69 20                   ADC #&20	\ else Upper to lowercase
 224+ 8EEB              ;	.TT44	\ print character as is with TT26
 225+ 8EEB              ;4C FC 1E                JMP &1EFC \ TT26 \ print character
 226+ 8EEB              ;
 227+ 8EEB              ;	.TT41	\ QQ17 bit7 set
 228+ 8EEB              ;24 72                   BIT &72		\ QQ17
 229+ 8EEB              ;70 17                   BVS TT45	\ bit6 set too, Nothing or lower.
 230+ 8EEB              ;C9 41                   CMP #&41	\ < ascii 'A'
 231+ 8EEB              ;90 22                   BCC TT74 	\ print as is using TT26
 232+ 8EEB              ;48                      PHA 		\ else store token Acc
 233+ 8EEB              ;8A                      TXA 		\ QQ17 copy
 234+ 8EEB              ;09 40                   ORA #&40	\ set bit6 in QQ17 so subsequent ones lower
 235+ 8EEB              ;85 72                   STA &72	 	\ QQ17
 236+ 8EEB              ;68                      PLA 		\ restore token
 237+ 8EEB              ;D0 EC                   BNE TT44	\ guaranteed up, print as Uppercase with TT26.
 238+ 8EEB              ;
 239+ 8EEB              ;	.qw	\ Acc = 14to31 becomes 128to145 page4 digram
 240+ 8EEB              ;69 72                   ADC #&72	\ A+=114 becomes 128to145 page4 digram
 241+ 8EEB              ;D0 32                   BNE ex		\ guaranteed down, extra.
 242+ 8EEB              ;
 243+ 8EEB              ;	.crlf	\ Acc == 9,  colon on right
 244+ 8EEB              ;A9 15                   LDA #21		\ on right
 245+ 8EEB              ;85 2C                   STA &2C		\ XC
 246+ 8EEB              ;D0 97                   BNE TT73	\ guaranteed up, print colon.
 247+ 8EEB              ;
 248+ 8EEB              ;	.TT45	\ QQ17 bits 7,6 set. Nothing or lower.
 249+ 8EEB              ;E0 FF                   CPX #&FF	\ if QQ17 = #&FF
 250+ 8EEB              ;F0 63                   BEQ TT48	\ rts
 251+ 8EEB              ;C9 41                   CMP #&41	\ >= ascii 'A' ?
 252+ 8EEB              ;B0 D0                   BCS TT42	\ Uppercase to lowercase, up.
 253+ 8EEB              ;	.TT46	\ clear bit6 QQ17 and print as is using TT26
 254+ 8EEB              ;48                      PHA 		\ push token
 255+ 8EEB              ;8A                      TXA 		\ QQ17 copy
 256+ 8EEB              ;29 BF                   AND #&BF	\ clear bit6
 257+ 8EEB              ;85 72                   STA &72	 	\ QQ17
 258+ 8EEB              ;68                      PLA 		\ pull token
 259+ 8EEB              ;	.TT74	\ TT26, print character.
 260+ 8EEB              ;4C FC 1E                JMP &1EFC	\ TT26
 261+ 8EEB              ;
 262+ 8EEB              ;	.TT43	\ Token > 127 page4 token or planet digram.
 263+ 8EEB              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 264+ 8EEB              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 265+ 8EEB              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 266+ 8EEB              ;0A                      ASL A		      \ *= 2
 267+ 8EEB              ;A8                      TAY 		      \ digram index = 0to62
 268+ 8EEB              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 269+ 8EEB              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 270+ 8EEB              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 271+ 8EEB              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 272+ 8EEB              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 273+ 8EEB              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 274+ 8EEB              ;
 275+ 8EEB              ;	.TT47	\ more page4, subtract #160
 276+ 8EEB              ;E9 A0                   SBC #&A0	\ -= 160
 277+ 8EEB              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 278+ 8EEB              ;AA                      TAX 		\ copy of word index
 279+ 8EEB              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 280+ 8EEB              ;85 22                   STA &22		\ V
 281+ 8EEB              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 282+ 8EEB              ;85 23                   STA &23		\ V+1
 283+ 8EEB              ;A0 00                   LDY #0
 284+ 8EEB              ;8A                      TXA 		\ token = word index
 285+ 8EEB              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 286+ 8EEB              ;	.TT51	\ counters Y letter, X token
 287+ 8EEB              ;B1 22                   LDA (&22),Y	\ (V),Y
 288+ 8EEB              ;F0 07                   BEQ TT49	\ exit as word ended
 289+ 8EEB              ;C8                      INY 		\ letter count
 290+ 8EEB              ;D0 F9                   BNE TT51	\ loop Y
 291+ 8EEB              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 292+ 8EEB              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 293+ 8EEB              ;	.TT49	\ word ended
 294+ 8EEB              ;C8                      INY
 295+ 8EEB              ;D0 02                   BNE TT59    	\ next word
 296+ 8EEB              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 297+ 8EEB              ;	.TT59	\ next word
 298+ 8EEB              ;CA                      DEX 		\ token count
 299+ 8EEB              ;D0 ED                   BNE TT51	\ loop X token
 300+ 8EEB              ;	.TT50	\ token X = 0, counter Y offset to word correct
 301+ 8EEB              ;98                      TYA
 302+ 8EEB              ;48                      PHA 		\ store Yindex
 303+ 8EEB              ;A5 23                   LDA &23		\ V+1
 304+ 8EEB              ;48                      PHA 		\ correct pointer hi
 305+ 8EEB              ;B1 22                   LDA (&22),Y 	\ (V),Y
 306+ 8EEB              ;49 23                   EOR #&23	\ decode '#'
 307+ 8EEB              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 308+ 8EEB              ;68                      PLA 		\ restore this depth's Vhi
 309+ 8EEB              ;85 23                   STA &23		\ V+1
 310+ 8EEB              ;68                      PLA
 311+ 8EEB              ;A8                      TAY 		\ restore this depth's Yindex
 312+ 8EEB              ;C8                      INY 		\ next letter
 313+ 8EEB              ;D0 02                   BNE P%+4	\ not zero so skip next page
 314+ 8EEB              ;E6 23                   INC &23		\ V+1
 315+ 8EEB              ;B1 22                   LDA (&22),Y	\ (V),Y
 316+ 8EEB              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 317+ 8EEB              ;	.TT48 	\ rts
 318+ 8EEB              ;60                      RTS 		\ end of flight token printing TT27
 319+ 8EEB              ;
 320+ 8EEB              ;
 321+ 8EEB              ;
# file closed: ./Tables/name_digrams.asm
1091  8EEB              ;INCLUDE "Tables/inwk_table.asm" This is no longer needed as we will write to univer object bank
1092  8EEB              ; Include all maths libraries to test assembly
1093  8EEB                  ;INCLUDE "./Maths/asm_add.asm"
1094  8EEB                  ;INCLUDE "./Maths/asm_subtract.asm"
1095  8EEB                  INCLUDE "./Maths/Utilities/AddDEToCash.asm"
# file opened: ./Maths/Utilities/AddDEToCash.asm
   1+ 8EEB              ; Note its big endian
   2+ 8EEB 2A FC 83     addDEtoCash:            ld      hl,(Cash)
   3+ 8EEE 19                                   add     hl,de
   4+ 8EEF 22 FC 83                             ld      (Cash),hl
   5+ 8EF2 11 00 00                             ld      de,0
   6+ 8EF5 2A FE 83                             ld      hl,(Cash+2)
   7+ 8EF8 ED 5A                                adc     hl,de
   8+ 8EFA 22 FE 83                             ld      (Cash+2),hl
   9+ 8EFD C9                                   ret
  10+ 8EFE
  11+ 8EFE 2A FC 83     subDEfromCash:          ld      hl,(Cash)
  12+ 8F01 7C                                   ld      a,h
  13+ 8F02 B5                                   or      l
  14+ 8F03 2A FE 83                             ld      hl,(Cash+2)
  15+ 8F06 B4                                   or      h
  16+ 8F07 B5                                   or      l
  17+ 8F08 C8                                   ret     z               ; No cash return
  18+ 8F09 B7                                   or      a
  19+ 8F0A 2A FC 83                             ld      hl,(Cash)
  20+ 8F0D ED 52                                sbc     hl,de
  21+ 8F0F 22 FC 83                             ld      (Cash),hl
  22+ 8F12 11 00 00                             ld      de,0
  23+ 8F15 2A FE 83                             ld      hl,(Cash+2)
  24+ 8F18 ED 52                                sbc     hl,de
  25+ 8F1A 22 FE 83                             ld      (Cash+2),hl
  26+ 8F1D                                      JumpOnBitSet h,7,.ZeroCash
  26+ 8F1D CB 7C       >                        bit 	7,h
  26+ 8F1F C2 23 8F    >                        jp      nz,.ZeroCash
  27+ 8F22 C9                                   ret
  28+ 8F23 21 00 00     .ZeroCash:              ld      hl,0
  29+ 8F26 22 FC 83                             ld      (Cash),hl
  30+ 8F29 22 FE 83                             ld      (Cash+2),hl
  31+ 8F2C C9                                   ret
  32+ 8F2D
# file closed: ./Maths/Utilities/AddDEToCash.asm
1096  8F2D                  INCLUDE "./Maths/DIVD3B2.asm"
# file opened: ./Maths/DIVD3B2.asm
   1+ 8F2D              ;INPUTS: ahl = dividend cde = divisor
   2+ 8F2D              ;OUTPUTS: cde = quotient ahl = remainder
   3+ 8F2D 47           Div24by24:              ld b,a
   4+ 8F2E E5                                   push hl
   5+ 8F2F DD E1                                pop ix
   6+ 8F31 2E 18                                ld l,24
   7+ 8F33 E5                                   push hl
   8+ 8F34 AF                                   xor a
   9+ 8F35 67                                   ld h,a
  10+ 8F36 6F                                   ld l,a
  11+ 8F37 DD 29        .Div24by24loop:         add ix,ix
  12+ 8F39 CB 10                                rl b
  13+ 8F3B ED 6A                                adc hl,hl
  14+ 8F3D 17                                   rla
  15+ 8F3E B9                                   cp c
  16+ 8F3F 38 0C                                jr c,.Div24by24skip
  17+ 8F41 20 05                                jr nz,.Div24by24setbit
  18+ 8F43 ED 52                                sbc hl,de
  19+ 8F45 19                                   add hl,de
  20+ 8F46 38 05                                jr c,.Div24by24skip
  21+ 8F48 ED 52        .Div24by24setbit:       sbc hl,de
  22+ 8F4A 99                                   sbc a,c
  23+ 8F4B DD 23                                inc ix
  24+ 8F4D E3           .Div24by24skip:         ex (sp),hl
  25+ 8F4E 2D                                   dec l
  26+ 8F4F E3                                   ex (sp),hl
  27+ 8F50 20 E5                                jr nz,.Div24by24loop
  28+ 8F52 D1                                   pop de
  29+ 8F53 48                                   ld c,b
  30+ 8F54 DD E5                                push ix
  31+ 8F56 D1                                   pop de
  32+ 8F57 C9                                   ret
  33+ 8F58
  34+ 8F58 FD 67        Div24by24ASigned:       ld      iyh,a
  35+ 8F5A E6 7F                                and     SignMask8Bit
  36+ 8F5C CD 2D 8F                             call    Div24by24
  37+ 8F5F F5                                   push    af
  38+ 8F60 FD 7C                                ld      a,iyh
  39+ 8F62 E6 80                                and     SignOnly8Bit
  40+ 8F64 B1                                   or      c
  41+ 8F65 4F                                   ld      c,a
  42+ 8F66 F1                                   pop     af
  43+ 8F67 C9                                   ret
  44+ 8F68
  45+ 8F68                                      ; CDE = AHL/CDE, AHL = remainder
  46+ 8F68 FD 67        Div24by24LeadSign:      ld      iyh,a           ; Preserve signed in IYL
  47+ 8F6A A9                                   xor     c               ; flip sign if negative
  48+ 8F6B E6 80                                and     SignOnly8Bit    ; .
  49+ 8F6D FD 6F                                ld      iyl,a           ; .
  50+ 8F6F 79                                   ld      a,c             ; make both values ABS
  51+ 8F70 E6 7F                                and     SignMask8Bit    ; .
  52+ 8F72 4F                                   ld      c,a             ; .
  53+ 8F73 FD 7C                                ld      a,iyh           ; .
  54+ 8F75 E6 7F                                and     SignMask8Bit    ; .
  55+ 8F77 CD 2D 8F                             call    Div24by24       ; do abs divide
  56+ 8F7A FD B5                                or      iyl             ; bring in sign bit
  57+ 8F7C FD 67                                ld      iyh,a           ; save a
  58+ 8F7E 79                                   ld      a,c             ; sort sign for c
  59+ 8F7F FD B5                                or      iyl             ;
  60+ 8F81 4F                                   ld      c,a             ;
  61+ 8F82 FD 7C                                ld      a,iyh           ; sort sign of a
  62+ 8F84 C9                                   ret
  63+ 8F85
  64+ 8F85              ; --------------------------------------------------------------
  65+ 8F85              ;divdide by 16 using undocumented instrunctions
  66+ 8F85              ;Input: BC = Dividend, DE = Divisor, HL = 0
  67+ 8F85              ;Output: BC = Quotient, HL = Remainder
  68+ 8F85 47           PROJ256mulAdivQ:        ld      b,a
  69+ 8F86 0E 00                                ld      c,0
  70+ 8F88 16 00                                ld      d,0
  71+ 8F8A 3A 9C 7E                             ld      a,(varQ)
  72+ 8F8D 5F                                   ld      e,a
  73+ 8F8E 21 00 00     PROJDIV16UNDOC:         ld      hl,0
  74+ 8F91 78                                   ld      a,b
  75+ 8F92 06 10                                ld      b,16
  76+ 8F94 CB 31        PROJDIV16UNDOCLOOP:     sll     c       ; unroll 16 times
  77+ 8F96 17                                   rla             ; ...
  78+ 8F97 ED 6A                                adc     hl,hl       ; ...
  79+ 8F99 ED 52                                sbc     hl,de       ; ...
  80+ 8F9B 30 02                                jr      nc,PROJDIV16UNDOCSKIP       ; ...
  81+ 8F9D 19                                   add     hl,de       ; ...
  82+ 8F9E 0D                                   dec     c       ; ...
  83+ 8F9F 10 F3        PROJDIV16UNDOCSKIP:     djnz    PROJDIV16UNDOCLOOP
  84+ 8FA1 79                                   ld      a,c
  85+ 8FA2 32 9D 7E                             ld      (varR),a
  86+ 8FA5 C9                                   ret
  87+ 8FA6
  88+ 8FA6
  89+ 8FA6
  90+ 8FA6
# file closed: ./Maths/DIVD3B2.asm
1097  8FA6                  INCLUDE "./Maths/multiply.asm"
# file opened: ./Maths/multiply.asm
   1+ 8FA6              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
   2+ 8FA6 2A 9D 7E                             ld  hl,(varRS)
   3+ 8FA9 3A 9C 7E                             ld  a,(varQ)
   4+ 8FAC C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
   5+ 8FAE 11 00 00                             ld  de,0        ; de = XY
   6+ 8FB1 47                                   ld  b,a         ; b = Q
   7+ 8FB2                                      ShiftHLRight1
   7+ 8FB2 CB 3C       >			   srl h
   7+ 8FB4 CB 1D       >			   rr  l
   8+ 8FB6 CB 20                                sla b
   9+ 8FB8 30 03                                jr  nc,.LL126
  10+ 8FBA EB           .LL125:                 ex de,hl
  11+ 8FBB 19                                   add hl,de
  12+ 8FBC EB                                   ex  de,hl       ; de = de + rs
  13+ 8FBD              .LL126:                 ShiftHLRight1
  13+ 8FBD CB 3C       >			   srl h
  13+ 8FBF CB 1D       >			   rr  l
  14+ 8FC1 CB 20                                sla b
  15+ 8FC3 38 F5                                jr      c,.LL125
  16+ 8FC5 20 F6                                jr      nz,.LL126
  17+ 8FC7 EB                                   ex      de,hl   ; hl = result
  18+ 8FC8 D1 C1                                pop     bc,,de
  19+ 8FCA C9                                   ret
  20+ 8FCB
  21+ 8FCB              ; FMLTU - A = A * Q / 256
  22+ 8FCB 57           AequAmulQdiv256usgn:    ld      d,a
  23+ 8FCC 3A 9C 7E                             ld      a,(varQ)
  24+ 8FCF 5F                                   ld      e,a
  25+ 8FD0              asm_defmutl:
  26+ 8FD0              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=D*E/256unsg  Fast multiply"
  27+ 8FD0 ED 30        AequDmulEdiv256usgn:    mul     de
  28+ 8FD2 7A                                   ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  29+ 8FD3 C9                                   ret
  30+ 8FD4
  31+ 8FD4
  32+ 8FD4
  33+ 8FD4
  34+ 8FD4
  35+ 8FD4              MacroDEEquQmulASigned:  MACRO
  36+ 8FD4 ~                                    ld      d,a                         ; save a into d
  37+ 8FD4 ~                                    ld      a,(varQ)
  38+ 8FD4 ~                                    ld      e,a
  39+ 8FD4 ~                                    xor     d                           ; a = a xor var Q
  40+ 8FD4 ~                                    and     SignOnly8Bit
  41+ 8FD4 ~                                    ld      b,a                         ; b = sign of a xor q
  42+ 8FD4 ~                                    ld      a,d                         ; d = abs d (or a reg)
  43+ 8FD4 ~                                    and     SignMask8Bit
  44+ 8FD4 ~                                    ld      d,a
  45+ 8FD4 ~                                    ld      a,e                         ; e = abs e (or varQ)
  46+ 8FD4 ~                                    and     SignMask8Bit
  47+ 8FD4 ~                                    ld      e,a
  48+ 8FD4 ~                                    mul                                 ; de = a * Q
  49+ 8FD4 ~                                    ld      a,d
  50+ 8FD4 ~                                    or      b                           ; de = a * Q leading sign bit
  51+ 8FD4 ~                                    ld      d,a
  52+ 8FD4                                      ENDM
  53+ 8FD4
  54+ 8FD4
  55+ 8FD4
  56+ 8FD4                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
  57+ 8FD4              madXAequQmulAaddRS:     MacroDEEquQmulASigned
  57+ 8FD4 57          >                        ld      d,a                         ; save a into d
  57+ 8FD5 3A 9C 7E    >                        ld      a,(varQ)
  57+ 8FD8 5F          >                        ld      e,a
  57+ 8FD9 AA          >                        xor     d                           ; a = a xor var Q
  57+ 8FDA E6 80       >                        and     SignOnly8Bit
  57+ 8FDC 47          >                        ld      b,a                         ; b = sign of a xor q
  57+ 8FDD 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  57+ 8FDE E6 7F       >                        and     SignMask8Bit
  57+ 8FE0 57          >                        ld      d,a
  57+ 8FE1 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  57+ 8FE2 E6 7F       >                        and     SignMask8Bit
  57+ 8FE4 5F          >                        ld      e,a
  57+ 8FE5 ED 30       >                        mul                                 ; de = a * Q
  57+ 8FE7 7A          >                        ld      a,d
  57+ 8FE8 B0          >                        or      b                           ; de = a * Q leading sign bit
  57+ 8FE9 57          >                        ld      d,a
  58+ 8FEA 2A 9D 7E                             ld		hl,(varR)
  59+ 8FED CD 15 90                             call	madXAAddHLDESigned
  60+ 8FF0 EB                                   ex      de,hl                       ; de = R.S + DE
  61+ 8FF1                                      ClearCarryFlag
  61+ 8FF1 B7          >                        or a
  62+ 8FF2 DD 6B                                ld      ixl,e
  63+ 8FF4 7A                                   ld      a,d
  64+ 8FF5 C9                                   ret
  65+ 8FF6
  66+ 8FF6              madDEequQmulAaddRS:     MacroDEEquQmulASigned
  66+ 8FF6 57          >                        ld      d,a                         ; save a into d
  66+ 8FF7 3A 9C 7E    >                        ld      a,(varQ)
  66+ 8FFA 5F          >                        ld      e,a
  66+ 8FFB AA          >                        xor     d                           ; a = a xor var Q
  66+ 8FFC E6 80       >                        and     SignOnly8Bit
  66+ 8FFE 47          >                        ld      b,a                         ; b = sign of a xor q
  66+ 8FFF 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  66+ 9000 E6 7F       >                        and     SignMask8Bit
  66+ 9002 57          >                        ld      d,a
  66+ 9003 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  66+ 9004 E6 7F       >                        and     SignMask8Bit
  66+ 9006 5F          >                        ld      e,a
  66+ 9007 ED 30       >                        mul                                 ; de = a * Q
  66+ 9009 7A          >                        ld      a,d
  66+ 900A B0          >                        or      b                           ; de = a * Q leading sign bit
  66+ 900B 57          >                        ld      d,a
  67+ 900C 2A 9D 7E                             ld		hl,(varR)
  68+ 900F CD 15 90                             call	madXAAddHLDESigned
  69+ 9012 EB                                   ex      de,hl                       ; de = R.S + DE
  70+ 9013                                      ClearCarryFlag
  70+ 9013 B7          >                        or a
  71+ 9014 C9                                   ret
  72+ 9015
  73+ 9015 7C           madXAAddHLDESigned:     ld      a,h
  74+ 9016 E6 80                                and     SignOnly8Bit
  75+ 9018 47                                   ld      b,a                         ;save sign bit in b
  76+ 9019 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  77+ 901A                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
  77+ 901A FA 32 90    >                        jp		m, .ADDHLDEOppSGN
  78+ 901D 78           .ADDHLDESameSigns:       ld      a,b
  79+ 901E B2                                   or      d
  80+ 901F                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
  80+ 901F FA 24 90    >                        jp		m, .ADDHLDESameNeg
  81+ 9022 19                                   add     hl,de
  82+ 9023 C9                                   ret
  83+ 9024 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  84+ 9025 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  85+ 9027 67                                   ld      h,a
  86+ 9028 7A                                   ld      a,d
  87+ 9029 E6 7F                                and     SignMask8Bit
  88+ 902B 57                                   ld      d,a
  89+ 902C 19                                   add     hl,de
  90+ 902D 3E 80                                ld      a,SignOnly8Bit
  91+ 902F B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  92+ 9030 67                                   ld      h,a
  93+ 9031 C9                                   ret
  94+ 9032 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  95+ 9033 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  96+ 9035 67                                   ld      h,a
  97+ 9036 7A                                   ld      a,d
  98+ 9037 E6 7F                                and     SignMask8Bit
  99+ 9039 57                                   ld      d,a
 100+ 903A B7                                   or      a
 101+ 903B ED 52                                sbc     hl,de
 102+ 903D 38 04                                jr      c,.ADDHLDEOppInvert
 103+ 903F 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 104+ 9040 B4                                   or      h
 105+ 9041 67                                   ld      h,a                         ; set the previou sign value
 106+ 9042 C9                                   ret
 107+ 9043              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 107+ 9043 AF          >                    xor a
 107+ 9044 95          >                    sub l
 107+ 9045 6F          >                    ld l,a
 107+ 9046 9F          >                    sbc a,a
 107+ 9047 94          >                    sub h
 107+ 9048 67          >                    ld h,a
 108+ 9049 78                                   ld      a,b
 109+ 904A EE 80                                xor     SignOnly8Bit                ; flip sign bit
 110+ 904C B4                                   or      h
 111+ 904D 67                                   ld      h,a                         ; recover sign
 112+ 904E C9                                   ret
 113+ 904F
 114+ 904F
 115+ 904F                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
 116+ 904F                  ;
 117+ 904F                  ; enter : hl = 16-bit multiplier   = x
 118+ 904F                  ;          e =  8-bit multiplicand = y
 119+ 904F                  ;
 120+ 904F                  ; exit  : ahl = 24-bit product
 121+ 904F                  ;         carry reset
 122+ 904F                  ;
 123+ 904F                  ; uses  : af, de, hl
 124+ 904F 54           AHLequHLmulE:           ld d,h                      ; xh
 125+ 9050 63                                   ld h,e                      ; yl
 126+ 9051 ED 30                                mul de                      ; xh*yl
 127+ 9053 EB                                   ex de,hl
 128+ 9054 ED 30                                mul de                      ; yl*xl, hl = xh*yl
 129+ 9056
 130+ 9056 7A                                   ld  a,d                     ; sum products
 131+ 9057 85                                   add a,l
 132+ 9058 57                                   ld  d,a
 133+ 9059 EB                                   ex de,hl
 134+ 905A
 135+ 905A 7A                                   ld  a,d
 136+ 905B CE 00                                adc a,0
 137+ 905D C9                                   ret
 138+ 905E
 139+ 905E 54           HLE0quH0mulE:           ld      d,h                 ; .
 140+ 905F 63                                   ld      h,e                 ; .
 141+ 9060 ED 30                                mul     de                  ; de = xh * yl
 142+ 9062 EB                                   ex      de,hl
 143+ 9063 C9                                   ret
 144+ 9064
 145+ 9064                 ; multiplication of two 16-bit numbers into a 32-bit product
 146+ 9064                 ;
 147+ 9064                 ; enter : de = 16-bit multiplicand = y
 148+ 9064                 ;         hl = 16-bit multiplicand = x
 149+ 9064                 ;
 150+ 9064                 ; exit  : dehl = 32-bit product
 151+ 9064                 ;         carry reset
 152+ 9064                 ;
 153+ 9064                 ; uses  : af, bc, de, hl
 154+ 9064
 155+ 9064
 156+ 9064
 157+ 9064 45           DEHLequDEmulHL:         ld b,l                      ; x0
 158+ 9065 4B                                   ld c,e                      ; y0
 159+ 9066 5D                                   ld e,l                      ; x0
 160+ 9067 6A                                   ld l,d
 161+ 9068 E5                                   push hl                     ; x1 y1
 162+ 9069 69                                   ld l,c                      ; y0
 163+ 906A              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
 164+ 906A ED 30                                mul de                      ; y1*x0
 165+ 906C EB                                   ex de,hl
 166+ 906D ED 30                                mul de                      ; x1*y0
 167+ 906F
 168+ 906F AF                                   xor a                       ; zero A
 169+ 9070 19                                   add hl,de                   ; sum cross products p2 p1
 170+ 9071 8F                                   adc a,a                     ; capture carry p3
 171+ 9072
 172+ 9072 59                                   ld e,c                      ; x0
 173+ 9073 50                                   ld d,b                      ; y0
 174+ 9074 ED 30                                mul de                      ; y0*x0
 175+ 9076
 176+ 9076 47                                   ld b,a                      ; carry from cross products
 177+ 9077 4C                                   ld c,h                      ; LSB of MSW from cross products
 178+ 9078
 179+ 9078 7A                                   ld a,d
 180+ 9079 85                                   add a,l
 181+ 907A 67                                   ld h,a
 182+ 907B 6B                                   ld l,e                      ; LSW in HL p1 p0
 183+ 907C
 184+ 907C D1                                   pop de
 185+ 907D ED 30                                mul de                      ; x1*y1
 186+ 907F
 187+ 907F EB                                   ex de,hl
 188+ 9080 ED 4A                                adc hl,bc
 189+ 9082 EB                                   ex de,hl                    ; de = final MSW
 190+ 9083
 191+ 9083 C9                                   ret
 192+ 9084
 193+ 9084              ; multiplication of two 16-bit numbers into a 16-bit product
 194+ 9084              ; enter : de = 16-bit multiplicand
 195+ 9084              ;         hl = 16-bit multiplicand
 196+ 9084              ; exit  : hl = 16-bit product
 197+ 9084              ;         carry reset
 198+ 9084              ; maths is
 199+ 9084              ;        hl = y , de= x
 200+ 9084              ;        hl = xhi,ylo + (yhigh * xlow)
 201+ 9084              ;        hl = yhih & xlo + x
 202+ 9084              ;
 203+ 9084              ;
 204+ 9084              ; uses  : af, bc, de, hl
 205+ 9084 C5           mulDEbyHL:              push    bc
 206+ 9085 7A                                   ld a,d                      ; a = xh
 207+ 9086 54                                   ld d,h                      ; d = yh
 208+ 9087 67                                   ld h,a                      ; h = xh
 209+ 9088 4B                                   ld c,e                      ; c = xl
 210+ 9089 45                                   ld b,l                      ; b = yl
 211+ 908A ED 30                                mul                         ; yh * yl
 212+ 908C EB                                   ex de,hl
 213+ 908D ED 30                                mul                         ; xh * yl
 214+ 908F 19                                   add hl,de                   ; add cross products
 215+ 9090 59                                   ld e,c
 216+ 9091 50                                   ld d,b
 217+ 9092 ED 30                                mul                         ; yl * xl
 218+ 9094 7D                                   ld a,l                      ; cross products lsb
 219+ 9095 82                                   add a,d                     ; add to msb final
 220+ 9096 67                                   ld h,a
 221+ 9097 6B                                   ld l,e                      ; hl = final
 222+ 9098                                      ; 83 cycles, 19 bytes
 223+ 9098 AF                                   xor a                       ; reset carry
 224+ 9099 C1                                   pop     bc
 225+ 909A C9                                   ret
 226+ 909B
 227+ 909B
 228+ 909B              ; CHL = multiplicand D = multiplier
 229+ 909B              ; DCHL = CHL * D
 230+ 909B 7A           mulCHLbyDSigned:        ld      a,d                 ; get sign from d
 231+ 909C AC                                   xor     h                   ; xor with h to get resultant sign
 232+ 909D E6 80                                and     SignOnly8Bit        ; .
 233+ 909F FD 67                                ld      iyh,a               ; iyh = copy of sign
 234+ 90A1 79                                   ld      a,c                 ; now CHL = ABS (CHL)
 235+ 90A2 E6 7F                                and     SignMask8Bit        ; .
 236+ 90A4 4F                                   ld      c,a                 ; .
 237+ 90A5 7A                                   ld      a,d                 ; d = ABS D
 238+ 90A6 E6 7F                                and     SignMask8Bit        ; .
 239+ 90A8              ; At this point CHL = ABS (HLE), A = ABS(D)
 240+ 90A8 57           .mul1:                  ld      d,a                 ; first do D * L
 241+ 90A9 5D                                   ld      e,l                 ; .
 242+ 90AA ED 30                                mul     de                  ; DE = L * D
 243+ 90AC 08                                   ex      af,af'              ; save multiplier
 244+ 90AD 6B                                   ld      l,e                 ; L = p0
 245+ 90AE 7A                                   ld      a,d                 ; carry byte
 246+ 90AF 08                                   ex      af,af'              ; retrieve muliplier and save carry byte along with flags
 247+ 90B0 5C           .mul2:                  ld      e,h                 ; byte 2 of multiplicand
 248+ 90B1 57                                   ld      d,a                 ; and multiplier
 249+ 90B2 ED 30                                mul     de                  ; now its D & L
 250+ 90B4 08                                   ex      af,af'              ; get back carry byte with flags
 251+ 90B5 83           .carrybyte1:            add     a,e                 ; add low byte carry to result and retain carry too through next instructions
 252+ 90B6 67                                   ld      h,a                 ; h = P1
 253+ 90B7 7A                                   ld      a,d                 ; a = carry byte
 254+ 90B8 08                                   ex      af,af'              ; save carry byte and get back multiplier with flags
 255+ 90B9 59           .mul3:                  ld      e,c                 ; byte 3 of multiplicand
 256+ 90BA 57                                   ld      d,a                 ;
 257+ 90BB ED 30                                mul     de                  ;
 258+ 90BD 08                                   ex      af,af'              ; get back carry byte and carry prior to first add
 259+ 90BE 8B                                   adc     a,e                 ;
 260+ 90BF FD B4                                or      iyh                 ; recover saved resultant sign
 261+ 90C1 4F                                   ld      c,a                 ; c byte 3. Note the value range allowed can never cause a byte 3 carry
 262+ 90C2 C9                                   ret
 263+ 90C3
 264+ 90C3              ;  CHL = 53456 D = 1E
 265+ 90C3              ;  56 * 1E = A14 L = 14 carry = 0A
 266+ 90C3              ;  34 * 1E = 618 H = 18 +A = 22 carry = 6
 267+ 90C3              ;  5  * 1E = 096 C = 96 + 6 = 9C
 268+ 90C3              ;  CHL = 9C2214
 269+ 90C3              ;mult3
 270+ 90C3              ; DELC = HLE * D, uses HL, DE, C , A , IYH
 271+ 90C3              ; HLE = multiplicand D = multiplier
 272+ 90C3              ; tested by mathstestsun.asm all passed
 273+ 90C3              ; Algorithm
 274+ 90C3              ; AC =  E * D   (save carry)         H    L    E
 275+ 90C3              ; DE =  L * D                                  D
 276+ 90C3              ;  L =  A + E + carry                         E*D (lo)
 277+ 90C3              ; DE =  H * D                             L*D+ ^ (hi)
 278+ 90C3              ;  E =  A + E + carry                H*D (lo) + carry
 279+ 90C3              ;
 280+ 90C3              ;
 281+ 90C3 7A           mulHLbyDE2sc:           ld      a,d
 282+ 90C4 AC                                   xor     h
 283+ 90C5 E6 80                                and     SignOnly8Bit
 284+ 90C7 FD 67                                ld      iyh,a               ; save sign bit for result
 285+ 90C9 7C                                   ld      a,h
 286+ 90CA E6 80                                and     SignOnly8Bit
 287+ 90CC 28 06                                jr      z,.HLPositive
 288+ 90CE              .HLNegative:            NegHL
 288+ 90CE AF          >                    xor a
 288+ 90CF 95          >                    sub l
 288+ 90D0 6F          >                    ld l,a
 288+ 90D1 9F          >                    sbc a,a
 288+ 90D2 94          >                    sub h
 288+ 90D3 67          >                    ld h,a
 289+ 90D4 7A           .HLPositive:            ld      a,d
 290+ 90D5 E6 80                                and     SignOnly8Bit
 291+ 90D7 28 06                                jr      z,.DEPositive
 292+ 90D9              .DENegative:            NegDE
 292+ 90D9 AF          >                    xor a
 292+ 90DA 93          >                    sub e
 292+ 90DB 5F          >                    ld e,a
 292+ 90DC 9F          >                    sbc a,a
 292+ 90DD 92          >                    sub d
 292+ 90DE 57          >                    ld d,a
 293+ 90DF CD 84 90     .DEPositive:            call    mulDEbyHL           ; now do calc
 294+ 90E2 FD 7C                                ld      a,iyh
 295+ 90E4 A7                                   and     a                   ; if its 0 then we are good
 296+ 90E5 C8                                   ret     z
 297+ 90E6
 298+ 90E6
 299+ 90E6
 300+ 90E6 7A           mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 301+ 90E7 AC                                   xor     h                   ; xor with h to get resultant sign
 302+ 90E8 E6 80                                and     SignOnly8Bit        ; .
 303+ 90EA FD 67                                ld      iyh,a               ; iyh = copy of sign
 304+ 90EC 7C                                   ld      a,h                 ; now HLE = ABS (HLE)
 305+ 90ED E6 7F                                and     SignMask8Bit        ; .
 306+ 90EF 67                                   ld      h,a                 ; .
 307+ 90F0 7A                                   ld      a,d                 ; d = ABS D
 308+ 90F1 E6 7F                                and     SignMask8Bit        ; .
 309+ 90F3 57                                   ld      d,a                 ; .
 310+ 90F4 B7           .testEitherSideZero:    or      a
 311+ 90F5 28 24                                jr      z,.ResultZero
 312+ 90F7 7C                                   ld      a,h
 313+ 90F8 B5                                   or      l
 314+ 90F9 B3                                   or      e
 315+ 90FA 28 1F                                jr      z,.ResultZero
 316+ 90FC              ; At this point HLE = ABS (HLE), A = ABS(D)
 317+ 90FC 42                                   ld      b,d                 ; save Quotient
 318+ 90FD ED 30        .mul1:                  mul     de                  ; C = E * D
 319+ 90FF 4B                                   ld      c,e                 ; C = p0
 320+ 9100 FD 6A                                ld      iyl,d               ; save carry (p1)
 321+ 9102 5D           .mul2:                  ld      e,l                 ; L = L * D
 322+ 9103 50                                   ld      d,b                 ; .
 323+ 9104 ED 30                                mul     de                  ; .
 324+ 9106 FD 7D                                ld      a,iyl               ; get back p1
 325+ 9108 83           .carrybyte1:            add     a,e                 ; L = L + E
 326+ 9109 6F                                   ld      l,a                 ; .
 327+ 910A FD 6A                                ld      iyl,d               ; save new carry byte
 328+ 910C 5C           .mul3:                  ld      e,h                 ; E = H * D
 329+ 910D 50                                   ld      d,b                 ; .
 330+ 910E ED 30                                mul     de                  ; .
 331+ 9110 FD 7D                                ld      a,iyl
 332+ 9112 8B                                   adc     a,e                 ; .
 333+ 9113 5F                                   ld      e,a                 ; .
 334+ 9114 7A           .ItsNotZero:            ld      a,d                 ;
 335+ 9115 CE 00                                adc     a,0                 ; final carry bit
 336+ 9117 FD B4                                or      iyh                 ; bring back sign
 337+ 9119 57                                   ld      d,a                 ; s = sign
 338+ 911A C9                                   ret
 339+ 911B 11 00 00     .ResultZero:            ld      de,0
 340+ 911E                                      ZeroA
 340+ 911E AF          >                        xor a
 341+ 911F 4F                                   ld      c,a
 342+ 9120 6F                                   ld      l,a
 343+ 9121 C9                                   ret
 344+ 9122
 345+ 9122              ;;;
 346+ 9122              ;;;
 347+ 9122              ;;;mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 348+ 9122              ;;;                        xor     h                   ; xor with h to get resultant sign
 349+ 9122              ;;;                        and     SignOnly8Bit        ; .
 350+ 9122              ;;;                        ld      iyh,a               ; iyh = copy of sign
 351+ 9122              ;;;                        ld      a,h                 ; now HLE = ABS (HLE)
 352+ 9122              ;;;                        and     SignMask8Bit        ; .
 353+ 9122              ;;;                        ld      h,a                 ; .
 354+ 9122              ;;;                        ld      a,d                 ; d = ABS D
 355+ 9122              ;;;                        and     SignMask8Bit        ; .
 356+ 9122              ;;;                        ld      d,a                 ; .
 357+ 9122              ;;;.testEitherSideZero:    or      a
 358+ 9122              ;;;                        jr      z,.ResultZero
 359+ 9122              ;;;                        ld      a,h
 360+ 9122              ;;;                        or      l
 361+ 9122              ;;;                        or      e
 362+ 9122              ;;;                        jr      z,.ResultZero
 363+ 9122              ;;;; At this point HLE = ABS (HLE), A = ABS(D)
 364+ 9122              ;;;.mul1:                  mul     de                  ; C = E * D
 365+ 9122              ;;;                        ex      af,af'              ; save mulitplier
 366+ 9122              ;;;                        ld      c,e                 ; C = p0
 367+ 9122              ;;;                        ld      a,d                 ; save carry (p1)
 368+ 9122              ;;;                        ex      af,af'              ; .
 369+ 9122              ;;;.mul2:                  ld      e,l                 ; L = L * D
 370+ 9122              ;;;                        ld      d,a                 ; .
 371+ 9122              ;;;                        mul     de                  ; .
 372+ 9122              ;;;                        ex      af,af'              ; .
 373+ 9122              ;;;.carrybyte1:            add     a,e                 ; L = L + E
 374+ 9122              ;;;                        ld      l,a                 ; .
 375+ 9122              ;;;                        ld      a,d
 376+ 9122              ;;;                        ex      af,af'              ; save new carry byte
 377+ 9122              ;;;.mul3:                  ld      e,h                 ; E = H * D
 378+ 9122              ;;;                        ld      d,a                 ; .
 379+ 9122              ;;;                        mul     de                  ; .
 380+ 9122              ;;;                        ex      af,af'              ; .
 381+ 9122              ;;;                        adc     a,e                 ; .
 382+ 9122              ;;;                        ld      e,a                 ; .
 383+ 9122              ;;;.ItsNotZero:            ld      a,d                 ;
 384+ 9122              ;;;                        adc     a,0                 ; final carry bit
 385+ 9122              ;;;                        or      iyh                 ; bring back sign
 386+ 9122              ;;;                        ld      d,a                 ; s = sign
 387+ 9122              ;;;                        ret
 388+ 9122              ;;;.ResultZero:            ld      de,0
 389+ 9122              ;;;                        ZeroA
 390+ 9122              ;;;                        ld      c,a
 391+ 9122              ;;;                        ld      l,a
 392+ 9122              ;;;                        ret
 393+ 9122
 394+ 9122              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
 395+ 9122              ; enter : de = 16-bit multiplicand
 396+ 9122              ;         hl = 16-bit multiplicand
 397+ 9122              ; exit  : hl = 16-bit product
 398+ 9122              ;         carry reset
 399+ 9122              ;
 400+ 9122              ; uses  : af, bc, de, hl
 401+ 9122 00           mulDEbyHLSignByte       DB      0
 402+ 9123 AF           mulDEbyHLSgnTo2c:       xor     a
 403+ 9124 32 22 91                             ld      (mulDEbyHLSignByte),a
 404+ 9127 7A           .SignDE:                ld      a,d
 405+ 9128 ED 27 80                             test    $80
 406+ 912B 28 08                                jr      z,.SignHL
 407+ 912D E6 7F        .NegativeDE:            and     $7F
 408+ 912F 57                                   ld      d,a
 409+ 9130 3E 80                                ld      a,$80
 410+ 9132 32 22 91                             ld      (mulDEbyHLSignByte),a
 411+ 9135 7C           .SignHL:                ld      a,h
 412+ 9136 ED 27 80                             test    $80
 413+ 9139 28 0B                                jr      z,.AbsoluteMultiply
 414+ 913B E6 7F        .NegativeHL:            and     $7F
 415+ 913D 67                                   ld      h,a
 416+ 913E 3A 22 91                             ld      a,(mulDEbyHLSignByte)
 417+ 9141 EE 80                                xor     $80
 418+ 9143 32 22 91                             ld      (mulDEbyHLSignByte),a
 419+ 9146 CD 84 90     .AbsoluteMultiply:      call    mulDEbyHL
 420+ 9149 3A 22 91     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 421+ 914C ED 27 80                             test    $80
 422+ 914F C8                                   ret     z
 423+ 9150 AF           .Negateghl: 			xor 	a
 424+ 9151 95                                   sub 	l
 425+ 9152 6F                                   ld 		l,a
 426+ 9153 9F                                   sbc 	a,a
 427+ 9154 94                                   sub 	h
 428+ 9155 67                                   ld 		h,a
 429+ 9156 C9                                   ret
 430+ 9157
 431+ 9157 AF           mulDESgnbyHLUnsgnTo2c:  xor     a
 432+ 9158 32 22 91                             ld      (mulDEbyHLSignByte),a
 433+ 915B 7A           .SignDE:                ld      a,d
 434+ 915C ED 27 80                             test    $80
 435+ 915F 28 08                                jr      z,.AbsoluteMultiply
 436+ 9161 E6 7F        .NegativeDE:            and     $7F
 437+ 9163 57                                   ld      d,a
 438+ 9164 3E 80                                ld      a,$80
 439+ 9166 32 22 91                             ld      (mulDEbyHLSignByte),a
 440+ 9169 CD 84 90     .AbsoluteMultiply:      call    mulDEbyHL
 441+ 916C 3A 22 91     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 442+ 916F ED 27 80                             test    $80
 443+ 9172 C8                                   ret     z
 444+ 9173 AF           .Negateghl:             xor 	a
 445+ 9174 95                                   sub 	l
 446+ 9175 6F                                   ld 		l,a
 447+ 9176 9F                                   sbc 	a,a
 448+ 9177 94                                   sub 	h
 449+ 9178 67                                   ld 		h,a
 450+ 9179 C9                                   ret
 451+ 917A
 452+ 917A
# file closed: ./Maths/multiply.asm
1098  917A                  INCLUDE "./Maths/asm_square.asm"
# file opened: ./Maths/asm_square.asm
   1+ 917A              ; "ASM_SQUA : TESTGOOD"
   2+ 917A              ; "AP = A^2 A = low,P = hi"
   3+ 917A
   4+ 917A              inline_squde: MACRO
   5+ 917A ~            			ld	e,a
   6+ 917A ~            			ld  d,a
   7+ 917A ~            			mul
   8+ 917A              			ENDM
   9+ 917A
  10+ 917A              inline_squa: MACRO
  11+ 917A ~            			ld	e,a
  12+ 917A ~            			ld  d,a
  13+ 917A ~            			mul
  14+ 917A ~            			ld	a,e
  15+ 917A              			ENDM
  16+ 917A
# file closed: ./Maths/asm_square.asm
1099  917A                  INCLUDE "./Maths/asm_sine.asm"
# file opened: ./Maths/asm_sine.asm
   1+ 917A              ;- MACROS
   2+ 917A              LookupSineAMacro:       MACRO
   3+ 917A ~                                    ld      hl,SNE                      ; Set Q = sin(X)  = sin(CNT2 mod 32) = |sin(CNT2)|
   4+ 917A ~                                    add     hl, a
   5+ 917A ~                                    ld      a,(hl)
   6+ 917A                                      ENDM
   7+ 917A
   8+ 917A              ; Gets the sine of A from the lookup table into A
   9+ 917A              LookupSineA:            LookupSineAMacro
   9+ 917A 21 23 92    >                        ld      hl,SNE                      ; Set Q = sin(X)  = sin(CNT2 mod 32) = |sin(CNT2)|
   9+ 917D ED 31       >                        add     hl, a
   9+ 917F 7E          >                        ld      a,(hl)
  10+ 9180 C9                                   ret
  11+ 9181
# file closed: ./Maths/asm_sine.asm
1100  9181                  INCLUDE "./Maths/asm_sqrt.asm"
# file opened: ./Maths/asm_sqrt.asm
   1+ 9181              ; "ASM SQRT : TESTGOOD"
   2+ 9181              ; "16-bit integer square root"
   3+ 9181              ; "call with de = number to square root"
   4+ 9181              ; "returns   hl = square root"
   5+ 9181              ; "corrupts  bc, de"
   6+ 9181              asm_sqrt:
   7+ 9181 01 00 80     	ld bc,$8000
   8+ 9184 61           	ld h,c
   9+ 9185 69           	ld l,c
  10+ 9186              .sqrloop:
  11+ 9186 CB 38        	srl b
  12+ 9188 CB 19        	rr c
  13+ 918A 09           	add hl,bc
  14+ 918B EB           	ex de,hl
  15+ 918C ED 52        	sbc hl,de
  16+ 918E 38 04        	jr c,.sqrbit
  17+ 9190 EB           	ex de,hl
  18+ 9191 09           	add hl,bc
  19+ 9192 18 05        	jr .sqrfi
  20+ 9194              .sqrbit:
  21+ 9194 19           	add hl,de
  22+ 9195 EB           	ex de,hl
  23+ 9196 B7           	or a
  24+ 9197 ED 42        	sbc hl,bc
  25+ 9199              .sqrfi:
  26+ 9199 CB 3C        	srl h
  27+ 919B CB 1D        	rr l
  28+ 919D CB 38        	srl b
  29+ 919F CB 19        	rr c
  30+ 91A1 30 E3        	jr nc,.sqrloop
  31+ 91A3 C9           	ret
  32+ 91A4
  33+ 91A4
  34+ 91A4              sqrtQR:					; Q = SQR(Qlo.Rhi) Q <~127
  35+ 91A4 3A 9C 7E     	ld		a,(varQ)
  36+ 91A7 5F           	ld		e,a
  37+ 91A8 3A 9D 7E     	ld		a,(varR)
  38+ 91AB 57           	ld		d,a
  39+ 91AC CD 81 91     	call	asm_sqrt
  40+ 91AF 7D               ld      a,l
  41+ 91B0 32 9C 7E     	ld		(varQ),a
  42+ 91B3 C9           	ret
  43+ 91B4
# file closed: ./Maths/asm_sqrt.asm
1101  91B4                  INCLUDE "./Maths/asm_arctan.asm"
# file opened: ./Maths/asm_arctan.asm
   1+ 91B4              ;Calculate A = arctan(P / Q)
   2+ 91B4              ; This finds the angle in the right-angled triangle where the opposite side to angle A is length P and the adjacent side to angle A has
   3+ 91B4              ; length Q, so:  tan(A) = P / Q
   4+ 91B4              ;
   5+ 91B4              ; The result in A is an integer representing the angle in radians. The routine returns values in the range 0 to 128,  (or 0 to PI radians).
   6+ 91B4 3A 9D 7D     ARCTAN:                 ld      a,(varP)                    ; LDA P                  \ Set T1 = P EOR Q, which will have the sign of P * Q
   7+ 91B7 21 9C 7E                             ld      hl,varQ                     ; EOR Q
   8+ 91BA AE                                   xor     (hl)                        ; .
   9+ 91BB 32 9A 7D                             ld      (varT1),a                   ; STA T1
  10+ 91BE 3A 9C 7E                             ld      a,(varQ)                    ; LDA Q                  \ If Q = 0, jump to AR2 to return a right angle
  11+ 91C1 A7                                   and     a                           ; BEQ AR2
  12+ 91C2 CA 04 92                             jp      z, .AR2                     ; .
  13+ 91C5 CB 27                                sla     a                           ; ASL A                  \ Set Q = |Q| * 2 (this is a quick way of clearing the
  14+ 91C7 32 9C 7E                             ld      (varQ),a                    ; STA Q                  \ sign bit, and we don't need to shift right again as we only ever use this value in the division with |P| * 2, which we set next)
  15+ 91CA 3A 9D 7D                             ld      a,(varP)                    ; LDA P                  \ Set A = |P| * 2
  16+ 91CD CB 27                                sla     a                           ; ASL A
  17+ 91CF 32 9D 7D                             ld      (varP),a
  18+ 91D2 21 9C 7E                             ld      hl,varQ
  19+ 91D5 BE                                   cp      (hl)                        ; CMP Q                  \ If A >= Q, i.e. |P| > |Q|, jump to AR1 to swap P
  20+ 91D6 D2 E8 91                             jp      nc, .AR1                    ; BCS AR1                \ and Q around, so we can still use the lookup table
  21+ 91D9 CD 10 92                             call    ARS1                        ; JSR ARS1               \ Call ARS1 to set the following from the lookup table:  A = arctan(A / Q)  = arctan(|P / Q|)
  22+ 91DC                                      ClearCarryFlag                      ; SEC                    \ Set the C flag so the SBC instruction in AR3 will be correct, should we jump there
  22+ 91DC B7          >                        or a
  23+ 91DD 4F           .AR4:                   ld      c,a                         ; as we have to use a we use c as a temp, we can't push af as we would loose flags on pop
  24+ 91DE 3A 9A 7D                             ld      a,(varT1)                   ; LDX T1                 \ If T1 is negative, i.e. P and Q have different signs,
  25+ 91E1 47                                   ld      b,a                         ; .
  26+ 91E2 A7                                   and     a                           ; BMI AR3                \ jump down to AR3 to return arctan(-|P / Q|)
  27+ 91E3 79                                   ld      a,c                         ; .                      \ we need to get a back before jump
  28+ 91E4 FA 07 92                             jp      m, .AR3                     ; .
  29+ 91E7 C9                                   ret                                 ; RTS                    \ Otherwise P and Q have the same sign, so our result is correct and we can return from the subroutine
  30+ 91E8              ; We want to calculate arctan(t) where |t| > 1, so we can use the calculation described in the documentation for the ACT table, i.e. 64 - arctan(1 / t)
  31+ 91E8              ; In the 6502 verion it works with A already being P but we will fetch it
  32+ 91E8 3A 9C 7E     .AR1:                   ld      a,(varQ)                    ; LDX Q                  \ Swap the values in Q and P, using the fact that we
  33+ 91EB 47                                   ld      b,a                         ; .
  34+ 91EC 3A 9D 7D                             ld      a,(varP)                    ; STA Q                  \ called AR1 with A = P
  35+ 91EF 32 9C 7E                             ld      (varQ),a                    ; .
  36+ 91F2 78                                   ld      a,b                         ; TXA                    \ This also sets A = P (which now contains the original argument |Q|)
  37+ 91F3 32 9D 7D                             ld      (varP),a                    ; STX P                  \
  38+ 91F6 CD 10 92                             call    ARS1                        ; JSR ARS1               \ Call ARS1 to set the following from the lookup table: A = arctan(A / Q) = arctan(|Q / P|) = arctan(1 / |P / Q|)
  39+ 91F9 32 B8 7E                             ld      (varT),a                    ; STA T                  \ Set T = 64 - T, we use B as T (its not really that)
  40+ 91FC 47                                   ld      b,a                         ; its actually t = a, a = 64-a
  41+ 91FD 3E 40                                ld      a,64                        ; LDA #64 What is going on here is t = result
  42+ 91FF                                      ClearCarryFlag                      ; SBC T                            a = 64- result
  42+ 91FF B7          >                        or a
  43+ 9200 98                                   sbc     a,b                         ; .
  44+ 9201 C3 DD 91                             jp      .AR4                        ; BCS AR4                \ Jump to AR4 to continue the calculation (this BCS is effectively a JMP as the subtraction will never underflow, as ARS1 returns values in the range 0-31)
  45+ 9204              ; If we get here then Q = 0, so tan(A) = infinity and A is a right angle, or 0.25 of a circle. We allocate 255 to a full circle, so we should return 63 for a right angle
  46+ 9204 3E 3F        .AR2:                   ld      a,63                        ; LDA #63                \ Set A to 63, to represent a right angle
  47+ 9206 C9                                   ret                                 ; RTS                    \ Return from the subroutine
  48+ 9207              ; A contains arctan(|P / Q|) but P and Q have different signs, so we need to return arctan(-|P / Q|), using the calculation described in the documentation for the ACT table, i.e. 128 - A
  49+ 9207 32 B8 7E     .AR3:                   ld      (varT),a
  50+ 920A 47                                   ld      b,a                         ; STA T                  \ Set A = 128 - A, we use b as T
  51+ 920B 3E 80                                ld      a,128                       ; LDA #128               \
  52+ 920D                                      ClearCarryFlag                      ; SBC T                  \ The subtraction will work because we did a SEC before calling AR3
  52+ 920D B7          >                        or a
  53+ 920E 98                                   sbc     a,b
  54+ 920F C9                                   ret                                 ; RTS                    \ Return from the subroutine
  55+ 9210              ; This routine fetches arctan(A / Q) from the ACT table, so A will be set to an integer in the range 0 to 31 that represents an angle from 0 to 45 degrees (or 0 to \ PI / 4 radians)
  56+ 9210 CD 39 A0     ARS1:                   call    LL28Amul256DivQ_6502        ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q
  57+ 9213 3A 9D 7E                             ld      a,(varR)                    ; LDA R                  \ Set X = R / 8
  58+ 9216 CB 3F                                srl     a                           ; LSR A                  \       = 32 * A / Q
  59+ 9218 CB 3F                                srl     a                           ; LSR A                  \
  60+ 921A CB 3F                                srl     a                           ; LSR A                  \ so X has the value t * 32 where t = A / Q, which is
  61+ 921C 21 43 92                             ld      hl,ACT                      ; TAX                    \ what we need to look up values in the ACT table
  62+ 921F ED 31                                add     hl,a                        ; LDA ACT,X              \ Fetch ACT+X from the ACT table into A, so now:
  63+ 9221 7E                                   ld      a,(hl)                      ;                        \   A = value in ACT + X = value in ACT + (32 * A / Q)= arctan(A / Q)
  64+ 9222 C9                                   ret                                 ; RTS                    \ Return from the subroutine
  65+ 9223
  66+ 9223              ;;;arctan:										; .ARCTAN	\ -> &2A3C  \ A=TAN-1(P/Q) \ A=arctan (P/Q)  called from block E
  67+ 9223              ;;;		ld		a,(varP)					; a = var P
  68+ 9223              ;;;		ld		hl,varQ
  69+ 9223              ;;;		xor		(hl)						; a = var p XOR varQ
  70+ 9223              ;;;		ld		a,(varT1)					; \ T1	 \ quadrant info
  71+ 9223              ;;;		ld		c,a							; c = copy of T1
  72+ 9223              ;;;		ld		a,(hl)						; Q
  73+ 9223              ;;;		cp		0
  74+ 9223              ;;;		jr		z,.AR2						;  Q=0 so set angle to 63, pi/2
  75+ 9223              ;;;		ld		(varQ),a					; Q move to reg B?
  76+ 9223              ;;;		ld		d,a							; copy to reg d
  77+ 9223              ;;;		sla		a							; drop sign
  78+ 9223              ;;;		ld		a,(varP)					; P
  79+ 9223              ;;;		ld		e,a							; copy to reg e
  80+ 9223              ;;;		sla		a							; drop sign
  81+ 9223              ;;;		cp		d							; compare with b (unsigned varQ * 2)
  82+ 9223              ;;;		jr		nc, .ars1					; if q >  p then adjust  swop A and Q as A >= Q
  83+ 9223              ;;;		call	ars1						; \ ARS1 \ get Angle for A*32/Q from table.
  84+ 9223              ;;;		scf									; set carry flag
  85+ 9223              ;;;.ar4:										; sub o.k
  86+ 9223              ;;;		bit 	7,c							; is T1 (also in c) negative?
  87+ 9223              ;;;		jr		nz,.ar3						;  -ve quadrant
  88+ 9223              ;;;		ret
  89+ 9223              ;;;.ar1:										; swop A and Q entering here d = q and e = P
  90+ 9223              ;;;		ld		a,d							; a = varQ
  91+ 9223              ;;;		ld		d,e							; varQ = varP
  92+ 9223              ;;;		ld		e,a							; swap D and E around
  93+ 9223              ;;;		ld		(varP),a					; write to actual variables
  94+ 9223              ;;;		ld		a,d
  95+ 9223              ;;;		ld		(varQ),a					; write to actual variables
  96+ 9223              ;;;		call	.ars1
  97+ 9223              ;;;		ld		(varT),b
  98+ 9223              ;;;		ld		b,a							; B = T = angle
  99+ 9223              ;;;		ld		a,64						; next range of angle, pi/4 to pi/2
 100+ 9223              ;;;		sub		a,b							; a = 64 - T (or b)
 101+ 9223              ;;;		jr		nc,.ar4						;  sub o.k
 102+ 9223              ;;;.ar2:										; .AR2	\ set angle to 90 degrees
 103+ 9223              ;;;		ld 		a,&3F						;  #63
 104+ 9223              ;;;		ret
 105+ 9223              ;;;.ar3:										;.AR3	\ -ve quadrant
 106+ 9223              ;;;		ld		b,a							; b = T	= \ angle
 107+ 9223              ;;;		ld		a,ConstPi					; a = Pi
 108+ 9223              ;;;		sub		b,a							; A = 128-T, so now covering range pi/2 to pi correctly
 109+ 9223              ;;;		ret
 110+ 9223              ;;;.ars1:										; .ARS1	\ -> &2A75  \ get Angle for A*32/Q from table.
 111+ 9223              ;;;		call	RequAmul256divQ				;  LL28 \ BFRDIV R=A*256/Q
 112+ 9223              ;;;		ld		a,(regA)
 113+ 9223              ;;;		srl		a
 114+ 9223              ;;;		srl		a
 115+ 9223              ;;;		srl		a							;  31 max.
 116+ 9223              ;;;		ld		hl, ArcTanTable				; root of index into table at end of words data
 117+ 9223              ;;;		add		hl,a						; now at real data
 118+ 9223              ;;;		ld		a,(hl)						; a =  ACT[a]
 119+ 9223              ;;;.arsr:										; rts used by laser lines below (will not in later code)
 120+ 9223              ;;;		ret
 121+ 9223
 122+ 9223
 123+ 9223
# file closed: ./Maths/asm_arctan.asm
1102  9223                  INCLUDE "./Maths/SineTable.asm"
# file opened: ./Maths/SineTable.asm
   1+ 9223              ;; PRINT "SIN TABLE"
   2+ 9223              ;; FOR I% =  0 TO  31
   3+ 9223              ;; N = ABS(SIN((I%/64)*2*PI))
   4+ 9223              ;; IF N >= 1 THEN B% = 255  ELSE B% = INT(256 * N + 0.5)
   5+ 9223              ;; PRINT B%
   6+ 9223              ;; NEXT I%
   7+ 9223
   8+ 9223
   9+ 9223 00 19 32 4A  SNE:            DB 000, 025, 050, 074, 098, 121, 142, 162
   9+ 9227 62 79 8E A2
  10+ 922B B5 C6 D5 E2                  DB 181, 198, 213, 226, 237, 245, 251, 255
  10+ 922F ED F5 FB FF
  11+ 9233 FF FF FB F5                  DB 255, 255, 251, 245, 237, 226, 213, 198
  11+ 9237 ED E2 D5 C6
  12+ 923B B5 A2 8E 79                  DB 181, 162, 142, 121, 098, 074, 050, 025
  12+ 923F 62 4A 32 19
# file closed: ./Maths/SineTable.asm
1103  9243                  INCLUDE "./Maths/ArcTanTable.asm"
# file opened: ./Maths/ArcTanTable.asm
   1+ 9243              ;PRINT "ARCTAN TABLE"
   2+ 9243              ;FOR I% = 0 TO 31
   3+ 9243              ;    PRINT INT((128/PI) * ATN(I%/32)+0.5)
   4+ 9243              ;NEXT I%
   5+ 9243
   6+ 9243 00 01 03 04  ACT:            DB 000, 001, 003, 004, 005, 006, 008, 009
   6+ 9247 05 06 08 09
   7+ 924B 0A 0B 0C 0D                  DB 010, 011, 012, 013, 015, 016, 017, 018
   7+ 924F 0F 10 11 12
   8+ 9253 13 14 15 16                  DB 019, 020, 021, 022, 023, 024, 025, 025
   8+ 9257 17 18 19 19
   9+ 925B 1A 1B 1C 1D                  DB 026, 027, 028, 029, 030, 031, 031, 031
   9+ 925F 1E 1F 1F 1F
  10+ 9263
# file closed: ./Maths/ArcTanTable.asm
1104  9263                  INCLUDE "./Maths/negate16.asm"
# file opened: ./Maths/negate16.asm
   1+ 9263              ;;----------------------------------------------------------------------------------------------------------------------
   2+ 9263              ;; 16-bit negate
   3+ 9263                      ; Input:
   4+ 9263                      ;       HL = value
   5+ 9263                      ; Output:
   6+ 9263                      ;       HL = -value
   7+ 9263                      ; Destroys:
   8+ 9263                      ;       AF
   9+ 9263                      ;
  10+ 9263              negate16:
  11+ 9263 AF           negate16hl:         xor 	a
  12+ 9264 95                               sub 	l
  13+ 9265 6F                               ld 		l,a
  14+ 9266 9F                               sbc 	a,a
  15+ 9267 94                               sub 	h
  16+ 9268 67                               ld 		h,a
  17+ 9269 C9                               ret
  18+ 926A
  19+ 926A AF           negate16de:         xor 	a
  20+ 926B 93                               sub 	e
  21+ 926C 5F                               ld 		e,a
  22+ 926D 9F                               sbc 	a,a
  23+ 926E 92                               sub 	d
  24+ 926F 57                               ld 		d,a
  25+ 9270 C9                               ret
  26+ 9271
  27+ 9271 AF           negate16bc:         xor 	a
  28+ 9272 91                               sub 	c
  29+ 9273 4F                               ld 		c,a
  30+ 9274 9F                               sbc 	a,a
  31+ 9275 90                               sub 	b
  32+ 9276 47                               ld 		b,a
  33+ 9277 C9                               ret
  34+ 9278
# file closed: ./Maths/negate16.asm
1105  9278                  INCLUDE "./Maths/asm_divide.asm"
# file opened: ./Maths/asm_divide.asm
   1+ 9278              ;   K(3 2 1 0)           The result of the division
   2+ 9278              ;   X                    X is preserved
   3+ 9278
   4+ 9278              ; Calculate K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo) where zsign hi lo is in DE with zsign leading hi
   5+ 9278 00 00 00 00  varQRS                 DS      4
   6+ 927C 00 00 00     varAPP                  DS     3
   7+ 927F
   8+ 927F                                  DISPLAY "TODO:  neds rewrite of whoel DIDV3B2"
   9+ 927F              ;; NEEDS REWRITE TODO OF WHOLE DIVD3B2
  10+ 927F              ;; NEEDS REWRITE TODO
  11+ 927F
  12+ 927F              ; b = varR, c= varQ
  13+ 927F              Requ256mulAdivQ_6502:
  14+ 927F CB 27        .LL31_6502:             sla     a                       ; ASL A                   \ Shift A to the left
  15+ 9281 DA 96 92                             jp      c,.LL29_6502             ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
  16+ 9284                                      FlipCarryFlag                   ;                          If A < N, then C flag is set.
  16+ 9284 3F          >                        ccf
  17+ 9285                                      JumpIfALTNusng c, .LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
  17+ 9285 B9          >                        cp      c
  17+ 9286 DA 8B 92    >                        jp		c, .LL31_SKIPSUB_6502
  18+ 9289                                                                      ; BCC P%+4
  19+ 9289 91                                   sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  20+ 928A                                      ClearCarryFlag
  20+ 928A B7          >                        or a
  21+ 928B              .LL31_SKIPSUB_6502:     FlipCarryFlag
  21+ 928B 3F          >                        ccf
  22+ 928C CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  23+ 928E DA 7F 92                             jp      c, .LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  24+ 9291 78                                   ld      a,b
  25+ 9292 32 B3 F1                             ld      (Rvar),a
  26+ 9295 C9                                   ret                             ; RTS                    \ R left with remainder of division
  27+ 9296 91           .LL29_6502:             sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  28+ 9297                                      SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
  28+ 9297 37          >                        scf
  29+ 9298 CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  30+ 929A DA 7F 92                             jp      c, .LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  31+ 929D 78                                   ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
  32+ 929E 32 B3 F1                             ld      (Rvar),a                ; .
  33+ 92A1 C9                                   ret                             ; .                      \ remainder of the division
  34+ 92A2 3E FF        .LL2_6502:              ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
  35+ 92A4 32 9D 7E                             ld      (varR),a                ; STA R                  \ possible answer to 256, i.e. R = 255
  36+ 92A7 47                                   ld      b,a                     ; as we are using b as varR
  37+ 92A8                                      SetCarryFlag                    ; we failed so need carry flag set
  37+ 92A8 37          >                        scf
  38+ 92A9 C9                                   ret                             ; RTS                    \ Return from the subroutine
  39+ 92AA
  40+ 92AA
  41+ 92AA 00           DIVD3B_SHIFT_REG:       DB      0
  42+ 92AB
  43+ 92AB 7B           DIV3B2DE:               ld      a,e                         ; load QRS with Z sign hi lo
  44+ 92AC 32 7A 92                             ld      (varQRS+2),a
  45+ 92AF 7A                                   ld      a,d
  46+ 92B0 E6 7F                                and     $7F
  47+ 92B2 32 79 92                             ld      (varQRS+1),a
  48+ 92B5 7A                                   ld      a,d
  49+ 92B6 E6 80                                and     $80
  50+ 92B8 32 78 92                             ld      (varQRS),a
  51+ 92BB C3 C1 92                             jp      DVID3B
  52+ 92BE              ; Calculate K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo) = A P[1 0 ] / (SRQ)
  53+ 92BE              ; We don't use zlo and assume its already loaded into SRQ
  54+ 92BE 32 9F 7D     DVID3B2:                ld      (varP+2),a                  ;STA P+2                \ Set P+2 = A
  55+ 92C1                                                                          ; LDA INWK+6             \ Set Q = z_lo
  56+ 92C1                                                                          ; STA Q
  57+ 92C1                                                                          ; LDA INWK+7             \ Set R = z_hi
  58+ 92C1                                                                          ; STA R
  59+ 92C1                                                                          ; LDA INWK+8             \ Set S = z_sign
  60+ 92C1                                                                          ; STA S
  61+ 92C1              ;  Given the above assignments, we now want to calculate K(3 2 1 0) = P(2 1 0) / (S R Q)
  62+ 92C1 3A 9D 7D     DVID3B:                 ld      a,(varP)                    ; LDA P                 \ Make sure P(2 1 0) is at least 1
  63+ 92C4 F6 01                                or      1                           ; ORA #1
  64+ 92C6 32 9D 7D                             ld      (varP),a                    ; STA P
  65+ 92C9              ;--- t = sign of P2 xor S (i.e. sign of result) ------------;
  66+ 92C9 3A 9F 7D                             ld      a,(varP+2)                  ; LDA P+2                \ Set T to the sign of P+2 * S (i.e. the sign of the
  67+ 92CC 21 9E 7E                             ld      hl, varS                    ; EOR S                  \ result) and store it in T
  68+ 92CF AE                                   xor     (hl)
  69+ 92D0 E6 80                                and     $80                         ; AND #%10000000
  70+ 92D2 32 B8 7E                             ld      (varT),a                    ; STA T
  71+ 92D5              ;--- New bit added to aviod a divde by 0 -------------------;
  72+ 92D5 3A 9C 7E     .CheckQRSAtLeast1:      ld      a,(varQ)                    ;
  73+ 92D8 21 9D 7E                             ld      hl,varR                     ;
  74+ 92DB B6                                   or      (hl)                        ;
  75+ 92DC C2 E4 92                             jp      nz,.DVL9Prep                ;
  76+ 92DF 3E 01                                ld      a,1                         ;
  77+ 92E1 32 9C 7E                             ld      (varQ),a                    ;
  78+ 92E4              ; A P(1) P(0) = ABS P(2 1 0)
  79+ 92E4 06 00        .DVL9Prep:              ld      b,0                         ; LDY #0                 \ Set Y = 0 to store the scale factor (use b as Y)
  80+ 92E6 3A 9F 7D                             ld      a,(varP+2)                  ; LDA P+2                \ Clear the sign bit of P+2, so the division can be done
  81+ 92E9 E6 7F                                and     $7F                         ; AND #%01111111         \ with positive numbers and we'll set the correct sign below, once all the maths is done
  82+ 92EB              ; We now shift (A P+1 P) left until A >= 64, counting the number of shifts in Y. This makes the top part of the division as large as possible, thus retaining as
  83+ 92EB              ; much accuracy as we can.  When we come to return the final result, we shift the result by the number of places in Y, and in the correct direction
  84+ 92EB                                      DISPLAY "TODO DVL9 and DVL6 move P and QRS into registers for faster shift"
  85+ 92EB              ;-- while A < 64 shift A P(1) P(0) -------------------------;
  86+ 92EB FE 40        .DVL9:                  cp      64                          ; CMP #64                \ If A >= 64, jump down to DV14
  87+ 92ED D2 FE 92                             jp      nc, .DV14                   ; BCS DV14
  88+ 92F0 21 9D 7D                             ld      hl,varP                     ; ASL P                  \ Shift (A P+1 P) to the left
  89+ 92F3 CB 26                                sla     (hl)
  90+ 92F5 23                                   inc     hl                          ; ROL P+1
  91+ 92F6 CB 16                                rl      (hl)
  92+ 92F8 CB 17                                rl      a                           ; ROL A
  93+ 92FA 04                                   inc     b                           ; INY                    \ Increment the scale factor in Y
  94+ 92FB C3 EB 92                             jp      .DVL9                       ; BNE DVL9               \ Loop up to DVL9 (this BNE is effectively a JMP, as Y will never be zero)
  95+ 92FE              ; If we get here, A >= 64 and contains the highest byte of the numerator, scaled up by the number of left shifts in Y (b in our code)
  96+ 92FE 32 9F 7D     .DV14:                  ld      (varP+2),a                  ; Store A in P+2, so we now have the scaled value of the numerator in P(2 1 0)
  97+ 9301 3A 9E 7E                             ld      a,(varS)                    ; LDA S                  \ Set A = |S|
  98+ 9304 E6 7F                                and     $7F                         ; AND #%01111111
  99+ 9306                                      ;nop                                ;  BMI DV9               \ If bit 7 of A is set, jump down to DV9 (which can never happen)
 100+ 9306              ; We now shift (S R Q) left until bit 7 of S is set, reducing Y by the number of shifts. This makes the bottom part of the division as large as possible, thus
 101+ 9306              ; retaining as much accuracy as we can. When we come to return the final result, we shift the result by the total number of places in Y, and in the correct
 102+ 9306              ; direction, to give us the correct result
 103+ 9306              ; We set A to |S| above, so the following actually shifts (A R Q)
 104+ 9306 05           .DVL6:                  dec     b                           ; DEY                    \ Decrement the scale factor in Y (b)
 105+ 9307 21 9C 7E                             ld      hl,varQ                     ; ASL Q                  \ Shift (A R Q) to the left
 106+ 930A CB 26                                sla     (hl)                        ; .
 107+ 930C 21 9D 7E                             ld      hl,varR                     ; ROL R
 108+ 930F CB 16                                rl      (hl)                        ; .
 109+ 9311 CB 17                                rl      a                           ; ROL A
 110+ 9313 F2 06 93                             jp      p,.DVL6                     ; BPL DVL6               \ Loop up to DVL6 to do another shift, until bit 7 of A is set and we can't shift left any further
 111+ 9316              ; We have now shifted both the numerator and denominator left as far as they will go, keeping a tally of the overall scale factor of the various shifts in Y. We
 112+ 9316              ; can now divide just the two highest bytes to get our result
 113+ 9316 32 9C 7E     .DV9:                   ld      (varQ),a                    ; STA Q                  \ Set Q = A, the highest byte of the denominator
 114+ 9319 4F                                   ld      c,a                         ; for Requ256mulAdivQ_6502 as it uses c as Q
 115+ 931A 78                                   ld      a,b                         ; preserve shift register in DEVD3B_SHIFT_REG
 116+ 931B 32 AA 92                             ld      (DIVD3B_SHIFT_REG),a
 117+ 931E              ; Note in Requ256mulAdivQ_6502 we use B as R Var for shift register
 118+ 931E 06 FE                                ld      b,254                       ; LDA #254               \ Set R to have bits 1-7 set, so we can pass this to
 119+ 9320 32 9D 7E                             ld      (varR),a                    ; STA R                  \ LL31 to act as the bit counter in the division
 120+ 9323 3A 9F 7D                             ld      a,(varP+2)                  ; LDA P+2                \ Set A to the highest byte of the numerator
 121+ 9326 CD 7F 92                             call    Requ256mulAdivQ_6502        ; JSR LL31               \ Call LL31 to calculate: R = 256 * A / Q which means result is in b
 122+ 9329              ; The result of our division is now in R, so we just need to shift it back by the scale factor in Y
 123+ 9329                                      ZeroA                               ; LDA #0                \ Set K(3 2 1) = 0 to hold the result (we populate K)
 123+ 9329 AF          >                        xor a
 124+ 932A 32 B0 7E                             ld      (varK+1),a                  ; STA K+1               \ next)
 125+ 932D 32 B1 7E                             ld      (varK+2),a                  ; STA K+2
 126+ 9330 32 B2 7E                             ld      (varK+3),a                  ; STA K+3
 127+ 9333 3A AA 92                             ld      a,(DIVD3B_SHIFT_REG)        ; TYA                   \ If Y (shift counter in b) is positive, jump to DV12
 128+ 9336 B7                                   or      a                           ; .                      we want to check the sign or if its zero
 129+ 9337 CA 62 93                             jp      z,.DV13                     ; Optimisation to save a second jump from DV12 to DV13
 130+ 933A F2 6D 93                             jp      p,.DV12                     ; BPL DV12
 131+ 933D              ; If we get here then Y is negative, so we need to shift the result R to the left by Y places, and then set the correct sign for the result
 132+ 933D                                      DISPLAY "TODO check oprimisation here for var r  in b"
 133+ 933D 48                                   ld      c,b
 134+ 933E 3A AA 92                             ld      a,(DIVD3B_SHIFT_REG)
 135+ 9341 47                                   ld      b,a
 136+ 9342 79                                   ld      a,c
 137+ 9343                                      ; OPTIM ld      a,(varR)                    ; LDA R                  \ Set A = R
 138+ 9343 CB 27        .DVL8:                  sla     a                           ; ASL A                  \ Shift (K+3 K+2 K+1 A) left
 139+ 9345 21 B0 7E                             ld      hl,varK+1                   ; ROL K+1
 140+ 9348 CB 16                                rl      (hl)                        ; .
 141+ 934A 23                                   inc     hl                          ; ROL K+2
 142+ 934B CB 16                                rl      (hl)                        ; .
 143+ 934D 23                                   inc     hl                          ; ROL K+3
 144+ 934E CB 16                                rl      (hl)                        ; .
 145+ 9350 04                                   inc     b                           ; INY                    \ Increment the scale factor in Y
 146+ 9351 C2 43 93                             jp      nz,.DVL8                    ; BNE DVL8               \ Loop back to DVL8 until we have shifted left by Y places
 147+ 9354 32 AF 7E                             ld      (varK),a                    ; STA K                  \ Store A in K so the result is now in K(3 2 1 0)
 148+ 9357 3A B2 7E                             ld      a,(varK+3)                  ; LDA K+3                \ Set K+3 to the sign in T, which we set above to the
 149+ 935A 21 B8 7E                             ld      hl,varT                     ; ORA T                  \ correct sign for the result
 150+ 935D B6                                   or      (hl)                        ; .
 151+ 935E 32 B2 7E                             ld      (varK+3),a                  ; STA K+3
 152+ 9361 C9                                   ret                                 ; RTS                    \ Return from the subroutine
 153+ 9362              ; If we get here then Y is zero, so we don't need to shift the result R, we just need to set the correct sign for the result
 154+ 9362 78           .DV13:                  ld      a,b; varR)                  ; LDA R                  \ Store R in K so the result is now in K(3 2 1 0)
 155+ 9363 32 AF 7E                             ld      (varK),a                    ; STA K
 156+ 9366 3A B8 7E                             ld      a,(varT)                    ; LDA T                  \ Set K+3 to the sign in T, which we set above to the
 157+ 9369 32 B2 7E                             ld      (varK+3),a                  ; STA K+3                \ correct sign for the result
 158+ 936C C9                                   ret                                 ; RTS                    \ Return from the subroutine
 159+ 936D              ; if we get here U is positive but still could be zero, now this is handled in DV9
 160+ 936D              .DV12:                  ; nop                               ; BEQ DV13               \ We jumped here having set A to the scale factor in Y, so this jumps up to DV13 if Y = 0
 161+ 936D              ; If we get here then Y is positive and non-zero, so we need to shift the result R to the right by Y places and then set the correct sign for the result. We also
 162+ 936D              ; know that K(3 2 1) will stay 0, as we are shifting the lowest byte to the right, so no set bits will make their way into the top three bytes
 163+ 936D                                      ;ld      a,(varR)                    ; LDA R                  \ Set A = R
 164+ 936D 48                                   ld      c,b
 165+ 936E 3A AA 92                             ld      a,(DIVD3B_SHIFT_REG)
 166+ 9371 47                                   ld      b,a
 167+ 9372 79                                   ld      a,c
 168+ 9373 CB 3F        .DVL10:                 srl     a                           ; LSR A                  \ Shift A right
 169+ 9375 05                                   dec     b                           ; DEY                    \ Decrement the scale factor in Y
 170+ 9376 C2 73 93                             jp      nz,.DVL10                   ; BNE DVL10              \ Loop back to DVL10 until we have shifted right by Y places
 171+ 9379 32 AF 7E                             ld      (varK),a                    ; STA K                  \ Store the shifted A in K so the result is now in K(3 2 1 0)
 172+ 937C 3A B8 7E                             ld      a,(varT)                    ; LDA T                  \ Set K+3 to the sign in T, which we set above to the
 173+ 937F 32 B2 7E                             ld      (varK+3),a                  ; STA K+3                \ correct sign for the result
 174+ 9382 C9                                   ret                                 ; RTS                    \ Return from the subroutine
 175+ 9383              ;
 176+ 9383              ;   Set flags E to 11111110
 177+ 9383              ;   Loop:   A << 2
 178+ 9383              ;           if carry was 0
 179+ 9383              ;               if a >= D
 180+ 9383              ;                   A = A - D
 181+ 9383              ;                   clear carry (probably irrelevant really)
 182+ 9383              ;           else
 183+ 9383
 184+ 9383              ;               sla flags << bringing in carry of 1
 185+ 9383              ;               if bit 7 of flag was set then loop
 186+ 9383              ;                                        elase a = e and exit
 187+ 9383              ;
 188+ 9383              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop BC/DE ==> BC, remainder in HL
 189+ 9383              ;
 190+ 9383              ;INPUTS: hl = dividend dbc = divisor
 191+ 9383              ;OUTPUTS: hl/de -> AHL = quotient CDE = remainder, Carryflag set if divide by 0
 192+ 9383
 193+ 9383 57           DVIDT:                  ld      d,a                     ; D = var P+1
 194+ 9384 3A 9C 7E                             ld      a,(varQ)
 195+ 9387 4F                                   ld      c,a                     ; C = var Q
 196+ 9388 3A 9D 7D                             ld      a,(varP)
 197+ 938B 5F                                   ld      e,a                     ; E = var P
 198+ 938C                                      ; Need fast exists on ABS values
 199+ 938C 7A           BAequDEdivC:            ld      a,d                     ; Fast exit is value is 0
 200+ 938D B3                                   or      e                       ; .
 201+ 938E 28 2A                                jr      z,.ResultIsZero         ; .
 202+ 9390 79                                   ld      a,c                     ; Fast exit is divide by 0
 203+ 9391 A7                                   and     a                       ;
 204+ 9392 28 29                                jr      z,.ResultIsFFFF         ;
 205+ 9394 7A           .SavSign:               ld      a,d                     ; preserve sign of result in var T
 206+ 9395 A9                                   xor     c                       ;
 207+ 9396 E6 80                                and     $80
 208+ 9398 6F                                   ld      l,a                     ; l = var T
 209+ 9399 3E 00                                ld      a,0
 210+ 939B 06 10                                ld      b,16
 211+ 939D                                      ShiftDELeft1
 211+ 939D CB 23       >			   sla e
 211+ 939F CB 12       >			   rl  d
 212+ 93A1 CB 21                                sla     c                       ; c = abs c
 213+ 93A3 CB 39                                srl     c
 214+ 93A5 CB 17        .DivideLoop:            rl      a
 215+ 93A7                                      JumpIfALTNusng c, .SkipSubtract
 215+ 93A7 B9          >                        cp      c
 215+ 93A8 DA AE 93    >                        jp		c, .SkipSubtract
 216+ 93AB                                      ClearCarryFlag
 216+ 93AB B7          >                        or a
 217+ 93AC 99                                   sbc     c
 218+ 93AD                                      ClearCarryFlag
 218+ 93AD B7          >                        or a
 219+ 93AE 3F           .SkipSubtract:          ccf
 220+ 93AF CB 13                                rl      e
 221+ 93B1 CB 12                                rl      d
 222+ 93B3 05                                   dec     b
 223+ 93B4 20 EF                                jr      nz,.DivideLoop
 224+ 93B6 7B                                   ld      a,e
 225+ 93B7 B5                                   or      l
 226+ 93B8 42                                   ld      b,d
 227+ 93B9 C9                                   ret
 228+ 93BA              .ResultIsZero:          ZeroA
 228+ 93BA AF          >                        xor a
 229+ 93BB 47                                   ld      b,a
 230+ 93BC C9                                   ret
 231+ 93BD 3E FF        .ResultIsFFFF:          ld      a,$FF
 232+ 93BF 47                                   ld      b,a
 233+ 93C0 C9                                   ret
 234+ 93C1
 235+ 93C1 57           DIV96:                  ld      d,a                     ; D = var P+1
 236+ 93C2 3A 9C 7E                             ld      a,(varQ)
 237+ 93C5 0E 60                                ld      c,96                    ; C = var Q
 238+ 93C7 3A 9D 7D                             ld      a,(varP)
 239+ 93CA 5F                                   ld      e,a                     ; E = var P
 240+ 93CB                                      ; Need fast exists on ABS values
 241+ 93CB 7A           BAequDEdiv96            ld      a,d                     ; Fast exit is value is 0
 242+ 93CC B3                                   or      e                       ; .
 243+ 93CD 28 26                                jr      z,.ResultIsZero         ; .
 244+ 93CF 7A           .SavSign:               ld      a,d                     ; preserve sign of result in var T
 245+ 93D0 A9                                   xor     c                       ;
 246+ 93D1 E6 80                                and     $80
 247+ 93D3 6F                                   ld      l,a                     ; l = var T
 248+ 93D4 3E 00                                ld      a,0
 249+ 93D6 06 10                                ld      b,16
 250+ 93D8                                      ShiftDELeft1
 250+ 93D8 CB 23       >			   sla e
 250+ 93DA CB 12       >			   rl  d
 251+ 93DC CB 21                                sla     c                       ; c = abs c
 252+ 93DE CB 39                                srl     c
 253+ 93E0 CB 17        .DivideLoop:            rl      a
 254+ 93E2                                      JumpIfALTNusng c, .SkipSubtract
 254+ 93E2 B9          >                        cp      c
 254+ 93E3 DA E9 93    >                        jp		c, .SkipSubtract
 255+ 93E6                                      ClearCarryFlag
 255+ 93E6 B7          >                        or a
 256+ 93E7 99                                   sbc     c
 257+ 93E8                                      ClearCarryFlag
 257+ 93E8 B7          >                        or a
 258+ 93E9 3F           .SkipSubtract:          ccf
 259+ 93EA CB 13                                rl      e
 260+ 93EC CB 12                                rl      d
 261+ 93EE 05                                   dec     b
 262+ 93EF 20 EF                                jr      nz,.DivideLoop
 263+ 93F1 7B                                   ld      a,e
 264+ 93F2 B5                                   or      l
 265+ 93F3 42                                   ld      b,d
 266+ 93F4 C9                                   ret
 267+ 93F5              .ResultIsZero:          ZeroA
 267+ 93F5 AF          >                        xor a
 268+ 93F6 47                                   ld      b,a
 269+ 93F7 C9                                   ret
 270+ 93F8
 271+ 93F8 14           Div16by24usgn:          inc     d                           ; can we fast retu
 272+ 93F9 15                                   dec     d
 273+ 93FA 20 13                                jr      nz,.ResultZero
 274+ 93FC 50 59                                ld      de,bc                       ; so prep for bc/de
 275+ 93FE 44 4D                                ld      bc,hl
 276+ 9400 7A           .div16by16usng:         ld      a,d
 277+ 9401 B3                                   or      e
 278+ 9402 28 10                                jr      z,.DivideByZero
 279+ 9404 14                                   inc     d
 280+ 9405 15                                   dec     d
 281+ 9406 CD 58 95                             call    BC_Div_DE
 282+ 9409                                      ZeroA
 282+ 9409 AF          >                        xor a
 283+ 940A EB                                   ex      de,hl                       ; de = remainder (need to fix c after hl = nothing of worth)
 284+ 940B 60 69                                ld      hl,bc                       ; hl = result (a is zero from above)
 285+ 940D 4F                                   ld      c,a                         ; now fix c
 286+ 940E C9                                   ret
 287+ 940F AF           .ResultZero:            xor     a                           ; set AHL to 0 as d was 0 so h is zero
 288+ 9410 4F                                   ld      c,a                         ; c = 0
 289+ 9411 67                                   ld      h,a
 290+ 9412 6F                                   ld      l,a
 291+ 9413 C9                                   ret
 292+ 9414 3E FF        .DivideByZero:          ld      a,$FF
 293+ 9416 67                                   ld      h,a
 294+ 9417 6F                                   ld      l,a
 295+ 9418                                      SetCarryFlag
 295+ 9418 37          >                        scf
 296+ 9419 C9                                   ret
 297+ 941A
 298+ 941A              ;DIVD4 P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
 299+ 941A                          IFDEF HLEquAmul256DivD_Used
 300+ 941A ~            HLEquAmul256DivD:       ld		b,8							; counter
 301+ 941A ~                                    sla		a							;
 302+ 941A ~                                    ld		h,a							; r a * 2 we will build result in hl
 303+ 941A ~            .DivideLoop:            rl		a							; a = a * 2
 304+ 941A ~                                    jr      c,.StraightToSubtraction    ; jump on carry to subtraction
 305+ 941A ~                                    cp      d                           ; what was var Q
 306+ 941A ~                                    jr		c,.SkipSubtraction	        ; if a < d skip subtraction, note this will come to skip subtraction with carry the wrong way round
 307+ 941A ~            .StraightToSubtraction: ClearCarryFlag                      ; in 6502 the borrow flag is inverted carry, z80 just uses carry so we need to clear it
 308+ 941A ~                                    sbc     a,d                         ; a = a - q
 309+ 941A ~                                    ClearCarryFlag                      ; set carry so it gets shifted into bit 0 of b. we do this as we have to flip carry due to jr c from earlier cp d
 310+ 941A ~            .SkipSubtraction:       ccf                                 ; we need to do this as 6502 does opposite on carry, i.e. if we jumped direct here then carry would be set in z80
 311+ 941A ~                                    rl      h                           ; roll d left bringing in carry if there was an sbc performed
 312+ 941A ~                                    djnz    .DivideLoop                 ; 8 cycles
 313+ 941A ~            .CalculateRemainder:    cp      d                           ; calulate 256 * a / d if q >= q then answer will not fit in one byte d is still set, a holds remainder to be subtracted
 314+ 941A ~                                    jr      nc, .RemainderTooBig
 315+ 941A ~                                    ClearCarryFlag                      ; remove carry as the previous cp will have set it and mess up the sla in the remainder loop
 316+ 941A ~            .InitRemainderLoop:     ld      b,%11111110                 ; loop for bits 1 to 7
 317+ 941A ~                                    ld      l,b                         ; and set l to capture result bits (R)
 318+ 941A ~            .RemainderLoop:         sla     a                           ; shift a left
 319+ 941A ~                                    jr      c, .RemainderSubtraction    ; if there was a carry go to subtraction
 320+ 941A ~                                    cp      d                           ; if a < d then skip subtraction
 321+ 941A ~                                    jr      c,.RemainderSkipSubtract    ; .
 322+ 941A ~                                    sbc     d                           ; a > q so a = a - q, carry will be clear here
 323+ 941A ~            .RemainderSkipSubtract: ccf                                 ; as the jr used z80 we need to flip the carry to behave like 6502
 324+ 941A ~                                    rl      l                           ; rotate counter to the left
 325+ 941A ~                                    jr      c, .RemainderLoop           ; if there was a bit pushed to carry then loop
 326+ 941A ~                                    ret
 327+ 941A ~            .RemainderSubtraction:  sbc     d                           ; as the carry came from an sla we want to retain it
 328+ 941A ~                                    SetCarryFlag                        ; roll in a carry bit to result
 329+ 941A ~                                    rl      l                           ;
 330+ 941A ~                                    jr      c, .RemainderLoop           ; and loop if there was a carry bit that came out
 331+ 941A ~                                    ret
 332+ 941A ~            .RemainderTooBig:       ld      l,$FF                       ; now hl = result
 333+ 941A ~                                    ret
 334+ 941A                          ENDIF
 335+ 941A
 336+ 941A BA           AEquAmul256DivD:        cp      d
 337+ 941B 28 1D                                jr      z,.BothSame
 338+ 941D 30 1E                                jr      nc,.DgtA
 339+ 941F 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
 340+ 9421 CB 27        .DivideLoop:            sla     a
 341+ 9423 38 0D                                jr      c,.LL29
 342+ 9425                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
 342+ 9425 BA          >                        cp      d
 342+ 9426 DA 2B 94    >                        jp		c, .SkipSub
 343+ 9429 92                                   sub     d
 344+ 942A                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
 344+ 942A B7          >                        or a
 345+ 942B              .SkipSub:               FlipCarryFlag                       ; if we did the subtract the carry will be clear so we need to invert to roll in.
 345+ 942B 3F          >                        ccf
 346+ 942C CB 13                                rl      e
 347+ 942E 38 F1                                jr      c,.DivideLoop
 348+ 9430 7B                                   ld      a,e
 349+ 9431 C9                                   ret
 350+ 9432 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
 351+ 9433                                      SetCarryFlag                        ; Set the C flag to rotate into the result in R
 351+ 9433 37          >                        scf
 352+ 9434 CB 13                                rl      e                           ; rotate counter e left
 353+ 9436 38 E9                                jr      c,.DivideLoop               ; if a bit was spat off teh end then loop
 354+ 9438 7B                                   ld      a,e                         ; stick result in a
 355+ 9439 C9                                   ret
 356+ 943A 3E 01        .BothSame:              ld  a,1
 357+ 943C C9                                   ret
 358+ 943D 3E FF        .DgtA:                  ld  a,255                           ; Fail with FF as result
 359+ 943F C9                                   ret
 360+ 9440
 361+ 9440              ; Divide 8-bit values
 362+ 9440              ; In: Divide E by divider C
 363+ 9440              ; Out: A = result, B = rest
 364+ 9440              ;
 365+ 9440              ;;;Div8:
 366+ 9440              ;;;    xor a
 367+ 9440              ;;;    ld b,8
 368+ 9440              ;;;Div8_Loop:
 369+ 9440              ;;;    rl e
 370+ 9440              ;;;    rla
 371+ 9440              ;;;    sub c
 372+ 9440              ;;;    jr nc,Div8_NoAdd
 373+ 9440              ;;;    add a,c
 374+ 9440              ;;;Div8_NoAdd:
 375+ 9440              ;;;    djnz Div8_Loop
 376+ 9440              ;;;    ld b,a0
 377+ 9440              ;;;    ld a,e
 378+ 9440              ;;;    rla
 379+ 9440              ;;;    cpl
 380+ 9440              ;;;    ret
 381+ 9440
 382+ 9440              ;;Inputs: DE is the numerator, BC is the divisor
 383+ 9440              ;;Outputs: DE is the result
 384+ 9440              ;;         A is a copy of E
 385+ 9440              ;;         HL is the remainder
 386+ 9440              ;;         BC is not changed
 387+ 9440              ;; so DE = DE /BC
 388+ 9440              ;140 bytes
 389+ 9440              ;145cc
 390+ 9440
 391+ 9440              MacroDEDivBC:       MACRO
 392+ 9440 ~                                rla
 393+ 9440 ~                                adc     hl,hl
 394+ 9440 ~                                sbc     hl,bc
 395+ 9440 ~                                jr      nc,$+3
 396+ 9440 ~                                add     hl,bc
 397+ 9440                                  ENDM
 398+ 9440
 399+ 9440 AF           DEequDEDivBC:       xor a
 400+ 9441 ED 62                            sbc hl,hl
 401+ 9443 7A                               ld a,d
 402+ 9444                                  MacroDEDivBC
 402+ 9444 17          >                    rla
 402+ 9445 ED 6A       >                    adc     hl,hl
 402+ 9447 ED 42       >                    sbc     hl,bc
 402+ 9449 30 01       >                    jr      nc,$+3
 402+ 944B 09          >                    add     hl,bc
 403+ 944C                                  MacroDEDivBC
 403+ 944C 17          >                    rla
 403+ 944D ED 6A       >                    adc     hl,hl
 403+ 944F ED 42       >                    sbc     hl,bc
 403+ 9451 30 01       >                    jr      nc,$+3
 403+ 9453 09          >                    add     hl,bc
 404+ 9454                                  MacroDEDivBC
 404+ 9454 17          >                    rla
 404+ 9455 ED 6A       >                    adc     hl,hl
 404+ 9457 ED 42       >                    sbc     hl,bc
 404+ 9459 30 01       >                    jr      nc,$+3
 404+ 945B 09          >                    add     hl,bc
 405+ 945C                                  MacroDEDivBC
 405+ 945C 17          >                    rla
 405+ 945D ED 6A       >                    adc     hl,hl
 405+ 945F ED 42       >                    sbc     hl,bc
 405+ 9461 30 01       >                    jr      nc,$+3
 405+ 9463 09          >                    add     hl,bc
 406+ 9464                                  MacroDEDivBC
 406+ 9464 17          >                    rla
 406+ 9465 ED 6A       >                    adc     hl,hl
 406+ 9467 ED 42       >                    sbc     hl,bc
 406+ 9469 30 01       >                    jr      nc,$+3
 406+ 946B 09          >                    add     hl,bc
 407+ 946C                                  MacroDEDivBC
 407+ 946C 17          >                    rla
 407+ 946D ED 6A       >                    adc     hl,hl
 407+ 946F ED 42       >                    sbc     hl,bc
 407+ 9471 30 01       >                    jr      nc,$+3
 407+ 9473 09          >                    add     hl,bc
 408+ 9474                                  MacroDEDivBC
 408+ 9474 17          >                    rla
 408+ 9475 ED 6A       >                    adc     hl,hl
 408+ 9477 ED 42       >                    sbc     hl,bc
 408+ 9479 30 01       >                    jr      nc,$+3
 408+ 947B 09          >                    add     hl,bc
 409+ 947C                                  MacroDEDivBC
 409+ 947C 17          >                    rla
 409+ 947D ED 6A       >                    adc     hl,hl
 409+ 947F ED 42       >                    sbc     hl,bc
 409+ 9481 30 01       >                    jr      nc,$+3
 409+ 9483 09          >                    add     hl,bc
 410+ 9484 17                               rla
 411+ 9485 2F                               cpl
 412+ 9486 57                               ld d,a
 413+ 9487
 414+ 9487 7B                               ld a,e
 415+ 9488                                  MacroDEDivBC
 415+ 9488 17          >                    rla
 415+ 9489 ED 6A       >                    adc     hl,hl
 415+ 948B ED 42       >                    sbc     hl,bc
 415+ 948D 30 01       >                    jr      nc,$+3
 415+ 948F 09          >                    add     hl,bc
 416+ 9490                                  MacroDEDivBC
 416+ 9490 17          >                    rla
 416+ 9491 ED 6A       >                    adc     hl,hl
 416+ 9493 ED 42       >                    sbc     hl,bc
 416+ 9495 30 01       >                    jr      nc,$+3
 416+ 9497 09          >                    add     hl,bc
 417+ 9498                                  MacroDEDivBC
 417+ 9498 17          >                    rla
 417+ 9499 ED 6A       >                    adc     hl,hl
 417+ 949B ED 42       >                    sbc     hl,bc
 417+ 949D 30 01       >                    jr      nc,$+3
 417+ 949F 09          >                    add     hl,bc
 418+ 94A0                                  MacroDEDivBC
 418+ 94A0 17          >                    rla
 418+ 94A1 ED 6A       >                    adc     hl,hl
 418+ 94A3 ED 42       >                    sbc     hl,bc
 418+ 94A5 30 01       >                    jr      nc,$+3
 418+ 94A7 09          >                    add     hl,bc
 419+ 94A8                                  MacroDEDivBC
 419+ 94A8 17          >                    rla
 419+ 94A9 ED 6A       >                    adc     hl,hl
 419+ 94AB ED 42       >                    sbc     hl,bc
 419+ 94AD 30 01       >                    jr      nc,$+3
 419+ 94AF 09          >                    add     hl,bc
 420+ 94B0                                  MacroDEDivBC
 420+ 94B0 17          >                    rla
 420+ 94B1 ED 6A       >                    adc     hl,hl
 420+ 94B3 ED 42       >                    sbc     hl,bc
 420+ 94B5 30 01       >                    jr      nc,$+3
 420+ 94B7 09          >                    add     hl,bc
 421+ 94B8                                  MacroDEDivBC
 421+ 94B8 17          >                    rla
 421+ 94B9 ED 6A       >                    adc     hl,hl
 421+ 94BB ED 42       >                    sbc     hl,bc
 421+ 94BD 30 01       >                    jr      nc,$+3
 421+ 94BF 09          >                    add     hl,bc
 422+ 94C0                                  MacroDEDivBC
 422+ 94C0 17          >                    rla
 422+ 94C1 ED 6A       >                    adc     hl,hl
 422+ 94C3 ED 42       >                    sbc     hl,bc
 422+ 94C5 30 01       >                    jr      nc,$+3
 422+ 94C7 09          >                    add     hl,bc
 423+ 94C8 17                               rla
 424+ 94C9 2F                               cpl
 425+ 94CA 5F                               ld e,a
 426+ 94CB C9                               ret
 427+ 94CC              ;divdide by 16 using undocumented instrunctions
 428+ 94CC              ;Input: BC = Dividend, DE = Divisor, HL = 0
 429+ 94CC              ;Output: BC = Quotient, HL = Remainder
 430+ 94CC              ; Our use
 431+ 94CC              ; BC = A0
 432+ 94CC              ; DE = 0C
 433+ 94CC              ; so BC = a * 256 / C
 434+ 94CC              DIV16Amul256dCUNDOC:    JumpIfAGTENusng	  c,DEV16ATooLarge                                          ; first off if a > c ten return 255
 434+ 94CC B9          >                        cp     c
 434+ 94CD D2 F8 94    >                        jp		nc,DEV16ATooLarge
 435+ 94D0 47                                   ld      b,a
 436+ 94D1 59                                   ld      e,c
 437+ 94D2 0E 00                                ld      c,0
 438+ 94D4 16 00                                ld      d,0
 439+ 94D6 C3 E3 94                             jp      DIV16UNDOC
 440+ 94D9 47           DIV16Amul256dQUNDOC:    ld      b,a
 441+ 94DA 0E 00                                ld      c,0
 442+ 94DC 21 9C 7E                             ld      hl,varQ
 443+ 94DF 7E                                   ld      a,(hl)
 444+ 94E0 16 00                                ld      d,0
 445+ 94E2 5F                                   ld      e,a
 446+ 94E3              DIV16BCDivDEUNDOC:
 447+ 94E3 21 00 00     DIV16UNDOC:             ld      hl,0
 448+ 94E6 78                                   ld      a,b
 449+ 94E7 06 10                                ld      b,16
 450+ 94E9 CB 31        DIV16UNDOCLOOP:         sll	c		; unroll 16 times
 451+ 94EB 17                                   rla			; ...
 452+ 94EC ED 6A                                adc	hl,hl		; ...
 453+ 94EE ED 52                                sbc	hl,de		; ...
 454+ 94F0 30 02                                jr	nc,DIV16UNDOCSKIP		; ...
 455+ 94F2 19                                   add	hl,de		; ...
 456+ 94F3 0D                                   dec	c		; ...
 457+ 94F4 10 F3        DIV16UNDOCSKIP:         djnz DIV16UNDOCLOOP
 458+ 94F6 47                                   ld   b,a
 459+ 94F7 C9                                   ret
 460+ 94F8 01 FF 00     DEV16ATooLarge:         ld     bc,$00FF
 461+ 94FB C9                                   ret
 462+ 94FC              ; switch to logarithm version
 463+ 94FC              ; "> asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 464+ 94FC 06 08        asm_div8:               ld b,8
 465+ 94FE AF                                   xor a
 466+ 94FF CB 21        .div8_loop:	            sla c
 467+ 9501 17                                   rla
 468+ 9502 BA                                   cp d
 469+ 9503 38 02                                jr c,.div8_skip
 469+ 9505
 470+ 9505 0C                                   inc c
 471+ 9506 92                                   sub d
 472+ 9507 10 F6        .div8_skip:	            djnz .div8_loop
 473+ 9509 C9                                   ret
 474+ 950A              ; ">asm_div16: HL_Div_C: HL is the numerator,  C is the denominator, output A is the remainder, B is 0, C,DE is not changedHL is the quotient"
 475+ 950A 06 10        asm_div16:              ld b,16
 476+ 950C AF                                   xor a
 477+ 950D CB 25        div16_loop:	            sla l
 478+ 950F CB 14                                rl	h
 479+ 9511              ;    add hl,hl
 480+ 9511 17                                   rla
 481+ 9512 B9                                   cp c
 482+ 9513 38 02                                jr c,div16_skip
 483+ 9515 2C                                   inc l
 484+ 9516 91                                   sub c
 485+ 9517 10 F4        div16_skip:		        djnz div16_loop
 486+ 9519 C9                                   ret
 487+ 951A              ;
 488+ 951A              ; Divide 16-bit values (with 16-bit result)
 489+ 951A              ; In: Divide BC by divider DE
 490+ 951A              ; Out: BC = result, HL = rest
 491+ 951A              ;
 492+ 951A              HLDivC_Iteration: 	    MACRO
 493+ 951A ~                                    add	hl,hl		; unroll 16 times
 494+ 951A ~                                    rla				; ...
 495+ 951A ~                                    cp	c			; ...
 496+ 951A ~                                    jr	1F
 497+ 951A ~                                    sub	c			; ...
 498+ 951A ~            1:
 499+ 951A ~                                    inc	l			; ...
 500+ 951A                                      ENDM
 501+ 951A
 502+ 951A              EDivC_Iteration:        MACRO
 503+ 951A ~                                    rl  e
 504+ 951A ~                                    rla
 505+ 951A ~                                    sub c
 506+ 951A ~                                    jr  nc,.Div8_NoAdd
 507+ 951A ~                                    add a,c
 508+ 951A ~            .Div8_NoAdd:
 509+ 951A                                      ENDM
 510+ 951A
 511+ 951A              ; Switch to a logarithm version
 512+ 951A              ; Divide E by divider C Out: A = result, B = rest
 513+ 951A              E_Div_C:                ZeroA
 513+ 951A AF          >                        xor a
 514+ 951B                                      EDivC_Iteration
 514+ 951B CB 13       >                        rl  e
 514+ 951D 17          >                        rla
 514+ 951E 91          >                        sub c
 514+ 951F 30 01       >                        jr  nc,.Div8_NoAdd
 514+ 9521 81          >                        add a,c
 514+ 9522             >.Div8_NoAdd:
 515+ 9522                                      EDivC_Iteration
 515+ 9522 CB 13       >                        rl  e
 515+ 9524 17          >                        rla
 515+ 9525 91          >                        sub c
 515+ 9526 30 01       >                        jr  nc,.Div8_NoAdd
 515+ 9528 81          >                        add a,c
 515+ 9529             >.Div8_NoAdd:
 516+ 9529                                      EDivC_Iteration
 516+ 9529 CB 13       >                        rl  e
 516+ 952B 17          >                        rla
 516+ 952C 91          >                        sub c
 516+ 952D 30 01       >                        jr  nc,.Div8_NoAdd
 516+ 952F 81          >                        add a,c
 516+ 9530             >.Div8_NoAdd:
 517+ 9530                                      EDivC_Iteration
 517+ 9530 CB 13       >                        rl  e
 517+ 9532 17          >                        rla
 517+ 9533 91          >                        sub c
 517+ 9534 30 01       >                        jr  nc,.Div8_NoAdd
 517+ 9536 81          >                        add a,c
 517+ 9537             >.Div8_NoAdd:
 518+ 9537                                      EDivC_Iteration
 518+ 9537 CB 13       >                        rl  e
 518+ 9539 17          >                        rla
 518+ 953A 91          >                        sub c
 518+ 953B 30 01       >                        jr  nc,.Div8_NoAdd
 518+ 953D 81          >                        add a,c
 518+ 953E             >.Div8_NoAdd:
 519+ 953E                                      EDivC_Iteration
 519+ 953E CB 13       >                        rl  e
 519+ 9540 17          >                        rla
 519+ 9541 91          >                        sub c
 519+ 9542 30 01       >                        jr  nc,.Div8_NoAdd
 519+ 9544 81          >                        add a,c
 519+ 9545             >.Div8_NoAdd:
 520+ 9545                                      EDivC_Iteration
 520+ 9545 CB 13       >                        rl  e
 520+ 9547 17          >                        rla
 520+ 9548 91          >                        sub c
 520+ 9549 30 01       >                        jr  nc,.Div8_NoAdd
 520+ 954B 81          >                        add a,c
 520+ 954C             >.Div8_NoAdd:
 521+ 954C                                      EDivC_Iteration
 521+ 954C CB 13       >                        rl  e
 521+ 954E 17          >                        rla
 521+ 954F 91          >                        sub c
 521+ 9550 30 01       >                        jr  nc,.Div8_NoAdd
 521+ 9552 81          >                        add a,c
 521+ 9553             >.Div8_NoAdd:
 522+ 9553 47                                   ld      b,a
 523+ 9554 7B                                   ld      a,e
 524+ 9555 17                                   rla
 525+ 9556 2F                                   cpl
 526+ 9557 C9                                   ret
 527+ 9558
 528+ 9558
 529+ 9558              BCDIVDE_Iteration:      MACRO
 530+ 9558 ~                                    rla
 531+ 9558 ~                                    adc	    hl,hl
 532+ 9558 ~                                    add	    hl,de
 533+ 9558 ~                                    jr	    c,1F
 534+ 9558 ~                                    sbc	    hl,de
 535+ 9558 ~            1:
 536+ 9558                                      ENDM
 537+ 9558
 538+ 9558
 539+ 9558              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop"
 540+ 9558              ;BC/DE ==> BC, remainder in HL
 541+ 9558              ;NOTE: BC/0 returns 0 as the quotient.
 542+ 9558              ;min: 738cc
 543+ 9558              ;max: 898cc
 544+ 9558              ;avg: 818cc
 545+ 9558              ;144 bytes
 546+ 9558 AF           BC_Div_DE:              xor a
 547+ 9559 67                                   ld h,a
 548+ 955A 6F                                   ld l,a
 549+ 955B 93                                   sub e
 550+ 955C 5F                                   ld e,a
 551+ 955D 9F                                   sbc a,a
 552+ 955E 92                                   sub d
 553+ 955F 57                                   ld d,a
 554+ 9560 78                                   ld a,b
 555+ 9561                                      BCDIVDE_Iteration
 555+ 9561 17          >                        rla
 555+ 9562 ED 6A       >                        adc	    hl,hl
 555+ 9564 19          >                        add	    hl,de
 555+ 9565 38 02       >                        jr	    c,1F
 555+ 9567 ED 52       >                        sbc	    hl,de
 555+ 9569             >1:
 556+ 9569                                      BCDIVDE_Iteration
 556+ 9569 17          >                        rla
 556+ 956A ED 6A       >                        adc	    hl,hl
 556+ 956C 19          >                        add	    hl,de
 556+ 956D 38 02       >                        jr	    c,1F
 556+ 956F ED 52       >                        sbc	    hl,de
 556+ 9571             >1:
 557+ 9571                                      BCDIVDE_Iteration
 557+ 9571 17          >                        rla
 557+ 9572 ED 6A       >                        adc	    hl,hl
 557+ 9574 19          >                        add	    hl,de
 557+ 9575 38 02       >                        jr	    c,1F
 557+ 9577 ED 52       >                        sbc	    hl,de
 557+ 9579             >1:
 558+ 9579                                      BCDIVDE_Iteration
 558+ 9579 17          >                        rla
 558+ 957A ED 6A       >                        adc	    hl,hl
 558+ 957C 19          >                        add	    hl,de
 558+ 957D 38 02       >                        jr	    c,1F
 558+ 957F ED 52       >                        sbc	    hl,de
 558+ 9581             >1:
 559+ 9581                                      BCDIVDE_Iteration
 559+ 9581 17          >                        rla
 559+ 9582 ED 6A       >                        adc	    hl,hl
 559+ 9584 19          >                        add	    hl,de
 559+ 9585 38 02       >                        jr	    c,1F
 559+ 9587 ED 52       >                        sbc	    hl,de
 559+ 9589             >1:
 560+ 9589                                      BCDIVDE_Iteration
 560+ 9589 17          >                        rla
 560+ 958A ED 6A       >                        adc	    hl,hl
 560+ 958C 19          >                        add	    hl,de
 560+ 958D 38 02       >                        jr	    c,1F
 560+ 958F ED 52       >                        sbc	    hl,de
 560+ 9591             >1:
 561+ 9591                                      BCDIVDE_Iteration
 561+ 9591 17          >                        rla
 561+ 9592 ED 6A       >                        adc	    hl,hl
 561+ 9594 19          >                        add	    hl,de
 561+ 9595 38 02       >                        jr	    c,1F
 561+ 9597 ED 52       >                        sbc	    hl,de
 561+ 9599             >1:
 562+ 9599                                      BCDIVDE_Iteration
 562+ 9599 17          >                        rla
 562+ 959A ED 6A       >                        adc	    hl,hl
 562+ 959C 19          >                        add	    hl,de
 562+ 959D 38 02       >                        jr	    c,1F
 562+ 959F ED 52       >                        sbc	    hl,de
 562+ 95A1             >1:
 563+ 95A1 17                                   rla
 564+ 95A2 47                                   ld b,a
 565+ 95A3 79                                   ld a,c
 566+ 95A4                                      BCDIVDE_Iteration
 566+ 95A4 17          >                        rla
 566+ 95A5 ED 6A       >                        adc	    hl,hl
 566+ 95A7 19          >                        add	    hl,de
 566+ 95A8 38 02       >                        jr	    c,1F
 566+ 95AA ED 52       >                        sbc	    hl,de
 566+ 95AC             >1:
 567+ 95AC                                      BCDIVDE_Iteration
 567+ 95AC 17          >                        rla
 567+ 95AD ED 6A       >                        adc	    hl,hl
 567+ 95AF 19          >                        add	    hl,de
 567+ 95B0 38 02       >                        jr	    c,1F
 567+ 95B2 ED 52       >                        sbc	    hl,de
 567+ 95B4             >1:
 568+ 95B4                                      BCDIVDE_Iteration
 568+ 95B4 17          >                        rla
 568+ 95B5 ED 6A       >                        adc	    hl,hl
 568+ 95B7 19          >                        add	    hl,de
 568+ 95B8 38 02       >                        jr	    c,1F
 568+ 95BA ED 52       >                        sbc	    hl,de
 568+ 95BC             >1:
 569+ 95BC                                      BCDIVDE_Iteration
 569+ 95BC 17          >                        rla
 569+ 95BD ED 6A       >                        adc	    hl,hl
 569+ 95BF 19          >                        add	    hl,de
 569+ 95C0 38 02       >                        jr	    c,1F
 569+ 95C2 ED 52       >                        sbc	    hl,de
 569+ 95C4             >1:
 570+ 95C4                                      BCDIVDE_Iteration
 570+ 95C4 17          >                        rla
 570+ 95C5 ED 6A       >                        adc	    hl,hl
 570+ 95C7 19          >                        add	    hl,de
 570+ 95C8 38 02       >                        jr	    c,1F
 570+ 95CA ED 52       >                        sbc	    hl,de
 570+ 95CC             >1:
 571+ 95CC                                      BCDIVDE_Iteration
 571+ 95CC 17          >                        rla
 571+ 95CD ED 6A       >                        adc	    hl,hl
 571+ 95CF 19          >                        add	    hl,de
 571+ 95D0 38 02       >                        jr	    c,1F
 571+ 95D2 ED 52       >                        sbc	    hl,de
 571+ 95D4             >1:
 572+ 95D4                                      BCDIVDE_Iteration
 572+ 95D4 17          >                        rla
 572+ 95D5 ED 6A       >                        adc	    hl,hl
 572+ 95D7 19          >                        add	    hl,de
 572+ 95D8 38 02       >                        jr	    c,1F
 572+ 95DA ED 52       >                        sbc	    hl,de
 572+ 95DC             >1:
 573+ 95DC                                      BCDIVDE_Iteration
 573+ 95DC 17          >                        rla
 573+ 95DD ED 6A       >                        adc	    hl,hl
 573+ 95DF 19          >                        add	    hl,de
 573+ 95E0 38 02       >                        jr	    c,1F
 573+ 95E2 ED 52       >                        sbc	    hl,de
 573+ 95E4             >1:
 574+ 95E4 17                                   rla
 575+ 95E5 4F                                   ld c,a
 576+ 95E6 C9                                   ret
 577+ 95E7              ; BC = BC / DE
 578+ 95E7              ; HL = BC % DE
 579+ 95E7              ; if HL > 0 BC -= 1
 580+ 95E7 7A           Floor_DivQ:             ld      a,d
 581+ 95E8 B3                                   or      e
 582+ 95E9 28 22                                jr      z, .divideBy0
 583+ 95EB D5                                   push    de
 584+ 95EC CD 58 95     .DoDivide:              call    BC_Div_DE       ; bc(q0) = bc / de , hl(r0) = bc %de
 585+ 95EF D1                                   pop     de              ; get divisor back to test
 586+ 95F0 CB 7A                                bit     7,d             ; if divisor <0 or = 0 goto else branch
 587+ 95F2 C2 02 96                             jp      nz,.deLTE0
 588+ 95F5 7A                                   ld      a,d
 589+ 95F6 B3                                   or      e
 590+ 95F7 CA 02 96                             jp      z,.deLTE0
 591+ 95FA CB 7C        .deGT0:                 bit     7,h             ; if remainder >=0 return with no adjustment
 592+ 95FC C8                                   ret     z               ; if remainder was not negative then all done
 593+ 95FD 0B                                   dec     bc              ; else q --
 594+ 95FE                                      ClearCarryFlag          ;      r += b
 594+ 95FE B7          >                        or a
 595+ 95FF ED 5A                                adc     hl,de           ;      .
 596+ 9601 C9                                   ret
 597+ 9602 CB 7C        .deLTE0:                bit     7,h             ; if remainder <= 0 retun with no adjustment
 598+ 9604 C8                                   ret     z               ; (return if negative)
 599+ 9605 7C                                   ld      a,h
 600+ 9606 B5                                   or      l               ; (return if zero)
 601+ 9607 C8                                   ret     z
 602+ 9608 0B                                   dec     bc              ; else q --
 603+ 9609                                      ClearCarryFlag          ;      r += b
 603+ 9609 B7          >                        or a
 604+ 960A ED 5A                                adc     hl,de           ;      .
 605+ 960C C9                                   ret
 606+ 960D
 607+ 960D
 608+ 960D 21 00 00     .divideBy0:             ld      hl,0
 609+ 9610 01 01 00                             ld      bc,1
 610+ 9613 C9                                   ret
 611+ 9614
 612+ 9614
 613+ 9614              L_DIV_0_ITERATION:      MACRO
 614+ 9614 ~                                    rl      de              ;left shift dividend + quotient carry
 615+ 9614 ~                                    ex      de,hl
 616+ 9614 ~                                    rl      de              ;left shift remainder + dividend carry
 617+ 9614 ~                                    ex      de,hl
 618+ 9614 ~                                    sub     hl,bc           ;substract divisor from remainder
 619+ 9614 ~                                    jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 620+ 9614 ~                                    add     hl,bc           ;revert subtraction of divisor
 621+ 9614 ~            .skip_revert0:          ccf                     ;complement carry
 622+ 9614 ~                                    rl      de              ;left shift dividend + quotient carry
 623+ 9614 ~                                    ex      de,hl
 624+ 9614 ~                                    rl      de              ;left shift remainder + dividend carry
 625+ 9614 ~                                    ex      de,hl
 626+ 9614 ~                                    sub     hl,bc           ;substract divisor from remainder
 627+ 9614 ~                                    jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 628+ 9614 ~                                    add     hl,bc           ;revert subtraction of divisor
 629+ 9614 ~            .skip_revert1:          ccf                     ;complement carry
 630+ 9614                                      ENDM
 631+ 9614
 632+ 9614              ; HL = DE / BC, DE = DE % BC
 633+ 9614 21 00 00     l_div_0:                ld      hl,0            ;clear remainder
 634+ 9617                                      L_DIV_0_ITERATION
 634+ 9617 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 634+ 961B EB          >                        ex      de,hl
 634+ 961C CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 634+ 9620 EB          >                        ex      de,hl
 634+ 9621 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 634+ 9624 D2 28 96    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 634+ 9627 09          >                        add     hl,bc           ;revert subtraction of divisor
 634+ 9628 3F          >.skip_revert0:          ccf                     ;complement carry
 634+ 9629 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 634+ 962D EB          >                        ex      de,hl
 634+ 962E CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 634+ 9632 EB          >                        ex      de,hl
 634+ 9633 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 634+ 9636 D2 3A 96    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 634+ 9639 09          >                        add     hl,bc           ;revert subtraction of divisor
 634+ 963A 3F          >.skip_revert1:          ccf                     ;complement carry
 635+ 963B                                      L_DIV_0_ITERATION
 635+ 963B CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 635+ 963F EB          >                        ex      de,hl
 635+ 9640 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 635+ 9644 EB          >                        ex      de,hl
 635+ 9645 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 635+ 9648 D2 4C 96    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 635+ 964B 09          >                        add     hl,bc           ;revert subtraction of divisor
 635+ 964C 3F          >.skip_revert0:          ccf                     ;complement carry
 635+ 964D CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 635+ 9651 EB          >                        ex      de,hl
 635+ 9652 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 635+ 9656 EB          >                        ex      de,hl
 635+ 9657 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 635+ 965A D2 5E 96    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 635+ 965D 09          >                        add     hl,bc           ;revert subtraction of divisor
 635+ 965E 3F          >.skip_revert1:          ccf                     ;complement carry
 636+ 965F                                      L_DIV_0_ITERATION
 636+ 965F CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 636+ 9663 EB          >                        ex      de,hl
 636+ 9664 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 636+ 9668 EB          >                        ex      de,hl
 636+ 9669 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 636+ 966C D2 70 96    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 636+ 966F 09          >                        add     hl,bc           ;revert subtraction of divisor
 636+ 9670 3F          >.skip_revert0:          ccf                     ;complement carry
 636+ 9671 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 636+ 9675 EB          >                        ex      de,hl
 636+ 9676 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 636+ 967A EB          >                        ex      de,hl
 636+ 967B B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 636+ 967E D2 82 96    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 636+ 9681 09          >                        add     hl,bc           ;revert subtraction of divisor
 636+ 9682 3F          >.skip_revert1:          ccf                     ;complement carry
 637+ 9683                                      L_DIV_0_ITERATION
 637+ 9683 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 637+ 9687 EB          >                        ex      de,hl
 637+ 9688 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 637+ 968C EB          >                        ex      de,hl
 637+ 968D B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 637+ 9690 D2 94 96    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 637+ 9693 09          >                        add     hl,bc           ;revert subtraction of divisor
 637+ 9694 3F          >.skip_revert0:          ccf                     ;complement carry
 637+ 9695 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 637+ 9699 EB          >                        ex      de,hl
 637+ 969A CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 637+ 969E EB          >                        ex      de,hl
 637+ 969F B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 637+ 96A2 D2 A6 96    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 637+ 96A5 09          >                        add     hl,bc           ;revert subtraction of divisor
 637+ 96A6 3F          >.skip_revert1:          ccf                     ;complement carry
 638+ 96A7                                      L_DIV_0_ITERATION
 638+ 96A7 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 638+ 96AB EB          >                        ex      de,hl
 638+ 96AC CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 638+ 96B0 EB          >                        ex      de,hl
 638+ 96B1 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 638+ 96B4 D2 B8 96    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 638+ 96B7 09          >                        add     hl,bc           ;revert subtraction of divisor
 638+ 96B8 3F          >.skip_revert0:          ccf                     ;complement carry
 638+ 96B9 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 638+ 96BD EB          >                        ex      de,hl
 638+ 96BE CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 638+ 96C2 EB          >                        ex      de,hl
 638+ 96C3 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 638+ 96C6 D2 CA 96    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 638+ 96C9 09          >                        add     hl,bc           ;revert subtraction of divisor
 638+ 96CA 3F          >.skip_revert1:          ccf                     ;complement carry
 639+ 96CB                                      L_DIV_0_ITERATION
 639+ 96CB CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 639+ 96CF EB          >                        ex      de,hl
 639+ 96D0 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 639+ 96D4 EB          >                        ex      de,hl
 639+ 96D5 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 639+ 96D8 D2 DC 96    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 639+ 96DB 09          >                        add     hl,bc           ;revert subtraction of divisor
 639+ 96DC 3F          >.skip_revert0:          ccf                     ;complement carry
 639+ 96DD CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 639+ 96E1 EB          >                        ex      de,hl
 639+ 96E2 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 639+ 96E6 EB          >                        ex      de,hl
 639+ 96E7 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 639+ 96EA D2 EE 96    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 639+ 96ED 09          >                        add     hl,bc           ;revert subtraction of divisor
 639+ 96EE 3F          >.skip_revert1:          ccf                     ;complement carry
 640+ 96EF                                      L_DIV_0_ITERATION
 640+ 96EF CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 640+ 96F3 EB          >                        ex      de,hl
 640+ 96F4 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 640+ 96F8 EB          >                        ex      de,hl
 640+ 96F9 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 640+ 96FC D2 00 97    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 640+ 96FF 09          >                        add     hl,bc           ;revert subtraction of divisor
 640+ 9700 3F          >.skip_revert0:          ccf                     ;complement carry
 640+ 9701 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 640+ 9705 EB          >                        ex      de,hl
 640+ 9706 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 640+ 970A EB          >                        ex      de,hl
 640+ 970B B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 640+ 970E D2 12 97    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 640+ 9711 09          >                        add     hl,bc           ;revert subtraction of divisor
 640+ 9712 3F          >.skip_revert1:          ccf                     ;complement carry
 641+ 9713                                      L_DIV_0_ITERATION
 641+ 9713 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 641+ 9717 EB          >                        ex      de,hl
 641+ 9718 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 641+ 971C EB          >                        ex      de,hl
 641+ 971D B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 641+ 9720 D2 24 97    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 641+ 9723 09          >                        add     hl,bc           ;revert subtraction of divisor
 641+ 9724 3F          >.skip_revert0:          ccf                     ;complement carry
 641+ 9725 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 641+ 9729 EB          >                        ex      de,hl
 641+ 972A CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 641+ 972E EB          >                        ex      de,hl
 641+ 972F B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 641+ 9732 D2 36 97    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 641+ 9735 09          >                        add     hl,bc           ;revert subtraction of divisor
 641+ 9736 3F          >.skip_revert1:          ccf                     ;complement carry
 642+ 9737 CB 13 CB 12                          rl      de              ;left shift dividend + quotient carry
 643+ 973B EB                                   ex      de,hl           ;dividend<>remainder
 644+ 973C C9                                   ret
 645+ 973D
 646+ 973D
 647+ 973D
 648+ 973D 11 FE FF     LLHLdivC:               ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 649+ 9740              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 649+ 9740 CB 25       >			   sla l
 649+ 9742 CB 14       >			   rl  h
 650+ 9744 7C                                   ld      a,h
 651+ 9745 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 652+ 9747                                      JumpIfALTNusng c, .LL132            ; if S <  Q = 256/gradient skip subtractions
 652+ 9747 B9          >                        cp      c
 652+ 9748 DA 53 97    >                        jp		c, .LL132
 653+ 974B 3F           .LL131:                 ccf                                 ; compliment carry
 654+ 974C 99                                   sbc     a,c                         ; q
 655+ 974D 67                                   ld      h,a                         ; h (s)
 656+ 974E 7D                                   ld      a,l                         ; r
 657+ 974F DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 658+ 9751 37                                   scf                                 ; set carry for next rolls
 659+ 9752 3F                                   ccf
 660+ 9753              .LL132:                 RollDELeft1                         ; Rotate de bits left
 660+ 9753 CB 13       >               rl  e
 660+ 9755 CB 12       >               rl  d
 661+ 9757 38 E7                                jr      c,.LL130                    ;
 662+ 9759 EB                                   ex      de,hl                       ; hl = result
 663+ 975A C9                                   ret
 664+ 975B
 665+ 975B
 666+ 975B AF           div_hl_c:               xor	a
 667+ 975C 06 10                                ld	b, 16
 668+ 975E 29           .loop:                  add	hl, hl
 669+ 975F 17                                   rla
 670+ 9760 38 03                                jr	c, $+5
 671+ 9762 B9                                   cp	c
 672+ 9763 38 02                                jr	c, $+4
 673+ 9765 91                                   sub	c
 674+ 9766 2C                                   inc	l
 675+ 9767 10 F5                                djnz	.loop
 676+ 9769 C9                                   ret
 677+ 976A              ;l_div, signed division
 678+ 976A              ; comes in with DE and HL
 679+ 976A              ; HL = DE / HL, DE = DE % HL
 680+ 976A 4A           l_div:                  ld      c,d             ;sign of dividend
 681+ 976B 44                                   ld      b,h             ;sign of divisor
 682+ 976C C5                                   push    bc              ;save signs
 683+ 976D 4D                                   ld      c,l             ;divisor to bc
 684+ 976E 7A                                   ld      a,d
 685+ 976F B7                                   or      a
 686+ 9770 F2 79 97                             jp      p,.NotDENeg
 687+ 9773              .DeNegate:              macronegate16de
 687+ 9773 AF          >					xor 	a
 687+ 9774 93          >                    sub 	e
 687+ 9775 5F          >                    ld 		e,a
 687+ 9776 9F          >                    sbc 	a,a
 687+ 9777 92          >                    sub 	d
 687+ 9778 57          >                    ld 		d,a
 688+ 9779 78           .NotDENeg:              ld      a,b
 689+ 977A B7                                   or      a
 690+ 977B F2 84 97                             jp      p,.NotBCNeg     ; if signs are opposite them flip
 691+ 977E                                      macronegate16bc
 691+ 977E AF          >					xor 	a
 691+ 977F 91          >                    sub 	c
 691+ 9780 4F          >                    ld 		c,a
 691+ 9781 9F          >                    sbc 	a,a
 691+ 9782 90          >                    sub 	b
 691+ 9783 47          >                    ld 		b,a
 692+ 9784 CD 14 96     .NotBCNeg:              call    l_div_0         ;unsigned HL = DE / BC, DE = DE % BC
 693+ 9787                                      ; C standard requires that the result of division satisfy a = (a/b)*b + a%b emainder takes sign of the dividend
 694+ 9787 C1                                   pop     bc              ;restore sign info
 695+ 9788 78                                   ld      a,b
 696+ 9789 A9                                   xor     c               ;quotient, sign of dividend^divisor
 697+ 978A F2 93 97                             jp      p,.NotHLNeg
 698+ 978D                                      macronegate16hl
 698+ 978D AF          >					xor 	a
 698+ 978E 95          >					sub 	l
 698+ 978F 6F          >					ld 		l,a
 698+ 9790 9F          >					sbc 	a,a
 698+ 9791 94          >					sub 	h
 698+ 9792 67          >					ld 		h,a
 699+ 9793 79           .NotHLNeg:              ld      a,c
 700+ 9794 B7                                   or      a,a             ;remainder, sign of dividend
 701+ 9795 F0                                   ret     p
 702+ 9796                                      macronegate16de
 702+ 9796 AF          >					xor 	a
 702+ 9797 93          >                    sub 	e
 702+ 9798 5F          >                    ld 		e,a
 702+ 9799 9F          >                    sbc 	a,a
 702+ 979A 92          >                    sub 	d
 702+ 979B 57          >                    ld 		d,a
 703+ 979C C9                                   ret
 704+ 979D
# file closed: ./Maths/asm_divide.asm
1106  979D                  INCLUDE "./Maths/asm_unitvector.asm"
# file opened: ./Maths/asm_unitvector.asm
   1+ 979D              asm_tis2:
   2+ 979D              ; ">TIS2 A = (A / Q * 96) so A = -96 ---- 96  range "
   3+ 979D              ; ">DOES NOT DO SIGNED YET"
   4+ 979D F5           	push af
   5+ 979E E6 7F            and SignMask8Bit
   6+ 97A0 57           	ld d,a				;; d = A
   7+ 97A1 3A 9C 7E     	ld a,(varQ)
   8+ 97A4 5F           	ld e,a
   9+ 97A5 7A           	ld a,d
  10+ 97A6 BB           	cp e
  11+ 97A7 30 11        	jr nc, .tis2_set96	;; jump if a >= Q
  12+ 97A9 1E 60        	ld e, 96
  13+ 97AB ED 30        	mul				; de = d * 96 (also a * 96 )
  14+ 97AD EB           	ex de,hl
  15+ 97AE 3A 9C 7E     	ld a,(varQ)
  16+ 97B1 4F           	ld c,a
  17+ 97B2 CD 0A 95     	call asm_div16
  18+ 97B5 F1           	pop af
  19+ 97B6 E6 80        	and $80
  20+ 97B8 B5           	or l
  21+ 97B9 C9           	ret
  22+ 97BA              .tis2_set96:
  23+ 97BA F1           	pop af
  24+ 97BB E6 80        	and $80
  25+ 97BD F6 96        	or $96
  26+ 97BF C9           	ret
  27+ 97C0
  28+ 97C0
  29+ 97C0              asm_unit_vector:
  30+ 97C0              squareregfx:
  31+ 97C0 3A A6 C0     	ld a,(UBnkXScaled)
  32+ 97C3 57           	ld d,a
  33+ 97C4 5F           	ld e,a
  34+ 97C5 ED 30        	mul
  35+ 97C7 EB           	ex de,hl
  36+ 97C8              squareregfy:
  37+ 97C8 3A A8 C0     	ld a, (UBnkYScaled)
  38+ 97CB 57           	ld d,a
  39+ 97CC 5F           	ld e,a
  40+ 97CD ED 30        	mul
  41+ 97CF 19           	add hl,de
  42+ 97D0              squareregfz:
  43+ 97D0 3A AA C0     	ld a, (UBnkZScaled)
  44+ 97D3 57           	ld d,a
  45+ 97D4 5F           	ld e,a
  46+ 97D5 ED 30        	mul
  47+ 97D7 19           	add hl,de
  48+ 97D8 EB           	ex de,hl			; de de to number to root
  49+ 97D9              hlequsquareroot:
  50+ 97D9 CD 81 91     	call asm_sqrt		; hl = sqrt (fx^2 + fy^2 + fx^2)
  51+ 97DC E5           	push hl				; save it for work 3 copies
  52+ 97DD E5           	push hl				; save it for work
  53+ 97DE E5           	push hl				; save it for work
  54+ 97DF              normfx:
  55+ 97DF 3A A6 C0     	ld a,(UBnkXScaled)
  56+ 97E2 E1           	pop hl				; get copy #1
  57+ 97E3 7D           	ld a,l				; we assume only l had worthwhile data but could spill into h
  58+ 97E4 4F           	ld c,a
  59+ 97E5 CD 9D 97     	call asm_tis2
  60+ 97E8 32 A6 C0     	ld (UBnkXScaled),a
  61+ 97EB              normfy:
  62+ 97EB 3A A8 C0     	ld a,(UBnkYScaled)
  63+ 97EE E1           	pop hl				; get copy #2
  64+ 97EF 7D           	ld a,l
  65+ 97F0 4F           	ld c,a
  66+ 97F1 CD 9D 97     	call asm_tis2
  67+ 97F4 32 A8 C0     	ld (UBnkYScaled),a
  68+ 97F7              normfz:
  69+ 97F7 3A AA C0     	ld a,(UBnkZScaled)
  70+ 97FA E1           	pop hl				; get copy #2
  71+ 97FB 7D           	ld a,l
  72+ 97FC 4F           	ld c,a
  73+ 97FD CD 9D 97     	call asm_tis2
  74+ 9800 32 AA C0     	ld (UBnkZScaled),a
  75+ 9803              asm_unit_vector_end:
  76+ 9803 C9           	ret
  77+ 9804
# file closed: ./Maths/asm_unitvector.asm
1107  9804                  INCLUDE "./Maths/compare16.asm"
# file opened: ./Maths/compare16.asm
   1+ 9804              ; Input:
   2+ 9804              ;       HL = 1st value
   3+ 9804              ;       DE = 2nd value
   4+ 9804              ; Output:
   5+ 9804              ;       CF, ZF = results of comparison:
   6+ 9804              ;
   7+ 9804              ;               CF      ZF      Result
   8+ 9804              ;               -----------------------------------
   9+ 9804              ;               0       0       HL > DE
  10+ 9804              ;               0       1       HL == DE
  11+ 9804              ;               1       0       HL < DE
  12+ 9804              ;               1       1       Impossible
  13+ 9804              ;
  14+ 9804
  15+ 9804
  16+ 9804 E5           CompareBCDESigned:  push    hl
  17+ 9805 A7                               and     a
  18+ 9806 60 69                            ld      hl,bc
  19+ 9808 ED 52                            sbc     hl,de
  20+ 980A E1                               pop     hl
  21+ 980B C9                               ret
  22+ 980C
  23+ 980C E5           CompareDEBCSigned:  push    hl
  24+ 980D A7                               and     a
  25+ 980E 62 6B                            ld      hl,de
  26+ 9810 ED 42                            sbc     hl,bc
  27+ 9812 E1                               pop     hl
  28+ 9813 C9                               ret
  29+ 9814
  30+ 9814
  31+ 9814              ;### CMPGTE -> test if A>=B
  32+ 9814              ;### Input      HL=A, DE=B if hl=> de no carry else de > hl and set carry
  33+ 9814 7C           CompareHLDESgn:     ld a,h
  34+ 9815 AA                               xor d
  35+ 9816 FA 20 98                         jp m, .cmpgte2
  36+ 9819 ED 52                            sbc hl,de
  37+ 981B 30 09                            jr nc, .cmpgte3
  38+ 981D 19           .cmpgte1            add hl,de
  39+ 981E                                  SetCarryFlag
  39+ 981E 37          >                        scf
  40+ 981F C9                               ret
  41+ 9820 CB 7A        .cmpgte2            bit 7,d
  42+ 9822 28 05                            jr z,.cmpgte4
  43+ 9824              .cmpgte5:           ClearCarryFlag
  43+ 9824 B7          >                        or a
  44+ 9825 C9                               ret
  45+ 9826 19           .cmpgte3            add hl,de
  46+ 9827                                  ClearCarryFlag
  46+ 9827 B7          >                        or a
  47+ 9828 C9                               ret
  48+ 9829              .cmpgte4:           SetCarryFlag
  48+ 9829 37          >                        scf
  49+ 982A C9                               ret
  50+ 982B
  51+ 982B              ; Compares HL and DE sets z flag if same, else nz
  52+ 982B 7C           CompareHLDESame:    ld  a,h
  53+ 982C BA                               cp  d
  54+ 982D C0                               ret nz
  55+ 982E 7D                               ld  a,l
  56+ 982F BB                               cp  e
  57+ 9830 C9                               ret
  58+ 9831
  59+ 9831
  60+ 9831
  61+ 9831 7C           CompareHLBCSgn:     ld a,h
  62+ 9832 A8                               xor b
  63+ 9833 FA 3C 98                         jp m, .cmpgte2
  64+ 9836 ED 42                            sbc hl,bc
  65+ 9838 30 06                            jr nc, .cmpgte3
  66+ 983A              .cmpgte1            SetCarryFlag
  66+ 983A 37          >                        scf
  67+ 983B C9                               ret
  68+ 983C CB 78        .cmpgte2            bit 7,b
  69+ 983E 28 FA                            jr z,.cmpgte1
  70+ 9840              .cmpgte3            ClearCarryFlag
  70+ 9840 B7          >                        or a
  71+ 9841 C9                               ret
  72+ 9842
  73+ 9842              CompareHLDESigned:
  74+ 9842 E5           compare16HLDE:      push    hl
  75+ 9843 A7                               and     a
  76+ 9844 ED 52                            sbc     hl,de
  77+ 9846 E1                               pop     hl
  78+ 9847 C9                               ret
  79+ 9848              CompareHLBCSigned:
  80+ 9848 E5           CompareHLBC:        push    hl
  81+ 9849 A7                               and     a
  82+ 984A ED 42                            sbc     hl,bc
  83+ 984C E1                               pop     hl
  84+ 984D C9                               ret
  85+ 984E
  86+ 984E              ; With compare signed we do ABS comparison
  87+ 984E              ; this is used for view ports as we just want to know if its +/- out side of 90 degrees
  88+ 984E
  89+ 984E E5 D5        compare16HLDEABS:   push    hl,,de
  90+ 9850 7C                               ld      a,h                                     ; Quick pass see of both the same sign
  91+ 9851 E6 7F                            and     SignMask8Bit
  92+ 9853 67                               ld      h,a
  93+ 9854 7A                               ld      a,d                                     ; Quick pass see of both the same sign
  94+ 9855 E6 7F                            and     SignMask8Bit
  95+ 9857 57                               ld      d,a
  96+ 9858 A7                               and     a
  97+ 9859 ED 52                            sbc     hl,de
  98+ 985B D1 E1                            pop     hl,,de
  99+ 985D C9                               ret
 100+ 985E
 101+ 985E
# file closed: ./Maths/compare16.asm
1108  985E                  INCLUDE "./Maths/normalise96.asm"
# file opened: ./Maths/normalise96.asm
   1+ 985E              ; a equal a / d * 96
   2+ 985E
   3+ 985E
   4+ 985E DD 7E 00     NormaliseIXVector:      ld		a,(ix+0)	        ; XX15+0
   5+ 9861 E6 7F                                and		SignMask8Bit        ; a = unsigned version
   6+ 9863              .n96SQX:	            inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
   6+ 9863 5F          >			ld	e,a
   6+ 9864 57          >			ld  d,a
   6+ 9865 ED 30       >			mul
   7+ 9867 62 6B                                ld		hl,de		 		; h == varR d = varO e= varA
   8+ 9869 DD 7E 01     .n96SQY:                ld		a,(ix+1)
   9+ 986C E6 7F                                and		SignMask8Bit        ; = abs
  10+ 986E                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  10+ 986E 5F          >			ld	e,a
  10+ 986F 57          >			ld  d,a
  10+ 9870 ED 30       >			mul
  11+ 9872 19                                   add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  12+ 9873 DD 7E 02     .n96SQZ:                ld		a,(ix+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  13+ 9876 E6 7F                                and		SignMask8Bit        ; unsigned
  14+ 9878                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  14+ 9878 5F          >			ld	e,a
  14+ 9879 57          >			ld  d,a
  14+ 987A ED 30       >			mul
  15+ 987C 19           .n96SQADD:              add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  16+ 987D EB                                   ex		de,hl				; hl => de ready for square root
  17+ 987E CD 81 91     .n96SQRT:               call	asm_sqrt			; hl = de = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  18+ 9881 DD 7E 00     .n96NORMX:              ld		a,(ix+0)
  19+ 9884 4F                                   ld		c,a                 ; save copy into c
  20+ 9885 E6 7F                                and		SignMask8Bit
  21+ 9887 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  22+ 9888 CD 7B 9A                             call	AequAdivDmul967Bit	; does not use HL so we can retain it
  23+ 988B 47                                   ld		b,a				    ;++SGN
  24+ 988C 79                                   ld      a,c
  25+ 988D E6 80                                and     SignOnly8Bit			    ;++SGN
  26+ 988F B0                                   or		b				    ;++SGN
  27+ 9890 DD 77 00                             ld		(ix+0),a
  28+ 9893 DD 7E 01     .n96NORMY:              ld		a,(ix+1)
  29+ 9896 4F                                   ld		c,a                 ; save copy into c
  30+ 9897 E6 7F                                and		SignMask8Bit
  31+ 9899 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  32+ 989A CD 7B 9A                             call	AequAdivDmul967Bit	; does not use HL so we can retain it
  33+ 989D 47                                   ld		b,a				    ;++SGN
  34+ 989E 79                                   ld      a,c
  35+ 989F E6 80                                and     SignOnly8Bit			    ;++SGN
  36+ 98A1 B0                                   or		b				    ;++SGN
  37+ 98A2 DD 77 01                             ld		(ix+1),a
  38+ 98A5 DD 7E 02     .n96NORMZ:              ld		a,(ix+2)
  39+ 98A8 4F                                   ld		c,a                 ; save copy into c
  40+ 98A9 E6 7F                                and		SignMask8Bit
  41+ 98AB 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  42+ 98AC CD 7B 9A                             call	AequAdivDmul967Bit	; does not use HL so we can retain it
  43+ 98AF 47                                   ld		b,a				    ;++SGN
  44+ 98B0 79                                   ld      a,c
  45+ 98B1 E6 80                                and     SignOnly8Bit			    ;++SGN
  46+ 98B3 B0                                   or		b				    ;++SGN
  47+ 98B4 DD 77 02                             ld		(ix+2),a
  48+ 98B7 C9                                   ret
  49+ 98B8
  50+ 98B8              ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  51+ 98B8 3A A6 C0     normaliseXX1596S7:      ld		a,(XX15VecX)	    ; XX15+0
  52+ 98BB DD 67                                ld		ixh,a               ; ixh = signed x component
  53+ 98BD E6 7F                                and		SignMask8Bit        ; a = unsigned version
  54+ 98BF              .n96SQX:	            inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  54+ 98BF 5F          >			ld	e,a
  54+ 98C0 57          >			ld  d,a
  54+ 98C1 ED 30       >			mul
  55+ 98C3 62                                   ld		h,d					; h == varR d = varO e= varA
  56+ 98C4 6B                                   ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
  57+ 98C5 3A A7 C0     .n96SQY:                ld		a,(XX15VecY)
  58+ 98C8 DD 6F                                ld		ixl,a               ; ixl = signed y componet
  59+ 98CA E6 7F                                and		SignMask8Bit                 ; = abs
  60+ 98CC                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  60+ 98CC 5F          >			ld	e,a
  60+ 98CD 57          >			ld  d,a
  60+ 98CE ED 30       >			mul
  61+ 98D0 19                                   add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  62+ 98D1 3A A8 C0     .n96SQZ:                ld		a,(XX15VecZ)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  63+ 98D4 FD 67                                ld		iyh,a               ; iyh = signed
  64+ 98D6 E6 7F                                and		SignMask8Bit                 ; unsigned
  65+ 98D8                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  65+ 98D8 5F          >			ld	e,a
  65+ 98D9 57          >			ld  d,a
  65+ 98DA ED 30       >			mul
  66+ 98DC 19           .n96SQADD:              add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  67+ 98DD EB                                   ex		de,hl				; hl => de ready for square root
  68+ 98DE CD 81 91     .n96SQRT:               call	asm_sqrt			; hl = de = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  69+ 98E1 3A A6 C0     .n96NORMX:              ld		a,(XX15VecX)
  70+ 98E4 E6 7F                                and		SignMask8Bit
  71+ 98E6 4F                                   ld		c,a
  72+ 98E7 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  73+ 98E8 CD 7B 9A                             call	AequAdivDmul967Bit	; does not use HL so we can retain it
  74+ 98EB 47                                   ld		b,a				    ;++SGN
  75+ 98EC DD 7C                                ld		a,ixh			    ;++SGN
  76+ 98EE E6 80                                and		$80				    ;++SGN
  77+ 98F0 B0                                   or		b				    ;++SGN
  78+ 98F1 32 A6 C0                             ld		(XX15VecX),a
  79+ 98F4 3A A7 C0     .n96NORMY:              ld		a,(XX15VecY)
  80+ 98F7 E6 7F                                and		SignMask8Bit
  81+ 98F9 4F                                   ld		c,a
  82+ 98FA 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  83+ 98FB CD 7B 9A                             call	AequAdivDmul967Bit     	; does not use HL so we can retain it
  84+ 98FE 47                                   ld		b,a				    ;++SGN
  85+ 98FF DD 7D                                ld		a,ixl			    ;++SGN
  86+ 9901 E6 80                                and		$80				    ;++SGN
  87+ 9903 B0                                   or		b				    ;++SGN
  88+ 9904 32 A7 C0                             ld		(XX15VecY),a
  89+ 9907 3A A8 C0     .n96NORMZ:              ld		a,(XX15VecZ)
  90+ 990A E6 7F                                and		SignMask8Bit
  91+ 990C 4F                                   ld		c,a
  92+ 990D 55                                   ld		d,l				; Q(i.e. l) => D, later we can just pop into de
  93+ 990E CD 7B 9A                             call	AequAdivDmul967Bit;AequAdivDmul96	; does not use HL so we can retain it
  94+ 9911 47                                   ld		b,a				    ;++SGN
  95+ 9912 FD 7C                                ld		a,iyh			    ;++SGN
  96+ 9914 E6 80                                and		$80				    ;++SGN
  97+ 9916 B0                                   or		b				    ;++SGN
  98+ 9917 32 A8 C0                             ld		(XX15VecZ),a
  99+ 991A C9                                   ret
 100+ 991B
 101+ 991B              ; Normalise vector
 102+ 991B              ; scale Q = Sqrt (X^2 + Y^2 + Z^2)
 103+ 991B              ; X = X / Q with 96 = 1 , i.e X = X / Q * 3/8
 104+ 991B              ; Y = Y / Q with 96 = 1 , i.e Y = Y / Q * 3/8
 105+ 991B              ; Z = Z / Q with 96 = 1 , i.e Z = Z / Q * 3/8
 106+ 991B
# file closed: ./Maths/normalise96.asm
1109  991B                  INCLUDE "./Maths/binary_to_decimal.asm"
# file opened: ./Maths/binary_to_decimal.asm
   1+ 991B              ;Number in hl to decimal ASCII
   2+ 991B              ;Thanks to z80 Bits
   3+ 991B              ;inputs:	hl = number to ASCII
   4+ 991B              ;example: hl=300 outputs '00300'
   5+ 991B              ;destroys: af, bc, hl, de used
   6+ 991B              DispHLtoDE:
   7+ 991B              ; "DispHL, writes HL to DE address"
   8+ 991B 01 F0 D8     	ld	bc,-10000
   9+ 991E CD 34 99     	call	Num1
  10+ 9921 01 18 FC     	ld	bc,-1000
  11+ 9924 CD 34 99     	call	Num1
  12+ 9927 01 9C FF     	ld	bc,-100
  13+ 992A CD 34 99     	call	Num1
  14+ 992D 0E F6        	ld	c,-10
  15+ 992F CD 34 99     	call	Num1
  16+ 9932 0E FF        	ld	c,-1
  17+ 9934              Num1:
  18+ 9934 3E 2F        	ld	a,'0'-1
  19+ 9936              .Num2:
  20+ 9936 3C           	inc	a
  21+ 9937 09           	add	hl,bc
  22+ 9938 38 FC        	jr	c,.Num2
  23+ 993A ED 42        	sbc	hl,bc
  24+ 993C 12           	ld	(de),a
  25+ 993D 13           	inc	de
  26+ 993E C9           	ret
  27+ 993F
  28+ 993F              DispAtoDE:
  29+ 993F 26 00        	ld h,0
  30+ 9941 6F           	ld l,a
  31+ 9942 C3 1B 99     	jp DispHLtoDE
  32+ 9945
  33+ 9945              DispPriceAtoDE:
  34+ 9945 26 00        	ld h,0
  35+ 9947 6F           	ld l,a
  36+ 9948 01 9C FF     	ld	bc,-100
  37+ 994B CD 5B 99     	call	.NumLeadBlank1
  38+ 994E 0E F6        	ld	c,-10
  39+ 9950 CD 34 99     	call	Num1
  40+ 9953 3E 2E        	ld		a,'.'					; we could assume preformat but
  41+ 9955                                  DISPLAY "TODO:  optimise "
  42+ 9955 12           	ld		(de),a					; we can optimse that later TODO
  43+ 9956 13           	inc		de						; with just an inc De
  44+ 9957 0E FF        	ld	c,-1
  45+ 9959 18 D9        	jr		Num1
  46+ 995B              .NumLeadBlank1:
  47+ 995B 3E 2F        	ld	a,'0'-1
  48+ 995D              .NumLeadBlank2:
  49+ 995D 3C           	inc	a
  50+ 995E 09           	add	hl,bc
  51+ 995F 38 FC        	jr	c,.NumLeadBlank2
  52+ 9961 FE 30        	cp	'0'
  53+ 9963 20 02        	jr	nz,.DontBlank
  54+ 9965              .Blank:
  55+ 9965 3E 20        	ld	a,' '
  56+ 9967              .DontBlank:
  57+ 9967 ED 42        	sbc	hl,bc
  58+ 9969 12           	ld	(de),a
  59+ 996A 13           	inc	de
  60+ 996B C9           	ret
  61+ 996C
  62+ 996C              DispQtyAtoDE:
  63+ 996C FE 00        	cp	0
  64+ 996E 28 23        	jr	z,.NoStock
  65+ 9970 26 00        	ld h,0
  66+ 9972 6F           	ld l,a
  67+ 9973 01 9C FF     	ld	bc,-100
  68+ 9976 CD 82 99     	call	.NumLeadBlank1
  69+ 9979 0E F6        	ld	c,-10
  70+ 997B CD 82 99     	call	.NumLeadBlank1
  71+ 997E 0E FF        	ld	c,-1
  72+ 9980 18 B2        	jr		Num1
  73+ 9982              .NumLeadBlank1:
  74+ 9982 3E 2F        	ld	a,'0'-1
  75+ 9984              .NumLeadBlank2:
  76+ 9984 3C           	inc	a
  77+ 9985 09           	add	hl,bc
  78+ 9986 38 FC        	jr	c,.NumLeadBlank2
  79+ 9988 FE 30        	cp	'0'
  80+ 998A 20 02        	jr	nz,.DontBlank
  81+ 998C              .Blank:
  82+ 998C 3E 20        	ld	a,' '
  83+ 998E              .DontBlank:
  84+ 998E ED 42        	sbc	hl,bc
  85+ 9990 12           	ld	(de),a
  86+ 9991 13           	inc	de
  87+ 9992 C9           	ret
  88+ 9993              .NoStock:
  89+ 9993 3E 20        	ld	a,' '
  90+ 9995 12           	ld	(de),a
  91+ 9996 13           	inc	de
  92+ 9997 12           	ld	(de),a
  93+ 9998 13           	inc	de
  94+ 9999 3E 2D        	ld	a,'-'
  95+ 999B 12           	ld	(de),a
  96+ 999C 13           	inc de
  97+ 999D C9           	ret
  98+ 999E
  99+ 999E
 100+ 999E              ;### CLCN32 -> Converts 32Bit-Value in ASCII-String (terminated by 0)
 101+ 999E              ;### Input      DE,IX=32bit value, IY=destination address
 102+ 999E              ;### Output     IY=last char in destination string
 103+ 999E              ;### Destroyed AF,BC,DE,HL,IX
 104+ 999E 01 00 00 00  clcn32t dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 104+ 99A2 0A 00 00 00
 104+ 99A6 64 00 00 00
 104+ 99AA E8 03 00 00
 104+ 99AE 10 27 00 00
 105+ 99B2 A0 86 01 00          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 105+ 99B6 40 42 0F 00
 105+ 99BA 80 96 98 00
 105+ 99BE 00 E1 F5 05
 105+ 99C2 00 CA 9A 3B
 106+ 99C6 00 00 00 00  clcn32z ds 4
 107+ 99CA
 108+ 99CA              ; As per display but shifts final digit by 1 and puts in "." for 1 decimal place
 109+ 99CA CD D9 99     DispDEIXtoIY1DP:        call    DispDEIXtoIY
 110+ 99CD FD 7E 00                             ld      a,(IY+0)
 111+ 99D0 FD 77 01                             ld      (IY+1),a
 112+ 99D3 3E 2E                                ld      a,"."
 113+ 99D5 FD 77 00                             ld      (IY+0),a
 114+ 99D8 C9                                   ret
 115+ 99D9
 116+ 99D9 DD 22 C6 99  DispDEIXtoIY:           ld (clcn32z),ix
 117+ 99DD ED 53 C8 99                          ld (clcn32z+2),de
 118+ 99E1 DD 21 C2 99                          ld ix,clcn32t+36
 119+ 99E5 06 09                                ld b,9
 120+ 99E7 0E 00                                ld c,0
 121+ 99E9 3E 30        .clcn321:               ld a,'0'
 122+ 99EB B7                                   or a
 123+ 99EC DD 5E 00     .clcn322:               ld e,(ix+0)
 124+ 99EF DD 56 01                             ld d,(ix+1)
 125+ 99F2 2A C6 99                             ld hl,(clcn32z)
 126+ 99F5 ED 52                                sbc hl,de
 127+ 99F7 22 C6 99                             ld (clcn32z),hl
 128+ 99FA DD 5E 02                             ld e,(ix+2)
 129+ 99FD DD 56 03                             ld d,(ix+3)
 130+ 9A00 2A C8 99                             ld hl,(clcn32z+2)
 131+ 9A03 ED 52                                sbc hl,de
 132+ 9A05 22 C8 99                             ld (clcn32z+2),hl
 133+ 9A08 38 04                                jr c,.clcn325
 134+ 9A0A 0C                                   inc c
 135+ 9A0B 3C                                   inc a
 136+ 9A0C 18 DE                                jr .clcn322
 137+ 9A0E DD 5E 00     .clcn325:               ld e,(ix+0)
 138+ 9A11 DD 56 01                             ld d,(ix+1)
 139+ 9A14 2A C6 99                             ld hl,(clcn32z)
 140+ 9A17 19                                   add hl,de
 141+ 9A18 22 C6 99                             ld (clcn32z),hl
 142+ 9A1B DD 5E 02                             ld e,(ix+2)
 143+ 9A1E DD 56 03                             ld d,(ix+3)
 144+ 9A21 2A C8 99                             ld hl,(clcn32z+2)
 145+ 9A24 ED 5A                                adc hl,de
 146+ 9A26 22 C8 99                             ld (clcn32z+2),hl
 147+ 9A29 11 FC FF                             ld de,-4
 148+ 9A2C DD 19                                add ix,de
 149+ 9A2E 0C                                   inc c
 150+ 9A2F 0D                                   dec c
 151+ 9A30 28 05                                jr z,.clcn323
 152+ 9A32 FD 77 00                             ld (iy+0),a
 153+ 9A35 FD 23                                inc iy
 154+ 9A37 10 B0        .clcn323:               djnz .clcn321
 155+ 9A39 3A C6 99                             ld a,(clcn32z)
 156+ 9A3C C6 30                                add A,'0'
 157+ 9A3E FD 77 00                             ld (iy+0),a
 158+ 9A41 FD 36 01 00                          ld (iy+1),0
 159+ 9A45 C9                                   ret
 160+ 9A46
# file closed: ./Maths/binary_to_decimal.asm
1110  9A46                  INCLUDE "./Maths/Utilities/AequAdivQmul96-TIS2.asm"
# file opened: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
   1+ 9A46              AequAdivQmul96ABS:      JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   1+ 9A46 BA          >                        cp     d
   1+ 9A47 D2 62 9A    >                        jp		nc,.TIS2AccGTEQ
   2+ 9A4A 06 FE                                ld			b,$FE						; division roll (replaced varT)
   3+ 9A4C CB 27        .TIS2RollTLoop:			sla			a
   4+ 9A4E                                      JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
   4+ 9A4E BA          >                        cp      d
   4+ 9A4F DA 65 9A    >                        jp		c, .TIS2SkipSub
   5+ 9A52 9A                                   sbc			a,d							; do subtraction with carry
   6+ 9A53 37                                   scf
   7+ 9A54 CB 10                                rl			b							; T rolled left to push bit out the end
   8+ 9A56 38 F4                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
   9+ 9A58 78           .TIS2SKIPCont:	        ld			a,b							; T
  10+ 9A59 CB 3F                                srl			a							; result / 2
  11+ 9A5B CB 3F                                srl			a							; result / 4
  12+ 9A5D 47                                   ld			b,a							; t = t /4
  13+ 9A5E CB 3F                                srl			a							; result / 8
  14+ 9A60 80                                   add			a,b							; result /8 + result /4
  15+ 9A61 C9                                   ret
  16+ 9A62 3E 60        .TIS2AccGTEQ:           ld			a,$60							; unity
  17+ 9A64 C9                                   ret
  18+ 9A65 B7           .TIS2SkipSub:           or			a
  19+ 9A66 CB 10                                rl			b							; T rolled left to push bit out the end
  20+ 9A68 38 E2                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  21+ 9A6A C3 58 9A                             jp			.TIS2SKIPCont
  22+ 9A6D
  23+ 9A6D
  24+ 9A6D              ; USES 			A DE BC
  25+ 9A6D              ; DOES NOT USE 	HL
  26+ 9A6D              TIS2962C:		; two's compliment entry point, exits not 2's compliment
  27+ 9A6D CB 7F        	bit			7,a
  28+ 9A6F 28 04        	jr			z,AequAdivQmul96
  29+ 9A71 ED 44        	neg										; revers 2s'c and just set neg bit
  30+ 9A73 CB FF        	set			7,a
  31+ 9A75              ; Note negative numbers are bit 7 set not 2's compliment
  32+ 9A75              AequAdivQmul96:								; TIS296:			; .tis2 A = A /Q *96 (or A = A * 3/8 * Q) Reduce Acc in NORM routine i.e. *96/Q clamps at +- 96
  33+ 9A75              TIS2:
  34+ 9A75 4F           	ld			c,a							; copy of Acc
  35+ 9A76 3A 9C 7E     	ld			a,(varQ)
  36+ 9A79 57           	ld			d,a							; d = varQ
  37+ 9A7A 79           	ld			a,c							; recover a
  38+ 9A7B              AequAdivDmul967Bit:
  39+ 9A7B 4F               ld          c,a
  40+ 9A7C 7A               ld          a,d
  41+ 9A7D CB 27            sla         a
  42+ 9A7F 30 10            jr          nc, .OKToDivide
  43+ 9A81              .ScaleDown:
  44+ 9A81 B7               or          a
  45+ 9A82 CB 3A            srl         d
  46+ 9A84
  47+ 9A84 79               ld          a,c
  48+ 9A85 E6 7F            and         SignMask8Bit
  49+ 9A87 CB 3F            srl         a
  50+ 9A89 47               ld          b,a
  51+ 9A8A 79               ld          a,c
  52+ 9A8B E6 80            and         $80
  53+ 9A8D B0               or          b
  54+ 9A8E C3 92 9A         jp          AequAdivDmul96
  55+ 9A91              .OKToDivide:
  56+ 9A91 79               ld          a,c
  57+ 9A92              AequAdivDmul96:
  58+ 9A92 4F           	ld			c,a							; copy of Acc as we need the sign, alternate entry point assuming D preloaded, wastes an "ld c,a" but simplifies code
  59+ 9A93 E6 7F        	and			SignMask8Bit				; ignore sign
  60+ 9A95              	JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  60+ 9A95 BA          >                        cp     d
  60+ 9A96 D2 B6 9A    >                        jp		nc,.TIS2AccGTEQ
  61+ 9A99 06 FE        	ld			b,$FE						; division roll (replaced varT)
  62+ 9A9B              .TIS2RollTLoop:									; .TIL2	; roll T
  63+ 9A9B CB 27        	sla			a
  64+ 9A9D              	JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
  64+ 9A9D BA          >                        cp      d
  64+ 9A9E DA BC 9A    >                        jp		c, .TIS2SkipSub
  65+ 9AA1 9A           	sbc			a,d							; do subtraction with carry
  66+ 9AA2 37           	scf                                     ; set carrry to roll into b
  67+ 9AA3 CB 10        	rl			b							; T rolled left to push bit out the end
  68+ 9AA5 38 F4        	jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
  69+ 9AA7              .TIS2SKIPCont:
  70+ 9AA7 78           	ld			a,b							; A = T = 4 / 4
  71+ 9AA8 CB 3F        	srl			a							; .
  72+ 9AAA CB 3F        	srl			a							; .
  73+ 9AAC 47           	ld			b,a							; .
  74+ 9AAD CB 3F        	srl			a							; A = A / 2 (i.e. T /8)
  75+ 9AAF 80           	add			a,b							; A = T/8 + T/4 (3T/8)
  76+ 9AB0 47           	ld			b,a							; b = 3/8*Acc (max = 96)
  77+ 9AB1 79           	ld			a,c							; copy of Acc to look at sign bit
  78+ 9AB2 E6 80        	and			$80							; recover sign only
  79+ 9AB4 B0           	or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  80+ 9AB5 C9           	ret
  81+ 9AB6              .TIS2AccGTEQ:
  82+ 9AB6              ;TI4:										;\ clean to +/- unity
  83+ 9AB6 79           	ld			a,c
  84+ 9AB7 E6 80        	and			$80							; copy of Acc
  85+ 9AB9 F6 60        	or			$60							; unity
  86+ 9ABB C9           	ret
  87+ 9ABC              .TIS2SkipSub:
  88+ 9ABC              	ClearCarryFlag                          ; Clear carry as it needs to be empty to roll in 0
  88+ 9ABC B7          >                        or a
  89+ 9ABD CB 10        	rl			b							; T rolled left to push bit out the end
  90+ 9ABF 38 DA        	jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
  91+ 9AC1 C3 A7 9A     	jp			.TIS2SKIPCont
  92+ 9AC4
# file closed: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
1111  9AC4                  INCLUDE "./Maths/Utilities/AequAmulQdiv256-FMLTU.asm"
# file opened: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
   1+ 9AC4              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=A*Q/256unsg  Fast multiply"
   2+ 9AC4              fmltu:
   3+ 9AC4 57           AequAmulQdiv256:        ld	d,a
   4+ 9AC5 3A 9C 7E                             ld	a,(varQ)
   5+ 9AC8 5F                                   ld	e,a
   6+ 9AC9 ED 30                                mul
   7+ 9ACB 7A                                   ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   8+ 9ACC C9                                   ret
   9+ 9ACD
  10+ 9ACD 5F           AequAmulDdiv256:        ld  e,a
  11+ 9ACE ED 30                                mul
  12+ 9AD0 7A                                   ld  a,d
  13+ 9AD1 C9                                   ret
  14+ 9AD2
# file closed: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
1112  9AD2                  INCLUDE "./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm"
# file opened: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
   1+ 9AD2              ; "DV42,DV42IYH DE = P.R, c = R"
   2+ 9AD2              DV42IYH:									; as per DV42 but using iyl for Y reg
   3+ 9AD2 21 48 80     		ld		hl,varDustZ
   4+ 9AD5 FD 7D        		ld		a,iyl
   5+ 9AD7 ED 31        		add		hl,a
   6+ 9AD9 7E           		ld		a,(hl)
   7+ 9ADA C3 E6 9A     		jp		DV41
   8+ 9ADD              DV42:										; travel step of dust particle front/rear
   9+ 9ADD 21 48 80     		ld		hl,varDustZ
  10+ 9AE0 3A 87 7D     		ld		a,(regY)
  11+ 9AE3 ED 31        		add		hl,a
  12+ 9AE5 7E           		ld		a,(hl)						; a = SZ[y]
  13+ 9AE6              DV41:										; P.R = speed/ (ZZ/8) dust left/right
  14+ 9AE6 5F           		ld		e,a							; using E as Q var replacement
  15+ 9AE7 3A 96 7E     		ld		a,(DELTA)					; DELTA \ speed, how far has dust moved based on its z-coord.
  16+ 9AEA              DVID4:										; P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
  17+ 9AEA 06 08        		ld		b,8							; counter
  18+ 9AEC CB 27        		sla		a							;
  19+ 9AEE 57           		ld		d,a							; use d for - p = delta * 2
  20+ 9AEF AF           		xor		a
  21+ 9AF0              DVL4:										; counter x loop (b reg)
  22+ 9AF0 CB 17        		rl		a							; a = a * 2
  23+ 9AF2 38 03        		jr		c,DV8						; jump on carry
  24+ 9AF4 BB           		cp		e							; var Q
  25+ 9AF5 38 02        		jr		c,DV5						; skip subtraction
  26+ 9AF7              DV8:
  27+ 9AF7 9B           		sbc		a,e							; a = a - q (with carry)
  28+ 9AF8 37           		scf									;  carry gets set
  29+ 9AF9              DV5:										; skipped subtraction
  30+ 9AF9 CB 12        		rl		d							; d (P hi)
  31+ 9AFB 10 F3        		djnz	DVL4						; dec b and loop loop X, hi left in P.
  32+ 9AFD              .CalcRemainder:								; BFRDIV R=A*256/Q
  33+ 9AFD              ; Note we are not going to call LL28+4 but inline code here:
  34+ 9AFD 06 FE        		ld		b,$FE						; remainder R for AofQ *256/Q
  35+ 9AFF 4F           		ld		c,a							; use c as R var
  36+ 9B00              .RollRemainder:
  37+ 9B00 CB 27        		sla		a
  38+ 9B02 38 11        		jr		c,.Reduce					; if a >> generates carry reduce
  39+ 9B04 B8           		cp		b							; a < q?
  40+ 9B05 30 01        		jr		nc,.DontSBC
  41+ 9B07              .DoSBC:										; a is < q
  42+ 9B07 98           		sbc		a,b							; 	a -= q
  43+ 9B08              .DontSBC:
  44+ 9B08 CB 11        		rl		c							; r << 1
  45+ 9B0A 38 F4        		jr		c, .RollRemainder			; if rol generated a carry, continue
  46+ 9B0C 79           		ld		a,c
  47+ 9B0D 32 9D 7E     		ld		(varR),a					; for backwards compat
  48+ 9B10 7A           		ld		a,d
  49+ 9B11 32 9D 7D     		ld		(varP),a
  50+ 9B14 C9           		ret									; R (c) left with remainder
  51+ 9B15              .Reduce:									; a geneated a carry
  52+ 9B15 98           		sbc		a,b							; a = a - (q +1)
  53+ 9B16 37           		scf									; set carry flag for rl
  54+ 9B17 CB 11        		rl		c							; r << 1 briging in carry
  55+ 9B19 38 E5        		jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  56+ 9B1B 79           		ld		a,c
  57+ 9B1C 32 9D 7E     		ld		(varR),a					; for backwards compat
  58+ 9B1F 7A           		ld		a,d
  59+ 9B20 32 9D 7D     		ld		(varP),a
  60+ 9B23 C9           		ret
  61+ 9B24              .AnswerTooBig:
  62+ 9B24 0E FF        		ld		c,$FF						; arse its too big
  63+ 9B26 79           		ld		a,c
  64+ 9B27 32 9D 7E     		ld		(varR),a					; for backwards compat
  65+ 9B2A 7A           		ld		a,d
  66+ 9B2B 32 9D 7D     		ld		(varP),a
  67+ 9B2E C9           		ret
  68+ 9B2F
# file closed: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
1113  9B2F              ;    INCLUDE "./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm" Moved to general multiply code
1114  9B2F
1115  9B2F                  INCLUDE "./Maths/Utilities/APequQmulA-MULT1.asm"
# file opened: ./Maths/Utilities/APequQmulA-MULT1.asm
   1+ 9B2F              APequQmulA:
   2+ 9B2F              asm_mult1:
   3+ 9B2F              ; "ASM_MULT1 (DE) A(hi).P(lo) = Q * A first part of MAD, multiply and add. Visited Quite often. A=hi P = lo also returns result in DE"
   4+ 9B2F FE 00        	cp	0
   5+ 9B31 28 1F        	jr	z,.mul0			; quick exit if its Q * 0
   6+ 9B33 5F           	ld	e,a
   7+ 9B34 3A 9C 7E     	ld	a,(varQ)
   8+ 9B37 57           	ld	d,a
   9+ 9B38 FE 00        	cp	0				; compare a
  10+ 9B3A 28 16        	jr	z,.mul0			; quick exit if its 0 * a
  11+ 9B3C AB           	xor	e				; -- = + +- = - -+ = - ++ = +
  12+ 9B3D E6 80        	and $80				; get the resultant sign and save into b
  13+ 9B3F 47           	ld	b,a
  14+ 9B40 7A           	ld	a,d
  15+ 9B41 E6 7F        	and	SignMask8Bit	; now strip off sign bits
  16+ 9B43 57           	ld	d,a
  17+ 9B44 7B           	ld	a,e
  18+ 9B45 E6 7F        	and SignMask8Bit
  19+ 9B47 5F           	ld	e,a
  20+ 9B48 ED 30        	mul					; zxn de = d * e
  21+ 9B4A 7B           	ld	a,e
  22+ 9B4B 32 9D 7D     	ld	(varP),a		; p = lo
  23+ 9B4E 7A           	ld	a,d				; a = hi
  24+ 9B4F B0           	or	b				; de goes to a and varP also re-do sign bit
  25+ 9B50 57           	ld	d,a				; we will work with de having result as we may bin vars later
  26+ 9B51 C9           	ret
  27+ 9B52              .mul0:
  28+ 9B52 AF           	xor	a
  29+ 9B53 32 9D 7D     	ld	(varP),a
  30+ 9B56 57           	ld	d,a
  31+ 9B57 5F           	ld  e,a
  32+ 9B58 C9           	ret
  33+ 9B59
# file closed: ./Maths/Utilities/APequQmulA-MULT1.asm
1116  9B59                  INCLUDE "./Maths/Utilities/badd_ll38.asm"
# file opened: ./Maths/Utilities/badd_ll38.asm
   1+ 9B59              baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
   2+ 9B59              SAEquSRPlusAQ:
   3+ 9B59              ; Calculate the following between sign-magnitude numbers:
   4+ 9B59              ;   (S A) = (S R) + (A Q)
   5+ 9B59              ; where the sign bytes only contain the sign bits, not magnitudes.
   6+ 9B59              ; note goes wrong at <-127 >128 so need 16 bit version
   7+ 9B59              ; so need to fix the issue with carry flag not returning a fault correctly
   8+ 9B59              LL38:
   9+ 9B59              ;	ld		d,a
  10+ 9B59              ;	ld		a,(varQ)
  11+ 9B59              ;	ld		e,a
  12+ 9B59              ;	ld		a,(varS)
  13+ 9B59              ;	ld		h,a
  14+ 9B59              ;	ld		a,(varR)
  15+ 9B59              ;	ld		l,a
  16+ 9B59              ;	call	ADDHLDESignedv3
  17+ 9B59              ;	ld		a,h
  18+ 9B59              ;	ld		(varS),a
  19+ 9B59              ;	ld		a,l
  20+ 9B59              ;	ret
  21+ 9B59              ; calculation table
  22+ 9B59              ;   R     Q    Op            Sign calc
  23+ 9B59              ;	10    5    Add           +    sign same add R sign
  24+ 9B59              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  25+ 9B59              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  26+ 9B59              ;	-10  -5    ABS Add       -    sign same add R sign
  27+ 9B59              ;   5    10    Add           +    sign same add R sign
  28+ 9B59              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  29+ 9B59              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  30+ 9B59              ;   -5   -10   ABS  add      -    sign same add R sign
  31+ 9B59
  32+ 9B59              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  33+ 9B59              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  34+ 9B59              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  35+ 9B59              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  36+ 9B59
  37+ 9B59
  38+ 9B59              ; Calculate sign for Q from A and varS
  39+ 9B59 21 9E 7E     	ld		hl,varS							;
  40+ 9B5C AE           	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  41+ 9B5D FA 68 9B     	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  42+ 9B60 3A 9C 7E     	ld		a,(varQ)						; Q	\ else addition, S already correct
  43+ 9B63 21 9D 7E     	ld		hl,varR
  44+ 9B66 86           	add		a,(hl)							; a = Q + R
  45+ 9B67 C9           	ret										; Done carry set if overflow
  46+ 9B68              .LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  47+ 9B68 3A 9D 7E     	ld		a,(varR)						; a = R
  48+ 9B6B 21 9C 7E     	ld		hl,varQ                         ; Q
  49+ 9B6E              ;--	JumpIfALTMemHLusng LL39SwapSubtraction	; if a < (hl) then do LL39SwapSubtraction
  50+ 9B6E              	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  50+ 9B6E B7          >                        or a
  51+ 9B6F 9E           	sbc		a,(hl)							; A = R - Q which as R >= Q will always be a positive result
  52+ 9B70 38 01            jr      c,.LL39SignCorrection
  53+ 9B72              ;--    jr      a,.LL39ResultZero
  54+ 9B72              ;--   JumpIfNegative LL39SignCorrection		; if there was underflow we have to correct sign
  55+ 9B72              ;--	or		a								; Clear carry flag to say result is correct
  56+ 9B72 C9           	ret
  57+ 9B73              .LL39SignCorrection:
  58+ 9B73 FE 00            cp      0                               ; if its 0 then neg will affect flag so we just zero result to save compute
  59+ 9B75 28 0E            jr      z,.LL39ResultZero
  60+ 9B77 ED 44            neg                                     ; flip A 2'c value to positive
  61+ 9B79 08           	ex		af,af'							; save A temporarily
  62+ 9B7A 3A 9E 7E     	ld		a,(varS)						; Flip Sign bit in varS
  63+ 9B7D EE 80        	xor		$80							    ;
  64+ 9B7F 32 9E 7E     	ld		(varS),a                        ; flip sign bit of a
  65+ 9B82 08           	ex		af,af'                          ; get back a which is the result
  66+ 9B83                  ClearCarryFlag                          ; clear carry as NEG instrunction sets it for non zero
  66+ 9B83 B7          >                        or a
  67+ 9B84 C9           	ret
  68+ 9B85              .LL39ResultZero:
  69+ 9B85 32 9E 7E         ld      (varS),a                        ; a is zero at this stage so set sign as well
  70+ 9B88                  ClearCarryFlag                          ; clear carry
  70+ 9B88 B7          >                        or a
  71+ 9B89 C9               ret
  72+ 9B8A              ;--LL39SwapSubtraction:
  73+ 9B8A              ;--	push	bc
  74+ 9B8A              ;--	ld		b,a
  75+ 9B8A              ;--	ld		a,(hl)
  76+ 9B8A              ;--	sub		b
  77+ 9B8A              ;--	pop		bc
  78+ 9B8A              ;--	ex		af,af'							; do we flip here or negate. i think its flip as its overflowed unsigned
  79+ 9B8A              ;--	ld		a,(varS)
  80+ 9B8A              ;--	xor		$80
  81+ 9B8A              ;--	ld		(varS),a
  82+ 9B8A              ;--	ex		af,af'
  83+ 9B8A              ;--	ret
  84+ 9B8A
  85+ 9B8A              ;;;;	baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
  86+ 9B8A              ;;;;; Calculate the following between sign-magnitude numbers:
  87+ 9B8A              ;;;;;   (S A) = (S R) + (A Q)
  88+ 9B8A              ;;;;; where the sign bytes only contain the sign bits, not magnitudes.
  89+ 9B8A              ;;;;; note goes wrong at <-127 >128 so need 16 bit version
  90+ 9B8A              ;;;;LL38:
  91+ 9B8A              ;;;;; Calculate sign for Q from A and varS
  92+ 9B8A              ;;;;	ld		hl,varS							;
  93+ 9B8A              ;;;;	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  94+ 9B8A              ;;;;	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  95+ 9B8A              ;;;;	ld		a,(varQ)						; Q	\ else addition, S already correct
  96+ 9B8A              ;;;;	ld		hl,varR
  97+ 9B8A              ;;;;	add		a,(hl)							; a = Q + R
  98+ 9B8A              ;;;;	ret										; Done
  99+ 9B8A              ;;;;.LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
 100+ 9B8A              ;;;;	ld		hl,varQ                         ;
 101+ 9B8A              ;;;;	ld		a,(hl)
 102+ 9B8A              ;;;;	JumpIfAGTENusng 128,LL39Sub16bit		; does this need to be 16 bit
 103+ 9B8A              ;;;;	ld		a,(varR)						;
 104+ 9B8A              ;;;;	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
 105+ 9B8A              ;;;;	sbc		a,(hl)							; A = R - Q
 106+ 9B8A              ;;;;	jr		c,.SignCorrection				; if there was underflow we have to correct sign
 107+ 9B8A              ;;;;	or		a								; Clear carry flag to say result is correct
 108+ 9B8A              ;;;;	ret
 109+ 9B8A              ;;;;.SignCorrection:
 110+ 9B8A              ;;;;    neg                                     ; flip A 2'c value to positive
 111+ 9B8A              ;;;;	ex		af,af'							; save A temporarily
 112+ 9B8A              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 113+ 9B8A              ;;;;	xor		$80							    ;
 114+ 9B8A              ;;;;	ld		(varS),a                        ; flip sign bit of a
 115+ 9B8A              ;;;;	ex		af,af'                          ; get back a which is the result
 116+ 9B8A              ;;;;	ret
 117+ 9B8A              ;;;;LL39Sub16Bit:
 118+ 9B8A              ;;;;	ld		e,a
 119+ 9B8A              ;;;;	ld		d,0
 120+ 9B8A              ;;;;	ld		a,(varR)
 121+ 9B8A              ;;;;	ld		l,a
 122+ 9B8A              ;;;;	ld		h,0
 123+ 9B8A              ;;;;	ClearCarryFlag
 124+ 9B8A              ;;;;	sbc		hl,de
 125+ 9B8A              ;;;;	jr		c,.SignCorrection16bit
 126+ 9B8A              ;;;;	bit		7,h
 127+ 9B8A              ;;;;	jr		z,.GoodToReturn
 128+ 9B8A              ;;;;.Needtonegate:
 129+ 9B8A              ;;;;	macronegate16hl
 130+ 9B8A              ;;;;.GoodToReturn
 131+ 9B8A              ;;;;	ld		a,l
 132+ 9B8A              ;;;;	or		a
 133+ 9B8A              ;;;;	ret
 134+ 9B8A              ;;;;.SignCorrection16bit:
 135+ 9B8A              ;;;;	macronegate16hl
 136+ 9B8A              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 137+ 9B8A              ;;;;	xor		$80							    ;
 138+ 9B8A              ;;;;	ld		(varS),a                        ; flip sign bit of a
 139+ 9B8A              ;;;;	ld		a,l
 140+ 9B8A              ;;;;	ret
 141+ 9B8A
 142+ 9B8A
# file closed: ./Maths/Utilities/badd_ll38.asm
1117  9B8A              ;;DEFUNCT    INCLUDE "./Maths/Utilities/moveship4-MVS4.asm"
1118  9B8A
1119  9B8A                  INCLUDE "./Maths/Utilities/RequAmul256divQ-BFRDIV.asm"
# file opened: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
   1+ 9B8A              ;;;LL28:
   2+ 9B8A              ;;;    ld      c,a                         ;
   3+ 9B8A              ;;;    ld      a,(varQ)                    ;
   4+ 9B8A              ;;;    ld      b,a                         ;
   5+ 9B8A              ;;;    ld      a,c                         ; Get varQ into b and retain c
   6+ 9B8A              ;;;RequAmul256divB:                        ;
   7+ 9B8A              ;;;LL28Breg:
   8+ 9B8A              ;;;; "BFRDIV R = (A * 256 / Q)  byte from remainder of division, not signed a = a, b = q, c = r"
   9+ 9B8A              ;;;	cp		b							; Check A >= Q
  10+ 9B8A              ;;;	jr		nc, .AnswerTooBig			; A >= Q? yes too big
  11+ 9B8A              ;;;.CalcRemainder:
  12+ 9B8A              ;;;	ld		c, 	$FE						; set R to $FE
  13+ 9B8A              ;;;.RollRemainder:
  14+ 9B8A              ;;;	sla		a
  15+ 9B8A              ;;;	jr		c,.Reduce					; if a >> generates carry reduce
  16+ 9B8A              ;;;	cp		b							; a < q?
  17+ 9B8A              ;;;	jr		nc,.DontSBC
  18+ 9B8A              ;;;.DoSBC:									; a is < q
  19+ 9B8A              ;;;	sbc		a,b							; 	a -= q
  20+ 9B8A              ;;;.DontSBC:
  21+ 9B8A              ;;;	rl		c							; r << 1
  22+ 9B8A              ;;;	jr		c, .RollRemainder			; if rol generated a carry, continue
  23+ 9B8A              ;;;    ld      a,c
  24+ 9B8A              ;;;    ld      (varR),a
  25+ 9B8A              ;;;	ret									; R (c) left with remainder
  26+ 9B8A              ;;;.Reduce:								; a geneated a carry
  27+ 9B8A              ;;;	sbc		a,b							; a = a - (q +1)
  28+ 9B8A              ;;;	scf									; set carry flag for rl
  29+ 9B8A              ;;;	rl		c							; r << 1 briging in carry
  30+ 9B8A              ;;;	jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  31+ 9B8A              ;;;    ld      a,c
  32+ 9B8A              ;;;    ld      (varR),a
  33+ 9B8A              ;;;	ret
  34+ 9B8A              ;;;.AnswerTooBig:
  35+ 9B8A              ;;;	ld	    c,$FF							; arse its too big
  36+ 9B8A              ;;;    ld      a,c
  37+ 9B8A              ;;;    ld      (varR),a
  38+ 9B8A              ;;;	ret
  39+ 9B8A
  40+ 9B8A              BCequAmul256DivC:
  41+ 9B8A 59             ld    e,c
  42+ 9B8B 67             ld    h,a
  43+ 9B8C 2E 00          ld    l,0
  44+ 9B8E              AdivEDivide:                             ; this routine performs the operation BC=HL/E
  45+ 9B8E 7B             ld a,e                                 ; checking the divisor; returning if it is zero
  46+ 9B8F B7             or a                                   ; from this time on the carry is cleared
  47+ 9B90 C8             ret z
  48+ 9B91 01 FF FF       ld bc,-1                               ; BC is used to accumulate the result
  49+ 9B94 16 00          ld d,0                                 ; clearing D, so DE holds the divisor
  50+ 9B96              AdivEDivLoop:                            ; subtracting DE from HL until the first overflow
  51+ 9B96 ED 52          sbc hl,de                              ; since the carry is zero, SBC works as if it was a SUB
  52+ 9B98 03             inc bc                                 ;  note that this instruction does not alter the flags
  53+ 9B99 30 FB          jr nc,AdivEDivLoop                     ; no carry means that there was no overflow
  54+ 9B9B C9             ret
  55+ 9B9C
  56+ 9B9C              HL_Div_C:
  57+ 9B9C              ; Integer divides HL by C
  58+ 9B9C              ; Result in HL, remainder in A
  59+ 9B9C              ; Clobbers F, B
  60+ 9B9C 06 10                ld b,16
  61+ 9B9E AF                   xor a
  62+ 9B9F              HL_Div_C_Loop:
  63+ 9B9F 29                   add hl,hl
  64+ 9BA0 17                   rla
  65+ 9BA1 B9                   cp c
  66+ 9BA2 38 02                jr c,HL_DivC_Skip
  67+ 9BA4 91                   sub c
  68+ 9BA5 2C                   inc l
  69+ 9BA6              HL_DivC_Skip:
  70+ 9BA6 10 F7                djnz HL_Div_C_Loop
  71+ 9BA8 7D                   ld   a,l
  72+ 9BA9 32 9D 7E             ld  (varR),a
  73+ 9BAC C9                   ret
  74+ 9BAD
  75+ 9BAD
  76+ 9BAD
  77+ 9BAD              ; Entry point if varQ is populated with demoninator
  78+ 9BAD              RequAmul256divQ:
  79+ 9BAD              BFRDIV:
  80+ 9BAD F5           		push	af
  81+ 9BAE 3A 9C 7E     		ld		a,(varQ)
  82+ 9BB1 4F           		ld		c,a
  83+ 9BB2 F1           		pop		af
  84+ 9BB3 FE 00        		cp		0
  85+ 9BB5 CA CC 9B     		jp		z, HLDIVC_0_BY	; fast exit if numerator is 0
  86+ 9BB8              RequAmul256divC:
  87+ 9BB8 2E 00        		ld		l,0
  88+ 9BBA 67           		ld		h,a
  89+ 9BBB              HL_Div_Cold:						; fast entry point if C and HL are already set
  90+ 9BBB 06 10        		ld b,16
  91+ 9BBD AF           		xor a
  92+ 9BBE              LOOPPOINT:
  93+ 9BBE 29           		add hl,hl
  94+ 9BBF 17           		rla
  95+ 9BC0 B9           		cp c
  96+ 9BC1 38 02        		jr c,SKIPINCSUB
  97+ 9BC3 2C           		inc l
  98+ 9BC4 91           		sub c
  99+ 9BC5              SKIPINCSUB:
 100+ 9BC5 10 F7        		djnz LOOPPOINT
 101+ 9BC7 7D           		ld		a,l
 102+ 9BC8 32 9D 7E     		ld 		(varR),a
 103+ 9BCB C9           		ret
 104+ 9BCC              HLDIVC_0_BY:
 105+ 9BCC 32 9D 7E     		ld		(varR),a
 106+ 9BCF C9           		ret
 107+ 9BD0              ;	push	af
 108+ 9BD0              ;	ld		a,b
 109+ 9BD0              ;	ld		(varQ),a
 110+ 9BD0              ;	pop		af
 111+ 9BD0              ;RequAmul256divQ:
 112+ 9BD0              ;BFRDIV:									;BFRDIV R=A*256/Q   byte from remainder of division
 113+ 9BD0              ;	ld		hl,varQ
 114+ 9BD0              ;	JumpIfAGTENusng	(hl),LL2			;  is A >=  Q ?, if yes, answer too big for 1 byte, R=#&FF
 115+ 9BD0              ;	ld		b,$FE						; b = X
 116+ 9BD0              ;	ld		c,a							; c = R	div roll counter
 117+ 9BD0              ;LL31:									; roll R
 118+ 9BD0              ;	sla		a
 119+ 9BD0              ;	jr		c,LL29						; hop to Reduce
 120+ 9BD0              ;	JumpIfALTNusng (hl)					; Q skip sbc if a < Q
 121+ 9BD0              ;	sbc		a,(hl)						; a = a - Q
 122+ 9BD0              ;	rl		c							; rotate R left
 123+ 9BD0              ;	jr		c,LL31						; loop if R poped out a carry bit
 124+ 9BD0              ;	jr		LL2Good
 125+ 9BD0              ;LL29:									; Reduce
 126+ 9BD0              ;	sbc		a,(hl)
 127+ 9BD0              ;	scf
 128+ 9BD0              ;	rl		c							; roll a carry flag into R
 129+ 9BD0              ;	jr		c,LL31						;  loop R
 130+ 9BD0              ;	jr		LL2Good
 131+ 9BD0              ;LL2:
 132+ 9BD0              ;	ld		c,$FF
 133+ 9BD0              ;LL2Good:
 134+ 9BD0              ;	ld		a,c
 135+ 9BD0              ;	ld		(varR),a
 136+ 9BD0              ;	ret
 137+ 9BD0
# file closed: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
1120  9BD0                  INCLUDE "./Maths/Utilities/RequAdivQ-LL61.asm"
# file opened: ./Maths/Utilities/RequAdivQ-LL61.asm
   1+ 9BD0              RequAdivQ:
   2+ 9BD0              	; R = A/Q, U = remainder, code looked a little odd as if R is reminader and U = result
   3+ 9BD0              LL61:										; Handling division R=A/Q for case further down
   4+ 9BD0 4F           	ld		c,a								; c = A
   5+ 9BD1 3A 9C 7E     	ld		a,(varQ)						; test for divide by 0
   6+ 9BD4 FE 00        	cp		0
   7+ 9BD6 28 16        	jr		z,LL84							; divide by zero error
   8+ 9BD8 57           	ld		d,a								; now we can do C/D
   9+ 9BD9 06 08            ld b,8
  10+ 9BDB AF               xor a
  11+ 9BDC              LL63:										; roll divide loop
  12+ 9BDC CB 21            sla c
  13+ 9BDE 17               rla
  14+ 9BDF BA               cp d
  15+ 9BE0 38 02            jr c,LL64
  16+ 9BE2 0C               inc c
  17+ 9BE3 92               sub d
  18+ 9BE4              LL64:
  19+ 9BE4 10 F6            djnz LL63
  20+ 9BE6 32 9B 7E     	ld	(varU),a							; store remainder in U
  21+ 9BE9 79           	ld	a,c
  22+ 9BEA 32 9D 7E     	ld	(varR),a							; store remainder in R
  23+ 9BED C9               ret
  24+ 9BEE              LL84:										; div error  R=U=#5
  25+ 9BEE 3E 32        	ld		a,50
  26+ 9BF0 32 9D 7E     	ld		(varR),a
  27+ 9BF3 32 9B 7E     	ld		(varU),a
  28+ 9BF6 C9           	ret
  29+ 9BF7
# file closed: ./Maths/Utilities/RequAdivQ-LL61.asm
1121  9BF7                  INCLUDE "./Maths/Utilities/RSequQmulA-MULT12.asm"
# file opened: ./Maths/Utilities/RSequQmulA-MULT12.asm
   1+ 9BF7              asm_mult12:
   2+ 9BF7              RSequQmulA:
   3+ 9BF7              ; "asm_ult12  R.S = Q * A \ visited quite often S = hi, R = lo, odd that its opposite to mult1"
   4+ 9BF7 CD 2F 9B     	call APequQmulA
   5+ 9BFA 08           	ex 	af,af'
   6+ 9BFB 7A           	ld	a,d
   7+ 9BFC 32 9E 7E     	ld	(varS),a
   8+ 9BFF 7B           	ld	a,e
   9+ 9C00 32 9D 7E     	ld	(varR),a
  10+ 9C03 08           	ex 	af,af'
  11+ 9C04 C9           	ret
  12+ 9C05
# file closed: ./Maths/Utilities/RSequQmulA-MULT12.asm
1122  9C05
1123  9C05                  include "./Universe/Ships/CopyRotMattoXX15.asm"
# file opened: ./Universe/Ships/CopyRotMattoXX15.asm
   1+ 9C05              CopyRotMatNoseVtoXX15:
   2+ 9C05                      ldCopyByte  UBnkrotmatNosevX+1 ,XX15VecX
   2+ 9C05 3A 36 C0    >                        ld       a,(UBnkrotmatNosevX+1)
   2+ 9C08 32 A6 C0    >                        ld       (XX15VecX),a
   3+ 9C0B                      ldCopyByte  UBnkrotmatNosevY+1, XX15VecY
   3+ 9C0B 3A 38 C0    >                        ld       a,(UBnkrotmatNosevY+1)
   3+ 9C0E 32 A7 C0    >                        ld       (XX15VecY),a
   4+ 9C11                      ldCopyByte  UBnkrotmatNosevZ+1 ,XX15VecZ
   4+ 9C11 3A 3A C0    >                        ld       a,(UBnkrotmatNosevZ+1)
   4+ 9C14 32 A8 C0    >                        ld       (XX15VecZ),a
   5+ 9C17 C9                   ret
   6+ 9C18
   7+ 9C18              CopyRotMatRoofVtoXX15:
   8+ 9C18                      ldCopyByte  UBnkrotmatRoofvX+1 ,XX15VecX
   8+ 9C18 3A 30 C0    >                        ld       a,(UBnkrotmatRoofvX+1)
   8+ 9C1B 32 A6 C0    >                        ld       (XX15VecX),a
   9+ 9C1E                      ldCopyByte  UBnkrotmatRoofvY+1, XX15VecY
   9+ 9C1E 3A 32 C0    >                        ld       a,(UBnkrotmatRoofvY+1)
   9+ 9C21 32 A7 C0    >                        ld       (XX15VecY),a
  10+ 9C24                      ldCopyByte  UBnkrotmatRoofvZ+1 ,XX15VecZ
  10+ 9C24 3A 34 C0    >                        ld       a,(UBnkrotmatRoofvZ+1)
  10+ 9C27 32 A8 C0    >                        ld       (XX15VecZ),a
  11+ 9C2A C9                   ret
  12+ 9C2B
  13+ 9C2B              CopyRotMatSideVtoXX15:
  14+ 9C2B                      ldCopyByte  UBnkrotmatSidevX+1 ,XX15VecX
  14+ 9C2B 3A 2A C0    >                        ld       a,(UBnkrotmatSidevX+1)
  14+ 9C2E 32 A6 C0    >                        ld       (XX15VecX),a
  15+ 9C31                      ldCopyByte  UBnkrotmatSidevY+1, XX15VecY
  15+ 9C31 3A 2C C0    >                        ld       a,(UBnkrotmatSidevY+1)
  15+ 9C34 32 A7 C0    >                        ld       (XX15VecY),a
  16+ 9C37                      ldCopyByte  UBnkrotmatSidevZ+1 ,XX15VecZ
  16+ 9C37 3A 2E C0    >                        ld       a,(UBnkrotmatSidevZ+1)
  16+ 9C3A 32 A8 C0    >                        ld       (XX15VecZ),a
  17+ 9C3D C9                   ret
  18+ 9C3E
# file closed: ./Universe/Ships/CopyRotMattoXX15.asm
1124  9C3E                  include "./Universe/Ships/CopyXX15toRotMat.asm"
# file opened: ./Universe/Ships/CopyXX15toRotMat.asm
   1+ 9C3E              CopyXX15toRotMatNoseV:
   2+ 9C3E                      ldCopyByte  XX15VecX, UBnkrotmatNosevX+1
   2+ 9C3E 3A A6 C0    >                        ld       a,(XX15VecX)
   2+ 9C41 32 36 C0    >                        ld       (UBnkrotmatNosevX+1),a
   3+ 9C44                      ldCopyByte  XX15VecY, UBnkrotmatNosevY+1
   3+ 9C44 3A A7 C0    >                        ld       a,(XX15VecY)
   3+ 9C47 32 38 C0    >                        ld       (UBnkrotmatNosevY+1),a
   4+ 9C4A                      ldCopyByte  XX15VecZ, UBnkrotmatNosevZ+1
   4+ 9C4A 3A A8 C0    >                        ld       a,(XX15VecZ)
   4+ 9C4D 32 3A C0    >                        ld       (UBnkrotmatNosevZ+1),a
   5+ 9C50                      ZeroA
   5+ 9C50 AF          >                        xor a
   6+ 9C51 32 35 C0             ld  (UBnkrotmatNosevX),a
   7+ 9C54 32 37 C0             ld  (UBnkrotmatNosevY),a
   8+ 9C57 32 39 C0             ld  (UBnkrotmatNosevZ),a
   9+ 9C5A C9                   ret
  10+ 9C5B
  11+ 9C5B              CopyXX15toRotMatRoofV:
  12+ 9C5B                      ldCopyByte  XX15VecX, UBnkrotmatRoofvX+1
  12+ 9C5B 3A A6 C0    >                        ld       a,(XX15VecX)
  12+ 9C5E 32 30 C0    >                        ld       (UBnkrotmatRoofvX+1),a
  13+ 9C61                      ldCopyByte  XX15VecY, UBnkrotmatRoofvY+1
  13+ 9C61 3A A7 C0    >                        ld       a,(XX15VecY)
  13+ 9C64 32 32 C0    >                        ld       (UBnkrotmatRoofvY+1),a
  14+ 9C67                      ldCopyByte  XX15VecZ, UBnkrotmatRoofvZ+1
  14+ 9C67 3A A8 C0    >                        ld       a,(XX15VecZ)
  14+ 9C6A 32 34 C0    >                        ld       (UBnkrotmatRoofvZ+1),a
  15+ 9C6D                      ZeroA
  15+ 9C6D AF          >                        xor a
  16+ 9C6E 32 2F C0             ld  (UBnkrotmatRoofvX),a
  17+ 9C71 32 31 C0             ld  (UBnkrotmatRoofvY),a
  18+ 9C74 32 33 C0             ld  (UBnkrotmatRoofvZ),a
  19+ 9C77 C9                   ret
  20+ 9C78
  21+ 9C78              CopyXX15toRotMatSideV:
  22+ 9C78                      ldCopyByte  XX15VecX, UBnkrotmatSidevX+1
  22+ 9C78 3A A6 C0    >                        ld       a,(XX15VecX)
  22+ 9C7B 32 2A C0    >                        ld       (UBnkrotmatSidevX+1),a
  23+ 9C7E                      ldCopyByte  XX15VecY, UBnkrotmatSidevY+1
  23+ 9C7E 3A A7 C0    >                        ld       a,(XX15VecY)
  23+ 9C81 32 2C C0    >                        ld       (UBnkrotmatSidevY+1),a
  24+ 9C84                      ldCopyByte  XX15VecZ, UBnkrotmatSidevZ+1
  24+ 9C84 3A A8 C0    >                        ld       a,(XX15VecZ)
  24+ 9C87 32 2E C0    >                        ld       (UBnkrotmatSidevZ+1),a
  25+ 9C8A                      ZeroA
  25+ 9C8A AF          >                        xor a
  26+ 9C8B 32 29 C0             ld  (UBnkrotmatSidevX),a
  27+ 9C8E 32 2B C0             ld  (UBnkrotmatSidevY),a
  28+ 9C91 32 2D C0             ld  (UBnkrotmatSidevZ),a
  29+ 9C94 C9                   ret
  30+ 9C95
# file closed: ./Universe/Ships/CopyXX15toRotMat.asm
1125  9C95                  INCLUDE "./Maths/Utilities/tidy.asm"
# file opened: ./Maths/Utilities/tidy.asm
   1+ 9C95              ;rotmap0xLo: DB	0				; INWK +9
   2+ 9C95              ;rotmap0xHi: DB	0				; INWK +10
   3+ 9C95              ;rotmat0yLo: DB	0				; INWK +11
   4+ 9C95              ;rotmat0yHi: DB	0				; INWK +12
   5+ 9C95              ;rotmat0zLo:	DB 	0				; INWK +13
   6+ 9C95              ;rotmat0zHi:	DB 	0				; INWK +14
   7+ 9C95              ;rotmap1xLo: DB	0				; INWK +15
   8+ 9C95              ;rotmap1xHi:	DB	0				; INWK +16
   9+ 9C95              ;rotmat1yLo:	DB	0				; INWK +17
  10+ 9C95              ;rotmat1yHi:	DB	0				; INWK +18
  11+ 9C95              ;rotmat1zLo:	DB	0				; INWK +19
  12+ 9C95              ;rotmat1zHi:	DB	0				; INWK +20
  13+ 9C95              ;rotmat2xLo: DB	0				; INWK +21
  14+ 9C95              ;rotmat2xHi:	DB	0				; INWK +22
  15+ 9C95              ;rotmat2yLo:	DB	0				; INWK +23
  16+ 9C95              ;rotmat2yHi:	DB	0				; INWK +24
  17+ 9C95              ;rotmat2zLo:	DB	0				; INWK +25
  18+ 9C95              ;rotmat2zHi:	DB	0				; INWK +26
  19+ 9C95              ;
  20+ 9C95              ;rotmatFx	equ	rotmat0xHi
  21+ 9C95              ;rotmatFy	equ	rotmat0yHi
  22+ 9C95              ;rotmatFz	equ	rotmat0zHi
  23+ 9C95              ;rotmatUx	equ	rotmat1xHi
  24+ 9C95              ;rotmatUy	equ	rotmat1yHi
  25+ 9C95              ;rotmatUz	equ	rotmat1zHi
  26+ 9C95              ;
  27+ 9C95              ;inwkarray			equ		INWK+10
  28+ 9C95
  29+ 9C95
  30+ 9C95
  31+ 9C95
  32+ 9C95              ; Divide that sets value to FFFF if divide by 0 unless main value is 0, then 0
  33+ 9C95
  34+ 9C95              ; (P+1 A) = (A P) / Q
  35+ 9C95              ;  B A    = (A P) / Q
  36+ 9C95              ; TESTED OK
  37+ 9C95
  38+ 9C95
  39+ 9C95 2A A6 C0     NormalizeXX15:          ld      hl, (XX15VecX)              ; h= VecX, l = VecY
  40+ 9C98 3A A8 C0                             ld      a,  (XX15VecZ)              ; a = VecZ, d we don't care
  41+ 9C9B E6 7F        .ABSZ:                  and     SignMask8Bit
  42+ 9C9D FD 67                                ld      iyh,a                       ; iyh = abs z
  43+ 9C9F 57           .ZSquared:              ld      d,a
  44+ 9CA0 5F                                   ld      e,a
  45+ 9CA1 ED 30                                mul     de
  46+ 9CA3 42 4B                                ld      bc,de                       ; bc = z squared
  47+ 9CA5 7D           .ABSX:                  ld      a,l
  48+ 9CA6 E6 7F        .XSquared:              and     SignMask8Bit
  49+ 9CA8 DD 67                                ld      ixh,a                       ; ixh = abs x
  50+ 9CAA 57                                   ld      d,a
  51+ 9CAB 5F                                   ld      e,a
  52+ 9CAC ED 30                                mul     de
  53+ 9CAE EB                                   ex      de,hl                       ; hl = x squared
  54+ 9CAF 7A           .ABSY:                  ld      a,d                         ; as h was swapped into d
  55+ 9CB0 E6 7F                                and     SignMask8Bit
  56+ 9CB2 DD 6F                                ld      ixl,a                       ; ixl = abs y
  57+ 9CB4 5F           .YSquared:              ld      e,a
  58+ 9CB5 57                                   ld      d,a
  59+ 9CB6 ED 30                                mul     de                          ; de = y squared
  60+ 9CB8 19                                   add     hl,de                       ; hl = hl + de + bc
  61+ 9CB9 09                                   add     hl,bc                       ;
  62+ 9CBA EB                                   ex      de,hl
  63+ 9CBB CD 81 91                             call    asm_sqrt                    ; d = iyl =hl = sqrt (de) = sqrt (x ^ 2 + y ^ 2 + z ^ 2)
  64+ 9CBE 55                                   ld      d,l
  65+ 9CBF FD 6A                                ld      iyl,d
  66+ 9CC1 DD 7C        .NormaliseX:            ld      a,ixh                       ; normalise x
  67+ 9CC3 CD 7B 9A                             call    AequAdivDmul967Bit
  68+ 9CC6 57                                   ld      d,a
  69+ 9CC7 3A A6 C0                             ld      a,(XX15VecX)
  70+ 9CCA E6 80                                and     SignOnly8Bit
  71+ 9CCC B2                                   or      d
  72+ 9CCD 32 A6 C0                             ld      (XX15VecX),a
  73+ 9CD0 DD 7D        .NormaliseY:            ld      a,ixl                       ; normalise y
  74+ 9CD2 55                                   ld      d,l
  75+ 9CD3 CD 7B 9A                             call    AequAdivDmul967Bit
  76+ 9CD6 57                                   ld      d,a
  77+ 9CD7 3A A7 C0                             ld      a,(XX15VecY)
  78+ 9CDA E6 80                                and     SignOnly8Bit
  79+ 9CDC B2                                   or      d
  80+ 9CDD 32 A7 C0                             ld      (XX15VecY),a
  81+ 9CE0 FD 7C        .NormaliseZ:            ld      a,iyh                       ; normalise z
  82+ 9CE2 55                                   ld      d,l
  83+ 9CE3 CD 7B 9A                             call    AequAdivDmul967Bit
  84+ 9CE6 57                                   ld      d,a
  85+ 9CE7 3A A8 C0                             ld      a,(XX15VecZ)
  86+ 9CEA E6 80                                and     SignOnly8Bit
  87+ 9CEC B2                                   or      d
  88+ 9CED 32 A8 C0                             ld      (XX15VecZ),a
  89+ 9CF0 C9                                   ret
  90+ 9CF1
  91+ 9CF1              TidyNormaliseNoseV:     MACRO
  92+ 9CF1 ~                                    call	CopyRotMatNoseVtoXX15	    ; copy over matrix row 3 (Nosev)
  93+ 9CF1 ~                                    call	NormalizeXX15			    ; normalise z hi, its really TIS3 and write back to matrix
  94+ 9CF1 ~                                    call	CopyXX15toRotMatNoseV       ; .
  95+ 9CF1                                      ENDM
  96+ 9CF1              TidyNormaliseRoofV:     MACRO
  97+ 9CF1 ~                                    call	CopyRotMatRoofVtoXX15
  98+ 9CF1 ~                                    call	NormalizeXX15			; normalise z hi, its really TIS3
  99+ 9CF1 ~                                    call	CopyXX15toRotMatRoofV
 100+ 9CF1                                      ENDM
 101+ 9CF1
 102+ 9CF1
 103+ 9CF1              TidyUbnK:               ;break
 104+ 9CF1                                      TidyNormaliseNoseV
 104+ 9CF1 CD 05 9C    >                        call	CopyRotMatNoseVtoXX15	    ; copy over matrix row 3 (Nosev)
 104+ 9CF4 CD 95 9C    >                        call	NormalizeXX15			    ; normalise z hi, its really TIS3 and write back to matrix
 104+ 9CF7 CD 3E 9C    >                        call	CopyXX15toRotMatNoseV       ; .
 105+ 9CFA 3A 36 C0                             ld      a,(UBnkrotmatNosevX+1)      ; Now check and see which vector elemetn we are going to
 106+ 9CFD E6 60                                and     %01100000                   ; if X is not small then we go straigth to roofx
 107+ 9CFF C2 97 9D                             jp      nz,.ProcessRoofX            ; .
 108+ 9D02 3A 38 C0     .TidyXIsSmall:          ld      a,(UBnkrotmatNosevY+1)      ; Else we test Y on to using
 109+ 9D05 E6 60                                and     %01100000                   ; if Y is not small we process roofz
 110+ 9D07 20 47                                jr      nz,.ProcessRoofZ            ; .
 111+ 9D09              ;...roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 112+ 9D09 3A 36 C0     .ProcessRoofY:          ld		a,(UBnkrotmatNosevX+1)
 113+ 9D0C 32 9C 7E                             ld		(varQ),a					; q = nosev_y
 114+ 9D0F 3A 30 C0                             ld		a,(UBnkrotmatRoofvX+1)	    ;roov z
 115+ 9D12 CD F7 9B                             call	RSequQmulA
 116+ 9D15 3A 3A C0                             ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 117+ 9D18 32 9C 7E                             ld		(varQ),a					; b = regX for now
 118+ 9D1B 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 119+ 9D1E CD F6 8F                             call	madDEequQmulAaddRS
 120+ 9D21 7A                                   ld      a,d                         ; flip sign bit
 121+ 9D22 EE 80                                xor     SignOnly8Bit
 122+ 9D24 57                                   ld      d,a
 123+ 9D25 3A 38 C0                             ld      a,(UBnkrotmatNosevY+1)
 124+ 9D28 32 9C 7E                             ld      (varQ),a
 125+ 9D2B 7A           .YTest0Div:             ld      a,d
 126+ 9D2C E6 7F                                and     $7F
 127+ 9D2E B3                                   or      e
 128+ 9D2F FE 00                                cp      0
 129+ 9D31 20 0E                                jr      nz,.SkipYZeroTest
 130+ 9D33                                      ZeroA
 130+ 9D33 AF          >                        xor a
 131+ 9D34 C3 91 9D                             jp      .SetRoofZ
 132+ 9D37 FE 00        .YTestDiv0:             cp      0
 133+ 9D39 20 06                                jr      nz,.SkipYZeroTest
 134+ 9D3B 3E 60        .YDivideByZero:         ld      a,96
 135+ 9D3D B2                                   or      d
 136+ 9D3E C3 91 9D                             jp      .SetRoofZ
 137+ 9D41 7B           .SkipYZeroTest:         ld      a,e
 138+ 9D42 32 9D 7D                             ld      (varP),a
 139+ 9D45 7A                                   ld      a,d
 140+ 9D46 CD 83 93                             call    DVIDT
 141+ 9D49 78                                   ld      a,b
 142+ 9D4A 32 32 C0     .SetRoofY:              ld      (UBnkrotmatRoofvY+1),a
 143+ 9D4D C3 DB 9D                             jp      .DoneRoof
 144+ 9D50              ;...roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 145+ 9D50 3A 36 C0     .ProcessRoofZ:          ld		a,(UBnkrotmatNosevX+1)      ; Failing that we default to Z
 146+ 9D53 32 9C 7E                             ld		(varQ),a				    ; q = nosev_y
 147+ 9D56 3A 30 C0                             ld		a,(UBnkrotmatRoofvX+1)	    ;roov z
 148+ 9D59 CD F7 9B                             call	RSequQmulA
 149+ 9D5C 3A 38 C0                             ld		a,(UBnkrotmatNosevY+1)	    ; nosev z
 150+ 9D5F 32 9C 7E                             ld		(varQ),a				    ; b = regX for now
 151+ 9D62 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 152+ 9D65 CD F6 8F                             call	madDEequQmulAaddRS
 153+ 9D68 7A                                   ld      a,d                         ; flip sign bit
 154+ 9D69 EE 80                                xor     SignOnly8Bit
 155+ 9D6B 57                                   ld      d,a
 156+ 9D6C 3A 3A C0                             ld      a,(UBnkrotmatNosevZ+1)
 157+ 9D6F 32 9C 7E                             ld      (varQ),a
 158+ 9D72 7A           .ZTest0Div:             ld      a,d
 159+ 9D73 E6 7F                                and     $7F
 160+ 9D75 B3                                   or      e
 161+ 9D76 FE 00                                cp      0
 162+ 9D78 20 0E                                jr      nz,.SkipZZeroTest
 163+ 9D7A                                      ZeroA
 163+ 9D7A AF          >                        xor a
 164+ 9D7B C3 91 9D                             jp      .SetRoofZ
 165+ 9D7E FE 00        .ZTestDiv0:             cp      0
 166+ 9D80 20 06                                jr      nz,.SkipZZeroTest
 167+ 9D82 3E 60        .ZDivideByZero:         ld      a,96
 168+ 9D84 B2                                   or      d
 169+ 9D85 C3 91 9D                             jp      .SetRoofZ
 170+ 9D88 7B           .SkipZZeroTest:         ld      a,e
 171+ 9D89 32 9D 7D                             ld      (varP),a
 172+ 9D8C 7A                                   ld      a,d
 173+ 9D8D CD 83 93                             call    DVIDT
 174+ 9D90 78                                   ld      a,b
 175+ 9D91 32 34 C0     .SetRoofZ:              ld      (UBnkrotmatRoofvZ+1),a
 176+ 9D94 C3 DB 9D                             jp      .DoneRoof
 177+ 9D97              ;...roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 178+ 9D97 3A 38 C0     .ProcessRoofX:          ld		a,(UBnkrotmatNosevY+1)      ; so we set Q to Nose Y
 179+ 9D9A 32 9C 7E                             ld		(varQ),a					; q = nosev_y
 180+ 9D9D 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	    ; A = roofv Y
 181+ 9DA0 CD F7 9B                             call	RSequQmulA                  ; RS = NoseY & RoofY
 182+ 9DA3 3A 3A C0                             ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 183+ 9DA6 32 9C 7E                             ld		(varQ),a					; b = regX for now
 184+ 9DA9 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 185+ 9DAC CD F6 8F                             call	madDEequQmulAaddRS
 186+ 9DAF 7A                                   ld      a,d                         ; flip sign bit
 187+ 9DB0 EE 80                                xor     SignOnly8Bit
 188+ 9DB2 57                                   ld      d,a
 189+ 9DB3 3A 36 C0                             ld      a,(UBnkrotmatNosevX+1)
 190+ 9DB6 32 9C 7E                             ld      (varQ),a
 191+ 9DB9 7A           .XTest0Div:             ld      a,d
 192+ 9DBA E6 7F                                and     $7F
 193+ 9DBC B3                                   or      e
 194+ 9DBD FE 00                                cp      0
 195+ 9DBF 20 0E                                jr      nz,.SkipXZeroTest
 196+ 9DC1                                      ZeroA
 196+ 9DC1 AF          >                        xor a
 197+ 9DC2 C3 91 9D                             jp      .SetRoofZ
 198+ 9DC5 FE 00        .XTestDiv0:             cp      0
 199+ 9DC7 20 06                                jr      nz,.SkipXZeroTest
 200+ 9DC9 3E 60        .XDivideByZero:         ld      a,96
 201+ 9DCB B2                                   or      d
 202+ 9DCC C3 D8 9D                             jp      .SetRoofX
 203+ 9DCF 7B           .SkipXZeroTest:         ld      a,e
 204+ 9DD0 32 9D 7D                             ld      (varP),a
 205+ 9DD3 7A                                   ld      a,d
 206+ 9DD4 CD 83 93                             call    DVIDT
 207+ 9DD7 78                                   ld      a,b
 208+ 9DD8 32 30 C0     .SetRoofX:              ld      (UBnkrotmatRoofvX+1),a
 209+ 9DDB              .DoneRoof:              TidyNormaliseRoofV
 209+ 9DDB CD 18 9C    >                        call	CopyRotMatRoofVtoXX15
 209+ 9DDE CD 95 9C    >                        call	NormalizeXX15			; normalise z hi, its really TIS3
 209+ 9DE1 CD 5B 9C    >                        call	CopyXX15toRotMatRoofV
 210+ 9DE4              ;...sidex = ((nosez * roofy) - nosey * roofz) / 96
 211+ 9DE4 3A 3A C0     .DoSidevX:              ld		a,(UBnkrotmatNosevZ+1)      ;  -(-nosev_z * roofv_y + nosev_y * roofv_z) / 96
 212+ 9DE7 EE 80                                xor     SignOnly8Bit
 213+ 9DE9 32 9C 7E                             ld		(varQ),a					; q = nosev_y
 214+ 9DEC 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	     ;roov z
 215+ 9DEF CD F7 9B                             call	RSequQmulA
 216+ 9DF2 3A 38 C0                             ld		a,(UBnkrotmatNosevY+1)		; nosev z
 217+ 9DF5 32 9C 7E                             ld		(varQ),a							; b = regX for now
 218+ 9DF8 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 219+ 9DFB CD F6 8F                             call	madDEequQmulAaddRS
 220+ 9DFE CD CB 93                             call    BAequDEdiv96
 221+ 9E01 78                                   ld      a,b
 222+ 9E02 32 2A C0                             ld      (UBnkrotmatSidevX+1),a
 223+ 9E05              ;...sidey = ((nosex * roofz) - nosez * roofx) / 96
 224+ 9E05 3A 36 C0     .DoSidevY:              ld		a,(UBnkrotmatNosevX+1)      ; -(-nosev_x * roofv_z - nosev_z * roofv_x) / 96
 225+ 9E08 EE 80                                xor     SignOnly8Bit
 226+ 9E0A 32 9C 7E                             ld		(varQ),a					; q = nosev_y
 227+ 9E0D 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roov z
 228+ 9E10 CD F7 9B                             call	RSequQmulA                  ; rs = nosex * roofz
 229+ 9E13 3A 3A C0                             ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 230+ 9E16 32 9C 7E                             ld		(varQ),a					; b = regX for now
 231+ 9E19 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 232+ 9E1C CD F6 8F                             call	madDEequQmulAaddRS          ; DE = noseyz* roofz +
 233+ 9E1F CD CB 93                             call    BAequDEdiv96
 234+ 9E22 78                                   ld      a,b
 235+ 9E23 32 2C C0                             ld      (UBnkrotmatSidevY+1),a         ;-(-nosev_y * roofv_x + nosev_x * roofv_y) / 96
 236+ 9E26              ;...sidez = ((nosey * roofx) - nosex * roofy) / 96
 237+ 9E26 3A 38 C0     .DoSidevZ:              ld		a,(UBnkrotmatNosevY+1)      ;
 238+ 9E29 EE 80                                xor     SignOnly8Bit
 239+ 9E2B 32 9C 7E                             ld		(varQ),a					; q = nosev_y
 240+ 9E2E 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 241+ 9E31 CD F7 9B                             call	RSequQmulA
 242+ 9E34 3A 36 C0                             ld		a,(UBnkrotmatNosevX+1)		; nosev z
 243+ 9E37 32 9C 7E                             ld		(varQ),a							; b = regX for now
 244+ 9E3A 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 245+ 9E3D CD F6 8F                             call	madDEequQmulAaddRS
 246+ 9E40 CD CB 93                             call    BAequDEdiv96
 247+ 9E43 78                                   ld      a,b
 248+ 9E44 32 2E C0                             ld      (UBnkrotmatSidevZ+1),a
 249+ 9E47                                      ZeroA
 249+ 9E47 AF          >                        xor a
 250+ 9E48 32 29 C0                             ld      (UBnkrotmatSidevX),a
 251+ 9E4B 32 2B C0                             ld      (UBnkrotmatSidevY),a
 252+ 9E4E 32 2D C0                             ld      (UBnkrotmatSidevZ),a
 253+ 9E51 C9                                   ret
 254+ 9E52
 255+ 9E52
 256+ 9E52              TidySub1:									;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
 257+ 9E52              		; b = regX on entry
 258+ 9E52              TIS1Prep:									;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
 259+ 9E52 08           		ex		af,af'
 260+ 9E53 78           		ld		a,b
 261+ 9E54 32 9C 7E     		ld		(varQ),a
 262+ 9E57 08           		ex		af,af'
 263+ 9E58 EE 80        		xor		$80							;	 flip sign of Acc
 264+ 9E5A CD D4 8F     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
 265+ 9E5D              ; USES 				A BC E
 266+ 9E5D              ; DOES NOT USE		D HL
 267+ 9E5D              Tis1Div96:							   		; .DVID96	\ Their comment A=A/96: answer is A*255/96
 268+ 9E5D 4F           		ld		c,a							; Store sign bit in  ct (we use e reg for that)
 269+ 9E5E E6 80        		and		SignOnly8Bit						; ..
 270+ 9E60 5F           		ld		e,a							; ..
 271+ 9E61 79           		ld		a,c							; a = high byte again with sign bit cleared
 272+ 9E62 E6 7F        		and		SignMask8Bit							; ..
 273+ 9E64 06 FE        		ld		b,$FE						; slide counter T1
 274+ 9E66              TIS1RollTLoop								; roll T1  clamp Acc to #96 for rotation matrix unity
 275+ 9E66 CB 27        		sla		a
 276+ 9E68              		JumpIfALTNusng $60, TIS1SkipSub
 276+ 9E68 FE 60       >                        cp      $60
 276+ 9E6A DA 77 9E    >                        jp		c, TIS1SkipSub
 277+ 9E6D DE 60        		sbc		a,$60							; subtract 96
 278+ 9E6F 37           		scf
 279+ 9E70 CB 10        		rl		b							;  T1
 280+ 9E72 38 F2        		jr		c,TIS1RollTLoop
 281+ 9E74              TIS1KIPCont:
 282+ 9E74 78           		ld		a,b							;   T1
 283+ 9E75 B3           		or		e							;   restore T sign
 284+ 9E76 C9           		ret
 285+ 9E77              TIS1SkipSub:
 286+ 9E77 B7           	or			a
 287+ 9E78 CB 10        	rl			b							; T rolled left to push bit out the end
 288+ 9E7A 38 EA        	jr			c,TIS1RollTLoop				; if we still have not hit the empty marker continue
 289+ 9E7C C3 74 9E     	jp			TIS1KIPCont
 290+ 9E7F
 291+ 9E7F              ;.TIDY	\ -> &4679 \ Orthogonalize rotation matrix that uses 0x60 as unity returns INWK(16,18,20) = INWK(12*18+14*20, 10*16+14*20, 10*16+12*18) / INWK(10,12,14)
 292+ 9E7F              ; Ux,Uy,Uz = -(FyUy+FzUz, FxUx+FzUz, FxUx+FyUy)/ Fx,Fy,Fz
 293+ 9E7F
 294+ 9E7F
 295+ 9E7F
 296+ 9E7F
 297+ 9E7F                          DISPLAY "TODO: look at note on TODO"
 298+ 9E7F              TidyRotYSmall:
 299+ 9E7F CD A8 9F     		call	CalcRoofvZ
 300+ 9E82 32 34 C0     		ld		(UBnkrotmatRoofvZ+1),a			; set roofvy hi?? Says roofz TODO
 301+ 9E85 C3 B9 9E     		jp		NormaliseRoofV
 302+ 9E88
 303+ 9E88              TidyRotXSmall:
 304+ 9E88 AF           		xor		a
 305+ 9E89 47           		ld		b,a
 306+ 9E8A 3A 38 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev_y
 307+ 9E8D E6 60        		and		%01100000
 308+ 9E8F CA 7F 9E     		jp		z,TidyRotYSmall
 309+ 9E92 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 310+ 9E95 47           		ld		b,a							; b = regX for now
 311+ 9E96 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 312+ 9E99 CD 6E 9F     		call	CalcRoofvY					; Set (roofvy= (nosev_x * roofv_x + nosev_z * roofv_z) / nosev_y, Q -= nosev_z
 313+ 9E9C 32 32 C0     		ld		(UBnkrotmatRoofvY+1),a			; set roofvy hi
 314+ 9E9F C3 B9 9E     		jp		NormaliseRoofV
 315+ 9EA2              ; TIDY is broken
 316+ 9EA2
 317+ 9EA2
 318+ 9EA2              TIDY:
 319+ 9EA2
 320+ 9EA2              ORTHOGALISE:
 321+ 9EA2              ;-- NormaliseNosev
 322+ 9EA2 CD 05 9C     		call	CopyRotMatNoseVtoXX15
 323+ 9EA5 CD B8 98     		call	normaliseXX1596S7			; normalise z hi, its really TIS3
 324+ 9EA8 CD 3E 9C     		call	CopyXX15toRotMatNoseV
 325+ 9EAB              .CheckNXSmall:
 326+ 9EAB 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)
 327+ 9EAE E6 60        		and		%01100000					; check top two magnitude bits
 328+ 9EB0 CA 88 9E     		jp		z,TidyRotXSmall
 329+ 9EB3              .RotXIsBig:
 330+ 9EB3 CD 34 9F             call	CalcRoofvX
 331+ 9EB6 32 30 C0     		ld		(UBnkrotmatRoofvX+1),a    	; set roofvx hi
 332+ 9EB9              NormaliseRoofV:
 333+ 9EB9 CD 18 9C     		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 334+ 9EBC CD B8 98     		call	normaliseXX1596S7			; normalise roof
 335+ 9EBF              ;calc sidev x
 336+ 9EBF CD 5B 9C     		call	CopyXX15toRotMatRoofV		; get back normalised version
 337+ 9EC2 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)
 338+ 9EC5 32 9C 7E     		ld		(varQ),a					; q = nosev_y
 339+ 9EC8 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 340+ 9ECB CD F7 9B     		call	RSequQmulA
 341+ 9ECE 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 342+ 9ED1 47           		ld		b,a							; b = regX for now
 343+ 9ED2 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 344+ 9ED5 CD 52 9E     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 345+ 9ED8                      JumpIfAIsZero NormSideXNoNeg
 345+ 9ED8 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 345+ 9ED9 CA DE 9E    >                        jp	    z, NormSideXNoNeg
 346+ 9EDC EE 80        		xor		$80							; flip a to get -sidev_x
 347+ 9EDE              NormSideXNoNeg:
 348+ 9EDE 32 2A C0     		ld		(UBnkrotmatSidevX+1),a
 349+ 9EE1              ;calc sidev y
 350+ 9EE1 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 351+ 9EE4 32 9C 7E     		ld		(varQ),a
 352+ 9EE7 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 353+ 9EEA CD F7 9B     		call	RSequQmulA
 354+ 9EED 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)			        ; nosev x
 355+ 9EF0 47           		ld		b,a							; b = regX for now
 356+ 9EF1 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)			; roofv z
 357+ 9EF4 CD 52 9E     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 358+ 9EF7                      JumpIfAIsZero NormSideYNoNeg
 358+ 9EF7 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 358+ 9EF8 CA FD 9E    >                        jp	    z, NormSideYNoNeg
 359+ 9EFB EE 80        		xor		$80							; flip a to get -sidev_y
 360+ 9EFD              NormSideYNoNeg:
 361+ 9EFD 32 38 C0     		ld		(UBnkrotmatNosevY+1),a
 362+ 9F00              ;calc sidev z
 363+ 9F00 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)			; nosev x
 364+ 9F03 32 9C 7E     		ld		(varQ),a
 365+ 9F06 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 366+ 9F09 CD F7 9B     		call	RSequQmulA
 367+ 9F0C 3A 38 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev y
 368+ 9F0F 47           		ld		b,a							; b = regX for now
 369+ 9F10 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 370+ 9F13 CD 52 9E     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 371+ 9F16                      JumpIfAIsZero NormSideZNoNeg
 371+ 9F16 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 371+ 9F17 CA 1C 9F    >                        jp	    z, NormSideZNoNeg
 372+ 9F1A EE 80        		xor		$80							; flip a to get -sidev_y
 373+ 9F1C              NormSideZNoNeg:
 374+ 9F1C 32 2C C0     		ld		(UBnkrotmatSidevY+1),a ;TODO SHoudl this be Y??
 375+ 9F1F              .ClearLoBytes:
 376+ 9F1F 21 35 C0     		ld		hl,UBnkrotmatNosevX
 377+ 9F22 06 09        		ld		b,9
 378+ 9F24 AF                   xor     a
 379+ 9F25              .ClearLoLoop:
 380+ 9F25 77           		ld		(hl),a						; zero out lo bytes
 381+ 9F26 23           		inc		hl
 382+ 9F27 23           		inc		hl
 383+ 9F28 10 FB        		djnz	.ClearLoLoop
 384+ 9F2A CD 2B 9C     		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 385+ 9F2D CD B8 98     		call	normaliseXX1596S7			; normalise roof
 386+ 9F30              ;calc sidev x
 387+ 9F30 CD 78 9C     		call	CopyXX15toRotMatSideV		; get back normalised version
 388+ 9F33
 389+ 9F33 C9           		ret
 390+ 9F34
 391+ 9F34
 392+ 9F34              CalcRoofvX:
 393+ 9F34              Tidy1RX:										; roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 394+ 9F34              		ldCopyByte UBnkrotmatNosevZ+1,varQ
 394+ 9F34 3A 3A C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 394+ 9F37 32 9C 7E    >                        ld       (varQ),a
 395+ 9F3A 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 396+ 9F3D CD F7 9B     		call	RSequQmulA						; rs = nosez hi * roofz hi
 397+ 9F40              		ldCopyByte UBnkrotmatNosevY+1,varQ
 397+ 9F40 3A 38 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 397+ 9F43 32 9C 7E    >                        ld       (varQ),a
 398+ 9F46 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)
 399+ 9F49 CD D4 8F     		call	madXAequQmulAaddRS				; DE = nosey hi * roofy hi + rs
 400+ 9F4C 7A           		ld		a,d
 401+ 9F4D E6 80        		and 	$80
 402+ 9F4F FD 67        		ld		iyh,a
 403+ 9F51              ;DEBUG		ld		c,a
 404+ 9F51 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)					; get nosev x sign
 405+ 9F54 4F           		ld		c,a								; temp save
 406+ 9F55 E6 80        		and		$80
 407+ 9F57 FD AC        		xor		iyh								; flip from saved multiply sign result
 408+ 9F59 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 409+ 9F5B 79           		ld		a,c								; recover a
 410+ 9F5C E6 7F        		and		$7F								; a is unsigned nosev x
 411+ 9F5E 42           		ld		b,d
 412+ 9F5F 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 413+ 9F60 57           		ld		d,a								; de = nosev x hi
 414+ 9F61 1E 00        		ld		e,0
 415+ 9F63 CD 58 95     		call	BC_Div_DE
 416+ 9F66 FD 7C        		ld		a,iyh							; get back sign from nosevx
 417+ 9F68 EE 80        		xor		$80								; flip sign
 418+ 9F6A E6 80        		and		$80								; keep sign bit only
 419+ 9F6C B0           		or		b
 420+ 9F6D C9           		ret
 421+ 9F6E
 422+ 9F6E
 423+ 9F6E              CalcRoofvY:
 424+ 9F6E              Tidy1RY:										; roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 425+ 9F6E              		ldCopyByte UBnkrotmatNosevZ+1,varQ				;                  A        Q              RS
 425+ 9F6E 3A 3A C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 425+ 9F71 32 9C 7E    >                        ld       (varQ),a
 426+ 9F74 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 427+ 9F77 CD F7 9B     		call	RSequQmulA
 428+ 9F7A              		ldCopyByte UBnkrotmatNosevX+1,varQ
 428+ 9F7A 3A 36 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 428+ 9F7D 32 9C 7E    >                        ld       (varQ),a
 429+ 9F80 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)
 430+ 9F83 CD D4 8F     		call	madXAequQmulAaddRS
 431+ 9F86 7A           		ld		a,d
 432+ 9F87 E6 80        		and 	$80
 433+ 9F89 FD 67        		ld		iyh,a
 434+ 9F8B 3A 38 C0     		ld		a,(UBnkrotmatNosevY+1)					; get nosev x sign
 435+ 9F8E 4F           		ld		c,a								; temp save
 436+ 9F8F E6 80        		and		$80
 437+ 9F91 FD AC        		xor		iyh								; flip from saved multiply sign result
 438+ 9F93 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 439+ 9F95 79           		ld		a,c								; recover a
 440+ 9F96 E6 7F        		and		$7F								; a is unsigned nosev x
 441+ 9F98 42           		ld		b,d
 442+ 9F99 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 443+ 9F9A 57           		ld		d,a								; de = nosev x hi
 444+ 9F9B 1E 00        		ld		e,0
 445+ 9F9D CD 58 95     		call	BC_Div_DE
 446+ 9FA0 FD 7C        		ld		a,iyh
 447+ 9FA2 EE 80        		xor		$80
 448+ 9FA4 E6 80        		and		$80
 449+ 9FA6 B0           		or		b
 450+ 9FA7 C9           		ret
 451+ 9FA8
 452+ 9FA8              CalcRoofvZ:
 453+ 9FA8              Tidy1RZ:										; roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 454+ 9FA8              		ldCopyByte UBnkrotmatNosevY+1,varQ
 454+ 9FA8 3A 38 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 454+ 9FAB 32 9C 7E    >                        ld       (varQ),a
 455+ 9FAE 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)
 456+ 9FB1 CD F7 9B     		call	RSequQmulA						; rs = NOSEy * ROOFy
 457+ 9FB4              		ldCopyByte UBnkrotmatNosevX+1,varQ
 457+ 9FB4 3A 36 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 457+ 9FB7 32 9C 7E    >                        ld       (varQ),a
 458+ 9FBA 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)
 459+ 9FBD CD D4 8F     		call	madXAequQmulAaddRS				; de (A,ixl) = NOSEx * ROOFx + RS
 460+ 9FC0 7A           		ld		a,d
 461+ 9FC1 E6 80        		and 	$80
 462+ 9FC3 FD 67        		ld		iyh,a
 463+ 9FC5 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)					; get nosev x sign
 464+ 9FC8 4F           		ld		c,a								; temp save
 465+ 9FC9 E6 80        		and		$80
 466+ 9FCB FD AC        		xor		iyh								; flip from saved multiply sign result
 467+ 9FCD FD 67        		ld		iyh,a							; save nosesev sign to iyh
 468+ 9FCF 79           		ld		a,c								; recover a
 469+ 9FD0 E6 7F        		and		$7F								; a is unsigned nosev x
 470+ 9FD2 42           		ld		b,d
 471+ 9FD3 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 472+ 9FD4 57           		ld		d,a								; de = nosev x hi
 473+ 9FD5 1E 00        		ld		e,0
 474+ 9FD7 CD 58 95     		call	BC_Div_DE
 475+ 9FDA FD 7C        		ld		a,iyh
 476+ 9FDC EE 80        		xor		$80
 477+ 9FDE E6 80        		and		$80
 478+ 9FE0 B0           		or		b
 479+ 9FE1 C9           		ret
 480+ 9FE2
# file closed: ./Maths/Utilities/tidy.asm
1126  9FE2                  INCLUDE "./Maths/Utilities/LL28AequAmul256DivD.asm"
# file opened: ./Maths/Utilities/LL28AequAmul256DivD.asm
   1+ 9FE2
   2+ 9FE2              LL28Amul256DivD:        JumpIfAGTENusng  d, .Ll28Exit255
   2+ 9FE2 BA          >                        cp     d
   2+ 9FE3 D2 01 A0    >                        jp		nc,.Ll28Exit255
   3+ 9FE6 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
   4+ 9FE8 CB 27        .LL31:                  sla     a
   5+ 9FEA 38 0D                                jr      c,.LL29
   6+ 9FEC                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
   6+ 9FEC BA          >                        cp      d
   6+ 9FED DA F2 9F    >                        jp		c, .SkipSub
   7+ 9FF0 92                                   sub     d
   8+ 9FF1                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
   8+ 9FF1 B7          >                        or a
   9+ 9FF2 3F           .SkipSub:               ccf                                 ; if we did the subtract the carry will be clear so we need to invert to roll in.
  10+ 9FF3 CB 13                                rl      e
  11+ 9FF5 38 F1                                jr      c,.LL31
  12+ 9FF7 7B                                   ld      a,e
  13+ 9FF8 C9                                   ret
  14+ 9FF9 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
  15+ 9FFA 37                                   scf                                 ; Set the C flag to rotate into the result in R
  16+ 9FFB CB 13                                rl      e                           ; rotate counter e left
  17+ 9FFD 38 E9                                jr      c,.LL31                     ; if a bit was spat off teh end then loop
  18+ 9FFF 7B                                   ld      a,e                         ; stick result in a
  19+ A000 C9                                   ret
  20+ A001 3E FF        .Ll28Exit255:           ld  a,255                           ; Fail with FF as result
  21+ A003 C9                                   ret
  22+ A004
  23+ A004              ;-- Name: LL28 Calculate R = 256 * A / Q
  24+ A004              ;-- LL28+4              Skips the A >= Q check and always returns with C flag cleared, so this can be called if we know the division will work
  25+ A004              ;-- LL31                Skips the A >= Q check and does not set the R counter, so this can be used for jumping straight into the division loop if R is already set to 254 and we know the division will work
  26+ A004              ;   Reg mapping 6502  Z80
  27+ A004              ;               a     a
  28+ A004              ;               b     x
  29+ A004              ;               c     q
  30+ A004              ;               d     r
  31+ A004              ;
  32+ A004 21 B2 F1     LL28Amul256DivD_6502:   ld      hl,Qvar                 ; CMP Q                  \ If A >= Q, then the answer will not fit in one byte,
  33+ A007 4E                                   ld      c,(hl)                  ; using c as Q var
  34+ A008 B9                                   cp      c
  35+ A009                                      FlipCarryFlag
  35+ A009 3F          >                        ccf
  36+ A00A DA 32 A0                             jp      c, .LL2_6502            ; BCS LL2                \ so jump to LL2 to return 255
  37+ A00D 06 FE                                ld      b,$FE                   ; LDX #%11111110         \ Set R to have bits 1-7 set, so we can rotate through 7 loop iterations, getting a 1 each time, and then we use b as Rvar
  38+ A00F CB 27        .LL31_6502:             sla     a                       ; ASL A                  \ Shift A to the left
  39+ A011 DA 26 A0                             jp      c,.LL29_6502            ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
  40+ A014                                      FlipCarryFlag                   ;                          If A < N, then C flag is set.
  40+ A014 3F          >                        ccf
  41+ A015                                      JumpIfALTNusng c, .LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
  41+ A015 B9          >                        cp      c
  41+ A016 DA 1B A0    >                        jp		c, .LL31_SKIPSUB_6502
  42+ A019                                                                      ; BCC P%+4
  43+ A019 91                                   sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  44+ A01A                                      ClearCarryFlag
  44+ A01A B7          >                        or a
  45+ A01B              .LL31_SKIPSUB_6502:     FlipCarryFlag
  45+ A01B 3F          >                        ccf
  46+ A01C CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  47+ A01E DA 0F A0                             jp      c, .LL31_6502           ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  48+ A021 78                                   ld      a,b
  49+ A022 32 B3 F1                             ld      (Rvar),a
  50+ A025 C9                                   ret                             ; RTS                    \ R left with remainder of division
  51+ A026 91           .LL29_6502:             sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  52+ A027                                      SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
  52+ A027 37          >                        scf
  53+ A028 CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  54+ A02A DA 0F A0                             jp      c, .LL31_6502           ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  55+ A02D 78                                   ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
  56+ A02E 32 B3 F1                             ld      (Rvar),a                ; .
  57+ A031 C9                                   ret                             ; .                      \ remainder of the division
  58+ A032 3E FF        .LL2_6502:              ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
  59+ A034 32 B3 F1                             ld      (Rvar),a                ; STA R                  \ possible answer to 256, i.e. R = 255
  60+ A037                                      SetCarryFlag                    ; we failed so need carry flag set
  60+ A037 37          >                        scf
  61+ A038 C9                                   ret                             ; RTS                    \ Return from the subroutine
  62+ A039
  63+ A039
  64+ A039 21 9C 7E     LL28Amul256DivQ_6502:   ld      hl,varQ                 ; CMP Q                  \ If A >= Q, then the answer will not fit in one byte,
  65+ A03C 4E                                   ld      c,(hl)                  ; using c as Q var
  66+ A03D B9                                   cp      c
  67+ A03E                                      FlipCarryFlag
  67+ A03E 3F          >                        ccf
  68+ A03F DA 67 A0                             jp      c, .LL2_6502            ; BCS LL2                \ so jump to LL2 to return 255
  69+ A042 06 FE                                ld      b,$FE                   ; LDX #%11111110         \ Set R to have bits 1-7 set, so we can rotate through 7 loop iterations, getting a 1 each time, and then we use b as Rvar
  70+ A044 CB 27        .LL31_6502:             sla     a                       ; ASL A                  \ Shift A to the left
  71+ A046 DA 5B A0                             jp      c,.LL29_6502            ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
  72+ A049                                      FlipCarryFlag                   ;                          If A < N, then C flag is set.
  72+ A049 3F          >                        ccf
  73+ A04A                                      JumpIfALTNusng c, .LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
  73+ A04A B9          >                        cp      c
  73+ A04B DA 50 A0    >                        jp		c, .LL31_SKIPSUB_6502
  74+ A04E                                                                      ; BCC P%+4
  75+ A04E 91                                   sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  76+ A04F                                      ClearCarryFlag
  76+ A04F B7          >                        or a
  77+ A050              .LL31_SKIPSUB_6502:     FlipCarryFlag
  77+ A050 3F          >                        ccf
  78+ A051 CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  79+ A053 DA 44 A0                             jp      c, .LL31_6502           ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  80+ A056 78                                   ld      a,b
  81+ A057 32 9D 7E                             ld      (varR),a
  82+ A05A C9                                   ret                             ; RTS                    \ R left with remainder of division
  83+ A05B 91           .LL29_6502:             sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  84+ A05C                                      SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
  84+ A05C 37          >                        scf
  85+ A05D CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  86+ A05F DA 44 A0                             jp      c, .LL31_6502           ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  87+ A062 78                                   ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
  88+ A063 32 9D 7E                             ld      (varR),a                ; .
  89+ A066 C9                                   ret                             ; .                      \ remainder of the division
  90+ A067 3E FF        .LL2_6502:              ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
  91+ A069 32 9D 7E                             ld      (varR),a                ; STA R                  \ possible answer to 256, i.e. R = 255
  92+ A06C                                      SetCarryFlag                    ; we failed so need carry flag set
  92+ A06C 37          >                        scf
  93+ A06D C9                                   ret                             ; RTS                    \ Return from the subroutine
  94+ A06E
# file closed: ./Maths/Utilities/LL28AequAmul256DivD.asm
1127  A06E                  INCLUDE "./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm"
# file opened: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
   1+ A06E              XAequMinusXAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
   2+ A06E              TIS1:
   3+ A06E 08           		ex		af,af'
   4+ A06F 3A 86 7D     		ld		a,(regX)
   5+ A072 47           		ld		b,a
   6+ A073 08           		ex		af,af'
   7+ A074              BAequMinusBAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
   8+ A074 08           		ex		af,af'
   9+ A075 78           		ld		a,b
  10+ A076 32 9C 7E     		ld		(varQ),a
  11+ A079 08           		ex		af,af'
  12+ A07A EE 80        		xor		$80							;	 flip sign of Acc
  13+ A07C CD D4 8F     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  14+ A07F              ; USES 				A BC E
  15+ A07F              ; DOES NOT USE		D HL
  16+ A07F              Div96:										; .DVID96	\ Their comment A=A/96: answer is A*255/96
  17+ A07F 47           		ld		b,a
  18+ A080 E6 80        		and		$80							;	hi sign
  19+ A082 5F           		ld		e,a							;   e = varT
  20+ A083 78           		ld		a,b
  21+ A084 E6 7F        		and		$7F							;	hi A7
  22+ A086 06 FE        		ld		b,$FE						;   slide counter
  23+ A088 48           		ld		c,b							;   c == T1 ::  T1
  24+ A089              .DVL3:										;   roll T1  clamp Acc to #96 for rotation matrix unity
  25+ A089 CB 27        		sla		a
  26+ A08B FE 60        		cp		$60							; max 96
  27+ A08D 30 02        		jr		nc,.DV4
  28+ A08F DE 60        		sbc		a,$60							;  SBC #&60
  29+ A091              .DV4:										; skip subtraction
  30+ A091 CB 11        		rl		c							;  T1
  31+ A093 38 F4        		jr		c,.DVL3
  32+ A095 79           		ld		a,c							;   T1
  33+ A096 B3           		or		e							;   restore T sign
  34+ A097 C9           		ret
  35+ A098
# file closed: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
1128  A098
1129  A098                  INCLUDE "./GameEngine/Tactics.asm"
# file opened: ./GameEngine/Tactics.asm
   1+ A098
   2+ A098                                      DEFINE TACTICSDEBUG 1
   3+ A098              ;                       DEFINE ALWAYSANGRY 1
   4+ A098              ;                        DEFINE TARGETDEBUG 1
   5+ A098              MISSILEMAXPITCH         equ 3
   6+ A098              MISSILEMINPITCH         equ -3
   7+ A098              MISSILEMAXROLL          equ 3
   8+ A098              MISSILEMINROLL          equ -3
   9+ A098              ;Ship Tactics
  10+ A098              ;ShipTypeNormal          equ 0
  11+ A098              ;ShipTypeMissile         equ 1
  12+ A098              ;ShipTypeStation         equ 2
  13+ A098              ;ShipTypeJunk            equ 3
  14+ A098              ;ShipTypeScoopable       equ 4         ; a sub set of junk
  15+ A098              ; To be added
  16+ A098              ;ShipTypeTargoid
  17+ A098              ;ShipTypeHermit
  18+ A098              ; Maybe add the followign with ai flags changing in memory shiptype
  19+ A098              ;ShipTypePirate
  20+ A098              ;ShipTypeBountyHunter
  21+ A098              ;ShipTypeTrader
  22+ A098              ;ShipType.....
  23+ A098              ;ShipTypeMissionTypeA
  24+ A098              ;ShipTypeMissionTypeB
  25+ A098              ;ShipTypeMissionTypeETC
  26+ A098              ;ShipTypeNoAI
  27+ A098
  28+ A098
  29+ A098
  30+ A098 CE A5 A6 A2  ShipAIJumpTable:      DW    NormalAI,   MissileAIV3,  StationAI,  JunkAI,     ScoopableAI
  30+ A09C CB A0 CC A0
  30+ A0A0 CD A0
  31+ A0A2 CE A0 CF A0                        DW    ThargoidAI, NoAI,       NoAI,       NoAI,       NoAI
  31+ A0A6 CF A0 CF A0
  31+ A0AA CF A0
  32+ A0AC              ShipAiJumpTableMax:   EQU ($ - ShipAIJumpTable)/2
  33+ A0AC
  34+ A0AC
  35+ A0AC
  36+ A0AC              ;----------------------------------------------------------------------------------------------------------------------------------
  37+ A0AC              ; Main entry point to tactics. Every time it will do a a tidy and the do AI logic
  38+ A0AC              UpdateShip:             ;  call    DEBUGSETNODES ;       call    DEBUGSETPOS
  39+ A0AC 21 68 68                            ld      hl,TidyCounter
  40+ A0AF 35                                  dec     (hl)
  41+ A0B0                                     DISPLAY "TODO: SEE IF THIS IS AN ISSUE"
  42+ A0B0 CC F1 9C                            call     z,TidyUbnK  ;TODO SEE IF THIS IS AN ISSUE"
  43+ A0B3                                     ; This shoudl be a call nz to tidy *****ret     nz
  44+ A0B3 3E 10                               ld      a,16
  45+ A0B5 32 68 68                            ld      (TidyCounter),a
  46+ A0B8                                     ;call    TidyUbnK
  47+ A0B8                                     ; add AI in here too
  48+ A0B8 3A 0D C4                            ld       a,(ShipTypeAddr)
  49+ A0BB                                                 DISPLAY "TODO: capture duff jumps"
  50+ A0BB                                     ReturnIfAGTEusng ShipAiJumpTableMax              ; TODO capture duff jumps whilst debugging in case a new shjip type code is added
  50+ A0BB FE 0A       >                        cp    ShipAiJumpTableMax
  50+ A0BD D0          >                        ret	 nc
  51+ A0BE 21 98 A0                            ld       hl,ShipAIJumpTable
  52+ A0C1 ED 31                               add      hl,a
  53+ A0C3 ED 31                               add      hl,a
  54+ A0C5 7E                                  ld       a,(hl)                                  ; contrary to the name
  55+ A0C6 23                                  inc      hl                                      ; jp (hl) is really
  56+ A0C7 66                                  ld       h,(hl)                                  ; jp hl
  57+ A0C8 6F                                  ld       l,a                                     ;
  58+ A0C9 E9                                  jp       hl                                      ; Follow the AI Jump Table
  59+ A0CA C9                                  ret                                              ; not needed as jp handles this
  60+ A0CB
  61+ A0CB
  62+ A0CB
  63+ A0CB              ; used  when no pre-checks are requrired, e.g. if forcing a space station from main loop
  64+ A0CB
  65+ A0CB
  66+ A0CB C9           StationAI:              ret
  67+ A0CC C9           JunkAI:                 ret
  68+ A0CD C9           ScoopableAI:            ret
  69+ A0CE C9           ThargoidAI:             ret
  70+ A0CF C9           NoAI:                   ret
  71+ A0D0              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ A0D0              CalculateAgression:     IFDEF   ALWAYSANGRY
  73+ A0D0 ~                                        jp  UltraHostile
  74+ A0D0                                      ENDIF
  75+ A0D0 3A 0F C4                             ld      a,(ShipAIFlagsAddr)
  76+ A0D3 47                                   ld      b,a
  77+ A0D4 E6 02                                and     %00000010
  78+ A0D6 20 20                                jr      nz,.UltraHostile
  79+ A0D8 78                                   ld      a,b
  80+ A0D9 E6 F0                                and     %11110000                               ; if it can can anger a fighter bay then generally more hostile as implies its a large ship
  81+ A0DB 21 5C C0                             ld      hl,UBnKMissilesLeft                     ; more missiles more agression
  82+ A0DE B6                                   or      (hl)
  83+ A0DF 47                                   ld      b,a
  84+ A0E0 3A 0E C4                             ld      a,(ShipNewBitsAddr)
  85+ A0E3 E6 4E                                and     %01001110                               ; We look at if its a bounty hunter, hostile already, pirate and cop
  86+ A0E5 B0                                   or      b
  87+ A0E6 47                                   ld      b,a
  88+ A0E7 3A 53 C0                             ld      a,(UBnKShipAggression)
  89+ A0EA                                      JumpIfALTNusng 64,.NotAlreadyAgressive
  89+ A0EA FE 40       >                        cp      64
  89+ A0EC DA F3 A0    >                        jp		c, .NotAlreadyAgressive
  90+ A0EF 78                                   ld      a,b
  91+ A0F0 F6 80                                or      %10000000                               ; if its already at least 64 agressive then likley to stay so
  92+ A0F2 47                                   ld      b,a
  93+ A0F3 78           .NotAlreadyAgressive:   ld      a,b
  94+ A0F4 32 53 C0                             ld      (UBnKShipAggression),a
  95+ A0F7 C9                                   ret
  96+ A0F8 3E FF        .UltraHostile:          ld      a,$FF
  97+ A0FA 32 53 C0                             ld      (UBnKShipAggression),a
  98+ A0FD C9                                   ret
  99+ A0FE              ;----------------------------------------------------------------------------------------------------------------------------------
 100+ A0FE              ; set angry if possible, if its an innocent then flag the space station to get angry
 101+ A0FE 3A 0E C4     MakeHostile:            ld      a,(ShipNewBitsAddr)                     ; Check bit 5 of newb flags
 102+ A101                                      ;break
 103+ A101                                      JumpIfMemEqNusng ShipTypeAddr, ShipTypeStation, .SetNewbHostile
 103+ A101 3A 0D C4    >                        ld  a,(ShipTypeAddr)
 103+ A104 FE 02       >                        cp  ShipTypeStation
 103+ A106 CA 25 A1    >                        jp  z,.SetNewbHostile
 104+ A109 E6 20        .ItsNotAStation:        and     ShipIsBystander                         ; check if space station present if its a bystander
 105+ A10B C4 5F A1                             call    nz, SetStationHostile                   ; Set Space Station if present, Angry
 106+ A10E 3A 54 C0                             ld      a,(UBnkaiatkecm)                        ; get AI data
 107+ A111                                      ReturnOnBitClear a, ShipAIEnabledBitNbr         ; if 0 then no AI attached so it can't get angry
 107+ A111 CB 7F       >                        bit 	ShipAIEnabledBitNbr,a
 107+ A113 C8          >                        ret		z
 108+ A114 4F                                   ld      c,a                                     ; Copy to c in case we need it later
 109+ A115                                      SetMemToN UBnKAccel, 2                          ; set accelleration to 2 to speed up
 109+ A115 3E 02       >                        ld      a,2
 109+ A117 32 47 C0    >                        ld      (UBnKAccel),a
 110+ A11A CB 27                                sla     a                                       ; set pitch to 4
 111+ A11C 32 49 C0                             ld      (UBnKRotZCounter),a                     ; .
 112+ A11F 3A 0F C4                             ld      a,(ShipAIFlagsAddr)
 113+ A122                                      ReturnIfBitMaskClear ShipCanAnger
 113+ A122 E6 80       >                        and     ShipCanAnger
 113+ A124 C8          >                        ret     z
 114+ A125 CD 1A C6     .SetNewbHostile:        call    SetShipHostile
 115+ A128 C9                                   ret
 116+ A129
 117+ A129                          DISPLAY "TODO: Missile Did Hit Us"
 118+ A129              ;----------------------------------------------------------------------------------------------------------------------------------
 119+ A129 C9           MissileDidHitUs:        ret ; TODO
 120+ A12A
 121+ A12A              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ A12A              PlayerHitByMissile:     MMUSelectLayer1
 122+ A12A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 123+ A12E 3E 05                                ld      a,L1ColourInkCyan
 124+ A130 CD B4 E0                             call    l1_set_border
 125+ A133 3A 3C C0                             ld      a,(UBnKMissileBlastDamage)
 126+ A136 47                                   ld      b,a                                     ; b = damage
 127+ A137 3A 28 C0                             ld      a,(UBnKzsgn)
 128+ A13A E6 80                                and     $80
 129+ A13C 20 0A                                jr      nz,.HitRear
 130+ A13E 3A 1D 81     .HitFront:              ld      a,(ForeShield)
 131+ A141 CD 36 64                             call    ApplyDamage
 132+ A144 32 1D 81                             ld      (ForeShield),a
 133+ A147 C9                                   ret
 134+ A148 3A 1E 81     .HitRear:               ld      a,(AftShield)
 135+ A14B CD 36 64                             call    ApplyDamage
 136+ A14E 32 1E 81                             ld      (AftShield),a
 137+ A151                                                  DISPLAY "TODO: Set up blast radius"
 138+ A151 C9                                   ret; TODO , do hit set up blast radius etc
 139+ A152              ;----------------------------------------------------------------------------------------------------------------------------------
 140+ A152              MissileHitShipA:        MMUSelectLayer1
 140+ A152 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 141+ A156 3E 02                                ld      a,L1ColourInkRed
 142+ A158 CD B4 E0                             call    l1_set_border
 143+ A15B CD 45 C7                             call    UnivExplodeShip
 144+ A15E                                                  DISPLAY "TODO:  hit ship do explosion"
 145+ A15E C9                                   ret; TODO hit ship do explosion, check for near by and if player is near and missile type logic, e.g. AP or HE
 146+ A15F              ;----------------------------------------------------------------------------------------------------------------------------------
 147+ A15F CD C8 83     SetStationHostile:      call    IsSpaceStationPresent                   ; only if present
 148+ A162 D8                                   ret     c
 149+ A163 3A 40 C0                             ld      a,(UbnKShipUnivBankNbr)                     ; save current bank
 150+ A166 FD 67                                ld      iyh,a
 151+ A168                                      MMUSelectUniverseN 0                            ; space station is always 0
 151+ A168 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 152+ A16C CD 1A C6                             call    SetShipHostile
 153+ A16F FD 7C                                ld      a,iyh                                   ; get prev bank back
 154+ A171                                      MMUSelectUniverseA                              ;
 154+ A171 C6 46       >                     add    a,BankUNIVDATA0
 154+ A173 ED 92 56    >                     nextreg UniverseMMU,       a
 155+ A176 C9                                   ret
 156+ A177
 157+ A177              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ A177              CheckMissileBlastInit:  ZeroA
 158+ A177 AF          >                        xor a
 159+ A178 32 6E 80                             ld      (CurrentMissileCheck),a
 160+ A17B 21 20 C0                             ld      hl,UBnKxlo                      ; Copy Blast Coordinates
 161+ A17E 01 0C 00                             ld      bc,12                           ; and Damage stats
 162+ A181 11 75 7F                             ld      de,MissileXPos
 163+ A184 ED B0                                ldir
 164+ A186                                      ZeroA                                   ; we have processd enque request
 164+ A186 AF          >                        xor a
 165+ A187 32 44 C0                             ld      (UBnKMissleHitToProcess),a      ;
 166+ A18A CD D0 A1                             call    CheckIfBlastHitUs               ; If we are in Range
 167+ A18D DC 29 A1                             call    c, MissileDidHitUs              ; Then we get hit
 168+ A190 C9                                   ret
 169+ A191
 170+ A191              ;----------------------------------------------------------------------------------------------------------------------------------
 171+ A191              ; Check to see if missile is in range
 172+ A191              ;;ReadyfordeletionposttestCheckPointRange:        MACRO   ShipPos, ShipSign, MissilePos, MissileSign
 173+ A191              ;;Readyfordeletionposttest                        ld      a,(MissilePos)                      ; check X Coord
 174+ A191              ;;Readyfordeletionposttest                        ld      hl,(ShipSign)
 175+ A191              ;;Readyfordeletionposttest                        xor     (hl)
 176+ A191              ;;Readyfordeletionposttest                        and     SignOnly8Bit
 177+ A191              ;;Readyfordeletionposttest                        ld      hl,(ShipPos)
 178+ A191              ;;Readyfordeletionposttest                        ld      de,(MissilePos)
 179+ A191              ;;Readyfordeletionposttest                        jr      z,.SignsDiffernt
 180+ A191              ;;Readyfordeletionposttest.XSame:                 and     a
 181+ A191              ;;Readyfordeletionposttest                        sbc     hl,de                               ; distance = Ship X - Missile X
 182+ A191              ;;Readyfordeletionposttest                        JumpIfPositive      .CheckDiff              ; if result was -ve
 183+ A191              ;;Readyfordeletionposttest                        NegHL
 184+ A191              ;;Readyfordeletionposttest                        jp      .CheckDiff
 185+ A191              ;;Readyfordeletionposttest.SignsDiffernt:         add     hl,de
 186+ A191              ;;Readyfordeletionposttest                        ReturnIfNegative                            ; if we overflowed then return
 187+ A191              ;;Readyfordeletionposttest.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 188+ A191              ;;Readyfordeletionposttest                        ReturnIfANotZero
 189+ A191              ;;Readyfordeletionposttest                        ld      a,l
 190+ A191              ;;Readyfordeletionposttest                        and     a
 191+ A191              ;;Readyfordeletionposttest                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
 192+ A191              ;;Readyfordeletionposttest                        ENDM
 193+ A191              ;...................................................................
 194+ A191              ; We only do one test per loop for spreading the load of work
 195+ A191 3A 6E 80     CheckMissileBlastLoop:  ld      a,(CurrentMissileCheck)
 196+ A194                                      ReturnIfAGTENusng   UniverseSlotListSize
 196+ A194 FE 0C       >                        cp    UniverseSlotListSize
 196+ A196 D0          >                        ret	 nc
 197+ A197 FD 6F                                ld      iyl,a
 198+ A199 3C                                   inc     a                                   ; update for next slot so re can fast return on distance checks
 199+ A19A 32 6E 80                             ld      (CurrentMissileCheck),a
 200+ A19D                                      ReturnIfSlotAEmpty
 200+ A19D 21 70 80    >                        ld      hl,UniverseSlotList
 200+ A1A0 ED 31       >                        add     hl,a
 200+ A1A2 7E          >                        ld      a,(hl)
 200+ A1A3 3C          >                        inc     a
 200+ A1A4 C8          >                        ret     z           ; if slot was ff inc would make it 0
 200+ A1A5 3D          >                        dec     a           ; get original value back for later
 201+ A1A6 CD C8 83                             call    IsSpaceStationPresent               ; If its a station its imune to missiles
 202+ A1A9 D8                                   ret     c                                   ; if we have a special mission to kill a staion then its type won't be space station for game logic
 203+ A1AA 3A 51 C0                             ld      a,(UBnKexplDsp)                     ; Don't explode a ship twice
 204+ A1AD E6 20                                and     ShipExploding                       ;
 205+ A1AF                                      ReturnIfNotZero                             ;
 205+ A1AF C0          >                        ret     nz
 206+ A1B0 3A 96 7F                             ld      a,(CurrentMissileBlastRange)
 207+ A1B3 FD 67                                ld      iyh,a                               ; iyh = missile blast depending on type
 208+ A1B5 FD 7D        .CheckRange:            ld      a,iyl                               ; now page in universe data
 209+ A1B7                                      MMUSelectUniverseA
 209+ A1B7 C6 46       >                     add    a,BankUNIVDATA0
 209+ A1B9 ED 92 56    >                     nextreg UniverseMMU,       a
 210+ A1BC DD 21 20 C0                          ld      ix,UBnKxlo
 211+ A1C0 FD 21 75 7F                          ld      iy,MissileXPos
 212+ A1C4                                      MMUSelectMathsBankedFns
 212+ A1C4 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 212+ A1C8 CD 94 01       call CheckInCollisionRange
 213+ A1CB                                      ;CheckPointRange UBnKxlo, UBnKxsgn, MissileXPos, MissileXSgn  ; its a square but its good enough
 214+ A1CB                                      ;CheckPointRange UBnKylo, UBnKysgn, MissileYPos, MissileYSgn
 215+ A1CB                                      ;CheckPointRange UBnKzlo, UBnKzsgn, MissileZPos, MissileZSgn
 216+ A1CB D0                                   ret     nc                                  ; no collision means no carry
 217+ A1CC CD 34 C7                             call    ShipMissileBlast                    ; Ship hit by missile blast
 218+ A1CF C9                                   ret                                         ; we are done
 219+ A1D0              ;...................................................................
 220+ A1D0 3A 3B C0     CheckIfBlastHitUs:      ld      a,(UBnKMissileBlastRange)
 221+ A1D3 4F                                   ld      c,a
 222+ A1D4 C3 DB A1                             jp      MissileHitUsCheckPos
 223+ A1D7              ;...................................................................
 224+ A1D7 3A 3D C0     CheckIfMissileHitUs:    ld      a,(UBnKMissileDetonateRange)
 225+ A1DA 4F                                   ld      c,a
 226+ A1DB              ;...................................................................
 227+ A1DB 2A 20 C0     MissileHitUsCheckPos:   ld      hl, (UBnKxlo)                       ; to check for us collision
 228+ A1DE ED 5B 23 C0                          ld      de, (UBnKylo)                       ; we can cheat as a missile will only ever be
 229+ A1E2 ED 4B 26 C0                          ld      bc, (UBnKzlo)                       ; 16 bit + sign bit in sign byte
 230+ A1E6 7C                                   ld      a,h
 231+ A1E7 B2                                   or      d
 232+ A1E8 B0                                   or      b
 233+ A1E9              .PrepForNoHit:          ClearCarryFlag
 233+ A1E9 B7          >                        or a
 234+ A1EA                                      ReturnIfNotZero
 234+ A1EA C0          >                        ret     nz
 235+ A1EB              .PrepForHit:            SetCarryFlag
 235+ A1EB 37          >                        scf
 236+ A1EC C9                                   ret
 237+ A1ED
 238+ A1ED                                      ZeroA
 238+ A1ED AF          >                        xor a
 239+ A1EE B4                                   or      h
 240+ A1EF                                      ClearCarryFlag
 240+ A1EF B7          >                        or a
 241+ A1F0                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 241+ A1F0 C0          >                        ret     nz
 242+ A1F1 7D                                   ld      a,l
 243+ A1F2                                      ReturnIfAGTENusng    c                      ; return no carry if x far
 243+ A1F2 B9          >                        cp    c
 243+ A1F3 D0          >                        ret	 nc
 244+ A1F4 2A 23 C0     .CheckY:                ld      hl,(UBnKylo)
 245+ A1F7                                      ZeroA
 245+ A1F7 AF          >                        xor a
 246+ A1F8 B5                                   or      l
 247+ A1F9                                      ClearCarryFlag
 247+ A1F9 B7          >                        or a
 248+ A1FA                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 248+ A1FA C0          >                        ret     nz
 249+ A1FB 7D                                   ld      a,l
 250+ A1FC                                      ReturnIfAGTENusng    c                      ; return no carry if y far
 250+ A1FC B9          >                        cp    c
 250+ A1FD D0          >                        ret	 nc
 251+ A1FE 2A 26 C0     .CheckZ:                ld      hl,(UBnKzlo)
 252+ A201                                      ZeroA
 252+ A201 AF          >                        xor a
 253+ A202 B5                                   or      l
 254+ A203                                      ClearCarryFlag
 254+ A203 B7          >                        or a
 255+ A204                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 255+ A204 C0          >                        ret     nz
 256+ A205 7D                                   ld      a,l
 257+ A206                                      ReturnIfAGTENusng    c                      ; return no carry if z far
 257+ A206 B9          >                        cp    c
 257+ A207 D0          >                        ret	 nc
 258+ A208              .ItsAHit:               SetCarryFlag                                ; So must have hit
 258+ A208 37          >                        scf
 259+ A209 C9                                   ret
 260+ A20A
 261+ A20A              SelectMissileBank:      MACRO
 262+ A20A ~                                    ld      a,iyh
 263+ A20A ~                                    MMUSelectUnivBankA
 264+ A20A                                      ENDM
 265+ A20A
 266+ A20A              SelectTargetBank:       MACRO
 267+ A20A ~                                    ld      a,iyl
 268+ A20A ~                                    MMUSelectUnivBankA
 269+ A20A                                      ENDM
 270+ A20A
 271+ A20A              ;...................................................................
 272+ A20A              ; ... Copy of target data for missile calcs etc
 273+ A20A                                      INCLUDE "./TacticsWorkingData.asm"
# file opened: ./GameEngine/./TacticsWorkingData.asm
   1++A20A 00           TacticsTargetShip       DB 0
   2++A20B 20           TacticsPad0A            DB " "
   3++A20C 00           TacticsMissileBank      DB 0
   4++A20D 00           TacticsTargetBank       DB 0
   5++A20E 50 72 64 3E  TacticsPad0B            DB "Prd>"
   6++A212 00 00        TacticsDotProduct1      DS 2
   7++A214 3E           TacticsPad0C            DB ">"
   8++A215 00 00        TacticsDotProduct2      DS 2
   9++A217 3E           TacticsPad0D            DB ">"
  10++A218 00 00        TacticsDotProduct3      DS 2
  11++A21A 4D 69 73 6C  TacticsPad1A            DB "MislX"
  11++A21E 58
  12++A21F 00 00 00     TacticsMissileX         DS 3
  13++A222 59           TacticsPad1B            DB "Y"
  14++A223 00 00 00     TacticsMissileY         DS 3
  15++A226 5A           TacticsPad1C            DB "Z"
  16++A227 00 00 00     TacticsMissileZ         DS 3
  17++A22A 4D 61 74 20  TcaticsPad2A            DB "Mat X"
  17++A22E 58
  18++A22F 20 59        TacticsPad2B            DB " Y"
  19++A231 20 5A        TacticsPad2C            DB " Z"
  20++A233 00           TacticsRotMatX          DB 0
  21++A234 00           TacticsToyMatXSign      DB 0
  22++A235 00           TacticsRotMatY          DB 0
  23++A236 00           TacticsToyMatYSign      DB 0
  24++A237 00           TacticsRotMatZ          DB 0
  25++A238 00           TacticsToyMatZSign      DB 0
  26++A239 20           TacticsPad2D            DB " "
  27++A23A 54 61 72 67  TacticsPad3A            DB "Targ="
  27++A23E 3D
  28++A23F 00 00 00     TacticsTargetX          DS 3
  29++A242 00 00 00     TacticsTargetY          DS 3
  30++A245 00 00 00     TacticsTargetZ          DS 3
  31++A248 3D 20        TacticsPad3B            DB "= "
  32++A24A 56 65 63 74  TacticsPad4A            DB "VectX"
  32++A24E 58
  33++A24F 00 00 00     TacticsVectorX:         DS 3
  34++A252 59           TacticsPad4B            DB "Y"
  35++A253 00 00 00     TacticsVectorY:         DS 3
  36++A256 5A           TacticsPad4C            DB "Z"
  37++A257 00 00 00     TacticsVectorZ:         DS 3
  38++A25A 4E 6F 72 6D  TacticsPad5A            DB "NormX"
  38++A25E 58
  39++A25F 00 00        TacticsNormX:           DS 2
  40++A261 20 59        TacticsPad5B            DB " Y"
  41++A263 00 00        TacticsNormY:           DS 2
  42++A265 20 5A        TacticsPad5C            DB " Z"
  43++A267 00 00        TacticsNormZ:           DS 2
  44++A269 20           TacticsPad5D            DB " "
  45++A26A 53 69 64 65  TacticsPad7A            DB "SideX"
  45++A26E 58
  46++A26F 00 00        TacticsSideX            DS 2
  47++A271 20 59        TacticsPad7B            DB " Y"
  48++A273 00 00        TacticsSideY            DS 2
  49++A275 20 5A        TacticsPad7C            DB " Z"
  50++A277 00 00        TacticsSideZ            DS 2
  51++A279 20 52 6F 6F  TacticsPad8A            DB " RoofX"
  51++A27D 66 58
  52++A27F 00 00        TacticsRoofX            DS 2
  53++A281 20 59        TacticsPad8B            DB " Y"
  54++A283 00 00        TacticsRoofY            DS 2
  55++A285 20 5A        TacticsPad8C            DB " Z"
  56++A287 00 00        TacticsRoofZ            DS 2
  57++A289 20 4E 6F 73  TacticsPad9A            DB " NoseX"
  57++A28D 65 58
  58++A28F 00 00        TacticsNoseX            DS 2
  59++A291 20 59        TacticsPad9B            DB " Y"
  60++A293 00 00        TacticsNoseY            DS 2
  61++A295 20 5A        TacticsPad9C            DB " Z"
  62++A297 00 00        TacticsNoseZ            DS 2
  63++A299 20           TacticsPad9D            DB " "
  64++A29A 52 45 53 55  TacticsPadAA            DB "RESULT"
  64++A29E 4C 54
  65++A2A0 00           TacticsRotX             DS 1
  66++A2A1 20           TacticsPadAB            DB " "
  67++A2A2 00           TacticsRotZ             DS 1
  68++A2A3 20           TacticsPadAC            DB " "
  69++A2A4 00           TacticsSpeed            DS 1
  70++A2A5 20           TacticsPadAD            DB " "
  71++A2A6
  72++A2A6
# file closed: ./GameEngine/./TacticsWorkingData.asm
 274+ A2A6                                      INCLUDE "../GameEngine/MissileAI.asm"
# file opened: ./GameEngine/../GameEngine/MissileAI.asm
   1++A2A6                                      DEFINE MISSILEDEBUG 1
   2++A2A6                                      DEFINE MISSILEDOHIT 1
   3++A2A6
   4++A2A6              MISSILEMAXACCEL         equ 3
   5++A2A6              MISSILEMAXDECEL         equ -3
   6++A2A6                                      ;DEFINE MISSILEBREAK
   7++A2A6              ;.. Thsi version uses new kind logic
   8++A2A6              ;... Now the tactics if current ship is the missile, when we enter this SelectedUniverseSlot holds slot of missile
   9++A2A6              MissileAIV3:            ;ld      a,(ShipAIEnabled)
  10++A2A6                                      ;ReturnOnBitClear a, ShipAIEnabledBitNbr
  11++A2A6                                      IFDEF MISSILEDOHIT
  12++A2A6                                          JumpIfMemTrue UBnKMissleHitToProcess, .ProcessMissileHit
  12++A2A6 3A 44 C0    >                        ld      a,(UBnKMissleHitToProcess)
  12++A2A9 A7          >                        and     a
  12++A2AA CA 0C A4    >                        jp      z, .ProcessMissileHit
  13++A2AD                                      ENDIF
  14++A2AD              .CheckForECM:           JumpIfMemNotZero ECMCountDown,.ECMIsActive  ; If ECM is running then kill the missile
  14++A2AD 3A B1 7D    >                        ld  a,(ECMCountDown)
  14++A2B0 A7          >                        and a
  14++A2B1 C2 15 A4    >                        jp  nz,.ECMIsActive
  15++A2B4              .IsMissileHostile:      IsShipHostile                               ; is missle attacking us?
  15++A2B4 3A 0E C4    >                        ld      a,(ShipNewBitsAddr)
  15++A2B7 E6 04       >                        and     ShipIsHostile
  16++A2B9                                      JumpIfZero .MissileTargetingShip            ; Missile is friendly then z is set else targetting us
  16++A2B9 CA DF A2    >                        jp	z,.MissileTargetingShip
  17++A2BC 2A 20 C0     .MissileTargetingPlayer:ld      hl, (UBnKxlo)                       ; check if missile in range of us
  18++A2BF 3A 3D C0                             ld      a,(UBnKMissileDetonateRange)
  19++A2C2 4F                                   ld      c,a                                 ; c holds detonation range
  20++A2C3 CD DB A1                             call    MissileHitUsCheckPos
  21++A2C6 D2 CF A2     .MissileNotHitUsYet:    jp      nc, .UpdateTargetingUsPos
  22++A2C9 CD 2A A1     .MissleHitUs:           call    PlayerHitByMissile
  23++A2CC C3 15 A4                             jp      .ECMIsActive                        ; we use ECM logic to destroy missile which eqneues is
  24++A2CF CD E8 A8     .UpdateTargetingUsPos:  call    SetPlayerAsTarget
  25++A2D2 CD C3 A8                             call    CopyPosToVector
  26++A2D5 3A 61 80                             ld      a,(SelectedUniverseSlot)            ; we will use this quite a lot with next bank switching
  27++A2D8 C6 46                                add     a,BankUNIVDATA0                     ; pre calculate add to optimise
  28++A2DA FD 67                                ld      iyh,a
  29++A2DC C3 EA A3                             jp      .NormaliseDirection
  30++A2DF              ;--- Missile is targeting other ship
  31++A2DF 3A 61 80     .MissileTargetingShip:  ld      a,(SelectedUniverseSlot)            ; we will use this quite a lot with next bank switching
  32++A2E2 C6 46        .SaveMissileBank:       add     a,BankUNIVDATA0                     ; pre calculate add to optimise
  33++A2E4 FD 67                                ld      iyh,a
  34++A2E6                                      IFDEF MISSILEDEBUG
  35++A2E6 32 0C A2                                 ld  (TacticsMissileBank),a
  36++A2E9                                      ENDIF
  37++A2E9 3A 45 C0     .SaveTargetBank:        ld      a,(UBnKMissileTarget)               ; target will be used a lot too
  38++A2EC C6 46                                add     a,BankUNIVDATA0                     ; pre calculate add to optimise
  39++A2EE FD 6F                                ld      iyl,a                               ; save target
  40++A2F0                                      IFDEF MISSILEDEBUG
  41++A2F0 32 0D A2                                 ld  (TacticsTargetBank),a
  42++A2F3                                      ENDIF
  43++A2F3              .IsMissleTargetGone:    JumpIfSlotAEmpty    .ECMIsActive            ; if the target was blown up then detonate
  43++A2F3 21 70 80    >                        ld      hl,UniverseSlotList
  43++A2F6 ED 31       >                        add     hl,a
  43++A2F8 7E          >                        ld      a,(hl)
  43++A2F9 3C          >                        inc     a
  43++A2FA CA 15 A4    >                        jp      z,.ECMIsActive    ; if slot was ff inc would make it 0
  43++A2FD 3D          >                        dec     a           ; get original value back for later
  44++A2FE              ;... Note we don't have to check for impact as we already have a loop doing that
  45++A2FE              .SelectTargetShip:      SelectTargetBank
  45++A2FE FD 7D       >                        ld      a,iyl
  45++A300             >                        MMUSelectUnivBankA
  45++A300 ED 92 56    >                     nextreg UniverseMMU,       a
  46++A303 3A 54 C0     .IsShipExploding:       ld      a,(UBnkaiatkecm)                    ; check exploding status
  47++A306 E6 20                                and     ShipExploding                       ; as if exploding then the missile will also explode
  48++A308 28 08                                jr      z,.UpdateTargetingShipX
  49++A30A              .ShipIsExploding:       SelectMissileBank                           ; get missile back into memory
  49++A30A FD 7C       >                        ld      a,iyh
  49++A30C             >                        MMUSelectUnivBankA
  49++A30C ED 92 56    >                     nextreg UniverseMMU,       a
  50++A30F C3 15 A4                             jp      .ECMIsActive
  51++A312              ;--- At this point we already have the target banked in ready for calculating vector
  52++A312              ; Tactics vector = missile - target
  53++A312 ED 5B 20 C0  .UpdateTargetingShipX:  ld      de,(UBnKxlo)                        ; get target ship X
  54++A316 3A 22 C0                             ld      a,(UBnKxsgn)                        ; and flip sign so we have missile - target
  55++A319                                      IFDEF MISSILEDEBUG
  56++A319 ED 53 3F A2                              ld  (TacticsTargetX),de
  57++A31D 32 41 A2                                 ld  (TacticsTargetX+2),a
  58++A320                                      ENDIF
  59++A320                                      FlipSignBitA
  59++A320 EE 80       >                        xor     SignOnly8Bit
  60++A322 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
  61++A323                                      SelectMissileBank
  61++A323 FD 7C       >                        ld      a,iyh
  61++A325             >                        MMUSelectUnivBankA
  61++A325 ED 92 56    >                     nextreg UniverseMMU,       a
  62++A328 2A 20 C0                             ld      hl,(UBnKxlo)                        ; get missile x
  63++A32B 3A 22 C0                             ld      a,(UBnKxsgn)                        ; get missile x sign
  64++A32E                                      IFDEF MISSILEDEBUG
  65++A32E 22 1F A2                                 ld  (TacticsMissileX),hl
  66++A331 32 21 A2                                 ld  (TacticsMissileX+2),a
  67++A334                                      ENDIF
  68++A334 47                                   ld      b,a
  69++A335 CD 2F 00                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
  70++A338 22 4F A2                             ld      (TacticsVectorX),hl
  71++A33B 32 51 A2                             ld      (TacticsVectorX+2),a
  72++A33E              .UpdateTargetingShipY:  SelectTargetBank
  72++A33E FD 7D       >                        ld      a,iyl
  72++A340             >                        MMUSelectUnivBankA
  72++A340 ED 92 56    >                     nextreg UniverseMMU,       a
  73++A343 ED 5B 23 C0                          ld      de,(UBnKylo)                        ; get target ship X
  74++A347 3A 25 C0                             ld      a,(UBnKysgn)
  75++A34A                                      IFDEF MISSILEDEBUG
  76++A34A ED 53 42 A2                              ld  (TacticsTargetY),de
  77++A34E 32 44 A2                                 ld  (TacticsTargetY+2),a
  78++A351                                      ENDIF
  79++A351                                      FlipSignBitA
  79++A351 EE 80       >                        xor     SignOnly8Bit
  80++A353 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
  81++A354                                      SelectMissileBank
  81++A354 FD 7C       >                        ld      a,iyh
  81++A356             >                        MMUSelectUnivBankA
  81++A356 ED 92 56    >                     nextreg UniverseMMU,       a
  82++A359 2A 23 C0                             ld      hl,(UBnKylo)                        ; get missile x
  83++A35C 3A 25 C0                             ld      a,(UBnKysgn)                        ; get missile x sign
  84++A35F                                      IFDEF MISSILEDEBUG
  85++A35F 22 23 A2                                 ld  (TacticsMissileY),hl
  86++A362 32 25 A2                                 ld  (TacticsMissileY+2),a
  87++A365                                      ENDIF
  88++A365 47                                   ld      b,a
  89++A366 CD 2F 00                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
  90++A369 22 53 A2                             ld      (TacticsVectorY),hl
  91++A36C 32 55 A2                             ld      (TacticsVectorY+2),a
  92++A36F              .UpdateTargetingShipZ:  SelectTargetBank
  92++A36F FD 7D       >                        ld      a,iyl
  92++A371             >                        MMUSelectUnivBankA
  92++A371 ED 92 56    >                     nextreg UniverseMMU,       a
  93++A374 ED 5B 26 C0                          ld      de,(UBnKzlo)                        ; get target ship X
  94++A378 3A 28 C0                             ld      a,(UBnKzsgn)
  95++A37B                                      IFDEF MISSILEDEBUG
  96++A37B ED 53 45 A2                              ld  (TacticsTargetZ),de
  97++A37F 32 47 A2                                 ld  (TacticsTargetZ+2),a
  98++A382                                      ENDIF
  99++A382                                      FlipSignBitA
  99++A382 EE 80       >                        xor     SignOnly8Bit
 100++A384 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 101++A385                                      SelectMissileBank
 101++A385 FD 7C       >                        ld      a,iyh
 101++A387             >                        MMUSelectUnivBankA
 101++A387 ED 92 56    >                     nextreg UniverseMMU,       a
 102++A38A 2A 26 C0                             ld      hl,(UBnKzlo)                        ; get missile x
 103++A38D 3A 28 C0                             ld      a,(UBnKzsgn)                        ; get missile x sign
 104++A390                                      IFDEF MISSILEDEBUG
 105++A390 22 27 A2                                 ld  (TacticsMissileZ),hl
 106++A393 32 29 A2                                 ld  (TacticsMissileZ+2),a
 107++A396                                      ENDIF
 108++A396
 109++A396 47                                   ld      b,a
 110++A397 CD 2F 00                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 111++A39A 22 57 A2                             ld      (TacticsVectorZ),hl
 112++A39D 32 59 A2                             ld      (TacticsVectorZ+2),a
 113++A3A0              ; by here missile in in memory and TacticsVector now holds distance
 114++A3A0              ; if or ABS all high bytes is <> 0
 115++A3A0              .CheckDistance:         IFDEF MISSILEDOHIT
 116++A3A0 2A 50 A2                                 ld      hl,(TacticsVectorX+1)              ; test if high bytes are set (value is assumed to be 24 bit, though calcs are only 16 so this is uneeded)
 117++A3A3 7C                                       ld      a,h                                ; .
 118++A3A4 ED 5B 54 A2                              ld      de,(TacticsVectorY+1)              ; .
 119++A3A8 B2                                       or      d                                  ; .
 120++A3A9 ED 4B 58 A2                              ld      bc,(TacticsVectorZ+1)              ; .
 121++A3AD B0                                       or      b                                  ; .
 122++A3AE                                          ClearSignBitA                              ; .
 122++A3AE E6 7F       >                        and     SignMask8Bit
 123++A3B0                                          JumpIfNotZero       .FarAway               ; .
 123++A3B0 C2 BF A3    >                        jp	nz,.FarAway
 124++A3B3 B5                                       or      l                                    ; test for low byte bit 7, i.e high of 16 bit values
 125++A3B4 B3                                       or      e                                  ; .
 126++A3B5 B1                                       or      c                                  ; .
 127++A3B6                                          JumpIfNotZero       .FarAway               ; .
 127++A3B6 C2 BF A3    >                        jp	nz,.FarAway
 128++A3B9                                      ELSE
 129++A3B9 ~                                        jp                  .FarAway
 130++A3B9                                      ENDIF
 131++A3B9              ; If we get here its close enough to detonate
 132++A3B9 3A 45 C0     .CloseMissileExplode:   ld      a,(UBnKMissileTarget)
 133++A3BC C3 52 A1                             jp      MissileHitShipA
 134++A3BF                          DISPLAY "TODO: far away ** TODO need to set memory read write on page 0"
 135++A3BF              .FarAway:               SelectTargetBank
 135++A3BF FD 7D       >                        ld      a,iyl
 135++A3C1             >                        MMUSelectUnivBankA
 135++A3C1 ED 92 56    >                     nextreg UniverseMMU,       a
 136++A3C4                                      JumpIfMemFalse      UBnKECMFitted, .NoECM                   ; if target has ECM and enough energy to use it
 136++A3C4 3A 5A C0    >                        ld      a,(UBnKECMFitted)
 136++A3C7 A7          >                        and     a
 136++A3C8 C2 E5 A3    >                        jp      nz, .NoECM
 137++A3CB                                      JumpIfMemLTNusng    UBnKEnergy,    ECMCounterMax, .NoECM    ; .
 137++A3CB 3A 58 C0    >                        ld      a,(UBnKEnergy)
 137++A3CE FE 80       >                        cp      ECMCounterMax
 137++A3D0 DA E5 A3    >                        jp	  c,.NoECM
 138++A3D3                                      JumpIfMemIsNotZero   ECMCountDown, .NoECM                ; . ECM is already active
 138++A3D3 3A B1 7D    >                        ld      a,(ECMCountDown)
 138++A3D6 A7          >                        and     a
 138++A3D7 C2 E5 A3    >                        jp	    nz,.NoECM
 139++A3DA 3A 94 7D     .TestIfUsingECM:        ld      a,(RandomSeed2)                                             ; if random < 16
 140++A3DD                                      JumpIfAGTENusng     16, .UpdateMissilePos                           ;   then fire ECM destroying missile
 140++A3DD FE 10       >                        cp     16
 140++A3DF D2 E5 A3    >                        jp		nc,.UpdateMissilePos
 141++A3E2              ;. If we get here then target is still paged in to fire ECM
 142++A3E2 C3 42 C6     .ZeroPageFireECM:       jp      FireECM                                             ; with an implicit return
 143++A3E5              ;                       implicit ret
 144++A3E5              ;. If we get here then target is still paged in with no ECM
 145++A3E5              .NoECM:
 146++A3E5                                    ;;;         ** can do 16 bit maths as we can take teh view that once a object/space station is 24 bit value away then
 147++A3E5                                    ;;;         ** targeting computer looses track and destructs missiles
 148++A3E5              ;--- Now we can actually update the missile AI
 149++A3E5              .UpdateMissilePos:      ;break
 150++A3E5                                      SelectMissileBank
 150++A3E5 FD 7C       >                        ld      a,iyh
 150++A3E7             >                        MMUSelectUnivBankA
 150++A3E7 ED 92 56    >                     nextreg UniverseMMU,       a
 151++A3EA                                      ;break
 152++A3EA                                      ;call    ORTHOGALISE
 153++A3EA              .NormaliseDirection:    IFDEF MISSILEBREAK
 154++A3EA ~                                        break
 155++A3EA                                      ENDIF
 156++A3EA CD 49 A9                             call    NormalizeTactics                    ; Normalise vector down to 7 bit + sign byte (.TA19->TAS2)
 157++A3ED                                      IFDEF TACTICSDEBUG
 158++A3ED CD 10 A8                                 call DebugTacticsCopy
 159++A3F0                                      ENDIF
 160++A3F0              .NegateDirection:       FlipSignMem TacticsVectorX+2                ; negate vector in XX15 so it points opposite direction
 160++A3F0 3A 51 A2    >                        ld  a,(TacticsVectorX+2)
 160++A3F3 EE 80       >                        xor SignOnly8Bit
 160++A3F5 32 51 A2    >                        ld  (TacticsVectorX+2),a
 161++A3F8                                      FlipSignMem TacticsVectorY+2                ; we have already negated the dot product above
 161++A3F8 3A 55 A2    >                        ld  a,(TacticsVectorY+2)
 161++A3FB EE 80       >                        xor SignOnly8Bit
 161++A3FD 32 55 A2    >                        ld  (TacticsVectorY+2),a
 162++A400                                      FlipSignMem TacticsVectorZ+2                ; .
 162++A400 3A 59 A2    >                        ld  a,(TacticsVectorZ+2)
 162++A403 EE 80       >                        xor SignOnly8Bit
 162++A405 32 59 A2    >                        ld  (TacticsVectorZ+2),a
 163++A408 CD 1F A4                             call    SeekingLogic
 164++A40B C9                                   ret
 165++A40C 3A 6E 80     .ProcessMissileHit:     ld      a,(CurrentMissileCheck)
 166++A40F                                      ReturnIfAGTENusng UniverseSlotListSize  ; need to wait another loop
 166++A40F FE 0C       >                        cp    UniverseSlotListSize
 166++A411 D0          >                        ret	 nc
 167++A412 C3 77 A1     .ActivateNewExplosion:  jp  CheckMissileBlastInit               ; initialise
 168++A415                                      ; DUMMY RET get a free return by using jp
 169++A415 CD 45 C7     .ECMIsActive:           call    UnivExplodeShip                 ; ECM detonates missile
 170++A418                                      SetMemTrue  UBnKMissleHitToProcess      ; Enque an explosion
 170++A418 AF          >                        xor     a
 170++A419 32 44 C0    >                        ld      (UBnKMissleHitToProcess),a
 171++A41C C3 0C A4                             jp      .ProcessMissileHit              ; lets see if we can enqueue now
 172++A41F                                      ; DUMMY RET get a free return as activenewexplosion does jp to init with a free ret
 173++A41F
 174++A41F CD 55 A8     SeekingLogic:           call    XX12EquTacticsDotNosev              ; SA = nose . XX15                           (     ->TAS3)
 175++A422 32 12 A2                             ld      (TacticsDotProduct1),a              ; CNT = A (high byte of dot product)
 176++A425 3A 9E 7E                             ld      a,(varS)                            ; get sign from dot product
 177++A428 32 16 A2                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 178++A42B CD AB A8     .RoofDotProduct:        call    XX12EquTacticsDotRoofv              ; Now tran the roof for rotation
 179++A42E 32 15 A2                             ld      (TacticsDotProduct2),a              ; so if its +ve then the roof is similar so pull up to head towards it
 180++A431 3A 9E 7E                             ld      a,(varS)                            ; .
 181++A434 32 16 A2                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 182++A437 CD 41 A4                             call    SimplifiedShipPitchv3
 183++A43A CD 65 A4                             call    SimplifiedShipRollv3
 184++A43D CD 93 A4                             call    SimplifiedShipSpeedv3
 185++A440 C9                                   ret
 186++A441
 187++A441              SimplifiedShipPitchv3:  ;break
 188++A441 2A 15 A2                             ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 189++A444 7C                                   ld      a,h                                ; .
 190++A445 EE 80                                xor     $80                                ; .
 191++A447 E6 80                                and     $80                                ; .
 192++A449 67                                   ld      h,a                                ; h  = flipped sign
 193++A44A 7D                                   ld      a,l                                ; a = value * 2
 194++A44B CB 27                                sla     a                                  ;
 195++A44D                                      JumpIfAGTENusng 16, .skipPitchZero         ; if its > 16 then update pitch
 195++A44D FE 10       >                        cp     16
 195++A44F D2 5B A4    >                        jp		nc,.skipPitchZero
 196++A452                                      ZeroA                                      ; else we zero pitch but
 196++A452 AF          >                        xor a
 197++A453 B4                                   or      h                                  ; we need to retain the sign
 198++A454 32 49 C0                             ld      (UBnKRotZCounter),a                ; .
 199++A457                                      IFDEF MISSILEDEBUG
 200++A457 32 A2 A2                                 ld  (TacticsRotZ),a
 201++A45A                                      ENDIF
 202++A45A C9                                   ret
 203++A45B 3E 02        .skipPitchZero:         ld      a,2
 204++A45D B4                                   or      h
 205++A45E 32 49 C0                             ld      (UBnKRotZCounter),a
 206++A461                                      IFDEF MISSILEDEBUG
 207++A461 32 A2 A2                                 ld  (TacticsRotZ),a
 208++A464                                      ENDIF
 209++A464 C9                                   ret
 210++A465
 211++A465              ;Direct on dot product nose is $24
 212++A465              ; Position                  Pitch   Roll    Speed
 213++A465              ; Top left forwards         up      -ve     +
 214++A465              ; Top right forwards        up      +ve     +
 215++A465              ; Bottom left forwards      down    -ve     +
 216++A465              ; Bottom right forwards     down    +ve     +
 217++A465              ; Top left rear             up      -ve     -
 218++A465              ; Top right rear            up      +ve     -
 219++A465              ; Bottom left rear          down    -ve     -
 220++A465              ; Bottom right rear         down    +ve     -
 221++A465
 222++A465
 223++A465
 224++A465              SimplifiedShipRollv3:  ; ld      a,(UBnKRotXCounter)               ; get current roll
 225++A465                                     ; sla     a                                 ; * 2 to also abs
 226++A465                                     ; ReturnIfAGTENusng 32                      ; and so if >32 skip
 227++A465 CD B1 A8                             call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 228++A468 32 18 A2                             ld      (TacticsDotProduct3),a             ; .
 229++A46B 6F                                   ld      l,a                                ; .
 230++A46C 3A 9E 7E                             ld      a,(varS)                           ; .
 231++A46F 32 19 A2                             ld      (TacticsDotProduct3+1),a           ; .
 232++A472 67                                   ld      h,a                                ; h = sign sidev
 233++A473 3A 16 A2                             ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 234++A476                                      ;xor     $80                               ; .
 235++A476                                      ;xor     h                                 ; b = flip against pitch sign
 236++A476                                      ;and     $80                               ; .
 237++A476                                      ;xor $80
 238++A476 47                                   ld      b,a                                ; b = roof product
 239++A477 7D                                   ld      a,l                                ; a = abs sidev  * 2
 240++A478 CB 27                                sla     a                                  ;
 241++A47A                                      JumpIfAGTENusng 16,.skipRollZero           ;
 241++A47A FE 10       >                        cp     16
 241++A47C D2 88 A4    >                        jp		nc,.skipRollZero
 242++A47F                                      ZeroA                                      ; if its zoer then set rotx to zero
 242++A47F AF          >                        xor a
 243++A480 B0                                   or      b
 244++A481 32 48 C0                             ld      (UBnKRotXCounter),a
 245++A484                                      IFDEF MISSILEDEBUG
 246++A484 32 A0 A2                                 ld  (TacticsRotX),a
 247++A487                                      ENDIF
 248++A487 C9                                   ret
 249++A488 3E 02        .skipRollZero:          ld      a,2
 250++A48A B4                                   or      h
 251++A48B A8                                   xor     b
 252++A48C 32 48 C0                             ld      (UBnKRotXCounter),a
 253++A48F                                      IFDEF MISSILEDEBUG
 254++A48F 32 A0 A2                                 ld  (TacticsRotX),a
 255++A492                                      ENDIF
 256++A492 C9                                   ret
 257++A493
 258++A493 2A 12 A2     SimplifiedShipSpeedv3:  ld      hl,(TacticsDotProduct1)
 259++A496 7C                                   ld      a,h
 260++A497 A7                                   and     a
 261++A498 20 13                                jr      nz,.SlowDown
 262++A49A ED 5B 15 A2                          ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 263++A49E 7D                                   ld      a,l
 264++A49F                                      JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 264++A49F FE 16       >                        cp      22
 264++A4A1 DA AD A4    >                        jp		c, .SlowDown
 265++A4A4 3E 03        .Accelerate:            ld      a,3                                 ; else
 266++A4A6 32 47 C0                             ld      (UBnKAccel),a                       ;  accelleration = 3
 267++A4A9                                      IFDEF MISSILEDEBUG
 268++A4A9 32 A4 A2                                 ld  (TacticsSpeed),a
 269++A4AC                                      ENDIF
 270++A4AC C9                                   ret                                         ;  .
 271++A4AD              .SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 271++A4AD FE 12       >                        cp      18
 271++A4AF DA BB A4    >                        jp		c, .NoSpeedChange
 272++A4B2 3E FE        .Deccelerate:           ld      a,-2
 273++A4B4 32 47 C0                             ld      (UBnKAccel),a
 274++A4B7                                      IFDEF MISSILEDEBUG
 275++A4B7 32 A4 A2                                 ld  (TacticsSpeed),a
 276++A4BA                                      ENDIF
 277++A4BA C9                                   ret
 278++A4BB              .NoSpeedChange:         ZeroA                                       ; else no change
 278++A4BB AF          >                        xor a
 279++A4BC 32 47 C0                             ld      (UBnKAccel),a
 280++A4BF                                      IFDEF MISSILEDEBUG
 281++A4BF 32 A4 A2                                 ld  (TacticsSpeed),a
 282++A4C2                                      ENDIF
 283++A4C2 C9                                   ret
 284++A4C3
 285++A4C3
 286++A4C3 CD 02 A5     SimplifiedShipSpeedv3b:  call    GetDistance                         ;
 287++A4C6 7C                                   ld      a,h
 288++A4C7 A7                                   and     a
 289++A4C8 06 16                                ld      b,22
 290++A4CA 20 08                                jr      nz,.NotSlow
 291++A4CC 7D           .CloseSlowTest:         ld      a,l
 292++A4CD                                      JumpIfAGTENusng 30, .NotSlow
 292++A4CD FE 1E       >                        cp     30
 292++A4CF D2 D4 A4    >                        jp		nc,.NotSlow
 293++A4D2 06 3C                                ld      b,60
 294++A4D4 2A 12 A2     .NotSlow:               ld      hl,(TacticsDotProduct1)             ; if nosedir is negative (pointing the wrong way)
 295++A4D7 7C                                   ld      a,h                                 ; or nosedir < 22 (very far off)
 296++A4D8 E6 80                                and     $80                                 ; do decelleration test
 297++A4DA C2 EB A4                             jp      nz,.DecelTest                       ; .
 298++A4DD 7D                                   ld      a,l                                 ; .
 299++A4DE                                      JumpIfALTNusng b, .DecelTest                ; .
 299++A4DE B8          >                        cp      b
 299++A4DF DA EB A4    >                        jp		c, .DecelTest
 300++A4E2 3E 03        .Accelerate:            ld      a,3                                 ; else
 301++A4E4 32 47 C0                             ld      (UBnKAccel),a                       ;  accelleration = 3
 302++A4E7                                      IFDEF MISSILEDEBUG
 303++A4E7 32 A4 A2                                 ld  (TacticsSpeed),a
 304++A4EA                                      ENDIF
 305++A4EA C9                                   ret                                         ;  .
 306++A4EB 7D           .DecelTest:             ld      a,l                                 ; if abs acelleration > 18
 307++A4EC                                      JumpIfAGTENusng 18 ,.Deccelerate             ;    decelerate by 2
 307++A4EC FE 12       >                        cp     18
 307++A4EE D2 F9 A4    >                        jp		nc,.Deccelerate
 308++A4F1              .NoSpeedChange:         ZeroA                                       ; else no change
 308++A4F1 AF          >                        xor a
 309++A4F2 32 47 C0                             ld      (UBnKAccel),a
 310++A4F5                                      IFDEF MISSILEDEBUG
 311++A4F5 32 A4 A2                                 ld  (TacticsSpeed),a
 312++A4F8                                      ENDIF
 313++A4F8 C9                                   ret
 314++A4F9 3E FE        .Deccelerate:           ld      a,-2
 315++A4FB 32 47 C0                             ld      (UBnKAccel),a
 316++A4FE                                      IFDEF MISSILEDEBUG
 317++A4FE 32 A4 A2                                 ld  (TacticsSpeed),a
 318++A501                                      ENDIF
 319++A501 C9                                   ret
 320++A502
 321++A502 2A 4F A2     GetDistance:            ld      hl,(TacticsVectorX)
 322++A505 ED 5B 53 A2                          ld      de,(TacticsVectorY)
 323++A509 ED 4B 57 A2                          ld      bc,(TacticsVectorZ)
 324++A50D 7C                                   ld      a,h
 325++A50E E6 7F                                and     $7F
 326++A510 67                                   ld      h,a
 327++A511 78                                   ld      a,b
 328++A512 E6 7F                                and     $7F
 329++A514 47                                   ld      b,a
 330++A515 7A                                   ld      a,d
 331++A516 E6 7F                                and     $7F
 332++A518 57                                   ld      d,a
 333++A519 09                                   add     hl,bc
 334++A51A 19                                   add     hl,de
 335++A51B                                      ShiftHLRight1
 335++A51B CB 3C       >			   srl h
 335++A51D CB 1D       >			   rr  l
 336++A51F                                      ShiftHLRight1
 336++A51F CB 3C       >			   srl h
 336++A521 CB 1D       >			   rr  l
 337++A523 C9                                   ret
 338++A524
 339++A524
# file closed: ./GameEngine/../GameEngine/MissileAI.asm
 275+ A524                                      INCLUDE "../GameEngine/NormalAI.asm"
# file opened: ./GameEngine/../GameEngine/NormalAI.asm
   1++A524               ;                       DEFINE DEBUGFORCEHOSTILE 1
   2++A524
   3++A524 00 00 00     NewLaunchUBnKX          DS 3
   4++A527 00 00 00     NewLaunchUBnKY          DS 3
   5++A52A 00 00 00     NewLaunchUBnKZ          DS 3
   6++A52D
   7++A52D 00 00 00...  NewLaunchMatrix         DS 3*3*2    ; 3x3 matrix of 3 bytes
   8++A53F 00           NewLaunchSpeed          DS 1
   9++A540 00           NewLaunchRotX           DS 1
  10++A541 00           NewLaunchRotZ           DS 1
  11++A542
  12++A542              NewLaunchDataBlockSize  equ (3*3) + (3*3*2)
  13++A542              ; ---------------------------------------------------------------------------------------------------------------------------------
  14++A542              ; a = y offset negative from center of ship
  15++A542 21 20 C0     CalcLaunchOffset:       ld      hl,UBnKxlo
  16++A545 11 24 A5                             ld      de,NewLaunchUBnKX
  17++A548 01 1B 00                             ld      bc,NewLaunchDataBlockSize
  18++A54B ED B0                                ldir
  19++A54D CB 27        .ApplyOffset:           sla     a
  20++A54F CB 27                                sla     a
  21++A551 FD 6F                                ld      iyl,a                          ; save pre calculated speed
  22++A553              .ApplyToX:              SpeedMulAxis    a, UBnkrotmatRoofvX     ; e =  ABS (nosev x hi) c = sign
  22++A553 5F          >                        ld      e,a
  22++A554 2A 2F C0    >                        ld      hl,(UBnkrotmatRoofvX)
  22++A557 7C          >                        ld      a,h
  22++A558             >                        ClearSignBitA
  22++A558 E6 7F       >                        and     SignMask8Bit
  22++A55A 57          >                        ld      d,a
  22++A55B ED 30       >                        mul     de
  22++A55D 7C          >                        ld      a,h
  22++A55E             >                        SignBitOnlyA
  22++A55E E6 80       >                        and     SignOnly8Bit
  22++A560 47          >                        ld      b,a;ld      c,a
  22++A561 62          >                        ld      h,d;ld      e,d
  22++A562 0E 00       >                        ld      c,0;ld      d,0
  23++A564 78                                   ld      a,b
  24++A565 EE 80                                xor     $80
  25++A567 47                                   ld      b,a
  26++A568              .AddSpeedToX:           AddSpeedToVert  NewLaunchUBnKX          ; 24 bit maths
  26++A568 ED 5B 25 A5 >                        ld      de,(NewLaunchUBnKX+1)
  26++A56C 3A 24 A5    >                        ld      a,(NewLaunchUBnKX)
  26++A56F 6F          >                        ld      l,a
  26++A570 CD F2 00    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  26++A573 7D          >                        ld      a,l
  26++A574 32 24 A5    >                        ld      (NewLaunchUBnKX),a
  26++A577 ED 53 25 A5 >                        ld      (NewLaunchUBnKX+1),de
  27++A57B              .ApplyToY:              SpeedMulAxis    iyl, UBnkrotmatRoofvY
  27++A57B FD 5D       >                        ld      e,iyl
  27++A57D 2A 31 C0    >                        ld      hl,(UBnkrotmatRoofvY)
  27++A580 7C          >                        ld      a,h
  27++A581             >                        ClearSignBitA
  27++A581 E6 7F       >                        and     SignMask8Bit
  27++A583 57          >                        ld      d,a
  27++A584 ED 30       >                        mul     de
  27++A586 7C          >                        ld      a,h
  27++A587             >                        SignBitOnlyA
  27++A587 E6 80       >                        and     SignOnly8Bit
  27++A589 47          >                        ld      b,a;ld      c,a
  27++A58A 62          >                        ld      h,d;ld      e,d
  27++A58B 0E 00       >                        ld      c,0;ld      d,0
  28++A58D 78                                   ld      a,b
  29++A58E EE 80                                xor     $80
  30++A590 47                                   ld      b,a
  31++A591              .AddSpeedToY:           AddSpeedToVert NewLaunchUBnKY           ; 24 bit maths
  31++A591 ED 5B 28 A5 >                        ld      de,(NewLaunchUBnKY+1)
  31++A595 3A 27 A5    >                        ld      a,(NewLaunchUBnKY)
  31++A598 6F          >                        ld      l,a
  31++A599 CD F2 00    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  31++A59C 7D          >                        ld      a,l
  31++A59D 32 27 A5    >                        ld      (NewLaunchUBnKY),a
  31++A5A0 ED 53 28 A5 >                        ld      (NewLaunchUBnKY+1),de
  32++A5A4              .ApplyToZ:              SpeedMulAxis    iyl, UBnkrotmatRoofvZ
  32++A5A4 FD 5D       >                        ld      e,iyl
  32++A5A6 2A 33 C0    >                        ld      hl,(UBnkrotmatRoofvZ)
  32++A5A9 7C          >                        ld      a,h
  32++A5AA             >                        ClearSignBitA
  32++A5AA E6 7F       >                        and     SignMask8Bit
  32++A5AC 57          >                        ld      d,a
  32++A5AD ED 30       >                        mul     de
  32++A5AF 7C          >                        ld      a,h
  32++A5B0             >                        SignBitOnlyA
  32++A5B0 E6 80       >                        and     SignOnly8Bit
  32++A5B2 47          >                        ld      b,a;ld      c,a
  32++A5B3 62          >                        ld      h,d;ld      e,d
  32++A5B4 0E 00       >                        ld      c,0;ld      d,0
  33++A5B6 78                                   ld      a,b
  34++A5B7 EE 80                                xor     $80
  35++A5B9 47                                   ld      b,a
  36++A5BA              .AddSpeedToZ:           AddSpeedToVert NewLaunchUBnKZ           ; 24 bit maths
  36++A5BA ED 5B 2B A5 >                        ld      de,(NewLaunchUBnKZ+1)
  36++A5BE 3A 2A A5    >                        ld      a,(NewLaunchUBnKZ)
  36++A5C1 6F          >                        ld      l,a
  36++A5C2 CD F2 00    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  36++A5C5 7D          >                        ld      a,l
  36++A5C6 32 2A A5    >                        ld      (NewLaunchUBnKZ),a
  36++A5C9 ED 53 2B A5 >                        ld      (NewLaunchUBnKZ+1),de
  37++A5CD C9                                   ret
  38++A5CE
  39++A5CE
  40++A5CE
  41++A5CE                                      ;DEFINE MISSILEBREAK
  42++A5CE              ;.. Thsi version uses new kind logic
  43++A5CE              ;... Now the tactics if current ship is the missile, when we enter this SelectedUniverseSlot holds slot of missile
  44++A5CE              NormalAI:               ;ld      a,(ShipAIEnabled)
  45++A5CE                                      ;ReturnOnBitClear a, ShipAIEnabledBitNbr
  46++A5CE CD 53 C6     .GetEnergy:             call    RechargeEnergy                  ; TA13 if enegery <= maxumum value for blueprint then recharge energy by 1
  47++A5D1 3A 0E C4                             ld      a,(ShipNewBitsAddr)
  48++A5D4 E6 01        .IsItATrader:           and     ShipIsTrader
  49++A5D6 20 06                                jr      nz, .NotATrader
  50++A5D8 CD 37 84     .ItsATrader:            call    doRandom
  51++A5DB                                      ReturnIfALTNusng 100                    ; 61% chance do nothing
  51++A5DB FE 64       >                        cp    100
  51++A5DD D8          >                        ret	 c
  52++A5DE                                      IFDEF DEBUGFORCEHOSTILE
  53++A5DE ~                                            call SetShipHostile
  54++A5DE ~                                            ld      a,(ShipNewBitsAddr)
  55++A5DE ~                                            or      ShipIsBountyHunter
  56++A5DE ~                                            ld      (ShipNewBitsAddr),a
  57++A5DE                                      ENDIF
  58++A5DE              .NotATrader:
  59++A5DE 3A 0E C4     .IsItBountyHunter:      ld      a,(ShipNewBitsAddr)
  60++A5E1 E6 02                                and     ShipIsBountyHunter
  61++A5E3 20 08                                jr      nz, .NotBountyHunter
  62++A5E5              .CheckFIST:             CallIfMemGTENusng FugitiveInnocentStatus, 40, SetShipHostile ; if our FIST rating >= 40 set ship hostile (bit 2)
  62++A5E5 3A 4D 7F    >                        ld      a,(FugitiveInnocentStatus)
  62++A5E8 FE 28       >                        cp      40
  62++A5EA D4 1A C6    >                        call    nc,SetShipHostile
  63++A5ED              .NotBountyHunter:
  64++A5ED 3A 0E C4     .CheckHostile:          ld      a,(ShipNewBitsAddr)
  65++A5F0 E6 04                                and     ShipIsHostile
  66++A5F2 20 09                                jr      nz,.ItsHostile
  67++A5F4 3A 0E C4     .ItsNotHostile:         ld      a,(ShipNewBitsAddr)
  68++A5F7 E6 10                                and     ShipIsDocking                   ; if bit 4 is not clear
  69++A5F9 20 01                                jr      nz,.NotDocking
  70++A5FB              .ItsDocking:            ;break
  71++A5FB                                      ;       do docking algorithm
  72++A5FB                                      ;       return
  73++A5FB C9                                   ret
  74++A5FC              .NotDocking:            ;break
  75++A5FC                                      ;       calcuilate vector to planet
  76++A5FC                                      ;       move towards planet
  77++A5FC                                      ;       return
  78++A5FC C9                                   ret
  79++A5FD 3A 0E C4     .ItsHostile:            ld      a,(ShipNewBitsAddr)
  80++A600 E6 08        .IsItPirate:            and     ShipIsPirate
  81++A602 20 0E                                jr      nz,.NotAPirate
  82++A604              .IsItInSafeZone:        ;      if we are not in space station safe zone
  83++A604 3A 0E C4     .InSafeZone:            ld      a,(ShipNewBitsAddr)
  84++A607 F6 81                                or      Bit7Only | ShipIsTrader
  85++A609 CD E8 A8     .NotSafeZone:           call    SetPlayerAsTarget
  86++A60C CD C3 A8                             call    CopyPosToVector
  87++A60F CD 49 A9                             call    NormalizeTactics
  88++A612              .NotAPirate:
  89++A612 3A 5E C0     .SpawnFighter:          ld      a,(UBnKFightersLeft)
  90++A615 A7                                   and     a
  91++A616 28 0C                                jr      z,.NoFighters
  92++A618 CD 37 84     .CanSpawnFighter:       call    doRandom
  93++A61B                                      JumpIfALTNusng 200, .NoFighters
  93++A61B FE C8       >                        cp      200
  93++A61D DA 24 A6    >                        jp		c, .NoFighters
  94++A620                                      ;break
  95++A620                                      ;SPAWN FIGHTER of Type UBnKFighterShipId at Y - 20 z - 20
  96++A620 21 5E C0                             ld      hl,UBnKFightersLeft             ;reduced figters left
  97++A623 35                                   dec     (hl)
  98++A624                                      ;inherits parent's ai angry
  99++A624 3A 95 7D     .NoFighters:            ld      a,(RandomSeed3)                 ;if random >= 250
 100++A627 F6 68                                or      104                             ;set a noticable roll
 101++A629 3A 05 C4     .CheckEnergyLevels:     ld      a,(EnergyAddr)
 102++A62C 47                                   ld      b,a
 103++A62D 3A 58 C0                             ld      a,(UBnKEnergy)
 104++A630 CB 38                                srl     b                               ; max energy / 2
 105++A632                                      JumpIfAGTENusng b,.EnergyOverHalf       ; if ship max energy / 2 < current enerhy
 105++A632 B8          >                        cp     b
 105++A633 D2 56 A6    >                        jp		nc,.EnergyOverHalf
 106++A636 CB 38                                srl     b
 107++A638                                      JumpIfAGTENusng b,.EnergyOverQuater     ; if ship max enery / 4 < current energy
 107++A638 B8          >                        cp     b
 107++A639 D2 56 A6    >                        jp		nc,.EnergyOverQuater
 108++A63C 3A 0E C4                             ld      a,(ShipNewBitsAddr)
 109++A63F E6 80                                and     ShipHasEscapePod
 110++A641 28 13                                jr      z, .NoEscapePod
 111++A643 3A 94 7D                             ld      a,(RandomSeed2)
 112++A646                                      JumpIfALTNusng 230,.NoEscapePod         ;if random >= 230
 112++A646 FE E6       >                        cp      230
 112++A648 DA 56 A6    >                        jp		c, .NoEscapePod
 113++A64B 3A 54 C0                             ld      a,(UBnkaiatkecm)                ;  disable ship AI hostily and ECM
 114++A64E E6 7F                                and     ShipAIDisabled                  ;  .
 115++A650 32 54 C0                             ld      (UBnkaiatkecm),a                ;  .
 116++A653                                      ;ZeroA                                   ;  .
 117++A653 32 5A C0                             ld      (UBnKECMFitted),a               ;  .
 118++A656              .LaunchEscapePod:       ;break
 119++A656                                      ;            goto spawn escape pod
 120++A656              .EnergyOverHalf:
 121++A656              .EnergyOverQuater:
 122++A656 3A 5C C0     .NoEscapePod:           ld      a,(UBnKMissilesLeft)            ;      if missiles > 0
 123++A659 47                                   ld      b,a
 124++A65A                                      JumpIfAIsZero .NoMissileLaunch
 124++A65A A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 124++A65B CA 71 A6    >                        jp	    z, .NoMissileLaunch
 125++A65E 3A 95 7D     .MissileLaunchTest:     ld      a,(RandomSeed3)                 ;         if random and 15 > = nbr missiles
 126++A661 E6 0F                                and     15
 127++A663                                      JumpIfALTNusng b, .NoMissileLaunch
 127++A663 B8          >                        cp      b
 127++A664 DA 71 A6    >                        jp		c, .NoMissileLaunch
 128++A667 3A B1 7D                             ld      a,(ECMCountDown)
 129++A66A                                      JumpIfAIsNotZero  .NoMissileLaunch
 129++A66A A7          >                        and     a
 129++A66B C2 71 A6    >                        jp	    nz,.NoMissileLaunch
 130++A66E C3 58 62                             jp    LaunchEnemyMissile                ; jump out and return if firing missile
 131++A671 3A 21 C0     .NoMissileLaunch:       ld      a,(UBnKxhi)
 132++A674 2A 24 C0                             ld      hl,(UBnKyhi)
 133++A677 B6                                   or      (hl)
 134++A678 2A 27 C0                             ld      hl,(UBnKzhi)
 135++A67B B6                                   or      (hl)
 136++A67C                                      JumpIfAGTENusng 160, .TooFarForLaser   ; if in laser range (all highs order together < 160)
 136++A67C FE A0       >                        cp     160
 136++A67E D2 A5 A6    >                        jp		nc,.TooFarForLaser
 137++A681 CD 55 A8                             call    XX12EquTacticsDotNosev
 138++A684 47                                   ld      b,a
 139++A685 3A 9E 7E                             ld      a,(varS)
 140++A688                                      JumpIfAIsNotZero .TooFarForLaser        ;   if dot product of ship < 160 i.e. > -32
 140++A688 A7          >                        and     a
 140++A689 C2 A5 A6    >                        jp	    nz,.TooFarForLaser
 141++A68C 78                                   ld      a,b                            ;    .
 142++A68D                                      JumpIfALTNusng    32, .DoneLaserShot  ;    .
 142++A68D FE 20       >                        cp      32
 142++A68F DA A0 A6    >                        jp		c, .DoneLaserShot
 143++A692              .FireLaser:             ;break                        ;      do fire laser logic (drain energy, add beam to lines as random line from ship to a random edge of screen)
 144++A692 78                                   ld      a,b ;; need to see if b gets corrupted by laser fire
 145++A693                                      JumpIfAEqNusng      35, .LaserHitPlayer
 145++A693 FE 23       >                        cp     35
 145++A695 CA A0 A6    >                        jp      z,.LaserHitPlayer
 146++A698                                      JumpIfAEqNusng      36, .LaserHitPlayer
 146++A698 FE 24       >                        cp     36
 146++A69A CA A0 A6    >                        jp      z,.LaserHitPlayer
 147++A69D C3 A0 A6     .LaserMissedPlayer:     jp      .DoneLaserShot
 148++A6A0              .LaserHitPlayer:        ;break ;         do direct hit logic
 149++A6A0 21 47 C0     .DoneLaserShot:         ld      hl,UBnKAccel                   ;      Half attacking ship's accelleration in byte 28 (dec so must be 0 1 or 2)
 150++A6A3 CB 26                                sla     (hl)
 151++A6A5              .TooFarForLaser:
 152++A6A5              .UpdateShip             ;break
 153++A6A5 CD D0 A0                             call    CalculateAgression              ; refresh aggression levels
 154++A6A8 3A 27 C0                             ld      a,(UBnKzhi)
 155++A6AB                                      JumpIfAGTENusng 3, .ShipFarAway
 155++A6AB FE 03       >                        cp     3
 155++A6AD D2 BB A6    >                        jp		nc,.ShipFarAway
 156++A6B0 3A 21 C0                             ld      a,(UBnKxhi)
 157++A6B3 2A 24 C0                             ld      hl,(UBnKyhi)
 158++A6B6 B6                                   or      (hl)
 159++A6B7 E6 FE                                and     %11111110
 160++A6B9 28 26                                jr      z,.ShipTurnAway
 161++A6BB 3A 94 7D     .ShipFarAway:           ld      a,(RandomSeed2)                     ; if random with bit 7 set < ship AI byte 32 flag
 162++A6BE                                      ;or      %10000000               ; .
 163++A6BE                                      JumpIfAGTEMemusng UBnKShipAggression, .ShipTurnAway
 163++A6BE 21 53 C0    >                        ld      hl,UBnKShipAggression
 163++A6C1 BE          >                        cp      (hl)
 163++A6C2 D2 E1 A6    >                        jp		nc,.ShipTurnAway
 164++A6C5                                      FlipSignMem TacticsVectorX+2                ; negate vector in XX15 so it points opposite direction
 164++A6C5 3A 51 A2    >                        ld  a,(TacticsVectorX+2)
 164++A6C8 EE 80       >                        xor SignOnly8Bit
 164++A6CA 32 51 A2    >                        ld  (TacticsVectorX+2),a
 165++A6CD                                      FlipSignMem TacticsVectorY+2                ; we have already negated the dot product above
 165++A6CD 3A 55 A2    >                        ld  a,(TacticsVectorY+2)
 165++A6D0 EE 80       >                        xor SignOnly8Bit
 165++A6D2 32 55 A2    >                        ld  (TacticsVectorY+2),a
 166++A6D5                                      FlipSignMem TacticsVectorZ+2                ; .
 166++A6D5 3A 59 A2    >                        ld  a,(TacticsVectorZ+2)
 166++A6D8 EE 80       >                        xor SignOnly8Bit
 166++A6DA 32 59 A2    >                        ld  (TacticsVectorZ+2),a
 167++A6DD CD E5 A6                             call    ShipSeekingLogic            ;    seek as per missile
 168++A6E0 C9                                   ret
 169++A6E1 CD E5 A6     .ShipTurnAway:          call    ShipSeekingLogic            ; move away (ie.. as per missile but dot products not reversed)
 170++A6E4                                      ;              consider a random roll
 171++A6E4 C9                                   ret
 172++A6E5
 173++A6E5 CD 55 A8     ShipSeekingLogic:       call    XX12EquTacticsDotNosev              ; SA = nose . XX15                           (     ->TAS3)
 174++A6E8 32 12 A2                             ld      (TacticsDotProduct1),a              ; CNT = A (high byte of dot product)
 175++A6EB 3A 9E 7E                             ld      a,(varS)                            ; get sign from dot product
 176++A6EE 32 16 A2                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 177++A6F1 CD AB A8     .RoofDotProduct:        call    XX12EquTacticsDotRoofv              ; Now tran the roof for rotation
 178++A6F4 32 15 A2                             ld      (TacticsDotProduct2),a              ; so if its +ve then the roof is similar so pull up to head towards it
 179++A6F7 3A 9E 7E                             ld      a,(varS)                            ; .
 180++A6FA 32 16 A2                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 181++A6FD CD 07 A7                             call    ShipPitchv3
 182++A700 CD 2B A7                             call    ShipRollv3
 183++A703 CD 59 A7                             call    ShipSpeedv3
 184++A706 C9                                   ret
 185++A707
 186++A707 2A 15 A2     ShipPitchv3:            ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 187++A70A 7C                                   ld      a,h                                ; .
 188++A70B EE 80                                xor     $80                                ; .
 189++A70D E6 80                                and     $80                                ; .
 190++A70F 67                                   ld      h,a                                ; h  = flipped sign
 191++A710 7D                                   ld      a,l                                ; a = value * 2
 192++A711 CB 27                                sla     a                                  ;
 193++A713                                      JumpIfAGTENusng 16, .skipPitchZero         ; if its > 16 then update pitch
 193++A713 FE 10       >                        cp     16
 193++A715 D2 21 A7    >                        jp		nc,.skipPitchZero
 194++A718                                      ZeroA                                      ; else we zero pitch but
 194++A718 AF          >                        xor a
 195++A719 B4                                   or      h                                  ; we need to retain the sign
 196++A71A 32 49 C0                             ld      (UBnKRotZCounter),a                ; .
 197++A71D                                      IFDEF MISSILEDEBUG
 198++A71D 32 A2 A2                                 ld  (TacticsRotZ),a
 199++A720                                      ENDIF
 200++A720 C9                                   ret
 201++A721 3E 02        .skipPitchZero:         ld      a,2
 202++A723 B4                                   or      h
 203++A724 32 49 C0                             ld      (UBnKRotZCounter),a
 204++A727                                      IFDEF MISSILEDEBUG
 205++A727 32 A2 A2                                 ld  (TacticsRotZ),a
 206++A72A                                      ENDIF
 207++A72A C9                                   ret
 208++A72B
 209++A72B CD B1 A8     ShipRollv3:             call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 210++A72E 32 18 A2                             ld      (TacticsDotProduct3),a             ; .
 211++A731 6F                                   ld      l,a                                ; .
 212++A732 3A 9E 7E                             ld      a,(varS)                           ; .
 213++A735 32 19 A2                             ld      (TacticsDotProduct3+1),a           ; .
 214++A738 67                                   ld      h,a                                ; h = sign sidev
 215++A739 3A 16 A2                             ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 216++A73C 47                                   ld      b,a                                ; b = roof product
 217++A73D 7D                                   ld      a,l                                ; a = abs sidev  * 2
 218++A73E CB 27                                sla     a                                  ;
 219++A740                                      JumpIfAGTENusng 16,.skipRollZero           ;
 219++A740 FE 10       >                        cp     16
 219++A742 D2 4E A7    >                        jp		nc,.skipRollZero
 220++A745                                      ZeroA                                      ; if its zoer then set rotx to zero
 220++A745 AF          >                        xor a
 221++A746 B0                                   or      b
 222++A747 32 48 C0                             ld      (UBnKRotXCounter),a
 223++A74A                                      IFDEF MISSILEDEBUG
 224++A74A 32 A0 A2                                 ld  (TacticsRotX),a
 225++A74D                                      ENDIF
 226++A74D C9                                   ret
 227++A74E 3E 02        .skipRollZero:          ld      a,2
 228++A750 B4                                   or      h
 229++A751 A8                                   xor     b
 230++A752 32 48 C0                             ld      (UBnKRotXCounter),a
 231++A755                                      IFDEF MISSILEDEBUG
 232++A755 32 A0 A2                                 ld  (TacticsRotX),a
 233++A758                                      ENDIF
 234++A758 C9                                   ret
 235++A759
 236++A759 2A 12 A2     ShipSpeedv3:            ld      hl,(TacticsDotProduct1)
 237++A75C 7C                                   ld      a,h
 238++A75D A7                                   and     a
 239++A75E 20 13                                jr      nz,.SlowDown
 240++A760 ED 5B 15 A2                          ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 241++A764 7D                                   ld      a,l
 242++A765                                      JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 242++A765 FE 16       >                        cp      22
 242++A767 DA 73 A7    >                        jp		c, .SlowDown
 243++A76A 3E 03        .Accelerate:            ld      a,3                                 ; else
 244++A76C 32 47 C0                             ld      (UBnKAccel),a                       ;  accelleration = 3
 245++A76F                                      IFDEF MISSILEDEBUG
 246++A76F 32 A4 A2                                 ld  (TacticsSpeed),a
 247++A772                                      ENDIF
 248++A772 C9                                   ret                                         ;  .
 249++A773              .SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 249++A773 FE 12       >                        cp      18
 249++A775 DA 81 A7    >                        jp		c, .NoSpeedChange
 250++A778 3E FF        .Deccelerate:           ld      a,-1
 251++A77A 32 47 C0                             ld      (UBnKAccel),a
 252++A77D                                      IFDEF MISSILEDEBUG
 253++A77D 32 A4 A2                                 ld  (TacticsSpeed),a
 254++A780                                      ENDIF
 255++A780 C9                                   ret
 256++A781              .NoSpeedChange:         ZeroA                                       ; else no change
 256++A781 AF          >                        xor a
 257++A782 32 47 C0                             ld      (UBnKAccel),a
 258++A785                                      IFDEF MISSILEDEBUG
 259++A785 32 A4 A2                                 ld  (TacticsSpeed),a
 260++A788                                      ENDIF
 261++A788 C9                                   ret
 262++A789              ;;;ShipPitchv2:  ;break
 263++A789              ;;;                        ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 264++A789              ;;;                        ld      a,h                                ; .
 265++A789              ;;;                        xor     $80                                ; .
 266++A789              ;;;                        and     $80                                ; .
 267++A789              ;;;                        ld      h,a                                ; h  = flipped sign
 268++A789              ;;;                        ld      a,l                                ; a = value * 2
 269++A789              ;;;                        sla     a                                  ;
 270++A789              ;;;                        JumpIfAGTENusng 16, .skipPitchZero         ; if its > 16 then update pitch
 271++A789              ;;;                        ZeroA                                      ; else we zero pitch but
 272++A789              ;;;                        or      h                                  ; we need to retain the sign
 273++A789              ;;;                        ld      (UBnKRotZCounter),a                ; .
 274++A789              ;;;                        IFDEF MISSILEDEBUG
 275++A789              ;;;                            ld  (TacticsRotZ),a
 276++A789              ;;;                        ENDIF
 277++A789              ;;;                        ret
 278++A789              ;;;.skipPitchZero:         ld      a,3
 279++A789              ;;;                        or      h
 280++A789              ;;;                        ld      (UBnKRotZCounter),a
 281++A789              ;;;                        IFDEF MISSILEDEBUG
 282++A789              ;;;                            ld  (TacticsRotZ),a
 283++A789              ;;;                        ENDIF
 284++A789              ;;;                        ret
 285++A789
 286++A789
 287++A789              ;;;ShipRollv2:             ld      a,(UBnKRotXCounter)
 288++A789              ;;;                        and     $7F
 289++A789              ;;;                        cp      16
 290++A789              ;;;                        ret     z
 291++A789              ;;;                        call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 292++A789              ;;;                        ld      (TacticsDotProduct3),a             ; .
 293++A789              ;;;                        ld      l,a                                ; .
 294++A789              ;;;                        ld      a,(varS)                           ; .
 295++A789              ;;;                        ld      (TacticsDotProduct3+1),a           ; .
 296++A789              ;;;                        ld      h,a                                ; h = sign sidev
 297++A789              ;;;                        ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 298++A789              ;;;                        ld      b,a                                ; b = roof product
 299++A789              ;;;                        ld      a,l                                ; a = abs sidev  * 2
 300++A789              ;;;                        sla     a                                  ;
 301++A789              ;;;                        JumpIfAGTENusng 16,.skipRollZero           ;
 302++A789              ;;;                        ZeroA                                      ; if its zoer then set rotx to zero
 303++A789              ;;;                        or      b
 304++A789              ;;;                        ld      (UBnKRotXCounter),a
 305++A789              ;;;                        IFDEF MISSILEDEBUG
 306++A789              ;;;                            ld  (TacticsRotX),a
 307++A789              ;;;                        ENDIF
 308++A789              ;;;                        ret
 309++A789              ;;;.skipRollZero:          ld      a,3
 310++A789              ;;;                        or      h
 311++A789              ;;;                        xor     b
 312++A789              ;;;                        ld      (UBnKRotXCounter),a
 313++A789              ;;;                        IFDEF MISSILEDEBUG
 314++A789              ;;;                            ld  (TacticsRotX),a
 315++A789              ;;;                        ENDIF
 316++A789              ;;;                        ret
 317++A789              ;;;
 318++A789              ;;;ShipSpeedv2:            ld      hl,(TacticsDotProduct1)
 319++A789              ;;;                        ld      a,h
 320++A789              ;;;                        and     a
 321++A789              ;;;                        jr      nz,.SlowDown
 322++A789              ;;;                        ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 323++A789              ;;;                        ld      a,l
 324++A789              ;;;                        JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 325++A789              ;;;.Accelerate:            ld      a,2                                 ; else
 326++A789              ;;;                        ld      (UBnKAccel),a                       ;  accelleration = 3
 327++A789              ;;;                        IFDEF MISSILEDEBUG
 328++A789              ;;;                            ld  (TacticsSpeed),a
 329++A789              ;;;                        ENDIF
 330++A789              ;;;                        ret                                         ;  .
 331++A789              ;;;.SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 332++A789              ;;;.Deccelerate:           ld      a,-1
 333++A789              ;;;                        ld      (UBnKAccel),a
 334++A789              ;;;                        IFDEF MISSILEDEBUG
 335++A789              ;;;                            ld  (TacticsSpeed),a
 336++A789              ;;;                        ENDIF
 337++A789              ;;;                        ret
 338++A789              ;;;.NoSpeedChange:         ZeroA                                       ; else no change
 339++A789              ;;;                        ld      (UBnKAccel),a
 340++A789              ;;;                        IFDEF MISSILEDEBUG
 341++A789              ;;;                            ld  (TacticsSpeed),a
 342++A789              ;;;                        ENDIF
 343++A789              ;;;                        ret
 344++A789              ;;;
 345++A789              ;;;
 346++A789              ;;;
 347++A789              ;;;RAT2 equ    4           ; roll pitch threshold
 348++A789              ;;;RAT  equ    3           ; magnitude of counter
 349++A789              ;;;CNT2 equ    22          ; angle for ship slowdown
 350++A789              ;;;
 351++A789              ;;;
 352++A789              ;;;ShipPitch:              ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 353++A789              ;;;                        ld      a,h                                ; .
 354++A789              ;;;                        xor     $80                                ; .
 355++A789              ;;;                        and     $80                                ; .
 356++A789              ;;;                        ld      h,a                                ; h  = flipped sign
 357++A789              ;;;                        ld      a,l                                ; a = value * 2
 358++A789              ;;;                        sla     a                                  ;
 359++A789              ;;;                        JumpIfAGTENusng RAT2, .skipPitchZero         ; if its > 16 then update pitch
 360++A789              ;;;                        ZeroA                                      ; else we zero pitch but
 361++A789              ;;;                        or      h                                  ; we need to retain the sign
 362++A789              ;;;                        ld      (UBnKRotZCounter),a                ; .
 363++A789              ;;;                        IFDEF MISSILEDEBUG
 364++A789              ;;;                            ld  (TacticsRotZ),a
 365++A789              ;;;                        ENDIF
 366++A789              ;;;                        ret
 367++A789              ;;;.skipPitchZero:         ld      a,l
 368++A789              ;;;                        or      h
 369++A789              ;;;                        ld      (UBnKRotZCounter),a
 370++A789              ;;;                        IFDEF MISSILEDEBUG
 371++A789              ;;;                            ld  (TacticsRotZ),a
 372++A789              ;;;                        ENDIF
 373++A789              ;;;                        ret
 374++A789              ;;;
 375++A789              ;;;
 376++A789              ;;;                        ;
 377++A789              ;;;ShipRoll:               call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 378++A789              ;;;                        ld      (TacticsDotProduct3),a             ; .
 379++A789              ;;;                        ld      l,a                                ; .
 380++A789              ;;;                        ld      a,(varS)                           ; .
 381++A789              ;;;                        ld      (TacticsDotProduct3+1),a           ; .
 382++A789              ;;;                        ld      h,a                                ; h = sign sidev
 383++A789              ;;;                        ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 384++A789              ;;;                        ld      b,a                                ; b = roof product
 385++A789              ;;;                        ld      a,l                                ; a = abs sidev  * 2
 386++A789              ;;;                        sla     a                                  ;
 387++A789              ;;;                        JumpIfAGTENusng RAT2,.skipRollZero           ;
 388++A789              ;;;                        ZeroA                                      ; if its zoer then set rotx to zero
 389++A789              ;;;                        or      b
 390++A789              ;;;                        ld      (UBnKRotXCounter),a
 391++A789              ;;;                        IFDEF MISSILEDEBUG
 392++A789              ;;;                            ld  (TacticsRotX),a
 393++A789              ;;;                        ENDIF
 394++A789              ;;;                        ret
 395++A789              ;;;.skipRollZero:          ld      a,1
 396++A789              ;;;                        or      h
 397++A789              ;;;                        xor     b
 398++A789              ;;;                        ld      (UBnKRotXCounter),a
 399++A789              ;;;                        IFDEF MISSILEDEBUG
 400++A789              ;;;                            ld  (TacticsRotX),a
 401++A789              ;;;                        ENDIF
 402++A789              ;;;                        ret
 403++A789              ;;;
 404++A789              ;;;ShipSpeed:              ld      hl,(TacticsDotProduct1)
 405++A789              ;;;                        ld      a,h
 406++A789              ;;;                        and     a
 407++A789              ;;;                        jr      nz,.SlowDown
 408++A789              ;;;                        ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 409++A789              ;;;                        ld      a,l
 410++A789              ;;;                        JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 411++A789              ;;;.Accelerate:            ld      a,3                                 ; else
 412++A789              ;;;                        ld      (UBnKAccel),a                       ;  accelleration = 3
 413++A789              ;;;                        IFDEF MISSILEDEBUG
 414++A789              ;;;                            ld  (TacticsSpeed),a
 415++A789              ;;;                        ENDIF
 416++A789              ;;;                        ret                                         ;  .
 417++A789              ;;;.SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 418++A789              ;;;.Deccelerate:           ld      a,-1
 419++A789              ;;;                        ld      (UBnKAccel),a
 420++A789              ;;;                        IFDEF MISSILEDEBUG
 421++A789              ;;;                            ld  (TacticsSpeed),a
 422++A789              ;;;                        ENDIF
 423++A789              ;;;                        ret
 424++A789              ;;;.NoSpeedChange:         ZeroA                                       ; else no change
 425++A789              ;;;                        ld      (UBnKAccel),a
 426++A789              ;;;                        IFDEF MISSILEDEBUG
 427++A789              ;;;                            ld  (TacticsSpeed),a
 428++A789              ;;;                        ENDIF
 429++A789              ;;;                        ret
 430++A789
# file closed: ./GameEngine/../GameEngine/NormalAI.asm
 276+ A789
 277+ A789              ; On Entry A = TacticsDotProduct2 sign (i.e. roof direction)
 278+ A789              ; on exit a == new roll
 279+ A789 EE 80        calcNPitch:             xor     SignOnly8Bit                    ; c = sign flipped of dot product only
 280+ A78B E6 80                                and     SignOnly8Bit                    ; .
 281+ A78D 4F                                   ld      c,a                             ; . (varT in effect)
 282+ A78E F6 03                                or      MISSILEMAXPITCH                 ; a = flipped sign max pitch
 283+ A790 3A 49 C0                             ld      a,(UBnKRotZCounter)             ; b = abs (currentz pitch)
 284+ A793 C9                                   ret
 285+ A794
 286+ A794 E6 7F                                and     SignMask8Bit                    ; . which will initially be 0
 287+ A796 47                                   ld      b,a                             ; .
 288+ A797 3A 15 A2                             ld      a,(TacticsDotProduct2)          ; a = abs roof dot product
 289+ A79A                                      JumpIfALTNusng MISSILEMAXPITCH+1, .calcNPitch2    ; if a >= roll threshold
 289+ A79A FE 04       >                        cp      MISSILEMAXPITCH+1
 289+ A79C DA A9 A7    >                        jp		c, .calcNPitch2
 290+ A79F 78                                   ld      a,b
 291+ A7A0 E6 80                                and     SignOnly8Bit
 292+ A7A2                                      ;jr      z,.NPitchPositive
 293+ A7A2                                     ; ld      a,
 294+ A7A2 3E 03                                ld      a,MISSILEMAXPITCH                         ;    z rot = z rot * dot product flipped sign
 295+ A7A4 B1                                   or      c                               ;    i.e. zrot = current magnitude but dot product sign flipped
 296+ A7A5 32 49 C0                             ld      (UBnKRotZCounter),a             ;    .
 297+ A7A8 C9                                   ret                                     ; else (a LT current abs z)
 298+ A7A9 B1           .calcNPitch2:           or      c                               ;     rot z = dot product with sign flipped
 299+ A7AA 32 49 C0                             ld      (UBnKRotZCounter),a             ;
 300+ A7AD C9                                   ret                                     ;
 301+ A7AE
 302+ A7AE 3A 49 C0     calcNRoll:              ld      a,(UBnKRotZCounter)
 303+ A7B1 E6 80                                and     SignOnly8Bit
 304+ A7B3 EE 80                                xor     SignOnly8Bit                    ; flip sign of dot product
 305+ A7B5 F6 05                                or      5
 306+ A7B7 32 48 C0                             ld      (UBnKRotXCounter),a
 307+ A7BA C9                                   ret
 308+ A7BB
 309+ A7BB 4F                                   ld      c,a
 310+ A7BC F6 03                                or      MISSILEMAXPITCH
 311+ A7BE 3A 48 C0                             ld      a,(UBnKRotXCounter)
 312+ A7C1 C9                                   ret
 313+ A7C2
 314+ A7C2
 315+ A7C2
 316+ A7C2 E6 7F                                and     SignMask8Bit                    ; get ABS value
 317+ A7C4 47                                   ld      b,a
 318+ A7C5 3A 15 A2                             ld      a,(TacticsDotProduct2)          ; now we have the dot product abs value
 319+ A7C8                                      JumpIfALTNusng MISSILEMAXROLL+1, .calcNRoll2
 319+ A7C8 FE 04       >                        cp      MISSILEMAXROLL+1
 319+ A7CA DA D4 A7    >                        jp		c, .calcNRoll2
 320+ A7CD 3E 03                                ld      a,MISSILEMAXROLL
 321+ A7CF B1                                   or      c
 322+ A7D0 32 48 C0                             ld      (UBnKRotXCounter),a
 323+ A7D3 C9                                   ret
 324+ A7D4 B1           .calcNRoll2:            or      c                               ;     rot z = dot product with sign flipped
 325+ A7D5 32 48 C0                             ld      (UBnKRotXCounter),a
 326+ A7D8 C9                                   ret
 327+ A7D9
 328+ A7D9
 329+ A7D9 21 2A C0     CopyRotSideToTacticsMat:ld      hl,UBnkrotmatSidevX+1
 330+ A7DC C3 E8 A7                             jp      CopyRotmatToTacticsMat
 331+ A7DF
 332+ A7DF 21 36 C0     CopyRotNoseToTacticsMat:ld      hl,UBnkrotmatNosevX+1
 333+ A7E2 C3 E8 A7                             jp      CopyRotmatToTacticsMat
 334+ A7E5
 335+ A7E5 21 30 C0     CopyRotRoofToTacticsMat:ld      hl,UBnkrotmatRoofvX+1
 336+ A7E8              ; Coy rotation matrix high byte to trans rot mat, strip off sign and separate to rotmat byte 2
 337+ A7E8 11 33 A2     CopyRotmatToTacticsMat: ld      de,TacticsRotMatX
 338+ A7EB 7E                                   ld      a,(hl)              ; matrix high byte of x
 339+ A7EC 47                                   ld      b,a
 340+ A7ED E6 7F                                and     SignMask8Bit
 341+ A7EF 12                                   ld      (de),a              ; set rot mat value
 342+ A7F0 13                                   inc     de
 343+ A7F1 78                                   ld      a,b
 344+ A7F2 E6 80                                and     SignOnly8Bit
 345+ A7F4 12                                   ld      (de),a              ; set rot mat sign
 346+ A7F5 13                                   inc     de                  ; move to next rot mat element
 347+ A7F6 23                                   inc     hl
 348+ A7F7 23                                   inc     hl                  ; matrix high byte of y
 349+ A7F8 7E           .processYElement:       ld      a,(hl)              ; matrix high byte of y
 350+ A7F9 47                                   ld      b,a
 351+ A7FA E6 7F                                and     SignMask8Bit
 352+ A7FC 12                                   ld      (de),a              ; set rot mat value
 353+ A7FD 13                                   inc     de
 354+ A7FE 78                                   ld      a,b
 355+ A7FF E6 80                                and     SignOnly8Bit
 356+ A801 12                                   ld      (de),a              ; set rot mat sign
 357+ A802 13                                   inc     de                  ; move to next rot mat element
 358+ A803 23                                   inc     hl
 359+ A804 23                                   inc     hl                  ; matrix high byte of z
 360+ A805 7E           .ProcessZElement:       ld      a,(hl)              ; matrix high byte of z
 361+ A806 47                                   ld      b,a
 362+ A807 E6 7F                                and     SignMask8Bit
 363+ A809 12                                   ld      (de),a              ; set rot mat value
 364+ A80A 13                                   inc     de
 365+ A80B 78                                   ld      a,b
 366+ A80C E6 80                                and     SignOnly8Bit
 367+ A80E 12                                   ld      (de),a              ; set rot mat sign
 368+ A80F C9                                   ret
 369+ A810
 370+ A810                                      IFDEF TACTICSDEBUG
 371+ A810              DebugTacticsCopy:
 372+ A810 2A 29 C0                             ld      hl,(UBnkrotmatSidevX)
 373+ A813 ED 5B 2B C0                          ld      de,(UBnkrotmatSidevY)
 374+ A817 ED 4B 2D C0                          ld      bc,(UBnkrotmatSidevZ)
 375+ A81B 22 6F A2                             ld      (TacticsSideX),hl
 376+ A81E ED 53 73 A2                          ld      (TacticsSideY),de
 377+ A822 ED 43 77 A2                          ld      (TacticsSideZ),bc
 378+ A826
 379+ A826 2A 2F C0                             ld      hl,(UBnkrotmatRoofvX)
 380+ A829 ED 5B 31 C0                          ld      de,(UBnkrotmatRoofvY)
 381+ A82D ED 4B 33 C0                          ld      bc,(UBnkrotmatRoofvZ)
 382+ A831 22 7F A2                             ld      (TacticsRoofX),hl
 383+ A834 ED 53 83 A2                          ld      (TacticsRoofY),de
 384+ A838 ED 43 87 A2                          ld      (TacticsRoofZ),bc
 385+ A83C
 386+ A83C 2A 35 C0                             ld      hl,(UBnkrotmatNosevX)
 387+ A83F ED 5B 37 C0                          ld      de,(UBnkrotmatNosevY)
 388+ A843 ED 4B 39 C0                          ld      bc,(UBnkrotmatNosevZ)
 389+ A847 22 8F A2                             ld      (TacticsNoseX),hl
 390+ A84A ED 53 93 A2                          ld      (TacticsNoseY),de
 391+ A84E ED 43 97 A2                          ld      (TacticsNoseZ),bc
 392+ A852
 393+ A852 C9                                   ret
 394+ A853                                      ENDIF
 395+ A853
 396+ A853 00 00        TacticsVarResult        DW 0
 397+ A855 CD DF A7     XX12EquTacticsDotNosev: call    CopyRotNoseToTacticsMat
 398+ A858 21 33 A2     XX12EquTacticsDotHL:    ld      hl,TacticsRotMatX; UBnkTransmatNosevX    ; ROTMATX HI
 399+ A85B 7E           .CalcXValue:            ld      a,(hl)                              ; DE = RotMatX & Vect X
 400+ A85C 5F                                   ld      e,a                                 ; .
 401+ A85D 3A 4F A2                             ld      a,(TacticsVectorX)                  ; .
 402+ A860 57                                   ld      d,a                                 ; .
 403+ A861 ED 30                                mul                                         ; .
 404+ A863 7A                                   ld      a,d                                 ; S = A = Hi (RotMatX & Vect X)
 405+ A864 32 9E 7E                             ld      (varS),a                            ; .
 406+ A867 23                                   inc     hl                                  ; move to sign byte
 407+ A868 3A 51 A2     .CalcXSign:             ld      a,(TacticsVectorX+2)                ; B  = A = Sign VecX xor sign RotMatX
 408+ A86B AE                                   xor     (hl)                                ; .
 409+ A86C 47                                   ld      b,a                                 ; .
 410+ A86D 23           .MoveToY:               inc     hl                                  ; Move on to Y component
 411+ A86E 7E           .CalcYValue:            ld      a,(hl)                              ; D = 0, E = Hi (RotMatY & Vect Y)
 412+ A86F 5F                                   ld      e,a                                 ; .
 413+ A870 3A 53 A2                             ld      a,(TacticsVectorY)                  ; .
 414+ A873 57                                   ld      d,a                                 ; .
 415+ A874 ED 30                                mul     de                                  ; .
 416+ A876 5A                                   ld      e,d                                 ; .
 417+ A877 16 00                                ld      d,0                                 ; .
 418+ A879 23                                   inc     hl                                  ; move to sign byte
 419+ A87A 3A 55 A2     .CalcYSign:             ld      a,(TacticsVectorY+2)                ; c = sign of y_sign * sidev_y
 420+ A87D AE                                   xor     (hl)                                ;
 421+ A87E 4F                                   ld      c,a                                 ;
 422+ A87F 23           .MoveToZ:               inc     hl                                  ; Move on to Z component
 423+ A880 E5           .AddXandY:              push    hl                                  ; but save HL as we need that
 424+ A881 3A 9E 7E                             ld      a,(varS)                            ; hl = Hi (RotMatX & Vect X) b= sign
 425+ A884 26 00                                ld      h,0                                 ; de = Hi (RotMatY & Vect Y) c= sign
 426+ A886 6F                                   ld      l,a                                 ;
 427+ A887 CD 2F 00                             call    ADDHLDESignBC                       ; a(sign) hl = sum
 428+ A88A 47                                   ld      b,a                                 ; b = sign of result
 429+ A88B 22 53 A8                             ld      (TacticsVarResult),hl               ; save sub in TacticsVarResult
 430+ A88E E1           .CalcZValue:            pop     hl                                  ; get back to the rotation mat z
 431+ A88F 7E                                   ld      a,(hl)                              ; D = 0, E = Hi (RotMatZ & Vect Z)
 432+ A890 5F                                   ld      e,a                                 ; .
 433+ A891 3A 57 A2                             ld      a,(TacticsVectorZ)                  ; .
 434+ A894 57                                   ld      d,a                                 ; .
 435+ A895 ED 30                                mul     de                                  ; .
 436+ A897 5A                                   ld      e,d                                 ; .
 437+ A898 16 00                                ld      d,0                                 ; .
 438+ A89A 23                                   inc     hl                                  ; move to sign byte
 439+ A89B 3A 59 A2     .CalcZSign:             ld      a,(TacticsVectorZ+2)
 440+ A89E AE                                   xor     (hl)
 441+ A89F 4F                                   ld      c,a                                 ; Set C to the sign of z_sign * sidev_z
 442+ A8A0 2A 53 A8                             ld      hl, (TacticsVarResult)              ; CHL = x + y, BDE = z products
 443+ A8A3 CD 2F 00                             call    ADDHLDESignBC                       ; so AHL = X y z products
 444+ A8A6 32 9E 7E                             ld      (varS),a                            ; for backwards compatibility
 445+ A8A9 7D                                   ld      a,l                                  ; .
 446+ A8AA C9                                   ret
 447+ A8AB
 448+ A8AB CD E5 A7     XX12EquTacticsDotRoofv: call    CopyRotRoofToTacticsMat
 449+ A8AE C3 58 A8                             jp      XX12EquTacticsDotHL
 450+ A8B1
 451+ A8B1 CD D9 A7     XX12EquTacticsDotSidev: call    CopyRotSideToTacticsMat
 452+ A8B4 C3 58 A8                             jp      XX12EquTacticsDotHL
 453+ A8B7
 454+ A8B7 21 20 C0     CopyToTargetVector:     ld      hl,UBnKxlo
 455+ A8BA 11 3F A2                             ld      de,TacticsTargetX
 456+ A8BD 01 09 00                             ld      bc,9
 457+ A8C0 ED B0                                ldir
 458+ A8C2 C9                                   ret
 459+ A8C3
 460+ A8C3              ; Copies 24 bit XYZ Vector to tactics vectors
 461+ A8C3 2A 20 C0     CopyPosToVector:        ld      hl,(UBnKxlo)
 462+ A8C6 3A 22 C0                             ld      a,(UBnKxsgn)
 463+ A8C9                                      ;xor     $80
 464+ A8C9 22 4F A2                             ld      (TacticsVectorX),hl
 465+ A8CC 32 51 A2                             ld      (TacticsVectorX+2),a
 466+ A8CF
 467+ A8CF 2A 23 C0     .CopyY24Bit:            ld      hl,(UBnKylo)
 468+ A8D2 3A 25 C0                             ld      a,(UBnKysgn)
 469+ A8D5                                      ;xor     $80
 470+ A8D5 22 53 A2                             ld      (TacticsVectorY),hl
 471+ A8D8 32 55 A2                             ld      (TacticsVectorY+2),a
 472+ A8DB
 473+ A8DB 2A 26 C0     .CopyZ24Bit:            ld      hl,(UBnKzlo)
 474+ A8DE 3A 28 C0                             ld      a,(UBnKzsgn)
 475+ A8E1                                      ;xor     $80
 476+ A8E1 22 57 A2                             ld      (TacticsVectorZ),hl
 477+ A8E4 32 59 A2                             ld      (TacticsVectorZ+2),a
 478+ A8E7 C9                                   ret
 479+ A8E8
 480+ A8E8              SetPlayerAsTarget:      ZeroA
 480+ A8E8 AF          >                        xor a
 481+ A8E9 21 3F A2                             ld      hl,TacticsTargetX
 482+ A8EC 06 09                                ld      b, 3*3
 483+ A8EE 77           .ZeroLoop:              ld      (hl),a                              ; player is always at 0,0,0
 484+ A8EF 23                                   inc     hl
 485+ A8F0 10 FC                                djnz    .ZeroLoop
 486+ A8F2 C9                                   ret
 487+ A8F3
 488+ A8F3 CD E8 A8     CalcVectorToMyShip:     call    SetPlayerAsTarget
 489+ A8F6 CD C3 A8                             call    CopyPosToVector
 490+ A8F9                                      ;call    CopyToTargetVector
 491+ A8F9                                      ;FlipSignMem     TacticsTargetX+2
 492+ A8F9                                      ;FlipSignMem     TacticsTargetY+2
 493+ A8F9                                      ;FlipSignMem     TacticsTargetZ+2
 494+ A8F9 C9                                   ret
 495+ A8FA
 496+ A8FA ED 5B 3F A2  CalcTargetVector:       ld      de,(TacticsTargetX)                        ; get target ship X
 497+ A8FE 3A 41 A2                             ld      a,(TacticsTargetX+2)                       ; and flip sign so we have missile - target
 498+ A901                                      FlipSignBitA
 498+ A901 EE 80       >                        xor     SignOnly8Bit
 499+ A903 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 500+ A904 2A 20 C0                             ld      hl,(UBnKxlo)                        ; get missile x
 501+ A907 3A 22 C0                             ld      a,(UBnKxsgn)                        ; get missile x sign
 502+ A90A 47                                   ld      b,a
 503+ A90B CD 2F 00                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 504+ A90E 22 4F A2                             ld      (TacticsVectorX),hl
 505+ A911 32 51 A2                             ld      (TacticsVectorX+2),a
 506+ A914 ED 5B 42 A2  .UpdateTargetingShipY:  ld      de,(TacticsTargetY)
 507+ A918 3A 44 A2                             ld      a,(TacticsTargetY+2)
 508+ A91B                                      FlipSignBitA
 508+ A91B EE 80       >                        xor     SignOnly8Bit
 509+ A91D 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 510+ A91E 2A 23 C0                             ld      hl,(UBnKylo)                        ; get missile x
 511+ A921 3A 25 C0                             ld      a,(UBnKysgn)                        ; get missile x sign
 512+ A924 47                                   ld      b,a
 513+ A925 CD 2F 00                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 514+ A928 22 53 A2                             ld      (TacticsVectorY),hl
 515+ A92B 32 55 A2                             ld      (TacticsVectorY+2),a
 516+ A92E ED 5B 45 A2  .UpdateTargetingShipZ:  ld      de,(TacticsTargetZ)
 517+ A932 3A 47 A2                             ld      a,(TacticsTargetZ+2)
 518+ A935                                      FlipSignBitA
 518+ A935 EE 80       >                        xor     SignOnly8Bit
 519+ A937 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 520+ A938 2A 26 C0                             ld      hl,(UBnKzlo)                        ; get missile x
 521+ A93B 3A 28 C0                             ld      a,(UBnKzsgn)                        ; get missile x sign
 522+ A93E 47                                   ld      b,a
 523+ A93F CD 2F 00                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 524+ A942 22 57 A2                             ld      (TacticsVectorZ),hl
 525+ A945 32 59 A2                             ld      (TacticsVectorZ+2),a
 526+ A948 C9                                   ret
 527+ A949
 528+ A949              ;-- Now its scaled we can normalise
 529+ A949              ;-- Scale down so that h d &b are zero, then do once again so l e and c are 7 bit
 530+ A949              ;-- use 7 bit mul96 to ensure we don;t get odd maths
 531+ A949 2A 4F A2     NormalizeTactics:       ld      hl, (TacticsVectorX)        ; pull XX15 into registers
 532+ A94C ED 5B 53 A2                          ld      de, (TacticsVectorY)        ; .
 533+ A950 ED 4B 57 A2                          ld      bc, (TacticsVectorZ)        ; .
 534+ A954 7C           .ScaleLoop:             ld      a,h
 535+ A955 B2                                   or      d
 536+ A956 B0                                   or      b
 537+ A957 28 0F                                jr      z,.DoneScaling
 538+ A959                                      ShiftHLRight1
 538+ A959 CB 3C       >			   srl h
 538+ A95B CB 1D       >			   rr  l
 539+ A95D                                      ShiftDERight1
 539+ A95D CB 3A       >			   srl d
 539+ A95F CB 1B       >			   rr  e
 540+ A961                                      ShiftBCRight1
 540+ A961 CB 38       >			   srl b
 540+ A963 CB 19       >			   rr  c
 541+ A965 C3 54 A9                             jp      .ScaleLoop
 542+ A968              .DoneScaling:           ShiftHLRight1                       ; as the values now need to be sign magnitued
 542+ A968 CB 3C       >			   srl h
 542+ A96A CB 1D       >			   rr  l
 543+ A96C                                      ShiftDERight1                       ; e.g. S + 7 bit we need an extra shift
 543+ A96C CB 3A       >			   srl d
 543+ A96E CB 1B       >			   rr  e
 544+ A970                                      ShiftBCRight1                       ; now values are in L E C
 544+ A970 CB 38       >			   srl b
 544+ A972 CB 19       >			   rr  c
 545+ A974 E5 D5 C5                             push    hl,,de,,bc                  ; save vecrtor x y and z nwo they are scaled to 1 byte
 546+ A977 53                                   ld      d,e                         ; hl = y(e) ^ 2
 547+ A978 ED 30                                mul     de                          ; .
 548+ A97A EB                                   ex      de,hl                       ; .
 549+ A97B 53                                   ld      d,e                         ; de = x(l) ^ 2
 550+ A97C ED 30                                mul     de                          ; .
 551+ A97E 19                                   add     hl,de                       ; hl = hl + de
 552+ A97F 51                                   ld      d,c                         ; de = y(c)^ 2 + x ^ 2
 553+ A980 59                                   ld      e,c                         ; .
 554+ A981 ED 30                                mul     de                          ; .
 555+ A983 19                                   add     hl,de                       ; hl =  y^ 2 + x ^ 2 + z ^ 2
 556+ A984 EB                                   ex      de,hl                       ; fix as hl was holding square
 557+ A985 CD 81 91                             call    asm_sqrt                    ; IYH = A = hl = sqrt (de) = sqrt (x ^ 2 + y ^ 2 + z ^ 2)
 558+ A988                                      ; add in logic if h is low then use lower bytes for all
 559+ A988 7D                                   ld      a,l                         ;
 560+ A989 FD 67                                ld      iyh,a                       ;
 561+ A98B 57                                   ld      d,a                         ; D = sqrt
 562+ A98C C1                                   pop     bc                          ; retrive tacticsvectorz scaled
 563+ A98D 79                                   ld      a,c                         ; a = scaled byte
 564+ A98E CD 7B 9A                             call    AequAdivDmul967Bit;AequAdivDmul96Unsg          ; This rountine I think is wrong and retuins bad values
 565+ A991 32 57 A2                             ld      (TacticsVectorZ),a          ; z = normalised z
 566+ A994 D1                                   pop     de
 567+ A995 7B                                   ld      a,e
 568+ A996 FD 54                                ld      d,iyh
 569+ A998 CD 7B 9A                             call    AequAdivDmul967Bit;AequAdivDmul96Unsg
 570+ A99B 32 53 A2                             ld      (TacticsVectorY),a
 571+ A99E E1                                   pop     hl
 572+ A99F 7D                                   ld      a,l
 573+ A9A0 FD 54                                ld      d,iyh
 574+ A9A2 CD 7B 9A                             call    AequAdivDmul967Bit;AequAdivDmul96Unsg
 575+ A9A5 32 4F A2                             ld      (TacticsVectorX),a
 576+ A9A8                                      ; BODGE FOR NOW
 577+ A9A8                                     ; BODGE FOR NOW
 578+ A9A8                                      ZeroA                              ;; added to help debugging
 578+ A9A8 AF          >                        xor a
 579+ A9A9 32 50 A2                             ld      (TacticsVectorX+1),a       ;; added to help debugging
 580+ A9AC 32 54 A2                             ld      (TacticsVectorY+1),a       ;; added to help debugging
 581+ A9AF 32 58 A2                             ld      (TacticsVectorZ+1),a       ;; added to help debugging
 582+ A9B2                                      SignBitOnlyMem TacticsVectorX+2     ; now upper byte is sign only
 582+ A9B2 3A 51 A2    >                        ld      a, (TacticsVectorX+2)
 582+ A9B5 E6 80       >                        and     SignOnly8Bit
 582+ A9B7 32 51 A2    >                        ld      (TacticsVectorX+2),a
 583+ A9BA                                      SignBitOnlyMem TacticsVectorY+2     ; (could move it to lower perhaps later if
 583+ A9BA 3A 55 A2    >                        ld      a, (TacticsVectorY+2)
 583+ A9BD E6 80       >                        and     SignOnly8Bit
 583+ A9BF 32 55 A2    >                        ld      (TacticsVectorY+2),a
 584+ A9C2                                      SignBitOnlyMem TacticsVectorZ+2     ;  its worth it)
 584+ A9C2 3A 59 A2    >                        ld      a, (TacticsVectorZ+2)
 584+ A9C5 E6 80       >                        and     SignOnly8Bit
 584+ A9C7 32 59 A2    >                        ld      (TacticsVectorZ+2),a
 585+ A9CA C9                                   ret
 586+ A9CB
 587+ A9CB                          DISPLAY "TODO: TactivtsPosMinus Target"
 588+ A9CB              ;TODOcall    TacticsPosMinusTarget              ; calculate vector to target
 589+ A9CB              ;;TODO                        check range
 590+ A9CB              ;;TODO                        if target has ecm then 7% chance it will active, reduce target energy (i.e. damage)
 591+ A9CB              ;;TODO                        else
 592+ A9CB              ;;TODO                            normalise teh vector for direction
 593+ A9CB              ;;TODO                            dot product = missile nosev . normalised vector
 594+ A9CB              ;;TODO                            cnt = high byte of dot product, cnf is +ve if facing similar direction
 595+ A9CB              ;;TODO                            negate normalised vector so its opposite product
 596+ A9CB              ;;TODO                            invert sign of cnt
 597+ A9CB              ;;TODO                            AK = roovf . XX15
 598+ A9CB              ;;TODO                            Ships pitch = call nroll to caulate teh valu eof ships pitch counter
 599+ A9CB              ;;TODO                            if pitch * 2 < 32 then
 600+ A9CB              ;;TODO                                ax = sidev . xx15
 601+ A9CB              ;;TODO                                    a = x xort current pitch direction
 602+ A9CB              ;;TODO                                    shipts roll = nroll
 603+ A9CB              ;;TODO                            do accelleration at TA6 (    https://www.bbcelite.com/disc/flight/subroutine/tactics_part_7_of_7.html#ta20
 604+ A9CB
 605+ A9CB              ;;TODO
 606+ A9CB              ;;TODO
 607+ A9CB              ;;TODO
 608+ A9CB              ;;TODOget the targetted ship inbto bank
 609+ A9CB              ;;TODO                        check range as per player
 610+ A9CB              ;;TODO                        handle explosion enc
 611+ A9CB
 612+ A9CB              ;                    else see how close it is to target
 613+ A9CB              ;                         if close to target
 614+ A9CB              ;                            then explodes destroy missile
 615+ A9CB              ;                                 if ship is not station
 616+ A9CB              ;                                    then set up signal target ship hit my missile flag
 617+ A9CB              ;                                         set blastcheckcounter to slotlist length  (12)
 618+ A9CB              ;                                 end if
 619+ A9CB              ;                                 if we are in range of missle blast
 620+ A9CB              ;                                    cause blast damage to our ship (this will signal death is needed)
 621+ A9CB              ;                                 end if
 622+ A9CB              ;                                 return
 623+ A9CB              ;                         end if
 624+ A9CB              ;                 end if
 625+ A9CB              ;         end if
 626+ A9CB
 627+ A9CB
 628+ A9CB                          ;            else if ship is angry at us
 629+ A9CB              ;
 630+ A9CB
 631+ A9CB              ; Part 1 - if type is missile and enquing a missile blast and slot free
 632+ A9CB              ;             then enqueue missile blast details
 633+ A9CB              ;                  mark as exploded
 634+ A9CB              ;                  remove missile from universe slot list
 635+ A9CB
 636+ A9CB              ; TODO, how to we deal with scared ships, e.g. if angry and no guns or missiles then should be considered scared or if hull mass < say 25% of our ship
 637+ A9CB              ; also for future ship vs ship combat
 638+ A9CB              ;... Tactics........................................................................
 639+ A9CB              ;.PART 1
 640+ A9CB              ; if shiphitbymissleflag <> false
 641+ A9CB              ;    then dec blast check counter
 642+ A9CB              ;         if blast check counter = 0
 643+ A9CB              ;            then set shiphitbymissileflag to FF
 644+ A9CB              ;    else if SetShipHitByMissileFlag = current ship number
 645+ A9CB              ;            then cause damage to ship
 646+ A9CB              ;         else if ship is in range and ship is not a station
 647+ A9CB              ;                  then cause blast damage to ship
 648+ A9CB              ;         if destroyed
 649+ A9CB              ;            then explode ship
 650+ A9CB              ;                 return
 651+ A9CB              ; end if
 652+ A9CB              ; if ship is a missle (I think we allow missile on missle action)
 653+ A9CB              ;    then if ecm is active
 654+ A9CB              ;            then destroy missile and return
 655+ A9CB              ;            else if ship is angry at us
 656+ A9CB              ;                    then if ship is close to us
 657+ A9CB              ;                            then explodes causing damage to our ship
 658+ A9CB              ;                                 enque missile blast
 659+ A9CB              ;                                 destroy missile
 660+ A9CB              ;                                 set blastcheckcounter to slotlist length
 661+ A9CB              ;                                 set shiphitbymissileflag to FE (general blast)
 662+ A9CB              ;                                 return
 663+ A9CB              ;                            else jump to part 3 to do updates
 664+ A9CB              ;                         end if
 665+ A9CB              ;                    else see how close it is to target
 666+ A9CB              ;                         if close to target
 667+ A9CB              ;                            then
 668+ A9CB              ;                                 enque missile blast
 669+ A9CB              ;                                 destroy missile
 670+ A9CB              ;                                 if ship is not station
 671+ A9CB              ;                                    then set up signal target ship hit my missile flag
 672+ A9CB              ;                                         set blastcheckcounter to slotlist length  (12)
 673+ A9CB              ;                                 end if
 674+ A9CB              ;                                 if we are in range of missle blast
 675+ A9CB              ;                                    cause blast damage to our ship (this will signal death is needed)
 676+ A9CB              ;                                 end if
 677+ A9CB              ;                                 return
 678+ A9CB              ;                         end if
 679+ A9CB              ;                 end if
 680+ A9CB              ;         end if
 681+ A9CB              ;.PART 2A ** adding in a collision logic
 682+ A9CB              ;    else if ship is close to another ship
 683+ A9CB              ;            then if docking flag set and other ship is space station or we are space station and other ship has docking flag
 684+ A9CB              ;                    then if aligned correctly
 685+ A9CB              ;                         then remove ship as docked
 686+ A9CB              ;                              return
 687+ A9CB              ;         else
 688+ A9CB              ;            call collision route and determine daamage based on sizes and bounce vectors
 689+ A9CB              ;            return
 690+ A9CB              ;.PART 2 ** Need to check if ship has AI flag
 691+ A9CB              ;    else if not hostile
 692+ A9CB              ;            then if not docking or station not present
 693+ A9CB              ;                    then calculate vector to planet
 694+ A9CB              ;                         jump to part 7
 695+ A9CB              ;                    else calculate verctor to docking slot
 696+ A9CB              ;                         call caluclate vector to docking slot (DOCKIT)
 697+ A9CB              ;                         jump to part 7
 698+ A9CB              ;                 end if
 699+ A9CB              ;            else case ship type
 700+ A9CB              ;                      >>escape pod>> point at planet and jump to step 7
 701+ A9CB              ;                      >>space station>> if hostile
 702+ A9CB              ;                                           then if cop counter < 7 and 6.2% chance
 703+ A9CB              ;                                                   then spawm hostile cop
 704+ A9CB              ;                                                end if
 705+ A9CB              ;                                           else
 706+ A9CB              ;                                                if 0.8% change and transporter count = 0
 707+ A9CB              ;                                                   then if 50% chance
 708+ A9CB              ;                                                           then spawn transporter
 709+ A9CB              ;                                                           else spawn shuttle
 710+ A9CB              ;                                                        end if
 711+ A9CB              ;                                                end if
 712+ A9CB              ;                                        end if
 713+ A9CB              ;                                        return
 714+ A9CB              ;                      >>targoid and no mother ship in slot list>> set random drift
 715+ A9CB              ;                                                                  return
 716+ A9CB              ;                      >>if bounty hunter flag>> if ship not hostile
 717+ A9CB              ;                                                   then if trader flag clear or 20% chance
 718+ A9CB              ;                                                        then if fugitive or offender
 719+ A9CB              ;                                                                then set hosile
 720+ A9CB              ;                                                end if
 721+ A9CB              ;                      >>Carrier and hanger slots > 0 >> if 22% chance (code to be added later)
 722+ A9CB              ;                                         then spawn agressive hosting one of types carried
 723+ A9CB              ;                                              reduce ships in hanger by 1
 724+ A9CB              ;                                              return
 725+ A9CB              ;                      >>rock hermit>> if 22% chance
 726+ A9CB              ;                                         then spawn agressive hosting one of Sidewinder, Mamba, Krait, Adder or Gecko
 727+ A9CB              ;                                              return
 728+ A9CB              ;                      >>pirate and in safe zone>> stop pirate being hostile by removing agressive and hostileflags
 729+ A9CB              ;                 end case
 730+ A9CB              ;         end if
 731+ A9CB              ;         recharge ship energy by recharge factor (TODO as a config item on ship type but by default 1)
 732+ A9CB              ; .PART 3
 733+ A9CB              ;         calulcate dot product of ship nose to us
 734+ A9CB              ; .PART 4
 735+ A9CB              ;         2.5% change ship rill roll a noticable amount
 736+ A9CB              ;         if ship has > 50% energy jump to part 6
 737+ A9CB              ;         if ship > 1/8th energy jump to part 5
 738+ A9CB              ;         if random 10% chance (i.e. ship < 1/8 energy and bails out)
 739+ A9CB              ;            then launch escape pod
 740+ A9CB              ;                 set AI to null
 741+ A9CB              ;                 set random pitch and roll
 742+ A9CB              ;                 set accelleation to 0
 743+ A9CB              ;         end if
 744+ A9CB              ; .PART 5
 745+ A9CB              ;         if ship does not have any missilesor ECM is firing to part 6
 746+ A9CB              ;            then if random > threshold for ship type (TODO as a config item on ship type)
 747+ A9CB              ;                    then if tharoid ; note this means thargoids are sensitve to ECM
 748+ A9CB              ;                            then launch thargon
 749+ A9CB              ;                            else spawn angry missle under ship
 750+ A9CB              ;                         end if
 751+ A9CB              ;                 end if
 752+ A9CB              ;            else return
 753+ A9CB              ;         end if
 754+ A9CB              ; .PART 6
 755+ A9CB              ;         if ship is not pointing at us from dot product ( < 160 , also > -32)
 756+ A9CB              ;            then jump to part 7
 757+ A9CB              ;            else if ship is pointing directly at us ( < 163 i.e. > -35)
 758+ A9CB              ;                    then fire laser at us (which reduces energy)
 759+ A9CB              ;                         cause laser damage to our ship (this will signal death is needed)
 760+ A9CB              ;                         decellerate by half as ship has lock on
 761+ A9CB              ;                         return
 762+ A9CB              ;                    else fire laser into space (which reduces energy)
 763+ A9CB              ;                 end if
 764+ A9CB              ;         end if
 765+ A9CB              ; .PART 7#
 766+ A9CB              ;        if ship is a msile targetting us
 767+ A9CB              ;           then ship turns towards us some more
 768+ A9CB              ;           else if z hi > =  3 or ( x hi or y hi > 1) , i.e. ship is far away
 769+ A9CB              ;                    then do random wiht bit 7 set
 770+ A9CB              ;                         if random < AI flag
 771+ A9CB              ;                            then   ship turned towards us
 772+ A9CB              ;                            else   ship turns away from us
 773+ A9CB              ;                         end if
 774+ A9CB              ;                end if
 775+ A9CB              ;           end if
 776+ A9CB              ;           calculate new roll, pitch and accelleration based on new targe vector
 777+ A9CB
 778+ A9CB
 779+ A9CB              ;        determine ship direction based on agression and type
 780+ A9CB              ;        set pitch and roll coutners
 781+ A9CB              ;        adjust speed depleding on relationship to us
 782+ A9CB              ; .PART 8 - new
 783+ A9CB              ;        if ship has ECM, another ECM is not active and missile targeted at it
 784+ A9CB              ;           if ship has enery of ECM energey cost + 1/8th total
 785+ A9CB              ;              if chance 25%
 786+ A9CB              ;                 then fire ECM
 787+ A9CB              ;
 788+ A9CB
 789+ A9CB
 790+ A9CB
 791+ A9CB
 792+ A9CB 2A 4F A2     ReduceTacticVectors:ld      hl, (TacticsVectorX)        ; pull XX15 into registers
 793+ A9CE ED 5B 53 A2                      ld      de, (TacticsVectorY)        ; .
 794+ A9D2 ED 4B 57 A2                      ld      bc, (TacticsVectorZ)        ; .
 795+ A9D6 3A 51 A2                         ld      a,(TacticsVectorX+2)        ; .
 796+ A9D9 FD 67                            ld      iyh,a                       ; iyh = X sign
 797+ A9DB 3A 55 A2                         ld      a,(TacticsVectorY+2)        ; .
 798+ A9DE FD 6F                            ld      iyl,a                       ; iyl = Y sign
 799+ A9E0 3A 59 A2                         ld      a,(TacticsVectorZ+2)        ; .
 800+ A9E3 DD 67                            ld      ixh,a                       ; ixh = z sign
 801+ A9E5 FD B4        .ScaleLoop:         or      iyh                         ; now check if upper has value
 802+ A9E7 FD B5                            or      iyl                         ; .
 803+ A9E9                                  ClearSignBitA                       ;  exluding sign bit
 803+ A9E9 E6 7F       >                        and     SignMask8Bit
 804+ A9EB 28 21                            jr      z,.DoneScaling              ; and exit loop if upper byte is only sign component
 805+ A9ED FD 7C        .ScaledDownBy2:     ld      a,iyh
 806+ A9EF CB 2F                            sra     a
 807+ A9F1 FD 67                            ld      iyh,a                       ; actually we can keep sign bit so just sr then rr
 808+ A9F3 CB 1C                            rr      h                           ; Deal with X
 809+ A9F5 CB 1D                            rr      l                           ;
 810+ A9F7 FD 7D                            ld      a,iyl
 811+ A9F9 CB 2F                            sra     a                           ; actually we can keep sign bit so just sr then rr
 812+ A9FB FD 6F                            ld      iyl,a
 813+ A9FD CB 1A                            rr      d                           ; Deal with Y
 814+ A9FF CB 1B                            rr      e                           ;
 815+ AA01 DD 7D                            ld      a, ixl                      ; actually we can keep sign bit so just sr then rr
 816+ AA03 CB 2F                            sra     a
 817+ AA05 DD 6F                            ld      ixl,a
 818+ AA07 CB 18                            rr      b                           ; Deal with Z
 819+ AA09 CB 19                            rr      c                           ;
 820+ AA0B C3 E5 A9                         jp      .ScaleLoop
 821+ AA0E 7C           .DoneScaling:       ld      a,h
 822+ AA0F B2                               or      d
 823+ AA10 B0                               or      b
 824+ AA11                                  SignBitOnlyA                        ; check if new sign bit has a value rotated in,
 824+ AA11 E6 80       >                        and     SignOnly8Bit
 825+ AA13 28 0C                            jr      z,.OKToNormalise
 826+ AA15              .ShiftTo15Bit:      ShiftHLRight1                       ; one last shift to 15 bit we don't need
 826+ AA15 CB 3C       >			   srl h
 826+ AA17 CB 1D       >			   rr  l
 827+ AA19                                  ShiftDERight1                       ; to do sign bytes
 827+ AA19 CB 3A       >			   srl d
 827+ AA1B CB 1B       >			   rr  e
 828+ AA1D                                  ShiftBCRight1                       ; as value must be 0
 828+ AA1D CB 38       >			   srl b
 828+ AA1F CB 19       >			   rr  c
 829+ AA21 7C           .OKToNormalise:     ld      a,h                         ; iyh now can only hold sign
 830+ AA22 FD B4                            or      iyh                         ; so by the end of here
 831+ AA24 67                               ld      h,a                         ;   hl = x
 832+ AA25 7A                               ld      a,d                         ;   de = y
 833+ AA26 FD B5                            or      iyl                         ;   bc = z
 834+ AA28 57                               ld      d,a                         ; all scaled to 15 bit + sign
 835+ AA29 78                               ld      a,b                         ;
 836+ AA2A DD B4                            or      ixh                         ;
 837+ AA2C 47                               ld      b,a                         ;
 838+ AA2D 22 5F A2                         ld      (TacticsNormX),hl
 839+ AA30 22 63 A2                         ld      (TacticsNormY),hl
 840+ AA33 22 67 A2                         ld      (TacticsNormZ),hl
 841+ AA36 C9                               ret
 842+ AA37                                 ; ***SIgn bits*** need to be in byte 3
 843+ AA37
# file closed: ./GameEngine/Tactics.asm
1130  AA37                  INCLUDE "./Hardware/drive_access.asm"
# file opened: ./Hardware/drive_access.asm
   1+ AA37              M_GETSETDRV             equ $89
   2+ AA37              F_OPEN                  equ $9a
   3+ AA37              F_CLOSE                 equ $9b
   4+ AA37              F_READ                  equ $9d
   5+ AA37              F_WRITE                 equ $9e
   6+ AA37              F_SEEK                  equ $9f
   7+ AA37
   8+ AA37              FA_READ                 equ $01
   9+ AA37              FA_APPEND               equ $06
  10+ AA37              FA_OVERWRITE            equ $0C
  11+ AA37              DISK_FILEMAP            equ $85
  12+ AA37              DISK_STRMSTART          equ $86
  13+ AA37              DISK_STRMEND            equ $87
  14+ AA37
  15+ AA37              ESX_MODE_READ           equ $01
  16+ AA37              ESX_MODE_OPEN_EXIST     equ $00
  17+ AA37
  18+ AA37              FILEMAP_SIZE            equ $20
  19+ AA37              FILEMAP_BLOCK_SIZE      equ $06
  20+ AA37
  21+ AA37              ; Success 1 = default drive, carry reset
  22+ AA37              ; Failure HL = -1 , carry set, errno set
  23+ AA37 F5 C5 D5 E5  GetDefaultDrive:        push	af,,bc,,de,,hl,,ix
  23+ AA3B DD E5
  24+ AA3D AF                                   xor	    a	; a = 0 means get default drive into A
  25+ AA3E CF                                   rst	    $08
  26+ AA3F 89                                   db	    M_GETSETDRV
  27+ AA40 32 D5 AA                             ld	    (DefaultDrive),a
  28+ AA43 DD E1 E1 D1                          pop		af,,bc,,de,,hl,,ix
  28+ AA47 C1 F1
  29+ AA49 C9                                   ret
  30+ AA4A
  31+ AA4A
  32+ AA4A              ; Disable NMI Multi face - needed for streaming
  33+ AA4A              ;disable_multiface:      ld      bc,REGISTER_NUMBER_PORT
  34+ AA4A              ;                        ld      a,PERIPHERAL_2_REGISTER
  35+ AA4A              ;                        out     (c),a
  36+ AA4A              ;                        inc     b
  37+ AA4A              ;                        in      a,(c)
  38+ AA4A              ;                        and     %11110111
  39+ AA4A              ;                        out     (c),a
  40+ AA4A              ;                        ret
  41+ AA4A              ;
  42+ AA4A              ;enable_multiface:       ld      bc,REGISTER_NUMBER_PORT
  43+ AA4A              ;                        ld      a,PERIPHERAL_2_REGISTER
  44+ AA4A              ;                        out     (c),a
  45+ AA4A              ;                        inc     b
  46+ AA4A              ;                        in      a,(c)
  47+ AA4A              ;                        or      %00001000
  48+ AA4A              ;                        out     (c),a
  49+ AA4A              ;                        ret
  50+ AA4A              ;
  51+ AA4A              ; *******************************************************************************************************
  52+ AA4A              ;	Function:	Open a file read for reading/writing
  53+ AA4A              ;	In:		ix = filename
  54+ AA4A              ;			b  = Open filemode
  55+ AA4A              ;	ret		a  = handle, 0 on error
  56+ AA4A              ;   fOpen_read_exists takes defaults and sets up default drive
  57+ AA4A              ; *******************************************************************************************************
  58+ AA4A              ;fOpen_read_exists:      ld      b,ESX_MODE_READ | ESX_MODE_OPEN_EXIST
  59+ AA4A              ;                        call    GetDefaultDrive
  60+ AA4A              ;                        call    fOpen
  61+ AA4A              ;                        call    fRefill_map
  62+ AA4A              ;                        jp      c,.RefilMapError
  63+ AA4A              ;                        jp      z,.RefilMapEmpty
  64+ AA4A              ;                        ret
  65+ AA4A              ;.RefilMapError:         jp      .RefilMapError
  66+ AA4A              ;.RefilMapEmpty:         jp      .RefilMapEmpty
  67+ AA4A              ;
  68+ AA4A              ;
  69+ AA4A
  70+ AA4A 3A D5 AA     fOpen:	                ld	    a,(DefaultDrive); default drive must be called before we start
  71+ AA4D CF                                   rst	    $08
  72+ AA4E 9A                                   db	    F_OPEN
  73+ AA4F 32 D6 AA                             ld      (FileHandle),a  ; make a local copy of last file opened
  74+ AA52 38 01                                jr      c,.FileOpenError
  75+ AA54 C9                                   ret
  76+ AA55 C3 55 AA     .FileOpenError:         jp      .FileOpenError
  77+ AA58
  78+ AA58              ; *******************************************************************************************************
  79+ AA58              ;	Function	refills the buffer map with card addresses for the file
  80+ AA58              ;	In:		a  = file handle (if calling fRefill_mapA)
  81+ AA58              ;           ix = address of filemap_buffer (if calling fRefill_mapA)
  82+ AA58              ;           de = filemap size (which should equal 4 in our case)
  83+ AA58              ;			bc  = amount to read
  84+ AA58              ;	ret:		carry set = error
  85+ AA58              ;               zero set  = no data loaded so still error
  86+ AA58              ;   you can use fRefill_map to pull default valuess
  87+ AA58              ; *******************************************************************************************************
  88+ AA58              ;fRefill_map:            ld      a,(FileHandle)
  89+ AA58              ;                        ld      ix,FilemapBuffer
  90+ AA58              ;                        ld      de,FILEMAP_SIZE
  91+ AA58              ;fRefill_mapA:           rst     $08
  92+ AA58              ;                        db      DISK_FILEMAP
  93+ AA58              ;.SetFlags:              ld      (CardFlags),a                   ; set up adressing mode flags  bit 0=card id (0 or 1) bit 1=0 for byte addressing, 1 for block addressing
  94+ AA58              ;.CheckForEntries:       ld      (FilemapBufferLast),hl          ; save last entry address +2
  95+ AA58              ;                        ld      de,FilemapBuffer
  96+ AA58              ;                        sbc     hl,de                           ; hl = number of entries found
  97+ AA58              ;                        ld      a,$ff
  98+ AA58              ;                        ret
  99+ AA58              ;
 100+ AA58              ;read_stream_block:      ld      hl,(FilemapBufferPointer)
 101+ AA58              ;                        ldBCDEatHL                              ; load the disk address
 102+ AA58              ;                        push    bc                              ; into IXDE
 103+ AA58              ;                        pop     ix                              ; now IXDE = card address
 104+ AA58              ;                        ldBCatHL                                ; bc = number of blocks to be read
 105+ AA58              ;                        ld      (FilemapBlockCount),bc
 106+ AA58              ;                        ret
 107+ AA58              ; Start up stream of data
 108+ AA58              ; If successful, the call returns with:
 109+ AA58              ; B=protocol: 0=SD/MMC, 1=IDE,  C=data port
 110+ AA58              ; NOTE: On the Next, these values will always be: B=0 C=$EB
 111+ AA58              ;fStream_start:          ld      hl,FilemapBuffer                ; set to head of filemap
 112+ AA58              ;                        ld      (FilemapBufferPointer),hl       ; .
 113+ AA58              ;                        ZeroA
 114+ AA58              ;                        ld      (FilereadsPerformed),a
 115+ AA58              ;                        call    read_stream_block
 116+ AA58              ;                        ld      a,(CardFlags)                   ; get card flags back
 117+ AA58              ;                        rst     $08
 118+ AA58              ;                        DB      DISK_STRMSTART                  ; start up stream
 119+ AA58              ;                        ld      (FileStreamPort),bc             ; save port information (even through it will not change on a next)
 120+ AA58              ;                        ret
 121+ AA58
 122+ AA58              ; *******************************************************************************************************
 123+ AA58              ;	Function	stream in a block of data to memory
 124+ AA58              ;	In:		ix  = address to read into
 125+ AA58              ;			bc  = amount to read
 126+ AA58              ;	ret:		carry set = error
 127+ AA58              ; *******************************************************************************************************
 128+ AA58              ;fStream_block:          ld      ix,FileBuffer
 129+ AA58              ;                        ld      a,(CardFlags)
 130+ AA58              ;                        ld      bc,(FileStreamPort)
 131+ AA58              ;                        ld      hl,FileBuffer
 132+ AA58              ;                        ld      (FilemapBufferPointer),hl
 133+ AA58              ;.StreamLoop:            ld      b,0
 134+ AA58              ;                        ld      a,(TargetSize+1)
 135+ AA58              ;                        cp      2
 136+ AA58              ;                        jr      c,.stream_partial_block
 137+ AA58              ;.StreamFullBlock:       inir                                ; read 256 bytes to hl
 138+ AA58              ;                        inir                                ; read 256 bytes to hl+256
 139+ AA58              ;                        dec     b                           ; update byte count
 140+ AA58              ;                        dec     b                           ; .
 141+ AA58              ;                        ld      hl,TargetSize               ; 512 bytes read
 142+ AA58              ;                        ld      de,512
 143+ AA58              ;                        ClearCarryFlag
 144+ AA58              ;                        sbc     hl,de
 145+ AA58              ;                        ld      (TargetSize),hl
 146+ AA58              ;                        ld      a,(FileStreamPort+1)        ; get the protocol
 147+ AA58              ;                        and     a
 148+ AA58              ;                        jr      nz,.protocol_ide            ; we arn't using but for compatibility
 149+ AA58              ;.protocol_sdmmc:        in      a,(c)                       ; for sd and mmc, read in the 2 byte CRC
 150+ AA58              ;                        nop                                 ; as the max performance of the interface is
 151+ AA58              ;                        nop                                 ; 16T per byte, no ops pad out operation
 152+ AA58              ;                        in      a,(c)
 153+ AA58              ;                        nop
 154+ AA58              ;                        nop
 155+ AA58              ;.wait_for_next_block:   in      a,(c)                       ; if wait token is not FF then we are read
 156+ AA58              ;                        cp      $FF
 157+ AA58              ;                        jr      z,.wait_for_next_block
 158+ AA58              ;                        cp      $FE                         ; if not and its not FE its a fault
 159+ AA58              ;                        jr      nz,.token_error
 160+ AA58              ;.protocol_ide:          ld      de,(TargetSize)             ; Any more bytes required
 161+ AA58              ;                        ld      a,d
 162+ AA58              ;                        or      e
 163+ AA58              ;                        jr      z,.streaming_complete
 164+ AA58              ;                        ret
 165+ AA58              ;.stream_partial_block:  and     a                           ; is block at least 256 bytes?
 166+ AA58              ;                        jr      z,.under256_bytes
 167+ AA58              ;                        inir                                ; get 256 bytes
 168+ AA58              ;.under256_bytes:        ld      b,e
 169+ AA58              ;                        inc     b
 170+ AA58              ;                        dec     b
 171+ AA58              ;                        jr      z,.streaming_complete
 172+ AA58              ;                        inir
 173+ AA58              ;.streaming_complete:    ld      a,(CardFlags)
 174+ AA58              ;                        rst     $08
 175+ AA58              ;                        DB      DISK_STRMEND
 176+ AA58              ;                        ld      a,(FileHandle)
 177+ AA58              ;                        call    fClose
 178+ AA58              ;                        ret
 179+ AA58              ;.token_error:           jp      .token_error
 180+ AA58              ;
 181+ AA58              ;
 182+ AA58              ;fOpenReadFile:          ld      (TargetSize),bc
 183+ AA58              ;                        call    disable_multiface
 184+ AA58              ;                        call    fOpen_read_exists
 185+ AA58              ;.SetupStream:           call    fStream_start
 186+ AA58              ;                        jr      c,.FileStreamError
 187+ AA58              ;                        ret
 188+ AA58              ;
 189+ AA58              ;.FileStreamError:       jp      .FileStreamError
 190+ AA58              ;
 191+ AA58              ; *******************************************************************************************************
 192+ AA58              ;	Function	Read bytes from the open file
 193+ AA58              ;	In:		ix  = address to read into
 194+ AA58              ;			bc  = amount to read
 195+ AA58              ;	ret:		carry set = error
 196+ AA58              ; *******************************************************************************************************
 197+ AA58 B7           fRead:                  or   	a             ; is it zero?
 198+ AA59 C8                                   ret  	z             ; if so return
 199+ AA5A E5                                   push    hl
 200+ AA5B DD E5 E1                             ld      hl,ix    	 ; load ix into hl and save hl for later
 201+ AA5E CF                                   rst	    $08
 202+ AA5F 9D                                   db	    F_READ
 203+ AA60 E1                                   pop	    hl
 204+ AA61 C9                                   ret
 205+ AA62
 206+ AA62              ; *******************************************************************************************************
 207+ AA62              ;	Function	Write bytes to the open file
 208+ AA62              ;	In:		ix  = address to read from
 209+ AA62              ;			bc  = amount to write
 210+ AA62              ;	ret:		carry set = error
 211+ AA62              ; *******************************************************************************************************
 212+ AA62 B7           fWrite:                 or   	a             ; is it zero?
 213+ AA63 C8                                   ret  	z             ; if so return
 214+ AA64 E5                                   push	hl
 215+ AA65 DD E5 E1                             ld      hl,ix
 216+ AA68 CF                                   rst	    $08
 217+ AA69 9E                                   db	    F_WRITE
 218+ AA6A E1                                   pop	    hl
 219+ AA6B C9                                   ret
 220+ AA6C
 221+ AA6C              ; *******************************************************************************************************
 222+ AA6C              ;	Function:	Close open file
 223+ AA6C              ;	In:		a  = handle
 224+ AA6C              ;	ret		a  = handle, 0 on error
 225+ AA6C              ; *******************************************************************************************************
 226+ AA6C B7           fClose:		            or   	a             ; is it zero?
 227+ AA6D C8                                   ret  	z             ; if so return
 228+ AA6E CF                                   rst	    $08
 229+ AA6F 9B                                   db	    F_CLOSE
 230+ AA70 C9                                   ret
 231+ AA71
 232+ AA71              ;fSeekHome:              push    bc,,de,,hl,,ix
 233+ AA71              ;                        ld      bc,0
 234+ AA71              ;                        ld      de,0
 235+ AA71              ;                        ld      l,0
 236+ AA71              ;                        call    fSeek
 237+ AA71              ;                        pop     bc,,de,,hl,,ix
 238+ AA71              ;                        ret
 239+ AA71              ;
 240+ AA71              ;fSeekForward256:        push    bc,,de,,hl,,ix
 241+ AA71              ;                        ld      bc,0
 242+ AA71              ;                        ld      de,256
 243+ AA71              ;                        ld      l,1
 244+ AA71              ;                        call    fSeek
 245+ AA71              ;                        pop     bc,,de,,hl,,ix
 246+ AA71              ;                        ret
 247+ AA71
 248+ AA71              ; *******************************************************************************************************
 249+ AA71              ;	Function	Read bytes from the open file
 250+ AA71              ;	In:		a   = file handle
 251+ AA71              ;			L   = Seek mode (0=start, 1=rel, 2=-rel)
 252+ AA71              ;			BCDE = bytes to seek
 253+ AA71              ;	ret:		BCDE = file pos from start
 254+ AA71              ; *******************************************************************************************************
 255+ AA71 DD E5 E5     fSeek:                  push	ix,,hl
 256+ AA74 CF                                   rst	    $08
 257+ AA75 9F                                   db	    F_SEEK
 258+ AA76 E1 DD E1                             pop	    ix,,hl
 259+ AA79 C9                                   ret
 260+ AA7A
 261+ AA7A              ; *******************************************************************************************************
 262+ AA7A              ; Init the file system
 263+ AA7A              ; *******************************************************************************************************
 264+ AA7A CD 37 AA     InitFileSystem:         call    GetDefaultDrive
 265+ AA7D C9                                   ret
 266+ AA7E
 267+ AA7E              ; *******************************************************************************************************
 268+ AA7E              ; Function:	Load a whole file into memory	(confirmed working on real machine)
 269+ AA7E              ; In:		hl = file data pointer
 270+ AA7E              ;		    ix = address to load to
 271+ AA7E              ;           bc = filelength
 272+ AA7E              ; *******************************************************************************************************
 273+ AA7E CD 37 AA     FileLoad:	            call    GetDefaultDrive
 274+ AA81 C5 D5 F5                             push	bc,,de,,af
 275+ AA84                                      ; get file size
 276+ AA84 C5 DD E5                             push	bc,,ix			; store size, load address,
 277+ AA87 E5 DD E1                             ld      ix,hl
 278+ AA8A 06 01                                ld      b,FA_READ		; mode open for reading
 279+ AA8C CD 4A AA                             call    fOpen
 280+ AA8F 38 17                                jr	    c,.error_opening; carry set? so there was an error opening and A=error code
 281+ AA91 FE 00                                cp	    0				; was file handle 0?
 282+ AA93 28 13                                jr	    z,.error_opening; of so there was an error opening.
 283+ AA95 DD E1 C1                             pop     bc,,ix          ; get load address back and size back
 284+ AA98 F5                                   push	af				; remember handle
 285+ AA99 CD 58 AA                             call	fRead			; read data from A to address IX of length BC
 286+ AA9C 38 0C                                jr	    c,.error_reading
 287+ AA9E F1                                   pop	    af			    ; get handle back
 288+ AA9F CD 6C AA                             call	fClose			; close file
 289+ AAA2 38 07                                jr	    c,.error_closing
 290+ AAA4 F1 D1 C1                             pop     bc,,de,,af      ; normal exit
 291+ AAA7 C9                                   ret
 292+ AAA8              ;
 293+ AAA8              ; On error, display error code an lock up so we can see it
 294+ AAA8              ;
 295+ AAA8 DD E1        .error_opening:         pop	ix
 296+ AAAA C1           .error_reading:		    pop	bc	; don't pop a, need error code
 297+ AAAB
 298+ AAAB              .error_closing:
 299+ AAAB C1           .NormalError:  	        pop	bc	; don't pop into A, return with error code
 300+ AAAC D1                                   pop	de
 301+ AAAD C1                                   pop	bc
 302+ AAAE C9                                   ret
 303+ AAAF
 304+ AAAF              ; *******************************************************************************************************
 305+ AAAF              ; Function:	Save a whole file into memory	(confirmed working on real machine)
 306+ AAAF              ; In:		hl = file name
 307+ AAAF              ;		    ix = address to save from
 308+ AAAF              ;		    bc = size
 309+ AAAF              ; *******************************************************************************************************
 310+ AAAF CD 37 AA     FileSave:	            call    GetDefaultDrive		; need to do this each time?!?!?
 311+ AAB2 C5 DD E5                             push	bc,,ix   			; store size& save address
 312+ AAB5 E5 DD E1                             ld      ix,hl               ; get name into ix
 313+ AAB8 06 0C                                ld      b,FA_OVERWRITE		; mode open for writing
 314+ AABA CD 4A AA                             call    fOpen
 315+ AABD 38 12                                jr	    c,.error_opening	; carry set? so there was an error opening and A=error code
 316+ AABF FE 00                                cp	    0			        ; was file handle 0?
 317+ AAC1 28 0E                                jr	    z,.error_opening	; of so there was an error opening.
 318+ AAC3 DD E1 C1                             pop	    bc,,ix			    ; get lenght and save address back
 319+ AAC6 F5                                   push	af			        ; remember handle
 320+ AAC7 CD 62 AA                             call	fWrite			    ; read data from A to address IX of length BC
 321+ AACA 38 04                                jr	c,.error
 322+ AACC F1                                   pop	af			            ; get handle back
 323+ AACD CD 6C AA                             call	fClose			    ; close file
 324+ AAD0 C9           .error:                 ret
 325+ AAD1              ;
 326+ AAD1              ; On error, display error code an lock up so we can see it
 327+ AAD1              ;
 328+ AAD1 DD E1 C1     .error_opening:         pop	bc,,ix                  ; don't pop a, need error code
 329+ AAD4 C9                                   ret
 330+ AAD5
 331+ AAD5 00           DefaultDrive:	        DB	0
 332+ AAD6 00           FileHandle:             DB  0
 333+ AAD7 00           CardFlags               DB  0
 334+ AAD8 00 00        TargetSize              DW  0
 335+ AADA 00 00        FileStreamPort          DW  0
 336+ AADC 00 00 00...  FileBuffer              DS  512                     ; block of data
 337+ ACDC 00           FilereadsPerformed      DB  0
 338+ ACDD 00 00        FilemapBlockCount       DW  0
 339+ ACDF 00 00        FilemapBufferPointer    DW  0
 340+ ACE1 00 00        FilemapBufferLast       DW  0
 341+ ACE3 00 00 00...  FilemapBuffer           DS  FILEMAP_BLOCK_SIZE * FILEMAP_SIZE        ; expecting 60 to be overkill as most should be 1
 342+ ADA3
# file closed: ./Hardware/drive_access.asm
1131  ADA3
1132  ADA3                  INCLUDE "./Menus/common_menu.asm"
# file opened: ./Menus/common_menu.asm
   1+ ADA3 43 4F 4D 4D  txt_commander 			DB "COMMANDER",0
   1+ ADA7 41 4E 44 45
   1+ ADAB 52 00
   2+ ADAD 49 4E 56 45  txt_inventory 			DB "INVENTORY",0
   2+ ADB1 4E 54 4F 52
   2+ ADB5 59 00
   3+ ADB7 50 72 65 73  txt_present_system		DB "Present System   :",0
   3+ ADBB 65 6E 74 20
   3+ ADBF 53 79 73 74
   3+ ADC3 65 6D 20 20
   3+ ADC7 20 3A 00
   4+ ADCA 48 79 70 65  txt_hyperspace_system	DB "Hyperspace System:",0
   4+ ADCE 72 73 70 61
   4+ ADD2 63 65 20 53
   4+ ADD6 79 73 74 65
   4+ ADDA 6D 3A 00
   5+ ADDD 43 6F 6E 64  txt_condition			DB "Condition   :",0
   5+ ADE1 69 74 69 6F
   5+ ADE5 6E 20 20 20
   5+ ADE9 3A 00
   6+ ADEB 46 75 65 6C  txt_fuel				DB "Fuel        :",0
   6+ ADEF 20 20 20 20
   6+ ADF3 20 20 20 20
   6+ ADF7 3A 00
   7+ ADF9 43 61 73 68  txt_cash				DB "Cash        :",0
   7+ ADFD 20 20 20 20
   7+ AE01 20 20 20 20
   7+ AE05 3A 00
   8+ AE07 4C 65 67 61  txt_legal_status		DB "Legal Status:",0
   8+ AE0B 6C 20 53 74
   8+ AE0F 61 74 75 73
   8+ AE13 3A 00
   9+ AE15 52 61 74 69  txt_rating				DB "Rating      :",0
   9+ AE19 6E 67 20 20
   9+ AE1D 20 20 20 20
   9+ AE21 3A 00
  10+ AE23 45 51 55 49  txt_equipment			DB "EQUIPMENT:",0
  10+ AE27 50 4D 45 4E
  10+ AE2B 54 3A 00
  11+ AE2E
  12+ AE2E 30 30 2E 30  txt_fuel_level			DB "00.0 Light Years",0
  12+ AE32 20 4C 69 67
  12+ AE36 68 74 20 59
  12+ AE3A 65 61 72 73
  12+ AE3E 00
  13+ AE3F 58 58 58 58  txt_cash_amount			DB "XXXXXXXXXX",0
  13+ AE43 58 58 58 58
  13+ AE47 58 58 00
  14+ AE4A 2E           txt_cash_decimal        DB "."
  15+ AE4B 58 20 43 72  txt_cash_fraction       DB "X Cr",0
  15+ AE4F 00
  16+ AE50
  17+ AE50              txt_status_colour		equ $FF
  18+ AE50
  19+ AE50              ;;DEFUNCTprint_boiler_text_l2:
  20+ AE50              ;;DEFUNCT; ">print_boilder_text hl = text structure, b = message count"
  21+ AE50              ;;DEFUNCTBoilerTextLoop:
  22+ AE50              ;;DEFUNCT	push		bc			; Save Message Count loop value
  23+ AE50              ;;DEFUNCT	ld			c,(hl)		; Get Row into b
  24+ AE50              ;;DEFUNCT	inc			hl
  25+ AE50              ;;DEFUNCT	ld			b,(hl)		; Get Col into b
  26+ AE50              ;;DEFUNCT	inc			hl
  27+ AE50              ;;DEFUNCT	ld			e,(hl)		; Get text address Lo into E
  28+ AE50              ;;DEFUNCT	inc			hl
  29+ AE50              ;;DEFUNCT	ld			d,(hl)		; Get text address Hi into E
  30+ AE50              ;;DEFUNCT	inc			hl
  31+ AE50              ;;DEFUNCT	push		hl			; Save present HL to stack as this is the address for the next message
  32+ AE50              ;;DEFUNCT	ex			de,hl		; now hl = address of text data
  33+ AE50              ;;DEFUNCT	ld			e,txt_status_colour
  34+ AE50              ;;DEFUNCT    MMUSelectLayer2
  35+ AE50              ;;DEFUNCT	call		l1_print_at
  36+ AE50              ;;DEFUNCT	pop			hl
  37+ AE50              ;;DEFUNCT	pop			bc
  38+ AE50              ;;DEFUNCT	djnz		BoilerTextLoop
  39+ AE50              ;;DEFUNCT	ret
  40+ AE50
  41+ AE50
  42+ AE50              ;:DEFUNCT print_boiler_text:
  43+ AE50              ;:DEFUNCT ; ">print_boilder_text hl = text structure, b = message count"
  44+ AE50              ;:DEFUNCT .BoilerTextLoop:
  45+ AE50              ;:DEFUNCT 	push		bc			; Save Message Count loop value
  46+ AE50              ;:DEFUNCT 	ld			c,(hl)		; Get Row into b
  47+ AE50              ;:DEFUNCT 	inc			hl
  48+ AE50              ;:DEFUNCT 	ld			b,(hl)		; Get Col into b
  49+ AE50              ;:DEFUNCT 	inc			hl
  50+ AE50              ;:DEFUNCT 	ld			e,(hl)		; Get text address Lo into E
  51+ AE50              ;:DEFUNCT 	inc			hl
  52+ AE50              ;:DEFUNCT 	ld			d,(hl)		; Get text address Hi into E
  53+ AE50              ;:DEFUNCT 	inc			hl
  54+ AE50              ;:DEFUNCT 	push		hl			; Save present HL to stack as this is the address for the next message
  55+ AE50              ;:DEFUNCT 	ex			de,hl		; now hl = address of text data
  56+ AE50              ;:DEFUNCT 	ld			e,txt_status_colour
  57+ AE50              ;:DEFUNCT 	push		bc
  58+ AE50              ;:DEFUNCT 	pop			de
  59+ AE50              ;:DEFUNCT 	call		l1_print_at
  60+ AE50              ;:DEFUNCT 	pop			hl
  61+ AE50              ;:DEFUNCT 	pop			bc
  62+ AE50              ;:DEFUNCT 	djnz		.BoilerTextLoop
  63+ AE50              ;:DEFUNCT 	ret
  64+ AE50
  65+ AE50              ;;DEFUNCTGetFuelLevel:           INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
  66+ AE50
  67+ AE50              ;;DEFUNCTGetCash:                ld      hl,(Cash)
  68+ AE50              ;;DEFUNCT                        ex      de,hl
  69+ AE50              ;;DEFUNCT                        ld      ix,(Cash+2)
  70+ AE50              ;;DEFUNCT                        ld		iy,txt_cash_amount
  71+ AE50              ;;DEFUNCT                        call 	DispDEIXtoIY	; This will write out with 0 termination after last digit
  72+ AE50              ;;DEFUNCT.ShiftDecimalDigit:     ld		a,(IY+0)				;Push last digit to post decimal
  73+ AE50              ;;DEFUNCT                        ld		(txt_cash_fraction),a
  74+ AE50              ;;DEFUNCT.UpdateInteger:         ld		hl,txt_cash_amount+1	; Now was there only 1 digit
  75+ AE50              ;;DEFUNCT                        ld		a,(hl)					; if so we leave it alone so its "0.0"
  76+ AE50              ;;DEFUNCT                        cp		0
  77+ AE50              ;;DEFUNCT                        ret		z
  78+ AE50              ;;DEFUNCT                        ld		(IY),0					; Else we erase last digit as it went to fraction
  79+ AE50              ;;DEFUNCT                        ret
  80+ AE50
# file closed: ./Menus/common_menu.asm
1133  AE50              MainNonBankedCodeEnd:
1134  AE50                  DISPLAY "Main Non Banked Code Ends at ",$
1135  AE50
1136  AE50                  org $B000
1137  B000                  DISPLAY "Vector Table Starts at ",$
1138  B000              VectorTable:
1139  B000 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
1139  B004 B1 B1 B1 B1
1139  B008 B1 B1 B1 B1
1139  B00C B1 B1 B1 B1
1139  B010 B1 B1 B1 B1
1139  B014 B1 B1 B1 B1
1139  B018 B1 B1 B1 B1
1139  B01C B1 B1 B1 B1
1140  B020 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
1140  B024 B1 B1 B1 B1
1140  B028 B1 B1 B1 B1
1140  B02C B1 B1 B1 B1
1140  B030 B1 B1 B1 B1
1140  B034 B1 B1 B1 B1
1140  B038 B1 B1 B1 B1
1140  B03C B1 B1 B1 B1
1141  B040 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
1141  B044 B1 B1 B1 B1
1141  B048 B1 B1 B1 B1
1141  B04C B1 B1 B1 B1
1141  B050 B1 B1 B1 B1
1141  B054 B1 B1 B1 B1
1141  B058 B1 B1 B1 B1
1141  B05C B1 B1 B1 B1
1142  B060 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
1142  B064 B1 B1 B1 B1
1142  B068 B1 B1 B1 B1
1142  B06C B1 B1 B1 B1
1142  B070 B1 B1 B1 B1
1142  B074 B1 B1 B1 B1
1142  B078 B1 B1 B1 B1
1142  B07C B1 B1 B1 B1
1143  B080 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
1143  B084 B1 B1 B1 B1
1143  B088 B1 B1 B1 B1
1143  B08C B1 B1 B1 B1
1143  B090 B1 B1 B1 B1
1143  B094 B1 B1 B1 B1
1143  B098 B1 B1 B1 B1
1143  B09C B1 B1 B1 B1
1144  B0A0 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
1144  B0A4 B1 B1 B1 B1
1144  B0A8 B1 B1 B1 B1
1144  B0AC B1 B1 B1 B1
1144  B0B0 B1 B1 B1 B1
1144  B0B4 B1 B1 B1 B1
1144  B0B8 B1 B1 B1 B1
1144  B0BC B1 B1 B1 B1
1145  B0C0 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
1145  B0C4 B1 B1 B1 B1
1145  B0C8 B1 B1 B1 B1
1145  B0CC B1 B1 B1 B1
1145  B0D0 B1 B1 B1 B1
1145  B0D4 B1 B1 B1 B1
1145  B0D8 B1 B1 B1 B1
1145  B0DC B1 B1 B1 B1
1146  B0E0 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
1146  B0E4 B1 B1 B1 B1
1146  B0E8 B1 B1 B1 B1
1146  B0EC B1 B1 B1 B1
1146  B0F0 B1 B1 B1 B1
1146  B0F4 B1 B1 B1 B1
1146  B0F8 B1 B1 B1 B1
1146  B0FC B1 B1 B1 B1
1147  B100 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine
1148  B104                              ;(The last DW could just be a DB as it needs to b 257 bytes but its cleaner for source code)
1149  B104
1150  B104 60 00        IR_COUNT        dw  $0060
1151  B106
1152  B106 00           LAST_DELTA      db  0
1153  B107 00           SavedMMU6       db  0
1154  B108 00           SavedMMU7       db  0
1155  B109              SoundInterrupt      EQU IM2Sound
1156  B109              DanubeInterrupt     EQU IM2PlayDanube
1157  B109              AttractInterrrupt   EQU IM2AttractMode
1158  B109
1159  B109
1160  B109              StartOfInterruptHandler:
1161  B109                  DISPLAY "Non Banked Code Ends At", StartOfInterruptHandler
1162  B109
1163  B109                              ; NOTE play then equeue simplifies ligic, more chance slot free
1164  B109                              org $B1B1
1165  B1B1                  DISPLAY "Interrupt Handler Starts at",$
1166  B1B1              ; keeping the handler to a minimal size in order to make best use of
1167  B1B1              ; non pageable memory
1168  B1B1              IM2Routine:             IFDEF INTERRUPT_BLOCKER
1169  B1B1 ~                                            DISPLAY "Interrupt Blocker Enabled"
1170  B1B1 ~                                            ei
1171  B1B1 ~                                            reti
1172  B1B1                                      ELSE
1173  B1B1                                              DISPLAY "Interrupt Blocker Disabled"
1174  B1B1                                      ENDIF
1175  B1B1 F5 C5 D5 E5                          push    af,,bc,,de,,hl,,ix,,iy
1175  B1B5 DD E5 FD E5
1176  B1B9 08                                   ex      af,af'
1177  B1BA D9                                   exx
1178  B1BB F5 C5 D5 E5                          push    af,,bc,,de,,hl
1179  B1BF 21 9A 7E                             ld      hl,InterruptCounter
1180  B1C2 34                                   inc     (hl)                        ; cycles each interrupt
1181  B1C3                                      ;break
1182  B1C3 CD D7 B1     IM2SoundHandler:        call    IM2Sound                    ; This is a self modifying code address to change the actual sound vector if we are doing special music e.g. intro or docking
1183  B1C6 E1 D1 C1 F1                          pop    af,,bc,,de,,hl
1184  B1CA 08                                   ex      af,af'
1185  B1CB D9                                   exx
1186  B1CC FD E1 DD E1                          pop     af,,bc,,de,,hl,,ix,,iy
1186  B1D0 E1 D1 C1 F1
1187  B1D4 FB           .IMFinishup:            ei
1188  B1D5 ED 4D                                reti
1189  B1D7                  DISPLAY "Interrupt Handler Ends at",$
1190  B1D7              EndOfNonBanked:
1191  B1D7                  DISPLAY "Non Banked Code + Interrupt Handler Ends At", EndOfNonBanked
1192  B1D7
1193  B1D7
1194  B1D7              SaveMMU6:               MACRO
1195  B1D7 ~                                    GetNextReg  MMU_SLOT_6_REGISTER
1196  B1D7 ~                                    ld      (SavedMMU6),a
1197  B1D7                                      ENDM
1198  B1D7
1199  B1D7              RestoreMMU6:            MACRO
1200  B1D7 ~                                    ld      a,(SavedMMU6)               ; now restore up post interrupt
1201  B1D7 ~                                    nextreg MMU_SLOT_6_REGISTER,a       ; Restore MMU7
1202  B1D7                                      ENDM
1203  B1D7
1204  B1D7              SaveMMU7:               MACRO
1205  B1D7 ~                                    GetNextReg  MMU_SLOT_7_REGISTER
1206  B1D7 ~                                    ld      (SavedMMU7),a
1207  B1D7                                      ENDM
1208  B1D7
1209  B1D7              RestoreMMU7:            MACRO
1210  B1D7 ~                                    ld      a,(SavedMMU7)               ; now restore up post interrupt
1211  B1D7 ~                                    nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
1212  B1D7                                      ENDM
1213  B1D7
1214  B1D7              IM2Sound:               SaveMMU7
1214  B1D7             >                        GetNextReg  MMU_SLOT_7_REGISTER
1214  B1D7 01 3B 24    >            ld bc,$243B
1214  B1DA 3E 57       >            ld a,MMU_SLOT_7_REGISTER
1214  B1DC ED 79       >            out (c),a
1214  B1DE 04          >            inc b
1214  B1DF ED 78       >            in a,(c)
1214  B1E1 32 08 B1    >                        ld      (SavedMMU7),a
1215  B1E4                                      MMUSelectSound
1215  B1E4 ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
1216  B1E8                                      ; This is a self modifying code address to change the
1217  B1E8                                      ; actual sound vector if we are doing special music
1218  B1E8                                      ; e.g. intro or docking
1219  B1E8 CD 00 E0     .IM2SoundHandler:       call    SoundInterruptHandler       ; this does the work
1220  B1EB              .DoneInterrupt:         RestoreMMU7
1220  B1EB 3A 08 B1    >                        ld      a,(SavedMMU7)               ; now restore up post interrupt
1220  B1EE ED 92 57    >                        nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
1221  B1F1 C9                                   ret
1222  B1F2
1223  B1F2
1224  B1F2              IM2PlayDanube:          SaveMMU7
1224  B1F2             >                        GetNextReg  MMU_SLOT_7_REGISTER
1224  B1F2 01 3B 24    >            ld bc,$243B
1224  B1F5 3E 57       >            ld a,MMU_SLOT_7_REGISTER
1224  B1F7 ED 79       >            out (c),a
1224  B1F9 04          >            inc b
1224  B1FA ED 78       >            in a,(c)
1224  B1FC 32 08 B1    >                        ld      (SavedMMU7),a
1225  B1FF                                      MMUSelectSound
1225  B1FF ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
1226  B203                                      ; This is a self modifying code address to change the
1227  B203                                      ; actual sound vector if we are doing special music
1228  B203                                      ; e.g. intro or docking
1229  B203 CD 1B E4     .IM2SoundHandler:       call    PlayDanube                  ; this does the work
1230  B206              .DoneInterrupt:         RestoreMMU7
1230  B206 3A 08 B1    >                        ld      a,(SavedMMU7)               ; now restore up post interrupt
1230  B209 ED 92 57    >                        nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
1231  B20C C9                                   ret
1232  B20D
1233  B20D              IM2AttractMode:         ;break
1234  B20D                                  IFDEF SKIPATTRACTMUSIC
1235  B20D ~                                    DISPLAY "Attract mode Music disabled"
1236  B20D                                  ELSE
1237  B20D                                      DISPLAY "Attract mode Music enabled"
1238  B20D CD F2 B1                             call    IM2PlayDanube
1239  B210                                  ENDIF
1240  B210                                  IFDEF SKIPATTRACTGRAPHICS
1241  B210 ~                                    DISPLAY "Attract mode graphics disabled"
1242  B210                                  ELSE
1243  B210                                      DISPLAY "Attract mode graphics enabled"
1244  B210                                      SaveMMU6
1244  B210             >                        GetNextReg  MMU_SLOT_6_REGISTER
1244  B210 01 3B 24    >            ld bc,$243B
1244  B213 3E 56       >            ld a,MMU_SLOT_6_REGISTER
1244  B215 ED 79       >            out (c),a
1244  B217 04          >            inc b
1244  B218 ED 78       >            in a,(c)
1244  B21A 32 07 B1    >                        ld      (SavedMMU6),a
1245  B21D                                      SaveMMU7
1245  B21D             >                        GetNextReg  MMU_SLOT_7_REGISTER
1245  B21D 01 3B 24    >            ld bc,$243B
1245  B220 3E 57       >            ld a,MMU_SLOT_7_REGISTER
1245  B222 ED 79       >            out (c),a
1245  B224 04          >            inc b
1245  B225 ED 78       >            in a,(c)
1245  B227 32 08 B1    >                        ld      (SavedMMU7),a
1246  B22A                                      ;break
1247  B22A CD 10 78                             call    AttractModeUpdate
1248  B22D                                      RestoreMMU6
1248  B22D 3A 07 B1    >                        ld      a,(SavedMMU6)               ; now restore up post interrupt
1248  B230 ED 92 56    >                        nextreg MMU_SLOT_6_REGISTER,a       ; Restore MMU7
1249  B233                                      RestoreMMU7
1249  B233 3A 08 B1    >                        ld      a,(SavedMMU7)               ; now restore up post interrupt
1249  B236 ED 92 57    >                        nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
1250  B239                                  ENDIF
1251  B239 C9                                   ret
1252  B23A
1253  B23A              ; ARCHIVED INCLUDE "Menus/draw_fuel_and_crosshair.asm"
1254  B23A              ;INCLUDE "./title_page.asm"
1255  B23A
1256  B23A              ; Blocks dependent on variables in Universe Banks
1257  B23A              ; Bank 49
1258  B23A              ;    SEG RESETUNIVSEG
1259  B23A              ;seg     CODE_SEG,       4:              $0000,       $8000                 ; flat address
1260  B23A              ;seg     RESETUNIVSEG,   BankResetUniv:  StartOfBank, ResetUniverseAddr
1261  B23A
1262  B23A
1263  B23A
1264  B23A              ;	ORG ResetUniverseAddr
1265  B23A              ;INCLUDE "./GameEngine/resetUniverse.asm"
1266  B23A              ; Bank 50  ------------------------------------------------------------------------------------------------------------------------
1267  B23A                  SLOT    MenuShrChtAddr
1268  B23A                  PAGE    BankMenuShrCht
1269  B23A              	ORG     MenuShrChtAddr,BankMenuShrCht
1270  C000                  INCLUDE "./Menus/short_range_chart_menu.asm"
# file opened: ./Menus/short_range_chart_menu.asm
   1+ C000
   2+ C000 53 68 6F 72  short_range_page_marker  DB "ShortRange  PG50"
   2+ C004 74 52 61 6E
   2+ C008 67 65 20 20
   2+ C00C 50 47 35 30
   3+ C010
   4+ C010 30 02 DD 8D  short_range_boiler_text	DW $0230,TextBuffer
   5+ C014              short_range_header		equ 12
   6+ C014              src_xy_centre			equ $6080
   7+ C014              src_x_centre			equ $80
   8+ C014              src_y_centre			equ $60
   9+ C014              local_chart_star_colour	equ 216
  10+ C014 00 00        local_dx				dw 0
  11+ C016 00 00        local_dy				dw 0
  12+ C018              local_max_range_x		equ 20
  13+ C018              local_max_range_y		equ $26
  14+ C018 00           local_name_row			db	0
  15+ C019 00           local_name_col			db	0
  16+ C01A              local_label_shift_x		equ	3
  17+ C01A              local_label_shift_y		equ	5
  18+ C01A
  19+ C01A 44 69 73 74  src_distance            DB "Distance: "
  19+ C01E 61 6E 63 65
  19+ C022 3A 20
  20+ C024 30 30 30     src_dist_amount         DB "000"
  21+ C027 2E           src_decimal             DB "."
  22+ C028 30           src_fraction            DB "0"
  23+ C029 20 4C 69 67  src_dis_ly              DB " Light Years",0
  23+ C02D 68 74 20 59
  23+ C031 65 61 72 73
  23+ C035 00
  24+ C036 20 20 30 2E  src_default_dist        DB "  0.0"
  24+ C03A 30
  25+ C03B
  26+ C03B 00 00 00...  src_distance_val        DS  6
  27+ C041              src_fill_buffer_len     EQU 32
  28+ C041              src_fill_buffer_size    EQU 4 * src_fill_buffer_len                          ; up to 32 labels topx topy lengthx spare
  29+ C041                          DISPLAY "TODO: space for occupied cells may mvoe to bit flags"
  30+ C041 00 00 00...  src_printed_text        DS  src_fill_buffer_size                             ; space for occupied cells may move to bit flags later TODO
  31+ C0C1 00           src_buffer_size         DB  0
  32+ C0C2              ;----------------------------------------------------------------------------------------------------------------------------------
  33+ C0C2              SRM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C0C2
   2++C0C2              ;">print_boilder_text hl = text structure, b = message count"
   3++C0C2 C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C0C3 4E                                   ld			c,(hl)		; Get Row into b
   5++C0C4 23                                   inc			hl
   6++C0C5 46                                   ld			b,(hl)		; Get Col into b
   7++C0C6 23                                   inc			hl
   8++C0C7 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C0C8 23                                   inc			hl
  10++C0C9 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C0CA 23                                   inc			hl
  12++C0CB E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C0CC EB                                   ex			de,hl		; now hl = address of text data
  14++C0CD 1E FF                                ld			e,txt_status_colour
  15++C0CF C5                                   push		bc
  16++C0D0 D1                                   pop			de
  17++C0D1                                      MMUSelectLayer1
  17++C0D1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C0D5 CD D7 E0                             call		l1_print_at
  19++C0D8 E1                                   pop			hl
  20++C0D9 C1                                   pop			bc
  21++C0DA 10 E6                                djnz		.BoilerTextLoop
  22++C0DC C9                                   ret
  23++C0DD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  34+ C0DD              ;----------------------------------------------------------------------------------------------------------------------------------
  35+ C0DD              SRM_draw_chart_circle_and_crosshair:
  36+ C0DD ED 4B 3E 7F                          ld		bc,(PresentSystemX)				; bc = present system
  37+ C0E1 01 80 60                             ld		bc,src_xy_centre					; must be ordered x y in data
  38+ C0E4                                      MMUSelectSpriteBank
  38+ C0E4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  39+ C0E8 CD F5 E0                             call	sprite_local_cursor
  40+ C0EB 3A 00 84                             ld		a,(Fuel)
  41+ C0EE 57                                   ld		d,a
  42+ C0EF 1E FF                                ld		e,$FF
  43+ C0F1                                      MMUSelectLayer2
  43+ C0F1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  44+ C0F5 CD C6 EB                             call	l2_draw_circle
  45+ C0F8 C9                                   ret
  46+ C0F9                                                      DISPLAY "TODO:  move cursor code"
  47+ C0F9              ; TODO MOVE CURSOR CODE
  48+ C0F9              ;----------------------------------------------------------------------------------------------------------------------------------
  49+ C0F9              SRM_draw_hyperspace_cross_hair:
  50+ C0F9 ED 4B 40 7F                          ld		bc,(TargetSystemX)              ; bc = selected jump
  51+ C0FD ED 5B 3E 7F                          ld		de,(PresentSystemX)
  52+ C101 0E 80                                ld		c,src_x_centre
  53+ C103 06 60                                ld		b,src_y_centre
  54+ C105                                      MMUSelectSpriteBank
  54+ C105 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  55+ C109 CD FD E0                             call	sprite_local_hyper_cursor
  56+ C10C C9                                   ret
  57+ C10D              ;----------------------------------------------------------------------------------------------------------------------------------
  58+ C10D 3A 2B 7F     src_get_name:           ld      a,(Galaxy)
  59+ C110                                      MMUSelectGalaxyA
  59+ C110 ED 92 57    >                     nextreg GalaxyDataMMU,     a
  60+ C113 ED 4B 40 7F                          ld      bc,(TargetSystemX)
  61+ C117 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
  62+ C11B CD 64 FC                             call    galaxy_system_under_cursor
  63+ C11E FE 00                                cp      0
  64+ C120 C8                                   ret     z
  65+ C121 CD 82 F6                             call	GetDigramWorkingSeed
  66+ C124 21 A9 8E                             ld		hl,name_expanded
  67+ C127 CD FE 8D                             call	CapitaliseString
  68+ C12A 21 A9 8E                             ld		hl, name_expanded
  69+ C12D 3E FF                                ld      a,$FF
  70+ C12F C9                                   ret
  71+ C130              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ C130              SRM_update_hyperspace_cross_hair:
  73+ C130 ED 4B 40 7F                          ld		bc,(TargetSystemX)              ; bc = selected jump
  74+ C134 ED 5B 3E 7F                          ld		de,(PresentSystemX)
  75+ C138 79                                   ld		a,c                             ; a = target x pos
  76+ C139 93                                   sub		e                               ; a = target x - present x
  77+ C13A F2 4B C1                             jp      p,.NoFlipX                      ; if > 0 skip next bit
  78+ C13D ED 44                                neg                                     ; c = a = abs a * 4
  79+ C13F CB 27                                sla		a                               ; .
  80+ C141 CB 27                                sla		a                               ; .
  81+ C143 4F                                   ld      c,a                             ;  .
  82+ C144 3E 80                                ld      a,src_x_centre                  ; c = a = centre screen - c
  83+ C146 91                                   sub     c                               ; .
  84+ C147 4F                                   ld      c,a                             ; .
  85+ C148 C3 52 C1                             jp      .fixY                           ;. now do Y
  86+ C14B CB 27        .NoFlipX:               sla		a
  87+ C14D CB 27                                sla		a
  88+ C14F C6 80                                add		a,src_x_centre
  89+ C151 4F                                   ld      c,a
  90+ C152 78           .fixY:                  ld		a,b                             ; for Y its * 2
  91+ C153 92                                   sub		d
  92+ C154 F2 63 C1                             jp      p,.NoFlipY
  93+ C157 ED 44                                neg
  94+ C159 CB 27                                sla     a
  95+ C15B 47                                   ld      b,a
  96+ C15C 3E 60                                ld      a,src_y_centre
  97+ C15E 90                                   sub     b
  98+ C15F 47                                   ld      b,a
  99+ C160 C3 68 C1                             jp      .RedrawSprite
 100+ C163 CB 27        .NoFlipY                sla		a
 101+ C165 C6 60                                add		a,src_y_centre
 102+ C167 47                                   ld		b,a
 103+ C168              .RedrawSprite:          MMUSelectSpriteBank
 103+ C168 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 104+ C16C CD D0 E0                             call	sprite_lhc_move
 105+ C16F CD A1 C1                             call    src_name_current
 106+ C172 C9                                   ret
 107+ C173
 108+ C173 26 08        src_clear_name_area:    ld      h,8
 109+ C175 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 110+ C178 01 0A A8                             ld      bc,$A80A
 111+ C17B E5           .ClearLoop:             push    hl
 112+ C17C D5                                   push    de
 113+ C17D C5                                   push    bc
 114+ C17E                                      MMUSelectLayer2
 114+ C17E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 115+ C182 CD 84 E4                             call	l2_draw_horz_line
 116+ C185 C1                                   pop     bc
 117+ C186 D1                                   pop     de
 118+ C187 E1                                   pop     hl
 119+ C188 04                                   inc     b
 120+ C189 25                                   dec     h
 121+ C18A 20 EF                                jr      nz,.ClearLoop
 122+ C18C C9                                   ret
 123+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 124+ C18D 3A 2B 7F     src_system_undercursor: ld      a,(Galaxy)
 125+ C190                                      MMUSelectGalaxyA
 125+ C190 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 126+ C193 ED 4B 40 7F                          ld      bc,(TargetSystemX)
 127+ C197 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 128+ C19B CD 64 FC                             call    galaxy_system_under_cursor
 129+ C19E FE 00                                cp      0
 130+ C1A0 C8                                   ret     z
 131+ C1A1 CD 0D C1     src_name_current:       call    src_get_name
 132+ C1A4 FE 00                                cp      0
 133+ C1A6 C8                                   ret     z
 134+ C1A7 E5                                   push    hl
 135+ C1A8 F5                                   push    af
 136+ C1A9 CD 73 C1                             call    src_clear_name_area
 137+ C1AC F1                                   pop     af
 138+ C1AD E1                                   pop     hl
 139+ C1AE 01 0A A8                             ld      bc,$A80A
 140+ C1B1 1E FF                                ld		e,$FF
 141+ C1B3                                      MMUSelectLayer2
 141+ C1B3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 142+ C1B7 CD BE E3                             call	l2_print_7at
 143+ C1BA CD CD C1                             call    src_calc_distance
 144+ C1BD 21 1A C0                             ld      hl,src_distance
 145+ C1C0 01 0A B0                             ld      bc,$B00A
 146+ C1C3 1E FF                                ld		e,$FF
 147+ C1C5                                      MMUSelectLayer2
 147+ C1C5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 148+ C1C9 CD BE E3                             call	l2_print_7at
 149+ C1CC C9                                   ret
 150+ C1CD              ;----------------------------------------------------------------------------------------------------------------------------------
 151+ C1CD 3A 2B 7F     src_calc_distance:      ld      a,(Galaxy)                                      ; Default in 0 distance
 152+ C1D0                                      MMUSelectGalaxyA
 152+ C1D0 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 153+ C1D3 11 24 C0                             ld      de,src_dist_amount
 154+ C1D6 21 36 C0                             ld      hl,src_default_dist
 155+ C1D9 ED A0                                ldi
 156+ C1DB ED A0                                ldi
 157+ C1DD ED A0                                ldi
 158+ C1DF ED A0                                ldi
 159+ C1E1 ED A0                                ldi
 160+ C1E3 ED 4B 3E 7F                          ld      bc,(PresentSystemX)
 161+ C1E7 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 162+ C1EB ED 4B 40 7F                          ld      bc,(TargetSystemX)
 163+ C1EF ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 164+ C1F3 CD F7 FB                             call    galaxy_find_distance                            ; get distance into HL
 165+ C1F6 DD 2A 60 7F                          ld      ix,(Distance)
 166+ C1FA 11 00 00                             ld      de,0
 167+ C1FD FD 21 3B C0                          ld      iy,src_distance_val
 168+ C201 CD D9 99                             call    DispDEIXtoIY                                    ; use DEIX as distance and write to string at location IY
 169+ C204 FD E5                                push    iy
 170+ C206 E1                                   pop     hl                                              ; hl = iy
 171+ C207 11 3B C0                             ld      de,src_distance_val
 172+ C20A 7E                                   ld		a,(hl)				                            ;Push last digit to post decimal
 173+ C20B 32 28 C0                             ld		(src_fraction),a
 174+ C20E 2B                                   dec     hl
 175+ C20F CD 42 98                             call    compare16HLDE
 176+ C212 38 18                                jr      c,.done_number
 177+ C214 7E                                   ld      a,(hl)
 178+ C215 32 26 C0                             ld      (src_dist_amount+2),a
 179+ C218 2B                                   dec     hl
 180+ C219 CD 42 98                             call    compare16HLDE
 181+ C21C 38 0E                                jr      c,.done_number
 182+ C21E 7E                                   ld      a,(hl)
 183+ C21F 32 25 C0                             ld      (src_dist_amount+1),a
 184+ C222 2B                                   dec     hl
 185+ C223 CD 42 98                             call    compare16HLDE
 186+ C226 38 04                                jr      c,.done_number
 187+ C228 7E                                   ld      a,(hl)
 188+ C229 32 24 C0                             ld      (src_dist_amount),a
 189+ C22C C9           .done_number:           ret
 190+ C22D
 191+ C22D 00 00        PosScan1                DW      0
 192+ C22F 00 00        PosScan2                DW      0
 193+ C231              ; bc = row col, d = xlength e = y length
 194+ C231              ; Check logic simplies to , if 1 = bc and 2 = de:
 195+ C231              ; 12   X1            X2    OK         2 LT X1
 196+ C231              ; 1    X1  2         X2    FAIL       1 LT X1 && 2 GT X1 && 2 LT X2
 197+ C231              ;      X1  12        X2    FAIL       1 GT X1 && 1 LT X2 && 2 GT X1 && 2 LT X2
 198+ C231              ;      X1  1         X2 2  FAIL       1 GT X1 && 1 LT X2 && 2 GT X2
 199+ C231              ;      X1            X2 12 OK         1 GT X2
 200+ C231 16 07        FreeSlotCheck:          ld      d,7
 201+ C233 ED 30                                mul
 202+ C235 79                                   ld      a,c
 203+ C236 83                                   add     e
 204+ C237 30 02                                jr      nc,.NoOverflow
 205+ C239 3E FF        .Overflow:              ld      a,$FF
 206+ C23B 5F           .NoOverflow:            ld      e,a                     ; e now equals max length in pixels
 207+ C23C 78                                   ld      a,b
 208+ C23D C6 08                                add     8
 209+ C23F 57                                   ld      d,a                     ; e = max height
 210+ C240 ED 43 2D C2                          ld      (PosScan1),bc
 211+ C244 ED 53 2F C2                          ld      (PosScan2),de
 212+ C248 DD 21 41 C0  .CheckBoxes:            ld      ix,src_printed_text
 213+ C24C 3A C1 C0                             ld      a,(src_buffer_size)
 214+ C24F FE 00                                cp      0
 215+ C251 28 3C                                jr      z,.SafeToPrint
 216+ C253 60                                   ld      h,b                     ; h will substite for row b as b is used in dnjz
 217+ C254 47                                   ld      b,a
 218+ C255 DD 7E 02     .CheckBoxLoop:          ld      a,(ix+2)
 219+ C258 FE 00                                cp      0                       ; zerolength, not applicable
 220+ C25A 28 29                                jr      z,.NoBox
 221+ C25C 3A 2D C2     .CheckRow:              ld      a,(PosScan1)
 222+ C25F 3C                                   inc     a
 223+ C260                                      JumpIfAGTENusng (ix+2), .NoBox  ; X1 >= BottomLeftX
 223+ C260 DD BE 02    >                        cp     (ix+2)
 223+ C263 D2 85 C2    >                        jp		nc,.NoBox
 224+ C266 3A 2F C2                             ld      a,(PosScan2)
 225+ C269                                      JumpIfALTNusng (ix+0),  .NoBox   ; X2 <= TopRightX
 225+ C269 DD BE 00    >                        cp      (ix+0)
 225+ C26C DA 85 C2    >                        jp		c, .NoBox
 226+ C26F 3A 2E C2     .SafeToPrintX:          ld      a,(PosScan1+1)
 227+ C272 3C                                   inc     a
 228+ C273                                      JumpIfAGTENusng (ix+3), .NoBox  ; Y1 >= BottomLeftY
 228+ C273 DD BE 03    >                        cp     (ix+3)
 228+ C276 D2 85 C2    >                        jp		nc,.NoBox
 229+ C279 3A 30 C2                             ld      a,(PosScan2+1)
 230+ C27C                                      JumpIfALTNusng (ix+1),  .NoBox  ; Y2 <= TopRightY
 230+ C27C DD BE 01    >                        cp      (ix+1)
 230+ C27F DA 85 C2    >                        jp		c, .NoBox
 231+ C282 3E FF        .MatchedBox:            ld      a,$FF
 232+ C284 C9                                   ret
 233+ C285 DD 23        .NoBox:                 inc     ix
 234+ C287 DD 23                                inc     ix
 235+ C289 DD 23                                inc     ix
 236+ C28B DD 23                                inc     ix
 237+ C28D 10 C6                                djnz    .CheckBoxLoop
 238+ C28F 21 41 C0     .SafeToPrint:           ld      hl,src_printed_text
 239+ C292 3A C1 C0                             ld      a,(src_buffer_size)
 240+ C295 57                                   ld      d,a
 241+ C296 1E 04                                ld      e,4
 242+ C298 ED 30                                mul
 243+ C29A 19                                   add     hl,de
 244+ C29B ED 5B 2D C2                          ld      de,(PosScan1)
 245+ C29F 73 23 72 2B                          ld      (hl),de
 246+ C2A3 23                                   inc     hl
 247+ C2A4 23                                   inc     hl
 248+ C2A5 ED 5B 2F C2                          ld      de,(PosScan2)
 249+ C2A9 73 23 72 2B                          ld      (hl),de
 250+ C2AD 21 C1 C0                             ld      hl,src_buffer_size
 251+ C2B0 34                                   inc     (hl)
 252+ C2B1 AF                                   xor     a
 253+ C2B2 C9                                   ret
 254+ C2B3
 255+ C2B3 CD BD 84     src_label_ssytem:       call	copy_system_to_working
 256+ C2B6 3A 2B 7F                             ld      a,(Galaxy)
 257+ C2B9                                      MMUSelectGalaxyA
 257+ C2B9 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 258+ C2BC CD 82 F6                             call	GetDigramWorkingSeed
 259+ C2BF 21 A9 8E                             ld		hl,name_expanded
 260+ C2C2 CD FE 8D                             call	CapitaliseString
 261+ C2C5 3A 18 C0                             ld		a,(local_name_row)
 262+ C2C8 D6 05                                sub		local_label_shift_y
 263+ C2CA 47                                   ld		b,a					    ; b = effective pixel row
 264+ C2CB 3A 19 C0                             ld		a,(local_name_col)
 265+ C2CE C6 03                                add		a,local_label_shift_x
 266+ C2D0 4F                                   ld		c,a                     ; c = effective pixel col
 267+ C2D1 1E 00        .GetStringName:         ld      e,0
 268+ C2D3 21 A9 8E                             ld      hl,name_expanded
 269+ C2D6 7E           .getStringLoop:         ld      a,(hl)
 270+ C2D7 23                                   inc     hl
 271+ C2D8 1C                                   inc     e
 272+ C2D9 FE 00                                cp      0                       ; String must have a terminator to work
 273+ C2DB 20 F9                                jr      nz,.getStringLoop
 274+ C2DD 16 08                                ld      d,8
 275+ C2DF C5                                   push    bc
 276+ C2E0 CD 31 C2                             call    FreeSlotCheck           ; first attemps
 277+ C2E3 C1                                   pop     bc
 278+ C2E4 FE 00                                cp      0
 279+ C2E6 28 19                                jr      z,.OKToPrint
 280+ C2E8 78                                   ld      a,b
 281+ C2E9 C6 08                                add     8
 282+ C2EB 47                                   ld      b,a
 283+ C2EC C5                                   push    bc
 284+ C2ED CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 285+ C2F0 C1                                   pop     bc
 286+ C2F1 FE 00                                cp      0
 287+ C2F3 28 0C                                jr      z,.OKToPrint
 288+ C2F5 78                                   ld      a,b
 289+ C2F6 D6 10                                sub     16
 290+ C2F8 47                                   ld      b,a
 291+ C2F9 C5                                   push    bc
 292+ C2FA CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 293+ C2FD C1                                   pop     bc
 294+ C2FE FE 00                                cp      0
 295+ C300 C0                                   ret     nz
 296+ C301 1E FF        .OKToPrint:             ld		e,$FF
 297+ C303 21 A9 8E                             ld		hl,name_expanded
 298+ C306                                      MMUSelectLayer2
 298+ C306 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 299+ C30A CD BE E3                             call	l2_print_7at
 300+ C30D C9                                   ret
 301+ C30E
 302+ C30E              name_if_possible:
 303+ C30E 3A 18 C0     SRCpixelRowToRefRow:    ld		a,(local_name_row)
 304+ C311 D6 05                                sub		local_label_shift_y
 305+ C313 47                                   ld		b,a					; b = effective pixel row
 306+ C314 CB 3F                                srl		a
 307+ C316 CB 3F                                srl		a
 308+ C318 CB 3F                                srl		a					; divide by 8 to get character row
 309+ C31A                                                  DISPLAY "TODO: dont overwrite header"
 310+ C31A                                  ;	sub		2					; don;t write over header TODO tweaks
 311+ C31A 21 65 7E                             ld		hl,IndexedWork
 312+ C31D ED 31                                add		hl,a
 313+ C31F 7E                                   ld		a,(hl)
 314+ C320 FE 00                                cp		0
 315+ C322                                                  DISPLAY "TODO: need to test +- 1 row"
 316+ C322 20 04                                jr		nz, SRCtryAbove		; if its not empty don't print *(need to test +-1 row TODO)
 317+ C324 36 01                                ld		(hl),1				; flag as in use
 318+ C326 18 12                                jr		SRCFoundRow
 319+ C328 2B           SRCtryAbove:            dec		hl
 320+ C329 7E                                   ld		a,(hl)
 321+ C32A FE 00                                cp		0
 322+ C32C                                                  DISPLAY "TODO: need to test +- 1 row"
 323+ C32C 20 04                                jr		nz, SRCtryBelow		; if its not empty don't print *(need to test +-1 row TODO)
 324+ C32E 36 01                                ld		(hl),1				; flag as in use
 325+ C330 18 08                                jr		SRCFoundRow
 326+ C332 23           SRCtryBelow:            inc		hl
 327+ C333 23                                   inc		hl
 328+ C334 7E                                   ld		a,(hl)
 329+ C335 FE 00                                cp		0
 330+ C337 C8                                   ret		z
 331+ C338 36 01                                ld		(hl),1				; flag as in use
 332+ C33A CD BD 84     SRCFoundRow:            call	copy_system_to_working
 333+ C33D 3A 2B 7F     SRCSmallSizeName:       ld      a,(Galaxy)
 334+ C340                                      MMUSelectGalaxyA
 334+ C340 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 335+ C343 CD 82 F6                             call	GetDigramWorkingSeed
 336+ C346 21 A9 8E     SRCCapitaliseName:      ld		hl,name_expanded
 337+ C349 CD FE 8D                             call	CapitaliseString
 338+ C34C 21 A9 8E     SRCPrintName:           ld		hl, name_expanded
 339+ C34F 3A 18 C0                             ld		a,(local_name_row)
 340+ C352 D6 05                                sub		local_label_shift_y
 341+ C354 47                                   ld		b,a					; b = effective pixel row
 342+ C355 3A 19 C0                             ld		a,(local_name_col)
 343+ C358 C6 03                                add		a,local_label_shift_x
 344+ C35A 4F                                   ld		c,a
 345+ C35B 1E FF                                ld		e,$FF
 346+ C35D                                      MMUSelectLayer2
 346+ C35D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 347+ C361 CD BE E3                             call	l2_print_7at
 348+ C364 C9                                   ret
 349+ C365
 350+ C365 AF           plot_local_stars:       xor		a
 351+ C366 32 A1 7E                             ld		(XSAV),a
 352+ C369 DD 21 16 E0                          ld      ix,galaxy_data
 353+ C36D 32 C1 C0                             ld      (src_buffer_size),a
 354+ C370 21 41 C0     SRCClearNameList:       ld		hl,src_printed_text
 355+ C373 11 80 00                             ld		de,src_fill_buffer_size
 356+ C376 CD 38 7D                             call	memfill_dma
 356+ C379
 357+ C379 AF           SRCCounterLoop:         xor		a
 358+ C37A 3A 2B 7F                             ld      a,(Galaxy)
 359+ C37D                                      MMUSelectGalaxyA
 359+ C37D ED 92 57    >                     nextreg GalaxyDataMMU,     a
 360+ C380 DD E5                                push    ix
 361+ C382 DD E5                                push    ix
 362+ C384 E1                                   pop     hl
 363+ C385 11 14 7F                             ld      de,SystemSeed
 364+ C388 CD 90 84                             call    copy_seed
 365+ C38B 3A 15 7F                             ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 366+ C38E 4F                                   ld		c,a
 367+ C38F 3A 3F 7F     SRCcalcLocaldy:         ld		a,(PresentSystemY)
 368+ C392 47                                   ld		b,a								; so b holds Y ccord
 369+ C393 79                                   ld		a,c
 370+ C394 90                                   sub		b
 371+ C395 CB 7F                                bit		7,a
 372+ C397 28 02                                jr		z,SRCpositivedy
 373+ C399 ED 44        SRCnegativedy:          neg
 374+ C39B FE 26        SRCpositivedy:          cp		local_max_range_y
 375+ C39D 30 48                                jr		nc,SRCtoofar
 376+ C39F 3A 17 7F     SRCcalcLocaldx:         ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 377+ C3A2 4F                                   ld		c,a
 378+ C3A3 3A 3E 7F                             ld		a,(PresentSystemX)
 379+ C3A6 47                                   ld		b,a								; so b holds Y ccord
 380+ C3A7 79                                   ld		a,c
 381+ C3A8 90                                   sub		b
 382+ C3A9 CB 7F                                bit		7,a
 383+ C3AB 28 02                                jr		z,SRCpositivedx
 384+ C3AD ED 44        SRCnegativedx:          neg
 385+ C3AF FE 14        SRCpositivedx:          cp		local_max_range_x
 386+ C3B1 30 34                                jr		nc,SRCtoofar
 387+ C3B3 3A 15 7F     SRCOKToPlot             ld		a,(SystemSeed+1)
 388+ C3B6 21 3F 7F                             ld		hl,PresentSystemY
 389+ C3B9 96                                   sub		(hl)
 390+ C3BA CB 27                                sla		a								; * 2
 391+ C3BC C6 60                                add		src_y_centre
 392+ C3BE 32 18 C0                             ld		(local_name_row),a
 393+ C3C1 47                                   ld		b,a
 394+ C3C2 3A 17 7F                             ld		a,(SystemSeed+3)
 395+ C3C5 21 3E 7F                             ld		hl,PresentSystemX
 396+ C3C8 96                                   sub		(hl)
 397+ C3C9 CB 27                                sla		a
 398+ C3CB CB 27                                sla		a								; * 4
 399+ C3CD C6 80                                add		src_x_centre
 400+ C3CF 32 19 C0                             ld		(local_name_col),a
 401+ C3D2 4F                                   ld		c,a
 402+ C3D3 3A 19 7F                             ld		a,(SystemSeed+5)
 403+ C3D6 E6 01                                and		$01
 404+ C3D8 C6 02                                add		a,2
 405+ C3DA 57                                   ld		d,a
 406+ C3DB 1E D8                                ld		e,local_chart_star_colour
 407+ C3DD                                      MMUSelectLayer2
 407+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 408+ C3E1 CD F0 ED                             call	l2_draw_circle_fill
 409+ C3E4                                     ; call    src_get_name
 410+ C3E4 CD B3 C2                             call	src_label_ssytem
 411+ C3E7 E1           SRCtoofar:              pop     hl
 412+ C3E8 ED 34 08 00                          add     hl,8
 413+ C3EC E5                                   push    hl
 414+ C3ED DD E1                                pop     ix
 415+ C3EF 3A A1 7E                             ld		a,(XSAV)
 416+ C3F2 3D                                   dec		a
 417+ C3F3 FE 00                                cp		0
 418+ C3F5 C8                                   ret		z
 419+ C3F6 32 A1 7E                             ld		(XSAV),a
 420+ C3F9 C3 79 C3                             jp		SRCCounterLoop
 421+ C3FC              ;----------------------------------------------------------------------------------------------------------------------------------
 422+ C3FC              draw_local_chart_menu:  InitNoDoubleBuffer
 422+ C3FC             >                            MMUSelectLayer1
 422+ C3FC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 422+ C400 CD 8F E0    >                            call	l1_cls
 422+ C403 3E 07       >                            ld		a,7
 422+ C405 CD AA E0    >                            call	l1_attr_cls_to_a
 422+ C408             >                            MMUSelectLayer2
 422+ C408 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 422+ C40C CD 0A E0    >                            call    asm_l2_double_buffer_off
 422+ C40F CD 0E E2    >                            call	l2_cls	; Get some space
 422+ C412             >                            MMUSelectSpriteBank
 422+ C412 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 422+ C416 CD 6E E5    >                            call    sprite_cls_cursors
 423+ C419 3E 80                                ld      a,$80
 424+ C41B 32 A9 7E                             ld      (MenuIdMax),a
 425+ C41E                                      CopyPresentSystemToTarget               ; for short range we always start at present and cusor on present
 425+ C41E 2A 3E 7F    >                        ld      hl,(PresentSystemX)
 425+ C421 22 40 7F    >                        ld      (TargetSystemX),hl
 426+ C424 01 01 01     SRCDrawbox:             ld		bc,$0101
 427+ C427 11 FD BE                             ld		de,$BEFD
 428+ C42A 3E C0                                ld		a,$C0
 429+ C42C                                      MMUSelectLayer2
 429+ C42C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 430+ C430 CD F9 E3                             call	l2_draw_box
 431+ C433 01 01 0A                             ld		bc,$0A01
 432+ C436 11 C0 FE                             ld		de,$FEC0
 433+ C439                                      MMUSelectLayer2
 433+ C439 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 434+ C43D CD 84 E4                             call	l2_draw_horz_line
 435+ C440 3E 0C        SRCStaticText:          ld		a,short_range_header
 436+ C442 CD 24 8E                             call	expandTokenToString
 437+ C445 06 01                                ld		b,1
 438+ C447 21 10 C0                             ld		hl,short_range_boiler_text
 439+ C44A CD C2 C0                             call	SRM_print_boiler_text
 440+ C44D CD 8A 84     SRCSetUpChart:          call	copy_galaxy_to_system
 441+ C450 CD 65 C3                             call	plot_local_stars
 442+ C453 CD DD C0     .CircleandCrosshair:    call	SRM_draw_chart_circle_and_crosshair
 443+ C456 CD F9 C0                             call	SRM_draw_hyperspace_cross_hair
 444+ C459 C9                                   ret
 445+ C45A              ;----------------------------------------------------------------------------------------------------------------------------------
 446+ C45A 3A 8B 80     local_chart_cursors:    ld     a,(CursorKeysPressed)
 447+ C45D                                      ReturnIfAIsZero
 447+ C45D A7          >                        and     a
 447+ C45E C8          >                        ret     z
 448+ C45F 17                                   rla
 449+ C460 DC 78 C4                             call   c,src_UpPressed
 450+ C463 17                                   rla
 451+ C464 DC 95 C4                             call   c,src_DownPressed
 452+ C467 17                                   rla
 453+ C468 DC B4 C4                             call   c,src_LeftPressed
 454+ C46B 17                                   rla
 455+ C46C DC D1 C4                             call   c,src_RightPressed
 456+ C46F 17                                   rla
 457+ C470 DC F0 C4                             call   c,src_HomePressed
 458+ C473 17                                   rla
 459+ C474 DC FA C4                             call   c,src_RecenterPressed
 460+ C477 C9                                   ret
 461+ C478              ;----------------------------------------------------------------------------------------------------------------------------------
 462+ C478 3A 41 7F     src_UpPressed:          ld     a,(TargetSystemY)
 463+ C47B                                      JumpIfAIsZero   src_BoundsLimit
 463+ C47B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 463+ C47C CA 0F C5    >                        jp	    z, src_BoundsLimit
 464+ C47F 47                                   ld      b,a                         ; save target as we will need it
 465+ C480 3A 3F 7F                             ld      a,(PresentSystemY)
 466+ C483 90                                   sub     b                           ; get the difference between present and target
 467+ C484 FA 8C C4                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 468+ C487                                      JumpIfAGTENusng 40,src_BoundsLimit  ; if no more than 20 then OK
 468+ C487 FE 28       >                        cp     40
 468+ C489 D2 0F C5    >                        jp		nc,src_BoundsLimit
 469+ C48C 78           .SkipBoundsTest:        ld      a,b
 470+ C48D 3D                                   dec     a
 471+ C48E 32 41 7F                             ld      (TargetSystemY),a
 472+ C491 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 473+ C494 C9                                   ret
 474+ C495              ;----------------------------------------------------------------------------------------------------------------------------------
 475+ C495 3A 3F 7F     src_DownPressed:        ld     a,(PresentSystemY)
 476+ C498 47                                   ld      b,a
 477+ C499 3A 41 7F                             ld      a,(TargetSystemY)
 478+ C49C 4F                                   ld      c,a
 479+ C49D                                      JumpIfAEqNusng 128,src_BoundsLimit
 479+ C49D FE 80       >                        cp     128
 479+ C49F CA 0F C5    >                        jp      z,src_BoundsLimit
 480+ C4A2 90                                   sub     b
 481+ C4A3 FA AB C4                             jp      m,.SkipBoundsTest
 482+ C4A6                                      JumpIfAGTENusng 40,src_BoundsLimit
 482+ C4A6 FE 28       >                        cp     40
 482+ C4A8 D2 0F C5    >                        jp		nc,src_BoundsLimit
 483+ C4AB 79           .SkipBoundsTest:        ld      a,c
 484+ C4AC 3C                                   inc    a
 485+ C4AD 32 41 7F                             ld      (TargetSystemY),a
 486+ C4B0 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 487+ C4B3 C9                                   ret
 488+ C4B4              ;----------------------------------------------------------------------------------------------------------------------------------
 489+ C4B4 3A 40 7F     src_LeftPressed:        ld      a,(TargetSystemX)           ; we can't move left if target is zero
 490+ C4B7                                      JumpIfAIsZero   src_BoundsLimit
 490+ C4B7 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 490+ C4B8 CA 0F C5    >                        jp	    z, src_BoundsLimit
 491+ C4BB 47                                   ld      b,a                         ; save target as we will need it
 492+ C4BC 3A 3E 7F                             ld      a,(PresentSystemX)
 493+ C4BF 90                                   sub     b                           ; get the difference between present and target
 494+ C4C0 FA C8 C4                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 495+ C4C3                                      JumpIfAGTENusng 20,src_BoundsLimit  ; if no more than 20 then OK
 495+ C4C3 FE 14       >                        cp     20
 495+ C4C5 D2 0F C5    >                        jp		nc,src_BoundsLimit
 496+ C4C8 78           .SkipBoundsTest:        ld      a,b
 497+ C4C9 3D                                   dec     a
 498+ C4CA 32 40 7F                             ld      (TargetSystemX),a
 499+ C4CD CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 500+ C4D0 C9                                   ret
 501+ C4D1              ;----------------------------------------------------------------------------------------------------------------------------------
 502+ C4D1 3A 3E 7F     src_RightPressed:       ld      a,(PresentSystemX)
 503+ C4D4 47                                   ld      b,a
 504+ C4D5 3A 40 7F                             ld      a,(TargetSystemX)
 505+ C4D8 4F                                   ld      c,a
 506+ C4D9                                      JumpIfAEqNusng 255,src_BoundsLimit
 506+ C4D9 FE FF       >                        cp     255
 506+ C4DB CA 0F C5    >                        jp      z,src_BoundsLimit
 507+ C4DE 90                                   sub     b
 508+ C4DF FA E7 C4                             jp      m,.SkipBoundsTest
 509+ C4E2                                      JumpIfAGTENusng 20,src_BoundsLimit
 509+ C4E2 FE 14       >                        cp     20
 509+ C4E4 D2 0F C5    >                        jp		nc,src_BoundsLimit
 510+ C4E7 79           .SkipBoundsTest:        ld      a,c
 511+ C4E8 3C                                   inc    a
 512+ C4E9 32 40 7F                             ld      (TargetSystemX),a
 513+ C4EC CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 514+ C4EF C9                                   ret
 515+ C4F0              ;----------------------------------------------------------------------------------------------------------------------------------
 516+ C4F0 2A 3E 7F     src_HomePressed:        ld      hl,(PresentSystemX)
 517+ C4F3 22 40 7F                             ld      (TargetSystemX),hl
 518+ C4F6 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 519+ C4F9 C9                                   ret
 520+ C4FA              ;----------------------------------------------------------------------------------------------------------------------------------
 521+ C4FA 3A 2B 7F     src_RecenterPressed:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 522+ C4FD                                      MMUSelectGalaxyA
 522+ C4FD ED 92 57    >                     nextreg GalaxyDataMMU,     a
 523+ C500 ED 4B 40 7F                          ld      bc,(TargetSystemX)
 524+ C504 CD 70 FB                             call    find_nearest_to_bc
 525+ C507 ED 43 40 7F                          ld      (TargetSystemX),bc
 526+ C50B CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 527+ C50E C9                                   ret
 528+ C50F              ;----------------------------------------------------------------------------------------------------------------------------------
 529+ C50F AF           src_BoundsLimit:        xor     a
 530+ C510 C9                                   ret
 531+ C511
# file closed: ./Menus/short_range_chart_menu.asm
1271  C511                  DISPLAY "Bank ",BankMenuShrCht," - Bytes free ",/D, $2000 - ($-MenuShrChtAddr), " - BankMenuShrCht"
1272  C511              ; Bank 51  ------------------------------------------------------------------------------------------------------------------------
1273  C511                  SLOT    MenuGalChtAddr
1274  C511                  PAGE    BankMenuGalCht
1275  C511              	ORG     MenuGalChtAddr
1276  C000                  INCLUDE "./Menus//galactic_chart_menu.asm"
# file opened: ./Menus//galactic_chart_menu.asm
   1+ C000
   2+ C000 47 61 6C 61  galactic_chart_page_marker  DB "GalacticChrtPG51"
   2+ C004 63 74 69 63
   2+ C008 43 68 72 74
   2+ C00C 50 47 35 31
   3+ C010 40 02 DD 8D  galactic_chart_boiler_text	DW $0240,TextBuffer
   4+ C014              galactic_chart_header		equ 13
   5+ C014              galactic_star_colour		equ 216
   6+ C014              galactic_star_colour2		equ 108
   7+ C014              galactic_chart_y_offset		equ $18
   8+ C014              galactic_chart_hyper_offset equ 4
   9+ C014              galactic_chart_hyper_x_offset equ 32 - 4
  10+ C014              galactic_chart_hyper_y_offset equ 32 - 4 + 24
  11+ C014 44 69 73 74  galactic_chart_distance     DB "Distance: "
  11+ C018 61 6E 63 65
  11+ C01C 3A 20
  12+ C01E 30 30 30     galactic_chart_dist_amount  DB "000"
  13+ C021 2E           galactic_chart_decimal      DB "."
  14+ C022 30           galactic_chart_fraction     DB "0"
  15+ C023 20 4C 69 67  galactic_chart_dis_ly       DB " Light Years",0
  15+ C027 68 74 20 59
  15+ C02B 65 61 72 73
  15+ C02F 00
  16+ C030 20 20 30 2E  galactic_default_dist       DB "  0.0",0
  16+ C034 30 00
  17+ C036
  18+ C036 00 00 00...  galactic_distance           DS  6
  19+ C03C
  20+ C03C              galactic_find_position      equ $B008
  21+ C03C 46 69 6E 64  galactic_find_message       DB "Find: ",0
  21+ C040 3A 20 00
  22+ C043              galactic_find_text          equ $B038
  23+ C043 20 20 20 20  galactic_blank_message      DB  "                    ",0
  23+ C047 20 20 20 20
  23+ C04B 20 20 20 20
  23+ C04F 20 20 20 20
  23+ C053 20 20 20 20
  23+ C057 00
  24+ C058 2A 2A 2D 2D  galactic_find_no_match      DB "**-- System Not Found --**",0
  24+ C05C 20 53 79 73
  24+ C060 74 65 6D 20
  24+ C064 4E 6F 74 20
  24+ C068 46 6F 75 6E
  24+ C06C 64 20 2D 2D
  24+ C070 2A 2A 00
  25+ C073 20 20 2A 2A  galactic_find_match         DB "  **-- System Found --**  ",0
  25+ C077 2D 2D 20 53
  25+ C07B 79 73 74 65
  25+ C07F 6D 20 46 6F
  25+ C083 75 6E 64 20
  25+ C087 2D 2D 2A 2A
  25+ C08B 20 20 00
  26+ C08E
  27+ C08E              GCM_print_boiler_text:
  28+ C08E                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C08E
   2++C08E              ;">print_boilder_text hl = text structure, b = message count"
   3++C08E C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C08F 4E                                   ld			c,(hl)		; Get Row into b
   5++C090 23                                   inc			hl
   6++C091 46                                   ld			b,(hl)		; Get Col into b
   7++C092 23                                   inc			hl
   8++C093 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C094 23                                   inc			hl
  10++C095 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C096 23                                   inc			hl
  12++C097 E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C098 EB                                   ex			de,hl		; now hl = address of text data
  14++C099 1E FF                                ld			e,txt_status_colour
  15++C09B C5                                   push		bc
  16++C09C D1                                   pop			de
  17++C09D                                      MMUSelectLayer1
  17++C09D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C0A1 CD D7 E0                             call		l1_print_at
  19++C0A4 E1                                   pop			hl
  20++C0A5 C1                                   pop			bc
  21++C0A6 10 E6                                djnz		.BoilerTextLoop
  22++C0A8 C9                                   ret
  23++C0A9
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  29+ C0A9              GCM_draw_chart_circle_and_crosshair:
  30+ C0A9 ED 4B 3E 7F  	ld		bc,(PresentSystemX)				; bc = present system
  31+ C0AD              .OnGalacticChart:
  32+ C0AD CB 38        	srl		b								; but row is row / 2
  33+ C0AF C5           	push  	bc
  34+ C0B0              	MMUSelectSpriteBank
  34+ C0B0 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  35+ C0B4 CD 91 E0     	call	sprite_galactic_cursor
  36+ C0B7 C1           	pop		bc
  37+ C0B8 78           	ld		a,b
  38+ C0B9 C6 18        	add		a,galactic_chart_y_offset
  39+ C0BB 47           	ld		b,a
  40+ C0BC 3A 00 84     	ld		a,(Fuel)
  41+ C0BF CB 3F        	srl		a
  42+ C0C1 CB 3F        	srl		a								; divide range of fuel by 4 for galactic chart
  43+ C0C3 57           	ld		d,a
  44+ C0C4 1E FF        	ld		e,$FF
  45+ C0C6              	MMUSelectLayer2
  45+ C0C6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  46+ C0CA CD C6 EB     	call	l2_draw_circle
  47+ C0CD C9           	ret
  48+ C0CE                              DISPLAY "TODO: move cursor code"
  49+ C0CE              ; TODO MOVE CURSOR CODE
  50+ C0CE
  51+ C0CE ED 4B 40 7F  GCM_draw_hyperspace_cross_hair: ld		bc,(TargetSystemX)              ; bc = selected jump
  52+ C0D2 C5                                           push    bc
  53+ C0D3 CB 38                                        srl		b								; but row is row / 2
  54+ C0D5                                              MMUSelectSpriteBank
  54+ C0D5 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  55+ C0D9 CD 9D E0                                     call	sprite_galactic_hyper_cursor
  56+ C0DC C1                                           pop     bc
  57+ C0DD CD A9 E0                                     call	sprite_ghc_move
  58+ C0E0 C9                                           ret
  59+ C0E1
  60+ C0E1
  61+ C0E1 AF           plot_gc_stars:          xor		a
  62+ C0E2 32 A1 7E                             ld		(XSAV),a
  63+ C0E5 DD 21 16 E0                          ld      ix,galaxy_data
  64+ C0E9 3A 2B 7F     .CounterLoop:           ld      a,(Galaxy)
  65+ C0EC                                      MMUSelectGalaxyA
  65+ C0EC ED 92 57    >                     nextreg GalaxyDataMMU,     a
  66+ C0EF DD E5                                push    ix
  67+ C0F1 E1                                   pop     hl
  68+ C0F2 11 14 7F                             ld      de,SystemSeed
  69+ C0F5 CD 90 84                             call    copy_seed
  70+ C0F8 3A 17 7F                             ld		a,(SystemSeed+3)				; QQ15+3 \ seed w1_h is Xcoord of star
  71+ C0FB 4F                                   ld		c,a								; c = X Coord
  72+ C0FC 3A 15 7F                             ld		a,(SystemSeed+1)
  73+ C0FF CB 3F                                srl		a								; Ycoord /2
  74+ C101 C6 18                                add		a,galactic_chart_y_offset		; add offset to Y coord of star
  75+ C103 47                                   ld		b,a								; b = row
  76+ C104 C5                                   push	bc
  77+ C105 3E D8                                ld		a,galactic_star_colour
  78+ C107                                      MMUSelectLayer2
  78+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  79+ C10B CD B6 E2                             call	l2_plot_pixel
  80+ C10E C1                                   pop		bc
  81+ C10F 3A 18 7F                             ld		a,(SystemSeed+4)
  82+ C112 F6 50                                or		$50								; minimum distance away
  83+ C114 FE 90                                cp		$90
  84+ C116 30 0A                                jr		nc,.NoSecondPixel
  85+ C118 0C           .SecondPixel:           inc		c
  86+ C119 3E 6C                                ld		a,galactic_star_colour2
  87+ C11B                                      MMUSelectLayer2
  87+ C11B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  88+ C11F CD B6 E2                             call	l2_plot_pixel
  89+ C122 DD E5        .NoSecondPixel:         push    ix
  90+ C124 E1                                   pop     hl
  91+ C125 ED 34 08 00                          add     hl,8
  92+ C129 E5                                   push    hl
  93+ C12A DD E1                                pop     ix
  94+ C12C 3A A1 7E                             ld		a,(XSAV)
  95+ C12F 3D                                   dec		a
  96+ C130 FE 00                                cp		0
  97+ C132 C8                                   ret		z
  98+ C133 32 A1 7E                             ld		(XSAV),a
  99+ C136 18 B1                                jr		.CounterLoop
 100+ C138
 101+ C138 2A 2A 2A 2A  GALDP       DB "********++++++++"
 101+ C13C 2A 2A 2A 2A
 101+ C140 2B 2B 2B 2B
 101+ C144 2B 2B 2B 2B
 102+ C148              draw_galactic_chart_menu:   InitNoDoubleBuffer
 102+ C148             >                            MMUSelectLayer1
 102+ C148 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 102+ C14C CD 8F E0    >                            call	l1_cls
 102+ C14F 3E 07       >                            ld		a,7
 102+ C151 CD AA E0    >                            call	l1_attr_cls_to_a
 102+ C154             >                            MMUSelectLayer2
 102+ C154 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 102+ C158 CD 0A E0    >                            call    asm_l2_double_buffer_off
 102+ C15B CD 0E E2    >                            call	l2_cls	; Get some space
 102+ C15E             >                            MMUSelectSpriteBank
 102+ C15E ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 102+ C162 CD 6E E5    >                            call    sprite_cls_cursors
 103+ C165 DD 2E DC                                 ld      ixl,$DC
 104+ C168 3E 40                                    ld      a,$40
 105+ C16A 32 A9 7E                                 ld      (MenuIdMax),a
 106+ C16D 2A 3E 7F                                 ld      hl,(PresentSystemX)
 107+ C170              ;                            ld      (TargetSystemX),hl
 108+ C170 CD 5B C4                                 call    gc_present_system               ; Set up the seed for present system
 109+ C173 01 01 01     .Drawbox:                   ld		bc,$0101
 110+ C176 11 FD BE                                 ld		de,$BEFD
 111+ C179 3E C0                                    ld		a,$C0
 112+ C17B                                          MMUSelectLayer2
 112+ C17B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113+ C17F CD F9 E3                                 call	l2_draw_box
 114+ C182 01 01 0A                                 ld		bc,$0A01
 115+ C185 11 C0 FE                                 ld		de,$FEC0
 116+ C188 CD 84 E4                                 call	l2_draw_horz_line
 117+ C18B 3E 0D        .StaticText:                ld		a,galactic_chart_header
 118+ C18D CD 24 8E                                 call	expandTokenToString
 119+ C190 06 01                                    ld		b,1
 120+ C192 21 10 C0                                 ld		hl,galactic_chart_boiler_text
 121+ C195 CD 8E C0                                 call	GCM_print_boiler_text
 122+ C198 CD A9 C0     .CircleandCrosshair:        call	GCM_draw_chart_circle_and_crosshair
 123+ C19B CD CE C0                                 call	GCM_draw_hyperspace_cross_hair
 124+ C19E CD E1 C0                                 call	plot_gc_stars
 125+ C1A1 3A 2B 7F                                 ld      a,(Galaxy)
 126+ C1A4                                          MMUSelectGalaxyA
 126+ C1A4 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 127+ C1A7 ED 4B 40 7F                              ld      bc,(TargetSystemX)
 128+ C1AB CD 64 FC                                 call    galaxy_system_under_cursor          ; TODO for some reason this bit
 129+ C1AE FE 00                                    cp      0                                   ; does not reset cursor on a miss
 130+ C1B0 20 11                                    jr      nz,.CurrentTargetIsValid
 131+ C1B2              .CurrentTargetIsInvalid:    CopyPresentSystemToTarget
 131+ C1B2 2A 3E 7F    >                        ld      hl,(PresentSystemX)
 131+ C1B5 22 40 7F    >                        ld      (TargetSystemX),hl
 132+ C1B8 ED 4B 40 7F                              ld      bc,(TargetSystemX)
 133+ C1BC                                          MMUSelectSpriteBank
 133+ C1BC ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 134+ C1C0 CD A9 E0                                 call	sprite_ghc_move
 135+ C1C3 3A 2B 7F     .CurrentTargetIsValid:      ld      a,(Galaxy)
 136+ C1C6                                          MMUSelectGalaxyA
 136+ C1C6 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 137+ C1C9 ED 43 5B E8                              ld      (GalaxyTargetSystem),bc
 138+ C1CD CD 64 FC                                 call    galaxy_system_under_cursor
 139+ C1D0 CD B3 C3                                 call    gc_name_if_possible
 140+ C1D3                                          SetMemFalse TextInputMode
 140+ C1D3 3E FF       >                        ld      a,$FF
 140+ C1D5 32 8A 80    >                        ld      (TextInputMode),a
 141+ C1D8 C9                                       ret
 142+ C1D9
 143+ C1D9              gcDelayVal                  equ $0A
 144+ C1D9              gcBlinkVal                  equ $10
 145+ C1D9
 146+ C1D9
 147+ C1D9 10           gcCursorBlink               DB  gcBlinkVal
 148+ C1DA 20           gcCursorChar                DB  " "
 149+ C1DB 00           gcEndOfString               DB  0
 150+ C1DC 00 00 00...  gcInputText                 DS  31
 151+ C1FB 00 00 00 00                              DB  0,0,0,0,0
 151+ C1FF 00
 152+ C200 00 00 00...  gcBlank                     DS  32
 153+ C220
 154+ C220              ;----------------------------------------------------------------------------------------------------------------------------------
 155+ C220 11 08 B0     gc_display_find_text:   ld		de,galactic_find_position   ; Wipe input area on screen
 156+ C223 21 3C C0                             ld      hl,galactic_find_message
 157+ C226                                      MMUSelectLayer1
 157+ C226 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 158+ C22A CD D7 E0                             call	l1_print_at
 159+ C22D C9                                   ret
 160+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 161+ C22E 11 DC C1     gc_display_find_string: ld      de,gcInputText
 162+ C231                                      MMUSelectKeyboard
 162+ C231 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 163+ C235 CD 3D E2                             call    keyboard_copy_input_to_de
 164+ C238 21 DA C1                             ld      hl,gcCursorChar         ; Now just copy cursor char too
 165+ C23B ED A0                                ldi                             ; Copy cursor to local
 166+ C23D 3A 39 E2                             ld      a,(InputCursor)
 167+ C240 3C                                   inc     a
 168+ C241 47                                   ld      b,a
 169+ C242 3E 14                                ld      a,20
 170+ C244 90                                   sub     b
 171+ C245 47                                   ld      b,a
 172+ C246 3E 20                                ld      a," "
 173+ C248 12           .SpacePad:              ld      (de),a
 174+ C249 13                                   inc     de
 175+ C24A 10 FC                                djnz    .SpacePad
 176+ C24C AF                                   xor     a
 177+ C24D 12                                   ld      (de),a
 178+ C24E 11 38 B0                             ld		de,galactic_find_text    ; Display text
 179+ C251 21 DC C1                             ld      hl,gcInputText
 180+ C254                                      MMUSelectLayer1
 180+ C254 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 181+ C258 CD D7 E0                             call	l1_print_at
 182+ C25B C9                                   ret
 183+ C25C
 184+ C25C 3A D9 C1     blink_cursor:           ld      a,(gcCursorBlink)
 185+ C25F 3D                                   dec     a
 186+ C260 32 D9 C1                             ld      (gcCursorBlink),a
 187+ C263 C0                                   ret     nz
 188+ C264 3E 10        .FlashCursor:           ld      a,gcBlinkVal
 189+ C266 32 D9 C1                             ld      (gcCursorBlink),a
 190+ C269 3A DA C1                             ld      a,(gcCursorChar)
 191+ C26C FE 20                                cp      " "
 192+ C26E 28 06                                jr      z,.ChangeToStar
 193+ C270 3E 20                                ld      a," "
 194+ C272 32 DA C1                             ld      (gcCursorChar),a
 195+ C275 C9                                   ret
 196+ C276 3E 2A        .ChangeToStar:          ld      a,"*"
 197+ C278 32 DA C1                             ld      (gcCursorChar),a
 198+ C27B C9                                   ret
 199+ C27C              ;----------------------------------------------------------------------------------------------------------------------------------
 200+ C27C              ; The main loop handles the find key
 201+ C27C              loop_gc_menu:           JumpIfMemTrue TextInputMode,AlreadyInInputMode  ;if we are in input mode then go directly there
 201+ C27C 3A 8A 80    >                        ld      a,(TextInputMode)
 201+ C27F A7          >                        and     a
 201+ C280 CA A1 C2    >                        jp      z, AlreadyInInputMode
 202+ C283              .StartFindCheck:        MacroIsKeyPressed c_Pressed_Find                        ;Is F pressed
 202+ C283 3E 4E       >                        ld      a,c_Pressed_Find
 202+ C285             >                        MMUSelectKeyboard
 202+ C285 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 202+ C289 CD A2 E1    >                        call    is_key_pressed
 203+ C28C C0                                   ret     nz                                      ;the main loop handles find key
 204+ C28D                                      MMUSelectKeyboard
 204+ C28D ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 205+ C291 CD 9C E2                             call    initInputText                           ;Initialise find input
 206+ C294                                      SetMemTrue TextInputMode                        ;Set input mode to true
 206+ C294 AF          >                        xor     a
 206+ C295 32 8A 80    >                        ld      (TextInputMode),a
 207+ C298                                      SetMemToN gcCursorBlink, gcBlinkVal             ; set up blink
 207+ C298 3E 10       >                        ld      a,gcBlinkVal
 207+ C29A 32 D9 C1    >                        ld      (gcCursorBlink),a
 208+ C29D CD 20 C2     .DisplayInputbar:       call    gc_display_find_text                    ; now prep the boiler plate input text
 209+ C2A0 C9                                   ret                                             ; and exit so next interation handles new input as we have to rescan keyboard
 210+ C2A1              ;Already in input mode post pressing find
 211+ C2A1              AlreadyInInputMode:     MMUSelectKeyboard
 211+ C2A1 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 212+ C2A5 CD C3 E2                             call    InputName                               ; Call input routine to parse a key
 213+ C2A8                                      JumpIfMemFalse InputChanged, .blinkNoDelay      ; no key they bypass rest of input
 213+ C2A8 3A 3B E2    >                        ld      a,(InputChanged)
 213+ C2AB A7          >                        and     a
 213+ C2AC C2 B9 C2    >                        jp      nz, .blinkNoDelay
 214+ C2AF              .WasItEnter:            JumpIfMemTrue EnterPressed, .FindEnterPressed   ; if enter was pressed then find
 214+ C2AF 3A 3A E2    >                        ld      a,(EnterPressed)
 214+ C2B2 A7          >                        and     a
 214+ C2B3 CA C5 C2    >                        jp      z, .FindEnterPressed
 215+ C2B6 CD 2E C2                             call    gc_display_find_string                  ; update string
 216+ C2B9 CD 5C C2     .blinkNoDelay:          call    blink_cursor
 217+ C2BC                                      CallIfMemEqNusng    gcCursorBlink, gcBlinkVal, gc_display_find_string ; on blink we get a double update but we can live with that
 217+ C2BC 3A D9 C1    >                        ld      a,(gcCursorBlink)
 217+ C2BF FE 10       >                        cp      gcBlinkVal
 217+ C2C1 CC 2E C2    >                        call    z,gc_display_find_string
 218+ C2C4 C9                                   ret
 219+ C2C5              .FindEnterPressed:      SetMemFalse EnterPressed                        ; reset enter
 219+ C2C5 3E FF       >                        ld      a,$FF
 219+ C2C7 32 3A E2    >                        ld      (EnterPressed),a
 220+ C2CA                                      SetMemFalse TextInputMode                       ; leave input mode
 220+ C2CA 3E FF       >                        ld      a,$FF
 220+ C2CC 32 8A 80    >                        ld      (TextInputMode),a
 221+ C2CF 3A 2B 7F                             ld      a,(Galaxy)                              ; Fetch correct galaxy seed bank into memory
 222+ C2D2                                      MMUSelectGalaxyA
 222+ C2D2 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 223+ C2D5 21 19 E2                             ld      hl,InputString
 224+ C2D8 11 5E E8                             ld      de,GalaxySearchString
 225+ C2DB CD D0 F6                             call    GalaxyCopyLoop
 226+ C2DE CD 39 FB                             call    find_system_by_name
 227+ C2E1 FE FF                                cp      $FF                                     ; 0 denotes found FF, failure
 228+ C2E3 28 1D                                jr      z,.FindNoMatch
 229+ C2E5 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 230+ C2E8 4F                                   ld      c,a
 231+ C2E9 3A F9 E8                             ld      a,(GalaxyWorkingSeed+1)
 232+ C2EC 47                                   ld      b,a
 233+ C2ED ED 43 40 7F                          ld      (TargetSystemX),bc
 234+ C2F1 CD 94 C3                             call    UpdateGalacticCursor
 235+ C2F4 11 08 B0                             ld		de,galactic_find_position               ; Wipe input area on screen
 236+ C2F7 21 73 C0                             ld      hl,galactic_find_match
 237+ C2FA                                      MMUSelectLayer1
 237+ C2FA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 238+ C2FE CD D7 E0                             call	l1_print_at
 239+ C301 C9                                   ret
 240+ C302              .FindNoMatch:           ; if not found display "Not found"
 241+ C302                                      ; move curor if found
 242+ C302 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 243+ C305 21 58 C0                             ld      hl,galactic_find_no_match
 244+ C308                                      MMUSelectLayer1
 244+ C308 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 245+ C30C CD D7 E0                             call	l1_print_at
 246+ C30F C9                                   ret; DOSTUFFHERE
 247+ C310              ;----------------------------------------------------------------------------------------------------------------------------------
 248+ C310              galctic_chart_cursors:  ReturnIfMemTrue TextInputMode
 248+ C310 3A 8A 80    >                        ld      a,(TextInputMode)
 248+ C313 A7          >                        and     a
 248+ C314 C8          >                        ret     z
 249+ C315 3A 8B 80                             ld      a,(CursorKeysPressed)
 250+ C318                                      ReturnIfAIsZero
 250+ C318 A7          >                        and     a
 250+ C319 C8          >                        ret     z
 251+ C31A 17                                   rla
 252+ C31B DC 33 C3                             call   c,gc_UpPressed
 253+ C31E 17                                   rla
 254+ C31F DC 43 C3                             call   c,gc_DownPressed
 255+ C322 17                                   rla
 256+ C323 DC 53 C3                             call   c,gc_LeftPressed
 257+ C326 17                                   rla
 258+ C327 DC 63 C3                             call   c,gc_RightPressed
 259+ C32A 17                                   rla
 260+ C32B DC 73 C3                             call   c,gc_HomePressed
 261+ C32E 17                                   rla
 262+ C32F DC 7D C3                             call   c,gc_RecenterPressed
 263+ C332 C9                                   ret
 264+ C333              ;----------------------------------------------------------------------------------------------------------------------------------
 265+ C333 3A 41 7F     gc_UpPressed:           ld     a,(TargetSystemX+1)
 266+ C336                                      JumpIfAEqNusng 1,gc_BoundsLimit
 266+ C336 FE 01       >                        cp     1
 266+ C338 CA 92 C3    >                        jp      z,gc_BoundsLimit
 267+ C33B 3D                                   dec     a
 268+ C33C 32 41 7F                             ld      (TargetSystemX+1),a
 269+ C33F CD 94 C3                             call    UpdateGalacticCursor
 270+ C342 C9                                   ret
 271+ C343              ;----------------------------------------------------------------------------------------------------------------------------------
 272+ C343 3A 41 7F     gc_DownPressed:         ld     a,(TargetSystemX+1)
 273+ C346                                      JumpIfAEqNusng 255,gc_BoundsLimit
 273+ C346 FE FF       >                        cp     255
 273+ C348 CA 92 C3    >                        jp      z,gc_BoundsLimit
 274+ C34B 3C                                   inc    a
 275+ C34C 32 41 7F                             ld      (TargetSystemX+1),a
 276+ C34F CD 94 C3                             call    UpdateGalacticCursor
 277+ C352 C9                                   ret
 278+ C353              ;----------------------------------------------------------------------------------------------------------------------------------
 279+ C353 3A 40 7F     gc_LeftPressed:         ld     a,(TargetSystemX)
 280+ C356                                      JumpIfAEqNusng 2,gc_BoundsLimit
 280+ C356 FE 02       >                        cp     2
 280+ C358 CA 92 C3    >                        jp      z,gc_BoundsLimit
 281+ C35B 3D                                   dec    a
 282+ C35C 32 40 7F                             ld      (TargetSystemX),a
 283+ C35F CD 94 C3                             call    UpdateGalacticCursor
 284+ C362 C9                                   ret
 285+ C363              ;----------------------------------------------------------------------------------------------------------------------------------
 286+ C363 3A 40 7F     gc_RightPressed:        ld     a,(TargetSystemX)
 287+ C366                                      JumpIfAEqNusng 253,gc_BoundsLimit
 287+ C366 FE FD       >                        cp     253
 287+ C368 CA 92 C3    >                        jp      z,gc_BoundsLimit
 288+ C36B 3C                                   inc    a
 289+ C36C 32 40 7F                             ld      (TargetSystemX),a
 290+ C36F CD 94 C3                             call    UpdateGalacticCursor
 291+ C372 C9                                   ret
 292+ C373              ;----------------------------------------------------------------------------------------------------------------------------------
 293+ C373 2A 3E 7F     gc_HomePressed:         ld      hl,(PresentSystemX)
 294+ C376 22 40 7F                             ld      (TargetSystemX),hl
 295+ C379 CD 94 C3                             call    UpdateGalacticCursor
 296+ C37C C9                                   ret
 297+ C37D              ;----------------------------------------------------------------------------------------------------------------------------------
 298+ C37D 3A 2B 7F     gc_RecenterPressed:     ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 299+ C380                                      MMUSelectGalaxyA
 299+ C380 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 300+ C383 ED 4B 40 7F                          ld      bc,(TargetSystemX)
 301+ C387 CD 70 FB                             call    find_nearest_to_bc
 302+ C38A ED 43 40 7F                          ld      (TargetSystemX),bc
 303+ C38E CD 94 C3                             call    UpdateGalacticCursor
 304+ C391 C9                                   ret
 305+ C392              ;----------------------------------------------------------------------------------------------------------------------------------
 306+ C392 AF           gc_BoundsLimit          xor     a
 307+ C393 C9                                   ret
 308+ C394
 309+ C394              ;----------------------------------------------------------------------------------------------------------------------------------
 310+ C394 ED 4B 40 7F  UpdateGalacticCursor:   ld		bc,(TargetSystemX)              ; bc = selected jump
 311+ C398              OnGalacticChart:        MMUSelectSpriteBank
 311+ C398 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 312+ C39C CD A9 E0                             call	sprite_ghc_move
 313+ C39F 3A 2B 7F                             ld      a,(Galaxy)
 314+ C3A2                                      MMUSelectGalaxyA
 314+ C3A2 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 315+ C3A5 ED 4B 40 7F                          ld      bc,(TargetSystemX)
 316+ C3A9 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 317+ C3AD CD 64 FC                             call    galaxy_system_under_cursor
 318+ C3B0 FE 00                                cp      0
 319+ C3B2 C8                                   ret     z
 320+ C3B3              ; just fall into gc_name_if_possible
 321+ C3B3 CD 82 F6     gc_name_if_possible:    call	GetDigramWorkingSeed
 322+ C3B6 CD E1 C3                             call    gc_clear_name_area
 323+ C3B9 21 A9 8E                             ld		hl,name_expanded
 324+ C3BC CD FE 8D                             call	CapitaliseString
 325+ C3BF 21 A9 8E                             ld		hl, name_expanded
 326+ C3C2 01 0A A0                             ld      bc,$A00A
 327+ C3C5 1E FF                                ld		e,$FF
 328+ C3C7                                      MMUSelectLayer2
 328+ C3C7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 329+ C3CB CD BE E3                             call	l2_print_7at
 330+ C3CE CD FB C3                             call    gc_calc_distance
 331+ C3D1 21 14 C0                             ld      hl,galactic_chart_distance
 332+ C3D4 01 0A A8                             ld      bc,$A80A
 333+ C3D7 1E FF                                ld		e,$FF
 334+ C3D9                                      MMUSelectLayer2
 334+ C3D9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 335+ C3DD CD BE E3                             call	l2_print_7at
 336+ C3E0 C9                                   ret
 337+ C3E1              ;----------------------------------------------------------------------------------------------------------------------------------
 338+ C3E1 26 08        gc_clear_name_area:     ld      h,8
 339+ C3E3 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 340+ C3E6 01 0A A0                             ld      bc,$A00A
 341+ C3E9 E5           .ClearLoop:             push    hl
 342+ C3EA D5                                   push    de
 343+ C3EB C5                                   push    bc
 344+ C3EC                                      MMUSelectLayer2
 344+ C3EC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 345+ C3F0 CD 84 E4                             call	l2_draw_horz_line
 346+ C3F3 C1                                   pop     bc
 347+ C3F4 D1                                   pop     de
 348+ C3F5 E1                                   pop     hl
 349+ C3F6 04                                   inc     b
 350+ C3F7 25                                   dec     h
 351+ C3F8 20 EF                                jr      nz,.ClearLoop
 352+ C3FA C9                                   ret
 353+ C3FB              ;----------------------------------------------------------------------------------------------------------------------------------
 354+ C3FB 3A 2B 7F     gc_calc_distance:       ld      a,(Galaxy)
 355+ C3FE                                      MMUSelectGalaxyA
 355+ C3FE ED 92 57    >                     nextreg GalaxyDataMMU,     a
 356+ C401 11 1E C0                             ld      de,galactic_chart_dist_amount
 357+ C404 21 30 C0                             ld      hl,galactic_default_dist
 358+ C407 ED A0                                ldi
 359+ C409 ED A0                                ldi
 360+ C40B ED A0                                ldi
 361+ C40D ED A0                                ldi
 362+ C40F ED A0                                ldi
 363+ C411 ED 4B 3E 7F                          ld      bc,(PresentSystemX)
 364+ C415 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 365+ C419 ED 4B 40 7F                          ld      bc,(TargetSystemX)
 366+ C41D ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 367+ C421 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 368+ C424 DD 2A 60 7F                          ld      ix,(Distance)
 369+ C428 11 00 00                             ld      de,0
 370+ C42B FD 21 36 C0                          ld      iy,galactic_distance
 371+ C42F CD D9 99                             call    DispDEIXtoIY
 372+ C432 FD E5                                push    iy
 373+ C434 E1                                   pop     hl
 374+ C435 11 36 C0                             ld      de,galactic_distance
 375+ C438 7E                                   ld		a,(hl)				;Push last digit to post decimal
 376+ C439 32 22 C0                             ld		(galactic_chart_fraction),a
 377+ C43C 2B                                   dec     hl
 378+ C43D CD 42 98                             call    compare16HLDE
 379+ C440 38 18                                jr      c,.done_number
 380+ C442 7E                                   ld      a,(hl)
 381+ C443 32 20 C0                             ld      (galactic_chart_dist_amount+2),a
 382+ C446 2B                                   dec     hl
 383+ C447 CD 42 98                             call    compare16HLDE
 384+ C44A 38 0E                                jr      c,.done_number
 385+ C44C 7E                                   ld      a,(hl)
 386+ C44D 32 1F C0                             ld      (galactic_chart_dist_amount+1),a
 387+ C450 2B                                   dec     hl
 388+ C451 CD 42 98                             call    compare16HLDE
 389+ C454 38 04                                jr      c,.done_number
 390+ C456 7E                                   ld      a,(hl)
 391+ C457 32 1E C0                             ld      (galactic_chart_dist_amount),a
 392+ C45A C9           .done_number:           ret
 393+ C45B              ;----------------------------------------------------------------------------------------------------------------------------------
 394+ C45B AF           gc_present_system:      xor     a
 395+ C45C 32 A1 7E                             ld		(XSAV),a
 396+ C45F DD 21 16 E0                          ld      ix,galaxy_data
 397+ C463 3A 2B 7F     GCCounterLoop:          ld      a,(Galaxy)
 398+ C466                                      MMUSelectGalaxyA
 398+ C466 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 399+ C469 2A 3E 7F                             ld      hl,(PresentSystemX)
 400+ C46C DD E5                                push    ix
 401+ C46E 7D                                   ld      a,l
 402+ C46F DD BE 03                             cp      (ix+3)                          ; seed x
 403+ C472 20 14                                jr      nz,.ItsNotThisX
 404+ C474 7C                                   ld      a,h
 405+ C475 DD BE 01                             cp      (ix+1)                          ; seed x
 406+ C478 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
 407+ C47A DD E5                                push    ix
 408+ C47C E1                                   pop     hl
 409+ C47D 11 32 7F                             ld      de,PresentSystemSeeds
 410+ C480 CD 90 84                             call    copy_seed
 411+ C483 3E FF                                ld      a,$FF
 412+ C485 DD E1                                pop     ix
 413+ C487 C9                                   ret
 414+ C488 E1           .ItsNotThisX:           pop     hl
 415+ C489 ED 34 08 00                          add     hl,8
 416+ C48D E5                                   push    hl
 417+ C48E DD E1                                pop     ix
 418+ C490 3A A1 7E                             ld		a,(XSAV)
 419+ C493 3D                                   dec		a
 420+ C494 32 A1 7E                             ld      (XSAV),a
 421+ C497 FE 00                                cp		0
 422+ C499 C8                                   ret		z
 423+ C49A 18 C7                                jr		GCCounterLoop
 424+ C49C
# file closed: ./Menus//galactic_chart_menu.asm
1277  C49C                  DISPLAY "Bank ",BankMenuGalCht," - Bytes free ",/D, $2000 - ($-MenuGalChtAddr), " - BankMenuGalCht"
1278  C49C              ; Bank 52  ------------------------------------------------------------------------------------------------------------------------
1279  C49C                  SLOT    MenuInventAddr
1280  C49C                  PAGE    BankMenuInvent
1281  C49C              	ORG     MenuInventAddr
1282  C000                  INCLUDE "./Menus/inventory_menu.asm"
# file opened: ./Menus/inventory_menu.asm
   1+ C000 49 6E 76 65  ivnentory_page_marker   DB "Inventory   PG52"
   1+ C004 6E 74 6F 72
   1+ C008 79 20 20 20
   1+ C00C 50 47 35 32
   2+ C010 48 02 1C C0  inventory_boiler_text	DW $0248,INM_inventory
   3+ C014 08 0B 26 C0  						DW $0B08,INM_fuel
   4+ C018 08 13 2C C0  						DW $1308,INM_cash
   5+ C01C
   6+ C01C 49 4E 56 45  INM_inventory 			DB "INVENTORY",0
   6+ C020 4E 54 4F 52
   6+ C024 59 00
   7+ C026 46 75 65 6C  INM_fuel				DB "Fuel:",0
   7+ C02A 3A 00
   8+ C02C 43 61 73 68  INM_cash				DB "Cash:",0
   8+ C030 3A 00
   9+ C032
  10+ C032 30 30 30 30  txt_inventory_amount	DB "00000",0
  10+ C036 30 00
  11+ C038 00 00        inventory_cursor		DW $0000
  12+ C03A              inv_fuel_position		equ	$0B30
  13+ C03A              inv_cash_position		equ	$1330
  14+ C03A
  15+ C03A              inventory_position		equ $2008
  16+ C03A              inventory_amount		equ $80
  17+ C03A              inventory_uom			equ	$B0
  18+ C03A 00           inv_selected_row        DB 0
  19+ C03B
  20+ C03B 00 00 00...  INM_cash_amount			DS 10
  21+ C045 20 43 72 00  INM_cash_UoM            DB " Cr",0
  22+ C049
  23+ C049 26 00        INM_DispAtoDE:          ld h,0
  24+ C04B 6F                                   ld l,a
  25+ C04C 01 F0 D8                             ld	bc,-10000
  26+ C04F CD 65 C0                             call	.Num1
  27+ C052 01 18 FC                             ld	bc,-1000
  28+ C055 CD 65 C0                             call	.Num1
  29+ C058 01 9C FF                             ld	bc,-100
  30+ C05B CD 65 C0                             call	.Num1
  31+ C05E 0E F6                                ld	c,-10
  32+ C060 CD 65 C0                             call	.Num1
  33+ C063 0E FF                                ld	c,-1
  34+ C065 3E 2F        .Num1:	                ld	a,'0'-1
  35+ C067 3C           .Num2:	                inc	a
  36+ C068 09                                   add	hl,bc
  37+ C069 38 FC                                jr	c,.Num2
  38+ C06B ED 42                                sbc	hl,bc
  39+ C06D 12                                   ld	(de),a
  40+ C06E 13                                   inc	de
  41+ C06F C9                                   ret
  42+ C070
  43+ C070              INM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C070
   2++C070              ;">print_boilder_text hl = text structure, b = message count"
   3++C070 C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C071 4E                                   ld			c,(hl)		; Get Row into b
   5++C072 23                                   inc			hl
   6++C073 46                                   ld			b,(hl)		; Get Col into b
   7++C074 23                                   inc			hl
   8++C075 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C076 23                                   inc			hl
  10++C077 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C078 23                                   inc			hl
  12++C079 E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C07A EB                                   ex			de,hl		; now hl = address of text data
  14++C07B 1E FF                                ld			e,txt_status_colour
  15++C07D C5                                   push		bc
  16++C07E D1                                   pop			de
  17++C07F                                      MMUSelectLayer1
  17++C07F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C083 CD D7 E0                             call		l1_print_at
  19++C086 E1                                   pop			hl
  20++C087 C1                                   pop			bc
  21++C088 10 E6                                djnz		.BoilerTextLoop
  22++C08A C9                                   ret
  23++C08B
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  44+ C08B
  45+ C08B DD 22 2F C1  INM_DispDEIXtoIY:       ld (.inmclcn32z),ix
  46+ C08F ED 53 31 C1                          ld (.inmclcn32zIX),de
  47+ C093 DD 21 2B C1                          ld ix,.inmclcn32t+36
  48+ C097 06 09                                ld b,9
  49+ C099 0E 00                                ld c,0
  50+ C09B 3E 30        .inmclcn321:            ld a,'0'
  51+ C09D B7                                   or a
  52+ C09E DD 5E 00     .inmclcn322:            ld e,(ix+0)
  53+ C0A1 DD 56 01                             ld d,(ix+1)
  54+ C0A4 2A 2F C1                             ld hl,(.inmclcn32z)
  55+ C0A7 ED 52                                sbc hl,de
  56+ C0A9 22 2F C1                             ld (.inmclcn32z),hl
  57+ C0AC DD 5E 02                             ld e,(ix+2)
  58+ C0AF DD 56 03                             ld d,(ix+3)
  59+ C0B2 2A 31 C1                             ld hl,(.inmclcn32zIX)
  60+ C0B5 ED 52                                sbc hl,de
  61+ C0B7 22 31 C1                             ld (.inmclcn32zIX),hl
  62+ C0BA 38 04                                jr c,.inmclcn325
  63+ C0BC 0C                                   inc c
  64+ C0BD 3C                                   inc a
  65+ C0BE 18 DE                                jr .inmclcn322
  66+ C0C0 DD 5E 00     .inmclcn325:            ld e,(ix+0)
  67+ C0C3 DD 56 01                             ld d,(ix+1)
  68+ C0C6 2A 2F C1                             ld hl,(.inmclcn32z)
  69+ C0C9 19                                   add hl,de
  70+ C0CA 22 2F C1                             ld (.inmclcn32z),hl
  71+ C0CD DD 5E 02                             ld e,(ix+2)
  72+ C0D0 DD 56 03                             ld d,(ix+3)
  73+ C0D3 2A 31 C1                             ld hl,(.inmclcn32zIX)
  74+ C0D6 ED 5A                                adc hl,de
  75+ C0D8 22 31 C1                             ld (.inmclcn32zIX),hl
  76+ C0DB 11 FC FF                             ld de,-4
  77+ C0DE DD 19                                add ix,de
  78+ C0E0 0C                                   inc c
  79+ C0E1 0D                                   dec c
  80+ C0E2 28 05                                jr z,.inmclcn323
  81+ C0E4 FD 77 00                             ld (iy+0),a
  82+ C0E7 FD 23                                inc iy
  83+ C0E9 10 B0        .inmclcn323:            djnz .inmclcn321
  84+ C0EB 3A 2F C1                             ld a,(.inmclcn32z)
  85+ C0EE C6 30                                add A,'0'
  86+ C0F0 FD 77 00                             ld (iy+0),a
  87+ C0F3 FD 36 02 00                          ld (iy+2),0
  88+ C0F7 FD 7E 00                             ld      a,(IY+0)
  89+ C0FA FD 77 01                             ld      (IY+1),a
  90+ C0FD 3E 2E                                ld      a,"."
  91+ C0FF FD 77 00                             ld      (IY+0),a
  92+ C102 FD 23                                inc     IY
  93+ C104 FD 23                                inc     IY
  94+ C106 C9                                   ret
  95+ C107 01 00 00 00  .inmclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  95+ C10B 0A 00 00 00
  95+ C10F 64 00 00 00
  95+ C113 E8 03 00 00
  95+ C117 10 27 00 00
  96+ C11B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
  96+ C11F 40 42 0F 00
  96+ C123 80 96 98 00
  96+ C127 00 E1 F5 05
  96+ C12B 00 CA 9A 3B
  97+ C12F 00 00        .inmclcn32z             ds 2
  98+ C131 00 00        .inmclcn32zIX           ds 2
  99+ C133
 100+ C133              INM_GetFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++C133
   2++C133
   3++C133 3A 00 84     	ld		a,(Fuel)
   4++C136 11 2E AE     	ld		de,txt_fuel_level
   5++C139 0E 9C        	ld	c, -100
   6++C13B CD 45 C1     	call	.Num1
   7++C13E 0E F6        	ld	c,-10
   8++C140 CD 45 C1     	call	.Num1
   9++C143 0E FF        	ld	c,-1
  10++C145              .Num1:
  11++C145 06 2F        	ld	b,'0'-1
  12++C147              .Num2:
  13++C147 04           	inc		b
  14++C148 81           	add		a,c
  15++C149 38 FC        	jr		c,.Num2
  16++C14B 91           	sub 	c
  17++C14C C5           	push	bc
  18++C14D F5           	push	af
  19++C14E 79           	ld		a,c
  20++C14F FE FF        	cp		-1
  21++C151 CC 5A C1     	call	z,.InsertDot
  22++C154 78           	ld		a,b
  23++C155 12           	ld		(de),a
  24++C156 13           	inc		de
  25++C157 F1           	pop		af
  26++C158 C1           	pop		bc
  27++C159 C9           	ret
  28++C15A              .InsertDot:
  29++C15A 3E 2E        	ld		a,'.'
  30++C15C 12           	ld		(de),a
  31++C15D 13           	inc		de
  32++C15E C9           	ret
  33++C15F
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 101+ C15F
 102+ C15F              ; "A = stock item number"
 103+ C15F              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C15F 47           PrintInvItem:           ld		b,a
 105+ C160 21 03 84                             ld		hl,CargoTonnes
 106+ C163 ED 31                                add		hl,a
 107+ C165 7E                                   ld		a,(hl)
 108+ C166 4F                                   ld		c,a
 109+ C167 FE 00                                cp		0
 110+ C169 C8                                   ret		z
 111+ C16A 78                                   ld		a,b
 112+ C16B C5                                   push	bc						; push item nbr + quantity
 113+ C16C                                      MMUSelectStockTable
 113+ C16C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 114+ C170 21 88 E0                             ld		hl, StockItemTable
 115+ C173 CD 84 87                             call	getTableText
 116+ C176 7E           .ItemItemName           ld		a,(hl)
 117+ C177 21 29 8C                             ld		hl, WordIdx
 118+ C17A CD 84 87                             call	getTableText
 119+ C17D ED 5B 38 C0                          ld		de,(inventory_cursor)
 120+ C181                                      MMUSelectLayer1
 120+ C181 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 121+ C185 CD D7 E0                             call	l1_print_at
 122+ C188 C1           .ItemAmount:            pop		bc						; b = item number, c = quantity
 123+ C189 C5                                   push	bc
 124+ C18A 79                                   ld		a,c
 125+ C18B 11 32 C0                             ld		de,txt_inventory_amount
 126+ C18E CD 49 C0                             call	INM_DispAtoDE
 127+ C191 21 32 C0                             ld		hl,txt_inventory_amount
 128+ C194 E5                                   push	hl
 129+ C195 7E           .ZeroLoop:              ld		a,(hl)
 130+ C196 FE 30                                cp		'0'
 131+ C198 20 05                                jr		nz,.NotZero
 132+ C19A 36 20        .ZeroDigit:             ld		(hl),' '
 133+ C19C 23                                   inc		hl
 134+ C19D 18 F6                                jr		.ZeroLoop
 135+ C19F ED 5B 38 C0  .NotZero:               ld		de,(inventory_cursor)
 136+ C1A3 E1                                   pop		hl
 137+ C1A4 1E 80                                ld		e,inventory_amount
 138+ C1A6                                      MMUSelectLayer1
 138+ C1A6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 139+ C1AA CD D7 E0                             call	l1_print_at
 140+ C1AD              .ItemMeasure:	        MMUSelectStockTable
 140+ C1AD ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 141+ C1B1 21 88 E0                             ld		hl, StockItemTable
 142+ C1B4 C1                                   pop		bc
 143+ C1B5 78                                   ld		a,b
 144+ C1B6 CD 84 87                             call	getTableText
 145+ C1B9 ED 34 07 00                          add		hl,7
 146+ C1BD 7E                                   ld		a,(hl)
 147+ C1BE 21 29 8C                             ld		hl,WordIdx
 148+ C1C1 CD 84 87                             call	getTableText
 149+ C1C4 ED 5B 38 C0                          ld		de,(inventory_cursor)
 150+ C1C8 1E B0                                ld		e,inventory_uom
 151+ C1CA                                      MMUSelectLayer1
 151+ C1CA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C1CE CD D7 E0                             call	l1_print_at
 153+ C1D1 3A 39 C0                             ld 		a,(inventory_cursor+1)
 154+ C1D4 C6 08                                add		a,8
 155+ C1D6 32 39 C0                             ld 		(inventory_cursor+1),a
 156+ C1D9 C9                                   ret
 157+ C1DA              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ C1DA 2A FE 83     INM_GetCash:            ld		hl,(Cash+2)
 159+ C1DD EB                                   ex      de,hl
 160+ C1DE DD 2A FC 83                          ld      ix,(Cash)
 161+ C1E2 FD 21 3B C0                          ld		iy,INM_cash_amount
 162+ C1E6 CD 8B C0                             call 	INM_DispDEIXtoIY
 163+ C1E9 FD E5                                push    IY
 164+ C1EB D1                                   pop     de
 165+ C1EC 21 45 C0                             ld      hl,INM_cash_UoM
 166+ C1EF 01 04 00                             ld      bc,4
 167+ C1F2 ED B0                                ldir
 168+ C1F4 C9                                   ret
 169+ C1F5              ;----------------------------------------------------------------------------------------------------------------------------------
 170+ C1F5              draw_inventory_menu:    InitNoDoubleBuffer
 170+ C1F5             >                            MMUSelectLayer1
 170+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 170+ C1F9 CD 8F E0    >                            call	l1_cls
 170+ C1FC 3E 07       >                            ld		a,7
 170+ C1FE CD AA E0    >                            call	l1_attr_cls_to_a
 170+ C201             >                            MMUSelectLayer2
 170+ C201 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 170+ C205 CD 0A E0    >                            call    asm_l2_double_buffer_off
 170+ C208 CD 0E E2    >                            call	l2_cls	; Get some space
 170+ C20B             >                            MMUSelectSpriteBank
 170+ C20B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 170+ C20F CD 6E E5    >                            call    sprite_cls_cursors
 171+ C212 3E 08                                ld      a,$08
 172+ C214 32 A9 7E                             ld      (MenuIdMax),a
 173+ C217                                      MMUSelectSpriteBank
 173+ C217 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 174+ C21B CD 6E E5                             call        sprite_cls_cursors
 175+ C21E 01 01 01     .Drawbox:               ld		bc,$0101
 176+ C221 11 FD BE                             ld		de,$BEFD
 177+ C224 3E C0                                ld		a,$C0
 178+ C226                                      MMUSelectLayer2
 178+ C226 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 179+ C22A CD F9 E3                             call	l2_draw_box
 180+ C22D 01 01 0A                             ld		bc,$0A01
 181+ C230 11 C0 FE                             ld		de,$FEC0
 182+ C233 CD 84 E4                             call	l2_draw_horz_line
 183+ C236 06 03        .StaticText:	        ld		b,3
 184+ C238 21 10 C0                             ld		hl,inventory_boiler_text
 185+ C23B CD 70 C0                             call	INM_print_boiler_text
 186+ C23E CD 33 C1     .DisplayFuel:           call	INM_GetFuelLevel
 187+ C241 21 2E AE                             ld		hl, txt_fuel_level
 188+ C244 7E                                   ld		a,(hl)
 189+ C245 FE 30                                cp		'0'
 190+ C247 20 01                                jr		nz,.PrintFuel
 191+ C249 23           .SkipLeadingZero:	    inc		hl
 192+ C24A 1E FF        .PrintFuel:             ld		e,txt_status_colour
 193+ C24C 01 30 0B                             ld		bc,inv_fuel_position
 194+ C24F                                      MMUSelectLayer2
 194+ C24F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ C253 CD 5E E3                             call	l2_print_at
 196+ C256 CD DA C1     .DisplayCash:           call	INM_GetCash
 197+ C259 21 3B C0                             ld		hl,INM_cash_amount
 198+ C25C 1E FF                                ld		e,txt_status_colour
 199+ C25E 01 30 13                             ld		bc,inv_cash_position
 200+ C261                                      MMUSelectLayer2
 200+ C261 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 201+ C265 CD 5E E3                             call	l2_print_at						; now we have the correct integer
 202+ C268 01 30 13                             ld		bc,inv_cash_position
 203+ C26B 21 3B C0                             ld		hl,INM_cash_amount
 204+ C26E 3E 00        .DisplayInventory:      ld		a,0
 205+ C270 21 08 20                             ld		hl,inventory_position
 206+ C273 22 38 C0                             ld		(inventory_cursor),hl
 207+ C276 F5           .InvLoop:	            push	af
 208+ C277 CD 5F C1                             call	PrintInvItem
 209+ C27A F1                                   pop		af
 210+ C27B 3C                                   inc		a
 211+ C27C FE 11                                cp		17
 212+ C27E 38 F6                                jr		c,.InvLoop
 213+ C280 C9                                   ret
 214+ C281
# file closed: ./Menus/inventory_menu.asm
1283  C281                  DISPLAY "Bank ",BankMenuInvent," - Bytes free ",/D, $2000 - ($-MenuInventAddr), " - BankMenuInvent"
1284  C281              ; Bank 53  ------------------------------------------------------------------------------------------------------------------------
1285  C281                  SLOT    MenuSystemAddr
1286  C281                  PAGE    BankMenuSystem
1287  C281              	ORG     MenuSystemAddr
1288  C000                  INCLUDE "./Menus/system_data_menu.asm"
# file opened: ./Menus/system_data_menu.asm
   1+ C000 53 79 73 74  system_data_page_marker DB "System      PG53"
   1+ C004 65 6D 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 35 33
   2+ C010
   3+ C010 40 02 DD 8D  plant_boiler_text		DW $0240,TextBuffer
   4+ C014 80 02 A9 8E  						DW $0280,name_expanded
   5+ C018 08 0B 3B 89  						DW $0B08,WordDistance
   6+ C01C 08 13 44 89  						DW $1308,WordEconomy
   7+ C020 08 1B 4C 89  						DW $1B08,WordGovernment
   8+ C024 08 23 57 89  						DW $2308,WordTechLevel
   9+ C028 08 2B 61 89  						DW $2B08,WordPopulation
  10+ C02C 08 3B 7C 89  						DW $3B08,WordGross
  11+ C030 38 3B 82 89  						DW $3B38,WordProductivity
  12+ C034 08 43 8F 89  						DW $4308,WordAverage
  13+ C038 48 43 97 89  						DW $4348,WordRadius
  14+ C03C 60 0B DD 8D  planet_zero_dist		DW $0B60,TextBuffer
  15+ C040 60 13 DD 8D  planet_economy_disp		DW $1360,TextBuffer
  16+ C044 0A 00        techlevel_value			DB 10,0
  17+ C046 00 00 00...  distance_value          DS 20,0
  18+ C05A 20 4C 69 67  distance_uom            DB " Light Years",0
  18+ C05E 68 74 20 59
  18+ C062 65 61 72 73
  18+ C066 00
  19+ C067 00 00 00...  radius_value            DS 20
  20+ C07B 00                                   DB 0
  21+ C07C 20 6B 6D 00  radius_uom              DB " km",0
  22+ C080 00 00 00...  population_value        DS 20
  23+ C094 00                                   DB 0
  24+ C095 20 42 69 6C  population_uom          DB " Billion",0
  24+ C099 6C 69 6F 6E
  24+ C09D 00
  25+ C09E 00 00 00...  productivity_value      DS 20
  26+ C0B2 00                                   DB 0
  27+ C0B3 20 4D 20 43  productivity_uom        DB " M CR",0
  27+ C0B7 52 00
  28+ C0B9
  29+ C0B9              GovernmentIndexOffset	EQU 75
  30+ C0B9              DistanceScreenPos       EQU $0B60
  31+ C0B9              GovernmentScreenPos		EQU $1B60
  32+ C0B9              TechLevelScreenPos		EQU $2360
  33+ C0B9              SpeciesScreenPos        EQU $3308
  34+ C0B9
  35+ C0B9 00           system_present_or_target DB 0
  36+ C0BA 00 00        saved_present			 DW 0
  37+ C0BC
  38+ C0BC
  39+ C0BC 00 00 00...  SD_present_name         DS  30
  40+ C0DA 00                                   DB  0
  41+ C0DB 00 00 00...  SD_target_name          DS  30
  42+ C0F9 00                                   DB  0
  43+ C0FA 00 00 00...  SD_species              DS 30
  44+ C118 00                                   DB 0
  45+ C119 00 00 00...  SD_planet_description   DS 300,0
  46+ C245
  47+ C245 00           SDDisplayGovernment     DB 0
  48+ C246 00           SDDisplayEconomy        DB 0
  49+ C247 00           SDDisplayTekLevel       DB 0
  50+ C248 00           SDDisplayPopulation     DB 0
  51+ C249 00 00        SDDisplayProductivity   DW 0
  52+ C24B 00 00        SDDisplayRadius         DW 0
  53+ C24D              SDDataLength            EQU $ - SDDisplayEconomy
  54+ C24D
  55+ C24D 21 0A E9     SD_copy_system_data:    ld      hl,GalaxyDisplayGovernment
  56+ C250 11 45 C2                             ld      de,SDDisplayGovernment
  57+ C253 01 07 00                             ld      bc,SDDataLength
  58+ C256 ED B0                                ldir
  59+ C258 21 47 C2     .DisplayTechPlus1:      ld     hl,SDDisplayTekLevel
  60+ C25B 34                                   inc    (hl)
  61+ C25C C9                                   ret
  62+ C25D
  63+ C25D 21 7F E8     SD_copy_to_name:        ld      hl,GalaxyExpandedName
  64+ C260 01 1E 00                             ld      bc,30
  65+ C263 ED B0                                ldir
  66+ C265 C9                                   ret
  67+ C266
  68+ C266 21 64 F1     SD_copy_species:        ld      hl,GalaxySpecies
  69+ C269 11 FA C0                             ld      de,SD_species
  70+ C26C 01 1E 00                             ld      bc,30
  71+ C26F ED B0                                ldir
  72+ C271 C9                                   ret
  73+ C272
  74+ C272 21 85 F1     SD_copy_description:    ld      hl,GalaxyPlanetDescription
  75+ C275 11 19 C1                             ld      de,SD_planet_description
  76+ C278 7E           SDCopyLoop:             ld      a,(hl)
  77+ C279 FE 00                                cp      0
  78+ C27B 28 05                                jr      z,.SD_Copy_Done
  79+ C27D ED A0                                ldi
  80+ C27F C3 78 C2                             jp      SDCopyLoop
  81+ C282 12           .SD_Copy_Done:          ld      (de),a
  82+ C283 C9                                   ret
  83+ C284
  84+ C284 26 00        SDM_DispAtoDE:          ld h,0
  85+ C286 6F                                   ld l,a
  86+ C287 01 F0 D8                             ld	bc,-10000
  87+ C28A CD A0 C2                             call	.Num1
  88+ C28D 01 18 FC                             ld	bc,-1000
  89+ C290 CD A0 C2                             call	.Num1
  90+ C293 01 9C FF                             ld	bc,-100
  91+ C296 CD A0 C2                             call	.Num1
  92+ C299 0E F6                                ld	c,-10
  93+ C29B CD A0 C2                             call	.Num1
  94+ C29E 0E FF                                ld	c,-1
  95+ C2A0 3E 2F        .Num1:	                ld	a,'0'-1
  96+ C2A2 3C           .Num2:	                inc	a
  97+ C2A3 09                                   add	hl,bc
  98+ C2A4 38 FC                                jr	c,.Num2
  99+ C2A6 ED 42                                sbc	hl,bc
 100+ C2A8 12                                   ld	(de),a
 101+ C2A9 13                                   inc	de
 102+ C2AA C9                                   ret
 103+ C2AB
 104+ C2AB
 105+ C2AB 3A 2B 7F     sdm_calc_distance:      ld      a,(Galaxy)
 106+ C2AE                                      MMUSelectGalaxyA
 106+ C2AE ED 92 57    >                     nextreg GalaxyDataMMU,     a
 107+ C2B1 ED 4B 3E 7F                          ld      bc,(PresentSystemX)
 108+ C2B5 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 109+ C2B9 ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 110+ C2BD ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 111+ C2C1 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 112+ C2C4 C9           .done_number:           ret
 113+ C2C5
 114+ C2C5
 115+ C2C5              SDM_print_boiler_text:
 116+ C2C5                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C2C5
   2++C2C5              ;">print_boilder_text hl = text structure, b = message count"
   3++C2C5 C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C2C6 4E                                   ld			c,(hl)		; Get Row into b
   5++C2C7 23                                   inc			hl
   6++C2C8 46                                   ld			b,(hl)		; Get Col into b
   7++C2C9 23                                   inc			hl
   8++C2CA 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C2CB 23                                   inc			hl
  10++C2CC 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C2CD 23                                   inc			hl
  12++C2CE E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C2CF EB                                   ex			de,hl		; now hl = address of text data
  14++C2D0 1E FF                                ld			e,txt_status_colour
  15++C2D2 C5                                   push		bc
  16++C2D3 D1                                   pop			de
  17++C2D4                                      MMUSelectLayer1
  17++C2D4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C2D8 CD D7 E0                             call		l1_print_at
  19++C2DB E1                                   pop			hl
  20++C2DC C1                                   pop			bc
  21++C2DD 10 E6                                djnz		.BoilerTextLoop
  22++C2DF C9                                   ret
  23++C2E0
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 117+ C2E0
 118+ C2E0 7E           PlanetLeftJustifyLoop:  ld      a,(hl)
 119+ C2E1 FE 30                                cp      "0"
 120+ C2E3 C0                                   ret      nz
 121+ C2E4 23                                   inc     hl
 122+ C2E5 10 F9                                djnz    PlanetLeftJustifyLoop
 123+ C2E7 C9                                   ret
 124+ C2E8
 125+ C2E8 00 00        SD_working_cursor       DW   0
 126+ C2EA
 127+ C2EA 00 00 00...  sd_copy_of_seed         DS 6
 128+ C2F0
 129+ C2F0              draw_system_data_menu:  InitNoDoubleBuffer
 129+ C2F0             >                            MMUSelectLayer1
 129+ C2F0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 129+ C2F4 CD 8F E0    >                            call	l1_cls
 129+ C2F7 3E 07       >                            ld		a,7
 129+ C2F9 CD AA E0    >                            call	l1_attr_cls_to_a
 129+ C2FC             >                            MMUSelectLayer2
 129+ C2FC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 129+ C300 CD 0A E0    >                            call    asm_l2_double_buffer_off
 129+ C303 CD 0E E2    >                            call	l2_cls	; Get some space
 129+ C306             >                            MMUSelectSpriteBank
 129+ C306 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 129+ C30A CD 6E E5    >                            call    sprite_cls_cursors
 130+ C30D                                      ZeroA
 130+ C30D AF          >                        xor a
 131+ C30E 32 B9 C0                             ld      (system_present_or_target),a
 132+ C311 3E 08                                ld		a,8
 133+ C313 32 A9 7E                             ld		(MenuIdMax),a
 134+ C316 3A 2B 7F     .SelectGalaxy:          ld      a,(Galaxy)
 135+ C319                                      MMUSelectGalaxyA
 135+ C319 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 136+ C31C ED 4B 40 7F  .CheckCursorOrHome:     ld      bc,(TargetSystemX)              ; Find out if we have to work on hyperspace or normal cursor
 137+ C320 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 138+ C324 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 139+ C328 CD 64 FC                             call    galaxy_system_under_cursor
 140+ C32B FE FF        .IsCursorOnSystem:      cp      $FF                               ; if a = 0 then failed
 141+ C32D 28 0F                                jr      z,.FoundASystem
 142+ C32F ED 4B 3E 7F  .UsePresentSystem:      ld      bc,(PresentSystemX)
 143+ C333 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 144+ C337 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 145+ C33B CD 64 FC                             call    galaxy_system_under_cursor
 146+ C33E ED 4B 40 7F  .FoundASystem:          ld      bc,(TargetSystemX)
 147+ C342 2A 3E 7F                             ld      hl,(PresentSystemX)
 148+ C345 78                                   ld      a,b
 149+ C346 BC                                   cp      h
 150+ C347 20 04                                jr      nz,.DiffCoord
 151+ C349 79                                   ld      a,c
 152+ C34A BD                                   cp      l
 153+ C34B 28 05                                jr      z,.SameCoord
 154+ C34D 3E FF        .DiffCoord:             ld      a,$FF
 155+ C34F 32 B9 C0                             ld      (system_present_or_target),a
 156+ C352 21 2C 7F     .SameCoord:             ld      hl,WorkingSeeds            ; found a system so save it
 157+ C355 11 EA C2                             ld      de,sd_copy_of_seed
 158+ C358 CD 02 FA                             call    galaxy_copy_seed
 159+ C35B CD C5 FA     .GetSystemName:         call    GalaxyDigramWorkings       ; we have galaxy working seed populated now
 160+ C35E 01 01 01     .Drawbox:               ld		bc,$0101
 161+ C361 11 FD BE                             ld		de,$BEFD
 162+ C364 3E C0                                ld		a,$C0
 163+ C366                                      MMUSelectLayer2
 163+ C366 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 164+ C36A CD F9 E3                             call	l2_draw_box
 165+ C36D 01 01 0A                             ld		bc,$0A01
 166+ C370 11 C0 FE                             ld		de,$FEC0
 167+ C373 CD 84 E4                             call	l2_draw_horz_line
 168+ C376 3E 0E        .ExpandStatic:          ld		a,14
 169+ C378 CD 24 8E                             call	expandTokenToString
 170+ C37B 3A 2B 7F     .TargetSystem:          ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 171+ C37E                                      MMUSelectGalaxyA
 171+ C37E ED 92 57    >                     nextreg GalaxyDataMMU,     a
 172+ C381 ED 4B E8 C2                          ld      bc, (SD_working_cursor)
 173+ C385               ;   call    galaxy_name_at_bc
 174+ C385                ;  cp      $FF               ; if we didn't get a
 175+ C385 21 EA C2                             ld      hl,sd_copy_of_seed
 176+ C388 11 F8 E8                             ld      de,GalaxyWorkingSeed
 177+ C38B CD 02 FA                             call    galaxy_copy_seed
 178+ C38E CD 6D F9                             call    galaxy_planet_data                              ; Geneate galaxy data from working seed
 179+ C391 CD 4D C2                             call    SD_copy_system_data
 180+ C394 11 A9 8E                             ld      de,name_expanded
 181+ C397 CD 5D C2                             call    SD_copy_to_name
 181+ C39A
 182+ C39A 11 98 13                             ld      de,hyperspace_position
 183+ C39D 21 A9 8E                             ld      hl,name_expanded
 184+ C3A0 06 0B        .StaticText:	        ld		b,11
 185+ C3A2 21 10 C0                             ld		hl,plant_boiler_text
 186+ C3A5 CD C5 C2                             call	SDM_print_boiler_text
 187+ C3A8 3A B9 C0     .CalcDistance:          ld		a,(system_present_or_target)
 188+ C3AB FE 00                                cp		0
 189+ C3AD 28 2B                                jr		z,.ZeroDistance
 190+ C3AF CD AB C2     .NotZero:               call    sdm_calc_distance
 191+ C3B2 DD 2A 60 7F  .DisplayDistance:       ld      ix,(Distance)
 192+ C3B6 11 00 00                             ld      de,0
 193+ C3B9 FD 21 46 C0                          ld      iy,distance_value
 194+ C3BD CD CA 99                             call    DispDEIXtoIY1DP
 195+ C3C0 FD E5        .AddDistUo              push    iy
 196+ C3C2 E1                                   pop     hl
 197+ C3C3 23                                   inc     hl
 198+ C3C4 11 5A C0                             ld      de,distance_uom
 199+ C3C7 CD F0 C4                             call    SDTackOnUOMtoHL
 200+ C3CA 11 60 0B                             ld      de,DistanceScreenPos
 201+ C3CD 21 46 C0                             ld      hl,distance_value
 202+ C3D0                                      MMUSelectLayer1
 202+ C3D0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 203+ C3D4 CD D7 E0                             call	l1_print_at
 204+ C3D7 C3 E7 C3                             jp      .DisplayEconomy
 205+ C3DA 3E 18        .ZeroDistance:          ld		a,24						; print literal zero dist
 206+ C3DC CD 24 8E                             call	expandTokenToString
 207+ C3DF 06 01                                ld		b,1
 208+ C3E1 21 3C C0                             ld		hl,planet_zero_dist
 209+ C3E4 CD C5 C2                             call	SDM_print_boiler_text
 210+ C3E7 3A 46 C2     .DisplayEconomy:        ld		a,(SDDisplayEconomy)
 211+ C3EA C6 0F                                add     a,TextEconomyOffset
 212+ C3EC CD 24 8E                             call	expandTokenToString
 213+ C3EF 06 01                                ld		b,1
 214+ C3F1 21 40 C0                             ld		hl,planet_economy_disp
 215+ C3F4 CD C5 C2                             call	SDM_print_boiler_text
 216+ C3F7 3A 45 C2     .DisplayGovernment:     ld		a,(SDDisplayGovernment)
 217+ C3FA C6 4B                                add		a,TextGovOffset
 218+ C3FC CD 16 8E                             call	WordIndexToAddress
 219+ C3FF 11 60 1B                             ld		de,GovernmentScreenPos
 220+ C402                                      MMUSelectLayer1
 220+ C402 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 221+ C406 CD D7 E0                             call	l1_print_at
 222+ C409 3A 47 C2     .DisplayTechLevel:      ld		a,(SDDisplayTekLevel)
 223+ C40C 11 44 C0                             ld		de,techlevel_value
 224+ C40F CD 84 C2                             call    SDM_DispAtoDE
 225+ C412 AF                                   xor     a
 226+ C413 12                                   ld      (de),a
 227+ C414 21 44 C0                             ld      hl,techlevel_value
 228+ C417 06 05                                ld      b,5
 229+ C419 CD E0 C2                             call    PlanetLeftJustifyLoop
 230+ C41C 11 60 23                             ld		de,TechLevelScreenPos
 231+ C41F                                      MMUSelectLayer1
 231+ C41F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 232+ C423 CD D7 E0                             call	l1_print_at
 233+ C426 3A 48 C2     .DisplayPopulation:     ld      a,(SDDisplayPopulation)
 234+ C429 DD 26 00                             ld      ixh,0
 235+ C42C DD 6F                                ld      ixl,a
 236+ C42E 11 00 00                             ld      de,0
 237+ C431 FD 21 80 C0                          ld      iy,population_value
 238+ C435 CD CA 99                             call    DispDEIXtoIY1DP
 239+ C438 FD E5        .AddUoM:                push    iy
 240+ C43A E1                                   pop     hl
 241+ C43B 23                                   inc     hl
 242+ C43C 11 95 C0                             ld      de,population_uom
 243+ C43F CD F0 C4                             call    SDTackOnUOMtoHL
 244+ C442 11 60 2B                             ld      de,$2B60
 245+ C445 21 80 C0                             ld      hl,population_value
 246+ C448                                      MMUSelectLayer1
 246+ C448 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 247+ C44C CD D7 E0                             call	l1_print_at
 248+ C44F              ;SDDisplayPopulation     DB 0
 249+ C44F 3A 2B 7F     .DisplayPopulationType: ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 250+ C452                                      MMUSelectGalaxyA
 250+ C452 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 251+ C455 CD DC F6                             call    galaxy_get_species
 252+ C458 CD 66 C2                             call    SD_copy_species
 253+ C45B 21 FA C0                             ld		hl,SD_species
 254+ C45E 11 08 33                             ld		de,SpeciesScreenPos
 255+ C461                                      MMUSelectLayer1
 255+ C461 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 256+ C465 CD D7 E0                             call	l1_print_at
 257+ C468 2A 49 C2     .DisplayProductivity:   ld      hl,(SDDisplayProductivity)
 258+ C46B E5                                   push    hl
 259+ C46C DD E1                                pop     ix
 260+ C46E 11 00 00                             ld      de,0
 261+ C471 FD 21 9E C0                          ld      iy,productivity_value
 262+ C475 CD D9 99                             call    DispDEIXtoIY
 263+ C478 FD E5        .AddProdUoM:            push    iy
 264+ C47A E1                                   pop     hl
 265+ C47B 23                                   inc     hl
 266+ C47C 11 B3 C0                             ld      de,productivity_uom
 267+ C47F CD F0 C4                             call    SDTackOnUOMtoHL
 268+ C482 11 A0 3B                             ld      de,$3BA0
 269+ C485 21 9E C0                             ld      hl,productivity_value
 270+ C488                                      MMUSelectLayer1
 270+ C488 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 271+ C48C CD D7 E0                             call	l1_print_at
 272+ C48F 3A 2B 7F     .DisplayRadius:         ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 273+ C492                                      MMUSelectGalaxyA
 273+ C492 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 274+ C495 2A 10 E9                             ld      hl,(GalaxyDisplayRadius)
 275+ C498 E5                                   push    hl
 276+ C499 DD E1                                pop     ix
 277+ C49B 11 00 00                             ld      de,0
 278+ C49E FD 21 67 C0                          ld      iy,radius_value
 279+ C4A2 CD D9 99                             call    DispDEIXtoIY
 280+ C4A5 FD E5        .AddRadiusUoM:          push    iy
 281+ C4A7 E1                                   pop     hl
 282+ C4A8 23                                   inc     hl
 283+ C4A9 11 7C C0                             ld      de,radius_uom
 284+ C4AC CD F0 C4                             call    SDTackOnUOMtoHL
 285+ C4AF 21 67 C0                             ld      hl,radius_value
 286+ C4B2 11 A0 43                             ld      de,$43A0
 287+ C4B5                                      MMUSelectLayer1
 287+ C4B5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 288+ C4B9 CD D7 E0                             call	l1_print_at
 289+ C4BC 3A 2B 7F     .DisplayDescription:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 290+ C4BF                                      MMUSelectGalaxyA
 290+ C4BF ED 92 57    >                     nextreg GalaxyDataMMU,     a
 291+ C4C2 11 F8 E8     .CopySaveToGal:         ld      de,GalaxyWorkingSeed
 292+ C4C5 21 EA C2                             ld      hl,sd_copy_of_seed
 293+ C4C8 CD 02 FA                             call    galaxy_copy_seed
 294+ C4CB ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 295+ C4CF CD 6F F8                             call     GalaxyGenerateDesc
 296+ C4D2 CD 72 C2                             call    SD_copy_description
 297+ C4D5 11 08 57                             ld      de,$5708
 298+ C4D8 21 19 C1                             ld      hl,SD_planet_description
 299+ C4DB                                      MMUSelectLayer1
 299+ C4DB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 300+ C4DF CD 24 E1                             call	l1_print_at_wrap
 301+ C4E2 C9                                   ret
 302+ C4E3
 303+ C4E3              ; HL = value to add on
 304+ C4E3              ; de = Unit of Measure
 305+ C4E3 7E           SDAddUoMtoHL:           ld      a,(hl)
 306+ C4E4 FE 00                                cp      0
 307+ C4E6 28 03                                jr      z,.FoundEnd
 308+ C4E8 23                                   inc     hl
 309+ C4E9 18 F8                                jr      SDAddUoMtoHL
 310+ C4EB EB           .FoundEnd:              ex      de,hl
 311+ C4EC CD 78 C2                             call    SDCopyLoop
 312+ C4EF C9                                   ret
 313+ C4F0
 314+ C4F0              ; works on HL already being at end
 315+ C4F0              ; de = Unit of Measure
 316+ C4F0 23           SDTackOnUOMtoHL:        inc     hl
 317+ C4F1 EB                                   ex      hl,de
 318+ C4F2 CD 78 C2                             call    SDCopyLoop
 319+ C4F5 C9                                   ret
 320+ C4F6              ;
 321+ C4F6              ;
 322+ C4F6              ;    SDDisplayEconomy        DB 0
 323+ C4F6              ;SDDisplayGovernment     DB 0
 324+ C4F6              ;SDDisplayEcononmy       DB 0
 325+ C4F6              ;SDDisplayTekLevel       DB 0
 326+ C4F6              ;
 327+ C4F6              ;SDDisplayProductivity   DW 0
 328+ C4F6              ;SDDisplayRadius         DW 0
 329+ C4F6              ;SDDataLength            EQU $ - SDDisplayEconomy
 330+ C4F6              ;
 331+ C4F6
 332+ C4F6
 333+ C4F6
 334+ C4F6
 335+ C4F6
 336+ C4F6              ;; PREsent ssytem
 337+ C4F6              ;; hyperspace systrem
 338+ C4F6              ;.StatusText:
 339+ C4F6              ;	; get closet ssytem to cursor
 340+ C4F6              ;	call	get_cmdr_condition
 341+ C4F6              ;	ld		hl, ConditionNameIdx
 342+ C4F6              ;	call	getTableText
 343+ C4F6              ;	ld		de,condition_position
 344+ C4F6              ;	call	l1_print_at
 345+ C4F6              ;.DisplayFuel:
 346+ C4F6              ;	call	GetFuelLevel
 347+ C4F6              ;	ld		hl, txt_fuel_level
 348+ C4F6              ;	ld		a,(hl)
 349+ C4F6              ;	cp		'0'
 350+ C4F6              ;	jr		nz,.PrintFuel
 351+ C4F6              ;.SkipLeadingZero:
 352+ C4F6              ;	inc		hl
 353+ C4F6              ;.PrintFuel:
 354+ C4F6              ;	ld		de,fuel_position
 355+ C4F6              ;	call	l1_print_at
 356+ C4F6              ;.DisplayCash:
 357+ C4F6              ;	call	GetCash
 358+ C4F6              ;	ld		hl,txt_cash_amount
 359+ C4F6              ;	ld		de,cash_position
 360+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 361+ C4F6              ;	ld		bc,cash_position
 362+ C4F6              ;	ld		hl,txt_cash_amount
 363+ C4F6              ;.CorrectPosition:
 364+ C4F6              ;	ld		a,(hl)
 365+ C4F6              ;	cp		0
 366+ C4F6              ;	jr		z,.DoneCorrection
 367+ C4F6              ;.StillDigits:
 368+ C4F6              ;	ld		a,c
 369+ C4F6              ;	add		a,8								; its 1 character forwards
 370+ C4F6              ;	ld		c,a
 371+ C4F6              ;	inc		hl
 372+ C4F6              ;	jr		.CorrectPosition
 373+ C4F6              ;.DoneCorrection:
 374+ C4F6              ;	ld		hl,txt_cash_decimal
 375+ C4F6              ;	ld		d,b
 376+ C4F6              ;	ld		e,c
 377+ C4F6              ;	call	l1_print_at
 378+ C4F6              ;.PrintLegalStatus:
 379+ C4F6              ;	ld		a,(FugitiveInnocentStatus)
 380+ C4F6              ;	cp		0
 381+ C4F6              ;	jr		nz,.Naughty
 382+ C4F6              ;	ld		hl,WordClean
 383+ C4F6              ;	jr		.DisplayLegalStatus
 384+ C4F6              ;.Naughty:
 385+ C4F6              ;	cp		50
 386+ C4F6              ;	jr		c,.JustOffender
 387+ C4F6              ;.VeryNaughty:
 388+ C4F6              ;	ld		hl,WordFugitive
 389+ C4F6              ;	jr		.DisplayLegalStatus
 390+ C4F6              ;.JustOffender:
 391+ C4F6              ;	ld		hl,WordOffender
 392+ C4F6              ;.DisplayLegalStatus:
 393+ C4F6              ;	ld		de,legal_status_position
 394+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 395+ C4F6              ;
 396+ C4F6 C9           	ret
 397+ C4F7
# file closed: ./Menus/system_data_menu.asm
1289  C4F7                  DISPLAY "Bank ",BankMenuSystem," - Bytes free ",/D, $2000 - ($-MenuSystemAddr), " - BankMenuSystem"
1290  C4F7              ; Bank 54  ------------------------------------------------------------------------------------------------------------------------
1291  C4F7                  SLOT    MenuMarketAddr
1292  C4F7                  PAGE    BankMenuMarket
1293  C4F7                  ORG     MenuMarketAddr
1294  C000                  INCLUDE "./Menus/market_prices_menu.asm"
# file opened: ./Menus/market_prices_menu.asm
   1+ C000 4D 61 72 6B  market_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 DD 8D  market_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 A9 8E  						DW $0220,name_expanded
   4+ C018 80 0B 2B 88  						DW $0B80,WordUnit
   5+ C01C B0 0B 74 8A  						DW $0BB0,WordQuantity
   6+ C020 08 13 52 8A  						DW $1308,WordProduct
   7+ C024 60 13 5A 8A  						DW $1360,WordUoM
   8+ C028 80 13 5E 8A  						DW $1380,WordPrice
   9+ C02C B0 13 82 8A  						DW $13B0,WordStock
  10+ C030 E0 13 7E 8A  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_market_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_market_quantity     DB "999",0
  24+ C03D 39 39 39 00  txt_market_cargo        DB "999",0
  25+ C041 00 00        market_cursor			DW  $0000
  26+ C043              market_position			equ $2008
  27+ C043              market_uom				equ	$68
  28+ C043              market_price 			equ $88
  29+ C043              market_Quantity			equ	$B0
  30+ C043              market_Cargo            equ $E0
  31+ C043              market_UomOffset		equ 46
  32+ C043 20 20 20 20  market_blank_line       DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mkt_hold_level          DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mkt_cash				DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mkt_selected_row        db  0
  36+ C075
  37+ C075              mkt_cash_position       equ $B048
  38+ C075 00 00 00...  mkt_cash_amount			DS 20
  39+ C089 20 43 72 20  mkt_cash_UoM            DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mkt_cargo_position      equ $A848
  41+ C094 00 00 00...  mkt_cargo_amount		DS 20
  42+ C0A8 20 54 6F 6E  mkt_cargo_UoM           DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ C0B3 3A 74 C0     mkt_highlight_row:      ld      a,(mkt_selected_row)
  47+ C0B6 C6 04                                add     a,4
  48+ C0B8 57                                   ld      d,a
  49+ C0B9 1E 56                                ld      e,L1InvHighlight
  50+ C0BB                                      MMUSelectLayer1
  50+ C0BB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ C0BF CD 3F E0                             call    l1_hilight_row
  52+ C0C2 C9                                   ret
  53+ C0C3              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ C0C3 3A 74 C0     mkt_lowlight_row        ld      a,(mkt_selected_row)
  55+ C0C6 C6 04                                add     a,4
  56+ C0C8 57                                   ld      d,a
  57+ C0C9 1E 07                                ld      e,L1InvLowlight
  58+ C0CB                                      MMUSelectLayer1
  58+ C0CB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  59+ C0CF CD 3F E0                             call    l1_hilight_row
  60+ C0D2 C9                                   ret
  61+ C0D3              ;----------------------------------------------------------------------------------------------------------------------------------
  62+ C0D3 CD EA C0     MKT_DispDEIXtoIY1DP:    call    MKT_DispDEIXtoIY
  63+ C0D6 FD 36 02 00                          ld (iy+2),0
  64+ C0DA FD 7E 00                             ld      a,(IY+0)
  65+ C0DD FD 77 01                             ld      (IY+1),a
  66+ C0E0 3E 2E                                ld      a,"."
  67+ C0E2 FD 77 00                             ld      (IY+0),a
  68+ C0E5 FD 23                                inc     IY
  69+ C0E7 FD 23                                inc     IY
  70+ C0E9 C9                                   ret
  71+ C0EA              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ C0EA DD 22 7F C1  MKT_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  73+ C0EE ED 53 81 C1                          ld (.MKTclcn32zIX),de
  74+ C0F2 DD 21 7B C1                          ld ix,.MKTclcn32t+36
  75+ C0F6 06 09                                ld b,9
  76+ C0F8 0E 00                                ld c,0
  77+ C0FA 3E 30        .MKTclcn321:            ld a,'0'
  78+ C0FC B7                                   or a
  79+ C0FD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  80+ C100 DD 56 01                             ld d,(ix+1)
  81+ C103 2A 7F C1                             ld hl,(.MKTclcn32z)
  82+ C106 ED 52                                sbc hl,de
  83+ C108 22 7F C1                             ld (.MKTclcn32z),hl
  84+ C10B DD 5E 02                             ld e,(ix+2)
  85+ C10E DD 56 03                             ld d,(ix+3)
  86+ C111 2A 81 C1                             ld hl,(.MKTclcn32zIX)
  87+ C114 ED 52                                sbc hl,de
  88+ C116 22 81 C1                             ld (.MKTclcn32zIX),hl
  89+ C119 38 04                                jr c,.MKTclcn325
  90+ C11B 0C                                   inc c
  91+ C11C 3C                                   inc a
  92+ C11D 18 DE                                jr .MKTclcn322
  93+ C11F DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  94+ C122 DD 56 01                             ld d,(ix+1)
  95+ C125 2A 7F C1                             ld hl,(.MKTclcn32z)
  96+ C128 19                                   add hl,de
  97+ C129 22 7F C1                             ld (.MKTclcn32z),hl
  98+ C12C DD 5E 02                             ld e,(ix+2)
  99+ C12F DD 56 03                             ld d,(ix+3)
 100+ C132 2A 81 C1                             ld hl,(.MKTclcn32zIX)
 101+ C135 ED 5A                                adc hl,de
 102+ C137 22 81 C1                             ld (.MKTclcn32zIX),hl
 103+ C13A 11 FC FF                             ld de,-4
 104+ C13D DD 19                                add ix,de
 105+ C13F 0C                                   inc c
 106+ C140 0D                                   dec c
 107+ C141 28 05                                jr z,.MKTclcn323
 108+ C143 FD 77 00                             ld (iy+0),a
 109+ C146 FD 23                                inc iy
 110+ C148 10 B0        .MKTclcn323:            djnz .MKTclcn321
 111+ C14A 3A 7F C1                             ld a,(.MKTclcn32z)
 112+ C14D C6 30                                add A,'0'
 113+ C14F FD 77 00                             ld (iy+0),a
 114+ C152 FD 36 01 00                          ld (iy+1),0
 115+ C156 C9                                   ret
 116+ C157 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 116+ C15B 0A 00 00 00
 116+ C15F 64 00 00 00
 116+ C163 E8 03 00 00
 116+ C167 10 27 00 00
 117+ C16B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 117+ C16F 40 42 0F 00
 117+ C173 80 96 98 00
 117+ C177 00 E1 F5 05
 117+ C17B 00 CA 9A 3B
 118+ C17F 00 00        .MKTclcn32z             ds 2
 119+ C181 00 00        .MKTclcn32zIX           ds 2
 120+ C183              ;----------------------------------------------------------------------------------------------------------------------------------
 121+ C183              ; "DispHL, writes HL to DE address"
 122+ C183 01 F0 D8     MPM_DispHLtoDE:         ld	bc,-10000
 123+ C186 CD 9C C1                             call	MPM_Num1
 124+ C189 01 18 FC                             ld	bc,-1000
 125+ C18C CD 9C C1                             call	MPM_Num1
 126+ C18F 01 9C FF                             ld	bc,-100
 127+ C192 CD 9C C1                             call	MPM_Num1
 128+ C195 0E F6                                ld	c,-10
 129+ C197 CD 9C C1                             call	MPM_Num1
 130+ C19A 0E FF                                ld	c,-1
 131+ C19C 3E 2F        MPM_Num1:	            ld	a,'0'-1
 132+ C19E 3C           .Num2:	                inc	a
 133+ C19F 09                                   add	hl,bc
 134+ C1A0 38 FC                                jr	c,.Num2
 135+ C1A2 ED 42                                sbc	hl,bc
 136+ C1A4 12                                   ld	(de),a
 137+ C1A5 13                                   inc	de
 138+ C1A6 C9                                   ret
 139+ C1A7              ;----------------------------------------------------------------------------------------------------------------------------------
 140+ C1A7 26 00        MPM_DispAtoDE:          ld h,0
 141+ C1A9 6F                                   ld l,a
 142+ C1AA C3 83 C1                             jp MPM_DispHLtoDE
 143+ C1AD              ;----------------------------------------------------------------------------------------------------------------------------------
 144+ C1AD 26 00        MPM_DispPriceAtoDE:     ld h,0
 145+ C1AF 6F                                   ld l,a
 146+ C1B0 01 9C FF                             ld	bc,-100
 147+ C1B3 CD C3 C1                             call	.NumLeadBlank1
 148+ C1B6 0E F6                                ld	c,-10
 149+ C1B8 CD 9C C1                             call	MPM_Num1
 150+ C1BB 3E 2E                                ld		a,'.'					; we could assume preformat but
 151+ C1BD                                                  DISPLAY "TODO: optimise"
 152+ C1BD 12                                   ld		(de),a					; we can optimse that later TODO
 153+ C1BE 13                                   inc		de						; with just an inc De
 154+ C1BF 0E FF                                ld	c,-1
 155+ C1C1 18 D9                                jr		MPM_Num1
 156+ C1C3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 157+ C1C5 3C           .NumLeadBlank2:	        inc	a
 158+ C1C6 09                                   add	hl,bc
 159+ C1C7 38 FC                                jr	c,.NumLeadBlank2
 160+ C1C9 FE 30                                cp	'0'
 161+ C1CB 20 02                                jr	nz,.DontBlank
 162+ C1CD 3E 20        .Blank:                 ld	a,' '
 163+ C1CF ED 42        .DontBlank:	            sbc	hl,bc
 164+ C1D1 12                                   ld	(de),a
 165+ C1D2 13                                   inc	de
 166+ C1D3 C9                                   ret
 167+ C1D4              ;----------------------------------------------------------------------------------------------------------------------------------
 168+ C1D4 FE 00        MPM_DispQtyAtoDE:       cp	0
 169+ C1D6 28 30                                jr	z,.NoStock
 170+ C1D8 26 00                                ld h,0
 171+ C1DA 6F                                   ld l,a
 172+ C1DB 01 9C FF                             ld	bc,-100
 173+ C1DE CD F7 C1                             call	.NumLeadBlank1
 174+ C1E1 FE 20        .WasLead0:              cp      ' '
 175+ C1E3 20 09                                jr      nz,.NotHundredsZero
 176+ C1E5 0E F6                                ld	c,-10
 177+ C1E7 CD F7 C1                             call	.NumLeadBlank1
 178+ C1EA 0E FF                                ld	c,-1
 179+ C1EC 18 AE                                jr		MPM_Num1
 180+ C1EE 0E F6        .NotHundredsZero:       ld	c,-10
 181+ C1F0 CD 9C C1                             call	MPM_Num1
 182+ C1F3 0E FF                                ld	c,-1
 183+ C1F5 18 A5                                jr		MPM_Num1
 184+ C1F7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 185+ C1F9 3C           .NumLeadBlank2:	        inc	a
 186+ C1FA 09                                   add	hl,bc
 187+ C1FB 38 FC                                jr	c,.NumLeadBlank2
 188+ C1FD FE 30                                cp	'0'
 189+ C1FF 20 02                                jr	nz,.DontBlank
 190+ C201 3E 20        .Blank:                 ld	a,' '
 191+ C203 ED 42        .DontBlank:	            sbc	hl,bc
 192+ C205 12                                   ld	(de),a
 193+ C206 13                                   inc	de
 194+ C207 C9                                   ret
 195+ C208 3E 20        .NoStock:               ld	a,' '
 196+ C20A 12                                   ld	(de),a
 197+ C20B 13                                   inc	de
 198+ C20C 12                                   ld	(de),a
 199+ C20D 13                                   inc	de
 200+ C20E 3E 2D                                ld	a,'-'
 201+ C210 12                                   ld	(de),a
 202+ C211 13                                   inc de
 203+ C212 C9                                   ret
 204+ C213              ;----------------------------------------------------------------------------------------------------------------------------------
 205+ C213              MPM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C213
   2++C213              ;">print_boilder_text hl = text structure, b = message count"
   3++C213 C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C214 4E                                   ld			c,(hl)		; Get Row into b
   5++C215 23                                   inc			hl
   6++C216 46                                   ld			b,(hl)		; Get Col into b
   7++C217 23                                   inc			hl
   8++C218 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C219 23                                   inc			hl
  10++C21A 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C21B 23                                   inc			hl
  12++C21C E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C21D EB                                   ex			de,hl		; now hl = address of text data
  14++C21E 1E FF                                ld			e,txt_status_colour
  15++C220 C5                                   push		bc
  16++C221 D1                                   pop			de
  17++C222                                      MMUSelectLayer1
  17++C222 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C226 CD D7 E0                             call		l1_print_at
  19++C229 E1                                   pop			hl
  20++C22A C1                                   pop			bc
  21++C22B 10 E6                                djnz		.BoilerTextLoop
  22++C22D C9                                   ret
  23++C22E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 206+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 207+ C22E 2A FE 83     MKT_GetCash:            ld		hl,(Cash+2)
 208+ C231 EB                                   ex      de,hl
 209+ C232 DD 2A FC 83                          ld      ix,(Cash)
 210+ C236 FD 21 75 C0                          ld		iy,mkt_cash_amount
 211+ C23A CD D3 C0                             call 	MKT_DispDEIXtoIY1DP
 212+ C23D FD E5                                push    IY
 213+ C23F D1                                   pop     de
 214+ C240 21 89 C0                             ld      hl,mkt_cash_UoM
 215+ C243 01 0B 00                             ld      bc,11
 216+ C246 ED B0                                ldir
 217+ C248 C9                                   ret
 218+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 219+ C249 11 00 00     MKT_GetCargo:   	    ld      de,0
 220+ C24C DD 21 00 00                          ld      ix,0
 221+ C250 3A 02 84                             ld      a,(CargoRunningLoad)
 222+ C253 DD 6F                                ld      ixl,a
 223+ C255 FD 21 94 C0                          ld		iy,mkt_cargo_amount
 224+ C259 CD EA C0                             call 	MKT_DispDEIXtoIY
 225+ C25C FD E5                                push    IY
 226+ C25E D1                                   pop     de
 227+ C25F 13                                   inc     de
 228+ C260 21 A8 C0                             ld      hl,mkt_cargo_UoM
 229+ C263 01 0B 00                             ld      bc,11
 230+ C266 ED B0                                ldir
 231+ C268 C9                                   ret
 232+ C269              ;----------------------------------------------------------------------------------------------------------------------------------
 233+ C269 CD 49 C2     MKT_DisplayCargo:       call	MKT_GetCargo
 234+ C26C 21 94 C0                             ld		hl,mkt_cargo_amount
 235+ C26F 11 48 A8                             ld      de,mkt_cargo_position
 236+ C272                                      MMUSelectLayer1
 236+ C272 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 237+ C276 CD D7 E0                             call	l1_print_at
 238+ C279 C9                                   ret
 239+ C27A              ;----------------------------------------------------------------------------------------------------------------------------------
 240+ C27A CD 2E C2     MKT_DisplayCash:        call	MKT_GetCash
 241+ C27D 21 75 C0                             ld		hl,mkt_cash_amount
 242+ C280 11 48 B0                             ld      de,mkt_cash_position
 243+ C283                                      MMUSelectLayer1
 243+ C283 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 244+ C287 CD D7 E0                             call	l1_print_at
 245+ C28A C9                                   ret
 246+ C28B              ;----------------------------------------------------------------------------------------------------------------------------------
 247+ C28B              ; "A = stock item number"
 248+ C28B F5           PrintMarketItem:        push     af
 249+ C28C 21 08 20                             ld      hl,market_position  ; hl = base cursor position + row number * 8
 250+ C28F 57                                   ld      d,a                 ; .
 251+ C290 1E 08                                ld      e,8                 ; .
 252+ C292 ED 30                                mul                         ; .
 253+ C294 53                                   ld      d,e                 ; .
 254+ C295 1E 00                                ld      e,0                 ; .
 255+ C297 19                                   add     hl,de               ; .
 256+ C298 22 41 C0                             ld      (market_cursor),hl  ; save in market cursor and copy to de
 257+ C29B EB                                   ex      hl,de               ; .
 258+ C29C 21 43 C0                             ld      hl,market_blank_line; hl = blank line text
 259+ C29F                                      MMUSelectLayer1             ; print blank line (hl) and position DE
 259+ C29F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 260+ C2A3 CD D7 E0                             call	l1_print_at         ; .
 261+ C2A6 F1                                   pop     af
 262+ C2A7 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 263+ C2AB FD 21 03 84                          ld      iy,CargoTonnes
 264+ C2AF 1E 08                                ld		e,8
 265+ C2B1 57                                   ld		d,a
 266+ C2B2 ED 30                                mul
 267+ C2B4 DD 19                                add		ix,de				; Move down a row ix += a * 8
 268+ C2B6 16 00                                ld      d,0
 269+ C2B8 5F                                   ld      e,a
 270+ C2B9 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 271+ C2BB              .GetName:               MMUSelectStockTable
 271+ C2BB ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 272+ C2BF DD 7E 00                             ld		a,(ix+0)
 273+ C2C2 21 29 8C                             ld		hl,WordIdx
 274+ C2C5 CD 84 87                             call	getTableText
 275+ C2C8 ED 5B 41 C0                          ld		de,(market_cursor)
 276+ C2CC                                      MMUSelectLayer1
 276+ C2CC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 277+ C2D0 CD D7 E0                             call	l1_print_at
 278+ C2D3              .GetUom                 MMUSelectStockTable
 278+ C2D3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 279+ C2D7 DD 7E 07                             ld		a,(ix+7)
 280+ C2DA C6 2E                                add		a,market_UomOffset
 281+ C2DC 21 29 8C                             ld		hl,WordIdx
 282+ C2DF CD 84 87                             call	getTableText
 283+ C2E2 ED 5B 41 C0                          ld		de,(market_cursor)
 284+ C2E6 1E 68                                ld		e,market_uom
 285+ C2E8                                      MMUSelectLayer1
 285+ C2E8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 286+ C2EC CD D7 E0                             call	l1_print_at
 287+ C2EF              .GetPrice:              MMUSelectStockTable
 287+ C2EF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 288+ C2F3 DD 7E 02                             ld		a,(ix+2)
 289+ C2F6 11 34 C0                             ld		de,txt_market_amount
 290+ C2F9 CD AD C1                             call	MPM_DispPriceAtoDE
 291+ C2FC 21 34 C0                             ld		hl,txt_market_amount
 292+ C2FF ED 5B 41 C0                          ld		de,(market_cursor)
 293+ C303 1E 88                                ld		e,market_price
 294+ C305                                      MMUSelectLayer1
 294+ C305 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 295+ C309 CD D7 E0                             call	l1_print_at
 296+ C30C              .GetQty:                MMUSelectStockTable
 296+ C30C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 297+ C310 DD 7E 01                             ld		a,(ix+1)
 298+ C313 11 39 C0                             ld		de,txt_market_quantity
 299+ C316 CD D4 C1                             call	MPM_DispQtyAtoDE
 300+ C319 21 39 C0                             ld		hl,txt_market_quantity
 301+ C31C ED 5B 41 C0                          ld		de,(market_cursor)
 302+ C320 1E B0                                ld		e,market_Quantity
 303+ C322                                      MMUSelectLayer1
 303+ C322 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 304+ C326 CD D7 E0                             call	l1_print_at
 305+ C329 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 306+ C32C 11 3D C0                             ld      de,txt_market_cargo
 307+ C32F CD D4 C1                             call	MPM_DispQtyAtoDE
 308+ C332 21 3D C0                             ld      hl,txt_market_cargo
 309+ C335 ED 5B 41 C0                          ld      de,(market_cursor)
 310+ C339 1E E0                                ld      e,market_Cargo
 311+ C33B                                      MMUSelectLayer1
 311+ C33B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 312+ C33F CD D7 E0                             call	l1_print_at
 313+ C342 C9                                   ret
 314+ C343
 315+ C343              draw_market_prices_menu:InitNoDoubleBuffer
 315+ C343             >                            MMUSelectLayer1
 315+ C343 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 315+ C347 CD 8F E0    >                            call	l1_cls
 315+ C34A 3E 07       >                            ld		a,7
 315+ C34C CD AA E0    >                            call	l1_attr_cls_to_a
 315+ C34F             >                            MMUSelectLayer2
 315+ C34F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 315+ C353 CD 0A E0    >                            call    asm_l2_double_buffer_off
 315+ C356 CD 0E E2    >                            call	l2_cls	; Get some space
 315+ C359             >                            MMUSelectSpriteBank
 315+ C359 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 315+ C35D CD 6E E5    >                            call    sprite_cls_cursors
 316+ C360 3E 20                                ld      a,$20
 317+ C362 32 A9 7E                             ld      (MenuIdMax),a
 318+ C365 01 01 01     .Drawbox:               ld		bc,$0101
 319+ C368 11 FD BE                             ld		de,$BEFD
 320+ C36B 3E C0                                ld		a,$C0
 321+ C36D                                      MMUSelectLayer2
 321+ C36D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 322+ C371 CD F9 E3                             call	l2_draw_box
 323+ C374 01 01 0A                             ld		bc,$0A01
 324+ C377 11 C0 FE                             ld		de,$FEC0
 325+ C37A CD 84 E4                             call	l2_draw_horz_line
 326+ C37D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 327+ C380 11 C0 50                             ld		de,$50C0
 328+ C383 CD 84 E4                             call	l2_draw_horz_line
 329+ C386 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 330+ C389 11 C0 18                             ld		de,$18C0
 331+ C38C CD 84 E4                             call	l2_draw_horz_line
 332+ C38F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 333+ C392 11 C0 28                             ld		de,$28C0
 334+ C395 CD 84 E4                             call	l2_draw_horz_line
 335+ C398 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 336+ C39B 11 C0 28                             ld		de,$28C0
 337+ C39E CD 84 E4                             call	l2_draw_horz_line
 338+ C3A1 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 339+ C3A4 11 C0 18                             ld		de,$18C0
 340+ C3A7 CD 84 E4                             call	l2_draw_horz_line
 341+ C3AA 3A 2B 7F     .StaticText:	        ld      a,(Galaxy)
 342+ C3AD                                      MMUSelectGalaxyA
 342+ C3AD ED 92 57    >                     nextreg GalaxyDataMMU,     a
 343+ C3B0 3E 19                                ld		a,25
 344+ C3B2 CD 24 8E                             call	expandTokenToString
 345+ C3B5 CD 7A F6                             call	GetDigramGalaxySeed
 346+ C3B8 06 09                                ld		b,9
 347+ C3BA 21 10 C0                             ld		hl,market_boiler_text
 348+ C3BD CD 13 C2                             call	MPM_print_boiler_text
 349+ C3C0              ; Generate the market list on screen
 350+ C3C0 3E 00        .DisplayPrices:         ld		a,0
 351+ C3C2 21 08 20                             ld		hl,market_position          ; set current cursor position on screen
 352+ C3C5 22 41 C0                             ld		(market_cursor),hl          ; .
 353+ C3C8 F5           MarketLoop:	            push	af
 354+ C3C9 CD 8B C2                             call	PrintMarketItem             ; display a single market item
 355+ C3CC F1                                   pop		af
 356+ C3CD 3C                                   inc		a
 357+ C3CE FE 11                                cp		17
 358+ C3D0 20 F6                                jr		nz,MarketLoop
 359+ C3D2 AF           .InitialHighlight:      xor     a
 360+ C3D3 32 74 C0                             ld      (mkt_selected_row),a        ; assume on row zero
 361+ C3D6 CD B3 C0                             call    mkt_highlight_row
 362+ C3D9 21 64 C0     .DisCargo:              ld      hl,mkt_hold_level
 363+ C3DC 11 10 A8                             ld      de,$A810
 364+ C3DF                                      MMUSelectLayer1
 364+ C3DF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 365+ C3E3 CD D7 E0                             call	l1_print_at
 366+ C3E6 CD 69 C2                             call    MKT_DisplayCargo
 367+ C3E9 21 6C C0     .DisCash:               ld      hl,mkt_cash
 368+ C3EC 11 10 B0                             ld      de,$B010
 369+ C3EF                                      MMUSelectLayer1
 369+ C3EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 370+ C3F3 CD D7 E0                             call	l1_print_at
 371+ C3F6 CD 7A C2                             call    MKT_DisplayCash
 372+ C3F9 C9                                   ret
 373+ C3FA
 374+ C3FA
 375+ C3FA              ;----------------------------------------------------------------------------------------------------------------------------------
 376+ C3FA              ; Handles all the input whilst in the market menu
 377+ C3FA              loop_market_menu:       MacroIsKeyPressed c_Pressed_CursorUp
 377+ C3FA 3E 4A       >                        ld      a,c_Pressed_CursorUp
 377+ C3FC             >                        MMUSelectKeyboard
 377+ C3FC ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 377+ C400 CD A2 E1    >                        call    is_key_pressed
 378+ C403 CC 2B C4                             call    z,mkt_UpPressed
 379+ C406                                      MacroIsKeyPressed c_Pressed_CursorDown
 379+ C406 3E 4C       >                        ld      a,c_Pressed_CursorDown
 379+ C408             >                        MMUSelectKeyboard
 379+ C408 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 379+ C40C CD A2 E1    >                        call    is_key_pressed
 380+ C40F CC 3C C4                             call    z,mkt_DownPressed
 381+ C412                                      MacroIsKeyPressed c_Pressed_RollLeft
 381+ C412 3E 08       >                        ld      a,c_Pressed_RollLeft
 381+ C414             >                        MMUSelectKeyboard
 381+ C414 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 381+ C418 CD A2 E1    >                        call    is_key_pressed
 382+ C41B CC 5A C4                             call    z,mkt_LeftPressed
 383+ C41E                                      MacroIsKeyPressed c_Pressed_RollRight
 383+ C41E 3E 0A       >                        ld      a,c_Pressed_RollRight
 383+ C420             >                        MMUSelectKeyboard
 383+ C420 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 383+ C424 CD A2 E1    >                        call    is_key_pressed
 384+ C427 CC 9D C4                             call    z,mkt_RightPressed
 385+ C42A C9                                   ret
 386+ C42B
 387+ C42B              ;----------------------------------------------------------------------------------------------------------------------------------
 388+ C42B 3A 74 C0     mkt_UpPressed:          ld      a,(mkt_selected_row)
 389+ C42E FE 00                                cp      0
 390+ C430 C8                                   ret     z
 391+ C431 CD C3 C0                             call    mkt_lowlight_row
 392+ C434 21 74 C0                             ld      hl,mkt_selected_row
 393+ C437 35                                   dec     (hl)
 394+ C438 CD B3 C0                             call    mkt_highlight_row
 395+ C43B C9                                   ret
 396+ C43C              ;----------------------------------------------------------------------------------------------------------------------------------
 397+ C43C 3E 4C        mkt_DownPressed:        ld      a,c_Pressed_CursorDown
 398+ C43E                                      MMUSelectKeyboard
 398+ C43E ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 399+ C442 CD 7D E1                             call    get_key_a_state
 400+ C445 FE 01                                cp      1
 401+ C447 28 00                                jr      z,.ItsOK
 402+ C449 3A 74 C0     .ItsOK:                 ld      a,(mkt_selected_row)
 403+ C44C FE 10                                cp      16
 404+ C44E C8                                   ret     z
 405+ C44F CD C3 C0                             call    mkt_lowlight_row
 406+ C452 21 74 C0                             ld      hl,mkt_selected_row
 407+ C455 34                                   inc     (hl)
 408+ C456 CD B3 C0                             call    mkt_highlight_row
 409+ C459 C9                                   ret
 410+ C45A              ;----------------------------------------------------------------------------------------------------------------------------------
 411+ C45A 3A 74 C0     mkt_LeftPressed:        ld      a,(mkt_selected_row)
 412+ C45D 21 03 84                             ld      hl,CargoTonnes
 413+ C460 ED 31                                add     hl,a
 414+ C462 7E                                   ld      a,(hl)
 415+ C463 FE 00                                cp      0
 416+ C465 C8                                   ret     z
 417+ C466 35                                   dec     (hl)
 418+ C467 DD 21 00 E0                          ld      ix,StockFood
 419+ C46B 3A 74 C0                             ld      a,(mkt_selected_row)
 420+ C46E 16 08                                ld      d,8
 421+ C470 5F                                   ld      e,a
 422+ C471 ED 30                                mul
 423+ C473 DD 19                                add     ix,de
 424+ C475                                      MMUSelectStockTable
 424+ C475 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 425+ C479 DD 34 01                             inc     (ix+1)
 426+ C47C DD 7E 07                             ld      a,(ix+7)
 427+ C47F FE 30                                cp      48
 428+ C481 20 04                                jr      nz,.UnderATonne
 429+ C483 21 02 84                             ld      hl,CargoRunningLoad
 430+ C486 35                                   dec     (hl)            ; We need to cosider UoM
 431+ C487 DD 7E 02     .UnderATonne:           ld      a,(ix+2)
 432+ C48A 16 00                                ld      d,0
 433+ C48C 5F                                   ld      e,a
 434+ C48D CD EB 8E                             call    addDEtoCash
 435+ C490                                      ; DO ADD CASH
 436+ C490 3A 74 C0                             ld      a,(mkt_selected_row)
 437+ C493 CD 8B C2                             call    PrintMarketItem
 438+ C496 CD 69 C2                             call    MKT_DisplayCargo
 439+ C499 CD 7A C2                             call    MKT_DisplayCash
 440+ C49C C9                                   ret
 441+ C49D              ;----------------------------------------------------------------------------------------------------------------------------------
 442+ C49D              mkt_RightPressed:       MMUSelectStockTable
 442+ C49D ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 443+ C4A1 DD 21 00 E0                          ld      ix,StockFood
 444+ C4A5 3A 74 C0                             ld      a,(mkt_selected_row)
 445+ C4A8 16 08                                ld      d,8
 446+ C4AA 5F                                   ld      e,a
 447+ C4AB ED 30                                mul
 448+ C4AD DD 19                                add     ix,de
 449+ C4AF 4F                                   ld      c,a
 450+ C4B0 DD 7E 01                             ld      a,(ix+1)
 451+ C4B3 FE 00                                cp      0
 452+ C4B5 C8                                   ret     z
 453+ C4B6 DD 7E 07     .CheckUoM:              ld      a,(ix+7)
 454+ C4B9 FE 30                                cp      48
 455+ C4BB 28 0F                                jr      z,.CheckCargo                       ; cargo is in tonnes
 456+ C4BD 3A 74 C0     .NotTonnage:            ld      a,(mkt_selected_row)
 457+ C4C0 21 03 84                             ld      hl,CargoTonnes
 458+ C4C3 ED 31                                add     hl,a
 459+ C4C5 7E                                   ld      a,(hl)
 460+ C4C6 FE C8                                cp      200
 461+ C4C8 C8                                   ret     z                                   ; else its a 200 UoM limit
 462+ C4C9 C3 D2 C4                             jp      .CheckCash
 463+ C4CC 2A 01 84     .CheckCargo:            ld      hl,(CargoBaySize)                   ; = h = runningload l = cargo bay size
 464+ C4CF 7C                                   ld      a,h
 465+ C4D0 BD                                   cp      l
 466+ C4D1 C8                                   ret     z                                   ; return if we have already maxed out
 467+ C4D2 2A FE 83     .CheckCash:             ld      hl,(Cash+2)
 468+ C4D5 7C                                   ld      a,h
 469+ C4D6 B5                                   or      l
 470+ C4D7 20 0F                                jr      nz,.MoreThanRequired
 471+ C4D9 2A FC 83                             ld      hl,(Cash)
 472+ C4DC 7C                                   ld      a,h
 473+ C4DD FE 00                                cp      0
 474+ C4DF 20 07                                jr      nz,.MoreThanRequired
 475+ C4E1 DD 7E 02                             ld      a,(ix+2)
 476+ C4E4 BD                                   cp      l
 477+ C4E5 30 01                                jr      nc,.MoreThanRequired
 478+ C4E7 C9                                   ret                         ; Insufficient Funds
 479+ C4E8 19           .MoreThanRequired:      add     hl,de
 480+ C4E9 7C                                   ld      a,h
 481+ C4EA B3                                   or      e
 482+ C4EB                                      ; check cash can we buy, and cargo capacity
 483+ C4EB DD 35 01                             dec     (ix+1)
 484+ C4EE 3A 74 C0                             ld      a,(mkt_selected_row)
 485+ C4F1 21 03 84                             ld      hl,CargoTonnes
 486+ C4F4 ED 31                                add     hl,a
 487+ C4F6 34                                   inc     (hl)
 488+ C4F7 DD 7E 07                             ld      a,(ix+7)
 489+ C4FA 47                                   ld      b,a
 490+ C4FB FE 30                                cp      48
 491+ C4FD 20 05                                jr      nz,.UnderOneTonne
 492+ C4FF 78                                   ld      a,b
 493+ C500 21 02 84                             ld      hl,CargoRunningLoad
 494+ C503 34                                   inc     (hl)
 495+ C504 DD 7E 02     .UnderOneTonne:         ld      a,(ix+2)
 496+ C507 16 00                                ld      d,0
 497+ C509 5F                                   ld      e,a
 498+ C50A CD FE 8E                             call    subDEfromCash
 499+ C50D 3A 74 C0                             ld      a,(mkt_selected_row)
 500+ C510 CD 8B C2                             call    PrintMarketItem
 501+ C513 CD 69 C2                             call    MKT_DisplayCargo
 502+ C516 CD 7A C2                             call    MKT_DisplayCash
 503+ C519 C9                                   ret
# file closed: ./Menus/market_prices_menu.asm
1295  C51A                  DISPLAY "Bank ",BankMenuMarket," - Bytes free ",/D, $2000 - ($-MenuMarketAddr), " - BankMenuMarket"
1296  C51A              ; Bank 55  ------------------------------------------------------------------------------------------------------------------------
1297  C51A                  SLOT    StockTableAddr
1298  C51A                  PAGE    BankStockTable
1299  C51A                  ORG     StockTableAddr
1300  E000                  INCLUDE "./Tables/stock_table.asm"
# file opened: ./Tables/stock_table.asm
   1+ E000
   2+ E000
   3+ E000              ;                       Can Buy
   4+ E000              ;                       computed row on screen considering what stock is visible
   5+ E000              ;                       Show
   6+ E000              ;                       Tech Level
   7+ E000              ;                       Price
   8+ E000              ;                       Name
   9+ E000              ;                       TypeId
  10+ E000
  11+ E000
  12+ E000              ;char name[16];
  13+ E000              ;current_quantity;
  14+ E000              ;current_price;
  15+ E000              ;base_price;
  16+ E000              ;eco_adjust;
  17+ E000              ;base_quantity;
  18+ E000              ;mask;
  19+ E000              ;units;
  20+ E000
  21+ E000              ;						nam	currr   CR  Ecadj  Qty  Msk  UoM
  22+ E000 20 00 00 13  StockFood			DB  32,  0, 0,  19, -2,      6, $01, 48  ; 01
  22+ E004 FE 06 01 30
  23+ E008 21 00 00 14  StockTextiles		DB	33,  0, 0,  20, -1,     10, $03, 48  ; 02
  23+ E00C FF 0A 03 30
  24+ E010 22 00 00 41  StockRadioactives	DB  34,  0, 0,  65, -3,      2, $07, 48  ; 03
  24+ E014 FD 02 07 30
  25+ E018 23 00 00 28  StockSlaves			DB  35,  0, 0,  40, -5,    226, $1F, 48  ; 04
  25+ E01C FB E2 1F 30
  26+ E020 24 00 00 53  StockLiquorWines	DB  36,  0, 0,  83, -5,    251, $0F, 48  ; 05
  26+ E024 FB FB 0F 30
  27+ E028 25 00 00 C4  StockLuxuries		DB  37,  0, 0, 196,  8,     54, $03, 48  ; 06
  27+ E02C 08 36 03 30
  28+ E030 26 00 00 EB  StockNarcotics		DB  38,  0, 0, 235, 29,      8, $78, 48  ; 07
  28+ E034 1D 08 78 30
  29+ E038 19 00 00 9A  StockComputers		DB  25,  0, 0, 154, 14,     56, $03, 48  ; 08
  29+ E03C 0E 38 03 30
  30+ E040 27 00 00 75  StockMachinery		DB  39,  0, 0, 117,  6,     40, $07, 48  ; 09
  30+ E044 06 28 07 30
  31+ E048 28 00 00 4E  StockAlloys			DB  40,  0, 0,  78,  1,     17, $1F, 48  ; 11
  31+ E04C 01 11 1F 30
  32+ E050 29 00 00 7C  StockFirearms   	DB  41,  0, 0, 124, 13,     29, $07, 48  ; 12
  32+ E054 0D 1D 07 30
  33+ E058 2A 00 00 B0  StockFurs       	DB  42,  0, 0, 176, -9,    220, $3F, 48  ; 13
  33+ E05C F7 DC 3F 30
  34+ E060 2B 00 00 20  StockMinerals   	DB  43,  0, 0,  32, -1,     53, $03, 48  ; 14
  34+ E064 FF 35 03 30
  35+ E068 2C 00 00 61  StockGold       	DB  44,  0, 0,  97, -1,     66, $07, 49  ; 15
  35+ E06C FF 42 07 31
  36+ E070 2D 00 00 AB  StockPlatinum   	DB  45,  0, 0, 171, -2,     55, $1F, 49  ; 16
  36+ E074 FE 37 1F 31
  37+ E078 2E 00 00 2D  StockGemStones 		DB  46,  0, 0,  45, -1,    250, $0F, 50  ; 17
  37+ E07C FF FA 0F 32
  38+ E080 2F 00 00 35  StockAlienItems		DB  47,  0, 0,  53, 15,    192, $07, 48  ; 18
  38+ E084 0F C0 07 30
  39+ E088
  40+ E088
  41+ E088              ;.QQ23	\Prxs -> &3DA6 \  Market prices info
  42+ E088              ;\ base_price, gradient sign+5bits, base_quantity, mask, units 2bits
  43+ E088              ;13 82 06 01			EQUD &01068213 \ Food
  44+ E088              ;14 81 0A 03 		EQUD &030A8114 \ Textiles
  45+ E088              ;41 83 02 07 		EQUD &07028341 \ Radioactives
  46+ E088              ;28 85 E2 1F 		EQUD &1FE28528 \ Slaves
  47+ E088              ;53 85 FB 0F 		EQUD &0FFB8553 \ Liquor/Wines
  48+ E088              ;C4 08 36 03 		EQUD &033608C4 \ Luxuries
  49+ E088              ;EB 1D 08 78 		EQUD &78081DEB \ Narcotics
  50+ E088              ;9A 0E 38 03 		EQUD &03380E9A \ Computers
  51+ E088              ;75 06 28 07 		EQUD &07280675 \ Machinery
  52+ E088              ;4E 01 11 1F 		EQUD &1F11014E \ Alloys
  53+ E088              ;7C 0D 1D 07 		EQUD &071D0D7C \ Firearms
  54+ E088              ;B0 89 DC 3F 		EQUD &3FDC89B0 \ Furs
  55+ E088              ;20 81 35 03 		EQUD &03358120 \ Minerals
  56+ E088              ;61 A1 42 07 		EQUD &0742A161 \ Gold
  57+ E088              ;AB A2 37 1F 		EQUD &1F37A2AB \ Platinum
  58+ E088              ;2D C1 FA 0F 		EQUD &0FFAC12D \ Gem-Stones
  59+ E088              ;35 0F C0 07 		EQUD &07C00F35 \ Alien Items
  60+ E088
  61+ E088
  62+ E088              FoodIndex               EQU 01
  63+ E088              TextilesIndex           EQU 02
  64+ E088              RadioactivesIndex       EQU 03
  65+ E088              SlavesIndex             EQU 04
  66+ E088              LiquorWinesIndex        EQU 05
  67+ E088              LuxuriesIndex           EQU 06
  68+ E088              NarcoticsIndex          EQU 07
  69+ E088              ComputersIndex          EQU 08
  70+ E088              MachineryIndex          EQU 09
  71+ E088              AlloysIndex             EQU 10
  72+ E088              FirearmsIndex           EQU 11
  73+ E088              FursIndex               EQU 12
  74+ E088              MineralsIndex           EQU 13
  75+ E088              GoldIndex               EQU 14
  76+ E088              PlatinumIndex           EQU 15
  77+ E088              GemStonesIndex          EQU 16
  78+ E088              AlienItemsIndex		    equ 17
  79+ E088              StockListLen		    equ	18
  80+ E088
  81+ E088 00 E0 08 E0  StockItemTable		    DW 	StockFood,  StockTextiles,	   StockRadioactives
  81+ E08C 10 E0
  82+ E08E 18 E0 20 E0                          DW 	StockSlaves, StockLiquorWines, StockLuxuries
  82+ E092 28 E0
  83+ E094 30 E0 38 E0                          DW 	StockNarcotics, StockComputers, StockMachinery
  83+ E098 40 E0
  84+ E09A 48 E0 50 E0                          DW	StockAlloys, StockFirearms, StockFurs
  84+ E09E 58 E0
  85+ E0A0 60 E0 68 E0                          DW  StockMinerals, StockGold, StockPlatinum
  85+ E0A4 70 E0
  86+ E0A6 78 E0 80 E0                          DW  StockGemStones, StockAlienItems
  87+ E0AA
  88+ E0AA 06 FF        generate_stock_market:  ld		b,$FF				; so the first iteration puts it at 0
  89+ E0AC CD 8A 84                             call	copy_galaxy_to_system
  90+ E0AF DD 21 F8 DF                          ld		ix,StockFood-8		; start 8 bytes before index as first add will shift
  91+ E0B3 11 08 00     .generate_stock_loop:   ld		de,8
  92+ E0B6 DD 19                                add		ix,de				; Move down a row
  93+ E0B8 04                                   inc		b
  94+ E0B9 DD 4E 03     .CalcPrice:	            ld		c,(ix+3);			; c = base price
  95+ E0BC 3A 2A 7F                             ld		a,(RandomMarketSeed)
  96+ E0BF DD A6 06                             and		(ix+6)				; and with market mask
  97+ E0C2 81                                   add		a,c
  98+ E0C3 4F                                   ld		c,a					; c = base + rand & market mask
  99+ E0C4 3A 59 7F                             ld		a,(DisplayEcononmy)	; d= economy
 100+ E0C7 57                                   ld		d,a
 101+ E0C8 DD 7E 04                             ld		a,(ix+4)
 102+ E0CB 5F                                   ld		e,a					; e  = economy adjust
 103+ E0CC CB 7B                                bit		7,e
 104+ E0CE 20 04                                jr		nz,.PosMul			; it could be negative and we onnly want
 105+ E0D0              ;.NegMul:						; e reg from mulitply not a 2'c 16 bit word
 106+ E0D0 7B                                   ld		a,e
 107+ E0D1 ED 44                                neg
 108+ E0D3 5F                                   ld		e,a
 109+ E0D4              .PosMul:
 110+ E0D4 7B                                   ld		a,e
 111+ E0D5 ED 44                                neg
 112+ E0D7 5F                                   ld		e,a
 113+ E0D8 ED 30                                mul
 114+ E0DA 79                                   ld		a,c
 115+ E0DB 83                                   add		a,e
 116+ E0DC CB 27                                sla		a
 117+ E0DE CB 27                                sla		a					; Multply price by 4
 118+ E0E0 DD 77 02                             ld		(ix+2),a			; Now have set price
 119+ E0E3 DD 4E 05     .CalcQty:	            ld		c,(ix+5);			; c = base price
 120+ E0E6 3A 2A 7F                             ld		a,(RandomMarketSeed)
 121+ E0E9 DD A6 06                             and		(ix+6)				; and with market mask
 122+ E0EC 81                                   add		a,c
 123+ E0ED 4F                                   ld		c,a					; c = base + rand & market mask
 124+ E0EE 3A 59 7F                             ld		a,(DisplayEcononmy)	; d= economy
 125+ E0F1 57                                   ld		d,a
 126+ E0F2 DD 7E 04                             ld		a,(ix+4)
 127+ E0F5 5F                                   ld		e,a					; e  = economy adjust
 128+ E0F6 CB 7B                                bit		7,e
 129+ E0F8 20 04                                jr		nz,.PosQtyMul			; it could be negative and we onnly want
 130+ E0FA 7B           .NegQtyMul:				ld		a,e		; e reg from mulitply not a 2'c 16 bit word
 131+ E0FB ED 44                                neg
 132+ E0FD 5F                                   ld		e,a
 133+ E0FE 7B           .PosQtyMul:             ld		a,e
 134+ E0FF ED 44                                neg
 135+ E101 5F                                   ld		e,a
 136+ E102 ED 30                                mul
 137+ E104 79                                   ld		a,c
 138+ E105 93                                   sub		e
 139+ E106 DD 77 01                             ld		(ix+1),a			; Now have set quanity
 140+ E109 78                                   ld		a,b
 141+ E10A FE 11                                cp		AlienItemsIndex
 142+ E10C 20 A5                                jr		nz,.generate_stock_loop
 143+ E10E AF                                   xor		a
 144+ E10F DD 77 01                             ld		(ix+1),a			; Now have set quanity of alient items to always 0 in stock
 145+ E112 C9                                   ret
 146+ E113
# file closed: ./Tables/stock_table.asm
1301  E113                  DISPLAY "Bank ",BankStockTable," - Bytes free ",/D, $2000 - ($-StockTableAddr), " - BankStockTable"
1302  E113              ; Bank 56  ------------------------------------------------------------------------------------------------------------------------
1303  E113                  SLOT    CommanderAddr
1304  E113                  PAGE    BankCommander
1305  E113                  ORG     CommanderAddr, BankCommander
1306  E000                  INCLUDE "./Commander/commanderData.asm"
# file opened: ./Commander/commanderData.asm
   1+ E000 43 4F 4D 4D  commanderPage           DB  "COMMANDERPAGE 56"
   1+ E004 41 4E 44 45
   1+ E008 52 50 41 47
   1+ E00C 45 20 35 36
   2+ E010 4A 41 4D 45  defaultName		        DB	"JAMESON",0
   2+ E014 53 4F 4E 00
   3+ E018 10 0F 11 00  defaultStock	        DB $10, $0F, $11, $00, $03, $1C,$0E, $00, $00, $0A, $00, $11,$3A, $07, $09, $08, $00
   3+ E01C 03 1C 0E 00
   3+ E020 00 0A 00 11
   3+ E024 3A 07 09 08
   3+ E028 00
   4+ E029 4A 5A 48 02  defaultSeeds	        DB $4a, $5a, $48, $02, $53, $b7
   4+ E02D 53 B7
   5+ E02F 14           defaultHomeX	        DB $14
   6+ E030 AD           defaultHomeY	        DB $AD
   7+ E031 44 65 66 61  defaultSaveName         DB "Default.SAV",0,0,0,0
   7+ E035 75 6C 74 2E
   7+ E039 53 41 56 00
   7+ E03D 00 00 00
   8+ E040
   9+ E040              ; Gun and cabin temps are not saved as can only be saved in dock
  10+ E040              ; Note Can only save whilst docked
  11+ E040 43 4F 4D 4D  SaveCommanderHeader     DB  "COMMANDERSAVE..."
  11+ E044 41 4E 44 45
  11+ E048 52 53 41 56
  11+ E04C 45 2E 2E 2E
  12+ E050 00 00 00...  SaveFilename            DS  15
  13+ E05F 00 00 00...  SaveCommanderName       DS  15
  14+ E06E 00 00 00...  SaveSeeds               DS  06
  15+ E074 00 00 00...  SaveStockAvaliabiliy    DS  17
  16+ E085 00 00 00...  SaveCargo               DS  16
  17+ E095 00 00 00...  SaveEquipmentFitted     DS  EQ_ITEM_COUNT
  18+ E0AF 00 00 00 00  SaveLaserType           DS  4
  19+ E0B3 00 00 00 00  SaveLaserDamagedFlag    DS  4
  20+ E0B7 00           SavePresentSystemX      DS  1
  21+ E0B8 00           SavePresentSystemY      DS  1
  22+ E0B9 00           SaveTargetSystemX       DS  1
  23+ E0BA 00           SaveTargetSystemY       DS  1
  24+ E0BB 00 00 00 00  SaveCash                DS  4
  25+ E0BF 00           SaveFuel                DS  1
  26+ E0C0 00           SaveFugitiveInnocentStatus DS 1
  27+ E0C1 00 00        SaveKillTally           DS  2
  28+ E0C3 00           SaveOuterHyperCount     DS  1
  29+ E0C4 00           SaveInnerHyperCount     DS  1
  30+ E0C5 00           SaveForeShield          DS  1
  31+ E0C6 00           SaveAftShield           DS  1
  32+ E0C7 00           SavePlayerEnergy        DS  1
  33+ E0C8 00           SaveCargoBaySize        DS  1
  34+ E0C9 00           SaveFuelScoopStatus     DS  1
  35+ E0CA              SaveSize                equ $ - SaveCommanderHeader
  36+ E0CA
  37+ E0CA              copyCommanderToSave:    ldCopyStringLen CommanderName,      SaveCommanderName, 15
  37+ E0CA 21 23 81    >                        ld      hl,CommanderName
  37+ E0CD 11 5F E0    >                        ld      de, SaveCommanderName
  37+ E0D0 01 0F 00    >                        ld      bc, 15
  37+ E0D3 ED B0       >                        ldir
  38+ E0D5                                      ldCopyStringLen GalaxySeeds,        SaveSeeds, 6
  38+ E0D5 21 38 7F    >                        ld      hl,GalaxySeeds
  38+ E0D8 11 6E E0    >                        ld      de, SaveSeeds
  38+ E0DB 01 06 00    >                        ld      bc, 6
  38+ E0DE ED B0       >                        ldir
  39+ E0E0                                      ldCopyStringLen StockAvaliabiliy,   SaveStockAvaliabiliy, 16
  39+ E0E0 21 19 7F    >                        ld      hl,StockAvaliabiliy
  39+ E0E3 11 74 E0    >                        ld      de, SaveStockAvaliabiliy
  39+ E0E6 01 10 00    >                        ld      bc, 16
  39+ E0E9 ED B0       >                        ldir
  40+ E0EB                                      ldCopyStringLen CargoTonnes,        SaveCargo, 16
  40+ E0EB 21 03 84    >                        ld      hl,CargoTonnes
  40+ E0EE 11 85 E0    >                        ld      de, SaveCargo
  40+ E0F1 01 10 00    >                        ld      bc, 16
  40+ E0F4 ED B0       >                        ldir
  41+ E0F6                                      ldCopyStringLen EquipmentFitted,    SaveEquipmentFitted, EQ_ITEM_COUNT
  41+ E0F6 21 1B 84    >                        ld      hl,EquipmentFitted
  41+ E0F9 11 95 E0    >                        ld      de, SaveEquipmentFitted
  41+ E0FC 01 1A 00    >                        ld      bc, EQ_ITEM_COUNT
  41+ E0FF ED B0       >                        ldir
  42+ E101                                      ldCopyStringLen LaserType,          SaveLaserType, 4
  42+ E101 21 13 84    >                        ld      hl,LaserType
  42+ E104 11 AF E0    >                        ld      de, SaveLaserType
  42+ E107 01 04 00    >                        ld      bc, 4
  42+ E10A ED B0       >                        ldir
  43+ E10C                                      ldCopyStringLen LaserDamagedFlag,   SaveLaserDamagedFlag, 4
  43+ E10C 21 17 84    >                        ld      hl,LaserDamagedFlag
  43+ E10F 11 B3 E0    >                        ld      de, SaveLaserDamagedFlag
  43+ E112 01 04 00    >                        ld      bc, 4
  43+ E115 ED B0       >                        ldir
  44+ E117                                      ldCopy2Byte     PresentSystemX,     SavePresentSystemX
  44+ E117 2A 3E 7F    >                        ld       hl,(PresentSystemX)
  44+ E11A 22 B7 E0    >                        ld       (SavePresentSystemX),hl
  45+ E11D                                      ldCopy2Byte     TargetSystemX,      SaveTargetSystemX
  45+ E11D 2A 40 7F    >                        ld       hl,(TargetSystemX)
  45+ E120 22 B9 E0    >                        ld       (SaveTargetSystemX),hl
  46+ E123                                      ldCopyStringLen Cash,               SaveCash, 6
  46+ E123 21 FC 83    >                        ld      hl,Cash
  46+ E126 11 BB E0    >                        ld      de, SaveCash
  46+ E129 01 06 00    >                        ld      bc, 6
  46+ E12C ED B0       >                        ldir
  47+ E12E                                      ldCopyByte      Fuel,               SaveFuel
  47+ E12E 3A 00 84    >                        ld       a,(Fuel)
  47+ E131 32 BF E0    >                        ld       (SaveFuel),a
  48+ E134                                      ldCopyByte      FugitiveInnocentStatus,  SaveFugitiveInnocentStatus
  48+ E134 3A 4D 7F    >                        ld       a,(FugitiveInnocentStatus)
  48+ E137 32 C0 E0    >                        ld       (SaveFugitiveInnocentStatus),a
  49+ E13A                                      ldCopy2Byte     KillTally           ,SaveKillTally
  49+ E13A 2A 4E 7F    >                        ld       hl,(KillTally)
  49+ E13D 22 C1 E0    >                        ld       (SaveKillTally),hl
  50+ E140                                      ldCopyByte      OuterHyperCount     ,SaveOuterHyperCount
  50+ E140 3A 65 80    >                        ld       a,(OuterHyperCount)
  50+ E143 32 C3 E0    >                        ld       (SaveOuterHyperCount),a
  51+ E146                                      ldCopyByte      InnerHyperCount     ,SaveInnerHyperCount
  51+ E146 3A 64 80    >                        ld       a,(InnerHyperCount)
  51+ E149 32 C4 E0    >                        ld       (SaveInnerHyperCount),a
  52+ E14C                                      ldCopyByte      ForeShield          ,SaveForeShield
  52+ E14C 3A 1D 81    >                        ld       a,(ForeShield)
  52+ E14F 32 C5 E0    >                        ld       (SaveForeShield),a
  53+ E152                                      ldCopyByte      AftShield           ,SaveAftShield
  53+ E152 3A 1E 81    >                        ld       a,(AftShield)
  53+ E155 32 C6 E0    >                        ld       (SaveAftShield),a
  54+ E158                                      ldCopyByte      PlayerEnergy        ,SavePlayerEnergy
  54+ E158 3A 1F 81    >                        ld       a,(PlayerEnergy)
  54+ E15B 32 C7 E0    >                        ld       (SavePlayerEnergy),a
  55+ E15E                                      ldCopyByte      CargoBaySize        ,SaveCargoBaySize
  55+ E15E 3A 01 84    >                        ld       a,(CargoBaySize)
  55+ E161 32 C8 E0    >                        ld       (SaveCargoBaySize),a
  56+ E164                                      ldCopyByte      FuelScoopsBarrelStatus     ,SaveFuelScoopStatus
  56+ E164 3A 35 84    >                        ld       a,(FuelScoopsBarrelStatus)
  56+ E167 32 C9 E0    >                        ld       (SaveFuelScoopStatus),a
  57+ E16A C9                                   ret
  58+ E16B
  59+ E16B              copyCommanderFromSave:  ldCopyStringLen SaveCommanderName,      CommanderName, 15
  59+ E16B 21 5F E0    >                        ld      hl,SaveCommanderName
  59+ E16E 11 23 81    >                        ld      de, CommanderName
  59+ E171 01 0F 00    >                        ld      bc, 15
  59+ E174 ED B0       >                        ldir
  60+ E176                                      ldCopyStringLen SaveSeeds,              GalaxySeeds, 6
  60+ E176 21 6E E0    >                        ld      hl,SaveSeeds
  60+ E179 11 38 7F    >                        ld      de, GalaxySeeds
  60+ E17C 01 06 00    >                        ld      bc, 6
  60+ E17F ED B0       >                        ldir
  61+ E181                                      ldCopyStringLen SaveStockAvaliabiliy,   StockAvaliabiliy, 16
  61+ E181 21 74 E0    >                        ld      hl,SaveStockAvaliabiliy
  61+ E184 11 19 7F    >                        ld      de, StockAvaliabiliy
  61+ E187 01 10 00    >                        ld      bc, 16
  61+ E18A ED B0       >                        ldir
  62+ E18C                                      ldCopyStringLen SaveCargo,              CargoTonnes, 16
  62+ E18C 21 85 E0    >                        ld      hl,SaveCargo
  62+ E18F 11 03 84    >                        ld      de, CargoTonnes
  62+ E192 01 10 00    >                        ld      bc, 16
  62+ E195 ED B0       >                        ldir
  63+ E197                                      ldCopyStringLen SaveEquipmentFitted,    EquipmentFitted, EQ_ITEM_COUNT
  63+ E197 21 95 E0    >                        ld      hl,SaveEquipmentFitted
  63+ E19A 11 1B 84    >                        ld      de, EquipmentFitted
  63+ E19D 01 1A 00    >                        ld      bc, EQ_ITEM_COUNT
  63+ E1A0 ED B0       >                        ldir
  64+ E1A2                                      ldCopyStringLen SaveLaserType,          LaserType, 4
  64+ E1A2 21 AF E0    >                        ld      hl,SaveLaserType
  64+ E1A5 11 13 84    >                        ld      de, LaserType
  64+ E1A8 01 04 00    >                        ld      bc, 4
  64+ E1AB ED B0       >                        ldir
  65+ E1AD                                      ldCopyStringLen SaveLaserDamagedFlag,    LaserDamagedFlag, 4
  65+ E1AD 21 B3 E0    >                        ld      hl,SaveLaserDamagedFlag
  65+ E1B0 11 17 84    >                        ld      de, LaserDamagedFlag
  65+ E1B3 01 04 00    >                        ld      bc, 4
  65+ E1B6 ED B0       >                        ldir
  66+ E1B8                                      ldCopy2Byte     SavePresentSystemX,     PresentSystemX
  66+ E1B8 2A B7 E0    >                        ld       hl,(SavePresentSystemX)
  66+ E1BB 22 3E 7F    >                        ld       (PresentSystemX),hl
  67+ E1BE                                      ldCopy2Byte     SaveTargetSystemX,      TargetSystemX
  67+ E1BE 2A B9 E0    >                        ld       hl,(SaveTargetSystemX)
  67+ E1C1 22 40 7F    >                        ld       (TargetSystemX),hl
  68+ E1C4 21 65 7E                             ld		hl,IndexedWork              ; not sure yet why thisis done here
  69+ E1C7 CD 8A 84                             call	        copy_galaxy_to_system
  70+ E1CA CD 4A 85                             call	        find_present_system
  71+ E1CD CD AD 84                             call	        copy_working_to_galaxy
  72+ E1D0                                      ldCopyStringLen SaveCash,               Cash, 6
  72+ E1D0 21 BB E0    >                        ld      hl,SaveCash
  72+ E1D3 11 FC 83    >                        ld      de, Cash
  72+ E1D6 01 06 00    >                        ld      bc, 6
  72+ E1D9 ED B0       >                        ldir
  73+ E1DB                                      ldCopyByte      SaveFuel,               Fuel
  73+ E1DB 3A BF E0    >                        ld       a,(SaveFuel)
  73+ E1DE 32 00 84    >                        ld       (Fuel),a
  74+ E1E1                                      ldCopyByte      SaveFugitiveInnocentStatus,  FugitiveInnocentStatus
  74+ E1E1 3A C0 E0    >                        ld       a,(SaveFugitiveInnocentStatus)
  74+ E1E4 32 4D 7F    >                        ld       (FugitiveInnocentStatus),a
  75+ E1E7                                      ldCopy2Byte     SaveKillTally           ,KillTally
  75+ E1E7 2A C1 E0    >                        ld       hl,(SaveKillTally)
  75+ E1EA 22 4E 7F    >                        ld       (KillTally),hl
  76+ E1ED                                      ldCopyByte      SaveOuterHyperCount     ,OuterHyperCount
  76+ E1ED 3A C3 E0    >                        ld       a,(SaveOuterHyperCount)
  76+ E1F0 32 65 80    >                        ld       (OuterHyperCount),a
  77+ E1F3                                      ldCopyByte      SaveInnerHyperCount     ,InnerHyperCount
  77+ E1F3 3A C4 E0    >                        ld       a,(SaveInnerHyperCount)
  77+ E1F6 32 64 80    >                        ld       (InnerHyperCount),a
  78+ E1F9                                      ldCopyByte      SaveForeShield          ,ForeShield
  78+ E1F9 3A C5 E0    >                        ld       a,(SaveForeShield)
  78+ E1FC 32 1D 81    >                        ld       (ForeShield),a
  79+ E1FF                                      ldCopyByte      SaveAftShield           ,AftShield
  79+ E1FF 3A C6 E0    >                        ld       a,(SaveAftShield)
  79+ E202 32 1E 81    >                        ld       (AftShield),a
  80+ E205                                      ldCopyByte      SavePlayerEnergy        ,PlayerEnergy
  80+ E205 3A C7 E0    >                        ld       a,(SavePlayerEnergy)
  80+ E208 32 1F 81    >                        ld       (PlayerEnergy),a
  81+ E20B                                      ldCopyByte      SaveCargoBaySize        ,CargoBaySize
  81+ E20B 3A C8 E0    >                        ld       a,(SaveCargoBaySize)
  81+ E20E 32 01 84    >                        ld       (CargoBaySize),a
  82+ E211                                      ldCopyByte      SaveFuelScoopStatus     ,FuelScoopsBarrelStatus
  82+ E211 3A C9 E0    >                        ld       a,(SaveFuelScoopStatus)
  82+ E214 32 35 84    >                        ld       (FuelScoopsBarrelStatus),a
  83+ E217 C9                                   ret
  84+ E218
  85+ E218 CD CA E0     saveCommander:          call    copyCommanderToSave
  86+ E21B                                      ldCopyStringLen defaultSaveName, SaveFilename, 15
  86+ E21B 21 31 E0    >                        ld      hl,defaultSaveName
  86+ E21E 11 50 E0    >                        ld      de, SaveFilename
  86+ E221 01 0F 00    >                        ld      bc, 15
  86+ E224 ED B0       >                        ldir
  87+ E226 21 31 E0                             ld      hl, defaultSaveName             ; default debug name
  88+ E229 DD 21 40 E0                          ld      ix, SaveCommanderHeader
  89+ E22D 01 8A 00                             ld      bc, SaveSize
  90+ E230 CD AF AA                             call    FileSave
  91+ E233 C9                                   ret
  92+ E234
  93+ E234 21 31 E0     loadCommander:          ld      hl, defaultSaveName             ; default debug name
  94+ E237 DD 21 40 E0                          ld      ix, SaveCommanderHeader
  95+ E23B 01 8A 00                             ld      bc, SaveSize
  96+ E23E CD 7E AA                             call    FileLoad
  97+ E241 CD 6B E1                             call    copyCommanderFromSave
  98+ E244                                      ClearMissileTargetting
  98+ E244 3E FF       >                        ld      a,StageMissileNotTargeting
  98+ E246 32 22 81    >                        ld      (MissileTargettingFlag),a
  99+ E249 CD AA 82                             call    SetPlayerRank
 100+ E24C                                      SetMemFalse LaserBeamOn
 100+ E24C 3E FF       >                        ld      a,$FF
 100+ E24E 32 3A 81    >                        ld      (LaserBeamOn),a
 101+ E251 C9                                   ret
 102+ E252
 103+ E252               ; For now hard laod, later correctlt sequence gneeral vars and dma fill with 0 for a start
 104+ E252              defaultCommander:       ldCopyStringLen defaultName, CommanderName, 8
 104+ E252 21 10 E0    >                        ld      hl,defaultName
 104+ E255 11 23 81    >                        ld      de, CommanderName
 104+ E258 01 08 00    >                        ld      bc, 8
 104+ E25B ED B0       >                        ldir
 105+ E25D                                      ldCopyStringLen defaultSeeds, GalaxySeeds, 6
 105+ E25D 21 29 E0    >                        ld      hl,defaultSeeds
 105+ E260 11 38 7F    >                        ld      de, GalaxySeeds
 105+ E263 01 06 00    >                        ld      bc, 6
 105+ E266 ED B0       >                        ldir
 106+ E268                                      ldCopy2Byte defaultHomeX, PresentSystemX
 106+ E268 2A 2F E0    >                        ld       hl,(defaultHomeX)
 106+ E26B 22 3E 7F    >                        ld       (PresentSystemX),hl
 107+ E26E                                      ldCopy2Byte defaultHomeX, TargetSystemX
 107+ E26E 2A 2F E0    >                        ld       hl,(defaultHomeX)
 107+ E271 22 40 7F    >                        ld       (TargetSystemX),hl
 108+ E274 21 65 7E                             ld		hl,IndexedWork              ; not sure yet why thisis done here
 109+ E277 CD 8A 84                             call	copy_galaxy_to_system
 110+ E27A CD 4A 85                             call	find_present_system
 111+ E27D CD AD 84                             call	copy_working_to_galaxy
 112+ E280 01 60 EA                             ld      bc,60000
 113+ E283 ED 43 FC 83                          ld      (Cash),bc
 114+ E287 01 00 00                             ld		bc,0
 115+ E28A ED 43 FE 83                          ld		(Cash+2), bc                    ; cash no longer big endian
 116+ E28E 3E 46                                ld		a,MaxFuelLevel
 117+ E290 32 00 84                             ld		(Fuel),a
 118+ E293 3E 5B                                ld      a,BankGalaxyData0
 119+ E295 32 2B 7F                             ld		(Galaxy),a
 120+ E298 AF                                   xor		a
 121+ E299 21 1B 84                             ld      hl,EquipmentFitted
 122+ E29C 06 1A                                ld      b, EQ_ITEM_COUNT
 123+ E29E 77           .ClearFittedLooop:      ld      (hl),a
 124+ E29F 23                                   inc     hl
 125+ E2A0 10 FC                                djnz    .ClearFittedLooop
 126+ E2A2                                      SetAFalse
 126+ E2A2 3E FF       >                        ld      a,$FF
 127+ E2A4 32 29 84                             ld      (EquipmentFitted+EQ_FRONT_BEAM),a
 128+ E2A7 32 97 80                             ld		(MissionData),a						;The Plan/Mission
 129+ E2AA 3E 03                                ld      a,3                                  ; a = 0 = pulse laser
 130+ E2AC 32 13 84                             ld		(LaserType),a
 131+ E2AF 3E FF                                ld      a,$FF                                 ; a = 255
 132+ E2B1 32 14 84                             ld		(LaserType+1),a
 133+ E2B4 32 15 84                             ld		(LaserType+2),a
 134+ E2B7 32 16 84                             ld		(LaserType+3),a
 135+ E2BA AF                                   xor     a                                  ; a= 0
 136+ E2BB 32 17 84                             ld      (LaserDamagedFlag),a
 137+ E2BE 32 18 84                             ld      (LaserDamagedFlag+1),a
 138+ E2C1 32 19 84                             ld      (LaserDamagedFlag+2),a
 139+ E2C4 32 1A 84                             ld      (LaserDamagedFlag+3),a
 140+ E2C7              ; REMOVE?             ld      a,EQ_FRONT_PULSE
 141+ E2C7 AF                                   xor     a
 142+ E2C8 32 1E 84                             ld		(ECMPresent),a
 143+ E2CB 32 35 84                             ld		(FuelScoopsBarrelStatus),a
 144+ E2CE 32 21 84                             ld		(EnergyBomb),a
 145+ E2D1 32 22 84                             ld		(ExtraEnergyUnit),a
 146+ E2D4 32 23 84                             ld		(DockingComputer),a
 147+ E2D7 32 24 84                             ld		(GalacticHyperDrive),a
 148+ E2DA 32 20 84                             ld		(EscapePod),a
 149+ E2DD 32 4D 7F                             ld      (FugitiveInnocentStatus),a
 150+ E2E0 32 4E 7F                             ld		(KillTally),a
 151+ E2E3 32 65 80                             ld      (OuterHyperCount),a
 152+ E2E6 32 64 80                             ld      (InnerHyperCount),a
 153+ E2E9 3D                                   dec		a								; now a = 255
 154+ E2EA 32 1D 81                             ld		(ForeShield),a
 155+ E2ED 32 1E 81                             ld		(AftShield),a
 156+ E2F0 32 1F 81                             ld		(PlayerEnergy),a
 157+ E2F3 3E 14                                ld		a,20
 158+ E2F5 32 01 84                             ld		(CargoBaySize),a
 159+ E2F8 CD 78 E3                             call	ZeroCargo						; Clear out cargo
 160+ E2FB 3E 00        .SetLasers:             ld      a,0                             ; we start on Front view
 161+ E2FD CD 0E E3                             call    LoadLaserToCurrent
 162+ E300                                      ClearMissileTargetting
 162+ E300 3E FF       >                        ld      a,StageMissileNotTargeting
 162+ E302 32 22 81    >                        ld      (MissileTargettingFlag),a
 163+ E305 CD AA 82                             call    SetPlayerRank
 164+ E308                                      SetMemFalse LaserBeamOn
 164+ E308 3E FF       >                        ld      a,$FF
 164+ E30A 32 3A 81    >                        ld      (LaserBeamOn),a
 165+ E30D C9                                   ret
 166+ E30E
 167+ E30E
 168+ E30E              ; a = current view number
 169+ E30E 21 13 84     LoadLaserToCurrent:     ld      hl,LaserType                    ; .
 170+ E311 ED 31                                add     hl,a                            ; .
 171+ E313 7E                                   ld      a,(hl)                          ; .
 172+ E314 47                                   ld      b,a                             ; first off is there a laser present in current view
 173+ E315 32 34 81                             ld      (CurrLaserType),a               ; set type
 174+ E318 FE FF                                cp      255                             ; .
 175+ E31A C8                                   ret     z                               ; we can then drop out early if nothing fitted
 176+ E31B 3E 04                                ld      a,4                             ; Damage state is in next variable in memory
 177+ E31D ED 31                                add     hl,a
 178+ E31F 7E                                   ld      a,(hl)
 179+ E320 32 35 81                             ld      (CurrLaserDamage),a             ; copy over current laser's damage
 180+ E323 50                                   ld      d,b                             ; get table index
 181+ E324 1E 0C                                ld      e,LaserStatsTableWidth          ;
 182+ E326 ED 30                                mul     de                              ;
 183+ E328 21 27 76                             ld      hl,LaserStatsTable              ;
 184+ E32B 19                                   add     hl,de                           ;
 185+ E32C 23                                   inc     hl                              ; we already have type
 186+ E32D                                      ldAtHLtoMem CurrLaserPulseRate          ; table [1]
 186+ E32D 7E          >                        ld      a,(hl)
 186+ E32E 32 36 81    >                        ld      (CurrLaserPulseRate),a
 187+ E331 23                                   inc     hl                              ; table [2]
 188+ E332                                      ldAtHLtoMem CurrLaserPulseOnTime
 188+ E332 7E          >                        ld      a,(hl)
 188+ E333 32 37 81    >                        ld      (CurrLaserPulseOnTime),a
 189+ E336 23                                   inc     hl                              ; table [3]
 190+ E337                                      ldAtHLtoMem CurrLaserPulseOffTime
 190+ E337 7E          >                        ld      a,(hl)
 190+ E338 32 38 81    >                        ld      (CurrLaserPulseOffTime),a
 191+ E33B 23                                   inc     hl                              ; table [4]
 192+ E33C                                      ldAtHLtoMem CurrLaserPulseRest
 192+ E33C 7E          >                        ld      a,(hl)
 192+ E33D 32 39 81    >                        ld      (CurrLaserPulseRest),a
 193+ E340 23                                   inc     hl                              ; table [5]
 194+ E341                                      ldAtHLtoMem CurrLaserDamageOutput
 194+ E341 7E          >                        ld      a,(hl)
 194+ E342 32 40 81    >                        ld      (CurrLaserDamageOutput),a
 195+ E345 23                                   inc     hl                              ; table [6]
 196+ E346                                      ldAtHLtoMem CurrLaserEnergyDrain
 196+ E346 7E          >                        ld      a,(hl)
 196+ E347 32 41 81    >                        ld      (CurrLaserEnergyDrain),a
 197+ E34A 23                                   inc     hl                              ; table [7]
 198+ E34B                                      ldAtHLtoMem CurrLaserHeat
 198+ E34B 7E          >                        ld      a,(hl)
 198+ E34C 32 42 81    >                        ld      (CurrLaserHeat),a
 199+ E34F 23                                   inc     hl                              ; table [8]
 200+ E350                                      ldAtHLtoMem CurrLaserDurability
 200+ E350 7E          >                        ld      a,(hl)
 200+ E351 32 43 81    >                        ld      (CurrLaserDurability),a
 201+ E354 23                                   inc     hl                              ; table [9]
 202+ E355                                      ldAtHLtoMem CurrLaserDurabilityAmount   ; we don't need tech level etc for in game run only markets so stop here
 202+ E355 7E          >                        ld      a,(hl)
 202+ E356 32 44 81    >                        ld      (CurrLaserDurabilityAmount),a
 203+ E359 C9                                   ret
 204+ E35A
 205+ E35A              ; Set a = 2 * (slaves + narcotics) + firearms
 206+ E35A 3A 06 84     calculateBadness:       ld      a,(SlaveCargoTonnes)            ; Badness = 2(slaves + narcotics)
 207+ E35D 47                                   ld      b,a                             ; b= slaves
 208+ E35E 3A 09 84                             ld      a,(NarcoticsCargoTonnes)        ; .
 209+ E361 80                                   add     a,b                             ; a = b + narcotics
 210+ E362 CB 27                                sla     a                               ; a *= 2
 211+ E364 47                                   ld      b,a                             ; b = a
 212+ E365 3A 0D 84                             ld      a,(FirearmsCargoTonnes)         ; a = firearms tonns
 213+ E368 80                                   add     a,b                             ; a += b so firearms + 2(slaves + narcotics)
 214+ E369 C9                                   ret
 215+ E36A
 216+ E36A CD 6B E1     PlayerDeath:            call    copyCommanderFromSave           ; load last loaded/saved commander
 217+ E36D                                      ZeroA                                   ; set current laser to front
 217+ E36D AF          >                        xor a
 218+ E36E CD 0E E3                             call    LoadLaserToCurrent
 219+ E371 CD 67 82                             call    InitMainLoop
 220+ E374 CD C5 81                             call    ResetPlayerShip
 221+ E377 C9                                   ret
 222+ E378                                  ;    clear out all other objects
 223+ E378                                  ;    create debris
 224+ E378                                  ;    if cargo presetn then create a cargo
 225+ E378                                  ;
 226+ E378                                  ;    enqueve message game over
 227+ E378                                  ;    go to load commander page
# file closed: ./Commander/commanderData.asm
1307  E378                  INCLUDE "./Commander/zero_player_cargo.asm"
# file opened: ./Commander/zero_player_cargo.asm
   1+ E378              ZeroCargo:
   2+ E378 AF           		xor		a							;zero-out cargo, including gems.
   3+ E379 06 10        		ld		b,16						;all the way up to alien items
   4+ E37B 21 03 84     		ld		hl,CargoTonnes   			; cargo levels
   5+ E37E              .ZeroLoop:
   6+ E37E 77                   ld      (hl),a
   7+ E37F 23           		inc		hl
   8+ E380 10 FC        		djnz	.ZeroLoop
   9+ E382 C9           		ret
  10+ E383
# file closed: ./Commander/zero_player_cargo.asm
1308  E383                  DISPLAY "Bank ",BankCommander," - Bytes free ",/D, $2000 - ($-CommanderAddr), " - BankCommander"
1309  E383              ; Bank 57  ------------------------------------------------------------------------------------------------------------------------
1310  E383                  SLOT    LAYER2Addr
1311  E383                  PAGE    BankLAYER2
1312  E383                  ORG     LAYER2Addr
1313  E000
1314  E000                  INCLUDE "./Layer2Graphics/layer2_bank_select.asm"
# file opened: ./Layer2Graphics/layer2_bank_select.asm
   1+ E000
   2+ E000 00           varL2_BANK_SELECTED			 DB	0
   3+ E001 00           varL2_CURRENT_BANK           DB	0
   4+ E002 00           varL2_BUFFER_MODE            DB 0
   5+ E003 00           varL2_ACCESS_MODE            DB 0
   6+ E004
   7+ E004 3E 08        asm_l2_double_buffer_on:    ld      a,8
   8+ E006 32 02 E0                                 ld      (varL2_BUFFER_MODE),a
   9+ E009 C9                                       ret
  10+ E00A
  11+ E00A AF           asm_l2_double_buffer_off:   xor     a
  12+ E00B 32 02 E0                                 ld      (varL2_BUFFER_MODE),a
  13+ E00E C9                                       ret
  14+ E00F
  15+ E00F 01 3B 12     asm_disable_l2_readwrite:   ld      bc, IO_LAYER2_PORT
  16+ E012 ED 70                                    in      (c)
  17+ E014 32 03 E0                                 ld      (varL2_ACCESS_MODE),a
  18+ E017 E6 FA                                    and     LAYER2_DISABLE_MEM_ACCESS
  19+ E019 ED 79                                    out     (c),a
  20+ E01B C9                                       ret
  21+ E01C
  22+ E01C 3A 03 E0     asm_restore_l2_readwrite:   ld      a,(varL2_ACCESS_MODE)
  23+ E01F E6 05                                    and     LAYER2_READ_WRITE_MASK
  24+ E021 57                                       ld      d,a
  25+ E022 01 3B 12                                 ld      bc, IO_LAYER2_PORT
  26+ E025 ED 70                                    in      (c)
  27+ E027 32 03 E0                                 ld      (varL2_ACCESS_MODE),a
  28+ E02A A2                                       and     d
  29+ E02B ED 79                                    out     (c),a
  30+ E02D C9                                       ret
  31+ E02E
  32+ E02E 01 3B 12     asm_enable_l2_readwrite:    ld      bc, IO_LAYER2_PORT
  33+ E031 ED 70                                    in      (c)
  34+ E033 F6 05                                    or      LAYER2_READ_WRITE_MASK
  35+ E035 ED 79                                    out     (c),a
  36+ E037 C9                                       ret
  37+ E038
  38+ E038              ; "asm_l2_bank_select"
  39+ E038              ; " a = sepecific bank mask value to select, does not set varL2_BANK_SELECTED"
  40+ E038 57           asm_l2_bank_select:         ld      d,a
  41+ E039 FE 00                                    cp      0
  42+ E03B 28 08                                    jr      z,.NotBreakDebug
  43+ E03D FE 40                                    cp      $40
  44+ E03F 28 04                                    jr      z,.NotBreakDebug
  45+ E041 FE 80                                    cp      $80
  46+ E043 28 00                                    jr      z,.NotBreakDebug
  47+ E045              .NotBreakDebug:
  48+ E045 3A 02 E0                                 ld      a,(varL2_BUFFER_MODE)
  49+ E048 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK
  50+ E04A B2                                       or      d; | LAYER2_SHADOW_SCREEN_MASK
  51+ E04B 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  52+ E04E ED 79                                    out 	(c),a
  53+ E050 C9                                       ret
  54+ E051              ;  "asm_l2_bank_select a = sepecific bank number to select, dsets varL2_BANK_SELECTED"
  55+ E051 32 00 E0     asm_l2_bank_n_select:       ld		(varL2_BANK_SELECTED),a
  56+ E054 FE 00                                    cp		0
  57+ E056 20 04                                    jr 		nz,.nottopbank
  58+ E058 3E 00        .topbank:                   ld		a,LAYER2_SHIFTED_SCREEN_TOP
  59+ E05A 18 DC                                    jr		asm_l2_bank_select
  60+ E05C FE 01        .nottopbank:                cp		1
  61+ E05E 20 04                                    jr 		nz,.notmiddlebank
  62+ E060 3E 40        .middlebank:                ld		a,LAYER2_SHIFTED_SCREEN_MIDDLE
  63+ E062 18 D4                                    jr		asm_l2_bank_select
  64+ E064 3E 80        .notmiddlebank:             ld		a,LAYER2_SHIFTED_SCREEN_BOTTOM ; default to bottom
  65+ E066 18 D0                                    jr		asm_l2_bank_select
  66+ E068              		; Note no ret as its handled by above routines
  67+ E068
  68+ E068              asm_l2_bank_0_macro:        MACRO
  69+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
  70+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  71+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
  72+ E068 ~                                        out 	(c),a
  73+ E068 ~                                      ;  ld      a,%0001000              ; Bank offset of + 1
  74+ E068 ~                                      ;  out     (c),a
  75+ E068 ~                                        ZeroA						; set a to 0
  76+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  77+ E068                                          ENDM
  78+ E068
  79+ E068              asm_l2_bank_1_macro:        MACRO
  80+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
  81+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  82+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
  83+ E068 ~                                        out 	(c),a
  84+ E068 ~                                       ; ld      a,%0001000              ; Bank offset of + 1
  85+ E068 ~                                      ;  out     (c),a
  86+ E068 ~                                        ld      a,1						; set a to 0
  87+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  88+ E068                                          ENDM
  89+ E068
  90+ E068              asm_l2_bank_2_macro:        MACRO
  91+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
  92+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  93+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
  94+ E068 ~                                        out 	(c),a
  95+ E068 ~                                      ;  ld      a,%0001000              ; Bank offset of + 1
  96+ E068 ~                                       ; out     (c),a
  97+ E068 ~                                        ld      a,2						; set a to 0
  98+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  99+ E068                                          ENDM
 100+ E068
 101+ E068              asm_l2_bank_3_macro:        MACRO
 102+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
 103+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 104+ E068 ~                                        or      %0001011
 105+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
 106+ E068 ~                                        out 	(c),a
 107+ E068 ~                                        ld      a,3						; set a to 0
 108+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 109+ E068                                          ENDM
 110+ E068
 111+ E068              asm_l2_bank_4_macro:        MACRO
 112+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
 113+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 114+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
 115+ E068 ~                                        out 	(c),a
 116+ E068 ~                                        ld      a,4						; set a to 0
 117+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 118+ E068                                          ENDM
 119+ E068
 120+ E068              ; "asm_l2_row_bank_select"
 121+ E068              ; "A (unsinged) = y row of pixel line from top, sets the bank to top middle or bottom and adjusts a reg to row memory address"
 122+ E068              ; "Could optimise by holding the previous bank but given its only an out statement it may not save T states at all"
 123+ E068              ; "destroys BC call de is safe a = adjusted poke pixel row"
 124+ E068              asm_l2_row_bank_select:     JumpIfAGTENusng 128, .BottomBank
 124+ E068 FE 80       >                        cp     128
 124+ E06A D2 A6 E0    >                        jp		nc,.BottomBank
 125+ E06D                                          JumpIfAGTENusng 64, .MiddleBank
 125+ E06D FE 40       >                        cp     64
 125+ E06F D2 8A E0    >                        jp		nc,.MiddleBank
 126+ E072 08                                       ex      af,af'
 127+ E073                                          JumpIfMemZero varL2_BANK_SELECTED, .NoTopChange
 127+ E073 3A 00 E0    >                        ld  a,(varL2_BANK_SELECTED)
 127+ E076 A7          >                        and a
 127+ E077 CA 88 E0    >                        jp  z,.NoTopChange
 128+ E07A                                          asm_l2_bank_0_macro
 128+ E07A 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 128+ E07D F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 128+ E07F 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 128+ E082 ED 79       >                            out 	(c),a
 128+ E084             >                          ;  ld      a,%0001000              ; Bank offset of + 1
 128+ E084             >                          ;  out     (c),a
 128+ E084             >                            ZeroA						; set a to 0
 128+ E084 AF          >                        xor a
 128+ E085 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 129+ E088 08           .NoTopChange:               ex      af,af'
 130+ E089 C9                                       ret
 131+ E08A 08           .MiddleBank:                ex      af,af'
 132+ E08B                                          JumpIfMemEqNusng varL2_BANK_SELECTED, 1, .NoMiddleChange
 132+ E08B 3A 00 E0    >                        ld  a,(varL2_BANK_SELECTED)
 132+ E08E FE 01       >                        cp  1
 132+ E090 CA A2 E0    >                        jp  z,.NoMiddleChange
 133+ E093                                          asm_l2_bank_1_macro
 133+ E093 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 133+ E096 F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 133+ E098 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 133+ E09B ED 79       >                            out 	(c),a
 133+ E09D             >                           ; ld      a,%0001000              ; Bank offset of + 1
 133+ E09D             >                          ;  out     (c),a
 133+ E09D 3E 01       >                            ld      a,1						; set a to 0
 133+ E09F 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 134+ E0A2 08           .NoMiddleChange:            ex      af,af'
 135+ E0A3 D6 40                                    sub     64
 136+ E0A5 C9                                       ret
 137+ E0A6 08           .BottomBank:                ex      af,af'
 138+ E0A7                                          JumpIfMemEqNusng varL2_BANK_SELECTED, 2, .NoBottomChange
 138+ E0A7 3A 00 E0    >                        ld  a,(varL2_BANK_SELECTED)
 138+ E0AA FE 02       >                        cp  2
 138+ E0AC CA BE E0    >                        jp  z,.NoBottomChange
 139+ E0AF                                          asm_l2_bank_2_macro
 139+ E0AF 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 139+ E0B2 F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 139+ E0B4 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 139+ E0B7 ED 79       >                            out 	(c),a
 139+ E0B9             >                          ;  ld      a,%0001000              ; Bank offset of + 1
 139+ E0B9             >                           ; out     (c),a
 139+ E0B9 3E 02       >                            ld      a,2						; set a to 0
 139+ E0BB 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 140+ E0BE 08           .NoBottomChange:            ex      af,af'
 141+ E0BF D6 80                                    sub     128
 142+ E0C1 C9                                       ret
 143+ E0C2
 144+ E0C2
 145+ E0C2              ; "asm_l2_row_bank_select"
 146+ E0C2              ; "HL (unsinged) = x column of pixel line from left
 147+ E0C2              ; 0-  63
 148+ E0C2              ; 64- 127
 149+ E0C2              ; 128 - 191
 150+ E0C2              ; 192 - 255
 151+ E0C2              ; 256 - 321
 152+ E0C2              ; outputs l with the correct column number
 153+ E0C2 7A           asm_l2_320_col_bank_select: ld      a,d
 154+ E0C3                                          JumpIfAIsNotZero .Bank5             ; 256 - 321
 154+ E0C3 A7          >                        and     a
 154+ E0C4 C2 27 E1    >                        jp	    nz,.Bank5
 155+ E0C7 7B                                       ld      a,e
 156+ E0C8                                          JumpIfAGTENusng 192, .Bank4
 156+ E0C8 FE C0       >                        cp     192
 156+ E0CA D2 10 E1    >                        jp		nc,.Bank4
 157+ E0CD                                          JumpIfAGTENusng 128, .Bank3
 157+ E0CD FE 80       >                        cp     128
 157+ E0CF D2 FB E0    >                        jp		nc,.Bank3
 158+ E0D2                                          JumpIfAGTENusng 64 , .Bank2
 158+ E0D2 FE 40       >                        cp     64
 158+ E0D4 D2 E6 E0    >                        jp		nc,.Bank2
 159+ E0D7              .Bank1:                     asm_l2_bank_0_macro
 159+ E0D7 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 159+ E0DA F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 159+ E0DC 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 159+ E0DF ED 79       >                            out 	(c),a
 159+ E0E1             >                          ;  ld      a,%0001000              ; Bank offset of + 1
 159+ E0E1             >                          ;  out     (c),a
 159+ E0E1             >                            ZeroA						; set a to 0
 159+ E0E1 AF          >                        xor a
 159+ E0E2 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 160+ E0E5 C9                                       ret
 161+ E0E6              .Bank2:                     asm_l2_bank_1_macro
 161+ E0E6 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 161+ E0E9 F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 161+ E0EB 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 161+ E0EE ED 79       >                            out 	(c),a
 161+ E0F0             >                           ; ld      a,%0001000              ; Bank offset of + 1
 161+ E0F0             >                          ;  out     (c),a
 161+ E0F0 3E 01       >                            ld      a,1						; set a to 0
 161+ E0F2 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 162+ E0F5                                          ClearCarryFlag
 162+ E0F5 B7          >                        or a
 163+ E0F6 7D                                       ld      a,l
 164+ E0F7 E6 BF                                    and     %10111111       ; fast subtract 64, just clear bit
 165+ E0F9 67                                       ld      h,a
 166+ E0FA C9                                       ret
 167+ E0FB              .Bank3:                     asm_l2_bank_2_macro
 167+ E0FB 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 167+ E0FE F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 167+ E100 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 167+ E103 ED 79       >                            out 	(c),a
 167+ E105             >                          ;  ld      a,%0001000              ; Bank offset of + 1
 167+ E105             >                           ; out     (c),a
 167+ E105 3E 02       >                            ld      a,2						; set a to 0
 167+ E107 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 168+ E10A                                          ClearCarryFlag
 168+ E10A B7          >                        or a
 169+ E10B 7D                                       ld      a,l
 170+ E10C E6 7F                                    and     %01111111       ; fast subtract 128, just clear bit
 171+ E10E 67                                       ld      h,a
 172+ E10F C9                                       ret
 173+ E110              .Bank4:                     asm_l2_bank_3_macro
 173+ E110 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 173+ E113 F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 173+ E115 F6 0B       >                            or      %0001011
 173+ E117 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 173+ E11A ED 79       >                            out 	(c),a
 173+ E11C 3E 03       >                            ld      a,3						; set a to 0
 173+ E11E 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 174+ E121                                          ClearCarryFlag
 174+ E121 B7          >                        or a
 175+ E122 7B                                       ld      a,e
 176+ E123 E6 3F                                    and     %00111111       ; fast subtract 192, just clear bit
 177+ E125 67                                       ld      h,a
 178+ E126 C9                                       ret
 179+ E127              .Bank5:                     asm_l2_bank_4_macro
 179+ E127 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 179+ E12A F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 179+ E12C 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 179+ E12F ED 79       >                            out 	(c),a
 179+ E131 3E 04       >                            ld      a,4						; set a to 0
 179+ E133 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 180+ E136 65                                       ld      h,l             ; fast subtract 256, just clear bit
 181+ E137 C9                                       ret
 182+ E138
 183+ E138              ;;;
 184+ E138              ;;;
 185+ E138              ;;;                            cp 		64			; row < 64?
 186+ E138              ;;;                            jr 		nc, .l2rowGTE64
 187+ E138              ;;;.l2rowLT64:                 ex		af,af'
 188+ E138              ;;;                            ;ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP | LAYER2_SHADOW_SCREEN_MASK
 189+ E138              ;;;                            ld      a,(varL2_BUFFER_MODE)
 190+ E138              ;;;                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 191+ E138              ;;;                            ld 		bc, IO_LAYER2_PORT
 192+ E138              ;;;                            out 	(c),a
 193+ E138              ;;;                            xor		a						; set a to 0
 194+ E138              ;;;                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 195+ E138              ;;;                            ex		af,af'					; return pixel poke unharmed
 196+ E138              ;;;                            ret
 197+ E138              ;;;.l2rowGTE64:                cp 		128
 198+ E138              ;;;                            jr 		nc, .l2rowGTE128
 199+ E138              ;;;.l2row64to127:              ex		af,af'
 200+ E138              ;;;                    ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE | LAYER2_SHADOW_SCREEN_MASK
 201+ E138              ;;;                            ld      a,(varL2_BUFFER_MODE)
 202+ E138              ;;;                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 203+ E138              ;;;                            ld 		bc, IO_LAYER2_PORT
 204+ E138              ;;;                            out 	(c),a
 205+ E138              ;;;                            ld		a,1						; set a to 1
 206+ E138              ;;;                            ld		(varL2_BANK_SELECTED),a	; save selected bank
 207+ E138              ;;;                            ex		af,af'
 208+ E138              ;;;                            sub		64
 209+ E138              ;;;                            ret
 210+ E138              ;;;.l2rowGTE128:               ex		af,af'
 211+ E138              ;;;                    ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM | LAYER2_SHADOW_SCREEN_MASK
 212+ E138              ;;;                            ld      a,(varL2_BUFFER_MODE)
 213+ E138              ;;;                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 214+ E138              ;;;
 215+ E138              ;;;                            ld 		bc, IO_LAYER2_PORT
 216+ E138              ;;;                            out 	(c),a
 217+ E138              ;;;                            ld		a,1						; set a to 2
 218+ E138              ;;;                            ld		(varL2_BANK_SELECTED),a	; save selected bank
 219+ E138              ;;;                            ex		af,af'
 220+ E138              ;;;                            sub		128
 221+ E138              ;;;                            ret
 222+ E138
 223+ E138
# file closed: ./Layer2Graphics/layer2_bank_select.asm
1315  E138                  INCLUDE "./Layer2Graphics/layer2_cls.asm"
# file opened: ./Layer2Graphics/layer2_cls.asm
   1+ E138
   2+ E138 00           l2_cls_byte	            DB 0
   3+ E139              ; ">DMA Command BLOCK"
   4+ E139
   5+ E139 83 C3 C7 CB  l2_fill                 DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E13D 7D
   6+ E13E 38 E1        l2_fill_astrt           DW l2_cls_byte
   7+ E140 00 40        l2_fill_length          DB $00,$40
   8+ E142 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   9+ E145 00 00        l2_fill_bstrt           DB $00,$00
  10+ E147 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  11+ E14B              l2_fill_cmd_len	        EQU $ - l2_fill
  12+ E14B
  13+ E14B 83 C3 C7 CB  l2_fill_burst           DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
  13+ E14F 7D
  14+ E150 38 E1        .l2_fill_astrt          DW l2_cls_byte
  15+ E152 00 40        .l2_fill_length         DB $00,$40
  16+ E154 24 10 CD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_BURST_MODE
  17+ E157 00 00        .l2_fill_bstrt          DB $00,$00
  18+ E159 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  19+ E15D              l2_fill_burst_cmd_len   EQU $ - l2_fill_burst
  20+ E15D
  21+ E15D              ; ">l2_cls_dma_bank sets a bank to"
  22+ E15D              l2_cls_dma_bank:
  23+ E15D 32 38 E1     .set_colour:            ld (l2_cls_byte),a
  24+ E160 21 39 E1     .write_dma:             ld hl, l2_fill
  25+ E163 06 12                                ld b, l2_fill_cmd_len
  26+ E165 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  27+ E167 ED B3                                otir
  28+ E169 C9                                   ret
  29+ E16A
  30+ E16A              ; ">l2_cls_dma_bank sets a bank to"
  31+ E16A              l2_cls_dma_bank_burst:
  32+ E16A 32 38 E1     .set_colour:            ld (l2_cls_byte),a
  33+ E16D 21 4B E1     .write_dma:             ld hl, l2_fill_burst
  34+ E170 06 12                                ld b, l2_fill_burst_cmd_len
  35+ E172 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  36+ E174 ED B3                                otir
  37+ E176 C9                                   ret
  38+ E177
  39+ E177 3E 00        l2_set_color_upper2:    ld      a,0
  40+ E179 CD 68 E0                             call asm_l2_row_bank_select
  41+ E17C 3A 38 E1                             ld      a,(l2_cls_byte)
  42+ E17F CD 5D E1                             call l2_cls_dma_bank
  43+ E182 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  44+ E184 CD 68 E0                             call asm_l2_row_bank_select
  45+ E187 3A 38 E1                             ld      a,(l2_cls_byte)
  46+ E18A CD 5D E1                             call l2_cls_dma_bank
  47+ E18D C9                                   ret
  48+ E18E
  49+ E18E
  50+ E18E              l2_cls_upper_two_thirds:;ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  51+ E18E                                      asm_l2_bank_0_macro ; call asm_l2_row_bank_select
  51+ E18E 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  51+ E191 F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  51+ E193 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  51+ E196 ED 79       >                            out 	(c),a
  51+ E198             >                          ;  ld      a,%0001000              ; Bank offset of + 1
  51+ E198             >                          ;  out     (c),a
  51+ E198             >                            ZeroA						; set a to 0
  51+ E198 AF          >                        xor a
  51+ E199 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  52+ E19C 3E E3                                ld 	a,COLOUR_TRANSPARENT
  53+ E19E CD 5D E1                             call l2_cls_dma_bank
  54+ E1A1                                      ;ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  55+ E1A1                                      asm_l2_bank_1_macro ;call asm_l2_row_bank_select
  55+ E1A1 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  55+ E1A4 F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  55+ E1A6 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  55+ E1A9 ED 79       >                            out 	(c),a
  55+ E1AB             >                           ; ld      a,%0001000              ; Bank offset of + 1
  55+ E1AB             >                          ;  out     (c),a
  55+ E1AB 3E 01       >                            ld      a,1						; set a to 0
  55+ E1AD 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  56+ E1B0 3E E3                                ld 	a,COLOUR_TRANSPARENT
  57+ E1B2 CD 5D E1                             call l2_cls_dma_bank
  58+ E1B5 C9                                   ret
  59+ E1B6
  60+ E1B6              l2_cls_upper_two_thirds_burst:;ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  61+ E1B6                                      asm_l2_bank_0_macro ; call asm_l2_row_bank_select
  61+ E1B6 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  61+ E1B9 F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  61+ E1BB 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  61+ E1BE ED 79       >                            out 	(c),a
  61+ E1C0             >                          ;  ld      a,%0001000              ; Bank offset of + 1
  61+ E1C0             >                          ;  out     (c),a
  61+ E1C0             >                            ZeroA						; set a to 0
  61+ E1C0 AF          >                        xor a
  61+ E1C1 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  62+ E1C4 3E E3                                ld 	a,COLOUR_TRANSPARENT
  63+ E1C6 CD 6A E1                             call l2_cls_dma_bank_burst
  64+ E1C9                                      ;ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  65+ E1C9                                      asm_l2_bank_1_macro ;call asm_l2_row_bank_select
  65+ E1C9 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  65+ E1CC F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  65+ E1CE 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  65+ E1D1 ED 79       >                            out 	(c),a
  65+ E1D3             >                           ; ld      a,%0001000              ; Bank offset of + 1
  65+ E1D3             >                          ;  out     (c),a
  65+ E1D3 3E 01       >                            ld      a,1						; set a to 0
  65+ E1D5 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  66+ E1D8 3E E3                                ld 	a,COLOUR_TRANSPARENT
  67+ E1DA CD 6A E1                             call l2_cls_dma_bank_burst
  68+ E1DD C9                                   ret
  69+ E1DE
  70+ E1DE              l2_cls_lower_third:     ;ld a,128							; pretend we are plotting pixel on row 64 to force mid selection
  71+ E1DE                                      asm_l2_bank_2_macro; call asm_l2_row_bank_select
  71+ E1DE 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  71+ E1E1 F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  71+ E1E3 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  71+ E1E6 ED 79       >                            out 	(c),a
  71+ E1E8             >                          ;  ld      a,%0001000              ; Bank offset of + 1
  71+ E1E8             >                           ; out     (c),a
  71+ E1E8 3E 02       >                            ld      a,2						; set a to 0
  71+ E1EA 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  72+ E1ED 3E E3                                ld 	a,COLOUR_TRANSPARENT
  73+ E1EF CD 5D E1                             call l2_cls_dma_bank
  74+ E1F2 C9                                   ret
  75+ E1F3
  76+ E1F3              l2_cls_lower_third_burst:asm_l2_bank_2_macro; call asm_l2_row_bank_select
  76+ E1F3 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  76+ E1F6 F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  76+ E1F8 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  76+ E1FB ED 79       >                            out 	(c),a
  76+ E1FD             >                          ;  ld      a,%0001000              ; Bank offset of + 1
  76+ E1FD             >                           ; out     (c),a
  76+ E1FD 3E 02       >                            ld      a,2						; set a to 0
  76+ E1FF 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  77+ E202 3E E3                                ld 	a,COLOUR_TRANSPARENT
  78+ E204 CD 6A E1                             call l2_cls_dma_bank_burst
  79+ E207 C9                                   ret
  80+ E208
  81+ E208
  82+ E208 CD B6 E1     l2_cls_burst:           call l2_cls_upper_two_thirds_burst
  83+ E20B C3 F3 E1                             jp   l2_cls_lower_third_burst
  84+ E20E
  85+ E20E
  86+ E20E CD 8E E1     l2_cls:                 call l2_cls_upper_two_thirds
  87+ E211 C3 DE E1                             jp   l2_cls_lower_third
  88+ E214
  89+ E214              l2_320_cls:
  90+ E214 CD 8E E1     l2_640_cls:             call l2_cls_upper_two_thirds
  91+ E217 CD DE E1                             call   l2_cls_lower_third
  92+ E21A                                      ; need to clear banks 4 and 5 via normal paging, say into C000 with interrupts disabled
  93+ E21A                                      asm_l2_bank_3_macro
  93+ E21A 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  93+ E21D F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  93+ E21F F6 0B       >                            or      %0001011
  93+ E221 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  93+ E224 ED 79       >                            out 	(c),a
  93+ E226 3E 03       >                            ld      a,3						; set a to 0
  93+ E228 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  94+ E22B 3E E3                                ld 	a,COLOUR_TRANSPARENT
  95+ E22D CD 5D E1                             call l2_cls_dma_bank
  96+ E230                                      asm_l2_bank_4_macro
  96+ E230 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  96+ E233 F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  96+ E235 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  96+ E238 ED 79       >                            out 	(c),a
  96+ E23A 3E 04       >                            ld      a,4						; set a to 0
  96+ E23C 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  97+ E23F 3E E3                                ld 	a,COLOUR_TRANSPARENT
  98+ E241 CD 5D E1                             call l2_cls_dma_bank
  99+ E244
 100+ E244 C9                                   ret
 101+ E245
# file closed: ./Layer2Graphics/layer2_cls.asm
1316  E245                  INCLUDE "./Layer2Graphics/layer2_initialise.asm"
# file opened: ./Layer2Graphics/layer2_initialise.asm
   1+ E245
   2+ E245 ED 91 70 00  l2_initialise:          nextreg     LAYER_2_CONTROL_REGISTER,           %00000000               ; 256x192x8bpp
   3+ E249 ED 91 12 08                          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
   4+ E24D ED 91 13 0D                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
   5+ E251 ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
   6+ E255                                      ZeroA
   6+ E255 AF          >                        xor a
   7+ E256                                      DoubleBufferIfPossible
   7+ E256             >                        IFDEF DOUBLEBUFFER
   7+ E256             >                            MMUSelectLayer2
   7+ E256 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7+ E25A CD 0E E2    >                            call  l2_cls
   7+ E25D CD 97 E2    >                            call  l2_flip_buffers
   7+ E260             >                        ENDIF
   8+ E260                                      DoubleBufferIfPossible
   8+ E260             >                        IFDEF DOUBLEBUFFER
   8+ E260             >                            MMUSelectLayer2
   8+ E260 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   8+ E264 CD 0E E2    >                            call  l2_cls
   8+ E267 CD 97 E2    >                            call  l2_flip_buffers
   8+ E26A             >                        ENDIF
   9+ E26A CD 68 E0                             call        asm_l2_row_bank_select
  10+ E26D C9                                   ret
  11+ E26E
  12+ E26E ED 91 70 10  l2_320_initialise:      nextreg     LAYER_2_CONTROL_REGISTER,           %00010000               ; 320x256x8bpp
  13+ E272 ED 91 12 08                          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
  14+ E276 ED 91 13 0D                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
  15+ E27A ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
  16+ E27E                                      ZeroA
  16+ E27E AF          >                        xor a
  17+ E27F                                      DoubleBuffer320IfPossible
  17+ E27F             >                        IFDEF DOUBLEBUFFER
  17+ E27F             >                            MMUSelectLayer2
  17+ E27F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  17+ E283 CD 14 E2    >                            call  l2_320_cls
  17+ E286 CD 97 E2    >                            call  l2_flip_buffers
  17+ E289             >                        ENDIF
  18+ E289                                      DoubleBuffer320IfPossible
  18+ E289             >                        IFDEF DOUBLEBUFFER
  18+ E289             >                            MMUSelectLayer2
  18+ E289 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  18+ E28D CD 14 E2    >                            call  l2_320_cls
  18+ E290 CD 97 E2    >                            call  l2_flip_buffers
  18+ E293             >                        ENDIF
  19+ E293 CD C2 E0                             call        asm_l2_320_col_bank_select
  20+ E296 C9                                   ret
  21+ E297
  22+ E297              ;l2_640_initialise:      nextreg     LAYER_2_CONTROL_REGISTER,           %00100000               ; 320x256x8bpp
  23+ E297              ;                        nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
  24+ E297              ;                        nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
  25+ E297              ;                        nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
  26+ E297              ;                        ZeroA
  27+ E297              ;                        DoubleBuffer640IfPossible
  28+ E297              ;                        DoubleBuffer640IfPossible
  29+ E297              ;                        call        asm_l2_640_col_bank_select
  30+ E297              ;                        ret
  31+ E297
# file closed: ./Layer2Graphics/layer2_initialise.asm
1317  E297                  INCLUDE "./Layer2Graphics/l2_flip_buffers.asm"
# file opened: ./Layer2Graphics/l2_flip_buffers.asm
   1+ E297              l2_flip_buffers:        GetNextReg LAYER2_RAM_PAGE_REGISTER
   1+ E297 01 3B 24    >            ld bc,$243B
   1+ E29A 3E 12       >            ld a,LAYER2_RAM_PAGE_REGISTER
   1+ E29C ED 79       >            out (c),a
   1+ E29E 04          >            inc b
   1+ E29F ED 78       >            in a,(c)
   2+ E2A1 57                                   ld      d,a
   3+ E2A2                                      GetNextReg LAYER2_RAM_SHADOW_REGISTER
   3+ E2A2 01 3B 24    >            ld bc,$243B
   3+ E2A5 3E 13       >            ld a,LAYER2_RAM_SHADOW_REGISTER
   3+ E2A7 ED 79       >            out (c),a
   3+ E2A9 04          >            inc b
   3+ E2AA ED 78       >            in a,(c)
   4+ E2AC 5F                                   ld      e,a
   5+ E2AD ED 92 12                             nextreg LAYER2_RAM_PAGE_REGISTER, a
   6+ E2B0 7A                                   ld      a,d
   7+ E2B1 ED 92 13                             nextreg LAYER2_RAM_SHADOW_REGISTER, a
   8+ E2B4 C9                                   ret
   9+ E2B5
# file closed: ./Layer2Graphics/l2_flip_buffers.asm
1318  E2B5                  INCLUDE "./Layer2Graphics/layer2_plot_pixel.asm"
# file opened: ./Layer2Graphics/layer2_plot_pixel.asm
   1+ E2B5
   2+ E2B5 DF           line_gfx_colour db $DF
   3+ E2B6
   4+ E2B6              l2_plot_macro:          MACRO
   5+ E2B6 ~                                    ld      a,b
   6+ E2B6 ~                                    JumpIfAGTENusng 192 ,.NoPlot
   7+ E2B6 ~                                    ld      l,c
   8+ E2B6 ~                                    call    asm_l2_row_bank_select
   9+ E2B6 ~                                    ld      h,a
  10+ E2B6 ~                                    ld      a,(line_gfx_colour)
  11+ E2B6 ~                                    ld      (hl),a
  12+ E2B6 ~            .NoPlot:
  13+ E2B6                                      ENDM
  14+ E2B6
  15+ E2B6
  16+ E2B6              ; ">l2_plot_pixel b= row number, c = column number, a = pixel col"
  17+ E2B6 F5           l2_plot_pixel:          push    af
  18+ E2B7 78                                   ld      a,b
  19+ E2B8              l2_pp_row_valid:        JumpIfAGTENusng ScreenHeight,l2_pp_dont_plot
  19+ E2B8 FE C0       >                        cp     ScreenHeight
  19+ E2BA D2 C8 E2    >                        jp		nc,l2_pp_dont_plot
  20+ E2BD C5                                   push    bc								; bank select destroys bc so need to save it
  21+ E2BE                                  ;	ld      a,b
  22+ E2BE CD 68 E0                             call    asm_l2_row_bank_select
  23+ E2C1 C1                                   pop     bc
  24+ E2C2 47                                   ld      b,a
  25+ E2C3 60                                   ld      h,b								; hl now holds ram address after bank select
  26+ E2C4 69                                   ld      l,c
  27+ E2C5 F1                                   pop     af								; a = colour to plott
  28+ E2C6 77                                   ld      (hl),a
  29+ E2C7 C9                                   ret
  30+ E2C8 F1           l2_pp_dont_plot:        pop     af
  31+ E2C9 C9                                   ret
  32+ E2CA
  33+ E2CA              ; ">l2_plot_pixel d= row number, hl = column number, e = pixel col"
  34+ E2CA 7C           l2_plot_pixel_320:      ld      a,h
  35+ E2CB FE 01                                cp      1                               ; if < 256, definite OK
  36+ E2CD 20 05                                jr      nz,.DoneCheck
  37+ E2CF 7D                                   ld      a,l
  38+ E2D0 E6 C0                                and     %11000000                       ; if its 7 or 6 set then > 319
  39+ E2D2 20 06                                jr      nz,.DontPlot
  40+ E2D4 CD C2 E0     .DoneCheck:             call    asm_l2_320_col_bank_select      ; adjust hl for column > h
  41+ E2D7 6A                                   ld      l,d                             ; as they are horizontal now
  42+ E2D8 7B                                   ld      a,e
  43+ E2D9 77                                   ld      (hl),a
  44+ E2DA C9           .DontPlot:              ret
  45+ E2DB
  46+ E2DB CD C2 E0     l2_plot_pixel_320_no_check:   call    asm_l2_320_col_bank_select      ; adjust hl for column > h
  47+ E2DE 6A                                   ld      l,d                             ; as they are horizontal now
  48+ E2DF 7B                                   ld      a,e
  49+ E2E0 77                                   ld      (hl),a
  50+ E2E1 C9                                   ret
  51+ E2E2
  52+ E2E2              ; y aixs bounds check must have been done before calling this
  53+ E2E2 F5           l2_plot_pixel_no_check: push    af
  54+ E2E3 C5                                   push    bc								; bank select destroys bc so need to save it
  55+ E2E4 78                                   ld      a,b                             ; determine target bank
  56+ E2E5 CD 68 E0                             call    asm_l2_row_bank_select
  57+ E2E8 C1                                   pop     bc
  58+ E2E9 47                                   ld      b,a                             ; b now adjusted for bank, c = column
  59+ E2EA 60 69                                ld      hl,bc                           ; hl now holds ram address after bank select
  60+ E2EC F1                                   pop     af								; a = colour to plott
  61+ E2ED 77                                   ld      (hl),a                          ; poke to ram
  62+ E2EE C9                                   ret
  63+ E2EF
  64+ E2EF              ; ">l2_plot_pixel_no_bank b= row number, c = column number, a = pixel col"
  65+ E2EF              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  66+ E2EF E5           l2_plot_pixel_no_bank:  push 	hl
  67+ E2F0 60                                   ld 		h,b								; hl now holds ram address after bank select
  68+ E2F1 69                                   ld 		l,c
  69+ E2F2 77                                   ld 		(hl),a
  70+ E2F3 E1                                   pop		hl
  71+ E2F4 C9                                   ret
  72+ E2F5
  73+ E2F5              ; ">l2_plot_pixel_no_bank d= row number, h = column number, a = pixel col"
  74+ E2F5              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  75+ E2F5              l2_plot_pixel_320_no_bank:
  76+ E2F5 6A                                   ld 		l,d
  77+ E2F6 77                                   ld 		(hl),a
  78+ E2F7 C9                                   ret
  79+ E2F8              ; The more simpler h col l row is just ld (hl),a so no need for a function
  80+ E2F8
  81+ E2F8
  82+ E2F8 F5           ShipPixel:              push    af
  83+ E2F9 78                                   ld      a,b
  84+ E2FA FE 7F                                cp      127
  85+ E2FC D0                                   ret     nc
  86+ E2FD F1                                   pop     af
  87+ E2FE 18 E2                                jr      l2_plot_pixel_no_check
  88+ E300                                      ;***Implicit ret due to jr
  89+ E300
  90+ E300              ; in bc = yx iyl = colour
  91+ E300 78           DebrisPixel:            ld      a,b
  92+ E301 FE 7F                                cp      127
  93+ E303 D0                                   ret     nc
  94+ E304 FD 7D                                ld      a, iyl
  95+ E306 18 DA                                jr      l2_plot_pixel_no_check
  96+ E308                                      ;***Implicit ret due to jr
  97+ E308
  98+ E308 F5           l2_plot_pixel_y_test:   push	af
  99+ E309 78                                   ld		a,b
 100+ E30A FE C0                                cp		192
 101+ E30C 30 03                                jr		nc,.clearup
 102+ E30E F1                                   pop		af
 103+ E30F 18 A5                                jr		l2_plot_pixel
 104+ E311 F1           .clearup:               pop		af
 105+ E312 C9                                   ret
 106+ E313
 107+ E313              l2_point_pixel_y_safe:	MACRO
 108+ E313 ~            						push	hl
 109+ E313 ~            						push	bc
 110+ E313 ~            						call	l2_plot_pixel
 111+ E313 ~            						pop		bc
 112+ E313 ~            						pop		hl
 113+ E313              						ENDM
 114+ E313
# file closed: ./Layer2Graphics/layer2_plot_pixel.asm
1319  E313                  INCLUDE "./Layer2Graphics/layer2_print_character.asm"
# file opened: ./Layer2Graphics/layer2_print_character.asm
   1+ E313
   2+ E313              l2_print_chr_at:
   3+ E313              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
   4+ E313              ; "Need a version that also prints absence of character"
   5+ E313 7A           	ld		a,d
   6+ E314 FE 20        	cp		32
   7+ E316 38 3F        	jr		c,.InvalidCharacter		; Must be between 32 and 127
   8+ E318 FE 7F        	cp		127
   9+ E31A 30 3B        	jr		nc,.InvalidCharacter
  10+ E31C              .ValidCharater:
  11+ E31C 26 00        	ld		h,0
  12+ E31E 6A           	ld		l,d
  13+ E31F 29           	add		hl,hl						; * 2
  14+ E320 29           	add		hl,hl						; * 4
  15+ E321 29           	add		hl,hl						; * 8 to get byte address
  16+ E322 ED 34 00 3C  	add		hl,charactersetaddr			; hl = address of rom char
  17+ E326 04           	inc		b							; start + 1 pixel x and y as we only print 7x7
  18+ E327 23           	inc		hl							; skip first byte
  19+ E328 16 07        	ld		d,7
  20+ E32A              .PrintCharLoop:
  21+ E32A D5           	push	de
  22+ E32B 7E           	ld		a,(hl)
  23+ E32C FE 00        	cp		0
  24+ E32E 28 21        	jr		z,.NextRowNoBCPop
  25+ E330              .PrintARow:
  26+ E330 C5           	push	bc							; save row col
  27+ E331 16 07        	ld		d,7							; d is loop row number now
  28+ E333              .PrintPixelLoop:
  29+ E333 0C           	inc		c							; we start at col 1 not 0 so can move inc here
  30+ E334              .PrintTheRow:
  31+ E334 CB 27        	sla		a							; scroll char 1 pixel as we read from bit 7
  32+ E336 F5           	push	af							; save character byte
  33+ E337 CB 7F        	bit		7,a							; If left most pixel set then plot
  34+ E339 20 04        	jr		nz,.PixelToPrint
  35+ E33B              .NoPixelToPrint:
  36+ E33B 3E E3        	ld		a,$E3
  37+ E33D 18 01        	jr		.HaveSetPixelColour
  38+ E33F              .PixelToPrint:
  39+ E33F 7B           	ld		a,e							; Get Colour
  40+ E340              .HaveSetPixelColour
  41+ E340 E5           	push	hl
  42+ E341              ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
  43+ E341              .BankOnFirstOnly:
  44+ E341 F5           	push	af
  45+ E342 7A           	ld		a,d
  46+ E343 FE 07        	cp		7
  47+ E345 28 11        	jr		z,.PlotWithBank
  48+ E347              .PlotNoBank:
  49+ E347 F1           	pop		af
  50+ E348 60           	ld 		h,b								; hl now holds ram address after bank select
  51+ E349 69           	ld 		l,c
  52+ E34A 77           	ld 		(hl),a
  53+ E34B              .IterateLoop:
  54+ E34B              ;	pop		bc
  55+ E34B E1           	pop		hl
  56+ E34C F1           	pop		af							; a= current byte shifted
  57+ E34D 15           	dec		d						 	; do dec after inc as we amy
  58+ E34E 20 E3        	jr		nz,.PrintPixelLoop
  59+ E350              .NextRow:
  60+ E350 C1           	pop		bc							; Current Col Row
  61+ E351              .NextRowNoBCPop:
  62+ E351 D1           	pop		de							; d= row loop
  63+ E352 04           	inc		b							; Down 1 row
  64+ E353 23           	inc		hl							; Next character byte
  65+ E354 15           	dec		d							; 1 done now
  66+ E355 20 D3        	jr		nz,.PrintCharLoop
  67+ E357              .InvalidCharacter:
  68+ E357 C9           	ret
  69+ E358              .PlotWithBank:
  70+ E358 F1           	pop		af
  71+ E359 CD B6 E2     	call	l2_plot_pixel				; This will shift bc to poke row
  72+ E35C 18 ED        	jr		.IterateLoop
  73+ E35E
  74+ E35E              l2_print_at:
  75+ E35E              ; "l2_print_at bc= colrow, hl = addr of message, e = colour"
  76+ E35E              ; "No error trapping, if there is no null is will just cycle on the line"
  77+ E35E 7E           	ld	a,(hl)							; Return if empty string
  78+ E35F FE 00        	cp	0
  79+ E361 C8           	ret	z
  80+ E362 E5           	push	hl
  81+ E363 D5           	push	de
  82+ E364 C5           	push	bc
  83+ E365 57           	ld		d,a							; bc = pos, de = char and colour
  84+ E366 CD 13 E3     	call 	l2_print_chr_at
  85+ E369 C1           	pop		bc
  86+ E36A D1           	pop		de
  87+ E36B E1           	pop		hl
  88+ E36C              .Move8Pixlestoright:
  89+ E36C 08           	ex		af,af'
  90+ E36D 79           	ld		a,c
  91+ E36E C6 08        	add		8
  92+ E370 4F           	ld		c,a
  93+ E371 08           	ex		af,af'
  94+ E372 23           	inc		hl
  95+ E373 18 E9        	jr		l2_print_at					; Just loop until 0 found
  96+ E375
  97+ E375
  98+ E375              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
  99+ E375              ; "Need a version that also prints absence of character"
 100+ E375              ; removed blank line optimisation as we need spaces printed
 101+ E375 7A           l2_print_7chr_at:       ld		a,d
 102+ E376 FE 1F                                cp		31
 103+ E378 38 3D                                jr		c,.InvalidCharacter		; Must be between 32 and 127
 104+ E37A FE 7F                                cp		127
 105+ E37C 30 39                                jr		nc,.InvalidCharacter
 106+ E37E 26 00        .ValidCharater:         ld		h,0
 107+ E380 6A                                   ld		l,d
 108+ E381 29                                   add		hl,hl						; * 2
 109+ E382 29                                   add		hl,hl						; * 4
 110+ E383 29                                   add		hl,hl						; * 8 to get byte address
 111+ E384 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
 112+ E388 04                                   inc		b							; start + 1 pixel x and y as we only print 7x7
 113+ E389 23                                   inc		hl							; skip first byte
 114+ E38A 16 07                                ld		d,7
 115+ E38C D5           .PrintCharLoop:         push	de
 116+ E38D 7E                                   ld		a,(hl)
 117+ E38E                                      ;cp		0
 118+ E38E                                      ;jr		z,.NextRowNoBCPop
 119+ E38E C5           .PrintARow:             push	bc							; save row col
 120+ E38F 16 06                                ld		d,6							; d is loop row number now
 121+ E391 0C           .PrintPixelLoop:        inc		c							; we start at col 1 not 0 so can move inc here
 122+ E392 28 1C                                jr		z,.NextRow
 123+ E394 CB 27                                sla		a							; scroll char 1 pixel as we read from bit 7
 124+ E396 F5                                   push	af							; save character byte
 125+ E397 CB 7F                                bit		7,a							; If left most pixel set then plot
 126+ E399 20 04                                jr		nz,.PixelToPrint
 127+ E39B 3E E3        .NoPixelToPrint:        ld		a,$E3
 128+ E39D 18 01                                jr		.HaveSetPixelColour
 129+ E39F 7B           .PixelToPrint:          ld		a,e							; Get Colour
 130+ E3A0 E5           .HaveSetPixelColour		push	hl
 131+ E3A1                                      ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
 132+ E3A1 F5           .BankOnFirstOnly:       push	af
 133+ E3A2 7A                                   ld		a,d
 134+ E3A3 FE 06                                cp		6
 135+ E3A5 28 11                                jr		z,.PlotWithBank
 136+ E3A7 F1           .PlotNoBank:            pop		af
 137+ E3A8 60                                   ld 		h,b								; hl now holds ram address after bank select
 138+ E3A9 69                                   ld 		l,c
 139+ E3AA 77                                   ld 		(hl),a
 140+ E3AB              .IterateLoop:	        ;	pop		bc
 141+ E3AB E1                                   pop		hl
 142+ E3AC F1                                   pop		af							; a= current byte shifted
 143+ E3AD 15                                   dec		d						 	; do dec after inc as we amy
 144+ E3AE 20 E1                                jr		nz,.PrintPixelLoop
 145+ E3B0 C1           .NextRow:               pop		bc							; Current Col Row
 146+ E3B1 D1           .NextRowNoBCPop:	    pop		de							; d= row loop
 147+ E3B2 04                                   inc		b							; Down 1 row
 148+ E3B3 23                                   inc		hl							; Next character byte
 149+ E3B4 15                                   dec		d							; 1 done now
 150+ E3B5 20 D5                                jr		nz,.PrintCharLoop
 151+ E3B7 C9           .InvalidCharacter:      ret
 152+ E3B8 F1           .PlotWithBank:          pop		af
 153+ E3B9 CD B6 E2                             call	l2_plot_pixel				; This will shift bc to poke row
 154+ E3BC 18 ED                                jr		.IterateLoop
 155+ E3BE
 156+ E3BE              ; "l2_print_7at bc= colrow, hl = addr of message, e = colour"
 157+ E3BE              ; "No error trapping, if there is no null is will just cycle on the line"
 158+ E3BE 7E           l2_print_7at:           ld	a,(hl)							; Return if empty string
 159+ E3BF FE 00                                cp	0
 160+ E3C1 C8                                   ret	z
 161+ E3C2 E5                                   push	hl
 162+ E3C3 D5                                   push	de
 163+ E3C4 C5                                   push	bc
 164+ E3C5 57                                   ld		d,a							; bc = pos, de = char and colour
 165+ E3C6 CD 75 E3                             call 	l2_print_7chr_at
 166+ E3C9 C1                                   pop		bc
 167+ E3CA D1                                   pop		de
 168+ E3CB E1                                   pop		hl
 169+ E3CC 08           .Move7Pixlestoright:	ex		af,af'
 170+ E3CD 79                                   ld		a,c
 171+ E3CE C6 07                                add		7
 172+ E3D0 4F                                   ld		c,a
 173+ E3D1 08                                   ex		af,af'
 174+ E3D2 23                                   inc		hl
 175+ E3D3 18 E9                                jr		l2_print_7at					; Just loop until 0 found
 176+ E3D5
 177+ E3D5
 178+ E3D5              ; "l2_print_7at b= row, hl = col de = addr of message, c = colour"
 179+ E3D5              ; "No error trapping, if there is no null is will just cycle on the line"
 180+ E3D5
 181+ E3D5 1A           l2_print_7at_320:       ld	a,(de)							; Return if empty string
 182+ E3D6 FE 00                                cp	0
 183+ E3D8 C8                                   ret	z
 184+ E3D9 E5 D5 C5                             push	hl,,de,,bc
 185+ E3DC 57                                   ld		d,a							; bc = pos, de = char and colour
 186+ E3DD                                      ;TODOcallcall 	l2_print_7chr_at_320
 187+ E3DD C1 D1 E1                             pop		hl,,de,,bc
 188+ E3E0 08           .Move7Pixlestoright:	ex		af,af'
 189+ E3E1 79                                   ld		a,c
 190+ E3E2 C6 07                                add		7
 191+ E3E4 4F                                   ld		c,a
 192+ E3E5 08                                   ex		af,af'
 193+ E3E6 23                                   inc		hl
 194+ E3E7 18 EC                                jr		l2_print_7at_320		    ; Just loop until 0 found
 195+ E3E9
 196+ E3E9
# file closed: ./Layer2Graphics/layer2_print_character.asm
1320  E3E9                  INCLUDE "./Layer2Graphics/layer2_draw_box.asm"
# file opened: ./Layer2Graphics/layer2_draw_box.asm
   1+ E3E9              ; "l2_draw_thick_box bc=rowcol, de=heightwidth h=color"
   2+ E3E9              ; TODO DMA Optimise
   3+ E3E9                              DISPLAY "TODO: dma optimise"
   4+ E3E9 C5 D5 E5     l2_draw_fill_box:       push    bc,,de,,hl
   5+ E3EC 53                                   ld      d,e
   6+ E3ED 5C                                   ld      e,h
   7+ E3EE CD 84 E4                             call    l2_draw_horz_line           ; "bc = left side row,col, d = length, e = color"
   8+ E3F1 E1 D1 C1                             pop     bc,,de,,hl
   9+ E3F4 04                                   inc     b
  10+ E3F5 15                                   dec     d
  11+ E3F6 C8                                   ret     z
  12+ E3F7 18 F0                                jr      l2_draw_fill_box
  13+ E3F9
  14+ E3F9              ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
  15+ E3F9 C5 D5 F5     l2_draw_box:            push	bc,,de,,af
  16+ E3FC 53                                   ld		d,e
  17+ E3FD 5F                                   ld		e,a
  18+ E3FE 14                                   inc		d
  19+ E3FF CD 84 E4                             call	l2_draw_horz_line
  20+ E402 F1 D1 C1                             pop		bc,,de,,af
  21+ E405 C5 D5 F5     .bottomhorzline:	    push	bc,,de,,af
  22+ E408 67                                   ld		h,a							;save color whilst b = row + height
  23+ E409 78                                   ld		a,b
  24+ E40A 82                                   add		a,d
  25+ E40B 47                                   ld		b,a
  26+ E40C 53                                   ld		d,e							; d = width
  27+ E40D 14                                   inc		d							; Extra pixel for width
  28+ E40E 5C                                   ld		e,h							; e = colour
  29+ E40F CD 84 E4                             call	l2_draw_horz_line
  30+ E412 F1 D1 C1                             pop		bc,,de,,af
  31+ E415 C5 D5 F5     .leftvertline:          push	bc,,de,,af
  32+ E418 04                                   inc		b							; save 2 pixles
  33+ E419 15                                   dec		d
  34+ E41A 5F                                   ld		e,a							; e = color
  35+ E41B CD EF E4                             call	l2_draw_vert_line
  36+ E41E F1 D1 C1                             pop		bc,,de,,af
  37+ E421 04           .rightvertline:         inc		b							; save 2 pixles
  38+ E422 15                                   dec		d
  39+ E423 67                                   ld		h,a							;save color whilst c = col + width
  40+ E424 79                                   ld		a,c
  41+ E425 83                                   add		a,e
  42+ E426 4F                                   ld		c,a
  43+ E427 5C                                   ld		e,h							; e = color
  44+ E428 CD EF E4                             call	l2_draw_vert_line
  45+ E42B C9                                   ret
  46+ E42C
  47+ E42C              ; "b = row, hl = col, c = height, de = width, a = colour"
  48+ E42C C5 D5 E5 F5  l2_draw_box_320:        push    bc,,de,,hl,,af
  49+ E430                                      ;TODOcall    l2_draw_horz_line_320       ; b = row, hl = col, e = width a = colour
  50+ E430 F1 E1 D1 C1                          pop     bc,,de,,hl,,af
  51+ E434 C5 D5 E5 F5                          push    bc,,de,,hl,,af
  52+ E438 08                                   ex      af,af'
  53+ E439 78                                   ld      a,b
  54+ E43A 3D                                   dec     a
  55+ E43B 81                                   add     a,c
  56+ E43C 41                                   ld      b,c
  57+ E43D 08                                   ex      af,af'
  58+ E43E                                      ;TODOcall    l2_draw_horz_line_320       ; b = row, hl = col, e = width a = colour
  59+ E43E F1 E1 D1 C1  .leftVertLine:          pop     bc,,de,,hl,,af
  60+ E442 C5 D5 E5 F5                          push    bc,,de,,hl,,af
  61+ E446                                      ;TODOcall    l2_draw_vert_line_320
  62+ E446 F1 E1 D1 C1                          pop     bc,,de,,hl,,af
  63+ E44A 19                                   add     hl,de
  64+ E44B 2B                                   dec     hl
  65+ E44C                                      ;TODOcall    l2_draw_vert_line_320
  66+ E44C C9                                   ret
  67+ E44D
# file closed: ./Layer2Graphics/layer2_draw_box.asm
1321  E44D                  INCLUDE "./Layer2Graphics/asm_l2_plot_horizontal.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_horizontal.asm
   1+ E44D
   2+ E44D              ;; NOTE DMA is little endian
   3+ E44D 00           l2_horz_pixel           DB 0
   4+ E44E
   5+ E44E 83 C3 C7 CB  l2_horz_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E452 7D
   6+ E453 4D E4        l2_horz_colr            DW l2_horz_pixel
   7+ E455 00           l2_horz_lenlo           DB 0
   8+ E456 00           l2_horz_lenhi           DB 0
   9+ E457 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  10+ E45A 00 00        l2_horz_target          DB $00, $00
  11+ E45C CF 87                                DB DMA_LOAD, DMA_ENABLE
  12+ E45E              l2_horz_cmd_len	        EQU $ - l2_horz_line
  13+ E45E
  14+ E45E
  15+ E45E              ; "l2_draw_horz_dma"
  16+ E45E              ; "plot at bc for length d colour e using dma, assumes bank already selected"
  17+ E45E 7B           l2_draw_horz_dma:       ld		a,e                                               ; T=4      ;
  18+ E45F 32 4D E4                             ld		(l2_horz_pixel),a                                 ; T=13     ;
  19+ E462 5A                                   ld      e,d ; saved 3 t states ld		a,d                                               ; T=4      ; e=d   4
  20+ E463 16 00                                ld      d,0; saved 3 t states ld 		(l2_horz_lenlo),a                                 ; T=13     ; d = 0  7
  21+ E465 ED 53 55 E4                          ld      (l2_horz_lenlo),de; saved 3 t states xor 	a                                                 ; T=4      ; t 20  31
  22+ E469                                      ; saved 3 t states ld ld 		(l2_horz_lenhi),a                                 ; T=13     ;
  23+ E469                                    ; saved 4 t states  ld		h,b                           ;          ;
  24+ E469                                    ; saved 4 t states  ld		l,c                           ;          ;
  25+ E469 ED 43 5A E4                          ld      (l2_horz_target),bc ; saved 4 t states  was , hl  ; T=20     ;
  26+ E46D 21 4E E4     .write_dma:             ld 		hl, l2_horz_line                                  ;          ;
  27+ E470 06 10                                ld 		b, l2_horz_cmd_len                                ;
  28+ E472 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT                            ;
  29+ E474 ED B3                                otir                                                      ;
  30+ E476 C9                                   ret
  31+ E477
  32+ E477              ; "bc = left side row,col, d = length, e = color"
  33+ E477 D5           l2_draw_horz_dma_bank:  push 	de							; save length and colour
  34+ E478 C5                                   push 	bc							; save row col
  35+ E479 78                                   ld   	a,b
  36+ E47A CD 68 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  37+ E47D C1                                   pop  	bc
  38+ E47E 47                                   ld	 	b,a	       					; fixed row by the call we can go straight into HL with row col
  39+ E47F D1                                   pop  	de							; get length back
  40+ E480 CD 5E E4                             call    l2_draw_horz_dma
  41+ E483 C9                                   ret
  42+ E484
  43+ E484              ; "l2_draw_horz_line"
  44+ E484              ; "bc = left side row,col, d = length, e = color"
  45+ E484              ; "optimisation if above min pix is will use dma call SCREEN_HOZ_MIN_PIX not implemented yet"
  46+ E484 7A           l2_draw_horz_line:      ld		a,d
  47+ E485 FE 00                                cp 		0							; if its zero length then just return
  48+ E487 C8           .zerolengthexit:        ret		z
  49+ E488 FE 01        .isitlen1:              cp 		1
  50+ E48A CA AC E4                             jp 		z,.l2_draw_horz_line_1
  51+ E48D FE 0A        .longenoughtfordma:     cp  10
  52+ E48F C3 77 E4                             jp  l2_draw_horz_dma_bank
  53+ E492 D5 C5        .plottableline:         push 	de,,bc  					; save length and colour an d row col
  54+ E494 78                                   ld   	a,b
  55+ E495 CD 68 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  56+ E498 C1                                   pop  	bc
  57+ E499 67                                   ld	 	h,a	       					; fixed row by the call we can go straight into HL with row col
  58+ E49A 69                                   ld   	l,c
  59+ E49B D1                                   pop  	de							; get length back
  60+ E49C 79           .cliptest:              ld	 	a,c							; get column + length
  61+ E49D 42                                   ld  	b,d  						; speculate that we don't clip by pre-loading b with length
  62+ E49E 82                                   add  	a,d
  63+ E49F 30 06                                jr   	nc, .l2_draw_horz_plot_loop	; if carry is set c+d > 255
  64+ E4A1 3E FF        .clipat255:             ld   	a,$FF
  65+ E4A3 91                                   sub  	c							; a holds clipped length
  66+ E4A4 47                                   ld 		b, a 						; so now hl holds poke address  b = clipped length e = colour
  67+ E4A5 18 00                                jr		.l2_draw_horz_plot_loop
  68+ E4A7 73           .l2_draw_horz_plot_loop:ld (hl),e							; loop poking hl with e for b pixels
  69+ E4A8 23                                   inc hl
  70+ E4A9 10 FC                                djnz .l2_draw_horz_plot_loop
  71+ E4AB C9                                   ret
  72+ E4AC 7B           .l2_draw_horz_line_1:   ld		a,e
  73+ E4AD                                      l2_plot_macro; jp		l2_plot_pixel				; hijack return
  73+ E4AD 78          >                        ld      a,b
  73+ E4AE             >                        JumpIfAGTENusng 192 ,.NoPlot
  73+ E4AE FE C0       >                        cp     192
  73+ E4B0 D2 BC E4    >                        jp		nc,.NoPlot
  73+ E4B3 69          >                        ld      l,c
  73+ E4B4 CD 68 E0    >                        call    asm_l2_row_bank_select
  73+ E4B7 67          >                        ld      h,a
  73+ E4B8 3A B5 E2    >                        ld      a,(line_gfx_colour)
  73+ E4BB 77          >                        ld      (hl),a
  73+ E4BC             >.NoPlot:
  74+ E4BC C9                                   ret
  75+ E4BD
  76+ E4BD
  77+ E4BD              ; "l2_draw_horz_line_to"
  78+ E4BD              ; "bc = left side row,col, d right pixel, e = color"
  79+ E4BD 7A           l2_draw_horz_line_to:   ld 		a,d
  80+ E4BE B9                                   cp 		c
  81+ E4BF 30 04                                jr		nc, .noswap
  82+ E4C1 28 07                                jr      z, .singlepixel
  83+ E4C3 51           .swap:                  ld		d,c
  84+ E4C4 4F                                   ld		c,a
  85+ E4C5 7A           .noswap:                ld		a,d
  86+ E4C6 91                                   sub		c
  87+ E4C7              ;                        dec		a							; so now its length not offset
  88+ E4C7 57                                   ld		d,a
  89+ E4C8 18 BA                                jr 		l2_draw_horz_line			; hijack routine and return statements
  90+ E4CA 7B           .singlepixel:           ld		a,e
  91+ E4CB                                      l2_plot_macro; jp		l2_plot_pixel				; hijack return
  91+ E4CB 78          >                        ld      a,b
  91+ E4CC             >                        JumpIfAGTENusng 192 ,.NoPlot
  91+ E4CC FE C0       >                        cp     192
  91+ E4CE D2 DA E4    >                        jp		nc,.NoPlot
  91+ E4D1 69          >                        ld      l,c
  91+ E4D2 CD 68 E0    >                        call    asm_l2_row_bank_select
  91+ E4D5 67          >                        ld      h,a
  91+ E4D6 3A B5 E2    >                        ld      a,(line_gfx_colour)
  91+ E4D9 77          >                        ld      (hl),a
  91+ E4DA             >.NoPlot:
  92+ E4DA C9                                   ret
  93+ E4DB
# file closed: ./Layer2Graphics/asm_l2_plot_horizontal.asm
1322  E4DB                  INCLUDE "./Layer2Graphics/asm_l2_plot_vertical.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_vertical.asm
   1+ E4DB              ; ">l2_draw_vert_segment"
   2+ E4DB              ; ">hl = bank adjusted pixel poke address d = length, e = color"
   3+ E4DB              ; ">will always clip once h = 64 even if length > 64 destroys a and hl, d = resudual length not plotted"
   4+ E4DB 7A           l2_draw_vert_segment:   ld		a,d
   5+ E4DC FE 00        .emptylinecheck:	    cp 		0
   6+ E4DE C8                                   ret		z
   7+ E4DF FE 01        .justonepixel	        cp		1
   8+ E4E1 20 02                                jr		nz, .multiplepixelsLoop
   9+ E4E3 73                                   ld		(hl),e
  10+ E4E4 C9                                   ret
  11+ E4E5              .multiplepixelsLoop:
  12+ E4E5 7C           .endofbankcheck:        ld   	a,h
  13+ E4E6 FE 40                                cp   	64
  14+ E4E8 D0                                   ret		nc							; check before we poke data if we have hit a boundary
  15+ E4E9 73           .canplotapixel:         ld   	(hl),e						; set colour
  16+ E4EA 24                                   inc 	h							; we don't check here else we would need a dec d on ret could do for optimisation of loop though
  17+ E4EB 15                                   dec		d
  18+ E4EC C8                                   ret		z
  19+ E4ED 18 F6                                jr		.multiplepixelsLoop
  20+ E4EF
  21+ E4EF              ; ">l2_draw_vert_line"
  22+ E4EF              ; ">bc = row col d = length, e = color"
  23+ E4EF 78           l2_draw_vert_line:      ld 		a,b
  24+ E4F0 FE C0        .offscreencheck:        cp 		SCREEN_HEIGHT
  25+ E4F2 D0                                   ret 	nc							; can't start off the screen
  26+ E4F3 7A           .emptylinecheck:        ld		a,d
  27+ E4F4 FE 00                                cp		0
  28+ E4F6 C8                                   ret		z
  29+ E4F7 FE 01                                cp		1
  30+ E4F9 20 10                                jr		nz,.multiplepixels
  31+ E4FB              .itsonepixel:           l2_plot_macro; call	l2_plot_pixel
  31+ E4FB 78          >                        ld      a,b
  31+ E4FC             >                        JumpIfAGTENusng 192 ,.NoPlot
  31+ E4FC FE C0       >                        cp     192
  31+ E4FE D2 0A E5    >                        jp		nc,.NoPlot
  31+ E501 69          >                        ld      l,c
  31+ E502 CD 68 E0    >                        call    asm_l2_row_bank_select
  31+ E505 67          >                        ld      h,a
  31+ E506 3A B5 E2    >                        ld      a,(line_gfx_colour)
  31+ E509 77          >                        ld      (hl),a
  31+ E50A             >.NoPlot:
  32+ E50A C9                                   ret
  33+ E50B              .multiplepixels:						; so now we have at least 2 pixels to plot
  34+ E50B 7A           .clipto192:             ld		a,d							; get length
  35+ E50C 80                                   add		a,b							; a= row + length
  36+ E50D 38 04                                jr		c,.needtoclip				; if it was > 255 then there is a definite need
  37+ E50F FE C0                                cp		SCREEN_HEIGHT
  38+ E511 38 08                                jr		c, .noclipneeded
  39+ E513 78           .needtoclip             ld		a,b
  40+ E514 82                                   add		a,d
  41+ E515 D6 C0                                sub		SCREEN_HEIGHT
  42+ E517 67                                   ld		h,a							; use h as a temp holding for (row + length) - 192
  43+ E518 7A                                   ld		a,d
  44+ E519 94                                   sub		h
  45+ E51A 57                                   ld		d,a							; d = length - ((row + length) - 192)
  46+ E51B              ; so now BC = row col, d = length clipped, e = color
  47+ E51B 78           .noclipneeded:          ld		a,b
  48+ E51C C5 D5                                push	bc,,de
  49+ E51E CD 68 E0                             call 	asm_l2_row_bank_select
  49+ E521               	 	; we now have poke address and a variable holding current bank number
  50+ E521 D1 C1                                pop		bc,,de
  51+ E523 67                                   ld		h,a							; b now tolds target pixel for first plot
  52+ E524 69                                   ld		l,c  						; and c holds pixel column for plotting
  53+ E525 CD DB E4                             call 	l2_draw_vert_segment		; draw seg, d = pixels remaining
  54+ E528 7A                                   ld		a,d							; a and d = nbr pixels remaining
  55+ E529 FE 00                                cp		0
  56+ E52B 28 27                                jr		z, .doneplotting
  57+ E52D 3A 00 E0     .anotherbank:           ld		a, (varL2_BANK_SELECTED)
  58+ E530 3C                                   inc		a
  59+ E531 06 00                                ld		b,0
  60+ E533 C5 D5                                push	bc,,de
  61+ E535 CD 51 E0                             call 	asm_l2_bank_n_select
  62+ E538 D1 C1                                pop     bc,,de
  63+ E53A 60                                   ld		h,b							; b now tolds target pixel for first plot
  64+ E53B 69                                   ld		l,c  						; and c holds pixel column for plotting
  65+ E53C CD DB E4                             call	l2_draw_vert_segment
  66+ E53F 7A                                   ld		a,d
  67+ E540 FE 00                                cp		0
  68+ E542 28 10                                jr		z,.doneplotting
  69+ E544 3A 00 E0     .yetanotherbank:        ld		a, (varL2_BANK_SELECTED)
  70+ E547 3C                                   inc		a
  71+ E548 06 00                                ld		b,0
  72+ E54A C5 D5                                push	bc,,de
  73+ E54C CD 51 E0                             call 	asm_l2_bank_n_select
  74+ E54F D1                                   pop		de
  75+ E550 E1                                   pop		hl							; hl = bc
  76+ E551 CD DB E4                             call	l2_draw_vert_segment		; we have now hit 192 pixels so done
  77+ E554 C9           .doneplotting:	        ret
  78+ E555
  79+ E555              ; ">l2_draw_vert_line_to"
  80+ E555              ; ">bc = row col d = to position, e = color"
  81+ E555 78           l2_draw_vert_line_to:   ld		a,b
  82+ E556 BA                                   cp		d
  83+ E557 38 02                                jr		c, .noyswap
  84+ E559 42           .yswap:                 ld		b,d			; Swap round row numbers so we are always incrementing
  85+ E55A 57                                   ld		d,a			; now we have a top to bottom to we we can calc length from bc
  86+ E55B 7A           .noyswap:               ld		a,d 		; we still may have d in a but only if it was bottom to top
  87+ E55C 90                                   sub		b
  88+ E55D 3C                                   inc		a			; so now its length not offset
  89+ E55E 57                                   ld		d,a
  90+ E55F 18 8E                                jr		l2_draw_vert_line	; we can hijack its clipping, 0 check and return logic
  91+ E561                                      ; no return needed
  92+ E561
# file closed: ./Layer2Graphics/asm_l2_plot_vertical.asm
1323  E561                  INCLUDE "./Layer2Graphics/layer2_plot_diagonal.asm"
# file opened: ./Layer2Graphics/layer2_plot_diagonal.asm
   1+ E561
   2+ E561              l2_draw_box_to:
   3+ E561              ; ">l2_draw_box_to bc=rowcol, de=torowcol a=color"
   4+ E561              ; ">NOT IMPLEMENTED YET"
   5+ E561 C9           	ret
   6+ E562
   7+ E562              ;; Note l2stepx is done via self modifying code rather than an if for speed
   8+ E562              ;; l2stepx1 and l2stepx2 are the addresses to stick the inc or dec in
   9+ E562              l2incbcstep EQU $03
  10+ E562              l2incbstep	EQU	$04
  11+ E562              l2decbstep	EQU $05
  12+ E562              l2decbcstep EQU $0B
  13+ E562              l2deccstep	EQU $0D
  14+ E562              l2inccstep	EQU	$0C
  15+ E562              l2incdestep EQU $13
  16+ E562              l2decdestep EQU $1B
  17+ E562              l2inchlstep EQU $23
  18+ E562              l2dechlstep EQU $2B
  19+ E562              		; l2 deltas are signed
  20+ E562 00 00        l2deltaY	DW	0
  21+ E564 00 00        l2deltaX	DW	0
  22+ E566 00           l2deltaYsq	db	0
  23+ E567 00           l2deltaXsq	db	0
  24+ E568 00           l2deltaYn	db	0
  25+ E569 00           l2deltaXn	db	0
  26+ E56A 00           l2deltaYsqn	db	0
  27+ E56B 00           l2deltaXsqn	db	0
  28+ E56C 00           l2linecolor	db	0
  29+ E56D 00 00        l2fraction	dw	0
  30+ E56F 00 00        l2e2		dw	0
  31+ E571 00           l2way		db	0
  32+ E572 00 00        l2targetPtr	dw	0
  33+ E574              ;; These arrays should be 192 but if we use 256 then getting array2 value is just inc h rather than indexing again.
  34+ E574 00 00 00...  l2targetArray1 ds	256
  35+ E674 00 00 00...  l2targetArray2 ds	256
  36+ E774              ;; Using Bresenham Algorithm draw a diagonal line top to bottom. First we must sort of course
  37+ E774              ;;plotLine(int x0, int y0, int x1, int y1)
  38+ E774              ;;    dx =  abs(x1-x0);
  39+ E774              ;;    sx = x0<x1 ? 1 : -1;
  40+ E774              ;;    dy = -abs(y1-y0);
  41+ E774              ;;    sy = y0<y1 ? 1 : -1;
  42+ E774              ;;    err = dx+dy;  /* error value e_xy */
  43+ E774              ;;    while (true)   /* loop */
  44+ E774              ;;        plot(x0, y0);
  45+ E774              ;;        if (x0==x1 && y0==y1) break;
  46+ E774              ;;        e2 = 2*err;
  47+ E774              ;;        if (e2 >= dy) /* e_xy+e_x > 0 */
  48+ E774              ;;            err += dy;
  49+ E774              ;;            x0 += sx;
  50+ E774              ;;        end if
  51+ E774              ;;        if (e2 <= dx) /* e_xy+e_y < 0 */
  52+ E774              ;;            err += dx;
  53+ E774              ;;            y0 += sy;
  54+ E774              ;;        end if
  55+ E774              ;;    end while
  56+ E774              ; ">l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
  57+ E774              ; ">hl will be either l2targetArray1 or 2"
  58+ E774              ; For S15 version we can still use the current table as this will hold final fill data
  59+ E774              ; but we have to come in with X1Y1 X2Y2 being 16 bit
  60+ E774              ; if the Y1Y2 are both off same side of screen or X1X2 both off same side them line array is set as empty
  61+ E774              ; so
  62+ E774              ;       for each line from Y1 to Y2
  63+ E774              ;           if calculate as normal
  64+ E774              ;                if off screen we don't write
  65+ E774              ;                if on screen we clip to 0,255  which is easy as a horizontal line
  66+ E774              ;           we will need a special case were a line is not rendered    we have x1=255 and X1 = 0, i.e. they are flipped
  67+ E774              ;              we could also cheat and say view port as 1 pixel edge border so we can count x1 = 0 as no line
  68+ E774
  69+ E774              ; This must be called with  Y1 < Y2 as we won;t do a pre check
  70+ E774              ; Caulates the temp x. IY [01] = X1 [23]=Y1 [45]=X2 [67]=Y2 [89]=midY3
  71+ E774              ; Draw a line from BC to DE, with target Y position in a, all values must be 2's C at this points
  72+ E774              ; calculate deltaX, deltaY for line.
  73+ E774              ; calculate offsetY = TargetY - Y1
  74+ E774              ; calculate XTarget = X1 + (deltaX/deltaY) *  offsetY
  75+ E774              ;;;l2DiagDeltaX    DW 0
  76+ E774              ;;;l2_diagonal_getx:       ld		hl,0                            ;
  77+ E774              ;;;                        ld      ixh,0                           ; flag byte clear
  78+ E774              ;;;                        ld      (target_y),a                    ; save target
  79+ E774              ;;;.calculateDeltaX:       ld      hl,(IY+4)
  80+ E774              ;;;                        ld      de,(IY+0)
  81+ E774              ;;;                        ClearCarryFlag
  82+ E774              ;;;                        sbc     hl,de
  83+ E774              ;;;                        ld      (l2DiagDeltaX),hl
  84+ E774              ;;;.calculateDeltaY:       ld      hl,(IY+6)
  85+ E774              ;;;                        ld      de,(IY+2)
  86+ E774              ;;;                        ClearCarryFlag
  87+ E774              ;;;                        sbc     hl,de
  88+ E774              ;;;                        ld      (l2DiagDeltaY),hl
  89+ E774              ;;;.ABSDx:                 ld      hl,(l2DiagDeltaX)
  90+ E774              ;;;                        ld      a,h
  91+ E774              ;;;                        and     $80
  92+ E774              ;;;                        jr      nz,.DxPositive
  93+ E774              ;;;.DxNegative:            macronegate16hl
  94+ E774              ;;;.DxPositive:            ex      de,hl                               ; de = deltaX
  95+ E774              ;;;                        ld      hl,(l2DiagDeltaY)
  96+ E774              ;;;                        ld      a,h
  97+ E774              ;;;                        and     $80
  98+ E774              ;;;                        jr      nz,.DyPositive
  99+ E774              ;;;.DyNegative:            macronegate16hl
 100+ E774              ;;;.DyPositive:
 101+ E774              ;;;.ScaleLoop:             ld      a,h                                 ; At this point DX and DY are ABS values
 102+ E774              ;;;                        or      d                                   ; .
 103+ E774              ;;;                        jr      z,.ScaleDone                        ; .
 104+ E774              ;;;                        ShiftDERight1                               ; .
 105+ E774              ;;;                        ShiftHLRight1                               ; .
 106+ E774              ;;;                        jr      .ScaleLoop                          ; scaled down Dx and Dy to 8 bit, Dy may have been;;                                                                                               negative
 107+ E774              ;;;.ScaleDone:             ; hl = ABS DY, DE = ABS DX,  bc = Y1, ix = Y2,   note H and D will be zero
 108+ E774              ;;;.CalculateDelta:        ld      a,e                                 ; if DX < DY goto DX/DY
 109+ E774              ;;;                        JumpIfALTNusng l,.DXdivDY                   ; else do DY/DX
 110+ E774              ;;;.DYdivDX:               ld      a,l                                 ;    A = DY
 111+ E774              ;;;                        ld      d,e                                 ;    D = DX
 112+ E774              ;;;                        call    AEquAmul256DivD                     ;    A = R = 256 * DY / DX
 113+ E774              ;;;.SaveGradientDYDX:      ld      (Gradient),a
 114+ E774              ;;;                        ld      a,ixh
 115+ E774              ;;;                        or      16
 116+ E774              ;;;                        ld      ixh,a                               ;
 117+ E774              ;;;                        jp      .ClipP1                             ;
 118+ E774              ;;;.DXdivDY:               ld      a,e                                 ;    A = DX
 119+ E774              ;;;                        ld      d,l                                 ;    D = DY
 120+ E774              ;;;                        call    AEquAmul256DivD                     ;    A = R = 256 * DX / DY
 121+ E774              ;;;.SaveGradientDXDY:      ld      (Gradient),a
 122+ E774              ;;;
 123+ E774              ;;;have X1 -> X
 124+ E774              ;;;need deltaMidY = MidY - Y0
 125+ E774              ;;;                        X0 + (DeltaMY * Gradient) but if the graident is flipped then its X0+(deltaMY / Gradient)
 126+ E774              ;;;
 127+ E774              ;;;
 128+ E774              ;;;.calculateDeltaY:
 129+ E774              ;;;.calcualteDxDyOrDyDx
 130+ E774              ;;;.calculate
 131+ E774              ;;;
 132+ E774              ; Total unoptimised version
 133+ E774              ; use hl, de, bc, af,
 134+ E774              ; no used yet ix iy
 135+ E774              ; can we do an ex for hl' and de' holding x and hl, de holding y?
 136+ E774                                  INCLUDE "./Layer2Graphics/int_bren_save.asm"
# file opened: ././Layer2Graphics/int_bren_save.asm
   1++E774              OPCODE_IncHL            EQU $23
   2++E774              OPCODE_DecHL            EQU $2B
   3++E774              OPCODE_IncHLIndirect    EQU $34
   4++E774              OPCODE_DecHLIndirect    EQU $35
   5++E774              OPCODE_IncDE            EQU $13
   6++E774              OPCODE_DecDE            EQU $1B
   7++E774              OPCODE_JpNCnn           EQU $D2
   8++E774              OPCODE_JpCnn            EQU $DA
   9++E774              LOWEST_SAVE             EQU 0
  10++E774              HIGHEST_SAVE            EQU 1
  11++E774
  12++E774              SetIncrement:           MACRO   Location
  13++E774 ~                                    ld      a,OPCODE_IncDE
  14++E774 ~                                    ld      (Location),a
  15++E774                                      ENDM
  16++E774              SetDecrement:           MACRO   Location
  17++E774 ~                                    ld      a,OPCODE_DecDE
  18++E774 ~                                    ld      (Location),a
  19++E774                                      ENDM
  20++E774
  21++E774              ; So next optimisation
  22++E774              ; we know that we start from row y0 to row Y0
  23++E774              ; so we can just reference that row range and zero it out rather than the whole
  24++E774              ; data set
  25++E774 00           l2_fillValue            DB 0
  26++E775
  27++E775 83 C3 C7 CB  l2_fill_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
  27++E779 7D
  28++E77A 74 E7        l2_fill_colr            DW l2_fillValue
  29++E77C FF           l2_fill_lenlo           DB 255
  30++E77D 00           l2_fill_lenhi           DB 0
  31++E77E 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  32++E781 00 00        l2_fill_target          DB $00, $00
  33++E783 CF 87                                DB DMA_LOAD, DMA_ENABLE
  34++E785              l2_bren_cmd_len	        EQU $ - l2_fill_line
  35++E785
  36++E785 32 74 E7     l2_fill_dma:            ld		(l2_fillValue),a                                 ; T=13     ;
  37++E788 22 81 E7                             ld      (l2_fill_target),hl
  38++E78B 21 75 E7     .write_dma:             ld 		hl, l2_fill_line                                  ;          ;
  39++E78E 06 10                                ld 		b, l2_bren_cmd_len                                ;
  40++E790 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT                            ;
  41++E792 ED B3                                otir                                                      ;
  42++E794 C9                                   ret
  43++E795
  44++E795              ; to find a point Y1 along a line X0Y0 to X2Y2
  45++E795              ; DX = X2-X0, DY = Y2-Y0, D = DX/DY, X1 = X0+ ((Y1-Y0)*DX)
  46++E795              ; will need 16.8 24 bit maths for DX DY unless we scale down and do a muliplier up
  47++E795              ; so we could do DX = X2-X0, scale to 8.8  ... Note this will fail for extrmem near vertical or horizontal angles
  48++E795              ;                DY = Y2-Y0, scale to 8.8  ... could we use an octlet lookup table?
  49++E795              ;                D  = DX/DY which would give us an 8.2 proportion
  50++E795              ; a look up table would not work for calc of DX DY but we could use a log table and anti log to simplify to add/subtract
  51++E795              ; need a version of this that counts down to a trigger Y axis + 1, ideallign using DX DY if possible
  52++E795              ; We may be able to use the flat top/flat botttom and pick up a calculated value 0nce it hits Y2?
  53++E795              ; Yes logirithm table will work, need to build as a decimal set optimised
  54++E795              ; logically if the ship is too close it will always be too close to render so we can exclude
  55++E795              ; excessivley large values for X and Y as they will either be too far off side or span the whole screen
  56++E795              ; and just flood fill
  57++E795              ; Thsi means we can do log maths for jsut 0 to 1024
  58++E795              ; 9/11 we assume that large values will either flood fill or be straight lines
  59++E795              ; so we allow a range of -256 to + 512 ,i.e. off screen by a whole additional screen
  60++E795              ; then divide becomes 16 bit div 16 bit to yeild an 8.8 result. This can then be used to work out the new position
  61++E795              ; so                    DE = DX (Ignoring signs for now)
  62++E795              ;                       HL = DY
  63++E795              ; we need L2_DX, L2_DY output is HL
  64++E795              ; After workign out in excel Formulas are:
  65++E795              ; incomming X0, Y0, Y1, DX , DY
  66++E795              ; dY2 = Y1-Y0
  67++E795              ; dXHi = DX/DY*256
  68++E795              ; dxRemainder = DX-dXHi
  69++E795              ; dXRemainder = TRUNC((dxRemainder)/DY)*256
  70++E795              ; Integer component = dY2 * dXHi /256
  71++E795              ; Adj     component = DY2 * dXRemainder /256
  72++E795              ; total = Integer + Adj + X0
  73++E795
  74++E795 00 00        l2_X0                   DW 0
  75++E797 00 00        l2_Y0                   DW 0
  76++E799 00 00        l2_X1                   DW 0
  77++E79B 00 00        l2_Y1                   DW 0
  78++E79D 00 00        ld_YMid                 DW 0
  79++E79F 00 00        l2_DX                   DW 0
  80++E7A1 00 00        l2_DY                   DW 0
  81++E7A3 00 00        l2_Error                DW 0
  82++E7A5 00 00        l2_E2                   DW 0
  83++E7A7 00 00        l2_dY2                  DW 0
  84++E7A9 00 00        ld_dxHi                 DW 0
  85++E7AB 00 00        l2_dxRemainder          DW 0
  86++E7AD 00 00        l2_dxRemainder2         DW 0
  87++E7AF 00 00        l2_dXRemainderAdj       DW 0
  88++E7B1 00 00        l2_integer              DW 0
  89++E7B3 00 00        l2_integer2             DW 0
  90++E7B5
  91++E7B5 2A 9F E7     ScaleDXDY:              ld      hl,(l2_DX)
  92++E7B8 ED 5B A1 E7                          ld      de,(l2_DY)
  93++E7BC 7C           .ScaleLoop:             ld      a,h
  94++E7BD B2                                   or      d
  95++E7BE 28 0B                                jr      z,.ScaleDone
  96++E7C0                                      ShiftHLRight1
  96++E7C0 CB 3C       >			   srl h
  96++E7C2 CB 1D       >			   rr  l
  97++E7C4                                      ShiftDERight1
  97++E7C4 CB 3A       >			   srl d
  97++E7C6 CB 1B       >			   rr  e
  98++E7C8 C3 BC E7                             jp      .ScaleLoop
  99++E7CB 22 9F E7     .ScaleDone:             ld      (l2_DX),hl
 100++E7CE ED 53 A1 E7                          ld      (l2_DY),de
 101++E7D2 C9                                   ret
 102++E7D3
 103++E7D3 2A 99 E7     HLEquMidX:              ld      hl,(l2_X1)
 104++E7D6 ED 5B 95 E7                          ld      de,(l2_X0)
 105++E7DA                                      ClearCarryFlag
 105++E7DA B7          >                        or a
 106++E7DB ED 52                                sbc     hl,de
 107++E7DD 22 9F E7                             ld      (l2_DX),hl
 108++E7E0 2A 9B E7                             ld      hl,(l2_Y1)
 109++E7E3 ED 5B 97 E7                          ld      de,(l2_Y0)
 110++E7E7                                      ClearCarryFlag
 110++E7E7 B7          >                        or a
 111++E7E8 ED 52                                sbc     hl,de
 112++E7EA 22 A1 E7                             ld      (l2_DY),hl
 113++E7ED                                      ;break
 114++E7ED CD B5 E7                             call    ScaleDXDY
 115++E7F0 2A 9D E7                             ld      hl,(ld_YMid)
 116++E7F3                                      ClearCarryFlag
 116++E7F3 B7          >                        or a
 117++E7F4 ED 52                                sbc     hl,de
 118++E7F6 22 A7 E7                             ld      (l2_dY2),hl
 119++E7F9 ED 4B 9F E7                          ld      bc,(l2_DX)          ; dXHi(DE)= DX/DY*256
 120++E7FD ED 5B A1 E7                          ld      de,(l2_DY)          ; .
 121++E801 DD 62 DD 6B                          ld      ix,de               ; .
 122++E805 E5 FD E1                             ld      iy,hl               ; .
 123++E808              ;                       BC = DX/DY as 8.8           ; .
 124++E808 CD 58 95                             call    BC_Div_DE; DEequDEDivBC; DE is the result HL is the remainder
 125++E80B 78                                   ld      a,b                 ; if DE is 8 bit only
 126++E80C A7                                   and     a                   ; .
 127++E80D 28 06                                jr      z,.LT255            ; goto LT255
 128++E80F 01 FF FF                             ld      bc,$FFFF            ; else set BC to $FFFF
 129++E812 C3 4C E8                             jp      .DoneCalc           ; .
 130++E815 ED 43 A9 E7  .LT255:                 ld      (ld_dxHi),bc        ;
 131++E819 22 AB E7                             ld      (l2_dxRemainder),hl ; dxRemainder = DX-dXHi
 132++E81C              .CalcIntegerComponent:  ;break
 133++E81C 2A A7 E7                             ld      hl,(l2_dY2)         ; Integer component = dY2 * dXHi /256
 134++E81F ED 5B A9 E7                          ld      de,(ld_dxHi)        ; .
 135++E823 CD 64 90                             call    DEHLequDEmulHL      ; .
 136++E826 ED 53 B1 E7                          ld      (l2_integer),de     ; .
 137++E82A 22 B3 E7                             ld      (l2_integer2),hl    ; .
 138++E82D ED 4B AB E7  .CalcRemainderFraction: ld      bc,(l2_dxRemainder) ; dXRemainder = TRUNC((dxRemainder)/DY)*256
 139++E831 ED 5B A1 E7                          ld      de,(l2_DY)          ; .
 140++E835 CD 58 95                             call    BC_Div_DE           ; BC, remainder in HL
 141++E838 ED 43 AF E7                          ld      (l2_dXRemainderAdj),bc
 142++E83C 22 AD E7                             ld      (l2_dxRemainder2),hl
 143++E83F 2A A7 E7     .CalcAdjustment:        ld      hl,(l2_dY2)         ; Adj component = DY2 * dXRemainder /256
 144++E842 50 59                                ld      de,bc               ;
 145++E844 CD 64 90                             call    DEHLequDEmulHL      ;
 146++E847 2A B1 E7                             ld      hl,(l2_integer)
 147++E84A 19                                   add     hl,de
 148++E84B C9                                   ret
 149++E84C
 150++E84C
 151++E84C              ;                       HL = (DE * B) /256
 152++E84C C5           .DoneCalc:              push    bc
 153++E84D 58                                   ld      e,b
 154++E84E DD E5 E1                             ld      hl,ix
 155++E851 CD 4F 90                             call AHLequHLmulE
 156++E854 6C                                   ld l,h
 157++E855 67                                   ld h,a
 158++E856 E5 DD E1                             ld      ix,hl
 159++E859              ;                       DE = (DE * C) /256          ld e,c call AHLequHLmulE,ld l,h, ld h,a
 160++E859 C1                                   pop     bc
 161++E85A 59                                   ld      e,c
 162++E85B FD E5 E1                             ld      hl,iy
 163++E85E CD 4F 90                             call AHLequHLmulE
 164++E861 6C                                   ld l,h
 165++E862 67                                   ld h,a
 166++E863              ;                       HL + = DE
 167++E863 DD 54 DD 5D                          ld      de,ix
 168++E867 19                                   add     hl,de
 169++E868              ;                       HL + + X0
 170++E868 ED 5B 95 E7                          ld      de,(l2_X0)
 171++E86C 19                                   add     hl,de
 172++E86D C9                                   ret
 173++E86E
 174++E86E
 175++E86E
 176++E86E
 177++E86E              ;; Need optimisation for vertical line and horizonal
 178++E86E              int_bren_save_Array1Low:
 179++E86E 3E FF                                ld      a,$FF
 180++E870 21 74 E5                             ld      hl,l2targetArray1   ; L2targetArray2 Population
 181++E873 CD 85 E7                             call    l2_fill_dma
 182++E876 3E DA                                ld      a,OPCODE_JpCnn
 183++E878 21 74 E5                             ld      hl,l2targetArray1   ; L2targetArray2 Population
 184++E87B C3 A9 E8                             jp      int_bren_save_Array ;
 185++E87E              int_bren_save_Array1High:
 186++E87E                                      ZeroA
 186++E87E AF          >                        xor a
 187++E87F 21 74 E5                             ld      hl,l2targetArray1   ; L2targetArray2 Population
 188++E882 CD 85 E7                             call    l2_fill_dma
 189++E885 3E D2                                ld      a,OPCODE_JpNCnn
 190++E887 21 74 E5                             ld      hl,l2targetArray1   ; L2targetArray2 Population
 191++E88A C3 A9 E8                             jp      int_bren_save_Array ;
 192++E88D              int_bren_save_Array2Low:
 193++E88D 3E FF                                ld      a,$FF
 194++E88F 21 74 E6                             ld      hl,l2targetArray2   ; L2targetArray2 Population
 195++E892 CD 85 E7                             call    l2_fill_dma
 196++E895 3E DA                                ld      a,OPCODE_JpCnn
 197++E897 21 74 E6                             ld      hl,l2targetArray2   ; L2targetArray2 Population
 198++E89A C3 A9 E8                             jp      int_bren_save_Array ;
 199++E89D              int_bren_save_Array2High:
 200++E89D                                      ZeroA
 200++E89D AF          >                        xor a
 201++E89E 21 74 E6                             ld      hl,l2targetArray2   ; L2targetArray2 Population
 202++E8A1 CD 85 E7                             call    l2_fill_dma
 203++E8A4 21 74 E6                             ld      hl,l2targetArray2   ; L2targetArray2 Population
 204++E8A7 3E D2                                ld      a,OPCODE_JpNCnn
 205++E8A9              ; Uses HL DE
 206++E8A9              ; Note this works out the last position for each point, not any intermediate
 207++E8A9              ; so we need a version that plots lowest for left line & highest for right line
 208++E8A9 22 35 E9     int_bren_save_Array:    ld      (.TargetArrayAddr+2),hl
 209++E8AC 32 46 E9                             ld      (.TargetJump),a
 210++E8AF 2A 99 E7                             ld      hl,(l2_X1)          ; if X0 < X1
 211++E8B2 ED 5B 95 E7                          ld      de,(l2_X0)          ; calculate SX DX
 212++E8B6              ; --- dx = abs(x1 - x0) & set up SX
 213++E8B6                                      ClearCarryFlag              ;
 213++E8B6 B7          >                        or a
 214++E8B7 ED 52                                sbc     hl,de               ;
 215++E8B9 CB 7C                                bit     7,h                 ;
 216++E8BB 28 0E                                jr      z,.DXPositive       ;
 217++E8BD              .DXNegative:            NegHL                       ;
 217++E8BD AF          >                    xor a
 217++E8BE 95          >                    sub l
 217++E8BF 6F          >                    ld l,a
 217++E8C0 9F          >                    sbc a,a
 217++E8C1 94          >                    sub h
 217++E8C2 67          >                    ld h,a
 218++E8C3                                      SetDecrement .UpdateX0Operation
 218++E8C3 3E 1B       >                        ld      a,OPCODE_DecDE
 218++E8C5 32 96 E9    >                        ld      (.UpdateX0Operation),a
 219++E8C8 C3 D0 E8                             jp      .DoneCalcDx         ;
 220++E8CB              .DXPositive:            SetIncrement .UpdateX0Operation
 220++E8CB 3E 13       >                        ld      a,OPCODE_IncDE
 220++E8CD 32 96 E9    >                        ld      (.UpdateX0Operation),a
 221++E8D0 22 9F E7     .DoneCalcDx:            ld      (l2_DX),hl          ;
 222++E8D3 ED 5B 95 E7                          ld      de,(l2_X0)          ; fetch in X0 so we can exx
 223++E8D7 ED 4B 99 E7                          ld      bc,(l2_X1)          ; and also X1
 224++E8DB D9                                   exx                         ; ++now hl' = DX, DE'=X0, BC' = X1
 225++E8DC              ; --- dy = -abs(y1 - y0) & set up SY
 226++E8DC 2A 9B E7     .CalcDY:                ld      hl,(l2_Y1)          ; If Y1 < Y1
 227++E8DF ED 5B 97 E7                          ld      de,(l2_Y0)          ; calculate SY DY
 228++E8E3                                      ClearCarryFlag              ;
 228++E8E3 B7          >                        or a
 229++E8E4 ED 52                                sbc     hl,de               ;
 230++E8E6 CB 7C                                bit     7,h                 ;
 231++E8E8 28 08                                jr      z,.DYPositive       ;
 232++E8EA              .DYNegative:            SetDecrement .UpdateY0Operation
 232++E8EA 3E 1B       >                        ld      a,OPCODE_DecDE
 232++E8EC 32 CD E9    >                        ld      (.UpdateY0Operation),a
 233++E8EF C3 D0 E8                             jp      .DoneCalcDx         ;
 234++E8F2              .DYPositive:            NegHL                       ;
 234++E8F2 AF          >                    xor a
 234++E8F3 95          >                    sub l
 234++E8F4 6F          >                    ld l,a
 234++E8F5 9F          >                    sbc a,a
 234++E8F6 94          >                    sub h
 234++E8F7 67          >                    ld h,a
 235++E8F8                                      SetIncrement .UpdateY0Operation
 235++E8F8 3E 13       >                        ld      a,OPCODE_IncDE
 235++E8FA 32 CD E9    >                        ld      (.UpdateY0Operation),a
 236++E8FD 22 A1 E7     .DoneCalcDy:            ld      (l2_DY),hl
 237++E900 ED 5B 97 E7                          ld      de,(l2_Y0)          ; fetch in X0
 238++E904 ED 4B 9B E7                          ld      bc,(l2_Y1)          ; now hl = DY, DE=Y0, BC = Y1
 239++E908              ; ---   error = dx + dy >> at this point hl' = DX, DE'=X0, BC' = X1 and hl = DY, DE=Y0, BC = Y1
 240++E908 E5 FD E1     .CalcError:             ld      iy,hl               ; fetch DY into IY
 241++E90B D9                                   exx                         ; ++now looking at DX data set and DY in alternate
 242++E90C EB                                   ex      de,hl               ; quickly flip over de and to support add instruction
 243++E90D FD 19                                add     iy,de               ; we have set up IY as L2_Error
 244++E90F EB                                   ex      de,hl
 245++E910 FD 22 A3 E7                          ld      (l2_Error),iy
 246++E914              ; --- While True        >> at this point we are looing at DX and need to consider state at iteration loop
 247++E914 D9           .CalcLoop:              exx                         ; ++now looking at DY data set and DX in alternate
 248++E915                                      ;ld      hl,(l2_X0)         ; get X0 and Y0
 249++E915              ; --- PLOT X0, Y0       >> now looking at DY data set and DX in alternate
 250++E915              .CheckYRange:           ;ld      de,(l2_Y0)
 251++E915 7A                                   ld      a,d                 ; if Y0 > 127
 252++E916 A7                                   and     a                   ; or Y0 is negative
 253++E917 20 35                                jr      nz,.YOutOfRange     ; then we can skip the plot
 254++E919 7B                                   ld      a,e                 ;
 255++E91A E6 80                                and     $80                 ;
 256++E91C 20 30                                jr      nz,.YOutOfRange     ;
 257++E91E D9           .CheckXRange:           exx                         ; ++now looking at DX data set and DY in alternate
 258++E91F 7A                                   ld      a,d                 ; if X0 is negative
 259++E920 A7                                   and     a
 260++E921 28 0E                                jr      z,.XOKToPlot
 261++E923 E6 80                                and     $80
 262++E925 28 05                                jr      z,.NotXNegative
 263++E927 3E 00        .XNegative:             ld      a,0                 ; if X0 <0 > 255 then clamp it
 264++E929 C3 32 E9                             jp      .ClipXDone          ;
 265++E92C 3E FF        .NotXNegative:          ld      a,255               ;
 266++E92E C3 32 E9                             jp      .ClipXDone          ;
 267++E931 7B           .XOKToPlot:             ld      a,e                 ; no clip therefore we can just use X0 as is
 268++E932 D9           .ClipXDone:             exx                         ; ++now looking at DY data set and DX in alternate
 269++E933 DD 21 74 E5  .TargetArrayAddr:       ld      ix,l2targetArray1   ; later this will be self modifying
 270++E937 08                                   ex      af,af'
 271++E938 7B                                   ld      a,e
 272++E939 32 44 E9                             ld      (.TargetRead+2),a   ; Write Y0 offset to IX offset
 273++E93C 32 4C E9                             ld      (.TargetWrite+2),a  ; Write Y0 offset to IX offset
 274++E93F 08                                   ex      af,af'
 275++E940 C5                                   push    bc
 276++E941 47                                   ld      b,a
 277++E942 DD 7E 00     .TargetRead:            ld      a,(IX+0)
 278++E945 B8                                   cp      b
 279++E946 DA 4D E9     .TargetJump:            jp      c,.SkipWrite
 280++E949 78                                   ld      a,b
 281++E94A DD 77 00     .TargetWrite:           ld      (IX+0),a            ; directly updates l2targetArray1
 282++E94D C1           .SkipWrite:             pop     bc
 283++E94E              ; --- if x0 == x1 && y0 == y1 break
 284++E94E              .YOutOfRange: ; At this point we have either plotted or its outside array range
 285++E94E D9                                   exx                         ; ++now looking at DX data set and DY in alternate
 286++E94F              ;                        ld      bc,(l2_X1)
 287++E94F              .CheckEndXY:            cpDEEquBC .CheckEndXYOK     ; de will equal X0 still by here
 287++E94F 7A          >                        ld      a,d
 287++E950 B8          >                        cp      b
 287++E951 C2 59 E9    >                        jp      nz, .CheckEndXYOK
 287++E954 7B          >                        ld      a,e
 287++E955 B9          >                        cp      c
 287++E956             >.NoTheSame:
 288++E956 C2 63 E9                             jp      nz,.x0x1Differ
 289++E959 D9           .CheckEndXYOK:          exx                         ; ++ in this branch in this branchnow looking at DY data set and DX in alternate
 290++E95A              ;                        ld      bc,(l2_Y1)
 291++E95A                                      cpDEEquBC  .x0x1Differ      ; de will equal Y0 still by here
 291++E95A 7A          >                        ld      a,d
 291++E95B B8          >                        cp      b
 291++E95C C2 63 E9    >                        jp      nz, .x0x1Differ
 291++E95F 7B          >                        ld      a,e
 291++E960 B9          >                        cp      c
 291++E961             >.NoTheSame:
 292++E961 D9                                   exx                         ; ++ in this branch now looking at DX data set and DY in alternate
 293++E962 C8                                   ret     z                   ; if they are both the same we are done
 294++E963              .x0x1Differ:                                        ; by this point we could be looking at DX on all branches
 295++E963              ; --- e2 = 2 * error
 296++E963 D9           .SetError2:             exx                         ; ++now looking at DY data set and DX in alternate
 297++E964 E5 D5                                push    hl,,de              ; save HL
 298++E966 EB                                   ex      de,hl               ; de = DY; could futher optimise to check DY>E2 and reduce instruction count
 299++E967 FD E5 E1                             ld      hl,iy;(l2_Error)       ; e2 = 2 * error
 300++E96A 29                                   add     hl,hl               ; .
 301++E96B 22 A5 E7                             ld      (l2_E2),hl          ; .
 302++E96E                                      ; before here we are looking at DY
 303++E96E              ; --- if e2 >= dy
 304++E96E CD 42 98     .CheckE2gteDY:          call    compare16HLDE       ; .
 305++E971 D1 E1                                pop     hl,,de              ; before jumps get HL back
 306++E973 EA 7C E9                             jp      pe, .E2DyParitySet  ; Jump looking at DY
 307++E976 FA 98 E9                             jp      m,  .E2ltDY         ; Jump looking at DY to get here overflow clear, so if m is set then HL<DE
 308++E979 C3 7F E9                             jp      .E2gteDY            ; Jump looking at DY
 309++E97C              .E2DyParitySet:         ; entering here looking at DY
 310++E97C F2 98 E9                             jp      p,  .E2ltDY         ; Jump looking at DY if pe is set, then if sign is clear HL<DE
 311++E97F              ; --- if x0 == x1 break
 312++E97F D9           .E2gteDY:               exx                         ; ++ in this branch now looking at DX data set and DY in alternate
 313++E980                                      cpDEEquBC .ErrorUpdateDY    ;      if x0 == x1 break
 313++E980 7A          >                        ld      a,d
 313++E981 B8          >                        cp      b
 313++E982 C2 88 E9    >                        jp      nz, .ErrorUpdateDY
 313++E985 7B          >                        ld      a,e
 313++E986 B9          >                        cp      c
 313++E987             >.NoTheSame:
 314++E987 C8                                   ret     z                   ;      .
 315++E988              ; --- error = error + dy
 316++E988 D9           .ErrorUpdateDY:         exx                         ; if we get here we are looking at DY data set and DX in alternate
 317++E989 E5 D5                                push    hl,,de              ; save HL
 318++E98B EB                                   ex      de,hl               ; de = DY
 319++E98C FD E5 E1                             ld      hl,iy;(l2_Error)       ;      error = error + dy
 320++E98F 19                                   add     hl,de               ;      .
 321++E990 E5 FD E1                             ld      iy,hl;(l2_Error),hl       ;      .
 322++E993 D1 E1                                pop     hl,,de
 323++E995              ; --- x0 = x0 + sx
 324++E995 D9           .UpdateX0:              exx                         ; now back looking at DX data set and DY in alternate
 325++E996 00           .UpdateX0Operation:     nop                         ;      x0 = x0 +/- sx
 326++E997 D9                                   exx                         ; correction on this brach so we are looking at DY
 327++E998              .E2ltDY:                ; entering here, looking at DY in all branches
 328++E998              ; --- if e2 <= dx
 329++E998 D9           .CheckE2lteDX:          exx                         ; we want to look at DX
 330++E999 E5 D5                                push    hl,,de
 331++E99B EB                                   ex      de,hl               ; de = l2_DX
 332++E99C 2A A5 E7                             ld      hl,(l2_E2)          ; if e2 <= dx
 333++E99F              ;                        ld      de,(l2_DX)          ; as we can't do skip on e2>dx
 334++E99F CD 42 98                             call    compare16HLDE       ; we will jump based on e2 <= dx
 335++E9A2 D1 E1                                pop     hl,,de              ; recover saved HL DE
 336++E9A4 CA B6 E9                             jp      z, .E2lteDX         ; Jump looking at DX
 337++E9A7 EA B0 E9                             jp      pe, .E2DxParitySet  ; Jump looking at DX
 338++E9AA FA B6 E9                             jp      m,  .E2lteDX        ; Jump looking at DX : to get here overflow clear, so if m is set then HL<DE
 339++E9AD C3 CF E9                             jp      .E2gteDx            ; Jump looking at DX
 340++E9B0 F2 B6 E9     .E2DxParitySet:         jp      p,  .E2lteDX        ; Jump looking at DX
 341++E9B3 C3 CF E9                             jp      .E2gteDx            ; Jump looking at DX
 342++E9B6              ; ---  if y0 == y1 break
 343++E9B6              .E2lteDX:               ; Entry looking at DX
 344++E9B6 D9                                   exx                         ;      in branch looking at DY
 345++E9B7                                      cpDEEquBC .ErrorUpdateDX    ;      .
 345++E9B7 7A          >                        ld      a,d
 345++E9B8 B8          >                        cp      b
 345++E9B9 C2 C0 E9    >                        jp      nz, .ErrorUpdateDX
 345++E9BC 7B          >                        ld      a,e
 345++E9BD B9          >                        cp      c
 345++E9BE             >.NoTheSame:
 346++E9BE D9                                   exx                         ;      in branch looking at DX
 347++E9BF C8                                   ret     z                   ;      .
 348++E9C0              ; --- error = error + dx
 349++E9C0              .ErrorUpdateDX:         ; at this point will be looking at DX
 350++E9C0 E5 D5                                push    hl,,de
 351++E9C2 EB                                   ex      de,hl               ;      de = DY
 352++E9C3 FD E5 E1                             ld      hl,iy;(l2_Error)       ;      error = error + dx
 353++E9C6 19                                   add     hl,de               ;      .
 354++E9C7 E5 FD E1                             ld      iy,hl;(l2_Error),hl       ;      .
 355++E9CA D1 E1                                pop     hl,,de
 356++E9CC              ; --- y0 = y0 + sy
 357++E9CC D9           .UpdateY0:              exx                         ;      in this branch we are looking at DY
 358++E9CD 00           .UpdateY0Operation:     nop                         ;      y0 = y0 + sy
 359++E9CE D9                                   exx                         ;      in this branch we are looking at
 360++E9CF              ; --- Loop
 361++E9CF              .E2gteDx:               ; at this point will be looking at DX again
 362++E9CF C3 14 E9                             jp      .CalcLoop           ; repeat until we have a return
 363++E9D2
# file closed: ././Layer2Graphics/int_bren_save.asm
 137+ E9D2              ;;;l2_X0                   DW 0
 138+ E9D2              ;;;l2_Y0                   DW 0
 139+ E9D2              ;;;l2_X1                   DW 0
 140+ E9D2              ;;;l2_Y1                   DW 0
 141+ E9D2              ;;;l2_DX                   DW 0
 142+ E9D2              ;;;l2_DY                   DW 0
 143+ E9D2              ;;;l2_SX                   DW 0
 144+ E9D2              ;;;l2_SY                   DW 0
 145+ E9D2              ;;;l2_Error                DW 0
 146+ E9D2              ;;;l2_E2                   DW 0
 147+ E9D2              ;;;int_bren_save_Array1:   ld      hl,(l2_X1)          ; if X0 < X1
 148+ E9D2              ;;;                        ld      de,(l2_X0)          ; calculate SX DX
 149+ E9D2              ;;;                        ClearCarryFlag              ;
 150+ E9D2              ;;;                        sbc     hl,de               ;
 151+ E9D2              ;;;                        bit     7,h                 ;
 152+ E9D2              ;;;                        jr      z,.DXPositive       ;
 153+ E9D2              ;;;.DXNegative:            NegHL                       ;
 154+ E9D2              ;;;                        ld      bc,-1               ;
 155+ E9D2              ;;;                        jp      .DoneCalcDx         ;
 156+ E9D2              ;;;.DXPositive:            ld      bc,1                ;
 157+ E9D2              ;;;.DoneCalcDx:            ld      (l2_SX),bc          ;
 158+ E9D2              ;;;                        ld      (l2_DX),hl          ;
 159+ E9D2              ;;;.CalcDY:                ld      hl,(l2_Y1)          ; If Y1 < Y1
 160+ E9D2              ;;;                        ld      de,(l2_Y0)          ; calculate SY DY
 161+ E9D2              ;;;                        ClearCarryFlag              ;
 162+ E9D2              ;;;                        sbc     hl,de               ;
 163+ E9D2              ;;;                        bit     7,h                 ;
 164+ E9D2              ;;;                        jr      z,.DYPositive       ;
 165+ E9D2              ;;;.DYNegative:            ld      bc,-1               ;
 166+ E9D2              ;;;                        jp      .DoneCalcDx         ;
 167+ E9D2              ;;;.DYPositive:            NegHL                       ;
 168+ E9D2              ;;;                        ld      bc,1                ;
 169+ E9D2              ;;;.DoneCalcDy:            ld      (l2_SY),bc          ;
 170+ E9D2              ;;;                        ld      (l2_DY),hl
 171+ E9D2              ;;;.CalcError:             ld      hl,(l2_DX)
 172+ E9D2              ;;;                        ld      de,(l2_DY)
 173+ E9D2              ;;;                        add     hl,de
 174+ E9D2              ;;;                        ld      (l2_Error),hl
 175+ E9D2              ;;;.CalcLoop:              break
 176+ E9D2              ;;;                        ld      hl,(l2_X0)          ; get X0 and Y0
 177+ E9D2              ;;;.CheckYRange:           ld      de,(l2_Y0)
 178+ E9D2              ;;;                        ld      a,d                 ; if Y > 127
 179+ E9D2              ;;;                        and     a                   ; or Y is negative
 180+ E9D2              ;;;                        jr      nz,.YOutOfRange     ; then we can skip the plot
 181+ E9D2              ;;;                        ld      a,e                 ;
 182+ E9D2              ;;;                        and     $80                 ;
 183+ E9D2              ;;;                        jr      nz,.YOutOfRange     ;
 184+ E9D2              ;;;.CheckXRange:           ld      a,h                 ; if X0 is negative
 185+ E9D2              ;;;                        and     a
 186+ E9D2              ;;;                        jr      z,.XOKToPlot
 187+ E9D2              ;;;                        and     $80
 188+ E9D2              ;;;                        jr      z,.NotXNegative
 189+ E9D2              ;;;.XNegative:             ld      a,0
 190+ E9D2              ;;;                        jp      .ClipXDone
 191+ E9D2              ;;;.NotXNegative:          ld      a,255
 192+ E9D2              ;;;                        jp      .ClipXDone
 193+ E9D2              ;;;.XOKToPlot:             ld      a,l                 ; no clip therefore we can just use l
 194+ E9D2              ;;;.ClipXDone:             push    hl
 195+ E9D2              ;;;                        push    af                  ; using the Y coordinate
 196+ E9D2              ;;;                        ld      hl,l2targetArray1   ; plot the X value for this row
 197+ E9D2              ;;;                        ld      a,e
 198+ E9D2              ;;;                        add     hl,a
 199+ E9D2              ;;;                        pop     af
 200+ E9D2              ;;;                        ld      (hl),a
 201+ E9D2              ;;;                        pop     hl
 202+ E9D2              ;;;.YOutOfRange: ; At this point we have either plotted or its outside array range
 203+ E9D2              ;;;                        ld      bc,(l2_X1)
 204+ E9D2              ;;;.CheckEndXY:            cpHLEquBC .CheckEndXYOK     ; hl will equal X0 still by here
 205+ E9D2              ;;;                        jp      nz,.x0x1Differ
 206+ E9D2              ;;;.CheckEndXYOK:          ld      bc,(l2_Y1)
 207+ E9D2              ;;;                        cpDEEquBC  .x0x1Differ      ; de will equal Y0 still by here
 208+ E9D2              ;;;                        ret     z                   ; if they are both the same we are done
 209+ E9D2              ;;;.x0x1Differ:
 210+ E9D2              ;;;.SetError2:             ld      hl,(l2_Error)       ; e2 = 2 * error
 211+ E9D2              ;;;                        add     hl,hl               ; .
 212+ E9D2              ;;;                        ld      (l2_E2),hl          ; .
 213+ E9D2              ;;;.CheckE2gteDY:          ld      de,(l2_DY)          ; if e2 >= dy
 214+ E9D2              ;;;                        call    compare16HLDE       ; .
 215+ E9D2              ;;;                        jp      pe, .E2DyParitySet
 216+ E9D2              ;;;                        jp      m,  .E2ltDY         ; to get here overflow clear, so if m is set then HL<DE
 217+ E9D2              ;;;                        jp      .E2gteDY
 218+ E9D2              ;;;.E2DyParitySet:         jp      p,  .E2ltDY         ; if pe is set, then if sign is clear HL<DE
 219+ E9D2              ;;;.E2gteDY:               ld      hl,(l2_X0)          ;      if x0 == x1 break
 220+ E9D2              ;;;                        ld      de,(l2_X1)          ;      .
 221+ E9D2              ;;;                        cpHLEquDE .ErrorUpdateDY    ;      .
 222+ E9D2              ;;;                        ret     z                   ;      .
 223+ E9D2              ;;;.ErrorUpdateDY:         ld      hl,(l2_Error)       ;      error = error + dy
 224+ E9D2              ;;;                        ld      de,(l2_DY)          ;      .
 225+ E9D2              ;;;                        add     hl,de               ;      .
 226+ E9D2              ;;;                        ld      (l2_Error),hl       ;      .
 227+ E9D2              ;;;.UpdateX0:              ld      hl,(l2_X0)          ;      x0 = x0 + sx
 228+ E9D2              ;;;                        ld      bc,(l2_SX)          ;      .
 229+ E9D2              ;;;                        add     hl,bc               ;      .
 230+ E9D2              ;;;                        ld      (l2_X0),hl          ;      .
 231+ E9D2              ;;;.E2ltDY:
 232+ E9D2              ;;;.CheckE2lteDX:          ld      hl,(l2_E2)          ; if e2 <= dx
 233+ E9D2              ;;;                        ld      de,(l2_DX)          ; as we can't do skip on e2>dx
 234+ E9D2              ;;;                        call    compare16HLDE       ; we will jump based on e2 <= dx
 235+ E9D2              ;;;                        jp      z, .E2lteDX
 236+ E9D2              ;;;                        jp      pe, .E2DxParitySet
 237+ E9D2              ;;;                        jp      m,  .E2lteDX         ; to get here overflow clear, so if m is set then HL<DE
 238+ E9D2              ;;;                        jp      .E2gteDx
 239+ E9D2              ;;;.E2DxParitySet:         jp      p,  .E2lteDX
 240+ E9D2              ;;;                        jp      .E2gteDx
 241+ E9D2              ;;;.E2lteDX:               ld      hl,(l2_Y0)          ;      .
 242+ E9D2              ;;;                        ld      de,(l2_Y1)          ;      .
 243+ E9D2              ;;;                        cpHLEquDE .ErrorUdpateDX    ;      .
 244+ E9D2              ;;;                        ret     z                   ;      .
 245+ E9D2              ;;;.ErrorUdpateDX:         ld      hl,(l2_Error)       ;      error = error + dx
 246+ E9D2              ;;;                        ld      de,(l2_DX)          ;      .
 247+ E9D2              ;;;                        add     hl,de               ;      .
 248+ E9D2              ;;;                        ld      (l2_Error),hl       ;      .
 249+ E9D2              ;;;.UpdateY0:              ld      hl,(l2_Y0)          ;      x0 = x0 + sx
 250+ E9D2              ;;;                        ld      bc,(l2_SY)          ;      .
 251+ E9D2              ;;;                        add     hl,bc              ;      .
 252+ E9D2              ;;;                        ld      (l2_Y0),hl         ;      .
 253+ E9D2              ;;;.E2gteDx:               jp      .CalcLoop           ; repeat until we have a return
 254+ E9D2
 255+ E9D2
 256+ E9D2              ;;;;;;;; for this it myst always be sorted Y0 -> Y2
 257+ E9D2              ;;;;;;;;; note we ca't use this to do x? as it will clip inherently
 258+ E9D2              ;;;;;;;l2_save_diagnonal_signed_1:
 259+ E9D2              ;;;;;;;                        ld		hl,0                            ;
 260+ E9D2              ;;;;;;;                        ld		(l2deltaX),hl                   ;
 261+ E9D2              ;;;;;;;                        ld		(l2deltaY),hl
 262+ E9D2              ;;;;;;;.CheckYOnScreen:        ld      de,(l2_commonTopY)
 263+ E9D2              ;;;;;;;                        ld      hl,(l2_bottomY)
 264+ E9D2              ;;;;;;;                        ld      a,d
 265+ E9D2              ;;;;;;;                        and     h
 266+ E9D2              ;;;;;;;                        and     $80
 267+ E9D2              ;;;;;;;                        jr      nz,.OffScreen
 268+ E9D2              ;;;;;;;;...dy = y1 - y0
 269+ E9D2              ;;;;;;;.CalcDeltaY:            ClearCarryFlag
 270+ E9D2              ;;;;;;;                        sbc     hl,de                           ; now delta is signed, if its negative then something bad as gone wrong
 271+ E9D2              ;;;;;;;                        ld      a,h
 272+ E9D2              ;;;;;;;                        and     $80
 273+ E9D2              ;;;;;;;                        jr      nz,.OffScreen
 274+ E9D2              ;;;;;;;                        ld      (l2deltaY),hl                   ; Delta signed
 275+ E9D2              ;;;;;;;CheckXOnScreen:         ld      de,(l2_leftX)
 276+ E9D2              ;;;;;;;                        ld      hl,(l2_rightX)
 277+ E9D2              ;;;;;;;                        ld      a,d
 278+ E9D2              ;;;;;;;                        and     h
 279+ E9D2              ;;;;;;;                        and     $80
 280+ E9D2              ;;;;;;;                        jr      nz,.OffScreen
 281+ E9D2              ;;;;;;;                        ClearCarryFlag
 282+ E9D2              ;;;;;;;;...dx = x1 - x0
 283+ E9D2              ;;;;;;;.CalcDeltaX:            sbc     hl,de                           ; now delta is signed, could be negative
 284+ E9D2              ;;;;;;;                        ld      (l2deltaX),hl                   ; Delta signed
 285+ E9D2              ;;;;;;;                        ld      a,h
 286+ E9D2              ;;;;;;;                        and     $80
 287+ E9D2              ;;;;;;;                        jr      nz,.LeftToRight
 288+ E9D2              ;;;;;;;.RightToLeft:           set up instrnctin
 289+ E9D2              ;;;;;;;.LeftToRight:           set up instrnctin
 290+ E9D2              ;;;;;;;.setErr:									                    ;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 291+ E9D2              ;;;;;;;,FracDYltDX:            ld		hl,(l2deltaY)					; Fraction = dY - dX
 292+ E9D2              ;;;;;;;                        ld		de,(l2deltaX)
 293+ E9D2              ;;;;;;;                        ClearCarryFlag
 294+ E9D2              ;;;;;;;                        sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 295+ E9D2              ;;;;;;;                        ex		de,hl
 296+ E9D2              ;;;;;;;                        ld		iyh,d							; we will use IY reg for fractions
 297+ E9D2              ;;;;;;;                        ld		iyl,e
 298+ E9D2              ;;;;;;;                        jp		p,.fracIsPositive
 299+ E9D2              ;;;;;;;
 300+ E9D2              ;;;;;;;plotLine(x0, y0, x1, y1)
 301+ E9D2              ;;;;;;;    dx = x1 - x0
 302+ E9D2              ;;;;;;;    dy = y1 - y0
 303+ E9D2              ;;;;;;;    D = 2*dy - dx
 304+ E9D2              ;;;;;;;    y = y0
 305+ E9D2              ;;;;;;;
 306+ E9D2              ;;;;;;;    for x from x0 to x1
 307+ E9D2              ;;;;;;;        plot(x,y)
 308+ E9D2              ;;;;;;;        if D > 0
 309+ E9D2              ;;;;;;;            y = y + 1
 310+ E9D2              ;;;;;;;            D = D - 2*dx
 311+ E9D2              ;;;;;;;        end if
 312+ E9D2              ;;;;;;;        D = D + 2*dy
 313+ E9D2              ;;;;;;;
 314+ E9D2
 315+ E9D2
 316+ E9D2
 317+ E9D2              ;;;;;.fracIsNegative:        NegIY
 318+ E9D2              ;;;;;                        ShiftIYRight1
 319+ E9D2              ;;;;;                        NegIY
 320+ E9D2              ;;;;;                        jp		.SkipCalcInc					; so we have a negative frac
 321+ E9D2              ;;;;;.fracIsPositive:        ShiftIYRight1
 322+ E9D2              ;;;;;.SkipCalcInc:		                        			    	; As we loop, bc = to plot current XY
 323+ E9D2              ;;;;;.preTargetArray:	    ld		hl,l2targetArray1               ; Assuming row 0
 324+ E9D2              ;;;;;l2S_setTarget:	        ld		(l2targetPtr),hl
 325+ E9D2              ;;;;;                                                                ; set DE to current row
 326+ E9D2              ;;;;;.S_Loop:			    ld		hl,(l2targetPtr)				; Insert into respective array
 327+ E9D2              ;;;;;                                                                ; calculate current row
 328+ E9D2              ;;;;;                                                                ; if current row >= 0
 329+ E9D2              ;;;;;                                                                ; write current X value in DE to (hl)
 330+ E9D2              ;;;;;                        ld		a,b
 331+ E9D2              ;;;;;                        add		hl,a
 332+ E9D2              ;;;;;                        ld		(hl),c
 333+ E9D2              ;;;;;l2S_CheckIfEnd:	        ld		a,ixh
 334+ E9D2              ;;;;;                        JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 335+ E9D2              ;;;;;                        jp		l2S_Continue
 336+ E9D2              ;;;;;l2S_CheckXPos:          ld      a,(l2S_adjustCol)
 337+ E9D2              ;;;;;                        cp      l2inccstep; if we self modified to inc the we can do a cp e else its cp c
 338+ E9D2              ;;;;;                        jr      z,.IncCP
 339+ E9D2              ;;;;;.DecCP:                 ld      a,c
 340+ E9D2              ;;;;;                        ReturnIfALTNusng ixl
 341+ E9D2              ;;;;;                        ReturnIfAEqNusng ixl
 342+ E9D2              ;;;;;                        jp      l2S_Continue
 343+ E9D2              ;;;;;.IncCP:                 ld		a,c
 344+ E9D2              ;;;;;                        ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 345+ E9D2              ;;;;;l2S_Continue:
 346+ E9D2              ;;;;;l2S_HNegative:			ld		a,iyh
 347+ E9D2              ;;;;;                        bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 348+ E9D2              ;;;;;                        jr		z,l2S_ErrNotNegative			;
 349+ E9D2              ;;;;;l2S_ErrNegative:		ld		a,(l2deltaY)					; if its a negative error update X
 350+ E9D2              ;;;;;                        ld		d,0
 351+ E9D2              ;;;;;                        ld		e,a
 352+ E9D2              ;;;;;                        add		iy,de							; add deltaY(unsinged) to l2fraction
 353+ E9D2              ;;;;;l2S_adjustCol:          nop										; this is our inc/dec of X
 354+ E9D2              ;;;;;                        jr		l2S_Loop							; repeat loop
 355+ E9D2              ;;;;;l2S_ErrNotNegative:     ld		a,iyh
 356+ E9D2              ;;;;;                        or		iyl
 357+ E9D2              ;;;;;                        JumpIfAIsZero l2S_ErrZero					; if there is no error then goto zeroerror
 358+ E9D2              ;;;;;l2S_ErrPositive:        ld      de,iy;  lddeiy								; if its a positive error then we update Y
 359+ E9D2              ;;;;;                        ex		de,hl
 360+ E9D2              ;;;;;                        ld		d,0
 361+ E9D2              ;;;;;                        ld		a,(l2deltaX)
 362+ E9D2              ;;;;;                        ld		e,a
 363+ E9D2              ;;;;;                        ClearCarryFlag
 364+ E9D2              ;;;;;                        sbc		hl,de
 365+ E9D2              ;;;;;                        ex		de,hl
 366+ E9D2              ;;;;;                        ld      iy,de;ldiyde
 367+ E9D2              ;;;;;l2S_adjustRow:          inc		b								; move Y down by one
 368+ E9D2              ;;;;;                        jr		l2S_Loop
 369+ E9D2              ;;;;;l2S_ErrZero:            ld		hl,(l2deltaX)
 370+ E9D2              ;;;;;                        ex		de,hl
 371+ E9D2              ;;;;;                        ld		hl,(l2deltaY)
 372+ E9D2              ;;;;;                        ClearCarryFlag
 373+ E9D2              ;;;;;                        sbc		hl,de
 374+ E9D2              ;;;;;                        ex		de,hl
 375+ E9D2              ;;;;;                        ld      iy,de; ldiyde
 376+ E9D2              ;;;;;l2S_adjustCol2:         nop										; update X and Y
 377+ E9D2              ;;;;;                        inc		b
 378+ E9D2              ;;;;;                        jr		l2S_Loop
 379+ E9D2              ;;;;;
 380+ E9D2              ;;;;;.OffScreen:             SetCarryFlag
 381+ E9D2              ;;;;;                        ret
 382+ E9D2              ;;;;;
 383+ E9D2              ;;;;;
 384+ E9D2
 385+ E9D2                      IFDEF L2_DIAGONAL_SAVE
 386+ E9D2 ~            l2_draw_diagonal_save:  cp		1
 387+ E9D2 ~                                    jr		z,l2S_ItsArray1
 388+ E9D2 ~                                    ld		hl,l2targetArray2
 389+ E9D2 ~                                    jp		l2S_setTarget
 390+ E9D2 ~            l2S_ItsArray1:	        ld		hl,l2targetArray1
 391+ E9D2 ~            l2S_setTarget:	        ld		(l2targetPtr),hl
 392+ E9D2 ~            ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 393+ E9D2 ~                                    ld		(l2linecolor),a					;save colour for later
 394+ E9D2 ~                                    ld		hl,0                            ;
 395+ E9D2 ~                                    ld		(l2deltaX),hl                   ;
 396+ E9D2 ~                                    ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 397+ E9D2 ~            l2S_preSort:            ld		a,b								;
 398+ E9D2 ~                                    JumpIfALTNusng	d,l2S_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
 399+ E9D2 ~            l2S_SortBasedOnY:	    ldhlbc									;
 400+ E9D2 ~                                    ex		de,hl                           ;
 401+ E9D2 ~                                    ldbchl									; swap over bc and de using hl as an intermediate
 402+ E9D2 ~            l2S_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 403+ E9D2 ~                                    ld		ixl,e							; ixl now holds target X coord post sorting
 404+ E9D2 ~            l2S_setXLen:            ld		a,c                             ;
 405+ E9D2 ~                                    JumpIfALTNusng e,l2S_PosXLen			; if x1 < x2 then we have a positive increment
 406+ E9D2 ~            l2S_NegXLen:            ld		a,c                             ;
 407+ E9D2 ~                                    sub     e                               ;
 408+ E9D2 ~                                    ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 409+ E9D2 ~                                    ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 410+ E9D2 ~                                    jr		l2S_XINCDEC
 411+ E9D2 ~            ; we set comparison
 412+ E9D2 ~            l2S_PosXLen:	        ld		a,e                             ;
 413+ E9D2 ~                                    sub		c                               ;
 414+ E9D2 ~                                    ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 415+ E9D2 ~                                    ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 416+ E9D2 ~            ; also need to fix the comparison, if its +x then compare with
 417+ E9D2 ~            l2S_XINCDEC:	        ld		(l2S_adjustCol),a				;
 418+ E9D2 ~                                    ld		(l2S_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 419+ E9D2 ~            l2S_setYLen:            ld		a,d							 	; presorted on Y so it is now always positive
 420+ E9D2 ~                                    sub		b
 421+ E9D2 ~                                    ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 422+ E9D2 ~            l2S_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 423+ E9D2 ~            ldS_FracDYltDX:         ld		hl,(l2deltaY)					; Fraction = dY - dX
 424+ E9D2 ~                                    ld		de,(l2deltaX)
 425+ E9D2 ~                                    ClearCarryFlag
 426+ E9D2 ~                                    sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 427+ E9D2 ~                                    ex		de,hl
 428+ E9D2 ~                                    ld		iyh,d							; we will use IY reg for fractions
 429+ E9D2 ~                                    ld		iyl,e
 430+ E9D2 ~                                    jp		p,l2S_fracIsPositive
 431+ E9D2 ~            l2S_fracIsNegative:     NegIY
 432+ E9D2 ~                                    ShiftIYRight1
 433+ E9D2 ~                                    NegIY
 434+ E9D2 ~                                    jp		l2S_SkipCalcInc					; so we have a negative frac
 435+ E9D2 ~            l2S_fracIsPositive:     ShiftIYRight1
 436+ E9D2 ~            l2S_SkipCalcInc:		                        				; As we loop, bc = to plot current XY
 437+ E9D2 ~            l2S_Loop:			    ld		hl,(l2targetPtr)				; Insert into respective array
 438+ E9D2 ~                                    ld		a,b
 439+ E9D2 ~                                    add		hl,a
 440+ E9D2 ~                                    ld		(hl),c
 441+ E9D2 ~            l2S_CheckIfEnd:	        ld		a,ixh
 442+ E9D2 ~                                    JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 443+ E9D2 ~                                    jp		l2S_Continue
 444+ E9D2 ~            l2S_CheckXPos:          ld      a,(l2S_adjustCol)
 445+ E9D2 ~                                    cp      l2inccstep; if we self modified to inc the we can do a cp e else its cp c
 446+ E9D2 ~                                    jr      z,.IncCP
 447+ E9D2 ~            .DecCP:                 ld      a,c
 448+ E9D2 ~                                    ReturnIfALTNusng ixl
 449+ E9D2 ~                                    ReturnIfAEqNusng ixl
 450+ E9D2 ~                                    jp      l2S_Continue
 451+ E9D2 ~            .IncCP:                 ld		a,c
 452+ E9D2 ~                                    ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 453+ E9D2 ~            l2S_Continue:
 454+ E9D2 ~            l2S_HNegative:			ld		a,iyh
 455+ E9D2 ~                                    bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 456+ E9D2 ~                                    jr		z,l2S_ErrNotNegative			;
 457+ E9D2 ~            l2S_ErrNegative:		ld		a,(l2deltaY)					; if its a negative error update X
 458+ E9D2 ~                                    ld		d,0
 459+ E9D2 ~                                    ld		e,a
 460+ E9D2 ~                                    add		iy,de							; add deltaY(unsinged) to l2fraction
 461+ E9D2 ~            l2S_adjustCol:          nop										; this is our inc/dec of X
 462+ E9D2 ~                                    jr		l2S_Loop							; repeat loop
 463+ E9D2 ~            l2S_ErrNotNegative:     ld		a,iyh
 464+ E9D2 ~                                    or		iyl
 465+ E9D2 ~                                    JumpIfAIsZero l2S_ErrZero					; if there is no error then goto zeroerror
 466+ E9D2 ~            l2S_ErrPositive:        ld      de,iy;  lddeiy								; if its a positive error then we update Y
 467+ E9D2 ~                                    ex		de,hl
 468+ E9D2 ~                                    ld		d,0
 469+ E9D2 ~                                    ld		a,(l2deltaX)
 470+ E9D2 ~                                    ld		e,a
 471+ E9D2 ~                                    ClearCarryFlag
 472+ E9D2 ~                                    sbc		hl,de
 473+ E9D2 ~                                    ex		de,hl
 474+ E9D2 ~                                    ld      iy,de;ldiyde
 475+ E9D2 ~            l2S_adjustRow:          inc		b								; move Y down by one
 476+ E9D2 ~                                    jr		l2S_Loop
 477+ E9D2 ~            l2S_ErrZero:            ld		hl,(l2deltaX)
 478+ E9D2 ~                                    ex		de,hl
 479+ E9D2 ~                                    ld		hl,(l2deltaY)
 480+ E9D2 ~                                    ClearCarryFlag
 481+ E9D2 ~                                    sbc		hl,de
 482+ E9D2 ~                                    ex		de,hl
 483+ E9D2 ~                                    ld      iy,de; ldiyde
 484+ E9D2 ~            l2S_adjustCol2:         nop										; update X and Y
 485+ E9D2 ~                                    inc		b
 486+ E9D2 ~                                    jr		l2S_Loop
 487+ E9D2                      ENDIF
 488+ E9D2                      DEFINE  L2_DRAW_DIAGONAL 1
 489+ E9D2                      IFDEF L2_DRAW_DIAGONAL
 490+ E9D2              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 491+ E9D2 32 6C E5     l2_draw_diagonal:       ld		(l2linecolor),a					;save colour for later
 492+ E9D5 21 00 00                             ld		hl,0                            ;
 493+ E9D8 22 64 E5                             ld		(l2deltaX),hl                   ;
 494+ E9DB 22 62 E5                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 495+ E9DE 78           l2D_preSort:            ld		a,b								;
 496+ E9DF                                      JumpIfALTNusng	d,l2D_noYSort			; we must have Y1 < Y2 (if equal then verical line picked up earlier
 496+ E9DF BA          >                        cp      d
 496+ E9E0 DA E8 E9    >                        jp		c, l2D_noYSort
 497+ E9E3              l2D_SortBasedOnY:	    ldhlbc									;
 497+ E9E3 60          >                        ld		h,b
 497+ E9E4 69          >                        ld		l,c
 498+ E9E5 EB                                   ex		de,hl                           ;
 499+ E9E6                                      ldbchl									; swap over bc and de using hl as an intermediate
 499+ E9E6 44          >                        ld		b,h
 499+ E9E7 4D          >                        ld		c,l
 500+ E9E8 DD 62        l2D_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 501+ E9EA DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
 502+ E9EC 79           l2D_setXLen:            ld		a,c                             ;
 503+ E9ED                                      JumpIfALTNusng e,l2D_PosXLen			; if x1 < x2 then we have a positive increment
 503+ E9ED BB          >                        cp      e
 503+ E9EE DA FA E9    >                        jp		c, l2D_PosXLen
 504+ E9F1 79           l2D_NegXLen:            ld		a,c                             ;
 505+ E9F2 93                                   sub     e                               ;
 506+ E9F3 32 64 E5                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 507+ E9F6 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 508+ E9F8 18 07                                jr		l2D_XINCDEC
 509+ E9FA 7B           l2D_PosXLen:	        ld		a,e                             ;
 510+ E9FB 91                                   sub		c                               ;
 511+ E9FC 32 64 E5                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 512+ E9FF 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 513+ EA01 32 7C EA     l2D_XINCDEC:	        ld		(l2D_adjustCol),a				;
 514+ EA04 32 AC EA                             ld		(l2D_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 515+ EA07 7A           l2D_setYLen				ld		a,d							 	; presorted on Y so it is now always positive
 516+ EA08 90                                   sub		b
 517+ EA09 32 62 E5                             ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 518+ EA0C              l2D_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 519+ EA0C 2A 62 E5     ldD_FracDYltDX:			ld		hl,(l2deltaY)					; Fraction = dY - dX
 520+ EA0F ED 5B 64 E5                          ld		de,(l2deltaX)
 521+ EA13                                      ClearCarryFlag
 521+ EA13 B7          >                        or a
 522+ EA14 ED 52                                sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 523+ EA16 EB                                   ex		de,hl
 524+ EA17 FD 62                                ld		iyh,d							; we will use IY reg for fractions
 525+ EA19 FD 6B                                ld		iyl,e
 526+ EA1B F2 40 EA                             jp		p,l2D_fracIsPositive
 527+ EA1E              l2D_fracIsNegative:     NegIY
 527+ EA1E AF          >                    xor a
 527+ EA1F FD 95       >                    sub iyl
 527+ EA21 FD 6F       >                    ld iyl,a
 527+ EA23 9F          >                    sbc a,a
 527+ EA24 FD 94       >                    sub iyh
 527+ EA26 FD 67       >                    ld iyh,a
 528+ EA28                                      ShiftIYRight1
 528+ EA28 FD 7C       >			   ld 	a,iyh
 528+ EA2A CB 3F       >			   srl 	a
 528+ EA2C FD 67       >			   ld	iyh,a
 528+ EA2E FD 7D       >			   ld 	a,iyl
 528+ EA30 1F          >			   rra
 528+ EA31 FD 6F       >			   ld	iyl,a
 529+ EA33                                      NegIY
 529+ EA33 AF          >                    xor a
 529+ EA34 FD 95       >                    sub iyl
 529+ EA36 FD 6F       >                    ld iyl,a
 529+ EA38 9F          >                    sbc a,a
 529+ EA39 FD 94       >                    sub iyh
 529+ EA3B FD 67       >                    ld iyh,a
 530+ EA3D C3 4B EA                             jp		l2D_SkipCalcInc					; so we have a negative frac
 531+ EA40              l2D_fracIsPositive:     ShiftIYRight1
 531+ EA40 FD 7C       >			   ld 	a,iyh
 531+ EA42 CB 3F       >			   srl 	a
 531+ EA44 FD 67       >			   ld	iyh,a
 531+ EA46 FD 7D       >			   ld 	a,iyl
 531+ EA48 1F          >			   rra
 531+ EA49 FD 6F       >			   ld	iyl,a
 532+ EA4B              l2D_SkipCalcInc:
 533+ EA4B C5 D5        l2D_Loop:				push	bc,,de                 			; l2DeltaY and l2DeltaX are set
 534+ EA4D 3A 6C E5                             ld		a,(l2linecolor)     			;
 535+ EA50                                      l2_plot_macro;call	l2_plot_pixel       			; Plot Pixel
 535+ EA50 78          >                        ld      a,b
 535+ EA51             >                        JumpIfAGTENusng 192 ,.NoPlot
 535+ EA51 FE C0       >                        cp     192
 535+ EA53 D2 5F EA    >                        jp		nc,.NoPlot
 535+ EA56 69          >                        ld      l,c
 535+ EA57 CD 68 E0    >                        call    asm_l2_row_bank_select
 535+ EA5A 67          >                        ld      h,a
 535+ EA5B 3A B5 E2    >                        ld      a,(line_gfx_colour)
 535+ EA5E 77          >                        ld      (hl),a
 535+ EA5F             >.NoPlot:
 536+ EA5F D1 C1                                pop     bc,,de
 537+ EA61 DD 7C        l2D_CheckIfEnd:	        ld		a,ixh
 538+ EA63                                      JumpIfAGTENusng	  b,l2D_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 538+ EA63 B8          >                        cp     b
 538+ EA64 D2 6A EA    >                        jp		nc,l2D_CheckXPos
 539+ EA67 C3 6E EA                             jp		l2D_Continue
 540+ EA6A 79           l2D_CheckXPos:          ld		a,c
 541+ EA6B                                      ReturnIfAEqNusng ixl					; if X1 has reached or exceeded X2 then we are done
 541+ EA6B DD BD       >                        cp      ixl
 541+ EA6D C8          >                        ret     z
 542+ EA6E              l2D_Continue:
 543+ EA6E FD 7C        l2D_HNegative:			ld		a,iyh
 544+ EA70 CB 7F                                bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 545+ EA72 28 0B                                jr		z,l2D_ErrNotNegative			;
 546+ EA74 3A 62 E5     l2D_ErrNegative:		ld		a,(l2deltaY)
 547+ EA77 16 00                                ld		d,0
 548+ EA79 5F                                   ld		e,a
 549+ EA7A FD 19                                add		iy,de							; add deltaY(unsinged) to l2fraction
 550+ EA7C 00           l2D_adjustCol:          nop										; this is our inc/dec of X
 551+ EA7D 18 CC                                jr		l2D_Loop							; repeat loop
 552+ EA7F FD 7C        l2D_ErrNotNegative:     ld		a,iyh
 553+ EA81 FD B5                                or		iyl
 554+ EA83                                      JumpIfAIsZero l2D_ErrZero					; if there is no error then goto zeroerror
 554+ EA83 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 554+ EA84 CA 9D EA    >                        jp	    z, l2D_ErrZero
 555+ EA87 FD 54 FD 5D  l2D_ErrPositive:		ld      de,iy;lddeiy
 556+ EA8B EB                                   ex		de,hl
 557+ EA8C 16 00                                ld		d,0
 558+ EA8E 3A 64 E5                             ld		a,(l2deltaX)
 559+ EA91 5F                                   ld		e,a
 560+ EA92                                      ClearCarryFlag
 560+ EA92 B7          >                        or a
 561+ EA93 ED 52                                sbc		hl,de
 562+ EA95 EB                                   ex		de,hl
 563+ EA96 FD 62 FD 6B                          ld      iy,de;ldiyde
 564+ EA9A 04           l2D_adjustRow:			inc		b
 565+ EA9B 18 AE                                jr		l2D_Loop
 566+ EA9D 2A 64 E5     l2D_ErrZero:            ld		hl,(l2deltaX)
 567+ EAA0 EB                                   ex		de,hl
 568+ EAA1 2A 62 E5                             ld		hl,(l2deltaY)
 569+ EAA4                                      ClearCarryFlag
 569+ EAA4 B7          >                        or a
 570+ EAA5 ED 52                                sbc		hl,de
 571+ EAA7 EB                                   ex		de,hl
 572+ EAA8 FD 62 FD 6B                          ld      iy,de;ldiyde
 573+ EAAC 00           l2D_adjustCol2:         nop										; update X and Y
 574+ EAAD 04                                   inc		b
 575+ EAAE 18 9B                                jr		l2D_Loop
 576+ EAB0              ;----------------------------------------------------------------------------------------------------------------------------------
 577+ EAB0                      ENDIF
 578+ EAB0
 579+ EAB0
 580+ EAB0
 581+ EAB0              ;Loin:				; BBC version of line draw
 582+ EAB0              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 583+ EAB0              ;	ld		(l2linecolor),a					; save colour as a reg gets used alot, coudl move this into interrupt flag and disable interrups
 584+ EAB0              ;	ld		ixh,0							; ixh = s
 585+ EAB0              ;	ld		iyh,0							; iyh = swap
 586+ EAB0              ;	ld		l,0								; l will hold delta sign flags
 587+ EAB0              ;LoinCalcDeltaX:
 588+ EAB0              ;	ld		a,e
 589+ EAB0              ;	sub		c								; a = deltaX
 590+ EAB0              ;	JumpIfPositive LoinPosDx
 591+ EAB0              ;LoinNegDx:
 592+ EAB0              ;	neg										; carry flag will indicate deltaX was negative
 593+ EAB0              ;	ld		l,$80							; set bit 7 of l for negative
 594+ EAB0              ;LoinPosDx:
 595+ EAB0              ;	ld		ixl,a							; ixl = varP = deltaX
 596+ EAB0              ;LoinCalcDeltaY:
 597+ EAB0              ;	ld		a,d
 598+ EAB0              ;	sub		b								; a= deltaY
 599+ EAB0              ;	JumpIfPositive LoinPosDy
 600+ EAB0              ;LoinNegDy:
 601+ EAB0              ;	neg
 602+ EAB0              ;	set		6,l								; set bit 6 of l for negative deltaY
 603+ EAB0              ;LoinPosDy:
 604+ EAB0              ;	ld		iyl,a							; iyl = varQ = deltaY
 605+ EAB0              ;	JumpIfAGTENusng ixl, LoinSTPy			; if deltaY >= DeltaX then step along Y
 606+ EAB0              ;LoinSTPx:									; step along X
 607+ EAB0              ;	JumpOnBitClear l,7						; if l flags were clear then X2 < X2
 608+ EAB0              ;LoinSTPxSwapCoords:
 609+ EAB0              ;	dec		iyh								; swap flag now becomes FF
 610+ EAB0              ;	ld		a,l								; save l flags
 611+ EAB0              ;	ex		de,hl							; save de to hl
 612+ EAB0              ;	lddebc									; Point2 = point1
 613+ EAB0              ;	ldbchl									; Point1 = point2 that was saved
 614+ EAB0              ;	ld		l,a								; get back l flags
 615+ EAB0              ;LoinSTPxCorrectOrder:
 616+ EAB0              ;	l2_point_pixel_y_safe					; call plot pixel preseving bc hl
 617+ EAB0              ;	ld		a,iyl							; get delta Y back
 618+ EAB0              ;	ld		iy1,$FE							; roll counter
 619+ EAB0              ;LionSTPxRollQ:
 620+ EAB0              ;	sla		a								; highest bit of delta-Y
 621+ EAB0              ;	jp		c,LoinSTPxSteep
 622+ EAB0              ;	cp		ixl								; compare with DeltaX
 623+ EAB0              ;	jp		cs,LoinSTPxShallow
 624+ EAB0              ;LoinSTPxSteep:								;; LI4
 625+ EAB0              ;	sbc		a,ixl							; deltaYwork -= (deltaX+1)
 626+ EAB0              ;	scf										; force carry flag set
 627+ EAB0              ;LoinSTPxShallow:							;; LI5
 628+ EAB0              ;	rl		iyl								; rotate iyl which started as FE
 629+ EAB0              ;	jp		c,LionSTPxRollQ					; so we are doing a 6 bit loop
 630+ EAB0              ;	inc		ihl								; DeltaX += 1
 631+ EAB0              ;LoinSTPxYDirection:							; change this to self modifying code
 632+ EAB0              ;	ld		a,d
 633+ EAB0              ;	JumpIfAGTEn	b,LionDOWN:
 634+ EAB0              ;	ld		a,iyh							; swap flag
 635+ EAB0              ;	JumpIfANotZero	X1Inc  					; if swap flag was not set then no need to update R
 636+ EAB0              ;LoinSTPxX1Dec:
 637+ EAB0              ;	dec		c								; move left 1 pixel as we sawped
 638+ EAB0              ;LoinSTPxXCounter:							;; LIL2
 639+ EAB0              ;	sub		b
 640+ EAB0              ;	if
 641+ EAB0              ;
 642+ EAB0              ;85 82                   STA &82	   \ R	\ mask byte
 643+ EAB0              ;A5 81                   LDA &81	   \ Q	\ delta-Y
 644+ EAB0              ;A2 FE                   LDX #&FE	\ roll counter
 645+ EAB0              ;86 81                   STX &81		\ Q
 646+ EAB0              ;.LIL1	\ roll Q
 647+ EAB0              ;0A                      ASL A		\ highest bit of delta-Y
 648+ EAB0              ;B0 04                   BCS LI4		\ steep
 649+ EAB0              ;C5 1B                   CMP &1B	   \ P	\ delta-X
 650+ EAB0              ;90 03                   BCC LI5		\ shallow
 651+ EAB0              ;.LI4	\ steep
 652+ EAB0              ;E5 1B                   SBC &1B		\ P
 653+ EAB0              ;38                      SEC
 654+ EAB0              ;.LI5	\ shallow
 655+ EAB0              ;26 81                   ROL &81	   \ Q	\ #&FE
 656+ EAB0              ;B0 F2                   BCS LIL1 	\ loop Q, end with some low bits in Q
 657+ EAB0              ;A6 1B                   LDX &1B		\ P
 658+ EAB0              ;E8                      INX 		\ Xreg is width
 659+ EAB0              ;A5 37                   LDA &37		\ Y2
 660+ EAB0              ;E5 35                   SBC &35		\ Y1
 661+ EAB0              ;B0 2C                   BCS DOWN	\ draw line to the right and down
 662+ EAB0              ;A5 90                   LDA &90		\ SWAP
 663+ EAB0              ;D0 07                   BNE LI6		\ else Xreg was correct after all, no need to update R
 664+ EAB0              ;CA                      DEX
 665+ EAB0              ;.LIL2	\ counter X width
 666+ EAB0              ;A5 82                   LDA &82	   \ R	\ mask byte
 667+ EAB0              ;51 07                   EOR (&07),Y	\ (SC),Y
 668+ EAB0              ;91 07                   STA (&07),Y	\ (SC),Y
 669+ EAB0              ;.LI6	\ Xreg correct
 670+ EAB0              ;46 82                   LSR &82	   \ R	\ mask byte
 671+ EAB0              ;90 08                   BCC LI7   	\ else moving to next column to right. Bring carry in back
 672+ EAB0              ;66 82                   ROR &82		\ R
 673+ EAB0              ;A5 07                   LDA &07		\ SC
 674+ EAB0              ;69 08                   ADC #8		\ next column
 675+ EAB0              ;85 07                   STA &07		\ SC
 676+ EAB0              ;.LI7	\ S += Q. this is like an overflow monitor to update Y
 677+ EAB0              ;A5 83                   LDA &83		\ S
 678+ EAB0              ;65 81                   ADC &81	   \ Q	\ some low bits
 679+ EAB0              ;85 83                   STA &83		\ S
 680+ EAB0              ;90 07                   BCC LIC2	\ skip Y adjustment
 681+ EAB0              ;88                      DEY
 682+ EAB0              ;10 04                   BPL LIC2	\ skip Y adjustment
 683+ EAB0              ;C6 08                   DEC &08		\ SC+1
 684+ EAB0              ;A0 07                   LDY #7
 685+ EAB0              ;.LIC2	\ skip Y adjustment
 686+ EAB0              ;CA                      DEX
 687+ EAB0              ;D0 DC                   BNE LIL2	\ loop X width
 688+ EAB0              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 689+ EAB0              ;60                      RTS
 690+ EAB0              ;
 691+ EAB0              ;.DOWN	\ Line is going to the right and down
 692+ EAB0              ;A5 90                   LDA &90		\ SWAP
 693+ EAB0              ;F0 07                   BEQ LI9		\ no swap
 694+ EAB0              ;CA                      DEX
 695+ EAB0              ;.LIL3	\ counter X width
 696+ EAB0              ;A5 82                   LDA &82	    \ R \ mask byte
 697+ EAB0              ;51 07                   EOR (&07),Y	\ (SC),Y
 698+ EAB0              ;91 07                   STA (&07),Y	\ (SC),Y
 699+ EAB0              ;.LI9	\ no swap
 700+ EAB0              ;46 82                   LSR &82		\ R
 701+ EAB0              ;90 08                   BCC LI10	\ still in correct column, hop
 702+ EAB0              ;66 82                   ROR &82		\ R
 703+ EAB0              ;A5 07                   LDA &07		\ SC
 704+ EAB0              ;69 08                   ADC #8		\ next column
 705+ EAB0              ;85 07                   STA &07		\ SC
 706+ EAB0              ;.LI10	\ this is like an overflow monitor to update Y
 707+ EAB0              ;A5 83                   LDA &83		\ S
 708+ EAB0              ;65 81                   ADC &81		\ Q
 709+ EAB0              ;85 83                   STA &83		\ S
 710+ EAB0              ;90 09                   BCC LIC3	\ skip Y adjustment
 711+ EAB0              ;C8                      INY
 712+ EAB0              ;C0 08                   CPY #8
 713+ EAB0              ;D0 04                   BNE LIC3	\ have not reached bottom byte of char, hop
 714+ EAB0              ;E6 08                   INC &08		\ SC+1
 715+ EAB0              ;A0 00                   LDY #0
 716+ EAB0              ;.LIC3	\ skipped Y adjustment
 717+ EAB0              ;CA                      DEX
 718+ EAB0              ;D0 DA                   BNE LIL3	\ loop X width
 719+ EAB0              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 720+ EAB0              ;60                      RTS
 721+ EAB0              ;
 722+ EAB0              ;.STPY	\ -> &1797 \ Step along y for line, goes down and to right
 723+ EAB0              ;A4 35                   LDY &35		\ Y1
 724+ EAB0              ;98                      TYA
 725+ EAB0              ;A6 34                   LDX &34		\ X1
 726+ EAB0              ;C4 37                   CPY &37		\ Y2
 727+ EAB0              ;B0 10                   BCS LI15	\ skip swap if Y1 >= Y2
 728+ EAB0              ;C6 90                   DEC &90		\ SWAP
 729+ EAB0              ;A5 36                   LDA &36		\ X2
 730+ EAB0              ;85 34                   STA &34		\ X1
 731+ EAB0              ;86 36                   STX &36		\ X2
 732+ EAB0              ;AA                      TAX
 733+ EAB0              ;A5 37                   LDA &37		\ Y2
 734+ EAB0              ;85 35                   STA &35		\ Y1
 735+ EAB0              ;84 37                   STY &37		\ Y2
 736+ EAB0              ;A8                      TAY
 737+ EAB0              ;.LI15	\ Y1 Y2 order is now correct
 738+ EAB0              ;4A                      LSR A
 739+ EAB0              ;4A                      LSR A
 740+ EAB0              ;4A                      LSR A
 741+ EAB0              ;09 60                   ORA #&60
 742+ EAB0              ;85 08                   STA &08	 \ SC+1	\ screen hi
 743+ EAB0              ;8A                      TXA 		\ X1
 744+ EAB0              ;29 F8                   AND #&F8
 745+ EAB0              ;85 07                   STA &07	  \ SC	\ screen lo
 746+ EAB0              ;8A                      TXA
 747+ EAB0              ;29 07                   AND #7		\ mask index
 748+ EAB0              ;AA                      TAX
 749+ EAB0              ;BD AF 16                LDA &16AF,X \ TWOS,X \ Mode4 single pixel
 750+ EAB0              ;85 82                   STA &82	    \ R	\ mask
 751+ EAB0              ;A5 35                   LDA &35		\ Y1
 752+ EAB0              ;29 07                   AND #7
 753+ EAB0              ;A8                      TAY
 754+ EAB0              ;A5 1B                   LDA &1B	    \ P	\ delta-X
 755+ EAB0              ;A2 01                   LDX #1		\ roll counter
 756+ EAB0              ;86 1B                   STX &1B	    	\ P
 757+ EAB0              ;.LIL4	\ roll P
 758+ EAB0              ;0A                      ASL A
 759+ EAB0              ;B0 04                   BCS LI13	\ do subtraction
 760+ EAB0              ;C5 81                   CMP &81	    \ Q	\ delta-Y
 761+ EAB0              ;90 03                   BCC LI14	\ less than Q
 762+ EAB0              ;.LI13	\ do subtraction
 763+ EAB0              ;E5 81                   SBC &81		\ Q
 764+ EAB0              ;38                      SEC
 765+ EAB0              ;.LI14	\ less than Q
 766+ EAB0              ;26 1B                   ROL &1B		\ P
 767+ EAB0              ;90 F2                   BCC LIL4	\ loop P, end with some low bits in P
 768+ EAB0              ;A6 81                   LDX &81		\ Q
 769+ EAB0              ;E8                      INX 		\ adjust height
 770+ EAB0              ;A5 36                   LDA &36		\ X2
 771+ EAB0              ;E5 34                   SBC &34		\ X1
 772+ EAB0              ;90 2D                   BCC LFT		\ if C cleared then line moving to the left - hop down
 773+ EAB0              ;18                      CLC
 774+ EAB0              ;A5 90                   LDA &90		\ SWAP
 775+ EAB0              ;F0 07                   BEQ LI17 	\ skip first point
 776+ EAB0              ;CA                      DEX
 777+ EAB0              ;.LIL5	\ skipped first point, counter X
 778+ EAB0              ;A5 82                   LDA &82	    \ R \ mask byte
 779+ EAB0              ;51 07                   EOR (&07),Y	\ (SC),Y
 780+ EAB0              ;91 07                   STA (&07),Y	\ (SC),Y
 781+ EAB0              ;.LI17	\ skipped first point
 782+ EAB0              ;88                      DEY
 783+ EAB0              ;10 04                   BPL LI16	\ skip hi adjust
 784+ EAB0              ;C6 08                   DEC &08		\ SC+1
 785+ EAB0              ;A0 07                   LDY #7		\ new char
 786+ EAB0              ;	.LI16	\ skipped hi adjust
 787+ EAB0              ;A5 83                   LDA &83		\ S
 788+ EAB0              ;65 1B                   ADC &1B		\ P
 789+ EAB0              ;85 83                   STA &83		\ S
 790+ EAB0              ;90 0C                   BCC LIC5	\ skip, still in same column
 791+ EAB0              ;46 82                   LSR &82	  \ R	\ mask
 792+ EAB0              ;90 08                   BCC LIC5  	\ no mask bit hop
 793+ EAB0              ;66 82                   ROR &82   \ R	\ else moved over to next column, reset mask
 794+ EAB0              ;A5 07                   LDA &07	  \ SC  \ screen lo
 795+ EAB0              ;69 08                   ADC #8		\ next char below
 796+ EAB0              ;85 07                   STA &07		\ SC
 797+ EAB0              ;.LIC5	\ same column
 798+ EAB0              ;CA                      DEX
 799+ EAB0              ;D0 DC                   BNE LIL5	\ loop X height
 800+ EAB0              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 801+ EAB0              ;60                      RTS
 802+ EAB0              ;
 803+ EAB0              ;.LFT	\ going left
 804+ EAB0              ;A5 90                   LDA &90		\ SWAP
 805+ EAB0              ;F0 07                   BEQ LI18	\ skip first point
 806+ EAB0              ;CA                      DEX 		\ reduce height
 807+ EAB0              ;.LIL6	\ counter X height
 808+ EAB0              ;A5 82                   LDA &82	   \ R	\ mask byte
 809+ EAB0              ;51 07                   EOR (&07),Y	\ (SC),Y
 810+ EAB0              ;91 07                   STA (&07),Y	\ (SC),Y
 811+ EAB0              ;.LI18
 812+ EAB0              ;88                      DEY
 813+ EAB0              ;10 04                   BPL LI19	\ skip hi adjust
 814+ EAB0              ;C6 08                   DEC &08		\ SC+1
 815+ EAB0              ;A0 07                   LDY #7		\ rest char row
 816+ EAB0              ;.LI19	\ skipped hi adjust
 817+ EAB0              ;A5 83                   LDA &83		\ S
 818+ EAB0              ;65 1B                   ADC &1B	    \ P \ some low bits
 819+ EAB0              ;85 83                   STA &83		\ S
 820+ EAB0              ;90 0D                   BCC LIC6	\ no overflow
 821+ EAB0              ;06 82                   ASL &82	    \ R \ else move byte mask to the left
 822+ EAB0              ;90 09                   BCC LIC6	\ no overflow
 823+ EAB0              ;26 82                   ROL &82		\ R
 824+ EAB0              ;A5 07                   LDA &07		\ SC
 825+ EAB0              ;E9 07                   SBC #7		\ down 1 char
 826+ EAB0              ;85 07                   STA &07		\ SC
 827+ EAB0              ;18                      CLC
 828+ EAB0              ;.LIC6	\ no overflow
 829+ EAB0              ;CA                      DEX 		\ height
 830+ EAB0              ;D0 DB                   BNE LIL6	\ loop X
 831+ EAB0              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 832+ EAB0              ;.HL6
 833+ EAB0              ;60                      RTS 		\ end Line drawing
 834+ EAB0
 835+ EAB0
 836+ EAB0              ;;l2_draw_diagonalopt:
 837+ EAB0                              DISPLAY "TODO: optimisation"
 838+ EAB0              	; ">TODO l2_draw_diagonalopt fast horz vert optmisation"
 839+ EAB0              ;;	push	af
 840+ EAB0              ;;	ld		a,b
 841+ EAB0              ;;	cp		d
 842+ EAB0              ;;	jr		z,.RegularDiagnonal
 843+ EAB0              ;;.CheckHorz:
 844+ EAB0              ;;	ld		a,c
 845+ EAB0              ;;	cp		e
 846+ EAB0              ;;	jr		z,.horizontalLine
 847+ EAB0              ;;.RegularDiagnonal:
 848+ EAB0              ;;	pop		af
 849+ EAB0              ;;	call diag
 850+ EAB0
 851+ EAB0
 852+ EAB0              ;;l2_signed_mul2a:
 853+ EAB0              ;;; ">l2_signed_mul2a - Signed a = a * 2 using shift)"
 854+ EAB0              ;;	TEST	$80
 855+ EAB0              ;;	jr		nz, .negativecalc
 856+ EAB0              ;;.positivecalc:
 857+ EAB0              ;;	ccf
 858+ EAB0              ;;	rla
 859+ EAB0              ;;	ret
 860+ EAB0              ;;.negativecalc:
 861+ EAB0              ;;	neg
 862+ EAB0              ;;	ccf
 863+ EAB0              ;;	rla
 864+ EAB0              ;;	neg
 865+ EAB0              ;;	ret
 866+ EAB0              ;;
 867+ EAB0              ;;l2_signed_mul2atohl:
 868+ EAB0              ;;; ">l2_signed_mul2ahl - Signed hl = a * 2 using shift)"
 869+ EAB0              ;;	TEST	$80
 870+ EAB0              ;;	jr		nz, .negativecalc
 871+ EAB0              ;;.positivecalc:
 872+ EAB0              ;;	ld		hl,0
 873+ EAB0              ;;	ld		l,a
 874+ EAB0              ;;	add		hl,a
 875+ EAB0              ;;	ret
 876+ EAB0              ;;.negativecalc:
 877+ EAB0              ;;	neg
 878+ EAB0              ;;	ld		hl,0
 879+ EAB0              ;;	ld		l,a
 880+ EAB0              ;;	neghl
 881+ EAB0              ;;	ret
 882+ EAB0              ;;
 883+ EAB0              ;;l2_e2fractionby2:
 884+ EAB0              ;;	ld 		hl,(l2fraction)
 885+ EAB0              ;;	push	de
 886+ EAB0              ;;	ld		d,h
 887+ EAB0              ;;	ld		e,l
 888+ EAB0              ;;	add		hl,de
 889+ EAB0              ;;	pop		de
 890+ EAB0              ;;	ld		(l2e2),hl
 891+ EAB0              ;;	ret
 892+ EAB0
 893+ EAB0
 894+ EAB0
 895+ EAB0
 896+ EAB0
 897+ EAB0              ;;//	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 898+ EAB0              ;;//.catchLoop:
 899+ EAB0              ;;//	jp .catchLoop
 900+ EAB0              ;;//.continue:
 901+ EAB0              ;;//    ld      A,D
 902+ EAB0              ;;//    sub     H
 903+ EAB0              ;;//    jr      NC,.DXpositive    ;delta_x > 0
 904+ EAB0              ;;//.DXNegative:
 905+ EAB0              ;;//    neg
 906+ EAB0              ;;//.DXPositive:
 907+ EAB0              ;;//    ld      B,A              ;B <- |delta_x|
 908+ EAB0              ;;//    ld      A,E
 909+ EAB0              ;;//    sub     L
 910+ EAB0              ;;//    jr      NC,.DYpositive    ;delta_y > 0
 911+ EAB0              ;;//.DYNegative:
 912+ EAB0              ;;//    neg
 913+ EAB0              ;;//.DYPositive:
 914+ EAB0              ;;//    sub     B               ;|delta_y|
 915+ EAB0              ;;//	push	af
 916+ EAB0              ;;//	jr		c,.DeltaX
 917+ EAB0              ;;//.DeltaY
 918+ EAB0              ;;//	ld      A,H             			;if |delta_x| < |delta_y| then
 919+ EAB0              ;;//    ld      H,L             			;then values x and y are swapped
 920+ EAB0              ;;//    ld      L,A             			;so the loop will always be performed on the
 921+ EAB0              ;;//    ld      A,D             			;x value. A flag must be set to
 922+ EAB0              ;;//    ld      D,E             			;remind that data must be drawn (y,x)
 923+ EAB0              ;;//    ld      E,A             			;instead of (x,y)
 924+ EAB0              ;;//.DeltaX:
 925+ EAB0              ;;//	ld		a,d
 926+ EAB0              ;;//	sub		h
 927+ EAB0              ;;//	jr		nc,.TestDY					; x1 < x2
 928+ EAB0              ;;//.TestDX:
 929+ EAB0              ;;//	ex		de,hl
 930+ EAB0              ;;//.TestDY:
 931+ EAB0              ;;//	ld		a,e
 932+ EAB0              ;;//	sub		l
 933+ EAB0              ;;//    ld      A,$01
 934+ EAB0              ;;//    jr      NC,.StoreA
 935+ EAB0              ;;//    neg                     ;y1 > y2 : in case2 the 'y' variable
 936+ EAB0              ;;//.StoreA:
 937+ EAB0              ;;//        ld      (l2way),A
 938+ EAB0              ;;//.InitLine:
 939+ EAB0              ;;//        ld      B,H
 940+ EAB0              ;;//        ld      C,L
 941+ EAB0              ;;//        ld      A,E
 942+ EAB0              ;;//        sub     L
 943+ EAB0              ;;//        jr      NC,.EndInit
 944+ EAB0              ;;//        ld      A,L
 945+ EAB0              ;;//        ld      L,E
 946+ EAB0              ;;//        ld      E,A
 947+ EAB0              ;;//.EndInit:
 948+ EAB0              ;;//        ld      A,E
 949+ EAB0              ;;//        sub     L
 950+ EAB0              ;;//        rla
 951+ EAB0              ;;//        ld      L,A             ;value to add in case1 (d < 0)
 952+ EAB0              ;;//        add     A,H
 953+ EAB0              ;;//        sub     D
 954+ EAB0              ;;//        ld      E,A             ;'d' variable is initialised
 955+ EAB0              ;;//        add     A,H
 956+ EAB0              ;;//        sub     D
 957+ EAB0              ;;//        ld      H,A             ;value to add in case2 (d >= 0)
 958+ EAB0              ;;//.Loop:
 959+ EAB0              ;;//        ld      A,B
 960+ EAB0              ;;//        sub     D
 961+ EAB0              ;;//        jr      NC,.EndLine       ;the line is completely drawn.
 962+ EAB0              ;;//        pop     AF
 963+ EAB0              ;;//        bit     7,A
 964+ EAB0              ;;//        push    AF
 965+ EAB0              ;;//        push    AF
 966+ EAB0              ;;//        push    BC
 967+ EAB0              ;;//        jr      Z,.DrawPoint
 968+ EAB0              ;;//        ld      A,B
 969+ EAB0              ;;//        ld      B,C
 970+ EAB0              ;;//        ld      C,A
 971+ EAB0              ;;//.DrawPoint:
 972+ EAB0              ;;//		push	hl
 973+ EAB0              ;;//		pushbcdeaf
 974+ EAB0              ;;//		ld		b,e
 975+ EAB0              ;;//		ld		c,d
 976+ EAB0              ;;//	ld 		a,(l2linecolor)
 977+ EAB0              ;;//	call	l2_plot_pixel
 978+ EAB0              ;;//		popafdebc
 979+ EAB0              ;;//		pop		hl
 980+ EAB0              ;;//        pop     BC
 981+ EAB0              ;;//        pop     AF
 982+ EAB0              ;;//.TestD:
 983+ EAB0              ;;//        bit     7,E
 984+ EAB0              ;;//        jr      NZ,.Case1
 985+ EAB0              ;;//.Case2:                          ;d >= 0
 986+ EAB0              ;;//        ld      A,E
 987+ EAB0              ;;//        add     A,H
 988+ EAB0              ;;//        ld      E,A
 989+ EAB0              ;;//        ld      A,(l2way)
 990+ EAB0              ;;//        add     A,C
 991+ EAB0              ;;//        ld      C,A
 992+ EAB0              ;;//        jr      .EndLoop
 993+ EAB0              ;;//.Case1:                          ;d < 0
 994+ EAB0              ;;//        ld      A,E
 995+ EAB0              ;;//        add     A,L
 996+ EAB0              ;;//        ld      E,A
 997+ EAB0              ;;//.EndLoop:
 998+ EAB0              ;;//        inc     B
 999+ EAB0              ;;//        jr      .Loop
1000+ EAB0              ;;//.EndLine:
1001+ EAB0              ;;//        pop     AF              ;MUST NOT BE REMOVED
1002+ EAB0              ;;//        pop     HL              ;can be removed
1003+ EAB0              ;;//        pop     DE              ;can be removed
1004+ EAB0              ;;//        ret
1005+ EAB0
1006+ EAB0              ;;	ld		(.l2yadjust),a
1007+ EAB0              ;;	call	calcdeltax:
1008+ EAB0              ;;	ld		(.l2xadjust),a
1009+ EAB0              ;;.calcfraction:							; err(or fraction) = dx+dy;
1010+ EAB0              ;;	push	hl
1011+ EAB0              ;;	push	de
1012+ EAB0              ;;	ld		hl,(l2deltaX)
1013+ EAB0              ;;	ld		de,(l2deltaY)
1014+ EAB0              ;;	add		hl,de
1015+ EAB0              ;;	ld		(l2fraction),hl
1016+ EAB0              ;;	pop		de
1017+ EAB0              ;;	pop		hl
1018+ EAB0              ;;.mainloop:
1019+ EAB0              ;;	push	bc
1020+ EAB0              ;;	push	de
1021+ EAB0              ;;	ld 		a,(l2linecolor)
1022+ EAB0              ;;	call	l2_plot_pixel
1023+ EAB0              ;;	pop		de
1024+ EAB0              ;;	pop		bc
1025+ EAB0              ;;.arewefinishedtest
1026+ EAB0              ;;	ld		a,b
1027+ EAB0              ;;	cp		d
1028+ EAB0              ;;	jr		nz,.notthereyet
1029+ EAB0              ;;	ld		a,c
1030+ EAB0              ;;	cp		e
1031+ EAB0              ;;	ret		z
1032+ EAB0              ;;.notthereyet:
1033+ EAB0              ;;	push	de
1034+ EAB0              ;;	call	l2_e2fractionby2			; e2 = 2*err;
1035+ EAB0              ;;	pop		de
1036+ EAB0              ;;.e2dytest:								; if (e2 >= dy) /* e_xy+e_x > 0 */  then S and P/V are the same
1037+ EAB0              ;;	push	de							; so if m & pe  or p & po calc (m = sign set p = 0)
1038+ EAB0              ;;	ld		de,(l2deltaY)				;    if m & po  or p & pe skip  (pe = pv set po = pv 0)
1039+ EAB0              ;;	or		a							;
1040+ EAB0              ;;	sbc		hl,de						;
1041+ EAB0              ;;	pop		de
1042+ EAB0              ;;	jr		z,  .dodycalc				; if equal then calc
1043+ EAB0              ;;	jp		p,	.dodycalc				; sign clear to H>D even with negtives
1044+ EAB0              ;;	jr		.skipdycalc         		; sign = 0     so  skip as pe
1045+ EAB0              ;;.dodycalc:
1046+ EAB0              ;;	ld		hl,(l2fraction)
1047+ EAB0              ;;	push	de
1048+ EAB0              ;;	ld		de,(l2deltaY)
1049+ EAB0              ;;	add		hl,de
1050+ EAB0              ;;	ld		(l2fraction),de
1051+ EAB0              ;;	pop		de
1052+ EAB0              ;;.l2yadjust:
1053+ EAB0              ;;	nop
1054+ EAB0              ;;.skipdycalc:
1055+ EAB0              ;;.e2dxtest:								;  if (e2 <= dx) /* e_xy+e_y < 0 */ then S and P/V are different.
1056+ EAB0              ;;	ld		hl,(l2e2)
1057+ EAB0              ;;	push	de							;
1058+ EAB0              ;;	ld		de,(l2deltaX)				;
1059+ EAB0              ;;	or		a							; clear carry flag
1060+ EAB0              ;;	sbc		hl,de						; hl = hl - de is if de > hl will get pv and signed different?
1061+ EAB0              ;;	pop		de
1062+ EAB0              ;;	jr		z,.dodxcalc					; e2 == dx so do calc
1063+ EAB0              ;;	jp		m,.dodxcalc					; was sign bit set
1064+ EAB0              ;;	jr		.skipdxcalc         	    ; diff so skip ; pvclear = po        pvset = pe
1065+ EAB0              ;;.dodxcalc:
1066+ EAB0              ;;	ld		hl,(l2fraction)
1067+ EAB0              ;;	push	de
1068+ EAB0              ;;	ld		de,(l2deltaX)
1069+ EAB0              ;;	add		hl,de
1070+ EAB0              ;;	ld		(l2fraction),de
1071+ EAB0              ;;	pop		de
1072+ EAB0              ;;.l2xadjust:
1073+ EAB0              ;;	nop
1074+ EAB0              ;;.skipdxcalc:
1075+ EAB0              ;;	jr 		.mainloop
1076+ EAB0
1077+ EAB0
1078+ EAB0              ;;/l2_draw_diagonalold:
1079+ EAB0              ;;/MESSAGE ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
1080+ EAB0              ;;/	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
1081+ EAB0              ;;/.sortycoords:
1082+ EAB0              ;;/	ld		a,b							; Sort to Y0 is always > y1 so we don't have to deal with step y and only step x
1083+ EAB0              ;;/	cp		d
1084+ EAB0              ;;/	jr		nc, .nocoordswap
1085+ EAB0              ;;/.swapcoords:
1086+ EAB0              ;;/	ex		de,hl						; save de to hl ! effective code line 98 after macros
1087+ EAB0              ;;/	lddebc
1088+ EAB0              ;;/	ldbchl
1089+ EAB0              ;;/.nocoordswap:
1090+ EAB0              ;;/	ld		a,d							; l2_dy = -ABS(l2_vy1 - l2_vy0)
1091+ EAB0              ;;/	sub		b							; we have already sorted  so y1 > y0
1092+ EAB0              ;;/	ld		(l2deltaY),a
1093+ EAB0              ;;/	neg									; DEBUG
1094+ EAB0              ;;/	ld		(l2deltaYn),a				; DEBUG
1095+ EAB0              ;;/	neg									; DEBUG
1096+ EAB0              ;;/.deltaxequABSx0Minusx1:						; we need to set l2dx to abs x1-x0 and set
1097+ EAB0              ;;/    ld		a,c
1098+ EAB0              ;;/	cp		e
1099+ EAB0              ;;/	jr		c, .x1GTx0
1100+ EAB0              ;;/.x1LTx0
1101+ EAB0              ;;/	ld		a,c
1102+ EAB0              ;;/	sub		e
1103+ EAB0              ;;/	ld		(l2deltaX),a				; just 8 bit for now should it be 16?
1104+ EAB0              ;;/	neg									; DEBUG
1105+ EAB0              ;;/	ld		(l2deltaXn),a				; DEBUG
1106+ EAB0              ;;/	neg									; DEBUG
1107+ EAB0              ;;/	ld		a,l2incbstep
1108+ EAB0              ;;/	jr		.setlayershift0
1109+ EAB0              ;;/.x1GTx0:
1110+ EAB0              ;;/	ld		a,e
1111+ EAB0              ;;/	sub		c
1112+ EAB0              ;;/	ld		(l2deltaX),a					; just 8 bit for now should it be 16?
1113+ EAB0              ;;/	neg									; DEBUG
1114+ EAB0              ;;/	ld		(l2deltaXn),a				; DEBUG
1115+ EAB0              ;;/	neg									; DEBUG
1116+ EAB0              ;;/	ld		a,l2decbstep
1117+ EAB0              ;;/.setlayershift0:
1118+ EAB0              ;;/	ld		a,0
1119+ EAB0              ;;/	pushbcde
1120+ EAB0              ;;/	call	asm_l2_bank_n_select		; l2_layer_shift = 0 and bank 0 selected
1121+ EAB0              ;;/	popdebc
1122+ EAB0              ;;/; so now we have set inc or dec instruction, l2dy, l2dx and on bank 0,
1123+ EAB0              ;;/.dymuliplyby2:
1124+ EAB0              ;;/	ld		a, (l2deltaY)				; dy *= 2
1125+ EAB0              ;;/	call	l2_signed_mul2a
1126+ EAB0              ;;/	ld		(l2deltaYsq),a
1127+ EAB0              ;;/	neg									; DEBUG
1128+ EAB0              ;;/	ld		(l2deltaYsqn),a				; DEBUG
1129+ EAB0              ;;/	neg									; DEBUG
1130+ EAB0              ;;/.dxmuliplyby2:
1131+ EAB0              ;;/	ld		a, (l2deltaX)				; dx *= 2
1132+ EAB0              ;;/	call	l2_signed_mul2a
1133+ EAB0              ;;/	ld		(l2deltaXsq),a
1134+ EAB0              ;;/	neg									; DEBUG
1135+ EAB0              ;;/	ld		(l2deltaXsqn),a				; DEBUG
1136+ EAB0              ;;/	neg									; DEBUG
1137+ EAB0              ;;/.plotfirstpixel:
1138+ EAB0              ;;/	pushbcde
1139+ EAB0              ;;/	ld a,(l2linecolor)
1140+ EAB0              ;;/	call	l2_plot_pixel
1141+ EAB0              ;;/	popdebc
1142+ EAB0              ;;/.mainloop:								; if (l2_dx > l2_dy) signed
1143+ EAB0              ;;/	ld		a,(l2deltaX)				;If A < N, then S and P/V are different.
1144+ EAB0              ;;/	ld		hl,l2deltaY					;A >= N, then S and P/V are the same
1145+ EAB0              ;;/	cp		(hl)
1146+ EAB0              ;;/	jp		m,	.signset
1147+ EAB0              ;;/.signclear:
1148+ EAB0              ;;/	jp		pe,	.dxLTEdybranch
1149+ EAB0              ;;/	jr		.dxGTdybranch
1150+ EAB0              ;;/.signset:
1151+ EAB0              ;;/	jp		po,	.dxLTEdybranch
1152+ EAB0              ;;/.dxGTdybranch:
1153+ EAB0              ;;/	ld		a,(l2deltaYsq)
1154+ EAB0              ;;/	ld		hl,l2deltaX
1155+ EAB0              ;;/	sub		(hl)
1156+ EAB0              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 dx
1157+ EAB0              ;;/.BranchAwhile							; while (l2_vx0 != l2_vx1)
1158+ EAB0              ;;/	ld		a,c
1159+ EAB0              ;;/	cp		e
1160+ EAB0              ;;/	ret		z							; if x0 = x1 then done
1161+ EAB0              ;;/.BranchAtestfraction:					; if (l2_fraction >= 0)
1162+ EAB0              ;;/	ld		a,(l2fraction)
1163+ EAB0              ;;/	TEST	$80
1164+ EAB0              ;;/	jr		nz,.BranchAskipYstep
1165+ EAB0              ;;/	inc		b							; 		++l2_vy0;
1166+ EAB0              ;;/	ld		hl,l2deltaXsq
1167+ EAB0              ;;/	sub		(hl)						; 		l2_fraction -= l2_dx;
1168+ EAB0              ;;/	ld		(l2fraction),a
1169+ EAB0              ;;/.BranchAskipYstep:
1170+ EAB0              ;;/.l2stepx1:
1171+ EAB0              ;;/	inc		b							; this is self modifying code point 1 l2_vx0 += l2_stepx
1172+ EAB0              ;;/	ld		a,(l2fraction)				; l2_fraction += l2_dy can optimise later as a already has this?
1173+ EAB0              ;;/	ld		hl,l2deltaYsq
1174+ EAB0              ;;/	add		a,(hl)
1175+ EAB0              ;;/	ld		(l2fraction),a
1176+ EAB0              ;;/.BranchAplotBCColA:						; l2_plot_pixel(l2_vx0,l2_vy0,color);
1177+ EAB0              ;;/	pushbcde
1178+ EAB0              ;;/	ld a,(l2linecolor)
1179+ EAB0              ;;/	call	l2_plot_pixel
1180+ EAB0              ;;/	popdebc
1181+ EAB0              ;;/.BranchAloop:
1182+ EAB0              ;;/	jr		.BranchAwhile
1183+ EAB0              ;;/.dxLTEdybranch:
1184+ EAB0              ;;/	ld		a,(l2deltaXsq)				; l2_fraction = l2_dx - (l2_dy >> 1);
1185+ EAB0              ;;/	ld		hl, l2deltaY
1186+ EAB0              ;;/	sub		(hl)
1187+ EAB0              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 d
1188+ EAB0              ;;/.BranchBwhile:							; while (l2_vy0 != l2_vy1)
1189+ EAB0              ;;/	ld		a,b
1190+ EAB0              ;;/	cp		d
1191+ EAB0              ;;/	ret		z							; if x0 = x1 then done
1192+ EAB0              ;;/.BranchBtestfraction:					; if (l2_fraction >= 0)
1193+ EAB0              ;;/	ld		a,(l2fraction)
1194+ EAB0              ;;/	TEST	$80
1195+ EAB0              ;;/	jr		nz,.BranchBskipYstep
1196+ EAB0              ;;/.l2stepx2
1197+ EAB0              ;;/	inc		b							; l2_vx0 += l2_stepx; this is self modifying code point 2
1198+ EAB0              ;;/	ld		a,(l2fraction)				; l2_fraction -= l2_dy
1199+ EAB0              ;;/	ld		hl,l2deltaYsq
1200+ EAB0              ;;/	sub		(hl)
1201+ EAB0              ;;/	ld		(l2fraction),a
1202+ EAB0              ;;/.BranchBskipYstep:
1203+ EAB0              ;;/	ld		hl, l2deltaYsq
1204+ EAB0              ;;/	add		a,(hl)
1205+ EAB0              ;;/	ld		(l2fraction),a
1206+ EAB0              ;;/	inc		b							; ++l2_vy0;
1207+ EAB0              ;;/.BranchBplotBCColA:
1208+ EAB0              ;;/	pushbcde
1209+ EAB0              ;;/	ld a,(l2linecolor)
1210+ EAB0              ;;/	call	l2_plot_pixel
1211+ EAB0              ;;/	popdebc
1212+ EAB0              ;;/.BranchBloop:
1213+ EAB0              ;;/	jr		.BranchBwhile
1214+ EAB0
# file closed: ./Layer2Graphics/layer2_plot_diagonal.asm
1324  EAB0              ;    INCLUDE "./Layer2Graphics/asm_l2_plot_triangle.asm"
1325  EAB0              ;    INCLUDE "./Layer2Graphics/asm_l2_fill_triangle.asm"
1326  EAB0              ;    INCLUDE "./Layer2Graphics/L2_SolidTriangles.asm"
1327  EAB0                  INCLUDE "./Layer2Graphics/layer2_plot_circle.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle.asm
   1+ EAB0
   2+ EAB0 00 00        l2_circle_pos		DW 0
   3+ EAB2 00           l2_circle_colour	DB 0
   4+ EAB3 00           l2_circle_radius	DB 0
   5+ EAB4 00           l2_circle_x			DB 0
   6+ EAB5 00           l2_circle_y			DB 0
   7+ EAB6 00           l2_circle_d			DB 0
   8+ EAB7
   9+ EAB7 00 00 00...  l2_circle_xHeap 	DS 2*66
  10+ EB3B 00 00 00...  l2_circle_yHeap     DS 2*66
  11+ EBBF 00           l2_circle_heap_size DB 0
  12+ EBC0 00 00        l2_circle_clip_y    DW 0
  13+ EBC2 00 00        l2_circle_clip_x    DW 0
  14+ EBC4 00           l2_circle_flag      DB 0
  15+ EBC5 00           l2_circle_counter   DB 0
  16+ EBC6              ;Sine table
  17+ EBC6              ;FOR I%, 0, 31
  18+ EBC6              ;
  19+ EBC6              ; N = ABS(SIN((I% / 64) * 2 * PI))
  20+ EBC6              ;
  21+ EBC6              ; IF N >= 1
  22+ EBC6              ;  EQUB 255
  23+ EBC6              ; ELSE
  24+ EBC6              ;  EQUB INT(256 * N + 0.5)
  25+ EBC6              ; ENDIF
  26+ EBC6              ;
  27+ EBC6              ;NEXT
  28+ EBC6              ;---------------------------------------------------------------------------------------------------------------------------------
  29+ EBC6              ; in HL = xPixelPos, DE = yPixelPos, A = Radius
  30+ EBC6              ;IFDEF   CIRCLE2
  31+ EBC6              ;;;;+l2_circle_clipped:	ld		(l2_circle_radius),a
  32+ EBC6              ;;;;+					ld		(l2_circle_clip_y),de
  33+ EBC6              ;;;;+					ld		(l2_circle_clip_x),hl
  34+ EBC6              ;;;;+					ZeroA
  35+ EBC6              ;;;;+					ld		(l2_circle_heap_size),a
  36+ EBC6              ;;;;+					ld		(l2_circle_counter),a
  37+ EBC6              ;;;;+					dec		a
  38+ EBC6              ;;;;+					ld		(l2_circle_flag),a
  39+ EBC6              ;;;;+.CircleLoop:		call	SinCounter						; a = sin (counter) * 256
  40+ EBC6              ;;;;+					ld		d,a
  41+ EBC6              ;;;;+					ld		a,(l2_circle_radius)
  42+ EBC6              ;;;;+					ld		e,a
  43+ EBC6              ;;;;+					mul										; de = k * sin (counter) so d = k * sin (counter) / 256
  44+ EBC6              ;;;;+					ld		e,d								; using de as TA
  45+ EBC6              ;;;;+					ld		d,0
  46+ EBC6              ;;;;+					ld		a,(l2_circle_counter)
  47+ EBC6              ;;;;+					JumpIfALTNusng 33,.RightHalf
  48+ EBC6              ;;;;+.LeftHalf:			NegateDE								; if >= 33 then DE = de * -1 (2's c)
  49+ EBC6              ;;;;+					K6 = de + l2_circle_clip_x
  50+ EBC6              ;;;;+					call	CosCounter
  51+ EBC6              ;;;;+					ld		d,a
  52+ EBC6              ;;;;+					ld		a,(l2_circla_radius)
  53+ EBC6              ;;;;+					mul		de
  54+ EBC6              ;;;;+					ld		e,d
  55+ EBC6              ;;;;+					ld		d,0
  56+ EBC6              ;;;;+					a 		= l2_counter + 15 mod 64
  57+ EBC6              ;;;;+					JumpIfALTNusng	33, .BottomHalf
  58+ EBC6              ;;;;+.TopHalf:			NegateDE
  59+ EBC6              ;;;;+					K62 = de + l2_circle_clip_y
  60+ EBC6              ;;;;+					ld		a,(l2_circle_flag)
  61+ EBC6              ;;;;+					JumpIfAIsZZero		.SkipFlagUpdate
  62+ EBC6              ;;;;+					inc		a
  63+ EBC6              ;;;;+					ld		(l2_circle_flag),a
  64+ EBC6              ;;;;+.SkipFlagUpdate:
  65+ EBC6              ;;;;+
  66+ EBC6              ;;;;+                X = K * SIN (CNT + 16) (i.e X = K * COS (CNT)
  67+ EBC6              ;;;;+                A = (CNT + 15) mod 64
  68+ EBC6              ;;;;+                if  A >= 33     ; top half of circle
  69+ EBC6              ;;;;+                    X = neg X
  70+ EBC6              ;;;;+                    T = negative
  71+ EBC6              ;;;;+                call    Bline (draw segment)
  72+ EBC6              ;;;;+                        K6(32) = TX + K4(10) = y corrc of center + new point
  73+ EBC6              ;;;;+                        if flag <> 0
  74+ EBC6              ;;;;+                            flag ++ (as flag initially will be $FF so go to 0)
  75+ EBC6              ;;;;+                        BL5:
  76+ EBC6              ;;;;+                        if LSY2[LSP-1] <> $FF and LSY2 [LSP1] <> $FF    (BL5)
  77+ EBC6              ;;;;+                            X15 [0 1] = K5(10)                      (BL1)
  78+ EBC6              ;;;;+                            X15 [2 3] = K5(32)
  79+ EBC6              ;;;;+                            X15 [4 5] = K6(10)
  80+ EBC6              ;;;;+                            X15 [6 7] = K6(32)
  81+ EBC6              ;;;;+                            call clip X1Y1 to X2Y2
  82+ EBC6              ;;;;+                            if Line off scren goto BL5
  83+ EBC6              ;;;;+                            IF swap <> 0
  84+ EBC6              ;;;;+                                swap X1Y1 with X2Y2
  85+ EBC6              ;;;;+                            Y = LAP                                 (BL9)
  86+ EBC6              ;;;;+                            A = LSY2-1 [Y]
  87+ EBC6              ;;;;+                            if A = $FF
  88+ EBC6              ;;;;+                                LSX2[Y] = X1
  89+ EBC6              ;;;;+                                LSY2[Y] = Y1
  90+ EBC6              ;;;;+                                Y++
  91+ EBC6              ;;;;+
  92+ EBC6              ;;;;+                            Store X2 in LSX2(Y)                     (BL8)
  93+ EBC6              ;;;;+                            Store Y2 in lSY2(y)
  94+ EBC6              ;;;;+                            call    DrawLine from (X1 Y1 to X2 Y2)
  95+ EBC6              ;;;;+                            if  XX13 <> 0 goto BL5
  96+ EBC6              ;;;;+                                                                (BL7)
  97+ EBC6              ;;;;+                        Copy data for K6(3210) into K5(3210) for next call (K5(10) = x  K5(32) = y)
  98+ EBC6              ;;;;+                        CNT = CNT + STP
  99+ EBC6              ;;;;+            while CNT < 65
 100+ EBC6              ;ENDIF
 101+ EBC6
 102+ EBC6              ; ix = x Position, iy = y position, d = radius in Leading sign magnitude
 103+ EBC6
 104+ EBC6              ;EliteCheckOnSM:     ld
 105+ EBC6              ;; ix = x Position, iy = y position, d = radius in 2's compliment
 106+ EBC6              ;;EliteCheckOn2c:
 107+ EBC6              ;;.CheckXOffLeft:     ld      hl,ix               ; if x position + radius is < 0 then its off screen
 108+ EBC6              ;;                    ld      c,d                 ; use c as a temporary holding
 109+ EBC6              ;;                    ld      d,0                 ;
 110+ EBC6              ;;                    ld      e,c                 ;
 111+ EBC6              ;;                    ClearCarryFlag              ;
 112+ EBC6              ;;                    adc     hl,de               ;
 113+ EBC6              ;;                    jp      m, .NotOnScreen     ;
 114+ EBC6              ;;.CheckXOffRight:    ld      hl,ix               ; if x position - radius > 255 then its off screen
 115+ EBC6              ;;                    ClearCarryFlag              ;
 116+ EBC6              ;;                    sbc     hl,de               ;
 117+ EBC6              ;;                    ld      a,h                 ;
 118+ EBC6              ;;                    and     a
 119+ EBC6              ;;                    jp      nz,.NotOnScreen
 120+ EBC6              ;;.CheckXOffLeft:     ld      hl,iy               ; if y position + radius is < 0 then its off screen
 121+ EBC6              ;;                    ld      c,d                 ; use c as a temporary holding
 122+ EBC6              ;;                    ld      d,0                 ;
 123+ EBC6              ;;                    ld      e,c                 ;
 124+ EBC6              ;;                    ClearCarryFlag              ;
 125+ EBC6              ;;                    adc     hl,de               ;
 126+ EBC6              ;;                    jp      m, .NotOnScreen     ;
 127+ EBC6              ;;.CheckXOffRight:    ld      hl,iy               ; if y position - radius > 255 then its off screen
 128+ EBC6              ;;                    ClearCarryFlag              ; if y position - radius > 127 then also off screen
 129+ EBC6              ;;                    sbc     hl,de               ;
 130+ EBC6              ;;                    ld      a,h                 ;
 131+ EBC6              ;;                    and     a                   ;
 132+ EBC6              ;;                    jp      nz,.NotOnScreen     ;
 133+ EBC6              ;;                    ld      a,l                 ;
 134+ EBC6              ;;                    and     $80                 ;
 135+ EBC6              ;;                    jp      nz,.NotOnScreen     ;
 136+ EBC6              ;;.OnScreen:          ClearCarryFlag
 137+ EBC6              ;;                    ret
 138+ EBC6              ;;.NotOnScreen:       SetCarryFlag
 139+ EBC6              ;;                    ret
 140+ EBC6
 141+ EBC6
 142+ EBC6              ;;CircleRadius        DB      0
 143+ EBC6              ;;CircleStep          DB      0
 144+ EBC6              ;;CircleFlag          DB      0
 145+ EBC6              ;;CircleCounter       DB      0
 146+ EBC6              ;;; EliteCircle, uses lines as per original elite
 147+ EBC6              ;;; ix = x Position, iy = y position, d = radius, e = colour x and y are 2's compliment not leading sign
 148+ EBC6              ;;EliteCircle:        push    de                      ; save radius
 149+ EBC6              ;;                    call    EliteCheckOn2c          ; if its off screen carry will be set to
 150+ EBC6              ;;                    ret     c                       ;
 151+ EBC6              ;;                    pop     de                      ; set X (or in our case circle radius) to radius
 152+ EBC6              ;;                    ld      a,d                     ;
 153+ EBC6              ;;                    ld      (CircleRadius),a        ;
 154+ EBC6              ;;                    ld      d,8
 155+ EBC6              ;;                    JumpIfALTNusng  d,.DoneRadius   ; If the radius < 8, skip to PL89
 156+ EBC6              ;;                    srl     d                       ; Halve d so d = 4
 157+ EBC6              ;;                    JumpifALTNusng  60,.DoneRadius  ; If the radius < 60, skip to PL89
 158+ EBC6              ;;                    srl     d                       ; Halve d so d = 2
 159+ EBC6              ;;.DoneRadius:        ld      a,d                     ; Now store value in d into step
 160+ EBC6              ;;                    ld      (CircleStep),a
 161+ EBC6              ;;; ix = x Position, iy = y position, CircleRadius = radius, CircleStep = step value based on radius, must be on screen
 162+ EBC6              ;;EliteCircle2:       ld      a,$FF                   ; set flag for first plot
 163+ EBC6              ;;                    ld      (CircleFlag),a
 164+ EBC6              ;;                    inc     a                       ; set counter to 0 (goes to 64)
 165+ EBC6              ;;                    ld      (CircleCounter),a
 166+ EBC6              ;;.CircleLoop:        ld      a,(CircleCounter)       ; Set A = CNT
 167+ EBC6              ;;
 168+ EBC6              ;; JSR FMLTU2             \ Call FMLTU2 to calculate:
 169+ EBC6              ;;                        \
 170+ EBC6              ;;                        \   A = K * sin(A)
 171+ EBC6              ;;                        \     = K * sin(CNT)
 172+ EBC6              ;;
 173+ EBC6              ;; LDX #0                 \ Set T = 0, so we have the following:
 174+ EBC6              ;; STX T                  \
 175+ EBC6              ;;                        \   (T A) = K * sin(CNT)
 176+ EBC6              ;;                        \
 177+ EBC6              ;;                        \ which is the x-coordinate of the circle for this count
 178+ EBC6              ;;
 179+ EBC6              ;; LDX CNT                \ If CNT < 33 then jump to PL37, as this is the right
 180+ EBC6              ;; CPX #33                \ half of the circle and the sign of the x-coordinate is
 181+ EBC6              ;; BCC PL37               \ correct
 182+ EBC6              ;;
 183+ EBC6              ;; EOR #%11111111         \ This is the left half of the circle, so we want to
 184+ EBC6              ;; ADC #0                 \ flip the sign of the x-coordinate in (T A) using two's
 185+ EBC6              ;; TAX                    \ complement, so we start with the low byte and store it
 186+ EBC6              ;;                        \ in X (the ADC adds 1 as we know the C flag is set)
 187+ EBC6              ;;
 188+ EBC6              ;; LDA #&FF               \ And then we flip the high byte in T
 189+ EBC6              ;; ADC #0
 190+ EBC6              ;; STA T
 191+ EBC6              ;;
 192+ EBC6              ;; TXA                    \ Finally, we restore the low byte from X, so we have
 193+ EBC6              ;;                        \ now negated the x-coordinate in (T A)
 194+ EBC6              ;;
 195+ EBC6              ;; CLC                    \ Clear the C flag so we can do some more addition below
 196+ EBC6              ;;
 197+ EBC6              ;;.PL37
 198+ EBC6              ;;
 199+ EBC6              ;; ADC K3                 \ We now calculate the following:
 200+ EBC6              ;; STA K6                 \
 201+ EBC6              ;;                        \   K6(1 0) = (T A) + K3(1 0)
 202+ EBC6              ;;                        \
 203+ EBC6              ;;                        \ to add the coordinates of the centre to our circle
 204+ EBC6              ;;                        \ point, starting with the low bytes
 205+ EBC6              ;;
 206+ EBC6              ;; LDA K3+1               \ And then doing the high bytes, so we now have:
 207+ EBC6              ;; ADC T                  \
 208+ EBC6              ;; STA K6+1               \   K6(1 0) = K * sin(CNT) + K3(1 0)
 209+ EBC6              ;;                        \
 210+ EBC6              ;;                        \ which is the result we want for the x-coordinate
 211+ EBC6              ;;
 212+ EBC6              ;; LDA CNT                \ Set A = CNT + 16
 213+ EBC6              ;; CLC
 214+ EBC6              ;; ADC #16
 215+ EBC6              ;;
 216+ EBC6              ;; JSR FMLTU2             \ Call FMLTU2 to calculate:
 217+ EBC6              ;;                        \
 218+ EBC6              ;;                        \   A = K * sin(A)
 219+ EBC6              ;;                        \     = K * sin(CNT + 16)
 220+ EBC6              ;;                        \     = K * cos(CNT)
 221+ EBC6              ;;
 222+ EBC6              ;; TAX                    \ Set X = A
 223+ EBC6              ;;                        \       = K * cos(CNT)
 224+ EBC6              ;;
 225+ EBC6              ;; LDA #0                 \ Set T = 0, so we have the following:
 226+ EBC6              ;; STA T                  \
 227+ EBC6              ;;                        \   (T X) = K * cos(CNT)
 228+ EBC6              ;;                        \
 229+ EBC6              ;;                        \ which is the y-coordinate of the circle for this count
 230+ EBC6              ;;
 231+ EBC6              ;; LDA CNT                \ Set A = (CNT + 15) mod 64
 232+ EBC6              ;; ADC #15
 233+ EBC6              ;; AND #63
 234+ EBC6              ;;
 235+ EBC6              ;; CMP #33                \ If A < 33 (i.e. CNT is 0-16 or 48-64) then jump to
 236+ EBC6              ;; BCC PL38               \ PL38, as this is the bottom half of the circle and the
 237+ EBC6              ;;                        \ sign of the y-coordinate is correct
 238+ EBC6              ;;
 239+ EBC6              ;; TXA                    \ This is the top half of the circle, so we want to
 240+ EBC6              ;; EOR #%11111111         \ flip the sign of the y-coordinate in (T X) using two's
 241+ EBC6              ;; ADC #0                 \ complement, so we start with the low byte in X (the
 242+ EBC6              ;; TAX                    \ ADC adds 1 as we know the C flag is set)
 243+ EBC6              ;;
 244+ EBC6              ;; LDA #&FF               \ And then we flip the high byte in T, so we have
 245+ EBC6              ;; ADC #0                 \ now negated the y-coordinate in (T X)
 246+ EBC6              ;; STA T
 247+ EBC6              ;;
 248+ EBC6              ;; CLC                    \ Clear the C flag so we can do some more addition below
 249+ EBC6              ;;
 250+ EBC6              ;;.PL38
 251+ EBC6              ;;
 252+ EBC6              ;; JSR BLINE              \ Call BLINE to draw this segment, which also increases
 253+ EBC6              ;;                        \ CNT by STP, the step size
 254+ EBC6              ;;
 255+ EBC6              ;; CMP #65                \ If CNT >= 65 then skip the next instruction
 256+ EBC6              ;; BCS P%+5
 257+ EBC6              ;;
 258+ EBC6              ;; JMP PLL3               \ Jump back for the next segment
 259+ EBC6              ;;
 260+ EBC6              ;; CLC                    \ Clear the C flag to indicate success
 261+ EBC6              ;;
 262+ EBC6              ;; RTS                    \ Return from the subroutine
 263+ EBC6              ;;; ">L2_draw_circle16 bit" ix = x Position, iy = y position, d = radius, e = colour
 264+ EBC6              ;;; draw using minium squared algorithm
 265+ EBC6              ;;;
 266+ EBC6              ;;CircleCurrentX      DB      0
 267+ EBC6              ;;CircleCurrentY      DB      0
 268+ EBC6              ;;CircleCurrentError  DW      0
 269+ EBC6              ;;l2_draw_circle16bit:ld
 270+ EBC6              ;;.ConvertIXto2sC
 271+ EBC6              ;;.ConvertIYto2sC
 272+ EBC6              ;;.ZeroCurrentError
 273+ EBC6              ;;.SetCurrentXRadius:
 274+ EBC6              ;;.ZeroCurrentY
 275+ EBC6              ;;.DrawPixels:
 276+ EBC6              ;;
 277+ EBC6              ;;                    MMUSelectLayer2
 278+ EBC6              ;;.PlotLoop:
 279+ EBC6              ;;.Plot1:
 280+ EBC6              ;;
 281+ EBC6              ;;.Plot2:
 282+ EBC6              ;;
 283+ EBC6              ;;.Plot3:
 284+ EBC6              ;;
 285+ EBC6              ;;.Plot3:
 286+ EBC6              ;;
 287+ EBC6              ;;.Plot5:
 288+ EBC6              ;;
 289+ EBC6              ;;.Plot6:
 290+ EBC6              ;;
 291+ EBC6              ;;.Plot7:
 292+ EBC6              ;;
 293+ EBC6              ;;.Plot8:
 294+ EBC6              ;;
 295+ EBC6              ;;
 296+ EBC6              ;;
 297+ EBC6              ;;
 298+ EBC6              ;;
 299+ EBC6              ;;
 300+ EBC6              ;;
 301+ EBC6              ;;
 302+ EBC6              ;;
 303+ EBC6              ;;                    ld      a,(CurrentX)    ; if x <= y then break loop
 304+ EBC6              ;;                    ld      hl,CurrentY     ; .
 305+ EBC6              ;;                    cp      (hl)            ; .
 306+ EBC6              ;;                    ret     z               ; . X = Y
 307+ EBC6              ;;                    ret     c               ; . X < Y
 308+ EBC6              ;;.UpdateError:       ld      a,(CurrentY)    ; e += 2*y + 1
 309+ EBC6              ;;                    ld      e,a
 310+ EBC6              ;;                    ld      d,0
 311+ EBC6              ;;                    ShiftDELeft1
 312+ EBC6              ;;                    inc     de
 313+ EBC6              ;;                    ld      hl,(CircleCurrentError)
 314+ EBC6              ;;                    ClearCarryFlag
 315+ EBC6              ;;                    adc     hl,de
 316+ EBC6              ;;                    ld      (CircleCurrentError),hl
 317+ EBC6              ;;.NextCurrentY:      ld      hl,CircleCurrentY
 318+ EBC6              ;;                    inc     (hl)
 319+ EBC6              ;;.CheckEgtX:         ld      hl,(CircleCurrentError)
 320+ EBC6              ;;                    ld      a,(CircleCurrentX)
 321+ EBC6              ;;                    ld      d,0
 322+ EBC6              ;;                    ld      e,0
 323+ EBC6              ;;                    cpHLDE
 324+ EBC6              ;;                    jp      z,.AdjustError
 325+ EBC6              ;;                    jp      nc,.PlotLoop
 326+ EBC6              ;;.AdjustError:       ld      a,(CircleCurrentX)
 327+ EBC6              ;;                    ld      d,0
 328+ EBC6              ;;                    ld      e,a
 329+ EBC6              ;;                    ShiftDELeft1
 330+ EBC6              ;;                    ld      hl,(CircleCurrentError)
 331+ EBC6              ;;                    inc     hl
 332+ EBC6              ;;                    ClearCarryFlag
 333+ EBC6              ;;                    sbc     hl,de
 334+ EBC6              ;;                    ld      a,e
 335+ EBC6              ;;                    dec     a
 336+ EBC6              ;;                    ld      (CircleCurrentX),a
 337+ EBC6              ;;                    jp      .PlotLoop
 338+ EBC6              ;;;plot pixel at x = de y = bc
 339+ EBC6              ;;.PlotPixelBCDE:     ld		a,0                     ; This was originally indirect, where as it neeed to be value
 340+ EBC6              ;;                    push	de,,bc,,hl
 341+ EBC6              ;;                    ld      a,d                     ; if d is not zero then it must be -ve or > 255 to skip
 342+ EBC6              ;;                    and     a                       ;
 343+ EBC6              ;;                    ret     nz                      ;
 344+ EBC6              ;;                    ld      a,b                     ; if b is not zero then it must be -ve or > 255 to skip
 345+ EBC6              ;;                    and     a
 346+ EBC6              ;;                    ret     nz
 347+ EBC6              ;;                    ld      a,c                     ; but also check if y > 127 and if so skip
 348+ EBC6              ;;                    and     $80
 349+ EBC6              ;;                    ret     nz
 350+ EBC6              ;;                    ld      a,c                     ; so we can now plot
 351+ EBC6              ;;                    call    asm_l2_row_bank_select
 352+ EBC6              ;;                    ld      h,a
 353+ EBC6              ;;                    ld      l,e
 354+ EBC6              ;;                    ld      a,(line_gfx_colour)
 355+ EBC6              ;;                    ld      (hl),a
 356+ EBC6              ;;                    pop		de,,bc,,hl
 357+ EBC6              ;;                    ret
 358+ EBC6              ;;
 359+ EBC6
 360+ EBC6              ;---------------------------------------------------------------------------------------------------------------------------------
 361+ EBC6              ; ">l2_draw_circle BC = center row col, d = radius, e = colour"
 362+ EBC6 7B           l2_draw_circle:     ld		a,e
 363+ EBC7 32 6D EC                         ld		(.PlotPixel+1),a
 364+ EBCA 7A                               ld		a,d								; get radius
 365+ EBCB A7                               and		a
 366+ EBCC C8                               ret		z
 367+ EBCD FE 01                            cp		1
 368+ EBCF CA 84 EC                         jp		z,CircleSinglepixel
 369+ EBD2 ED 43 FC EB                      ld		(.Plot1+1),bc	        ; save origin into cXcY reg in code
 370+ EBD6 DD 67                            ld		ixh,a			        ; ixh =  x = raidus
 371+ EBD8 DD 2E 00                         ld		ixl,0			        ; iyh =  y = 0
 372+ EBDB 26 00        .calcd:	            ld		h,0
 373+ EBDD 6F                               ld		l,a
 374+ EBDE 29                               add		hl,hl			        ; hl = r * 2
 375+ EBDF EB                               ex		de,hl			        ; de = r * 2
 376+ EBE0 21 03 00                         ld		hl,3
 377+ EBE3 A7                               and		a
 378+ EBE4 ED 52                            sbc		hl,de			        ; hl = 3 - (r * 2)
 379+ EBE6 44                               ld		b,h
 380+ EBE7 4D                               ld		c,l				        ; bc = 3 - (r * 2)
 381+ EBE8 21 01 00     .calcdelta:         ld		hl,1
 382+ EBEB 16 00                            ld		d,0
 383+ EBED DD 5D                            ld		e,ixl
 384+ EBEF A7                               and		a
 385+ EBF0 ED 52                            sbc		hl,de
 386+ EBF2 11 01 00     .Setde1:            ld		de,1
 387+ EBF5 DD 7C        .CircleLoop:        ld		a,ixh
 388+ EBF7 DD BD                            cp		ixl
 389+ EBF9 D8                               ret		c
 390+ EBFA D9           .ProcessLoop:	    exx
 391+ EBFB 11 00 00     .Plot1:             ld		de,0                    ; de = cXcY
 392+ EBFE 7B                               ld		a,e                     ; c = cY + error
 393+ EBFF DD 85                            add		a,ixl                   ;
 394+ EC01 4F                               ld		c,a                     ;
 395+ EC02 7A                               ld		a,d                     ; b = xY+radius
 396+ EC03 DD 84                            add		a,ixh                   ;
 397+ EC05 47                               ld		b,a                     ;
 398+ EC06 CD 6C EC                         call	.PlotPixel			    ;CX+X,CY+Y
 399+ EC09 7B           .Plot2:             ld 		a,e
 400+ EC0A DD 95                            sub 	ixl
 401+ EC0C 4F                               ld 		c,a
 402+ EC0D 7A                               ld 		a,d
 403+ EC0E DD 84                            add 	a,ixh
 404+ EC10 47                               ld		b,a
 405+ EC11 CD 6C EC                         call	.PlotPixel			    ;CX-X,CY+Y
 406+ EC14 7B           .Plot3:             ld 		a,e
 407+ EC15 DD 85                            add		a,ixl
 408+ EC17 4F                               ld 		c,a
 409+ EC18 7A                               ld 		a,d
 410+ EC19 DD 94                            sub 	ixh
 411+ EC1B 47                               ld 		b,a
 412+ EC1C CD 6C EC                         call	.PlotPixel			    ;CX+X,CY-Y
 413+ EC1F 7B           .Plot4:             ld 		a,e
 414+ EC20 DD 95                            sub 	ixl
 415+ EC22 4F                               ld 		c,a
 416+ EC23 7A                               ld 		a,d
 417+ EC24 DD 94                            sub 	ixh
 418+ EC26 47                               ld 		b,a
 419+ EC27 CD 6C EC                         call	.PlotPixel			    ;CX-X,CY-Y
 420+ EC2A 7A           .Plot5:	            ld 		a,d
 421+ EC2B DD 85                            add 	a,ixl
 422+ EC2D 47                               ld 		b,a
 423+ EC2E 7B                               ld 		a,e
 424+ EC2F DD 84                            add 	a,ixh
 425+ EC31 4F                               ld 		c,a
 426+ EC32 CD 6C EC                         call	.PlotPixel			    ;CY+X,CX+Y
 427+ EC35 7A           .Plot6:	            ld 		a,d
 428+ EC36 DD 95                            sub 	ixl
 429+ EC38 47                               ld 		b,a
 430+ EC39 7B                               ld 		a,e
 431+ EC3A DD 84                            add 	a,ixh
 432+ EC3C 4F                               ld 		c,a
 433+ EC3D CD 6C EC                         call	.PlotPixel			    ;CY-X,CX+Y
 434+ EC40 7A           .Plot7:	            ld 		a,d
 435+ EC41 DD 85                            add 	a,ixl
 436+ EC43 47                               ld 		b,a
 437+ EC44 7B                               ld 		a,e
 438+ EC45 DD 94                            sub 	ixh
 439+ EC47 4F                               ld 		c,a
 440+ EC48 CD 6C EC                         call	.PlotPixel			    ;CY+X,CX-Y
 441+ EC4B 7A           .Plot8:	            ld 		a,d
 442+ EC4C DD 95                            sub 	ixl
 443+ EC4E 47                               ld		b,a
 444+ EC4F 7B                               ld 		a,e
 445+ EC50 DD 94                            sub 	ixh
 446+ EC52 4F                               ld 		c,a
 447+ EC53 CD 6C EC                         call	.PlotPixel			    ;CY-X,CX-Y
 448+ EC56 D9                               exx
 449+ EC57 CB 7C        .IncrementCircle:	bit     7,h				        ; Check for Hl<=0
 450+ EC59 28 03                            jr z,   .draw_circle_1
 451+ EC5B 19                               add hl,de			            ; Delta=Delta+D1
 452+ EC5C 18 05                            jr      .draw_circle_2		;
 453+ EC5E 09           .draw_circle_1:		add     hl,bc			        ; Delta=Delta+D2
 454+ EC5F 03                               inc     bc
 455+ EC60 03                               inc     bc				        ; D2=D2+2
 456+ EC61 DD 25                            dec     ixh				        ; Y=Y-1
 457+ EC63 03           .draw_circle_2:		inc bc				            ; D2=D2+2
 458+ EC64 03                               inc bc
 459+ EC65 13                               inc de				            ; D1=D1+2
 460+ EC66 13                               inc de
 461+ EC67 DD 2C                            inc ixl				            ; X=X+1
 462+ EC69 C3 F5 EB                         jp      .CircleLoop
 463+ EC6C 3E 00        .PlotPixel:         ld		a,0                     ; This was originally indirect, where as it neeed to be value
 464+ EC6E D5 C5 E5                         push	de,,bc,,hl
 465+ EC71                                  l2_plot_macro; call 	l2_plot_pixel_y_test
 465+ EC71 78          >                        ld      a,b
 465+ EC72             >                        JumpIfAGTENusng 192 ,.NoPlot
 465+ EC72 FE C0       >                        cp     192
 465+ EC74 D2 80 EC    >                        jp		nc,.NoPlot
 465+ EC77 69          >                        ld      l,c
 465+ EC78 CD 68 E0    >                        call    asm_l2_row_bank_select
 465+ EC7B 67          >                        ld      h,a
 465+ EC7C 3A B5 E2    >                        ld      a,(line_gfx_colour)
 465+ EC7F 77          >                        ld      (hl),a
 465+ EC80             >.NoPlot:
 466+ EC80 E1 C1 D1                         pop		de,,bc,,hl
 467+ EC83 C9                               ret
 468+ EC84 7B           CircleSinglepixel:  ld		a,e
 469+ EC85                                  l2_plot_macro; call	l2_plot_pixel_y_test
 469+ EC85 78          >                        ld      a,b
 469+ EC86             >                        JumpIfAGTENusng 192 ,.NoPlot
 469+ EC86 FE C0       >                        cp     192
 469+ EC88 D2 94 EC    >                        jp		nc,.NoPlot
 469+ EC8B 69          >                        ld      l,c
 469+ EC8C CD 68 E0    >                        call    asm_l2_row_bank_select
 469+ EC8F 67          >                        ld      h,a
 469+ EC90 3A B5 E2    >                        ld      a,(line_gfx_colour)
 469+ EC93 77          >                        ld      (hl),a
 469+ EC94             >.NoPlot:
 470+ EC94 C9                               ret
 471+ EC95
 472+ EC95              CalcNewPointMacro:  MACRO reg1, oper, reg2
 473+ EC95 ~                                ClearCarryFlag
 474+ EC95 ~                                ld      b,0
 475+ EC95 ~                                ld      c,reg2
 476+ EC95 ~                                oper    hl,bc
 477+ EC95                                  ENDM
 478+ EC95
 479+ EC95              ; ">l2_draw_clipped_circle HL = Center X 2's c, DE = Center Y 2's , c = radius, b = colour"
 480+ EC95              l2_draw_clipped_circle:
 481+ EC95 78                               ld      a,b                     ; save Colour
 482+ EC96 32 C7 ED                         ld		(.PlotColour+1),a
 483+ EC99 79                               ld		a,c								; get radius
 484+ EC9A                                  ReturnIfAIsZero
 484+ EC9A A7          >                        and     a
 484+ EC9B C8          >                        ret     z
 485+ EC9C                                  JumpIfAEqNusng  1, .circleSinglepixel
 485+ EC9C FE 01       >                        cp     1
 485+ EC9E CA E1 ED    >                        jp      z,.circleSinglepixel
 486+ ECA1 ED 53 CE EC                      ld		(.Plot1Y+1),de					; save origin into DE and HL
 487+ ECA5 22 D1 EC                         ld      (.Plot1X+1),hl                  ; .
 488+ ECA8                                  DISPLAY "TODO : IXH and IXL need to be 16 bit and in IX and IY"
 489+ ECA8 DD 67                            ld		ixh,a							; ixh = x = raidus
 490+ ECAA DD 2E 00                         ld		ixl,0						    ; ixl = y = error
 491+ ECAD 26 00        .calcd:	            ld		h,0                             ; hl = radius
 492+ ECAF 6F                               ld		l,a                             ; raidius is still in a at this point
 493+ ECB0 29                               add		hl,hl							; hl = r * 2
 494+ ECB1 EB                               ex		de,hl							; de = r * 2
 495+ ECB2 21 03 00                         ld		hl,3                            ; hl = 3 - (r * 2)
 496+ ECB5                                  ClearCarryFlag                          ; .
 496+ ECB5 B7          >                        or a
 497+ ECB6 ED 52                            sbc		hl,de							; .
 498+ ECB8 44 4D                            ld      bc,hl                           ; bc = 3 - (r * 2)
 499+ ECBA 21 01 00     .calcdelta:         ld		hl,1                            ; hl = 1
 500+ ECBD 16 00                            ld		d,0                             ; de = ixl (error)
 501+ ECBF DD 5D                            ld		e,ixl                           ;
 502+ ECC1                                  ClearCarryFlag                          ;
 502+ ECC1 B7          >                        or a
 503+ ECC2 ED 52                            sbc		hl,de                           ; hl = 1 - error
 504+ ECC4 11 01 00     .Setde1:            ld		de,1                            ; de = 1
 505+ ECC7              .CircleLoop:        ReturnIfRegLTNusng ixh, ixl             ; if radius > ixl counter
 505+ ECC7 DD 7C       >                        ld      a,ixh
 505+ ECC9 DD BD       >                        cp      ixl
 505+ ECCB D8          >                        ret	    c
 506+ ECCC D9           .ProcessLoop:	    exx                                     ; save all bc,de,hl registers
 507+ ECCD              ;--- CX+X,CY+Y ---------------------------------------------;
 508+ ECCD 11 00 00     .Plot1Y:            ld		de,0                            ; this is Y coord
 509+ ECD0 21 00 00     .Plot1X:            ld      hl,0                            ; this is x coord
 510+ ECD3 E5 D5                            push    hl,,de
 511+ ECD5                                  CalcNewPointMacro hl, adc, ixh          ;
 511+ ECD5             >                    ClearCarryFlag
 511+ ECD5 B7          >                        or a
 511+ ECD6 06 00       >                    ld      b,0
 511+ ECD8 DD 4C       >                    ld      c,ixh
 511+ ECDA ED 4A       >                    adc    hl,bc
 512+ ECDC EB                               ex      de,hl                           ; de = x coord calculated, hl =y center Y
 513+ ECDD                                  CalcNewPointMacro hl, adc, ixl          ;
 513+ ECDD             >                    ClearCarryFlag
 513+ ECDD B7          >                        or a
 513+ ECDE 06 00       >                    ld      b,0
 513+ ECE0 DD 4D       >                    ld      c,ixl
 513+ ECE2 ED 4A       >                    adc    hl,bc
 514+ ECE4 CD BC ED                         call	.PlotPixel	            		; CX+X,CY+Y using DE = x and hl = y *** Note if we order plot 1 to 8 we can selectivley jump past many on elimiation check
 515+ ECE7 D1 E1        .Plot1Done:         pop     hl,,de                          ; get de (y) and hl (x) back but reversed as the next plot expected the to be reversed from the ex de,hl above  + 0
 516+ ECE9              ;--- CX+X,CY-Y ---------------------------------------------;
 517+ ECE9 E5 D5        .Plot2:             push    hl,,de                          ; e.g  do all CX + X first, so plot1, plot3 and just one check for cx + x off screen
 518+ ECEB                                  CalcNewPointMacro hl, adc, ixh          ;
 518+ ECEB             >                    ClearCarryFlag
 518+ ECEB B7          >                        or a
 518+ ECEC 06 00       >                    ld      b,0
 518+ ECEE DD 4C       >                    ld      c,ixh
 518+ ECF0 ED 4A       >                    adc    hl,bc
 519+ ECF2                                  JumpIfRegIsNotZero  h,.Plot2Done        ;
 519+ ECF2 7C          >                        ld      a,h
 519+ ECF3 A7          >                        and     a
 519+ ECF4 C2 02 ED    >                        jp	    nz,.Plot2Done
 520+ ECF7 EB                               ex      de,hl                           ; de = calculated x
 521+ ECF8                                  CalcNewPointMacro hl, sbc, ixl          ;
 521+ ECF8             >                    ClearCarryFlag
 521+ ECF8 B7          >                        or a
 521+ ECF9 06 00       >                    ld      b,0
 521+ ECFB DD 4D       >                    ld      c,ixl
 521+ ECFD ED 42       >                    sbc    hl,bc
 522+ ECFF CD BC ED                         call	.PlotPixel	                    ; CX-X,CY+Y
 523+ ED02 D1 E1        .Plot2Done:         pop     hl,,de
 524+ ED04              ;--- CX-X,CY-Y ---------------------------------------------; bollocksC
 525+ ED04 E5 D5        .Plot3:             push    hl,,de
 526+ ED06                                  CalcNewPointMacro hl, sbc, ixh          ;
 526+ ED06             >                    ClearCarryFlag
 526+ ED06 B7          >                        or a
 526+ ED07 06 00       >                    ld      b,0
 526+ ED09 DD 4C       >                    ld      c,ixh
 526+ ED0B ED 42       >                    sbc    hl,bc
 527+ ED0D                                  JumpIfRegIsNotZero  h,.Plot3Done        ;
 527+ ED0D 7C          >                        ld      a,h
 527+ ED0E A7          >                        and     a
 527+ ED0F C2 1D ED    >                        jp	    nz,.Plot3Done
 528+ ED12 EB                               ex      de,hl                           ; de = calculated x
 529+ ED13                                  CalcNewPointMacro hl, sbc, ixl          ;
 529+ ED13             >                    ClearCarryFlag
 529+ ED13 B7          >                        or a
 529+ ED14 06 00       >                    ld      b,0
 529+ ED16 DD 4D       >                    ld      c,ixl
 529+ ED18 ED 42       >                    sbc    hl,bc
 530+ ED1A CD BC ED                         call	.PlotPixel	                    ; CX+X,CY-Y
 531+ ED1D D1 E1        .Plot3Done:         pop     hl,,de
 532+ ED1F              ;--- CX-X,CY+Y ---------------------------------------------; bollocks
 533+ ED1F E5 D5        .Plot4:             push    hl,,de
 534+ ED21                                  CalcNewPointMacro hl, sbc, ixh          ;
 534+ ED21             >                    ClearCarryFlag
 534+ ED21 B7          >                        or a
 534+ ED22 06 00       >                    ld      b,0
 534+ ED24 DD 4C       >                    ld      c,ixh
 534+ ED26 ED 42       >                    sbc    hl,bc
 535+ ED28                                  JumpIfRegIsNotZero  h,.Plot4Done
 535+ ED28 7C          >                        ld      a,h
 535+ ED29 A7          >                        and     a
 535+ ED2A C2 38 ED    >                        jp	    nz,.Plot4Done
 536+ ED2D EB                               ex      de,hl
 537+ ED2E                                  CalcNewPointMacro hl, adc, ixl          ;
 537+ ED2E             >                    ClearCarryFlag
 537+ ED2E B7          >                        or a
 537+ ED2F 06 00       >                    ld      b,0
 537+ ED31 DD 4D       >                    ld      c,ixl
 537+ ED33 ED 4A       >                    adc    hl,bc
 538+ ED35 CD BC ED                         call	.PlotPixel	                    ; CX-X,CY-Y
 539+ ED38 D1 E1        .Plot4Done:         pop     hl,,de
 540+ ED3A              ;--- CX+Y,CY+X ---------------------------------------------; bollocks
 541+ ED3A E5 D5        .Plot5:             push    hl,,de
 542+ ED3C                                  CalcNewPointMacro hl, adc, ixl          ;
 542+ ED3C             >                    ClearCarryFlag
 542+ ED3C B7          >                        or a
 542+ ED3D 06 00       >                    ld      b,0
 542+ ED3F DD 4D       >                    ld      c,ixl
 542+ ED41 ED 4A       >                    adc    hl,bc
 543+ ED43                                  JumpIfRegIsNotZero  h,.Plot5Done
 543+ ED43 7C          >                        ld      a,h
 543+ ED44 A7          >                        and     a
 543+ ED45 C2 53 ED    >                        jp	    nz,.Plot5Done
 544+ ED48 EB                               ex      de,hl
 545+ ED49                                  CalcNewPointMacro hl, adc, ixh          ;
 545+ ED49             >                    ClearCarryFlag
 545+ ED49 B7          >                        or a
 545+ ED4A 06 00       >                    ld      b,0
 545+ ED4C DD 4C       >                    ld      c,ixh
 545+ ED4E ED 4A       >                    adc    hl,bc
 546+ ED50 CD BC ED                         call	.PlotPixel	                    ;CY+X,CX+Y
 547+ ED53 D1 E1        .Plot5Done:         pop     hl,,de
 548+ ED55              ;--- CX+Y,CX-X ---------------------------------------------;bollocks
 549+ ED55 E5 D5        .Plot6:             push    hl,,de
 550+ ED57                                  CalcNewPointMacro hl, adc, ixl          ;
 550+ ED57             >                    ClearCarryFlag
 550+ ED57 B7          >                        or a
 550+ ED58 06 00       >                    ld      b,0
 550+ ED5A DD 4D       >                    ld      c,ixl
 550+ ED5C ED 4A       >                    adc    hl,bc
 551+ ED5E                                  JumpIfRegIsNotZero  h,.Plot6Done
 551+ ED5E 7C          >                        ld      a,h
 551+ ED5F A7          >                        and     a
 551+ ED60 C2 6E ED    >                        jp	    nz,.Plot6Done
 552+ ED63 EB                               ex      de,hl
 553+ ED64                                  CalcNewPointMacro hl, sbc, ixh          ;
 553+ ED64             >                    ClearCarryFlag
 553+ ED64 B7          >                        or a
 553+ ED65 06 00       >                    ld      b,0
 553+ ED67 DD 4C       >                    ld      c,ixh
 553+ ED69 ED 42       >                    sbc    hl,bc
 554+ ED6B CD BC ED                         call	.PlotPixel	                    ; CY-X,CX+Y
 555+ ED6E D1 E1        .Plot6Done:         pop     hl,,de
 556+ ED70              ;--- CX-Y,CY-X ---------------------------------------------;bollocksC
 557+ ED70 E5 D5        .Plot7:             push    hl,,de
 558+ ED72                                  CalcNewPointMacro hl, sbc, ixl          ;
 558+ ED72             >                    ClearCarryFlag
 558+ ED72 B7          >                        or a
 558+ ED73 06 00       >                    ld      b,0
 558+ ED75 DD 4D       >                    ld      c,ixl
 558+ ED77 ED 42       >                    sbc    hl,bc
 559+ ED79                                  JumpIfRegIsNotZero  h,.Plot7Done
 559+ ED79 7C          >                        ld      a,h
 559+ ED7A A7          >                        and     a
 559+ ED7B C2 89 ED    >                        jp	    nz,.Plot7Done
 560+ ED7E EB                               ex      de,hl
 561+ ED7F                                  CalcNewPointMacro hl, sbc, ixh          ;
 561+ ED7F             >                    ClearCarryFlag
 561+ ED7F B7          >                        or a
 561+ ED80 06 00       >                    ld      b,0
 561+ ED82 DD 4C       >                    ld      c,ixh
 561+ ED84 ED 42       >                    sbc    hl,bc
 562+ ED86 CD BC ED                         call	.PlotPixel	                    ; CY+X,CX-Y
 563+ ED89 D1 E1        .Plot7Done:         pop     hl,,de
 564+ ED8B              ;--- CX-Y,CY+X ---------------------------------------------; bollocks
 565+ ED8B E5 D5        .Plot8:             push    hl,,de
 566+ ED8D                                  CalcNewPointMacro hl, sbc, ixl          ;
 566+ ED8D             >                    ClearCarryFlag
 566+ ED8D B7          >                        or a
 566+ ED8E 06 00       >                    ld      b,0
 566+ ED90 DD 4D       >                    ld      c,ixl
 566+ ED92 ED 42       >                    sbc    hl,bc
 567+ ED94                                  JumpIfRegIsNotZero  h,.Plot8Done
 567+ ED94 7C          >                        ld      a,h
 567+ ED95 A7          >                        and     a
 567+ ED96 C2 A4 ED    >                        jp	    nz,.Plot8Done
 568+ ED99 EB                               ex      de,hl
 569+ ED9A                                  CalcNewPointMacro hl, adc, ixh          ;
 569+ ED9A             >                    ClearCarryFlag
 569+ ED9A B7          >                        or a
 569+ ED9B 06 00       >                    ld      b,0
 569+ ED9D DD 4C       >                    ld      c,ixh
 569+ ED9F ED 4A       >                    adc    hl,bc
 570+ EDA1 CD BC ED                         call	.PlotPixel	                    ; CY-X,CX-Y
 571+ EDA4 D1 E1        .Plot8Done:         pop     hl,,de
 572+ EDA6 D9           .PlotDone:          exx
 573+ EDA7 CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
 574+ EDA9 28 03                            jr z,   .draw_circle_1
 575+ EDAB 19                               add hl,de			; Delta=Delta+D1
 576+ EDAC 18 05                            jr      .draw_circle_2		;
 577+ EDAE 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 578+ EDAF 03                               inc     bc
 579+ EDB0 03                               inc     bc				; D2=D2+2
 580+ EDB1 DD 25                            dec     ixh				; Y=Y-1
 581+ EDB3 03           .draw_circle_2:		inc     bc				; D2=D2+2
 582+ EDB4 03                               inc     bc
 583+ EDB5 13                               inc     de				; D1=D1+2
 584+ EDB6 13                               inc     de
 585+ EDB7 DD 2C                            inc     ixl				; X=X+1
 586+ EDB9 C3 C7 EC                         jp      .CircleLoop
 587+ EDBC 7A           .PlotPixel:         ld      a,d             ; filter x> 256 or negative
 588+ EDBD A7                               and     a
 589+ EDBE C0                               ret     nz
 590+ EDBF 7C                               ld      a,h             ; filter y > 256 or negative
 591+ EDC0 A7                               and     a
 592+ EDC1 C0                               ret     nz
 593+ EDC2 7D                               ld      a,l             ; filter y > 127
 594+ EDC3 E6 80                            and     $80
 595+ EDC5 C0                               ret     nz
 596+ EDC6 3E 00        .PlotColour:        ld		a,0             ; This was originally indirect, where as it neeed to be value
 597+ EDC8 D5 C5 E5                         push	de,,bc,,hl
 598+ EDCB 45                               ld      b,l             ; At this point de = x and hl = y
 599+ EDCC 4B                               ld      c,e
 600+ EDCD                                  l2_plot_macro; call 	l2_plot_pixel_y_test
 600+ EDCD 78          >                        ld      a,b
 600+ EDCE             >                        JumpIfAGTENusng 192 ,.NoPlot
 600+ EDCE FE C0       >                        cp     192
 600+ EDD0 D2 DC ED    >                        jp		nc,.NoPlot
 600+ EDD3 69          >                        ld      l,c
 600+ EDD4 CD 68 E0    >                        call    asm_l2_row_bank_select
 600+ EDD7 67          >                        ld      h,a
 600+ EDD8 3A B5 E2    >                        ld      a,(line_gfx_colour)
 600+ EDDB 77          >                        ld      (hl),a
 600+ EDDC             >.NoPlot:
 601+ EDDC E1 C1 D1                         pop		de,,bc,,hl
 602+ EDDF                                  ClearCarryFlag
 602+ EDDF B7          >                        or a
 603+ EDE0 C9                               ret
 604+ EDE1 7C           .circleSinglepixel: ld      a,h             ; as its 1 pixel if h or d are non zero then its off screen
 605+ EDE2 B2                               or      d
 606+ EDE3 C0                               ret     nz
 607+ EDE4 CB 7B                            bit     7,e             ; and if Y is > 127 then off screen , bit is 8 states like ld a,e and a
 608+ EDE6 C0                               ret     nz
 609+ EDE7 78                               ld      a,b             ; a = colour
 610+ EDE8 43                               ld      b,e             ; b = y
 611+ EDE9 4D                               ld      c,l             ; c = x
 612+ EDEA CD B6 E2                         call    l2_plot_pixel
 613+ EDED C9                               ret
# file closed: ./Layer2Graphics/layer2_plot_circle.asm
1328  EDEE                  INCLUDE "./Layer2Graphics/layer2_plot_circle_fill.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle_fill.asm
   1+ EDEE
   2+ EDEE 00           l2_circle_dblx		DB 0
   3+ EDEF 00           l2_circle_dbly		DB 0
   4+ EDF0
   5+ EDF0              ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
   6+ EDF0              ; Note this code currently does not process BC
   7+ EDF0 7B           l2_draw_circle_fill:    ld		a,e
   8+ EDF1 32 87 EE                             ld		(.LineColour+1),a
   9+ EDF4 7A                                   ld		a,d								; get radius
  10+ EDF5 A7                                   and		a
  11+ EDF6 C8                                   ret		z
  12+ EDF7 FE 01                                cp		1
  13+ EDF9 CA 84 EC                             jp		z,CircleSinglepixel
  14+ EDFC ED 43 26 EE                          ld		(.Line1+1),bc					; save origin into DE reg in code
  15+ EE00 DD 67                                ld		ixh,a							; ixh = raidus (x)
  16+ EE02 DD 2E 00                             ld		ixl,0							; ihy = y
  17+ EE05 26 00        .calcd:	                ld		h,0
  18+ EE07 6F                                   ld		l,a
  19+ EE08 29                                   add		hl,hl							; hl = r * 2
  20+ EE09 EB                                   ex		de,hl							; de = r * 2
  21+ EE0A 21 03 00                             ld		hl,3
  22+ EE0D A7                                   and		a
  23+ EE0E ED 52                                sbc		hl,de							; hl = 3 - (r * 2)
  24+ EE10 44                                   ld		b,h
  25+ EE11 4D                                   ld		c,l								; bc = 3 - (r * 2)
  26+ EE12 21 01 00     .calcdelta              ld		hl,1
  27+ EE15 16 00                                ld		d,0
  28+ EE17 DD 5D                                ld		e,ixl
  29+ EE19 A7                                   and		a
  30+ EE1A ED 52                                sbc		hl,de
  31+ EE1C 11 01 00     .Setde1	                ld		de,1
  32+ EE1F DD 7C        .CircleLoop:            ld		a,ixh
  33+ EE21 DD BD                                cp		ixl
  34+ EE23 D8                                   ret		c
  35+ EE24 D9           .ProcessLoop:	        exx
  36+ EE25 11 00 00     .Line1:                 ld		de,0
  37+ EE28 7B                                   ld 		a,e
  38+ EE29 DD 95                                sub 	ixl
  39+ EE2B 4F                                   ld 		c,a
  40+ EE2C 7A                                   ld 		a,d
  41+ EE2D DD 84                                add 	a,ixh
  42+ EE2F 47                                   ld		b,a
  43+ EE30                                                  DISPLAY "TODO: add double x calc"
  44+ EE30                                      ;; TODO ADD DOUBLE X CALC
  45+ EE30 D5                                   push	de
  46+ EE31 DD 55                                ld		d,ixl
  47+ EE33 CB 22                                sla		d
  48+ EE35 CD 82 EE                             call	.PlotLine			;CX-X,CY+Y
  49+ EE38 D1                                   pop		de
  50+ EE39 7B           .Line2:                 ld 		a,e
  51+ EE3A DD 95                                sub		ixl
  52+ EE3C 4F                                   ld 		c,a
  53+ EE3D 7A                                   ld 		a,d
  54+ EE3E DD 94                                sub 	ixh
  55+ EE40 47                                   ld 		b,a
  56+ EE41                                      ;; TODO ADD DOUBLE X CALC
  57+ EE41 D5                                   push	de
  58+ EE42 DD 55                                ld		d,ixl
  59+ EE44 CB 22                                sla		d
  60+ EE46 CD 82 EE                             call	.PlotLine			;CX-X,CY-Y
  61+ EE49 D1                                   pop		de
  62+ EE4A 7B           .Line3:	                ld 		a,e
  63+ EE4B DD 94                                sub		ixh
  64+ EE4D 4F                                   ld 		c,a
  65+ EE4E 7A                                   ld 		a,d
  66+ EE4F DD 85                                add 	a,ixl
  67+ EE51 47                                   ld 		b,a
  68+ EE52                                      ;; TODO ADD DOUBLE Y CALC
  69+ EE52 D5                                   push	de
  70+ EE53 DD 54                                ld		d,ixh
  71+ EE55 CB 22                                sla		d
  72+ EE57 CD 82 EE                             call	.PlotLine			;CX-Y,CY+x
  73+ EE5A D1                                   pop		de
  74+ EE5B 7B           .Line4:	                ld 		a,e
  75+ EE5C DD 94                                sub		ixh
  76+ EE5E 4F                                   ld 		c,a
  77+ EE5F 7A                                   ld 		a,d
  78+ EE60 DD 95                                sub 	ixl
  79+ EE62 47                                   ld 		b,a
  80+ EE63                                      ;; TODO ADD DOUBLE Y CALC
  81+ EE63 D5                                   push	de
  82+ EE64 DD 54                                ld		d,ixh
  83+ EE66 CB 22                                sla		d
  84+ EE68 CD 82 EE                             call	.PlotLine			;CX-Y,CY+x
  85+ EE6B D1                                   pop		de
  86+ EE6C D9                                   exx
  87+ EE6D CB 7C        .IncrementCircle:	    bit 7,h				; Check for Hl<=0
  88+ EE6F 28 03                                jr z,.draw_circle_1
  89+ EE71 19                                   add hl,de			; Delta=Delta+D1
  90+ EE72 18 05                                jr .draw_circle_2		;
  91+ EE74 09           .draw_circle_1:		    add hl,bc			; Delta=Delta+D2
  92+ EE75 03                                   inc bc
  93+ EE76 03                                   inc bc				; D2=D2+2
  94+ EE77 DD 25                                dec ixh				; Y=Y-1
  95+ EE79 03           .draw_circle_2:		    inc bc				; D2=D2+2
  96+ EE7A 03                                   inc bc
  97+ EE7B 13                                   inc de				; D1=D1+2
  98+ EE7C 13                                   inc de
  99+ EE7D DD 2C                                inc ixl				; X=X+1
 100+ EE7F C3 1F EE                             jp .CircleLoop
 101+ EE82 D5 C5 E5 F5  .PlotLine:              push	de,,bc,,hl,,af
 102+ EE86 3E 00        .LineColour:	        ld		a,0         ; circle colur
 103+ EE88 5F                                   ld      e,a
 104+ EE89 CD 84 E4                             call 	l2_draw_horz_line
 105+ EE8C F1 E1 C1 D1                          pop     de,,bc,,hl,,af
 106+ EE90 C9                                   ret
 107+ EE91
 108+ EE91              ; ">l2_draw_clipped_circle HL = Center X 2's c, DE = Center Y 2's , c = radius, b = colour"
 109+ EE91              l2_draw_clipped_circle_filled:
 110+ EE91 78                               ld      a,b                             ; save Colour
 111+ EE92 32 8C EF                         ld		(.PlotColour+1),a
 112+ EE95 79                               ld		a,c								; get radius
 113+ EE96                                  ReturnIfAIsZero
 113+ EE96 A7          >                        and     a
 113+ EE97 C8          >                        ret     z
 114+ EE98                                  JumpIfAEqNusng  1, .circleSinglepixel
 114+ EE98 FE 01       >                        cp     1
 114+ EE9A CA 92 EF    >                        jp      z,.circleSinglepixel
 115+ EE9D ED 53 CA EE                      ld		(.Plot1Y+1),de					; save origin into DE and HL
 116+ EEA1 22 CD EE                         ld      (.Plot1X+1),hl                  ; .
 117+ EEA4                                  DISPLAY "TODO : IXH and IXL need to be 16 bit and in IX and IY"
 118+ EEA4 DD 67                            ld		ixh,a							; ixh = x = raidus
 119+ EEA6 DD 2E 00                         ld		ixl,0						    ; ixl = y = error
 120+ EEA9 26 00        .calcd:	            ld		h,0                             ; hl = radius
 121+ EEAB 6F                               ld		l,a                             ; raidius is still in a at this point
 122+ EEAC 29                               add		hl,hl							; hl = r * 2
 123+ EEAD EB                               ex		de,hl							; de = r * 2
 124+ EEAE 21 03 00                         ld		hl,3                            ; hl = 3 - (r * 2)
 125+ EEB1                                  ClearCarryFlag                          ; .
 125+ EEB1 B7          >                        or a
 126+ EEB2 ED 52                            sbc		hl,de							; .
 127+ EEB4 44 4D                            ld      bc,hl                           ; bc = 3 - (r * 2)
 128+ EEB6 21 01 00     .calcdelta:         ld		hl,1                            ; hl = 1
 129+ EEB9 16 00                            ld		d,0                             ; de = ixl (error)
 130+ EEBB DD 5D                            ld		e,ixl                           ;
 131+ EEBD                                  ClearCarryFlag                          ;
 131+ EEBD B7          >                        or a
 132+ EEBE ED 52                            sbc		hl,de                           ; hl = 1 - error
 133+ EEC0 11 01 00     .Setde1:            ld		de,1                            ; de = 1
 134+ EEC3              .CircleLoop:        ReturnIfRegLTNusng ixh, ixl             ; if radius > ixl counter
 134+ EEC3 DD 7C       >                        ld      a,ixh
 134+ EEC5 DD BD       >                        cp      ixl
 134+ EEC7 D8          >                        ret	    c
 135+ EEC8 D9           .ProcessLoop:	    exx                                     ; save all bc,de,hl registers
 136+ EEC9              ; For line drawing we can go from left to right in a single call
 137+ EEC9              ;--- from CX-X to CX+X, CY+Y -------------------------------;
 138+ EEC9 11 00 00     .Plot1Y:            ld		de,0                            ; this is Y coord
 139+ EECC 21 00 00     .Plot1X:            ld      hl,0                            ; this is x coord
 140+ EECF E5 D5        .Plot1:             push    hl,,de                          ; push X then Y  on top Stack+2
 141+ EED1                                  CalcNewPointMacro hl, sbc, ixh          ; hl = CX - X
 141+ EED1             >                    ClearCarryFlag
 141+ EED1 B7          >                        or a
 141+ EED2 06 00       >                    ld      b,0
 141+ EED4 DD 4C       >                    ld      c,ixh
 141+ EED6 ED 42       >                    sbc    hl,bc
 142+ EED8 EB                               ex      de,hl                           ; de = CX - X
 143+ EED9 ED 53 FD EE                      ld      (.LoadDEXStart1+1),de           ; save it for Plot 2 as well
 144+ EEDD                                  CalcNewPointMacro hl, adc, ixl          ; hl = CY + Y
 144+ EEDD             >                    ClearCarryFlag
 144+ EEDD B7          >                        or a
 144+ EEDE 06 00       >                    ld      b,0
 144+ EEE0 DD 4D       >                    ld      c,ixl
 144+ EEE2 ED 4A       >                    adc    hl,bc
 145+ EEE4 06 00                            ld      b,0                             ; Now we have calculated D is bc
 146+ EEE6 DD 4C                            ld      c,ixh                           ;
 147+ EEE8                                  ShiftBCLeft1                            ;
 147+ EEE8 CB 21       >			   sla c
 147+ EEEA CB 10       >			   rl  b
 148+ EEEC ED 43 00 EF                      ld      (.LoadBCLength1+1),bc            ; self modifying to optimise laod on line 2
 149+ EEF0 CD 51 EF                         call	.PlotLine               		; de = start X, hl= Y line, bc = length
 150+ EEF3 E1           .Plot1Done:         pop     hl                              ; Stack+1 get cy from stack into hl to save an ex as we have pre calculated x positions
 151+ EEF4              ;--- from CX-X to CX+X, CY-Y -------------------------------;
 152+ EEF4 E5           .Plot2:             push    hl                              ; Stack+2 put cy back on stack so it holds cy stack already holds cx
 153+ EEF5                                  CalcNewPointMacro hl, sbc, ixl          ; now we have CY-Y in hl
 153+ EEF5             >                    ClearCarryFlag
 153+ EEF5 B7          >                        or a
 153+ EEF6 06 00       >                    ld      b,0
 153+ EEF8 DD 4D       >                    ld      c,ixl
 153+ EEFA ED 42       >                    sbc    hl,bc
 154+ EEFC 11 00 00     .LoadDEXStart1:     ld      de,0                            ; de is loaded from above via self modiying code with start X
 155+ EEFF 01 00 00     .LoadBCLength1:     ld      bc,0                            ; bc is loaded from above via self modifying code with length
 156+ EF02 CD 51 EF                         call	.PlotLine                       ;
 157+ EF05 D1 E1        .Plot2Done:         pop     hl,,de                          ; Stack+0 now hl = cx, de = cy
 158+ EF07              ;--- from CX-Y to CX+Y, CY+X -------------------------------;
 159+ EF07 D5           .Plot3:             push    de                              ; Stack + 1 we need cy for final plot calculation
 160+ EF08                                  CalcNewPointMacro hl, sbc, ixl          ; hl = CX - Y
 160+ EF08             >                    ClearCarryFlag
 160+ EF08 B7          >                        or a
 160+ EF09 06 00       >                    ld      b,0
 160+ EF0B DD 4D       >                    ld      c,ixl
 160+ EF0D ED 42       >                    sbc    hl,bc
 161+ EF0F EB                               ex      de,hl                           ; de = CX - Y
 162+ EF10 ED 53 33 EF                      ld      (.LoadDEXStart2+1),de             ; save it for Plot 2 as well
 163+ EF14                                  CalcNewPointMacro hl, adc, ixh          ; hl = CY + X
 163+ EF14             >                    ClearCarryFlag
 163+ EF14 B7          >                        or a
 163+ EF15 06 00       >                    ld      b,0
 163+ EF17 DD 4C       >                    ld      c,ixh
 163+ EF19 ED 4A       >                    adc    hl,bc
 164+ EF1B 06 00                            ld      b,0                             ; Now we have calculated D is bc
 165+ EF1D DD 4D                            ld      c,ixl                           ;
 166+ EF1F                                  ShiftBCLeft1                            ;
 166+ EF1F CB 21       >			   sla c
 166+ EF21 CB 10       >			   rl  b
 167+ EF23 ED 43 36 EF                      ld      (.LoadBCLength2+1),bc            ; self modifying to optimise laod on line 2
 168+ EF27 CD 51 EF                         call	.PlotLine               		; de = start X, hl= Y line, bc = length
 169+ EF2A E1           .Plot3Done:         pop     hl                              ; Stack + 0 get cy from stack into hl to save an ex as we have pre calculated x positions
 170+ EF2B              ;--- from CX-X to CX+X, CY-Y -------------------------------;
 171+ EF2B              .Plot4a:            CalcNewPointMacro hl, sbc, ixh          ; now we have CY-X in hl
 171+ EF2B             >                    ClearCarryFlag
 171+ EF2B B7          >                        or a
 171+ EF2C 06 00       >                    ld      b,0
 171+ EF2E DD 4C       >                    ld      c,ixh
 171+ EF30 ED 42       >                    sbc    hl,bc
 172+ EF32 11 00 00     .LoadDEXStart2:     ld      de,0                            ; de is loaded from above via self modiying code with start X
 173+ EF35 01 00 00     .LoadBCLength2:     ld      bc,0                            ; bc is loaded from above via self modifying code with length
 174+ EF38 CD 51 EF                         call	.PlotLine                       ;
 175+ EF3B D9           .PlotDone:          exx                                     ; get back data from alternate registers
 176+ EF3C CB 7C        .IncrementCircle:	bit     7,h			                  	; Check for Hl<=0
 177+ EF3E 28 03                            jr z,   .draw_circle_1
 178+ EF40 19                               add hl,de			                    ; Delta=Delta+D1
 179+ EF41 18 05                            jr      .draw_circle_2		            ;
 180+ EF43 09           .draw_circle_1:		add     hl,bc		                    ; Delta=Delta+D2
 181+ EF44 03                               inc     bc
 182+ EF45 03                               inc     bc			                    ; D2=D2+2
 183+ EF46 DD 25                            dec     ixh			                    ; Y=Y-1
 184+ EF48 03           .draw_circle_2:		inc     bc			                    ; D2=D2+2
 185+ EF49 03                               inc     bc
 186+ EF4A 13                               inc     de			                    ; D1=D1+2
 187+ EF4B 13                               inc     de
 188+ EF4C DD 2C                            inc     ixl			                    ; X=X+1
 189+ EF4E C3 C3 EE                         jp      .CircleLoop
 190+ EF51              ;-- PERFORM THE LINE DRAW ----------------------------------;
 191+ EF51              ; comes in with de = left x , hl = y, bc = length
 192+ EF51              ; Note bc must be +ve < 32768
 193+ EF51              .PlotLine:
 194+ EF51 7C           .IsYOnScreen:       ld      a,h                             ; if y > 255 or < 0 then no line to draw
 195+ EF52 A7                               and     a                               ;
 196+ EF53 C0                               ret     nz                              ;
 197+ EF54 7D                               ld      a,l                             ;
 198+ EF55 A7                               and     a                               ;
 199+ EF56 F8                               ret     m                               ; if m set then y must be > 127
 200+ EF57              ;-- now check X coordinate, if X < 256 then skip x position clip
 201+ EF57 7A           .IsXOffRight:       ld      a,d                             ; if x >255
 202+ EF58 A7                               and     a
 203+ EF59 28 19                            jr      z,.NoLeftClip                   ; if high is not set then no X clip
 204+ EF5B              ;-- if X > 255 then off screen so just skip line
 205+ EF5B F0           .LeftClip:          ret     p                               ; if its > 255 then no line
 206+ EF5C              ;-- if its off the left then add distance, if this is < 0 then off screen skip
 207+ EF5C E5           .IsTotallyOffLeft:  push    hl                              ; if X pos + length <0 then no line
 208+ EF5D 62 6B                            ld      hl,de                           ; .
 209+ EF5F                                  ClearCarryFlag                          ; .
 209+ EF5F B7          >                        or a
 210+ EF60              ;    but also this calculation gives us the line length if x is clipped to 90
 211+ EF60 ED 4A                            adc     hl,bc                           ; .
 212+ EF62 44 4D                            ld      bc,hl                           ; save the result in HL as this is also line length from hl = 0
 213+ EF64 E1                               pop     hl                              ; .
 214+ EF65 F8                               ret     m                               ; if x + distance < 0 then off screen skip
 215+ EF66              ;-- now as its on screen but clipped x < 0 we can just draw a line from 0 to x+d, maxed at x+d = 255
 216+ EF66 11 00 00     .ClippedSpanX:      ld      de,0                            ; if off left X = 0, bc already calcualted above in ADC
 217+ EF69 78                               ld      a,b                             ; if bc < 255 then good
 218+ EF6A A7                               and     a
 219+ EF6B CA 88 EF                         jp      z,.NoPopPlotColour              ;
 220+ EF6E 01 FF 00                         ld      bc,255                          ; max length
 221+ EF71 C3 88 EF                         jp      .NoPopPlotColour                ; we can now just draw
 222+ EF74              ;-- No left side clipping needed so we just need to work out if x + d > 255
 223+ EF74 E5           .NoLeftClip:        push    hl                              ; STACK+1 if corrected x + length < 256 then
 224+ EF75 62 6B                            ld      hl,de                           ; just plot
 225+ EF77 09                               add     hl,bc
 226+ EF78 7C                               ld      a,h
 227+ EF79 B7                               or      a
 228+ EF7A E1                               pop     hl
 229+ EF7B CA 88 EF                         jp      z,.NoPopPlotColour
 230+ EF7E              ;-- x + d > 255 so we plot from x to distance 255 - x
 231+ EF7E E5           .LengthClip:        push    hl
 232+ EF7F 21 FF 00                         ld      hl,255
 233+ EF82                                  ClearCarryFlag
 233+ EF82 B7          >                        or a
 234+ EF83 ED 52                            sbc     hl,de                           ; now hl = corrected length
 235+ EF85 44 4D                            ld      bc,hl
 236+ EF87              ;-- This entry point is if there is hl on the stack
 237+ EF87 E1           .PopHLPlotColour:   pop     hl
 238+ EF88 51           .NoPopPlotColour:   ld      d,c             ; d = length
 239+ EF89 4B                               ld      c,e             ; c = start X
 240+ EF8A 45                               ld      b,l             ; b = row Y
 241+ EF8B 1E 00        .PlotColour:        ld		e,0             ; This was originally indirect, where as it neeed to be value
 242+ EF8D CD 77 E4                         call    l2_draw_horz_dma_bank
 243+ EF90                                  ClearCarryFlag
 243+ EF90 B7          >                        or a
 244+ EF91 C9                               ret
 245+ EF92 7C           .circleSinglepixel: ld      a,h             ; as its 1 pixel if h or d are non zero then its off screen
 246+ EF93 B2                               or      d
 247+ EF94 C0                               ret     nz
 248+ EF95 CB 7B                            bit     7,e             ; and if Y is > 127 then off screen , bit is 8 states like ld a,e and a
 249+ EF97 C0                               ret     nz
 250+ EF98 78                               ld      a,b             ; a = colour
 251+ EF99 43                               ld      b,e             ; b = y
 252+ EF9A 4D                               ld      c,l             ; c = x
 253+ EF9B CD B6 E2                         call    l2_plot_pixel
 254+ EF9E C9                               ret
# file closed: ./Layer2Graphics/layer2_plot_circle_fill.asm
1329  EF9F                  INCLUDE "./Layer2Graphics/l2_draw_any_line.asm"
# file opened: ./Layer2Graphics/l2_draw_any_line.asm
   1+ EF9F
   2+ EF9F FF FF        starty                  DW     $FFFF
   3+ EFA1 FF FF        endy                    DW     $FFFF
   4+ EFA3 CF           traingleColor           DB     $CF
   5+ EFA4 00 00 00...  SaveArrayS1             DS     128*2
   6+ F0A4 00 00 00...  SaveArrayS2             DS     128*2
   7+ F1A4
   8+ F1A4                  INCLUDE "./Layer2Graphics/BBCEliteDirectMappingLL118.asm"
# file opened: ././Layer2Graphics/BBCEliteDirectMappingLL118.asm
   1++F1A4                              IFDEF DEBUG_LL122_DIRECT
   2++F1A4 ~                                    ; (Y X) = (S R) * Q
   3++F1A4 ~                                    ; yxregpair = (20 * 140)/256 = 16d 10h
   4++F1A4 ~            Debug_LL122_6502:       ld      hl, 20
   4++F1A4 ~             ld      (SRvarPair),hl
   5++F1A4 ~                                    ld      a,  140
   5++F1A4 ~             ld      (Qvar),a
   6++F1A4 ~                                    call    LL122_6502  ; -10                               >> PASS
   7++F1A4 ~                                    ;break
   8++F1A4 ~                                    ; yxregpair = 20 * 140 = 17d 11h
   9++F1A4 ~                                    ld      hl, 20
   9++F1A4 ~             ld      (SRvarPair),hl
  10++F1A4 ~                                    ld      a,  230
  10++F1A4 ~             ld      (Qvar),a
  11++F1A4 ~                                    call    LL122_6502  ; -17                               >> PASS
  12++F1A4 ~                                    ret
  13++F1A4                              ENDIF
  14++F1A4
  15++F1A4              ;--  The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2
  16++F1A4
  17++F1A4                              IFDEF DEBUG_LL121_DIRECT
  18++F1A4 ~                                    ; (Y X) = (S R) / Q
  19++F1A4 ~                                    ; yxregpair = 20 / 140 = 20*256 / 140 = 36d, 24h
  20++F1A4 ~            Debug_LL121_6502:       ld      hl, 20
  20++F1A4 ~             ld      (SRvarPair),hl
  21++F1A4 ~                                    ld      a,  140
  21++F1A4 ~             ld      (Qvar),a
  22++F1A4 ~                                    call    LL121_6502  ; -36                               >> PASS
  23++F1A4 ~                                    ;break
  24++F1A4 ~                                    ; yxregpair =  20 / 140 = 20*256 / 230 = 22d, 11h
  25++F1A4 ~                                    ld      hl, 20
  25++F1A4 ~             ld      (SRvarPair),hl
  26++F1A4 ~                                    ld      a,  230
  26++F1A4 ~             ld      (Qvar),a
  27++F1A4 ~                                    call    LL121_6502  ; -22                               >> PASS
  28++F1A4 ~                                    ;break
  29++F1A4 ~                                    ret
  30++F1A4                              ENDIF
  31++F1A4
  32++F1A4                              IFDEF DEBUG_LL129_DIRECT
  33++F1A4 ~            Debug_LL129_6502:       ld      hl,-20
  33++F1A4 ~             ld     (SRvarPair),hl
  34++F1A4 ~                                    ld      a, 0
  34++F1A4 ~             ld     (XX12p3),a
  35++F1A4 ~                                    ld      a, 10
  35++F1A4 ~             ld     (XX12p2),a
  36++F1A4 ~                                    call    LL129_6502  ; expect q = 10, a = $FF SR = 20    >> PASS
  37++F1A4 ~                                    ;break
  38++F1A4 ~                                    ld      hl,20
  38++F1A4 ~             ld     (SRvarPair),hl
  39++F1A4 ~                                    ld      a, 0
  39++F1A4 ~             ld     (XX12p3),a
  40++F1A4 ~                                    ld      a, 40
  40++F1A4 ~             ld     (XX12p2),a
  41++F1A4 ~                                    call    LL129_6502  ; expect q = 40, a = 00 SR = 20     >> PASS
  42++F1A4 ~                                    ;break
  43++F1A4 ~                                    ld      hl,40
  43++F1A4 ~             ld     (SRvarPair),hl
  44++F1A4 ~                                    ld      a, $FF
  44++F1A4 ~             ld     (XX12p3),a
  45++F1A4 ~                                    ld      a, 40
  45++F1A4 ~             ld     (XX12p2),a
  46++F1A4 ~                                    call    LL129_6502  ; expect q = 40, a = $FF SR = 40    >> PASS
  47++F1A4 ~                                    ;break
  48++F1A4 ~                                    ld      hl,-40
  48++F1A4 ~             ld     (SRvarPair),hl
  49++F1A4 ~                                    ld      a, $FF
  49++F1A4 ~             ld     (XX12p3),a
  50++F1A4 ~                                    ld      a, 40
  50++F1A4 ~             ld     (XX12p2),a
  51++F1A4 ~                                    call    LL129_6502  ; expect q = 40, a = 00 SR = 40     >> PASS
  52++F1A4 ~                                    ;break
  53++F1A4 ~                                    ret
  54++F1A4                              ENDIF
  55++F1A4
  56++F1A4                              IFDEF DEBUG_LL120_DIRECT
  57++F1A4 ~            Debug_LL120_6502:       ld      a,0
  57++F1A4 ~             ld      (Tvar),a                  ; SLOPE 0 so calcualte YX = S X1lo * XX12+2
  58++F1A4 ~                                    ld      hl,20
  58++F1A4 ~             ld a,h
  58++F1A4 ~              ld (Svar),a
  58++F1A4 ~              ld a,l
  58++F1A4 ~              ld (XX1510),a  ; S x1lo = 20
  59++F1A4 ~                                    ld      a,140
  59++F1A4 ~             ld      (XX12p2),a                ; XX12+2  140, gradient 0.546875
  60++F1A4 ~                                    ld      a,0
  60++F1A4 ~             ld      (XX12p3),a                ; SLOPE DIRECTION so -ve result
  61++F1A4 ~                                    ; post LL129 Q = 140 a = 00  SR YX = (20 * 140) /256 * -1 = -10
  62++F1A4 ~                                    call    LL120_6502  ; Expect mulitply so (Y X) -10      >> PASS
  63++F1A4 ~                                    ;break
  64++F1A4 ~                                    ld      a,0
  64++F1A4 ~             ld      (Tvar),a                  ; SLOPE 0 so calcualte YX = S X1lo * XX12+2
  65++F1A4 ~                                    ld      hl,20
  65++F1A4 ~             ld a,h
  65++F1A4 ~              ld (Svar),a
  65++F1A4 ~              ld a,l
  65++F1A4 ~              ld (XX1510),a  ; S x1lo = 20
  66++F1A4 ~                                    ld      a,140
  66++F1A4 ~             ld      (XX12p2),a                ; XX12+2 140, gradient 0.546875
  67++F1A4 ~                                    ld      a,$FF
  67++F1A4 ~             ld      (XX12p3),a                ; sLOPE DIRECTION so +ve result
  68++F1A4 ~                                    ; post LL129 Q = 140 a = FF  SR = 20  YX = (20 * 140) /256 = 10
  69++F1A4 ~                                    call    LL120_6502  ; Expect / so (Y X)10                   >> PASS
  70++F1A4 ~                                    ;break
  71++F1A4 ~                                    ld      a,$FF
  71++F1A4 ~             ld      (Tvar),a                  ; SLOPE <> 0 so calcualte YX = S X1lo / XX12+2
  72++F1A4 ~                                    ld      hl,20
  72++F1A4 ~             ld a,h
  72++F1A4 ~              ld (Svar),a
  72++F1A4 ~              ld a,l
  72++F1A4 ~              ld (XX1510),a  ; S x1lo = 20
  73++F1A4 ~                                    ld      a,140
  73++F1A4 ~             ld      (XX12p2),a                ; XX12+2 140, gradient 0.546875
  74++F1A4 ~                                    ld      a,$00
  74++F1A4 ~             ld      (XX12p3),a                ; sLOPE DIRECTION  so -ve result
  75++F1A4 ~                                    ; post LL129 Q = 140 a = 00  SR = 20  YX = (20 *256 / 140) = -36
  76++F1A4 ~                                    call    LL120_6502  ; Expect / so (Y X)-36
  77++F1A4 ~                                    ld      a,$FF
  77++F1A4 ~             ld      (Tvar),a                  ; SLOPE <> 0 so calcualte YX = S X1lo / XX12+2
  78++F1A4 ~                                    ld      hl,20
  78++F1A4 ~             ld a,h
  78++F1A4 ~              ld (Svar),a
  78++F1A4 ~              ld a,l
  78++F1A4 ~              ld (XX1510),a  ; S x1lo = 20
  79++F1A4 ~                                    ld      a,140
  79++F1A4 ~             ld      (XX12p2),a                ; XX12+2 140, gradient 0.546875
  80++F1A4 ~                                    ld      a,$FF
  80++F1A4 ~             ld      (XX12p3),a                ; sLOPE DIRECTION  so +ve result
  81++F1A4 ~                                    ; post LL129 Q = 140 a = 00 SR = 20 YX = (20 *256 / 140) = 36
  82++F1A4 ~                                    call    LL120_6502  ; Expect / so (Y X)  36                   >> PASS
  83++F1A4 ~                                    ret
  84++F1A4                              ENDIF
  85++F1A4              ;----------------------------------------------------------------------------------------------------------------------------
  86++F1A4              ;-- Calculate the following:
  87++F1A4              ;--         * If T = 0, this is a shallow slope, so calculate (Y X) = (S R) / XX12+2
  88++F1A4              ;--         * If T <> 0, this is a steep slope, so calculate (Y X) = (S R) * XX12+2
  89++F1A4              ;--             giving (Y X) the opposite sign to the slope direction in XX12+3.
  90++F1A4                              IFDEF DEBUG_LL123_DIRECT
  91++F1A4 ~            Debug_LL123_6502:       ld      a,$00
  91++F1A4 ~             ld      (Tvar),a                  ; SLOPE 0 (Y X) = (S R) / XX12+2
  92++F1A4 ~                                    ld      hl,20
  92++F1A4 ~             ld      (SRvarPair),hl
  93++F1A4 ~                                    ld      a,140
  93++F1A4 ~             ld      (XX12p2),a                ; XX12+2 gradient 0.546875
  94++F1A4 ~                                    ld      a,0
  94++F1A4 ~             ld      (XX12p3),a                ; sLOPE DIRECTION
  95++F1A4 ~                                    call    LL123_6502  ; Expect * so (Y X)-36 = (20 / 140 ) * 256 * -1 PASS
  96++F1A4 ~                                    ;break
  97++F1A4 ~                                    ld      a,$00
  97++F1A4 ~             ld      (Tvar),a                  ; SLOPE 0 (Y X) = (S R) / XX12+2
  98++F1A4 ~                                    ld      hl,20
  98++F1A4 ~             ld      (SRvarPair),hl
  99++F1A4 ~                                    ld      a,140
  99++F1A4 ~             ld      (XX12p2),a                ; XX12+2 gradient 0.546875
 100++F1A4 ~                                    ld      a,$FF
 100++F1A4 ~             ld      (XX12p3),a                ; sLOPE DIRECTION
 101++F1A4 ~                                    call    LL123_6502  ; Expect * so (Y X)36 = (20 / 140 ) * 256  PASS
 102++F1A4 ~                                    ;break
 103++F1A4 ~                                    ld      a,$FF
 103++F1A4 ~             ld      (Tvar),a                  ; SLOPE <> 0 (Y X) = (S R) * XX12+2
 104++F1A4 ~                                    ld      hl,20
 104++F1A4 ~             ld      (SRvarPair),hl
 105++F1A4 ~                                    ld      a,140
 105++F1A4 ~             ld      (XX12p2),a                ; XX12+2 gradient 0.546875
 106++F1A4 ~                                    ld      a,$00
 106++F1A4 ~             ld      (XX12p3),a                ; sLOPE DIRECTION
 107++F1A4 ~                                    call    LL123_6502  ; Expect / so (Y X)-10 (20 * 140 ) / 256 * -1 PASS
 108++F1A4 ~                                    ld      a,$FF
 108++F1A4 ~             ld      (Tvar),a                  ; SLOPE <> 0 (Y X) = (S R) * XX12+2
 109++F1A4 ~                                    ld      hl,20
 109++F1A4 ~             ld      (SRvarPair),hl
 110++F1A4 ~                                    ld      a,140
 110++F1A4 ~             ld      (XX12p2),a                ; XX12+2 gradient 0.546875
 111++F1A4 ~                                    ld      a,$FF
 111++F1A4 ~             ld      (XX12p3),a                ; sLOPE DIRECTION
 112++F1A4 ~                                    call    LL123_6502  ; Expect / so (Y X) 10 (20 * 140 ) / 256  PASS
 113++F1A4 ~                                    ret
 114++F1A4                              ENDIF
 115++F1A4
 116++F1A4                              IFDEF DEBUG_LL118_DIRECT
 117++F1A4 ~            Debug_LL118_6502:       ld      a,$FF
 117++F1A4 ~             ld      (Tvar),a                  ; SLOPE FF so steep
 118++F1A4 ~                                    ld      hl,-20
 118++F1A4 ~             ld      (XX1510),hl               ; x1 = -20
 119++F1A4 ~                                    ld      hl,-20
 119++F1A4 ~             ld      (XX1532),hl               ; y1 = -20
 120++F1A4 ~                                    ld      a,120
 120++F1A4 ~             ld      (XX12p2),a                ; XX12+2 = 120 (120/256) = 0.46875
 121++F1A4 ~                                    ld      a,0
 121++F1A4 ~             ld      (XX12p3),a                ; Slope Direction so TL to BR
 122++F1A4 ~                                    ; -20, -20 steep TL>BR, gradient 120/256: Dir -1 so
 123++F1A4 ~                                    call    LL118_6502  ; Expect * so x = 0 y =  -20 + (-20/(120/256)) = 22, x1 = 0 so stop there PASS
 124++F1A4 ~                                    ;break
 125++F1A4 ~
 126++F1A4 ~                                    ld      a,$FF
 126++F1A4 ~             ld      (Tvar),a                  ; SLOPE FF so steep
 127++F1A4 ~                                    ld      hl,-30
 127++F1A4 ~             ld      (XX1510),hl               ; x1 = -20
 128++F1A4 ~                                    ld      hl,-20
 128++F1A4 ~             ld      (XX1532),hl               ; y1 = -20
 129++F1A4 ~                                    ld      a,60
 129++F1A4 ~             ld      (XX12p2),a                ; XX12+2 = 120 (120/256) = 0.46875
 130++F1A4 ~                                    ld      a,0
 130++F1A4 ~             ld      (XX12p3),a                ; Slope Direction so TL to BR
 131++F1A4 ~                                    ; -20, -20 steep TL>BR, gradient 120/256: Dir -1 so
 132++F1A4 ~                                    call    LL118_6502  ; Expect * so 108,0  PASS (fixed carry flag issue in LL121 and re-tested LL121)
 133++F1A4 ~                                    ;break
 134++F1A4 ~
 135++F1A4 ~                                    ld      a,$0
 135++F1A4 ~             ld      (Tvar),a                  ; SLOPE FF so steep
 136++F1A4 ~                                    ld      hl,-20
 136++F1A4 ~             ld      (XX1510),hl               ; x1 = -20
 137++F1A4 ~                                    ld      hl,-20
 137++F1A4 ~             ld      (XX1532),hl               ; y1 = -20
 138++F1A4 ~                                    ld      a,60
 138++F1A4 ~             ld      (XX12p2),a                ; XX12+2 = 120 (120/256) = 0.46875
 139++F1A4 ~                                    ld      a,0
 139++F1A4 ~             ld      (XX12p3),a                ; Slope Direction so TL to BR
 140++F1A4 ~                                    ; -20, -20 steep TL>BR, gradient 120/256: Dir -1 so
 141++F1A4 ~                                    call    LL118_6502  ; Expect * so 108,0  PASS (fixed carry flag issue in LL121 and re-tested LL121)
 142++F1A4 ~                                    ;break
 143++F1A4 ~                                    ret
 144++F1A4 ~
 145++F1A4                              ENDIF
 146++F1A4
 147++F1A4                              IFDEF DEBUG_LL28_6502
 148++F1A4 ~            Debug_LL28_6502:        ld      a,27
 148++F1A4 ~             ld     (Qvar),a
 149++F1A4 ~                                    ld      a,76
 150++F1A4 ~                                    call    LL28_6502   ; Expect $FF carry
 151++F1A4 ~                                    ;break
 152++F1A4 ~                                    ld      a,76
 152++F1A4 ~             ld     (Qvar),a
 153++F1A4 ~                                    ld      a,27        ; Expect 2
 154++F1A4 ~                                    call    LL28_6502
 155++F1A4 ~                                    ;break
 156++F1A4 ~                                    ld      a,200
 156++F1A4 ~             ld     (Qvar),a
 157++F1A4 ~                                    ld      a,50
 158++F1A4 ~                                    call    LL28_6502   ; Expect 4
 159++F1A4 ~                                    ;break
 160++F1A4 ~                                    ld      a,97
 160++F1A4 ~             ld     (Qvar),a
 161++F1A4 ~                                    ld      a,76
 162++F1A4 ~                                    call    LL28_6502   ; Expect 1
 163++F1A4 ~                                    ;break
 164++F1A4 ~                                    ld      a,$20
 164++F1A4 ~             ld     (Qvar),a
 165++F1A4 ~                                    ld      a,$10
 166++F1A4 ~                                    call    LL28_6502   ; Expect 1
 167++F1A4 ~                                    ;break
 168++F1A4 ~                                    ld      d,27
 169++F1A4 ~                                    ld      a,76
 170++F1A4 ~                                    call    AEquAmul256DivD
 171++F1A4 ~                                    ;break
 172++F1A4 ~                                    ld      d,76
 173++F1A4 ~                                    ld      a,27
 174++F1A4 ~                                    call    AEquAmul256DivD
 175++F1A4 ~                                    ;break
 176++F1A4 ~                                    ld      d,200
 177++F1A4 ~                                    ld      a,50
 178++F1A4 ~                                    call    AEquAmul256DivD
 179++F1A4 ~                                    ;break
 180++F1A4 ~                                    ld      d,$20
 181++F1A4 ~                                    ld      a,$10
 182++F1A4 ~                                    call    AEquAmul256DivD
 183++F1A4 ~                                    ;break
 184++F1A4 ~                                    ret
 185++F1A4                              ENDIF
 186++F1A4
 187++F1A4
 188++F1A4                              IFDEF DEBUG_LL145_6502
 189++F1A4 ~            Debug_LL145_6502:       ; ld  a,1      : ld  (UbnkLineArrayLen),a
 190++F1A4 ~                                    ; ld  hl,$0116 : ld  (UbnkLineArray),hl
 191++F1A4 ~                                    ; ld  hl,$004B : ld  (UbnkLineArray+2),hl
 192++F1A4 ~                                    ; ld  hl,$00F8 : ld  (UbnkLineArray+4),hl
 193++F1A4 ~                                    ; ld  hl,$002F : ld  (UbnkLineArray+6),hl
 194++F1A4 ~                                    ; call    DrawLinesLateClipping : ;break
 195++F1A4 ~                                    ; ld  a,1      : ld  (UbnkLineArrayLen),a
 196++F1A4 ~                                    ; ld  hl,$0033 : ld  (UbnkLineArray),hl
 197++F1A4 ~                                    ; ld  hl,$0016 : ld  (UbnkLineArray+2),hl
 198++F1A4 ~                                    ; ld  hl,$001D : ld  (UbnkLineArray+4),hl
 199++F1A4 ~                                    ; ld  hl,$FFBE : ld  (UbnkLineArray+6),hl
 200++F1A4 ~                                    ; call    DrawLinesLateClipping : ;break
 201++F1A4 ~                                    ; ld  a,1      : ld  (UbnkLineArrayLen),a
 202++F1A4 ~                                    ; ld  hl,$0055 : ld  (UbnkLineArray),hl
 203++F1A4 ~                                    ; ld  hl,$FF83 : ld  (UbnkLineArray+2),hl
 204++F1A4 ~                                    ; ld  hl,$0033 : ld  (UbnkLineArray+4),hl
 205++F1A4 ~                                    ; ld  hl,$0016 : ld  (UbnkLineArray+6),hl
 206++F1A4 ~                                    ; call    DrawLinesLateClipping :  ;break
 207++F1A4 ~
 208++F1A4 ~                                    ;ld  a,1      : ld  (UbnkLineArrayLen),a
 209++F1A4 ~                                    ;ld  hl,$00B3 : ld  (UbnkLineArray),hl
 210++F1A4 ~                                    ;ld  hl,$0054 : ld  (UbnkLineArray+2),hl
 211++F1A4 ~                                    ;ld  hl,$005d : ld  (UbnkLineArray+4),hl
 212++F1A4 ~                                    ;ld  hl,$ffd5 : ld  (UbnkLineArray+6),hl
 213++F1A4 ~                                    ;call    DrawLinesLateClipping :  ;break
 214++F1A4 ~                                    ;
 215++F1A4 ~                                    ;ld  a,1      : ld  (UbnkLineArrayLen),a
 216++F1A4 ~                                    ;ld  hl,$005d : ld  (UbnkLineArray),hl
 217++F1A4 ~                                    ;ld  hl,$ffd5 : ld  (UbnkLineArray+2),hl
 218++F1A4 ~                                    ;ld  hl,$00b9 : ld  (UbnkLineArray+4),hl
 219++F1A4 ~                                    ;ld  hl,$0028 : ld  (UbnkLineArray+6),hl
 220++F1A4 ~                                    ;call    DrawLinesLateClipping :  ;break
 221++F1A4 ~
 222++F1A4 ~                                    ld  a,1
 222++F1A4 ~              ld  (UbnkLineArrayLen),a
 223++F1A4 ~                                    ld  hl,$ffc7
 223++F1A4 ~              ld  (UbnkLineArray),hl
 224++F1A4 ~                                    ld  hl,$001a
 224++F1A4 ~              ld  (UbnkLineArray+2),hl
 225++F1A4 ~                                    ld  hl,$005d
 225++F1A4 ~              ld  (UbnkLineArray+4),hl
 226++F1A4 ~                                    ld  hl,$ffd5
 226++F1A4 ~              ld  (UbnkLineArray+6),hl
 227++F1A4 ~                                    call    DrawLinesLateClipping
 227++F1A4 ~               ;break
 228++F1A4 ~
 229++F1A4 ~                                    ;ld  a,1      : ld  (UbnkLineArrayLen),a
 230++F1A4 ~                                    ;ld  hl,$0089 : ld  (UbnkLineArray),hl
 231++F1A4 ~                                    ;ld  hl,$00e2 : ld  (UbnkLineArray+2),hl
 232++F1A4 ~                                    ;ld  hl,$fff3 : ld  (UbnkLineArray+4),hl
 233++F1A4 ~                                    ;ld  hl,$00b9 : ld  (UbnkLineArray+6),hl
 234++F1A4 ~                                    ;call    DrawLinesLateClipping :  ;break
 235++F1A4 ~
 236++F1A4 ~                                    ret
 237++F1A4                              ENDIF
 238++F1A4                      DEFINE DEBUG_6502_LINE_CLIPPING
 239++F1A4                      IFDEF DEBUG_6502_LINE_CLIPPING
 240++F1A4
 241++F1A4 00           xX13        DB 0
 242++F1A5 00 00        XX1510      DW 0    ; x1 as a 16-bit coordinate (x1_hi x1_lo)
 243++F1A7 00 00        XX1532      DW 0    ; y1 as a 16-bit coordinate (y1_hi y1_lo)
 244++F1A9 00 00        XX1554      DW 0    ; x2
 245++F1AB              XX1554p1    EQU XX1554+1
 246++F1AB 00 00        XX1576      DW 0    ; y2
 247++F1AD              XX1210      EQU XX1576
 248++F1AD              XX12p1      EQU XX1210+1
 249++F1AD              XX15X1lo    EQU XX1510
 250++F1AD              XX15X1hi    EQU XX1510+1
 251++F1AD              XX15Y1lo    EQU XX1532
 252++F1AD              XX15Y1hi    EQU XX1532+1
 253++F1AD              XX15X2lo    EQU XX1554
 254++F1AD              XX15X2hi    EQU XX1554+1
 255++F1AD              XX15Y2lo    EQU XX1210
 256++F1AD              XX15Y2hi    EQU XX1210+1
 257++F1AD
 258++F1AD 00           XX12p2      DB 0    ; The line's gradient * 256 (so 1.0 = 256)
 259++F1AE 00           XX12p3      DB 0    ; The direction of slope ; + LT to BR; - TR to BL
 260++F1AF 00           XX12p4      DB 0
 261++F1B0 00           XX12p5      DB 0
 262++F1B1              Delta_x     EQU XX12p2
 263++F1B1              Delta_y     EQU XX12p4
 264++F1B1 00           Tvar        DB 0    ; The gradient of slope ; 0 if it's a shallow slope (DX > DY) ; &FF if it's a steep slope (DY > DX)
 265++F1B2                                  ; Returns:  XX15        m         x1 as an 8-bit coordinate XX15+2               y1 as an 8-bit coordinate
 266++F1B2 00           Qvar        DB 0
 267++F1B3 00           Rvar        DB 0    ; general purpose for calcs  Paired with S must be done this way round for SUBHeightFromY1 etc to work
 268++F1B4 00           Svar        DB 0    ; sign variable
 269++F1B5              SRvarPair   EQU Rvar
 270++F1B5 00           Xreg        DB 0
 271++F1B6 00           Yreg        DB 0
 272++F1B7              YXregPair   EQU Xreg
 273++F1B7
 274++F1B7              ;-- Name: LL28 Calculate R = 256 * A / Q
 275++F1B7              ;-- LL28+4              Skips the A >= Q check and always returns with C flag cleared, so this can be called if we know the division will work
 276++F1B7              ;-- LL31                Skips the A >= Q check and does not set the R counter, so this can be used for jumping straight into the division loop if R is already set to 254 and we know the division will work
 277++F1B7              ;   Reg mapping 6502  Z80
 278++F1B7              ;               a     a
 279++F1B7              ;               b     x
 280++F1B7              ;               c     q
 281++F1B7              ;               d     r
 282++F1B7              ;
 283++F1B7 21 B2 F1     LL28_6502:          ld      hl,Qvar                 ; CMP Q                  \ If A >= Q, then the answer will not fit in one byte,
 284++F1BA 4E                               ld      c,(hl)                  ; using c as Q var
 285++F1BB B9                               cp      c
 286++F1BC                                  FlipCarryFlag
 286++F1BC 3F          >                        ccf
 287++F1BD DA E5 F1                         jp      c, LL2_6502             ; BCS LL2                \ so jump to LL2 to return 255
 288++F1C0 06 FE                            ld      b,$FE                   ; LDX #%11111110         \ Set R to have bits 1-7 set, so we can rotate through 7 loop iterations, getting a 1 each time, and then we use b as Rvar
 289++F1C2 CB 27        LL31_6502:          sla     a                       ; ASL A                  \ Shift A to the left
 290++F1C4 DA D9 F1                         jp      c,LL29_6502             ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
 291++F1C7                                  FlipCarryFlag                   ;                          If A < N, then C flag is set.
 291++F1C7 3F          >                        ccf
 292++F1C8                                  JumpIfALTNusng c, LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
 292++F1C8 B9          >                        cp      c
 292++F1C9 DA CE F1    >                        jp		c, LL31_SKIPSUB_6502
 293++F1CC                                                                  ; BCC P%+4
 294++F1CC 91                               sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
 295++F1CD                                  ClearCarryFlag
 295++F1CD B7          >                        or a
 296++F1CE              LL31_SKIPSUB_6502:  FlipCarryFlag
 296++F1CE 3F          >                        ccf
 297++F1CF CB 10                            rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
 298++F1D1 DA C2 F1                         jp      c, LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
 299++F1D4 78                               ld      a,b
 300++F1D5 32 B3 F1                         ld      (Rvar),a
 301++F1D8 C9                               ret                             ; RTS                    \ R left with remainder of division
 302++F1D9 91           LL29_6502:          sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
 303++F1DA                                  SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
 303++F1DA 37          >                        scf
 304++F1DB CB 10                            rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
 305++F1DD DA C2 F1                         jp      c, LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
 306++F1E0 78                               ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
 307++F1E1 32 B3 F1                         ld      (Rvar),a                ; .
 308++F1E4 C9                               ret                             ; .                      \ remainder of the division
 309++F1E5 3E FF        LL2_6502:           ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
 310++F1E7 32 B3 F1                         ld      (Rvar),a                ; STA R                  \ possible answer to 256, i.e. R = 255
 311++F1EA                                  SetCarryFlag                    ; we failed so need carry flag set
 311++F1EA 37          >                        scf
 312++F1EB C9                               ret                             ; RTS                    \ Return from the subroutine
 313++F1EC
 314++F1EC 3A B5 F1     ADDXRegtoY1:        ld      a,(Xreg)                ; Set y1 = y1 + (Y X)
 315++F1EF 4F                               ld      c,a
 316++F1F0 06 00                            ld      b,0
 317++F1F2 2A A7 F1                         ld      hl,(XX1532)
 318++F1F5                                  ClearCarryFlag
 318++F1F5 B7          >                        or a
 319++F1F6 ED 4A                            adc     hl,bc
 320++F1F8 22 A7 F1                         ld      (XX1532),hl
 321++F1FB C9                               ret
 322++F1FC
 323++F1FC ED 4B B5 F1  ADDYXRegtoY1:       ld      bc,(YXregPair)          ; Set y1 = y1 + (Y X)
 324++F200 2A A7 F1                         ld      hl,(XX1532)
 325++F203                                  ClearCarryFlag
 325++F203 B7          >                        or a
 326++F204 ED 4A                            adc     hl,bc
 327++F206 22 A7 F1                         ld      (XX1532),hl
 328++F209 C9                               ret
 329++F20A
 330++F20A ED 4B B5 F1  ADDYXRegtoX1:       ld      bc,(YXregPair)          ; Set x1 = x1 + (Y X)
 331++F20E 2A A5 F1                         ld      hl,(XX1510)
 332++F211                                  ClearCarryFlag
 332++F211 B7          >                        or a
 333++F212 ED 4A                            adc     hl,bc
 334++F214 22 A5 F1                         ld      (XX1510),hl
 335++F217 C9                               ret
 336++F218
 337++F218 2A A7 F1     SUBBCFromY1:        ld      hl,(XX1532)             ; Set (S R) = (y1_hi y1_lo) - BC where BC can be say screen height
 338++F21B                                  ClearCarryFlag
 338++F21B B7          >                        or a
 339++F21C ED 42                            sbc     hl,bc
 340++F21E 22 B3 F1                         ld      (SRvarPair),hl
 341++F221 C9                               ret
 342++F222
 343++F222 2A B5 F1     AddSRToYX:          ld      hl,(YXregPair)
 344++F225 ED 5B B3 F1                      ld      de,(SRvarPair)
 345++F229                                  ClearCarryFlag
 345++F229 B7          >                        or a
 346++F22A ED 5A                            adc     hl,de
 347++F22C 22 B5 F1                         ld      (YXregPair),hl
 348++F22F C9                               ret
 349++F230
 350++F230
 351++F230
 352++F230 7C           ClampX:             ld      a,h
 353++F231 A7                               and     a
 354++F232 7D                               ld      a,l
 355++F233 C8                               ret     z
 356++F234 F2 39 F2                         jp      p,.Max255
 357++F237              .Min0:              ZeroA
 357++F237 AF          >                        xor a
 358++F238 C9                               ret
 359++F239 3E FF        .Max255:            ld      a,$FF
 360++F23B C9                               ret
 361++F23C
 362++F23C 7C           ClampY:             ld      a,h
 363++F23D A7                               and     a
 364++F23E CA 49 F2                         jp      z,.ClampYlo
 365++F241 F2 46 F2                         jp      p,.Max127
 366++F244              .Min0:              ZeroA
 366++F244 AF          >                        xor a
 367++F245 C9                               ret
 368++F246 3E 7F        .Max127:            ld      a,127
 369++F248 C9                               ret
 370++F249 7D           .ClampYlo:          ld      a,l
 371++F24A A7                               and     a
 372++F24B F0                               ret     p
 373++F24C 3E 7F                            ld      a,127
 374++F24E C9                               ret
 375++F24F
 376++F24F              ;-- Rountes to code:
 377++F24F              ;-- LL118
 378++F24F              ;-- LL120   Done
 379++F24F              ;-- LL129   Done
 380++F24F              ;-- LL123   Done
 381++F24F                              ; NOTE DOES ABS ONLY
 382++F24F
 383++F24F
 384++F24F                              ;--- LL118 Move along a point until on screen
 385++F24F              ; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 386++F24F              ;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 387++F24F              ;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 388++F24F              ;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 389++F24F              ;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 390++F24F              ;  Out  XX150               x1 as an 8-bit coordinate
 391++F24F              ;       XX152               y1 as an 8-bit coordinate
 392++F24F              ;----------------------------------------------------------------------------------------------------------------
 393++F24F
 394++F24F
 395++F24F              ;---------------------------------------------------------------------------------------------------------------------
 396++F24F              ;--  Calculate the following:
 397++F24F              ;--   * If T = 0, this is a shallow slope, so calculate (Y X) = (S x1_lo) * XX12+2
 398++F24F              ;--   * If T <> 0, this is a steep slope, so calculate (Y X) = (S x1_lo) / XX12+2
 399++F24F              ;-- giving (Y X) the opposite sign to the slope direction in XX12+3.
 400++F24F              ;---------------------------------------------------------------------------------------------------------------------
 401++F24F 3A A5 F1     LL120_6502:         ld      a,(XX1510)              ;LDA XX15               \ Set R = x1_lo
 402++F252 32 B3 F1                         ld      (Rvar),a                ;STA R
 403++F255 CD 01 F3                         call    LL129_6502              ;JSR LL129              \ Call LL129 to do the following:  Q = XX12+2 = line gradient, A = S EOR XX12+3 = S EOR slope direction  (S R) = |S R|
 404++F258 F5                               push    af                      ;PHA                    \ Store A on the stack so we can use it later
 405++F259              ; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump
 406++F259 3A B1 F1                         ld      a,(Tvar)                ; .
 407++F25C 32 B5 F1                         ld      (Xreg),a                ;. REDUNDANT REMOVE IN OPTIMISATION
 408++F25F A7                               and     a                       ;BNE LL121              \ down to LL121 to calculate this instead (Y X) = (S R) / Q
 409++F260              ; DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.                      (recover teh saved A before the cp)
 410++F260 20 48                            jr      nz,LL121_6502           ;.
 411++F262              ;..   (Y X) = (S R) * Q - must be ABS, sign determined by opposite of the sign of the value on top of stack
 412++F262              LL122_6502:         ZeroA                           ;LDA #0                 \ Set A = 0
 412++F262 AF          >                        xor a
 413++F263                          IFDEF DEBUG_LL122_DIRECT
 414++F263 ~                                DISPLAY "DIRECT CALL TO LL122 so dummy push a to stack with 0"
 415++F263 ~                                push    af
 416++F263                          ENDIF
 417++F263 32 B5 F1                         ld      (Xreg),a                ;TAX                    \ Set (Y X) = 0 so we can start building the answer here
 418++F266 32 B6 F1                         ld      (Yreg),a                ;TAY
 419++F269 21 B4 F1                         ld      hl,Svar
 420++F26C ED 4B B3 F1                      ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right, so we extract bit 0 of (S R)
 421++F270                                  ShiftBCRight1                   ;ROR R                  \ into the C flag
 421++F270 CB 38       >			   srl b
 421++F272 CB 19       >			   rr  c
 422++F274 ED 43 B3 F1                      ld      (SRvarPair),bc
 423++F278 21 B2 F1                         ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 424++F27B CB 26                            sla     (hl)                    ;.
 425++F27D 30 03                            jr      nc, LL126_6502          ;BCC LL126              \ If C (i.e. the next bit from Q) is clear, do not do
 426++F27F                                                                  ;                         the addition for this bit of Q, and instead skip to LL126 to just do the shifts
 427++F27F CD 22 F2     LL125_6502:         call    AddSRToYX               ;TXA                    \ Set (Y X) = (Y X) + (S R)  starting with the low bytes And then doing the high bytes
 428++F282 ED 4B B3 F1  LL126_6502:         ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right
 429++F286                                  ShiftBCRight1                   ;ROR R
 429++F286 CB 38       >			   srl b
 429++F288 CB 19       >			   rr  c
 430++F28A ED 43 B3 F1                      ld      (SRvarPair),bc          ;.
 431++F28E 21 B2 F1                         ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 432++F291 CB 26                            sla     (hl)                    ;.
 433++F293 38 EA                            jr      c,LL125_6502            ;BCS LL125              \ If C (i.e. the next bit from Q) is set, loop back to LL125 to do the addition for this bit of Q
 434++F295 20 EB                            jr      nz,LL126_6502           ;BNE LL126              \ If Q has not yet run out of set bits, loop back to LL126 to do the "shift" part of shift-and-add until we have done additions for all the set bits in Q, to give us our multiplication result
 435++F297 F1                               pop     af                      ;PLA                    \ Restore A, which we calculated above, from the stack
 436++F298 A7                               and     a                       ;BPL LL133              \ If A is positive jump to LL133 to negate (Y X) and
 437++F299 F2 F2 F2                         jp      p,LL133_6502            ;.
 438++F29C              ;.. return from the subroutine using a tail call
 439++F29C C9                               ret                             ;RTS                    \ Return from the subroutine
 440++F29D
 441++F29D              ;----------------------------------------------------------------------------------------------------------------------------
 442++F29D              ;-- Calculate the following:
 443++F29D              ;--         * If T = 0, this is a shallow slope, so calculate (Y X) = (S R) / XX12+2 (does not use X1lo but directly SR)
 444++F29D              ;--         * If T <> 0, this is a steep slope, so calculate (Y X) = (S R) * XX12+2  (does not use X1lo but directly SR)
 445++F29D              ;--             giving (Y X) the opposite sign to the slope direction in XX12+3.
 446++F29D CD 01 F3     LL123_6502:         call    LL129_6502              ;JSR LL129              \ Call LL129 to do the following   Q = XX12+2   = line gradient
 447++F2A0 F5                               push    af                      ;PHA                    \ Store A on the stack so we can use it later
 448++F2A1              ; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump up
 449++F2A1 3A B1 F1                         ld      a,(Tvar)                ; .
 450++F2A4 32 B5 F1                         ld      (Xreg),a                ;BNE LL122              \ to LL122 to calculate this instead:
 451++F2A7 A7                               and     a                       ;.
 452++F2A8              ;  DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.
 453++F2A8 20 B8                            jr      nz,LL122_6502           ;.
 454++F2AA              ;--  The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2
 455++F2AA 3E FF        LL121_6502:         ld      a,$FF                   ;LDA #%11111111         \ Set Y = %11111111
 456++F2AC 32 B6 F1                         ld      (Yreg),a                ;TAY
 457++F2AF CB 27                            sla     a                       ;ASL A                  \ Set X = %11111110
 458++F2B1 32 B5 F1                         ld      (Xreg),a                ;TAX
 459++F2B4              ;--  This sets (Y X) = %1111111111111110, so we can rotate through 15 loop iterations, getting a 1 each time, and then getting a 0 on the 16th iteration... and we can also use it to catch our result bits into bit 0 each time
 460++F2B4 ED 4B B3 F1  LL130_6502:         ld      bc,(SRvarPair)          ;ASL R                  \ Shift (S R) to the left
 461++F2B8                                  ShiftBCLeft1                    ;.
 461++F2B8 CB 21       >			   sla c
 461++F2BA CB 10       >			   rl  b
 462++F2BC ED 43 B3 F1                      ld      (SRvarPair),bc          ;ROL S
 463++F2C0 3A B4 F1                         ld      a,(Svar)                ;LDA S                  \ Set A = S
 464++F2C3 38 07                            jr      c, LL131_6502           ;BCS LL131              \ If bit 7 of S was set, then jump straight to the subtraction
 465++F2C5 21 B2 F1                         ld      hl,Qvar                 ;CMP Q                  \ If A < Q (i.e. S < Q), skip the following subtractions
 466++F2C8 BE                               cp      (hl)
 467++F2C9                                  FlipCarryFlag                   ; note flip carry flag here to simulate 6502 operation
 467++F2C9 3F          >                        ccf
 468++F2CA 30 12                            jr      nc,LL132A_6502          ;BCC LL132  (NOTE Carry flag reversed in Z80 for CP)
 469++F2CC              LL131_6502:         FlipCarryFlag                   ;flip carry to make it act like a 6502 borrow
 469++F2CC 3F          >                        ccf
 470++F2CD 9E                               sbc     (hl)                    ;SBC Q                  \ A >= Q (i.e. S >= Q) so set:
 471++F2CE 32 B4 F1                         ld      (Svar),a                ;STA S
 472++F2D1 3A B3 F1                         ld      a,(Rvar)                ;LDA R                  \ And then doing the high bytes
 473++F2D4                                  ClearCarryFlag                  ;\   S = (A R) - Q  = (S R) - Q starting with the low bytes (we know the C flag is set so the subtraction will be correct)
 473++F2D4 B7          >                        or a
 474++F2D5 DE 00                            sbc     0                       ;SBC #0
 475++F2D7 32 B3 F1                         ld      (Rvar),a                ;STA R
 476++F2DA                                  SetCarryFlag                    ;SEC                    \ Set the C flag to rotate into the result in (Y X)
 476++F2DA 37          >                        scf
 477++F2DB C3 DF F2                         jp      LL132_6502              ;added so that we can do a 6502 style carry above
 478++F2DE 00           LL132A_6502:        nop; FlipCarryFlag
 479++F2DF ED 4B B5 F1  LL132_6502:         ld      bc,(YXregPair)          ; Rotate the counter in (Y X) to the left, and catch the
 480++F2E3                                  RollBCLeft1                     ; ROL A                  \ result bit into bit 0 (which will be a 0 if we didn't
 480++F2E3 CB 11       >               rl  c
 480++F2E5 CB 10       >               rl  b
 481++F2E7 ED 43 B5 F1                      ld      (YXregPair),bc          ; TAX                    \ do the subtraction, or 1 if we did)
 482++F2EB 38 C7                            jr      c, LL130_6502           ; BCS LL130              \ If we still have set bits in (Y X), loop back to LL130 to do the next iteration of 15, until we have done the whole division
 483++F2ED                          IFDEF DEBUG_LL121_DIRECT
 484++F2ED ~                                DISPLAY "DIRECT CALL TO LL121 so dummy push"
 485++F2ED ~                                push    af
 486++F2ED                          ENDIF
 487++F2ED F1                               pop     af                      ; PLA                    \ Restore A, which we calculated above, from the stack
 488++F2EE A7                               and     a                       ; BMI LL128              \ If A is negative jump to LL128 to return from the
 489++F2EF FA 00 F3                         jp      m, LL128_6502           ; .                      \ subroutine with (Y X) as is
 490++F2F2 ED 4B B5 F1  LL133_6502:         ld      bc,(YXregPair)          ; TXA                    \ Otherwise negate (Y X) using two's complement by first
 491++F2F6                                  macronegate16bc                 ; EOR #%11111111         \ setting the low byte to ~X + 1
 491++F2F6 AF          >					xor 	a
 491++F2F7 91          >                    sub 	c
 491++F2F8 4F          >                    ld 		c,a
 491++F2F9 9F          >                    sbc 	a,a
 491++F2FA 90          >                    sub 	b
 491++F2FB 47          >                    ld 		b,a
 492++F2FC ED 43 B5 F1                      ld      (YXregPair),bc          ; ADC #1                 \ The addition works as we know the C flag is clear from\ when we passed through the BCS above
 493++F300 C9           LL128_6502:         ret                             ; RTS                    \ Return from the subroutine
 494++F301              ;-------------------------------------------------------------------------------------------------------
 495++F301              ;..  Do the following, in this order: Q = XX12+2 A = S EOR XX12+3 (S R) = |S R|
 496++F301              ;..  This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 497++F301 F5           LL129_6502:         push    af                      ;LDX XX12+2             \ Set Q = XX12+2
 498++F302 3A AD F1                         ld      a,(XX12p2)              ;.
 499++F305 32 B5 F1                         ld      (Xreg),a                ;.
 500++F308 32 B2 F1                         ld      (Qvar),a                ;STX Q
 501++F30B F1                               pop     af                      ;.
 502++F30C 3A B4 F1                         ld      a,(Svar)                ;LDA S                  \ If S is positive, jump to LL127
 503++F30F A7                               and     a                       ;BPL LL127
 504++F310 F2 28 F3                         jp      p,LL127_6502            ;.
 505++F313                                  ZeroA                           ;.LDA #0                \ Otherwise set R = -R
 505++F313 AF          >                        xor a
 506++F314                                  ClearCarryFlag                  ;SEC
 506++F314 B7          >                        or a
 507++F315 21 B3 F1                         ld      hl, Rvar                ;SBC R
 508++F318 9E                               sbc     (hl)                    ;.
 509++F319 32 B3 F1                         ld      (Rvar),a                ;STA R
 510++F31C 3A B4 F1                         ld      a,(Svar)                ;LDA S                  \ Push S onto the stack
 511++F31F F5                               push    af                      ;PHA
 512++F320 EE FF                            xor     $FF                     ;EOR #%11111111         \ Set S = ~S + 1 + C  ?? is this all just doing |Svar|?
 513++F322 CE 00                            adc     0                       ;ADC #0
 514++F324 32 B4 F1                         ld      (Svar),a                ;STA S
 515++F327 F1                               pop     af                      ;PLA                    \ Pull the original, negative S from the stack into A
 516++F328 21 AE F1     LL127_6502:         ld      hl,XX12p3               ;EOR XX12+3             \ Set A = original argument S EOR'd with XX12+3
 517++F32B AE                               xor     (hl)                    ;.
 518++F32C C9                               ret                             ;RTS                    \ Return from the subroutine
 519++F32D              ;----------------------------------------------------------------------------------------------------------------
 520++F32D              ;--- LL118 Move along a point until on screen
 521++F32D              ; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 522++F32D              ;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 523++F32D              ;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 524++F32D              ;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 525++F32D              ;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 526++F32D              ;  Out  XX150               x1 as an 8-bit coordinate
 527++F32D              ;       XX152               y1 as an 8-bit coordinate
 528++F32D              ;----------------------------------------------------------------------------------------------------------------
 529++F32D
 530++F32D 3A A6 F1     LL118_6502:         ld      a,(XX1510+1)            ; LDA XX15+1             \ If x1_hi is positive, jump down to LL119 to skip the
 531++F330 A7                               and     a                       ; BPL LL119              \ .
 532++F331 F2 4E F3                         jp      p, LL119_6502           ;                        \ following
 533++F334 32 B4 F1     .X1Negative:        ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 534++F337 CD 4F F2                         call    LL120_6502              ; Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 535++F33A                                                                  ;                            (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 536++F33A                                                                  ; with the sign of (Y X) set to the opposite of the line's direction of slope
 537++F33A CD FC F1                         call    ADDYXRegtoY1             ; Set y1 = y1 + (Y X)
 538++F33D 22 A7 F1                         ld      (XX1532),hl             ; .
 539++F340 21 00 00                         ld      hl,0                    ; Set x1 = 0
 540++F343 22 A5 F1                         ld      (XX1510),hl             ; .
 541++F346 3E 00                            ld      a,0                     ; set 0 up for replacemetn of the TAX and BEQ bit
 542++F348 32 B5 F1                         ld      (Xreg),a                ; TAX                    \ Set X = 0 so the next BEQ becomes a jmp but we will do it anyway in next line
 543++F34B C3 64 F3                         jp      LL134_6502              ; just do the jump to LL134 rather than setting to equal flag and then jumping
 544++F34E              ;-- Entering LL119 a will always be the value of X1 Hi byte
 545++F34E CA 64 F3     LL119_6502:         jp      z,LL134_6502            ; BEQ LL134              \ x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen
 546++F351                                                                  ;                        \ (as 0 <= (x_hi x_lo) <= 255)
 547++F351 32 B4 F1                         ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is positive, i.e. x1 >= 256 and off
 548++F354 3D                               dec     a                       ; DEC S                  \ the right side of the screen, so set S = x1_hi - 1
 549++F355 32 B4 F1                         ld      (Svar),a                ;
 550++F358 CD 4F F2                         call    LL120_6502              ; JSR LL120              \ Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = (x1 - 256) * gradient
 551++F35B                                                                  ;                        \                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 552++F35B                                                                  ;                        \ with the sign of (Y X) set to the opposite of the line's direction of slope
 553++F35B CD FC F1                         call    ADDYXRegtoY1             ; TXA                    \ Set y1 = y1 + (Y X)
 554++F35E 21 FF 00                         ld      hl,255                  ; LDX #255               \ Set x1 = 255
 555++F361 22 A5 F1                         ld      (XX1510),hl             ; STX XX15 ;INX; STX XX15+1
 556++F364              ;--  We have moved the point so the x-coordinate is on  screen (i.e. in the range 0-255), so now for the  y-coordinate
 557++F364 3A A8 F1     LL134_6502:         ld      a,(XX1532+1)            ; LDA XX15+3             \ If y1_hi is positive, jump down to LL119 to skip
 558++F367 A7                               and     a                       ; BPL LL135              \ the following
 559++F368 F2 80 F3                         jp      p, LL135_6502           ; .
 560++F36B 32 B4 F1                         ld      (Svar),a                ; STA S                  \ Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 561++F36E 3A A7 F1                         ld      a, (XX1532)             ; LDA XX15+2             \ Set R = y1_lo
 562++F371 32 B3 F1                         ld      (Rvar),a                ; STA R
 563++F374 CD 9D F2                         call    LL123_6502              ; JSR LL123              \ Call LL123 to calculate:  (Y X) = (S R) / XX12+2      if T = 0 = y1 / gradient
 564++F377                                                                  ;                        \                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 565++F377                                                                  ;                         with the sign of (Y X) set to the opposite of the line's direction of slope
 566++F377 CD 0A F2                         call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 567++F37A 21 00 00                         ld      hl,0                    ; LDA #0                 \ Set y1 = 0
 568++F37D 22 A7 F1                         ld      (XX1532),hl             ; STA XX15+2, XX15+3
 569++F380 01 80 00     LL135_6502:         ld      bc,128                  ; LDA XX15+2             \ Set (S R) = (y1_hi y1_lo) - screen height
 570++F383 CD 18 F2                         call    SUBBCFromY1             ; .                      \ .
 571++F386 38 0C                            jr      c, LL136_6502           ; BCC LL136              \ If the subtraction underflowed, i.e. if y1 < screen height, then y1 is already on-screen, so jump to LL136
 572++F388                                                                  ;                        \ to return from the subroutine, as we are done
 573++F388              ;;-   If we get here then y1 >= screen height, i.e. off the bottom of the screen
 574++F388 CD 9D F2     LL139_6502:         call    LL123_6502              ; JSR LL123              \ Call LL123 to calculate:   (Y X) = (S R) / XX12+2      if T = 0  = (y1 - screen height) / gradient
 575++F38B                                                                  ;                        \                            (Y X) = (S R) * XX12+2      if T <> 0 = (y1 - screen height) * gradient
 576++F38B                                                                  ;                          with the sign of (Y X) set to the opposite of the line's direction of slope
 577++F38B CD 0A F2                         call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 578++F38E 21 7F 00                         ld      hl, 127                 ; LDA #Y*2-1             \ Set y1 = 2 * #Y - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view (or in our case 127)
 579++F391 22 A7 F1                         ld      (XX1532),hl             ; STA XX15+3             \ pixel row of the space view
 580++F394 C9           LL136_6502:         ret                             ; RTS                    \ Return from the subroutine
 581++F395              ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 582++F395              ;-- LL145 LINE CLIP
 583++F395              ;-- OPTISIATIONS - VERTICAL HORZONTAL POINT |DX| = |DY| (and all the veriants for +/-)
 584++F395              ;-- This routine clips the line from (x1, y1) to (x2, y2) so it fits on-screen, or returns an error if it can't be clipped to fit. The arguments are 16-bit coordinates, and the clipped line is returned using 8-bit screen coordinates.
 585++F395              ;-- This part sets XX13 to reflect which of the two points are on-screen and off-screen.
 586++F395              ;-- IN  : XX15(1 0) x1 XX15(3 2) y1 XX15(5 4) x2 XX12(1 0) y2
 587++F395              ;-- OUT : (X1, Y1), (X2, Y2) Screen coordinate C flag  Clear if the clipped line fits on-screen, set if itdoesn't
 588++F395              ;         XX13 The state of the original coordinates on-screen:* 0   = (x2, y2) on-screen* 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen* 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 589++F395              ;              So XX13 is non-zero if the end of the line was clipped,meaning the next line sent to BLINE can't join onto the end but has to start a new segment
 590++F395              ;         SWAP The swap status of the returned coordinates:* &FF if we swapped the values of (x1, y1) and(x2, y2) as part of the clipping process* 0 if the coordinates are still in the same order
 591++F395                                  DISPLAY "TODO: treat horz vert and sigle pixel as special cases"
 592++F395              ; TODO treat horizonal/vert and single pixel as special cases
 593++F395              LL145_6502:         ZeroA                           ; LDA #0                 \ Set SWAP = 0
 593++F395 AF          >                        xor a
 594++F396 32 26 CA                         ld      (SWAP),a                ; STA SWAP
 595++F399 3A AA F1                         ld      a,(XX1554+1)            ; LDA XX15+5             \ Set A = x2_hi (use b as a substibute for a)
 596++F39C 47                               ld      b,a                     ; .
 597++F39D              ; Note that as we are interested in the sign of XX113 then this needs to be >= 128 or < 128 or 0, we will use 191 as per bbc for now
 598++F39D              ; for the screen coord we will use 127 though, we use c as a temporay X register
 599++F39D 3E BF        LL147_6502:         ld      a,191                   ; LDX #Y*2-1             \ Set X = #Y * 2 - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view, so this sets Y2 to 191, the y-coordinate of the bottom pixel row of the space view
 600++F39F 32 B5 F1                         ld      (Xreg),a                ; .
 601++F3A2              ;                    ld      a,127
 602++F3A2              ;                    ld      c,a
 603++F3A2 78           .CheckX2Y2High:     ld      a,b                     ; ORA XX12+1             \ If one or both of x2_hi and y2_hi are non-zero, jump
 604++F3A3 21 AC F1                         ld      hl,XX12p1               ; .
 605++F3A6 B6                               or      (hl)                    ; .
 606++F3A7 C2 B7 F3                         jp      nz,LL107_6502           ; BNE LL107              \ to LL107 to skip the following, leaving X at 191
 607++F3AA 3E 7F        .CheckY2Lo:         ld      a,127 ;,c               ; get back the temporary x reg from c
 608++F3AC 21 AB F1                         ld      hl,XX1210               ; CPX XX12               \ If y2_lo > the y-coordinate of the bottom of screen (a is being used as X at this point still)
 609++F3AF BE                               cp      (hl)                    ; .
 610++F3B0 DA B7 F3                         jp      c,LL107_6502            ; BCC LL107              \ then (x2, y2) is off the bottom of the screen, so skip the following instruction, leaving X at 127
 611++F3B3                                  ZeroA                           ; LDX #0                 \ Set X = 0
 611++F3B3 AF          >                        xor a
 612++F3B4 32 B5 F1                         ld      (Xreg),a
 613++F3B7 3A B5 F1     LL107_6502:         ld      a,(Xreg)                ; STX XX13               \ Set XX13 = X, so we have * XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen* XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lois off the bottom of the screen
 614++F3BA 32 AB 7E                         ld      (XX13),a                ; now c is released as a temporary x reg
 615++F3BD 3A A6 F1                         ld      a,(XX1510+1)            ; LDA XX15+1             \ If one or both of x1_hi and y1_hi are non-zero, jump
 616++F3C0 21 A8 F1                         ld      hl,XX1532+1             ; ORA XX15+3             \ to LL83
 617++F3C3 B6                               or      (hl)                    ; .
 618++F3C4 C2 04 F4                         jp      nz,LL83_6502            ; BNE LL83
 619++F3C7              ; DEBUG SIMPLIFIED CODE, now we just compare y1 lo > 127
 620++F3C7 3A A7 F1                         ld      a,(XX1532)              ; If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.) ;ld      a,127                   ; LDA #Y*2-1             \ If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.)
 621++F3CA 26 7F                            ld      h,127                   ; then (x1, y1) is off the bottom of the screen, so jump                                 ;ld      hl,XX1532               ; CMP XX15+2             \ then (x1, y1) is off the bottom of the screen, so jump
 622++F3CC BC                               cp      h                       ; to LL83                                                                                ;cp      (hl)                    ; .                      \ to LL83
 623++F3CD D2 04 F4                         jp      nc, LL83_6502         ; BCC LL83               \ . (y1 > 127 jump, i.e. 127 <= y1 )
 624++F3D0 3A AB 7E                         ld      a,(XX13)                ; LDA XX13               \ If we get here, (x1, y1) is on-screen. If XX13 is non-zero, i.e. (x2, y2) is off-screen, jump
 625++F3D3 A7                               and     a                       ; BNE LL108              \ to LL108 to halve it before continuing at LL83
 626++F3D4 C2 FF F3                         jp      nz,LL108_6502
 627++F3D7              ; If we get here, the high bytes are all zero, which means the x-coordinates are < 256 and therefore fit on screen, and neither coordinate is off the bottom of the screen. That means both coordinates are already on
 628++F3D7              ; screen, so we don't need to do any clipping, all weneed to do is move the low bytes into (X1, Y1) and X2, Y2) and return
 629++F3D7              ; X1 = XX15 (10)  Y1 = XX15+1 X2 = XX15+2 Y2 = XX15+3
 630++F3D7                  DEFINE CLAMPINGEXTREMES
 631++F3D7              LL146_6502: IFDEF CLAMPINGEXTREMES
 632++F3D7 2A A5 F1                         ld      hl,(XX1510)             ;  Save X1 to XX1510
 633++F3DA CD 30 F2                         call    ClampX
 634++F3DD 32 A5 F1                         ld      (XX1510),a
 635++F3E0                          ENDIF
 636++F3E0 2A A7 F1                         ld      hl,(XX1532)             ;  hl = y1
 637++F3E3 CD 3C F2                         call    ClampY
 638++F3E6 32 A6 F1                         ld      (XX1510+1),a            ;  XX1510... = [X1][Y1]
 639++F3E9
 640++F3E9 2A A9 F1                         ld      hl,(XX1554)             ;  de = x2
 641++F3EC CD 30 F2                         call    ClampX
 642++F3EF 32 A7 F1                         ld      (XX1510+2),a            ;  XX1510... = [X1][Y1][X2]
 643++F3F2
 644++F3F2 2A AB F1                         ld      hl,(XX1576)             ;  bc = y2
 645++F3F5 CD 3C F2                         call    ClampY
 646++F3F8 32 A8 F1                         ld      (XX1510+3),a            ;  XX1510... = [X1][Y1][X2][Y2]
 647++F3FB
 648++F3FB                                  ClearCarryFlag                  ; CLC                    \ Clear the C flag as the clipped line fits on-screen
 648++F3FB B7          >                        or a
 649++F3FC C9                               ret                             ; RTS                    \ Return from the subroutine
 650++F3FD              LL109_6502:         SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 650++F3FD 37          >                        scf
 651++F3FE C9                               ret                             ; RTS                    \ Return from the subroutine
 652++F3FF 21 AB 7E     LL108_6502:         ld      hl,XX13                 ; LSR XX13               \ If we get here then (x2, y2) is off-screen and XX13 is
 653++F402 CB 3E                            srl     (hl)                    ;                        \ 191, (128)  so shift XX13 right to halve it to 95 (64)
 654++F404              ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 655++F404              ;-- LL145 (Part 2 of 4)
 656++F404 3A AB 7E     LL83_6502:          ld      a,(XX13)                ; LDA XX13               \ If XX13 < 128 then only one of the points is on-screen
 657++F407 A7                               and     a                       ; BPL LL115              \ so jump down to LL115 to skip the checks of whether
 658++F408 F2 54 F4                         jp      p,LL115_6502            ;                        \ both points are in the strips to the right or bottom of the screen
 659++F40B              ;-- If we get here, both points are off-screen
 660++F40B 3A A6 F1                         ld      a,(XX1510+1)            ; LDA XX15+1             \ If both x1_hi and x2_hi have bit 7 set, jump to LL109
 661++F40E 21 AA F1                         ld      hl,XX1554+1             ; AND XX15+5             \ to return from the subroutine with the C flag set, as
 662++F411 A6                               and     (hl)
 663++F412 FA FD F3                         jp      m, LL109_6502           ; BMI LL109              \ the entire line is above the top of the screen
 664++F415 3A A8 F1                         ld      a,(XX1532+1)            ; LDA XX15+3             \ If both y1_hi and y2_hi have bit 7 set, jump to LL109
 665++F418 21 AC F1                         ld      hl,XX1576+1             ; AND XX12+1             \ to return from the subroutine with the C flag set, as
 666++F41B A6                               and     (hl)                    ; BMI LL109              \ the entire line is to the left of the screen
 667++F41C FA FD F3                         jp      m,LL109_6502            ; .
 668++F41F 3A A6 F1                         ld      a,(XX1510+1)            ; LDX XX15+1             \ Set A = X = x1_hi - 1
 669++F422 3D                               dec     a                       ; DEX
 670++F423 32 B5 F1                         ld      (Xreg),a                ; TXA
 671++F426 F5                               push    af                      ; LDX XX15+5     SP+1    \ Set XX12+2 = x2_hi - 1, we need to save a register first
 672++F427 3A AA F1                         ld      a,(XX1554+1)            ; .
 673++F42A 3D                               dec     a                       ; DEX
 674++F42B 32 B5 F1                         ld      (Xreg),a                ; STX XX12+2
 675++F42E F1                               pop     af                      ; .              SP+0    restore a register
 676++F42F 21 AC F1                         ld      hl,XX1576+1             ; ORA XX12+2             \ If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set,
 677++F432 B6                               or      (hl)                    ; .
 678++F433 F2 FD F3                         jp      p, LL109_6502           ; BPL LL109              \ jump to LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 679++F436              ; for this bit, while z80 uses carry the opposite way to 6502, 6502 uses borrow, in effect inverting the flip
 680++F436              ;NOTEFOUND A PATH WHERE IT DOES NOT DO THIS CHECK e.g. 90 B2 8D A2
 681++F436 3A A7 F1     LL83_DEBUG:         ld      a,(XX1532)              ; LDA XX15+2             \ If y1_lo < y-coordinate of screen bottom, clear the C
 682++F439 FE 80                            cp      128                     ; CMP #Y*2               \ flag, otherwise set it (NOTE FLIPPED IN z80)
 683++F43B 3A A8 F1                         ld      a,(XX1532+1)            ; LDA XX15+3             \ Set XX12+2 = y1_hi - (1 - C), so:
 684++F43E              ;                    FlipCarryFlag                   ; as 6502 uses borrow in subtracts we flip for SBC as z80 CP does opposite too, if A < N carry set so flip
 685++F43E DE 00                            sbc     0                       ; SBC #0                 \ .
 686++F440 32 AD F1                         ld      (XX12p2),a              ; STA XX12+2             \  * Set XX12+2 = y1_hi - 1 if y1_lo is on-screen * Set XX12+2 = y1_hi  otherwise We do this subtraction because we are only interested
 687++F443 3A AB F1                         ld      a,(XX1576)              ; LDA XX12               \ If y2_lo < y-coordinate of screen bottom, clear the C
 688++F446 FE 80                            cp      128                     ; CMP #Y*2               \ flag, otherwise set it
 689++F448 3A AC F1                         ld      a,(XX1576+1)            ; LDA XX12+1             \ Set XX12+2 = y2_hi - (1 - C), so:
 690++F44B              ;                    FlipCarryFlag
 691++F44B DE 00                            sbc     0                       ; SBC #0                   * Set XX12+1 = y2_hi - 1 if y2_lo is on-screen  * Set XX12+1 = y2_hi     otherwise
 692++F44D 21 AD F1                         ld      hl,XX12p2               ; ORA XX12+2             \ If neither XX12+1 or XX12+2 have bit 7 set, jump to
 693++F450 B6                               or      (hl)                    ; .
 694++F451 F2 FD F3                         jp      p,LL109_6502            ; BPL LL109              \ LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 695++F454              ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 696++F454              ;-- LL145 (Part 3 of 4) Summary: Clip line: Calculate the line's gradient
 697++F454 3A B6 F1     LL115_6502:         ld      a,(Yreg)                ; TYA                    \ Store Y on the stack so we can preserve it through the call to this routine
 698++F457 F5                               push    af                      ; PHA            SP+1    \ call to this subroutine
 699++F458 2A A9 F1                         ld      hl,(XX1554)             ; LDA XX15+4             \ Set XX12+2 = x2_lo - x1_lo
 700++F45B ED 5B A5 F1                      ld      de,(XX1510)             ; LDA XX15+5             \ Set XX12+3 = x2_hi - x1_hi
 701++F45F                                  ClearCarryFlag                  ; SBC XX15+1
 701++F45F B7          >                        or a
 702++F460 ED 52                            sbc     hl,de                   ; .
 703++F462 22 FE F5                         ld      (delta_x),hl            ; .
 704++F465 2A AB F1                         ld      hl,(XX1576)             ; LDA XX12               \ Set XX12+4 = y2_lo - y1_lo
 705++F468 ED 5B A7 F1                      ld      de,(XX1532)             ;
 706++F46C                                  ClearCarryFlag                  ; SBC XX15+2
 706++F46C B7          >                        or a
 707++F46D ED 52                            sbc     hl,de                   ; .
 708++F46F 22 00 F6                         ld      (delta_y),hl            ; .
 709++F472              ; So we now have:  delta_x in XX12(3 2)  delta_y in XX12(5 4) where the delta is (x1, y1) - (x2, y2))
 710++F472 3A 01 F6                         ld      a,(delta_y+1)           ; EOR XX12+3             \ Set S = the sign of delta_x * the sign of delta_y, so
 711++F475 21 FF F5                         ld      hl,delta_x+1
 712++F478 AE                               xor     (hl)
 713++F479 32 B4 F1                         ld      (Svar),a                ; STA S                  \ if bit 7 of S is set, the deltas have different signs (perhaps we should do bit 7 mask ?????????
 714++F47C 2A 00 F6                         ld      hl,(delta_y)            ; LDA XX12+5             \ If delta_y_hi is positive, jump down to LL110 to skip
 715++F47F 7C                               ld      a,h
 716++F480 A7                               and     a
 717++F481 F2 8D F4                         jp      p, LL110_6502           ; BPL LL110              \ the following
 718++F484                                  NegHL                           ; LDA #0                 \ Otherwise flip the sign of delta_y to make it
 718++F484 AF          >                    xor a
 718++F485 95          >                    sub l
 718++F486 6F          >                    ld l,a
 718++F487 9F          >                    sbc a,a
 718++F488 94          >                    sub h
 718++F489 67          >                    ld h,a
 719++F48A 22 00 F6                         ld      (delta_y),hl            ; positive, starting with the low bytes
 720++F48D 2A FE F5     LL110_6502:         ld      hl,(delta_x)            ; LDA XX12+3             \ If delta_x_hi is positive, jump down to LL111 to skip
 721++F490 7C                               ld      a,h                     ; BPL LL111              \ the following
 722++F491 A7                               and     a                       ; .
 723++F492 F2 9E F4                         jp      p,LL111_6502            ; .
 724++F495                                  NegHL                           ; SEC                    \ Otherwise flip the sign of delta_x to make it
 724++F495 AF          >                    xor a
 724++F496 95          >                    sub l
 724++F497 6F          >                    ld l,a
 724++F498 9F          >                    sbc a,a
 724++F499 94          >                    sub h
 724++F49A 67          >                    ld h,a
 725++F49B 22 FE F5                         ld      (delta_x),hl            ; LDA #0                 \ positive, starting with the low bytes
 726++F49E              ;--  We now keep halving |delta_x| and |delta_y| until both of them have zero in their high bytes
 727++F49E 2A FE F5     LL111_6502:         ld      hl,(delta_x)
 728++F4A1 ED 5B 00 F6                      ld      de,(delta_y)
 729++F4A5 7C                               ld      a,h                     ; TAX                    \ If |delta_x_hi| is non-zero, skip the following
 730++F4A6 B2                               or      d                       ; BNE LL112
 731++F4A7 CA BC F4                         jp      z,LL113_6502            ; LDX XX12+5             \ If |delta_y_hi| = 0, jump down to LL113 (as both |delta_x_hi| and |delta_y_hi| are 0)
 732++F4AA              LL112_6502:         ShiftHLRight1                   ; LSR A                  \ Halve the value of delta_x in (A XX12+2)
 732++F4AA CB 3C       >			   srl h
 732++F4AC CB 1D       >			   rr  l
 733++F4AE                                  ShiftDERight1                   ; LSR XX12+5             \ Halve the value of delta_y XX12(5 4)
 733++F4AE CB 3A       >			   srl d
 733++F4B0 CB 1B       >			   rr  e
 734++F4B2 22 FE F5                         ld      (delta_x),hl
 735++F4B5 ED 53 00 F6                      ld      (delta_y),de            ; write them back so we don't end up in an infinite loop
 736++F4B9 C3 9E F4                         jp  LL111_6502                  ; JMP LL111              \ Loop back to LL111
 737++F4BC              ;-- By now, the high bytes of both |delta_x| and |delta_y| are zero
 738++F4BC              LL113_6502:         ZeroA                           ; STX T                  \ We know that X = 0 as that's what we tested with a BEQ  above, so this sets T = 0
 738++F4BC AF          >                        xor a
 739++F4BD 32 B1 F1                         ld  (Tvar),a
 740++F4C0 3A FE F5                         ld      a,(delta_x)             ; LDA XX12+2             \ If delta_x_lo < delta_y_lo, so our line is more
 741++F4C3 21 00 F6                         ld      hl,delta_y              ; CMP XX12+4             \ vertical than horizontal, jump to LL114
 742++F4C6 BE                               cp      (hl)
 743++F4C7 DA D9 F4                         jp      c, LL114_6502           ; BCC LL114              ; if delta y > delta x then its a steep slope so we do 256*dy/dx
 744++F4CA              ;-- If we get here then our line is more horizontal than vertical, so it is a shallow slope
 745++F4CA 3A FE F5                         ld      a,(delta_x)             ; STA Q                  \ Set Q = delta_x_lo
 746++F4CD 32 B2 F1                         ld      (Qvar),a                ; .
 747++F4D0 3A 00 F6                         ld      a,(delta_y)             ; LDA XX12+4             \ Set A = delta_y_lo
 748++F4D3 CD B7 F1                         call    LL28_6502               ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_y_lo / delta_x_lo
 749++F4D6 C3 EA F4                         jp      LL116_6502              ; JMP LL116              \ Jump to LL116, as we now have the line's gradient in R
 750++F4D9              ;-- If we get here then our line is more vertical than horizontal, so it is a steep slope
 751++F4D9 3A 00 F6     LL114_6502:         ld      a,(delta_y)             ; LDA XX12+4             \ Set Q = delta_y_lo
 752++F4DC 32 B2 F1                         ld      (Qvar),a                ; STA Q
 753++F4DF 3A FE F5                         ld      a,(delta_x)             ; LDA XX12+2             \ Set A = delta_x_lo
 754++F4E2 CD B7 F1                         call    LL28_6502               ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_x_lo / delta_y_lo
 755++F4E5 3E FF                            ld      a,$FF                   ; DEC T                  \ T was set to 0 above, so this sets T = &FF when our
 756++F4E7 32 B1 F1                         ld      (Tvar),a                ;                        \ line is steep
 757++F4EA              ;----------------------------------------------------------------------------------------------------------------
 758++F4EA              ;--- LL116 This part sets things up to call the routine in LL188, which does the actual clipping.
 759++F4EA              ;--  If we get here, then R has been set to the gradient of the line (x1, y1) to(x2, y2), with T indicating the gradient of slope: * 0   = shallow slope (more horizontal than vertical)
 760++F4EA              ;--                                                                                                                                * &FF = steep slope (more vertical than horizontal)
 761++F4EA              ;-- XX13 has been set as follows: * 0   = (x1, y1) off-screen, (x2, y2) on-screen * 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen * 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 762++F4EA 3A B3 F1     LL116_6502:         ld      a,(Rvar)                ; LDA R                  \ Store the gradient in XX12+2
 763++F4ED 32 AD F1                         ld      (XX12p2),a              ; STA XX12+2
 764++F4F0 3A B4 F1                         ld      a,(Svar)                ; LDA S                  \ Store the type of slope in XX12+3, bit 7 clear means
 765++F4F3 32 AE F1                         ld      (XX12p3),a              ; STA XX12+3             \ top left to bottom right, bit 7 set means top right to bottom left
 766++F4F6 3A AB 7E                         ld      a,(XX13)                ; LDA XX13               \ If XX13 = 0, skip the following instruction
 767++F4F9 FE 00                            cp      0                       ; BEQ LL138
 768++F4FB CA 01 F5                         jp      z,LL138_6502            ; .
 769++F4FE F2 1D F5                         jp      p, LLX117_6502          ; If XX13 is positive, it must be 95 (64) as 128 would be negative). This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump
 770++F501              ;-- If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 771++F501 CD 2D F3     LL138_6502:         call    LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 772++F504 3A AB 7E                         ld      a,(XX13)                ; LDA XX13               \ If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to
 773++F507 A7                               and     a
 774++F508 F2 40 F5                         jp      p,LL124_6502            ; BPL LL124              \ LL124 to return with a successfully clipped line
 775++F50B              ;-- If we get here, XX13 = 191 (128) (both coordinates areoff-screen)
 776++F50B 3A A6 F1     LL117_6502:         ld      a,(XX1510+1)            ; LDA XX15+1             \ If either of x1_hi or y1_hi are non-zero, jump to
 777++F50E 21 A8 F1                         ld      hl,XX1532+1             ; ORA XX15+3             \ LL137 to return from the subroutine with the C flag
 778++F511 B6                               or      (hl)
 779++F512 C2 48 F5                         jp      nz, LL137_6502          ; BNE LL137              \ set, as the line doesn't fit on-screen
 780++F515 3A A7 F1                         ld      a,(XX1532)              ; LDA XX15+2             \ If y1_lo > y-coordinate of the bottom of the screen
 781++F518 FE 80                            cp      128                     ; CMP #Y*2               \ jump to LL137 to return from the subroutine with the
 782++F51A D2 48 F5                         jp      nc, LL137_6502          ; BCS LL137              \ C flag set, as the line doesn't fit on-screen
 783++F51D              ;-- If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 784++F51D 2A A5 F1     LLX117_6502:        ld      hl,(XX1510)             ; LDX XX15               \ Swap x1_lo = x2_lo
 785++F520 ED 5B A9 F1                      ld      de,(XX1554)
 786++F524 ED 53 A5 F1                      ld      (XX1510),de
 787++F528 22 A9 F1                         ld      (XX1554),hl
 788++F52B 2A A7 F1                         ld      hl,(XX1532)             ; LDX XX15+2             \ Swap y1_lo = y2_lo
 789++F52E ED 5B AB F1                      ld      de,(XX1576)
 790++F532 ED 53 A7 F1                      ld      (XX1532),de
 791++F536 22 AB F1                         ld      (XX1576),hl
 792++F539 CD 2D F3                         call    LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 793++F53C 21 26 CA                         ld      hl,SWAP
 794++F53F 35                               dec     (hl)                    ; DEC SWAP               \ Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 795++F540 F1           LL124_6502:         pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 796++F541 32 B6 F1                         ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 797++F544 CD D7 F3                         call    LL146_6502              ; JMP LL146              \ Jump up to LL146 to move the low bytes of (x1, y1) and (x2, y2) into (X1, Y1) and (X2, Y2), and return from the subroutine with a successfully clipped line
 798++F547 C9                               ret                             ; then exit so we don't pop it twice
 799++F548 F1           LL137_6502:         pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 800++F549 32 B6 F1                         ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 801++F54C                                  SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 801++F54C 37          >                        scf
 802++F54D C9                               ret                             ; RTS                    \ Return from the subroutine
 803++F54E                      ENDIF
# file closed: ././Layer2Graphics/BBCEliteDirectMappingLL118.asm
   9+ F54E
  10+ F54E                      IFDEF Add_l2_drawHorzClipY
  11+ F54E ~            l2_drawHorzClipY:
  12+ F54E ~            .ClipY:                 ex      de,hl                       ; get X1 into de
  13+ F54E ~            .ClipDE:                bit     7,d
  14+ F54E ~                                    jr      z,.DEPositive
  15+ F54E ~            .DENegative:            ld      de,0
  16+ F54E ~                                    jp      .ClipDEDone
  17+ F54E ~            .DEPositive:            ld      a,d
  18+ F54E ~                                    and     a
  19+ F54E ~                                    jp      z,.ClipDE127
  20+ F54E ~            .ClipDE256:             ld      de,127
  21+ F54E ~                                    jp      .ClipDEDone
  22+ F54E ~            .ClipDE127:             bit     7,e
  23+ F54E ~                                    jp      z,.ClipDEDone
  24+ F54E ~                                    ld      de,127
  25+ F54E ~            .ClipDEDone:
  26+ F54E ~            .AdjustStartY:          ld      hl,(starty)
  27+ F54E ~                                    call    CompareHLDESgn           ; if de < HL
  28+ F54E ~                                    jr      z,.AdjustEndY               ;
  29+ F54E ~                                    jr      c,.AdjustEndY               ;
  30+ F54E ~            .ClipStartY:            ld      (starty),de                 ; .
  31+ F54E ~            .AdjustEndY:            ld      hl,(endy)                   ; is endy still uninitialised
  32+ F54E ~            .InitEndY:              ld      a,h                         ;
  33+ F54E ~                                    and     l                           ;
  34+ F54E ~                                    cp      $FF                         ;
  35+ F54E ~                                    jr      z,.ForceEndYSet
  36+ F54E ~            .CheckEndY:             call    CompareHLDESgn           ; if de < HL
  37+ F54E ~                                    ret     z
  38+ F54E ~                                    ret     nc
  39+ F54E ~            .ForceEndYSet:          ld      (endy),de
  40+ F54E ~                                    ret
  41+ F54E                      ENDIF
  42+ F54E
  43+ F54E
  44+ F54E 2A D6 F5     l2_drawVertClip:        ld      hl,(y1)
  45+ F551 ED 5B DA F5                          ld      de,(y2)
  46+ F555 CD 14 98                             call    CompareHLDESgn
  47+ F558 30 01                                jr      nc,.y1ltey2
  48+ F55A EB                                   ex      de,hl
  49+ F55B CB 7C        .y1ltey2:               bit     7,h
  50+ F55D CA 63 F5                             jp      z,.y1Positive
  51+ F560 21 00 00                             ld      hl,0
  52+ F563 7A           .y1Positive             ld      a,d
  53+ F564 A7                                   and     a
  54+ F565 CA 6D F5                             jp      z,.y2lt255
  55+ F568 1E 7F                                ld      e,127
  56+ F56A C3 74 F5                             jp      .y2Clipped
  57+ F56D CB 7B        .y2lt255:               bit     7,e
  58+ F56F CA 74 F5                             jp      z,.y2Clipped
  59+ F572 1E 7F                                ld      e,127
  60+ F574 ED 4B D4 F5  .y2Clipped:             ld      bc,(x1)
  61+ F578 45                                   ld      b,l
  62+ F579 53                                   ld      d,e
  63+ F57A 1E BF                                ld      e,$BF
  64+ F57C C3 55 E5                             jp      l2_draw_vert_line_to                ; ">bc = row col d = to position, e = color"
  65+ F57F
  66+ F57F
  67+ F57F 2A D4 F5     l2_drawHorzClip:        ld      hl,(x1)
  68+ F582 ED 5B D8 F5                          ld      de,(x2)
  69+ F586 CD 14 98                             call    CompareHLDESgn
  70+ F589 30 01                                jr      nc,.x1ltex2
  71+ F58B EB                                   ex      de,hl
  72+ F58C CB 7C        .x1ltex2:               bit     7,h
  73+ F58E CA 94 F5                             jp      z,.x1Positive
  74+ F591 21 00 00                             ld      hl,0
  75+ F594 7A           .x1Positive             ld      a,d
  76+ F595 A7                                   and     a
  77+ F596 CA 9B F5                             jp      z,.x2Clipped
  78+ F599 1E FF                                ld      e,255
  79+ F59B ED 4B D6 F5  .x2Clipped:             ld      bc,(y1)
  80+ F59F 41                                   ld      b,c
  81+ F5A0 4D                                   ld      c,l
  82+ F5A1 53                                   ld      d,e
  83+ F5A2 1E BF                                ld      e,$BF
  84+ F5A4 C3 BD E4                             jp      l2_draw_horz_line_to                ; "bc = left side row,col, d right pixel, e = color"
  85+ F5A7
  86+ F5A7                      IFDEF Add_l2_drawVertClipY
  87+ F5A7 ~            l2_drawVertClipY:       bit     7,d                     ; i = (py1<0?0:py1);
  88+ F5A7 ~                                    jr      z,.PYIsOK
  89+ F5A7 ~            .SetPYTo0:              ld      de,0
  90+ F5A7 ~            .PYIsOK:                ld      hl,(starty)
  91+ F5A7 ~                                    IsHLEqu255
  92+ F5A7 ~                                    jp      z,.UpdateStartY
  93+ F5A7 ~                                    call    CompareHLDESgn       ; or starty > py
  94+ F5A7 ~                                    jr      nc,.UpdateStartY        ;
  95+ F5A7 ~                                    jp      .PrepareUpdateArray
  96+ F5A7 ~            .UpdateStartY:          ld      (starty),de
  97+ F5A7 ~            .PrepareUpdateArray:    JumpIfRegLTE c, 127, .UpdateCounters ; we loop from
  98+ F5A7 ~                                    ld      c,127
  99+ F5A7 ~            .UpdateEndY:            ld      (endy),bc               ; save BC to endy y as its now clamped, thsi frees up BC regsiters
 100+ F5A7 ~            .UpdateCounters:        ld      hl,ix                   ; get target array index and set it to
 101+ F5A7 ~                                    add     hl,de                   ; targetArray[de]
 102+ F5A7 ~                                    add     hl,de                   ; .
 103+ F5A7 ~                                    ld      a,c                     ; now set up B as an iterator
 104+ F5A7 ~                                    sub     b                       ; for py2 - py1 + 1 entries
 105+ F5A7 ~                                    inc     a                       ; .
 106+ F5A7 ~                                    ld      b,a                     ; .
 107+ F5A7 ~                                    ld      de,ix                   ; we don't need de anymore to move ix for faster instructions
 108+ F5A7 ~            .UpdateArray:           ld      (hl),de                 ; use sjasm fake as it does (hl)=e,inc hl, (hl)=d,inc hl
 109+ F5A7 ~                                    inc     a                       ; use a as a counter for the end when we update EndY
 110+ F5A7 ~                                    djnz    .UpdateArray            ; .
 111+ F5A7 ~                                    ret                             ; we are now done
 112+ F5A7                      ENDIF
 113+ F5A7
 114+ F5A7
 115+ F5A7              ; ">l2_draw_any_line, bc = y0,x0 de=y1,x1,a=color: determines if its horizontal, vertical or diagonal then hands off the work"
 116+ F5A7              ; b - y0 c - x0, d - y1 e - x1 a - colour
 117+ F5A7 08           l2_draw_any_line:       ex		af,af'              ; save colour into a'
 118+ F5A8 79                                   ld		a,c                 ; if x and e are the same its horizontal
 119+ F5A9 BB                                   cp		e
 120+ F5AA 28 08                                jr		z,.HorizontalLineCheck
 121+ F5AC 78                                   ld		a,b                 ; if b and d are the same its vertica;
 122+ F5AD BA                                   cp		d
 123+ F5AE 28 0E                                jr		z,.VerticalLine
 124+ F5B0              ; use jp and get a free ret instruction optimisation
 125+ F5B0 08           .DiagonalLine:		    ex		af,af'			     ; get colour back into a
 126+ F5B1 C3 D2 E9                             jp		l2_draw_diagonal
 127+ F5B4
 128+ F5B4 78           .HorizontalLineCheck:   ld      a,b
 129+ F5B5 BA                                   cp      d
 130+ F5B6 28 0B                                jr      z, .SinglePixel
 131+ F5B8 08           .HorizontalLine:        ex		af,af'              ; get colour back into a
 132+ F5B9 53                                   ld		d,e				    ; set d as target right pixel
 133+ F5BA 5F                                   ld		e,a				    ; e holds colour on this call
 134+ F5BB C3 BD E4                             jp		l2_draw_horz_line_to
 135+ F5BE 08           .VerticalLine:          ex		af,af'
 136+ F5BF 5F                                   ld		e,a				    ; e holds colour on this call
 137+ F5C0 C3 55 E5                             jp		l2_draw_vert_line_to
 138+ F5C3 08           .SinglePixel:           ex		af,af'              ; get colour back into a
 139+ F5C4                                      l2_plot_macro; jp      l2_plot_pixel
 139+ F5C4 78          >                        ld      a,b
 139+ F5C5             >                        JumpIfAGTENusng 192 ,.NoPlot
 139+ F5C5 FE C0       >                        cp     192
 139+ F5C7 D2 D3 F5    >                        jp		nc,.NoPlot
 139+ F5CA 69          >                        ld      l,c
 139+ F5CB CD 68 E0    >                        call    asm_l2_row_bank_select
 139+ F5CE 67          >                        ld      h,a
 139+ F5CF 3A B5 E2    >                        ld      a,(line_gfx_colour)
 139+ F5D2 77          >                        ld      (hl),a
 139+ F5D3             >.NoPlot:
 140+ F5D3 C9                                   ret
 141+ F5D4              ;-*-*-;......................................................
 142+ F5D4              ;-*-*-; hl'hl = x1y1 de'de = x3y3 , does not save, just plots points
 143+ F5D4              ;-*-*-Layer2_draw_ClipY_Line:
 144+ F5D4              ;-*-*-;                       Eliminte totally off screen first
 145+ F5D4              ;-*-*-.Y1HighTest:            IsHLGT127                       ; if y1 and y2 > 127
 146+ F5D4              ;-*-*-                        jr      nz,.Y1HighLTE127        ; .
 147+ F5D4              ;-*-*-.Y2HighTest:            IsDEGT127                       ; .
 148+ F5D4              ;-*-*-                        ret     nz                       ;   return
 149+ F5D4              ;-*-*-.Y1HighLTE127:
 150+ F5D4              ;-*-*-.Y1LowTest:             bit     7,h                     ; if y1 and y2 < 0
 151+ F5D4              ;-*-*-                        jr      z,.YTestPass            ; .
 152+ F5D4              ;-*-*-                        bit     7,d                     ; .
 153+ F5D4              ;-*-*-                        ret     nz                      ;   return
 154+ F5D4              ;-*-*-.YTestPass:             exx                             ; hl hl' = x1y1 de de' = x2y2
 155+ F5D4              ;-*-*-                        ld      a,h                     ; if x1 and x2 < 0 or > 255
 156+ F5D4              ;-*-*-                        and     a                       ; then in either scenario high
 157+ F5D4              ;-*-*-                        jr      z,.XTestPass            ; byte will not be zero
 158+ F5D4              ;-*-*-                        ld      a,d                     ; .
 159+ F5D4              ;-*-*-                        and     a                       ; .
 160+ F5D4              ;-*-*-                        ret     nz                      ;   return
 161+ F5D4              ;-*-*-.XTestPass:                                             ;
 162+ F5D4              ;-*-*-;                       Check for horizontal and vertical exceptions
 163+ F5D4              ;-*-*-.CheckForVertical:      call    CompareHLDESigned       ; if x1 = x2 then vertical line
 164+ F5D4              ;-*-*-                        jp      z, l2_drawVertClipY     ;    goto vertical and use its ret as a free exit
 165+ F5D4              ;-*-*-.CheckForHorizontal:    exx                             ; hl'hl = x1y1 de'de = x2y2
 166+ F5D4              ;-*-*-                        call    CompareHLDESigned       ; if y1 = y2 then horizonal line
 167+ F5D4              ;-*-*-                        jp      z, l2_drawHorzClipY     ; goto  horizontal and use its ret as a free exit
 168+ F5D4              ;-*-*-                        exx                             ; hl hl' = x1y1 de de' = x2y2
 169+ F5D4              ;-*-*-;                       Now we can draw diagnoal, note we are pre-sorting Y so no need to do sort logic
 170+ F5D4              ;-*-*-;                       Check if X1 > X2 and set sign, X1 x2 and clip accordingly
 171+ F5D4              ;-*-*-.SetupMinMaxX:          call    CompareHLDESigned       ; If x1 > x2
 172+ F5D4              ;-*-*-                        jr      c, .x1LTx2              ; . (else jump to x1 < x2 as we have already handled x1 = x2)
 173+ F5D4              ;-*-*-.x1GTEx2:               ld      a,$FF                   ;   sign_x = -1 (also iyh)
 174+ F5D4              ;-*-*-                        ld      (sign_x),a              ;   .
 175+ F5D4              ;-*-*-                        ld      iyh,a
 176+ F5D4              ;-*-*-                        NegHL                           ;   x1 = - x1
 177+ F5D4              ;-*-*-                        NegDE                           ;   x2 = - x2
 178+ F5D4              ;-*-*-                        xor     a                       ;   xmax = 0
 179+ F5D4              ;-*-*-                        ld      (clip_xmax),a           ;   .
 180+ F5D4              ;-*-*-                        ld      (clip_xmax+1),a         ;   .
 181+ F5D4              ;-*-*-                        inc     a                       ;   xmin = -255 ($FF01)
 182+ F5D4              ;-*-*-                        ld      (clip_xmin),a           ;   .
 183+ F5D4              ;-*-*-                        ld      a,$FF
 184+ F5D4              ;-*-*-                        ld      (clip_xmin+1),a         ;   .
 185+ F5D4              ;-*-*-                        jp      .DoneSignSetup          ; else
 186+ F5D4              ;-*-*-;                       if X1<X2 then set up sign as 1, clip, we don't need to change X1 and X2
 187+ F5D4              ;-*-*-.x1LTx2:                ld      a,1                     ;   sign_x = 1 (also iyh)
 188+ F5D4              ;-*-*-                        ld      (sign_x),a              ;   .
 189+ F5D4              ;-*-*-                        ld      iyh,a                   ;   .
 190+ F5D4              ;-*-*-                        ZeroA                           ;   clip_xmin = 0
 191+ F5D4              ;-*-*-                        ld      (clip_xmin),a           ;   .
 192+ F5D4              ;-*-*-                        ld      (clip_xmin+1),a         ;   .
 193+ F5D4              ;-*-*-                        ld      (clip_xmax+1),a         ;   clip_xmax = 255
 194+ F5D4              ;-*-*-                        dec     a                       ;   .
 195+ F5D4              ;-*-*-                        ld      (clip_xmax),a           ;   .
 196+ F5D4              ;-*-*-.DoneSignSetup:
 197+ F5D4              ;-*-*-;                       Set up Delta x = x2 - x1
 198+ F5D4              ;-*-*-.CalcDeltas:            ex      de,hl                   ; de = x1 hl = x2
 199+ F5D4              ;-*-*-                        push    hl                      ; save x2                       Stack+1
 200+ F5D4              ;-*-*-                        ClearCarryFlag                  ; delta_x = x2 - x1
 201+ F5D4              ;-*-*-                        sbc     hl,de                   ; .
 202+ F5D4              ;-*-*-                        ld      (delta_x),hl            ; .
 203+ F5D4              ;-*-*-;                       Set up Delta X step
 204+ F5D4              ;-*-*-                        ClearCarryFlag                  ; multiply by 2
 205+ F5D4              ;-*-*-                        adc     hl,hl                   ; .
 206+ F5D4              ;-*-*-                        ld      (delta_x_step),hl       ; delta_x_step = delta x * 2
 207+ F5D4              ;-*-*-                        pop     hl                      ; Restore X2                     Stack+0
 208+ F5D4              ;-*-*-                        ; now hl = x2 and de = x1
 209+ F5D4              ;-*-*-;                       Set up Delta y = y2 - y1
 210+ F5D4              ;-*-*-.CalcDeltaY:            exx                             ; hl = y1 de = y2, we don't save hl,de as we will load later
 211+ F5D4              ;-*-*-                        ld      (y1Work),hl             ; y1Work = y1
 212+ F5D4              ;-*-*-                        push    hl                      ; save y1 so that it can be loaded to HL later
 213+ F5D4              ;-*-*-                        ld      (y2Work),de             ; y2Work = y2
 214+ F5D4              ;-*-*-                        ex      de,hl                   ; set de to y2Work and hl to y1Work
 215+ F5D4              ;-*-*-                        ClearCarryFlag                  ; delta_y = y2 - y1
 216+ F5D4              ;-*-*-                        sbc     hl,de                   ; .
 217+ F5D4              ;-*-*-                        ld      (delta_y),hl            ; .
 218+ F5D4              ;-*-*-;                       Set up Delta Y step
 219+ F5D4              ;-*-*-                        ClearCarryFlag                  ; multiply by 2
 220+ F5D4              ;-*-*-                        adc     hl,hl                   ; .
 221+ F5D4              ;-*-*-                        ld      (delta_y_step),hl       ; delta_y_step = delta y * 2
 222+ F5D4              ;-*-*-                        ; now hl = y1 de = y2
 223+ F5D4              ;-*-*-;                       x_pos = x1, y_pos = y1
 224+ F5D4              ;-*-*-.SavePositions:         exx                             ; de = x1 hl = x2
 225+ F5D4              ;-*-*-                        ld      (x1Work),de             ; x1Work = x1
 226+ F5D4              ;-*-*-                        ld      (x2Work),hl             ; x2Work = x2
 227+ F5D4              ;-*-*-                        ;ex      de,hl                   ; hl = x1 de = x2
 228+ F5D4              ;-*-*-                        pop     hl                      ; y_pos = hl = y1   = y_pos     Stack+0
 229+ F5D4              ;-*-*-                        ld      (x_pos),de              ; .
 230+ F5D4              ;-*-*-                        ld      (y_pos),hl              ; .
 231+ F5D4              ;-*-*-;                       Check for Delta X >= Delta Y and do respective code version
 232+ F5D4              ;-*-*-.CheckDeltaXGTEDeltaY:  ld      hl,(delta_x)            ; hl = delta x
 233+ F5D4              ;-*-*-                        ld      de,(delta_y)            ; de = delta y
 234+ F5D4              ;-*-*-                        call    CompareHLDESigned       ; if data x < deltay
 235+ F5D4              ;-*-*-                        jp      c, DeltaXltDeltaY
 236+ F5D4              ;-*-*-;..................................................................................................................................
 237+ F5D4              ;-*-*-;                       this is where dx >= dy
 238+ F5D4              ;-*-*-;--- Delta X >= DeltaY ---------------------------------;    error = delta y_step - delta x
 239+ F5D4              ;-*-*-;                       Error = delta Y Step - Delta X and set Exit false
 240+ F5D4              ;-*-*-L2DeltaXgteDeltaY:      ErrorEquStepMinusDelta delta_y_step, delta_x ; this also sets de to delta x
 241+ F5D4              ;-*-*-                        SetExitFalse                    ;    set exit = false
 242+ F5D4              ;-*-*-;---                    if y < 0 then set y = 0 & save X pos to targetArray[0]..;
 243+ F5D4              ;-*-*-.IsY1TL0:               IsAxisLT0 (y1Work)              ;    if y1 < 0
 244+ F5D4              ;-*-*-                        jp     z,.Y1IsNotLT0           ;    .
 245+ F5D4              ;-*-*-;                       ... temp = 2 * (-y1) -1 * delta X
 246+ F5D4              ;-*-*-.Y1IsLT0:               ex      de,hl                   ;       de = delta x
 247+ F5D4              ;-*-*-                        ld      hl,(y1Work)             ;       temp = (2 * (0 - y1) - 1) * delta_x; Note from entering de = delta_x
 248+ F5D4              ;-*-*-                        NegHL                        ;       .      (0-y1 also equals negate y1)
 249+ F5D4              ;-*-*-                        ClearCarryFlag                  ;       .
 250+ F5D4              ;-*-*-                        adc     hl,hl                   ;       .      (y1 = y1 * 2)
 251+ F5D4              ;-*-*-                        dec     hl                      ;       .      (y1 = y1 -1)
 252+ F5D4              ;-*-*-                        call    mulHLbyDE2sc            ;       .      (multiply by de which is delta x)
 253+ F5D4              ;-*-*-                        ld      (linetemp),hl           ;       .      (and save to linetemp)
 254+ F5D4              ;-*-*-                        ld      de,(delta_y_step)       ;       .  (set BC to divq floor bc/de)
 255+ F5D4              ;-*-*-                        ex      de,hl                   ;       msd = floor_divq (temp, delta_y_step)
 256+ F5D4              ;-*-*-;                       ... msd = floor (temp , delta y step)
 257+ F5D4              ;-*-*-                        FloorHLdivDETarget msd          ;       .
 258+ F5D4              ;-*-*-;                       ... xpos += msd
 259+ F5D4              ;-*-*-                        ex      hl,de                   ;       x pos += msd (move msd to de)
 260+ F5D4              ;-*-*-                        ld      hl,(x_pos)              ;       .            (pull in x1temp and add de)
 261+ F5D4              ;-*-*-                        add     hl,de                   ;       .
 262+ F5D4              ;-*-*-                        ld      (x_pos),hl              ;       .            (store result in x_pos)
 263+ F5D4              ;-*-*-;                       ... if x_pos > clip_xmax then return
 264+ F5D4              ;-*-*-.IsXposGTClipXMax:      ld      de,(clip_xmax)          ;       if x_pos > clip_xmax then return
 265+ F5D4              ;-*-*-                        call    CompareHLDESigned               ;       .
 266+ F5D4              ;-*-*-                        jr      z,.XPosLTEXMax         ;       .
 267+ F5D4              ;-*-*-                        ret     nc                      ;       .
 268+ F5D4              ;-*-*-.XPosLTEXMax:
 269+ F5D4              ;-*-*-;                       ... if x_pos > clip_xmin
 270+ F5D4              ;-*-*-.IsXposGTEClipXmin:     ld      de,(clip_xmin)          ;       if x_pos >= clip_xmin
 271+ F5D4              ;-*-*-                        call    CompareHLDESigned               ;       .
 272+ F5D4              ;-*-*-                        jr      z,.XposLTClipXmin       ;       .
 273+ F5D4              ;-*-*-                        jr      c,.XposLTClipXmin       ;
 274+ F5D4              ;-*-*-;                       ... ... then rem = temp - msd * delta y step
 275+ F5D4              ;-*-*-.XposGTEClipXMin:       ld      hl,(msd)                ;          rem = temp - msd * delta_y_step
 276+ F5D4              ;-*-*-                        ld      de,(delta_y_step)       ;          .     (de =  delta_y_step)
 277+ F5D4              ;-*-*-                        call    mulHLbyDE2sc            ;          .     (hl = msd * delta y step)
 278+ F5D4              ;-*-*-                        ex      de,hl                   ;          .     (de = hl)
 279+ F5D4              ;-*-*-                        ld      hl,(linetemp)           ;          .     (hl = linetemp)
 280+ F5D4              ;-*-*-                        ClearCarryFlag                  ;          .
 281+ F5D4              ;-*-*-                        sbc     hl,de                   ;          .     (hl = hl = de)
 282+ F5D4              ;-*-*-                        ld      (rem),hl                ;          .     (rem = result)
 283+ F5D4              ;-*-*-;                       ... ... y pos = 0
 284+ F5D4              ;-*-*-                        xor     a                       ;          y_pos = 0
 285+ F5D4              ;-*-*-                        ld      (y_pos),a               ;          .
 286+ F5D4              ;-*-*-                        ld      (y_pos+1),a             ;          .
 287+ F5D4              ;-*-*-;                       ... ... error = error - (rem + delta x)
 288+ F5D4              ;-*-*-                        ld      de,(delta_x)            ;          error -= rem + delta_x
 289+ F5D4              ;-*-*-                        add     hl,de                   ;          .      (hl = (rem still) (de = delta x) )
 290+ F5D4              ;-*-*-                        ex      de,hl                   ;          .      (move result into de)
 291+ F5D4              ;-*-*-                        ld      hl,(error)              ;          .      (get error into hl)
 292+ F5D4              ;-*-*-                        ClearCarryFlag                  ;          .      (error - de)
 293+ F5D4              ;-*-*-                        sbc     hl,de                   ;          .
 294+ F5D4              ;-*-*-                        ld      (error),hl              ;          .      (save in hl)
 295+ F5D4              ;-*-*-;                       ... ... if rem > 0
 296+ F5D4              ;-*-*-                        IsMem16GT0JumpFalse rem, .remNotGT0 ;      if (rem > 0)
 297+ F5D4              ;-*-*-;                       ... ... ... xpos ++
 298+ F5D4              ;-*-*-.remGT0:                ld      hl,x_pos                ;              x_pos += 1
 299+ F5D4              ;-*-*-                        inc     (hl)                    ;              .
 300+ F5D4              ;-*-*-;                       ... ... ... error += delta y step
 301+ F5D4              ;-*-*-                        ErrorPlusStep delta_y_step      ;              error += delta_y_step
 302+ F5D4              ;-*-*-;                       ... ... set exit true
 303+ F5D4              ;-*-*-.remNotGT0:             ld      a,$FF                   ;          set_exit = true
 304+ F5D4              ;-*-*-                        ld      (set_exit),a            ;          .
 305+ F5D4              ;-*-*-;                       ... ...  set target array [0] to xpos
 306+ F5D4              ;-*-*-                        ld      hl,(x_pos)              ;          targetArray[0] = x_pos
 307+ F5D4              ;-*-*-                        ld      (ix+0),l                ;          .  (targetArray is pointed to by ix)
 308+ F5D4              ;-*-*-                        ld      (ix+1),h                ;          .
 309+ F5D4              ;-*-*-.Y1IsNotLT0:
 310+ F5D4              ;-*-*-;                       x pos end = x2
 311+ F5D4              ;-*-*-.XposLTClipXmin:        ld      hl,(x2Work)             ;    x_pos_end = x2
 312+ F5D4              ;-*-*-                        ld      (x_pos_end),hl          ;    .
 313+ F5D4              ;-*-*-;                       if y2 > 127
 314+ F5D4              ;-*-*-.IsY2GT127:             ld      hl,(y2Work)             ;    if (y2 > 127)
 315+ F5D4              ;-*-*-                        IsHLGT127                       ;    .
 316+ F5D4              ;-*-*-                        jr      nz,.Y2LTE127            ;    .
 317+ F5D4              ;-*-*-;                       ... temp = delta x step * (127 - y1) + delta x
 318+ F5D4              ;-*-*-.Y2GT127:               ld      de,(y1Work)             ;       temp = delta_x_step * (127 - y1) + delta_x
 319+ F5D4              ;-*-*-                        ld      hl,127                  ;       .      (de = y1work)
 320+ F5D4              ;-*-*-                        ClearCarryFlag                  ;       .      (hl = 127 )
 321+ F5D4              ;-*-*-                        sbc     hl,de                   ;       .      (hl - de)
 322+ F5D4              ;-*-*-                        ld      de,(delta_x_step)       ;       .      (de = delta x step)
 323+ F5D4              ;-*-*-                        call    mulHLbyDE2sc                    ;       .      (hl = hl * de)
 324+ F5D4              ;-*-*-                        ld      de,(delta_x)            ;       .      (de = delta x)
 325+ F5D4              ;-*-*-                        add     hl,de                   ;       .      (hl + de)
 326+ F5D4              ;-*-*-                        ld      (linetemp),hl           ;       .      (and save to line temp)
 327+ F5D4              ;-*-*-                        ld      de,(delta_y_step)       ;       de = delta y step
 328+ F5D4              ;-*-*-                        ex      de,hl                   ;       de = linetemp hl = delta y step
 329+ F5D4              ;-*-*-;                       ... msd = floor_divq (temp, delta y step)
 330+ F5D4              ;-*-*-                        FloorHLdivDETarget msd          ;       msd = floor_divq(temp,delta_y_step); (hl=de/hl)
 331+ F5D4              ;-*-*-                        ld      bc,hl                   ;       save off msd as we will need it again
 332+ F5D4              ;-*-*-                        ld      de,(x1Work)             ;
 333+ F5D4              ;-*-*-;                       ... xpos_end = x1 + msd
 334+ F5D4              ;-*-*-                        add     hl,de                   ;       x_pos_end = x1 + msd;
 335+ F5D4              ;-*-*-                        ld      (x_pos_end),hl          ;
 336+ F5D4              ;-*-*-;                       ... if (temp - msd * delta y step)) == 0
 337+ F5D4              ;-*-*-                        ld      hl,bc                   ;       if ((temp - msd * delta_y_step) == 0) --x_pos_end;
 338+ F5D4              ;-*-*-                        ld      de,(delta_y_step)       ;       .    (hl = msd * delta_y_step)
 339+ F5D4              ;-*-*-                        call    mulHLbyDE2sc            ;       .
 340+ F5D4              ;-*-*-                        ex      hl,de                   ;       .    (hl = linetemp - hl
 341+ F5D4              ;-*-*-                        ld      hl,(linetemp)           ;       .
 342+ F5D4              ;-*-*-                        ClearCarryFlag                  ;       .
 343+ F5D4              ;-*-*-                        sbc     hl,de                   ;       .
 344+ F5D4              ;-*-*-                        jr      nz,.Calc1NotZero        ;       .
 345+ F5D4              ;-*-*-;                       ... ... x pos end minus 1
 346+ F5D4              ;-*-*-                        ld      hl,x_pos_end            ;           then -- x_pos_end
 347+ F5D4              ;-*-*-                        dec     (hl)                    ;           .
 348+ F5D4              ;-*-*-.Calc1NotZero:
 349+ F5D4              ;-*-*-;                       if sign_x == -1
 350+ F5D4              ;-*-*-.Y2LTE127:              break
 351+ F5D4              ;-*-*-                        IsMemNegative8JumpFalse sign_x, .SignXNotNegative ; just check if its negative
 352+ F5D4              ;-*-*-;                       ... xpos = - xpos
 353+ F5D4              ;-*-*-.SignXNegative:         ld      hl,(x_pos)              ;       x_pos = -x_pos
 354+ F5D4              ;-*-*-                        NegHL                           ;       .
 355+ F5D4              ;-*-*-                        ld      (x_pos),hl              ;       .
 356+ F5D4              ;-*-*-;                       ... xpos end = - xpos end
 357+ F5D4              ;-*-*-                        ld      hl,(x_pos_end)          ;       x_pos_end = -x_pos_end
 358+ F5D4              ;-*-*-                        NegHL                           ;       .
 359+ F5D4              ;-*-*-                        ld      (x_pos_end),hl          ;       .
 360+ F5D4              ;-*-*-                        dec     (hl)                    ;       .
 361+ F5D4              ;-*-*-;                       delta x step = delta x step - delta y step
 362+ F5D4              ;-*-*-.SignXNotNegative:      ld      hl,(delta_x_step)       ;    delta_x_step -= delta_y_step
 363+ F5D4              ;-*-*-                        ld      de,(delta_y_step)       ;    .
 364+ F5D4              ;-*-*-                        ClearCarryFlag                  ;    .
 365+ F5D4              ;-*-*-                        sbc     hl,de                   ;    .
 366+ F5D4              ;-*-*-                        ld      (delta_x_step),hl       ;    .
 367+ F5D4              ;-*-*-;..................................................................................................................................
 368+ F5D4              ;-*-*-;--- DxFTEDyNotLongest while loop ----------------------;
 369+ F5D4              ;-*-*-L2DxGTEDy:                ld      bc,(x_pos)              ;    while (x_pos != x_pos_end) loading bc with xppos an de as x_pos_end
 370+ F5D4              ;-*-*-                        ld      de,(x_pos_end)          ;    .
 371+ F5D4              ;-*-*-                        ld      hl,ix                   ;    load hl as target array
 372+ F5D4              ;-*-*-                        ld      a,(y_pos)               ;    by this point y pos must be 8 bit
 373+ F5D4              ;-*-*-                        add     hl,a                    ;    So we are setting up hl as targetArray pointer
 374+ F5D4              ;-*-*-                        add     hl,a                    ;    .
 375+ F5D4              ;-*-*-;..................................................................................................................................
 376+ F5D4              ;-*-*-;--- Version where longest is not saved ----------------;
 377+ F5D4              ;-*-*-                        exx                             ;      switch to alternate registers
 378+ F5D4              ;-*-*-                        ld      hl,(error)              ;      load up stepping into alternate registers
 379+ F5D4              ;-*-*-                        ld      de,(delta_x_step)       ;      .
 380+ F5D4              ;-*-*-                        ld      bc,(delta_y_step)       ;      .
 381+ F5D4              ;-*-*-                        exx                             ;      .
 382+ F5D4              ;-*-*-                        ld      a,(sign_x)              ;      Self modify inc of y_pos
 383+ F5D4              ;-*-*-                        and     $80                     ;
 384+ F5D4              ;-*-*-                        jr      z,.SetWhileInc          ;
 385+ F5D4              ;-*-*-.SetWhileDec:           ld      a,InstrDECBC
 386+ F5D4              ;-*-*-                        ld      (.WhileIncInstuction), a
 387+ F5D4              ;-*-*-                        jp      .WhileLoop
 388+ F5D4              ;-*-*-.SetWhileInc:           ld      a,InstrINCBC
 389+ F5D4              ;-*-*-                        ld      (.WhileIncInstuction), a
 390+ F5D4              ;-*-*-;--- Update Loop ---------------------------------------;
 391+ F5D4              ;-*-*-; In loop hl  = target array pointer bc = x_pos,       de = x_pos_end, (we don't need to reatin Y_pos)
 392+ F5D4              ;-*-*-;         hl' = error                bc'= delta_y_step de'=delta_x_step
 393+ F5D4              ;-*-*-.WhileLoop:             call    CompareBCDESigned       ;      while x_pos != x_pos_end
 394+ F5D4              ;-*-*-                        ret     z                       ;      .
 395+ F5D4              ;-*-*-                        call    L2_plotAtRowLColC       ;        targetArray[y_pos] = x_pos
 396+ F5D4              ;-*-*-                        exx                             ;        if error >= 0
 397+ F5D4              ;-*-*-                        bit     7,h                     ;        .
 398+ F5D4              ;-*-*-                        jr      nz,.ErrorNegative       ;        .
 399+ F5D4              ;-*-*-.ErrorPositive:         ClearCarryFlag                  ;             error -= delta_x_step
 400+ F5D4              ;-*-*-                        sbc     hl,de                   ;             .
 401+ F5D4              ;-*-*-                        exx                             ;             back to main regsters
 402+ F5D4              ;-*-*-                        inc     hl                      ;             y pos for target Array index +2
 403+ F5D4              ;-*-*-                        inc     hl                      ;             as its 16 bit
 404+ F5D4              ;-*-*-                        jp      .WhileIncInstuction     ;             .
 405+ F5D4              ;-*-*-.ErrorNegative:         add     hl,bc                   ;        else error += delta y step
 406+ F5D4              ;-*-*-                        exx                             ;             back to main regsters
 407+ F5D4              ;-*-*-.WhileIncInstuction:    inc     bc                      ;       x_pos += sign_x (doneas self modifying to inc or dec)
 408+ F5D4              ;-*-*-                        jp      .WhileLoop
 409+ F5D4              ;-*-*-;..................................................................................................................................;--- Delta X < DeltaY ----------------------------------;
 410+ F5D4              ;-*-*-;--- ELSE ----------------------------------------------;
 411+ F5D4              ;-*-*-;--- DX < DY -------------------------------------------;
 412+ F5D4              ;-*-*-;..................................................................................................................................;--- Delta X < DeltaY ----------------------------------;
 413+ F5D4              ;-*-*-;                       error = delta x_step - delta y
 414+ F5D4              ;-*-*-L2DeltaXltDeltaY:       ErrorEquStepMinusDelta delta_x_step, delta_y
 415+ F5D4              ;-*-*-;                       set exit false
 416+ F5D4              ;-*-*-                        SetExitFalse                    ; set exit = false
 417+ F5D4              ;-*-*-;                       if x1 < xmin && y pos > 127 then exit early
 418+ F5D4              ;-*-*-.IsY1TL0:               ld      hl,(x1Work)             ; if x1 < clip xmin
 419+ F5D4              ;-*-*-                        ld      de,(clip_xmin)          ; .
 420+ F5D4              ;-*-*-                        call    CompareHLDESigned               ; .
 421+ F5D4              ;-*-*-                        jp      z, .X1gteClipMin        ; .
 422+ F5D4              ;-*-*-                        jp      c, .X1ltClipMin         ; and y_pos > 127
 423+ F5D4              ;-*-*-                        ld      hl,(y1Work)             ;
 424+ F5D4              ;-*-*-.X1gteClipMin:          ReturnIfHLGT127                 ;    then return
 425+ F5D4              ;-*-*-;                       if y1 work < 0
 426+ F5D4              ;-*-*-.X1ltClipMin:           IsAxisLT0 (y1Work)              ; if y1 < 0             ;
 427+ F5D4              ;-*-*-                        jr      z,.Y1IsNotLT0           ; .
 428+ F5D4              ;-*-*-;                       ... temp = delta x step * (-y1)
 429+ F5D4              ;-*-*-.Y1IsLT0:               ld      hl,(y1Work)             ;    temp = (0 - y1) * delta_x_step;
 430+ F5D4              ;-*-*-                        NegHL                        ;    . (0 - y1 also equals negate HL)
 431+ F5D4              ;-*-*-                        ClearCarryFlag                  ;    .
 432+ F5D4              ;-*-*-                        ld      de,(delta_x_step)       ;    .
 433+ F5D4              ;-*-*-                        call    mulHLbyDE2sc            ;    .
 434+ F5D4              ;-*-*-                        ld      (linetemp),hl           ;    .
 435+ F5D4              ;-*-*-;                       ... msd = floor_divq (temp, delta y step)
 436+ F5D4              ;-*-*-                        ld      de,(delta_y_step)       ;    msd = floor_divq (temp, delta_y_step);
 437+ F5D4              ;-*-*-;                       ... rem calculation now done in floor macro above into de
 438+ F5D4              ;-*-*-                        FloorHLdivDETarget msd          ;    .
 439+ F5D4              ;-*-*-                        ld      (rem),de                ;    As DE = reminder we can do rem = temp % delta_y_step; for free
 440+ F5D4              ;-*-*-;                       ... xpos = xpos + msd
 441+ F5D4              ;-*-*-                        ex      hl,de                   ;    x pos += msd (move msd to de)
 442+ F5D4              ;-*-*-                        ld      hl,(x_pos)              ;    .            (pull in x1temp and add de)
 443+ F5D4              ;-*-*-                        add     hl,de                   ;    .
 444+ F5D4              ;-*-*-                        ld      (x_pos),hl              ;    .            (store result in x_pos)
 445+ F5D4              ;-*-*-;                       ... if xpos > xmax
 446+ F5D4              ;-*-*-.IsXposGTClipXMax:      ld      de,(clip_xmax)          ;    if x_pos > clip_xmax then return
 447+ F5D4              ;-*-*-                        call      CompareHLDESigned               ;    .
 448+ F5D4              ;-*-*-;                       ...    or (pos = xmax && rem >= delta y) then return
 449+ F5D4              ;-*-*-                        jr      z,.XPosLTEXMax          ;    .
 450+ F5D4              ;-*-*-                        ret     nc                      ;    .
 451+ F5D4              ;-*-*-.XPosLTEXMax:           ld      de,(clip_xmin)          ;    if x_pos == clip_xmin
 452+ F5D4              ;-*-*-                        call      CompareHLDESigned               ;    .
 453+ F5D4              ;-*-*-                        jr      nz,.XneClipMax          ;    and rem >= deltay
 454+ F5D4              ;-*-*-                        ld      hl,(rem)                ;    .
 455+ F5D4              ;-*-*-                        ld      de,(delta_y)            ;    .
 456+ F5D4              ;-*-*-                        call      CompareHLDESigned               ;    .
 457+ F5D4              ;-*-*-                        ret     c                       ;    then return
 458+ F5D4              ;-*-*-;                       ... save rem and set y pos to 0
 459+ F5D4              ;-*-*-                        ex      de,hl                   ;    save rem
 460+ F5D4              ;-*-*-                        ld      hl,0                    ;    y_pos = 0
 461+ F5D4              ;-*-*-;                       ... error = error + rem
 462+ F5D4              ;-*-*-                        ld      (y_pos),hl              ;    error += rem
 463+ F5D4              ;-*-*-                        ld      hl,(error)              ;    .
 464+ F5D4              ;-*-*-                        add     hl,de                   ;    .
 465+ F5D4              ;-*-*-                        ld      (error),hl              ;    .
 466+ F5D4              ;-*-*-;                       ... if rem >= delta y
 467+ F5D4              ;-*-*-                        ex      de,hl                   ;    if (rem >= delta_y)
 468+ F5D4              ;-*-*-                        ld      de,(delta_y)            ;    .
 469+ F5D4              ;-*-*-                        call      CompareHLDESigned               ;    .
 470+ F5D4              ;-*-*-                        jr      z,.RemGTEDeltaY         ;    .
 471+ F5D4              ;-*-*-                        jr      nc,.RemGTEDeltaY        ;    .
 472+ F5D4              ;-*-*-;                       ... ... x pos = x pos + 1
 473+ F5D4              ;-*-*-                        ld      hl,x_pos                ;       ++x_pos
 474+ F5D4              ;-*-*-                        inc     (hl)                    ;       .
 475+ F5D4              ;-*-*-                        ld      hl,(error)              ;       error += delta_y_step
 476+ F5D4              ;-*-*-                        ld      de,(delta_y_step)       ;       .
 477+ F5D4              ;-*-*-                        add     hl,de                   ;       .
 478+ F5D4              ;-*-*-                        ld      (error),hl              ;       .
 479+ F5D4              ;-*-*-.RemGTEDeltaY:
 480+ F5D4              ;-*-*-.Y1IsNotLT0:
 481+ F5D4              ;-*-*-.XneClipMax:            ld      hl,(y2Work)             ;  y_pos_end = y2
 482+ F5D4              ;-*-*-                        ld      (y_pos_end),hl          ;  .
 483+ F5D4              ;-*-*-                        ld      de,127                  ;  y_pos_end = (y_pos_end < 127)?y_pos_end+1:128
 484+ F5D4              ;-*-*-                        call      CompareHLDESigned               ;  .
 485+ F5D4              ;-*-*-                        jr      nc,.YPosEndlt127        ;  .
 486+ F5D4              ;-*-*-                        ld      hl,128                  ;  .
 487+ F5D4              ;-*-*-                        jp      .DoneXneClipMax         ;  .
 488+ F5D4              ;-*-*-.YPosEndlt127:          inc     hl                      ;  .
 489+ F5D4              ;-*-*-.DoneXneClipMax:        ld      (y_pos_end),hl          ;  .
 490+ F5D4              ;-*-*-                                                        ; if sign_x == -1
 491+ F5D4              ;-*-*-.Y2LTE127:              IsMemNegative8JumpFalse sign_x, .SignXNotNegative
 492+ F5D4              ;-*-*-.SignXNegative:         ld      hl,(x_pos)              ;    x_pos = -x_pos
 493+ F5D4              ;-*-*-                        NegHL                        ;    .
 494+ F5D4              ;-*-*-                        ld      (x_pos),hl              ;    .
 495+ F5D4              ;-*-*-                        ld      hl,(y2Work)             ;    x_pos_end = -x_pos_end
 496+ F5D4              ;-*-*-.SignXNotNegative:      ld      hl,(delta_y_step)       ; delta_y_step -= delta_x_step
 497+ F5D4              ;-*-*-                        ld      de,(delta_x_step)       ; .
 498+ F5D4              ;-*-*-                        ClearCarryFlag                  ; .
 499+ F5D4              ;-*-*-                        sbc     hl,de                   ; .
 500+ F5D4              ;-*-*-                        ld      hl,(delta_x_step)       ; .
 501+ F5D4              ;-*-*-;..................................................................................................................................
 502+ F5D4              ;-*-*-;--- Dx < Dy Longest while loop ------------------------;
 503+ F5D4              ;-*-*-L2DxLTDy:               ld      hl,(y_pos)              ;       starty=y_pos
 504+ F5D4              ;-*-*-                        ld      (starty),hl             ;       .
 505+ F5D4              ;-*-*-;--- Version where longest issaved ---------------------;
 506+ F5D4              ;-*-*-.LoadAlternateRegs:     ld      bc,(y_pos)              ;       we already have IY so just need xpos and end
 507+ F5D4              ;-*-*-                        ld      de,(y_pos_end)
 508+ F5D4              ;-*-*-                        ld      iy,(x_pos)
 509+ F5D4              ;-*-*-                        ld      hl,ix                   ;    load hl as target array
 510+ F5D4              ;-*-*-                        ld      a,c                     ;    by this point y pos must be 8 bit
 511+ F5D4              ;-*-*-                        add     hl,a                    ;    So we are setting up hl as targetArray pointer
 512+ F5D4              ;-*-*-                        add     hl,a
 513+ F5D4              ;-*-*-                        exx                             ;       switch to alternate registers
 514+ F5D4              ;-*-*-                        ld      hl,(error)              ;       load up stepping into alternate registers
 515+ F5D4              ;-*-*-                        ld      de,(delta_x_step)       ;       and error
 516+ F5D4              ;-*-*-                        ld      bc,(delta_y_step)       ;
 517+ F5D4              ;-*-*-                        exx                             ;       and then switch back to main registers
 518+ F5D4              ;-*-*-                        ld      a,(sign_x)              ;       if Sign x is -1
 519+ F5D4              ;-*-*-                        and     $80                     ;       .
 520+ F5D4              ;-*-*-                        jr      z,.SetWhileInc          ;       .
 521+ F5D4              ;-*-*-.SetWhileDec:           ld      a,InstrDECIY
 522+ F5D4              ;-*-*-                        ld      (.WhileIncInstuction+1),a; set self modifying to dec and 2 byte instruction
 523+ F5D4              ;-*-*-                        jp      .WhileLoop:             ;       .
 524+ F5D4              ;-*-*-.SetWhileInc:           ld      a,InstrINCIY
 525+ F5D4              ;-*-*-                        ld      (.WhileIncInstuction+1),a; else set to inc
 526+ F5D4              ;-*-*-;--- Update Loop ---------------------------------------;
 527+ F5D4              ;-*-*-; In loop hl  = target array pointer bc = x_pos,       de = x_pos_end, (we don't need to reatin Y_pos)
 528+ F5D4              ;-*-*-;         hl' = error                bc'= delta_y_step de'=delta_x_step
 529+ F5D4              ;-*-*-;- we coudl optimise by setting bc to y_pos_end - y_pos +1 and just doing djnz
 530+ F5D4              ;-*-*-.WhileLoop:             call    CompareBCDESigned       ;      while y_pos != y_pos_end
 531+ F5D4              ;-*-*-                        ret     z                       ;      .
 532+ F5D4              ;-*-*-                        ld      a,iyl
 533+ F5D4              ;-*-*-                        call    L2_plotAtRowLColA       ; targetArray[y_pos] = x_pos
 534+ F5D4              ;-*-*-                        inc     hl
 535+ F5D4              ;-*-*-                        ld      a,iyh
 536+ F5D4              ;-*-*-                        ld      (hl),a
 537+ F5D4              ;-*-*-                        inc     hl
 538+ F5D4              ;-*-*-                        exx                             ;        if error >= 0
 539+ F5D4              ;-*-*-                        bit     7,h                     ;        .
 540+ F5D4              ;-*-*-                        jr      nz,.ErrorNegative       ;        .
 541+ F5D4              ;-*-*-.WhileIncInstuction:    inc     iy                      ;             x_pos += sign_x (doneas self modifying to inc or dec)
 542+ F5D4              ;-*-*-.ErrorPositive:         ClearCarryFlag                  ;             error -= delta_y_step
 543+ F5D4              ;-*-*-                        sbc     hl,bc                   ;             .
 544+ F5D4              ;-*-*-                        jp      .LoopEnd                ;             .
 545+ F5D4              ;-*-*-.ErrorNegative:         add     hl,de                   ;        else error += delta x step
 546+ F5D4              ;-*-*-.LoopEnd:               exx                             ;             back to main regsters
 547+ F5D4              ;-*-*-                        inc     bc                      ;        ++y_pos
 548+ F5D4              ;-*-*-                        jp      .WhileLoop
 549+ F5D4              ;-*-*-
 550+ F5D4              ;-*-*-
 551+ F5D4              ;-*-*-;---------------------------------
 552+ F5D4              ;-*-*-L2_plotAtRowLColC:      ld      a,c
 553+ F5D4              ;-*-*-L2_plotAtRowLColA:      push    bc,,de,,hl,,af
 554+ F5D4              ;-*-*-                        ex      af,af'
 555+ F5D4              ;-*-*-                        push    af
 556+ F5D4              ;-*-*-                        ex      af,af'
 557+ F5D4              ;-*-*-                        ld      b,l
 558+ F5D4              ;-*-*-                        ld      c,a
 559+ F5D4              ;-*-*-                        ld      a,$FF                   ; white for now
 560+ F5D4              ;-*-*-                        call    l2_plot_pixel
 561+ F5D4              ;-*-*-                        pop     af
 562+ F5D4              ;-*-*-                        ex      af,af'
 563+ F5D4              ;-*-*-                        pop     bc,,de,,hl,,af
 564+ F5D4              ;-*-*-                        ret
 565+ F5D4              ;-*-*-
 566+ F5D4
 567+ F5D4 00 00        x1                      dw 0
 568+ F5D6 00 00        y1                      dw 0
 569+ F5D8 00 00        x2                      dw 0
 570+ F5DA 00 00        y2                      dw 0
 571+ F5DC 00 00        savex1                  dw 0
 572+ F5DE 00 00        savey1                  dw 0
 573+ F5E0 00 00        savex2                  dw 0
 574+ F5E2 00 00        savey2                  dw 0
 575+ F5E4 00 00        temp                    dw 0
 576+ F5E6 00           longest:                DB 0
 577+ F5E7 00 00        x1Work:                 DW 0
 578+ F5E9 00 00        y1Work:                 DW 0
 579+ F5EB 00 00        x2Work:                 DW 0
 580+ F5ED 00 00        y2Work:                 DW 0
 581+ F5EF 00 00        x_pos:                  DW 0
 582+ F5F1 00 00        y_pos:                  DW 0
 583+ F5F3 00 00        x_pos_end:              DW 0
 584+ F5F5 00 00        y_pos_end:              DW 0
 585+ F5F7 00 00        clip_xmax:              DW 0
 586+ F5F9 00 00        clip_xmin:              DW 0
 587+ F5FB 00 00        sign_x                  DW 0
 588+ F5FD 00           sign_y                  DB 0
 589+ F5FE 00 00        delta_x                 DW 0
 590+ F600 00 00        delta_y                 DW 0
 591+ F602 00 00        delta_y_x               DW 0 ; holds the compressed version for elite line draw
 592+ F604 00 00        delta_x_step            DW 0
 593+ F606 00 00        delta_y_step            DW 0
 594+ F608 00 00        linetemp                DW 0
 595+ F60A 00 00        gradient                DW 0
 596+ F60C 00 00        tSlope                  DW 0
 597+ F60E 00 00        msd                     DW 0
 598+ F610 00 00        error                   DW 0
 599+ F612 00           set_exit                DB 0
 600+ F613 00 00        rem                     DW 0
 601+ F615              InstrDECBC              equ $0B
 602+ F615              InstrINCBC              equ $03
 603+ F615              InstrDECIY              equ $2B
 604+ F615              InstrINCIY              equ $23
 605+ F615
 606+ F615              MACROAequBMinusC16:     MACRO   pA, pB, pC
 607+ F615 ~                                    ld      hl,(pB)                         ;       error = delta_y_step - delta_x;
 608+ F615 ~                                    ld      de,(pC)                         ; .
 609+ F615 ~                                    ClearCarryFlag                          ; .
 610+ F615 ~                                    sbc     hl,de                           ; .
 611+ F615 ~                                    ld      (pA),hl
 612+ F615                                      ENDM
 613+ F615              ;--- Swaps point 1 and point 2 around (i.e x1 y1 <--> x2 y2)
 614+ F615 2A D6 F5     SwapCoords:             ld      hl,(y1)                         ;       then swap point 1 and point 2
 615+ F618 ED 5B DA F5                          ld      de,(y2)                         ;       .
 616+ F61C ED 53 D6 F5                          ld      (y1),de                         ;       .
 617+ F620 22 DA F5                             ld      (y2),hl                         ;       .
 618+ F623 2A D4 F5                             ld      hl,(x1)                         ;       .
 619+ F626 ED 5B D8 F5                          ld      de,(x2)                         ;       .
 620+ F62A ED 53 D4 F5                          ld      (x1),de                         ;       .
 621+ F62E 22 D8 F5                             ld      (x2),hl                         ;       .
 622+ F631 C9                                   ret
 623+ F632
 624+ F632                      ; DEFINE SPLITLINE 1
 625+ F632
 626+ F632                      DEFINE CLIPPED_LINEX 1
 627+ F632                      DEFINE SPLITORLINEX  1
 628+ F632                      IFDEF SPLITLINE
 628+ F632 ~
 629+ F632 ~            l2_draw_clipped_line:
 630+ F632                      ENDIF
 631+ F632                      IFDEF CLIPPED_LINEX
 631+ F632
 632+ F632              l2_draw_clipped_lineX:
 633+ F632                      ENDIF
 634+ F632                      IFDEF SPLITORLINEX
 635+ F632 2A D6 F5                             ld      hl,(y1)                         ; if (y1 > y2)
 636+ F635 ED 5B DA F5                          ld      de,(y2)                         ; .
 637+ F639 CD 14 98                             call    CompareHLDESgn                  ; .
 638+ F63C DA 42 F6                             jp      c,.NoSwapCoords
 639+ F63F CD 15 F6     .SwapCoords:            call    SwapCoords
 640+ F642              .NoSwapCoords:
 641+ F642 ED 5B D6 F5  .CalcDX:                ld      de,(y1)                         ; Calculate |dy|
 642+ F646 2A DA F5                             ld      hl,(y2)                         ; .
 643+ F649                                      ClearCarryFlag                          ; .
 643+ F649 B7          >                        or a
 644+ F64A ED 52                                sbc     hl,de                           ; .
 645+ F64C E5 FD E1                             ld      iy,hl                           ; iy = |dy|
 646+ F64F ED 5B D4 F5  .CalcDy:                ld      de,(x1)                         ; Calculate |dx|
 647+ F653 2A D8 F5                             ld      hl,(x2)                         ; .
 648+ F656 06 00                                ld      b,0                             ; assume x1 < x2 and assume no negate needed
 649+ F658 CD 14 98                             call    CompareHLDESgn                  ;
 650+ F65B D2 60 F6                             jp      nc,.DxNoSwap                     ;
 651+ F65E EB           .DxSwap:                ex      de,hl                           ; swap just x over
 652+ F65F 04                                   inc     b                               ; and flag that we had to do it
 653+ F660              .DxNoSwap:              ClearCarryFlag                          ;
 653+ F660 B7          >                        or a
 654+ F661 ED 52                                sbc     hl,de                           ;
 655+ F663 E5 DD E1                             ld      ix,hl                           ; ix = |dx|
 656+ F666 DD 7C        .CheckForHuge:          ld      a,ixh                           ; if either dx or dy > 255 then split line
 657+ F668 FD B4                                or      iyh                             ; .
 658+ F66A C2 7E F6                             jp      nz, .BreakNeeded                ; .
 659+ F66D DD 7D        .ChecktGT180:           ld      a,ixl
 660+ F66F FE B4                                cp      180
 661+ F671 D2 7E F6                             jp      nc,.BreakNeeded
 662+ F674 FD 7D                                ld      a,iyl
 663+ F676 FE B4                                cp      180
 664+ F678 D2 7E F6                             jp      nc,.BreakNeeded
 665+ F67B C3 E2 F6                             jp      .noBreakNeeded
 666+ F67E              .BreakNeeded:           ldCopy2Byte y1, savey1                  ;       savey1 = y1                     create savey1 (y1) to savey2 (y break)
 666+ F67E 2A D6 F5    >                        ld       hl,(y1)
 666+ F681 22 DE F5    >                        ld       (savey1),hl
 667+ F684                                      ShiftIYRight1                           ;       savey2 = y1 + (work_dy/2)
 667+ F684 FD 7C       >			   ld 	a,iyh
 667+ F686 CB 3F       >			   srl 	a
 667+ F688 FD 67       >			   ld	iyh,a
 667+ F68A FD 7D       >			   ld 	a,iyl
 667+ F68C 1F          >			   rra
 667+ F68D FD 6F       >			   ld	iyl,a
 668+ F68F 2A D6 F5                             ld      hl,(y1)                         ;       .
 669+ F692                                      ClearCarryFlag                          ;       .
 669+ F692 B7          >                        or a
 670+ F693 FD 54 FD 5D                          ld      de,iy
 671+ F697 ED 5A                                adc     hl,de                           ;       .
 672+ F699 22 E2 F5                             ld      (savey2),hl                     ;       .
 673+ F69C 22 D6 F5                             ld      (y1),hl                         ;       y1     = savey2, y2 untouched   create y1 (break) to y2
 674+ F69F 05                                   dec     b                               ;       if b was 1 then decb would set z flag so we know that x1 > x2
 675+ F6A0 C2 A6 F6                             jp      nz,.X1gtX2
 676+ F6A3 CD 15 F6     .X1lteX2:               call    SwapCoords
 677+ F6A6              .X1gtX2:                ldCopy2Byte x1, savex1                  ;       savex1 = x1                     create savex1 (x1) to savex2 (x break)
 677+ F6A6 2A D4 F5    >                        ld       hl,(x1)
 677+ F6A9 22 DC F5    >                        ld       (savex1),hl
 678+ F6AC                                      ShiftIXRight1                           ;       savex2 = x1 + (work_dx/2)
 678+ F6AC DD 7C       >			   ld 	a,ixh
 678+ F6AE CB 3F       >			   srl 	a
 678+ F6B0 DD 67       >			   ld	ixh,a
 678+ F6B2 DD 7D       >			   ld 	a,ixl
 678+ F6B4 1F          >			   rra
 678+ F6B5 DD 6F       >			   ld	ixl,a
 679+ F6B7 2A D4 F5                             ld      hl,(x1)                         ;       .
 680+ F6BA                                      ClearCarryFlag                          ;       .
 680+ F6BA B7          >                        or a
 681+ F6BB DD 54 DD 5D                          ld      de,ix
 682+ F6BF ED 5A                                adc     hl,de                           ;       .
 683+ F6C1 22 E0 F5                             ld      (savex2),hl                     ;       .
 684+ F6C4 22 D4 F5                             ld      (x1),hl                         ;       x1     = savex1, x2 untouched  create x1 (break to x2)
 685+ F6C7                      ENDIF
 686+ F6C7                      IFDEF SPLITLINE
 687+ F6C7 ~                                    call    l2_draw_short_line              ;       drawshortLine
 688+ F6C7                      ENDIF
 689+ F6C7                      IFDEF CLIPPED_LINEX
 690+ F6C7 CD E2 F6                             call    l2_draw_clipped_line
 691+ F6CA                      ENDIF
 692+ F6CA                      IFDEF SPLITORLINEX
 693+ F6CA                                      ldCopyWord savex1,x1
 693+ F6CA             >                        ldCopy2Byte savex1, x1
 693+ F6CA 2A DC F5    >                        ld       hl,(savex1)
 693+ F6CD 22 D4 F5    >                        ld       (x1),hl
 694+ F6D0                                      ldCopyWord savey1,y1
 694+ F6D0             >                        ldCopy2Byte savey1, y1
 694+ F6D0 2A DE F5    >                        ld       hl,(savey1)
 694+ F6D3 22 D6 F5    >                        ld       (y1),hl
 695+ F6D6                                      ldCopyWord savex2,x2
 695+ F6D6             >                        ldCopy2Byte savex2, x2
 695+ F6D6 2A E0 F5    >                        ld       hl,(savex2)
 695+ F6D9 22 D8 F5    >                        ld       (x2),hl
 696+ F6DC                                      ldCopyWord savey2,y2
 696+ F6DC             >                        ldCopy2Byte savey2, y2
 696+ F6DC 2A E2 F5    >                        ld       hl,(savey2)
 696+ F6DF 22 DA F5    >                        ld       (y2),hl
 697+ F6E2              .noBreakNeeded:         // Falls straight into l2_draw_short_line
 698+ F6E2                      ENDIF
 699+ F6E2                      IFDEF SPLITLINE
 699+ F6E2 ~
 700+ F6E2 ~            l2_draw_short_line:     ; check out of bounds
 701+ F6E2                      ENDIF
 702+ F6E2                      IFDEF CLIPPED_LINEX
 703+ F6E2              l2_draw_clipped_line:
 704+ F6E2                      ENDIF
 705+ F6E2                      IFDEF SPLITORLINEX
 706+ F6E2 2A D4 F5     CheckForOnScreen:       ld      hl,(x1)
 707+ F6E5 ED 5B D8 F5                          ld      de,(x2)
 708+ F6E9 CB 7C        .X1X2NegativeCheck:     bit     7,h                             ; if they are both negative then bail out
 709+ F6EB 28 03                                jr      z,.X1X2NotNegative
 710+ F6ED CB 7A                                bit     7,d
 711+ F6EF C0           .X1X2IsNegative:        ret     nz
 712+ F6F0 7C           .X1X2NotNegative:       ld      a,h                             ; if they are both not negative then if one is negative that is good
 713+ F6F1 AA                                   xor     d
 714+ F6F2 FA FD F6                             jp      m,.X1X2SpanScreen
 715+ F6F5 7C           .X1X2BothPositive:      ld      a,h                             ; if x1 or x2 high is zero then at least one pixel is on screen
 716+ F6F6 A7                                   and     a
 717+ F6F7 CA FD F6                             jp      z,.X1X2SpanScreen
 718+ F6FA 7A                                   ld      a,d                             ; if x1 was > 255 then if x2 > 255 bail out
 719+ F6FB A7                                   and     a
 720+ F6FC C0                                   ret     nz
 721+ F6FD 2A D6 F5     .X1X2SpanScreen:        ld      hl,(y1)
 722+ F700 ED 5B DA F5                          ld      de,(y2)
 723+ F704 CB 7C        .Y1Y2NegativeCheck:     bit     7,h                             ; if they are both negative then bail out
 724+ F706 28 03                                jr      z,.Y1Y2NotNegative
 725+ F708 CB 7A                                bit     7,d
 726+ F70A C0           .Y1Y2IsNegative:        ret     nz
 727+ F70B 7C           .Y1Y2NotNegative:       ld      a,h                             ; if they are both not negative then if one is negative that is good
 728+ F70C AA                                   xor     d
 729+ F70D FA 1F F7                             jp      m,.Y1Y2SpanScreen
 730+ F710 01 80 00     .Y1Y2BothPositive:      ld      bc,128                          ; if they are both positive and at least one is < 128 then carry on
 731+ F713 CD 48 98                             call    CompareHLBC
 732+ F716 38 07                                jr      c,.Y1Y2SpanScreen
 733+ F718 EB                                   ex      de,hl                           ; save y1 into de
 734+ F719 CD 48 98                             call    CompareHLBC
 735+ F71C 38 01                                jr      c,.Y1Y2SpanScreen
 736+ F71E C9                                   ret
 737+ F71F              .Y1Y2SpanScreen:
 738+ F71F CD 2B 98     CheckForHorizontal:     call    CompareHLDESame                 ; de = saved y1 , hl = y2
 739+ F722 CA 4E F5                             jp      z, l2_drawVertClip
 740+ F725 2A D4 F5     CheckForVertical:       ld      hl,(x1)
 741+ F728 ED 5B D8 F5                          ld      de,(x2)
 742+ F72C CD 2B 98                             call    CompareHLDESame
 743+ F72F CA 7F F5                             jp      z, l2_drawHorzClip
 744+ F732                                      ; Need horizontal and vertical optimisation code in at thispoint
 745+ F732 2A D6 F5     CheckForSwap:           ld      hl,(y1)                         ; if (y1 > y2)
 746+ F735 ED 5B DA F5                          ld      de,(y2)                         ; .
 747+ F739 CD 14 98                             call    CompareHLDESgn                  ; .
 748+ F73C DA 42 F7                             jp      c,.NoSwapCoords
 749+ F73F CD 15 F6     .SwapCoords:            call    SwapCoords
 750+ F742                                      ; Default in sign and clip ranges, sign 16 bit for now
 751+ F742 21 00 00     .NoSwapCoords:          ld      hl,0                            ; clip_xmin = 0;
 752+ F745 22 F9 F5                             ld      (clip_xmin),hl                  ; .
 753+ F748 2E FF                                ld      l,255                           ; clip xmax = 255;
 754+ F74A 22 F7 F5                             ld      (clip_xmax),hl                  ; .
 755+ F74D 21 01 00                             ld      hl,1                            ; sign_x = 1
 756+ F750 22 FB F5                             ld      (sign_x),hl                     ; .
 757+ F753                                      ; if moving right to left then swap signs and clip
 758+ F753 2A D4 F5                             ld      hl,(x1)                         ; if x1 > x2
 759+ F756 ED 5B D8 F5                          ld      de,(x2)                         ; .
 760+ F75A CD 14 98                             call    CompareHLDESgn                  ; .
 761+ F75D 38 2C                                jr      c,.X1tlX2                       ; .
 762+ F75F 21 FF FF     .X1gteX2:               ld      hl, -1                          ;        sign_x = 01
 763+ F762 22 FB F5                             ld      (sign_x),hl                     ;        .
 764+ F765 2A D4 F5                             ld      hl,(x1)                         ;        x1 = -x1;
 765+ F768                                      macronegate16hl                         ;        .
 765+ F768 AF          >					xor 	a
 765+ F769 95          >					sub 	l
 765+ F76A 6F          >					ld 		l,a
 765+ F76B 9F          >					sbc 	a,a
 765+ F76C 94          >					sub 	h
 765+ F76D 67          >					ld 		h,a
 766+ F76E 22 D4 F5                             ld      (x1),hl                         ;        .
 767+ F771 ED 5B D8 F5                          ld      de,(x2)                         ;        x2 = -x2;
 768+ F775                                      macronegate16de                         ;        .
 768+ F775 AF          >					xor 	a
 768+ F776 93          >                    sub 	e
 768+ F777 5F          >                    ld 		e,a
 768+ F778 9F          >                    sbc 	a,a
 768+ F779 92          >                    sub 	d
 768+ F77A 57          >                    ld 		d,a
 769+ F77B ED 53 D8 F5                          ld      (x2),de                         ;        .
 770+ F77F 21 01 FF                             ld      hl,-255                         ;        clip_xmin =-255;
 771+ F782 22 F9 F5                             ld      (clip_xmin),hl                  ;        .
 772+ F785 21 00 00                             ld      hl,0                            ;        clip_xmax = 0;
 773+ F788 22 F7 F5                             ld      (clip_xmax),hl                  ;        .
 774+ F78B              .X1tlX2:                                                        ;
 775+ F78B                                      ; calculate deltas
 776+ F78B 2A D8 F5     .DxEquX2MinusX1:        ld      hl,(x2)                         ; delta_x = x2 - x1;
 777+ F78E ED 5B D4 F5                          ld      de,(x1)                         ; .
 778+ F792                                      ClearCarryFlag                          ; .
 778+ F792 B7          >                        or a
 779+ F793 ED 52                                sbc     hl,de                           ; .
 780+ F795 22 FE F5                             ld      (delta_x),hl                    ; .
 781+ F798 2A DA F5     .DyEquY2MinusY1:        ld      hl,(y2)                         ; delta_y = y2 - y1;
 782+ F79B ED 5B D6 F5                          ld      de,(y1)                         ; .
 783+ F79F                                      ClearCarryFlag                          ; .
 783+ F79F B7          >                        or a
 784+ F7A0 ED 52                                sbc     hl,de                           ; .
 785+ F7A2 22 00 F6                             ld      (delta_y),hl                    ; .
 786+ F7A5 ED 5B FE F5  .ScaleDeltaXY:          ld      de,(delta_x)                    ; we already have delta y but x could be negative
 787+ F7A9 06 00                                ld      b,0
 788+ F7AB CB 7A                                bit     7,d
 789+ F7AD CA B7 F7                             jp      z,.DeltaYABSDone                ; de = | de |, b = 1 to denote negative needs resetting
 790+ F7B0 04                                   inc     b
 791+ F7B1                                      macronegate16de
 791+ F7B1 AF          >					xor 	a
 791+ F7B2 93          >                    sub 	e
 791+ F7B3 5F          >                    ld 		e,a
 791+ F7B4 9F          >                    sbc 	a,a
 791+ F7B5 92          >                    sub 	d
 791+ F7B6 57          >                    ld 		d,a
 792+ F7B7              .DeltaYABSDone:
 793+ F7B7 ~            /*.ScaleHighLoop:         ld      a,d
 794+ F7B7 ~                                    or      h
 795+ F7B7 ~                                    jr      z,.HighScaleDone
 796+ F7B7 ~                                    ShiftDERight1
 797+ F7B7 ~                                    ShiftHLRight1
 798+ F7B7 ~                                    jp      .ScaleHighLoop
 799+ F7B7 ~            .HighScaleDone:
 800+ F7B7 ~            .LowScaleLoop:          ld      a,e
 801+ F7B7 ~                                    or      l
 802+ F7B7 ~                                    and     $80
 803+ F7B7 ~                                    jr      z,.LowScaleDone
 804+ F7B7 ~                                    ShiftDERight1
 805+ F7B7 ~                                    ShiftHLRight1
 806+ F7B7 ~                                    jp      .LowScaleLoop
 807+ F7B7 ~            .LowScaleDone:          bit     0,b
 808+ F7B7 ~                                    jr      z,.DeltaDone
 809+ F7B7 ~            .SortDXSign:            macronegate16de
 810+ F7B7 ~            .DeltaDone:             ld      (delta_x),de
 811+ F7B7 ~                                    ld      (delta_y),hl*/
 812+ F7B7 2A FE F5     .DeltaXStepCalc:        ld     hl, (delta_x)
 813+ F7BA                                      ClearCarryFlag                          ; delta_x_step = 2 * delta_x;
 813+ F7BA B7          >                        or a
 814+ F7BB ED 6A                                adc     hl,hl                           ; .
 815+ F7BD 22 04 F6                             ld      (delta_x_step),hl               ; .
 816+ F7C0 2A 00 F6     .DeltaYStepCalc:        ld     hl, (delta_y)
 817+ F7C3                                      ClearCarryFlag                          ; delta_y_step = 2 * delta_y;
 817+ F7C3 B7          >                        or a
 818+ F7C4 ED 6A                                adc     hl,hl                           ; .
 819+ F7C6 22 06 F6                             ld      (delta_y_step),hl               ; .
 820+ F7C9 2A D4 F5                             ld      hl,(x1)                         ; x_pos = x1;
 821+ F7CC 22 EF F5                             ld      (x_pos),hl                      ; .
 822+ F7CF ED 5B D6 F5                          ld      de,(y1)                         ; y_pos = y1;
 823+ F7D3 ED 53 F1 F5                          ld      (y_pos),de                      ; .
 824+ F7D7                                      ; check if we are workign on dx or dy
 825+ F7D7 2A FE F5     .CompareDxDy:           ld      hl,(delta_x)                    ; if (delta_x >= delta_y)
 826+ F7DA ED 5B 00 F6                          ld      de,(delta_y)
 827+ F7DE CD 14 98                             call    CompareHLDESgn
 828+ F7E1 DA 28 FA                             jp      c, LineDrawDxLTDy
 829+ F7E4              ;.......................DxGteDy branch.............................................................................................
 830+ F7E4 2A 06 F6     LineDrawDxGteDy:        ld      hl,(delta_y_step)               ;       error = delta_y_step - delta_x;
 831+ F7E7 ED 5B FE F5                          ld      de,(delta_x)                    ;       .
 832+ F7EB                                      ClearCarryFlag                          ;       .
 832+ F7EB B7          >                        or a
 833+ F7EC ED 52                                sbc     hl,de                           ;       .
 834+ F7EE 22 10 F6                             ld      (error),hl                      ;       .
 835+ F7F1                                      ZeroA                                   ;       set exit false (0 == false)
 835+ F7F1 AF          >                        xor a
 836+ F7F2 32 12 F6                             ld      (set_exit),a                    ;       .
 837+ F7F5                                      ; clipping of negative y1
 838+ F7F5 2A D6 F5                             ld      hl,(y1)                         ;       if (y1 < 0)
 839+ F7F8 CB 7C                                bit     7,h                             ;       .
 840+ F7FA CA 92 F8                             jp      z,.y1GTE0                       ;       .
 841+ F7FD 2A D6 F5     .y1LT0:                 ld      hl,(y1)                         ;           temp = (2 * (0 - y1) - 1) * delta_x;
 842+ F800                                      macronegate16hl                         ;               hl = |y1|
 842+ F800 AF          >					xor 	a
 842+ F801 95          >					sub 	l
 842+ F802 6F          >					ld 		l,a
 842+ F803 9F          >					sbc 	a,a
 842+ F804 94          >					sub 	h
 842+ F805 67          >					ld 		h,a
 843+ F806                                      ClearCarryFlag
 843+ F806 B7          >                        or a
 844+ F807 ED 6A                                adc     hl,hl                           ;               hl = (2 * |y1|)
 845+ F809 2B                                   dec     hl                              ;               hl = (2 * |y1| - 1)
 846+ F80A ED 5B FE F5                          ld      de,(delta_x)                    ;               hl = hl * delta_x
 847+ F80E CD C3 90                             call    mulHLbyDE2sc                    ;               .
 848+ F811 22 E4 F5                             ld      (temp),hl                       ;               save to temp
 849+ F814 44 4D                                ld      bc,hl                           ;            msd = temp / delta_y_step
 850+ F816 ED 5B 06 F6                          ld      de,(delta_y_step)               ;               BC = BC / DE, HL = BC % DE
 851+ F81A CD E7 95                             call    Floor_DivQ                      ;               .
 852+ F81D ED 43 0E F6                          ld      (msd),bc                        ;               .
 853+ F821 2A EF F5                             ld      hl,(x_pos)                      ;            x_pos += msd
 854+ F824                                      ClearCarryFlag
 854+ F824 B7          >                        or a
 855+ F825 ED 4A                                adc     hl,bc                           ;            .
 856+ F827 22 EF F5                             ld      (x_pos),hl                      ;            .
 857+ F82A ED 5B F7 F5                          ld      de,(clip_xmax)                  ;            if (x_pos >= clip_xmax)
 858+ F82E CD 2B 98                             call    CompareHLDESame                 ;            .
 859+ F831 CA 38 F8                             jp      z,.xposLTEClipxmax              ;            .
 860+ F834 CD 14 98                             call    CompareHLDESgn                  ;            .
 861+ F837 D0                                   ret     nc                              ;               return
 862+ F838 2A EF F5     .xposLTEClipxmax:       ld      hl,(x_pos)                      ;            if (x_pos >= clip_xmin)
 863+ F83B ED 5B F9 F5                          ld      de,(clip_xmin)                  ;            .
 864+ F83F CD 14 98                             call    CompareHLDESgn                  ;            .
 865+ F842 DA 92 F8                             jp      c,.xposLTxmin                   ;            .
 866+ F845 2A 0E F6     .xposGTExmin:           ld      hl,(msd)                        ;               rem = temp - (msd * delta_y_step) (its really IY from floor_divq)
 867+ F848 ED 5B 06 F6                          ld      de,(delta_y_step)               ;                   de = msd * delta_y_step
 868+ F84C CD C3 90                             call    mulHLbyDE2sc                    ;                   .
 869+ F84F EB                                   ex      de,hl                           ;                   .
 870+ F850 2A E4 F5                             ld      hl,(temp)                       ;                   hl = temp - de
 871+ F853                                      ClearCarryFlag                          ;                   .
 871+ F853 B7          >                        or a
 872+ F854 ED 52                                sbc     hl,de                           ;                   .
 873+ F856 22 13 F6                             ld      (rem),hl                        ;                   .
 874+ F859 11 00 00                             ld      de,0                            ;               y_pos = 0
 875+ F85C ED 53 F1 F5                          ld      (y_pos),de                      ;               .
 876+ F860 ED 5B 13 F6                          ld      de,(rem)                        ;               error -= rem + delta_x
 877+ F864                                      ClearCarryFlag
 877+ F864 B7          >                        or a
 878+ F865 ED 5A                                adc     hl,de                           ;                   de = rem+delta_x
 879+ F867 EB                                   ex      de,hl                           ;                   .
 880+ F868 2A 10 F6                             ld      hl,(error)                      ;                   hl = error - de
 881+ F86B                                      ClearCarryFlag                          ;                   .
 881+ F86B B7          >                        or a
 882+ F86C ED 52                                sbc     hl,de                           ;                   .
 883+ F86E 22 10 F6                             ld      (error),hl                      ;                   write to error
 884+ F871 2A 13 F6                             ld      hl,(rem)                        ;               if (rem > 0)
 885+ F874 7C                                   ld      a,h                             ;               .
 886+ F875 B5                                   or      l                               ;               .
 887+ F876 CA 8D F8                             jp      z,.remLte0                      ;               .
 888+ F879 2A EF F5     .remGT0:                ld      hl,(x_pos)                      ;                   x_pos += 1;
 889+ F87C 23                                   inc     hl                              ;                   .
 890+ F87D 22 EF F5                             ld      (x_pos),hl                      ;                   .
 891+ F880 2A 10 F6                             ld      hl,(error)                      ;                   error += delta_y_step;
 892+ F883 ED 5B 06 F6                          ld      de,(delta_y_step)               ;                   .
 893+ F887                                      ClearCarryFlag                          ;                   .
 893+ F887 B7          >                        or a
 894+ F888 ED 5A                                adc     hl,de                           ;                   .
 895+ F88A 22 10 F6                             ld      (error),hl                      ;                   .
 896+ F88D 3E 01        .remLte0:               ld      a,1                             ;               set exit = true
 897+ F88F 32 12 F6                             ld      (set_exit),a                    ;               .
 898+ F892              .xposLTxmin:
 899+ F892 3A 12 F6     .y1GTE0:                ld      a,(set_exit)                    ;           if (!set_exit && x1 < clip_xmin)
 900+ F895 A7                                   and     a                               ;           .
 901+ F896 C2 26 F9                             jp      nz,.exit_false                  ;           .   Exit if set_exit is true
 902+ F899 2A D4 F5                             ld      hl,(x1)                         ;           .
 903+ F89C ED 5B F9 F5                          ld      de,(clip_xmin)                  ;           .   Exit if x1 > xmin
 904+ F8A0 CD 14 98                             call    CompareHLDESgn                  ;           .
 905+ F8A3 D2 26 F9                             jp      nc,.exit_false                  ;           .
 906+ F8A6 EB                                   ex      de,hl                           ;               temp = delta_y_step * (clip_xmin - x1)
 907+ F8A7 ED 5B D4 F5                          ld      de,(x1)                         ;                   (clip_xmin - x1) (already have clip_xmin in de)
 908+ F8AB                                      ClearCarryFlag                          ;                   .
 908+ F8AB B7          >                        or a
 909+ F8AC ED 52                                sbc     hl,de                           ;                   .
 910+ F8AE ED 5B 06 F6                          ld      de,(delta_y_step)               ;                   hl = delta_y_step * (clip_xmin - x1)
 911+ F8B2 CD C3 90                             call    mulHLbyDE2sc                    ;                   .
 912+ F8B5 22 E4 F5                             ld      (temp),hl                       ;                   .
 913+ F8B8 44 4D        .msdEQtempDIVdxstep:    ld      bc,hl                           ;               msd = temp / delta_x_step
 914+ F8BA ED 5B 04 F6                          ld      de,(delta_x_step)               ;                  BC = BC / DE, HL = BC % DE
 915+ F8BE CD E7 95                             call    Floor_DivQ                      ;                  .
 916+ F8C1 ED 43 0E F6                          ld      (msd),bc                        ;                  .
 917+ F8C5 E5 FD E1                             ld      iy,hl                           ;                  save BC%DE into HL (temp % delta x step0
 918+ F8C8 2A F1 F5     .yposPlusmsd:           ld      hl,(y_pos)                      ;               y_pos += msd
 919+ F8CB                                      ClearCarryFlag                          ;                   bc already is msd
 919+ F8CB B7          >                        or a
 920+ F8CC ED 4A                                adc     hl,bc                           ;                   hl += bc
 921+ F8CE 22 F1 F5                             ld      (y_pos),hl                      ;                   .
 922+ F8D1 FD E5 E1                             ld      hl,iy                           ;               rem = temp % delta_x_step (which is in IY)
 923+ F8D4 22 13 F6                             ld      (rem),hl                        ;               .
 924+ F8D7 2A F1 F5                             ld      hl,(y_pos)                      ;           if ((y_pos > 127) || (y_pos == 127 && rem >= delta_x))
 925+ F8DA 11 7F 00                             ld      de,127                          ;           .
 926+ F8DD CD 2B 98                             call    CompareHLDESame                 ;           .    if y_pos != clipxmax skip the abort test
 927+ F8E0 20 0B                                jr      nz,.YPosNotClipymax             ;           .
 928+ F8E2 2A 13 F6                             ld      hl,(rem)                        ;           .    if rem < delta_y  skip the abort test
 929+ F8E5 ED 5B FE F5                          ld      de,(delta_x)                    ;           .
 930+ F8E9 CD 14 98                             call    CompareHLDESgn                  ;           .
 931+ F8EC D8                                   ret     c                               ;           .
 932+ F8ED EB           .YPosNotClipymax:       ex      de,hl                           ;           .    swap over xpos and max to compare xpos > xmax
 933+ F8EE CD 14 98                             call    CompareHLDESgn                  ;           .    if xpos > clipxmax then return (i.e clipxmax - xpos had a carry)
 934+ F8F1 D8                                   ret     c
 935+ F8F2 2A F9 F5     .yposLT127:             ld      hl,(clip_xmin)                  ;               x_pos = clip_xmin;
 936+ F8F5 22 EF F5                             ld      (x_pos),hl                      ;               .
 937+ F8F8 2A 10 F6                             ld      hl,(error)                      ;               error += rem
 938+ F8FB ED 5B 13 F6                          ld      de,(rem)                        ;               .
 939+ F8FF                                      ClearCarryFlag                          ;               .
 939+ F8FF B7          >                        or a
 940+ F900 ED 5A                                adc     hl,de                           ;               .
 941+ F902 22 10 F6                             ld      (error),hl                      ;               .
 942+ F905 2A 13 F6                             ld      hl,(rem)                        ;               if (rem >= delta_x)
 943+ F908 ED 5B FE F5                          ld      de,(delta_x)                    ;               .
 944+ F90C CD 14 98                             call    CompareHLDESgn                  ;               .
 945+ F90F DA 26 F9                             jp      c,.remLTDeltaX                  ;               .
 946+ F912 2A F1 F5     .remGTEDeltaX:          ld      hl,(y_pos)                      ;                   y_pos++
 947+ F915 23                                   inc     hl
 948+ F916 22 F1 F5                             ld      (y_pos),hl
 949+ F919 2A 10 F6                             ld      hl,(error)                      ;                    error -= delta_x_step;
 950+ F91C ED 5B 04 F6                          ld      de,(delta_x_step)               ;                    .
 951+ F920                                      ClearCarryFlag                          ;                    .
 951+ F920 B7          >                        or a
 952+ F921 ED 52                                sbc     hl,de                           ;                    .
 953+ F923 22 10 F6                             ld      (error),hl                      ;                    .
 954+ F926              .remLTDeltaX:
 955+ F926 2A D8 F5     .exit_false:            ld      hl,(x2)                         ;           x_pos_end = x2;
 956+ F929 22 F3 F5                             ld      (x_pos_end),hl                  ;           .
 957+ F92C 2A DA F5                             ld      hl,(y2)                         ;           if (y2 > 127)
 958+ F92F 11 7F 00                             ld      de,127                          ;           .
 959+ F932 CD 2B 98                             call    CompareHLDESame                 ;           .   if y2 is zero fails check
 960+ F935 CA 8C F9                             jp      z,.y2LTE127                     ;           .
 961+ F938 CD 14 98                             call    CompareHLDESgn                  ;           .   if y2 < 127 then there is carry so fails check
 962+ F93B DA 8C F9                             jp      c,.y2LTE127                      ;           .
 963+ F93E 21 7F 00     .y2GT127:               ld      hl,127                          ;               temp = delta_x_step * (127 - y1) + delta_x;
 964+ F941 ED 5B D6 F5                          ld      de,(y1)                         ;                   hl = 127-y1
 965+ F945                                      ClearCarryFlag                          ;
 965+ F945 B7          >                        or a
 966+ F946 ED 52                                sbc     hl,de
 967+ F948 ED 5B 04 F6                          ld      de,(delta_x_step)               ;                   hl = delta_x_step * (127-y1)
 968+ F94C CD C3 90                             call    mulHLbyDE2sc                    ;                   .
 969+ F94F ED 5B FE F5                          ld      de,(delta_x)                    ;                   hl += delta_x
 970+ F953                                      ClearCarryFlag                          ;                   .
 970+ F953 B7          >                        or a
 971+ F954 ED 5A                                adc     hl,de                           ;                   .
 972+ F956 22 E4 F5                             ld      (temp),hl
 973+ F959 44 4D                                ld      bc,hl
 974+ F95B ED 5B 06 F6                          ld      de,(delta_y_step)               ;               msd = temp / delta y step
 975+ F95F CD E7 95                             call    Floor_DivQ                      ;               .
 976+ F962 ED 43 0E F6                          ld      (msd),bc                        ;               .
 977+ F966 2A D4 F5                             ld      hl,(x1)                         ;               x_pos_end = x1 + msd;
 978+ F969                                      ClearCarryFlag                          ;               .
 978+ F969 B7          >                        or a
 979+ F96A ED 4A                                adc     hl,bc                           ;               .
 980+ F96C 22 F3 F5                             ld      (x_pos_end),hl                  ;               .
 981+ F96F 2A 0E F6                             ld      hl,(msd)                        ;               if ((temp - msd * delta_y_step) == 0) --x_pos_end
 982+ F972 ED 5B 06 F6                          ld      de,(delta_y_step)               ;               .
 983+ F976 CD C3 90                             call    mulHLbyDE2sc                    ;               .
 984+ F979 EB                                   ex      de,hl                           ;               .
 985+ F97A 2A E4 F5                             ld      hl,(temp)                       ;               .
 986+ F97D                                      ClearCarryFlag                          ;               .
 986+ F97D B7          >                        or a
 987+ F97E ED 52                                sbc     hl,de                           ;               .
 988+ F980 7C                                   ld      a,h                             ;               .
 989+ F981 B5                                   or      l                               ;               .
 990+ F982 C2 8C F9                             jp      nz,.NotTheSame                  ;               .
 991+ F985 2A F3 F5     .IsTheSame:             ld      hl,(x_pos_end)                  ;                   --x_pos_end
 992+ F988 2B                                   dec     hl                              ;                   .
 993+ F989 22 F3 F5                             ld      (x_pos_end),hl                  ;                   .
 994+ F98C              .NotTheSame:
 995+ F98C 2A F3 F5     .y2LTE127:              ld      hl,(x_pos_end)                  ;           x_pos_end = min (x_pos_end,clip_xmax) + 1
 996+ F98F ED 5B F7 F5                          ld      de,(clip_xmax)                  ;           .
 997+ F993 CD 14 98                             call    CompareHLDESgn                  ;           .
 998+ F996 D2 A3 F9                             jp      nc,.xposgtexmax                 ;           .
 999+ F999 2A F3 F5     .xposltxmax:            ld      hl,(x_pos_end)                  ;           .
1000+ F99C 23                                   inc     hl                              ;               x_pos_end+1
1001+ F99D 22 F3 F5                             ld      (x_pos_end),hl                  ;               .
1002+ F9A0 C3 A8 F9                             jp      .DoneXposAdjust                 ;               .
1003+ F9A3 13           .xposgtexmax:           inc     de                              ;               else
1004+ F9A4 ED 53 F3 F5                          ld      (x_pos_end),de                  ;               clip_xmax+1
1005+ F9A8 3A FB F5     .DoneXposAdjust:        ld      a,(sign_x)                      ;           if (sign_x == -1)
1006+ F9AB 3C                                   inc     a
1007+ F9AC C2 C7 F9                             jp      nz,.SignNotMinus1
1008+ F9AF 2A EF F5     .SignEquMinus1:         ld      hl,(x_pos)                      ;               x_pos = -x_pos;
1009+ F9B2                                      macronegate16hl
1009+ F9B2 AF          >					xor 	a
1009+ F9B3 95          >					sub 	l
1009+ F9B4 6F          >					ld 		l,a
1009+ F9B5 9F          >					sbc 	a,a
1009+ F9B6 94          >					sub 	h
1009+ F9B7 67          >					ld 		h,a
1010+ F9B8 22 EF F5                             ld      (x_pos),hl
1011+ F9BB 2A F3 F5                             ld      hl,(x_pos_end)                  ;               x_pos_end = -x_pos_end;
1012+ F9BE                                      macronegate16hl
1012+ F9BE AF          >					xor 	a
1012+ F9BF 95          >					sub 	l
1012+ F9C0 6F          >					ld 		l,a
1012+ F9C1 9F          >					sbc 	a,a
1012+ F9C2 94          >					sub 	h
1012+ F9C3 67          >					ld 		h,a
1013+ F9C4 22 F3 F5                             ld      (x_pos_end),hl
1014+ F9C7              .y2LTE27:
1015+ F9C7              .SignNotMinus1:
1016+ F9C7 ED 5B 06 F6                          ld      de,(delta_y_step)               ;        delta_x_step -= delta_y_step;
1017+ F9CB 2A 04 F6                             ld      hl,(delta_x_step)               ;        .
1018+ F9CE                                      ClearCarryFlag                          ;        .
1018+ F9CE B7          >                        or a
1019+ F9CF ED 52                                sbc     hl,de                           ;        .
1020+ F9D1 22 04 F6                             ld      (delta_x_step),hl               ;        .
1021+ F9D4 2A EF F5     .PlottingLoop:          ld      hl,(x_pos)                      ;        while (x_pos != x_pos_end)
1022+ F9D7 ED 5B F3 F5                          ld      de,(x_pos_end)                  ;        .
1023+ F9DB CD 2B 98                             call    CompareHLDESame                 ;        .
1024+ F9DE C8                                   ret     z                               ;        .
1025+ F9DF 2A EF F5                             ld      hl,(x_pos)                      ;               drawpixel at xpos, ypos, Colour
1026+ F9E2 4D                                   ld      c,l                             ;               .
1027+ F9E3 2A F1 F5                             ld      hl,(y_pos)                      ;               .
1028+ F9E6 45                                   ld      b,l                             ;               .
1029+ F9E7 3E BF                                ld      a,$BF                           ;               .
1030+ F9E9 CD B6 E2     .PlotPixel:             call    l2_plot_pixel                   ;               .
1031+ F9EC 2A 10 F6                             ld      hl,(error)                      ;               if (error >= 0)
1032+ F9EF CB 7C                                bit     7,h                             ;               .
1033+ F9F1 C2 0B FA                             jp      nz,.errorLT0                    ;               .
1034+ F9F4 2A F1 F5     .errorGTE0:             ld	    hl,(y_pos)                      ;                   ++y_pos;
1035+ F9F7 23                                   inc	    hl                              ;                   .
1036+ F9F8 22 F1 F5                             ld	    (y_pos),hl                      ;                   .
1037+ F9FB 2A 10 F6                             ld	    hl,(error)                      ;                   error -= delta_x_step;
1038+ F9FE ED 5B 04 F6                          ld	    de,(delta_x_step)               ;                   .
1039+ FA02                                      ClearCarryFlag                          ;                   .
1039+ FA02 B7          >                        or a
1040+ FA03 ED 52                                sbc	    hl,de                           ;                   .
1041+ FA05 22 10 F6                             ld	    (error),hl                      ;                   .
1042+ FA08 C3 18 FA                             jp      .DoneErrorAdjust                ;                   .
1043+ FA0B 2A 10 F6     .errorLT0:              ld	    hl,(error)                      ;                   error += delta_y_step;
1044+ FA0E ED 5B 06 F6                          ld	    de,(delta_y_step)
1045+ FA12                                      ClearCarryFlag
1045+ FA12 B7          >                        or a
1046+ FA13 ED 5A                                adc	    hl,de
1047+ FA15 22 10 F6                             ld	    (error),hl
1048+ FA18 ED 5B FB F5  .DoneErrorAdjust:       ld      de,(sign_x)
1049+ FA1C 2A EF F5                             ld      hl,(x_pos)
1050+ FA1F                                      ClearCarryFlag
1050+ FA1F B7          >                        or a
1051+ FA20 ED 5A                                adc     hl,de
1052+ FA22 22 EF F5                             ld      (x_pos),hl
1053+ FA25 C3 D4 F9                             jp      .PlottingLoop
1054+ FA28              ;.......................DxGltDy branch.............................................................................................
1055+ FA28              LineDrawDxLTDy:         ;ret
1056+ FA28 2A 04 F6                             ld      hl,(delta_x_step)               ;       error = delta_x_step - delta_y;
1057+ FA2B ED 5B 00 F6                          ld      de,(delta_y)
1058+ FA2F                                      ClearCarryFlag
1058+ FA2F B7          >                        or a
1059+ FA30 ED 52                                sbc     hl,de
1060+ FA32 22 10 F6                             ld      (error),hl
1061+ FA35                                      ZeroA                                   ;        set exit false (0 == false)
1061+ FA35 AF          >                        xor a
1062+ FA36 32 12 F6                             ld      (set_exit),a
1063+ FA39 2A D4 F5                             ld      hl,(x1)                         ;        if (x1 < clip_xmin)
1064+ FA3C ED 5B F9 F5                          ld      de,(clip_xmin)                  ;        .
1065+ FA40 CD 14 98                             call    CompareHLDESgn                  ;        .
1066+ FA43 D2 D7 FA                             jp      nc,.x1GTEClipXmin               ;        .
1067+ FA46 ED 5B D4 F5  .x1LTClipXmin:          ld      de,(x1)                         ;           temp = (2 * (cllp_xmin - x1) - 1) * delta_y;
1068+ FA4A 2A F9 F5                             ld      hl,(clip_xmin)                  ;               hl = clip_xmin - x1
1069+ FA4D                                      ClearCarryFlag                          ;               .
1069+ FA4D B7          >                        or a
1070+ FA4E ED 52                                sbc     hl,de                           ;               .
1071+ FA50                                      ClearCarryFlag
1071+ FA50 B7          >                        or a
1072+ FA51 ED 6A                                adc     hl,hl                           ;               hl = (2* hl)
1073+ FA53 2B                                   dec     hl                              ;               hl = (2 *  hl - 1)
1074+ FA54 ED 5B 00 F6                          ld      de,(delta_y)                    ;               hl = hl  * delta_y
1075+ FA58 CD C3 90                             call    mulHLbyDE2sc                    ;               .
1076+ FA5B 22 E4 F5                             ld      (temp),hl                       ;               .
1077+ FA5E 44 4D                                ld      bc,hl                           ;            msd = temp / delta_x_step
1078+ FA60 ED 5B 04 F6                          ld      de,(delta_x_step)               ;               BC = BC / DE, HL = BC % DE
1079+ FA64 CD E7 95                             call    Floor_DivQ                      ;               .
1080+ FA67 ED 43 0E F6                          ld      (msd),bc                        ;               .
1081+ FA6B 2A F1 F5                             ld      hl,(y_pos)                      ;            y_pos += msd
1082+ FA6E                                      ClearCarryFlag
1082+ FA6E B7          >                        or a
1083+ FA6F ED 4A                                adc     hl,bc                           ;            .
1084+ FA71 22 F1 F5                             ld      (y_pos),hl                      ;            .
1085+ FA74 11 7F 00                             ld      de,127                          ;            if (y_pos >= 127)
1086+ FA77 CD 2B 98                             call    CompareHLDESame                 ;            .
1087+ FA7A CA 81 FA                             jp      z,.yposGT127                    ;            .
1088+ FA7D CD 14 98                             call    CompareHLDESgn                  ;            .
1089+ FA80 D0                                   ret     nc                              ;               return
1090+ FA81 2A F1 F5     .yposGT127:             ld      hl,(y_pos)                      ;            if (y_pos >= 0)
1091+ FA84 CB 7C                                bit     7,h
1092+ FA86 C2 D7 FA                             jp      nz,.yposLT0
1093+ FA89 2A 0E F6     .yposGT0:               ld      hl,(msd)                        ;               rem = temp - (msd * delta_x_step)
1094+ FA8C ED 5B 04 F6                          ld      de,(delta_x_step)               ;                   de = msd * delta_x_step
1095+ FA90 CD C3 90                             call    mulHLbyDE2sc                    ;                   .
1096+ FA93 EB                                   ex      de,hl                           ;                   .
1097+ FA94 2A E4 F5                             ld      hl,(temp)                       ;                   hl = temp - de
1098+ FA97                                      ClearCarryFlag                          ;                   .
1098+ FA97 B7          >                        or a
1099+ FA98 ED 52                                sbc     hl,de                           ;                   .
1100+ FA9A 22 13 F6                             ld      (rem),hl                        ;                   .
1101+ FA9D ED 5B F9 F5                          ld      de,(clip_xmin)                  ;               x_pos = clip_xmin
1102+ FAA1 ED 53 EF F5                          ld      (x_pos),de                      ;               .
1103+ FAA5 ED 5B 13 F6                          ld      de,(rem)                        ;               error -= rem + delta_y
1104+ FAA9                                      ClearCarryFlag                          ;               .
1104+ FAA9 B7          >                        or a
1105+ FAAA ED 5A                                adc     hl,de                           ;                   de = rem+delta_x
1106+ FAAC EB                                   ex      de,hl                           ;                   .
1107+ FAAD 2A 10 F6                             ld      hl,(error)                      ;                   hl = error - de
1108+ FAB0                                      ClearCarryFlag                          ;                   .
1108+ FAB0 B7          >                        or a
1109+ FAB1 ED 52                                sbc     hl,de                           ;                   .
1110+ FAB3 22 10 F6                             ld      (error),hl                      ;                   .
1111+ FAB6 2A 13 F6                             ld      hl,(rem)                        ;               if (rem > 0)
1112+ FAB9 7C                                   ld      a,h                             ;               .
1113+ FABA B5                                   or      l                               ;               .
1114+ FABB CA D2 FA                             jp      z,.remLte0                      ;               .
1115+ FABE 2A F1 F5     .remGT0:                ld      hl,(y_pos)                      ;                   y_pos += 1;
1116+ FAC1 23                                   inc     hl
1117+ FAC2 22 F1 F5                             ld      (y_pos),hl
1118+ FAC5 2A 10 F6                             ld      hl,(error)                      ;                   error += delta_x_step;
1119+ FAC8 ED 5B 04 F6                          ld      de,(delta_x_step)
1120+ FACC                                      ClearCarryFlag
1120+ FACC B7          >                        or a
1121+ FACD ED 5A                                adc     hl,de
1122+ FACF 22 10 F6                             ld      (error),hl
1123+ FAD2 3E 01        .remLte0:               ld      a,1                             ;               set exit = true
1124+ FAD4 32 12 F6                             ld      (set_exit),a                    ;               .
1125+ FAD7
1126+ FAD7              .yposLT0:
1127+ FAD7 3A 12 F6     .x1GTEClipXmin:         ld      a,(set_exit)                    ;        if (!set_exit && y1 < 0)
1128+ FADA A7                                   and     a                               ;        .
1129+ FADB C2 65 FB                             jp      nz,.exit_false                  ;        .  if exit is 1 then its true so exit branch
1130+ FADE 2A D6 F5                             ld      hl,(y1)                         ;        .  if y1 is positive (including 0) then exit branch
1131+ FAE1 CB 7C                                bit     7,h                             ;        .
1132+ FAE3 CA 65 FB                             jp      z,.exit_false                   ;        .
1133+ FAE6 2A D6 F5                             ld      hl,(y1)                         ;           temp = delta_x_step * (0 - y1)
1134+ FAE9                                      macronegate16hl                         ;           .
1134+ FAE9 AF          >					xor 	a
1134+ FAEA 95          >					sub 	l
1134+ FAEB 6F          >					ld 		l,a
1134+ FAEC 9F          >					sbc 	a,a
1134+ FAED 94          >					sub 	h
1134+ FAEE 67          >					ld 		h,a
1135+ FAEF ED 5B 04 F6                          ld      de,(delta_x_step)               ;           .       hl = delta_x_step * (- y1)
1136+ FAF3 CD C3 90                             call    mulHLbyDE2sc                    ;           .
1137+ FAF6 22 E4 F5                             ld      (temp),hl                       ;           .
1138+ FAF9 44 4D        .msdEQtempDIVdxstep:    ld      bc,hl                           ;           msd = temp / delta_y_step
1139+ FAFB ED 5B 06 F6                          ld      de,(delta_y_step)               ;               BC = BC / DE, HL = BC % DE
1140+ FAFF CD E7 95                             call    Floor_DivQ                      ;               .
1141+ FB02 ED 43 0E F6                          ld      (msd),bc                        ;               .
1142+ FB06 E5 FD E1                             ld      iy,hl                           ;               same remainders (which is also mod result)
1143+ FB09 22 13 F6                             ld      (rem),hl                        ;           rem = temp % delta_y_step (swapped from being after x_pos += msd)
1144+ FB0C 2A EF F5     .yposPlusmsd:           ld      hl,(x_pos)                      ;           x_pos += msd
1145+ FB0F                                      ClearCarryFlag                          ;           .   bc already is msd
1145+ FB0F B7          >                        or a
1146+ FB10 ED 4A                                adc     hl,bc                           ;           .   hl += bc
1147+ FB12 22 EF F5                             ld      (x_pos),hl                      ;           .
1148+ FB15 2A EF F5                             ld      hl,(x_pos)                      ;           if ((x_pos > clip_xmax) || (x_pos == clip_xmax && rem >= delta_y))
1149+ FB18 ED 5B F7 F5                          ld      de,(clip_xmax)                  ;           .
1150+ FB1C CD 2B 98                             call    CompareHLDESame                 ;           .    if xpos != clipxmax skip the abort test
1151+ FB1F 20 0B                                jr      nz,.XPosNotClipxmax             ;           .
1152+ FB21 2A 13 F6                             ld      hl,(rem)                        ;           .    if rem < delta_y  skip the abort test
1153+ FB24 ED 5B 00 F6                          ld      de,(delta_y)                    ;           .
1154+ FB28 CD 14 98                             call    CompareHLDESgn                  ;           .
1155+ FB2B D8                                   ret     c                               ;           .
1156+ FB2C EB           .XPosNotClipxmax:       ex      de,hl                           ;           .    swap over xpos and max to compare xpos > xmax
1157+ FB2D CD 14 98                             call    CompareHLDESgn                  ;           .    if xpos > clipxmax then return (i.e clipxmax - xpos had a carry)
1158+ FB30 D8                                   ret     c
1159+ FB31 21 00 00     .xposLT127:             ld      hl,0                            ;           y_pos = 0;
1160+ FB34 22 F1 F5                             ld      (y_pos),hl                      ;           .
1161+ FB37 2A 10 F6                             ld      hl,(error)                      ;           error += rem
1162+ FB3A ED 5B 13 F6                          ld      de,(rem)                        ;           .
1163+ FB3E                                      ClearCarryFlag                          ;           .
1163+ FB3E B7          >                        or a
1164+ FB3F ED 5A                                adc     hl,de                           ;           .
1165+ FB41 22 10 F6                             ld      (error),hl                      ;           .
1166+ FB44 2A 13 F6                             ld      hl,(rem)                        ;           if (rem >= delta_y)
1167+ FB47 ED 5B 00 F6                          ld      de,(delta_y)                    ;           .
1168+ FB4B CD 14 98                             call    CompareHLDESgn                  ;           .
1169+ FB4E DA 65 FB                             jp      c,.remLTDeltaY                  ;           .
1170+ FB51 2A EF F5     .remGTEDeltaY:          ld      hl,(x_pos)                      ;                x_pos++
1171+ FB54 23                                   inc     hl
1172+ FB55 22 EF F5                             ld      (x_pos),hl
1173+ FB58 2A 10 F6                             ld      hl,(error)                      ;                error -= delta_y_step;
1174+ FB5B ED 5B 06 F6                          ld      de,(delta_y_step)               ;                .
1175+ FB5F                                      ClearCarryFlag                          ;                .
1175+ FB5F B7          >                        or a
1176+ FB60 ED 52                                sbc     hl,de                           ;                .
1177+ FB62 22 10 F6                             ld      (error),hl                      ;                .
1178+ FB65              .remLTDeltaY:
1179+ FB65 2A DA F5     .exit_false:            ld      hl,(y2)                         ;           y_pos_end = y2;
1180+ FB68 22 F5 F5                             ld      (y_pos_end),hl                  ;           .
1181+ FB6B 2A D8 F5                             ld      hl,(x2)                         ;           if (x2 > clip_xmax)
1182+ FB6E ED 5B F7 F5                          ld      de,(clip_xmax)                  ;           .
1183+ FB72 CD 2B 98                             call    CompareHLDESame                 ;           .
1184+ FB75 CA CC FB                             jp      z,.x2LTEclipxmax                ;           .
1185+ FB78 CD 14 98                             call    CompareHLDESgn                  ;           .
1186+ FB7B DA CC FB                             jp      c,.x2LTEclipxmax                ;           .
1187+ FB7E 2A F7 F5     .x2GTclipxmax:          ld      hl,(clip_xmax)                  ;               temp = delta_y_step * (clip_xmax - x1) + delta_y;
1188+ FB81 ED 5B D4 F5                          ld      de,(x1)                         ;                   hl = 127-y1
1189+ FB85                                      ClearCarryFlag                          ;
1189+ FB85 B7          >                        or a
1190+ FB86 ED 52                                sbc     hl,de
1191+ FB88 ED 5B 06 F6                          ld      de,(delta_y_step)               ;                   hl = delta_x_step * (clip_xmax - x1)
1192+ FB8C CD C3 90                             call    mulHLbyDE2sc                    ;                   .
1193+ FB8F ED 5B 00 F6                          ld      de,(delta_y)                    ;                   hl += delta_y
1194+ FB93                                      ClearCarryFlag                          ;                   .
1194+ FB93 B7          >                        or a
1195+ FB94 ED 5A                                adc     hl,de                           ;                   .
1196+ FB96 22 E4 F5                             ld      (temp),hl
1197+ FB99 44 4D                                ld      bc,hl
1198+ FB9B ED 5B 04 F6                          ld      de,(delta_x_step)               ;               msd = temp / delta x step
1199+ FB9F CD E7 95                             call    Floor_DivQ                      ;               .
1200+ FBA2 ED 43 0E F6                          ld      (msd),bc                        ;               .
1201+ FBA6 2A D6 F5                             ld      hl,(y1)                         ;               y_pos_end = y1 + msd;
1202+ FBA9                                      ClearCarryFlag                          ;               .
1202+ FBA9 B7          >                        or a
1203+ FBAA ED 4A                                adc     hl,bc                           ;               .
1204+ FBAC 22 F5 F5                             ld      (y_pos_end),hl                  ;               .
1205+ FBAF 2A 0E F6                             ld      hl,(msd)                        ;               if ((temp - msd * delta_x_step) == 0) --y_pos_end
1206+ FBB2 ED 5B 04 F6                          ld      de,(delta_x_step)               ;               .
1207+ FBB6 CD C3 90                             call    mulHLbyDE2sc                    ;               .
1208+ FBB9 EB                                   ex      de,hl                           ;               .
1209+ FBBA 2A E4 F5                             ld      hl,(temp)                       ;               .
1210+ FBBD                                      ClearCarryFlag                          ;               .
1210+ FBBD B7          >                        or a
1211+ FBBE ED 52                                sbc     hl,de                           ;               .
1212+ FBC0 7C                                   ld      a,h                             ;               .
1213+ FBC1 B5                                   or      l                               ;               .
1214+ FBC2 C2 CC FB                             jp      nz,.NotTheSame                  ;               .
1215+ FBC5 2A F5 F5     .IsTheSame:             ld      hl,(y_pos_end)                  ;                   --x_pos_end
1216+ FBC8 2B                                   dec     hl                              ;                   .
1217+ FBC9 22 F5 F5                             ld      (y_pos_end),hl                  ;                   .
1218+ FBCC              .NotTheSame:
1219+ FBCC 2A F5 F5     .x2LTEclipxmax:         ld      hl,(y_pos_end)                  ;           y_pos_end = min(y_pos_end, clip_ymax) + 1
1220+ FBCF 11 7F 00                             ld      de,127                          ;           .
1221+ FBD2 CD 14 98                             call    CompareHLDESgn                  ;           .
1222+ FBD5 D2 E2 FB                             jp      nc,.yposgteymax                 ;           .
1223+ FBD8 2A F5 F5     .yposltymax:            ld      hl,(y_pos_end)                  ;           .
1224+ FBDB 23                                   inc     hl                              ;           .
1225+ FBDC 22 F5 F5                             ld      (y_pos_end),hl                  ;           .
1226+ FBDF C3 E7 FB                             jp      .DoneYposAdjust                 ;           .
1227+ FBE2 13           .yposgteymax:           inc     de                              ;           .
1228+ FBE3 ED 53 F5 F5                          ld      (y_pos_end),de                  ;           .
1229+ FBE7 3A FB F5     .DoneYposAdjust:        ld      a,(sign_x)                      ;           if (sign_x == -1)
1230+ FBEA 3C                                   inc     a
1231+ FBEB C2 06 FC                             jp      nz,.SignNotMinus1
1232+ FBEE 2A EF F5     .SignEquMinus1:         ld      hl,(x_pos)                      ;               x_pos = -x_pos;
1233+ FBF1                                      macronegate16hl
1233+ FBF1 AF          >					xor 	a
1233+ FBF2 95          >					sub 	l
1233+ FBF3 6F          >					ld 		l,a
1233+ FBF4 9F          >					sbc 	a,a
1233+ FBF5 94          >					sub 	h
1233+ FBF6 67          >					ld 		h,a
1234+ FBF7 22 EF F5                             ld      (x_pos),hl
1235+ FBFA 2A F3 F5                             ld      hl,(x_pos_end)                  ;               x_pos_end = -x_pos_end;
1236+ FBFD                                      macronegate16hl
1236+ FBFD AF          >					xor 	a
1236+ FBFE 95          >					sub 	l
1236+ FBFF 6F          >					ld 		l,a
1236+ FC00 9F          >					sbc 	a,a
1236+ FC01 94          >					sub 	h
1236+ FC02 67          >					ld 		h,a
1237+ FC03 22 F3 F5                             ld      (x_pos_end),hl
1238+ FC06 ED 5B 04 F6  .SignNotMinus1:         ld      de,(delta_x_step)               ;        delta_y_step -= delta_x_step;
1239+ FC0A 2A 06 F6                             ld      hl,(delta_y_step)               ;        .
1240+ FC0D                                      ClearCarryFlag                          ;        .
1240+ FC0D B7          >                        or a
1241+ FC0E ED 52                                sbc     hl,de                           ;        .
1242+ FC10 22 06 F6                             ld      (delta_y_step),hl               ;        .
1243+ FC13 2A F1 F5     .PlottingLoop:          ld      hl,(y_pos)                      ;        while (y_pos != y_pos_end)
1244+ FC16 ED 5B F5 F5                          ld      de,(y_pos_end)
1245+ FC1A CD 2B 98                             call    CompareHLDESame
1246+ FC1D C8                                   ret     z
1247+ FC1E 2A EF F5     .PlotPixel:             ld      hl,(x_pos)
1248+ FC21 4D                                   ld      c,l
1249+ FC22 2A F1 F5                             ld      hl,(y_pos)
1250+ FC25 45                                   ld      b,l
1251+ FC26 3E BF                                ld      a,$BF
1252+ FC28 CD B6 E2                             call    l2_plot_pixel                   ;               drawpixel at xpos, ypos, Colour
1253+ FC2B 2A 10 F6                             ld      hl,(error)                      ;               if (error >= 0)
1254+ FC2E CB 7C                                bit     7,h
1255+ FC30 C2 50 FC                             jp      nz,.errorLT0
1256+ FC33 2A EF F5     .errorGTE0:             ld	    hl,(x_pos)                      ;                   ++x_pos
1257+ FC36 ED 5B FB F5                          ld      de,(sign_x)
1258+ FC3A                                      ClearCarryFlag
1258+ FC3A B7          >                        or a
1259+ FC3B ED 5A                                adc     hl,de
1260+ FC3D 22 EF F5                             ld	    (x_pos),hl
1261+ FC40 2A 10 F6                             ld	    hl,(error)                      ;                   error -= delta_y_step;
1262+ FC43 ED 5B 06 F6                          ld	    de,(delta_y_step)
1263+ FC47                                      ClearCarryFlag
1263+ FC47 B7          >                        or a
1264+ FC48 ED 52                                sbc	    hl,de
1265+ FC4A 22 10 F6                             ld	    (error),hl
1266+ FC4D C3 5D FC                             jp      .DoneErrorAdjust
1267+ FC50 2A 10 F6     .errorLT0:              ld	    hl,(error)                      ;                   error += delta_x_step;
1268+ FC53 ED 5B 04 F6                          ld	    de,(delta_x_step)
1269+ FC57                                      ClearCarryFlag
1269+ FC57 B7          >                        or a
1270+ FC58 ED 5A                                adc	    hl,de
1271+ FC5A 22 10 F6                             ld	    (error),hl
1272+ FC5D 2A F1 F5     .DoneErrorAdjust:       ld      hl,(y_pos)
1273+ FC60 23                                   inc     hl
1274+ FC61 22 F1 F5                             ld      (y_pos),hl
1275+ FC64 C3 13 FC                             jp      .PlottingLoop
1276+ FC67                      ENDIF
1277+ FC67
1278+ FC67
1279+ FC67 21 D4 F5     l2_draw_6502_line:      ld      hl,x1                           ; copy from currnet position to 6502 variables
1280+ FC6A 11 A5 F1                             ld      de,XX1510
1281+ FC6D 01 08 00                             ld      bc,4*2
1282+ FC70 ED B0                                ldir
1283+ FC72 CD 95 F3                             call    LL145_6502                      ; perform 6502 version
1284+ FC75 D8                                   ret     c                               ; returns if carry is set as its a no draw
1285+ FC76 21 00 00     .CopyBackResults:       ld      hl,0
1286+ FC79 22 D4 F5                             ld      (x1),hl
1287+ FC7C 22 D6 F5                             ld      (y1),hl
1288+ FC7F 22 D8 F5                             ld      (x2),hl
1289+ FC82 22 DA F5                             ld      (y2),hl
1290+ FC85 3A A5 F1                             ld      a,(XX1510)
1291+ FC88 32 D4 F5                             ld      (x1),a
1292+ FC8B 4F                                   ld      c,a
1293+ FC8C 3A A6 F1                             ld      a,(XX1510+1)
1294+ FC8F 32 D6 F5                             ld      (y1),a
1295+ FC92 47                                   ld      b,a
1296+ FC93 3A A7 F1                             ld      a,(XX1510+2)
1297+ FC96 32 D8 F5                             ld      (x2),a
1298+ FC99 5F                                   ld      e,a
1299+ FC9A 3A A8 F1                             ld      a,(XX1510+3)
1300+ FC9D 32 DA F5                             ld      (y2),a
1301+ FCA0 57                                   ld      d,a
1302+ FCA1 3E FF                                ld      a,$FF
1303+ FCA3                                      ClearCarryFlag
1303+ FCA3 B7          >                        or a
1304+ FCA4 C9                                   ret
1305+ FCA5                                 ;     call    l2_draw_clipped_line
1306+ FCA5              ;                        call    l2_draw_diagonal                ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
1307+ FCA5              ;................................................................
1308+ FCA5 00 00        result                  dw      0
1309+ FCA7              ;    swap = 0;
1310+ FCA7              ;    if (y1 > y2)
1311+ FCA7 2A D6 F5     l2_draw_elite_line:     ld      hl,(y1)                         ; if (y1 > y2)
1312+ FCAA ED 5B DA F5                          ld      de,(y2)                         ; .
1313+ FCAE CD 14 98                             call    CompareHLDESgn                  ; .
1314+ FCB1 DA B7 FC                             jp      c,.NoSwapCoords                 ;
1315+ FCB4              ;        swapp1p2();
1316+ FCB4 CD 15 F6     .SwapCoords:            call    SwapCoords                      ;       swap them so y1 <= y2
1317+ FCB7 2A D4 F5     .NoSwapCoords:          ld      hl,(x1)                         ; hl = x1
1318+ FCBA ED 5B D8 F5                          ld      de,(x2)                         ; de = x2
1319+ FCBE ED 4B D6 F5                          ld      bc,(y1)                         ; bc = y1
1320+ FCC2 DD 2A DA F5                          ld      ix,(y2)                         ; ix = y2
1321+ FCC6              .CheckForVertical:
1322+ FCC6              .CheckForHorizontal:
1323+ FCC6 FD 26 80                             ld      iyh,128                         ; iyh = xx13 = 128
1324+ FCC9              ;    xx13 = 128;
1325+ FCC9              ;    if (x2 >= 0 && x2 <= 255 && y2 >= 0 && y2 <= 127)
1326+ FCC9 7A                                   ld      a,d                             ; if (x2 >= 0 && x2 <= 255 && y2 >= 0 && y2 <= 127)
1327+ FCCA DD B4                                or      ixh                             ; .  [if x2 and y2 > 255 goto point2clip]
1328+ FCCC 20 09                                jr      nz,.Point2Clip                  ; .  .
1329+ FCCE DD 7D                                ld      a,ixl                           ; .  [if y2 low > 127 goto point2clip]
1330+ FCD0 CB 7F                                bit     7,a                             ; .  .
1331+ FCD2 20 03                                jr      nz,.Point2Clip                  ; .  .
1332+ FCD4              ;        xx13 = 0;
1333+ FCD4 FD 26 00     .Point2NoClip:          ld      iyh,0                           ;       iyh = xx13 = 0
1334+ FCD7              ;    if (x1 >= 0 && x1 <= 255 && y1 >= 0 && y1 <= 127)
1335+ FCD7 7C           .Point2Clip:            ld      a,h                             ; if (x1 >= 0 && x1 <= 255 && y1 >= 0 && y1 <= 127)
1336+ FCD8 B0                                   or      b                               ; . [ if x1 or y1 > 255 goto clip needed]
1337+ FCD9 C2 EA FC                             jp      nz,.ClipNeeded                  ; .
1338+ FCDC CB 79                                bit     7,c                             ; . [ if y1 low > 127 goto clip needed]
1339+ FCDE C2 EA FC                             jp      nz,.ClipNeeded                  ; .
1340+ FCE1              ;        if (xx13 != 0)
1341+ FCE1 FD 7C        .ClipPoint1:            ld      a,iyh                           ;       if (xx13 = 0)
1342+ FCE3 A7                                   and     a                               ;       .
1343+ FCE4 CA E1 FD                             jp      z,.ClipComplete                 ;               clipping not needed so treat as done an ddraw the line
1344+ FCE7 FD 26 40                             ld      iyh,64                          ;       else xx13 = 64 (xx13 /2 but if xx13 is 0 it never hits here so can just set to 64)
1345+ FCEA              ;.......................LL138
1346+ FCEA FD 7C        .ClipNeeded:            ld      a,iyh                           ; if (xx13 == 128)
1347+ FCEC CB 7F                                bit     7,a                             ; . [ jump if bit 7 is not set so <> 128]
1348+ FCEE CA 27 FD                             jp      z,.xx13Not128                   ; .
1349+ FCF1 7C           .xx13Is128:             ld      a,h                             ;       if (x1 < 0 && x2 < 0)
1350+ FCF2 A2                                   and     d                               ;       . [ x1 and x2 high bits 7 are both set then its off to the left]
1351+ FCF3 F8                                   ret     m                               ;               return
1352+ FCF4 78                                   ld      a,b                             ;       if (y1 < 0 && y2 < 0)
1353+ FCF5 DD A4                                and     ixh                             ;       . [ y1 and y2 high bits 7 are both set then its off the top]
1354+ FCF7 F8                                   ret     m                               ;               return
1355+ FCF8 7C                                   ld      a,h                             ;       if (x1 > 255  && x2 > 255)
1356+ FCF9 CB 7F                                bit     7,a                             ;       . [test if x1 is negative and if so skip]
1357+ FCFB C2 0A FD                             jp      nz,.x1x2LessThan256             ;       .
1358+ FCFE A7                                   and     a                               ;       . [ if x1 is not negative then if high has any value its > 256]
1359+ FCFF CA 0A FD                             jp      z,.x1x2LessThan256              ;       .
1360+ FD02 7A                                   ld      a,d                             ;       . [test if x2 is negative]
1361+ FD03 CB 7F                                bit     7,a                             ;       .
1362+ FD05 C2 0A FD                             jp      nz,.x1x2LessThan256             ;       . < can simplify with with an xor test to detect if opposite signs first >
1363+ FD08 A7                                   and     a                               ;       . [ if x2 is not negative then if high has any value its > 256]
1364+ FD09 C0                                   ret     nz                              ;               return
1365+ FD0A 78           .x1x2LessThan256:       ld      a,b                             ;       if (y1 > 127  && y2 > 127)
1366+ FD0B CB 7F                                bit     7,a                             ;       . [test if y1 is negative]
1367+ FD0D C2 27 FD                             jp      nz,.y1y2LessThan128             ;       .
1368+ FD10 A7                                   and     a                               ;       . [ if y1 is not negative then if high has any value its > 256]
1369+ FD11 CA 27 FD                             jp      z,.y1y2LessThan128              ;       .
1370+ FD14 CB 79                                bit     7,c                             ;       . [ if y1 low bit 7 is set then its > 127]
1371+ FD16 CA 27 FD                             jp      z,.y1y2LessThan128              ;       .
1372+ FD19 DD 7C                                ld      a,ixh                           ;       . [test if y2 is negative]
1373+ FD1B A7                                   and     a                               ;       .
1374+ FD1C FA 27 FD                             jp      m,.y1y2LessThan128              ;       .
1375+ FD1F A7                                   and     a                               ;       . [ if y2 is not negative then if high has any value its > 256]
1376+ FD20 CA 27 FD                             jp      z,.y1y2LessThan128              ;       .
1377+ FD23 DD 7D                                ld      a,ixl                           ;       .
1378+ FD25 A7                                   and     a                               ;       . [ if y2 low bit 7 is set then its > 127]
1379+ FD26 F8                                   ret     m                               ;               return
1380+ FD27              ;.......................LL115
1381+ FD27              .xx13Not128:                        // check right point
1382+ FD27 EB           .y1y2LessThan128:       ex      de,hl                           ; delta_x = x2 - x1;
1383+ FD28                                      ClearCarryFlag                          ; .
1383+ FD28 B7          >                        or a
1384+ FD29 ED 52                                sbc     hl,de                           ; .
1385+ FD2B 22 FE F5                             ld      (delta_x),hl                    ; redundant as its in DE TODO OPTIMISE
1386+ FD2E EB                                   ex      de,hl                           ; de = delta_x for next bit
1387+ FD2F DD E5 E1     .DyEquY2MinusY1:        ld      hl,ix                           ; delta_y = y2 - y1;
1388+ FD32                                      ClearCarryFlag                          ; .
1388+ FD32 B7          >                        or a
1389+ FD33 ED 42                                sbc     hl,bc                           ; .
1390+ FD35 22 00 F6                             ld      (delta_y),hl                    ; . [ so now de = dx and hl = dy]
1391+ FD38 FD 2E 80                             ld      iyl,128                         ; assuming sign is iyl is positive dx dy
1392+ FD3B CB 7A        .SignDeltaXY:           bit     7,d                             ; if delta x is negative (delta y will always be positive)
1393+ FD3D CA 49 FD                             jp      z,.DeltaXPositive               ; .
1394+ FD40 FD 2E 00     .DeltaXNegative:        ld      iyl,0                           ;       so we set sign to 0
1395+ FD43                                      macronegate16de                         ;       and set delta x to |delta x|
1395+ FD43 AF          >					xor 	a
1395+ FD44 93          >                    sub 	e
1395+ FD45 5F          >                    ld 		e,a
1395+ FD46 9F          >                    sbc 	a,a
1395+ FD47 92          >                    sub 	d
1395+ FD48 57          >                    ld 		d,a
1396+ FD49 ED 53 FE F5  .DeltaXPositive:        ld      (delta_x),de                    ;       .
1397+ FD4D              ;.......................Scale down DY and DY to 7 bit
1398+ FD4D 7C           .ScaleDXDY:             ld      a,h                             ; scale down so that dx and dx are < 256
1399+ FD4E B2                                   or      d                               ; .
1400+ FD4F CA 5D FD                             jp      z,.ScaleDXDYHighDone            ; .
1401+ FD52                                      ShiftDERight1                           ; .
1401+ FD52 CB 3A       >			   srl d
1401+ FD54 CB 1B       >			   rr  e
1402+ FD56                                      ShiftHLRight1                           ; .
1402+ FD56 CB 3C       >			   srl h
1402+ FD58 CB 1D       >			   rr  l
1403+ FD5A C3 4D FD                             jp      .ScaleDXDY                      ; .
1404+ FD5D 7B           .ScaleDXDYHighDone:     ld      a,e                             ; because of signed maths we will scale down to 7 bits to be safe
1405+ FD5E B5                                   or      l                               ; .
1406+ FD5F F2 6A FD                             jp      p,.LowScaleDone                 ; .
1407+ FD62                                      ShiftDERight1                           ; .
1407+ FD62 CB 3A       >			   srl d
1407+ FD64 CB 1B       >			   rr  e
1408+ FD66                                      ShiftHLRight1                           ; .
1408+ FD66 CB 3C       >			   srl h
1408+ FD68 CB 1D       >			   rr  l
1409+ FD6A              ;.......................Work out slope and gradient - later on we will work with deltax beign abs
1410+ FD6A ED 53 FE F5  .LowScaleDone:          ld      (delta_x),de                    ; save adjusted dx and dy back
1411+ FD6E 22 00 F6                             ld      (delta_y),hl                    ; .
1412+ FD71 55                                   ld      d,l                             ; now d = dy e = dx
1413+ FD72 ED 53 02 F6                          ld      (delta_y_x),de                  ; save for diagnostics
1414+ FD76              .SetUpTSlope:           ZeroA                                   ; Initialise tSlope to 0
1414+ FD76 AF          >                        xor a
1415+ FD77 32 0C F6                             ld      (tSlope),a                      ; .
1416+ FD7A 7B                                   ld      a,e                             ; a = dx
1417+ FD7B                                      JumpIfAGTENusng d, .deltaxGTEdeltaY     ; if dx < dy
1417+ FD7B BA          >                        cp     d
1417+ FD7C D2 8F FD    >                        jp		nc,.deltaxGTEdeltaY
1418+ FD7F 43           .deltaXLTdeltaY:        ld      b,e                             ;       bc = dx $00
1419+ FD80 0E 00                                ld      c,0                             ;       .
1420+ FD82 5A                                   ld      e,d                             ;       de = $00 dy
1421+ FD83 16 00                                ld      d,0                             ;       .
1422+ FD85 CD E7 95                             call    Floor_DivQ                      ;       bc = bc / de  (dx * 256 / dy)
1423+ FD88 ED 43 0A F6                          ld      (gradient),bc                   ;       in reality this is 8 bit little endian
1424+ FD8C C3 A0 FD                             jp      .donedxdycheck                  ;       .
1425+ FD8F                                                                              ; else
1426+ FD8F 42           .deltaxGTEdeltaY:       ld      b,d                             ;       bc = dy << 0
1427+ FD90 0E 00                                ld      c,0                             ;       .
1428+ FD92 16 00                                ld      d,0                             ;       de = 0dx
1429+ FD94 CD E7 95                             call    Floor_DivQ                      ;       bc = bc / de (dy * 256 / dx)
1430+ FD97 ED 43 0A F6                          ld      (gradient),bc                   ;       in reality this is 8 bit little endian
1431+ FD9B 3E FF                                ld      a,255                           ;       set tslope to -1
1432+ FD9D 32 0C F6                             ld      (tSlope),a                      ;       .
1433+ FDA0              .donedxdycheck:                 // CHECK CORRECT POINT
1434+ FDA0              ;.......................Clipping point 1
1435+ FDA0                                      ;break
1436+ FDA0 FD 7C                                ld      a,iyh                           ; if xx13 = 0 or xx13 = 128 (values can be 0, 128, 64 later we can optimise to see if its <> 64)
1437+ FDA2 A7                                   and     a                               ; . [xx13 = 0  enter the block]
1438+ FDA3 CA A9 FD                             jp      z,.xx13is0or128                 ; .
1439+ FDA6 F2 CA FD                             jp      p,.xx13not0or128                ; . [xx13 <> 128 then skip block]
1440+ FDA9 CD E7 FD     .xx13is0or128:          call    ClipLL118Elite                  ;       clip point 1
1441+ FDAC FD 7C                                ld      a,iyh                           ;       if xx13 <> 0
1442+ FDAE A7                                   and     a                               ;       .
1443+ FDAF CA C6 FD                             jp      z,.ImmediateDraw                ;       .
1444+ FDB2 3A D5 F5                             ld      a,(x1+1)                        ;               if (if (x1 <0 || x1 > 255 || y1 <0 || y1 > 127)) return
1445+ FDB5 A7                                   and     a                               ;               .
1446+ FDB6 F8                                   ret     m                               ;               . [x1 high is negative then return]
1447+ FDB7 C0                                   ret     nz                              ;               . [if x1 high is not zero, x1 > 255 return (above will have sorted negative test on bit 7)]
1448+ FDB8 3A D7 F5                             ld      a,(y1+1)                        ;               . [a = x1 high]
1449+ FDBB A7                                   and     a                               ;               .
1450+ FDBC F8                                   ret     m                               ;               . [if y1 negative return]
1451+ FDBD C0                                   ret     nz                              ;               . [if y1 > 255 return (above will have sorted negative test on bit 7)]
1452+ FDBE 3A D6 F5                             ld      a,(y1)                          ;               . [a = y1 low]
1453+ FDC1 A7                                   and     a                               ;               .
1454+ FDC2 F8                                   ret     m                               ;               . [if y1 > 127 then low byte would appear as negative in bit 7]
1455+ FDC3 C3 CA FD                             jp      .SkipCheckP1OnScreen            ;               else goto SkipCheckP1OnScreen
1456+ FDC6              .ImmediateDraw:         IFDEF SPLITORLINEX
1457+ FDC6 CD E2 F6                             call    l2_draw_clipped_line            ;        else if we get here we only needed to clip one point so draw the line
1458+ FDC9                                      ENDIF
1459+ FDC9 C9                                   ret                                     ;             and we are done
1460+ FDCA              .xx13not0or128:
1461+ FDCA CD 15 F6     .SkipCheckP1OnScreen:   call    SwapCoords                      ; swap point 1 and point 2 so we can now process P2
1462+ FDCD CD E7 FD                             call    ClipLL118Elite                  ; clip P2
1463+ FDD0 3A D5 F5                             ld      a,(x1+1)                        ; if (x1 <0 || x1 > 255 || y1 <0 || y1 > 127) return
1464+ FDD3 A7                                   and     a                               ; .
1465+ FDD4 F8                                   ret     m                               ; . [if x1 negative return]
1466+ FDD5 C0                                   ret     nz                              ; . [if x1 > 255 return (above will have sorted negative test on bit 7)]
1467+ FDD6 3A D7 F5                             ld      a,(y1+1)                        ; . [a = y1 high]
1468+ FDD9 A7                                   and     a                               ;
1469+ FDDA F8                                   ret     m                               ; . [if y1 negative return]
1470+ FDDB C0                                   ret     nz                              ; . [if y1 > 255 return (above will have sorted negative test on bit 7)]
1471+ FDDC 3A D6 F5                             ld      a,(y1)                          ; . [a = y1 low]
1472+ FDDF A7                                   and     a                               ; .
1473+ FDE0 F8                                   ret     m                               ; . [if y1 low > 127 then low byte would appear as negative in bit 7]
1474+ FDE1              .ClipComplete:
1475+ FDE1              .xx13is0or128Draw:      IFDEF SPLITORLINEX
1476+ FDE1 CD E2 F6                             call    l2_draw_clipped_line            ; if we get here we only needed to clip one point/have done all slipping needed
1477+ FDE4                                      ENDIF
1478+ FDE4 C9                                   ret
1479+ FDE5              ;................................................................
1480+ FDE5 00 00        ClipSign                dw      0
1481+ FDE7              ClipLL118Elite:        ;break
1482+ FDE7 2A D4 F5     .checkX1IsNegative      ld      hl,(x1)                         ; if x1 is negative
1483+ FDEA CB 7C                                bit     7,h                             ; .
1484+ FDEC CA 0B FE                             jp      z,.x1GTE0                       ; .
1485+ FDEF 3E FF        .x1LT0:                 ld      a,255                           ;       clip sign = -1
1486+ FDF1 32 E5 FD                             ld      (ClipSign),a                    ;       .
1487+ FDF4 CD 73 FE                             call    CalcLL120                       ;       calc ll120
1488+ FDF7 21 00 00                             ld      hl,0                            ;       x1 = 0
1489+ FDFA 22 D4 F5                             ld      (x1),hl                         ;       .
1490+ FDFD 2A D6 F5                             ld      hl,(y1)                         ;       y1 = y1 + result
1491+ FE00 ED 5B A5 FC                          ld      de,(result)                     ;       . [and save in hl for optimisation processing y1]
1492+ FE04 19                                   add     hl,de                           ;       .
1493+ FE05 22 D6 F5                             ld      (y1),hl                         ;       .
1494+ FE08 C3 28 FE                             jp      .checkY1IsNegative              ;       .
1495+ FE0B 7C           .x1GTE0:                ld      a,h                             ; else
1496+ FE0C A7                                   and     a                               ;       if x1 > 255
1497+ FE0D CA 28 FE                             jp      z,.checkY1IsNegative            ;       .
1498+ FE10                                      ZeroA                                   ;               sign must be 0 for postive adjustment
1498+ FE10 AF          >                        xor a
1499+ FE11 32 E5 FD                             ld      (ClipSign),a                    ;               .
1500+ FE14 CD 73 FE                             call    CalcLL120                       ;               Calc LL120
1501+ FE17 21 FF 00                             ld      hl,255                          ;               x1 = 255
1502+ FE1A 22 D4 F5                             ld      (x1),hl                         ;               .
1503+ FE1D 2A D6 F5                             ld      hl,(y1)                         ;               y1 = y1 + result
1504+ FE20 ED 5B A5 FC                          ld      de,(result)                     ;               . [and save in hl for optimisation processing y1]
1505+ FE24 19                                   add     hl,de                           ;               .
1506+ FE25 22 D6 F5                             ld      (y1),hl                         ;               .
1507+ FE28                                                                              ; end if
1508+ FE28 2A D6 F5     .checkY1IsNegative:     ld      hl,(y1)                         ; if (y1 <0) [if we don;t need to clip x1 then we need to load hl with y1 as it never got loaded]
1509+ FE2B CB 7C                                bit     7,h                             ; .
1510+ FE2D CA 49 FE                             jp      z,.checkY1LT128                 ; .
1511+ FE30 3E FF                                ld      a,255                           ;       set sign to -1 for calc
1512+ FE32 32 E5 FD                             ld      (ClipSign),a                    ;       .
1513+ FE35 CD C0 FE                             call    CalcLL123                       ;       calc LL123
1514+ FE38 2A D4 F5                             ld      hl,(x1)                         ;       x1 = x1 + result
1515+ FE3B ED 5B A5 FC                          ld      de,(result)                     ;       .
1516+ FE3F 19                                   add     hl,de                           ;       .
1517+ FE40 22 D4 F5                             ld      (x1),hl                         ;       .
1518+ FE43 21 00 00                             ld      hl,0                            ;       y1 = 0
1519+ FE46 22 D6 F5                             ld      (y1),hl                         ;       .
1520+ FE49 7C           .checkY1LT128:          ld      a,h                             ; finished if y < 128
1521+ FE4A A7                                   and     a                               ; .
1522+ FE4B C2 51 FE                             jp      nz,.mopUpY1                     ; . [jump to mop up if y1 high <> 0, wehave already dealt with negatvies so don't need to consider that]
1523+ FE4E 7D                                   ld      a,l                             ; . [now check y1 low and return if y1 low > 127]
1524+ FE4F A7                                   and     a                               ; .
1525+ FE50 F0                                   ret     p                               ; . [ if y1 low was positive then we are done as it means y1 < 128]
1526+ FE51 11 80 00     .mopUpY1:               ld      de,128                          ; y1 = y1 - 128
1527+ FE54                                      ClearCarryFlag                          ; .
1527+ FE54 B7          >                        or a
1528+ FE55 ED 52                                sbc     hl,de                           ; .
1529+ FE57 22 D6 F5                             ld      (y1),hl                         ; .
1530+ FE5A                                      ZeroA                                   ; set clip sign to 0
1530+ FE5A AF          >                        xor a
1531+ FE5B 32 E5 FD                             ld      (ClipSign),a                    ; to get to here if y1 < 0, y is set to 0, if its < 128 then it never reaches here, so y1 must be > 128 to get here
1532+ FE5E CD C0 FE                             call    CalcLL123                       ; calc LL123
1533+ FE61 2A D4 F5                             ld      hl,(x1)                         ; x1 = x1 + result
1534+ FE64 ED 5B A5 FC                          ld      de,(result)                     ; .
1535+ FE68 19                                   add     hl,de                           ; .
1536+ FE69 22 D4 F5                             ld      (x1),hl                         ; .
1537+ FE6C 21 7F 00                             ld      hl,127                          ; y1 = 127
1538+ FE6F 22 D6 F5                             ld      (y1),hl                         ; .
1539+ FE72 C9                                   ret
1540+ FE73
1541+ FE73 2A D4 F5     CalcLL120:              ld      hl,(x1)                         ; x1= |x1|
1542+ FE76                                      macroAbsHL                              ; .
1542+ FE76 CB 7C       >                    bit     7,h
1542+ FE78 CA 81 FE    >                    jp      z,.alreadyABS
1542+ FE7B AF          >					xor 	a
1542+ FE7C 95          >					sub 	l
1542+ FE7D 6F          >					ld 		l,a
1542+ FE7E 9F          >					sbc 	a,a
1542+ FE7F 94          >					sub 	h
1542+ FE80 67          >					ld 		h,a
1542+ FE81             >.alreadyABS:
1543+ FE81 3A 0C F6                             ld      a,(tSlope)                      ; if (tslope == 0)
1544+ FE84 A7                                   and     a                               ; .
1545+ FE85 C2 A4 FE                             jp      nz,.tSlopeNonZero               ; .
1546+ FE88 55           .tSlopeZero:            ld      d,l                             ;       d = x1 & 255
1547+ FE89 3A 0A F6                             ld      a,(gradient)                    ;       e = gradient
1548+ FE8C 5F                                   ld      e,a                             ;
1549+ FE8D ED 30                                mul     de                              ;       de = x1 & 255 * gradient
1550+ FE8F 5A                                   ld      e,d                             ;       de = x1 * gradient /256
1551+ FE90 16 00                                ld      d,0                             ;       .
1552+ FE92 3A E5 FD                             ld      a,(ClipSign)                    ;       if clipsign != 0
1553+ FE95 A7                                   and     a                               ;       .
1554+ FE96 CA 9F FE                             jp      z,.tSlopeZeroDone               ;       .
1555+ FE99              .tSlopeZeroNegate:      macronegate16de                         ;               result = - result
1555+ FE99 AF          >					xor 	a
1555+ FE9A 93          >                    sub 	e
1555+ FE9B 5F          >                    ld 		e,a
1555+ FE9C 9F          >                    sbc 	a,a
1555+ FE9D 92          >                    sub 	d
1555+ FE9E 57          >                    ld 		d,a
1556+ FE9F ED 53 A5 FC  .tSlopeZeroDone:        ld      (result),de                     ;
1557+ FEA3 C9                                   ret                                     ;
1558+ FEA4              .tSlopeNonZero:         ;ld      a,(gradient)                    ; else  c = gradient
1559+ FEA4                                      ;ld      c,a                             ;       .
1560+ FEA4                                      ;ld      a,l                             ;       a = x1 & 255
1561+ FEA4                                      ;call    DIV16Amul256dCUNDOC             ;       bc = a * 256/c
1562+ FEA4
1563+ FEA4 ED 5B 0A F6                          ld      de,(gradient)                   ; BC = BC / DE
1564+ FEA8 45                                   ld      b,l
1565+ FEA9 0E 00                                ld      c,0
1566+ FEAB                                      ;; CORRECTED TO LADO INTO B ld      bc,hl                           ; HL = BC % DE
1567+ FEAB CD E7 95                             call    Floor_DivQ
1568+ FEAE
1569+ FEAE 3A E5 FD                             ld      a,(ClipSign)                    ;       if clipsign != 0
1570+ FEB1 A7                                   and     a                               ;       .
1571+ FEB2 CA BB FE                             jp      z,.tSlopeNonZeroDone            ;       .
1572+ FEB5              .tSlopeNonZeroNegate:   macronegate16bc                         ;               result = - result
1572+ FEB5 AF          >					xor 	a
1572+ FEB6 91          >                    sub 	c
1572+ FEB7 4F          >                    ld 		c,a
1572+ FEB8 9F          >                    sbc 	a,a
1572+ FEB9 90          >                    sub 	b
1572+ FEBA 47          >                    ld 		b,a
1573+ FEBB ED 43 A5 FC  .tSlopeNonZeroDone:     ld      (result),bc
1574+ FEBF C9                                   ret
1575+ FEC0              ;.......................LL123
1576+ FEC0              CalcLL123:              ;break
1577+ FEC0 2A D6 F5                             ld      hl,(y1)                         ; hl = |y1|
1578+ FEC3                                      macroAbsHL                              ; .
1578+ FEC3 CB 7C       >                    bit     7,h
1578+ FEC5 CA CE FE    >                    jp      z,.alreadyABS
1578+ FEC8 AF          >					xor 	a
1578+ FEC9 95          >					sub 	l
1578+ FECA 6F          >					ld 		l,a
1578+ FECB 9F          >					sbc 	a,a
1578+ FECC 94          >					sub 	h
1578+ FECD 67          >					ld 		h,a
1578+ FECE             >.alreadyABS:
1579+ FECE 3A 0C F6                             ld      a,(tSlope)                      ; if tSlope = 0
1580+ FED1 A7                                   and     a                               ; .
1581+ FED2 C2 F0 FE                             jp      nz,.tSlopeNonZero               ; .
1582+ FED5              .tSlopeZero:           ; ld      a,(gradient)                    ;       c = gradient
1583+ FED5              ;                        ld      c,a                             ;       .
1584+ FED5              ;                        ld      a,l                             ;       hl = y1 (which is now abs and < 256)
1585+ FED5              ;                        call    DIV16Amul256dCUNDOC             ;       bc = A * 256 / c
1586+ FED5 ED 5B 0A F6                          ld      de,(gradient)                   ; BC = BC / DE
1587+ FED9 44 4D                                ld      bc,hl                           ; HL = BC % DE
1588+ FEDB CD E7 95                             call    Floor_DivQ
1589+ FEDE 3A E5 FD                             ld      a,(ClipSign)                    ;       if clipsign != 0
1590+ FEE1 A7                                   and     a                               ;       .
1591+ FEE2 CA EB FE                             jp      z, .tSlopeZeroDone              ;       .
1592+ FEE5              .tSlopeZeroNegate:      macronegate16bc                         ;               result = -result
1592+ FEE5 AF          >					xor 	a
1592+ FEE6 91          >                    sub 	c
1592+ FEE7 4F          >                    ld 		c,a
1592+ FEE8 9F          >                    sbc 	a,a
1592+ FEE9 90          >                    sub 	b
1592+ FEEA 47          >                    ld 		b,a
1593+ FEEB ED 43 A5 FC  .tSlopeZeroDone:        ld      (result),bc                     ;       . save result in either case
1594+ FEEF C9                                   ret                                     ;       .
1595+ FEF0 55           .tSlopeNonZero:         ld      d,l                             ; else  d = |y1| low
1596+ FEF1 3A 0A F6                             ld      a,(gradient)                    ;       e = gradient
1597+ FEF4 5F                                   ld      e,a                             ;       .
1598+ FEF5 ED 30                                mul     de                              ;       de = l * gradient
1599+ FEF7 5A                                   ld      e,d                             ;       de = l * gradient /256
1600+ FEF8 16 00                                ld      d,0                             ;       .
1601+ FEFA 3A E5 FD                             ld      a,(ClipSign)                    ;       if clipsign != 0
1602+ FEFD A7                                   and     a                               ;
1603+ FEFE CA 07 FF                             jp      z,.tSlopeNonZeroDone            ;
1604+ FF01              .tSlopeNonZeroNegate:   macronegate16de                         ;               result = -result
1604+ FF01 AF          >					xor 	a
1604+ FF02 93          >                    sub 	e
1604+ FF03 5F          >                    ld 		e,a
1604+ FF04 9F          >                    sbc 	a,a
1604+ FF05 92          >                    sub 	d
1604+ FF06 57          >                    ld 		d,a
1605+ FF07 ED 53 A5 FC  .tSlopeNonZeroDone:     ld      (result),de                     ;       . save result in either case
1606+ FF0B C9                                   ret                                     ;       .
1607+ FF0C
# file closed: ./Layer2Graphics/l2_draw_any_line.asm
1330  FF0C              ;    INCLUDE "./Layer2Graphics/clearLines-LL155.asm"
1331  FF0C                  INCLUDE "./Layer2Graphics/l2_draw_line_v2.asm"
# file opened: ./Layer2Graphics/l2_draw_line_v2.asm
   1+ FF0C              ; ******************************************************************************
   2+ FF0C              ;
   3+ FF0C              ;	Draw a pixel line from (x0,y0) defined in (COORDS) - the current plot
   4+ FF0C              ;	coordinate, to the relative distance points (x0+x,y0+y).
   5+ FF0C              ;
   6+ FF0C              ;	Design & programming by Gunther Strube,	Copyright (C) InterLogic 1995
   7+ FF0C              ;
   8+ FF0C              ;	The (COORDS+0)	pointer contains the current y coordinate, (COORDS+1) the
   9+ FF0C              ;	current x coordinate. The main program should reset the (COORDS) variables
  10+ FF0C              ;	before using line drawing.
  11+ FF0C              ;
  12+ FF0C              ;	The routine checks the range of specified coordinates which is the
  13+ FF0C              ;	boundaries of the graphics area (256x64	pixels).
  14+ FF0C              ;	If a boundary error occurs the routine exits automatically.	This may be
  15+ FF0C              ;	useful if you are trying to draw a line longer than allowed. Only the
  16+ FF0C              ;	visible part will be drawn.
  17+ FF0C              ;
  18+ FF0C              ;	The hardware graphics memory is organized as (0,0) in the top left corner.
  19+ FF0C              ;
  20+ FF0C              ;	The plot routine is	defined by an address pointer	in IX.
  21+ FF0C              ;
  22+ FF0C              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
  23+ FF0C              ;		DE =	move	relative y vertical	points (maximum +/-	255).
  24+ FF0C              ;		IX =	pointer to plot routine that uses HL = (x,y)	of plot coordinate.
  25+ FF0C              ;
  26+ FF0C              ;	OUT:	None.
  27+ FF0C              ;
  28+ FF0C              ;	Registers	used	by routine:
  29+ FF0C              ;		   N	:	B, loop counter
  30+ FF0C              ;		   i	:	line	balance variable
  31+ FF0C              ;		   x	:	H/L,	horisontal, vertical distance	variables
  32+ FF0C              ;		   y	:	H/L,	horisontal, vertical distance	variables
  33+ FF0C              ;	  (x0,y0)	:	(h,l)
  34+ FF0C              ;	  direc_x	:	d, horisontal step increment
  35+ FF0C              ;	  direc_y	:	e, vertical step increment
  36+ FF0C              ;		 ddx	:	b, horisontal step increment
  37+ FF0C              ;		 ddy	:	c, vertical step increment
  38+ FF0C              ;
  39+ FF0C              ;		DE, A work registers.
  40+ FF0C              ;
  41+ FF0C              ; The algorithm in pseudo-code:
  42+ FF0C              ;
  43+ FF0C              ;	direc_x =	SGN x: direc_y	= SGN y
  44+ FF0C              ;	x = ABS x: y =	ABS y
  45+ FF0C              ;
  46+ FF0C              ;	if x	>= y
  47+ FF0C              ;		if x+y=0 then return
  48+ FF0C              ;		H = x
  49+ FF0C              ;		L = y
  50+ FF0C              ;		ddx = direc_x
  51+ FF0C              ;		ddy = 0
  52+ FF0C              ;	else
  53+ FF0C              ;		H = y
  54+ FF0C              ;		L = x
  55+ FF0C              ;		ddx = 0
  56+ FF0C              ;		ddy = direc_y
  57+ FF0C              ;	endif
  58+ FF0C              ;
  59+ FF0C              ;	B = H
  60+ FF0C              ;	i = INT(B/2)
  61+ FF0C              ;	FOR N=B TO 1 STEP -1
  62+ FF0C              ;		i = i + L
  63+ FF0C              ;		if i	< H
  64+ FF0C              ;			ix =	ddx
  65+ FF0C              ;			iy =	ddy
  66+ FF0C              ;		else
  67+ FF0C              ;			i = i - H
  68+ FF0C              ;			ix =	direc_x
  69+ FF0C              ;			iy =	direc_y
  70+ FF0C              ;		endif
  71+ FF0C              ;		x0 =	x0 +	ix
  72+ FF0C              ;		y0 =	y0 +	iy
  73+ FF0C              ;		plot	(x0,y0)
  74+ FF0C              ;	NEXT	N
  75+ FF0C              ;
  76+ FF0C              ;
  77+ FF0C              ;	Registers	changed after return:
  78+ FF0C              ;		..BCDEHL/IXIY/af......	same
  79+ FF0C              ;		AF....../..../..bcdehl	different
  80+ FF0C              ;
  81+ FF0C 00 00        line_gfx_coords         dw  0
  82+ FF0E
  83+ FF0E              LineHLtoDE:
  84+ FF0E 7C           TestMaxY:               ld	a,h ; were h = y or l = y?
  85+ FF0F FE C0                                cp	192
  86+ FF11 30 26                                jr	nc, exit_line		; y0	coordinate out	of range
  87+ FF13 7A                                   ld	a,d
  88+ FF14 FE C0                                cp	192
  89+ FF16 30 21                                jr	nc, exit_line		; y1	coordinate out	of range
  90+ FF18 22 0C FF                             ld	(line_gfx_coords),hl		; the starting	point is now default
  91+ FF1B E5                                   push	hl
  92+ FF1C D5                                   push	de
  93+ FF1D 6C                                   ld	l,h				; L = x0
  94+ FF1E 62                                   ld	h,d				; H = x1
  95+ FF1F 7C           distanceX:		        ld	a,h
  96+ FF20 95                                   sub	l
  97+ FF21 6F                                   ld	l,a
  98+ FF22 26 00                                ld	h,0
  99+ FF24 30 02                                jr	nc, distanceXDone
 100+ FF26 26 FF                                ld	h,-1
 101+ FF28 D1           distanceXDone:          pop	de
 102+ FF29 E3                                   ex	(sp),hl			; L = y0
 103+ FF2A 63                                   ld	h,e				; H = y1
 104+ FF2B 7C           distanceY:		        ld	a,h
 105+ FF2C 95                                   sub	l
 106+ FF2D 6F                                   ld	l,a
 107+ FF2E 26 00                                ld	h,0
 108+ FF30 30 02                                jr	nc, distanceYDone
 109+ FF32 26 FF                                ld	h,-1
 110+ FF34 D1           distanceYDone:          pop	de
 111+ FF35 EB                                   ex	de,hl			; h.dist.	= HL, v.dist. = DE
 112+ FF36 CD 3A FF                             call	DrawLineRelative			; draw line...
 113+ FF39 C9           exit_line:              ret
 114+ FF3A
 115+ FF3A              ; ***************************************************************************
 116+ FF3A              ;
 117+ FF3A              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
 118+ FF3A              ;		DE =	move	relative y vertical	points (maximum +/-	255).
 119+ FF3A              ;
 120+ FF3A              ; OUT: h - l distance in	HL
 121+ FF3A              ;
 122+ FF3A
 123+ FF3A D5           DrawLineRelative:       push	de
 124+ FF3B E5                                   push	hl
 125+ FF3C D9                                   exx
 126+ FF3D E1                                   pop	hl					; get relative	horisontal movement
 127+ FF3E CD B5 FF                             call	sgn
 128+ FF41 57                                   ld	d,a					; direc_x	= SGN(x) installed d = +/-1 for horizontal update
 129+ FF42 CD C2 FF                             call	absValue
 130+ FF45 45                                   ld	b,l					; x = ABS(x)
 131+ FF46 E1           DrawLineGetVertRelative:pop	hl					; get relative	vertical movement
 132+ FF47 CD B5 FF                             call	sgn
 133+ FF4A 5F                                   ld	e,a					; direc_y	= SGN(y) installed  = +/-1 for vertical update
 134+ FF4B CD C2 FF                             call	absValue
 135+ FF4E 4D                                   ld	c,l					; y = ABS(y) so now bc = dxdy
 136+ FF4F              ; so by here BC = dx dy HL in increment/decrement x y
 137+ FF4F C5                                   push	bc
 138+ FF50 D9                                   exx
 139+ FF51 E1                                   pop	hl					; H = absolute	x dist., L = absolute y distance
 140+ FF52 7C                                   ld	a,h
 141+ FF53 BD                                   cp	l
 142+ FF54 38 0A                                jr	c, x_smaller_y		; if	x >=	y
 143+ FF56 B4           areXandYZero:           or	h					;	if x+y = 0
 144+ FF57 28 5B                                jr	z, exit_draw		;		return
 145+ FF59 D9           y_lessorequal_x:        exx						;	else
 146+ FF5A 42                                   ld	b,d					;		ddx = direc_x
 147+ FF5B 0E 00                                ld	c,0					;		ddy = 0
 148+ FF5D D9                                   exx
 149+ FF5E 18 08                                jr	init_drawloop		; else
 150+ FF60 7C           x_smaller_y:	        ld	a,h
 151+ FF61 65                                   ld	h,l					;	H = y
 152+ FF62 6F                                   ld	l,a					;	L = x
 153+ FF63 D9                                   exx
 154+ FF64 06 00                                ld	b,0					;	ddx = 0
 155+ FF66 4B                                   ld	c,e					;	ddy = direc_y
 156+ FF67 D9                                   exx
 157+ FF68 44           init_drawloop:	        ld	b,h
 158+ FF69 4C                                   ld	c,h					; B = H
 159+ FF6A CB 39                                srl	c					; i = INT(B/2)
 160+ FF6C              										; FOR N=B	TO 1	STEP	-1
 161+ FF6C 79           drawloop:		        ld	a,c
 162+ FF6D 85                                   add	a,l
 163+ FF6E 38 09                                jr	c, i_greater		;	i + L > 255  (i > H)
 164+ FF70 BC                                   cp	h
 165+ FF71 30 06                                jr	nc, i_greater		;	if i	< H
 166+ FF73 4F                                   ld	c,a					;		i = i + L
 167+ FF74 D9                                   exx
 168+ FF75 C5                                   push	bc				;		ix =	ddx:	iy =	ddy
 169+ FF76 D9                                   exx
 170+ FF77 18 05                                jr	check_plot			;	else
 171+ FF79 94           i_greater:		        sub	h					;		i = i - H
 172+ FF7A 4F                                   ld	c,a
 173+ FF7B D9                                   exx
 174+ FF7C D5                                   push	de				;		ix =	direc_x: iy = direc_y
 175+ FF7D D9                                   exx						;	endif
 176+ FF7E E3           check_plot:		        ex	(sp),hl				;	preserve H,L distances on stack
 177+ FF7F EB                                   ex	de,hl				;	D,E = ix,	iy
 178+ FF80 2A 0C FF                             ld	hl,(line_gfx_coords)
 179+ FF83 7D                                   ld	a,l
 180+ FF84 83                                   add	a,e					;
 181+ FF85 6F                                   ld	l,a					;	y0 =	y0 +	iy (y0 is	checked by plot)
 182+ FF86 7A                                   ld	a,d
 183+ FF87 3C                                   inc	a
 184+ FF88 84                                   add	a,h
 185+ FF89 38 04                                jr	c, check_range		;	check out	of range
 186+ FF8B 28 26                                jr	z, range_error		;	Fz=1	& Fc=0 denotes	x0 <	0
 187+ FF8D 18 02                                jr	plot_point
 188+ FF8F 20 22        check_range:            jr	nz, range_error	;	Fz=0	& Fc=1 denotes	x0 >	255
 189+ FF91
 190+ FF91 3D           plot_point:             dec	a
 191+ FF92 C5                                   push	bc
 192+ FF93 F5                                   push	af
 193+ FF94 47                                   ld	    b,a					;	x0 =	x0 +	ix
 194+ FF95 4D                                   ld		c,l
 195+ FF96 3A B5 E2                             ld		a,(line_gfx_colour)
 196+ FF99 ED 43 0C FF                          ld      (line_gfx_coords),bc
 197+ FF9D                                      l2_plot_macro; call	l2_plot_pixel:
 197+ FF9D 78          >                        ld      a,b
 197+ FF9E             >                        JumpIfAGTENusng 192 ,.NoPlot
 197+ FF9E FE C0       >                        cp     192
 197+ FFA0 D2 AC FF    >                        jp		nc,.NoPlot
 197+ FFA3 69          >                        ld      l,c
 197+ FFA4 CD 68 E0    >                        call    asm_l2_row_bank_select
 197+ FFA7 67          >                        ld      h,a
 197+ FFA8 3A B5 E2    >                        ld      a,(line_gfx_colour)
 197+ FFAB 77          >                        ld      (hl),a
 197+ FFAC             >.NoPlot:
 198+ FFAC F1                                   pop		af
 199+ FFAD C1                                   pop		bc
 200+ FFAE E1           plot_RET:		        pop	hl					;	restore H,L distances...
 201+ FFAF 10 BB                                djnz	drawloop		; NEXT N
 202+ FFB1 18 01                                jr	exit_draw
 203+ FFB3
 204+ FFB3 E1           range_error:	        pop	hl					; remove H,L distances...
 205+ FFB4 C9           exit_draw:		        ret
 206+ FFB5
 207+ FFB5
 208+ FFB5              ; ******************************************************************************
 209+ FFB5              ;
 210+ FFB5              ;	SGN (Signum value) of 16	bit signed integer.
 211+ FFB5              ;
 212+ FFB5              ;	IN:		HL =	integer
 213+ FFB5              ;	OUT:		A = result: 0,1,-1 (if zero, positive, negative)
 214+ FFB5              ;
 215+ FFB5              ;	Registers	changed after return:
 216+ FFB5              ;	..BCDEHL/IXIY	same
 217+ FFB5              ;	AF....../....	different
 218+ FFB5              ;
 219+ FFB5 7C           sgn:				    ld	a,h
 220+ FFB6 B5                                   or	l
 221+ FFB7 C8                                   ret	z				; integer	is zero, return 0...
 222+ FFB8 CB 7C                                bit	7,h
 223+ FFBA 20 03                                jr	nz, negative_int
 224+ FFBC 3E 01                                ld	a,1
 225+ FFBE C9                                   ret
 226+ FFBF 3E FF        negative_int:		    ld	a,-1
 227+ FFC1 C9                                   ret
 228+ FFC2
 229+ FFC2
 230+ FFC2              ; ******************************************************************************
 231+ FFC2              ;
 232+ FFC2              ;	ABS (Absolute value) of 16 bit signed integer.
 233+ FFC2              ;
 234+ FFC2              ;	IN:		HL =	integer
 235+ FFC2              ;	OUT:		HL =	converted	integer
 236+ FFC2              ;
 237+ FFC2              ;	Registers	changed after return:
 238+ FFC2              ;	A.BCDE../IXIY	same
 239+ FFC2              ;	.F....HL/....	different
 240+ FFC2              ;
 241+ FFC2 CB 7C        absValue:			    bit	7,h
 242+ FFC4 C8                                   ret	z				; integer	is positive...
 243+ FFC5 D5                                   push	de
 244+ FFC6 EB                                   ex	de,hl
 245+ FFC7 21 00 00                             ld	hl,0
 246+ FFCA BF                                   cp	a				; Fc	= 0,	may not be used...
 247+ FFCB ED 52                                sbc	hl,de			; convert	negative integer
 248+ FFCD D1                                   pop	de
 249+ FFCE C9                                   ret
 250+ FFCF
# file closed: ./Layer2Graphics/l2_draw_line_v2.asm
1332  FFCF                  DISPLAY "Bank ",BankLAYER2," - Bytes free ",/D, $2000 - ($-LAYER2Addr), " - BankLAYER2"
1333  FFCF              ; Bank 58  ------------------------------------------------------------------------------------------------------------------------
1334  FFCF                  SLOT    LAYER1Addr
1335  FFCF                  PAGE    BankLAYER1
1336  FFCF                  ORG     LAYER1Addr, BankLAYER1
1337  E000 42 61 6E 6B  Layer1Header:  DB "Bank L1 Utils--"
1337  E004 20 4C 31 20
1337  E008 55 74 69 6C
1337  E00C 73 2D 2D
1338  E00F
1339  E00F                  INCLUDE "./Layer1Graphics/layer1_attr_utils.asm"
# file opened: ./Layer1Graphics/layer1_attr_utils.asm
   1+ E00F
   2+ E00F 00 58        L1AttrRow00:            DW $5800                    ;Row 1    */
   3+ E011 20 58        L1AttrRow01:            DW $5820                    ;Row 2    */
   4+ E013 40 58        L1AttrRow02:            DW $5840                    ;Row 3    */
   5+ E015 60 58        L1AttrRow03:            DW $5860                    ;Row 4    */
   6+ E017 80 58        L1AttrRow04:            DW $5880                    ;Row 5    */
   7+ E019 A0 58        L1AttrRow05:            DW $58A0                    ;Row 6    */
   8+ E01B C0 58        L1AttrRow06:            DW $58C0                    ;Row 7    */
   9+ E01D E0 58        L1AttrRow07:            DW $58E0                    ;Row 8    */
  10+ E01F 00 59        L1AttrRow08:            DW $5900                    ;Row 9    */
  11+ E021 20 59        L1AttrRow09:            DW $5920                    ;Row 10   */
  12+ E023 40 59        L1AttrRow10:            DW $5940                    ;Row 11   */
  13+ E025 60 59        L1AttrRow11:            DW $5960                    ;Row 12   */
  14+ E027 80 59        L1AttrRow12:            DW $5980                    ;Row 13   */
  15+ E029 A0 59        L1AttrRow13:            DW $59A0                    ;Row 14   */
  16+ E02B C0 59        L1AttrRow14:            DW $59C0                    ;Row 15   */
  17+ E02D E0 59        L1AttrRow15:            DW $59E0                    ;Row 16   */
  18+ E02F 00 5A        L1AttrRow16:            DW $5A00                    ;Row 17   */
  19+ E031 20 5A        L1AttrRow17:            DW $5A20                    ;Row 18   */
  20+ E033 40 5A        L1AttrRow18:            DW $5A40                    ;Row 19   */
  21+ E035 60 5A        L1AttrRow19:            DW $5A60                    ;Row 20   */
  22+ E037 80 5A        L1AttrRow20:            DW $5A80                    ;Row 21   */
  23+ E039 A0 5A        L1AttrRow21:            DW $5AA0                    ;Row 22   */
  24+ E03B C0 5A        L1AttrRow22:            DW $5AC0                    ;Row 23   */
  25+ E03D E0 5A        L1AttrRow23:            DW $5AE0                    ;Row 23   */
  26+ E03F
  27+ E03F              ; "l2_hilight_row, d = row, e = colour"
  28+ E03F 21 0F E0     l1_hilight_row:         ld      hl, L1AttrRow00
  29+ E042 4B                                   ld      c,e
  30+ E043 7A                                   ld      a,d
  31+ E044 CB 27                                sla     a
  32+ E046 ED 31                                add     hl,a
  33+ E048 7E                                   ld      a,(hl)
  34+ E049 5F                                   ld      e,a
  35+ E04A 23                                   inc     hl
  36+ E04B 7E                                   ld      a,(hl)
  37+ E04C 57                                   ld      d,a
  38+ E04D EB                                   ex      hl,de
  39+ E04E 79                                   ld		a,c
  40+ E04F 11 20 00                             ld		de, 32
  41+ E052 CD 38 7D                             call	memfill_dma
  42+ E055 C9                                   ret
  43+ E056
# file closed: ./Layer1Graphics/layer1_attr_utils.asm
1340  E056                  INCLUDE "./Layer1Graphics/layer1_cls.asm"
# file opened: ./Layer1Graphics/layer1_cls.asm
   1+ E056 AF           l1_cls_top:             xor     a
   2+ E057 21 00 40                             ld      hl, $4000
   3+ E05A 11 00 08                             ld      de, $0800
   4+ E05D CD 38 7D                             call    memfill_dma
   5+ E060 C9                                   ret
   6+ E061
   7+ E061 AF           l1_cls_mid:             xor     a
   8+ E062 21 00 48                             ld      hl, $4800
   9+ E065 11 00 08                             ld      de, $0800
  10+ E068 CD 38 7D                             call    memfill_dma
  11+ E06B C9                                   ret
  12+ E06C
  13+ E06C AF           l1_cls_bottom:          xor     a
  14+ E06D 21 00 50                             ld      hl, $5000
  15+ E070 11 00 08                             ld      de, $0800
  16+ E073 CD 38 7D                             call    memfill_dma
  17+ E076 C9                                   ret
  18+ E077
  19+ E077              ; Designed specifically to clear a whole character aligned line
  20+ E077 1E 00        l1_cls_line_d:          ld      e,0
  21+ E079 ED 94                                pixelad
  22+ E07B 11 00 01                             ld      de,32 * 8
  23+ E07E AF                                   xor     a
  24+ E07F CD 38 7D                             call    memfill_dma
  25+ E082 C9                                   ret
  26+ E083
  27+ E083              ; Designed specifically to clear a whole character aligned 2 lines line, used for say clearing hyperspace message
  28+ E083 1E 00        l1_cls_2_lines_d:       ld      e,0
  29+ E085 ED 94                                pixelad
  30+ E087 11 00 02                             ld      de,32 * 16
  31+ E08A AF                                   xor     a
  32+ E08B CD 38 7D                             call    memfill_dma
  33+ E08E C9                                   ret
  34+ E08F
  35+ E08F AF           l1_cls:                 xor		a
  36+ E090 21 00 40     l1_cls_to_a:            ld		hl,	$4000
  37+ E093 11 00 18                             ld		de, $1800
  38+ E096 CD 38 7D                             call	memfill_dma
  39+ E099 C9                                   ret
  40+ E09A
  41+ E09A 21 00 58     l1_attr_cls_2DlinesA:   ld		hl,	$5800
  42+ E09D 1E 20                                ld      e,32
  43+ E09F ED 30                                mul
  44+ E0A1 19                                   add     hl,de
  45+ E0A2 11 40 00                             ld		de, 32 * 2
  46+ E0A5 CD 38 7D                             call	memfill_dma
  47+ E0A8 C9                                   ret
  48+ E0A9
  49+ E0A9
  50+ E0A9 AF           l1_attr_cls:            xor		a
  51+ E0AA 21 00 58     l1_attr_cls_to_a:       ld		hl,	$5800
  52+ E0AD 11 00 03                             ld		de, $0300
  53+ E0B0 CD 38 7D                             call	memfill_dma
  54+ E0B3 C9                                   ret
  55+ E0B4
  56+ E0B4 01 FE FE     l1_set_border:          ld	    bc, 0xFEFE
  57+ E0B7 ED 79                                out		(c),a
  58+ E0B9 C9                                   ret
# file closed: ./Layer1Graphics/layer1_cls.asm
1341  E0BA                  INCLUDE "./Layer1Graphics/layer1_print_at.asm"
# file opened: ./Layer1Graphics/layer1_print_at.asm
   1+ E0BA              ; "l1 print char a = character, de = Ypixel Xchar of print"
   2+ E0BA D5 E5        l1_print_char:          push	de,,hl
   3+ E0BC ED 94                                pixelad								; hl = address of de
   4+ E0BE E5                                   push	hl							; save hl for loop
   5+ E0BF 26 00                                ld		h,0
   6+ E0C1 6F                                   ld		l,a
   7+ E0C2 29                                   add		hl,hl						; * 2
   8+ E0C3 29                                   add		hl,hl						; * 4
   9+ E0C4 29                                   add		hl,hl						; * 8 to get byte address
  10+ E0C5 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  11+ E0C9 EB                                   ex		de,hl						; save address into de
  12+ E0CA E1                                   pop		hl							; get back hl for loop
  13+ E0CB 06 08                                ld		b,8							; do 8 rows
  14+ E0CD 1A           .PrintCharLoop:         ld		a,(de)						; row byte
  15+ E0CE 13                                   inc		de							; next byte
  16+ E0CF 77                                   ld		(hl),a						; poke to screen
  17+ E0D0 ED 93                                pixeldn								; Down 1 row
  18+ E0D2 10 F9                                djnz	.PrintCharLoop				; loop for 8 bytes
  19+ E0D4 E1 D1                                pop		de,,hl					    ; restore hl
  20+ E0D6 C9                                   ret
  21+ E0D7
  22+ E0D7              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  23+ E0D7              ; now skips ascii code < 32 but moves on cursor by 1 char
  24+ E0D7              l1_print_at:
  25+ E0D7 7E           .PrintLoop:             ld		a,(hl)
  26+ E0D8 FE 00                                cp		0
  27+ E0DA C8                                   ret		z
  28+ E0DB                                      CallIfAGTENusng " ", l1_print_char
  28+ E0DB FE 20       >                        cp      " "
  28+ E0DD D4 BA E0    >                        call	nc,l1_print_char
  29+ E0E0 23                                   inc		hl							; move 1 message character right
  30+ E0E1 7B                                   ld		a,e
  31+ E0E2 C6 08                                add		a,8
  32+ E0E4 5F                                   ld		e,a							; move 1 screen character right
  33+ E0E5 18 F0                                jr		.PrintLoop
  34+ E0E7                                                      DISPLAY "TODO: looks liek rogue popde"
  35+ E0E7              .Clearstackandfinish:   ;pop		de                      ; TODO LOOOKS TO BE A ROGUE POPDE
  36+ E0E7 C9                                   ret
  37+ E0E8
  38+ E0E8              ;l1_print_at_wrap:
  39+ E0E8              ;; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  40+ E0E8              ;	ld      iyh,e
  41+ E0E8              ;.PrintLoop:
  42+ E0E8              ;	ld		a,(hl)
  43+ E0E8              ;	cp		0
  44+ E0E8              ;	ret		z
  45+ E0E8              ;.CountWordCharLen
  46+ E0E8              ;; Need to change to word wrap, so it will loop through string as before
  47+ E0E8              ;; but read up until a null or space, take the character count * 8 for pixels
  48+ E0E8              ;; if that is > 238 then force a premature line wrap
  49+ E0E8              ;
  50+ E0E8              ;
  51+ E0E8              ;    push    iy
  52+ E0E8              ;    call	l1_print_char
  53+ E0E8              ;    pop     iy
  54+ E0E8              ;	inc		hl							; move 1 message character right
  55+ E0E8              ;	ld		a,e
  56+ E0E8              ;    cp      238
  57+ E0E8              ;    jr      nc,.NextLine
  58+ E0E8              ;	add		a,8
  59+ E0E8              ;	ld		e,a							; move 1 screen character right
  60+ E0E8              ;	jr		.PrintLoop
  61+ E0E8              ;.Clearstackandfinish:
  62+ E0E8              ;	pop		de
  63+ E0E8              ;	ret
  64+ E0E8              ;.NextLine:
  65+ E0E8              ;    ld      a,(hl)
  66+ E0E8              ;    cp      " "
  67+ E0E8              ;    ld      e,iyh
  68+ E0E8              ;    ld      a,d
  69+ E0E8              ;    add     a,8
  70+ E0E8              ;    ld      d,a
  71+ E0E8              ;    jr		.PrintLoop
  72+ E0E8
  73+ E0E8              ; Counts next word at hl, uses e and forces a wrap if it would over flow puts value in c
  74+ E0E8 E5           L1LenWordAtHL:          push    hl
  75+ E0E9 D5                                   push    de
  76+ E0EA 7E           .CountLoop:             ld      a,(hl)
  77+ E0EB FE 00                                cp      0
  78+ E0ED 28 0F                                jr      z,.CountDone
  79+ E0EF FE 20                                cp      32
  80+ E0F1 28 0B                                jr      z,.CountDone
  81+ E0F3 7B                                   ld      a,e
  82+ E0F4 C6 08                                add     a,8
  83+ E0F6 5F                                   ld      e,a
  84+ E0F7 FE EE                                cp      238
  85+ E0F9 30 07                                jr      nc,.TooLong
  86+ E0FB 23                                   inc     hl
  87+ E0FC 18 EC                                jr      .CountLoop
  88+ E0FE D1           .CountDone:             pop     de
  89+ E0FF E1                                   pop     hl
  90+ E100 AF                                   xor     a
  91+ E101 C9                                   ret
  92+ E102 D1           .TooLong                pop     de
  93+ E103 E1                                   pop     hl
  94+ E104 3E FF                                ld      a,$FF
  95+ E106 C9                                   ret
  96+ E107
  97+ E107 7E           L1PrintWordAtHL:        ld      a,(hl)
  98+ E108 FE 00                                cp      0
  99+ E10A C8                                   ret     z
 100+ E10B FE 20                                cp      32
 101+ E10D 28 0F                                jr      z,.ItsASpace
 102+ E10F FD E5                                push    iy
 103+ E111 CD BA E0                             call	l1_print_char
 104+ E114 FD E1                                pop     iy
 105+ E116 7B                                   ld      a,e
 106+ E117 C6 08                                add     a,8
 107+ E119 5F                                   ld      e,a
 108+ E11A 23                                   inc     hl
 109+ E11B C3 07 E1                             jp      L1PrintWordAtHL
 110+ E11E 23           .ItsASpace:             inc     hl      ;  Just a bodge for now
 111+ E11F 7B                                   ld      a,e
 112+ E120 C6 08                                add     a,8
 113+ E122 5F                                   ld      e,a
 114+ E123 C9                                   ret
 115+ E124
 116+ E124
 117+ E124              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 118+ E124              ; Now has full word level wrapping
 119+ E124 FD 63        l1_print_at_wrap:       ld      iyh,e
 120+ E126 7E           .PrintLoop:             ld		a,(hl)
 121+ E127 FE 00                                cp		0
 122+ E129 C8                                   ret		z
 123+ E12A CD E8 E0     .CountWordCharLen:      call    L1LenWordAtHL
 124+ E12D FE FF                                cp      $FF
 125+ E12F 28 06                                jr      z,.WrapNextLine
 126+ E131 CD 07 E1     .NotTooLong:            call    L1PrintWordAtHL
 127+ E134              ; Need to change to word wrap, so it will loop through string as before
 128+ E134              ; but read up until a null or space, take the character count * 8 for pixels
 129+ E134              ; if that is > 238 then force a premature line wrap
 130+ E134 18 F0                                jr		.PrintLoop
 131+ E136              .Clearstackandfinish:   ;op		de
 132+ E136 C9                                   ret
 133+ E137              .WrapNextLine:
 134+ E137 FD 5C        .NextLine:              ld      e,iyh
 135+ E139 7A                                   ld      a,d
 136+ E13A C6 08                                add     a,8
 137+ E13C 57                                   ld      d,a
 138+ E13D 18 E7                                jr		.PrintLoop
 139+ E13F
 140+ E13F
# file closed: ./Layer1Graphics/layer1_print_at.asm
1342  E13F                  DISPLAY "Bank ",BankLAYER1," - Bytes free ",/D, $2000 - ($-LAYER1Addr), " - BankLAYER1"
1343  E13F              ; Bank 59  ------------------------------------------------------------------------------------------------------------------------
1344  E13F              ; In the first copy of the banks the "Non number" labels exist. They will map directly in other banks
1345  E13F              ; as the is aligned and data tables are after that
1346  E13F              ; need to make the ship index tables same size in each to simplify further
1347  E13F                  SLOT    ShipModelsAddr
1348  E13F                  PAGE    BankShipModels1
1349  E13F              	ORG     ShipModelsAddr, BankShipModels1
1350  E000                  INCLUDE "./Data/ShipModelMacros.asm"
# file opened: ./Data/ShipModelMacros.asm
   1+ E000              MShipBankTable          MACRO
   2+ E000 ~                                    DW      BankShipModels1
   3+ E000 ~                                    DW      BankShipModels2
   4+ E000 ~                                    DW      BankShipModels3
   5+ E000 ~                                    DW      BankShipModels4
   6+ E000                                      ENDM
   7+ E000              ; For ship number A fetch
   8+ E000              ;           the adjusted ship number in B , C = original number
   9+ E000              ;           bank number in A for the respective ship based on the ship table
  10+ E000              MGetShipBankId:         MACRO   banktable
  11+ E000 ~                                    ld      b,0
  12+ E000 ~                                    ld      c,a                                 ; c= original ship id
  13+ E000 ~            .ShiftLoop:             srl     a
  14+ E000 ~                                    srl     a
  15+ E000 ~                                    srl     a
  16+ E000 ~                                    srl     a                                   ; divide by 16
  17+ E000 ~                                    ld      b,a                                 ; b = bank nbr
  18+ E000 ~                                    ld      a,c
  19+ E000 ~                                    ld      d,b
  20+ E000 ~                                    ld      e,16
  21+ E000 ~                                    mul                                         ; de = 16 * bank number (max is about 15 banks)
  22+ E000 ~                                    sub     e                                   ; a= actual model id now
  23+ E000 ~            .SelectedBank:          ld      d,b                                 ; save current bank number
  24+ E000 ~                                    ld      b,a                                 ; b = adjusted ship nbr
  25+ E000 ~                                    ld      a,d                                 ; a = bank number
  26+ E000 ~            ;.. Now b = bank and a = adjusted ship nbr
  27+ E000 ~                                    ld      hl,banktable                        ; a= bank index
  28+ E000 ~                                    add     hl,a
  29+ E000 ~                                    add     hl,a
  30+ E000 ~                                    ld      a,(hl)                              ; a = actual bank now
  31+ E000 ~                                    ClearCarryFlag
  32+ E000 ~                                    ret
  33+ E000                                      ENDM
  34+ E000
  35+ E000              McopyVertsToUniverse:   MACRO
  36+ E000 ~                                    ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
  37+ E000 ~                                    ld          de,UBnkHullVerticies
  38+ E000 ~                                    ld          b,0
  39+ E000 ~                                    ld			a,(VertexCtX6Addr)
  40+ E000 ~                                    ld          c,a
  41+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  42+ E000 ~                                    call        memcopy_dma
  43+ E000 ~                                    ret
  44+ E000                                      ENDM
  45+ E000
  46+ E000              McopyEdgesToUniverse:   MACRO
  47+ E000 ~                                    ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
  48+ E000 ~                                    ld          de,UBnkHullEdges
  49+ E000 ~                                    ld          b,0
  50+ E000 ~                                    ld			a,(LineX4Addr)
  51+ E000 ~                                    ld          c,a
  52+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  53+ E000 ~                                    call        memcopy_dma
  54+ E000 ~                                    ret
  55+ E000                                      ENDM
  56+ E000
  57+ E000              McopyNormsToUniverse:   MACRO
  58+ E000 ~                                    ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
  59+ E000 ~                                    ld          de,UBnkHullNormals
  60+ E000 ~                                    ld          b,0
  61+ E000 ~                                    ld          a,(FaceCtX4Addr)
  62+ E000 ~                                    ld          c,a
  63+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  64+ E000 ~                                    call        memcopy_dma
  65+ E000 ~                                    ret
  66+ E000                                      ENDM
  67+ E000
  68+ E000              ; Passes in ship nbr in A and bank is part of MACRO
  69+ E000              MCopyShipToUniverse:    MACRO       banklabel
  70+ E000 ~                                    ld          hl,UBnkShipModelBank
  71+ E000 ~                                    ld          (hl),banklabel
  72+ E000 ~                                    push        af
  73+ E000 ~                                    ld          a,iyl
  74+ E000 ~                                    ld          (UBnKShipModelId),a
  75+ E000 ~                                    pop         af
  76+ E000 ~                                    ld          (UBnKShipModelNbr),a
  77+ E000 ~            .GetHullDataLength:     ld          hl,ShipModelSizeTable
  78+ E000 ~                                    add         hl,a
  79+ E000 ~                                    add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
  80+ E000 ~                                    ld          c,(hl)
  81+ E000 ~                                    inc         hl
  82+ E000 ~                                    ld          b,(hl)                      ; bc now equals length of data set
  83+ E000 ~            .GetHullDataAddress:    ld          hl,ShipModelTable
  84+ E000 ~                                    add         hl,a
  85+ E000 ~                                    add         hl,a                        ; now hl = address of ship data value
  86+ E000 ~                                    ld          a,(hl)
  87+ E000 ~                                    inc         hl
  88+ E000 ~                                    ld          h,(hl)
  89+ E000 ~                                    ld          l,a                         ; now hl = address of ship hull data
  90+ E000 ~                                    ld          de,UBnkHullCopy             ; Universe bank
  91+ E000 ~                                    ld          bc,ShipDataLength
  92+ E000 ~                                    ldir
  93+ E000 ~                                    call        CopyVertsToUniv
  94+ E000 ~                                    call        CopyEdgesToUniv
  95+ E000 ~                                    call        CopyNormsToUniv
  96+ E000 ~            .ClearName:             ld          hl,StartOfUnivName
  97+ E000 ~                                    ld          a," "
  98+ E000 ~                                    ld          b,16
  99+ E000 ~            .fillLoop:              ld          (hl),a
 100+ E000 ~                                    inc         hl
 101+ E000 ~                                    djnz        .fillLoop
 102+ E000 ~            .SetName:               ld          a,(UBnKShipModelId)
 103+ E000 ~                                    call        ShipIndexToAddress
 104+ E000 ~                                    ld          de,StartOfUnivName
 105+ E000 ~                                    ld          b,16
 106+ E000 ~            .CopyLoop:              ld          a,(hl)
 107+ E000 ~                                    cp          0
 108+ E000 ~                                    jr          z,.CopyDone
 109+ E000 ~                                    ld          (de),a
 110+ E000 ~                                    inc         hl
 111+ E000 ~                                    inc         de
 112+ E000 ~                                    djnz        .CopyLoop
 113+ E000 ~            .CopyDone:              ret
 114+ E000                                      ENDM
 115+ E000
 116+ E000              MCopyBodyToUniverse:    MACRO       copyRoutine
 117+ E000 ~                                    ld          a,13
 118+ E000 ~                                    call        copyRoutine
 119+ E000 ~                                    ret
 120+ E000                                      ENDM
 121+ E000
 122+ E000
 123+ E000              MCopyShipIdToUniverse:  MACRO
 124+ E000 ~                                    call        GetShipModelId
 125+ E000 ~                                    MMUSelectShipBankA
 126+ E000 ~                                    ld          a,b
 127+ E000 ~                                    jp          CopyShipToUniverse
 128+ E000                                      ENDM
# file closed: ./Data/ShipModelMacros.asm
1351  E000                  INCLUDE "./Data/ShipBank1Label.asm"
# file opened: ./Data/ShipBank1Label.asm
   1+ E000 53 68 69 70  ShipBank1Label:         DB  "ShipBank1      "
   1+ E004 42 61 6E 6B
   1+ E008 31 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank1Label.asm
1352  E00F              GetShipBankId:
1353  E00F              GetShipBank1Id:         MGetShipBankId ShipBankTable
1353  E00F 06 00       >                        ld      b,0
1353  E011 4F          >                        ld      c,a                                 ; c= original ship id
1353  E012 CB 3F       >.ShiftLoop:             srl     a
1353  E014 CB 3F       >                        srl     a
1353  E016 CB 3F       >                        srl     a
1353  E018 CB 3F       >                        srl     a                                   ; divide by 16
1353  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1353  E01B 79          >                        ld      a,c
1353  E01C 50          >                        ld      d,b
1353  E01D 1E 10       >                        ld      e,16
1353  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1353  E021 93          >                        sub     e                                   ; a= actual model id now
1353  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1353  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1353  E024 7A          >                        ld      a,d                                 ; a = bank number
1353  E025             >;.. Now b = bank and a = adjusted ship nbr
1353  E025 21 62 E0    >                        ld      hl,ShipBankTable                        ; a= bank index
1353  E028 ED 31       >                        add     hl,a
1353  E02A ED 31       >                        add     hl,a
1353  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1353  E02D             >                        ClearCarryFlag
1353  E02D B7          >                        or a
1353  E02E C9          >                        ret
1354  E02F              CopyVertsToUniv:
1355  E02F              CopyVertsToUniv1:       McopyVertsToUniverse
1355  E02F 2A 0B C4    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1355  E032 11 11 C4    >                        ld          de,UBnkHullVerticies
1355  E035 06 00       >                        ld          b,0
1355  E037 3A FF C3    >                        ld			a,(VertexCtX6Addr)
1355  E03A 4F          >                        ld          c,a
1355  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1355  E03C CD 5E 7D    >                        call        memcopy_dma
1355  E03F C9          >                        ret
1356  E040              CopyEdgesToUniv:
1357  E040              CopyEdgesToUniv1:       McopyEdgesToUniverse
1357  E040 2A F9 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1357  E043 11 01 C5    >                        ld          de,UBnkHullEdges
1357  E046 06 00       >                        ld          b,0
1357  E048 3A FB C3    >                        ld			a,(LineX4Addr)
1357  E04B 4F          >                        ld          c,a
1357  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1357  E04D CD 5E 7D    >                        call        memcopy_dma
1357  E050 C9          >                        ret
1358  E051              CopyNormsToUniv:
1359  E051              CopyNormsToUniv1:       McopyNormsToUniverse
1359  E051 2A 07 C4    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1359  E054 11 C9 C5    >                        ld          de,UBnkHullNormals
1359  E057 06 00       >                        ld          b,0
1359  E059 3A 03 C4    >                        ld          a,(FaceCtX4Addr)
1359  E05C 4F          >                        ld          c,a
1359  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1359  E05E CD 5E 7D    >                        call        memcopy_dma
1359  E061 C9          >                        ret
1360  E062              ShipBankTable:
1361  E062              ShipBankTable1:         MShipBankTable
1361  E062 3B 00       >                        DW      BankShipModels1
1361  E064 43 00       >                        DW      BankShipModels2
1361  E066 44 00       >                        DW      BankShipModels3
1361  E068 45 00       >                        DW      BankShipModels4
1362  E06A              CopyShipToUniverse:
1363  E06A              CopyShipToUniverse1     MCopyShipToUniverse     BankShipModels1
1363  E06A 21 41 C0    >                        ld          hl,UBnkShipModelBank
1363  E06D 36 3B       >                        ld          (hl),BankShipModels1
1363  E06F F5          >                        push        af
1363  E070 FD 7D       >                        ld          a,iyl
1363  E072 32 43 C0    >                        ld          (UBnKShipModelId),a
1363  E075 F1          >                        pop         af
1363  E076 32 42 C0    >                        ld          (UBnKShipModelNbr),a
1363  E079 21 46 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1363  E07C ED 31       >                        add         hl,a
1363  E07E ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1363  E080 4E          >                        ld          c,(hl)
1363  E081 23          >                        inc         hl
1363  E082 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1363  E083 21 C6 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1363  E086 ED 31       >                        add         hl,a
1363  E088 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1363  E08A 7E          >                        ld          a,(hl)
1363  E08B 23          >                        inc         hl
1363  E08C 66          >                        ld          h,(hl)
1363  E08D 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1363  E08E 11 F6 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1363  E091 01 1B 00    >                        ld          bc,ShipDataLength
1363  E094 ED B0       >                        ldir
1363  E096 CD 2F E0    >                        call        CopyVertsToUniv
1363  E099 CD 40 E0    >                        call        CopyEdgesToUniv
1363  E09C CD 51 E0    >                        call        CopyNormsToUniv
1363  E09F 21 10 C0    >.ClearName:             ld          hl,StartOfUnivName
1363  E0A2 3E 20       >                        ld          a," "
1363  E0A4 06 10       >                        ld          b,16
1363  E0A6 77          >.fillLoop:              ld          (hl),a
1363  E0A7 23          >                        inc         hl
1363  E0A8 10 FC       >                        djnz        .fillLoop
1363  E0AA 3A 43 C0    >.SetName:               ld          a,(UBnKShipModelId)
1363  E0AD CD 10 8E    >                        call        ShipIndexToAddress
1363  E0B0 11 10 C0    >                        ld          de,StartOfUnivName
1363  E0B3 06 10       >                        ld          b,16
1363  E0B5 7E          >.CopyLoop:              ld          a,(hl)
1363  E0B6 FE 00       >                        cp          0
1363  E0B8 28 05       >                        jr          z,.CopyDone
1363  E0BA 12          >                        ld          (de),a
1363  E0BB 23          >                        inc         hl
1363  E0BC 13          >                        inc         de
1363  E0BD 10 F6       >                        djnz        .CopyLoop
1363  E0BF C9          >.CopyDone:              ret
1364  E0C0              CopyBodyToUniverse:
1365  E0C0              CopyBodyToUniverse1:    MCopyBodyToUniverse     CopyShipToUniverse1
1365  E0C0 3E 0D       >                        ld          a,13
1365  E0C2 CD 6A E0    >                        call        CopyShipToUniverse1
1365  E0C5 C9          >                        ret
1366  E0C6                  INCLUDE "./Data/ShipModelMetaData1.asm"
# file opened: ./Data/ShipModelMetaData1.asm
   1+ E0C6              ShipModelTable:
   2+ E0C6 66 E1        ShipModelTable1:         DW Adder                                   ;00 $00
   3+ E0C8 A1 E2                                 DW Anaconda                                ;01 $01
   4+ E0CA AE E3                                 DW Asp_Mk_2                                ;02 $02
   5+ E0CC DF E4                                 DW Boa                                     ;03 $03
   6+ E0CE DC E5                                 DW CargoType5                              ;04 $04
   7+ E0D0 B0 E6                                 DW Boulder                                 ;05 $05
   8+ E0D2 5D E7                                 DW Asteroid                                ;06 $06
   9+ E0D4 3E E8                                 DW Bushmaster                              ;07 $07
  10+ E0D6 15 E9                                 DW Chameleon                               ;08 $08
  11+ E0D8 47 EA                                 DW CobraMk3                                ;09 $09
  12+ E0DA DA EB                                 DW Cobra_Mk_1                              ;10 $0A
  13+ E0DC AB EC                                 DW Cobra_Mk_3_P                            ;11 $0B
  14+ E0DE 3E EE                                 DW Constrictor                             ;12 $0C
  15+ E0E0 4B EF                                 DW Coriolis                                ;13 $0D
  16+ E0E2 72 F0                                 DW Cougar                                  ;14 $0E
  17+ E0E4 7F F1                                 DW Dodo                                    ;15 $0F
  18+ E0E6              ShipVertexTable:
  19+ E0E6 85 E1        ShipVertexTable1:        DW AdderVertices                           ;00 $00
  20+ E0E8 C0 E2                                 DW AnacondaVertices                        ;01 $01
  21+ E0EA CD E3                                 DW Asp_Mk_2Vertices                        ;02 $02
  22+ E0EC FE E4                                 DW BoaVertices                             ;03 $03
  23+ E0EE FB E5                                 DW CargoType5Vertices                      ;04 $04
  24+ E0F0 CF E6                                 DW BoulderVertices                         ;05 $05
  25+ E0F2 7C E7                                 DW AsteroidVertices                        ;06 $06
  26+ E0F4 5D E8                                 DW BushmasterVertices                      ;07 $07
  27+ E0F6 33 E9                                 DW ChameleonVertices                       ;08 $08
  28+ E0F8 66 EA                                 DW CobraMk3Vertices                        ;09 $09
  29+ E0FA F9 EB                                 DW Cobra_Mk_1Vertices                      ;10 $0A
  30+ E0FC CA EC                                 DW Cobra_Mk_3_PVertices                    ;11 $0B
  31+ E0FE 5D EE                                 DW ConstrictorVertices                     ;12 $0C
  32+ E100 6A EF                                 DW CoriolisVertices                        ;13 $0D
  33+ E102 91 F0                                 DW CougarVertices                          ;14 $0E
  34+ E104 9E F1                                 DW DodoVertices                            ;15 $0F
  35+ E106              ShipEdgeTable:
  36+ E106 F1 E1        ShipEdgeTable1:          DW AdderEdges                              ;00 $00
  37+ E108 1A E3                                 DW AnacondaEdges                           ;01 $01
  38+ E10A 3F E4                                 DW Asp_Mk_2Edges                           ;02 $02
  39+ E10C 4C E5                                 DW BoaEdges                                ;03 $03
  40+ E10E 37 E6                                 DW CargoType5Edges                         ;04 $04
  41+ E110 F9 E6                                 DW BoulderEdges                            ;05 $05
  42+ E112 B2 E7                                 DW AsteroidEdges                           ;06 $06
  43+ E114 A5 E8                                 DW BushmasterEdges                         ;07 $07
  44+ E116 9F E9                                 DW ChameleonEdges                          ;08 $08
  45+ E118 0E EB                                 DW CobraMk3Edges                           ;09 $09
  46+ E11A 3B EC                                 DW Cobra_Mk_1Edges                         ;10 $0A
  47+ E11C 72 ED                                 DW Cobra_Mk_3_PEdges                       ;11 $0B
  48+ E11E C3 EE                                 DW ConstrictorEdges                        ;12 $0C
  49+ E120 CA EF                                 DW CoriolisEdges                           ;13 $0D
  50+ E122 03 F1                                 DW CougarEdges                             ;14 $0E
  51+ E124 2E F2                                 DW DodoEdges                               ;15 $0F
  52+ E126              ShipNormalTable:
  53+ E126 65 E2        ShipNormalTable1:        DW AdderNormals                            ;00 $00
  54+ E128 7E E3                                 DW AnacondaNormals                         ;01 $01
  55+ E12A AF E4                                 DW Asp_Mk_2Normals                         ;02 $02
  56+ E12C AC E5                                 DW BoaNormals                              ;03 $03
  57+ E12E 73 E6                                 DW CargoType5Normals                       ;04 $04
  58+ E130 35 E7                                 DW BoulderNormals                          ;05 $05
  59+ E132 06 E8                                 DW AsteroidNormals                         ;06 $06
  60+ E134 F1 E8                                 DW BushmasterNormals                       ;07 $07
  61+ E136 13 EA                                 DW ChameleonNormals                        ;08 $08
  62+ E138 A6 EB                                 DW CobraMk3Normals                         ;09 $09
  63+ E13A 83 EC                                 DW Cobra_Mk_1Normals                       ;10 $0A
  64+ E13C 0A EE                                 DW Cobra_Mk_3_PNormals                     ;11 $0B
  65+ E13E 23 EF                                 DW ConstrictorNormals                      ;12 $0C
  66+ E140 3A F0                                 DW CoriolisNormals                         ;13 $0D
  67+ E142 67 F1                                 DW CougarNormals                           ;14 $0E
  68+ E144 B6 F2                                 DW DodoNormals                             ;15 $0F
  69+ E146              ShipModelSizeTable:
  70+ E146 3B 01        ShipModelSizeTable1:     DW AdderLen                                ;00 $00
  71+ E148 0D 01                                 DW AnacondaLen                             ;01 $01
  72+ E14A 31 01                                 DW Asp_Mk_2Len                             ;02 $02
  73+ E14C FD 00                                 DW BoaLen                                  ;03 $03
  74+ E14E B3 00                                 DW CargoType5Len                           ;04 $04
  75+ E150 AD 00                                 DW BoulderLen                              ;05 $05
  76+ E152 E1 00                                 DW AsteroidLen                             ;06 $06
  77+ E154 D7 00                                 DW BushmasterLen                           ;07 $07
  78+ E156 32 01                                 DW ChameleonLen                            ;08 $08
  79+ E158 93 01                                 DW CobraMk3Len                             ;09 $09
  80+ E15A D1 00                                 DW Cobra_Mk_1Len                           ;10 $0A
  81+ E15C 93 01                                 DW Cobra_Mk_3_PLen                         ;11 $0B
  82+ E15E 0D 01                                 DW ConstrictorLen                          ;12 $0C
  83+ E160 27 01                                 DW CoriolisLen                             ;13 $0D
  84+ E162 0D 01                                 DW CougarLen                               ;14 $0E
  85+ E164 67 01                                 DW DodoLen                                 ;15 $0F
  86+ E166
  87+ E166                                      include "Data/ships/Adder.asm"
# file opened: ./Data/ships/Adder.asm
   1++E166 00           Adder:	                DB $00                              ; Number of cargo canisters released when destroyed
   2++E167 C4 09                                DW 50 * 50                          ; Ship's targetable area LoHi
   3++E169 F1 E1                                DW AdderEdges                       ; Edge Data
   4++E16B 74                                   DB AdderEdgesSize                   ; Size of Edge Data
   5++E16C 00                                   DB $00                              ; Gun Vertex Byte offset
   6++E16D 16                                   DB $16                              ; Explosion Count
   7++E16E 12                                   DB AdderVertSize / 6                ; Vertex Count /6
   8++E16F 6C                                   DB AdderVertSize                    ; Vertex Count
   9++E170 1D                                   DB AdderEdgesCnt                    ; Edges Count
  10++E171 28 00                                DW $0028                            ; Bounty LoHi
  11++E173 3C                                   DB AdderNormalsSize                 ; Face (Normal) Count
  12++E174 17                                   DB $17                              ; Range when it turns to a dot
  13++E175 48                                   DB $48                              ; Energy Max
  14++E176 18                                   DB $18                              ; Speed Max
  15++E177 65 E2                                DW AdderNormals                     ; Normals
  16++E179 12                                   DB $12                              ; Q scaling
  17++E17A 21                                   DB $21                              ; Laser power and Nbr Missiles
  18++E17B 85 E1                                DW AdderVertices                    ; Verticles Address
  19++E17D 00                                   DB ShipTypeNormal                   ; Ship Type
  20++E17E 00                                   DB 0                                ; NewB Tactics
  21++E17F 80                                   DB ShipCanAnger                     ; AI Flags
  22++E180 80                                   DB $80                              ; chance of ECM module
  23++E181 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E182 00 00                                DW $0000                            ; no solid data
  25++E184 00                                   DB $00                              ; no solid data
  26++E185
  27++E185                                                     ; chance of ECM module
  28++E185 12 00 28 9F  AdderVertices:	        DB $12, $00, $28, $9F, $01, $BC     ;01
  28++E189 01 BC
  29++E18B 12 00 28 1F                          DB $12, $00, $28, $1F, $01, $23     ;02
  29++E18F 01 23
  30++E191 1E 00 18 3F                          DB $1E, $00, $18, $3F, $23, $45     ;03
  30++E195 23 45
  31++E197 1E 00 28 3F                          DB $1E, $00, $28, $3F, $45, $66     ;04
  31++E19B 45 66
  32++E19D 12 07 28 7F                          DB $12, $07, $28, $7F, $56, $7E     ;05
  32++E1A1 56 7E
  33++E1A3 12 07 28 FF                          DB $12, $07, $28, $FF, $78, $AE     ;06
  33++E1A7 78 AE
  34++E1A9 1E 00 28 BF                          DB $1E, $00, $28, $BF, $89, $AA     ;07
  34++E1AD 89 AA
  35++E1AF 1E 00 18 BF                          DB $1E, $00, $18, $BF, $9A, $BC     ;08
  35++E1B3 9A BC
  36++E1B5 12 07 28 BF                          DB $12, $07, $28, $BF, $78, $9D     ;09
  36++E1B9 78 9D
  37++E1BB 12 07 28 3F                          DB $12, $07, $28, $3F, $46, $7D     ;10
  37++E1BF 46 7D
  38++E1C1 12 07 0D 9F                          DB $12, $07, $0D, $9F, $09, $BD     ;11
  38++E1C5 09 BD
  39++E1C7 12 07 0D 1F                          DB $12, $07, $0D, $1F, $02, $4D     ;12
  39++E1CB 02 4D
  40++E1CD 12 07 0D DF                          DB $12, $07, $0D, $DF, $1A, $CE     ;13
  40++E1D1 1A CE
  41++E1D3 12 07 0D 5F                          DB $12, $07, $0D, $5F, $13, $5E     ;14
  41++E1D7 13 5E
  42++E1D9 0B 03 1D 85                          DB $0B, $03, $1D, $85, $00, $00     ;15
  42++E1DD 00 00
  43++E1DF 0B 03 1D 05                          DB $0B, $03, $1D, $05, $00, $00     ;16
  43++E1E3 00 00
  44++E1E5 0B 04 18 04                          DB $0B, $04, $18, $04, $00, $00     ;17
  44++E1E9 00 00
  45++E1EB 0B 04 18 84                          DB $0B, $04, $18, $84, $00, $00     ;18
  45++E1EF 00 00
  46++E1F1              AdderVertSize:          equ $ - AdderVertices
  47++E1F1 1F 01 00 04  AdderEdges:	            DB $1F, $01, $00, $04               ;01
  48++E1F5 07 23 04 08                          DB $07, $23, $04, $08               ;02
  49++E1F9 1F 45 08 0C                          DB $1F, $45, $08, $0C               ;03
  50++E1FD 1F 56 0C 10                          DB $1F, $56, $0C, $10               ;04
  51++E201 1F 7E 10 14                          DB $1F, $7E, $10, $14               ;05
  52++E205 1F 8A 14 18                          DB $1F, $8A, $14, $18               ;06
  53++E209 1F 9A 18 1C                          DB $1F, $9A, $18, $1C               ;07
  54++E20D 07 BC 1C 00                          DB $07, $BC, $1C, $00               ;08
  55++E211 1F 46 0C 24                          DB $1F, $46, $0C, $24               ;09
  56++E215 1F 7D 24 20                          DB $1F, $7D, $24, $20               ;10
  57++E219 1F 89 20 18                          DB $1F, $89, $20, $18               ;11
  58++E21D 1F 0B 00 28                          DB $1F, $0B, $00, $28               ;12
  59++E221 1F 9B 1C 28                          DB $1F, $9B, $1C, $28               ;13
  60++E225 1F 02 04 2C                          DB $1F, $02, $04, $2C               ;14
  61++E229 1F 24 08 2C                          DB $1F, $24, $08, $2C               ;15
  62++E22D 1F 1C 00 30                          DB $1F, $1C, $00, $30               ;16
  63++E231 1F AC 1C 30                          DB $1F, $AC, $1C, $30               ;17
  64++E235 1F 13 04 34                          DB $1F, $13, $04, $34               ;18
  65++E239 1F 35 08 34                          DB $1F, $35, $08, $34               ;19
  66++E23D 1F 0D 28 2C                          DB $1F, $0D, $28, $2C               ;20
  67++E241 1F 1E 30 34                          DB $1F, $1E, $30, $34               ;21
  68++E245 1F 9D 20 28                          DB $1F, $9D, $20, $28               ;22
  69++E249 1F 4D 24 2C                          DB $1F, $4D, $24, $2C               ;23
  70++E24D 1F AE 14 30                          DB $1F, $AE, $14, $30               ;24
  71++E251 1F 5E 10 34                          DB $1F, $5E, $10, $34               ;25
  72++E255 05 00 38 3C                          DB $05, $00, $38, $3C               ;26
  73++E259 03 00 3C 40                          DB $03, $00, $3C, $40               ;27
  74++E25D 04 00 40 44                          DB $04, $00, $40, $44               ;28
  75++E261 03 00 44 38                          DB $03, $00, $44, $38               ;29
  76++E265              AdderEdgesSize:         equ $ - AdderEdges
  77++E265              AdderEdgesCnt:          equ AdderEdgesSize/4
  78++E265 1F 00 27 0A  AdderNormals:	        DB $1F, $00, $27, $0A               ;01
  79++E269 5F 00 27 0A                          DB $5F, $00, $27, $0A               ;02
  80++E26D 1F 45 32 0D                          DB $1F, $45, $32, $0D               ;03
  81++E271 5F 45 32 0D                          DB $5F, $45, $32, $0D               ;04
  82++E275 1F 1E 34 00                          DB $1F, $1E, $34, $00               ;05
  83++E279 5F 1E 34 00                          DB $5F, $1E, $34, $00               ;06
  84++E27D 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;07
  85++E281 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;08
  86++E285 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;09
  87++E289 9F 1E 34 00                          DB $9F, $1E, $34, $00               ;10
  88++E28D DF 1E 34 00                          DB $DF, $1E, $34, $00               ;11
  89++E291 9F 45 32 0D                          DB $9F, $45, $32, $0D               ;12
  90++E295 DF 45 32 0D                          DB $DF, $45, $32, $0D               ;13
  91++E299 1F 00 1C 00                          DB $1F, $00, $1C, $00               ;14
  92++E29D 5F 00 1C 00                          DB $5F, $00, $1C, $00               ;15
  93++E2A1
  94++E2A1              AdderNormalsSize:       equ $ - AdderNormals
  95++E2A1              AdderLen:                equ $ - Adder
  96++E2A1
  97++E2A1
  98++E2A1
  99++E2A1
 100++E2A1
 101++E2A1
 102++E2A1
 103++E2A1
 104++E2A1
 105++E2A1
 106++E2A1
# file closed: ./Data/ships/Adder.asm
  88+ E2A1                                      include "Data/ships/Anaconda.asm"
# file opened: ./Data/ships/Anaconda.asm
   1++E2A1 07           Anaconda:	            DB $07                                                        ; Number of cargo canisters released when destroyed
   2++E2A2 10 27                                DW 100 * 100                                                  ; Ship's targetable area LoHi
   3++E2A4 1A E3                                DW AnacondaEdges                                              ; Edge Data
   4++E2A6 64                                   DB AnacondaEdgesSize                                          ; Size of Edge Data
   5++E2A7 30                                   DB $30                                                        ; Gun Vertex Byte offset
   6++E2A8 2E                                   DB $2E                                                        ; Explosion Count
   7++E2A9 0F                                   DB AnacondaVertSize / 6                                       ; Vertex Count /6
   8++E2AA 5A                                   DB AnacondaVertSize                                           ; Vertex Count
   9++E2AB 19                                   DB AnacondaEdgesCnt                                           ; Edges Count
  10++E2AC 00 00                                DW $0000                                                      ; Bounty LoHi
  11++E2AE 30                                   DB AnacondaNormalsSize                                        ; Face (Normal) Count
  12++E2AF 24                                   DB $24                                                        ; Range when it turns to a dot
  13++E2B0 FC                                   DB $FC                                                        ; Energy Max
  14++E2B1 0E                                   DB $0E                                                        ; Speed Max
  15++E2B2 7E E3                                DW AnacondaNormals                                            ; Normals
  16++E2B4 11                                   DB $11                                                        ; Q scaling
  17++E2B5 3F                                   DB $3F                                                        ; Laser power and Nbr Missiles
  18++E2B6 C0 E2                                DW AnacondaVertices                                           ; Verticles Address
  19++E2B8 00                                   DB ShipTypeNormal                                             ; Ship Type
  20++E2B9 00                                   DB 0                                                          ; NewB Tactics
  21++E2BA A4                                   DB ShipCanAnger | ShipFighterBaySize2 | ShipFighterSidewinder ; AI Flags
  22++E2BB D0                                   DB $D0                                                        ; chance of ECM module
  23++E2BC FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E2BD 00 00                                DW $0000                            ; no solid data
  25++E2BF 00                                   DB $00                              ; no solid data
  26++E2C0
  27++E2C0 00 07 3A 3E  AnacondaVertices:	    DB $00, $07, $3A, $3E, $01, $55 ;01
  27++E2C4 01 55
  28++E2C6 2B 0D 25 FE                          DB $2B, $0D, $25, $FE, $01, $22 ;02
  28++E2CA 01 22
  29++E2CC 1A 2F 03 FE                          DB $1A, $2F, $03, $FE, $02, $33 ;03
  29++E2D0 02 33
  30++E2D2 1A 2F 03 7E                          DB $1A, $2F, $03, $7E, $03, $44 ;04
  30++E2D6 03 44
  31++E2D8 2B 0D 25 7E                          DB $2B, $0D, $25, $7E, $04, $55 ;05
  31++E2DC 04 55
  32++E2DE 00 30 31 3E                          DB $00, $30, $31, $3E, $15, $66 ;06
  32++E2E2 15 66
  33++E2E4 45 0F 0F BE                          DB $45, $0F, $0F, $BE, $12, $77 ;07
  33++E2E8 12 77
  34++E2EA 2B 27 28 DF                          DB $2B, $27, $28, $DF, $23, $88 ;08
  34++E2EE 23 88
  35++E2F0 2B 27 28 5F                          DB $2B, $27, $28, $5F, $34, $99 ;09
  35++E2F4 34 99
  36++E2F6 45 0F 0F 3E                          DB $45, $0F, $0F, $3E, $45, $AA ;10
  36++E2FA 45 AA
  37++E2FC 2B 35 17 BF                          DB $2B, $35, $17, $BF, $FF, $FF ;11
  37++E300 FF FF
  38++E302 45 01 20 DF                          DB $45, $01, $20, $DF, $27, $88 ;12
  38++E306 27 88
  39++E308 00 00 FE 1F                          DB $00, $00, $FE, $1F, $FF, $FF ;13
  39++E30C FF FF
  40++E30E 45 01 20 5F                          DB $45, $01, $20, $5F, $49, $AA ;14
  40++E312 49 AA
  41++E314 2B 35 17 3F                          DB $2B, $35, $17, $3F, $FF, $FF ;15
  41++E318 FF FF
  42++E31A              AnacondaVertSize:       equ $ - AnacondaVertices
  43++E31A 1E 01 00 04  AnacondaEdges:	        DB $1E, $01, $00, $04           ;01
  44++E31E 1E 02 04 08                          DB $1E, $02, $04, $08           ;02
  45++E322 1E 03 08 0C                          DB $1E, $03, $08, $0C           ;03
  46++E326 1E 04 0C 10                          DB $1E, $04, $0C, $10           ;04
  47++E32A 1E 05 00 10                          DB $1E, $05, $00, $10           ;05
  48++E32E 1D 15 00 14                          DB $1D, $15, $00, $14           ;06
  49++E332 1D 12 04 18                          DB $1D, $12, $04, $18           ;07
  50++E336 1D 23 08 1C                          DB $1D, $23, $08, $1C           ;08
  51++E33A 1D 34 0C 20                          DB $1D, $34, $0C, $20           ;09
  52++E33E 1D 45 10 24                          DB $1D, $45, $10, $24           ;10
  53++E342 1E 16 14 28                          DB $1E, $16, $14, $28           ;11
  54++E346 1E 17 18 28                          DB $1E, $17, $18, $28           ;12
  55++E34A 1E 27 18 2C                          DB $1E, $27, $18, $2C           ;13
  56++E34E 1E 28 1C 2C                          DB $1E, $28, $1C, $2C           ;14
  57++E352 1F 38 1C 30                          DB $1F, $38, $1C, $30           ;15
  58++E356 1F 39 20 30                          DB $1F, $39, $20, $30           ;16
  59++E35A 1E 49 20 34                          DB $1E, $49, $20, $34           ;17
  60++E35E 1E 4A 24 34                          DB $1E, $4A, $24, $34           ;18
  61++E362 1E 5A 24 38                          DB $1E, $5A, $24, $38
  62++E366 1E 56 14 38                          DB $1E, $56, $14, $38
  63++E36A 1E 6B 28 38                          DB $1E, $6B, $28, $38
  64++E36E 1F 7B 28 30                          DB $1F, $7B, $28, $30
  65++E372 1F 78 2C 30                          DB $1F, $78, $2C, $30
  66++E376 1F 9A 30 34                          DB $1F, $9A, $30, $34
  67++E37A 1F AB 30 38                          DB $1F, $AB, $30, $38
  68++E37E              AnacondaEdgesSize:      equ $ - AnacondaEdges
  69++E37E              AnacondaEdgesCnt:       equ AnacondaEdgesSize/4
  70++E37E 7E 00 33 31  AnacondaNormals:	    DB $7E, $00, $33, $31           ;01
  71++E382 BE 33 12 57                          DB $BE, $33, $12, $57           ;02
  72++E386 FE 4D 39 13                          DB $FE, $4D, $39, $13           ;03
  73++E38A 5F 00 5A 10                          DB $5F, $00, $5A, $10           ;04
  74++E38E 7E 4D 39 13                          DB $7E, $4D, $39, $13           ;05
  75++E392 3E 33 12 57                          DB $3E, $33, $12, $57           ;06
  76++E396 3E 00 6F 14                          DB $3E, $00, $6F, $14           ;07
  77++E39A 9F 61 48 18                          DB $9F, $61, $48, $18           ;08
  78++E39E DF 6C 44 22                          DB $DF, $6C, $44, $22           ;09
  79++E3A2 5F 6C 44 22                          DB $5F, $6C, $44, $22           ;10
  80++E3A6 1F 61 48 18                          DB $1F, $61, $48, $18           ;11
  81++E3AA 1F 00 5E 12                          DB $1F, $00, $5E, $12           ;12
  82++E3AE              AnacondaNormalsSize:    equ $ - AnacondaNormals
  83++E3AE              AnacondaLen:            equ $ - Anaconda
  84++E3AE
  85++E3AE
  86++E3AE
  87++E3AE
# file closed: ./Data/ships/Anaconda.asm
  89+ E3AE                                      include "Data/ships/Asp_Mk_2.asm"
# file opened: ./Data/ships/Asp_Mk_2.asm
   1++E3AE 00           Asp_Mk_2:	            DB $00                          ; Number of cargo canisters released when destroyed
   2++E3AF 10 0E                                DW 60 * 60                      ; Ship's targetable area LoHi
   3++E3B1 3F E4                                DW Asp_Mk_2Edges                ; Edge Data
   4++E3B3 70                                   DB Asp_Mk_2EdgesSize            ; Size of Edge Data
   5++E3B4 20                                   DB $20                          ; Gun Vertex Byte offset
   6++E3B5 1A                                   DB $1A                          ; Explosion Count
   7++E3B6 13                                   DB Asp_Mk_2VertSize /6          ; Vertex Count /6
   8++E3B7 72                                   DB Asp_Mk_2VertSize             ; Vertex Count
   9++E3B8 1C                                   DB Asp_Mk_2EdgesCnt             ; Edges Count
  10++E3B9 C8 00                                DW $00C8                        ; Bounty LoHi
  11++E3BB 30                                   DB Asp_Mk_2NormalsSize          ; Face (Normal) Count
  12++E3BC 28                                   DB $28                          ; Range when it turns to a dot
  13++E3BD 96                                   DB $96                          ; Energy Max
  14++E3BE 28                                   DB $28                          ; Speed Max
  15++E3BF AF E4                                DW Asp_Mk_2Normals              ; Normals
  16++E3C1 01                                   DB $01                          ; Q scaling
  17++E3C2 29                                   DB $29                          ; Laser power and Nbr Missiles
  18++E3C3 CD E3                                DW Asp_Mk_2Vertices             ; Verticles Address
  19++E3C5 00                                   DB ShipTypeNormal               ; Ship Type
  20++E3C6 00                                   DB 0                            ; NewB Tactics
  21++E3C7 80                                   DB ShipCanAnger                 ; AI Flags
  22++E3C8 80                                   DB $80                          ; chance of ECM module
  23++E3C9 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E3CA 00 00                                DW $0000                            ; no solid data
  25++E3CC 00                                   DB $00                              ; no solid data
  26++E3CD
  27++E3CD 00 12 00 56  Asp_Mk_2Vertices:	    DB $00, $12, $00, $56, $01, $22 ;01
  27++E3D1 01 22
  28++E3D3 00 09 2D 7F                          DB $00, $09, $2D, $7F, $12, $BB ;02
  28++E3D7 12 BB
  29++E3D9 2B 00 2D 3F                          DB $2B, $00, $2D, $3F, $16, $BB ;03
  29++E3DD 16 BB
  30++E3DF 45 03 00 5F                          DB $45, $03, $00, $5F, $16, $79 ;04
  30++E3E3 16 79
  31++E3E5 2B 0E 1C 5F                          DB $2B, $0E, $1C, $5F, $01, $77 ;05
  31++E3E9 01 77
  32++E3EB 2B 00 2D BF                          DB $2B, $00, $2D, $BF, $25, $BB ;06
  32++E3EF 25 BB
  33++E3F1 45 03 00 DF                          DB $45, $03, $00, $DF, $25, $8A ;07
  33++E3F5 25 8A
  34++E3F7 2B 0E 1C DF                          DB $2B, $0E, $1C, $DF, $02, $88 ;08
  34++E3FB 02 88
  35++E3FD 1A 07 49 5F                          DB $1A, $07, $49, $5F, $04, $79 ;09
  35++E401 04 79
  36++E403 1A 07 49 DF                          DB $1A, $07, $49, $DF, $04, $8A ;10
  36++E407 04 8A
  37++E409 2B 0E 1C 1F                          DB $2B, $0E, $1C, $1F, $34, $69 ;11
  37++E40D 34 69
  38++E40F 2B 0E 1C 9F                          DB $2B, $0E, $1C, $9F, $34, $5A ;12
  38++E413 34 5A
  39++E415 00 09 2D 3F                          DB $00, $09, $2D, $3F, $35, $6B ;13
  39++E419 35 6B
  40++E41B 11 00 2D AA                          DB $11, $00, $2D, $AA, $BB, $BB ;14
  40++E41F BB BB
  41++E421 11 00 2D 29                          DB $11, $00, $2D, $29, $BB, $BB ;15
  41++E425 BB BB
  42++E427 00 04 2D 6A                          DB $00, $04, $2D, $6A, $BB, $BB ;16
  42++E42B BB BB
  43++E42D 00 04 2D 28                          DB $00, $04, $2D, $28, $BB, $BB ;17
  43++E431 BB BB
  44++E433 00 07 49 4A                          DB $00, $07, $49, $4A, $04, $04 ;18
  44++E437 04 04
  45++E439 00 07 53 4A                          DB $00, $07, $53, $4A, $04, $04 ;19
  45++E43D 04 04
  46++E43F              Asp_Mk_2VertSize:       equ $ - Asp_Mk_2Vertices
  47++E43F 16 12 00 04  Asp_Mk_2Edges:	        DB $16, $12, $00, $04           ;01
  48++E443 16 01 00 10                          DB $16, $01, $00, $10           ;02
  49++E447 16 02 00 1C                          DB $16, $02, $00, $1C           ;03
  50++E44B 1F 1B 04 08                          DB $1F, $1B, $04, $08           ;04
  51++E44F 1F 16 08 0C                          DB $1F, $16, $08, $0C           ;05
  52++E453 10 79 0C 20                          DB $10, $79, $0C, $20           ;06
  53++E457 1F 04 20 24                          DB $1F, $04, $20, $24           ;07
  54++E45B 10 8A 18 24                          DB $10, $8A, $18, $24           ;08
  55++E45F 1F 25 14 18                          DB $1F, $25, $14, $18           ;09
  56++E463 1F 2B 04 14                          DB $1F, $2B, $04, $14           ;10
  57++E467 1F 17 0C 10                          DB $1F, $17, $0C, $10           ;11
  58++E46B 1F 07 10 20                          DB $1F, $07, $10, $20           ;12
  59++E46F 1F 28 18 1C                          DB $1F, $28, $18, $1C           ;13
  60++E473 1F 08 1C 24                          DB $1F, $08, $1C, $24           ;14
  61++E477 1F 6B 08 30                          DB $1F, $6B, $08, $30           ;15
  62++E47B 1F 5B 14 30                          DB $1F, $5B, $14, $30           ;16
  63++E47F 16 36 28 30                          DB $16, $36, $28, $30           ;17
  64++E483 16 35 2C 30                          DB $16, $35, $2C, $30           ;18
  65++E487 16 34 28 2C                          DB $16, $34, $28, $2C
  66++E48B 1F 5A 18 2C                          DB $1F, $5A, $18, $2C
  67++E48F 1F 4A 24 2C                          DB $1F, $4A, $24, $2C
  68++E493 1F 69 0C 28                          DB $1F, $69, $0C, $28
  69++E497 1F 49 20 28                          DB $1F, $49, $20, $28
  70++E49B 0A BB 34 3C                          DB $0A, $BB, $34, $3C
  71++E49F 09 BB 3C 38                          DB $09, $BB, $3C, $38
  72++E4A3 08 BB 38 40                          DB $08, $BB, $38, $40
  73++E4A7 08 BB 40 34                          DB $08, $BB, $40, $34
  74++E4AB 0A 04 48 44                          DB $0A, $04, $48, $44
  75++E4AF              Asp_Mk_2EdgesSize:      equ $ - Asp_Mk_2Edges
  76++E4AF              Asp_Mk_2EdgesCnt:       equ Asp_Mk_2EdgesSize/4
  77++E4AF 5F 00 23 05  Asp_Mk_2Normals:	    DB $5F, $00, $23, $05           ;01
  78++E4B3 7F 08 26 07                          DB $7F, $08, $26, $07           ;02
  79++E4B7 FF 08 26 07                          DB $FF, $08, $26, $07           ;03
  80++E4BB 36 00 18 01                          DB $36, $00, $18, $01           ;04
  81++E4BF 1F 00 2B 13                          DB $1F, $00, $2B, $13           ;05
  82++E4C3 BF 06 1C 02                          DB $BF, $06, $1C, $02           ;06
  83++E4C7 3F 06 1C 02                          DB $3F, $06, $1C, $02           ;07
  84++E4CB 5F 3B 40 1F                          DB $5F, $3B, $40, $1F           ;08
  85++E4CF DF 3B 40 1F                          DB $DF, $3B, $40, $1F           ;09
  86++E4D3 1F 50 2E 32                          DB $1F, $50, $2E, $32           ;10
  87++E4D7 9F 50 2E 32                          DB $9F, $50, $2E, $32           ;11
  88++E4DB 3F 00 00 5A                          DB $3F, $00, $00, $5A           ;12
  89++E4DF              Asp_Mk_2NormalsSize:    equ $ - Asp_Mk_2Normals
  90++E4DF              Asp_Mk_2Len:            equ $ - Asp_Mk_2
  91++E4DF
  92++E4DF
  93++E4DF
  94++E4DF
# file closed: ./Data/ships/Asp_Mk_2.asm
  90+ E4DF                                      include "Data/ships/Boa.asm"
# file opened: ./Data/ships/Boa.asm
   1++E4DF 05           Boa:	                DB $05                          ; Number of cargo canisters released when destroyed
   2++E4E0 24 13                                DW 70 * 70                      ; Ship's targetable area LoHi
   3++E4E2 4C E5                                DW BoaEdges                     ; Edge Data
   4++E4E4 60                                   DB BoaEdgesSize                 ; Size of Edge Data
   5++E4E5 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E4E6 26                                   DB $26                          ; Explosion Count
   7++E4E7 0D                                   DB BoaVertSize /6               ; Vertex Count /6
   8++E4E8 4E                                   DB BoaVertSize                  ; Vertex Count
   9++E4E9 18                                   DB BoaEdgesCnt                  ; Edges Count
  10++E4EA 00 00                                DW $0000                        ; Bounty LoHi
  11++E4EC 30                                   DB BoaNormalsSize               ; Face (Normal) Count
  12++E4ED 28                                   DB $28                          ; Range when it turns to a dot
  13++E4EE FA                                   DB $FA                          ; Energy Max
  14++E4EF 18                                   DB $18                          ; Speed Max
  15++E4F0 AC E5                                DW BoaNormals                   ; Normals
  16++E4F2 00                                   DB $00                          ; Q scaling
  17++E4F3 1C                                   DB $1C                          ; Laser power and Nbr Missiles
  18++E4F4 FE E4                                DW BoaVertices                  ; Verticles Address
  19++E4F6 00                                   DB ShipTypeNormal               ; Ship Type
  20++E4F7 00                                   DB 0                            ; NewB Tactics
  21++E4F8 80                                   DB ShipCanAnger                 ; AI Flags
  22++E4F9 A0                                   DB $A0                          ; chance of ECM module
  23++E4FA FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E4FB 00 00                                DW $0000                            ; no solid data
  25++E4FD 00                                   DB $00                              ; no solid data
  26++E4FE
  27++E4FE 00 00 5D 1F  BoaVertices:	        DB $00, $00, $5D, $1F, $FF, $FF ; 01
  27++E502 FF FF
  28++E504 00 28 57 38                          DB $00, $28, $57, $38, $02, $33 ; 02
  28++E508 02 33
  29++E50A 26 19 63 78                          DB $26, $19, $63, $78, $01, $44 ; 03
  29++E50E 01 44
  30++E510 26 19 63 F8                          DB $26, $19, $63, $F8, $12, $55 ; 04
  30++E514 12 55
  31++E516 26 28 3B BF                          DB $26, $28, $3B, $BF, $23, $69 ; 05
  31++E51A 23 69
  32++E51C 26 28 3B 3F                          DB $26, $28, $3B, $3F, $03, $6B ; 06
  32++E520 03 6B
  33++E522 3E 00 43 3F                          DB $3E, $00, $43, $3F, $04, $8B ; 07
  33++E526 04 8B
  34++E528 18 41 4F 7F                          DB $18, $41, $4F, $7F, $14, $8A ; 08
  34++E52C 14 8A
  35++E52E 18 41 4F FF                          DB $18, $41, $4F, $FF, $15, $7A ; 09
  35++E532 15 7A
  36++E534 3E 00 43 BF                          DB $3E, $00, $43, $BF, $25, $79 ; 10
  36++E538 25 79
  37++E53A 00 07 6B 36                          DB $00, $07, $6B, $36, $02, $AA ; 11
  37++E53E 02 AA
  38++E540 0D 09 6B 76                          DB $0D, $09, $6B, $76, $01, $AA ; 12
  38++E544 01 AA
  39++E546 0D 09 6B F6                          DB $0D, $09, $6B, $F6, $12, $CC ; 13
  39++E54A 12 CC
  40++E54C              BoaVertSize:            equ $ - BoaVertices
  41++E54C 1F 6B 00 14  BoaEdges:	            DB $1F, $6B, $00, $14
  42++E550 1F 8A 00 1C                          DB $1F, $8A, $00, $1C
  43++E554 1F 79 00 24                          DB $1F, $79, $00, $24
  44++E558 1D 69 00 10                          DB $1D, $69, $00, $10
  45++E55C 1D 8B 00 18                          DB $1D, $8B, $00, $18
  46++E560 1D 7A 00 20                          DB $1D, $7A, $00, $20
  47++E564 1F 36 10 14                          DB $1F, $36, $10, $14
  48++E568 1F 0B 14 18                          DB $1F, $0B, $14, $18
  49++E56C 1F 48 18 1C                          DB $1F, $48, $18, $1C
  50++E570 1F 1A 1C 20                          DB $1F, $1A, $1C, $20
  51++E574 1F 57 20 24                          DB $1F, $57, $20, $24
  52++E578 1F 29 10 24                          DB $1F, $29, $10, $24
  53++E57C 18 23 04 10                          DB $18, $23, $04, $10
  54++E580 18 03 04 14                          DB $18, $03, $04, $14
  55++E584 18 25 0C 24                          DB $18, $25, $0C, $24
  56++E588 18 15 0C 20                          DB $18, $15, $0C, $20
  57++E58C 18 04 08 18                          DB $18, $04, $08, $18
  58++E590 18 14 08 1C                          DB $18, $14, $08, $1C
  59++E594 16 02 04 28                          DB $16, $02, $04, $28
  60++E598 16 01 08 2C                          DB $16, $01, $08, $2C
  61++E59C 16 12 0C 30                          DB $16, $12, $0C, $30
  62++E5A0 0E 0C 28 2C                          DB $0E, $0C, $28, $2C
  63++E5A4 0E 1C 2C 30                          DB $0E, $1C, $2C, $30
  64++E5A8 0E 2C 30 28                          DB $0E, $2C, $30, $28
  65++E5AC              BoaEdgesSize:           equ $ - BoaEdges
  66++E5AC              BoaEdgesCnt:            equ BoaEdgesSize/4
  67++E5AC 3F 2B 25 3C  BoaNormals:	            DB $3F, $2B, $25, $3C
  68++E5B0 7F 00 2D 59                          DB $7F, $00, $2D, $59
  69++E5B4 BF 2B 25 3C                          DB $BF, $2B, $25, $3C
  70++E5B8 1F 00 28 00                          DB $1F, $00, $28, $00
  71++E5BC 7F 3E 20 14                          DB $7F, $3E, $20, $14
  72++E5C0 FF 3E 20 14                          DB $FF, $3E, $20, $14
  73++E5C4 1F 00 17 06                          DB $1F, $00, $17, $06
  74++E5C8 DF 17 0F 09                          DB $DF, $17, $0F, $09
  75++E5CC 5F 17 0F 09                          DB $5F, $17, $0F, $09
  76++E5D0 9F 1A 0D 0A                          DB $9F, $1A, $0D, $0A
  77++E5D4 5F 00 1F 0C                          DB $5F, $00, $1F, $0C
  78++E5D8 1F 1A 0D 0A                          DB $1F, $1A, $0D, $0A
  79++E5DC              BoaNormalsSize:         equ $ - BoaNormals
  80++E5DC              BoaLen:                 equ $ - Boa
  81++E5DC
# file closed: ./Data/ships/Boa.asm
  91+ E5DC
  92+ E5DC                                      include "Data/ships/CargoType5.asm"
# file opened: ./Data/ships/CargoType5.asm
   1++E5DC 00           CargoType5              DB $00                                     ; Number of cargo canisters released when destroyed
   2++E5DD 90 01                                DW 20 * 20                                 ; Ship's targetable area LoHi
   3++E5DF 37 E6                                DW CargoType5Edges                         ; Edge Data
   4++E5E1 3C                                   DB CargoType5EdgesSize                     ; Size of Edge Data
   5++E5E2 00                                   DB $00                                     ; Gun Vertex Byte offset
   6++E5E3 12                                   DB $12                                     ; Explosion Count
   7++E5E4 0A                                   DB CargoType5VertSize /6                   ; Vertex Count /6
   8++E5E5 3C                                   DB CargoType5VertSize                      ; Vertex Count
   9++E5E6 0F                                   DB CargoType5EdgesCnt                      ; Edges Count
  10++E5E7 00 00                                DW $0000                                   ; Bounty LoHi
  11++E5E9 1C                                   DB CargoType5NormalsSize                   ; Face (Normal) Count
  12++E5EA 0C                                   DB $0C                                     ; Range when it turns to a dot
  13++E5EB 11                                   DB $11                                     ; Energy Max
  14++E5EC 0F                                   DB $0F                                     ; Speed Max
  15++E5ED 73 E6                                DW CargoType5Normals                       ; Normals
  16++E5EF 02                                   DB $02                                     ; Q scaling
  17++E5F0 00                                   DB $00                                     ; Laser power and Nbr Missiles
  18++E5F1 FB E5                                DW CargoType5Vertices                      ; Verticles Address
  19++E5F3 04                                   DB ShipTypeScoopable                       ; Ship Type
  20++E5F4 00                                   DB 0                                       ; NewB Tactics
  21++E5F5 00                                   DB 0                                       ; AI Flags
  22++E5F6 00                                   DB $0                                      ; chance of ECM module
  23++E5F7 00                                   DB $00                                     ; Supports Solid Fill
  24++E5F8 8F E6                                DW CargoType5Traingles                  ;
  25++E5FA 21                                   DB CargoType5TrainglesSize
  26++E5FB              ; So cargo is               Edge offset $0050  Face Offset $008C, Verices will alwys be +20, LineMax 31 -> 4  EdgeCnt 15  VertexCnt 60 -> 10     FaceCn 28 -> 7
  27++E5FB              ;                                       Faces
  28++E5FB              ;                            X  Y    Z  12 34  Vis
  29++E5FB 18 10 00 1F  CargoType5Vertices		DB $18,$10,$00,$1F,$10,$55 	               ;00  Top Right
  29++E5FF 10 55
  30++E601 18 05 0F 1F                          DB $18,$05,$0F,$1F,$10,$22                 ;01  Mid Right Near
  30++E605 10 22
  31++E607 18 0D 09 5F                          DB $18,$0D,$09,$5F,$20,$33                 ;02  Bottom right Near
  31++E60B 20 33
  32++E60D 18 0D 09 7F                          DB $18,$0D,$09,$7F,$30,$44                 ;03  Bottom Right Rear
  32++E611 30 44
  33++E613 18 05 0F 3F                          DB $18,$05,$0F,$3F,$40,$55                 ;04  Mid Right Rear
  33++E617 40 55
  34++E619 18 10 00 9F                          DB $18,$10,$00,$9F,$51,$66                 ;05  Left versions
  34++E61D 51 66
  35++E61F 18 05 0F 9F                          DB $18,$05,$0F,$9F,$21,$66                 ;06
  35++E623 21 66
  36++E625 18 0D 09 DF                          DB $18,$0D,$09,$DF,$32,$66                 ;07
  36++E629 32 66
  37++E62B 18 0D 09 FF                          DB $18,$0D,$09,$FF,$43,$66                 ;08
  37++E62F 43 66
  38++E631 18 05 0F BF                          DB $18,$05,$0F,$BF,$54,$66                 ;09
  38++E635 54 66
  39++E637              CargoType5VertSize      equ $  - CargoType5Vertices
  40++E637              ;                          Vis  FacVert Offset (4 bytexVertnbr)
  41++E637              ;                               12  01 02
  42++E637 1F 10 00 04  CargoType5Edges			DB $1F,$10,$00,$04 	       ;00 Face  0,1
  43++E63B 1F 20 04 08                          DB $1F,$20,$04,$08         ;01
  44++E63F 1F 30 08 0C                          DB $1F,$30,$08,$0C         ;02
  45++E643 1F 40 0C 10                          DB $1F,$40,$0C,$10         ;03
  46++E647 1F 50 00 10                          DB $1F,$50,$00,$10         ;04
  47++E64B 1F 51 00 14                          DB $1F,$51,$00,$14         ;05
  48++E64F 1F 21 04 18                          DB $1F,$21,$04,$18         ;06
  49++E653 1F 32 08 1C                          DB $1F,$32,$08,$1C         ;07
  50++E657 1F 43 0C 20                          DB $1F,$43,$0C,$20         ;08
  51++E65B 1F 54 10 24                          DB $1F,$54,$10,$24         ;19
  52++E65F 1F 61 14 18                          DB $1F,$61,$14,$18         ;10
  53++E663 1F 62 18 1C                          DB $1F,$62,$18,$1C         ;11
  54++E667 1F 63 1C 20                          DB $1F,$63,$1C,$20         ;12
  55++E66B 1F 64 20 24                          DB $1F,$64,$20,$24         ;13
  56++E66F 1F 65 24 14                          DB $1F,$65,$24,$14         ;14
  57++E673              CargoType5EdgesSize     equ $  - CargoType5Edges
  58++E673              CargoType5EdgesCnt      equ CargoType5EdgesSize / 4
  59++E673              ;                           x  y    z   vis
  60++E673 1F 60 00 00  CargoType5Normals    	DB $1F,$60,$00,$00 			               ;00 Right side
  61++E677 1F 00 29 1E                          DB $1F,$00,$29,$1E                         ;01
  62++E67B 5F 00 12 30                          DB $5F,$00,$12,$30                         ;02
  63++E67F 5F 00 33 00                          DB $5F,$00,$33,$00                         ;03
  64++E683 7F 00 12 30                          DB $7F,$00,$12,$30                         ;04
  65++E687 3F 00 29 1E                          DB $3F,$00,$29,$1E                         ;05 Left
  66++E68B 9F 60 00 00                          DB $9F,$60,$00,$00   ; end Cargo cannister ;06 right side
  67++E68F              CargoType5NormalsSize   equ $  - CargoType5Normals
  68++E68F              CargoType5Len           equ $  - CargoType5
  69++E68F                                      ; Triangles is made of a list of edges
  70++E68F              ; Ideal is pointers have a DW at the end to the list of triangles and count
  71++E68F              ; for testing we will do a simple search
  72++E68F              ;                          Nrm NodeOffset X 1
  73++E68F              ;                                0    1    2
  74++E68F 00 00 04 10  CargoType5Traingles     DB $00,$00*4, $01*4, $04*4
  75++E693 00 04 08 10                          DB $00,$01*4, $02*4, $04*4
  76++E697 00 08 0C 10                          DB $00,$02*4, $03*4, $04*4
  77++E69B 01 00 10 14                          DB $01,$00*4, $04*4, $05*4
  78++E69F 01 10 14 18                          DB $01,$04*4, $05*4, $06*4
  79++E6A3                                  ;   DB $02,
  80++E6A3                                  ;   DB $03,
  81++E6A3                                  ;   DB $03,
  82++E6A3                                  ;   DB $04,
  83++E6A3                                  ;   DB $04,
  84++E6A3                                  ;   DB $01,
  85++E6A3                                  ;   DB $01,
  86++E6A3                                  ;   DB $01,
  87++E6A3                                  ;   DB $01,
  88++E6A3 06 14 18 24                          DB $06,$05*4, $06*4, $09*4 ; its we store UBNkNodeArray + this offset it will save one memroy ready
  89++E6A7 06 18 1C 24                          DB $06,$06*4, $07*4, $09*4
  90++E6AB 06 1C 20 24                          DB $06,$07*4, $08*4, $09*4
  91++E6AF FF                                   DB $FF ; Very important end of traingle list marker
  92++E6B0              CargoType5TrainglesSize:equ $  -  CargoType5Traingles
  93++E6B0
  94++E6B0
  95++E6B0
# file closed: ./Data/ships/CargoType5.asm
  93+ E6B0                                      include "Data/ships/Boulder.asm"
# file opened: ./Data/ships/Boulder.asm
   1++E6B0 00           Boulder:	            DB $00                               ; Number of cargo canisters released when destroyed
   2++E6B1 84 03                                DW 30 * 30                           ; Ship's targetable area LoHi
   3++E6B3 F9 E6                                DW BoulderEdges                      ; Edge Data
   4++E6B5 3C                                   DB BoulderEdgesSize                  ; Size of Edge Data
   5++E6B6 00                                   DB $00                               ; Gun Vertex Byte offset
   6++E6B7 0E                                   DB $0E                               ; Explosion Count
   7++E6B8 07                                   DB BoulderVertSize /6                ; Vertex Count /6
   8++E6B9 2A                                   DB BoulderVertSize                   ; Vertex Count
   9++E6BA 0F                                   DB BoulderEdgesCnt                   ; Edges Count
  10++E6BB 01 00                                DW $0001                             ; Bounty LoHi
  11++E6BD 28                                   DB BoulderNormalsSize                ; Face (Normal) Count
  12++E6BE 14                                   DB $14                               ; Range when it turns to a dot
  13++E6BF 14                                   DB $14                               ; Energy Max
  14++E6C0 1E                                   DB $1E                               ; Speed Max
  15++E6C1 35 E7                                DW BoulderNormals                    ; Normals
  16++E6C3 02                                   DB $02                               ; Q scaling
  17++E6C4 00                                   DB $00                               ; Laser power and Nbr Missiles
  18++E6C5 CF E6                                DW BoulderVertices                   ; Verticles Address
  19++E6C7 03                                   DB ShipTypeJunk                      ; Ship Type
  20++E6C8 00                                   DB 0                                 ; NewB Tactics
  21++E6C9 00                                   DB 0                                 ; AI Flags
  22++E6CA A0                                   DB $A0                               ; chance of ECM module
  23++E6CB FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E6CC 00 00                                DW $0000                            ; no solid data
  25++E6CE 00                                   DB $00                              ; no solid data
  26++E6CF
  27++E6CF 12 25 0B BF  BoulderVertices:	    DB $12, $25, $0B, $BF, $01, $59
  27++E6D3 01 59
  28++E6D5 1E 07 0C 1F                          DB $1E, $07, $0C, $1F, $12, $56
  28++E6D9 12 56
  29++E6DB 1C 07 0C 7F                          DB $1C, $07, $0C, $7F, $23, $67
  29++E6DF 23 67
  30++E6E1 02 00 27 3F                          DB $02, $00, $27, $3F, $34, $78
  30++E6E5 34 78
  31++E6E7 1C 22 1E BF                          DB $1C, $22, $1E, $BF, $04, $89
  31++E6EB 04 89
  32++E6ED 05 0A 0D 5F                          DB $05, $0A, $0D, $5F, $FF, $FF
  32++E6F1 FF FF
  33++E6F3 14 11 1E 3F                          DB $14, $11, $1E, $3F, $FF, $FF
  33++E6F7 FF FF
  34++E6F9              BoulderVertSize:        equ $ - BoulderVertices
  35++E6F9 1F 15 00 04  BoulderEdges:	        DB $1F, $15, $00, $04
  36++E6FD 1F 26 04 08                          DB $1F, $26, $04, $08
  37++E701 1F 37 08 0C                          DB $1F, $37, $08, $0C
  38++E705 1F 48 0C 10                          DB $1F, $48, $0C, $10
  39++E709 1F 09 10 00                          DB $1F, $09, $10, $00
  40++E70D 1F 01 00 14                          DB $1F, $01, $00, $14
  41++E711 1F 12 04 14                          DB $1F, $12, $04, $14
  42++E715 1F 23 08 14                          DB $1F, $23, $08, $14
  43++E719 1F 34 0C 14                          DB $1F, $34, $0C, $14
  44++E71D 1F 04 10 14                          DB $1F, $04, $10, $14
  45++E721 1F 59 00 18                          DB $1F, $59, $00, $18
  46++E725 1F 56 04 18                          DB $1F, $56, $04, $18
  47++E729 1F 67 08 18                          DB $1F, $67, $08, $18
  48++E72D 1F 78 0C 18                          DB $1F, $78, $0C, $18
  49++E731 1F 89 10 18                          DB $1F, $89, $10, $18
  50++E735              BoulderEdgesSize:       equ $ - BoulderEdges
  51++E735              BoulderEdgesCnt:        equ BoulderEdgesSize/4
  52++E735 DF 0F 03 08  BoulderNormals:	        DB $DF, $0F, $03, $08
  53++E739 9F 07 0C 1E                          DB $9F, $07, $0C, $1E
  54++E73D 5F 20 2F 18                          DB $5F, $20, $2F, $18
  55++E741 FF 03 27 07                          DB $FF, $03, $27, $07
  56++E745 FF 05 04 01                          DB $FF, $05, $04, $01
  57++E749 1F 31 54 08                          DB $1F, $31, $54, $08
  58++E74D 3F 70 15 15                          DB $3F, $70, $15, $15
  59++E751 7F 4C 23 52                          DB $7F, $4C, $23, $52
  60++E755 3F 16 38 89                          DB $3F, $16, $38, $89
  61++E759 3F 28 6E 26                          DB $3F, $28, $6E, $26
  62++E75D              BoulderNormalsSize:     equ $ - BoulderNormals
  63++E75D              BoulderLen:             equ $ - Boulder
  64++E75D
# file closed: ./Data/ships/Boulder.asm
  94+ E75D                                      include "Data/ships/Asteroid.asm"
# file opened: ./Data/ships/Asteroid.asm
   1++E75D 00           Asteroid:	            DB $00                          ; Number of cargo canisters released when destroyed
   2++E75E 00 19                                DW 80 * 80                      ; Ship's targetable area LoHi
   3++E760 B2 E7                                DW AsteroidEdges                ; Edge Data
   4++E762 54                                   DB AsteroidEdgesSize            ; Size of Edge Data
   5++E763 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E764 22                                   DB $22                          ; Explosion Count
   7++E765 09                                   DB AsteroidVertSize /6          ; Vertex Count /6
   8++E766 36                                   DB AsteroidVertSize             ; Vertex Count
   9++E767 15                                   DB AsteroidEdgesCnt             ; Edges Count
  10++E768 05 00                                DW $0005                        ; Bounty LoHi
  11++E76A 38                                   DB AsteroidNormalsSize          ; Face (Normal) Count
  12++E76B 32                                   DB $32                          ; Range when it turns to a dot
  13++E76C 3C                                   DB $3C                          ; Energy Max
  14++E76D 1E                                   DB $1E                          ; Speed Max
  15++E76E 06 E8                                DW AsteroidNormals              ; Normals
  16++E770 01                                   DB $01                          ; Q scaling
  17++E771 00                                   DB $00                          ; Laser power and Nbr Missiles
  18++E772 7C E7                                DW AsteroidVertices             ; Verticles Address
  19++E774 03                                   DB ShipTypeJunk                 ; Ship Type
  20++E775 00                                   DB 0                            ; NewB Tactics
  21++E776 00                                   DB 0                            ; AI Flags
  22++E777 00                                   DB $00                          ; chance of ECM module
  23++E778 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E779 00 00                                DW $0000                            ; no solid data
  25++E77B 00                                   DB $00                              ; no solid data
  26++E77C
  27++E77C 00 50 00 1F  AsteroidVertices:	    DB $00, $50, $00, $1F, $FF, $FF ;01
  27++E780 FF FF
  28++E782 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF ;02
  28++E786 FF FF
  29++E788 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF ;03
  29++E78C FF FF
  30++E78E 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF ;04
  30++E792 FF FF
  31++E794 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC ;05
  31++E798 65 DC
  32++E79A 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF ;06
  32++E79E FF FF
  33++E7A0 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32 ;07
  33++E7A4 10 32
  34++E7A6 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF ;08
  34++E7AA FF FF
  35++E7AC 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA ;09
  35++E7B0 98 BA
  36++E7B2              AsteroidVertSize:       equ $ - AsteroidVertices
  37++E7B2 1F 72 00 04  AsteroidEdges:	        DB $1F, $72, $00, $04           ;01
  38++E7B6 1F D6 00 10                          DB $1F, $D6, $00, $10           ;02
  39++E7BA 1F C5 0C 10                          DB $1F, $C5, $0C, $10           ;03
  40++E7BE 1F B4 08 0C                          DB $1F, $B4, $08, $0C           ;04
  41++E7C2 1F A3 04 08                          DB $1F, $A3, $04, $08           ;05
  42++E7C6 1F 32 04 18                          DB $1F, $32, $04, $18           ;06
  43++E7CA 1F 31 08 18                          DB $1F, $31, $08, $18           ;07
  44++E7CE 1F 41 08 14                          DB $1F, $41, $08, $14           ;08
  45++E7D2 1F 10 14 18                          DB $1F, $10, $14, $18           ;09
  46++E7D6 1F 60 00 14                          DB $1F, $60, $00, $14           ;10
  47++E7DA 1F 54 0C 14                          DB $1F, $54, $0C, $14           ;11
  48++E7DE 1F 20 00 18                          DB $1F, $20, $00, $18           ;12
  49++E7E2 1F 65 10 14                          DB $1F, $65, $10, $14           ;13
  50++E7E6 1F A8 04 20                          DB $1F, $A8, $04, $20           ;14
  51++E7EA 1F 87 04 1C                          DB $1F, $87, $04, $1C           ;15
  52++E7EE 1F D7 00 1C                          DB $1F, $D7, $00, $1C           ;16
  53++E7F2 1F DC 10 1C                          DB $1F, $DC, $10, $1C           ;17
  54++E7F6 1F C9 0C 1C                          DB $1F, $C9, $0C, $1C           ;18
  55++E7FA 1F B9 0C 20                          DB $1F, $B9, $0C, $20
  56++E7FE 1F BA 08 20                          DB $1F, $BA, $08, $20
  57++E802 1F 98 1C 20                          DB $1F, $98, $1C, $20
  58++E806
  59++E806              AsteroidEdgesSize:      equ $ - AsteroidEdges
  60++E806              AsteroidEdgesCnt:       equ AsteroidEdgesSize/4
  61++E806 1F 09 42 51  AsteroidNormals:	    DB $1F, $09, $42, $51           ;01
  62++E80A 5F 09 42 51                          DB $5F, $09, $42, $51           ;02
  63++E80E 9F 48 40 1F                          DB $9F, $48, $40, $1F           ;03
  64++E812 DF 40 49 2F                          DB $DF, $40, $49, $2F           ;04
  65++E816 5F 2D 4F 41                          DB $5F, $2D, $4F, $41           ;05
  66++E81A 1F 87 0F 23                          DB $1F, $87, $0F, $23           ;06
  67++E81E 1F 26 4C 46                          DB $1F, $26, $4C, $46           ;07
  68++E822 BF 42 3B 27                          DB $BF, $42, $3B, $27           ;08
  69++E826 FF 43 0F 50                          DB $FF, $43, $0F, $50           ;09
  70++E82A 7F 42 0E 4B                          DB $7F, $42, $0E, $4B           ;10
  71++E82E FF 46 50 28                          DB $FF, $46, $50, $28           ;11
  72++E832 7F 3A 66 33                          DB $7F, $3A, $66, $33           ;12
  73++E836 3F 51 09 43                          DB $3F, $51, $09, $43           ;13
  74++E83A 3F 2F 5E 3F                          DB $3F, $2F, $5E, $3F           ;14
  75++E83E              AsteroidNormalsSize:    equ $ - AsteroidNormals
  76++E83E              AsteroidLen:            equ $ - Asteroid
  77++E83E
  78++E83E
# file closed: ./Data/ships/Asteroid.asm
  95+ E83E
  96+ E83E                                      include "Data/ships/Bushmaster.asm"
# file opened: ./Data/ships/Bushmaster.asm
   1++E83E 00           Bushmaster:	            DB $00                           ; Number of cargo canisters released when destroyed
   2++E83F 9A 10                                DW $109A                         ; Ship's targetable area LoHi
   3++E841 A5 E8                                DW BushmasterEdges               ; Edge Data
   4++E843 4C                                   DB BushmasterEdgesSize           ; Size of Edge Data
   5++E844 00                                   DB $00                           ; Gun Vertex Byte offset
   6++E845 1E                                   DB $1E                           ; Explosion Count
   7++E846 0C                                   DB BushmasterVertSize /6         ; Vertex Count /6
   8++E847 48                                   DB BushmasterVertSize            ; Vertex Count
   9++E848 13                                   DB BushmasterEdgesCnt            ; Edges Count
  10++E849 96 00                                DW $0096                         ; Bounty LoHi
  11++E84B 24                                   DB BushmasterNormalsSize         ; Face (Normal) Count
  12++E84C 14                                   DB $14                           ; Range when it turns to a dot
  13++E84D 4A                                   DB $4A                           ; Energy Max
  14++E84E 23                                   DB $23                           ; Speed Max
  15++E84F F1 E8                                DW BushmasterNormals             ; Normals
  16++E851 02                                   DB $02                           ; Q scaling
  17++E852 21                                   DB $20 | ShipMissiles1           ; Laser power and Nbr Missiles
  18++E853 5D E8                                DW BushmasterVertices            ; Verticles Address
  19++E855 00                                   DB ShipTypeNormal                ; Ship Type
  20++E856 00                                   DB 0                             ; NewB Tactics
  21++E857 80                                   DB ShipCanAnger                  ; AI Flags
  22++E858 70                                   DB $70                           ; chance of ECM module
  23++E859 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E85A 00 00                                DW $0000                            ; no solid data
  25++E85C 00                                   DB $00                              ; no solid data
  26++E85D
  27++E85D 00 00 3C 1F  BushmasterVertices:	    DB $00, $00, $3C, $1F, $23, $01  ; 01
  27++E861 23 01
  28++E863 32 00 14 1F                          DB $32, $00, $14, $1F, $57, $13  ; 02
  28++E867 57 13
  29++E869 32 00 14 9F                          DB $32, $00, $14, $9F, $46, $02  ; 03
  29++E86D 46 02
  30++E86F 00 14 00 1F                          DB $00, $14, $00, $1F, $45, $01  ; 04
  30++E873 45 01
  31++E875 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF  ; 05
  31++E879 FF FF
  32++E87B 00 0E 28 3F                          DB $00, $0E, $28, $3F, $88, $45  ; 06
  32++E87F 88 45
  33++E881 28 00 28 3F                          DB $28, $00, $28, $3F, $88, $57  ; 07
  33++E885 88 57
  34++E887 28 00 28 BF                          DB $28, $00, $28, $BF, $88, $46  ; 08
  34++E88B 88 46
  35++E88D 00 04 28 2A                          DB $00, $04, $28, $2A, $88, $88  ; 09
  35++E891 88 88
  36++E893 0A 00 28 2A                          DB $0A, $00, $28, $2A, $88, $88  ; 10
  36++E897 88 88
  37++E899 00 04 28 6A                          DB $00, $04, $28, $6A, $88, $88  ; 11
  37++E89D 88 88
  38++E89F 0A 00 28 AA                          DB $0A, $00, $28, $AA, $88, $88  ; 12           ; 12 * 6 = 72
  38++E8A3 88 88
  39++E8A5              BushmasterVertSize:     equ $ - BushmasterVertices
  40++E8A5 1F 13 00 04  BushmasterEdges:	    DB $1F, $13, $00, $04            ; 01
  41++E8A9 1F 02 00 08                          DB $1F, $02, $00, $08            ; 02
  42++E8AD 1F 01 00 0C                          DB $1F, $01, $00, $0C            ; 03
  43++E8B1 1F 23 00 10                          DB $1F, $23, $00, $10            ; 04
  44++E8B5 1F 45 0C 14                          DB $1F, $45, $0C, $14            ; 05
  45++E8B9 1F 04 08 0C                          DB $1F, $04, $08, $0C            ; 06
  46++E8BD 1F 15 04 0C                          DB $1F, $15, $04, $0C            ; 07
  47++E8C1 1F 46 08 1C                          DB $1F, $46, $08, $1C            ; 08
  48++E8C5 1F 57 04 18                          DB $1F, $57, $04, $18            ; 09
  49++E8C9 1F 26 08 10                          DB $1F, $26, $08, $10            ; 10
  50++E8CD 1F 37 04 10                          DB $1F, $37, $04, $10            ; 11
  51++E8D1 1F 48 14 1C                          DB $1F, $48, $14, $1C            ; 12
  52++E8D5 1F 58 14 18                          DB $1F, $58, $14, $18            ; 13
  53++E8D9 1F 68 10 1C                          DB $1F, $68, $10, $1C            ; 14
  54++E8DD 1F 78 10 18                          DB $1F, $78, $10, $18            ; 15
  55++E8E1 0A 88 20 24                          DB $0A, $88, $20, $24            ; 16
  56++E8E5 0A 88 24 28                          DB $0A, $88, $24, $28            ; 17
  57++E8E9 0A 88 28 2C                          DB $0A, $88, $28, $2C            ; 18
  58++E8ED 0A 88 2C 20                          DB $0A, $88, $2C, $20            ; 19           ; 19 * 4 = 76
  59++E8F1              BushmasterEdgesSize:    equ $ - BushmasterEdges
  60++E8F1              BushmasterEdgesCnt:     equ BushmasterEdgesSize/4        ;
  61++E8F1 9F 17 58 1D  BushmasterNormals:	    DB $9F, $17, $58, $1D            ; 01
  62++E8F5 1F 17 58 1D                          DB $1F, $17, $58, $1D            ; 02
  63++E8F9 DF 0E 5D 12                          DB $DF, $0E, $5D, $12            ; 03
  64++E8FD 5F 0E 5D 12                          DB $5F, $0E, $5D, $12            ; 04
  65++E901 BF 1F 59 0D                          DB $BF, $1F, $59, $0D            ; 05
  66++E905 3F 1F 59 0D                          DB $3F, $1F, $59, $0D            ; 06
  67++E909 FF 2A 55 07                          DB $FF, $2A, $55, $07            ; 07
  68++E90D 7F 2A 55 07                          DB $7F, $2A, $55, $07            ; 08
  69++E911 3F 00 00 60                          DB $3F, $00, $00, $60            ; 09           ; 9 * 4 = 36
  70++E915              BushmasterNormalsSize:  equ $ - BushmasterNormals
  71++E915              BushmasterLen:          equ $ - Bushmaster
  72++E915
# file closed: ./Data/ships/Bushmaster.asm
  97+ E915                                      include "Data/ships/Chameleon.asm"
# file opened: ./Data/ships/Chameleon.asm
   1++E915 03           Chameleon:	            DB $03                          ; Number of cargo canisters released when destroyed
   2++E916 A0 0F                                DW $0FA0                        ; Ship's targetable area LoHi
   3++E918 9F E9                                DW ChameleonEdges               ; Edge Data
   4++E91A 74                                   DB ChameleonEdgesSize           ; Size of Edge Data
   5++E91B 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E91C 1A                                   DB $1A                          ; Explosion Count
   7++E91D 12                                   DB ChameleonVertSize /6         ; Vertex Count /6
   8++E91E 6C                                   DB ChameleonVertSize            ; Vertex Count
   9++E91F 1D                                   DB ChameleonEdgesCnt            ; Edges Count
  10++E920 C8                                   DB $00C8                        ; Bounty LoHi
  11++E921 34                                   DB ChameleonNormalsSize         ; Face (Normal) Count
  12++E922 0A                                   DB $0A                          ; Range when it turns to a dot
  13++E923 64                                   DB $64                          ; Energy Max
  14++E924 1D                                   DB $1D                          ; Speed Max
  15++E925 13 EA                                DW ChameleonNormals             ; Normals
  16++E927 01                                   DB $01                          ; Q scaling
  17++E928 23                                   DB $23                          ; Laser power and Nbr Missiles
  18++E929 33 E9                                DW ChameleonVertices            ; Verticles Address
  19++E92B 00                                   DB ShipTypeNormal               ; Ship Type
  20++E92C 00                                   DB 0                            ; NewB Tactics
  21++E92D 80                                   DB ShipCanAnger                 ; AI Flags
  22++E92E 40                                   DB $40                          ; chance of ECM module
  23++E92F FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E930 00 00                                DW $0000                            ; no solid data
  25++E932 00                                   DB $00                              ; no solid data
  26++E933
  27++E933 12 00 6E 9F  ChameleonVertices:	    DB $12, $00, $6E, $9F, $25, $01
  27++E937 25 01
  28++E939 12 00 6E 1F                          DB $12, $00, $6E, $1F, $34, $01
  28++E93D 34 01
  29++E93F 28 00 00 9F                          DB $28, $00, $00, $9F, $8B, $25
  29++E943 8B 25
  30++E945 08 18 00 9F                          DB $08, $18, $00, $9F, $68, $22
  30++E949 68 22
  31++E94B 08 18 00 1F                          DB $08, $18, $00, $1F, $69, $33
  31++E94F 69 33
  32++E951 28 00 00 1F                          DB $28, $00, $00, $1F, $9A, $34
  32++E955 9A 34
  33++E957 08 18 00 5F                          DB $08, $18, $00, $5F, $7A, $44
  33++E95B 7A 44
  34++E95D 08 18 00 DF                          DB $08, $18, $00, $DF, $7B, $55
  34++E961 7B 55
  35++E963 00 18 28 1F                          DB $00, $18, $28, $1F, $36, $02
  35++E967 36 02
  36++E969 00 18 28 5F                          DB $00, $18, $28, $5F, $57, $14
  36++E96D 57 14
  37++E96F 20 00 28 BF                          DB $20, $00, $28, $BF, $BC, $88
  37++E973 BC 88
  38++E975 00 18 28 3F                          DB $00, $18, $28, $3F, $9C, $68
  38++E979 9C 68
  39++E97B 20 00 28 3F                          DB $20, $00, $28, $3F, $AC, $99
  39++E97F AC 99
  40++E981 00 18 28 7F                          DB $00, $18, $28, $7F, $BC, $7A
  40++E985 BC 7A
  41++E987 08 00 28 AA                          DB $08, $00, $28, $AA, $CC, $CC
  41++E98B CC CC
  42++E98D 00 08 28 2A                          DB $00, $08, $28, $2A, $CC, $CC
  42++E991 CC CC
  43++E993 08 00 28 2A                          DB $08, $00, $28, $2A, $CC, $CC
  43++E997 CC CC
  44++E999 00 08 28 6A                          DB $00, $08, $28, $6A, $CC, $CC
  44++E99D CC CC
  45++E99F              ChameleonVertSize:      equ $ - ChameleonVertices
  46++E99F 1F 01 00 04  ChameleonEdges:	        DB $1F, $01, $00, $04
  47++E9A3 1F 02 00 20                          DB $1F, $02, $00, $20
  48++E9A7 1F 15 00 24                          DB $1F, $15, $00, $24
  49++E9AB 1F 03 04 20                          DB $1F, $03, $04, $20
  50++E9AF 1F 14 04 24                          DB $1F, $14, $04, $24
  51++E9B3 1F 34 04 14                          DB $1F, $34, $04, $14
  52++E9B7 1F 25 00 08                          DB $1F, $25, $00, $08
  53++E9BB 1F 26 0C 20                          DB $1F, $26, $0C, $20
  54++E9BF 1F 36 10 20                          DB $1F, $36, $10, $20
  55++E9C3 1F 75 1C 24                          DB $1F, $75, $1C, $24
  56++E9C7 1F 74 18 24                          DB $1F, $74, $18, $24
  57++E9CB 1F 39 10 14                          DB $1F, $39, $10, $14
  58++E9CF 1F 4A 14 18                          DB $1F, $4A, $14, $18
  59++E9D3 1F 28 08 0C                          DB $1F, $28, $08, $0C
  60++E9D7 1F 5B 08 1C                          DB $1F, $5B, $08, $1C
  61++E9DB 1F 8B 08 28                          DB $1F, $8B, $08, $28
  62++E9DF 1F 9A 14 30                          DB $1F, $9A, $14, $30
  63++E9E3 1F 68 0C 2C                          DB $1F, $68, $0C, $2C
  64++E9E7 1F 7B 1C 34                          DB $1F, $7B, $1C, $34
  65++E9EB 1F 69 10 2C                          DB $1F, $69, $10, $2C
  66++E9EF 1F 7A 18 34                          DB $1F, $7A, $18, $34
  67++E9F3 1F 8C 28 2C                          DB $1F, $8C, $28, $2C
  68++E9F7 1F BC 28 34                          DB $1F, $BC, $28, $34
  69++E9FB 1F 9C 2C 30                          DB $1F, $9C, $2C, $30
  70++E9FF 1F AC 30 34                          DB $1F, $AC, $30, $34
  71++EA03 0A CC 38 3C                          DB $0A, $CC, $38, $3C
  72++EA07 0A CC 3C 40                          DB $0A, $CC, $3C, $40
  73++EA0B 0A CC 40 44                          DB $0A, $CC, $40, $44
  74++EA0F 0A CC 44 38                          DB $0A, $CC, $44, $38
  75++EA13              ChameleonEdgesSize:     equ $ - ChameleonEdges
  76++EA13              ChameleonEdgesCnt:      equ ChameleonEdgesSize/4
  77++EA13 1F 00 5A 1F  ChameleonNormals:	    DB $1F, $00, $5A, $1F
  78++EA17 5F 00 5A 1F                          DB $5F, $00, $5A, $1F
  79++EA1B 9F 39 4C 0B                          DB $9F, $39, $4C, $0B
  80++EA1F 1F 39 4C 0B                          DB $1F, $39, $4C, $0B
  81++EA23 5F 39 4C 0B                          DB $5F, $39, $4C, $0B
  82++EA27 DF 39 4C 0B                          DB $DF, $39, $4C, $0B
  83++EA2B 1F 00 60 00                          DB $1F, $00, $60, $00
  84++EA2F 5F 00 60 00                          DB $5F, $00, $60, $00
  85++EA33 BF 39 4C 0B                          DB $BF, $39, $4C, $0B
  86++EA37 3F 39 4C 0B                          DB $3F, $39, $4C, $0B
  87++EA3B 7F 39 4C 0B                          DB $7F, $39, $4C, $0B
  88++EA3F FF 39 4C 0B                          DB $FF, $39, $4C, $0B
  89++EA43 3F 00 00 60                          DB $3F, $00, $00, $60
  90++EA47              ChameleonNormalsSize:   equ $ - ChameleonNormals
  91++EA47              ChameleonLen:           equ $ - Chameleon
  92++EA47
# file closed: ./Data/ships/Chameleon.asm
  98+ EA47                                      include "Data/ships/CobraMk3.asm"
# file opened: ./Data/ships/CobraMk3.asm
   1++EA47              ; Corrected pointers
   2++EA47              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   3++EA47              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   4++EA47              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   5++EA47 03           CobraMk3    		    DB $03                            ; Number of cargo canisters released when destroyed
   6++EA48 41 23                                DW $2341                          ; Ship's targetable area LoHi
   7++EA4A 0E EB                                DW CobraMk3Edges                  ; Edge Data
   8++EA4C 98                                   DB CobraMkEdgesSize               ; Size of Edge Data
   9++EA4D 54                                   DB $54                            ; Gun Vertex Byte offset
  10++EA4E 2A                                   DB $2A                            ; Explosion Count
  11++EA4F 1C                                   DB CobraMkVertSize /6             ; Vertex Count /6
  12++EA50 A8                                   DB CobraMkVertSize                ; Vertex Count
  13++EA51 26                                   DB CobraMkEdgesCnt                ; Edges Count
  14++EA52 00 00                                DW $0000                          ; Bounty LoHi
  15++EA54 34                                   DB CobraMk3NormalsSize            ; Face (Normal) Count
  16++EA55 32                                   DB $32                            ; Range when it turns to a dot
  17++EA56 96                                   DB $96                            ; Energy Max
  18++EA57 1C                                   DB $1C                            ; Speed Max
  19++EA58 A6 EB                                DW CobraMk3Normals                ; Normals
  20++EA5A 01                                   DB $01                            ; Q scaling
  21++EA5B 34                                   DB $30 | ShipMissiles4            ; Laser power and Nbr Missiles
  22++EA5C 66 EA                                DW CobraMk3Vertices               ; Verticles Address
  23++EA5E 00                                   DB ShipTypeNormal                 ; Ship Type
  24++EA5F 00                                   DB 0                              ; NewB Tactics
  25++EA60 80                                   DB ShipCanAnger                   ; AI Flags
  26++EA61 70                                   DB $70                            ; chance of ECM module
  27++EA62 FF                                   DB $FF                              ; Supports Solid Fill = false
  28++EA63 00 00                                DW $0000                            ; no solid data
  29++EA65 00                                   DB $00                              ; no solid data
  30++EA66
  31++EA66 20 00 4C 1F  CobraMk3Vertices	    DB $20,$00,$4C,$1F,$FF,$FF
  31++EA6A FF FF
  32++EA6C 20 00 4C 9F                          DB $20,$00,$4C,$9F,$FF,$FF
  32++EA70 FF FF
  33++EA72 00 1A 18 1F                          DB $00,$1A,$18,$1F,$FF,$FF
  33++EA76 FF FF
  34++EA78 78 03 08 FF                          DB $78,$03,$08,$FF,$73,$AA
  34++EA7C 73 AA
  35++EA7E 78 03 08 7F                          DB $78,$03,$08,$7F,$84,$CC
  35++EA82 84 CC
  36++EA84 58 10 28 BF                          DB $58,$10,$28,$BF,$FF,$FF
  36++EA88 FF FF
  37++EA8A 58 10 28 3F                          DB $58,$10,$28,$3F,$FF,$FF
  37++EA8E FF FF
  38++EA90 80 08 28 7F                          DB $80,$08,$28,$7F,$98,$CC
  38++EA94 98 CC
  39++EA96 80 08 28 FF                          DB $80,$08,$28,$FF,$97,$AA
  39++EA9A 97 AA
  40++EA9C 00 1A 28 3F                          DB $00,$1A,$28,$3F,$65,$99
  40++EAA0 65 99
  41++EAA2 20 18 28 FF                          DB $20,$18,$28,$FF,$A9,$BB
  41++EAA6 A9 BB
  42++EAA8 20 18 28 7F                          DB $20,$18,$28,$7F,$B9,$CC
  42++EAAC B9 CC
  43++EAAE 24 08 28 B4                          DB $24,$08,$28,$B4,$99,$99
  43++EAB2 99 99
  44++EAB4 08 0C 28 B4                          DB $08,$0C,$28,$B4,$99,$99
  44++EAB8 99 99
  45++EABA 08 0C 28 34                          DB $08,$0C,$28,$34,$99,$99
  45++EABE 99 99
  46++EAC0 24 08 28 34                          DB $24,$08,$28,$34,$99,$99
  46++EAC4 99 99
  47++EAC6 24 0C 28 74                          DB $24,$0C,$28,$74,$99,$99
  47++EACA 99 99
  48++EACC 08 10 28 74                          DB $08,$10,$28,$74,$99,$99
  48++EAD0 99 99
  49++EAD2 08 10 28 F4                          DB $08,$10,$28,$F4,$99,$99
  49++EAD6 99 99
  50++EAD8 24 0C 28 F4                          DB $24,$0C,$28,$F4,$99,$99
  50++EADC 99 99
  51++EADE 00 00 4C 06                          DB $00,$00,$4C,$06,$B0,$BB
  51++EAE2 B0 BB
  52++EAE4 00 00 5A 1F                          DB $00,$00,$5A,$1F,$B0,$BB
  52++EAE8 B0 BB
  53++EAEA 50 06 28 E8                          DB $50,$06,$28,$E8,$99,$99
  53++EAEE 99 99
  54++EAF0 50 06 28 A8                          DB $50,$06,$28,$A8,$99,$99
  54++EAF4 99 99
  55++EAF6 58 00 28 A6                          DB $58,$00,$28,$A6,$99,$99
  55++EAFA 99 99
  56++EAFC 50 06 28 28                          DB $50,$06,$28,$28,$99,$99
  56++EB00 99 99
  57++EB02 58 00 28 26                          DB $58,$00,$28,$26,$99,$99
  57++EB06 99 99
  58++EB08 50 06 28 68                          DB $50,$06,$28,$68,$99,$99
  58++EB0C 99 99
  59++EB0E              CobraMkVertSize         equ $  - CobraMk3Vertices
  60++EB0E 1F B0 00 04  CobraMk3Edges		    DB $1F,$B0,$00,$04
  61++EB12 1F C4 00 10                          DB $1F,$C4,$00,$10
  62++EB16 1F A3 04 0C                          DB $1F,$A3,$04,$0C
  63++EB1A 1F A7 0C 20                          DB $1F,$A7,$0C,$20
  64++EB1E 1F C8 10 1C                          DB $1F,$C8,$10,$1C
  65++EB22 1F 98 18 1C                          DB $1F,$98,$18,$1C
  66++EB26 1F 96 18 24                          DB $1F,$96,$18,$24
  67++EB2A 1F 95 14 24                          DB $1F,$95,$14,$24
  68++EB2E 1F 97 14 20                          DB $1F,$97,$14,$20
  69++EB32 1F 51 08 14                          DB $1F,$51,$08,$14
  70++EB36 1F 62 08 18                          DB $1F,$62,$08,$18
  71++EB3A 1F 73 0C 14                          DB $1F,$73,$0C,$14
  72++EB3E 1F 84 10 18                          DB $1F,$84,$10,$18
  73++EB42 1F 10 04 08                          DB $1F,$10,$04,$08
  74++EB46 1F 20 00 08                          DB $1F,$20,$00,$08
  75++EB4A 1F A9 20 28                          DB $1F,$A9,$20,$28
  76++EB4E 1F B9 28 2C                          DB $1F,$B9,$28,$2C
  77++EB52 1F C9 1C 2C                          DB $1F,$C9,$1C,$2C
  78++EB56 1F BA 04 28                          DB $1F,$BA,$04,$28
  79++EB5A 1F CB 00 2C                          DB $1F,$CB,$00,$2C
  80++EB5E 1D 31 04 14                          DB $1D,$31,$04,$14
  81++EB62 1D 42 00 18                          DB $1D,$42,$00,$18
  82++EB66 06 B0 50 54                          DB $06,$B0,$50,$54
  83++EB6A 14 99 30 34                          DB $14,$99,$30,$34
  84++EB6E 14 99 48 4C                          DB $14,$99,$48,$4C
  85++EB72 14 99 38 3C                          DB $14,$99,$38,$3C
  86++EB76 14 99 40 44                          DB $14,$99,$40,$44
  87++EB7A 13 99 3C 40                          DB $13,$99,$3C,$40
  88++EB7E 11 99 38 44                          DB $11,$99,$38,$44
  89++EB82 13 99 34 48                          DB $13,$99,$34,$48
  90++EB86 13 99 30 4C                          DB $13,$99,$30,$4C
  91++EB8A 1E 65 08 24                          DB $1E,$65,$08,$24
  92++EB8E 06 99 58 60                          DB $06,$99,$58,$60
  93++EB92 06 99 5C 60                          DB $06,$99,$5C,$60
  94++EB96 08 99 58 5C                          DB $08,$99,$58,$5C
  95++EB9A 06 99 64 68                          DB $06,$99,$64,$68
  96++EB9E 06 99 68 6C                          DB $06,$99,$68,$6C
  97++EBA2 08 99 64 6C                          DB $08,$99,$64,$6C
  98++EBA6              CobraMkEdgesSize        equ $  - CobraMk3Edges
  99++EBA6              CobraMkEdgesCnt         equ CobraMkEdgesSize/4
 100++EBA6              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
 101++EBA6 1F 00 3E 1F  CobraMk3Normals		    DB $1F,$00,$3E,$1F
 102++EBAA 9F 12 37 10                          DB $9F,$12,$37,$10
 103++EBAE 1F 12 37 10                          DB $1F,$12,$37,$10
 104++EBB2 9F 10 34 0E                          DB $9F,$10,$34,$0E
 105++EBB6 1F 10 34 0E                          DB $1F,$10,$34,$0E
 106++EBBA 9F 0E 2F 00                          DB $9F,$0E,$2F,$00
 107++EBBE 1F 0E 2F 00                          DB $1F,$0E,$2F,$00
 108++EBC2 9F 3D 66 00                          DB $9F,$3D,$66,$00
 109++EBC6 1F 3D 66 00                          DB $1F,$3D,$66,$00
 110++EBCA 3F 00 00 50                          DB $3F,$00,$00,$50
 111++EBCE DF 07 2A 09                          DB $DF,$07,$2A,$09
 112++EBD2 5F 00 1E 06                          DB $5F,$00,$1E,$06
 113++EBD6 5F 07 2A 09                          DB $5F,$07,$2A,$09 		;end of Cobra Mk III
 114++EBDA              CobraMk3NormalsSize     equ $  - CobraMk3Normals
 115++EBDA              CobraMk3Len             equ $  - CobraMk3
 116++EBDA
# file closed: ./Data/ships/CobraMk3.asm
  99+ EBDA                                      include "Data/ships/Cobra_Mk_1.asm"
# file opened: ./Data/ships/Cobra_Mk_1.asm
   1++EBDA 03           Cobra_Mk_1:	            DB $03                              ; Number of cargo canisters released when destroyed
   2++EBDB 49 26                                DW $2649                            ; Ship's targetable area LoHi
   3++EBDD 3B EC                                DW Cobra_Mk_1Edges                  ; Edge Data
   4++EBDF 48                                   DB Cobra_Mk_1EdgesSize              ; Size of Edge Data
   5++EBE0 28                                   DB $28                              ; Gun Vertex Byte offset
   6++EBE1 1A                                   DB $1A                              ; Explosion Count
   7++EBE2 0B                                   DB Cobra_Mk_1VertSize /6            ; Vertex Count /6
   8++EBE3 42                                   DB Cobra_Mk_1VertSize               ; Vertex Count
   9++EBE4 12                                   DB Cobra_Mk_1EdgesCnt               ; Edges Count
  10++EBE5 00 4B                                DW $4B00                            ; Bounty LoHi
  11++EBE7 28                                   DB Cobra_Mk_1NormalsSize            ; Face (Normal) Count
  12++EBE8 13                                   DB $13                              ; Range when it turns to a dot
  13++EBE9 51                                   DB $51                              ; Energy Max
  14++EBEA 1A                                   DB $1A                              ; Speed Max
  15++EBEB 83 EC                                DW Cobra_Mk_1Normals                ; Normals
  16++EBED 02                                   DB $02                              ; Q scaling
  17++EBEE 23                                   DB $20 | ShipMissiles3              ; Laser power and Nbr Missiles
  18++EBEF F9 EB                                DW Cobra_Mk_1Vertices               ; Verticles Address
  19++EBF1 00                                   DB ShipTypeNormal                   ; Ship Type
  20++EBF2 00                                   DB 0                                ; NewB Tactics
  21++EBF3 80                                   DB ShipCanAnger                     ; AI Flags
  22++EBF4 30                                   DB $30                              ; chance of ECM module
  23++EBF5 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EBF6 00 00                                DW $0000                            ; no solid data
  25++EBF8 00                                   DB $00                              ; no solid data
  26++EBF9
  27++EBF9 12 01 32 DF  Cobra_Mk_1Vertices:	    DB $12, $01, $32, $DF, $01, $23
  27++EBFD 01 23
  28++EBFF 12 01 32 5F                          DB $12, $01, $32, $5F, $01, $45
  28++EC03 01 45
  29++EC05 42 00 07 9F                          DB $42, $00, $07, $9F, $23, $88
  29++EC09 23 88
  30++EC0B 42 00 07 1F                          DB $42, $00, $07, $1F, $45, $99
  30++EC0F 45 99
  31++EC11 20 0C 26 BF                          DB $20, $0C, $26, $BF, $26, $78
  31++EC15 26 78
  32++EC17 20 0C 26 3F                          DB $20, $0C, $26, $3F, $46, $79
  32++EC1B 46 79
  33++EC1D 36 0C 26 FF                          DB $36, $0C, $26, $FF, $13, $78
  33++EC21 13 78
  34++EC23 36 0C 26 7F                          DB $36, $0C, $26, $7F, $15, $79
  34++EC27 15 79
  35++EC29 00 0C 06 34                          DB $00, $0C, $06, $34, $02, $46
  35++EC2D 02 46
  36++EC2F 00 01 32 42                          DB $00, $01, $32, $42, $01, $11
  36++EC33 01 11
  37++EC35 00 01 3C 5F                          DB $00, $01, $3C, $5F, $01, $11
  37++EC39 01 11
  38++EC3B              Cobra_Mk_1VertSize:     equ $ - Cobra_Mk_1Vertices
  39++EC3B 1F 01 04 00  Cobra_Mk_1Edges:	    DB $1F, $01, $04, $00
  40++EC3F 1F 23 00 08                          DB $1F, $23, $00, $08
  41++EC43 1F 38 08 18                          DB $1F, $38, $08, $18
  42++EC47 1F 17 18 1C                          DB $1F, $17, $18, $1C
  43++EC4B 1F 59 1C 0C                          DB $1F, $59, $1C, $0C
  44++EC4F 1F 45 0C 04                          DB $1F, $45, $0C, $04
  45++EC53 1F 28 08 10                          DB $1F, $28, $08, $10
  46++EC57 1F 67 10 14                          DB $1F, $67, $10, $14
  47++EC5B 1F 49 14 0C                          DB $1F, $49, $14, $0C
  48++EC5F 14 02 00 20                          DB $14, $02, $00, $20
  49++EC63 14 04 20 04                          DB $14, $04, $20, $04
  50++EC67 10 26 10 20                          DB $10, $26, $10, $20
  51++EC6B 10 46 20 14                          DB $10, $46, $20, $14
  52++EC6F 1F 78 10 18                          DB $1F, $78, $10, $18
  53++EC73 1F 79 14 1C                          DB $1F, $79, $14, $1C
  54++EC77 14 13 00 18                          DB $14, $13, $00, $18
  55++EC7B 14 15 04 1C                          DB $14, $15, $04, $1C
  56++EC7F 02 01 28 24                          DB $02, $01, $28, $24
  57++EC83              Cobra_Mk_1EdgesSize:    equ $ - Cobra_Mk_1Edges
  58++EC83              Cobra_Mk_1EdgesCnt:     equ Cobra_Mk_1EdgesSize/4
  59++EC83 1F 00 29 0A  Cobra_Mk_1Normals:	    DB $1F, $00, $29, $0A
  60++EC87 5F 00 1B 03                          DB $5F, $00, $1B, $03
  61++EC8B 9F 08 2E 08                          DB $9F, $08, $2E, $08
  62++EC8F DF 0C 39 0C                          DB $DF, $0C, $39, $0C
  63++EC93 1F 08 2E 08                          DB $1F, $08, $2E, $08
  64++EC97 5F 0C 39 0C                          DB $5F, $0C, $39, $0C
  65++EC9B 1F 00 31 00                          DB $1F, $00, $31, $00
  66++EC9F 3F 00 00 9A                          DB $3F, $00, $00, $9A
  67++ECA3 BF 79 6F 3E                          DB $BF, $79, $6F, $3E
  68++ECA7 3F 79 6F 3E                          DB $3F, $79, $6F, $3E
  69++ECAB              Cobra_Mk_1NormalsSize:  equ $ - Cobra_Mk_1Normals
  70++ECAB              Cobra_Mk_1Len:          equ $ - Cobra_Mk_1
  71++ECAB
# file closed: ./Data/ships/Cobra_Mk_1.asm
 100+ ECAB                                      include "Data/ships/Cobra_Mk_3_P.asm"
# file opened: ./Data/ships/Cobra_Mk_3_P.asm
   1++ECAB 01           Cobra_Mk_3_P:	        DB $01                              ; Number of cargo canisters released when destroyed
   2++ECAC 41 23                                DW $2341                            ; Ship's targetable area LoHi
   3++ECAE 72 ED                                DW Cobra_Mk_3_PEdges                ; Edge Data
   4++ECB0 98                                   DB Cobra_Mk_3_PEdgesSize            ; Size of Edge Data
   5++ECB1 54                                   DB $54                              ; Gun Vertex Byte offset
   6++ECB2 2A                                   DB $2A                              ; Explosion Count
   7++ECB3 1C                                   DB Cobra_Mk_3_PVertSize /6          ; Vertex Count /6
   8++ECB4 A8                                   DB Cobra_Mk_3_PVertSize             ; Vertex Count
   9++ECB5 26                                   DB Cobra_Mk_3_PEdgesCnt             ; Edges Count
  10++ECB6 00 AF                                DW $AF00                            ; Bounty LoHi
  11++ECB8 34                                   DB Cobra_Mk_3_PNormalsSize          ; Face (Normal) Count
  12++ECB9                                      ; Add in a new byte for range for LoD, if this is zero then no LoD Data
  13++ECB9 32                                   DB $32                              ; Range when it turns to a dot
  14++ECBA 96                                   DB $96                              ; Energy Max
  15++ECBB 1C                                   DB $1C                              ; Speed Max
  16++ECBC 0A EE                                DW Cobra_Mk_3_PNormals              ; Normals
  17++ECBE 01                                   DB $01                              ; Q scaling
  18++ECBF 14                                   DB $10 | ShipMissiles4              ; Laser power and Nbr Missiles
  19++ECC0 CA EC                                DW Cobra_Mk_3_PVertices             ; Verticles Address
  20++ECC2 00                                   DB ShipTypeNormal                   ; Ship Type
  21++ECC3 00                                   DB 0                                ; NewB Tactics
  22++ECC4 80                                   DB ShipCanAnger                     ; AI Flags
  23++ECC5 90                                   DB $90                              ; chance of ECM module
  24++ECC6 FF                                   DB $FF                              ; Supports Solid Fill = false
  25++ECC7 00 00                                DW $0000                            ; no solid data
  26++ECC9 00                                   DB $00                              ; no solid data
  27++ECCA
  28++ECCA 20 00 4C 1F  Cobra_Mk_3_PVertices:	DB $20, $00, $4C, $1F, $FF, $FF
  28++ECCE FF FF
  29++ECD0 20 00 4C 9F                          DB $20, $00, $4C, $9F, $FF, $FF
  29++ECD4 FF FF
  30++ECD6 00 1A 18 1F                          DB $00, $1A, $18, $1F, $FF, $FF
  30++ECDA FF FF
  31++ECDC 78 03 08 FF                          DB $78, $03, $08, $FF, $73, $AA
  31++ECE0 73 AA
  32++ECE2 78 03 08 7F                          DB $78, $03, $08, $7F, $84, $CC
  32++ECE6 84 CC
  33++ECE8 58 10 28 BF                          DB $58, $10, $28, $BF, $FF, $FF
  33++ECEC FF FF
  34++ECEE 58 10 28 3F                          DB $58, $10, $28, $3F, $FF, $FF
  34++ECF2 FF FF
  35++ECF4 80 08 28 7F                          DB $80, $08, $28, $7F, $98, $CC
  35++ECF8 98 CC
  36++ECFA 80 08 28 FF                          DB $80, $08, $28, $FF, $97, $AA
  36++ECFE 97 AA
  37++ED00 00 1A 28 3F                          DB $00, $1A, $28, $3F, $65, $99
  37++ED04 65 99
  38++ED06 20 18 28 FF                          DB $20, $18, $28, $FF, $A9, $BB
  38++ED0A A9 BB
  39++ED0C 20 18 28 7F                          DB $20, $18, $28, $7F, $B9, $CC
  39++ED10 B9 CC
  40++ED12 24 08 28 B4                          DB $24, $08, $28, $B4, $99, $99
  40++ED16 99 99
  41++ED18 08 0C 28 B4                          DB $08, $0C, $28, $B4, $99, $99
  41++ED1C 99 99
  42++ED1E 08 0C 28 34                          DB $08, $0C, $28, $34, $99, $99
  42++ED22 99 99
  43++ED24 24 08 28 34                          DB $24, $08, $28, $34, $99, $99
  43++ED28 99 99
  44++ED2A 24 0C 28 74                          DB $24, $0C, $28, $74, $99, $99
  44++ED2E 99 99
  45++ED30 08 10 28 74                          DB $08, $10, $28, $74, $99, $99
  45++ED34 99 99
  46++ED36 08 10 28 F4                          DB $08, $10, $28, $F4, $99, $99
  46++ED3A 99 99
  47++ED3C 24 0C 28 F4                          DB $24, $0C, $28, $F4, $99, $99
  47++ED40 99 99
  48++ED42 00 00 4C 06                          DB $00, $00, $4C, $06, $B0, $BB
  48++ED46 B0 BB
  49++ED48 00 00 5A 1F                          DB $00, $00, $5A, $1F, $B0, $BB
  49++ED4C B0 BB
  50++ED4E 50 06 28 E8                          DB $50, $06, $28, $E8, $99, $99
  50++ED52 99 99
  51++ED54 50 06 28 A8                          DB $50, $06, $28, $A8, $99, $99
  51++ED58 99 99
  52++ED5A 58 00 28 A6                          DB $58, $00, $28, $A6, $99, $99
  52++ED5E 99 99
  53++ED60 50 06 28 28                          DB $50, $06, $28, $28, $99, $99
  53++ED64 99 99
  54++ED66 58 00 28 26                          DB $58, $00, $28, $26, $99, $99
  54++ED6A 99 99
  55++ED6C 50 06 28 68                          DB $50, $06, $28, $68, $99, $99
  55++ED70 99 99
  56++ED72              Cobra_Mk_3_PVertSize:   equ $ - Cobra_Mk_3_PVertices
  57++ED72 1F B0 00 04  Cobra_Mk_3_PEdges:	    DB $1F, $B0, $00, $04
  58++ED76 1F C4 00 10                          DB $1F, $C4, $00, $10
  59++ED7A 1F A3 04 0C                          DB $1F, $A3, $04, $0C
  60++ED7E 1F A7 0C 20                          DB $1F, $A7, $0C, $20
  61++ED82 1F C8 10 1C                          DB $1F, $C8, $10, $1C
  62++ED86 1F 98 18 1C                          DB $1F, $98, $18, $1C
  63++ED8A 1F 96 18 24                          DB $1F, $96, $18, $24
  64++ED8E 1F 95 14 24                          DB $1F, $95, $14, $24
  65++ED92 1F 97 14 20                          DB $1F, $97, $14, $20
  66++ED96 1F 51 08 14                          DB $1F, $51, $08, $14
  67++ED9A 1F 62 08 18                          DB $1F, $62, $08, $18
  68++ED9E 1F 73 0C 14                          DB $1F, $73, $0C, $14
  69++EDA2 1F 84 10 18                          DB $1F, $84, $10, $18
  70++EDA6 1F 10 04 08                          DB $1F, $10, $04, $08
  71++EDAA 1F 20 00 08                          DB $1F, $20, $00, $08
  72++EDAE 1F A9 20 28                          DB $1F, $A9, $20, $28
  73++EDB2 1F B9 28 2C                          DB $1F, $B9, $28, $2C
  74++EDB6 1F C9 1C 2C                          DB $1F, $C9, $1C, $2C
  75++EDBA 1F BA 04 28                          DB $1F, $BA, $04, $28
  76++EDBE 1F CB 00 2C                          DB $1F, $CB, $00, $2C
  77++EDC2 1D 31 04 14                          DB $1D, $31, $04, $14
  78++EDC6 1D 42 00 18                          DB $1D, $42, $00, $18
  79++EDCA 06 B0 50 54                          DB $06, $B0, $50, $54
  80++EDCE 14 99 30 34                          DB $14, $99, $30, $34
  81++EDD2 14 99 48 4C                          DB $14, $99, $48, $4C
  82++EDD6 14 99 38 3C                          DB $14, $99, $38, $3C
  83++EDDA 14 99 40 44                          DB $14, $99, $40, $44
  84++EDDE 13 99 3C 40                          DB $13, $99, $3C, $40
  85++EDE2 11 99 38 44                          DB $11, $99, $38, $44
  86++EDE6 13 99 34 48                          DB $13, $99, $34, $48
  87++EDEA 13 99 30 4C                          DB $13, $99, $30, $4C
  88++EDEE 1E 65 08 24                          DB $1E, $65, $08, $24
  89++EDF2 06 99 58 60                          DB $06, $99, $58, $60
  90++EDF6 06 99 5C 60                          DB $06, $99, $5C, $60
  91++EDFA 08 99 58 5C                          DB $08, $99, $58, $5C
  92++EDFE 06 99 64 68                          DB $06, $99, $64, $68
  93++EE02 06 99 68 6C                          DB $06, $99, $68, $6C
  94++EE06 08 99 64 6C                          DB $08, $99, $64, $6C
  95++EE0A              Cobra_Mk_3_PEdgesSize:  equ $ - Cobra_Mk_3_PEdges
  96++EE0A              Cobra_Mk_3_PEdgesCnt:   equ Cobra_Mk_3_PEdgesSize/4
  97++EE0A 1F 00 3E 1F  Cobra_Mk_3_PNormals:	DB $1F, $00, $3E, $1F
  98++EE0E 9F 12 37 10                          DB $9F, $12, $37, $10
  99++EE12 1F 12 37 10                          DB $1F, $12, $37, $10
 100++EE16 9F 10 34 0E                          DB $9F, $10, $34, $0E
 101++EE1A 1F 10 34 0E                          DB $1F, $10, $34, $0E
 102++EE1E 9F 0E 2F 00                          DB $9F, $0E, $2F, $00
 103++EE22 1F 0E 2F 00                          DB $1F, $0E, $2F, $00
 104++EE26 9F 3D 66 00                          DB $9F, $3D, $66, $00
 105++EE2A 1F 3D 66 00                          DB $1F, $3D, $66, $00
 106++EE2E 3F 00 00 50                          DB $3F, $00, $00, $50
 107++EE32 DF 07 2A 09                          DB $DF, $07, $2A, $09
 108++EE36 5F 00 1E 06                          DB $5F, $00, $1E, $06
 109++EE3A 5F 07 2A 09                          DB $5F, $07, $2A, $09
 110++EE3E              Cobra_Mk_3_PNormalsSize:equ $ - Cobra_Mk_3_PNormals
 111++EE3E              Cobra_Mk_3_PLen:        equ $ - Cobra_Mk_3_P
 112++EE3E
# file closed: ./Data/ships/Cobra_Mk_3_P.asm
 101+ EE3E                                      include "Data/ships/Constrictor.asm"
# file opened: ./Data/ships/Constrictor.asm
   1++EE3E F3           Constrictor:    	    DB $F3                         ; Number of cargo canisters released when destroyed
   2++EE3F 49 26                                DW $2649                       ; Ship's targetable area LoHi
   3++EE41 C3 EE                                DW ConstrictorEdges            ; Edge Data
   4++EE43 60                                   DB ConstrictorEdgesSize        ; Size of Edge Data
   5++EE44 00                                   DB $00                         ; Gun Vertex Byte offset
   6++EE45 2E                                   DB $2E                         ; Explosion Count
   7++EE46 11                                   DB ConstrictorVertSize /6      ; Vertex Count /6
   8++EE47 66                                   DB ConstrictorVertSize         ; Vertex Count
   9++EE48 18                                   DB ConstrictorEdgesCnt         ; Edges Count
  10++EE49 18 00                                DW $0018                       ; Bounty LoHi
  11++EE4B 28                                   DB ConstrictorNormalsSize      ; Face (Normal) Count
  12++EE4C 2D                                   DB $2D                         ; Range when it turns to a dot
  13++EE4D C8                                   DB $C8                         ; Energy Max
  14++EE4E 37                                   DB $37                         ; Speed Max
  15++EE4F 23 EF                                DW ConstrictorNormals          ; Normals
  16++EE51 02                                   DB $02                         ; Q scaling
  17++EE52 2F                                   DB $20 | ShipMissiles15        ; Laser power and Nbr Missiles
  18++EE53 5D EE                                DW ConstrictorVertices         ; Verticles Address
  19++EE55 00                                   DB ShipTypeNormal              ; Ship Type
  20++EE56 00                                   DB 0                           ; NewB Tactics
  21++EE57 80                                   DB ShipCanAnger                ; AI Flags
  22++EE58 FF                                   DB $FF                         ; chance of ECM module
  23++EE59 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EE5A 00 00                                DW $0000                            ; no solid data
  25++EE5C 00                                   DB $00                              ; no solid data
  26++EE5D
  27++EE5D 14 07 50 5F  ConstrictorVertices     DB $14, $07, $50, $5F, $02, $99
  27++EE61 02 99
  28++EE63 14 07 50 DF                          DB $14, $07, $50, $DF, $01, $99
  28++EE67 01 99
  29++EE69 36 07 28 DF                          DB $36, $07, $28, $DF, $14, $99
  29++EE6D 14 99
  30++EE6F 36 07 28 FF                          DB $36, $07, $28, $FF, $45, $89
  30++EE73 45 89
  31++EE75 14 0D 28 BF                          DB $14, $0D, $28, $BF, $56, $88
  31++EE79 56 88
  32++EE7B 14 0D 28 3F                          DB $14, $0D, $28, $3F, $67, $88
  32++EE7F 67 88
  33++EE81 36 07 28 7F                          DB $36, $07, $28, $7F, $37, $89
  33++EE85 37 89
  34++EE87 36 07 28 5F                          DB $36, $07, $28, $5F, $23, $99
  34++EE8B 23 99
  35++EE8D 14 0D 05 1F                          DB $14, $0D, $05, $1F, $FF, $FF
  35++EE91 FF FF
  36++EE93 14 0D 05 9F                          DB $14, $0D, $05, $9F, $FF, $FF
  36++EE97 FF FF
  37++EE99 14 07 3E 52                          DB $14, $07, $3E, $52, $99, $99
  37++EE9D 99 99
  38++EE9F 14 07 3E D2                          DB $14, $07, $3E, $D2, $99, $99
  38++EEA3 99 99
  39++EEA5 19 07 19 72                          DB $19, $07, $19, $72, $99, $99
  39++EEA9 99 99
  40++EEAB 19 07 19 F2                          DB $19, $07, $19, $F2, $99, $99
  40++EEAF 99 99
  41++EEB1 0F 07 0F 6A                          DB $0F, $07, $0F, $6A, $99, $99
  41++EEB5 99 99
  42++EEB7 0F 07 0F EA                          DB $0F, $07, $0F, $EA, $99, $99
  42++EEBB 99 99
  43++EEBD 00 07 00 40                          DB $00, $07, $00, $40, $9F, $01
  43++EEC1 9F 01
  44++EEC3              ConstrictorVertSize     equ $  - ConstrictorVertices
  45++EEC3 1F 09 00 04  ConstrictorEdges        DB $1F, $09, $00, $04
  46++EEC7 1F 19 04 08                          DB $1F, $19, $04, $08
  47++EECB 1F 01 04 24                          DB $1F, $01, $04, $24
  48++EECF 1F 02 00 20                          DB $1F, $02, $00, $20
  49++EED3 1F 29 00 1C                          DB $1F, $29, $00, $1C
  50++EED7 1F 23 1C 20                          DB $1F, $23, $1C, $20
  51++EEDB 1F 14 08 24                          DB $1F, $14, $08, $24
  52++EEDF 1F 49 08 0C                          DB $1F, $49, $08, $0C
  53++EEE3 1F 39 18 1C                          DB $1F, $39, $18, $1C
  54++EEE7 1F 37 18 20                          DB $1F, $37, $18, $20
  55++EEEB 1F 67 14 20                          DB $1F, $67, $14, $20
  56++EEEF 1F 56 10 24                          DB $1F, $56, $10, $24
  57++EEF3 1F 45 0C 24                          DB $1F, $45, $0C, $24
  58++EEF7 1F 58 0C 10                          DB $1F, $58, $0C, $10
  59++EEFB 1F 68 10 14                          DB $1F, $68, $10, $14
  60++EEFF 1F 78 14 18                          DB $1F, $78, $14, $18
  61++EF03 1F 89 0C 18                          DB $1F, $89, $0C, $18
  62++EF07 1F 06 20 24                          DB $1F, $06, $20, $24
  63++EF0B 12 99 28 30                          DB $12, $99, $28, $30
  64++EF0F 05 99 30 38                          DB $05, $99, $30, $38
  65++EF13 0A 99 38 28                          DB $0A, $99, $38, $28
  66++EF17 0A 99 2C 3C                          DB $0A, $99, $2C, $3C
  67++EF1B 05 99 34 3C                          DB $05, $99, $34, $3C
  68++EF1F 12 99 2C 34                          DB $12, $99, $2C, $34
  69++EF23              ConstrictorEdgesSize    equ $  - ConstrictorEdges
  70++EF23              ConstrictorEdgesCnt     equ ConstrictorEdgesSize/4
  71++EF23 1F 00 37 0F  ConstrictorNormals      DB $1F, $00, $37, $0F, $9F, $18, $4B, $14
  71++EF27 9F 18 4B 14
  72++EF2B 1F 18 4B 14                          DB $1F, $18, $4B, $14, $1F, $2C, $4B, $00
  72++EF2F 1F 2C 4B 00
  73++EF33 9F 2C 4B 00                          DB $9F, $2C, $4B, $00, $9F, $2C, $4B, $00
  73++EF37 9F 2C 4B 00
  74++EF3B 1F 00 35 00                          DB $1F, $00, $35, $00, $1F, $2C, $4B, $00
  74++EF3F 1F 2C 4B 00
  75++EF43 3F 00 00 A0                          DB $3F, $00, $00, $A0, $5F, $00, $1B, $00
  75++EF47 5F 00 1B 00
  76++EF4B              ConstrictorNormalsSize  equ $  - ConstrictorNormals
  77++EF4B              ConstrictorLen          equ $  - Constrictor
  78++EF4B
# file closed: ./Data/ships/Constrictor.asm
 102+ EF4B                                      include "Data/ships/Coriolis.asm"
# file opened: ./Data/ships/Coriolis.asm
   1++EF4B 00           Coriolis:	            DB $00                                      ; Number of cargo canisters released when destroyed
   2++EF4C 00 64                                DW $6400                                    ; Ship's targetable area LoHi
   3++EF4E CA EF                                DW CoriolisEdges                            ; Edge Data
   4++EF50 70                                   DB CoriolisEdgesSize                        ; Size of Edge Data
   5++EF51 00                                   DB $00                                      ; Gun Vertex Byte offset
   6++EF52 36                                   DB $36                                      ; Explosion Count
   7++EF53 10                                   DB CoriolisVertSize /6                      ; Vertex Count /6
   8++EF54 60                                   DB CoriolisVertSize                         ; Vertex Count
   9++EF55 1C                                   DB CoriolisEdgesCnt                         ; Edges Count
  10++EF56 00 00                                DW $0000                                    ; Bounty LoHi
  11++EF58 38                                   DB CoriolisNormalsSize                      ; Face (Normal) Count
  12++EF59 78                                   DB $78                                      ; Range when it turns to a dot
  13++EF5A F0                                   DB $F0                                      ; Energy Max
  14++EF5B 00                                   DB $00                                      ; Speed Max
  15++EF5C 3A F0                                DW CoriolisNormals                          ; Normals
  16++EF5E 00                                   DB $00                                      ; Q scaling
  17++EF5F 06                                   DB $06                                      ; Laser power and Nbr Missiles
  18++EF60 6A EF                                DW CoriolisVertices                         ; Verticles Address
  19++EF62 02                                   DB ShipTypeStation                          ; Ship Type
  20++EF63 00                                   DB 0                                        ; NewB Tactics
  21++EF64 78                                   DB ShipFighterBaySize | ShipFighterViper    ; AI Flags
  22++EF65 FF                                   DB $FF                                      ; chance of ECM module
  23++EF66 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EF67 00 00                                DW $0000                            ; no solid data
  25++EF69 00                                   DB $00                              ; no solid data
  26++EF6A              ;Need to do a debug cube and test that, even better a debug square only
  27++EF6A              ; a debug cube would be -160, 160, 160  to -160,160,-160    top left forward     to top left rear         TLF   $A0, $A0, $A0, $9F, $14, $50
  28++EF6A              ;                       -160, 160, 160  to -160,-160,160    top left forward     to bottom left forward   TLR   $A0, $A0, $A0, $BF, $45, $60
  29++EF6A              ;                       -160, 160,-160  to  160,160,-160    top left rear        to top right rear        BLF   $A0, $A0, $A0, $DF, $12, $40
  30++EF6A              ;                       -160, 160,-160  to -160,-160,-160   top left rear        to bottom left rear      TRR   $A0, $A0, $A0, $3F, $35, $60
  31++EF6A              ;                       -160,-160,-160  to -160,-160,-160   bottom left forward  to bottom left rear      BLR   $A0, $A0, $A0, $FF, $24, $60
  32++EF6A              ;                       -160, 160, 160  to  160, 160, 160   top left forward     to top right forward     TRF   $A0, $A0, $A0, $1F, $13, $60
  33++EF6A              ;                       -160,-160, 160  to  160,-160, 160   bottom left forward  to bottom right forward  BRF   $A0, $A0, $A0, $5F, $12, $30
  34++EF6A              ;                       -160,-160,-160  to  160,-160,-160   bottom left rear     to bottom right rear     BRR   $A0, $A0, $A0, $7F, $23, $50
  35++EF6A              ;                        160, 160, 160  to  160, 160,-160   top right forward    to top right rear
  36++EF6A              ;                        160,-160, 160  to  160,-160,-160   bottom right forward to bottom right rear
  37++EF6A              ;                        160, 160, 160  to  160,-160, 160   top right forward    to bottom right forward
  38++EF6A              ;                        160, 160,-160  to  160,-160,-160   top right rear       to bottom right rear
  39++EF6A              CoriolisVertices:	    ; DB $A0, $A0, $A0, $9F, $14, $50    ; TLF 1
  40++EF6A                                      ; DB $A0, $A0, $A0, $BF, $45, $60    ; TLR 2
  41++EF6A                                      ; DB $A0, $A0, $A0, $DF, $12, $40    ; BLF 3
  42++EF6A                                      ; DB $A0, $A0, $A0, $3F, $35, $60    ; TRR 4
  43++EF6A                                      ; DB $A0, $A0, $A0, $FF, $24, $60    ; BLR 5
  44++EF6A                                      ; DB $A0, $A0, $A0, $1F, $13, $60    ; TRF 6
  45++EF6A                                      ; DB $A0, $A0, $A0, $5F, $12, $30    ; BRF 7
  46++EF6A                                      ; DB $A0, $A0, $A0, $7F, $23, $50    ; BRR 8
  47++EF6A A0 00 A0 1F                           DB $A0, $00, $A0, $1F, $10, $62     ; 160,   0 , 160
  47++EF6E 10 62
  48++EF70 00 A0 A0 1F                           DB $00, $A0, $A0, $1F, $20, $83     ;   0, 160 , 160
  48++EF74 20 83
  49++EF76 A0 00 A0 9F                           DB $A0, $00, $A0, $9F, $30, $74     ;-160,   0 , 160
  49++EF7A 30 74
  50++EF7C 00 A0 A0 5F                           DB $00, $A0, $A0, $5F, $10, $54     ;   0,-160 , 160
  50++EF80 10 54
  51++EF82 A0 A0 00 5F                           DB $A0, $A0, $00, $5F, $51, $A6     ; 160,-160 ,   0
  51++EF86 51 A6
  52++EF88 A0 A0 00 1F                           DB $A0, $A0, $00, $1F, $62, $B8     ; 160, 160 ,   0
  52++EF8C 62 B8
  53++EF8E A0 A0 00 9F                           DB $A0, $A0, $00, $9F, $73, $C8     ;-160, 160 ,   0
  53++EF92 73 C8
  54++EF94 A0 A0 00 DF                           DB $A0, $A0, $00, $DF, $54, $97     ;-160,-160 ,   0
  54++EF98 54 97
  55++EF9A A0 00 A0 3F                           DB $A0, $00, $A0, $3F, $A6, $DB     ; 160,   0 ,-160
  55++EF9E A6 DB
  56++EFA0 00 A0 A0 3F                           DB $00, $A0, $A0, $3F, $B8, $DC     ;   0, 160 ,-160
  56++EFA4 B8 DC
  57++EFA6 A0 00 A0 BF                           DB $A0, $00, $A0, $BF, $97, $DC     ;-160,   0 ,-160
  57++EFAA 97 DC
  58++EFAC 00 A0 A0 7F                           DB $00, $A0, $A0, $7F, $95, $DA     ;   0,-160 ,-160
  58++EFB0 95 DA
  59++EFB2 0A 1E A0 5E                           DB $0A, $1E, $A0, $5E, $00, $00     ; 160, -30 , 160
  59++EFB6 00 00
  60++EFB8 0A 1E A0 1E                           DB $0A, $1E, $A0, $1E, $00, $00     ; 160,  30 , 160
  60++EFBC 00 00
  61++EFBE 0A 1E A0 9E                           DB $0A, $1E, $A0, $9E, $00, $00     ;-160,  30 , 160
  61++EFC2 00 00
  62++EFC4 0A 1E A0 DE                          DB $0A, $1E, $A0, $DE, $00, $00     ;-160, -30 , 160
  62++EFC8 00 00
  63++EFCA              CoriolisVertSize:       equ $ - CoriolisVertices
  64++EFCA              CoriolisEdges:	        ; DB $1F, $46, $01, $02
  65++EFCA                                      ; DB $1F, $56, $02, $04
  66++EFCA                                      ; DB $1F, $36, $06, $04
  67++EFCA                                      ; DB $1F, $16, $01, $06
  68++EFCA                                      ; DB $1F, $14, $01, $03
  69++EFCA                                      ; DB $1F, $46, $02, $05
  70++EFCA                                      ; DB $1F, $35, $04, $08
  71++EFCA                                      ; DB $1F, $23, $06, $07
  72++EFCA                                      ; DB $1F, $24, $03, $05
  73++EFCA                                      ; DB $1F, $25, $05, $08
  74++EFCA                                      ; DB $1F, $23, $07, $08
  75++EFCA                                      ; DB $1F, $12, $03, $07
  76++EFCA
  77++EFCA 1F 10 00 0C                          DB $1F, $10, $00, $0C
  78++EFCE 1F 20 00 04                          DB $1F, $20, $00, $04
  79++EFD2 1F 30 04 08                          DB $1F, $30, $04, $08
  80++EFD6 1F 40 08 0C                          DB $1F, $40, $08, $0C
  81++EFDA 1F 51 0C 10                          DB $1F, $51, $0C, $10
  82++EFDE 1F 61 00 10                          DB $1F, $61, $00, $10
  83++EFE2 1F 62 00 14                          DB $1F, $62, $00, $14
  84++EFE6 1F 82 14 04                          DB $1F, $82, $14, $04
  85++EFEA 1F 83 04 18                          DB $1F, $83, $04, $18
  86++EFEE 1F 73 08 18                          DB $1F, $73, $08, $18
  87++EFF2 1F 74 08 1C                          DB $1F, $74, $08, $1C
  88++EFF6 1F 54 0C 1C                          DB $1F, $54, $0C, $1C
  89++EFFA 1F DA 20 2C                          DB $1F, $DA, $20, $2C
  90++EFFE 1F DB 20 24                          DB $1F, $DB, $20, $24
  91++F002 1F DC 24 28                          DB $1F, $DC, $24, $28
  92++F006 1F D9 28 2C                          DB $1F, $D9, $28, $2C
  93++F00A 1F A5 10 2C                          DB $1F, $A5, $10, $2C
  94++F00E 1F A6 10 20                          DB $1F, $A6, $10, $20
  95++F012 1F B6 14 20                          DB $1F, $B6, $14, $20
  96++F016 1F B8 14 24                          DB $1F, $B8, $14, $24
  97++F01A 1F C8 18 24                          DB $1F, $C8, $18, $24
  98++F01E 1F C7 18 28                          DB $1F, $C7, $18, $28
  99++F022 1F 97 1C 28                          DB $1F, $97, $1C, $28
 100++F026 1F 95 1C 2C                          DB $1F, $95, $1C, $2C
 101++F02A 1E 00 30 34                          DB $1E, $00, $30, $34
 102++F02E 1E 00 34 38                          DB $1E, $00, $34, $38
 103++F032 1E 00 38 3C                          DB $1E, $00, $38, $3C
 104++F036 1E 00 3C 30                          DB $1E, $00, $3C, $30
 105++F03A              CoriolisEdgesSize:      equ $ - CoriolisEdges
 106++F03A              CoriolisEdgesCnt:       equ CoriolisEdgesSize/4
 107++F03A              CoriolisNormals:	    ; DB $1F, $6B, $00, $00
 108++F03A                                      ; DB $5F, $00, $6B, $00
 109++F03A                                      ; DB $1F, $6B, $00, $00
 110++F03A                                      ; DB $9F, $6B, $00, $00
 111++F03A                                      ; DB $3F, $00, $00, $6B
 112++F03A                                      ; DB $1F, $00, $6B, $00
 113++F03A
 114++F03A 1F 00 00 A0                          DB $1F, $00, $00, $A0
 115++F03E 5F 6B 6B 6B                          DB $5F, $6B, $6B, $6B
 116++F042 1F 6B 6B 6B                          DB $1F, $6B, $6B, $6B
 117++F046 9F 6B 6B 6B                          DB $9F, $6B, $6B, $6B
 118++F04A DF 6B 6B 6B                          DB $DF, $6B, $6B, $6B
 119++F04E 5F 00 A0 00                          DB $5F, $00, $A0, $00
 120++F052 1F A0 00 00                          DB $1F, $A0, $00, $00
 121++F056 9F A0 00 00                          DB $9F, $A0, $00, $00
 122++F05A 1F 00 A0 00                          DB $1F, $00, $A0, $00
 123++F05E FF 6B 6B 6B                          DB $FF, $6B, $6B, $6B
 124++F062 7F 6B 6B 6B                          DB $7F, $6B, $6B, $6B
 125++F066 3F 6B 6B 6B                          DB $3F, $6B, $6B, $6B
 126++F06A BF 6B 6B 6B                          DB $BF, $6B, $6B, $6B
 127++F06E 3F 00 00 A0                          DB $3F, $00, $00, $A0
 128++F072              CoriolisNormalsSize:    equ $ - CoriolisNormals
 129++F072              CoriolisLen:            equ $ - Coriolis
 130++F072
# file closed: ./Data/ships/Coriolis.asm
 103+ F072                                      include "Data/ships/Cougar.asm"
# file opened: ./Data/ships/Cougar.asm
   1++F072 03           Cougar:	                DB $03                         ; Number of cargo canisters released when destroyed
   2++F073 24 13                                DW $1324                       ; Ship's targetable area LoHi
   3++F075 03 F1                                DW CougarEdges                 ; Edge Data
   4++F077 64                                   DB CougarEdgesSize             ; Size of Edge Data
   5++F078 00                                   DB $00                         ; Gun Vertex Byte offset
   6++F079 2A                                   DB $2A                         ; Explosion Count
   7++F07A 13                                   DB CougarVertSize /6           ; Vertex Count /6
   8++F07B 72                                   DB CougarVertSize              ; Vertex Count
   9++F07C 19                                   DB CougarEdgesCnt              ; Edges Count
  10++F07D 00 00                                DW $0000                       ; Bounty LoHi
  11++F07F 18                                   DB CougarNormalsSize           ; Face (Normal) Count
  12++F080 22                                   DB $22                         ; Range when it turns to a dot
  13++F081 FC                                   DB $FC                         ; Energy Max
  14++F082 28                                   DB $28                         ; Speed Max
  15++F083 67 F1                                DW CougarNormals               ; Normals
  16++F085 02                                   DB $02                         ; Q scaling
  17++F086 34                                   DB $30 | ShipMissiles4         ; Laser power and Nbr Missiles
  18++F087 91 F0                                DW CougarVertices              ; Verticles Address
  19++F089 00                                   DB ShipTypeNormal              ; Ship Type
  20++F08A 00                                   DB 0                           ; NewB Tactics
  21++F08B 80                                   DB ShipCanAnger                ; AI Flags
  22++F08C B0                                   DB $B0                         ; chance of ECM module
  23++F08D FF                                   DB $FF                              ; Supports Solid Fill = false
  24++F08E 00 00                                DW $0000                            ; no solid data
  25++F090 00                                   DB $00                              ; no solid data
  26++F091
  27++F091 00 05 43 1F  CougarVertices:	        DB $00, $05, $43, $1F, $02, $44
  27++F095 02 44
  28++F097 14 00 28 9F                          DB $14, $00, $28, $9F, $01, $22
  28++F09B 01 22
  29++F09D 28 00 28 BF                          DB $28, $00, $28, $BF, $01, $55
  29++F0A1 01 55
  30++F0A3 00 0E 28 3E                          DB $00, $0E, $28, $3E, $04, $55
  30++F0A7 04 55
  31++F0A9 00 0E 28 7E                          DB $00, $0E, $28, $7E, $12, $35
  31++F0AD 12 35
  32++F0AF 14 00 28 1F                          DB $14, $00, $28, $1F, $23, $44
  32++F0B3 23 44
  33++F0B5 28 00 28 3F                          DB $28, $00, $28, $3F, $34, $55
  33++F0B9 34 55
  34++F0BB 24 00 38 9F                          DB $24, $00, $38, $9F, $01, $11
  34++F0BF 01 11
  35++F0C1 3C 00 14 BF                          DB $3C, $00, $14, $BF, $01, $11
  35++F0C5 01 11
  36++F0C7 24 00 38 1F                          DB $24, $00, $38, $1F, $34, $44
  36++F0CB 34 44
  37++F0CD 3C 00 14 3F                          DB $3C, $00, $14, $3F, $34, $44
  37++F0D1 34 44
  38++F0D3 00 07 23 12                          DB $00, $07, $23, $12, $00, $44
  38++F0D7 00 44
  39++F0D9 00 08 19 14                          DB $00, $08, $19, $14, $00, $44
  39++F0DD 00 44
  40++F0DF 0C 02 2D 94                          DB $0C, $02, $2D, $94, $00, $00
  40++F0E3 00 00
  41++F0E5 0C 02 2D 14                          DB $0C, $02, $2D, $14, $44, $44
  41++F0E9 44 44
  42++F0EB 0A 06 28 B4                          DB $0A, $06, $28, $B4, $55, $55
  42++F0EF 55 55
  43++F0F1 0A 06 28 F4                          DB $0A, $06, $28, $F4, $55, $55
  43++F0F5 55 55
  44++F0F7 0A 06 28 74                          DB $0A, $06, $28, $74, $55, $55
  44++F0FB 55 55
  45++F0FD 0A 06 28 34                          DB $0A, $06, $28, $34, $55, $55
  45++F101 55 55
  46++F103              CougarVertSize:         equ $ - CougarVertices
  47++F103 1F 02 00 04  CougarEdges:	        DB $1F, $02, $00, $04
  48++F107 1F 01 04 1C                          DB $1F, $01, $04, $1C
  49++F10B 1F 01 1C 20                          DB $1F, $01, $1C, $20
  50++F10F 1F 01 20 08                          DB $1F, $01, $20, $08
  51++F113 1E 05 08 0C                          DB $1E, $05, $08, $0C
  52++F117 1E 45 0C 18                          DB $1E, $45, $0C, $18
  53++F11B 1E 15 08 10                          DB $1E, $15, $08, $10
  54++F11F 1E 35 10 18                          DB $1E, $35, $10, $18
  55++F123 1F 34 18 28                          DB $1F, $34, $18, $28
  56++F127 1F 34 28 24                          DB $1F, $34, $28, $24
  57++F12B 1F 34 24 14                          DB $1F, $34, $24, $14
  58++F12F 1F 24 14 00                          DB $1F, $24, $14, $00
  59++F133 1B 04 00 0C                          DB $1B, $04, $00, $0C
  60++F137 1B 12 04 10                          DB $1B, $12, $04, $10
  61++F13B 1B 23 14 10                          DB $1B, $23, $14, $10
  62++F13F 1A 01 04 08                          DB $1A, $01, $04, $08
  63++F143 1A 34 14 18                          DB $1A, $34, $14, $18
  64++F147 14 00 30 34                          DB $14, $00, $30, $34
  65++F14B 12 00 34 2C                          DB $12, $00, $34, $2C
  66++F14F 12 44 2C 38                          DB $12, $44, $2C, $38
  67++F153 14 44 38 30                          DB $14, $44, $38, $30
  68++F157 12 55 3C 40                          DB $12, $55, $3C, $40
  69++F15B 14 55 40 48                          DB $14, $55, $40, $48
  70++F15F 12 55 48 44                          DB $12, $55, $48, $44
  71++F163 14 55 44 3C                          DB $14, $55, $44, $3C
  72++F167              CougarEdgesSize:        equ $ - CougarEdges
  73++F167              CougarEdgesCnt:         equ CougarEdgesSize/4
  74++F167 9F 10 2E 04  CougarNormals:	        DB $9F, $10, $2E, $04
  75++F16B DF 10 2E 04                          DB $DF, $10, $2E, $04
  76++F16F 5F 00 1B 05                          DB $5F, $00, $1B, $05
  77++F173 5F 10 2E 04                          DB $5F, $10, $2E, $04
  78++F177 1F 10 2E 04                          DB $1F, $10, $2E, $04
  79++F17B 3E 00 00 A0                          DB $3E, $00, $00, $A0
  80++F17F              CougarNormalsSize:      equ $ - CougarNormals
  81++F17F              CougarLen:              equ $ - Cougar
  82++F17F
# file closed: ./Data/ships/Cougar.asm
 104+ F17F                                      include "Data/ships/Dodo.asm"
# file opened: ./Data/ships/Dodo.asm
   1++F17F 00           Dodo:	                DB $00                        ; Number of cargo canisters released when destroyed
   2++F180 90 7E                                DW $7E90                      ; Ship's targetable area LoHi
   3++F182 2E F2                                DW DodoEdges                  ; Edge Data
   4++F184 88                                   DB DodoEdgesSize              ; Size of Edge Data
   5++F185 00                                   DB $00                        ; Gun Vertex Byte offset
   6++F186 36                                   DB $36                        ; Explosion Count
   7++F187 18                                   DB DodoVertSize /6            ; Vertex Count /6
   8++F188 90                                   DB DodoVertSize               ; Vertex Count
   9++F189 22                                   DB DodoEdgesCnt               ; Edges Count
  10++F18A 00 00                                DW $0000                      ; Bounty LoHi
  11++F18C 30                                   DB DodoNormalsSize            ; Face (Normal) Count
  12++F18D 7D                                   DB $7D                        ; Range when it turns to a dot
  13++F18E F0                                   DB $F0                        ; Energy Max
  14++F18F 00                                   DB $00                        ; Speed Max
  15++F190 B6 F2                                DW DodoNormals                ; Normals
  16++F192 00                                   DB $00                        ; Q scaling
  17++F193 00                                   DB $00                        ; Laser power and Nbr Missiles
  18++F194 9E F1                                DW DodoVertices               ; Verticles Address
  19++F196 02                                   DB ShipTypeStation            ; Ship Type
  20++F197 00                                   DB 0                          ; NewB Tactics
  21++F198 00                                   DB 0                          ; AI Flags
  22++F199 FF                                   DB $FF                        ; chance of ECM module
  23++F19A FF                                   DB $FF                              ; Supports Solid Fill = false
  24++F19B 00 00                                DW $0000                            ; no solid data
  25++F19D 00                                   DB $00                              ; no solid data
  26++F19E
  27++F19E 00 96 C4 1F  DodoVertices:	        DB $00, $96, $C4, $1F, $01, $55
  27++F1A2 01 55
  28++F1A4 8F 2E C4 1F                          DB $8F, $2E, $C4, $1F, $01, $22
  28++F1A8 01 22
  29++F1AA 58 79 C4 5F                          DB $58, $79, $C4, $5F, $02, $33
  29++F1AE 02 33
  30++F1B0 58 79 C4 DF                          DB $58, $79, $C4, $DF, $03, $44
  30++F1B4 03 44
  31++F1B6 8F 2E C4 9F                          DB $8F, $2E, $C4, $9F, $04, $55
  31++F1BA 04 55
  32++F1BC 00 F3 2E 1F                          DB $00, $F3, $2E, $1F, $15, $66
  32++F1C0 15 66
  33++F1C2 E7 4B 2E 1F                          DB $E7, $4B, $2E, $1F, $12, $77
  33++F1C6 12 77
  34++F1C8 8F C4 2E 5F                          DB $8F, $C4, $2E, $5F, $23, $88
  34++F1CC 23 88
  35++F1CE 8F C4 2E DF                          DB $8F, $C4, $2E, $DF, $34, $99
  35++F1D2 34 99
  36++F1D4 E7 4B 2E 9F                          DB $E7, $4B, $2E, $9F, $45, $AA
  36++F1D8 45 AA
  37++F1DA 8F C4 2E 3F                          DB $8F, $C4, $2E, $3F, $16, $77
  37++F1DE 16 77
  38++F1E0 E7 4B 2E 7F                          DB $E7, $4B, $2E, $7F, $27, $88
  38++F1E4 27 88
  39++F1E6 00 F3 2E 7F                          DB $00, $F3, $2E, $7F, $38, $99
  39++F1EA 38 99
  40++F1EC E7 4B 2E FF                          DB $E7, $4B, $2E, $FF, $49, $AA
  40++F1F0 49 AA
  41++F1F2 8F C4 2E BF                          DB $8F, $C4, $2E, $BF, $56, $AA
  41++F1F6 56 AA
  42++F1F8 58 79 C4 3F                          DB $58, $79, $C4, $3F, $67, $BB
  42++F1FC 67 BB
  43++F1FE 8F 2E C4 7F                          DB $8F, $2E, $C4, $7F, $78, $BB
  43++F202 78 BB
  44++F204 00 96 C4 7F                          DB $00, $96, $C4, $7F, $89, $BB
  44++F208 89 BB
  45++F20A 8F 2E C4 FF                          DB $8F, $2E, $C4, $FF, $9A, $BB
  45++F20E 9A BB
  46++F210 58 79 C4 BF                          DB $58, $79, $C4, $BF, $6A, $BB
  46++F214 6A BB
  47++F216 10 20 C4 9E                          DB $10, $20, $C4, $9E, $00, $00
  47++F21A 00 00
  48++F21C 10 20 C4 DE                          DB $10, $20, $C4, $DE, $00, $00
  48++F220 00 00
  49++F222 10 20 C4 17                          DB $10, $20, $C4, $17, $00, $00
  49++F226 00 00
  50++F228 10 20 C4 57                          DB $10, $20, $C4, $57, $00, $00
  50++F22C 00 00
  51++F22E              DodoVertSize:           equ $ - DodoVertices
  52++F22E 1F 01 00 04  DodoEdges:	            DB $1F, $01, $00, $04
  53++F232 1F 02 04 08                          DB $1F, $02, $04, $08
  54++F236 1F 03 08 0C                          DB $1F, $03, $08, $0C
  55++F23A 1F 04 0C 10                          DB $1F, $04, $0C, $10
  56++F23E 1F 05 10 00                          DB $1F, $05, $10, $00
  57++F242 1F 16 14 28                          DB $1F, $16, $14, $28
  58++F246 1F 17 28 18                          DB $1F, $17, $28, $18
  59++F24A 1F 27 18 2C                          DB $1F, $27, $18, $2C
  60++F24E 1F 28 2C 1C                          DB $1F, $28, $2C, $1C
  61++F252 1F 38 1C 30                          DB $1F, $38, $1C, $30
  62++F256 1F 39 30 20                          DB $1F, $39, $30, $20
  63++F25A 1F 49 20 34                          DB $1F, $49, $20, $34
  64++F25E 1F 4A 34 24                          DB $1F, $4A, $34, $24
  65++F262 1F 5A 24 38                          DB $1F, $5A, $24, $38
  66++F266 1F 56 38 14                          DB $1F, $56, $38, $14
  67++F26A 1F 7B 3C 40                          DB $1F, $7B, $3C, $40
  68++F26E 1F 8B 40 44                          DB $1F, $8B, $40, $44
  69++F272 1F 9B 44 48                          DB $1F, $9B, $44, $48
  70++F276 1F AB 48 4C                          DB $1F, $AB, $48, $4C
  71++F27A 1F 6B 4C 3C                          DB $1F, $6B, $4C, $3C
  72++F27E 1F 15 00 14                          DB $1F, $15, $00, $14
  73++F282 1F 12 04 18                          DB $1F, $12, $04, $18
  74++F286 1F 23 08 1C                          DB $1F, $23, $08, $1C
  75++F28A 1F 34 0C 20                          DB $1F, $34, $0C, $20
  76++F28E 1F 45 10 24                          DB $1F, $45, $10, $24
  77++F292 1F 67 28 3C                          DB $1F, $67, $28, $3C
  78++F296 1F 78 2C 40                          DB $1F, $78, $2C, $40
  79++F29A 1F 89 30 44                          DB $1F, $89, $30, $44
  80++F29E 1F 9A 34 48                          DB $1F, $9A, $34, $48
  81++F2A2 1F 6A 38 4C                          DB $1F, $6A, $38, $4C
  82++F2A6 1E 00 50 54                          DB $1E, $00, $50, $54
  83++F2AA 14 00 54 5C                          DB $14, $00, $54, $5C
  84++F2AE 17 00 5C 58                          DB $17, $00, $5C, $58
  85++F2B2 14 00 58 50                          DB $14, $00, $58, $50
  86++F2B6              DodoEdgesSize:          equ $ - DodoEdges
  87++F2B6              DodoEdgesCnt:           equ DodoEdgesSize/4
  88++F2B6 1F 00 00 C4  DodoNormals:	        DB $1F, $00, $00, $C4
  89++F2BA 1F 67 8E 58                          DB $1F, $67, $8E, $58
  90++F2BE 5F A9 37 59                          DB $5F, $A9, $37, $59
  91++F2C2 5F 00 B0 58                          DB $5F, $00, $B0, $58
  92++F2C6 DF A9 37 59                          DB $DF, $A9, $37, $59
  93++F2CA 9F 67 8E 58                          DB $9F, $67, $8E, $58
  94++F2CE 3F 00 B0 58                          DB $3F, $00, $B0, $58
  95++F2D2 3F A9 37 59                          DB $3F, $A9, $37, $59
  96++F2D6 7F 67 8E 58                          DB $7F, $67, $8E, $58
  97++F2DA FF 67 8E 58                          DB $FF, $67, $8E, $58
  98++F2DE BF A9 37 59                          DB $BF, $A9, $37, $59
  99++F2E2 3F 00 00 C4                          DB $3F, $00, $00, $C4
 100++F2E6              DodoNormalsSize:        equ $ - DodoNormals
 101++F2E6              DodoLen:                equ $ - Dodo
 102++F2E6
# file closed: ./Data/ships/Dodo.asm
# file closed: ./Data/ShipModelMetaData1.asm
1367  F2E6                  DISPLAY "Bank ",BankShipModels1," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels1"
1368  F2E6              ; Bank 66  ------------------------------------------------------------------------------------------------------------------------
1369  F2E6                  SLOT    DispMarketAddr
1370  F2E6                  PAGE    BankDispMarket
1371  F2E6                  ORG     DispMarketAddr
1372  C000                  INCLUDE "./Menus/market_prices_disp.asm"
# file opened: ./Menus/market_prices_disp.asm
   1+ C000 4D 61 72 6B  mktdisp_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 DD 8D  mktdisp_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 A9 8E  						DW $0220,name_expanded
   4+ C018 80 0B 2B 88  						DW $0B80,WordUnit
   5+ C01C B0 0B 74 8A  						DW $0BB0,WordQuantity
   6+ C020 08 13 52 8A  						DW $1308,WordProduct
   7+ C024 60 13 5A 8A  						DW $1360,WordUoM
   8+ C028 80 13 5E 8A  						DW $1380,WordPrice
   9+ C02C B0 13 82 8A  						DW $13B0,WordStock
  10+ C030 E0 13 7E 8A  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_mktdisp_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_mktdisp_quantity    DB "999",0
  24+ C03D 39 39 39 00  txt_mktdisp_cargo       DB "999",0
  25+ C041 00 00        mktdisp_cursor			DW  $0000
  26+ C043              mktdisp_position		equ $2008
  27+ C043              mktdisp_uom				equ	$68
  28+ C043              mktdisp_price 			equ $88
  29+ C043              mktdisp_Quantity		equ	$B0
  30+ C043              mktdisp_Cargo           equ $E0
  31+ C043              mktdisp_UomOffset		equ 46
  32+ C043 20 20 20 20  mktdisp_blank_line      DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mktdisp_hold_level      DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mktdisp_cash			DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mktdisp_selected_row    db  0
  36+ C075
  37+ C075              mktdisp_cash_position   equ $B048
  38+ C075 00 00 00...  mktdisp_cash_amount		DS 20
  39+ C089 20 43 72 20  mktdisp_cash_UoM        DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mktdisp_cargo_position  equ $A848
  41+ C094 00 00 00...  mktdisp_cargo_amount	DS 20
  42+ C0A8 20 54 6F 6E  mktdisp_cargo_UoM       DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3 CD CA C0     mktdisp_DispDEIXtoIY1DP:    call    mktdisp_DispDEIXtoIY
  46+ C0B6 FD 36 02 00                          ld (iy+2),0
  47+ C0BA FD 7E 00                             ld      a,(IY+0)
  48+ C0BD FD 77 01                             ld      (IY+1),a
  49+ C0C0 3E 2E                                ld      a,"."
  50+ C0C2 FD 77 00                             ld      (IY+0),a
  51+ C0C5 FD 23                                inc     IY
  52+ C0C7 FD 23                                inc     IY
  53+ C0C9 C9                                   ret
  54+ C0CA              ;----------------------------------------------------------------------------------------------------------------------------------
  55+ C0CA DD 22 5F C1  mktdisp_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  56+ C0CE ED 53 61 C1                          ld (.MKTclcn32zIX),de
  57+ C0D2 DD 21 5B C1                          ld ix,.MKTclcn32t+36
  58+ C0D6 06 09                                ld b,9
  59+ C0D8 0E 00                                ld c,0
  60+ C0DA 3E 30        .MKTclcn321:            ld a,'0'
  61+ C0DC B7                                   or a
  62+ C0DD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  63+ C0E0 DD 56 01                             ld d,(ix+1)
  64+ C0E3 2A 5F C1                             ld hl,(.MKTclcn32z)
  65+ C0E6 ED 52                                sbc hl,de
  66+ C0E8 22 5F C1                             ld (.MKTclcn32z),hl
  67+ C0EB DD 5E 02                             ld e,(ix+2)
  68+ C0EE DD 56 03                             ld d,(ix+3)
  69+ C0F1 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  70+ C0F4 ED 52                                sbc hl,de
  71+ C0F6 22 61 C1                             ld (.MKTclcn32zIX),hl
  72+ C0F9 38 04                                jr c,.MKTclcn325
  73+ C0FB 0C                                   inc c
  74+ C0FC 3C                                   inc a
  75+ C0FD 18 DE                                jr .MKTclcn322
  76+ C0FF DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  77+ C102 DD 56 01                             ld d,(ix+1)
  78+ C105 2A 5F C1                             ld hl,(.MKTclcn32z)
  79+ C108 19                                   add hl,de
  80+ C109 22 5F C1                             ld (.MKTclcn32z),hl
  81+ C10C DD 5E 02                             ld e,(ix+2)
  82+ C10F DD 56 03                             ld d,(ix+3)
  83+ C112 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  84+ C115 ED 5A                                adc hl,de
  85+ C117 22 61 C1                             ld (.MKTclcn32zIX),hl
  86+ C11A 11 FC FF                             ld de,-4
  87+ C11D DD 19                                add ix,de
  88+ C11F 0C                                   inc c
  89+ C120 0D                                   dec c
  90+ C121 28 05                                jr z,.MKTclcn323
  91+ C123 FD 77 00                             ld (iy+0),a
  92+ C126 FD 23                                inc iy
  93+ C128 10 B0        .MKTclcn323:            djnz .MKTclcn321
  94+ C12A 3A 5F C1                             ld a,(.MKTclcn32z)
  95+ C12D C6 30                                add A,'0'
  96+ C12F FD 77 00                             ld (iy+0),a
  97+ C132 FD 36 01 00                          ld (iy+1),0
  98+ C136 C9                                   ret
  99+ C137 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  99+ C13B 0A 00 00 00
  99+ C13F 64 00 00 00
  99+ C143 E8 03 00 00
  99+ C147 10 27 00 00
 100+ C14B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 100+ C14F 40 42 0F 00
 100+ C153 80 96 98 00
 100+ C157 00 E1 F5 05
 100+ C15B 00 CA 9A 3B
 101+ C15F 00 00        .MKTclcn32z             ds 2
 102+ C161 00 00        .MKTclcn32zIX           ds 2
 103+ C163              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C163              ; "DispHL, writes HL to DE address"
 105+ C163 01 F0 D8     MPD_DispHLtoDE:         ld	bc,-10000
 106+ C166 CD 7C C1                             call	MPD_Num1
 107+ C169 01 18 FC                             ld	bc,-1000
 108+ C16C CD 7C C1                             call	MPD_Num1
 109+ C16F 01 9C FF                             ld	bc,-100
 110+ C172 CD 7C C1                             call	MPD_Num1
 111+ C175 0E F6                                ld	c,-10
 112+ C177 CD 7C C1                             call	MPD_Num1
 113+ C17A 0E FF                                ld	c,-1
 114+ C17C 3E 2F        MPD_Num1:	            ld	a,'0'-1
 115+ C17E 3C           .Num2:	                inc	a
 116+ C17F 09                                   add	hl,bc
 117+ C180 38 FC                                jr	c,.Num2
 118+ C182 ED 42                                sbc	hl,bc
 119+ C184 12                                   ld	(de),a
 120+ C185 13                                   inc	de
 121+ C186 C9                                   ret
 122+ C187              ;----------------------------------------------------------------------------------------------------------------------------------
 123+ C187 26 00        MPD_DispAtoDE:          ld h,0
 124+ C189 6F                                   ld l,a
 125+ C18A C3 63 C1                             jp MPD_DispHLtoDE
 126+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 127+ C18D 26 00        MPD_DispPriceAtoDE:     ld h,0
 128+ C18F 6F                                   ld l,a
 129+ C190 01 9C FF                             ld	bc,-100
 130+ C193 CD A3 C1                             call	.NumLeadBlank1
 131+ C196 0E F6                                ld	c,-10
 132+ C198 CD 7C C1                             call	MPD_Num1
 133+ C19B 3E 2E                                ld		a,'.'					; we could assume preformat but
 134+ C19D                                                  DISPLAY "TODO: optimse"
 135+ C19D 12                                   ld		(de),a					; we can optimse that later TODO
 136+ C19E 13                                   inc		de						; with just an inc De
 137+ C19F 0E FF                                ld	c,-1
 138+ C1A1 18 D9                                jr		MPD_Num1
 139+ C1A3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 140+ C1A5 3C           .NumLeadBlank2:	        inc	a
 141+ C1A6 09                                   add	hl,bc
 142+ C1A7 38 FC                                jr	c,.NumLeadBlank2
 143+ C1A9 FE 30                                cp	'0'
 144+ C1AB 20 02                                jr	nz,.DontBlank
 145+ C1AD 3E 20        .Blank:                 ld	a,' '
 146+ C1AF ED 42        .DontBlank:	            sbc	hl,bc
 147+ C1B1 12                                   ld	(de),a
 148+ C1B2 13                                   inc	de
 149+ C1B3 C9                                   ret
 150+ C1B4              ;----------------------------------------------------------------------------------------------------------------------------------
 151+ C1B4 FE 00        MPD_DispQtyAtoDE:       cp	0
 152+ C1B6 28 30                                jr	z,.NoStock
 153+ C1B8 26 00                                ld h,0
 154+ C1BA 6F                                   ld l,a
 155+ C1BB 01 9C FF                             ld	bc,-100
 156+ C1BE CD D7 C1                             call	.NumLeadBlank1
 157+ C1C1 FE 20        .WasLead0:              cp      ' '
 158+ C1C3 20 09                                jr      nz,.NotHundredsZero
 159+ C1C5 0E F6                                ld	c,-10
 160+ C1C7 CD D7 C1                             call	.NumLeadBlank1
 161+ C1CA 0E FF                                ld	c,-1
 162+ C1CC 18 AE                                jr		MPD_Num1
 163+ C1CE 0E F6        .NotHundredsZero:       ld	c,-10
 164+ C1D0 CD 7C C1                             call	MPD_Num1
 165+ C1D3 0E FF                                ld	c,-1
 166+ C1D5 18 A5                                jr		MPD_Num1
 167+ C1D7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 168+ C1D9 3C           .NumLeadBlank2:	        inc	a
 169+ C1DA 09                                   add	hl,bc
 170+ C1DB 38 FC                                jr	c,.NumLeadBlank2
 171+ C1DD FE 30                                cp	'0'
 172+ C1DF 20 02                                jr	nz,.DontBlank
 173+ C1E1 3E 20        .Blank:                 ld	a,' '
 174+ C1E3 ED 42        .DontBlank:	            sbc	hl,bc
 175+ C1E5 12                                   ld	(de),a
 176+ C1E6 13                                   inc	de
 177+ C1E7 C9                                   ret
 178+ C1E8 3E 20        .NoStock:               ld	a,' '
 179+ C1EA 12                                   ld	(de),a
 180+ C1EB 13                                   inc	de
 181+ C1EC 12                                   ld	(de),a
 182+ C1ED 13                                   inc	de
 183+ C1EE 3E 2D                                ld	a,'-'
 184+ C1F0 12                                   ld	(de),a
 185+ C1F1 13                                   inc de
 186+ C1F2 C9                                   ret
 187+ C1F3              ;----------------------------------------------------------------------------------------------------------------------------------
 188+ C1F3              MPD_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C1F3
   2++C1F3              ;">print_boilder_text hl = text structure, b = message count"
   3++C1F3 C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C1F4 4E                                   ld			c,(hl)		; Get Row into b
   5++C1F5 23                                   inc			hl
   6++C1F6 46                                   ld			b,(hl)		; Get Col into b
   7++C1F7 23                                   inc			hl
   8++C1F8 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C1F9 23                                   inc			hl
  10++C1FA 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C1FB 23                                   inc			hl
  12++C1FC E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C1FD EB                                   ex			de,hl		; now hl = address of text data
  14++C1FE 1E FF                                ld			e,txt_status_colour
  15++C200 C5                                   push		bc
  16++C201 D1                                   pop			de
  17++C202                                      MMUSelectLayer1
  17++C202 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C206 CD D7 E0                             call		l1_print_at
  19++C209 E1                                   pop			hl
  20++C20A C1                                   pop			bc
  21++C20B 10 E6                                djnz		.BoilerTextLoop
  22++C20D C9                                   ret
  23++C20E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 189+ C20E              ;----------------------------------------------------------------------------------------------------------------------------------
 190+ C20E 2A FE 83     mktdisp_GetCash:            ld		hl,(Cash+2)
 191+ C211 EB                                   ex      de,hl
 192+ C212 DD 2A FC 83                          ld      ix,(Cash)
 193+ C216 FD 21 75 C0                          ld		iy,mktdisp_cash_amount
 194+ C21A CD B3 C0                             call 	mktdisp_DispDEIXtoIY1DP
 195+ C21D FD E5                                push    IY
 196+ C21F D1                                   pop     de
 197+ C220 21 89 C0                             ld      hl,mktdisp_cash_UoM
 198+ C223 01 0B 00                             ld      bc,11
 199+ C226 ED B0                                ldir
 200+ C228 C9                                   ret
 201+ C229              ;----------------------------------------------------------------------------------------------------------------------------------
 202+ C229 11 00 00     mktdisp_GetCargo:   	ld      de,0
 203+ C22C DD 21 00 00                          ld      ix,0
 204+ C230 3A 02 84                             ld      a,(CargoRunningLoad)
 205+ C233 DD 6F                                ld      ixl,a
 206+ C235 FD 21 94 C0                          ld		iy,mktdisp_cargo_amount
 207+ C239 CD CA C0                             call 	mktdisp_DispDEIXtoIY
 208+ C23C FD E5                                push    IY
 209+ C23E D1                                   pop     de
 210+ C23F 13                                   inc     de
 211+ C240 21 A8 C0                             ld      hl,mktdisp_cargo_UoM
 212+ C243 01 0B 00                             ld      bc,11
 213+ C246 ED B0                                ldir
 214+ C248 C9                                   ret
 215+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 216+ C249 CD 29 C2     mktdisp_DisplayCargo:   call	mktdisp_GetCargo
 217+ C24C 21 94 C0                             ld		hl,mktdisp_cargo_amount
 218+ C24F 11 48 A8                             ld      de,mktdisp_cargo_position
 219+ C252                                      MMUSelectLayer1
 219+ C252 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 220+ C256 CD D7 E0                             call	l1_print_at
 221+ C259 C9                                   ret
 222+ C25A              ;----------------------------------------------------------------------------------------------------------------------------------
 223+ C25A CD 0E C2     mktdisp_DisplayCash:        call	mktdisp_GetCash
 224+ C25D 21 75 C0                             ld		hl,mktdisp_cash_amount
 225+ C260 11 48 B0                             ld      de,mktdisp_cash_position
 226+ C263                                      MMUSelectLayer1
 226+ C263 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 227+ C267 CD D7 E0                             call	l1_print_at
 228+ C26A C9                                   ret
 229+ C26B              ;----------------------------------------------------------------------------------------------------------------------------------
 230+ C26B              ; "A = stock item number"
 231+ C26B F5           PrintMktDispItem:       push     af
 232+ C26C 21 08 20                             ld      hl,mktdisp_position
 233+ C26F 57                                   ld      d,a
 234+ C270 1E 08                                ld      e,8
 235+ C272 ED 30                                mul
 236+ C274 53                                   ld      d,e
 237+ C275 1E 00                                ld      e,0
 238+ C277 19                                   add     hl,de
 239+ C278 22 41 C0                             ld      (mktdisp_cursor),hl
 240+ C27B EB                                   ex      hl,de
 241+ C27C 21 43 C0                             ld      hl,mktdisp_blank_line
 242+ C27F                                      MMUSelectLayer1
 242+ C27F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 243+ C283 CD D7 E0                             call	l1_print_at
 244+ C286 F1                                   pop     af
 245+ C287 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 246+ C28B FD 21 03 84                          ld      iy,CargoTonnes
 247+ C28F 1E 08                                ld		e,8
 248+ C291 57                                   ld		d,a
 249+ C292 ED 30                                mul
 250+ C294 DD 19                                add		ix,de				; Move down a row ix += a * 8
 251+ C296 16 00                                ld      d,0
 252+ C298 5F                                   ld      e,a
 253+ C299 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 254+ C29B              .GetName:               MMUSelectStockTable
 254+ C29B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 255+ C29F DD 7E 00                             ld		a,(ix+0)
 256+ C2A2 21 29 8C                             ld		hl,WordIdx
 257+ C2A5 CD 84 87                             call	getTableText
 258+ C2A8 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 259+ C2AC                                      MMUSelectLayer1
 259+ C2AC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 260+ C2B0 CD D7 E0                             call	l1_print_at
 261+ C2B3              .GetUom                 MMUSelectStockTable
 261+ C2B3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 262+ C2B7 DD 7E 07                             ld		a,(ix+7)
 263+ C2BA C6 2E                                add		a,mktdisp_UomOffset
 264+ C2BC 21 29 8C                             ld		hl,WordIdx
 265+ C2BF CD 84 87                             call	getTableText
 266+ C2C2 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 267+ C2C6 1E 68                                ld		e,mktdisp_uom
 268+ C2C8                                      MMUSelectLayer1
 268+ C2C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 269+ C2CC CD D7 E0                             call	l1_print_at
 270+ C2CF              .GetPrice:              MMUSelectStockTable
 270+ C2CF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 271+ C2D3 DD 7E 02                             ld		a,(ix+2)
 272+ C2D6 11 34 C0                             ld		de,txt_mktdisp_amount
 273+ C2D9 CD 8D C1                             call	MPD_DispPriceAtoDE
 274+ C2DC 21 34 C0                             ld		hl,txt_mktdisp_amount
 275+ C2DF ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 276+ C2E3 1E 88                                ld		e,mktdisp_price
 277+ C2E5                                      MMUSelectLayer1
 277+ C2E5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 278+ C2E9 CD D7 E0                             call	l1_print_at
 279+ C2EC              .GetQty:                MMUSelectStockTable
 279+ C2EC ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 280+ C2F0 DD 7E 01                             ld		a,(ix+1)
 281+ C2F3 11 39 C0                             ld		de,txt_mktdisp_quantity
 282+ C2F6 CD B4 C1                             call	MPD_DispQtyAtoDE
 283+ C2F9 21 39 C0                             ld		hl,txt_mktdisp_quantity
 284+ C2FC ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 285+ C300 1E B0                                ld		e,mktdisp_Quantity
 286+ C302                                      MMUSelectLayer1
 286+ C302 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 287+ C306 CD D7 E0                             call	l1_print_at
 288+ C309 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 289+ C30C 11 3D C0                             ld      de,txt_mktdisp_cargo
 290+ C30F CD B4 C1                             call	MPD_DispQtyAtoDE
 291+ C312 21 3D C0                             ld      hl,txt_mktdisp_cargo
 292+ C315 ED 5B 41 C0                          ld      de,(mktdisp_cursor)
 293+ C319 1E E0                                ld      e,mktdisp_Cargo
 294+ C31B                                      MMUSelectLayer1
 294+ C31B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 295+ C31F CD D7 E0                             call	l1_print_at
 296+ C322 C9                                   ret
 297+ C323
 298+ C323              draw_mktdisp_prices_menu:InitNoDoubleBuffer
 298+ C323             >                            MMUSelectLayer1
 298+ C323 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 298+ C327 CD 8F E0    >                            call	l1_cls
 298+ C32A 3E 07       >                            ld		a,7
 298+ C32C CD AA E0    >                            call	l1_attr_cls_to_a
 298+ C32F             >                            MMUSelectLayer2
 298+ C32F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 298+ C333 CD 0A E0    >                            call    asm_l2_double_buffer_off
 298+ C336 CD 0E E2    >                            call	l2_cls	; Get some space
 298+ C339             >                            MMUSelectSpriteBank
 298+ C339 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 298+ C33D CD 6E E5    >                            call    sprite_cls_cursors
 299+ C340 3E 20                                ld      a,$20
 300+ C342 32 A9 7E                             ld      (MenuIdMax),a
 301+ C345 01 01 01     .Drawbox:               ld		bc,$0101
 302+ C348 11 FD BE                             ld		de,$BEFD
 303+ C34B 3E C0                                ld		a,$C0
 304+ C34D                                      MMUSelectLayer2
 304+ C34D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 305+ C351 CD F9 E3                             call	l2_draw_box
 306+ C354 01 01 0A                             ld		bc,$0A01
 307+ C357 11 C0 FE                             ld		de,$FEC0
 308+ C35A CD 84 E4                             call	l2_draw_horz_line
 309+ C35D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 310+ C360 11 C0 50                             ld		de,$50C0
 311+ C363 CD 84 E4                             call	l2_draw_horz_line
 312+ C366 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 313+ C369 11 C0 18                             ld		de,$18C0
 314+ C36C CD 84 E4                             call	l2_draw_horz_line
 315+ C36F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 316+ C372 11 C0 28                             ld		de,$28C0
 317+ C375 CD 84 E4                             call	l2_draw_horz_line
 318+ C378 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 319+ C37B 11 C0 28                             ld		de,$28C0
 320+ C37E CD 84 E4                             call	l2_draw_horz_line
 321+ C381 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 322+ C384 11 C0 18                             ld		de,$18C0
 323+ C387 CD 84 E4                             call	l2_draw_horz_line
 324+ C38A 3A 2B 7F     .StaticText:	        ld      a,(Galaxy)
 325+ C38D                                      MMUSelectGalaxyA
 325+ C38D ED 92 57    >                     nextreg GalaxyDataMMU,     a
 326+ C390 3E 19                                ld		a,25
 327+ C392 CD 24 8E                             call	expandTokenToString
 328+ C395 CD 7A F6                             call	GetDigramGalaxySeed
 329+ C398 06 09                                ld		b,9
 330+ C39A 21 10 C0                             ld		hl,mktdisp_boiler_text
 331+ C39D CD F3 C1                             call	MPD_print_boiler_text
 332+ C3A0 3E 00        .DisplayPrices:         ld		a,0
 333+ C3A2 21 08 20                             ld		hl,mktdisp_position
 334+ C3A5 22 41 C0                             ld		(mktdisp_cursor),hl
 335+ C3A8 F5           .MarketLoop:	        push	af
 336+ C3A9 CD 6B C2                             call	PrintMktDispItem
 337+ C3AC F1                                   pop		af
 338+ C3AD 3C                                   inc		a
 339+ C3AE FE 11                                cp		17
 340+ C3B0 20 F6                                jr		nz,.MarketLoop
 341+ C3B2 21 64 C0     .DisCargo:              ld      hl,mktdisp_hold_level
 342+ C3B5 11 10 A8                             ld      de,$A810
 343+ C3B8                                      MMUSelectLayer1
 343+ C3B8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 344+ C3BC CD D7 E0                             call	l1_print_at
 345+ C3BF CD 49 C2                             call    mktdisp_DisplayCargo
 346+ C3C2 21 6C C0     .DisCash:               ld      hl,mktdisp_cash
 347+ C3C5 11 10 B0                             ld      de,$B010
 348+ C3C8                                      MMUSelectLayer1
 348+ C3C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 349+ C3CC CD D7 E0                             call	l1_print_at
 350+ C3CF CD 5A C2                             call    mktdisp_DisplayCash
 351+ C3D2 C9                                   ret
 352+ C3D3
 353+ C3D3
# file closed: ./Menus/market_prices_disp.asm
1373  C3D3                  DISPLAY "Bank ",BankDispMarket," - Bytes free ",/D, $2000 - ($-MenuShrChtAddr), " - BankDispMarket"
1374  C3D3              ; Bank 67  ------------------------------------------------------------------------------------------------------------------------
1375  C3D3                  SLOT    ShipModelsAddr
1376  C3D3                  PAGE    BankShipModels2
1377  C3D3              	ORG     ShipModelsAddr, BankShipModels2
1378  E000
1379  E000                  INCLUDE "./Data/ShipBank2Label.asm"
# file opened: ./Data/ShipBank2Label.asm
   1+ E000 53 68 69 70  ShipBank2Label:         DB  "ShipBank2      "
   1+ E004 42 61 6E 6B
   1+ E008 32 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank2Label.asm
1380  E00F              GetShipBank2Id:         MGetShipBankId ShipBankTable2
1380  E00F 06 00       >                        ld      b,0
1380  E011 4F          >                        ld      c,a                                 ; c= original ship id
1380  E012 CB 3F       >.ShiftLoop:             srl     a
1380  E014 CB 3F       >                        srl     a
1380  E016 CB 3F       >                        srl     a
1380  E018 CB 3F       >                        srl     a                                   ; divide by 16
1380  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1380  E01B 79          >                        ld      a,c
1380  E01C 50          >                        ld      d,b
1380  E01D 1E 10       >                        ld      e,16
1380  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1380  E021 93          >                        sub     e                                   ; a= actual model id now
1380  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1380  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1380  E024 7A          >                        ld      a,d                                 ; a = bank number
1380  E025             >;.. Now b = bank and a = adjusted ship nbr
1380  E025 21 62 E0    >                        ld      hl,ShipBankTable2                        ; a= bank index
1380  E028 ED 31       >                        add     hl,a
1380  E02A ED 31       >                        add     hl,a
1380  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1380  E02D             >                        ClearCarryFlag
1380  E02D B7          >                        or a
1380  E02E C9          >                        ret
1381  E02F              CopyVertsToUniv2:       McopyVertsToUniverse
1381  E02F 2A 0B C4    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1381  E032 11 11 C4    >                        ld          de,UBnkHullVerticies
1381  E035 06 00       >                        ld          b,0
1381  E037 3A FF C3    >                        ld			a,(VertexCtX6Addr)
1381  E03A 4F          >                        ld          c,a
1381  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1381  E03C CD 5E 7D    >                        call        memcopy_dma
1381  E03F C9          >                        ret
1382  E040              CopyEdgesToUniv2:       McopyEdgesToUniverse
1382  E040 2A F9 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1382  E043 11 01 C5    >                        ld          de,UBnkHullEdges
1382  E046 06 00       >                        ld          b,0
1382  E048 3A FB C3    >                        ld			a,(LineX4Addr)
1382  E04B 4F          >                        ld          c,a
1382  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1382  E04D CD 5E 7D    >                        call        memcopy_dma
1382  E050 C9          >                        ret
1383  E051              CopyNormsToUniv2:       McopyNormsToUniverse
1383  E051 2A 07 C4    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1383  E054 11 C9 C5    >                        ld          de,UBnkHullNormals
1383  E057 06 00       >                        ld          b,0
1383  E059 3A 03 C4    >                        ld          a,(FaceCtX4Addr)
1383  E05C 4F          >                        ld          c,a
1383  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1383  E05E CD 5E 7D    >                        call        memcopy_dma
1383  E061 C9          >                        ret
1384  E062              ShipBankTable2:         MShipBankTable
1384  E062 3B 00       >                        DW      BankShipModels1
1384  E064 43 00       >                        DW      BankShipModels2
1384  E066 44 00       >                        DW      BankShipModels3
1384  E068 45 00       >                        DW      BankShipModels4
1385  E06A              CopyShipToUniverse2     MCopyShipToUniverse     BankShipModels2
1385  E06A 21 41 C0    >                        ld          hl,UBnkShipModelBank
1385  E06D 36 43       >                        ld          (hl),BankShipModels2
1385  E06F F5          >                        push        af
1385  E070 FD 7D       >                        ld          a,iyl
1385  E072 32 43 C0    >                        ld          (UBnKShipModelId),a
1385  E075 F1          >                        pop         af
1385  E076 32 42 C0    >                        ld          (UBnKShipModelNbr),a
1385  E079 21 46 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1385  E07C ED 31       >                        add         hl,a
1385  E07E ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1385  E080 4E          >                        ld          c,(hl)
1385  E081 23          >                        inc         hl
1385  E082 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1385  E083 21 C6 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1385  E086 ED 31       >                        add         hl,a
1385  E088 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1385  E08A 7E          >                        ld          a,(hl)
1385  E08B 23          >                        inc         hl
1385  E08C 66          >                        ld          h,(hl)
1385  E08D 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1385  E08E 11 F6 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1385  E091 01 1B 00    >                        ld          bc,ShipDataLength
1385  E094 ED B0       >                        ldir
1385  E096 CD 2F E0    >                        call        CopyVertsToUniv
1385  E099 CD 40 E0    >                        call        CopyEdgesToUniv
1385  E09C CD 51 E0    >                        call        CopyNormsToUniv
1385  E09F 21 10 C0    >.ClearName:             ld          hl,StartOfUnivName
1385  E0A2 3E 20       >                        ld          a," "
1385  E0A4 06 10       >                        ld          b,16
1385  E0A6 77          >.fillLoop:              ld          (hl),a
1385  E0A7 23          >                        inc         hl
1385  E0A8 10 FC       >                        djnz        .fillLoop
1385  E0AA 3A 43 C0    >.SetName:               ld          a,(UBnKShipModelId)
1385  E0AD CD 10 8E    >                        call        ShipIndexToAddress
1385  E0B0 11 10 C0    >                        ld          de,StartOfUnivName
1385  E0B3 06 10       >                        ld          b,16
1385  E0B5 7E          >.CopyLoop:              ld          a,(hl)
1385  E0B6 FE 00       >                        cp          0
1385  E0B8 28 05       >                        jr          z,.CopyDone
1385  E0BA 12          >                        ld          (de),a
1385  E0BB 23          >                        inc         hl
1385  E0BC 13          >                        inc         de
1385  E0BD 10 F6       >                        djnz        .CopyLoop
1385  E0BF C9          >.CopyDone:              ret
1386  E0C0              CopyBodyToUniverse2:    MCopyBodyToUniverse     CopyShipToUniverse2
1386  E0C0 3E 0D       >                        ld          a,13
1386  E0C2 CD 6A E0    >                        call        CopyShipToUniverse2
1386  E0C5 C9          >                        ret
1387  E0C6
1388  E0C6                  INCLUDE "./Data/ShipModelMetaData2.asm"
# file opened: ./Data/ShipModelMetaData2.asm
   1+ E0C6 66 E1        ShipModelTable2:         DW Dragon                                  ;16  $10
   2+ E0C8 47 E2                                 DW Escape_Pod                              ;17  $11
   3+ E0CA A6 E2                                 DW Fer_De_Lance                            ;18  $12
   4+ E0CC CB E3                                 DW Gecko                                   ;19  $13
   5+ E0CE 9A E4                                 DW Ghavial                                 ;20  $14
   6+ E0D0 89 E5                                 DW Iguana                                  ;21  $15
   7+ E0D2 86 E6                                 DW Krait                                   ;22  $16
   8+ E0D4 77 E7                                 DW Logo                                    ;23  $17
   9+ E0D6 3A E9                                 DW Mamba                                   ;24  $18
  10+ E0D8 73 EA                                 DW Missile                                 ;25  $19
  11+ E0DA 7C EB                                 DW Monitor                                 ;26  $1A
  12+ E0DC 89 EC                                 DW Moray                                   ;27  $1B
  13+ E0DE 6C ED                                 DW Ophidian                                ;28  $1C
  14+ E0E0 AB EE                                 DW Plate                                   ;29  $1D
  15+ E0E2 F0 EE                                 DW Python                                  ;30  $1E
  16+ E0E4 ED EF                                 DW Python_P                                ;31  $1F
  17+ E0E6 85 E1        ShipVertexTable2:        DW DragonVertices                          ;16  $10
  18+ E0E8 66 E2                                 DW Escape_PodVertices                      ;17  $11
  19+ E0EA C5 E2                                 DW Fer_De_LanceVertices                    ;18  $12
  20+ E0EC EA E3                                 DW GeckoVertices                           ;19  $13
  21+ E0EE B9 E4                                 DW GhavialVertices                         ;20  $14
  22+ E0F0 A8 E5                                 DW IguanaVertices                          ;21  $15
  23+ E0F2 A5 E6                                 DW KraitVertices                           ;22  $16
  24+ E0F4 96 E7                                 DW LogoVertices                            ;23  $17
  25+ E0F6 59 E9                                 DW MambaVertices                           ;24  $18
  26+ E0F8 92 EA                                 DW MissileVertices                         ;25  $19
  27+ E0FA 9B EB                                 DW MonitorVertices                         ;26  $1A
  28+ E0FC A8 EC                                 DW MorayVertices                           ;27  $1B
  29+ E0FE 8B ED                                 DW OphidianVertices                        ;28  $1C
  30+ E100 CA EE                                 DW PlateVertices                           ;29  $1D
  31+ E102 0F EF                                 DW PythonVertices                          ;30  $1E
  32+ E104 0C F0                                 DW Python_PVertices                        ;31  $1F
  33+ E106 BB E1        ShipEdgeTable2:          DW DragonEdges                             ;16  $10
  34+ E108 7E E2                                 DW Escape_PodEdges                         ;17  $11
  35+ E10A 37 E3                                 DW Fer_De_LanceEdges                       ;18  $12
  36+ E10C 32 E4                                 DW GeckoEdges                              ;19  $13
  37+ E10E 01 E5                                 DW GhavialEdges                            ;20  $14
  38+ E110 02 E6                                 DW IguanaEdges                             ;21  $15
  39+ E112 0B E7                                 DW KraitEdges                              ;22  $16
  40+ E114 92 E8                                 DW LogoEdges                               ;23  $17
  41+ E116 EF E9                                 DW MambaEdges                              ;24  $18
  42+ E118 F8 EA                                 DW MissileEdges                            ;25  $19
  43+ E11A 01 EC                                 DW MonitorEdges                            ;26  $1A
  44+ E11C FC EC                                 DW MorayEdges                              ;27  $1B
  45+ E11E 03 EE                                 DW OphidianEdges                           ;28  $1C
  46+ E120 DC EE                                 DW PlateEdges                              ;29  $1D
  47+ E122 51 EF                                 DW PythonEdges                             ;30  $1E
  48+ E124 4E F0                                 DW Python_PEdges                           ;31  $1F
  49+ E126 0F E2        ShipNormalTable2:        DW DragonNormals                           ;16  $10
  50+ E128 96 E2                                 DW Escape_PodNormals                       ;17  $11
  51+ E12A A3 E3                                 DW Fer_De_LanceNormals                     ;18  $12
  52+ E12C 76 E4                                 DW GeckoNormals                            ;19  $13
  53+ E12E 59 E5                                 DW GhavialNormals                          ;20  $14
  54+ E130 5E E6                                 DW IguanaNormals                           ;21  $15
  55+ E132 5F E7                                 DW KraitNormals                            ;22  $16
  56+ E134 26 E9                                 DW LogoNormals                             ;23  $17
  57+ E136 5F EA                                 DW MambaNormals                            ;24  $18
  58+ E138 58 EB                                 DW MissileNormals                          ;25  $19
  59+ E13A 5D EC                                 DW MonitorNormals                          ;26  $1A
  60+ E13C 48 ED                                 DW MorayNormals                            ;27  $1B
  61+ E13E 7B EE                                 DW OphidianNormals                         ;28  $1C
  62+ E140 EC EE                                 DW PlateNormals                            ;29  $1D
  63+ E142 B9 EF                                 DW PythonNormals                           ;30  $1E
  64+ E144 B6 F0                                 DW Python_PNormals                         ;31  $1F
  65+ E146 E1 00        ShipModelSizeTable2:     DW DragonLen                               ;16  $10
  66+ E148 5F 00                                 DW Escape_PodLen                           ;17  $11
  67+ E14A 25 01                                 DW Fer_De_LanceLen                         ;18  $12
  68+ E14C CF 00                                 DW GeckoLen                                ;19  $13
  69+ E14E EF 00                                 DW GhavialLen                              ;20  $14
  70+ E150 FD 00                                 DW IguanaLen                               ;21  $15
  71+ E152 F1 00                                 DW KraitLen                                ;22  $16
  72+ E154 C3 01                                 DW LogoLen                                 ;23  $17
  73+ E156 39 01                                 DW MambaLen                                ;24  $18
  74+ E158 09 01                                 DW MissileLen                              ;25  $19
  75+ E15A 0D 01                                 DW MonitorLen                              ;26  $1A
  76+ E15C E3 00                                 DW MorayLen                                ;27  $1B
  77+ E15E 3F 01                                 DW OphidianLen                             ;28  $1C
  78+ E160 45 00                                 DW PlateLen                                ;29  $1D
  79+ E162 FD 00                                 DW PythonLen                               ;30  $1E
  80+ E164 FD 00                                 DW Python_PLen                             ;31  $1F
  81+ E166
  82+ E166                                      include "Data/ships/Dragon.asm"
# file opened: ./Data/ships/Dragon.asm
   1++E166 00           Dragon:	                DB $00                                                    ; Number of cargo canisters released when destroyed
   2++E167 66 50                                DW $5066                                                  ; Ship's targetable area LoHi
   3++E169 BB E1                                DW DragonEdges                                            ; Edge Data
   4++E16B 54                                   DB DragonEdgesSize                                        ; Size of Edge Data
   5++E16C 00                                   DB $00                                                    ; Gun Vertex Byte offset
   6++E16D 3C                                   db $3C                                                    ; Explosion Count
   7++E16E 09                                   DB DragonVertSize /6                                      ; Vertex Count /6
   8++E16F 36                                   DB DragonVertSize                                         ; Vertex Count
   9++E170 15                                   DB DragonEdgesCnt                                         ; Edges Count
  10++E171 00 00                                DW $0000                                                  ; Bounty LoHi
  11++E173 38                                   DB DragonNormalsSize                                      ; Face (Normal) Count
  12++E174 20                                   DB $20                                                    ; Range when it turns to a dot
  13++E175 F7                                   DB $F7                                                    ; Energy Max
  14++E176 14                                   DB $14                                                    ; Speed Max
  15++E177 0F E2                                DW DragonNormals                                          ; Normals
  16++E179 00                                   DB $00                                                    ; Q scaling
  17++E17A 47                                   DB $40 | ShipMissiles7                                    ; Laser power and Nbr Missiles
  18++E17B 85 E1                                DW DragonVertices                                         ; Verticles Address
  19++E17D 00                                   DB ShipTypeNormal                                         ; Ship Type
  20++E17E 00                                   DB 0                                                      ; NewB Tactics
  21++E17F A0                                   DB ShipCanAnger | ShipFighterBaySize2 | ShipFighterWorm   ; AI Flags
  22++E180 B0                                   DB $B0                                                    ; chance of ECM module
  23++E181 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E182 00 00                                DW $0000                            ; no solid data
  25++E184 00                                   DB $00                              ; no solid data
  26++E185
  27++E185 00 00 FA 1F  DragonVertices:	        DB $00, $00, $FA, $1F, $6B, $05
  27++E189 6B 05
  28++E18B D8 00 7C 1F                          DB $D8, $00, $7C, $1F, $67, $01
  28++E18F 67 01
  29++E191 D8 00 7C 3F                          DB $D8, $00, $7C, $3F, $78, $12
  29++E195 78 12
  30++E197 00 28 FA 3F                          DB $00, $28, $FA, $3F, $CD, $23
  30++E19B CD 23
  31++E19D 00 28 FA 7F                          DB $00, $28, $FA, $7F, $CD, $89
  31++E1A1 CD 89
  32++E1A3 D8 00 7C BF                          DB $D8, $00, $7C, $BF, $9A, $34
  32++E1A7 9A 34
  33++E1A9 D8 00 7C 9F                          DB $D8, $00, $7C, $9F, $AB, $45
  33++E1AD AB 45
  34++E1AF 00 50 00 1F                          DB $00, $50, $00, $1F, $FF, $FF
  34++E1B3 FF FF
  35++E1B5 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  35++E1B9 FF FF
  36++E1BB              DragonVertSize:         equ $ - DragonVertices
  37++E1BB 1F 01 04 1C  DragonEdges:	        DB $1F, $01, $04, $1C
  38++E1BF 1F 12 08 1C                          DB $1F, $12, $08, $1C
  39++E1C3 1F 23 0C 1C                          DB $1F, $23, $0C, $1C
  40++E1C7 1F 34 14 1C                          DB $1F, $34, $14, $1C
  41++E1CB 1F 45 18 1C                          DB $1F, $45, $18, $1C
  42++E1CF 1F 50 00 1C                          DB $1F, $50, $00, $1C
  43++E1D3 1F 67 04 20                          DB $1F, $67, $04, $20
  44++E1D7 1F 78 08 20                          DB $1F, $78, $08, $20
  45++E1DB 1F 89 10 20                          DB $1F, $89, $10, $20
  46++E1DF 1F 9A 14 20                          DB $1F, $9A, $14, $20
  47++E1E3 1F AB 18 20                          DB $1F, $AB, $18, $20
  48++E1E7 1F B6 00 20                          DB $1F, $B6, $00, $20
  49++E1EB 1F 06 00 04                          DB $1F, $06, $00, $04
  50++E1EF 1F 17 04 08                          DB $1F, $17, $04, $08
  51++E1F3 1F 4A 14 18                          DB $1F, $4A, $14, $18
  52++E1F7 1F 5B 00 18                          DB $1F, $5B, $00, $18
  53++E1FB 1F 2C 08 0C                          DB $1F, $2C, $08, $0C
  54++E1FF 1F 8C 08 10                          DB $1F, $8C, $08, $10
  55++E203 1F 3D 0C 14                          DB $1F, $3D, $0C, $14
  56++E207 1F 9D 10 14                          DB $1F, $9D, $10, $14
  57++E20B 1F CD 0C 10                          DB $1F, $CD, $0C, $10
  58++E20F              DragonEdgesSize:        equ $ - DragonEdges
  59++E20F              DragonEdgesCnt:         equ DragonEdgesSize/4
  60++E20F 1F 10 5A 1C  DragonNormals:	        DB $1F, $10, $5A, $1C
  61++E213 1F 21 5A 00                          DB $1F, $21, $5A, $00
  62++E217 3F 19 5B 0E                          DB $3F, $19, $5B, $0E
  63++E21B BF 19 5B 0E                          DB $BF, $19, $5B, $0E
  64++E21F 9F 21 5A 00                          DB $9F, $21, $5A, $00
  65++E223 9F 10 5A 1C                          DB $9F, $10, $5A, $1C
  66++E227 5F 10 5A 1C                          DB $5F, $10, $5A, $1C
  67++E22B 5F 21 5A 00                          DB $5F, $21, $5A, $00
  68++E22F 7F 19 5B 0E                          DB $7F, $19, $5B, $0E
  69++E233 FF 19 5B 0E                          DB $FF, $19, $5B, $0E
  70++E237 DF 21 5A 00                          DB $DF, $21, $5A, $00
  71++E23B DF 10 5A 1C                          DB $DF, $10, $5A, $1C
  72++E23F 3F 30 00 52                          DB $3F, $30, $00, $52
  73++E243 BF 30 00 52                          DB $BF, $30, $00, $52
  74++E247              DragonNormalsSize:      equ $ - DragonNormals
  75++E247              DragonLen:              equ $ - Dragon
  76++E247
# file closed: ./Data/ships/Dragon.asm
  83+ E247                                      include "Data/ships/Escape_Pod.asm"
# file opened: ./Data/ships/Escape_Pod.asm
   1++E247 20           Escape_Pod:             DB $20                          ; Number of cargo canisters released when destroyed
   2++E248 00 01                                DW $0100                        ; Ship's targetable area LoHi
   3++E24A 7E E2                                DW Escape_PodEdges              ; Edge Data
   4++E24C 18                                   DB Escape_PodEdgesSize          ; Size of Edge Data
   5++E24D 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E24E 16                                   DB $16                          ; Explosion Count
   7++E24F 04                                   DB Escape_PodVertSize /6        ; Vertex Count /6
   8++E250 18                                   DB Escape_PodVertSize           ; Vertex Count
   9++E251 06                                   DB Escape_PodEdgesCnt           ; Edges Count
  10++E252 00 00                                DW $0000                        ; Bounty LoHi
  11++E254 10                                   DB Escape_PodNormalsSize        ; Face (Normal) Count
  12++E255 08                                   DB $08                          ; Range when it turns to a dot
  13++E256 11                                   DB $11                          ; Energy Max
  14++E257 08                                   DB $08                          ; Speed Max
  15++E258 96 E2                                DW Escape_PodNormals            ; Normals
  16++E25A 04                                   DB $04                          ; Q scaling
  17++E25B 00                                   DB $00                          ; Laser power and Nbr Missiles
  18++E25C 66 E2                                DW Escape_PodVertices           ; Verticles Address
  19++E25E 00                                   DB 0                            ; Ship Type
  20++E25F 00                                   DB 0                            ; NewB Tactics
  21++E260 00                                   DB 0                            ; AI Flags
  22++E261 FF                                   DB $FF                          ; chance of ECM module
  23++E262 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E263 00 00                                DW $0000                            ; no solid data
  25++E265 00                                   DB $00                              ; no solid data
  26++E266
  27++E266 07 00 24 9F  Escape_PodVertices:	    DB $07, $00, $24, $9F, $12, $33
  27++E26A 12 33
  28++E26C 07 0E 0C FF                          DB $07, $0E, $0C, $FF, $02, $33
  28++E270 02 33
  29++E272 07 0E 0C BF                          DB $07, $0E, $0C, $BF, $01, $33
  29++E276 01 33
  30++E278 15 00 00 1F                          DB $15, $00, $00, $1F, $01, $22
  30++E27C 01 22
  31++E27E              Escape_PodVertSize:     equ $ - Escape_PodVertices
  32++E27E 1F 23 00 04  Escape_PodEdges:	    DB $1F, $23, $00, $04
  33++E282 1F 03 04 08                          DB $1F, $03, $04, $08
  34++E286 1F 01 08 0C                          DB $1F, $01, $08, $0C
  35++E28A 1F 12 0C 00                          DB $1F, $12, $0C, $00
  36++E28E 1F 13 00 08                          DB $1F, $13, $00, $08
  37++E292 1F 02 0C 04                          DB $1F, $02, $0C, $04
  38++E296              Escape_PodEdgesSize:    equ $ - Escape_PodEdges
  39++E296              Escape_PodEdgesCnt:     equ Escape_PodEdgesSize/4
  40++E296 3F 34 00 7A  Escape_PodNormals:	    DB $3F, $34, $00, $7A
  41++E29A 1F 27 67 1E                          DB $1F, $27, $67, $1E
  42++E29E 5F 27 67 1E                          DB $5F, $27, $67, $1E
  43++E2A2 9F 70 00 00                          DB $9F, $70, $00, $00
  44++E2A6              Escape_PodNormalsSize:  equ $ - Escape_PodNormals
  45++E2A6              Escape_PodLen:          equ $ - Escape_Pod
  46++E2A6
# file closed: ./Data/ships/Escape_Pod.asm
  84+ E2A6                                      include "Data/ships/Fer_De_Lance.asm"
# file opened: ./Data/ships/Fer_De_Lance.asm
   1++E2A6 00           Fer_De_Lance:	        DB $00                          ; Number of cargo canisters released when destroyed
   2++E2A7 40 06                                DW $0640                        ; Ship's targetable area LoHi
   3++E2A9 37 E3                                DW Fer_De_LanceEdges            ; Edge Data
   4++E2AB 6C                                   DB Fer_De_LanceEdgesSize        ; Size of Edge Data
   5++E2AC 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E2AD 1A                                   DB $1A                          ; Explosion Count
   7++E2AE 13                                   DB Fer_De_LanceVertSize /6      ; Vertex Count /6
   8++E2AF 72                                   DB Fer_De_LanceVertSize         ; Vertex Count
   9++E2B0 1B                                   DB Fer_De_LanceEdgesCnt         ; Edges Count
  10++E2B1 00 00                                DW $0000                        ; Bounty LoHi
  11++E2B3 28                                   DB Fer_De_LanceNormalsSize      ; Face (Normal) Count
  12++E2B4 28                                   DB $28                          ; Range when it turns to a dot
  13++E2B5 A0                                   DB $A0                          ; Energy Max
  14++E2B6 1E                                   DB $1E                          ; Speed Max
  15++E2B7 A3 E3                                DW Fer_De_LanceNormals          ; Normals
  16++E2B9 01                                   DB $01                          ; Q scaling
  17++E2BA 17                                   DB $10 | ShipMissiles7          ; Laser power and Nbr Missiles
  18++E2BB C5 E2                                DW Fer_De_LanceVertices         ; Verticles Address
  19++E2BD 00                                   DB ShipTypeNormal               ; Ship Type
  20++E2BE 00                                   DB 0                            ; NewB Tactics
  21++E2BF 80                                   DB ShipCanAnger                 ; AI Flags
  22++E2C0 FF                                   DB $FF                          ; chance of ECM module
  23++E2C1 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E2C2 00 00                                DW $0000                            ; no solid data
  25++E2C4 00                                   DB $00                              ; no solid data
  26++E2C5
  27++E2C5 00 0E 6C 5F  Fer_De_LanceVertices:	DB $00, $0E, $6C, $5F, $01, $59
  27++E2C9 01 59
  28++E2CB 28 0E 04 FF                          DB $28, $0E, $04, $FF, $12, $99
  28++E2CF 12 99
  29++E2D1 0C 0E 34 FF                          DB $0C, $0E, $34, $FF, $23, $99
  29++E2D5 23 99
  30++E2D7 0C 0E 34 7F                          DB $0C, $0E, $34, $7F, $34, $99
  30++E2DB 34 99
  31++E2DD 28 0E 04 7F                          DB $28, $0E, $04, $7F, $45, $99
  31++E2E1 45 99
  32++E2E3 28 0E 04 BC                          DB $28, $0E, $04, $BC, $01, $26
  32++E2E7 01 26
  33++E2E9 0C 02 34 BC                          DB $0C, $02, $34, $BC, $23, $67
  33++E2ED 23 67
  34++E2EF 0C 02 34 3C                          DB $0C, $02, $34, $3C, $34, $78
  34++E2F3 34 78
  35++E2F5 28 0E 04 3C                          DB $28, $0E, $04, $3C, $04, $58
  35++E2F9 04 58
  36++E2FB 00 12 14 2F                          DB $00, $12, $14, $2F, $06, $78
  36++E2FF 06 78
  37++E301 03 0B 61 CB                          DB $03, $0B, $61, $CB, $00, $00
  37++E305 00 00
  38++E307 1A 08 12 89                          DB $1A, $08, $12, $89, $00, $00
  38++E30B 00 00
  39++E30D 10 0E 04 AB                          DB $10, $0E, $04, $AB, $00, $00
  39++E311 00 00
  40++E313 03 0B 61 4B                          DB $03, $0B, $61, $4B, $00, $00
  40++E317 00 00
  41++E319 1A 08 12 09                          DB $1A, $08, $12, $09, $00, $00
  41++E31D 00 00
  42++E31F 10 0E 04 2B                          DB $10, $0E, $04, $2B, $00, $00
  42++E323 00 00
  43++E325 00 0E 14 6C                          DB $00, $0E, $14, $6C, $99, $99
  43++E329 99 99
  44++E32B 0E 0E 2C CC                          DB $0E, $0E, $2C, $CC, $99, $99
  44++E32F 99 99
  45++E331 0E 0E 2C 4C                          DB $0E, $0E, $2C, $4C, $99, $99
  45++E335 99 99
  46++E337              Fer_De_LanceVertSize:   equ $ - Fer_De_LanceVertices
  47++E337 1F 19 00 04  Fer_De_LanceEdges:	    DB $1F, $19, $00, $04
  48++E33B 1F 29 04 08                          DB $1F, $29, $04, $08
  49++E33F 1F 39 08 0C                          DB $1F, $39, $08, $0C
  50++E343 1F 49 0C 10                          DB $1F, $49, $0C, $10
  51++E347 1F 59 00 10                          DB $1F, $59, $00, $10
  52++E34B 1C 01 00 14                          DB $1C, $01, $00, $14
  53++E34F 1C 26 14 18                          DB $1C, $26, $14, $18
  54++E353 1C 37 18 1C                          DB $1C, $37, $18, $1C
  55++E357 1C 48 1C 20                          DB $1C, $48, $1C, $20
  56++E35B 1C 05 00 20                          DB $1C, $05, $00, $20
  57++E35F 0F 06 14 24                          DB $0F, $06, $14, $24
  58++E363 0B 67 18 24                          DB $0B, $67, $18, $24
  59++E367 0B 78 1C 24                          DB $0B, $78, $1C, $24
  60++E36B 0F 08 20 24                          DB $0F, $08, $20, $24
  61++E36F 0E 12 04 14                          DB $0E, $12, $04, $14
  62++E373 0E 23 08 18                          DB $0E, $23, $08, $18
  63++E377 0E 34 0C 1C                          DB $0E, $34, $0C, $1C
  64++E37B 0E 45 10 20                          DB $0E, $45, $10, $20
  65++E37F 08 00 28 2C                          DB $08, $00, $28, $2C
  66++E383 09 00 2C 30                          DB $09, $00, $2C, $30
  67++E387 0B 00 28 30                          DB $0B, $00, $28, $30
  68++E38B 08 00 34 38                          DB $08, $00, $34, $38
  69++E38F 09 00 38 3C                          DB $09, $00, $38, $3C
  70++E393 0B 00 34 3C                          DB $0B, $00, $34, $3C
  71++E397 0C 99 40 44                          DB $0C, $99, $40, $44
  72++E39B 0C 99 40 48                          DB $0C, $99, $40, $48
  73++E39F 08 99 44 48                          DB $08, $99, $44, $48
  74++E3A3              Fer_De_LanceEdgesSize:  equ $ - Fer_De_LanceEdges
  75++E3A3              Fer_De_LanceEdgesCnt:   equ Fer_De_LanceEdgesSize/4
  76++E3A3 1C 00 18 06  Fer_De_LanceNormals:	DB $1C, $00, $18, $06
  77++E3A7 9F 44 00 18                          DB $9F, $44, $00, $18
  78++E3AB BF 3F 00 25                          DB $BF, $3F, $00, $25
  79++E3AF 3F 00 00 68                          DB $3F, $00, $00, $68
  80++E3B3 3F 3F 00 25                          DB $3F, $3F, $00, $25
  81++E3B7 1F 44 00 18                          DB $1F, $44, $00, $18
  82++E3BB BC 0C 2E 13                          DB $BC, $0C, $2E, $13
  83++E3BF 3C 00 2D 16                          DB $3C, $00, $2D, $16
  84++E3C3 3C 0C 2E 13                          DB $3C, $0C, $2E, $13
  85++E3C7 5F 00 1C 00                          DB $5F, $00, $1C, $00
  86++E3CB              Fer_De_LanceNormalsSize:equ $ - Fer_De_LanceNormals
  87++E3CB              Fer_De_LanceLen:        equ $ - Fer_De_Lance
  88++E3CB
# file closed: ./Data/ships/Fer_De_Lance.asm
  85+ E3CB                                      include "Data/ships/Gecko.asm"
# file opened: ./Data/ships/Gecko.asm
   1++E3CB 00           Gecko:	                DB $00                         ; Number of cargo canisters released when destroyed
   2++E3CC 49 26                                DW $2649                       ; Ship's targetable area LoHi
   3++E3CE 32 E4                                DW GeckoEdges                  ; Edge Data
   4++E3D0 44                                   DB GeckoEdgesSize              ; Size of Edge Data
   5++E3D1 00                                   DB $00                         ; Gun Vertex Byte offset
   6++E3D2 1A                                   DB $1A                         ; Explosion Count
   7++E3D3 0C                                   DB GeckoVertSize /6            ; Vertex Count /6
   8++E3D4 48                                   DB GeckoVertSize               ; Vertex Count
   9++E3D5 11                                   DB GeckoEdgesCnt               ; Edges Count
  10++E3D6 37 00                                DW $0037                       ; Bounty LoHi
  11++E3D8 24                                   DB GeckoNormalsSize            ; Face (Normal) Count
  12++E3D9 12                                   DB $12                         ; Range when it turns to a dot
  13++E3DA 46                                   DB $46                         ; Energy Max
  14++E3DB 1E                                   DB $1E                         ; Speed Max
  15++E3DC 76 E4                                DW GeckoNormals                ; Normals
  16++E3DE 03                                   DB $03                         ; Q scaling
  17++E3DF 10                                   DB $10                         ; Laser power and Nbr Missiles
  18++E3E0 EA E3                                DW GeckoVertices               ; Verticles Address
  19++E3E2 00                                   DB ShipTypeNormal              ; Ship Type
  20++E3E3 00                                   DB 0                           ; NewB Tactics
  21++E3E4 80                                   DB ShipCanAnger                ; AI Flags
  22++E3E5 60                                   DB $60                         ; chance of ECM module
  23++E3E6 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E3E7 00 00                                DW $0000                            ; no solid data
  25++E3E9 00                                   DB $00                              ; no solid data
  26++E3EA
  27++E3EA 0A 04 2F DF  GeckoVertices:	        DB $0A, $04, $2F, $DF, $03, $45
  27++E3EE 03 45
  28++E3F0 0A 04 2F 5F                          DB $0A, $04, $2F, $5F, $01, $23
  28++E3F4 01 23
  29++E3F6 10 08 17 BF                          DB $10, $08, $17, $BF, $05, $67
  29++E3FA 05 67
  30++E3FC 10 08 17 3F                          DB $10, $08, $17, $3F, $01, $78
  30++E400 01 78
  31++E402 42 00 03 BF                          DB $42, $00, $03, $BF, $45, $66
  31++E406 45 66
  32++E408 42 00 03 3F                          DB $42, $00, $03, $3F, $12, $88
  32++E40C 12 88
  33++E40E 14 0E 17 FF                          DB $14, $0E, $17, $FF, $34, $67
  33++E412 34 67
  34++E414 14 0E 17 7F                          DB $14, $0E, $17, $7F, $23, $78
  34++E418 23 78
  35++E41A 08 06 21 D0                          DB $08, $06, $21, $D0, $33, $33
  35++E41E 33 33
  36++E420 08 06 21 51                          DB $08, $06, $21, $51, $33, $33
  36++E424 33 33
  37++E426 08 0D 10 F0                          DB $08, $0D, $10, $F0, $33, $33
  37++E42A 33 33
  38++E42C 08 0D 10 71                          DB $08, $0D, $10, $71, $33, $33
  38++E430 33 33
  39++E432              GeckoVertSize:          equ $ - GeckoVertices
  40++E432 1F 03 00 04  GeckoEdges:	            DB $1F, $03, $00, $04
  41++E436 1F 12 04 14                          DB $1F, $12, $04, $14
  42++E43A 1F 18 14 0C                          DB $1F, $18, $14, $0C
  43++E43E 1F 07 0C 08                          DB $1F, $07, $0C, $08
  44++E442 1F 56 08 10                          DB $1F, $56, $08, $10
  45++E446 1F 45 10 00                          DB $1F, $45, $10, $00
  46++E44A 1F 28 14 1C                          DB $1F, $28, $14, $1C
  47++E44E 1F 37 1C 18                          DB $1F, $37, $1C, $18
  48++E452 1F 46 18 10                          DB $1F, $46, $18, $10
  49++E456 1D 05 00 08                          DB $1D, $05, $00, $08
  50++E45A 1E 01 04 0C                          DB $1E, $01, $04, $0C
  51++E45E 1D 34 00 18                          DB $1D, $34, $00, $18
  52++E462 1E 23 04 1C                          DB $1E, $23, $04, $1C
  53++E466 14 67 08 18                          DB $14, $67, $08, $18
  54++E46A 14 78 0C 1C                          DB $14, $78, $0C, $1C
  55++E46E 10 33 20 28                          DB $10, $33, $20, $28
  56++E472 11 33 24 2C                          DB $11, $33, $24, $2C
  57++E476              GeckoEdgesSize:             equ $ - GeckoEdges
  58++E476              GeckoEdgesCnt:          equ GeckoEdgesSize/4
  59++E476 1F 00 1F 05  GeckoNormals:	        DB $1F, $00, $1F, $05
  60++E47A 1F 04 2D 08                          DB $1F, $04, $2D, $08
  61++E47E 5F 19 6C 13                          DB $5F, $19, $6C, $13
  62++E482 5F 00 54 0C                          DB $5F, $00, $54, $0C
  63++E486 DF 19 6C 13                          DB $DF, $19, $6C, $13
  64++E48A 9F 04 2D 08                          DB $9F, $04, $2D, $08
  65++E48E BF 58 10 D6                          DB $BF, $58, $10, $D6
  66++E492 3F 00 00 BB                          DB $3F, $00, $00, $BB
  67++E496 3F 58 10 D6                          DB $3F, $58, $10, $D6
  68++E49A              GeckoNormalsSize:       equ $ - GeckoNormals
  69++E49A              GeckoLen:               equ $ - Gecko
  70++E49A
# file closed: ./Data/ships/Gecko.asm
  86+ E49A                                      include "Data/ships/Ghavial.asm"
# file opened: ./Data/ships/Ghavial.asm
   1++E49A 03           Ghavial:	            DB $03                      ; Number of cargo canisters released when destroyed
   2++E49B 00 26                                DW $2600                    ; Ship's targetable area LoHi
   3++E49D 01 E5                                DW GhavialEdges             ; Edge Data
   4++E49F 58                                   DB GhavialEdgesSize         ; Size of Edge Data
   5++E4A0 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E4A1 22                                   DB $22                      ; Explosion Count
   7++E4A2 0C                                   DB GhavialVertSize /6       ; Vertex Count /6
   8++E4A3 48                                   DB GhavialVertSize          ; Vertex Count
   9++E4A4 16                                   DB GhavialEdgesCnt          ; Edges Count
  10++E4A5 64 00                                DW $0064                    ; Bounty LoHi
  11++E4A7 30                                   DB GhavialNormalsSize       ; Face (Normal) Count
  12++E4A8 0A                                   DB $0A                      ; Range when it turns to a dot
  13++E4A9 72                                   DB $72                      ; Energy Max
  14++E4AA 10                                   DB $10                      ; Speed Max
  15++E4AB 59 E5                                DW GhavialNormals           ; Normals
  16++E4AD 00                                   DB $00                      ; Q scaling
  17++E4AE 27                                   DB $27                      ; Laser power and Nbr Missiles
  18++E4AF B9 E4                                DW GhavialVertices          ; Verticles Address
  19++E4B1 00                                   DB ShipTypeNormal           ; Ship Type
  20++E4B2 00                                   DB 0                        ; NewB Tactics
  21++E4B3 80                                   DB ShipCanAnger             ; AI Flags
  22++E4B4 60                                   DB $60                      ; chance of ECM module
  23++E4B5 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E4B6 00 00                                DW $0000                            ; no solid data
  25++E4B8 00                                   DB $00                              ; no solid data
  26++E4B9
  27++E4B9 1E 00 64 1F  GhavialVertices:	DB $1E, $00, $64, $1F, $67, $01
  27++E4BD 67 01
  28++E4BF 1E 00 64 9F                      DB $1E, $00, $64, $9F, $6B, $05
  28++E4C3 6B 05
  29++E4C5 28 1E 1A 3F                      DB $28, $1E, $1A, $3F, $23, $01
  29++E4C9 23 01
  30++E4CB 28 1E 1A BF                      DB $28, $1E, $1A, $BF, $45, $03
  30++E4CF 45 03
  31++E4D1 3C 00 14 3F                      DB $3C, $00, $14, $3F, $78, $12
  31++E4D5 78 12
  32++E4D7 28 00 3C 3F                      DB $28, $00, $3C, $3F, $89, $23
  32++E4DB 89 23
  33++E4DD 3C 00 14 BF                      DB $3C, $00, $14, $BF, $AB, $45
  33++E4E1 AB 45
  34++E4E3 28 00 3C BF                      DB $28, $00, $3C, $BF, $9A, $34
  34++E4E7 9A 34
  35++E4E9 00 1E 14 7F                      DB $00, $1E, $14, $7F, $FF, $FF
  35++E4ED FF FF
  36++E4EF 0A 18 00 09                      DB $0A, $18, $00, $09, $00, $00
  36++E4F3 00 00
  37++E4F5 0A 18 00 89                      DB $0A, $18, $00, $89, $00, $00
  37++E4F9 00 00
  38++E4FB 00 16 0A 09                      DB $00, $16, $0A, $09, $00, $00
  38++E4FF 00 00
  39++E501
  40++E501              GhavialVertSize: equ $ - GhavialVertices
  41++E501
  42++E501
  43++E501 1F 01 00 08  GhavialEdges:	DB $1F, $01, $00, $08
  44++E505 1F 12 10 08                  DB $1F, $12, $10, $08
  45++E509 1F 23 14 08                  DB $1F, $23, $14, $08
  46++E50D 1F 30 0C 08                  DB $1F, $30, $0C, $08
  47++E511 1F 34 1C 0C                  DB $1F, $34, $1C, $0C
  48++E515 1F 45 18 0C                  DB $1F, $45, $18, $0C
  49++E519 1F 50 0C 04                  DB $1F, $50, $0C, $04
  50++E51D 1F 67 00 20                  DB $1F, $67, $00, $20
  51++E521 1F 78 10 20                  DB $1F, $78, $10, $20
  52++E525 1F 89 14 20                  DB $1F, $89, $14, $20
  53++E529 1F 9A 1C 20                  DB $1F, $9A, $1C, $20
  54++E52D 1F AB 18 20                  DB $1F, $AB, $18, $20
  55++E531 1F B6 04 20                  DB $1F, $B6, $04, $20
  56++E535 1F 06 04 00                  DB $1F, $06, $04, $00
  57++E539 1F 17 00 10                  DB $1F, $17, $00, $10
  58++E53D 1F 28 10 14                  DB $1F, $28, $10, $14
  59++E541 1F 39 14 1C                  DB $1F, $39, $14, $1C
  60++E545 1F 4A 1C 18                  DB $1F, $4A, $1C, $18
  61++E549 1F 5B 18 04                  DB $1F, $5B, $18, $04
  62++E54D 09 00 24 28                  DB $09, $00, $24, $28
  63++E551 09 00 28 2C                  DB $09, $00, $28, $2C
  64++E555 09 00 2C 24                  DB $09, $00, $2C, $24
  65++E559
  66++E559              GhavialEdgesSize: equ $ - GhavialEdges
  67++E559
  68++E559
  69++E559              GhavialEdgesCnt: equ GhavialEdgesSize/4
  70++E559
  71++E559
  72++E559 1F 00 3E 0E  GhavialNormals:	DB $1F, $00, $3E, $0E
  73++E55D 1F 33 24 0C                  DB $1F, $33, $24, $0C
  74++E561 3F 33 1C 19                  DB $3F, $33, $1C, $19
  75++E565 3F 00 30 2A                  DB $3F, $00, $30, $2A
  76++E569 BF 33 1C 19                  DB $BF, $33, $1C, $19
  77++E56D 9F 33 24 0C                  DB $9F, $33, $24, $0C
  78++E571 5F 00 3E 0F                  DB $5F, $00, $3E, $0F
  79++E575 5F 1C 38 07                  DB $5F, $1C, $38, $07
  80++E579 7F 1B 37 0D                  DB $7F, $1B, $37, $0D
  81++E57D 7F 00 33 26                  DB $7F, $00, $33, $26
  82++E581 FF 1B 37 0D                  DB $FF, $1B, $37, $0D
  83++E585 DF 1C 38 07                  DB $DF, $1C, $38, $07
  84++E589
  85++E589              GhavialNormalsSize: equ $ - GhavialNormals
  86++E589              GhavialLen: equ $ - Ghavial
  87++E589
# file closed: ./Data/ships/Ghavial.asm
  87+ E589                                      include "Data/ships/Iguana.asm"
# file opened: ./Data/ships/Iguana.asm
   1++E589 01           Iguana:	                DB $01                      ; Number of cargo canisters released when destroyed
   2++E58A AC 0D                                DW $0DAC                    ; Ship's targetable area LoHi
   3++E58C 02 E6                                DW IguanaEdges              ; Edge Data
   4++E58E 5C                                   DB IguanaEdgesSize          ; Size of Edge Data
   5++E58F 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E590 1A                                   DB $1A                      ; Explosion Count
   7++E591 0F                                   DB IguanaVertSize /6        ; Vertex Count /6
   8++E592 5A                                   DB IguanaVertSize           ; Vertex Count
   9++E593 17                                   DB IguanaEdgesCnt           ; Edges Count
  10++E594 96 00                                DW $0096                    ; Bounty LoHi
  11++E596 28                                   DB IguanaNormalsSize        ; Face (Normal) Count
  12++E597 0A                                   DB $0A                      ; Range when it turns to a dot
  13++E598 5A                                   DB $5A                      ; Energy Max
  14++E599 21                                   DB $21                      ; Speed Max
  15++E59A 5E E6                                DW IguanaNormals            ; Normals
  16++E59C 01                                   DB $01                      ; Q scaling
  17++E59D 23                                   DB $20 | ShipMissiles3      ; Laser power and Nbr Missiles
  18++E59E A8 E5                                DW IguanaVertices           ; Verticles Address
  19++E5A0 00                                   DB ShipTypeNormal           ; Ship Type
  20++E5A1 00                                   DB 0                        ; NewB Tactics
  21++E5A2 80                                   DB ShipCanAnger             ; AI Flags
  22++E5A3 80                                   DB $80                      ; chance of ECM module
  23++E5A4 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E5A5 00 00                                DW $0000                            ; no solid data
  25++E5A7 00                                   DB $00                              ; no solid data
  26++E5A8
  27++E5A8
  28++E5A8 00 00 5A 1F  IguanaVertices:	DB $00, $00, $5A, $1F, $23, $01
  28++E5AC 23 01
  29++E5AE 00 14 1E 1F                  DB $00, $14, $1E, $1F, $46, $02
  29++E5B2 46 02
  30++E5B4 28 00 0A 9F                  DB $28, $00, $0A, $9F, $45, $01
  30++E5B8 45 01
  31++E5BA 00 14 1E 5F                  DB $00, $14, $1E, $5F, $57, $13
  31++E5BE 57 13
  32++E5C0 28 00 0A 1F                  DB $28, $00, $0A, $1F, $67, $23
  32++E5C4 67 23
  33++E5C6 00 14 28 3F                  DB $00, $14, $28, $3F, $89, $46
  33++E5CA 89 46
  34++E5CC 28 00 1E BF                  DB $28, $00, $1E, $BF, $88, $45
  34++E5D0 88 45
  35++E5D2 00 14 28 7F                  DB $00, $14, $28, $7F, $89, $57
  35++E5D6 89 57
  36++E5D8 28 00 1E 3F                  DB $28, $00, $1E, $3F, $99, $67
  36++E5DC 99 67
  37++E5DE 28 00 28 9E                  DB $28, $00, $28, $9E, $11, $00
  37++E5E2 11 00
  38++E5E4 28 00 28 1E                  DB $28, $00, $28, $1E, $33, $22
  38++E5E8 33 22
  39++E5EA 00 08 28 2A                  DB $00, $08, $28, $2A, $99, $88
  39++E5EE 99 88
  40++E5F0 10 00 24 AA                  DB $10, $00, $24, $AA, $88, $88
  40++E5F4 88 88
  41++E5F6 00 08 28 6A                  DB $00, $08, $28, $6A, $99, $88
  41++E5FA 99 88
  42++E5FC 10 00 24 2A                  DB $10, $00, $24, $2A, $99, $99
  42++E600 99 99
  43++E602
  44++E602              IguanaVertSize: equ $ - IguanaVertices
  45++E602
  46++E602
  47++E602
  48++E602 1F 02 00 04  IguanaEdges:	DB $1F, $02, $00, $04
  49++E606 1F 01 00 08                  DB $1F, $01, $00, $08
  50++E60A 1F 13 00 0C                  DB $1F, $13, $00, $0C
  51++E60E 1F 23 00 10                  DB $1F, $23, $00, $10
  52++E612 1F 46 04 14                  DB $1F, $46, $04, $14
  53++E616 1F 45 08 18                  DB $1F, $45, $08, $18
  54++E61A 1F 57 0C 1C                  DB $1F, $57, $0C, $1C
  55++E61E 1F 67 10 20                  DB $1F, $67, $10, $20
  56++E622 1F 48 14 18                  DB $1F, $48, $14, $18
  57++E626 1F 58 18 1C                  DB $1F, $58, $18, $1C
  58++E62A 1F 69 14 20                  DB $1F, $69, $14, $20
  59++E62E 1F 79 1C 20                  DB $1F, $79, $1C, $20
  60++E632 1F 04 04 08                  DB $1F, $04, $04, $08
  61++E636 1F 15 08 0C                  DB $1F, $15, $08, $0C
  62++E63A 1F 26 04 10                  DB $1F, $26, $04, $10
  63++E63E 1F 37 0C 10                  DB $1F, $37, $0C, $10
  64++E642 1F 89 14 1C                  DB $1F, $89, $14, $1C
  65++E646 1E 01 08 24                  DB $1E, $01, $08, $24
  66++E64A 1E 23 10 28                  DB $1E, $23, $10, $28
  67++E64E 0A 88 2C 30                  DB $0A, $88, $2C, $30
  68++E652 0A 88 34 30                  DB $0A, $88, $34, $30
  69++E656 0A 99 2C 38                  DB $0A, $99, $2C, $38
  70++E65A 0A 99 34 38                  DB $0A, $99, $34, $38
  71++E65E
  72++E65E              IguanaEdgesSize: equ $ - IguanaEdges
  73++E65E
  74++E65E
  75++E65E              IguanaEdgesCnt: equ IguanaEdgesSize/4
  76++E65E
  77++E65E
  78++E65E 9F 33 4D 19  IguanaNormals:	DB $9F, $33, $4D, $19
  79++E662 DF 33 4D 19  	DB $DF, $33, $4D, $19
  80++E666 1F 33 4D 19  	DB $1F, $33, $4D, $19
  81++E66A 5F 33 4D 19  	DB $5F, $33, $4D, $19
  82++E66E 9F 2A 55 00  	DB $9F, $2A, $55, $00
  83++E672 DF 2A 55 00  	DB $DF, $2A, $55, $00
  84++E676 1F 2A 55 00  	DB $1F, $2A, $55, $00
  85++E67A 5F 2A 55 00  	DB $5F, $2A, $55, $00
  86++E67E BF 17 00 5D  	DB $BF, $17, $00, $5D
  87++E682 3F 17 00 5D  	DB $3F, $17, $00, $5D
  88++E686
  89++E686
  90++E686              IguanaNormalsSize: equ $ - IguanaNormals
  91++E686              IguanaLen: equ $ - Iguana
  92++E686
# file closed: ./Data/ships/Iguana.asm
  88+ E686                                      include "Data/ships/Krait.asm"
# file opened: ./Data/ships/Krait.asm
   1++E686
   2++E686 01           Krait:                  DB $01                         ; Number of cargo canisters released when destroyed
   3++E687 0E 10                                DW $100E                       ; Ship's targetable area LoHi
   4++E689 0B E7                                DW KraitEdges                  ; Edge Data
   5++E68B 54                                   DB KraitEdgesSize              ; Size of Edge Data
   6++E68C 00                                   DB $00                         ; Gun Vertex Byte offset
   7++E68D 12                                   DB $12                         ; Explosion Count
   8++E68E 11                                   DB KraitVertSize /6            ; Vertex Count /6
   9++E68F 66                                   DB KraitVertSize               ; Vertex Count
  10++E690 15                                   DB KraitEdgesCnt               ; Edges Count
  11++E691 64 00                                DW $0064                       ; Bounty LoHi
  12++E693 18                                   DB KraitNormalsSize            ; Face (Normal) Count
  13++E694 14                                   DB $14                         ; Range when it turns to a dot
  14++E695 50                                   DB $50                         ; Energy Max
  15++E696 1E                                   DB $1E                         ; Speed Max
  16++E697 5F E7                                DW KraitNormals                ; Normals
  17++E699 02                                   DB $02                         ; Q scaling
  18++E69A 14                                   DB $10 | ShipMissiles4         ; Laser power and Nbr Missiles
  19++E69B A5 E6                                DW KraitVertices               ; Verticles Address
  20++E69D 00                                   DB ShipTypeNormal              ; Ship Type
  21++E69E 00                                   DB 0                           ; NewB Tactics
  22++E69F 80                                   DB ShipCanAnger                ; AI Flags
  23++E6A0 D0                                   DB $D0                         ; chance of ECM module
  24++E6A1 FF                                   DB $FF                              ; Supports Solid Fill = false
  25++E6A2 00 00                                DW $0000                            ; no solid data
  26++E6A4 00                                   DB $00                              ; no solid data
  27++E6A5
  28++E6A5 00 00 60 1F  KraitVertices:          DB $00, $00, $60, $1F, $01, $23
  28++E6A9 01 23
  29++E6AB 00 12 30 3F                          DB $00, $12, $30, $3F, $03, $45
  29++E6AF 03 45
  30++E6B1 00 12 30 7F                          DB $00, $12, $30, $7F, $12, $45
  30++E6B5 12 45
  31++E6B7 5A 00 03 3F                          DB $5A, $00, $03, $3F, $01, $44
  31++E6BB 01 44
  32++E6BD 5A 00 03 BF                          DB $5A, $00, $03, $BF, $23, $55
  32++E6C1 23 55
  33++E6C3 5A 00 57 1C                          DB $5A, $00, $57, $1C, $01, $11
  33++E6C7 01 11
  34++E6C9 5A 00 57 9C                          DB $5A, $00, $57, $9C, $23, $33
  34++E6CD 23 33
  35++E6CF 00 05 35 09                          DB $00, $05, $35, $09, $00, $33
  35++E6D3 00 33
  36++E6D5 00 07 26 06                          DB $00, $07, $26, $06, $00, $33
  36++E6D9 00 33
  37++E6DB 12 07 13 89                          DB $12, $07, $13, $89, $33, $33
  37++E6DF 33 33
  38++E6E1 12 07 13 09                          DB $12, $07, $13, $09, $00, $00
  38++E6E5 00 00
  39++E6E7 12 0B 27 28                          DB $12, $0B, $27, $28, $44, $44
  39++E6EB 44 44
  40++E6ED 12 0B 27 68                          DB $12, $0B, $27, $68, $44, $44
  40++E6F1 44 44
  41++E6F3 24 00 1E 28                          DB $24, $00, $1E, $28, $44, $44
  41++E6F7 44 44
  42++E6F9 12 0B 27 A8                          DB $12, $0B, $27, $A8, $55, $55
  42++E6FD 55 55
  43++E6FF 12 0B 27 E8                          DB $12, $0B, $27, $E8, $55, $55
  43++E703 55 55
  44++E705 24 00 1E A8                          DB $24, $00, $1E, $A8, $55, $55
  44++E709 55 55
  45++E70B              KraitVertSize           equ $  - KraitVertices
  46++E70B 1F 03 00 04  KraitEdges:             DB $1F, $03, $00, $04, $1F, $12, $00, $08
  46++E70F 1F 12 00 08
  47++E713 1F 01 00 0C                          DB $1F, $01, $00, $0C, $1F, $23, $00, $10
  47++E717 1F 23 00 10
  48++E71B 1F 35 04 10                          DB $1F, $35, $04, $10, $1F, $25, $10, $08
  48++E71F 1F 25 10 08
  49++E723 1F 14 08 0C                          DB $1F, $14, $08, $0C, $1F, $04, $0C, $04
  49++E727 1F 04 0C 04
  50++E72B 1C 01 0C 14                          DB $1C, $01, $0C, $14, $1C, $23, $10, $18
  50++E72F 1C 23 10 18
  51++E733 05 45 04 08                          DB $05, $45, $04, $08, $09, $00, $1C, $28
  51++E737 09 00 1C 28
  52++E73B 06 00 20 28                          DB $06, $00, $20, $28, $09, $33, $1C, $24
  52++E73F 09 33 1C 24
  53++E743 06 33 20 24                          DB $06, $33, $20, $24, $08, $44, $2C, $34
  53++E747 08 44 2C 34
  54++E74B 08 44 34 30                          DB $08, $44, $34, $30, $07, $44, $30, $2C
  54++E74F 07 44 30 2C
  55++E753 07 55 38 3C                          DB $07, $55, $38, $3C, $08, $55, $3C, $40
  55++E757 08 55 3C 40
  56++E75B 08 55 40 38                          DB $08, $55, $40, $38
  57++E75F              KraitEdgesSize          equ $  - KraitEdges
  58++E75F              KraitEdgesCnt           equ KraitEdgesSize/4
  59++E75F 1F 07 30 06  KraitNormals            DB $1F, $07, $30, $06
  60++E763 5F 07 30 06                          DB $5F, $07, $30, $06, $DF, $07, $30, $06
  60++E767 DF 07 30 06
  61++E76B 9F 07 30 06                          DB $9F, $07, $30, $06, $3F, $4D, $00, $9A
  61++E76F 3F 4D 00 9A
  62++E773 BF 4D 00 9A                          DB $BF, $4D, $00, $9A
  63++E777              KraitNormalsSize        equ $  - KraitNormals
  64++E777              KraitLen                equ $  - Krait
  65++E777
# file closed: ./Data/ships/Krait.asm
  89+ E777                                      include "Data/ships/Logo.asm"
# file opened: ./Data/ships/Logo.asm
   1++E777 00           Logo:	                DB $00                    ; Number of cargo canisters released when destroyed
   2++E778 49 26                                DW $2649                  ; Ship's targetable area LoHi
   3++E77A 92 E8                                DW LogoEdges              ; Edge Data
   4++E77C 94                                   DB LogoEdgesSize          ; Size of Edge Data
   5++E77D 00                                   DB $00                    ; Gun Vertex Byte offset
   6++E77E 36                                   DB $36                    ; Explosion Count
   7++E77F 2A                                   DB LogoVertSize /6        ; Vertex Count /6
   8++E780 FC                                   DB LogoVertSize           ; Vertex Count
   9++E781 25                                   DB LogoEdgesCnt           ; Edges Count
  10++E782 00 00                                DW $0000                  ; Bounty LoHi
  11++E784 14                                   DB LogoNormalsSize        ; Face (Normal) Count
  12++E785 63                                   DB $63                    ; Range when it turns to a dot
  13++E786 FC                                   DB $FC                    ; Energy Max
  14++E787 24                                   DB $24                    ; Speed Max
  15++E788 26 E9                                DW LogoNormals            ; Normals
  16++E78A 01                                   DB $01                    ; Q scaling
  17++E78B 00                                   DB $00                    ; Laser power and Nbr Missiles
  18++E78C 96 E7                                DW LogoVertices           ; Verticles Address
  19++E78E FD                                   DB ShipTypeText           ; Ship Type
  20++E78F 00                                   DB 0                      ; NewB Tactics
  21++E790 00                                   DB 0                      ; AI Flags
  22++E791 FF                                   DB $FF                    ; chance of ECM module
  23++E792 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E793 00 00                                DW $0000                            ; no solid data
  25++E795 00                                   DB $00                              ; no solid data
  26++E796
  27++E796
  28++E796 00 09 37 5F  LogoVertices:	DB $00, $09, $37, $5F, $00, $00
  28++E79A 00 00
  29++E79C 0A 09 1E DF  	DB $0A, $09, $1E, $DF, $00, $00
  29++E7A0 00 00
  30++E7A2 19 09 5D DF  	DB $19, $09, $5D, $DF, $00, $00
  30++E7A6 00 00
  31++E7A8 96 09 B4 DF  	DB $96, $09, $B4, $DF, $00, $00
  31++E7AC 00 00
  32++E7AE 5A 09 0A DF  	DB $5A, $09, $0A, $DF, $00, $00
  32++E7B2 00 00
  33++E7B4 8C 09 0A DF  	DB $8C, $09, $0A, $DF, $00, $00
  33++E7B8 00 00
  34++E7BA 00 09 5F 7F  	DB $00, $09, $5F, $7F, $00, $00
  34++E7BE 00 00
  35++E7C0 8C 09 0A 5F  	DB $8C, $09, $0A, $5F, $00, $00
  35++E7C4 00 00
  36++E7C6 5A 09 0A 5F  	DB $5A, $09, $0A, $5F, $00, $00
  36++E7CA 00 00
  37++E7CC 96 09 B4 5F  	DB $96, $09, $B4, $5F, $00, $00
  37++E7D0 00 00
  38++E7D2 19 09 5D 5F  	DB $19, $09, $5D, $5F, $00, $00
  38++E7D6 00 00
  39++E7D8 0A 09 1E 5F  	DB $0A, $09, $1E, $5F, $00, $00
  39++E7DC 00 00
  40++E7DE 55 09 1E FF  	DB $55, $09, $1E, $FF, $02, $33
  40++E7E2 02 33
  41++E7E4 55 09 1E 7F  	DB $55, $09, $1E, $7F, $02, $44
  41++E7E8 02 44
  42++E7EA 46 0B 05 9F  	DB $46, $0B, $05, $9F, $01, $33
  42++E7EE 01 33
  43++E7F0 46 0B 19 BF  	DB $46, $0B, $19, $BF, $02, $33
  43++E7F4 02 33
  44++E7F6 46 0B 19 3F  	DB $46, $0B, $19, $3F, $02, $44
  44++E7FA 02 44
  45++E7FC 46 0B 05 1F  	DB $46, $0B, $05, $1F, $01, $44
  45++E800 01 44
  46++E802 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  46++E806 00 00
  47++E808 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  47++E80C 00 00
  48++E80E 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  48++E812 00 00
  49++E814 1C 0B 02 BF  	DB $1C, $0B, $02, $BF, $00, $00
  49++E818 00 00
  50++E81A 31 0B 02 BF  	DB $31, $0B, $02, $BF, $00, $00
  50++E81E 00 00
  51++E820 31 0B 0A BF  	DB $31, $0B, $0A, $BF, $00, $00
  51++E824 00 00
  52++E826 31 0B 11 BF  	DB $31, $0B, $11, $BF, $00, $00
  52++E82A 00 00
  53++E82C 1C 0B 11 BF  	DB $1C, $0B, $11, $BF, $00, $00
  53++E830 00 00
  54++E832 1C 0B 0A BF  	DB $1C, $0B, $0A, $BF, $00, $00
  54++E836 00 00
  55++E838 18 0B 02 BF  	DB $18, $0B, $02, $BF, $00, $00
  55++E83C 00 00
  56++E83E 18 0B 11 BF  	DB $18, $0B, $11, $BF, $00, $00
  56++E842 00 00
  57++E844 03 0B 11 BF  	DB $03, $0B, $11, $BF, $00, $00
  57++E848 00 00
  58++E84A 00 0B 02 3F  	DB $00, $0B, $02, $3F, $00, $00
  58++E84E 00 00
  59++E850 00 0B 11 3F  	DB $00, $0B, $11, $3F, $00, $00
  59++E854 00 00
  60++E856 04 0B 02 3F  	DB $04, $0B, $02, $3F, $00, $00
  60++E85A 00 00
  61++E85C 19 0B 02 3F  	DB $19, $0B, $02, $3F, $00, $00
  61++E860 00 00
  62++E862 0E 0B 02 3F  	DB $0E, $0B, $02, $3F, $00, $00
  62++E866 00 00
  63++E868 0E 0B 11 3F  	DB $0E, $0B, $11, $3F, $00, $00
  63++E86C 00 00
  64++E86E 31 0B 02 3F  	DB $31, $0B, $02, $3F, $00, $00
  64++E872 00 00
  65++E874 1C 0B 02 3F  	DB $1C, $0B, $02, $3F, $00, $00
  65++E878 00 00
  66++E87A 1C 0B 0A 3F  	DB $1C, $0B, $0A, $3F, $00, $00
  66++E87E 00 00
  67++E880 1C 0B 11 3F  	DB $1C, $0B, $11, $3F, $00, $00
  67++E884 00 00
  68++E886 31 0B 11 3F  	DB $31, $0B, $11, $3F, $00, $00
  68++E88A 00 00
  69++E88C 31 0B 0A 3F  	DB $31, $0B, $0A, $3F, $00, $00
  69++E890 00 00
  70++E892
  71++E892              LogoVertSize: equ $ - LogoVertices
  72++E892
  73++E892
  74++E892
  75++E892 1F 00 00 04  LogoEdges:	DB $1F, $00, $00, $04
  76++E896 1F 00 04 08  	DB $1F, $00, $04, $08
  77++E89A 1F 00 08 0C  	DB $1F, $00, $08, $0C
  78++E89E 1F 00 0C 10  	DB $1F, $00, $0C, $10
  79++E8A2 1F 00 10 14  	DB $1F, $00, $10, $14
  80++E8A6 1F 00 14 18  	DB $1F, $00, $14, $18
  81++E8AA 1F 00 18 1C  	DB $1F, $00, $18, $1C
  82++E8AE 1F 00 1C 20  	DB $1F, $00, $1C, $20
  83++E8B2 1F 00 20 24  	DB $1F, $00, $20, $24
  84++E8B6 1F 00 24 28  	DB $1F, $00, $24, $28
  85++E8BA 1F 00 28 2C  	DB $1F, $00, $28, $2C
  86++E8BE 1F 00 2C 00  	DB $1F, $00, $2C, $00
  87++E8C2 1E 03 38 3C  	DB $1E, $03, $38, $3C
  88++E8C6 1E 01 3C 40  	DB $1E, $01, $3C, $40
  89++E8CA 1E 04 40 44  	DB $1E, $04, $40, $44
  90++E8CE 1E 01 44 38  	DB $1E, $01, $44, $38
  91++E8D2 1E 03 10 30  	DB $1E, $03, $10, $30
  92++E8D6 1E 22 30 34  	DB $1E, $22, $30, $34
  93++E8DA 1E 04 34 20  	DB $1E, $04, $34, $20
  94++E8DE 1E 11 20 10  	DB $1E, $11, $20, $10
  95++E8E2 1E 13 10 38  	DB $1E, $13, $10, $38
  96++E8E6 1E 13 30 3C  	DB $1E, $13, $30, $3C
  97++E8EA 1E 24 34 40  	DB $1E, $24, $34, $40
  98++E8EE 1E 14 20 44  	DB $1E, $14, $20, $44
  99++E8F2 1E 00 54 58  	DB $1E, $00, $54, $58
 100++E8F6 1E 00 58 60  	DB $1E, $00, $58, $60
 101++E8FA 1E 00 60 64  	DB $1E, $00, $60, $64
 102++E8FE 1E 00 5C 68  	DB $1E, $00, $5C, $68
 103++E902 1E 00 6C 70  	DB $1E, $00, $6C, $70
 104++E906 1E 00 70 74  	DB $1E, $00, $70, $74
 105++E90A 1E 00 78 7C  	DB $1E, $00, $78, $7C
 106++E90E 1E 00 80 84  	DB $1E, $00, $80, $84
 107++E912 1E 00 88 8C  	DB $1E, $00, $88, $8C
 108++E916 1E 00 90 94  	DB $1E, $00, $90, $94
 109++E91A 1E 00 94 9C  	DB $1E, $00, $94, $9C
 110++E91E 1E 00 9C A0  	DB $1E, $00, $9C, $A0
 111++E922 1E 00 A4 98  	DB $1E, $00, $A4, $98
 112++E926
 113++E926              LogoEdgesSize: equ $ - LogoEdges
 114++E926
 115++E926
 116++E926              LogoEdgesCnt: equ LogoEdgesSize/4
 117++E926
 118++E926
 119++E926 1F 00 17 00  LogoNormals:	DB $1F, $00, $17, $00
 120++E92A 1F 00 04 0F  	DB $1F, $00, $04, $0F
 121++E92E 3F 00 0D 34  	DB $3F, $00, $0D, $34
 122++E932 9F 51 51 00  	DB $9F, $51, $51, $00
 123++E936 1F 51 51 00  	DB $1F, $51, $51, $00
 124++E93A
 125++E93A
 126++E93A              LogoNormalsSize: equ $ - LogoNormals
 127++E93A              LogoLen: equ $ - Logo
 128++E93A
# file closed: ./Data/ships/Logo.asm
  90+ E93A                                      include "Data/ships/Mamba.asm"
# file opened: ./Data/ships/Mamba.asm
   1++E93A 01           Mamba:	                DB $01                     ; Number of cargo canisters released when destroyed
   2++E93B 24 13                                DW $1324                   ; Ship's targetable area LoHi
   3++E93D EF E9                                DW MambaEdges              ; Edge Data
   4++E93F 70                                   DB MambaEdgesSize          ; Size of Edge Data
   5++E940 00                                   DB $00                     ; Gun Vertex Byte offset
   6++E941 22                                   DB $22                     ; Explosion Count
   7++E942 19                                   DB MambaVertSize /6        ; Vertex Count /6
   8++E943 96                                   DB MambaVertSize           ; Vertex Count
   9++E944 1C                                   DB MambaEdgesCnt           ; Edges Count
  10++E945 96 00                                DW $0096                   ; Bounty LoHi
  11++E947 14                                   DB MambaNormalsSize        ; Face (Normal) Count
  12++E948 19                                   DB $19                     ; Range when it turns to a dot
  13++E949 5A                                   DB $5A                     ; Energy Max
  14++E94A 1E                                   DB $1E                     ; Speed Max
  15++E94B 5F EA                                DW MambaNormals            ; Normals
  16++E94D 02                                   DB $02                     ; Q scaling
  17++E94E 12                                   DB $12 | ShipMissiles2     ; Laser power and Nbr Missiles
  18++E94F 59 E9                                DW MambaVertices           ; Verticles Address
  19++E951 00                                   DB ShipTypeNormal          ; Ship Type
  20++E952 00                                   DB 0                       ; NewB Tactics
  21++E953 80                                   DB ShipCanAnger            ; AI Flags
  22++E954 E0                                   DB $E0                     ; chance of ECM module
  23++E955 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E956 00 00                                DW $0000                            ; no solid data
  25++E958 00                                   DB $00                              ; no solid data
  26++E959
  27++E959
  28++E959 00 00 40 1F  MambaVertices:	DB $00, $00, $40, $1F, $10, $32
  28++E95D 10 32
  29++E95F 40 08 20 FF                  DB $40, $08, $20, $FF, $20, $44
  29++E963 20 44
  30++E965 20 08 20 BE                  DB $20, $08, $20, $BE, $21, $44
  30++E969 21 44
  31++E96B 20 08 20 3E                  DB $20, $08, $20, $3E, $31, $44
  31++E96F 31 44
  32++E971 40 08 20 7F                  DB $40, $08, $20, $7F, $30, $44
  32++E975 30 44
  33++E977 04 04 10 8E                  DB $04, $04, $10, $8E, $11, $11
  33++E97B 11 11
  34++E97D 04 04 10 0E                  DB $04, $04, $10, $0E, $11, $11
  34++E981 11 11
  35++E983 08 03 1C 0D                  DB $08, $03, $1C, $0D, $11, $11
  35++E987 11 11
  36++E989 08 03 1C 8D                  DB $08, $03, $1C, $8D, $11, $11
  36++E98D 11 11
  37++E98F 14 04 10 D4                  DB $14, $04, $10, $D4, $00, $00
  37++E993 00 00
  38++E995 14 04 10 54                  DB $14, $04, $10, $54, $00, $00
  38++E999 00 00
  39++E99B 18 07 14 F4                  DB $18, $07, $14, $F4, $00, $00
  39++E99F 00 00
  40++E9A1 10 07 14 F0                  DB $10, $07, $14, $F0, $00, $00
  40++E9A5 00 00
  41++E9A7 10 07 14 70                  DB $10, $07, $14, $70, $00, $00
  41++E9AB 00 00
  42++E9AD 18 07 14 74                  DB $18, $07, $14, $74, $00, $00
  42++E9B1 00 00
  43++E9B3 08 04 20 AD                  DB $08, $04, $20, $AD, $44, $44
  43++E9B7 44 44
  44++E9B9 08 04 20 2D                  DB $08, $04, $20, $2D, $44, $44
  44++E9BD 44 44
  45++E9BF 08 04 20 6E                  DB $08, $04, $20, $6E, $44, $44
  45++E9C3 44 44
  46++E9C5 08 04 20 EE                  DB $08, $04, $20, $EE, $44, $44
  46++E9C9 44 44
  47++E9CB 20 04 20 A7                  DB $20, $04, $20, $A7, $44, $44
  47++E9CF 44 44
  48++E9D1 20 04 20 27                  DB $20, $04, $20, $27, $44, $44
  48++E9D5 44 44
  49++E9D7 24 04 20 67                  DB $24, $04, $20, $67, $44, $44
  49++E9DB 44 44
  50++E9DD 24 04 20 E7                  DB $24, $04, $20, $E7, $44, $44
  50++E9E1 44 44
  51++E9E3 26 00 20 A5                  DB $26, $00, $20, $A5, $44, $44
  51++E9E7 44 44
  52++E9E9 26 00 20 25                  DB $26, $00, $20, $25, $44, $44
  52++E9ED 44 44
  53++E9EF
  54++E9EF              MambaVertSize: equ $ - MambaVertices
  55++E9EF
  56++E9EF
  57++E9EF
  58++E9EF 1F 20 00 04  MambaEdges:	DB $1F, $20, $00, $04
  59++E9F3 1F 30 00 10  	DB $1F, $30, $00, $10
  60++E9F7 1F 40 04 10  	DB $1F, $40, $04, $10
  61++E9FB 1E 42 04 08  	DB $1E, $42, $04, $08
  62++E9FF 1E 41 08 0C  	DB $1E, $41, $08, $0C
  63++EA03 1E 43 0C 10  	DB $1E, $43, $0C, $10
  64++EA07 0E 11 14 18  	DB $0E, $11, $14, $18
  65++EA0B 0C 11 18 1C  	DB $0C, $11, $18, $1C
  66++EA0F 0D 11 1C 20  	DB $0D, $11, $1C, $20
  67++EA13 0C 11 14 20  	DB $0C, $11, $14, $20
  68++EA17 14 00 24 2C  	DB $14, $00, $24, $2C
  69++EA1B 10 00 24 30  	DB $10, $00, $24, $30
  70++EA1F 10 00 28 34  	DB $10, $00, $28, $34
  71++EA23 14 00 28 38  	DB $14, $00, $28, $38
  72++EA27 0E 00 34 38  	DB $0E, $00, $34, $38
  73++EA2B 0E 00 2C 30  	DB $0E, $00, $2C, $30
  74++EA2F 0D 44 3C 40  	DB $0D, $44, $3C, $40
  75++EA33 0E 44 44 48  	DB $0E, $44, $44, $48
  76++EA37 0C 44 3C 48  	DB $0C, $44, $3C, $48
  77++EA3B 0C 44 40 44  	DB $0C, $44, $40, $44
  78++EA3F 07 44 50 54  	DB $07, $44, $50, $54
  79++EA43 05 44 50 60  	DB $05, $44, $50, $60
  80++EA47 05 44 54 60  	DB $05, $44, $54, $60
  81++EA4B 07 44 4C 58  	DB $07, $44, $4C, $58
  82++EA4F 05 44 4C 5C  	DB $05, $44, $4C, $5C
  83++EA53 05 44 58 5C  	DB $05, $44, $58, $5C
  84++EA57 1E 21 00 08  	DB $1E, $21, $00, $08
  85++EA5B 1E 31 00 0C  	DB $1E, $31, $00, $0C
  86++EA5F
  87++EA5F              MambaEdgesSize: equ $ - MambaEdges
  88++EA5F
  89++EA5F
  90++EA5F              MambaEdgesCnt: equ MambaEdgesSize/4
  91++EA5F
  92++EA5F
  93++EA5F 5E 00 18 02  MambaNormals:	DB $5E, $00, $18, $02
  94++EA63 1E 00 18 02  	DB $1E, $00, $18, $02
  95++EA67 9E 20 40 10  	DB $9E, $20, $40, $10
  96++EA6B 1E 20 40 10  	DB $1E, $20, $40, $10
  97++EA6F 3E 00 00 7F  	DB $3E, $00, $00, $7F
  98++EA73
  99++EA73              MambaNormalsSize: equ $ - MambaNormals
 100++EA73              MambaLen: equ $ - Mamba
 101++EA73
# file closed: ./Data/ships/Mamba.asm
  91+ EA73                                      include "Data/ships/Missile.asm"
# file opened: ./Data/ships/Missile.asm
   1++EA73              ;    DEFINE DEBUGMODEL 1
   2++EA73 00           Missile:	            DB $00                     ; Number of cargo canisters released when destroyed
   3++EA74 40 06                                DW $0640                   ; Ship's targetable area LoHi
   4++EA76 F8 EA                                DW MissileEdges            ; Edge Data
   5++EA78 60                                   DB MissileEdgesSize        ; Size of Edge Data
   6++EA79 00                                   DB $00                     ; Gun Vertex Byte offset
   7++EA7A 0A                                   DB $0A                     ; Explosion Count
   8++EA7B 11                                   DB MissileVertSize /6      ; Vertex Count /6
   9++EA7C 66                                   DB MissileVertSize         ; Vertex Count
  10++EA7D 18                                   DB MissileEdgesCnt         ; Edges Count
  11++EA7E 00 00                                DW $0000                   ; Bounty LoHi
  12++EA80 24                                   DB MissileNormalsSize      ; Face (Normal) Count
  13++EA81 0E                                   DB $0E                     ; Range when it turns to a dot
  14++EA82 02                                   DB $02                     ; Energy Max
  15++EA83 2C                                   DB $2C                     ; Speed Max
  16++EA84 58 EB                                DW MissileNormals          ; Normals
  17++EA86 02                                   DB $02                     ; Q scaling
  18++EA87 00                                   DB $00                     ; Laser power and Nbr Missiles
  19++EA88 92 EA                                DW MissileVertices         ; Verticles Address
  20++EA8A 01                                   DB ShipTypeMissile         ; Ship Type
  21++EA8B 00                                   DB 0                       ; NewB Tactics
  22++EA8C 00                                   DB 0                       ; AI Flags
  23++EA8D 00                                   DB $00                     ; chance of ECM module
  24++EA8E FF                                   DB $FF                              ; Supports Solid Fill = false
  25++EA8F 00 00                                DW $0000                            ; no solid data
  26++EA91 00                                   DB $00                              ; no solid data
  27++EA92
  28++EA92
  29++EA92              ;;;     Byte 0 = X magnitide with origin at middle of ship
  30++EA92              ;;;		Byte 1 = Y magnitide with origin at middle of ship
  31++EA92              ;;;		Byte 2 = Z magnitide with origin at middle of ship
  32++EA92              ;;;		Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
  33++EA92              ;;;		Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  34++EA92              ;;;		Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
  35++EA92              MissileVertices:    IFDEF DEBUGMODEL
  36++EA92 ~                                    DB $00,$50,$00,$1F,$00,$00  ; 00 00 Y Tip (Roof)
  37++EA92 ~                                    DB $00,$00,$00,$1F,$00,$00  ; 01 04 Y base for all nodes
  38++EA92 ~                                    DB $50,$00,$00,$1F,$01,$01  ; 02 08 X Tip (Side)
  39++EA92 ~                                    DB $00,$00,$00,$1F,$01,$01  ; 03 0C X Base
  40++EA92 ~                                    DB $00,$00,$30,$1F,$02,$02  ; 04 10 Z Tip (Nose1)
  41++EA92 ~                                    DB $00,$00,$00,$1F,$02,$03  ; 05 14 Z base
  42++EA92 ~                                    DB $04,$00,$25,$9F,$03,$03  ; 06 18 Z Trangle point 1
  43++EA92 ~                                    DB $04,$00,$25,$1F,$03,$03  ; 07 1C Z Trangle point 2
  44++EA92 ~                                    DB $05,$10,$00,$9F,$00,$00  ; 08 20 Y Cross Member 1
  45++EA92 ~                                    DB $05,$10,$00,$1F,$00,$00  ; 09 24 Y Cross Member 2
  46++EA92 ~                                    DB $10,$05,$00,$1F,$00,$00  ; 10 28 X Cross Member 1
  47++EA92 ~                                    DB $20,$00,$00,$1F,$00,$00  ; 11 2C X Cross Member 2
  48++EA92 ~                                    DB $10,$05,$00,$5F,$00,$00  ; 12 30 X Cross Member 3
  49++EA92                                  ELSE
  50++EA92 00 00 44 1F                          DB $00, $00, $44, $1F, $10, $32
  50++EA96 10 32
  51++EA98 08 08 24 5F                          DB $08, $08, $24, $5F, $21, $54
  51++EA9C 21 54
  52++EA9E 08 08 24 1F                          DB $08, $08, $24, $1F, $32, $74
  52++EAA2 32 74
  53++EAA4 08 08 24 9F                          DB $08, $08, $24, $9F, $30, $76
  53++EAA8 30 76
  54++EAAA 08 08 24 DF                          DB $08, $08, $24, $DF, $10, $65
  54++EAAE 10 65
  55++EAB0 08 08 2C 3F                          DB $08, $08, $2C, $3F, $74, $88
  55++EAB4 74 88
  56++EAB6 08 08 2C 7F                          DB $08, $08, $2C, $7F, $54, $88
  56++EABA 54 88
  57++EABC 08 08 2C FF                          DB $08, $08, $2C, $FF, $65, $88
  57++EAC0 65 88
  58++EAC2 08 08 2C BF                          DB $08, $08, $2C, $BF, $76, $88
  58++EAC6 76 88
  59++EAC8 0C 0C 2C 28                          DB $0C, $0C, $2C, $28, $74, $88
  59++EACC 74 88
  60++EACE 0C 0C 2C 68                          DB $0C, $0C, $2C, $68, $54, $88
  60++EAD2 54 88
  61++EAD4 0C 0C 2C E8                          DB $0C, $0C, $2C, $E8, $65, $88
  61++EAD8 65 88
  62++EADA 0C 0C 2C A8                          DB $0C, $0C, $2C, $A8, $76, $88
  62++EADE 76 88
  63++EAE0 08 08 0C A8                          DB $08, $08, $0C, $A8, $76, $77
  63++EAE4 76 77
  64++EAE6 08 08 0C E8                          DB $08, $08, $0C, $E8, $65, $66
  64++EAEA 65 66
  65++EAEC 08 08 0C 28                          DB $08, $08, $0C, $28, $74, $77
  65++EAF0 74 77
  66++EAF2 08 08 0C 68                          DB $08, $08, $0C, $68, $54, $55
  66++EAF6 54 55
  67++EAF8                                  ENDIF
  68++EAF8              MissileVertSize: equ $ - MissileVertices
  69++EAF8
  70++EAF8              ;;;     Byte 0 = Edge visbility Distance if > XX4 distance then won't show
  71++EAF8              ;;;		Byte 1 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  72++EAF8              ;;;		Byte 2 = Byte offset to Point 1 (divide by 4 for index)
  73++EAF8              ;;;		Byte 3 = Byte offset to Point 2 (divide by 4 for index)
  74++EAF8
  75++EAF8              MissileEdges:	    IFDEF DEBUGMODEL
  76++EAF8 ~                                    DB $1F,$00,$00,$04 ; Y
  77++EAF8 ~                                    DB $1F,$00,$08,$0C ; X
  78++EAF8 ~                                    DB $1F,$00,$10,$14 ; Z
  79++EAF8 ~                                    DB $1F,$00,$10,$18 ; Z Tip Traingle 1
  80++EAF8 ~                                    DB $1F,$00,$10,$1C ; Z Tip Traingle 2
  81++EAF8 ~                                    DB $1F,$00,$1C,$18 ; Z Tip Traingle 2
  82++EAF8 ~                                    DB $1F,$00,$20,$24 ; Y Cross memeber
  83++EAF8 ~                                    DB $1F,$00,$28,$2C ; X Triangle
  84++EAF8 ~                                    DB $1F,$00,$2C,$30 ; X Triangle
  85++EAF8 ~                                    ;DB $1F,$00,$18,$1C
  86++EAF8                                  ELSE
  87++EAF8 1F 21 00 04                          DB $1F, $21, $00, $04
  88++EAFC 1F 32 00 08                          DB $1F, $32, $00, $08
  89++EB00 1F 30 00 0C                          DB $1F, $30, $00, $0C
  90++EB04 1F 10 00 10                          DB $1F, $10, $00, $10
  91++EB08 1F 24 04 08                          DB $1F, $24, $04, $08
  92++EB0C 1F 51 04 10                          DB $1F, $51, $04, $10
  93++EB10 1F 60 0C 10                          DB $1F, $60, $0C, $10
  94++EB14 1F 73 08 0C                          DB $1F, $73, $08, $0C
  95++EB18 1F 74 08 14                          DB $1F, $74, $08, $14
  96++EB1C 1F 54 04 18                          DB $1F, $54, $04, $18
  97++EB20 1F 65 10 1C                          DB $1F, $65, $10, $1C
  98++EB24 1F 76 0C 20                          DB $1F, $76, $0C, $20
  99++EB28 1F 86 1C 20                          DB $1F, $86, $1C, $20
 100++EB2C 1F 87 14 20                          DB $1F, $87, $14, $20
 101++EB30 1F 84 14 18                          DB $1F, $84, $14, $18
 102++EB34 1F 85 18 1C                          DB $1F, $85, $18, $1C
 103++EB38 08 85 18 28                          DB $08, $85, $18, $28
 104++EB3C 08 87 14 24                          DB $08, $87, $14, $24
 105++EB40 08 87 20 30                          DB $08, $87, $20, $30
 106++EB44 08 85 1C 2C                          DB $08, $85, $1C, $2C
 107++EB48 08 74 24 3C                          DB $08, $74, $24, $3C
 108++EB4C 08 54 28 40                          DB $08, $54, $28, $40
 109++EB50 08 76 30 34                          DB $08, $76, $30, $34
 110++EB54 08 65 2C 38                          DB $08, $65, $2C, $38
 111++EB58                                  ENDIF
 112++EB58              MissileEdgesSize: equ $ - MissileEdges
 113++EB58
 114++EB58
 115++EB58              MissileEdgesCnt: equ MissileEdgesSize/4
 116++EB58
 117++EB58              ;;;		Byte 0 = Sign Bits of Vertex 7=X 6=Y 5 = Z, bits 4 to 0 are distance for always visible
 118++EB58              ;;;		Byte 1 = X Lo
 119++EB58              ;;;		Byte 2 = Y Lo
 120++EB58              ;;;		Byte 3 = Z Lo
 121++EB58              MissileNormals:	    IFDEF DEBUGMODEL
 122++EB58 ~                                    DB $1F,$00,$10,$00
 123++EB58 ~                                    DB $1F,$10,$00,$00
 124++EB58 ~                                    DB $1F,$00,$00,$10
 125++EB58 ~                                    DB $1F,$00,$00,$10
 126++EB58                                  ELSE
 127++EB58 9F 40 00 10                          DB $9F, $40, $00, $10
 128++EB5C 5F 00 40 10                          DB $5F, $00, $40, $10
 129++EB60 1F 40 00 10                          DB $1F, $40, $00, $10
 130++EB64 1F 00 40 10                          DB $1F, $00, $40, $10
 131++EB68 1F 20 00 00                          DB $1F, $20, $00, $00
 132++EB6C 5F 00 20 00                          DB $5F, $00, $20, $00
 133++EB70 9F 20 00 00                          DB $9F, $20, $00, $00
 134++EB74 1F 00 20 00                          DB $1F, $00, $20, $00
 135++EB78 3F 00 00 B0                          DB $3F, $00, $00, $B0
 136++EB7C                                  ENDIF
 137++EB7C
 138++EB7C              MissileNormalsSize: equ $ - MissileNormals
 139++EB7C              MissileLen: equ $ - Missile
 140++EB7C
# file closed: ./Data/ships/Missile.asm
  92+ EB7C                                      include "Data/ships/Monitor.asm"
# file opened: ./Data/ships/Monitor.asm
   1++EB7C 04           Monitor:	            DB $04                     ; Number of cargo canisters released when destroyed
   2++EB7D 00 36                                DW $3600                   ; Ship's targetable area LoHi
   3++EB7F 01 EC                                DW MonitorEdges            ; Edge Data
   4++EB81 5C                                   DB MonitorEdgesSize        ; Size of Edge Data
   5++EB82 00                                   DB $00                     ; Gun Vertex Byte offset
   6++EB83 2A                                   DB $2A                     ; Explosion Count
   7++EB84 11                                   DB MonitorVertSize /6      ; Vertex Count /6
   8++EB85 66                                   DB MonitorVertSize         ; Vertex Count
   9++EB86 17                                   DB MonitorEdgesCnt         ; Edges Count
  10++EB87 90 01                                DW $0190                   ; Bounty LoHi
  11++EB89 2C                                   DB MonitorNormalsSize      ; Face (Normal) Count
  12++EB8A 28                                   DB $28                     ; Range when it turns to a dot
  13++EB8B 84                                   DB $84                     ; Energy Max
  14++EB8C 10                                   DB $10                     ; Speed Max
  15++EB8D 5D EC                                DW MonitorNormals          ; Normals
  16++EB8F 00                                   DB $00                     ; Q scaling
  17++EB90 37                                   DB $37                     ; Laser power and Nbr Missiles
  18++EB91 9B EB                                DW MonitorVertices         ; Verticles Address
  19++EB93 00                                   DB ShipTypeNormal          ; Ship Type
  20++EB94 00                                   DB 0                       ; NewB Tactics
  21++EB95 80                                   DB ShipCanAnger            ; AI Flags
  22++EB96 40                                   DB $40                     ; chance of ECM module
  23++EB97 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EB98 00 00                                DW $0000                            ; no solid data
  25++EB9A 00                                   DB $00                              ; no solid data
  26++EB9B
  27++EB9B
  28++EB9B 00 0A 8C 1F  MonitorVertices:	    DB $00, $0A, $8C, $1F, $FF, $FF
  28++EB9F FF FF
  29++EBA1 14 28 14 3F                          DB $14, $28, $14, $3F, $23, $01
  29++EBA5 23 01
  30++EBA7 14 28 14 BF                          DB $14, $28, $14, $BF, $50, $34
  30++EBAB 50 34
  31++EBAD 32 00 0A 1F                          DB $32, $00, $0A, $1F, $78, $12
  31++EBB1 78 12
  32++EBB3 32 00 0A 9F                          DB $32, $00, $0A, $9F, $96, $45
  32++EBB7 96 45
  33++EBB9 1E 04 3C 3F                          DB $1E, $04, $3C, $3F, $AA, $28
  33++EBBD AA 28
  34++EBBF 1E 04 3C BF                          DB $1E, $04, $3C, $BF, $AA, $49
  34++EBC3 AA 49
  35++EBC5 12 14 3C 3F                          DB $12, $14, $3C, $3F, $AA, $23
  35++EBC9 AA 23
  36++EBCB 12 14 3C BF                          DB $12, $14, $3C, $BF, $AA, $34
  36++EBCF AA 34
  37++EBD1 00 14 3C 7F                          DB $00, $14, $3C, $7F, $AA, $89
  37++EBD5 AA 89
  38++EBD7 00 28 0A 5F                          DB $00, $28, $0A, $5F, $89, $67
  38++EBDB 89 67
  39++EBDD 00 22 0A 0A                          DB $00, $22, $0A, $0A, $00, $00
  39++EBE1 00 00
  40++EBE3 00 1A 32 0A                          DB $00, $1A, $32, $0A, $00, $00
  40++EBE7 00 00
  41++EBE9 14 0A 3C 4A                          DB $14, $0A, $3C, $4A, $77, $77
  41++EBED 77 77
  42++EBEF 0A 00 64 0A                          DB $0A, $00, $64, $0A, $77, $77
  42++EBF3 77 77
  43++EBF5 14 0A 3C CA                          DB $14, $0A, $3C, $CA, $66, $66
  43++EBF9 66 66
  44++EBFB 0A 00 64 8A                          DB $0A, $00, $64, $8A, $66, $66
  44++EBFF 66 66
  45++EC01              MonitorVertSize:        equ $ - MonitorVertices
  46++EC01 1F 01 00 04  MonitorEdges:	        DB $1F, $01, $00, $04
  47++EC05 1F 12 04 0C  	                    DB $1F, $12, $04, $0C
  48++EC09 1F 23 04 1C                          DB $1F, $23, $04, $1C
  49++EC0D 1F 34 08 20                          DB $1F, $34, $08, $20
  50++EC11 1F 45 08 10                          DB $1F, $45, $08, $10
  51++EC15 1F 50 00 08                          DB $1F, $50, $00, $08
  52++EC19 1F 03 04 08                          DB $1F, $03, $04, $08
  53++EC1D 1F 67 00 28                          DB $1F, $67, $00, $28
  54++EC21 1F 78 0C 28                          DB $1F, $78, $0C, $28
  55++EC25 1F 89 24 28                          DB $1F, $89, $24, $28
  56++EC29 1F 96 10 28                          DB $1F, $96, $10, $28
  57++EC2D 1F 17 00 0C                          DB $1F, $17, $00, $0C
  58++EC31 1F 28 0C 14                          DB $1F, $28, $0C, $14
  59++EC35 1F 49 18 10                          DB $1F, $49, $18, $10
  60++EC39 1F 56 10 00                          DB $1F, $56, $10, $00
  61++EC3D 1F 2A 1C 14                          DB $1F, $2A, $1C, $14
  62++EC41 1F 3A 20 1C                          DB $1F, $3A, $20, $1C
  63++EC45 1F 4A 20 18                          DB $1F, $4A, $20, $18
  64++EC49 1F 8A 14 24                          DB $1F, $8A, $14, $24
  65++EC4D 1F 9A 18 24                          DB $1F, $9A, $18, $24
  66++EC51 0A 00 2C 30                          DB $0A, $00, $2C, $30
  67++EC55 0A 77 34 38                          DB $0A, $77, $34, $38
  68++EC59 0A 66 3C 40                          DB $0A, $66, $3C, $40
  69++EC5D              MonitorEdgesSize:       equ $ - MonitorEdges
  70++EC5D              MonitorEdgesCnt:        equ MonitorEdgesSize/4
  71++EC5D 1F 00 3E 0B  MonitorNormals:	        DB $1F, $00, $3E, $0B
  72++EC61 1F 2C 2B 0D                          DB $1F, $2C, $2B, $0D
  73++EC65 3F 36 1C 10                          DB $3F, $36, $1C, $10
  74++EC69 3F 00 39 1C                          DB $3F, $00, $39, $1C
  75++EC6D BF 36 1C 10                          DB $BF, $36, $1C, $10
  76++EC71 9F 2C 2B 0D                          DB $9F, $2C, $2B, $0D
  77++EC75 DF 26 2F 12                          DB $DF, $26, $2F, $12
  78++EC79 5F 26 2F 12                          DB $5F, $26, $2F, $12
  79++EC7D 7F 27 30 0D                          DB $7F, $27, $30, $0D
  80++EC81 FF 27 30 0D                          DB $FF, $27, $30, $0D
  81++EC85 3F 00 00 40                          DB $3F, $00, $00, $40
  82++EC89              MonitorNormalsSize:     equ $ - MonitorNormals
  83++EC89              MonitorLen:             equ $ - Monitor
  84++EC89
# file closed: ./Data/ships/Monitor.asm
  93+ EC89                                      include "Data/ships/Moray.asm"
# file opened: ./Data/ships/Moray.asm
   1++EC89 01           Moray:	                DB $01                    ; Number of cargo canisters released when destroyed
   2++EC8A 84 03                                DW $0384                  ; Ship's targetable area LoHi
   3++EC8C FC EC                                DW MorayEdges             ; Edge Data
   4++EC8E 4C                                   DB MorayEdgesSize         ; Size of Edge Data
   5++EC8F 00                                   DB $00                    ; Gun Vertex Byte offset
   6++EC90 1A                                   DB $1A                    ; Explosion Count
   7++EC91 0E                                   DB MorayVertSize /6       ; Vertex Count /6
   8++EC92 54                                   DB MorayVertSize          ; Vertex Count
   9++EC93 13                                   DB MorayEdgesCnt          ; Edges Count
  10++EC94 32 00                                DW $0032                  ; Bounty LoHi
  11++EC96 24                                   DB MorayNormalsSize       ; Face (Normal) Count
  12++EC97 28                                   DB $28                    ; Range when it turns to a dot
  13++EC98 59                                   DB $59                    ; Energy Max
  14++EC99 19                                   DB $19                    ; Speed Max
  15++EC9A 48 ED                                DW MorayNormals           ; Normals
  16++EC9C 02                                   DB $02                    ; Q scaling
  17++EC9D 2A                                   DB $2A                    ; Laser power and Nbr Missiles
  18++EC9E A8 EC                                DW MorayVertices          ; Verticles Address
  19++ECA0 00                                   DB ShipTypeNormal         ; Ship Type
  20++ECA1 00                                   DB 0                      ; NewB Tactics
  21++ECA2 80                                   DB ShipCanAnger           ; AI Flags
  22++ECA3 C0                                   DB $C0                    ; chance of ECM module
  23++ECA4 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++ECA5 00 00                                DW $0000                            ; no solid data
  25++ECA7 00                                   DB $00                              ; no solid data
  26++ECA8
  27++ECA8
  28++ECA8 0F 00 41 1F  MorayVertices:	        DB $0F, $00, $41, $1F, $02, $78
  28++ECAC 02 78
  29++ECAE 0F 00 41 9F                          DB $0F, $00, $41, $9F, $01, $67
  29++ECB2 01 67
  30++ECB4 00 12 28 31                          DB $00, $12, $28, $31, $FF, $FF
  30++ECB8 FF FF
  31++ECBA 3C 00 00 9F                          DB $3C, $00, $00, $9F, $13, $66
  31++ECBE 13 66
  32++ECC0 3C 00 00 1F                          DB $3C, $00, $00, $1F, $25, $88
  32++ECC4 25 88
  33++ECC6 1E 1B 0A 78                          DB $1E, $1B, $0A, $78, $45, $78
  33++ECCA 45 78
  34++ECCC 1E 1B 0A F8                          DB $1E, $1B, $0A, $F8, $34, $67
  34++ECD0 34 67
  35++ECD2 09 04 19 E7                          DB $09, $04, $19, $E7, $44, $44
  35++ECD6 44 44
  36++ECD8 09 04 19 67                          DB $09, $04, $19, $67, $44, $44
  36++ECDC 44 44
  37++ECDE 00 12 10 67                          DB $00, $12, $10, $67, $44, $44
  37++ECE2 44 44
  38++ECE4 0D 03 31 05                          DB $0D, $03, $31, $05, $00, $00
  38++ECE8 00 00
  39++ECEA 06 00 41 05                          DB $06, $00, $41, $05, $00, $00
  39++ECEE 00 00
  40++ECF0 0D 03 31 85                          DB $0D, $03, $31, $85, $00, $00
  40++ECF4 00 00
  41++ECF6 06 00 41 85                          DB $06, $00, $41, $85, $00, $00
  41++ECFA 00 00
  42++ECFC              MorayVertSize:          equ $ - MorayVertices
  43++ECFC 1F 07 00 04  MorayEdges:	            DB $1F, $07, $00, $04
  44++ED00 1F 16 04 0C                          DB $1F, $16, $04, $0C
  45++ED04 18 36 0C 18                          DB $18, $36, $0C, $18
  46++ED08 18 47 14 18                          DB $18, $47, $14, $18
  47++ED0C 18 58 10 14                          DB $18, $58, $10, $14
  48++ED10 1F 28 00 10                          DB $1F, $28, $00, $10
  49++ED14 0F 67 04 18                          DB $0F, $67, $04, $18
  50++ED18 0F 78 00 14                          DB $0F, $78, $00, $14
  51++ED1C 0F 02 00 08                          DB $0F, $02, $00, $08
  52++ED20 0F 01 04 08                          DB $0F, $01, $04, $08
  53++ED24 11 13 08 0C                          DB $11, $13, $08, $0C
  54++ED28 11 25 08 10                          DB $11, $25, $08, $10
  55++ED2C 0D 45 08 14                          DB $0D, $45, $08, $14
  56++ED30 0D 34 08 18                          DB $0D, $34, $08, $18
  57++ED34 05 44 1C 20                          DB $05, $44, $1C, $20
  58++ED38 07 44 1C 24                          DB $07, $44, $1C, $24
  59++ED3C 07 44 20 24                          DB $07, $44, $20, $24
  60++ED40 05 00 28 2C                          DB $05, $00, $28, $2C
  61++ED44 05 00 30 34                          DB $05, $00, $30, $34
  62++ED48              MorayEdgesSize:         equ $ - MorayEdges
  63++ED48              MorayEdgesCnt:          equ MorayEdgesSize/4
  64++ED48 1F 00 2B 07  MorayNormals:	        DB $1F, $00, $2B, $07
  65++ED4C 9F 0A 31 07                          DB $9F, $0A, $31, $07
  66++ED50 1F 0A 31 07                          DB $1F, $0A, $31, $07
  67++ED54 F8 3B 1C 65                          DB $F8, $3B, $1C, $65
  68++ED58 78 00 34 4E                          DB $78, $00, $34, $4E
  69++ED5C 78 3B 1C 65                          DB $78, $3B, $1C, $65
  70++ED60 DF 48 63 32                          DB $DF, $48, $63, $32
  71++ED64 5F 00 53 1E                          DB $5F, $00, $53, $1E
  72++ED68 5F 48 63 32                          DB $5F, $48, $63, $32
  73++ED6C
  74++ED6C              MorayNormalsSize:       equ $ - MorayNormals
  75++ED6C              MorayLen:               equ $ - Moray
  76++ED6C
# file closed: ./Data/ships/Moray.asm
  94+ ED6C                                      include "Data/ships/Ophidian.asm"
# file opened: ./Data/ships/Ophidian.asm
   1++ED6C 02           Ophidian:	            DB $02                     ; Number of cargo canisters released when destroyed
   2++ED6D 88 0E                                DW $0E88                   ; Ship's targetable area LoHi
   3++ED6F 03 EE                                DW OphidianEdges           ; Edge Data
   4++ED71 78                                   DB OphidianEdgesSize       ; Size of Edge Data
   5++ED72 00                                   DB $00                     ; Gun Vertex Byte offset
   6++ED73 3C                                   DB $3C                     ; Explosion Count
   7++ED74 14                                   DB OphidianVertSize /6     ; Vertex Count /6
   8++ED75 78                                   DB OphidianVertSize        ; Vertex Count
   9++ED76 1E                                   DB OphidianEdgesCnt        ; Edges Count
  10++ED77 32 00                                DW $0032                   ; Bounty LoHi
  11++ED79 30                                   DB OphidianNormalsSize     ; Face (Normal) Count
  12++ED7A 14                                   DB $14                     ; Range when it turns to a dot
  13++ED7B 40                                   DB $40                     ; Energy Max
  14++ED7C 22                                   DB $22                     ; Speed Max
  15++ED7D 7B EE                                DW OphidianNormals         ; Normals
  16++ED7F 01                                   DB $01                     ; Q scaling
  17++ED80 1A                                   DB $1A                     ; Laser power and Nbr Missiles
  18++ED81 8B ED                                DW OphidianVertices        ; Verticles Address
  19++ED83 00                                   DB ShipTypeNormal          ; Ship Type
  20++ED84 00                                   DB 0                       ; NewB Tactics
  21++ED85 80                                   DB ShipCanAnger            ; AI Flags
  22++ED86 C0                                   DB $C0                     ; chance of ECM module
  23++ED87 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++ED88 00 00                                DW $0000                            ; no solid data
  25++ED8A 00                                   DB $00                              ; no solid data
  26++ED8B
  27++ED8B
  28++ED8B 14 00 46 9F  OphidianVertices:	    DB $14, $00, $46, $9F, $68, $02 ; 01
  28++ED8F 68 02
  29++ED91 14 00 46 1F                          DB $14, $00, $46, $1F, $67, $01 ; 02
  29++ED95 67 01
  30++ED97 00 0A 28 1F                          DB $00, $0A, $28, $1F, $22, $01 ; 03
  30++ED9B 22 01
  31++ED9D 1E 00 1E 9F                          DB $1E, $00, $1E, $9F, $8A, $24 ; 04
  31++EDA1 8A 24
  32++EDA3 1E 00 1E 1F                          DB $1E, $00, $1E, $1F, $79, $13 ; 05
  32++EDA7 79 13
  33++EDA9 00 10 0A 1F                          DB $00, $10, $0A, $1F, $FF, $FF ; 06
  33++EDAD FF FF
  34++EDAF 14 0A 32 3F                          DB $14, $0A, $32, $3F, $9B, $35 ; 07
  34++EDB3 9B 35
  35++EDB5 14 0A 32 BF                          DB $14, $0A, $32, $BF, $AB, $45 ; 08
  35++EDB9 AB 45
  36++EDBB 1E 00 32 BF                          DB $1E, $00, $32, $BF, $BB, $4A ; 09
  36++EDBF BB 4A
  37++EDC1 28 00 32 B0                          DB $28, $00, $32, $B0, $FF, $FF ; 10
  37++EDC5 FF FF
  38++EDC7 1E 00 1E B0                          DB $1E, $00, $1E, $B0, $FF, $FF ; 11
  38++EDCB FF FF
  39++EDCD 1E 00 32 3F                          DB $1E, $00, $32, $3F, $BB, $39 ; 12
  39++EDD1 BB 39
  40++EDD3 28 00 32 30                          DB $28, $00, $32, $30, $FF, $FF ; 13
  40++EDD7 FF FF
  41++EDD9 1E 00 1E 30                          DB $1E, $00, $1E, $30, $FF, $FF ; 14
  41++EDDD FF FF
  42++EDDF 00 0A 32 7F                          DB $00, $0A, $32, $7F, $BB, $9A ; 15
  42++EDE3 BB 9A
  43++EDE5 00 10 14 5F                          DB $00, $10, $14, $5F, $FF, $FF ; 16
  43++EDE9 FF FF
  44++EDEB 0A 04 32 30                          DB $0A, $04, $32, $30, $BB, $BB ; 17
  44++EDEF BB BB
  45++EDF1 0A 02 32 70                          DB $0A, $02, $32, $70, $BB, $BB ; 18
  45++EDF5 BB BB
  46++EDF7 0A 02 32 F0                          DB $0A, $02, $32, $F0, $BB, $BB ; 19
  46++EDFB BB BB
  47++EDFD 0A 04 32 B0                          DB $0A, $04, $32, $B0, $BB, $BB ; 20
  47++EE01 BB BB
  48++EE03
  49++EE03              OphidianVertSize:       equ $ - OphidianVertices
  50++EE03 1F 06 00 04  OphidianEdges:	        DB $1F, $06, $00, $04
  51++EE07 1F 01 04 08                          DB $1F, $01, $04, $08
  52++EE0B 1F 02 00 08                          DB $1F, $02, $00, $08
  53++EE0F 1F 12 08 14                          DB $1F, $12, $08, $14
  54++EE13 1F 13 10 14                          DB $1F, $13, $10, $14
  55++EE17 1F 24 0C 14                          DB $1F, $24, $0C, $14
  56++EE1B 1F 35 14 18                          DB $1F, $35, $14, $18
  57++EE1F 1F 45 14 1C                          DB $1F, $45, $14, $1C
  58++EE23 1F 28 00 0C                          DB $1F, $28, $00, $0C
  59++EE27 1F 17 04 10                          DB $1F, $17, $04, $10
  60++EE2B 1F 39 10 2C                          DB $1F, $39, $10, $2C
  61++EE2F 1F 4A 0C 20                          DB $1F, $4A, $0C, $20
  62++EE33 1F 67 04 3C                          DB $1F, $67, $04, $3C
  63++EE37 1F 68 00 3C                          DB $1F, $68, $00, $3C
  64++EE3B 1F 79 10 3C                          DB $1F, $79, $10, $3C
  65++EE3F 1F 8A 0C 3C                          DB $1F, $8A, $0C, $3C
  66++EE43 1F 9A 38 3C                          DB $1F, $9A, $38, $3C
  67++EE47 1F 5B 18 1C                          DB $1F, $5B, $18, $1C
  68++EE4B 1F 3B 18 2C                          DB $1F, $3B, $18, $2C
  69++EE4F 1F 4B 1C 20                          DB $1F, $4B, $1C, $20
  70++EE53 1F 9B 2C 38                          DB $1F, $9B, $2C, $38
  71++EE57 1F AB 20 38                          DB $1F, $AB, $20, $38
  72++EE5B 10 BB 40 44                          DB $10, $BB, $40, $44
  73++EE5F 10 BB 44 48                          DB $10, $BB, $44, $48
  74++EE63 10 BB 48 4C                          DB $10, $BB, $48, $4C
  75++EE67 10 BB 4C 40                          DB $10, $BB, $4C, $40
  76++EE6B 10 39 30 34                          DB $10, $39, $30, $34
  77++EE6F 10 39 2C 30                          DB $10, $39, $2C, $30
  78++EE73 10 4A 28 24                          DB $10, $4A, $28, $24
  79++EE77 10 4A 24 20                          DB $10, $4A, $24, $20
  80++EE7B              OphidianEdgesSize:      equ $ - OphidianEdges
  81++EE7B              OphidianEdgesCnt:       equ OphidianEdgesSize/4
  82++EE7B
  83++EE7B 1F 00 25 0C  OphidianNormals:	    DB $1F, $00, $25, $0C
  84++EE7F 1F 0B 1C 05                          DB $1F, $0B, $1C, $05
  85++EE83 9F 0B 1C 05                          DB $9F, $0B, $1C, $05
  86++EE87 1F 10 22 02                          DB $1F, $10, $22, $02
  87++EE8B 9F 10 22 02                          DB $9F, $10, $22, $02
  88++EE8F 3F 00 25 03                          DB $3F, $00, $25, $03
  89++EE93 5F 00 1F 0A                          DB $5F, $00, $1F, $0A
  90++EE97 5F 0A 14 02                          DB $5F, $0A, $14, $02
  91++EE9B DF 0A 14 02                          DB $DF, $0A, $14, $02
  92++EE9F 7F 12 20 02                          DB $7F, $12, $20, $02
  93++EEA3 FF 12 20 02                          DB $FF, $12, $20, $02
  94++EEA7 3F 00 00 25                          DB $3F, $00, $00, $25
  95++EEAB
  96++EEAB              OphidianNormalsSize:    equ $ - OphidianNormals
  97++EEAB              OphidianLen:            equ $ - Ophidian
  98++EEAB
# file closed: ./Data/ships/Ophidian.asm
  95+ EEAB                                      include "Data/ships/Plate.asm"
# file opened: ./Data/ships/Plate.asm
   1++EEAB 80           Plate:	                DB $80                    ; Number of cargo canisters released when destroyed
   2++EEAC 64 00                                DW $0064                  ; Ship's targetable area LoHi
   3++EEAE DC EE                                DW PlateEdges             ; Edge Data
   4++EEB0 10                                   DB PlateEdgesSize         ; Size of Edge Data
   5++EEB1 00                                   DB $00                    ; Gun Vertex Byte offset
   6++EEB2 0A                                   DB $0A                    ; Explosion Count
   7++EEB3 03                                   DB PlateVertSize /6       ; Vertex Count /6
   8++EEB4 12                                   DB PlateVertSize          ; Vertex Count
   9++EEB5 04                                   DB PlateEdgesCnt          ; Edges Count
  10++EEB6 00 00                                DW $0000                  ; Bounty LoHi
  11++EEB8 04                                   DB PlateNormalsSize       ; Face (Normal) Count
  12++EEB9 05                                   DB $05                    ; Range when it turns to a dot
  13++EEBA 10                                   DB $10                    ; Energy Max
  14++EEBB 10                                   DB $10                    ; Speed Max
  15++EEBC EC EE                                DW PlateNormals           ; Normals
  16++EEBE 03                                   DB $03                    ; Q scaling
  17++EEBF 00                                   DB $00                    ; Laser power and Nbr Missiles
  18++EEC0 CA EE                                DW PlateVertices          ; Verticles Address
  19++EEC2 04                                   DB ShipTypeScoopable      ; Ship Type
  20++EEC3 00                                   DB 0                      ; NewB Tactics
  21++EEC4 80                                   DB ShipCanAnger           ; AI Flags
  22++EEC5 00                                   DB $00                    ; chance of ECM module
  23++EEC6 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EEC7 00 00                                DW $0000                            ; no solid data
  25++EEC9 00                                   DB $00                              ; no solid data
  26++EECA
  27++EECA
  28++EECA
  29++EECA 0F 16 09 FF  PlateVertices:	        DB $0F, $16, $09, $FF, $FF, $FF
  29++EECE FF FF
  30++EED0 0F 26 09 BF                          DB $0F, $26, $09, $BF, $FF, $FF
  30++EED4 FF FF
  31++EED6 13 20 0B 14                          DB $13, $20, $0B, $14, $FF, $FF
  31++EEDA FF FF
  32++EEDC
  33++EEDC              PlateVertSize: equ $ - PlateVertices
  34++EEDC
  35++EEDC
  36++EEDC
  37++EEDC 1F FF 00 04  PlateEdges:	DB $1F, $FF, $00, $04
  38++EEE0 10 FF 04 08  	DB $10, $FF, $04, $08
  39++EEE4 14 FF 08 0C  	DB $14, $FF, $08, $0C
  40++EEE8 10 FF 0C 00  	DB $10, $FF, $0C, $00
  41++EEEC
  42++EEEC              PlateEdgesSize: equ $ - PlateEdges
  43++EEEC
  44++EEEC
  45++EEEC              PlateEdgesCnt: equ PlateEdgesSize/4
  46++EEEC
  47++EEEC
  48++EEEC 00 00 00 00  PlateNormals:	DB $00, $00, $00, $00
  49++EEF0
  50++EEF0
  51++EEF0              PlateNormalsSize: equ $ - PlateNormals
  52++EEF0              PlateLen: equ $ - Plate
  53++EEF0
# file closed: ./Data/ships/Plate.asm
  96+ EEF0                                      include "Data/ships/Python.asm"
# file opened: ./Data/ships/Python.asm
   1++EEF0              ;\ -> &5BA1 \ Python = Type 12                                                   ; Number of cargo canisters released when destroyed
   2++EEF0 05           Python:                 DB $05                                                   ; Ship's targetable area LoHi
   3++EEF1 00 19                                DW $1900                                                 ; Edge Data
   4++EEF3 51 EF                                DW PythonEdges                                           ; Size of Edge Data
   5++EEF5 68                                   DB PythonEdgesSize                                       ; Gun Vertex Byte offset
   6++EEF6 00                                   DB $00                                                   ; Explosion Count
   7++EEF7 2A                                   DB $2A                                                   ; Vertex Count /6
   8++EEF8 0B                                   DB PythonVertSize /6                                     ; Vertex Count
   9++EEF9 42                                   DB PythonVertSize                                        ; Edges Count
  10++EEFA 1A                                   DB PythonEdgesCnt                                        ; Bounty LoHi
  11++EEFB 00 00                                DW $0000                                                 ; Face (Normal) Count
  12++EEFD 34                                   DB PythonNormalsSize                                     ; Range when it turns to a dot
  13++EEFE 28                                   DB $28                                                   ; Energy Max
  14++EEFF FA                                   DB $FA                                                   ; Speed Max
  15++EF00 14                                   DB $14                                                   ; Normals
  16++EF01 B9 EF                                DW PythonNormals                                         ; Q scaling
  17++EF03 00                                   DB $00                                                   ; Laser power and Nbr Missiles
  18++EF04 56                                   DB $50 | ShipMissiles6                                   ; Verticles Address
  19++EF05 0F EF                                DW PythonVertices                                        ; Ship Type
  20++EF07 00                                   DB ShipTypeNormal                                        ; NewB Tactics
  21++EF08 00                                   DB 0                                                     ; AI Flags
  22++EF09 90                                   DB ShipCanAnger | ShipFighterBaySize1 | ShipFighterWorm  ; chance of ECM module
  23++EF0A E0                                   DB $E0
  24++EF0B FF                                   DB $FF                              ; Supports Solid Fill = false
  25++EF0C 00 00                                DW $0000                            ; no solid data
  26++EF0E 00                                   DB $00                              ; no solid data
  27++EF0F
  28++EF0F 00 00 E0 1F  PythonVertices:         DB $00, $00, $E0, $1F, $10, $32
  28++EF13 10 32
  29++EF15 00 30 30 1E                          DB $00, $30, $30, $1E, $10, $54
  29++EF19 10 54
  30++EF1B 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  30++EF1F FF FF
  31++EF21 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  31++EF25 FF FF
  32++EF27 00 30 20 3E                          DB $00, $30, $20, $3E, $54, $98
  32++EF2B 54 98
  33++EF2D 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  33++EF31 89 CC
  34++EF33 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  34++EF37 B8 CC
  35++EF39 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  35++EF3D A9 CC
  36++EF3F 00 30 30 5E                          DB $00, $30, $30, $5E, $32, $76
  36++EF43 32 76
  37++EF45 00 30 20 7E                          DB $00, $30, $20, $7E, $76, $BA
  37++EF49 76 BA
  38++EF4B 00 18 70 7E                          DB $00, $18, $70, $7E, $BA, $CC
  38++EF4F BA CC
  39++EF51              PythonVertSize          equ $  - PythonVertices
  40++EF51 1E 32 00 20  PythonEdges:            DB $1E, $32, $00, $20, $1F, $20, $00, $0C
  40++EF55 1F 20 00 0C
  41++EF59 1F 31 00 08                          DB $1F, $31, $00, $08, $1E, $10, $00, $04
  41++EF5D 1E 10 00 04
  42++EF61 1D 59 08 10                          DB $1D, $59, $08, $10, $1D, $51, $04, $08
  42++EF65 1D 51 04 08
  43++EF69 1D 37 08 20                          DB $1D, $37, $08, $20, $1D, $40, $04, $0C
  43++EF6D 1D 40 04 0C
  44++EF71 1D 62 0C 20                          DB $1D, $62, $0C, $20, $1D, $A7, $08, $24
  44++EF75 1D A7 08 24
  45++EF79 1D 84 0C 10                          DB $1D, $84, $0C, $10, $1D, $B6, $0C, $24
  45++EF7D 1D B6 0C 24
  46++EF81 05 88 0C 14                          DB $05, $88, $0C, $14, $05, $BB, $0C, $28
  46++EF85 05 BB 0C 28
  47++EF89 05 99 08 14                          DB $05, $99, $08, $14, $05, $AA, $08, $28
  47++EF8D 05 AA 08 28
  48++EF91 1F A9 08 1C                          DB $1F, $A9, $08, $1C, $1F, $B8, $0C, $18
  48++EF95 1F B8 0C 18
  49++EF99 1F C8 14 18                          DB $1F, $C8, $14, $18, $1F, $C9, $14, $1C
  49++EF9D 1F C9 14 1C
  50++EFA1 1D AC 1C 28                          DB $1D, $AC, $1C, $28, $1D, $CB, $18, $28
  50++EFA5 1D CB 18 28
  51++EFA9 1D 98 10 14                          DB $1D, $98, $10, $14, $1D, $BA, $24, $28
  51++EFAD 1D BA 24 28
  52++EFB1 1D 54 04 10                          DB $1D, $54, $04, $10, $1D, $76, $20, $24
  52++EFB5 1D 76 20 24
  53++EFB9              PythonEdgesSize         equ $  - PythonEdges
  54++EFB9              PythonEdgesCnt          equ PythonEdgesSize/4
  55++EFB9 9E 1B 28 0B  PythonNormals           DB $9E, $1B, $28, $0B, $1E, $1B, $28, $0B
  55++EFBD 1E 1B 28 0B
  56++EFC1 DE 1B 28 0B                          DB $DE, $1B, $28, $0B, $5E, $1B, $28, $0B
  56++EFC5 5E 1B 28 0B
  57++EFC9 9E 13 26 00                          DB $9E, $13, $26, $00, $1E, $13, $26, $00
  57++EFCD 1E 13 26 00
  58++EFD1 DE 13 26 00                          DB $DE, $13, $26, $00, $5E, $13, $26, $00
  58++EFD5 5E 13 26 00
  59++EFD9 BE 19 25 0B                          DB $BE, $19, $25, $0B, $3E, $19, $25, $0B
  59++EFDD 3E 19 25 0B
  60++EFE1 7E 19 25 0B                          DB $7E, $19, $25, $0B, $FE, $19, $25, $0B
  60++EFE5 FE 19 25 0B
  61++EFE9 3E 00 00 70                          DB $3E, $00, $00, $70
  62++EFED              PythonNormalsSize       equ $  - PythonNormals
  63++EFED              PythonLen               equ $  - Python
  64++EFED
# file closed: ./Data/ships/Python.asm
  97+ EFED                                      include "Data/ships/Python_P.asm"
# file opened: ./Data/ships/Python_P.asm
   1++EFED 02           Python_P:	            DB $02                           ; Number of cargo canisters released when destroyed
   2++EFEE 00 19                                DW $1900                         ; Ship's targetable area LoHi
   3++EFF0 4E F0                                DW Python_PEdges                 ; Edge Data
   4++EFF2 68                                   DB Python_PEdgesSize             ; Size of Edge Data
   5++EFF3 00                                   DB $00                           ; Gun Vertex Byte offset
   6++EFF4 2A                                   DB $2A                           ; Explosion Count
   7++EFF5 0B                                   DB Python_PVertSize /6           ; Vertex Count /6
   8++EFF6 42                                   DB Python_PVertSize              ; Vertex Count
   9++EFF7 1A                                   DB Python_PEdgesCnt              ; Edges Count
  10++EFF8 C8 00                                DW $00C8                         ; Bounty LoHi
  11++EFFA 34                                   DB Python_PNormalsSize           ; Face (Normal) Count
  12++EFFB 28                                   DB $28                           ; Range when it turns to a dot
  13++EFFC FA                                   DB $FA                           ; Energy Max
  14++EFFD 14                                   DB $14                           ; Speed Max
  15++EFFE B6 F0                                DW Python_PNormals               ; Normals
  16++F000 00                                   DB $00                           ; Q scaling
  17++F001 66                                   DB $60 | ShipMissiles6           ; Laser power and Nbr Missiles
  18++F002 0C F0                                DW Python_PVertices              ; Verticles Address
  19++F004 00                                   DB ShipTypeNormal                ; Ship Type
  20++F005 00                                   DB 0                             ; NewB Tactics
  21++F006 80                                   DB ShipCanAnger                  ; AI Flags
  22++F007 F0                                   DB $F0                           ; chance of ECM module
  23++F008 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++F009 00 00                                DW $0000                            ; no solid data
  25++F00B 00                                   DB $00                              ; no solid data
  26++F00C
  27++F00C
  28++F00C 00 00 E0 1F  Python_PVertices:	    DB $00, $00, $E0, $1F, $10, $32
  28++F010 10 32
  29++F012 00 30 30 1F                          DB $00, $30, $30, $1F, $10, $54
  29++F016 10 54
  30++F018 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  30++F01C FF FF
  31++F01E 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  31++F022 FF FF
  32++F024 00 30 20 3F                          DB $00, $30, $20, $3F, $54, $98
  32++F028 54 98
  33++F02A 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  33++F02E 89 CC
  34++F030 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  34++F034 B8 CC
  35++F036 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  35++F03A A9 CC
  36++F03C 00 30 30 5F                          DB $00, $30, $30, $5F, $32, $76
  36++F040 32 76
  37++F042 00 30 20 7F                          DB $00, $30, $20, $7F, $76, $BA
  37++F046 76 BA
  38++F048 00 18 70 7F                          DB $00, $18, $70, $7F, $BA, $CC
  38++F04C BA CC
  39++F04E
  40++F04E              Python_PVertSize: equ $ - Python_PVertices
  41++F04E
  42++F04E
  43++F04E
  44++F04E 1F 32 00 20  Python_PEdges:	DB $1F, $32, $00, $20
  45++F052 1F 20 00 0C  	DB $1F, $20, $00, $0C
  46++F056 1F 31 00 08  	DB $1F, $31, $00, $08
  47++F05A 1F 10 00 04  	DB $1F, $10, $00, $04
  48++F05E 1F 59 08 10  	DB $1F, $59, $08, $10
  49++F062 1F 51 04 08  	DB $1F, $51, $04, $08
  50++F066 1F 37 08 20  	DB $1F, $37, $08, $20
  51++F06A 1F 40 04 0C  	DB $1F, $40, $04, $0C
  52++F06E 1F 62 0C 20  	DB $1F, $62, $0C, $20
  53++F072 1F A7 08 24  	DB $1F, $A7, $08, $24
  54++F076 1F 84 0C 10  	DB $1F, $84, $0C, $10
  55++F07A 1F B6 0C 24  	DB $1F, $B6, $0C, $24
  56++F07E 07 88 0C 14  	DB $07, $88, $0C, $14
  57++F082 07 BB 0C 28  	DB $07, $BB, $0C, $28
  58++F086 07 99 08 14  	DB $07, $99, $08, $14
  59++F08A 07 AA 08 28  	DB $07, $AA, $08, $28
  60++F08E 1F A9 08 1C  	DB $1F, $A9, $08, $1C
  61++F092 1F B8 0C 18  	DB $1F, $B8, $0C, $18
  62++F096 1F C8 14 18  	DB $1F, $C8, $14, $18
  63++F09A 1F C9 14 1C  	DB $1F, $C9, $14, $1C
  64++F09E 1F AC 1C 28  	DB $1F, $AC, $1C, $28
  65++F0A2 1F CB 18 28  	DB $1F, $CB, $18, $28
  66++F0A6 1F 98 10 14  	DB $1F, $98, $10, $14
  67++F0AA 1F BA 24 28  	DB $1F, $BA, $24, $28
  68++F0AE 1F 54 04 10  	DB $1F, $54, $04, $10
  69++F0B2 1F 76 20 24  	DB $1F, $76, $20, $24
  70++F0B6
  71++F0B6              Python_PEdgesSize: equ $ - Python_PEdges
  72++F0B6
  73++F0B6
  74++F0B6              Python_PEdgesCnt: equ Python_PEdgesSize/4
  75++F0B6
  76++F0B6
  77++F0B6 9F 1B 28 0B  Python_PNormals:	DB $9F, $1B, $28, $0B
  78++F0BA 1F 1B 28 0B  	DB $1F, $1B, $28, $0B
  79++F0BE DF 1B 28 0B  	DB $DF, $1B, $28, $0B
  80++F0C2 5F 1B 28 0B  	DB $5F, $1B, $28, $0B
  81++F0C6 9F 13 26 00  	DB $9F, $13, $26, $00
  82++F0CA 1F 13 26 00  	DB $1F, $13, $26, $00
  83++F0CE DF 13 26 00  	DB $DF, $13, $26, $00
  84++F0D2 5F 13 26 00  	DB $5F, $13, $26, $00
  85++F0D6 BF 19 25 0B  	DB $BF, $19, $25, $0B
  86++F0DA 3F 19 25 0B  	DB $3F, $19, $25, $0B
  87++F0DE 7F 19 25 0B  	DB $7F, $19, $25, $0B
  88++F0E2 FF 19 25 0B  	DB $FF, $19, $25, $0B
  89++F0E6 3F 00 00 70  	DB $3F, $00, $00, $70
  90++F0EA
  91++F0EA
  92++F0EA              Python_PNormalsSize: equ $ - Python_PNormals
  93++F0EA              Python_PLen: equ $ - Python_P
  94++F0EA
# file closed: ./Data/ships/Python_P.asm
  98+ F0EA
# file closed: ./Data/ShipModelMetaData2.asm
1389  F0EA                  DISPLAY "Bank ",BankShipModels2," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels2"
1390  F0EA              ; Bank 68  ------------------------------------------------------------------------------------------------------------------------
1391  F0EA                  SLOT    ShipModelsAddr
1392  F0EA                  PAGE    BankShipModels3
1393  F0EA              	ORG     ShipModelsAddr, BankShipModels3
1394  E000
1395  E000                  INCLUDE "./Data/ShipBank3Label.asm"
# file opened: ./Data/ShipBank3Label.asm
   1+ E000 53 68 69 70  ShipBank3Label:         DB  "ShipBank3      "
   1+ E004 42 61 6E 6B
   1+ E008 33 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank3Label.asm
1396  E00F              GetShipBank3Id:         MGetShipBankId ShipBankTable3
1396  E00F 06 00       >                        ld      b,0
1396  E011 4F          >                        ld      c,a                                 ; c= original ship id
1396  E012 CB 3F       >.ShiftLoop:             srl     a
1396  E014 CB 3F       >                        srl     a
1396  E016 CB 3F       >                        srl     a
1396  E018 CB 3F       >                        srl     a                                   ; divide by 16
1396  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1396  E01B 79          >                        ld      a,c
1396  E01C 50          >                        ld      d,b
1396  E01D 1E 10       >                        ld      e,16
1396  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1396  E021 93          >                        sub     e                                   ; a= actual model id now
1396  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1396  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1396  E024 7A          >                        ld      a,d                                 ; a = bank number
1396  E025             >;.. Now b = bank and a = adjusted ship nbr
1396  E025 21 62 E0    >                        ld      hl,ShipBankTable3                        ; a= bank index
1396  E028 ED 31       >                        add     hl,a
1396  E02A ED 31       >                        add     hl,a
1396  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1396  E02D             >                        ClearCarryFlag
1396  E02D B7          >                        or a
1396  E02E C9          >                        ret
1397  E02F              CopyVertsToUniv3:       McopyVertsToUniverse
1397  E02F 2A 0B C4    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1397  E032 11 11 C4    >                        ld          de,UBnkHullVerticies
1397  E035 06 00       >                        ld          b,0
1397  E037 3A FF C3    >                        ld			a,(VertexCtX6Addr)
1397  E03A 4F          >                        ld          c,a
1397  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1397  E03C CD 5E 7D    >                        call        memcopy_dma
1397  E03F C9          >                        ret
1398  E040              CopyEdgesToUniv3:       McopyEdgesToUniverse
1398  E040 2A F9 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1398  E043 11 01 C5    >                        ld          de,UBnkHullEdges
1398  E046 06 00       >                        ld          b,0
1398  E048 3A FB C3    >                        ld			a,(LineX4Addr)
1398  E04B 4F          >                        ld          c,a
1398  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1398  E04D CD 5E 7D    >                        call        memcopy_dma
1398  E050 C9          >                        ret
1399  E051              CopyNormsToUniv3:       McopyNormsToUniverse
1399  E051 2A 07 C4    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1399  E054 11 C9 C5    >                        ld          de,UBnkHullNormals
1399  E057 06 00       >                        ld          b,0
1399  E059 3A 03 C4    >                        ld          a,(FaceCtX4Addr)
1399  E05C 4F          >                        ld          c,a
1399  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1399  E05E CD 5E 7D    >                        call        memcopy_dma
1399  E061 C9          >                        ret
1400  E062              ShipBankTable3:         MShipBankTable
1400  E062 3B 00       >                        DW      BankShipModels1
1400  E064 43 00       >                        DW      BankShipModels2
1400  E066 44 00       >                        DW      BankShipModels3
1400  E068 45 00       >                        DW      BankShipModels4
1401  E06A              CopyShipToUniverse3     MCopyShipToUniverse     BankShipModels3
1401  E06A 21 41 C0    >                        ld          hl,UBnkShipModelBank
1401  E06D 36 44       >                        ld          (hl),BankShipModels3
1401  E06F F5          >                        push        af
1401  E070 FD 7D       >                        ld          a,iyl
1401  E072 32 43 C0    >                        ld          (UBnKShipModelId),a
1401  E075 F1          >                        pop         af
1401  E076 32 42 C0    >                        ld          (UBnKShipModelNbr),a
1401  E079 21 46 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1401  E07C ED 31       >                        add         hl,a
1401  E07E ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1401  E080 4E          >                        ld          c,(hl)
1401  E081 23          >                        inc         hl
1401  E082 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1401  E083 21 C6 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1401  E086 ED 31       >                        add         hl,a
1401  E088 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1401  E08A 7E          >                        ld          a,(hl)
1401  E08B 23          >                        inc         hl
1401  E08C 66          >                        ld          h,(hl)
1401  E08D 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1401  E08E 11 F6 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1401  E091 01 1B 00    >                        ld          bc,ShipDataLength
1401  E094 ED B0       >                        ldir
1401  E096 CD 2F E0    >                        call        CopyVertsToUniv
1401  E099 CD 40 E0    >                        call        CopyEdgesToUniv
1401  E09C CD 51 E0    >                        call        CopyNormsToUniv
1401  E09F 21 10 C0    >.ClearName:             ld          hl,StartOfUnivName
1401  E0A2 3E 20       >                        ld          a," "
1401  E0A4 06 10       >                        ld          b,16
1401  E0A6 77          >.fillLoop:              ld          (hl),a
1401  E0A7 23          >                        inc         hl
1401  E0A8 10 FC       >                        djnz        .fillLoop
1401  E0AA 3A 43 C0    >.SetName:               ld          a,(UBnKShipModelId)
1401  E0AD CD 10 8E    >                        call        ShipIndexToAddress
1401  E0B0 11 10 C0    >                        ld          de,StartOfUnivName
1401  E0B3 06 10       >                        ld          b,16
1401  E0B5 7E          >.CopyLoop:              ld          a,(hl)
1401  E0B6 FE 00       >                        cp          0
1401  E0B8 28 05       >                        jr          z,.CopyDone
1401  E0BA 12          >                        ld          (de),a
1401  E0BB 23          >                        inc         hl
1401  E0BC 13          >                        inc         de
1401  E0BD 10 F6       >                        djnz        .CopyLoop
1401  E0BF C9          >.CopyDone:              ret
1402  E0C0              CopyBodyToUniverse3:    MCopyBodyToUniverse     CopyShipToUniverse3
1402  E0C0 3E 0D       >                        ld          a,13
1402  E0C2 CD 6A E0    >                        call        CopyShipToUniverse3
1402  E0C5 C9          >                        ret
1403  E0C6                  INCLUDE "./Data/ShipModelMetaData3.asm"
# file opened: ./Data/ShipModelMetaData3.asm
   1+ E0C6 66 E1        ShipModelTable3:         DW Rock_Hermit                             ;32  $30
   2+ E0C8 47 E2                                 DW ShuttleType9                            ;33  $31
   3+ E0CA 84 E3                                 DW Shuttle_Mk_2                            ;34  $32
   4+ E0CC AD E4                                 DW Sidewinder                              ;35  $33
   5+ E0CE 60 E5                                 DW Splinter                                ;36  $34
   6+ E0D0 BF E5                                 DW TestVector                              ;37  $35
   7+ E0D2 28 E6                                 DW Thargoid                                ;38  $36
   8+ E0D4 4F E7                                 DW Thargon                                 ;39  $37
   9+ E0D6 02 E8                                 DW TransportType10                         ;40  $38
  10+ E0D8 EF E9                                 DW Viper                                   ;41  $39
  11+ E0DA D4 EA                                 DW Worm                                    ;42  $3A
  12+ E0DC 8F EB                                 DW Rattler                                 ;43  $3B
  13+ E0DE 00 00                                 DW 0                                       ;44  $3C
  14+ E0E0 00 00                                 DW 0                                       ;45  $3D
  15+ E0E2 00 00                                 DW 0                                       ;46  $3E
  16+ E0E4 00 00                                 DW 0                                       ;47  $3F
  17+ E0E6 85 E1        ShipVertexTable3:        DW Rock_HermitVertices                     ;32  $30
  18+ E0E8 66 E2                                 DW ShuttleType9Vertices                    ;33  $31
  19+ E0EA A3 E3                                 DW Shuttle_Mk_2Vertices                    ;34  $32
  20+ E0EC CC E4                                 DW SidewinderVertices                      ;35  $33
  21+ E0EE 7F E5                                 DW SplinterVertices                        ;36  $34
  22+ E0F0 DE E5                                 DW TestVectorVertices                      ;37  $35
  23+ E0F2 47 E6                                 DW ThargoidVertices                        ;38  $36
  24+ E0F4 6E E7                                 DW ThargonVertices                         ;39  $37
  25+ E0F6 21 E8                                 DW TransportType10Vertices                 ;40  $38
  26+ E0F8 0E EA                                 DW ViperVertices                           ;41  $39
  27+ E0FA F3 EA                                 DW WormVertices                            ;42  $3A
  28+ E0FC AE EB                                 DW RattlerVertices                         ;43  $3B
  29+ E0FE 00 00                                 DW 0                                       ;44  $3C
  30+ E100 00 00                                 DW 0                                       ;45  $3D
  31+ E102 00 00                                 DW 0                                       ;46  $3E
  32+ E104 00 00                                 DW 0                                       ;47  $3F
  33+ E106
  34+ E106 BB E1        ShipEdgeTable3:          DW Rock_HermitEdges                        ;32  $30
  35+ E108 D8 E2                                 DW ShuttleType9Edges                       ;33  $31
  36+ E10A 09 E4                                 DW Shuttle_Mk_2Edges                       ;34  $32
  37+ E10C 08 E5                                 DW SidewinderEdges                         ;35  $33
  38+ E10E 97 E5                                 DW SplinterEdges                           ;36  $34
  39+ E110 08 E6                                 DW TestVectorEdges                         ;37  $35
  40+ E112 BF E6                                 DW ThargoidEdges                           ;38  $36
  41+ E114 AA E7                                 DW ThargonEdges                            ;39  $37
  42+ E116 FF E8                                 DW TransportType10Edges                    ;40  $38
  43+ E118 68 EA                                 DW ViperEdges                              ;41  $39
  44+ E11A 2F EB                                 DW WormEdges                               ;42  $3A
  45+ E11C 08 EC                                 DW RattlerEdges                            ;43  $3B
  46+ E11E 00 00                                 DW 0                                       ;44  $3C
  47+ E120 00 00                                 DW 0                                       ;45  $3D
  48+ E122 00 00                                 DW 0                                       ;46  $3E
  49+ E124 00 00                                 DW 0                                       ;47  $3F
  50+ E126
  51+ E126 0F E2        ShipNormalTable3:        DW Rock_HermitNormals                      ;32  $30
  52+ E128 50 E3                                 DW ShuttleType9Normals                     ;33  $31
  53+ E12A 79 E4                                 DW Shuttle_Mk_2Normals                     ;34  $32
  54+ E12C 44 E5                                 DW SidewinderNormals                       ;35  $33
  55+ E12E AF E5                                 DW SplinterNormals                         ;36  $34
  56+ E130 18 E6                                 DW TestVectorNormals                       ;37  $35
  57+ E132 27 E7                                 DW ThargoidNormals                         ;38  $36
  58+ E134 E6 E7                                 DW ThargonNormals                          ;39  $37
  59+ E136 B7 E9                                 DW TransportType10Normals                  ;40  $38
  60+ E138 B8 EA                                 DW ViperNormals                            ;41  $39
  61+ E13A 6F EB                                 DW WormNormals                             ;42  $3A
  62+ E13C 08 EC                                 DW RattlerEdges                            ;43  $3B
  63+ E13E 00 00                                 DW 0                                       ;44  $3C
  64+ E140 00 00                                 DW 0                                       ;45  $3D
  65+ E142 00 00                                 DW 0                                       ;46  $3E
  66+ E144 00 00                                 DW 0                                       ;47  $3F
  67+ E146
  68+ E146 E1 00        ShipModelSizeTable3:     DW Rock_HermitLen                          ;32  $30
  69+ E148 3D 01                                 DW ShuttleType9Len                         ;33  $31
  70+ E14A 29 01                                 DW Shuttle_Mk_2Len                         ;34  $32
  71+ E14C B3 00                                 DW SidewinderLen                           ;35  $33
  72+ E14E 5F 00                                 DW SplinterLen                             ;36  $34
  73+ E150 69 00                                 DW TestVectorLen                           ;37  $35
  74+ E152 27 01                                 DW ThargoidLen                             ;38  $36
  75+ E154 B3 00                                 DW ThargonLen                              ;39  $37
  76+ E156 ED 01                                 DW TransportType10Len                      ;40  $38
  77+ E158 E5 00                                 DW ViperLen                                ;41  $39
  78+ E15A BB 00                                 DW WormLen                                 ;42  $3A
  79+ E15C 15 01                                 DW RattlerLen                              ;43  $3B
  80+ E15E 00 00                                 DW 0                                       ;44  $3C
  81+ E160 00 00                                 DW 0                                       ;45  $3D
  82+ E162 00 00                                 DW 0                                       ;46  $3E
  83+ E164 00 00                                 DW 0                                       ;47  $3F
  84+ E166
  85+ E166                                      include "Data/ships/Rock_Hermit.asm"
# file opened: ./Data/ships/Rock_Hermit.asm
   1++E166 07           Rock_Hermit:	        DB $07                            ; Number of cargo canisters released when destroyed
   2++E167 00 19                                DW $1900                          ; Ship's targetable area LoHi
   3++E169 BB E1                                DW Rock_HermitEdges               ; Edge Data
   4++E16B 54                                   DB Rock_HermitEdgesSize           ; Size of Edge Data
   5++E16C 00                                   DB $00                            ; Gun Vertex Byte offset
   6++E16D 32                                   DB $32                            ; Explosion Count
   7++E16E 09                                   DB Rock_HermitVertSize /6         ; Vertex Count /6
   8++E16F 36                                   DB Rock_HermitVertSize            ; Vertex Count
   9++E170 15                                   DB Rock_HermitEdgesCnt            ; Edges Count
  10++E171 00 00                                DW $0000                          ; Bounty LoHi
  11++E173 38                                   DB Rock_HermitNormalsSize         ; Face (Normal) Count
  12++E174 32                                   DB $32                            ; Range when it turns to a dot
  13++E175 B4                                   DB $B4                            ; Energy Max
  14++E176 1E                                   DB $1E                            ; Speed Max
  15++E177 0F E2                                DW Rock_HermitNormals             ; Normals
  16++E179 01                                   DB $01                            ; Q scaling
  17++E17A 02                                   DB $02                            ; Laser power and Nbr Missiles
  18++E17B 85 E1                                DW Rock_HermitVertices            ; Verticles Address
  19++E17D 00                                   DB ShipTypeNormal                 ; Ship Type
  20++E17E 00                                   DB 0                              ; NewB Tactics
  21++E17F 80                                   DB ShipCanAnger                   ; AI Flags
  22++E180 30                                   DB $30                            ; chance of ECM module
  23++E181 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E182 00 00                                DW $0000                            ; no solid data
  25++E184 00                                   DB $00                              ; no solid data
  26++E185
  27++E185
  28++E185
  29++E185 00 50 00 1F  Rock_HermitVertices:	DB $00, $50, $00, $1F, $FF, $FF
  29++E189 FF FF
  30++E18B 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF
  30++E18F FF FF
  31++E191 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  31++E195 FF FF
  32++E197 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF
  32++E19B FF FF
  33++E19D 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC
  33++E1A1 65 DC
  34++E1A3 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF
  34++E1A7 FF FF
  35++E1A9 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32
  35++E1AD 10 32
  36++E1AF 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF
  36++E1B3 FF FF
  37++E1B5 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA
  37++E1B9 98 BA
  38++E1BB
  39++E1BB
  40++E1BB              Rock_HermitVertSize: equ $ - Rock_HermitVertices
  41++E1BB
  42++E1BB
  43++E1BB
  44++E1BB 1F 72 00 04  Rock_HermitEdges:	DB $1F, $72, $00, $04
  45++E1BF 1F D6 00 10  	DB $1F, $D6, $00, $10
  46++E1C3 1F C5 0C 10  	DB $1F, $C5, $0C, $10
  47++E1C7 1F B4 08 0C  	DB $1F, $B4, $08, $0C
  48++E1CB 1F A3 04 08  	DB $1F, $A3, $04, $08
  49++E1CF 1F 32 04 18  	DB $1F, $32, $04, $18
  50++E1D3 1F 31 08 18  	DB $1F, $31, $08, $18
  51++E1D7 1F 41 08 14  	DB $1F, $41, $08, $14
  52++E1DB 1F 10 14 18  	DB $1F, $10, $14, $18
  53++E1DF 1F 60 00 14  	DB $1F, $60, $00, $14
  54++E1E3 1F 54 0C 14  	DB $1F, $54, $0C, $14
  55++E1E7 1F 20 00 18  	DB $1F, $20, $00, $18
  56++E1EB 1F 65 10 14  	DB $1F, $65, $10, $14
  57++E1EF 1F A8 04 20  	DB $1F, $A8, $04, $20
  58++E1F3 1F 87 04 1C  	DB $1F, $87, $04, $1C
  59++E1F7 1F D7 00 1C  	DB $1F, $D7, $00, $1C
  60++E1FB 1F DC 10 1C  	DB $1F, $DC, $10, $1C
  61++E1FF 1F C9 0C 1C  	DB $1F, $C9, $0C, $1C
  62++E203 1F B9 0C 20  	DB $1F, $B9, $0C, $20
  63++E207 1F BA 08 20  	DB $1F, $BA, $08, $20
  64++E20B 1F 98 1C 20  	DB $1F, $98, $1C, $20
  65++E20F
  66++E20F              Rock_HermitEdgesSize: equ $ - Rock_HermitEdges
  67++E20F
  68++E20F
  69++E20F              Rock_HermitEdgesCnt: equ Rock_HermitEdgesSize/4
  70++E20F
  71++E20F
  72++E20F 1F 09 42 51  Rock_HermitNormals:	DB $1F, $09, $42, $51
  73++E213 5F 09 42 51  	DB $5F, $09, $42, $51
  74++E217 9F 48 40 1F  	DB $9F, $48, $40, $1F
  75++E21B DF 40 49 2F  	DB $DF, $40, $49, $2F
  76++E21F 5F 2D 4F 41  	DB $5F, $2D, $4F, $41
  77++E223 1F 87 0F 23  	DB $1F, $87, $0F, $23
  78++E227 1F 26 4C 46  	DB $1F, $26, $4C, $46
  79++E22B BF 42 3B 27  	DB $BF, $42, $3B, $27
  80++E22F FF 43 0F 50  	DB $FF, $43, $0F, $50
  81++E233 7F 42 0E 4B  	DB $7F, $42, $0E, $4B
  82++E237 FF 46 50 28  	DB $FF, $46, $50, $28
  83++E23B 7F 3A 66 33  	DB $7F, $3A, $66, $33
  84++E23F 3F 51 09 43  	DB $3F, $51, $09, $43
  85++E243 3F 2F 5E 3F  	DB $3F, $2F, $5E, $3F
  86++E247
  87++E247
  88++E247              Rock_HermitNormalsSize: equ $ - Rock_HermitNormals
  89++E247              Rock_HermitLen: equ $ - Rock_Hermit
  90++E247
# file closed: ./Data/ships/Rock_Hermit.asm
  86+ E247                                      include "Data/ships/ShuttleType9.asm"
# file opened: ./Data/ships/ShuttleType9.asm
   1++E247 0F           ShuttleType9:	            DB $0F                       ; Number of cargo canisters released when destroyed
   2++E248 C4 09                                    DW $09C4                     ; Ship's targetable area LoHi
   3++E24A D8 E2                                    DW ShuttleType9Edges         ; Edge Data
   4++E24C 78                                       DB ShuttleType9EdgesSize     ; Size of Edge Data
   5++E24D 00                                       DB $00                       ; Gun Vertex Byte offset
   6++E24E 26                                       DB $26                       ; Explosion Count
   7++E24F 13                                       DB ShuttleType9VertSize /6   ; Vertex Count /6
   8++E250 72                                       DB ShuttleType9VertSize      ; Vertex Count
   9++E251 1E                                       DB ShuttleType9EdgesCnt      ; Edges Count
  10++E252 00 00                                    DW $0000                     ; Bounty LoHi
  11++E254 34                                       DB ShuttleType9NormalsSize   ; Face (Normal) Count
  12++E255 16                                       DB $16                       ; Range when it turns to a dot
  13++E256 20                                       DB $20                       ; Energy Max
  14++E257 08                                       DB $08                       ; Speed Max
  15++E258 50 E3                                    DW ShuttleType9Normals       ; Normals
  16++E25A 02                                       DB $02                       ; Q scaling
  17++E25B 00                                       DB $00                       ; Laser power and Nbr Missiles
  18++E25C 66 E2                                    DW ShuttleType9Vertices      ; Verticles Address
  19++E25E 00           	                        DB ShipTypeNormal            ; Ship Type
  20++E25F 00                                       DB 0                         ; NewB Tactics
  21++E260 00                                       DB 0                         ; AI Flags
  22++E261 80                                       DB $80                       ; chance of ECM module
  23++E262 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E263 00 00                                DW $0000                            ; no solid data
  25++E265 00                                   DB $00                              ; no solid data
  26++E266
  27++E266
  28++E266
  29++E266 00 11 17 5F  ShuttleType9Vertices:	DB $00, $11, $17, $5F, $FF, $FF ; 01
  29++E26A FF FF
  30++E26C 11 00 17 9F                          DB $11, $00, $17, $9F, $FF, $FF ; 02
  30++E270 FF FF
  31++E272 00 12 17 1F                          DB $00, $12, $17, $1F, $FF, $FF ; 03
  31++E276 FF FF
  32++E278 12 00 17 1F                          DB $12, $00, $17, $1F, $FF, $FF ; 04
  32++E27C FF FF
  33++E27E 14 14 1B FF                          DB $14, $14, $1B, $FF, $12, $39 ; 05
  33++E282 12 39
  34++E284 14 14 1B BF                          DB $14, $14, $1B, $BF, $34, $59 ; 06
  34++E288 34 59
  35++E28A 14 14 1B 3F                          DB $14, $14, $1B, $3F, $56, $79 ; 07
  35++E28E 56 79
  36++E290 14 14 1B 7F                          DB $14, $14, $1B, $7F, $17, $89 ; 08
  36++E294 17 89
  37++E296 05 00 1B 30                          DB $05, $00, $1B, $30, $99, $99 ; 09
  37++E29A 99 99
  38++E29C 00 02 1B 70                          DB $00, $02, $1B, $70, $99, $99 ; 10
  38++E2A0 99 99
  39++E2A2 05 00 1B A9                          DB $05, $00, $1B, $A9, $99, $99 ; 11
  39++E2A6 99 99
  40++E2A8 00 03 1B 29                          DB $00, $03, $1B, $29, $99, $99 ; 12
  40++E2AC 99 99
  41++E2AE 00 09 23 50                          DB $00, $09, $23, $50, $0A, $BC ; 13
  41++E2B2 0A BC
  42++E2B4 03 01 1F 47                          DB $03, $01, $1F, $47, $FF, $02 ; 14
  42++E2B8 FF 02
  43++E2BA 04 0B 19 08                          DB $04, $0B, $19, $08, $01, $F4 ; 15
  43++E2BE 01 F4
  44++E2C0 0B 04 19 08                          DB $0B, $04, $19, $08, $A1, $3F ; 16
  44++E2C4 A1 3F
  45++E2C6 03 01 1F C7                          DB $03, $01, $1F, $C7, $6B, $23 ; 17
  45++E2CA 6B 23
  46++E2CC 03 0B 19 88                          DB $03, $0B, $19, $88, $F8, $C0 ; 18
  46++E2D0 F8 C0
  47++E2D2 0A 04 19 88                          DB $0A, $04, $19, $88, $4F, $18 ; 19
  47++E2D6 4F 18
  48++E2D8
  49++E2D8              ShuttleType9VertSize: equ $ - ShuttleType9Vertices
  50++E2D8
  51++E2D8
  52++E2D8
  53++E2D8 1F 02 00 04  ShuttleType9Edges:	DB $1F, $02, $00, $04
  54++E2DC 1F 4A 04 08  	DB $1F, $4A, $04, $08
  55++E2E0 1F 6B 08 0C  	DB $1F, $6B, $08, $0C
  56++E2E4 1F 8C 00 0C  	DB $1F, $8C, $00, $0C
  57++E2E8 1F 18 00 1C  	DB $1F, $18, $00, $1C
  58++E2EC 18 12 00 10  	DB $18, $12, $00, $10
  59++E2F0 1F 23 04 10  	DB $1F, $23, $04, $10
  60++E2F4 18 34 04 14  	DB $18, $34, $04, $14
  61++E2F8 1F 45 08 14  	DB $1F, $45, $08, $14
  62++E2FC 0C 56 08 18  	DB $0C, $56, $08, $18
  63++E300 1F 67 0C 18  	DB $1F, $67, $0C, $18
  64++E304 18 78 0C 1C  	DB $18, $78, $0C, $1C
  65++E308 1F 39 10 14  	DB $1F, $39, $10, $14
  66++E30C 1F 59 14 18  	DB $1F, $59, $14, $18
  67++E310 1F 79 18 1C  	DB $1F, $79, $18, $1C
  68++E314 1F 19 10 1C  	DB $1F, $19, $10, $1C
  69++E318 10 0C 00 30  	DB $10, $0C, $00, $30
  70++E31C 10 0A 04 30  	DB $10, $0A, $04, $30
  71++E320 10 AB 08 30  	DB $10, $AB, $08, $30
  72++E324 10 BC 0C 30  	DB $10, $BC, $0C, $30
  73++E328 10 99 20 24  	DB $10, $99, $20, $24
  74++E32C 07 99 24 28  	DB $07, $99, $24, $28
  75++E330 09 99 28 2C  	DB $09, $99, $28, $2C
  76++E334 07 99 20 2C  	DB $07, $99, $20, $2C
  77++E338 05 BB 34 38  	DB $05, $BB, $34, $38
  78++E33C 08 BB 38 3C  	DB $08, $BB, $38, $3C
  79++E340 07 BB 34 3C  	DB $07, $BB, $34, $3C
  80++E344 05 AA 40 44  	DB $05, $AA, $40, $44
  81++E348 08 AA 44 48  	DB $08, $AA, $44, $48
  82++E34C 07 AA 40 48  	DB $07, $AA, $40, $48
  83++E350              ShuttleType9EdgesSize: equ $ - ShuttleType9Edges
  84++E350              ShuttleType9EdgesCnt: equ ShuttleType9EdgesSize/4
  85++E350
  86++E350 DF 37 37 28  ShuttleType9Normals:	DB $DF, $37, $37, $28
  87++E354 5F 00 4A 04  	DB $5F, $00, $4A, $04
  88++E358 DF 33 33 17  	DB $DF, $33, $33, $17
  89++E35C 9F 4A 00 04  	DB $9F, $4A, $00, $04
  90++E360 9F 33 33 17  	DB $9F, $33, $33, $17
  91++E364 1F 00 4A 04  	DB $1F, $00, $4A, $04
  92++E368 1F 33 33 17  	DB $1F, $33, $33, $17
  93++E36C 1F 4A 00 04  	DB $1F, $4A, $00, $04
  94++E370 5F 33 33 17  	DB $5F, $33, $33, $17
  95++E374 3F 00 00 6B  	DB $3F, $00, $00, $6B
  96++E378 9F 29 29 5A  	DB $9F, $29, $29, $5A
  97++E37C 1F 29 29 5A  	DB $1F, $29, $29, $5A
  98++E380 5F 37 37 28  	DB $5F, $37, $37, $28
  99++E384
 100++E384
 101++E384              ShuttleType9NormalsSize: equ $ - ShuttleType9Normals
 102++E384              ShuttleType9Len: equ $ - ShuttleType9
 103++E384
# file closed: ./Data/ships/ShuttleType9.asm
  87+ E384                                      include "Data/ships/Shuttle_Mk_2.asm"
# file opened: ./Data/ships/Shuttle_Mk_2.asm
   1++E384 0F           Shuttle_Mk_2:	        DB $0F                         ; Number of cargo canisters released when destroyed
   2++E385 C4 09                                DW $09C4                       ; Ship's targetable area LoHi
   3++E387 09 E4                                DW Shuttle_Mk_2Edges           ; Edge Data
   4++E389 70                                   DB Shuttle_Mk_2EdgesSize       ; Size of Edge Data
   5++E38A 00                                   DB $00                         ; Gun Vertex Byte offset
   6++E38B 26                                   DB $26                         ; Explosion Count
   7++E38C 11                                   DB Shuttle_Mk_2VertSize /6     ; Vertex Count /6
   8++E38D 66                                   DB Shuttle_Mk_2VertSize        ; Vertex Count
   9++E38E 1C                                   DB Shuttle_Mk_2EdgesCnt        ; Edges Count
  10++E38F 00 00                                DW $0000                       ; Bounty LoHi
  11++E391 34                                   DB Shuttle_Mk_2NormalsSize     ; Face (Normal) Count
  12++E392 0A                                   DB $0A                         ; Range when it turns to a dot
  13++E393 20                                   DB $20                         ; Energy Max
  14++E394 09                                   DB $09                         ; Speed Max
  15++E395 79 E4                                DW Shuttle_Mk_2Normals         ; Normals
  16++E397 02                                   DB $02                         ; Q scaling
  17++E398 00                                   DB $00                         ; Laser power and Nbr Missiles
  18++E399 A3 E3                                DW Shuttle_Mk_2Vertices        ; Verticles Address
  19++E39B 00                                   DB ShipTypeNormal              ; Ship Type
  20++E39C 00                                   DB 0                           ; NewB Tactics
  21++E39D 00                                   DB 0                           ; AI Flags
  22++E39E 80                                   DB $80                         ; chance of ECM module
  23++E39F FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E3A0 00 00                                DW $0000                            ; no solid data
  25++E3A2 00                                   DB $00                              ; no solid data
  26++E3A3
  27++E3A3
  28++E3A3
  29++E3A3 00 00 28 1F  Shuttle_Mk_2Vertices:	DB $00, $00, $28, $1F, $23, $01
  29++E3A7 23 01
  30++E3A9 00 14 1E 1F  	DB $00, $14, $1E, $1F, $34, $00
  30++E3AD 34 00
  31++E3AF 14 00 1E 9F  	DB $14, $00, $1E, $9F, $15, $00
  31++E3B3 15 00
  32++E3B5 00 14 1E 5F  	DB $00, $14, $1E, $5F, $26, $11
  32++E3B9 26 11
  33++E3BB 14 00 1E 1F  	DB $14, $00, $1E, $1F, $37, $22
  33++E3BF 37 22
  34++E3C1 14 14 14 9F  	DB $14, $14, $14, $9F, $58, $04
  34++E3C5 58 04
  35++E3C7 14 14 14 DF  	DB $14, $14, $14, $DF, $69, $15
  35++E3CB 69 15
  36++E3CD 14 14 14 5F  	DB $14, $14, $14, $5F, $7A, $26
  36++E3D1 7A 26
  37++E3D3 14 14 14 1F  	DB $14, $14, $14, $1F, $7B, $34
  37++E3D7 7B 34
  38++E3D9 00 14 28 3F  	DB $00, $14, $28, $3F, $BC, $48
  38++E3DD BC 48
  39++E3DF 14 00 28 BF  	DB $14, $00, $28, $BF, $9C, $58
  39++E3E3 9C 58
  40++E3E5 00 14 28 7F  	DB $00, $14, $28, $7F, $AC, $69
  40++E3E9 AC 69
  41++E3EB 14 00 28 3F  	DB $14, $00, $28, $3F, $BC, $7A
  41++E3EF BC 7A
  42++E3F1 04 04 28 AA  	DB $04, $04, $28, $AA, $CC, $CC
  42++E3F5 CC CC
  43++E3F7 04 04 28 EA  	DB $04, $04, $28, $EA, $CC, $CC
  43++E3FB CC CC
  44++E3FD 04 04 28 6A  	DB $04, $04, $28, $6A, $CC, $CC
  44++E401 CC CC
  45++E403 04 04 28 2A  	DB $04, $04, $28, $2A, $CC, $CC
  45++E407 CC CC
  46++E409
  47++E409              Shuttle_Mk_2VertSize: equ $ - Shuttle_Mk_2Vertices
  48++E409
  49++E409
  50++E409
  51++E409 1F 01 00 08  Shuttle_Mk_2Edges:	DB $1F, $01, $00, $08
  52++E40D 1F 12 00 0C  	DB $1F, $12, $00, $0C
  53++E411 1F 23 00 10  	DB $1F, $23, $00, $10
  54++E415 1F 30 00 04  	DB $1F, $30, $00, $04
  55++E419 1F 04 04 14  	DB $1F, $04, $04, $14
  56++E41D 1F 05 08 14  	DB $1F, $05, $08, $14
  57++E421 1F 15 08 18  	DB $1F, $15, $08, $18
  58++E425 1F 16 0C 18  	DB $1F, $16, $0C, $18
  59++E429 1F 26 0C 1C  	DB $1F, $26, $0C, $1C
  60++E42D 1F 27 10 1C  	DB $1F, $27, $10, $1C
  61++E431 1F 37 10 20  	DB $1F, $37, $10, $20
  62++E435 1F 34 04 20  	DB $1F, $34, $04, $20
  63++E439 1F 48 14 24  	DB $1F, $48, $14, $24
  64++E43D 1F 58 14 28  	DB $1F, $58, $14, $28
  65++E441 1F 59 18 28  	DB $1F, $59, $18, $28
  66++E445 1F 69 18 2C  	DB $1F, $69, $18, $2C
  67++E449 1F 6A 1C 2C  	DB $1F, $6A, $1C, $2C
  68++E44D 1F 7A 1C 30  	DB $1F, $7A, $1C, $30
  69++E451 1F 7B 20 30  	DB $1F, $7B, $20, $30
  70++E455 1F 4B 20 24  	DB $1F, $4B, $20, $24
  71++E459 1F 8C 24 28  	DB $1F, $8C, $24, $28
  72++E45D 1F 9C 28 2C  	DB $1F, $9C, $28, $2C
  73++E461 1F AC 2C 30  	DB $1F, $AC, $2C, $30
  74++E465 1F BC 30 24  	DB $1F, $BC, $30, $24
  75++E469 0A CC 34 38  	DB $0A, $CC, $34, $38
  76++E46D 0A CC 38 3C  	DB $0A, $CC, $38, $3C
  77++E471 0A CC 3C 40  	DB $0A, $CC, $3C, $40
  78++E475 0A CC 40 34  	DB $0A, $CC, $40, $34
  79++E479
  80++E479              Shuttle_Mk_2EdgesSize: equ $ - Shuttle_Mk_2Edges
  81++E479
  82++E479
  83++E479              Shuttle_Mk_2EdgesCnt: equ Shuttle_Mk_2EdgesSize/4
  84++E479
  85++E479
  86++E479 9F 27 27 4E  Shuttle_Mk_2Normals:	DB $9F, $27, $27, $4E
  87++E47D DF 27 27 4E  	DB $DF, $27, $27, $4E
  88++E481 5F 27 27 4E  	DB $5F, $27, $27, $4E
  89++E485 1F 27 27 4E  	DB $1F, $27, $27, $4E
  90++E489 1F 00 60 00  	DB $1F, $00, $60, $00
  91++E48D 9F 60 00 00  	DB $9F, $60, $00, $00
  92++E491 5F 00 60 00  	DB $5F, $00, $60, $00
  93++E495 1F 60 00 00  	DB $1F, $60, $00, $00
  94++E499 BF 42 42 16  	DB $BF, $42, $42, $16
  95++E49D FF 42 42 16  	DB $FF, $42, $42, $16
  96++E4A1 7F 42 42 16  	DB $7F, $42, $42, $16
  97++E4A5 3F 42 42 16  	DB $3F, $42, $42, $16
  98++E4A9 3F 00 00 60  	DB $3F, $00, $00, $60
  99++E4AD
 100++E4AD
 101++E4AD              Shuttle_Mk_2NormalsSize: equ $ - Shuttle_Mk_2Normals
 102++E4AD              Shuttle_Mk_2Len: equ $ - Shuttle_Mk_2
 103++E4AD
# file closed: ./Data/ships/Shuttle_Mk_2.asm
  88+ E4AD                                      include "Data/ships/Sidewinder.asm"
# file opened: ./Data/ships/Sidewinder.asm
   1++E4AD 00           Sidewinder:	            DB $00                      ; Number of cargo canisters released when destroyed
   2++E4AE 81 10                                DW $1081                    ; Ship's targetable area LoHi
   3++E4B0 08 E5                                DW SidewinderEdges          ; Edge Data
   4++E4B2 3C                                   DB SidewinderEdgesSize      ; Size of Edge Data
   5++E4B3 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E4B4 1E                                   DB $1E                      ; Explosion Count
   7++E4B5 0A                                   DB SidewinderVertSize /6    ; Vertex Count /6
   8++E4B6 3C                                   DB SidewinderVertSize       ; Vertex Count
   9++E4B7 0F                                   DB SidewinderEdgesCnt       ; Edges Count
  10++E4B8 32 00                                DW $0032                    ; Bounty LoHi
  11++E4BA 1C                                   DB SidewinderNormalsSize    ; Face (Normal) Count
  12++E4BB 14                                   DB $14                      ; Range when it turns to a dot
  13++E4BC 46                                   DB $46                      ; Energy Max
  14++E4BD 25                                   DB $25                      ; Speed Max
  15++E4BE 44 E5                                DW SidewinderNormals        ; Normals
  16++E4C0 02                                   DB $02                      ; Q scaling
  17++E4C1 11                                   DB $10 | ShipMissiles1      ; Laser power and Nbr Missiles
  18++E4C2 CC E4                                DW SidewinderVertices       ; Verticles Address
  19++E4C4 00                                   DB ShipTypeNormal           ; Ship Type
  20++E4C5 00                                   DB 0                        ; NewB Tactics
  21++E4C6 80                                   DB ShipCanAnger             ; AI Flags
  22++E4C7 30                                   DB $30                      ; chance of ECM module
  23++E4C8 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E4C9 00 00                                DW $0000                            ; no solid data
  25++E4CB 00                                   DB $00                              ; no solid data
  26++E4CC
  27++E4CC
  28++E4CC 20 00 24 9F  SidewinderVertices:	DB $20, $00, $24, $9F, $10, $54
  28++E4D0 10 54
  29++E4D2 20 00 24 1F  	DB $20, $00, $24, $1F, $20, $65
  29++E4D6 20 65
  30++E4D8 40 00 1C 3F  	DB $40, $00, $1C, $3F, $32, $66
  30++E4DC 32 66
  31++E4DE 40 00 1C BF  	DB $40, $00, $1C, $BF, $31, $44
  31++E4E2 31 44
  32++E4E4 00 10 1C 3F  	DB $00, $10, $1C, $3F, $10, $32
  32++E4E8 10 32
  33++E4EA 00 10 1C 7F  	DB $00, $10, $1C, $7F, $43, $65
  33++E4EE 43 65
  34++E4F0 0C 06 1C AF  	DB $0C, $06, $1C, $AF, $33, $33
  34++E4F4 33 33
  35++E4F6 0C 06 1C 2F  	DB $0C, $06, $1C, $2F, $33, $33
  35++E4FA 33 33
  36++E4FC 0C 06 1C 6C  	DB $0C, $06, $1C, $6C, $33, $33
  36++E500 33 33
  37++E502 0C 06 1C EC  	DB $0C, $06, $1C, $EC, $33, $33
  37++E506 33 33
  38++E508
  39++E508
  40++E508              SidewinderVertSize: equ $ - SidewinderVertices
  41++E508
  42++E508
  43++E508
  44++E508 1F 50 00 04  SidewinderEdges:	DB $1F, $50, $00, $04
  45++E50C 1F 62 04 08  	DB $1F, $62, $04, $08
  46++E510 1F 20 04 10  	DB $1F, $20, $04, $10
  47++E514 1F 10 00 10  	DB $1F, $10, $00, $10
  48++E518 1F 41 00 0C  	DB $1F, $41, $00, $0C
  49++E51C 1F 31 0C 10  	DB $1F, $31, $0C, $10
  50++E520 1F 32 08 10  	DB $1F, $32, $08, $10
  51++E524 1F 43 0C 14  	DB $1F, $43, $0C, $14
  52++E528 1F 63 08 14  	DB $1F, $63, $08, $14
  53++E52C 1F 65 04 14  	DB $1F, $65, $04, $14
  54++E530 1F 54 00 14  	DB $1F, $54, $00, $14
  55++E534 0F 33 18 1C  	DB $0F, $33, $18, $1C
  56++E538 0C 33 1C 20  	DB $0C, $33, $1C, $20
  57++E53C 0C 33 18 24  	DB $0C, $33, $18, $24
  58++E540 0C 33 20 24  	DB $0C, $33, $20, $24
  59++E544
  60++E544              SidewinderEdgesSize: equ $ - SidewinderEdges
  61++E544
  62++E544
  63++E544              SidewinderEdgesCnt: equ SidewinderEdgesSize/4
  64++E544
  65++E544
  66++E544 1F 00 20 08  SidewinderNormals:	DB $1F, $00, $20, $08
  67++E548 9F 0C 2F 06  	DB $9F, $0C, $2F, $06
  68++E54C 1F 0C 2F 06  	DB $1F, $0C, $2F, $06
  69++E550 3F 00 00 70  	DB $3F, $00, $00, $70
  70++E554 DF 0C 2F 06  	DB $DF, $0C, $2F, $06
  71++E558 5F 00 20 08  	DB $5F, $00, $20, $08
  72++E55C 5F 0C 2F 06  	DB $5F, $0C, $2F, $06
  73++E560
  74++E560
  75++E560              SidewinderNormalsSize: equ $ - SidewinderNormals
  76++E560              SidewinderLen: equ $ - Sidewinder
  77++E560
# file closed: ./Data/ships/Sidewinder.asm
  89+ E560                                      include "Data/ships/Splinter.asm"
# file opened: ./Data/ships/Splinter.asm
   1++E560 B0           Splinter:	            DB $B0                      ; Number of cargo canisters released when destroyed
   2++E561 00 01                                DW $0100                    ; Ship's targetable area LoHi
   3++E563 97 E5                                DW SplinterEdges            ; Edge Data
   4++E565 18                                   DB SplinterEdgesSize        ; Size of Edge Data
   5++E566 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E567 16                                   DB $16                      ; Explosion Count
   7++E568 04                                   DB SplinterVertSize /6      ; Vertex Count /6
   8++E569 18                                   DB SplinterVertSize         ; Vertex Count
   9++E56A 06                                   DB SplinterEdgesCnt         ; Edges Count
  10++E56B 00 00                                DW $0000                    ; Bounty LoHi
  11++E56D 10                                   DB SplinterNormalsSize      ; Face (Normal) Count
  12++E56E 08                                   DB $08                      ; Range when it turns to a dot
  13++E56F 14                                   DB $14                      ; Energy Max
  14++E570 0A                                   DB $0A                      ; Speed Max
  15++E571 AF E5                                DW SplinterNormals          ; Normals
  16++E573 05                                   DB $05                      ; Q scaling
  17++E574 00                                   DB $00                      ; Laser power and Nbr Missiles
  18++E575 7F E5                                DW SplinterVertices         ; Verticles Address
  19++E577 00                                   DB ShipTypeNormal           ; Ship Type
  20++E578 00                                   DB 0                        ; NewB Tactics
  21++E579 00                                   DB 0                        ; AI Flags
  22++E57A 00                                   DB $00                      ; chance of ECM module
  23++E57B FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E57C 00 00                                DW $0000                            ; no solid data
  25++E57E 00                                   DB $00                              ; no solid data
  26++E57F
  27++E57F
  28++E57F 18 19 10 DF  SplinterVertices:	    DB $18, $19, $10, $DF, $12, $33
  28++E583 12 33
  29++E585 00 0C 0A 3F                          DB $00, $0C, $0A, $3F, $02, $33
  29++E589 02 33
  30++E58B 0B 06 02 5F                          DB $0B, $06, $02, $5F, $01, $33
  30++E58F 01 33
  31++E591 0C 2A 07 1F                          DB $0C, $2A, $07, $1F, $01, $22
  31++E595 01 22
  32++E597              SplinterVertSize:       equ $ - SplinterVertices
  33++E597 1F 23 00 04  SplinterEdges:	        DB $1F, $23, $00, $04
  34++E59B 1F 03 04 08                          DB $1F, $03, $04, $08
  35++E59F 1F 01 08 0C                          DB $1F, $01, $08, $0C
  36++E5A3 1F 12 0C 00                          DB $1F, $12, $0C, $00
  37++E5A7 1F 13 00 08                          DB $1F, $13, $00, $08
  38++E5AB 1F 02 0C 04                          DB $1F, $02, $0C, $04
  39++E5AF              SplinterEdgesSize:      equ $ - SplinterEdges
  40++E5AF              SplinterEdgesCnt:       equ SplinterEdgesSize/4
  41++E5AF 1F 23 00 04  SplinterNormals:	    DB $1F, $23, $00, $04
  42++E5B3 1F 03 04 08                          DB $1F, $03, $04, $08
  43++E5B7 1F 01 08 0C                          DB $1F, $01, $08, $0C
  44++E5BB 1F 12 0C 00                          DB $1F, $12, $0C, $00
  45++E5BF              SplinterNormalsSize:    equ $ - SplinterNormals
  46++E5BF              SplinterLen:            equ $ - Splinter
  47++E5BF
# file closed: ./Data/ships/Splinter.asm
  90+ E5BF                                      include "Data/ships/TestVector.asm"
# file opened: ./Data/ships/TestVector.asm
   1++E5BF 03           TestVector:             DB $03                      ; Number of cargo canisters released when destroyed
   2++E5C0 23 41                                DW $4123                    ; Ship's targetable area LoHi
   3++E5C2 08 E6                                DW TestVectorEdges          ; Edge Data
   4++E5C4 10                                   DB TestVectorEdgesSize      ; Size of Edge Data
   5++E5C5 54                                   DB $54                      ; Gun Vertex Byte offset
   6++E5C6 2A                                   DB $2A                      ; Explosion Count
   7++E5C7 07                                   DB TestVectorVertSize /6    ; Vertex Count /6
   8++E5C8 2A                                   DB TestVectorVertSize       ; Vertex Count
   9++E5C9 04                                   DB TestVectorEdgesCnt       ; Edges Count
  10++E5CA 00 00                                DW $0000                    ; Bounty LoHi
  11++E5CC 10                                   DB TestVectorNormalsSize    ; Face (Normal) Count
  12++E5CD 32                                   DB $32                      ; Range when it turns to a dot
  13++E5CE 96                                   DB $96                      ; Energy Max
  14++E5CF 1C                                   DB $1C                      ; Speed Max
  15++E5D0 18 E6                                DW TestVectorNormals        ; Normals
  16++E5D2 04                                   DB $04                      ; Q scaling
  17++E5D3 01                                   DB $01                      ; Laser power and Nbr Missiles
  18++E5D4 DE E5                                DW TestVectorVertices       ; Verticles Address
  19++E5D6 FE                                   DB ShipTypeDebug            ; Ship Type
  20++E5D7 00                                   DB 0                        ; NewB Tactics
  21++E5D8 00                                   DB 0                        ; AI Flags
  22++E5D9 00                                   DB $00                      ; chance of ECM module
  23++E5DA FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E5DB 00 00                                DW $0000                            ; no solid data
  25++E5DD 00                                   DB $00                              ; no solid data
  26++E5DE
  27++E5DE
  28++E5DE 00 40 00 1F  TestVectorVertices	    DB $00,$40,$00,$1F,$00,$00
  28++E5E2 00 00
  29++E5E4 00 20 00 1F                          DB $00,$20,$00,$1F,$00,$00
  29++E5E8 00 00
  30++E5EA 40 00 00 1F                          DB $40,$00,$00,$1F,$01,$01
  30++E5EE 01 01
  31++E5F0 20 00 00 1F                          DB $20,$00,$00,$1F,$01,$01
  31++E5F4 01 01
  32++E5F6 00 00 40 1F                          DB $00,$00,$40,$1F,$02,$02
  32++E5FA 02 02
  33++E5FC 00 00 20 1F                          DB $00,$00,$20,$1F,$02,$02
  33++E600 02 02
  34++E602 00 00 00 1F                          DB $00,$00,$00,$1F,$03,$03
  34++E606 03 03
  35++E608              TestVectorVertSize      equ $  - TestVectorVertices
  36++E608 1F 00 00 04  TestVectorEdges		    DB $1F,$00,$00,$04
  37++E60C 1F 00 08 0C                          DB $1F,$00,$08,$0C
  38++E610 1F 00 10 14                          DB $1F,$00,$10,$14
  39++E614 1F 00 18 18                          DB $1F,$00,$18,$18
  40++E618              TestVectorEdgesSize     equ $  - TestVectorEdges
  41++E618              TestVectorEdgesCnt      equ TestVectorEdgesSize/4
  42++E618              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  43++E618 1F 00 10 00  TestVectorNormals	    DB $1F,$00,$10,$00
  44++E61C 1F 10 00 00                          DB $1F,$10,$00,$00
  45++E620 1F 00 00 10                          DB $1F,$00,$00,$10
  46++E624 1F 00 00 10                          DB $1F,$00,$00,$10
  47++E628              TestVectorNormalsSize   equ $  - TestVectorNormals
  48++E628              TestVectorLen           equ $  - TestVector
  49++E628
# file closed: ./Data/ships/TestVector.asm
  91+ E628                                      include "Data/ships/Thargoid.asm"
# file opened: ./Data/ships/Thargoid.asm
   1++E628 00           Thargoid:	            DB $00                                                      ; Number of cargo canisters released when destroyed
   2++E629 49 26                                DW $2649                                                    ; Ship's targetable area LoHi
   3++E62B BF E6                                DW ThargoidEdges                                            ; Edge Data
   4++E62D 68                                   DB ThargoidEdgesSize                                        ; Size of Edge Data
   5++E62E 3C                                   DB $3C                                                      ; Gun Vertex Byte offset
   6++E62F 26                                   DB $26                                                      ; Explosion Count
   7++E630 14                                   DB ThargoidVertSize /6                                      ; Vertex Count /6
   8++E631 78                                   DB ThargoidVertSize                                         ; Vertex Count
   9++E632 1A                                   DB ThargoidEdgesCnt                                         ; Edges Count
  10++E633 F4 01                                DW $01F4                                                    ; Bounty LoHi
  11++E635 28                                   DB ThargoidNormalsSize                                      ; Face (Normal) Count
  12++E636 37                                   DB $37                                                      ; Range when it turns to a dot
  13++E637 F0                                   DB $F0                                                      ; Energy Max
  14++E638 27                                   DB $27                                                      ; Speed Max
  15++E639 27 E7                                DW ThargoidNormals                                          ; Normals
  16++E63B 02                                   DB $02                                                      ; Q scaling
  17++E63C 16                                   DB $16                                                      ; Laser power and Nbr Missiles
  18++E63D 47 E6                                DW ThargoidVertices                                         ; Verticles Address
  19++E63F 00                                   DB 0                                                        ; Ship Type
  20++E640 00                                   DB 0                                                        ; NewB Tactics
  21++E641 FC                                   DB ShipCanAnger | ShipFighterBaySize  | ShipFighterThargon  ; AI Flags
  22++E642 FF                                   DB $FF                                                      ; chance of ECM module
  23++E643 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E644 00 00                                DW $0000                            ; no solid data
  25++E646 00                                   DB $00                              ; no solid data
  26++E647
  27++E647
  28++E647 20 30 30 5F  ThargoidVertices:	    DB $20, $30, $30, $5F, $40, $88 ; 01
  28++E64B 40 88
  29++E64D 20 44 00 5F                          DB $20, $44, $00, $5F, $10, $44 ; 02
  29++E651 10 44
  30++E653 20 30 30 7F                          DB $20, $30, $30, $7F, $21, $44 ; 03
  30++E657 21 44
  31++E659 20 00 44 3F                          DB $20, $00, $44, $3F, $32, $44 ; 04
  31++E65D 32 44
  32++E65F 20 30 30 3F                          DB $20, $30, $30, $3F, $43, $55 ; 05
  32++E663 43 55
  33++E665 20 44 00 1F                          DB $20, $44, $00, $1F, $54, $66 ; 06
  33++E669 54 66
  34++E66B 20 30 30 1F                          DB $20, $30, $30, $1F, $64, $77 ; 07
  34++E66F 64 77
  35++E671 20 00 44 1F                          DB $20, $00, $44, $1F, $74, $88 ; 08
  35++E675 74 88
  36++E677 18 74 74 DF                          DB $18, $74, $74, $DF, $80, $99 ; 09
  36++E67B 80 99
  37++E67D 18 A4 00 DF                          DB $18, $A4, $00, $DF, $10, $99 ; 10
  37++E681 10 99
  38++E683 18 74 74 FF                          DB $18, $74, $74, $FF, $21, $99 ; 11
  38++E687 21 99
  39++E689 18 00 A4 BF                          DB $18, $00, $A4, $BF, $32, $99 ; 12
  39++E68D 32 99
  40++E68F 18 74 74 BF                          DB $18, $74, $74, $BF, $53, $99 ; 13
  40++E693 53 99
  41++E695 18 A4 00 9F                          DB $18, $A4, $00, $9F, $65, $99 ; 14
  41++E699 65 99
  42++E69B 18 74 74 9F                          DB $18, $74, $74, $9F, $76, $99 ; 15
  42++E69F 76 99
  43++E6A1 18 00 A4 9F                          DB $18, $00, $A4, $9F, $87, $99 ; 16
  43++E6A5 87 99
  44++E6A7 18 40 50 9E                          DB $18, $40, $50, $9E, $99, $99 ; 17
  44++E6AB 99 99
  45++E6AD 18 40 50 BE                          DB $18, $40, $50, $BE, $99, $99 ; 18
  45++E6B1 99 99
  46++E6B3 18 40 50 FE                          DB $18, $40, $50, $FE, $99, $99 ; 19
  46++E6B7 99 99
  47++E6B9 18 40 50 DE                          DB $18, $40, $50, $DE, $99, $99 ; 20
  47++E6BD 99 99
  48++E6BF
  49++E6BF              ThargoidVertSize: equ $ - ThargoidVertices
  50++E6BF
  51++E6BF
  52++E6BF
  53++E6BF 1F 84 00 1C  ThargoidEdges:	DB $1F, $84, $00, $1C           ;01
  54++E6C3 1F 40 00 04                  DB $1F, $40, $00, $04           ;02
  55++E6C7 1F 41 04 08                  DB $1F, $41, $04, $08           ;03
  56++E6CB 1F 42 08 0C                  DB $1F, $42, $08, $0C           ;04
  57++E6CF 1F 43 0C 10                  DB $1F, $43, $0C, $10           ;05
  58++E6D3 1F 54 10 14                  DB $1F, $54, $10, $14           ;06
  59++E6D7 1F 64 14 18                  DB $1F, $64, $14, $18           ;07
  60++E6DB 1F 74 18 1C                  DB $1F, $74, $18, $1C           ;08
  61++E6DF 1F 80 00 20                  DB $1F, $80, $00, $20           ;09
  62++E6E3 1F 10 04 24                  DB $1F, $10, $04, $24           ;10
  63++E6E7 1F 21 08 28                  DB $1F, $21, $08, $28           ;11
  64++E6EB 1F 32 0C 2C                  DB $1F, $32, $0C, $2C           ;12
  65++E6EF 1F 53 10 30                  DB $1F, $53, $10, $30           ;13
  66++E6F3 1F 65 14 34                  DB $1F, $65, $14, $34           ;14
  67++E6F7 1F 76 18 38                  DB $1F, $76, $18, $38           ;15
  68++E6FB 1F 87 1C 3C                  DB $1F, $87, $1C, $3C           ;16
  69++E6FF 1F 98 20 3C                  DB $1F, $98, $20, $3C           ;17
  70++E703 1F 90 20 24                  DB $1F, $90, $20, $24           ;18
  71++E707 1F 91 24 28                  DB $1F, $91, $24, $28
  72++E70B 1F 92 28 2C                  DB $1F, $92, $28, $2C
  73++E70F 1F 93 2C 30                  DB $1F, $93, $2C, $30
  74++E713 1F 95 30 34                  DB $1F, $95, $30, $34
  75++E717 1F 96 34 38                  DB $1F, $96, $34, $38
  76++E71B 1F 97 38 3C                  DB $1F, $97, $38, $3C
  77++E71F 1E 99 40 44                  DB $1E, $99, $40, $44
  78++E723 1E 99 48 4C                  DB $1E, $99, $48, $4C
  79++E727
  80++E727              ThargoidEdgesSize: equ $ - ThargoidEdges
  81++E727
  82++E727              ThargoidEdgesCnt: equ ThargoidEdgesSize/4
  83++E727
  84++E727 5F 67 3C 19  ThargoidNormals:	DB $5F, $67, $3C, $19
  85++E72B 7F 67 3C 19  	DB $7F, $67, $3C, $19
  86++E72F 7F 67 19 3C  	DB $7F, $67, $19, $3C
  87++E733 3F 67 19 3C  	DB $3F, $67, $19, $3C
  88++E737 1F 40 00 00  	DB $1F, $40, $00, $00
  89++E73B 3F 67 3C 19  	DB $3F, $67, $3C, $19
  90++E73F 1F 67 3C 19  	DB $1F, $67, $3C, $19
  91++E743 1F 67 19 3C  	DB $1F, $67, $19, $3C
  92++E747 5F 67 19 3C  	DB $5F, $67, $19, $3C
  93++E74B 9F 30 00 00  	DB $9F, $30, $00, $00
  94++E74F
  95++E74F
  96++E74F              ThargoidNormalsSize: equ $ - ThargoidNormals
  97++E74F              ThargoidLen: equ $ - Thargoid
  98++E74F
# file closed: ./Data/ships/Thargoid.asm
  92+ E74F                                      include "Data/ships/Thargon.asm"
# file opened: ./Data/ships/Thargon.asm
   1++E74F F0           Thargon:	            DB $F0                          ; Number of cargo canisters released when destroyed
   2++E750 40 06                                DW $0640                        ; Ship's targetable area LoHi
   3++E752 AA E7                                DW ThargonEdges                 ; Edge Data
   4++E754 3C                                   DB ThargonEdgesSize             ; Size of Edge Data
   5++E755 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E756 12                                   DB $12                          ; Explosion Count
   7++E757 0A                                   DB ThargonVertSize /6           ; Vertex Count /6
   8++E758 3C                                   DB ThargonVertSize              ; Vertex Count
   9++E759 0F                                   DB ThargonEdgesCnt              ; Edges Count
  10++E75A 32 00                                DW $0032                        ; Bounty LoHi
  11++E75C 1C                                   DB ThargonNormalsSize           ; Face (Normal) Count
  12++E75D 14                                   DB $14                          ; Range when it turns to a dot
  13++E75E 14                                   DB $14                          ; Energy Max
  14++E75F 1E                                   DB $1E                          ; Speed Max
  15++E760 E6 E7                                DW ThargonNormals               ; Normals
  16++E762 02                                   DB $02                          ; Q scaling
  17++E763 10                                   DB $10                          ; Laser power and Nbr Missiles
  18++E764 6E E7                                DW ThargonVertices              ; Verticles Address
  19++E766 00                                   DB 0                            ; Ship Type
  20++E767 00                                   DB 0                            ; NewB Tactics
  21++E768 80                                   DB ShipCanAnger                 ; AI Flags
  22++E769 00                                   DB $00                          ; chance of ECM module
  23++E76A FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E76B 00 00                                DW $0000                            ; no solid data
  25++E76D 00                                   DB $00                              ; no solid data
  26++E76E
  27++E76E
  28++E76E
  29++E76E 09 00 28 9F  ThargonVertices:	    DB $09, $00, $28, $9F, $01, $55
  29++E772 01 55
  30++E774 09 26 0C DF                          DB $09, $26, $0C, $DF, $01, $22
  30++E778 01 22
  31++E77A 09 18 20 FF                          DB $09, $18, $20, $FF, $02, $33
  31++E77E 02 33
  32++E780 09 18 20 BF                          DB $09, $18, $20, $BF, $03, $44
  32++E784 03 44
  33++E786 09 26 0C 9F                          DB $09, $26, $0C, $9F, $04, $55
  33++E78A 04 55
  34++E78C 09 00 08 3F                          DB $09, $00, $08, $3F, $15, $66
  34++E790 15 66
  35++E792 09 0A 0F 7F                          DB $09, $0A, $0F, $7F, $12, $66
  35++E796 12 66
  36++E798 09 06 1A 7F                          DB $09, $06, $1A, $7F, $23, $66
  36++E79C 23 66
  37++E79E 09 06 1A 3F                          DB $09, $06, $1A, $3F, $34, $66
  37++E7A2 34 66
  38++E7A4 09 0A 0F 3F                          DB $09, $0A, $0F, $3F, $45, $66
  38++E7A8 45 66
  39++E7AA
  40++E7AA              ThargonVertSize:        equ $ - ThargonVertices
  41++E7AA
  42++E7AA
  43++E7AA 1F 10 00 04  ThargonEdges:	        DB $1F, $10, $00, $04
  44++E7AE 1F 20 04 08                          DB $1F, $20, $04, $08
  45++E7B2 1F 30 08 0C                          DB $1F, $30, $08, $0C
  46++E7B6 1F 40 0C 10                          DB $1F, $40, $0C, $10
  47++E7BA 1F 50 00 10                          DB $1F, $50, $00, $10
  48++E7BE 1F 51 00 14                          DB $1F, $51, $00, $14
  49++E7C2 1F 21 04 18                          DB $1F, $21, $04, $18
  50++E7C6 1F 32 08 1C                          DB $1F, $32, $08, $1C
  51++E7CA 1F 43 0C 20                          DB $1F, $43, $0C, $20
  52++E7CE 1F 54 10 24                          DB $1F, $54, $10, $24
  53++E7D2 1F 61 14 18                          DB $1F, $61, $14, $18
  54++E7D6 1F 62 18 1C                          DB $1F, $62, $18, $1C
  55++E7DA 1F 63 1C 20                          DB $1F, $63, $1C, $20
  56++E7DE 1F 64 20 24                          DB $1F, $64, $20, $24
  57++E7E2 1F 65 24 14                          DB $1F, $65, $24, $14
  58++E7E6
  59++E7E6              ThargonEdgesSize:       equ $ - ThargonEdges
  60++E7E6
  61++E7E6
  62++E7E6              ThargonEdgesCnt:        equ ThargonEdgesSize/4
  63++E7E6
  64++E7E6
  65++E7E6 9F 24 00 00  ThargonNormals:	        DB $9F, $24, $00, $00
  66++E7EA 5F 14 05 07                          DB $5F, $14, $05, $07
  67++E7EE 7F 2E 2A 0E                          DB $7F, $2E, $2A, $0E
  68++E7F2 3F 24 00 68                          DB $3F, $24, $00, $68
  69++E7F6 3F 2E 2A 0E                          DB $3F, $2E, $2A, $0E
  70++E7FA 1F 14 05 07                          DB $1F, $14, $05, $07
  71++E7FE 1F 24 00 00                          DB $1F, $24, $00, $00
  72++E802
  73++E802
  74++E802              ThargonNormalsSize:     equ $ - ThargonNormals
  75++E802              ThargonLen:             equ $ - Thargon
  76++E802
# file closed: ./Data/ships/Thargon.asm
  93+ E802                                      include "Data/ships/TransportType10.asm"
# file opened: ./Data/ships/TransportType10.asm
   1++E802 00           TransportType10:	    DB $00                             ; Number of cargo canisters released when destroyed
   2++E803 C4 09                                DW $09C4                           ; Ship's targetable area LoHi
   3++E805 FF E8                                DW TransportType10Edges            ; Edge Data
   4++E807 B8                                   DB TransportType10EdgesSize        ; Size of Edge Data
   5++E808 30                                   DB $30                             ; Gun Vertex Byte offset
   6++E809 1A                                   DB $1A                             ; Explosion Count
   7++E80A 25                                   DB TransportType10VertSize /6      ; Vertex Count /6
   8++E80B DE                                   DB TransportType10VertSize         ; Vertex Count
   9++E80C 2E                                   DB TransportType10EdgesCnt         ; Edges Count
  10++E80D 00 00                                DW $0000                           ; Bounty LoHi
  11++E80F 38                                   DB TransportType10NormalsSize      ; Face (Normal) Count
  12++E810 10                                   DB $10                             ; Range when it turns to a dot
  13++E811 20                                   DB $20                             ; Energy Max
  14++E812 0A                                   DB $0A                             ; Speed Max
  15++E813 B7 E9                                DW TransportType10Normals          ; Normals
  16++E815 02                                   DB $02                             ; Q scaling
  17++E816 00                                   DB $00                             ; Laser power and Nbr Missiles
  18++E817 21 E8                                DW TransportType10Vertices         ; Verticles Address
  19++E819 00                                   DB ShipTypeNormal                  ; Ship Type
  20++E81A 00                                   DB 0                               ; NewB Tactics
  21++E81B 00                                   DB 0                               ; AI Flags
  22++E81C FF                                   DB $FF                             ; chance of ECM module
  23++E81D FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E81E 00 00                                DW $0000                            ; no solid data
  25++E820 00                                   DB $00                              ; no solid data
  26++E821
  27++E821
  28++E821 00 0A 1A 3F  TransportType10Vertices:DB $00, $0A, $1A, $3F, $06, $77     ;01
  28++E825 06 77
  29++E827 19 04 1A BF                          DB $19, $04, $1A, $BF, $01, $77     ;02
  29++E82B 01 77
  30++E82D 1C 03 1A FF                          DB $1C, $03, $1A, $FF, $01, $22     ;03
  30++E831 01 22
  31++E833 19 08 1A FF                          DB $19, $08, $1A, $FF, $02, $33     ;04
  31++E837 02 33
  32++E839 1A 08 1A 7F                          DB $1A, $08, $1A, $7F, $03, $44     ;05
  32++E83D 03 44
  33++E83F 1D 03 1A 7F                          DB $1D, $03, $1A, $7F, $04, $55     ;06
  33++E843 04 55
  34++E845 1A 04 1A 3F                          DB $1A, $04, $1A, $3F, $05, $66     ;07
  34++E849 05 66
  35++E84B 00 06 0C 13                          DB $00, $06, $0C, $13, $FF, $FF     ;08
  35++E84F FF FF
  36++E851 1E 01 0C DF                          DB $1E, $01, $0C, $DF, $17, $89     ;09
  36++E855 17 89
  37++E857 21 08 0C DF                          DB $21, $08, $0C, $DF, $12, $39     ;10
  37++E85B 12 39
  38++E85D 21 08 0C 5F                          DB $21, $08, $0C, $5F, $34, $5A     ;11
  38++E861 34 5A
  39++E863 1E 01 0C 5F                          DB $1E, $01, $0C, $5F, $56, $AB     ;12
  39++E867 56 AB
  40++E869 0B 02 1E DF                          DB $0B, $02, $1E, $DF, $89, $CD     ;13
  40++E86D 89 CD
  41++E86F 0D 08 1E DF                          DB $0D, $08, $1E, $DF, $39, $DD     ;14
  41++E873 39 DD
  42++E875 0E 08 1E 5F                          DB $0E, $08, $1E, $5F, $3A, $DD     ;15
  42++E879 3A DD
  43++E87B 0B 02 1E 5F                          DB $0B, $02, $1E, $5F, $AB, $CD     ;16
  43++E87F AB CD
  44++E881 05 06 02 87                          DB $05, $06, $02, $87, $77, $77     ;17
  44++E885 77 77
  45++E887 12 03 02 87                          DB $12, $03, $02, $87, $77, $77     ;18
  45++E88B 77 77
  46++E88D 05 07 07 A7                          DB $05, $07, $07, $A7, $77, $77     ;19
  46++E891 77 77
  47++E893 12 04 07 A7                          DB $12, $04, $07, $A7, $77, $77     ;20
  47++E897 77 77
  48++E899 0B 06 0E A7                          DB $0B, $06, $0E, $A7, $77, $77     ;21
  48++E89D 77 77
  49++E89F 0B 05 07 A7                          DB $0B, $05, $07, $A7, $77, $77     ;22
  49++E8A3 77 77
  50++E8A5 05 07 0E 27                          DB $05, $07, $0E, $27, $66, $66     ;23
  50++E8A9 66 66
  51++E8AB 12 04 0E 27                          DB $12, $04, $0E, $27, $66, $66     ;24
  51++E8AF 66 66
  52++E8B1 0B 05 07 27                          DB $0B, $05, $07, $27, $66, $66     ;25
  52++E8B5 66 66
  53++E8B7 05 06 03 27                          DB $05, $06, $03, $27, $66, $66     ;26
  53++E8BB 66 66
  54++E8BD 12 03 03 27                          DB $12, $03, $03, $27, $66, $66     ;27
  54++E8C1 66 66
  55++E8C3 0B 04 08 07                          DB $0B, $04, $08, $07, $66, $66     ;28
  55++E8C7 66 66
  56++E8C9 0B 05 03 27                          DB $0B, $05, $03, $27, $66, $66     ;29
  56++E8CD 66 66
  57++E8CF 10 08 0D E6                          DB $10, $08, $0D, $E6, $33, $33     ;30
  57++E8D3 33 33
  58++E8D5 10 08 10 C6                          DB $10, $08, $10, $C6, $33, $33     ;31
  58++E8D9 33 33
  59++E8DB 11 08 0D 66                          DB $11, $08, $0D, $66, $33, $33     ;32
  59++E8DF 33 33
  60++E8E1 11 08 10 46                          DB $11, $08, $10, $46, $33, $33     ;33
  60++E8E5 33 33
  61++E8E7 0D 03 1A E8                          DB $0D, $03, $1A, $E8, $00, $00     ;34
  61++E8EB 00 00
  62++E8ED 0D 03 1A 68                          DB $0D, $03, $1A, $68, $00, $00     ;35
  62++E8F1 00 00
  63++E8F3 09 03 1A 25                          DB $09, $03, $1A, $25, $00, $00     ;36
  63++E8F7 00 00
  64++E8F9 08 03 1A A5                          DB $08, $03, $1A, $A5, $00, $00     ;37
  64++E8FD 00 00
  65++E8FF
  66++E8FF              TransportType10VertSize: equ $ - TransportType10Vertices
  67++E8FF
  68++E8FF
  69++E8FF
  70++E8FF 1F 07 00 04  TransportType10Edges:	DB $1F, $07, $00, $04               ;01
  71++E903 1F 01 04 08                          DB $1F, $01, $04, $08               ;02
  72++E907 1F 02 08 0C                          DB $1F, $02, $08, $0C               ;03
  73++E90B 1F 03 0C 10                          DB $1F, $03, $0C, $10               ;04
  74++E90F 1F 04 10 14                          DB $1F, $04, $10, $14               ;05
  75++E913 1F 05 14 18                          DB $1F, $05, $14, $18               ;06
  76++E917 1F 06 00 18                          DB $1F, $06, $00, $18               ;07
  77++E91B 10 67 00 1C                          DB $10, $67, $00, $1C               ;08
  78++E91F 1F 17 04 20                          DB $1F, $17, $04, $20               ;09
  79++E923 0B 12 08 24                          DB $0B, $12, $08, $24               ;10
  80++E927 1F 23 0C 24                          DB $1F, $23, $0C, $24               ;11
  81++E92B 1F 34 10 28                          DB $1F, $34, $10, $28               ;12
  82++E92F 0B 45 14 28                          DB $0B, $45, $14, $28               ;13
  83++E933 1F 56 18 2C                          DB $1F, $56, $18, $2C               ;14
  84++E937 11 78 1C 20                          DB $11, $78, $1C, $20               ;15
  85++E93B 11 19 20 24                          DB $11, $19, $20, $24               ;16
  86++E93F 11 5A 28 2C                          DB $11, $5A, $28, $2C               ;17
  87++E943 11 6B 1C 2C                          DB $11, $6B, $1C, $2C               ;18
  88++E947 13 BC 1C 3C                          DB $13, $BC, $1C, $3C               ;19
  89++E94B 13 8C 1C 30                          DB $13, $8C, $1C, $30               ;20
  90++E94F 10 89 20 30                          DB $10, $89, $20, $30               ;21
  91++E953 1F 39 24 34                          DB $1F, $39, $24, $34               ;22
  92++E957 1F 3A 28 38                          DB $1F, $3A, $28, $38               ;23
  93++E95B 10 AB 2C 3C                          DB $10, $AB, $2C, $3C               ;24
  94++E95F 1F 9D 30 34                          DB $1F, $9D, $30, $34               ;25
  95++E963 1F 3D 34 38                          DB $1F, $3D, $34, $38               ;26
  96++E967 1F AD 38 3C                          DB $1F, $AD, $38, $3C               ;27
  97++E96B 1F CD 30 3C                          DB $1F, $CD, $30, $3C               ;28
  98++E96F 07 77 40 44                          DB $07, $77, $40, $44               ;29
  99++E973 07 77 48 4C                          DB $07, $77, $48, $4C               ;30
 100++E977 07 77 4C 50                          DB $07, $77, $4C, $50               ;31
 101++E97B 07 77 48 50                          DB $07, $77, $48, $50               ;32
 102++E97F 07 77 50 54                          DB $07, $77, $50, $54               ;33
 103++E983 07 66 58 5C                          DB $07, $66, $58, $5C               ;34
 104++E987 07 66 5C 60                          DB $07, $66, $5C, $60               ;35
 105++E98B 07 66 60 58                          DB $07, $66, $60, $58               ;36
 106++E98F 07 66 64 68                          DB $07, $66, $64, $68               ;37
 107++E993 07 66 68 6C                          DB $07, $66, $68, $6C               ;38
 108++E997 07 66 64 6C                          DB $07, $66, $64, $6C               ;39
 109++E99B 07 66 6C 70                          DB $07, $66, $6C, $70               ;40
 110++E99F 06 33 74 78                          DB $06, $33, $74, $78               ;41
 111++E9A3 06 33 7C 80                          DB $06, $33, $7C, $80               ;42
 112++E9A7 08 00 84 88                          DB $08, $00, $84, $88               ;43
 113++E9AB 05 00 88 8C                          DB $05, $00, $88, $8C               ;44
 114++E9AF 05 00 8C 90                          DB $05, $00, $8C, $90               ;45
 115++E9B3 05 00 90 84                          DB $05, $00, $90, $84               ;46
 116++E9B7
 117++E9B7              TransportType10EdgesSize: equ $ - TransportType10Edges
 118++E9B7
 119++E9B7
 120++E9B7              TransportType10EdgesCnt: equ TransportType10EdgesSize/4
 121++E9B7
 122++E9B7
 123++E9B7 3F 00 00 67  TransportType10Normals:	DB $3F, $00, $00, $67               ;01
 124++E9BB BF 6F 30 07                          DB $BF, $6F, $30, $07               ;02
 125++E9BF FF 69 3F 15                          DB $FF, $69, $3F, $15               ;03
 126++E9C3 5F 00 22 00                          DB $5F, $00, $22, $00               ;04
 127++E9C7 7F 69 3F 15                          DB $7F, $69, $3F, $15               ;05
 128++E9CB 3F 6F 30 07                          DB $3F, $6F, $30, $07               ;06
 129++E9CF 1F 08 20 03                          DB $1F, $08, $20, $03               ;07
 130++E9D3 9F 08 20 03                          DB $9F, $08, $20, $03               ;08
 131++E9D7 93 08 22 0B                          DB $93, $08, $22, $0B               ;09
 132++E9DB 9F 4B 20 4F                          DB $9F, $4B, $20, $4F               ;10
 133++E9DF 1F 4B 20 4F                          DB $1F, $4B, $20, $4F               ;11
 134++E9E3 13 08 22 0B                          DB $13, $08, $22, $0B               ;12
 135++E9E7 1F 00 26 11                          DB $1F, $00, $26, $11               ;13
 136++E9EB 1F 00 00 79                          DB $1F, $00, $00, $79               ;14
 137++E9EF
 138++E9EF
 139++E9EF              TransportType10NormalsSize: equ $ - TransportType10Normals
 140++E9EF              TransportType10Len: equ $ - TransportType10
 141++E9EF
# file closed: ./Data/ships/TransportType10.asm
  94+ E9EF                                      include "Data/ships/Viper.asm"
# file opened: ./Data/ships/Viper.asm
   1++E9EF 00           Viper:                  DB $00                         ; Number of cargo canisters released when destroyed
   2++E9F0 F9 15                                DW $15F9                       ; Ship's targetable area LoHi
   3++E9F2 68 EA                                DW ViperEdges                  ; Edge Data
   4++E9F4 50                                   DB ViperEdgesSize              ; Size of Edge Data
   5++E9F5 00                                   DB $00                         ; Gun Vertex Byte offset
   6++E9F6 2A                                   DB $2A                         ; Explosion Count
   7++E9F7 0F                                   DB ViperVertSize /6            ; Vertex Count /6
   8++E9F8 5A                                   DB ViperVertSize               ; Vertex Count
   9++E9F9 14                                   DB ViperEdgesCnt               ; Edges Count
  10++E9FA 00 00                                DW $0000                       ; Bounty LoHi
  11++E9FC 1C                                   DB ViperNormalsSize            ; Face (Normal) Count
  12++E9FD 17                                   DB $17 ;$17 before                        ; Range when it turns to a dot
  13++E9FE 64                                   DB $64                         ; Energy Max
  14++E9FF 20                                   DB $20                         ; Speed Max
  15++EA00 B8 EA                                DW ViperNormals                ; Normals
  16++EA02 01                                   DB $01                         ; Q scaling
  17++EA03 11                                   DB $11                         ; Laser power and Nbr Missiles
  18++EA04 0E EA                                DW ViperVertices               ; Verticles Address
  19++EA06 00                                   DB ShipTypeNormal              ; Ship Type
  20++EA07 00                                   DB 0                           ; NewB Tactics
  21++EA08 80                                   DB ShipCanAnger                ; AI Flags
  22++EA09 FF                                   DB $FF                         ; chance of ECM module
  23++EA0A FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EA0B 00 00                                DW $0000                            ; no solid data
  25++EA0D 00                                   DB $00                              ; no solid data
  26++EA0E
  27++EA0E
  28++EA0E 00 00 48 1F  ViperVertices:          DB $00, $00, $48, $1F, $21, $43
  28++EA12 21 43
  29++EA14 00 10 18 1E                          DB $00, $10, $18, $1E, $10, $22
  29++EA18 10 22
  30++EA1A 00 10 18 5E                          DB $00, $10, $18, $5E, $43, $55
  30++EA1E 43 55
  31++EA20 30 00 18 3F                          DB $30, $00, $18, $3F, $42, $66
  31++EA24 42 66
  32++EA26 30 00 18 BF                          DB $30, $00, $18, $BF, $31, $66
  32++EA2A 31 66
  33++EA2C 18 10 18 7E                          DB $18, $10, $18, $7E, $54, $66
  33++EA30 54 66
  34++EA32 18 10 18 FE                          DB $18, $10, $18, $FE, $35, $66
  34++EA36 35 66
  35++EA38 18 10 18 3F                          DB $18, $10, $18, $3F, $20, $66
  35++EA3C 20 66
  36++EA3E 18 10 18 BF                          DB $18, $10, $18, $BF, $10, $66
  36++EA42 10 66
  37++EA44 20 00 18 B3                          DB $20, $00, $18, $B3, $66, $66
  37++EA48 66 66
  38++EA4A 20 00 18 33                          DB $20, $00, $18, $33, $66, $66
  38++EA4E 66 66
  39++EA50 08 08 18 33                          DB $08, $08, $18, $33, $66, $66
  39++EA54 66 66
  40++EA56 08 08 18 B3                          DB $08, $08, $18, $B3, $66, $66
  40++EA5A 66 66
  41++EA5C 08 08 18 F2                          DB $08, $08, $18, $F2, $66, $66
  41++EA60 66 66
  42++EA62 08 08 18 72                          DB $08, $08, $18, $72, $66, $66
  42++EA66 66 66
  43++EA68              ViperVertSize           equ $  - ViperVertices
  44++EA68 1F 42 00 0C  ViperEdges:             DB $1F, $42, $00, $0C, $1E, $21, $00, $04
  44++EA6C 1E 21 00 04
  45++EA70 1E 43 00 08                          DB $1E, $43, $00, $08, $1F, $31, $00, $10
  45++EA74 1F 31 00 10
  46++EA78 1E 20 04 1C                          DB $1E, $20, $04, $1C, $1E, $10, $04, $20
  46++EA7C 1E 10 04 20
  47++EA80 1E 54 08 14                          DB $1E, $54, $08, $14, $1E, $53, $08, $18
  47++EA84 1E 53 08 18
  48++EA88 1F 60 1C 20                          DB $1F, $60, $1C, $20, $1E, $65, $14, $18
  48++EA8C 1E 65 14 18
  49++EA90 1F 61 10 20                          DB $1F, $61, $10, $20, $1E, $63, $10, $18
  49++EA94 1E 63 10 18
  50++EA98 1F 62 0C 1C                          DB $1F, $62, $0C, $1C, $1E, $46, $0C, $14
  50++EA9C 1E 46 0C 14
  51++EAA0 13 66 24 30                          DB $13, $66, $24, $30, $12, $66, $24, $34
  51++EAA4 12 66 24 34
  52++EAA8 13 66 28 2C                          DB $13, $66, $28, $2C, $12, $66, $28, $38
  52++EAAC 12 66 28 38
  53++EAB0 10 66 2C 38                          DB $10, $66, $2C, $38, $10, $66, $30, $34
  53++EAB4 10 66 30 34
  54++EAB8              ViperEdgesSize          equ $  - ViperEdges
  55++EAB8              ViperEdgesCnt           equ ViperEdgesSize/4
  56++EAB8 1F 00 20 00  ViperNormals            DB $1F, $00, $20, $00, $9F, $16, $21, $0B
  56++EABC 9F 16 21 0B
  57++EAC0 1F 16 21 0B                          DB $1F, $16, $21, $0B, $DF, $16, $21, $0B
  57++EAC4 DF 16 21 0B
  58++EAC8 5F 16 21 0B                          DB $5F, $16, $21, $0B, $5F, $00, $20, $00
  58++EACC 5F 00 20 00
  59++EAD0 3F 00 00 30                          DB $3F, $00, $00, $30
  60++EAD4              ViperNormalsSize        equ $  - ViperNormals
  61++EAD4              ViperLen                equ $  - Viper
  62++EAD4
# file closed: ./Data/ships/Viper.asm
  95+ EAD4                                      include "Data/ships/Worm.asm"
# file opened: ./Data/ships/Worm.asm
   1++EAD4 00           Worm:	                DB $00                      ; Number of cargo canisters released when destroyed
   2++EAD5 49 26                                DW $2649                    ; Ship's targetable area LoHi
   3++EAD7 2F EB                                DW WormEdges                ; Edge Data
   4++EAD9 40                                   DB WormEdgesSize            ; Size of Edge Data
   5++EADA 00                                   DB $00                      ; Gun Vertex Byte offset
   6++EADB 12                                   DB $12                      ; Explosion Count
   7++EADC 0A                                   DB WormVertSize /6          ; Vertex Count /6
   8++EADD 3C                                   DB WormVertSize             ; Vertex Count
   9++EADE 10                                   DB WormEdgesCnt             ; Edges Count
  10++EADF 00 00                                DW $0000                    ; Bounty LoHi
  11++EAE1 20                                   DB WormNormalsSize          ; Face (Normal) Count
  12++EAE2 13                                   DB $13                      ; Range when it turns to a dot
  13++EAE3 1E                                   DB $1E                      ; Energy Max
  14++EAE4 17                                   DB $17                      ; Speed Max
  15++EAE5 6F EB                                DW WormNormals              ; Normals
  16++EAE7 03                                   DB $03                      ; Q scaling
  17++EAE8 30                                   DB $30                      ; Laser power and Nbr Missiles
  18++EAE9 F3 EA                                DW WormVertices             ; Verticles Address
  19++EAEB 00                                   DB ShipTypeNormal           ; Ship Type
  20++EAEC 00                                   DB 0                        ; NewB Tactics
  21++EAED 80                                   DB ShipCanAnger             ; AI Flags
  22++EAEE B0                                   DB $B0                      ; chance of ECM module
  23++EAEF FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EAF0 00 00                                DW $0000                            ; no solid data
  25++EAF2 00                                   DB $00                              ; no solid data
  26++EAF3
  27++EAF3 0A 0A 23 5F  WormVertices:	        DB $0A, $0A, $23, $5F, $02, $77
  27++EAF7 02 77
  28++EAF9 0A 0A 23 DF                          DB $0A, $0A, $23, $DF, $03, $77
  28++EAFD 03 77
  29++EAFF 05 06 0F 1F                          DB $05, $06, $0F, $1F, $01, $24
  29++EB03 01 24
  30++EB05 05 06 0F 9F                          DB $05, $06, $0F, $9F, $01, $35
  30++EB09 01 35
  31++EB0B 0F 0A 19 5F                          DB $0F, $0A, $19, $5F, $24, $77
  31++EB0F 24 77
  32++EB11 0F 0A 19 DF                          DB $0F, $0A, $19, $DF, $35, $77
  32++EB15 35 77
  33++EB17 1A 0A 19 7F                          DB $1A, $0A, $19, $7F, $46, $77
  33++EB1B 46 77
  34++EB1D 1A 0A 19 FF                          DB $1A, $0A, $19, $FF, $56, $77
  34++EB21 56 77
  35++EB23 08 0E 19 3F                          DB $08, $0E, $19, $3F, $14, $66
  35++EB27 14 66
  36++EB29 08 0E 19 BF                          DB $08, $0E, $19, $BF, $15, $66
  36++EB2D 15 66
  37++EB2F
  38++EB2F              WormVertSize: equ $ - WormVertices
  39++EB2F
  40++EB2F
  41++EB2F 1F 07 00 04  WormEdges:	            DB $1F, $07, $00, $04
  42++EB33 1F 37 04 14                          DB $1F, $37, $04, $14
  43++EB37 1F 57 14 1C                          DB $1F, $57, $14, $1C
  44++EB3B 1F 67 1C 18                          DB $1F, $67, $1C, $18
  45++EB3F 1F 47 18 10                          DB $1F, $47, $18, $10
  46++EB43 1F 27 10 00                          DB $1F, $27, $10, $00
  47++EB47 1F 02 00 08                          DB $1F, $02, $00, $08
  48++EB4B 1F 03 04 0C                          DB $1F, $03, $04, $0C
  49++EB4F 1F 24 10 08                          DB $1F, $24, $10, $08
  50++EB53 1F 35 14 0C                          DB $1F, $35, $14, $0C
  51++EB57 1F 14 08 20                          DB $1F, $14, $08, $20
  52++EB5B 1F 46 20 18                          DB $1F, $46, $20, $18
  53++EB5F 1F 15 0C 24                          DB $1F, $15, $0C, $24
  54++EB63 1F 56 24 1C                          DB $1F, $56, $24, $1C
  55++EB67 1F 01 08 0C                          DB $1F, $01, $08, $0C
  56++EB6B 1F 16 20 24                          DB $1F, $16, $20, $24
  57++EB6F
  58++EB6F              WormEdgesSize: equ $ - WormEdges
  59++EB6F
  60++EB6F
  61++EB6F              WormEdgesCnt: equ WormEdgesSize/4
  62++EB6F
  63++EB6F
  64++EB6F 1F 00 58 46  WormNormals:	        DB $1F, $00, $58, $46
  65++EB73 1F 00 45 0E                          DB $1F, $00, $45, $0E
  66++EB77 1F 46 42 23                          DB $1F, $46, $42, $23
  67++EB7B 9F 46 42 23                          DB $9F, $46, $42, $23
  68++EB7F 1F 40 31 0E                          DB $1F, $40, $31, $0E
  69++EB83 9F 40 31 0E                          DB $9F, $40, $31, $0E
  70++EB87 3F 00 00 C8                          DB $3F, $00, $00, $C8
  71++EB8B 5F 00 50 00                          DB $5F, $00, $50, $00
  72++EB8F
  73++EB8F
  74++EB8F              WormNormalsSize: equ $ - WormNormals
  75++EB8F              WormLen: equ $ - Worm
  76++EB8F
# file closed: ./Data/ships/Worm.asm
  96+ EB8F                                      include "Data/ships/Rattler.asm"
# file opened: ./Data/ships/Rattler.asm
   1++EB8F 02           Rattler:	            DB $02                       ; Number of cargo canisters released when destroyed
   2++EB90 70 17                                DW $1770                     ; Ship's targetable area LoHi
   3++EB92 08 EC                                DW RattlerEdges              ; Edge Data
   4++EB94 68                                   DB RattlerEdgesSize          ; Size of Edge Data
   5++EB95 00                                   DB $00                       ; Gun Vertex Byte offset
   6++EB96 2A                                   DB $2A                       ; Explosion Count
   7++EB97 0F                                   DB RattlerVertSize /6        ; Vertex Count /6
   8++EB98 5A                                   DB RattlerVertSize           ; Vertex Count
   9++EB99 1A                                   DB RattlerEdgesCnt           ; Edges Count
  10++EB9A 96 00                                DW $0096                     ; Bounty LoHi
  11++EB9C 34                                   DB RattlerNormalsSize        ; Face (Normal) Count
  12++EB9D 0A                                   DB $0A                       ; Range when it turns to a dot
  13++EB9E 71                                   DB $71                       ; Energy Max
  14++EB9F 1F                                   DB $1F                       ; Speed Max
  15++EBA0 70 EC                                DW RattlerNormals            ; Normals
  16++EBA2 01                                   DB $01                       ; Q scaling
  17++EBA3 22                                   DB $20 | ShipMissiles2       ; Laser power and Nbr Missiles
  18++EBA4 AE EB                                DW RattlerVertices           ; Verticles Address
  19++EBA6 00                                   DB ShipTypeNormal            ; Ship Type
  20++EBA7 00                                   DB 0                         ; NewB Tactics
  21++EBA8 80                                   DB ShipCanAnger              ; AI Flags
  22++EBA9 90                                   DB $90                       ; chance of ECM module
  23++EBAA FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EBAB 00 00                                DW $0000                            ; no solid data
  25++EBAD 00                                   DB $00                              ; no solid data
  26++EBAE
  27++EBAE
  28++EBAE
  29++EBAE 00 00 3C 1F  RattlerVertices:	    DB $00, $00, $3C, $1F, $89, $23
  29++EBB2 89 23
  30++EBB4 28 00 28 1F                          DB $28, $00, $28, $1F, $9A, $34
  30++EBB8 9A 34
  31++EBBA 28 00 28 9F                          DB $28, $00, $28, $9F, $78, $12
  31++EBBE 78 12
  32++EBC0 3C 00 00 1F                          DB $3C, $00, $00, $1F, $AB, $45
  32++EBC4 AB 45
  33++EBC6 3C 00 00 9F                          DB $3C, $00, $00, $9F, $67, $01
  33++EBCA 67 01
  34++EBCC 46 00 28 3F                          DB $46, $00, $28, $3F, $CC, $5B
  34++EBD0 CC 5B
  35++EBD2 46 00 28 BF                          DB $46, $00, $28, $BF, $CC, $06
  35++EBD6 CC 06
  36++EBD8 00 14 28 3F                          DB $00, $14, $28, $3F, $FF, $FF
  36++EBDC FF FF
  37++EBDE 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF
  37++EBE2 FF FF
  38++EBE4 0A 06 28 AA                          DB $0A, $06, $28, $AA, $CC, $CC
  38++EBE8 CC CC
  39++EBEA 0A 06 28 EA                          DB $0A, $06, $28, $EA, $CC, $CC
  39++EBEE CC CC
  40++EBF0 14 00 28 AA                          DB $14, $00, $28, $AA, $CC, $CC
  40++EBF4 CC CC
  41++EBF6 0A 06 28 2A                          DB $0A, $06, $28, $2A, $CC, $CC
  41++EBFA CC CC
  42++EBFC 0A 06 28 6A                          DB $0A, $06, $28, $6A, $CC, $CC
  42++EC00 CC CC
  43++EC02 14 00 28 2A                          DB $14, $00, $28, $2A, $CC, $CC
  43++EC06 CC CC
  44++EC08
  45++EC08              RattlerVertSize: equ $ - RattlerVertices
  46++EC08
  47++EC08
  48++EC08 1F 06 10 18  RattlerEdges:	DB $1F, $06, $10, $18
  49++EC0C 1F 17 08 10  	DB $1F, $17, $08, $10
  50++EC10 1F 28 00 08  	DB $1F, $28, $00, $08
  51++EC14 1F 39 00 04  	DB $1F, $39, $00, $04
  52++EC18 1F 4A 04 0C  	DB $1F, $4A, $04, $0C
  53++EC1C 1F 5B 0C 14  	DB $1F, $5B, $0C, $14
  54++EC20 1F 0C 18 1C  	DB $1F, $0C, $18, $1C
  55++EC24 1F 6C 18 20  	DB $1F, $6C, $18, $20
  56++EC28 1F 01 10 1C  	DB $1F, $01, $10, $1C
  57++EC2C 1F 67 10 20  	DB $1F, $67, $10, $20
  58++EC30 1F 12 08 1C  	DB $1F, $12, $08, $1C
  59++EC34 1F 78 08 20  	DB $1F, $78, $08, $20
  60++EC38 1F 23 00 1C  	DB $1F, $23, $00, $1C
  61++EC3C 1F 89 00 20  	DB $1F, $89, $00, $20
  62++EC40 1F 34 04 1C  	DB $1F, $34, $04, $1C
  63++EC44 1F 9A 04 20  	DB $1F, $9A, $04, $20
  64++EC48 1F 45 0C 1C  	DB $1F, $45, $0C, $1C
  65++EC4C 1F AB 0C 20  	DB $1F, $AB, $0C, $20
  66++EC50 1F 5C 14 1C  	DB $1F, $5C, $14, $1C
  67++EC54 1F BC 14 20  	DB $1F, $BC, $14, $20
  68++EC58 0A CC 24 28  	DB $0A, $CC, $24, $28
  69++EC5C 0A CC 28 2C  	DB $0A, $CC, $28, $2C
  70++EC60 0A CC 2C 24  	DB $0A, $CC, $2C, $24
  71++EC64 0A CC 30 34  	DB $0A, $CC, $30, $34
  72++EC68 0A CC 34 38  	DB $0A, $CC, $34, $38
  73++EC6C 0A CC 38 30  	DB $0A, $CC, $38, $30
  74++EC70
  75++EC70              RattlerEdgesSize: equ $ - RattlerEdges
  76++EC70
  77++EC70
  78++EC70              RattlerEdgesCnt: equ RattlerEdgesSize/4
  79++EC70
  80++EC70
  81++EC70 9F 1A 5C 06  RattlerNormals:	DB $9F, $1A, $5C, $06
  82++EC74 9F 17 5C 0B  	DB $9F, $17, $5C, $0B
  83++EC78 9F 09 5D 12  	DB $9F, $09, $5D, $12
  84++EC7C 1F 09 5D 12  	DB $1F, $09, $5D, $12
  85++EC80 1F 17 5C 0B  	DB $1F, $17, $5C, $0B
  86++EC84 1F 1A 5C 06  	DB $1F, $1A, $5C, $06
  87++EC88 DF 1A 5C 06  	DB $DF, $1A, $5C, $06
  88++EC8C DF 17 5C 0B  	DB $DF, $17, $5C, $0B
  89++EC90 DF 09 5D 12  	DB $DF, $09, $5D, $12
  90++EC94 5F 09 5D 12  	DB $5F, $09, $5D, $12
  91++EC98 5F 17 5C 0B  	DB $5F, $17, $5C, $0B
  92++EC9C 5F 1A 5C 06  	DB $5F, $1A, $5C, $06
  93++ECA0 3F 00 00 60  	DB $3F, $00, $00, $60
  94++ECA4
  95++ECA4              RattlerNormalsSize: equ $ - RattlerNormals
  96++ECA4              RattlerLen: equ $ - Rattler
  97++ECA4
# file closed: ./Data/ships/Rattler.asm
  97+ ECA4
# file closed: ./Data/ShipModelMetaData3.asm
1404  ECA4              ;;Privisioned for more models ; Bank 69  ------------------------------------------------------------------------------------------------------------------------
1405  ECA4              ;;Privisioned for more models     SLOT    ShipModelsAddr
1406  ECA4              ;;Privisioned for more models     PAGE    BankShipModels4
1407  ECA4              ;;Privisioned for more models 	ORG     ShipModelsAddr, BankShipModels4
1408  ECA4                  DISPLAY "Bank ",BankShipModels3," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels3"
1409  ECA4              ; Bank 60  ------------------------------------------------------------------------------------------------------------------------
1410  ECA4                                  SLOT    SpritemembankAddr
1411  ECA4                                  PAGE    BankSPRITE
1412  ECA4                                  ORG     SpritemembankAddr, BankSPRITE
1413  E000                                  INCLUDE "./Layer3Sprites/sprite_routines.asm"
# file opened: ./Layer3Sprites/sprite_routines.asm
   1+ E000
   2+ E000              galactic_cursor_sprite				equ	0                            ; 00
   3+ E000              galactic_cursor_sprite1				equ	galactic_cursor_sprite+1     ; 01
   4+ E000              galactic_cursor_sprite2				equ	galactic_cursor_sprite1+2    ; 02
   5+ E000                                                                                   ;
   6+ E000              galactic_hyper_sprite				equ	galactic_cursor_sprite2+1    ; 03
   7+ E000              ;galactic_hyper_sprite1				equ galactic_hyper_sprite+1      ;
   8+ E000              ;galactic_hyper_sprite2				equ	galactic_hyper_sprite1+1     ;
   9+ E000
  10+ E000              local_cursor_sprite					equ	galactic_hyper_sprite+1      ; 04
  11+ E000              local_cursor_sprite1				equ	local_cursor_sprite+1        ; 05
  12+ E000              local_cursor_sprite2				equ	local_cursor_sprite1+1       ; 06
  13+ E000
  14+ E000              local_hyper_sprite					equ	local_cursor_sprite2+1       ; 07
  15+ E000              local_hyper_sprite1					equ	local_hyper_sprite+1         ; 08
  16+ E000              local_hyper_sprite2					equ	local_hyper_sprite1+2        ; 09
  17+ E000
  18+ E000              reticlule_sprite1                   equ	local_hyper_sprite2+1        ; 10
  19+ E000              reticlule_sprite2                   equ	reticlule_sprite1+1          ; 11
  20+ E000              reticlule_sprite3                   equ	reticlule_sprite2+1          ; 12
  21+ E000              reticlule_sprite4                   equ reticlule_sprite3+1          ; 13
  22+ E000
  23+ E000              laser_sprite1                       equ	reticlule_sprite4+1          ; 14
  24+ E000              laser_sprite2                       equ	laser_sprite1    +1          ; 15
  25+ E000              laser_sprite3                       equ	laser_sprite2    +1          ; 16
  26+ E000              laser_sprite4                       equ laser_sprite3    +1          ; 17
  27+ E000              laser_sprite5                       equ	laser_sprite4    +1          ; 18
  28+ E000              laser_sprite6                       equ	laser_sprite5    +1          ; 19
  29+ E000              laser_sprite7                       equ	laser_sprite6    +1          ; 20
  30+ E000              laser_sprite8                       equ laser_sprite7    +1          ; 21
  31+ E000              laser_sprite9                       equ	laser_sprite8    +1          ; 22
  32+ E000              laser_sprite10                      equ	laser_sprite9    +1          ; 23
  33+ E000              laser_sprite11                      equ	laser_sprite10   +1          ; 24
  34+ E000              laser_sprite12                      equ laser_sprite11   +1          ; 25
  35+ E000              laser_sprite13                      equ	laser_sprite12   +1          ; 26
  36+ E000              laser_sprite14                      equ	laser_sprite13   +1          ; 27
  37+ E000              laser_sprite15                      equ	laser_sprite14   +1          ; 28
  38+ E000              laser_sprite16                      equ laser_sprite15   +1          ; 29
  39+ E000              compass_sun                         equ laser_sprite16   +1          ; 30
  40+ E000              compass_station                     equ compass_sun      +1          ; 31
  41+ E000              targetting_sprite1                  equ compass_station  +1          ; 32
  42+ E000              targetting_sprite2                  equ targetting_sprite1   +1      ; 33
  43+ E000              ECM_sprite                          equ targetting_sprite2   +1      ; 34
  44+ E000              missile_sprite1                     equ ECM_sprite       +1          ; 35
  45+ E000              missile_sprite2                     equ missile_sprite1  +1          ; 36
  46+ E000              missile_sprite3                     equ missile_sprite2  +1          ; 37
  47+ E000              missile_sprite4                     equ missile_sprite3  +1          ; 38
  48+ E000
  49+ E000              glactic_pattern_1					equ 0
  50+ E000              glactic_hyper_pattern_1             equ 2
  51+ E000              local_present_cursor                equ 4
  52+ E000              local_hyper_pattern                 equ 7
  53+ E000              reticule_pattern_1                  equ 10
  54+ E000              reticule_pattern_2                  equ 11
  55+ E000              laser_pattern_1                     equ 12
  56+ E000              laser_pattern_2                     equ 13
  57+ E000              laser_pattern_3                     equ 14
  58+ E000              laser_pattern_4                     equ 15
  59+ E000              laser_pattern_5                     equ 16
  60+ E000              targetting_pattern                  equ 23
  61+ E000              lock_pattern                        equ 24
  62+ E000              ecm_pattern                         equ 25
  63+ E000              missile_ready_pattern               equ 26
  64+ E000              missile_armed_pattern               equ 27
  65+ E000              missile_locked_pattern              equ 28
  66+ E000
  67+ E000              compass_sun_infront                 equ 17
  68+ E000              compass_sun_behind                  equ 18
  69+ E000              compass_station_infront             equ 19
  70+ E000              compass_station_behind              equ 20
  71+ E000              spritecursoroffset					equ 17
  72+ E000              spriteborderoffset                  equ 32
  73+ E000
  74+ E000              HideSprite:                 MACRO   spritenbr
  75+ E000 ~                                        nextreg		SPRITE_PORT_INDEX_REGISTER,spritenbr
  76+ E000 ~                                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
  77+ E000                                          ENDM
  78+ E000
  79+ E000              ; " sprite_big BC = rowcol, D = sprite nbr , E= , pattern"
  80+ E000              sprite_big:
  81+ E000 7A           .SetAnchor:	                ld		a,d                                 ; a = sprite nbr, bug fix?
  82+ E001 F5                                       push	af									; save id for next few
  83+ E002 D5                                       push	de
  84+ E003 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
  85+ E006              ; write out X position bits 1 to 8
  86+ E006 79                                       ld		a,c
  87+ E007 21 11 00                                 ld      hl,spritecursoroffset
  88+ E00A ED 31                                    add		hl,a                                ; hl = full x position
  89+ E00C 7D                                       ld		a,l
  90+ E00D ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
  91+ E010              ; write out Y position bits 1 to 8
  92+ E010 EB                                       ex		de,hl								; de = full x position
  93+ E011 78                                       ld		a,b
  94+ E012 21 11 00                                 ld      hl,spritecursoroffset
  95+ E015 ED 31                                    add		hl,a
  96+ E017 7D                                       ld		a,l                                 ; hl = full y position
  97+ E018 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
  98+ E01B              ; write out MSB of X as its an anchor
  99+ E01B 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 100+ E01C ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 101+ E01F              ; write out sprite pattern
 102+ E01F D1                                       pop		de                                  ; de = pattern and sprite nbr
 103+ E020 7B                                       ld		a,e
 104+ E021 F6 C0                                    or		%11000000							;
 105+ E023 ED 92 38                                 nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 106+ E026              ; write out msb of y in h must be bit 0 only
 107+ E026 3E 00                                    ld		a,%00000000							; big unified composite
 108+ E028 B4                                       or		h									; MSB Y
 109+ E029 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 110+ E02C F1           .BigSprite1:                pop		af
 111+ E02D 3C                                       inc		a
 112+ E02E F5                                       push	af
 113+ E02F ED 92 34                                 nextreg		SPRITE_PORT_INDEX_REGISTER,a
 114+ E032 3E 10                                    ld		a,16
 115+ E034 ED 92 35                                 nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 116+ E037 AF                                       xor 	a
 117+ E038 ED 92 36                                 nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 118+ E03B ED 92 37                                 nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 119+ E03E 3E C1                                    ld		a,%11000001							; relative and 4 bytes of data, pattern 1
 120+ E040 ED 92 38                                 nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 121+ E043 3E 41                                    ld		a,%01000001							; big unified composite
 122+ E045 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 123+ E048 F1           .BigSprite2:                pop		af
 124+ E049 3C                                       inc		a
 125+ E04A ED 92 34                                 nextreg		SPRITE_PORT_INDEX_REGISTER,a
 126+ E04D AF                                       xor		a
 127+ E04E ED 92 35                                 nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 128+ E051 3E 10                                    ld		a,16
 129+ E053 ED 92 36                                 nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 130+ E056 AF                                       xor		a
 131+ E057 ED 92 37                                 nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 132+ E05A 3E C2                                    ld		a,%11000010							; relative and 4 bytes of data, pattern 2
 133+ E05C ED 92 38                                 nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 134+ E05F 3E 41                                    ld		a,%01000001							; big unified composite
 135+ E061 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 136+ E064 C9                                       ret
 137+ E065
 138+ E065              ; for a sinle sprite within 256x192 area
 139+ E065 7A           sprite_single:          ld		a,d                                 ; a = sprite nbr, bug fix?
 140+ E066 D5                                   push    de
 141+ E067 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 142+ E06A              ; write out X position bits 1 to 8
 143+ E06A 79                                   ld		a,c                                 ; a = column (c)
 144+ E06B 21 20 00                             ld      hl,spriteborderoffset
 145+ E06E ED 31                                add		hl,a                                ; hl = full x position
 146+ E070 EB                                   ex		de,hl								; de = full x position
 147+ E071 7B                                   ld		a,e
 148+ E072 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 149+ E075              ; write out Y position bits 1 to 8
 150+ E075 78                                   ld		a,b                                 ; a = row
 151+ E076 21 20 00                             ld      hl,spriteborderoffset
 152+ E079 ED 31                                add		hl,a
 153+ E07B 7D                                   ld		a,l                                 ; hl = full y position
 154+ E07C ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 155+ E07F              ; write out MSB of X as its an anchor
 156+ E07F 7A                                   ld		a,d									; de = MSB of X (hl bit 0)
 157+ E080 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 158+ E083              ; write out sprite pattern
 159+ E083 D1                                   pop     de
 160+ E084 7B                                   ld		a,e
 161+ E085 F6 80                                or		%10000000							;
 162+ E087 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 163+ E08A              ; write out extended attribute
 164+ E08A 3E 00                                ld      a,%00000000                         ; its a single sprite
 165+ E08C B4                                   or      h
 166+ E08D ED 92 39                             nextreg	SPRITE_PORT_ATTR4_REGISTER,a
 167+ E090 C9                                   ret
 168+ E091              ; ">sprite_galactic_cursor BC = rowcol"
 169+ E091 16 00        sprite_galactic_cursor:     ld		d,galactic_cursor_sprite
 170+ E093 1E 00                                    ld		e,0
 171+ E095 78                                       ld		a,b
 172+ E096 C6 18                                    add		a,galactic_chart_y_offset
 173+ E098 47                                       ld		b,a
 174+ E099 CD 00 E0                                 call	sprite_big
 175+ E09C C9                                       ret
 176+ E09D
 177+ E09D              ; "> sprite_galactic_hyper_cursorBC = rowcol"
 178+ E09D 78           sprite_galactic_hyper_cursor:ld		a,b
 179+ E09E C6 04                                    add		a,galactic_chart_hyper_offset
 180+ E0A0 47                                       ld		b,a
 181+ E0A1 16 04                                    ld		d,galactic_hyper_sprite
 182+ E0A3 1E 03                                    ld		e,3
 183+ E0A5 CD 65 E0                                 call	sprite_single ; sprite_big:
 184+ E0A8 C9                                       ret
 185+ E0A9
 186+ E0A9
 187+ E0A9              ; moves hyperspace cursor to target system x position
 188+ E0A9 3E 04        sprite_ghc_move:            ld		a,galactic_hyper_sprite
 189+ E0AB ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 190+ E0AE              ; write out X position bits 1 to 8
 191+ E0AE 79                                       ld		a,c
 192+ E0AF 21 1C 00                                 ld      hl,galactic_chart_hyper_x_offset
 193+ E0B2 ED 31                                    add		hl,a                                ; hl = full x position
 194+ E0B4 7D                                       ld		a,l
 195+ E0B5 ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 196+ E0B8              ; write out Y position bits 1 to 8
 197+ E0B8 EB                                       ex		de,hl								; de = full x position
 198+ E0B9 CB 38                                    srl		b			    					; row is row / 2
 199+ E0BB 78                                       ld      a,b
 200+ E0BC 21 34 00                                 ld      hl,galactic_chart_hyper_y_offset
 201+ E0BF ED 31                                    add		hl,a
 202+ E0C1 7D                                       ld		a,l                                 ; hl = full y position
 203+ E0C2 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 204+ E0C5              ; write out MSB of X as its an anchor
 205+ E0C5 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 206+ E0C6 ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 207+ E0C9              ; write out msb of y in h must be bit 0 only
 208+ E0C9 3E 00                                    ld		a,%00000000							; big unified composite
 209+ E0CB B2                                       or		d									; MSB Y
 210+ E0CC ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 211+ E0CF C9                                       ret
 212+ E0D0
 213+ E0D0
 214+ E0D0 3E 08        sprite_lhc_move:            ld		a,local_hyper_sprite
 215+ E0D2 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 216+ E0D5              ; write out X position bits 1 to 8
 217+ E0D5 79                                       ld		a,c
 218+ E0D6 21 11 00                                 ld      hl,spritecursoroffset
 219+ E0D9 ED 31                                    add		hl,a                                ; hl = full x position
 220+ E0DB 7D                                       ld		a,l
 221+ E0DC ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 222+ E0DF              ; write out Y position bits 1 to 8
 223+ E0DF EB                                       ex		de,hl								; de = full x position
 224+ E0E0 78                                       ld		a,b
 225+ E0E1 21 11 00                                 ld      hl,spritecursoroffset
 226+ E0E4 ED 31                                    add		hl,a
 227+ E0E6 7D                                       ld		a,l                                 ; hl = full y position
 228+ E0E7 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 229+ E0EA              ; write out MSB of X as its an anchor
 230+ E0EA 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 231+ E0EB ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 232+ E0EE              ; write out msb of y in h must be bit 0 only
 233+ E0EE 3E 00                                    ld		a,%00000000							; big unified composite
 234+ E0F0 B2                                       or		d									; MSB Y
 235+ E0F1 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 236+ E0F4 C9                                       ret
 237+ E0F5
 238+ E0F5              ; "sprite_local_cursor BC = rowcol"
 239+ E0F5 16 05        sprite_local_cursor:        ld		d,local_cursor_sprite
 240+ E0F7 1E 04                                    ld		e,local_present_cursor
 241+ E0F9 CD 00 E0                                 call	sprite_big
 242+ E0FC C9                                       ret
 243+ E0FD
 244+ E0FD              ; "sprite_local_hyper_cursor BC = rowcol"
 245+ E0FD 16 08        sprite_local_hyper_cursor:  ld		d,local_hyper_sprite
 246+ E0FF 1E 07                                    ld		e,local_hyper_pattern
 247+ E101 CD 00 E0                                 call	sprite_big
 248+ E104 C9                                       ret
 249+ E105
 250+ E105              compass_offset              equ 2
 251+ E105              ScannerX                    equ 128
 252+ E105              ScannerY                    equ 171
 253+ E105              SunScanCenterX              equ 92
 254+ E105              SunScanCenterY              equ 171
 255+ E105              PlanetScanCenterX           equ 229
 256+ E105              PlanetScanCenterY           equ 171
 257+ E105
 258+ E105
 259+ E105              ; Put on compas based on bc = Y X position offset from compass center
 260+ E105 3E 20        compass_sun_move:       ld		a,compass_sun
 261+ E107 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 262+ E10A              ; write out X position bits 1 to 8
 263+ E10A 3E 5A                                ld      a, SunScanCenterX-compass_offset
 264+ E10C 81                                   add     a,c
 265+ E10D ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 266+ E110              ; write out Y position bits 1 to 8
 267+ E110 3E A9                                ld      a, SunScanCenterY-compass_offset
 268+ E112 90                                   sub     b
 269+ E113 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 270+ E116 C9                                   ret
 271+ E117
 272+ E117              ; Put on compas based on bc = Y X position offset from compass center
 273+ E117 3E 21        compass_station_move:   ld		a,compass_station
 274+ E119 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 275+ E11C              ; write out X position bits 1 to 8
 276+ E11C 3E E3                                ld      a, PlanetScanCenterX-compass_offset
 277+ E11E 81                                   add     a,c
 278+ E11F ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 279+ E122              ; write out Y position bits 1 to 8
 280+ E122 3E A9                                ld      a, PlanetScanCenterY-compass_offset
 281+ E124 90                                   sub     b
 282+ E125 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 283+ E128 C9                                   ret
 284+ E129
 285+ E129              ReticuleCentreX         EQU (256/2)+32 -1
 286+ E129              ReticuleCentreY         EQU (192/2)+32 -1
 287+ E129              ReticuleOffset          EQU 8
 288+ E129
 289+ E129              TargetetingCentreX1     EQU ReticuleCentreX -32
 290+ E129              TargetetingCentreX2     EQU ReticuleCentreX +16
 291+ E129              TargetetingCentreY      EQU ReticuleCentreY -7
 292+ E129
 293+ E129              sprite_missile_x        EQU 2+32
 294+ E129              sprite_missile_y        EQU 192-8+32
 295+ E129
 296+ E129              sprite_ecm_x            EQU (6*8) +2 +32
 297+ E129              sprite_ecm_y            EQU 192-15+32
 298+ E129
 299+ E129 3E 24        sprite_ECM:             ld      a,ECM_sprite
 300+ E12B ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a
 301+ E12E 3E 52                                ld      a,sprite_ecm_x
 302+ E130 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 303+ E133 3E D1                                ld		a,sprite_ecm_y
 304+ E135 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 305+ E138 3E 99                                ld      a,ecm_pattern | %10000000
 306+ E13A ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 307+ E13D C9                                   ret
 308+ E13E
 309+ E13E ED 92 34     sprite_missile_ready:   nextreg SPRITE_PORT_INDEX_REGISTER,a
 310+ E141 79                                   ld      a,c
 311+ E142 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 312+ E145 3E D8                                ld		a,sprite_missile_y
 313+ E147 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 314+ E14A 3E 9A                                ld      a,missile_ready_pattern | %10000000
 315+ E14C ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 316+ E14F C9                                   ret
 317+ E150
 318+ E150 3E 25        sprite_missile_1:       ld      a,missile_sprite1
 319+ E152 0E 22                                ld      c,sprite_missile_x
 320+ E154 C3 3E E1                             jp      sprite_missile_ready
 321+ E157
 322+ E157 3E 26        sprite_missile_2:       ld      a,missile_sprite2
 323+ E159 0E 31                                ld      c,sprite_missile_x+15
 324+ E15B C3 3E E1                             jp      sprite_missile_ready
 325+ E15E
 326+ E15E 3E 27        sprite_missile_3:       ld      a,missile_sprite3
 327+ E160 0E 3B                                ld      c,sprite_missile_x+25
 328+ E162 C3 3E E1                             jp      sprite_missile_ready
 329+ E165
 330+ E165 3E 28        sprite_missile_4:       ld      a,missile_sprite4
 331+ E167 0E 45                                ld      c,sprite_missile_x +35
 332+ E169 C3 3E E1                             jp      sprite_missile_ready
 333+ E16C
 334+ E16C
 335+ E16C
 336+ E16C 3E 0C        sprite_reticule:        ld      a,reticlule_sprite1                 ; LEFT ARM
 337+ E16E ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 338+ E171 3E 87                                ld      a,ReticuleCentreX -16 - ReticuleOffset
 339+ E173 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 340+ E176 3E 7F                                ld		a,ReticuleCentreY
 341+ E178 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 342+ E17B AF                                   xor     a
 343+ E17C ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 344+ E17F 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 345+ E181 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 346+ E184 3E 0D        .rightReticule          ld      a,reticlule_sprite2                 ; RIGHT ARM
 347+ E186 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 348+ E189 3E A7                                ld      a,ReticuleCentreX + ReticuleOffset
 349+ E18B ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 350+ E18E 3E 7F                                ld		a,ReticuleCentreY
 351+ E190 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 352+ E193 3E 08                                ld      a,%00001000
 353+ E195 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 354+ E198 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 355+ E19A ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 356+ E19D 3E 0E        .topReticule            ld      a,reticlule_sprite3
 357+ E19F ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 358+ E1A2 3E 9F                                ld      a,ReticuleCentreX
 359+ E1A4 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 360+ E1A7 3E 67                                ld		a,ReticuleCentreY-16 - ReticuleOffset
 361+ E1A9 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 362+ E1AC AF                                   xor     a
 363+ E1AD ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 364+ E1B0 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 365+ E1B2 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 366+ E1B5 3E 0F        .bottomReticule         ld      a,reticlule_sprite4
 367+ E1B7 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 368+ E1BA 3E 9F                                ld      a,ReticuleCentreX
 369+ E1BC ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 370+ E1BF 3E 87                                ld		a,ReticuleCentreY + ReticuleOffset
 371+ E1C1 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 372+ E1C4 3E 04                                ld      a,%00000100
 373+ E1C6 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring vertical
 374+ E1C9 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 375+ E1CB ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 376+ E1CE C9                                   ret
 377+ E1CF
 378+ E1CF              laserbasex              equ 6
 379+ E1CF              laserbasey              equ 14
 380+ E1CF
 381+ E1CF              ShowSprite              MACRO   spritenbr, patternnbr
 382+ E1CF ~                                    ld      a, spritenbr
 383+ E1CF ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 384+ E1CF ~                                    ld      a,patternnbr | %10000000
 385+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 386+ E1CF                                      ENDM
 387+ E1CF
 388+ E1CF              LeftLaser:              MACRO   xoffset, yoffset, spriteL, patternL
 389+ E1CF ~                                    ld      a, spriteL
 390+ E1CF ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 391+ E1CF ~                                    ld      a,((laserbasex + xoffset) *8) + 32
 392+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 393+ E1CF ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 394+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 395+ E1CF ~                                    xor     a
 396+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 397+ E1CF ~                                    ld      a, patternL | %00000000             ; hidden by default
 398+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 399+ E1CF                                      ENDM
 400+ E1CF
 401+ E1CF              RightLaser:             MACRO   xoffset, yoffset, spriteL, patternL
 402+ E1CF ~                                    ld      a, spriteL
 403+ E1CF ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 404+ E1CF ~                                    ld      a,(((30-laserbasex) - xoffset) *8) + 32 -2
 405+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 406+ E1CF ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 407+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 408+ E1CF ~                                    ld      a,%00001000
 409+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 410+ E1CF ~                                    ld      a, patternL | %00000000             ; hidden by default
 411+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 412+ E1CF                                      ENDM
 413+ E1CF
 414+ E1CF              show_ecm_sprite:        ShowSprite  ECM_sprite, ecm_pattern
 414+ E1CF 3E 24       >                        ld      a, ECM_sprite
 414+ E1D1 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 414+ E1D4 3E 99       >                        ld      a,ecm_pattern | %10000000
 414+ E1D6 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 415+ E1D9 C9                                   ret
 416+ E1DA
 417+ E1DA              show_missile_1_ready:   ShowSprite  missile_sprite1, missile_ready_pattern
 417+ E1DA 3E 25       >                        ld      a, missile_sprite1
 417+ E1DC ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 417+ E1DF 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 417+ E1E1 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 418+ E1E4 C9                                   ret
 419+ E1E5
 420+ E1E5              show_missile_2_ready:   ShowSprite  missile_sprite2, missile_ready_pattern
 420+ E1E5 3E 26       >                        ld      a, missile_sprite2
 420+ E1E7 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 420+ E1EA 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 420+ E1EC ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 421+ E1EF C9                                   ret
 422+ E1F0
 423+ E1F0              show_missile_3_ready:   ShowSprite  missile_sprite3, missile_ready_pattern
 423+ E1F0 3E 27       >                        ld      a, missile_sprite3
 423+ E1F2 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 423+ E1F5 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 423+ E1F7 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 424+ E1FA C9                                   ret
 425+ E1FB
 426+ E1FB              show_missile_4_ready:   ShowSprite  missile_sprite4, missile_ready_pattern
 426+ E1FB 3E 28       >                        ld      a, missile_sprite4
 426+ E1FD ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 426+ E200 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 426+ E202 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 427+ E205 C9                                   ret
 428+ E206
 429+ E206              show_missile_1_armed:   ShowSprite  missile_sprite1, missile_armed_pattern
 429+ E206 3E 25       >                        ld      a, missile_sprite1
 429+ E208 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 429+ E20B 3E 9B       >                        ld      a,missile_armed_pattern | %10000000
 429+ E20D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 430+ E210 C9                                   ret
 431+ E211
 432+ E211              show_missile_1_locked:  ShowSprite  missile_sprite1, missile_locked_pattern
 432+ E211 3E 25       >                        ld      a, missile_sprite1
 432+ E213 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 432+ E216 3E 9C       >                        ld      a,missile_locked_pattern | %10000000
 432+ E218 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 433+ E21B C9                                   ret
 434+ E21C
 435+ E21C
 436+ E21C              show_compass_sun_infront:ShowSprite  compass_sun, compass_sun_infront
 436+ E21C 3E 20       >                        ld      a, compass_sun
 436+ E21E ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 436+ E221 3E 91       >                        ld      a,compass_sun_infront | %10000000
 436+ E223 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 437+ E226 C9                                    ret
 438+ E227
 439+ E227              show_compass_sun_behind: ShowSprite  compass_sun, compass_sun_behind
 439+ E227 3E 20       >                        ld      a, compass_sun
 439+ E229 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 439+ E22C 3E 92       >                        ld      a,compass_sun_behind | %10000000
 439+ E22E ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 440+ E231 C9                                    ret
 441+ E232
 442+ E232              show_compass_station_infront: ShowSprite  compass_station, compass_station_infront
 442+ E232 3E 21       >                        ld      a, compass_station
 442+ E234 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 442+ E237 3E 93       >                        ld      a,compass_station_infront | %10000000
 442+ E239 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 443+ E23C C9                                    ret
 444+ E23D
 445+ E23D              show_compass_station_behind:  ShowSprite  compass_station, compass_station_behind
 445+ E23D 3E 21       >                        ld      a, compass_station
 445+ E23F ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 445+ E242 3E 94       >                        ld      a,compass_station_behind | %10000000
 445+ E244 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 446+ E247 C9                                    ret
 447+ E248
 448+ E248              sprite_laser:           LeftLaser  0,0,laser_sprite1 ,laser_pattern_1
 448+ E248 3E 10       >                        ld      a, laser_sprite1
 448+ E24A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 448+ E24D 3E 50       >                        ld      a,((laserbasex + 0) *8) + 32
 448+ E24F ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 448+ E252 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 448+ E254 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 448+ E257 AF          >                        xor     a
 448+ E258 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 448+ E25B 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 448+ E25D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 449+ E260                                      LeftLaser  2,0,laser_sprite2 ,laser_pattern_2
 449+ E260 3E 11       >                        ld      a, laser_sprite2
 449+ E262 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 449+ E265 3E 60       >                        ld      a,((laserbasex + 2) *8) + 32
 449+ E267 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 449+ E26A 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 449+ E26C ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 449+ E26F AF          >                        xor     a
 449+ E270 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 449+ E273 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 449+ E275 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 450+ E278                                      LeftLaser  4,1,laser_sprite3 ,laser_pattern_3
 450+ E278 3E 12       >                        ld      a, laser_sprite3
 450+ E27A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 450+ E27D 3E 70       >                        ld      a,((laserbasex + 4) *8) + 32
 450+ E27F ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 450+ E282 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 450+ E284 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 450+ E287 AF          >                        xor     a
 450+ E288 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 450+ E28B 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 450+ E28D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 451+ E290                                      LeftLaser  6,1,laser_sprite4 ,laser_pattern_4
 451+ E290 3E 13       >                        ld      a, laser_sprite4
 451+ E292 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 451+ E295 3E 80       >                        ld      a,((laserbasex + 6) *8) + 32
 451+ E297 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 451+ E29A 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 451+ E29C ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 451+ E29F AF          >                        xor     a
 451+ E2A0 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 451+ E2A3 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 451+ E2A5 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 452+ E2A8                                      LeftLaser  8,2,laser_sprite5 ,laser_pattern_5
 452+ E2A8 3E 14       >                        ld      a, laser_sprite5
 452+ E2AA ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 452+ E2AD 3E 90       >                        ld      a,((laserbasex + 8) *8) + 32
 452+ E2AF ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 452+ E2B2 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 452+ E2B4 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 452+ E2B7 AF          >                        xor     a
 452+ E2B8 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 452+ E2BB 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 452+ E2BD ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 453+ E2C0                                      RightLaser 0,0,laser_sprite9 ,laser_pattern_1
 453+ E2C0 3E 18       >                        ld      a, laser_sprite9
 453+ E2C2 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 453+ E2C5 3E DE       >                        ld      a,(((30-laserbasex) - 0) *8) + 32 -2
 453+ E2C7 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 453+ E2CA 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 453+ E2CC ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 453+ E2CF 3E 08       >                        ld      a,%00001000
 453+ E2D1 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 453+ E2D4 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 453+ E2D6 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 454+ E2D9                                      RightLaser 2,0,laser_sprite10,laser_pattern_2
 454+ E2D9 3E 19       >                        ld      a, laser_sprite10
 454+ E2DB ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 454+ E2DE 3E CE       >                        ld      a,(((30-laserbasex) - 2) *8) + 32 -2
 454+ E2E0 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 454+ E2E3 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 454+ E2E5 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 454+ E2E8 3E 08       >                        ld      a,%00001000
 454+ E2EA ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 454+ E2ED 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 454+ E2EF ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 455+ E2F2                                      RightLaser 4,1,laser_sprite11,laser_pattern_3
 455+ E2F2 3E 1A       >                        ld      a, laser_sprite11
 455+ E2F4 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 455+ E2F7 3E BE       >                        ld      a,(((30-laserbasex) - 4) *8) + 32 -2
 455+ E2F9 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 455+ E2FC 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 455+ E2FE ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 455+ E301 3E 08       >                        ld      a,%00001000
 455+ E303 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 455+ E306 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 455+ E308 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 456+ E30B                                      RightLaser 6,1,laser_sprite12,laser_pattern_4
 456+ E30B 3E 1B       >                        ld      a, laser_sprite12
 456+ E30D ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 456+ E310 3E AE       >                        ld      a,(((30-laserbasex) - 6) *8) + 32 -2
 456+ E312 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 456+ E315 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 456+ E317 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 456+ E31A 3E 08       >                        ld      a,%00001000
 456+ E31C ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 456+ E31F 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 456+ E321 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 457+ E324                                      RightLaser 8,2,laser_sprite13,laser_pattern_5
 457+ E324 3E 1C       >                        ld      a, laser_sprite13
 457+ E326 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 457+ E329 3E 9E       >                        ld      a,(((30-laserbasex) - 8) *8) + 32 -2
 457+ E32B ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 457+ E32E 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 457+ E330 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 457+ E333 3E 08       >                        ld      a,%00001000
 457+ E335 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 457+ E338 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 457+ E33A ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 458+ E33D C9                                   ret
 459+ E33E                                      ; Need simple show updates just to update the show attribute
 460+ E33E
 461+ E33E              sprite_laser_show:      ShowSprite laser_sprite1 ,laser_pattern_1
 461+ E33E 3E 10       >                        ld      a, laser_sprite1
 461+ E340 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 461+ E343 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 461+ E345 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 462+ E348                                      ShowSprite laser_sprite2 ,laser_pattern_2
 462+ E348 3E 11       >                        ld      a, laser_sprite2
 462+ E34A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 462+ E34D 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 462+ E34F ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 463+ E352                                      ShowSprite laser_sprite3 ,laser_pattern_3
 463+ E352 3E 12       >                        ld      a, laser_sprite3
 463+ E354 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 463+ E357 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 463+ E359 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 464+ E35C                                      ShowSprite laser_sprite4 ,laser_pattern_4
 464+ E35C 3E 13       >                        ld      a, laser_sprite4
 464+ E35E ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 464+ E361 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 464+ E363 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 465+ E366                                      ShowSprite laser_sprite5 ,laser_pattern_5
 465+ E366 3E 14       >                        ld      a, laser_sprite5
 465+ E368 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 465+ E36B 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 465+ E36D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 466+ E370                                      ShowSprite laser_sprite9 ,laser_pattern_1
 466+ E370 3E 18       >                        ld      a, laser_sprite9
 466+ E372 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 466+ E375 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 466+ E377 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 467+ E37A                                      ShowSprite laser_sprite10,laser_pattern_2
 467+ E37A 3E 19       >                        ld      a, laser_sprite10
 467+ E37C ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 467+ E37F 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 467+ E381 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 468+ E384                                      ShowSprite laser_sprite11,laser_pattern_3
 468+ E384 3E 1A       >                        ld      a, laser_sprite11
 468+ E386 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 468+ E389 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 468+ E38B ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 469+ E38E                                      ShowSprite laser_sprite12,laser_pattern_4
 469+ E38E 3E 1B       >                        ld      a, laser_sprite12
 469+ E390 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 469+ E393 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 469+ E395 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 470+ E398                                      ShowSprite laser_sprite13,laser_pattern_5
 470+ E398 3E 1C       >                        ld      a, laser_sprite13
 470+ E39A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 470+ E39D 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 470+ E39F ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 471+ E3A2 C9                                   ret
 472+ E3A3
 473+ E3A3              sprite_galactic_hide:   HideSprite galactic_cursor_sprite
 473+ E3A3 ED 91 34 00 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite
 473+ E3A7 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 474+ E3AB                                      HideSprite galactic_cursor_sprite1
 474+ E3AB ED 91 34 01 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite1
 474+ E3AF ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 475+ E3B3                                      HideSprite galactic_cursor_sprite2
 475+ E3B3 ED 91 34 03 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite2
 475+ E3B7 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 476+ E3BB C9                                   ret
 477+ E3BC
 478+ E3BC              sprite_galactic_hyper_hide:
 479+ E3BC                                      HideSprite galactic_hyper_sprite
 479+ E3BC ED 91 34 04 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite
 479+ E3C0 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 480+ E3C4                                       ;nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite1
 481+ E3C4              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 482+ E3C4              ;                        nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite2
 483+ E3C4              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 484+ E3C4 C9                                   ret
 485+ E3C5
 486+ E3C5              sprite_local_hide:      HideSprite local_cursor_sprite
 486+ E3C5 ED 91 34 05 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite
 486+ E3C9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 487+ E3CD                                      HideSprite local_cursor_sprite1
 487+ E3CD ED 91 34 06 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite1
 487+ E3D1 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 488+ E3D5                                      HideSprite local_cursor_sprite2
 488+ E3D5 ED 91 34 07 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite2
 488+ E3D9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 489+ E3DD C9                                   ret
 490+ E3DE
 491+ E3DE              sprite_local_hyper_hide:HideSprite local_hyper_sprite
 491+ E3DE ED 91 34 08 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite
 491+ E3E2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 492+ E3E6                                      HideSprite local_hyper_sprite1
 492+ E3E6 ED 91 34 09 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite1
 492+ E3EA ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 493+ E3EE                                      HideSprite local_hyper_sprite2
 493+ E3EE ED 91 34 0B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite2
 493+ E3F2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 494+ E3F6 C9                                   ret
 495+ E3F7
 496+ E3F7              sprite_reticule_hide:   HideSprite reticlule_sprite1
 496+ E3F7 ED 91 34 0C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite1
 496+ E3FB ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 497+ E3FF                                      HideSprite reticlule_sprite2
 497+ E3FF ED 91 34 0D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite2
 497+ E403 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 498+ E407                                      HideSprite reticlule_sprite3
 498+ E407 ED 91 34 0E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite3
 498+ E40B ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 499+ E40F                                      HideSprite reticlule_sprite4
 499+ E40F ED 91 34 0F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite4
 499+ E413 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 500+ E417 C9                                   ret
 501+ E418
 502+ E418              sprite_ecm_hide:        HideSprite ECM_sprite
 502+ E418 ED 91 34 24 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,ECM_sprite
 502+ E41C ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 503+ E420 C9                                   ret
 504+ E421
 505+ E421              sprite_missile_1_hide:  HideSprite missile_sprite1
 505+ E421 ED 91 34 25 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite1
 505+ E425 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 506+ E429 C9                                   ret
 507+ E42A
 508+ E42A              sprite_missile_2_hide:  HideSprite missile_sprite2
 508+ E42A ED 91 34 26 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite2
 508+ E42E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 509+ E432 C9                                   ret
 510+ E433
 511+ E433              sprite_missile_3_hide:  HideSprite missile_sprite3
 511+ E433 ED 91 34 27 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite3
 511+ E437 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 512+ E43B C9                                   ret
 513+ E43C
 514+ E43C              sprite_missile_4_hide:  HideSprite missile_sprite4
 514+ E43C ED 91 34 28 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite4
 514+ E440 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 515+ E444 C9                                   ret
 516+ E445
 517+ E445 CD 21 E4     sprite_missile_all_hide:call  sprite_missile_1_hide
 518+ E448 CD 2A E4                             call  sprite_missile_2_hide
 519+ E44B CD 33 E4                             call  sprite_missile_3_hide
 520+ E44E CD 3C E4                             call  sprite_missile_4_hide
 521+ E451 C9                                   ret
 522+ E452
 523+ E452 3E 22        sprite_targetting:      ld      a,targetting_sprite1                 ; LEFT ARM
 524+ E454 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 525+ E457 3E 7F                                ld      a,TargetetingCentreX1
 526+ E459 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 527+ E45C 3E 78                                ld		a,TargetetingCentreY
 528+ E45E ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 529+ E461 AF                                   xor     a
 530+ E462 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 531+ E465 3E 97                                ld      a,targetting_pattern | %10000000
 532+ E467 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 533+ E46A 3E 23        .right:                 ld      a,targetting_sprite2                ; RIGHT ARM
 534+ E46C ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 535+ E46F 3E AF                                ld      a,TargetetingCentreX2
 536+ E471 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 537+ E474 3E 78                                ld		a,TargetetingCentreY
 538+ E476 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 539+ E479 3E 08                                ld      a,%00001000
 540+ E47B ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 541+ E47E 3E 97                                ld      a,targetting_pattern | %10000000
 542+ E480 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 543+ E483 C9                                   ret
 544+ E484
 545+ E484 3E 22        sprite_lock:            ld      a,targetting_sprite1                 ; LEFT ARM
 546+ E486 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 547+ E489 3E 7F                                ld      a,TargetetingCentreX1
 548+ E48B ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 549+ E48E 3E 78                                ld		a,TargetetingCentreY
 550+ E490 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 551+ E493 AF                                   xor     a
 552+ E494 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 553+ E497 3E 98                                ld      a,lock_pattern | %10000000
 554+ E499 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 555+ E49C 3E 23        .right:                 ld      a,targetting_sprite2                 ; RIGHT ARM
 556+ E49E ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 557+ E4A1 3E AF                                ld      a,TargetetingCentreX2
 558+ E4A3 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 559+ E4A6 3E 78                                ld		a,TargetetingCentreY
 560+ E4A8 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 561+ E4AB 3E 08                                ld      a,%00001000
 562+ E4AD ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 563+ E4B0 3E 98                                ld      a,lock_pattern | %10000000
 564+ E4B2 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 565+ E4B5 C9                                   ret
 566+ E4B6
 567+ E4B6
 568+ E4B6
 569+ E4B6              sprite_targetting_hide: HideSprite targetting_sprite1
 569+ E4B6 ED 91 34 22 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,targetting_sprite1
 569+ E4BA ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 570+ E4BE                                      HideSprite targetting_sprite2
 570+ E4BE ED 91 34 23 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,targetting_sprite2
 570+ E4C2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 571+ E4C6 C9                                   ret
 572+ E4C7
 573+ E4C7              sprite_targetting_show: ShowSprite targetting_sprite1, targetting_pattern
 573+ E4C7 3E 22       >                        ld      a, targetting_sprite1
 573+ E4C9 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 573+ E4CC 3E 97       >                        ld      a,targetting_pattern | %10000000
 573+ E4CE ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 574+ E4D1                                      ShowSprite targetting_sprite2, targetting_pattern
 574+ E4D1 3E 23       >                        ld      a, targetting_sprite2
 574+ E4D3 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 574+ E4D6 3E 97       >                        ld      a,targetting_pattern | %10000000
 574+ E4D8 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 575+ E4DB C9                                   ret
 576+ E4DC
 577+ E4DC              sprite_laser_hide:      HideSprite laser_sprite1
 577+ E4DC ED 91 34 10 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite1
 577+ E4E0 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 578+ E4E4                                      HideSprite laser_sprite2
 578+ E4E4 ED 91 34 11 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite2
 578+ E4E8 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 579+ E4EC                                      HideSprite laser_sprite3
 579+ E4EC ED 91 34 12 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite3
 579+ E4F0 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 580+ E4F4                                      HideSprite laser_sprite4
 580+ E4F4 ED 91 34 13 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite4
 580+ E4F8 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 581+ E4FC                                      HideSprite laser_sprite5
 581+ E4FC ED 91 34 14 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite5
 581+ E500 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 582+ E504                                      HideSprite laser_sprite6
 582+ E504 ED 91 34 15 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite6
 582+ E508 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 583+ E50C                                      HideSprite laser_sprite7
 583+ E50C ED 91 34 16 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite7
 583+ E510 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 584+ E514                                      HideSprite laser_sprite8
 584+ E514 ED 91 34 17 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite8
 584+ E518 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 585+ E51C                                      HideSprite laser_sprite9
 585+ E51C ED 91 34 18 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite9
 585+ E520 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 586+ E524                                      HideSprite laser_sprite10
 586+ E524 ED 91 34 19 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite10
 586+ E528 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 587+ E52C                                      HideSprite laser_sprite11
 587+ E52C ED 91 34 1A >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite11
 587+ E530 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 588+ E534                                      HideSprite laser_sprite12
 588+ E534 ED 91 34 1B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite12
 588+ E538 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 589+ E53C                                      HideSprite laser_sprite13
 589+ E53C ED 91 34 1C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite13
 589+ E540 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 590+ E544                                      HideSprite laser_sprite14
 590+ E544 ED 91 34 1D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite14
 590+ E548 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 591+ E54C                                      HideSprite laser_sprite15
 591+ E54C ED 91 34 1E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite15
 591+ E550 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 592+ E554                                      HideSprite laser_sprite16
 592+ E554 ED 91 34 1F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite16
 592+ E558 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 593+ E55C C9                                   ret
 594+ E55D
 595+ E55D              sprite_compass_hide:    HideSprite compass_sun
 595+ E55D ED 91 34 20 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_sun
 595+ E561 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 596+ E565                                      HideSprite compass_station
 596+ E565 ED 91 34 21 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_station
 596+ E569 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 597+ E56D C9                                   ret
 598+ E56E
 599+ E56E CD A3 E3     sprite_cls_cursors:     call	sprite_galactic_hide
 600+ E571 CD BC E3                             call	sprite_galactic_hyper_hide
 601+ E574 CD C5 E3                             call	sprite_local_hide
 602+ E577 CD DE E3                             call	sprite_local_hyper_hide
 603+ E57A CD F7 E3                             call    sprite_reticule_hide
 604+ E57D CD DC E4                             call    sprite_laser_hide
 605+ E580 CD 5D E5                             call    sprite_compass_hide
 606+ E583 CD B6 E4                             call    sprite_targetting_hide
 607+ E586 CD 45 E4                             call    sprite_missile_all_hide
 608+ E589 C9                                   ret
 609+ E58A
 610+ E58A CD 6E E5     sprite_cls_all:         call    sprite_cls_cursors
 611+ E58D CD 18 E4                             call    sprite_ecm_hide
 612+ E590 CD 45 E4                             call    sprite_missile_all_hide
 613+ E593 C9                                   ret
 614+ E594
 615+ E594 CD 6E E5     init_sprites:           call		sprite_cls_cursors
 616+ E597 ED 91 15 43                          nextreg 	SPRITE_LAYERS_SYSTEM_REGISTER,%01000011
 617+ E59B C9                                   ret
 618+ E59C
 619+ E59C
 620+ E59C              select_sprite_a:        MACRO
 621+ E59C ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 622+ E59C                                      ENDM
 623+ E59C
 624+ E59C              set_sprite_x_low_a:     MACRO
 625+ E59C ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 626+ E59C                                      ENDM
 627+ E59C
 628+ E59C              set_sprite_y_low_a:     MACRO
 629+ E59C ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a
 630+ E59C                                      ENDM
 631+ E59C
 632+ E59C              set_sprite_x_msb_anc:   MACRO
 633+ E59C ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a
 634+ E59C                                      ENDM
 635+ E59C
 636+ E59C              set_sprite_pat_a:       MACRO
 637+ E59C ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 638+ E59C                                      ENDM
 639+ E59C
 640+ E59C              set_sprite_pat_a_nx:    MACRO
 641+ E59C ~                                    and     %10111111
 642+ E59C ~                                    set_sprite_pat_a
 643+ E59C                                      ENDM
 644+ E59C
 645+ E59C              set_sprite_pat_a_vis:   MACRO
 646+ E59C ~                                    or      %10000000
 647+ E59C ~                                    set_sprite_pat_a
 648+ E59C                                      ENDM
 649+ E59C
 650+ E59C              set_sprite_hidden:      MACRO
 651+ E59C ~                                    xor     a
 652+ E59C ~                                    set_sprite_pat_a
 653+ E59C                                      ENDM
 654+ E59C
 655+ E59C              set_sprite_pas_a_vis_nx:MACRO
 656+ E59C ~                                    or      %10000000
 657+ E59C ~                                    set_sprite_pat_a_nx
 658+ E59C                                      ENDM
 659+ E59C
 660+ E59C              set_sprite_extended_a:  MACRO
 661+ E59C ~                                    nextreg	SPRITE_PORT_ATTR4_REGISTER,a
 662+ E59C                                      ENDM
 663+ E59C
 664+ E59C 20           diag_x_pos:             DB 32
 665+ E59D 40           diag_y_pos:             DB 64
 666+ E59E 00           diag_sprite_nbr:        DB 0
 667+ E59F
 668+ E59F 06 40        sprite_diagnostic_clear:ld      b,64
 669+ E5A1 0E 00                                ld      c,0
 670+ E5A3 79           .HideLoop:              ld      a,c
 671+ E5A4                                      HideSprite a
 671+ E5A4 ED 92 34    >                            nextreg		SPRITE_PORT_INDEX_REGISTER,a
 671+ E5A7 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 672+ E5AB 0C                                   inc     c
 673+ E5AC 10 F5                                djnz    .HideLoop
 674+ E5AE C9                                   ret
 675+ E5AF
 676+ E5AF AF           sprite_diagnostic:      xor a
 677+ E5B0 32 9E E5                             ld      (diag_sprite_nbr),a
 678+ E5B3 01 3B 30                             ld      bc,$303B
 679+ E5B6 ED 79                                out     (c),a
 680+ E5B8 01 57 00     .sprite_loop:           ld      bc,SPRITE_INFO_PORT
 681+ E5BB 3A 9C E5                             ld      a,(diag_x_pos)
 682+ E5BE ED 79                                out     (c),a
 683+ E5C0 C6 10                                add     16
 684+ E5C2 32 9C E5                             ld      (diag_x_pos),a
 685+ E5C5 3A 9D E5                             ld      a,(diag_y_pos)
 686+ E5C8 ED 79                                out     (c),a
 687+ E5CA AF                                   xor     a
 688+ E5CB ED 79                                out     (c),a
 689+ E5CD 3A 9E E5                             ld      a,(diag_sprite_nbr)
 690+ E5D0 F6 80                                or      %10000000
 691+ E5D2 E6 BF                                and     %10111111
 692+ E5D4 ED 79                                out     (c),a
 693+ E5D6 3A 9E E5                             ld      a,(diag_sprite_nbr)
 694+ E5D9 3C                                   inc     a
 695+ E5DA 32 9E E5                             ld      (diag_sprite_nbr),a
 696+ E5DD                                      JumpIfALTNusng 14,.sprite_loop
 696+ E5DD FE 0E       >                        cp      14
 696+ E5DF DA B8 E5    >                        jp		c, .sprite_loop
 697+ E5E2 3E 40                                ld      a,64
 698+ E5E4                                      JumpIfALTNusng  25,.cont
 698+ E5E4 FE 19       >                        cp      25
 698+ E5E6 DA EA E5    >                        jp		c, .cont
 699+ E5E9 C9                                   ret
 700+ E5EA 3E 40        .cont:                  ld      a,64
 701+ E5EC 32 9D E5                             ld      (diag_y_pos),a
 702+ E5EF 18 C7                                jr      .sprite_loop
 703+ E5F1 C9                                   ret
 704+ E5F2
 705+ E5F2
 706+ E5F2
# file closed: ./Layer3Sprites/sprite_routines.asm
1414  E5F2                                  INCLUDE "./Layer3Sprites/sprite_load.asm"
# file opened: ./Layer3Sprites/sprite_load.asm
   1+ E5F2
   2+ E5F2
   3+ E5F2
   4+ E5F2 00 00 00...  FileWork                DS 10
   5+ E5FC 00           FileNumber:             DB  0
   6+ E5FD
   7+ E5FD 4E 45 53 70  Filename                DB "NESpr"
   7+ E601 72
   8+ E602 30 30        FileNbr                 DB "00"
   9+ E604 2E 64 61 74  Extension:              DB ".dat",0
   9+ E608 00
  10+ E609
  11+ E609
  12+ E609 3A FC E5     FileNbrA:               ld      a,(FileNumber)
  13+ E60C ED 23                                swapnib
  14+ E60E E6 0F                                and     %00001111
  15+ E610 06 30                                ld      b,"0"
  16+ E612 80                                   add     b
  17+ E613 32 02 E6                             ld      (FileNbr),a
  18+ E616 3A FC E5                             ld      a,(FileNumber)
  19+ E619 E6 0F                                and     %00001111
  20+ E61B 80                                   add     b
  21+ E61C 32 03 E6                             ld      (FileNbr+1),a
  22+ E61F C9                                   ret
  23+ E620
  24+ E620 01 3B 30     load_pattern_files:     ld          bc,SPRITE_SLOT_PORT             ; select pattern 0
  25+ E623                                      ZeroA                                       ;
  25+ E623 AF          >                        xor a
  26+ E624 ED 79                                out         (c),a
  27+ E626 3E 01                                ld          a,$01
  28+ E628 32 FC E5                             ld          (FileNumber),a
  29+ E62B 06 1D                                ld          b,29
  30+ E62D C5           .ReadLoop:              push        bc
  31+ E62E CD 09 E6                             call        FileNbrA
  32+ E631 CD 40 E6                             call        load_a_pattern
  33+ E634 3A FC E5                             ld          a,(FileNumber)
  34+ E637 3C                                   inc         a
  35+ E638 27                                   daa
  36+ E639 32 FC E5                             ld          (FileNumber),a
  37+ E63C C1                                   pop         bc
  38+ E63D 10 EE                                djnz        .ReadLoop
  39+ E63F C9                                   ret
  40+ E640                                                   ; write byte 256
  41+ E640
  42+ E640 21 FD E5     load_a_pattern:         ld          hl,Filename
  43+ E643 DD 21 5D E6                          ld          ix,SpriteDatabuffer
  44+ E647 01 00 01                             ld          bc,256
  45+ E64A CD 7E AA                             call        FileLoad
  46+ E64D 1E FF                                ld          e,255
  47+ E64F 01 5B 00     .streamPattern:         ld          bc, SPRITE_PATTERN_UPLOAD_PORT
  48+ E652 21 5D E6                             ld          hl, SpriteDatabuffer
  49+ E655 ED 90        .streamPatternLoop:     outinb                                      ; write byte of pattern
  50+ E657 1D                                   dec         e
  51+ E658 20 FB                                jr          nz, .streamPatternLoop          ; carry on writing for "e" iterations
  52+ E65A ED 90                                outinb
  53+ E65C C9                                   ret
  54+ E65D
  55+ E65D 00 00 00...  SpriteDatabuffer:       DS  256
  56+ E75D
  57+ E75D
# file closed: ./Layer3Sprites/sprite_load.asm
1415  E75D              ;;;***    INCLUDE " A./Layer3Sprites/SpriteSheet.asm"
1416  E75D                                  DISPLAY "Bank ",BankSPRITE," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankSPRITE"
1417  E75D                                  ASSERT $-SpritemembankAddr <8912 , Bank code leaks over 8K boundary
1418  E75D              ; Bank 61  ------------------------------------------------------------------------------------------------------------------------
1419  E75D                                  SLOT    ConsoleImageAddr
1420  E75D                                  PAGE    BankConsole
1421  E75D                                  ORG     ConsoleImageAddr, BankConsole
1422  E000                                  INCLUDE "./Images/ConsoleImageData.asm"
# file opened: ./Images/ConsoleImageData.asm
   1+ E000              ConsoleImageData:
   2+ E000 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$FF,$FF,$FF,$FF,$FF,$FF ; row 1
   2+ E004 FF FF 00 7F
   2+ E008 00 00 00 00
   2+ E00C 00 00 00 00
   2+ E010 00 00 00 00
   2+ E014 00 00 00 00
   2+ E018 7F 00 FF FF
   2+ E01C FF FF FF FF
   3+ E020 9C C3 FF FF      DB $9C,$C3,$FF,$FF,$FF,$FF,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$00,$01
   3+ E024 FF FF 40 08
   3+ E028 01 00 00 00
   3+ E02C 00 00 00 00
   3+ E030 00 00 00 00
   3+ E034 00 00 00 40
   3+ E038 08 01 80 00
   3+ E03C 00 00 00 01
   4+ E040 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$08,$04,$80,$00,$00,$00,$00,$01
   4+ E044 00 01 10 08
   4+ E048 04 00 00 00
   4+ E04C 00 00 00 00
   4+ E050 00 00 00 00
   4+ E054 00 00 00 10
   4+ E058 08 04 80 00
   4+ E05C 00 00 00 01
   5+ E060 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
   5+ E064 00 01 00 00
   5+ E068 00 00 00 00
   5+ E06C 00 00 00 00
   5+ E070 00 00 00 00
   5+ E074 00 00 00 00
   5+ E078 00 00 80 00
   5+ E07C 00 00 00 01
   6+ E080 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$07,$82,$00,$08,$06,$20,$01,$80,$04,$60,$10,$00,$41,$E0,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   6+ E084 00 01 00 00
   6+ E088 00 07 82 00
   6+ E08C 08 06 20 01
   6+ E090 80 04 60 10
   6+ E094 00 41 E0 00
   6+ E098 00 00 FF FF
   6+ E09C FF FF FF FF
   7+ E0A0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$30,$00,$08,$00,$04,$00,$61,$86,$00,$20,$00,$10,$00,$0C,$00,$60,$00,$FF,$FF,$FF,$FF,$FF,$FF
   7+ E0A4 00 01 00 06
   7+ E0A8 00 30 00 08
   7+ E0AC 00 04 00 61
   7+ E0B0 86 00 20 00
   7+ E0B4 10 00 0C 00
   7+ E0B8 60 00 FF FF
   7+ E0BC FF FF FF FF
   8+ E0C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$0F,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$55,$55,$55,$F0,$00,$FF,$FF,$FF,$FF,$FF,$FF
   8+ E0C4 00 01 00 0F
   8+ E0C8 AA AA AA AA
   8+ E0CC AA AA AA AA
   8+ E0D0 55 55 55 55
   8+ E0D4 55 55 55 55
   8+ E0D8 F0 00 FF FF
   8+ E0DC FF FF FF FF
   9+ E0E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$1E,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$78,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   9+ E0E4 FF FF 00 00
   9+ E0E8 00 1E 00 00
   9+ E0EC 08 00 00 01
   9+ E0F0 80 00 00 10
   9+ E0F4 00 00 78 00
   9+ E0F8 00 00 FF FF
   9+ E0FC FF FF FF FF
  10+ E100 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$01,$C9,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$C9,$C0,$80,$00,$00,$00,$00,$01 ; row 2
  10+ E104 00 01 01 C9
  10+ E108 C0 00 00 00
  10+ E10C 00 00 00 00
  10+ E110 00 00 00 00
  10+ E114 00 00 00 01
  10+ E118 C9 C0 80 00
  10+ E11C 00 00 00 01
  11+ E120 B2 C3 92 49      DB $B2,$C3,$92,$49,$24,$93,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$39
  11+ E124 24 93 40 08
  11+ E128 01 00 00 00
  11+ E12C 00 00 00 00
  11+ E130 00 00 00 00
  11+ E134 00 00 00 40
  11+ E138 08 01 80 00
  11+ E13C 00 00 7C 39
  12+ E140 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$00,$0C,$80,$00,$00,$00,$7C,$61
  12+ E144 00 01 18 00
  12+ E148 0C 00 00 00
  12+ E14C 00 00 00 00
  12+ E150 00 00 00 00
  12+ E154 00 00 00 18
  12+ E158 00 0C 80 00
  12+ E15C 00 00 7C 61
  13+ E160 9C 7E 00 00      DB $9C,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  13+ E164 00 01 00 00
  13+ E168 00 00 00 00
  13+ E16C 00 00 00 00
  13+ E170 00 00 00 00
  13+ E174 00 00 00 00
  13+ E178 00 00 80 00
  13+ E17C 00 00 00 01
  14+ E180 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$38,$04,$00,$10,$01,$40,$01,$80,$06,$80,$08,$00,$20,$1C,$00,$00,$00,$80,$00,$00,$00,$00,$81
  14+ E184 00 01 00 00
  14+ E188 00 38 04 00
  14+ E18C 10 01 40 01
  14+ E190 80 06 80 08
  14+ E194 00 20 1C 00
  14+ E198 00 00 80 00
  14+ E19C 00 00 00 81
  15+ E1A0 9C 30 00 00      DB $9C,$30,$00,$00,$00,$01,$00,$0C,$00,$40,$00,$10,$00,$04,$00,$11,$88,$00,$20,$00,$08,$00,$02,$00,$30,$00,$80,$00,$00,$00,$00,$81
  15+ E1A4 00 01 00 0C
  15+ E1A8 00 40 00 10
  15+ E1AC 00 04 00 11
  15+ E1B0 88 00 20 00
  15+ E1B4 08 00 02 00
  15+ E1B8 30 00 80 00
  15+ E1BC 00 00 00 81
  16+ E1C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$00,$10,$00,$00,$80,$00,$01,$80,$00,$01,$00,$00,$08,$00,$00,$60,$00,$80,$00,$00,$00,$00,$81
  16+ E1C4 00 01 00 06
  16+ E1C8 00 00 10 00
  16+ E1CC 00 80 00 01
  16+ E1D0 80 00 01 00
  16+ E1D4 00 08 00 00
  16+ E1D8 60 00 80 00
  16+ E1DC 00 00 00 81
  17+ E1E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$01,$E0,$00,$10,$00,$00,$01,$80,$00,$00,$08,$00,$07,$80,$00,$00,$00,$80,$00,$00,$00,$00,$81
  17+ E1E4 00 01 00 00
  17+ E1E8 00 01 E0 00
  17+ E1EC 10 00 00 01
  17+ E1F0 80 00 00 08
  17+ E1F4 00 07 80 00
  17+ E1F8 00 00 80 00
  17+ E1FC 00 00 00 81
  18+ E200 BE 3C 00 00      DB $BE,$3C,$00,$00,$00,$01,$06,$08,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$38,$80,$00,$00,$00,$3C,$79 ; row 3
  18+ E204 00 01 06 08
  18+ E208 38 00 00 00
  18+ E20C 00 00 00 00
  18+ E210 00 00 00 00
  18+ E214 00 00 00 06
  18+ E218 08 38 80 00
  18+ E21C 00 00 3C 79
  19+ E220 B2 C3 80 01      DB $B2,$C3,$80,$01,$00,$03,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$80,$00,$00,$00,$62,$65
  19+ E224 00 03 55 55
  19+ E228 55 00 00 00
  19+ E22C 00 00 00 00
  19+ E230 00 00 00 00
  19+ E234 00 00 00 55
  19+ E238 55 55 80 00
  19+ E23C 00 00 62 65
  20+ E240 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$0C,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$08,$18,$80,$00,$00,$00,$66,$61
  20+ E244 00 01 0C 08
  20+ E248 18 00 00 00
  20+ E24C 00 00 00 00
  20+ E250 00 00 00 00
  20+ E254 00 00 00 0C
  20+ E258 08 18 80 00
  20+ E25C 00 00 66 61
  21+ E260 B2 18 00 00      DB $B2,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  21+ E264 00 01 00 00
  21+ E268 00 00 00 00
  21+ E26C 00 00 00 00
  21+ E270 00 00 00 00
  21+ E274 00 00 00 00
  21+ E278 00 00 80 00
  21+ E27C 00 00 00 01
  22+ E280 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$01,$CA,$BA,$AA,$AA,$AA,$EA,$AA,$55,$57,$55,$55,$55,$5D,$53,$80,$00,$00,$80,$00,$00,$00,$00,$99
  22+ E284 00 01 00 00
  22+ E288 01 CA BA AA
  22+ E28C AA AA EA AA
  22+ E290 55 57 55 55
  22+ E294 55 5D 53 80
  22+ E298 00 00 80 00
  22+ E29C 00 00 00 99
  23+ E2A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$08,$01,$80,$00,$20,$00,$08,$00,$05,$A0,$00,$10,$00,$04,$00,$01,$80,$10,$00,$80,$00,$00,$00,$00,$B9
  23+ E2A4 00 01 00 08
  23+ E2A8 01 80 00 20
  23+ E2AC 00 08 00 05
  23+ E2B0 A0 00 10 00
  23+ E2B4 04 00 01 80
  23+ E2B8 10 00 80 00
  23+ E2BC 00 00 00 B9
  24+ E2C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$01,$00,$00,$20,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$04,$00,$00,$80,$00,$80,$00,$00,$00,$00,$B9
  24+ E2C4 00 01 00 01
  24+ E2C8 00 00 20 00
  24+ E2CC 01 00 00 01
  24+ E2D0 80 00 00 80
  24+ E2D4 00 04 00 00
  24+ E2D8 80 00 80 00
  24+ E2DC 00 00 00 B9
  25+ E2E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$1F,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$F8,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  25+ E2E4 00 01 00 00
  25+ E2E8 00 00 1F AA
  25+ E2EC AA AA AA AA
  25+ E2F0 55 55 55 55
  25+ E2F4 55 F8 00 00
  25+ E2F8 00 00 80 00
  25+ E2FC 00 00 00 A9
  26+ E300 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$0E,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$08,$18,$80,$00,$00,$00,$60,$65 ; row 4
  26+ E304 00 01 0E 08
  26+ E308 18 00 00 00
  26+ E30C 00 00 00 00
  26+ E310 00 00 00 00
  26+ E314 00 00 00 0E
  26+ E318 08 18 80 00
  26+ E31C 00 00 60 65
  27+ E320 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$62,$61
  27+ E324 00 01 40 08
  27+ E328 01 00 00 00
  27+ E32C 00 00 00 00
  27+ E330 00 00 00 00
  27+ E334 00 00 00 40
  27+ E338 08 01 80 00
  27+ E33C 00 00 62 61
  28+ E340 BC 66 00 00      DB $BC,$66,$00,$00,$00,$01,$03,$00,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$60,$80,$00,$00,$00,$66,$61
  28+ E344 00 01 03 00
  28+ E348 60 00 00 00
  28+ E34C 00 00 00 00
  28+ E350 00 00 00 00
  28+ E354 00 00 00 03
  28+ E358 00 60 80 00
  28+ E35C 00 00 66 61
  29+ E360 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  29+ E364 00 01 00 00
  29+ E368 00 00 00 00
  29+ E36C 00 0F FF FF
  29+ E370 FF FF F0 00
  29+ E374 00 00 00 00
  29+ E378 00 00 80 00
  29+ E37C 00 00 00 01
  30+ E380 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$06,$00,$20,$00,$40,$00,$A0,$01,$80,$05,$00,$02,$00,$04,$00,$60,$00,$00,$80,$00,$00,$00,$00,$B9
  30+ E384 00 01 00 00
  30+ E388 06 00 20 00
  30+ E38C 40 00 A0 01
  30+ E390 80 05 00 02
  30+ E394 00 04 00 60
  30+ E398 00 00 80 00
  30+ E39C 00 00 00 B9
  31+ E3A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$1A,$AA,$AA,$AA,$EA,$AA,$BA,$AA,$AB,$D5,$55,$5D,$55,$57,$55,$55,$55,$58,$00,$80,$00,$00,$00,$00,$85
  31+ E3A4 00 01 00 1A
  31+ E3A8 AA AA AA EA
  31+ E3AC AA BA AA AB
  31+ E3B0 D5 55 5D 55
  31+ E3B4 57 55 55 55
  31+ E3B8 58 00 80 00
  31+ E3BC 00 00 00 85
  32+ E3C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$C0,$00,$40,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$02,$00,$03,$00,$00,$80,$00,$00,$00,$00,$85
  32+ E3C4 00 01 00 00
  32+ E3C8 C0 00 40 00
  32+ E3CC 01 00 00 01
  32+ E3D0 80 00 00 80
  32+ E3D4 00 02 00 03
  32+ E3D8 00 00 80 00
  32+ E3DC 00 00 00 85
  33+ E3E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$FC,$20,$00,$00,$01,$80,$00,$00,$04,$3F,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  33+ E3E4 00 01 00 00
  33+ E3E8 00 00 00 FC
  33+ E3EC 20 00 00 01
  33+ E3F0 80 00 00 04
  33+ E3F4 3F 00 00 00
  33+ E3F8 00 00 80 00
  33+ E3FC 00 00 00 A9
  34+ E400 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$08,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$08,$0C,$80,$00,$00,$00,$3C,$65 ; row 5
  34+ E404 00 01 18 08
  34+ E408 0C 00 00 00
  34+ E40C 00 00 00 00
  34+ E410 00 00 00 00
  34+ E414 00 00 00 18
  34+ E418 08 0C 80 00
  34+ E41C 00 00 3C 65
  35+ E420 B2 7E 00 00      DB $B2,$7E,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$61
  35+ E424 00 01 40 08
  35+ E428 01 00 00 00
  35+ E42C 00 00 00 00
  35+ E430 00 00 00 00
  35+ E434 00 00 00 40
  35+ E438 08 01 80 00
  35+ E43C 00 00 7C 61
  36+ E440 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$80,$00,$00,$00,$66,$61
  36+ E444 00 01 00 FF
  36+ E448 80 00 00 00
  36+ E44C 00 00 00 00
  36+ E450 00 00 00 00
  36+ E454 00 00 00 00
  36+ E458 FF 80 80 00
  36+ E45C 00 00 66 61
  37+ E460 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$3F,$F0,$08,$01,$80,$10,$0F,$FC,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  37+ E464 00 01 00 00
  37+ E468 00 00 00 00
  37+ E46C 3F F0 08 01
  37+ E470 80 10 0F FC
  37+ E474 00 00 00 00
  37+ E478 00 00 80 00
  37+ E47C 00 00 00 01
  38+ E480 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$18,$00,$C0,$00,$80,$00,$18,$01,$80,$18,$00,$01,$00,$03,$00,$18,$00,$00,$80,$00,$00,$00,$00,$99
  38+ E484 00 01 00 00
  38+ E488 18 00 C0 00
  38+ E48C 80 00 18 01
  38+ E490 80 18 00 01
  38+ E494 00 03 00 18
  38+ E498 00 00 80 00
  38+ E49C 00 00 00 99
  39+ E4A0 BE 30 00 00      DB $BE,$30,$00,$00,$00,$01,$00,$10,$0C,$00,$00,$80,$00,$10,$00,$01,$80,$00,$08,$00,$01,$00,$00,$30,$08,$00,$80,$00,$00,$00,$00,$BD
  39+ E4A4 00 01 00 10
  39+ E4A8 0C 00 00 80
  39+ E4AC 00 10 00 01
  39+ E4B0 80 00 08 00
  39+ E4B4 01 00 00 30
  39+ E4B8 08 00 80 00
  39+ E4BC 00 00 00 BD
  40+ E4C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$30,$00,$80,$00,$02,$00,$00,$01,$80,$00,$00,$40,$00,$01,$00,$0C,$00,$00,$80,$00,$00,$00,$00,$BD
  40+ E4C4 00 01 00 00
  40+ E4C8 30 00 80 00
  40+ E4CC 02 00 00 01
  40+ E4D0 80 00 00 40
  40+ E4D4 00 01 00 0C
  40+ E4D8 00 00 80 00
  40+ E4DC 00 00 00 BD
  41+ E4E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$03,$FC,$00,$00,$01,$80,$00,$00,$3F,$C0,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$BD
  41+ E4E4 00 01 00 00
  41+ E4E8 00 00 00 03
  41+ E4EC FC 00 00 01
  41+ E4F0 80 00 00 3F
  41+ E4F4 C0 00 00 00
  41+ E4F8 00 00 80 00
  41+ E4FC 00 00 00 BD
  42+ E500 B0 C3 80 01      DB $B0,$C3,$80,$01,$00,$03,$30,$08,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$08,$06,$C0,$00,$80,$01,$06,$7D ; row 6
  42+ E504 00 03 30 08
  42+ E508 06 00 00 00
  42+ E50C 00 00 00 00
  42+ E510 00 00 00 00
  42+ E514 00 00 00 30
  42+ E518 08 06 C0 00
  42+ E51C 80 01 06 7D
  43+ E520 B2 3C 00 00      DB $B2,$3C,$00,$00,$00,$01,$40,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$01,$C0,$00,$80,$01,$66,$65
  43+ E524 00 01 40 00
  43+ E528 01 00 00 00
  43+ E52C 00 00 00 00
  43+ E530 00 00 00 00
  43+ E534 00 00 00 40
  43+ E538 00 01 C0 00
  43+ E53C 80 01 66 65
  44+ E540 B0 66 80 01      DB $B0,$66,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$80,$01,$66,$61
  44+ E544 00 03 00 00
  44+ E548 00 00 00 00
  44+ E54C 00 00 00 00
  44+ E550 00 00 00 00
  44+ E554 00 00 00 00
  44+ E558 00 00 C0 00
  44+ E55C 80 01 66 61
  45+ E560 B2 18 80 01      DB $B2,$18,$80,$01,$00,$03,$00,$00,$00,$00,$00,$1F,$C1,$AA,$AA,$AA,$55,$55,$57,$83,$F8,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  45+ E564 00 03 00 00
  45+ E568 00 00 00 1F
  45+ E56C C1 AA AA AA
  45+ E570 55 55 57 83
  45+ E574 F8 00 00 00
  45+ E578 00 00 80 00
  45+ E57C 00 00 00 01
  46+ E580 B0 18 80 01      DB $B0,$18,$80,$01,$00,$03,$00,$00,$60,$01,$00,$01,$00,$01,$04,$01,$80,$20,$80,$00,$80,$00,$80,$06,$00,$00,$80,$00,$00,$00,$00,$99
  46+ E584 00 03 00 00
  46+ E588 60 01 00 01
  46+ E58C 00 01 04 01
  46+ E590 80 20 80 00
  46+ E594 80 00 80 06
  46+ E598 00 00 80 00
  46+ E59C 00 00 00 99
  47+ E5A0 B2 30 80 01      DB $B2,$30,$80,$01,$00,$03,$00,$10,$18,$00,$01,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$80,$00,$18,$08,$00,$80,$00,$00,$00,$00,$A1
  47+ E5A4 00 03 00 10
  47+ E5A8 18 00 01 00
  47+ E5AC 00 20 00 01
  47+ E5B0 80 00 04 00
  47+ E5B4 00 80 00 18
  47+ E5B8 08 00 80 00
  47+ E5BC 00 00 00 A1
  48+ E5C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$0E,$AB,$AA,$AA,$AE,$AA,$AA,$AA,$55,$55,$55,$75,$55,$55,$D5,$70,$00,$00,$80,$00,$00,$00,$00,$85
  48+ E5C4 00 01 00 00
  48+ E5C8 0E AB AA AA
  48+ E5CC AE AA AA AA
  48+ E5D0 55 55 55 75
  48+ E5D4 55 55 D5 70
  48+ E5D8 00 00 80 00
  48+ E5DC 00 00 00 85
  49+ E5E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$03,$FF,$F0,$01,$80,$0F,$FF,$C0,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  49+ E5E4 00 01 00 00
  49+ E5E8 00 00 00 00
  49+ E5EC 03 FF F0 01
  49+ E5F0 80 0F FF C0
  49+ E5F4 00 00 00 00
  49+ E5F8 00 00 80 00
  49+ E5FC 00 00 00 89
  50+ E600 B0 C3 92 49      DB $B0,$C3,$92,$49,$24,$93,$20,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$08,$02,$C9,$24,$92,$49,$3C,$61 ; row 7
  50+ E604 24 93 20 08
  50+ E608 02 00 00 00
  50+ E60C 00 00 00 00
  50+ E610 00 00 00 00
  50+ E614 00 00 00 20
  50+ E618 08 02 C9 24
  50+ E61C 92 49 3C 61
  51+ E620 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$60,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$02,$C9,$24,$92,$49,$66,$39
  51+ E624 00 01 60 08
  51+ E628 02 00 00 00
  51+ E62C 00 00 00 00
  51+ E630 00 00 00 00
  51+ E634 00 00 00 60
  51+ E638 08 02 C9 24
  51+ E63C 92 49 66 39
  52+ E640 B0 3C 92 49      DB $B0,$3C,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$24,$92,$49,$7C,$7D
  52+ E644 24 93 00 00
  52+ E648 00 00 00 00
  52+ E64C 00 00 00 00
  52+ E650 00 00 00 00
  52+ E654 00 00 00 00
  52+ E658 00 00 C9 24
  52+ E65C 92 49 7C 7D
  53+ E660 9C 18 92 49      DB $9C,$18,$92,$49,$24,$93,$00,$00,$00,$00,$03,$E0,$02,$60,$10,$01,$80,$08,$06,$40,$07,$E0,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  53+ E664 24 93 00 00
  53+ E668 00 00 03 E0
  53+ E66C 02 60 10 01
  53+ E670 80 08 06 40
  53+ E674 07 E0 00 00
  53+ E678 00 00 80 00
  53+ E67C 00 00 00 01
  54+ E680 BE 18 92 49      DB $BE,$18,$92,$49,$24,$93,$00,$01,$AA,$AE,$AA,$AA,$AA,$AA,$AB,$AA,$55,$D5,$55,$55,$55,$55,$75,$55,$80,$00,$80,$00,$00,$00,$00,$99
  54+ E684 24 93 00 01
  54+ E688 AA AE AA AA
  54+ E68C AA AA AB AA
  54+ E690 55 D5 55 55
  54+ E694 55 55 75 55
  54+ E698 80 00 80 00
  54+ E69C 00 00 00 99
  55+ E6A0 B2 3E 92 49      DB $B2,$3E,$92,$49,$24,$93,$00,$10,$60,$00,$02,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$40,$00,$06,$08,$00,$80,$00,$00,$00,$00,$BD
  55+ E6A4 24 93 00 10
  55+ E6A8 60 00 02 00
  55+ E6AC 00 20 00 01
  55+ E6B0 80 00 04 00
  55+ E6B4 00 40 00 06
  55+ E6B8 08 00 80 00
  55+ E6BC 00 00 00 BD
  56+ E6C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$03,$02,$00,$00,$04,$00,$00,$01,$80,$00,$00,$20,$00,$00,$00,$C0,$00,$00,$80,$00,$00,$00,$00,$B9
  56+ E6C4 00 01 00 00
  56+ E6C8 03 02 00 00
  56+ E6CC 04 00 00 01
  56+ E6D0 80 00 00 20
  56+ E6D4 00 00 00 C0
  56+ E6D8 00 00 80 00
  56+ E6DC 00 00 00 B9
  57+ E6E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  57+ E6E4 00 01 00 00
  57+ E6E8 00 00 00 00
  57+ E6EC 00 00 0F FF
  57+ E6F0 FF F0 00 00
  57+ E6F4 00 00 00 00
  57+ E6F8 00 00 80 00
  57+ E6FC 00 00 00 89
  58+ E700 80 C3 FF FF      DB $80,$C3,$FF,$FF,$FF,$FF,$60,$08,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$03,$FF,$FF,$FF,$FF,$00,$61 ; row 8
  58+ E704 FF FF 60 08
  58+ E708 03 00 00 00
  58+ E70C 00 00 00 00
  58+ E710 00 00 00 00
  58+ E714 00 00 00 60
  58+ E718 08 03 FF FF
  58+ E71C FF FF 00 61
  59+ E720 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$20,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$02,$FF,$FF,$FF,$FF,$00,$01
  59+ E724 FF FF 20 00
  59+ E728 02 00 00 00
  59+ E72C 00 00 00 00
  59+ E730 00 00 00 00
  59+ E734 00 00 00 20
  59+ E738 00 02 FF FF
  59+ E73C FF FF 00 01
  60+ E740 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$01
  60+ E744 FF FF 00 00
  60+ E748 00 00 00 00
  60+ E74C 00 00 00 00
  60+ E750 00 00 00 00
  60+ E754 00 00 00 00
  60+ E758 00 00 FF FF
  60+ E75C FF FF 00 01
  61+ E760 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$7D,$8A,$AE,$BA,$AA,$AA,$55,$55,$5D,$75,$51,$BE,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  61+ E764 FF FF 00 00
  61+ E768 00 00 7D 8A
  61+ E76C AE BA AA AA
  61+ E770 55 55 5D 75
  61+ E774 51 BE 00 00
  61+ E778 00 00 80 00
  61+ E77C 00 00 00 01
  62+ E780 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$03,$00,$08,$00,$04,$00,$02,$00,$81,$81,$00,$40,$00,$20,$00,$10,$00,$C0,$00,$FF,$FF,$FF,$FF,$FF,$FF
  62+ E784 FF FF 00 03
  62+ E788 00 08 00 04
  62+ E78C 00 02 00 81
  62+ E790 81 00 40 00
  62+ E794 20 00 10 00
  62+ E798 C0 00 FF FF
  62+ E79C FF FF FF FF
  63+ E7A0 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$08,$C0,$00,$04,$00,$00,$40,$00,$01,$80,$00,$02,$00,$00,$20,$00,$03,$10,$00,$FF,$FF,$FF,$FF,$FF,$FF
  63+ E7A4 FF FF 00 08
  63+ E7A8 C0 00 04 00
  63+ E7AC 00 40 00 01
  63+ E7B0 80 00 02 00
  63+ E7B4 00 20 00 03
  63+ E7B8 10 00 FF FF
  63+ E7BC FF FF FF FF
  64+ E7C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$E4,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$27,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  64+ E7C4 00 01 00 00
  64+ E7C8 00 E4 00 00
  64+ E7CC 08 00 00 01
  64+ E7D0 80 00 00 10
  64+ E7D4 00 00 27 00
  64+ E7D8 00 00 FF FF
  64+ E7DC FF FF FF FF
  65+ E7E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  65+ E7E4 00 01 00 00
  65+ E7E8 00 00 00 00
  65+ E7EC 00 00 00 00
  65+ E7F0 00 00 00 00
  65+ E7F4 00 00 00 00
  65+ E7F8 00 00 FF FF
  65+ E7FC FF FF FF FF
  66+ E800              ConsoleAttributes:
  67+ E800 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  67+ E804 07 07 45 45
  67+ E808 45 00 00 00
  67+ E80C 00 00 00 00
  67+ E810 00 00 00 00
  67+ E814 00 00 00 41
  67+ E818 41 41 07 07
  67+ E81C 07 07 07 07
  68+ E820 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$05,$45,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$41,$01,$07,$07,$07,$07,$07,$07
  68+ E824 07 07 05 45
  68+ E828 05 00 00 00
  68+ E82C 00 00 00 00
  68+ E830 00 00 00 00
  68+ E834 00 00 00 01
  68+ E838 41 01 07 07
  68+ E83C 07 07 07 07
  69+ E840 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  69+ E844 07 07 45 45
  69+ E848 45 00 00 00
  69+ E84C 00 00 00 00
  69+ E850 00 00 00 00
  69+ E854 00 00 00 41
  69+ E858 41 41 07 07
  69+ E85C 07 07 07 07
  70+ E860 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00,$00,$00,$00,$07,$00,$00,$00,$00,$07
  70+ E864 07 07 00 00
  70+ E868 00 00 42 42
  70+ E86C 42 42 42 42
  70+ E870 42 42 42 42
  70+ E874 42 42 00 00
  70+ E878 00 00 07 00
  70+ E87C 00 00 00 07
  71+ E880 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$02,$00,$07,$07,$07,$07,$07,$07
  71+ E884 07 07 00 02
  71+ E888 42 42 42 42
  71+ E88C 42 42 42 42
  71+ E890 42 42 42 42
  71+ E894 42 42 42 42
  71+ E898 02 00 07 07
  71+ E89C 07 07 07 07
  72+ E8A0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  72+ E8A4 07 07 00 02
  72+ E8A8 02 02 02 02
  72+ E8AC 02 02 02 02
  72+ E8B0 02 02 02 02
  72+ E8B4 02 02 02 02
  72+ E8B8 02 00 07 07
  72+ E8BC 07 07 07 07
  73+ E8C0 07 00 00 00      DB $07,$00,$00,$00,$00,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  73+ E8C4 00 07 00 02
  73+ E8C8 02 02 02 02
  73+ E8CC 02 02 02 02
  73+ E8D0 02 02 02 02
  73+ E8D4 02 02 02 02
  73+ E8D8 02 00 07 07
  73+ E8DC 07 07 07 07
  74+ E8E0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$07,$07,$07,$07,$07,$07
  74+ E8E4 07 07 00 00
  74+ E8E8 00 02 02 02
  74+ E8EC 02 02 02 02
  74+ E8F0 02 02 02 02
  74+ E8F4 02 02 02 00
  74+ E8F8 00 00 07 07
  74+ E8FC 07 07 07 07
  75+ E900
  76+ E900
# file closed: ./Images/ConsoleImageData.asm
1423  E900                                  DISPLAY "Bank ",BankConsole," - Bytes free ",/D, $2000 - ($-ConsoleImageAddr), " - BankConsole"
1424  E900                                  ASSERT $-ConsoleImageAddr <8912 , Bank code leaks over 8K boundary
1425  E900              ; Bank 62  ------------------------------------------------------------------------------------------------------------------------
1426  E900                                  SLOT    ViewFrontAddr
1427  E900                                  PAGE    BankFrontView
1428  E900                                  ORG     ViewFrontAddr
1429  C000                                  INCLUDE "./Views/Front_View.asm"
# file opened: ./Views/Front_View.asm
   1+ C000
   2+ C000 46 72 6F 6E  front_page_page_marker  DB "FrontView   PG62"
   2+ C004 74 56 69 65
   2+ C008 77 20 20 20
   2+ C00C 50 47 36 32
   3+ C010
   4+ C010 47           draw_front_calc_alpha:  ld      b,a
   5+ C011 E6 80                                and     $80
   6+ C013 32 B7 7D                             ld      (ALP2),a                            ; set sign
   7+ C016 4F                                   ld      c,a                                 ; save sign
   8+ C017 EE 80                                xor     $80
   9+ C019 32 B8 7D                             ld      (ALP2FLIP),a                        ; and oppsite sign
  10+ C01C 3A B3 7D                             ld      a,(JSTX)
  11+ C01F ED 27 80                             test    $80
  12+ C022 28 02                                jr      z,  .PositiveRoll
  13+ C024 ED 44        .NegativeRoll:          neg
  14+ C026 CB 3F        .PositiveRoll           srl     a                                   ; divide sign by 4
  15+ C028 CB 3F                                srl     a
  16+ C02A FE 08                                cp      8
  17+ C02C 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  18+ C02E CB 3F        .IncreasedDamp          srl     a
  19+ C030 32 B6 7D     .NotIncreasedDamp:      ld      (ALP1),a
  20+ C033 B1                                   or      c
  21+ C034 32 B5 7D                             ld      (ALPHA),a                           ; a = signed bit alph1
  22+ C037 21 F4 C2     .RestartDampenRoll:     ld      hl,dampenRcounter
  23+ C03A 36 04                                ld      (hl),dampenRate
  24+ C03C C9                                   ret
  25+ C03D
  26+ C03D              ; Do the same for pitch
  27+ C03D 47           draw_front_calc_beta:   ld      b,a
  28+ C03E E6 80                                and     $80
  29+ C040 32 AB 7D                             ld      (BET2),a                            ; set sign
  30+ C043 4F                                   ld      c,a                                 ; save sign
  31+ C044 EE 80                                xor     $80
  32+ C046 32 AC 7D                             ld      (BET2FLIP),a                        ; and oppsite sign
  33+ C049 3A A9 7D                             ld      a,(JSTY)
  34+ C04C ED 27 80                             test    $80
  35+ C04F 28 02                                jr      z,  .PositivePitch
  36+ C051 ED 44        .NegativePitch:         neg
  37+ C053 CB 3F        .PositivePitch:         srl     a                                   ; divide sign by 4
  38+ C055 CB 3F                                srl     a
  39+ C057 FE 08                                cp      8
  40+ C059 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  41+ C05B CB 3F        .IncreasedDamp          srl     a
  42+ C05D 32 AA 7D     .NotIncreasedDamp:      ld      (BET1),a
  43+ C060 B1                                   or      c
  44+ C061 32 A8 7D                             ld      (BETA),a                            ; a = signed bit bet1
  45+ C064 21 F5 C2     .RestartDampenPitch:    ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
  46+ C067 36 04                                ld      (hl),dampenRate
  47+ C069 C9                                   ret
  48+ C06A
  49+ C06A              initialise_front_view:
  50+ C06A
  51+ C06A              draw_front_view:        MMUSelectLayer1
  51+ C06A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  52+ C06E CD 8F E0                             call    l1_cls
  53+ C071 CD A9 E0                             call    l1_attr_cls
  54+ C074                                      MMUSelectLayer2
  54+ C074 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  55+ C078 CD 04 E0                             call     asm_l2_double_buffer_on
  56+ C07B                                      MMUSelectSpriteBank
  56+ C07B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  57+ C07F CD 6E E5                             call    sprite_cls_cursors
  58+ C082 CD 6C E1                             call    sprite_reticule
  59+ C085 CD 48 E2                             call    sprite_laser
  60+ C088 CD 52 E4                             call    sprite_targetting
  61+ C08B CD 84 E4                             call    sprite_lock
  62+ C08E CD B6 E4                             call    sprite_targetting_hide      ; do not show targeting initially
  63+ C091 CD 29 E1                             call    sprite_ECM
  64+ C094 CD 50 E1                             call    sprite_missile_1
  65+ C097 CD 57 E1                             call    sprite_missile_2
  66+ C09A CD 5E E1                             call    sprite_missile_3
  67+ C09D CD 65 E1                             call    sprite_missile_4
  68+ C0A0 CD 18 E4                             call    sprite_ecm_hide
  69+ C0A3 CD 45 E4                             call    sprite_missile_all_hide
  70+ C0A6                                     ; call    sprite_laser_show
  71+ C0A6                                      MMUSelectConsoleBank
  71+ C0A6 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  72+ C0AA 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  73+ C0AD 11 00 E0                             ld          de,ConsoleImageData
  74+ C0B0 01 00 08                             ld          bc, ScreenL1BottomLen
  75+ C0B3 CD 5E 7D                             call        memcopy_dma
  76+ C0B6 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  77+ C0B9 11 00 E8                             ld          de,ConsoleAttributes
  78+ C0BC 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  79+ C0BF CD 5E 7D                             call        memcopy_dma
  80+ C0C2 CD E0 7A                             call        InitialiseStars
  81+ C0C5 AF                                   xor         a
  82+ C0C6 32 5E 80                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
  83+ C0C9 32 D0 C0                             ld          (CurrentLock),a             ; we are on no targetting sprites
  84+ C0CC 32 D1 C0                             ld          (ShowingLock),a
  85+ C0CF C9                                   ret
  86+ C0D0
  87+ C0D0 00           CurrentLock             DB      0
  88+ C0D1 00           ShowingLock             DB      0
  89+ C0D2 3A 22 81     update_front_view:      ld      a,(MissileTargettingFlag)
  90+ C0D5                                      JumpIfANEquNusng StageMissileNotTargeting,  .NoTarget
  90+ C0D5 FE FF       >                        cp     StageMissileNotTargeting
  90+ C0D7 CA E7 C0    >                        jp     z,.NoTarget
  91+ C0DA                                      JumpIfANEquNusng StageMissileTargeting, .Targetting
  91+ C0DA FE FE       >                        cp     StageMissileTargeting
  91+ C0DC CA F4 C0    >                        jp     z,.Targetting
  92+ C0DF CB 7F                                bit     7,a
  93+ C0E1 20 26                                jr      nz, .Locked
  94+ C0E3 CD B6 E4                             call    sprite_targetting_hide
  95+ C0E6 C9                                   ret
  96+ C0E7 3A D1 C0     .NoTarget:              ld      a,(ShowingLock)
  97+ C0EA                                      ReturnIfAIsZero
  97+ C0EA A7          >                        and     a
  97+ C0EB C8          >                        ret     z
  98+ C0EC                                      MMUSelectSpriteBank
  98+ C0EC ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  99+ C0F0 CD B6 E4                             call     sprite_targetting_hide
 100+ C0F3 C9                                   ret
 101+ C0F4              .Targetting:            CallIfMemZero CurrentLock, sprite_targetting
 101+ C0F4 3A D0 C0    >                        ld      a,(CurrentLock)
 101+ C0F7 A7          >                        and     a
 101+ C0F8 CC 52 E4    >                        call    z, sprite_targetting
 102+ C0FB                                      CallIfMemZero ShowingLock, sprite_targetting_show
 102+ C0FB 3A D1 C0    >                        ld      a,(ShowingLock)
 102+ C0FE A7          >                        and     a
 102+ C0FF CC C7 E4    >                        call    z, sprite_targetting_show
 103+ C102 21 00 01                             ld      hl,$0100                        ; set both bytes in one go
 104+ C105 22 D0 C0                             ld      (CurrentLock),hl
 105+ C108 C9                                   ret
 106+ C109              .Locked:                CallIfMemNotZero CurrentLock, sprite_lock
 106+ C109 3A D0 C0    >                        ld      a,(CurrentLock)
 106+ C10C A7          >                        and     a
 106+ C10D C4 84 E4    >                        call    nz, sprite_lock
 107+ C110                                      CallIfMemZero ShowingLock, sprite_targetting_show
 107+ C110 3A D1 C0    >                        ld      a,(ShowingLock)
 107+ C113 A7          >                        and     a
 107+ C114 CC C7 E4    >                        call    z, sprite_targetting_show
 108+ C117 21 01 01                             ld      hl,$0101                        ; set both bytes in one go
 109+ C11A 22 D0 C0                             ld      (CurrentLock),hl
 110+ C11D C9                                   ret
 111+ C11E
 112+ C11E                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
 113+ C11E                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
 114+ C11E 80 40 60 28  LightningLines:         db 128, 064, 096, 040, 255, 097, 042, 076, 035, 031, 082, 039, 079, 020, 026, 079, 026, 058, 018, 022, 064, 021, 032, 026, 018, 038, 025, 030, 009, 026, 035, 020, 005, 016, 018, 037, 021, 000, 000, 018
 114+ C122 FF 61 2A 4C
 114+ C126 23 1F 52 27
 114+ C12A 4F 14 1A 4F
 114+ C12E 1A 3A 12 16
 114+ C132 40 15 20 1A
 114+ C136 12 26 19 1E
 114+ C13A 09 1A 23 14
 114+ C13E 05 10 12 25
 114+ C142 15 00 00 12
 115+ C146 80 40 8B 28                          db 128, 064, 139, 040, 255, 137, 045, 160, 035, 031, 150, 040, 157, 056, 026, 160, 036, 175, 010, 022, 156, 037, 196, 040, 018, 197, 041, 223, 033, 026, 223, 033, 245, 030, 018, 223, 032, 254, 047, 018
 115+ C14A FF 89 2D A0
 115+ C14E 23 1F 96 28
 115+ C152 9D 38 1A A0
 115+ C156 24 AF 0A 16
 115+ C15A 9C 25 C4 28
 115+ C15E 12 C5 29 DF
 115+ C162 21 1A DF 21
 115+ C166 F5 1E 12 DF
 115+ C16A 20 FE 2F 12
 116+ C16E 80 40 5A 59                          db 128, 064, 090, 089, 255, 089, 089, 064, 098, 031, 079, 092, 064, 072, 025, 065, 075, 030, 070, 022, 035, 071, 038, 064, 018, 067, 095, 021, 099, 026, 031, 097, 000, 080, 018, 031, 097, 021, 110, 018
 116+ C172 FF 59 59 40
 116+ C176 62 1F 4F 5C
 116+ C17A 40 48 19 41
 116+ C17E 4B 1E 46 16
 116+ C182 23 47 26 40
 116+ C186 12 43 5F 15
 116+ C18A 63 1A 1F 61
 116+ C18E 00 50 12 1F
 116+ C192 61 15 6E 12
 117+ C196 80 40 61 71                          db 128, 064, 097, 113, 255, 098, 110, 064, 115, 031, 070, 115, 073, 127, 025, 071, 114, 060, 112, 022, 030, 120, 020, 126, 018, 070, 114, 050, 120, 026, 050, 120, 027, 119, 018, 020, 125, 010, 120, 018
 117+ C19A FF 62 6E 40
 117+ C19E 73 1F 46 73
 117+ C1A2 49 7F 19 47
 117+ C1A6 72 3C 70 16
 117+ C1AA 1E 78 14 7E
 117+ C1AE 12 46 72 32
 117+ C1B2 78 1A 32 78
 117+ C1B6 1B 77 12 14
 117+ C1BA 7D 0A 78 12
 118+ C1BE 80 40 84 59                          db 128, 064, 132, 089, 255, 131, 081, 145, 098, 031, 145, 097, 133, 103, 025, 145, 098, 150, 110, 022, 150, 109, 154, 105, 018, 150, 110, 146, 120, 026, 145, 120, 140, 126, 018, 147, 120, 159, 126, 018
 118+ C1C2 FF 83 51 91
 118+ C1C6 62 1F 91 61
 118+ C1CA 85 67 19 91
 118+ C1CE 62 96 6E 16
 118+ C1D2 96 6D 9A 69
 118+ C1D6 12 96 6E 92
 118+ C1DA 78 1A 91 78
 118+ C1DE 8C 7E 12 93
 118+ C1E2 78 9F 7E 12
 119+ C1E6 80 40 9F 67                          db 128, 064, 159, 103, 255, 161, 102, 171, 108, 031, 160, 102, 175, 127, 025, 175, 124, 200, 122, 022, 200, 121, 223, 120, 018, 224, 120, 225, 127, 026, 224, 119, 245, 116, 018, 246, 117, 254, 123, 018
 119+ C1EA FF A1 66 AB
 119+ C1EE 6C 1F A0 66
 119+ C1F2 AF 7F 19 AF
 119+ C1F6 7C C8 7A 16
 119+ C1FA C8 79 DF 78
 119+ C1FE 12 E0 78 E1
 119+ C202 7F 1A E0 77
 119+ C206 F5 74 12 F6
 119+ C20A 75 FE 7B 12
 120+ C20E 80 40 91 4A                          db 128, 064, 145, 074, 255, 145, 073, 158, 072, 031, 159, 072, 179, 064, 025, 159, 073, 185, 085, 022, 182, 084, 197, 076, 018, 195, 075, 207, 079, 026, 206, 079, 245, 063, 018, 206, 080, 245, 105, 018
 120+ C212 FF 91 49 9E
 120+ C216 48 1F 9F 48
 120+ C21A B3 40 19 9F
 120+ C21E 49 B9 55 16
 120+ C222 B6 54 C5 4C
 120+ C226 12 C3 4B CF
 120+ C22A 4F 1A CE 4F
 120+ C22E F5 3F 12 CE
 120+ C232 50 F5 69 12
 121+ C236
 122+ C236              ; Draw line at hl for b lines
 123+ C236 E5 C5        DrawLighningLine:       push    hl,,bc
 124+ C238 4E                                   ld      c,(hl)
 125+ C239 23                                   inc     hl
 126+ C23A 46                                   ld      b,(hl)
 127+ C23B 23                                   inc     hl
 128+ C23C 5E                                   ld      e,(hl)
 129+ C23D 23                                   inc     hl
 130+ C23E 56                                   ld      d,(hl)
 131+ C23F 23                                   inc     hl
 132+ C240 7E                                   ld      a,(hl)          ; colour
 133+ C241 CD D2 E9                             call    l2_draw_diagonal
 134+ C244 C1 E1                                pop     hl,,bc
 135+ C246 3E 05                                ld      a,5
 136+ C248 ED 31                                add     hl,a
 137+ C24A 10 EA                                djnz    DrawLighningLine
 138+ C24C C9                                   ret
 139+ C24D
 140+ C24D              ;Loop though all lines
 141+ C24D              ;   60$% chance of drawing a line, call draw line
 142+ C24D              ;   go to next line
 143+ C24D              ;repeat
 144+ C24D 06 07        hyperspace_Lightning:   ld      b, 7                    ; total number of lightning bolts
 145+ C24F 21 1E C1                             ld      hl,LightningLines
 146+ C252                                      MMUSelectLayer2
 146+ C252 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 147+ C256                                      ;break
 148+ C256              ; above here select which lines table we will use
 149+ C256 C5 E5        .LineLoop:              push    bc,,hl
 150+ C258 CD 37 84                             call    doRandom
 151+ C25B FE 1E                                cp      30
 152+ C25D 30 0C                                jr      nc,.NextLine
 153+ C25F CD 37 84                             call    doRandom
 154+ C262 E6 07                                and     $07
 155+ C264 3C                                   inc     a
 156+ C265 47                                   ld      b,a
 157+ C266 E1                                   pop     hl
 158+ C267 E5                                   push    hl
 159+ C268 CD 36 C2                             call    DrawLighningLine
 160+ C26B E1 C1        .NextLine:              pop     bc,,hl
 161+ C26D 16 08                                ld      d,8
 162+ C26F 1E 05                                ld      e,5
 163+ C271 ED 30                                mul
 164+ C273 19                                   add     hl,de
 165+ C274 10 E0                                djnz    .LineLoop
 166+ C276 3A 68 80                             ld      a,(HyperCircle)
 167+ C279 57                                   ld      d,a
 168+ C27A 01 80 40                             ld      bc, $4080
 169+ C27D                                      ;break
 170+ C27D 1E 00                                ld      e,$00
 171+ C27F CD F0 ED                             call    l2_draw_circle_fill; ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
 172+ C282 01 80 40                             ld      bc, $4080
 173+ C285 3A 68 80                             ld      a,(HyperCircle)
 174+ C288 3C                                   inc     a
 175+ C289 57                                   ld      d,a
 176+ C28A 1E FF                                ld      e,$FF
 177+ C28C CD C6 EB                             call    l2_draw_circle
 178+ C28F 3A 68 80                             ld      a,(HyperCircle)
 179+ C292 3C                                   inc     a
 180+ C293 3C                                   inc     a
 181+ C294 FE 40                                cp      64
 182+ C296 D0                                   ret     nc
 183+ C297 32 68 80                             ld      (HyperCircle),a
 184+ C29A                                      SetCarryFlag
 184+ C29A 37          >                        scf
 185+ C29B C9                                   ret
 186+ C29C
 187+ C29C
 188+ C29C              draw_hyperspace:        MMUSelectLayer1
 188+ C29C ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 189+ C2A0 CD 8F E0                             call    l1_cls
 190+ C2A3 CD A9 E0                             call    l1_attr_cls
 191+ C2A6                                      MMUSelectLayer2
 191+ C2A6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 192+ C2AA CD 04 E0                             call     asm_l2_double_buffer_on
 193+ C2AD                                      MMUSelectSpriteBank
 193+ C2AD ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 194+ C2B1 CD 6E E5                             call    sprite_cls_cursors
 195+ C2B4                                      MMUSelectConsoleBank
 195+ C2B4 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 196+ C2B8 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
 197+ C2BB 11 00 E0                             ld          de,ConsoleImageData
 198+ C2BE 01 00 08                             ld          bc, ScreenL1BottomLen
 199+ C2C1 CD 5E 7D                             call        memcopy_dma
 200+ C2C4 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 201+ C2C7 11 00 E8                             ld          de,ConsoleAttributes
 202+ C2CA 01 00 01                             ld          bc, ScreenL1AttrBtmLen
 203+ C2CD CD 5E 7D                             call        memcopy_dma
 204+ C2D0 CD EB 7A                             call        InitialiseHyperStars
 205+ C2D3 AF                                   xor         a
 206+ C2D4 32 5E 80                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
 207+ C2D7 3E 02                                ld          a,2
 208+ C2D9 32 68 80                             ld          (HyperCircle),a
 209+ C2DC 3E FC                                ld          a,$FC
 210+ C2DE 32 5E 80                             ld          (DockedFlag),a
 211+ C2E1 C9                                   ret
 212+ C2E2
 213+ C2E2              ;----------------------------------------------------------------------------------------------------------------------------------
 214+ C2E2              front_warp:             ;call        SaveCurrentDust                         ; save current dust positions
 215+ C2E2 06 AF                                ld          b,175                                    ; loop for x iterations
 216+ C2E4 C5           .warploop:              push        bc
 217+ C2E5 CD 43 7B                             call        DustForward
 218+ C2E8                                      MMUSelectLayer2
 218+ C2E8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 219+ C2EC CD 97 E2                             call        l2_flip_buffers
 220+ C2EF C1                                   pop         bc
 221+ C2F0 10 F2                                djnz        .warploop
 222+ C2F2 C9                                   ret
 223+ C2F3
 224+ C2F3              ;----------------------------------------------------------------------------------------------------------------------------------
 225+ C2F3 C9           loop_hyperspace         ret
 226+ C2F4              ;----------------------------------------------------------------------------------------------------------------------------------
 227+ C2F4              dampenRate:             equ     $04
 228+ C2F4 04           dampenRcounter:         DB      dampenRate
 229+ C2F5 04           dampenPcounter:         DB      dampenRate
 230+ C2F6              ;----------------------------------------------------------------------------------------------------------------------------------
 231+ C2F6              input_front_view:       ;DEFUNCT ClearEngineSoundChanged
 232+ C2F6 2A 59 E0                             ld      hl,(addr_Pressed_Accellerate)
 233+ C2F9 7E                                   ld      a,(hl)
 234+ C2FA                                      JumpIfAIsZero     .TestDecellerate
 234+ C2FA A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 234+ C2FB CA 17 C3    >                        jp	    z, .TestDecellerate
 235+ C2FE 3A 95 7E                             ld      a,(SHIPMAXSPEED)
 236+ C301 57                                   ld      d,a
 237+ C302 3A 96 7E                             ld      a,(DELTA)
 238+ C305                                      JumpIfAGTENusng d,.TestDecellerate
 238+ C305 BA          >                        cp     d
 238+ C306 D2 17 C3    >                        jp		nc,.TestDecellerate
 239+ C309 3C                                   inc     a
 240+ C30A 32 96 7E                             ld      (DELTA),a
 241+ C30D 2A 97 7E                             ld      hl,(DELT4Lo)
 242+ C310 ED 34 04 00                          add     hl,4
 243+ C314 22 97 7E                             ld      (DELT4Lo),hl
 244+ C317                                      ;DEFUNCT SetEngineSoundChanged
 245+ C317 2A 5B E0     .TestDecellerate:       ld      hl,(addr_Pressed_Decellerate)
 246+ C31A 7E                                   ld      a,(hl)
 247+ C31B                                      JumpIfAIsZero   .TestLeftPressed
 247+ C31B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 247+ C31C CA 34 C3    >                        jp	    z, .TestLeftPressed
 248+ C31F 3A 96 7E                             ld      a,(DELTA)
 249+ C322                                      JumpIfAIsZero   .TestLeftPressed
 249+ C322 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 249+ C323 CA 34 C3    >                        jp	    z, .TestLeftPressed
 250+ C326 3D                                   dec     a
 251+ C327 32 96 7E                             ld      (DELTA),a
 252+ C32A 2A 97 7E                             ld      hl,(DELT4Lo)
 253+ C32D 2B                                   dec     hl
 254+ C32E 2B                                   dec     hl
 255+ C32F 2B                                   dec     hl
 256+ C330 2B                                   dec     hl
 257+ C331 22 97 7E                             ld      (DELT4Lo),hl
 258+ C334                                      ;DEFUNCT SetEngineSoundChanged
 259+ C334 2A 51 E0     .TestLeftPressed:       ld      hl,(addr_Pressed_RollLeft)
 260+ C337 7E                                   ld      a,(hl)
 261+ C338                                      JumpIfAIsZero   .TestRightPressed
 261+ C338 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 261+ C339 CA 4F C3    >                        jp	    z, .TestRightPressed
 262+ C33C 3A B3 7D                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 263+ C33F 21 BA 7D                             ld      hl,ALP1MAXL                         ; currnet ship max left roll
 264+ C342 BE                                   cp      (hl)
 265+ C343 28 0A                                jr      z,.TestRightPressed
 266+ C345                                      ;break
 267+ C345 3D                                   dec     a                                   ; increase joystick roll
 268+ C346 32 B3 7D                             ld      (JSTX),a
 269+ C349 CD 10 C0                             call    draw_front_calc_alpha
 270+ C34C C3 84 C3                             jp      .TestDivePressed                    ; when pressing ignore damper
 271+ C34F 2A 53 E0     .TestRightPressed:       ld      hl,(addr_Pressed_RollRight)
 272+ C352 7E                                   ld      a,(hl)
 273+ C353                                      JumpIfAIsZero   .DampenRoll
 273+ C353 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 273+ C354 CA 6A C3    >                        jp	    z, .DampenRoll
 274+ C357 3A B3 7D                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 275+ C35A 21 B9 7D                             ld      hl,ALP1MAXR                         ; currnet ship max left roll
 276+ C35D BE                                   cp      (hl)
 277+ C35E 28 24                                jr      z,.TestDivePressed                   ; if its held then we don't dampen
 278+ C360                                      ;break
 279+ C360 3C                                   inc     a                                   ; increase joystick roll
 280+ C361 32 B3 7D     .UpdateAlphRoll:        ld      (JSTX),a
 281+ C364 CD 10 C0                             call    draw_front_calc_alpha
 282+ C367 C3 84 C3                             jp      .TestDivePressed                    ; when pressing ignore damper
 283+ C36A 21 F4 C2     .DampenRoll:            ld      hl,dampenRcounter
 284+ C36D 35                                   dec     (hl)
 285+ C36E 20 14                                jr      nz,.TestDivePressed
 286+ C370 3E 04                                ld      a,dampenRate
 287+ C372 77                                   ld      (hl),a
 288+ C373 3A B3 7D                             ld      a,(JSTX)
 289+ C376 FE 00                                cp      0
 290+ C378 28 0A                                jr      z, .TestDivePressed
 291+ C37A CB 7F                                bit     7,a
 292+ C37C 28 03                                jr      z,.PosRollDampen
 293+ C37E 3C           .NegRollDampen:         inc     a
 294+ C37F 18 01                                jr      .ApplyRollDampen
 295+ C381 3D           .PosRollDampen:         dec     a
 296+ C382 18 DD        .ApplyRollDampen:       jr      .UpdateAlphRoll
 297+ C384              ; Dive and Climb input
 298+ C384 2A 55 E0     .TestDivePressed:       ld      hl,(addr_Pressed_Dive)
 299+ C387 7E                                   ld      a,(hl)
 300+ C388                                      JumpIfAIsZero   .TestClimbPressed
 300+ C388 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 300+ C389 CA 9F C3    >                        jp	    z, .TestClimbPressed
 301+ C38C 3A A9 7D                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 302+ C38F 21 AE 7D                             ld      hl,BET1MAXD                         ; currnet ship max left roll
 303+ C392 BE                                   cp      (hl)
 304+ C393 28 0A                                jr      z,.TestClimbPressed
 305+ C395                                      ;break
 306+ C395 3D                                   dec     a                                   ; increase joystick roll
 307+ C396 32 A9 7D                             ld      (JSTY),a
 308+ C399 CD 3D C0                             call    draw_front_calc_beta
 309+ C39C C3 D4 C3                             jp      .ForwardCursorKeysDone
 310+ C39F 2A 57 E0     .TestClimbPressed:      ld      hl,(addr_Pressed_Climb)
 311+ C3A2 7E                                   ld      a,(hl)
 312+ C3A3                                      JumpIfAIsZero   .DampenPitch
 312+ C3A3 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 312+ C3A4 CA BA C3    >                        jp	    z, .DampenPitch
 313+ C3A7 3A A9 7D                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 314+ C3AA 21 AD 7D                             ld      hl,BET1MAXC                         ; currnet ship max left roll
 315+ C3AD BE                                   cp      (hl)
 316+ C3AE 28 24                                jr      z,.ForwardCursorKeysDone
 317+ C3B0 3C                                   inc     a                                   ; increase joystick roll
 318+ C3B1 32 A9 7D     .UpdateBetaPitch:       ld      (JSTY),a
 319+ C3B4 CD 3D C0                             call    draw_front_calc_beta
 320+ C3B7 C3 D4 C3                             jp      .ForwardCursorKeysDone
 321+ C3BA 21 F5 C2     .DampenPitch:           ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
 322+ C3BD 35                                   dec     (hl)
 323+ C3BE 20 14                                jr      nz,.ForwardCursorKeysDone
 324+ C3C0 3E 04                                ld      a,dampenRate
 325+ C3C2 77                                   ld      (hl),a
 326+ C3C3 3A A9 7D                             ld      a,(JSTY)
 327+ C3C6 FE 00                                cp      0
 328+ C3C8 28 0A                                jr      z,.ForwardCursorKeysDone
 329+ C3CA CB 7F                                bit     7,a
 330+ C3CC 28 03                                jr      z,.PosPitchDampen
 331+ C3CE 3C           .NegPitchDampen:        inc     a
 332+ C3CF 18 01                                jr      .ApplyPitchDampen
 333+ C3D1 3D           .PosPitchDampen:        dec     a
 334+ C3D2 18 DD        .ApplyPitchDampen:      jr      .UpdateBetaPitch
 335+ C3D4              ; Now test hyperpsace. We can't be docked as this is a view routine piece of logic but for say local charts we may
 336+ C3D4              ; be in flight and they have to force a forward view when hyperspace is pressed
 337+ C3D4              ; We won't do galatic here, but for other views force to forward view
 338+ C3D4              .ForwardCursorKeysDone: MacroIsKeyPressed c_Pressed_Hyperspace              ; Check for hyperspace
 338+ C3D4 3E 24       >                        ld      a,c_Pressed_Hyperspace
 338+ C3D6             >                        MMUSelectKeyboard
 338+ C3D6 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 338+ C3DA CD A2 E1    >                        call    is_key_pressed
 339+ C3DD 20 48                                jr      nz,.NotHyperspace
 340+ C3DF              ; If we are in hyperspace countdown then test for hyperspace
 341+ C3DF 2A 64 80                             ld      hl,(InnerHyperCount)                ; if hyperspace was enaged then cancel
 342+ C3E2 7C                                   ld      a,h                                 ; hyperspace
 343+ C3E3 B5                                   or      l                                   ; .
 344+ C3E4 20 41                                jr      nz,.CancelHyperspace                ; .
 345+ C3E6              ; check selected target if we find one then after gettting galaxy at bc a=0 if not found
 346+ C3E6 ED 5B 3E 7F                          ld      de,(PresentSystemX)
 347+ C3EA 2A 40 7F                             ld      hl,(TargetSystemX)
 348+ C3ED CD 42 98                             call    compare16HLDE
 349+ C3F0 28 35                                jr      z,.NoTargetSelected                 ; can't jump to current system
 350+ C3F2 3A 2B 7F                             ld      a,(Galaxy)
 351+ C3F5                                      MMUSelectGalaxyA
 351+ C3F5 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 352+ C3F8 ED 4B 40 7F                          ld      bc,(TargetSystemX)
 353+ C3FC CD BB FA                             call    galaxy_name_at_bc
 354+ C3FF FE 00                                cp      0
 355+ C401 28 24                                jr      z,.NotHyperspace
 356+ C403              ; check fuel is sufficient
 357+ C403 ED 4B 3E 7F                          ld      bc,(PresentSystemX)
 358+ C407 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 359+ C40B ED 4B 40 7F                          ld      bc,(TargetSystemX)
 360+ C40F ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 361+ C413 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 362+ C416 7C                                   ld      a,h
 363+ C417 A7                                   and     a
 364+ C418 20 0D                                jr      nz,.InsufficientFuel            ; max jump capacity is 25 ly for any ship
 365+ C41A 3A 00 84                             ld      a,(Fuel)
 366+ C41D                                      JumpIfALTNusng    l, .InsufficientFuel
 366+ C41D BD          >                        cp      l
 366+ C41E DA 27 C4    >                        jp		c, .InsufficientFuel
 367+ C421              ; set up timer countdown
 368+ C421 21 0B 0B                             ld      hl,HyperSpaceTimers                 ; set both timers to 15
 369+ C424 22 64 80                             ld      (InnerHyperCount),hl                ; .
 370+ C427              .CancelHyperspace
 371+ C427              .NoTargetSelected
 372+ C427              .InsufficientFuel
 373+ C427              .NotHyperspace:
 374+ C427              ;--- Check for in system Jump---------------------------------------
 375+ C427 2A 64 80     .CheckForWarpPressd:    ld      hl,(InnerHyperCount)                ; if hyperspace was enaged then cancel
 376+ C42A 7C                                   ld      a,h                                 ; hyperspace
 377+ C42B B5                                   or      l                                   ; .
 378+ C42C 20 0F                                jr      nz,.WarpNotPressed
 379+ C42E 3E 54                                ld      a,c_Pressed_Warp
 380+ C430                                      MMUSelectKeyboard
 380+ C430 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 381+ C434 CD 95 E1                             call    is_key_up_state
 382+ C437 28 04                                jr      z, .WarpNotPressed
 383+ C439                                      SetMemTrue  WarpPressed                     ; This signals the event , teh main loop will cancel this as an acknowlege
 383+ C439 AF          >                        xor     a
 383+ C43A 32 8D 80    >                        ld      (WarpPressed),a
 384+ C43D              .WarpNotPressed:
 385+ C43D                              IFDEF   LASER_V2
 386+ C43D CD 5B 82                             call    IsLaserUseable                      ; no laser or destroyed?
 387+ C440 28 3A                                jr      z,          .FireNotPressed
 388+ C442 3E 14        .IsFirePressed:         ld      a,c_Pressed_FireLaser               ; else (beam type) if fire is pressed
 389+ C444                                      MMUSelectKeyboard
 389+ C444 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 390+ C448 CD 95 E1                             call    is_key_up_state
 391+ C44B 28 2F                                jr      z,.FireNotPressed
 392+ C44D              .FirePressed:           ;break
 393+ C44D                                      JumpIfMemNotZero    CurrentCooldown,     .LaserDone
 393+ C44D 3A 3D 81    >                        ld  a,(CurrentCooldown)
 393+ C450 A7          >                        and a
 393+ C451 C2 9E C4    >                        jp  nz,.LaserDone
 394+ C454                                      JumpIfMemNotZero    CurrentBurstPause,   .LaserDone
 394+ C454 3A 3C 81    >                        ld  a,(CurrentBurstPause)
 394+ C457 A7          >                        and a
 394+ C458 C2 9E C4    >                        jp  nz,.LaserDone
 395+ C45B                                      JumpIfMemNotZero    CurrLaserBurstCount, .LaserDone
 395+ C45B 3A 3F 81    >                        ld  a,(CurrLaserBurstCount)
 395+ C45E A7          >                        and a
 395+ C45F C2 9E C4    >                        jp  nz,.LaserDone
 396+ C462                                      JumpIfMemTrue       LaserBeamOn,         .LaserDone
 396+ C462 3A 3A 81    >                        ld      a,(LaserBeamOn)
 396+ C465 A7          >                        and     a
 396+ C466 CA 9E C4    >                        jp      z, .LaserDone
 397+ C469                                      ldCopyByte          CurrLaserPulseRate,   CurrLaserBurstCount
 397+ C469 3A 36 81    >                        ld       a,(CurrLaserPulseRate)
 397+ C46C 32 3F 81    >                        ld       (CurrLaserBurstCount),a
 398+ C46F                                      ldCopyByte          CurrLaserPulseOnTime, CurrLaserDuration
 398+ C46F 3A 37 81    >                        ld       a,(CurrLaserPulseOnTime)
 398+ C472 32 3B 81    >                        ld       (CurrLaserDuration),a
 399+ C475                                      SetMemTrue          LaserBeamOn
 399+ C475 AF          >                        xor     a
 399+ C476 32 3A 81    >                        ld      (LaserBeamOn),a
 400+ C479                                      ;call               TriggerLaserSound
 401+ C479 C3 9E C4                             jp                  .LaserDone
 402+ C47C              .FireNotPressed:        ReturnIfMemNotZero  CurrLaserBurstCount
 402+ C47C 3A 3F 81    >                        ld     a,(CurrLaserBurstCount)
 402+ C47F A7          >                        and     a
 402+ C480 C0          >                        ret    nz
 403+ C481                                      ReturnIfMemNotZero  CurrLaserDuration
 403+ C481 3A 3B 81    >                        ld     a,(CurrLaserDuration)
 403+ C484 A7          >                        and     a
 403+ C485 C0          >                        ret    nz
 404+ C486                                      ReturnIfMemFalse    LaserBeamOn
 404+ C486 3A 3A 81    >                        ld      a,(LaserBeamOn)
 404+ C489 A7          >                        and     a
 404+ C48A C0          >                        ret     nz
 405+ C48B                                      ldCopyByte          CurrLaserPulseRest, CurrentCooldown
 405+ C48B 3A 39 81    >                        ld       a,(CurrLaserPulseRest)
 405+ C48E 32 3D 81    >                        ld       (CurrentCooldown),a
 406+ C491                                      SetMemFalse         LaserBeamOn
 406+ C491 3E FF       >                        ld      a,$FF
 406+ C493 32 3A 81    >                        ld      (LaserBeamOn),a
 407+ C496                                      SetMemZero          CurrLaserBurstCount
 407+ C496 AF          >                        xor     a
 407+ C497 32 3F 81    >                        ld      (CurrLaserBurstCount),a
 408+ C49A                                      SetMemZero          CurrentBurstPause
 408+ C49A AF          >                        xor     a
 408+ C49B 32 3C 81    >                        ld      (CurrentBurstPause),a
 409+ C49E              .LaserDone:
 410+ C49E                              ELSE
 411+ C49E ~            .CheckForLaserPressed:  call    IsLaserUseable                      ; no laser or destroyed?
 412+ C49E ~                                    jr      z,.CheckTargetting
 413+ C49E ~            .CanLaserStillFire:     SetMemFalse FireLaserPressed                ; default to no laser
 414+ C49E ~                                    ld      a,(CurrLaserPulseRate)              ; if not beam type
 415+ C49E ~                                    JumpIfAIsZero .BeamType                     ; .
 416+ C49E ~                                    ld      b,a                                 ; and not run out of pulses
 417+ C49E ~                                    ld      a,(CurrLaserPulseRateCount)         ;
 418+ C49E ~                                    ld      a,(CurrLaserPulseOnCount)           ;    if not already on
 419+ C49E ~                                    JumpIfAEqNusng  b, .PulseLimitReached       ;
 420+ C49E ~                                    ld      hl,CurrLaserPulseOffCount           ;       and not in off phase
 421+ C49E ~                                    or      (hl)                                ;
 422+ C49E ~                                    inc     hl  ; CurrLaserPulseRestCount       ;       and not in rest phase.
 423+ C49E ~                                    or      (hl)                                ;    .
 424+ C49E ~                                    jr      nz, .CheckTargetting                ;    .
 425+ C49E ~            .IsFirePressed:         ld      a,c_Pressed_FireLaser               ;       if fire is pressed
 426+ C49E ~                                    MMUSelectKeyboard
 427+ C49E ~                                    call    is_key_up_state                     ;       .
 428+ C49E ~                                    jr      z,.CheckTargetting                  ;       .
 429+ C49E ~            .CanProcesFire:         ld      a,(CurrLaserPulseRateCount)         ;            pulse rate count ++
 430+ C49E ~                                    inc     a                                   ;            .
 431+ C49E ~            .StillHavePulsesLeft:   ld      (CurrLaserPulseRateCount),a         ;            .
 432+ C49E ~                                    ldCopyByte CurrLaserPulseOnTime, CurrLaserPulseOnCount  ; pulse on count = pulse on time
 433+ C49E ~                                 ;   ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount; pulse off count = pulse off time
 434+ C49E ~                                 ;   ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount  ; pulse rest count = pulse rest time
 435+ C49E ~                                    jp      .CheckTargetting
 436+ C49E ~            .BeamType:              ld      a,c_Pressed_FireLaser               ; else (beam type) if fire is pressed
 437+ C49E ~                                    MMUSelectKeyboard
 438+ C49E ~                                    call    is_key_up_state                     ;                   .
 439+ C49E ~                                    jr      z,.CheckTargetting                  ;                   .
 440+ C49E ~                                    SetMemTrue FireLaserPressed                 ;                   set pulse on to 1
 441+ C49E ~                                    ld      a,0
 442+ C49E ~                                    ld      (SoundFxToEnqueue),a
 443+ C49E ~                                    jp      .CheckTargetting
 444+ C49E ~            .PulseLimitReached:     ;ZeroA                                       ;
 445+ C49E ~                                    ;ld      (CurrLaserPulseRateCount),a         ;
 446+ C49E ~                                    ;ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount   ; start the rest phase
 447+ C49E                              ENDIF
 448+ C49E              ; . Here we check to see if the target lock has been pressed
 449+ C49E              .CheckTargetting:       MMUSelectKeyboard
 449+ C49E ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 450+ C4A2 CD 2C E3                             call    TargetMissileTest
 451+ C4A5              .CheckForMissile:       MacroIsKeyPressed c_Pressed_FireMissile             ; launch pressed?
 451+ C4A5 3E 18       >                        ld      a,c_Pressed_FireMissile
 451+ C4A7             >                        MMUSelectKeyboard
 451+ C4A7 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 451+ C4AB CD A2 E1    >                        call    is_key_pressed
 452+ C4AE 20 13                                jr      nz,.NotMissileLaunch
 453+ C4B0                                      AnyMissilesLeft
 453+ C4B0 3A 4B 7F    >                        ld      a,(NbrMissiles)
 453+ C4B3 A7          >                        and     a
 454+ C4B4 28 0D                                jr      z,.NotMissileLaunch                 ; no missiles in rack
 455+ C4B6 CD 00 83                             call    IsMissileLockedOn
 456+ C4B9 28 08                                jr      z,.MissileNotLocked
 457+ C4BB              .MissileLaunch:         SetMissileLaunch
 457+ C4BB 3A 22 81    >                        ld      a,(MissileTargettingFlag)
 457+ C4BE E6 0F       >                        and     $0F
 457+ C4C0 32 22 81    >                        ld      (MissileTargettingFlag),a
 458+ C4C3              .MissileNotLocked:                       ; later on we need a "bing bong" nose for trying to launch an unlocked missile
 459+ C4C3              .NotMissileLaunch:
 460+ C4C3 3A 1E 84     .CheckForECM:           ld      a,(ECMPresent)
 461+ C4C6                                      JumpIfAEqNusng EquipmentItemNotFitted,.NoECM
 461+ C4C6 FE 00       >                        cp     EquipmentItemNotFitted
 461+ C4C8 CA EF C4    >                        jp      z,.NoECM
 462+ C4CB 3A 4C 7F     .CheckECMActive:        ld      a,(PlayerECMActiveCount)
 463+ C4CE                                      JumpIfAIsNotZero .NoECM
 463+ C4CE A7          >                        and     a
 463+ C4CF C2 EF C4    >                        jp	    nz,.NoECM
 464+ C4D2              .CheckForKeyPress:      MacroIsKeyPressed c_Pressed_ECM
 464+ C4D2 3E 1C       >                        ld      a,c_Pressed_ECM
 464+ C4D4             >                        MMUSelectKeyboard
 464+ C4D4 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 464+ C4D8 CD A2 E1    >                        call    is_key_pressed
 465+ C4DB 20 12                                jr      nz, .NoECM
 466+ C4DD              .FireECM:               SetMemToN      PlayerECMActiveCount, ECMCounterMax
 466+ C4DD 3E 80       >                        ld      a,ECMCounterMax
 466+ C4DF 32 4C 7F    >                        ld      (PlayerECMActiveCount),a
 467+ C4E2 3A B1 7D                             ld      a,(ECMCountDown)
 468+ C4E5                                      JumpIfAGTENusng ECMCounterMax, .NoECM
 468+ C4E5 FE 80       >                        cp     ECMCounterMax
 468+ C4E7 D2 EF C4    >                        jp		nc,.NoECM
 469+ C4EA                                      SetMemToN      ECMCountDown, ECMCounterMax
 469+ C4EA 3E 80       >                        ld      a,ECMCounterMax
 469+ C4EC 32 B1 7D    >                        ld      (ECMCountDown),a
 470+ C4EF C9           .NoECM:                 ret
 471+ C4F0
 472+ C4F0
 473+ C4F0
 474+ C4F0
 475+ C4F0
 476+ C4F0
 477+ C4F0
# file closed: ./Views/Front_View.asm
1430  C4F0                                  DISPLAY "Bank ",BankFrontView," - Bytes free ",/D, $2000 - ($-ViewFrontAddr), " - BankFrontView"
1431  C4F0                                  ASSERT $-ViewFrontAddr <8912 , Bank code leaks over 8K boundary
1432  C4F0              ; Bank 63  ------------------------------------------------------------------------------------------------------------------------
1433  C4F0                                  SLOT    MenuStatusAddr
1434  C4F0                                  PAGE    BankMenuStatus
1435  C4F0                                  ORG     MenuStatusAddr
1436  C000                                  INCLUDE "./Menus/status_menu.asm"
# file opened: ./Menus/status_menu.asm
   1+ C000 53 74 61 74  status_page_marker  DB "Status      PG63"
   1+ C004 75 73 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 36 33
   2+ C010
   3+ C010 43 4F 4D 4D  txt_stat_commander 			DB "COMMANDER",0
   3+ C014 41 4E 44 45
   3+ C018 52 00
   4+ C01A 49 4E 56 45  txt_stat_inventory 			DB "INVENTORY",0
   4+ C01E 4E 54 4F 52
   4+ C022 59 00
   5+ C024 50 72 65 73  txt_stat_present_system		DB "Present System   :",0
   5+ C028 65 6E 74 20
   5+ C02C 53 79 73 74
   5+ C030 65 6D 20 20
   5+ C034 20 3A 00
   6+ C037 48 79 70 65  txt_stat_hyperspace_system	DB "Hyperspace System:",0
   6+ C03B 72 73 70 61
   6+ C03F 63 65 20 53
   6+ C043 79 73 74 65
   6+ C047 6D 3A 00
   7+ C04A 43 6F 6E 64  txt_stat_condition			DB "Condition   :",0
   7+ C04E 69 74 69 6F
   7+ C052 6E 20 20 20
   7+ C056 3A 00
   8+ C058 46 75 65 6C  txt_stat_fuel				DB "Fuel        :",0
   8+ C05C 20 20 20 20
   8+ C060 20 20 20 20
   8+ C064 3A 00
   9+ C066 43 61 73 68  txt_stat_cash				DB "Cash        :",0
   9+ C06A 20 20 20 20
   9+ C06E 20 20 20 20
   9+ C072 3A 00
  10+ C074 4C 65 67 61  txt_stat_legal_status		DB "Legal Status:",0
  10+ C078 6C 20 53 74
  10+ C07C 61 74 75 73
  10+ C080 3A 00
  11+ C082 52 61 74 69  txt_stat_rating				DB "Rating      :",0
  11+ C086 6E 67 20 20
  11+ C08A 20 20 20 20
  11+ C08E 3A 00
  12+ C090 45 51 55 49  txt_stat_equipment			DB "EQUIPMENT:",0
  12+ C094 50 4D 45 4E
  12+ C098 54 3A 00
  13+ C09B
  14+ C09B 30 30 2E 30  txt_stat_fuel_level			DB "00.0 Light Years",0
  14+ C09F 20 4C 69 67
  14+ C0A3 68 74 20 59
  14+ C0A7 65 61 72 73
  14+ C0AB 00
  15+ C0AC 58 58 58 58  txt_stat_cash_amount		DB "XXXXXXXXXX",0
  15+ C0B0 58 58 58 58
  15+ C0B4 58 58 00
  16+ C0B7 2E           txt_stat_cash_decimal       DB "."
  17+ C0B8 58 20 43 72  txt_stat_cash_fraction      DB "X Cr",0
  17+ C0BC 00
  18+ C0BD
  19+ C0BD 40 02 10 C0  status_boiler_text		DW $0240,txt_stat_commander
  20+ C0C1 90 02 23 81  						DW $0290,CommanderName
  21+ C0C5 08 0B 24 C0  						DW $0B08,txt_stat_present_system
  22+ C0C9 08 13 37 C0  						DW $1308,txt_stat_hyperspace_system
  23+ C0CD 08 1B 4A C0  						DW $1B08,txt_stat_condition
  24+ C0D1 08 23 58 C0  						DW $2308,txt_stat_fuel
  25+ C0D5 08 2B 66 C0  						DW $2B08,txt_stat_cash
  26+ C0D9 08 33 74 C0  						DW $3308,txt_stat_legal_status
  27+ C0DD 08 3B 82 C0  						DW $3B08,txt_stat_rating
  28+ C0E1 08 4B 90 C0  						DW $4B08,txt_stat_equipment
  29+ C0E5
  30+ C0E5 00 00        equipment_cursor		DW  $0000
  31+ C0E7              present_position		equ	$0B98
  32+ C0E7              hyperspace_position		equ	$1398
  33+ C0E7              condition_position		equ	$1B70
  34+ C0E7              fuel_position			equ	$2370
  35+ C0E7              cash_position			equ	$2B70
  36+ C0E7              legal_status_position	equ $3370
  37+ C0E7              rank_position			equ $3B70
  38+ C0E7              equipment_position		equ $5340
  39+ C0E7              equipment_position2		equ $5378
  40+ C0E7              equipmax_row			equ $FF
  41+ C0E7
  42+ C0E7 00           STAT_selected_row       DB 0
  43+ C0E8 00           STAT_current_topItem    DB 0
  44+ C0E9 00           STAT_current_end        DB 0
  45+ C0EA              STAT_buffer_rows         EQU     128
  46+ C0EA              STAT_buffer_row_len      EQU     24
  47+ C0EA              STAT_eqip_window_len    EQU 10
  48+ C0EA              STAT_display_buff_len   EQU     STAT_buffer_rows *   STAT_buffer_row_len
  49+ C0EA 00 00 00...  STAT_display_buffer:    DS      STAT_display_buff_len                     ; maxium of 128 items can be coded for
  50+ CCEA              STAT_position			equ $5840
  51+ CCEA 00 00 00...  STAT_cash_amount    	DS 10
  52+ CCF4 20 43 72 00  STAT_cash_UoM           DB " Cr",0
  53+ CCF8
  54+ CCF8 00 00 00...  stat_present_name       DS  30
  55+ CD16 00                                   DB  0
  56+ CD17 00 00 00...  stat_target_name        DS  30
  57+ CD35 00                                   DB  0
  58+ CD36
  59+ CD36 21 7F E8     stat_copy_to_name:      ld      hl,GalaxyExpandedName
  60+ CD39 01 1E 00                             ld      bc,30
  61+ CD3C ED B0                                ldir
  62+ CD3E C9                                   ret
  63+ CD3F
  64+ CD3F              ;----------------------------------------------------------------------------------------------------------------------------------
  65+ CD3F              STAT_print_boiler_text: INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++CD3F
   2++CD3F              ;">print_boilder_text hl = text structure, b = message count"
   3++CD3F C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++CD40 4E                                   ld			c,(hl)		; Get Row into b
   5++CD41 23                                   inc			hl
   6++CD42 46                                   ld			b,(hl)		; Get Col into b
   7++CD43 23                                   inc			hl
   8++CD44 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++CD45 23                                   inc			hl
  10++CD46 56                                   ld			d,(hl)		; Get text address Hi into E
  11++CD47 23                                   inc			hl
  12++CD48 E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++CD49 EB                                   ex			de,hl		; now hl = address of text data
  14++CD4A 1E FF                                ld			e,txt_status_colour
  15++CD4C C5                                   push		bc
  16++CD4D D1                                   pop			de
  17++CD4E                                      MMUSelectLayer1
  17++CD4E ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++CD52 CD D7 E0                             call		l1_print_at
  19++CD55 E1                                   pop			hl
  20++CD56 C1                                   pop			bc
  21++CD57 10 E6                                djnz		.BoilerTextLoop
  22++CD59 C9                                   ret
  23++CD5A
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  66+ CD5A              ;----------------------------------------------------------------------------------------------------------------------------------
  67+ CD5A DD 22 FE CD  STAT_DispDEIXtoIY:      ld (.STATclcn32z),ix
  68+ CD5E ED 53 00 CE                          ld (.STATclcn32zIX),de
  69+ CD62 DD 21 FA CD                          ld ix,.STATclcn32t+36
  70+ CD66 06 09                                ld b,9
  71+ CD68 0E 00                                ld c,0
  72+ CD6A 3E 30        .STATclcn321:           ld a,'0'
  73+ CD6C B7                                   or a
  74+ CD6D DD 5E 00     .STATclcn322:           ld e,(ix+0)
  75+ CD70 DD 56 01                             ld d,(ix+1)
  76+ CD73 2A FE CD                             ld hl,(.STATclcn32z)
  77+ CD76 ED 52                                sbc hl,de
  78+ CD78 22 FE CD                             ld (.STATclcn32z),hl
  79+ CD7B DD 5E 02                             ld e,(ix+2)
  80+ CD7E DD 56 03                             ld d,(ix+3)
  81+ CD81 2A 00 CE                             ld hl,(.STATclcn32zIX)
  82+ CD84 ED 52                                sbc hl,de
  83+ CD86 22 00 CE                             ld (.STATclcn32zIX),hl
  84+ CD89 38 04                                jr c,.STATclcn325
  85+ CD8B 0C                                   inc c
  86+ CD8C 3C                                   inc a
  87+ CD8D 18 DE                                jr .STATclcn322
  88+ CD8F DD 5E 00     .STATclcn325:           ld e,(ix+0)
  89+ CD92 DD 56 01                             ld d,(ix+1)
  90+ CD95 2A FE CD                             ld hl,(.STATclcn32z)
  91+ CD98 19                                   add hl,de
  92+ CD99 22 FE CD                             ld (.STATclcn32z),hl
  93+ CD9C DD 5E 02                             ld e,(ix+2)
  94+ CD9F DD 56 03                             ld d,(ix+3)
  95+ CDA2 2A 00 CE                             ld hl,(.STATclcn32zIX)
  96+ CDA5 ED 5A                                adc hl,de
  97+ CDA7 22 00 CE                             ld (.STATclcn32zIX),hl
  98+ CDAA 11 FC FF                             ld de,-4
  99+ CDAD DD 19                                add ix,de
 100+ CDAF 0C                                   inc c
 101+ CDB0 0D                                   dec c
 102+ CDB1 28 05                                jr z,.STATclcn323
 103+ CDB3 FD 77 00                             ld (iy+0),a
 104+ CDB6 FD 23                                inc iy
 105+ CDB8 10 B0        .STATclcn323:           djnz .STATclcn321
 106+ CDBA 3A FE CD                             ld a,(.STATclcn32z)
 107+ CDBD C6 30                                add A,'0'
 108+ CDBF FD 77 00                             ld (iy+0),a
 109+ CDC2 FD 36 02 00                          ld (iy+2),0
 110+ CDC6 FD 7E 00                             ld      a,(IY+0)
 111+ CDC9 FD 77 01                             ld      (IY+1),a
 112+ CDCC 3E 2E                                ld      a,"."
 113+ CDCE FD 77 00                             ld      (IY+0),a
 114+ CDD1 FD 23                                inc     IY
 115+ CDD3 FD 23                                inc     IY
 116+ CDD5 C9                                   ret
 117+ CDD6 01 00 00 00  .STATclcn32t            dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 117+ CDDA 0A 00 00 00
 117+ CDDE 64 00 00 00
 117+ CDE2 E8 03 00 00
 117+ CDE6 10 27 00 00
 118+ CDEA A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 118+ CDEE 40 42 0F 00
 118+ CDF2 80 96 98 00
 118+ CDF6 00 E1 F5 05
 118+ CDFA 00 CA 9A 3B
 119+ CDFE 00 00        .STATclcn32z            ds 2
 120+ CE00 00 00        .STATclcn32zIX          ds 2
 121+ CE02              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ CE02 2A FE 83     STAT_GetCash:           ld		hl,(Cash+2)
 123+ CE05 EB                                   ex      de,hl
 124+ CE06 DD 2A FC 83                          ld      ix,(Cash)
 125+ CE0A FD 21 EA CC                          ld		iy,STAT_cash_amount
 126+ CE0E CD 5A CD                             call 	STAT_DispDEIXtoIY
 127+ CE11 FD E5                                push    iy
 128+ CE13 D1                                   pop     de
 129+ CE14 21 F4 CC                             ld      hl,STAT_cash_UoM
 130+ CE17 01 04 00                             ld      bc,4
 131+ CE1A ED B0                                ldir
 132+ CE1C C9                                   ret
 133+ CE1D              ;----------------------------------------------------------------------------------------------------------------------------------
 134+ CE1D 7E           STAT_expand_word:       ld      a,(hl)
 135+ CE1E FE 00                                cp      0
 136+ CE20 C8                                   ret     z
 137+ CE21 12                                   ld      (de),a
 138+ CE22 23                                   inc     hl
 139+ CE23 13                                   inc     de
 140+ CE24 18 F7                                jr      STAT_expand_word
 141+ CE26
 142+ CE26              ; hl = list of words
 143+ CE26              ; de = adress to expand to
 144+ CE26 7E           STAT_expand_name:       ld      a,(hl)
 145+ CE27 47                                   ld      b,a
 146+ CE28 23                                   inc     hl
 147+ CE29 7E                                   ld      a,(hl)              ; its a 16 bit
 148+ CE2A 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 149+ CE2B B0                                   or      b
 150+ CE2C 20 01                                jr      nz,.MoreToDo
 151+ CE2E              ;                        ld      (de),a we dont want the null marker now
 152+ CE2E C9                                   ret
 153+ CE2F E5 D5        .MoreToDo:              push    hl,,de
 154+ CE31 7E                                   ld      a,(hl)              ; bodge for now no optimise
 155+ CE32 5F                                   ld      e,a
 156+ CE33 23                                   inc     hl
 157+ CE34 7E                                   ld      a,(hl)
 158+ CE35 57                                   ld      d,a
 159+ CE36 EB                                   ex      hl,de               ; hl is now Word... address
 160+ CE37 D1                                   pop     de                  ; de back to pointer to buffer
 161+ CE38 CD 1D CE     .ProcessWord:           call    STAT_expand_word
 162+ CE3B 3E 20                                ld      a," "               ; speculative space
 163+ CE3D 12                                   ld      (de),a
 164+ CE3E 13                                   inc     de
 165+ CE3F E1                                   pop     hl                  ; get string pointer back
 166+ CE40 23                                   inc     hl
 167+ CE41 23                                   inc     hl                  ; on to next word
 168+ CE42 18 E2                                jr      STAT_expand_name
 169+ CE44
 170+ CE44              STAT_First_Item         EQU     EQ_CARGO_BAY
 171+ CE44 3A 2B 7F     STAT_buffer_list:       ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 172+ CE47                                      MMUSelectGalaxyA
 172+ CE47 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 173+ CE4A 21 EA C0                             ld      hl,STAT_display_buffer                      ; hl - target buffer
 174+ CE4D 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 175+ CE4F 11 00 0C                             ld      de, STAT_display_buff_len
 176+ CE52 CD 38 7D                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 177+ CE55 21 01 C1                             ld      hl,STAT_display_buffer+STAT_buffer_row_len-1
 178+ CE58 11 18 00                             ld      de,STAT_buffer_row_len
 179+ CE5B 06 80                                ld      b,STAT_buffer_rows
 180+ CE5D                                      ZeroA
 180+ CE5D AF          >                        xor a
 181+ CE5E 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 182+ CE5F 19                                   add     hl,de
 183+ CE60 10 FC                                djnz    .EoLLoop
 184+ CE62 DD 21 1D 84                          ld      ix,EquipmentFitted + STAT_First_Item        ; ix = equipment master table, ignore missiles
 185+ CE66 FD 21 EA C0                          ld      iy,STAT_display_buffer                      ; iy = target buffer
 186+ CE6A 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY              ; we do not include Fuel and Missile counts
 187+ CE6C 0E 00                                ld      c,0                                         ; Current Row
 188+ CE6E 1E 02                                ld      e,STAT_First_Item
 189+ CE70 DD 7E 00     .ProcessRow:            ld      a,(ix+0)                                    ; Do we own one?
 190+ CE73                                      JumpIfAIsZero .NotFitted                            ; optimised check for EquipmentItemNotFitted
 190+ CE73 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 190+ CE74 CA 98 CE    >                        jp	    z, .NotFitted
 191+ CE77 D5 FD E5 DD  .OwnItem:               push    de,, iy,, ix,, bc
 191+ CE7B E5 C5
 192+ CE7D 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 193+ CE80 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length, e = current equip row
 194+ CE82 ED 30                                mul
 195+ CE84 19                                   add     hl,de                                       ; hl = dword list of work pointers
 196+ CE85 FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 197+ CE89 CD 26 CE                             call    STAT_expand_name                           ; expand name
 198+ CE8C C1 DD E1 FD                          pop     iy,,ix,,bc
 198+ CE90 E1
 199+ CE91 11 18 00                             ld      de,STAT_buffer_row_len
 200+ CE94 FD 19                                add     iy,de                                       ; now iy = start of next column
 201+ CE96 D1                                   pop     de
 202+ CE97 0C                                   inc     c
 203+ CE98              .NotFitted:
 204+ CE98 DD 23        .DoneFittedCheck:       inc     ix
 205+ CE9A 1C                                   inc     e
 206+ CE9B 10 D3                                djnz    .ProcessRow
 207+ CE9D 79           .DoneProcess:           ld      a,c
 208+ CE9E 32 E9 C0                             ld      (STAT_current_end),a
 209+ CEA1 C9                                   ret
 210+ CEA2
 211+ CEA2 06 0A        draw_STAT_boilertext:   ld		b,10
 212+ CEA4 21 BD C0                             ld		hl,status_boiler_text
 213+ CEA7 CD 3F CD                             call	STAT_print_boiler_text
 214+ CEAA C9                                   ret
 215+ CEAB
 216+ CEAB              GetStatFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++CEAB
   2++CEAB
   3++CEAB 3A 00 84     	ld		a,(Fuel)
   4++CEAE 11 2E AE     	ld		de,txt_fuel_level
   5++CEB1 0E 9C        	ld	c, -100
   6++CEB3 CD BD CE     	call	.Num1
   7++CEB6 0E F6        	ld	c,-10
   8++CEB8 CD BD CE     	call	.Num1
   9++CEBB 0E FF        	ld	c,-1
  10++CEBD              .Num1:
  11++CEBD 06 2F        	ld	b,'0'-1
  12++CEBF              .Num2:
  13++CEBF 04           	inc		b
  14++CEC0 81           	add		a,c
  15++CEC1 38 FC        	jr		c,.Num2
  16++CEC3 91           	sub 	c
  17++CEC4 C5           	push	bc
  18++CEC5 F5           	push	af
  19++CEC6 79           	ld		a,c
  20++CEC7 FE FF        	cp		-1
  21++CEC9 CC D2 CE     	call	z,.InsertDot
  22++CECC 78           	ld		a,b
  23++CECD 12           	ld		(de),a
  24++CECE 13           	inc		de
  25++CECF F1           	pop		af
  26++CED0 C1           	pop		bc
  27++CED1 C9           	ret
  28++CED2              .InsertDot:
  29++CED2 3E 2E        	ld		a,'.'
  30++CED4 12           	ld		(de),a
  31++CED5 13           	inc		de
  32++CED6 C9           	ret
  33++CED7
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 217+ CED7
 218+ CED7              ;----------------------------------------------------------------------------------------------------------------------------------
 219+ CED7 01 01 01     draw_STAT_maintext:    	ld		bc,$0101
 220+ CEDA 11 FD BE                             ld		de,$BEFD
 221+ CEDD 3E C0                                ld		a,$C0
 222+ CEDF                                      MMUSelectLayer2
 222+ CEDF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 223+ CEE3 CD F9 E3                             call	l2_draw_box
 224+ CEE6 CD A2 CE                             call    draw_STAT_boilertext
 225+ CEE9 3A 2B 7F     .PresentSystem:         ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 226+ CEEC                                      MMUSelectGalaxyA
 226+ CEEC ED 92 57    >                     nextreg GalaxyDataMMU,     a
 227+ CEEF ED 4B 3E 7F                          ld      bc, (PresentSystemX)
 228+ CEF3 CD BB FA                             call    galaxy_name_at_bc
 229+ CEF6 11 F8 CC                             ld      de,stat_present_name
 230+ CEF9 CD 36 CD                             call    stat_copy_to_name
 230+ CEFC
 231+ CEFC 01 98 0B                             ld      bc,present_position
 232+ CEFF 21 F8 CC                             ld      hl,stat_present_name
 233+ CF02                                      MMUSelectLayer2
 233+ CF02 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 234+ CF06 1E FF                                ld      e,txt_status_colour
 235+ CF08 CD 5E E3                             call    l2_print_at
 236+ CF0B 3A 2B 7F     .HyperspaceSystem:      ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 237+ CF0E                                      MMUSelectGalaxyA
 237+ CF0E ED 92 57    >                     nextreg GalaxyDataMMU,     a
 238+ CF11 ED 4B 40 7F                          ld      bc, (TargetSystemX)
 239+ CF15 CD BB FA                             call    galaxy_name_at_bc
 240+ CF18 11 17 CD                             ld      de,stat_target_name
 241+ CF1B CD 36 CD                             call    stat_copy_to_name
 241+ CF1E
 242+ CF1E 01 98 13                             ld      bc,hyperspace_position
 243+ CF21 21 17 CD                             ld      hl,stat_target_name
 244+ CF24                                      MMUSelectLayer2
 244+ CF24 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 245+ CF28 1E FF                                ld      e,txt_status_colour
 246+ CF2A CD 5E E3                             call    l2_print_at
 247+ CF2D CD E2 CF     .StatusText:	        call	get_cmdr_condition
 248+ CF30 21 6C 86                             ld		hl, ConditionNameIdx
 249+ CF33 CD 84 87                             call	getTableText
 250+ CF36 01 70 1B                             ld		bc,condition_position
 251+ CF39                                      MMUSelectLayer2
 251+ CF39 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 252+ CF3D 1E FF                                ld      e,txt_status_colour
 253+ CF3F CD 5E E3                             call    l2_print_at
 254+ CF42 CD AB CE     .DisplayFuel:           call	GetStatFuelLevel
 255+ CF45 21 2E AE                             ld		hl, txt_fuel_level
 256+ CF48 7E                                   ld		a,(hl)
 257+ CF49 FE 30                                cp		'0'
 258+ CF4B 20 01                                jr		nz,.PrintFuel
 259+ CF4D 23           .SkipLeadingZero:	    inc		hl
 260+ CF4E 01 70 23     .PrintFuel:             ld		bc,fuel_position
 261+ CF51                                      MMUSelectLayer2
 261+ CF51 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 262+ CF55 1E FF                                ld      e,txt_status_colour
 263+ CF57 CD 5E E3                             call    l2_print_at
 264+ CF5A CD 02 CE     .DisplayCash:           call	STAT_GetCash
 265+ CF5D 01 70 2B                             ld		bc,cash_position
 266+ CF60 21 EA CC                             ld		hl,STAT_cash_amount
 267+ CF63                                      MMUSelectLayer2
 267+ CF63 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 268+ CF67 1E FF                                ld      e,txt_status_colour
 269+ CF69 CD 5E E3                             call    l2_print_at
 270+ CF6C 3A 4D 7F     .PrintLegalStatus:      ld		a,(FugitiveInnocentStatus)
 271+ CF6F FE 00                                cp		0
 272+ CF71 20 05                                jr		nz,.Naughty
 273+ CF73 21 63 88                             ld		hl,WordClean
 274+ CF76 18 0C                                jr		.DisplayLegalStatus
 275+ CF78 FE 32        .Naughty:               cp		50
 276+ CF7A 38 05                                jr		c,.JustOffender
 277+ CF7C 21 72 88     .VeryNaughty:           ld		hl,WordFugitive
 278+ CF7F 18 03                                jr		.DisplayLegalStatus
 279+ CF81 21 69 88     .JustOffender:          ld		hl,WordOffender
 280+ CF84 01 70 33     .DisplayLegalStatus:    ld		bc,legal_status_position
 281+ CF87                                      MMUSelectLayer2
 281+ CF87 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 282+ CF8B 1E FF                                ld      e,txt_status_colour
 283+ CF8D CD 5E E3                             call    l2_print_at
 284+ CF90 3A 50 7F     .DisplayRating:         ld      a,(CurrentRank)
 285+ CF93                                      ; now cached ld		de,(KillTally)
 286+ CF93                                      ; now cached call	getRankIndex
 287+ CF93 21 6E 87                             ld		hl, RankingNameIdx
 288+ CF96 CD 84 87                             call	getTableText
 289+ CF99 01 70 3B                             ld		bc,rank_position
 290+ CF9C                                      MMUSelectLayer2
 290+ CF9C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 291+ CFA0 1E FF                                ld      e,txt_status_colour
 292+ CFA2 CD 5E E3                             call    l2_print_at
 293+ CFA5                                      ;break
 294+ CFA5
 295+ CFA5 C9                                   ret
 296+ CFA6
 297+ CFA6
 298+ CFA6              draw_STAT_items:        MMUSelectLayer1
 298+ CFA6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 299+ CFAA CD 8F E0                             call    l1_cls
 300+ CFAD                                      ; add in all the status stuff later
 301+ CFAD 3A E8 C0                             ld      a,(STAT_current_topItem)                    ; Move to correct top of stat list item
 302+ CFB0 16 18                                ld      d,STAT_buffer_row_len                       ; so de = offset to first item in display
 303+ CFB2 5F                                   ld      e,a
 304+ CFB3 ED 30                                mul
 305+ CFB5 21 EA C0                             ld      hl,STAT_display_buffer                      ; hl = pointer to first item in display
 306+ CFB8 19                                   add     hl,de                                       ;
 307+ CFB9 3A E8 C0                             ld      a,(STAT_current_topItem)                    ; set a to number of lines to display
 308+ CFBC 47                                   ld      b,a                                         ;
 309+ CFBD 3A E9 C0                             ld      a,(STAT_current_end)                        ;
 310+ CFC0 90                                   sub     b                                           ;
 311+ CFC1                                      JumpIfALTNusng  STAT_eqip_window_len, .FillScreen   ; if there are enough then just do a screen fill
 311+ CFC1 FE 0A       >                        cp      STAT_eqip_window_len
 311+ CFC3 DA CA CF    >                        jp		c, .FillScreen
 312+ CFC6 06 0A        .JustWindowing:         ld      b,STAT_eqip_window_len                      ; if its more than a screen then window
 313+ CFC8 18 01                                jr      .ReadyToPrint
 314+ CFCA 47           .FillScreen:            ld      b,a                                         ; b = the mumber of rows to display
 315+ CFCB 11 40 58     .ReadyToPrint:          ld      de,STAT_position
 316+ CFCE D5 E5 C5     .DrawARow:              push    de,, hl,, bc                                ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 317+ CFD1 CD D7 E0                             call    l1_print_at
 317+ CFD4
 318+ CFD4 C1 E1                                pop     hl,,bc                                      ; get mesage addr back and move down one line
 319+ CFD6 11 18 00                             ld      de,STAT_buffer_row_len
 320+ CFD9 19                                   add     hl,de
 321+ CFDA D1                                   pop     de                                           ; get output row back
 322+ CFDB 3E 08                                ld      a,8
 323+ CFDD 82                                   add     a,d
 324+ CFDE 57                                   ld      d,a
 325+ CFDF 10 ED                                djnz    .DrawARow
 326+ CFE1 C9                                   ret
 327+ CFE2
 328+ CFE2              ;----------------------------------------------------------------------------------------------------------------------------------
 329+ CFE2
 330+ CFE2 3A 5E 80     get_cmdr_condition:     ld			a,(DockedFlag)
 331+ CFE5 FE FF                                cp			StatePlayerDocked
 332+ CFE7 28 17                                jr			z,.PlayerIsDocked
 333+ CFE9              .PlayerNotDocked:	    ReturnIfMemTrue    SpaceStationSafeZone
 333+ CFE9 3A 44 7F    >                        ld      a,(SpaceStationSafeZone)
 333+ CFEC A7          >                        and     a
 333+ CFED C8          >                        ret     z
 334+ CFEE CD B9 83                             call        AreShipsPresent
 335+ CFF1 38 03                                jr          c,.NoShipsAround
 336+ CFF3 3E 01                                ld          a,1
 337+ CFF5 C9                                   ret
 338+ CFF6 3A 1F 81     .NoShipsAround:         ld			a,(PlayerEnergy)
 339+ CFF9 FE 80                                cp			$80
 340+ CFFB 3E 01                                ld          a,1
 341+ CFFD CE 01                                adc         1                                       ; add 1 + carry, if a < 128 then carry set so goes red
 342+ CFFF C9                                   ret
 343+ D000 AF           .PlayerIsDocked:        xor			a
 344+ D001 C9                                   ret
 345+ D002
 346+ D002              draw_status_menu:       InitNoDoubleBuffer
 346+ D002             >                            MMUSelectLayer1
 346+ D002 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 346+ D006 CD 8F E0    >                            call	l1_cls
 346+ D009 3E 07       >                            ld		a,7
 346+ D00B CD AA E0    >                            call	l1_attr_cls_to_a
 346+ D00E             >                            MMUSelectLayer2
 346+ D00E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 346+ D012 CD 0A E0    >                            call    asm_l2_double_buffer_off
 346+ D015 CD 0E E2    >                            call	l2_cls	; Get some space
 346+ D018             >                            MMUSelectSpriteBank
 346+ D018 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 346+ D01C CD 6E E5    >                            call    sprite_cls_cursors
 347+ D01F 3E 08                                ld		a,8
 348+ D021 32 A9 7E                             ld		(MenuIdMax),a
 349+ D024 01 01 01     .Drawbox:               ld		bc,$0101
 350+ D027 11 FD BE                             ld		de,$BEFD
 351+ D02A 3E C0                                ld		a,$C0
 352+ D02C                                      MMUSelectLayer2
 352+ D02C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 353+ D030 CD F9 E3                             call	l2_draw_box
 354+ D033 01 01 0A                             ld		bc,$0A01
 355+ D036 11 C0 FE                             ld		de,$FEC0
 356+ D039                                      SetMemToN STAT_current_topItem, 0
 356+ D039 3E 00       >                        ld      a,0
 356+ D03B 32 E8 C0    >                        ld      (STAT_current_topItem),a
 357+ D03E CD 84 E4                             call	l2_draw_horz_line
 358+ D041 CD 44 CE     .equipment              call    STAT_buffer_list
 359+ D044 CD A6 CF                             call    draw_STAT_items
 360+ D047 CD D7 CE                             call    draw_STAT_maintext
 361+ D04A C9                                   ret
 362+ D04B
 363+ D04B              ;----------------------------------------------------------------------------------------------------------------------------------
 364+ D04B              ; Handles all the input whilst in the market menu
 365+ D04B              loop_STAT_menu:         MacroIsKeyPressed c_Pressed_CursorUp
 365+ D04B 3E 4A       >                        ld      a,c_Pressed_CursorUp
 365+ D04D             >                        MMUSelectKeyboard
 365+ D04D ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 365+ D051 CD A2 E1    >                        call    is_key_pressed
 366+ D054 CC 64 D0                             call    z,STAT_UpPressed
 367+ D057                                      MacroIsKeyPressed c_Pressed_CursorDown
 367+ D057 3E 4C       >                        ld      a,c_Pressed_CursorDown
 367+ D059             >                        MMUSelectKeyboard
 367+ D059 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 367+ D05D CD A2 E1    >                        call    is_key_pressed
 368+ D060 CC 79 D0                             call    z,STAT_DownPressed
 369+ D063 C9                                   ret
 370+ D064
 371+ D064              ;----------------------------------------------------------------------------------------------------------------------------------
 372+ D064 AF           STAT_UpPressed:         xor     a
 373+ D065 32 E7 C0                             ld      (STAT_selected_row),a
 374+ D068 3A E8 C0     .check_scroll_up:       ld      a,(STAT_current_topItem)
 375+ D06B FE 00                                cp      0
 376+ D06D C8                                   ret     z
 377+ D06E 3D                                   dec     a           ; chjange later to buffering step back 1
 378+ D06F 32 E8 C0                             ld      (STAT_current_topItem),a
 379+ D072 CD A6 CF                             call    draw_STAT_items
 380+ D075 CD A2 CE                             call    draw_STAT_boilertext
 381+ D078 C9                                   ret
 382+ D079              ;----------------------------------------------------------------------------------------------------------------------------------
 383+ D079 3E 09        STAT_DownPressed:       ld      a,STAT_eqip_window_len-1
 384+ D07B 32 E7 C0                             ld      (STAT_selected_row),a
 385+ D07E 3A E9 C0                             ld      a,(STAT_current_end)
 386+ D081 47                                   ld      b,a                             ; This check is if the current list is < one screen
 387+ D082 05                                   dec     b
 388+ D083 3A E7 C0                             ld      a,(STAT_selected_row)
 389+ D086 B8                                   cp      b
 390+ D087 C8                                   ret     z
 391+ D088 FE 09                                cp      STAT_eqip_window_len-1
 392+ D08A 28 05                                jr      z, .check_scroll_down
 393+ D08C 21 E7 C0                             ld      hl,STAT_selected_row
 394+ D08F 34                                   inc     (hl)
 395+ D090 C9                                   ret
 396+ D091 47           .check_scroll_down:     ld      b,a
 397+ D092 3A E8 C0                             ld      a,(STAT_current_topItem)
 398+ D095 80                                   add     b
 399+ D096 3C                                   inc     a
 400+ D097 21 E9 C0                             ld      hl,STAT_current_end
 401+ D09A                                      ReturnIfAGTEusng      (hl)
 401+ D09A BE          >                        cp    (hl)
 401+ D09B D0          >                        ret	 nc
 402+ D09C 21 E8 C0     .can_scroll_down:       ld      hl,STAT_current_topItem
 403+ D09F 34                                   inc     (hl)
 404+ D0A0 CD A6 CF                             call    draw_STAT_items
 405+ D0A3 CD A2 CE                             call    draw_STAT_boilertext
 406+ D0A6 C9                                   ret
 407+ D0A7
# file closed: ./Menus/status_menu.asm
1437  D0A7                                  DISPLAY "Bank ",BankMenuStatus," - Bytes free ",/D, $2000 - ($-MenuStatusAddr), " - BankMenuStatus"
1438  D0A7                                  ASSERT $-MenuStatusAddr <8912 , Bank code leaks over 8K boundary
1439  D0A7              ; Bank 64  ------------------------------------------------------------------------------------------------------------------------
1440  D0A7                                  SLOT    MenuEquipSAddr
1441  D0A7                                  PAGE    BankMenuEquipS
1442  D0A7                                  ORG     MenuEquipSAddr
1443  C000                                  INCLUDE "./Menus/equip_ship_menu.asm"
# file opened: ./Menus/equip_ship_menu.asm
   1+ C000 45 71 75 69  eqshp_prices_page_marker  DB "EquipShipPG63"
   1+ C004 70 53 68 69
   1+ C008 70 50 47 36
   1+ C00C 33
   2+ C00D 50 02 19 C0  eqshp_boiler_text		DW $0250,eqship_title
   3+ C011 20 02 A9 8E  						DW $0220,name_expanded
   4+ C015 08 B0 24 C0                          DW $B008,eqship_cash
   5+ C019
   6+ C019 45 71 75 69  eqship_title            DB "Equip Ship",0
   6+ C01D 70 20 53 68
   6+ C021 69 70 00
   7+ C024 43 61 73 68  eqship_cash				DB "Cash : ",0
   7+ C028 20 3A 20 00
   8+ C02C
   9+ C02C 30 30 2E 30  txt_eqshp_amount	    DB "00.0",0
   9+ C030 00
  10+ C031 39 39 39 00  txt_eqshp_quantity      DB "999",0
  11+ C035 39 39 39 00  txt_eqshp_cargo         DB "999",0
  12+ C039 00 00        eqshp_cursor			DW  $0000
  13+ C03B              eqshp_position			equ $1808
  14+ C03B              eqshp_uom				equ	$68
  15+ C03B              eqshp_price 			equ $88
  16+ C03B              eqshp_Quantity			equ	$B0
  17+ C03B              eqshp_Cargo             equ $E0
  18+ C03B              eqshp_UomOffset		    equ 46
  19+ C03B 20 20 20 20  eqshp_blank_line        DB "                                ",0
  19+ C03F 20 20 20 20
  19+ C043 20 20 20 20
  19+ C047 20 20 20 20
  19+ C04B 20 20 20 20
  19+ C04F 20 20 20 20
  19+ C053 20 20 20 20
  19+ C057 20 20 20 20
  19+ C05B 00
  20+ C05C
  21+ C05C 00 00 00...  eqshp_item_price        DS 20
  22+ C070
  23+ C070              eqshp_cash_position     equ $B048
  24+ C070 00 00 00...  eqshp_cash_amount		DS 20
  25+ C084 20 43 72 20  eqshp_cash_UoM          DB " Cr       ",0
  25+ C088 20 20 20 20
  25+ C08C 20 20 00
  26+ C08F
  27+ C08F 00           eqshp_selected_row      DB 0
  28+ C090 00           eqshp_current_topItem   DB 0
  29+ C091 00           eqshp_current_end       DB 0
  30+ C092              eqship_buffer_rows      EQU     128
  31+ C092              eqship_buffer_row_len   EQU      32
  32+ C092              eqship_display_buff_len EQU     eqship_buffer_rows *   eqship_buffer_row_len
  33+ C092 00 00 00...  eqship_display_buffer:  DS      eqship_display_buff_len                     ; maxium of 128 items can be coded for
  34+ D092 00 00 00...  eqship_buyable_buffer:  DS      128
  35+ D112              eqship_buffer_cash_col: EQU     21
  36+ D112              eqship_fitted_module:   EQU     29
  37+ D112              ;----------------------------------------------------------------------------------------------------------------------------------
  38+ D112 3A 8F C0     eqshp_highlight_row:    ld      a,(eqshp_selected_row)
  39+ D115 C6 03                                add     a,3
  40+ D117 57                                   ld      d,a
  41+ D118 1E 56                                ld      e,L1InvHighlight
  42+ D11A                                      MMUSelectLayer1
  42+ D11A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  43+ D11E CD 3F E0                             call    l1_hilight_row
  44+ D121 C9                                   ret
  45+ D122              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ D122 3A 8F C0     eqshp_lowlight_row      ld      a,(eqshp_selected_row)
  47+ D125 C6 03                                add     a,3
  48+ D127 57                                   ld      d,a
  49+ D128 1E 07                                ld      e,L1InvLowlight
  50+ D12A                                      MMUSelectLayer1
  50+ D12A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ D12E CD 3F E0                             call    l1_hilight_row
  52+ D131 C9                                   ret
  53+ D132              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ D132 CD 49 D1     eqshp_DispDEIXtoIY1DP:  call    eqshp_DispDEIXtoIY
  55+ D135 FD 36 02 00                          ld      (iy+2),0
  56+ D139 FD 7E 00                             ld      a,(IY+0)
  57+ D13C FD 77 01                             ld      (IY+1),a
  58+ D13F 3E 2E                                ld      a,"."
  59+ D141 FD 77 00                             ld      (IY+0),a
  60+ D144 FD 23                                inc     IY
  61+ D146 FD 23                                inc     IY
  62+ D148 C9                                   ret
  63+ D149              ;----------------------------------------------------------------------------------------------------------------------------------
  64+ D149 DD 22 DA D1  eqshp_DispDEIXtoIY:     ld (.EQSHPclcn32z),ix
  65+ D14D ED 53 DC D1                          ld (.EQSHPclcn32zIX),de
  66+ D151 DD 21 D6 D1                          ld ix,.EQSHPclcn32t+36
  67+ D155 06 09                                ld b,9
  68+ D157 0E 00                                ld c,0
  69+ D159 3E 30        .EQSHPclcn321:            ld a,'0'
  70+ D15B B7                                   or a
  71+ D15C DD 5E 00     .EQSHPclcn322:            ld e,(ix+0)
  72+ D15F DD 56 01                             ld d,(ix+1)
  73+ D162 2A DA D1                             ld hl,(.EQSHPclcn32z)
  74+ D165 ED 52                                sbc hl,de
  75+ D167 22 DA D1                             ld (.EQSHPclcn32z),hl
  76+ D16A DD 5E 02                             ld e,(ix+2)
  77+ D16D DD 56 03                             ld d,(ix+3)
  78+ D170 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  79+ D173 ED 52                                sbc hl,de
  80+ D175 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  81+ D178 38 04                                jr c,.EQSHPclcn325
  82+ D17A 0C                                   inc c
  83+ D17B 3C                                   inc a
  84+ D17C 18 DE                                jr .EQSHPclcn322
  85+ D17E DD 5E 00     .EQSHPclcn325:            ld e,(ix+0)
  86+ D181 DD 56 01                             ld d,(ix+1)
  87+ D184 2A DA D1                             ld hl,(.EQSHPclcn32z)
  88+ D187 19                                   add hl,de
  89+ D188 22 DA D1                             ld (.EQSHPclcn32z),hl
  90+ D18B DD 5E 02                             ld e,(ix+2)
  91+ D18E DD 56 03                             ld d,(ix+3)
  92+ D191 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  93+ D194 ED 5A                                adc hl,de
  94+ D196 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  95+ D199 11 FC FF                             ld de,-4
  96+ D19C DD 19                                add ix,de
  97+ D19E 0C                                   inc c
  98+ D19F 0D                                   dec c
  99+ D1A0 28 05                                jr z,.EQSHPclcn323
 100+ D1A2 FD 77 00                             ld (iy+0),a
 101+ D1A5 FD 23                                inc iy
 102+ D1A7 10 B0        .EQSHPclcn323:            djnz .EQSHPclcn321
 103+ D1A9 3A DA D1                             ld a,(.EQSHPclcn32z)
 104+ D1AC C6 30                                add A,'0'
 105+ D1AE FD 77 00                             ld (iy+0),a
 106+ D1B1 C9                                   ret
 107+ D1B2 01 00 00 00  .EQSHPclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 107+ D1B6 0A 00 00 00
 107+ D1BA 64 00 00 00
 107+ D1BE E8 03 00 00
 107+ D1C2 10 27 00 00
 108+ D1C6 A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 108+ D1CA 40 42 0F 00
 108+ D1CE 80 96 98 00
 108+ D1D2 00 E1 F5 05
 108+ D1D6 00 CA 9A 3B
 109+ D1DA 00 00        .EQSHPclcn32z             ds 2
 110+ D1DC 00 00        .EQSHPclcn32zIX           ds 2
 111+ D1DE              ;----------------------------------------------------------------------------------------------------------------------------------
 112+ D1DE              ; "DispHL, writes HL to DE address"
 113+ D1DE 01 F0 D8     EQSHP_DispHLtoDE:         ld	bc,-10000
 114+ D1E1 CD F7 D1                             call	EQSHP_Num1
 115+ D1E4 01 18 FC                             ld	bc,-1000
 116+ D1E7 CD F7 D1                             call	EQSHP_Num1
 117+ D1EA 01 9C FF                             ld	bc,-100
 118+ D1ED CD F7 D1                             call	EQSHP_Num1
 119+ D1F0 0E F6                                ld	c,-10
 120+ D1F2 CD F7 D1                             call	EQSHP_Num1
 121+ D1F5 0E FF                                ld	c,-1
 122+ D1F7 3E 2F        EQSHP_Num1:	            ld	a,'0'-1
 123+ D1F9 3C           .Num2:	                inc	a
 124+ D1FA 09                                   add	hl,bc
 125+ D1FB 38 FC                                jr	c,.Num2
 126+ D1FD ED 42                                sbc	hl,bc
 127+ D1FF 12                                   ld	(de),a
 128+ D200 13                                   inc	de
 129+ D201 C9                                   ret
 130+ D202              ;----------------------------------------------------------------------------------------------------------------------------------
 131+ D202 26 00        EQSHP_DispAtoDE:          ld h,0
 132+ D204 6F                                   ld l,a
 133+ D205 C3 DE D1                             jp EQSHP_DispHLtoDE
 134+ D208              ;----------------------------------------------------------------------------------------------------------------------------------
 135+ D208 26 00        EQSHP_DispPriceAtoDE:     ld h,0
 136+ D20A 6F                                   ld l,a
 137+ D20B 01 9C FF                             ld	bc,-100
 138+ D20E CD 1E D2                             call	.NumLeadBlank1
 139+ D211 0E F6                                ld	c,-10
 140+ D213 CD F7 D1                             call	EQSHP_Num1
 141+ D216 3E 2E                                ld		a,'.'					; we could assume preformat but
 142+ D218                                                  DISPLAY "TODO: optimise"
 143+ D218 12                                   ld		(de),a					; we can optimse that later TODO
 144+ D219 13                                   inc		de						; with just an inc De
 145+ D21A 0E FF                                ld	c,-1
 146+ D21C 18 D9                                jr		EQSHP_Num1
 147+ D21E 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 148+ D220 3C           .NumLeadBlank2:	        inc	a
 149+ D221 09                                   add	hl,bc
 150+ D222 38 FC                                jr	c,.NumLeadBlank2
 151+ D224 FE 30                                cp	'0'
 152+ D226 20 02                                jr	nz,.DontBlank
 153+ D228 3E 20        .Blank:                 ld	a,' '
 154+ D22A ED 42        .DontBlank:	            sbc	hl,bc
 155+ D22C 12                                   ld	(de),a
 156+ D22D 13                                   inc	de
 157+ D22E C9                                   ret
 158+ D22F              ;----------------------------------------------------------------------------------------------------------------------------------
 159+ D22F FE 00        EQSHP_DispQtyAtoDE:      cp	0
 160+ D231 28 30                                jr	z,.NoStock
 161+ D233 26 00                                ld h,0
 162+ D235 6F                                   ld l,a
 163+ D236 01 9C FF                             ld	bc,-100
 164+ D239 CD 52 D2                             call	.NumLeadBlank1
 165+ D23C FE 20        .WasLead0:              cp      ' '
 166+ D23E 20 09                                jr      nz,.NotHundredsZero
 167+ D240 0E F6                                ld	c,-10
 168+ D242 CD 52 D2                             call	.NumLeadBlank1
 169+ D245 0E FF                                ld	c,-1
 170+ D247 18 AE                                jr		EQSHP_Num1
 171+ D249 0E F6        .NotHundredsZero:       ld	c,-10
 172+ D24B CD F7 D1                             call	EQSHP_Num1
 173+ D24E 0E FF                                ld	c,-1
 174+ D250 18 A5                                jr		EQSHP_Num1
 175+ D252 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 176+ D254 3C           .NumLeadBlank2:	        inc	a
 177+ D255 09                                   add	hl,bc
 178+ D256 38 FC                                jr	c,.NumLeadBlank2
 179+ D258 FE 30                                cp	'0'
 180+ D25A 20 02                                jr	nz,.DontBlank
 181+ D25C 3E 20        .Blank:                 ld	a,' '
 182+ D25E ED 42        .DontBlank:	            sbc	hl,bc
 183+ D260 12                                   ld	(de),a
 184+ D261 13                                   inc	de
 185+ D262 C9                                   ret
 186+ D263 3E 20        .NoStock:               ld	a,' '
 187+ D265 12                                   ld	(de),a
 188+ D266 13                                   inc	de
 189+ D267 12                                   ld	(de),a
 190+ D268 13                                   inc	de
 191+ D269 3E 2D                                ld	a,'-'
 192+ D26B 12                                   ld	(de),a
 193+ D26C 13                                   inc de
 194+ D26D C9                                   ret
 195+ D26E              ;----------------------------------------------------------------------------------------------------------------------------------
 196+ D26E              EQSHP_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++D26E
   2++D26E              ;">print_boilder_text hl = text structure, b = message count"
   3++D26E C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++D26F 4E                                   ld			c,(hl)		; Get Row into b
   5++D270 23                                   inc			hl
   6++D271 46                                   ld			b,(hl)		; Get Col into b
   7++D272 23                                   inc			hl
   8++D273 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++D274 23                                   inc			hl
  10++D275 56                                   ld			d,(hl)		; Get text address Hi into E
  11++D276 23                                   inc			hl
  12++D277 E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++D278 EB                                   ex			de,hl		; now hl = address of text data
  14++D279 1E FF                                ld			e,txt_status_colour
  15++D27B C5                                   push		bc
  16++D27C D1                                   pop			de
  17++D27D                                      MMUSelectLayer1
  17++D27D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++D281 CD D7 E0                             call		l1_print_at
  19++D284 E1                                   pop			hl
  20++D285 C1                                   pop			bc
  21++D286 10 E6                                djnz		.BoilerTextLoop
  22++D288 C9                                   ret
  23++D289
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 197+ D289              ;----------------------------------------------------------------------------------------------------------------------------------
 198+ D289 2A FE 83     eqshp_GetCash:          ld		hl,(Cash+2)
 199+ D28C EB                                   ex      de,hl
 200+ D28D DD 2A FC 83                          ld      ix,(Cash)
 201+ D291 FD 21 70 C0                          ld		iy,eqshp_cash_amount
 202+ D295 CD 32 D1                             call 	eqshp_DispDEIXtoIY1DP
 203+ D298 FD E5                                push    IY
 204+ D29A D1                                   pop     de
 205+ D29B 21 84 C0                             ld      hl,eqshp_cash_UoM
 206+ D29E 01 0B 00                             ld      bc,11
 207+ D2A1 ED B0                                ldir
 208+ D2A3 C9                                   ret
 209+ D2A4              ;----------------------------------------------------------------------------------------------------------------------------------
 210+ D2A4 CD 89 D2     eqshp_DisplayCash:      call	eqshp_GetCash
 211+ D2A7 21 70 C0                             ld		hl,eqshp_cash_amount
 212+ D2AA 11 48 B0                             ld      de,eqshp_cash_position
 213+ D2AD                                      MMUSelectLayer1
 213+ D2AD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 214+ D2B1 CD D7 E0                             call	l1_print_at
 215+ D2B4 C9                                   ret
 216+ D2B5              ;----------------------------------------------------------------------------------------------------------------------------------
 217+ D2B5 7E           eqshp_expand_word:      ld      a,(hl)
 218+ D2B6 FE 00                                cp      0
 219+ D2B8 C8                                   ret     z
 220+ D2B9 12                                   ld      (de),a
 221+ D2BA 23                                   inc     hl
 222+ D2BB 13                                   inc     de
 223+ D2BC 18 F7                                jr      eqshp_expand_word
 224+ D2BE
 225+ D2BE              ; hl = list of words
 226+ D2BE              ; de = adress to expand to
 227+ D2BE 7E           eqshp_expand_name:      ld      a,(hl)
 228+ D2BF 47                                   ld      b,a
 229+ D2C0 23                                   inc     hl
 230+ D2C1 7E                                   ld      a,(hl)              ; its a 16 bit
 231+ D2C2 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 232+ D2C3 B0                                   or      b
 233+ D2C4 20 01                                jr      nz,.MoreToDo
 234+ D2C6              ;                        ld      (de),a we dont want the null marker now
 235+ D2C6 C9                                   ret
 236+ D2C7 E5 D5        .MoreToDo:              push    hl,,de
 237+ D2C9 7E                                   ld      a,(hl)              ; bodge for now no optimise
 238+ D2CA 5F                                   ld      e,a
 239+ D2CB 23                                   inc     hl
 240+ D2CC 7E                                   ld      a,(hl)
 241+ D2CD 57                                   ld      d,a
 242+ D2CE EB                                   ex      hl,de               ; hl is now Word... address
 243+ D2CF D1                                   pop     de                  ; de back to pointer to buffer
 244+ D2D0 CD B5 D2     .ProcessWord:           call    eqshp_expand_word
 245+ D2D3 3E 20                                ld      a," "               ; speculative space
 246+ D2D5 12                                   ld      (de),a
 247+ D2D6 13                                   inc     de
 248+ D2D7 E1                                   pop     hl                  ; get string pointer back
 249+ D2D8 23                                   inc     hl
 250+ D2D9 23                                   inc     hl                  ; on to next word
 251+ D2DA 18 E2                                jr      eqshp_expand_name
 252+ D2DC
 253+ D2DC 21 92 C0     eqshp_buffer_list:      ld      hl,eqship_display_buffer                    ; hl - target buffer
 254+ D2DF 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 255+ D2E1 11 00 10                             ld      de, eqship_display_buff_len
 256+ D2E4 CD 38 7D                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 257+ D2E7 21 B1 C0                             ld      hl,eqship_display_buffer+eqship_buffer_row_len-1
 258+ D2EA 11 20 00                             ld      de,eqship_buffer_row_len
 259+ D2ED 06 1A                                ld      b,ShipEquipTableSize
 260+ D2EF AF                                   xor     a
 261+ D2F0 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 262+ D2F1 19                                   add     hl,de
 263+ D2F2 10 FC                                djnz    .EoLLoop
 264+ D2F4 06 1A                                ld      b,ShipEquipTableSize                        ; CurrentGameMaxEquipment
 265+ D2F6 DD 21 D6 F4                          ld      ix,ShipEquipmentList                        ; ix = equipment master table
 266+ D2FA FD 21 92 C0                          ld      iy,eqship_display_buffer                    ; iy = target buffer
 267+ D2FE 0E 00                                ld      c,0                                         ; Current Row
 268+ D300 DD 7E 01     .ProcessRow:            ld      a,(ix+1)                                    ; get can buy
 269+ D303 FE FF                                cp      $FF                                         ; if its $FF then do not display
 270+ D305 C2 12 D3                             jp      nz,.BufferItem
 271+ D308 11 10 00     .DoNotDisplay:          ld      de,ShipEquipTableRowLen                     ; mov eto next equipment list, 7 =  row length
 272+ D30B DD 19                                add     ix,de
 273+ D30D 10 F1                                djnz    .ProcessRow
 274+ D30F C3 75 D3                             jp      .DoneProcess
 275+ D312 FD E5 DD E5  .BufferItem:            push    iy,,ix,,bc
 275+ D316 C5
 276+ D317 DD 7E 00                             ld      a,(ix+0)                                    ; get can buy
 277+ D31A 21 92 D0                             ld      hl,eqship_buyable_buffer                    ;
 278+ D31D 59                                   ld      e,c
 279+ D31E 16 00                                ld      d,0                                         ;
 280+ D320 19                                   add     hl,de                                       ;
 281+ D321 77                                   ld      (hl),a                                      ; set buyable to 0
 282+ D322 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 283+ D325 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length
 284+ D327 59                                   ld      e,c
 285+ D328 ED 30                                mul
 286+ D32A 19                                   add     hl,de                                       ; hl = dword list of work pointers
 287+ D32B FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 288+ D32F C5                                   push    bc
 289+ D330 CD BE D2                             call    eqshp_expand_name                           ; expand name
 290+ D333 C1                                   pop     bc
 291+ D334 11 15 00                             ld      de,eqship_buffer_cash_col                   ; move buffer column to 20
 292+ D337 FD 19                                add     iy,de
 293+ D339 FD E5                                push    iy
 294+ D33B DD 7E 04                             ld      a,(ix+4)
 295+ D33E 5F                                   ld      e,a
 296+ D33F DD 7E 05                             ld      a,(ix+5)
 297+ D342 57                                   ld      d,a                                         ; de = price
 298+ D343 DD 62 DD 6B                          ld      ix,de
 299+ D347                                      ;push    de
 300+ D347                                      ;pop     ix
 301+ D347 11 00 00                             ld      de,0                                        ; deix = price
 302+ D34A CD 49 D1                             call    eqshp_DispDEIXtoIY                          ; print it to pos IY
 303+ D34D 3E 20                                ld      a," "
 304+ D34F FD 77 00                             ld      (IY+0),a
 305+ D352 FD 77 01                             ld      (IY+1),a
 306+ D355 FD 77 02                             ld      (IY+2),a
 307+ D358 FD E1                                pop     iy
 308+ D35A CD 7A D3                             call    .RightJustify
 309+ D35D C1 DD E1 FD                          pop     iy,,ix,,bc
 309+ D361 E1
 310+ D362 DD 7E 07     .CheckFitted:           ld      a,(ix+7)
 311+ D365 FD 77 1D                             ld      (iy+eqship_fitted_module),a
 312+ D368 11 20 00                             ld      de,eqship_buffer_row_len
 313+ D36B FD 19                                add     iy,de                                       ; now iy = start of next column
 314+ D36D 11 10 00                             ld      de,ShipEquipTableRowLen
 315+ D370 DD 19                                add     ix,de
 316+ D372 0C                                   inc     c
 317+ D373 10 8B                                djnz    .ProcessRow
 318+ D375 79           .DoneProcess:           ld      a,c
 319+ D376 32 91 C0                             ld      (eqshp_current_end),a
 320+ D379 C9                                   ret
 321+ D37A CD 7D D3     .RightJustify:          call    .RightJustify2
 322+ D37D CD 80 D3     .RightJustify2:         call    .RightJustify3
 323+ D380 FD 7E 03     .RightJustify3:         ld      a,(iy+3)
 324+ D383 FE 20                                cp      " "
 325+ D385 CC 89 D3                             call    z,.ShuffleRight
 326+ D388 C9                                   ret
 327+ D389 FD E5        .ShuffleRight:          push    iy
 328+ D38B E1                                   pop     hl
 329+ D38C 3E 03                                ld      a,3
 330+ D38E ED 31                                add     hl,a
 331+ D390 FD 7E 02                             ld      a,(iy+2)
 332+ D393 77                                   ld      (hl),a
 333+ D394 2B                                   dec     hl
 334+ D395 FD 7E 01                             ld      a,(iy+1)
 335+ D398 77                                   ld      (hl),a
 336+ D399 2B                                   dec     hl
 337+ D39A FD 7E 00                             ld      a,(iy+0)
 338+ D39D 77                                   ld      (hl),a
 339+ D39E 2B                                   dec     hl
 340+ D39F 3E 20                                ld      a," "
 341+ D3A1 77                                   ld      (hl),a
 342+ D3A2 C9                                   ret
 343+ D3A3
 344+ D3A3
 345+ D3A3              draw_eqship_items:      MMUSelectLayer1
 345+ D3A3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 346+ D3A7 CD 8F E0                             call    l1_cls
 347+ D3AA 06 03                                ld		b,3
 348+ D3AC 21 0D C0                             ld		hl,eqshp_boiler_text
 349+ D3AF CD 6E D2                             call	EQSHP_print_boiler_text
 350+ D3B2 CD A4 D2                             call    eqshp_DisplayCash
 351+ D3B5 3A 90 C0                             ld      a,(eqshp_current_topItem)
 352+ D3B8 16 20                                ld      d,eqship_buffer_row_len
 353+ D3BA 5F                                   ld      e,a
 354+ D3BB ED 30                                mul
 355+ D3BD 21 92 C0                             ld      hl,eqship_display_buffer
 356+ D3C0 19                                   add     hl,de
 357+ D3C1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 358+ D3C4 47                                   ld      b,a
 359+ D3C5 3A 91 C0                             ld      a,(eqshp_current_end)
 360+ D3C8 90                                   sub     b
 361+ D3C9                                      JumpIfALTNusng  18, .FillScreen
 361+ D3C9 FE 12       >                        cp      18
 361+ D3CB DA D2 D3    >                        jp		c, .FillScreen
 362+ D3CE 06 12        .JustWindowing:         ld      b,18
 363+ D3D0 18 01                                jr      .ReadyToPrint
 364+ D3D2 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 365+ D3D3 11 08 18     .ReadyToPrint:          ld      de,eqshp_position
 366+ D3D6 D5 E5 C5     .DrawARow:              push    de,,hl,,bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 367+ D3D9 CD D7 E0                             call    l1_print_at
 367+ D3DC
 368+ D3DC C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 369+ D3DE 11 20 00                             ld      de,eqship_buffer_row_len
 370+ D3E1 19                                   add     hl,de
 371+ D3E2 D1                                   pop     de                          ; get output row back
 372+ D3E3 3E 08                                ld      a,8
 373+ D3E5 82                                   add     a,d
 374+ D3E6 57                                   ld      d,a
 375+ D3E7 10 ED                                djnz    .DrawARow
 376+ D3E9 C9                                   ret
 377+ D3EA
 378+ D3EA              draw_eqshp_menu:        InitNoDoubleBuffer
 378+ D3EA             >                            MMUSelectLayer1
 378+ D3EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 378+ D3EE CD 8F E0    >                            call	l1_cls
 378+ D3F1 3E 07       >                            ld		a,7
 378+ D3F3 CD AA E0    >                            call	l1_attr_cls_to_a
 378+ D3F6             >                            MMUSelectLayer2
 378+ D3F6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 378+ D3FA CD 0A E0    >                            call    asm_l2_double_buffer_off
 378+ D3FD CD 0E E2    >                            call	l2_cls	; Get some space
 378+ D400             >                            MMUSelectSpriteBank
 378+ D400 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 378+ D404 CD 6E E5    >                            call    sprite_cls_cursors
 379+ D407 3E 20                                ld      a,$20
 380+ D409 32 A9 7E                             ld      (MenuIdMax),a
 381+ D40C 3A 2B 7F     .SetData:               ld      a,(Galaxy)
 382+ D40F                                      MMUSelectGalaxyA
 382+ D40F ED 92 57    >                     nextreg GalaxyDataMMU,     a
 383+ D412 CD 6D F9                             call    galaxy_planet_data
 384+ D415 CD F5 F8                             call    galaxy_equip_market
 385+ D418 ED 4B 3E 7F                          ld      bc,(PresentSystemX)
 386+ D41C CD BB FA                             call    galaxy_name_at_bc
 387+ D41F CD 6D F9                             call    galaxy_planet_data
 388+ D422 AF                                   xor     a
 389+ D423 32 90 C0                             ld      (eqshp_current_topItem),a
 390+ D426 CD DC D2                             call    eqshp_buffer_list
 391+ D429 01 01 01     .Drawbox:               ld		bc,$0101
 392+ D42C 11 FD BE                             ld		de,$BEFD
 393+ D42F 3E C0                                ld		a,$C0
 394+ D431                                      MMUSelectLayer2
 394+ D431 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 395+ D435 CD F9 E3                             call	l2_draw_box
 396+ D438 01 01 0A                             ld		bc,$0A01
 397+ D43B 11 C0 FE                             ld		de,$FEC0
 398+ D43E CD 84 E4                             call	l2_draw_horz_line
 399+ D441 3A 2B 7F     .StaticText:	        ld      a,(Galaxy)
 400+ D444                                      MMUSelectGalaxyA
 400+ D444 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 401+ D447 3E 19                                ld		a,25
 402+ D449 CD 24 8E                             call	expandTokenToString
 403+ D44C CD 7A F6                             call	GetDigramGalaxySeed
 404+ D44F CD A3 D3                             call    draw_eqship_items
 405+ D452 AF           .InitialHighlight:      xor     a
 406+ D453 32 8F C0                             ld      (eqshp_selected_row),a        ; assume on row zero
 407+ D456 CD 12 D1                             call    eqshp_highlight_row
 408+ D459 CD A4 D2     .DisCash:               call    eqshp_DisplayCash
 409+ D45C C9                                   ret
 410+ D45D
 411+ D45D              ;----------------------------------------------------------------------------------------------------------------------------------
 412+ D45D CD DC D2     eqip_refesh_buffer:     call    eqshp_buffer_list
 413+ D460 3A 8F C0                             ld      a,(eqshp_selected_row)              ; get revised list length
 414+ D463 47                                   ld      b,a
 415+ D464 3A 90 C0                             ld      a,(eqshp_current_topItem)           ; get current top of screen
 416+ D467 4F                                   ld      c,a
 417+ D468 80                                   add     b                                   ; a = top + selected row
 418+ D469 21 91 C0                             ld      hl,eqshp_current_end
 419+ D46C                                      CallIfAGTENusng (hl), .NewListShorter       ; if a > new list len then rebuild
 419+ D46C BE          >                        cp      (hl)
 419+ D46D D4 73 D4    >                        call	nc,.NewListShorter
 420+ D470 C3 7F D4                             jp      .RedrawList
 421+ D473 C5           .NewListShorter:        push    bc
 422+ D474 CD 22 D1                             call    eqshp_lowlight_row
 423+ D477 C1                                   pop     bc
 424+ D478 3A 91 C0                             ld      a,(eqshp_current_end)               ; b = end of list
 425+ D47B 91                                   sub     c                                   ; minus current top
 426+ D47C 32 8F C0                             ld      (eqshp_selected_row),a
 427+ D47F CD 12 D1     .RedrawList:            call    eqshp_highlight_row
 428+ D482 CD A3 D3                             call    draw_eqship_items
 429+ D485 C9                                   ret
 430+ D486
 431+ D486              ;----------------------------------------------------------------------------------------------------------------------------------
 432+ D486              ; Handles all the input whilst in the market menu
 433+ D486              loop_eqshp_menu:        MacroIsKeyPressed c_Pressed_CursorUp
 433+ D486 3E 4A       >                        ld      a,c_Pressed_CursorUp
 433+ D488             >                        MMUSelectKeyboard
 433+ D488 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 433+ D48C CD A2 E1    >                        call    is_key_pressed
 434+ D48F CC B7 D4                             call    z,eqshp_UpPressed
 435+ D492                                      MacroIsKeyPressed c_Pressed_CursorDown
 435+ D492 3E 4C       >                        ld      a,c_Pressed_CursorDown
 435+ D494             >                        MMUSelectKeyboard
 435+ D494 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 435+ D498 CD A2 E1    >                        call    is_key_pressed
 436+ D49B CC D7 D4                             call    z,eqshp_DownPressed
 437+ D49E                                      MacroIsKeyPressed c_Pressed_RollLeft
 437+ D49E 3E 08       >                        ld      a,c_Pressed_RollLeft
 437+ D4A0             >                        MMUSelectKeyboard
 437+ D4A0 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 437+ D4A4 CD A2 E1    >                        call    is_key_pressed
 438+ D4A7 CC 03 D5                             call    z,eqshp_LeftPressed
 439+ D4AA                                      MacroIsKeyPressed c_Pressed_RollRight
 439+ D4AA 3E 0A       >                        ld      a,c_Pressed_RollRight
 439+ D4AC             >                        MMUSelectKeyboard
 439+ D4AC ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 439+ D4B0 CD A2 E1    >                        call    is_key_pressed
 440+ D4B3 CC 78 D5                             call    z,eqshp_RightPressed
 441+ D4B6 C9                                   ret
 442+ D4B7
 443+ D4B7              ;----------------------------------------------------------------------------------------------------------------------------------
 444+ D4B7 3A 8F C0     eqshp_UpPressed:        ld      a,(eqshp_selected_row)
 445+ D4BA FE 00                                cp      0
 446+ D4BC 28 0B                                jr      z,.check_scroll_up
 447+ D4BE CD 22 D1                             call    eqshp_lowlight_row
 448+ D4C1 21 8F C0                             ld      hl,eqshp_selected_row
 449+ D4C4 35                                   dec     (hl)
 450+ D4C5 CD 12 D1                             call    eqshp_highlight_row
 451+ D4C8 C9                                   ret
 452+ D4C9 3A 90 C0     .check_scroll_up:       ld      a,(eqshp_current_topItem)
 453+ D4CC FE 00                                cp      0
 454+ D4CE C8                                   ret     z
 455+ D4CF 3D                                   dec     a           ; chjange later to buffering step back 1
 456+ D4D0 32 90 C0                             ld      (eqshp_current_topItem),a
 457+ D4D3 CD A3 D3                             call    draw_eqship_items
 458+ D4D6 C9                                   ret
 459+ D4D7              ;----------------------------------------------------------------------------------------------------------------------------------
 460+ D4D7 3A 91 C0     eqshp_DownPressed:      ld      a,(eqshp_current_end)
 461+ D4DA 47                                   ld      b,a                             ; This check is if the current list is < one screen
 462+ D4DB 05                                   dec     b
 463+ D4DC 3A 8F C0                             ld      a,(eqshp_selected_row)
 464+ D4DF B8                                   cp      b
 465+ D4E0 C8                                   ret     z
 466+ D4E1 FE 11                                cp      17
 467+ D4E3 28 0B                                jr      z, .check_scroll_down
 468+ D4E5 CD 22 D1                             call    eqshp_lowlight_row
 469+ D4E8 21 8F C0                             ld      hl,eqshp_selected_row
 470+ D4EB 34                                   inc     (hl)
 471+ D4EC CD 12 D1                             call    eqshp_highlight_row
 472+ D4EF C9                                   ret
 473+ D4F0 47           .check_scroll_down:     ld      b,a
 474+ D4F1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 475+ D4F4 80                                   add     b
 476+ D4F5 3C                                   inc     a
 477+ D4F6 21 91 C0                             ld      hl,eqshp_current_end
 478+ D4F9                                      ReturnIfAGTEusng      (hl)
 478+ D4F9 BE          >                        cp    (hl)
 478+ D4FA D0          >                        ret	 nc
 479+ D4FB 21 90 C0     .can_scroll_down:       ld      hl,eqshp_current_topItem
 480+ D4FE 34                                   inc     (hl)
 481+ D4FF CD A3 D3                             call    draw_eqship_items
 482+ D502 C9                                   ret
 483+ D503              ;----------------------------------------------------------------------------------------------------------------------------------
 484+ D503 3A 2B 7F     eqshp_LeftPressed:      ld      a,(Galaxy)
 485+ D506                                      MMUSelectGalaxyA
 485+ D506 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 486+ D509 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 487+ D50D 3A 90 C0     .IsItFuel:              ld      a,(eqshp_current_topItem)   ; Can't refund fuel
 488+ D510 47                                   ld      b,a
 489+ D511 3A 8F C0                             ld      a,(eqshp_selected_row)
 490+ D514 80                                   add     b
 491+ D515 FE 00                                cp      0
 492+ D517 C8                                   ret     z
 493+ D518 4F           .FuelNotSelected:       ld      c,a
 494+ D519 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 495+ D51B 5F                                   ld      e,a
 496+ D51C ED 30                                mul
 497+ D51E DD 19                                add     ix,de
 498+ D520 DD 7E 07                             ld      a,(ix+7)
 499+ D523 FE 2D                                cp      "-"
 500+ D525 C8                                   ret     z
 501+ D526 79           .CheckIfMissle:         ld      a,c
 502+ D527 FE 01                                cp      EQ_MISSILE
 503+ D529 28 2F                                jr      z,.RefundMissle
 504+ D52B DD 5E 04     .RefundItemCash:        ld      e,(ix+4)
 505+ D52E DD 56 05                             ld      d,(ix+5)
 506+ D531 E5 C5                                push    hl,,bc
 507+ D533 CD EB 8E                             call    addDEtoCash         ; refund laser value
 508+ D536 C1 E1                                pop     hl,,bc
 509+ D538 3E 2D                                ld      a,"-"
 510+ D53A DD 77 07                             ld      (ix+7),a
 511+ D53D 21 1B 84                             ld      hl,EquipmentFitted
 512+ D540 79                                   ld      a,c                 ; get back current laser ref
 513+ D541 ED 31                                add     hl,a
 514+ D543 36 00                                ld      (hl),EquipmentItemNotFitted; remove laser from equipment
 515+ D545 CD 5D D4                             call    eqip_refesh_buffer
 516+ D548 DD 7E 08                             ld      a,(ix+8)
 517+ D54B FE FF                                cp      $FF
 518+ D54D C8                                   ret     z
 519+ D54E 21 13 84     .ItsALaser              ld      hl,LaserType        ; clear out respective current laser
 520+ D551 47                                   ld      b,a
 521+ D552 DD 7E 09                             ld      a,(ix+9)
 522+ D555 ED 31                                add     hl,a
 523+ D557 36 FF                                ld      (hl),$FF            ; $FF = not fitted
 524+ D559 C9                                   ret
 525+ D55A DD 5E 04     .RefundMissle           ld      e,(ix+4)
 526+ D55D DD 56 05                             ld      d,(ix+5)
 527+ D560 E5 C5                                push    hl,,bc
 528+ D562 CD EB 8E                             call    addDEtoCash         ; refund laser value
 529+ D565 C1 E1                                pop     hl,,bc
 530+ D567 DD 7E 07                             ld      a,(ix+7)
 531+ D56A 3D                                   dec     a
 532+ D56B FE 30                                cp      "0"
 533+ D56D 20 02                                jr      nz,.NotAllSold
 534+ D56F 3E 2D        .AllSold:               ld      a,"-"
 535+ D571 DD 77 07     .NotAllSold:            ld      (ix+7),a
 536+ D574 CD 5D D4                             call    eqip_refesh_buffer
 537+ D577 C9                                   ret
 538+ D578              ;----------------------------------------------------------------------------------------------------------------------------------
 539+ D578 3A 2B 7F     eqshp_RightPressed:     ld      a,(Galaxy)
 540+ D57B                                      MMUSelectGalaxyA
 540+ D57B ED 92 57    >                     nextreg GalaxyDataMMU,     a
 541+ D57E DD 21 D6 F4                          ld      ix,ShipEquipmentList
 542+ D582 3A 90 C0                             ld      a,(eqshp_current_topItem)
 543+ D585 47                                   ld      b,a
 544+ D586 3A 8F C0                             ld      a,(eqshp_selected_row)
 545+ D589 80                                   add     a,b
 546+ D58A FE 01                                cp      EQ_MISSILE
 547+ D58C 20 0A                                jr      nz,.NotAMissileBuy
 548+ D58E 08           .ItsAMissile:           ex      af,af'
 549+ D58F 3E 34                                ld      a,"4"
 550+ D591 32 AA D5                             ld      (.CompareCheck+1),a
 551+ D594 08                                   ex      af,af'
 552+ D595 C3 9F D5                             jp      .FindInTable
 553+ D598 08           .NotAMissileBuy:        ex      af,af'
 554+ D599 3E 2A                                ld      a,"*"
 555+ D59B 32 AA D5                             ld      (.CompareCheck+1),a
 556+ D59E 08                                   ex      af,af'
 557+ D59F 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 558+ D5A1 5F                                   ld      e,a
 559+ D5A2 ED 30                                mul
 560+ D5A4 DD 19                                add     ix,de
 561+ D5A6 DD 7E 07                             ld      a,(ix+7)
 562+ D5A9 FE 2A        .CompareCheck:          cp      "*"; not true for missles astyou can buy 1 to 4
 563+ D5AB C8                                   ret     z
 564+ D5AC 47           .Purchasable:           ld      b,a
 565+ D5AD DD 7E 06                             ld      a,(ix+6)
 566+ D5B0 FE 01                                cp      EQ_MISSILE
 567+ D5B2 20 06                                jr      nz,.NotMissleMax
 568+ D5B4 21 4B 7F     .MissleQuanity:         ld      hl,NbrMissiles
 569+ D5B7 78                                   ld      a,b
 570+ D5B8 BE                                   cp      (hl)
 571+ D5B9 C8                                   ret     z
 572+ D5BA 4F           .NotMissleMax:          ld      c,a
 573+ D5BB DD 7E 01                             ld      a,(ix+1)
 574+ D5BE FE FF                                cp      $FF
 575+ D5C0 C8                                   ret     z
 576+ D5C1              .CheckCash:             JumpIfMemIsNotZero  Cash+2 , .MoreThanRequired      ; Nothing in game > 65535CR
 576+ D5C1 3A FE 83    >                        ld      a,(Cash+2)
 576+ D5C4 A7          >                        and     a
 576+ D5C5 C2 D5 D5    >                        jp	    nz,.MoreThanRequired
 577+ D5C8 2A FC 83                             ld      hl,(Cash)                                   ; hl = lower 16 bits of cash
 578+ D5CB DD 5E 04                             ld      e,(ix+4)
 579+ D5CE DD 56 05                             ld      d,(ix+5)
 580+ D5D1 CD 42 98                             call	compare16HLDE
 581+ D5D4 D8                                   ret     c                                           ; Insufficient Funds
 582+ D5D5 DD 7E 06     .MoreThanRequired:      ld      a,(ix+6)
 583+ D5D8 FE 00                                cp      0
 584+ D5DA 28 15                                jr      z,.MaxFuelOut
 585+ D5DC FE 01                                cp      1
 586+ D5DE 28 1B                                jr      z,.AddMissle
 587+ D5E0                                      JumpIfAGTENusng  EQ_FRONT_PULSE,.AddLaser
 587+ D5E0 FE 0A       >                        cp     EQ_FRONT_PULSE
 587+ D5E2 D2 05 D6    >                        jp		nc,.AddLaser
 588+ D5E5 21 1B 84     .AddNormalItem:         ld      hl,EquipmentFitted
 589+ D5E8 ED 31                                add     hl,a
 590+ D5EA 36 FF                                ld      (hl),EquipmentItemFitted
 591+ D5EC 3E 2A                                ld      a,"*"
 592+ D5EE C3 4D D6                             jp      .AddedItem
 593+ D5F1              .MaxFuelOut:            MaxFuelMacro
 593+ D5F1 3E 46       >						ld		a,MaxFuelLevel
 593+ D5F3 32 00 84    >						ld		(Fuel),a
 594+ D5F6 3E 2A                                ld      a,"*"
 595+ D5F8 C3 4D D6                             jp      .AddedItem
 596+ D5FB 21 4B 7F     .AddMissle:             ld      hl,NbrMissiles
 597+ D5FE 34                                   inc     (hl)
 598+ D5FF 7E                                   ld      a,(hl)
 599+ D600 C6 30                                add     "0"
 600+ D602 C3 4D D6                             jp      .AddedItem
 601+ D605 DD 7E 08     .AddLaser:              ld      a,(ix+8)            ; Get if its a laser, $FF = no laser
 602+ D608 FE FF                                cp      $FF
 603+ D60A 20 29                                jr      nz,.BuyLaser
 604+ D60C              .LargeCargoBay: ;TODO
 605+ D60C 4F           .RefundExistingLaser:   ld      c,a                 ; retain current laser nbr
 606+ D60D 21 D6 F4                             ld      hl,ShipEquipmentList
 607+ D610 16 10                                ld      d,ShipEquipTableRowLen
 608+ D612 5F                                   ld      e,a
 609+ D613 ED 30                                mul
 610+ D615 19                                   add     hl,de               ; now we have the row for the current laser
 611+ D616 3E 04                                ld      a,4
 612+ D618 ED 31                                add     hl,a
 613+ D61A 7E                                   ld      a,(hl)
 614+ D61B 5F                                   ld      e,a
 615+ D61C 23                                   inc     hl
 616+ D61D 7E                                   ld      a,(hl)
 617+ D61E 57                                   ld      d,a
 618+ D61F E5 C5                                push    hl,,bc
 619+ D621 CD EB 8E                             call    addDEtoCash         ; refund laser value
 620+ D624 C1 E1                                pop     hl,,bc
 621+ D626 3E 02                                ld      a,2
 622+ D628 ED 31                                add     hl,a
 623+ D62A 3E 2D                                ld      a,"-"
 624+ D62C 77                                   ld      (hl),a              ; clear on ship equipment
 625+ D62D 21 1B 84                             ld      hl,EquipmentFitted
 626+ D630 79                                   ld      a,c                 ; get back current laser ref
 627+ D631 ED 31                                add     hl,a
 628+ D633 36 00                                ld      (hl),EquipmentItemNotFitted  ; remove laser from equipment
 629+ D635 21 1B 84     .BuyLaser:              ld      hl,EquipmentFitted
 630+ D638 DD 7E 06                             ld      a,(ix+6)
 631+ D63B ED 31                                add     hl,a
 632+ D63D 36 FF                                ld      (hl),EquipmentItemFitted
 633+ D63F DD 7E 09                             ld      a,(ix+9)            ; get laser position
 634+ D642 21 13 84                             ld      hl,LaserType
 635+ D645 ED 31                                add     hl,a
 636+ D647 DD 7E 08                             ld      a,(ix+8)            ; get type
 637+ D64A 77                                   ld      (hl),a
 638+ D64B 3E 2A                                ld      a,"*"
 639+ D64D DD 77 07     .AddedItem              ld      (ix+7),a
 640+ D650 DD 5E 04                             ld      e,(ix+4)
 641+ D653 DD 56 05                             ld      d,(ix+5)
 642+ D656 CD FE 8E                             call    subDEfromCash
 643+ D659 CD 5D D4                             call    eqip_refesh_buffer
 644+ D65C C9                                   ret
# file closed: ./Menus/equip_ship_menu.asm
1444  D65D                                  DISPLAY "Bank ",BankMenuEquipS," - Bytes free ",/D, $2000 - ($-MenuEquipSAddr), " - BankMenuEquipS"
1445  D65D                                  ASSERT $-MenuEquipSAddr <8912 , Bank code leaks over 8K boundary
1446  D65D              ; Bank 65  ------------------------------------------------------------------------------------------------------------------------
1447  D65D                                  SLOT    LaunchShipAddr
1448  D65D                                  PAGE    BankLaunchShip
1449  D65D                                  ORG     LaunchShipAddr
1450  C000                                  INCLUDE "./Transitions/launch_ship.asm"
# file opened: ./Transitions/launch_ship.asm
   1+ C000 4C 61 75 6E  launchship_page_marker  DB "LaunchShipPG65"
   1+ C004 63 68 53 68
   1+ C008 69 70 50 47
   1+ C00C 36 35
   2+ C00E
   3+ C00E 7E 3F 04 02  launchdraw_table        DB $7E,$3F, $04,$02, $66            ; purple blue
   3+ C012 66
   4+ C013              launchdraw_rowsize      equ $-launchdraw_table
   5+ C013 7C 3E 08 04                          DB $7C,$3E, $08,$04, $66
   5+ C017 66
   6+ C018 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $66
   6+ C01C 66
   7+ C01D 78 3C 10 08                          DB $78,$3C, $10,$08, $66
   7+ C021 66
   8+ C022 76 3B 14 0A                          DB $76,$3B, $14,$0A, $66
   8+ C026 66
   9+ C027 74 3A 18 0C                          DB $74,$3A, $18,$0C, $66
   9+ C02B 66
  10+ C02C 70 38 20 10                          DB $70,$38, $20,$10, $66
  10+ C030 66
  11+ C031 6C 36 28 14                          DB $6C,$36, $28,$14, $05            ; Black Blue
  11+ C035 05
  12+ C036 68 34 30 18                          DB $68,$34, $30,$18, $05
  12+ C03A 05
  13+ C03B 64 32 38 1C                          DB $64,$32, $38,$1C, $05
  13+ C03F 05
  14+ C040 60 30 40 20                          DB $60,$30, $40,$20, $05
  14+ C044 05
  15+ C045 5C 2E 48 24                          DB $5C,$2E, $48,$24, $05            ; Dark Blue
  15+ C049 05
  16+ C04A 58 2C 50 28                          DB $58,$2C, $50,$28, $02
  16+ C04E 02
  17+ C04F 54 2A 58 2C                          DB $54,$2A, $58,$2C, $02
  17+ C053 02
  18+ C054 50 28 60 30                          DB $50,$28, $60,$30, $02
  18+ C058 02
  19+ C059 4C 26 68 34                          DB $4C,$26, $68,$34, $02
  19+ C05D 02
  20+ C05E 46 23 74 3A                          DB $46,$23, $74,$3A, $02
  20+ C062 02
  21+ C063 40 20 80 40                          DB $40,$20, $80,$40, $02
  21+ C067 02
  22+ C068 38 1C 90 48                          DB $38,$1C, $90,$48, $01            ;Very Dark Blue
  22+ C06C 01
  23+ C06D 30 18 A0 50                          DB $30,$18, $A0,$50, $01
  23+ C071 01
  24+ C072 26 13 B4 5A                          DB $26,$13, $B4,$5A, $01
  24+ C076 01
  25+ C077 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $01
  25+ C07B 01
  26+ C07C 10 08 E0 70                          DB $10,$08, $E0,$70, $00            ;Black
  26+ C080 00
  27+ C081 02 01 FC 7E                          DB $02,$01, $FC,$7E, $00
  27+ C085 00
  28+ C086 FF                                   DB $FF
  29+ C087
  30+ C087              launchtablesize         EQU ($ - launchdraw_table)/launchdraw_rowsize
  31+ C087
  32+ C087 7E 3F 04 02  dockingdraw_table       DB $7E,$3F, $04,$02, $00            ; purple blue
  32+ C08B 00
  33+ C08C              dockingdraw_rowsize     equ $-dockingdraw_table
  34+ C08C 7C 3E 08 04                          DB $7C,$3E, $08,$04, $00
  34+ C090 00
  35+ C091 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $00
  35+ C095 00
  36+ C096 78 3C 10 08                          DB $78,$3C, $10,$08, $04
  36+ C09A 04
  37+ C09B 76 3B 14 0A                          DB $76,$3B, $14,$0A, $04
  37+ C09F 04
  38+ C0A0 74 3A 18 0C                          DB $74,$3A, $18,$0C, $04
  38+ C0A4 04
  39+ C0A5 70 38 20 10                          DB $70,$38, $20,$10, $21
  39+ C0A9 21
  40+ C0AA 6C 36 28 14                          DB $6C,$36, $28,$14, $21            ; Black Blue
  40+ C0AE 21
  41+ C0AF 68 34 30 18                          DB $68,$34, $30,$18, $21
  41+ C0B3 21
  42+ C0B4 64 32 38 1C                          DB $64,$32, $38,$1C, $25
  42+ C0B8 25
  43+ C0B9 60 30 40 20                          DB $60,$30, $40,$20, $25
  43+ C0BD 25
  44+ C0BE 5C 2E 48 24                          DB $5C,$2E, $48,$24, $25            ; Dark Blue
  44+ C0C2 25
  45+ C0C3 58 2C 50 28                          DB $58,$2C, $50,$28, $25
  45+ C0C7 25
  46+ C0C8 54 2A 58 2C                          DB $54,$2A, $58,$2C, $25
  46+ C0CC 25
  47+ C0CD 50 28 60 30                          DB $50,$28, $60,$30, $4C
  47+ C0D1 4C
  48+ C0D2 4C 26 68 34                          DB $4C,$26, $68,$34, $4C
  48+ C0D6 4C
  49+ C0D7 46 23 74 3A                          DB $46,$23, $74,$3A, $4C
  49+ C0DB 4C
  50+ C0DC 40 20 80 40                          DB $40,$20, $80,$40, $4C
  50+ C0E0 4C
  51+ C0E1 38 1C 90 48                          DB $38,$1C, $90,$48, $6D            ;Very Dark Blue
  51+ C0E5 6D
  52+ C0E6 30 18 A0 50                          DB $30,$18, $A0,$50, $6D
  52+ C0EA 6D
  53+ C0EB 26 13 B4 5A                          DB $26,$13, $B4,$5A, $6D
  53+ C0EF 6D
  54+ C0F0 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $6D
  54+ C0F4 6D
  55+ C0F5 10 08 E0 70                          DB $10,$08, $E0,$70, $92            ;Black
  55+ C0F9 92
  56+ C0FA 02 01 FC 7E                          DB $02,$01, $FC,$7E, $92
  56+ C0FE 92
  57+ C0FF FF                                   DB $FF
  58+ C100
  59+ C100              dockingtablesize         EQU ($ - dockingdraw_table)/dockingdraw_rowsize
  60+ C100
  61+ C100              init_countdown          EQU $FF
  62+ C100 00           launch_countdown        DB  $0000
  63+ C101 0E C0        launch_table_idx        DW launchdraw_table
  64+ C103 87 C0        docking_table_idx       DW dockingdraw_table
  65+ C105 00           current_offsetX         db 0
  66+ C106 00           current_offsetY         db 0
  67+ C107
  68+ C107
  69+ C107              LaunchTubeEdges         MMUSelectLayer2
  69+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  70+ C10B 01 00 00                             ld      bc,$0000
  71+ C10E 11 92 01                             ld      de,$0192
  72+ C111 78           .drawLoop1              ld      a,b
  73+ C112 FE 80                                cp      128
  74+ C114 28 25                                jr      z,.DoneEdge
  75+ C116 F5                                   push    af
  76+ C117 C5 D5 C5 D5                          push    bc,,de,,bc,,de
  77+ C11B CD 77 E4                             call    l2_draw_horz_dma_bank           ;"bc = left side row,col, d = length, e = color"
  78+ C11E D1 C1                                pop     bc,,de
  79+ C120 3E FF                                ld      a,$FF
  80+ C122 92                                   sub     d
  81+ C123 4F                                   ld      c,a
  82+ C124 0C                                   inc     c
  83+ C125 CD 77 E4                             call    l2_draw_horz_dma_bank
  84+ C128 D1 C1                                pop     bc,,de
  85+ C12A 78                                   ld      a,b
  86+ C12B FE 40                                cp      64
  87+ C12D 30 06                                jr      nc,.ReduceLoop
  88+ C12F 14                                   inc     d
  89+ C130 14                                   inc     d
  90+ C131 F1                                   pop     af
  91+ C132 04                                   inc     b
  92+ C133 18 DC                                jr      .drawLoop1
  93+ C135 15           .ReduceLoop:            dec     d
  94+ C136 15                                   dec     d
  95+ C137 F1                                   pop     af
  96+ C138 04                                   inc     b
  97+ C139 18 D6                                jr      .drawLoop1
  98+ C13B 3E 80        .DoneEdge:              ld      a,$80
  99+ C13D 01 00 00                             ld      bc,$0000                        ; Top Left
 100+ C140 11 FF 80                             ld      de,$80FF                        ; Bottom Right
 101+ C143 CD D2 E9                             call    l2_draw_diagonal
 102+ C146 3E 80                                ld      a,$80
 103+ C148 01 00 80                             ld      bc,$8000                        ; Botom Left
 104+ C14B 11 FF 00                             ld      de,$00FF                        ; Top Right
 105+ C14E CD D2 E9                             call    l2_draw_diagonal
 106+ C151
 107+ C151 01 00 00                             ld      bc,$0000
 108+ C154 11 80 00                             ld      DE,$0080
 109+ C157 26 60                                ld      h,$60
 110+ C159 2E 55                                ld      l,$55
 111+ C15B C9                                   ret
 112+ C15C
 113+ C15C              LaunchConsole:          MMUSelectConsoleBank                    ; Draw Console
 113+ C15C ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 114+ C160 21 00 50                             ld      hl,ScreenL1Bottom
 115+ C163 11 00 E0                             ld      de,ConsoleImageData
 116+ C166 01 00 08                             ld      bc, ScreenL1BottomLen
 117+ C169 CD 5E 7D                             call    memcopy_dma
 118+ C16C 21 00 5A                             ld      hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 119+ C16F 11 00 E8                             ld      de,ConsoleAttributes
 120+ C172 01 00 01                             ld      bc, ScreenL1AttrBtmLen
 121+ C175 CD 5E 7D                             call    memcopy_dma
 122+ C178 C9                                   ret
 123+ C179
 124+ C179              CoriloisStation         equ     13
 125+ C179
 126+ C179
 127+ C179              draw_launch_ship:       MMUSelectLayer1
 127+ C179 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 128+ C17D CD 8F E0                             call    l1_cls
 129+ C180 CD A9 E0                             call    l1_attr_cls
 130+ C183                                      MMUSelectSpriteBank
 130+ C183 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 131+ C187 CD 6E E5                             call    sprite_cls_cursors
 132+ C18A                                      MMUSelectLayer2
 132+ C18A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 133+ C18E CD 04 E0                             call    asm_l2_double_buffer_on
 134+ C191 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 135+ C193 32 38 E1                             ld      (l2_cls_byte),a
 136+ C196 CD 77 E1                             call    l2_set_color_upper2
 137+ C199 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 138+ C19B 32 38 E1                             ld      (l2_cls_byte),a
 139+ C19E CD DE E1                             call    l2_cls_lower_third
 140+ C1A1 CD 07 C1                             call    LaunchTubeEdges
 141+ C1A4 CD 5C C1                             call    LaunchConsole
 142+ C1A7              .NextBuffer:            MMUSelectLayer2
 142+ C1A7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 143+ C1AB CD 97 E2                             call    l2_flip_buffers
 144+ C1AE 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 145+ C1B0 32 38 E1                             ld      (l2_cls_byte),a
 146+ C1B3 CD 77 E1                             call    l2_set_color_upper2
 147+ C1B6 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 148+ C1B8 32 38 E1                             ld      (l2_cls_byte),a
 149+ C1BB CD DE E1                             call    l2_cls_lower_third
 150+ C1BE CD 07 C1                             call    LaunchTubeEdges
 151+ C1C1 CD 5C C1                             call    LaunchConsole
 152+ C1C4 3E FF        .SetUpTimers:           ld      a,init_countdown
 153+ C1C6 32 00 C1                             ld      (launch_countdown),a
 154+ C1C9 21 0E C0                             ld      hl,launchdraw_table
 155+ C1CC 22 01 C1                             ld      (launch_table_idx),hl
 156+ C1CF AF                                   xor     a
 157+ C1D0 32 05 C1                             ld      (current_offsetX),a
 158+ C1D3 32 06 C1                             ld      (current_offsetY),a
 159+ C1D6              .SetupGalaxy:           MaxThrottle
 159+ C1D6 3A 95 7E    >                        ld      a,(SHIPMAXSPEED)
 159+ C1D9 32 96 7E    >                        ld      (DELTA),a
 159+ C1DC 57          >                        ld      d,a
 159+ C1DD 1E 04       >                        ld      e,4
 159+ C1DF ED 30       >                        mul
 159+ C1E1 ED 53 97 7E >                        ld      (DELT4Lo),de
 160+ C1E5                                      ZeroThrottle; DEBUG
 160+ C1E5 AF          >                        xor     a
 160+ C1E6 32 96 7E    >                        ld      (DELTA),a
 160+ C1E9 32 97 7E    >                        ld      (DELT4Lo),a
 160+ C1EC 32 98 7E    >                        ld      (DELT4Lo+1),a
 161+ C1EF              ; To launch we need to set docked flag to transition FE and at teh end of the transition set to FD to rebuild universe
 162+ C1EF 3E FE                                ld      a,StateInTransition
 163+ C1F1 32 5E 80                             ld      (DockedFlag),a
 164+ C1F4 C9                                   ret
 165+ C1F5
 166+ C1F5
 167+ C1F5              draw_docking_ship:      MMUSelectLayer1
 167+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 168+ C1F9 CD 8F E0                             call    l1_cls
 169+ C1FC CD A9 E0                             call    l1_attr_cls
 170+ C1FF                                      MMUSelectSpriteBank
 170+ C1FF ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 171+ C203 CD 6E E5                             call    sprite_cls_cursors
 172+ C206                                      MMUSelectLayer2
 172+ C206 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 173+ C20A CD 04 E0                             call    asm_l2_double_buffer_on
 174+ C20D 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 175+ C20F 32 38 E1                             ld      (l2_cls_byte),a
 176+ C212 CD 77 E1                             call    l2_set_color_upper2
 177+ C215 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 178+ C217 32 38 E1                             ld      (l2_cls_byte),a
 179+ C21A CD DE E1                             call    l2_cls_lower_third
 180+ C21D CD 07 C1                             call    LaunchTubeEdges
 181+ C220 CD 5C C1                             call    LaunchConsole
 182+ C223              .NextBuffer:            MMUSelectLayer2
 182+ C223 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 183+ C227 CD 97 E2                             call    l2_flip_buffers
 184+ C22A 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 185+ C22C 32 38 E1                             ld      (l2_cls_byte),a
 186+ C22F CD 77 E1                             call    l2_set_color_upper2
 187+ C232 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 188+ C234 32 38 E1                             ld      (l2_cls_byte),a
 189+ C237 CD DE E1                             call    l2_cls_lower_third
 190+ C23A CD 07 C1                             call    LaunchTubeEdges
 191+ C23D CD 5C C1                             call    LaunchConsole
 192+ C240 3E FF        .SetUpTimers:           ld      a,init_countdown
 193+ C242 32 00 C1                             ld      (launch_countdown),a
 194+ C245 21 87 C0                             ld      hl,dockingdraw_table
 195+ C248 22 03 C1                             ld      (docking_table_idx),hl
 196+ C24B AF                                   xor     a
 197+ C24C 32 05 C1                             ld      (current_offsetX),a
 198+ C24F 32 06 C1                             ld      (current_offsetY),a
 199+ C252 AF           .SetupGalaxy:           xor     a ; palcehodler as it would cause next macro to fail re initialise all universe banks
 200+ C253                                      ZeroThrottle
 200+ C253 AF          >                        xor     a
 200+ C254 32 96 7E    >                        ld      (DELTA),a
 200+ C257 32 97 7E    >                        ld      (DELT4Lo),a
 200+ C25A 32 98 7E    >                        ld      (DELT4Lo+1),a
 201+ C25D 3E FF                                ld      a,StatePlayerDocked
 202+ C25F 32 5E 80                             ld      (DockedFlag),a ; we don't kill off shipts as we kill them on launch
 203+ C262 C9                                   ret
 204+ C263
 205+ C263 CD 07 C1     loop_launch_ship:       call    LaunchTubeEdges
 206+ C266 3E FF                                ld      a,init_countdown
 207+ C268 32 00 C1                             ld      (launch_countdown),a
 208+ C26B 2A 01 C1                             ld      hl,(launch_table_idx)
 209+ C26E 4E                                   ld      c,(hl)
 210+ C26F 79                                   ld      a,c
 211+ C270 FE FF                                cp      $FF
 212+ C272 28 1E                                jr      z,.FinishedLaunch
 213+ C274 23                                   inc     hl
 214+ C275 46                                   ld      b,(hl)                 ; bc = top left
 215+ C276 23                                   inc     hl
 216+ C277 5E                                   ld      e,(hl)
 217+ C278 23                                   inc     hl
 218+ C279 56                                   ld      d,(hl)                 ;de = width and height
 219+ C27A 23                                   inc     hl
 220+ C27B 7E                                   ld      a,(hl)                 ; a = colour
 221+ C27C 23                                   inc     hl
 222+ C27D 22 01 C1                             ld      (launch_table_idx),hl
 223+ C280 67                                   ld      h,a
 224+ C281 C5 D5                                push    bc,,de
 225+ C283                                      MMUSelectLayer2
 225+ C283 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ C287 CD E9 E3                             call    l2_draw_fill_box        ; ; "l2_draw_fill_box bc=rowcol, de=heightwidth h=color"
 227+ C28A D1 C1                                pop     bc,,de
 228+ C28C 3E 80                                ld      a,$80
 229+ C28E CD F9 E3                             call    l2_draw_box             ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
 230+ C291 C9                                   ret
 231+ C292 3E FD        .FinishedLaunch:        ld      a,StateCompletedLaunch  ; now seed that we need a universe rebuild post launch
 232+ C294 32 5E 80                             ld      (DockedFlag),a
 233+ C297 C9                                   ret
 234+ C298
 235+ C298 CD 07 C1     loop_docking_ship:      call    LaunchTubeEdges
 236+ C29B 3E FF                                ld      a,init_countdown
 237+ C29D 32 00 C1                             ld      (launch_countdown),a
 238+ C2A0 2A 03 C1                             ld      hl,(docking_table_idx)
 239+ C2A3 4E                                   ld      c,(hl)
 240+ C2A4 79                                   ld      a,c
 241+ C2A5 FE FF                                cp      $FF
 242+ C2A7 28 1E                                jr      z,.FinishedDocking
 243+ C2A9 23                                   inc     hl
 244+ C2AA 46                                   ld      b,(hl)                 ; bc = top left
 245+ C2AB 23                                   inc     hl
 246+ C2AC 5E                                   ld      e,(hl)
 247+ C2AD 23                                   inc     hl
 248+ C2AE 56                                   ld      d,(hl)                 ;de = width and height
 249+ C2AF 23                                   inc     hl
 250+ C2B0 7E                                   ld      a,(hl)
 251+ C2B1 23                                   inc     hl
 252+ C2B2 22 03 C1                             ld      (docking_table_idx),hl
 253+ C2B5 67                                   ld      h,a
 254+ C2B6 C5 D5                                push    bc,,de
 255+ C2B8                                      MMUSelectLayer2
 255+ C2B8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ C2BC CD E9 E3                             call    l2_draw_fill_box
 257+ C2BF D1 C1                                pop     bc,,de
 258+ C2C1 3E 80                                ld      a,$80
 259+ C2C3 CD F9 E3                             call    l2_draw_box
 260+ C2C6 C9                                   ret
 261+ C2C7              .FinishedDocking        ForceTransition ScreenStatus              ; Force move to status screen
 261+ C2C7 3E 04       >                        ld      a,ScreenStatus
 261+ C2C9 32 CA 69    >                        ld      (ScreenTransitionForced), a
 262+ C2CC C9                                   ret
 263+ C2CD
 264+ C2CD
 265+ C2CD
# file closed: ./Transitions/launch_ship.asm
1451  C2CD                                  DISPLAY "Bank ",BankLaunchShip," - Bytes free ",/D, $2000 - ($-LaunchShipAddr), " - BankLaunchShip"
1452  C2CD                                  ASSERT $-LaunchShipAddr <8912 , Bank code leaks over 8K boundary
1453  C2CD              ; Bank 70  ------------------------------------------------------------------------------------------------------------------------
1454  C2CD                                  SLOT    UniverseBankAddr
1455  C2CD                                  PAGE    BankUNIVDATA0
1456  C2CD                                  ORG	    UniverseBankAddr,BankUNIVDATA0
1457  C000                                  INCLUDE "./Universe/Ships/univ_ship_data.asm"
# file opened: ./Universe/Ships/univ_ship_data.asm
   1+ C000              ;    DEFINE DEBUGMISSILELAUNCH 1
   2+ C000              ;    DEFINE PLOTPOINTSONLY 1
   3+ C000              ;   DEFINE OVERLAYNODES 1
   4+ C000              ; In  flight ship data tables
   5+ C000              ; In  flight ship data tables
   6+ C000              ; There can be upto &12 objects in flight.
   7+ C000              ; To avoid hassle of memory heap managment, the free list
   8+ C000              ; will correspond to a memory bank offset so data will be held in
   9+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
  10+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
  11+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  12+ C000              ; This means each gets its own line list, inwork etc
  13+ C000
  14+ C000              ; "Runtime Ship Data paged into in Bank 7"
  15+ C000              ;                       1234567890123456
  16+ C000 55 6E 69 76  StartOfUniv:        DB "Universe PG"
  16+ C004 65 72 73 65
  16+ C008 20 50 47
  17+ C00B 58           StartOfUnivN:       DB "X"
  18+ C00C 00 00        StartOfUnivPad:     DS 2
  19+ C00E 00           StartOfUnivM:       DB 0
  20+ C00F 00           StartOfUnivT        DB 0
  21+ C010 00 00 00...  StartOfUnivName     DS 16
  22+ C020              ; NOTE we can cheat and pre allocate segs just using a DS for now
  23+ C020
  24+ C020              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  25+ C020              ; Universe map substibute for INWK
  26+ C020              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  27+ C020                                     INCLUDE "./Universe/Ships/AIRuntimeData.asm"
# file opened: ././Universe/Ships/AIRuntimeData.asm
   1++C020              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C020              ;--NOTE POSTITION AND MATRIX are loaded by a single LDIR in cases so must be contiguous
   3++C020              StartOfShipRuntimeData      EQU $
   4++C020 00           UBnKxlo                     DB  0                       ; INWK+0
   5++C021 00           UBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   6++C022 00           UBnKxsgn                    DB  0                       ; INWK+2
   7++C023 00           UBnKylo                     DB  0                       ; INWK+3 \ ylo
   8++C024 00           UBnKyhi                     DB  0                       ; INWK+4 \ yHi
   9++C025 00           UBnKysgn                    DB  0                       ; INWK +5
  10++C026 00           UBnKzlo                     DB  0                       ; INWK +6
  11++C027 00           UBnKzhi                     DB  0                       ; INWK +7
  12++C028 00           UBnKzsgn                    DB  0                       ; INWK +8
  13++C029              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
  14++C029              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
  15++C029              ; Note they seem to have to be after camera position not quite found why yet, can only assume it does an iy or ix indexed copy? Bu oddly does not affect space station.
  16++C029 00 00        UBnkrotmatSidevX            DW  0                       ; INWK +21
  17++C02B              UBnkrotmatSidev             equ UBnkrotmatSidevX
  18++C02B 00 00        UBnkrotmatSidevY            DW  0                       ; INWK +23
  19++C02D 00 00        UBnkrotmatSidevZ            DW  0                       ; INWK +25
  20++C02F 00 00        UBnkrotmatRoofvX            DW  0                       ; INWK +15
  21++C031              UBnkrotmatRoofv             equ UBnkrotmatRoofvX
  22++C031 00 00        UBnkrotmatRoofvY            DW  0                       ; INWK +17
  23++C033 00 00        UBnkrotmatRoofvZ            DW  0                       ; INWK +19
  24++C035 00 00        UBnkrotmatNosevX            DW  0                       ; INWK +9
  25++C037              UBnkrotmatNosev             EQU UBnkrotmatNosevX
  26++C037 00 00        UBnkrotmatNosevY            DW  0                       ; INWK +11
  27++C039 00 00        UBnkrotmatNosevZ            DW  0                       ; INWK +13
  28++C03B              ; -- Note these must be here for initialise blast as it does a 12 byte ldir
  29++C03B              ; . Note missile explosion will have to have logic to cause linger if a blast is to be enqued
  30++C03B 00           UBnKMissileBlastRange:      DB  0                       ; copied in when setting up a missile
  31++C03C 00           UBnKMissileBlastDamage:     DB  0                       ; copied in when setting up a missile
  32++C03D 00           UBnKMissileDetonateRange:   DB  0                       ; copied in when setting up a missile, allows for proximity missiles
  33++C03E 00           UBnKMissileDetonateDamage:  DB  0                       ; copied in when setting up a missile
  34++C03F              ; -- Metadata for ship to help with bank managment
  35++C03F              UBnKStartOfRuntimeData:
  36++C03F 00           UBnKSlotNumber              DB  0
  37++C040 00           UbnKShipUnivBankNbr         DB  0                       ; Present ship universe bank number
  38++C041 00           UBnkShipModelBank           DB  0                       ; Bank nbr ship was from
  39++C042 00           UBnKShipModelNbr            DB  0                       ; Ship Id with in the bank
  40++C043 00           UBnKShipModelId             DB  0                       ; Absolute ship id
  41++C044              ; -- Ship AI data
  42++C044 00           UBnKMissleHitToProcess      DB  0                       ; This is used for enquing missle blasts as we can only do one missile at a time, could make it multi but neeed to smooth CPU usage
  43++C045 00           UBnKMissileTarget           DB  0                       ; This is the ship slot number for the target from 0 to n if the missile is not hostile to us, if the target is $FF then its us
  44++C046 00           UBnKSpeed                   DB  0                       ; INWK +27
  45++C047 00           UBnKAccel                   DB  0                       ; INWK +28
  46++C048 00           UBnKRotXCounter             DB  0                       ; INWK +29
  47++C049 00           UBnKRotZCounter             DB  0                       ; INWK +30
  48++C04A 00           UBnKRAT                     DB  0                       ; temporary for rotation magnitude or roll counter, for debugging state
  49++C04B 00           UBnKRAT2                    DB  0                       ; temporary for rotation threshold
  50++C04C 00           UBnKCNT                     DB  0                       ; temp for calculating roll and pitch
  51++C04D 00           UBnKCNT2                    DB  0                       ; roll threshold, max angle boynd ship will slow down
  52++C04E 00           univRAT                     DB  0               ; 99
  53++C04F 00           univRAT2                    DB  0               ; 9A
  54++C050 00           univRAT2Val                 DB  0               ; 9A
  55++C051 00           UBnKexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
  56++C052 00           UBnkDrawAllFaces            DB  0
  57++C053 00           UBnKShipAggression          DB  0                       ; calculated agression factor
  58++C054 00           UBnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
  59++C055 00           UBnKSpawnObject             DB  0
  60++C056 00           UBnkCam0yLo                 DB  0                       ; INWK +33 ????
  61++C057 00           UBnkCam0yHi                 DB  0                       ; INWK +34?????
  62++C058 00           UBnKEnergy                  DB  0                       ; INWK +35
  63++C059 00           UBnKECMCountDown            DB  0                       ; counts down ECM usage if activated reducing energy too in update loop
  64++C05A 00           UBnKECMFitted               DB  0                       ; Does ship have ECM, true false
  65++C05B 00           UBnKLaserPower              DB  0                       ; Type of laser fitted
  66++C05C 00           UBnKMissilesLeft            DB  0
  67++C05D 00           UBnKFighterShipId           DB  0                       ; computed ship Id for any carriers
  68++C05E 00           UBnKFightersLeft            DB  0                       ; the number of ships left in hanger, 255 = infinite
  69++C05F 00           UBnKCloudCounter            DB  0                       ; cloud pixels
  70++C060 00           UBnKCloudRadius             DB  0                       ; cloud pixels
  71++C061              UBnKRuntimeSize             EQU $-UBnKStartOfRuntimeData
  72++C061              ; Flags work as follows:
  73++C061              ; UBnKSpawnObject - signals on death to spawn cargo items
  74++C061              ; 0 -                   Spawn Cargo 1
  75++C061              ; 1 -                   Spawn Cargo 2
  76++C061              ; 2 -                   Spawn Cargo 3
  77++C061              ; 3 -                   Spawn Cargo 4
  78++C061              ; 4 -                   Spawn Alloy 1
  79++C061              ; 5 -                   Spawn Alloy 2
  80++C061              ; 6 -                   Spawn Alloy 3
  81++C061              ; 7 -                   Spawn Alloy 4
  82++C061
  83++C061              ; UBnkaiatkecm
  84++C061              ; Bit	                Description
  85++C061              ; 7 -                   AI Enabled Flag
  86++C061              ; 6 -                   Ship Visible = ShipOnScreen/NotCloaked (cleared or set by check visible or cloaking override)
  87++C061              ; 5 -                   Ship is exploding if set, note if its a missile and one already equeued this will have to linger
  88++C061              ;                       linger can be done by not erasing ship unit missile equeue handled
  89++C061              ; 4 -                   Ship marked as exploded, cleared once aknowledged then bit 5 takes over and UBnKCloudCounter
  90++C061              ; 3 -                   Display state - Plot as a Dot
  91++C061              ; 2 -                   Nbr of Missiles bit 2
  92++C061              ; 1 -                   Nbr of Missiles bit 1
  93++C061              ; 0 -                   ECM present flag
  94++C061              ; ShipNewBitsAddr (in blueprint)
  95++C061              ;Bit	                Description
  96++C061              ;#0	Trader flag         * 0 = not a trader  * 1 = trader
  97++C061              ;                       80% of traders are peaceful and mind their own business plying their trade between the planet and space station, but 20% of them moonlight as bounty hunters (see bit #1)
  98++C061              ;                       Ships that are traders: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  99++C061              ;#1 Bounty hunter flag  * 0 = not a bounty hunter* 1 = bounty hunter
 100++C061              ;                       If we are a fugitive or a serious offender and we bump into a bounty hunter, they will become hostile and attack us (see bit #2)
 101++C061              ;                       Ships that are bounty hunters: Viper, Fer-de-lance
 102++C061              ;#2	Hostile flag        * 0 = not hostile  * 1 = hostile
 103++C061              ;                       Hostile ships will attack us on sight; there are quite a few of them
 104++C061              ;                       Ships that are hostile: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Worm, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid, Thargon, Constrictor
 105++C061              ;#3	Pirate flag         * 0 = not a pirate * 1 = pirate
 106++C061              ;                       Hostile pirates will attack us on sight, but once we get inside the space station safe zone, they will stop
 107++C061              ;                       Ships that are pirates: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid
 108++C061              ;#4	Docking flag        * 0 = not docking * 1 = docking
 109++C061              ;                       Traders with their docking flag set fly towards the space station to try to dock, otherwise they aim for the planet
 110++C061              ;                       This flag is randomly set for traders when they are spawned
 111++C061              ;                       Ships that can be docking: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
 112++C061              ;#5	Innocent bystander  * 0 = normal * 1 = innocent bystander
 113++C061              ;                       If we attack an innocent ship within the space station safe zone, then the station will get angry with us and start spawning cops
 114++C061              ;                       Ships that are innocent bystanders: Shuttle, Transporter, Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Cougar
 115++C061              ;#6	Cop flag            * 0 = not a cop * 1 = cop
 116++C061              ;                       If we destroy a cop, then we instantly become a fugitive (the Transporter isn't actually a cop, but it's clearly under police protection)
 117++C061              ;                       Ships that are cops: Viper, Transporter
 118++C061              ;#7	Scooped, docked, escape pod flag
 119++C061              ;                       For spawned ships, this flag indicates that the ship been scooped or has docked (bit 7 is always clear on spawning)
 120++C061              ;                       For blueprints, this flag indicates whether the ship type has an escape pod fitted, so it can launch it when in dire straits
 121++C061              ;                       Ships that have escape pods: Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Viper, Mamba, Krait, Adder, Cobra Mk I, Cobra Mk III (pirate), Asp Mk II, Python (pirate), Fer-de-lance
 122++C061
# file closed: ././Universe/Ships/AIRuntimeData.asm
  28+ C061              ; moved to runtime asm
  29+ C061              ;                        INCLUDE "./Universe/Ships/ShipPosVars.asm"
  30+ C061              ;                        INCLUDE "./Universe/Ships/RotationMatrixVars.asm"
  31+ C061
  32+ C061              ; Orientation Matrix [nosev x y z ] nose vector ( forward) 19 to 26
  33+ C061              ;                    [roofv x y z ] roof vector (up)
  34+ C061              ;                    [sidev x y z ] side vector (right)
  35+ C061              ;;rotXCounter                 equ UBnkrotXCounter         ; INWK +29
  36+ C061              ;;rotZCounter                 equ UBnkrotZCounter         ; INWK +30UBnkDrawCam0xLo   DB  0               ; XX18+0
  37+ C061
  38+ C061
  39+ C061                                      INCLUDE "./Universe/Ships/XX16Vars.asm"
# file opened: ././Universe/Ships/XX16Vars.asm
   1++C061              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C061 00 00        UBnkTransmatSidevX          DW  0               ; XX16+0
   3++C063              UBnkTransmatSidev           EQU UBnkTransmatSidevX
   4++C063 00 00        UBnkTransmatSidevY          DW 0                ; XX16+2
   5++C065 00 00        UBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C067 00 00        UBnkTransmatRoofvX          DW 0
   7++C069              UBnkTransmatRoofv           EQU UBnkTransmatRoofvX
   8++C069 00 00        UBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C06B 00 00        UBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C06D 00 00        UBnkTransmatNosevX          DW 0
  11++C06F              UBnkTransmatNosev           EQU UBnkTransmatNosevX
  12++C06F 00 00        UBnkTransmatNosevY          DW 0                ; XX16+2
  13++C071 00 00        UBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C073 00 00        UbnkTransmatTransX          DW 0
  15++C075 00 00        UbnkTransmatTransY          DW 0
  16++C077 00 00        UbnkTransmatTransZ          DW 0
  17++C079              XX16                        equ UBnkTransmatSidev
  18++C079              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C079 00 00        UbnkTransInvRow0x0          DW 0
  20++C07B 00 00        UbnkTransInvRow0x1          DW 0
  21++C07D 00 00        UbnkTransInvRow0x2          DW 0
  22++C07F 00 00        UbnkTransInvRow0x3          DW 0
  23++C081 00 00        UbnkTransInvRow1y0          DW 0
  24++C083 00 00        UbnkTransInvRow1y1          DW 0
  25++C085 00 00        UbnkTransInvRow1y2          DW 0
  26++C087 00 00        UbnkTransInvRow1y3          DW 0
  27++C089 00 00        UbnkTransInvRow2z0          DW 0
  28++C08B 00 00        UbnkTransInvRow2z1          DW 0
  29++C08D 00 00        UbnkTransInvRow2z2          DW 0
  30++C08F 00 00        UbnkTransInvRow2z3          DW 0
  31++C091
  32++C091              XX16Inv             equ UbnkTransInvRow0x0
  33++C091
# file closed: ././Universe/Ships/XX16Vars.asm
  40+ C091                                      INCLUDE "./Universe/Ships/XX25Vars.asm"
# file opened: ././Universe/Ships/XX25Vars.asm
   1++C091              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C091 00           UbnkProjxLo                 DB  0
   3++C092 00           UbnkProjxHi                 DB  0
   4++C093 00           UbnkProjxSgn                DB  0
   5++C094              UbnkProjx                   EQU UbnkProjxLo
   6++C094 00           UbnkProjyLo                 DB  0
   7++C095 00           UbnkProjyHi                 DB  0
   8++C096 00           UbnkProjySgn                DB  0
   9++C097              UbnkProjy                   EQU UbnkProjyLo
  10++C097 00           UbnkProjzLo                 DB  0
  11++C098 00           UbnkProjzHi                 DB  0
  12++C099 00           UbnkProjzSgn                DB  0
  13++C09A              UbnkProjz                   EQU UbnkProjzLo
  14++C09A              XX25                        EQU UbnkProjxLo
  15++C09A
# file closed: ././Universe/Ships/XX25Vars.asm
  41+ C09A                                      INCLUDE "./Universe/Ships/XX18Vars.asm"
# file opened: ././Universe/Ships/XX18Vars.asm
   1++C09A              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C09A 00           UBnkDrawCam0xLo             DB  0               ; XX18+0
   3++C09B 00           UBnkDrawCam0xHi             DB  0               ; XX18+1
   4++C09C 00           UBnkDrawCam0xSgn            DB  0               ; XX18+2
   5++C09D              UBnkDrawCam0x               equ UBnkDrawCam0xLo
   6++C09D 00           UBnkDrawCam0yLo             DB  0               ; XX18+3
   7++C09E 00           UBnkDrawCam0yHi             DB  0               ; XX18+4
   8++C09F 00           UBnkDrawCam0ySgn            DB  0               ; XX18+5
   9++C0A0              UBnkDrawCam0y               equ UBnkDrawCam0yLo
  10++C0A0 00           UBnkDrawCam0zLo             DB  0               ; XX18+6
  11++C0A1 00           UBnkDrawCam0zHi             DB  0               ; XX18+7
  12++C0A2 00           UBnkDrawCam0zSgn            DB  0               ; XX18+8
  13++C0A3              UBnkDrawCam0z               equ UBnkDrawCam0zLo
  14++C0A3              XX18                        equ UBnkDrawCam0xLo
  15++C0A3
# file closed: ././Universe/Ships/XX18Vars.asm
  42+ C0A3
  43+ C0A3              ; Used to make 16 bit reads a little cleaner in source code
  44+ C0A3 00 00 00     UbnkZPoint                  DS  3
  45+ C0A6              UbnkZPointLo                equ UbnkZPoint
  46+ C0A6              UbnkZPointHi                equ UbnkZPoint+1
  47+ C0A6              UbnkZPointSign              equ UbnkZPoint+2
  48+ C0A6                                      INCLUDE "./Universe/Ships/XX15Vars.asm"
# file opened: ././Universe/Ships/XX15Vars.asm
   1++C0A6              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C0A6 00           UBnkXScaled                 DB  0               ; XX15+0Xscaled
   3++C0A7 00           UBnkXScaledSign             DB  0               ; XX15+1xsign
   4++C0A8 00           UBnkYScaled                 DB  0               ; XX15+2yscaled
   5++C0A9 00           UBnkYScaledSign             DB  0               ; XX15+3ysign
   6++C0AA 00           UBnkZScaled                 DB  0               ; XX15+4zscaled
   7++C0AB 00           UBnkZScaledSign             DB  0               ; XX15+5zsign
   8++C0AC
   9++C0AC              XX15                        equ UBnkXScaled
  10++C0AC              XX15VecX                    equ XX15
  11++C0AC              XX15VecY                    equ XX15+1
  12++C0AC              XX15VecZ                    equ XX15+2
  13++C0AC              UbnkXPoint                  equ XX15
  14++C0AC              UbnkXPointLo                equ XX15+0
  15++C0AC              UbnkXPointHi                equ XX15+1
  16++C0AC              UbnkXPointSign              equ XX15+2
  17++C0AC              UbnkYPoint                  equ XX15+3
  18++C0AC              UbnkYPointLo                equ XX15+3
  19++C0AC              UbnkYPointHi                equ XX15+4
  20++C0AC              UbnkYPointSign              equ XX15+5
  21++C0AC              ; Repurposed XX15 pre clip plines
  22++C0AC              UbnkPreClipX1               equ XX15+0
  23++C0AC              UbnkPreClipY1               equ XX15+2
  24++C0AC              UbnkPreClipX2               equ XX15+4
  25++C0AC              UbnkPreClipY2               equ XX15+6
  26++C0AC              ; Repurposed XX15 post clip lines
  27++C0AC              UBnkNewX1                   equ XX15+0
  28++C0AC              UBnkNewY1                   equ XX15+1
  29++C0AC              UBnkNewX2                   equ XX15+2
  30++C0AC              UBnkNewY2                   equ XX15+3
  31++C0AC              ; Repurposed XX15
  32++C0AC              regXX15fx                   equ UBnkXScaled
  33++C0AC              regXX15fxSgn                equ UBnkXScaledSign
  34++C0AC              regXX15fy                   equ UBnkYScaled
  35++C0AC              regXX15fySgn                equ UBnkYScaledSign
  36++C0AC              regXX15fz                   equ UBnkZScaled
  37++C0AC              regXX15fzSgn                equ UBnkZScaledSign
  38++C0AC              ; Repurposed XX15
  39++C0AC              varX1                       equ UBnkXScaled       ; Reused, verify correct position
  40++C0AC              varY1                       equ UBnkXScaledSign   ; Reused, verify correct position
  41++C0AC              varZ1                       equ UBnkYScaled       ; Reused, verify correct position
  42++C0AC              ; After clipping the coords are two 8 bit pairs
  43++C0AC              UBnkPoint1Clipped           equ UBnkXScaled
  44++C0AC              UBnkPoint2Clipped           equ UBnkYScaled
  45++C0AC              ; Repurposed XX15 when plotting lines
  46++C0AC              ; Repurposed XX15 before calling clip routine
  47++C0AC              UBnkX1                      equ XX15
  48++C0AC              UBnKx1Lo                    equ XX15
  49++C0AC              UBnKx1Hi                    equ XX15+1
  50++C0AC              UBnkY1                      equ XX15+2
  51++C0AC              UbnKy1Lo                    equ XX15+2
  52++C0AC              UBnkY1Hi                    equ XX15+3
  53++C0AC              UBnkX2                      equ XX15+4
  54++C0AC              UBnkX2Lo                    equ XX15+4
  55++C0AC              UBnkX2Hi                    equ XX15+5
  56++C0AC
# file closed: ././Universe/Ships/XX15Vars.asm
  49+ C0AC                                      INCLUDE "./Universe/Ships/XX12Vars.asm"
# file opened: ././Universe/Ships/XX12Vars.asm
   1++C0AC              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C0AC              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C0AC 00           UBnkXX12xLo                 DB  0               ; XX12+0
   4++C0AD 00           UBnkXX12xSign               DB  0               ; XX12+1
   5++C0AE 00           UBnkXX12yLo                 DB  0               ; XX12+2
   6++C0AF 00           UBnkXX12ySign               DB  0               ; XX12+3
   7++C0B0 00           UBnkXX12zLo                 DB  0               ; XX12+4
   8++C0B1 00           UBnkXX12zSign               DB  0               ; XX12+5
   9++C0B2 00 00 00...  XX12Save                    DS  6
  10++C0B8 00 00 00...  XX12Save2                   DS  6
  11++C0BE              XX12                        equ UBnkXX12xLo
  12++C0BE              varXX12                     equ UBnkXX12xLo
  13++C0BE              ; Repurposed XX12 when plotting lines
  14++C0BE              UBnkY2                      equ XX12+0
  15++C0BE              UbnKy2Lo                    equ XX12+0
  16++C0BE              UBnkY2Hi                    equ XX12+1
  17++C0BE              UBnkDeltaXLo                equ XX12+2
  18++C0BE              UBnkDeltaXHi                equ XX12+3
  19++C0BE              UBnkDeltaYLo                equ XX12+4
  20++C0BE              UBnkDeltaYHi                equ XX12+5
  21++C0BE              UbnkGradient                equ XX12+2
  22++C0BE              UBnkTemp1                   equ XX12+2
  23++C0BE              UBnkTemp1Lo                 equ XX12+2
  24++C0BE              UBnkTemp1Hi                 equ XX12+3
  25++C0BE              UBnkTemp2                   equ XX12+3
  26++C0BE              UBnkTemp2Lo                 equ XX12+3
  27++C0BE              UBnkTemp2Hi                 equ XX12+4
  28++C0BE
# file closed: ././Universe/Ships/XX12Vars.asm
  50+ C0BE
  51+ C0BE
  52+ C0BE              ; Post clipping the results are now 8 bit
  53+ C0BE 00           UBnkVisibility              DB  0               ; replaces general purpose xx4 in rendering
  54+ C0BF 00           UBnkProjectedY              DB  0
  55+ C0C0 00           UBnkProjectedX              DB  0
  56+ C0C1              UBnkProjected               equ UBnkProjectedY  ; resultant projected position
  57+ C0C1 00 00 00...  XX15Save                    DS  8
  58+ C0C9 00 00 00...  XX15Save2                   DS  8
  59+ C0D1 00           VarBackface                 DB 0
  60+ C0D2              ; Heap (or array) information for lines and normals
  61+ C0D2              ; Coords are stored XY,XY,XY,XY
  62+ C0D2              ; Normals
  63+ C0D2              ; This needs re-oprganising now.
  64+ C0D2              ; Runtime Calculation Store
  65+ C0D2
  66+ C0D2              FaceArraySize               equ 30
  67+ C0D2              EdgeHeapSize                equ 40
  68+ C0D2              NodeArraySize               equ 40
  69+ C0D2              LineArraySize               equ 50; incerased for max of 28 lines, of 4 points of 16 bits each
  70+ C0D2              ; ONLY IF TESTING SOLID FILL TraingleArraySize           equ 25
  71+ C0D2              ; Storage arrays for data
  72+ C0D2              ; Structure of arrays
  73+ C0D2              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
  74+ C0D2              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
  75+ C0D2              ; NodeArray         -  4 bytes per element      0           1            2          3
  76+ C0D2              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
  77+ C0D2              ; Line Array        -  4 bytes per eleement     0           1            2          3
  78+ C0D2              ;                                               X1          Y1           X2         Y2
  79+ C0D2 00 00 00...  UbnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
  80+ C0F0              ; Node array holds the projected to screen position regardless of if its clipped or not
  81+ C0F0              ; When we use traingles we can cheat a bit on clipping as all lines will be horizontal so clipping is much simplified
  82+ C0F0 00 00 00...  UBnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  83+ C190 00 00 00...  UBnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  84+ C230 00 00 00...  UbnkLineArray               DS LineArraySize * 8        ; XX19 Holds the clipped line details
  85+ C3C0              ; ONLY IF TESTING SOLID FILL UBnkTriangleOverspill       DS TraingleArraySize * 4    ; jsut a padding for testing
  86+ C3C0              UBnkLinesHeapMax            EQU $ - UbnkLineArray
  87+ C3C0              UBnkTraingleArray           EQU UbnkLineArray           ; We can use the line array as we draw lines or traingles
  88+ C3C0 00 00 00...  UbnkEdgeProcessedList DS EdgeHeapSize
  89+ C3E8              ; Array current Lengths
  90+ C3E8 00           UbnkFaceVisArrayLen         DS 1
  91+ C3E9 00           UBnkNodeArrayLen            DS 1
  92+ C3EA 00           UbnkLineArrayLen            DS 1                        ; total number of lines loaded to array
  93+ C3EB 00           UbnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
  94+ C3EC              XX20                        equ UbnkLineArrayLen
  95+ C3EC              varXX20                     equ UbnkLineArrayLen
  96+ C3EC
  97+ C3EC 00           UbnkEdgeHeapSize            DS 1
  98+ C3ED 00           UbnkEdgeHeapBytes           DS 1
  99+ C3EE 00           UBnkLinesHeapLen            DS 1
 100+ C3EF 00           UbnKEdgeHeapCounter         DS 1
 101+ C3F0 00           UbnKEdgeRadius              DS 1
 102+ C3F1 00           UbnKEdgeShipType            DS 1
 103+ C3F2 00           UbnKEdgeExplosionType       DS 1
 104+ C3F3
 105+ C3F3              ; Node heap is used to write out transformed Vertexs
 106+ C3F3
 107+ C3F3              ; Lines
 108+ C3F3 00 00 00     UBnkXX19                    DS  3
 109+ C3F6
 110+ C3F6 00 00 00...  UBnkHullCopy                DS  ShipDataLength
 111+ C411              ScoopDebrisAddr             equ UBnkHullCopy + ScoopDebrisOffset
 112+ C411              MissileLockLoAddr           equ UBnkHullCopy + MissileLockLoOffset
 113+ C411              MissileLockHiAddr           equ UBnkHullCopy + MissileLockHiOffset
 114+ C411              EdgeAddyAddr                equ UBnkHullCopy + EdgeAddyOffset
 115+ C411              LineX4Addr                  equ UBnkHullCopy + LineX4Offset
 116+ C411              GunVertexAddr               equ UBnkHullCopy + GunVertexOffset
 117+ C411              ExplosionCtAddr             equ UBnkHullCopy + ExplosionCtOffset
 118+ C411              VertexCountAddr             equ UBnkHullCopy + VertexCountOffset
 119+ C411              VertexCtX6Addr              equ UBnkHullCopy + VertexCtX6Offset
 120+ C411              EdgeCountAddr               equ UBnkHullCopy + EdgeCountOffset
 121+ C411              BountyLoAddr                equ UBnkHullCopy + BountyLoOffset
 122+ C411              BountyHiAddr                equ UBnkHullCopy + BountyHiOffset
 123+ C411              FaceCtX4Addr                equ UBnkHullCopy + FaceCtX4Offset
 124+ C411              DotAddr                     equ UBnkHullCopy + DotOffset
 125+ C411              EnergyAddr                  equ UBnkHullCopy + EnergyOffset
 126+ C411              SpeedAddr                   equ UBnkHullCopy + SpeedOffset
 127+ C411              FaceAddyAddr                equ UBnkHullCopy + FaceAddyOffset
 128+ C411              QAddr                       equ UBnkHullCopy + QOffset
 129+ C411              LaserAddr                   equ UBnkHullCopy + LaserOffset
 130+ C411              VerticesAddyAddr            equ UBnkHullCopy + VerticiesAddyOffset
 131+ C411              ShipTypeAddr                equ UBnkHullCopy + ShipTypeOffset
 132+ C411              ShipNewBitsAddr             equ UBnkHullCopy + ShipNewBitsOffset
 133+ C411              ShipAIFlagsAddr             equ UBnkHullCopy + ShipAIFlagsOffset
 134+ C411              ShipECMFittedChanceAddr     equ UBnkHullCopy + ShipECMFittedChanceOffset
 135+ C411              ShipSolidFlagAddr           equ UBnkHullCopy + ShipSolidFlagOffset
 136+ C411              ShipSolidFillAddr           equ UBnkHullCopy + ShipSolidFillOffset
 137+ C411              ShipSolidLenAddr            equ UBnkHullCopy + ShipSolidLenOffset
 138+ C411              ; Static Ship Data. This is copied in when creating the universe object
 139+ C411              XX0                         equ UBnkHullCopy        ; general hull index pointer TODO find biggest ship design
 140+ C411
 141+ C411 00 00 00...  UBnkHullVerticies           DS  40 * 6              ; largetst is trasnport type 10 at 37 vericies so alows for 40 * 6 Bytes  =
 142+ C501 00 00 00...  UBnkHullEdges               DS  50 * 4              ; ype 10 is 46 edges so allow 50
 143+ C5C9 00 00 00...  UBnkHullNormals             DS  20 * 4              ; type 10 is 14 edges so 20 to be safe
 144+ C619                  IFDEF SOLIDHULLTEST
 145+ C619 ~            UBnkHullSolid               DS  100 * 4             ; Up to 100 triangles (May optimise so only loads non hidden faces later
 146+ C619                  ENDIF
 147+ C619 0C           OrthagCountdown             DB  12
 148+ C61A
 149+ C61A              UBnkShipCopy                equ UBnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 150+ C61A              UBnk_Data_len               EQU $ - StartOfUniv
 151+ C61A
 152+ C61A
 153+ C61A              ZeroUnivPitch:          MACRO
 154+ C61A ~                                    xor     a
 155+ C61A ~                                    ld      (UBnKRotZCounter),a
 156+ C61A                                      ENDM
 157+ C61A
 158+ C61A              ZeroUnivRoll:           MACRO
 159+ C61A ~                                    xor     a
 160+ C61A ~                                    ld      (UBnKRotXCounter),a
 161+ C61A                                      ENDM
 162+ C61A
 163+ C61A              ZeroUnivPitchAndRoll:   MACRO
 164+ C61A ~                                    xor     a
 165+ C61A ~                                    ld      (UBnKRotXCounter),a
 166+ C61A ~                                    ld      (UBnKRotZCounter),a
 167+ C61A                                      ENDM
 168+ C61A
 169+ C61A
 170+ C61A              MaxUnivPitchAndRoll:    MACRO
 171+ C61A ~                                    ld      a,127
 172+ C61A ~                                    ld      (UBnKRotXCounter),a
 173+ C61A ~                                    ld      (UBnKRotZCounter),a
 174+ C61A                                      ENDM
 175+ C61A
 176+ C61A              InfinitePitch:          MACRO
 177+ C61A ~                                    ld      a,$FF
 178+ C61A ~                                    ld      (UBnKRotZCounter),a
 179+ C61A                                      ENDM
 180+ C61A
 181+ C61A              InfiniteRoll:           MACRO
 182+ C61A ~                                    ld      a,$FF
 183+ C61A ~                                    ld      (UBnKRotXCounter),a
 184+ C61A                                      ENDM
 185+ C61A
 186+ C61A              InfinitePitchAndRoll:    MACRO
 187+ C61A ~                                    ld      a,$FF
 188+ C61A ~                                    ld      (UBnKRotXCounter),a
 189+ C61A ~                                    ld      (UBnKRotZCounter),a
 190+ C61A                                      ENDM
 191+ C61A
 192+ C61A              RandomUnivPitchAndRoll: MACRO
 193+ C61A ~                                    call    doRandom
 194+ C61A ~                                    or      %01101111
 195+ C61A ~                                    ld      (UBnKRotXCounter),a
 196+ C61A ~                                    call    doRandom
 197+ C61A ~                                    or      %01101111
 198+ C61A ~                                    ld      (UBnKRotZCounter),a
 199+ C61A                                      ENDM
 200+ C61A
 201+ C61A              RandomUnivSpeed:        MACRO
 202+ C61A ~                                    call    doRandom
 203+ C61A ~                                    and     31
 204+ C61A ~                                    ld      (UBnKSpeed),a
 205+ C61A                                      ENDM
 206+ C61A
 207+ C61A              MaxUnivSpeed:           MACRO
 208+ C61A ~                                    ld      a,31
 209+ C61A ~                                    ld      (UBnKSpeed),a
 210+ C61A                                      ENDM
 211+ C61A
 212+ C61A              ZeroUnivAccelleration:  MACRO
 213+ C61A ~                                    xor     a
 214+ C61A ~                                    ld      (UBnKAccel),a
 215+ C61A                                      ENDM
 216+ C61A
 217+ C61A 3A 0E C4     SetShipHostile:         ld      a,(ShipNewBitsAddr)
 218+ C61D F6 04                                or      ShipIsHostile
 219+ C61F 32 0E C4                             ld      (ShipNewBitsAddr),a
 220+ C622 C9                                   ret
 221+ C623
 222+ C623 3A 0E C4     ClearShipHostile:       ld      a,(ShipNewBitsAddr)
 223+ C626 E6 FB                                and     ShipNotHostile
 224+ C628 32 0E C4                             ld      (ShipNewBitsAddr),a
 225+ C62B C9                                   ret
 226+ C62C
 227+ C62C
 228+ C62C              ; --------------------------------------------------------------
 229+ C62C 21 00 C0     ResetUBnkData:          ld      hl,StartOfUniv
 230+ C62F 11 1A 06                             ld      de,UBnk_Data_len
 231+ C632 AF                                   xor     a
 232+ C633 CD 38 7D                             call    memfill_dma
 233+ C636 C9                                   ret
 234+ C637              ; --------------------------------------------------------------
 235+ C637 21 20 C0     ResetUbnkPosition:      ld      hl,UBnKxlo
 236+ C63A 06 09                                ld      b, 3*3
 237+ C63C AF                                   xor     a
 238+ C63D 77           .zeroLoop:              ld      (hl),a
 239+ C63E 23                                   inc     hl
 240+ C63F 10 FC                                djnz    .zeroLoop
 241+ C641 C9                                   ret
 242+ C642
 243+ C642 3E 80        FireECM:                ld      a,ECMCounterMax                 ; set ECM time
 244+ C644 32 59 C0                             ld      (UBnKECMCountDown),a            ;
 245+ C647 3A B1 7D                             ld      a,(ECMCountDown)
 246+ C64A                                      ReturnIfALTNusng ECMCounterMax
 246+ C64A FE 80       >                        cp    ECMCounterMax
 246+ C64C D8          >                        ret	 c
 247+ C64D 3E 80                                ld      a,ECMCounterMax
 248+ C64F 32 B1 7D                             ld      (ECMCountDown),a
 249+ C652 C9                                   ret
 250+ C653
 251+ C653 3A 58 C0     RechargeEnergy:         ld      a,(UBnKEnergy)
 252+ C656                                      ReturnIfAGTEMemusng EnergyAddr
 252+ C656 21 05 C4    >                        ld      hl,EnergyAddr
 252+ C659 BE          >                        cp      (hl)
 252+ C65A D0          >                        ret	    nc
 253+ C65B 3C                                   inc     a
 254+ C65C 32 58 C0                             ld      (UBnKEnergy),a
 255+ C65F C9                                   ret
 256+ C660              ; A ship normally needs enough energy to fire ECM but if its shot then
 257+ C660              ; it may be too low, in which case the ECM does a saftey shutdown and returns 1 energy
 258+ C660              ; plus a 50% chance it will blow the ECM up
 259+ C660 3A 59 C0     UpdateECM:              ld      a,(UBnKECMCountDown)
 260+ C663                                      ReturnIfAIsZero
 260+ C663 A7          >                        and     a
 260+ C664 C8          >                        ret     z
 261+ C665 3D                                   dec     a
 262+ C666 32 59 C0                             ld      (UBnKECMCountDown),a
 263+ C669 21 58 C0                             ld      hl,UBnKEnergy
 264+ C66C 35                                   dec     (hl)
 265+ C66D F0                                   ret     p
 266+ C66E CD 45 C7     .ExhaustedEnergy:       call    UnivExplodeShip                 ; if it ran out of energy it was as it was also shot or collided as it checks in advance. Main ECM loop will continue as a compromise as multiple ships can fire ECM simultaneously
 267+ C671 C9                                   ret
 268+ C672
 269+ C672              ;-- This takes an Axis and subtracts 1, handles leading sign and boundary of 0 going negative
 270+ C672              JumpOffSet:             MACRO   Axis
 271+ C672 ~                                    ld      hl,(Axis)
 272+ C672 ~                                    ld      a,h
 273+ C672 ~                                    and     SignOnly8Bit
 274+ C672 ~                                    jr      nz,.NegativeAxis
 275+ C672 ~            .PositiveAxis:          dec     l
 276+ C672 ~                                    jp      m,.MovingNegative
 277+ C672 ~                                    jp      .Done
 278+ C672 ~            .NegativeAxis:          inc     l                               ; negative means increment the z
 279+ C672 ~                                    jp      .Done
 280+ C672 ~            .MovingNegative:        ld      hl,$8001                        ; -1
 281+ C672 ~            .Done                   ld      (Axis),hl
 282+ C672                                      ENDM
 283+ C672
 284+ C672
 285+ C672              WarpOffset:             JumpOffSet  UBnKzhi                     ; we will simplify on just moving Z
 285+ C672 2A 27 C0    >                        ld      hl,(UBnKzhi)
 285+ C675 7C          >                        ld      a,h
 285+ C676 E6 80       >                        and     SignOnly8Bit
 285+ C678 20 07       >                        jr      nz,.NegativeAxis
 285+ C67A 2D          >.PositiveAxis:          dec     l
 285+ C67B FA 85 C6    >                        jp      m,.MovingNegative
 285+ C67E C3 88 C6    >                        jp      .Done
 285+ C681 2C          >.NegativeAxis:          inc     l                               ; negative means increment the z
 285+ C682 C3 88 C6    >                        jp      .Done
 285+ C685 21 01 80    >.MovingNegative:        ld      hl,$8001                        ; -1
 285+ C688 22 27 C0    >.Done                   ld      (UBnKzhi),hl
 286+ C68B C9                                   ret
 287+ C68C
 288+ C68C
 289+ C68C              ; --------------------------------------------------------------
 290+ C68C              ; update ship speed and pitch based on adjustments from AI Tactics
 291+ C68C 3A 47 C0     UpdateSpeedAndPitch:    ld      a,(UBnKAccel)                   ; only apply non zero accelleration
 292+ C68F                                      JumpIfAIsZero .SkipAccelleration
 292+ C68F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 292+ C690 CA AE C6    >                        jp	    z, .SkipAccelleration
 293+ C693 47                                   ld      b,a                             ; b = accelleration in 2's c
 294+ C694 3A 46 C0                             ld      a,(UBnKSpeed)                   ; a = speed + accelleration
 295+ C697                                      ClearCarryFlag
 295+ C697 B7          >                        or a
 296+ C698 88                                   adc     a,b
 297+ C699                                      JumpIfPositive  .DoneAccelleration      ; if speed < 0
 297+ C699 F2 9D C6    >                        jp		p, .DoneAccelleration
 298+ C69C              .SpeedNegative:         ZeroA                                   ;    then speed = 0
 298+ C69C AF          >                        xor a
 299+ C69D 47           .DoneAccelleration:     ld      b,a                             ; if speed > speed limit
 300+ C69E 3A 06 C4                             ld      a,(SpeedAddr)                   ;    speed = limit
 301+ C6A1                                      JumpIfAGTENusng b, .SpeedInLimits       ; .
 301+ C6A1 B8          >                        cp     b
 301+ C6A2 D2 A6 C6    >                        jp		nc,.SpeedInLimits
 302+ C6A5 47                                   ld      b,a                             ; .
 303+ C6A6 78           .SpeedInLimits:         ld      a,b                             ; .
 304+ C6A7 32 46 C0                             ld      (UBnKSpeed),a                   ; .
 305+ C6AA                                      ZeroA                                   ; acclleration = 0
 305+ C6AA AF          >                        xor a
 306+ C6AB 32 47 C0                             ld      (UBnKAccel),a                   ; for next AI update
 307+ C6AE              .SkipAccelleration:     ; handle roll and pitch rates
 308+ C6AE C9                                   ret
 309+ C6AF
 310+ C6AF 21 24 A5     UnivSetEnemyMissile:    ld      hl,NewLaunchUBnKX               ; Copy launch ship matrix
 311+ C6B2 11 20 C0                             ld      de,UBnKxlo                      ;
 312+ C6B5 01 1B 00                             ld      bc,NewLaunchDataBlockSize       ; positon + 3 rows of 3 bytes
 313+ C6B8 ED B0                                ldir                                    ;
 314+ C6BA 3E 03        .SetUpSpeed:            ld      a,3                             ; set accelleration
 315+ C6BC 32 47 C0                             ld      (UBnKAccel),a                   ;
 316+ C6BF                                      ZeroA
 316+ C6BF AF          >                        xor a
 317+ C6C0 32 48 C0                             ld      (UBnKRotXCounter),a
 318+ C6C3 32 49 C0                             ld      (UBnKRotZCounter),a
 319+ C6C6 3E 03                                ld      a,3                             ; these are max roll and pitch rates for later
 320+ C6C8 32 4A C0                             ld      (UBnKRAT),a
 321+ C6CB 3C                                   inc     a
 322+ C6CC 32 4B C0                             ld      (UBnKRAT2),a
 323+ C6CF 3E 16                                ld      a,22
 324+ C6D1 32 4D C0                             ld      (UBnKCNT2),a
 325+ C6D4                                      MaxUnivSpeed                            ; and immediatley full speed (for now at least) TODO
 325+ C6D4 3E 1F       >                        ld      a,31
 325+ C6D6 32 46 C0    >                        ld      (UBnKSpeed),a
 326+ C6D9                                      SetMemFalse UBnKMissleHitToProcess
 326+ C6D9 3E FF       >                        ld      a,$FF
 326+ C6DB 32 44 C0    >                        ld      (UBnKMissleHitToProcess),a
 327+ C6DE 3E 80                                ld      a,ShipAIEnabled
 328+ C6E0 32 54 C0                             ld      (UBnkaiatkecm),a
 329+ C6E3 CD 1A C6                             call    SetShipHostile
 330+ C6E6 3E 96        .SetupPayload:          ld      a,150
 331+ C6E8 32 3C C0                             ld      (UBnKMissileBlastDamage),a
 332+ C6EB 32 3E C0                             ld      (UBnKMissileDetonateDamage),a
 333+ C6EE 3E 05                                ld      a,5
 334+ C6F0 32 3B C0                             ld      (UBnKMissileBlastRange),a
 335+ C6F3 32 3D C0                             ld      (UBnKMissileDetonateRange),a
 336+ C6F6 C9                                   ret
 337+ C6F7              ; --------------------------------------------------------------
 338+ C6F7              ; This sets the position of the current ship if its a player launched missile
 339+ C6F7 CD F7 C9     UnivSetPlayerMissile:   call    InitialisePlayerMissileOrientation  ; Copy in Player  facing
 340+ C6FA CD 37 C6                             call    ResetUbnkPosition               ; home position
 341+ C6FD 3E 05                                ld      a,MissileDropHeight             ; the missile launches from underneath
 342+ C6FF 32 23 C0                             ld      (UBnKylo),a                     ; so its -ve drop height
 343+ C702                                      IFDEF DEBUGMISSILELAUNCH
 344+ C702 ~                                        ld      a,$20       ; DEBUG
 345+ C702 ~                                        ld      (UBnKzlo),a
 346+ C702                                      ENDIF
 347+ C702 3E 80                                ld      a,$80                           ;
 348+ C704 32 25 C0                             ld      (UBnKysgn),a                    ;
 349+ C707 3E 03                                ld      a,3                             ; set accelleration
 350+ C709 32 47 C0                             ld      (UBnKAccel),a                   ;
 351+ C70C                                      ZeroA
 351+ C70C AF          >                        xor a
 352+ C70D 32 48 C0                             ld      (UBnKRotXCounter),a
 353+ C710 32 49 C0                             ld      (UBnKRotZCounter),a
 354+ C713 3E 03                                ld      a,3                             ; these are max roll and pitch rates for later
 355+ C715 32 4A C0                             ld      (UBnKRAT),a
 356+ C718 3C                                   inc     a
 357+ C719 32 4B C0                             ld      (UBnKRAT2),a
 358+ C71C 3E 16                                ld      a,22
 359+ C71E 32 4D C0                             ld      (UBnKCNT2),a
 360+ C721                                      MaxUnivSpeed                            ; and immediatley full speed (for now at least) TODO
 360+ C721 3E 1F       >                        ld      a,31
 360+ C723 32 46 C0    >                        ld      (UBnKSpeed),a
 361+ C726                                      SetMemFalse UBnKMissleHitToProcess
 361+ C726 3E FF       >                        ld      a,$FF
 361+ C728 32 44 C0    >                        ld      (UBnKMissleHitToProcess),a
 362+ C72B 3E 80                                ld      a,ShipAIEnabled
 363+ C72D 32 54 C0                             ld      (UBnkaiatkecm),a
 364+ C730                                      ;break
 365+ C730 CD 23 C6                             call    ClearShipHostile                ; its a player missile
 366+ C733 C9                                   ret
 367+ C734              ; --------------------------------------------------------------
 368+ C734              ; this applies blast damage to ship
 369+ C734 3A 97 7F     ShipMissileBlast:       ld      a,(CurrentMissileBlastDamage)
 370+ C737 47                                   ld      b,a
 371+ C738 3A 58 C0                             ld      a,(UBnKEnergy)                   ; Reduce Energy
 372+ C73B 90                                   sub     b
 373+ C73C C3 45 C7                             jp      UnivExplodeShip
 374+ C73F 18 04                                jr      UnivExplodeShip
 375+ C741 32 58 C0                             ld      (UBnKEnergy),a
 376+ C744 C9                                   ret
 377+ C745              ; --------------------------------------------------------------
 378+ C745              ; This sets the ship as a shower of explosiondwd
 379+ C745 3A 54 C0     UnivExplodeShip:        ld      a,(UBnkaiatkecm)
 380+ C748 F6 30                                or      ShipExploding | ShipKilled      ; Set Exlpoding flag and mark as just been killed
 381+ C74A E6 7F                                and     Bit7Clear                       ; Remove AI
 382+ C74C 32 54 C0                             ld      (UBnkaiatkecm),a
 383+ C74F AF                                   xor     a
 384+ C750 32 58 C0                             ld      (UBnKEnergy),a
 385+ C753                                      ;TODO
 386+ C753 C9                                   ret
 387+ C754
 388+ C754 CD 9D C8     UnivSetDemoPostion:     call    UnivSetSpawnPosition
 389+ C757 3E 81                                ld      a,%10000001                     ; AI Enabled has 1 missile
 390+ C759 32 54 C0                             ld      (UBnkaiatkecm),a                ; set hostinle, no AI, has ECM
 391+ C75C 32 0E C4                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 392+ C75F 3E FF                                ld      a,$FF
 393+ C761 32 49 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 394+ C764 32 48 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 395+ C767                                      ZeroA
 395+ C767 AF          >                        xor a
 396+ C768 32 22 C0                             ld      (UBnKxsgn),a
 397+ C76B 32 25 C0                             ld      (UBnKysgn),a
 398+ C76E 32 28 C0                             ld      (UBnKzsgn),a
 399+ C771 21 00 00                             ld      hl,0
 400+ C774 22 20 C0                             ld      (UBnKxlo),hl
 401+ C777 22 23 C0                             ld      (UBnKylo),hl
 402+ C77A 3A 0D C4                             ld      a,(ShipTypeAddr)
 403+ C77D 21 B0 05                             ld      hl,$05B0                            ; so its a negative distance behind
 404+ C780                                      JumpIfANENusng ShipTypeStation, .SkipFurther
 404+ C780 FE 02       >                        cp     ShipTypeStation
 404+ C782 C2 89 C7    >                        jp      nz,.SkipFurther
 405+ C785 3E 05                                ld      a,5
 406+ C787 84                                   add     h
 407+ C788 67                                   ld      h,a
 408+ C789 22 26 C0     .SkipFurther            ld      (UBnKzlo),hl
 409+ C78C C9                                   ret
 410+ C78D                  DISPLAY "Tracing 1", $
 411+ C78D
 412+ C78D              ; --------------------------------------------------------------
 413+ C78D              CopyPlanetGlobaltoSpaceStation:
 414+ C78D 21 64 7F                             ld      hl,ParentPlanetX
 415+ C790 11 20 C0                             ld      de,UBnKxlo
 416+ C793 01 09 00                             ld      bc,3*3
 417+ C796 ED B0                                ldir
 418+ C798 C9                                   ret
 419+ C799              ; --------------------------------------------------------------
 420+ C799              CopySpaceStationtoPlanetGlobal:
 421+ C799 21 20 C0                             ld      hl,UBnKxlo
 422+ C79C 11 64 7F                             ld      de,ParentPlanetX
 423+ C79F 01 09 00                             ld      bc,3*3
 424+ C7A2 ED B0                                ldir
 425+ C7A4 C9                                   ret
 426+ C7A5              ; --------------------------------------------------------------
 427+ C7A5              ; generate space station type based on seed values
 428+ C7A5              ; returns space station type in a
 429+ C7A5 3A 59 7F     UnivSelSpaceStationType:ld      a,(DisplayEcononmy)
 430+ C7A8 2A 5A 7F                             ld      hl,(DisplayGovernment)          ; h = TekLevel, l = Government
 431+ C7AB ED 5B 5C 7F                          ld      de,(DisplayPopulation)          ; d = productivity e = Population
 432+ C7AF                                      ; so its economdy + government - TekLevel + productivity - population %00000001
 433+ C7AF 85                                   add     a,l
 434+ C7B0 9C                                   sbc     a,h
 435+ C7B1 82                                   add     a,d
 436+ C7B2 9B                                   sbc     a,e
 437+ C7B3 E6 01                                and     $01
 438+ C7B5 21 23 77                             ld      hl,MasterStations               ; in main memory
 439+ C7B8 ED 31                                add     hl,a
 440+ C7BA 7E                                   ld      a,(hl)
 441+ C7BB C9                                   ret
 442+ C7BC              ; --------------------------------------------------------------
 443+ C7BC              CalculateSpaceStationWarpPositon:
 444+ C7BC 3A 2D 7F     .CalcZPosition:         ld      a,(WorkingSeeds+1)      ; seed d & 7
 445+ C7BF E6 07                                and     %00000111               ; .
 446+ C7C1 C6 07                                add     a,7                     ; + 7
 447+ C7C3 CB 2F                                sra     a                       ; / 2
 448+ C7C5 32 28 C0     .SetZPosition:          ld      (UBnKzsgn),a            ; << 16 (i.e. load into z sign byte
 449+ C7C8 21 00 00                             ld      hl, $0000               ; now set z hi and lo
 450+ C7CB 22 26 C0                             ld      (UBnKzlo),hl            ;
 451+ C7CE 3A 31 7F     .CalcXandYPosition:     ld      a,(WorkingSeeds+5)      ; seed f & 3
 452+ C7D1 E6 03                                and     %00000011               ; .
 453+ C7D3 C6 03                                add     a,3                     ; + 3
 454+ C7D5 47                                   ld      b,a
 455+ C7D6 3A 30 7F                             ld      a,(WorkingSeeds+4)      ; get low bit of seed e
 456+ C7D9 E6 01                                and     %00000001
 457+ C7DB 1F                                   rra                             ; roll bit 0 into bit 7
 458+ C7DC B0                                   or      b                       ; now calc is f & 3 * -1 if seed e is odd
 459+ C7DD 32 22 C0     .SetXandYPosition:      ld      (UBnKxsgn),a            ; set into x and y sign byte
 460+ C7E0 32 25 C0                             ld      (UBnKysgn),a            ; .
 461+ C7E3 78                                   ld      a,b                     ; we want just seed f & 3 here
 462+ C7E4 32 21 C0                             ld      (UBnKxhi),a             ; set into x and y high byte
 463+ C7E7 32 24 C0                             ld      (UBnKyhi),a             ; .
 464+ C7EA                                      ZeroA
 464+ C7EA AF          >                        xor a
 465+ C7EB 32 20 C0                             ld      (UBnKxlo),a
 466+ C7EE 32 23 C0                             ld      (UBnKylo),a
 467+ C7F1              .CaclculateSpaceStationOffset:
 468+ C7F1 3A 2E 7F     .CalculateOffset:       ld      a,(WorkingSeeds+2)
 469+ C7F4 E6 03                                and     %00000011
 470+ C7F6 4F                                   ld      c,a
 471+ C7F7 3A 2C 7F                             ld      a,(WorkingSeeds)
 472+ C7FA E6 01                                and     %00000001
 473+ C7FC 17                                   rla
 474+ C7FD 47                                   ld      b,a
 475+ C7FE 61                                   ld      h,c
 476+ C7FF 0E 00                                ld      c,0
 477+ C801 C5 E5        .TransposeX:            push    bc,,hl
 478+ C803 ED 5B 21 C0                          ld      de,(UBnKxhi)
 479+ C807 3A 22 C0                             ld      a,(UBnKxsgn)
 480+ C80A 6F                                   ld      l,a
 481+ C80B                                      MMUSelectMathsBankedFns
 481+ C80B ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 481+ C80F CD F2 00       call        AddBCHtoDELsigned
 482+ C812 ED 53 21 C0                          ld      (UBnKxhi),de
 483+ C816 7D                                   ld      a,l
 484+ C817 32 22 C0                             ld      (UBnKxsgn),a
 485+ C81A E1 C1        .TransposeY:            pop     bc,,hl
 486+ C81C C5 E5                                push    bc,,hl
 487+ C81E ED 5B 24 C0                          ld      de,(UBnKyhi)
 488+ C822 3A 25 C0                             ld      a,(UBnKysgn)
 489+ C825 6F                                   ld      l,a
 490+ C826                                      MMUSelectMathsBankedFns
 490+ C826 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 490+ C82A CD F2 00       call        AddBCHtoDELsigned
 491+ C82D ED 53 24 C0                          ld      (UBnKyhi),de
 492+ C831 7D                                   ld      a,l
 493+ C832 32 25 C0                             ld      (UBnKysgn),a
 494+ C835 E1 C1        .TransposeZ:            pop     bc,,hl
 495+ C837 ED 5B 27 C0                          ld      de,(UBnKzhi)
 496+ C83B 3A 28 C0                             ld      a,(UBnKzsgn)
 497+ C83E 6F                                   ld      l,a
 498+ C83F                                      MMUSelectMathsBankedFns
 498+ C83F ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 498+ C843 CD F2 00       call        AddBCHtoDELsigned
 499+ C846 ED 53 27 C0                          ld      (UBnKzhi),de
 500+ C84A 7D                                   ld      a,l
 501+ C84B 32 28 C0                             ld      (UBnKzsgn),a
 502+ C84E C9                                   ret
 503+ C84F              ; --------------------------------------------------------------
 504+ C84F              UnivSpawnSpaceStationLaunched:
 505+ C84F CD 72 C8                             call    UnivSpawnSpaceStation
 506+ C852 CD 99 C7                             call    CopySpaceStationtoPlanetGlobal
 507+ C855 CD 1F C9                             call    ResetStationLaunch
 508+ C858 C9                                   ret
 509+ C859                                      DISPLAY "TODO:fall into SpaceStation Launch Position once startup fixed"
 510+ C859                                      DISPLAY "TODO: Fault is probably as maths for xyz is 16 bit and shoudl be 24"
 511+ C859              ; --------------------------------------------------------------
 512+ C859              SpaceStationLaunchPositon:
 513+ C859 21 00 00                             ld      hl,0
 514+ C85C                                      ZeroA
 514+ C85C AF          >                        xor a
 515+ C85D 22 20 C0                             ld      (UBnKxlo),hl
 516+ C860 32 22 C0                             ld      (UBnKxsgn),a
 517+ C863 22 23 C0                             ld      (UBnKylo),hl
 518+ C866 32 25 C0                             ld      (UBnKysgn),a
 519+ C869 3E 81                                ld      a,$81
 520+ C86B 22 26 C0                             ld      (UBnKzlo),hl
 521+ C86E 32 28 C0                             ld      (UBnKzsgn),a
 522+ C871 C9                                   ret
 523+ C872              ; --------------------------------------------------------------
 524+ C872              UnivSpawnSpaceStation:  ;    UnivSelSpaceStationType ; set a to type
 525+ C872                                      ;ld      c,13                    ; c to slot 13 which is space station
 526+ C872                                      ;call    SpawnShipTypeASlotC     ; load inito universe slot
 527+ C872 CD 8D C7     .CalculatePosition:     call    CopyPlanetGlobaltoSpaceStation
 528+ C875 CD BC C7     .CalcOrbitOffset:       call    CalculateSpaceStationWarpPositon
 529+ C878 CD D4 C9                             call    InitialiseOrientation
 530+ C87B              .SetRollCounters:       ZeroUnivPitch
 530+ C87B AF          >                        xor     a
 530+ C87C 32 49 C0    >                        ld      (UBnKRotZCounter),a
 531+ C87F                                      InfiniteRoll
 531+ C87F 3E FF       >                        ld      a,$FF
 531+ C881 32 48 C0    >                        ld      (UBnKRotXCounter),a
 532+ C884              .SetOrientation:        FlipSignMem UBnkrotmatNosevX+1;  as its 0 flipping will make no difference
 532+ C884 3A 36 C0    >                        ld  a,(UBnkrotmatNosevX+1)
 532+ C887 EE 80       >                        xor SignOnly8Bit
 532+ C889 32 36 C0    >                        ld  (UBnkrotmatNosevX+1),a
 533+ C88C                                      FlipSignMem UBnkrotmatNosevY+1;  as its 0 flipping will make no difference
 533+ C88C 3A 38 C0    >                        ld  a,(UBnkrotmatNosevY+1)
 533+ C88F EE 80       >                        xor SignOnly8Bit
 533+ C891 32 38 C0    >                        ld  (UBnkrotmatNosevY+1),a
 534+ C894                                      FlipSignMem UBnkrotmatNosevZ+1
 534+ C894 3A 3A C0    >                        ld  a,(UBnkrotmatNosevZ+1)
 534+ C897 EE 80       >                        xor SignOnly8Bit
 534+ C899 32 3A C0    >                        ld  (UBnkrotmatNosevZ+1),a
 535+ C89C C9                                   ret
 536+ C89D              ; --------------------------------------------------------------
 537+ C89D              ; This sets the position of the current ship randomly, called after spawing
 538+ C89D              ; Spawns in withink 16 bit range so 24 bit friendly
 539+ C89D CD D4 C9     UnivSetSpawnPosition:   call    InitialiseOrientation
 540+ C8A0                                      RandomUnivPitchAndRoll
 540+ C8A0 CD 37 84    >                        call    doRandom
 540+ C8A3 F6 6F       >                        or      %01101111
 540+ C8A5 32 48 C0    >                        ld      (UBnKRotXCounter),a
 540+ C8A8 CD 37 84    >                        call    doRandom
 540+ C8AB F6 6F       >                        or      %01101111
 540+ C8AD 32 49 C0    >                        ld      (UBnKRotZCounter),a
 541+ C8B0 CD 37 84                             call    doRandom                        ; set x lo and y lo to random
 542+ C8B3 32 20 C0     .setXlo:                ld      (UBnKxlo),a
 543+ C8B6 32 23 C0     .setYlo:                ld      (UBnKylo),a
 544+ C8B9 0F           .setXsign:              rrca                                    ; rotate by 1 bit right
 545+ C8BA 47                                   ld      b,a
 546+ C8BB E6 80                                and     SignOnly8Bit
 547+ C8BD 32 22 C0                             ld      (UBnKxsgn),a
 548+ C8C0 78           .setYSign:              ld      a,b                             ; get random back again
 549+ C8C1 0F                                   rrca                                    ; rotate by 1 bit right
 550+ C8C2 47                                   ld      b,a
 551+ C8C3 E6 80                                and     SignOnly8Bit                    ; and set y sign
 552+ C8C5 32 25 C0                             ld      (UBnKysgn),a
 553+ C8C8 CB 08        .setYHigh:              rrc     b                               ; as value is in b rotate again
 554+ C8CA 78                                   ld      a,b                             ;
 555+ C8CB E6 1F                                and     31                              ; set y hi to random 0 to 31
 556+ C8CD 32 24 C0                             ld      (UBnKyhi),a                     ;
 557+ C8D0 CB 08        .setXHigh:              rrc     b                               ; as value is in b rotate again
 558+ C8D2 78                                   ld      a,b
 559+ C8D3 E6 1F                                and     31                              ; set x hi to random 0 to 31
 560+ C8D5 4F                                   ld      c,a                             ; save shifted into c as well
 561+ C8D6 32 21 C0                             ld      (UBnKxhi),a
 562+ C8D9 3E 50        .setZHigh:              ld      a,80                            ; set z hi to 80 - xhi - yhi - carry
 563+ C8DB 98                                   sbc     b
 564+ C8DC 99                                   sbc     c
 565+ C8DD 32 27 C0                             ld      (UBnKzhi),a
 566+ C8E0 3A 0D C4     .CheckIfBodyOrJunk:     ld      a,(ShipTypeAddr)
 567+ C8E3                                      ReturnIfAEqNusng ShipTypeJunk
 567+ C8E3 FE 03       >                        cp      ShipTypeJunk
 567+ C8E5 C8          >                        ret     z
 568+ C8E6                                      ReturnIfAEqNusng ShipTypeScoopable
 568+ C8E6 FE 04       >                        cp      ShipTypeScoopable
 568+ C8E8 C8          >                        ret     z
 569+ C8E9 78                                   ld      a,b                             ; its not junk to set z sign
 570+ C8EA 0F                                   rrca                                    ; as it can jump in
 571+ C8EB E6 80                                and     SignOnly8Bit
 572+ C8ED 32 28 C0                             ld      (UBnKzsgn),a
 573+ C8F0 C9                                   ret
 574+ C8F1
 575+ C8F1              ; --------------------------------------------------------------
 576+ C8F1              ; This sets the cargo type or carryflag set for not cargo
 577+ C8F1              ; Later this will be done via a loadable lookup table
 578+ C8F1 3A 0D C4     ShipCargoType:          ld      a,(ShipTypeAddr)
 579+ C8F4                                      JumpIfAEqNusng ShipID_CargoType5, .CargoCanister
 579+ C8F4 FE 04       >                        cp     ShipID_CargoType5
 579+ C8F6 CA 0D C9    >                        jp      z,.CargoCanister
 580+ C8F9              .IsItThargon:           JumpIfAEqNusng ShipID_Thargon,    .Thargon
 580+ C8F9 FE 27       >                        cp     ShipID_Thargon
 580+ C8FB CA 13 C9    >                        jp      z,.Thargon
 581+ C8FE              .IsItAlloy:             JumpIfAEqNusng ShipID_Plate,      .Plate
 581+ C8FE FE 1D       >                        cp     ShipID_Plate
 581+ C900 CA 16 C9    >                        jp      z,.Plate
 582+ C903              .IsItSplinter:          JumpIfAEqNusng ShipID_Splinter,   .Splinter
 582+ C903 FE 24       >                        cp     ShipID_Splinter
 582+ C905 CA 19 C9    >                        jp      z,.Splinter
 583+ C908              .IsItEscapePod:         JumpIfAEqNusng ShipID_Escape_Pod, .EscapePod
 583+ C908 FE 11       >                        cp     ShipID_Escape_Pod
 583+ C90A CA 1C C9    >                        jp      z,.EscapePod
 584+ C90D CD 37 84     .CargoCanister:         call    doRandom
 585+ C910 E6 0F                                and     15                      ; Limit stock from Food to Platinum
 586+ C912 C9                                   ret
 587+ C913 3E 11        .Thargon:               ld      a,AlienItemsIndex
 588+ C915 C9                                   ret
 589+ C916 3E 0A        .Plate:                 ld      a,AlloysIndex
 590+ C918 C9                                   ret
 591+ C919 3E 0D        .Splinter:              ld      a,MineralsIndex
 592+ C91B C9                                   ret
 593+ C91C 3E 04        .EscapePod:             ld      a,SlavesIndex
 594+ C91E C9                                   ret
 595+ C91F                      IFDEF DEBUG_SHIP_MOVEMENT
 596+ C91F ~            FixStationPos:          ld      hl, DebugPos
 597+ C91F ~                                    ld      de, UBnKxlo
 598+ C91F ~                                    ld      bc,9
 599+ C91F ~                                    ldir
 600+ C91F ~                                    ld      hl,DebugRotMat
 601+ C91F ~                                    ld      de, UBnkrotmatSidevX
 602+ C91F ~                                    ld      bc,6*3
 603+ C91F ~                                    ldir
 604+ C91F ~                                    ret
 605+ C91F                      ENDIF
 606+ C91F                      IFDEF DEBUG_SHIP_MOVEMENT
 607+ C91F ~            DebugPos:               DB $00,$00,$00,$92,$01,$00,$7E,$04,$00
 608+ C91F ~            DebugRotMat:            DB $37,$88,$9A,$DC,$1B,$F7
 609+ C91F ~            DebugRotMat1:           DB $DF,$6D,$2A,$07,$C1,$83
 610+ C91F ~            DebugRotMat2:           DB $00,$80,$4A,$9B,$AA,$D8
 611+ C91F                      ENDIF
 612+ C91F
 613+ C91F              ; --------------------------------------------------------------
 614+ C91F              ; This sets current univrse object to space station
 615+ C91F 3E 81        ResetStationLaunch:     ld  a,%10000001                         ; Has AI and 1 Missile
 616+ C921 32 54 C0                             ld  (UBnkaiatkecm),a                    ; set hostinle, no AI, has ECM
 617+ C924 AF                                   xor a
 618+ C925 32 49 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 619+ C928 32 0E C4                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 620+ C92B 3E FF                                ld      a,$FF
 621+ C92D 32 48 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 622+ C930 21 00 00     .SetPosBehindUs:        ld      hl,$0000
 623+ C933 22 20 C0                             ld      (UBnKxlo),hl
 624+ C936 21 00 00                             ld      hl,$0000
 625+ C939 22 23 C0                             ld      (UBnKylo),hl
 626+ C93C 21 B0 01                             ld      hl,$01B0                            ; so its a negative distance behind
 627+ C93F 22 26 C0                             ld      (UBnKzlo),hl
 628+ C942 AF                                   xor     a
 629+ C943 32 22 C0                             ld      (UBnKxsgn),a
 630+ C946 32 25 C0                             ld      (UBnKysgn),a
 631+ C949 3E 80                                ld      a,$80
 632+ C94B 32 28 C0                             ld      (UBnKzsgn),a
 633+ C94E CD 01 CA     .SetOrientation:        call    LaunchedOrientation             ; set initial facing
 634+ C951 C9                                   ret
 635+ C952                  ;Input: BC = Dividend, DE = Divisor, HL = 0
 636+ C952              ;Output: BC = Quotient, HL = Remainder
 637+ C952
 638+ C952
 639+ C952
 640+ C952 2A 23 29 27  FighterTypeMapping:     DB ShipID_Worm, ShipID_Sidewinder, ShipID_Viper, ShipID_Thargon
 641+ C956
 642+ C956              ; Initialiase data, iyh must equal slot number
 643+ C956              ;                   iyl must be ship type
 644+ C956              ;                   a  = current bank number
 645+ C956 01 22 00     UnivInitRuntime:        ld      bc,UBnKRuntimeSize
 646+ C959 21 3F C0                             ld      hl,UBnKStartOfRuntimeData
 647+ C95C                                      ZeroA
 647+ C95C AF          >                        xor a
 648+ C95D 32 59 C0                             ld      (UBnKECMCountDown),a
 649+ C960 77           .InitLoop:              ld      (hl),a
 650+ C961 23                                   inc     hl
 651+ C962 10 FC                                djnz    .InitLoop
 652+ C964              .SetEnergy:             ldCopyByte EnergyAddr, UBnKEnergy
 652+ C964 3A 05 C4    >                        ld       a,(EnergyAddr)
 652+ C967 32 58 C0    >                        ld       (UBnKEnergy),a
 653+ C96A FD 7C        .SetBankData:           ld      a,iyh
 654+ C96C 32 3F C0                             ld      (UBnKSlotNumber),a
 655+ C96F C6 46                                add     a,BankUNIVDATA0
 656+ C971 32 40 C0                             ld      (UbnKShipUnivBankNbr),a
 657+ C974 FD 7D                                ld      a,iyl
 658+ C976 32 43 C0                             ld      (UBnKShipModelId),a
 659+ C979 CD 0F E0                             call    GetShipBankId                ; this will mostly be debugging info
 660+ C97C 32 41 C0                             ld      (UBnkShipModelBank),a        ; this will mostly be debugging info
 661+ C97F 78                                   ld      a,b                          ; this will mostly be debugging info
 662+ C980 32 42 C0                             ld      (UBnKShipModelNbr),a         ; this will mostly be debugging info
 663+ C983 3A 0A C4     .SetUpMissileCount:     ld      a,(LaserAddr)                ; get laser and missile details
 664+ C986 E6 0F                                and     ShipMissileCount
 665+ C988 4F                                   ld      c,a
 666+ C989 3A 93 7D                             ld      a,(RandomSeed1)              ; missile flag limit
 667+ C98C A1                                   and     c                            ; .
 668+ C98D 32 5C C0                             ld      (UBnKMissilesLeft),a
 669+ C990 3A 0A C4     .SetupLaserType         ld      a,(LaserAddr)
 670+ C993 E6 F0                                and     ShipLaserPower
 671+ C995 ED 23                                swapnib
 672+ C997 32 5B C0                             ld      (UBnKLaserPower),a
 673+ C99A 3A 0F C4     .SetUpFighterBays:      ld      a,(ShipAIFlagsAddr)
 674+ C99D 4F                                   ld      c,a
 675+ C99E E6 70                                and     ShipFighterBaySize
 676+ C9A0                                      JumpIfANENusng ShipFighterBaySizeInf, .LimitedBay
 676+ C9A0 FE 70       >                        cp     ShipFighterBaySizeInf
 676+ C9A2 C2 A7 C9    >                        jp      nz,.LimitedBay
 677+ C9A5 3E FF                                ld      a,$FF                       ; force unlimited ships
 678+ C9A7 ED 23        .LimitedBay:            swapnib                             ; as its bits 6 to 4 and we have removed bit 7 we can cheat with a swapnib
 679+ C9A9 32 5E C0                             ld      (UBnKFightersLeft),a
 680+ C9AC 79           .SetUpFighterType:      ld      a,c                         ; get back AI flags
 681+ C9AD E6 0C                                and     ShipFighterType             ; fighter type is bits 2 and 3
 682+ C9AF CB 1F                                rr      a                           ; so get them down to 0 and 1
 683+ C9B1 CB 1F                                rr      a                           ;
 684+ C9B3 21 52 C9                             ld      hl,FighterTypeMapping       ; then use the lookup table
 685+ C9B6 ED 31                                add     hl,a                        ; for the respective ship id
 686+ C9B8 7E                                   ld      a,(hl)                      ; we work on this for optimisation
 687+ C9B9 32 5D C0                             ld      (UBnKFighterShipId),a       ; ship data holds index to this table
 688+ C9BC 3A 10 C4     .SetUpECM:              ld      a,(ShipECMFittedChanceAddr) ; Now handle ECM
 689+ C9BF 47                                   ld      b,a
 690+ C9C0 3A 95 7D     .FetchLatestRandom:     ld      a,(RandomSeed3)
 691+ C9C3                                      JumpIfALTNusng b, .ECMFitted
 691+ C9C3 B8          >                        cp      b
 691+ C9C4 DA CF C9    >                        jp		c, .ECMFitted
 692+ C9C7              .ECMNotFitted:          SetMemFalse UBnKECMFitted
 692+ C9C7 3E FF       >                        ld      a,$FF
 692+ C9C9 32 5A C0    >                        ld      (UBnKECMFitted),a
 693+ C9CC C3 D3 C9                             jp      .DoneECM
 694+ C9CF              .ECMFitted:             SetMemTrue  UBnKECMFitted
 694+ C9CF AF          >                        xor     a
 694+ C9D0 32 5A C0    >                        ld      (UBnKECMFitted),a
 695+ C9D3              .DoneECM:               ; TODO set up laser power
 696+ C9D3 C9                                   ret
 697+ C9D4                  DISPLAY "Tracing 2", $
 698+ C9D4
 699+ C9D4                                      include "Universe/Ships/InitialiseOrientation.asm"
# file opened: ./Universe/Ships/InitialiseOrientation.asm
   1++C9D4              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   2++C9D4              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   3++C9D4              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   4++C9D4              InitialiseOrientation:
   5++C9D4 21 00 00     ZI1:                    ld      hl, 0
   6++C9D7 22 2B C0                             ld      (UBnkrotmatSidevY),hl                ; set the zeroes
   7++C9DA 22 2D C0                             ld      (UBnkrotmatSidevZ),hl                ; set the zeroes
   8++C9DD 22 2F C0                             ld      (UBnkrotmatRoofvX),hl                ; set the zeroes
   9++C9E0 22 33 C0                             ld      (UBnkrotmatRoofvZ),hl                ; set the zeroes
  10++C9E3 22 35 C0                             ld      (UBnkrotmatNosevX),hl                ; set the zeroes
  11++C9E6 22 37 C0                             ld      (UBnkrotmatNosevY),hl                ; set the zeroes
  12++C9E9              ; Optimised as already have 0 in l
  13++C9E9 26 60                                ld      h, $60	             				; 96 in hi byte
  14++C9EB                                      ;ld      hl,1
  15++C9EB 22 29 C0                             ld      (UBnkrotmatSidevX),hl
  16++C9EE 22 31 C0                             ld      (UBnkrotmatRoofvY),hl
  17++C9F1              ; Optimised as already have 0 in l
  18++C9F1 26 E0                                ld      h, $E0					            ; -96 in hi byte which is +96 with hl bit 7 set
  19++C9F3 22 39 C0                             ld      (UBnkrotmatNosevZ),hl
  20++C9F6 C9                                   ret
  21++C9F7
  22++C9F7              InitialisePlayerMissileOrientation:
  23++C9F7 CD D4 C9                             call    InitialiseOrientation
  24++C9FA 21 00 60                             ld      hl,$6000
  25++C9FD 22 39 C0                             ld      (UBnkrotmatNosevZ),hl           ; mius
  26++CA00 C9                                   ret
  27++CA01
  28++CA01
  29++CA01              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
  30++CA01              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
  31++CA01              ;  nosev = (-0,  -0, 1) nosev = (0, 0, &6000)
  32++CA01 CD D4 C9     LaunchedOrientation:    call    InitialiseOrientation
  33++CA04                                      FlipSignMem UBnkrotmatNosevX+1;  as its 0 flipping will make no difference
  33++CA04 3A 36 C0    >                        ld  a,(UBnkrotmatNosevX+1)
  33++CA07 EE 80       >                        xor SignOnly8Bit
  33++CA09 32 36 C0    >                        ld  (UBnkrotmatNosevX+1),a
  34++CA0C                                      FlipSignMem UBnkrotmatNosevY+1;  as its 0 flipping will make no difference
  34++CA0C 3A 38 C0    >                        ld  a,(UBnkrotmatNosevY+1)
  34++CA0F EE 80       >                        xor SignOnly8Bit
  34++CA11 32 38 C0    >                        ld  (UBnkrotmatNosevY+1),a
  35++CA14                                      FlipSignMem UBnkrotmatNosevZ+1
  35++CA14 3A 3A C0    >                        ld  a,(UBnkrotmatNosevZ+1)
  35++CA17 EE 80       >                        xor SignOnly8Bit
  35++CA19 32 3A C0    >                        ld  (UBnkrotmatNosevZ+1),a
  36++CA1C C9                                   ret
  37++CA1D
# file closed: ./Universe/Ships/InitialiseOrientation.asm
 700+ CA1D
 701+ CA1D              ;----------------------------------------------------------------------------------------------------------------------------------
 702+ CA1D              ;OrientateVertex:
 703+ CA1D              ;                      [ sidev_x sidev_y sidev_z ]   [ x ]
 704+ CA1D              ;  projected [x y z] = [ roofv_x roofv_y roofv_z ] . [ y ]
 705+ CA1D              ;                      [ nosev_x nosev_y nosev_z ]   [ z ]
 706+ CA1D              ;
 707+ CA1D
 708+ CA1D              ;----------------------------------------------------------------------------------------------------------------------------------
 709+ CA1D              ;TransposeVertex:
 710+ CA1D              ;                      [ sidev_x roofv_x nosev_x ]   [ x ]
 711+ CA1D              ;  projected [x y z] = [ sidev_y roofv_y nosev_y ] . [ y ]
 712+ CA1D              ;                      [ sidev_z roofv_z nosev_z ]   [ z ]
 713+ CA1D              ; VectorToVertex:
 714+ CA1D              ;                     [ sidev_x roofv_x nosev_x ]   [ x ]   [ x ]
 715+ CA1D              ;  vector to vertex = [ sidev_y roofv_y nosev_y ] . [ y ] + [ y ]
 716+ CA1D              ;                     [ sidev_z roofv_z nosev_z ]   [ z ]   [ z ]
 717+ CA1D              ;INPUTS:    bhl = dividend  cde = divisor where b and c are sign bytes
 718+ CA1D              ;OUTPUTS:   cahl = quotient cde = divisor
 719+ CA1D              ;--------------------------------------------------------------------------------------------------------
 720+ CA1D                                      ;include "./ModelRender/EraseOldLines-EE51.asm"
 721+ CA1D               ; OBSOLETE                       include "./ModelRender/TrimToScreenGrad-LL118.asm"
 722+ CA1D                                      include "./ModelRender/CLIP-LL145.asm"
# file opened: ././ModelRender/CLIP-LL145.asm
   1++CA1D              ;--------------------------------------------------------------------------------------------------------------------
   2++CA1D
   3++CA1D 00           clipDx                  DB      0           ; also XX12+2
   4++CA1E 00           clipDxHigh              DB      0           ; also XX12+3
   5++CA1F 00           clipDxHighNonABS        DB      0           ; also XX12+3
   6++CA20 00           clipDy                  DB      0           ; also XX12+4
   7++CA21 00           clipDyHigh              DB      0           ; also XX12+5
   8++CA22 00           clipGradient            DB      0
   9++CA23 00           clipDxySign             DB      0
  10++CA24              varX12p3                equ     clipDxySign
  11++CA24 00           clipXGTY                DB      0
  12++CA25 00           clipFlags               DB      0
  13++CA26 00           SWAP                    DB      0
  14++CA27 00 00        varYX                   DW      0
  15++CA29              ;varRegX                 DB      0
  16++CA29              ;varXX12p2               DB      0
  17++CA29 00           clipXX13                 DB      0
  18++CA2A 00           Gradient                DB      0
  19++CA2B              ; for start and end y. bit7 of lower determines its not been setup yet
  20++CA2B
  21++CA2B              ;--------------------------------------------------------------------------------------
  22++CA2B                      IFNDEF       CLIPVersion3
  23++CA2B ED 4B A8 C0  ClipLine:               ld      bc,(UbnkPreClipY1)          ; bc - XX15(2,3) Y1
  24++CA2F DD 2A AC C0                          ld      ix,(UbnkPreClipY2)          ; ix - XX12(0,1) Y2
  25++CA33 2A A6 C0                             ld      hl,(UbnkPreClipX1)          ; hl - XX15(0,1) X1
  26++CA36 ED 5B AA C0                          ld      de,(UbnkPreClipX2)          ; de - XX15(4,5) X2
  27++CA3A AF                                   xor     a
  28++CA3B 32 26 CA                             ld      (SWAP),a                    ; SWAP = 0
  29++CA3E 7A                                   ld      a,d                         ; A = X2Hi
  30++CA3F FD 26 BF     .LL147:                 ld      iyh,$BF                     ; we need to be 191 as its 128 + another bit set from 0 to 6, we are using iyh as regX (128 will actually do)
  31++CA42 DD B4                                or      ixh                         ; if (X2Hi L-OR Y2 Hi <> 0) goto LL107             -- X2Y2 off screen
  32++CA44 20 0A                                jr      nz, .LL107
  33++CA46 DD 7D                                ld      a,ixl
  34++CA48 ED 27 80                             test    $80                         ; if screen hight < y2 lo, i.e y2 lo >127 goto LL107,
  35++CA4B 20 03                                jr      nz,.LL107
  36++CA4D FD 26 00                             ld      iyh, 0                      ; else iyh = regX = 0                                                                        -- X2Y2 on screen
  37++CA50              ; XX13 = regX (i.e. iyh)      ( if XX13 = XX13 is 191 if (x2, y2) is off-screen else 0) we bin XX13 as not needed
  38++CA50              ; so XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen,  XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lo is off the bottom of the screen
  39++CA50 FD 7C        .LL107                  ld      a,iyh
  40++CA52 32 29 CA                             ld      (clipXX13),a                ; debug copy iyh to xx13
  41++CA55 7C                                   ld      a,h                         ; If (X1 hi L-OR Y1) hi  goto LL83                   -- X1Y1 off screen and maybe X2Y2
  42++CA56 B0                                   or      b                           ;
  43++CA57 20 27                                jr      nz,.LL83                    ;
  44++CA59 79                                   ld      a,c                         ; or (y1 lo > bottom of screen)
  45++CA5A ED 27 80                             test    $80                         ; i.e  screen height < y1)
  46++CA5D 20 21                                jr      nz,.LL83
  47++CA5F              ; If we get here, (x1, y1) is on-screen
  48++CA5F FD 7C                                ld      a,iyh                       ; iyh = xx13 at this point if  XX13 <> 0 goto LL108                                                        -- X1Y1 on screen, if we flagged X2Y2 off screen goto LL108
  49++CA61 FE 00                                cp      0
  50++CA63 20 15                                jr      nz, .LL108
  51++CA65              ; Finished clipping exit point ----------------------------------------------------------------------------------------
  52++CA65 79           .ClipDone:              ld      a,c                         ; LL146 (Clip Done)               Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
  53++CA66 32 A7 C0                             ld      (UBnkNewY1),a
  54++CA69 DD 7D                                ld      a,ixl
  55++CA6B 32 A9 C0                             ld      (UBnkNewY2),a
  56++CA6E 7D                                   ld      a,l
  57++CA6F 32 A6 C0                             ld      (UBnkNewX1),a
  58++CA72 7B                                   ld      a,e
  59++CA73 32 A8 C0                             ld      (UBnkNewX2),a
  60++CA76                                      ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
  60++CA76 B7          >                        or a
  61++CA77 C9                                   ret                                 ; 2nd pro different, it swops based on swop flag around here.
  62++CA78              ; Finished out of bounds exit point -----------------------------------------------------------------------------------
  63++CA78              .PointsOutofBounds:     SetCarryFlag                        ; LL109 (ClipFailed) carry flag set as not visible
  63++CA78 37          >                        scf
  64++CA79 C9                                   ret
  65++CA7A FD 7C        .LL108:                 ld      a,iyh
  66++CA7C B7                                   or      a
  67++CA7D 1F                                   rra
  68++CA7E FD 67                                ld      iyh,a                       ; (X2Y2 Off Screen)         XX13 = 95 (i.e. divide it by 2)                                                 -- X1Y1 on screen X2Y2 off screen
  69++CA80 FD 7C        .LL83:                  ld      a,iyh                       ; (Line On screen Test)      if XX13 < 128 then only 1 point is on screen so goto LL115                      -- We only need to deal with X2Y2
  70++CA82 ED 27 80                             test    $80                         ;
  71++CA85 28 28                                jr      z, .LL115                   ;
  72++CA87              ;                       Check for X1 and X2 negative
  73++CA87 7C                                   ld      a,h                         ; If both x1_hi and x2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  74++CA88 A2                                   and     d
  75++CA89                                      JumpIfNegative  .PointsOutofBounds
  75++CA89 FA 78 CA    >                        jp		m, .PointsOutofBounds
  76++CA8C              ;                       Check for Y1 and Y2 negative
  77++CA8C 78                                   ld      a,b                         ; If both y1_hi and y2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  78++CA8D DD A4                                and     ixh
  79++CA8F                                      JumpIfNegative  .PointsOutofBounds
  79++CA8F FA 78 CA    >                        jp		m, .PointsOutofBounds
  80++CA92              ;                       Check for X1 and X2 both > 255
  81++CA92 7C                                   ld      a,h                         ; If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set, jump to LL109 to return from the subroutine with the C  flag set, as the line doesn't fit on-screen
  82++CA93 3D                                   dec     a
  83++CA94 FD 6F                                ld      iyl,a                       ; using iyl as XX12+2 var
  84++CA96 7A                                   ld      a,d                         ; a = x2 hi
  85++CA97 3D                                   dec     a
  86++CA98 FD B5                                or      iyl                         ; (x2 hi -1 ) or (x1 hi -1)
  87++CA9A                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  87++CA9A F2 78 CA    >                        jp		p, .PointsOutofBounds
  88++CA9D              ; by here we have eliminated -ve Y1 bounds so can just test for positive high and bit 7 of lo
  89++CA9D DD 7C                                ld      a,ixh
  90++CA9F 3D                                   dec     a
  91++CAA0 FD 6F                                ld      iyl,a
  92++CAA2 78                                   ld      a,b
  93++CAA3 3D                                   dec     a
  94++CAA4 FD B5                                or      iyl
  95++CAA6                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  95++CAA6 F2 78 CA    >                        jp		p, .PointsOutofBounds
  96++CAA9 79                                   ld      a,c
  97++CAAA DD A5                                and     ixl
  98++CAAC                                      JumpIfNegative .PointsOutofBounds   ; really if both are > 127
  98++CAAC FA 78 CA    >                        jp		m, .PointsOutofBounds
  99++CAAF              ; Clip line: calulate the line's gradient
 100++CAAF              ; here as an optimisation we make sure X1 is always < X2  later on
 101++CAAF              .LL115:                 ClearCarryFlag
 101++CAAF B7          >                        or a
 102++CAB0 E5 D5        .CalcDX:                push    hl,,de
 103++CAB2 EB                                   ex      hl,de                       ; so hl is x2 and de = x1
 104++CAB3 ED 52                                sbc     hl,de
 105++CAB5 22 1D CA                             ld      (clipDx),hl
 106++CAB8 7C                                   ld      a,h
 107++CAB9 32 1F CA                             ld      (clipDxHighNonABS),a
 108++CABC              .CalcDy:                ClearCarryFlag
 108++CABC B7          >                        or a
 109++CABD DD E5 E1                             ld      hl,ix
 110++CAC0 ED 42                                sbc     hl,bc
 111++CAC2 54 5D                                ld      de,hl           ;;OPTIMISATION 6/11/21
 112++CAC4 22 20 CA                             ld      (clipDy),hl     ;OPTIMISATION 6/11/21 commented out
 113++CAC7 7C           .CalcQuadrant:          ld      a,h
 114++CAC8 32 21 CA                             ld      (clipDyHigh),a              ; so A = sign of deltay in effect
 115++CACB              ; So we now have delta_x in XX12(3 2), delta_y in XX12(5 4)  where the delta is (x1, y1) - (x2, y2))
 116++CACB 21 1E CA                             ld      hl,clipDxHigh
 117++CACE AE                                   xor     (hl)                        ; now a = sign dx xor sign dy
 118++CACF 32 9E 7E                             ld      (varS),a                    ; DEBGU putting it in var S too for now
 119++CAD2 32 23 CA                             ld      (clipDxySign),a
 120++CAD5 3A 21 CA     .AbsDy:                 ld      a,(clipDyHigh)
 121++CAD8 ED 27 80                             test    $80
 122++CADB 28 0E                                jr      z,.LL110                    ; If delta_y_hi is positive, jump down to LL110 to skip the following
 123++CADD ED 5B 20 CA                          ld      de,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 124++CAE1                                      macronegate16de                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 124++CAE1 AF          >					xor 	a
 124++CAE2 93          >                    sub 	e
 124++CAE3 5F          >                    ld 		e,a
 124++CAE4 9F          >                    sbc 	a,a
 124++CAE5 92          >                    sub 	d
 124++CAE6 57          >                    ld 		d,a
 125++CAE7 ED 53 20 CA                          ld      (clipDy),de                 ;OPTIMISATION 6/11/21 commented out
 126++CAEB 2A 1D CA     .LL110:                 ld      hl,(clipDx)
 127++CAEE 3A 1E CA                             ld      a,(clipDxHigh)
 128++CAF1 ED 27 80                             test    $80                         ; is it a negative X
 129++CAF4 28 06                                jr      z,.LL111                    ; If delta_x_hi is positive, jump down to LL110 to skip the following
 130++CAF6                                      ;ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 131++CAF6                                      macronegate16hl                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 131++CAF6 AF          >					xor 	a
 131++CAF7 95          >					sub 	l
 131++CAF8 6F          >					ld 		l,a
 131++CAF9 9F          >					sbc 	a,a
 131++CAFA 94          >					sub 	h
 131++CAFB 67          >					ld 		h,a
 132++CAFC              .LL111:
 133++CAFC 7C           .ScaleLoop:             ld      a,h                         ; At this point DX and DY are ABS values
 134++CAFD B2                                   or      d
 135++CAFE 28 0A                                jr      z,.CalculateDelta
 136++CB00                                      ShiftDERight1
 136++CB00 CB 3A       >			   srl d
 136++CB02 CB 1B       >			   rr  e
 137++CB04                                      ShiftHLRight1
 137++CB04 CB 3C       >			   srl h
 137++CB06 CB 1D       >			   rr  l
 138++CB08 18 F2                                jr      .ScaleLoop                  ; scaled down Dx and Dy to 8 bit, Dy may have been negative
 139++CB0A              .CalculateDelta:
 140++CB0A              ; By now, the high bytes of both |delta_x| and |delta_y| are zero We know that h and d are both = 0 as that's what we tested with a BEQ
 141++CB0A AF           .LL113:                 xor     a
 142++CB0B 32 B8 7E                             ld      (varT),a                    ; t = 0
 143++CB0E 7D                                   ld      a,l                         ; If delta_x_lo < delta_y_lo, so our line is more vertical than horizontal, jump to LL114
 144++CB0F                                      JumpIfALTNusng  e, .LL114           ;
 144++CB0F BB          >                        cp      e
 144++CB10 DA 20 CB    >                        jp		c, .LL114
 145++CB13              ; Here Dx >= Dy sp calculate Delta Y / delta X
 146++CB13 32 9C 7E     .DxGTEDy:               ld      (varQ),a                    ; Set Q = delta_x_lo
 147++CB16 57                                   ld      d,a                         ; d = also Q for calc
 148++CB17 7B                                   ld      a,e                         ; Set A = delta_y_lo
 149++CB18 CD 1A 94                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate:  R (actually a reg) = 256 * A / Q   = 256 * delta_y_lo / delta_x_lo
 150++CB1B 32 9D 7E                             ld      (varR),a                    ;
 151++CB1E 18 10                                jr      .LL116                      ; Jump to LL116, as we now have the line's gradient in R
 152++CB20              ; Here Delta Y > Delta X so calulate delta X / delta Y
 153++CB20 7B           .LL114:                 ld      a,e                         ; Set Q = delta_y_lo
 154++CB21 57                                   ld      d,a
 155++CB22 32 9C 7E                             ld      (varQ),a
 156++CB25 7D                                   ld      a,l                         ; Set A = delta_x_lo
 157++CB26 CD 1A 94                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate: R = 256 * A / Q  = 256 * delta_x_lo / delta_y_lo
 158++CB29 32 9D 7E                             ld      (varR),a                    ;
 159++CB2C 21 B8 7E                             ld      hl,varT                     ; T was set to 0 above, so this sets T = &FF
 160++CB2F 35                                   dec     (hl)
 161++CB30 D1           .LL116:                 pop     de                          ; get back X2
 162++CB31 E1                                   pop     hl                          ; get back X1 into hl,
 163++CB32 3A 9D 7E                             ld      a,(varR)                    ; Store the gradient in XX12+2 this can be optimised later
 164++CB35 32 22 CA                             ld      (clipGradient),a
 165++CB38 FD 6F                                ld      iyl,a
 166++CB3A 3A 9E 7E                             ld      a,(varS)
 167++CB3D 32 23 CA                             ld      (clipDxySign),a             ;  Store the type of slope in XX12+3, bit 7 clear means ?Not needed as clipDxySign is used for varS earlier?
 168++CB40                                                                          ; top left to bottom right, bit 7 set means top right to bottom left **CODE IS WRONG HERE A TEST IS BL to TR
 169++CB40 FD 7C                                ld      a,iyh                       ; iyh was XX13 from earlier
 170++CB42 FE 00                                cp      0                           ; If XX13 = 0, skip the following instruction
 171++CB44 28 05                                jr      z,.LL138                    ;
 172++CB46 ED 27 80                             test    $80                         ; If XX13 is positive, it must be 95. This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump to LLX117 to swap the (x1, y1) and (x2, y2)
 173++CB49 28 13                                jr      z,.LLX117                   ; coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 174++CB4B              ; If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 175++CB4B CD 72 CB     .LL138                  call    ClipPointHLBC               ; Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 176++CB4E FD 7C                                ld      a,iyh                       ; If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to LL124 to return with a successfully clipped line
 177++CB50 ED 27 80                             test    $80
 178++CB53 28 1A                                jr      z,.LL124
 179++CB55              ; If we get here, XX13 = 191 (both coordinates are off-screen)
 180++CB55 7C           .LL117:                 ld      a,h                         ; If either of x1_hi or y1_hi are non-zero, jump to
 181++CB56 B0                                   or      b                           ; LL137 to return from the subroutine with the C flag
 182++CB57 C2 78 CA                             jp      nz, .PointsOutofBounds      ; set, as the line doesn't fit on-screen
 183++CB5A B1                                   or      c                           ; if x1 and y1 hi are both zero test bit 8 or Y1 to see if its > 128
 184++CB5B FA 78 CA                             jp      m, .PointsOutofBounds       ; set, as the line doesn't fit on-screen
 185++CB5E              ; If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing
 186++CB5E              ; the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 187++CB5E EB           .LLX117:                ex      de,hl                       ;  swap X1 and X2
 188++CB5F DD E5                                push    ix                          ;  swap Y1 and Y2
 189++CB61 C5                                   push    bc
 190++CB62 DD E1                                pop     ix
 191++CB64 C1                                   pop     bc
 192++CB65 CD 72 CB                             call    ClipPointHLBC               ;  Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 193++CB68 3A 26 CA                             ld      a,(SWAP)
 194++CB6B 3D                                   dec     a
 195++CB6C 32 26 CA                             ld      (SWAP),a                    ; Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 196++CB6F C3 65 CA     .LL124:                 jp      .ClipDone                    ; now put points in place
 197++CB72              ; Move a point along a line until it is on-screen point is held in HL(X) BC(Y) LL118
 198++CB72              ; iyh still holds XX13 iyl still holds gradient
 199++CB72 7C           ClipPointHLBC:          ld      a,h                         ; If x1_hi is positive, jump down to LL119 to skip the following
 200++CB73 ED 27 80                             test    $80
 201++CB76 28 17                                jr      z,.LL119
 202++CB78 32 9E 7E     .X1isNegative:          ld      (varS),a                    ;  Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 203++CB7B E5 D5 C5                             push    hl,,de,,bc
 204++CB7E CD F4 CB                             call    LL120                       ;  Call LL120 to calculate:   (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 205++CB81                                                                          ;                             (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 206++CB81                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 207++CB81 C1 D1 E1                             pop    hl,,de,,bc                   ;  get coordinates back
 208++CB84 2A 27 CA                             ld      hl,(varYX)
 209++CB87 09                                   add     hl,bc                       ; y1 = y1 + varYX
 210++CB88 44 4D                                ld      bc,hl
 211++CB8A 21 00 00                             ld      hl,0                        ; Set x1 = 0
 212++CB8D 18 1A                                jr      .LL134                      ; in BBC is set x to 0 to force jump, we will just jump
 213++CB8F FE 00        .LL119:                 cp      0
 214++CB91 28 16                                jr      z,.LL134                    ;  If x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen (as 0 <= (x_hi x_lo) <= 255)
 215++CB93 3D                                   dec     a
 216++CB94 32 9E 7E                             ld      (varS),a                    ;  Otherwise x1_hi is positive, i.e. x1 >= 256 and off the right side of the screen, so set S = x1_hi - 1
 217++CB97 E5 D5 C5                             push    hl,,de,,bc
 218++CB9A CD F4 CB                             call    LL120                      ;  Call LL120 to calculate: (Y X) = (S x1_lo) * XX12+2      if T = 0  = (x1 - 256) * gradient
 219++CB9D                                                                          ;                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 220++CB9D                                                                          ;  with the sign of (Y X) set to the opposite of theline's direction of slope
 221++CB9D C1 D1 E1                             pop     hl,,de,,bc
 222++CBA0 2A 27 CA                             ld      hl,(varYX)
 223++CBA3 09                                   add     hl,bc                        ;OPTIMISATION 6/11/21 simplfied post debug
 224++CBA4 44 4D                                ld      bc,hl                        ;OPTIMISATION 6/11/21 simplfied post debug
 225++CBA6 21 FF 00                             ld      hl,255                      ; Set x1 = 255
 226++CBA9              ; We have moved the point so the x-coordinate is on screen (i.e. in the range 0-255), so now for they-coordinate
 227++CBA9 78           .LL134:                 ld      a,b                         ; If y1_hi is positive, jump down to LL135  to skip the following
 228++CBAA ED 27 80                             test    $80                         ;
 229++CBAD 28 1A                                jr      z,.LL135                    ;
 230++CBAF 32 9E 7E                             ld      (varS),a                    ; Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 231++CBB2 79                                   ld      a,c                         ; Set R = y1_lo
 232++CBB3 32 9D 7E                             ld      (varR),a                    ;
 233++CBB6 E5 D5 C5                             push    hl,,de,,bc
 234++CBB9 CD 55 CC                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 235++CBBC                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 236++CBBC                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 237++CBBC C1 D1 E1                             pop     hl,,de,,bc
 238++CBBF D5                                   push    de
 239++CBC0 EB                                   ex      hl,de                       ; de = x1
 240++CBC1 2A 27 CA                             ld      hl,(varYX)                  ; hl = varYX
 241++CBC4 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 242++CBC5 D1                                   pop     de                          ; de = x2 again
 243++CBC6 01 00 00                             ld      bc,0                        ; Set y1 = 0
 244++CBC9 79           .LL135:                 ld      a,c                         ; if bc < 128 then no work to do
 245++CBCA E6 80                                and     $80
 246++CBCC B0                                   or      b                           ; here we see if c bit 8 is set or anything in b as we know if its 0 this would mean there is no need to clip
 247++CBCD C8                                   ret     z
 248++CBCE E5                                   push    hl
 249++CBCF 60 69                                ld      hl,bc
 250++CBD1 01 80 00                             ld      bc,128
 251++CBD4 B7                                   or      a
 252++CBD5 ED 42                                sbc     hl,bc                       ; hl =  (S R) = (y1_hi y1_lo) - 128
 253++CBD7 22 9D 7E                             ld      (varRS), hl                 ; and now RS (or SR)
 254++CBDA 7C                                   ld      a,h
 255++CBDB E1                                   pop     hl
 256++CBDC ED 27 80                             test    $80                         ; If the subtraction underflowed, i.e. if y1 < 192, then y1 is already on-screen, so jump to LL136 to return from the subroutine, as we are done
 257++CBDF C0                                   ret     nz
 258++CBE0              ; If we get here then y1 >= 192, i.e. off the bottom of the screen
 259++CBE0 E5 D5 C5     .LL139:                 push    hl,,de,,bc
 260++CBE3 CD 55 CC                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 261++CBE6                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 262++CBE6                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 263++CBE6 C1 D1 E1                             pop     hl,,de,,bc
 264++CBE9 D5                                   push    de
 265++CBEA EB                                   ex      hl,de
 266++CBEB 2A 27 CA                             ld      hl,(varYX)
 267++CBEE 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 268++CBEF 01 7F 00                             ld      bc,127                      ; set bc to 127 bottom of screen
 269++CBF2 D1                                   pop     de
 270++CBF3 C9           .LL136:                 ret                                 ;  Return from the subroutine
 271++CBF4                      ENDIF
 272++CBF4
 273++CBF4              ; Calculate the following:   * If T = 0  (more vertical than horizontal), (Y X) = (S x1_lo) * XX12+2
 274++CBF4              ;                            * If T <> 0 (more horizontal than vertical), (Y X) = (S x1_lo) / XX12+2
 275++CBF4              ;                              giving (Y X) the opposite sign to the slope direction in XX12+3.
 276++CBF4              ; Other entry points        LL122                Calculate (Y X) = (S R) * Q and set the sign to the opposite of the top byte on the stack
 277++CBF4 7D           LL120:                  ld      a,l                          ; Set R = x1_lo
 278++CBF5 32 9D 7E                             ld      (varR),a
 279++CBF8 CD B2 CC                             call    LL129                        ;  Call LL129 to do the following:  Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 280++CBFB F5                                   push    af                           ;  Store A on the stack so we can use it later
 281++CBFC C5                                   push    bc
 282++CBFD 47                                   ld      b,a
 283++CBFE 3A B8 7E                             ld      a,(varT)                     ; instead : (Y X) = (S R ) / Q
 284++CC01 FE 00                                cp      0
 285++CC03 78                                   ld      a,b
 286++CC04 C1                                   pop     bc                           ; we can't use af as that would disrupt the flags
 287++CC05 C2 1C CC                             jp      nz, .LL121
 288++CC08              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 289++CC08 3A 22 CA     .LL122:                  ld      a,(clipGradient)
 290++CC0B 32 9C 7E                             ld      (varQ),a; optimise
 291++CC0E CD A6 8F                             call    HLequSRmulQdiv256
 292++CC11 22 27 CA                             ld      (varYX),hl
 293++CC14 F1                                   pop     af
 294++CC15 ED 27 80                             test    $80
 295++CC18 CA 48 CC                             jp      z,.LL133
 296++CC1B C9                                   ret
 297++CC1C 11 FE FF     .LL121:                  ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 298++CC1F 2A 9D 7E                             ld      hl,(varRS)                  ; hl = RS
 299++CC22 3A 9C 7E                             ld      a,(varQ)
 300++CC25 47                                   ld      b,a                         ; b = q
 301++CC26              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 301++CC26 CB 25       >			   sla l
 301++CC28 CB 14       >			   rl  h
 302++CC2A 7C                                   ld      a,h
 303++CC2B 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 304++CC2D                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 304++CC2D B8          >                        cp      b
 304++CC2E DA 39 CC    >                        jp		c, .LL132
 305++CC31 3F           .LL131:                 ccf                                 ; compliment carry
 306++CC32 98                                   sbc     a,b                         ; q
 307++CC33 67                                   ld      h,a                         ; h (s)
 308++CC34 7D                                   ld      a,l                         ; r
 309++CC35 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 310++CC37 37                                   scf                                 ; set carry for next rolls
 311++CC38 3F                                   ccf
 312++CC39              .LL132:                 RollDELeft1                         ; Rotate de bits left
 312++CC39 CB 13       >               rl  e
 312++CC3B CB 12       >               rl  d
 313++CC3D 38 E7                                jr      c,.LL130                    ;
 314++CC3F ED 53 27 CA                          ld      (varYX),de
 315++CC43 F1                                   pop     af              ; get back sign
 316++CC44 ED 27 80                             test    $80
 317++CC47 C8                                   ret     z               ; if negative then return with value as is reversed sign
 318++CC48 2A 27 CA     .LL133:                 ld      hl,(varYX)      ; may not actually need this?
 319++CC4B                                      NegHL
 319++CC4B AF          >                    xor a
 319++CC4C 95          >                    sub l
 319++CC4D 6F          >                    ld l,a
 319++CC4E 9F          >                    sbc a,a
 319++CC4F 94          >                    sub h
 319++CC50 67          >                    ld h,a
 320++CC51 22 27 CA                             ld      (varYX),hl
 321++CC54 C9           .LL128:                 ret
 322++CC55
 323++CC55
 324++CC55
 325++CC55
 326++CC55              ; Calculate the following: * If T = 0,  calculate (Y X) = (S R) / XX12+2 (actually SR & XX12+2 /256)
 327++CC55              ;                          * If T <> 0, calculate (Y X) = (S R) * XX12+2
 328++CC55              ;                          giving (Y X) the opposite sign to the slope direction in XX12+3.
 329++CC55              ;
 330++CC55              ; Other entry points:      LL121                Calculate (Y X) = (S R) / Q and set the sign to the opposite of the top byte on the stack
 331++CC55              ;                          LL133                Negate (Y X) and return from the subroutine
 332++CC55              ;                          LL128                Contains an RTS
 333++CC55 CD B2 CC     LL123:                  call    LL129                       ; Call LL129 to do the following: Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 334++CC58 F5                                   push    af                          ; Store A on the stack so we can use it later
 335++CC59 C5                                   push    bc                          ; If T is non-zero, so it's more horizontal than vertical, jump down to LL121 to calculate this
 336++CC5A 47                                   ld      b,a
 337++CC5B 3A B8 7E                             ld      a,(varT)                    ; instead : (Y X) = (S R) * Q *** this looks to be the wrong way roudn for Y!!!!
 338++CC5E FE 00                                cp      0
 339++CC60 78                                   ld      a,b
 340++CC61 C1                                   pop     bc
 341++CC62 C2 9E CC                             jp      nz, .LL122
 342++CC65              ; The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2, its actually X.Y=R.S*256/Q
 343++CC65 11 FE FF     .LL121:                 ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 344++CC68 2A 9D 7E                             ld      hl,(varRS)                  ; hl = RS
 345++CC6B 3A 9C 7E                             ld      a,(varQ)
 346++CC6E 47                                   ld      b,a                         ; b = q
 347++CC6F              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 347++CC6F CB 25       >			   sla l
 347++CC71 CB 14       >			   rl  h
 348++CC73 7C                                   ld      a,h
 349++CC74 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 350++CC76                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 350++CC76 B8          >                        cp      b
 350++CC77 DA 82 CC    >                        jp		c, .LL132
 351++CC7A 3F           .LL131:                 ccf                                 ; compliment carry
 352++CC7B 98                                   sbc     a,b                         ; q
 353++CC7C 67                                   ld      h,a                         ; h (s)
 354++CC7D 7D                                   ld      a,l                         ; r
 355++CC7E DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 356++CC80 37                                   scf                                 ; set carry for next rolls
 357++CC81 3F                                   ccf
 358++CC82              .LL132:                 RollDELeft1                         ; Rotate de bits left
 358++CC82 CB 13       >               rl  e
 358++CC84 CB 12       >               rl  d
 359++CC86 38 E7                                jr      c,.LL130                    ;
 360++CC88 ED 53 27 CA                          ld      (varYX),de
 361++CC8C F1                                   pop     af              ; get back sign
 362++CC8D ED 27 80                             test    $80
 363++CC90 C8                                   ret     z               ; if negative then return with value as is reversed sign
 364++CC91 2A 27 CA     .LL133:                 ld      hl,(varYX)      ; may not actually need this?
 365++CC94                                      NegHL
 365++CC94 AF          >                    xor a
 365++CC95 95          >                    sub l
 365++CC96 6F          >                    ld l,a
 365++CC97 9F          >                    sbc a,a
 365++CC98 94          >                    sub h
 365++CC99 67          >                    ld h,a
 366++CC9A 22 27 CA                             ld      (varYX),hl
 367++CC9D C9           .LL128:                 ret
 368++CC9E              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 369++CC9E 3A 22 CA     .LL122:                 ld      a,(clipGradient)
 370++CCA1 32 9C 7E                             ld      (varQ),a; optimise
 371++CCA4 CD A6 8F                             call    HLequSRmulQdiv256
 372++CCA7 22 27 CA                             ld      (varYX),hl
 373++CCAA F1                                   pop     af
 374++CCAB ED 27 80                             test    $80
 375++CCAE CA 91 CC                             jp      z,.LL133
 376++CCB1 C9                                   ret
 377++CCB2
 378++CCB2              ; Do the following, in this order:  Q = XX12+2
 379++CCB2              ;                                   A = S EOR XX12+3
 380++CCB2              ;                                   (S R) = |S R|
 381++CCB2              ; This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 382++CCB2 3A 22 CA     LL129:                  ld      a,(clipGradient)
 383++CCB5 32 9C 7E                             ld      (varQ),a                    ; Set Q = XX12+2
 384++CCB8 3A 9E 7E                             ld      a,(varS)                    ; If S is positive, jump to LL127
 385++CCBB E5 F5                                push    hl,,af                      ; else
 386++CCBD ED 27 80                             test    $80                         ;   if bit 7 is clear
 387++CCC0 28 0C                                jr      z,.LL127                    ;      RS = ABS RS
 388++CCC2 2A 9D 7E                             ld      hl,(varRS)                  ;      .
 389++CCC5                                      NegHL                               ;      .
 389++CCC5 AF          >                    xor a
 389++CCC6 95          >                    sub l
 389++CCC7 6F          >                    ld l,a
 389++CCC8 9F          >                    sbc a,a
 389++CCC9 94          >                    sub h
 389++CCCA 67          >                    ld h,a
 390++CCCB 22 9D 7E                             ld      (varRS),hl                  ;      .
 391++CCCE 21 23 CA     .LL127:                 ld      hl,clipDxySign              ;   hl = dxy sign
 392++CCD1 F1                                   pop     af                          ;
 393++CCD2 AE                                   xor     (hl)                        ; a = S XOR clipDxySign
 394++CCD3 E1                                   pop     hl
 395++CCD4 C9                                   ret
 396++CCD5
 397++CCD5              ;--------------------------------------------------------------------------------------
 398++CCD5              ; Thow away out of bounds by more than 250
 399++CCD5              ClipLineV3:             ;break
 400++CCD5                      IFDEF       CLIPVersion3
 401++CCD5 ~            ;My logic version
 402++CCD5 ~            .CheckYorder:
 403++CCD5 ~                                    ld      hl,(UbnkPreClipY1)
 404++CCD5 ~                                    ld      de,(UbnkPreClipY2)
 405++CCD5 ~                                    call    CompareHLDESgn
 406++CCD5 ~                                    jr      c,.LineP1toP2                          ; if Y1 < Y2 then we can use the points as is else we have to swap
 407++CCD5 ~            .LineP2toP1:            ld      bc,(UbnkPreClipY2)                      ; fetch and write out in reverse
 408++CCD5 ~                                    ld      ix,(UbnkPreClipY1)
 409++CCD5 ~                                    ld      de,(UbnkPreClipX1)
 410++CCD5 ~                                    ld      hl,(UbnkPreClipX2)
 411++CCD5 ~                                    ld      (UbnkPreClipY1),bc                      ; bc - XX15(2,3) Y1
 412++CCD5 ~                                    ld      (UbnkPreClipY2),ix                      ; ix - XX12(0,1) Y2
 413++CCD5 ~                                    ld      (UbnkPreClipX1),hl                      ; hl - XX15(0,1) X1
 414++CCD5 ~                                    ld      (UbnkPreClipX2),de                      ;  de - XX15(4,5) X2
 415++CCD5 ~                                    jp      .CheckNoClip
 416++CCD5 ~            .LineP1toP2             ld      bc,(UbnkPreClipY1)                      ; bc - XX15(2,3) Y1
 417++CCD5 ~                                    ld      ix,(UbnkPreClipY2)                      ; ix - XX12(0,1) Y2
 418++CCD5 ~                                    ld      hl,(UbnkPreClipX1)                      ; hl - XX15(0,1) X1
 419++CCD5 ~                                    ld      de,(UbnkPreClipX2)                      ; de - XX15(4,5) X2
 420++CCD5 ~            .CheckNoClip:           ld      a,b
 421++CCD5 ~                                    or      d
 422++CCD5 ~                                    or      h
 423++CCD5 ~                                    or      ixh
 424++CCD5 ~                                    jp      nz,.CheckXOffScreen                 ; if both Y1 and y2 have bit 7 set
 425++CCD5 ~                                    ld      a,c                                 ; then we clip
 426++CCD5 ~                                    and     ixl
 427++CCD5 ~                                    test    $80
 428++CCD5 ~                                    jp      z, .ClipComplete
 429++CCD5 ~            ;if either x1hi x2hi are 0 then we clip. if both <> 0and both same sign exit
 430++CCD5 ~            .CheckXOffScreen:       ld      a,h
 431++CCD5 ~                                    xor     d
 432++CCD5 ~                                    test    $80                                 ; non descructive test of bit 7 is set
 433++CCD5 ~                                    jp      nz,.X1X2OppositeSign                ; if bit 7 was set then x1 and x2 must be opposite signs so its on screen
 434++CCD5 ~            .X1X2SameSigns:         ld      a,h                                 ; so to get there h and d must be the same sign
 435++CCD5 ~                                    test    $80                                 ; if they are the same sign and at x1 is negative then x2 must be negative so off screen
 436++CCD5 ~                                    JumpIfAIsZero .X1X2CheckIfBothRight
 437++CCD5 ~            .X1X2BothNegative:      SetCarryFlag                                ; to get to here x1 and x2 must be high and off the same sign so its not to draw
 438++CCD5 ~                                    ret
 439++CCD5 ~            .X1X2CheckIfBothRight:  and     a                                   ; we have h in a already
 440++CCD5 ~                                    jr      z,.X1OnScreen
 441++CCD5 ~                                    ld      a,d
 442++CCD5 ~                                    and     a
 443++CCD5 ~                                    jr      z,.X2OnScreen
 444++CCD5 ~            .X1X2OffRightSide:      SetCarryFlag                                ; to get to here x1 and x2 must be high and off the same sign so its not to draw
 445++CCD5 ~                                    ret
 446++CCD5 ~            ;                       to get to here x1 and x2 either span -ve to +ve or from on screen to off screen
 447++CCD5 ~            .X1OnScreen:
 448++CCD5 ~            .X2OnScreen:
 449++CCD5 ~            .X1X2OppositeSign:
 450++CCD5 ~            ;                       Now check to see if Y is off screen
 451++CCD5 ~            .CheckYOffScreen:       ld      a,b                                     ; Check if y1 and y2 are opposite signs, fi so it spans screen so we are good
 452++CCD5 ~            .CheckBothYNegative:    xor     ixh
 453++CCD5 ~                                    test    $80                                     ; if bit 7 is set then opposite signs
 454++CCD5 ~                                    jp      nz,.Y1Y2OppositeSign                    ; if y1 and y2 are opposite signs its on screen and spans at least one side
 455++CCD5 ~            .Y1Y2SameSign:          ld      a,b                                     ; if they are the same sign then if one is negative, so is the other so off screen
 456++CCD5 ~                                    test    $80
 457++CCD5 ~                                    jp      z,.Y1Y2Positive
 458++CCD5 ~            .Y1Y2Negative:          SetCarryFlag
 459++CCD5 ~                                    ret
 460++CCD5 ~            .Y1Y2Positive:          ld      a,c                                     ; if its the same sign y1 or y2 could be 0 and if they are
 461++CCD5 ~                                    and     $80                                     ; this will test to see if b >0 or c > 127
 462++CCD5 ~                                    or      b                                       ;
 463++CCD5 ~                                    jp      z,.Y1OnScreen
 464++CCD5 ~                                    ld      a,ixl
 465++CCD5 ~                                    and     $80
 466++CCD5 ~                                    or      ixh
 467++CCD5 ~                                    jp      z,.Y2OnScreen
 468++CCD5 ~            .Y1Y2OffBottomSide:     SetCarryFlag
 469++CCD5 ~                                    ret
 470++CCD5 ~            .Y1OnScreen:
 471++CCD5 ~            .Y2OnScreen:
 472++CCD5 ~            .Y1Y2OppositeSign:
 473++CCD5 ~            .StartProcessing:       ld      hl,(UbnkPreClipX1)                      ; Now we can test and Clip
 474++CCD5 ~                                    ld      de,(UbnkPreClipX2)                      ; de - XX15(4,5)
 475++CCD5 ~                                    ld      iyh,0                                   ; set iyh flags to 0
 476++CCD5 ~            ; if x1hi or y1 high <> 0 or y1 > 127 then set bit 1 of clipcoord       ; we can optimise this later
 477++CCD5 ~                                    ld      a,h
 478++CCD5 ~                                    or      b
 479++CCD5 ~                                    jr      z,.CheckP1Ylo
 480++CCD5 ~            ;                       iyh     bit 0 - P1 Needs Clipping
 481++CCD5 ~            ;                               bit 1 - P2 Needs Clipping
 482++CCD5 ~            ;                               bit 2 - x1 >= x2 (left to right)
 483++CCD5 ~            ;                               bit 3 - y1 >= y2 (top to bottom)
 484++CCD5 ~            ;                               bit 4 -  DY/DX (steep)
 485++CCD5 ~            .P1OffScreen:           ld      iyh,1                                   ; if either p1 x or y was off screen set bit 0 to 1
 486++CCD5 ~                                    jp      .CheckP2OffScreen                       ; .
 487++CCD5 ~            .CheckP1Ylo:            ld      a,c                                     ; .
 488++CCD5 ~                                    and     $80                                     ; .
 489++CCD5 ~                                    jr      z,.CheckP2OffScreen                     ; .
 490++CCD5 ~                                    ld      iyh,1                                   ; .
 491++CCD5 ~            .CheckP2OffScreen:      ld      a,d                                     ; if x2hi or y2 off screen then set bit 2 of clipcoord to 1
 492++CCD5 ~                                    or      ixh                                     ; .
 493++CCD5 ~                                    jr      z,.CheckP2Ylo                           ; .
 494++CCD5 ~            .P2OffScreen:           ld      a,iyh                                   ; .
 495++CCD5 ~                                    or      2                                       ; .
 496++CCD5 ~                                    ld      iyh,a                                   ; .
 497++CCD5 ~                                    jp      .CheckXDirection                        ; .
 498++CCD5 ~            .CheckP2Ylo:            ld      a,ixl                                   ; .
 499++CCD5 ~                                    and     $80                                     ; .
 500++CCD5 ~                                    jr      z,.CheckXDirection                      ; .
 501++CCD5 ~                                    ld      a,iyh                                   ; .
 502++CCD5 ~                                    or      2                                       ; .
 503++CCD5 ~                                    ld      iyh,a                                   ; .
 504++CCD5 ~            .CheckXDirection:       push    de,,hl
 505++CCD5 ~                                    call    CompareHLDESgn                          ; IF HL equals DE, Z=1,C=0, IF HL is less than DE, Z=0,C=1, IF HL is more than DE, Z=0,C=0
 506++CCD5 ~                                    pop     de,,hl
 507++CCD5 ~                                    jp      c,.CalculateDx                          ;
 508++CCD5 ~            .X1gteX2:               ld      a,iyh                                   ; if x1 >= x2 then set bit 3 to denote -ve x direction, note we will eliminate horziontal / vertical early as an optimisation
 509++CCD5 ~                                    or      4                                       ; .
 510++CCD5 ~                                    ld      iyh,a                                   ; .
 511++CCD5 ~                                    ; Y Direction is now always top to bottom
 512++CCD5 ~            .CalculateDx:           ClearCarryFlag                                  ;                       calculate DX
 513++CCD5 ~                                    sbc     hl,de                                   ; .
 514++CCD5 ~            .ABSDX:                 ld      a,h                                     ; HL = | HL - DE |
 515++CCD5 ~                                    test    $80                                     ; .
 516++CCD5 ~                                    jr      z,.DXPositive                           ; .
 517++CCD5 ~                                    macronegate16hl                                 ; .
 518++CCD5 ~            .DXPositive:            ex      de,hl                                   ; de = abs delta x
 519++CCD5 ~            .CalculateDy:           ClearCarryFlag                                  ; hl = Y2 -Y1 as its pre sorted its always positive if on screen
 520++CCD5 ~                                    ld      hl,ix                                   ; iy = hl = Y2 - Y1
 521++CCD5 ~                                    sbc     hl,bc                                   ; .
 522++CCD5 ~            .DYPositive:            ; Scale DX and DY to 8 bit, by here hl = abs dy, de = abs dx
 523++CCD5 ~            ;calculate DY
 524++CCD5 ~            .ScaleLoop:             ld      a,h                                     ; At this point DX and DY are ABS values
 525++CCD5 ~                                    or      d                                       ; .
 526++CCD5 ~                                    jr      z,.ScaleDone                            ; .
 527++CCD5 ~                                    ShiftDERight1                                   ; .
 528++CCD5 ~                                    ShiftHLRight1                                   ; .
 529++CCD5 ~                                    jr      .ScaleLoop                              ; scaled down Dx and Dy to 8 bit, Dy may have been;;                                                                                               negative
 530++CCD5 ~            .ScaleDone:             ; hl = ABS DY, DE = ABS DX,  bc = Y1, ix = Y2,   note H and D will be zero
 531++CCD5 ~            ; if Dx = 0 then horizontal line and clip X1 & X2 only then exit
 532++CCD5 ~            ; if Dy = 0 then vertical line and clip Y1 & Y2 only then exit
 533++CCD5 ~
 534++CCD5 ~            ; if DX < DY  gradient = 256 * delta_x_lo / delta_y_lo
 535++CCD5 ~            ;        else gradient = 256 * delta_y_lo / delta_x_lo, set bit 5 of clipcord
 536++CCD5 ~            .CalculateDelta:        ld      a,e                                     ; if DX < DY goto DX/DY
 537++CCD5 ~                                    JumpIfALTNusng l,.DXdivDY                       ; else do DY/DX
 538++CCD5 ~            .DYdivDX:               ld      a,l                                     ;    A = DY
 539++CCD5 ~                                    ld      d,e                                     ;    D = DX
 540++CCD5 ~                                    call    AEquAmul256DivD                         ;    A = R = 256 * DY / DX
 541++CCD5 ~            .SaveGradientDYDX:      ld      (Gradient),a
 542++CCD5 ~                                    ld      a,iyh                                   ;    bit 5 of iyh denotes that its a DX/DY (steep), if its clear its DY/DX (shallow)
 543++CCD5 ~                                    or      16                                      ;    .
 544++CCD5 ~                                    ld      iyh,a                                   ;    .
 545++CCD5 ~                                    jp      .ClipP1                                 ;    .
 546++CCD5 ~            .DXdivDY:               ld      a,e                                     ;    A = DX
 547++CCD5 ~                                    ld      d,l                                     ;    D = DY
 548++CCD5 ~                                    call    AEquAmul256DivD                         ;    A = R = 256 * DX / DY
 549++CCD5 ~            .SaveGradientDXDY:      ld      (Gradient),a
 550++CCD5 ~            ; if bit 1 of clipccord is set call    LL118
 551++CCD5 ~            .ClipP1:                ld      a,iyh                                   ; if bit 1 is clear to say no need to clip pont 1 we just jump to point 2
 552++CCD5 ~                                    test    1                                       ; .
 553++CCD5 ~                                    jp      z,.ClipP2                               ; .
 554++CCD5 ~                                    call    LL118v3                                 ; else clip P1 first
 555++CCD5 ~                                    ld      a,b                                     ;      and if b or h have a value its failed to totally clip  as it may be only in bounds on just x or y
 556++CCD5 ~                                    or      h                                       ;      .
 557++CCD5 ~                                    jr      z, .P1Ygt127Check                       ;      .
 558++CCD5 ~            .P1HighOutofBounds:     SetCarryFlag                                    ;      .
 559++CCD5 ~                                    ret                                             ;      .
 560++CCD5 ~            .P1Ygt127Check:         ld      a,c                                     ;      or if y > 127 its failed to totally clip
 561++CCD5 ~                                    test    $80                                     ;      .
 562++CCD5 ~                                    SetCarryFlag                                    ;      .
 563++CCD5 ~                                    ret     nz                                      ;      .
 564++CCD5 ~                                    ld      (UbnkPreClipY1), bc                     ;      else its valid and clipped point 1 so save ti back
 565++CCD5 ~                                    ld      (UbnkPreClipX1), hl
 566++CCD5 ~            ; if bit 2 of clipcoord is set
 567++CCD5 ~            ;        swap x1y1 with x2y2
 568++CCD5 ~            ;        call    LL118
 569++CCD5 ~            .ClipP2:                ld      a,iyh                                   ; so now repeat all that for point 2
 570++CCD5 ~                                    and     2
 571++CCD5 ~                                    jp      z,.ClipComplete
 572++CCD5 ~                                    call    LL118v3PreSwap                          ; now clip p2
 573++CCD5 ~                                    ld      a,b                                     ; if either high is set then it failed to properly clip
 574++CCD5 ~                                    or      h                                       ; .
 575++CCD5 ~                                    jr      z, .P2Ygt127Check                       ; .
 576++CCD5 ~            .P2HighOutofBounds:     SetCarryFlag                                    ; .
 577++CCD5 ~                                    ret                                             ; .
 578++CCD5 ~            .P2Ygt127Check:         ld      a,c                                     ; if c > 127 then it also failed to clip
 579++CCD5 ~                                    test    $80                                     ; .
 580++CCD5 ~                                    SetCarryFlag                                    ; .
 581++CCD5 ~                                    ret     nz                                      ; .
 582++CCD5 ~                                    ld      (UbnkPreClipY2), bc                     ; bc - XX15(2,3);;
 583++CCD5 ~                                    ld      (UbnkPreClipX2), hl
 584++CCD5 ~            ;clip compelte exit
 585++CCD5 ~            .ClipComplete:          ld      bc,(UbnkPreClipY1)                      ; bc - XX15(2,3);;
 586++CCD5 ~                                    ld      hl,(UbnkPreClipX1)
 587++CCD5 ~                                    ld      ix,(UbnkPreClipY2)                      ; bc - XX15(2,3);;
 588++CCD5 ~                                    ld      de,(UbnkPreClipX2)
 589++CCD5 ~            .SaveClippedLine:       ld      a,c                                     ; Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
 590++CCD5 ~                                    ld      (UBnkNewY1),a
 591++CCD5 ~                                    ld      a,ixl
 592++CCD5 ~                                    ld      (UBnkNewY2),a
 593++CCD5 ~                                    ld      a,l
 594++CCD5 ~                                    ld      (UBnkNewX1),a
 595++CCD5 ~                                    ld      a,e
 596++CCD5 ~                                    ld      (UBnkNewX2),a
 597++CCD5 ~                                    ClearCarryFlag                              ; we have a success so not carry
 598++CCD5 ~                                    ret
 599++CCD5 ~            ;-----------------------------------------------------------------------------------------------------------------------------------
 600++CCD5 ~            LL118v3PreSwap:         ld      bc,(UbnkPreClipY2)                  ; bc - XX15(2,3);;
 601++CCD5 ~                                    ld      hl,(UbnkPreClipX2)
 602++CCD5 ~                                    jp      LL118v3Fetched
 603++CCD5 ~            ;-----------------------------------------------------------------------------------------------------------------------------------
 604++CCD5 ~            LL118v3:                ld      bc,(UbnkPreClipY1)                  ; bc - XX15(2,3);;
 605++CCD5 ~                                    ld      hl,(UbnkPreClipX1)
 606++CCD5 ~            ;-----------------------------------------------------------------------------------------------------------------------------------
 607++CCD5 ~            LL118v3Fetched:
 608++CCD5 ~            ;                       At this point bc = y position, hl = x position both 16 bit
 609++CCD5 ~            ;                       if x < 0 then x = 0
 610++CCD5 ~            ;                                     adjust = -x */ gradient depending on if its steep or shallow
 611++CCD5 ~            ;                                     y = y +- adjust depending on if we are going +ve direction or negative direction  (or simplify it, that it will always be + for x1y1 and - for x2y2 as we pre-sort)
 612++CCD5 ~            ;                       if x > 255 then x = 255
 613++CCD5 ~            ;                                     adjust = x-255 */ gradient
 614++CCD5 ~            ;                                     y = y +- adjust depending on if we are going +ve direction or negative direction  (or simplify it, that it will always be + for x1y1 and - for x2y2 as we pre-sort)
 615++CCD5 ~            ;                       if y < 0 then y = 0
 616++CCD5 ~            ;                                     adjust = -y */ gradient
 617++CCD5 ~            ;                                     x = x +- adjust depending on if we are going left to right or visa versa
 618++CCD5 ~            ;                       if y >127 then y = 127
 619++CCD5 ~            ;                                     adjust = y-127 */ gradient
 620++CCD5 ~            ;                                     x = x +- adjust depending on if we are going left to right or visa versa
 621++CCD5 ~            ;
 622++CCD5 ~            ;                       iyh     bit 0 - P1 Needs Clipping
 623++CCD5 ~            ;                               bit 1 - P2 Needs Clipping
 624++CCD5 ~            ;                               bit 2 - x1 >= x2 (left to right)
 625++CCD5 ~            ;                               bit 3 - y1 >= y2 (top to bottom)
 626++CCD5 ~            ;                               bit 4 -  DY/DX (steep)
 627++CCD5 ~            ; if X1 hi <> 0
 628++CCD5 ~            LL118:                  ;break
 629++CCD5 ~                                    ld      a,h                                     ; if x1 high is 0 then we don't need to clip x at all
 630++CCD5 ~                                    and     a
 631++CCD5 ~                                    jp      z,.X1NoClipNeeded
 632++CCD5 ~            ;                       if x1 hi bit 7 is set (so negative)
 633++CCD5 ~            .CalcBlockX:            test    $80                                     ; if h is postiive then jump to the XPositive Calc block
 634++CCD5 ~                                    jr      z,.CalcBlockXPositive
 635++CCD5 ~            ;                       if clipccord bit 5 is set Adjust = abs(X1) / Gradient (may need to swap bit check?)
 636++CCD5 ~            .CalcBlockXNegative:    ld      a,iyh                                   ;
 637++CCD5 ~                                    test    16                                      ; bit 5 of iyh denotes that its a DY/DX, if its clear its DX/DY
 638++CCD5 ~                                    jr      nz,.CalcBlockXNegMulGrad
 639++CCD5 ~            .CaclBlockXNegDivGrad:  macronegate16hl
 640++CCD5 ~                                    ld      a,(Gradient)
 641++CCD5 ~                                    push    bc                                      ; abs(X1) / Gradient
 642++CCD5 ~                                    ld      h,c                     ; move offset into high byte of h
 643++CCD5 ~                                    ld      l,0
 644++CCD5 ~                                    ld      c,a
 645++CCD5 ~                                    call    div_hl_c
 646++CCD5 ~                                    pop     bc
 647++CCD5 ~                                    jp      .DoneXNegCalc
 648++CCD5 ~            ;                       else set Adjust = abs(X1) * Gradient
 649++CCD5 ~            .CalcBlockXNegMulGrad:  push    bc                                      ; abs(X1) * Gradient
 650++CCD5 ~                                    macronegate16hl
 651++CCD5 ~                                    ld      a,(Gradient)
 652++CCD5 ~                                    call    HLeqyHLmulAdiv256
 653++CCD5 ~                                    pop     bc
 654++CCD5 ~            ;                       y1 += adjust * (-1 if bit 4 of clipcoord is set)
 655++CCD5 ~            ;                       x1 = 0 then call into DonrX1Calc
 656++CCD5 ~            ;                       we can skip the test for negative Y direection
 657++CCD5 ~            .DoneXNegCalc:          macronegate16hl
 658++CCD5 ~            .XNegSkipNegate:        ld      de,bc
 659++CCD5 ~                                    ex      hl,de
 660++CCD5 ~                                    add     hl,de
 661++CCD5 ~                                    ld      bc,hl
 662++CCD5 ~                                    ld      hl,0
 663++CCD5 ~                                    jp      .DoneXCalc
 664++CCD5 ~            ;                       else x1 hi is positive
 665++CCD5 ~            ;                       if clipccord bit 5 is set Adjust = X1 lo / Gradient (may need to swap bit check?)
 666++CCD5 ~            .CalcBlockXPositive:    ld      a,iyh
 667++CCD5 ~                                    test    16
 668++CCD5 ~                                    jr      nz,.CalcBlockXPosMulGrad
 669++CCD5 ~            .CalcBlockXPosDivGrad:  ld      a,(Gradient)            ;Q = gradient
 670++CCD5 ~                                    push    bc
 671++CCD5 ~                                    ld      c,a
 672++CCD5 ~                                    ld      de,255
 673++CCD5 ~                                    sub     hl,de
 674++CCD5 ~                                    ld      h,l
 675++CCD5 ~                                    ld      l,0
 676++CCD5 ~                                    call    div_hl_c
 677++CCD5 ~                                    pop     bc
 678++CCD5 ~                                    jp      .DoneX2Calc
 679++CCD5 ~            ;                                 else set Adjust = X1 lo * Gradient
 680++CCD5 ~            .CalcBlockXPosMulGrad:  push    bc
 681++CCD5 ~                                    ld      a,(Gradient)            ;Q = gradient
 682++CCD5 ~                                    ld      de,255
 683++CCD5 ~                                    sub     hl,de
 684++CCD5 ~                                    call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 685++CCD5 ~                                    pop     bc
 686++CCD5 ~            ;                       y1 += adjust * (-1 if bit 4 of clipcoord is set)
 687++CCD5 ~            ;                       x1 = 255
 688++CCD5 ~            ;                       we can skip the test for negative Y direection
 689++CCD5 ~            .DoneX2Calc:            macronegate16hl
 690++CCD5 ~            .X2SkipNegate:          ex      de,hl
 691++CCD5 ~                                    ld      hl,bc
 692++CCD5 ~                                    add     hl,de
 693++CCD5 ~                                    ld      bc,hl
 694++CCD5 ~                                    ld      hl,255
 695++CCD5 ~            ;                       if Y1 hi <> 0 or Y1 low >= 128 then y coordinate is good
 696++CCD5 ~            .DoneXCalc:             ld      a,b
 697++CCD5 ~                                    and     a
 698++CCD5 ~                                    jr      nz,.CalcBlockY1Test
 699++CCD5 ~                                    ld      a,c
 700++CCD5 ~                                    and     $80
 701++CCD5 ~                                    ClearCarryFlag                  ; speculative clear of carry in case its good
 702++CCD5 ~                                    ret     z
 703++CCD5 ~            ;                       if Y1 hi bit 7 is set
 704++CCD5 ~            .X1NoClipNeeded:
 705++CCD5 ~            .CalcBlockY1Test:       ld      a,b
 706++CCD5 ~                                    test    $80
 707++CCD5 ~                                    jr      z,.CalcBlockYPos       ; if Y is positive jump forward
 708++CCD5 ~            ;                       if clipccord bit 5 is set Adjust = abs(Y1) / Gradient (may need to swap bit check?)
 709++CCD5 ~                                    break
 710++CCD5 ~            .CalcBlockY1:           ld      a,iyh
 711++CCD5 ~                                    test    16
 712++CCD5 ~                                    jr      nz,.CalcBlockYNegMulGrad
 713++CCD5 ~            .CalcBlockYNegDivGrad:  macronegate16bc
 714++CCD5 ~                                    ld      a,(Gradient)            ;Q = gradient
 715++CCD5 ~                                    push    hl
 716++CCD5 ~                                    ld      h,c                     ; move offset into high byte of h
 717++CCD5 ~                                    ld      l,0
 718++CCD5 ~                                    ld      c,a
 719++CCD5 ~                                    call    div_hl_c;LLHLdivC;div_hl_c
 720++CCD5 ~                                    pop     de
 721++CCD5 ~                                    ex      de,hl
 722++CCD5 ~                                    jp      .DoneBlockY1
 723++CCD5 ~            ;                                 else set Adjust = abs(Y1) * Gradient
 724++CCD5 ~            .CalcBlockYNegMulGrad:  macronegate16bc
 725++CCD5 ~                                    push    hl
 726++CCD5 ~                                    ld      hl,bc
 727++CCD5 ~                                    ld      a,(Gradient)            ;Q = gradient
 728++CCD5 ~                                    call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 729++CCD5 ~                                    pop     de
 730++CCD5 ~                                    ex      de,hl
 731++CCD5 ~            ;                       x1 += adjust * (-1 if bit 3 of clipcoord is set)
 732++CCD5 ~            ;                       y1 = 0
 733++CCD5 ~            ;                       ret
 734++CCD5 ~            ;                       now we have done the adjustment, if y or x are off screen then the line spans screen in only 1 dimension so doesn't get drawn
 735++CCD5 ~            .DoneBlockY1:           ld      a,iyh
 736++CCD5 ~                                    test    4
 737++CCD5 ~                                    jr      z,.Y1SkipNegate
 738++CCD5 ~                                    macronegate16de
 739++CCD5 ~            .Y1SkipNegate:          add     hl,de
 740++CCD5 ~                                    ld      bc,0
 741++CCD5 ~                                    ret
 742++CCD5 ~            ;                       if clipccord bit 5 is set Adjust = Y1 lo / Gradient (may need to swap bit check?)
 743++CCD5 ~            .CalcBlockYPos:         ld      a,iyh
 744++CCD5 ~                                    test    16
 745++CCD5 ~                                    jr      z,.CalcBlockYPosMulGrad
 746++CCD5 ~            .CalcBlockYPosDivGrad:  ld      a,(Gradient)            ;Q = gradient
 747++CCD5 ~                                    push    hl
 748++CCD5 ~                                    ld      hl,bc
 749++CCD5 ~                                    ld      de,127
 750++CCD5 ~                                    sub     hl,de
 751++CCD5 ~                                    ld      h,l
 752++CCD5 ~                                    ld      l,0
 753++CCD5 ~                                    ld      c,a
 754++CCD5 ~                                    call    div_hl_c;LLHLdivC
 755++CCD5 ~                                    pop     de
 756++CCD5 ~                                    ex      de,hl
 757++CCD5 ~                                    jp      .DoneBlockY2
 758++CCD5 ~            ;                                 else set Adjust = Y1 lo * Gradient
 759++CCD5 ~            .CalcBlockYPosMulGrad:  push    hl
 760++CCD5 ~                                    ld      hl,bc
 761++CCD5 ~                                    ld      de,127
 762++CCD5 ~                                    sub     hl,de
 763++CCD5 ~                                    ld      a,(Gradient)
 764++CCD5 ~                                    call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 765++CCD5 ~                                    pop     de
 766++CCD5 ~                                    ex      de,hl
 767++CCD5 ~            ;                x1 += adjust * (-1 if bit 3 of clipcoord is set)
 768++CCD5 ~            ;                y1 = 127
 769++CCD5 ~            .DoneBlockY2:           ld      a,iyh
 770++CCD5 ~                                    test    4
 771++CCD5 ~                                    jr      nz,.Y2SkipNegate
 772++CCD5 ~                                    macronegate16de
 773++CCD5 ~            .Y2SkipNegate:          add     hl,de
 774++CCD5 ~                                    ld      bc,127
 775++CCD5 ~                                    ret
 776++CCD5                      ELSE
 777++CCD5 C9                       ret
 778++CCD6                      ENDIF
 779++CCD6              ; old code for on screen test
 780++CCD6              ;;;;;;; if y1 > 127 and y2 > 127 then same sing and exit
 781++CCD6              ;;;;;;
 782++CCD6              ;;;;;;;if y1hi y2hi are <> 0 and both same sign exit
 783++CCD6              ;;;;;;.CheckYOffScreen:       ld      a,b                                 ; y1 and y2 high tests
 784++CCD6              ;;;;;;                        and     ixh
 785++CCD6              ;;;;;;                        jp      .CheckYLow
 786++CCD6              ;;;;;;                        ld
 787++CCD6              ;;;;;;                        and     a                                   ; if either is zero then we can check for > 127
 788++CCD6              ;;;;;;                        jr      z,.YHighNegativeCheck               ;
 789++CCD6              ;;;;;;                        ld      a,ixh                               ;
 790++CCD6              ;;;;;;                        and     a                                   ;
 791++CCD6              ;;;;;;                        ret     nz                                  ;
 792++CCD6              ;;;;;;;if y1h bit 7 and y2h bit 7 set then exit as both -ve
 793++CCD6              ;;;;;;                        ld      a,b                                 ;
 794++CCD6              ;;;;;;                        and     ixh                                 ;
 795++CCD6              ;;;;;;                        and     $80                                 ;
 796++CCD6              ;;;;;;                        ret     z                                   ;
 797++CCD6              ;;;;;;;if y1h > 0 and y2h > 0 then exit as both are +ve high
 798++CCD6              ;;;;;;                        ld      a,b                                 ;
 799++CCD6              ;;;;;;                        and     ixh                                 ;
 800++CCD6              ;;;;;;                        ret     nz                                  ;
 801++CCD6              ;;;;;;;if y1h or y2h is not 0 then proceed to clip
 802++CCD6              ;;;;;;                        ld      a,b
 803++CCD6              ;;;;;;                        or      ixh
 804++CCD6              ;;;;;;                        jr      nz,.StartProcessing
 805++CCD6              ;;;;;;;if (y1l bit 7 is set and y1h is clear ) or (y2l bit 7 is set and y2h is clear) the proceed to clip
 806++CCD6              ;;;;;;                        ld      a,c
 807++CCD6              ;;;;;;                        or      ixl
 808++CCD6              ;;;;;;                        and     $80
 809++CCD6              ;;;;;;                        jr      z,.StartProcessing
 810++CCD6              ;;;;;;
 811++CCD6              ;;;;;;.CheckYOffScreen:       ld      a,b                                 ;
 812++CCD6              ;;;;;;                        cp      0                                   ;
 813++CCD6              ;;;;;;                        jr      z,.Y1HighIsZero                     ;
 814++CCD6              ;;;;;;                        ld      a,ixh                               ; if we get here Y1 high <> 0
 815++CCD6              ;;;;;;                        cp      0                                   ;
 816++CCD6              ;;;;;;                        jr      z,.Y2HighIsZero                     ; if they are both non zero we can do a sign check
 817++CCD6              ;;;;;;.CheckYSameSign:        ld      a,b                                 ; if we get here Y1 high and Y2 high are not zero
 818++CCD6              ;;;;;;                        xor     ixh                                 ; so same sign then bail out if they are
 819++CCD6              ;;;;;;                        and     $80                                 ;
 820++CCD6              ;;;;;;                        ret     z                                   ;
 821++CCD6              ;;;;;;;if we get here either y1hi or y2 hi are 0, now check and y1 low > 127 & y2 low > 127, exit
 822++CCD6              ;;;;;;.Y1HighIsZero:          ld      a,ixh                               ; as y1h is zero, if y2h is zero we do y1 y2 test
 823++CCD6              ;;;;;;                        cp      0                                   ;
 824++CCD6              ;;;;;;                        jr      nz,.Startprocessing                 ;
 825++CCD6              ;;;;;;                        ld      a,c                                 ; so by here y1h and y2h must be zero
 826++CCD6              ;;;;;;                        and     ixl
 827++CCD6              ;;;;;;
 828++CCD6              ;;;;;;                        .CheckY2Lo                        ;
 829++CCD6              ;;;;;;.CheckY1Lo:             ld      a,c
 830++CCD6              ;;;;;;                        and     $80
 831++CCD6              ;;;;;;                        jr      z,.StartProcessing
 832++CCD6              ;;;;;;.CheckY2Lo:             ld      a,ixl
 833++CCD6              ;;;;;;                        and     $80
 834++CCD6              ;;;;;;                        ret     nz
 835++CCD6              ;;;;;;;clip = 0
# file closed: ././ModelRender/CLIP-LL145.asm
 723+ CCD6              ;--------------------------------------------------------------------------------------------------------
 724+ CCD6                                      include "./Universe/Ships/CopyRotmatToTransMat.asm"
# file opened: ././Universe/Ships/CopyRotmatToTransMat.asm
   1++CCD6              ; Set TransMatTo
   2++CCD6              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3++CCD6              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4++CCD6              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5++CCD6              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6++CCD6              ; 18 byte fast copy
   7++CCD6
   8++CCD6              ; Fast copy using the stack                                                         ; T states
   9++CCD6 DD 21 00 00  CopyRotmatToTransMat:   ld      ix,0                                                ; 14
  10++CCDA DD 39                                add     ix,sp                                               ; 15
  11++CCDC 31 29 C0                             ld      sp,UBnkrotmatSidevX ; Source                        ; 10
  12++CCDF E1                                   pop     hl                  ; UBnkrotmatSidevX              ; 10
  13++CCE0 D1                                   pop     de                  ; UBnkrotmatSidevY              ; 10
  14++CCE1 C1                                   pop     bc                  ; UBnkrotmatSidevZ              ; 10
  15++CCE2 D9                                   exx                                                         ; 4
  16++CCE3 E1                                   pop     hl                  ; UBnkrotmatRoofvX              ; 10
  17++CCE4 D1                                   pop     de                  ; UBnkrotmatRoofvY              ; 10
  18++CCE5 C1                                   pop     bc                  ; UBnkrotmatRoofvZ              ; 10
  19++CCE6 31 6D C0                             ld      sp,UBnkTransmatRoofvZ+2 ; Target + 2 reversed       ; 10
  20++CCE9 C5                                   push    bc                                                  ; 10
  21++CCEA D5                                   push    de                                                  ; 10
  22++CCEB E5                                   push    hl                                                  ; 10
  23++CCEC D9                                   exx                                                         ; 4
  24++CCED C5                                   push    bc                                                  ; 10
  25++CCEE D5                                   push    de                                                  ; 10
  26++CCEF E5                                   push    hl                                                  ; 10
  27++CCF0 31 35 C0                             ld      sp,UBnkrotmatNosevX ; Source                        ; 10
  28++CCF3 E1                                   pop     hl                  ; UBnkrotmatSidevX              ; 10
  29++CCF4 D1                                   pop     de                  ; UBnkrotmatSidevY              ; 10
  30++CCF5 C1                                   pop     bc                  ; UBnkrotmatSidevZ              ; 10
  31++CCF6 31 73 C0                             ld      sp,UBnkTransmatNosevZ+2                             ; 10
  32++CCF9 C5                                   push    bc                                                  ; 10
  33++CCFA D5                                   push    de                                                  ; 10
  34++CCFB E5                                   push    hl                                                  ; 10
  35++CCFC DD F9                                ld      sp,ix               ; restore stack                 ; 10
  36++CCFE C9                                   ret                                                         ; 10 Total 267 (LDI version is 318)
  37++CCFF
  38++CCFF
  39++CCFF
  40++CCFF              ;CopyRotmatToTransMat:
  41++CCFF              ;                        ld      hl,UBnkrotmatSidevX
  42++CCFF              ;                        ld      de,UBnkTransmatSidevX
  43++CCFF              ;                        SixLDIInstrunctions
  44++CCFF              ;                        ld      hl,UBnkrotmatRoofvX
  45++CCFF              ;                        ld      de, UBnkTransmatRoofvX
  46++CCFF              ;                        SixLDIInstrunctions
  47++CCFF              ;                        ld      hl,UBnkrotmatNosevX
  48++CCFF              ;                        ld      de, UBnkTransmatNosevX
  49++CCFF              ;                        SixLDIInstrunctions
  50++CCFF              ;                        ret
  51++CCFF
  52++CCFF              CopyRotToTransMacro:    MACRO
  53++CCFF ~                                    ld      hl,UBnkrotmatSidevX
  54++CCFF ~                                    ld      de,UBnkTransmatSidevX
  55++CCFF ~                                    SixLDIInstrunctions
  56++CCFF ~                                    SixLDIInstrunctions
  57++CCFF ~                                    SixLDIInstrunctions
  58++CCFF                                      ENDM
  59++CCFF
# file closed: ././Universe/Ships/CopyRotmatToTransMat.asm
 725+ CCFF                                      include "./Universe/Ships/TransposeXX12ByShipToXX15.asm"
# file opened: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
   1++CCFF              TransposeXX12ByShipToXX15:
   2++CCFF 2A AC C0             ld		hl,(UBnkXX12xLo)					; get X into HL
   3++CD02 7C           		ld		a,h			                        ; get XX12 Sign
   4++CD03 E6 80        		and		$80									; check sign bit on high byte
   5++CD05 47           		ld		b,a									; and put it in of 12xlo in b
   6++CD06                      ;110921 debugld      h,0
   7++CD06 7C                   ld      a,h
   8++CD07 E6 7F                and     $7F
   9++CD09 67                   ld      h,a
  10++CD0A                      ;110921 debugld      h,0
  11++CD0A ED 5B 20 C0  		ld		de,(UBnKxlo)						;
  12++CD0E 3A 22 C0     		ld		a,(UBnKxsgn)						; get Ship Pos (low,high,sign)
  13++CD11 E6 80        		and		$80									; make sure we only have bit 7
  14++CD13 4F           		ld		c,a									; and put sign of unkxsgn c
  15++CD14 CD 2F 00     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++CD17 B4           		or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++CD18 67           		ld		h,a
  18++CD19 22 A6 C0     		ld		(UBnkXScaled),hl					; now write it out to XX15 X pos
  19++CD1C              ; ..................................
  20++CD1C 2A AE C0     		ld		hl,(UBnkXX12yLo)					; Repeat above for Y coordinate
  21++CD1F 7C           		ld		a,h
  22++CD20 E6 80        		and		$80
  23++CD22 47           		ld		b,a
  24++CD23                      ;110921 debugld      h,0
  25++CD23 7C                   ld      a,h
  26++CD24 E6 7F                and     $7F
  27++CD26 67                   ld      h,a
  28++CD27                      ;110921 debugld      h,0
  29++CD27 ED 5B 23 C0  		ld		de,(UBnKylo)
  30++CD2B 3A 25 C0     		ld		a,(UBnKysgn)
  31++CD2E E6 80        		and		$80									; make sure we only have bit 7
  32++CD30 4F           		ld		c,a
  33++CD31 CD 2F 00     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++CD34 B4           		or		h									; combine sign in A with H
  35++CD35 67           		ld		h,a
  36++CD36 22 A8 C0     		ld		(UBnkYScaled),hl
  37++CD39              ; ..................................
  38++CD39 2A B0 C0     		ld		hl,(UBnkXX12zLo)					; and now repeat for Z cooord
  39++CD3C 7C           		ld		a,h
  40++CD3D E6 80        		and		$80
  41++CD3F 47           		ld		b,a
  42++CD40                      ;110921 debugld      h,0
  43++CD40 7C                   ld      a,h
  44++CD41 E6 7F                and     $7F
  45++CD43 67                   ld      h,a
  46++CD44                      ;110921 debugld      h,0
  47++CD44 ED 5B 26 C0  		ld		de,(UBnKzlo)
  48++CD48 3A 28 C0     		ld		a,(UBnKzsgn)
  49++CD4B E6 80        		and		$80									; make sure we only have bit 7
  50++CD4D 4F           		ld		c,a
  51++CD4E CD 2F 00     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++CD51 B4           		or		h									; combine sign in A with H
  53++CD52 67           		ld		h,a
  54++CD53 CB 7C        		bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++CD55 20 16        		jr		nz,ClampZto4                        ; result was negative so we need to clamp to 4
  56++CD57 E6 7F                and     $7F                                 ; a = value unsigned
  57++CD59 20 06                jr      nz,NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++CD5B 7D                   ld      a,l                                 ; get low byte now
  59++CD5C              		JumpIfALTNusng 4,ClampZto4					; if its < 4 then fix at 4
  59++CD5C FE 04       >                        cp      4
  59++CD5E DA 6D CD    >                        jp		c, ClampZto4
  60++CD61              NoClampZto4:
  61++CD61 22 AA C0     		ld		(UBnkZScaled),hl					; hl = signed calculation and > 4
  62++CD64 7D           		ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  63++CD65 32 B8 7E             ld      (varT),a
  64++CD68 7C           		ld		a,h
  65++CD69 32 9B 7E             ld      (varU),a
  66++CD6C C9           		ret
  67++CD6D              ClampZto4:											; This is where we limit 4 to a minimum of 4
  68++CD6D 21 04 00     		ld		hl,4
  69++CD70 22 AA C0     		ld		(UBnkZScaled),hl; BODGE FOR NOW
  70++CD73 7D           		ld		a,l
  71++CD74 32 B8 7E             ld      (varT),a                            ;                                                                           ;;;
  72++CD77 7C           		ld		a,h
  73++CD78 32 9B 7E             ld      (varU),a 						; compatibility for now
  74++CD7B C9           		ret
  75++CD7C
# file closed: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
 726+ CD7C                                      include "./Maths/Utilities/ScaleNodeTo8Bit.asm"
# file opened: ././Maths/Utilities/ScaleNodeTo8Bit.asm
   1++CD7C              ScaleNodeTo8Bit:								; TODO make signed
   2++CD7C ED 4B AA C0  	ld			bc,(UBnkZScaled)
   3++CD80 2A A6 C0     	ld			hl,(UBnkXScaled)
   4++CD83 ED 5B A8 C0  	ld			de,(UBnkYScaled)
   5++CD87              SetABSbc:
   6++CD87 78           	ld			a,b
   7++CD88 DD 67        	ld			ixh,a
   8++CD8A E6 7F        	and			SignMask8Bit
   9++CD8C 47           	ld			b,a									; bc = ABS bc
  10++CD8D              SetABShl:
  11++CD8D 7C           	ld			a,h
  12++CD8E DD 6F        	ld			ixl,a
  13++CD90 E6 7F        	and			SignMask8Bit
  14++CD92 67           	ld			h,a									; hl = ABS hl
  15++CD93              SetABSde:
  16++CD93 7A           	ld			a,d
  17++CD94 FD 67        	ld			iyh,a
  18++CD96 E6 7F        	and			SignMask8Bit
  19++CD98 57           	ld			d,a									; de = ABS de
  20++CD99              ScaleNodeTo8BitLoop:
  21++CD99 78               ld          a,b		                            ; U	\ z hi
  22++CD9A B4           	or			h                                   ; XX15+1	\ x hi
  23++CD9B B2           	or			d                                   ; XX15+4	\ y hi
  24++CD9C 28 0F            jr          z,ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
  25++CD9E                  ShiftHLRight1
  25++CD9E CB 3C       >			   srl h
  25++CDA0 CB 1D       >			   rr  l
  26++CDA2                  ShiftDERight1
  26++CDA2 CB 3A       >			   srl d
  26++CDA4 CB 1B       >			   rr  e
  27++CDA6              	ShiftBCRight1
  27++CDA6 CB 38       >			   srl b
  27++CDA8 CB 19       >			   rr  c
  28++CDAA C3 99 CD         jp          ScaleNodeTo8BitLoop
  29++CDAD              ScaleNodeDone:										; now we have scaled values we have to deal with sign
  30++CDAD DD 7C        	ld			a,ixh								; get sign bit and or with b
  31++CDAF E6 80        	and			SignOnly8Bit
  32++CDB1 B0           	or			b
  33++CDB2 47           	ld			b,a
  34++CDB3              SignforHL:
  35++CDB3 DD 7D        	ld			a,ixl								; get sign bit and or with b
  36++CDB5 E6 80        	and			SignOnly8Bit
  37++CDB7 B4           	or			h
  38++CDB8 67           	ld			h,a
  39++CDB9              SignforDE:
  40++CDB9 FD 7C        	ld			a,iyh								; get sign bit and or with b
  41++CDBB E6 80        	and			SignOnly8Bit
  42++CDBD B2           	or			d
  43++CDBE 57           	ld			d,a
  44++CDBF              SignsDoneSaveResult:
  45++CDBF ED 43 AA C0  	ld			(UBnkZScaled),bc
  46++CDC3 22 A6 C0     	ld			(UBnkXScaled),hl
  47++CDC6 ED 53 A8 C0  	ld			(UBnkYScaled),de
  48++CDCA 78           	ld			a,b
  49++CDCB 32 9B 7E     	ld			(varU),a
  50++CDCE 79           	ld			a,c
  51++CDCF 32 B8 7E     	ld			(varT),a
  52++CDD2 C9           	ret
  53++CDD3
# file closed: ././Maths/Utilities/ScaleNodeTo8Bit.asm
 727+ CDD3
 728+ CDD3              ;--------------------------------------------------------------------------------------------------------
 729+ CDD3 21 D2 C0     SetFaceAVisible:        ld      hl,UbnkFaceVisArray
 730+ CDD6 ED 31                                add     hl,a
 731+ CDD8 3E FF                                ld      a,$FF
 732+ CDDA 77                                   ld      (hl),a
 733+ CDDB C9                                   ret
 734+ CDDC              ;--------------------------------------------------------------------------------------------------------
 735+ CDDC 21 D2 C0     SetFaceAHidden:         ld      hl,UbnkFaceVisArray
 736+ CDDF ED 31                                add     hl,a
 737+ CDE1 AF                                   xor     a
 738+ CDE2 77                                   ld      (hl),a
 739+ CDE3 C9                                   ret
 740+ CDE4              ;--------------------------------------------------------------------------------------------------------
 741+ CDE4 3A 03 C4     SetAllFacesVisible:     ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 742+ CDE7 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 743+ CDE9 CB 3F                                srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
 744+ CDEB 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 745+ CDEC 21 D2 C0                             ld      hl,UbnkFaceVisArray
 746+ CDEF 3E FF                                ld      a,$FF
 747+ CDF1              SetAllFacesVisibleLoop:
 748+ CDF1 77           EE30:                   ld      (hl),a
 749+ CDF2 23                                   inc     hl
 750+ CDF3 10 FC                                djnz    SetAllFacesVisibleLoop
 751+ CDF5 C9                                   ret
 752+ CDF6              ;--------------------------------------------------------------------------------------------------------
 753+ CDF6 3A 03 C4     SetAllFacesHidden:      ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 754+ CDF9 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 755+ CDFB CB 3F                                srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
 756+ CDFD 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 757+ CDFE 06 10                                ld      b,16
 758+ CE00 21 D2 C0                             ld      hl,UbnkFaceVisArray
 759+ CE03 3E 00                                ld      a,$00
 760+ CE05 77           SetAllFacesHiddenLoop:  ld      (hl),a
 761+ CE06 23                                   inc     hl
 762+ CE07 10 FC                                djnz    SetAllFacesHiddenLoop
 763+ CE09 C9                                   ret
 764+ CE0A
 765+ CE0A              ;;;;X = normal scale
 766+ CE0A              ;;;;ZtempHi = zhi
 767+ CE0A              ;;;;......................................................
 768+ CE0A              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 769+ CE0A              ;;;;  Loop                                              ::LL90
 770+ CE0A              ;;;;     inc X
 771+ CE0A              ;;;;     divide X, Y & ZtempHiLo by 2
 772+ CE0A              ;;;;  Until ZtempHi = 0
 773+ CE0A              ;;;;......................................................
 774+ CE0A              ;-LL21---------------------------------------------------------------------------------------------------
 775+ CE0A                  DISPLAY "Tracing 3", $
 776+ CE0A
 777+ CE0A                                      include "Universe/Ships/NormaliseTransMat.asm"
# file opened: ./Universe/Ships/NormaliseTransMat.asm
   1++CE0A              ;divdide by 16 using undocumented instrunctions
   2++CE0A 47           Norm256mulAdivQ:        ld      b,a
   3++CE0B 0E 00                                ld      c,0
   4++CE0D 16 00                                ld      d,0
   5++CE0F 3A 9C 7E                             ld      a,(varQ)
   6++CE12 5F                                   ld      e,a
   7++CE13              ;Input: BC = Dividend, DE = Divisor, HL = 0
   8++CE13              ;Output: BC = Quotient, HL = Remainder
   9++CE13 21 00 00     NormDIV16UNDOC:         ld      hl,0
  10++CE16 78                                   ld      a,b
  11++CE17 06 10                                ld      b,16
  12++CE19 CB 31        NormDIV16UNDOCLOOP:     sll	    c		; unroll 16 times
  13++CE1B 17                                   rla	    		; ...
  14++CE1C ED 6A                                adc	    hl,hl		; ...
  15++CE1E ED 52                                sbc	    hl,de		; ...
  16++CE20 30 02                                jr	    nc,NormDIV16UNDOCSKIP		; ...
  17++CE22 19                                   add	    hl,de		; ...
  18++CE23 0D                                   dec	    c		; ...
  19++CE24 10 F3        NormDIV16UNDOCSKIP:     djnz    NormDIV16UNDOCLOOP
  20++CE26 79                                   ld      a,c
  21++CE27 32 9D 7E                             ld      (varR),a
  22++CE2A C9                                   ret
  23++CE2B
  24++CE2B FD 67        Norm256mulAdivQSignA:   ld      iyh,a
  25++CE2D                                      ClearSignBitA
  25++CE2D E6 7F       >                        and     SignMask8Bit
  26++CE2F CD 0A CE                             call    Norm256mulAdivQ              ; do 15 bit unsigned
  27++CE32 FD 7C                                ld      a,iyh                       ; now correct R reg
  28++CE34                                      SignBitOnlyA
  28++CE34 E6 80       >                        and     SignOnly8Bit
  29++CE36 B1                                   or      c
  30++CE37 32 9D 7E                             ld      (varR),a
  31++CE3A C9                                   ret
  32++CE3B
  33++CE3B              ; Tested OK
  34++CE3B              ;LL21
  35++CE3B              NormaliseTransMat:
  36++CE3B                      IFDEF LOGMATHS
  37++CE3B ~                            ld      hl,UBnkTransmatNosevZ+1     ; initialise loop
  38++CE3B ~                            ld      b,9                         ; total of 9 elements to transform
  39++CE3B ~                            MMUSelectMathsTables
  40++CE3B ~            .LL21Loop:      ld      d,(hl)
  41++CE3B ~                            dec     hl
  42++CE3B ~                            ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  43++CE3B ~                            ShiftDELeft1                        ; De = DE * 2
  44++CE3B ~                            ld      a,d                         ; a = hi byte after shifting
  45++CE3B ~                            push	hl
  46++CE3B ~                            push	bc
  47++CE3B ~                            call    AEquAmul256Div197Log        ; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  48++CE3B ~                            ;ld      a,c                         ; BFRDIV returns R also in l reg
  49++CE3B ~                            pop		bc
  50++CE3B ~                            pop		hl							; bc gets wrecked by BFRDIV
  51++CE3B ~                            ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  52++CE3B ~                            dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  53++CE3B ~                            djnz    .LL21Loop                   ; loop from 2zLo through to 0xLo
  54++CE3B ~                            MMUSelectROM0
  55++CE3B ~                            ret
  56++CE3B                      ELSE
  57++CE3B 21 72 C0                     ld      hl,UBnkTransmatNosevZ+1         ; initialise loop
  58++CE3E 0E C5                        ld      c,ConstNorm                 ; c = Q = norm = 197
  59++CE40 79                           ld      a,c
  60++CE41 32 9C 7E                     ld      (varQ),a                    ; set up varQ
  61++CE44 06 09                        ld      b,9                         ; total of 9 elements to transform
  62++CE46 56           LL21Loop:       ld      d,(hl)
  63++CE47 2B                           dec     hl
  64++CE48 5E                           ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  65++CE49                              ShiftDELeft1                        ; De = DE * 2
  65++CE49 CB 23       >			   sla e
  65++CE4B CB 12       >			   rl  d
  66++CE4D 7A                           ld      a,d                         ; a = hi byte after shifting
  67++CE4E E5                           push	hl
  68++CE4F C5                           push	bc
  69++CE50 CD 0A CE                     call    Norm256mulAdivQ
  70++CE53                              ;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  71++CE53 79                           ld      a,c                         ; BFRDIV returns R also in l reg
  72++CE54 C1                           pop		bc
  73++CE55 E1                           pop		hl							; bc gets wrecked by BFRDIV
  74++CE56 77                           ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  75++CE57 2B                           dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  76++CE58 10 EC                        djnz    LL21Loop                    ; loop from 2zLo through to 0xLo
  77++CE5A C9                           ret
  78++CE5B                      ENDIF
# file closed: ./Universe/Ships/NormaliseTransMat.asm
 778+ CE5B              ;;;                        include "Universe/Ships/NormaliseXX15.asm"
 779+ CE5B              ;-LL91---------------------------------------------------------------------------------------------------
 780+ CE5B
 781+ CE5B              ; Now we have
 782+ CE5B              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 783+ CE5B              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 784+ CE5B              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 785+ CE5B              ;
 786+ CE5B              ;--------------------------------------------------------------------------------------------------------
 787+ CE5B                                      include "Universe/Ships/InverseXX16.asm"
# file opened: ./Universe/Ships/InverseXX16.asm
   1++CE5B              ; TESTEDOK
   2++CE5B
   3++CE5B              ;ScaleOrientationXX16:                       ; DEBUG TODO will combine with inverse later
   4++CE5B              ;        ld      a,(XX17)
   5++CE5B              ;        ld      ixl,a
   6++CE5B              ;        ld      ixh,9
   7++CE5B              ;        ld      hl,UBnkTransInv0x
   8++CE5B              ;        ld      a,(hl)
   9++CE5B              ;ScaleNode:
  10++CE5B              ;        ld      b,ixl
  11++CE5B              ;ScaleNodeLoop:
  12++CE5B              ;        sla      a
  13++CE5B              ;        djnz    ScaleNodeLoop
  14++CE5B              ;        ld      (hl),a
  15++CE5B              ;        inc     hl
  16++CE5B              ;        inc     hl
  17++CE5B              ;        dec     ixh
  18++CE5B              ;        jr      nz,ScaleNode
  19++CE5B              ;        ret
  20++CE5B
  21++CE5B
  22++CE5B              InverseXX16:								; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  23++CE5B              ; we coudl combine this with move to transmat later as an optimisation
  24++CE5B              ; INPUT - All Scaled
  25++CE5B              ;  They transmat has already been put into side, roof nose order
  26++CE5B              ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  27++CE5B              ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  28++CE5B              ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  29++CE5B              ; OUTPUT
  30++CE5B              ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  31++CE5B              ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  32++CE5B              ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  33++CE5B              ; First all side values become compoment 0 of each vector
  34++CE5B 2A 61 C0             ld      hl,(UBnkTransmatSidevX)     ;
  35++CE5E ED 5B 67 C0          ld      de,(UBnkTransmatRoofvX)     ;
  36++CE62 ED 4B 6D C0          ld      bc,(UBnkTransmatNosevX)     ;
  37++CE66 22 79 C0             ld      (UbnkTransInvRow0x0),hl     ;
  38++CE69 ED 53 7B C0          ld      (UbnkTransInvRow0x1),de     ;
  39++CE6D ED 43 7D C0          ld      (UbnkTransInvRow0x2),bc     ;
  40++CE71 2A 63 C0             ld      hl,(UBnkTransmatSidevY)     ;
  41++CE74 ED 5B 69 C0          ld      de,(UBnkTransmatRoofvY)     ;
  42++CE78 ED 4B 6F C0          ld      bc,(UBnkTransmatNosevY)     ;
  43++CE7C 22 81 C0             ld      (UbnkTransInvRow1y0),hl     ;
  44++CE7F ED 53 83 C0          ld      (UbnkTransInvRow1y1),de     ;
  45++CE83 ED 43 85 C0          ld      (UbnkTransInvRow1y2),bc     ;
  46++CE87 2A 65 C0             ld      hl,(UBnkTransmatSidevZ)     ;
  47++CE8A ED 5B 6B C0          ld      de,(UBnkTransmatRoofvZ)     ;
  48++CE8E ED 4B 71 C0          ld      bc,(UBnkTransmatNosevZ)     ;
  49++CE92 22 89 C0             ld      (UbnkTransInvRow2z0),hl     ;
  50++CE95 ED 53 8B C0          ld      (UbnkTransInvRow2z1),de     ;
  51++CE99 ED 43 8D C0          ld      (UbnkTransInvRow2z2),bc     ;
  52++CE9D C9                   ret
  53++CE9E
  54++CE9E
# file closed: ./Universe/Ships/InverseXX16.asm
 788+ CE9E              ;--------------------------------------------------------------------------------------------------------
 789+ CE9E              ;--------------------------------------------------------------------------------------------------------
 790+ CE9E              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 791+ CE9E              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 792+ CE9E              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 793+ CE9E              ; Returns
 794+ CE9E              ;
 795+ CE9E              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 796+ CE9E              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 797+ CE9E              ;
 798+ CE9E              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 799+ CE9E              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 800+ CE9E              ;
 801+ CE9E              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 802+ CE9E              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 803+ CE9E              ; TESTEDOK
 804+ CE9E              XX12DotOneRow:
 805+ CE9E              XX12CalcX:              N0equN1byN2div256 varT, (hl), (UBnkXScaled)       ; T = (hl) * regXX15fx /256
 805+ CE9E 3A A6 C0    >                        ld      a,(UBnkXScaled)                        ;
 805+ CEA1 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 805+ CEA2 7E          >                        ld      a,(hl)                        ; A = XX16 element
 805+ CEA3 57          >                        ld      d,a
 805+ CEA4 ED 30       >                        mul
 805+ CEA6 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 805+ CEA7 32 B8 7E    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 806+ CEAA 23                                   inc     hl                                  ; move to sign byte
 807+ CEAB              XX12CalcXSign:          AequN1xorN2 UBnkXScaledSign,(hl)             ;
 807+ CEAB 3A A7 C0    >                        ld      a,(UBnkXScaledSign)
 807+ CEAE AE          >                        xor     (hl)
 808+ CEAF 32 9E 7E                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 809+ CEB2 23                                   inc     hl
 810+ CEB3              XX12CalcY:              N0equN1byN2div256 varQ, (hl),(UBnkYScaled)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 810+ CEB3 3A A8 C0    >                        ld      a,(UBnkYScaled)                        ;
 810+ CEB6 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 810+ CEB7 7E          >                        ld      a,(hl)                        ; A = XX16 element
 810+ CEB8 57          >                        ld      d,a
 810+ CEB9 ED 30       >                        mul
 810+ CEBB 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 810+ CEBC 32 9C 7E    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 811+ CEBF                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 811+ CEBF 3A B8 7E    >                        ld       a,(varT)
 811+ CEC2 32 9D 7E    >                        ld       (varR),a
 812+ CEC5 23                                   inc     hl
 813+ CEC6                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 813+ CEC6 3A A9 C0    >                        ld      a,(UBnkYScaledSign)
 813+ CEC9 AE          >                        xor     (hl)
 814+ CECA              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 815+ CECA E5           STequSRplusAQ           push    hl
 816+ CECB CD 59 9B                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 817+ CECE E1                                   pop     hl
 818+ CECF 32 B8 7E                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 819+ CED2 23                                   inc     hl
 820+ CED3              XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(UBnkZScaled)       ; Q = |sidev_z| * z_lo / 256
 820+ CED3 3A AA C0    >                        ld      a,(UBnkZScaled)                        ;
 820+ CED6 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 820+ CED7 7E          >                        ld      a,(hl)                        ; A = XX16 element
 820+ CED8 57          >                        ld      d,a
 820+ CED9 ED 30       >                        mul
 820+ CEDB 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 820+ CEDC 32 9C 7E    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 821+ CEDF                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 821+ CEDF 3A B8 7E    >                        ld       a,(varT)
 821+ CEE2 32 9D 7E    >                        ld       (varR),a
 822+ CEE5 23                                   inc     hl
 823+ CEE6                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 823+ CEE6 3A AB C0    >                        ld      a,(UBnkZScaledSign)
 823+ CEE9 AE          >                        xor     (hl)
 824+ CEEA              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 825+ CEEA CD 59 9B                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 826+ CEED              ; Now we exit with A = result S = Sign
 827+ CEED C9                                   ret
 828+ CEEE
 829+ CEEE
 830+ CEEE                  DISPLAY "Tracing 4", $
 831+ CEEE
 832+ CEEE              ;-- LL51---------------------------------------------------------------------------------------------------------------------------
 833+ CEEE              ;TESTED OK
 834+ CEEE              ;XX12EquScaleDotOrientation:                         ; .LL51 \ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z
 835+ CEEE              XX12EquXX15DotProductXX16:
 836+ CEEE 01 00 00                             ld      bc,0                                ; LDX, LDY 0
 837+ CEF1 21 61 C0                             ld      hl,UBnkTransmatSidevX
 838+ CEF4 CD 9E CE                             call    XX12DotOneRow
 839+ CEF7 32 AC C0                             ld      (UBnkXX12xLo),a
 840+ CEFA 3A 9E 7E                             ld      a,(varS)
 841+ CEFD 32 AD C0                             ld      (UBnkXX12xSign),a
 842+ CF00 21 67 C0                             ld      hl,UBnkTransmatRoofvX
 843+ CF03 CD 9E CE                             call    XX12DotOneRow
 844+ CF06 32 AE C0                             ld      (UBnkXX12yLo),a
 845+ CF09 3A 9E 7E                             ld      a,(varS)
 846+ CF0C 32 AF C0                             ld      (UBnkXX12ySign),a
 847+ CF0F 21 6D C0                             ld      hl,UBnkTransmatNosevX
 848+ CF12 CD 9E CE                             call    XX12DotOneRow
 849+ CF15 32 B0 C0                             ld      (UBnkXX12zLo),a
 850+ CF18 3A 9E 7E                             ld      a,(varS)
 851+ CF1B 32 B1 C0                             ld      (UBnkXX12zSign),a
 852+ CF1E C9                                   ret
 853+ CF1F              ;--------------------------------------------------------------------------------------------------------
 854+ CF1F                                      include "./Universe/Ships/CopyXX12ScaledToXX18.asm"
# file opened: ././Universe/Ships/CopyXX12ScaledToXX18.asm
   1++CF1F              CopyXX12ScaledToXX18:
   2++CF1F              CopyResultToDrawCam:
   3++CF1F                      ldCopyByte XX12         ,XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++CF1F 3A AC C0    >                        ld       a,(XX12)
   3++CF22 32 9A C0    >                        ld       (XX18),a
   4++CF25                      ldCopyByte XX12+1       ,XX18+2           ; XX12+1 => XX18+2
   4++CF25 3A AD C0    >                        ld       a,(XX12+1)
   4++CF28 32 9C C0    >                        ld       (XX18+2),a
   5++CF2B                      ldCopyByte XX12+2       ,XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++CF2B 3A AE C0    >                        ld       a,(XX12+2)
   5++CF2E 32 9D C0    >                        ld       (XX18+3),a
   6++CF31                      ldCopyByte XX12+3       ,XX18+5           ; XX12+3 => XX18+5
   6++CF31 3A AF C0    >                        ld       a,(XX12+3)
   6++CF34 32 9F C0    >                        ld       (XX18+5),a
   7++CF37                      ldCopyByte XX12+4       ,XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++CF37 3A B0 C0    >                        ld       a,(XX12+4)
   7++CF3A 32 A0 C0    >                        ld       (XX18+6),a
   8++CF3D                      ldCopyByte XX12+5       ,XX18+8           ; XX12+5 => XX18+8
   8++CF3D 3A B1 C0    >                        ld       a,(XX12+5)
   8++CF40 32 A2 C0    >                        ld       (XX18+8),a
   9++CF43 C9                   ret
  10++CF44
# file closed: ././Universe/Ships/CopyXX12ScaledToXX18.asm
 855+ CF44                                      include "./Universe/Ships/CopyXX12toXX15.asm"
# file opened: ././Universe/Ships/CopyXX12toXX15.asm
   1++CF44              CopyXX12toXX15:         ldCopyByte  UBnkXX12xLo     ,UBnkXScaled        ; xlo
   1++CF44 3A AC C0    >                        ld       a,(UBnkXX12xLo)
   1++CF47 32 A6 C0    >                        ld       (UBnkXScaled),a
   2++CF4A                                      ldCopyByte  UBnkXX12xSign   ,UBnkXScaledSign    ; xsg
   2++CF4A 3A AD C0    >                        ld       a,(UBnkXX12xSign)
   2++CF4D 32 A7 C0    >                        ld       (UBnkXScaledSign),a
   3++CF50                                      ldCopyByte  UBnkXX12yLo     ,UBnkYScaled        ; xlo
   3++CF50 3A AE C0    >                        ld       a,(UBnkXX12yLo)
   3++CF53 32 A8 C0    >                        ld       (UBnkYScaled),a
   4++CF56                                      ldCopyByte  UBnkXX12ySign   ,UBnkYScaledSign    ; xsg
   4++CF56 3A AF C0    >                        ld       a,(UBnkXX12ySign)
   4++CF59 32 A9 C0    >                        ld       (UBnkYScaledSign),a
   5++CF5C                                      ldCopyByte  UBnkXX12zLo     ,UBnkZScaled        ; xlo
   5++CF5C 3A B0 C0    >                        ld       a,(UBnkXX12zLo)
   5++CF5F 32 AA C0    >                        ld       (UBnkZScaled),a
   6++CF62                                      ldCopyByte  UBnkXX12zSign   ,UBnkZScaledSign    ; xsg
   6++CF62 3A B1 C0    >                        ld       a,(UBnkXX12zSign)
   6++CF65 32 AB C0    >                        ld       (UBnkZScaledSign),a
   7++CF68 C9                                   ret
   8++CF69
# file closed: ././Universe/Ships/CopyXX12toXX15.asm
 856+ CF69                                      include "./Universe/Ships/CopyXX18toXX15.asm"
# file opened: ././Universe/Ships/CopyXX18toXX15.asm
   1++CF69              CopyXX18toXX15:
   2++CF69              CopyDrawCamToScaled:
   3++CF69                      ldCopyByte  UBnkDrawCam0xLo ,UBnkXScaled        ; xlo
   3++CF69 3A 9A C0    >                        ld       a,(UBnkDrawCam0xLo)
   3++CF6C 32 A6 C0    >                        ld       (UBnkXScaled),a
   4++CF6F                      ldCopyByte  UBnkDrawCam0xSgn,UBnkXScaledSign    ; xsg
   4++CF6F 3A 9C C0    >                        ld       a,(UBnkDrawCam0xSgn)
   4++CF72 32 A7 C0    >                        ld       (UBnkXScaledSign),a
   5++CF75                      ldCopyByte  UBnkDrawCam0yLo ,UBnkYScaled        ; xlo
   5++CF75 3A 9D C0    >                        ld       a,(UBnkDrawCam0yLo)
   5++CF78 32 A8 C0    >                        ld       (UBnkYScaled),a
   6++CF7B                      ldCopyByte  UBnkDrawCam0ySgn,UBnkYScaledSign    ; xsg
   6++CF7B 3A 9F C0    >                        ld       a,(UBnkDrawCam0ySgn)
   6++CF7E 32 A9 C0    >                        ld       (UBnkYScaledSign),a
   7++CF81                      ldCopyByte  UBnkDrawCam0zLo ,UBnkZScaled        ; xlo
   7++CF81 3A A0 C0    >                        ld       a,(UBnkDrawCam0zLo)
   7++CF84 32 AA C0    >                        ld       (UBnkZScaled),a
   8++CF87                      ldCopyByte  UBnkDrawCam0zSgn,UBnkZScaledSign    ; xsg
   8++CF87 3A A2 C0    >                        ld       a,(UBnkDrawCam0zSgn)
   8++CF8A 32 AB C0    >                        ld       (UBnkZScaledSign),a
   9++CF8D C9                   ret
  10++CF8E
# file closed: ././Universe/Ships/CopyXX18toXX15.asm
 857+ CF8E                                      include "./Universe/Ships/CopyXX18ScaledToXX15.asm"
# file opened: ././Universe/Ships/CopyXX18ScaledToXX15.asm
   1++CF8E 2A 20 C0     LoadCraftToCamera:      ld      hl,(UBnKxlo)            ; UBnKxlo, UBnKxhi
   2++CF91 ED 5B 22 C0                          ld      de,(UBnKxsgn)           ; UBnKxsgn, UBnKylo
   3++CF95 ED 4B 24 C0                          ld      bc,(UBnKyhi)            ; UBnKyhi, UBnKysgn
   4++CF99 22 9A C0                             ld      (UBnkDrawCam0xLo),hl    ; UBnkDrawCam0xLo, UBnkDrawCam0xHi
   5++CF9C ED 53 9C C0                          ld      (UBnkDrawCam0xSgn),de   ; UBnkDrawCam0xSgn,UBnkDrawCam0yLo
   6++CFA0 ED 43 9E C0                          ld      (UBnkDrawCam0yHi),bc    ; UBnkDrawCam0yHi, UBnkDrawCam0ySgn
   7++CFA4
   8++CFA4 2A 26 C0                             ld      hl,(UBnKzlo)            ; UBnKzlo, UBnKzhi
   9++CFA7 3A 28 C0                             ld      a,(UBnKzsgn)             ; UBnKzlo
  10++CFAA 22 A0 C0                             ld      (UBnkDrawCam0zLo),hl    ; UBnkDrawCam0zLo, UBnkDrawCam0zHi
  11++CFAD 32 A2 C0                             ld      (UBnkDrawCam0zSgn),a    ; UBnkDrawCam0zSgn
  12++CFB0 C9                                   ret
  13++CFB1              ;                       ld      hl,UBnKxlo
  14++CFB1              ;                       ld      de,UBnkDrawCam0xLo
  15++CFB1              ;                       NineLDIInstrunctions                ; transfer 9 bytes
  16++CFB1 C9                                   ret
  17++CFB2
  18++CFB2 2A 9A C0     CopyCameraToXX15Signed: ld  hl,(UBnkDrawCam0xLo)
  19++CFB5 3A 9C C0                             ld  a,(UBnkDrawCam0xSgn)
  20++CFB8 B4                                   or  h
  21++CFB9 67                                   ld  h,a
  22++CFBA 22 A6 C0                             ld  (UBnkXScaled),hl
  23++CFBD 2A 9D C0                             ld  hl,(UBnkDrawCam0yLo)
  24++CFC0 3A 9F C0                             ld  a,(UBnkDrawCam0ySgn)
  25++CFC3 B4                                   or  h
  26++CFC4 67                                   ld  h,a
  27++CFC5 22 A8 C0                             ld  (UBnkYScaled),hl
  28++CFC8 2A A0 C0                             ld  hl,(UBnkDrawCam0zLo)
  29++CFCB 3A A2 C0                             ld  a,(UBnkDrawCam0zSgn)
  30++CFCE B4                                   or  h
  31++CFCF 67                                   ld  h,a
  32++CFD0 22 AA C0                             ld  (UBnkZScaled),hl
  33++CFD3 C9                                   ret
  34++CFD4
  35++CFD4              ;;;CopyXX18ScaledToXX15:
  36++CFD4              ;;;CopyDrawCamToScaledMatrix:
  37++CFD4              ;;;        ldCopyByte  UBnkDrawCam0zSgn, UBnkZScaledSign   ; XX18+8 => XX15+5
  38++CFD4              ;;;        ldCopyByte  UBnkDrawCam0xLo,  UBnkXScaled       ; XX18+0 => XX15+0
  39++CFD4              ;;;        ldCopyByte  UBnkDrawCam0xSgn, UBnkXScaledSign   ; XX18+2 => XX15+1
  40++CFD4              ;;;        ldCopyByte  UBnkDrawCam0yLo,  UBnkYScaled       ; XX18+3 => XX15+2
  41++CFD4              ;;;        ldCopyByte  UBnkDrawCam0ySgn, UBnkYScaledSign   ; XX18+5 => XX15+3
  42++CFD4              ;;;        ldCopyByte  UBnkDrawCam0zLo,  UBnkZScaled       ; XX18+6 => XX15+4
  43++CFD4              ;;;        ret
  44++CFD4
  45++CFD4              ;;;CopyXX15ToXX18Scaled:
  46++CFD4              ;;;CopyScaledMatrixToDrawCam:
  47++CFD4              ;;;        ldCopyByte UBnkZScaledSign,   UBnkDrawCam0zSgn  ; XX15+5 => XX18+8
  48++CFD4              ;;;        ldCopyByte UBnkXScaled,       UBnkDrawCam0xLo   ; XX15+0 => XX18+0
  49++CFD4              ;;;        ldCopyByte UBnkXScaledSign,   UBnkDrawCam0xSgn  ; XX15+1 => XX18+2
  50++CFD4              ;;;        ldCopyByte UBnkYScaled,       UBnkDrawCam0yLo   ; XX15+2 => XX18+3
  51++CFD4              ;;;        ldCopyByte UBnkYScaledSign,   UBnkDrawCam0ySgn  ; XX15+3 => XX18+5
  52++CFD4              ;;;        ldCopyByte UBnkZScaled,       UBnkDrawCam0zLo   ; XX15+4 => XX18+6
  53++CFD4              ;;;        ret
  54++CFD4
  55++CFD4
  56++CFD4              XX15EquXX15AddXX18:
  57++CFD4              LL94Z:
  58++CFD4 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  59++CFD6 16 00                ld      d,0                                                     ;
  60++CFD8 3A AA C0             ld      a,(UBnkZScaled)                                         ;
  61++CFDB 6F                   ld      l,a                                                     ;
  62++CFDC 3A AB C0             ld      a,(UBnkZScaledSign)                                     ;
  63++CFDF 47                   ld      b,a                                                     ;
  64++CFE0 3A A0 C0             ld      a,(UBnkDrawCam0zLo)                                     ;
  65++CFE3 5F                   ld      e,a                                                     ;
  66++CFE4 3A A2 C0             ld      a,(UBnkDrawCam0zSgn)                                    ;
  67++CFE7 4F                   ld      c,a                                                     ;
  68++CFE8 CD 2F 00             call    ADDHLDESignBC                                           ;
  69++CFEB 47                   ld      b,a                                                     ;
  70++CFEC 7C                   ld      a,h                                                     ;
  71++CFED 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  72++CFEE 32 AB C0             ld      (UBnkZScaledSign),a                                     ;
  73++CFF1 7D                   ld      a,l                                                     ;
  74++CFF2 32 AA C0             ld      (UBnkZScaled),a                                         ;           endif
  75++CFF5              LL94X:
  76++CFF5 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  77++CFF7 16 00                ld      d,0                                                     ;
  78++CFF9 3A A6 C0             ld      a,(UBnkXScaled)                                         ;
  79++CFFC 6F                   ld      l,a                                                     ;
  80++CFFD 3A A7 C0             ld      a,(UBnkXScaledSign)                                     ;
  81++D000 47                   ld      b,a                                                     ;
  82++D001 3A 9A C0             ld      a,(UBnkDrawCam0xLo)                                     ;
  83++D004 5F                   ld      e,a                                                     ;
  84++D005 3A 9C C0             ld      a,(UBnkDrawCam0xSgn)                                    ;
  85++D008 4F                   ld      c,a                                                     ;
  86++D009 CD 2F 00             call    ADDHLDESignBC                                           ;
  87++D00C 47                   ld      b,a                                                     ;
  88++D00D 7C                   ld      a,h                                                     ;
  89++D00E 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  90++D00F 32 A7 C0             ld      (UBnkXScaledSign),a                                     ;
  91++D012 7D                   ld      a,l                                                     ;
  92++D013 32 A6 C0             ld      (UBnkXScaled),a                                         ;           endif
  93++D016              LL94Y:
  94++D016 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  95++D018 16 00                ld      d,0                                                     ;
  96++D01A 3A A8 C0             ld      a,(UBnkYScaled)                                         ;
  97++D01D 6F                   ld      l,a                                                     ;
  98++D01E 3A A9 C0             ld      a,(UBnkYScaledSign)                                     ;
  99++D021 47                   ld      b,a                                                     ;
 100++D022 3A 9D C0             ld      a,(UBnkDrawCam0yLo)                                     ;
 101++D025 5F                   ld      e,a                                                     ;
 102++D026 3A 9F C0             ld      a,(UBnkDrawCam0ySgn)                                    ;
 103++D029 4F                   ld      c,a                                                     ;
 104++D02A CD 2F 00             call    ADDHLDESignBC                                           ;
 105++D02D 47                   ld      b,a                                                     ;
 106++D02E 7C                   ld      a,h                                                     ;
 107++D02F 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
 108++D030 32 A9 C0             ld      (UBnkYScaledSign),a                                     ;
 109++D033 7D                   ld      a,l                                                     ;
 110++D034 32 A8 C0             ld      (UBnkYScaled),a                                         ;
 111++D037 C9                   ret
 112++D038
# file closed: ././Universe/Ships/CopyXX18ScaledToXX15.asm
 858+ D038                                      include "./Universe/Ships/CopyXX12ToScaled.asm"
# file opened: ././Universe/Ships/CopyXX12ToScaled.asm
   1++D038              CopyXX12ToScaled:
   2++D038              CopyResultToScaled:
   3++D038                      ldCopyByte  XX12+0,UBnkXScaled      ; xnormal lo
   3++D038 3A AC C0    >                        ld       a,(XX12+0)
   3++D03B 32 A6 C0    >                        ld       (UBnkXScaled),a
   4++D03E                      ldCopyByte  XX12+2,UBnkYScaled      ; ynormal lo
   4++D03E 3A AE C0    >                        ld       a,(XX12+2)
   4++D041 32 A8 C0    >                        ld       (UBnkYScaled),a
   5++D044                      ldCopyByte  XX12+4,UBnkZScaled      ; znormal lo and leaves a holding zscaled normal
   5++D044 3A B0 C0    >                        ld       a,(XX12+4)
   5++D047 32 AA C0    >                        ld       (UBnkZScaled),a
   6++D04A C9                   ret
   7++D04B
# file closed: ././Universe/Ships/CopyXX12ToScaled.asm
 859+ D04B              ;--------------------------------------------------------------------------------------------------------
 860+ D04B                                      include "./Maths/Utilities/DotProductXX12XX15.asm"
# file opened: ././Maths/Utilities/DotProductXX12XX15.asm
   1++D04B              ;;; Q = XX12 xLo ,A = XX15 xLo
   2++D04B              ;;; T = A * Q/256 Usgined  (FMLTU)
   3++D04B              ;;; S = XX12 XSign Xor XX15 XSign
   4++D04B              ;;; Q = XX12 Ynormal Lo, A = XX15+2 (y lo)
   5++D04B              ;;; Q = A * Q/256 Usigned (FMLTI)
   6++D04B              ;;; R = T
   7++D04B              ;;; A = XX12+3 (ySign) Xor XX15+3 (ySign)
   8++D04B              ;;; T = BADD s(A) = R + Q(SA) (xdot + ydot)
   9++D04B              ;;; Q = XX12+4 (znormal lo) A = XX15+4 z lo
  10++D04B              ;;; Q = A * Q /256 usigned (zdot)
  11++D04B              ;;; R = T
  12++D04B              ;;; A - XX15+ 5 Zsign Xor XX12+5 Z Sign
  13++D04B
  14++D04B
  15++D04B
  16++D04B
  17++D04B
  18++D04B              MacroAequDxEdiv256usgn:	MACRO
  19++D04B ~            						mul
  20++D04B ~            						ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  21++D04B              						ENDM
  22++D04B              DotProductXX12XX15:
  23++D04B 3A AC C0             ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  24++D04E                      JumpIfAIsZero dotxskipzero
  24++D04E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  24++D04F CA 6C D0    >                        jp	    z, dotxskipzero
  25++D052 5F                   ld          e,a
  26++D053 3A A6 C0             ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  27++D056 57                   ld          d,a                     ; de = xx12 x signed
  28++D057                      JumpIfAIsZero dotxskipzero
  28++D057 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  28++D058 CA 6C D0    >                        jp	    z, dotxskipzero
  29++D05B ED 30        		mul
  30++D05D 42                   ld          b,d                     ; b = result
  31++D05E 3A AD C0             ld          a,(UBnkXX12xSign)
  32++D061 21 A7 C0             ld          hl,UBnkXScaledSign
  33++D064 AE                   xor         (hl)
  34++D065 E6 80                and         $80                     ; so sign bit only
  35++D067 FD 67                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
  36++D069 C3 70 D0             jp          dotmuly
  37++D06C              dotxskipzero:
  38++D06C AF                   xor         a
  39++D06D 47                   ld          b,a
  40++D06E FD 67                ld          iyh,a
  41++D070              dotmuly:
  42++D070              ; now we have b = XX12 x &d  norm x signed
  43++D070 3A AE C0             ld          a,(UBnkXX12yLo)
  44++D073                      JumpIfAIsZero dotyskipzero
  44++D073 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  44++D074 CA 93 D0    >                        jp	    z, dotyskipzero
  45++D077 5F                   ld          e,a
  46++D078 3A A8 C0             ld          a,(UBnkYScaled)         ; XX15+2
  47++D07B                      JumpIfAIsZero dotyskipzero
  47++D07B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  47++D07C CA 93 D0    >                        jp	    z, dotyskipzero
  48++D07F 57                   ld          d,a                     ; de = xx12 x signed
  49++D080 ED 30                mul
  50++D082 4A                   ld          c,d                     ; c = result
  51++D083 DD 69                ld          ixl,c
  52++D085 3A AF C0             ld          a,(UBnkXX12ySign)       ; A = ysg
  53++D088 21 A9 C0             ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
  54++D08B AE                   xor         (hl)                    ; XX15+3
  55++D08C E6 80                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
  56++D08E DD 67                ld          ixh,a
  57++D090 C3 97 D0             jp          dotaddxy
  58++D093              dotyskipzero:
  59++D093 AF                   xor         a
  60++D094 4F                   ld          c,a
  61++D095 DD 67                ld          ixh,a
  62++D097              dotaddxy:
  63++D097              ; Optimise later as this is 16 bit
  64++D097 26 00                ld          h,0                     ;
  65++D099 68                   ld          l,b                     ; hl = xlo + x scaled
  66++D09A 16 00                ld          d,0                     ;
  67++D09C 59                   ld          e,c                     ; de = ylo + yscaled
  68++D09D FD 44                ld          b,iyh                   ; b = sign of xlo + xscaled
  69++D09F 4F                   ld          c,a                     ; c = sign of ylo + yscaled
  70++D0A0 CD 2F 00             call ADDHLDESignBC                  ; so now hl = result so will push sign to h
  71++D0A3 47                   ld          b,a                     ; b = resultant sign , hl = add so far
  72++D0A4 3A B0 C0             ld          a,(UBnkXX12zLo)         ;
  73++D0A7                      JumpIfAIsZero dotzskipzero
  73++D0A7 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  73++D0A8 CA CD D0    >                        jp	    z, dotzskipzero
  74++D0AB 5F                   ld          e,a                     ;
  75++D0AC 3A AA C0             ld          a,(UBnkZScaled)         ;
  76++D0AF                      JumpIfAIsZero dotzskipzero
  76++D0AF A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  76++D0B0 CA CD D0    >                        jp	    z, dotzskipzero
  77++D0B3 57                   ld          d,a
  78++D0B4 ED 30                mul
  79++D0B6 E5                   push        hl                      ; save prev result
  80++D0B7 3A AB C0             ld          a,(UBnkZScaledSign)
  81++D0BA 21 B1 C0             ld          hl, UBnkXX12zSign       ; XX15+5
  82++D0BD AE                   xor         (hl)                    ; hi sign
  83++D0BE E6 80                and         $80                     ; a = sign of multiply
  84++D0C0 4F                   ld          c,a                     ; c = sign of z lo & z scaled
  85++D0C1 E1                   pop         hl
  86++D0C2 5A                   ld          e,d
  87++D0C3 16 00                ld          d,0
  88++D0C5 CD 2F 00             call ADDHLDESignBC
  89++D0C8 32 9E 7E             ld          (varS),a
  90++D0CB 7D                   ld          a,l
  91++D0CC C9                   ret                                 ; returns with A = value, varS = sign
  92++D0CD              dotzskipzero:                               ; if we got here then z was zero so no component so just tidy up from last add
  93++D0CD 78                   ld          a,b
  94++D0CE 32 9E 7E             ld          (varS),a
  95++D0D1 7D                   ld          a,l
  96++D0D2 C9                   ret
  97++D0D3              ;;;;       DotProductXX12XX15:
  98++D0D3              ;;;;       ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  99++D0D3              ;;;;       ld          e,a
 100++D0D3              ;;;;       ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
 101++D0D3              ;;;;       ld          d,a                     ; de = xx12 x signed
 102++D0D3              ;;;;		; FMLTU	\ A=A*Q/256unsg using D as A and E as Q
 103++D0D3              ;;;;		mul
 104++D0D3              ;;;;       ld          b,d                     ; b as var T
 105++D0D3              ;;;;       ld          a,(UBnkXX12xSign)
 106++D0D3              ;;;;       ld          hl,UBnkXScaledSign
 107++D0D3              ;;;;       xor         (hl)
 108++D0D3              ;;;;       and         $80                     ; so sign bit only
 109++D0D3              ;;;;       ld          (varS),a                ; we did use c as S \ S	\ x-sign, but we actually need it in varS for BADD
 110++D0D3              ;;;; now we have b = XX12 x & norm x signed
 111++D0D3              ;;;; by here B = xlo & xscaled C = result sign
 112++D0D3              ;;;;       ld          a,(UBnkXX12yLo)
 113++D0D3              ;;;;       ld          e,a
 114++D0D3              ;;;;       ld          a,(UBnkYScaled)         ; XX15+2
 115++D0D3              ;;;;		ld          d,a						; MISSED THIS EARLIER BUG FIX
 116++D0D3              ;;;;       mul
 117++D0D3              ;;;;       ld          a,d
 118++D0D3              ;;;;       ld          (varQ),a                ; Q = Y y-dot
 119++D0D3              ;;;;       ld          a,b                     ; get back T from above held in b
 120++D0D3              ;;;;       ld          (varR),a                ; R= b \ T	\ x-dot
 121++D0D3              ;;;;       ld          a,(UBnkXX12ySign)       ; A = ysg
 122++D0D3              ;;;;       ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
 123++D0D3              ;;;;       xor         (hl)                    ; XX15+3
 124++D0D3              ;;;;       and         $80
 125++D0D3              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 126++D0D3              ;;;;       ld          (varT),a                ; var T	\ xdot+ydot
 127++D0D3              ;;;;       ld          a,(UBnkXX12zLo)         ; use d as  varQ        ; XX12+4	\ znormal lo to varQ
 128++D0D3              ;;;;       ld          e,a                     ; use e as var Q
 129++D0D3              ;;;;       ld          a,(UBnkZScaled)         ;
 130++D0D3              ;;;;       ld          d,a
 131++D0D3              ;;;;       mul
 132++D0D3              ;;;;       ld          a,d
 133++D0D3              ;;;;       ld          (varQ),a                ; Q	\ zdot
 134++D0D3              ;;;;       ldCopyByte  varT,varR               ; copy T to R so R = resutl of previous calc
 135++D0D3              ;;;;       ld          a,(UBnkZScaledSign)
 136++D0D3              ;;;;       ld          hl, UBnkXX12zSign       ; XX15+5
 137++D0D3              ;;;;       xor         (hl)                    ; hi sign
 138++D0D3              ;;;;       and         $80
 139++D0D3              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 140++D0D3              ;;;;       ret                                 ; returns with A = value, varS = sign
 141++D0D3
# file closed: ././Maths/Utilities/DotProductXX12XX15.asm
 861+ D0D3              ;--------------------------------------------------------------------------------------------------------
 862+ D0D3              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
 863+ D0D3              ; Not Used in code      include "Universe/Ships/ScaleNormal.asm"
 864+ D0D3              ;--------------------------------------------------------------------------------------------------------
 865+ D0D3                                      include "./Universe/Ships/ScaleObjectDistance.asm"
# file opened: ././Universe/Ships/ScaleObjectDistance.asm
   1++D0D3              ScaleObjectDistance:
   2++D0D3              ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3++D0D3 3A 09 C4             ld      a,(QAddr)                   ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4++D0D6 4F                   ld      c,a                         ; c = Q factor for scaling of normals
   5++D0D7              LL90:                                       ; scaling object distance
   6++D0D7 3A A1 C0             ld      a,(UBnkDrawCam0zHi)         ; z_hi
   7++D0DA 47                   ld      b,a                         ; z_hi (yReg)
   8++D0DB                      ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   8++D0DB A7          >                        and     a
   8++D0DC C8          >                        ret     z
   9++D0DD              LL90Loop:
  10++D0DD              ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  11++D0DD 0C                   inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  12++D0DE                      ShiftMem16Right1 UBnkDrawCam0yLo    ; cam Y /= 2
  12++D0DE 2A 9D C0    >                    ld    hl,(UBnkDrawCam0yLo)
  12++D0E1 CB 3C       >                    srl   h
  12++D0E3 CB 1D       >                    rr    l
  12++D0E5 22 9D C0    >                    ld    (UBnkDrawCam0yLo),hl
  13++D0E8                      ShiftMem16Right1 UBnkDrawCam0xLo    ; cam X /= 2
  13++D0E8 2A 9A C0    >                    ld    hl,(UBnkDrawCam0xLo)
  13++D0EB CB 3C       >                    srl   h
  13++D0ED CB 1D       >                    rr    l
  13++D0EF 22 9A C0    >                    ld    (UBnkDrawCam0xLo),hl
  14++D0F2                      ShiftMem16Right1 UBnkDrawCam0zLo    ; cam Z /= 2
  14++D0F2 2A A0 C0    >                    ld    hl,(UBnkDrawCam0zLo)
  14++D0F5 CB 3C       >                    srl   h
  14++D0F7 CB 1D       >                    rr    l
  14++D0F9 22 A0 C0    >                    ld    (UBnkDrawCam0zLo),hl
  15++D0FC 7C                   ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  16++D0FD                      JumpIfAIsNotZero LL90Loop           ; loop until z hi = 0 this gives scalinging in c
  16++D0FD A7          >                        and     a
  16++D0FE C2 DD D0    >                        jp	    nz,LL90Loop
  17++D101 C9                   ret
  18++D102
# file closed: ././Universe/Ships/ScaleObjectDistance.asm
 866+ D102              ;--------------------------------------------------------------------------------------------------------
 867+ D102
 868+ D102              ; Backface cull
 869+ D102              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
 870+ D102              ; normal vector = cross product of ship ccordinates
 871+ D102              ;
 872+ D102                                      include "./Universe/Ships/CopyFaceToXX15.asm"
# file opened: ././Universe/Ships/CopyFaceToXX15.asm
   1++D102 7E           CopyFaceToXX15:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D103 47                                   ld      b,a                                                    ;;;
   3++D104 E6 80                                and     SignOnly8Bit
   4++D106 32 A7 C0                             ld      (UBnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D109 78                                   ld      a,b
   6++D10A CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D10C 47                                   ld      b,a
   8++D10D E6 80                                and     SignOnly8Bit
   9++D10F 32 A9 C0                             ld      (UBnkYScaledSign),a           ;                                                                                      ;;;
  10++D112 78                                   ld      a,b
  11++D113 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D115 E6 80                                and     SignOnly8Bit
  13++D117 32 AB C0                             ld      (UBnkZScaledSign),a           ;                                                                                      ;;;
  14++D11A 23                                   inc     hl                          ; move to X ccord
  15++D11B 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D11C 32 A6 C0                             ld      (UBnkXScaled),a                                                                                                    ;;;
  17++D11F 23                                   inc     hl                                                                                                                 ;;;
  18++D120 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D121 32 A8 C0                             ld      (UBnkYScaled),a                                                                                                    ;;;
  20++D124 23                                   inc     hl                                                                                                                 ;;;
  21++D125 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D126 32 AA C0                             ld      (UBnkZScaled),a
  23++D129 C9                                   ret
  24++D12A
# file closed: ././Universe/Ships/CopyFaceToXX15.asm
 873+ D12A                                      include "./Universe/Ships/CopyFaceToXX12.asm"
# file opened: ././Universe/Ships/CopyFaceToXX12.asm
   1++D12A 7E           CopyFaceToXX12:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D12B 47                                   ld      b,a                         ; save sign bits to b
   3++D12C E6 80                                and     SignOnly8Bit
   4++D12E 32 AD C0                             ld      (UBnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D131 78                                   ld      a,b
   6++D132 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D134 47                                   ld      b,a
   8++D135 E6 80                                and     SignOnly8Bit
   9++D137 32 AF C0                             ld      (UBnkXX12ySign),a           ;                                                                                      ;;;
  10++D13A 78                                   ld      a,b
  11++D13B CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D13D E6 80                                and     SignOnly8Bit
  13++D13F 32 B1 C0                             ld      (UBnkXX12zSign),a           ;                                                                                      ;;;
  14++D142 23                                   inc     hl                          ; move to X ccord
  15++D143 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D144 32 AC C0                             ld      (UBnkXX12xLo),a                                                                                                    ;;;
  17++D147 23                                   inc     hl                                                                                                                 ;;;
  18++D148 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D149 32 AE C0                             ld      (UBnkXX12yLo),a                                                                                                    ;;;
  20++D14C 23                                   inc     hl                                                                                                                 ;;;
  21++D14D 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D14E 32 B0 C0                             ld      (UBnkXX12zLo),a
  23++D151 C9                                   ret
  24++D152
# file closed: ././Universe/Ships/CopyFaceToXX12.asm
 874+ D152              ;--------------------------------------------------------------
 875+ D152              ; Original loginc in EE29 (LL9 4 of 12)
 876+ D152              ; Enters with XX4 = z distnace scaled to 1 .. 31
 877+ D152              ; get number of faces * 4      FaceCntX4
 878+ D152              ; return if no faces
 879+ D152              ; get Face Normal scale factor FaceScale (XX17)
 880+ D152              ; get ship pos z hi     (XX18)
 881+ D152              ; While Z hi <> 0
 882+ D152              ;    FaceScale = FaceScale + 1           (XX17)
 883+ D152              ;    Ship pos y = ship pos y / 2         (XX18)
 884+ D152              ;    ship pos x = ship pos x / 2         (XX18)
 885+ D152              ;    ship pos z = ship pos z / 2         (XX18)
 886+ D152              ; Loop
 887+ D152              ; Copy Ship Pos (XX18) to Scaled         (XX15)
 888+ D152              ; Get Dot Product of Scaled (XX15) and XX16 (pre inverted) into XX12
 889+ D152              ; Copy XX12 into XX18
 890+ D152              ; For each face
 891+ D152              ;     Get Face sign and visibility distance byte
 892+ D152              ;     if normal visibility range  < XX4
 893+ D152              ;        Get Face data into XX12
 894+ D152              ;        if FaceScale (XX17) >= 4
 895+ D152              ;            Copy Ship Pos (XX18) to scaled (XX15)                                                                  ::LL143
 896+ D152              ;        else
 897+ D152              ;           Copy FaceScale scaled to X  (XX17)
 898+ D152              ;LabelOverflowLoop:
 899+ D152              ;           Copy FaceData (XX12) to Scaled (XX15)                                                                   ::LL92
 900+ D152              ;           While X >= 0
 901+ D152              ;              X--                                                                                                  ::LL93
 902+ D152              ;              if  x >= 0
 903+ D152              ;                  XX15x = XX15x / 2
 904+ D152              ;                  XX15y = XX15y / 2
 905+ D152              ;                  XX15y = XX15y / 2
 906+ D152              ;           loop
 907+ D152              ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z                                                              ::LL94
 908+ D152              ;           if A > 256 (i.e. was overflow)
 909+ D152              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 910+ D152              ;               X = 1
 911+ D152              ;               Goto LabelOverflowLoop
 912+ D152              ;           else
 913+ D152              ;              Scaled (XX15) Z = AddZ
 914+ D152              ;           endif
 915+ D152              ;           AddX = FaceData (XX12)x +  ShipPos (XX18)x
 916+ D152              ;           if A > 256 (i.e. was overflow)
 917+ D152              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 918+ D152              ;               X = 1
 919+ D152              ;               Goto LabelOverflowLoop
 920+ D152              ;           else
 921+ D152              ;              Scaled (XX15) X = AddX
 922+ D152              ;           endif
 923+ D152              ;           AddY = FaceData (XX12)y +  ShipPos (XX18)y
 924+ D152              ;           if A > 256 (i.e. was overflow)
 925+ D152              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 926+ D152              ;               X = 1
 927+ D152              ;               Goto LabelOverflowLoop
 928+ D152              ;           else
 929+ D152              ;              Scaled (XX15) Y = AddY
 930+ D152              ;           endif
 931+ D152              ;        endif
 932+ D152              ;        calculate dot product XX12.XX15  (XX15x * XX12x /256 + XX15y * XX12y /256 + XX15z * XX12z /256)        ::LL89
 933+ D152              ;        if dot product < 0
 934+ D152              ;           set face visible
 935+ D152              ;        else
 936+ D152              ;           set face invisible
 937+ D152              ;        end if
 938+ D152              ;     else
 939+ D152              ;       Set FaceVisibility to true
 940+ D152              ;     end if
 941+ D152              ; Next Face
 942+ D152
 943+ D152              ;line of sight vector = [x y z] + face normal vector
 944+ D152
 945+ D152              ;               [ [x y z] . sidev + normal_x ]   [ normal_x ]
 946+ D152              ;  visibility = [ [x y z] . roofv + normal_y ] . [ normal_y ]
 947+ D152              ;               [ [x y z] . nosev + normal_z ]   [ normal_z ]
 948+ D152              ;
 949+ D152              ;--------------------------------------------------------------
 950+ D152              ; line of sight (eye outwards dot face normal vector < 0
 951+ D152              ; So lin eof sight = vector from 0,0,0 to ship pos, now we need to consider teh ship's facing
 952+ D152              ; now if we add teh veector for teh normal(times magnitude)) to teh ship position we have the true center of the face
 953+ D152              ; now we can calcualt teh dot product of this caulated vector and teh normal which if < 0 is goot. this means we use rot mat not inverted rotmat.
 954+ D152                  include "./ModelRender/BackfaceCull.asm"
# file opened: ././ModelRender/BackfaceCull.asm
   1++D152              ;    DEFINE DEBUGDRAWDISTANCE 1
   2++D152                  DEFINE CHECKDOTSHIPDATA  1
   3++D152               ;   DEFINE DEBUGFORCEFACEDRAW 1
   4++D152 00           CurrentNormIdx  DB 0
   5++D153              ; SomeFacesVisible:
   6++D153              ; EE29:
   7++D153
   8++D153              ;   Backface cull logic  line of sight vector . face normal vector
   9++D153              ;       line of sight vector . face normal vector
  10++D153              ;       => line of sight vector = [x y z] + face normal vector
  11++D153              ;       Where [x y z] =
  12++D153              ;                                               [ [x y z] . sidev ]
  13++D153              ;                    projected [x y z] vector = [ [x y z] . roofv ]
  14++D153              ;                                               [ [x y z] . nosev ]
  15++D153              ;
  16++D153              ;   so project the [x y z] vector into the face's normal space
  17++D153              ;  line of sight vector = projected [x y z] vector + face normal vector
  18++D153              ;                         [ [x y z] . sidev ]   [ normal_x ]
  19++D153              ;                       = [ [x y z] . roofv ] + [ normal_y ]
  20++D153              ;                         [ [x y z] . nosev ]   [ normal_z ]
  21++D153              ;
  22++D153              ;                         [ [x y z] . sidev + normal_x ]
  23++D153              ;                       = [ [x y z] . roofv + normal_y ]
  24++D153              ;                         [ [x y z] . nosev + normal_z ]
  25++D153              ;
  26++D153              ; so
  27++D153              ;              visibility = [ [x y z] . sidev + normal_x ]   [ normal_x ]
  28++D153              ;                            [ [x y z] . roofv + normal_y ] . [ normal_y ]
  29++D153              ;                           [ [x y z] . nosev + normal_z ]   [ normal_z ]
  30++D153              ;
  31++D153              ; where face is visible if visibility < 0
  32++D153              ;
  33++D153              ;   so we set XX15 to [x y z] . sidev
  34++D153              ;                     [x y z] . roofv
  35++D153              ;                     [x y z] . nosev
  36++D153              ;
  37++D153
  38++D153
  39++D153
  40++D153 3A A1 C0     ScaleDrawcam:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
  41++D156                                      JumpIfAIsZero .ScaleDone            ;
  41++D156 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  41++D157 CA 83 D1    >                        jp	    z, .ScaleDone
  42++D15A 2A 9A C0                             ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
  43++D15D ED 5B 9D C0                          ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
  44++D161 ED 4B A0 C0                          ld      bc,(UBnkDrawCam0zLo)        ;
  45++D165 FD 2C        .ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
  46++D167                                      ShiftHLRight1                       ; divide cam position by 2
  46++D167 CB 3C       >			   srl h
  46++D169 CB 1D       >			   rr  l
  47++D16B                                      ShiftDERight1                       ;
  47++D16B CB 3A       >			   srl d
  47++D16D CB 1B       >			   rr  e
  48++D16F                                      ShiftBCRight1                       ;
  48++D16F CB 38       >			   srl b
  48++D171 CB 19       >			   rr  c
  49++D173 78                                   ld      a,b                         ; loop if not scaled down
  50++D174                                      JumpIfAIsNotZero .ScaleNormalLoop     ;
  50++D174 A7          >                        and     a
  50++D175 C2 65 D1    >                        jp	    nz,.ScaleNormalLoop
  51++D178 22 9A C0                             ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
  52++D17B ED 53 9D C0                          ld      (UBnkDrawCam0yLo),de        ;
  53++D17F ED 43 A0 C0                          ld      (UBnkDrawCam0zLo),bc        ;
  54++D183 FD 7D        .ScaleDone:             ld      a,iyl
  55++D185 32 A3 7E                             ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
  56++D188 C9                                   ret
  57++D189
  58++D189 3A 28 C0     CheckVisible:           ld      a,(UBnKzsgn)                 ; Is the ship behind us
  59++D18C E6 80        .CheckBehind:           and     SignOnly8Bit                 ; which means z sign is negative
  60++D18E 20 31                                jr      nz,.ShipNoDraw               ; .
  61++D190 2A 26 C0     .CheckViewPort:         ld      hl,(UBnKzlo)                 ; now check to see if its within 90 degree arc
  62++D193 7C                                   ld      a,h
  63++D194                                      JumpIfAGTENusng ShipMaxDistance, .ShipNoDraw
  63++D194 FE C0       >                        cp     ShipMaxDistance
  63++D196 D2 C1 D1    >                        jp		nc,.ShipNoDraw
  64++D199 ED 5B 20 C0  .CheckXAxis:            ld      de,(UBnKxlo)                 ; if abs x > abx z then its out side of view port
  65++D19D CD 42 98                             call    compare16HLDE
  66++D1A0 38 1F                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
  67++D1A2 ED 5B 23 C0  .CheckYAxis:            ld      de,(UBnKylo)                ; if abs y > abx z then its out side of view port
  68++D1A6 CD 42 98                             call    compare16HLDE
  69++D1A9 38 16                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
  70++D1AB                                      IFDEF   CHECKDOTSHIPDATA
  71++D1AB 3A 04 C4     .CheckDotV2:                ld      a,(DotAddr)
  72++D1AE                                          JumpIfAGTENusng h, .DrawFull
  72++D1AE BC          >                        cp     h
  72++D1AF D2 B5 D1    >                        jp		nc,.DrawFull
  73++D1B2 C3 C7 D1                                 jp      .ShipIsADot
  74++D1B5 3A 54 C0     .DrawFull:                  ld      a,(UBnkaiatkecm)            ; its visible but a dot
  75++D1B8 F6 40                                    or      ShipIsVisible               ; Visible and not a dot
  76++D1BA E6 F7                                    and     ShipIsNotDot                ;
  77++D1BC 32 54 C0                                 ld      (UBnkaiatkecm),a            ;
  78++D1BF                                          ClearCarryFlag
  78++D1BF B7          >                        or a
  79++D1C0 C9                                       ret
  80++D1C1                                      ELSE
  81++D1C1 ~            .CalculateXX4:              ShiftHLRight1                       ; hl = z pos / 8
  82++D1C1 ~                                        ShiftHLRight1                       ; .
  83++D1C1 ~                                        ShiftHLRight1                       ; .
  84++D1C1 ~                                        ld      a,h
  85++D1C1 ~                                        srl     a                           ; if a / 16 <> 0 then ship is a dot
  86++D1C1 ~            .DrawAsDotCheck:            JumpIfNotZero   .ShipIsADot
  87++D1C1 ~                                        ; Check visbility distance
  88++D1C1 ~            .SetXX4Dist:                ;break
  89++D1C1 ~                                        ld      a,l
  90++D1C1 ~                                        rra                                 ; l may have had bit 0 of h carried in
  91++D1C1 ~                                        srl     a                           ; so move it to bit 4 giving A as distance $000xxxxx
  92++D1C1 ~                                        srl     a
  93++D1C1 ~                                        srl     a
  94++D1C1 ~                                        ld      (UBnkDrawAllFaces),a        ; XX4 = "all faces" distance
  95++D1C1 ~                                        ld      a,(UBnkaiatkecm)            ; its visible but a dot
  96++D1C1 ~                                        or      ShipIsVisible               ; Visible and not a dot
  97++D1C1 ~                                        and     ShipIsNotDot                ;
  98++D1C1 ~                                        ld      (UBnkaiatkecm),a            ;
  99++D1C1 ~                                        ClearCarryFlag
 100++D1C1 ~                                        ret
 101++D1C1                                      ENDIF
 102++D1C1              .ShipNoDraw:            ClearMemBitN  UBnkaiatkecm  , ShipIsVisibleBitNbr ; Assume its hidden
 102++D1C1 21 54 C0    >                        ld      hl,UBnkaiatkecm
 102++D1C4 CB B6       >                        res     ShipIsVisibleBitNbr,(hl)
 103++D1C6 C9                                   ret
 104++D1C7 3A 54 C0     .ShipIsADot:            ld      a,(UBnkaiatkecm)            ; its visible but a dot
 105++D1CA                                      IFDEF DEBUGDRAWDISTANCE
 106++D1CA ~                                        or      ShipIsVisible   ;
 107++D1CA                                      ELSE
 108++D1CA F6 48                                    or      ShipIsVisible | ShipIsDot   ;
 109++D1CC                                      ENDIF
 110++D1CC 32 54 C0                             ld      (UBnkaiatkecm),a            ;
 111++D1CF C9                                   ret
 112++D1D0
 113++D1D0                                                  DISPLAY "TODO:remove all teh processing of rotmat to load craft to camera as its already been done"
 114++D1D0              CullV2:                 ReturnIfMemisZero FaceCtX4Addr      ;
 114++D1D0 3A 03 C4    >                        ld   a,(FaceCtX4Addr)
 114++D1D3 A7          >                        and a
 114++D1D4 C8          >                        ret    z
 115++D1D5                                     ; break
 116++D1D5 CD D6 CC                             call    CopyRotmatToTransMat        ; XX16 = UBNKRotMat
 117++D1D8 CD 36 7A                             call    ScaleXX16Matrix197          ; scale rotation matrix in XX16
 118++D1DB CD 8E CF                             call    LoadCraftToCamera           ; XX18 = camera
 119++D1DE                                      ;call    CopyCameraToXX15Signed      ; Copy the camera to XX15 as signed 15 bit
 120++D1DE 3A 09 C4     .BackfaceLoop:          ld      a,(QAddr)                   ;
 121++D1E1 FD 6F                                ld      iyl,a                       ; iyl = scale factor
 122++D1E3              ; By this point XX18 = scaled draw cam and iyl = scale factor
 123++D1E3 CD 53 D1                             call    ScaleDrawcam                ; XX18 = scaled camera XX17 = scale
 124++D1E6 CD B2 CF                             call    CopyCameraToXX15Signed      ; Xx18 -> xx15 sign + 15 bit
 125++D1E9 CD C9 79     .LL91:                  call    XX12EquNodeDotXX16          ; xx12 = Scaled Camera . Rotation matrix (Note Xx16 no Xx16 inv)
 126++D1EC CD 1F CF                             call    CopyXX12ScaledToXX18        ; now xx18 = XX12 = xx15.xx16
 127++D1EF 21 C9 C5     .PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 128++D1F2 22 A2 7D                             ld      (varV),hl
 129++D1F5 3A 03 C4                             ld      a,(FaceCtX4Addr)                                        ; For each face
 130++D1F8 CB 3F                                srl     a                                              ;
 131++D1FA CB 3F                                srl     a                                              ;
 132++D1FC 47                                   ld      b,a                                            ;
 133++D1FD AF                                   xor     a
 134++D1FE 32 52 D1                             ld      (CurrentNormIdx),a                                          ; used to increment up face incdex as b decrements
 135++D201 E5           .ProcessNormalsLoop:    push    hl
 136++D202 C5                                   push    bc
 137++D203 7E           .LL86:                  ld      a,(hl)                                         ; Get Face sign and visibility distance byte
 138++D204 E6 1F                                and     $1F                                            ; if normal visibility range  < XX4
 139++D206 E5                                   push    hl
 140++D207 21 52 C0                             ld      hl,UBnkDrawAllFaces
 141++D20A BE                                   cp      (hl)
 142++D20B E1                                   pop     hl
 143++D20C                                      IFDEF DEBUGFORCEFACEDRAW
 144++D20C ~                                        jp      .FaceVisible
 145++D20C                                      ELSE
 146++D20C DA 51 D3                                 jp      c,.FaceVisible              ; then we always draw
 147++D20F                                      ENDIF
 148++D20F              ; This bit needs to be added to force face visible
 149++D20F CD 2A D1     .LL87:                  call    CopyFaceToXX12              ; XX12 = normal (repolaced scale version) as a working copy
 150++D212 3A A3 7E                             ld      a,(XX17)                    ; a = q scale XX17 cauclated by the call to ScaleDrawcam
 151++D215 47                                   ld      b,a
 152++D216                                      JumpIfALTNusng 4,.ScaleNormByXX17   ; if q >= 4 then is so big we don;t factor in + normal for dot product
 152++D216 FE 04       >                        cp      4
 152++D218 DA 53 D2    >                        jp		c, .ScaleNormByXX17
 153++D21B CD 69 CF     .LL143:                 call    CopyXX18toXX15              ; and we just set XX15 = scaled Camera dot rotation matrix
 154++D21E C3 E2 D2                             jp      .DoneScalingIntoXX15        ; Now Process XX12 normal
 155++D221 3A 9A C0     .Ovflw:                 ld      a,(UBnkDrawCam0xLo)         ; divide camera by 2 if overflow
 156++D224 CB 3F                                srl     a                           ; which is held in XX18
 157++D226 32 9A C0                             ld      (UBnkDrawCam0xLo),a         ; .
 158++D229 3A A0 C0                             ld      a,(UBnkDrawCam0zLo)         ; .
 159++D22C CB 3F                                srl     a                           ; .
 160++D22E 32 A0 C0                             ld      (UBnkDrawCam0zLo),a         ; .
 161++D231 3A 9D C0                             ld      a,(UBnkDrawCam0yLo)         ; .
 162++D234 CB 3F                                srl     a                           ; .
 163++D236 32 9D C0                             ld      (UBnkDrawCam0yLo),a        ; .
 164++D239 06 01        .ScaleXScaledAgain:     ld      b,1                         ; set scale to 1 so we divide original normal by 2 into face and try again and hope we didn't scaled down XX12 earlier so if we did then we must be in the do doo as the object was obscenely large and very close
 165++D23B                                      ShiftMem8Right1 UBnkXScaled         ; Divide XX15 by 2^B
 165++D23B 3A A6 C0    >                    ld      a,(UBnkXScaled)
 165++D23E CB 3F       >                    srl     a
 165++D240 32 A6 C0    >                    ld      (UBnkXScaled),a
 166++D243                                      ShiftMem8Right1 UBnkYScaled         ;
 166++D243 3A A8 C0    >                    ld      a,(UBnkYScaled)
 166++D246 CB 3F       >                    srl     a
 166++D248 32 A8 C0    >                    ld      (UBnkYScaled),a
 167++D24B                                      ShiftMem8Right1 UBnkZScaled         ;
 167++D24B 3A AA C0    >                    ld      a,(UBnkZScaled)
 167++D24E CB 3F       >                    srl     a
 167++D250 32 AA C0    >                    ld      (UBnkZScaled),a
 168++D253              ; if we jumped to here scale factor < 4 so we copy in normal to XX15 (scaled) LL92
 169++D253              .ScaleNormByXX17:       ;ld      b,a
 170++D253 CD 44 CF                             call    CopyXX12toXX15
 171++D256 05           .LL93                   dec     b
 172++D257 FA 76 D2                             jp      m, .ScaledNorm
 173++D25A              .LL93Loop:              ShiftMem8Right1 UBnkXScaled        ; Divide XX15 by 2^B, I think this should be really XX12 and is a bug in the original code
 173++D25A 3A A6 C0    >                    ld      a,(UBnkXScaled)
 173++D25D CB 3F       >                    srl     a
 173++D25F 32 A6 C0    >                    ld      (UBnkXScaled),a
 174++D262                                      ShiftMem8Right1 UBnkYScaled        ;
 174++D262 3A A8 C0    >                    ld      a,(UBnkYScaled)
 174++D265 CB 3F       >                    srl     a
 174++D267 32 A8 C0    >                    ld      (UBnkYScaled),a
 175++D26A                                      ShiftMem8Right1 UBnkZScaled        ;
 175++D26A 3A AA C0    >                    ld      a,(UBnkZScaled)
 175++D26D CB 3F       >                    srl     a
 175++D26F 32 AA C0    >                    ld      (UBnkZScaled),a
 176++D272 05                                   dec     b                          ;
 177++D273 F2 5A D2                             jp      p,.LL93Loop                ; Now we have XX15 as scaled Normal, XX15 as camera, don;t really knwo why as cals work on XX12 and XX18
 178++D276              .ScaledNorm:            ;ORIG CODE DOES NOT HAVE THIS call    CopyXX15ToXX12 ; DEBUG as XX15 shoudl be a sacled nromal
 179++D276              ; Add normal to XX15
 180++D276              ; if we jumped here direct from LL143 then XX15 = drawcam scaled by Q, XX12 = face normal unscaled, XX18 = drawcam scaled also
 181++D276              ; if we jumped here via scaling       then XX15 = normal scaled by Q,  XX12 = face normal unscaled, XX16 = drawcam scaled
 182++D276              ; if we hit an overflow               then XX15 = drawcam scaled by Q  XX12 = face normal unscaled, XX18 = (drawcam scaled / 2 ) / 2^ nbr overflows (if we cam in vai scaling then its a mess?
 183++D276              ; So LL94 is wrong as it shoud be operating on XX12 not XX15
 184++D276              .LL94:                  ldCopyByte UBnkZScaled, varR        ; ldCopyByte  UBnkZScaled,     varR  ; if we jumped direct XX15 = drawcam scaled, Xx12 = normal xx18 = drawcam
 184++D276 3A AA C0    >                        ld       a,(UBnkZScaled)
 184++D279 32 9D 7E    >                        ld       (varR),a
 185++D27C                                      ldCopyByte UBnkXX12zSign, varS      ; ldCopyByte  UBnkYScaled,     varS  ; if we did scaling then xx15 = norm scaled XX18 = drawcam
 185++D27C 3A B1 C0    >                        ld       a,(UBnkXX12zSign)
 185++D27F 32 9E 7E    >                        ld       (varS),a
 186++D282                                      ldCopyByte  UBnkDrawCam0zLo, varQ   ; AQ = drawcam Z signed
 186++D282 3A A0 C0    >                        ld       a,(UBnkDrawCam0zLo)
 186++D285 32 9C 7E    >                        ld       (varQ),a
 187++D288 3A A2 C0                             ld      a,(UBnkDrawCam0zSgn)        ; .
 188++D28B CD 59 9B                             call    SAEquSRPlusAQ               ; SA = drawcam Z dot + z
 189++D28E DA 21 D2                             jp      c,.Ovflw
 190++D291 32 AA C0                             ld      (UBnkZScaled),a             ; XX15Z = SA
 191++D294                                      ldCopyByte  varS, UBnkZScaledSign   ;
 191++D294 3A 9E 7E    >                        ld       a,(varS)
 191++D297 32 AB C0    >                        ld       (UBnkZScaledSign),a
 192++D29A                                      ldCopyByte  UBnkXScaled,     varR   ; SR = normal X
 192++D29A 3A A6 C0    >                        ld       a,(UBnkXScaled)
 192++D29D 32 9D 7E    >                        ld       (varR),a
 193++D2A0                                      ldCopyByte  UBnkXX12xSign,   varS   ; .
 193++D2A0 3A AD C0    >                        ld       a,(UBnkXX12xSign)
 193++D2A3 32 9E 7E    >                        ld       (varS),a
 194++D2A6                                      ldCopyByte  UBnkDrawCam0xLo, varQ   ; AQ = drawcam x dot
 194++D2A6 3A 9A C0    >                        ld       a,(UBnkDrawCam0xLo)
 194++D2A9 32 9C 7E    >                        ld       (varQ),a
 195++D2AC 3A 9C C0                             ld      a,(UBnkDrawCam0xSgn)        ; .
 196++D2AF CD 59 9B                             call    SAEquSRPlusAQ               ; SA = normal x + drawcam x dot
 197++D2B2 DA 21 D2                             jp      c,.Ovflw
 198++D2B5 32 A6 C0                             ld      (UBnkXScaled),a             ; XX15Z = SA
 199++D2B8                                      ldCopyByte  varS, UBnkXScaledSign   ; .
 199++D2B8 3A 9E 7E    >                        ld       a,(varS)
 199++D2BB 32 A7 C0    >                        ld       (UBnkXScaledSign),a
 200++D2BE                                      ldCopyByte  UBnkYScaled, varR       ; SR = normal Y
 200++D2BE 3A A8 C0    >                        ld       a,(UBnkYScaled)
 200++D2C1 32 9D 7E    >                        ld       (varR),a
 201++D2C4                                      ldCopyByte  UBnkXX12ySign, varS     ; .
 201++D2C4 3A AF C0    >                        ld       a,(UBnkXX12ySign)
 201++D2C7 32 9E 7E    >                        ld       (varS),a
 202++D2CA                                      ldCopyByte  UBnkDrawCam0yLo, varQ   ; AQ = drawcam y dot
 202++D2CA 3A 9D C0    >                        ld       a,(UBnkDrawCam0yLo)
 202++D2CD 32 9C 7E    >                        ld       (varQ),a
 203++D2D0 3A 9F C0                             ld      a,(UBnkDrawCam0ySgn)        ; .
 204++D2D3 CD 59 9B                             call    SAEquSRPlusAQ               ; SA = normal y + drawcam y dot
 205++D2D6 DA 21 D2                             jp      c,.Ovflw                    ; .
 206++D2D9 32 A8 C0                             ld      (UBnkYScaled),a             ; XX15 Y = SA
 207++D2DC                                      ldCopyByte   varS, UBnkYScaledSign  ; .
 207++D2DC 3A 9E 7E    >                        ld       a,(varS)
 207++D2DF 32 A9 C0    >                        ld       (UBnkYScaledSign),a
 208++D2E2              ; calculate dot product LL89
 209++D2E2              .DoneScalingIntoXX15:   ldCopyByte  UBnkXX12xLo, varQ       ; Q = norm X XX12
 209++D2E2 3A AC C0    >                        ld       a,(UBnkXX12xLo)
 209++D2E5 32 9C 7E    >                        ld       (varQ),a
 210++D2E8 3A A6 C0                             ld      a,(UBnkXScaled)             ; A = XX15 X
 211++D2EB CD C4 9A                             call    AequAmulQdiv256             ; A = XX15 X * XX 12 X
 212++D2EE 32 B8 7E                             ld      (varT),a                    ; T = XX15 X * XX 12 X
 213++D2F1 3A AD C0                             ld      a,(UBnkXX12xSign)           ; S = sign of XX15 X * XX12 X
 214++D2F4 21 A7 C0                             ld      hl,UBnkXScaledSign          ; .
 215++D2F7 AE                                   xor     (hl)                        ; .
 216++D2F8 32 9E 7E                             ld      (varS),a                    ; .
 217++D2FB                                      ldCopyByte  UBnkXX12yLo, varQ       ; Q = norm Y XX12
 217++D2FB 3A AE C0    >                        ld       a,(UBnkXX12yLo)
 217++D2FE 32 9C 7E    >                        ld       (varQ),a
 218++D301 3A A8 C0                             ld      a,(UBnkYScaled)             ; A = XX15 Y
 219++D304 CD C4 9A                             call    AequAmulQdiv256             ; A = XX15 Y * XX 12 Y
 220++D307 32 9C 7E                             ld      (varQ),a                    ; Q = XX15 Y * XX 12 Y
 221++D30A                                      ldCopyByte  varT,varR               ; R = XX15 X * XX 12 X
 221++D30A 3A B8 7E    >                        ld       a,(varT)
 221++D30D 32 9D 7E    >                        ld       (varR),a
 222++D310 3A AF C0                             ld      a,  (UBnkXX12ySign)         ; A = sign of XX15 Y * XX 12 Y
 223++D313 21 A9 C0                             ld      hl, UBnkYScaledSign         ; .
 224++D316 AE                                   xor     (hl)                        ; .
 225++D317 CD 59 9B                             call    SAEquSRPlusAQ               ; SA = SR+AQ = (X calc) + (Y calc)
 226++D31A 32 B8 7E                             ld      (varT),a                    ; T = usigned (X calc) + (Y calc)
 227++D31D                                      ldCopyByte  UBnkXX12zLo, varQ       ; Q = XX12 Z
 227++D31D 3A B0 C0    >                        ld       a,(UBnkXX12zLo)
 227++D320 32 9C 7E    >                        ld       (varQ),a
 228++D323 3A AA C0                             ld      a,  (UBnkZScaled)           ; A = XX15 Z
 229++D326 CD C4 9A                             call    AequAmulQdiv256             ; A = XX12 Z * XX15 Z
 230++D329 32 9C 7E                             ld      (varQ),a                    ; Q = XX12 Z * XX15 Z
 231++D32C                                      ldCopyByte  varT, varR              ; R = usigned (X calc) + (Y calc)
 231++D32C 3A B8 7E    >                        ld       a,(varT)
 231++D32F 32 9D 7E    >                        ld       (varR),a
 232++D332 3A AB C0                             ld      a,  (UBnkZScaledSign)       ; A = sign of XX12 Z * XX15 Z
 233++D335 21 B1 C0                             ld      hl, UBnkXX12zSign           ; .
 234++D338 AE                                   xor     (hl)                        ; .
 235++D339 CD 59 9B                             call    SAEquSRPlusAQ               ; SA = ((X+Y signed)) (Z signed)
 236++D33C FE 00                                cp      0                           ; was the result 0, if so then there are scenarios where SAEquSRPlusAQ can return -ve 0
 237++D33E 28 08                                jr      z,.FaceNotVisible           ; in which case face is not visible
 238++D340 3A 9E 7E                             ld      a,(varS)                    ; if the cacl was a negative number then its visible
 239++D343 ED 27 80                             test    $80                         ; this should test S not A
 240++D346 20 09                                jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 241++D348 3A 52 D1     .FaceNotVisible:         ld          a,(CurrentNormIdx)
 242++D34B CD DC CD                             call        SetFaceAHidden                                      ;           set face invisible
 243++D34E C3 57 D3                             jp          .ProcessNormalLoopEnd                                ;        end if
 244++D351 3A 52 D1     .FaceVisible:            ld          a,(CurrentNormIdx)
 245++D354 CD D3 CD                             call        SetFaceAVisible
 246++D357 21 52 D1     .ProcessNormalLoopEnd:  ld          hl, CurrentNormIdx
 247++D35A 34                                   inc         (hl)                    ; move index pointer up by one
 248++D35B C1                                   pop         bc
 249++D35C E1                                   pop         hl                      ; get normal data pointer back
 250++D35D 3E 04                                ld          a,4
 251++D35F ED 31                                add         hl,a                    ; move to next normal entry
 252++D361 22 A2 7D                             ld          (varV),hl               ; save as we need it again
 253++D364 05                                   dec         b
 254++D365 C2 01 D2                             jp          nz,.ProcessNormalsLoop
 255++D368 C9                                   ret
 256++D369
# file closed: ././ModelRender/BackfaceCull.asm
 955+ D369              ;--LL52 to LL55-----------------------------------------------------------------------------------------------------------------
 956+ D369
 957+ D369              TransposeXX12NodeToXX15:
 958+ D369                      ldCopyByte  UBnKxsgn,UbnkXPointSign           ; UBnkXSgn => XX15+2 x sign
 958+ D369 3A 22 C0    >                        ld       a,(UBnKxsgn)
 958+ D36C 32 A8 C0    >                        ld       (UbnkXPointSign),a
 959+ D36F ED 4B AC C0          ld          bc,(UBnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
 960+ D373 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 961+ D374 FA 8A D3             jp          m,NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 962+ D377              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 963+ D377              NodeXPositiveX:
 964+ D377 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 965+ D378 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 966+ D37A 2A 20 C0             ld          hl,(UBnKxlo)                       ; hl = XX1 UBNKxLo
 967+ D37D 26 00                ld          h,0                                 ; but we don;t want the sign
 968+ D37F 09                   add         hl,bc                               ; its a 16 bit add
 969+ D380 22 A6 C0             ld          (UbnkXPoint),hl                    ; And written to XX15 0,1
 970+ D383 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 971+ D384 32 A8 C0             ld          (UbnkXPointSign),a
 972+ D387 C3 A6 D3             jp          FinishedThisNodeX
 973+ D38A              ; If we get here then _sign and vertv_ have different signs so do subtract
 974+ D38A              NodeNegativeX:
 975+ D38A              LL52X:                                                 ;
 976+ D38A 2A 20 C0             ld          hl,(UBnKxlo)                       ; Coord
 977+ D38D ED 4B AC C0          ld          bc,(UBnkXX12xLo)                   ; XX12
 978+ D391 06 00                ld          b,0                                 ; XX12 lo byte only
 979+ D393 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 980+ D395 F2 A3 D3             jp          p,SetAndMopX                       ; if result is positive skip to write back
 981+ D398              NodeXNegSignChangeX:
 982+ D398              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 983+ D398 CD 63 92             call        negate16hl                          ; Convert back to positive and flip sign
 984+ D39B 3A A8 C0             ld          a,(UbnkXPointSign)                 ; XX15+2
 985+ D39E EE 80                xor         $80                                 ; Flip bit 7
 986+ D3A0 32 A8 C0             ld          (UbnkXPointSign),a                 ; XX15+2
 987+ D3A3              SetAndMopX:
 988+ D3A3 22 20 C0             ld          (UBnKxlo),hl                       ; XX15+0
 989+ D3A6              FinishedThisNodeX:
 990+ D3A6
 991+ D3A6              LL53:
 992+ D3A6
 993+ D3A6                      ldCopyByte  UBnKysgn,UbnkYPointSign           ; UBnkXSgn => XX15+2 x sign
 993+ D3A6 3A 25 C0    >                        ld       a,(UBnKysgn)
 993+ D3A9 32 AB C0    >                        ld       (UbnkYPointSign),a
 994+ D3AC ED 4B AE C0          ld          bc,(UBnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
 995+ D3B0 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 996+ D3B1 FA C7 D3             jp          m,NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 997+ D3B4              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 998+ D3B4              NodeXPositiveY:
 999+ D3B4 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1000+ D3B5 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1001+ D3B7 2A 23 C0             ld          hl,(UBnKylo)                       ; hl = XX1 UBNKxLo
1002+ D3BA 26 00                ld          h,0                                 ; but we don;t want the sign
1003+ D3BC 09                   add         hl,bc                               ; its a 16 bit add
1004+ D3BD 22 A9 C0             ld          (UbnkYPoint),hl                    ; And written to XX15 0,1
1005+ D3C0 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
1006+ D3C1 32 A8 C0             ld          (UbnkXPointSign),a
1007+ D3C4 C3 E3 D3             jp          FinishedThisNodeY
1008+ D3C7              ; If we get here then _sign and vertv_ have different signs so do subtract
1009+ D3C7              NodeNegativeY:
1010+ D3C7              LL52Y:                                                 ;
1011+ D3C7 2A 23 C0             ld          hl,(UBnKylo)                       ; Coord
1012+ D3CA ED 4B AE C0          ld          bc,(UBnkXX12yLo)                   ; XX12
1013+ D3CE 06 00                ld          b,0                                 ; XX12 lo byte only
1014+ D3D0 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1015+ D3D2 F2 E0 D3             jp          p,SetAndMopY                       ; if result is positive skip to write back
1016+ D3D5              NodeXNegSignChangeY:
1017+ D3D5              ; If we get here the result is 2'c compliment so we reverse it and flip sign
1018+ D3D5 CD 63 92             call        negate16hl                          ; Convert back to positive and flip sign
1019+ D3D8 3A AB C0             ld          a,(UbnkYPointSign)                 ; XX15+2
1020+ D3DB EE 80                xor         $80                                 ; Flip bit 7
1021+ D3DD 32 AB C0             ld          (UbnkYPointSign),a                 ; XX15+2
1022+ D3E0              SetAndMopY:
1023+ D3E0 22 23 C0             ld          (UBnKylo),hl                       ; XX15+0
1024+ D3E3              FinishedThisNodeY:
1025+ D3E3
1026+ D3E3                  DISPLAY "Tracing 5", $
1027+ D3E3
1028+ D3E3              TransposeZ:
1029+ D3E3              LL55:                                                   ; Both y signs arrive here, Onto z                                          ;;;
1030+ D3E3 3A B1 C0             ld          a,(UBnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
1031+ D3E6                      JumpOnBitSet a,7,NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
1031+ D3E6 CB 7F       >                        bit 	7,a
1031+ D3E8 C2 FC D3    >                        jp      nz,NegativeNodeZ
1032+ D3EB 3A B0 C0             ld          a,(UBnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
1033+ D3EE 2A 26 C0             ld          hl,(UBnKzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
1034+ D3F1 ED 31                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
1035+ D3F3 7D                   ld          a,l
1036+ D3F4 32 B8 7E             ld          (varT),a                            ;                                                                           ;;;
1037+ D3F7 7C                   ld          a,h
1038+ D3F8 32 9B 7E             ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
1039+ D3FB C9                   ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
1040+ D3FC              ; Doing additions and scalings for each visible node around here                                                                    ;;;
1041+ D3FC              NegativeNodeZ:
1042+ D3FC              LL56:                                                   ; Enter XX12+5 -ve Z node case  from above                                  ;;;
1043+ D3FC 2A 26 C0             ld          hl,(UBnKzlo)                        ; INWK+6 \ z org lo                                                         ;;;
1044+ D3FF ED 4B B0 C0          ld          bc,(UBnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
1045+ D403 06 00                ld          b,0                                 ; upper byte will be garbage
1046+ D405                      ClearCarryFlag
1046+ D405 B7          >                        or a
1047+ D406 ED 42                sbc         hl,bc                               ; 6502 used carry flag compliment
1048+ D408 7D                   ld          a,l
1049+ D409 32 B8 7E             ld          (varT),a                            ; t = result low
1050+ D40C 7C                   ld          a,h
1051+ D40D 32 9B 7E             ld          (varU),a                            ; u = result high
1052+ D410 E2 1D D4             jp          po,MakeNodeClose                    ; no overflow to parity would be clear
1053+ D413              LL56Overflow:
1054+ D413 FE 00                cp          0                                   ; is varU 0?
1055+ D415 20 16                jr          nz,NodeAdditionsDone                ; Enter Node additions done, UT=z
1056+ D417 3A B8 7E             ld          a,(varT)                            ; T \ restore z lo
1057+ D41A                      ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
1057+ D41A FE 04       >                        cp    4
1057+ D41C D0          >                        ret	 nc
1058+ D41D              MakeNodeClose:
1059+ D41D              LL140:                                                  ; else make node close
1060+ D41D AF                   xor         a                                   ; hi This needs tuning to use a 16 bit variable
1061+ D41E 32 9B 7E             ld          (varU),a                            ; U
1062+ D421 3E 04                ld          a,4                                 ; lo
1063+ D423 32 B8 7E             ld          (varT),a                            ; T
1064+ D426 C9                   ret
1065+ D427              ;--LL49-------------------------------------------------------------------------------------------------------------------------
1066+ D427              ProcessVisibleNode:
1067+ D427              RotateNode:                                                                                                                         ;;;
1068+ D427 CD EE CE             call        XX12EquXX15DotProductXX16                                                                                       ;;;           call      XX12=XX15.XX16
1069+ D42A              LL52LL53LL54LL55
1070+ D42A              TransposeNode:
1071+ D42A CD 69 D3             call        TransposeXX12NodeToXX15
1072+ D42D
1073+ D42D              ; ......................................................                                                         ;;;
1074+ D42D              NodeAdditionsDone:
1075+ D42D              Scale16BitTo8Bit:
1076+ D42D              LL57:                                                   ; Enter Node additions done, z=T.U set up from LL55
1077+ D42D 3A 9B 7E             ld          a,(varU)                            ; U \ z hi
1078+ D430 21 A7 C0             ld          hl,UbnkXPointHi
1079+ D433 B6                   or          (hl)                                ; XX15+1    \ x hi
1080+ D434 21 AA C0             ld          hl,UbnkYPointHi
1081+ D437 B6                   or          (hl)                                ; XX15+4    \ y hi
1082+ D438              AreXYZHiAllZero:
1083+ D438 28 2B                jr          z,NodeScalingDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
1084+ D43A              DivideXYZBy2:
1085+ D43A                      ShiftMem16Right1    UbnkXPoint                  ; XX15[0,1]
1085+ D43A 2A A6 C0    >                    ld    hl,(UbnkXPoint)
1085+ D43D CB 3C       >                    srl   h
1085+ D43F CB 1D       >                    rr    l
1085+ D441 22 A6 C0    >                    ld    (UbnkXPoint),hl
1086+ D444                      ShiftMem16Right1    UbnkYPoint                  ; XX15[3,4]
1086+ D444 2A A9 C0    >                    ld    hl,(UbnkYPoint)
1086+ D447 CB 3C       >                    srl   h
1086+ D449 CB 1D       >                    rr    l
1086+ D44B 22 A9 C0    >                    ld    (UbnkYPoint),hl
1087+ D44E 3A 9B 7E             ld          a,(varU)                            ; U \ z hi
1088+ D451 67                   ld          h,a
1089+ D452 3A B8 7E             ld          a,(varT)                            ; T \ z lo
1090+ D455 6F                   ld          l,a
1091+ D456                      ShiftHLRight1
1091+ D456 CB 3C       >			   srl h
1091+ D458 CB 1D       >			   rr  l
1092+ D45A 7C                   ld          a,h
1093+ D45B 32 9B 7E             ld          (varU),a
1094+ D45E 7D                   ld          a,l
1095+ D45F 32 B8 7E             ld          (varT),a                            ; T \ z lo
1096+ D462 C3 2D D4             jp          Scale16BitTo8Bit                    ; loop U
1097+ D465              NodeScalingDone:
1098+ D465              LL60:                                                   ; hi U rolled to 0, exited loop above.
1099+ D465              ProjectNodeToScreen:
1100+ D465                      ldCopyByte  varT,varQ                           ; T =>  Q   \ zdist lo
1100+ D465 3A B8 7E    >                        ld       a,(varT)
1100+ D468 32 9C 7E    >                        ld       (varQ),a
1101+ D46B 3A A6 C0             ld          a,(UbnkXPointLo)                    ; XX15  \ rolled x lo
1102+ D46E 21 9C 7E             ld          hl,varQ
1103+ D471 BE                   cp          (hl)                                ; Q
1104+ D472                      JumpIfALTusng DoSmallAngle                      ; LL69 if xdist < zdist hop over jmp to small x angle
1104+ D472 DA 7B D4    >                        jp		c,DoSmallAngle
1105+ D475 CD D0 9B             call        RequAdivQ                           ; LL61  \ visit up  R = A/Q = x/z
1106+ D478 C3 83 D4             jp          SkipSmallAngle                      ; LL65  \ hop over small xangle
1107+ D47B              DoSmallAngle:                                           ; small x angle
1108+ D47B              LL69:
1109+ D47B              ; TODO check if we need to retain BC as this trashes it
1110+ D47B              ;Input: BC = Dividend, DE = Divisor, HL = 0
1111+ D47B              ;Output: BC = Quotient, HL = Remainder
1112+ D47B 47                   ld      b,a
1113+ D47C CD E3 94             call    DIV16UNDOC
1114+ D47F 79                   ld      a,c
1115+ D480 32 9D 7E             ld      (varR),a
1116+ D483               ;;;       call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1117+ D483              SkipSmallAngle:
1118+ D483              ScaleX:
1119+ D483              LL65:                                                   ; both continue for scaling based on z
1120+ D483 3A A8 C0             ld          a,(UbnkXPointSign)                  ; XX15+2 \ sign of X dist
1121+ D486                      JumpOnBitSet a,7,NegativeXPoint                 ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1121+ D486 CB 7F       >                        bit 	7,a
1121+ D488 C2 9B D4    >                        jp      nz,NegativeXPoint
1122+ D48B              ; ......................................................
1123+ D48B              PositiveXPoint:
1124+ D48B 3A 9D 7E             ld          a,(varR)
1125+ D48E 6F                   ld          l,a
1126+ D48F 3A 9B 7E             ld          a,(varU)
1127+ D492 67                   ld          h,a
1128+ D493 3E 80                ld          a,ScreenCenterX
1129+ D495 ED 31                add         hl,a
1130+ D497 EB                   ex          de,hl
1131+ D498 C3 AB D4             jp          StoreXPoint
1132+ D49B              NegativeXPoint:
1133+ D49B              LL62:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1134+ D49B 3A 9D 7E             ld          a,(varR)
1135+ D49E 6F                   ld          l,a
1136+ D49F 3A 9B 7E             ld          a,(varU)
1137+ D4A2 67                   ld          h,a
1138+ D4A3 0E 80                ld          c,ScreenCenterX
1139+ D4A5 06 00                ld          b,0
1140+ D4A7                      ClearCarryFlag
1140+ D4A7 B7          >                        or a
1141+ D4A8 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1142+ D4AA EB                   ex          de,hl
1143+ D4AB              StoreXPoint:                                            ; also from LL62, XX3 node heap has xscreen node so far.
1144+ D4AB FD 73 00             ld          (iy+0),e                            ; Update X Point
1145+ D4AE FD 72 01             ld          (iy+1),d                            ; Update X Point
1146+ D4B1 FD 23                inc         iy
1147+ D4B3 FD 23                inc         iy
1148+ D4B5              ; ......................................................
1149+ D4B5              LL66:
1150+ D4B5              ProcessYPoint:
1151+ D4B5 AF                   xor         a                                   ; y hi = 0
1152+ D4B6 32 9B 7E             ld          (varU),a                            ; U
1153+ D4B9                      ldCopyByte  varT,varQ                           ; Q \ zdist lo
1153+ D4B9 3A B8 7E    >                        ld       a,(varT)
1153+ D4BC 32 9C 7E    >                        ld       (varQ),a
1154+ D4BF 3A A9 C0             ld          a,(UbnkYPointLo)                    ; XX15+3 \ rolled y low
1155+ D4C2 21 9C 7E             ld          hl,varQ
1156+ D4C5 BE                   cp          (hl)                                ; Q
1157+ D4C6                      JumpIfALTusng SmallYHop                         ; if ydist < zdist hop to small yangle
1157+ D4C6 DA CF D4    >                        jp		c,SmallYHop
1158+ D4C9              SmallYPoint:
1159+ D4C9 CD D0 9B             call        RequAdivQ                           ; LL61  \ else visit up R = A/Q = y/z
1160+ D4CC C3 D2 D4             jp          SkipYScale                          ; LL68 hop over small y yangle
1161+ D4CF              SmallYHop:
1162+ D4CF              LL67:                                                   ; Arrive from LL66 above if XX15+3 < Q \ small yangle
1163+ D4CF CD AD 9B             call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1164+ D4D2              SkipYScale:
1165+ D4D2              LL68:                                                   ; both carry on, also arrive from LL66, yscaled based on z
1166+ D4D2 3A AB C0             ld          a,(UbnkYPointSign)                  ; XX15+5 \ sign of X dist
1167+ D4D5 CB 7F                bit         7,a
1168+ D4D7 C2 EA D4             jp          nz,NegativeYPoint                   ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1169+ D4DA              PositiveYPoint:
1170+ D4DA 3A 9D 7E             ld          a,(varR)
1171+ D4DD 6F                   ld          l,a
1172+ D4DE 3A 9B 7E             ld          a,(varU)
1173+ D4E1 67                   ld          h,a
1174+ D4E2 3E 60                ld          a,ScreenHeightHalf
1175+ D4E4 ED 31                add         hl,a
1176+ D4E6 EB                   ex          de,hl
1177+ D4E7 C3 FA D4             jp          LL50
1178+ D4EA              NegativeYPoint:
1179+ D4EA              LL70:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1180+ D4EA 3A 9D 7E             ld          a,(varR)
1181+ D4ED 6F                   ld          l,a
1182+ D4EE 3A 9B 7E             ld          a,(varU)
1183+ D4F1 67                   ld          h,a
1184+ D4F2 0E 60                ld          c,ScreenHeightHalf
1185+ D4F4 06 00                ld          b,0
1186+ D4F6                      ClearCarryFlag
1186+ D4F6 B7          >                        or a
1187+ D4F7 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1188+ D4F9 EB                   ex          de,hl
1189+ D4FA              LL50:                                                   ; also from LL62, XX3 node heap has xscreen node so far.
1190+ D4FA FD 73 00             ld          (iy+0),e                            ; Update X Point
1191+ D4FD FD 72 01             ld          (iy+1),d                            ; Update X Point
1192+ D500 FD 23                inc         iy
1193+ D502 FD 23                inc         iy
1194+ D504 C9                   ret
1195+ D505              ;--------------------------------------------------------------------------------------------------------
1196+ D505              ;;;     Byte 0 = X magnitide with origin at middle of ship
1197+ D505              ;;;     Byte 1 = Y magnitide with origin at middle of ship
1198+ D505              ;;;     Byte 2 = Z magnitide with origin at middle of ship
1199+ D505              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
1200+ D505              CopyNodeToXX15:
1201+ D505                      ldCopyByte  hl, UBnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1201+ D505 7E          >                        ld       a,(hl)
1201+ D506 32 A6 C0    >                        ld       (UBnkXScaled),a
1202+ D509 23                   inc         hl
1203+ D50A                      ldCopyByte  hl, UBnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1203+ D50A 7E          >                        ld       a,(hl)
1203+ D50B 32 A8 C0    >                        ld       (UBnkYScaled),a
1204+ D50E 23                   inc         hl
1205+ D50F                      ldCopyByte  hl, UBnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1205+ D50F 7E          >                        ld       a,(hl)
1205+ D510 32 AA C0    >                        ld       (UBnkZScaled),a
1206+ D513 23                   inc         hl
1207+ D514              PopulateXX15SignBits:
1208+ D514              ; Simplfied for debugging, needs optimising back to original DEBUG TODO
1209+ D514 7E                   ld          a,(hl)
1210+ D515 4F                   ld          c,a                                 ; copy sign and visibility to c
1211+ D516 47                   ld          b,a
1212+ D517 E6 80                and         $80                                 ; keep high 3 bits
1213+ D519 32 A7 C0             ld          (UBnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1214+ D51C 78                   ld          a,b
1215+ D51D E6 40                and         $40
1216+ D51F CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1217+ D521 32 A9 C0             ld          (UBnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1218+ D524 78                   ld          a,b
1219+ D525 E6 20                and         $20
1220+ D527 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1221+ D529 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1222+ D52B 32 AB C0             ld          (UBnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1223+ D52E 79                   ld          a,c                                 ; returns a with visibility sign byte
1224+ D52F E6 1F                and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
1225+ D531 32 B8 7E             ld          (varT),a                            ; and store in varT as its needed later
1226+ D534 C9                   ret
1227+ D535
1228+ D535              ;;;     Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
1229+ D535              ;;;     Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
1230+ D535              ;..............................................................................................................................
1231+ D535              ProcessANode:                                           ; Start loop on Nodes for visibility, each node has 4 faces associated with ;;; For each node (point) in model                  ::LL48
1232+ D535              LL48GetScale:
1233+ D535 3A 8E 7D             ld          a,(LastNormalVisible)               ; get Normal visible range into e before we copy node
1234+ D538 5F                   ld          e,a
1235+ D539 CD 05 D5             call        CopyNodeToXX15
1236+ D53C              LL48GetVertices:
1237+ D53C              LL48GetVertSignAndVisDist:
1238+ D53C                      JumpIfALTNusng e,NodeIsNotVisible               ; if XX4 > Visibility distance then vertext too far away , next vertex.                                             ;;;        goto LL50 (end of loop)
1238+ D53C BB          >                        cp      e
1238+ D53D DA 7A D5    >                        jp		c, NodeIsNotVisible
1239+ D540              CheckFace1:                                                                                                                         ;;;     if all FaceVisile[point face any of idx1,2,3 or 4] = 0
1240+ D540                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;     get point face idx from byte 4 & 5 of normal
1240+ D540 23          >                    inc         hl                                  ; vertex byte#1
1240+ D541 7E          >                    ld          a,(hl)                              ;
1240+ D542 32 9D 7D    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1241+ D545 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1242+ D546 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1243+ D548 E5                   push        hl                                  ; we need to save HL                                                        ;;;
1244+ D549                      ldHLIdxAToA UbnkFaceVisArray                    ; visibility at face 1                                                Byte 4;;;
1244+ D549 21 D2 C0    >                    ld          hl,UbnkFaceVisArray
1244+ D54C ED 31       >                    add         hl,a
1244+ D54E 7E          >                    ld          a,(hl)
1245+ D54F E1                   pop         hl                                  ;                                                                           ;;;
1246+ D550                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1246+ D550 A7          >                        and     a
1246+ D551 C2 80 D5    >                        jp	    nz,NodeIsVisible
1247+ D554              CheckFace2:                                                                                                                         ;;;
1248+ D554 7A                   ld          a,d                                                                                                             ;;;
1249+ D555 ED 23                swapnib                                                                                                                     ;;;
1250+ D557 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1251+ D559                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1251+ D559 A7          >                        and     a
1251+ D55A C2 80 D5    >                        jp	    nz,NodeIsVisible
1252+ D55D              CheckFace3:                                                                                                                         ;;;
1253+ D55D                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;
1253+ D55D 23          >                    inc         hl                                  ; vertex byte#1
1253+ D55E 7E          >                    ld          a,(hl)                              ;
1253+ D55F 32 9D 7D    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1254+ D562 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1255+ D563 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1256+ D565 E5                   push        hl                                  ; we need to save HL                                                        ;;;
1257+ D566                      ldHLIdxAToA UbnkFaceVisArray                  ; visibility at face 1                                                Byte 5;;;
1257+ D566 21 D2 C0    >                    ld          hl,UbnkFaceVisArray
1257+ D569 ED 31       >                    add         hl,a
1257+ D56B 7E          >                    ld          a,(hl)
1258+ D56C E1                   pop         hl                                  ;                                                                           ;;;
1259+ D56D                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1259+ D56D A7          >                        and     a
1259+ D56E C2 80 D5    >                        jp	    nz,NodeIsVisible
1260+ D571              CheckFace4:                                                                                                                         ;;;
1261+ D571 7A                   ld          a,d                                                                                                             ;;;
1262+ D572 ED 23                swapnib                                                                                                                     ;;;
1263+ D574 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1264+ D576                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1264+ D576 A7          >                        and     a
1264+ D577 C2 80 D5    >                        jp	    nz,NodeIsVisible
1265+ D57A              NodeIsNotVisible:                                                                                                                   ;;;
1266+ D57A 01 04 00             ld          bc,4
1267+ D57D FD 09                add         iy,bc                               ; if not visible then move to next element in array anyway                  ;;;
1268+ D57F                      ;;; Should we be loading FFFFFFFF into 4 bytes or just ignore?
1269+ D57F C9                   ret                                                                                                      ;;;        goto LL50 (end of loop)
1270+ D580              NodeIsVisible:
1271+ D580              LL49:
1272+ D580 CD 27 D4             call        ProcessVisibleNode                  ; Process node to determine if it goes on heap
1273+ D583 C9                   ret
1274+ D584
1275+ D584                  DISPLAY "Tracing 6", $
1276+ D584
1277+ D584              ProjectNodeToEye:
1278+ D584 ED 4B AA C0      ld          bc,(UBnkZScaled)                    ; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
1279+ D588 79               ld          a,c                                 ;  so no need for a negative check
1280+ D589 32 9C 7E         ld          (varQ),a                            ; VarQ = z
1281+ D58C 3A A6 C0         ld          a,(UBnkXScaled)                     ; XX15  \ rolled x lo which is signed
1282+ D58F CD CC 94         call        DIV16Amul256dCUNDOC                 ; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
1283+ D592 3A A7 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
1284+ D595                  JumpOnBitSet a,7,EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1284+ D595 CB 7F       >                        bit 	7,a
1284+ D597 C2 A2 D5    >                        jp      nz,EyeNegativeXPoint
1285+ D59A              EyePositiveXPoint:                                  ; x was positive result
1286+ D59A 2E 80            ld          l,ScreenCenterX                     ;
1287+ D59C 26 00            ld          h,0
1288+ D59E 09               add         hl,bc                               ; hl = Screen Centre + X
1289+ D59F C3 A9 D5         jp          EyeStoreXPoint
1290+ D5A2              EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
1291+ D5A2 2E 80            ld          l,ScreenCenterX
1292+ D5A4 26 00            ld          h,0
1293+ D5A6                  ClearCarryFlag
1293+ D5A6 B7          >                        or a
1294+ D5A7 ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
1295+ D5A9              EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1296+ D5A9 EB               ex          de,hl
1297+ D5AA FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
1298+ D5AD FD 72 01         ld          (iy+1),d                            ; Update X Point
1299+ D5B0              EyeProcessYPoint:
1300+ D5B0 ED 4B AA C0      ld          bc,(UBnkZScaled)                    ; Now process Y co-ordinate
1301+ D5B4 79               ld          a,c
1302+ D5B5 32 9C 7E         ld          (varQ),a
1303+ D5B8 3A A8 C0         ld          a,(UBnkYScaled)                     ; XX15  \ rolled x lo
1304+ D5BB CD CC 94         call        DIV16Amul256dCUNDOC                 ; a = Y scaled * 256 / zscaled
1305+ D5BE 3A A9 C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
1306+ D5C1                  JumpOnBitSet a,7,EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
1306+ D5C1 CB 7F       >                        bit 	7,a
1306+ D5C3 C2 CE D5    >                        jp      nz,EyeNegativeYPoint
1307+ D5C6              EyePositiveYPoint:                                  ; Y is positive so above the centre line
1308+ D5C6 2E 60            ld          l,ScreenCenterY
1309+ D5C8                  ClearCarryFlag
1309+ D5C8 B7          >                        or a
1310+ D5C9 ED 42            sbc         hl,bc                               ; hl = ScreenCentreY - Y coord (as screen is 0 at top)
1311+ D5CB C3 D3 D5         jp          EyeStoreYPoint
1312+ D5CE              EyeNegativeYPoint:                                  ; this bit is only 8 bit aware TODO FIX
1313+ D5CE 2E 60            ld          l,ScreenCenterY
1314+ D5D0 26 00            ld          h,0
1315+ D5D2 09               add         hl,bc                               ; hl = ScreenCenterY + Y as negative is below the center of screen
1316+ D5D3              EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1317+ D5D3 EB               ex          de,hl
1318+ D5D4 FD 73 02         ld          (iy+2),e                            ; Update Y Point
1319+ D5D7 FD 72 03         ld          (iy+3),d                            ; Update Y Point
1320+ D5DA C9               ret
1321+ D5DB
1322+ D5DB
1323+ D5DB
1324+ D5DB              ; Pitch and roll are 2 phases
1325+ D5DB              ; 1 - we apply our pitch and roll to the ship position
1326+ D5DB              ;       x -> x + alpha * (y - alpha * x)
1327+ D5DB              ;       y -> y - alpha * x - beta * z
1328+ D5DB              ;       z -> z + beta * (y - alpha * x - beta * z)
1329+ D5DB              ; which can be simplified as:
1330+ D5DB              ;       1. K2 = y - alpha * x
1331+ D5DB              ;       2. z = z + beta * K2
1332+ D5DB              ;       3. y = K2 - beta * z
1333+ D5DB              ;       4. x = x + alpha * y
1334+ D5DB              ; 2 - we apply our patch and roll to the ship orientation
1335+ D5DB              ;      Roll calculations:
1336+ D5DB              ;
1337+ D5DB              ;        nosev_y = nosev_y - alpha * nosev_x_hi
1338+ D5DB              ;        nosev_x = nosev_x + alpha * nosev_y_hi
1339+ D5DB              ;      Pitch calculations:
1340+ D5DB              ;
1341+ D5DB              ;        nosev_y = nosev_y - beta * nosev_z_hi
1342+ D5DB              ;        nosev_z = nosev_z + beta * nosev_y_hi
1343+ D5DB
1344+ D5DB
1345+ D5DB              ; ---------------------------------------------------------------------------------------------------------------------------------
1346+ D5DB                          INCLUDE "./Universe/Ships/ApplyMyRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyMyRollAndPitch.asm
   1++D5DB
   2++D5DB              ; Full version
   3++D5DB              ; 1. K2 = y - alpha * x
   4++D5DB              ; 2. z = z + beta * K2
   5++D5DB              ; 3. y = K2 - beta * z
   6++D5DB              ; 4. x = x + alpha * y
   7++D5DB
   8++D5DB
   9++D5DB              APPequPosPlusAPP:       MACRO    Position, PositionSign
  10++D5DB ~                                    push    bc
  11++D5DB ~                                    ld      c,a                         ; save original value of a into c
  12++D5DB ~                                    ld      a,(PositionSign)
  13++D5DB ~                                    ld      b,a
  14++D5DB ~                                    ld      a,c
  15++D5DB ~                                    xor     b                           ; a = a xor x postition sign
  16++D5DB ~                                    jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  17++D5DB ~            ; Signs are the same to we just add and take which ever sign
  18++D5DB ~                                    ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  19++D5DB ~                                    ld      hl,(Position)
  20++D5DB ~                                    add     hl,de
  21++D5DB ~                                    ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  22++D5DB ~                                    ld      a,c                         ; and a = original sign as they were both the same
  23++D5DB ~                                    pop     bc
  24++D5DB ~                                    ret
  25++D5DB ~            ; Signs are opposite so we subtract
  26++D5DB ~            .MV50:                  ld      de,(varPp1)
  27++D5DB ~                                    ld      hl,(Position)
  28++D5DB ~                                    or      a
  29++D5DB ~                                    sbc     hl,de
  30++D5DB ~                                    jr      c,.MV51                     ; if the result was negative then negate result
  31++D5DB ~                                    ld      a,c                         ; get back the original sign
  32++D5DB ~                                    ld      (varPp1),hl                 ; and save result to P[2][1]
  33++D5DB ~                                    xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  34++D5DB ~                                    pop     bc
  35++D5DB ~                                    ret
  36++D5DB ~            .MV51:                  NegHL
  37++D5DB ~                                    ld      (varPp1),hl
  38++D5DB ~                                    ld      a,c                         ; the original sign will still be good
  39++D5DB ~                                    pop     bc
  40++D5DB ~                                    ret
  41++D5DB                                      ENDM
  42++D5DB
  43++D5DB
  44++D5DB              APPequXPosPlusAPP:     APPequPosPlusAPP UBnKxlo, UBnKxsgn
  44++D5DB C5          >                        push    bc
  44++D5DC 4F          >                        ld      c,a                         ; save original value of a into c
  44++D5DD 3A 22 C0    >                        ld      a,(UBnKxsgn)
  44++D5E0 47          >                        ld      b,a
  44++D5E1 79          >                        ld      a,c
  44++D5E2 A8          >                        xor     b                           ; a = a xor x postition sign
  44++D5E3 FA F4 D5    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  44++D5E6             >; Signs are the same to we just add and take which ever sign
  44++D5E6 ED 5B 9E 7D >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  44++D5EA 2A 20 C0    >                        ld      hl,(UBnKxlo)
  44++D5ED 19          >                        add     hl,de
  44++D5EE 22 9E 7D    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  44++D5F1 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  44++D5F2 C1          >                        pop     bc
  44++D5F3 C9          >                        ret
  44++D5F4             >; Signs are opposite so we subtract
  44++D5F4 ED 5B 9E 7D >.MV50:                  ld      de,(varPp1)
  44++D5F8 2A 20 C0    >                        ld      hl,(UBnKxlo)
  44++D5FB B7          >                        or      a
  44++D5FC ED 52       >                        sbc     hl,de
  44++D5FE 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  44++D600 79          >                        ld      a,c                         ; get back the original sign
  44++D601 22 9E 7D    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  44++D604 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  44++D606 C1          >                        pop     bc
  44++D607 C9          >                        ret
  44++D608             >.MV51:                  NegHL
  44++D608 AF          >                    xor a
  44++D609 95          >                    sub l
  44++D60A 6F          >                    ld l,a
  44++D60B 9F          >                    sbc a,a
  44++D60C 94          >                    sub h
  44++D60D 67          >                    ld h,a
  44++D60E 22 9E 7D    >                        ld      (varPp1),hl
  44++D611 79          >                        ld      a,c                         ; the original sign will still be good
  44++D612 C1          >                        pop     bc
  44++D613 C9          >                        ret
  45++D614
  46++D614              APPequYPosPlusAPP:     APPequPosPlusAPP UBnKylo, UBnKysgn
  46++D614 C5          >                        push    bc
  46++D615 4F          >                        ld      c,a                         ; save original value of a into c
  46++D616 3A 25 C0    >                        ld      a,(UBnKysgn)
  46++D619 47          >                        ld      b,a
  46++D61A 79          >                        ld      a,c
  46++D61B A8          >                        xor     b                           ; a = a xor x postition sign
  46++D61C FA 2D D6    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  46++D61F             >; Signs are the same to we just add and take which ever sign
  46++D61F ED 5B 9E 7D >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  46++D623 2A 23 C0    >                        ld      hl,(UBnKylo)
  46++D626 19          >                        add     hl,de
  46++D627 22 9E 7D    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  46++D62A 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  46++D62B C1          >                        pop     bc
  46++D62C C9          >                        ret
  46++D62D             >; Signs are opposite so we subtract
  46++D62D ED 5B 9E 7D >.MV50:                  ld      de,(varPp1)
  46++D631 2A 23 C0    >                        ld      hl,(UBnKylo)
  46++D634 B7          >                        or      a
  46++D635 ED 52       >                        sbc     hl,de
  46++D637 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  46++D639 79          >                        ld      a,c                         ; get back the original sign
  46++D63A 22 9E 7D    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  46++D63D EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  46++D63F C1          >                        pop     bc
  46++D640 C9          >                        ret
  46++D641             >.MV51:                  NegHL
  46++D641 AF          >                    xor a
  46++D642 95          >                    sub l
  46++D643 6F          >                    ld l,a
  46++D644 9F          >                    sbc a,a
  46++D645 94          >                    sub h
  46++D646 67          >                    ld h,a
  46++D647 22 9E 7D    >                        ld      (varPp1),hl
  46++D64A 79          >                        ld      a,c                         ; the original sign will still be good
  46++D64B C1          >                        pop     bc
  46++D64C C9          >                        ret
  47++D64D
  48++D64D              APPequZPosPlusAPP:     APPequPosPlusAPP UBnKzlo, UBnKzsgn
  48++D64D C5          >                        push    bc
  48++D64E 4F          >                        ld      c,a                         ; save original value of a into c
  48++D64F 3A 28 C0    >                        ld      a,(UBnKzsgn)
  48++D652 47          >                        ld      b,a
  48++D653 79          >                        ld      a,c
  48++D654 A8          >                        xor     b                           ; a = a xor x postition sign
  48++D655 FA 66 D6    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  48++D658             >; Signs are the same to we just add and take which ever sign
  48++D658 ED 5B 9E 7D >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  48++D65C 2A 26 C0    >                        ld      hl,(UBnKzlo)
  48++D65F 19          >                        add     hl,de
  48++D660 22 9E 7D    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  48++D663 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  48++D664 C1          >                        pop     bc
  48++D665 C9          >                        ret
  48++D666             >; Signs are opposite so we subtract
  48++D666 ED 5B 9E 7D >.MV50:                  ld      de,(varPp1)
  48++D66A 2A 26 C0    >                        ld      hl,(UBnKzlo)
  48++D66D B7          >                        or      a
  48++D66E ED 52       >                        sbc     hl,de
  48++D670 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  48++D672 79          >                        ld      a,c                         ; get back the original sign
  48++D673 22 9E 7D    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  48++D676 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  48++D678 C1          >                        pop     bc
  48++D679 C9          >                        ret
  48++D67A             >.MV51:                  NegHL
  48++D67A AF          >                    xor a
  48++D67B 95          >                    sub l
  48++D67C 6F          >                    ld l,a
  48++D67D 9F          >                    sbc a,a
  48++D67E 94          >                    sub h
  48++D67F 67          >                    ld h,a
  48++D680 22 9E 7D    >                        ld      (varPp1),hl
  48++D683 79          >                        ld      a,c                         ; the original sign will still be good
  48++D684 C1          >                        pop     bc
  48++D685 C9          >                        ret
  49++D686
  50++D686              ; rollWork holds Alpha intermidate results
  51++D686 00 00 00     rollWork      DS 3
  52++D689              rollWorkp1    equ rollWork
  53++D689              rollWorkp2    equ rollWork+1
  54++D689              rollWorkp3    equ rollWork+2
  55++D689
  56++D689              ;----------------------------------------------------------------------------------------------------------------------------------
  57++D689              ; based on MVEIT part 4 of 9
  58++D689 3A B6 7D     ApplyMyRollAndPitch:    ld      a,(ALP1)                    ; get roll magnitude
  59++D68C 21 AA 7D                             ld      hl,BET1                     ; and pitch
  60++D68F B6                                   or      (hl)
  61++D690 CA 4C D8                             jp      z,.NoRotation               ; if both zero then don't compute
  62++D693                                      ;break
  63++D693              ; P[210] = x * alph (we use P[2]P[1] later as result/256
  64++D693 5F                                   ld      e,a                         ; e = roll magnitude
  65++D694 2A 20 C0                             ld      hl,(UBnKxlo)                ; hl = ship x pos
  66++D697 CD 4F 90                             call    AHLequHLmulE                ; MULTU2-2 AHL = UbnkXlo * Alp1 both unsigned
  67++D69A 32 9F 7D                             ld      (varPhi2),a                 ; set P[2] to high byte to help with ./256
  68++D69D 22 9D 7D                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo * Alph1
  69++D6A0              ; A = Flip sign
  70++D6A0 3A B7 7D                             ld      a,(ALP2)                ; flip the current roll angle alpha and xor with x sign
  71++D6A3 21 22 C0                             ld      hl,UBnKxsgn                 ; and xor with x pos sign
  72++D6A6 AE                                   xor     (hl)                        ; so now  (A P+2 P+1) = - (x_sign x_hi x_lo) * alpha / 256
  73++D6A7              ; AP[2]P[1] =Y + AP[2]P[1] (i.e. Previous APP/256)
  74++D6A7 CD 14 D6                             call    APPequYPosPlusAPP           ; MVT6 calculate APP = y - (x * alpha / 256)
  75++D6AA              ; K2 = AP[2][1] K2(3 2 1) = (A P+2 P+1) = y - x * alpha / 256
  76++D6AA 32 88 D6                             ld      (rollWorkp3),a               ; k2+3 = sign of result
  77++D6AD 22 86 D6                             ld      (rollWorkp1),hl             ; k2+1,2 = result
  78++D6B0              ; P[210] = K2[2 1] * Beta  = (A ~P) * X
  79++D6B0 3A AA 7D                             ld      a,(BET1)                    ; a = magnitude of pitch
  80++D6B3 5F                                   ld      e,a
  81++D6B4 CD 4F 90                             call    AHLequHLmulE                ; MLTU2-2 AHL = (P+2 P+1) * BET1 or by now ((UbnkXlo * Alph1)/256 * Bet1)
  82++D6B7 32 9F 7D                             ld      (varPp2),a                   ; save highest byte in P2
  83++D6BA 22 9D 7D                             ld      (varP),hl
  84++D6BD              ; Fetch sign of previosu cal and xor with BETA inverted
  85++D6BD 3A 88 D6                             ld      a,(rollWorkp3)
  86++D6C0 5F                                   ld      e,a
  87++D6C1 3A AB 7D                             ld      a,(BET2)
  88++D6C4 AB                                   xor     e                           ; so we get the sign of K3 and xor with pitch sign
  89++D6C5              ; Z = P[210] =Z + APP
  90++D6C5 CD 4D D6                             call    APPequZPosPlusAPP           ; MVT6
  91++D6C8 32 28 C0                             ld      (UBnKzsgn),a                ; save result back into z
  92++D6CB 22 26 C0                             ld      (UBnKzlo),hl
  93++D6CE              ; A[P1]P[0] = z * Beta
  94++D6CE 3A AA 7D                             ld      a,(BET1)                    ; get pitch back again for mulitply in original it was kept in Q so no fetch needed
  95++D6D1 5F                                   ld      e,a
  96++D6D2 CD 4F 90                             call    AHLequHLmulE                ; MULTU2 P2 P1 was already in hl (A P+1 P) = (z_hi z_lo) * beta
  97++D6D5 32 9F 7D                             ld      (varPp2),a                  ; P2 = high byte of result
  98++D6D8 22 9D 7D                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo & Alph1
  99++D6DB              ; A xor BET2,Zsign
 100++D6DB 3A 88 D6                             ld      a,(rollWorkp3)               ; get K3 (sign of y) and store it in y pos
 101++D6DE 32 25 C0                             ld      (UBnKysgn),a                ; save result back into y
 102++D6E1 5F                                   ld      e,a                         ; a = y sign Xor pitch rate sign
 103++D6E2 3A AB 7D                             ld      a,(BET2)                    ;
 104++D6E5 AB                                   xor     e                           ;
 105++D6E6 5F                                   ld      e,a                         ; now xor it with z sign too
 106++D6E7 3A 28 C0                             ld      a,(UBnKzsgn)                ;
 107++D6EA AB                                   xor     e                           ; so now a = sign of y * beta * sign y * sign z
 108++D6EB F2 FA D6                             jp      p,.MV43                     ; if result is pve beta * z and y have differetn signs
 109++D6EE 2A 9E 7D                             ld      hl,(varPp1)
 110++D6F1 ED 5B 86 D6                          ld      de,(rollWorkp1)
 111++D6F5 B7                                   or      a
 112++D6F6 19                                   add     hl,de
 113++D6F7 C3 14 D7                             jp      .MV44
 114++D6FA 2A 86 D6     .MV43:                  ld      hl,(rollWorkp1)
 115++D6FD ED 5B 9E 7D                          ld      de,(varPp1)
 116++D701 B7                                   or      a
 117++D702 ED 52                                sbc     hl,de                       ; (y_hi y_lo) = K2(2 1) - P(2 1)
 118++D704 30 0E                                jr      nc,.MV44                    ; if there was no over flow carry on
 119++D706                                      NegHL
 119++D706 AF          >                    xor a
 119++D707 95          >                    sub l
 119++D708 6F          >                    ld l,a
 119++D709 9F          >                    sbc a,a
 119++D70A 94          >                    sub h
 119++D70B 67          >                    ld h,a
 120++D70C 3A 25 C0                             ld      a,(UBnKysgn)                ; flip sign bit TODO, we may have to remove xor as planets and suns are sign + 23 bit xpos
 121++D70F EE 80                                xor     SignOnly8Bit
 122++D711 32 25 C0                             ld      (UBnKysgn),a
 123++D714              ; by here we have (y_sign y_hi y_lo) = K2(2 1) - P(2 1) = K2 - beta * z
 124++D714 22 23 C0     .MV44:                  ld      (UBnKylo),hl                ; we do save here to avoid two writes if MV43 ended up with a 2s'c conversion
 125++D717 3A B6 7D                             ld      a,(ALP1)                    ; get roll magnitude
 126++D71A 5F                                   ld      e,a
 127++D71B 2A 23 C0                             ld      hl,(UBnKylo)
 128++D71E CD 4F 90                             call    AHLequHLmulE                ; MLTU2-2 AHL = (y_hi y_lo) * alpha
 129++D721 32 9F 7D                             ld      (varPp2),a                  ; store high byte P(2 1 0) = (y_hi y_lo) * alpha
 130++D724 22 9D 7D                             ld      (varP),hl
 131++D727 3A B8 7D                             ld      a,(ALP2FLIP)
 132++D72A 5F                                   ld      e,a
 133++D72B 3A 25 C0                             ld      a,(UBnKysgn)
 134++D72E AB                                   xor     e                           ; a = sign of roll xor y so now we have (A P+2 P+1) = (y_sign y_hi y_lo) * alpha / 256
 135++D72F CD DB D5                             call    APPequXPosPlusAPP           ; MVT6 Set (A P+2 P+1) = (x_sign x_hi x_lo) + (A P+2 P+1) = x + y * alpha / 256
 136++D732 32 22 C0                             ld      (UBnKxsgn),a                ; save resutl stright into X pos
 137++D735 22 20 C0                             ld      (UBnKxlo),hl
 138++D738                                      ;break
 139++D738                                      ; if its not a sun then apply to local orientation
 140++D738                                      ApplyMyRollToVector ALPHA, UBnkrotmatNosevX, UBnkrotmatNosevY   ; ApplyMyRollToNosev:
 140++D738             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 140++D738 3A B5 7D    >                        ld       a,(ALPHA)
 140++D73B 32 9C 7E    >                        ld       (varQ),a
 140++D73E             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
 140++D73E 2A 37 C0    >                        ld       hl,(UBnkrotmatNosevY)
 140++D741 22 9D 7E    >                        ld       (varR),hl
 140++D744             >                        ldCopyByte  UBnkrotmatNosevX, varP           ; set P to nosevX lo (may be redundant)
 140++D744 3A 35 C0    >                        ld       a,(UBnkrotmatNosevX)
 140++D747 32 9D 7D    >                        ld       (varP),a
 140++D74A 3A 36 C0    >                        ld a,(UBnkrotmatNosevX+1)                    ; Set A = -nosev_x_hi
 140++D74D EE 80       >                        xor $80                             ;
 140++D74F CD D4 8F    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 140++D752 ED 53 37 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 140++D756             >                        ldCopy2Byte UBnkrotmatNosevX, varR           ; Set (S R) = nosev_x
 140++D756 2A 35 C0    >                        ld       hl,(UBnkrotmatNosevX)
 140++D759 22 9D 7E    >                        ld       (varR),hl
 140++D75C 3A 38 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
 140++D75F CD D4 8F    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 140++D762 ED 53 35 C0 >                        ld  (UBnkrotmatNosevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 141++D766                                      ApplyMyRollToVector ALPHA, UBnkrotmatSidevX, UBnkrotmatSidevY   ; ApplyMyRollToSidev:
 141++D766             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 141++D766 3A B5 7D    >                        ld       a,(ALPHA)
 141++D769 32 9C 7E    >                        ld       (varQ),a
 141++D76C             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
 141++D76C 2A 2B C0    >                        ld       hl,(UBnkrotmatSidevY)
 141++D76F 22 9D 7E    >                        ld       (varR),hl
 141++D772             >                        ldCopyByte  UBnkrotmatSidevX, varP           ; set P to nosevX lo (may be redundant)
 141++D772 3A 29 C0    >                        ld       a,(UBnkrotmatSidevX)
 141++D775 32 9D 7D    >                        ld       (varP),a
 141++D778 3A 2A C0    >                        ld a,(UBnkrotmatSidevX+1)                    ; Set A = -nosev_x_hi
 141++D77B EE 80       >                        xor $80                             ;
 141++D77D CD D4 8F    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 141++D780 ED 53 2B C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 141++D784             >                        ldCopy2Byte UBnkrotmatSidevX, varR           ; Set (S R) = nosev_x
 141++D784 2A 29 C0    >                        ld       hl,(UBnkrotmatSidevX)
 141++D787 22 9D 7E    >                        ld       (varR),hl
 141++D78A 3A 2C C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
 141++D78D CD D4 8F    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 141++D790 ED 53 29 C0 >                        ld  (UBnkrotmatSidevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 142++D794                                      ApplyMyRollToVector ALPHA, UBnkrotmatRoofvX, UBnkrotmatRoofvY   ; ApplyMyRollToRoofv:
 142++D794             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 142++D794 3A B5 7D    >                        ld       a,(ALPHA)
 142++D797 32 9C 7E    >                        ld       (varQ),a
 142++D79A             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
 142++D79A 2A 31 C0    >                        ld       hl,(UBnkrotmatRoofvY)
 142++D79D 22 9D 7E    >                        ld       (varR),hl
 142++D7A0             >                        ldCopyByte  UBnkrotmatRoofvX, varP           ; set P to nosevX lo (may be redundant)
 142++D7A0 3A 2F C0    >                        ld       a,(UBnkrotmatRoofvX)
 142++D7A3 32 9D 7D    >                        ld       (varP),a
 142++D7A6 3A 30 C0    >                        ld a,(UBnkrotmatRoofvX+1)                    ; Set A = -nosev_x_hi
 142++D7A9 EE 80       >                        xor $80                             ;
 142++D7AB CD D4 8F    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 142++D7AE ED 53 31 C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 142++D7B2             >                        ldCopy2Byte UBnkrotmatRoofvX, varR           ; Set (S R) = nosev_x
 142++D7B2 2A 2F C0    >                        ld       hl,(UBnkrotmatRoofvX)
 142++D7B5 22 9D 7E    >                        ld       (varR),hl
 142++D7B8 3A 32 C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
 142++D7BB CD D4 8F    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 142++D7BE ED 53 2F C0 >                        ld  (UBnkrotmatRoofvX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 143++D7C2                                      ApplyMyRollToVector BETA, UBnkrotmatNosevZ, UBnkrotmatNosevY    ; ApplyMyPitchToNosev:
 143++D7C2             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 143++D7C2 3A A8 7D    >                        ld       a,(BETA)
 143++D7C5 32 9C 7E    >                        ld       (varQ),a
 143++D7C8             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
 143++D7C8 2A 37 C0    >                        ld       hl,(UBnkrotmatNosevY)
 143++D7CB 22 9D 7E    >                        ld       (varR),hl
 143++D7CE             >                        ldCopyByte  UBnkrotmatNosevZ, varP           ; set P to nosevX lo (may be redundant)
 143++D7CE 3A 39 C0    >                        ld       a,(UBnkrotmatNosevZ)
 143++D7D1 32 9D 7D    >                        ld       (varP),a
 143++D7D4 3A 3A C0    >                        ld a,(UBnkrotmatNosevZ+1)                    ; Set A = -nosev_x_hi
 143++D7D7 EE 80       >                        xor $80                             ;
 143++D7D9 CD D4 8F    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 143++D7DC ED 53 37 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 143++D7E0             >                        ldCopy2Byte UBnkrotmatNosevZ, varR           ; Set (S R) = nosev_x
 143++D7E0 2A 39 C0    >                        ld       hl,(UBnkrotmatNosevZ)
 143++D7E3 22 9D 7E    >                        ld       (varR),hl
 143++D7E6 3A 38 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
 143++D7E9 CD D4 8F    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 143++D7EC ED 53 39 C0 >                        ld  (UBnkrotmatNosevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 144++D7F0                                      ApplyMyRollToVector BETA, UBnkrotmatSidevZ, UBnkrotmatSidevY    ; ApplyMyPitchToSidev:
 144++D7F0             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 144++D7F0 3A A8 7D    >                        ld       a,(BETA)
 144++D7F3 32 9C 7E    >                        ld       (varQ),a
 144++D7F6             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
 144++D7F6 2A 2B C0    >                        ld       hl,(UBnkrotmatSidevY)
 144++D7F9 22 9D 7E    >                        ld       (varR),hl
 144++D7FC             >                        ldCopyByte  UBnkrotmatSidevZ, varP           ; set P to nosevX lo (may be redundant)
 144++D7FC 3A 2D C0    >                        ld       a,(UBnkrotmatSidevZ)
 144++D7FF 32 9D 7D    >                        ld       (varP),a
 144++D802 3A 2E C0    >                        ld a,(UBnkrotmatSidevZ+1)                    ; Set A = -nosev_x_hi
 144++D805 EE 80       >                        xor $80                             ;
 144++D807 CD D4 8F    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 144++D80A ED 53 2B C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 144++D80E             >                        ldCopy2Byte UBnkrotmatSidevZ, varR           ; Set (S R) = nosev_x
 144++D80E 2A 2D C0    >                        ld       hl,(UBnkrotmatSidevZ)
 144++D811 22 9D 7E    >                        ld       (varR),hl
 144++D814 3A 2C C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
 144++D817 CD D4 8F    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 144++D81A ED 53 2D C0 >                        ld  (UBnkrotmatSidevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 145++D81E                                      ApplyMyRollToVector BETA, UBnkrotmatRoofvZ, UBnkrotmatRoofvY    ; ApplyMyPitchToRoofv:
 145++D81E             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 145++D81E 3A A8 7D    >                        ld       a,(BETA)
 145++D821 32 9C 7E    >                        ld       (varQ),a
 145++D824             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
 145++D824 2A 31 C0    >                        ld       hl,(UBnkrotmatRoofvY)
 145++D827 22 9D 7E    >                        ld       (varR),hl
 145++D82A             >                        ldCopyByte  UBnkrotmatRoofvZ, varP           ; set P to nosevX lo (may be redundant)
 145++D82A 3A 33 C0    >                        ld       a,(UBnkrotmatRoofvZ)
 145++D82D 32 9D 7D    >                        ld       (varP),a
 145++D830 3A 34 C0    >                        ld a,(UBnkrotmatRoofvZ+1)                    ; Set A = -nosev_x_hi
 145++D833 EE 80       >                        xor $80                             ;
 145++D835 CD D4 8F    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 145++D838 ED 53 31 C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 145++D83C             >                        ldCopy2Byte UBnkrotmatRoofvZ, varR           ; Set (S R) = nosev_x
 145++D83C 2A 33 C0    >                        ld       hl,(UBnkrotmatRoofvZ)
 145++D83F 22 9D 7E    >                        ld       (varR),hl
 145++D842 3A 32 C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
 145++D845 CD D4 8F    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 145++D848 ED 53 33 C0 >                        ld  (UBnkrotmatRoofvZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 146++D84C 3A 96 7E     .NoRotation:            ld      a,(DELTA)                   ; get speed
 147++D84F 16 00                                ld      d,0
 148++D851 5F                                   ld      e,a                         ; de = speed in low byte
 149++D852 2A 26 C0                             ld      hl,(UBnKzlo)                ; hl = z position
 150++D855 3A 28 C0                             ld      a,(UBnKzsgn)                ; b = z sign
 151++D858 47                                   ld      b,a                         ;
 152++D859 0E 80                                ld      c,$80                       ; c = -ve as we are always moving forwards
 153++D85B CD 2F 00                             call    ADDHLDESignBC               ; update speed
 154++D85E 22 26 C0                             ld      (UBnKzlo),hl                ; write back to zpos
 155++D861 32 28 C0                             ld      (UBnKzsgn),a                ;
 156++D864 C9                                   ret
# file closed: ././Universe/Ships/ApplyMyRollAndPitch.asm
1347+ D865                          INCLUDE "./Universe/Ships/ApplyShipRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyShipRollAndPitch.asm
   1++D865
   2++D865              ; A = value for rotation
   3++D865              ; HL = address of value for rotation
   4++D865              ; TODO logic for permanent spin, I thik this it -127??
   5++D865              SplitAndDampenZ:        MACRO
   6++D865 ~                                    ld      b,a
   7++D865 ~                                    and     SignMask8Bit            ; if abs (Rotz) is 0 then skip
   8++D865 ~                                    jp      z,.ProcessRoll
   9++D865 ~                                    ld      a,b                     ; b = rotate counter S7
  10++D865 ~                                    and     SignOnly8Bit            ; a = sign rat2 = c = sign
  11++D865 ~                                    ld      c,a                     ; .
  12++D865 ~                                    ld      (univRAT2),a            ; .
  13++D865 ~                                    ld      a,b                     ; a = abs b
  14++D865 ~                                    and     SignMask8Bit            ; .
  15++D865 ~                                    dec     a                       ; dampen
  16++D865 ~                                    ld      (univRAT2Val),a
  17++D865 ~                                    or      c                       ; make S7 again after dampening
  18++D865 ~                                    ld      (UBnKRotZCounter),a
  19++D865                                      ENDM
  20++D865
  21++D865              SplitAndDampenX:        MACRO
  22++D865 ~                                    ld      b,a
  23++D865 ~                                    and     SignMask8Bit            ; exit early is ABS = 0
  24++D865 ~                                    and     a                       ; .
  25++D865 ~                                    ret     z                       ; .
  26++D865 ~                                    ld      a,b                     ; a = rotate counter S7
  27++D865 ~                                    and     SignOnly8Bit            ; rat2 = c = sign
  28++D865 ~                                    ld      c,a                     ; .
  29++D865 ~                                    ld      (univRAT2),a            ; .
  30++D865 ~                                    ld      a,b                     ; a = abs b
  31++D865 ~                                    and     SignMask8Bit            ; .
  32++D865 ~                                    dec     a                       ; dampen
  33++D865 ~                                    ld      (univRAT2Val),a
  34++D865 ~                                    or      c                       ; make S7 again after dampening
  35++D865 ~                                    ld      (UBnKRotXCounter),a
  36++D865                                      ENDM
  37++D865
  38++D865
  39++D865              ;----------------------------------------------------------------------------------------------------------------------------------
  40++D865              ; based on MVEIT part 4 of 9
  41++D865              ; x and z counters are proper 2's c values
  42++D865 3A 49 C0     ApplyShipRollAndPitch:  ld      a,(UBnKRotZCounter)
  43++D868 FE FF                                cp      $FF
  44++D86A 28 18                                jr      z,.PitchSAxes
  45++D86C                                      SplitAndDampenZ
  45++D86C 47          >                        ld      b,a
  45++D86D E6 7F       >                        and     SignMask8Bit            ; if abs (Rotz) is 0 then skip
  45++D86F CA B1 D8    >                        jp      z,.ProcessRoll
  45++D872 78          >                        ld      a,b                     ; b = rotate counter S7
  45++D873 E6 80       >                        and     SignOnly8Bit            ; a = sign rat2 = c = sign
  45++D875 4F          >                        ld      c,a                     ; .
  45++D876 32 4F C0    >                        ld      (univRAT2),a            ; .
  45++D879 78          >                        ld      a,b                     ; a = abs b
  45++D87A E6 7F       >                        and     SignMask8Bit            ; .
  45++D87C 3D          >                        dec     a                       ; dampen
  45++D87D 32 50 C0    >                        ld      (univRAT2Val),a
  45++D880 B1          >                        or      c                       ; make S7 again after dampening
  45++D881 32 49 C0    >                        ld      (UBnKRotZCounter),a
  46++D884                                      ;ld      a,(UBnKRotZCounter)
  47++D884 21 2F C0     .PitchSAxes:            ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevY
  48++D887 22 82 7D                             ld	    (varAxis1),hl
  49++D88A 21 35 C0                             ld	    hl,UBnkrotmatNosevX; UBnkrotmatSidevZ
  50++D88D 22 84 7D                             ld	    (varAxis2),hl
  51++D890 CD FD D8                             call    MVS5RotateAxis
  52++D893 21 31 C0     .PitchRAxes:            ld	    hl,UBnkrotmatRoofvY
  53++D896 22 82 7D                             ld	    (varAxis1),hl
  54++D899 21 37 C0                             ld	    hl,UBnkrotmatNosevY;UBnkrotmatRoofvZ
  55++D89C 22 84 7D                             ld	    (varAxis2),hl
  56++D89F CD FD D8                             call    MVS5RotateAxis
  57++D8A2 21 33 C0     .PitchNAxes:            ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevY
  58++D8A5 22 82 7D                             ld	    (varAxis1),hl
  59++D8A8 21 39 C0                             ld	    hl,UBnkrotmatNosevZ
  60++D8AB 22 84 7D                             ld	    (varAxis2),hl
  61++D8AE CD FD D8                             call    MVS5RotateAxis
  62++D8B1 3A 48 C0     .ProcessRoll:           ld      a,(UBnKRotXCounter)
  63++D8B4 FE FF                                cp      $FF
  64++D8B6 28 17                                jr      z,.RollSAxis
  65++D8B8                                      SplitAndDampenX
  65++D8B8 47          >                        ld      b,a
  65++D8B9 E6 7F       >                        and     SignMask8Bit            ; exit early is ABS = 0
  65++D8BB A7          >                        and     a                       ; .
  65++D8BC C8          >                        ret     z                       ; .
  65++D8BD 78          >                        ld      a,b                     ; a = rotate counter S7
  65++D8BE E6 80       >                        and     SignOnly8Bit            ; rat2 = c = sign
  65++D8C0 4F          >                        ld      c,a                     ; .
  65++D8C1 32 4F C0    >                        ld      (univRAT2),a            ; .
  65++D8C4 78          >                        ld      a,b                     ; a = abs b
  65++D8C5 E6 7F       >                        and     SignMask8Bit            ; .
  65++D8C7 3D          >                        dec     a                       ; dampen
  65++D8C8 32 50 C0    >                        ld      (univRAT2Val),a
  65++D8CB B1          >                        or      c                       ; make S7 again after dampening
  65++D8CC 32 48 C0    >                        ld      (UBnKRotXCounter),a
  66++D8CF 21 2F C0     .RollSAxis:           	ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevX
  67++D8D2 22 82 7D                             ld	    (varAxis1),hl
  68++D8D5 21 29 C0                             ld	    hl,UBnkrotmatSidevX; UBnkrotmatSidevY
  69++D8D8 22 84 7D                             ld	    (varAxis2),hl
  70++D8DB CD FD D8                             call    MVS5RotateAxis
  71++D8DE 21 31 C0     .RollRAxis:             ld	    hl,UBnkrotmatRoofvY; UBnkrotmatRoofvX
  72++D8E1 22 82 7D                             ld	    (varAxis1),hl
  73++D8E4 21 2B C0                             ld	    hl,UBnkrotmatSidevY; UBnkrotmatRoofvY
  74++D8E7 22 84 7D                             ld	    (varAxis2),hl
  75++D8EA CD FD D8                             call    MVS5RotateAxis
  76++D8ED 21 33 C0     .RollNAxis:             ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevX
  77++D8F0 22 82 7D                             ld	    (varAxis1),hl
  78++D8F3 21 2D C0                             ld	    hl,UBnkrotmatSidevZ; UBnkrotmatNosevY
  79++D8F6 22 84 7D                             ld	    (varAxis2),hl
  80++D8F9 CD FD D8                             call    MVS5RotateAxis
  81++D8FC C9                                   ret
  82++D8FD
  83++D8FD
  84++D8FD
  85++D8FD              ; Roate around axis
  86++D8FD              ; varAxis1 and varAxis2 point to the address of the axis to rotate
  87++D8FD              ; so the axis x1 points to roofv  x , y or z
  88++D8FD              ;             x2           nosev or sidev  x, y or z
  89++D8FD              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
  90++D8FD              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
  91++D8FD              ; var RAT2 gives direction
  92++D8FD              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
  93++D8FD              ;-Set up S R -----------------------------------------
  94++D8FD              ; optimised we don't deal with sign here just the value of roof axis / 512
  95++D8FD 2A 82 7D     MVS5RotateAxis:         ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
  96++D900 5E                                   ld      e,(hl)
  97++D901 23                                   inc     hl
  98++D902 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
  99++D903 EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
 100++D904 7C                                   ld      a,h
 101++D905 E6 80                                and     SignOnly8Bit
 102++D907 FD 67                                ld      iyh,a           ; iyh = sign Axis1
 103++D909 7C                                   ld      a,h
 104++D90A E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
 105++D90C CB 3F                                srl     a               ; a = Axis1/2
 106++D90E 5F                                   ld      e,a             ;
 107++D90F FD 7C                                ld      a,iyh           ; A = Axis 1 sign
 108++D911 57                                   ld      d,a             ; de = signed Axis1 / 512
 109++D912 B7                                   or      a               ; clear carry
 110++D913 CD 53 01                             call    subHLDES15      ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
 111++D916              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
 112++D916 E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
 113++D917 7D                                   ld      a,l
 114++D918 32 9D 7E                             ld      (varR),a
 115++D91B 7C                                   ld      a,h
 116++D91C 32 9E 7E                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
 117++D91F              ;-calculate roofv latter half of calc
 118++D91F 2A 84 7D                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
 119++D922 5E                                   ld      e,(hl)
 120++D923 23                                   inc     hl
 121++D924 56                                   ld      d,(hl)          ; de = value of roof axis
 122++D925 7A                                   ld      a,d
 123++D926 E6 80                                and     SignOnly8Bit
 124++D928 FD 67                                ld      iyh,a           ; save sign
 125++D92A 7A                                   ld      a,d
 126++D92B E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 127++D92D 57                                   ld      d,a             ; de = abs (nosev)
 128++D92E                                      ShiftDERight1
 128++D92E CB 3A       >			   srl d
 128++D930 CB 1B       >			   rr  e
 129++D932                                      ShiftDERight1
 129++D932 CB 3A       >			   srl d
 129++D934 CB 1B       >			   rr  e
 130++D936                                      ShiftDERight1
 130++D936 CB 3A       >			   srl d
 130++D938 CB 1B       >			   rr  e
 131++D93A                                      ShiftDERight1           ; de = nosev /16 unsigned
 131++D93A CB 3A       >			   srl d
 131++D93C CB 1B       >			   rr  e
 132++D93E 3A 4F C0                             ld      a,(univRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
 133++D941 FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
 134++D943 E6 80                                and     SignOnly8Bit
 135++D945 B2                                   or      d
 136++D946 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
 137++D947              ;;; ld      a,e
 138++D947              ;;;     or      iyh
 139++D947              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 140++D947              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
 141++D947 E1                                   pop     hl              ; get back RS POP ID 1
 142++D948                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 143++D948              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
 144++D948 CD 52 00                             call    ADDHLDESignedV4 ; do add using hl and de
 145++D94B E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
 146++D94C              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
 147++D94C              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
 148++D94C 2A 84 7D                             ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
 149++D94F 5E                                   ld      e,(hl)
 150++D950 23                                   inc     hl
 151++D951 56                                   ld      d,(hl)
 152++D952 EB                                   ex      de,hl
 153++D953 7C                                   ld      a,h
 154++D954 E6 80                                and     $80
 155++D956 FD 67                                ld      iyh,a
 156++D958 7C                                   ld      a,h
 157++D959 E6 7F                                and     SignMask8Bit    ; a = roof hi axis  unsigned
 158++D95B CB 3F                                srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
 159++D95D 5F                                   ld      e,a
 160++D95E FD 7C                                ld      a,iyh
 161++D960 57                                   ld      d,a
 162++D961 B7                                   or      a               ; clear carry
 163++D962 CD 53 01                             call    subHLDES15
 164++D965              ;   sbc     hl,de           ; hl = nosev - novesv / 512
 165++D965 E5                                   push    hl              ; save hl on stack  PUSH ID 3
 166++D966 7D                                   ld      a,l
 167++D967 32 9D 7D                             ld      (varP),a        ; p = low of resuilt
 168++D96A 7C                                   ld      a,h
 169++D96B E6 7F                                and     SignMask8Bit    ; a = roof hi axis  unsigned
 170++D96D 32 B8 7E                             ld      (varT),a        ; t = high of result
 171++D970              ;-- Set up TQ
 172++D970 2A 82 7D                             ld      hl,(varAxis1)   ; now work on roofv axis / 16
 173++D973              ;   ld      hl,(varAxis2)   ; work on nosev again
 174++D973 5E                                   ld      e,(hl)
 175++D974 23                                   inc     hl
 176++D975 56                                   ld      d,(hl)
 177++D976 7A                                   ld      a,d
 178++D977 E6 80                                and     $80
 179++D979 FD 67                                ld      iyh,a           ; save sign
 180++D97B 7A                                   ld      a,d
 181++D97C E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 182++D97E 57                                   ld      d,a             ; de = abs (nosev)
 183++D97F                                      ShiftDERight1
 183++D97F CB 3A       >			   srl d
 183++D981 CB 1B       >			   rr  e
 184++D983                                      ShiftDERight1
 184++D983 CB 3A       >			   srl d
 184++D985 CB 1B       >			   rr  e
 185++D987                                      ShiftDERight1
 185++D987 CB 3A       >			   srl d
 185++D989 CB 1B       >			   rr  e
 186++D98B                                      ShiftDERight1           ; de = nosev /16 unsigned
 186++D98B CB 3A       >			   srl d
 186++D98D CB 1B       >			   rr  e
 187++D98F 3A 4F C0                             ld      a,(univRAT2)
 188++D992 FD AC                                xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 189++D994 E6 80                                and     $80
 190++D996 B2                                   or      d
 191++D997 57                                   ld      d,a
 192++D998              ;;; ld      a,e
 193++D998              ;;;     or      iyh
 194++D998              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 195++D998 E1                                   pop     hl              ; get back RS   POP ID 3
 196++D999              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 197++D999 CD 53 01                             call    subHLDES15 ; do add using hl and de
 198++D99C              ;-- Update nosev ---------------------------------------
 199++D99C EB                                   ex      de,hl           ; save hl to de
 200++D99D 2A 84 7D                             ld      hl,(varAxis2)
 201++D9A0 73                                   ld      (hl),e
 202++D9A1 23                                   inc     hl
 203++D9A2 72                                   ld      (hl),d          ; copy result into nosev
 204++D9A3              ;-- Update roofv ---------------------------------------
 205++D9A3 D1                                   pop     de              ; get calc saved on stack POP ID 2
 206++D9A4 2A 82 7D                             ld      hl,(varAxis1)
 207++D9A7 73                                   ld      (hl),e
 208++D9A8 23                                   inc     hl
 209++D9A9 72                                   ld      (hl),d          ; copy result into nosev
 210++D9AA C9                                   ret
 211++D9AB
 212++D9AB
# file closed: ././Universe/Ships/ApplyShipRollAndPitch.asm
1348+ D9AB                          INCLUDE "./Universe/Ships/ApplyShipSpeed.asm"
# file opened: ././Universe/Ships/ApplyShipSpeed.asm
   1++D9AB
   2++D9AB
   3++D9AB              ;AddSpeedToVert:         MACRO   vertex
   4++D9AB              ;                        ld      hl,(vertex)
   5++D9AB              ;                        ld      a,(vertex+2)
   6++D9AB              ;                        ld      b,a
   7++D9AB              ;                        call    AHLEquBHLaddCDE
   8++D9AB              ;                        ld      (vertex),hl
   9++D9AB              ;                        ld      (vertex+2),a
  10++D9AB              ;                        ENDM
  11++D9AB
  12++D9AB
  13++D9AB              ; ---------------------------------------------------------------------------------------------------------------------------------
  14++D9AB 3A 46 C0     ApplyShipSpeed:         ld      a,(UBnKSpeed)                   ; get speed * 4
  15++D9AE FE 00                                cp      0
  16++D9B0 C8                                   ret     z
  17++D9B1 CB 27                                sla     a
  18++D9B3 CB 27                                sla     a
  19++D9B5 FD 6F                                ld      iyl,a                           ; save pre calculated speed
  20++D9B7              .ApplyToX:              SpeedMulAxis    a, UBnkrotmatNosevX     ; e =  ABS (nosev x hi) c = sign
  20++D9B7 5F          >                        ld      e,a
  20++D9B8 2A 35 C0    >                        ld      hl,(UBnkrotmatNosevX)
  20++D9BB 7C          >                        ld      a,h
  20++D9BC             >                        ClearSignBitA
  20++D9BC E6 7F       >                        and     SignMask8Bit
  20++D9BE 57          >                        ld      d,a
  20++D9BF ED 30       >                        mul     de
  20++D9C1 7C          >                        ld      a,h
  20++D9C2             >                        SignBitOnlyA
  20++D9C2 E6 80       >                        and     SignOnly8Bit
  20++D9C4 47          >                        ld      b,a;ld      c,a
  20++D9C5 62          >                        ld      h,d;ld      e,d
  20++D9C6 0E 00       >                        ld      c,0;ld      d,0
  21++D9C8              .AddSpeedToX:           AddSpeedToVert UBnKxlo
  21++D9C8 ED 5B 21 C0 >                        ld      de,(UBnKxlo+1)
  21++D9CC 3A 20 C0    >                        ld      a,(UBnKxlo)
  21++D9CF 6F          >                        ld      l,a
  21++D9D0 CD F2 00    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  21++D9D3 7D          >                        ld      a,l
  21++D9D4 32 20 C0    >                        ld      (UBnKxlo),a
  21++D9D7 ED 53 21 C0 >                        ld      (UBnKxlo+1),de
  22++D9DB              .ApplyToY:              SpeedMulAxis    iyl, UBnkrotmatNosevY
  22++D9DB FD 5D       >                        ld      e,iyl
  22++D9DD 2A 37 C0    >                        ld      hl,(UBnkrotmatNosevY)
  22++D9E0 7C          >                        ld      a,h
  22++D9E1             >                        ClearSignBitA
  22++D9E1 E6 7F       >                        and     SignMask8Bit
  22++D9E3 57          >                        ld      d,a
  22++D9E4 ED 30       >                        mul     de
  22++D9E6 7C          >                        ld      a,h
  22++D9E7             >                        SignBitOnlyA
  22++D9E7 E6 80       >                        and     SignOnly8Bit
  22++D9E9 47          >                        ld      b,a;ld      c,a
  22++D9EA 62          >                        ld      h,d;ld      e,d
  22++D9EB 0E 00       >                        ld      c,0;ld      d,0
  23++D9ED              .AddSpeedToY:           AddSpeedToVert UBnKylo
  23++D9ED ED 5B 24 C0 >                        ld      de,(UBnKylo+1)
  23++D9F1 3A 23 C0    >                        ld      a,(UBnKylo)
  23++D9F4 6F          >                        ld      l,a
  23++D9F5 CD F2 00    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  23++D9F8 7D          >                        ld      a,l
  23++D9F9 32 23 C0    >                        ld      (UBnKylo),a
  23++D9FC ED 53 24 C0 >                        ld      (UBnKylo+1),de
  24++DA00              .ApplyToZ:              SpeedMulAxis    iyl, UBnkrotmatNosevZ
  24++DA00 FD 5D       >                        ld      e,iyl
  24++DA02 2A 39 C0    >                        ld      hl,(UBnkrotmatNosevZ)
  24++DA05 7C          >                        ld      a,h
  24++DA06             >                        ClearSignBitA
  24++DA06 E6 7F       >                        and     SignMask8Bit
  24++DA08 57          >                        ld      d,a
  24++DA09 ED 30       >                        mul     de
  24++DA0B 7C          >                        ld      a,h
  24++DA0C             >                        SignBitOnlyA
  24++DA0C E6 80       >                        and     SignOnly8Bit
  24++DA0E 47          >                        ld      b,a;ld      c,a
  24++DA0F 62          >                        ld      h,d;ld      e,d
  24++DA10 0E 00       >                        ld      c,0;ld      d,0
  25++DA12              .AddSpeedToZ:           AddSpeedToVert UBnKzlo
  25++DA12 ED 5B 27 C0 >                        ld      de,(UBnKzlo+1)
  25++DA16 3A 26 C0    >                        ld      a,(UBnKzlo)
  25++DA19 6F          >                        ld      l,a
  25++DA1A CD F2 00    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  25++DA1D 7D          >                        ld      a,l
  25++DA1E 32 26 C0    >                        ld      (UBnKzlo),a
  25++DA21 ED 53 27 C0 >                        ld      (UBnKzlo+1),de
  26++DA25 C9                                   ret
  27++DA26
# file closed: ././Universe/Ships/ApplyShipSpeed.asm
1349+ DA26                          INCLUDE "./ModelRender/DrawLines.asm"
# file opened: ././ModelRender/DrawLines.asm
   1++DA26
   2++DA26
   3++DA26              ; ---------------------------------------------------------------------------------------------------------------------------------
   4++DA26 00           DrawLinesCounter		db	0
   5++DA27              ; Initial tests look OK
   6++DA27              LL155:;
   7++DA27              ClearLine:                                  ; CLEAR LINEstr visited by EE31 when XX3 heap ready to draw/erase lines in XX19 heap.
   8++DA27                    ;break                                                                             ; ObjectInFront:
   9++DA27 3E 65        DrawLines:              ld	a,$65 ; DEBUG
  10++DA29 FD 6F                                ld    iyl,a							; set ixl to colour (assuming we come in here with a = colour to draw)
  11++DA2B 3A EA C3                             ld	a,(UbnkLineArrayLen)			; get number of lines
  12++DA2E                                      ReturnIfAIsZero   						; No lines then bail out.
  12++DA2E A7          >                        and     a
  12++DA2F C8          >                        ret     z
  13++DA30 FD 67                                ld	iyh,a			                ; number of lines still to draw
  14++DA32 21 30 C2                             ld	hl,UbnkLineArray
  15++DA35 4E           .DrawLinesLoop:         ld    c,(hl)                          ; (XX19),Y c = varX1
  16++DA36 23                                   inc   hl
  17++DA37 46                                   ld    b,(hl)                          ; bc = point1 Y,X
  18++DA38 23                                   inc   hl
  19++DA39 5E                                   ld    e,(hl)                          ; c = varX1
  20++DA3A 23                                   inc   hl
  21++DA3B 56                                   ld    d,(hl)                          ; de = point2 Y,X
  22++DA3C 23                                   inc   hl
  23++DA3D E5 FD E5                             push  hl,,iy
  24++DA40 60                                   ld    h,b
  25++DA41 69                                   ld    l,c
  26++DA42                ;  call    l2_draw_any_line                ; call version of LOIN that used BCDE
  27++DA42 FD 7D                                ld	a,iyl							; get colour back before calling line draw
  28++DA44                                      MMUSelectLayer2
  28++DA44 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  29++DA48 CD 0E FF                             call  LineHLtoDE
  30++DA4B FD E1 E1                             pop   hl,,iy
  31++DA4E FD 25                                dec   iyh
  32++DA50 20 E3                                jr	nz, .DrawLinesLoop
  33++DA52 C9                                   ret                                     ; --- Wireframe end  \ LL118-1
  34++DA53
  35++DA53
  36++DA53 3E 65        DrawLinesLateClipping:  ld	a,$65 ; DEBUG
  37++DA55 FD 6F                                ld    iyl,a					      ; set ixl to colour (assuming we come in here with a = colour to draw)
  38++DA57 3A EA C3                             ld	a,(UbnkLineArrayLen)			; get number of lines
  39++DA5A                                      ReturnIfAIsZero   				; No lines then bail out.
  39++DA5A A7          >                        and     a
  39++DA5B C8          >                        ret     z
  40++DA5C FD 67                                ld	iyh,a			                  ; number of lines still to draw
  41++DA5E 21 30 C2                             ld	hl,UbnkLineArray
  42++DA61                                      MMUSelectLayer2
  42++DA61 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43++DA65 3E BF                                ld    a,$BF
  44++DA67 32 B5 E2                             ld    (line_gfx_colour),a
  45++DA6A 11 D4 F5     LateDrawLinesLoop:      ld    de,x1
  46++DA6D                                      FourLDIInstrunctions
  46++DA6D ED A0       >                        ldi
  46++DA6F ED A0       >                        ldi
  46++DA71 ED A0       >                        ldi
  46++DA73 ED A0       >                        ldi
  47++DA75                                      FourLDIInstrunctions
  47++DA75 ED A0       >                        ldi
  47++DA77 ED A0       >                        ldi
  47++DA79 ED A0       >                        ldi
  47++DA7B ED A0       >                        ldi
  48++DA7D E5 FD E5                             push  hl,,iy
  49++DA80                                      //call  l2_draw_clipped_line
  50++DA80                                      //call  l2_draw_elite_line
  51++DA80 CD 67 FC                             call    l2_draw_6502_line
  52++DA83 DA A9 DA                             jp      c,LateNoLineToDraw
  53++DA86
  54++DA86 E5 C5 D5 FD  PreLate:                push    hl,,bc,,de,,iy
  54++DA8A E5
  55++DA8B 3A D4 F5                             ld      a,(x1)
  56++DA8E 4F                                   ld      c,a
  57++DA8F 3A D6 F5                             ld      a,(y1)
  58++DA92 47                                   ld      b,a
  59++DA93 3A D8 F5                             ld      a,(x2)
  60++DA96 5F                                   ld      e,a
  61++DA97 3A DA F5                             ld      a,(y2)
  62++DA9A 57                                   ld      d,a
  63++DA9B                                      ; bc = y0,x0 de=y1,x1,a=color)
  64++DA9B 3E D5                                ld	    a, $D5 ; colour
  65++DA9D                                      MMUSelectLayer2
  65++DA9D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  66++DAA1 CD A7 FC     LateLine:               call    l2_draw_elite_line; l2_draw_diagonal
  67++DAA4 FD E1 D1 C1                          pop     hl,,bc,,de,,iy
  67++DAA8 E1
  68++DAA9
  69++DAA9
  70++DAA9 FD E1 E1     LateNoLineToDraw:       pop   hl,,iy
  71++DAAC FD 25                                dec   iyh
  72++DAAE 20 BA                                jr	nz, LateDrawLinesLoop
  73++DAB0 C9                                   ret                                     ; --- Wireframe end  \ LL118-1
# file closed: ././ModelRender/DrawLines.asm
1350+ DAB1              ; ---------------------------------------------------------------------------------------------------------------------------------
1351+ DAB1
1352+ DAB1              ; DIot seem to lawyas have Y = 0???
1353+ DAB1              ProcessDot:            ; break
1354+ DAB1 CD D6 CC                             call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1355+ DAB4 CD 36 7A                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1356+ DAB7 CD 8E CF                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1357+ DABA CD 5B CE                             call    InverseXX16                      ;#11; Invert rotation matrix
1358+ DABD 21 00 00                             ld      hl,0
1359+ DAC0 22 A6 C0                             ld      (UBnkXScaled),hl
1360+ DAC3 22 A8 C0                             ld      (UBnkYScaled),hl
1361+ DAC6 22 AA C0                             ld      (UBnkZScaled),hl
1362+ DAC9 AF                                   xor     a
1363+ DACA CD 98 79                             call    XX12EquNodeDotOrientation
1364+ DACD CD FF CC                             call    TransposeXX12ByShipToXX15
1365+ DAD0 CD 7C CD                             call    ScaleNodeTo8Bit                     ; scale to 8 bit values, why don't we hold the magnitude here?x
1366+ DAD3 FD 21 F0 C0                          ld      iy,UBnkNodeArray
1367+ DAD7 CD 84 D5                             call    ProjectNodeToEye
1368+ DADA C9                                   ret
1369+ DADB
1370+ DADB              ; .....................................................
1371+ DADB              ; Plot Node points as part of debugging
1372+ DADB 3A FF C3     PlotAllNodes:           ld      a,(VertexCtX6Addr)               ; get Hull byte#9 = number of vertices *6                                   ;;;
1373+ DADE 4F           .GetActualVertexCount:  ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1374+ DADF 4F                                   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1375+ DAE0 16 06                                ld      d,6
1376+ DAE2 CD FC 94                             call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1377+ DAE5 41                                   ld      b,c                              ; c = number of vertices
1378+ DAE6 FD 21 F0 C0                          ld      iy,UBnkNodeArray
1379+ DAEA FD 5E 00     .PlotLoop:              ld      e,(iy)
1380+ DAED FD 56 01                             ld      d,(iy+1)
1381+ DAF0 FD 6E 02                             ld      l,(iy+2)
1382+ DAF3 FD 66 03                             ld      h,(iy+3)
1383+ DAF6 C5 FD E5                             push    bc,,iy
1384+ DAF9 CD 0A DB                             call    PlotAtDEHL
1385+ DAFC FD E1 C1                             pop     bc,,iy
1386+ DAFF FD 23                                inc     iy
1387+ DB01 FD 23                                inc     iy
1388+ DB03 FD 23                                inc     iy
1389+ DB05 FD 23                                inc     iy
1390+ DB07 10 E1                                djnz    .PlotLoop
1391+ DB09 C9                                   ret
1392+ DB0A
1393+ DB0A 7A           PlotAtDEHL:             ld      a,d
1394+ DB0B A7                                   and     a
1395+ DB0C C0                                   ret     nz
1396+ DB0D 7C                                   ld      a,h
1397+ DB0E A7                                   and     a
1398+ DB0F C0                                   ret     nz
1399+ DB10 7D                                   ld      a,l
1400+ DB11 E6 80                                and     $80
1401+ DB13 C0                                   ret     nz
1402+ DB14                                      MMUSelectLayer2
1402+ DB14 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1403+ DB18 45                                   ld      b,l
1404+ DB19 4B                                   ld      c,e
1405+ DB1A 3E 88                                ld      a,$88
1406+ DB1C CD B6 E2                             call    l2_plot_pixel
1407+ DB1F C9                                   ret
1408+ DB20
1409+ DB20
1410+ DB20              ; .....................................................
1411+ DB20              ; Process Nodes does the following:
1412+ DB20              ; for each node:
1413+ DB20              ;     see if node >
1414+ DB20 00           PNXX20DIV6          DB      0
1415+ DB21 00 00        PNVERTEXPTR         DW      0   ; DEBUG WILL USE LATER
1416+ DB23 00 00        PNNODEPRT           DW      0   ; DEBUG WILL USE LATER
1417+ DB25 00           PNLASTNORM          DB      0
1418+ DB26              ProcessNodes:           ZeroA
1418+ DB26 AF          >                        xor a
1419+ DB27 32 EA C3                             ld      (UbnkLineArrayLen),a
1420+ DB2A CD D6 CC                             call    CopyRotmatToTransMat ; CopyRotToTransMacro                      ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1421+ DB2D CD 36 7A                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1422+ DB30 CD 8E CF                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1423+ DB33 CD 5B CE                             call    InverseXX16                      ;#11; Invert rotation matrix
1424+ DB36 21 11 C4                             ld      hl,UBnkHullVerticies
1425+ DB39 3A FF C3                             ld      a,(VertexCtX6Addr)               ; get Hull byte#9 = number of vertices *6                                   ;;;
1426+ DB3C 4F           GetActualVertexCount:   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1427+ DB3D 4F                                   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1428+ DB3E 16 06                                ld      d,6
1429+ DB40 CD FC 94                             call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1430+ DB43 41                                   ld      b,c                              ; c = number of vertices
1431+ DB44 FD 21 F0 C0                          ld      iy,UBnkNodeArray
1432+ DB48              LL48:
1433+ DB48 C5           PointLoop:              push    bc                                  ; save counters
1434+ DB49 E5                                   push    hl                                  ; save verticies list pointer
1435+ DB4A FD E5                                push    iy                                  ; save Screen plot array pointer
1436+ DB4C 78                                   ld      a,b
1437+ DB4D                                      ;break
1438+ DB4D CD 05 D5                             call    CopyNodeToXX15                      ; copy verices at hl to xx15
1439+ DB50 3A A7 C0                             ld      a,(UBnkXScaledSign)
1440+ DB53 CD 98 79                             call    XX12EquNodeDotOrientation
1441+ DB56 CD FF CC                             call    TransposeXX12ByShipToXX15
1442+ DB59 CD 7C CD                             call    ScaleNodeTo8Bit                     ; scale to 8 bit values, why don't we hold the magnitude here?x
1443+ DB5C FD E1                                pop     iy                                  ; get back screen plot array pointer
1444+ DB5E CD 84 D5                             call    ProjectNodeToEye                     ; set up screen plot list entry
1445+ DB61                 ; ld      hl,UbnkLineArrayLen
1446+ DB61                ;  inc     (hl)                                ; another node done
1447+ DB61 FD E5        ReadyForNextPoint:      push    iy                                  ; copy screen plot pointer to hl
1448+ DB63 E1                                   pop     hl
1449+ DB64 3E 04                                ld      a,4
1450+ DB66 ED 31                                add     hl,a
1451+ DB68 E5                                   push    hl                                  ; write it back at iy + 4
1452+ DB69 FD E1                                pop     iy                                  ; and put it in iy again
1453+ DB6B E1                                   pop     hl                                  ; get hl back as vertex list
1454+ DB6C 3E 06                                ld      a,6
1455+ DB6E ED 31                                add     hl,a                                ; and move to next vertex
1456+ DB70 C1                                   pop     bc                                  ; get counter back
1457+ DB71 10 D5                                djnz    PointLoop
1458+ DB73              ; ......................................................
1459+ DB73                                      ClearCarryFlag
1459+ DB73 B7          >                        or a
1460+ DB74 C9                                   ret
1461+ DB75              ; ...........................................................
1462+ DB75 CD 89 D1     ProcessShip:            call    CheckVisible                ; checks for z -ve and outside view frustrum, sets up flags for next bit
1463+ DB78 3A 54 C0     .IsItADot:              ld      a,(UBnkaiatkecm)
1464+ DB7B E6 68                                and     ShipIsVisible | ShipIsDot | ShipExploding  ; first off set if we can draw or need to update explosion
1465+ DB7D C8                                   ret     z                           ; if none of these flags are set we can fast exit
1466+ DB7E                                      JumpOnABitSet ShipExplodingBitNbr, .ExplodingCloud; we always do the cloud processing even if invisible
1466+ DB7E CB 6F       >                        bit 	ShipExplodingBitNbr, a
1466+ DB80 C2 C1 DB    >                        jp      nz,.ExplodingCloud
1467+ DB83              ;............................................................
1468+ DB83              .DetermineDrawType:     ReturnOnBitClear    a, ShipIsVisibleBitNbr          ; if its not visible exit early
1468+ DB83 CB 77       >                        bit 	ShipIsVisibleBitNbr,a
1468+ DB85 C8          >                        ret		z
1469+ DB86                                      JumpOnABitClear ShipIsDotBitNbr, .CarryOnWithDraw   ; if not dot do normal draw
1469+ DB86 CB 5F       >                        bit 	ShipIsDotBitNbr, a
1469+ DB88 CA AF DB    >                        jp      z,.CarryOnWithDraw
1470+ DB8B              ;............................................................
1471+ DB8B CD B1 DA     .itsJustADot:           call    ProcessDot
1472+ DB8E                                      SetMemBitN  UBnkaiatkecm , ShipIsDotBitNbr ; set is a dot flag
1472+ DB8E 21 54 C0    >                        ld      hl,UBnkaiatkecm
1472+ DB91 CB DE       >                        set     ShipIsDotBitNbr,(hl)
1473+ DB93 ED 4B F0 C0                          ld      bc,(UBnkNodeArray)          ; if its at dot range get X
1474+ DB97 ED 5B F2 C0                          ld      de,(UBnkNodeArray+2)        ; and Y
1475+ DB9B 78                                   ld      a,b                         ; if high byte components are not 0 then off screen
1476+ DB9C B2                                   or      d                           ;
1477+ DB9D C0                                   ret     nz                          ;
1478+ DB9E 7B                                   ld      a,e
1479+ DB9F E6 80                                and     %10000000                   ; check to see if Y > 128
1480+ DBA1 C0                                   ret     nz
1481+ DBA2 43                                   ld      b,e                         ; now b = y and c = x
1482+ DBA3 3E FF                                ld      a,L2ColourWHITE_1           ; just draw a pixel
1483+ DBA5 3E E0                                ld      a,224
1484+ DBA7                                      MMUSelectLayer2                     ; then go to update radar
1484+ DBA7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1485+ DBAB CD F8 E2                             call    ShipPixel                   ;
1486+ DBAE C9                                   ret
1487+ DBAF              ;............................................................
1488+ DBAF CD 26 DB     .CarryOnWithDraw:       call    ProcessNodes                ; process notes is the poor performer or check distnace is not culling
1489+ DBB2                                     ; break
1490+ DBB2                                  IFDEF PLOTPOINTSONLY
1491+ DBB2 ~                                    ld      a,$F6
1492+ DBB2 ~                                    ld      (line_gfx_colour),a
1493+ DBB2 ~                                    call    PlotAllNodes
1494+ DBB2                                  ELSE
1495+ DBB2 3E E3                                ld      a,$E3
1496+ DBB4 32 B5 E2                             ld      (line_gfx_colour),a
1497+ DBB7 CD D0 D1                             call    CullV2
1498+ DBBA CD 69 DD                             call    PrepLines                       ; With late clipping this just moves the data to the line array which is now x2 size
1499+ DBBD CD 53 DA                             call    DrawLinesLateClipping
1500+ DBC0                                  ENDIF
1501+ DBC0                                  IFDEF OVERLAYNODES
1502+ DBC0 ~                                    ld      a,$CF
1503+ DBC0 ~                                    ld      (line_gfx_colour),a
1504+ DBC0 ~                                    call    PlotAllNodes
1505+ DBC0                                  ENDIF
1506+ DBC0                                  IFDEF FLIPBUFFERSTEST
1507+ DBC0 ~                                    DISPLAY "Univ_ship_data flip buffer test Enabled"
1508+ DBC0 ~                                    call   l2_flip_buffers
1509+ DBC0 ~                                    call   l2_flip_buffers
1510+ DBC0                                  ELSE
1511+ DBC0                                      DISPLAY "Univ_ship_data flip buffer test Disabled"
1512+ DBC0                                  ENDIF
1513+ DBC0 C9                                   ret
1514+ DBC1              ;............................................................
1515+ DBC1 CD 26 DB     .ExplodingCloud:        call    ProcessNodes
1516+ DBC4                                      ClearMemBitN  UBnkaiatkecm, ShipKilledBitNbr ; acknowledge ship exploding
1516+ DBC4 21 54 C0    >                        ld      hl,UBnkaiatkecm
1516+ DBC7 CB A6       >                        res     ShipKilledBitNbr,(hl)
1517+ DBC9 3A 5F C0     .UpdateCloudCounter:    ld      a,(UBnKCloudCounter)        ; counter += 4 until > 255
1518+ DBCC C6 04                                add     4                           ; we do this early as we now have logic for
1519+ DBCE DA 90 DC                             jp      c,.FinishedExplosion        ; display or not later
1520+ DBD1 32 5F C0                             ld      (UBnKCloudCounter),a        ; .
1521+ DBD4              .SkipHiddenShip:        ReturnOnMemBitClear  UBnkaiatkecm , ShipIsVisibleBitNbr
1521+ DBD4 3A 54 C0    >                        ld     a,(UBnkaiatkecm)
1521+ DBD7 CB 77       >                        bit 	ShipIsVisibleBitNbr,a
1521+ DBD9 C8          >                        ret		z
1522+ DBDA              .IsShipADot:            JumpOnABitSet ShipIsDotBitNbr, .itsJustADot ; if its dot distance then explosion is a dot, TODO later we will do as a coloured dot
1522+ DBDA CB 5F       >                        bit 	ShipIsDotBitNbr, a
1522+ DBDC C2 8B DB    >                        jp      nz,.itsJustADot
1523+ DBDF 2A 26 C0     .CalculateZ:            ld      hl,(UBnKzlo)                ; al = hl = z
1524+ DBE2 7C                                   ld      a,h                         ; .
1525+ DBE3                                      JumpIfALTNusng 32,.CalcFromZ        ; if its >= 32 then set a to FE and we are done
1525+ DBE3 FE 20       >                        cp      32
1525+ DBE5 DA ED DB    >                        jp		c, .CalcFromZ
1526+ DBE8 26 FE                                ld      h,$FE                       ; .
1527+ DBEA C3 F8 DB                             jp      .DoneZDist                  ; .
1528+ DBED              .CalcFromZ:             ShiftHLLeft1                        ; else
1528+ DBED CB 25       >			   sla l
1528+ DBEF CB 14       >			   rl  h
1529+ DBF1                                      ShiftHLLeft1                        ; hl = hl * 2
1529+ DBF1 CB 25       >			   sla l
1529+ DBF3 CB 14       >			   rl  h
1530+ DBF5                                      SetCarryFlag                        ; h = h * 3 rolling in lower bit
1530+ DBF5 37          >                        scf
1531+ DBF6 CB 14                                rl  h                               ;
1532+ DBF8 06 00        .DoneZDist:             ld      b,0                         ; bc = cloud z distance calculateed
1533+ DBFA 4C                                   ld      c,h                         ; .
1534+ DBFB 3A 5F C0     .CalcCloudRadius:       ld      a,(UBnKCloudCounter)        ; de = cloud counter * 256
1535+ DBFE                      IFDEF LOGMATHS
1536+ DBFE ~                                    MMUSelectMathsTables
1537+ DBFE ~                                    ld      b,h
1538+ DBFE ~                                    call    AEquAmul256DivBLog
1539+ DBFE ~                                    ld      d,a
1540+ DBFE ~                                    MMUSelectROM0
1541+ DBFE                      ELSE
1542+ DBFE 57                                   ld      d,a                         ;
1543+ DBFF 1E 00                                ld      e,0                         ;
1544+ DC01 CD 40 94                             call    DEequDEDivBC                ; de = cloud counter * 256 / z distance
1545+ DC04 7A                                   ld      a,d                         ; if radius >= 28
1546+ DC05                      ENDIF
1547+ DC05                                      JumpIfALTNusng  28,.SetCloudRadius  ; then set raidus in d to $FE
1547+ DC05 FE 1C       >                        cp      28
1547+ DC07 DA 0F DC    >                        jp		c, .SetCloudRadius
1548+ DC0A 16 FE        .MaxCloudRadius:        ld      d,$FE                       ;
1549+ DC0C C3 1B DC                             jp      .SizedUpCloud               ;
1550+ DC0F              .SetCloudRadius:        ShiftDELeft1                        ; de = 8 * de
1550+ DC0F CB 23       >			   sla e
1550+ DC11 CB 12       >			   rl  d
1551+ DC13                                      ShiftDELeft1                        ; .
1551+ DC13 CB 23       >			   sla e
1551+ DC15 CB 12       >			   rl  d
1552+ DC17                                      ShiftDELeft1                        ; .
1552+ DC17 CB 23       >			   sla e
1552+ DC19 CB 12       >			   rl  d
1553+ DC1B 7A           .SizedUpCloud:          ld      a,d                         ; cloudradius = a = d or (cloudcounter * 8 / 256)
1554+ DC1C 32 60 C0                             ld      (UBnKCloudRadius),a         ; .
1555+ DC1F DD 67                                ld      ixh,a                       ; ixh = a = calculated cloud radius
1556+ DC21 3A 5F C0     .CalcSubParticleColour: ld      a,(UBnKCloudCounter)        ; colur fades away
1557+ DC24 ED 23                                swapnib                             ; divive by 16
1558+ DC26 E6 0F                                and     $0F                         ; mask off upper bytes
1559+ DC28 CB 2F                                sra     a                           ; divide by 32
1560+ DC2A 21 9C DC                             ld      hl,DebrisColourTable
1561+ DC2D ED 31                                add     hl,a
1562+ DC2F 7E                                   ld      a,(hl)
1563+ DC30 FD 6F                                ld      iyl,a                       ; iyl = pixel colours
1564+ DC32 3A 5F C0     .CalcSubParticleCount:  ld      a,(UBnKCloudCounter)        ; cloud counter = abs (cloud counter) in effect if > 127 then shrinks it
1565+ DC35                                      ABSa2c                              ; a = abs a
1565+ DC35 CB 7F       >                        bit     7,a
1565+ DC37 CA 3C DC    >                        jp      z,.DoneABSa
1565+ DC3A ED 44       >                        neg
1565+ DC3C             >.DoneABSa:
1566+ DC3C CB 2F        .ParticlePositive:      sra a                               ; iyh = (a /8)
1567+ DC3E CB 2F                                sra a                               ; .
1568+ DC40 CB 2F                                sra a                               ; .
1569+ DC42 F6 01                                or  1                               ; bit 0 set so minimum 1
1570+ DC44 DD 6F        .DoneSubParticleCount:  ld      ixl,a                       ; ixl = nbr particles per vertex
1571+ DC46 3A FE C3     .ForEachVertex:         ld      a,(VertexCountAddr)         ; load vertex count into b
1572+ DC49 47                                   ld      b,a                         ; .
1573+ DC4A 21 F0 C0                             ld      hl,UBnkNodeArray            ; hl = list of vertices
1574+ DC4D C5 E5        .ExplosionVertLoop:     push    bc,,hl                      ; save vertex counter in b and pointer to verticles in hl
1575+ DC4F DD 68                                    ld      ixl,b                   ; save counter
1576+ DC51 4E                                       ld      c,(hl)                  ; get vertex into bc and de
1577+ DC52 23                                       inc     hl                      ; .
1578+ DC53 46                                       ld      b,(hl)                  ; .
1579+ DC54 23                                       inc     hl                      ; .
1580+ DC55 5E                                       ld      e,(hl)                  ; .
1581+ DC56 23                                       inc     hl                      ; .
1582+ DC57 56                                       ld      d,(hl)                  ; now hl is done with and we can use it
1583+ DC58 DD 7D        .LoopSubParticles:          ld      a,ixl                   ; iyh = loop iterator for nbr of particles per vertex
1584+ DC5A FD 67                                    ld      iyh,a                   ;
1585+ DC5C                                          ;break
1586+ DC5C D5 C5        .ProcessAParticle:          push    de,,bc                  ; save y then x coordinates
1587+ DC5E EB                                           ex      de,hl               ; hl = de (Y)
1588+ DC5F DD 54                                        ld      d,ixh               ; d = cloud radius
1589+ DC61 CD A4 DC                                     call    HLEquARandCloud     ; vertex = vertex +/- (random * projected cloud side /256)
1590+ DC64 7C                                           ld      a,h                 ; if off screen skip
1591+ DC65                                              JumpIfAIsNotZero  .NextIteration
1591+ DC65 A7          >                        and     a
1591+ DC66 C2 81 DC    >                        jp	    nz,.NextIteration
1592+ DC69 EB                                           ex      de,hl               ; de = result for y which was put into hl
1593+ DC6A E1                                           pop     hl                  ; get x back from bc on stack
1594+ DC6B E5                                           push    hl                  ; put bc (which is now in hl) back on the stack
1595+ DC6C D5                                           push    de                  ; save de
1596+ DC6D DD 54                                        ld      d,ixh               ; d = cloud radius
1597+ DC6F CD A4 DC                                     call    HLEquARandCloud     ; vertex = vertex +/- (random * projected cloud side /256)
1598+ DC72 D1                                           pop     de                  ; get de back doing pop here clears stack up
1599+ DC73 7C                                           ld      a,h                 ; if high byte has a value then off screen
1600+ DC74                                              JumpIfAIsNotZero .NextIteration ;
1600+ DC74 A7          >                        and     a
1600+ DC75 C2 81 DC    >                        jp	    nz,.NextIteration
1601+ DC78 43                                           ld      b,e                 ; bc = y x of pixel from e and c regs
1602+ DC79 4D                                           ld      c,l                 ; iyl already has colour
1603+ DC7A                                              MMUSelectLayer2             ; plot it with debris code as this can chop y > 128
1603+ DC7A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1604+ DC7E CD 00 E3                                     call    DebrisPixel         ; .
1605+ DC81 C1 D1        .NextIteration:             pop    de,,bc                   ; ready for next iteration, get back y and x coordinates
1606+ DC83 FD 25                                    dec    iyh                      ; one partcile done
1607+ DC85 20 D5                                    jr      nz,.ProcessAParticle    ; until all done
1608+ DC87 E1 C1        .NextVert:              pop     bc,,hl                      ; recover loop counter and source pointer
1609+ DC89 3E 04                                ld      a,4                         ; move to next vertex group
1610+ DC8B ED 31                                add     hl,a                        ;
1611+ DC8D 10 BE                                djnz    .ExplosionVertLoop          ;
1612+ DC8F C9                                   ret
1613+ DC90              .FinishedExplosion:     ;break
1614+ DC90 3A 3F C0                             ld      a,(UBnKSlotNumber)          ; get slot number
1615+ DC93 CD 66 83                             call    ClearSlotA                  ; gauranted to be in main memory as non bankables
1616+ DC96                                      ClearMemBitN UBnkaiatkecm, ShipExplodingBitNbr
1616+ DC96 21 54 C0    >                        ld      hl,UBnkaiatkecm
1616+ DC99 CB AE       >                        res     ShipExplodingBitNbr,(hl)
1617+ DC9B C9                                   ret
1618+ DC9C
1619+ DC9C
1620+ DC9C FC D8 B4 90  DebrisColourTable:      DB L2ColourYELLOW_1, L2ColourYELLOW_2, L2ColourYELLOW_3, L2ColourYELLOW_4, L2ColourYELLOW_5, L2ColourYELLOW_6, L2ColourYELLOW_7,L2ColourGREY_4
1620+ DCA0 6C 48 24 25
1621+ DCA4                                      ; set flags and signal to remove from slot list
1622+ DCA4
1623+ DCA4              ; Hl = HlL +/- (Random * projected cloud size)
1624+ DCA4              ; In - d = z distance, hl = vert hi lo
1625+ DCA4              ; Out hl = adjusted distance
1626+ DCA4              ; uses registers hl, de
1627+ DCA4 E5           HLEquARandCloud:        push    hl                          ; random number geneator upsets hl register
1628+ DCA5 CD 37 84                             call    doRandom                    ; a= random * 2
1629+ DCA8 E1                                   pop     hl
1630+ DCA9 17                                   rla                                 ;
1631+ DCAA 38 0A                                jr      c,.Negative                 ; if buit 7 went into carry
1632+ DCAC 5F           .Positive:              ld  e,a
1633+ DCAD ED 30                                mul
1634+ DCAF 5A                                   ld  e,d
1635+ DCB0 16 00                                ld  d,0
1636+ DCB2                                      ClearCarryFlag
1636+ DCB2 B7          >                        or a
1637+ DCB3 ED 5A                                adc     hl,de                       ; hl = hl + a
1638+ DCB5 C9                                   ret
1639+ DCB6 5F           .Negative:              ld  e,a
1640+ DCB7 ED 30                                mul
1641+ DCB9 5A                                   ld  e,d
1642+ DCBA 16 00                                ld  d,0
1643+ DCBC                                      ClearCarryFlag
1643+ DCBC B7          >                        or a
1644+ DCBD ED 52                                sbc     hl,de                       ; hl = hl + a
1645+ DCBF C9                                   ret
1646+ DCC0
1647+ DCC0              GetExperiencePoints:    ; TODO calculate experience points
1648+ DCC0                                      ; TODO mission updates check
1649+ DCC0 C9                                   ret
1650+ DCC1
1651+ DCC1              ; ......................................................
1652+ DCC1 3A 0D C4     KillShip:               ld      a,(ShipTypeAddr)            ; we can't destroy stations in a collision
1653+ DCC4 FE 02                                cp      ShipTypeStation             ; for destructable one we will have a special type of ship
1654+ DCC6 C8                                   ret     z
1655+ DCC7 3A 54 C0                             ld      a,(UBnkaiatkecm)            ; remove AI, mark killed, mark exploding
1656+ DCCA F6 30                                or      ShipExploding | ShipKilled  ; .
1657+ DCCC E6 7F                                and     ShipAIDisabled              ; .
1658+ DCCE 32 54 C0                             ld      (UBnkaiatkecm),a            ; .
1659+ DCD1                                      SetMemToN   UBnKexplDsp, ShipExplosionDuration ; set debris cloud timer, also usered in main to remove from slots
1659+ DCD1 3E 4B       >                        ld      a,ShipExplosionDuration
1659+ DCD3 32 51 C0    >                        ld      (UBnKexplDsp),a
1660+ DCD6                                      ldWriteZero UBnKEnergy              ; Zero ship energy
1660+ DCD6 AF          >                        xor      a
1660+ DCD7 32 58 C0    >                        ld       (UBnKEnergy),a
1661+ DCDA 32 60 C0                             ld      (UBnKCloudRadius),a
1662+ DCDD 3E 12                                ld      a,18
1663+ DCDF 32 5F C0                             ld      (UBnKCloudCounter),a        ; Zero cloud
1664+ DCE2                                      ; TODO logic to spawn cargo/plates goes here
1665+ DCE2 C9                                   ret
1666+ DCE3
1667+ DCE3              ; in a = damage
1668+ DCE3 47           DamageShip:             ld      b,a                         ; b = a = damage comming in
1669+ DCE4 3A 0D C4                             ld      a,(ShipTypeAddr)            ; we can't destroy stations in a collision
1670+ DCE7 FE 02                                cp      ShipTypeStation             ; for destructable one we will have a special type of ship
1671+ DCE9 C8                                   ret     z
1672+ DCEA 3A 58 C0                             ld      a,(UBnKEnergy)              ; get current energy level
1673+ DCED                                      ClearCarryFlag
1673+ DCED B7          >                        or a
1674+ DCEE 98                                   sbc     a,b                         ; subtract damage
1675+ DCEF D2 F6 DC     .Overkilled:            jp      nc,.DoneDamage              ; if no carry then its not gone negative
1676+ DCF2 CD C1 DC                             call    KillShip                    ; else kill it
1677+ DCF5 C9                                   ret
1678+ DCF6 32 58 C0     .DoneDamage:            ld      (UBnKEnergy),a
1679+ DCF9 C9                                   ret
1680+ DCFA              ; need recovery for energy too
1681+ DCFA              ; Shall we have a "jolt ship off course routine for when it gets hit by a blast or collision)
1682+ DCFA
1683+ DCFA              ;-LL49-----------------------------------------------------------------------------------------------------------------------------
1684+ DCFA              ;  Entering Here we have the following:
1685+ DCFA              ;  XX15(1 0) = vertex x-coordinate but sign not populated
1686+ DCFA              ;  XX15(3 2) = vertex y-coordinate but sign not populated
1687+ DCFA              ;  XX15(5 4) = vertex z-coordinate but sign not populated
1688+ DCFA              ;
1689+ DCFA              ;  XX16(  1 0)sidev_x   (3 2)roofv_x   (5 4)nosev_x
1690+ DCFA              ;  XX16(  7 6)sidev_y   (9 8)roofv_y (11 10)nosev_y
1691+ DCFA              ;  XX16(13 12)sidev_z (15 14)roofv_z (17 16)nosev_z
1692+ DCFA              ;--------------------------------------------------------------------------------------------------------
1693+ DCFA              AddLaserBeamLine:
1694+ DCFA              ; this code is a bag of shit and needs re-writing
1695+ DCFA              GetGunVertexNode:
1696+ DCFA 3A FC C3             ld          a,(GunVertexAddr)                   ; Hull byte#6, gun vertex*4 (XX0),Y
1697+ DCFD 21 F0 C0             ld          hl,UBnkNodeArray                    ; list of lines to read
1698+ DD00 ED 31                add         hl,a                                ; HL = address of GunVertexOnNodeArray
1699+ DD02 FD 2E 00             ld          iyl,0
1700+ DD05              MoveX1PointToXX15:
1701+ DD05 4E                   ld          c,(hl)                              ;
1702+ DD06 23                   inc         hl
1703+ DD07 46                   ld          b,(hl)                              ; bc = x1 of gun vertex
1704+ DD08 23                   inc         hl
1705+ DD09 ED 43 A6 C0          ld          (UBnkX1),bc
1706+ DD0D 0C                   inc         c
1707+ DD0E C8                   ret         z                                   ; was c 255?
1708+ DD0F 04                   inc         b
1709+ DD10 C8                   ret         z                                   ; was c 255?
1710+ DD11              MoveY1PointToXX15:
1711+ DD11 4E                   ld          c,(hl)                              ;
1712+ DD12 23                   inc         hl
1713+ DD13 46                   ld          b,(hl)                              ; bc = y1 of gun vertex
1714+ DD14 23                   inc         hl
1715+ DD15 ED 43 A8 C0          ld          (UBnkY1),bc
1716+ DD19              SetX2PointToXX15:
1717+ DD19 01 00 00             ld          bc,0                                ; set X2 to 0
1718+ DD1C ED 43 AA C0          ld          (UBnkX2),bc
1719+ DD20 3A 26 C0             ld          a,(UBnKzlo)
1720+ DD23 4F                   ld          c,a
1721+ DD24              SetY2PointToXX15:
1722+ DD24 ED 43 AC C0          ld          (UBnkY2),bc                         ; set Y2to 0
1723+ DD28 3A 22 C0             ld          a,(UBnKxsgn)
1724+ DD2B                      JumpOnBitClear a,7,LL74SkipDec
1724+ DD2B CB 7F       >                        bit 	7,a
1724+ DD2D CA 35 DD    >                        jp      z,LL74SkipDec
1725+ DD30              LL74DecX2:
1726+ DD30 3E FF                ld          a,$FF
1727+ DD32 32 AA C0             ld          (UBnkX2Lo),a                        ; rather than dec (hl) just load with 255 as it will always be that at this code point
1728+ DD35              LL74SkipDec:
1729+ DD35 CD D5 CC             call        ClipLineV3                            ; LL145 \ clip test on XX15 XX12 vector, returns carry
1730+ DD38 38 5A                jr          c,CalculateNewLines
1731+ DD3A              ;        jr          c,CalculateNewLines                 ; LL170 clip returned carry set so not visibile if carry set skip the rest (laser not firing)
1732+ DD3A              ; Here we are usign hl to replace VarU as index
1733+ DD3A 2A 9F 7E             ld          hl,(varU16)
1734+ DD3D 3A A6 C0             ld          a,(UBnKx1Lo)
1735+ DD40 77                   ld          (hl),a
1736+ DD41 23                   inc         hl
1737+ DD42 3A A8 C0             ld          a,(UbnKy1Lo)
1738+ DD45 77                   ld          (hl),a
1739+ DD46 23                   inc         hl
1740+ DD47 3A AA C0             ld          a,(UBnkX2Lo)
1741+ DD4A 77                   ld          (hl),a
1742+ DD4B 23                   inc         hl
1743+ DD4C 3A AC C0             ld          a,(UbnKy2Lo)
1744+ DD4F 77                   ld          (hl),a
1745+ DD50 FD 2C                inc         iyl                                 ; iyl holds as a counter to iterations
1746+ DD52 23                   inc         hl
1747+ DD53 FD 2C                inc         iyl                                 ; ready for next byte
1748+ DD55 22 9F 7E             ld          (varU16),hl
1749+ DD58 C9                   ret
1750+ DD59
1751+ DD59                  DISPLAY "Tracing 7", $
1752+ DD59
1753+ DD59                  INCLUDE "Universe/Ships/PrepLines.asm"
# file opened: ./Universe/Ships/PrepLines.asm
   1++DD59
   2++DD59              ;--------------------------------------------------------------------------------------------------------
   3++DD59                      DISPLAY "Tracing 8", $
   4++DD59
   5++DD59                  INCLUDE "./ModelRender/getVertexNodeAtAToX1Y1.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   1++DD59              ;--------------------------------------------------------------------------------------------------------
   2++DD59              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DD59 21 F0 C0     getVertexNodeAtAToDE:   ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DD5C ED 31                                add         hl,a                                ; hl = address of Node
   5++DD5E 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DD5F ED A0                                ldi                                             ; x1 lo
   7++DD61 ED A0                                ldi                                             ; x1 hi
   8++DD63 ED A0                                ldi                                             ; y1 lo
   9++DD65 ED A0                                ldi                                             ; y1 hi
  10++DD67 C9                                   ret
  11++DD68
  12++DD68              ;getVertexNodeAtAToX1Y1: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
  13++DD68              ;                        add         hl,a                                ; hl = address of Node
  14++DD68              ;                        ld          a,(hl)                              ; get edge list nbr 1 edge
  15++DD68              ;                        ld          de,UBnkX1
  16++DD68              ;                        ldi                                             ; x1 lo
  17++DD68              ;                        ldi                                             ; x1 hi
  18++DD68              ;                        ldi                                             ; y1 lo
  19++DD68              ;                        ldi                                             ; y1 hi
  20++DD68              ;                        ret
  21++DD68
# file closed: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   6++DD68
   7++DD68                      DISPLAY "Tracing 9", $
   8++DD68
   9++DD68                  INCLUDE "./ModelRender/getVertexNodeAtAToX2Y2.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   1++DD68              ;--------------------------------------------------------------------------------------------------------
   2++DD68              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DD68              ;getVertexNodeAtAToX2Y2: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DD68              ;                        add         hl,a                                ; hl = address of Node
   5++DD68              ;                        ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DD68              ;                        ld          de,UBnkX2
   7++DD68              ;                        ldi                                             ; x1 lo
   8++DD68              ;                        ldi                                             ; x1 hi
   9++DD68              ;                        ldi                                             ; y1 lo
  10++DD68              ;                        ldi                                             ; y1 hi
  11++DD68              ;                        ret
# file closed: ././ModelRender/getVertexNodeAtAToX2Y2.asm
  10++DD68                      DISPLAY "Tracing 10", $
  11++DD68
  12++DD68                  INCLUDE "./ModelRender/GetFaceAtA.asm"
# file opened: ././ModelRender/GetFaceAtA.asm
   1++DD68              ;--------------------------------------------------------------------------------------------------------
   2++DD68              GetFaceAtA:         MACRO
   3++DD68 ~                                ld          hl,UbnkFaceVisArray
   4++DD68 ~                                add         hl,a
   5++DD68 ~                                ld          a,(hl)                              ; get face visibility
   6++DD68                                  ENDM
   7++DD68
# file closed: ././ModelRender/GetFaceAtA.asm
  13++DD68                      DISPLAY "Tracing 11", $
  14++DD68
  15++DD68              ;--------------------------------------------------------------------------------------------------------
  16++DD68              ; LL72 Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
  17++DD68               ;   DEFINE NOBACKFACECULL 1
  18++DD68 00           PLEDGECTR           DB          0
  19++DD69
  20++DD69              PrepLines:
  21++DD69              ; FOR NOW BRUTE FORCE IF OFF SCREEN
  22++DD69
  23++DD69              ; TODO add in onced DOEXP is finished
  24++DD69              ;        ld          a,(UBnkexplDsp)                     ; INWK+31  \ display/exploding state|missiles
  25++DD69              ;        JumpOnBitClear  a,5,EE31                        ; bit5 of mask, if zero no explosion
  26++DD69              ;        or          8
  27++DD69              ;        ld          (UBnkexplDsp),a                     ; else else set bit3 to erase old line
  28++DD69              ;        jp          DOEXP                               ; erase using Do Explosion and use implicit return
  29++DD69              ;EE31:                                                   ; no explosion
  30++DD69              ;        JumpOnBitClear  a,3,LL74                        ; clear is hop to do New lines
  31++DD69              ;        call        ClearLine                           ; LL155    \ else erase lines in XX19 heap at LINEstr down
  32++DD69              ;        ld          a, $08                              ; set bit 3 of a and fall into LL74
  33++DD69              ;
  34++DD69              ;--------------------------------------------------------------------------------------------------------
  35++DD69
  36++DD69              InitialiseLineRead:
  37++DD69                      ;break
  38++DD69                      ldWriteZero UbnkLineArrayLen                    ; current line array index = 0
  38++DD69 AF          >                        xor      a
  38++DD6A 32 EA C3    >                        ld       (UbnkLineArrayLen),a
  39++DD6D 32 EB C3             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
  40++DD70 32 68 DD             ld          (PLEDGECTR),a
  41++DD73 3A 00 C4             ld          a,(EdgeCountAddr)
  42++DD76 DD 67                ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
  43++DD78 FD 2E 00             ld          iyl,0                               ; ixl = current edge index
  44++DD7B 21 30 C2             ld          hl,UbnkLineArray                    ; head of array
  45++DD7E 22 9F 7E             ld          (varU16),hl                         ; store current line array pointer un varU16
  46++DD81                      ldCopyByte  EdgeCountAddr, XX17                 ; XX17  = total number of edges to traverse edge counter
  46++DD81 3A 00 C4    >                        ld       a,(EdgeCountAddr)
  46++DD84 32 A3 7E    >                        ld       (XX17),a
  47++DD87 3A 51 C0             ld          a,(UBnKexplDsp)                     ; get explosion status
  48++DD8A                      JumpOnBitClear a,6,CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
  48++DD8A CB 77       >                        bit 	6,a
  48++DD8C CA 94 DD    >                        jp      z,CalculateNewLines
  49++DD8F E6 BF                and         $BF                                 ; else laser is firing, clear bit6.
  50++DD91 32 51 C0             ld          (UBnKexplDsp),a                     ; INWK+31
  51++DD94              ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
  52++DD94              ; NOw we can calculate hull after including laser line
  53++DD94              CalculateNewLines:
  54++DD94              LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
  55++DD94              CheckEdgesForVisibility:
  56++DD94 21 01 C5             ld          hl,UBnkHullEdges
  57++DD97                      ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
  58++DD97 22 A2 7D             ld          (varV),hl                           ; V \ is pointer to where edges data start
  59++DD9A 3A FB C3             ld          a,(LineX4Addr)
  60++DD9D 47                   ld          b,a                                 ; nbr of bytes of edge data
  61++DD9E              LL75Loop:                                               ; count Visible edges
  62++DD9E              IsEdgeInVisibilityRange:
  63++DD9E 2A A2 7D             ld          hl,(varV)
  64++DDA1 E5                   push        hl
  65++DDA2 FD E1                pop         iy
  66++DDA4                     ; DEFINE NOBACKFACECULL 1
  67++DDA4                      IFDEF NOBACKFACECULL
  68++DDA4 ~                        jp          VisibileEdge; DEBUGTODO
  69++DDA4                      ENDIF
  70++DDA4 3A 8E 7D             ld          a,(LastNormalVisible)               ; XX4 is visibility range
  71++DDA7 57                   ld          d,a                                 ; d holds copy of XX4
  72++DDA8              ; Get Edge Byte 0
  73++DDA8 FD 7E 00             ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
  74++DDAB                      JumpIfALTNusng d,LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
  74++DDAB BA          >                        cp      d
  74++DDAC DA 07 DE    >                        jp		c, LL78EdgeNotVisible
  75++DDAF              EdgeMayBeVisibile:
  76++DDAF              ; Get Edge Byte 1
  77++DDAF              IsFace1Visibile:                                        ; edges have 2 faces to test
  78++DDAF FD 7E 01             ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
  79++DDB2 4F                   ld          c,a                                 ;  c = a copy of byte 1
  80++DDB3 E6 0F                and         $0F                                 ;
  81++DDB5                      GetFaceAtA
  81++DDB5 21 D2 C0    >                    ld          hl,UbnkFaceVisArray
  81++DDB8 ED 31       >                    add         hl,a
  81++DDBA 7E          >                    ld          a,(hl)                              ; get face visibility
  82++DDBB              ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
  83++DDBB                      JumpIfAIsNotZero VisibileEdge                     ; LL70 visible edge
  83++DDBB A7          >                        and     a
  83++DDBC C2 D0 DD    >                        jp	    nz,VisibileEdge
  84++DDBF              IsFace2Visibile:
  85++DDBF 79                   ld          a,c                                 ; restore byte 1 from c register
  86++DDC0 ED 23                swapnib                                         ;
  87++DDC2 E6 0F                and         $0F                                 ; swap high byte into low byte
  88++DDC4 E5                   push        hl
  89++DDC5                      GetFaceAtA
  89++DDC5 21 D2 C0    >                    ld          hl,UbnkFaceVisArray
  89++DDC8 ED 31       >                    add         hl,a
  89++DDCA 7E          >                    ld          a,(hl)                              ; get face visibility
  90++DDCB E1                   pop         hl
  91++DDCC                      JumpIfAIsZero LL78EdgeNotVisible                ; edge not visible
  91++DDCC A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  91++DDCD CA 07 DE    >                        jp	    z, LL78EdgeNotVisible
  92++DDD0              VisibileEdge:                                           ; Now we need to node id from bytes 2 - start and 3 - end
  93++DDD0              ;LL79--Visible edge--------------------------------------
  94++DDD0              ; Get Edge Byte 2
  95++DDD0 FD 7E 02             ld          a,(IY+2)                            ; get Node id
  96++DDD3 11 A6 C0             ld          de,UBnkX1
  97++DDD6 CD 59 DD             call        getVertexNodeAtAToDE; getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
  98++DDD9 FD 7E 03             ld          a,(IY+3)
  99++DDDC 11 AA C0             ld          de,UBnkX2
 100++DDDF CD 59 DD             call        getVertexNodeAtAToDE; getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
 101++DDE2
 102++DDE2                      IFDEF       CLIPVersion3
 103++DDE2 ~                        call        ClipLineV3
 104++DDE2 ~                        jr          nc,.SkipBreak1
 105++DDE2 ~                        nop
 106++DDE2 ~                        nop
 107++DDE2 ~                        ;break
 108++DDE2 ~            .SkipBreak1:
 109++DDE2 ~                        jr          c,LL78EdgeNotVisible
 110++DDE2 ~            //COMMENEDOUT FOR LATECLIPPING        ELSE
 111++DDE2 ~            //COMMENEDOUT FOR LATECLIPPING            call        ClipLine
 112++DDE2 ~            //COMMENEDOUT FOR LATECLIPPING            jr          c,LL78EdgeNotVisible                ; LL78 edge not visible
 113++DDE2                      ENDIF
 114++DDE2              LL80:                                                   ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
 115++DDE2                      IFDEF       LATECLIPPING
 116++DDE2 ED 5B 9F 7E                  ld          de,(varU16)                         ; clipped edges heap address
 117++DDE6 21 A6 C0                     ld          hl,UbnkPreClipX1
 118++DDE9                              FourLDIInstrunctions
 118++DDE9 ED A0       >                        ldi
 118++DDEB ED A0       >                        ldi
 118++DDED ED A0       >                        ldi
 118++DDEF ED A0       >                        ldi
 119++DDF1                              FourLDIInstrunctions
 119++DDF1 ED A0       >                        ldi
 119++DDF3 ED A0       >                        ldi
 119++DDF5 ED A0       >                        ldi
 119++DDF7 ED A0       >                        ldi
 120++DDF9 ED 53 9F 7E                  ld          (varU16),de                         ; update U16 with current address
 121++DDFD                      ELSE
 122++DDFD ~                            ld          de,(varU16)                         ; clipped edges heap address
 123++DDFD ~                            ld          hl,UBnkNewX1
 124++DDFD ~                            FourLDIInstrunctions
 125++DDFD ~                            ld          (varU16),de                         ; update U16 with current address
 126++DDFD                      ENDIF
 127++DDFD 21 EA C3             ld          hl,UbnkLineArrayLen                 ; we have loaded one line
 128++DE00 34                   inc         (hl)
 129++DE01 7E                   ld          a,(hl)
 130++DE02                      JumpIfAGTENusng LineArraySize,CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
 130++DE02 FE 32       >                        cp     LineArraySize
 130++DE04 D2 1D DE    >                        jp		nc,CompletedLineGeneration
 131++DE07              ; If we hit here we skip the write of line arryay u16
 132++DE07              LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
 133++DE07              LL78:
 134++DE07 2A A2 7D             ld          hl,(varV)                           ; varV is current edge address
 135++DE0A 3E 04                ld          a,4
 136++DE0C ED 31                add         hl,a
 137++DE0E 22 A2 7D             ld          (varV),hl
 138++DE11 21 68 DD             ld          hl,PLEDGECTR                        ;
 139++DE14 34                   inc         (hl)                                ;
 140++DE15 7E                   ld          a,(hl)                              ; current edge index ++
 141++DE16                      JumpIfANEMemusng XX17,LL75Loop                  ; compare with total number of edges
 141++DE16 21 A3 7E    >                        ld    hl,XX17
 141++DE19 BE          >                        cp    (hl)
 141++DE1A C2 9E DD    >                        jp      nz,LL75Loop
 142++DE1D              CompletedLineGeneration:
 143++DE1D              LL81:
 144++DE1D              LL81SHPPT:                                              ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
 145++DE1D 3A EA C3             ld          a,(UbnkLineArrayLen)                ; UbnkLineArrayLen = nbr of lines loaded
 146++DE20 CB 27                sla         a
 147++DE22 CB 27                sla         a                                   ; multiple by 4 to equal number of bytes
 148++DE24                      IFDEF       LATECLIPPING
 149++DE24 CB 27                        sla         a                           ; multiple by 8 to equal number of bytes
 150++DE26                      ENDIF
 151++DE26 32 EB C3             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
 152++DE29              ExitEdgeDataLoop:
 153++DE29 C9                   ret
 154++DE2A
# file closed: ./Universe/Ships/PrepLines.asm
1754+ DE2A
1755+ DE2A                  DISPLAY "Tracing XX", $
1756+ DE2A
1757+ DE2A              UnivBankSize  EQU $ - StartOfUniv
1758+ DE2A
# file closed: ./Universe/Ships/univ_ship_data.asm
1458  DE2A                                  DISPLAY "Sizing Bank ",BankUNIVDATA0," - Start ",UniverseBankAddr," End - ",$, "- Universe Data A"
1459  DE2A                                  DISPLAY "Bank ",BankUNIVDATA0," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data A"
1460  DE2A                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1461  DE2A              ; Bank 71  ------------------------------------------------------------------------------------------------------------------------
1462  DE2A                                  SLOT    UniverseBankAddr
1463  DE2A                                  PAGE    BankUNIVDATA1
1464  DE2A                                  ORG	UniverseBankAddr,BankUNIVDATA1
1465  C000 FF           UNIVDATABlock1      DB $FF
1466  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1467  E000                                  DISPLAY "Bank ",BankUNIVDATA1," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data B"
1468  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1469  E000              ; Bank 72  ------------------------------------------------------------------------------------------------------------------------
1470  E000                                  SLOT    UniverseBankAddr
1471  E000                                  PAGE    BankUNIVDATA2
1472  E000                                  ORG	UniverseBankAddr,BankUNIVDATA2
1473  C000 FF           UNIVDATABlock2      DB $FF
1474  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1475  E000                                  DISPLAY "Bank ",BankUNIVDATA2," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data C"
1476  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1477  E000              ; Bank 73  ------------------------------------------------------------------------------------------------------------------------
1478  E000                                  SLOT    UniverseBankAddr
1479  E000                                  PAGE    BankUNIVDATA3
1480  E000                                  ORG	UniverseBankAddr,BankUNIVDATA3
1481  C000 FF           UNIVDATABlock3      DB $FF
1482  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1483  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data D"
1484  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1485  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
1486  E000                                  SLOT    UniverseBankAddr
1487  E000                                  PAGE    BankUNIVDATA4
1488  E000                                  ORG	UniverseBankAddr,BankUNIVDATA4
1489  C000 FF           UNIVDATABlock4      DB $FF
1490  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1491  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data E"
1492  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1493  E000              ; Bank 75  ------------------------------------------------------------------------------------------------------------------------
1494  E000                                  SLOT    UniverseBankAddr
1495  E000                                  PAGE    BankUNIVDATA5
1496  E000                                  ORG	UniverseBankAddr,BankUNIVDATA5
1497  C000 FF           UNIVDATABlock5      DB $FF
1498  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1499  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data F"
1500  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1501  E000              ; Bank 76  ------------------------------------------------------------------------------------------------------------------------
1502  E000                                  SLOT    UniverseBankAddr
1503  E000                                  PAGE    BankUNIVDATA6
1504  E000                                  ORG	UniverseBankAddr,BankUNIVDATA6
1505  C000 FF           UNIVDATABlock6      DB $FF
1506  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1507  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data G"
1508  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1509  E000              ; Bank 77  ------------------------------------------------------------------------------------------------------------------------
1510  E000                                  SLOT    UniverseBankAddr
1511  E000                                  PAGE    BankUNIVDATA7
1512  E000                                  ORG	UniverseBankAddr,BankUNIVDATA7
1513  C000 FF           UNIVDATABlock7      DB $FF
1514  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1515  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data H"
1516  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1517  E000              ; Bank 78  ------------------------------------------------------------------------------------------------------------------------
1518  E000                                  SLOT    UniverseBankAddr
1519  E000                                  PAGE    BankUNIVDATA8
1520  E000                                  ORG	UniverseBankAddr,BankUNIVDATA8
1521  C000 FF           UNIVDATABlock8      DB $FF
1522  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1523  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data I"
1524  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1525  E000              ; Bank 79  ------------------------------------------------------------------------------------------------------------------------
1526  E000                                  SLOT    UniverseBankAddr
1527  E000                                  PAGE    BankUNIVDATA9
1528  E000                                  ORG	UniverseBankAddr,BankUNIVDATA9
1529  C000 FF           UNIVDATABlock9      DB $FF
1530  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1531  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data J"
1532  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1533  E000              ; Bank 80  ------------------------------------------------------------------------------------------------------------------------
1534  E000                                  SLOT    UniverseBankAddr
1535  E000                                  PAGE    BankUNIVDATA10
1536  E000                                  ORG	UniverseBankAddr,BankUNIVDATA10
1537  C000 FF           UNIVDATABlock10     DB $FF
1538  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1539  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data K"
1540  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1541  E000              ; Bank 81  ------------------------------------------------------------------------------------------------------------------------
1542  E000                                  SLOT    UniverseBankAddr
1543  E000                                  PAGE    BankUNIVDATA11
1544  E000                                  ORG	UniverseBankAddr,BankUNIVDATA11
1545  C000 FF           UNIVDATABlock11     DB $FF
1546  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1547  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data L"
1548  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1549  E000              ; Bank 82  ------------------------------------------------------------------------------------------------------------------------
1550  E000                                  SLOT    UniverseBankAddr
1551  E000                                  PAGE    BankUNIVDATA12
1552  E000                                  ORG	UniverseBankAddr,BankUNIVDATA12
1553  C000 FF           UNIVDATABlock12     DB $FF
1554  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1555  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data M"
1556  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1557  E000              ; Bank 84  ------------------------------------------------------------------------------------------------------------------------
1558  E000                                  SLOT    SunBankAddr
1559  E000                                  PAGE    BankSunData
1560  E000                                  ORG	    SunBankAddr,BankSunData
1561  C000                                  INCLUDE "./Universe/Sun/sun_data.asm"
# file opened: ./Universe/Sun/sun_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; In  flight ship data tables
   4+ C000              ; There can be upto &12 objects in flight.
   5+ C000              ; To avoid hassle of memory heap managment, the free list
   6+ C000              ; will correspond to a memory bank offset so data will be held in
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   9+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  10+ C000              ; This means each gets its own line list, inwork etc
  11+ C000
  12+ C000              ; "Runtime Ship Data paged into in Bank 7"
  13+ C000              ;                      0123456789ABCDEF
  14+ C000 53 75 6E 20  StartOfSun:        DB "Sun Data ......."
  14+ C004 44 61 74 61
  14+ C008 20 2E 2E 2E
  14+ C00C 2E 2E 2E 2E
  15+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  16+ C010              CheckRowHLOnScreen:     MACRO   failtarget
  17+ C010 ~                                    ld      a,h                             ; is h byte set, i.e > 256 or < 0
  18+ C010 ~                                    and     a                               ; .
  19+ C010 ~                                    jr      nz,failtarget                   ; h <> 0 so fails (covers <0 and > 255
  20+ C010 ~                                    ld      a,l                             ; l bit 7 0?
  21+ C010 ~                                    and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
  22+ C010 ~                                    jr      nz,failtarget                   ;
  23+ C010                                      ENDM
  24+ C010
  25+ C010              ; IY = SBnKLineArray + rowValue*2
  26+ C010              IYEquRowN:              MACRO   rowValue                        ; set up iy as target address
  27+ C010 ~                                    ld      a,rowValue
  28+ C010 ~                                    ld      hl,SBnKLineArray
  29+ C010 ~                                    add     hl,a
  30+ C010 ~                                    add     hl,a
  31+ C010 ~                                    push    hl
  32+ C010 ~                                    pop     iy
  33+ C010                                      ENDM
  34+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  35+ C010              ; Universe map substibute for INWK
  36+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  37+ C010              SBnKDataBlock:
  38+ C010                                      INCLUDE "./Universe/Sun/SunPosVars.asm"
# file opened: ././Universe/Sun/SunPosVars.asm
   1++C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C010 00           SBnKxlo                     DB  0                       ; INWK+0
   3++C011 00           SBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C012 00           SBnKxsgn                    DB  0                       ; INWK+2
   5++C013 00           SBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C014 00           SBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C015 00           SBnKysgn                    DB  0                       ; INWK +5
   8++C016 00           SBnKzlo                     DB  0                       ; INWK +6
   9++C017 00           SBnKzhi                     DB  0                       ; INWK +7
  10++C018 00           SBnKzsgn                    DB  0                       ; INWK +8
  11++C019 00 00        SunCompassX                 DW  0
  12++C01B 00 00        SunCompassY                 DW  0
  13++C01D
# file closed: ././Universe/Sun/SunPosVars.asm
  39+ C01D                                      INCLUDE "./Universe/Sun/SunRotationMatrixVars.asm"
# file opened: ././Universe/Sun/SunRotationMatrixVars.asm
   1++C01D              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C01D              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C01D 00 00        SBnKrotmatSidevX            DW  0                       ; INWK +21
   4++C01F              SBnKrotmatSidev             equ SBnKrotmatSidevX
   5++C01F 00 00        SBnKrotmatSidevY            DW  0                       ; INWK +23
   6++C021 00 00        SBnKrotmatSidevZ            DW  0                       ; INWK +25
   7++C023 00 00        SBnKrotmatRoofvX            DW  0                       ; INWK +15
   8++C025              SBnKrotmatRoofv             equ SBnKrotmatRoofvX
   9++C025 00 00        SBnKrotmatRoofvY            DW  0                       ; INWK +17
  10++C027 00 00        SBnKrotmatRoofvZ            DW  0                       ; INWK +19
  11++C029 00 00        SBnKrotmatNosevX            DW  0                       ; INWK +9
  12++C02B              SBnKrotmatNosev             EQU SBnKrotmatNosevX
  13++C02B 00 00        SBnKrotmatNosevY            DW  0                       ; INWK +11
  14++C02D 00 00        SBnKrotmatNosevZ            DW  0                       ; INWK +13
  15++C02F
# file closed: ././Universe/Sun/SunRotationMatrixVars.asm
  40+ C02F                                      INCLUDE "./Universe/Sun/SunAIRuntimeData.asm"
# file opened: ././Universe/Sun/SunAIRuntimeData.asm
   1++C02F              ; -- Ship AI data
   2++C02F 00           SBnKRotXCounter             DB  0                       ; INWK +29
   3++C030 00           SBnKRotZCounter             DB  0                       ; INWK +30
   4++C031 00           SBnkCam0yLo                 DB  0                       ; INWK +33 ????
   5++C032 00           SBnkCam0yHi                 DB  0                       ; INWK +34?????
   6++C033
# file closed: ././Universe/Sun/SunAIRuntimeData.asm
  41+ C033
  42+ C033
  43+ C033                                      INCLUDE "./Universe/Sun/SunXX16Vars.asm"
# file opened: ././Universe/Sun/SunXX16Vars.asm
   1++C033              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C033 00 00        SBnkTransmatSidevX          DW  0               ; XX16+0
   3++C035              SBnkTransmatSidev           EQU SBnkTransmatSidevX
   4++C035 00 00        SBnkTransmatSidevY          DW 0                ; XX16+2
   5++C037 00 00        SBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C039 00 00        SBnkTransmatRoofvX          DW 0
   7++C03B              SBnkTransmatRoofv           EQU SBnkTransmatRoofvX
   8++C03B 00 00        SBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C03D 00 00        SBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C03F 00 00        SBnkTransmatNosevX          DW 0
  11++C041              SBnkTransmatNosev           EQU SBnkTransmatNosevX
  12++C041 00 00        SBnkTransmatNosevY          DW 0                ; XX16+2
  13++C043 00 00        SBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C045 00 00        SBnkTransmatTransX          DW 0
  15++C047 00 00        SBnkTransmatTransY          DW 0
  16++C049 00 00        SBnkTransmatTransZ          DW 0
  17++C04B              SunXX16                      equ SBnkTransmatSidev
  18++C04B              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C04B 00 00        SBnkTransInvRow0x0          DW 0
  20++C04D 00 00        SBnkTransInvRow0x1          DW 0
  21++C04F 00 00        SBnkTransInvRow0x2          DW 0
  22++C051 00 00        SBnkTransInvRow0x3          DW 0
  23++C053 00 00        SBnkTransInvRow1y0          DW 0
  24++C055 00 00        SBnkTransInvRow1y1          DW 0
  25++C057 00 00        SBnkTransInvRow1y2          DW 0
  26++C059 00 00        SBnkTransInvRow1y3          DW 0
  27++C05B 00 00        SBnkTransInvRow2z0          DW 0
  28++C05D 00 00        SBnkTransInvRow2z1          DW 0
  29++C05F 00 00        SBnkTransInvRow2z2          DW 0
  30++C061 00 00        SBnkTransInvRow2z3          DW 0
  31++C063
  32++C063              SunXX16Inv             equ SBnkTransInvRow0x0
  33++C063
# file closed: ././Universe/Sun/SunXX16Vars.asm
  44+ C063                                      INCLUDE "./Universe/Sun/SunXX25Vars.asm"
# file opened: ././Universe/Sun/SunXX25Vars.asm
   1++C063              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C063 00           SBnKProjxLo                 DB  0
   3++C064 00           SBnKProjxHi                 DB  0
   4++C065 00           SBnKProjxSgn                DB  0
   5++C066              SBnKProjx                   EQU SBnKProjxLo
   6++C066 00           SBnKProjyLo                 DB  0
   7++C067 00           SBnKProjyHi                 DB  0
   8++C068 00           SBnKProjySgn                DB  0
   9++C069              SBnKProjy                   EQU SBnKProjyLo
  10++C069 00           SBnKProjzLo                 DB  0
  11++C06A 00           SBnKProjzHi                 DB  0
  12++C06B 00           SBnKProjzSgn                DB  0
  13++C06C              SBnKProjz                   EQU SBnKProjzLo
  14++C06C              SXX25                       EQU SBnKProjxLo
  15++C06C
# file closed: ././Universe/Sun/SunXX25Vars.asm
  45+ C06C                                      INCLUDE "./Universe/Sun/SunXX18Vars.asm"
# file opened: ././Universe/Sun/SunXX18Vars.asm
   1++C06C              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C06C 00           SBnKDrawCam0xLo             DB  0               ; XX18+0
   3++C06D 00           SBnKDrawCam0xHi             DB  0               ; XX18+1
   4++C06E 00           SBnKDrawCam0xSgn            DB  0               ; XX18+2
   5++C06F              SBnKDrawCam0x               equ SBnKDrawCam0xLo
   6++C06F 00           SBnKDrawCam0yLo             DB  0               ; XX18+3
   7++C070 00           SBnKDrawCam0yHi             DB  0               ; XX18+4
   8++C071 00           SBnKDrawCam0ySgn            DB  0               ; XX18+5
   9++C072              SBnKDrawCam0y               equ SBnKDrawCam0yLo
  10++C072 00           SBnKDrawCam0zLo             DB  0               ; XX18+6
  11++C073 00           SBnKDrawCam0zHi             DB  0               ; XX18+7
  12++C074 00           SBnKDrawCam0zSgn            DB  0               ; XX18+8
  13++C075              SBnKDrawCam0z               equ SBnKDrawCam0zLo
  14++C075              SXX18                       equ SBnKDrawCam0xLo
  15++C075
# file closed: ././Universe/Sun/SunXX18Vars.asm
  46+ C075
  47+ C075              ; Used to make 16 bit reads a little cleaner in source code
  48+ C075 00 00 00     SBnKzPoint                  DS  3
  49+ C078              SBnKzPointLo                equ SBnKzPoint
  50+ C078              SBnKzPointHi                equ SBnKzPoint+1
  51+ C078              SBnKzPointSign              equ SBnKzPoint+2
  52+ C078                                      INCLUDE "./Universe/Sun/SunXX15Vars.asm"
# file opened: ././Universe/Sun/SunXX15Vars.asm
   1++C078              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C078 00           SBnKXScaled                 DB  0               ; XX15+0Xscaled
   3++C079 00           SBnKXScaledSign             DB  0               ; XX15+1xsign
   4++C07A 00           SBnKYScaled                 DB  0               ; XX15+2yscaled
   5++C07B 00           SBnKYScaledSign             DB  0               ; XX15+3ysign
   6++C07C 00           SBnKZScaled                 DB  0               ; XX15+4zscaled
   7++C07D 00           SBnKZScaledSign             DB  0               ; XX15+5zsign
   8++C07E
   9++C07E              SXX15                       equ SBnKXScaled
  10++C07E              SXX15VecX                   equ SXX15
  11++C07E              SXX15VecY                   equ SXX15+1
  12++C07E              SXX15VecZ                   equ SXX15+2
  13++C07E              SBnKXPoint                  equ SXX15
  14++C07E              SBnKXPointLo                equ SXX15+0
  15++C07E              SBnKXPointHi                equ SXX15+1
  16++C07E              SBnKXPointSign              equ SXX15+2
  17++C07E              SBnKYPoint                  equ SXX15+3
  18++C07E              SBnKYPointLo                equ SXX15+3
  19++C07E              SBnKYPointHi                equ SXX15+4
  20++C07E              SBnKYPointSign              equ SXX15+5
  21++C07E
# file closed: ././Universe/Sun/SunXX15Vars.asm
  53+ C07E                                      INCLUDE "./Universe/Sun/SunXX12Vars.asm"
# file opened: ././Universe/Sun/SunXX12Vars.asm
   1++C07E              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07E              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07E 00           SBnKXX12xLo                 DB  0               ; XX12+0
   4++C07F 00           SBnKXX12xSign               DB  0               ; XX12+1
   5++C080 00           SBnKXX12yLo                 DB  0               ; XX12+2
   6++C081 00           SBnKXX12ySign               DB  0               ; XX12+3
   7++C082 00           SBnKXX12zLo                 DB  0               ; XX12+4
   8++C083 00           SBnKXX12zSign               DB  0               ; XX12+5
   9++C084 00 00 00...  SXX12Save                   DS  6
  10++C08A 00 00 00...  SXX12Save2                  DS  6
  11++C090              SXX12                       equ SBnKXX12xLo
  12++C090              varSXX12                    equ SBnKXX12xLo
  13++C090              ; Repurposed XX12 when plotting lines
  14++C090              SBnkY2                      equ SXX12+0
  15++C090              SbnKy2Lo                    equ SXX12+0
  16++C090              SBnkY2Hi                    equ SXX12+1
  17++C090              SBnkDeltaXLo                equ SXX12+2
  18++C090              SBnkDeltaXHi                equ SXX12+3
  19++C090              SBnkDeltaYLo                equ SXX12+4
  20++C090              SBnkDeltaYHi                equ SXX12+5
  21++C090              SbnkGradient                equ SXX12+2
  22++C090              SBnkTemp1                   equ SXX12+2
  23++C090              SBnkTemp1Lo                 equ SXX12+2
  24++C090              SBnkTemp1Hi                 equ SXX12+3
  25++C090              SBnkTemp2                   equ SXX12+3
  26++C090              SBnkTemp2Lo                 equ SXX12+3
  27++C090              SBnkTemp2Hi                 equ SXX12+4
  28++C090
# file closed: ././Universe/Sun/SunXX12Vars.asm
  54+ C090
  55+ C090
  56+ C090              ; Post clipping the results are now 8 bit
  57+ C090 00           SBnKVisibility              DB  0               ; replaces general purpose xx4 in rendering
  58+ C091 00           SBnKProjectedY              DB  0
  59+ C092 00           SBnKProjectedX              DB  0
  60+ C093              SBnKProjected               equ SBnKProjectedY  ; resultant projected position
  61+ C093 00 00 00...  SunXX15Save                 DS  8
  62+ C09B 00 00 00...  SunXX15Save2                DS  8
  63+ C0A3              ; Heap (or array) information for lines and normals
  64+ C0A3              ; Coords are stored XY,XY,XY,XY
  65+ C0A3              ; Normals
  66+ C0A3              ; This needs re-oprganising now.
  67+ C0A3              ; Runtime Calculation Store
  68+ C0A3
  69+ C0A3              SunLineArraySize            equ 128 * 2
  70+ C0A3              ; Storage arrays for data
  71+ C0A3
  72+ C0A3 00 00 00...  SBnKLineArray               DS SunLineArraySize ; XX19 Holds the clipped line details
  73+ C1A3              SBnKLinesHeapMax            EQU $ - SBnKLineArray
  74+ C1A3
  75+ C1A3 00 00        LineArrayPtr                DW  0
  76+ C1A5
  77+ C1A5              SBnK_Data_len               EQU $ - SBnKDataBlock
  78+ C1A5
  79+ C1A5              ; --------------------------------------------------------------
  80+ C1A5 21 10 C0     ResetSBnKData:          ld      hl,SBnKDataBlock
  81+ C1A8 11 95 01                             ld      de,SBnK_Data_len
  82+ C1AB AF                                   xor     a
  83+ C1AC CD 38 7D                             call    memfill_dma
  84+ C1AF C9                                   ret
  85+ C1B0              ; --------------------------------------------------------------
  86+ C1B0 21 10 C0     ResetSBnKPosition:      ld      hl,SBnKxlo
  87+ C1B3 06 09                                ld      b, 3*3
  88+ C1B5 AF                                   xor     a
  89+ C1B6 77           .zeroLoop:              ld      (hl),a
  90+ C1B7 23                                   inc     hl
  91+ C1B8 10 FC                                djnz    .zeroLoop
  92+ C1BA C9                                   ret
  93+ C1BB
  94+ C1BB              ; Z Must be at least 2 and positve to warp
  95+ C1BB 21 18 C0     WarpSunCloser:          ld      hl,SBnKzsgn
  96+ C1BE 7E                                   ld      a,(hl)
  97+ C1BF                                      ReturnIfALTNusng 2                      ; hard liit along z axis
  97+ C1BF FE 02       >                        cp    2
  97+ C1C1 D8          >                        ret	 c
  98+ C1C2 35                                   dec     (hl)
  99+ C1C3 C9                                   ret
 100+ C1C4
 101+ C1C4              ; It should normally be behind but someone could fly past a planet, turn aroudn and jump
 102+ C1C4 21 18 C0     WarpSunFurther:         ld      hl,SBnKzsgn
 103+ C1C7 7E                                   ld      a,(hl)
 104+ C1C8                                      ReturnIfAGTENusng $7F                   ; this is the hard limit else it woudl turn negative and flip to -0
 104+ C1C8 FE 7F       >                        cp    $7F
 104+ C1CA D0          >                        ret	 nc
 105+ C1CB 34                                   inc     (hl)                           ; if its negative it will still increase as we will block insane values
 106+ C1CC C9                                   ret
 107+ C1CD              ; This uses UBNKNodeArray as the list
 108+ C1CD              ; the array is 256 * 2 bytes
 109+ C1CD              ; counter is current row y pos
 110+ C1CD              ; byte 1 is start x pos
 111+ C1CD              ; byte 2 is end x pos
 112+ C1CD              ; if they are both 0 then skip
 113+ C1CD              ; its always horizontal, yellow
 114+ C1CD
 115+ C1CD              .SunNoDraw:             SetCarryFlag                    ; ship is behind so do not draw, so we don't care abour draw as dot
 115+ C1CD 37          >                        scf
 116+ C1CE C9                                   ret
 117+ C1CF
 118+ C1CF              SunBankDraw:            MACRO
 119+ C1CF ~            .drawLoop               ld      a,(hl)
 120+ C1CF ~                                    ld      c,a                     ; c = left column
 121+ C1CF ~                                    inc     hl
 122+ C1CF ~                                    ld      d,(hl)                  ; d = right col
 123+ C1CF ~                                    inc     hl                      ; now ready for next linel
 124+ C1CF ~                                    push    hl,,bc
 125+ C1CF ~                                    cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 126+ C1CF ~                                    IfResultZeroGoto .NoLineDraw
 127+ C1CF ~                                    ld      a,d                     ; get right col back
 128+ C1CF ~                                    sub     c                       ; subtract left so a = length
 129+ C1CF ~                                    inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 130+ C1CF ~                                    call    z, .FixWidth
 131+ C1CF ~                                    ld      d,a                     ; de = length (e - d)
 132+ C1CF ~                                    ld      e,216                   ; yellow
 133+ C1CF ~                                    call    l2_draw_horz_dma        ; draw without bank switch
 134+ C1CF ~            .NoLineDraw:            pop     hl,,bc
 135+ C1CF ~                                    inc     b
 136+ C1CF ~                                    dec     iyh
 137+ C1CF ~                                    IfResultNotZeroGoto  .drawLoop
 138+ C1CF                                      ENDM
 139+ C1CF
 140+ C1CF
 141+ C1CF
 142+ C1CF              SunDraw:                MMUSelectLayer2
 142+ C1CF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 143+ C1D3 3A 0B C6     .OptimiseStartPos:      ld      a,(MinYOffset)
 144+ C1D6                                      JumpIfAIsZero .OffsetIsZero     ; if offset is 0 then just initate as normal
 144+ C1D6 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 144+ C1D7 CA E7 C1    >                        jp	    z, .OffsetIsZero
 145+ C1DA                                      JumpIfALTNusng 64, .OffsetLT64  ; if offset >=64 then we adjust and mve to bank 0
 145+ C1DA FE 40       >                        cp      64
 145+ C1DC DA F4 C1    >                        jp		c, .OffsetLT64
 146+ C1DF D6 40        .OffsetGTE64:           sub     64
 147+ C1E1 32 0B C6                             ld      (MinYOffset),a          ; adjust offset for bank 2
 148+ C1E4 C3 2C C2                             jp      .StartBank2
 149+ C1E7 06 00        .OffsetIsZero:          ld      b,0                     ; row
 150+ C1E9 FD 26 40                             ld      iyh,64                  ; counter
 151+ C1EC 21 A3 C0                             ld      hl,SBnKLineArray        ; set hl to start of array
 152+ C1EF C3 06 C2                             jp      .StartBank1
 153+ C1F2              ;-- Snuck routine in here so that the macro will be happier
 154+ C1F2 3D           .FixWidth:              dec     a                       ; if carry resulted in a value of zero then correct
 155+ C1F3 C9                                   ret
 156+ C1F4 21 A3 C0     .OffsetLT64:            ld      hl,SBnKLineArray        ; adjust hl for line array offset
 157+ C1F7 ED 31                                add     hl,a                    ; .
 158+ C1F9 ED 31                                add     hl,a                    ; .
 159+ C1FB 47                                   ld      b,a                     ; set b row to the actual offset
 160+ C1FC 4F                                   ld      c,a                     ; iyh = 64 - Y offset
 161+ C1FD 3E 40                                ld      a,64                    ; .
 162+ C1FF 91                                   sub     c                       ; .
 163+ C200 FD 67                                ld      iyh,a
 164+ C202 AF                                   xor     a                       ; Ready bank 2 with no offset
 165+ C203 32 0B C6                             ld      (MinYOffset),a          ; .
 166+ C206 D9           .StartBank1:            exx
 167+ C207 3E 00                                ld      a,LAYER2_SHIFTED_SCREEN_TOP
 168+ C209 CD 38 E0                             call    asm_l2_bank_select      ; get in the first bank, we will only then bank select when needed
 169+ C20C D9                                   exx
 170+ C20D                                      SunBankDraw
 170+ C20D 7E          >.drawLoop               ld      a,(hl)
 170+ C20E 4F          >                        ld      c,a                     ; c = left column
 170+ C20F 23          >                        inc     hl
 170+ C210 56          >                        ld      d,(hl)                  ; d = right col
 170+ C211 23          >                        inc     hl                      ; now ready for next linel
 170+ C212 E5 C5       >                        push    hl,,bc
 170+ C214 BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 170+ C215             >                        IfResultZeroGoto .NoLineDraw
 170+ C215 CA 24 C2    >                        jp	z,.NoLineDraw
 170+ C218 7A          >                        ld      a,d                     ; get right col back
 170+ C219 91          >                        sub     c                       ; subtract left so a = length
 170+ C21A 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 170+ C21B CC F2 C1    >                        call    z, .FixWidth
 170+ C21E 57          >                        ld      d,a                     ; de = length (e - d)
 170+ C21F 1E D8       >                        ld      e,216                   ; yellow
 170+ C221 CD 5E E4    >                        call    l2_draw_horz_dma        ; draw without bank switch
 170+ C224 C1 E1       >.NoLineDraw:            pop     hl,,bc
 170+ C226 04          >                        inc     b
 170+ C227 FD 25       >                        dec     iyh
 170+ C229             >                        IfResultNotZeroGoto  .drawLoop
 170+ C229 C2 0D C2    >                        jp	nz,.drawLoop
 171+ C22C 3A 0B C6     .StartBank2:            ld      a,(MinYOffset)
 172+ C22F                                      JumpIfAIsZero .OffsetBank2IsZero; if offset is 0 then we just continue, offset can never be >127 else there would be no draw
 172+ C22F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 172+ C230 CA 44 C2    >                        jp	    z, .OffsetBank2IsZero
 173+ C233 21 23 C1     .NotZeroOffset:         ld      hl,SBnKLineArray + (64 * 2); adjust to correct offset
 174+ C236 ED 31                                add     hl,a
 175+ C238 ED 31                                add     hl,a
 176+ C23A 4F                                   ld      c,a                     ; iyh = 64 - offset
 177+ C23B 3E 40                                ld      a,64                    ; .
 178+ C23D 91                                   sub     c                       ; .
 179+ C23E FD 67                                ld      iyh,a                   ; .
 180+ C240 41                                   ld      b,c                     ; b = offset row
 181+ C241 C3 4C C2                             jp      .drawLineBank2
 182+ C244 21 23 C1     .OffsetBank2IsZero:     ld      hl,SBnKLineArray + (64 * 2); start with offset adjusted
 183+ C247 06 00                                ld      b,0
 184+ C249 FD 26 40                             ld      iyh,64
 185+ C24C D9           .drawLineBank2:         exx
 186+ C24D 3E 40                                ld      a,LAYER2_SHIFTED_SCREEN_MIDDLE
 187+ C24F CD 38 E0                             call    asm_l2_bank_select      ; now do the lower bank
 188+ C252 D9                                   exx
 189+ C253              ; Could make this a sub routine but unwrapping saves a call
 190+ C253                                      SunBankDraw
 190+ C253 7E          >.drawLoop               ld      a,(hl)
 190+ C254 4F          >                        ld      c,a                     ; c = left column
 190+ C255 23          >                        inc     hl
 190+ C256 56          >                        ld      d,(hl)                  ; d = right col
 190+ C257 23          >                        inc     hl                      ; now ready for next linel
 190+ C258 E5 C5       >                        push    hl,,bc
 190+ C25A BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 190+ C25B             >                        IfResultZeroGoto .NoLineDraw
 190+ C25B CA 6A C2    >                        jp	z,.NoLineDraw
 190+ C25E 7A          >                        ld      a,d                     ; get right col back
 190+ C25F 91          >                        sub     c                       ; subtract left so a = length
 190+ C260 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 190+ C261 CC F2 C1    >                        call    z, .FixWidth
 190+ C264 57          >                        ld      d,a                     ; de = length (e - d)
 190+ C265 1E D8       >                        ld      e,216                   ; yellow
 190+ C267 CD 5E E4    >                        call    l2_draw_horz_dma        ; draw without bank switch
 190+ C26A C1 E1       >.NoLineDraw:            pop     hl,,bc
 190+ C26C 04          >                        inc     b
 190+ C26D FD 25       >                        dec     iyh
 190+ C26F             >                        IfResultNotZeroGoto  .drawLoop
 190+ C26F C2 53 C2    >                        jp	nz,.drawLoop
 191+ C272 C9                                   ret
 192+ C273              ; -------------------------------------------------------------
 193+ C273              ; Sun Position    z = ((seed.d & 7) | 1)      shift left 16
 194+ C273              ;                 x = (seed.f & 3) shift left 16  | seed.f & 3 << 8 * -1 if seed f odd
 195+ C273              ;                 y    = sun x position
 196+ C273              ;
 197+ C273              CalculateSunWarpPositon:
 198+ C273 3A 2F 7F     .CalcZPosition:         ld      a,(WorkingSeeds+3)      ; seed d & 7
 199+ C276 E6 07                                and     %00000111               ; .
 200+ C278 F6 81                                or      %10000001               ; | 1
 201+ C27A 32 18 C0     .SetZPosition:          ld      (SBnKzsgn),a            ; << 16 (i.e. load into z sign byte
 202+ C27D 21 00 00                             ld      hl, $0000               ; now set z hi and lo
 203+ C280 22 16 C0                             ld      (SBnKzlo),hl            ;
 204+ C283 3A 31 7F     .CalcXandYPosition:     ld      a,(WorkingSeeds+5)      ; seed f & 3
 205+ C286 E6 03                                and     %00000011               ; .
 206+ C288 47                                   ld      b,a
 207+ C289 3A 30 7F                             ld      a,(WorkingSeeds+4)      ; get low bit of seed e
 208+ C28C E6 01                                and     %00000001
 209+ C28E 1F                                   rra                             ; roll bi t0 into bit 7
 210+ C28F B0                                   or      b                       ; now calc is f & 3 * -1 if seed e is odd
 211+ C290 32 12 C0     .SetXandYPosition:      ld      (SBnKxsgn),a            ; set into x and y sign byte
 212+ C293 32 15 C0                             ld      (SBnKysgn),a            ; .
 213+ C296 78                                   ld      a,b                     ; we want just seed f & 3 here
 214+ C297 32 11 C0                             ld      (SBnKxhi),a             ; set into x and y high byte
 215+ C29A 32 14 C0                             ld      (SBnKyhi),a             ; .
 216+ C29D                                      ZeroA
 216+ C29D AF          >                        xor a
 217+ C29E 32 10 C0                             ld      (SBnKxlo),a
 218+ C2A1 32 13 C0                             ld      (SBnKylo),a
 219+ C2A4 C9                                   ret
 220+ C2A5
 221+ C2A5              CalculateSunLaunchedPosition:
 222+ C2A5              .CalcXPosition:         MMUSelectMathsBankedFns
 222+ C2A5 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 223+ C2A9 DD 21 10 C0                          ld      ix,SBnKxlo              ; Sun BnKxlo += ParentPlanetX
 224+ C2AD FD 21 64 7F                          ld      iy,ParentPlanetX        ; .
 225+ C2B1 CD 8C 00                             call    AddAtIXtoAtIY24Signed   ; .
 226+ C2B4 DD 21 13 C0  .CalcYPosition:         ld      ix,SBnKylo              ; Sun BnKylo += ParentPlanetZ
 227+ C2B8 FD 21 67 7F                          ld      iy,ParentPlanetY        ; .
 228+ C2BC CD 8C 00                             call    AddAtIXtoAtIY24Signed   ; .
 229+ C2BF DD 21 16 C0  .CalcZPosition:         ld      ix,SBnKzlo              ; Sun BnKzlo += ParentPlanetZ
 230+ C2C3 FD 21 6A 7F                          ld      iy,ParentPlanetZ        ; .
 231+ C2C7 CD 8C 00                             call    AddAtIXtoAtIY24Signed   ; .
 232+ C2CA C9                                   ret
 233+ C2CB
 234+ C2CB              ; --------------------------------------------------------------
 235+ C2CB              ; This sets current universe object to a star / sun, they use sign + 23 bit positions
 236+ C2CB CD A5 C1     CreateSun:              call    ResetSBnKData
 237+ C2CE 3A 2F 7F                             ld      a,(WorkingSeeds+3)
 238+ C2D1 E6 07                                and     %00000111
 239+ C2D3 F6 81                                or      %10000001
 240+ C2D5 32 18 C0                             ld      (SBnKzsgn),a
 241+ C2D8 3A 31 7F                             ld      a,(WorkingSeeds+5)
 242+ C2DB E6 03                                and     %00000011
 243+ C2DD 32 12 C0                             ld      (SBnKxsgn),a
 244+ C2E0 32 15 C0                             ld      (SBnKysgn),a
 245+ C2E3 21 00 00                             ld      hl, $0000
 246+ C2E6 22 17 C0                             ld      (SBnKzhi),hl
 247+ C2E9 3E E3                                ld      a, $E3
 248+ C2EB 32 16 C0                             ld      (SBnKzlo),a
 249+ C2EE C9                                   ret
 250+ C2EF              ; --------------------------------------------------------------
 251+ C2EF              ; This creates a sun relative to space station on launch
 252+ C2EF CD A5 C1     CreateSunLaunched:      call    ResetSBnKData
 253+ C2F2 21 00 00                             ld      hl,0
 254+ C2F5 3E 00                                ld      a,0
 255+ C2F7 22 10 C0                             ld      (SBnKxlo),hl
 256+ C2FA 22 13 C0                             ld      (SBnKylo),hl
 257+ C2FD 21 00 E0                             ld      hl,$E000
 258+ C300 22 16 C0                             ld      (SBnKzlo),hl
 259+ C303 32 12 C0                             ld      (SBnKxsgn),a
 260+ C306 32 18 C0                             ld      (SBnKzsgn),a
 261+ C309 3E 06                                ld      a,$06
 262+ C30B 32 15 C0                             ld      (SBnKysgn),a
 263+ C30E C9                                   ret
 264+ C30F              ; --------------------------------------------------------------
 265+ C30F              ; This sets current universe object to a planet,they use sign + 23 bit positions
 266+ C30F              ;;TODOCreatePlanet:           call    ResetSBnKData
 267+ C30F              ;;TODO                        ld      a,(DisplayTekLevel)
 268+ C30F              ;;TODO                        and     $00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
 269+ C30F              ;;TODO                        or      $10000000
 270+ C30F              ;;TODO                        ld      (SBnKShipType),a
 271+ C30F              ;;TODO                        xor     a
 272+ C30F              ;;TODO                        ld      (SBnKaiatkecm),a
 273+ C30F              ;;TODO                        MaxUnivPitchAndRoll
 274+ C30F              ;;TODO                        ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
 275+ C30F              ;;TODO                        and     %00000011               ; .
 276+ C30F              ;;TODO                        adc     3                       ; .
 277+ C30F              ;;TODO                        ld      (SBnKzsgn),a            ; set z sign to 3 + C + 0..3 bits
 278+ C30F              ;;TODO                        rr      a
 279+ C30F              ;;TODO                        ld      (PlanetXsgn),a
 280+ C30F              ;;TODO                        ld      (PlanetYsgn),a
 281+ C30F              ;;TODO                        ret
 282+ C30F
 283+ C30F
 284+ C30F                                 ;     include "./Maths/ADDHLDESignBC.asm"
 285+ C30F
 286+ C30F 7C           SunADDHLDESignedv3:     ld      a,h
 287+ C310 E6 80                                and     SignOnly8Bit
 288+ C312 47                                   ld      b,a                         ;save sign bit in b
 289+ C313 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 290+ C314                                      JumpIfNegative .SunADDHLDEOppSGN    ;Signs are opposite there fore we can subtract to get difference
 290+ C314 FA 2F C3    >                        jp		m, .SunADDHLDEOppSGN
 291+ C317 78           .SunADDHLDESameSigns:   ld      a,b
 292+ C318 B2                                   or      d
 293+ C319                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 293+ C319 FA 21 C3    >                        jp		m, .SunADDHLDESameNeg
 294+ C31C                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 294+ C31C FA 21 C3    >                        jp		m, .SunADDHLDESameNeg
 295+ C31F 19                                   add     hl,de
 296+ C320 C9                                   ret
 297+ C321 7C           .SunADDHLDESameNeg:     ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 298+ C322 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 299+ C324 67                                   ld      h,a
 300+ C325 7A                                   ld      a,d
 301+ C326 E6 7F                                and     SignMask8Bit
 302+ C328 57                                   ld      d,a
 303+ C329 19                                   add     hl,de
 304+ C32A 3E 80                                ld      a,SignOnly8Bit
 305+ C32C B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 306+ C32D 67                                   ld      h,a
 307+ C32E C9                                   ret
 308+ C32F 7C           .SunADDHLDEOppSGN:      ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 309+ C330 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 310+ C332 67                                   ld      h,a
 311+ C333 7A                                   ld      a,d
 312+ C334 E6 7F                                and     SignMask8Bit
 313+ C336 57                                   ld      d,a
 314+ C337 B7                                   or      a
 315+ C338 ED 52                                sbc     hl,de
 316+ C33A 38 04                                jr      c,.SunADDHLDEOppInvert
 317+ C33C 78           .SunADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 318+ C33D B4                                   or      h
 319+ C33E 67                                   ld      h,a                         ; set the previou sign value
 320+ C33F C9                                   ret
 321+ C340              .SunADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 321+ C340 AF          >                    xor a
 321+ C341 95          >                    sub l
 321+ C342 6F          >                    ld l,a
 321+ C343 9F          >                    sbc a,a
 321+ C344 94          >                    sub h
 321+ C345 67          >                    ld h,a
 322+ C346 78                                   ld      a,b
 323+ C347 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 324+ C349 B4                                   or      h
 325+ C34A 67                                   ld      h,a                         ; recover sign
 326+ C34B C9                                   ret
 327+ C34C
 328+ C34C              ; we could cheat, flip the sign of DE and just add but its not very optimised
 329+ C34C 7C           .SunSUBHLDESignedv3:        ld      a,h
 330+ C34D E6 80                                and     SignOnly8Bit
 331+ C34F 47                                   ld      b,a                         ;save sign bit in b
 332+ C350 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 333+ C351                                      JumpIfNegative .SunSUBHLDEOppSGN        ;Signs are opposite therefore we can add
 333+ C351 FA 7F C3    >                        jp		m, .SunSUBHLDEOppSGN
 334+ C354 78           .SunSUBHLDESameSigns:       ld      a,b
 335+ C355 B2                                   or      d
 336+ C356                                      JumpIfNegative .SunSUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 336+ C356 FA 60 C3    >                        jp		m, .SunSUBHLDESameNeg
 337+ C359 B7                                   or      a
 338+ C35A ED 52                                sbc     hl,de
 339+ C35C                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 339+ C35C FA 73 C3    >                        jp		m, .SunSUBHLDESameOvrFlw
 340+ C35F C9                                   ret
 341+ C360 7C           .SunSUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 342+ C361 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 343+ C363 67                                   ld      h,a
 344+ C364 7A                                   ld      a,d
 345+ C365 E6 7F                                and     SignMask8Bit
 346+ C367 57                                   ld      d,a
 347+ C368 B7                                   or      a
 348+ C369 ED 52                                sbc     hl,de
 349+ C36B                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 349+ C36B FA 73 C3    >                        jp		m, .SunSUBHLDESameOvrFlw
 350+ C36E 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 351+ C36F F6 80                                or      SignOnly8Bit
 352+ C371 67                                   ld      h,a
 353+ C372 C9                                   ret
 354+ C373              .SunSUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 354+ C373 AF          >                    xor a
 354+ C374 95          >                    sub l
 354+ C375 6F          >                    ld l,a
 354+ C376 9F          >                    sbc a,a
 354+ C377 94          >                    sub h
 354+ C378 67          >                    ld h,a
 355+ C379 78                                   ld      a,b
 356+ C37A EE 80                                xor     SignOnly8Bit                ; flip sign bit
 357+ C37C B4                                   or      h
 358+ C37D 67                                   ld      h,a                         ; recover sign
 359+ C37E C9                                   ret
 360+ C37F B7           .SunSUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 361+ C380 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 362+ C381 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 363+ C383 67                                   ld      h,a
 364+ C384 7A                                   ld      a,d
 365+ C385 E6 7F                                and     SignMask8Bit
 366+ C387 57                                   ld      d,a
 367+ C388 19                                   add     hl,de
 368+ C389 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 369+ C38A B4                                   or      h
 370+ C38B 67                                   ld      h,a                         ; set the previou sign value
 371+ C38C C9                                   ret
 372+ C38D
 373+ C38D
 374+ C38D              .SunSBCHLDESigned:      JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 374+ C38D CB 7C       >                        bit 	7,h
 374+ C38F C2 A0 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 375+ C392              .SunSBCHLDEhlPos:       JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 375+ C392 CB 7C       >                        bit 	7,h
 375+ C394 C2 A0 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 376+ C397 ED 52        .SunSBCHLDEhlPosDePos:  sbc     hl,de                           ; ignore overflow for now will sort later TODO
 377+ C399 C9                                   ret
 378+ C39A CB BA        .SunSBCHLDEhlPosDeNeg:  res     7,d
 379+ C39C 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 380+ C39D CB FA                                set     7,d
 381+ C39F C9                                   ret
 382+ C3A0 CB BC        .SunSBCHLDEhlNeg:       res     7,h
 383+ C3A2                                      JumpOnBitSet d,7,.SunSBCHLDEhlNegdeNeg
 383+ C3A2 CB 7A       >                        bit 	7,d
 383+ C3A4 C2 AC C3    >                        jp      nz,.SunSBCHLDEhlNegdeNeg
 384+ C3A7 ED 52        .SunSBCHLDEhlNegdePos:  sbc     hl,de                       ; ignore overflow for now will sort later TODO
 385+ C3A9 CB FC                                set     7,h
 386+ C3AB C9                                   ret
 387+ C3AC CB BA        .SunSBCHLDEhlNegdeNeg:      res     7,d
 388+ C3AE 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 389+ C3AF CB FA                                set     7,d
 390+ C3B1 CB FC                                set     7,h
 391+ C3B3 C9                                   ret
 392+ C3B4
 393+ C3B4
 394+ C3B4                                      include "./Universe/Sun/TransposeSunXX12BySunToSunXX15.asm"
# file opened: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
   1++C3B4              TransposeSXX12BySunToSXX15:
   2++C3B4 2A 7E C0                             ld		hl,(SBnKXX12xLo)					; get X into HL
   3++C3B7 7C                                   ld		a,h			                        ; get XX12 Sign
   4++C3B8 E6 80                                and		$80									; check sign bit on high byte
   5++C3BA 47                                   ld		b,a									; and put it in of 12xlo in b
   6++C3BB                                      ;110921 debugld      h,0
   7++C3BB 7C                                   ld      a,h
   8++C3BC E6 7F                                and     $7F
   9++C3BE 67                                   ld      h,a
  10++C3BF                                      ;110921 debugld      h,0
  11++C3BF ED 5B 10 C0                          ld		de,(SBnKxlo)						;
  12++C3C3 3A 12 C0                             ld		a,(SBnKxsgn)						; get Ship Pos (low,high,sign)
  13++C3C6 E6 80                                and		$80									; make sure we only have bit 7
  14++C3C8 4F                                   ld		c,a									; and put sign of unkxsgn c
  15++C3C9 CD 2F 00                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++C3CC B4                                   or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++C3CD 67                                   ld		h,a
  18++C3CE 22 78 C0                             ld		(SBnKXScaled),hl					; now write it out to XX15 X pos
  19++C3D1              ; ..................................
  20++C3D1 2A 80 C0                             ld		hl,(SBnKXX12yLo)					; Repeat above for Y coordinate
  21++C3D4 7C                                   ld		a,h
  22++C3D5 E6 80                                and		$80
  23++C3D7 47                                   ld		b,a
  24++C3D8                                      ;110921 debugld      h,0
  25++C3D8 7C                                   ld      a,h
  26++C3D9 E6 7F                                and     $7F
  27++C3DB 67                                   ld      h,a
  28++C3DC                                      ;110921 debugld      h,0
  29++C3DC ED 5B 13 C0                          ld		de,(SBnKylo)
  30++C3E0 3A 15 C0                             ld		a,(SBnKysgn)
  31++C3E3 E6 80                                and		$80									; make sure we only have bit 7
  32++C3E5 4F                                   ld		c,a
  33++C3E6 CD 2F 00                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++C3E9 B4                                   or		h									; combine sign in A with H
  35++C3EA 67                                   ld		h,a
  36++C3EB 22 7A C0                             ld		(SBnKYScaled),hl
  37++C3EE              ; ..................................
  38++C3EE 2A 82 C0                             ld		hl,(SBnKXX12zLo)					; and now repeat for Z cooord
  39++C3F1 7C                                   ld		a,h
  40++C3F2 E6 80                                and		$80
  41++C3F4 47                                   ld		b,a
  42++C3F5                                      ;110921 debugld      h,0
  43++C3F5 7C                                   ld      a,h
  44++C3F6 E6 7F                                and     $7F
  45++C3F8 67                                   ld      h,a
  46++C3F9                                      ;110921 debugld      h,0
  47++C3F9 ED 5B 16 C0                          ld		de,(SBnKzlo)
  48++C3FD 3A 18 C0                             ld		a,(SBnKzsgn)
  49++C400 E6 80                                and		$80									; make sure we only have bit 7
  50++C402 4F                                   ld		c,a
  51++C403 CD 2F 00                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++C406 B4                                   or		h									; combine sign in A with H
  53++C407 67                                   ld		h,a
  54++C408 CB 7C                                bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++C40A 20 16                                jr		nz,.ClampZto4                        ; result was negative so we need to clamp to 4
  56++C40C E6 7F                                and     $7F                                 ; a = value unsigned
  57++C40E 20 06                                jr      nz,.NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++C410 7D                                   ld      a,l                                 ; get low byte now
  59++C411                                      JumpIfALTNusng 4,.ClampZto4					; if its < 4 then fix at 4
  59++C411 FE 04       >                        cp      4
  59++C413 DA 22 C4    >                        jp		c, .ClampZto4
  60++C416 22 7C C0     .NoClampZto4:           ld		(SBnKZScaled),hl					; hl = signed calculation and > 4
  61++C419 7D                                   ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  62++C41A 32 B8 7E                             ld      (varT),a
  63++C41D 7C                                   ld		a,h
  64++C41E 32 9B 7E                             ld      (varU),a
  65++C421 C9                                   ret
  66++C422              ; This is where we limit 4 to a minimum of 4
  67++C422 21 04 00     .ClampZto4:             ld		hl,4
  68++C425 22 7C C0                             ld		(SBnKZScaled),hl; BODGE FOR NOW
  69++C428 7D                                   ld		a,l
  70++C429 32 B8 7E                             ld      (varT),a                            ;                                                                           ;;;
  71++C42C 7C                                   ld		a,h
  72++C42D 32 9B 7E                             ld      (varU),a 						; compatibility for now
  73++C430 C9                                   ret
  74++C431
# file closed: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
 395+ C431
 396+ C431
 397+ C431 ED 4B 7C C0  ScaleSunTo8Bit:			ld			bc,(SBnKZScaled)
 398+ C435 2A 78 C0                             ld			hl,(SBnKXScaled)
 399+ C438 ED 5B 7A C0                          ld			de,(SBnKYScaled)
 400+ C43C 78           .SetABSbc:              ld			a,b
 401+ C43D DD 67                                ld			ixh,a
 402+ C43F E6 7F                                and			SignMask8Bit
 403+ C441 47                                   ld			b,a									; bc = ABS bc
 404+ C442 7C           .SetABShl:              ld			a,h
 405+ C443 DD 6F                                ld			ixl,a
 406+ C445 E6 7F                                and			SignMask8Bit
 407+ C447 67                                   ld			h,a									; hl = ABS hl
 408+ C448 7A           .SetABSde:              ld			a,d
 409+ C449 FD 67                                ld			iyh,a
 410+ C44B E6 7F                                and			SignMask8Bit
 411+ C44D 57                                   ld			d,a									; de = ABS de
 412+ C44E 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 413+ C44F B4                                   or			h                                   ; XX15+1	\ x hi
 414+ C450 B2                                   or			d                                   ; XX15+4	\ y hi
 415+ C451 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 416+ C453                                      ShiftHLRight1
 416+ C453 CB 3C       >			   srl h
 416+ C455 CB 1D       >			   rr  l
 417+ C457                                      ShiftDERight1
 417+ C457 CB 3A       >			   srl d
 417+ C459 CB 1B       >			   rr  e
 418+ C45B                                      ShiftBCRight1
 418+ C45B CB 38       >			   srl b
 418+ C45D CB 19       >			   rr  c
 419+ C45F C3 4E C4                             jp          .ScaleNodeTo8BitLoop
 420+ C462              ; now we have scaled values we have to deal with sign
 421+ C462 DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 422+ C464 E6 80                                and			SignOnly8Bit
 423+ C466 B0                                   or			b
 424+ C467 47                                   ld			b,a
 425+ C468 DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 426+ C46A E6 80                                and			SignOnly8Bit
 427+ C46C B4                                   or			h
 428+ C46D 67                                   ld			h,a
 429+ C46E FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 430+ C470 E6 80                                and			SignOnly8Bit
 431+ C472 B2                                   or			d
 432+ C473 57                                   ld			d,a
 433+ C474 ED 43 7C C0  .SignsDoneSaveResult:	ld			(SBnKZScaled),bc
 434+ C478 22 78 C0                             ld			(SBnKXScaled),hl
 435+ C47B ED 53 7A C0                          ld			(SBnKYScaled),de
 436+ C47F 78                                   ld			a,b
 437+ C480 32 9B 7E                             ld			(varU),a
 438+ C483 79                                   ld			a,c
 439+ C484 32 B8 7E                             ld			(varT),a
 440+ C487 C9                                   ret
 441+ C488
 442+ C488              ;--------------------------------------------------------------------------------------------------------
 443+ C488              ;;;;X = normal scale
 444+ C488              ;;;;ZtempHi = zhi
 445+ C488              ;;;;......................................................
 446+ C488              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 447+ C488              ;;;;  Loop                                              ::LL90
 448+ C488              ;;;;     inc X
 449+ C488              ;;;;     divide X, Y & ZtempHiLo by 2
 450+ C488              ;;;;  Until ZtempHi = 0
 451+ C488              ;;;;......................................................
 452+ C488              ;-LL21---------------------------------------------------------------------------------------------------
 453+ C488              ;                        include "./Universe/NormaliseTransMat.asm"
 454+ C488              ;-LL91---------------------------------------------------------------------------------------------------
 455+ C488
 456+ C488              ; Now we have
 457+ C488              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 458+ C488              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 459+ C488              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 460+ C488              ;
 461+ C488              ;--------------------------------------------------------------------------------------------------------
 462+ C488              ;--------------------------------------------------------------------------------------------------------
 463+ C488              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 464+ C488              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 465+ C488              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 466+ C488              ; Returns
 467+ C488              ;
 468+ C488              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 469+ C488              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 470+ C488              ;
 471+ C488              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 472+ C488              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 473+ C488              ;
 474+ C488              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 475+ C488              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 476+ C488
 477+ C488
 478+ C488               ; TESTEDOK
 479+ C488              SXX12DotOneRow:
 480+ C488              SXX12CalcX:              N0equN1byN2div256 varT, (hl), (SBnKXScaled)       ; T = (hl) * regSunXX15fx /256
 480+ C488 3A 78 C0    >                        ld      a,(SBnKXScaled)                        ;
 480+ C48B 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 480+ C48C 7E          >                        ld      a,(hl)                        ; A = XX16 element
 480+ C48D 57          >                        ld      d,a
 480+ C48E ED 30       >                        mul
 480+ C490 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 480+ C491 32 B8 7E    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 481+ C494 23                                   inc     hl                                  ; move to sign byte
 482+ C495              SXX12CalcXSign:          AequN1xorN2 SBnKXScaledSign,(hl)             ;
 482+ C495 3A 79 C0    >                        ld      a,(SBnKXScaledSign)
 482+ C498 AE          >                        xor     (hl)
 483+ C499 32 9E 7E                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 484+ C49C 23                                   inc     hl
 485+ C49D              SXX12CalcY:              N0equN1byN2div256 varQ, (hl),(SBnKYScaled)       ; Q = XX16 * SunXX15 /256 using varQ to hold regSunXX15fx
 485+ C49D 3A 7A C0    >                        ld      a,(SBnKYScaled)                        ;
 485+ C4A0 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 485+ C4A1 7E          >                        ld      a,(hl)                        ; A = XX16 element
 485+ C4A2 57          >                        ld      d,a
 485+ C4A3 ED 30       >                        mul
 485+ C4A5 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 485+ C4A6 32 9C 7E    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 486+ C4A9                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 486+ C4A9 3A B8 7E    >                        ld       a,(varT)
 486+ C4AC 32 9D 7E    >                        ld       (varR),a
 487+ C4AF 23                                   inc     hl
 488+ C4B0                                      AequN1xorN2 SBnKYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 488+ C4B0 3A 7B C0    >                        ld      a,(SBnKYScaledSign)
 488+ C4B3 AE          >                        xor     (hl)
 489+ C4B4              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 490+ C4B4 E5           SSTequSRplusAQ           push    hl
 491+ C4B5 CD 59 9B                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 492+ C4B8 E1                                   pop     hl
 493+ C4B9 32 B8 7E                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 494+ C4BC 23                                   inc     hl
 495+ C4BD              SXX12CalcZ:              N0equN1byN2div256 varQ,(hl),(SBnKZScaled)       ; Q = |sidev_z| * z_lo / 256
 495+ C4BD 3A 7C C0    >                        ld      a,(SBnKZScaled)                        ;
 495+ C4C0 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 495+ C4C1 7E          >                        ld      a,(hl)                        ; A = XX16 element
 495+ C4C2 57          >                        ld      d,a
 495+ C4C3 ED 30       >                        mul
 495+ C4C5 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 495+ C4C6 32 9C 7E    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 496+ C4C9                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 496+ C4C9 3A B8 7E    >                        ld       a,(varT)
 496+ C4CC 32 9D 7E    >                        ld       (varR),a
 497+ C4CF 23                                   inc     hl
 498+ C4D0                                      AequN1xorN2 SBnKZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 498+ C4D0 3A 7D C0    >                        ld      a,(SBnKZScaledSign)
 498+ C4D3 AE          >                        xor     (hl)
 499+ C4D4              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 500+ C4D4 CD 59 9B                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 501+ C4D7              ; Now we exit with A = result S = Sign
 502+ C4D7 C9                                   ret
 503+ C4D8
 504+ C4D8
 505+ C4D8
 506+ C4D8              ;--------------------------------------------------------------------------------------------------------
 507+ C4D8                                      include "./Universe/Sun/CopySunXX12ScaledToSunXX18.asm"
# file opened: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
   1++C4D8              CopySXX12ScaledToSXX18:
   2++C4D8              CopyResultToSDrawCam:
   3++C4D8                      ldCopyByte SXX12         ,SXX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C4D8 3A 7E C0    >                        ld       a,(SXX12)
   3++C4DB 32 6C C0    >                        ld       (SXX18),a
   4++C4DE                      ldCopyByte SXX12+1       ,SXX18+2           ; XX12+1 => XX18+2
   4++C4DE 3A 7F C0    >                        ld       a,(SXX12+1)
   4++C4E1 32 6E C0    >                        ld       (SXX18+2),a
   5++C4E4                      ldCopyByte SXX12+2       ,SXX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C4E4 3A 80 C0    >                        ld       a,(SXX12+2)
   5++C4E7 32 6F C0    >                        ld       (SXX18+3),a
   6++C4EA                      ldCopyByte SXX12+3       ,SXX18+5           ; XX12+3 => XX18+5
   6++C4EA 3A 81 C0    >                        ld       a,(SXX12+3)
   6++C4ED 32 71 C0    >                        ld       (SXX18+5),a
   7++C4F0                      ldCopyByte SXX12+4       ,SXX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C4F0 3A 82 C0    >                        ld       a,(SXX12+4)
   7++C4F3 32 72 C0    >                        ld       (SXX18+6),a
   8++C4F6                      ldCopyByte SXX12+5       ,SXX18+8           ; XX12+5 => XX18+8
   8++C4F6 3A 83 C0    >                        ld       a,(SXX12+5)
   8++C4F9 32 74 C0    >                        ld       (SXX18+8),a
   9++C4FC C9                   ret
  10++C4FD
# file closed: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
 508+ C4FD              ;                        include "./Variables/CopySunXX12toSunXX15.asm"
 509+ C4FD              ;                       include "./Variables/CopySunXX18toSunXX15.asm"
 510+ C4FD              ;                       include "./Variables/CopySunXX18ScaledToSunXX15.asm"
 511+ C4FD              ;                       include "./Variables/CopySunXX12ToScaled.asm"
 512+ C4FD              ;--------------------------------------------------------------------------------------------------------
 513+ C4FD              ;                        include "./Maths/Utilities/DotProductXX12SunXX15.asm"
 514+ C4FD              ;--------------------------------------------------------------------------------------------------------
 515+ C4FD
 516+ C4FD DD 25        ScaleDownSXX15byIXH:    dec     ixh
 517+ C4FF F8                                   ret     m
 518+ C500 21 78 C0                             ld      hl,SBnKXScaled
 519+ C503 CB 3E                                srl     (hl)                        ; SunXX15  \ xnormal lo/2 \ LL93+3 \ counter X
 520+ C505 23                                   inc     hl                          ; looking at SunXX15 x sign now
 521+ C506 23                                   inc     hl                          ; looking at SunXX15 y Lo now
 522+ C507 CB 3E                                srl     (hl)                        ; SunXX15+2    \ ynormal lo/2
 523+ C509 23                                   inc     hl                          ; looking at SunXX15 y sign now
 524+ C50A 23                                   inc     hl                          ; looking at SunXX15 z Lo now
 525+ C50B CB 3E                                srl     (hl)
 526+ C50D C3 FD C4                             jp      ScaleDownSXX15byIXH
 527+ C510 C9                                   ret
 528+ C511
 529+ C511 21 6C C0     DivideSXX18By2:         ld      hl,SBnKDrawCam0xLo
 530+ C514 CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 531+ C516 23                                   inc     hl                          ; looking at XX18 x sign now
 532+ C517 23                                   inc     hl                          ; looking at XX18 y Lo now
 533+ C518 CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 534+ C51A 23                                   inc     hl                          ; looking at XX18 y sign now
 535+ C51B 23                                   inc     hl                          ; looking at XX18 z Lo now
 536+ C51C CB 3E                                srl     (hl)
 537+ C51E C9                                   ret
 538+ C51F
 539+ C51F              ; ......................................................                                                         ;;;
 540+ C51F
 541+ C51F
 542+ C51F
 543+ C51F
 544+ C51F              ; Pitch and roll are 2 phases
 545+ C51F              ; 1 - we apply our pitch and roll to the ship position
 546+ C51F              ;       x -> x + alpha * (y - alpha * x)
 547+ C51F              ;       y -> y - alpha * x - beta * z
 548+ C51F              ;       z -> z + beta * (y - alpha * x - beta * z)
 549+ C51F              ; which can be simplified as:
 550+ C51F              ;       1. K2 = y - alpha * x
 551+ C51F              ;       2. z = z + beta * K2
 552+ C51F              ;       3. y = K2 - beta * z
 553+ C51F              ;       4. x = x + alpha * y
 554+ C51F              ; 2 - we apply our patch and roll to the ship orientation
 555+ C51F              ;      Roll calculations:
 556+ C51F              ;
 557+ C51F              ;        nosev_y = nosev_y - alpha * nosev_x_hi
 558+ C51F              ;        nosev_x = nosev_x + alpha * nosev_y_hi
 559+ C51F              ;      Pitch calculations:
 560+ C51F              ;
 561+ C51F              ;        nosev_y = nosev_y - beta * nosev_z_hi
 562+ C51F              ;        nosev_z = nosev_z + beta * nosev_y_hi
 563+ C51F
 564+ C51F
 565+ C51F                          INCLUDE "./Universe/Sun/SunApplyMyRollAndPitch.asm"
# file opened: ././Universe/Sun/SunApplyMyRollAndPitch.asm
   1++C51F
   2++C51F              ; Full version
   3++C51F              ; 1. K2 = y - alpha * x
   4++C51F              ; 2. z = z + beta * K2
   5++C51F              ; 3. y = K2 - beta * z
   6++C51F              ; 4. x = x + alpha * y
   7++C51F
   8++C51F
   9++C51F
  10++C51F              ; SunrollWork holds Alpha intermidate results
  11++C51F              ;  1. K2 = y - alpha * x
  12++C51F              ;  2. z = z + beta * K2
  13++C51F              ;  3. y = K2 - beta * z
  14++C51F              ;  4. x = x + alpha * y
  15++C51F              ;.... or
  16++C51F              ;  2. z = z + (beta * (y - alpha * x))
  17++C51F              ;  3. y = (y - alpha * x) - (beta * z)
  18++C51F              ;  4. x = x + (alpha * y)
  19++C51F
  20++C51F
  21++C51F              ;----------------------------------------------------------------------------------------------------------------------------------
  22++C51F              ; Sun version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
  23++C51F              ; Need to write a test routine for roll and pitchs
  24++C51F 00 00 00 00  SunAlphaMulX            DS 4
  25++C523 00 00 00 00  SunAlphaMulY            DS 4
  26++C527 00 00 00 00  SunBetaMulZ             DS 4
  27++C52B 00 00 00     SunK2                   DS 3
  28++C52E
  29++C52E 3A B5 7D     SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  30++C531 21 A8 7D                             ld      hl,BETA
  31++C534 B6                                   or      (hl)
  32++C535 E6 7F                                and     SignMask8Bit
  33++C537 CA E8 C5                             jp      z,.NoRotation
  34++C53A 3A B5 7D     .CalcAlphaMulX:         ld      a,(ALPHA)                   ; get roll magnitude
  35++C53D EE 80                                xor     SignOnly8Bit                ; d = -alpha (Q value)
  36++C53F 57                                   ld      d,a                         ; .
  37++C540 3A 10 C0                             ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
  38++C543 5F                                   ld      e,a                         ; .
  39++C544 2A 11 C0                             ld      hl,(SBnKxhi)                ; .
  40++C547 CD E6 90                             call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256 where d = sign byte
  41++C54A              .SaveAlphaMulX:         ;ld      a,c                         ; a = upper byte of results which will have the sign               ONLY NEEDED FOR DEBUGGING TEST
  42++C54A                                      ;ld      (SunAlphaMulX),a            ; save sign from result, ELC holds actual result                   ONLY NEEDED FOR DEBUGGING TEST
  43++C54A 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
  44++C54B 32 20 C5                             ld      (SunAlphaMulX+1),a
  45++C54E 7B                                   ld      a,e
  46++C54F 32 21 C5                             ld      (SunAlphaMulX+2),a
  47++C552 7A                                   ld      a,d
  48++C553 32 22 C5                             ld      (SunAlphaMulX+3),a          ; we actually only want X1 X2 X3 later as its /256
  49++C556 ED 5B 14 C0  .CalcK2:                ld      de,(SBnKyhi)                ; DEL = Y
  50++C55A 3A 13 C0                             ld      a,(SBnKylo)                 ; .
  51++C55D 6F                                   ld      l,a                         ; .
  52++C55E ED 4B 21 C5                          ld      bc,(SunAlphaMulX+2)         ; BCH = Y sgn, hi, lo, we loose the C from result
  53++C562 3A 20 C5                             ld      a,(SunAlphaMulX+1)          ; Deal with sign in byte 4
  54++C565 67                                   ld      h,a                         ; .
  55++C566 CD F2 00                             call    AddBCHtoDELsigned           ; DEL = y - (alpha * x)
  56++C569 7D                                   ld      a,l                         ; K2  = DEA = DEL = y - (alpha * x)
  57++C56A 32 2B C5                             ld      (SunK2),a                   ; we also need to save l for teh beta k2 calc
  58++C56D ED 53 2C C5                          ld      (SunK2+1),de                ;
  59++C571 EB           .CalcBetaMulK2:         ex      de,hl                       ; HLE == DEA
  60++C572 5F                                   ld      e,a                         ; .
  61++C573 3A A8 7D                             ld      a,(BETA)                    ; D = BETA
  62++C576 57                                   ld      d,a                         ; .
  63++C577 CD E6 90                             call    mulHLEbyDSigned             ; DELC = Beta * K2, DEL = Beta/256 * K2
  64++C57A ED 4B 17 C0  .CalcZ:                 ld      bc,(SBnKzhi)                ; BCH = z
  65++C57E 3A 16 C0                             ld      a,(SBnKzlo)                 ;
  66++C581 67                                   ld      h,a                         ;
  67++C582 CD F2 00                             call    AddBCHtoDELsigned           ; DEL still = Beta * K2 so its z + Beta * K2
  68++C585 ED 53 17 C0                          ld      (SBnKzhi),de                ; z = resuklt
  69++C589 7D                                   ld      a,l                         ; .
  70++C58A 32 16 C0                             ld      (SBnKzlo),a                 ; .
  71++C58D 3A A8 7D     .CalcBetaZ:             ld      a,(BETA)
  72++C590 EE 80                                xor     SignOnly8Bit                ; d = -beta (Q value)
  73++C592 57                                   ld      d,a                         ; .
  74++C593 3A 16 C0                             ld      a,(SBnKzlo)                 ; HLE = z
  75++C596 5F                                   ld      e,a                         ; .
  76++C597 2A 17 C0                             ld      hl,(SBnKzhi)                ; .
  77++C59A CD E6 90                             call    mulHLEbyDSigned             ; DELC = z * -beta, so DEL = Z * -beta / 256 where d = sign byte
  78++C59D              .SaveAlphaMulZ:         ;ld      a,c                         ; a = upper byte of results which will have the sign             ONLY NEEDED FOR DEBUGGING TEST
  79++C59D                                      ;ld      (SunBetaMulZ),a             ; save sign from result, ELC holds actual result                 ONLY NEEDED FOR DEBUGGING TEST
  80++C59D                                      ;ld      a,l                         ; also save all of alpha *X as we will need it later             ONLY NEEDED FOR DEBUGGING TEST
  81++C59D                                      ;ld      (SunBetaMulZ+1),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  82++C59D                                      ;ld      a,e                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  83++C59D                                      ;ld      (SunBetaMulZ+2),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  84++C59D                                      ;ld      a,d                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  85++C59D                                      ;ld      (SunBetaMulZ+3),a           ; we actually only want X1 X2 X3 later as its /256               ONLY NEEDED FOR DEBUGGING TEST
  86++C59D 42 4B        .CalcY:                 ld      bc,de                       ; bch = - Beta * z
  87++C59F 65                                   ld      h,l
  88++C5A0 ED 5B 2C C5                          ld      de,(SunK2+1)                ; DEL = k2
  89++C5A4 3A 2B C5                             ld      a,(SunK2)
  90++C5A7 6F                                   ld      l,a
  91++C5A8 CD F2 00                             call    AddBCHtoDELsigned           ; DEL = K2 - Beta * Z
  92++C5AB ED 53 14 C0                          ld      (SBnKyhi),de                ; y = DEL = K2 - Beta * Z
  93++C5AF 7D                                   ld      a,l                         ; .
  94++C5B0 32 13 C0                             ld      (SBnKylo),a                 ; .
  95++C5B3 3A B5 7D     .CalcAlphaMulY:         ld      a,(ALPHA)
  96++C5B6 57                                   ld      d,a                         ; d = alpha (Q value)
  97++C5B7 3A 13 C0                             ld      a,(SBnKylo)                 ; HLE = x sgn, hi, lo
  98++C5BA 5F                                   ld      e,a                         ; .
  99++C5BB 2A 14 C0                             ld      hl,(SBnKyhi)                ; .
 100++C5BE CD E6 90                             call    mulHLEbyDSigned             ; DELC = y * alpha, so DEL = Y * alpha / 256 where d = sign byte
 101++C5C1 79           .SaveAlphaMulY:         ld      a,c                         ; a = upper byte of results which will have the sign
 102++C5C2 32 23 C5                             ld      (SunAlphaMulY),a            ; save sign from result, ELC holds actual result
 103++C5C5 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
 104++C5C6 32 24 C5                             ld      (SunAlphaMulY+1),a
 105++C5C9 7B                                   ld      a,e
 106++C5CA 32 25 C5                             ld      (SunAlphaMulY+2),a
 107++C5CD 7A                                   ld      a,d
 108++C5CE 32 26 C5                             ld      (SunAlphaMulY+3),a
 109++C5D1 42 4B        .CalcxPLusAlphaY:       ld      bc,de                        ; BCH = Y sgn, hi, lo, we loose the C from result Deal with sign in byte 4
 110++C5D3 65                                   ld      h,l                         ; .
 111++C5D4 ED 5B 11 C0                          ld      de,(SBnKxhi)                ; DEL = Y
 112++C5D8 3A 10 C0                             ld      a,(SBnKxlo)                 ; .
 113++C5DB 6F                                   ld      l,a                         ; .
 114++C5DC CD F2 00                             call    AddBCHtoDELsigned           ; DEL = x + alpha * Y
 115++C5DF 7A           .SaveResult1:           ld      a,d                         ; Result 1 (X) = AHL + DEL
 116++C5E0 63                                   ld      h,e                         ;
 117++C5E1 32 12 C0     .CopyResultTo2:         ld      (SBnKxlo+2),a               ; .
 118++C5E4 22 10 C0                             ld      (SBnKxlo) ,hl               ; .
 119++C5E7 C9                                   ret
 120++C5E8 3A 96 7E     .NoRotation:            ld      a,(DELTA)                   ; BCH = - Delta
 121++C5EB                                      ReturnIfAIsZero
 121++C5EB A7          >                        and     a
 121++C5EC C8          >                        ret     z
 122++C5ED 0E 00                                ld      c,0                         ;
 123++C5EF 67                                   ld      h,a                         ;
 124++C5F0 06 80                                ld      b,$80                       ;
 125++C5F2 ED 5B 17 C0                          ld      de,(SBnKzhi)                ; DEL = z position
 126++C5F6 3A 16 C0                             ld      a,(SBnKzlo)                 ; .
 127++C5F9 6F                                   ld      l,a                         ; .
 128++C5FA CD F2 00                             call    AddBCHtoDELsigned           ; update speed
 129++C5FD ED 53 17 C0                          ld      (SBnKzhi),DE                ; write back to zpos
 130++C601 7D                                   ld      a,l
 131++C602 32 16 C0                             ld      (SBnKzlo),a                ;
 132++C605 C9                                   ret
 133++C606              ;
 134++C606              ;SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
 135++C606              ;                        ld      hl,BETA
 136++C606              ;                        or      (hl)
 137++C606              ;                        and     SignMask8Bit
 138++C606              ;                        ret     z
 139++C606              ;.CalcZ:                 ;break
 140++C606              ;                        ld      a,(ALPHA)                   ; get roll magnitude
 141++C606              ;                        xor     SignOnly8Bit                ; get Q = -alpha
 142++C606              ;                        ld      d,a                         ; d reg represents Q (abount to roll)
 143++C606              ;                        ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
 144++C606              ;                        ld      e,a                         ;
 145++C606              ;                        ld      hl,(SBnKxhi)                ;
 146++C606              ;                        call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256
 147++C606              ;                        ld      a,d
 148++C606              ;                        ld      (SunRollResultp4),a         ; save D (I guess we need the sign?)
 149++C606              ;.CalcYPlusDEL:          ld      a,(SBnKylo)                 ; BCH = Y sgn, hi, lo
 150++C606              ;                        ld      h,a
 151++C606              ;                        ld      bc,(SBnKyhi)
 152++C606              ;                        call    AddBCHtoDELsigned           ; DEL = Y - ( X *  alpha /256)
 153++C606              ;.SaveResult1:           ld      a,l                         ; SunPitchWork = DEL
 154++C606              ;                        ;ld      (SunRollResult), a          ; SunPitchWork + 0 = L
 155++C606              ;                        ex      de,hl                       ; SunPitchWork + 1 = E
 156++C606              ;.CopyResultTo2:         ld      (SunRollResult+1),a         ; SunPitchWork + 2 = D
 157++C606              ;                        ld      (SunRollResult+1) ,hl       ; Copy K to K2 (y - alpha * x)
 158++C606              ;                        ;ld      (SunRollResult2+1),hl       ; also HLA = result
 159++C606              ;                        ld      a,(SunRollResult)           ; .
 160++C606              ;                        ;ld      (SunRollResult2),a          ; .
 161++C606              ;.CalcY:                 ld      e,a                         ; so now HLE = result
 162++C606              ;                        ld      a,(BETA)                    ; get pitch
 163++C606              ;                        ld      d,a                         ; now D = BETA
 164++C606              ;                        call    mulHLEbyDSigned             ; DELC = (y - alpha * x /256 ) * Beta
 165++C606              ;                        ld      bc,(SBnKzhi)                ; BCH = z
 166++C606              ;                        ld      a,(SBnKzlo)                 ;
 167++C606              ;                        ld      h,a                         ;
 168++C606              ;                        call    AddBCHtoDELsigned           ; DEL = z + ((y - alpha * x /256 ) * Beta) /256
 169++C606              ;.SaveZResult:           ld      (SunZResult+1),de           ; We now have a z result which we save
 170++C606              ;                        ld      (SBnKzhi),de                ; .
 171++C606              ;                        ld      a,l                         ; .
 172++C606              ;                        ld      (SunZResult),a              ; .
 173++C606              ;                        ld      (SBnKzlo),a                 ; .
 174++C606              ;.CalcMinusBetaMulZ:     ex      de,hl                       ; HLE = DEL = z post calculation
 175++C606              ;                        ld      e,l                         ;
 176++C606              ;                        ld      a,(BETA)                    ; d = - BETA
 177++C606              ;                        ld      d,a                         ;
 178++C606              ;                        xor     SignOnly8Bit                ;
 179++C606              ;                        call    mulHLEbyDSigned             ; DELC = z * - BETA
 180++C606              ;                        ld      bc, (SunRollResult+1)       ; BCH = (y - alpha * x) (or K2)
 181++C606              ;                        ld      a,(SunRollResult)           ;
 182++C606              ;                        ld      h,a                         ;
 183++C606              ;                        call    AddBCHtoDELsigned           ; DEL = (y - alpha * x) - (Z * BETA)
 184++C606              ;                        ld      (SBnKyhi),de                ; y = (y - alpha * x) - (Z * BETA)
 185++C606              ;                        ld      a,l                         ;
 186++C606              ;                        ld      (SBnKylo),a                 ;
 187++C606              ;.CalcX:                 ex      de,hl                       ; HLE = DEL = Y
 188++C606              ;                        ld      e,l                         ;
 189++C606              ;                        ld      a,(ALPHA)
 190++C606              ;                        ld      d,a                         ; D = alpha
 191++C606              ;                        call    mulHLEbyDSigned             ; DELC = Y * alpha
 192++C606              ;                        ld      bc,(SBnKxhi)                ; BCH = x
 193++C606              ;                        ld      a,(SBnKxlo)                 ;
 194++C606              ;                        ld      h,a                         ;
 195++C606              ;                        call    AddBCHtoDELsigned           ; DEL = x + (alpha * y /256 )
 196++C606              ;                        ld      (SBnKxhi),de                ; x = x + (alpha * y /256 )
 197++C606              ;                        ld      a,h                         ;
 198++C606              ;                        ld      (SBnKxlo),a                 ;
 199++C606              ;                        ret
 200++C606              ;
# file closed: ././Universe/Sun/SunApplyMyRollAndPitch.asm
 566+ C606              ;            INCLUDE "./Universe/SunApplyShipRollAndPitch.asm"
 567+ C606
 568+ C606 00           SunOnScreen             DB 0
 569+ C607 00 00        cLineArrayPtr            DW 0
 570+ C609 00           LineCount               DB 0
 571+ C60A 00           RaggedSize              DB 0
 572+ C60B 00           MinYOffset              DB 0
 573+ C60C 00           MaxYOffSet              DB 0
 574+ C60D 00 00        SunScrnX                DW  0       ; signed
 575+ C60F 00 00        SunScrnY                DW  0       ; signed
 576+ C611 00           SunRadius               DB  0       ; unsigned
 577+ C612              ; draw circle
 578+ C612
 579+ C612              ;
 580+ C612              ;DIVD3B2 K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo)
 581+ C612
 582+ C612 00 00 00 00  SunVarK                 DS 4
 583+ C616 00 00 00     SunVarP                 DS 3
 584+ C619 00           SunVarQ                 DS 1
 585+ C61A 00           SunVarR                 DS 1
 586+ C61B 00           SunVarS                 DS 1
 587+ C61C 00           SunVarT                 DS 1
 588+ C61D
 589+ C61D              ; Optimisation
 590+ C61D              ; if a <> 0
 591+ C61D              ;       divide AH by CD
 592+ C61D              ; if h <> 0
 593+ C61D              ;      if c <> 0 return 0
 594+ C61D              ;      else
 595+ C61D              ;        divide HL by DE
 596+ C61D              ; if l <>0
 597+ C61D              ;      if c or d <> 0 return 0
 598+ C61D              ;      else
 599+ C61D              ;        divide l by e
 600+ C61D              ;
 601+ C61D 47           SunAHLequAHLDivCDE:     ld      b,a                         ; save a reg
 602+ C61E 79                                   ld      a,c                         ; check for divide by zero
 603+ C61F B2                                   or      d                           ; .
 604+ C620 B3                                   or      e                           ; .
 605+ C621                                      JumpIfZero      .divideByZero       ; .
 605+ C621 CA 3A C6    >                        jp	z,.divideByZero
 606+ C624 78                                   ld      a,b                         ; get a back
 607+ C625                                      JumpIfAIsNotZero    .divideAHLbyCDE
 607+ C625 A7          >                        and     a
 607+ C626 C2 41 C6    >                        jp	    nz,.divideAHLbyCDE
 608+ C629 7C           .AIsZero:               ld      a,h
 609+ C62A                                      JumpIfAIsNotZero    .divideHLbyDE
 609+ C62A A7          >                        and     a
 609+ C62B C2 48 C6    >                        jp	    nz,.divideHLbyDE
 610+ C62E 7D           .HIsZero:               ld      a,l
 611+ C62F                                      JumpIfAIsNotZero    .divideLbyE
 611+ C62F A7          >                        and     a
 611+ C630 C2 57 C6    >                        jp	    nz,.divideLbyE
 612+ C633              .resultIsZero:          ZeroA
 612+ C633 AF          >                        xor a
 613+ C634 67                                   ld      h,a                        ; result is zero so set hlde
 614+ C635 6F                                   ld      l,a                        ; result is zero so set hlde
 615+ C636 54 5D                                ld      de,hl
 616+ C638                                      ClearCarryFlag
 616+ C638 B7          >                        or a
 617+ C639 C9                                   ret
 618+ C63A 3E FF        .divideByZero:          ld      a,$FF
 619+ C63C 67                                   ld      h,a
 620+ C63D 6F                                   ld      l,a
 621+ C63E 54 5D                                ld      de,hl
 622+ C640                                      SetCarryFlag
 622+ C640 37          >                        scf
 623+ C641              ; AHL = ahl/cde, this could be a genuine 24 bit divide
 624+ C641              ; if AHL is large and cde small then the value will be big so will be off screen so we can risk 16 bit divide
 625+ C641 CD 2D 8F     .divideAHLbyCDE:        call    Div24by24
 626+ C644 EB                                   ex      hl,de                         ; ahl is result
 627+ C645 79                                   ld      a,c                           ; ahl is result
 628+ C646                                      ClearCarryFlag
 628+ C646 B7          >                        or a
 629+ C647
 630+ C647 C9                                   ret
 631+ C648              ; AHL = 0hl/0de as A is zero
 632+ C648 79           .divideHLbyDE:          ld      a,c                         ;'if c = 0 then result must be zero
 633+ C649                                      JumpIfAIsNotZero   .resultIsZero
 633+ C649 A7          >                        and     a
 633+ C64A C2 33 C6    >                        jp	    nz,.resultIsZero
 634+ C64D 44 4D                                ld      bc,hl
 635+ C64F CD 58 95                             call    BC_Div_DE                   ; BC = HL/DE
 636+ C652 60 69                                ld      hl,bc
 637+ C654                                      ZeroA                               ; so we can set A to Zero
 637+ C654 AF          >                        xor a
 638+ C655                                      ClearCarryFlag
 638+ C655 B7          >                        or a
 639+ C656 C9                                   ret
 640+ C657              ; AHL = 00l/00e as A and H are zero
 641+ C657 79           .divideLbyE:            ld      a,c                         ; if d = 0 then result must be zero
 642+ C658 B2                                   or      d
 643+ C659                                      JumpIfAIsNotZero   .resultIsZero
 643+ C659 A7          >                        and     a
 643+ C65A C2 33 C6    >                        jp	    nz,.resultIsZero
 644+ C65D 4B                                   ld      c,e
 645+ C65E 5D                                   ld      e,l
 646+ C65F CD 1A 95                             call    E_Div_C
 647+ C662 6F                                   ld      l,a
 648+ C663                                      ZeroA
 648+ C663 AF          >                        xor a
 649+ C664 67                                   ld      h,a
 650+ C665                                      ClearCarryFlag
 650+ C665 B7          >                        or a
 651+ C666 C9                                   ret
 652+ C667
 653+ C667
 654+ C667              ; Needs tuning for registers vs memroy
 655+ C667 22 16 C6     SunKEquAHLDivCDE:       ld      (SunVarP),hl
 656+ C66A 32 18 C6                             ld      (SunVarP+2),a
 657+ C66D ED 53 19 C6                          ld      (SunVarQ),de
 658+ C671 79                                   ld      a,c
 659+ C672 32 1B C6                             ld      (SunVarS),a
 660+ C675 3A 16 C6     SunDivD3B:              ld      a,(SunVarP)                 ; Ensure P is at least 1
 661+ C678 F6 01                                or      1
 662+ C67A 32 16 C6                             ld      (SunVarP),a
 663+ C67D 3A 18 C6                             ld      a,(SunVarP+2)               ; T = Sign xor Sign
 664+ C680 21 1B C6                             ld      hl,SunVarS
 665+ C683 AE                                   xor     (hl)
 666+ C684 E6 80                                and     SignOnly8Bit
 667+ C686 32 1C C6                             ld      (SunVarT),a
 668+ C689 06 00                                ld      b,0                         ; b = y counter
 669+ C68B 3A 18 C6                             ld      a,(SunVarP+2)               ; a = abs high byte of p
 670+ C68E E6 7F                                and     SignMask8Bit                ; .
 671+ C690 2A 16 C6                             ld      hl,(SunVarP)                ; shift P left
 672+ C693              .SunDVL9:               JumpIfAGTENusng   64, .SunDV14      ; if high p > 64 then go to DV14
 672+ C693 FE 40       >                        cp     64
 672+ C695 D2 A2 C6    >                        jp		nc,.SunDV14
 673+ C698                                      ShiftHLLeft1                        ;
 673+ C698 CB 25       >			   sla l
 673+ C69A CB 14       >			   rl  h
 674+ C69C CB 17                                rl      a                           ;
 675+ C69E 04                                   inc     b                           ; increase shift count
 676+ C69F C3 93 C6                             jp      .SunDVL9
 677+ C6A2 22 16 C6     .SunDV14:               ld      (SunVarP),hl                ; save off var P
 678+ C6A5 32 18 C6                             ld      (SunVarP+2),a
 679+ C6A8 3A 1B C6                             ld      a,(SunVarS)                 ; a= ABS varS
 680+ C6AB E6 7F                                and     SignMask8Bit
 681+ C6AD 2A 19 C6                             ld      hl,(SunVarQ)                ; HL = vars Q & R
 682+ C6B0 05           .SunDVL6:               dec     b                           ; reduce b counter by 1
 683+ C6B1                                      ShiftHLLeft1                        ; varQRA  shift left
 683+ C6B1 CB 25       >			   sla l
 683+ C6B3 CB 14       >			   rl  h
 684+ C6B5 CB 17                                rl      a                           ;
 685+ C6B7 F2 B0 C6                             jp      p, .SunDVL6                 ; keep shifting until bit 7 of a is set
 686+ C6BA 22 19 C6                             ld      (SunVarQ),hl                ; save QR
 687+ C6BD 32 1B C6     .SunDV9:                ld      (SunVarS),a                 ; save S
 688+ C6C0                                      ;ld      a,h
 689+ C6C0                                      ;ld      (varQ),a
 690+ C6C0 4F                                   ld      c,a
 691+ C6C1 3A 18 C6                             ld      a,(SunVarP+2)
 692+ C6C4 C5                                   push    bc                          ; save shift counter in b
 693+ C6C5 CD CC 94                             call    DIV16Amul256dCUNDOC
 694+ C6C8                                      ;call    RequAmul256divQ
 695+ C6C8 79                                   ld      a, c
 696+ C6C9 32 9D 7E                             ld      (varR),a
 697+ C6CC C1                                   pop     bc                          ; retrieve shift counter
 698+ C6CD 21 00 00                             ld      hl,0                        ; set K to 0
 699+ C6D0 22 12 C6                             ld      (SunVarK),hl                ; .
 700+ C6D3 22 14 C6                             ld      (SunVarK+2),hl              ; .
 701+ C6D6 CB 78                                bit     7,b                         ; is counter positive
 702+ C6D8 28 32                                jr      z,.SunDV12                  ; .
 703+ C6DA 3A 9D 7E                             ld      a,(varR)                    ;
 704+ C6DD CB 27        .SunDVL8:               sla     a                           ; Shift K by 1 left
 705+ C6DF 21 13 C6                             ld      hl,SunVarK+1                ; .
 706+ C6E2 CB 16                                rl      (hl)                        ; .
 707+ C6E4 23                                   inc     hl                          ; .
 708+ C6E5 CB 16                                rl      (hl)                        ; .
 709+ C6E7 23                                   inc     hl                          ; .
 710+ C6E8 CB 16                                rl      (hl)                        ; .
 711+ C6EA 04                                   inc     b
 712+ C6EB 20 F0                                jr      nz,.SunDVL8                 ; loop until K is shifted
 713+ C6ED 32 12 C6                             ld      (SunVarK),a
 714+ C6F0 3A 15 C6                             ld      a,(SunVarK+3)
 715+ C6F3 21 1C C6                             ld      hl,SunVarT
 716+ C6F6 B6                                   or      (hl)
 717+ C6F7 32 15 C6                             ld      (SunVarK+3),a
 718+ C6FA C9                                   ret
 719+ C6FB 3A 9D 7E     .SunDV13:               ld      a,(varR)                    ; when we get here, shift is zero
 720+ C6FE 32 12 C6                             ld      (SunVarK),a
 721+ C701 3A 15 C6                             ld      a,(SunVarK+3)
 722+ C704 21 1C C6                             ld      hl,SunVarT
 723+ C707 B6                                   or      (hl)
 724+ C708 32 15 C6                             ld      (SunVarK+3),a
 725+ C70B C9                                   ret
 726+ C70C 78           .SunDV12:               ld      a,b
 727+ C70D A7                                   and     a
 728+ C70E 28 EB                                jr      z,.SunDV13
 729+ C710 3A 9D 7E                             ld      a,(varR)                    ; it probably is already R so need to test
 730+ C713 CB 2F        .SunDVL10:              sra     a                           ; Shift K by 1 left
 731+ C715 05                                   dec     b
 732+ C716 20 FB                                jr      nz,.SunDVL10
 733+ C718 32 12 C6                             ld      (SunVarK),a                 ; as original divide was onyl 8 bits K 1,2,3 don;t matter
 734+ C71B 3A 1C C6                             ld      a,(SunVarT)
 735+ C71E 32 15 C6                             ld      (SunVarK+3),a
 736+ C721 C9                                   ret
 737+ C722
 738+ C722
 739+ C722
 740+ C722 47           SunProcessVertex:       ld      b,a                         ; save sign byte
 741+ C723 ED 5B 16 C0  .SunProjectToEye:       ld      de,(SBnKzlo)                ; X Pos = X / Z
 742+ C727 3A 18 C0                             ld      a,(SBnKzsgn)                ; CDE = z
 743+ C72A FD 67                                ld      iyh,a                       ; save sign
 744+ C72C                                      ClearSignBitA
 744+ C72C E6 7F       >                        and     SignMask8Bit
 745+ C72E                                      ; Addeed as it neds to be AHL/0CD to force * 256 and get correct screen position on scaling
 746+ C72E              ;                        ld      c,a                         ;
 747+ C72E 5A                                   ld      e,d
 748+ C72F 57                                   ld      d,a
 749+ C730 0E 00                                ld      c,0
 750+ C732                                      ; added above to correct positioning as in reality its X/(Z/256)
 751+ C732 78                                   ld      a,b                         ; restore sign byte
 752+ C733 FD 6F                                ld      iyl,a                       ; save sign
 753+ C735                                      ClearSignBitA
 753+ C735 E6 7F       >                        and     SignMask8Bit
 754+ C737 CD 1D C6                             call SunAHLequAHLDivCDE             ; AHL = AHL/CDE unsigned
 755+ C73A              .CheckPosOnScreenX:     JumpIfAIsNotZero .IsOffScreen         ; if A has a value then its way too large regardless of sign
 755+ C73A A7          >                        and     a
 755+ C73B C2 58 C7    >                        jp	    nz,.IsOffScreen
 756+ C73E                                      JumpOnLeadSignSet h, .IsOffScreen      ; or bit 7 set of h
 756+ C73E 7C          >                        ld      a,h
 756+ C73F E6 80       >                        and     SignOnly8Bit
 756+ C741 C2 58 C7    >                        jp      nz,.IsOffScreen
 757+ C744 7C                                   ld      a,h
 758+ C745                                      ReturnIfAGTEusng 4                  ; if a > 1024 then its way too large regardless of sign
 758+ C745 FE 04       >                        cp    4
 758+ C747 D0          >                        ret	 nc
 759+ C748 FD 7C                                ld      a,iyh                       ; now deal with the sign
 760+ C74A FD AD                                xor     iyl
 761+ C74C                                      SignBitOnlyA                        ; a= resultant sign
 761+ C74C E6 80       >                        and     SignOnly8Bit
 762+ C74E 28 06                                jr      z,.calculatedVert           ; result is positive so we don't 2's compliment it
 763+ C750              .XIsNegative:           NegHL                               ; make 2's c as negative
 763+ C750 AF          >                    xor a
 763+ C751 95          >                    sub l
 763+ C752 6F          >                    ld l,a
 763+ C753 9F          >                    sbc a,a
 763+ C754 94          >                    sub h
 763+ C755 67          >                    ld h,a
 764+ C756              .calculatedVert:        ClearCarryFlag
 764+ C756 B7          >                        or a
 765+ C757 C9                                   ret
 766+ C758 21 FF 7F     .IsOffScreen:           ld      hl,$7FFF
 767+ C75B FD 7C                                ld      a,iyh
 768+ C75D FD AD                                xor     iyl
 769+ C75F                                      SignBitOnlyA
 769+ C75F E6 80       >                        and     SignOnly8Bit
 770+ C761 28 02                                jr      z,.calculatedOffScreen
 771+ C763 23                                   inc     hl                          ; set hl to $8001 i.e. -32768
 772+ C764 23                                   inc     hl                          ; .
 773+ C765              .calculatedOffScreen:   SetCarryFlag
 773+ C765 37          >                        scf
 774+ C766 C9                                   ret
 775+ C767
 776+ C767
 777+ C767              ; .........................................................................................................................
 778+ C767              ; we only hit this if z is positive so we can ignore signs
 779+ C767 ED 4B 16 C0  SunCalculateRadius:     ld      bc,(SBnKzlo)                ; DBC = z position
 780+ C76B 3A 18 C0                             ld      a,(SBnKzsgn)                ;
 781+ C76E 57                                   ld      d,a                         ;
 782+ C76F 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 783+ C772 CD F8 93                             call    Div16by24usgn               ; radius = HL/DBC = 24576 / distance z
 784+ C775 B4                                   or      h                           ; if A or H are not 0 then max Radius
 785+ C776                                      JumpIfAIsZero  .SaveRadius
 785+ C776 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 785+ C777 CA 7C C7    >                        jp	    z, .SaveRadius
 786+ C77A 1E F8        .MaxRadius:             ld      e,248                       ;set radius to 248 as maxed out
 787+ C77C 7D           .SaveRadius:            ld      a,l                         ; l = resultant radius
 788+ C77D F6 01                                or      1                           ; at least radius 1 (never even so need to test)
 789+ C77F 32 11 C6                             ld      (SunRadius),a               ; save a copy of radius now for later
 790+ C782 5F                                   ld      e,a                         ; as later code expects it to be in e
 791+ C783 C9                                   ret
 792+ C784
 793+ C784              ; Shorter version when sun does not need to be processed to screen
 794+ C784 3A 12 C0     SunUpdateCompass:       ld      a,(SBnKxsgn)
 795+ C787 2A 10 C0                             ld      hl,(SBnKxlo)
 796+ C78A CD 22 C7                             call    SunProcessVertex
 797+ C78D 22 19 C0                             ld      (SunCompassX),hl
 798+ C790 3A 15 C0                             ld      a,(SBnKysgn)
 799+ C793 2A 13 C0                             ld      hl,(SBnKylo)
 800+ C796 CD 22 C7                             call    SunProcessVertex
 801+ C799 22 1B C0                             ld      (SunCompassY),hl
 802+ C79C C9                                   ret
 803+ C79D
 804+ C79D                                 ; could probabyl set a variable say "varGood", default as 1 then set to 0 if we end up with a good calulation?? may not need it as we draw here
 805+ C79D CD 2E C5     SunUpdateAndRender:     call    SunApplyMyRollAndPitch
 806+ C7A0 3A 18 C0     .CheckDrawable:         ld      a,(SBnKzsgn)
 807+ C7A3                                      JumpIfAGTENusng 48,  SunUpdateCompass ; at a distance over 48 its too far away
 807+ C7A3 FE 30       >                        cp     48
 807+ C7A5 D2 84 C7    >                        jp		nc,SunUpdateCompass
 808+ C7A8 21 17 C0                             ld      hl,SBnKzhi                  ; if the two high bytes are zero then its too close
 809+ C7AB B6                                   or      (hl)
 810+ C7AC                                      JumpIfAIsZero       SunUpdateCompass
 810+ C7AC A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 810+ C7AD CA 84 C7    >                        jp	    z, SunUpdateCompass
 811+ C7B0 3A 12 C0     .calculateX:            ld      a,(SBnKxsgn)
 812+ C7B3 2A 10 C0                             ld      hl,(SBnKxlo)
 813+ C7B6 CD 22 C7                             call    SunProcessVertex            ; now returns carry set for failure
 814+ C7B9 22 19 C0                             ld      (SunCompassX),hl
 815+ C7BC D8                                   ret     c
 816+ C7BD 1E 80        .calculatedX:           ld      e,ScreenCenterX
 817+ C7BF 16 00                                ld      d,0
 818+ C7C1                                      ClearCarryFlag
 818+ C7C1 B7          >                        or a
 819+ C7C2 ED 5A                                adc     hl,de
 820+ C7C4                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 821+ C7C4 22 0D C6                             ld      (SunScrnX),hl               ; save projected X Position, 2's compliment
 822+ C7C7 3A 15 C0     .calculateY:            ld      a,(SBnKysgn)
 823+ C7CA 2A 13 C0                             ld      hl,(SBnKylo)
 824+ C7CD CD 22 C7                             call    SunProcessVertex            ; now returns carry set for failure
 825+ C7D0 22 1B C0                             ld      (SunCompassY),hl
 826+ C7D3 D8                                   ret     c
 827+ C7D4 1E 60        .calculatedY:           ld      e,ScreenCenterY
 828+ C7D6 16 00                                ld      d,0
 829+ C7D8 EB                                   ex      de,hl
 830+ C7D9                                      ClearCarryFlag
 830+ C7D9 B7          >                        or a
 831+ C7DA ED 52                                sbc     hl,de
 832+ C7DC                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 833+ C7DC 22 0F C6                             ld      (SunScrnY),hl               ; save projected Y Position, 2's compliment
 834+ C7DF              ; .........................................................................................................................
 835+ C7DF CD 67 C7                             call    SunCalculateRadius
 836+ C7E2              ; .........................................................................................................................
 837+ C7E2 2A 0D C6     .CheckIfSunOnScreen:    ld      hl,(SunScrnX)               ; get x pixel position
 838+ C7E5 FD 26 00                             ld      iyh,0                       ; iyh holds draw status, 0= OK
 839+ C7E8 16 00                                ld      d,0                         ; e still holds radius
 840+ C7EA 7C                                   ld      a,h
 841+ C7EB                                      JumpOnLeadSignSet   h,.CheckXNegative
 841+ C7EB 7C          >                        ld      a,h
 841+ C7EC E6 80       >                        and     SignOnly8Bit
 841+ C7EE C2 04 C8    >                        jp      nz,.CheckXNegative
 842+ C7F1 7C           .CheckXPositive:        ld      a,h
 843+ C7F2                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero its definitly on screen
 843+ C7F2 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 843+ C7F3 CA 0D C8    >                        jp	    z, .XOnScreen
 844+ C7F6 16 00                                ld      d,0                         ; de = radius
 845+ C7F8                                      ClearCarryFlag
 845+ C7F8 B7          >                        or a
 846+ C7F9 ED 52                                sbc     hl,de
 847+ C7FB FA 0D C8                             jp      m   ,.XOnScreen             ; if result was negative then it spans screen
 848+ C7FE 7C                                   ld      a,h
 849+ C7FF                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero then its partially on screen at least
 849+ C7FF A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 849+ C800 CA 0D C8    >                        jp	    z, .XOnScreen
 850+ C803 C9                                   ret                                 ; None of the X coordinates are on screen
 851+ C804 16 00        .CheckXNegative:        ld      d,0                         ; de = radius
 852+ C806                                      ClearCarryFlag
 852+ C806 B7          >                        or a
 853+ C807 ED 5A                                adc     hl,de                       ; so we have hl - de
 854+ C809 F2 0D C8                             jp      p,.XOnScreen                ; if result was positive then it spans screen so we are good
 855+ C80C C9                                   ret                                 ; else x is totally off the left side of the screen
 856+ C80D              ; .........................................................................................................................
 857+ C80D 2A 0F C6     .XOnScreen:             ld      hl,(SunScrnY)               ; now Check Y coordinate
 858+ C810                                      JumpOnLeadSignSet   h,.CheckYNegative
 858+ C810 7C          >                        ld      a,h
 858+ C811 E6 80       >                        and     SignOnly8Bit
 858+ C813 C2 34 C8    >                        jp      nz,.CheckYNegative
 859+ C816 7C           .CheckYPositive:        ld      a,h
 860+ C817                                      JumpIfAIsNotZero   .PosYCheck2
 860+ C817 A7          >                        and     a
 860+ C818 C2 21 C8    >                        jp	    nz,.PosYCheck2
 861+ C81B 7D                                   ld      a,l
 862+ C81C E6 80                                and     %10000000
 863+ C81E CA 3D C8                             jp      z,YOnScreen                ; at least 1 row is on screen as > 128
 864+ C821 16 00        .PosYCheck2:            ld      d,0                         ; de = radius
 865+ C823                                      ClearCarryFlag
 865+ C823 B7          >                        or a
 866+ C824 ED 52                                sbc     hl,de
 867+ C826 FA 3D C8                             jp      m,YOnScreen                ; so if its -ve then it spans screen
 868+ C829 7C                                   ld      a,h                         ; if h > 0 then off screen so did not span
 869+ C82A                                      ReturnIfANotZero                    ; .
 869+ C82A A7          >                        and     a
 869+ C82B C0          >                        ret     nz
 870+ C82C 7D                                   ld      a,l                         ; if l > 128 then off screen so did not span
 871+ C82D E6 80                                and     %10000000                   ; .
 872+ C82F                                      ReturnIfANotZero                    ; .
 872+ C82F A7          >                        and     a
 872+ C830 C0          >                        ret     nz
 873+ C831 C3 3D C8                             jp      YOnScreen                  ; so Y at least spans
 874+ C834 16 00        .CheckYNegative:        ld      d,0                         ; de = radius
 875+ C836                                      ClearCarryFlag
 875+ C836 B7          >                        or a
 876+ C837 ED 5A                                adc     hl,de                       ; so we have hl - de
 877+ C839 F2 3D C8                             jp      p,YOnScreen                ; if result was positive then it spans screen so we are good
 878+ C83C C9                                   ret                                 ; else never gets above 0 so return
 879+ C83D              ; .........................................................................................................................
 880+ C83D 21 A3 C0     YOnScreen:             ld      hl,SBnKLineArray            ; we load start and end as 0
 881+ C840 11 00 01                             ld		de, SunLineArraySize        ; just if we get a 0,0 genuine we will not plot it
 882+ C843 3E 00                                ld		a,0
 883+ C845 CD 38 7D                             call	memfill_dma
 884+ C848              ; .........................................................................................................................
 885+ C848 11 00 00     .SetRaggedEdgeMax:      ld      de,0
 886+ C84B 3A 11 C6                             ld      a,(SunRadius)               ; get readius
 887+ C84E FE 60                                cp      96                          ; if > 96 then roll carry flag into e
 888+ C850                                      FlipCarryFlag
 888+ C850 3F          >                        ccf
 889+ C851 CB 13                                rl      e                           ; if > 40 then roll carry flag into e
 890+ C853 FE 28                                cp      40
 891+ C855                                      FlipCarryFlag
 891+ C855 3F          >                        ccf
 892+ C856 CB 13                                rl      e
 893+ C858 FE 10                                cp      16                          ; if > 16 then roll carry flag into e
 894+ C85A                                      FlipCarryFlag
 894+ C85A 3F          >                        ccf
 895+ C85B CB 13                                rl     e
 896+ C85D 7B                                   ld      a,e                         ; a = ragged size from %00000111 to %00000000
 897+ C85E 32 0A C6                             ld      (RaggedSize),a
 898+ C861              ; .........................................................................................................................
 899+ C861 21 A3 C0     .SkipSetK:              ld      hl,SBnKLineArray            ; prep line array details ready for filling
 900+ C864 22 A3 C1                             ld      (LineArrayPtr),hl
 901+ C867 AF                                   xor     a
 902+ C868 32 09 C6                             ld      (LineCount),a
 903+ C86B              ; .........................................................................................................................
 904+ C86B 2A 0F C6     .GetMinY:               ld      hl,(SunScrnY)               ; now calculate start Y position
 905+ C86E 3A 11 C6                             ld      a,(SunRadius)
 906+ C871 5F                                   ld      e,a
 907+ C872 16 00                                ld      d,0
 908+ C874                                      ClearCarryFlag
 908+ C874 B7          >                        or a
 909+ C875 ED 52                                sbc     hl,de
 910+ C877 F2 7D C8                             jp      p,.DoneMinY
 911+ C87A 21 00 00                             ld      hl,0                        ; if its negative then we start with 0 as it can only go up screen after radius
 912+ C87D              .DoneMinY:              ReturnIfRegNotZero h                ; if h > 0 then off the screen
 912+ C87D 7C          >                        ld      a, h
 912+ C87E A7          >                        and     a
 912+ C87F C0          >                        ret     nz
 913+ C880 7D                                   ld      a,l                         ; check if l > 127
 914+ C881 E6 80                                and     SignOnly8Bit                ; .
 915+ C883 C0                                   ret     nz                          ; if bit is set then > 128
 916+ C884 7D           .SetMinY:               ld      a,l
 917+ C885 32 0B C6                             ld      (MinYOffset),a              ; so now we have Y top of screen
 918+ C888 2A 0F C6     .GetMaxY:               ld      hl,(SunScrnY)               ; get hl = Y + radius, note if we got here then this can never be a negative result but can go from -ve hl to +ve result
 919+ C88B 3A 11 C6                             ld      a,(SunRadius)               ; hl = hl + radius
 920+ C88E 16 00                                ld      d,0                         ; .
 921+ C890 5F                                   ld      e,a                         ; .
 922+ C891                                      ClearCarryFlag                      ; .
 922+ C891 B7          >                        or a
 923+ C892 ED 5A                                adc     hl,de                       ; .
 924+ C894 7C                                   ld      a,h
 925+ C895 A7                                   and     a
 926+ C896 28 06                                jr      z,.YHiOK
 927+ C898 21 7F 00     .YHiGTE127:             ld      hl,127
 928+ C89B C3 A7 C8                             jp      .SetMaxY
 929+ C89E 7D           .YHiOK:                 ld      a,l                         ; clamp at 127
 930+ C89F E6 80                                and     SignOnly8Bit                ; .
 931+ C8A1 CA A7 C8                             jp      z,.SetMaxY
 932+ C8A4 21 7F 00                             ld      hl,127
 933+ C8A7 7D           .SetMaxY                ld      a,l
 934+ C8A8 32 0C C6                             ld      (MaxYOffSet),a              ; so now we have min and max Y coordinates and SunScrnX & Y holds center
 935+ C8AB CD B2 C8                             call    SunDrawCircle
 936+ C8AE CD CF C1                             call    SunDraw
 937+ C8B1 C9                                   ret
 938+ C8B2                                      ; b8 04 00 02 00 00 60 01 00 gives a 0.5 so we have the cal wrong as its +-1 so should be * result of divide by 128
 939+ C8B2              ;.. Now we caluclate the circle of the star
 940+ C8B2              ;.. its from MinY down the screen to MaxY center ProjX,ProjY.
 941+ C8B2              ;.. We can use the circle draw logic gtom Bressenham's algorithm
 942+ C8B2              ; so now there are the following conditions to consider
 943+ C8B2              ; y min = 0   y center is negative radius <= ABS (Y center)             => Don't draw
 944+ C8B2              ; y min = 0   y center is negative radius > ABS (Y center)+1            => Draw bottom half only
 945+ C8B2              ; y max = 127 y center is > 127    radius <= y center - 127             => Don't draw
 946+ C8B2              ; y max = 127 y center is > 127    radius > y center - 127              => Draw top half only
 947+ C8B2              ; y min >= 0  y center > y min     we don't need to worry about radius  => Draw both halves
 948+ C8B2              ; x center + radius < 0                                                 => Don't draw
 949+ C8B2              ; x center - radius > 255                                               => Don't draw
 950+ C8B2              ; we won't consider x more here as the driver is the y coordinate but we will check if x is vaiable
 951+ C8B2              ; x point = max (x point, 0)   on left
 952+ C8B2              ; x point = min (x point, 255) on right
 953+ C8B2
 954+ C8B2              SetIYPlusOffset:        MACRO   reg
 955+ C8B2 ~                                    push    hl,,iy                          ; save hl, then hl = iy
 956+ C8B2 ~                                    pop     hl                              ;
 957+ C8B2 ~                                    ld      a,reg
 958+ C8B2 ~                                    add     hl,a
 959+ C8B2 ~                                    add     hl,a
 960+ C8B2 ~                                    push    hl
 961+ C8B2 ~                                    pop     iy
 962+ C8B2 ~                                    pop     hl
 963+ C8B2                                      ENDM
 964+ C8B2
 965+ C8B2              SetIYMinusOffset:       MACRO   reg
 966+ C8B2 ~                                    push    de,,hl,,iy                      ; save hl, then hl = iy
 967+ C8B2 ~                                    pop     hl                              ;
 968+ C8B2 ~                                    ld      a,reg
 969+ C8B2 ~                                    add     a,a
 970+ C8B2 ~                                    ld      e,a
 971+ C8B2 ~                                    ld      d,0
 972+ C8B2 ~                                    ClearCarryFlag
 973+ C8B2 ~                                    sbc     hl,de
 974+ C8B2 ~                                    push    hl
 975+ C8B2 ~                                    pop     iy
 976+ C8B2 ~                                    pop     de,,hl
 977+ C8B2                                      ENDM
 978+ C8B2
 979+ C8B2
 980+ C8B2              ;;;-SunDrawCircle:          ld      a,(SunRadius)
 981+ C8B2              ;;;-.CheckRadius:           ReturnIfAIsZero                         ; elimiate zero or single pixel
 982+ C8B2              ;;;-                        JumpIfAEqNusng  1, SunCircleSinglePixel
 983+ C8B2              ;;;-                       ; JumpIfAGTENusng 127, SunFullScreen      ; if its covering whole then just make it yellow
 984+ C8B2              ;;;-; already done .MakeCentreX2C:         MemSignedTo2C SunScrnX                   ; convert 16 bit signed to 2's compliment
 985+ C8B2              ;;;-; already done .MakeCentreY2C:         MemSignedTo2C SunScrnY                   ; .
 986+ C8B2              ;;;-.BoundsCheck            ld      hl,(SunScrnY)
 987+ C8B2              ;;;-                        push    hl
 988+ C8B2              ;;;-                        ld      a,(SunRadius)
 989+ C8B2              ;;;-                        add     hl,a
 990+ C8B2              ;;;-                        bit     7,h
 991+ C8B2              ;;;-                        ret     nz                              ; if Y + radius is negative then off the screen
 992+ C8B2              ;;;-                        pop     hl
 993+ C8B2              ;;;-                        ld      d,0
 994+ C8B2              ;;;-                        ld      e,a
 995+ C8B2              ;;;-                        ClearCarryFlag
 996+ C8B2              ;;;-                        sbc     hl,de
 997+ C8B2              ;;;-                        ld      a,h
 998+ C8B2              ;;;-                        ReturnIfAGTENusng  1                     ; really shoudl be signed TODO
 999+ C8B2              ;;;-
1000+ C8B2              ;;;-                        ld      hl,(SunScrnX)
1001+ C8B2              ;;;-                        push    hl
1002+ C8B2              ;;;-                        ld      a,(SunRadius)
1003+ C8B2              ;;;-                        add     hl,a
1004+ C8B2              ;;;-                        bit     7,h
1005+ C8B2              ;;;-                        ret     nz                              ; if Y + radius is negative then off the screen
1006+ C8B2              ;;;-                        pop     hl
1007+ C8B2              ;;;-                        ld      d,0
1008+ C8B2              ;;;-                        ld      e,a
1009+ C8B2              ;;;-                        ClearCarryFlag
1010+ C8B2              ;;;-                        sbc     hl,de
1011+ C8B2              ;;;-                        ld      a,h
1012+ C8B2              ;;;-
1013+ C8B2              ;;;-                        ReturnIfAGTENusng 1                      ; really shoudl be signed TODO
1014+ C8B2              SunDrawCircle
1015+ C8B2                                      ; ** BNOTE Ptuichj abnd roll has a bug as piitch increases z axis value
1016+ C8B2              .PrepCircleData:       ; ld      ixl,0
1017+ C8B2                                     ; ld		(.Plot1+1),bc			        ; save origin into DE reg in code
1018+ C8B2 3A 11 C6                             ld      a,(SunRadius)
1019+ C8B5 DD 67                                ld		ixh,a							; ixh = radius
1020+ C8B7 DD 2E 00                             ld		ixl,0						    ; ixl = delta (y)
1021+ C8BA 26 00        .calcd:	                ld		h,0                             ; de = radius * 2
1022+ C8BC 6F                                   ld		l,a                             ; .
1023+ C8BD 29                                   add		hl,hl							; .
1024+ C8BE EB                                   ex		de,hl							; .
1025+ C8BF 21 03 00                             ld		hl,3                            ; hl = 3 - (r * 2)
1026+ C8C2 A7                                   and		a                               ; .
1027+ C8C3 ED 52                                sbc		hl,de							; .
1028+ C8C5 44                                   ld		b,h                             ; bc = 3 - (r * 2) : d = 3 - 2r
1029+ C8C6 4D                                   ld		c,l								; .
1030+ C8C7 21 01 00     .calcdelta:             ld		hl,1                            ; set hl to 1
1031+ C8CA 16 00                                ld		d,0                             ; de = ixl
1032+ C8CC DD 5D                                ld		e,ixl                           ;
1033+ C8CE                                      ClearCarryFlag                          ;
1033+ C8CE B7          >                        or a
1034+ C8CF ED 52                                sbc		hl,de                           ; hl = 1 - ixl
1035+ C8D1 11 01 00     .Setde1:                ld		de,1                            ; del = 1
1036+ C8D4 DD 7C        .CircleLoop:            ld		a,ixh                           ; if x = y then exit
1037+ C8D6 DD BD                                cp		ixl                             ;
1038+ C8D8 D8                                   ret		c                               ;
1039+ C8D9 D9           .ProcessLoop:	        exx                                     ; save out registers
1040+ C8DA              ; Process CY+Y CX+X & CY+Y CX-X..................................
1041+ C8DA 2A 0F C6     .Plot1:                 ld      hl, (SunScrnY)
1042+ C8DD DD 7C        .Get1YRow:              ld      a,ixh
1043+ C8DF ED 31                                add     hl,a                            ; Check to see if CY+Y (note is add hl ,a usginedf only??)
1044+ C8E1              .Check1YRowOnScreen:    CheckRowHLOnScreen .NoTopPixelPair
1044+ C8E1 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1044+ C8E2 A7          >                        and     a                               ; .
1044+ C8E3 20 26       >                        jr      nz,.NoTopPixelPair                   ; h <> 0 so fails (covers <0 and > 255
1044+ C8E5 7D          >                        ld      a,l                             ; l bit 7 0?
1044+ C8E6 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1044+ C8E8 20 21       >                        jr      nz,.NoTopPixelPair                   ;
1045+ C8EA              .Write1YCoord:          SetIYPlusOffset ixh                     ; IY = IY + ixh
1045+ C8EA E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
1045+ C8ED E1          >                        pop     hl                              ;
1045+ C8EE DD 7C       >                        ld      a,ixh
1045+ C8F0 ED 31       >                        add     hl,a
1045+ C8F2 ED 31       >                        add     hl,a
1045+ C8F4 E5          >                        push    hl
1045+ C8F5 FD E1       >                        pop     iy
1045+ C8F7 E1          >                        pop     hl
1046+ C8F8                                      IYEquRowN l                             ; IY = SBnkLineArray + (2 * l) - set up iy as target address
1046+ C8F8 7D          >                        ld      a,l
1046+ C8F9 21 A3 C0    >                        ld      hl,SBnKLineArray
1046+ C8FC ED 31       >                        add     hl,a
1046+ C8FE ED 31       >                        add     hl,a
1046+ C900 E5          >                        push    hl
1046+ C901 FD E1       >                        pop     iy
1047+ C903 DD 7D                                ld      a,ixl
1048+ C905 CD D8 C9                             call    ProcessXRowA
1049+ C908 C3 0B C9                             jp      .Plot2
1050+ C90B              .NoTopPixelPair:        ;break
1051+ C90B              ; Process CY-Y CX+X & CY-Y CX-X..................................
1052+ C90B 2A 0F C6     .Plot2:                 ld      hl, (SunScrnY)
1053+ C90E 16 00        .Get2YRow:              ld      d,0
1054+ C910 DD 5C                                ld      e,ixh
1055+ C912                                      ClearCarryFlag
1055+ C912 B7          >                        or a
1056+ C913 ED 52                                sbc     hl,de
1057+ C915              .Check2YRowOnScreen:    CheckRowHLOnScreen .NoBottomPixelPair
1057+ C915 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1057+ C916 A7          >                        and     a                               ; .
1057+ C917 20 2B       >                        jr      nz,.NoBottomPixelPair                   ; h <> 0 so fails (covers <0 and > 255
1057+ C919 7D          >                        ld      a,l                             ; l bit 7 0?
1057+ C91A E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1057+ C91C 20 26       >                        jr      nz,.NoBottomPixelPair                   ;
1058+ C91E                                      SetIYMinusOffset ixh
1058+ C91E D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
1058+ C922 E1          >                        pop     hl                              ;
1058+ C923 DD 7C       >                        ld      a,ixh
1058+ C925 87          >                        add     a,a
1058+ C926 5F          >                        ld      e,a
1058+ C927 16 00       >                        ld      d,0
1058+ C929             >                        ClearCarryFlag
1058+ C929 B7          >                        or a
1058+ C92A ED 52       >                        sbc     hl,de
1058+ C92C E5          >                        push    hl
1058+ C92D FD E1       >                        pop     iy
1058+ C92F E1 D1       >                        pop     de,,hl
1059+ C931              .Write2YCoord:          IYEquRowN l                             ; set up iy as target address
1059+ C931 7D          >                        ld      a,l
1059+ C932 21 A3 C0    >                        ld      hl,SBnKLineArray
1059+ C935 ED 31       >                        add     hl,a
1059+ C937 ED 31       >                        add     hl,a
1059+ C939 E5          >                        push    hl
1059+ C93A FD E1       >                        pop     iy
1060+ C93C DD 7D                                ld      a,ixl
1061+ C93E CD D8 C9                             call    ProcessXRowA
1062+ C941 C3 44 C9                             jp      .Plot3
1063+ C944              .NoBottomPixelPair:     ;break
1064+ C944              ; Process CY+X CX+Y & CY+X CX-Y..................................
1065+ C944 2A 0F C6     .Plot3:                 ld      hl, (SunScrnY)
1066+ C947 DD 7D        .Get3YRow:              ld      a,ixl
1067+ C949 ED 31                                add     hl,a                            ; Check to see if CY+Y
1068+ C94B              .Check3YRowOnScreen:    CheckRowHLOnScreen .NoTop3PixelPair
1068+ C94B 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1068+ C94C A7          >                        and     a                               ; .
1068+ C94D 20 26       >                        jr      nz,.NoTop3PixelPair                   ; h <> 0 so fails (covers <0 and > 255
1068+ C94F 7D          >                        ld      a,l                             ; l bit 7 0?
1068+ C950 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1068+ C952 20 21       >                        jr      nz,.NoTop3PixelPair                   ;
1069+ C954                                      SetIYPlusOffset ixl
1069+ C954 E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
1069+ C957 E1          >                        pop     hl                              ;
1069+ C958 DD 7D       >                        ld      a,ixl
1069+ C95A ED 31       >                        add     hl,a
1069+ C95C ED 31       >                        add     hl,a
1069+ C95E E5          >                        push    hl
1069+ C95F FD E1       >                        pop     iy
1069+ C961 E1          >                        pop     hl
1070+ C962              .Write3YCoord:          IYEquRowN l                             ; set up iy as target address
1070+ C962 7D          >                        ld      a,l
1070+ C963 21 A3 C0    >                        ld      hl,SBnKLineArray
1070+ C966 ED 31       >                        add     hl,a
1070+ C968 ED 31       >                        add     hl,a
1070+ C96A E5          >                        push    hl
1070+ C96B FD E1       >                        pop     iy
1071+ C96D DD 7C                                ld      a,ixh
1072+ C96F CD D8 C9                             call    ProcessXRowA
1073+ C972 C3 75 C9                             jp      .Plot4
1074+ C975              .NoTop3PixelPair:       ;break
1075+ C975              ; Process CY-X CX+Y & CY-X CX-Y..................................
1076+ C975 2A 0F C6     .Plot4:                 ld      hl, (SunScrnY)
1077+ C978 16 00        .Get4YRow:              ld      d,0
1078+ C97A DD 5D                                ld      e,ixl
1079+ C97C                                      ClearCarryFlag
1079+ C97C B7          >                        or a
1080+ C97D ED 52                                sbc     hl,de
1081+ C97F              .Check4YRowOnScreen:    CheckRowHLOnScreen .NoBottom4PixelPair
1081+ C97F 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1081+ C980 A7          >                        and     a                               ; .
1081+ C981 20 28       >                        jr      nz,.NoBottom4PixelPair                   ; h <> 0 so fails (covers <0 and > 255
1081+ C983 7D          >                        ld      a,l                             ; l bit 7 0?
1081+ C984 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1081+ C986 20 23       >                        jr      nz,.NoBottom4PixelPair                   ;
1082+ C988                                      SetIYMinusOffset ixl
1082+ C988 D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
1082+ C98C E1          >                        pop     hl                              ;
1082+ C98D DD 7D       >                        ld      a,ixl
1082+ C98F 87          >                        add     a,a
1082+ C990 5F          >                        ld      e,a
1082+ C991 16 00       >                        ld      d,0
1082+ C993             >                        ClearCarryFlag
1082+ C993 B7          >                        or a
1082+ C994 ED 52       >                        sbc     hl,de
1082+ C996 E5          >                        push    hl
1082+ C997 FD E1       >                        pop     iy
1082+ C999 E1 D1       >                        pop     de,,hl
1083+ C99B              .Write4YCoord:          IYEquRowN l                             ; set up iy as target address
1083+ C99B 7D          >                        ld      a,l
1083+ C99C 21 A3 C0    >                        ld      hl,SBnKLineArray
1083+ C99F ED 31       >                        add     hl,a
1083+ C9A1 ED 31       >                        add     hl,a
1083+ C9A3 E5          >                        push    hl
1083+ C9A4 FD E1       >                        pop     iy
1084+ C9A6 DD 7C                                ld      a,ixh
1085+ C9A8 CD D8 C9                             call    ProcessXRowA
1086+ C9AB              .NoBottom4PixelPair:
1087+ C9AB              ; Completed one iteration........................................
1088+ C9AB D9                                   exx
1089+ C9AC CB 7C        .IncrementCircle:	    bit     7,h				; Check for Hl<=0
1090+ C9AE 28 03                                jr z,   .draw_circle_1
1091+ C9B0 19                                   add hl,de			; Delta=Delta+D1
1092+ C9B1 18 05                                jr      .draw_circle_2		;
1093+ C9B3 09           .draw_circle_1:		    add     hl,bc			; Delta=Delta+D2
1094+ C9B4 03                                   inc     bc
1095+ C9B5 03                                   inc     bc				; D2=D2+2
1096+ C9B6 DD 25                                dec     ixh				; Y=Y-1
1097+ C9B8 03           .draw_circle_2:		    inc bc				    ; D2=D2+2
1098+ C9B9 03                                   inc bc
1099+ C9BA 13                                   inc de				    ; D1=D1+2
1100+ C9BB 13                                   inc de
1101+ C9BC DD 2C                                inc ixl				    ; X=X+1
1102+ C9BE C3 D4 C8                             jp      .CircleLoop
1103+ C9C1 2A 0D C6     SunCircleSinglePixel:     ld      hl,(SunScrnX)
1104+ C9C4 7C                                   ld      a,h
1105+ C9C5 A7                                   and     a
1106+ C9C6 C0                                   ret     nz                  ; if the high byte is set then no pixel
1107+ C9C7 4D                                   ld      c,l
1108+ C9C8 2A 0F C6                             ld      hl,(SunScrnY)
1109+ C9CB 7C                                   ld      a,h
1110+ C9CC A7                                   and     a
1111+ C9CD C0                                   ret     nz                  ; if the high byte is set then no pixel
1112+ C9CE 7D                                   ld      a,l
1113+ C9CF CB 7F                                bit     7,a
1114+ C9D1 C0                                   ret     nz                  ; if l > 127 then no pixel
1115+ C9D2 47                                   ld      b,a
1116+ C9D3 7B                                   ld		a,e
1117+ C9D4 CD 08 E3                             call	l2_plot_pixel_y_test
1118+ C9D7 C9                                   ret
1119+ C9D8
1120+ C9D8              ProcessXRowA:           ;break
1121+ C9D8 2A 0D C6                             ld      hl,(SunScrnX)                    ; get X Center
1122+ C9DB F5                                   push    af                              ; save A (curent offset +/- value
1123+ C9DC ED 31                                add     hl,a                            ; Hl = HL + offset
1124+ C9DE 7C                                   ld      a,h                             ; is HL negative?, if so then set C to 0
1125+ C9DF CB 7F                                bit     7,a                             ;
1126+ C9E1 20 14                                jr      nz,.XCoordNegative              ; We can have this for non X + Radius i.e. the equater
1127+ C9E3 A7                                   and     a                               ; if H <> 0? (why by here must be +ve), set c to $FF
1128+ C9E4 20 16                                jr      nz,.XCoordMaxed                 ; .
1129+ C9E6 4D                                   ld      c,l                             ; else set c to l and do the -ve offset
1130+ C9E7 C5           .AddFuzz:               push    bc
1131+ C9E8 CD 37 84                             call    doRandom                        ; c = c - random AND ragged Size
1132+ C9EB C1                                   pop     bc
1133+ C9EC 21 0A C6                             ld      hl,RaggedSize                   ;
1134+ C9EF A6                                   and     (hl)                            ;
1135+ C9F0 81                                   add     c                               ;
1136+ C9F1 4F                                   ld      c,a                             ;
1137+ C9F2 38 08                                jr      c,.XCoordMaxed                  ; has fuzz caused a carry, if so > 255 to make 255
1138+ C9F4 C3 FE C9                             jp      .ProcessSubtract                ;
1139+ C9F7 0E 00        .XCoordNegative:        ld      c,0                             ; if it was negative then 0
1140+ C9F9 C3 FE C9                             jp      .ProcessSubtract
1141+ C9FC 0E FF        .XCoordMaxed:           ld      c,255                           ; if it was +ve then 255
1142+ C9FE F1           .ProcessSubtract:       pop     af                              ; get offset back
1143+ C9FF 5F                                   ld      e,a                             ; but goes into DE as its a subtract
1144+ CA00 16 00                                ld      d,0
1145+ CA02 2A 0D C6                             ld      hl,(SunScrnX)                    ; so do subtract
1146+ CA05                                      ClearCarryFlag                          ; .
1146+ CA05 B7          >                        or a
1147+ CA06 ED 52                                sbc     hl,de                           ; .
1148+ CA08 FA 25 CA                             jp      m,.XCoordLeftNegative           ; again test for min max
1149+ CA0B E5 C5        .AddFuzzSubtract:       push    hl,,bc
1150+ CA0D CD 37 84                             call    doRandom                        ; c = c - random AND ragged Size
1151+ CA10 C1                                   pop     bc
1152+ CA11 21 0A C6                             ld      hl,RaggedSize                   ;
1153+ CA14 A6                                   and     (hl)                            ;
1154+ CA15 5F                                   ld      e,a
1155+ CA16 E1                                   pop     hl
1156+ CA17 ED 52                                sbc     hl,de
1157+ CA19 FA 25 CA                             jp      m,.XCoordLeftNegative           ; again test for min max
1158+ CA1C 7C                                   ld      a,h
1159+ CA1D A7                                   and     a
1160+ CA1E C2 2A CA                             jp      nz,.XCordLeftMaxed
1161+ CA21 45                                   ld      b,l
1162+ CA22 C3 2C CA                             jp      .CompletedXCoords
1163+ CA25 06 00        .XCoordLeftNegative:    ld      b,0
1164+ CA27 C3 2C CA                             jp      .CompletedXCoords
1165+ CA2A 06 FF        .XCordLeftMaxed:        ld      b,255
1166+ CA2C 78           .CompletedXCoords:      ld      a,b
1167+ CA2D FD 77 00     .RowSaveIY1             ld      (iy+0),a                        ; iy holds current line array index
1168+ CA30 79                                   ld      a,c
1169+ CA31 FD 77 01     .RowSaveIY3             ld      (iy+1),a
1170+ CA34 C9                                   ret
1171+ CA35
1172+ CA35              ; .....................................................
1173+ CA35              ; if the universe object is a planet or sun then do that instead
1174+ CA35              ;;TODOProcessPlanet:          cp      129
1175+ CA35              ;;TODO                        jr      nz, .ItsAPlanet
1176+ CA35              ;;TODO.ItsAStar:              ld      a,(SBnKzsgn)
1177+ CA35              ;;TODO                        cp      48                               ; if z > 48 (it must be positive to enter this routine)
1178+ CA35
1179+ CA35
1180+ CA35              ; Square Root using tables
1181+ CA35              ; DE = number to find
1182+ CA35 21 55 CC     SunLookupSqrtDE:        ld      hl,SunSquareRootTable
1183+ CA38 7A           .LookupCorseJump:       ld      a,d
1184+ CA39 ED 31                                add     hl,a
1185+ CA3B ED 31                                add     hl,a
1186+ CA3D 7E                                   ld      a,(hl)
1187+ CA3E 23                                   inc     hl
1188+ CA3F 66                                   ld      h,(hl)
1189+ CA40 6F                                   ld      l,a
1190+ CA41 7E           .FineSearchLoop:        ld      a,(hl)
1191+ CA42                                      JumpIfAEqNusng  e, .FoundByte
1191+ CA42 BB          >                        cp     e
1191+ CA43 CA 4F CA    >                        jp      z,.FoundByte
1192+ CA46                                      JumpIfAGTENusng e, .PreviousByte
1192+ CA46 BB          >                        cp     e
1192+ CA47 D2 52 CA    >                        jp		nc,.PreviousByte
1193+ CA4A 23           .NotFound:              inc     hl
1194+ CA4B 23                                   inc     hl
1195+ CA4C C3 41 CA                             jp      .FineSearchLoop
1196+ CA4F 23           .FoundByte:             inc     hl
1197+ CA50 7E                                   ld      a,(hl)
1198+ CA51 C9                                   ret
1199+ CA52 2B           .PreviousByte:          dec     hl
1200+ CA53 7E                                   ld      a,(hl)
1201+ CA54 C9                                   ret
1202+ CA55
1203+ CA55 55 CC 67 CC  SunRootHighIndex:       DW SunSqr00,SunSqr01,SunSqr02,SunSqr03,SunSqr04,SunSqr05,SunSqr06,SunSqr07,SunSqr08,SunSqr09,SunSqr0A,SunSqr0B,SunSqr0C,SunSqr0D,SunSqr0E,SunSqr0F
1203+ CA59 75 CC 81 CC
1203+ CA5D 8B CC 93 CC
1203+ CA61 9B CC A3 CC
1203+ CA65 AB CC B1 CC
1203+ CA69 B9 CC BF CC
1203+ CA6D C3 CC C9 CC
1203+ CA71 CF CC D5 CC
1204+ CA75 DB CC E1 CC                          DW SunSqr10,SunSqr11,SunSqr12,SunSqr13,SunSqr14,SunSqr15,SunSqr16,SunSqr17,SunSqr18,SunSqr19,SunSqr1A,SunSqr1B,SunSqr1C,SunSqr1D,SunSqr1E,SunSqr1F
1204+ CA79 E7 CC ED CC
1204+ CA7D F3 CC F7 CC
1204+ CA81 FB CC FD CC
1204+ CA85 01 CD 05 CD
1204+ CA89 09 CD 0D CD
1204+ CA8D 11 CD 15 CD
1204+ CA91 17 CD 1B CD
1205+ CA95 1D CD 21 CD                          DW SunSqr20,SunSqr21,SunSqr22,SunSqr23,SunSqr24,SunSqr25,SunSqr26,SunSqr27,SunSqr28,SunSqr29,SunSqr2A,SunSqr2B,SunSqr2C,SunSqr2D,SunSqr2E,SunSqr2F
1205+ CA99 25 CD 27 CD
1205+ CA9D 29 CD 2D CD
1205+ CAA1 2F CD 31 CD
1205+ CAA5 35 CD 37 CD
1205+ CAA9 39 CD 3B CD
1205+ CAAD 3F CD 41 CD
1205+ CAB1 43 CD 47 CD
1206+ CAB5 4B CD 4F CD                          DW SunSqr30,SunSqr31,SunSqr32,SunSqr33,SunSqr34,SunSqr35,SunSqr36,SunSqr37,SunSqr38,SunSqr39,SunSqr3A,SunSqr3B,SunSqr3C,SunSqr3D,SunSqr3E,SunSqr3F
1206+ CAB9 53 CD 57 CD
1206+ CABD 59 CD 5D CD
1206+ CAC1 61 CD 65 CD
1206+ CAC5 67 CD 6B CD
1206+ CAC9 6F CD 73 CD
1206+ CACD 77 CD 7B CD
1206+ CAD1 7F CD 83 CD
1207+ CAD5 87 CD 8B CD                          DW SunSqr40,SunSqr41,SunSqr42,SunSqr43,SunSqr44,SunSqr45,SunSqr46,SunSqr47,SunSqr48,SunSqr49,SunSqr4A,SunSqr4B,SunSqr4C,SunSqr4D,SunSqr4E,SunSqr4F
1207+ CAD9 8F CD 93 CD
1207+ CADD 97 CD 9B CD
1207+ CAE1 9F CD A3 CD
1207+ CAE5 A7 CD AB CD
1207+ CAE9 AF CD B3 CD
1207+ CAED B7 CD BB CD
1207+ CAF1 BF CD C3 CD
1208+ CAF5 C7 CD C9 CD                          DW SunSqr50,SunSqr51,SunSqr52,SunSqr53,SunSqr54,SunSqr55,SunSqr56,SunSqr57,SunSqr58,SunSqr59,SunSqr5A,SunSqr5B,SunSqr5C,SunSqr5D,SunSqr5E,SunSqr5F
1208+ CAF9 CD CD D1 CD
1208+ CAFD D5 CD D9 CD
1208+ CB01 DD CD E1 CD
1208+ CB05 E5 CD E7 CD
1208+ CB09 EB CD EF CD
1208+ CB0D F3 CD F7 CD
1208+ CB11 FB CD FD CD
1209+ CB15 01 CE 05 CE                          DW SunSqr60,SunSqr61,SunSqr62,SunSqr63,SunSqr64,SunSqr65,SunSqr66,SunSqr67,SunSqr68,SunSqr69,SunSqr6A,SunSqr6B,SunSqr6C,SunSqr6D,SunSqr6E,SunSqr6F
1209+ CB19 09 CE 0D CE
1209+ CB1D 0F CE 13 CE
1209+ CB21 17 CE 1B CE
1209+ CB25 1F CE 21 CE
1209+ CB29 25 CE 29 CE
1209+ CB2D 2D CE 2F CE
1209+ CB31 31 CE 35 CE
1210+ CB35 39 CE 3D CE                          DW SunSqr70,SunSqr71,SunSqr72,SunSqr73,SunSqr74,SunSqr75,SunSqr76,SunSqr77,SunSqr78,SunSqr79,SunSqr7A,SunSqr7B,SunSqr7C,SunSqr7D,SunSqr7E,SunSqr7F
1210+ CB39 41 CE 45 CE
1210+ CB3D 49 CE 4D CE
1210+ CB41 4F CE 53 CE
1210+ CB45 57 CE 59 CE
1210+ CB49 5D CE 61 CE
1210+ CB4D 65 CE 67 CE
1210+ CB51 6B CE 6F CE
1211+ CB55 73 CE 75 CE                          DW SunSqr80,SunSqr81,SunSqr82,SunSqr83,SunSqr84,SunSqr85,SunSqr86,SunSqr87,SunSqr88,SunSqr89,SunSqr8A,SunSqr8B,SunSqr8C,SunSqr8D,SunSqr8E,SunSqr8F
1211+ CB59 79 CE 7B CE
1211+ CB5D 7F CE 83 CE
1211+ CB61 87 CE 89 CE
1211+ CB65 8D CE 91 CE
1211+ CB69 93 CE 97 CE
1211+ CB6D 9B CE 9D CE
1211+ CB71 A1 CE A5 CE
1212+ CB75 A7 CE AB CE                          DW SunSqr90,SunSqr91,SunSqr92,SunSqr93,SunSqr94,SunSqr95,SunSqr96,SunSqr97,SunSqr98,SunSqr99,SunSqr9A,SunSqr9B,SunSqr9C,SunSqr9D,SunSqr9E,SunSqr9F
1212+ CB79 AF CE B1 CE
1212+ CB7D B5 CE B9 CE
1212+ CB81 BB CE BF CE
1212+ CB85 C3 CE C5 CE
1212+ CB89 C9 CE CD CE
1212+ CB8D CF CE D3 CE
1212+ CB91 D7 CE D9 CE
1213+ CB95 DD CE E1 CE                          DW SunSqrA0,SunSqrA1,SunSqrA2,SunSqrA3,SunSqrA4,SunSqrA5,SunSqrA6,SunSqrA7,SunSqrA8,SunSqrA9,SunSqrAA,SunSqrAB,SunSqrAC,SunSqrAD,SunSqrAE,SunSqrAF
1213+ CB99 E3 CE E7 CE
1213+ CB9D E9 CE ED CE
1213+ CBA1 F1 CE F3 CE
1213+ CBA5 F7 CE F9 CE
1213+ CBA9 FD CE 01 CF
1213+ CBAD 03 CF 07 CF
1213+ CBB1 0B CF 0D CF
1214+ CBB5 0F CF 11 CF                          DW SunSqrB0,SunSqrB1,SunSqrB2,SunSqrB3,SunSqrB4,SunSqrB5,SunSqrB6,SunSqrB7,SunSqrB8,SunSqrB9,SunSqrBA,SunSqrBB,SunSqrBC,SunSqrBD,SunSqrBE,SunSqrBF
1214+ CBB9 15 CF 19 CF
1214+ CBBD 1B CF 1F CF
1214+ CBC1 21 CF 25 CF
1214+ CBC5 29 CF 2D CF
1214+ CBC9 2F CF 31 CF
1214+ CBCD 35 CF 37 CF
1214+ CBD1 3B CF 3F CF
1215+ CBD5 41 CF 45 CF                          DW SunSqrC0,SunSqrC1,SunSqrC2,SunSqrC3,SunSqrC4,SunSqrC5,SunSqrC6,SunSqrC7,SunSqrC8,SunSqrC9,SunSqrCA,SunSqrCB,SunSqrCC,SunSqrCD,SunSqrCE,SunSqrCF
1215+ CBD9 47 CF 4B CF
1215+ CBDD 4D CF 51 CF
1215+ CBE1 55 CF 57 CF
1215+ CBE5 59 CF 5B CF
1215+ CBE9 5F CF 61 CF
1215+ CBED 65 CF 69 CF
1215+ CBF1 6B CF 6F CF
1216+ CBF5 71 CF 75 CF                          DW SunSqrD0,SunSqrD1,SunSqrD2,SunSqrD3,SunSqrD4,SunSqrD5,SunSqrD6,SunSqrD7,SunSqrD8,SunSqrD9,SunSqrDA,SunSqrDB,SunSqrDC,SunSqrDD,SunSqrDE,SunSqrDF
1216+ CBF9 77 CF 7B CF
1216+ CBFD 7D CF 81 CF
1216+ CC01 85 CF 87 CF
1216+ CC05 8B CF 8D CF
1216+ CC09 91 CF 93 CF
1216+ CC0D 97 CF 99 CF
1216+ CC11 9B CF 9D CF
1217+ CC15 A1 CF A5 CF                          DW SunSqrE0,SunSqrE1,SunSqrE2,SunSqrE3,SunSqrE4,SunSqrE5,SunSqrE6,SunSqrE7,SunSqrE8,SunSqrE9,SunSqrEA,SunSqrEB,SunSqrEC,SunSqrED,SunSqrEE,SunSqrEF
1217+ CC19 A9 CF AD CF
1217+ CC1D B1 CF B5 CF
1217+ CC21 B7 CF BB CF
1217+ CC25 BF CF C3 CF
1217+ CC29 C5 CF C9 CF
1217+ CC2D CB CF CD CF
1217+ CC31 CF CF D3 CF
1218+ CC35 D5 CF D7 CF                          DW SunSqrF0,SunSqrF1,SunSqrF2,SunSqrF3,SunSqrF4,SunSqrF5,SunSqrF6,SunSqrF7,SunSqrF8,SunSqrF9,SunSqrFA,SunSqrFB,SunSqrFC,SunSqrFD,SunSqrFE,SunSqrFF
1218+ CC39 D9 CF DD CF
1218+ CC3D DF CF E3 CF
1218+ CC41 E5 CF E9 CF
1218+ CC45 EB CF EF CF
1218+ CC49 F1 CF F5 CF
1218+ CC4D F7 CF FB CF
1218+ CC51 FD CF FF CF
1219+ CC55
1220+ CC55              SunSquareRootTable:
1221+ CC55 00 00        SunSqr00:               DB $00,   0
1222+ CC57 04 02                                DB $04,   2
1223+ CC59 10 04                                DB $10,   4
1224+ CC5B 24 06                                DB $24,   6
1225+ CC5D 40 08                                DB $40,   8
1226+ CC5F 64 0A                                DB $64,  10
1227+ CC61 90 0C                                DB $90,  12
1228+ CC63 C4 0E                                DB $C4,  14
1229+ CC65 FF 0F                                DB $FF,  15
1230+ CC67 00 10        SunSqr01:               DB $00,  16
1231+ CC69 21 11                                DB $21,  17
1232+ CC6B 44 12                                DB $44,  18
1233+ CC6D 69 13                                DB $69,  19
1234+ CC6F 90 14                                DB $90,  20
1235+ CC71 B9 15                                DB $B9,  21
1236+ CC73 FF 16                                DB $FF,  22
1237+ CC75 11 17        SunSqr02:               DB $11,  23
1238+ CC77 40 18                                DB $40,  24
1239+ CC79 71 19                                DB $71,  25
1240+ CC7B A4 1A                                DB $A4,  26
1241+ CC7D D9 1B                                DB $D9,  27
1242+ CC7F FF 1B                                DB $FF,  27
1243+ CC81 10 1C        SunSqr03:               DB $10,  28
1244+ CC83 49 1D                                DB $49,  29
1245+ CC85 84 1E                                DB $84,  30
1246+ CC87 C1 1F                                DB $C1,  31
1247+ CC89 FF 1F                                DB $FF,  31
1248+ CC8B 00 20        SunSqr04:               DB $00,  32
1249+ CC8D 41 21                                DB $41,  33
1250+ CC8F 84 22                                DB $84,  34
1251+ CC91 FF 23                                DB $FF,  35
1252+ CC93 10 24        SunSqr05:               DB $10,  36
1253+ CC95 59 25                                DB $59,  37
1254+ CC97 A4 26                                DB $A4,  38
1255+ CC99 FF 27                                DB $FF,  39
1256+ CC9B 40 28        SunSqr06:               DB $40,  40
1257+ CC9D 91 29                                DB $91,  41
1258+ CC9F E4 2A                                DB $E4,  42
1259+ CCA1 FF 2A                                DB $FF,  42
1260+ CCA3 39 2B        SunSqr07:               DB $39,  43
1261+ CCA5 90 2C                                DB $90,  44
1262+ CCA7 E9 2D                                DB $E9,  45
1263+ CCA9 FF 2D                                DB $FF,  45
1264+ CCAB 44 2E        SunSqr08:               DB $44,  46
1265+ CCAD A1 2F                                DB $A1,  47
1266+ CCAF FF 2F                                DB $FF,  47
1267+ CCB1 00 30        SunSqr09:               DB $00,  48
1268+ CCB3 61 31                                DB $61,  49
1269+ CCB5 C4 32                                DB $C4,  50
1270+ CCB7 FF 32                                DB $FF,  50
1271+ CCB9 29 33        SunSqr0A:               DB $29,  51
1272+ CCBB 90 34                                DB $90,  52
1273+ CCBD FF 35                                DB $FF,  53
1274+ CCBF 64 36        SunSqr0B:               DB $64,  54
1275+ CCC1 FF 37                                DB $FF,  55
1276+ CCC3 40 38        SunSqr0C:               DB $40,  56
1277+ CCC5 B1 39                                DB $B1,  57
1278+ CCC7 FF 39                                DB $FF,  57
1279+ CCC9 24 3A        SunSqr0D:               DB $24,  58
1280+ CCCB 99 3B                                DB $99,  59
1281+ CCCD FF 3B                                DB $FF,  59
1282+ CCCF 10 3C        SunSqr0E:               DB $10,  60
1283+ CCD1 89 3D                                DB $89,  61
1284+ CCD3 FF 3D                                DB $FF,  61
1285+ CCD5 04 3E        SunSqr0F:               DB $04,  62
1286+ CCD7 81 3F                                DB $81,  63
1287+ CCD9 FF 3F                                DB $FF,  63
1288+ CCDB 00 40        SunSqr10:               DB $00,  64
1289+ CCDD 81 41                                DB $81,  65
1290+ CCDF FF 41                                DB $FF,  65
1291+ CCE1 04 42        SunSqr11:               DB $04,  66
1292+ CCE3 89 43                                DB $89,  67
1293+ CCE5 FF 43                                DB $FF,  67
1294+ CCE7 10 44        SunSqr12:               DB $10,  68
1295+ CCE9 99 45                                DB $99,  69
1296+ CCEB FF 45                                DB $FF,  69
1297+ CCED 24 46        SunSqr13:               DB $24,  70
1298+ CCEF B1 47                                DB $B1,  71
1299+ CCF1 FF 47                                DB $FF,  71
1300+ CCF3 40 48        SunSqr14:               DB $40,  72
1301+ CCF5 FF 49                                DB $FF,  73
1302+ CCF7 64 4A        SunSqr15:               DB $64,  74
1303+ CCF9 FF 4B                                DB $FF,  75
1304+ CCFB FF 4C        SunSqr16:               DB $FF,  76
1305+ CCFD C4 4D        SunSqr17:               DB $C4,  77
1306+ CCFF FF 4E                                DB $FF,  78
1307+ CD01 61 4F        SunSqr18:               DB $61,  79
1308+ CD03 FF 4F                                DB $FF,  79
1309+ CD05 00 50        SunSqr19:               DB $00,  80
1310+ CD07 FF 51                                DB $FF,  81
1311+ CD09 44 52        SunSqr1A:               DB $44,  82
1312+ CD0B FF 53                                DB $FF,  83
1313+ CD0D 90 54        SunSqr1B:               DB $90,  84
1314+ CD0F FF 54                                DB $FF,  84
1315+ CD11 39 55        SunSqr1C:               DB $39,  85
1316+ CD13 FF 56                                DB $FF,  86
1317+ CD15 FF 57        SunSqr1D:               DB $FF,  87
1318+ CD17 40 58        SunSqr1E:               DB $40,  88
1319+ CD19 FF 59                                DB $FF,  89
1320+ CD1B FF 5A        SunSqr1F:               DB $FF,  90
1321+ CD1D 59 5B        SunSqr20:               DB $59,  91
1322+ CD1F FF 5B                                DB $FF,  91
1323+ CD21 10 5C        SunSqr21:               DB $10,  92
1324+ CD23 FF 5D                                DB $FF,  93
1325+ CD25 FF 5E        SunSqr22:               DB $FF,  94
1326+ CD27 FF 5F        SunSqr23:               DB $FF,  95
1327+ CD29 00 60        SunSqr24:               DB $00,  96
1328+ CD2B FF 61                                DB $FF,  97
1329+ CD2D 84 62        SunSqr25:               DB $84,  98
1330+ CD2F 49 63        SunSqr26:               DB $49,  99
1331+ CD31 10 64        SunSqr27:               DB $10, 100
1332+ CD33 FF 65                                DB $FF, 101
1333+ CD35 FF 66        SunSqr28:               DB $FF, 102
1334+ CD37 FF 67        SunSqr29:               DB $FF, 103
1335+ CD39 FF 68        SunSqr2A:               DB $FF, 104
1336+ CD3B 11 69        SunSqr2B:               DB $11, 105
1337+ CD3D FF 6A                                DB $FF, 106
1338+ CD3F FF 6B        SunSqr2C:               DB $FF, 107
1339+ CD41 FF 6C        SunSqr2D:               DB $FF, 108
1340+ CD43 69 6D        SunSqr2E:               DB $69, 109
1341+ CD45 FF 6E                                DB $FF, 110
1342+ CD47 44 6E        SunSqr2F:               DB $44, 110
1343+ CD49 FF 6F                                DB $FF, 111
1344+ CD4B 21 6F        SunSqr30:               DB $21, 111
1345+ CD4D FF 70                                DB $FF, 112
1346+ CD4F 00 70        SunSqr31:               DB $00, 112
1347+ CD51 FF 71                                DB $FF, 113
1348+ CD53 C4 72        SunSqr32:               DB $C4, 114
1349+ CD55 FF 72                                DB $FF, 114
1350+ CD57 FF 73        SunSqr33:               DB $FF, 115
1351+ CD59 90 74        SunSqr34:               DB $90, 116
1352+ CD5B FF 75                                DB $FF, 117
1353+ CD5D 79 75        SunSqr35:               DB $79, 117
1354+ CD5F FF 76                                DB $FF, 118
1355+ CD61 64 76        SunSqr36:               DB $64, 118
1356+ CD63 64 77                                DB $64, 119
1357+ CD65 51 77        SunSqr37:               DB $51, 119
1358+ CD67 40 78        SunSqr38:               DB $40, 120
1359+ CD69 FF 79                                DB $FF, 121
1360+ CD6B 31 79        SunSqr39:               DB $31, 121
1361+ CD6D FF 7A                                DB $FF, 122
1362+ CD6F 24 7A        SunSqr3A:               DB $24, 122
1363+ CD71 FF 7B                                DB $FF, 123
1364+ CD73 19 7B        SunSqr3B:               DB $19, 123
1365+ CD75 FF 7C                                DB $FF, 124
1366+ CD77 10 7C        SunSqr3C:               DB $10, 124
1367+ CD79 FF 7D                                DB $FF, 125
1368+ CD7B 09 7D        SunSqr3D:               DB $09, 125
1369+ CD7D FF 7D                                DB $FF, 125
1370+ CD7F 04 7E        SunSqr3E:               DB $04, 126
1371+ CD81 FF 7E                                DB $FF, 126
1372+ CD83 01 7F        SunSqr3F:               DB $01, 127
1373+ CD85 FF 7F                                DB $FF, 127
1374+ CD87 00 80        SunSqr40:               DB $00, 128
1375+ CD89 FF 80                                DB $FF, 128
1376+ CD8B 01 81        SunSqr41:               DB $01, 129
1377+ CD8D FF 82                                DB $FF, 130
1378+ CD8F 04 82        SunSqr42:               DB $04, 130
1379+ CD91 FF 83                                DB $FF, 131
1380+ CD93 09 83        SunSqr43:               DB $09, 131
1381+ CD95 FF 84                                DB $FF, 132
1382+ CD97 10 84        SunSqr44:               DB $10, 132
1383+ CD99 FF 85                                DB $FF, 133
1384+ CD9B 19 85        SunSqr45:               DB $19, 133
1385+ CD9D FF 86                                DB $FF, 134
1386+ CD9F 24 86        SunSqr46:               DB $24, 134
1387+ CDA1 FF 87                                DB $FF, 135
1388+ CDA3 31 87        SunSqr47:               DB $31, 135
1389+ CDA5 FF 88                                DB $FF, 136
1390+ CDA7 40 88        SunSqr48:               DB $40, 136
1391+ CDA9 FF 89                                DB $FF, 137
1392+ CDAB 51 89        SunSqr49:               DB $51, 137
1393+ CDAD FF 8A                                DB $FF, 138
1394+ CDAF 64 8A        SunSqr4A:               DB $64, 138
1395+ CDB1 FF 8A                                DB $FF, 138
1396+ CDB3 79 8B        SunSqr4B:               DB $79, 139
1397+ CDB5 FF 8B                                DB $FF, 139
1398+ CDB7 90 8C        SunSqr4C:               DB $90, 140
1399+ CDB9 FF 8C                                DB $FF, 140
1400+ CDBB A9 8D        SunSqr4D:               DB $A9, 141
1401+ CDBD FF 8D                                DB $FF, 141
1402+ CDBF C4 8E        SunSqr4E:               DB $C4, 142
1403+ CDC1 FF 8E                                DB $FF, 142
1404+ CDC3 E1 8F        SunSqr4F:               DB $E1, 143
1405+ CDC5 FF 8F                                DB $FF, 143
1406+ CDC7 FF 8F        SunSqr50:               DB $FF, 143
1407+ CDC9 00 90        SunSqr51:               DB $00, 144
1408+ CDCB FF 90                                DB $FF, 144
1409+ CDCD 21 91        SunSqr52:               DB $21, 145
1410+ CDCF FF 91                                DB $FF, 145
1411+ CDD1 44 92        SunSqr53:               DB $44, 146
1412+ CDD3 FF 92                                DB $FF, 146
1413+ CDD5 69 93        SunSqr54:               DB $69, 147
1414+ CDD7 FF 93                                DB $FF, 147
1415+ CDD9 90 94        SunSqr55:               DB $90, 148
1416+ CDDB FF 94                                DB $FF, 148
1417+ CDDD B9 95        SunSqr56:               DB $B9, 149
1418+ CDDF FF 95                                DB $FF, 149
1419+ CDE1 E4 96        SunSqr57:               DB $E4, 150
1420+ CDE3 FF 96                                DB $FF, 150
1421+ CDE5 FF 96        SunSqr58:               DB $FF, 150
1422+ CDE7 11 97        SunSqr59:               DB $11, 151
1423+ CDE9 FF 97                                DB $FF, 151
1424+ CDEB 40 98        SunSqr5A:               DB $40, 152
1425+ CDED FF 98                                DB $FF, 152
1426+ CDEF 71 99        SunSqr5B:               DB $71, 153
1427+ CDF1 FF 99                                DB $FF, 153
1428+ CDF3 A4 9A        SunSqr5C:               DB $A4, 154
1429+ CDF5 FF 9A                                DB $FF, 154
1430+ CDF7 D9 9B        SunSqr5D:               DB $D9, 155
1431+ CDF9 FF 9B                                DB $FF, 155
1432+ CDFB FF 9B        SunSqr5E:               DB $FF, 155
1433+ CDFD 10 9C        SunSqr5F:               DB $10, 156
1434+ CDFF FF 9C                                DB $FF, 156
1435+ CE01 49 9D        SunSqr60:               DB $49, 157
1436+ CE03 FF 9D                                DB $FF, 157
1437+ CE05 84 9E        SunSqr61:               DB $84, 158
1438+ CE07 FF 9E                                DB $FF, 158
1439+ CE09 C1 9F        SunSqr62:               DB $C1, 159
1440+ CE0B FF 9F                                DB $FF, 159
1441+ CE0D FF 9F        SunSqr63:               DB $FF, 159
1442+ CE0F 00 A0        SunSqr64:               DB $00, 160
1443+ CE11 FF A0                                DB $FF, 160
1444+ CE13 41 A1        SunSqr65:               DB $41, 161
1445+ CE15 FF A1                                DB $FF, 161
1446+ CE17 84 A2        SunSqr66:               DB $84, 162
1447+ CE19 FF A2                                DB $FF, 162
1448+ CE1B C9 A3        SunSqr67:               DB $C9, 163
1449+ CE1D FF A3                                DB $FF, 163
1450+ CE1F FF A3        SunSqr68:               DB $FF, 163
1451+ CE21 10 A4        SunSqr69:               DB $10, 164
1452+ CE23 FF A4                                DB $FF, 164
1453+ CE25 59 A5        SunSqr6A:               DB $59, 165
1454+ CE27 FF A5                                DB $FF, 165
1455+ CE29 A4 A6        SunSqr6B:               DB $A4, 166
1456+ CE2B FF A6                                DB $FF, 166
1457+ CE2D FF A7        SunSqr6C:               DB $FF, 167
1458+ CE2F FF A7        SunSqr6D:               DB $FF, 167
1459+ CE31 40 A8        SunSqr6E:               DB $40, 168
1460+ CE33 FF A8                                DB $FF, 168
1461+ CE35 91 A9        SunSqr6F:               DB $91, 169
1462+ CE37 FF A9                                DB $FF, 169
1463+ CE39 E4 AA        SunSqr70:               DB $E4, 170
1464+ CE3B FF AA                                DB $FF, 170
1465+ CE3D 00 AA        SunSqr71:               DB $00, 170
1466+ CE3F FF AA                                DB $FF, 170
1467+ CE41 39 AB        SunSqr72:               DB $39, 171
1468+ CE43 FF AB                                DB $FF, 171
1469+ CE45 90 AC        SunSqr73:               DB $90, 172
1470+ CE47 FF AC                                DB $FF, 172
1471+ CE49 E9 AD        SunSqr74:               DB $E9, 173
1472+ CE4B FF AD                                DB $FF, 173
1473+ CE4D FF AD        SunSqr75:               DB $FF, 173
1474+ CE4F 44 AE        SunSqr76:               DB $44, 174
1475+ CE51 FF AE                                DB $FF, 174
1476+ CE53 A1 AF        SunSqr77:               DB $A1, 175
1477+ CE55 FF AF                                DB $FF, 175
1478+ CE57 FF AF        SunSqr78:               DB $FF, 175
1479+ CE59 00 B0        SunSqr79:               DB $00, 176
1480+ CE5B FF B0                                DB $FF, 176
1481+ CE5D 61 B1        SunSqr7A:               DB $61, 177
1482+ CE5F FF B1                                DB $FF, 177
1483+ CE61 C4 B2        SunSqr7B:               DB $C4, 178
1484+ CE63 FF B2                                DB $FF, 178
1485+ CE65 FF B2        SunSqr7C:               DB $FF, 178
1486+ CE67 29 B3        SunSqr7D:               DB $29, 179
1487+ CE69 FF B3                                DB $FF, 179
1488+ CE6B 90 B4        SunSqr7E:               DB $90, 180
1489+ CE6D FF B4                                DB $FF, 180
1490+ CE6F F9 B5        SunSqr7F:               DB $F9, 181
1491+ CE71 FF B5                                DB $FF, 181
1492+ CE73 FF B5        SunSqr80:               DB $FF, 181
1493+ CE75 64 B6        SunSqr81:               DB $64, 182
1494+ CE77 FF B6                                DB $FF, 182
1495+ CE79 D1 B7        SunSqr82:               DB $D1, 183
1496+ CE7B FF B7        SunSqr83:               DB $FF, 183
1497+ CE7D FF B7                                DB $FF, 183
1498+ CE7F 40 B8        SunSqr84:               DB $40, 184
1499+ CE81 FF B8                                DB $FF, 184
1500+ CE83 B1 B9        SunSqr85:               DB $B1, 185
1501+ CE85 FF B9                                DB $FF, 185
1502+ CE87 FF B9        SunSqr86:               DB $FF, 185
1503+ CE89 24 BA        SunSqr87:               DB $24, 186
1504+ CE8B FF BA                                DB $FF, 186
1505+ CE8D 99 BB        SunSqr88:               DB $99, 187
1506+ CE8F FF BB                                DB $FF, 187
1507+ CE91 FF BB        SunSqr89:               DB $FF, 187
1508+ CE93 10 BC        SunSqr8A:               DB $10, 188
1509+ CE95 FF BC                                DB $FF, 188
1510+ CE97 89 BD        SunSqr8B:               DB $89, 189
1511+ CE99 FF BD                                DB $FF, 189
1512+ CE9B FF BD        SunSqr8C:               DB $FF, 189
1513+ CE9D 04 BE        SunSqr8D:               DB $04, 190
1514+ CE9F FF BE                                DB $FF, 190
1515+ CEA1 81 BF        SunSqr8E:               DB $81, 191
1516+ CEA3 FF BF                                DB $FF, 191
1517+ CEA5 FF BF        SunSqr8F:               DB $FF, 191
1518+ CEA7 00 C0        SunSqr90:               DB $00, 192
1519+ CEA9 FF C0                                DB $FF, 192
1520+ CEAB 81 C1        SunSqr91:               DB $81, 193
1521+ CEAD FF C1                                DB $FF, 193
1522+ CEAF FF C1        SunSqr92:               DB $FF, 193
1523+ CEB1 04 C2        SunSqr93:               DB $04, 194
1524+ CEB3 FF C2                                DB $FF, 194
1525+ CEB5 89 C3        SunSqr94:               DB $89, 195
1526+ CEB7 FF C3                                DB $FF, 195
1527+ CEB9 FF C3        SunSqr95:               DB $FF, 195
1528+ CEBB 10 C4        SunSqr96:               DB $10, 196
1529+ CEBD FF C4                                DB $FF, 196
1530+ CEBF 99 C5        SunSqr97:               DB $99, 197
1531+ CEC1 FF C5                                DB $FF, 197
1532+ CEC3 FF C5        SunSqr98:               DB $FF, 197
1533+ CEC5 24 C6        SunSqr99:               DB $24, 198
1534+ CEC7 FF C6                                DB $FF, 198
1535+ CEC9 B1 C7        SunSqr9A:               DB $B1, 199
1536+ CECB FF C7                                DB $FF, 199
1537+ CECD FF C7        SunSqr9B:               DB $FF, 199
1538+ CECF 40 C8        SunSqr9C:               DB $40, 200
1539+ CED1 FF C8                                DB $FF, 200
1540+ CED3 D1 C9        SunSqr9D:               DB $D1, 201
1541+ CED5 FF C9                                DB $FF, 201
1542+ CED7 FF C9        SunSqr9E:               DB $FF, 201
1543+ CED9 64 CA        SunSqr9F:               DB $64, 202
1544+ CEDB FF CA                                DB $FF, 202
1545+ CEDD F9 CB        SunSqrA0:               DB $F9, 203
1546+ CEDF FF CB                                DB $FF, 203
1547+ CEE1 FF CB        SunSqrA1:               DB $FF, 203
1548+ CEE3 90 CC        SunSqrA2:               DB $90, 204
1549+ CEE5 FF CC                                DB $FF, 204
1550+ CEE7 FF CC        SunSqrA3:               DB $FF, 204
1551+ CEE9 29 CD        SunSqrA4:               DB $29, 205
1552+ CEEB FF CD                                DB $FF, 205
1553+ CEED C4 CE        SunSqrA5:               DB $C4, 206
1554+ CEEF FF CE                                DB $FF, 206
1555+ CEF1 FF CE        SunSqrA6:               DB $FF, 206
1556+ CEF3 61 CF        SunSqrA7:               DB $61, 207
1557+ CEF5 FF CF                                DB $FF, 207
1558+ CEF7 FF CF        SunSqrA8:               DB $FF, 207
1559+ CEF9 00 D0        SunSqrA9:               DB $00, 208
1560+ CEFB FF D0                                DB $FF, 208
1561+ CEFD A1 D1        SunSqrAA:               DB $A1, 209
1562+ CEFF FF D1                                DB $FF, 209
1563+ CF01 FF D1        SunSqrAB:               DB $FF, 209
1564+ CF03 44 D2        SunSqrAC:               DB $44, 210
1565+ CF05 FF D2                                DB $FF, 210
1566+ CF07 E9 D3        SunSqrAD:               DB $E9, 211
1567+ CF09 FF D3                                DB $FF, 211
1568+ CF0B FF D3        SunSqrAE:               DB $FF, 211
1569+ CF0D 90 D4        SunSqrAF:               DB $90, 212
1570+ CF0F FF D4        SunSqrB0:               DB $FF, 212
1571+ CF11 39 D5        SunSqrB1:               DB $39, 213
1572+ CF13 FF D5                                DB $FF, 213
1573+ CF15 E4 D6        SunSqrB2:               DB $E4, 214
1574+ CF17 FF D6                                DB $FF, 214
1575+ CF19 FF D6        SunSqrB3:               DB $FF, 214
1576+ CF1B 91 D7        SunSqrB4:               DB $91, 215
1577+ CF1D FF D7                                DB $FF, 215
1578+ CF1F FF D7        SunSqrB5:               DB $FF, 215
1579+ CF21 40 D8        SunSqrB6:               DB $40, 216
1580+ CF23 FF D8                                DB $FF, 216
1581+ CF25 F1 D9        SunSqrB7:               DB $F1, 217
1582+ CF27 FF D9                                DB $FF, 217
1583+ CF29 FF D9        SunSqrB8:               DB $FF, 217
1584+ CF2B FF D9                                DB $FF, 217
1585+ CF2D A4 DA        SunSqrB9:               DB $A4, 218
1586+ CF2F FF DA        SunSqrBA:               DB $FF, 218 ; we can reuse SunSeqrBA as  $FF for B9 terminator as well as they have the same target
1587+ CF31 59 DB        SunSqrBB:               DB $59, 219
1588+ CF33 FF DB                                DB $FF, 219
1589+ CF35 FF DB        SunSqrBC:               DB $FF, 219
1590+ CF37 10 DC        SunSqrBD:               DB $10, 220
1591+ CF39 FF DC                                DB $FF, 220
1592+ CF3B C9 DD        SunSqrBE:               DB $C9, 221
1593+ CF3D FF DD                                DB $FF, 221
1594+ CF3F FF DD        SunSqrBF:               DB $FF, 221
1595+ CF41 84 DE        SunSqrC0:               DB $84, 222
1596+ CF43 FF DE                                DB $FF, 222
1597+ CF45 FF DE        SunSqrC1:               DB $FF, 222
1598+ CF47 41 DF        SunSqrC2:               DB $41, 223
1599+ CF49 FF DF                                DB $FF, 223
1600+ CF4B FF DF        SunSqrC3:               DB $FF, 223
1601+ CF4D 00 E0        SunSqrC4:               DB $00, 224
1602+ CF4F FF E0                                DB $FF, 224
1603+ CF51 C1 E1        SunSqrC5:               DB $C1, 225
1604+ CF53 FF E1                                DB $FF, 225
1605+ CF55 FF E1        SunSqrC6:               DB $FF, 225
1606+ CF57 84 E2        SunSqrC7:               DB $84, 226
1607+ CF59 FF E2        SunSqrC8:               DB $FF, 226
1608+ CF5B 49 E3        SunSqrC9:               DB $49, 227
1609+ CF5D FF E3                                DB $FF, 227
1610+ CF5F FF E4        SunSqrCA:               DB $FF, 228
1611+ CF61 10 E4        SunSqrCB:               DB $10, 228
1612+ CF63 FF E4                                DB $FF, 228
1613+ CF65 D9 E5        SunSqrCC:               DB $D9, 229
1614+ CF67 FF E5                                DB $FF, 229
1615+ CF69 FF E5        SunSqrCD:               DB $FF, 229
1616+ CF6B A4 E6        SunSqrCE:               DB $A4, 230
1617+ CF6D FF E6                                DB $FF, 230
1618+ CF6F FF E6        SunSqrCF:               DB $FF, 230
1619+ CF71 71 E7        SunSqrD0:               DB $71, 231
1620+ CF73 FF E7                                DB $FF, 231
1621+ CF75 FF E7        SunSqrD1:               DB $FF, 231
1622+ CF77 40 E8        SunSqrD2:               DB $40, 232
1623+ CF79 FF E8                                DB $FF, 232
1624+ CF7B FF E8        SunSqrD3:               DB $FF, 232
1625+ CF7D 11 E9        SunSqrD4:               DB $11, 233
1626+ CF7F FF E9                                DB $FF, 233
1627+ CF81 E4 EA        SunSqrD5:               DB $E4, 234
1628+ CF83 FF EA                                DB $FF, 234
1629+ CF85 FF EA        SunSqrD6:               DB $FF, 234
1630+ CF87 B9 EB        SunSqrD7:               DB $B9, 235
1631+ CF89 FF EB                                DB $FF, 235
1632+ CF8B FF EB        SunSqrD8:               DB $FF, 235
1633+ CF8D 90 EC        SunSqrD9:               DB $90, 236
1634+ CF8F FF EC                                DB $FF, 236
1635+ CF91 FF EC        SunSqrDA:               DB $FF, 236
1636+ CF93 69 ED        SunSqrDB:               DB $69, 237
1637+ CF95 FF ED                                DB $FF, 237
1638+ CF97 FF ED        SunSqrDC:               DB $FF, 237
1639+ CF99 44 EE        SunSqrDD:               DB $44, 238
1640+ CF9B FF EE        SunSqrDE:               DB $FF, 238
1641+ CF9D 21 EF        SunSqrDF:               DB $21, 239
1642+ CF9F FF EF                                DB $FF, 239
1643+ CFA1 00 F0        SunSqrE0:               DB $00, 240
1644+ CFA3 FF F0                                DB $FF, 240
1645+ CFA5 00 F0        SunSqrE1:               DB $00, 240
1646+ CFA7 FF F0                                DB $FF, 240
1647+ CFA9 E1 F1        SunSqrE2:               DB $E1, 241
1648+ CFAB FF F1                                DB $FF, 241
1649+ CFAD E1 F1        SunSqrE3:               DB $E1, 241
1650+ CFAF FF F1                                DB $FF, 241
1651+ CFB1 C4 F2        SunSqrE4:               DB $C4, 242
1652+ CFB3 FF F2                                DB $FF, 242
1653+ CFB5 FF F2        SunSqrE5:               DB $FF, 242
1654+ CFB7 A9 F3        SunSqrE6:               DB $A9, 243
1655+ CFB9 FF F3                                DB $FF, 243
1656+ CFBB FF F3        SunSqrE7:               DB $FF, 243
1657+ CFBD FF F3                                DB $FF, 243
1658+ CFBF 90 F3        SunSqrE8:               DB $90, 243
1659+ CFC1 FF F4                                DB $FF, 244
1660+ CFC3 FF F4        SunSqrE9:               DB $FF, 244
1661+ CFC5 79 F5        SunSqrEA:               DB $79, 245
1662+ CFC7 FF F5                                DB $FF, 245
1663+ CFC9 FF F5        SunSqrEB:               DB $FF, 245
1664+ CFCB 64 F6        SunSqrEC:               DB $64, 246
1665+ CFCD FF F6        SunSqrED:               DB $FF, 246
1666+ CFCF 51 F7        SunSqrEE:               DB $51, 247
1667+ CFD1 FF F7                                DB $FF, 247
1668+ CFD3 FF F7        SunSqrEF:               DB $FF, 247
1669+ CFD5 40 F8        SunSqrF0:               DB $40, 248
1670+ CFD7 FF F8        SunSqrF1:               DB $FF, 248
1671+ CFD9 31 F9        SunSqrF2:               DB $31, 249
1672+ CFDB FF F9                                DB $FF, 249
1673+ CFDD FF F9        SunSqrF3:               DB $FF, 249
1674+ CFDF 24 FA        SunSqrF4:               DB $24, 250
1675+ CFE1 FF FA                                DB $FF, 250
1676+ CFE3 FF FA        SunSqrF5:               DB $FF, 250
1677+ CFE5 19 FB        SunSqrF6:               DB $19, 251
1678+ CFE7 FF FB                                DB $FF, 251
1679+ CFE9 FF FB        SunSqrF7:               DB $FF, 251
1680+ CFEB 10 FC        SunSqrF8:               DB $10, 252
1681+ CFED FF FC                                DB $FF, 252
1682+ CFEF FF FC        SunSqrF9:               DB $FF, 252
1683+ CFF1 09 FD        SunSqrFA:               DB $09, 253
1684+ CFF3 FF FD                                DB $FF, 253
1685+ CFF5 FF FD        SunSqrFB:               DB $FF, 253
1686+ CFF7 04 FE        SunSqrFC:               DB $04, 254
1687+ CFF9 FF FE                                DB $FF, 254
1688+ CFFB FF FE        SunSqrFD:               DB $FF, 254
1689+ CFFD 01 FF        SunSqrFE:               DB $01, 255
1690+ CFFF FF FF        SunSqrFF:               DB $FF, 255
1691+ D001
1692+ D001
1693+ D001
1694+ D001              SunBankSize  EQU $ - StartOfSun
1695+ D001
1696+ D001
# file closed: ./Universe/Sun/sun_data.asm
1562  D001                                  DISPLAY "Bank ",BankSunData," - Bytes free ",/D, $2000 - ($-SunBankAddr), " - BankSunData"
1563  D001                                  ASSERT $-SunBankAddr <8912, Bank code leaks over 8K boundary
1564  D001              ; Bank 85  ------------------------------------------------------------------------------------------------------------------------
1565  D001                                  SLOT    PlanetBankAddr
1566  D001                                  PAGE    BankPlanetData
1567  D001                                  ORG	    PlanetBankAddr,BankPlanetData
1568  C000                                  INCLUDE "./Universe/Planet/planet_data.asm"
# file opened: ./Universe/Planet/planet_data.asm
   1+ C000
   2+ C000              ;- DEBUG CODE
   3+ C000                                      IFDEF BLINEDEBUG
   4+ C000 ~            TestBLINE:              ld  a,$FF
   5+ C000 ~                                    ld  (P_BnKFlag),a
   6+ C000 ~                                    ld  a,5
   7+ C000 ~                                    ld  (P_BnKSTP),a
   8+ C000 ~                                    ZeroA
   9+ C000 ~                                    ld  (P_BnKCNT),a
  10+ C000 ~            .DebugLoop:             ld  ix,(DataPointer)
  11+ C000 ~                                    ld  a,(ix+0)
  12+ C000 ~                                    ld  l,a
  13+ C000 ~                                    ld  a,(ix+1)
  14+ C000 ~                                    ld  h,a
  15+ C000 ~                                    ld  (P_NewXPos),hl
  16+ C000 ~                                    ld  a,(ix+2)
  17+ C000 ~                                    ld  l,a
  18+ C000 ~                                    ld  a,(ix+3)
  19+ C000 ~                                    ld  h,a
  20+ C000 ~                                    ld  (P_NewYPos),hl
  21+ C000 ~                                    call    BLINE
  22+ C000 ~                                    ld      a,(DataPointCounter)
  23+ C000 ~                                    inc     a
  24+ C000 ~                                    ld      hl,DataPointSize
  25+ C000 ~                                    cp      (hl)
  26+ C000 ~                                    ret     z
  27+ C000 ~                                    ld      (DataPointCounter),a
  28+ C000 ~                                    ld      hl,(DataPointer)
  29+ C000 ~                                    ld      a,4
  30+ C000 ~                                    add     hl,a
  31+ C000 ~                                    ld      (DataPointer),hl
  32+ C000 ~                                    jp      .DebugLoop
  33+ C000 ~
  34+ C000 ~            DataPoints:             DW  10,10, 20,60, 30,20, 40,50, 100,90, 150, 30
  35+ C000 ~            DataPointSize           DB  6
  36+ C000 ~            DataPointCounter        DB  0
  37+ C000 ~            DataPointer:            DW  DataPoints
  38+ C000                                      ENDIF
  39+ C000
  40+ C000                                      IFDEF TESTMERIDIAN
  41+ C000 ~            TestMeridian:           ld      hl,20        ; 20
  42+ C000 ~                                    ld      (P_BnKVx),hl ; vx
  43+ C000 ~                                    ld      hl,20        ; 20
  44+ C000 ~                                    ld      (P_BnKVy),hl ; vy
  45+ C000 ~                                    ld      hl,20        ; 20
  46+ C000 ~                                    ld      (P_BnKUx),hl ; ux
  47+ C000 ~                                    ld      hl, $8014    ; -20
  48+ C000 ~                                    ld      (P_BnKUy),hl ; uy
  49+ C000 ~                                    ld      de,120       ; 120
  50+ C000 ~                                    ld      (P_BnKCx),de ; cx
  51+ C000 ~                                    ld      de,69        ; 69
  52+ C000 ~                                    ld      (P_BnKCy),de ; cy
  53+ C000 ~                                    call    DrawMeridian
  54+ C000                                      ENDIF
  55+ C000
  56+ C000              ; In  flight ship data tables
  57+ C000              ; In  flight ship data tables
  58+ C000              ; In  flight ship data tables
  59+ C000              ; There can be upto &12 objects in flight.
  60+ C000              ; To avoid hassle of memory heap managment, the free list
  61+ C000              ; will correspond to a memory bank offset so data will be held in
  62+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
  63+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
  64+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  65+ C000              ; This means each gets its own line list, inwork etc
  66+ C000
  67+ C000              ; "Runtime Ship Data paged into in Bank 7"
  68+ C000              ;                      0123456789ABCDEF
  69+ C000 50 6C 61 6E  StartOfPlanet:     DB "Planet Data....."
  69+ C004 65 74 20 44
  69+ C008 61 74 61 2E
  69+ C00C 2E 2E 2E 2E
  70+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  71+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  72+ C010              ; Universe map substibute for INWK
  73+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  74+ C010              P_BnKDataBlock:
  75+ C010                                      ;INCLUDE "./Universe/Planet/PlanetPosVars.asm"
  76+ C010                                      ;INCLUDE "./Universe/Planet/PlanetRotationMatrixVars.asm"
  77+ C010                                      ;INCLUDE "./Universe/Planet/PlanetAIRuntimeData.asm"
  78+ C010                                          UnivPosVarsMacro P
  78+ C010 00          >P_BnKxlo                     DB  0                       ; INWK+0
  78+ C011 00          >P_BnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
  78+ C012 00          >P_BnKxsgn                    DB  0                       ; INWK+2
  78+ C013 00          >P_BnKylo                     DB  0                       ; INWK+3 \ ylo
  78+ C014 00          >P_BnKyhi                     DB  0                       ; INWK+4 \ yHi
  78+ C015 00          >P_BnKysgn                    DB  0                       ; INWK +5
  78+ C016 00          >P_BnKzlo                     DB  0                       ; INWK +6
  78+ C017 00          >P_BnKzhi                     DB  0                       ; INWK +7
  78+ C018 00          >P_BnKzsgn                    DB  0                       ; INWK +8
  78+ C019 00 00       >P_CompassX                   DW  0
  78+ C01B 00 00       >P_CompassY                   DW  0
  78+ C01D 00 00       >P_BnKElipseCenterX           DW  0
  78+ C01F 00 00       >P_BnKElipseCenterY           DW  0
  78+ C021 00 00       >P_BnKElipseRadiusU           DW  0
  78+ C023 00 00       >P_BnKElipseRadiusV           DW  0
  79+ C025                                          UnivRotationVarsMacro P
  79+ C025 00 00       >P_BnKrotmatSidevX            DW  0                       ; INWK +21
  79+ C027             >P_BnKrotmatSidev             equ P_BnKrotmatSidevX
  79+ C027 00 00       >P_BnKrotmatSidevY            DW  0                       ; INWK +23
  79+ C029 00 00       >P_BnKrotmatSidevZ            DW  0                       ; INWK +25
  79+ C02B 00 00       >P_BnKrotmatRoofvX            DW  0                       ; INWK +15
  79+ C02D             >P_BnKrotmatRoofv             equ P_BnKrotmatRoofvX
  79+ C02D 00 00       >P_BnKrotmatRoofvY            DW  0                       ; INWK +17
  79+ C02F 00 00       >P_BnKrotmatRoofvZ            DW  0                       ; INWK +19
  79+ C031 00 00       >P_BnKrotmatNosevX            DW  0                       ; INWK +9
  79+ C033             >P_BnKrotmatNosev             EQU P_BnKrotmatNosevX
  79+ C033 00 00       >P_BnKrotmatNosevY            DW  0                       ; INWK +11
  79+ C035 00 00       >P_BnKrotmatNosevZ            DW  0                       ; INWK +13
  80+ C037
  81+ C037                                      ;INCLUDE "./Universe/Planet/PlanetXX16Vars.asm"
  82+ C037                                      ;INCLUDE "./Universe/Planet/PlanetXX25Vars.asm"
  83+ C037                                      ;INCLUDE "./Universe/Planet/PlanetXX18Vars.asm"
  84+ C037                                          XX16DefineMacro P
  84+ C037             >;-- XX16 --------------------------------------------------------------------------------------------------------------------------
  84+ C037 00 00       >P_BnkTransmatSidevX          DW  0               ; XX16+0
  84+ C039             >P_BnkTransmatSidev           EQU P_BnkTransmatSidevX
  84+ C039 00 00       >P_BnkTransmatSidevY          DW 0                ; XX16+2
  84+ C03B 00 00       >P_BnkTransmatSidevZ          DW 0                ; XX16+2
  84+ C03D 00 00       >P_BnkTransmatRoofvX          DW 0
  84+ C03F             >P_BnkTransmatRoofv           EQU P_BnkTransmatRoofvX
  84+ C03F 00 00       >P_BnkTransmatRoofvY          DW 0                ; XX16+2
  84+ C041 00 00       >P_BnkTransmatRoofvZ          DW 0                ; XX16+2
  84+ C043 00 00       >P_BnkTransmatNosevX          DW 0
  84+ C045             >P_BnkTransmatNosev           EQU P_BnkTransmatNosevX
  84+ C045 00 00       >P_BnkTransmatNosevY          DW 0                ; XX16+2
  84+ C047 00 00       >P_BnkTransmatNosevZ          DW 0                ; XX16+2
  84+ C049 00 00       >P_BnkTransmatTransX          DW 0
  84+ C04B 00 00       >P_BnkTransmatTransY          DW 0
  84+ C04D 00 00       >P_BnkTransmatTransZ          DW 0
  84+ C04F             >P_XX16                       equ P_BnkTransmatSidev
  84+ C04F             >;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  84+ C04F 00 00       >P_BnkTransInvRow0x0          DW 0
  84+ C051 00 00       >P_BnkTransInvRow0x1          DW 0
  84+ C053 00 00       >P_BnkTransInvRow0x2          DW 0
  84+ C055 00 00       >P_BnkTransInvRow0x3          DW 0
  84+ C057 00 00       >P_BnkTransInvRow1y0          DW 0
  84+ C059 00 00       >P_BnkTransInvRow1y1          DW 0
  84+ C05B 00 00       >P_BnkTransInvRow1y2          DW 0
  84+ C05D 00 00       >P_BnkTransInvRow1y3          DW 0
  84+ C05F 00 00       >P_BnkTransInvRow2z0          DW 0
  84+ C061 00 00       >P_BnkTransInvRow2z1          DW 0
  84+ C063 00 00       >P_BnkTransInvRow2z2          DW 0
  84+ C065 00 00       >P_BnkTransInvRow2z3          DW 0
  84+ C067             >
  84+ C067             >P_XX16Inv                    equ P_BnkTransInvRow0x0
  85+ C067                                          XX25DefineMacro P
  85+ C067             >;-- XX25 --------------------------------------------------------------------------------------------------------------------------
  85+ C067 00          >P_BnKProjxLo                 DB  0
  85+ C068 00          >P_BnKProjxHi                 DB  0
  85+ C069 00          >P_BnKProjxSgn                DB  0
  85+ C06A             >P_BnKProjx                   EQU P_BnKProjxLo
  85+ C06A 00          >P_BnKProjyLo                 DB  0
  85+ C06B 00          >P_BnKProjyHi                 DB  0
  85+ C06C 00          >P_BnKProjySgn                DB  0
  85+ C06D             >P_BnKProjy                   EQU P_BnKProjyLo
  85+ C06D 00          >P_BnKProjzLo                 DB  0
  85+ C06E 00          >P_BnKProjzHi                 DB  0
  85+ C06F 00          >P_BnKProjzSgn                DB  0
  85+ C070             >P_BnKProjz                   EQU P_BnKProjzLo
  85+ C070             >P_XX25                       EQU P_BnKProjxLo
  86+ C070                                          XX18DefineMacro P
  86+ C070             >;-- XX18 --------------------------------------------------------------------------------------------------------------------------
  86+ C070 00          >P_BnkDrawCam0xLo             DB  0               ; XX18+0
  86+ C071 00          >P_BnkDrawCam0xHi             DB  0               ; XX18+1
  86+ C072 00          >P_BnkDrawCam0xSgn            DB  0               ; XX18+2
  86+ C073             >P_BnkDrawCam0x               equ P_BnkDrawCam0xLo
  86+ C073 00          >P_BnkDrawCam0yLo             DB  0               ; XX18+3
  86+ C074 00          >P_BnkDrawCam0yHi             DB  0               ; XX18+4
  86+ C075 00          >P_BnkDrawCam0ySgn            DB  0               ; XX18+5
  86+ C076             >P_BnkDrawCam0y               equ P_BnkDrawCam0yLo
  86+ C076 00          >P_BnkDrawCam0zLo             DB  0               ; XX18+6
  86+ C077 00          >P_BnkDrawCam0zHi             DB  0               ; XX18+7
  86+ C078 00          >P_BnkDrawCam0zSgn            DB  0               ; XX18+8
  86+ C079             >P_BnkDrawCam0z               equ P_BnkDrawCam0zLo
  86+ C079             >P_XX18                       equ P_BnkDrawCam0xLo
  87+ C079
  88+ C079                                          UnivCoreAIVarsMacro P
  88+ C079 00          >P_BnKRotXCounter             DB  0                       ; INWK +29
  88+ C07A 00          >P_BnKRotZCounter             DB  0                       ; INWK +30
  88+ C07B 00          >P_BnkCam0yLo                 DB  0                       ; INWK +33 ????
  88+ C07C 00          >P_BnkCam0yHi                 DB  0                       ; INWK +34?????
  88+ C07D 00          >P_BnKShipType                DB  0
  88+ C07E             >
  88+ C07E             >; Used to make 16 bit reads a little cleaner in source code
  88+ C07E 00 00 00    >P_BnKzPoint                  DS  3
  88+ C081             >P_BnKzPointLo                equ P_BnKzPoint
  88+ C081             >P_BnKzPointHi                equ P_BnKzPoint+1
  88+ C081             >P_BnKzPointSign              equ P_BnKzPoint+2
  88+ C081             >
  88+ C081             >; Used for medridan drawing routines
  88+ C081 00 00       >P_BnKCx                      DW  0
  88+ C083             >P_BnKCxSign                  EQU P_BnKCx+1
  88+ C083 00 00       >P_BnKCy                      DW  0
  88+ C085             >P_BnKCySign                  EQU P_BnKCy+1
  88+ C085 00 00       >P_BnKUx                      DW  0
  88+ C087             >P_BnKUxSign                  EQU P_BnKUx+1
  88+ C087 00 00       >P_BnKUy                      DW  0
  88+ C089             >P_BnKUySign                  EQU P_BnKUy+1
  88+ C089 00 00       >P_BnKVx                      DW  0
  88+ C08B             >P_BnKVxSign                  EQU P_BnKVx+1
  88+ C08B 00 00       >P_BnKVy                      DW  0
  88+ C08D             >P_BnKVySign                  EQU P_BnKVy+1
  88+ C08D 00          >P_BnKSinCNT2                 DB  0
  88+ C08E 00          >P_BnKSinCNT2Sign             DB  0
  88+ C08F 00          >P_BnKCosCNT2                 DB  0
  88+ C090 00          >P_BnKCosCNT2Sign             DB  0
  88+ C091 00          >P_BnKUxCos                   DB  0
  88+ C092 00          >P_BnKUxCosSign               DB  0
  88+ C093 00          >P_BnKUyCos                   DB  0
  88+ C094 00          >P_BnKUyCosSign               DB  0
  88+ C095 00          >P_BnKVxSin                   DB  0
  88+ C096 00          >P_BnKVxSinSign               DB  0
  88+ C097 00          >P_BnKVySin                   DB  0
  88+ C098 00          >P_BnKVySinSign               DB  0
  88+ C099 00          >P_BnKVxVySinSign             DB  0
  88+ C09A 00          >P_BnKUxUyCosSign             DB  0
  88+ C09B 00 00       >P_BnKUxCosAddVxSin           DW  0
  88+ C09D 00 00       >P_BnKUyCosSubVySin           DW  0
  88+ C09F 00          >P_BnKAngle                   DB  0
  88+ C0A0             >s
  88+ C0A0             >
  88+ C0A0             >; General local variables used in universe object
  88+ C0A0 00          >P_BnKTGT                     DB  0
  88+ C0A1 00          >P_BnKSTP                     DB  0
  88+ C0A2 00 00 00... >P_BnKLSP                     DS  50              ; move to planet or L2 code ?
  88+ C0D4 00          >P_BnKCNT                     DB  0               ; 93
  88+ C0D5 00          >P_BnKCNT2                    DB  0               ; 93
  88+ C0D6             >; Replaced LSX2 and LSY2 with plot heaps of 64 x 2 bytes each + 1 pair for initial point
  88+ C0D6             >    IFDEF MERIDANLINEDEBUG
  88+ C0D6 ~           >prefix1?_BnKPlotXHeap               DS  $82			   ; &0EC0	    \ LSX2 bline buffer size?
  88+ C0D6 ~           >prefix1?_BnKPlotYHeap               DS  $82            ; &0F0E	    \ LSY2
  88+ C0D6             >    ENDIF
  88+ C0D6 00          >P_BnKPlotIndex               DB  0
  88+ C0D7             >    DISPLAY "TODO can we remove this and just use BnkCNT = 0 as the same thing?"
  88+ C0D7 00          >P_BnKFlag					DB  0
  88+ C0D8             >
  88+ C0D8             >; Post clipping the results are now 8 bit
  88+ C0D8 00          >P_BnKVisibility              DB  0               ; replaces general purpose xx4 in renderingW
  88+ C0D9 00          >P_BnKProjectedY              DB  0
  88+ C0DA 00          >P_BnKProjectedX              DB  0
  88+ C0DB             >P_BnKProjected               equ P_BnKProjectedY  ; resultant projected position
  88+ C0DB 00 00 00... >P_XX15Save                   DS  8
  88+ C0E3 00 00 00... >P_XX15Save2                  DS  8
  88+ C0EB 00          >P_Radius                     DB  0
  88+ C0EC             >; Used when drawing curves for the end value from previous calls to BLINE
  88+ C0EC             >; held as 16 bit values pre clipping
  88+ C0EC 00 00       >P_PrevXPos                   DW 0
  88+ C0EE 00 00       >P_PrevYPos                   DW 0
  88+ C0F0 00 00       >P_NewXPos                    DW 0
  88+ C0F2 00 00       >P_NewYPos                    DW 0
  88+ C0F4             >
  88+ C0F4             >; Colouration
  88+ C0F4             >; For planets, Colour 1 is main colour, Colour 2 is outer rim
  88+ C0F4             >; if we are going to do outer rim then may have colour thickeness as number of pixels to simulat atmosphere
  88+ C0F4 00          >P_Colour1                    DB 0
  88+ C0F5 00          >P_Colour2                    DB 0
  88+ C0F6 00          >P_Colour2Thickness           DB 0
  88+ C0F7             >
  88+ C0F7             >;        -- _pl(prf .. "Radius                     DW  0
  88+ C0F7             >;        -- _pl(prf .. "RadiusHigh                 equ prefix1?_Radius+1
  89+ C0F7
  90+ C0F7
  91+ C0F7                                      ;INCLUDE "./Universe/Planet/PlanetXX15Vars.asm"
  92+ C0F7                                          XX15DefineMacro P
  92+ C0F7             >
  92+ C0F7 00          >P_BnKXScaled                  DB  0               ; XX15+0Xscaled
  92+ C0F8 00          >P_BnKXScaledSign              DB  0               ; XX15+1xsign
  92+ C0F9 00          >P_BnKYScaled                  DB  0               ; XX15+2yscaled
  92+ C0FA 00          >P_BnKYScaledSign              DB  0               ; XX15+3ysign
  92+ C0FB 00          >P_BnKZScaled                  DB  0               ; XX15+4zscaled
  92+ C0FC 00          >P_BnKZScaledSign              DB  0               ; XX15+5zsign
  92+ C0FD 00 00       >P_XX1576                      DW  0    ; y2
  92+ C0FF             >
  92+ C0FF             >P_XX15:                       equ P_BnKXScaled
  92+ C0FF             >P_XX15VecX:                   equ P_XX15
  92+ C0FF             >P_XX15VecY:                   equ P_XX15+1
  92+ C0FF             >P_XX15VecZ:                   equ P_XX15+2
  92+ C0FF             >P_BnKXPoint:                  equ P_XX15
  92+ C0FF             >P_BnKXPointLo:                equ P_XX15+0
  92+ C0FF             >P_BnKXPointHi:                equ P_XX15+1
  92+ C0FF             >P_BnKXPointSign:              equ P_XX15+2
  92+ C0FF             >P_BnKYPoint:                  equ P_XX15+3
  92+ C0FF             >P_BnKYPointLo:                equ P_XX15+3
  92+ C0FF             >P_BnKYPointHi:                equ P_XX15+4
  92+ C0FF             >P_BnKYPointSign:              equ P_XX15+5
  92+ C0FF             >
  92+ C0FF             >P_XX1510                      EQU P_BnKXScaled    ; x1 as a 16-bit coordinate (x1_hi x1_lo)
  92+ C0FF             >P_XX1532                      EQU P_BnKYScaled   ; y1 as a 16-bit coordinate (y1_hi y1_lo)
  92+ C0FF             >P_XX1554                      EQU P_BnKZScaled   ; x2
  92+ C0FF             >P_XX1554p1                    EQU P_XX1554+1
  92+ C0FF             >P_XX15X1lo                    EQU P_XX1510
  92+ C0FF             >P_XX15X1hi                    EQU P_XX1510+1
  92+ C0FF             >P_XX15Y1lo                    EQU P_XX1532
  92+ C0FF             >P_XX15Y1hi                    EQU P_XX1532+1
  92+ C0FF             >P_XX15X2lo                    EQU P_XX1554
  92+ C0FF             >P_XX15X2hi                    EQU P_XX1554+1
  92+ C0FF             >P_XX15Y2lo                    EQU P_XX1210
  92+ C0FF             >P_XX15Y2hi                    EQU P_XX1210+1
  92+ C0FF             >P_XX15PlotX1                  EQU P_XX15
  92+ C0FF             >P_XX15PlotY1                  EQU P_XX15+1
  92+ C0FF             >P_XX15PlotX2                  EQU P_XX15+2
  92+ C0FF             >P_XX15PlotY2                  EQU P_XX15+3
  93+ C0FF                                      ;INCLUDE "./Universe/Planet/PlanetXX12Vars.asm"
  94+ C0FF                                          XX12DefineMacro P
  94+ C0FF             >;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
  94+ C0FF             >; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
  94+ C0FF             >
  94+ C0FF             >P_XX1210                     EQU P_XX1576
  94+ C0FF             >P_XX12p1                     EQU P_XX1210+1
  94+ C0FF             >P_XX12                       EQU P_XX1210
  94+ C0FF             >
  94+ C0FF             >
  94+ C0FF             >P_BnKXX12xLo                 EQU P_XX12               ; XX12+0
  94+ C0FF             >P_BnKXX12xSign               EQU P_XX12+1   ; XX12+1
  94+ C0FF             >P_BnKXX12yLo                 EQU P_XX12+2   ; XX12+2
  94+ C0FF             >P_BnKXX12ySign               EQU P_XX12+3   ; XX12+3
  94+ C0FF             >P_BnKXX12zLo                 EQU P_XX12+4   ; XX12+4
  94+ C0FF             >P_BnKXX12zSign               EQU P_XX12+5   ; XX12+5
  94+ C0FF 00 00 00... >P_XX12Save                   DS  6
  94+ C105 00 00 00... >P_XX12Save2                  DS  6
  94+ C10B             >
  94+ C10B             >P_varXX12                    EQU P_XX12
  94+ C10B             >; Repurposed XX12 when plotting lines
  94+ C10B             >P_BnkY2                      equ P_XX12+0
  94+ C10B             >P_BnKy2Lo                    equ P_XX12+0
  94+ C10B             >P_BnkY2Hi                    equ P_XX12+1
  94+ C10B             >P_BnkDeltaXLo                equ P_XX12+2
  94+ C10B             >P_BnkDeltaXHi                equ P_XX12+3
  94+ C10B             >P_BnkDeltaYLo                equ P_XX12+4
  94+ C10B             >P_BnkDeltaYHi                equ P_XX12+5
  94+ C10B             >P_BnkGradient                equ P_XX12+2
  94+ C10B             >P_BnkTemp1                   equ P_XX12+2
  94+ C10B             >P_BnkTemp1Lo                 equ P_XX12+2
  94+ C10B             >P_BnkTemp1Hi                 equ P_XX12+3
  94+ C10B             >P_BnkTemp2                   equ P_XX12+3
  94+ C10B             >P_BnkTemp2Lo                 equ P_XX12+3
  94+ C10B             >P_BnkTemp2Hi                 equ P_XX12+4
  95+ C10B
  96+ C10B                                          ClippingVarsMacro P
  96+ C10B             >;-- Clipping code for universe objects -------------------------------------------
  96+ C10B 00          >P_XX13        DB 0
  96+ C10C             >
  96+ C10C             >
  96+ C10C 00 00 00 00 >P_varK3		 DS	4				; D2
  96+ C110             >P_centreX     equ P_varK3
  96+ C110 00          >P_varK3p2	 DB	0				; 42
  96+ C111 00          >P_varK3p3	 DB	0				; 43
  96+ C112             >P_varK3p1	 equ P_varK3+1			; D3
  96+ C112 00 00 00 00 >P_varK4		 DS	4				; E0
  96+ C116             >P_centreY     equ P_varK4
  96+ C116             >P_varK4p1	 equ P_varK4+1			; D3
  96+ C116 00 00 00... >P_varK5       DS  6
  96+ C11C             >P_varK5p2     equ P_varK5+2
  96+ C11C 00 00 00... >P_varK6       DS  6
  96+ C122             >P_varK6p2     equ P_varK6+2
  96+ C122             >
  96+ C122 00          >P_XX12p2      DB 0    ; The line's gradient * 256 (so 1.0 = 256)
  96+ C123 00          >P_XX12p3      DB 0    ; The direction of slope ; + LT to BR; - TR to BL
  96+ C124 00          >P_XX12p4      DB 0
  96+ C125 00          >P_XX12p5      DB 0
  96+ C126             >P_Delta_x     EQU P_XX12p2
  96+ C126             >P_Delta_y     EQU P_XX12p4
  96+ C126 00          >P_Tvar        DB 0    ; The gradient of slope ; 0 if it's a shallow slope (DX > DY) ; &FF if it's a steep slope (DY > DX) Returns:  XX15        m         x1 as an 8-bit coordinate XX15+2               y1 as an 8-bit coordinate
  96+ C127 00          >P_Qvar        DB 0
  96+ C128 00          >P_Rvar        DB 0    ; general purpose for calcs  Paired with S must be done this way round for SUBHeightFromY1 etc to work
  96+ C129 00          >P_Svar        DB 0    ; sign variable
  96+ C12A             >P_SRvarPair   EQU P_Rvar
  96+ C12A 00          >P_Xreg        DB 0
  96+ C12B 00          >P_Yreg        DB 0
  96+ C12C             >P_YXregPair   EQU P_Xreg
  97+ C12C
  98+ C12C
  99+ C12C              P_BnK_Data_len               EQU $ - P_BnKDataBlock
 100+ C12C
 101+ C12C
 102+ C12C                                          ClippingCodeLL28Macro P
 102+ C12C 21 B2 F1    >P_LL28_6502:         ld      hl,Qvar                 ; CMP Q                  \ If A >= Q, then the answer will not fit in one byte,
 102+ C12F 4E          >                            ld      c,(hl)                  ; using c as Q var
 102+ C130 B9          >                            cp      c
 102+ C131             >                            FlipCarryFlag
 102+ C131 3F          >                        ccf
 102+ C132 DA 5A C1    >                            jp      c, P_LL2_6502    ; BCS LL2                \ so jump to LL2 to return 255
 102+ C135 06 FE       >                            ld      b,$FE                   ; LDX #%11111110         \ Set R to have bits 1-7 set, so we can rotate through 7 loop iterations, getting a 1 each time, and then we use b as Rvar
 102+ C137 CB 27       >P_LL31_6502:          sla     a                       ; ASL A                  \ Shift A to the left
 102+ C139 DA 4E C1    >                            jp      c, P_LL29_6502             ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
 102+ C13C             >                            FlipCarryFlag                   ;                          If A < N, then C flag is set.
 102+ C13C 3F          >                        ccf
 102+ C13D             >                            JumpIfALTNusng c, P_LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
 102+ C13D B9          >                        cp      c
 102+ C13E DA 43 C1    >                        jp		c, P_LL31_SKIPSUB_6502
 102+ C141             >                                                                ; BCC P%+4
 102+ C141 91          >                            sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
 102+ C142             >                            ClearCarryFlag
 102+ C142 B7          >                        or a
 102+ C143             >P_LL31_SKIPSUB_6502:  FlipCarryFlag
 102+ C143 3F          >                        ccf
 102+ C144 CB 10       >                            rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
 102+ C146 DA 37 C1    >                            jp      c, P_LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
 102+ C149 78          >                            ld      a,b
 102+ C14A 32 B3 F1    >                            ld      (Rvar),a
 102+ C14D C9          >                            ret                             ; RTS                    \ R left with remainder of division
 102+ C14E 91          >P_LL29_6502:          sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
 102+ C14F             >                            SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
 102+ C14F 37          >                        scf
 102+ C150 CB 10       >                            rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
 102+ C152 DA 37 C1    >                            jp      c, P_LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
 102+ C155 78          >                            ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
 102+ C156 32 B3 F1    >                            ld      (Rvar),a                ; .
 102+ C159 C9          >                            ret                             ; .                      \ remainder of the division
 102+ C15A 3E FF       >P_LL2_6502:          ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
 102+ C15C 32 B3 F1    >                            ld      (Rvar),a                ; STA R                  \ possible answer to 256, i.e. R = 255
 102+ C15F             >                            SetCarryFlag                    ; we failed so need carry flag set
 102+ C15F 37          >                        scf
 102+ C160 C9          >                            ret                             ; RTS                    \ Return from the subroutine
 102+ C161             >
 102+ C161 3A B5 F1    >P_ADDXRegtoY1:       ld      a,(Xreg)                ; Set y1 = y1 + (Y X)
 102+ C164 4F          >                            ld      c,a
 102+ C165 06 00       >                            ld      b,0
 102+ C167 2A F9 C0    >                            ld      hl,(P_XX1532)
 102+ C16A             >                            ClearCarryFlag
 102+ C16A B7          >                        or a
 102+ C16B ED 4A       >                            adc     hl,bc
 102+ C16D 22 F9 C0    >                            ld      (P_XX1532),hl
 102+ C170 C9          >                            ret
 102+ C171             >
 102+ C171 ED 4B B5 F1 >P_ADDYXRegtoY1:      ld      bc,(YXregPair)          ; Set y1 = y1 + (Y X)
 102+ C175 2A F9 C0    >                            ld      hl,(P_XX1532)
 102+ C178             >                            ClearCarryFlag
 102+ C178 B7          >                        or a
 102+ C179 ED 4A       >                            adc     hl,bc
 102+ C17B 22 F9 C0    >                            ld      (P_XX1532),hl
 102+ C17E C9          >                            ret
 102+ C17F             >
 102+ C17F ED 4B B5 F1 >P_ADDYXRegtoX1:      ld      bc,(YXregPair)          ; Set x1 = x1 + (Y X)
 102+ C183 2A F7 C0    >                            ld      hl,(P_XX1510)
 102+ C186             >                            ClearCarryFlag
 102+ C186 B7          >                        or a
 102+ C187 ED 4A       >                            adc     hl,bc
 102+ C189 22 F7 C0    >                            ld      (P_XX1510),hl
 102+ C18C C9          >                            ret
 102+ C18D             >
 102+ C18D 2A F9 C0    >P_SUBBCFromY1:       ld      hl,(P_XX1532)             ; Set (S R) = (y1_hi y1_lo) - BC where BC can be say screen height
 102+ C190             >                            ClearCarryFlag
 102+ C190 B7          >                        or a
 102+ C191 ED 42       >                            sbc     hl,bc
 102+ C193 22 B3 F1    >                            ld      (SRvarPair),hl
 102+ C196 C9          >                            ret
 102+ C197             >
 102+ C197 2A B5 F1    >P_AddSRToYX:         ld      hl,(YXregPair)
 102+ C19A ED 5B B3 F1 >                            ld      de,(SRvarPair)
 102+ C19E             >                            ClearCarryFlag
 102+ C19E B7          >                        or a
 102+ C19F ED 5A       >                            adc     hl,de
 102+ C1A1 22 B5 F1    >                            ld      (YXregPair),hl
 102+ C1A4 C9          >                            ret
 102+ C1A5             >
 102+ C1A5 7C          >P_ClampX:            ld      a,h
 102+ C1A6 A7          >                            and     a
 102+ C1A7 7D          >                            ld      a,l
 102+ C1A8 C8          >                            ret     z
 102+ C1A9 F2 AE C1    >                            jp      p,.Max255
 102+ C1AC             >.ClampXMin0:                ZeroA
 102+ C1AC AF          >                        xor a
 102+ C1AD C9          >                            ret
 102+ C1AE 3E FF       >.Max255:                    ld      a,$FF
 102+ C1B0 C9          >                            ret
 102+ C1B1             >
 102+ C1B1 7C          >P_ClampY:            ld      a,h
 102+ C1B2 A7          >                            and     a
 102+ C1B3 CA BE C1    >                            jp      z,.ClampYlo
 102+ C1B6 F2 BB C1    >                            jp      p,.Max127
 102+ C1B9             >.ClampYMin0:                ZeroA
 102+ C1B9 AF          >                        xor a
 102+ C1BA C9          >                            ret
 102+ C1BB 3E 7F       >.Max127:                    ld      a,127
 102+ C1BD C9          >                            ret
 102+ C1BE 7D          >.ClampYlo:                  ld      a,l
 102+ C1BF A7          >                            and     a
 102+ C1C0 F0          >                            ret     p
 102+ C1C1 3E 7F       >                            ld      a,127
 102+ C1C3 C9          >                            ret
 103+ C1C4                                          ClippingCodeLL120Macro P
 103+ C1C4 3A F7 C0    >P_LL120_6502:        ld      a,(P_XX1510)              ;LDA XX15               \ Set R = x1_lo
 103+ C1C7 32 B3 F1    >                            ld      (Rvar),a                ;STA R
 103+ C1CA CD 76 C2    >                            call    P_LL129_6502              ;JSR LL129              \ Call LL129 to do the following:  Q = XX12+2 = line gradient, A = S EOR XX12+3 = S EOR slope direction  (S R) = |S R|
 103+ C1CD F5          >                            push    af                      ;PHA                    \ Store A on the stack so we can use it later
 103+ C1CE             >; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump
 103+ C1CE 3A B1 F1    >                            ld      a,(Tvar)                ; .
 103+ C1D1 32 B5 F1    >                            ld      (Xreg),a                ;. REDUNDANT REMOVE IN OPTIMISATION
 103+ C1D4 A7          >                            and     a                       ;BNE LL121              \ down to LL121 to calculate this instead (Y X) = (S R) / Q
 103+ C1D5             >; DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.                      (recover teh saved A before the cp)
 103+ C1D5 20 48       >                            jr      nz,P_LL121_6502           ;.
 103+ C1D7             >;..   (Y X) = (S R) * Q - must be ABS, sign determined by opposite of the sign of the value on top of stack
 103+ C1D7             >P_LL122_6502:         ZeroA                           ;LDA #0                 \ Set A = 0
 103+ C1D7 AF          >                        xor a
 103+ C1D8             >
 103+ C1D8             >                            IFDEF DEBUG_LL122_DIRECT"
 103+ C1D8 ~           >                                  DISPLAY "DIRECT CALL TO LL122 so dummy push a to stack with 0"
 103+ C1D8 ~           >                                  push    af
 103+ C1D8             >                            ENDIF
 103+ C1D8 32 B5 F1    >                            ld      (Xreg),a                ;TAX                    \ Set (Y X) = 0 so we can start building the answer here
 103+ C1DB 32 B6 F1    >                            ld      (Yreg),a                ;TAY
 103+ C1DE 21 B4 F1    >                            ld      hl,Svar
 103+ C1E1 ED 4B B3 F1 >                            ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right, so we extract bit 0 of (S R)
 103+ C1E5             >                            ShiftBCRight1                   ;ROR R                  \ into the C flag
 103+ C1E5 CB 38       >			   srl b
 103+ C1E7 CB 19       >			   rr  c
 103+ C1E9 ED 43 B3 F1 >                            ld      (SRvarPair),bc
 103+ C1ED 21 B2 F1    >                            ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 103+ C1F0 CB 26       >                            sla     (hl)                    ;.
 103+ C1F2 30 03       >                            jr      nc, P_LL126_6502          ;BCC LL126              \ If C (i.e. the next bit from Q) is clear, do not do
 103+ C1F4             >; the addition for this bit of Q, and instead skip to LL126 to just do the shifts
 103+ C1F4 CD 22 F2    >P_LL125_6502:        call    AddSRToYX               ;TXA                    \ Set (Y X) = (Y X) + (S R)  starting with the low bytes And then doing the high bytes
 103+ C1F7 ED 4B B3 F1 >P_LL126_6502:        ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right
 103+ C1FB             >                            ShiftBCRight1                   ;ROR R
 103+ C1FB CB 38       >			   srl b
 103+ C1FD CB 19       >			   rr  c
 103+ C1FF ED 43 B3 F1 >                            ld      (SRvarPair),bc          ;.
 103+ C203 21 B2 F1    >                            ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 103+ C206 CB 26       >                            sla     (hl)                    ;.
 103+ C208 38 EA       >                            jr      c,P_LL125_6502            ;BCS LL125              \ If C (i.e. the next bit from Q) is set, loop back to LL125 to do the addition for this bit of Q
 103+ C20A 20 EB       >                            jr      nz,P_LL126_6502           ;BNE LL126              \ If Q has not yet run out of set bits, loop back to LL126 to do the \"shift\" part of shift-and-add until we have done additions for all the set bits in Q, to give us our multiplication result
 103+ C20C F1          >                            pop     af                      ;PLA                    \ Restore A, which we calculated above, from the stack
 103+ C20D A7          >                            and     a                       ;BPL LL133              \ If A is positive jump to LL133 to negate (Y X) and
 103+ C20E F2 67 C2    >                            jp      p,P_LL133_6502            ;.
 103+ C211             >                            ;.. return from the subroutine using a tail call
 103+ C211 C9          >                            ret                             ;RTS                    \ Return from the subroutine
 104+ C212                                          ClippingCodeLL122Macro P
 104+ C212 CD 76 C2    >P_LL123_6502:         call    P_LL129_6502              ;JSR LL129              \ Call LL129 to do the following   Q = XX12+2   = line gradient
 104+ C215 F5          >                             push    af                      ;PHA                    \ Store A on the stack so we can use it later
 104+ C216             >; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump up
 104+ C216 3A B1 F1    >                             ld      a,(Tvar)                ; .
 104+ C219 32 B5 F1    >                             ld      (Xreg),a                ;BNE LL122              \ to LL122 to calculate this instead:
 104+ C21C A7          >                             and     a                       ;.
 104+ C21D             >;  DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.
 104+ C21D 20 B8       >                             jr      nz,P_LL122_6502           ;.
 104+ C21F             >;--  The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2
 104+ C21F 3E FF       >P_LL121_6502:         ld      a,$FF                   ;LDA #%11111111         \ Set Y = %11111111
 104+ C221 32 B6 F1    >                             ld      (Yreg),a                ;TAY
 104+ C224 CB 27       >                             sla     a                       ;ASL A                  \ Set X = %11111110
 104+ C226 32 B5 F1    >                             ld      (Xreg),a                ;TAX
 104+ C229             >;--  This sets (Y X) = %1111111111111110, so we can rotate through 15 loop iterations, getting a 1 each time, and then getting a 0 on the 16th iteration... and we can also use it to catch our result bits into bit 0 each time
 104+ C229 ED 4B B3 F1 >P_LL130_6502:         ld      bc,(SRvarPair)          ;ASL R                  \ Shift (S R) to the left
 104+ C22D             >                            ShiftBCLeft1                    ;.
 104+ C22D CB 21       >			   sla c
 104+ C22F CB 10       >			   rl  b
 104+ C231 ED 43 B3 F1 >                            ld      (SRvarPair),bc          ;ROL S
 104+ C235 3A B4 F1    >                            ld      a,(Svar)                ;LDA S                  \ Set A = S
 104+ C238 38 07       >                            jr      c, P_LL131_6502           ;BCS LL131              \ If bit 7 of S was set, then jump straight to the subtraction
 104+ C23A 21 B2 F1    >                            ld      hl,Qvar                 ;CMP Q                  \ If A < Q (i.e. S < Q), skip the following subtractions
 104+ C23D BE          >                            cp      (hl)
 104+ C23E             >                            FlipCarryFlag                   ; note flip carry flag here to simulate 6502 operation
 104+ C23E 3F          >                        ccf
 104+ C23F 30 12       >                            jr      nc,P_LL132A_6502          ;BCC LL132  (NOTE Carry flag reversed in Z80 for CP)
 104+ C241             >P_LL131_6502:         FlipCarryFlag                   ;flip carry to make it act like a 6502 borrow
 104+ C241 3F          >                        ccf
 104+ C242 9E          >                            sbc     (hl)                    ;SBC Q                  \ A >= Q (i.e. S >= Q) so set:
 104+ C243 32 B4 F1    >                            ld      (Svar),a                ;STA S
 104+ C246 3A B3 F1    >                            ld      a,(Rvar)                ;LDA R                  \ And then doing the high bytes
 104+ C249             >                            ClearCarryFlag                  ;\   S = (A R) - Q  = (S R) - Q starting with the low bytes (we know the C flag is set so the subtraction will be correct)
 104+ C249 B7          >                        or a
 104+ C24A DE 00       >                            sbc     0                       ;SBC #0
 104+ C24C 32 B3 F1    >                            ld      (Rvar),a                ;STA R
 104+ C24F             >                            SetCarryFlag                    ;SEC                    \ Set the C flag to rotate into the result in (Y X)
 104+ C24F 37          >                        scf
 104+ C250 C3 54 C2    >                            jp      P_LL132_6502              ;added so that we can do a 6502 style carry above
 104+ C253 00          >P_LL132A_6502:        nop; FlipCarryFlag
 104+ C254 ED 4B B5 F1 >P_LL132_6502:         ld      bc,(YXregPair)          ; Rotate the counter in (Y X) to the left, and catch the
 104+ C258             >                            RollBCLeft1                     ; ROL A                  \ result bit into bit 0 (which will be a 0 if we didn't
 104+ C258 CB 11       >               rl  c
 104+ C25A CB 10       >               rl  b
 104+ C25C ED 43 B5 F1 >                            ld      (YXregPair),bc          ; TAX                    \ do the subtraction, or 1 if we did)
 104+ C260 38 C7       >                            jr      c, P_LL130_6502           ; BCS LL130              \ If we still have set bits in (Y X), loop back to LL130 to do the next iteration of 15, until we have done the whole division
 104+ C262             >        IFDEF DEBUG_LL121_DIRECT
 104+ C262 ~           >              DISPLAY "DIRECT CALL TO LL121 so dummy push"
 104+ C262 ~           >                            push    af
 104+ C262             >        ENDIF
 104+ C262 F1          >                            pop     af                      ; PLA                    \ Restore A, which we calculated above, from the stack
 104+ C263 A7          >                            and     a                       ; BMI LL128              \ If A is negative jump to LL128 to return from the
 104+ C264 FA 75 C2    >                            jp      m, P_LL128_6502           ; .                      \ subroutine with (Y X) as is
 104+ C267 ED 4B B5 F1 >P_LL133_6502:          ld      bc,(YXregPair)          ; TXA                    \ Otherwise negate (Y X) using two's complement by first
 104+ C26B             >                            macronegate16bc                 ; EOR #%11111111         \ setting the low byte to ~X + 1
 104+ C26B AF          >					xor 	a
 104+ C26C 91          >                    sub 	c
 104+ C26D 4F          >                    ld 		c,a
 104+ C26E 9F          >                    sbc 	a,a
 104+ C26F 90          >                    sub 	b
 104+ C270 47          >                    ld 		b,a
 104+ C271 ED 43 B5 F1 >                            ld      (YXregPair),bc          ; ADC #1                 \ The addition works as we know the C flag is clear from\ when we passed through the BCS above
 104+ C275 C9          >P_LL128_6502:          ret                             ; RTS                    \ Return from the subroutine
 104+ C276             >;-------------------------------------------------------------------------------------------------------
 104+ C276             >;..  Do the following, in this order: Q = XX12+2 A = S EOR XX12+3 (S R) = |S R|
 104+ C276             >;..  This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 104+ C276 F5          >P_LL129_6502:        push    af                      ;LDX XX12+2             \ Set Q = XX12+2
 104+ C277 3A 22 C1    >                            ld      a,(P_XX12p2)              ;.
 104+ C27A 32 B5 F1    >                            ld      (Xreg),a                ;.
 104+ C27D 32 B2 F1    >                            ld      (Qvar),a                ;STX Q
 104+ C280 F1          >                            pop     af                      ;.
 104+ C281 3A B4 F1    >                            ld      a,(Svar)                ;LDA S                  \ If S is positive, jump to LL127
 104+ C284 A7          >                            and     a                       ;BPL LL127
 104+ C285 F2 9D C2    >                            jp      p,P_LL127_6502            ;.
 104+ C288             >                            ZeroA                           ;.LDA #0                \ Otherwise set R = -R
 104+ C288 AF          >                        xor a
 104+ C289             >                            ClearCarryFlag                  ;SEC
 104+ C289 B7          >                        or a
 104+ C28A 21 B3 F1    >                            ld      hl, Rvar                ;SBC R
 104+ C28D 9E          >                            sbc     (hl)                    ;.
 104+ C28E 32 B3 F1    >                            ld      (Rvar),a                ;STA R
 104+ C291 3A B4 F1    >                            ld      a,(Svar)                ;LDA S                  \ Push S onto the stack
 104+ C294 F5          >                            push    af                      ;PHA
 104+ C295 EE FF       >                            xor     $FF                     ;EOR #%11111111         \ Set S = ~S + 1 + C  ?? is this all just doing |Svar|?
 104+ C297 CE 00       >                            adc     0                       ;ADC #0
 104+ C299 32 B4 F1    >                            ld      (Svar),a                ;STA S
 104+ C29C F1          >                            pop     af                      ;PLA                    \ Pull the original, negative S from the stack into A
 104+ C29D 21 23 C1    >P_LL127_6502:        ld      hl,P_XX12p3               ;EOR XX12+3             \ Set A = original argument S EOR'd with XX12+3
 104+ C2A0 AE          >                            xor     (hl)                    ;.
 104+ C2A1 C9          >                            ret                             ;RTS                    \ Return from the subroutine
 104+ C2A2             >;----------------------------------------------------------------------------------------------------------------
 104+ C2A2             >;--- LL118 Move along a point until on screen
 104+ C2A2             >; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 104+ C2A2             >;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 104+ C2A2             >;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 104+ C2A2             >;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 104+ C2A2             >;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 104+ C2A2             >;  Out  XX150               x1 as an 8-bit coordinate
 104+ C2A2             >;       XX152               y1 as an 8-bit coordinate
 104+ C2A2             >;----------------------------------------------------------------------------------------------------------------
 104+ C2A2             >
 104+ C2A2 3A F8 C0    >P_LL118_6502:         ld      a,(P_XX1510+1)            ; LDA XX15+1             \ If x1_hi is positive, jump down to LL119 to skip the
 104+ C2A5 A7          >                            and     a                       ; BPL LL119              \ .
 104+ C2A6 F2 C3 C2    >                            jp      p, P_LL119_6502           ;                        \ following
 104+ C2A9 32 B4 F1    >.X1Negative:                ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 104+ C2AC CD C4 C1    >                            call    P_LL120_6502              ; Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 104+ C2AF             >                                                    ;                            (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 104+ C2AF             >                                                    ; with the sign of (Y X) set to the opposite of the line's direction of slope
 104+ C2AF CD FC F1    >                            call    ADDYXRegtoY1             ; Set y1 = y1 + (Y X)
 104+ C2B2 22 F9 C0    >                            ld      (P_XX1532),hl             ; .
 104+ C2B5 21 00 00    >                            ld      hl,0                    ; Set x1 = 0
 104+ C2B8 22 F7 C0    >                            ld      (P_XX1510),hl             ; .
 104+ C2BB 3E 00       >                            ld      a,0                     ; set 0 up for replacemetn of the TAX and BEQ bit
 104+ C2BD 32 B5 F1    >                            ld      (Xreg),a                ; TAX                    \ Set X = 0 so the next BEQ becomes a jmp but we will do it anyway in next line
 104+ C2C0 C3 D9 C2    >                            jp      P_LL134_6502              ; just do the jump to LL134 rather than setting to equal flag and then jumping
 104+ C2C3             >;-- Entering LL119 a will always be the value of X1 Hi byte
 104+ C2C3 CA D9 C2    >P_LL119_6502:         jp      z,P_LL134_6502            ; BEQ LL134              \ x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen
 104+ C2C6             >                                                            ;                        \ (as 0 <= (x_hi x_lo) <= 255)
 104+ C2C6 32 B4 F1    >                            ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is positive, i.e. x1 >= 256 and off
 104+ C2C9 3D          >                            dec     a                       ; DEC S                  \ the right side of the screen, so set S = x1_hi - 1
 104+ C2CA 32 B4 F1    >                            ld      (Svar),a                ;
 104+ C2CD CD C4 C1    >                            call    P_LL120_6502              ; JSR LL120              \ Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = (x1 - 256) * gradient
 104+ C2D0             >                                                            ;                        \                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 104+ C2D0             >                                                            ;                        \ with the sign of (Y X) set to the opposite of the line's direction of slope
 104+ C2D0 CD FC F1    >                            call    ADDYXRegtoY1             ; TXA                    \ Set y1 = y1 + (Y X)
 104+ C2D3 21 FF 00    >                            ld      hl,255                  ; LDX #255               \ Set x1 = 255
 104+ C2D6 22 F7 C0    >                            ld      ( P_XX1510 ),hl             ; STX XX15 ;INX; STX XX15+1
 104+ C2D9             >;--  We have moved the point so the x-coordinate is on  screen (i.e. in the range 0-255), so now for the  y-coordinate
 104+ C2D9 3A FA C0    >P_LL134_6502:        ld      a,(P_XX1532+1)            ; LDA XX15+3             \ If y1_hi is positive, jump down to LL119 to skip
 104+ C2DC A7          >                            and     a                       ; BPL LL135              \ the following
 104+ C2DD F2 F5 C2    >                            jp      p, P_LL135_6502           ; .
 104+ C2E0 32 B4 F1    >                            ld      (Svar),a                ; STA S                  \ Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 104+ C2E3 3A F9 C0    >                            ld      a, ( P_XX1532)             ; LDA XX15+2             \ Set R = y1_lo
 104+ C2E6 32 B3 F1    >                            ld      (Rvar),a                ; STA R
 104+ C2E9 CD 12 C2    >                            call    P_LL123_6502              ; JSR LL123              \ Call LL123 to calculate:  (Y X) = (S R) / XX12+2      if T = 0 = y1 / gradient
 104+ C2EC             >                                                            ;                        \                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 104+ C2EC             >                                                            ;                         with the sign of (Y X) set to the opposite of the line's direction of slope
 104+ C2EC CD 0A F2    >                            call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 104+ C2EF 21 00 00    >                            ld      hl,0                    ; LDA #0                 \ Set y1 = 0
 104+ C2F2 22 F9 C0    >                            ld      ( P_XX1532),hl             ; STA XX15+2, XX15+3
 104+ C2F5 01 80 00    >P_LL135_6502:         ld      bc,128                  ; LDA XX15+2             \ Set (S R) = (y1_hi y1_lo) - screen height
 104+ C2F8 CD 18 F2    >                            call    SUBBCFromY1             ; .                      \ .
 104+ C2FB 38 0C       >                            jr      c, P_LL136_6502           ; BCC LL136              \ If the subtraction underflowed, i.e. if y1 < screen height, then y1 is already on-screen, so jump to LL136
 104+ C2FD             >                                                    ;                        \ to return from the subroutine, as we are done
 104+ C2FD             >;;-   If we get here then y1 >= screen height, i.e. off the bottom of the screen
 104+ C2FD CD 12 C2    >P_LL139_6502:         call    P_LL123_6502              ; JSR LL123              \ Call LL123 to calculate:   (Y X) = (S R) / XX12+2      if T = 0  = (y1 - screen height) / gradient
 104+ C300             >;                        \                            (Y X) = (S R) * XX12+2      if T <> 0 = (y1 - screen height) * gradient
 104+ C300             >;                          with the sign of (Y X) set to the opposite of the line's direction of slope
 104+ C300 CD 0A F2    >                            call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 104+ C303 21 7F 00    >                            ld      hl, 127                 ; LDA #Y*2-1             \ Set y1 = 2 * #Y - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view (or in our case 127)
 104+ C306 22 F9 C0    >                            ld      (P_XX1532),hl             ; STA XX15+3             \ pixel row of the space view
 104+ C309 C9          >P_LL136_6502:         ret                             ; RTS                    \ Return from the subroutine
 104+ C30A             >;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 104+ C30A             >;-- LL145 LINE CLIP
 104+ C30A             >;-- OPTISIATIONS - VERTICAL HORZONTAL POINT |DX| = |DY| (and all the veriants for +/-)
 104+ C30A             >;-- This routine clips the line from (x1, y1) to (x2, y2) so it fits on-screen, or returns an error if it can't be clipped to fit. The arguments are 16-bit coordinates, and the clipped line is returned using 8-bit screen coordinates.
 104+ C30A             >;-- This part sets XX13 to reflect which of the two points are on-screen and off-screen.
 104+ C30A             >;-- IN  : XX15(1 0) x1 XX15(3 2) y1 XX15(5 4) x2 XX12(1 0) y2
 104+ C30A             >;-- OUT : (X1, Y1), (X2, Y2) Screen coordinate C flag  Clear if the clipped line fits on-screen, set if itdoesn't
 104+ C30A             >;         XX13 The state of the original coordinates on-screen:* 0   = (x2, y2) on-screen* 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen* 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 104+ C30A             >;              So XX13 is non-zero if the end of the line was clipped,meaning the next line sent to BLINE can't join onto the end but has to start a new segment
 104+ C30A             >;         SWAP The swap status of the returned coordinates:* &FF if we swapped the values of (x1, y1) and(x2, y2) as part of the clipping process* 0 if the coordinates are still in the same order
 104+ C30A             >; TODO treat horizonal/vert and single pixel as special cases
 105+ C30A                                          ClippingCodeLL145Macro P
 105+ C30A             >P_LL145_6502:        ZeroA                           ; LDA #0                 \ Set SWAP = 0
 105+ C30A AF          >                        xor a
 105+ C30B 32 26 CA    >                            ld      (SWAP),a                ; STA SWAP
 105+ C30E 3A FC C0    >                            ld      a,(P_XX15X2hi)            ; LDA XX15+5             \ Set A = x2_hi (use b as a substibute for a)
 105+ C311 47          >                            ld      b,a                     ; .
 105+ C312             >; Note that as we are interested in the sign of XX113 then this needs to be >= 128 or < 128 or 0, we will use 191 as per bbc for now
 105+ C312             >; for the screen coord we will use 127 though, we use c as a temporay X register
 105+ C312 3E BF       >P_LL147_6502:        ld      a,191                   ; LDX #Y*2-1             \ Set X = #Y * 2 - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view, so this sets Y2 to 191, the y-coordinate of the bottom pixel row of the space view
 105+ C314 32 B5 F1    >                            ld      (Xreg),a                ; .
 105+ C317             >;                    ld      a,127
 105+ C317             >;                    ld      c,a
 105+ C317 78          >.CheckX2Y2High:             ld      a,b                     ; ORA XX12+1             \ If one or both of x2_hi and y2_hi are non-zero, jump
 105+ C318 21 FE C0    >                            ld      hl,P_XX15Y2hi    ; .
 105+ C31B B6          >                            or      (hl)                    ; .
 105+ C31C C2 2C C3    >                            jp      nz,P_LL107_6502  ; BNE LL107              \ to LL107 to skip the following, leaving X at 191
 105+ C31F 3E 7F       >.CheckY2Lo:                 ld      a,127 ;,c               ; get back the temporary x reg from c
 105+ C321 21 FD C0    >                            ld      hl,P_XX15Y2lo    ; CPX XX12               \ If y2_lo > the y-coordinate of the bottom of screen (a is being used as X at this point still)
 105+ C324 BE          >                            cp      (hl)                    ; .
 105+ C325 DA 2C C3    >                            jp      c,P_LL107_6502   ; BCC LL107              \ then (x2, y2) is off the bottom of the screen, so skip the following instruction, leaving X at 127
 105+ C328             >                            ZeroA                           ; LDX #0                 \ Set X = 0
 105+ C328 AF          >                        xor a
 105+ C329 32 B5 F1    >                            ld      (Xreg),a
 105+ C32C 3A B5 F1    >P_LL107_6502:        ld      a,(Xreg)                ; STX XX13               \ Set XX13 = X, so we have * XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen* XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lois off the bottom of the screen
 105+ C32F 32 0B C1    >                            ld      ( P_XX13),a      ; now c is released as a temporary x reg
 105+ C332 3A F8 C0    >                            ld      a,(P_XX15X1hi)   ; LDA XX15+1             \ If one or both of x1_hi and y1_hi are non-zero, jump
 105+ C335 21 FA C0    >                            ld      hl,P_XX15Y1hi    ; ORA XX15+3             \ to LL83
 105+ C338 B6          >                            or      (hl)                    ; .
 105+ C339 C2 79 C3    >                            jp      nz,P_LL83_6502            ; BNE LL83
 105+ C33C             >; DEBUG SIMPLIFIED CODE, now we just compare y1 lo > 127
 105+ C33C 3A A7 F1    >                            ld      a,(XX1532)              ; If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.) ;ld      a,127                   ; LDA #Y*2-1             \ If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.)
 105+ C33F 26 7F       >                            ld      h,127                   ; then (x1, y1) is off the bottom of the screen, so jump                                 ;ld      hl,XX1532               ; CMP XX15+2             \ then (x1, y1) is off the bottom of the screen, so jump
 105+ C341 BC          >                            cp      h                       ; to LL83                                                                                ;cp      (hl)                    ; .                      \ to LL83
 105+ C342 D2 79 C3    >                            jp      nc, P_LL83_6502         ; BCC LL83               \ . (y1 > 127 jump, i.e. 127 <= y1 )
 105+ C345 3A 0B C1    >                            ld      a,( P_XX13)                ; LDA XX13               \ If we get here, (x1, y1) is on-screen. If XX13 is non-zero, i.e. (x2, y2) is off-screen, jump
 105+ C348 A7          >                            and     a                       ; BNE LL108              \ to LL108 to halve it before continuing at LL83
 105+ C349 C2 74 C3    >                            jp      nz,P_LL108_6502
 105+ C34C             >; If we get here, the high bytes are all zero, which means the x-coordinates are < 256 and therefore fit on screen, and neither coordinate is off the bottom of the screen. That means both coordinates are already on
 105+ C34C             >; screen, so we don't need to do any clipping, all weneed to do is move the low bytes into (X1, Y1) and X2, Y2) and return
 105+ C34C             >; X1 = XX15 (10)  Y1 = XX15+1 X2 = XX15+2 Y2 = XX15+3
 105+ C34C 2A F7 C0    >P_LL146_6502:        ld      hl,(P_XX15X1lo)           ;  Save X1 to XX1510
 105+ C34F CD A5 C1    >                            call    P_ClampX
 105+ C352 32 F7 C0    >                            ld      (P_XX15X1lo),a
 105+ C355 2A F9 C0    >                            ld      hl,(P_XX15Y1lo)           ;  hl = y1
 105+ C358 CD B1 C1    >                            call    P_ClampY
 105+ C35B 32 F8 C0    >                            ld      (P_XX1510+1),a            ;  XX1510... = [X1][Y1]
 105+ C35E             >
 105+ C35E 2A FB C0    >                            ld      hl,(P_XX15X2lo)           ;  de = x2
 105+ C361 CD A5 C1    >                            call    P_ClampX
 105+ C364 32 F9 C0    >                            ld      (P_XX1510+2),a            ;  XX1510... = [X1][Y1][X2]
 105+ C367             >
 105+ C367 2A FD C0    >                            ld      hl,(P_XX15Y2lo)           ;  bc = y2
 105+ C36A CD B1 C1    >                            call    P_ClampY
 105+ C36D 32 FA C0    >                            ld      (P_XX1510+3),a            ;  XX1510... = [X1][Y1][X2][Y2]
 105+ C370             >                            ClearCarryFlag                  ; CLC                    \ Clear the C flag as the clipped line fits on-screen
 105+ C370 B7          >                        or a
 105+ C371 C9          >                            ret                             ; RTS                    \ Return from the subroutine
 105+ C372             >P_LL109_6502:        SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 105+ C372 37          >                        scf
 105+ C373 C9          >                            ret                             ; RTS                    \ Return from the subroutine
 105+ C374 21 0B C1    >P_LL108_6502:        ld      hl, P_XX13                 ; LSR XX13               \ If we get here then (x2, y2) is off-screen and XX13 is
 105+ C377 CB 3E       >                            srl     (hl)                    ;                        \ 191, (128)  so shift XX13 right to halve it to 95 (64)
 105+ C379             >;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 105+ C379             >;-- LL145 (Part 2 of 4)
 105+ C379 3A 0B C1    >P_LL83_6502:         ld      a,( P_XX13)               ; LDA XX13               \ If XX13 < 128 then only one of the points is on-screen
 105+ C37C A7          >                            and     a                                ; BPL LL115              \ so jump down to LL115 to skip the checks of whether
 105+ C37D F2 C9 C3    >                            jp      p,P_LL115_6502            ;                        \ both points are in the strips to the right or bottom of the screen
 105+ C380             >;-- If we get here, both points are off-screen
 105+ C380 3A F8 C0    >                            ld      a,(P_XX15X1hi)            ; LDA XX15+1             \ If both x1_hi and x2_hi have bit 7 set, jump to LL109
 105+ C383 21 FC C0    >                            ld      hl,P_XX15X2hi             ; AND XX15+5             \ to return from the subroutine with the C flag set, as
 105+ C386 A6          >                            and     (hl)
 105+ C387 FA 72 C3    >                            jp      m, P_LL109_6502           ; BMI LL109              \ the entire line is above the top of the screen
 105+ C38A 3A FA C0    >                            ld      a,(P_XX15Y1hi)            ; LDA XX15+3             \ If both y1_hi and y2_hi have bit 7 set, jump to LL109
 105+ C38D 21 FE C0    >                            ld      hl,P_XX15Y2hi             ; AND XX12+1             \ to return from the subroutine with the C flag set, as
 105+ C390 A6          >                            and     (hl)                             ; BMI LL109              \ the entire line is to the left of the screen
 105+ C391 FA 72 C3    >                            jp      m,P_LL109_6502            ; .
 105+ C394 3A F8 C0    >                            ld      a,(P_XX15X1hi)            ; LDX XX15+1             \ Set A = X = x1_hi - 1
 105+ C397 3D          >                            dec     a                                ; DEX
 105+ C398 32 B5 F1    >                            ld      (Xreg),a                         ; TXA
 105+ C39B F5          >                            push    af                               ; LDX XX15+5     SP+1    \ Set XX12+2 = x2_hi - 1, we need to save a register first
 105+ C39C 3A FC C0    >                            ld      a,(P_XX15X2hi)            ; .
 105+ C39F 3D          >                            dec     a                                ; DEX
 105+ C3A0 32 B5 F1    >                            ld      (Xreg),a                         ; STX XX12+2
 105+ C3A3 F1          >                            pop     af                               ; .              SP+0    restore a register
 105+ C3A4 21 FE C0    >                            ld      hl,P_XX15Y2hi             ; ORA XX12+2             \ If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set,
 105+ C3A7 B6          >                            or      (hl)                             ; .
 105+ C3A8 F2 72 C3    >                            jp      p, P_LL109_6502           ; BPL LL109              \ jump to LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 105+ C3AB             >; for this bit, while z80 uses carry the opposite way to 6502, 6502 uses borrow, in effect inverting the flip
 105+ C3AB             >;NOTEFOUND A PATH WHERE IT DOES NOT DO THIS CHECK e.g. 90 B2 8D A2
 105+ C3AB 3A F9 C0    >P_LL83_DEBUG:          ld      a,(P_XX1532)              ; LDA XX15+2             \ If y1_lo < y-coordinate of screen bottom, clear the C
 105+ C3AE FE 80       >                            cp      128                     ; CMP #Y*2               \ flag, otherwise set it (NOTE FLIPPED IN z80)
 105+ C3B0 3A FA C0    >                            ld      a,(P_XX1532+1)            ; LDA XX15+3             \ Set XX12+2 = y1_hi - (1 - C), so:
 105+ C3B3 DE 00       >                            sbc     0                       ; SBC #0                 \ .
 105+ C3B5 32 22 C1    >                            ld      (P_XX12p2),a              ; STA XX12+2             \  * Set XX12+2 = y1_hi - 1 if y1_lo is on-screen * Set XX12+2 = y1_hi  otherwise We do this subtraction because we are only interested
 105+ C3B8 3A FD C0    >                            ld      a,(P_XX1576)              ; LDA XX12               \ If y2_lo < y-coordinate of screen bottom, clear the C
 105+ C3BB FE 80       >                            cp      128                     ; CMP #Y*2               \ flag, otherwise set it
 105+ C3BD 3A FE C0    >                            ld      a,(P_XX1576+1)            ; LDA XX12+1             \ Set XX12+2 = y2_hi - (1 - C), so:
 105+ C3C0 DE 00       >                            sbc     0                       ; SBC #0                   * Set XX12+1 = y2_hi - 1 if y2_lo is on-screen  * Set XX12+1 = y2_hi     otherwise
 105+ C3C2 21 22 C1    >                            ld      hl,P_XX12p2               ; ORA XX12+2             \ If neither XX12+1 or XX12+2 have bit 7 set, jump to
 105+ C3C5 B6          >                            or      (hl)                    ; .
 105+ C3C6 F2 72 C3    >                            jp      p,P_LL109_6502            ; BPL LL109              \ LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 105+ C3C9             >;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 105+ C3C9             >;-- LL145 (Part 3 of 4) Summary: Clip line: Calculate the line's gradient
 105+ C3C9 3A B6 F1    >P_LL115_6502:        ld      a,(Yreg)                ; TYA                    \ Store Y on the stack so we can preserve it through the call to this routine
 105+ C3CC F5          >                            push    af                      ; PHA            SP+1    \ call to this subroutine
 105+ C3CD 2A FB C0    >                            ld      hl,(P_XX15X2lo)             ; LDA XX15+4             \ Set XX12+2 = x2_lo - x1_lo
 105+ C3D0 ED 5B F7 C0 >                            ld      de,(P_XX15X1lo)             ; LDA XX15+5             \ Set XX12+3 = x2_hi - x1_hi
 105+ C3D4             >                            ClearCarryFlag                  ; SBC XX15+1
 105+ C3D4 B7          >                        or a
 105+ C3D5 ED 52       >                            sbc     hl,de                   ; .
 105+ C3D7 22 FE F5    >                            ld      (delta_x),hl            ; .
 105+ C3DA 2A FD C0    >                            ld      hl,(P_XX15Y2lo)             ; LDA XX12               \ Set XX12+4 = y2_lo - y1_lo
 105+ C3DD ED 5B F9 C0 >                            ld      de,(P_XX15Y1lo)             ;
 105+ C3E1             >                            ClearCarryFlag                  ; SBC XX15+2
 105+ C3E1 B7          >                        or a
 105+ C3E2 ED 52       >                            sbc     hl,de                   ; .
 105+ C3E4 22 00 F6    >                            ld      (delta_y),hl            ; .
 105+ C3E7             >; So we now have:  delta_x in XX12(3 2)  delta_y in XX12(5 4) where the delta is (x1, y1) - (x2, y2))
 105+ C3E7 3A 01 F6    >                            ld      a,(delta_y+1)           ; EOR XX12+3             \ Set S = the sign of delta_x * the sign of delta_y, so
 105+ C3EA 21 FF F5    >                            ld      hl,delta_x+1
 105+ C3ED AE          >                            xor     (hl)
 105+ C3EE 32 B4 F1    >                            ld      (Svar),a                ; STA S                  \ if bit 7 of S is set, the deltas have different signs (perhaps we should do bit 7 mask ?????????
 105+ C3F1 2A 00 F6    >                            ld      hl,(delta_y)            ; LDA XX12+5             \ If delta_y_hi is positive, jump down to LL110 to skip
 105+ C3F4 7C          >                            ld      a,h
 105+ C3F5 A7          >                            and     a
 105+ C3F6 F2 02 C4    >                            jp      p, P_LL110_6502  ; BPL LL110              \ the following
 105+ C3F9             >                            NegHL                           ; LDA #0                 \ Otherwise flip the sign of delta_y to make it
 105+ C3F9 AF          >                    xor a
 105+ C3FA 95          >                    sub l
 105+ C3FB 6F          >                    ld l,a
 105+ C3FC 9F          >                    sbc a,a
 105+ C3FD 94          >                    sub h
 105+ C3FE 67          >                    ld h,a
 105+ C3FF 22 00 F6    >                            ld      (delta_y),hl            ; positive, starting with the low bytes
 105+ C402 2A FE F5    >P_LL110_6502:        ld      hl,(delta_x)            ; LDA XX12+3             \ If delta_x_hi is positive, jump down to LL111 to skip
 105+ C405 7C          >                            ld      a,h                     ; BPL LL111              \ the following
 105+ C406 A7          >                            and     a                       ; .
 105+ C407 F2 13 C4    >                            jp      p,P_LL111_6502            ; .
 105+ C40A             >                            NegHL                           ; SEC                    \ Otherwise flip the sign of delta_x to make it
 105+ C40A AF          >                    xor a
 105+ C40B 95          >                    sub l
 105+ C40C 6F          >                    ld l,a
 105+ C40D 9F          >                    sbc a,a
 105+ C40E 94          >                    sub h
 105+ C40F 67          >                    ld h,a
 105+ C410 22 FE F5    >                            ld      (delta_x),hl            ; LDA #0                 \ positive, starting with the low bytes
 105+ C413             >;--  We now keep halving |delta_x| and |delta_y| until both of them have zero in their high bytes
 105+ C413 2A FE F5    >P_LL111_6502:        ld      hl,(delta_x)
 105+ C416 ED 5B 00 F6 >                            ld      de,(delta_y)
 105+ C41A 7C          >                            ld      a,h                     ; TAX                    \ If |delta_x_hi| is non-zero, skip the following
 105+ C41B B2          >                            or      d                       ; BNE LL112
 105+ C41C CA 31 C4    >                            jp      z,P_LL113_6502            ; LDX XX12+5             \ If |delta_y_hi| = 0, jump down to LL113 (as both |delta_x_hi| and |delta_y_hi| are 0)
 105+ C41F             >P_LL112_6502:        ShiftHLRight1                   ; LSR A                  \ Halve the value of delta_x in (A XX12+2)
 105+ C41F CB 3C       >			   srl h
 105+ C421 CB 1D       >			   rr  l
 105+ C423             >                            ShiftDERight1                   ; LSR XX12+5             \ Halve the value of delta_y XX12(5 4)
 105+ C423 CB 3A       >			   srl d
 105+ C425 CB 1B       >			   rr  e
 105+ C427 22 FE F5    >                            ld      (delta_x),hl
 105+ C42A ED 53 00 F6 >                            ld      (delta_y),de            ; write them back so we don't end up in an infinite loop
 105+ C42E C3 13 C4    >                            jp       P_LL111_6502                  ; JMP LL111              \ Loop back to LL111
 105+ C431             >;-- By now, the high bytes of both |delta_x| and |delta_y| are zero
 105+ C431             >P_LL113_6502:        ZeroA                           ; STX T                  \ We know that X = 0 as that's what we tested with a BEQ  above, so this sets T = 0
 105+ C431 AF          >                        xor a
 105+ C432 32 B1 F1    >                            ld      (Tvar),a
 105+ C435 3A FE F5    >                            ld      a,(delta_x)             ; LDA XX12+2             \ If delta_x_lo < delta_y_lo, so our line is more
 105+ C438 21 00 F6    >                            ld      hl,delta_y              ; CMP XX12+4             \ vertical than horizontal, jump to LL114
 105+ C43B BE          >                            cp      (hl)
 105+ C43C DA 4E C4    >                            jp      c, P_LL114_6502  ; BCC LL114              ; if delta y > delta x then its a steep slope so we do 256*dy/dx
 105+ C43F             >;-- If we get here then our line is more horizontal than vertical, so it is a shallow slope
 105+ C43F 3A FE F5    >                            ld      a,(delta_x)             ; STA Q                  \ Set Q = delta_x_lo
 105+ C442 32 B2 F1    >                            ld      (Qvar),a                ; .
 105+ C445 3A 00 F6    >                            ld      a,(delta_y)             ; LDA XX12+4             \ Set A = delta_y_lo
 105+ C448 CD 2C C1    >                            call    P_LL28_6502      ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_y_lo / delta_x_lo
 105+ C44B C3 5F C4    >                            jp      P_LL116_6502     ; JMP LL116              \ Jump to LL116, as we now have the line's gradient in R
 105+ C44E             >;-- If we get here then our line is more vertical than horizontal, so it is a steep slope
 105+ C44E 3A 00 F6    >P_LL114_6502:        ld      a,(delta_y)             ; LDA XX12+4             \ Set Q = delta_y_lo
 105+ C451 32 B2 F1    >                            ld      (Qvar),a                ; STA Q
 105+ C454 3A FE F5    >                            ld      a,(delta_x)             ; LDA XX12+2             \ Set A = delta_x_lo
 105+ C457 CD 2C C1    >                            call    P_LL28_6502               ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_x_lo / delta_y_lo
 105+ C45A 3E FF       >                            ld      a,$FF                   ; DEC T                  \ T was set to 0 above, so this sets T = &FF when our
 105+ C45C 32 B1 F1    >                            ld      (Tvar),a                ;                        \ line is steep
 105+ C45F             >;----------------------------------------------------------------------------------------------------------------
 105+ C45F             >;--- LL116 This part sets things up to call the routine in LL188, which does the actual clipping.
 105+ C45F             >;--  If we get here, then R has been set to the gradient of the line (x1, y1) to(x2, y2), with T indicating the gradient of slope: * 0   = shallow slope (more horizontal than vertical)
 105+ C45F             >;--                                                                                                                                * &FF = steep slope (more vertical than horizontal)
 105+ C45F             >;-- XX13 has been set as follows: * 0   = (x1, y1) off-screen, (x2, y2) on-screen * 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen * 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 105+ C45F 3A B3 F1    >P_LL116_6502:        ld      a,(Rvar)                ; LDA R                  \ Store the gradient in XX12+2
 105+ C462 32 22 C1    >                            ld      (P_XX12p2),a     ; STA XX12+2
 105+ C465 3A B4 F1    >                            ld      a,(Svar)                ; LDA S                  \ Store the type of slope in XX12+3, bit 7 clear means
 105+ C468 32 23 C1    >                            ld      (P_XX12p3),a              ; STA XX12+3             \ top left to bottom right, bit 7 set means top right to bottom left
 105+ C46B 3A 0B C1    >                            ld      a,( P_XX13)                ; LDA XX13               \ If XX13 = 0, skip the following instruction
 105+ C46E FE 00       >                            cp      0                       ; BEQ LL138
 105+ C470 CA 76 C4    >                            jp      z,P_LL138_6502            ; .
 105+ C473 F2 92 C4    >                            jp      p, P_LLX117_6502          ; If XX13 is positive, it must be 95 (64) as 128 would be negative). This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump
 105+ C476             >;-- If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 105+ C476 CD A2 C2    >P_LL138_6502:          call    P_LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 105+ C479 3A 0B C1    >                            ld      a,( P_XX13)                ; LDA XX13               \ If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to
 105+ C47C A7          >                            and     a
 105+ C47D F2 B5 C4    >                            jp      p,P_LL124_6502            ; BPL LL124              \ LL124 to return with a successfully clipped line
 105+ C480             >;-- If we get here, XX13 = 191 (128) (both coordinates areoff-screen)
 105+ C480 3A F8 C0    >P_LL117_6502:          ld      a,(P_XX1510+1)            ; LDA XX15+1             \ If either of x1_hi or y1_hi are non-zero, jump to
 105+ C483 21 FA C0    >                            ld      hl,P_XX1532+1             ; ORA XX15+3             \ LL137 to return from the subroutine with the C flag
 105+ C486 B6          >                            or      (hl)
 105+ C487 C2 BD C4    >                            jp      nz, P_LL137_6502          ; BNE LL137              \ set, as the line doesn't fit on-screen
 105+ C48A 3A F9 C0    >                            ld      a,(P_XX1532)              ; LDA XX15+2             \ If y1_lo > y-coordinate of the bottom of the screen
 105+ C48D FE 80       >                            cp      128                     ; CMP #Y*2               \ jump to LL137 to return from the subroutine with the
 105+ C48F D2 BD C4    >                            jp      nc, P_LL137_6502          ; BCS LL137              \ C flag set, as the line doesn't fit on-screen
 105+ C492             >;-- If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 105+ C492 2A F7 C0    >P_LLX117_6502:         ld      hl,( P_XX1510)             ; LDX XX15               \ Swap x1_lo = x2_lo
 105+ C495 ED 5B FB C0 >                            ld      de,( P_XX1554)
 105+ C499 ED 53 F7 C0 >                            ld      ( P_XX1510),de
 105+ C49D 22 FB C0    >                            ld      ( P_XX1554),hl
 105+ C4A0 2A F9 C0    >                            ld      hl,( P_XX1532)             ; LDX XX15+2             \ Swap y1_lo = y2_lo
 105+ C4A3 ED 5B FD C0 >                            ld      de,( P_XX1576)
 105+ C4A7 ED 53 F9 C0 >                            ld      ( P_XX1532),de
 105+ C4AB 22 FD C0    >                            ld      ( P_XX1576),hl
 105+ C4AE CD A2 C2    >                            call    P_LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 105+ C4B1 21 26 CA    >                            ld      hl,SWAP
 105+ C4B4 35          >                            dec     (hl)                    ; DEC SWAP               \ Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 105+ C4B5 F1          >P_LL124_6502:          pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 105+ C4B6 32 B6 F1    >                            ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 105+ C4B9 CD 4C C3    >                            call    P_LL146_6502              ; JMP LL146              \ Jump up to LL146 to move the low bytes of (x1, y1) and (x2, y2) into (X1, Y1) and (X2, Y2), and return from the subroutine with a successfully clipped line
 105+ C4BC C9          >                            ret                             ; then exit so we don't pop it twice
 105+ C4BD F1          >P_LL137_6502:          pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 105+ C4BE 32 B6 F1    >                            ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 105+ C4C1             >                            SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 105+ C4C1 37          >                        scf
 105+ C4C2 C9          >                            ret                             ; RTS                    \ Return from the subroutine
 105+ C4C3             >
 105+ C4C3             >
 105+ C4C3 21 D4 F5    >P_l2_draw_6502_line:   ld      hl,x1                           ; copy from currnet position to 6502 variables
 105+ C4C6 11 F7 C0    >                            ld      de, P_XX1510
 105+ C4C9 01 08 00    >                            ld      bc,4*2
 105+ C4CC ED B0       >                            ldir
 105+ C4CE CD 0A C3    >                            call    P_LL145_6502                      ; perform 6502 version
 105+ C4D1 D8          >                            ret     c                               ; returns if carry is set as its a no draw
 105+ C4D2 21 00 00    >.CopyBackResults:           ld      hl,0
 105+ C4D5 22 D4 F5    >                            ld      (x1),hl
 105+ C4D8 22 D6 F5    >                            ld      (y1),hl
 105+ C4DB 22 D8 F5    >                            ld      (x2),hl
 105+ C4DE 22 DA F5    >                            ld      (y2),hl
 105+ C4E1 3A F7 C0    >                            ld      a,( P_XX1510)
 105+ C4E4 32 D4 F5    >                            ld      (x1),a
 105+ C4E7 4F          >                            ld      c,a
 105+ C4E8 3A F8 C0    >                            ld      a,( P_XX1510+1)
 105+ C4EB 32 D6 F5    >                            ld      (y1),a
 105+ C4EE 47          >                            ld      b,a
 105+ C4EF 3A F9 C0    >                            ld      a,( P_XX1510+2)
 105+ C4F2 32 D8 F5    >                            ld      (x2),a
 105+ C4F5 5F          >                            ld      e,a
 105+ C4F6 3A FA C0    >                            ld      a,( P_XX1510+3)
 105+ C4F9 32 DA F5    >                            ld      (y2),a
 105+ C4FC 57          >                            ld      d,a
 105+ C4FD 3E FF       >                            ld      a,$FF
 105+ C4FF             >                            ClearCarryFlag
 105+ C4FF B7          >                        or a
 105+ C500 C9          >                            ret
 106+ C501                                          InitialiseUniverseObjMacro P
 106+ C501 21 00 00    >P_InitRotMat:    ld      hl, 0
 106+ C504 22 27 C0    >                        ld      (P_BnKrotmatSidevY),hl       ; set the zeroes
 106+ C507 22 29 C0    >                        ld      (P_BnKrotmatSidevZ),hl       ; set the zeroes
 106+ C50A 22 2B C0    >                        ld      (P_BnKrotmatRoofvX),hl       ; set the zeroes
 106+ C50D 22 2F C0    >                        ld      (P_BnKrotmatRoofvZ),hl       ; set the zeroes
 106+ C510 22 31 C0    >                        ld      (P_BnKrotmatNosevX),hl       ; set the zeroes
 106+ C513 22 33 C0    >                        ld      (P_BnKrotmatNosevY),hl       ; set the zeroes
 106+ C516             >; Optimised as already have 0 in l
 106+ C516 26 60       >                        ld      h, $60	             				; 96 in hi byte
 106+ C518             >                        ;ld      hl,1
 106+ C518 22 25 C0    >                        ld      (P_BnKrotmatSidevX),hl
 106+ C51B 22 2D C0    >                        ld      (P_BnKrotmatRoofvY),hl
 106+ C51E             >; Optimised as already have 0 in l
 106+ C51E 26 E0       >                        ld      h, $E0					            ; -96 in hi byte which is +96 with hl bit 7 set
 106+ C520 22 35 C0    >                        ld      (P_BnKrotmatNosevZ),hl
 106+ C523 C9          >                        ret
 107+ C524
 108+ C524              ; --------------------------------------------------------------
 109+ C524              ; clear out the planet data block
 110+ C524 21 10 C0     ResetP_BnKData:         ld      hl,P_BnKDataBlock
 111+ C527 11 1C 01                             ld      de,P_BnK_Data_len
 112+ C52A AF                                   xor     a
 113+ C52B CD 38 7D                             call    memfill_dma
 114+ C52E C9                                   ret
 115+ C52F              ; --------------------------------------------------------------
 116+ C52F 21 10 C0     ResetP_BnKPosition:     ld      hl,P_BnKxlo
 117+ C532 06 09                                ld      b, 3*3
 118+ C534 AF                                   xor     a
 119+ C535 77           .zeroLoop:              ld      (hl),a
 120+ C536 23                                   inc     hl
 121+ C537 10 FC                                djnz    .zeroLoop
 122+ C539 C9                                   ret
 123+ C53A              ; --------------------------------------------------------------
 124+ C53A              ; Normalise planet vectors
 125+ C53A 21 48 C0     P_NormaliseRotMat:      ld      hl,P_BnkTransmatNosevZ+1   ; initialise loop
 126+ C53D 0E C5                                ld      c,ConstNorm                 ; c = Q = norm = 197
 127+ C53F 79                                   ld      a,c
 128+ C540 32 9C 7E                             ld      (varQ),a                    ; set up varQ
 129+ C543 06 09                                ld      b,9                         ; total of 9 elements to transform
 130+ C545 56           .LL21Loop:              ld      d,(hl)
 131+ C546 2B                                   dec     hl
 132+ C547 5E                                   ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
 133+ C548                                      ShiftDELeft1                        ; De = DE * 2
 133+ C548 CB 23       >			   sla e
 133+ C54A CB 12       >			   rl  d
 134+ C54C 7A                                   ld      a,d                         ; a = hi byte after shifting
 135+ C54D E5                                   push	hl
 136+ C54E C5                                   push	bc
 137+ C54F CD 0A CE                             call    Norm256mulAdivQ
 138+ C552                                      ;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
 139+ C552 79                                   ld      a,c                         ; BFRDIV returns R also in l reg
 140+ C553 C1                                   pop		bc
 141+ C554 E1                                   pop		hl							; bc gets wrecked by BFRDIV
 142+ C555 77                                   ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
 143+ C556 2B                                   dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
 144+ C557 10 EC                                djnz    .LL21Loop                    ; loop from 2zLo through to 0xLo
 145+ C559 C9                                   ret
 146+ C55A
 147+ C55A
 148+ C55A              ; This uses UBNKNodeArray as the list
 149+ C55A              ; the array is 256 * 2 bytes
 150+ C55A              ; counter is current row y pos
 151+ C55A              ; byte 1 is start x pos
 152+ C55A              ; byte 2 is end x pos
 153+ C55A              ; if they are both 0 then skip
 154+ C55A              ; its always horizontal, yellow
 155+ C55A              ; 16 different Planet Colours
 156+ C55A              ; codes D<> Dark, M<> Mid, L<> Light B<> Brightest
 157+ C55A              PlanetColour10DG        equ      40     ; Green
 158+ C55A              PlanetColour20DG        equ      44
 159+ C55A              PlanetColour11MG        equ      44
 160+ C55A              PlanetColour21MG        equ      80
 161+ C55A              PlanetColour12LG        equ      80
 162+ C55A              PlanetColour22LG        equ      84
 163+ C55A              PlanetColour13BG        equ      84
 164+ C55A              PlanetColour23BG        equ      120
 165+ C55A              PlanetColour14DB        equ      1      ; Blue
 166+ C55A              PlanetColour24DB        equ      2
 167+ C55A              PlanetColour15MB        equ      2
 168+ C55A              PlanetColour25MB        equ      3
 169+ C55A              PlanetColour16LB        equ      3
 170+ C55A              PlanetColour26LB        equ      67
 171+ C55A              PlanetColour17DO        equ      68     ; Orange
 172+ C55A              PlanetColour27DO        equ      100
 173+ C55A              PlanetColour18MO        equ      100
 174+ C55A              PlanetColour28MO        equ      136
 175+ C55A              PlanetColour19LO        equ      136
 176+ C55A              PlanetColour29LO        equ      168
 177+ C55A              PlanetColour1ABO        equ      168
 178+ C55A              PlanetColour2ABO        equ      204
 179+ C55A              PlanetColour1BDR        equ      64     ; Red
 180+ C55A              PlanetColour2BDR        equ      96
 181+ C55A              PlanetColour1CMR        equ      96
 182+ C55A              PlanetColour2CMR        equ      128
 183+ C55A              PlanetColour1DLR        equ      128
 184+ C55A              PlanetColour2DLR        equ      160
 185+ C55A              PlanetColour1EMC        equ      18     ; Cyan
 186+ C55A              PlanetColour2EMC        equ      22
 187+ C55A              PlanetColour1FMP        equ      163    ; Purple
 188+ C55A              PlanetColour2FMP        equ      226    ; note avoiding transparent
 189+ C55A
 190+ C55A 28 2C 50 54  PlanetColour1Table:     DB       PlanetColour10DG, PlanetColour11MG, PlanetColour12LG, PlanetColour13BG
 191+ C55E 01 02 03 44                          DB       PlanetColour14DB, PlanetColour15MB, PlanetColour16LB, PlanetColour17DO
 192+ C562 64 88 A8 40                          DB       PlanetColour18MO, PlanetColour19LO, PlanetColour1ABO, PlanetColour1BDR
 193+ C566 60 80 12 A3                          DB       PlanetColour1CMR, PlanetColour1DLR, PlanetColour1EMC, PlanetColour1FMP
 194+ C56A 2C 50 54 78  PlanetColour2Table:     DB       PlanetColour20DG, PlanetColour21MG, PlanetColour22LG, PlanetColour23BG
 195+ C56E 02 03 43 64                          DB       PlanetColour24DB, PlanetColour25MB, PlanetColour26LB, PlanetColour27DO
 196+ C572 88 A8 CC 60                          DB       PlanetColour28MO, PlanetColour29LO, PlanetColour2ABO, PlanetColour2BDR
 197+ C576 80 A0 16 E2                          DB       PlanetColour2CMR, PlanetColour2DLR, PlanetColour2EMC, PlanetColour2FMP
 198+ C57A
 199+ C57A              ; PLANET
 200+ C57A 21 18 C0     WarpPlanetCloser:       ld      hl,P_BnKzsgn
 201+ C57D 7E           .PositiveAxis:          ld      a,(hl)
 202+ C57E                                      ReturnIfALTNusng 2                      ; hard liit along z axis
 202+ C57E FE 02       >                        cp    2
 202+ C580 D8          >                        ret	 c
 203+ C581 35                                   dec     (hl)
 204+ C582 C9                                   ret
 205+ C583
 206+ C583              ; It should normally be behind but someone could fly past a planet, turn aroudn and jump
 207+ C583 21 18 C0     WarpPlanetFurther:      ld      hl,P_BnKzsgn
 208+ C586 7E                                   ld      a,(hl)
 209+ C587                                      ReturnIfAGTENusng $7F                   ; this is the hard limit else it woudl turn negative and flip to -0
 209+ C587 FE 7F       >                        cp    $7F
 209+ C589 D0          >                        ret	 nc
 210+ C58A 34                                   inc     (hl)                           ; if its negative it will still increase as we will block insane values
 211+ C58B C9                                   ret
 212+ C58C
 213+ C58C              ; --------------------------------------------------------------
 214+ C58C              ; This sets current universe object to a planet,they use sign + 23 bit positions
 215+ C58C              ; we need to have variable size and color
 216+ C58C              CalculatePlanetWarpPositon:
 217+ C58C 3A 2D 7F     .CalcZPosition:         ld      a,(WorkingSeeds+1)      ; seed d & 7
 218+ C58F E6 07                                and     %00000111               ; .
 219+ C591 C6 07                                add     a,7                     ; + 7
 220+ C593 CB 2F                                sra     a                       ; / 2
 221+ C595 32 18 C0     .SetZPosition:          ld      (P_BnKzsgn),a            ; << 16 (i.e. load into z sign byte
 222+ C598 21 00 00                             ld      hl, $0000               ; now set z hi and lo
 223+ C59B 22 16 C0                             ld      (P_BnKzlo),hl            ;
 224+ C59E 3A 31 7F     .CalcXandYPosition:     ld      a,(WorkingSeeds+5)      ; seed f & 3
 225+ C5A1 E6 03                                and     %00000011               ; .
 226+ C5A3 C6 03                                add     a,3                     ; + 3
 227+ C5A5 47                                   ld      b,a
 228+ C5A6 3A 30 7F                             ld      a,(WorkingSeeds+4)      ; get low bit of seed e
 229+ C5A9 E6 01                                and     %00000001
 230+ C5AB 1F                                   rra                             ; roll bit 0 into bit 7
 231+ C5AC B0                                   or      b                       ; now calc is f & 3 * -1 if seed e is odd
 232+ C5AD 32 12 C0     .SetXandYPosition:      ld      (P_BnKxsgn),a            ; set into x and y sign byte
 233+ C5B0 32 15 C0                             ld      (P_BnKysgn),a            ; .
 234+ C5B3 78                                   ld      a,b                     ; we want just seed f & 3 here
 235+ C5B4 32 11 C0                             ld      (P_BnKxhi),a             ; set into x and y high byte
 236+ C5B7 32 14 C0                             ld      (P_BnKyhi),a             ; .
 237+ C5BA                                      ZeroA
 237+ C5BA AF          >                        xor a
 238+ C5BB 32 10 C0                             ld      (P_BnKxlo),a
 239+ C5BE 32 13 C0                             ld      (P_BnKylo),a
 240+ C5C1 C9                                   ret
 241+ C5C2
 242+ C5C2              CalculatePlanetLaunchedPosition:
 243+ C5C2              .CalcXPosition:         MMUSelectMathsBankedFns
 243+ C5C2 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 244+ C5C6 DD 21 10 C0                          ld      ix,P_BnKxlo             ; P_BnKxlo += ParentPlanetX
 245+ C5CA FD 21 64 7F                          ld      iy,ParentPlanetX        ; .
 246+ C5CE CD 8C 00                             call    AddAtIXtoAtIY24Signed   ; .
 247+ C5D1 DD 21 13 C0  .CalcYPosition:         ld      ix,P_BnKylo             ; P_BnKylo += ParentPlanetZ
 248+ C5D5 FD 21 67 7F                          ld      iy,ParentPlanetY        ; .
 249+ C5D9 CD 8C 00                             call    AddAtIXtoAtIY24Signed   ; .
 250+ C5DC DD 21 16 C0  .CalcZPosition:         ld      ix,P_BnKzlo             ; P_BnKzlo += ParentPlanetZ
 251+ C5E0 FD 21 6A 7F                          ld      iy,ParentPlanetZ        ; .
 252+ C5E4 CD 8C 00                             call    AddAtIXtoAtIY24Signed   ; .
 253+ C5E7 C9                                   ret
 254+ C5E8              ; --------------------------------------------------------------
 255+ C5E8 21 10 C0     CopyPlanettoGlobal:     ld      hl,P_BnKxlo
 256+ C5EB 11 64 7F                             ld      de,ParentPlanetX
 257+ C5EE 01 09 00                             ld      bc,3*3
 258+ C5F1 ED B0                                ldir
 259+ C5F3 C9                                   ret
 260+ C5F4              ; This sets current universe object to a planet,they use sign + 23 bit positions
 261+ C5F4              ; we need to have variable size and color
 262+ C5F4 CD 24 C5     CreatePlanet:           call    ResetP_BnKData          ; Clear out planet block
 263+ C5F7 3A 5B 7F                             ld      a,(DisplayTekLevel)
 264+ C5FA E6 02                                and     %00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
 265+ C5FC F6 80                                or      %10000000
 266+ C5FE 32 7D C0                             ld      (P_BnKShipType),a       ; and load to ship type (synomous with planet type)
 267+ C601                                      MaxUnivPitchAndRoll
 267+ C601 3E 7F       >                        ld      a,127
 267+ C603 32 48 C0    >                        ld      (UBnKRotXCounter),a
 267+ C606 32 49 C0    >                        ld      (UBnKRotZCounter),a
 268+ C609 3A 2D 7F                             ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
 269+ C60C E6 03                                and     %00000011               ; .
 270+ C60E CE 03                                adc     3                       ; we also lauch planet side so its infront of us
 271+ C610 32 18 C0                             ld      (P_BnKzsgn),a           ; set z sign to 3 + C + 0..3 bits
 272+ C613 CB 1F                                rr      a
 273+ C615 32 12 C0                             ld      (P_BnKxsgn),a
 274+ C618 32 15 C0                             ld      (P_BnKysgn),a
 275+ C61B 3A 5B 7F     .SetColour:             ld      a,(DisplayTekLevel)
 276+ C61E 21 5C 7F                             ld      hl,DisplayPopulation    ; add displaypopulation
 277+ C621 86                                   add     a, (hl)
 278+ C622 47                                   ld      b,a                     ; save for atmosphere level
 279+ C623 23                                   inc     hl                      ; move to DisplayProductivity
 280+ C624 86                                   add     a, (hl)
 281+ C625 E6 0F                                and     $0F                     ; limit to 0 to 16
 282+ C627 21 5A C5                             ld      hl,PlanetColour1Table
 283+ C62A ED 31                                add     hl,a
 284+ C62C 7E                                   ld      a,(hl)
 285+ C62D 32 F4 C0                             ld      (P_Colour1),a
 286+ C630 3E 10                                ld      a,$10
 287+ C632 ED 31                                add     hl,a
 288+ C634 7E                                   ld      a,(hl)
 289+ C635 32 F5 C0                             ld      (P_Colour2),a
 290+ C638 78                                   ld      a,b
 291+ C639 E6 07                                and     %00000111               ; atmosphere can be 0 to  3 pixels thick
 292+ C63B CB 3F                                srl     a                       ;
 293+ C63D 32 F6 C0                             ld      (P_Colour2Thickness),a
 294+ C640 CD 01 C5     .SetOrientation:        call    P_InitRotMat
 295+ C643 CD E8 C5                             call    CopyPlanettoGlobal      ; Set up global position interface
 296+ C646 C9                                   ret
 297+ C647
 298+ C647 CD 24 C5     CreatePlanetLaunched:   call    ResetP_BnKData
 299+ C64A CD F4 C5                             call    CreatePlanet
 300+ C64D 21 00 00                             ld      hl,0
 301+ C650 22 10 C0                             ld      (P_BnKxlo),hl
 302+ C653 22 13 C0                             ld      (P_BnKylo),hl
 303+ C656 21 03 FF                             ld      hl,$FF03
 304+ C659 22 16 C0                             ld      (P_BnKzlo),hl
 305+ C65C                                      ZeroA
 305+ C65C AF          >                        xor a
 306+ C65D 32 12 C0                             ld      (P_BnKxsgn),a
 307+ C660 32 15 C0                             ld      (P_BnKysgn),a
 308+ C663 32 18 C0                             ld      (P_BnKzsgn),a
 309+ C666                                      MaxUnivPitchAndRoll
 309+ C666 3E 7F       >                        ld      a,127
 309+ C668 32 48 C0    >                        ld      (UBnKRotXCounter),a
 309+ C66B 32 49 C0    >                        ld      (UBnKRotZCounter),a
 310+ C66E CD E8 C5                             call    CopyPlanettoGlobal      ; Set up global position interface
 311+ C671 C9                                   ret
 312+ C672              ; NEED FINSIHGING
 313+ C672
 314+ C672
 315+ C672 ED 4B FB C0  ScalePlanetTo8Bit:		ld			bc,(P_BnKZScaled)
 316+ C676 2A F7 C0                             ld			hl,(P_BnKXScaled)
 317+ C679 ED 5B F9 C0                          ld			de,(P_BnKYScaled)
 318+ C67D 78           .SetABSbc:              ld			a,b
 319+ C67E DD 67                                ld			ixh,a
 320+ C680 E6 7F                                and			SignMask8Bit
 321+ C682 47                                   ld			b,a									; bc = ABS bc
 322+ C683 7C           .SetABShl:              ld			a,h
 323+ C684 DD 6F                                ld			ixl,a
 324+ C686 E6 7F                                and			SignMask8Bit
 325+ C688 67                                   ld			h,a									; hl = ABS hl
 326+ C689 7A           .SetABSde:              ld			a,d
 327+ C68A FD 67                                ld			iyh,a
 328+ C68C E6 7F                                and			SignMask8Bit
 329+ C68E 57                                   ld			d,a									; de = ABS de
 330+ C68F 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 331+ C690 B4                                   or			h                                   ; XX15+1	\ x hi
 332+ C691 B2                                   or			d                                   ; XX15+4	\ y hi
 333+ C692 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 334+ C694                                      ShiftHLRight1
 334+ C694 CB 3C       >			   srl h
 334+ C696 CB 1D       >			   rr  l
 335+ C698                                      ShiftDERight1
 335+ C698 CB 3A       >			   srl d
 335+ C69A CB 1B       >			   rr  e
 336+ C69C                                      ShiftBCRight1
 336+ C69C CB 38       >			   srl b
 336+ C69E CB 19       >			   rr  c
 337+ C6A0 C3 8F C6                             jp          .ScaleNodeTo8BitLoop
 338+ C6A3              ; now we have scaled values we have to deal with sign
 339+ C6A3 DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 340+ C6A5 E6 80                                and			SignOnly8Bit
 341+ C6A7 B0                                   or			b
 342+ C6A8 47                                   ld			b,a
 343+ C6A9 DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 344+ C6AB E6 80                                and			SignOnly8Bit
 345+ C6AD B4                                   or			h
 346+ C6AE 67                                   ld			h,a
 347+ C6AF FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 348+ C6B1 E6 80                                and			SignOnly8Bit
 349+ C6B3 B2                                   or			d
 350+ C6B4 57                                   ld			d,a
 351+ C6B5 ED 43 FB C0  .SignsDoneSaveResult:	ld			(P_BnKZScaled),bc
 352+ C6B9 22 F7 C0                             ld			(P_BnKXScaled),hl
 353+ C6BC ED 53 F9 C0                          ld			(P_BnKYScaled),de
 354+ C6C0 78                                   ld			a,b
 355+ C6C1 32 9B 7E                             ld			(varU),a
 356+ C6C4 79                                   ld			a,c
 357+ C6C5 32 B8 7E                             ld			(varT),a
 358+ C6C8 C9                                   ret
 359+ C6C9
 360+ C6C9              ;--------------------------------------------------------------------------------------------------------
 361+ C6C9                                      include "./Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm"
# file opened: ././Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm
   1++C6C9              CopyPSXX12ScaledToPXX18:
   2++C6C9              CopyResultToPDrawCam:
   3++C6C9                      ldCopyByte P_XX12         ,P_XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C6C9 3A FD C0    >                        ld       a,(P_XX12)
   3++C6CC 32 70 C0    >                        ld       (P_XX18),a
   4++C6CF                      ldCopyByte P_XX12+1       ,P_XX18+2           ; XX12+1 => XX18+2
   4++C6CF 3A FE C0    >                        ld       a,(P_XX12+1)
   4++C6D2 32 72 C0    >                        ld       (P_XX18+2),a
   5++C6D5                      ldCopyByte P_XX12+2       ,P_XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C6D5 3A FF C0    >                        ld       a,(P_XX12+2)
   5++C6D8 32 73 C0    >                        ld       (P_XX18+3),a
   6++C6DB                      ldCopyByte P_XX12+3       ,P_XX18+5           ; XX12+3 => XX18+5
   6++C6DB 3A 00 C1    >                        ld       a,(P_XX12+3)
   6++C6DE 32 75 C0    >                        ld       (P_XX18+5),a
   7++C6E1                      ldCopyByte P_XX12+4       ,P_XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C6E1 3A 01 C1    >                        ld       a,(P_XX12+4)
   7++C6E4 32 76 C0    >                        ld       (P_XX18+6),a
   8++C6E7                      ldCopyByte P_XX12+5       ,P_XX18+8           ; XX12+5 => XX18+8
   8++C6E7 3A 02 C1    >                        ld       a,(P_XX12+5)
   8++C6EA 32 78 C0    >                        ld       (P_XX18+8),a
   9++C6ED C9                   ret
  10++C6EE
# file closed: ././Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm
 362+ C6EE                                      include "./Universe/Planet/CopyPlanetPosToPlanetXX15.asm"
# file opened: ././Universe/Planet/CopyPlanetPosToPlanetXX15.asm
   1++C6EE              PlanetCopyPosToXX15:    ldCopyByte  P_BnKxhi         ,P_BnKXScaled        ; xlo
   1++C6EE 3A 11 C0    >                        ld       a,(P_BnKxhi)
   1++C6F1 32 F7 C0    >                        ld       (P_BnKXScaled),a
   2++C6F4                                      ldCopyByte  P_BnKxsgn        ,P_BnKXScaledSign    ; xsg
   2++C6F4 3A 12 C0    >                        ld       a,(P_BnKxsgn)
   2++C6F7 32 F8 C0    >                        ld       (P_BnKXScaledSign),a
   3++C6FA                                      ldCopyByte  P_BnKyhi         ,P_BnKYScaled        ; xlo
   3++C6FA 3A 14 C0    >                        ld       a,(P_BnKyhi)
   3++C6FD 32 F9 C0    >                        ld       (P_BnKYScaled),a
   4++C700                                      ldCopyByte  P_BnKysgn        ,P_BnKYScaledSign    ; xsg
   4++C700 3A 15 C0    >                        ld       a,(P_BnKysgn)
   4++C703 32 FA C0    >                        ld       (P_BnKYScaledSign),a
   5++C706                                      ldCopyByte  P_BnKzhi         ,P_BnKZScaled        ; xlo
   5++C706 3A 17 C0    >                        ld       a,(P_BnKzhi)
   5++C709 32 FB C0    >                        ld       (P_BnKZScaled),a
   6++C70C                                      ldCopyByte  P_BnKzsgn        ,P_BnKZScaledSign    ; xsg
   6++C70C 3A 18 C0    >                        ld       a,(P_BnKzsgn)
   6++C70F 32 FC C0    >                        ld       (P_BnKZScaledSign),a
   7++C712 C9                                   ret
   8++C713
# file closed: ././Universe/Planet/CopyPlanetPosToPlanetXX15.asm
 363+ C713
 364+ C713              ; ......................................................                                                         ;;;
 365+ C713                          INCLUDE "./Universe/Planet/PlanetApplyMyRollAndPitch.asm"
# file opened: ././Universe/Planet/PlanetApplyMyRollAndPitch.asm
   1++C713
   2++C713              ;----------------------------------------------------------------------------------------------------------------------------------
   3++C713              ; Planet version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
   4++C713              ; Need to write a test routine for roll and pitchs
   5++C713 00 00 00 00  PlanetAlphaMulX            DS 4
   6++C717 00 00 00 00  PlanetAlphaMulY            DS 4
   7++C71B 00 00 00 00  PlanetBetaMulZ             DS 4
   8++C71F 00 00 00     PlanetK2                   DS 3
   9++C722
  10++C722
  11++C722              ; Roate around axis
  12++C722              ; varAxis1 and varAxis2 point to the address of the axis to rotate
  13++C722              ; so the axis x1 points to roofv  x , y or z
  14++C722              ;             x2           nosev or sidev  x, y or z
  15++C722              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
  16++C722              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
  17++C722              ; var RAT2 gives direction
  18++C722              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
  19++C722              ;-Set up S R -----------------------------------------
  20++C722              ; optimised we don't deal with sign here just the value of roof axis / 512
  21++C722 2A 82 7D     P_MVS5RotateAxis:       ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
  22++C725 5E                                   ld      e,(hl)
  23++C726 23                                   inc     hl
  24++C727 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
  25++C728 EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
  26++C729 7C                                   ld      a,h
  27++C72A E6 80                                and     SignOnly8Bit
  28++C72C FD 67                                ld      iyh,a           ; iyh = sign Axis1
  29++C72E 7C                                   ld      a,h
  30++C72F E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
  31++C731 CB 3F                                srl     a               ; a = Axis1/2
  32++C733 5F                                   ld      e,a             ;
  33++C734 FD 7C                                ld      a,iyh           ; A = Axis 1 sign
  34++C736 57                                   ld      d,a             ; de = signed Axis1 / 512
  35++C737 B7                                   or      a               ; clear carry
  36++C738 CD 53 01                             call    subHLDES15      ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
  37++C73B              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
  38++C73B E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
  39++C73C 7D                                   ld      a,l
  40++C73D 32 9D 7E                             ld      (varR),a
  41++C740 7C                                   ld      a,h
  42++C741 32 9E 7E                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
  43++C744              ;-calculate roofv latter half of calc
  44++C744 2A 84 7D                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
  45++C747 5E                                   ld      e,(hl)
  46++C748 23                                   inc     hl
  47++C749 56                                   ld      d,(hl)          ; de = value of roof axis
  48++C74A 7A                                   ld      a,d
  49++C74B E6 80                                and     SignOnly8Bit
  50++C74D FD 67                                ld      iyh,a           ; save sign
  51++C74F 7A                                   ld      a,d
  52++C750 E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
  53++C752 57                                   ld      d,a             ; de = abs (nosev)
  54++C753                                      ShiftDERight1
  54++C753 CB 3A       >			   srl d
  54++C755 CB 1B       >			   rr  e
  55++C757                                      ShiftDERight1
  55++C757 CB 3A       >			   srl d
  55++C759 CB 1B       >			   rr  e
  56++C75B                                      ShiftDERight1
  56++C75B CB 3A       >			   srl d
  56++C75D CB 1B       >			   rr  e
  57++C75F                                      ShiftDERight1           ; de = nosev /16 unsigned
  57++C75F CB 3A       >			   srl d
  57++C761 CB 1B       >			   rr  e
  58++C763 3A 4F C0                             ld      a,(univRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
  59++C766 FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
  60++C768 E6 80                                and     SignOnly8Bit
  61++C76A B2                                   or      d
  62++C76B 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
  63++C76C              ;;; ld      a,e
  64++C76C              ;;;     or      iyh
  65++C76C              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
  66++C76C              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
  67++C76C E1                                   pop     hl              ; get back RS POP ID 1
  68++C76D                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
  69++C76D              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
  70++C76D CD 52 00                             call    ADDHLDESignedV4 ; do add using hl and de
  71++C770 E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
  72++C771              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
  73++C771              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
  74++C771 2A 84 7D                             ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
  75++C774 5E                                   ld      e,(hl)
  76++C775 23                                   inc     hl
  77++C776 56                                   ld      d,(hl)
  78++C777 EB                                   ex      de,hl
  79++C778 7C                                   ld      a,h
  80++C779 E6 80                                and     $80
  81++C77B FD 67                                ld      iyh,a
  82++C77D 7C                                   ld      a,h
  83++C77E E6 7F                                and     SignMask8Bit    ; a = roof hi axis  unsigned
  84++C780 CB 3F                                srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
  85++C782 5F                                   ld      e,a
  86++C783 FD 7C                                ld      a,iyh
  87++C785 57                                   ld      d,a
  88++C786 B7                                   or      a               ; clear carry
  89++C787 CD 53 01                             call    subHLDES15
  90++C78A              ;   sbc     hl,de           ; hl = nosev - novesv / 512
  91++C78A E5                                   push    hl              ; save hl on stack  PUSH ID 3
  92++C78B 7D                                   ld      a,l
  93++C78C 32 9D 7D                             ld      (varP),a        ; p = low of resuilt
  94++C78F 7C                                   ld      a,h
  95++C790 E6 7F                                and     SignMask8Bit    ; a = roof hi axis  unsigned
  96++C792 32 B8 7E                             ld      (varT),a        ; t = high of result
  97++C795              ;-- Set up TQ
  98++C795 2A 82 7D                             ld      hl,(varAxis1)   ; now work on roofv axis / 16
  99++C798              ;   ld      hl,(varAxis2)   ; work on nosev again
 100++C798 5E                                   ld      e,(hl)
 101++C799 23                                   inc     hl
 102++C79A 56                                   ld      d,(hl)
 103++C79B 7A                                   ld      a,d
 104++C79C E6 80                                and     $80
 105++C79E FD 67                                ld      iyh,a           ; save sign
 106++C7A0 7A                                   ld      a,d
 107++C7A1 E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 108++C7A3 57                                   ld      d,a             ; de = abs (nosev)
 109++C7A4                                      ShiftDERight1
 109++C7A4 CB 3A       >			   srl d
 109++C7A6 CB 1B       >			   rr  e
 110++C7A8                                      ShiftDERight1
 110++C7A8 CB 3A       >			   srl d
 110++C7AA CB 1B       >			   rr  e
 111++C7AC                                      ShiftDERight1
 111++C7AC CB 3A       >			   srl d
 111++C7AE CB 1B       >			   rr  e
 112++C7B0                                      ShiftDERight1           ; de = nosev /16 unsigned
 112++C7B0 CB 3A       >			   srl d
 112++C7B2 CB 1B       >			   rr  e
 113++C7B4 3A 4F C0                             ld      a,(univRAT2)
 114++C7B7 FD AC                                xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 115++C7B9 E6 80                                and     $80
 116++C7BB B2                                   or      d
 117++C7BC 57                                   ld      d,a
 118++C7BD              ;;; ld      a,e
 119++C7BD              ;;;     or      iyh
 120++C7BD              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 121++C7BD E1                                   pop     hl              ; get back RS   POP ID 3
 122++C7BE              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 123++C7BE CD 53 01                             call    subHLDES15 ; do add using hl and de
 124++C7C1              ;-- Update nosev ---------------------------------------
 125++C7C1 EB                                   ex      de,hl           ; save hl to de
 126++C7C2 2A 84 7D                             ld      hl,(varAxis2)
 127++C7C5 73                                   ld      (hl),e
 128++C7C6 23                                   inc     hl
 129++C7C7 72                                   ld      (hl),d          ; copy result into nosev
 130++C7C8              ;-- Update roofv ---------------------------------------
 131++C7C8 D1                                   pop     de              ; get calc saved on stack POP ID 2
 132++C7C9 2A 82 7D                             ld      hl,(varAxis1)
 133++C7CC 73                                   ld      (hl),e
 134++C7CD 23                                   inc     hl
 135++C7CE 72                                   ld      (hl),d          ; copy result into nosev
 136++C7CF C9                                   ret
 137++C7D0
 138++C7D0 3A 49 C0     ApplyPlanetPitchOnly:   ld      a,(UBnKRotZCounter)
 139++C7D3 FE FF                                cp      $FF
 140++C7D5 21 2B C0     .PitchSAxes:            ld	    hl,P_BnKrotmatRoofvX; UBnkrotmatSidevY
 141++C7D8 22 82 7D                             ld	    (varAxis1),hl
 142++C7DB 21 31 C0                             ld	    hl,P_BnKrotmatNosevX; UBnkrotmatSidevZ
 143++C7DE 22 84 7D                             ld	    (varAxis2),hl
 144++C7E1 CD 22 C7                             call    P_MVS5RotateAxis
 145++C7E4 21 2D C0     .PitchRAxes:            ld	    hl,P_BnKrotmatRoofvY
 146++C7E7 22 82 7D                             ld	    (varAxis1),hl
 147++C7EA 21 33 C0                             ld	    hl,P_BnKrotmatNosevY;UBnkrotmatRoofvZ
 148++C7ED 22 84 7D                             ld	    (varAxis2),hl
 149++C7F0 CD 22 C7                             call    P_MVS5RotateAxis
 150++C7F3 21 2F C0     .PitchNAxes:            ld	    hl,P_BnKrotmatRoofvZ; UBnkrotmatNosevY
 151++C7F6 22 82 7D                             ld	    (varAxis1),hl
 152++C7F9 21 35 C0                             ld	    hl,P_BnKrotmatNosevZ
 153++C7FC 22 84 7D                             ld	    (varAxis2),hl
 154++C7FF CD 22 C7                             call    P_MVS5RotateAxis
 155++C802 C9                                   ret
 156++C803
 157++C803 3A 49 C0     ApplyPlanetRollAndPitch:ld      a,(UBnKRotZCounter)
 158++C806 FE FF                                cp      $FF
 159++C808 21 2B C0     .PitchSAxes:            ld	    hl,P_BnKrotmatRoofvX; UBnkrotmatSidevY
 160++C80B 22 82 7D                             ld	    (varAxis1),hl
 161++C80E 21 31 C0                             ld	    hl,P_BnKrotmatNosevX; UBnkrotmatSidevZ
 162++C811 22 84 7D                             ld	    (varAxis2),hl
 163++C814 CD 22 C7                             call    P_MVS5RotateAxis
 164++C817 21 2D C0     .PitchRAxes:            ld	    hl,P_BnKrotmatRoofvY
 165++C81A 22 82 7D                             ld	    (varAxis1),hl
 166++C81D 21 33 C0                             ld	    hl,P_BnKrotmatNosevY;UBnkrotmatRoofvZ
 167++C820 22 84 7D                             ld	    (varAxis2),hl
 168++C823 CD 22 C7                             call    P_MVS5RotateAxis
 169++C826 21 2F C0     .PitchNAxes:            ld	    hl,P_BnKrotmatRoofvZ; UBnkrotmatNosevY
 170++C829 22 82 7D                             ld	    (varAxis1),hl
 171++C82C 21 35 C0                             ld	    hl,P_BnKrotmatNosevZ
 172++C82F 22 84 7D                             ld	    (varAxis2),hl
 173++C832 CD 22 C7                             call    P_MVS5RotateAxis
 174++C835              ApplyPlanetRollOnly:
 175++C835 3A 79 C0     .ProcessRoll:           ld      a,(P_BnKRotXCounter)
 176++C838 FE FF                                cp      $FF
 177++C83A 21 2B C0     .RollSAxis:           	ld	    hl,P_BnKrotmatRoofvX; UBnkrotmatSidevX
 178++C83D 22 82 7D                             ld	    (varAxis1),hl
 179++C840 21 25 C0                             ld	    hl,P_BnKrotmatSidevX; UBnkrotmatSidevY
 180++C843 22 84 7D                             ld	    (varAxis2),hl
 181++C846 CD 22 C7                             call    P_MVS5RotateAxis
 182++C849 21 2D C0     .RollRAxis:             ld	    hl,P_BnKrotmatRoofvY; UBnkrotmatRoofvX
 183++C84C 22 82 7D                             ld	    (varAxis1),hl
 184++C84F 21 27 C0                             ld	    hl,P_BnKrotmatSidevY; UBnkrotmatRoofvY
 185++C852 22 84 7D                             ld	    (varAxis2),hl
 186++C855 CD 22 C7                             call    P_MVS5RotateAxis
 187++C858 21 2F C0     .RollNAxis:             ld	    hl,P_BnKrotmatRoofvZ; UBnkrotmatNosevX
 188++C85B 22 82 7D                             ld	    (varAxis1),hl
 189++C85E 21 29 C0                             ld	    hl,P_BnKrotmatSidevZ; UBnkrotmatNosevY
 190++C861 22 84 7D                             ld	    (varAxis2),hl
 191++C864 CD 22 C7                             call    P_MVS5RotateAxis
 192++C867 C9                                   ret
 193++C868
 194++C868
 195++C868 3A B5 7D     PlanetApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
 196++C86B 21 A8 7D                             ld      hl,BETA
 197++C86E B6                                   or      (hl)
 198++C86F E6 7F                                and     SignMask8Bit
 199++C871 CA 22 C9                             jp      z,.NoRotation
 200++C874 3A B5 7D     .CalcAlphaMulX:         ld      a,(ALPHA)                   ; get roll magnitude
 201++C877 EE 80                                xor     SignOnly8Bit                ; d = -alpha (Q value)
 202++C879 57                                   ld      d,a                         ; .
 203++C87A 3A 10 C0                             ld      a,(P_BnKxlo)                 ; HLE = x sgn, hi, lo
 204++C87D 5F                                   ld      e,a                         ; .
 205++C87E 2A 11 C0                             ld      hl,(P_BnKxhi)                ; .
 206++C881 CD E6 90                             call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256 where d = sign byte
 207++C884              .SaveAlphaMulX:         ;ld      a,c                         ; a = upper byte of results which will have the sign               ONLY NEEDED FOR DEBUGGING TEST
 208++C884                                      ;ld      (PlanetAlphaMulX),a            ; save sign from result, ELC holds actual result                   ONLY NEEDED FOR DEBUGGING TEST
 209++C884 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
 210++C885 32 14 C7                             ld      (PlanetAlphaMulX+1),a
 211++C888 7B                                   ld      a,e
 212++C889 32 15 C7                             ld      (PlanetAlphaMulX+2),a
 213++C88C 7A                                   ld      a,d
 214++C88D 32 16 C7                             ld      (PlanetAlphaMulX+3),a          ; we actually only want X1 X2 X3 later as its /256
 215++C890 ED 5B 14 C0  .CalcK2:                ld      de,(P_BnKyhi)                ; DEL = Y
 216++C894 3A 13 C0                             ld      a,(P_BnKylo)                 ; .
 217++C897 6F                                   ld      l,a                         ; .
 218++C898 ED 4B 15 C7                          ld      bc,(PlanetAlphaMulX+2)         ; BCH = Y sgn, hi, lo, we loose the C from result
 219++C89C 3A 14 C7                             ld      a,(PlanetAlphaMulX+1)          ; Deal with sign in byte 4
 220++C89F 67                                   ld      h,a                         ; .
 221++C8A0 CD F2 00                             call    AddBCHtoDELsigned           ; DEL = y - (alpha * x)
 222++C8A3 7D                                   ld      a,l                         ; K2  = DEA = DEL = y - (alpha * x)
 223++C8A4 32 1F C7                             ld      (PlanetK2),a                   ; we also need to save l for teh beta k2 calc
 224++C8A7 ED 53 20 C7                          ld      (PlanetK2+1),de                ;
 225++C8AB EB           .CalcBetaMulK2:         ex      de,hl                       ; HLE == DEA
 226++C8AC 5F                                   ld      e,a                         ; .
 227++C8AD 3A A8 7D                             ld      a,(BETA)                    ; D = BETA
 228++C8B0 57                                   ld      d,a                         ; .
 229++C8B1 CD E6 90                             call    mulHLEbyDSigned             ; DELC = Beta * K2, DEL = Beta/256 * K2
 230++C8B4 ED 4B 17 C0  .CalcZ:                 ld      bc,(P_BnKzhi)                ; BCH = z
 231++C8B8 3A 16 C0                             ld      a,(P_BnKzlo)                 ;
 232++C8BB 67                                   ld      h,a                         ;
 233++C8BC CD F2 00                             call    AddBCHtoDELsigned           ; DEL still = Beta * K2 so its z + Beta * K2
 234++C8BF ED 53 17 C0                          ld      (P_BnKzhi),de                ; z = resuklt
 235++C8C3 7D                                   ld      a,l                         ; .
 236++C8C4 32 16 C0                             ld      (P_BnKzlo),a                 ; .
 237++C8C7 3A A8 7D     .CalcBetaZ:             ld      a,(BETA)
 238++C8CA EE 80                                xor     SignOnly8Bit                ; d = -beta (Q value)
 239++C8CC 57                                   ld      d,a                         ; .
 240++C8CD 3A 16 C0                             ld      a,(P_BnKzlo)                 ; HLE = z
 241++C8D0 5F                                   ld      e,a                         ; .
 242++C8D1 2A 17 C0                             ld      hl,(P_BnKzhi)                ; .
 243++C8D4 CD E6 90                             call    mulHLEbyDSigned             ; DELC = z * -beta, so DEL = Z * -beta / 256 where d = sign byte
 244++C8D7              .SaveAlphaMulZ:         ;ld      a,c                         ; a = upper byte of results which will have the sign             ONLY NEEDED FOR DEBUGGING TEST
 245++C8D7                                      ;ld      (PlanetBetaMulZ),a             ; save sign from result, ELC holds actual result                 ONLY NEEDED FOR DEBUGGING TEST
 246++C8D7                                      ;ld      a,l                         ; also save all of alpha *X as we will need it later             ONLY NEEDED FOR DEBUGGING TEST
 247++C8D7                                      ;ld      (PlanetBetaMulZ+1),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
 248++C8D7                                      ;ld      a,e                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
 249++C8D7                                      ;ld      (PlanetBetaMulZ+2),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
 250++C8D7                                      ;ld      a,d                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
 251++C8D7                                      ;ld      (PlanetBetaMulZ+3),a           ; we actually only want X1 X2 X3 later as its /256               ONLY NEEDED FOR DEBUGGING TEST
 252++C8D7 42 4B        .CalcY:                 ld      bc,de                       ; bch = - Beta * z
 253++C8D9 65                                   ld      h,l
 254++C8DA ED 5B 20 C7                          ld      de,(PlanetK2+1)                ; DEL = k2
 255++C8DE 3A 1F C7                             ld      a,(PlanetK2)
 256++C8E1 6F                                   ld      l,a
 257++C8E2 CD F2 00                             call    AddBCHtoDELsigned           ; DEL = K2 - Beta * Z
 258++C8E5 ED 53 14 C0                          ld      (P_BnKyhi),de                ; y = DEL = K2 - Beta * Z
 259++C8E9 7D                                   ld      a,l                         ; .
 260++C8EA 32 13 C0                             ld      (P_BnKylo),a                 ; .
 261++C8ED 3A B5 7D     .CalcAlphaMulY:         ld      a,(ALPHA)
 262++C8F0 57                                   ld      d,a                         ; d = alpha (Q value)
 263++C8F1 3A 13 C0                             ld      a,(P_BnKylo)                 ; HLE = x sgn, hi, lo
 264++C8F4 5F                                   ld      e,a                         ; .
 265++C8F5 2A 14 C0                             ld      hl,(P_BnKyhi)                ; .
 266++C8F8 CD E6 90                             call    mulHLEbyDSigned             ; DELC = y * alpha, so DEL = Y * alpha / 256 where d = sign byte
 267++C8FB 79           .SaveAlphaMulY:         ld      a,c                         ; a = upper byte of results which will have the sign
 268++C8FC 32 17 C7                             ld      (PlanetAlphaMulY),a            ; save sign from result, ELC holds actual result
 269++C8FF 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
 270++C900 32 18 C7                             ld      (PlanetAlphaMulY+1),a
 271++C903 7B                                   ld      a,e
 272++C904 32 19 C7                             ld      (PlanetAlphaMulY+2),a
 273++C907 7A                                   ld      a,d
 274++C908 32 1A C7                             ld      (PlanetAlphaMulY+3),a
 275++C90B 42 4B        .CalcxPLusAlphaY:       ld      bc,de                        ; BCH = Y sgn, hi, lo, we loose the C from result Deal with sign in byte 4
 276++C90D 65                                   ld      h,l                         ; .
 277++C90E ED 5B 11 C0                          ld      de,(P_BnKxhi)                ; DEL = Y
 278++C912 3A 10 C0                             ld      a,(P_BnKxlo)                 ; .
 279++C915 6F                                   ld      l,a                         ; .
 280++C916 CD F2 00                             call    AddBCHtoDELsigned           ; DEL = x + alpha * Y
 281++C919 7A           .SaveResult1:           ld      a,d                         ; Result 1 (X) = AHL + DEL
 282++C91A 63                                   ld      h,e                         ;
 283++C91B 32 12 C0     .CopyResultTo2:         ld      (P_BnKxlo+2),a               ; .
 284++C91E 22 10 C0                             ld      (P_BnKxlo) ,hl               ; .
 285++C921 C9                                   ret
 286++C922 3A 96 7E     .NoRotation:            ld      a,(DELTA)                   ; BCH = - Delta
 287++C925                                      ReturnIfAIsZero
 287++C925 A7          >                        and     a
 287++C926 C8          >                        ret     z
 288++C927 0E 00                                ld      c,0                         ;
 289++C929 67                                   ld      h,a                         ;
 290++C92A 06 80                                ld      b,$80                       ;
 291++C92C ED 5B 17 C0                          ld      de,(P_BnKzhi)                ; DEL = z position
 292++C930 3A 16 C0                             ld      a,(P_BnKzlo)                 ; .
 293++C933 6F                                   ld      l,a                         ; .
 294++C934 CD F2 00                             call    AddBCHtoDELsigned           ; update speed
 295++C937 ED 53 17 C0                          ld      (P_BnKzhi),DE                ; write back to zpos
 296++C93B 7D                                   ld      a,l
 297++C93C 32 16 C0                             ld      (P_BnKzlo),a                ;
 298++C93F C9                                   ret
 299++C940
# file closed: ././Universe/Planet/PlanetApplyMyRollAndPitch.asm
 366+ C940
 367+ C940 00           PlanetOnScreen          DB 0
 368+ C941 00 00        PlanetScrnX             DW  0       ; signed
 369+ C943 00 00        PlanetScrnY             DW  0       ; signed
 370+ C945              ;PlanetRadius            DW  0       ; unsigned
 371+ C945              ; draw circle
 372+ C945
 373+ C945              ;
 374+ C945              ;DIVD3B2 K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo)
 375+ C945
 376+ C945 00 00 00 00  PlanetVarK                 DS 4
 377+ C949 00 00 00     PlanetVarP                 DS 3
 378+ C94C 00           PlanetVarQ                 DS 1
 379+ C94D 00           PlanetVarR                 DS 1
 380+ C94E 00           PlanetVarS                 DS 1
 381+ C94F 00           PlanetVarT                 DS 1
 382+ C950
 383+ C950
 384+ C950 DD 4E 00     MaximiseHLVector:       ld      c,(ix+0)
 385+ C953 DD 46 01                             ld      b,(ix+1)
 386+ C956 DD 5E 02                             ld      e,(ix+2)
 387+ C959 DD 56 03                             ld      d,(ix+3)
 388+ C95C DD 6E 04                             ld      l,(ix+4)
 389+ C95F DD 66 05                             ld      h,(ix+5)
 390+ C962              MaxShiftOutSign:        ShiftBCLeft1
 390+ C962 CB 21       >			   sla c
 390+ C964 CB 10       >			   rl  b
 391+ C966                                      ShiftDELeft1
 391+ C966 CB 23       >			   sla e
 391+ C968 CB 12       >			   rl  d
 392+ C96A                                      ShiftHLLeft1
 392+ C96A CB 25       >			   sla l
 392+ C96C CB 14       >			   rl  h
 393+ C96E 78           MaximiseIXVector:       ld      a,b                 ; Now loop round until bit 7 is populated
 394+ C96F B2                                   or      d
 395+ C970 B3                                   or      e
 396+ C971 E6 80                                and     $80
 397+ C973 CA 62 C9                             jp      z,MaxShiftOutSign
 398+ C976              .MakeSpaceForSign:      ShiftBCRight1               ; Now go back 1 so sign bit is clear
 398+ C976 CB 38       >			   srl b
 398+ C978 CB 19       >			   rr  c
 399+ C97A                                      ShiftDERight1
 399+ C97A CB 3A       >			   srl d
 399+ C97C CB 1B       >			   rr  e
 400+ C97E                                      ShiftHLRight1
 400+ C97E CB 3C       >			   srl h
 400+ C980 CB 1D       >			   rr  l
 401+ C982 DD 7E 00                             ld      a,(ix+0)
 402+ C985 E6 80                                and     SignOnly8Bit
 403+ C987 B0                                   or      b
 404+ C988 DD 7E 01                             ld      a,(ix+1)
 405+ C98B E6 80                                and     SignOnly8Bit
 406+ C98D B2                                   or      d
 407+ C98E DD 7E 03                             ld      a,(ix+3)
 408+ C991 E6 80                                and     SignOnly8Bit
 409+ C993 B3                                   or      e
 410+ C994 DD 71 00                             ld      (ix+0),c
 411+ C997 DD 70 01                             ld      (ix+1),b
 412+ C99A DD 73 02                             ld      (ix+2),e
 413+ C99D DD 72 03                             ld      (ix+3),d
 414+ C9A0 DD 74 04                             ld      (ix+4),h
 415+ C9A3 DD 75 05                             ld      (ix+5),l
 416+ C9A6 C9                                   ret
 417+ C9A7
 418+ C9A7
 419+ C9A7              ; Subroutine: SPS1 (Docked) Calculate the vector to the planet and store it in XX15
 420+ C9A7              ; calls SPS3 and falls into TAS2
 421+ C9A7
 422+ C9A7
 423+ C9A7 CD EE C6     VectorToPlanet:         call    PlanetCopyPosToXX15 ; Perform all of SPS3
 424+ C9AA DD 21 F7 C0                          ld      ix,P_XX15
 425+ C9AE CD 6E C9                             call    MaximiseIXVector
 426+ C9B1 CD 5E 98                             call    NormaliseIXVector
 427+ C9B4
 428+ C9B4
 429+ C9B4              ;;INWORK
 430+ C9B4              ;;INWORK Main loop
 431+ C9B4              ;;INWORK
 432+ C9B4              ;;INWORK Subroutine: Main flight loop (Part 14 of 16) (Flight)
 433+ C9B4              ;;INWORK
 434+ C9B4              ;;INWORK Spawn a space station if we are close enough to the planet
 435+ C9B4              ;;INWORK
 436+ C9B4              ;;INWORK Main loop
 437+ C9B4              ;;INWORK
 438+ C9B4              ;;INWORK Subroutine: Main flight loop (Part 15 of 16) (Flight)
 439+ C9B4              ;;INWORK
 440+ C9B4              ;;INWORK Perform altitude checks with the planet and sun and process fuel scooping if appropriate
 441+ C9B4              ;;INWORK
 442+ C9B4              ;;INWORK Maths (Geometry)
 443+ C9B4              ;;INWORK
 444+ C9B4              ;;INWORK Subroutine: MAS2 (Flight)
 445+ C9B4              ;;INWORK
 446+ C9B4              ;;INWORK Calculate a cap on the maximum distance to the planet or sun
 447+ C9B4              ;;INWORK
 448+ C9B4              ;;INWORK Universe
 449+ C9B4              ;;INWORK
 450+ C9B4              ;;INWORK Subroutine: SOS1 (Flight)
 451+ C9B4              ;;INWORK
 452+ C9B4              ;;INWORK Update the missile indicators, set up the planet data block
 453+ C9B4              ;;INWORK
 454+ C9B4              ;;INWORK
 455+ C9B4              ;;INWORK Dashboard
 456+ C9B4              ;;INWORK
 457+ C9B4              ;;INWORK Subroutine: SP2 (Flight)
 458+ C9B4              ;;INWORK
 459+ C9B4              ;;INWORK Draw a dot on the compass, given the planet/station vector
 460+ C9B4
 461+ C9B4              ; Drawing planets Subroutine: PL2 (Flight) Remove the planet or sun from the screen
 462+ C9B4              ;                             PLANET (Flight) Draw the planet or sun
 463+ C9B4              ;                             PL9 (Part 1 of 3) (Flight) Draw the planet, with either an equator and meridian, or a crater
 464+ C9B4              ;                             PL9 (Part 2 of 3) (Flight) Draw the planet's equator and meridian
 465+ C9B4              ;                             PL9 (Part 3 of 3) (Flight) Draw the planet's crater
 466+ C9B4              ;                             PLS1 (Flight)  Calculate (Y A) = nosev_x / z
 467+ C9B4              ;                             PLS2 (Flight) Draw a half-ellipse
 468+ C9B4              ;                             PLS22 (Flight) Draw an ellipse or half-ellipse
 469+ C9B4
 470+ C9B4
 471+ C9B4              ; Drawing circles Subroutine: CIRCLE (Flight) Draw a circle for the planet
 472+ C9B4              ;                             CIRCLE2 (Flight) Draw a circle (for the planet or chart)
 473+ C9B4              ;                             WPLS2 (Flight) Remove the planet from the screen
 474+ C9B4              ;                             WP1 (Flight) Reset the ball line heap
 475+ C9B4              ; Drawing planets PL21 (Flight) Return from a planet/sun-drawing routine with a failure flag
 476+ C9B4              ;                 PLS3 (Flight) Calculate (Y A P) = 222 * roofv_x / z
 477+ C9B4              ;                 PLS4 (Flight) Calculate CNT2 = arctan(P / A) / 4
 478+ C9B4              ;                 PLS5 (Flight) Calculate roofv_x / z and roofv_y / z
 479+ C9B4              ;                 PLS6 (Flight) Calculate (X K) = (A P) / (z_sign z_hi z_lo)
 480+ C9B4              ; SPS1 (Flight) Calculate the vector to the planet and store it in XX15
 481+ C9B4              ; MV40 rate planet by our pitch
 482+ C9B4              ;
 483+ C9B4              ;look at PL9
 484+ C9B4
 485+ C9B4
 486+ C9B4              ; Optimisation
 487+ C9B4              ; if a <> 0
 488+ C9B4              ;       divide AH by CD
 489+ C9B4              ; if h <> 0
 490+ C9B4              ;      if c <> 0 return 0
 491+ C9B4              ;      else
 492+ C9B4              ;        divide HL by DE
 493+ C9B4              ; if l <>0
 494+ C9B4              ;      if c or d <> 0 return 0
 495+ C9B4              ;      else
 496+ C9B4              ;        divide l by e
 497+ C9B4              ;
 498+ C9B4 47           PlanetAHLequAHLDivCDE:  ld      b,a                         ; save a reg
 499+ C9B5 79                                   ld      a,c                         ; check for divide by zero
 500+ C9B6 B2                                   or      d                           ; .
 501+ C9B7 B3                                   or      e                           ; .
 502+ C9B8                                      JumpIfZero      .divideByZero       ; .
 502+ C9B8 CA D1 C9    >                        jp	z,.divideByZero
 503+ C9BB 78                                   ld      a,b                         ; get a back
 504+ C9BC                                      JumpIfAIsNotZero    .divideAHLbyCDE
 504+ C9BC A7          >                        and     a
 504+ C9BD C2 D9 C9    >                        jp	    nz,.divideAHLbyCDE
 505+ C9C0 7C           .AIsZero:               ld      a,h
 506+ C9C1                                      JumpIfAIsNotZero    .divideHLbyDE
 506+ C9C1 A7          >                        and     a
 506+ C9C2 C2 E0 C9    >                        jp	    nz,.divideHLbyDE
 507+ C9C5 7D           .HIsZero:               ld      a,l
 508+ C9C6                                      JumpIfAIsNotZero    .divideLbyE
 508+ C9C6 A7          >                        and     a
 508+ C9C7 C2 EF C9    >                        jp	    nz,.divideLbyE
 509+ C9CA              .resultIsZero:          ZeroA
 509+ C9CA AF          >                        xor a
 510+ C9CB 67                                   ld      h,a                        ; result is zero so set hlde
 511+ C9CC 6F                                   ld      l,a                        ; result is zero so set hlde
 512+ C9CD 54 5D                                ld      de,hl
 513+ C9CF                                      ClearCarryFlag
 513+ C9CF B7          >                        or a
 514+ C9D0 C9                                   ret
 515+ C9D1 3E FF        .divideByZero:          ld      a,$FF
 516+ C9D3 67                                   ld      h,a
 517+ C9D4 6F                                   ld      l,a
 518+ C9D5 54 5D                                ld      de,hl
 519+ C9D7                                      SetCarryFlag
 519+ C9D7 37          >                        scf
 520+ C9D8 C9                                   ret
 521+ C9D9              ; AHL = ahl/cde, this could be a genuine 24 bit divide
 522+ C9D9              ; if AHL is large and cde small then the value will be big so will be off screen so we can risk 16 bit divide
 523+ C9D9 CD 2D 8F     .divideAHLbyCDE:        call    Div24by24
 524+ C9DC EB                                   ex      hl,de                         ; ahl is result
 525+ C9DD 79                                   ld      a,c                           ; ahl is result
 526+ C9DE                                      ClearCarryFlag
 526+ C9DE B7          >                        or a
 527+ C9DF C9                                   ret
 528+ C9E0              ; AHL = 0hl/0de as A is zero
 529+ C9E0 79           .divideHLbyDE:          ld      a,c                         ;'if c = 0 then result must be zero
 530+ C9E1                                      JumpIfAIsNotZero   .resultIsZero
 530+ C9E1 A7          >                        and     a
 530+ C9E2 C2 CA C9    >                        jp	    nz,.resultIsZero
 531+ C9E5 44 4D                                ld      bc,hl
 532+ C9E7 CD 58 95                             call    BC_Div_DE                   ; BC = HL/DE
 533+ C9EA 60 69                                ld      hl,bc
 534+ C9EC                                      ZeroA                               ; so we can set A to Zero
 534+ C9EC AF          >                        xor a
 535+ C9ED                                      ClearCarryFlag
 535+ C9ED B7          >                        or a
 536+ C9EE C9                                   ret
 537+ C9EF              ; AHL = 00l/00e as A and H are zero
 538+ C9EF 79           .divideLbyE:            ld      a,c                         ; if d = 0 then result must be zero
 539+ C9F0 B2                                   or      d
 540+ C9F1                                      JumpIfAIsNotZero   .resultIsZero
 540+ C9F1 A7          >                        and     a
 540+ C9F2 C2 CA C9    >                        jp	    nz,.resultIsZero
 541+ C9F5 4B                                   ld      c,e
 542+ C9F6 5D                                   ld      e,l
 543+ C9F7 CD 1A 95                             call    E_Div_C
 544+ C9FA 6F                                   ld      l,a
 545+ C9FB                                      ZeroA
 545+ C9FB AF          >                        xor a
 546+ C9FC 67                                   ld      h,a
 547+ C9FD                                      ClearCarryFlag
 547+ C9FD B7          >                        or a
 548+ C9FE C9                                   ret
 549+ C9FF
 550+ C9FF              ; Project XY to screen location
 551+ C9FF DD 26 00     ProjectPlanet:          ld      ixh,0
 552+ CA02 2A 10 C0                             ld      hl,(P_BnKxlo)
 553+ CA05 3A 12 C0                             ld      a,(P_BnKxsgn)
 554+ CA08 CD 1D CA                             call    PlanetProcessVertex         ; hl = PixelCentreY + (Y / Z)*-1 (as its 0 = top of screen)
 555+ CA0B 22 0C C1                             ld      (P_centreX),hl
 556+ CA0E DD 24                                inc     ixh
 557+ CA10 2A 13 C0                             ld      hl,(P_BnKylo)
 558+ CA13 3A 15 C0                             ld      a,(P_BnKysgn)
 559+ CA16 CD 1D CA                             call    PlanetProcessVertex         ; hl = PixelCentreY + (Y / Z)*-1 (as its 0 = top of screen)
 560+ CA19 22 12 C1                             ld      (P_centreY),hl
 561+ CA1C C9                                   ret
 562+ CA1D
 563+ CA1D              ; PlanetProcessVertex AHL = X or Y position (sign in A)
 564+ CA1D              ;                     fetches z as this used in both calcs
 565+ CA1D 47           PlanetProcessVertex:    ld      b,a                         ; save sign/high byte
 566+ CA1E ED 5B 16 C0  .PlanetProjectToEye:    ld      de,(P_BnKzlo)               ; B H L   = X or Y
 567+ CA22 3A 18 C0                             ld      a,(P_BnKzsgn)               ; IYH D E = z
 568+ CA25 FD 67                                ld      iyh,a                       ; save sign
 569+ CA27                                      ClearSignBitA                       ; A D E   = | z |
 569+ CA27 E6 7F       >                        and     SignMask8Bit
 570+ CA29                                      ; Addeed as it neds to be AHL/0CD to force * 256 and get correct screen position on scaling
 571+ CA29 5A                                   ld      e,d                         ; C D E   = A D E * 256, i.e. 0 A D
 572+ CA2A 57                                   ld      d,a                         ; .
 573+ CA2B 0E 00                                ld      c,0                         ; .
 574+ CA2D                                      ; added above to correct positioning as in reality its X/(Z/256) to get +-256 rather than +- 1
 575+ CA2D 78                                   ld      a,b                         ; copy X or Y sign into iyl
 576+ CA2E FD 6F                                ld      iyl,a                       ; .
 577+ CA30                                      ClearSignBitA                       ; A H L = |X| (or |Y|)
 577+ CA30 E6 7F       >                        and     SignMask8Bit
 578+ CA32 CD B4 C9                             call PlanetAHLequAHLDivCDE          ; AHL = AHL/CDE unsigned
 579+ CA35 DA 94 CA                             jp      c,.IsOffScreen              ; carry flag indicates failure
 580+ CA38              .CheckPosOnScreen:      JumpIfAIsNotZero .IsOffScreen       ; if A has a value then its way too large regardless of sign
 580+ CA38 A7          >                        and     a
 580+ CA39 C2 94 CA    >                        jp	    nz,.IsOffScreen
 581+ CA3C                                      JumpOnLeadSignSet h, .IsOffScreen   ; or bit 7 set of h
 581+ CA3C 7C          >                        ld      a,h
 581+ CA3D E6 80       >                        and     SignOnly8Bit
 581+ CA3F C2 94 CA    >                        jp      nz,.IsOffScreen
 582+ CA42 DD 7C        .CheckXorY:             ld      a,ixh
 583+ CA44                                      JumpIfAIsNotZero .ProcessYCoord
 583+ CA44 A7          >                        and     a
 583+ CA45 C2 6B CA    >                        jp	    nz,.ProcessYCoord
 584+ CA48              ; Handle X Coord offset
 585+ CA48 FD 7C        .ProcessXCoord:         ld      a,iyh                       ; determine if its + or - value of AHL/CDE
 586+ CA4A FD AD                                xor     iyl
 587+ CA4C E6 80                                and     $80
 588+ CA4E CA 57 CA                             jp      z,.ProcessXPositive
 589+ CA51              .ProcessXNegative:      macronegate16hl
 589+ CA51 AF          >					xor 	a
 589+ CA52 95          >					sub 	l
 589+ CA53 6F          >					ld 		l,a
 589+ CA54 9F          >					sbc 	a,a
 589+ CA55 94          >					sub 	h
 589+ CA56 67          >					ld 		h,a
 590+ CA57 11 80 00     .ProcessXPositive:      ld      de,128
 591+ CA5A                                      ClearCarryFlag
 591+ CA5A B7          >                        or a
 592+ CA5B ED 5A                                adc     hl,de                       ; now X position is CenterX+ (X / Z) in 2's c
 593+ CA5D 54 5D                                ld      de,hl                       ; set de to | hl for +/- 1024 check
 594+ CA5F F2 8C CA                             jp      p,.CheckBoundaries          ; .
 595+ CA62                                      macronegate16de                     ; .
 595+ CA62 AF          >					xor 	a
 595+ CA63 93          >                    sub 	e
 595+ CA64 5F          >                    ld 		e,a
 595+ CA65 9F          >                    sbc 	a,a
 595+ CA66 92          >                    sub 	d
 595+ CA67 57          >                    ld 		d,a
 596+ CA68 C3 8C CA                             jp      .CheckBoundaries            ; .
 597+ CA6B              ; Handle Y Coord offset
 598+ CA6B FD 7C        .ProcessYCoord:         ld      a,iyh
 599+ CA6D FD AD                                xor     iyl
 600+ CA6F E6 80                                and     $80
 601+ CA71 CA 7A CA                             jp      z,.ProcessYPositive
 602+ CA74              .ProcessYNegative:      macronegate16hl
 602+ CA74 AF          >					xor 	a
 602+ CA75 95          >					sub 	l
 602+ CA76 6F          >					ld 		l,a
 602+ CA77 9F          >					sbc 	a,a
 602+ CA78 94          >					sub 	h
 602+ CA79 67          >					ld 		h,a
 603+ CA7A 11 40 00     .ProcessYPositive:      ld      de,64                       ; set hl to center Y and de to 2s'c Y/Z
 604+ CA7D EB                                   ex      de,hl
 605+ CA7E                                      ClearCarryFlag
 605+ CA7E B7          >                        or a
 606+ CA7F ED 52                                sbc     hl,de                       ; now HL  position is CenterY - (Y / Z) in 2's c
 607+ CA81 54 5D                                ld      de,hl                       ;
 608+ CA83 F2 8C CA                             jp      p,.CheckBoundaries          ; .
 609+ CA86                                      macronegate16de                     ; load DE with | result to simplify +-1024 check|
 609+ CA86 AF          >					xor 	a
 609+ CA87 93          >                    sub 	e
 609+ CA88 5F          >                    ld 		e,a
 609+ CA89 9F          >                    sbc 	a,a
 609+ CA8A 92          >                    sub 	d
 609+ CA8B 57          >                    ld 		d,a
 610+ CA8C 7A           .CheckBoundaries:       ld      a,d
 611+ CA8D                                      JumpIfAGTENusng 4, .IsOffScreen     ; if |position| > 1024 then way to large
 611+ CA8D FE 04       >                        cp     4
 611+ CA8F D2 94 CA    >                        jp		nc,.IsOffScreen
 612+ CA92              .calculatedVert:        ClearCarryFlag
 612+ CA92 B7          >                        or a
 613+ CA93 C9                                   ret
 614+ CA94 21 FF 7F     .IsOffScreen:           ld      hl,$7FFF
 615+ CA97 FD 7C                                ld      a,iyh
 616+ CA99 FD AD                                xor     iyl
 617+ CA9B                                      SignBitOnlyA
 617+ CA9B E6 80       >                        and     SignOnly8Bit
 618+ CA9D 28 02                                jr      z,.calculatedOffScreen
 619+ CA9F 23                                   inc     hl                          ; set hl to $8001 i.e. -32768
 620+ CAA0 23                                   inc     hl                          ; .
 621+ CAA1              .calculatedOffScreen:   SetCarryFlag
 621+ CAA1 37          >                        scf
 622+ CAA2 C9                                   ret
 623+ CAA3
 624+ CAA3
 625+ CAA3              ; .........................................................................................................................
 626+ CAA3              ; we only hit this if z is positive so we can ignore signs
 627+ CAA3              ; calculates 24576/z, maxes at 248
 628+ CAA3 ED 4B 16 C0  PlanetCalculateRadius:  ld      bc,(P_BnKzlo)                ; DBC = z position
 629+ CAA7 3A 18 C0                             ld      a,(P_BnKzsgn)                ;
 630+ CAAA 57                                   ld      d,a                         ;
 631+ CAAB 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 632+ CAAE CD F8 93                             call    Div16by24usgn               ; radius = HL/DBC = 24576 / distance z
 633+ CAB1 B4                                   or      h                           ; if A or H are not 0 then max Radius
 634+ CAB2                                      JumpIfAIsZero  .SaveRadius
 634+ CAB2 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 634+ CAB3 CA B9 CA    >                        jp	    z, .SaveRadius
 635+ CAB6 21 F8 00     .MaxRadius:             ld      hl,248                      ; set radius to 248 as maxed out
 636+ CAB9 7D           .SaveRadius:            ld      a,l                         ; l = resultant radius
 637+ CABA F6 01                                or      1                           ; at least radius 1 (never even so need to test)
 638+ CABC                                      DISPLAY "DONE - Eliiminate the check to see if planet radius is > 255 as its already fixed in Planet Calculate Radius"
 639+ CABC                                      ;ld      l,a                        ;
 640+ CABC                                      ;ld      (P_Radius),hl              ; save a copy of radius now for later
 641+ CABC 32 EB C0                             ld      (P_Radius),a
 642+ CABF 5F                                   ld      e,a                         ; as later code expects it to be in e
 643+ CAC0 16 08        .CalculateStep:         ld      d,8
 644+ CAC2                                      JumpIfALTNusng 8, .DoneStepCalc
 644+ CAC2 FE 08       >                        cp      8
 644+ CAC4 DA D0 CA    >                        jp		c, .DoneStepCalc
 645+ CAC7 CB 3A                                srl     d                           ; d = d / 2
 646+ CAC9                                      JumpIfALTNusng 60, .DoneStepCalc
 646+ CAC9 FE 3C       >                        cp      60
 646+ CACB DA D0 CA    >                        jp		c, .DoneStepCalc
 647+ CACE CB 3A                                srl     d                           ; d = d / 2
 648+ CAD0 7A           .DoneStepCalc:          ld      a,d
 649+ CAD1 32 A1 C0                             ld      (P_BnKSTP),a
 650+ CAD4 C9                                   ret
 651+ CAD5
 652+ CAD5              ; Shorter version when sun does not need to be processed to screen
 653+ CAD5 3A 12 C0     PlanetUpdateCompass:    ld      a,(P_BnKxsgn)
 654+ CAD8 2A 10 C0                             ld      hl,(P_BnKxlo)
 655+ CADB CD 1D CA                             call    PlanetProcessVertex
 656+ CADE 22 19 C0                             ld      (P_CompassX),hl
 657+ CAE1 3A 15 C0                             ld      a,(P_BnKysgn)
 658+ CAE4 2A 13 C0                             ld      hl,(P_BnKylo)
 659+ CAE7 CD 1D CA                             call    PlanetProcessVertex
 660+ CAEA 22 1B C0                             ld      (P_CompassY),hl
 661+ CAED C9                                   ret
 662+ CAEE
 663+ CAEE                                 ; could probabyl set a variable say "varGood", default as 1 then set to 0 if we end up with a good calulation?? may not need it as we draw here
 664+ CAEE CD 68 C8     PlanetUpdateAndRender:  call    PlanetApplyMyRollAndPitch    ; not needed for solid as yet
 665+ CAF1 3A 18 C0     .DrawSolidPlanet:       ld      a,(P_BnKzsgn)                ; a = z sign of position
 666+ CAF4 A7           .ElimiateBehind:        and     a
 667+ CAF5 FA 44 CB                             jp      m,.SkipDrawPlanet            ; if its negative then behind so exit
 668+ CAF8              .TooFarAway:            JumpIfAGTENusng   48,.SkipDrawPlanet  ; if sign (high byte 2) > 48 then too far away to render
 668+ CAF8 FE 30       >                        cp     48
 668+ CAFA D2 44 CB    >                        jp		nc,.SkipDrawPlanet
 669+ CAFD 21 17 C0                             ld      hl, P_BnKzhi                 ; if |P_BnKzsgn| or P_BnKzsgn are both 0 then the planet is too close so return
 670+ CB00 B6                                   or      (hl)                         ; .
 671+ CB01 CA 44 CB                             jp      z,.SkipDrawPlanet            ; .
 672+ CB04              ;                       loads P_centreX and Y with planet on screen centre
 673+ CB04 CD FF C9     .Project                call    ProjectPlanet                ; Project the planet/sun onto the screen, returning the centre's coordinates in K3(1 0) and K4(1 0)
 674+ CB07 CD A3 CA     .CalcRadius:            call    PlanetCalculateRadius
 675+ CB0A                                      DISPLAY "ASSMEBLING WITH SOLID PLANETS"
 676+ CB0A                                      DISPLAY "TODO, pick colour based on galaxy map"
 677+ CB0A 2A 0C C1                             ld      hl,(P_centreX)
 678+ CB0D ED 5B 12 C1                          ld      de,(P_centreY)
 679+ CB11 3A EB C0                             ld      a,(P_Radius)
 680+ CB14 A7                                   and     a
 681+ CB15 CA 44 CB                             jp      z,.SkipDrawPlanet            ; skip 0 size
 682+ CB18 4F                                   ld      c,a
 683+ CB19 3A F4 C0                             ld      a,(P_Colour1)
 684+ CB1C 47                                   ld      b,a
 685+ CB1D                                      MMUSelectLayer2
 685+ CB1D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 686+ CB21 CD 91 EE                             call    l2_draw_clipped_circle_filled
 687+ CB24                                      JumpIfMemLTNusng P_Radius, 5, .SkipDrawPlanet
 687+ CB24 3A EB C0    >                        ld      a,(P_Radius)
 687+ CB27 FE 05       >                        cp      5
 687+ CB29 DA 44 CB    >                        jp	  c,.SkipDrawPlanet
 688+ CB2C FE 05                                cp      5               ; radius < 3 means no atmosphere
 689+ CB2E 4F                                   ld      c,a             ; as a holds radius from Jump Macro
 690+ CB2F CA 44 CB                             jp      z,.SkipDrawPlanet
 691+ CB32 2A 0C C1                             ld      hl,(P_centreX) ; just to test putting a rim there
 692+ CB35 ED 5B 12 C1                          ld      de,(P_centreY)
 693+ CB39 3A F5 C0                             ld      a,(P_Colour2)
 694+ CB3C 47                                   ld      b,a
 695+ CB3D                                      MMUSelectLayer2
 695+ CB3D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 696+ CB41 CD 95 EC                             call    l2_draw_clipped_circle
 697+ CB44 CD D5 CA     .SkipDrawPlanet:        call    PlanetUpdateCompass
 698+ CB47 C9                                   ret                                 ; else x is totally off the left side of the screen
 699+ CB48              ;
 700+ CB48              ; (PLS4)
 701+ CB48              ; CNT2 =  = arctan(-nosev_z_hi / side_z_hi) / 4,  if nosev_z_hi >= 0 add PI
 702+ CB48 3A 36 C0     CalcNoseSideArcTanPI:   ld      a, (P_BnKrotmatNosevZ + 1)   ; P = - nosevz hi
 703+ CB4B EE 80                                xor     $80
 704+ CB4D 32 9D 7D                             ld      (varP),a
 705+ CB50 3A 2A C0                             ld      a, (P_BnKrotmatSidevZ + 1)
 706+ CB53 C3 61 CB                             jp      CalcArcTanPiPA
 707+ CB56              ;  CNT2 =  = arctan(-nosev_z_hi / roofv_z_hi) / 4,  if nosev_z_hi >= 0 add PI
 708+ CB56 3A 36 C0     CalcNoseRoofArcTanPI:   ld      a, (P_BnKrotmatNosevZ + 1)   ; P = - nosevz hi
 709+ CB59 EE 80                                xor     $80
 710+ CB5B 32 9D 7D                             ld      (varP),a
 711+ CB5E 3A 30 C0                             ld      a, (P_BnKrotmatRoofvZ + 1)
 712+ CB61              ; CNT2 = arctan(P / A) / 4
 713+ CB61 32 9C 7E     CalcArcTanPiPA:         ld      (varQ),a                    ; STA Q                  \ Set Q = A
 714+ CB64 CD B4 91                             call    ARCTAN                      ; A = arctan(P / Q)
 715+ CB67 4F                                   ld      c,a                         ; save a
 716+ CB68 3A 36 C0                             ld      a,(P_BnKrotmatNosevZ+1)
 717+ CB6B E6 80                                and     $80
 718+ CB6D 79                                   ld      a,c                         ; restore a as it doesn't affect flags doing an ld
 719+ CB6E FA 73 CB                             jp      m,.SkipFlipSign             ; If nosev_z_hi is negativeleave the angle in A as a positive
 720+ CB71              ; Adds 128 to the result (rather than makes it negative)
 721+ CB71 EE 80        .FlipSign:              xor     $80                         ; If we get here then nosev_z_hi is positive, so flip bit 7 of the angle in A, which is the same as adding 128
 722+ CB73 CB 3F        .SkipFlipSign:          srl     a                           ; Set CNT2 = A / 4
 723+ CB75 CB 3F                                srl     a                           ; .
 724+ CB77 32 D5 C0                             ld      (P_BnKCNT2),a                ; .
 725+ CB7A C9                                   ret
 726+ CB7B
 727+ CB7B              ; (PSL1)
 728+ CB7B              ; XX16 K2) = nosev_x / z
 729+ CB7B 2A 31 C0     CalcNoseXDivNoseZ:      ld      hl,(P_BnKrotmatNosevX)
 730+ CB7E ED 5B 35 C0                          ld      de,(P_BnKrotmatNosevZ)
 731+ CB82 C3 B4 CB                             jp      CalcRotMatDivide
 732+ CB85 2A 33 C0     CalcNoseYDivNoseZ:      ld      hl,(P_BnKrotmatNosevY)
 733+ CB88 ED 5B 35 C0                          ld      de,(P_BnKrotmatNosevZ)
 734+ CB8C C3 B4 CB                             jp      CalcRotMatDivide
 735+ CB8F 2A 2B C0     CalcRoofXDivRoofZ:      ld      hl,(P_BnKrotmatRoofvX)
 736+ CB92 ED 5B 2F C0                          ld      de,(P_BnKrotmatRoofvZ)
 737+ CB96 C3 B4 CB                             jp      CalcRotMatDivide
 738+ CB99 2A 2D C0     CalcRoofYDivRoofZ:      ld      hl,(P_BnKrotmatRoofvY)
 739+ CB9C ED 5B 2F C0                          ld      de,(P_BnKrotmatRoofvZ)
 740+ CBA0 C3 B4 CB                             jp      CalcRotMatDivide
 741+ CBA3 2A 25 C0     CalcSideXDivSideZ:      ld      hl,(P_BnKrotmatSidevX)
 742+ CBA6 ED 5B 29 C0                          ld      de,(P_BnKrotmatSidevZ)
 743+ CBAA C3 B4 CB                             jp      CalcRotMatDivide
 744+ CBAD 2A 27 C0     CalcSideYDivSideZ:      ld      hl,(P_BnKrotmatSidevY)
 745+ CBB0 ED 5B 29 C0                          ld      de,(P_BnKrotmatSidevZ)
 746+ CBB4              ; (PLS1) (Y A) = nosev_x / z where B = Y (also stores in regY), K+3 = sign of calculation
 747+ CBB4              ; stores result in BC now as well
 748+ CBB4              ; does not do increment of X as its not needed when directly loading verticies of rotation
 749+ CBB4              CalcRotMatDivide:
 750+ CBB4 7B           .LoadDEtoQRS:           ld      a,e                         ; Q
 751+ CBB5 32 9C 7E                             ld      (varQ),a                    ;
 752+ CBB8 7A                                   ld      a,d                         ;
 753+ CBB9 E6 7F                                and     $7F                         ;
 754+ CBBB 32 9D 7E                             ld      (varR),a                    ;
 755+ CBBE 7A                                   ld      a,d                         ;
 756+ CBBF E6 80                                and     $80                         ;
 757+ CBC1 32 9E 7E                             ld      (varS),a                    ;
 758+ CBC4 7D           .LoadHLtoP012:          ld      a,l                         ; set A P+1 P to (signnoseX) (|noseX|)
 759+ CBC5 32 9D 7D                             ld      (varP),a                    ; set P to nosevX lo
 760+ CBC8 7C                                   ld      a,h                         ; set P_1 to |nosevX hi|
 761+ CBC9 44                                   ld      b,h                         ; .
 762+ CBCA E6 7F                                and     $7F                         ; .
 763+ CBCC 32 9E 7D                             ld      (varP+1),a                  ; .
 764+ CBCF 78                                   ld      a,b                         ; set a to sign nosevX
 765+ CBD0 E6 80                                and     $80
 766+ CBD2 32 9F 7D                             ld      (varP+2),a
 767+ CBD5 CD C1 92                             call    DVID3B                      ; call DVI3B2 variane where z is in de as 16 bit and needs expanding to 32
 768+ CBD8 3A B0 7E                             ld      a,(varK+1)                  ; get second byte into b
 769+ CBDB 47                                   ld      b,a                         ; and also check to see if its
 770+ CBDC A7                                   and     a                           ; zero
 771+ CBDD 3A AF 7E                             ld      a,(varK)
 772+ CBE0 4F                                   ld      c,a                         ; so now BC = result too
 773+ CBE1 CA E7 CB                             jp      z,.Skip254
 774+ CBE4 3E FE        .Force254Result:        ld      a,254                       ; if 2nd byte is non zero set a to 254 as our max 1 byte value to return
 775+ CBE6 4F                                   ld      c,a
 776+ CBE7 F5           .Skip254:               push    af
 777+ CBE8 79                                   ld      a,c                         ; if a is 0 then force sign to be +ve
 778+ CBE9 A7                                   and     a
 779+ CBEA C2 F3 CB                             jp      nz,.DoNotForceSign
 780+ CBED 32 87 7D     .ForceSignPositive:     ld      (regY),a
 781+ CBF0 47                                   ld      b,a
 782+ CBF1 F1                                   pop     af
 783+ CBF2 C9                                   ret
 784+ CBF3 3A B2 7E     .DoNotForceSign:        ld      a,(varK+3)                  ; set b to sign (which was Y in 6502)
 785+ CBF6 32 87 7D                             ld      (regY),a
 786+ CBF9 47                                   ld      b,a                         ; bc also is result as c was a copy of a
 787+ CBFA F1                                   pop     af                          ; so c doesn't need to be pushed to stack
 788+ CBFB C9                                   ret
 789+ CBFC
 790+ CBFC              ; (PLS3)
 791+ CBFC              ;  (Y A P) = 222 * roofv_x / z to give the x-coordinate of the crater offset
 792+ CBFC 2A 2B C0     Cacl222MulRoofXDivRoofZ:ld      hl,(P_BnKrotmatRoofvX)
 793+ CBFF ED 5B 2F C0                          ld      de,(P_BnKrotmatRoofvZ)
 794+ CC03 C3 0D CC                             jp      Calc222MulHLDivDE
 795+ CC06              ; (Y A P) = 222 * roofv_y / z to give the x-coordinate of the crater offset
 796+ CC06 2A 2D C0     Cacl222MulRoofYDivRoofZ:ld      hl,(P_BnKrotmatRoofvY)
 797+ CC09 ED 5B 2F C0                          ld      de,(P_BnKrotmatRoofvZ)
 798+ CC0D              ; Optimise, move result at the end into HL instead of YA (we can ignore P)
 799+ CC0D CD B4 CB     Calc222MulHLDivDE:      call    CalcRotMatDivide            ; calculate (Y A) = nosev_x(orY) / z
 800+ CC10 57                                   ld      d,a                         ; P = |roofv_x / z|
 801+ CC11 1E DE                                ld      e,222                       ; LDA #222               \ Set Q = 222, the offset to the crater
 802+ CC13                                      ; Not needed                        ; STA Q
 803+ CC13                                      ; Not needed                        ; STX U                  \ Store the vector index X in U for retrieval after the  call to MULTU
 804+ CC13 ED 30                                mul     de                          ; call MULTU (unsigned multiply) de = 222 * |roofv_x / z|
 805+ CC15 3A B2 7E                             ld      a,(varK+3)                  ; LDY K+3                \ If the sign of the result in K+3 is positive, skip to
 806+ CC18 A7                                   and     a
 807+ CC19 F2 39 CC                             jp      p,.PL12                     ; BPL PL12               \ PL12 to return with Y = 0
 808+ CC1C 3E FF                                ld      a,$FF                       ; LDY #&FF               \ Set Y = &FF to be a negative high byte
 809+ CC1E 32 87 7D                             ld      (regY),a                    ; .
 810+ CC21 47                                   ld      b,a                         ; .
 811+ CC22                                      macronegate16de                     ; Otherwise the result should be negative, so negate
 811+ CC22 AF          >					xor 	a
 811+ CC23 93          >                    sub 	e
 811+ CC24 5F          >                    ld 		e,a
 811+ CC25 9F          >                    sbc 	a,a
 811+ CC26 92          >                    sub 	d
 811+ CC27 57          >                    ld 		d,a
 812+ CC28 7B                                   ld      a,e                         ; now we have Y A P (with Y in b also)
 813+ CC29 32 9D 7D                             ld      (varP),a                    ; .
 814+ CC2C 7A                                   ld      a,d                         ; .
 815+ CC2D A7                                   and     a
 816+ CC2E CA 32 CC                             jp      z,.ForcePositive            ; if A is 0, special case to make +ve
 817+ CC31 C9                                   ret                                 ; RTS                    \ Return from the subroutine
 818+ CC32              .ForcePositive:         ZeroA                               ; set regY and b to 0
 818+ CC32 AF          >                        xor a
 819+ CC33 32 87 7D                             ld      (regY),a
 820+ CC36 47                                   ld      b,a
 821+ CC37 7A                                   ld      a,d                         ; get d back into a again
 822+ CC38 C9                                   ret
 823+ CC39              .PL12:                  ZeroA                               ; set Y A P to be 0 D E from mul
 823+ CC39 AF          >                        xor a
 824+ CC3A 47                                   ld      b,a
 825+ CC3B 32 87 7D                             ld      (regY),a
 826+ CC3E 7B                                   ld      a,e
 827+ CC3F 32 9D 7D                             ld      (varP),a
 828+ CC42 7A                                   ld      a,d
 829+ CC43 C9                                   ret
 830+ CC44
 831+ CC44
 832+ CC44              ; K3(1 0) = (Y A) + K3(1 0) = 222 * roofv_x / z + x-coordinate of planet centre
 833+ CC44 6F           CalcCraterCenterX:      ld      l,a                         ; set HL to Y A
 834+ CC45 3A 87 7D                             ld      a,(regY)                    ;
 835+ CC48 67                                   ld      h,a                         ;
 836+ CC49 ED 5B C3 7E                          ld      de,(varK3)                  ; de = K3 [ 1 0 ]
 837+ CC4D                                      ClearCarryFlag
 837+ CC4D B7          >                        or a
 838+ CC4E ED 5A                                adc     hl,de
 839+ CC50 22 C3 7E                             ld      (varK3),hl                  ; K3[1 0] = hl + de
 840+ CC53 C9                                   ret
 841+ CC54
 842+ CC54              ; K4(1 0) = (Y A) - K4(1 0) = 222 * roofv_x / z + x-coordinate of planet centre
 843+ CC54 6F           CalcCraterCenterY:      ld      l,a                         ; set HL to Y A
 844+ CC55 3A 87 7D                             ld      a,(regY)                    ;
 845+ CC58 67                                   ld      h,a                         ;
 846+ CC59 ED 5B C9 7E                          ld      de,(varK4)                  ; de = K4 [ 1 0 ]
 847+ CC5D                                      ClearCarryFlag
 847+ CC5D B7          >                        or a
 848+ CC5E ED 52                                sbc     hl,de
 849+ CC60 22 C9 7E                             ld      (varK4),hl                  ; K4[1 0] = hl + de
 850+ CC63 C9                                   ret
 851+ CC64
 852+ CC64 CB 7C        TwosCompToLeadingSign:  bit     7,h
 853+ CC66 C8                                   ret     z
 854+ CC67                                      macronegate16hl
 854+ CC67 AF          >					xor 	a
 854+ CC68 95          >					sub 	l
 854+ CC69 6F          >					ld 		l,a
 854+ CC6A 9F          >					sbc 	a,a
 854+ CC6B 94          >					sub 	h
 854+ CC6C 67          >					ld 		h,a
 855+ CC6D 7C                                   ld      a,h
 856+ CC6E F6 80                                or      $80
 857+ CC70 67                                   ld      h,a
 858+ CC71 C9                                   ret
 859+ CC72
 860+ CC72 CB 7C        LeadingSignToTwosComp:  bit     7,h
 861+ CC74 C8                                   ret     z
 862+ CC75 7C                                   ld      a,h
 863+ CC76 E6 7F                                and     $7F
 864+ CC78 67                                   ld      h,a
 865+ CC79                                      macronegate16hl
 865+ CC79 AF          >					xor 	a
 865+ CC7A 95          >					sub 	l
 865+ CC7B 6F          >					ld 		l,a
 865+ CC7C 9F          >					sbc 	a,a
 865+ CC7D 94          >					sub 	h
 865+ CC7E 67          >					ld 		h,a
 866+ CC7F C9                                   ret
 867+ CC80
 868+ CC80              ;-- bc = bc * P_radius where bc = S.Fraction ,e.g nosex/nosey
 869+ CC80 3A EB C0     P_BCmulRadius:          ld      a,(P_Radius)                ; we probably don't have radius already
 870+ CC83 57           P_BCmulRadiusInA:       ld      d,a                         ; d = radius already in a
 871+ CC84 59                                   ld      e,c                         ; e = c (as we only hold 0.8 in bc, i.e. fractional +/- > 0)
 872+ CC85 ED 30                                mul     de                          ; mulitply raidus by c which will be fractional  generating a 8.X value)
 873+ CC87 4A                                   ld      c,d                         ; we only want the whole number, preserving sign in b
 874+ CC88 C9                                   ret
 875+ CC89
 876+ CC89                 ; DEFINE  PlanetDebugLocal 1
 877+ CC89              PlanetDraw:             IFDEF BLINEDEBUG
 878+ CC89 ~                                            call    TestBLINE
 879+ CC89                                      ENDIF
 880+ CC89                                      IFDEF TESTMERIDIAN
 881+ CC89 ~                                            call    TestMeridian
 882+ CC89                                      ENDIF
 883+ CC89                                      IFDEF PlanetDebugLocal
 884+ CC89 ~                                            ZeroA
 885+ CC89 ~                                            ; x 500, y 50, z 2000: 500/7,50/7 =>71,7 => 199,71 Yes
 886+ CC89 ~                                            ; radius becomes 24576/2000 = 12 (13 is good enough yes)
 887+ CC89 ~                                            ld      (P_BnKxsgn),a
 888+ CC89 ~                                            ld      (P_BnKysgn),a
 889+ CC89 ~                                            ld      (P_BnKzsgn),a
 890+ CC89 ~                                            ld      hl, 0
 891+ CC89 ~                                            ld      (P_BnKxlo),hl
 892+ CC89 ~                                            ld      hl,0
 893+ CC89 ~                                            ld      (P_BnKylo),hl
 894+ CC89 ~                                            ld      hl, 1500
 895+ CC89 ~                                            ld      (P_BnKzlo),hl
 896+ CC89 ~                                            ld      hl,$C800
 897+ CC89 ~                                            ld      bc,6144
 898+ CC89 ~                                            ld      de,0
 899+ CC89 ~                                            ld      (P_BnKrotmatNosevX),bc
 900+ CC89 ~                                            ld      (P_BnKrotmatNosevY),de
 901+ CC89 ~                                            ld      (P_BnKrotmatNosevZ),hl
 902+ CC89 ~                                            ld      (P_BnKrotmatRoofvX),de
 903+ CC89 ~                                            ld      (P_BnKrotmatRoofvY),hl
 904+ CC89 ~                                            ld      (P_BnKrotmatRoofvZ),bc
 905+ CC89 ~                                            ld      hl,18432
 906+ CC89 ~                                            ld      bc,$9800
 907+ CC89 ~                                            ld      (P_BnKrotmatSidevX),hl
 908+ CC89 ~                                            ld      (P_BnKrotmatSidevY),de
 909+ CC89 ~                                            ld      (P_BnKrotmatSidevZ),bc
 910+ CC89 ~            ;                                ld      hl, 230
 911+ CC89 ~            ;                                ld      de,100
 912+ CC89 ~            ;                                ld      c,200
 913+ CC89 ~            ;                                ld      b,$FF
 914+ CC89 ~                                            call    ProjectPlanet               ;  Project the planet/sun onto the screen, returning the centre's coordinates in K3(1 0) and K4(1 0)
 915+ CC89 ~                                            call    PlanetCalculateRadius
 916+ CC89 ~
 917+ CC89 ~                                            ld      hl, (P_centreX)
 918+ CC89 ~                                            ld      de,(P_centreY)
 919+ CC89 ~                                            ld      a,(P_Radius)
 920+ CC89 ~                                            ld      c,a
 921+ CC89 ~                                            ld      b,$FF
 922+ CC89 ~                                            MMUSelectLayer2
 923+ CC89 ~                                            call    l2_draw_clipped_circle
 924+ CC89 ~            .DebugMeridian1:                xor     a
 925+ CC89 ~                                            ld      (P_BnKCNT2),a
 926+ CC89 ~                                            ld      hl,(P_centreX)
 926+ CC89 ~               call    TwosCompToLeadingSign
 926+ CC89 ~              ld      (P_BnKCx),hl
 927+ CC89 ~                                            ld      hl,(P_centreY)
 927+ CC89 ~               call    TwosCompToLeadingSign
 927+ CC89 ~              ld      (P_BnKCy),hl
 928+ CC89 ~                                            call    CalcNoseRoofArcTanPI        ; CNT2 =  = arctan(-nosev_z_hi / roofv_z_hi) / 4,  if nosev_z_hi >= 0 add PI
 929+ CC89 ~                                            call    CalcNoseXDivNoseZ
 929+ CC89 ~               call  P_BCmulRadius
 929+ CC89 ~              ld      (P_BnKUx),bc
 930+ CC89 ~                                            call    CalcNoseYDivNoseZ
 930+ CC89 ~               call  P_BCmulRadius
 930+ CC89 ~              ld      (P_BnKUy),bc
 931+ CC89 ~                                            call    CalcRoofXDivRoofZ
 931+ CC89 ~               call  P_BCmulRadius
 931+ CC89 ~              ld      (P_BnKVx),bc
 932+ CC89 ~                                            call    CalcRoofYDivRoofZ
 932+ CC89 ~               call  P_BCmulRadius
 932+ CC89 ~              ld      (P_BnKVy),bc
 933+ CC89 ~
 934+ CC89 ~                                            call    DrawMeridian
 935+ CC89 ~
 936+ CC89 ~            .DebugMeridian2:                xor     a
 937+ CC89 ~                                            ld      (P_BnKCNT2),a
 938+ CC89 ~                                            ld      hl,(P_centreX)
 938+ CC89 ~               call    TwosCompToLeadingSign
 938+ CC89 ~              ld      (P_BnKCx),hl
 939+ CC89 ~                                            ld      hl,(P_centreY)
 939+ CC89 ~               call    TwosCompToLeadingSign
 939+ CC89 ~              ld      (P_BnKCy),hl
 940+ CC89 ~                                            call    CalcNoseRoofArcTanPI        ; CNT2 =  = arctan(-nosev_z_hi / roofv_z_hi) / 4,  if nosev_z_hi >= 0 add PI
 941+ CC89 ~                                            call    CalcNoseXDivNoseZ
 941+ CC89 ~               call  P_BCmulRadius
 941+ CC89 ~              ld      (P_BnKUx),bc
 942+ CC89 ~                                            call    CalcNoseYDivNoseZ
 942+ CC89 ~               call  P_BCmulRadius
 942+ CC89 ~              ld      (P_BnKUy),bc
 943+ CC89 ~                                            call    CalcSideXDivSideZ
 943+ CC89 ~               call  P_BCmulRadius
 943+ CC89 ~              ld      (P_BnKVx),bc
 944+ CC89 ~                                            call    CalcSideYDivSideZ
 944+ CC89 ~               call  P_BCmulRadius
 944+ CC89 ~              ld      (P_BnKVy),bc
 945+ CC89 ~
 946+ CC89 ~                                            call    DrawMeridian
 947+ CC89 ~
 948+ CC89 ~
 949+ CC89 ~
 950+ CC89                                      ENDIF
 951+ CC89 3A 18 C0                             ld      a,(P_BnKzsgn)                ; a = z sign of position
 952+ CC8C A7           .ElimiateBehind:        and     a
 953+ CC8D F8                                   ret     m                           ; if its negative then behind so exit
 954+ CC8E              .TooFarAway:            ReturnIfAGTEusng   48               ; if sign (high byte 2) > 48 then too far away to render
 954+ CC8E FE 30       >                        cp    48
 954+ CC90 D0          >                        ret	 nc
 955+ CC91 21 17 C0                             ld      hl, P_BnKzhi                 ; if |P_BnKzsgn| or P_BnKzsgn are both 0 then the planet is too close so return
 956+ CC94 B6                                   or      (hl)                        ; .
 957+ CC95 C8                                   ret     z                           ; .
 958+ CC96              ;                       loads P_centreX and Y with planet on screen centre
 959+ CC96 CD FF C9     .Project                call    ProjectPlanet               ;  Project the planet/sun onto the screen, returning the centre's coordinates in K3(1 0) and K4(1 0)
 960+ CC99 D8                                   ret     c                           ; If the C flag is set by PROJ then the planet/sun is  not visible on-screen, so return
 961+ CC9A CD A3 CA     .CalcRadius:            call    PlanetCalculateRadius
 962+ CC9D                              IFDEF   PLANETSARESOLID
 963+ CC9D                                      DISPLAY "ASSMEBLING WITH SOLID PLANETS"
 964+ CC9D                                      DISPLAY "TODO, pick colour based on galaxy map"
 965+ CC9D 2A 0C C1                             ld      hl,(P_centreX)
 966+ CCA0 ED 5B 12 C1                          ld      de,(P_centreY)
 967+ CCA4 3A EB C0                             ld      a,(P_Radius)
 968+ CCA7 4F                                   ld      c,a
 969+ CCA8 06 CF                                ld      b,$CF
 970+ CCAA                                      MMUSelectLayer2
 970+ CCAA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 971+ CCAE CD 91 EE                             call    l2_draw_clipped_circle_filled
 972+ CCB1 C9                                   ret
 973+ CCB2
 974+ CCB2                              ELSE
 975+ CCB2 ~
 976+ CCB2 ~                                    DISPLAY "TODO: calculate STP step based on planet size"
 977+ CCB2 ~            ; Note we don't to the planet type check as hitting here its always a planet
 978+ CCB2 ~                                    DISPLAY "TODO:set color green"
 979+ CCB2 ~                                    DISPLAY "TODO:draw circle (do we draw solid??)"
 980+ CCB2 ~                                    ld      hl, (P_centreX)
 981+ CCB2 ~                                    ld      de,(P_centreY)
 982+ CCB2 ~                                    ld      a,(P_Radius)
 983+ CCB2 ~                                    ld      c,a
 984+ CCB2 ~                                    ld      b,$FF
 985+ CCB2 ~                                    MMUSelectLayer2
 986+ CCB2 ~                                    call    l2_draw_clipped_circle
 987+ CCB2 ~                                    DISPLAY "TODO: Add check to see if on screen rather than checkign clipped Circle"
 988+ CCB2 ~                                    ;ret     c                           ; circle failure means exit
 989+ CCB2 ~                                    DISPLAY "DONE: REmoved check for Planet Radius high as its already done win calculate radius"
 990+ CCB2 ~                                    ;ReturnIfMemNotZero    P_RadiusHigh   ; if planet raidus < 256 draw meridians or craters
 991+ CCB2 ~            .DrawFeatures:          ;ld      a,(P_RadiusHigh)
 992+ CCB2 ~                                    ;and     a
 993+ CCB2 ~                                    ;ret     nz
 994+ CCB2 ~                                    DISPLAY "TODO: Need logic to generate Planet Type"
 995+ CCB2 ~            .DetermineFeature:      ld      a,(P_BnKShipType)
 996+ CCB2 ~                                    cp      PlanetTypeMeridian
 997+ CCB2 ~                                    jp      nz,DrawPlanetCrater
 998+ CCB2 ~            DrawPlanetMeridian:     ld      a,(P_Radius)                 ; we only pull low byte as that is all we are interested in
 999+ CCB2 ~            .MinSizeCheck:          ReturnIfALTNusng PlanetMinRadius
1000+ CCB2 ~                                    ld      hl,(P_centreX)
1000+ CCB2 ~               call    TwosCompToLeadingSign
1000+ CCB2 ~              ld      (P_BnKCx),hl
1001+ CCB2 ~                                    ld      hl,(P_centreY)
1001+ CCB2 ~               call    TwosCompToLeadingSign
1001+ CCB2 ~              ld      (P_BnKCy),hl
1002+ CCB2 ~                                    call    CalcNoseRoofArcTanPI        ; CNT2 =  = arctan(-nosev_z_hi / roofv_z_hi) / 4,  if nosev_z_hi >= 0 add PI
1003+ CCB2 ~                                    call    CalcNoseXDivNoseZ
1003+ CCB2 ~               call  P_BCmulRadius
1003+ CCB2 ~              ld      (P_BnKUx),bc
1004+ CCB2 ~                                    call    CalcNoseYDivNoseZ
1004+ CCB2 ~               call  P_BCmulRadius
1004+ CCB2 ~              ld      (P_BnKUy),bc
1005+ CCB2 ~                                    call    CalcRoofXDivRoofZ
1005+ CCB2 ~               call  P_BCmulRadius
1005+ CCB2 ~              ld      (P_BnKVx),bc
1006+ CCB2 ~                                    call    CalcRoofYDivRoofZ
1006+ CCB2 ~               call  P_BCmulRadius
1006+ CCB2 ~              ld      (P_BnKVy),bc
1007+ CCB2 ~                                    DISPLAY "TODO: PCNT2Debug"
1008+ CCB2 ~                                    xor     a
1009+ CCB2 ~                                    ld      (P_BnKCNT2),a
1010+ CCB2 ~                                    call    DrawMeridian                ;--- Drawn first Meridian
1011+ CCB2 ~                                    DISPLAY "TODO: Debug whilst sorting meridain"
1012+ CCB2 ~                                    ret
1013+ CCB2 ~            ;--- Start Second Meridian
1014+ CCB2 ~                                    ld      a,(P_BnKrotmatNosevZ)       ; Set P = -nosev_z_hi
1015+ CCB2 ~                                    xor     SignOnly8Bit                ; .
1016+ CCB2 ~                                    ld      (varP),a                    ; .
1017+ CCB2 ~                                    call    CalcNoseSideArcTanPI        ; CNT2 =  = arctan(-nosev_z_hi / side_z_hi) / 4,  if nosev_z_hi >= 0 add PI
1018+ CCB2 ~                                    ld      hl,(P_centreX)
1018+ CCB2 ~               call    TwosCompToLeadingSign
1018+ CCB2 ~              ld      (P_BnKCx),hl
1019+ CCB2 ~                                    ld      hl,(P_centreY)
1019+ CCB2 ~               call    TwosCompToLeadingSign
1019+ CCB2 ~              ld      (P_BnKCy),hl
1020+ CCB2 ~                                    call    CalcNoseRoofArcTanPI        ; CNT2 =  = arctan(-nosev_z_hi / roofv_z_hi) / 4,  if nosev_z_hi >= 0 add PI
1021+ CCB2 ~                                    call    CalcNoseXDivNoseZ
1021+ CCB2 ~               call  P_BCmulRadius
1021+ CCB2 ~              ld      (P_BnKUx),bc
1022+ CCB2 ~                                    call    CalcNoseYDivNoseZ
1022+ CCB2 ~               call  P_BCmulRadius
1022+ CCB2 ~              ld      (P_BnKUy),bc
1023+ CCB2 ~                                    call    CalcSideXDivSideZ
1023+ CCB2 ~               call  P_BCmulRadius
1023+ CCB2 ~              ld      (P_BnKVx),bc
1024+ CCB2 ~                                    call    CalcSideYDivSideZ
1024+ CCB2 ~               call  P_BCmulRadius
1024+ CCB2 ~              ld      (P_BnKVy),bc
1025+ CCB2 ~                                    DISPLAY "TODO: PCNT2Debug"
1026+ CCB2 ~                                    xor     a
1027+ CCB2 ~                                    ld      (P_BnKCNT2),a
1028+ CCB2 ~                                    jp      DrawMeridian
1029+ CCB2 ~                                    ; implicit ret
1030+ CCB2 ~            DrawPlanetCrater:       ld      a,(P_BnKrotmatRoofvZ+1)      ; a= roofz hi
1031+ CCB2 ~                                    and     a                           ; if its negative, crater is on far size of planet
1032+ CCB2 ~                                    ret     m                           ; .
1033+ CCB2 ~                                    call    Cacl222MulRoofXDivRoofZ     ;  (Y A P) = 222 * roofv_x / z to give the x-coordinate of the crater offset
1034+ CCB2 ~                                    call    CalcCraterCenterX           ;  222 * roofv_x / z + x-coordinate of planet centre
1035+ CCB2 ~                                    call    Cacl222MulRoofYDivRoofZ     ;  (Y A P) = 222 * roofv_y / z to give the x-coordinate of the crater offset
1036+ CCB2 ~                                    call    CalcCraterCenterY           ;  222 * roofv_y / z - y-coordinate of planet centre
1037+ CCB2 ~                                    call    CalcNoseXDivNoseZ           ;  (Y A) = nosev_x / z
1038+ CCB2 ~                                    call    CalcNoseYDivNoseZ           ; (XX16+1 K2+1) = nosev_y / z
1039+ CCB2 ~                                    call    CalcSideYDivSideZ           ;  (Y A) = sidev_y / z
1040+ CCB2 ~                                    srl     a                           ; Set (XX16+3 K2+3) = (Y A) / 2
1041+ CCB2 ~                                    ld      (varK2+3),a                 ; .
1042+ CCB2 ~                                    ld      a,(regY)                    ; (which is also in b to optimise later)
1043+ CCB2 ~                                    ld      (P_XX16+3),a                 ;
1044+ CCB2 ~                                    ld      a,64                        ; Set TGT = 64, so we draw a full ellipse in the call to PLS22 below
1045+ CCB2 ~                                    ld      (P_BnKTGT),a
1046+ CCB2 ~                                    ZeroA
1047+ CCB2 ~                                    ld      (P_BnKCNT2),a                ; Set CNT2 = 0 as we are drawing a full ellipse, so we don't need to apply an offset
1048+ CCB2 ~                                    jp      DrawElipse
1049+ CCB2                              ENDIF
1050+ CCB2
1051+ CCB2
1052+ CCB2              ;PLS2                                                   Test
1053+ CCB2              ; K[10] = radius                                        $0000?
1054+ CCB2              ; k3[10], K4[10] X, y pixel of centre
1055+ CCB2              ; (XX16, K2), (XX16+1,K2+1) u_x , u_y                   $1F80  $FE80
1056+ CCB2              ; (XX16+2, K2+2), (XX16+3,K2+3) z_x , z_y               $0000  $0000
1057+ CCB2              ; TGT - target segment count                            $00
1058+ CCB2              ; CNT2 - starting segment                               $0D
1059+ CCB2              ; Now uses (Word) P_BnKCx, Cy, (Byte) Ux, Uy, Vx, Vy
1060+ CCB2                                      DISPLAY "TODO move code back in that was pulled outof BLINE"
1061+ CCB2 3E 3F        DrawMeridian:           ld      a,63                        ; Set TGT = 31, so we only draw half an ellipse
1062+ CCB4 32 A0 C0                             ld      (P_BnKTGT),a                ; and fall into DrawElipse
1063+ CCB7                                      DISPLAY "TODO DEBUG STP Default of 1"
1064+ CCB7 3E 01                                ld      a,1
1065+ CCB9 32 A1 C0                             ld      (P_BnKSTP),a
1066+ CCBC              ;PLS22
1067+ CCBC                                      DISPLAY "TODO: Sort out sign byte for uxuy vxvy in calling code"
1068+ CCBC              ; Set counter to 0 and reset flags--------------------------
1069+ CCBC              DrawElipse:
1070+ CCBC              .Initialise:            ZeroA
1070+ CCBC AF          >                        xor a
1071+ CCBD 32 D4 C0                             ld      (P_BnKCNT),a                ; Set CNT = 0
1072+ CCC0 32 8E C0                             ld      (P_BnKSinCNT2Sign),a
1073+ CCC3 32 90 C0                             ld      (P_BnKCosCNT2Sign),a
1074+ CCC6 32 92 C0                             ld      (P_BnKUxCosSign),a          ; for debugging later we will just use the cos and sin signs above
1075+ CCC9 32 94 C0                             ld      (P_BnKUyCosSign),a          ; .
1076+ CCCC 32 9A C0                             ld      (P_BnKUxUyCosSign),a        ; .
1077+ CCCF 32 96 C0                             ld      (P_BnKVxSinSign),a          ; .
1078+ CCD2 32 98 C0                             ld      (P_BnKVySinSign),a          ; .
1079+ CCD5 32 99 C0                             ld      (P_BnKVxVySinSign),a        ; .
1080+ CCD8 3D                                   dec     a
1081+ CCD9 32 D7 C0                             ld      (P_BnKFlag),a               ; Set FLAG = &FF to reset the ball line heap in the call to the BLINE routine below
1082+ CCDC              .PLL4:                  ;break
1083+ CCDC 3A D5 C0     .GetSinAngle:           ld      a,(P_BnKCNT2)               ; Set angle = CNT2 mod 32 (was regX)
1084+ CCDF E6 1F                                and     31                          ;
1085+ CCE1              ; Caclulate Sin(CNT2)---------------------------------------;
1086+ CCE1 32 9F C0                             ld      (P_BnKAngle),a              ; save for debugging So P_BnKAngle is the starting segment, reduced to the range 0 to 32, so as there are 64 segments in the circle, this
1087+ CCE4 CD 7A 91     .CalculateSinCNT2:      call    LookupSineA                 ; Set Q = sin(angle)  = sin(CNT2 mod 32) = |sin(CNT2)|
1088+ CCE7 32 9C 7E                             ld      (varQ),a                    ; .
1089+ CCEA 32 8D C0                             ld      (P_BnKSinCNT2),a            ; for debugging
1090+ CCED              ; calculate BnKVxSin = VX*Sin(CNT2)-------------------------;
1091+ CCED 3A 89 C0     .GetVxSin:              ld      a,(P_BnKVx)                 ; Set A = K2+2 = |v_x|
1092+ CCF0 CD CB 8F                             call    AequAmulQdiv256usgn         ; R = A * Q / 256 = |v_x| * |sin(CNT2)|
1093+ CCF3 32 95 C0                             ld      (P_BnKVxSin),a              ; now varR = vx*sin(CNT2)
1094+ CCF6              ; calculate BnkVySin = Vy*Sin(CNT2)-------------------------;
1095+ CCF6 3A 8B C0     .GetVySin:              ld      a,(P_BnKVy)                 ; Set A = K2+3 = |v_y|
1096+ CCF9 CD CB 8F                             call    AequAmulQdiv256usgn         ; Set varK = A * Q / 256 = |v_y| * |sin(CNT2)|
1097+ CCFC 32 97 C0                             ld      (P_BnKVySin),a              ;
1098+ CCFF              ; Now work sign of vx and vy * sin -------------------------; In 6502 below, in z80 C flag is reversed
1099+ CCFF 3A D5 C0     .CalcVxVyMulSinSign:    ld      a,(P_BnKCNT2)               ; If CNT2 >= 33 then this sets the C flag, else clear : C is clear if the segment starts in the first half of the circle, 0 to 180 degrees
1100+ CD02 FE 21                                cp      33                          ;                                                       C is set if the segment starts in the second half of the circle, 180 to 360 degrees
1101+ CD04 DA 15 CD                             jp      c,.NoSignChangeSin          ; in z80 c means < 33 so we don't do sign flip
1102+ CD07 3E 80                                ld      a,$80
1103+ CD09 32 8E C0                             ld      (P_BnKSinCNT2Sign),a        ; save sign of sin CNT2 for debugging
1104+ CD0C 32 96 C0                             ld      (P_BnKVxSinSign),a          ; |v_x| * |sin(CNT2)|
1105+ CD0F 32 98 C0                             ld      (P_BnKVySinSign),a          ; |v_y| * |sin(CNT2)|
1106+ CD12 32 99 C0                             ld      (P_BnKVxVySinSign),a        ; |v_x/y| * |sin(CNT2)|
1107+ CD15              .NoSignChangeSin:
1108+ CD15              ; calculate cos(CNT2)---------------------------------------;
1109+ CD15 3A D5 C0     .CalculateCosCNT2:      ld      a,(P_BnKCNT2)               ; Set X = (CNT2 + 16) mod 32
1110+ CD18 C6 10                                add     a, 16                       ; .
1111+ CD1A E6 1F                                and     31                          ; .
1112+ CD1C 32 9F C0                             ld      (P_BnKAngle),a              ; save for debugging So we can use X as a lookup index into the SNE table to get the cosine (as there are 16 segments in a  quarter-circle)
1113+ CD1F CD 7A 91                             call    LookupSineA                 ; Set Q = sin(X)  = sin((CNT2 + 16) mod 32) = |cos(CNT2)|
1114+ CD22 32 9C 7E                             ld      (varQ),a                    ; .
1115+ CD25 32 8F C0                             ld      (P_BnKCosCNT2),a            ; for debugging
1116+ CD28              ; calculate Uy*Cos(CNT2)------------------------------------;
1117+ CD28 3A 87 C0     .GetUyCos:              ld      a,(P_BnKUy)                 ; Set A = K2+1 = |u_y|
1118+ CD2B CD CB 8F                             call    AequAmulQdiv256usgn         ; Set P_BnKUyCos(wasK+2) = A * Q / 256 = |u_y| * |cos(CNT2)|
1119+ CD2E 32 93 C0                             ld      (P_BnKUyCos),a              ; .
1120+ CD31              ; calculate Ux*Cos(CNT2)------------------------------------;
1121+ CD31 3A 85 C0     .GetUxCos:              ld      a,(P_BnKUx)                 ; Set A = K2 = |u_x|
1122+ CD34 CD CB 8F                             call    AequAmulQdiv256usgn         ; Set P_BnKUxCos(wasP) = A * Q / 256 = |u_x| * |cos(CNT2)| also sets the C flag, so in the following, ADC #15 adds 16 rather than 15 (use use non carry add)
1123+ CD37 32 91 C0                             ld      (P_BnKUxCos),a              ; .
1124+ CD3A              ; now work out sign for cos CNT2----------------------------;
1125+ CD3A 3A D5 C0     .CalcUxUyMulCosSign:    ld      a,(P_BnKCNT2)               ; If (CNT2 + 16) mod 64 >= 33 then this sets the C flag,
1126+ CD3D C6 10                                add     a,16                        ; otherwise it's clear, so this means that:
1127+ CD3F E6 3F                                and     63                          ; .
1128+ CD41 FE 21                                cp      33                          ; c is clear if the segment is 0 to 90 or 270 to 360, we need
1129+ CD43 DA 54 CD                             jp      c,.NoSignChangeCos          ; in z80 c means < 33 so we don't do sign flip
1130+ CD46 3E 80                                ld      a,$80
1131+ CD48 32 90 C0                             ld      (P_BnKCosCNT2Sign),a        ; save sign of sin CNT2 for debugging
1132+ CD4B 32 92 C0                             ld      (P_BnKUxCosSign),a          ; add XX16+5 as the high byte to give us (XX16+5 K) = |v_y| * sin(CNT2) &  (XX16+5 R) = |v_x| * sin(CNT2)
1133+ CD4E 32 94 C0                             ld      (P_BnKUyCosSign),a          ; add XX16+5 as the high byte to give us (XX16+5 K) = |v_y| * sin(CNT2) &  (XX16+5 R) = |v_x| * sin(CNT2)
1134+ CD51 32 9A C0                             ld      (P_BnKUxUyCosSign),a        ; add XX16+5 as the high byte to give us (XX16+5 K) = |v_y| * sin(CNT2) &  (XX16+5 R) = |v_x| * sin(CNT2)
1135+ CD54              .NoSignChangeCos:
1136+ CD54              ; calculate Ux*cos + vx*sin---------------------------------;
1137+ CD54 3A 8E C0     .CalcSignOfVxMulSin:    ld      a,(P_BnKSinCNT2Sign)        ; Set S = the sign of XX16+2 * XX16+5
1138+ CD57 21 8A C0                             ld      hl,P_BnKVxSign              ; = the sign of v_x * XX16+5
1139+ CD5A AE                                   xor     (hl)                        ; .
1140+ CD5B E6 80                                and     $80                         ; so a is only sign bit now
1141+ CD5D 32 96 C0                             ld      (P_BnKVxSinSign),a          ; P_BnKVxSin (was SR) = v_x * sin(CNT2)
1142+ CD60 3A 90 C0     .CalcSignOfUxMulCos:    ld      a,(P_BnKCosCNT2Sign)        ; Set A = the sign of XX16 * XX16+4
1143+ CD63 21 86 C0                             ld      hl,P_BnKUxSign              ; (i.e. sign of u_x * XX16_+4
1144+ CD66 AE                                   xor     (hl)                        ; so (A P) = u_x * cos(CNT2)
1145+ CD67 E6 80                                and     $80                         ; so a is only sign bit now
1146+ CD69 32 92 C0                             ld      (P_BnKUxCosSign),a          ; now P_BnKUxCos
1147+ CD6C 2A 91 C0     .AddUxCosVxSin:         ld      hl,(P_BnKUxCos)             ; Set (A X) = (A P) + (S R)  = u_x * cos(CNT2) + v_x * sin(CNT2) we could work with a but its simpler to jsut reload hl
1148+ CD6F ED 5B 95 C0                          ld      de,(P_BnKVxSin)             ; as R S are next to each other can load as one
1149+ CD73 CD 00 00                             call    AddDEtoHLSigned             ; hl = u_x * cos(CNT2) + v_x * sin(CNT2) format S15 not 2'sc
1150+ CD76 22 9B C0     .DoneAddUxCosVxSin:     ld      (P_BnKUxCosAddVxSin),hl     ;
1151+ CD79              ; calculate -(Uy*cos - vy*sin)------------------------------;
1152+ CD79 3A 8E C0     .CalcSignOfVyMulSin:    ld      a,(P_BnKSinCNT2Sign)        ; Set S = the sign of XX16+2 * XX16+5
1153+ CD7C 21 8C C0                             ld      hl,P_BnKVySign              ; = the sign of v_x * XX16+5
1154+ CD7F AE                                   xor     (hl)                        ; .
1155+ CD80 E6 80                                and     $80                         ; so a is only sign bit now
1156+ CD82 32 98 C0                             ld      (P_BnKVySinSign),a          ; P_BnKVxSin (was SR) = v_x * sin(CNT2)
1157+ CD85 3A 90 C0     .CalcSignOfUyMulCos:    ld      a,(P_BnKCosCNT2Sign)        ; Set A = the sign of XX16 * XX16+4
1158+ CD88 21 88 C0                             ld      hl,P_BnKUySign              ; (i.e. sign of u_x * XX16_+4
1159+ CD8B AE                                   xor     (hl)                        ; so (A P) = u_x * cos(CNT2)
1160+ CD8C E6 80                                and     $80                         ; so a is only sign bit now
1161+ CD8E 32 94 C0                             ld      (P_BnKUyCosSign),a          ; now P_BnKUxCos
1162+ CD91 2A 93 C0     .AddUyCosVySin:         ld      hl,(P_BnKUyCos)             ; Set (A X) = (A P) + (S R)  = u_x * cos(CNT2) + v_x * sin(CNT2) we could work with a but its simpler to jsut reload hl
1163+ CD94 ED 5B 97 C0                          ld      de,(P_BnKVySin)             ; as R S are next to each other can load as one
1164+ CD98 CD 00 00                             call    AddDEtoHLSigned             ; hl = u_x * cos(CNT2) + v_x * sin(CNT2) format S15 not 2'sc
1165+ CD9B 22 9D C0     .DoneAddUyCosVySin:     ld      (P_BnKUyCosSubVySin),hl     ;
1166+ CD9E              ; Calculate NewXPos = Centrey - Uy cos - vy cos (which we still have in hl)
1167+ CD9E              .PL42:
1168+ CD9E ED 5B 83 C0  .CalcNewYPos:           ld      de, (P_BnKCy)               ; Hl is already in HL so de =  Cx
1169+ CDA2 EB                                   ex      hl,de                       ; swap round so we can do hl + de where de is already negated to effect a subtract (probabyl don't don't need this)
1170+ CDA3 7A                                   ld      a,d
1171+ CDA4 EE 80                                xor     $80                         ; now flip bit as its a subtract not add
1172+ CDA6 57                                   ld      d,a
1173+ CDA7 CD D6 CD                             call    ScaleDE75pct
1174+ CDAA CD 00 00                             call    AddDEtoHLSigned             ; hl = cy - ( uy Cos + vy sin)
1175+ CDAD 22 F2 C0                             ld      (P_NewYPos),hl              ; load to new Y Pos
1176+ CDB0 2A 81 C0     .CalcNewXPos:           ld      hl,(P_BnKCx)
1177+ CDB3 ED 5B 9B C0                          ld      de,(P_BnKUxCosAddVxSin)
1178+ CDB7 CD D6 CD                             call    ScaleDE75pct
1179+ CDBA CD 00 00                             call    AddDEtoHLSigned             ; hl = cx - ( ux Cos + vx sin)
1180+ CDBD 22 F0 C0                             ld      (P_NewXPos),hl
1181+ CDC0 CD FB CD     .PL43:                  call    BLINE                       ; hl = TX  draw this segment, updates CNT in A
1182+ CDC3                                      ReturnIfAGTEMemusng P_BnKTGT        ; If CNT > TGT then jump to PL40 to stop drawing the ellipse (which is how we draw half-ellipses)
1182+ CDC3 21 A0 C0    >                        ld      hl,P_BnKTGT
1182+ CDC6 BE          >                        cp      (hl)
1182+ CDC7 D0          >                        ret	    nc
1183+ CDC8 3A D5 C0                             ld      a,(P_BnKCNT2)               ; Set CNT2 = (CNT2 + STP) mod 64
1184+ CDCB 21 A1 C0                             ld      hl,P_BnKSTP                 ; .
1185+ CDCE 86                                   add     a,(hl)                      ; .
1186+ CDCF 32 D5 C0                             ld      (P_BnKCNT2),a               ; .
1187+ CDD2 C3 DC CC                             jp      .PLL4                       ; Jump back to PLL4 to draw the next segment
1188+ CDD5 C9           .PL40:                  ret
1189+ CDD6
1190+ CDD6
1191+ CDD6 EB           ScaleDE75pct:           ex      de,hl
1192+ CDD7 7C                                   ld      a,h
1193+ CDD8 A7                                   and     a
1194+ CDD9 F5                                   push    af
1195+ CDDA F2 E0 CD                             jp      p,.PositiveHL
1196+ CDDD E6 7F        .NegativeHL:            and     $7F
1197+ CDDF 67                                   ld      h,a
1198+ CDE0 D5           .PositiveHL:            push    de
1199+ CDE1 54 5D                                ld      de,hl
1200+ CDE3 29                                   add     hl,hl                       ; * 2
1201+ CDE4 19                                   add     hl,de
1202+ CDE5 D1                                   pop     de
1203+ CDE6                                      ShiftHLRight1
1203+ CDE6 CB 3C       >			   srl h
1203+ CDE8 CB 1D       >			   rr  l
1204+ CDEA                                      ShiftHLRight1
1204+ CDEA CB 3C       >			   srl h
1204+ CDEC CB 1D       >			   rr  l
1205+ CDEE EB           CheckSign:              ex      de,hl
1206+ CDEF F1                                   pop     af
1207+ CDF0 A7                                   and     a
1208+ CDF1 F0                                   ret     p
1209+ CDF2 7C                                   ld      a,h
1210+ CDF3 F6 80                                or      $80
1211+ CDF5 67                                   ld      h,a
1212+ CDF6 C9                                   ret
1213+ CDF7
1214+ CDF7              ;  Draw a single segment of a circle, adding the point to the ball line heap.
1215+ CDF7              ;  Arguments:
1216+ CDF7              ;   CNT                  The number of this segment
1217+ CDF7              ;   STP                  The step size for the circle
1218+ CDF7              ;   K6(1 0)              The x-coordinate of the new point on the circle, as a screen coordinate
1219+ CDF7              ;   P_New Pos-- (T X)                The y-coordinate of the new point on the circle, as an offset from the centre of the circle
1220+ CDF7              ;   FLAG                 Set to &FF for the first call, so it sets up the first point in the heap but waits until the second call before drawing anything (as we need two points, i.e. two calls, before we can draw a line)
1221+ CDF7              ;   -- Not UsedK                    The circle's radius
1222+ CDF7              ;   -- Not UsedK3(1 0)              Pixel x-coordinate of the centre of the circle
1223+ CDF7              ;   -- Not UsedK4(1 0)              Pixel y-coordinate of the centre of the circle
1224+ CDF7              ;   P_PrevXPos--K5(1 0)              Screen x-coordinate of the previous point added to the ball line heap (if this is not the first point)
1225+ CDF7              ;   P_PrevYPos--K5(3 2)              Screen y-coordinate of the previous point added to the ball line heap (if this is not the first point)
1226+ CDF7              ;   SWAP                 If non-zero, we swap (X1, Y1) and (X2, Y2)
1227+ CDF7              ; Returns:
1228+ CDF7              ;   CNT                  CNT is updated to CNT + STP
1229+ CDF7              ;   A                    The new value of CNT
1230+ CDF7              ;   P_PrevXPos --K5(1 0)              Screen x-coordinate of the point that we just added to the ball line heap
1231+ CDF7              ;   P_PrevYPos--K5(3 2)              Screen y-coordinate of the point that we just added to the ball line heap
1232+ CDF7              ;   FLAG                 Set to 0`
1233+ CDF7              ; ** THIS NEEDS CHANGING TO IMMEDIATE DRAW and retain last line end pos) ;
1234+ CDF7              ; Flow of code
1235+ CDF7              ; Entry Bline, prepare T , X K4 etc
1236+ CDF7              ;       BL1
1237+ CDF7 00           PLINEx1                 DB 0
1238+ CDF8 00           PLINEy1                 DB 0
1239+ CDF9 00           PLINEx2                 DB 0
1240+ CDFA 00           PLINEy2                 DB 0
1241+ CDFB
1242+ CDFB                                      IFDEF MERIDANLINEDEBUG
1243+ CDFB ~            ; Store X and Y on plot line (ball) heap, values bc = YX to save, a = offset
1244+ CDFB ~            P_StoreXYOnHeap:        ld      hl,P_BnKPlotXHeap
1245+ CDFB ~                                    ld      bc,(P_NewXPos)
1246+ CDFB ~                                    ld      de,(P_NewYPos)      ; now save Y
1247+ CDFB ~                                    ld      a,(P_BnKPlotIndex)  ; get off set
1248+ CDFB ~                                    add     hl,a                ; now we have x heap target
1249+ CDFB ~                                    ld      (hl),b
1250+ CDFB ~                                    inc     hl
1251+ CDFB ~                                    ld      (hl),c
1252+ CDFB ~                                    ld      a, $80 - 1          ; note its 2 bytes per coord element, we have already incremeted by 1 byte
1253+ CDFB ~                                    add     hl,a
1254+ CDFB ~                                    ld      (hl),d
1255+ CDFB ~                                    inc     hl
1256+ CDFB ~                                    ld      (hl),e
1257+ CDFB ~                                    ld      a,(P_BnKPlotIndex)  ; get index back
1258+ CDFB ~                                    inc     a                   ; move on 2 bytes
1259+ CDFB ~                                    inc     a                   ; .
1260+ CDFB ~                                    ld      (P_BnKPlotIndex),a  ; and save it
1261+ CDFB ~                                    ret
1262+ CDFB                                      ENDIF
1263+ CDFB
1264+ CDFB              ; We'll move the calculation of absolute screen pos outside of bline so we expect screen pixel coordinates
1265+ CDFB              BLINE:                  ;ld      a,(P_Tvar)          ; entry point if we need to fetch TX
1266+ CDFB                                      ;ld      h,a
1267+ CDFB                                      ;ld      a,(P_Xreg)
1268+ CDFB                                      ;ld      l,a
1269+ CDFB              BLINE_HL:               ;ld      de,(P_varK4)        ; Set K6(3 2) = (T X) + K4(1 0) = y-coord of centre + y-coord of new point
1270+ CDFB                                      ;ex      de,hl               ;not really needed
1271+ CDFB                                      ;ClearCarryFlag              ; .
1272+ CDFB                                      ;adc     hl,de               ; .
1273+ CDFB                                      ;ld      a,h
1274+ CDFB                                      ;ld      (P_varK6p2),hl      ; so K6(3 2) now contains the y-coordinate of the new point on the circle but as a screen coordinate, to go along with the screen y-coordinate in K6(1 0)
1275+ CDFB 3A D7 C0                             ld      a,(P_BnKFlag)       ; If FLAG = 0, jump down to BL1, else its FF so we save first point
1276+ CDFE A7                                   and     a                   ; .
1277+ CDFF CA 09 CE                             jp      z,.BL1              ; .
1278+ CE02              .FirstPlot:
1279+ CE02              ; This code now stores on line heap if debugging is enabled else it just stores in Prev X and Y for direct plotting
1280+ CE02              ; First time in we are just establinshign first position point, then we can exit
1281+ CE02 3C           .BL5:                   inc     a                   ; Flag is &FF so this is the first call to BLINE so increment FLAG to set it to 0
1282+ CE03 32 D7 C0                             ld      (P_BnKFlag),a       ; so we just save the first point and don't plot it
1283+ CE06                                      DISPLAY "TODO, set up proper variables, hold variables for previous X Y, we don't need ball heap"
1284+ CE06                                      DISPLAY "TODO, created a plot xy heap to store for debugging purposes, delete once not needed"
1285+ CE06                                      DISPLAY "TODO, need flag for start which is probably CNT being 0?"
1286+ CE06                                      IFDEF   MERIDANLINEDEBUG
1287+ CE06 ~                                    ZeroA
1288+ CE06 ~                                    ld      (P_BnKPlotIndex),a  ; Initialise line list
1289+ CE06                                      ENDIF
1290+ CE06              ; We don't need to copy to prev here as we do it in BL7
1291+ CE06 C3 37 CE                             jp      .SkipFirstPlot      ; Jump to BL7 to tidy up and return from the subroutine
1292+ CE09              ; This section performs teh clipping and draw of the line. it retrieves previous position and draws to new
1293+ CE09              .BL1:
1294+ CE09              ; note we still need the unclipped points for the next segment as we have to clip again
1295+ CE09                                      ;ld      hl,(PLINEx1)        ; Otherwise the coordinates were swapped by the call to
1296+ CE09                                      ;ld      de,(PLINEx2)        ; LL145 above, so we swap (X1, Y1) and (X2, Y2) back
1297+ CE09                                      ;ld      (PLINEx1),de        ; again
1298+ CE09                                      ;ld      (PLINEx2),hl        ; .
1299+ CE09              .BL9:                   DISPLAY "TODO  Removed BnKLSP, check fine"
1300+ CE09              .BL8:                   DISPLAY "TODO  Removed BnKLSP, check fine"
1301+ CE09                                      ;ld      a,(P_BnKPlotIndex) ; Set Line Stack Pointer to be the same as Plot Index)
1302+ CE09                                      ;ld      (P_BnKLSP),a
1303+ CE09 2A EC C0                             ld      hl,(P_PrevXPos)     ; set line X2 to PLINEx2
1304+ CE0C 22 F7 C0                             ld      (P_XX1510),hl
1305+ CE0F 2A EE C0                             ld      hl,(P_PrevYPos)     ; set line X2 to PLINEx2
1306+ CE12 22 F9 C0                             ld      (P_XX1532),hl
1307+ CE15 2A F0 C0                             ld      hl,(P_NewXPos)      ; set line X2 to PLINEx2
1308+ CE18 22 FB C0                             ld      (P_XX1554),hl
1309+ CE1B 2A F2 C0                             ld      hl,(P_NewYPos)      ; set line X2 to PLINEx2
1310+ CE1E 22 FD C0                             ld      (P_XX1210),hl
1311+ CE21 CD 0A C3     .CLipLine:              call    P_LL145_6502        ; Clip  line from (X1, Y1) to (X2, Y2), loads to X1,Y1,X2,Y2 P_XX1510 as bytes                        ld      bc,(XX1510)
1312+ CE24 38 11                                jr      c,.LineTotallyClipped
1313+ CE26                                      DISPLAY "TODO what was the Ld de for?"
1314+ CE26              ;                        ld      de,(XX1532)
1315+ CE26                                      DISPLAY "TODO SORT OUT PROPER PLANET COLOR"
1316+ CE26 3E CC        .DrawLine:              ld      a,$CC
1317+ CE28 ED 4B F7 C0                          ld      bc,(P_XX15PlotX1)
1318+ CE2C ED 5B F9 C0                          ld      de,(P_XX15PlotX2)
1319+ CE30                                      MMUSelectLayer2
1319+ CE30 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1320+ CE34 CD A7 F5                             call    l2_draw_any_line
1321+ CE37                                      DISPLAY "TODO removed check for starting line segments again as we draw direct"
1322+ CE37              ;                        ld      a,(P_XX13)          ; If XX13 is non-zero, jump up to BL5 to add a &FF marker to the end of the line heap. XX13 is non-zero
1323+ CE37              ;                        and     a                   ; after the call to the clipping routine LL145 above if the end of the line was clipped, meaning the next line
1324+ CE37              ;                        jp      z,.BL5              ; sent to BLINE can't join onto the end but has to start a new segment, and that's what inserting the &FF marker does
1325+ CE37              ; if line was totally clipped just store new x and y as previous and continue from there
1326+ CE37              .SkipFirstPlot:
1327+ CE37              .LineTotallyClipped:
1328+ CE37 2A F0 C0     .BL7:                   ld      hl,(P_NewXPos)        ; Copy the data for this step point from K6(3 2 1 0)
1329+ CE3A ED 5B F2 C0                          ld      de,(P_NewYPos)        ; into K5(3 2 1 0), for use in the next call to BLINE:
1330+ CE3E 22 EC C0                             ld      (P_PrevXPos),hl
1331+ CE41 ED 53 EE C0                          ld      (P_PrevYPos),de
1332+ CE45                                      IFDEF   MERIDANLINEDEBUG
1333+ CE45 ~                                    call    P_StoreXYOnHeap
1334+ CE45                                      ENDIF
1335+ CE45              ;                        ld      (P_varK5),hl        ; * K5(1 0)(3 2) = x, y of previous point
1336+ CE45              ;                        ld      (P_varK5p2),de      ;
1337+ CE45 3A D4 C0                             ld      a,(P_BnKCNT)         ; CNT = CNT + STP
1338+ CE48 21 A1 C0                             ld      hl,P_BnKSTP
1339+ CE4B                                      ClearCarryFlag
1339+ CE4B B7          >                        or a
1340+ CE4C 8E                                   adc     a,(hl)
1341+ CE4D 32 D4 C0                             ld      (P_BnKCNT),a
1342+ CE50 C9                                   ret
1343+ CE51
1344+ CE51              PlanetBankSize  EQU $ - StartOfPlanet
1345+ CE51
1346+ CE51
# file closed: ./Universe/Planet/planet_data.asm
1569  CE51                                  DISPLAY "Bank ",BankPlanetData," - Bytes free ",/D, $2000 - ($-PlanetBankAddr), " - BankPlanetData"
1570  CE51                                  ASSERT $-PlanetBankAddr <8912, Bank code leaks over 8K boundary
1571  CE51              ;;;***; Bank 85  ------------------------------------------------------------------------------------------------------------------------
1572  CE51              ;;;***                        SLOT    SpriteDataAAddr
1573  CE51              ;;;***                        PAGE    BankSpriteDataA
1574  CE51              ;;;***                        ORG     SpriteDataAAddr, BankSpriteDataA
1575  CE51              ;;;***                        INCLUDE "./Layer3Sprites/sprite_loadA.asm"
1576  CE51              ;;;***                        INCLUDE "./Layer3Sprites/SpriteSheetA.asm"
1577  CE51              ;;;***                        DISPLAY "Bank ",BankSpriteDataA," - Bytes free ",/D, $2000 - ($-SpriteDataAAddr), " - BankSpriteDataA"
1578  CE51              ;;;***; Bank 86  ------------------------------------------------------------------------------------------------------------------------
1579  CE51              ;;;***                        SLOT    SpriteDataBAddr
1580  CE51              ;;;***                        PAGE    BankSpriteDataB
1581  CE51              ;;;***                        ORG     SpriteDataBAddr, BankSpriteDataB
1582  CE51              ;;;***                        INCLUDE "./Layer3Sprites/sprite_loadB.asm"
1583  CE51              ;;;***                        INCLUDE "./Layer3Sprites/SpriteSheetB.asm"
1584  CE51              ;;;***                        DISPLAY "Bank ",BankSpriteDataB," - Bytes free ",/D, $2000 - ($-SpriteDataBAddr), " - BankSpriteDataB"
1585  CE51              ; Bank 91  ------------------------------------------------------------------------------------------------------------------------
1586  CE51                                  SLOT    GalaxyDataAddr
1587  CE51                                  PAGE    BankGalaxyData0
1588  CE51                                  ORG GalaxyDataAddr, BankGalaxyData0
1589  E000                                  INCLUDE "./Universe/Galaxy/galaxy_data.asm"
# file opened: ./Universe/Galaxy/galaxy_data.asm
   1+ E000 47 61 6C 61  galaxy_page_marker  DB "Galaxy      PG9"
   1+ E004 78 79 20 20
   1+ E008 20 20 20 20
   1+ E00C 50 47 39
   2+ E00F 30           galaxy_pg_cnt       DB "0"
   3+ E010 00 00 00...  galaxy_master_seed  DS 6
   4+ E016 00 00 00...  galaxy_data DS 8*256
   5+ E816 2D 2D 2D 2D  galaxy_code_end DB "-----------------------------------------------------------------"
   5+ E81A 2D 2D 2D 2D
   5+ E81E 2D 2D 2D 2D
   5+ E822 2D 2D 2D 2D
   5+ E826 2D 2D 2D 2D
   5+ E82A 2D 2D 2D 2D
   5+ E82E 2D 2D 2D 2D
   5+ E832 2D 2D 2D 2D
   5+ E836 2D 2D 2D 2D
   5+ E83A 2D 2D 2D 2D
   5+ E83E 2D 2D 2D 2D
   5+ E842 2D 2D 2D 2D
   5+ E846 2D 2D 2D 2D
   5+ E84A 2D 2D 2D 2D
   5+ E84E 2D 2D 2D 2D
   5+ E852 2D 2D 2D 2D
   5+ E856 2D
   6+ E857 00 00        GalaxyPresentSystem:     DW 0
   7+ E859 00 00        GalaxyDestinationSystem: DW 0
   8+ E85B 00 00        GalaxyTargetSystem:      DW 0
   9+ E85D              ; including a DB 0 as a catcher
  10+ E85D 00           GalaxySearchLength:      DB 0
  11+ E85E 00 00 00...  GalaxySearchString:      DS 32
  12+ E87E 00                                    DB 0
  13+ E87F 00 00 00...  GalaxyExpandedName:      DS 32
  14+ E89F 00                                    DB 0
  15+ E8A0 41 42 4F 55  GalaxyName_digrams	     DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION"
  15+ E8A4 53 45 49 54
  15+ E8A8 49 4C 45 54
  15+ E8AC 53 54 4F 4E
  15+ E8B0 4C 4F 4E 55
  15+ E8B4 54 48 4E 4F
  15+ E8B8 41 4C 4C 45
  15+ E8BC 58 45 47 45
  15+ E8C0 5A 41 43 45
  15+ E8C4 42 49 53 4F
  15+ E8C8 55 53 45 53
  15+ E8CC 41 52 4D 41
  15+ E8D0 49 4E 44 49
  15+ E8D4 52 45 41 3F
  15+ E8D8 45 52 41 54
  15+ E8DC 45 4E 42 45
  15+ E8E0 52 41 4C 41
  15+ E8E4 56 45 54 49
  15+ E8E8 45 44 4F 52
  15+ E8EC 51 55 41 4E
  15+ E8F0 54 45 49 53
  15+ E8F4 52 49 4F 4E
  16+ E8F8 00 00 00...  GalaxyWorkingSeed        DS 6
  17+ E8FE 00 00 00...  GalaxyNamingSeed         DS 6
  18+ E904 00 00 00...  GalaxySavedRandomSeed    DS 6
  19+ E90A
  20+ E90A 00           GalaxyDisplayGovernment         DB 0
  21+ E90B 00           GalaxyDisplayEconomy            DB 0
  22+ E90C 00           GalaxyDisplayTekLevel           DB 0
  23+ E90D 00           GalaxyDisplayPopulation         DB 0
  24+ E90E 00 00        GalaxyDisplayProductivity       DW 0
  25+ E910 00 00        GalaxyDisplayRadius             DW 0
  26+ E912
  27+ E912 66 61 62 6C  GalaxyDescList01A       DB "fabled",0
  27+ E916 65 64 00
  28+ E919 6E 6F 74 61  GalaxyDescList01B       DB "notable",0
  28+ E91D 62 6C 65 00
  29+ E921 77 65 6C 6C  GalaxyDescList01C       DB "well known",0
  29+ E925 20 6B 6E 6F
  29+ E929 77 6E 00
  30+ E92C 66 61 6D 6F  GalaxyDescList01D       DB "famous",0
  30+ E930 75 73 00
  31+ E933 6E 6F 74 65  GalaxyDescList01E       DB "noted",0
  31+ E937 64 00
  32+ E939 76 65 72 79  GalaxyDescList02A       DB "very",0
  32+ E93D 00
  33+ E93E 6D 69 6C 64  GalaxyDescList02B       DB "mildly",0
  33+ E942 6C 79 00
  34+ E945 6D 6F 73 74  GalaxyDescList02C       DB "most",0
  34+ E949 00
  35+ E94A 72 65 61 73  GalaxyDescList02D       DB "reasonably",0
  35+ E94E 6F 6E 61 62
  35+ E952 6C 79 00
  36+ E955 00           GalaxyDescList02E       DB 0
  37+ E956 61 6E 63 69  GalaxyDescList03A       DB "ancient",0
  37+ E95A 65 6E 74 00
  38+ E95E 3C 32 30 3E  GalaxyDescList03B       DB "<20>",0
  38+ E962 00
  39+ E963 67 72 65 61  GalaxyDescList03C       DB "great",0
  39+ E967 74 00
  40+ E969 76 61 73 74  GalaxyDescList03D       DB "vast",0
  40+ E96D 00
  41+ E96E 70 69 6E 6B  GalaxyDescList03E       DB "pink",0
  41+ E972 00
  42+ E973 3C 32 39 3E  GalaxyDescList04A       DB "<29> <28> plantations",0
  42+ E977 20 3C 32 38
  42+ E97B 3E 20 70 6C
  42+ E97F 61 6E 74 61
  42+ E983 74 69 6F 6E
  42+ E987 73 00
  43+ E989 6D 6F 75 6E  GalaxyDescList04B       DB "mountains",0
  43+ E98D 74 61 69 6E
  43+ E991 73 00
  44+ E993 3C 32 37 3E  GalaxyDescList04C       DB "<27>",0
  44+ E997 00
  45+ E998 3C 31 39 3E  GalaxyDescList04D       DB "<19> forests",0
  45+ E99C 20 66 6F 72
  45+ E9A0 65 73 74 73
  45+ E9A4 00
  46+ E9A5 6F 63 65 61  GalaxyDescList04E       DB "oceans",0
  46+ E9A9 6E 73 00
  47+ E9AC 73 68 79 6E  GalaxyDescList05A       DB "shyness",0
  47+ E9B0 65 73 73 00
  48+ E9B4 73 69 6C 6C  GalaxyDescList05B       DB "silliness",0
  48+ E9B8 69 6E 65 73
  48+ E9BC 73 00
  49+ E9BE 6D 61 74 69  GalaxyDescList05C       DB "mating traditions",0
  49+ E9C2 6E 67 20 74
  49+ E9C6 72 61 64 69
  49+ E9CA 74 69 6F 6E
  49+ E9CE 73 00
  50+ E9D0 6C 6F 61 74  GalaxyDescList05D       DB "loathing of <5>",0
  50+ E9D4 68 69 6E 67
  50+ E9D8 20 6F 66 20
  50+ E9DC 3C 35 3E 00
  51+ E9E0 6C 6F 76 65  GalaxyDescList05E       DB "love for <5>",0
  51+ E9E4 20 66 6F 72
  51+ E9E8 20 3C 35 3E
  51+ E9EC 00
  52+ E9ED 66 6F 6F 64  GalaxyDescList06A       DB "food blenders",0
  52+ E9F1 20 62 6C 65
  52+ E9F5 6E 64 65 72
  52+ E9F9 73 00
  53+ E9FB 74 6F 75 72  GalaxyDescList06B       DB "tourists",0
  53+ E9FF 69 73 74 73
  53+ EA03 00
  54+ EA04 70 6F 65 74  GalaxyDescList06C       DB "poetry",0
  54+ EA08 72 79 00
  55+ EA0B 64 69 73 63  GalaxyDescList06D       DB "discos",0
  55+ EA0F 6F 73 00
  56+ EA12 3C 31 33 3E  GalaxyDescList06E       DB "<13>",0
  56+ EA16 00
  57+ EA17 74 61 6C 6B  GalaxyDescList07A       DB "talking tree",0
  57+ EA1B 69 6E 67 20
  57+ EA1F 74 72 65 65
  57+ EA23 00
  58+ EA24 63 72 61 62  GalaxyDescList07B       DB "crab",0
  58+ EA28 00
  59+ EA29 62 61 74 00  GalaxyDescList07C       DB "bat",0
  60+ EA2D 6C 6F 62 73  GalaxyDescList07D       DB "lobst",0
  60+ EA31 74 00
  61+ EA33 25 52 00     GalaxyDescList07E       DB "%R",0
  62+ EA36 62 65 73 65  GalaxyDescList08A       DB "beset",0
  62+ EA3A 74 00
  63+ EA3C 70 6C 61 67  GalaxyDescList08B       DB "plagued",0
  63+ EA40 75 65 64 00
  64+ EA44 72 61 76 61  GalaxyDescList08C       DB "ravaged",0
  64+ EA48 67 65 64 00
  65+ EA4C 63 75 72 73  GalaxyDescList08D       DB "cursed",0
  65+ EA50 65 64 00
  66+ EA53 73 63 6F 75  GalaxyDescList08E       DB "scourged",0
  66+ EA57 72 67 65 64
  66+ EA5B 00
  67+ EA5C 3C 32 31 3E  GalaxyDescList09A       DB "<21> civil war",0
  67+ EA60 20 63 69 76
  67+ EA64 69 6C 20 77
  67+ EA68 61 72 00
  68+ EA6B 3C 32 36 3E  GalaxyDescList09B       DB "<26> <23> <24>s",0
  68+ EA6F 20 3C 32 33
  68+ EA73 3E 20 3C 32
  68+ EA77 34 3E 73 00
  69+ EA7B 61 20 3C 32  GalaxyDescList09C       DB "a <26> disease",0
  69+ EA7F 36 3E 20 64
  69+ EA83 69 73 65 61
  69+ EA87 73 65 00
  70+ EA8A 3C 32 31 3E  GalaxyDescList09D       DB "<21> earthquakes",0
  70+ EA8E 20 65 61 72
  70+ EA92 74 68 71 75
  70+ EA96 61 6B 65 73
  70+ EA9A 00
  71+ EA9B 3C 32 31 3E  GalaxyDescList09E       DB "<21> solar activity",0
  71+ EA9F 20 73 6F 6C
  71+ EAA3 61 72 20 61
  71+ EAA7 63 74 69 76
  71+ EAAB 69 74 79 00
  72+ EAAF 69 74 73 20  GalaxyDescList10A       DB "its <2> <3>",0
  72+ EAB3 3C 32 3E 20
  72+ EAB7 3C 33 3E 00
  73+ EABB 74 68 65 20  GalaxyDescList10B       DB "the %I <23> <24>",0
  73+ EABF 25 49 20 3C
  73+ EAC3 32 33 3E 20
  73+ EAC7 3C 32 34 3E
  73+ EACB 00
  74+ EACC 69 74 73 20  GalaxyDescList10C       DB "its inhabitants' <25> <4>",0
  74+ EAD0 69 6E 68 61
  74+ EAD4 62 69 74 61
  74+ EAD8 6E 74 73 27
  74+ EADC 20 3C 32 35
  74+ EAE0 3E 20 3C 34
  74+ EAE4 3E 00
  75+ EAE6 3C 33 32 3E  GalaxyDescList10D       DB "<32>",0
  75+ EAEA 00
  76+ EAEB 69 74 73 20  GalaxyDescList10E       DB "its <12> <13>",0
  76+ EAEF 3C 31 32 3E
  76+ EAF3 20 3C 31 33
  76+ EAF7 3E 00
  77+ EAF9 6A 75 69 63  GalaxyDescList11A       DB "juice",0
  77+ EAFD 65 00
  78+ EAFF 62 72 61 6E  GalaxyDescList11B       DB "brandy",0
  78+ EB03 64 79 00
  79+ EB06 77 61 74 65  GalaxyDescList11C       DB "water",0
  79+ EB0A 72 00
  80+ EB0C 62 72 65 77  GalaxyDescList11D       DB "brew",0
  80+ EB10 00
  81+ EB11 67 61 72 67  GalaxyDescList11E       DB "gargle blasters",0
  81+ EB15 6C 65 20 62
  81+ EB19 6C 61 73 74
  81+ EB1D 65 72 73 00
  82+ EB21 25 52 00     GalaxyDescList12A       DB "%R",0
  83+ EB24 25 49 20 3C  GalaxyDescList12B       DB "%I <24>",0
  83+ EB28 32 34 3E 00
  84+ EB2C 25 49 20 25  GalaxyDescList12C       DB "%I %R",0
  84+ EB30 52 00
  85+ EB32 25 49 20 3C  GalaxyDescList12D       DB "%I <26>",0
  85+ EB36 32 36 3E 00
  86+ EB3A 3C 32 36 3E  GalaxyDescList12E       DB "<26> %R",0
  86+ EB3E 20 25 52 00
  87+ EB42 66 61 62 75  GalaxyDescList13A       DB "fabulous",0
  87+ EB46 6C 6F 75 73
  87+ EB4A 00
  88+ EB4B 65 78 6F 74  GalaxyDescList13B       DB "exotic",0
  88+ EB4F 69 63 00
  89+ EB52 68 6F 6F 70  GalaxyDescList13C       DB "hoopy",0
  89+ EB56 79 00
  90+ EB58 75 6E 75 73  GalaxyDescList13D       DB "unusual",0
  90+ EB5C 75 61 6C 00
  91+ EB60 65 78 63 69  GalaxyDescList13E       DB "exciting",0
  91+ EB64 74 69 6E 67
  91+ EB68 00
  92+ EB69 63 75 69 73  GalaxyDescList14A       DB "cuisine",0
  92+ EB6D 69 6E 65 00
  93+ EB71 6E 69 67 68  GalaxyDescList14B       DB "night life",0
  93+ EB75 74 20 6C 69
  93+ EB79 66 65 00
  94+ EB7C 63 61 73 69  GalaxyDescList14C       DB "casinos",0
  94+ EB80 6E 6F 73 00
  95+ EB84 73 69 74 20  GalaxyDescList14D       DB "sit coms",0
  95+ EB88 63 6F 6D 73
  95+ EB8C 00
  96+ EB8D 20 3C 33 32  GalaxyDescList14E       DB " <32> ",0
  96+ EB91 3E 20 00
  97+ EB94 25 48 00     GalaxyDescList15A       DB "%H",0
  98+ EB97 54 68 65 20  GalaxyDescList15B       DB "The planet %H",0
  98+ EB9B 70 6C 61 6E
  98+ EB9F 65 74 20 25
  98+ EBA3 48 00
  99+ EBA5 54 68 65 20  GalaxyDescList15C       DB "The world %H",0
  99+ EBA9 77 6F 72 6C
  99+ EBAD 64 20 25 48
  99+ EBB1 00
 100+ EBB2 54 68 69 73  GalaxyDescList15D       DB "This planet",0
 100+ EBB6 20 70 6C 61
 100+ EBBA 6E 65 74 00
 101+ EBBE 54 68 69 73  GalaxyDescList15E       DB "This world",0
 101+ EBC2 20 77 6F 72
 101+ EBC6 6C 64 00
 102+ EBC9 6E 20 75 6E  GalaxyDescList16A       DB "n unremarkable",0
 102+ EBCD 72 65 6D 61
 102+ EBD1 72 6B 61 62
 102+ EBD5 6C 65 00
 103+ EBD8 20 62 6F 72  GalaxyDescList16B       DB " boring",0
 103+ EBDC 69 6E 67 00
 104+ EBE0 20 64 75 6C  GalaxyDescList16C       DB " dull",0
 104+ EBE4 6C 00
 105+ EBE6 20 74 65 64  GalaxyDescList16D       DB " tedious",0
 105+ EBEA 69 6F 75 73
 105+ EBEE 00
 106+ EBEF 20 72 65 76  GalaxyDescList16E       DB " revolting",0
 106+ EBF3 6F 6C 74 69
 106+ EBF7 6E 67 00
 107+ EBFA 70 6C 61 6E  GalaxyDescList17A       DB "planet",0
 107+ EBFE 65 74 00
 108+ EC01 77 6F 72 6C  GalaxyDescList17B       DB "world",0
 108+ EC05 64 00
 109+ EC07 70 6C 61 63  GalaxyDescList17C       DB "place",0
 109+ EC0B 65 00
 110+ EC0D 6C 69 74 74  GalaxyDescList17D       DB "little planet",0
 110+ EC11 6C 65 20 70
 110+ EC15 6C 61 6E 65
 110+ EC19 74 00
 111+ EC1B 64 75 6D 70  GalaxyDescList17E       DB "dump",0
 111+ EC1F 00
 112+ EC20 77 61 73 70  GalaxyDescList18A       DB "wasp",0
 112+ EC24 00
 113+ EC25 6D 6F 74 68  GalaxyDescList18B       DB "moth",0
 113+ EC29 00
 114+ EC2A 67 72 75 62  GalaxyDescList18C       DB "grub",0
 114+ EC2E 00
 115+ EC2F 61 6E 74 00  GalaxyDescList18D       DB "ant",0
 116+ EC33 25 52 00     GalaxyDescList18E       DB "%R",0
 117+ EC36 70 6F 65 74  GalaxyDescList19A       DB "poet",0
 117+ EC3A 00
 118+ EC3B 61 72 74 73  GalaxyDescList19B       DB "arts graduate",0
 118+ EC3F 20 67 72 61
 118+ EC43 64 75 61 74
 118+ EC47 65 00
 119+ EC49 79 61 6B 00  GalaxyDescList19C       DB "yak",0
 120+ EC4D 73 6E 61 69  GalaxyDescList19D       DB "snail",0
 120+ EC51 6C 00
 121+ EC53 73 6C 75 67  GalaxyDescList19E       DB "slug",0
 121+ EC57 00
 122+ EC58 74 72 6F 70  GalaxyDescList20A       DB "tropical",0
 122+ EC5C 69 63 61 6C
 122+ EC60 00
 123+ EC61 64 65 6E 73  GalaxyDescList20B       DB "dense",0
 123+ EC65 65 00
 124+ EC67 72 61 69 6E  GalaxyDescList20C       DB "rain",0
 124+ EC6B 00
 125+ EC6C 69 6D 70 65  GalaxyDescList20D       DB "impenetrable",0
 125+ EC70 6E 65 74 72
 125+ EC74 61 62 6C 65
 125+ EC78 00
 126+ EC79 65 78 75 62  GalaxyDescList20E       DB "exuberant",0
 126+ EC7D 65 72 61 6E
 126+ EC81 74 00
 127+ EC83 66 75 6E 6E  GalaxyDescList21A       DB "funny",0
 127+ EC87 79 00
 128+ EC89 77 69 65 72  GalaxyDescList21B       DB "wierd",0
 128+ EC8D 64 00
 129+ EC8F 75 6E 75 73  GalaxyDescList21C       DB "unusual",0
 129+ EC93 75 61 6C 00
 130+ EC97 73 74 72 61  GalaxyDescList21D       DB "strange",0
 130+ EC9B 6E 67 65 00
 131+ EC9F 70 65 63 75  GalaxyDescList21E       DB "peculiar",0
 131+ ECA3 6C 69 61 72
 131+ ECA7 00
 132+ ECA8 66 72 65 71  GalaxyDescList22A       DB "frequent",0
 132+ ECAC 75 65 6E 74
 132+ ECB0 00
 133+ ECB1 6F 63 63 61  GalaxyDescList22B       DB "occasional",0
 133+ ECB5 73 69 6F 6E
 133+ ECB9 61 6C 00
 134+ ECBC 75 6E 70 72  GalaxyDescList22C       DB "unpredictable",0
 134+ ECC0 65 64 69 63
 134+ ECC4 74 61 62 6C
 134+ ECC8 65 00
 135+ ECCA 64 72 65 61  GalaxyDescList22D       DB "dreadful",0
 135+ ECCE 64 66 75 6C
 135+ ECD2 00
 136+ ECD3 64 65 61 64  GalaxyDescList22E       DB "deadly",0
 136+ ECD7 6C 79 00
 137+ ECDA 3C 31 3E 20  GalaxyDescList23A       DB "<1> <0> for <9>",0
 137+ ECDE 3C 30 3E 20
 137+ ECE2 66 6F 72 20
 137+ ECE6 3C 39 3E 00
 138+ ECEA 3C 31 3E 20  GalaxyDescList23B       DB "<1> <0> for <9> and <9>",0
 138+ ECEE 3C 30 3E 20
 138+ ECF2 66 6F 72 20
 138+ ECF6 3C 39 3E 20
 138+ ECFA 61 6E 64 20
 138+ ECFE 3C 39 3E 00
 139+ ED02 3C 37 3E 20  GalaxyDescList23C       DB "<7> by <8>",0
 139+ ED06 62 79 20 3C
 139+ ED0A 38 3E 00
 140+ ED0D 3C 31 3E 20  GalaxyDescList23D       DB "<1> <0> for <9> but <7> by <8>",0
 140+ ED11 3C 30 3E 20
 140+ ED15 66 6F 72 20
 140+ ED19 3C 39 3E 20
 140+ ED1D 62 75 74 20
 140+ ED21 3C 37 3E 20
 140+ ED25 62 79 20 3C
 140+ ED29 38 3E 00
 141+ ED2C 61 3C 31 35  GalaxyDescList23E       DB "a<15> <16>",0
 141+ ED30 3E 20 3C 31
 141+ ED34 36 3E 00
 142+ ED37 3C 32 36 3E  GalaxyDescList24A       DB "<26>",0
 142+ ED3B 00
 143+ ED3C 6D 6F 75 6E  GalaxyDescList24B       DB "mountain",0
 143+ ED40 74 61 69 6E
 143+ ED44 00
 144+ ED45 65 64 69 62  GalaxyDescList24C       DB "edible",0
 144+ ED49 6C 65 00
 145+ ED4C 74 72 65 65  GalaxyDescList24D       DB "tree",0
 145+ ED50 00
 146+ ED51 73 70 6F 74  GalaxyDescList24E       DB "spotted",0
 146+ ED55 74 65 64 00
 147+ ED59 3C 33 30 3E  GalaxyDescList25A       DB "<30>",0
 147+ ED5D 00
 148+ ED5E 3C 33 31 3E  GalaxyDescList25B       DB "<31>",0
 148+ ED62 00
 149+ ED63 3C 36 3E 6F  GalaxyDescList25C       DB "<6>oid",0
 149+ ED67 69 64 00
 150+ ED6A 3C 31 38 3E  GalaxyDescList25D       DB "<18>",0
 150+ ED6E 00
 151+ ED6F 3C 31 37 3E  GalaxyDescList25E       DB "<17>",0
 151+ ED73 00
 152+ ED74 61 6E 63 69  GalaxyDescList26A       DB "ancient",0
 152+ ED78 65 6E 74 00
 153+ ED7C 65 78 63 65  GalaxyDescList26B       DB "exceptional",0
 153+ ED80 70 74 69 6F
 153+ ED84 6E 61 6C 00
 154+ ED88 65 63 63 65  GalaxyDescList26C       DB "eccentric",0
 154+ ED8C 6E 74 72 69
 154+ ED90 63 00
 155+ ED92 69 6E 67 72  GalaxyDescList26D       DB "ingrained",0
 155+ ED96 61 69 6E 65
 155+ ED9A 64 00
 156+ ED9C 3C 32 30 3E  GalaxyDescList26E       DB "<20>",0
 156+ EDA0 00
 157+ EDA1 6B 69 6C 6C  GalaxyDescList27A       DB "killer",0
 157+ EDA5 65 72 00
 158+ EDA8 64 65 61 64  GalaxyDescList27B       DB "deadly",0
 158+ EDAC 6C 79 00
 159+ EDAF 65 76 69 6C  GalaxyDescList27C       DB "evil",0
 159+ EDB3 00
 160+ EDB4 6C 65 74 68  GalaxyDescList27D       DB "lethal",0
 160+ EDB8 61 6C 00
 161+ EDBB 76 69 63 69  GalaxyDescList27E       DB "vicious",0
 161+ EDBF 6F 75 73 00
 162+ EDC3 70 61 72 6B  GalaxyDescList28A       DB "parking meters",0
 162+ EDC7 69 6E 67 20
 162+ EDCB 6D 65 74 65
 162+ EDCF 72 73 00
 163+ EDD2 64 75 73 74  GalaxyDescList28B       DB "dust clouds",0
 163+ EDD6 20 63 6C 6F
 163+ EDDA 75 64 73 00
 164+ EDDE 69 63 65 20  GalaxyDescList28C       DB "ice bergs",0
 164+ EDE2 62 65 72 67
 164+ EDE6 73 00
 165+ EDE8 72 6F 63 6B  GalaxyDescList28D       DB "rock formations",0
 165+ EDEC 20 66 6F 72
 165+ EDF0 6D 61 74 69
 165+ EDF4 6F 6E 73 00
 166+ EDF8 76 6F 6C 63  GalaxyDescList28E       DB "volcanoes",0
 166+ EDFC 61 6E 6F 65
 166+ EE00 73 00
 167+ EE02 70 6C 61 6E  GalaxyDescList29A       DB "plant",0
 167+ EE06 74 00
 168+ EE08 74 75 6C 69  GalaxyDescList29B       DB "tulip",0
 168+ EE0C 70 00
 169+ EE0E 62 61 6E 61  GalaxyDescList29C       DB "banana",0
 169+ EE12 6E 61 00
 170+ EE15 63 6F 72 6E  GalaxyDescList29D       DB "corn",0
 170+ EE19 00
 171+ EE1A 25 52 77 65  GalaxyDescList29E       DB "%Rweed",0
 171+ EE1E 65 64 00
 172+ EE21 25 52 00     GalaxyDescList30A       DB "%R",0
 173+ EE24 23 49 20 25  GalaxyDescList30B       DB "#I %R",0
 173+ EE28 52 00
 174+ EE2A 23 49 20 3C  GalaxyDescList30C       DB "#I <26>",0
 174+ EE2E 32 36 3E 00
 175+ EE32 69 6E 68 61  GalaxyDescList30D       DB "inhabitant",0
 175+ EE36 62 69 74 61
 175+ EE3A 6E 74 00
 176+ EE3D 25 49 20 25  GalaxyDescList30E       DB "%I %R",0
 176+ EE41 52 00
 177+ EE43 73 68 72 65  GalaxyDescList31A       DB "shrew",0
 177+ EE47 77 00
 178+ EE49 62 65 61 73  GalaxyDescList31B       DB "beast",0
 178+ EE4D 74 00
 179+ EE4F 62 69 73 6F  GalaxyDescList31C       DB "bison",0
 179+ EE53 6E 00
 180+ EE55 73 6E 61 6B  GalaxyDescList31D       DB "snake",0
 180+ EE59 65 00
 181+ EE5B 77 6F 6C 66  GalaxyDescList31E       DB "wolf",0
 181+ EE5F 00
 182+ EE60 6C 65 6F 70  GalaxyDescList32A       DB "leopard",0
 182+ EE64 61 72 64 00
 183+ EE68 63 61 74 00  GalaxyDescList32B       DB "cat",0
 184+ EE6C 6D 6F 6E 6B  GalaxyDescList32C       DB "monkey",0
 184+ EE70 65 79 00
 185+ EE73 67 6F 61 74  GalaxyDescList32D       DB "goat",0
 185+ EE77 00
 186+ EE78 66 69 73 68  GalaxyDescList32E       DB "fish",0
 186+ EE7C 00
 187+ EE7D 3C 31 31 3E  GalaxyDescList33A       DB "<11> <10>",0
 187+ EE81 20 3C 31 30
 187+ EE85 3E 00
 188+ EE87 23 49 20 3C  GalaxyDescList33B       DB "#I <30> <33>",0
 188+ EE8B 33 30 3E 20
 188+ EE8F 3C 33 33 3E
 188+ EE93 00
 189+ EE94 69 74 73 20  GalaxyDescList33C       DB "its <12> <31> <33>",0
 189+ EE98 3C 31 32 3E
 189+ EE9C 20 3C 33 31
 189+ EEA0 3E 20 3C 33
 189+ EEA4 33 3E 00
 190+ EEA7 3C 33 34 3E  GalaxyDescList33D       DB "<34> <35>",0
 190+ EEAB 20 3C 33 35
 190+ EEAF 3E 00
 191+ EEB1 3C 31 31 3E  GalaxyDescList33E       DB "<11> <10>",0
 191+ EEB5 20 3C 31 30
 191+ EEB9 3E 00
 192+ EEBB 6D 65 61 74  GalaxyDescList34A       DB "meat",0
 192+ EEBF 00
 193+ EEC0 63 75 74 6C  GalaxyDescList34B       DB "cutlet",0
 193+ EEC4 65 74 00
 194+ EEC7 73 74 65 61  GalaxyDescList34C       DB "steak",0
 194+ EECB 6B 00
 195+ EECD 62 75 72 67  GalaxyDescList34D       DB "burgers",0
 195+ EED1 65 72 73 00
 196+ EED5 73 6F 75 70  GalaxyDescList34E       DB "soup",0
 196+ EED9 00
 197+ EEDA 69 63 65 00  GalaxyDescList35A       DB "ice",0
 198+ EEDE 6D 75 64 00  GalaxyDescList35B       DB "mud",0
 199+ EEE2 5A 65 72 6F  GalaxyDescList35C       DB "Zero-G",0
 199+ EEE6 2D 47 00
 200+ EEE9 76 61 63 75  GalaxyDescList35D       DB "vacuum",0
 200+ EEED 75 6D 00
 201+ EEF0 25 49 20 75  GalaxyDescList35E       DB "%I ultra",0
 201+ EEF4 6C 74 72 61
 201+ EEF8 00
 202+ EEF9 68 6F 63 6B  GalaxyDescList36A       DB "hockey",0
 202+ EEFD 65 79 00
 203+ EF00 63 72 69 63  GalaxyDescList36B       DB "cricket",0
 203+ EF04 6B 65 74 00
 204+ EF08 6B 61 72 61  GalaxyDescList36C       DB "karate",0
 204+ EF0C 74 65 00
 205+ EF0F 70 6F 6C 6F  GalaxyDescList36D       DB "polo",0
 205+ EF13 00
 206+ EF14 74 65 6E 6E  GalaxyDescList36E       DB "tennis",0
 206+ EF18 69 73 00
 207+ EF1B
 208+ EF1B 12 E9 19 E9  GalaxyDescList          DW GalaxyDescList01A, GalaxyDescList01B, GalaxyDescList01C, GalaxyDescList01D, GalaxyDescList01E
 208+ EF1F 21 E9 2C E9
 208+ EF23 33 E9
 209+ EF25 39 E9 3E E9                          DW GalaxyDescList02A, GalaxyDescList02B, GalaxyDescList02C, GalaxyDescList02D, GalaxyDescList02E
 209+ EF29 45 E9 4A E9
 209+ EF2D 55 E9
 210+ EF2F 56 E9 5E E9                          DW GalaxyDescList03A, GalaxyDescList03B, GalaxyDescList03C, GalaxyDescList03D, GalaxyDescList03E
 210+ EF33 63 E9 69 E9
 210+ EF37 6E E9
 211+ EF39 73 E9 89 E9                          DW GalaxyDescList04A, GalaxyDescList04B, GalaxyDescList04C, GalaxyDescList04D, GalaxyDescList04E
 211+ EF3D 93 E9 98 E9
 211+ EF41 A5 E9
 212+ EF43 AC E9 B4 E9                          DW GalaxyDescList05A, GalaxyDescList05B, GalaxyDescList05C, GalaxyDescList05D, GalaxyDescList05E
 212+ EF47 BE E9 D0 E9
 212+ EF4B E0 E9
 213+ EF4D ED E9 FB E9                          DW GalaxyDescList06A, GalaxyDescList06B, GalaxyDescList06C, GalaxyDescList06D, GalaxyDescList06E
 213+ EF51 04 EA 0B EA
 213+ EF55 12 EA
 214+ EF57 17 EA 24 EA                          DW GalaxyDescList07A, GalaxyDescList07B, GalaxyDescList07C, GalaxyDescList07D, GalaxyDescList07E
 214+ EF5B 29 EA 2D EA
 214+ EF5F 33 EA
 215+ EF61 36 EA 3C EA                          DW GalaxyDescList08A, GalaxyDescList08B, GalaxyDescList08C, GalaxyDescList08D, GalaxyDescList08E
 215+ EF65 44 EA 4C EA
 215+ EF69 53 EA
 216+ EF6B 5C EA 6B EA                          DW GalaxyDescList09A, GalaxyDescList09B, GalaxyDescList09C, GalaxyDescList09D, GalaxyDescList09E
 216+ EF6F 7B EA 8A EA
 216+ EF73 9B EA
 217+ EF75 AF EA BB EA                          DW GalaxyDescList10A, GalaxyDescList10B, GalaxyDescList10C, GalaxyDescList10D, GalaxyDescList10E
 217+ EF79 CC EA E6 EA
 217+ EF7D EB EA
 218+ EF7F F9 EA FF EA                          DW GalaxyDescList11A, GalaxyDescList11B, GalaxyDescList11C, GalaxyDescList11D, GalaxyDescList11E
 218+ EF83 06 EB 0C EB
 218+ EF87 11 EB
 219+ EF89 21 EB 24 EB                          DW GalaxyDescList12A, GalaxyDescList12B, GalaxyDescList12C, GalaxyDescList12D, GalaxyDescList12E
 219+ EF8D 2C EB 32 EB
 219+ EF91 3A EB
 220+ EF93 42 EB 4B EB                          DW GalaxyDescList13A, GalaxyDescList13B, GalaxyDescList13C, GalaxyDescList13D, GalaxyDescList13E
 220+ EF97 52 EB 58 EB
 220+ EF9B 60 EB
 221+ EF9D 69 EB 71 EB                          DW GalaxyDescList14A, GalaxyDescList14B, GalaxyDescList14C, GalaxyDescList14D, GalaxyDescList14E
 221+ EFA1 7C EB 84 EB
 221+ EFA5 8D EB
 222+ EFA7 94 EB 97 EB                          DW GalaxyDescList15A, GalaxyDescList15B, GalaxyDescList15C, GalaxyDescList15D, GalaxyDescList15E
 222+ EFAB A5 EB B2 EB
 222+ EFAF BE EB
 223+ EFB1 C9 EB D8 EB                          DW GalaxyDescList16A, GalaxyDescList16B, GalaxyDescList16C, GalaxyDescList16D, GalaxyDescList16E
 223+ EFB5 E0 EB E6 EB
 223+ EFB9 EF EB
 224+ EFBB FA EB 01 EC                          DW GalaxyDescList17A, GalaxyDescList17B, GalaxyDescList17C, GalaxyDescList17D, GalaxyDescList17E
 224+ EFBF 07 EC 0D EC
 224+ EFC3 1B EC
 225+ EFC5 20 EC 25 EC                          DW GalaxyDescList18A, GalaxyDescList18B, GalaxyDescList18C, GalaxyDescList18D, GalaxyDescList18E
 225+ EFC9 2A EC 2F EC
 225+ EFCD 33 EC
 226+ EFCF 36 EC 3B EC                          DW GalaxyDescList19A, GalaxyDescList19B, GalaxyDescList19C, GalaxyDescList19D, GalaxyDescList19E
 226+ EFD3 49 EC 4D EC
 226+ EFD7 53 EC
 227+ EFD9 58 EC 61 EC                          DW GalaxyDescList20A, GalaxyDescList20B, GalaxyDescList20C, GalaxyDescList20D, GalaxyDescList20E
 227+ EFDD 67 EC 6C EC
 227+ EFE1 79 EC
 228+ EFE3 83 EC 89 EC                          DW GalaxyDescList21A, GalaxyDescList21B, GalaxyDescList21C, GalaxyDescList21D, GalaxyDescList21E
 228+ EFE7 8F EC 97 EC
 228+ EFEB 9F EC
 229+ EFED A8 EC B1 EC                          DW GalaxyDescList22A, GalaxyDescList22B, GalaxyDescList22C, GalaxyDescList22D, GalaxyDescList22E
 229+ EFF1 BC EC CA EC
 229+ EFF5 D3 EC
 230+ EFF7 DA EC EA EC                          DW GalaxyDescList23A, GalaxyDescList23B, GalaxyDescList23C, GalaxyDescList23D, GalaxyDescList23E
 230+ EFFB 02 ED 0D ED
 230+ EFFF 2C ED
 231+ F001 37 ED 3C ED                          DW GalaxyDescList24A, GalaxyDescList24B, GalaxyDescList24C, GalaxyDescList24D, GalaxyDescList24E
 231+ F005 45 ED 4C ED
 231+ F009 51 ED
 232+ F00B 59 ED 5E ED                          DW GalaxyDescList25A, GalaxyDescList25B, GalaxyDescList25C, GalaxyDescList25D, GalaxyDescList25E
 232+ F00F 63 ED 6A ED
 232+ F013 6F ED
 233+ F015 74 ED 7C ED                          DW GalaxyDescList26A, GalaxyDescList26B, GalaxyDescList26C, GalaxyDescList26D, GalaxyDescList26E
 233+ F019 88 ED 92 ED
 233+ F01D 9C ED
 234+ F01F A1 ED A8 ED                          DW GalaxyDescList27A, GalaxyDescList27B, GalaxyDescList27C, GalaxyDescList27D, GalaxyDescList27E
 234+ F023 AF ED B4 ED
 234+ F027 BB ED
 235+ F029 C3 ED D2 ED                          DW GalaxyDescList28A, GalaxyDescList28B, GalaxyDescList28C, GalaxyDescList28D, GalaxyDescList28E
 235+ F02D DE ED E8 ED
 235+ F031 F8 ED
 236+ F033 02 EE 08 EE                          DW GalaxyDescList29A, GalaxyDescList29B, GalaxyDescList29C, GalaxyDescList29D, GalaxyDescList29E
 236+ F037 0E EE 15 EE
 236+ F03B 1A EE
 237+ F03D 21 EE 24 EE                          DW GalaxyDescList30A, GalaxyDescList30B, GalaxyDescList30C, GalaxyDescList30D, GalaxyDescList30E
 237+ F041 2A EE 32 EE
 237+ F045 3D EE
 238+ F047 43 EE 49 EE                          DW GalaxyDescList31A, GalaxyDescList31B, GalaxyDescList31C, GalaxyDescList31D, GalaxyDescList31E
 238+ F04B 4F EE 55 EE
 238+ F04F 5B EE
 239+ F051 60 EE 68 EE                          DW GalaxyDescList32A, GalaxyDescList32B, GalaxyDescList32C, GalaxyDescList32D, GalaxyDescList32E
 239+ F055 6C EE 73 EE
 239+ F059 78 EE
 240+ F05B 7D EE 87 EE                          DW GalaxyDescList33A, GalaxyDescList33B, GalaxyDescList33C, GalaxyDescList33D, GalaxyDescList33E
 240+ F05F 94 EE A7 EE
 240+ F063 B1 EE
 241+ F065 BB EE C0 EE                          DW GalaxyDescList34A, GalaxyDescList34B, GalaxyDescList34C, GalaxyDescList34D, GalaxyDescList34E
 241+ F069 C7 EE CD EE
 241+ F06D D5 EE
 242+ F06F DA EE DE EE                          DW GalaxyDescList35A, GalaxyDescList35B, GalaxyDescList35C, GalaxyDescList35D, GalaxyDescList35E
 242+ F073 E2 EE E9 EE
 242+ F077 F0 EE
 243+ F079 F9 EE 00 EF                          DW GalaxyDescList36A, GalaxyDescList36B, GalaxyDescList36C, GalaxyDescList36D, GalaxyDescList36E
 243+ F07D 08 EF 0F EF
 243+ F081 14 EF
 244+ F083
 245+ F083 4C 61 72 67  GalaxyInhabitantDesc1   DB "Large ",0
 245+ F087 65 20 00
 246+ F08A 46 69 65 72  GalaxyInhabitantDesc1A  DB "Fierce ",0
 246+ F08E 63 65 20 00
 247+ F092 53 6D 61 6C  GalaxyInhabitantDesc1B  DB "Small ", 0
 247+ F096 6C 20 00
 248+ F099 47 72 65 65  GalaxyInhabitantDesc2   DB "Green ",0
 248+ F09D 6E 20 00
 249+ F0A0 52 65 64 20  GalaxyInhabitantDesc2A  DB "Red ",  0
 249+ F0A4 00
 250+ F0A5 59 65 6C 6C  GalaxyInhabitantDesc2B  DB "Yellow ",0
 250+ F0A9 6F 77 20 00
 251+ F0AD 42 6C 75 65  GalaxyInhabitantDesc2C  DB "Blue ",  0
 251+ F0B1 20 00
 252+ F0B3 42 6C 61 63  GalaxyInhabitantDesc2D  DB "Black ",0
 252+ F0B7 6B 20 00
 253+ F0BA 48 61 72 6D  GalaxyInhabitantDesc2E  DB "Harmless ",0
 253+ F0BE 6C 65 73 73
 253+ F0C2 20 00
 254+ F0C4 53 6C 69 6D  GalaxyInhabitantDesc3   DB "Slimy ",0
 254+ F0C8 79 20 00
 255+ F0CB 42 75 67 2D  GalaxyInhabitantDesc3A  DB "Bug-Eyed ", 0
 255+ F0CF 45 79 65 64
 255+ F0D3 20 00
 256+ F0D5 48 6F 72 6E  GalaxyInhabitantDesc3B  DB "Horned ",0
 256+ F0D9 65 64 20 00
 257+ F0DD 42 6F 6E 79  GalaxyInhabitantDesc3C  DB "Bony ",  0
 257+ F0E1 20 00
 258+ F0E3 46 61 74 20  GalaxyInhabitantDesc3D  DB "Fat ",  0
 258+ F0E7 00
 259+ F0E8 46 75 72 72  GalaxyInhabitantDesc3E  DB "Furry ",  0
 259+ F0EC 79 20 00
 260+ F0EF 52 6F 64 65  GalaxyInhabitantDesc4   DB "Rodent",0
 260+ F0F3 6E 74 00
 261+ F0F6 46 72 6F 67  GalaxyInhabitantDesc4A  DB "Frog",      0
 261+ F0FA 00
 262+ F0FB 4C 69 7A 61  GalaxyInhabitantDesc4B  DB "Lizard", 0
 262+ F0FF 72 64 00
 263+ F102 4C 6F 62 73  GalaxyInhabitantDesc4C  DB "Lobster",0
 263+ F106 74 65 72 00
 264+ F10A 42 69 72 64  GalaxyInhabitantDesc4D  DB "Bird",  0
 264+ F10E 00
 265+ F10F 48 75 6D 61  GalaxyInhabitantDesc4E  DB "Humanoid", 0
 265+ F113 6E 6F 69 64
 265+ F117 00
 266+ F118 46 65 6C 69  GalaxyInhabitantDesc4F  DB "Feline", 0
 266+ F11C 6E 65 00
 267+ F11F 49 6E 73 65  GalaxyInhabitantDesc4G  DB "Insect",0
 267+ F123 63 74 00
 268+ F126 48 75 6D 61  GalaxyInhabitantHuman   DB "Human Colonal",0
 268+ F12A 6E 20 43 6F
 268+ F12E 6C 6F 6E 61
 268+ F132 6C 00
 269+ F134
 270+ F134 83 F0 8A F0  GalaxyInhabitantDesc1Ix DW GalaxyInhabitantDesc1,GalaxyInhabitantDesc1A,GalaxyInhabitantDesc1B
 270+ F138 92 F0
 271+ F13A 99 F0 A0 F0  GalaxyInhabitantDesc2Ix DW GalaxyInhabitantDesc2,GalaxyInhabitantDesc2A,GalaxyInhabitantDesc2B,GalaxyInhabitantDesc2C,GalaxyInhabitantDesc2D,GalaxyInhabitantDesc2E
 271+ F13E A5 F0 AD F0
 271+ F142 B3 F0 BA F0
 272+ F146 C4 F0 CB F0  GalaxyInhabitantDesc3Ix DW GalaxyInhabitantDesc3,GalaxyInhabitantDesc3A,GalaxyInhabitantDesc3B,GalaxyInhabitantDesc3C,GalaxyInhabitantDesc3D,GalaxyInhabitantDesc3E
 272+ F14A D5 F0 DD F0
 272+ F14E E3 F0 E8 F0
 273+ F152 EF F0 F6 F0  GalaxyInhabitantDesc4Ix DW GalaxyInhabitantDesc4,GalaxyInhabitantDesc4A,GalaxyInhabitantDesc4B,GalaxyInhabitantDesc4C,GalaxyInhabitantDesc4D,GalaxyInhabitantDesc4E,GalaxyInhabitantDesc4F,GalaxyInhabitantDesc4G
 273+ F156 FB F0 02 F1
 273+ F15A 0A F1 0F F1
 273+ F15E 18 F1 1F F1
 274+ F162 26 F1        GalaxyInhabitantHumanIx DW GalaxyInhabitantHuman
 275+ F164 00 00 00...  GalaxySpecies           DS 32
 276+ F184 00                                   DB 0
 277+ F185 00 00 00...  GalaxyPlanetDescription DS 300
 278+ F2B1 00                                   DB 0
 279+ F2B2 00 00 00...  GalaxyPlanetSource      DS 300,0
 280+ F3DE 3C 31 34 3E  GalaxyPlanetDescStarter DB "<14> is <22>",0
 280+ F3E2 20 69 73 20
 280+ F3E6 3C 32 32 3E
 280+ F3EA 00
 281+ F3EB
 282+ F3EB
 283+ F3EB D3           GalaxyExtendedDescs:    DB 211                                                  ; System 211, Galaxy 0                Teorge = Token  1
 284+ F3EC 96                                   DB 150                                                  ; System 150, Galaxy 0, Mission 1       Xeer = Token  2
 285+ F3ED 24                                   DB 36                                                   ; System  36, Galaxy 0, Mission 1   Reesdice = Token  3
 286+ F3EE 1C                                   DB 28                                                   ; System  28, Galaxy 0, Mission 1      Arexe = Token  4
 287+ F3EF FD                                   DB 253                                                  ; System 253, Galaxy 1, Mission 1     Errius = Token  5
 288+ F3F0 4F                                   DB 79                                                   ; System  79, Galaxy 1, Mission 1     Inbibe = Token  6
 289+ F3F1 35                                   DB 53                                                   ; System  53, Galaxy 1, Mission 1      Ausar = Token  7
 290+ F3F2 76                                   DB 118                                                  ; System 118, Galaxy 1, Mission 1     Usleri = Token  8
 291+ F3F3 64                                   DB 100                                                  ; System 100, Galaxy 2                Arredi = Token  9
 292+ F3F4 20                                   DB 32                                                   ; System  32, Galaxy 1, Mission 1     Bebege = Token 10
 293+ F3F5 44                                   DB 68                                                   ; System  68, Galaxy 1, Mission 1     Cearso = Token 11
 294+ F3F6 A4                                   DB 164                                                  ; System 164, Galaxy 1, Mission 1     Dicela = Token 12
 295+ F3F7 DC                                   DB 220                                                  ; System 220, Galaxy 1, Mission 1     Eringe = Token 13
 296+ F3F8 6A                                   DB 106                                                  ; System 106, Galaxy 1, Mission 1     Gexein = Token 14
 297+ F3F9 10                                   DB 16                                                   ; System  16, Galaxy 1, Mission 1     Isarin = Token 15
 298+ F3FA A2                                   DB 162                                                  ; System 162, Galaxy 1, Mission 1   Letibema = Token 16
 299+ F3FB 03                                   DB 3                                                    ; System   3, Galaxy 1, Mission 1     Maisso = Token 17
 300+ F3FC 6B                                   DB 107                                                  ; System 107, Galaxy 1, Mission 1       Onen = Token 18
 301+ F3FD 1A                                   DB 26                                                   ; System  26, Galaxy 1, Mission 1     Ramaza = Token 19
 302+ F3FE C0                                   DB 192                                                  ; System 192, Galaxy 1, Mission 1     Sosole = Token 20
 303+ F3FF B8                                   DB 184                                                  ; System 184, Galaxy 1, Mission 1     Tivere = Token 21
 304+ F400 05                                   DB 5                                                    ; System   5, Galaxy 1, Mission 1     Veriar = Token 22
 305+ F401 65                                   DB 101                                                  ; System 101, Galaxy 2, Mission 1     Xeveon = Token 23
 306+ F402 C1                                   DB 193                                                  ; System 193, Galaxy 1, Mission 1     Orarra = Token 24
 307+ F403 29                                   DB 41                                                   ; System  41, Galaxy 2                Anreer = Token 25
 308+ F404 07                                   DB 7                                                    ; System   7, Galaxy 0                  Lave = Token 26
 309+ F405 2E                                   DB 46                                                   ; System  46, Galaxy 0              Riedquat = Token 27
 310+ F406
 311+ F406                  INCLUDE "./Data/EquipmentEquates.asm"
# file opened: ././Data/EquipmentEquates.asm
   1++F406
   2++F406              EQ_FUEL                 EQU 0
   3++F406              EQ_MISSILE              EQU 1
   4++F406              EQ_CARGO_BAY            EQU 2
   5++F406              EQ_ECM                  EQU 3
   6++F406              EQ_FUEL_SCOOPS          EQU 4
   7++F406              EQ_ESCAPE_POD           EQU 5
   8++F406              EQ_ENERGY_BOMB          EQU 6
   9++F406              EQ_ENERGY_UNIT          EQU 7
  10++F406              EQ_DOCK_COMP            EQU 8
  11++F406              EQ_GAL_DRIVE            EQU 9
  12++F406              EQ_FRONT_PULSE          EQU 10
  13++F406              EQ_REAR_PULSE           EQU 11
  14++F406              EQ_LEFT_PULSE           EQU 12
  15++F406              EQ_RIGHT_PULSE          EQU 13
  16++F406              EQ_FRONT_BEAM           EQU 14
  17++F406              EQ_REAR_BEAM            EQU 15
  18++F406              EQ_LEFT_BEAM            EQU 16
  19++F406              EQ_RIGHT_BEAM           EQU 17
  20++F406              EQ_FRONT_MINING         EQU 18
  21++F406              EQ_REAR_MINING          EQU 19
  22++F406              EQ_LEFT_MINING          EQU 20
  23++F406              EQ_RIGHT_MINING         EQU 21
  24++F406              EQ_FRONT_MILITARY       EQU 22
  25++F406              EQ_REAR_MILITARY        EQU 23
  26++F406              EQ_LEFT_MILITARY        EQU 24
  27++F406              EQ_RIGHT_MILITARY       EQU 25
  28++F406
  29++F406              EQ_ITEM_COUNT           EQU EQ_RIGHT_MILITARY+1
  30++F406
# file closed: ././Data/EquipmentEquates.asm
 312+ F406
 313+ F406              EquipNameTableRowLen    EQU 8
 314+ F406 DE 87 00 00  ShipEquipNameTable      DW  WordFuel,       0,              0,          0
 314+ F40A 00 00 00 00
 315+ F40E 7B 8B 00 00                          DW  WordMissile,    0,              0,          0
 315+ F412 00 00 00 00
 316+ F416 C3 87 D4 87                          DW  WordLarge,      WordCargo,      WordBay,    0
 316+ F41A DA 87 00 00
 317+ F41E EA 87 F1 87                          DW  WordECM,        WordSystem,     0,          0
 317+ F422 00 00 00 00
 318+ F426 DE 87 E3 87                          DW  WordFuel,       WordScoops,     0,          0
 318+ F42A 00 00 00 00
 319+ F42E C9 87 D0 87                          DW  WordEscape,     WordPod,        0,          0
 319+ F432 00 00 00 00
 320+ F436 F8 87 FF 87                          DW  WordEnergy,     WordBomb,       0,          0
 320+ F43A 00 00 00 00
 321+ F43E 5D 88 F8 87                          DW  WordExtra,      WordEnergy,     WordUnit,   0
 321+ F442 2B 88 00 00
 322+ F446 37 88 3F 88                          DW  WordDocking,    WordComputers,  0,          0
 322+ F44A 00 00 00 00
 323+ F44E 54 88 93 8A                          DW  WordGalactic,   WordHyperdrive, 0,          0
 323+ F452 00 00 00 00
 324+ F456 AD 87 0A 88                          DW  WordFront,      WordPulse,      WordLaser,  0
 324+ F45A 04 88 00 00
 325+ F45E BE 87 0A 88                          DW  WordRear,       WordPulse,      WordLaser,  0
 325+ F462 04 88 00 00
 326+ F466 B9 87 0A 88                          DW  WordLeft,       WordPulse,      WordLaser,  0
 326+ F46A 04 88 00 00
 327+ F46E B3 87 0A 88                          DW  WordRight,      WordPulse,      WordLaser,  0
 327+ F472 04 88 00 00
 328+ F476 AD 87 10 88                          DW  WordFront,      WordBeam,       WordLaser,  0
 328+ F47A 04 88 00 00
 329+ F47E BE 87 10 88                          DW  WordRear,       WordBeam,       WordLaser,  0
 329+ F482 04 88 00 00
 330+ F486 B9 87 10 88                          DW  WordLeft,       WordBeam,       WordLaser,  0
 330+ F48A 04 88 00 00
 331+ F48E B3 87 10 88                          DW  WordRight,      WordBeam,       WordLaser,  0
 331+ F492 04 88 00 00
 332+ F496 AD 87 1D 88                          DW  WordFront,      WordMining,     WordLaser,  0
 332+ F49A 04 88 00 00
 333+ F49E BE 87 1D 88                          DW  WordRear,       WordMining,     WordLaser,  0
 333+ F4A2 04 88 00 00
 334+ F4A6 B9 87 1D 88                          DW  WordLeft,       WordMining,     WordLaser,  0
 334+ F4AA 04 88 00 00
 335+ F4AE B3 87 1D 88                          DW  WordRight,      WordMining,     WordLaser,  0
 335+ F4B2 04 88 00 00
 336+ F4B6 AD 87 9E 8A                          DW  WordFront,      WordMilitary,   WordLaser,  0
 336+ F4BA 04 88 00 00
 337+ F4BE BE 87 9E 8A                          DW  WordRear,       WordMilitary,   WordLaser,  0
 337+ F4C2 04 88 00 00
 338+ F4C6 B9 87 9E 8A                          DW  WordLeft,       WordMilitary,   WordLaser,  0
 338+ F4CA 04 88 00 00
 339+ F4CE B3 87 9E 8A                          DW  WordRight,      WordMilitary,   WordLaser,  0
 339+ F4D2 04 88 00 00
 340+ F4D6
 341+ F4D6              ;Each row is 7 bytes
 342+ F4D6              ;                                                               12345  6  789012345678901
 343+ F4D6              ;	canbuy;
 344+ F4D6              ;	y;
 345+ F4D6              ;	show;
 346+ F4D6              ;	level;
 347+ F4D6              ;	price 2 bytes;
 348+ F4D6              ;	type;
 349+ F4D6              ;ShipFrontWeapons        DB EQ_FRONT_PULSE,  EQ_FRONT_PULSE,     EQ_FRONT_MINING,    EQ_FRONT_MINING
 350+ F4D6              ;ShipRearWeapons         DB EQ_REAR_PULSE,   EQ_REAR_PULSE,      EQ_REAR_MINING,     EQ_REAR_MINING
 351+ F4D6              ;ShipLeftWeapons         DB EQ_LEFT_PULSE,   EQ_LEFT_PULSE,      EQ_LEFT_MINING,     EQ_LEFT_MINING
 352+ F4D6              ;ShipRightWeapons        DB EQ_RIGHT_PULSE,  EQ_RIGHT_PULSE,     EQ_RIGHT_MINING,    EQ_RIGHT_MINING
 353+ F4D6              ;                           c  y  s  t
 354+ F4D6              ;                           a  p  h  e                                            fi     P     Vi
 355+ F4D6              ;                           n  o  o  c                                            tt     o     ew
 356+ F4D6              ;                           B  s  w  h  price                  type               ed     s
 357+ F4D6 00 00 01 01  ShipEquipmentList       DB  0, 0, 1, 1, low     2, high     2, EQ_FUEL          , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 357+ F4DA 02 00 00 00
 357+ F4DE FF 00 00 00
 357+ F4E2 00 00 00 00
 358+ F4E6 00 01 01 01                          DB  0, 1, 1, 1, low   300, high   300, EQ_MISSILE       , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 358+ F4EA 2C 01 01 00
 358+ F4EE FF 00 00 00
 358+ F4F2 00 00 00 00
 359+ F4F6 00 02 01 01                          DB  0, 2, 1, 1, low  4000, high  4000, EQ_CARGO_BAY     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 359+ F4FA A0 0F 02 00
 359+ F4FE FF 00 00 00
 359+ F502 00 00 00 00
 360+ F506 00 03 01 02                          DB  0, 3, 1, 2, low  6000, high  6000, EQ_ECM           , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 360+ F50A 70 17 03 00
 360+ F50E FF 00 00 00
 360+ F512 00 00 00 00
 361+ F516 00 04 01 05                          DB  0, 4, 1, 5, low  5250, high  5250, EQ_FUEL_SCOOPS   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 361+ F51A 82 14 04 00
 361+ F51E FF 00 00 00
 361+ F522 00 00 00 00
 362+ F526 00 05 01 06                          DB  0, 5, 1, 6, low 10000, high 10000, EQ_ESCAPE_POD    , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 362+ F52A 10 27 05 00
 362+ F52E FF 00 00 00
 362+ F532 00 00 00 00
 363+ F536 00 06 01 07                          DB  0, 6, 1, 7, low  9000, high  9000, EQ_ENERGY_BOMB   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 363+ F53A 28 23 06 00
 363+ F53E FF 00 00 00
 363+ F542 00 00 00 00
 364+ F546 00 07 01 08                          DB  0, 7, 1, 8, low 15000, high 15000, EQ_ENERGY_UNIT   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 364+ F54A 98 3A 07 00
 364+ F54E FF 00 00 00
 364+ F552 00 00 00 00
 365+ F556 00 08 01 09                          DB  0, 8, 1, 9, low 15000, high 15000, EQ_DOCK_COMP     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 365+ F55A 98 3A 08 00
 365+ F55E FF 00 00 00
 365+ F562 00 00 00 00
 366+ F566 00 09 01 0A                          DB  0, 9, 1,10, low 50000, high 50000, EQ_GAL_DRIVE     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 366+ F56A 50 C3 09 00
 366+ F56E FF 00 00 00
 366+ F572 00 00 00 00
 367+ F576 00 0A 01 03                          DB  0,10, 1, 3, low  4000, high  4000, EQ_FRONT_PULSE   , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 367+ F57A A0 0F 0A 00
 367+ F57E 00 00 00 00
 367+ F582 00 00 00 00
 368+ F586 00 0B 01 03                          DB  0,11, 1, 3, low  4000, high  4000, EQ_REAR_PULSE    , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 368+ F58A A0 0F 0B 00
 368+ F58E 01 01 00 00
 368+ F592 00 00 00 00
 369+ F596 00 0C 01 03                          DB  0,12, 1, 3, low  4000, high  4000, EQ_LEFT_PULSE    , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 369+ F59A A0 0F 0C 00
 369+ F59E 02 02 00 00
 369+ F5A2 00 00 00 00
 370+ F5A6 00 0D 01 03                          DB  0,13, 1, 3, low  4000, high  4000, EQ_RIGHT_PULSE   , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 370+ F5AA A0 0F 0D 00
 370+ F5AE 03 03 00 00
 370+ F5B2 00 00 00 00
 371+ F5B6 00 0E 00 04                          DB  0,14, 0, 4, low 10000, high 10000, EQ_FRONT_BEAM    , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 371+ F5BA 10 27 0E 00
 371+ F5BE 00 00 00 00
 371+ F5C2 00 00 00 00
 372+ F5C6 00 0F 00 04                          DB  0,15, 0, 4, low 10000, high 10000, EQ_REAR_BEAM     , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 372+ F5CA 10 27 0F 00
 372+ F5CE 01 01 00 00
 372+ F5D2 00 00 00 00
 373+ F5D6 00 10 00 04                          DB  0,16, 0, 4, low 10000, high 10000, EQ_LEFT_BEAM     , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 373+ F5DA 10 27 10 00
 373+ F5DE 02 02 00 00
 373+ F5E2 00 00 00 00
 374+ F5E6 00 11 00 04                          DB  0,17, 0, 4, low 10000, high 10000, EQ_RIGHT_BEAM    , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 374+ F5EA 10 27 11 00
 374+ F5EE 03 03 00 00
 374+ F5F2 00 00 00 00
 375+ F5F6 00 12 00 0A                          DB  0,18, 0,10, low  8000, high  8000, EQ_FRONT_MINING  , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 375+ F5FA 40 1F 12 00
 375+ F5FE 00 00 00 00
 375+ F602 00 00 00 00
 376+ F606 00 13 00 0A                          DB  0,19, 0,10, low  8000, high  8000, EQ_REAR_MINING   , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 376+ F60A 40 1F 13 00
 376+ F60E 01 01 00 00
 376+ F612 00 00 00 00
 377+ F616 00 14 00 0A                          DB  0,20, 0,10, low  8000, high  8000, EQ_LEFT_MINING   , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 377+ F61A 40 1F 14 00
 377+ F61E 02 02 00 00
 377+ F622 00 00 00 00
 378+ F626 00 15 00 0A                          DB  0,21, 0,10, low  8000, high  8000, EQ_RIGHT_MINING  , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 378+ F62A 40 1F 15 00
 378+ F62E 03 03 00 00
 378+ F632 00 00 00 00
 379+ F636 00 16 00 0A                          DB  0,22, 0,10, low 60000, high 60000, EQ_FRONT_MILITARY, 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 379+ F63A 60 EA 16 00
 379+ F63E 00 00 00 00
 379+ F642 00 00 00 00
 380+ F646 00 17 00 0A                          DB  0,23, 0,10, low 60000, high 60000, EQ_REAR_MILITARY , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 380+ F64A 60 EA 17 00
 380+ F64E 01 01 00 00
 380+ F652 00 00 00 00
 381+ F656 00 18 00 0A                          DB  0,24, 0,10, low 60000, high 60000, EQ_LEFT_MILITARY , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 381+ F65A 60 EA 18 00
 381+ F65E 02 02 00 00
 381+ F662 00 00 00 00
 382+ F666 00 19 00 0A                          DB  0,25, 0,10, low 60000, high 60000, EQ_RIGHT_MILITARY, 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 382+ F66A 60 EA 19 00
 382+ F66E 03 03 00 00
 382+ F672 00 00 00 00
 383+ F676              ShipEquipTableRowLen    EQU 16
 384+ F676              ShipEquipTableSize      EQU ($-ShipEquipmentList)/ShipEquipTableRowLen
 385+ F676
 386+ F676              ;------------------------------------------------------------------------------------------------------------------------------------
 387+ F676 2B           GalaxyRandSeed			DB	43	            ; Just some start values
 388+ F677 20           GalaxyRandSeed1			DB	32	            ; Just some start values
 389+ F678 0C           GalaxyRandSeed2			DB	12	            ; Just some start values
 390+ F679 42           GalaxyRandSeed3			DB	66	            ; Just some start values
 391+ F67A              GalaxySeedRandom:
 392+ F67A              ;------------------------------------------------------------------------------------------------------------------------------------
 393+ F67A CD A5 84     GetDigramGalaxySeed:    call	copy_galaxy_to_working
 394+ F67D 18 03                                jr		GetDigramWorkingSeed
 395+ F67F CD BD 84     GetDigramSystemSeed:    call	copy_system_to_working
 396+ F682 11 A9 8E     GetDigramWorkingSeed:   ld		de,name_expanded    ; ">GetDigram a = digram seed"
 397+ F685 06 03                                ld		b,3
 398+ F687 3A 2C 7F                             ld		a,(WorkingSeeds)
 399+ F68A E6 40                                and		$40
 400+ F68C 28 03                                jr		z,.SmallSizeName
 401+ F68E CD CA 8E     .LargeSizeName:         call	NamingLoop
 402+ F691 CD CA 8E     .SmallSizeName:         call	NamingLoop
 403+ F694 CD CA 8E                             call	NamingLoop
 404+ F697 CD CA 8E                             call	NamingLoop
 405+ F69A EB           .DoneName:              ex		de,hl
 406+ F69B 36 00                                ld		(hl),0
 407+ F69D EB                                   ex		de,hl
 408+ F69E C9                                   ret
 409+ F69F
 410+ F69F 11 76 F6     GalaxySetSeedFromHL:    ld      de,GalaxyRandSeed
 411+ F6A2              ; Uses registers a,b and hl
 412+ F6A2 B7           GalaxyDoRandom:         or      a                                               ; in 6502 this is called after a bcc instruction to will always be clear (see .detok2 and .dt6)
 413+ F6A3 3A 76 F6                             ld      a,(GalaxyRandSeed)
 414+ F6A6 CB 17        .Seed0Rolled:           rl      a                                               ; r0 << 1
 415+ F6A8 47                                   ld      b,a                                             ; b = reg x in 6502 so x = r0 << 1
 416+ F6A9 21 78 F6     .AddSeed2               ld      hl,GalaxyRandSeed2                              ;
 417+ F6AC 8E                                   adc     a,(hl)                                          ; a = r0 << 1 + r2
 418+ F6AD 32 76 F6     .SetRandSeed0:          ld		(GalaxyRandSeed),a					            ; set r0' = (r0 << 1) +  r2 + (r0 bit 7)
 419+ F6B0 78                                   ld      a,b
 420+ F6B1 32 78 F6     .SetRandSeed2:          ld      (GalaxyRandSeed2),a                             ; set r2' =  r0 << 1
 421+ F6B4 3A 77 F6     .GetRandSeed1:          ld      a,(GalaxyRandSeed1)
 422+ F6B7 47                                   ld      b,a                                             ; b = r1
 423+ F6B8 21 79 F6                             ld      hl,GalaxyRandSeed3
 424+ F6BB 8E                                   adc     a,(hl)                                          ; Adc from before may have set carry flag or may not, will be set if r0 << 1 + r2 + carry > 256
 425+ F6BC 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; set r1' = r1 + r3 + carry
 426+ F6BF 4F                                   ld      c,a
 427+ F6C0 78                                   ld      a,b
 428+ F6C1 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; set r3 = r1
 429+ F6C4 79                                   ld      a,c
 430+ F6C5 C9                                   ret
 431+ F6C6
 432+ F6C6              ;------------------------------------------------------------------------------------------------------------------------------------
 433+ F6C6 ED 31        galaxy_cpy_str_a_at_hl_to_de:add     hl,a
 434+ F6C8 ED 31                                add     hl,a
 435+ F6CA 7E                                   ld      a,(hl)              ;  Fetch low byte
 436+ F6CB 47                                   ld      b,a
 437+ F6CC 23                                   inc     hl
 438+ F6CD 7E                                   ld      a,(hl)              ;  Fetch high byte
 439+ F6CE 68                                   ld      l,b
 440+ F6CF 67                                   ld      h,a
 441+ F6D0 7E           GalaxyCopyLoop:         ld      a,(hl)
 442+ F6D1 FE 00                                cp      0
 443+ F6D3 28 05                                jr      z,.CopyDone
 444+ F6D5 12                                   ld      (de),a
 445+ F6D6 23                                   inc     hl
 446+ F6D7 13                                   inc     de
 447+ F6D8 18 F6                                jr      GalaxyCopyLoop
 448+ F6DA 12           .CopyDone:              ld      (de),a
 449+ F6DB C9                                   ret
 450+ F6DC              ;------------------------------------------------------------------------------------------------------------------------------------
 451+ F6DC 11 64 F1     galaxy_get_species:     ld      de,GalaxySpecies
 452+ F6DF 3E 28                                ld      a,"("
 453+ F6E1 12                                   ld      (de),a
 454+ F6E2 13                                   inc     de
 455+ F6E3 3A FC E8                             ld      a,(GalaxyWorkingSeed+4)
 456+ F6E6 CB 7F                                bit     7,a
 457+ F6E8 20 0A                                jr      nz,.NonHuman
 458+ F6EA 21 62 F1                             ld      hl,GalaxyInhabitantHumanIx
 459+ F6ED AF                                   xor     a
 460+ F6EE CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 461+ F6F1 C3 4F F7                             jp      .galaxy_species_exit
 462+ F6F4 3A FD E8     .NonHuman:              ld      a,(GalaxyWorkingSeed+5)
 463+ F6F7 CB 3F                                srl     a
 464+ F6F9 CB 3F                                srl     a
 465+ F6FB E6 07                                and     $07
 466+ F6FD FE 03                                cp      3
 467+ F6FF 30 0A                                jr      nc,.NotDesc1
 468+ F701 21 34 F1                             ld      hl,GalaxyInhabitantDesc1Ix
 469+ F704 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 470+ F707 3E 20                                ld      a," "
 471+ F709 12                                   ld      (de),a
 472+ F70A 13                                   inc     de
 473+ F70B 3A FD E8     .NotDesc1:              ld      a,(GalaxyWorkingSeed+5)
 474+ F70E CB 3F                                srl     a
 475+ F710 CB 3F                                srl     a
 476+ F712 CB 3F                                srl     a
 477+ F714 CB 3F                                srl     a
 478+ F716 CB 3F                                srl     a
 479+ F718 FE 06                                cp      6
 480+ F71A 30 0A                                jr      nc,.NotDesc2
 481+ F71C 21 3A F1                             ld      hl,GalaxyInhabitantDesc2Ix
 482+ F71F CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 483+ F722 3E 20                                ld      a," "
 484+ F724 12                                   ld      (de),a
 485+ F725 13                                   inc     de
 486+ F726 3A F9 E8     .NotDesc2:              ld      a,(GalaxyWorkingSeed+1)
 487+ F729 47                                   ld      b,a
 488+ F72A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 489+ F72D A8                                   xor     b
 490+ F72E E6 07                                and     $07
 491+ F730 F5                                   push    af
 492+ F731 FE 06                                cp      6
 493+ F733 30 0A                                jr      nc,.NotDesc3
 494+ F735 21 46 F1                             ld      hl,GalaxyInhabitantDesc3Ix
 495+ F738 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 496+ F73B 3E 20                                ld      a," "
 497+ F73D 12                                   ld      (de),a
 498+ F73E 13                                   inc     de
 499+ F73F F1           .NotDesc3:              pop     af
 500+ F740 47                                   ld      b,a
 501+ F741 3A FD E8                             ld      a,(GalaxyWorkingSeed+5)
 502+ F744 E6 03                                and     $03
 503+ F746 80                                   add     a,b
 504+ F747 E6 07                                and     $07
 505+ F749 21 52 F1                             ld      hl,GalaxyInhabitantDesc4Ix
 506+ F74C CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 507+ F74F 3E 73        .galaxy_species_exit:   ld      a,"s"
 508+ F751 12                                   ld      (de),a
 509+ F752 13                                   inc     de
 510+ F753 3E 29                                ld      a,")"
 511+ F755 12                                   ld      (de),a
 512+ F756 13                                   inc     de
 513+ F757 AF                                   xor     a
 514+ F758 12                                   ld      (de),a
 515+ F759 C9                                   ret
 516+ F75A
 517+ F75A
 518+ F75A              ; To copy seed, loops from 3 to 0
 519+ F75A              ; copy seed X + 2 to target X
 520+ F75A              ; x = x -1
 521+ F75A
 522+ F75A              ; For lave we shoudl have "Lave is most famous for its vast rain forests and the Lavian tree grub"
 523+ F75A
 524+ F75A              GalaxyCapitaliseString: ; ">CapitaliseString hl = address"
 525+ F75A 23                                   inc		hl
 526+ F75B 7E                                   ld		a,(hl)
 527+ F75C FE 00                                cp		0
 528+ F75E C8                                   ret		z
 529+ F75F FE 5B                                cp		'Z'+1
 530+ F761 30 F7                                jr		nc,GalaxyCapitaliseString
 531+ F763 FE 41                                cp		'A'
 532+ F765 38 F3                                jr		c,GalaxyCapitaliseString
 533+ F767 C6 20        .LowerCase:             add		a,'a'-'A'
 534+ F769 77                                   ld		(hl),a
 535+ F76A 18 EE                                jr		GalaxyCapitaliseString
 536+ F76C
 537+ F76C
 538+ F76C              GalaxyGoatSoup:         ;ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 539+ F76C                                      ;call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 540+ F76C                                      ;cp      $FF
 541+ F76C                                      ;jr      z,.NoSystemFound
 542+ F76C 3A 2E 7F     .SeedGalaxy             ld      a,(WorkingSeeds+2)                              ;
 543+ F76F 32 76 F6                             ld      (GalaxyRandSeed),a                              ; r0 = Seed C
 544+ F772 3A 2F 7F                             ld      a,(WorkingSeeds+3)                              ;
 545+ F775 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; r1 = Seeed D
 546+ F778 3A 30 7F                             ld      a,(WorkingSeeds+4)                              ;
 547+ F77B 32 78 F6                             ld      (GalaxyRandSeed2),a                             ; r2 = Seed E
 548+ F77E 3A 31 7F                             ld      a,(WorkingSeeds+5)                              ;
 549+ F781 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; r3 = Seed F
 550+ F784 C9                                   ret
 551+ F785              ; For later......
 552+ F785 3E 05        .MarkExtendedDesc:      ld      a,5                                             ;  ("{lower case}{justify}{single cap}[86-90] IS [140-144].{cr}{left align}"
 553+ F787 F5           .GalaxyExpandDesc:      push    af
 554+ F788 47                                   ld      b,a                                             ; b = 6502 X reg
 555+ F789 C5                                   push    bc                                              ; save Y reg
 556+ F78A
 557+ F78A              ;------------------------------------------------------------------------------------------------------------------------------------
 558+ F78A              ; We enter here with BC = the Y and X Coordinates of the system to select in this galaxy
 559+ F78A              ; This is based on the docked BBC PDesc Pink Volcanoes version ratehr tha goat soup
 560+ F78A ED 43 5B E8  GalaxyPinkVolcano:      ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 561+ F78E CD 64 FC                             call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 562+ F791                                      ;cp      $FF
 563+ F791                                      ;jr      z,.NoSystemFound
 564+ F791              .SpecialDescs:          ; this is not implemented yet to read GalaxyExtendedDescs look at .PDL1
 565+ F791
 566+ F791
 567+ F791
 568+ F791              ;.NoSytemFound:          Print the "Unable to identify a system at present position"
 569+ F791
 570+ F791 00 00 00...  GalaxyNameCopy          DS      30
 571+ F7AF
 572+ F7AF 1E 00        ExpandAtHLToE:          ld      e,0
 573+ F7B1 7E           .ExpandTokenLoop:       ld      a,(hl)
 574+ F7B2 FE 3E                                cp      ">"
 575+ F7B4 C8                                   ret     z
 576+ F7B5 23                                   inc     hl
 577+ F7B6 16 0A                                ld      d,10
 578+ F7B8 ED 30                                mul
 579+ F7BA D6 30                                sub     "0"
 580+ F7BC 83                                   add     a,e
 581+ F7BD 5F                                   ld      e,a
 582+ F7BE 18 F1                                jr      .ExpandTokenLoop
 583+ F7C0
 584+ F7C0 E5           SelectTokenToHL:        push    hl                                          ;+1
 585+ F7C1 C5                                   push    bc                                          ;+2
 586+ F7C2 CD A2 F6                             call    GalaxyDoRandom
 587+ F7C5 C1                                   pop     bc                                          ;+1
 588+ F7C6 E1                                   pop     hl                                          ;+0
 589+ F7C7 16 00        .CalcOptionAToD:        ld      d,0
 590+ F7C9 FE 33                                cp      $33
 591+ F7CB DA CF F7                             jp      c,.Check66
 592+ F7CE 14           .IsGTE33:               inc     d
 593+ F7CF FE 66        .Check66:               cp      $66
 594+ F7D1 DA D5 F7                             jp      c,.Check99
 595+ F7D4 14           .IsGTE66:               inc     d
 596+ F7D5 FE 99        .Check99:               cp      $99
 597+ F7D7 DA DB F7     .IsGTE99:               jp      c,.CheckCC
 598+ F7DA 14                                   inc     d
 599+ F7DB FE CC        .CheckCC:               cp      $CC
 600+ F7DD 38 01                                jr      c,.TokenIdToAddress
 601+ F7DF 14           .ItGETCC:               inc     d
 602+ F7E0 21 1B EF     .TokenIdToAddress:      ld      hl,GalaxyDescList
 603+ F7E3 7B                                   ld      a,e
 604+ F7E4 CB 27                                sla     a                                               ; x 2
 605+ F7E6 ED 31                                add     hl,a                                            ; hl + a * 2
 606+ F7E8 ED 31                                add     hl,a                                            ; hl + a * 4
 607+ F7EA ED 31                                add     hl,a                                            ; hl + a * 6
 608+ F7EC ED 31                                add     hl,a                                            ; hl + a * 8
 609+ F7EE ED 31                                add     hl,a                                            ; hl + a * 10
 610+ F7F0 7A                                   ld      a,d
 611+ F7F1 ED 31                                add     hl,a
 612+ F7F3 ED 31                                add     hl,a                                            ; hl = desc array [e][d]
 613+ F7F5 7E           .LookUpDataFromTable:   ld      a,(hl)
 614+ F7F6 DD 6F                                ld      ixl,a
 615+ F7F8 23                                   inc     hl
 616+ F7F9 7E                                   ld      a,(hl)
 617+ F7FA DD 67                                ld      ixh,a                                           ; ix = address at (hl)
 618+ F7FC DD E5                                push    ix                                              ;+2
 619+ F7FE E1                                   pop     hl                                              ;+1
 620+ F7FF C9                                   ret
 621+ F800              ;------------------------------------------------------------------------------------------------------------------------------------
 622+ F800 E5           ProcessHSymbol:         push    hl                                              ;+1
 623+ F801 D5                                   push    de                                              ;+2
 624+ F802 C5                                   push    bc                                              ;+3
 625+ F803 21 91 F7     .CopyInNameH:           ld      hl, GalaxyNameCopy
 626+ F806 FD 54                                ld      d,iyh
 627+ F808 FD 5D                                ld      e,iyl
 628+ F80A CD D0 F6                             call    GalaxyCopyLoop
 629+ F80D FD 62                                ld      iyh,d
 630+ F80F FD 6B                                ld      iyl,e
 631+ F811 C1                                   pop     bc                                              ;+2
 632+ F812 D1                                   pop     de                                              ;+1
 633+ F813 E1                                   pop     hl
 634+ F814 C9                                   ret
 635+ F815              ;------------------------------------------------------------------------------------------------------------------------------------
 636+ F815 E5           ProcessISymbol:         push    hl                                              ;+1
 637+ F816 D5                                   push    de                                              ;+2
 638+ F817 C5                                   push    bc                                              ;+3
 639+ F818 21 91 F7     .CopyInNameI:           ld      hl, GalaxyNameCopy
 640+ F81B FD 54                                ld      d,iyh
 641+ F81D FD 5D                                ld      e,iyl
 642+ F81F CD D0 F6                             call    GalaxyCopyLoop
 643+ F822 FD 62                                ld      iyh,d
 644+ F824 FD 6B                                ld      iyl,e
 645+ F826 3E 69                                ld      a,"i"
 646+ F828 EB                                   ex      de,hl
 647+ F829 77                                   ld      (hl),a
 648+ F82A 23                                   inc     hl
 649+ F82B 3E 61                                ld      a,"a"
 650+ F82D 77                                   ld      (hl),a
 651+ F82E 23                                   inc     hl
 652+ F82F 3E 6E                                ld      a,"n"
 653+ F831 77                                   ld      (hl),a
 654+ F832 23                                   inc     hl
 655+ F833 E5                                   push    hl
 656+ F834 FD E1                                pop     iy
 657+ F836 C1                                   pop     bc                                              ;+2
 658+ F837 D1                                   pop     de                                              ;+1
 659+ F838 E1                                   pop     hl                                              ;+0
 660+ F839 C9                                   ret
 661+ F83A              ;------------------------------------------------------------------------------------------------------------------------------------
 662+ F83A E5           ProcessRSymbol:         push    hl                                              ;+1
 663+ F83B D5                                   push    de                                              ;+2
 664+ F83C CD A2 F6                             call    GalaxyDoRandom ;(Correct one or do we use teh clear carry version?)
 665+ F83F E6 03                                and     $03
 666+ F841 47                                   ld      b,a
 667+ F842 04                                   inc     b
 668+ F843 AF                                   xor     a
 669+ F844 4F                                   ld      c,a
 670+ F845 C5           .RLoop:                 push    bc                                              ;+3
 671+ F846 CD A2 F6                             call    GalaxyDoRandom
 672+ F849 C1                                   pop     bc                                              ;+2
 673+ F84A E6 3E                                and     $3E
 674+ F84C 21 A0 E8                             ld      hl,GalaxyName_digrams
 675+ F84F ED 31                                add     hl,a
 676+ F851 7E                                   ld      a,(hl)
 677+ F852 FE 41                                cp      "A"
 678+ F854 38 01                                jr      c,.NotLowercase
 679+ F856 81                                   add     a,c
 680+ F857 FD 77 00     .NotLowercase:          ld      (iy+0),a
 681+ F85A 23                                   inc     hl
 682+ F85B FD 23                                inc     iy
 683+ F85D 0E 20                                ld      c,$20               ; fixed force to lower case
 684+ F85F 7E                                   ld      a,(hl)
 685+ F860 FE 41                                cp      "A"
 686+ F862 38 01                                jr      c,.NotLowercase2
 687+ F864 81                                   add     a,c
 688+ F865 FD 77 00     .NotLowercase2:         ld      (iy+0),a
 689+ F868 FD 23                                inc     iy
 690+ F86A 10 D9                                djnz    .RLoop
 691+ F86C D1                                   pop     de                                              ;+1
 692+ F86D E1                                   pop     hl                                              ;+0
 693+ F86E C9                                   ret
 694+ F86F              ;------------------------------------------------------------------------------------------------------------------------------------
 695+ F86F ED 43 5B E8  GalaxyGenerateDesc:     ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 696+ F873 CD 64 FC                             call    galaxy_system_under_cursor
 697+ F876 CD BF FA     .CopySystemName:        call    galaxy_digram_seed                              ; make a local copy of system name
 698+ F879 21 7F E8                             ld      hl,GalaxyExpandedName
 699+ F87C 11 91 F7                             ld      de,GalaxyNameCopy
 700+ F87F CD D0 F6                             call    GalaxyCopyLoop
 701+ F882 21 91 F7     .CapitaliseName:        ld      hl,GalaxyNameCopy
 702+ F885 CD 5A F7                             call    GalaxyCapitaliseString
 703+ F888                                      ; we will also capitalise the local copy here later
 704+ F888 21 DE F3     .InitDescription:       ld      hl,GalaxyPlanetDescStarter                      ; Initialise galaxy description to  <14> is <22>
 705+ F88B 11 B2 F2                             ld      de,GalaxyPlanetSource
 706+ F88E CD D0 F6                             call    GalaxyCopyLoop
 707+ F891 AF           .ClearOutDescription:   xor     a
 708+ F892 21 85 F1                             ld      hl,GalaxyPlanetDescription
 709+ F895 77                                   ld      (hl),a
 710+ F896 11 86 F1                             ld      de,GalaxyPlanetDescription+1
 711+ F899 01 2C 01                             ld      bc,300                                          ; copy previous byte to current for 300 bytes (as we have DS 300 + 1)
 712+ F89C ED B0                                ldir                                                    ; zero it out, don't need this at the end but simplifies debugging
 713+ F89E CD 6C F7     .CopySeedToRandom:      call    GalaxyGoatSoup
 714+ F8A1 21 B2 F2                             ld      hl,GalaxyPlanetSource
 715+ F8A4 FD 21 85 F1                          ld      iy,GalaxyPlanetDescription
 716+ F8A8              ; At this point we are now prepped ready to expand the string to a full description
 717+ F8A8              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 718+ F8A8 7E           .ExpRecursive:          ld      a,(hl)
 719+ F8A9 FE 00                                cp      0
 720+ F8AB CA F0 F8                             jp      z,.ExpansionComplete
 721+ F8AE FE 3C                                cp      "<"
 722+ F8B0 C2 C3 F8                             jp      nz,.NotToken
 723+ F8B3 23           .ItIsAToken:            inc     hl
 724+ F8B4 CD AF F7     .ReadToken:             call    ExpandAtHLToE                                   ; here we have a <X> token
 725+ F8B7 23                                   inc     hl
 726+ F8B8 E5           .SaveCurrentPosition:   push    hl                                              ;+1 Save the current pointer to the text as we are now diverting off to another address
 727+ F8B9 CD C0 F7     .LookUpToken:           call    SelectTokenToHL                                 ; Get random token id by using d as list and e as offest against galaxydesc list and return address in hl
 728+ F8BC CD A8 F8                             call    .ExpRecursive
 729+ F8BF E1           .RestoreCurrentPosition:pop     hl                                              ;+0 get back our old HL we saved off
 730+ F8C0 C3 A8 F8     .TokenNextIteration:    jp      .ExpRecursive
 731+ F8C3              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 732+ F8C3 FE 25        .NotToken:              cp      "%"
 733+ F8C5 C2 E7 F8                             jp      nz,.RegularCharacter
 734+ F8C8 23                                   inc     hl                                              ; issue was that it was stuck on "%" and not reading the next character for the token to expand
 735+ F8C9 7E                                   ld      a,(hl)
 736+ F8CA FE 48                                cp      "H"
 737+ F8CC 20 07                                jr      nz,.IsItI
 738+ F8CE 23           .ItIsAnH:               inc     hl
 739+ F8CF CD 00 F8                             call    ProcessHSymbol
 740+ F8D2 C3 A8 F8                             jp      .ExpRecursive
 741+ F8D5 FE 49        .IsItI:                 cp      "I"
 742+ F8D7 20 07                                jr      nz,.ItIsR
 743+ F8D9 23           .ItIsAnI:               inc     hl
 744+ F8DA CD 15 F8                             call    ProcessISymbol
 745+ F8DD C3 A8 F8                             jp      .ExpRecursive
 746+ F8E0 CD 3A F8     .ItIsR:                 call    ProcessRSymbol
 747+ F8E3 23                                   inc     hl
 748+ F8E4 C3 A8 F8     .SystemNextIteration:   jp      .ExpRecursive
 749+ F8E7 FD 77 00     .RegularCharacter:      ld      (iy+0),a
 750+ F8EA FD 23                                inc     iy
 751+ F8EC 23                                   inc     hl
 752+ F8ED C3 A8 F8     .RegularNextIteration:  jp      .ExpRecursive
 753+ F8F0 AF           .ExpansionComplete:     xor     a
 754+ F8F1 FD 77 01                             ld      (iy+1),a    ; will thsi work as a bodge
 755+ F8F4 C9                                   ret
 756+ F8F5              ;----------------------------------------------------------------------------------------------------------------------------------
 757+ F8F5 3A 0C E9     galaxy_equip_market:    ld      a,(GalaxyDisplayTekLevel)
 758+ F8F8 3C                                   inc     a
 759+ F8F9 67                                   ld      h,a
 760+ F8FA 0E 00                                ld      c,0
 761+ F8FC 06 1A                                ld      b,ShipEquipTableSize            ;NO_OF_EQUIP_ITEMS
 762+ F8FE 11 10 00                             ld      de,ShipEquipTableRowLen         ; Bytes per row
 763+ F901 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 764+ F905 DD 7E 06     .ItemCheckLoop:         ld      a,(ix+6)                        ; is it type fuel
 765+ F908 FE 00                                cp      0
 766+ F90A                                      ; Check Cash TODO
 767+ F90A 28 00                                jr      z,.CheckTechLevel
 768+ F90C DD 7E 03     .CheckTechLevel:        ld      a,(ix+3)                        ; ItemTech Level
 769+ F90F BC                                   cp      h
 770+ F910                                      ;jr      nc,.DoNotShowItem
 771+ F910 DD 7E 02     .CheckShowItem:         ld      a,(ix+2)
 772+ F913 FE 00                                cp      0
 773+ F915                                    ;  jr      z,.DoNotShowItem
 774+ F915 79           .ShowItem:              ld      a,c
 775+ F916 DD 71 01                             ld      (ix+1),c                        ; Show Item Row Id
 776+ F919 DD 7E 06     .CheckFitted:           ld      a,(ix+6)
 777+ F91C FE 00                                cp      EQ_FUEL
 778+ F91E 28 18                                jr      z,.FuelLevel
 779+ F920 FE 01                                cp      EQ_MISSILE
 780+ F922 28 25                                jr      z,.CountMissiles
 781+ F924 21 1B 84     .IsFitted:              ld      hl,EquipmentFitted
 782+ F927 ED 31                                add     hl,a
 783+ F929 7E                                   ld      a,(hl)
 784+ F92A FE 00                                cp      0
 785+ F92C 28 05                                jr      z,.NotFittedItem
 786+ F92E 3E 2A        .FittedItem:            ld      a,"*"
 787+ F930 C3 5A F9                             jp      .MoreToDoCheck
 788+ F933 3E 2D        .NotFittedItem:         ld      a,"-"
 789+ F935 C3 5A F9                             jp      .MoreToDoCheck
 790+ F938 3A 00 84     .FuelLevel:             ld      a,(Fuel)
 791+ F93B FE 46                                cp      MaxFuelLevel
 792+ F93D 28 05                                jr      z,.FullFuel
 793+ F93F 3E 2D        .NotFullFuel:           ld      a,"-"
 794+ F941 C3 5A F9                             jp      .MoreToDoCheck
 795+ F944 3E 2A        .FullFuel               ld      a,"*"                           ; later on do 3 starts low, med,full
 796+ F946 C3 5A F9                             jp      .MoreToDoCheck
 797+ F949 3A 4B 7F     .CountMissiles:         ld      a,(NbrMissiles)
 798+ F94C FE 00                                cp      0
 799+ F94E 28 05                                jr      z,.NoMissiles
 800+ F950 C6 30                                add     "0"
 801+ F952 C3 5A F9                             jp      .MoreToDoCheck
 802+ F955 3E 2D        .NoMissiles:            ld      a,"-"
 803+ F957 C3 5A F9                             jp      .MoreToDoCheck
 804+ F95A DD 77 07     .MoreToDoCheck:         ld      (ix+7),a                        ; update fitted status
 805+ F95D 0C                                   inc     c
 806+ F95E DD 19                                add     ix,de
 807+ F960 10 A3                                djnz    .ItemCheckLoop
 808+ F962 C9                                   ret
 809+ F963 3E FF        .DoNotShowItem          ld      a,$FF                           ; $FF = hide
 810+ F965 DD 77 01                             ld      (ix+1),a
 811+ F968 DD 19                                add     ix,de
 812+ F96A 10 99                                djnz    .ItemCheckLoop
 813+ F96C C9                                   ret
 814+ F96D              ;----------------------------------------------------------------------------------------------------------------------------------
 815+ F96D 3A FA E8     galaxy_planet_data:     ld      a,(GalaxyWorkingSeed+2)
 816+ F970 B7           .GenerateGovernment:    or      a
 817+ F971 CB 3F                                srl	    a                                               ; Government = seed2 / 8 & 7
 818+ F973 CB 3F                                srl	    a
 819+ F975 CB 3F                                srl	    a                                                   ;
 820+ F977 E6 07                                and     $07                                             ;
 821+ F979 32 0A E9                             ld      (GalaxyDisplayGovernment),a                     ;
 822+ F97C 3A F9 E8     .GenerateEconomy:       ld      a,(GalaxyWorkingSeed+1)
 823+ F97F E6 07                                and     $07
 824+ F981 47                                   ld      b,a
 825+ F982 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 826+ F985                                      JumpIfAGTENusng 1, .GreaterThan1
 826+ F985 FE 01       >                        cp     1
 826+ F987 D2 93 F9    >                        jp		nc,.GreaterThan1
 827+ F98A 78           .OneOrZero:             ld      a,b
 828+ F98B F6 02                                or      2
 829+ F98D 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 830+ F990 C3 97 F9                             jp      .GenerateTechLevel
 831+ F993 78           .GreaterThan1:          ld      a,b
 832+ F994 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 833+ F997 EE 07        .GenerateTechLevel:     xor     $07                                             ; tech = economy xor 7 + seed3 & 3 + government /2 + fovernemnt & 1
 834+ F999 47                                   ld      b,a
 835+ F99A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 836+ F99D E6 03                                and     $03
 837+ F99F 80                                   add     b
 838+ F9A0 47                                   ld      b,a
 839+ F9A1 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 840+ F9A4 4F                                   ld      c,a
 841+ F9A5 CB 2F                                sra     a
 842+ F9A7 80                                   add     b
 843+ F9A8 47                                   ld      b,a
 844+ F9A9 79                                   ld      a,c
 845+ F9AA E6 01                                and     $1
 846+ F9AC 80                                   add     b
 847+ F9AD 32 0C E9                             ld      (GalaxyDisplayTekLevel),a
 848+ F9B0 CB 27        .GeneratePopulation:    sla     a                                               ; population = tech level * 4 + government + economy + 1
 849+ F9B2 CB 27                                sla     a
 850+ F9B4 21 0A E9                             ld      hl,GalaxyDisplayGovernment
 851+ F9B7 86                                   add     a,(hl)
 852+ F9B8 47                                   ld      b,a
 853+ F9B9 3A 0B E9                             ld      a,(GalaxyDisplayEconomy)
 854+ F9BC 80                                   add     a,b
 855+ F9BD 3C                                   inc     a
 856+ F9BE 32 0D E9                             ld      (GalaxyDisplayPopulation),a
 857+ F9C1 3A 0B E9     .GenerateProductivity:  ld      a,(GalaxyDisplayEconomy)
 858+ F9C4 EE 07                                xor     7
 859+ F9C6 C6 03                                add     3
 860+ F9C8 57                                   ld      d,a
 861+ F9C9 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 862+ F9CC C6 04                                add     4
 863+ F9CE 5F                                   ld      e,a
 864+ F9CF ED 30                                mul                                                     ; the next mulitply will be a 16 bit value
 865+ F9D1 3A 0D E9                             ld      a,(GalaxyDisplayPopulation)
 866+ F9D4 26 00                                ld      h,0
 867+ F9D6 6F                                   ld      l,a
 868+ F9D7 CD 84 90                             call    mulDEbyHL
 869+ F9DA EB                                   ex      de,hl
 870+ F9DB                                      ShiftDELeft1
 870+ F9DB CB 23       >			   sla e
 870+ F9DD CB 12       >			   rl  d
 871+ F9DF                                      ShiftDELeft1
 871+ F9DF CB 23       >			   sla e
 871+ F9E1 CB 12       >			   rl  d
 872+ F9E3                                      ShiftDELeft1
 872+ F9E3 CB 23       >			   sla e
 872+ F9E5 CB 12       >			   rl  d
 873+ F9E7 ED 53 0E E9                          ld      (GalaxyDisplayProductivity),de
 874+ F9EB 3A FD E8     .GenerateRadius:        ld		a,(GalaxyWorkingSeed+5)                         ;radius min = 256*11 = 2816 km
 875+ F9EE E6 0F                                and		$0F
 876+ F9F0 C6 0B                                add     11
 877+ F9F2 47                                   ld      b,a
 878+ F9F3 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 879+ F9F6 4F                                   ld      c,a
 880+ F9F7 ED 43 10 E9                          ld      (GalaxyDisplayRadius),bc
 881+ F9FB C9                                   ret
 882+ F9FC
 883+ F9FC              galaxy_master_seed_to_system:
 884+ F9FC 21 10 E0     		ld		hl,galaxy_master_seed
 885+ F9FF 11 14 7F     		ld		de,SystemSeed
 886+ FA02              galaxy_copy_seed:
 887+ FA02 ED A0        		ldi
 888+ FA04 ED A0        		ldi
 889+ FA06 ED A0        		ldi
 890+ FA08 ED A0        		ldi
 891+ FA0A ED A0        		ldi
 892+ FA0C ED A0        		ldi
 893+ FA0E C9           		ret
 894+ FA0F
 895+ FA0F              galaxy_master_to_galaxy_working:
 896+ FA0F 21 10 E0     		ld		hl,galaxy_master_seed
 897+ FA12 11 F8 E8     		ld		de,GalaxyWorkingSeed
 898+ FA15 18 EB        		jr		galaxy_copy_seed
 899+ FA17
 900+ FA17              galaxy_master_to_galaxy_naming:
 901+ FA17 21 10 E0     		ld		hl,galaxy_master_seed
 902+ FA1A 11 FE E8     		ld		de,GalaxyNamingSeed
 903+ FA1D 18 E3        		jr		galaxy_copy_seed
 904+ FA1F
 905+ FA1F              working_seed_to_galaxy_working:
 906+ FA1F 21 2C 7F             ld      hl,WorkingSeeds
 907+ FA22 11 F8 E8     		ld		de,GalaxyWorkingSeed
 908+ FA25 18 DB        		jr		galaxy_copy_seed
 909+ FA27
 910+ FA27              working_seed_to_galaxy_naming:
 911+ FA27 21 2C 7F             ld      hl,WorkingSeeds
 912+ FA2A 11 FE E8     		ld		de,GalaxyNamingSeed
 913+ FA2D 18 D3        		jr		galaxy_copy_seed
 914+ FA2F
 915+ FA2F              galaxy_ix_seed_to_galaxy_naming:
 916+ FA2F DD E5                push    ix
 917+ FA31 E1                   pop     hl
 918+ FA32 11 FE E8     		ld		de,GalaxyNamingSeed
 919+ FA35 18 CB        		jr		galaxy_copy_seed
 920+ FA37
 921+ FA37
 922+ FA37              galaxy_working_seed_to_galaxy_naming:
 923+ FA37 21 F8 E8             ld      hl,GalaxyWorkingSeed
 924+ FA3A 11 FE E8     		ld		de,GalaxyNamingSeed
 925+ FA3D 18 C3        		jr		galaxy_copy_seed
 926+ FA3F
 927+ FA3F              galaxy_working_seed_to_system:
 928+ FA3F 21 F8 E8     		ld		hl,GalaxyWorkingSeed
 929+ FA42 11 14 7F     		ld		de,SystemSeed
 930+ FA45 18 BB        		jr		galaxy_copy_seed
 931+ FA47
 932+ FA47              system_seed_to_galaxy_working:
 933+ FA47 21 14 7F     		ld		hl,SystemSeed
 934+ FA4A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 935+ FA4D 18 B3        		jr		galaxy_copy_seed
 936+ FA4F
 937+ FA4F
 938+ FA4F              system_seed_to_galaxy_naming:
 939+ FA4F 21 14 7F     		ld		hl,SystemSeed
 940+ FA52 11 FE E8     		ld		de,GalaxyNamingSeed
 941+ FA55 18 AB        		jr		galaxy_copy_seed
 942+ FA57
 943+ FA57              ix_seed_to_galaxy_working:
 944+ FA57 DD E5                push    ix
 945+ FA59 E1                   pop     hl
 946+ FA5A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 947+ FA5D 18 A3        		jr		galaxy_copy_seed
 948+ FA5F
 949+ FA5F              ; Here we twist just once rather than the usual4 for a system
 950+ FA5F 3A FE E8     NextGalaxyNamingSeed:   ld		a,(GalaxyNamingSeed)			; QQ15 ; x = a + c
 951+ FA62 B7                                   or		a							; clear carry flag
 952+ FA63 21 00 E9                             ld		hl,GalaxyNamingSeed+2			; hl -> qq+2 [c]
 953+ FA66 86                                   add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
 954+ FA67 47                                   ld		b,a							; partial sum lo [x]
 955+ FA68              ; y = b + d	+ carry
 956+ FA68 3A FF E8                             ld		a,(GalaxyNamingSeed+1)          ; [b]
 957+ FA6B 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
 958+ FA6E 8E                                   adc		a,(hl)						; note add with carry
 959+ FA6F 4F                                   ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
 960+ FA70 3A 00 E9                             ld		a,(GalaxyNamingSeed+2)
 961+ FA73 32 FE E8                             ld		(GalaxyNamingSeed+0),a			; copy qq152 to qq150 [a] = [c]
 962+ FA76 3A 01 E9                             ld		a,(GalaxyNamingSeed+3)
 963+ FA79 32 FF E8                             ld		(GalaxyNamingSeed+1),a			; copy qq153 to qq151 [b] = [d]
 964+ FA7C 3A 03 E9                             ld		a,(GalaxyNamingSeed+5)
 965+ FA7F 32 01 E9                             ld		(GalaxyNamingSeed+3),a			; copy qq155 to qq153 [d] = [f]
 966+ FA82 3A 02 E9                             ld		a,(GalaxyNamingSeed+4)
 967+ FA85 32 00 E9                             ld		(GalaxyNamingSeed+2),a			; copy qq154 to qq152 [c] = [e]
 968+ FA88 B7                                   or		a
 969+ FA89 78                                   ld		a,b
 970+ FA8A 21 00 E9                             ld		hl,GalaxyNamingSeed+2		    ; hl -> qq+2
 971+ FA8D 86                                   add	    a,(hl)
 972+ FA8E 32 02 E9                             ld		(GalaxyNamingSeed+4),a			; e = x + [c]
 973+ FA91 79                                   ld		a,c
 974+ FA92 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 )we don't inc as it affects carry)
 975+ FA95 8E                                   adc		a,(hl)
 976+ FA96 32 03 E9                             ld		(GalaxyNamingSeed+5),a			; f = y + [d] + carry
 977+ FA99 C9                                   ret
 978+ FA9A
 979+ FA9A
 980+ FA9A 3A 03 E9     GalaxyNamingLoop:       ld		a,(GalaxyNamingSeed+5)	        ; a = first byte of name seed
 981+ FA9D E6 1F                                and 	$1F					            ; Keep bottom 5 bits only
 982+ FA9F FE 00                                cp		0					            ; 0 = skip 2 chars
 983+ FAA1 28 12                                jr		z,.SkipPhrase
 984+ FAA3 C6 0C                                add		a,12
 985+ FAA5 CB 27                                sla		a					            ; phrase = (a+12)*2
 986+ FAA7 21 A0 E8                             ld		hl,GalaxyName_digrams
 987+ FAAA ED 31                                add		hl,a
 988+ FAAC ED A0                                ldi
 989+ FAAE 7E                                   ld		a,(hl)
 990+ FAAF FE 3F                                cp		'?'
 991+ FAB1 28 02                                jr		z,.SkipPhrase
 992+ FAB3 ED A0        .AddExtra:              ldi
 993+ FAB5 D5           .SkipPhrase:            push	de
 994+ FAB6 CD 5F FA                             call	NextGalaxyNamingSeed
 995+ FAB9 D1                                   pop		de
 996+ FABA C9                                   ret
 997+ FABB
 998+ FABB              ; takes location in BC, finds seed and expands the name
 999+ FABB ED 43 5B E8  galaxy_name_at_bc:      ld      (GalaxyTargetSystem),bc
1000+ FABF CD 64 FC     galaxy_digram_seed:     call    galaxy_system_under_cursor
1001+ FAC2 FE 00                                cp      0
1002+ FAC4 C8                                   ret     z
1003+ FAC5
1004+ FAC5 CD 27 FA     GalaxyDigramWorkings:   call    working_seed_to_galaxy_naming
1005+ FAC8 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1006+ FACB
1007+ FACB CD 17 FA     GalaxyDigramSeed:       call    galaxy_master_to_galaxy_naming
1008+ FACE C3 E0 FA                             jp      GalaxyDigramNamingSeed
1009+ FAD1
1010+ FAD1 CD 37 FA     GalaxyDigramWorkingSeed:call    galaxy_working_seed_to_galaxy_naming
1011+ FAD4 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1012+ FAD7
1013+ FAD7 CD 2F FA     GalaxyDigramWIXSeed:    call    galaxy_ix_seed_to_galaxy_naming
1014+ FADA C3 E0 FA                             jp      GalaxyDigramNamingSeed
1015+ FADD
1016+ FADD CD 4F FA     SystemGetDigramSeed:    call    system_seed_to_galaxy_naming
1017+ FAE0
1018+ FAE0 11 7F E8     GalaxyDigramNamingSeed: ld		de,GalaxyExpandedName
1019+ FAE3 06 03        GalaxyDigramToDE:       ld		b,3
1020+ FAE5 3A FE E8                             ld		a,(GalaxyNamingSeed)
1021+ FAE8 E6 40                                and		$40
1022+ FAEA 28 03                                jr		z,.SmallSizeName
1023+ FAEC CD 9A FA     .LargeSizeName:         call	GalaxyNamingLoop
1024+ FAEF CD 9A FA     .SmallSizeName:         call	GalaxyNamingLoop
1025+ FAF2 CD 9A FA                             call	GalaxyNamingLoop
1026+ FAF5 CD 9A FA                             call	GalaxyNamingLoop
1027+ FAF8 EB           .DoneName:              ex		de,hl
1028+ FAF9 36 00                                ld		(hl),0
1029+ FAFB EB                                   ex		de,hl
1030+ FAFC AF                                   xor     a
1031+ FAFD 3D                                   dec     a
1032+ FAFE C9                                   ret
1033+ FAFF              ;reorte X 13 Y 97
1034+ FAFF
1035+ FAFF              ;----------------------------------------------------------------------------------------------------------------------------------
1036+ FAFF 3A 5D E8     is_system_found:        ld      a,(GalaxySearchLength)
1037+ FB02                                      ;dec     a                       ; as we won't check the /0 just first match
1038+ FB02 4F                                   ld      c,a                     ; will always be max of 32 as that is what length routine does
1039+ FB03 06 00                                ld      b,0                     ; so we can use cpir
1040+ FB05 11 5E E8     .readyToSearch:         ld      de,GalaxySearchString   ; hl = string we are serching
1041+ FB08 21 7F E8                             ld      hl,GalaxyExpandedName   ; de = the expanded galaxy name
1042+ FB0B 7E           .searchLoop:            ld      a,(hl)                  ; if the string is too short then maybe there is a longer one to find
1043+ FB0C                                      JumpIfAIsZero   .noMatch        ; but
1043+ FB0C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1043+ FB0D CA 1B FB    >                        jp	    z, .noMatch
1044+ FB10 1A                                   ld      a,(de)                  ; get the character to search for
1045+ FB11 ED A1                                cpi                             ; compare with value in A from HL
1046+ FB13 20 06                                jr      nz,.noMatch
1047+ FB15 13                                   inc     de                      ; move to next search character
1048+ FB16 E2 1E FB                             jp      po, .matched            ; if c = 0 then we have hit the bingpot
1049+ FB19 18 F0                                jr      .searchLoop             ; else keep looping
1050+ FB1B              .noMatch:               SetAFalse
1050+ FB1B 3E FF       >                        ld      a,$FF
1051+ FB1D C9                                   ret
1052+ FB1E              .matched:               SetATrue
1052+ FB1E AF          >                        xor     a
1053+ FB1F C9                                   ret
1054+ FB20
1055+ FB20 21 5E E8     set_galaxy_search_len:  ld      hl,GalaxySearchString
1056+ FB23 06 00                                ld      b,0
1057+ FB25 0E 20                                ld      c,32                    ; limiter for missing /0
1058+ FB27 7E           .SearchLoop:            ld      a,(hl)
1059+ FB28                                      JumpIfAIsZero .foundLength
1059+ FB28 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1059+ FB29 CA 34 FB    >                        jp	    z, .foundLength
1060+ FB2C 04                                   inc     b
1061+ FB2D 0D                                   dec     c
1062+ FB2E 28 04                                jr      z,.foundLength
1063+ FB30 23                                   inc     hl
1064+ FB31 C3 27 FB                             jp      .SearchLoop
1065+ FB34 78           .foundLength:           ld      a,b
1066+ FB35 32 5D E8                             ld      (GalaxySearchLength),a
1067+ FB38 C9                                   ret
1068+ FB39
1069+ FB39              ; find system by searching for GalaxySearchString
1070+ FB39 CD 20 FB     find_system_by_name:    call    set_galaxy_search_len
1071+ FB3C AF                                   xor     a
1072+ FB3D 32 A1 7E                             ld      (XSAV),a
1073+ FB40 DD 21 16 E0                          ld      ix,galaxy_data
1074+ FB44 CD 57 FA     .nextSystem:            call    ix_seed_to_galaxy_working
1075+ FB47 CD D1 FA                             call    GalaxyDigramWorkingSeed
1076+ FB4A CD FF FA                             call    is_system_found
1077+ FB4D                                      JumpIfATrue .FoundAtIX
1077+ FB4D A7          >                        and     a
1077+ FB4E CA 6A FB    >                        jp      z, .FoundAtIX
1078+ FB51 3A A1 7E     .notFoundYet:           ld      a,(XSAV)
1079+ FB54 3D                                   dec     a
1080+ FB55 28 10                                jr      z,.NoMoreSystems
1081+ FB57 32 A1 7E     .moreToSearch:          ld      (XSAV),a
1082+ FB5A DD E5                                push    ix
1083+ FB5C E1                                   pop     hl
1084+ FB5D ED 34 08 00                          add     hl,8
1085+ FB61 E5                                   push    hl
1086+ FB62 DD E1                                pop     ix
1087+ FB64 C3 44 FB                             jp      .nextSystem
1088+ FB67 3E FF        .NoMoreSystems:         ld      a,$FF
1089+ FB69 C9                                   ret
1090+ FB6A CD 57 FA     .FoundAtIX              call    ix_seed_to_galaxy_working
1091+ FB6D C9                                   ret
1092+ FB6E              ;----------------------------------------------------------------------------------------------------------------------------------
1093+ FB6E 00 00        nearestfound:           DW 0
1094+ FB70              ; In here de carries current nearest and loads into nearest found
1095+ FB70              ; does a basic distance check for x then y each under threshold, then does x+y under threshold  jsut in case we have an extreme like 0 x and high dist y
1096+ FB70 DD 21 16 E0  find_nearest_to_bc:     ld      ix,galaxy_data
1097+ FB74 FD 26 00                             ld      iyh,0
1098+ FB77 FD 2E 78                             ld      iyl,120
1099+ FB7A ED 43 6E FB                          ld      (nearestfound),bc
1100+ FB7E DD 7E 03     find_nearest_loop:      ld      a,(ix+3)                        ;
1101+ FB81 5F                                   ld      e,a                             ; e= current seed x
1102+ FB82                                      JumpIfALTNusng c, nearestXPosLT         ; not we need to know if its e - c or c - e we coudl do 2's compliement of course
1102+ FB82 B9          >                        cp      c
1102+ FB83 DA 94 FB    >                        jp		c, nearestXPosLT
1103+ FB86 D5           nearestXPosGTE:         push    de                              ;
1104+ FB87 26 00                                ld      h,0                             ;
1105+ FB89 6F                                   ld      l,a                             ; hl = seed x
1106+ FB8A 16 00                                ld      d,0                             ;
1107+ FB8C 59                                   ld      e,c                             ; de = nearest x
1108+ FB8D B7                                   or      a                               ;
1109+ FB8E ED 52                                sbc     hl,de                           ; hl = distance between the two
1110+ FB90 D1                                   pop     de
1111+ FB91 C3 9E FB                             jp      nearestDistXPos
1112+ FB94 D5           nearestXPosLT:          push    de                              ;
1113+ FB95 26 00                                ld      h,0                             ;
1114+ FB97 69                                   ld      l,c                             ; hl = nearest x
1115+ FB98 16 00                                ld      d,0                             ;
1116+ FB9A B7                                   or      a                               ; de = seed x
1117+ FB9B ED 52                                sbc     hl,de                           ;
1118+ FB9D D1                                   pop     de                              ; hl = distance between the two
1119+ FB9E 7D           nearestDistXPos:        ld      a,l                             ; so l = abs distance as does a
1120+ FB9F FD BD                                cp      iyl                             ; under initial threshold?
1121+ FBA1 30 3D                                jr      nc,find_nearest_miss            ; no so its a miss
1122+ FBA3               ;DEBUG                       ld      l,a                             ; l = distance (we can drop thsi as it was done above!)
1123+ FBA3 DD 7E 01                             ld      a,(ix+1)                        ;
1124+ FBA6 57                                   ld      d,a                             ; d = seed y
1125+ FBA7                                      JumpIfALTNusng b, nearestYPosLT         ; determine abs calc
1125+ FBA7 B8          >                        cp      b
1125+ FBA8 DA BC FB    >                        jp		c, nearestYPosLT
1126+ FBAB E5           nearestYPosGTE:         push    hl                              ; save current x distance
1127+ FBAC D5                                   push    de                              ;
1128+ FBAD 26 00                                ld      h,0                             ;
1129+ FBAF 6F                                   ld      l,a                             ; hl = seed y
1130+ FBB0 16 00                                ld      d,0                             ;
1131+ FBB2 58                                   ld      e,b                             ; de = nearest y
1132+ FBB3 B7                                   or      a                               ;
1133+ FBB4 ED 52                                sbc     hl,de                           ; hl = distance between the two
1134+ FBB6 7D                                   ld      a,l
1135+ FBB7 D1                                   pop     de
1136+ FBB8 E1                                   pop     hl
1137+ FBB9 C3 CA FB                             jp      nearestDistYPos
1138+ FBBC E5           nearestYPosLT:          push    hl                              ; save current x distance
1139+ FBBD D5                                   push    de                              ;
1140+ FBBE 26 00                                ld      h,0                             ;
1141+ FBC0 68                                   ld      l,b                             ; hl = nearest y
1142+ FBC1 5A                                   ld      e,d                             ;
1143+ FBC2 16 00                                ld      d,0                             ; de = seed y
1144+ FBC4 B7                                   or      a                               ;
1145+ FBC5 ED 52                                sbc     hl,de                           ; hl = distance between the two
1146+ FBC7 7D                                   ld      a,l
1147+ FBC8 D1                                   pop     de
1148+ FBC9 E1                                   pop     hl                              ; now we get distance in l back into hl, distance y is in a
1149+ FBCA FD BD        nearestDistYPos:        cp      iyl                             ; under initial threshold?
1150+ FBCC 30 12                                jr      nc, find_nearest_miss
1151+ FBCE 26 00                                ld      h,0                             ; hl = distance for x
1152+ FBD0 ED 31                                add     hl,a                            ; adding distance y
1153+ FBD2 7D                                   ld      a,l                             ; and copy it to l
1154+ FBD3 FD BD                                cp      iyl                             ; is the pair under distance
1155+ FBD5 30 09                                jr      nc, find_nearest_miss           ;
1156+ FBD7 FD 6F        nearest_found_a_hit:    ld      iyl,a                           ; so we have a hit
1157+ FBD9 ED 53 6E FB                          ld      (nearestfound),de               ;
1158+ FBDD                                      ReturnIfALTNusng 2                      ; exact match bail out, note 1 can be an exact match due to Y axis, as we are looking at seed pos then this is accurate enough and we won't hit dx 1 and dy 0 hopefully in any galaxy :)
1158+ FBDD FE 02       >                        cp    2
1158+ FBDF D8          >                        ret	 c
1159+ FBE0 DD E5        find_nearest_miss:      push     ix
1160+ FBE2 E1                                   pop      hl
1161+ FBE3 ED 34 08 00                          add      hl,8
1162+ FBE7 E5                                   push     hl
1163+ FBE8 DD E1                                pop      ix
1164+ FBEA FD 25                                dec     iyh
1165+ FBEC FD 7C                                ld      a,iyh
1166+ FBEE                                      JumpIfAIsNotZero find_nearest_loop
1166+ FBEE A7          >                        and     a
1166+ FBEF C2 7E FB    >                        jp	    nz,find_nearest_loop
1167+ FBF2 ED 4B 6E FB                          ld      bc ,(nearestfound)              ; if we hit here then after searching we have found a nearest
1168+ FBF6 C9                                   ret
1169+ FBF7              ;----------------------------------------------------------------------------------------------------------------------------------
1170+ FBF7              ; Does a sqare root distance
1171+ FBF7 16 00        galaxy_find_distance:   ld      d,0
1172+ FBF9 26 00                                ld      h,0
1173+ FBFB 3A 57 E8                             ld      a,(GalaxyPresentSystem)
1174+ FBFE 47                                   ld      b,a
1175+ FBFF 3A 59 E8                             ld      a,(GalaxyDestinationSystem)
1176+ FC02 B8                                   cp      b
1177+ FC03 20 0E                                jr      nz,.NotSame
1178+ FC05 C5           .XSame:                 push    bc
1179+ FC06 F5                                   push    af
1180+ FC07 3A 58 E8                             ld      a,(GalaxyPresentSystem+1)
1181+ FC0A 47                                   ld      b,a
1182+ FC0B 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1183+ FC0E B8                                   cp      b
1184+ FC0F C1                                   pop     bc
1185+ FC10 F1                                   pop     af
1186+ FC11 28 49                                jr      z,.ZeroDistance
1187+ FC13 30 08        .NotSame:               jr      nc,.DestinationGTEPresentX
1188+ FC15 68           .DestinationLTPresentX: ld      l,b
1189+ FC16 5F                                   ld      e,a
1190+ FC17 B7                                   or      a
1191+ FC18 ED 52                                sbc     hl,de
1192+ FC1A C3 22 FC                             jp      .SquareXDist
1193+ FC1D 6F           .DestinationGTEPresentX:ld      l,a
1194+ FC1E 58                                   ld      e,b
1195+ FC1F B7                                   or      a
1196+ FC20 ED 52                                sbc     hl,de
1197+ FC22 55           .SquareXDist:           ld      d,l
1198+ FC23 5D                                   ld      e,l
1199+ FC24 ED 30                                mul
1200+ FC26 3A 58 E8     .CalcYDistSq            ld      a,(GalaxyPresentSystem+1)
1201+ FC29 47                                   ld      b,a
1202+ FC2A 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1203+ FC2D B8                                   cp      b
1204+ FC2E 30 0B                                jr      nc,.DestinationGTEPresentY
1205+ FC30 4F           .DestinationLTPresentY: ld      c,a
1206+ FC31 68                                   ld      l,b
1207+ FC32 06 00                                ld      b,0
1208+ FC34 26 00                                ld      h,0
1209+ FC36 ED 42                                sbc     hl,bc
1210+ FC38 C3 43 FC                             jp      .DestinationYDone
1211+ FC3B 48           .DestinationGTEPresentY:ld      c,b
1212+ FC3C 6F                                   ld      l,a
1213+ FC3D 06 00                                ld      b,0
1214+ FC3F 26 00                                ld      h,0
1215+ FC41 ED 42                                sbc     hl,bc
1216+ FC43 CB 2D        .DestinationYDone:      sra     l                   ; divide L by 2 for galaxy size
1217+ FC45 7D                                   ld      a,l
1218+ FC46 EB                                   ex      de,hl
1219+ FC47 57                                   ld      d,a
1220+ FC48 5F                                   ld      e,a
1221+ FC49 ED 30        .SquareYDist:           mul
1222+ FC4B 19                                   add     hl,de
1223+ FC4C EB                                   ex      de,hl
1224+ FC4D CD 81 91                             call    asm_sqrt            ; distance via pythagoras in hl
1225+ FC50                                      ShiftHLLeft1
1225+ FC50 CB 25       >			   sla l
1225+ FC52 CB 14       >			   rl  h
1226+ FC54                                      ShiftHLLeft1                ; Multiply by 4 to get distance
1226+ FC54 CB 25       >			   sla l
1226+ FC56 CB 14       >			   rl  h
1227+ FC58 22 60 7F                             ld      (Distance),hl       ; Distance is now caulated distance
1228+ FC5B C9                                   ret
1229+ FC5C AF           .ZeroDistance:          xor     a
1230+ FC5D 32 60 7F                             ld      (Distance),a
1231+ FC60 32 61 7F                             ld      (Distance+1),a
1232+ FC63 C9                                   ret
1233+ FC64              ;----------------------------------------------------------------------------------------------------------------------------------
1234+ FC64              ; Find the systems pointed to by GalaxyTargetSystem and loads it into WorkingSeeds
1235+ FC64              ; this needs to chagne to galaxyresultseed or galayxworkingseed
1236+ FC64 AF           galaxy_system_under_cursor:xor     a
1237+ FC65 32 A1 7E                             ld		(XSAV),a
1238+ FC68 DD 21 16 E0                          ld      ix,galaxy_data
1239+ FC6C 2A 5B E8     .GCCounterLoop:         ld      hl,(GalaxyTargetSystem)
1240+ FC6F DD E5                                push    ix
1241+ FC71 7D                                   ld      a,l
1242+ FC72 DD BE 03                             cp      (ix+3)                          ; seed x
1243+ FC75 20 14                                jr      nz,.ItsNotThisX
1244+ FC77 7C                                   ld      a,h
1245+ FC78 DD BE 01                             cp      (ix+1)                          ; seed x
1246+ FC7B 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
1247+ FC7D DD E5                                push    ix
1248+ FC7F E1                                   pop     hl
1249+ FC80 11 2C 7F                             ld      de,WorkingSeeds                 ;' copy to wkring Seeds
1250+ FC83 CD 90 84                             call    copy_seed
1251+ FC86 3E FF                                ld      a,$FF
1252+ FC88 DD E1                                pop     ix
1253+ FC8A C9                                   ret
1254+ FC8B E1           .ItsNotThisX:           pop     hl
1255+ FC8C ED 34 08 00                          add     hl,8
1256+ FC90 E5                                   push    hl
1257+ FC91 DD E1                                pop     ix
1258+ FC93 3A A1 7E                             ld		a,(XSAV)
1259+ FC96 3D                                   dec		a
1260+ FC97 32 A1 7E                             ld      (XSAV),a
1261+ FC9A FE 00                                cp		0
1262+ FC9C C8                                   ret		z
1263+ FC9D 18 CD                                jr		.GCCounterLoop
1264+ FC9F              ;----------------------------------------------------------------------------------------------------------------------------------
1265+ FC9F 21 14 7F     SeedGalaxy:             ld      hl,SystemSeed                   ; First copy system seed to galaxy master
1266+ FCA2 11 10 E0                             ld      de,galaxy_master_seed           ; .
1267+ FCA5 ED A0                                ldi                                     ; .
1268+ FCA7 ED A0                                ldi                                     ; .
1269+ FCA9 ED A0                                ldi                                     ; .
1270+ FCAB ED A0                                ldi                                     ; .
1271+ FCAD ED A0                                ldi                                     ; .
1272+ FCAF ED A0                                ldi                                     ; .
1273+ FCB1 DD 21 16 E0                          ld      ix,galaxy_data                  ; Generate system seed data for each planet
1274+ FCB5 AF                                   xor		a                               ; .
1275+ FCB6 32 A1 7E                             ld		(XSAV),a                        ; .
1276+ FCB9 DD E5        SeedGalaxyLoop:         push    ix                              ; .
1277+ FCBB D1                                   pop     de                              ; .
1278+ FCBC 21 14 7F                             ld      hl,SystemSeed                   ; .
1279+ FCBF CD 90 84                             call    copy_seed                       ; .
1280+ FCC2 DD E5                                push    ix                              ; .
1281+ FCC4 E1                                   pop     hl                              ; .
1282+ FCC5 ED 34 08 00                          add     hl,8                            ; .
1283+ FCC9 E5                                   push    hl                              ; .
1284+ FCCA DD E1                                pop     ix                              ; .
1285+ FCCC CD C5 84                             call    next_system_seed                ; .
1286+ FCCF 3A A1 7E                             ld		a,(XSAV)                        ; .
1287+ FCD2 3D                                   dec		a                               ; .
1288+ FCD3 FE 00                                cp		0                               ; .
1289+ FCD5 C8                                   ret		z                               ; .
1290+ FCD6 32 A1 7E                             ld		(XSAV),a                        ; .
1291+ FCD9 18 DE                                jr      SeedGalaxyLoop                  ; .
1292+ FCDB C9                                   ret
1293+ FCDC
1294+ FCDC              GalaxyBankSize   EQU $ - galaxy_page_marker
1295+ FCDC
# file closed: ./Universe/Galaxy/galaxy_data.asm
1590  FCDC                                  DISPLAY "Bank ",BankGalaxyData0," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData0"
1591  FCDC                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1592  FCDC              ; Bank 92  ------------------------------------------------------------------------------------------------------------------------
1593  FCDC                                  SLOT    GalaxyDataAddr
1594  FCDC                                  PAGE    BankGalaxyData1
1595  FCDC                                  ORG GalaxyDataAddr, BankGalaxyData1
1596  E000 FF           GALAXYDATABlock1:   DB $FF
1597  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1598  0000                                  DISPLAY "Bank ",BankGalaxyData1," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData1"
1599  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1600  0000              ; Bank 93  ------------------------------------------------------------------------------------------------------------------------
1601  0000                                  SLOT    GalaxyDataAddr
1602  0000                                  PAGE    BankGalaxyData2
1603  0000                                  ORG GalaxyDataAddr, BankGalaxyData2
1604  E000 FF           GALAXYDATABlock2:   DB $FF
1605  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1606  0000                                  DISPLAY "Bank ",BankGalaxyData2," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData2"
1607  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1608  0000              ; Bank 94  ------------------------------------------------------------------------------------------------------------------------
1609  0000                                  SLOT    GalaxyDataAddr
1610  0000                                  PAGE    BankGalaxyData3
1611  0000                                  ORG GalaxyDataAddr, BankGalaxyData3
1612  E000 FF           GALAXYDATABlock3:   DB $FF
1613  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1614  0000                                  DISPLAY "Bank ",BankGalaxyData3," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData3"
1615  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1616  0000              ; Bank 95  ------------------------------------------------------------------------------------------------------------------------
1617  0000                                  SLOT    GalaxyDataAddr
1618  0000                                  PAGE    BankGalaxyData4
1619  0000                                  ORG GalaxyDataAddr, BankGalaxyData4
1620  E000 FF           GALAXYDATABlock4:   DB $FF
1621  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1622  0000                                  DISPLAY "Bank ",BankGalaxyData4," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData4"
1623  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1624  0000              ; Bank 96  ------------------------------------------------------------------------------------------------------------------------
1625  0000                                  SLOT    GalaxyDataAddr
1626  0000                                  PAGE    BankGalaxyData5
1627  0000                                  ORG GalaxyDataAddr,BankGalaxyData5
1628  E000 FF           GALAXYDATABlock5:   DB $FF
1629  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1630  0000                                  DISPLAY "Bank ",BankGalaxyData5," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData5"
1631  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1632  0000              ; Bank 97  ------------------------------------------------------------------------------------------------------------------------
1633  0000                                  SLOT    GalaxyDataAddr
1634  0000                                  PAGE    BankGalaxyData6
1635  0000                                  ORG GalaxyDataAddr,BankGalaxyData6
1636  E000 FF           GALAXYDATABlock6:   DB $FF
1637  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1638  0000                                  DISPLAY "Bank ",BankGalaxyData6," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData6"
1639  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1640  0000              ; Bank 98  ------------------------------------------------------------------------------------------------------------------------
1641  0000                                  SLOT    GalaxyDataAddr
1642  0000                                  PAGE    BankGalaxyData7
1643  0000                                  ORG GalaxyDataAddr,BankGalaxyData7
1644  E000 FF           GALAXYDATABlock7:   DB $FF
1645  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1646  0000                                  DISPLAY "Bank ",BankGalaxyData7," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData7"
1647  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1648  0000              ; Bank 99  ------------------------------------------------------------------------------------------------------------------------
1649  0000                                  SLOT    MathsTablesAddr
1650  0000                                  PAGE    BankMathsTables
1651  0000                                  ORG     MathsTablesAddr,BankMathsTables
1652  0000                                  INCLUDE "./Maths/logmaths.asm"
# file opened: ./Maths/logmaths.asm
   1+ 0000 4C 6F 67 4D  logmaths_page_marker    DB "LogMaths   PG99"
   1+ 0004 61 74 68 73
   1+ 0008 20 20 20 50
   1+ 000C 47 39 39
   2+ 000F
   3+ 000F EB           AntiLogHL:              ex      de,hl
   4+ 0010 21 83 05                             ld      hl,LogReverseHighByte
   5+ 0013 01 14 02                             ld      bc,LogReverseTableLen
   6+ 0016 7A                                   ld      a,d
   7+ 0017 ED A1        .SearchLoop:            cpi                                     ; first pass index into high byte
   8+ 0019 28 03                                jr      z,.FoundHighByte
   9+ 001B 23                                   inc     hl
  10+ 001C 18 F9                                jr      .SearchLoop
  11+ 001E 23           .FoundHighByte:         inc     hl                              ; now we have high double it for table of words
  12+ 001F 7E                                   ld      a,(hl)                          ; .
  13+ 0020 21 83 03                             ld      hl,LogTable                     ; .
  14+ 0023 ED 31                                add     hl,a                            ; .
  15+ 0025 ED 31                                add     hl,a                            ; .
  16+ 0027 7A           .LookForLowByteLoop:    ld      a,d                             ; search for low byte or change in high byte
  17+ 0028 BE                                   cp      (hl)
  18+ 0029 20 09                                jr      nz,.SkippedPastHigh
  19+ 002B 23                                   inc     hl
  20+ 002C 7B                                   ld      a,e
  21+ 002D                                      JumpIfAGTENusng (hl), .SkippedPastLow
  21+ 002D BE          >                        cp     (hl)
  21+ 002E D2 35 00    >                        jp		nc,.SkippedPastLow
  22+ 0031 C3 27 00                             jp      .LookForLowByteLoop
  23+ 0034
  24+ 0034 2B           .SkippedPastHigh:       dec     hl                              ; for high we are on next word
  25+ 0035 2B           .SkippedPastLow:        dec     hl                              ; for low we are no next byte
  26+ 0036 EB                                   ex      de,hl                           ; move address to de for subtract
  27+ 0037 21 83 03                             ld      hl,LogTable                     ; subtract from log table address
  28+ 003A                                      ClearCarryFlag
  28+ 003A B7          >                        or a
  29+ 003B ED 52                                sbc     hl,de                           ; so nwo we have nbr of words, i.e anito log * 2
  30+ 003D                                      ShiftHLRight1                           ; now must be >= 255
  30+ 003D CB 3C       >			   srl h
  30+ 003F CB 1D       >			   rr  l
  31+ 0041 7D                                   ld      a,l
  32+ 0042 C9                                   ret
  33+ 0043
  34+ 0043              ; calculates R = 256 * A / Q
  35+ 0043              Requ256mulAdivQ_Log:    JumpIfAGTEMemusng varQ, LL2             ; If A >= Q, then the answer will not fit in one byte, return 255
  35+ 0043 21 9C 7E    >                        ld      hl,varQ
  35+ 0046 BE          >                        cp      (hl)
  35+ 0047 D2 BB 00    >                        jp		nc,LL2
  36+ 004A FD 6F                                ld      iyl,a                           ; STA widget             \ Store A in widget, so now widget = argument A
  37+ 004C DD 67                                ld      ixh,a                           ; TAX                    \ Transfer A into X, so now X = argument A
  38+ 004E                                      JumpIfAIsZero LLfix                     ; If A = 0, jump to LLfix to return a result of 0
  38+ 004E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  38+ 004F CA B7 00    >                        jp	    z, LLfix
  39+ 0052              ; calculate log(A) - log(Q), first adding the low bytes (from the logL table), and then the high bytes (from the log table)
  40+ 0052              ; this determins if we branch to antilog or antilogodd for negative value
  41+ 0052 21 83 03     .GetLogA:               ld      hl,LogTable                     ; LDA logL,X             \ e = low byte of log(X)
  42+ 0055 ED 31                                add     hl,a                            ; have to add twice as ist 8 bit so cant shift
  43+ 0057 ED 31                                add     hl,a                            ;
  44+ 0059 5E                                   ld      e,(hl)                          ;
  45+ 005A 23                                   inc     hl                              ;
  46+ 005B 56                                   ld      d,(hl)                          ; de = logH[X] logL[X]
  47+ 005C 21 83 03                             ld      hl,LogTable                     ;
  48+ 005F 3A 9C 7E                             ld      a,(varQ)                        ;
  49+ 0062 ED 31                                add     hl,a                            ;
  50+ 0064 ED 31                                add     hl,a                            ;
  51+ 0066 4E                                   ld      c,(hl)                          ;
  52+ 0067 23                                   inc     hl                              ;
  53+ 0068 46                                   ld      b,(hl)                          ; bc = logH[X] logL[X]
  54+ 0069 7B                                   ld      a,e                             ; SBC logL,X             \       = low byte of log(A) - low byte of log(Q)
  55+ 006A                                      ClearCarryFlag                          ; .
  55+ 006A B7          >                        or a
  56+ 006B 99                                   sbc     a,c                             ; .
  57+ 006C D2 93 00                             jp      nc,NoCarryBranch
  58+ 006F FA 83 00     CarryBranch:            jp      m,.noddlog                     ; BMI noddlog            \ If the subtraction is negative, jump to noddlog
  59+ 0072 5F                                   ld      e,a                             ; save logL[A] - logL[Q] in e, probabyl dont need this
  60+ 0073 7A                                   ld      a,d                             ; a = logH(a)
  61+ 0074              .CarryFlagPoint1:       SetCarryFlag
  61+ 0074 37          >                        scf
  62+ 0075 98                                   sbc     a,b                             ; a = high byte of logH[A] - logH[Q] note carry is not affected from prev sbc
  63+ 0076 D2 BB 00                             jp      nc,LL2                          ; If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 return a result of 255
  64+ 0079 21 83 01                             ld      hl,AntiLogTable                 ; TAX                    \ Otherwise we return the A-th entry from the antilog
  65+ 007C ED 31                                add     hl,a                            ; LDA antilog,X          \ table
  66+ 007E 7E                                   ld      a,(hl)
  67+ 007F 32 9D 7E                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  68+ 0082 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  69+ 0083 7A           .noddlog:               ld      a,d                             ; LDX widget             \ Set d = high byte of log(A) - high byte of log(Q)
  70+ 0084              .CarryFlagPoint2:       SetCarryFlag
  70+ 0084 37          >                        scf
  71+ 0085 98                                   sbc     a,b
  72+ 0086 D2 BB 00                             jp      nc,LL2                          ; BCS LL2                \ If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 to return a result of 255
  73+ 0089 21 83 02                             ld      hl, AnitLogODDTable             ; TAX                    \ Otherwise we return the A-th entry from the antilogODD
  74+ 008C ED 31                                add     hl,a                            ; LDA antilogODD,X       \ table
  75+ 008E 7E                                   ld      a,(hl)
  76+ 008F 32 9D 7E                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  77+ 0092 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  78+ 0093 FA A7 00     NoCarryBranch:          jp      m,.noddlog                     ; BMI noddlog            \ If the subtraction is negative, jump to noddlog
  79+ 0096 5F                                   ld      e,a                             ; save logL[A] - logL[Q] in e, probabyl dont need this
  80+ 0097 7A                                   ld      a,d                             ; a = logH(a)
  81+ 0098              .CarryFlagPoint1:       ClearCarryFlag
  81+ 0098 B7          >                        or a
  82+ 0099 98                                   sbc     a,b                             ; a = high byte of logH[A] - logH[Q] note carry is not affected from prev sbc
  83+ 009A D2 BB 00                             jp      nc,LL2                          ; If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 return a result of 255
  84+ 009D 21 83 01                             ld      hl,AntiLogTable                 ; TAX                    \ Otherwise we return the A-th entry from the antilog
  85+ 00A0 ED 31                                add     hl,a                            ; LDA antilog,X          \ table
  86+ 00A2 7E                                   ld      a,(hl)
  87+ 00A3 32 9D 7E                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  88+ 00A6 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  89+ 00A7 7A           .noddlog:               ld      a,d                             ; LDX widget             \ Set d = high byte of log(A) - high byte of log(Q)
  90+ 00A8              .CarryFlagPoint2:       ClearCarryFlag
  90+ 00A8 B7          >                        or a
  91+ 00A9 98                                   sbc     a,b
  92+ 00AA D2 BB 00                             jp      nc,LL2                          ; BCS LL2                \ If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 to return a result of 255
  93+ 00AD 21 83 02                             ld      hl, AnitLogODDTable             ; TAX                    \ Otherwise we return the A-th entry from the antilogODD
  94+ 00B0 ED 31                                add     hl,a                            ; LDA antilogODD,X       \ table
  95+ 00B2 7E                                   ld      a,(hl)
  96+ 00B3 32 9D 7E                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  97+ 00B6 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  98+ 00B7 32 9D 7E     LLfix:                  ld      (varR),a                        ; Set the result in R to the value of A
  99+ 00BA C9                                   ret                                     ; RTS                    \ Return from the subroutine
 100+ 00BB 3E FF        LL2:                    ld      a,$FF
 101+ 00BD 32 9D 7E                             ld      (varR),a
 102+ 00C0 C9                                   ret
 103+ 00C1
 104+ 00C1
 105+ 00C1              AEquAmul256DivBLogLT:   JumpIfAIsZero   .ResultIsZero
 105+ 00C1 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 105+ 00C2 CA EA 00    >                        jp	    z, .ResultIsZero
 106+ 00C5 21 83 03                             ld      hl,LogTable                     ; de = log a
 107+ 00C8 ED 31                                add     hl,a                            ; .
 108+ 00CA ED 31                                add     hl,a                            ; .
 109+ 00CC 5E                                   ld      e,(hl)                          ; .
 110+ 00CD 23                                   inc     hl                              ; .
 111+ 00CE 56                                   ld      d,(hl)                          ; .
 112+ 00CF 21 83 03                             ld      hl,LogTable                     ; hl = log b
 113+ 00D2 78                                   ld      a,b                             ; .
 114+ 00D3 ED 31                                add     hl,a                            ; .
 115+ 00D5 ED 31                                add     hl,a                            ; .
 116+ 00D7 7E                                   ld      a,(hl)                          ; .
 117+ 00D8 23                                   inc     hl                              ; .
 118+ 00D9 66                                   ld      h,(hl)                          ; .
 119+ 00DA 6F                                   ld      l,a                             ; .
 120+ 00DB                                      ClearCarryFlag                          ;
 120+ 00DB B7          >                        or a
 121+ 00DC EB                                   ex      de,hl                           ; now hl = log a and de = log b
 122+ 00DD ED 52                                sbc     hl,de                           ; hl = log a - log b
 123+ 00DF 7C                                   ld      a,h                             ; .
 124+ 00E0 21 83 02                             ld      hl,AnitLogODDTable               ; hl = anti log (log a - log b)
 125+ 00E3 ED 31                                add     hl,a                            ; which is also a / b
 126+ 00E5 ED 31                                add     hl,a                            ; .
 127+ 00E7 7E                                   ld      a,(hl)                          ; .
 128+ 00E8                                      ClearCarryFlag                          ;
 128+ 00E8 B7          >                        or a
 129+ 00E9 C9                                   ret
 130+ 00EA              .ResultIsZero:          ClearCarryFlag
 130+ 00EA B7          >                        or a
 131+ 00EB                                      ZeroA
 131+ 00EB AF          >                        xor a
 132+ 00EC C9                                   ret
 133+ 00ED
 134+ 00ED              AEquAmul256DivBLog:     JumpIfAIsZero   .ResultIsZero
 134+ 00ED A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 134+ 00EE CA 24 01    >                        jp	    z, .ResultIsZero
 135+ 00F1                                      JumpIfAGTENusng d, AEquAmul256DivBLogLT
 135+ 00F1 BA          >                        cp     d
 135+ 00F2 D2 C1 00    >                        jp		nc,AEquAmul256DivBLogLT
 136+ 00F5 21 83 03                             ld      hl,LogTable                     ; de = log a
 137+ 00F8 ED 31                                add     hl,a                            ; .
 138+ 00FA ED 31                                add     hl,a                            ; .
 139+ 00FC 5E                                   ld      e,(hl)                          ; .
 140+ 00FD 23                                   inc     hl                              ; .
 141+ 00FE 56                                   ld      d,(hl)                          ; .
 142+ 00FF 21 83 03                             ld      hl,LogTable                     ; hl = log b
 143+ 0102 78                                   ld      a,b                             ; .
 144+ 0103 ED 31                                add     hl,a                            ; .
 145+ 0105 ED 31                                add     hl,a                            ; .
 146+ 0107 7E                                   ld      a,(hl)                          ; .
 147+ 0108 23                                   inc     hl                              ; .
 148+ 0109 66                                   ld      h,(hl)                          ; .
 149+ 010A 6F                                   ld      l,a                             ; .
 150+ 010B                                      ClearCarryFlag                          ;
 150+ 010B B7          >                        or a
 151+ 010C EB                                   ex      de,hl                           ; now hl = log a and de = log b
 152+ 010D ED 52                                sbc     hl,de                           ; hl = log a - log b
 153+ 010F 38 0B                                jr      c,.ResultIsOne                  ; .
 154+ 0111 7C                                   ld      a,h                             ; .
 155+ 0112 21 83 01                             ld      hl,AntiLogTable                 ; hl = anti log (log a - log b)
 156+ 0115 ED 31                                add     hl,a                            ; which is also a / b
 157+ 0117 ED 31                                add     hl,a                            ; .
 158+ 0119 7E                                   ld      a,(hl)                          ; .
 159+ 011A                                      ClearCarryFlag                          ;
 159+ 011A B7          >                        or a
 160+ 011B C9                                   ret
 161+ 011C              .ResultIsOne:           ClearCarryFlag
 161+ 011C B7          >                        or a
 162+ 011D 3E FF                                ld      a,$FF
 163+ 011F C9                                   ret
 164+ 0120              .ResultIsInfinte:       SetCarryFlag
 164+ 0120 37          >                        scf
 165+ 0121 3E FF                                ld      a,$FF
 166+ 0123 C9                                   ret
 167+ 0124              .ResultIsZero:          ClearCarryFlag
 167+ 0124 B7          >                        or a
 168+ 0125 C9                                   ret
 169+ 0126
 170+ 0126              AEquAmul256Div197LogLT: JumpIfAIsZero   .ResultIsZero
 170+ 0126 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 170+ 0127 CA 46 01    >                        jp	    z, .ResultIsZero
 171+ 012A 21 83 03                             ld      hl,LogTable                     ; point to log a in LogTable
 172+ 012D ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
 173+ 012F ED 31                                add     hl,a
 174+ 0131 5E                                   ld      e,(hl)                          ; de = log a
 175+ 0132 23                                   inc     hl                              ; .
 176+ 0133 56                                   ld      d,(hl)                          ; .
 177+ 0134 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
 178+ 0137                                      ClearCarryFlag
 178+ 0137 B7          >                        or a
 179+ 0138 EB                                   ex      hl,de                           ; hl = log a, de = log 197
 180+ 0139 ED 52                                sbc     hl,de
 181+ 013B 7C                                   ld      a,h
 182+ 013C 21 83 02                             ld      hl,AnitLogODDTable
 183+ 013F ED 31                                add     hl,a
 184+ 0141 ED 31                                add     hl,a
 185+ 0143 7E                                   ld      a,(hl)
 186+ 0144                                      ClearCarryFlag
 186+ 0144 B7          >                        or a
 187+ 0145 C9                                   ret
 188+ 0146              .ResultIsZero:          ClearCarryFlag
 188+ 0146 B7          >                        or a
 189+ 0147                                      ZeroA
 189+ 0147 AF          >                        xor a
 190+ 0148 C9                                   ret
 191+ 0149
 192+ 0149
 193+ 0149              AEquAmul256Div197Log:   JumpIfAIsZero   .ResultIsZero
 193+ 0149 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 193+ 014A CA 73 01    >                        jp	    z, .ResultIsZero
 194+ 014D                                      JumpIfAGTENusng d, AEquAmul256Div197LogLT
 194+ 014D BA          >                        cp     d
 194+ 014E D2 26 01    >                        jp		nc,AEquAmul256Div197LogLT
 195+ 0151 21 83 03                             ld      hl,LogTable                     ; point to log a in LogTable
 196+ 0154 ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
 197+ 0156 ED 31                                add     hl,a
 198+ 0158 5E                                   ld      e,(hl)                          ; de = log a
 199+ 0159 23                                   inc     hl                              ; .
 200+ 015A 56                                   ld      d,(hl)                          ; .
 201+ 015B 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
 202+ 015E                                      ClearCarryFlag
 202+ 015E B7          >                        or a
 203+ 015F EB                                   ex      hl,de                           ; hl = log a, de = log 197
 204+ 0160 ED 52                                sbc     hl,de
 205+ 0162 38 0B                                jr      c,.ResultIsOne
 206+ 0164 7C                                   ld      a,h
 207+ 0165 21 83 01                             ld      hl,AntiLogTable
 208+ 0168 ED 31                                add     hl,a
 209+ 016A ED 31                                add     hl,a
 210+ 016C 7E                                   ld      a,(hl)
 211+ 016D                                      ClearCarryFlag
 211+ 016D B7          >                        or a
 212+ 016E C9                                   ret
 213+ 016F              .ResultIsOne:           ClearCarryFlag
 213+ 016F B7          >                        or a
 214+ 0170 3E FF                                ld      a,$FF
 215+ 0172 C9                                   ret
 216+ 0173              .ResultIsZero:          ClearCarryFlag
 216+ 0173 B7          >                        or a
 217+ 0174 C9                                   ret
 218+ 0175
 219+ 0175              AEquAmul256Div197LogSignA:
 220+ 0175 FD 67                                ld      iyh,a
 221+ 0177                                      ClearSignBitA
 221+ 0177 E6 7F       >                        and     SignMask8Bit
 222+ 0179 CD 49 01                             call    AEquAmul256Div197Log
 223+ 017C 47                                   ld      b,a
 224+ 017D FD 7C                                ld      a,iyh
 225+ 017F                                      SignBitOnlyA
 225+ 017F E6 80       >                        and     SignOnly8Bit
 226+ 0181 B0                                   or      b
 227+ 0182 C9                                   ret
# file closed: ./Maths/logmaths.asm
1653  0183                                  INCLUDE "./Tables/antilogtable.asm"
# file opened: ./Tables/antilogtable.asm
   1+ 0183 01 01 01 01  AntiLogTable:           DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 0 to 9
   1+ 0187 01 01 01 01
   1+ 018B 01 01
   2+ 018D 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 10 to 19
   2+ 0191 01 01 01 01
   2+ 0195 01 01
   3+ 0197 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 20 to 29
   3+ 019B 01 01 01 01
   3+ 019F 01 01
   4+ 01A1 01 01 02 02                          DB $01, $01, $02, $02, $02, $02, $02, $02, $02, $02 ; 30 to 39
   4+ 01A5 02 02 02 02
   4+ 01A9 02 02
   5+ 01AB 02 02 02 02                          DB $02, $02, $02, $02, $02, $02, $02, $02, $02, $02 ; 40 to 49
   5+ 01AF 02 02 02 02
   5+ 01B3 02 02
   6+ 01B5 02 03 03 03                          DB $02, $03, $03, $03, $03, $03, $03, $03, $03, $03 ; 50 to 59
   6+ 01B9 03 03 03 03
   6+ 01BD 03 03
   7+ 01BF 03 03 03 03                          DB $03, $03, $03, $03, $04, $04, $04, $04, $04, $04 ; 60 to 69
   7+ 01C3 04 04 04 04
   7+ 01C7 04 04
   8+ 01C9 04 04 04 04                          DB $04, $04, $04, $04, $04, $05, $05, $05, $05, $05 ; 70 to 79
   8+ 01CD 04 05 05 05
   8+ 01D1 05 05
   9+ 01D3 05 05 05 06                          DB $05, $05, $05, $06, $06, $06, $06, $06, $06, $06 ; 80 to 89
   9+ 01D7 06 06 06 06
   9+ 01DB 06 06
  10+ 01DD 07 07 07 07                          DB $07, $07, $07, $07, $07, $07, $08, $08, $08, $08 ; 90 to 99
  10+ 01E1 07 07 08 08
  10+ 01E5 08 08
  11+ 01E7 08 08 09 09                          DB $08, $08, $09, $09, $09, $09, $09, $0A, $0A, $0A ; 100 to 109
  11+ 01EB 09 09 09 0A
  11+ 01EF 0A 0A
  12+ 01F1 0A 0B 0B 0B                          DB $0A, $0B, $0B, $0B, $0B, $0C, $0C, $0C, $0C, $0D ; 110 to 119
  12+ 01F5 0B 0C 0C 0C
  12+ 01F9 0C 0D
  13+ 01FB 0D 0D 0E 0E                          DB $0D, $0D, $0E, $0E, $0E, $0E, $0F, $0F, $10, $10 ; 120 to 129
  13+ 01FF 0E 0E 0F 0F
  13+ 0203 10 10
  14+ 0205 10 11 11 11                          DB $10, $11, $11, $11, $12, $12, $13, $13, $13, $14 ; 130 to 139
  14+ 0209 12 12 13 13
  14+ 020D 13 14
  15+ 020F 14 15 15 16                          DB $14, $15, $15, $16, $16, $17, $17, $18, $18, $19 ; 140 to 149
  15+ 0213 16 17 17 18
  15+ 0217 18 19
  16+ 0219 19 1A 1A 1B                          DB $19, $1A, $1A, $1B, $1C, $1C, $1D, $1D, $1E, $1F ; 150 to 159
  16+ 021D 1C 1C 1D 1D
  16+ 0221 1E 1F
  17+ 0223 20 20 21 22                          DB $20, $20, $21, $22, $22, $23, $24, $25, $26, $26 ; 160 to 169
  17+ 0227 22 23 24 25
  17+ 022B 26 26
  18+ 022D 27 28 29 2A                          DB $27, $28, $29, $2A, $2B, $2C, $2D, $2E, $2F, $30 ; 170 to 179
  18+ 0231 2B 2C 2D 2E
  18+ 0235 2F 30
  19+ 0237 31 32 33 34                          DB $31, $32, $33, $34, $35, $36, $38, $39, $3A, $3B ; 180 to 189
  19+ 023B 35 36 38 39
  19+ 023F 3A 3B
  20+ 0241 3D 3E 40 41                          DB $3D, $3E, $40, $41, $42, $44, $45, $47, $48, $4A ; 190 to 199
  20+ 0245 42 44 45 47
  20+ 0249 48 4A
  21+ 024B 4C 4D 4F 51                          DB $4C, $4D, $4F, $51, $52, $54, $56, $58, $5A, $5C ; 200 to 219
  21+ 024F 52 54 56 58
  21+ 0253 5A 5C
  22+ 0255 5E 60 62 64                          DB $5E, $60, $62, $64, $67, $69, $6B, $6D, $70, $72 ; 210 to 229
  22+ 0259 67 69 6B 6D
  22+ 025D 70 72
  23+ 025F 75 77 7A 7D                          DB $75, $77, $7A, $7D, $80, $82, $85, $88, $8B, $8E ; 220 to 239
  23+ 0263 80 82 85 88
  23+ 0267 8B 8E
  24+ 0269 91 94 98 9B                          DB $91, $94, $98, $9B, $9E, $A2, $A5, $A9, $AD, $B1 ; 230 to 239
  24+ 026D 9E A2 A5 A9
  24+ 0271 AD B1
  25+ 0273 B5 B8 BD C1                          DB $B5, $B8, $BD, $C1, $C5, $C9, $CE, $D2, $D7, $DB ; 240 to 249
  25+ 0277 C5 C9 CE D2
  25+ 027B D7 DB
  26+ 027D E0 E5 EA EF                          DB $E0, $E5, $EA, $EF, $F5, $FA                     ; 250 to 255
  26+ 0281 F5 FA
  27+ 0283
  28+ 0283 01 01 01 01  AnitLogODDTable:        DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 0 to 9
  28+ 0287 01 01 01 01
  28+ 028B 01 01
  29+ 028D 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 10 to 19
  29+ 0291 01 01 01 01
  29+ 0295 01 01
  30+ 0297 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 20 to 29
  30+ 029B 01 01 01 01
  30+ 029F 01 01
  31+ 02A1 01 01 02 02                          DB $01, $01, $02, $02, $02, $02, $02, $02, $02, $02 ; 30 to 39
  31+ 02A5 02 02 02 02
  31+ 02A9 02 02
  32+ 02AB 02 02 02 02                          DB $02, $02, $02, $02, $02, $02, $02, $02, $02, $02 ; 40 to 49
  32+ 02AF 02 02 02 02
  32+ 02B3 02 02
  33+ 02B5 02 03 03 03                          DB $02, $03, $03, $03, $03, $03, $03, $03, $03, $03 ; 50 to 59
  33+ 02B9 03 03 03 03
  33+ 02BD 03 03
  34+ 02BF 03 03 03 03                          DB $03, $03, $03, $03, $04, $04, $04, $04, $04, $04 ; 60 to 69
  34+ 02C3 04 04 04 04
  34+ 02C7 04 04
  35+ 02C9 04 04 04 04                          DB $04, $04, $04, $04, $05, $05, $05, $05, $05, $05 ; 70 to 79
  35+ 02CD 05 05 05 05
  35+ 02D1 05 05
  36+ 02D3 05 05 05 06                          DB $05, $05, $05, $06, $06, $06, $06, $06, $06, $06 ; 80 to 89
  36+ 02D7 06 06 06 06
  36+ 02DB 06 06
  37+ 02DD 07 07 07 07                          DB $07, $07, $07, $07, $07, $07, $08, $08, $08, $08 ; 90 to 99
  37+ 02E1 07 07 08 08
  37+ 02E5 08 08
  38+ 02E7 08 09 09 09                          DB $08, $09, $09, $09, $09, $09, $0A, $0A, $0A, $0A ; 100 to 109
  38+ 02EB 09 09 0A 0A
  38+ 02EF 0A 0A
  39+ 02F1 0A 0B 0B 0B                          DB $0A, $0B, $0B, $0B, $0B, $0C, $0C, $0C, $0D, $0D ; 110 to 119
  39+ 02F5 0B 0C 0C 0C
  39+ 02F9 0D 0D
  40+ 02FB 0D 0D 0E 0E                          DB $0D, $0D, $0E, $0E, $0E, $0F, $0F, $0F, $10, $10 ; 120 to 129
  40+ 02FF 0E 0F 0F 0F
  40+ 0303 10 10
  41+ 0305 10 11 11 12                          DB $10, $11, $11, $12, $12, $12, $13, $13, $14, $14 ; 130 to 139
  41+ 0309 12 12 13 13
  41+ 030D 14 14
  42+ 030F 14 15 15 16                          DB $14, $15, $15, $16, $16, $17, $17, $18, $18, $19 ; 140 to 149
  42+ 0313 16 17 17 18
  42+ 0317 18 19
  43+ 0319 1A 1A 1B 1B                          DB $1A, $1A, $1B, $1B, $1C, $1D, $1D, $1E, $1E, $1F ; 150 to 159
  43+ 031D 1C 1D 1D 1E
  43+ 0321 1E 1F
  44+ 0323 20 21 21 22                          DB $20, $21, $21, $22, $23, $24, $24, $25, $26, $27 ; 160 to 169
  44+ 0327 23 24 24 25
  44+ 032B 26 27
  45+ 032D 28 29 29 2A                          DB $28, $29, $29, $2A, $2B, $2C, $2D, $2E, $2F, $30 ; 170 to 179
  45+ 0331 2B 2C 2D 2E
  45+ 0335 2F 30
  46+ 0337 31 32 34 35                          DB $31, $32, $34, $35, $36, $37, $38, $3A, $3B, $3C ; 180 to 189
  46+ 033B 36 37 38 3A
  46+ 033F 3B 3C
  47+ 0341 3D 3F 40 42                          DB $3D, $3F, $40, $42, $43, $45, $46, $48, $49, $4B ; 190 to 199
  47+ 0345 43 45 46 48
  47+ 0349 49 4B
  48+ 034B 4C 4E 50 52                          DB $4C, $4E, $50, $52, $53, $55, $57, $59, $5B, $5D ; 200 to 219
  48+ 034F 53 55 57 59
  48+ 0353 5B 5D
  49+ 0355 5F 61 63 65                          DB $5F, $61, $63, $65, $68, $6A, $6C, $6F, $71, $74 ; 210 to 229
  49+ 0359 68 6A 6C 6F
  49+ 035D 71 74
  50+ 035F 76 79 7B 7E                          DB $76, $79, $7B, $7E, $81, $84, $87, $8A, $8D, $90 ; 220 to 239
  50+ 0363 81 84 87 8A
  50+ 0367 8D 90
  51+ 0369 93 96 99 9D                          DB $93, $96, $99, $9D, $A0, $A4, $A7, $AB, $AF, $B3 ; 230 to 239
  51+ 036D A0 A4 A7 AB
  51+ 0371 AF B3
  52+ 0373 B6 BA BF C3                          DB $B6, $BA, $BF, $C3, $C7, $CB, $D0, $D4, $D9, $DE ; 240 to 249
  52+ 0377 C7 CB D0 D4
  52+ 037B D9 DE
  53+ 037D E3 E8 ED F2                          DB $E3, $E8, $ED, $F2, $F7, $FD                     ; 250 to 255
  53+ 0381 F7 FD
  54+ 0383
# file closed: ./Tables/antilogtable.asm
1654  0383                                  INCLUDE "./Tables/logtable.asm"
# file opened: ./Tables/logtable.asm
   1+ 0383 00 00        LogTable:               DW $0000                                                                   ; 0
   2+ 0385 00 00 00 20                          DW $0000, $2000, $32B8, $4000, $4A4D, $52B8, $59D6, $6000, $6570, $6A4D    ;   1 TO  10
   2+ 0389 B8 32 00 40
   2+ 038D 4D 4A B8 52
   2+ 0391 D6 59 00 60
   2+ 0395 70 65 4D 6A
   3+ 0399 B4 6E B8 72                          DW $6EB4, $72B8, $766A, $79D6, $7D05, $8000, $82CC, $8570, $87EF, $8A4D    ;  11 TO  20
   3+ 039D 6A 76 D6 79
   3+ 03A1 05 7D 00 80
   3+ 03A5 CC 82 70 85
   3+ 03A9 EF 87 4D 8A
   4+ 03AD 8E 8C B4 8E                          DW $8C8E, $8EB4, $90C1, $92B8, $949A, $966A, $9828, $99D6, $9B75, $9D05    ;  21 TO  30
   4+ 03B1 C1 90 B8 92
   4+ 03B5 9A 94 6A 96
   4+ 03B9 28 98 D6 99
   4+ 03BD 75 9B 05 9D
   5+ 03C1 89 9E 00 A0                          DW $9E89, $A000, $A16C, $A2CC, $A423, $A570, $A6B4, $A7EF, $A922, $AA4D    ;  31 TO  40
   5+ 03C5 6C A1 CC A2
   5+ 03C9 23 A4 70 A5
   5+ 03CD B4 A6 EF A7
   5+ 03D1 22 A9 4D AA
   6+ 03D5 71 AB 8E AC                          DW $AB71, $AC8E, $ADA4, $AEB4, $AFBD, $B0C1, $B1BF, $B2B8, $B3AC, $B49A    ;  41 TO  50
   6+ 03D9 A4 AD B4 AE
   6+ 03DD BD AF C1 B0
   6+ 03E1 BF B1 B8 B2
   6+ 03E5 AC B3 9A B4
   7+ 03E9 85 B5 6A B6                          DW $B585, $B66A, $B74B, $B828, $B901, $B9D6, $BAA7, $BB75, $BC3F, $BD05    ;  51 TO  60
   7+ 03ED 4B B7 28 B8
   7+ 03F1 01 B9 D6 B9
   7+ 03F5 A7 BA 75 BB
   7+ 03F9 3F BC 05 BD
   8+ 03FD C9 BD 89 BE                          DW $BDC9, $BE89, $BF46, $C000, $C0B7, $C16C, $C21D, $C2CC, $C379, $C423    ;  61 TO  70
   8+ 0401 46 BF 00 C0
   8+ 0405 B7 C0 6C C1
   8+ 0409 1D C2 CC C2
   8+ 040D 79 C3 23 C4
   9+ 0411 CB C4 70 C5                          DW $C4CB, $C570, $C613, $C6B4, $C752, $C7EF, $C88A, $C922, $C9B9, $CA4D    ;  71 TO  80
   9+ 0415 13 C6 B4 C6
   9+ 0419 52 C7 EF C7
   9+ 041D 8A C8 22 C9
   9+ 0421 B9 C9 4D CA
  10+ 0425 E0 CA 71 CB                          DW $CAE0, $CB71, $CC00, $CC8E, $CD1A, $CDA4, $CE2D, $CEB4, $CF39, $CFBD    ;  81 TO  90
  10+ 0429 00 CC 8E CC
  10+ 042D 1A CD A4 CD
  10+ 0431 2D CE B4 CE
  10+ 0435 39 CF BD CF
  11+ 0439 40 D0 C1 D0                          DW $D040, $D0C1, $D141, $D1BF, $D23C, $D2B8, $D332, $D3AC, $D424, $D49A    ;  91 TO 100
  11+ 043D 41 D1 BF D1
  11+ 0441 3C D2 B8 D2
  11+ 0445 32 D3 AC D3
  11+ 0449 24 D4 9A D4
  12+ 044D 10 D5 85 D5                          DW $D510, $D585, $D5F8, $D66A, $D6DB, $D74B, $D7BA, $D828, $D895, $D901    ; 101 TO 110
  12+ 0451 F8 D5 6A D6
  12+ 0455 DB D6 4B D7
  12+ 0459 BA D7 28 D8
  12+ 045D 95 D8 01 D9
  13+ 0461 6C D9 D6 D9                          DW $D96C, $D9D6, $DA3F, $DAA7, $DB0E, $DB75, $DBDA, $DC3F, $DCA2, $DD05    ; 111 TO 120
  13+ 0465 3F DA A7 DA
  13+ 0469 0E DB 75 DB
  13+ 046D DA DB 3F DC
  13+ 0471 A2 DC 05 DD
  14+ 0475 67 DD C9 DD                          DW $DD67, $DDC9, $DE29, $DE89, $DEE8, $DF46, $DFA3, $E000, $E05C, $E0B7    ; 121 TO 130
  14+ 0479 29 DE 89 DE
  14+ 047D E8 DE 46 DF
  14+ 0481 A3 DF 00 E0
  14+ 0485 5C E0 B7 E0
  15+ 0489 12 E1 6C E1                          DW $E112, $E16C, $E1C5, $E21D, $E275, $E2CC, $E323, $E379, $E3CE, $E423    ; 131 TO 140
  15+ 048D C5 E1 1D E2
  15+ 0491 75 E2 CC E2
  15+ 0495 23 E3 79 E3
  15+ 0499 CE E3 23 E4
  16+ 049D 77 E4 CB E4                          DW $E477, $E4CB, $E51E, $E570, $E5C2, $E613, $E664, $E6B4, $E703, $E752    ; 141 TO 150
  16+ 04A1 1E E5 70 E5
  16+ 04A5 C2 E5 13 E6
  16+ 04A9 64 E6 B4 E6
  16+ 04AD 03 E7 52 E7
  17+ 04B1 A1 E7 EF E7                          DW $E7A1, $E7EF, $E83D, $E88A, $E8D6, $E922, $E96E, $E9B9, $EA03, $EA4D    ; 151 TO 160
  17+ 04B5 3D E8 8A E8
  17+ 04B9 D6 E8 22 E9
  17+ 04BD 6E E9 B9 E9
  17+ 04C1 03 EA 4D EA
  18+ 04C5 97 EA E0 EA                          DW $EA97, $EAE0, $EB29, $EB71, $EBB9, $EC00, $EC47, $EC8E, $ECD4, $ED1A    ; 161 TO 170
  18+ 04C9 29 EB 71 EB
  18+ 04CD B9 EB 00 EC
  18+ 04D1 47 EC 8E EC
  18+ 04D5 D4 EC 1A ED
  19+ 04D9 5F ED A4 ED                          DW $ED5F, $EDA4, $EDE8, $EE2D, $EE70, $EEB4, $EEF7, $EF39, $EF7B, $EFBD    ; 171 TO 180
  19+ 04DD E8 ED 2D EE
  19+ 04E1 70 EE B4 EE
  19+ 04E5 F7 EE 39 EF
  19+ 04E9 7B EF BD EF
  20+ 04ED FF EF 40 F0                          DW $EFFF, $F040, $F081, $F0C1, $F101, $F141, $F180, $F1BF, $F1FE, $F23C    ; 181 TO 190
  20+ 04F1 81 F0 C1 F0
  20+ 04F5 01 F1 41 F1
  20+ 04F9 80 F1 BF F1
  20+ 04FD FE F1 3C F2
  21+ 0501 7A F2 B8 F2                          DW $F27A, $F2B8, $F2F5, $F332, $F36F, $F3AC, $F3E8, $F424, $F45F, $F49A    ; 191 TO 290
  21+ 0505 F5 F2 32 F3
  21+ 0509 6F F3 AC F3
  21+ 050D E8 F3 24 F4
  21+ 0511 5F F4 9A F4
  22+ 0515 D5 F4 10 F5                          DW $F4D5, $F510, $F54A, $F585, $F5BE, $F5F8, $F631, $F66A, $F6A3, $F6DB    ; 201 TO 210
  22+ 0519 4A F5 85 F5
  22+ 051D BE F5 F8 F5
  22+ 0521 31 F6 6A F6
  22+ 0525 A3 F6 DB F6
  23+ 0529 13 F7 4B F7                          DW $F713, $F74B, $F783, $F7BA, $F7F1, $F828, $F85F, $F895, $F8CB, $F901    ; 211 TO 220
  23+ 052D 83 F7 BA F7
  23+ 0531 F1 F7 28 F8
  23+ 0535 5F F8 95 F8
  23+ 0539 CB F8 01 F9
  24+ 053D 36 F9 6C F9                          DW $F936, $F96C, $F9A1, $F9D6, $FA0A, $FA3F, $FA73, $FAA7, $FADB, $FB0E    ; 221 TO 230
  24+ 0541 A1 F9 D6 F9
  24+ 0545 0A FA 3F FA
  24+ 0549 73 FA A7 FA
  24+ 054D DB FA 0E FB
  25+ 0551 42 FB 75 FB                          DW $FB42, $FB75, $FBA7, $FBDA, $FC0C, $FC3F, $FC71, $FCA2, $FCD4, $FD05    ; 231 TO 240
  25+ 0555 A7 FB DA FB
  25+ 0559 0C FC 3F FC
  25+ 055D 71 FC A2 FC
  25+ 0561 D4 FC 05 FD
  26+ 0565 36 FD 67 FD                          DW $FD36, $FD67, $FD98, $FDC9, $FDF9, $FE29, $FE59, $FE89, $FEB8, $FEE8    ; 241 TO 250
  26+ 0569 98 FD C9 FD
  26+ 056D F9 FD 29 FE
  26+ 0571 59 FE 89 FE
  26+ 0575 B8 FE E8 FE
  27+ 0579 17 FF 46 FF                          DW $FF17, $FF46, $FF75, $FFA3, $FFA3                                       ; 251 TO 255
  27+ 057D 75 FF A3 FF
  27+ 0581 A3 FF
  28+ 0583
  29+ 0583
  30+ 0583
  31+ 0583 00 00 00 00  LogReverseHighByte:     DW $00, 000, $20, 002, $32, 003, $40, 004, $4A, 005, $52, 006
  31+ 0587 20 00 02 00
  31+ 058B 32 00 03 00
  31+ 058F 40 00 04 00
  31+ 0593 4A 00 05 00
  31+ 0597 52 00 06 00
  32+ 059B 59 00 07 00                          DW $59, 007, $60, 008, $65, 009, $6A, 010, $6E, 011, $72, 012
  32+ 059F 60 00 08 00
  32+ 05A3 65 00 09 00
  32+ 05A7 6A 00 0A 00
  32+ 05AB 6E 00 0B 00
  32+ 05AF 72 00 0C 00
  33+ 05B3 76 00 0D 00                          DW $76, 013, $79, 014, $7D, 015, $80, 016, $82, 017, $85, 018
  33+ 05B7 79 00 0E 00
  33+ 05BB 7D 00 0F 00
  33+ 05BF 80 00 10 00
  33+ 05C3 82 00 11 00
  33+ 05C7 85 00 12 00
  34+ 05CB 87 00 13 00                          DW $87, 019, $8A, 020, $8C, 021, $8E, 022, $90, 023, $92, 024
  34+ 05CF 8A 00 14 00
  34+ 05D3 8C 00 15 00
  34+ 05D7 8E 00 16 00
  34+ 05DB 90 00 17 00
  34+ 05DF 92 00 18 00
  35+ 05E3 94 00 19 00                          DW $94, 025, $96, 026, $98, 027, $99, 028, $9B, 029, $9D, 030
  35+ 05E7 96 00 1A 00
  35+ 05EB 98 00 1B 00
  35+ 05EF 99 00 1C 00
  35+ 05F3 9B 00 1D 00
  35+ 05F7 9D 00 1E 00
  36+ 05FB 9E 00 1F 00                          DW $9E, 031, $A0, 032, $A1, 033, $A2, 034, $A4, 035, $A5, 036
  36+ 05FF A0 00 20 00
  36+ 0603 A1 00 21 00
  36+ 0607 A2 00 22 00
  36+ 060B A4 00 23 00
  36+ 060F A5 00 24 00
  37+ 0613 A6 00 25 00                          DW $A6, 037, $A7, 038, $A9, 039, $AA, 040, $AB, 041, $AC, 042
  37+ 0617 A7 00 26 00
  37+ 061B A9 00 27 00
  37+ 061F AA 00 28 00
  37+ 0623 AB 00 29 00
  37+ 0627 AC 00 2A 00
  38+ 062B AD 00 2B 00                          DW $AD, 043, $AE, 044, $AF, 045, $B0, 046, $B1, 047, $B2, 048
  38+ 062F AE 00 2C 00
  38+ 0633 AF 00 2D 00
  38+ 0637 B0 00 2E 00
  38+ 063B B1 00 2F 00
  38+ 063F B2 00 30 00
  39+ 0643 B3 00 31 00                          DW $B3, 049, $B4, 050, $B5, 051, $B6, 052, $B7, 053, $B8, 054
  39+ 0647 B4 00 32 00
  39+ 064B B5 00 33 00
  39+ 064F B6 00 34 00
  39+ 0653 B7 00 35 00
  39+ 0657 B8 00 36 00
  40+ 065B B9 00 38 00                          DW $B9, 056, $B9, 056, $BA, 057, $BB, 058, $BC, 059, $BD, 060
  40+ 065F B9 00 38 00
  40+ 0663 BA 00 39 00
  40+ 0667 BB 00 3A 00
  40+ 066B BC 00 3B 00
  40+ 066F BD 00 3C 00
  41+ 0673 BE 00 3E 00                          DW $BE, 062, $BF, 063, $C0, 064, $C1, 066, $C2, 067, $C3, 069
  41+ 0677 BF 00 3F 00
  41+ 067B C0 00 40 00
  41+ 067F C1 00 42 00
  41+ 0683 C2 00 43 00
  41+ 0687 C3 00 45 00
  42+ 068B C4 00 46 00                          DW $C4, 070, $C5, 072, $C6, 072, $C7, 074, $C8, 076, $C9, 077
  42+ 068F C5 00 48 00
  42+ 0693 C6 00 48 00
  42+ 0697 C7 00 4A 00
  42+ 069B C8 00 4C 00
  42+ 069F C9 00 4D 00
  43+ 06A3 CA 00 50 00                          DW $CA, 080, $CB, 082, $CC, 083, $CD, 085, $CE, 087, $CF, 088
  43+ 06A7 CB 00 52 00
  43+ 06AB CC 00 53 00
  43+ 06AF CD 00 55 00
  43+ 06B3 CE 00 57 00
  43+ 06B7 CF 00 58 00
  44+ 06BB D0 00 5A 00                          DW $D0, 090, $D1, 092, $D2, 094, $D3, 097, $D4, 100, $D5, 102
  44+ 06BF D1 00 5C 00
  44+ 06C3 D2 00 5E 00
  44+ 06C7 D3 00 61 00
  44+ 06CB D4 00 64 00
  44+ 06CF D5 00 66 00
  45+ 06D3 D6 00 68 00                          DW $D6, 104, $D6, 105, $D7, 106, $D7, 107, $D8, 108, $D8, 109
  45+ 06D7 D6 00 69 00
  45+ 06DB D7 00 6A 00
  45+ 06DF D7 00 6B 00
  45+ 06E3 D8 00 6C 00
  45+ 06E7 D8 00 6D 00
  46+ 06EB D9 00 6E 00                          DW $D9, 110, $D9, 111, $D9, 112, $DA, 113, $DB, 114, $DC, 117
  46+ 06EF D9 00 6F 00
  46+ 06F3 D9 00 70 00
  46+ 06F7 DA 00 71 00
  46+ 06FB DB 00 72 00
  46+ 06FF DC 00 75 00
  47+ 0703 DD 00 78 00                          DW $DD, 120, $DE, 123, $DF, 126, $E0, 128, $E1, 131, $E2, 134
  47+ 0707 DE 00 7B 00
  47+ 070B DF 00 7E 00
  47+ 070F E0 00 80 00
  47+ 0713 E1 00 83 00
  47+ 0717 E2 00 86 00
  48+ 071B E3 00 89 00                          DW $E3, 137, $E4, 140, $E5, 143, $E6, 146, $E7, 149, $E8, 153
  48+ 071F E4 00 8C 00
  48+ 0723 E5 00 8F 00
  48+ 0727 E6 00 92 00
  48+ 072B E7 00 95 00
  48+ 072F E8 00 99 00
  49+ 0733 E9 00 9C 00                          DW $E9, 156, $EA, 159, $EB, 163, $EC, 166, $ED, 170, $EE, 174
  49+ 0737 EA 00 9F 00
  49+ 073B EB 00 A3 00
  49+ 073F EC 00 A6 00
  49+ 0743 ED 00 AA 00
  49+ 0747 EE 00 AE 00
  50+ 074B EF 00 B2 00                          DW $EF, 178, $F0, 182, $F1, 185, $F2, 190, $F3, 194, $F4, 198
  50+ 074F F0 00 B6 00
  50+ 0753 F1 00 B9 00
  50+ 0757 F2 00 BE 00
  50+ 075B F3 00 C2 00
  50+ 075F F4 00 C6 00
  51+ 0763 F5 00 CA 00                          DW $F5, 202, $F6, 207, $F7, 211, $F8, 216, $F8, 217, $F9, 220
  51+ 0767 F6 00 CF 00
  51+ 076B F7 00 D3 00
  51+ 076F F8 00 D8 00
  51+ 0773 F8 00 D9 00
  51+ 0777 F9 00 DC 00
  52+ 077B FA 00 E1 00                          DW $FA, 225, $FB, 230, $FB, 233, $FC, 235, $FD, 240, $FE, 246
  52+ 077F FB 00 E6 00
  52+ 0783 FB 00 E9 00
  52+ 0787 FC 00 EB 00
  52+ 078B FD 00 F0 00
  52+ 078F FE 00 F6 00
  53+ 0793 FF 00 FB 00                          DW $FF, 251
  54+ 0797              LogReverseTableLen:     EQU $ - LogReverseHighByte
# file closed: ./Tables/logtable.asm
1655  0797                                  DISPLAY "Bank ",BankMathsTables," - Bytes free ",/D, $2000 - ($-MathsTablesAddr), " - BankMathsTables"
1656  0797                                  ASSERT $-MathsTablesAddr <8912, Bank code leaks over 8K boundary
1657  0797              ; Bank 100  -----------------------------------------------------------------------------------------------------------------------
1658  0797                                  SLOT    KeyboardAddr
1659  0797                                  PAGE    BankKeyboard
1660  0797                                  ORG SoundAddr, BankKeyboard
1661  E000                                  INCLUDE "./Hardware/keyboard.asm"
# file opened: ./Hardware/keyboard.asm
   1+ E000              ;
   2+ E000              ; $FEFE;65278 V, C, X, Z, Caps Shifts       4  3  2  1  0
   3+ E000              ; $FDFE;65022 G, F, D, S, A                 9  8  7  6  5
   4+ E000              ; $FBFE;64510 T, R, E, W, Q                14 13 12 11 10
   5+ E000              ; $F7FE;63486 5, 4, 3, 2, 1                19 18 17 16 15
   6+ E000              ; $EFFE;61438 6, 7, 8, 9, 0                24 23 22 23 20
   7+ E000              ; $DFFE;57342 Y, U, I, O, P                29 28 27 26 25
   8+ E000              ; $BFFE;49150 H, J, K, L, Enter            34 33 32 31 30
   9+ E000              ; $7FFE;32766 B, N, M, Symbol Shift, Space 39 38 37 36 35
  10+ E000              ;
  11+ E000              ; Keyboard
  12+ E000              ;
  13+ E000              ;   0      1       2       3       4       5        6       7       8       9
  14+ E000              ;  VK_CAPS, VK_Z,  VK_X,   VK_C,   VK_V,   VK_A,    VK_S,   VK_D,   VK_F,   VK_G
  15+ E000              ;   10     11      12      13      14      15       16      17      18      19
  16+ E000              ;  VK_Q,   VK_W,   VK_E,   VK_R,   VK_T,   VK_1,    VK_2,   VK_3,   VK_4,   VK_5
  17+ E000              ;   20     21      22      23      24      25       26      27      28      29
  18+ E000              ;  VK_0    VK_9,   VK_8,   VK_7,   VK_6,   VK_P ,    VK_O,  VK_I,   VK_U,   VK_Y
  19+ E000              ;   30     31      32      33      34      35       36      37      38      39
  20+ E000              ; VK_ENTER VK_L,   VK_K,   VK_J,   VK_H,   VK_SPACE VK_SYM, VK_M,   VK_N,   VK_B
  21+ E000              ;
  22+ E000              ; ZX Spectrum Next Compound keys
  23+ E000              ;   40     41       42       43      44      45       46       47
  24+ E000              ;  VK_SEMI VK_QUOTE VK_COMMA VK_STOP VK_UP   VK_DOWN  VK_LEFT  VK _RIGHT        $Register B0 bits 7 to 0    (Set to set ULA Register ($68) bit to to prevent default keystrokes
  25+ E000              ;   48       49      50       51         52          53       54      55
  26+ E000              ;  VK_DELETE VK_EDIT VK_BREAK VK_INV_VID VK_TRUE_VID VK_GRAPH VK_CAPS VK_EXTEND $Register B1 bits 7 to 0
  27+ E000              ; Default map
  28+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  29+ E000              ;   0          1           2             3              4           5           6           7           8           9
  30+ E000              ;   VK_CAPS    VK_Z        VK_X,         VK_C,          VK_V,       VK_A        VK_S,       VK_D,       VK_F,       VK_G
  31+ E000              ;              GameSkip                  Equip          SelLCargo   Climb       Decelerate  Recentre    FireM       HomeCursor
  32+ E000              ;                                                                                                       Find System
  33+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  34+ E000              ;   10         11          12            13             14          15          16          17          18          19
  35+ E000              ;   VK_Q       VK_W,       VK_E,         VK_R,          VK_T,       VK_1        VK_2        VK_3        VK_4        VK_5
  36+ E000              ;   Dive       Accelerate  ECM           UnarmMissile   TargetM     FrontV      AftV        LeftV       RightV      GalacticChart
  37+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  38+ E000              ;   20         Accel       22            23             24          25          26          27          28          29
  39+ E000              ;   VK_0       VK_9,       VK_8,         VK_7,          VK_6,       VK_P ,      VK_O,       VK_I,       VK_U,       VK_Y
  40+ E000              ;   EscapePod  Inventory   Status        MarketPrices   LocalChart  RollRight   RolLLeft                EnergyBomb  Quit
  41+ E000              ;   PlanetData                                                      PauseGame   SaveGame
  42+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  43+ E000              ;   30         31          32            33             34          Right       36          37          EnergyBomb  39
  44+ E000              ;   VK_ENTER   VK_L,       VK_K,         VK_J,          VK_H,       VK_SPACE    VK_SYM,     VK_M,       VK_N,       VK_B
  45+ E000              ;              Launch                    Distance       Hyperspace  Laser                               DockComp    BuyCargo
  46+ E000              ;              ResumeGame                WarpJump
  47+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  48+ E000              ;   40         41          42            43             44          45          46          47          48          49
  49+ E000              ;   VK_SEMI    VK_QUOTE    VK_COMMA      VK_STOP        VK_UP       VK_DOWN     VK_LEFT     VK _RIGHT   VK_DELETE   VK_EDIT
  50+ E000              ;   Market     EquipShip   PlanetData    NearestObject  Map Cursor no auto repeat....................   Delete      Find System
  51+ E000              ;
  52+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  53+ E000              ;   50         51          52            53             54          55
  54+ E000              ;   VK_BREAK   VK_INV_VID  VK_TRUE_VID   VK_GRAPH       VK_EXTCAPS  VK_EXTEND
  55+ E000              ;   EscapePod  Inventory   Status        GalacticChart  LocalChart  SystemJump
  56+ E000              ;
  57+ E000
  58+ E000              ; You can read address to check keystate by address KeyboardMap + c_Pressed corresponding key. There is also an addr_ helper too
  59+ E000
  60+ E000              c_Pressed_Front         equ 0  * 2
  61+ E000              c_Pressed_Aft           equ 1  * 2
  62+ E000              c_Pressed_Left          equ 2  * 2
  63+ E000              c_Pressed_Right         equ 3  * 2
  64+ E000              c_Pressed_RollLeft      equ 4  * 2
  65+ E000              c_Pressed_RollRight     equ 5  * 2
  66+ E000              c_Pressed_Dive          equ 6  * 2
  67+ E000              c_Pressed_Climb         equ 7  * 2
  68+ E000              c_Pressed_Accellerate   equ 8  * 2
  69+ E000              c_Pressed_Decellerate   equ 9  * 2
  70+ E000              c_Pressed_FireLaser     equ 10 * 2
  71+ E000              c_Pressed_TargetMissle  equ 11 * 2
  72+ E000              c_Pressed_FireMissile   equ 12 * 2
  73+ E000              c_Pressed_UnarmMissile  equ 13 * 2
  74+ E000              c_Pressed_ECM           equ 14 * 2
  75+ E000              c_Pressed_EnergyBomb    equ 15 * 2
  76+ E000              c_Pressed_EscapePod     equ 16 * 2
  77+ E000              c_Pressed_DockingComp   equ 17 * 2
  78+ E000              c_Pressed_Hyperspace    equ 18 * 2
  79+ E000              c_Pressed_Distance      equ 19 * 2
  80+ E000              c_Pressed_HomeCursor    equ 20 * 2
  81+ E000              c_Pressed_Launch        equ 21 * 2
  82+ E000              c_Pressed_BuyCargo      equ 22 * 2
  83+ E000              c_Pressed_SellCargo     equ 23 * 2
  84+ E000              c_Pressed_Equip         equ 24 * 2
  85+ E000              c_Pressed_GalacticChrt  equ 25 * 2
  86+ E000              c_Pressed_LocalChart    equ 26 * 2
  87+ E000              c_Pressed_MarketPrices  equ 27 * 2
  88+ E000              c_Pressed_Status        equ 28 * 2
  89+ E000              c_Pressed_Inventory     equ 29 * 2
  90+ E000              c_Pressed_GameSkip      equ 30 * 2
  91+ E000              c_Pressed_Save          equ 31 * 2
  92+ E000              c_Pressed_Freeze        equ 32 * 2
  93+ E000              c_Pressed_Resume        equ 33 * 2
  94+ E000              c_Pressed_Recentre      equ 34 * 2
  95+ E000              c_Pressed_Quit          equ 35 * 2
  96+ E000              c_Pressed_PlanetData    equ 36 * 2
  97+ E000              c_Pressed_CursorUp      equ 37 * 2
  98+ E000              c_Pressed_CursorDown    equ 38 * 2
  99+ E000              c_Pressed_Find          equ 39 * 2
 100+ E000              c_Pressed_Yes           equ 40 * 2
 101+ E000              c_Pressed_No            equ 41 * 2
 102+ E000              c_Pressed_Warp          equ 42 * 2
 103+ E000              c_Pressed_ExtMarket     equ 43 * 2
 104+ E000              c_Pressed_ExtEquip      equ 44 * 2
 105+ E000              c_Pressed_ExtPlanet     equ 45 * 2
 106+ E000              c_Pressed_ExtNearest    equ 46 * 2
 107+ E000              c_Pressed_ExtCurUp      equ 47 * 2
 108+ E000              c_Pressed_ExtCurDown    equ 48 * 2
 109+ E000              c_Pressed_ExtCurLeft    equ 49 * 2
 110+ E000              c_Pressed_ExtCurRight   equ 50 * 2
 111+ E000              c_Pressed_ExtDelete     equ 51 * 2
 112+ E000              c_Pressed_ExtFindSystem equ 52 * 2
 113+ E000              c_Pressed_ExtEscapePod  equ 53 * 2
 114+ E000              c_Pressed_ExtInventory  equ 54 * 2
 115+ E000              c_Pressed_ExtStatus     equ 55 * 2
 116+ E000              c_Pressed_ExtGlactic    equ 56 * 2
 117+ E000              c_Pressed_ExtLocal      equ 57 * 2
 118+ E000              c_Pressed_ExtSystemJump equ 58 * 2
 119+ E000
 120+ E000              ; half row 1
 121+ E000              VK_CAPS  				equ 0
 122+ E000              VK_Z  					equ 1
 123+ E000              VK_X  					equ 2
 124+ E000              VK_C  					equ 3
 125+ E000              VK_V  					equ 4
 126+ E000              ; half row 2
 127+ E000              VK_A  					equ 5
 128+ E000              VK_S  					equ 6
 129+ E000              VK_D  					equ 7
 130+ E000              VK_F					equ 8
 131+ E000              VK_G  					equ 9
 132+ E000              ; half row 3
 133+ E000              VK_Q  					equ 10
 134+ E000              VK_W  					equ 11
 135+ E000              VK_E  					equ 12
 136+ E000              VK_R  					equ 13
 137+ E000              VK_T  					equ 14
 138+ E000              ; half row 4
 139+ E000              VK_1  					equ 15
 140+ E000              VK_2  					equ 16
 141+ E000              VK_3  					equ 17
 142+ E000              VK_4  					equ 18
 143+ E000              VK_5  					equ 19
 144+ E000              ; half row 5
 145+ E000              VK_0 					equ 20
 146+ E000              VK_9 					equ 21
 147+ E000              VK_8 					equ 22
 148+ E000              VK_7 					equ 23
 149+ E000              VK_6 					equ 24
 150+ E000              ; half row 6
 151+ E000              VK_P  					equ 25
 152+ E000              VK_O  					equ 26
 153+ E000              VK_I  					equ 27
 154+ E000              VK_U  					equ 28
 155+ E000              VK_Y  					equ 29
 156+ E000              ; half row 7
 157+ E000              VK_ENTER 				equ 30
 158+ E000              VK_L  					equ 31
 159+ E000              VK_K  					equ 32
 160+ E000              VK_J  					equ 33
 161+ E000              VK_H  					equ 34
 162+ E000              ; half row 8
 163+ E000              VK_SPACE 				equ 35
 164+ E000              VK_SYM  				equ 36
 165+ E000              VK_M  					equ 37
 166+ E000              VK_N  					equ 38
 167+ E000              VK_B  					equ 39
 168+ E000              ; Extended Group B0
 169+ E000              VK_SEMI                 equ 40
 170+ E000              VK_QUOTE                equ 41
 171+ E000              VK_COMMA                equ 42
 172+ E000              VK_STOP                 equ 43
 173+ E000              VK_UP                   equ 44
 174+ E000              VK_DOWN                 equ 45
 175+ E000              VK_LEFT                 equ 46
 176+ E000              VK_RIGHT                equ 47
 177+ E000              ; Extended Group B1
 178+ E000              VK_DELETE               equ 48
 179+ E000              VK_EDIT                 equ 49
 180+ E000              VK_BREAK                equ 50
 181+ E000              VK_INV_VID              equ 51
 182+ E000              VK_TRUE_VID             equ 52
 183+ E000              VK_GRAPH                equ 53
 184+ E000              VK_EXTCAPS              equ 54
 185+ E000              VK_EXTEND               equ 55
 186+ E000              ;KeyboardMapping
 187+ E000              KeyCode_Front        	equ VK_1
 188+ E000              KeyCode_Aft          	equ VK_2
 189+ E000              KeyCode_Left         	equ VK_3
 190+ E000              KeyCode_Right        	equ VK_4
 191+ E000              KeyCode_RollLeft     	equ VK_O
 192+ E000              KeyCode_RollRight    	equ VK_P
 193+ E000              KeyCode_Dive         	equ VK_Q
 194+ E000              KeyCode_Climb        	equ VK_A
 195+ E000              KeyCode_Accellerate  	equ VK_W
 196+ E000              KeyCode_Decellerate  	equ VK_S
 197+ E000              KeyCode_FireLaser    	equ VK_SPACE
 198+ E000              KeyCode_TargetMissle 	equ VK_T
 199+ E000              KeyCode_FireMissile  	equ VK_STOP
 200+ E000              KeyCode_Find        	equ VK_F
 201+ E000              KeyCode_UnarmMissile 	equ VK_R
 202+ E000              KeyCode_ECM          	equ VK_E
 203+ E000              KeyCode_EnergyBomb   	equ VK_U
 204+ E000              KeyCode_EscapePod    	equ VK_CAPS
 205+ E000              KeyCode_DockingComp  	equ VK_N
 206+ E000              KeyCode_Hyperspace   	equ VK_H
 207+ E000              KeyCode_Distance     	equ VK_J
 208+ E000              KeyCode_HomeCursor   	equ VK_G
 209+ E000              KeyCode_Launch       	equ VK_L
 210+ E000              KeyCode_BuyCargo     	equ VK_B
 211+ E000              KeyCode_SellCargo    	equ VK_V
 212+ E000              KeyCode_Equip        	equ VK_C
 213+ E000              KeyCode_GalacticChrt 	equ VK_5
 214+ E000              KeyCode_LocalChart   	equ VK_6
 215+ E000              KeyCode_MarketPrices 	equ VK_7
 216+ E000              KeyCode_Status       	equ VK_8
 217+ E000              KeyCode_Inventory    	equ VK_9
 218+ E000              KeyCode_GameSkip     	equ VK_Z
 219+ E000              KeyCode_Save         	equ VK_O
 220+ E000              KeyCode_Freeze       	equ VK_B
 221+ E000              KeyCode_Resume       	equ VK_L
 222+ E000              KeyCode_Recentre     	equ VK_STOP
 223+ E000              KeyCode_Quit         	equ VK_Y
 224+ E000              KeyCode_PlanetData   	equ VK_0
 225+ E000              KeyCode_CursorUp        equ VK_Q
 226+ E000              KeyCode_CursorDown      equ VK_A
 227+ E000              KeyCode_PressedYes      equ VK_Y
 228+ E000              KeyCode_PressedNo       equ VK_N
 229+ E000              KeyCode_Warp            equ VK_J
 230+ E000              KeyCode_ExtMarket       equ VK_SEMI
 231+ E000              KeyCode_ExtEquip        equ VK_QUOTE
 232+ E000              KeyCode_ExtPlanet       equ VK_COMMA
 233+ E000              KeyCode_ExtNearest      equ VK_STOP
 234+ E000              KeyCode_ExtCurUp        equ VK_UP
 235+ E000              KeyCode_ExtCurDown      equ VK_DOWN
 236+ E000              KeyCode_ExtCurLeft      equ VK_LEFT
 237+ E000              KeyCode_ExtCurRight     equ VK_RIGHT
 238+ E000              KeyCode_ExtDelete       equ VK_DELETE
 239+ E000              KeyCode_ExtFindSystem   equ VK_EDIT
 240+ E000              KeyCode_ExtEscapePod    equ VK_BREAK
 241+ E000              KeyCode_ExtInventory    equ VK_INV_VID
 242+ E000              KeyCode_ExtStatus       equ VK_TRUE_VID
 243+ E000              KeyCode_ExtGlactic      equ VK_GRAPH
 244+ E000              KeyCode_ExtLocal        equ VK_EXTCAPS
 245+ E000              KeyCode_ExtSystemJump   equ VK_EXTEND
 246+ E000
 247+ E000 00 00 00...  Keys					DS	55          ; This is the list of key states for all the VK keys presssed i.e. VK_CAPS through to VK_B
 248+ E037              c_KeyBoardLen 			equ $ - Keys
 249+ E037 00 00 00...  RawKeys					DS	10          ; increased for extended keys
 250+ E041 FE FD FB F7  KeyAddrTab				DB	$FE, $FD, $FB, $F7, $EF, $DF, $BF, $7F
 250+ E045 EF DF BF 7F
 251+ E049              ; Now keyboard map lists each game key and the corresponding address in the Keys table to get the value. This way redefining keys is just a case
 252+ E049              ; of updating this table with the respective location to look up
 253+ E049              ; key list sequence is in table above
 254+ E049 0F E0 10 E0  KeyboardMap             DW  Keys+KeyCode_Front        ,Keys+KeyCode_Aft          ,Keys+KeyCode_Left         ,Keys+KeyCode_Right        ,Keys+KeyCode_RollLeft
 254+ E04D 11 E0 12 E0
 254+ E051 1A E0
 255+ E053 19 E0 0A E0                          DW  Keys+KeyCode_RollRight    ,Keys+KeyCode_Dive         ,Keys+KeyCode_Climb        ,Keys+KeyCode_Accellerate  ,Keys+KeyCode_Decellerate
 255+ E057 05 E0 0B E0
 255+ E05B 06 E0
 256+ E05D 23 E0 0E E0                          DW  Keys+KeyCode_FireLaser    ,Keys+KeyCode_TargetMissle ,Keys+KeyCode_FireMissile  ,Keys+KeyCode_UnarmMissile ,Keys+KeyCode_ECM
 256+ E061 2B E0 0D E0
 256+ E065 0C E0
 257+ E067 1C E0 00 E0                          DW  Keys+KeyCode_EnergyBomb   ,Keys+KeyCode_EscapePod    ,Keys+KeyCode_DockingComp  ,Keys+KeyCode_Hyperspace   ,Keys+KeyCode_Distance
 257+ E06B 26 E0 22 E0
 257+ E06F 21 E0
 258+ E071 09 E0 1F E0                          DW  Keys+KeyCode_HomeCursor   ,Keys+KeyCode_Launch       ,Keys+KeyCode_BuyCargo     ,Keys+KeyCode_SellCargo    ,Keys+KeyCode_Equip
 258+ E075 27 E0 04 E0
 258+ E079 03 E0
 259+ E07B 13 E0 18 E0                          DW  Keys+KeyCode_GalacticChrt ,Keys+KeyCode_LocalChart   ,Keys+KeyCode_MarketPrices ,Keys+KeyCode_Status       ,Keys+KeyCode_Inventory
 259+ E07F 17 E0 16 E0
 259+ E083 15 E0
 260+ E085 01 E0 1A E0                          DW  Keys+KeyCode_GameSkip     ,Keys+KeyCode_Save         ,Keys+KeyCode_Freeze       ,Keys+KeyCode_Resume       ,Keys+KeyCode_Recentre
 260+ E089 27 E0 1F E0
 260+ E08D 2B E0
 261+ E08F 1D E0 14 E0                          DW  Keys+KeyCode_Quit         ,Keys+KeyCode_PlanetData   ,Keys+KeyCode_CursorUp     ,Keys+KeyCode_CursorDown   ,Keys+KeyCode_Find
 261+ E093 0A E0 05 E0
 261+ E097 08 E0
 262+ E099 1D E0 26 E0                          DW  Keys+KeyCode_PressedYes   ,Keys+KeyCode_PressedNo    ,Keys+KeyCode_Warp         ,Keys+KeyCode_ExtMarket    ,Keys+KeyCode_ExtEquip
 262+ E09D 21 E0 28 E0
 262+ E0A1 29 E0
 263+ E0A3 2A E0 2B E0                          DW  Keys+KeyCode_ExtPlanet    ,Keys+KeyCode_ExtNearest   ,Keys+KeyCode_ExtCurUp     ,Keys+KeyCode_ExtCurDown   ,Keys+KeyCode_ExtCurLeft
 263+ E0A7 2C E0 2D E0
 263+ E0AB 2E E0
 264+ E0AD 2F E0 30 E0                          DW  Keys+KeyCode_ExtCurRight  ,Keys+KeyCode_ExtDelete    ,Keys+KeyCode_ExtFindSystem,Keys+KeyCode_ExtEscapePod ,Keys+KeyCode_ExtInventory
 264+ E0B1 31 E0 32 E0
 264+ E0B5 33 E0
 265+ E0B7 34 E0 35 E0                          DW  Keys+KeyCode_ExtStatus    ,Keys+KeyCode_ExtGlactic   ,Keys+KeyCode_ExtLocal     ,Keys+KeyCode_ExtSystemJump
 265+ E0BB 36 E0 37 E0
 266+ E0BF
 267+ E0BF
 268+ E0BF 3F 5A 58 43  ASCII_Map:              DB "?","Z","X","C","V"
 268+ E0C3 56
 269+ E0C4 41 53 44 46                          DB "A","S","D","F","G"
 269+ E0C8 47
 270+ E0C9 51 57 45 52                          DB "Q","W","E","R","T"
 270+ E0CD 54
 271+ E0CE 31 32 33 34                          DB "1","2","3","4","5"
 271+ E0D2 35
 272+ E0D3 30 39 38 37                          DB "0","9","8","7","6"
 272+ E0D7 36
 273+ E0D8 50 4F 49 55                          DB "P","O","I","U","Y"
 273+ E0DC 59
 274+ E0DD 3E 4C 4B 4A                          DB ">","L","K","J","H"
 274+ E0E1 48
 275+ E0E2 20 5E 4D 4E                          DB " ","^","M","N","B"
 275+ E0E6 42
 276+ E0E7 3B 22 2C 2E                          DB ";",'"',",",".","^","v","[","]"  ; Extended keys register 0 semicolon, quote, comman, fullstop, up, down, left, right
 276+ E0EB 5E 76 5B 5D
 277+ E0EF 23 65 62 69                          DB "#","e","b","i","t","g","c","x"  ; Extended keys register 1 delete, edit, break, inv video, true video graph, caps, extend
 277+ E0F3 74 67 63 78
 278+ E0F7              ; mapping of a code to the lookup table Keyboard map. So if you are using an addr_Pressed you can then fetch from KeyboardMap the address in Keys
 279+ E0F7              ; for the raw key press status
 280+ E0F7              addr_Pressed_Front         equ KeyboardMap+c_Pressed_Front
 281+ E0F7              addr_Pressed_Aft           equ KeyboardMap+c_Pressed_Aft
 282+ E0F7              addr_Pressed_Left          equ KeyboardMap+c_Pressed_Left
 283+ E0F7              addr_Pressed_Right         equ KeyboardMap+c_Pressed_Right
 284+ E0F7              addr_Pressed_RollLeft      equ KeyboardMap+c_Pressed_RollLeft
 285+ E0F7              addr_Pressed_RollRight     equ KeyboardMap+c_Pressed_RollRight
 286+ E0F7              addr_Pressed_Dive          equ KeyboardMap+c_Pressed_Dive
 287+ E0F7              addr_Pressed_Climb         equ KeyboardMap+c_Pressed_Climb
 288+ E0F7              addr_Pressed_Accellerate   equ KeyboardMap+c_Pressed_Accellerate
 289+ E0F7              addr_Pressed_Decellerate   equ KeyboardMap+c_Pressed_Decellerate
 290+ E0F7              addr_Pressed_FireLaser     equ KeyboardMap+c_Pressed_FireLaser
 291+ E0F7              addr_Pressed_TargetMissle  equ KeyboardMap+c_Pressed_TargetMissle
 292+ E0F7              addr_Pressed_FireMissile   equ KeyboardMap+c_Pressed_FireMissile
 293+ E0F7              addr_Pressed_UnarmMissile  equ KeyboardMap+c_Pressed_UnarmMissile
 294+ E0F7              addr_Pressed_ECM           equ KeyboardMap+c_Pressed_ECM
 295+ E0F7              addr_Pressed_EnergyBomb    equ KeyboardMap+c_Pressed_EnergyBomb
 296+ E0F7              addr_Pressed_EscapePod     equ KeyboardMap+c_Pressed_EscapePod
 297+ E0F7              addr_Pressed_DockingComp   equ KeyboardMap+c_Pressed_DockingComp
 298+ E0F7              addr_Pressed_Hyperspace    equ KeyboardMap+c_Pressed_Hyperspace
 299+ E0F7              addr_Pressed_Distance      equ KeyboardMap+c_Pressed_Distance
 300+ E0F7              addr_Pressed_HomeCursor    equ KeyboardMap+c_Pressed_HomeCursor
 301+ E0F7              addr_Pressed_Launch        equ KeyboardMap+c_Pressed_Launch
 302+ E0F7              addr_Pressed_BuyCargo      equ KeyboardMap+c_Pressed_BuyCargo
 303+ E0F7              addr_Pressed_SellCargo     equ KeyboardMap+c_Pressed_SellCargo
 304+ E0F7              addr_Pressed_Equip         equ KeyboardMap+c_Pressed_Equip
 305+ E0F7              addr_Pressed_GalacticChrt  equ KeyboardMap+c_Pressed_GalacticChrt
 306+ E0F7              addr_Pressed_LocalChart    equ KeyboardMap+c_Pressed_LocalChart
 307+ E0F7              addr_Pressed_MarketPrices  equ KeyboardMap+c_Pressed_MarketPrices
 308+ E0F7              addr_Pressed_Status        equ KeyboardMap+c_Pressed_Status
 309+ E0F7              addr_Pressed_Inventory     equ KeyboardMap+c_Pressed_Inventory
 310+ E0F7              addr_Pressed_GameSkip      equ KeyboardMap+c_Pressed_GameSkip
 311+ E0F7              addr_Pressed_Save          equ KeyboardMap+c_Pressed_Save
 312+ E0F7              addr_Pressed_Freeze        equ KeyboardMap+c_Pressed_Freeze
 313+ E0F7              addr_Pressed_Resume        equ KeyboardMap+c_Pressed_Resume
 314+ E0F7              addr_Pressed_Recentre      equ KeyboardMap+c_Pressed_Recentre
 315+ E0F7              addr_Pressed_Quit          equ KeyboardMap+c_Pressed_Quit
 316+ E0F7              addr_Pressed_PlanetData    equ KeyboardMap+c_Pressed_PlanetData
 317+ E0F7              addr_Pressed_CursorUp      equ KeyboardMap+c_Pressed_CursorUp
 318+ E0F7              addr_Pressed_CursorDown    equ KeyboardMap+c_Pressed_CursorDown
 319+ E0F7              addr_Pressed_Find          equ KeyboardMap+c_Pressed_Find
 320+ E0F7              addr_Pressed_Warp          equ KeyboardMap+c_Pressed_Warp
 321+ E0F7
 322+ E0F7
 323+ E0F7              MIsKeyPressed:          MACRO   keyaddress, misstarget
 324+ E0F7 ~                                    MMUSelectKeyboard
 325+ E0F7 ~                                    ld      hl,(keyaddress)
 326+ E0F7 ~                                    ld      a,(hl)
 327+ E0F7 ~                                    JumpIfAIsZero   misstarget
 328+ E0F7                                      ENDM
 329+ E0F7
 330+ E0F7
 331+ E0F7 21 00 E0     init_keyboard:          ld		hl,Keys                         ; no key s are pressed by default
 332+ E0FA 11 37 00                             ld		de, c_KeyBoardLen               ;
 333+ E0FD 3E 00                                ld		a,0                             ;
 334+ E0FF CD 38 7D                             call	memfill_dma                     ;
 335+ E102 C9                                   ret                                     ;
 336+ E103
 337+ E103
 338+ E103
 339+ E103 DD 21 37 E0  scan_keyboard:          ld		ix,RawKeys                      ; hl = table of raw IO port readings
 340+ E107 21 41 E0                             ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 341+ E10A 0E 08                                ld		c,8                             ; 8 ports to ready
 342+ E10C 11 00 E0                             ld      de,Keys                         ; ix = table of key states from raw read
 343+ E10F 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 344+ E110 DB FE                                in		a,($FE)							; read port to a
 345+ E112 DD 77 00                             ld      (ix+0),a                        ; save raw scan
 346+ E115 DD 23                                inc     ix
 347+ E117 23                                   inc		hl                              ; and ready for next read
 348+ E118 06 05        .ProcessInputBits:      ld		b,5								; loop all bits (there are only 5 keys to a group)
 349+ E11A 1F           .ProcessBitsLoop:       rra                                     ; shit bit 0 into carry
 350+ E11B 30 08                                jr      nc,.SetKeyPressed               ; low bit means it was pressed
 351+ E11D FD 6F                                ld      iyl,a
 352+ E11F                                      ZeroA
 352+ E11F AF          >                        xor a
 353+ E120 C3 2D E1                             jp      .SetKey
 354+ E123 20 0B                                jr		nz,.SkipKeySet
 355+ E125 FD 6F        .SetKeyPressed:	        ld      iyl,a                           ; save current input byte
 356+ E127 1A                                   ld      a,(de)                          ; get current keystate
 357+ E128 FE 02                                cp      2
 358+ E12A 28 02                                jr      z,.AlreadyHeld
 359+ E12C 3C                                   inc     a                               ; and increment by 1 as its moved from previous state
 360+ E12D 12           .SetKey:                ld		(de),a				  	        ; save key Pressed state
 361+ E12E FD 7D        .AlreadyHeld:           ld      a,iyl                           ; and retrieve the current input byte
 362+ E130 13           .SkipKeySet:	        inc		de								; move to next key
 363+ E131 10 E7                                djnz	.ProcessBitsLoop				; Process all key group bits
 364+ E133 0D                                   dec     c                               ; thats one row of bits all processed
 365+ E134 20 D9                                jr      nz,.PortReadLoop				; Read next input port
 366+ E136              .ReadExtend0:           GetNextReg EXTENDED_KEYS_0_REGISTER
 366+ E136 01 3B 24    >            ld bc,$243B
 366+ E139 3E B0       >            ld a,EXTENDED_KEYS_0_REGISTER
 366+ E13B ED 79       >            out (c),a
 366+ E13D 04          >            inc b
 366+ E13E ED 78       >            in a,(c)
 367+ E140 32 3F E0                             ld      (RawKeys+8),a                   ; save to extended slot
 368+ E143 06 08                                ld      b,8
 369+ E145 21 28 E0                             ld      hl,Keys + VK_SEMI
 370+ E148 17           .ProcessExtend0:        rla                                     ; shift bits left into carry for extended keys
 371+ E149 30 04                                jr      nc,.SetExtend0KeyPressed
 372+ E14B              .Extend0NotPressed:     ZeroA
 372+ E14B AF          >                        xor a
 373+ E14C C3 55 E1                             jp      .SetExtend0Key
 374+ E14F 7E           .SetExtend0KeyPressed:  ld      a,(hl)
 375+ E150 FE 02                                cp      2
 376+ E152 28 02                                jr      z,.Extend0AlreadyHeld
 377+ E154 3C                                   inc     a
 378+ E155 77           .SetExtend0Key:         ld      (hl),a
 379+ E156 23           .Extend0AlreadyHeld:    inc     hl
 380+ E157 10 EF                                djnz    .ProcessExtend0
 381+ E159              .ReadExtend1:           GetNextReg EXTENDED_KEYS_1_REGISTER
 381+ E159 01 3B 24    >            ld bc,$243B
 381+ E15C 3E B1       >            ld a,EXTENDED_KEYS_1_REGISTER
 381+ E15E ED 79       >            out (c),a
 381+ E160 04          >            inc b
 381+ E161 ED 78       >            in a,(c)
 382+ E163 32 40 E0                             ld      (RawKeys+9),a                      ; save to extended slot
 383+ E166 06 08                                ld      b,8
 384+ E168 21 30 E0                             ld      hl,Keys + VK_DELETE
 385+ E16B 17           .ProcessExtend1:        rla                                     ; shift bits left into carry for extended keys
 386+ E16C 30 04                                jr      nc,.SetExtend1KeyPressed
 387+ E16E              .Extend1NotPressed:     ZeroA
 387+ E16E AF          >                        xor a
 388+ E16F C3 78 E1                             jp      .SetExtend1Key
 389+ E172 7E           .SetExtend1KeyPressed:  ld      a,(hl)
 390+ E173 FE 02                                cp      2
 391+ E175 28 02                                jr      z,.Extend1AlreadyHeld
 392+ E177 3C                                   inc     a
 393+ E178 77           .SetExtend1Key:         ld      (hl),a
 394+ E179 23           .Extend1AlreadyHeld:    inc     hl
 395+ E17A 10 EF                                djnz    .ProcessExtend1
 396+ E17C C9                                   ret
 397+ E17D
 398+ E17D
 399+ E17D
 400+ E17D              GetKeyStateAddressDE:   MACRO
 401+ E17D ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 402+ E17D ~                                    add     hl,a
 403+ E17D ~                                    ld      e,(hl)
 404+ E17D ~                                    inc     hl
 405+ E17D ~                                    ld      d,(hl)                          ; now de = address in keypress list
 406+ E17D                                      ENDM
 407+ E17D
 408+ E17D              GetKeyStateAddressHL:   MACRO
 409+ E17D ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 410+ E17D ~                                    add     hl,a
 411+ E17D ~                                    ld      a,(hl)
 412+ E17D ~                                    inc     hl
 413+ E17D ~                                    ld      h,(hl)                          ; now hl = address in keypress list
 414+ E17D ~                                    ld      l,a
 415+ E17D                                      ENDM
 416+ E17D
 417+ E17D
 418+ E17D              ;;old debug codeCurrentX            DB 0
 419+ E17D              ;;old debug codeCurrentY            DB 0
 420+ E17D              ;;old debug code
 421+ E17D              ;;old debug codedisplayKeyStatus:       xor         a
 422+ E17D              ;;old debug code                        ld          (CurrentX),a
 423+ E17D              ;;old debug code                        ld          hl,RawKeys
 424+ E17D              ;;old debug code                        ld          a,(hl)
 425+ E17D              ;;old debug code                        and         %00011111
 426+ E17D              ;;old debug code                        ld          b,5
 427+ E17D              ;;old debug code.displayLoop:           push        bc,,hl
 428+ E17D              ;;old debug code                        rra
 429+ E17D              ;;old debug code                        jr          c,.displayNoPress
 430+ E17D              ;;old debug code.displayPress:          push        af
 431+ E17D              ;;old debug code                        ld          a,(CurrentX)
 432+ E17D              ;;old debug code                        ld          e,a
 433+ E17D              ;;old debug code                        ld          a,(CurrentY)
 434+ E17D              ;;old debug code                        ld          d,a
 435+ E17D              ;;old debug code                        ld          a,'*'
 436+ E17D              ;;old debug code                        MMUSelectLayer1
 437+ E17D              ;;old debug code                        call        l1_print_char
 438+ E17D              ;;old debug code                        ld          a,(CurrentX)
 439+ E17D              ;;old debug code                        add         a,8
 440+ E17D              ;;old debug code                        ld          (CurrentX),a
 441+ E17D              ;;old debug code                        pop         af
 442+ E17D              ;;old debug code                        pop         bc,,hl
 443+ E17D              ;;old debug code                        djnz        .displayLoop
 444+ E17D              ;;old debug code                        ret
 445+ E17D              ;;old debug code.displayNoPress:        push        af
 446+ E17D              ;;old debug code                        ld          a,(CurrentX)
 447+ E17D              ;;old debug code                        ld          e,a
 448+ E17D              ;;old debug code                        ld          a,(CurrentY)
 449+ E17D              ;;old debug code                        ld          d,a
 450+ E17D              ;;old debug code                        ld          a,'O'
 451+ E17D              ;;old debug code                        MMUSelectLayer1
 452+ E17D              ;;old debug code                        call        l1_print_char
 453+ E17D              ;;old debug code                        ld          a,(CurrentX)
 454+ E17D              ;;old debug code                        add         a,8
 455+ E17D              ;;old debug code                        ld          (CurrentX),a
 456+ E17D              ;;old debug code                        pop         af
 457+ E17D              ;;old debug code                        pop         bc,,hl
 458+ E17D              ;;old debug code                        djnz        .displayLoop
 459+ E17D              ;;old debug code                        ret
 460+ E17D              ;;old debug code
 461+ E17D              ;;old debug codedisplayDownStatus:      ld  a,(Keys+      KeyCode_CursorUp)
 462+ E17D              ;;old debug code                        cp  0
 463+ E17D              ;;old debug code                        jr      z,.displayNoUp
 464+ E17D              ;;old debug code                        cp  1
 465+ E17D              ;;old debug code                        jr      z,.displayUp
 466+ E17D              ;;old debug code.displayHeld:           ld      de,8*15
 467+ E17D              ;;old debug code                        ld      a,"*"
 468+ E17D              ;;old debug code                        MMUSelectLayer1
 469+ E17D              ;;old debug code                        call        l1_print_char
 470+ E17D              ;;old debug code                        ret
 471+ E17D              ;;old debug code.displayUp:             ld      de,8*15
 472+ E17D              ;;old debug code                        ld      a,"+"
 473+ E17D              ;;old debug code                        MMUSelectLayer1
 474+ E17D              ;;old debug code                        call        l1_print_char
 475+ E17D              ;;old debug code                        ret
 476+ E17D              ;;old debug code.displayNoUp:             ld      de,8*15
 477+ E17D              ;;old debug code                        ld      a,"O"
 478+ E17D              ;;old debug code                        MMUSelectLayer1
 479+ E17D              ;;old debug code                        call        l1_print_char
 480+ E17D              ;;old debug code                        ret
 481+ E17D              ;;old debug code
 482+ E17D
 483+ E17D
 484+ E17D              ; call with a = c_Pressed key, will then read mapping does this with keyboard scan, waits until key gets to state 1, if it was already held then#
 485+ E17D              ; it will have to be let go to reset of 0 and scan again
 486+ E17D              ; Deprecated as not used as yet
 487+ E17D              ;;;;;;wait_for_key_a_press:   GetKeyStateAddressHL
 488+ E17D              ;;;;;;                        push    hl
 489+ E17D              ;;;;;;.wait_loop:             call    scan_keyboard
 490+ E17D              ;;;;;;                        pop     hl                              ; get key address into hl
 491+ E17D              ;;;;;;                        push    hl
 492+ E17D              ;;;;;;                        ld      a,(hl)
 493+ E17D              ;;;;;;                        JumpIfANENusng  1,.wait_loop             ; will also loop if held down when entering this routine
 494+ E17D              ;;;;;;                        pop     hl                              ; tidy up rogue push, less t states than detecting if we want to push or not
 495+ E17D              ;;;;;;                        ret
 496+ E17D              ;;;;;;; call with a = c_Pressed key, will then read mapping does this with keyboard scan waits until key gets to state 2
 497+ E17D              ;;;;;;wait_for_key_a_held:    GetKeyStateAddressDE
 498+ E17D              ;;;;;;                        push    hl
 499+ E17D              ;;;;;;.wait_loop:             call    scan_keyboard
 500+ E17D              ;;;;;;                        pop     hl
 501+ E17D              ;;;;;;                        push    hl
 502+ E17D              ;;;;;;                        ld      a,(hl)
 503+ E17D              ;;;;;;                        JumpIfALTNusng  2, .wait_loop
 504+ E17D              ;;;;;;                        pop     hl
 505+ E17D              ;;;;;;                        ret
 506+ E17D
 507+ E17D              ; Gets the current keystate of the c_Pressed Key in a register
 508+ E17D              get_key_a_state:        GetKeyStateAddressHL                    ; reads a mapped key and sets a to key staus, e.g. 0 1 or >=2 DOES NOT SCAN KEYBOARD
 508+ E17D 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 508+ E180 ED 31       >                        add     hl,a
 508+ E182 7E          >                        ld      a,(hl)
 508+ E183 23          >                        inc     hl
 508+ E184 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 508+ E185 6F          >                        ld      l,a
 509+ E186 7E                                   ld      a,(hl)                          ; a = keystate
 510+ E187 C9                                   ret
 511+ E188
 512+ E188              ; sets they keystate of c pressed key in a register to 1 (pressed)
 513+ E188              ; This will be used by auto dock
 514+ E188              force_key_press:        GetKeyStateAddressHL                    ; read key locations
 514+ E188 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 514+ E18B ED 31       >                        add     hl,a
 514+ E18D 7E          >                        ld      a,(hl)
 514+ E18E 23          >                        inc     hl
 514+ E18F 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 514+ E190 6F          >                        ld      l,a
 515+ E191 3E 01                                ld      a,1
 516+ E193 77                                   ld      (hl),a
 517+ E194 C9                                   ret
 518+ E195
 519+ E195              is_key_up_state:        GetKeyStateAddressHL
 519+ E195 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 519+ E198 ED 31       >                        add     hl,a
 519+ E19A 7E          >                        ld      a,(hl)
 519+ E19B 23          >                        inc     hl
 519+ E19C 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 519+ E19D 6F          >                        ld      l,a
 520+ E19E 7E                                   ld      a,(hl)
 521+ E19F FE 00                                cp      0
 522+ E1A1 C9                                   ret
 523+ E1A2
 524+ E1A2              ; returns z is set if c_ key is pressed
 525+ E1A2              is_key_pressed:         GetKeyStateAddressHL
 525+ E1A2 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 525+ E1A5 ED 31       >                        add     hl,a
 525+ E1A7 7E          >                        ld      a,(hl)
 525+ E1A8 23          >                        inc     hl
 525+ E1A9 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 525+ E1AA 6F          >                        ld      l,a
 526+ E1AB 7E                                   ld      a,(hl)                          ; a = keystate
 527+ E1AC FE 01                                cp      1                               ; we cant just test bit 0 as this may have been held long
 528+ E1AE C9                                   ret
 529+ E1AF
 530+ E1AF              ; returns nz is set if c_ key is held, if key was held then keystate would be 2 or 3, i.e. bit 1 set
 531+ E1AF              is_key_held:            GetKeyStateAddressHL
 531+ E1AF 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 531+ E1B2 ED 31       >                        add     hl,a
 531+ E1B4 7E          >                        ld      a,(hl)
 531+ E1B5 23          >                        inc     hl
 531+ E1B6 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 531+ E1B7 6F          >                        ld      l,a
 532+ E1B8 7E                                   ld      a,(hl)                          ; a = keystate
 533+ E1B9 E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 534+ E1BB C9                                   ret
 535+ E1BC
 536+ E1BC              ; checks to see if any key is pressed in the key table
 537+ E1BC 21 00 E0     is_any_key_pressed:     ld      hl,Keys
 538+ E1BF 01 28 00                             ld      bc,40
 539+ E1C2 3E 01                                ld      a,1
 540+ E1C4 ED B1                                cpir                                    ; search for the value 1
 541+ E1C6 28 03                                jr      z,.KeyPressed                   ; if a key was pressed then handle press
 542+ E1C8                                      SetAFalse
 542+ E1C8 3E FF       >                        ld      a,$FF
 543+ E1CA C9                                   ret
 544+ E1CB 3E 27        .KeyPressed:            ld      a,39                            ; so c will be how many keys still to scan
 545+ E1CD 91                                   sub     c                               ; so a = 40 - c to get to result
 546+ E1CE C9                                   ret
 547+ E1CF
 548+ E1CF 21 00 E0     is_any_key_held:        ld      hl,Keys
 549+ E1D2 06 28                                ld      b,40
 550+ E1D4 0E 00                                ld      c,0
 551+ E1D6 7E           .KeyReadLoop:           ld      a,(hl)
 552+ E1D7 E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 553+ E1D9 C2 E3 E1                             jp      nz,.KeyPressed
 554+ E1DC 23                                   inc     hl
 555+ E1DD 0C                                   inc     c
 556+ E1DE 10 F6                                djnz    .KeyReadLoop
 557+ E1E0                                      SetAFalse
 557+ E1E0 3E FF       >                        ld      a,$FF
 558+ E1E2 C9                                   ret
 559+ E1E3 79           .KeyPressed:            ld      a,c
 560+ E1E4 C9                                   ret
 561+ E1E5
 562+ E1E5
 563+ E1E5 21 41 E0     WaitForNoKey:           ld      hl,KeyAddrTab                   ; de = table of IO ports to read
 564+ E1E8 06 08                                ld		b,8                             ; 8 ports to ready
 565+ E1EA 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 566+ E1EB DB FE                                in		a,($FE)							; read port to a
 567+ E1ED E6 1F                                and     %00011111
 568+ E1EF FE 1F                                cp      %00011111
 569+ E1F1 20 F2                                jr      nz ,WaitForNoKey
 570+ E1F3 23                                   inc		hl                              ; and ready for next read
 571+ E1F4 10 F4                                djnz    .PortReadLoop
 572+ E1F6 C9                                   ret
 573+ E1F7
 574+ E1F7 F5 D5 C5 E5  WaitForAnyKey:          push    af,,de,,bc,,hl
 575+ E1FB CD E5 E1                             call    WaitForNoKey
 576+ E1FE 21 41 E0     .waitKeyLoop:           ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 577+ E201 06 08                                ld		b,8                             ; 8 ports to ready
 578+ E203 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 579+ E204 DB FE                                in		a,($FE)							; read port to a
 580+ E206 E6 1F                                and     %00011111
 581+ E208 FE 1F                                cp      %00011111
 582+ E20A C2 14 E2                             jp      nz,.WaitComplete
 583+ E20D C0                                   ret     nz
 584+ E20E 23                                   inc		hl                              ; and ready for next read
 585+ E20F 10 F2                                djnz    .PortReadLoop
 586+ E211 C3 FE E1                             jp      .waitKeyLoop
 587+ E214 E1 C1 D1 F1  .WaitComplete:          pop     af,,de,,bc,,hl
 588+ E218 C9                                   ret
 589+ E219
 590+ E219
 591+ E219 00 00 00...  InputString             DS  30              ; used for a 30 character input buffer
 592+ E237 00                                   DB  0               ; end of string marker as a safety
 593+ E238 00           InputLength             DB  0               ; Current String length
 594+ E239 00           InputCursor             DB  0               ; Current Cursor Position
 595+ E23A 00           EnterPressed            DB  0               ; zero notpressed FF pressed
 596+ E23B 00           InputChanged            DB  0
 597+ E23C 00           InsertMode              DB  0
 598+ E23D              InputLimit              EQU 20
 599+ E23D
 600+ E23D 21 19 E2     keyboard_copy_input_to_de:  ld      hl,InputString
 601+ E240 3A 39 E2                                 ld      a,(InputCursor)
 602+ E243 FE 00                                    cp      0
 603+ E245 28 05                                    jr      z,.NoString
 604+ E247 4F                                       ld      c,a
 605+ E248 06 00                                    ld      b,0
 606+ E24A ED B0                                    ldir
 607+ E24C 3E 00        .NoString                   ld      a,0
 608+ E24E 12                                       ld      (de),a
 609+ E24F C9                                       ret
 610+ E250
 611+ E250               ;Input routine logic
 612+ E250               ;Intialise input state
 613+ E250
 614+ E250              ; Scans the key pressed to determine if its an alpha, returns ascii code or 0 if not alpha
 615+ E250              ; Input a = key pressed, returns with carry set if no alpha else carry is clear
 616+ E250              isKeyAlpha:             JumpIfALTNusng  "A",   .NotAlpha
 616+ E250 FE 41       >                        cp      "A"
 616+ E252 DA 5C E2    >                        jp		c, .NotAlpha
 617+ E255                                      JumpIfAGTENusng "Z"+1, .NotAlpha
 617+ E255 FE 5B       >                        cp     "Z"+1
 617+ E257 D2 5C E2    >                        jp		nc,.NotAlpha
 618+ E25A                                      ClearCarryFlag
 618+ E25A B7          >                        or a
 619+ E25B C9                                   ret
 620+ E25C              .NotAlpha               SetCarryFlag
 620+ E25C 37          >                        scf
 621+ E25D C9                                   ret
 622+ E25E
 623+ E25E 3A 39 E2     InsertKeystroke:        ld      a,(InputCursor)                         ; Current Cursor position
 624+ E261 FE 1E                                cp      30                                      ; protect from buffer overflow
 625+ E263 C8                                   ret     z                                       ; .
 626+ E264 21 19 E2                             ld      hl,InputString                          ; position hl to position in input string
 627+ E267 ED 31                                add     hl,a                                    ; .
 628+ E269 E5                                   push    hl                                      ; save current cursor position
 629+ E26A 47                                   ld      b,a                                     ; as a quick optimisation
 630+ E26B                                      JumpIfMemFalse InsertMode, .NoCopyNeeded        ; if we are in overtype mode skip copy
 630+ E26B 3A 3C E2    >                        ld      a,(InsertMode)
 630+ E26E A7          >                        and     a
 630+ E26F C2 8F E2    >                        jp      nz, .NoCopyNeeded
 631+ E272 3A 38 E2                             ld      a,(InputLength)                         ; no need to shuffle string
 632+ E275 B8                                   cp      b                                       ; if we are at the end already
 633+ E276 78                                   ld      a,b                                     ; .
 634+ E277 CA 8F E2                             jp      z,.NoCopyNeeded                         ; so we can behave like overtype mode
 635+ E27A 11 36 E2                             ld      de,InputString+29                       ; now from the end of the string
 636+ E27D 21 35 E2                             ld      hl,InputString+28                       ; .
 637+ E280 06 1D                                ld      b,29                                    ; for up to 29 characters
 638+ E282 4F                                   ld      c,a                                     ; back to the current cursor position
 639+ E283 C5           .CopyLoop:              push    bc                                      ; save current position
 640+ E284 7E                                   ld      a,(hl)                                  ; now suffle from left char to right char
 641+ E285 12                                   ld      (de),a                                  ; .
 642+ E286 2B                                   dec     hl                                      ; moving back one byte at a time
 643+ E287 1B                                   dec     de                                      ;
 644+ E288 05                                   dec     b                                       ; and reducing the current copy position
 645+ E289 79                                   ld      a,c                                     ; have we reached the input cursor pos
 646+ E28A B8                                   cp      b                                       ;
 647+ E28B C1                                   pop     bc
 648+ E28C C2 83 E2                             jp      nz,.CopyLoop
 649+ E28F E1           .NoCopyNeeded:          pop     hl
 650+ E290 3A 9B E2                             ld      a,(LastKeyPressed)
 651+ E293 77                                   ld      (hl),a
 652+ E294 21 38 E2                             ld      hl,InputLength
 653+ E297 34                                   inc     (hl)
 654+ E298 23                                   inc     hl                                      ;  to input cursor as a short cut to logic
 655+ E299 34                                   inc     (hl)
 656+ E29A C9                                   ret
 657+ E29B
 658+ E29B
 659+ E29B              ; We won't have any auto repeat on input
 660+ E29B 00           LastKeyPressed:         db 0
 661+ E29C
 662+ E29C              initInputText:          ZeroA
 662+ E29C AF          >                        xor a
 663+ E29D 32 39 E2                             ld      (InputCursor),a
 664+ E2A0 32 9B E2                             ld      (LastKeyPressed),a
 665+ E2A3 32 38 E2                             ld      (InputLength),a
 666+ E2A6                                      SetMemTrue  InsertMode
 666+ E2A6 AF          >                        xor     a
 666+ E2A7 32 3C E2    >                        ld      (InsertMode),a
 667+ E2AA                                      SetMemFalse EnterPressed
 667+ E2AA 3E FF       >                        ld      a,$FF
 667+ E2AC 32 3A E2    >                        ld      (EnterPressed),a
 668+ E2AF                                      SetMemFalse InputChanged
 668+ E2AF 3E FF       >                        ld      a,$FF
 668+ E2B1 32 3B E2    >                        ld      (InputChanged),a
 669+ E2B4 21 19 E2                             ld      hl,InputString
 670+ E2B7 06 1E                                ld      b,30
 671+ E2B9 77           .wipeloop:              ld      (hl),a
 672+ E2BA 23                                   inc     hl
 673+ E2BB 10 FC                                djnz    .wipeloop
 674+ E2BD C9                                   ret
 675+ E2BE
 676+ E2BE              ;;;InputNameV2:            call    is_any_key_pressed              ; scan for key states
 677+ E2BE              ;;;                        cp      $FF                             ; no key means we reset auto repeat
 678+ E2BE              ;;;                        jp      z,.NoKeyPressed                 ;
 679+ E2BE              ;;;.IsItLastKeyHeld:       ld      hl,LastKeyPressed               ; is it the same key as before
 680+ E2BE              ;;;                        cp      (hl)                            ;
 681+ E2BE              ;;;                        ret     z                               ; if so just ignore it to avoid auto repeat
 682+ E2BE              ;;;.SetNewAntiRepeat:      ld      (LastKeyPressed),a
 683+ E2BE              ;;;.CheckKeyPressed:       call    isKeyAlpha
 684+ E2BE              ;;;                        jp      nc,.AlphaKeyPressed
 685+ E2BE              ;;;.CheckSpaceKeyPressed:  cp      " "
 686+ E2BE              ;;;                        jp      z,.SpacePressed
 687+ E2BE              ;;;.CheckEnterPressed:     cp      ">"
 688+ E2BE              ;;;                        jp      z,.EnterPressed
 689+ E2BE              ;;;.CheckLeftPressed:      cp      "["
 690+ E2BE              ;;;                        jp      z,.LeftPressed
 691+ E2BE              ;;;.CheckRightPressed:     cp      "]"
 692+ E2BE              ;;;                        jp      z,.RightPressed
 693+ E2BE              ;;;.CheckDeletePressed:    cp      "#"
 694+ E2BE              ;;;                        jp      z,.DeletePressed
 695+ E2BE              ;;;.AnyOtherKeyIsIgnored:  ret
 696+ E2BE              ;;;.AlphaKeyPressed:       ld      a,(InputLength)
 697+ E2BE              ;;;                        JumpIfAGTENusng 30,.MaxInputReached
 698+ E2BE              ;;;.InsertKey:             call    InsertKeystroke
 699+ E2BE              ;;;                        ret
 700+ E2BE              ;;;.SpacePressed:          call    InsertKeystroke
 701+ E2BE              ;;;                        ret
 702+ E2BE              ;;;.EnterPressed:
 703+ E2BE              ;;;
 704+ E2BE              ;;;.LeftPressed:           ld      a,(InputCusor)
 705+ E2BE              ;;;                        JumpIfAIsZero, .MaxInputReached
 706+ E2BE              ;;;                        dec     a
 707+ E2BE              ;;;                        ld      (InputCursor),a
 708+ E2BE              ;;;                        ret
 709+ E2BE              ;;;.RightPressed:          ld      a,(InputLength)
 710+ E2BE              ;;;                        inc     a
 711+ E2BE              ;;;                        ld      b,a
 712+ E2BE              ;;;                        ld      a,(InputCursor)
 713+ E2BE              ;;;                        JumpIfMemGTENusng b, .MaxInputReached
 714+ E2BE              ;;;                        inc     a
 715+ E2BE              ;;;                        ld      (InputCursor),a
 716+ E2BE              ;;;                        ret
 717+ E2BE              ;;;.DeletaPressed:         ld      a,(InputCusor)
 718+ E2BE              ;;;                        ld      c,a
 719+ E2BE              ;;;                        JumpIfAisZero, .MaxInputReached
 720+ E2BE              ;;;                        ld      a,(InputLength)
 721+ E2BE              ;;;                        JumpIfAisZero, .MaxInputReached
 722+ E2BE              ;;;                        ld      de,InputString
 723+ E2BE              ;;;                        ld      hl,de
 724+ E2BE              ;;;                        inc     hl
 725+ E2BE              ;;;                        ld      a,(InputLength)                 ; copy backwards
 726+ E2BE              ;;;                        dec     c                               ; for string length - curretn cursor
 727+ E2BE              ;;;                        ld      c,a
 728+ E2BE              ;;;                        ld      b,0
 729+ E2BE              ;;;                        ldir
 730+ E2BE              ;;;                        ret
 731+ E2BE              ;;;GOTTOHERE
 732+ E2BE
 733+ E2BE
 734+ E2BE
 735+ E2BE C9           .MaxInputReached:       ret ; will add a beep later
 736+ E2BF
 737+ E2BF
 738+ E2BF
 739+ E2BF
 740+ E2BF              .NoKeyPressed:          ZeroA
 740+ E2BF AF          >                        xor a
 741+ E2C0 32 9B E2                             ld      (LastKeyPressed),a              ; Clear last key pressed
 742+ E2C3
 743+ E2C3
 744+ E2C3              InputName:              SetMemFalse InputChanged
 744+ E2C3 3E FF       >                        ld      a,$FF
 744+ E2C5 32 3B E2    >                        ld      (InputChanged),a
 745+ E2C8 CD BC E1                             call    is_any_key_pressed
 746+ E2CB FE FF                                cp      $FF
 747+ E2CD C8                                   ret     z
 748+ E2CE 4F           .KeyPressed:            ld      c,a
 749+ E2CF 3A 39 E2                             ld      a,(InputCursor)                 ; No key so we can now look at if we are at the end of the buffer
 750+ E2D2 FE 14                                cp      InputLimit                      ; move to variable later and then cp (hl)
 751+ E2D4 28 0B                                jr      z,.DeleteOrEnterOnly            ;
 752+ E2D6 21 BF E0                             ld      hl,ASCII_Map
 753+ E2D9 79                                   ld      a,c
 754+ E2DA ED 31                                add     hl,a
 755+ E2DC 7E                                   ld      a,(hl)
 756+ E2DD FE 41                                cp      "A"
 757+ E2DF 30 09                                jr      nc,.AlphaPressed
 758+ E2E1              ; CAPS and Symbol act as delete for now
 759+ E2E1 FE 23        .DeleteOrEnterOnly      cp      "#"                             ; if space was  pressed (mapped to Hash in ASCII table))
 760+ E2E3 28 31                                jr      z,.SpacePressed                 ; for now we will ignore the shift and just assume delete
 761+ E2E5 FE 3E                                cp      ">"         ; ENTER
 762+ E2E7 28 17                                jr      z,.EnterPressed
 763+ E2E9 C9                                   ret
 764+ E2EA 47           .AlphaPressed:          ld      b,a
 765+ E2EB 3A 39 E2                             ld      a,(InputCursor)
 766+ E2EE 4F                                   ld      c,a
 767+ E2EF 21 19 E2                             ld      hl,InputString
 768+ E2F2 ED 31                                add     hl,a
 769+ E2F4 78                                   ld      a,b
 770+ E2F5 70                                   ld      (hl),b
 771+ E2F6 79                                   ld      a,c
 772+ E2F7 21 39 E2                             ld      hl,InputCursor
 773+ E2FA 34                                   inc     (hl)
 774+ E2FB                                      SetMemTrue InputChanged
 774+ E2FB AF          >                        xor     a
 774+ E2FC 32 3B E2    >                        ld      (InputChanged),a
 775+ E2FF C9                                   ret
 776+ E300 3A 39 E2     .EnterPressed:          ld      a,(InputCursor)
 777+ E303 21 19 E2                             ld      hl,InputString
 778+ E306 ED 31                                add     hl,a
 779+ E308                                      ZeroA
 779+ E308 AF          >                        xor a
 780+ E309 77                                   ld      (hl),a
 781+ E30A                                      SetMemTrue EnterPressed
 781+ E30A AF          >                        xor     a
 781+ E30B 32 3A E2    >                        ld      (EnterPressed),a
 782+ E30E                                      SetMemTrue InputChanged
 782+ E30E AF          >                        xor     a
 782+ E30F 32 3B E2    >                        ld      (InputChanged),a
 783+ E312 CD F7 E0                             call    init_keyboard           ; Flush keyboard status so futher inputs don't auto read the enter key as a second press
 784+ E315 C9                                   ret
 785+ E316 3A 39 E2     .SpacePressed:          ld      a,(InputCursor)         ; Space = delete
 786+ E319 FE 00                                cp      0                       ; if input is zero length then can not delete
 787+ E31B C8                                   ret     z
 788+ E31C 3D                                   dec     a                       ; move back one and update cursor pos
 789+ E31D 32 39 E2                             ld      (InputCursor),a         ;
 790+ E320 21 19 E2                             ld      hl,InputString          ; now update end of line to null
 791+ E323 ED 31                                add     hl,a                    ; .
 792+ E325                                      ZeroA                           ; .
 792+ E325 AF          >                        xor a
 793+ E326 77                                   ld      (hl),a                  ; .
 794+ E327                                      SetMemTrue InputChanged
 794+ E327 AF          >                        xor     a
 794+ E328 32 3B E2    >                        ld      (InputChanged),a
 795+ E32B C9                                   ret
 796+ E32C
 797+ E32C              TargetMissileTest:      AnyMissilesLeft
 797+ E32C 3A 4B 7F    >                        ld      a,(NbrMissiles)
 797+ E32F A7          >                        and     a
 798+ E330                                      JumpIfZero      .ClearTargetting
 798+ E330 CA 47 E3    >                        jp	z,.ClearTargetting
 799+ E333                                      IsMissileLaunchFlagged                      ; if we are comitted to launch
 799+ E333 3A 22 81    >                        ld      a,(MissileTargettingFlag)
 799+ E336 E6 80       >                        and     $80
 800+ E338 C8                                   ret             z                           ; then don't scan as it will be cleared on launch
 801+ E339 3E 16        .ScanForKey:            ld              a,c_Pressed_TargetMissle    ; if not pressed we are done
 802+ E33B CD A2 E1                             call            is_key_pressed              ; .
 803+ E33E C0                                   ret             nz                          ; .
 804+ E33F 3A 22 81     .TargetPressed:         ld              a,(MissileTargettingFlag)   ; get flag back
 805+ E342                                      JumpIfAEqNusng  StageMissileNotTargeting, .SetTargetting
 805+ E342 FE FF       >                        cp     StageMissileNotTargeting
 805+ E344 CA 4D E3    >                        jp      z,.SetTargetting
 806+ E347              .ClearTargetting:       ClearMissileTargetting
 806+ E347 3E FF       >                        ld      a,StageMissileNotTargeting
 806+ E349 32 22 81    >                        ld      (MissileTargettingFlag),a
 807+ E34C C9                                   ret
 808+ E34D              .SetTargetting:         SetMissileTargetting
 808+ E34D 3E FE       >                        ld      a,StageMissileTargeting
 808+ E34F 32 22 81    >                        ld      (MissileTargettingFlag),a
 809+ E352 C9                                   ret
 810+ E353
 811+ E353 AF           MovementKeyTest:        xor     a
 812+ E354 32 8B 80                             ld      (CursorKeysPressed),a
 813+ E357 3A A9 7E                             ld      a,(MenuIdMax)
 814+ E35A E6 FC                                and     $FC
 815+ E35C 20 26                                jr      nz,CursorKeys
 816+ E35E 2A 57 E0     ClimbDiveKeys:          ld      hl,(addr_Pressed_Climb)                 ; Check for Climb
 817+ E361 7E                                   ld      a,(hl)
 818+ E362                                      JumpIfAIsZero ScanDiveKey
 818+ E362 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 818+ E363 CA 71 E3    >                        jp	    z, ScanDiveKey
 819+ E366 3A 8B 80                             ld      a,(CursorKeysPressed)
 820+ E369 F6 80                                or      CursorClimb
 821+ E36B 32 8B 80                             ld      (CursorKeysPressed),a
 822+ E36E C3 A7 E3                             jp      ScanLeftKey
 823+ E371 2A 55 E0     ScanDiveKey:            ld      hl,(addr_Pressed_Dive)                  ; Check for Dive
 824+ E374 7E                                   ld      a,(hl)
 825+ E375                                      JumpIfAIsZero ScanLeftKey
 825+ E375 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 825+ E376 CA A7 E3    >                        jp	    z, ScanLeftKey
 826+ E379 3A 8B 80                             ld      a,(CursorKeysPressed)
 827+ E37C F6 40                                or      CursorDive
 828+ E37E 32 8B 80                             ld      (CursorKeysPressed),a
 829+ E381 C3 A7 E3                             jp      ScanLeftKey
 830+ E384 2A 93 E0     CursorKeys:             ld      hl,(addr_Pressed_CursorUp)              ; Check cursor keys
 831+ E387 7E                                   ld      a,(hl)
 832+ E388                                      JumpIfAIsZero ScanCursorDownKey
 832+ E388 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 832+ E389 CA 97 E3    >                        jp	    z, ScanCursorDownKey
 833+ E38C 3A 8B 80                             ld      a,(CursorKeysPressed)
 834+ E38F F6 80                                or      CursorClimb
 835+ E391 32 8B 80                             ld      (CursorKeysPressed),a
 836+ E394 C3 A7 E3                             jp      ScanLeftKey
 837+ E397 2A 95 E0     ScanCursorDownKey:      ld      hl,(addr_Pressed_CursorDown)
 838+ E39A 7E                                   ld      a,(hl)
 839+ E39B                                      JumpIfAIsZero ScanLeftKey
 839+ E39B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 839+ E39C CA A7 E3    >                        jp	    z, ScanLeftKey
 840+ E39F 3A 8B 80                             ld      a,(CursorKeysPressed)
 841+ E3A2 F6 40                                or      CursorDive
 842+ E3A4 32 8B 80                             ld      (CursorKeysPressed),a
 843+ E3A7 2A 51 E0     ScanLeftKey:            ld      hl,(addr_Pressed_RollLeft)
 844+ E3AA 7E                                   ld      a,(hl)
 845+ E3AB                                      JumpIfAIsZero ScanRightKey
 845+ E3AB A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 845+ E3AC CA B8 E3    >                        jp	    z, ScanRightKey
 846+ E3AF 3A 8B 80                             ld      a,(CursorKeysPressed)
 847+ E3B2 F6 20                                or      CursorLeft
 848+ E3B4 32 8B 80                             ld      (CursorKeysPressed),a
 849+ E3B7 C9                                   ret
 850+ E3B8 2A 53 E0     ScanRightKey:           ld      hl,(addr_Pressed_RollRight)
 851+ E3BB 7E                                   ld      a,(hl)
 852+ E3BC                                      JumpIfAIsZero ScanHomeKey
 852+ E3BC A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 852+ E3BD CA C9 E3    >                        jp	    z, ScanHomeKey
 853+ E3C0 3A 8B 80                             ld      a,(CursorKeysPressed)
 854+ E3C3 F6 10                                or      CursorRight
 855+ E3C5 32 8B 80                             ld      (CursorKeysPressed),a
 856+ E3C8 C9                                   ret
 857+ E3C9 2A 71 E0     ScanHomeKey:            ld      hl,(addr_Pressed_HomeCursor)
 858+ E3CC 7E                                   ld      a,(hl)
 859+ E3CD                                      JumpIfAIsZero ScanRecentreKey
 859+ E3CD A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 859+ E3CE CA DA E3    >                        jp	    z, ScanRecentreKey
 860+ E3D1 3A 8B 80                             ld      a,(CursorKeysPressed)
 861+ E3D4 F6 08                                or      CursorHome
 862+ E3D6 32 8B 80                             ld      (CursorKeysPressed),a
 863+ E3D9 C9                                   ret
 864+ E3DA 2A 8D E0     ScanRecentreKey:        ld      hl,(addr_Pressed_Recentre)
 865+ E3DD 7E                                   ld      a,(hl)
 866+ E3DE                                      ReturnIfAIsZero
 866+ E3DE A7          >                        and     a
 866+ E3DF C8          >                        ret     z
 867+ E3E0 3A 8B 80                             ld      a,(CursorKeysPressed)
 868+ E3E3 F6 04                                or      CursorRecenter
 869+ E3E5 32 8B 80                             ld      (CursorKeysPressed),a
 870+ E3E8 C9                                   ret
 871+ E3E9
 872+ E3E9
# file closed: ./Hardware/keyboard.asm
1662  E3E9                                  DISPLAY "Keyboard ",BankKeyboard," - Bytes free ",/D, $2000 - ($-KeyboardAddr), " - BankKeyboard"
1663  E3E9                                  ASSERT $-KeyboardAddr <8912, Bank code leaks over 8K boundary
1664  E3E9              ; Bank 101  -----------------------------------------------------------------------------------------------------------------------
1665  E3E9                                  SLOT    SoundAddr
1666  E3E9                                  PAGE    BankSound
1667  E3E9                                  ORG SoundAddr, BankSound
1668  E000                                  INCLUDE "./Hardware/sound.asm"
# file opened: ./Hardware/sound.asm
   1+ E000
   2+ E000              ;-------------------------------------------------------------------------------------------------
   3+ E000              ;--- Equates for sounds
   4+ E000              ;       DEFINE          USETIMER 1
   5+ E000                     DEFINE          DANUBEATTACK 1
   6+ E000                                      IFDEF   USETIMER
   7+ E000 ~            SOUNDSTEPLENGTH             EQU     25
   8+ E000                                      ENDIF
   9+ E000
  10+ E000
  11+ E000              WriteTurboControlA:     MACRO
  12+ E000 ~                                    ld      bc,TURBO_SOUND_NEXT_CONTROL
  13+ E000 ~                                    out     (c),a
  14+ E000                                      ENDM
  15+ E000
  16+ E000              WriteTurboRegisterA:    MACRO   value
  17+ E000 ~                                    WriteTurboControlA
  18+ E000 ~                                    ld      b,$BF
  19+ E000 ~                                    ld      a,value
  20+ E000 ~                                    out     (c),a
  21+ E000                                      ENDM
  22+ E000
  23+ E000              WriteTurboRegister:     MACRO   register,value
  24+ E000 ~                                    ld      a,register
  25+ E000 ~                                    WriteTurboControlA
  26+ E000 ~                                    ld      b,$BF
  27+ E000 ~                                    ld      a,value
  28+ E000 ~                                    out     (c),a
  29+ E000                                      ENDM
  30+ E000
  31+ E000              WriteAToTurboRegister:  MACRO   register
  32+ E000 ~                                    ex      af,af'
  33+ E000 ~                                    ld      a,register
  34+ E000 ~                                    WriteTurboControlA
  35+ E000 ~                                    ld      b, $BF
  36+ E000 ~                                    ex      af,af'
  37+ E000 ~                                    out     (c),a
  38+ E000                                      ENDM
  39+ E000
  40+ E000              SelectAY:               MACRO   chipNbr
  41+ E000 ~                                    ld      a,TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT | chipNbr
  42+ E000 ~                                    WriteTurboControlA
  43+ E000                                      ENDM
  44+ E000
  45+ E000              ;--- Interrupt handler, moved from main code
  46+ E000 3A 96 7E     SoundInterruptHandler:  ld      a,(DELTA)
  47+ E003 21 06 B1                             ld      hl,LAST_DELTA
  48+ E006 BE                                   cp      (hl)
  49+ E007 C4 37 E2     .SpeedChange:           call    nz, UpdateEngineSound
  50+ E00A 3A 99 7E     .NoSpeedChange:         ld      a,(SoundFxToEnqueue)        ; Check for new sound
  51+ E00D FE FF                                cp      $FF
  52+ E00F C4 4C E1                             call    nz,EnqueSound
  53+ E012              .NoNewSound:            IFDEF   USETIMER
  54+ E012 ~                                        ld      hl,SoundChannelTimer
  55+ E012                                      ENDIF
  56+ E012 11 D2 E2                             ld      de,SoundChannelSeq
  57+ E015 06 08                                ld      b,8
  58+ E017 1A           .ResetLoop:             ld      a,(de)                  ; we only update active channels
  59+ E018 FE FF                                cp      $FF
  60+ E01A 28 0A                                jr      z,.NextCounter
  61+ E01C                                      IFDEF   USETIMER
  62+ E01C ~                                        dec     (hl)                    ; so update channel timer
  63+ E01C ~                                        jr      nz,.NextCounter         ; if its not zero then continue
  64+ E01C                                      ENDIF
  65+ E01C 3E 08                                ld      a,8                     ; a now = channel to play
  66+ E01E 90                                   sub     a,b
  67+ E01F                                      IFDEF   USETIMER
  68+ E01F ~                                        push    bc,,de,,hl              ; save state
  69+ E01F                                      ELSE
  70+ E01F C5 D5                                    push    bc,,de
  71+ E021                                      ENDIF
  72+ E021 CD A7 E1                             call    PlaySound               ; play sound
  73+ E024                                      IFDEF   USETIMER
  74+ E024 ~                                        pop     bc,,de,,hl              ; restore state so de = correct timer & hl = correct channel, b = coutner
  75+ E024                                      ELSE
  76+ E024 D1 C1                                    pop     bc,,de              ; restore state so de = correct timer & hl = correct channel, b = coutner
  77+ E026                                      ENDIF
  78+ E026              ; If it went negative new sound update
  79+ E026                                      IFDEF   USETIMER
  80+ E026 ~            .ResetTimer:                ld      a,SOUNDSTEPLENGTH       ; as we fallin to this it will auto update counter
  81+ E026 ~                                        ld      (hl),a                  ; so may take it out of playsound routine
  82+ E026                                      ENDIF
  83+ E026              .NextCounter:
  84+ E026                                      IFDEF   USETIMER
  85+ E026 ~                                        inc     hl
  86+ E026                                      ENDIF
  87+ E026 13                                   inc     de
  88+ E027 10 EE                                djnz    .ResetLoop
  89+ E029 C9                                   ret
  90+ E02A
  91+ E02A
  92+ E02A              ; On entering here a = AY chip to select
  93+ E02A 21 BF FF     DefaultAYChip:          ld      hl,$FFBF            ; h = turbo control, l = turbo register
  94+ E02D 0E FD                                ld      c,$FD               ; bc = h$FD or l$FD
  95+ E02F 11 0E 00                             ld      de,$000E            ; d = value 0, e = counter
  96+ E032 F6 FC                                or      TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT
  97+ E034 44                                   ld      b,h                 ; now select chip and set to stereo
  98+ E035 ED 79                                out     (c),a               ; .
  99+ E037 1D           .DefaultLoop:           dec     e                   ; loop down we set E 1 higher
 100+ E038 CA 44 E0                             jp      z,.Complete         ; On zero we complete, we
 101+ E03B 44                                   ld      b,h                 ; Set register to 0
 102+ E03C ED 59                                out     (c),e               ; .
 103+ E03E 45                                   ld      b,l                 ; .
 104+ E03F ED 51                                out     (c),d               ; .
 105+ E041 C3 37 E0     .DefaultDone:           jp      .DefaultLoop        ; and loop
 106+ E044 44           .Complete:              ld      b,h                 ; we set fine tone to 0
 107+ E045 ED 59                                out     (c),e               ; though as volume is 0
 108+ E047 45                                   ld      b,l                 ; it doesn't really
 109+ E048 ED 51                                out     (c),d               ; matter
 110+ E04A C9                                   ret
 111+ E04B
 112+ E04B              ;-- Initialise Audio channels to AY1 noise, AY2 and 3 tone, all channels to volume 0
 113+ E04B
 114+ E04B              ; For each AY channel, set everything to zero, then set up envelope and tone channels.
 115+ E04B              ; for now we are blocking noise channels whilst debugging
 116+ E04B 3E 01        InitAudio:              ld      a, TURBO_CHIP_AY1
 117+ E04D CD 2A E0                             call    DefaultAYChip
 118+ E050                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 118+ E050 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 118+ E052             >                        WriteTurboControlA
 118+ E052 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 118+ E055 ED 79       >                        out     (c),a
 118+ E057 06 BF       >                        ld      b,$BF
 118+ E059 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 118+ E05B ED 79       >                        out     (c),a
 119+ E05D                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 119+ E05D 3E 07       >                        ld      a,TONE_ENABLE
 119+ E05F             >                        WriteTurboControlA
 119+ E05F 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 119+ E062 ED 79       >                        out     (c),a
 119+ E064 06 BF       >                        ld      b,$BF
 119+ E066 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 119+ E068 ED 79       >                        out     (c),a
 120+ E06A 3E 02                                ld      a, TURBO_CHIP_AY2
 121+ E06C CD 2A E0                             call    DefaultAYChip
 122+ E06F                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 122+ E06F 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 122+ E071             >                        WriteTurboControlA
 122+ E071 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 122+ E074 ED 79       >                        out     (c),a
 122+ E076 06 BF       >                        ld      b,$BF
 122+ E078 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 122+ E07A ED 79       >                        out     (c),a
 123+ E07C                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 123+ E07C 3E 07       >                        ld      a,TONE_ENABLE
 123+ E07E             >                        WriteTurboControlA
 123+ E07E 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 123+ E081 ED 79       >                        out     (c),a
 123+ E083 06 BF       >                        ld      b,$BF
 123+ E085 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 123+ E087 ED 79       >                        out     (c),a
 124+ E089 3E 03                                ld      a, TURBO_CHIP_AY3
 125+ E08B CD 2A E0                             call    DefaultAYChip
 126+ E08E                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 126+ E08E 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 126+ E090             >                        WriteTurboControlA
 126+ E090 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 126+ E093 ED 79       >                        out     (c),a
 126+ E095 06 BF       >                        ld      b,$BF
 126+ E097 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 126+ E099 ED 79       >                        out     (c),a
 127+ E09B                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 127+ E09B 3E 07       >                        ld      a,TONE_ENABLE
 127+ E09D             >                        WriteTurboControlA
 127+ E09D 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 127+ E0A0 ED 79       >                        out     (c),a
 127+ E0A2 06 BF       >                        ld      b,$BF
 127+ E0A4 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 127+ E0A6 ED 79       >                        out     (c),a
 128+ E0A8 21 D2 E2                             ld      hl,SoundChannelSeq      ; now set up all the channel data to $FF
 129+ E0AB 21 D2 E2                             ld      hl,SoundChannelSeq      ; now set up all the channel data to $FF
 130+ E0AE 3E FF                                ld      a,$FF                   ; which means that it
 131+ E0B0 06 08                                ld      b,8                     ; has no data to play
 132+ E0B2 77           .InitLoop:              ld      (hl),a
 133+ E0B3 23                                   inc     hl
 134+ E0B4 10 FC                                djnz    .InitLoop
 135+ E0B6 C9                                   ret
 136+ E0B7
 137+ E0B7              ;Enable with no noise chanels active
 138+ E0B7 3E 01        InitAudioMusic:         ld      a, TURBO_CHIP_AY1
 139+ E0B9 CD 2A E0                             call    DefaultAYChip
 140+ E0BC                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 140+ E0BC 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 140+ E0BE             >                        WriteTurboControlA
 140+ E0BE 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 140+ E0C1 ED 79       >                        out     (c),a
 140+ E0C3 06 BF       >                        ld      b,$BF
 140+ E0C5 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 140+ E0C7 ED 79       >                        out     (c),a
 141+ E0C9                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 141+ E0C9 3E 07       >                        ld      a,TONE_ENABLE
 141+ E0CB             >                        WriteTurboControlA
 141+ E0CB 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 141+ E0CE ED 79       >                        out     (c),a
 141+ E0D0 06 BF       >                        ld      b,$BF
 141+ E0D2 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 141+ E0D4 ED 79       >                        out     (c),a
 142+ E0D6 3E 02                                ld      a, TURBO_CHIP_AY2
 143+ E0D8 CD 2A E0                             call    DefaultAYChip
 144+ E0DB                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 144+ E0DB 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 144+ E0DD             >                        WriteTurboControlA
 144+ E0DD 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 144+ E0E0 ED 79       >                        out     (c),a
 144+ E0E2 06 BF       >                        ld      b,$BF
 144+ E0E4 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 144+ E0E6 ED 79       >                        out     (c),a
 145+ E0E8                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 145+ E0E8 3E 07       >                        ld      a,TONE_ENABLE
 145+ E0EA             >                        WriteTurboControlA
 145+ E0EA 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 145+ E0ED ED 79       >                        out     (c),a
 145+ E0EF 06 BF       >                        ld      b,$BF
 145+ E0F1 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 145+ E0F3 ED 79       >                        out     (c),a
 146+ E0F5 3E 03                                ld      a, TURBO_CHIP_AY3
 147+ E0F7 CD 2A E0                             call    DefaultAYChip
 148+ E0FA                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 148+ E0FA 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 148+ E0FC             >                        WriteTurboControlA
 148+ E0FC 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 148+ E0FF ED 79       >                        out     (c),a
 148+ E101 06 BF       >                        ld      b,$BF
 148+ E103 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 148+ E105 ED 79       >                        out     (c),a
 149+ E107                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 149+ E107 3E 07       >                        ld      a,TONE_ENABLE
 149+ E109             >                        WriteTurboControlA
 149+ E109 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 149+ E10C ED 79       >                        out     (c),a
 149+ E10E 06 BF       >                        ld      b,$BF
 149+ E110 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 149+ E112 ED 79       >                        out     (c),a
 150+ E114 C9                                   ret
 151+ E115
 152+ E115              GetSoundAAddressToHL:   MACRO
 153+ E115 ~                                    ld      hl,SFXPointerList
 154+ E115 ~                                    add     a,a
 155+ E115 ~                                    add     hl,a
 156+ E115 ~                                    ld      a,(hl)
 157+ E115 ~                                    inc     hl
 158+ E115 ~                                    ld      h,(hl)
 159+ E115 ~                                    ld      l,a
 160+ E115                                      ENDM
 161+ E115
 162+ E115              SetIXToChannelA:        MACRO
 163+ E115 ~                                    ld      hl,SoundChannelSeq
 164+ E115 ~                                    add     hl,a
 165+ E115 ~                                    ld      ix,hl
 166+ E115                                      ENDM
 167+ E115
 168+ E115              SelectChannelMapping:   MACRO
 169+ E115 ~                                    ld      hl,SoundChipMapNumber
 170+ E115 ~                                    add     hl,a
 171+ E115 ~                                    ld      a,(hl)
 172+ E115                                      ENDM
 173+ E115
 174+ E115              ; This version ignores nooise and envelope setup so its always 0 atack hold and
 175+ E115              ; noise is pre-configured in channel
 176+ E115              ; The channel always holds a pointer to the next block of data to play
 177+ E115 DD 7E 18     PlayChannelD:           ld      a,(ix+SoundDataPointerOffset)    ; set hl to current data block
 178+ E118 6F                                   ld      l,a                              ; for SFX step
 179+ E119 DD 7E 19                             ld      a,(ix+SoundDataPointerOffset1)   ;
 180+ E11C 67                                   ld      h,a                              ;
 181+ E11D 7E                                   ld      a,(hl)                           ; get fine
 182+ E11E                                      WriteAToTurboRegister d
 182+ E11E 08          >                        ex      af,af'
 182+ E11F 7A          >                        ld      a,d
 182+ E120             >                        WriteTurboControlA
 182+ E120 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 182+ E123 ED 79       >                        out     (c),a
 182+ E125 06 BF       >                        ld      b, $BF
 182+ E127 08          >                        ex      af,af'
 182+ E128 ED 79       >                        out     (c),a
 183+ E12A 14                                   inc     d                                ; Move to channel coarse
 184+ E12B 23                                   inc     hl
 185+ E12C 7E                                   ld      a,(hl)
 186+ E12D                                      WriteAToTurboRegister d
 186+ E12D 08          >                        ex      af,af'
 186+ E12E 7A          >                        ld      a,d
 186+ E12F             >                        WriteTurboControlA
 186+ E12F 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 186+ E132 ED 79       >                        out     (c),a
 186+ E134 06 BF       >                        ld      b, $BF
 186+ E136 08          >                        ex      af,af'
 186+ E137 ED 79       >                        out     (c),a
 187+ E139 7A                                   ld      a,d
 188+ E13A C6 07                                add     a,7
 189+ E13C 57                                   ld      d,a
 190+ E13D 23                                   inc     hl                               ; Get Volume
 191+ E13E 7E                                   ld      a,(hl)
 192+ E13F                                      WriteAToTurboRegister d
 192+ E13F 08          >                        ex      af,af'
 192+ E140 7A          >                        ld      a,d
 192+ E141             >                        WriteTurboControlA
 192+ E141 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 192+ E144 ED 79       >                        out     (c),a
 192+ E146 06 BF       >                        ld      b, $BF
 192+ E148 08          >                        ex      af,af'
 192+ E149 ED 79       >                        out     (c),a
 193+ E14B C9                                   ret
 194+ E14C
 195+ E14C              ;--- Take the current sound to play, Put it in a noise or tone channel (if bit 1 is clear is a tone only)
 196+ E14C 3A 99 7E     EnqueSound:             ld      a,(SoundFxToEnqueue)                ; Get Sound FX to Enque
 197+ E14F                                      JumpIfAGTENusng SFXEndOfList, .InvalidSound ; Invalid sounds get discarded quickly
 197+ E14F FE 01       >                        cp     SFXEndOfList
 197+ E151 D2 A1 E1    >                        jp		nc,.InvalidSound
 198+ E154 5F           .GetSoundData:          ld      e,a                                 ; save SoundFxToEnqeue
 199+ E155 E6 01                                and     $01                                 ; even numbers are tone only (Including 0)
 200+ E157 20 12                                jr      nz,.FindFreeNoiseChannel
 201+ E159 21 D4 E2     .FindFreeToneChannel:   ld      hl,SoundChannelSeq + 2              ; so we start at the first tone channel
 202+ E15C 16 FF                                ld      d,$FF                               ; d = marker for free slot cp d will be faster in the loop
 203+ E15E 0E 02                                ld      c,2                                 ; c= current slot
 204+ E160 06 07                                ld      b,7                                 ; b = nbr of slots
 205+ E162 7E           .ToneScanLoop:          ld      a,(hl)                              ; is channel occupied
 206+ E163 BA                                   cp      d
 207+ E164 28 16                                jr      z,.SaveSoundId                      ; if its free then move forward
 208+ E166 0C                                   inc     c                                   ; c is hunting for a free channel
 209+ E167 23                                   inc     hl                                  ; move tonext address in channel list
 210+ E168 10 F8                                djnz    .ToneScanLoop
 211+ E16A C9           .NoFreeSlot:            ret                                         ; no free slot, leave sound enqued
 212+ E16B 21 D2 E2     .FindFreeNoiseChannel:  ld      hl,SoundChannelSeq                  ; We only have 2 noise channels so no need to
 213+ E16E 0E 00                                ld      c,0                                 ; do a complex loop
 214+ E170 7E                                   ld      a,(hl)
 215+ E171 16 FF                                ld      d,$FF                               ; d = marker for free slot
 216+ E173 BA                                   cp      d
 217+ E174 28 06                                jr      z,.SaveSoundId
 218+ E176 23                                   inc     hl
 219+ E177 7E                                   ld      a,(hl)
 220+ E178 BA                                   cp      d
 221+ E179 C0           .NoNoiseSlot:           ret     nz                                  ; no free slot, leave sound enqued
 222+ E17A 0E 01        .NoiseChannel2:         ld      c,1                                 ; So we have channel 1 free
 223+ E17C 7B           .SaveSoundId:           ld      a,e                                 ; get back sound id
 224+ E17D                                      GetSoundAAddressToHL                        ; hl = pointer to sfx data
 224+ E17D 21 10 E3    >                        ld      hl,SFXPointerList
 224+ E180 87          >                        add     a,a
 224+ E181 ED 31       >                        add     hl,a
 224+ E183 7E          >                        ld      a,(hl)
 224+ E184 23          >                        inc     hl
 224+ E185 66          >                        ld      h,(hl)
 224+ E186 6F          >                        ld      l,a
 225+ E187 EB                                   ex      de,hl                               ; save pointer to data also makes loading to (ix) easier
 226+ E188 21 D2 E2     .SetIXToChannelPointer: ld      hl,SoundChannelSeq                  ; Get the sequence for the
 227+ E18B 79                                   ld      a,c                                 ; respective channel
 228+ E18C ED 31                                add     hl,a                                ; that we are looking at
 229+ E18E E5 DD E1                             ld      ix,hl                               ; now we can use indexed access
 230+ E191 EB           .GetSFXDataBack:        ex      de,hl                               ; hl = sound fx again
 231+ E192              .LoadSeqCount           ZeroA
 231+ E192 AF          >                        xor a
 232+ E193 DD 77 00                             ld      (ix+0),a                            ; set SoundChannelSeq[channel] to 0 as its starting
 233+ E196 7E                                   ld      a,(hl)                              ; get the nbr of steps
 234+ E197 DD 77 08                             ld      (ix+SoundLastSeqOffset),a           ; load SoundChannelLastSeq[channel]
 235+ E19A                                      IFDEF   USETIMER
 236+ E19A ~                                        ld      a,1                             ; for now we have separate timers, we enque with 1 so the loops starts immediatly
 237+ E19A ~                                        ld      (ix+SoundTimerOffset),a         a; load SoundChannelTimer[channel] with duration
 238+ E19A                                      ENDIF
 239+ E19A 23                                   inc     hl                                  ; move hl to first byte of data block
 240+ E19B DD 75 18                             ld      (ix+SoundDataPointerOffset),l       ; load SoundDataPointer[channel] with current data set
 241+ E19E DD 74 19                             ld      (ix+SoundDataPointerOffset1),h
 242+ E1A1 3E FF        .InvalidSound:          ld      a,$FF
 243+ E1A3 32 99 7E                             ld      (SoundFxToEnqueue),a                ; ClearFXEnqeue
 244+ E1A6 C9                                   ret
 245+ E1A7
 246+ E1A7 5F           PlaySound:              ld      e,a                                 ; save channel number
 247+ E1A8                                      SetIXToChannelA                             ; We trap for debugging
 247+ E1A8 21 D2 E2    >                        ld      hl,SoundChannelSeq
 247+ E1AB ED 31       >                        add     hl,a
 247+ E1AD E5 DD E1    >                        ld      ix,hl
 248+ E1B0 DD 7E 00     .GetCurrentSeq:         ld      a,(ix+0)                            ; for optimisation we
 249+ E1B3 FE FF                                cp      $FF                                 ; will never call this if its $FF
 250+ E1B5 C8                                   ret     z                                   ; its just a belt n braces
 251+ E1B6              ;--- Play Next Step, we select chip, select channel, set up tone then step, timer & pointer
 252+ E1B6 DD 7E 28     .SelectChip             ld      a,(ix+SoundChipMapOffset)           ; get the mapping. bits 1 and 0 hold
 253+ E1B9 57                                   ld      d,a                                 ; .
 254+ E1BA F6 FC                                or      %11111100                           ; .
 255+ E1BC                                      WriteTurboControlA                          ; .
 255+ E1BC 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 255+ E1BF ED 79       >                        out     (c),a
 256+ E1C1 DD 7E 08     .CheckLastSeq:          ld      a,(ix+SoundLastSeqOffset)           ; get last in sequence
 257+ E1C4                                      JumpIfALTNusng  (ix+0),.CompletedSFX        ; if we have gone beyond last then done
 257+ E1C4 DD BE 00    >                        cp      (ix+0)
 257+ E1C7 DA E9 E1    >                        jp		c, .CompletedSFX
 258+ E1CA 7A           .PlayStep:              ld      a,d                                 ; Get the channel number
 259+ E1CB E6 30                                and     %00110000
 260+ E1CD ED 23                                swapnib                                     ; get channel to lower bits
 261+ E1CF 57                                   ld      d,a
 262+ E1D0 CD 15 E1                             call    PlayChannelD                        ; play channel D step ix is pointer to correct soundchannelseq
 263+ E1D3 DD 34 00     .UpdateStep:            inc     (ix+0)                              ; next stepssss
 264+ E1D6                                      IFDEF   USETIMER
 265+ E1D6 ~            .UpdateTimer:               ld      a,SOUNDSTEPLENGTH
 266+ E1D6 ~                                        ld      (ix+SoundTimerOffset),a
 267+ E1D6                                      ENDIF
 268+ E1D6 DD 5E 18     .UpdateStepPointer:     ld      e,(ix+SoundDataPointerOffset)       ; move pointer on by 7 bytes
 269+ E1D9 DD 56 19                             ld      d,(ix+SoundDataPointerOffset+1)     ;
 270+ E1DC EB                                   ex      de,hl                               ; hl = current pointer
 271+ E1DD 3E 03                                ld      a,SFXBlockLength                    ; move to next block
 272+ E1DF ED 31                                add     hl,a                                ; .
 273+ E1E1 EB                                   ex      de,hl                               ; move to de for load back
 274+ E1E2 DD 73 18                             ld      (ix+SoundDataPointerOffset),e       ;
 275+ E1E5 DD 72 19                             ld      (ix+SoundDataPointerOffset+1),d     ;
 276+ E1E8 C9                                   ret
 277+ E1E9 DD 7E 28     .CompletedSFX:          ld      a,(ix+SoundChipMapOffset)           ; channel number is in upper bits
 278+ E1EC ED 23                                swapnib                                     ; so we need it in
 279+ E1EE E6 03                                and     %00000011                           ; lower for selecting volume register
 280+ E1F0 C6 08                                add     a,CHANNEL_A_AMPLITUDE               ; select the register
 281+ E1F2                                      WriteTurboRegisterA 0                       ; set volume to 0
 281+ E1F2             >                        WriteTurboControlA
 281+ E1F2 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 281+ E1F5 ED 79       >                        out     (c),a
 281+ E1F7 06 BF       >                        ld      b,$BF
 281+ E1F9 3E 00       >                        ld      a,0
 281+ E1FB ED 79       >                        out     (c),a
 282+ E1FD                                      WriteTurboRegister ENVELOPE_PERIOD_FINE,0
 282+ E1FD 3E 0B       >                        ld      a,ENVELOPE_PERIOD_FINE
 282+ E1FF             >                        WriteTurboControlA
 282+ E1FF 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 282+ E202 ED 79       >                        out     (c),a
 282+ E204 06 BF       >                        ld      b,$BF
 282+ E206 3E 00       >                        ld      a,0
 282+ E208 ED 79       >                        out     (c),a
 283+ E20A                                      WriteTurboRegister ENVELOPE_PERIOD_COARSE,0
 283+ E20A 3E 0C       >                        ld      a,ENVELOPE_PERIOD_COARSE
 283+ E20C             >                        WriteTurboControlA
 283+ E20C 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 283+ E20F ED 79       >                        out     (c),a
 283+ E211 06 BF       >                        ld      b,$BF
 283+ E213 3E 00       >                        ld      a,0
 283+ E215 ED 79       >                        out     (c),a
 284+ E217                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 284+ E217 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 284+ E219             >                        WriteTurboControlA
 284+ E219 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 284+ E21C ED 79       >                        out     (c),a
 284+ E21E 06 BF       >                        ld      b,$BF
 284+ E220 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 284+ E222 ED 79       >                        out     (c),a
 285+ E224                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 285+ E224 3E 07       >                        ld      a,TONE_ENABLE
 285+ E226             >                        WriteTurboControlA
 285+ E226 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 285+ E229 ED 79       >                        out     (c),a
 285+ E22B 06 BF       >                        ld      b,$BF
 285+ E22D 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 285+ E22F ED 79       >                        out     (c),a
 286+ E231 3E FF                                ld      a,$FF                               ; set sequence to FF to denote
 287+ E233 DD 77 00                             ld      (ix+0),a                            ; channel is now free
 288+ E236 C9                                   ret
 289+ E237
 290+ E237              ; Engine Sound is always a priority so gets a dedicated channel
 291+ E237              ; this is only called if delta has changed
 292+ E237              UpdateEngineSound:      SelectAY TURBO_CHIP_AY1
 292+ E237 3E FD       >                        ld      a,TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT | TURBO_CHIP_AY1
 292+ E239             >                        WriteTurboControlA
 292+ E239 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 292+ E23C ED 79       >                        out     (c),a
 293+ E23E 3A 96 7E     .SetUpTone:             ld      a,(DELTA)
 294+ E241 A7                                   and     a
 295+ E242 CA 7D E2                             jp      z,.EngineOff    ; if speed is 0 the engine off as a = 0
 296+ E245 21 F3 08                             ld      hl,$08F3        ; base tone - delta * 15
 297+ E248 57                                   ld      d,a             ; we subtract as the tone is the
 298+ E249 1E 0F                                ld      e,15            ; time between pulses
 299+ E24B B7 ED 52                             sub     hl,de
 300+ E24E 3E 00                                ld      a,CHANNEL_A_FINE
 301+ E250 01 FD FF                             ld      bc,$FFFD
 302+ E253 ED 79                                out     (c),a
 303+ E255 06 BF                                ld      b,$BF
 304+ E257 ED 61                                out     (c),h
 305+ E259 3C                                   inc     a
 306+ E25A 06 FF                                ld      b,$FF
 307+ E25C ED 79                                out     (c),a
 308+ E25E 06 BF                                ld      b,$BF
 309+ E260 ED 69                                out     (c),l
 310+ E262 3A 96 7E     .SetUpNoise:            ld      a,(DELTA)       ; l = DELTA / 4
 311+ E265 CB 3F                                srl     a
 312+ E267 57                                   ld      d,a             ;
 313+ E268 CB 3F                                srl     a
 314+ E26A CB 3F                                srl     a               ; a = DELTA / 8
 315+ E26C C6 1F                                add     a, $1F          ; more noise higher the speed
 316+ E26E 06 FF                                ld      b,$FF
 317+ E270 1E 06                                ld      e,NOISE_PERIOD
 318+ E272 ED 59                                out     (c),e
 319+ E274 06 BF                                ld      b,$BF
 320+ E276 ED 79                                out     (c),a
 321+ E278 7A                                   ld      a,d             ; get back delta / 4
 322+ E279 C6 05                                add     a,5
 323+ E27B CB 3F                                srl     a               ; calculate a scaled from 2 to 7
 324+ E27D 1E 08        .EngineOff:             ld      e,CHANNEL_A_AMPLITUDE
 325+ E27F 06 FF                                ld      b,$FF
 326+ E281 ED 59                                out     (c),e
 327+ E283 06 BF                                ld      b,$BF
 328+ E285 ED 79                                out     (c),a
 329+ E287                                      WriteTurboRegister ENVELOPE_PERIOD_FINE,0
 329+ E287 3E 0B       >                        ld      a,ENVELOPE_PERIOD_FINE
 329+ E289             >                        WriteTurboControlA
 329+ E289 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 329+ E28C ED 79       >                        out     (c),a
 329+ E28E 06 BF       >                        ld      b,$BF
 329+ E290 3E 00       >                        ld      a,0
 329+ E292 ED 79       >                        out     (c),a
 330+ E294                                      WriteTurboRegister ENVELOPE_PERIOD_COARSE,0
 330+ E294 3E 0C       >                        ld      a,ENVELOPE_PERIOD_COARSE
 330+ E296             >                        WriteTurboControlA
 330+ E296 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 330+ E299 ED 79       >                        out     (c),a
 330+ E29B 06 BF       >                        ld      b,$BF
 330+ E29D 3E 00       >                        ld      a,0
 330+ E29F ED 79       >                        out     (c),a
 331+ E2A1                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 331+ E2A1 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 331+ E2A3             >                        WriteTurboControlA
 331+ E2A3 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 331+ E2A6 ED 79       >                        out     (c),a
 331+ E2A8 06 BF       >                        ld      b,$BF
 331+ E2AA 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 331+ E2AC ED 79       >                        out     (c),a
 332+ E2AE                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 332+ E2AE 3E 07       >                        ld      a,TONE_ENABLE
 332+ E2B0             >                        WriteTurboControlA
 332+ E2B0 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 332+ E2B3 ED 79       >                        out     (c),a
 332+ E2B5 06 BF       >                        ld      b,$BF
 332+ E2B7 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 332+ E2B9 ED 79       >                        out     (c),a
 333+ E2BB 3A 96 7E                             ld      a,(DELTA)
 334+ E2BE 32 06 B1                             ld      (LAST_DELTA),a
 335+ E2C1 C9                                   ret
 336+ E2C2
 337+ E2C2 53 6F 75 6E  SoundLabel              DB      "Sound Channels  "
 337+ E2C6 64 20 43 68
 337+ E2CA 61 6E 6E 65
 337+ E2CE 6C 73 20 20
 338+ E2D2 00 00 00...  SoundChannelSeq         DS      8   ; The current step in the SFX or $FX for empty
 339+ E2DA 00 00 00...  SoundChannelLastSeq     DS      8   ; A copy of SFX length to save an extra lookup, $FF means 1 step always on, $00 means off
 340+ E2E2 00 00 00...  SoundChannelTimer       DS      8   ; The count down to next sequence
 341+ E2EA 00 00 00...  SoundDataPointer        DS      2*8 ; pointer to current sound step
 342+ E2FA              ;                  Channel/Chip B/1  C/1  A/2  B/2  C/2  A/3  B/3  C/3
 343+ E2FA 11 21        SoundChipMapNumber      DB      $10 | TURBO_CHIP_AY1, $20 | TURBO_CHIP_AY1
 344+ E2FC 02 32                                DB      $00 | TURBO_CHIP_AY2, $10 | TURBO_CHIP_AY2 | $20 | TURBO_CHIP_AY2
 345+ E2FE 02 33                                DB      $00 | TURBO_CHIP_AY2, $10 | TURBO_CHIP_AY3 | $20 | TURBO_CHIP_AY3
 346+ E300              SoundLastSeqOffset      EQU     8
 347+ E300              SoundTimerOffset        EQU     SoundLastSeqOffset + 8
 348+ E300              SoundDataPointerOffset  EQU     SoundTimerOffset + 8
 349+ E300              SoundDataPointerOffset1 EQU     SoundTimerOffset + 9
 350+ E300              SoundChipMapOffset      EQU     SoundDataPointerOffset + 16
 351+ E300              ;Chip map is            bits 5,4 channel letter A = 0 B =1 C = 2    1,0 Chip Number
 352+ E300              ;Mapping                0 = 1B, 1 = 1C, 3=2A, 4 = 2B, 5=2C, 6 = 3A, 7 = 3B, 8 = 3C
 353+ E300              ;                       Chip 1 Engine, noise channel but engine noise period is priority
 354+ E300              ;                       Chip 2 General FX, no noise
 355+ E300              ;                       Chip 3 General FX, no noise
 356+ E300
 357+ E300              ;--- Data sets for Sound
 358+ E300              ;--- Sound Channels are 0 to 9 AY1 A B C AY2 A B C AY3 A B C
 359+ E300              ;--- Sounds can not enqueu, the find a free slot & SoundFxtoEnqueue gets zeroed or it gets left
 360+ E300              ;--- AY1 channel 1 is reserved for engine noise as its calculated on the fly
 361+ E300              ; Predefined value for each channel to load to $FFFD before setting up tone
 362+ E300              ; Hcops a copy of the 3 chips register 7
 363+ E300
 364+ E300
 365+ E300              ; StepLength            DB      1   ; $FF = 1 step forever else number of entries in StepListArray
 366+ E300              ; StepListArray
 367+ E300              ;     TonePitch         DW      4 bits unused + 12 bits
 368+ E300              ;     NoisePitch        DB      5 bit or $FF for no noise
 369+ E300              ;     Volume            DB      0 to 15
 370+ E300              ;     EnvelopePeriod    DW      0
 371+ E300              ;     WaveForm          DB      0
 372+ E300
 373+ E300              ; SFX Format
 374+ E300              ; SFXPointerList - Odd numbers are tone, Even Numbers have noise too, optimisation for channel handling
 375+ E300 53 6F 75 6E  SoundLabelSFX   DB      "Sound Data      "
 375+ E304 64 20 44 61
 375+ E308 74 61 20 20
 375+ E30C 20 20 20 20
 376+ E310 19 E3        SFXPointerList  dw      SFXLaser
 377+ E312              SFXEndOfList    EQU     1
 378+ E312              SFXBlockLength  EQU     3
 379+ E312              SFXFineOffset   EQU     0
 380+ E312              SFXCorseOffset  EQU     1
 381+ E312              SFXVolOffset    EQU     2
 382+ E312              ;                       Step Count
 383+ E312 4C 61 73 65  SoundLaser      DB      "Laser  "
 383+ E316 72 20 20
 384+ E319 0B           SFXLaser        db      11
 385+ E31A              ;                       Tone
 386+ E31A              ;                      Fine Crs  Vol
 387+ E31A 5F 00 0E                    db      $5F, $00, $0E
 388+ E31D 39 00 0E                    db      $39, $00, $0E
 389+ E320 47 00 0D                    db      $47, $00, $0D
 390+ E323 5E 00 0C                    db      $5E, $00, $0C
 391+ E326 6E 10 0A                    db      $6E, $10, $0A
 392+ E329 76 00 08                    db      $76, $00, $08
 393+ E32C 76 00 07                    db      $76, $00, $07
 394+ E32F 06 01 06                    db      $06, $01, $06
 395+ E332 2E 01 03                    db      $2E, $01, $03
 396+ E335 16 01 03                    db      $16, $01, $03
 397+ E338 03 00 01                    db      $03, $00, $01
 398+ E33B
 399+ E33B              ;
 400+ E33B              ;
 401+ E33B              ;Laser1:          db 14,14,13,12,10, 8, 7, 6, 3, 1
 402+ E33B              ;LaserFrameCount  db  5, 5, 5, 5, 5, 5, 5, 5, 5, 5
 403+ E33B              ;LaserLength:     db $-LaserFrameCount
 404+ E33B              ;LaserTone:       dw $05F, $089, $097, $0AE, $0CE, $0B6, $0E6, $106, $13E, $126, $136
 405+ E33B
 406+ E33B C5 E5        DanubePointer1:         DW BlueDanube1
 407+ E33D DA E6        DanubePointer2:         DW BlueDanube2
 408+ E33F EF E7        DanubePointer3:         DW BlueDanube3
 409+ E341 04 E9        DanubePointer4:         DW BlueDanube4
 410+ E343 19 EA        DanubePointer5:         DW BlueDanube5
 411+ E345 2E EB        DanubePointer6:         DW BlueDanube6
 412+ E347              ; Sustain reduces volume each cycle, playing a note resets it
 413+ E347 00           DanubeVolume1:          DB 0
 414+ E348 02           DanubeChip1:            DB TURBO_CHIP_AY2
 415+ E349 00           DanubeVolume2:          DB 0
 416+ E34A 02           DanubeChip2:            DB TURBO_CHIP_AY2
 417+ E34B 00           DanubeVolume3:          DB 0
 418+ E34C 02           DanubeChip3:            DB TURBO_CHIP_AY2
 419+ E34D 00           DanubeVolume4:          DB 0
 420+ E34E 03           DanubeChip4:            DB TURBO_CHIP_AY3
 421+ E34F 00           DanubeVolume5:          DB 0
 422+ E350 03           DanubeChip5:            DB TURBO_CHIP_AY3
 423+ E351 00           DanubeVolume6:          DB 0
 424+ E352 03           DanubeChip6:            DB TURBO_CHIP_AY3
 425+ E353              PointerVolOffset:       EQU 12
 426+ E353              PointerChipOffset:      EQU 13
 427+ E353 00 00        DanubeCounter:          DW 0
 428+ E355              DanubeMax:              EQU BlueDanube2 - BlueDanube1 +1
 429+ E355 16 01        DanubeMaxMem:           DW  DanubeMax
 430+ E357 0F           DanubeVolume:           DB $0F
 431+ E358 08           DanubePace:             DB 8
 432+ E359 08           DanubeTimer:            DB 8
 433+ E35A 00 00        DanubeAttackEnvelope    DW $0000
 434+ E35C
 435+ E35C F6 FC        SelectDanubeAYa:        or TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT
 436+ E35E                                      WriteTurboControlA
 436+ E35E 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 436+ E361 ED 79       >                        out     (c),a
 437+ E363 C9                                   ret
 438+ E364
 439+ E364 08           WriteAToTurboRegisterD: ex      af,af'
 440+ E365 7A                                   ld      a,d
 441+ E366                                      WriteTurboControlA
 441+ E366 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 441+ E369 ED 79       >                        out     (c),a
 442+ E36B 06 BF                                ld      b,$BF
 443+ E36D 08                                   ex      af,af'
 444+ E36E ED 79                                out     (c),a
 445+ E370 C9                                   ret
 446+ E371
 447+ E371              SetChannelAVolume0:     WriteTurboControlA
 447+ E371 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 447+ E374 ED 79       >                        out     (c),a
 448+ E376 06 BF                                ld      b,$BF
 449+ E378                                      ZeroA
 449+ E378 AF          >                        xor a
 450+ E379 ED 79                                out     (c),a
 451+ E37B C9                                   ret
 452+ E37C
 453+ E37C 7A           SetChannelDNoteAtHL:    ld      a,d                 ; a is now 0 to 2
 454+ E37D CB 27                                sla     a                   ; multiply by 2 so now 0, 2, 4
 455+ E37F F5                                   push    af                  ; save fine adjust register nbr
 456+ E380                                      WriteTurboControlA          ; Send out fine adjust
 456+ E380 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 456+ E383 ED 79       >                        out     (c),a
 457+ E385 06 BF                                ld      b,$BF
 458+ E387 7E                                   ld      a,(hl)              ; get fine note
 459+ E388 ED 79                                out     (c),a               ; write fine note
 460+ E38A F1                                   pop     af                  ; get back fine adjust register
 461+ E38B 3C                                   inc     a
 462+ E38C                                      WriteTurboControlA
 462+ E38C 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 462+ E38F ED 79       >                        out     (c),a
 463+ E391 23                                   inc     hl                  ; move to coarse value
 464+ E392 06 BF                                ld      b,$BF
 465+ E394 7E                                   ld      a,(hl)
 466+ E395 ED 79                                out     (c),a
 467+ E397                                      ;IFDEF   DANUBEATTACK
 468+ E397              .SetAttack:             ;    ld      hl,(DanubeAttackEnvelope)
 469+ E397                                      ;    ld      a,ENVELOPE_PERIOD_FINE
 470+ E397                                      ;    WriteTurboControlA
 471+ E397                                      ;    ld      b,$BF
 472+ E397                                      ;    ld      a,l
 473+ E397                                      ;    out     (c),a
 474+ E397                                      ;    ld      a,ENVELOPE_PERIOD_COARSE
 475+ E397                                      ;    WriteTurboControlA
 476+ E397                                      ;    ld      b,$BF
 477+ E397                                      ;    ld      a,h
 478+ E397                                      ;    out     (c),a
 479+ E397                                      ;ENDIF
 480+ E397 7A           .SetVolume:             ld      a,d                 ; get back channel
 481+ E398 C6 08                                add     a,8
 482+ E39A                                      WriteTurboControlA
 482+ E39A 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 482+ E39D ED 79       >                        out     (c),a
 483+ E39F 06 BF                                ld      b,$BF
 484+ E3A1 3A 57 E3                             ld      a,(DanubeVolume)    ; could put in ixh but we have plenty of cycles
 485+ E3A4 ED 79                                out     (c),a
 486+ E3A6 C9                                   ret
 487+ E3A7
 488+ E3A7 DD 7E 06     SustainNote:            ld      a,(ix+6)
 489+ E3AA 3D                                   dec     a
 490+ E3AB 20 02                                jr      nz,.MinNoteSkip
 491+ E3AD 3E 01                                ld      a,1
 492+ E3AF DD 77 0C     .MinNoteSkip:           ld      (ix+PointerVolOffset),a
 493+ E3B2 78                                   ld      a,b          ; get back channel which is passed in via b
 494+ E3B3 C6 08                                add     a,8
 495+ E3B5                                      WriteTurboControlA
 495+ E3B5 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 495+ E3B8 ED 79       >                        out     (c),a
 496+ E3BA 06 BF                                ld      b,$BF
 497+ E3BC DD 7E 0C                             ld      a,(ix+PointerVolOffset)
 498+ E3BF ED 79                                out     (c),a
 499+ E3C1                                      IFDEF   DANUBEATTACK
 500+ E3C1 3E 0B        .SetAttack:                 ld      a,ENVELOPE_PERIOD_FINE
 501+ E3C3                                          WriteTurboControlA
 501+ E3C3 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 501+ E3C6 ED 79       >                        out     (c),a
 502+ E3C8 06 BF                                    ld      b,$BF
 503+ E3CA                                          ZeroA
 503+ E3CA AF          >                        xor a
 504+ E3CB ED 79                                    out     (c),a
 505+ E3CD 3E 0C                                    ld      a,ENVELOPE_PERIOD_COARSE
 506+ E3CF                                          WriteTurboControlA
 506+ E3CF 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 506+ E3D2 ED 79       >                        out     (c),a
 507+ E3D4 06 BF                                    ld      b,$BF
 508+ E3D6                                          ZeroA
 508+ E3D6 AF          >                        xor a
 509+ E3D7 ED 79                                    out     (c),a
 510+ E3D9                                      ENDIF
 511+ E3D9 C9                                   ret
 512+ E3DA
 513+ E3DA
 514+ E3DA              ; IN iyh = channel number, a = note, ix = pointer to danubepointer table corresponding to guitar string
 515+ E3DA DD 7E 0D     PlayDanubeNote:         ld      a,(ix+PointerChipOffset)
 516+ E3DD C5                                   push    bc
 517+ E3DE CD 5C E3                             call    SelectDanubeAYa
 518+ E3E1 C1                                   pop     bc
 519+ E3E2 DD 7E 00                             ld      a,(ix+0)
 520+ E3E5 6F                                   ld      l,a
 521+ E3E6 DD 7E 01                             ld      a,(ix+1)
 522+ E3E9 67                                   ld      h,a
 523+ E3EA 7E                                   ld      a,(hl)
 524+ E3EB A7                                   and     a
 525+ E3EC 28 26                                jr      z,  .NoNote
 526+ E3EE FE FF                                cp      $FF
 527+ E3F0 C8                                   ret     z
 528+ E3F1                                      ;jp      z,SustainNote
 529+ E3F1 21 1D E5                             ld      hl, TonesPitch
 530+ E3F4 5F                                   ld      e,a         ; save a
 531+ E3F5 E6 F0                                and     $F0         ; load octave to d
 532+ E3F7 ED 23                                swapnib             ;
 533+ E3F9 57                                   ld      d,a         ;
 534+ E3FA 7B                                   ld      a,e         ; get a back
 535+ E3FB 1E 0C                                ld      e,12        ; 12 semi tones so mul by 12
 536+ E3FD ED 30                                mul                 ;
 537+ E3FF E6 0F                                and     $0F         ; get semi tone
 538+ E401 EB                                   ex      de,hl       ; hl = octave * 12 + semi tone
 539+ E402 ED 31                                add     hl,a        ; .
 540+ E404                                      ShiftHLLeft1        ; multiply by 2 as we have 2 bytes per tone
 540+ E404 CB 25       >			   sla l
 540+ E406 CB 14       >			   rl  h
 541+ E408 11 1D E5                             ld      de,TonesPitch
 542+ E40B 19                                   add     hl,de       ; now we are pointing at table
 543+ E40C 50                                   ld      d,b         ; get channel number
 544+ E40D CD 7C E3                             call    SetChannelDNoteAtHL ; leaves with A = volume note
 545+ E410 DD 77 0C                             ld      (ix+PointerVolOffset),a    ;
 546+ E413 C9                                   ret
 547+ E414 78           .NoNote:                ld      a,b         ; a= channel number 0 to 3
 548+ E415 C6 08                                add     8           ; adjust to volume register
 549+ E417 CD 71 E3     .NoNoteOK               call    SetChannelAVolume0
 550+ E41A C9                                   ret
 551+ E41B
 552+ E41B 3A 59 E3     PlayDanube:             ld      a,(DanubeTimer)
 553+ E41E 3D                                   dec     a
 554+ E41F 28 04                                jr      z,.PlaySequence
 555+ E421 32 59 E3                             ld      (DanubeTimer),a
 556+ E424 C9                                   ret
 557+ E425 06 06        .PlaySequence:          ld      b,6
 558+ E427 DD 21 3B E3                          ld      ix,DanubePointer1
 559+ E42B 0E 00                                ld      c,0
 560+ E42D C5           .ChannelLoop:           push    bc
 561+ E42E 41                                   ld      b,c
 562+ E42F CD DA E3                             call    PlayDanubeNote
 563+ E432 C1                                   pop     bc
 564+ E433 DD 23                                inc     ix
 565+ E435 DD 23                                inc     ix
 566+ E437 0C                                   inc     c
 567+ E438 79                                   ld      a,c
 568+ E439 FE 03                                cp      3
 569+ E43B 20 02                                jr      nz,.SkipChannelMax
 570+ E43D 0E 00                                ld      c,0
 571+ E43F 10 EC        .SkipChannelMax:        djnz    .ChannelLoop
 572+ E441 C3 AE E4                             jp      UpdatePointers
 573+ E444              ;
 574+ E444              .sPlaySequence:
 575+ E444 3E 02        .PlayChannel1:          ld      a,TURBO_CHIP_AY2
 576+ E446 CD 5C E3                             call    SelectDanubeAYa
 577+ E449 DD 21 3B E3                          ld      ix,DanubePointer1
 578+ E44D DD 7E 00                             ld      a,(ix+0)
 579+ E450 2A 3B E3                             ld      hl,(DanubePointer1)
 580+ E453 7E                                   ld      a,(hl)
 581+ E454 06 00                                ld      b,0
 582+ E456 CD DA E3                             call    PlayDanubeNote
 583+ E459              .PlayChannel2:          ;break
 584+ E459 3E 02                                ld      a,TURBO_CHIP_AY2
 585+ E45B CD 5C E3                             call    SelectDanubeAYa
 586+ E45E DD 21 3D E3                          ld      ix,DanubePointer2
 587+ E462 DD 7E 00                             ld      a,(ix+0)
 588+ E465 06 01                                ld      b,1
 589+ E467 CD DA E3                             call    PlayDanubeNote
 590+ E46A 3E 02        .PlayChannel3:          ld      a,TURBO_CHIP_AY2
 591+ E46C CD 5C E3                             call    SelectDanubeAYa
 592+ E46F DD 21 3F E3                          ld      ix,DanubePointer3
 593+ E473 DD 7E 00                             ld      a,(ix+0)
 594+ E476 06 02                                ld      b,2
 595+ E478 CD DA E3                             call    PlayDanubeNote
 596+ E47B 3E 03        .PlayChannel4:          ld      a,TURBO_CHIP_AY3
 597+ E47D CD 5C E3                             call    SelectDanubeAYa
 598+ E480 DD 21 41 E3                          ld      ix,DanubePointer4
 599+ E484 DD 7E 00                             ld      a,(ix+0)
 600+ E487 06 00                                ld      b,0
 601+ E489 CD DA E3                             call    PlayDanubeNote
 602+ E48C 3E 03        .PlayChannel5:          ld      a,TURBO_CHIP_AY3
 603+ E48E CD 5C E3                             call    SelectDanubeAYa
 604+ E491 DD 21 43 E3                          ld      ix,DanubePointer5
 605+ E495 DD 7E 00                             ld      a,(ix+0)
 606+ E498 06 01                                ld      b,1
 607+ E49A CD DA E3                             call    PlayDanubeNote
 608+ E49D 3E 03        .PlayChannel6:          ld      a,TURBO_CHIP_AY3
 609+ E49F CD 5C E3                             call    SelectDanubeAYa
 610+ E4A2 DD 21 45 E3                          ld      ix,DanubePointer6
 611+ E4A6 DD 7E 00                             ld      a,(ix+0)
 612+ E4A9 06 02                                ld      b,2
 613+ E4AB CD DA E3                             call    PlayDanubeNote
 614+ E4AE 3A 58 E3     UpdatePointers:         ld      a,(DanubePace)
 615+ E4B1 32 59 E3                             ld      (DanubeTimer),a
 616+ E4B4 2A 53 E3                             ld      hl,(DanubeCounter)
 617+ E4B7 11 16 01                             ld      de,DanubeMax
 618+ E4BA E5           .compare16HLDE:         push    hl
 619+ E4BB A7                                   and     a
 620+ E4BC ED 52                                sbc     hl,de
 621+ E4BE E1                                   pop     hl
 622+ E4BF                                      ;break
 623+ E4BF 20 2A                                jr      nz,.MovePointersForward
 624+ E4C1 21 C5 E5     .ResetPointers:         ld      hl,BlueDanube1
 625+ E4C4 22 3B E3                             ld      (DanubePointer1),hl
 626+ E4C7 21 DA E6                             ld      hl,BlueDanube2
 627+ E4CA 22 3D E3                             ld      (DanubePointer2),hl
 628+ E4CD 21 EF E7                             ld      hl,BlueDanube3
 629+ E4D0 22 3F E3                             ld      (DanubePointer3),hl
 630+ E4D3 21 04 E9                             ld      hl,BlueDanube4
 631+ E4D6 22 41 E3                             ld      (DanubePointer4),hl
 632+ E4D9 21 19 EA                             ld      hl,BlueDanube5
 633+ E4DC 22 43 E3                             ld      (DanubePointer5),hl
 634+ E4DF 21 2E EB                             ld      hl,BlueDanube6
 635+ E4E2 22 45 E3                             ld      (DanubePointer6),hl
 636+ E4E5 21 00 00                             ld      hl,0
 637+ E4E8 22 53 E3                             ld      (DanubeCounter),hl
 638+ E4EB 23           .MovePointersForward:   inc     hl
 639+ E4EC 22 53 E3                             ld      (DanubeCounter),hl
 640+ E4EF 21 3B E3                             ld      hl,DanubePointer1
 641+ E4F2 CD 14 E5                             call    AdvancePointer
 642+ E4F5 21 3D E3                             ld      hl,DanubePointer2
 643+ E4F8 CD 14 E5                             call    AdvancePointer
 644+ E4FB 21 3F E3                             ld      hl,DanubePointer3
 645+ E4FE CD 14 E5                             call    AdvancePointer
 646+ E501 21 41 E3                             ld      hl,DanubePointer4
 647+ E504 CD 14 E5                             call    AdvancePointer
 648+ E507 21 43 E3                             ld      hl,DanubePointer5
 649+ E50A CD 14 E5                             call    AdvancePointer
 650+ E50D 21 45 E3                             ld      hl,DanubePointer6
 651+ E510 CD 14 E5                             call    AdvancePointer
 652+ E513 C9                                   ret
 653+ E514
 654+ E514 7E           AdvancePointer:         ld      a,(hl)
 655+ E515 23                                   inc     hl
 656+ E516 56                                   ld      d,(hl)
 657+ E517 5F                                   ld      e,a
 658+ E518 13                                   inc     de
 659+ E519 72                                   ld      (hl),d
 660+ E51A 2B                                   dec     hl
 661+ E51B 73                                   ld      (hl),e
 662+ E51C C9                                   ret
 663+ E51D
 664+ E51D
 665+ E51D
 666+ E51D
 667+ E51D BF 0F        TonesPitch       db  $BF,   $0F
 668+ E51F DC 0E                         db  $DC,   $0E
 669+ E521 07 0E                         db  $07,   $0E
 670+ E523 7B 1A                         db  $7B,   $1A
 671+ E525 FE 18                         db  $FE,   $18
 672+ E527 97 17                         db  $97,   $17
 673+ E529 44 16                         db  $44,   $16
 674+ E52B 04 15                         db  $04,   $15
 675+ E52D D6 13                         db  $D6,   $13
 676+ E52F B9 12                         db  $B9,   $12
 677+ E531 AC 11                         db  $AC,   $11
 678+ E533 AE 10                         db  $AE,   $10
 679+ E535 DF 07                         db  $DF,   $07
 680+ E537 6E 07                         db  $6E,   $07
 681+ E539 03 07                         db  $03,   $07
 682+ E53B 3D 0D                         db  $3D,   $0D
 683+ E53D 7F 0C                         db  $7F,   $0C
 684+ E53F CC 0B                         db  $CC,   $0B
 685+ E541 22 0B                         db  $22,   $0B
 686+ E543 82 0A                         db  $82,   $0A
 687+ E545 EB 09                         db  $EB,   $09
 688+ E547 5D 09                         db  $5D,   $09
 689+ E549 D6 08                         db  $D6,   $08
 690+ E54B 57 08                         db  $57,   $08
 691+ E54D F0 03                         db  $F0,   $03
 692+ E54F B7 03                         db  $B7,   $03
 693+ E551 82 03                         db  $82,   $03
 694+ E553 9F 06                         db  $9F,   $06
 695+ E555 40 06                         db  $40,   $06
 696+ E557 E6 05                         db  $E6,   $05
 697+ E559 91 05                         db  $91,   $05
 698+ E55B 41 05                         db  $41,   $05
 699+ E55D F6 04                         db  $F6,   $04
 700+ E55F AE 04                         db  $AE,   $04
 701+ E561 6B 04                         db  $6B,   $04
 702+ E563 2C 04                         db  $2C,   $04
 703+ E565 F8 01                         db  $F8,   $01
 704+ E567 DC 01                         db  $DC,   $01
 705+ E569 C1 01                         db  $C1,   $01
 706+ E56B 4F 03                         db  $4F,   $03
 707+ E56D 20 03                         db  $20,   $03
 708+ E56F F3 02                         db  $F3,   $02
 709+ E571 C9 02                         db  $C9,   $02
 710+ E573 A1 02                         db  $A1,   $02
 711+ E575 7B 02                         db  $7B,   $02
 712+ E577 57 02                         db  $57,   $02
 713+ E579 36 02                         db  $36,   $02
 714+ E57B 16 02                         db  $16,   $02
 715+ E57D FC 00                         db  $FC,   $00
 716+ E57F EE 00                         db  $EE,   $00
 717+ E581 E0 00                         db  $E0,   $00
 718+ E583 A8 01                         db  $A8,   $01
 719+ E585 90 01                         db  $90,   $01
 720+ E587 79 01                         db  $79,   $01
 721+ E589 64 01                         db  $64,   $01
 722+ E58B 50 01                         db  $50,   $01
 723+ E58D 3D 01                         db  $3D,   $01
 724+ E58F 2C 01                         db  $2C,   $01
 725+ E591 1B 01                         db  $1B,   $01
 726+ E593 0B 01                         db  $0B,   $01
 727+ E595 7E 00                         db  $7E,   $00
 728+ E597 77 00                         db  $77,   $00
 729+ E599 70 00                         db  $70,   $00
 730+ E59B D4 00                         db  $D4,   $00
 731+ E59D C8 00                         db  $C8,   $00
 732+ E59F BD 00                         db  $BD,   $00
 733+ E5A1 B2 00                         db  $B2,   $00
 734+ E5A3 A8 00                         db  $A8,   $00
 735+ E5A5 9F 00                         db  $9F,   $00
 736+ E5A7 96 00                         db  $96,   $00
 737+ E5A9 8D 00                         db  $8D,   $00
 738+ E5AB 85 00                         db  $85,   $00
 739+ E5AD 3F 00                         db  $3F,   $00
 740+ E5AF 3B 00                         db  $3B,   $00
 741+ E5B1 38 00                         db  $38,   $00
 742+ E5B3 6A 00                         db  $6A,   $00
 743+ E5B5 64 00                         db  $64,   $00
 744+ E5B7 5E 00                         db  $5E,   $00
 745+ E5B9 59 00                         db  $59,   $00
 746+ E5BB 54 00                         db  $54,   $00
 747+ E5BD 4F 00                         db  $4F,   $00
 748+ E5BF 4B 00                         db  $4B,   $00
 749+ E5C1 47 00                         db  $47,   $00
 750+ E5C3 43 00                         db  $43,   $00
 751+ E5C5
 752+ E5C5
 753+ E5C5              ; 1 Byte high nibble Octave, low note
 754+ E5C5              ; for now middle octave 3,
 755+ E5C5              ; low nibble mapping
 756+ E5C5              ;       0      1  2  3  4  5  6   7  8  9   A  B  C
 757+ E5C5              ;       None   A  A# B  C  C# D  D#  E  F  F#  G  G#
 758+ E5C5              ;BlueDanube1:     DB $00, $00, $00, $00, $00, $61, $61, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $61, $61, $5B, $5B, $00, $00, $00
 759+ E5C5              ;BlueDanube2:     DB $00, $00, $00, $00, $00, $5A, $5A, $5A, $5A, $00, $00, $00, $00, $00, $00, $00, $00, $58, $58, $55, $55, $00, $00, $00
 760+ E5C5              ;BlueDanube3:     DB $00, $00, $00, $41, $41, $00, $00, $56, $56, $00, $00, $00, $00, $00, $00, $41, $41, $00, $00, $00, $00, $00, $00, $00
 761+ E5C5              ;BlueDanube4:     DB $36, $36, $3A, $00, $00, $00, $00, $00, $00, $00, $00, $00, $36, $36, $3A, $00, $00, $00, $00, $00, $00, $00, $00, $00
 762+ E5C5
 763+ E5C5 00 00 00 48  BlueDanube1:          DB 	$00, 	$00, 	$00, 	$48, 	$00, 	$00, 	$00, 	$4A, 	$FF, 	$4A, 	$FF, 	$4A, 	$FF, 	$00, 	$00, 	$48, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 763+ E5C9 00 00 00 4A
 763+ E5CD FF 4A FF 4A
 763+ E5D1 FF 00 00 48
 763+ E5D5 00 00 00 4B
 763+ E5D9 FF 4B FF 4B
 763+ E5DD FF 00 00 00
 763+ E5E1 00 00 00 00
 763+ E5E5 00 00 00 00
 763+ E5E9 00 00 00 00
 763+ E5ED 00 00 00 00
 763+ E5F1 00 00 00 00
 763+ E5F5 00 00 00 00
 763+ E5F9 00 00 00 00
 763+ E5FD 00 00 00 00
 763+ E601 00 00 00 00
 764+ E605 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 764+ E609 00 00 00 00
 764+ E60D 00 00 00 00
 764+ E611 00 00 00 00
 764+ E615 00 00 00 00
 764+ E619 00 00 00 00
 764+ E61D 00 00 00 00
 764+ E621 00 00 00 00
 764+ E625 00 00 00 00
 764+ E629 00 00 00 00
 764+ E62D 00 00 00 00
 764+ E631 00 00 00 00
 764+ E635 00 00 00 00
 764+ E639 00 00 00 00
 764+ E63D 00 00 00 00
 764+ E641 00 00 00 00
 765+ E645 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48, 	$FF, 	$48, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48, 	$00, 	$48, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00
 765+ E649 00 00 00 00
 765+ E64D 00 00 48 FF
 765+ E651 48 FF 00 00
 765+ E655 00 00 00 00
 765+ E659 00 00 00 00
 765+ E65D 00 00 00 00
 765+ E661 00 00 00 00
 765+ E665 00 00 00 48
 765+ E669 00 48 00 00
 765+ E66D 00 00 00 00
 765+ E671 00 00 00 00
 765+ E675 00 00 00 00
 765+ E679 00 00 00 00
 765+ E67D 00 00 4B FF
 765+ E681 4B FF 00 00
 766+ E685 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00, 	$48, 	$FF, 	$48, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$4A, 	$FF, 	$4A, 	$FF, 	$4A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48
 766+ E689 00 00 00 00
 766+ E68D 00 00 00 00
 766+ E691 00 00 00 00
 766+ E695 00 4B FF 4B
 766+ E699 FF 00 00 48
 766+ E69D FF 48 FF 00
 766+ E6A1 00 00 00 00
 766+ E6A5 00 00 00 00
 766+ E6A9 00 00 00 4A
 766+ E6AD FF 4A FF 4A
 766+ E6B1 FF 00 00 00
 766+ E6B5 00 00 00 00
 766+ E6B9 00 00 00 00
 766+ E6BD 00 00 00 00
 766+ E6C1 00 00 00 48
 767+ E6C5 FF 00 00 00                        DB	$FF, 	$00, 	$00, 	$00, 	$00, 	$4A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00, 	$4B, 	$FF, 	$49, 	$FF
 767+ E6C9 00 4A FF 00
 767+ E6CD 00 00 00 4B
 767+ E6D1 FF 4B FF 00
 767+ E6D5 00 4B FF 49
 767+ E6D9 FF
 768+ E6DA 00 44 46 00  BlueDanube2:          DB 	$00, 	$44, 	$46, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$46, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$43, 	$FF, 	$43, 	$FF, 	$43, 	$44, 	$46, 	$00, 	$00, 	$00, 	$44, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 768+ E6DE 00 44 FF 44
 768+ E6E2 FF 44 FF 44
 768+ E6E6 FF 44 46 00
 768+ E6EA 00 43 FF 43
 768+ E6EE FF 43 FF 43
 768+ E6F2 FF 43 44 46
 768+ E6F6 00 00 00 44
 768+ E6FA 00 00 00 00
 768+ E6FE 00 44 00 00
 768+ E702 00 00 00 44
 768+ E706 00 00 00 00
 768+ E70A 00 00 00 00
 768+ E70E 00 00 00 00
 768+ E712 00 00 00 00
 768+ E716 00 00 00 00
 769+ E71A 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$46, 	$00, 	$46, 	$00, 	$00, 	$00, 	$43, 	$00, 	$43, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$46, 	$FF, 	$46, 	$FF, 	$00, 	$00, 	$44, 	$44, 	$00, 	$00, 	$00, 	$00
 769+ E71E 00 00 00 00
 769+ E722 00 00 00 00
 769+ E726 00 00 00 00
 769+ E72A 00 00 00 00
 769+ E72E 00 00 00 00
 769+ E732 00 00 00 00
 769+ E736 46 00 46 00
 769+ E73A 00 00 43 00
 769+ E73E 43 00 00 00
 769+ E742 00 00 00 00
 769+ E746 00 00 00 00
 769+ E74A 00 00 00 00
 769+ E74E 46 FF 46 FF
 769+ E752 00 00 44 44
 769+ E756 00 00 00 00
 770+ E75A 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$43, 	$00, 	$43, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$00, 	$46
 770+ E75E 00 00 00 00
 770+ E762 00 00 44 FF
 770+ E766 44 FF 00 00
 770+ E76A 44 FF 44 FF
 770+ E76E 00 00 00 00
 770+ E772 00 00 00 00
 770+ E776 00 00 00 00
 770+ E77A 00 00 00 43
 770+ E77E 00 43 00 00
 770+ E782 00 43 FF 43
 770+ E786 FF 00 00 00
 770+ E78A 00 00 00 00
 770+ E78E 00 00 00 00
 770+ E792 00 00 43 FF
 770+ E796 43 FF 00 46
 771+ E79A FF 46 FF 00                        DB	$FF, 	$46, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48, 	$FF, 	$48, 	$FF, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44
 771+ E79E 00 00 00 00
 771+ E7A2 00 00 00 00
 771+ E7A6 00 00 00 00
 771+ E7AA 00 48 FF 48
 771+ E7AE FF 00 00 44
 771+ E7B2 FF 44 FF 00
 771+ E7B6 00 00 00 00
 771+ E7BA 00 00 00 00
 771+ E7BE 00 00 00 44
 771+ E7C2 FF 44 FF 44
 771+ E7C6 FF 00 00 00
 771+ E7CA 00 43 FF 00
 771+ E7CE 00 00 00 43
 771+ E7D2 FF 00 00 00
 771+ E7D6 00 00 00 44
 772+ E7DA FF 00 00 00                        DB	$FF, 	$00, 	$00, 	$00, 	$00, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$00, 	$00, 	$43, 	$FF, 	$00, 	$00
 772+ E7DE 00 44 FF 00
 772+ E7E2 00 00 00 43
 772+ E7E6 FF 43 FF 00
 772+ E7EA 00 43 FF 00
 772+ E7EE 00
 773+ E7EF 00 00 00 00  BlueDanube3:          DB 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$41, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 773+ E7F3 00 00 00 41
 773+ E7F7 FF 41 FF 41
 773+ E7FB FF 00 00 00
 773+ E7FF 00 00 00 3B
 773+ E803 FF 3B FF 3B
 773+ E807 FF 00 00 00
 773+ E80B 00 41 00 00
 773+ E80F 00 00 00 3B
 773+ E813 00 00 00 00
 773+ E817 00 00 00 00
 773+ E81B 00 00 00 00
 773+ E81F 00 41 00 00
 773+ E823 00 00 00 3B
 773+ E827 00 00 00 00
 773+ E82B 00 00 00 00
 774+ E82F 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$43, 	$00, 	$43, 	$00, 	$00, 	$00, 	$3B, 	$00, 	$3B, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$41, 	$41, 	$00, 	$00, 	$00, 	$00
 774+ E833 00 00 00 00
 774+ E837 00 00 00 00
 774+ E83B 00 00 00 00
 774+ E83F 00 00 00 00
 774+ E843 00 00 00 00
 774+ E847 00 00 00 00
 774+ E84B 43 00 43 00
 774+ E84F 00 00 3B 00
 774+ E853 3B 00 00 00
 774+ E857 00 00 00 00
 774+ E85B 00 00 00 00
 774+ E85F 00 00 00 00
 774+ E863 41 FF 41 FF
 774+ E867 00 00 41 41
 774+ E86B 00 00 00 00
 775+ E86F 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$3B
 775+ E873 00 00 00 00
 775+ E877 00 00 00 00
 775+ E87B 00 00 00 00
 775+ E87F 41 FF 41 FF
 775+ E883 00 00 00 00
 775+ E887 00 00 00 00
 775+ E88B 00 00 00 00
 775+ E88F 00 00 00 00
 775+ E893 00 00 00 00
 775+ E897 00 3B FF 3B
 775+ E89B FF 00 00 00
 775+ E89F 00 00 00 00
 775+ E8A3 00 00 3B FF
 775+ E8A7 FF FF FF FF
 775+ E8AB FF FF 00 3B
 776+ E8AF FF 3B FF 00                        DB	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00
 776+ E8B3 00 00 00 00
 776+ E8B7 00 00 00 00
 776+ E8BB 00 3B FF 00
 776+ E8BF 00 00 00 3B
 776+ E8C3 FF 00 00 00
 776+ E8C7 00 00 00 00
 776+ E8CB 00 00 00 00
 776+ E8CF 00 00 00 00
 776+ E8D3 00 00 00 41
 776+ E8D7 FF 41 FF 41
 776+ E8DB FF 00 00 00
 776+ E8DF 00 00 00 3B
 776+ E8E3 FF 3B FF 00
 776+ E8E7 00 3B FF 00
 776+ E8EB 00 00 00 00
 777+ E8EF 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$3C, 	$FF
 777+ E8F3 00 00 00 00
 777+ E8F7 00 00 00 3B
 777+ E8FB FF 3B FF 00
 777+ E8FF 00 00 00 3C
 777+ E903 FF
 778+ E904 00 00 00 00  BlueDanube4:          DB 	$00, 	$00, 	$00, 	$00, 	$36, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$36, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$36, 	$36, 	$00, 	$00, 	$00, 	$36, 	$00, 	$36, 	$00, 	$00, 	$00, 	$36, 	$00, 	$3A, 	$00, 	$00, 	$00, 	$36, 	$00, 	$38, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3A, 	$00, 	$00
 778+ E908 36 00 00 36
 778+ E90C FF 36 FF 36
 778+ E910 FF 00 00 00
 778+ E914 36 00 00 36
 778+ E918 FF 36 FF 36
 778+ E91C FF 00 00 00
 778+ E920 36 36 00 00
 778+ E924 00 36 00 36
 778+ E928 00 00 00 36
 778+ E92C 00 3A 00 00
 778+ E930 00 36 00 38
 778+ E934 00 00 00 00
 778+ E938 00 36 00 00
 778+ E93C 00 00 00 00
 778+ E940 00 3A 00 00
 779+ E944 00 36 00 00                        DB	$00, 	$36, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00
 779+ E948 00 00 00 00
 779+ E94C 00 00 00 00
 779+ E950 00 00 00 00
 779+ E954 00 00 00 00
 779+ E958 00 00 00 36
 779+ E95C FF 36 FF FF
 779+ E960 FF FF FF FF
 779+ E964 FF FF FF FF
 779+ E968 FF FF 00 00
 779+ E96C 00 00 00 00
 779+ E970 00 00 36 FF
 779+ E974 36 FF FF FF
 779+ E978 FF FF FF FF
 779+ E97C FF FF FF FF
 779+ E980 00 00 00 00
 780+ E984 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$38, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$38, 	$FF, 	$38, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$38, 	$FF, 	$38, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$36, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00
 780+ E988 38 FF FF FF
 780+ E98C FF FF FF FF
 780+ E990 FF FF FF FF
 780+ E994 38 FF 38 FF
 780+ E998 00 00 00 00
 780+ E99C 00 00 00 00
 780+ E9A0 00 38 FF 38
 780+ E9A4 FF FF FF FF
 780+ E9A8 FF FF FF 00
 780+ E9AC 00 00 00 00
 780+ E9B0 00 00 00 00
 780+ E9B4 00 00 00 00
 780+ E9B8 00 36 36 FF
 780+ E9BC FF FF FF FF
 780+ E9C0 FF FF 00 00
 781+ E9C4 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$38, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$38, 	$FF, 	$38, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 781+ E9C8 00 00 00 00
 781+ E9CC 00 00 00 36
 781+ E9D0 FF 38 FF 00
 781+ E9D4 00 00 00 00
 781+ E9D8 00 00 00 00
 781+ E9DC 00 00 00 00
 781+ E9E0 00 00 00 00
 781+ E9E4 00 00 00 38
 781+ E9E8 FF 38 FF 00
 781+ E9EC 00 00 00 00
 781+ E9F0 00 00 00 36
 781+ E9F4 FF 00 00 36
 781+ E9F8 FF 36 FF 36
 781+ E9FC FF 00 00 00
 781+ EA00 00 00 00 00
 782+ EA04 00 00 00 38                        DB	$00, 	$00, 	$00, 	$38, 	$FF, 	$00, 	$00, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 782+ EA08 FF 00 00 36
 782+ EA0C FF 00 00 00
 782+ EA10 00 00 00 00
 782+ EA14 00 00 00 00
 782+ EA18 00
 783+ EA19 00 00 00 00  BlueDanube5:          DB 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$34, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$00, 	$34, 	$00, 	$00, 	$00, 	$31
 783+ EA1D 00 00 00 00
 783+ EA21 00 00 00 00
 783+ EA25 00 00 00 00
 783+ EA29 00 00 00 00
 783+ EA2D 00 00 00 00
 783+ EA31 00 00 00 00
 783+ EA35 00 00 00 00
 783+ EA39 00 00 00 00
 783+ EA3D 00 00 00 00
 783+ EA41 00 00 00 00
 783+ EA45 00 00 00 00
 783+ EA49 00 00 00 34
 783+ EA4D 00 00 00 00
 783+ EA51 00 33 00 34
 783+ EA55 00 00 00 31
 784+ EA59 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$34, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 784+ EA5D 00 00 00 34
 784+ EA61 00 00 00 00
 784+ EA65 00 31 00 00
 784+ EA69 00 00 00 00
 784+ EA6D 00 33 FF 00
 784+ EA71 00 33 FF 00
 784+ EA75 00 00 00 00
 784+ EA79 00 00 00 00
 784+ EA7D 00 00 00 00
 784+ EA81 00 00 00 00
 784+ EA85 33 FF 00 00
 784+ EA89 31 FF 00 00
 784+ EA8D 00 00 00 00
 784+ EA91 00 00 00 00
 784+ EA95 00 00 00 00
 785+ EA99 00 00 31 FF                        DB	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$31, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$33, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$33, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$33
 785+ EA9D 00 00 31 00
 785+ EAA1 00 00 00 00
 785+ EAA5 00 00 00 00
 785+ EAA9 00 00 31 FF
 785+ EAAD 00 00 00 00
 785+ EAB1 00 00 00 31
 785+ EAB5 FF 00 00 33
 785+ EAB9 FF FF FF FF
 785+ EABD FF FF FF 00
 785+ EAC1 00 00 00 00
 785+ EAC5 00 00 00 00
 785+ EAC9 00 00 00 33
 785+ EACD FF 00 33 FF
 785+ EAD1 FF FF FF FF
 785+ EAD5 FF FF 00 33
 786+ EAD9 FF 33 FF 00                        DB	$FF, 	$33, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$34, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$FF, 	$31, 	$FF, 	$34, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$35, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$33, 	$FF, 	$00
 786+ EADD 00 00 00 00
 786+ EAE1 00 33 FF 00
 786+ EAE5 00 34 FF 00
 786+ EAE9 00 00 00 00
 786+ EAED 00 00 00 00
 786+ EAF1 00 00 00 00
 786+ EAF5 00 31 FF 31
 786+ EAF9 FF 34 FF 00
 786+ EAFD 00 00 00 00
 786+ EB01 00 00 00 00
 786+ EB05 00 35 FF 00
 786+ EB09 00 00 00 00
 786+ EB0D 00 00 00 00
 786+ EB11 00 00 00 33
 786+ EB15 FF 33 FF 00
 787+ EB19 00 31 FF 00                        DB	$00, 	$31, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 787+ EB1D 00 00 00 00
 787+ EB21 00 00 00 00
 787+ EB25 00 00 00 00
 787+ EB29 00 00 00 00
 787+ EB2D 00
 788+ EB2E 00 00 00 00  BlueDanube6:          DB 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 788+ EB32 00 00 00 00
 788+ EB36 00 00 00 00
 788+ EB3A 00 00 00 00
 788+ EB3E 00 00 00 00
 788+ EB42 00 00 00 00
 788+ EB46 00 00 00 00
 788+ EB4A 00 00 00 00
 788+ EB4E 00 00 00 00
 788+ EB52 00 00 00 00
 788+ EB56 00 00 00 00
 788+ EB5A 00 00 00 00
 788+ EB5E 00 00 00 00
 788+ EB62 00 00 00 00
 788+ EB66 00 00 00 00
 788+ EB6A 00 00 00 00
 789+ EB6E 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$2A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2A, 	$FF
 789+ EB72 00 00 00 00
 789+ EB76 00 00 00 00
 789+ EB7A 00 00 00 00
 789+ EB7E 00 00 00 2B
 789+ EB82 FF 00 00 00
 789+ EB86 00 2B FF 00
 789+ EB8A 00 00 00 00
 789+ EB8E 00 00 00 00
 789+ EB92 00 00 00 00
 789+ EB96 2B FF 2B FF
 789+ EB9A 00 00 00 00
 789+ EB9E 2A FF 00 00
 789+ EBA2 00 00 00 00
 789+ EBA6 00 00 00 00
 789+ EBAA 00 00 2A FF
 790+ EBAE 2A FF 00 00                        DB	$2A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2A, 	$FF, 	$2A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 790+ EBB2 00 00 00 00
 790+ EBB6 00 00 00 00
 790+ EBBA 00 00 00 00
 790+ EBBE 00 00 00 00
 790+ EBC2 00 00 00 2A
 790+ EBC6 FF 2A FF 00
 790+ EBCA 00 00 00 2B
 790+ EBCE FF FF FF FF
 790+ EBD2 FF FF FF 00
 790+ EBD6 00 00 00 00
 790+ EBDA 00 00 00 2B
 790+ EBDE FF 2B FF 00
 790+ EBE2 00 00 00 00
 790+ EBE6 00 00 00 00
 790+ EBEA 00 00 00 00
 791+ EBEE 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 791+ EBF2 00 2B FF 2B
 791+ EBF6 FF 00 00 00
 791+ EBFA 00 00 00 00
 791+ EBFE 00 00 00 00
 791+ EC02 00 00 00 00
 791+ EC06 00 00 00 00
 791+ EC0A 00 00 00 00
 791+ EC0E 00 00 00 00
 791+ EC12 00 00 00 00
 791+ EC16 00 00 00 00
 791+ EC1A 00 00 00 00
 791+ EC1E 00 2B FF 00
 791+ EC22 00 00 00 00
 791+ EC26 00 00 00 00
 791+ EC2A 00 00 00 00
 792+ EC2E 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 792+ EC32 00 00 00 00
 792+ EC36 00 2B FF 00
 792+ EC3A 00 00 00 00
 792+ EC3E 00 00 00 00
 792+ EC42 00
 793+ EC43
# file closed: ./Hardware/sound.asm
1669  EC43                                  DISPLAY "Sound ",BankSound," - Bytes free ",/D, $2000 - ($-SoundAddr), " - BankSound"
1670  EC43                                  ASSERT $-SoundAddr <8912, Bank code leaks over 8K boundary
1671  EC43               ; Bank 102  -----------------------------------------------------------------------------------------------------------------------
1672  EC43                                  SLOT    MathsBankedFnsAddr
1673  EC43                                  PAGE    BankMathsBankedFns
1674  EC43                                  ORG     MathsBankedFnsAddr,BankMathsBankedFns
1675  0000                                  INCLUDE "./Maths/MathsBankedFns.asm"
# file opened: ./Maths/MathsBankedFns.asm
   1+ 0000
   2+ 0000              ; Adds DE to HL, in form S15 result will also be S15 rather than 2's C
   3+ 0000 7C           AddDEtoHLSigned:        ld      a,h                         ; extract h sign to b
   4+ 0001 E6 80                                and     $80                         ; hl = abs (hl)
   5+ 0003 47                                   ld      b,a
   6+ 0004 7C                                   ld      a,h
   7+ 0005 E6 7F                                and     $7F
   8+ 0007 67                                   ld      h,a
   9+ 0008 7A                                   ld      a,d                         ; extract d sign to c
  10+ 0009 E6 80                                and     $80                         ; de = abs (de)
  11+ 000B 4F                                   ld      c,a
  12+ 000C 7A                                   ld      a,d
  13+ 000D E6 7F                                and     $7F
  14+ 000F 57                                   ld      d,a
  15+ 0010 78                                   ld      a,b
  16+ 0011 A9                                   xor     c
  17+ 0012 C2 1A 00                             jp      nz,.OppositeSigns
  18+ 0015 19           .SameSigns              add     hl,de                       ; same signs so just add
  19+ 0016 78                                   ld      a,b                         ; and bring in the sign from b
  20+ 0017 B4                                   or      h                           ; note this has to be 15 bit result
  21+ 0018 67                                   ld      h,a                         ; but we can assume that
  22+ 0019 C9                                   ret
  23+ 001A              .OppositeSigns:         ClearCarryFlag
  23+ 001A B7          >                        or a
  24+ 001B ED 52                                sbc     hl,de
  25+ 001D 38 04                                jr      c,.OppsiteSignInvert
  26+ 001F 78           .OppositeSignNoInvert:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  27+ 0020 B4                                   or      h
  28+ 0021 67                                   ld      h,a                         ; set the previou sign value
  29+ 0022 C9                                   ret
  30+ 0023              .OppsiteSignInvert:     NegHL                              ; we need to flip the sign and 2'c the Hl result
  30+ 0023 AF          >                    xor a
  30+ 0024 95          >                    sub l
  30+ 0025 6F          >                    ld l,a
  30+ 0026 9F          >                    sbc a,a
  30+ 0027 94          >                    sub h
  30+ 0028 67          >                    ld h,a
  31+ 0029 78                                   ld      a,b
  32+ 002A EE 80                                xor     SignOnly8Bit               ; flip sign bit
  33+ 002C B4                                   or      h
  34+ 002D 67                                   ld      h,a                         ; recover sign
  35+ 002E C9                                   ret
  36+ 002F
  37+ 002F 78           ADDHLDESignBC:          ld      a,b
  38+ 0030 E6 80                                and     SignOnly8Bit
  39+ 0032 A9                                   xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
  40+ 0033                                      JumpIfNegative .ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
  40+ 0033 FA 41 00    >                        jp		m, .ADDHLDEsBCOppSGN
  41+ 0036 78           .ADDHLDEsBCSameSigns:   ld      a,b
  42+ 0037 B1                                   or      c
  43+ 0038                                      JumpIfNegative .ADDHLDEsBCSameNeg    ; optimisation so we can just do simple add if both positive
  43+ 0038 FA 3D 00    >                        jp		m, .ADDHLDEsBCSameNeg
  44+ 003B 19                                   add     hl,de                       ; both positive so a will already be zero
  45+ 003C C9                                   ret
  46+ 003D 19           .ADDHLDEsBCSameNeg:      add     hl,de
  47+ 003E 78                                   ld      a,b
  48+ 003F                                      DISPLAY "TODO: don't bother with overflow for now"
  49+ 003F B1                                   or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
  50+ 0040 C9                                   ret
  51+ 0041              .ADDHLDEsBCOppSGN:       ClearCarryFlag
  51+ 0041 B7          >                        or a
  52+ 0042 ED 52                                sbc     hl,de
  53+ 0044 38 02                                jr      c,.ADDHLDEsBCOppInvert
  54+ 0046 78           .ADDHLDEsBCOppSGNNoCarry:ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  55+ 0047 C9                                   ret
  56+ 0048              .ADDHLDEsBCOppInvert:   NegHL                               ; if result was zero then set sign to zero (which doing h or l will give us for free)
  56+ 0048 AF          >                    xor a
  56+ 0049 95          >                    sub l
  56+ 004A 6F          >                    ld l,a
  56+ 004B 9F          >                    sbc a,a
  56+ 004C 94          >                    sub h
  56+ 004D 67          >                    ld h,a
  57+ 004E 78                                   ld      a,b
  58+ 004F EE 80                                xor     SignOnly8Bit                ; flip sign bit
  59+ 0051 C9                                   ret
  60+ 0052
  61+ 0052 7C           ADDHLDESignedV4:        ld      a,h
  62+ 0053 E6 80                                and     SignOnly8Bit
  63+ 0055 47                                   ld      b,a                         ;save sign bit in b
  64+ 0056 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  65+ 0057                                      JumpIfNegative .ADDHLDEOppSGN       ;Signs are opposite there fore we can subtract to get difference
  65+ 0057 FA 6F 00    >                        jp		m, .ADDHLDEOppSGN
  66+ 005A 78           .ADDHLDESameSigns:      ld      a,b
  67+ 005B B2                                   or      d
  68+ 005C                                      JumpIfNegative .ADDHLDESameNeg      ; optimisation so we can just do simple add if both positive
  68+ 005C FA 61 00    >                        jp		m, .ADDHLDESameNeg
  69+ 005F 19                                   add     hl,de
  70+ 0060 C9                                   ret
  71+ 0061 7C           .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  72+ 0062 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  73+ 0064 67                                   ld      h,a
  74+ 0065 7A                                   ld      a,d
  75+ 0066 E6 7F                                and     SignMask8Bit
  76+ 0068 57                                   ld      d,a
  77+ 0069 19                                   add     hl,de
  78+ 006A 3E 80                                ld      a,SignOnly8Bit
  79+ 006C                                      DISPLAY "TODO:  dont bother with overflow for now"
  80+ 006C B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  81+ 006D 67                                   ld      h,a
  82+ 006E C9                                   ret
  83+ 006F 7C           .ADDHLDEOppSGN:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  84+ 0070 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  85+ 0072 67                                   ld      h,a
  86+ 0073 7A                                   ld      a,d
  87+ 0074 E6 7F                                and     SignMask8Bit
  88+ 0076 57                                   ld      d,a
  89+ 0077                                      ClearCarryFlag
  89+ 0077 B7          >                        or a
  90+ 0078 ED 52                                sbc     hl,de
  91+ 007A 38 04                                jr      c,.ADDHLDEOppInvert
  92+ 007C 78           .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  93+ 007D B4                                   or      h
  94+ 007E 67                                   ld      h,a                         ; set the previou sign value
  95+ 007F C9                                   ret
  96+ 0080              .ADDHLDEOppInvert:      NegHL                                                   ; we need to flip the sign and 2'c the Hl result
  96+ 0080 AF          >                    xor a
  96+ 0081 95          >                    sub l
  96+ 0082 6F          >                    ld l,a
  96+ 0083 9F          >                    sbc a,a
  96+ 0084 94          >                    sub h
  96+ 0085 67          >                    ld h,a
  97+ 0086 78                                   ld      a,b
  98+ 0087 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  99+ 0089 B4                                   or      h
 100+ 008A 67                                   ld      h,a                         ; recover sign
 101+ 008B C9                                   ret
 102+ 008C
 103+ 008C              ; extension to AddBCHtoDELsigned
 104+ 008C              ; takes ix as the address of the values to load into DEL
 105+ 008C              ;       iy as the address of the values to load into BCH
 106+ 008C DD 56 00     AddAtIXtoAtIY24Signed:  ld      d,(ix+0)            ; del = ix (sign hi lo)
 107+ 008F DD 5E 01                             ld      e,(ix+1)            ; .
 108+ 0092 DD 6E 02                             ld      l,(ix+2)            ; .
 109+ 0095 FD 66 00                             ld      h,(iy+0)            ; bch = iy (sign, hi, lo)
 110+ 0098 FD 4E 01                             ld      c,(iy+1)            ; .
 111+ 009B FD 46 02                             ld      b,(iy+2)            ; .
 112+ 009E FD E5                                push    iy                  ; save iy as add function changes is
 113+ 00A0 CD F2 00                             call    AddBCHtoDELsigned   ; Perform del += bch
 114+ 00A3 FD E1                                pop     iy                  ; get iy back
 115+ 00A5 DD 72 00                             ld      (ix+0),d            ; put result into (ix)
 116+ 00A8 DD 73 01                             ld      (ix+1),e            ; .
 117+ 00AB DD 75 02                             ld      (ix+2),l            ; .
 118+ 00AE C9                                   ret
 119+ 00AF              ; extension to AddBCHtoDELsigned
 120+ 00AF              ; takes ix as the address of the values to load into DEL
 121+ 00AF              ;       iy as the address of the values to load into BCH
 122+ 00AF              ; subtracts iy from ix putting result in ix
 123+ 00AF DD 56 00     SubAtIXtoAtIY24Signed:  ld      d,(ix+0)            ; del = ix (sign hi lo)
 124+ 00B2 DD 5E 01                             ld      e,(ix+1)            ; .
 125+ 00B5 DD 6E 02                             ld      l,(ix+2)            ; .
 126+ 00B8 DD 66 00                             ld      h,(ix+0)            ; bch = -iy (sign, hi, lo)
 127+ 00BB DD 4E 01                             ld      c,(ix+1)            ; .
 128+ 00BE DD 7E 02                             ld      a,(ix+2)            ; .
 129+ 00C1 EE 80                                xor     SignOnly8Bit        ; . this is where we flip sign to make add subtract
 130+ 00C3 47                                   ld      b,a                 ; .
 131+ 00C4 FD E5                                push    iy                  ; save iy as add function changes is
 132+ 00C6 CD F2 00                             call    AddBCHtoDELsigned   ; perform del += bch which as we flipped bch sign means (ix [210] -= iy [210])
 133+ 00C9 FD E1                                pop     iy                  ; get iy back
 134+ 00CB DD 72 00                             ld      (ix+0),d            ; put result into (ix)
 135+ 00CE DD 73 01                             ld      (ix+1),e            ; .
 136+ 00D1 DD 75 02                             ld      (ix+2),l            ; .
 137+ 00D4 C9                                   ret
 138+ 00D5
 139+ 00D5              ; extension to AddBCHtoDELsigned
 140+ 00D5              ; takes ix as the address of the values to load into DEL
 141+ 00D5              ;       iy as the address of the values to load into BCH
 142+ 00D5              ; subtracts iy from ix leaving result in del
 143+ 00D5 DD 56 00     SubDELequAtIXtMinusAtIY24Signed:  ld      d,(ix+0)            ; del = ix (sign hi lo)
 144+ 00D8 DD 5E 01                             ld      e,(ix+1)            ; .
 145+ 00DB DD 6E 02                             ld      l,(ix+2)            ; .
 146+ 00DE DD 66 00                             ld      h,(ix+0)            ; bch = -iy (sign, hi, lo)
 147+ 00E1 DD 4E 01                             ld      c,(ix+1)            ; .
 148+ 00E4 DD 7E 02                             ld      a,(ix+2)            ; .
 149+ 00E7 EE 80                                xor     SignOnly8Bit        ; . this is where we flip sign to make add subtract
 150+ 00E9 47                                   ld      b,a                 ; .
 151+ 00EA FD E5                                push    iy                  ; save iy as add function changes is
 152+ 00EC CD F2 00                             call    AddBCHtoDELsigned   ; perform del += bch which as we flipped bch sign means (ix [210] -= iy [210])
 153+ 00EF FD E1                                pop     iy                  ; get iy back
 154+ 00F1 C9                                   ret
 155+ 00F2
 156+ 00F2
 157+ 00F2              ;tested mathstestsun2
 158+ 00F2              ; DEL = DEL + BCH signed, uses BC, DE, HL, IY, A
 159+ 00F2
 160+ 00F2 78           AddBCHtoDELsigned:      ld      a,b                 ; Are the values both the same sign?
 161+ 00F3 AA                                   xor     d                   ; .
 162+ 00F4 E6 80                                and     SignOnly8Bit        ; .
 163+ 00F6 20 19                                jr      nz,.SignDifferent   ; .
 164+ 00F8 78           .SignSame:              ld      a,b                 ; if they are then we only need 1 signe
 165+ 00F9 E6 80                                and     SignOnly8Bit        ; so store it in iyh
 166+ 00FB FD 67                                ld      iyh,a               ;
 167+ 00FD 78                                   ld      a,b                 ; bch = abs bch
 168+ 00FE E6 7F                                and     SignMask8Bit        ; .
 169+ 0100 47                                   ld      b,a                 ; .
 170+ 0101 7A                                   ld      a,d                 ; del = abs del
 171+ 0102 E6 7F                                and     SignMask8Bit        ; .
 172+ 0104 57                                   ld      d,a                 ; .
 173+ 0105 7C                                   ld      a,h                 ; l = h + l
 174+ 0106 85                                   add     l                   ; .
 175+ 0107 6F                                   ld      l,a                 ; .
 176+ 0108 79                                   ld      a,c                 ; e = e + c + carry
 177+ 0109 8B                                   adc     e                   ; .
 178+ 010A 5F                                   ld      e,a                 ; .
 179+ 010B 78                                   ld      a,b                 ; d = b + d + carry (signed)
 180+ 010C 8A                                   adc     d                   ;
 181+ 010D FD B4                                or      iyh                 ; d = or back in sign bit
 182+ 010F 57                                   ld      d,a                 ;
 183+ 0110 C9                                   ret                         ; done
 184+ 0111 78           .SignDifferent:         ld      a,b                 ; bch = abs bch
 185+ 0112 FD 67                                ld      iyh,a               ; iyh = b sign
 186+ 0114 E6 7F                                and     SignMask8Bit        ; .
 187+ 0116 47                                   ld      b,a                 ; .
 188+ 0117 7A                                   ld      a,d                 ; del = abs del
 189+ 0118 FD 6F                                ld      iyl,a               ; iyl = d sign
 190+ 011A E6 7F                                and     SignMask8Bit        ; .
 191+ 011C 57                                   ld      d,a                 ; .
 192+ 011D E5                                   push    hl                  ; save hl
 193+ 011E 60 69                                ld      hl,bc               ; hl = bc - de, if bc < de then there is a carry
 194+ 0120 ED 52                                sbc     hl,de               ;
 195+ 0122 E1                                   pop     hl                  ;
 196+ 0123 38 0E                                jr      c,.BCHltDEL
 197+ 0125 20 1C                                jr      nz,.DELltBCH        ; if the result was not zero then DEL > BCH
 198+ 0127 7C           .BCeqDE:                ld      a,h                 ; if the result was zero then check lowest bits
 199+ 0128                                      JumpIfALTNusng l,.BCHltDEL
 199+ 0128 BD          >                        cp      l
 199+ 0129 DA 33 01    >                        jp		c, .BCHltDEL
 200+ 012C 20 15                                jr      nz,.DELltBCH
 201+ 012E              ; The same so its just zero
 202+ 012E AF           .BCHeqDEL:              xor     a                  ; its just zero
 203+ 012F 57                                   ld      d,a                ; .
 204+ 0130 5F                                   ld      e,a                ; .
 205+ 0131 6F                                   ld      l,a                ; .
 206+ 0132 C9                                   ret                        ; .
 207+ 0133              ;BCH is less than DEL so its DEL - BCH the sort out sign
 208+ 0133 7D           .BCHltDEL:              ld      a,l                ; l = l - h                      ; ex
 209+ 0134 94                                   sub     h                  ; .                              ;   01D70F DEL
 210+ 0135 6F                                   ld      l,a                ; .                              ;  -000028 BCH
 211+ 0136 7B                                   ld      a,e                ; e = e - c - carry              ;1.
 212+ 0137 99                                   sbc     c                  ; .                              ;
 213+ 0138 5F                                   ld      e,a                ; .                              ;
 214+ 0139 7A                                   ld      a,d                ; d = d - b - carry              ;
 215+ 013A 98                                   sbc     b                  ; .                              ;
 216+ 013B 57                                   ld      d,a                ; .                              ;
 217+ 013C FD 7D                                ld      a,iyl              ; as d was larger, take d sign
 218+ 013E E6 80                                and     SignOnly8Bit       ;
 219+ 0140 B2                                   or      d                  ;
 220+ 0141 57                                   ld      d,a                ;
 221+ 0142 C9                                   ret
 222+ 0143 7C           .DELltBCH:              ld      a,h                ; l = h - l
 223+ 0144 95                                   sub     l                  ;
 224+ 0145 6F                                   ld      l,a                ;
 225+ 0146 79                                   ld      a,c                ; e = c - e - carry
 226+ 0147 9B                                   sbc     e                  ;
 227+ 0148 5F                                   ld      e,a                ;
 228+ 0149 78                                   ld      a,b                ; d = b - d - carry
 229+ 014A 9A                                   sbc     d                  ;
 230+ 014B 57                                   ld      d,a                ;
 231+ 014C FD 7C                                ld      a,iyh              ; as b was larger, take b sign into d
 232+ 014E E6 80                                and     SignOnly8Bit       ;
 233+ 0150 B2                                   or      d                  ;
 234+ 0151 57                                   ld      d,a                ;
 235+ 0152 C9                                   ret
 236+ 0153              ;-----------------------------------------------------------------------------------------------------------
 237+ 0153              ; Subtract Functions
 238+ 0153              ;...subtract routines
 239+ 0153              ; we could cheat, flip the sign of DE and just add but its not very optimised
 240+ 0153 7C           subHLDES15:             ld      a,h
 241+ 0154 E6 80                                and     SignOnly8Bit
 242+ 0156 47                                   ld      b,a                         ;save sign bit in b
 243+ 0157 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 244+ 0158                                      JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 244+ 0158 FA 86 01    >                        jp		m, .SUBHLDEOppSGN
 245+ 015B 78           .SUBHLDESameSigns:      ld      a,b
 246+ 015C B2                                   or      d
 247+ 015D                                      JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 247+ 015D FA 67 01    >                        jp		m, .SUBHLDESameNeg
 248+ 0160                                      ClearCarryFlag
 248+ 0160 B7          >                        or a
 249+ 0161 ED 52                                sbc     hl,de
 250+ 0163                                      JumpIfNegative .SUBHLDESameOvrFlw
 250+ 0163 FA 7A 01    >                        jp		m, .SUBHLDESameOvrFlw
 251+ 0166 C9                                   ret
 252+ 0167 7C           .SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 253+ 0168 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 254+ 016A 67                                   ld      h,a
 255+ 016B 7A                                   ld      a,d
 256+ 016C E6 7F                                and     SignMask8Bit
 257+ 016E 57                                   ld      d,a
 258+ 016F                                      ClearCarryFlag
 258+ 016F B7          >                        or a
 259+ 0170 ED 52                                sbc     hl,de
 260+ 0172                                      JumpIfNegative .SUBHLDESameOvrFlw
 260+ 0172 FA 7A 01    >                        jp		m, .SUBHLDESameOvrFlw
 261+ 0175                                                          DISPLAY "TODO:  don't bother with overflow for now"
 262+ 0175 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 263+ 0176 F6 80                                or      SignOnly8Bit
 264+ 0178 67                                   ld      h,a
 265+ 0179 C9                                   ret
 266+ 017A              .SUBHLDESameOvrFlw:     NegHL
 266+ 017A AF          >                    xor a
 266+ 017B 95          >                    sub l
 266+ 017C 6F          >                    ld l,a
 266+ 017D 9F          >                    sbc a,a
 266+ 017E 94          >                    sub h
 266+ 017F 67          >                    ld h,a
 267+ 0180 78                                   ld      a,b
 268+ 0181 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 269+ 0183 B4                                   or      h
 270+ 0184 67                                   ld      h,a                         ; recover sign
 271+ 0185 C9                                   ret
 272+ 0186 B7           .SUBHLDEOppSGN:         or      a
 273+ 0187 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 274+ 0188 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 275+ 018A 67                                   ld      h,a
 276+ 018B 7A                                   ld      a,d
 277+ 018C E6 7F                                and     SignMask8Bit
 278+ 018E 57                                   ld      d,a
 279+ 018F 19                                   add     hl,de
 280+ 0190 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 281+ 0191 B4                                   or      h
 282+ 0192 67                                   ld      h,a                         ; set the previou sign value
 283+ 0193 C9                                   ret
 284+ 0194              ;------------------------------------------------------------------------------------------------
 285+ 0194              ;-- checks to see if a postition is in range of another, e.g. missile hit
 286+ 0194              ;-- ix = ship position    - pointer to xyz vector as 3 bytes per element
 287+ 0194              ;-- oy = misisle position - pointer to xyz vector as 3 bytes per element
 288+ 0194              ;-- sets carry if in blast range, else not carry
 289+ 0194              ;-- blast range will always be an 8 bit value
 290+ 0194              CheckInCollisionRange:
 291+ 0194 CD D5 00     .CheckXDistance:        call    SubDELequAtIXtMinusAtIY24Signed ; get distance between x coordinates
 292+ 0197 7A                                   ld      a,d                 ; check abs distance
 293+ 0198 E6 7F                                and     SignMask8Bit        ; if high bytes are set
 294+ 019A B3                                   or      e                   ; then no hit
 295+ 019B C2 DA 01                             jp      nz,.NoCollision     ; if high bytes are set no collision
 296+ 019E 7D                                   ld      a,l
 297+ 019F                                      JumpIfAGTEMemusng  CurrentMissileBlastRange ,.NoCollision
 297+ 019F 21 96 7F    >                        ld      hl,CurrentMissileBlastRange
 297+ 01A2 BE          >                        cp      (hl)
 297+ 01A3 D2 DA 01    >                        jp		nc,.NoCollision
 298+ 01A6 01 03 00     .CheckYDistance:        ld      bc,3                ; move ix and iy
 299+ 01A9 DD 09                                add     ix,bc               ; on 3 bytes
 300+ 01AB FD 09                                add     iy,bc               ;
 301+ 01AD CD D5 00                             call    SubDELequAtIXtMinusAtIY24Signed ; get distance between x coordinates
 302+ 01B0 7A                                   ld      a,d                 ; check abs distance
 303+ 01B1 E6 7F                                and     SignMask8Bit        ; if high bytes are set
 304+ 01B3 B3                                   or      e                   ; then no hit
 305+ 01B4 C2 DA 01                             jp      nz,.NoCollision     ; if high bytes are set no collision
 306+ 01B7 7D                                   ld      a,l
 307+ 01B8                                      JumpIfAGTEMemusng  CurrentMissileBlastRange ,.NoCollision
 307+ 01B8 21 96 7F    >                        ld      hl,CurrentMissileBlastRange
 307+ 01BB BE          >                        cp      (hl)
 307+ 01BC D2 DA 01    >                        jp		nc,.NoCollision
 308+ 01BF 01 03 00     .CheckZDistance:        ld      bc,3                ; move ix and iy
 309+ 01C2 DD 09                                add     ix,bc               ; on 3 bytes
 310+ 01C4 FD 09                                add     iy,bc               ;
 311+ 01C6 CD D5 00                             call    SubDELequAtIXtMinusAtIY24Signed ; get distance between x coordinates
 312+ 01C9 7A                                   ld      a,d                 ; check abs distance
 313+ 01CA E6 7F                                and     SignMask8Bit        ; if high bytes are set
 314+ 01CC B3                                   or      e                   ; then no hit
 315+ 01CD C2 DA 01                             jp      nz,.NoCollision     ; if high bytes are set no collision
 316+ 01D0 7D                                   ld      a,l
 317+ 01D1                                      JumpIfAGTEMemusng  CurrentMissileBlastRange ,.NoCollision
 317+ 01D1 21 96 7F    >                        ld      hl,CurrentMissileBlastRange
 317+ 01D4 BE          >                        cp      (hl)
 317+ 01D5 D2 DA 01    >                        jp		nc,.NoCollision
 318+ 01D8              .CollisionDetected:     SetCarryFlag                ; collision in blast range
 318+ 01D8 37          >                        scf
 319+ 01D9 C9                                   ret
 320+ 01DA              .NoCollision:           ClearCarryFlag              ; no collision in blast range
 320+ 01DA B7          >                        or a
 321+ 01DB C9                                   ret
 322+ 01DC
 323+ 01DC
# file closed: ./Maths/MathsBankedFns.asm
1676  01DC                                  DISPLAY "Bank ",MathsBankedFnsAddr," - Bytes free ",/D, $2000 - ($-MathsBankedFnsAddr), " - BankMathsBankedAdd"
1677  01DC                                  ASSERT $-MathsBankedFnsAddr <8912, Bank code leaks over 8K boundary
1678  01DC
1679  01DC                  SAVENEX OPEN "EliteN.nex", EliteNextStartup , TopOfStack
1680  01DC                  SAVENEX CFG  0,0,0,1
1681  01DC                  SAVENEX AUTO
1682  01DC                  SAVENEX CLOSE
1683  01DC                  DISPLAY "Main Non Banked Code End ", MainNonBankedCodeEnd , " Bytes free ", 0B000H - MainNonBankedCodeEnd
1684  01DC                  ASSERT MainNonBankedCodeEnd < 0B000H, Program code leaks intot interrup vector table
1685  01DC
# file closed: eliteNext.asm
