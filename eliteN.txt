# file opened: eliteNext.asm
   1  0000               DEVICE ZXSPECTRUMNEXT
   2  0000               DEFINE  DOUBLEBUFFER 1
   3  0000               CSPECTMAP eliteN.map
   4  0000               OPT --zxnext=cspect --syntax=a --reversepop
   5  0000
   6  0000              DEBUGSEGSIZE   equ 1
   7  0000              DEBUGLOGSUMMARY equ 1
   8  0000              ;DEBUGLOGDETAIL equ 1
   9  0000
  10  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  11  0000              ; Game Defines
  12  0000              ScreenLocal      EQU 0
  13  0000              ScreenGalactic   EQU ScreenLocal + 1
  14  0000              ScreenMarket     EQU ScreenGalactic + 1
  15  0000              ScreenMarketDsp  EQU ScreenMarket + 1
  16  0000              ScreenStatus     EQU ScreenMarketDsp + 1
  17  0000              ScreenInvent     EQU ScreenStatus + 1
  18  0000              ScreenPlanet     EQU ScreenInvent + 1
  19  0000              ScreenEquip      EQU ScreenPlanet + 1
  20  0000              ScreenLaunch     EQU ScreenEquip + 1
  21  0000              ScreenFront      EQU ScreenLaunch + 1
  22  0000              ScreenAft        EQU ScreenFront+1
  23  0000              ScreenLeft       EQU ScreenAft+1
  24  0000              ScreenRight      EQU ScreenLeft+1
  25  0000              ScreenDocking    EQU ScreenRight+1
  26  0000              ScreenHyperspace EQU ScreenDocking+1
  27  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  28  0000              ; Colour Defines
  29  0000                  INCLUDE "./Hardware/L2ColourDefines.asm"
# file opened: ./Hardware/L2ColourDefines.asm
   1+ 0000              L2ColourBLACK           EQU   0
   2+ 0000              L2ColourRED_1           EQU 224                 ; RGB 255,  0,  0
   3+ 0000              L2ColourRED_2           EQU 192                 ; RGB 218,  0,  0
   4+ 0000              L2ColourRED_3           EQU 160                 ; RGB 182,  0,  0
   5+ 0000              L2ColourRED_4           EQU 128                 ; RGB 145,  0,  0
   6+ 0000              L2ColourRED_5           EQU  96                 ; RGB 109,  0,  0
   7+ 0000              L2ColourRED_6           EQU  64                 ; RGB  72,  0,  0
   8+ 0000              L2ColourRED_7           EQU  32                 ; RGB  36,  0,  0
   9+ 0000              L2ColourYELLOW_1        EQU 252                 ; RGB 255,255,  0
  10+ 0000              L2ColourYELLOW_2        EQU 216                 ; RGB 218,218,  0
  11+ 0000              L2ColourYELLOW_3        EQU 180                 ; RGB 182,182,  0
  12+ 0000              L2ColourYELLOW_4        EQU 144                 ; RGB 145,145,  0
  13+ 0000              L2ColourYELLOW_5        EQU 108                 ; RGB 109.109,  0
  14+ 0000              L2ColourYELLOW_6        EQU  72                 ; RGB  72, 72,  0
  15+ 0000              L2ColourYELLOW_7        EQU  36                 ; RGB  36, 36,  0
  16+ 0000              L2ColourGREEN_1		    EQU  28                 ; RGB   0,255,  0
  17+ 0000              L2ColourGREEN_2		    EQU  24                 ; RGB   0,218,  0
  18+ 0000              L2ColourGREEN_3		    EQU  16                 ; RGB   0,145,  0
  19+ 0000              L2ColourGREEN_4         EQU  12                 ; RGB   0,109,  0
  20+ 0000              L2ColourGREEN_5         EQU   8                 ; RGB   0, 72,  0
  21+ 0000              L2ColourGREEN_6         EQU   4                 ; RGB   0, 36,  0
  22+ 0000              L2ColourBLUE_1          EQU   3                 ; RGB 0,0,255
  23+ 0000              L2ColourBLUE_2          EQU   2                 ; RGB 0,0,170
  24+ 0000              L2ColourBLUE_3          EQU   1                 ; RGB 0,0,85
  25+ 0000
  26+ 0000
  27+ 0000              L2ColourWHITE_1         EQU 255                 ; RGB 255,255,255
  28+ 0000              L2ColourWHITE_2         EQU 146
  29+ 0000              L2ColourGREY_1		    EQU L2ColourWHITE_2
  30+ 0000              L2ColourGREY_2		    EQU 109
  31+ 0000              L2ColourGREY_3		    EQU  73
  32+ 0000              L2ColourGREY_4		    EQU  37
  33+ 0000
  34+ 0000              L2ColourGREEN_MB        EQU  29                 ;RGB 0,255,85
  35+ 0000              L2ColourGREEN_MR        EQU 124                 ;RGB 109.255,0
  36+ 0000              L2ColourCREAM_1         EQU 218                 ; RGB 218,218,170
  37+ 0000              L2ColourCREAM_2         EQU 182                 ; RGB 182,182,170
  38+ 0000              L2ColourCREAM_3         EQU 146                 ; RGB 145,145,170
  39+ 0000
  40+ 0000              L2ColourTRANSPARENT     EQU 227                 ; RGB 255,  0,255
  41+ 0000              L2ColourMAGENTA_1       EQU 162                 ; RGB 182,  0,170
  42+ 0000              L2ColourMAGENTA_2       EQU 130                 ; RGB 145,  0,170
  43+ 0000              L2ColourMAGENTA_3       EQU  97                 ; RGB 109,  0, 85
  44+ 0000              L2ColourMAGENTA_4       EQU  65                 ; RGB  72,  0, 85
  45+ 0000              L2ColourORANGE_1        EQU 236                 ; RGB
  46+ 0000              L2ColourORANGE_2        EQU 168                 ; RGB
  47+ 0000              L2ColourORANGE_3        EQU  68                 ; RGB
  48+ 0000              L2ColourCYAN_1          EQU  31                 ; RGB   0,255, 255
  49+ 0000              L2ColourCYAN_2          EQU  18                 ; RGB
  50+ 0000              L2ColourCYAN_3          EQU   9                 ; RGB
  51+ 0000              L2ColourPURPLE_1        EQU 109                 ; RGB
  52+ 0000              L2ColourPURPLE_2        EQU  66                 ; RGB
  53+ 0000              L2ColourPURPLE_3        EQU  33                 ; RGB
  54+ 0000              L2ColourPINK_1		    EQU 231                 ; RGB
  55+ 0000              L2ColourPINK_2		    EQU 226                 ; RGB
  56+ 0000              L2ColourPINK_3		    EQU 225                 ; RGB
  57+ 0000              L2ColourPINK_4		    EQU 224                 ; RGB
  58+ 0000
# file closed: ./Hardware/L2ColourDefines.asm
  30  0000                  INCLUDE "./Hardware/L1ColourDefines.asm"
# file opened: ./Hardware/L1ColourDefines.asm
   1+ 0000
   2+ 0000              L1ColourInkBlack        EQU %00000000
   3+ 0000              L1ColourInkBlue         EQU %00000001
   4+ 0000              L1ColourInkRed          EQU %00000010
   5+ 0000              L1ColourInkMagenta      EQU %00000011
   6+ 0000              L1ColourInkGreen        EQU %00000100
   7+ 0000              L1ColourInkCyan         EQU %00000101
   8+ 0000              L1ColourInkYellow       EQU %00000110
   9+ 0000              L1ColourInkWhite        EQU %00000111
  10+ 0000              L1ColourPaperBlack      EQU %00000000
  11+ 0000              L1ColourPaperBlue       EQU %00001000
  12+ 0000              L1ColourPaperRed        EQU %00010000
  13+ 0000              L1ColourPaperMagenta    EQU %00011000
  14+ 0000              L1ColourPaperGreen      EQU %00100000
  15+ 0000              L1ColourPaperCyan       EQU %00101000
  16+ 0000              L1ColourPaperYellow     EQU %00110000
  17+ 0000              L1ColourPaperWhite      EQU %00111000
  18+ 0000              L1ColourFlash           EQU %10000000
  19+ 0000              L1ColourBright          EQU %01000000
  20+ 0000              ;----------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              ; Screen Specific Colour Defines
  22+ 0000              L1InvHighlight          EQU L1ColourBright | L1ColourPaperRed   | L1ColourInkYellow
  23+ 0000              L1InvLowlight           EQU                  L1ColourPaperBlack | L1ColourInkWhite
# file closed: ./Hardware/L1ColourDefines.asm
  31  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  32  0000              ; Total screen list
  33  0000              ; Local Chart
  34  0000              ; Galactic Chart
  35  0000              ; Market Prices
  36  0000              ; Inventory
  37  0000              ; Comander status
  38  0000              ; System Data
  39  0000              ; Mission Briefing
  40  0000              ; missio completion
  41  0000              ; Docked  Menu (only place otehr than pause you can load and save)
  42  0000              ; Pause Menu (only place you can load from )
  43  0000              ; byint and selling equipment
  44  0000              ; bying and selling stock
  45  0000
  46  0000                                      INCLUDE "./Hardware/register_defines.asm"
# file opened: ./Hardware/register_defines.asm
   1+ 0000              IO_LAYER2_PORT                          EQU $123B
   2+ 0000              IO_EXT_BANK_PORT 			            EQU $DFFD ; 57341
   3+ 0000              IO_BANK_PORT                            EQU $7FFD ; 32765
   4+ 0000              REGISTER_NUMBER_PORT					EQU $243B
   5+ 0000              REGISTER_VALUE_PORT						EQU $253B
   6+ 0000              SPRITE_SLOT_PORT						EQU $303B
   7+ 0000              SPRITE_INFO_PORT                        EQU $0057
   8+ 0000              SPRITE_PATTERN_UPLOAD_PORT				EQU $005B
   9+ 0000
  10+ 0000              MACHINE_ID_REGISTER						EQU 0
  11+ 0000              VERSION_REGISTER						EQU 1
  12+ 0000              RESET_REGISTER		    				EQU 2
  13+ 0000              MACHINE_TYPE_REGISTER					EQU 3
  14+ 0000              PAGE_RAM_REGISTER						EQU 4
  15+ 0000              PERIPHERAL_1_REGISTER					EQU 5
  16+ 0000              PERIPHERAL_2_REGISTER					EQU 6
  17+ 0000              TURBO_MODE_REGISTER						EQU 7
  18+ 0000              PERIPHERAL_3_REGISTER					EQU 8
  19+ 0000              ANTI_BRICK_SYSTEM_REGISTER				EQU 10
  20+ 0000              LAYER2_RAM_PAGE_REGISTER				EQU 18
  21+ 0000              LAYER2_RAM_SHADOW_REGISTER      		EQU 19
  22+ 0000              TRANSPARENCY_COLOUR_REGISTER			EQU 20
  23+ 0000              SPRITE_LAYERS_SYSTEM_REGISTER			EQU 21
  24+ 0000              LAYER2_OFFSET_X_REGISTER				EQU 22
  25+ 0000              LAYER2_OFFSET_Y_REGISTER				EQU 23
  26+ 0000              CLIP_WINDOW_LAYER2_REGISTER				EQU 24
  27+ 0000              CLIP_WINDOW_SPRITES_REGISTER			EQU 25
  28+ 0000              CLIP_WINDOW_ULA_REGISTER				EQU 26
  29+ 0000              CLIP_WINDOW_CONTROL_REGISTER			EQU 28
  30+ 0000              ACTIVE_VIDEO_LINE_MSB_REGISTER			EQU 30
  31+ 0000              ACTIVE_VIDEO_LINE_LSB_REGISTER			EQU 31
  32+ 0000              LINE_INTERRUPT_CONTROL_REGISTER			EQU 34
  33+ 0000              LINE_INTERRUPT_VALUE_LSB_REGISTER		EQU 35
  34+ 0000              KEYMAP_HIGH_ADDRESS_REGISTER			EQU 40
  35+ 0000              KEYMAP_LOW_ADDRESS_REGISTER				EQU 41
  36+ 0000              KEYMAP_HIGH_DATA_REGISTER				EQU 42
  37+ 0000              KEYMAP_LOW_DATA_REGISTER				EQU 43
  38+ 0000              DAC_B_MIRROR_REGISTER                   EQU 44
  39+ 0000              DAC_AB_MIRROR_REGISTER                  EQU 45
  40+ 0000              DAC_C_MORROR_REGISTER                   EQU 46
  41+ 0000              TILEMAP_OFFSET_XMSB_REGISTER            EQU 47
  42+ 0000              TILEMAP_OFFSET_XLSB_REGISTER            EQU 48
  43+ 0000              TILEMAP_OFFSET_YMSB_REGISTER            EQU 49
  44+ 0000              LORES_OFFSET_X_REGISTER					EQU 50
  45+ 0000              LORES_OFFSET_Y_REGISTER					EQU 51
  46+ 0000              SPRITE_PORT_INDEX_REGISTER              EQU 52
  47+ 0000              SPRITE_PORT_ATTR0_REGISTER              EQU 53
  48+ 0000              SPRITE_PORT_ATTR1_REGISTER              EQU 54
  49+ 0000              SPRITE_PORT_ATTR2_REGISTER              EQU 55
  50+ 0000              SPRITE_PORT_ATTR3_REGISTER              EQU 56
  51+ 0000              SPRITE_PORT_ATTR4_REGISTER              EQU 57
  52+ 0000              PALETTE_INDEX_REGISTER					EQU 64
  53+ 0000              PALETTE_VALUE_8BIT_REGISTER				EQU 65
  54+ 0000              PALETTE_FORMAT_REGISTER					EQU 66
  55+ 0000              PALETTE_CONTROL_REGISTER				EQU 67
  56+ 0000              PALETTE_VALUE_9BIT_REGISTER				EQU 68
  57+ 0000              MMU_SLOT_0_REGISTER						EQU 80
  58+ 0000              MMU_SLOT_1_REGISTER						EQU 81
  59+ 0000              MMU_SLOT_2_REGISTER						EQU 82
  60+ 0000              MMU_SLOT_3_REGISTER						EQU 83
  61+ 0000              MMU_SLOT_4_REGISTER						EQU 84
  62+ 0000              MMU_SLOT_5_REGISTER						EQU 85
  63+ 0000              MMU_SLOT_6_REGISTER						EQU 86
  64+ 0000              MMU_SLOT_7_REGISTER						EQU 87
  65+ 0000              COPPER_DATA_REGISTER					EQU 96
  66+ 0000              COPPER_CONTROL_LOW_REGISTER				EQU 97
  67+ 0000              COPPER_CONTROL_HIGH_REGISTER			EQU 98
  68+ 0000              DISPLAY_CONTROL_1_REGISTER              EQU 105
  69+ 0000              LAYER_2_CONTROL_REGISTER                EQU 112
  70+ 0000              LAYER_2_X_OFFSET_MSB_REGISTER           EQU 113
  71+ 0000              DEBUG_LEDS_REGISTER						EQU 255
  72+ 0000
  73+ 0000
  74+ 0000              GetNextReg:	MACRO register
  75+ 0000 ~                        push bc
  76+ 0000 ~                            ld bc,$243B
  77+ 0000 ~                                ld a,register
  78+ 0000 ~                                out (c),a
  79+ 0000 ~                                inc b
  80+ 0000 ~                            in a,(c)
  81+ 0000 ~                        pop bc
  82+ 0000                          ENDM
  83+ 0000
# file closed: ./Hardware/register_defines.asm
  47  0000                                      INCLUDE "./Layer2Graphics/layer2_defines.asm"
# file opened: ./Layer2Graphics/layer2_defines.asm
   1+ 0000
   2+ 0000
   3+ 0000              LAYER2_SHIFTED_SCREEN_TOP  	 equ 0
   4+ 0000              LAYER2_SHIFTED_SCREEN_MIDDLE equ $40
   5+ 0000              LAYER2_SHIFTED_SCREEN_BOTTOM equ $80
   6+ 0000
   7+ 0000              ; note hi byte is not decoded on DMA port so can out OUTIR
   8+ 0000              IO_DATAGEAR_DMA_PORT 		 equ 107
   9+ 0000              IO_SPRITE_SLOT_PORT 		 equ 12347
  10+ 0000              IO_SPRITE_PATTERN_PORT       equ 91
  11+ 0000              IO_SPRITE_ATTRIBUTES_PORT    equ 87
  12+ 0000
  13+ 0000              LAYER2_VISIBLE_MASK 		equ $02
  14+ 0000              ; DEBUG 0 for always write to primary 08 for double buffering
  15+ 0000                  IFDEF DOUBLEBUFFER
  16+ 0000              LAYER2_SHADOW_SCREEN_MASK 	equ $08
  17+ 0000                  ELSE
  18+ 0000 ~            LAYER2_SHADOW_SCREEN_MASK 	equ $00
  19+ 0000                  ENDIF
  20+ 0000              LAYER2_READ_ENABLE_MASK 	equ %00000100
  21+ 0000              LAYER2_WRITE_ENABLE_MASK 	equ %00000001
  22+ 0000              LAYER2_READ_WRITE_MASK      equ %00000101
  23+ 0000              LAYER2_SCREEN_SECTION_MASK 	equ $03
  24+ 0000              LAYER2_SCREEN_SECTION_SHIFT equ 6
  25+ 0000
  26+ 0000              LAYER2_DISABLE_MEM_WRITE    equ %11111110
  27+ 0000              LAYER2_DISABLE_MEM_READ     equ %11111011
  28+ 0000              LAYER2_DISABLE_MEM_ACCESS   equ %11111010
  29+ 0000
  30+ 0000              LAYER2_SCREEN_BANK1          equ 8
  31+ 0000              LAYER2_SCREEN_BANK2          equ 9
  32+ 0000              LAYER2_SCREEN_BANK3          equ 10
  33+ 0000              LAYER2_SHADOW_BANK1          equ 11
  34+ 0000              LAYER2_SHADOW_BANK2          equ 12
  35+ 0000              LAYER2_SHADOW_BANK3          equ 13
  36+ 0000
  37+ 0000              SCREEN_HEIGHT 				 equ 192
  38+ 0000              SCREEN_RAM_BASE				 equ $0000
  39+ 0000              SCREEN_HOZ_MIN_PIX		     equ 10
  40+ 0000
  41+ 0000              SPRITES_VISIBLE_MASK         equ $01
  42+ 0000              SPRITES_ON_BORDER_MASK       equ $02
  43+ 0000              LAYER_PRIORITIES_MASK        equ $07
  44+ 0000              LORES_MODE_MASK              equ $80
  45+ 0000              LAYER_PRIORITIES_SHIFT       equ 2
  46+ 0000
  47+ 0000              LAYER_PRIORITIES_S_L_U 		equ 0
  48+ 0000              LAYER_PRIORITIES_L_S_U 		equ 1
  49+ 0000              LAYER_PRIORITIES_S_U_L  	equ 2
  50+ 0000              LAYER_PRIORITIES_L_U_S 		equ 3
  51+ 0000              LAYER_PRIORITIES_U_S_L 		equ 4
  52+ 0000              LAYER_PRIORITIES_U_L_S 		equ 5
  53+ 0000
  54+ 0000              DMA_WRO_BLOCK_PORTA_A2B_XFR  equ $7D
  55+ 0000              DMA_WRO_BLOCK_PORTA_B2A_XFR  equ $79
  56+ 0000              DMA_WR1_P1FIXED_MEMORY       equ $24
  57+ 0000              DMA_WR1_P1DEC_MEMORY         equ $04
  58+ 0000              DMA_WR1_P1INC_MEMORY         equ $14
  59+ 0000              DMA_WR2_P2FIXED_MEMORY       equ $20
  60+ 0000              DMA_WR2_P2DEC_MEMORY         equ $00
  61+ 0000              DMA_WR2_P2INC_MEMORY         equ $10
  62+ 0000              DMA_WR4_CONT_MODE            equ $AD
  63+ 0000              DMA_RESET                    equ $c3
  64+ 0000              DMA_RESET_PORT_A_TIMING      equ $c7
  65+ 0000              DMA_RESET_PORT_B_TIMING      equ $cb
  66+ 0000              DMA_LOAD                     equ $cf
  67+ 0000              DMA_CONTINUE                 equ $d3
  68+ 0000              DMA_DISABLE_INTERUPTS        equ $af
  69+ 0000              DMA_ENABLE_INTERUPTS         equ $ab
  70+ 0000              DMA_RESET_DISABLE_INTERUPTS  equ $a3
  71+ 0000              DMA_ENABLE_AFTER_RETI        equ $b7
  72+ 0000              DMA_READ_STATUS_BYTE         equ $bf
  73+ 0000              DMA_REINIT_STATUS_BYTE       equ $8b
  74+ 0000              DMA_START_READ_SEQUENCE      equ $a7
  75+ 0000              DMA_FORCE_READY              equ $b3
  76+ 0000              DMA_STOP_AT_END			     equ $82
  77+ 0000              DMA_DISABLE                  equ $83
  78+ 0000              DMA_ENABLE                   equ $87
  79+ 0000              DMA_WRITE_REGISTER_COMMAND   equ $bb
  80+ 0000              DMA_BURST                    equ $cd
  81+ 0000              DMA_CONTINUOUS               equ $ad
  82+ 0000              ZXN_DMA_PORT                 equ $6b
  83+ 0000
  84+ 0000
  85+ 0000              COLOUR_TRANSPARENT			 equ $E3
  86+ 0000
  87+ 0000
  88+ 0000
  89+ 0000
# file closed: ./Layer2Graphics/layer2_defines.asm
  48  0000                                      INCLUDE	"./Hardware/memory_bank_defines.asm"
# file opened: ./Hardware/memory_bank_defines.asm
   1+ 0000
   2+ 0000              membanksize			    equ	$1FFF
   3+ 0000
   4+ 0000              StartOfBank     	    equ $0000
   5+ 0000
   6+ 0000              membank0 			    equ $0000
   7+ 0000              dmaCopySrcAddr		    equ	$0000
   8+ 0000              membank1 			    equ $2000
   9+ 0000              membank2 			    equ $4000
  10+ 0000              membank3 			    equ $6000
  11+ 0000              membank4 			    equ $8000
  12+ 0000              membank5 			    equ $a000
  13+ 0000              membank6 			    equ $c000
  14+ 0000              ScreenBank              equ $c000
  15+ 0000              MenuGalChtAddr          equ $c000
  16+ 0000              MenuEquipSAddr          equ $c000
  17+ 0000              MenuInventAddr          equ $c000
  18+ 0000              MenuMarketAddr          equ $c000
  19+ 0000              DispMarketAddr          equ $c000
  20+ 0000              MenuShrChtAddr          equ $c000
  21+ 0000              MenuStatusAddr          equ $c000
  22+ 0000              MenuSystemAddr          equ $c000
  23+ 0000              ViewFrontAddr           equ $c000
  24+ 0000              SunBankAddr             equ $c000
  25+ 0000              PlanetBankAddr          equ $c000
  26+ 0000              UniverseBankAddr	    equ $c000
  27+ 0000              LaunchShipAddr          equ $c000
  28+ 0000              membank7 			    equ $e000
  29+ 0000              L1membankAddr   	    equ $e000
  30+ 0000              L2membankAddr   	    equ $e000
  31+ 0000              ShipModelsAddr	        equ $e000
  32+ 0000              SpritemembankAddr       equ $e000
  33+ 0000              ResetUniverseAddr       equ $e000
  34+ 0000              StockTableAddr	        equ $e000
  35+ 0000              CommanderAddr           equ $e000
  36+ 0000              LAYER2Addr              equ $e000
  37+ 0000              LAYER1Addr              equ $e000
  38+ 0000              SPRITEAddr              equ $e000
  39+ 0000              ConsoleImageAddr        equ $e000
  40+ 0000              GalaxyDataAddr          equ $e000
  41+ 0000
  42+ 0000              EXSDOSMMU0              equ MMU_SLOT_0_REGISTER
  43+ 0000              EXSDOSMMU1              equ MMU_SLOT_1_REGISTER
  44+ 0000              DMACpySourceMMU		    equ	MMU_SLOT_0_REGISTER
  45+ 0000              SunMMU 		            equ MMU_SLOT_6_REGISTER
  46+ 0000              PlanetMMU 		        equ MMU_SLOT_6_REGISTER
  47+ 0000              UniverseMMU 		    equ MMU_SLOT_6_REGISTER
  48+ 0000              ScreenBankMMU           equ MMU_SLOT_6_REGISTER
  49+ 0000              MenuEquipSMMU           equ MMU_SLOT_6_REGISTER
  50+ 0000              MenuShrChtMMU           equ MMU_SLOT_6_REGISTER
  51+ 0000              MenuGalChtMMU           equ MMU_SLOT_6_REGISTER
  52+ 0000              MenuInventMMU           equ MMU_SLOT_6_REGISTER
  53+ 0000              MenuSystemMMU           equ MMU_SLOT_6_REGISTER
  54+ 0000              MenuMarketMMU           equ MMU_SLOT_6_REGISTER
  55+ 0000              DispMarketMMU           equ MMU_SLOT_6_REGISTER
  56+ 0000              MenuStatusMMU           equ MMU_SLOT_6_REGISTER
  57+ 0000              LaunchShipMMU           equ MMU_SLOT_6_REGISTER
  58+ 0000              L1memMMU       		    equ MMU_SLOT_7_REGISTER
  59+ 0000              L2memMMU       		    equ MMU_SLOT_7_REGISTER
  60+ 0000              SpritememMMU   		    equ MMU_SLOT_7_REGISTER
  61+ 0000              ShipModelMMU  		    equ MMU_SLOT_7_REGISTER
  62+ 0000              ResetUniverseMMU	    equ MMU_SLOT_7_REGISTER
  63+ 0000              CommanderMMU	        equ MMU_SLOT_7_REGISTER
  64+ 0000              StockTableMMU		    equ MMU_SLOT_7_REGISTER
  65+ 0000              ConsoleImageDataMMU	    equ MMU_SLOT_7_REGISTER
  66+ 0000              GalaxyDataMMU	        equ MMU_SLOT_7_REGISTER
  67+ 0000
  68+ 0000              BankResetUniv           equ 49
  69+ 0000              BankMenuShrCht          equ 50
  70+ 0000              BankMenuGalCht          equ 51
  71+ 0000              BankMenuInvent          equ 52
  72+ 0000              BankMenuSystem          equ 53
  73+ 0000              BankMenuMarket          equ 54
  74+ 0000              BankStockTable          equ 55
  75+ 0000              BankCommander           equ 56
  76+ 0000              BankLAYER2              equ 57
  77+ 0000              BankLAYER1              equ 58
  78+ 0000              BankShipModels1         equ 59
  79+ 0000              BankSPRITE              equ 60
  80+ 0000              BankConsole             equ 61
  81+ 0000              BankFrontView           equ 62
  82+ 0000              BankMenuStatus          equ 63
  83+ 0000              BankMenuEquipS          equ 64
  84+ 0000              BankLaunchShip          equ 65
  85+ 0000              BankDispMarket          equ 66
  86+ 0000              BankShipModels2         equ 67
  87+ 0000              BankShipModels3         equ 68
  88+ 0000              BankShipModels4         equ 69
  89+ 0000
  90+ 0000              BankUNIVDATA0           equ 70
  91+ 0000              BankUNIVDATA1           equ 71
  92+ 0000              BankUNIVDATA2           equ 72
  93+ 0000              BankUNIVDATA3           equ 73
  94+ 0000              BankUNIVDATA4           equ 74
  95+ 0000              BankUNIVDATA5           equ 75
  96+ 0000              BankUNIVDATA6           equ 76
  97+ 0000              BankUNIVDATA7           equ 77
  98+ 0000              BankUNIVDATA8           equ 78
  99+ 0000              BankUNIVDATA9           equ 79
 100+ 0000              BankUNIVDATA10          equ 80
 101+ 0000              BankUNIVDATA11          equ 81
 102+ 0000              BankUNIVDATA12          equ 82
 103+ 0000              BankSunData             equ 83
 104+ 0000              BankPlanetData          equ 84
 105+ 0000
 106+ 0000              BankGalaxyData0         equ 91
 107+ 0000              BankGalaxyData1         equ 92
 108+ 0000              BankGalaxyData2         equ 93
 109+ 0000              BankGalaxyData3         equ 94
 110+ 0000              BankGalaxyData4         equ 95
 111+ 0000              BankGalaxyData5         equ 96
 112+ 0000              BankGalaxyData6         equ 97
 113+ 0000              BankGalaxyData7         equ 98
 114+ 0000
 115+ 0000              BankROM                 equ 255
 116+ 0000
# file closed: ./Hardware/memory_bank_defines.asm
  49  0000                                      INCLUDE "./Hardware/screen_equates.asm"
# file opened: ./Hardware/screen_equates.asm
   1+ 0000              ScreenHeight 		equ 192
   2+ 0000              ScreenLastRow       equ ScreenHeight -1
   3+ 0000              ScreenWidth  		equ 256
   4+ 0000              ScreenLastCol       equ ScreenWidth -1
   5+ 0000              ScreenHeightHalf	equ 96
   6+ 0000              ScreenWidthHalf  	equ 128
   7+ 0000              ScreenCenterY		equ 96
   8+ 0000              ScreenCenterX       equ 128
   9+ 0000              ViewHeight          equ 128
  10+ 0000              ViewHeightPlus1     equ 128+1
  11+ 0000              ViewLastRow       	equ ViewHeight -1
  12+ 0000              ViewWidth  			equ 256
  13+ 0000              ViewLastCol         equ ViewWidth -1
  14+ 0000              ViewHeightHalf      equ 63
  15+ 0000              ViewWidthHalf       equ 127
  16+ 0000              ViewCenterY         equ 64
  17+ 0000              ViewCenterX         equ 128
  18+ 0000              ShipColour			equ $FF		; place holder for debugging TODO
  19+ 0000              ScreenL1Bottom      equ $5000
  20+ 0000              ScreenL1BottomLen   equ 32 * 8 * 8
  21+ 0000              ScreenL1AttrBtm     equ $5A00
  22+ 0000              ScreenL1AttrBtmLen  equ 32 * 8
  23+ 0000
# file closed: ./Hardware/screen_equates.asm
  50  0000                                      INCLUDE "./Data/ShipModelEquates.asm"
# file opened: ./Data/ShipModelEquates.asm
   1+ 0000              ScoopDebrisOffset	    equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   2+ 0000              MissileLockLoOffset	    equ 1
   3+ 0000              MissileLockHiOffset	    equ 2
   4+ 0000              EdgeAddyOffset		    equ 3
   5+ 0000              LineX4Offset		    equ 5
   6+ 0000              GunVertexOffset		    equ 6
   7+ 0000              ExplosionCtOffset	    equ 7
   8+ 0000              VertexCtX6Offset	    equ 8
   9+ 0000              EdgeCountOffset		    equ 9
  10+ 0000              BountyLoOffset		    equ 10
  11+ 0000              BountyHiOffset		    equ 11
  12+ 0000              FaceCtX4Offset		    equ 12
  13+ 0000              DotOffset			    equ 13
  14+ 0000              EnergyOffset		    equ 14
  15+ 0000              SpeedOffset			    equ 15
  16+ 0000              FaceAddyOffset		    equ 16
  17+ 0000              QOffset				    equ 18
  18+ 0000              LaserOffset			    equ 19
  19+ 0000              VerticiesAddyOffset     equ 20
  20+ 0000              ShipTypeOffset          equ 22
  21+ 0000              ShipNewBitsOffset       equ 23
  22+ 0000              ShipAIFlagsOffset       equ 24
  23+ 0000              ShipDataLength          equ ShipAIFlagsOffset+1
  24+ 0000
  25+ 0000              CobraTablePointer       equ 43
  26+ 0000              ;29 faulty
  27+ 0000              BankThreshold           equ 16
  28+ 0000
  29+ 0000              ShipTableALast          equ 23
  30+ 0000              ShipTableBLast          equ 39
  31+ 0000              ShipTableCLast          equ 55
  32+ 0000
# file closed: ./Data/ShipModelEquates.asm
  51  0000                                      INCLUDE "./Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1+ 0000              InitNoDoubleBuffer:         MACRO
   2+ 0000 ~                                        MMUSelectLayer1
   3+ 0000 ~                                        call	l1_cls
   4+ 0000 ~                                        ld		a,7
   5+ 0000 ~                                        call	l1_attr_cls_to_a
   6+ 0000 ~                                        MMUSelectLayer2
   7+ 0000 ~                                        call    asm_l2_double_buffer_off
   8+ 0000 ~                                        call	l2_cls	; Get some space
   9+ 0000 ~                                        MMUSelectSpriteBank
  10+ 0000 ~                                        call    sprite_cls_cursors
  11+ 0000                                          ENDM
  12+ 0000
  13+ 0000
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
  52  0000                                      INCLUDE "./Macros/graphicsMacros.asm"
# file opened: ./Macros/graphicsMacros.asm
   1+ 0000              ; General Graphics macros
   2+ 0000              DoubleBufferIfPossible: MACRO
   3+ 0000 ~                                    IFDEF DOUBLEBUFFER
   4+ 0000 ~                                        MMUSelectLayer2
   5+ 0000 ~                                        call  l2_cls
   6+ 0000 ~                                        call  l2_flip_buffers
   7+ 0000 ~                                    ENDIF
   8+ 0000                                      ENDM
# file closed: ./Macros/graphicsMacros.asm
  53  0000                                      INCLUDE "./Macros/callMacros.asm"
# file opened: ./Macros/callMacros.asm
   1+ 0000
   2+ 0000              CallIfAEqNusng:         MACRO   reg,target
   3+ 0000 ~                                    cp      reg
   4+ 0000 ~                                    call	z,target
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              CallIfAGTENusng:        MACRO   reg,target
   8+ 0000 ~                                    cp      reg
   9+ 0000 ~                                    call	nc,target
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              CallIfAGTEMemusng:      MACRO   reg,target
  13+ 0000 ~                                    ld      hl,reg
  14+ 0000 ~                                    cp      (hl)
  15+ 0000 ~                                    call	nc,target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              CallIfALTNusng:         MACRO   reg,target
  19+ 0000 ~                                    cp      reg
  20+ 0000 ~                                    call	c,target
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              CallIfMemEqMemusng:     MACRO mem, address, target
  24+ 0000 ~                                    ld   a,(mem)
  25+ 0000 ~                                    ld   hl,address
  26+ 0000 ~                                    cp   (hl)
  27+ 0000 ~                                    call    z,target
  28+ 0000                                      ENDM
  29+ 0000
  30+ 0000              CallIfMemEqNusng:       MACRO mem, value, target
  31+ 0000 ~                                    ld   a,(mem)
  32+ 0000 ~                                    cp   value
  33+ 0000 ~                                    call    z,target
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              CallIfMemTrue:          MACRO mem, target
  37+ 0000 ~                                    ld      a,(mem)
  38+ 0000 ~                                    and     a
  39+ 0000 ~                                    call    z, target
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              CallIfMemFalse:         MACRO mem, target
  43+ 0000 ~                                    ld      a,(mem)
  44+ 0000 ~                                    and     a
  45+ 0000 ~                                    call    nz, target
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              CallIfATrue:            MACRO target
  49+ 0000 ~                                    and     a
  50+ 0000 ~                                    call    z, target
  51+ 0000                                      ENDM
  52+ 0000
  53+ 0000              CallIfAFalse:           MACRO target
  54+ 0000 ~                                    and     a
  55+ 0000 ~                                    call    nz, target
  56+ 0000                                      ENDM
# file closed: ./Macros/callMacros.asm
  54  0000                                      INCLUDE "./Macros/carryFlagMacros.asm"
# file opened: ./Macros/carryFlagMacros.asm
   1+ 0000
   2+ 0000              SetCarryFlag:           MACRO
   3+ 0000 ~                                    scf
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearCarryFlag:	        MACRO
   7+ 0000 ~                                    or a
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              FlipCarryFlag:          MACRO
  11+ 0000 ~                                    ccf
  12+ 0000                                      ENDM
  13+ 0000
# file closed: ./Macros/carryFlagMacros.asm
  55  0000                                      INCLUDE "./Macros/CopyByteMacros.asm"
# file opened: ./Macros/CopyByteMacros.asm
   1+ 0000              CopyByteAtHLixToA:		MACRO memloc
   2+ 0000 ~            						ex          de,hl                               ; save hl
   3+ 0000 ~            						ld          hl,memloc
   4+ 0000 ~            						add         hl,a
   5+ 0000 ~            						ld          a,(hl)                              ; get XX2[x]
   6+ 0000 ~            						ex          de,hl                               ; get hl back as we need it in loop
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              ; Increments IYL
  10+ 0000              ; Increments IHL
  11+ 0000              ; Gets value at hl and loads into Parameter 1 address
  12+ 0000
  13+ 0000              CopyByteAtNextHLiyl: 	MACRO memloc
  14+ 0000 ~            						inc         iyl                                 ;
  15+ 0000 ~            						inc         hl                                  ; vertex byte#1
  16+ 0000 ~            						ld          a,(hl)                              ;
  17+ 0000 ~            						ld          (memloc),a                     ; XX15+2 = (V),Y
  18+ 0000              						ENDM
  19+ 0000
  20+ 0000              ;------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              CopyByteAtNextHL:   MACRO targetaddr
  22+ 0000 ~                                inc         hl                                  ; vertex byte#1
  23+ 0000 ~                                ld          a,(hl)                              ;
  24+ 0000 ~                                ld          (targetaddr),a                     ; SunXX15+2 = (V),Y
  25+ 0000                                  ENDM
# file closed: ./Macros/CopyByteMacros.asm
  56  0000                                      INCLUDE "./Macros/ldCopyMacros.asm"
# file opened: ./Macros/ldCopyMacros.asm
   1+ 0000              ZeroA:		            MACRO
   2+ 0000 ~                                    xor a
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              SetATrue:               MACRO
   6+ 0000 ~                                    xor     a
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              SetAFalse:              MACRO
  10+ 0000 ~                                    ld      a,$FF
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              SetMemFalse             MACRO   mem
  14+ 0000 ~                                    ld      a,$FF
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetMemTrue              MACRO   mem
  19+ 0000 ~                                    xor     a
  20+ 0000 ~                                    ld      (mem),a
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              SetMemToN:              MACRO   mem,value
  24+ 0000 ~                                    ld      a,value
  25+ 0000 ~                                    ld      (mem),a
  26+ 0000                                      ENDM
  27+ 0000
  28+ 0000              ldCopyStringLen:        MACRO   source, target, strlen
  29+ 0000 ~                                    ld      hl,source
  30+ 0000 ~                                    ld      de, target
  31+ 0000 ~                                    ld      bc, strlen
  32+ 0000 ~                                    ldir
  33+ 0000                                      ENDM
  34+ 0000
  35+ 0000              ldCopyTextAtHLtoDE:     MACRO
  36+ 0000 ~            .CopyLoop:              ld      a,(hl)
  37+ 0000 ~                                    ld      (de),a
  38+ 0000 ~                                    cp      0
  39+ 0000 ~                                    jp      z,.DoneCopy
  40+ 0000 ~                                    inc     hl
  41+ 0000 ~                                    inc     de
  42+ 0000 ~                                    jr      .CopyLoop
  43+ 0000 ~            .DoneCopy:
  44+ 0000                                      ENDM
  45+ 0000
  46+ 0000              ldClearTextLoop:        MACRO   TextSize
  47+ 0000 ~                                    ld      b,a
  48+ 0000 ~                                    ld      a,TextSize
  49+ 0000 ~            .ClearLoop:             ld      (hl),a
  50+ 0000 ~                                    inc     hl
  51+ 0000 ~                                    djnz    .ClearLoop
  52+ 0000                                      ENDM
  53+ 0000
  54+ 0000              ldCopyByte:             MACRO memfrom, memto
  55+ 0000 ~                                    ld       a,(memfrom)
  56+ 0000 ~                                    ld       (memto),a
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000
  60+ 0000              ldCopyByteABS:          MACRO memfrom, memto
  61+ 0000 ~                                    ld       a,(memfrom)
  62+ 0000 ~                                    and		$7F
  63+ 0000 ~                                    ld       (memto),a
  64+ 0000                                      ENDM
  65+ 0000
  66+ 0000              ldAtHLtoMem:            MACRO   memto
  67+ 0000 ~                                    ld      a,(hl)
  68+ 0000 ~                                    ld      (memto),a
  69+ 0000                                      ENDM
  70+ 0000
  71+ 0000              ldCopy2Byte             MACRO  memfrom, memto
  72+ 0000 ~                                    ld       hl,(memfrom)
  73+ 0000 ~                                    ld       (memto),hl
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              ldWriteConst            MACRO  memfrom, memto
  77+ 0000 ~                                    ld       a,memfrom
  78+ 0000 ~                                    ld       (memto),a
  79+ 0000                                      ENDM
  80+ 0000
  81+ 0000              ldWriteZero             MACRO  memto
  82+ 0000 ~                                    xor      a
  83+ 0000 ~                                    ld       (memto),a
  84+ 0000                                      ENDM
  85+ 0000
  86+ 0000              ldIXLaFromN:	        MACRO memfrom
  87+ 0000 ~                                    ld		a,(memfrom)
  88+ 0000 ~                                    ld		ixl,a
  89+ 0000                                      ENDM
  90+ 0000
  91+ 0000              ldIXHaFromN:	        MACRO memfrom
  92+ 0000 ~                                    ld		a,(memfrom)
  93+ 0000 ~                                    ld		ixh,a
  94+ 0000                                      ENDM
  95+ 0000
  96+ 0000              ldIYLaFromN:	        MACRO memfrom
  97+ 0000 ~                                    ld		a,(memfrom)
  98+ 0000 ~                                    ld		iyl,a
  99+ 0000                                      ENDM
 100+ 0000
 101+ 0000              ldIYHaFromN:	        MACRO memfrom
 102+ 0000 ~                                    ld		a,(memfrom)
 103+ 0000 ~                                    ld		iyh,a
 104+ 0000                                      ENDM
 105+ 0000
 106+ 0000              ldhlde:			        MACRO
 107+ 0000 ~                                    ld		h,d
 108+ 0000 ~                                    ld		l,e
 109+ 0000                                      ENDM
 110+ 0000
 111+ 0000              ldhlbc:			        MACRO
 112+ 0000 ~                                    ld		h,b
 113+ 0000 ~                                    ld		l,c
 114+ 0000                                      ENDM
 115+ 0000
 116+ 0000              ldbcde:			        MACRO
 117+ 0000 ~                                    ld		b,d
 118+ 0000 ~                                    ld		c,e
 119+ 0000                                      ENDM
 120+ 0000
 121+ 0000              lddebc:			        MACRO
 122+ 0000 ~                                    ld		d,b
 123+ 0000 ~                                    ld		e,c
 124+ 0000                                      ENDM
 125+ 0000
 126+ 0000              ldbchl:			        MACRO
 127+ 0000 ~                                    ld		b,h
 128+ 0000 ~                                    ld		c,l
 129+ 0000                                      ENDM
 130+ 0000
 131+ 0000              lddeiy:			        MACRO
 132+ 0000 ~                                    ld		d,iyh
 133+ 0000 ~                                    ld		e,iyl
 134+ 0000                                      ENDM
 135+ 0000
 136+ 0000              ldiyde:			        MACRO
 137+ 0000 ~                                    ld		iyh,d
 138+ 0000 ~                                    ld		iyl,e
 139+ 0000                                      ENDM
 140+ 0000
 141+ 0000
 142+ 0000              FourLDIInstrunctions:   MACRO
 143+ 0000 ~                                    ldi
 144+ 0000 ~                                    ldi
 145+ 0000 ~                                    ldi
 146+ 0000 ~                                    ldi
 147+ 0000                                      ENDM
 148+ 0000
 149+ 0000              FiveLDIInstrunctions:   MACRO
 150+ 0000 ~                                    ldi
 151+ 0000 ~                                    ldi
 152+ 0000 ~                                    ldi
 153+ 0000 ~                                    ldi
 154+ 0000 ~                                    ldi
 155+ 0000                                      ENDM
 156+ 0000
 157+ 0000              SixLDIInstrunctions:    MACRO
 158+ 0000 ~                                    ldi
 159+ 0000 ~                                    ldi
 160+ 0000 ~                                    ldi
 161+ 0000 ~                                    ldi
 162+ 0000 ~                                    ldi
 163+ 0000 ~                                    ldi
 164+ 0000                                      ENDM
 165+ 0000
 166+ 0000              EightLDIInstrunctions:  MACRO
 167+ 0000 ~            		                ldi
 168+ 0000 ~            		                ldi
 169+ 0000 ~            		                ldi
 170+ 0000 ~            		                ldi
 171+ 0000 ~            		                ldi
 172+ 0000 ~            		                ldi
 173+ 0000 ~            		                ldi
 174+ 0000 ~            		                ldi
 175+ 0000                                      ENDM
 176+ 0000
 177+ 0000              NineLDIInstrunctions:  MACRO
 178+ 0000 ~            		                ldi
 179+ 0000 ~            		                ldi
 180+ 0000 ~            		                ldi
 181+ 0000 ~            		                ldi
 182+ 0000 ~            		                ldi
 183+ 0000 ~            		                ldi
 184+ 0000 ~            		                ldi
 185+ 0000 ~            		                ldi
 186+ 0000 ~            		                ldi
 187+ 0000                                      ENDM
# file closed: ./Macros/ldCopyMacros.asm
  57  0000                                      INCLUDE "./Macros/ldIndexedMacros.asm"
# file opened: ./Macros/ldIndexedMacros.asm
   1+ 0000              GetByteAInTable:    MACRO table
   2+ 0000 ~                                ld          hl,table
   3+ 0000 ~                                add         hl,a
   4+ 0000 ~                                ld          a,(hl)
   5+ 0000                                  ENDM
   6+ 0000
   7+ 0000              HLWordAInTable:     MACRO table
   8+ 0000 ~                                ld          hl,table
   9+ 0000 ~                                sla         a
  10+ 0000 ~                                add         hl,a
  11+ 0000 ~                                ld          a,(hl)
  12+ 0000 ~                                inc         hl
  13+ 0000 ~                                ld          h,(hl)
  14+ 0000 ~                                ld          l,a
  15+ 0000                                  ENDM
  16+ 0000
  17+ 0000
  18+ 0000              ldAToHLixl:			MACRO value
  19+ 0000 ~            					ld          hl,value
  20+ 0000 ~            					ex          af,af'
  21+ 0000 ~            					ld          a,ixl
  22+ 0000 ~            					add         hl,a
  23+ 0000 ~            					ex          af,af'
  24+ 0000 ~            					ld          (hl),a
  25+ 0000              					ENDM
  26+ 0000
  27+ 0000              ldAToHLiyl:			MACRO value
  28+ 0000 ~            					ld          hl,value
  29+ 0000 ~            					ex          af,af'
  30+ 0000 ~            					ld          a,iyl
  31+ 0000 ~            					add         hl,a
  32+ 0000 ~            					ex          af,af'
  33+ 0000 ~            					ld          (hl),a
  34+ 0000              					ENDM
  35+ 0000
  36+ 0000
  37+ 0000              ldHLixlToA:         MACRO value
  38+ 0000 ~                                ld          hl,value
  39+ 0000 ~                                ex          af,af'
  40+ 0000 ~                                ld          a,ixl
  41+ 0000 ~                                add         hl,a
  42+ 0000 ~                                ld          a,(hl)
  43+ 0000                                  ENDM
  44+ 0000
  45+ 0000              ldHLiylToA:         MACRO value
  46+ 0000 ~                                ld          hl,value
  47+ 0000 ~                                ex          af,af'
  48+ 0000 ~                                ld          a,iyl
  49+ 0000 ~                                add         hl,a
  50+ 0000 ~                                ld          a,(hl)
  51+ 0000                                  ENDM
  52+ 0000
  53+ 0000              ldHLIdxAToA:        MACRO value
  54+ 0000 ~                                ld          hl,value
  55+ 0000 ~                                add         hl,a
  56+ 0000 ~                                ld          a,(hl)
  57+ 0000                                  ENDM
  58+ 0000
  59+ 0000              HLEquAddrAtHLPlusA: MACRO
  60+ 0000 ~                                sla         a
  61+ 0000 ~                                add         hl,a
  62+ 0000 ~                                ld          a,(hl)
  63+ 0000 ~                                inc         hl
  64+ 0000 ~                                ld          h,(hl)
  65+ 0000 ~                                ld          l,a
  66+ 0000                                  ENDM
# file closed: ./Macros/ldIndexedMacros.asm
  58  0000                                      INCLUDE "./Macros/jumpMacros.asm"
# file opened: ./Macros/jumpMacros.asm
   1+ 0000              JumpIfPositive:	        MACRO target
   2+ 0000 ~                                    jp		p, target
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              JumpIfNegative:	        MACRO target
   6+ 0000 ~                                    jp		m, target
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000
  10+ 0000              JumpIfUnderflow:	    MACRO target
  11+ 0000 ~                                    jp		po, target
  12+ 0000                                      ENDM
  13+ 0000
  14+ 0000              JumpIfOverflow:	        MACRO target
  15+ 0000 ~                                    jp		po, target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000
  19+ 0000              JumpIfNotZero:	        MACRO target
  20+ 0000 ~                                    jp	nz,target
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              JumpIfZero:	            MACRO target
  24+ 0000 ~                                    jp	z,target
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              ;.. Bit routines
  28+ 0000              JumpOnLeadSignSet:      MACRO   reg, target
  29+ 0000 ~                                    ld      a,reg
  30+ 0000 ~                                    and     SignOnly8Bit
  31+ 0000 ~                                    jp      nz,target
  32+ 0000                                      ENDM
  33+ 0000
  34+ 0000              JumpOnLeadSignClear:    MACRO   reg, target
  35+ 0000 ~                                    ld      a,reg
  36+ 0000 ~                                    and     SignOnly8Bit
  37+ 0000 ~                                    jp      z,target
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              JumpOnLeadSignSetA:     MACRO   target
  41+ 0000 ~                                    and     SignOnly8Bit
  42+ 0000 ~                                    jp      nz,target
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              JumpOnLeadSignClearA:   MACRO   target
  46+ 0000 ~                                    and     SignOnly8Bit
  47+ 0000 ~                                    jp      z,target
  48+ 0000                                      ENDM
  49+ 0000
  50+ 0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
  51+ 0000 ~                                    ld      a,(mem)
  52+ 0000 ~                                    bit 	bitnbr,a
  53+ 0000 ~                                    jp      nz,target
  54+ 0000                                      ENDM
  55+ 0000
  56+ 0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
  57+ 0000 ~                                    ld      a,(mem)
  58+ 0000 ~                                    bit 	bitnbr,a
  59+ 0000 ~                                    jp      z,target
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              JumpOnABit5Set:         MACRO   target
  63+ 0000 ~                                    and     Bit5Only
  64+ 0000 ~                                    jp      nz,target
  65+ 0000                                      ENDM
  66+ 0000
  67+ 0000              JumpOnABit5Clear:       MACRO   target
  68+ 0000 ~                                    and     Bit5Only
  69+ 0000 ~                                    jp      z,target
  70+ 0000                                      ENDM
  71+ 0000
  72+ 0000              JumpOnBitMaskSet:       MACRO   bitmask, target
  73+ 0000 ~                                    and     bitmask
  74+ 0000 ~                                    jp      nz,target
  75+ 0000                                      ENDM
  76+ 0000
  77+ 0000              JumpOnBitMaskClear:     MACRO   bitmask, target
  78+ 0000 ~                                    and     bitmask
  79+ 0000 ~                                    jp      z,target
  80+ 0000                                      ENDM
  81+ 0000
  82+ 0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
  83+ 0000 ~                                    bit 	bitnbr,reg
  84+ 0000 ~                                    jp      nz,target
  85+ 0000                                      ENDM
  86+ 0000
  87+ 0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
  88+ 0000 ~                                    bit 	bitnbr,reg
  89+ 0000 ~                                    jp      z,target
  90+ 0000                                      ENDM
  91+ 0000
  92+ 0000              ; Comparison Routines
  93+ 0000              JumpIfAGTEusng:         MACRO
  94+ 0000 ~                                    jp		nc,target
  95+ 0000                                      ENDM
  96+ 0000
  97+ 0000              JumpIfAGTENusng:        MACRO reg,target
  98+ 0000 ~                                    cp     reg
  99+ 0000 ~                                    jp		nc,target
 100+ 0000                                      ENDM
 101+ 0000
 102+ 0000              JumpIfAGTEMemusng:      MACRO mem,target
 103+ 0000 ~                                    ld      hl,mem
 104+ 0000 ~                                    cp      (hl)
 105+ 0000 ~                                    jp		nc,target
 106+ 0000                                      ENDM
 107+ 0000
 108+ 0000              JumpIfALTMemusng:       MACRO mem,target
 109+ 0000 ~                                    ld      hl,mem
 110+ 0000 ~                                    cp      (hl)
 111+ 0000 ~                                    jp		c,target
 112+ 0000                                      ENDM
 113+ 0000
 114+ 0000              JumpIfMemGTENusng:      MACRO mem, value, target
 115+ 0000 ~                                    ld     a,(mem)
 116+ 0000 ~                                    cp     value
 117+ 0000 ~                                    jp	  nc,target
 118+ 0000                                      ENDM
 119+ 0000
 120+ 0000              JumpIfMemGTEMemusng:    MACRO mem, address, target
 121+ 0000 ~                                    ld   a,(mem)
 122+ 0000 ~                                    ld   hl,address
 123+ 0000 ~                                    cp   (hl)
 124+ 0000 ~                                    jp	  nc,target
 125+ 0000                                      ENDM
 126+ 0000
 127+ 0000              JumpIfMemEqMemusng:     MACRO mem, address, target
 128+ 0000 ~                                    ld   a,(mem)
 129+ 0000 ~                                    ld   hl,address
 130+ 0000 ~                                    cp   (hl)
 131+ 0000 ~                                    jp	  z,target
 132+ 0000                                      ENDM
 133+ 0000
 134+ 0000              JumpIfMemNeMemusng:     MACRO mem, address, target
 135+ 0000 ~                                    ld   a,(mem)
 136+ 0000 ~                                    ld   hl,address
 137+ 0000 ~                                    cp   (hl)
 138+ 0000 ~                                    jp	  nz,target
 139+ 0000                                      ENDM
 140+ 0000
 141+ 0000              JumpIfMemTrue:          MACRO mem, target
 142+ 0000 ~                                    ld      a,(mem)
 143+ 0000 ~                                    and     a
 144+ 0000 ~                                    jp      z, target
 145+ 0000                                      ENDM
 146+ 0000
 147+ 0000              JumpIfMemFalse:         MACRO mem, target
 148+ 0000 ~                                    ld      a,(mem)
 149+ 0000 ~                                    and     a
 150+ 0000 ~                                    jp      nz, target
 151+ 0000                                      ENDM
 152+ 0000
 153+ 0000              JumpIfATrue:            MACRO target
 154+ 0000 ~                                    and     a
 155+ 0000 ~                                    jp      z, target
 156+ 0000                                      ENDM
 157+ 0000
 158+ 0000              JumpIfAFalse:           MACRO target
 159+ 0000 ~                                    and     a
 160+ 0000 ~                                    jp      nz, target
 161+ 0000                                      ENDM
 162+ 0000
 163+ 0000              JumpIfALTusng:          MACRO target
 164+ 0000 ~                                    jp		c,target
 165+ 0000                                      ENDM
 166+ 0000
 167+ 0000              JumpIfALTNusng:         MACRO value, target
 168+ 0000 ~                                    cp      value
 169+ 0000 ~                                    jp		c, target
 170+ 0000                                      ENDM
 171+ 0000
 172+ 0000              JumpIfMemLTNusng:       MACRO mem, value, target
 173+ 0000 ~                                    ld      a,(mem)
 174+ 0000 ~                                    cp      value
 175+ 0000 ~                                    jp	  c,target
 176+ 0000                                      ENDM
 177+ 0000
 178+ 0000              JumpIfMemLTMemusng:     MACRO mem, value, target
 179+ 0000 ~                                    ld    a,(mem)
 180+ 0000 ~                                    ld    hl,value
 181+ 0000 ~                                    cp    (hl)
 182+ 0000 ~                                    jp	  c,target
 183+ 0000                                      ENDM
 184+ 0000
 185+ 0000              JumpIfMemEqNusng:       MACRO mem,value,target
 186+ 0000 ~                                    ld  a,(mem)
 187+ 0000 ~                                    cp  value
 188+ 0000 ~                                    jp  z,target
 189+ 0000                                      ENDM
 190+ 0000
 191+ 0000              JumpIfMemNeNusng:       MACRO mem,value,target
 192+ 0000 ~                                    ld  a,(mem)
 193+ 0000 ~                                    cp  value
 194+ 0000 ~                                    jp  nz,target
 195+ 0000                                      ENDM
 196+ 0000
 197+ 0000              JumpIfMemZero:          MACRO mem,target
 198+ 0000 ~                                    ld  a,(mem)
 199+ 0000 ~                                    and a
 200+ 0000 ~                                    jp  z,target
 201+ 0000                                      ENDM
 202+ 0000
 203+ 0000              JumpIfMemNotZero:       MACRO mem,target
 204+ 0000 ~                                    ld  a,(mem)
 205+ 0000 ~                                    and a
 206+ 0000 ~                                    jp  nz,target
 207+ 0000                                      ENDM
 208+ 0000
 209+ 0000              JumpIfALTMemHLusng:     MACRO target
 210+ 0000 ~                                    cp    (hl)
 211+ 0000 ~                                    jp	  c,target
 212+ 0000                                      ENDM
 213+ 0000
 214+ 0000              JumpIfANENusng:         MACRO value, target
 215+ 0000 ~                                    cp     value
 216+ 0000 ~                                    jp      nz,target
 217+ 0000                                      ENDM
 218+ 0000
 219+ 0000              JumpIfANEMemusng:       MACRO  value, target
 220+ 0000 ~                                    ld    hl,value
 221+ 0000 ~                                    cp    (hl)
 222+ 0000 ~                                    jp      nz,target
 223+ 0000                                      ENDM
 224+ 0000
 225+ 0000              JumpIfAEqNusng:         MACRO value, target
 226+ 0000 ~                                    cp     value
 227+ 0000 ~                                    jp      z,target
 228+ 0000                                      ENDM
 229+ 0000
 230+ 0000              JumpIfAIsZero:	        MACRO target
 231+ 0000 ~                                    and a   ; cp 0 - changed to and a for optimisation but affects other flags
 232+ 0000 ~                                    jp	z, target
 233+ 0000                                      ENDM
 234+ 0000
 235+ 0000              JumpIfAIsNotZero:       MACRO target
 236+ 0000 ~                                    cp	0
 237+ 0000 ~                                    jp	nz,target
 238+ 0000                                      ENDM
 239+ 0000
 240+ 0000              IfResultZeroGoto:	    MACRO target
 241+ 0000 ~                                    jp	z,target
 242+ 0000                                      ENDM
 243+ 0000
 244+ 0000              IfResultNotZeroGoto:    MACRO target
 245+ 0000 ~                                    jp	nz,target
 246+ 0000                                      ENDM
 247+ 0000
# file closed: ./Macros/jumpMacros.asm
  59  0000                                      INCLUDE "./Macros/MathsMacros.asm"
# file opened: ./Macros/MathsMacros.asm
   1+ 0000
   2+ 0000
   3+ 0000              ApplyMyRollToVector:    MACRO angle, vectorX, vectorY
   4+ 0000 ~                                    ldCopyByte angle,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
   5+ 0000 ~                                    ldCopy2Byte vectorY, varR           ; RS =  nosev_y
   6+ 0000 ~                                    ldCopyByte  vectorX, varP           ; set P to nosevX lo (may be redundant)
   7+ 0000 ~                                    ld a,(vectorX+1)                    ; Set A = -nosev_x_hi
   8+ 0000 ~                                    xor $80                             ;
   9+ 0000 ~                                    call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  10+ 0000 ~                                    ld  (vectorY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  11+ 0000 ~                                    ldCopy2Byte vectorX, varR           ; Set (S R) = nosev_x
  12+ 0000 ~                                    ld  a,(vectorY+1)                   ;  Set A = nosev_y_hi
  13+ 0000 ~                                    call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  14+ 0000 ~                                    ld  (vectorX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              SignedHLTo2C:           MACRO
  18+ 0000 ~                                    bit     7,h
  19+ 0000 ~                                    jr      z,.Done2c
  20+ 0000 ~                                    ld      a,h
  21+ 0000 ~                                    and     SignMask8Bit
  22+ 0000 ~                                    ld      h,a
  23+ 0000 ~                                    NegHL
  24+ 0000 ~            .Done2c:
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              MemSignedTo2C:          MACRO   memfrom
  28+ 0000 ~                                    ld      hl,(memfrom)
  29+ 0000 ~                                    bit     7,h
  30+ 0000 ~                                    jr      z,.Done2c
  31+ 0000 ~                                    ld      a,h
  32+ 0000 ~                                    and     SignMask8Bit
  33+ 0000 ~                                    ld      h,a
  34+ 0000 ~            .Done2c:                ld      (memfrom),hl
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000
  38+ 0000                  ;returns result in H
  39+ 0000              EDiv10Inline:           MACRO
  40+ 0000 ~                                    ld      d,0
  41+ 0000 ~                                    ld      hl,de
  42+ 0000 ~                                    add     hl,hl
  43+ 0000 ~                                    add     hl,de
  44+ 0000 ~                                    add     hl,hl
  45+ 0000 ~                                    add     hl,hl
  46+ 0000 ~                                    add     hl,de
  47+ 0000 ~                                    add     hl,hl
  48+ 0000                                      ENDM
  49+ 0000
# file closed: ./Macros/MathsMacros.asm
  60  0000                                      INCLUDE "./Macros/MMUMacros.asm"
# file opened: ./Macros/MMUMacros.asm
   1+ 0000              MMUSelectROMS:       MACRO
   2+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   3+ 0000 ~                                 nextreg EXSDOSMMU1,        BankROM
   4+ 0000                                   ENDM
   5+ 0000
   6+ 0000              MMUSelectSpriteBank: MACRO
   7+ 0000 ~            					 nextreg SpritememMMU,	    BankSPRITE
   8+ 0000              					 ENDM
   9+ 0000
  10+ 0000              MMUSelectConsoleBank: MACRO
  11+ 0000 ~            					 nextreg ConsoleImageDataMMU,  BankConsole
  12+ 0000              					 ENDM
  13+ 0000
  14+ 0000              MMUSelectLayer1: 	 MACRO
  15+ 0000 ~            					 nextreg L1memMMU,		    BankLAYER1
  16+ 0000              					 ENDM
  17+ 0000
  18+ 0000              MMUSelectLayer2: 	 MACRO
  19+ 0000 ~            					 nextreg L2memMMU,		    BankLAYER2
  20+ 0000              					 ENDM
  21+ 0000
  22+ 0000              MMUSelectResetUniv:  MACRO
  23+ 0000 ~                                 nextreg  ResetUniverseMMU, BankResetUniv
  24+ 0000                                   ENDM
  25+ 0000
  26+ 0000              MMUSelectShipBank1:  MACRO
  27+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels1
  28+ 0000              					 ENDM
  29+ 0000              MMUSelectShipBank2:  MACRO
  30+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels2
  31+ 0000              					 ENDM
  32+ 0000              MMUSelectShipBank3:  MACRO
  33+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels3
  34+ 0000              					 ENDM
  35+ 0000              MMUSelectShipBank4:  MACRO
  36+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels4
  37+ 0000              					 ENDM
  38+ 0000
  39+ 0000              MMUSelectShipBankA   MACRO
  40+ 0000 ~            					 nextreg ShipModelMMU,	    a
  41+ 0000              					 ENDM
  42+ 0000
  43+ 0000              MMUSelectShipBankN:  MACRO value
  44+ 0000 ~            					 nextreg ShipModelMMU,	    value
  45+ 0000              					 ENDM
  46+ 0000
  47+ 0000              MMUSelectCommander:	 MACRO
  48+ 0000 ~                                 nextreg CommanderMMU,       BankCommander
  49+ 0000              					 ENDM
  50+ 0000
  51+ 0000              MMUSelectStockTable: MACRO
  52+ 0000 ~                                 nextreg StockTableMMU,     BankStockTable
  53+ 0000              					 ENDM
  54+ 0000
  55+ 0000              MMUSelectCpySrcA:    MACRO
  56+ 0000 ~                                 nextreg DMACpySourceMMU,	a
  57+ 0000              					 ENDM
  58+ 0000
  59+ 0000              MMUSelectCpySrcN:    MACRO value
  60+ 0000 ~                                 nextreg DMACpySourceMMU,	value
  61+ 0000              					 ENDM
  62+ 0000
  63+ 0000              MMUSelectSun:        MACRO
  64+ 0000 ~                                 nextreg SunMMU,            BankSunData
  65+ 0000                                   ENDM
  66+ 0000
  67+ 0000              MMUSelectPlanet:     MACRO
  68+ 0000 ~                                 nextreg PlanetMMU,         PlanetBankAddr
  69+ 0000                                   ENDM
  70+ 0000
  71+ 0000              MMUSelectUniverseA:  MACRO
  72+ 0000 ~                                 add    a,BankUNIVDATA0
  73+ 0000 ~                                 nextreg UniverseMMU,       a
  74+ 0000                                   ENDM
  75+ 0000
  76+ 0000              MMUSelectUniverseN:  MACRO value
  77+ 0000 ~                                 nextreg UniverseMMU,       BankUNIVDATA0+value
  78+ 0000                                   ENDM
  79+ 0000
  80+ 0000              MMUSelectGalaxyA:    MACRO
  81+ 0000 ~                                 nextreg GalaxyDataMMU,       a
  82+ 0000                                   ENDM
  83+ 0000
  84+ 0000              MMUSelectGalaxyN:    MACRO value
  85+ 0000 ~                                 nextreg GalaxyDataMMU,     BankGalaxyData0+value
  86+ 0000                                   ENDM
  87+ 0000              MMUSelectGalaxyACopy:MACRO
  88+ 0000 ~                                 nextreg UniverseMMU,       a
  89+ 0000                                   ENDM
  90+ 0000
  91+ 0000              MMUSelectUniverseAbs:MACRO value
  92+ 0000 ~                                 nextreg UniverseMMU,       value
  93+ 0000                                   ENDM
  94+ 0000
  95+ 0000              MMUSelectMenuGalCht: MACRO
  96+ 0000 ~                                 nextreg MenuGalChtMMU,		BankMenuGalCht
  97+ 0000              					 ENDM
  98+ 0000
  99+ 0000              MMUSelectMenuShrCht: MACRO
 100+ 0000 ~            					 nextreg MenuShrChtMMU,		BankMenuShrCht
 101+ 0000              					 ENDM
 102+ 0000
 103+ 0000              MMUSelectMenuInvent: MACRO
 104+ 0000 ~                                 nextreg MenuInventMMU,		BankMenuInvent
 105+ 0000              					 ENDM
 106+ 0000
 107+ 0000              MMUSelectMenuSystem: MACRO
 108+ 0000 ~                                 nextreg MenuSystemMMU,		BankMenuSystem
 109+ 0000              					 ENDM
 110+ 0000
 111+ 0000              MMUSelectMenuMarket: MACRO
 112+ 0000 ~                                 nextreg MenuMarketMMU,		BankMenuMarket
 113+ 0000              					 ENDM
 114+ 0000
 115+ 0000              MMUSelectMenuStatus: MACRO
 116+ 0000 ~                                 nextreg MenuStatusMMU,		BankMenuStatus
 117+ 0000              					 ENDM
 118+ 0000
 119+ 0000              MMUSelectViewFront:  MACRO
 120+ 0000 ~                                 nextreg ScreenBankMMU,		BankFrontView
 121+ 0000              					 ENDM
 122+ 0000
 123+ 0000              MMUSelectScreenA:    MACRO
 124+ 0000 ~                                 nextreg ScreenBankMMU,		a
 125+ 0000              					 ENDM
 126+ 0000
# file closed: ./Macros/MMUMacros.asm
  61  0000                                      INCLUDE "./Macros/NegateMacros.asm"
# file opened: ./Macros/NegateMacros.asm
   1+ 0000
   2+ 0000              NegIY:			    MACRO
   3+ 0000 ~                                xor a
   4+ 0000 ~                                sub iyl
   5+ 0000 ~                                ld iyl,a
   6+ 0000 ~                                sbc a,a
   7+ 0000 ~                                sub iyh
   8+ 0000 ~                                ld iyh,a
   9+ 0000                                  ENDM
  10+ 0000
  11+ 0000              NegHL:			    MACRO
  12+ 0000 ~                                xor a
  13+ 0000 ~                                sub l
  14+ 0000 ~                                ld l,a
  15+ 0000 ~                                sbc a,a
  16+ 0000 ~                                sub h
  17+ 0000 ~                                ld h,a
  18+ 0000                                  ENDM
  19+ 0000
  20+ 0000              NegDE:			    MACRO
  21+ 0000 ~                                xor a
  22+ 0000 ~                                sub e
  23+ 0000 ~                                ld e,a
  24+ 0000 ~                                sbc a,a
  25+ 0000 ~                                sub d
  26+ 0000 ~                                ld d,a
  27+ 0000                                  ENDM
  28+ 0000
  29+ 0000              NegBC:			    MACRO
  30+ 0000 ~                                xor a
  31+ 0000 ~                                sub c
  32+ 0000 ~                                ld c,a
  33+ 0000 ~                                sbc a,a
  34+ 0000 ~                                sub  b
  35+ 0000 ~                                ld b,a
  36+ 0000                                  ENDM
  37+ 0000
  38+ 0000              NegH                MACRO
  39+ 0000 ~                                ld      a,h
  40+ 0000 ~                                neg
  41+ 0000 ~                                ld      h,a
  42+ 0000                                  ENDM
  43+ 0000
  44+ 0000              NegD                MACRO
  45+ 0000 ~                                ld      a,d
  46+ 0000 ~                                neg
  47+ 0000 ~                                ld      d,a
  48+ 0000                                  ENDM
  49+ 0000
  50+ 0000              NegB                MACRO
  51+ 0000 ~                                ld      a,b
  52+ 0000 ~                                neg
  53+ 0000 ~                                ld      b,a
  54+ 0000                                  ENDM
  55+ 0000
# file closed: ./Macros/NegateMacros.asm
  62  0000                                      INCLUDE "./Macros/returnMacros.asm"
# file opened: ./Macros/returnMacros.asm
   1+ 0000              ReturnOnBitSet:         MACRO  reg, bitnbr,
   2+ 0000 ~                                    bit 	bitnbr,reg
   3+ 0000 ~                                    ret     nz
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ReturnOnMemBitSet:      MACRO mem, bitnbr
   7+ 0000 ~                                    ld   a,(mem)
   8+ 0000 ~                                    bit 	bitnbr,a
   9+ 0000 ~                                    ret     nz
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              ReturnOnBitClear:       MACRO reg, bitnbr
  13+ 0000 ~                                    bit 	bitnbr,reg
  14+ 0000 ~                                    ret		z
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              ReturnOnMemBitClear:    MACRO mem, bitnbr
  18+ 0000 ~                                    ld     a,(mem)
  19+ 0000 ~                                    bit 	bitnbr,a
  20+ 0000 ~                                    ret		z
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              ReturnIfMemFalse:       MACRO   mem
  24+ 0000 ~                                    ld      a,(mem)
  25+ 0000 ~                                    and     a
  26+ 0000 ~                                    ret     nz
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000              ReturnIfMemTrue:        MACRO   mem
  30+ 0000 ~                                    ld      a,(mem)
  31+ 0000 ~                                    and     a
  32+ 0000 ~                                    ret     z
  33+ 0000                                      ENDM
  34+ 0000
  35+ 0000              ReturnIfAIsZero:        MACRO
  36+ 0000 ~                                    and     a
  37+ 0000 ~                                    ret     z
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              ReturnIfMemisZero:      MACRO mem
  41+ 0000 ~                                    ld   a,(mem)
  42+ 0000 ~                                    and a
  43+ 0000 ~                                    ret    z
  44+ 0000                                      ENDM
  45+ 0000
  46+ 0000              ReturnIfBitMaskClear    MACRO   bitmask
  47+ 0000 ~                                    and     bitmask
  48+ 0000 ~                                    ret     z
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              ReturnIfBitMaskSet      MACRO   bitmask
  52+ 0000 ~                                    and     bitmask
  53+ 0000 ~                                    ret     nz
  54+ 0000                                      ENDM
  55+ 0000
  56+ 0000              ReturnIfMemEquN:        MACRO mem, value
  57+ 0000 ~                                    ld     a,(mem)
  58+ 0000 ~                                    cp     value
  59+ 0000 ~                                    ret    nz
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              ReturnIfMemNeNusng:     MACRO mem, value
  63+ 0000 ~                                    ld   a,(mem)
  64+ 0000 ~                                    cp     value
  65+ 0000 ~                                    ret    z
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              ReturnIfRegNotZero:     MACRO reg
  69+ 0000 ~                                    ld      a, reg
  70+ 0000 ~                                    and     a
  71+ 0000 ~                                    ret     nz
  72+ 0000                                      ENDM
  73+ 0000
  74+ 0000              ReturnIfANotZero:       MACRO
  75+ 0000 ~                                    and     a
  76+ 0000 ~                                    ret     nz
  77+ 0000                                      ENDM
  78+ 0000
  79+ 0000              ReturnIfNotZero:        MACRO
  80+ 0000 ~                                    ret     nz
  81+ 0000                                      ENDM
  82+ 0000
  83+ 0000
  84+ 0000              ReturnIfNegative:       MACRO
  85+ 0000 ~                                    ret     m
  86+ 0000                                      ENDM
  87+ 0000
  88+ 0000
  89+ 0000              ReturnIfMemNotZero:     MACRO mem
  90+ 0000 ~                                    ld     a,(mem)
  91+ 0000 ~                                    and     a
  92+ 0000 ~                                    ret    nz
  93+ 0000                                      ENDM
  94+ 0000
  95+ 0000              ReturnIfAGTEusng:       MACRO value
  96+ 0000 ~                                    cp    value
  97+ 0000 ~                                    ret	 nc
  98+ 0000                                      ENDM
  99+ 0000
 100+ 0000              ReturnIfALTNusng:       MACRO value
 101+ 0000 ~                                    cp    value
 102+ 0000 ~                                    ret	 c
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              ReturnIfAGTENusng:      MACRO value
 106+ 0000 ~                                    cp    value
 107+ 0000 ~                                    ret	 nc
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              ReturnIfAGTEMemusng:    MACRO value
 111+ 0000 ~                                    ld      hl,value
 112+ 0000 ~                                    cp      (hl)
 113+ 0000 ~                                    ret	    nc
 114+ 0000                                      ENDM
 115+ 0000
 116+ 0000              ReturnIfANENusng:       MACRO value
 117+ 0000 ~                                    cp      value
 118+ 0000 ~                                    ret     nz
 119+ 0000                                      ENDM
 120+ 0000
 121+ 0000              ReturnIfAEqNusng:       MACRO value
 122+ 0000 ~                                    cp      value
 123+ 0000 ~                                    ret     z
 124+ 0000                                      ENDM
 125+ 0000
# file closed: ./Macros/returnMacros.asm
  63  0000                                      INCLUDE "./Macros/ShiftMacros.asm"
# file opened: ./Macros/ShiftMacros.asm
   1+ 0000              ShiftIYRight1: MACRO
   2+ 0000 ~            			   ld 	a,iyh
   3+ 0000 ~            			   srl 	a
   4+ 0000 ~            			   ld	iyh,a
   5+ 0000 ~            			   ld 	a,iyl
   6+ 0000 ~            			   rra
   7+ 0000 ~            			   ld	iyl,a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000              ShiftHLRight1: MACRO
  11+ 0000 ~            			   srl h
  12+ 0000 ~            			   rr  l
  13+ 0000              			   ENDM
  14+ 0000
  15+ 0000              ShiftDERight1: MACRO
  16+ 0000 ~            			   srl d
  17+ 0000 ~            			   rr  e
  18+ 0000              			   ENDM
  19+ 0000
  20+ 0000              ShiftBCRight1: MACRO
  21+ 0000 ~            			   srl b
  22+ 0000 ~            			   rr  c
  23+ 0000              			   ENDM
  24+ 0000
  25+ 0000
  26+ 0000
  27+ 0000              ShiftHLDiv8:   MACRO
  28+ 0000 ~            			   srl h
  29+ 0000 ~            			   rr  l
  30+ 0000 ~            			   srl h
  31+ 0000 ~            			   rr  l
  32+ 0000 ~            			   srl h
  33+ 0000 ~            			   rr  l
  34+ 0000              			   ENDM
  35+ 0000
  36+ 0000              ShiftHLLeft1:  MACRO
  37+ 0000 ~            			   sla l
  38+ 0000 ~            			   rl  h
  39+ 0000              			   ENDM
  40+ 0000
  41+ 0000              ShiftDELeft1:  MACRO
  42+ 0000 ~            			   sla e
  43+ 0000 ~            			   rl  d
  44+ 0000              			   ENDM
  45+ 0000
  46+ 0000
  47+ 0000              RollDELeft1:   MACRO
  48+ 0000 ~                           rl  e
  49+ 0000 ~                           rl  d
  50+ 0000                             ENDM
  51+ 0000
  52+ 0000              ShiftBCLeft1:  MACRO
  53+ 0000 ~            			   sla c
  54+ 0000 ~            			   rl  b
  55+ 0000              			   ENDM
  56+ 0000
  57+ 0000
  58+ 0000              ShiftMem16Right1:   MACRO memaddr
  59+ 0000 ~                                ld    hl,(memaddr)
  60+ 0000 ~                                srl   h
  61+ 0000 ~                                rr    l
  62+ 0000 ~                                ld    (memaddr),hl
  63+ 0000                                  ENDM
  64+ 0000
  65+ 0000              ShiftMem8Right1:    MACRO memaddr
  66+ 0000 ~                                ld      a,(memaddr)
  67+ 0000 ~                                srl     a
  68+ 0000 ~                                ld      (memaddr),a
  69+ 0000                                  ENDM
  70+ 0000
  71+ 0000
  72+ 0000              ShiftMem8Left1A:    MACRO memaddr
  73+ 0000 ~                                ld      a,(memaddr)
  74+ 0000 ~                                sla     a
  75+ 0000 ~                                ld      (memaddr),a
  76+ 0000                                  ENDM
  77+ 0000
# file closed: ./Macros/ShiftMacros.asm
  64  0000                                      INCLUDE "./Macros/signBitMacros.asm"
# file opened: ./Macros/signBitMacros.asm
   1+ 0000              ClearSignBitMem:        MACRO mem
   2+ 0000 ~                                    ld      a,(mem)
   3+ 0000 ~                                    and     SignMask8Bit
   4+ 0000 ~                                    ld      (mem),a
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              SetSignBitMem:          MACRO   mem
   8+ 0000 ~                                    ld      a,(mem)
   9+ 0000 ~                                    or      SignOnly8Bit
  10+ 0000 ~                                    ld      (mem),a
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              FlipSignMem:            MACRO mem
  14+ 0000 ~                                    ld  a,(mem)
  15+ 0000 ~                                    xor SignOnly8Bit
  16+ 0000 ~                                    ld  (mem),a
  17+ 0000                                      ENDM
  18+ 0000
  19+ 0000              ClearSignBit:           MACRO reg
  20+ 0000 ~                                    ld      a,reg
  21+ 0000 ~                                    and     SignMask8Bit
  22+ 0000 ~                                    ld      reg,a
  23+ 0000                                      ENDM
  24+ 0000
  25+ 0000              SetSignBit:             MACRO   reg
  26+ 0000 ~                                    ld      a,reg
  27+ 0000 ~                                    or      SignOnly8Bit
  28+ 0000 ~                                    ld      reg,a
  29+ 0000                                      ENDM
  30+ 0000
  31+ 0000              FlipSignBit:            MACRO   reg
  32+ 0000 ~                                    ld      a,reg
  33+ 0000 ~                                    xor     SignOnly8Bit
  34+ 0000 ~                                    ld      reg,a
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              ClearSignBitA:          MACRO
  38+ 0000 ~                                    and     SignMask8Bit
  39+ 0000                                      ENDM
  40+ 0000
  41+ 0000              SetSignBitA:            MACRO
  42+ 0000 ~                                    or      SignOnly8Bit
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              FlipSignBitA:           MACRO
  46+ 0000 ~                                    xor     SignOnly8Bit
  47+ 0000                                      ENDM
  48+ 0000
# file closed: ./Macros/signBitMacros.asm
  65  0000                                      INCLUDE "./Tables/message_queue_macros.asm"
# file opened: ./Tables/message_queue_macros.asm
   1+ 0000
   2+ 0000              AnyMessagesMacro:       MACRO   NoMessageTarget
   3+ 0000 ~                                    ld      a, (MessageCount)
   4+ 0000 ~                                    and     a
   5+ 0000 ~                                    jr      z, NoMessageTarget
   6+ 0000                                      ENDM
   7+ 0000
   8+ 0000              AnyHyperSpaceMacro:     MACRO   NoMessageText
   9+ 0000 ~                                    ld      hl,(InnerHyperCount)
  10+ 0000 ~                                    ld      a,h
  11+ 0000 ~                                    or      l
  12+ 0000 ~                                    jr      z, NoMessageText
  13+ 0000                                      ENDM
  14+ 0000
# file closed: ./Tables/message_queue_macros.asm
  66  0000                                      INCLUDE "./Variables/general_variables_macros.asm"
# file opened: ./Variables/general_variables_macros.asm
   1+ 0000              ; limited to 255 character length
   2+ 0000              CountLengthHL:          MACRO   Limiter
   3+ 0000 ~                                    ld      de,hl
   4+ 0000 ~                                    ld      bc,Limiter
   5+ 0000 ~                                    xor     a
   6+ 0000 ~                                    cpir
   7+ 0000 ~                                    ClearCarryFlag
   8+ 0000 ~                                    sbc     hl,de
   9+ 0000 ~                                    ld      a,l
  10+ 0000 ~                                    ret
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              HalfLengthHL:           MACRO
  14+ 0000 ~                                    ld      b,0
  15+ 0000 ~            .CountLenLoop:          ld      a,(hl)
  16+ 0000 ~                                    cp      0
  17+ 0000 ~                                    jr      z,.DoneCount
  18+ 0000 ~                                    inc     b
  19+ 0000 ~                                    inc     hl
  20+ 0000 ~                                    jr      .CountLenLoop
  21+ 0000 ~            .DoneCount:             ld      a,32
  22+ 0000 ~                                    sub     b
  23+ 0000 ~                                    sra     a
  24+ 0000                                      ENDM
  25+ 0000
  26+ 0000              MakeInnocentMacro:		MACRO
  27+ 0000 ~            						xor		a
  28+ 0000 ~            						ld		(FugitiveInnocentStatus),a
  29+ 0000              						ENDM
  30+ 0000
  31+ 0000              NoEscapePodMacro:		MACRO
  32+ 0000 ~            						xor		a
  33+ 0000 ~            						ld		(EscapePod),a
  34+ 0000              						ENDM
  35+ 0000
  36+ 0000              MaxFuelLevel            EQU     70              ; 7.0 light years max
  37+ 0000              MaxFuelMacro:			MACRO
  38+ 0000 ~            						ld		a,MaxFuelLevel
  39+ 0000 ~            						ld		(Fuel),a
  40+ 0000              						ENDM
  41+ 0000
  42+ 0000              MaxThrottle:            MACRO
  43+ 0000 ~                                    ld      a,(SHIPMAXSPEED)
  44+ 0000 ~                                    ld      (DELTA),a
  45+ 0000 ~                                    ld      d,a
  46+ 0000 ~                                    ld      e,4
  47+ 0000 ~                                    mul
  48+ 0000 ~                                    ld      (DELT4Lo),de
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              ZeroThrottle:           MACRO
  52+ 0000 ~                                    xor     a
  53+ 0000 ~                                    ld      (DELTA),a
  54+ 0000 ~                                    ld      (DELT4Lo),a
  55+ 0000 ~                                    ld      (DELT4Lo+1),a
  56+ 0000                                      ENDM
  57+ 0000
  58+ 0000              ZeroPitch:              MACRO
  59+ 0000 ~                                    xor     a
  60+ 0000 ~                                    ld      (BET2),a
  61+ 0000 ~                                    ld      (BET2FLIP),a
  62+ 0000 ~                                    ld      (JSTY),a
  63+ 0000 ~                                    ld      (BETA),a
  64+ 0000                                      ENDM
  65+ 0000
  66+ 0000              ZeroRoll:               MACRO
  67+ 0000 ~                                    xor     a                              ; zero roll and climb
  68+ 0000 ~                                    ld      (ALP2),a
  69+ 0000 ~                                    ld      (ALP2FLIP),a
  70+ 0000 ~                                    ld      (JSTX),a
  71+ 0000 ~                                    ld      (ALPHA),a
  72+ 0000                                      ENDM
  73+ 0000
  74+ 0000              CorrectPostJumpFuel:    MACRO
  75+ 0000 ~                                    ld      a,(Fuel)
  76+ 0000 ~                                    ld      hl,Distance
  77+ 0000 ~                                    sub     a,(hl)
  78+ 0000 ~                                    ld      (Fuel),a
  79+ 0000                                      ENDM
  80+ 0000
  81+ 0000              AnyMissilesLeft:        MACRO
  82+ 0000 ~                                    ld      a,(NbrMissiles)
  83+ 0000 ~                                    and     a
  84+ 0000                                      ENDM
  85+ 0000
  86+ 0000              SetMissileTargetA:      MACRO
  87+ 0000 ~                                    ld      (MissileTarget),a
  88+ 0000                                      ENDM
  89+ 0000
  90+ 0000              IsMissileLockedOn:      MACRO
  91+ 0000 ~                                    ld      a,(MissileTarget)
  92+ 0000 ~                                    cp      $FF
  93+ 0000 ~                                    ret     z
  94+ 0000 ~                                    ReturnIfSlotAEmpty                  ; if target slot is empty
  95+ 0000 ~                                    ret                                 ; will return as nz now
  96+ 0000                                      ENDM
  97+ 0000
  98+ 0000              ClearMissileTarget:     MACRO
  99+ 0000 ~                                    xor     a                           ; Set missile target to FF
 100+ 0000 ~                                    dec     a
 101+ 0000 ~                                    ld      (MissileTarget),a
 102+ 0000 ~                                    SetMemFalse MissileLaunchFlag
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              ClearECM:               MACRO
 106+ 0000 ~                                    xor     a
 107+ 0000 ~                                    ld      (ECMLoopA),a
 108+ 0000 ~                                    ld      (ECMLoopB),a
 109+ 0000                                      ENDM
 110+ 0000
 111+ 0000              ChargeEnergyAndShields: MACRO
 112+ 0000 ~                                    ld      a,$FF
 113+ 0000 ~                                    ld      (PlayerEnergy),a
 114+ 0000 ~                                    ld      (ForeShield),a
 115+ 0000 ~                                    ld      (AftShield),a
 116+ 0000                                      ENDM
 117+ 0000
 118+ 0000              CopyPresentSystemToTarget: MACRO
 119+ 0000 ~                                    ld      hl,(PresentSystemX)
 120+ 0000 ~                                    ld      (TargetSystemX),hl
 121+ 0000                                      ENDM
 122+ 0000
 123+ 0000              CopyTargetSystemToPresent: MACRO
 124+ 0000 ~                                    ld      hl,(TargetSystemX)
 125+ 0000 ~                                    ld      (PresentSystemX),hl
 126+ 0000                                      ENDM
 127+ 0000
 128+ 0000              HalveFugitiveStatus:    MACRO
 129+ 0000 ~                                    ld      hl,FugitiveInnocentStatus
 130+ 0000 ~                                    srl     (hl)
 131+ 0000                                      ENDM
 132+ 0000
 133+ 0000              ClearForceTransition    MACRO
 134+ 0000 ~                                    ld      a,$FF
 135+ 0000 ~                                    ld      (ScreenTransitionForced),a
 136+ 0000                                      ENDM
 137+ 0000
 138+ 0000              ForceTransition:        MACRO newScreen
 139+ 0000 ~                                    ld      a,newScreen
 140+ 0000 ~                                    ld      (ScreenTransitionForced), a
 141+ 0000                                      ENDM
 142+ 0000
 143+ 0000              IsSpaceStationPresent:  MACRO
 144+ 0000 ~                                    ld      a,(SpaceStationSafeZone)
 145+ 0000 ~                                    and     a
 146+ 0000                                      ENDM
 147+ 0000
 148+ 0000              SetSafeZone:            MACRO
 149+ 0000 ~                                    xor     a
 150+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 151+ 0000                                      ENDM
 152+ 0000
 153+ 0000              ClearSafeZone:          MACRO
 154+ 0000 ~                                    ld      a,$FF
 155+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 156+ 0000                                      ENDM
 157+ 0000
 158+ 0000              ClearTemperatures:      MACRO
 159+ 0000 ~                                    xor     a
 160+ 0000 ~                                    ld      (CabinTemperature),a
 161+ 0000 ~                                    ld      (GunTemperature),a
 162+ 0000                                      ENDM
 163+ 0000
 164+ 0000              CoolCabin:              MACRO
 165+ 0000 ~                                    ld      a,(CabinTemperature)
 166+ 0000 ~                                    and     a
 167+ 0000 ~                                    jr      z,.AlreadyCool
 168+ 0000 ~                                    dec     a
 169+ 0000 ~                                    ld      (CabinTemperature),a
 170+ 0000 ~            .AlreadyCool:
 171+ 0000                                      ENDM
 172+ 0000
 173+ 0000              CoolLasers:             MACRO
 174+ 0000 ~                                    ld      a,(GunTemperature)
 175+ 0000 ~                                    and     a
 176+ 0000 ~                                    jr      z,.AlreadyCool
 177+ 0000 ~                                    dec     a
 178+ 0000 ~                                    ld      (GunTemperature),a
 179+ 0000 ~            .AlreadyCool:
 180+ 0000                                      ENDM
 181+ 0000
 182+ 0000              ; type 255 is "not fitted"
 183+ 0000
 184+ 0000
 185+ 0000              InitEventCounter:       MACRO
 186+ 0000 ~                                    xor     a
 187+ 0000 ~                                    ld      (EventCounter),a
 188+ 0000                                      ENDM
 189+ 0000
 190+ 0000              ClearMissJump:          MACRO
 191+ 0000 ~                                    ld      a,$FF
 192+ 0000 ~                                    ld      (MissJumpFlag),a
 193+ 0000                                      ENDM
 194+ 0000
 195+ 0000
 196+ 0000              DrainSystem:            MACRO   SystemMem, DrainMem
 197+ 0000 ~                                    ld      a,(DrainMem)
 198+ 0000 ~                                    ld      b,a
 199+ 0000 ~                                    ld      a,(SystemMem)
 200+ 0000 ~                                    sub     a,b
 201+ 0000 ~                                    ld      (SystemMem),a
 202+ 0000 ~                                    jr      c,.ZeroSystem
 203+ 0000 ~                                    jp      .ExitPoint
 204+ 0000 ~            .ZeroSystem:            ZeroA
 205+ 0000 ~                                    ld      (SystemMem),a
 206+ 0000 ~            .ExitPoint
 207+ 0000                                      ENDM
 208+ 0000
 209+ 0000              BoostSystem:            MACRO   SystemMem, BoostMem
 210+ 0000 ~                                    ld      a,(BoostMem)
 211+ 0000 ~                                    ld      b,a
 212+ 0000 ~                                    ld      a,(SystemMem)
 213+ 0000 ~                                    add     b
 214+ 0000 ~                                    ld      (SystemMem),a
 215+ 0000 ~                                    jr      c, .MaxSystem
 216+ 0000 ~                                    jp      .ExitPoint
 217+ 0000 ~            .MaxSystem:             ld      a,255
 218+ 0000 ~                                    ld      (SystemMem),a
 219+ 0000 ~            .ExitPoint
 220+ 0000                                      ENDM
 221+ 0000
# file closed: ./Variables/general_variables_macros.asm
  67  0000                                      INCLUDE "./Variables/UniverseSlot_macros.asm"
# file opened: ./Variables/UniverseSlot_macros.asm
   1+ 0000
   2+ 0000              AddJunkCount:           MACRO
   3+ 0000 ~                                    ld      hl,JunkCount
   4+ 0000 ~                                    inc     (hl)
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              SubJunkCount:           MACRO
   8+ 0000 ~                                    ld      hl,JunkCount
   9+ 0000 ~                                    dec     (hl)
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              AddCop:                 MACRO
  13+ 0000 ~                                    ld      hl,CopCount
  14+ 0000 ~                                    inc     (hl)
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              SubCop:                 MACRO
  18+ 0000 ~                                    ld      hl,CopCount
  19+ 0000 ~                                    dec     (hl)
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              AddPirateCount:         MACRO
  23+ 0000 ~                                    ld      hl,PirateCount
  24+ 0000 ~                                    inc     (hl)
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              SubPirateCount:         MACRO
  28+ 0000 ~                                    ld      hl,PirateCount
  29+ 0000 ~                                    inc     (hl)
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              AreCopsPresent:         MACRO
  33+ 0000 ~                                    ld      a,(CopCount)
  34+ 0000 ~                                    and     a
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              TestRoomForJunk:        MACRO   Target
  38+ 0000 ~                                    ld      a,3
  39+ 0000 ~                                    JumpIfALTMemusng    JunkCount, Target
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              JumpIfSpaceStation:     MACRO   Target
  43+ 0000 ~                                    ld      hl,UniverseSlotType
  44+ 0000 ~                                    ld      a,(hl)
  45+ 0000 ~                                    cp      ShipTypeStation
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000
  49+ 0000              ; Checks if slot is empty else A = ship type
  50+ 0000              ReturnIfSlotAEmpty:     MACRO
  51+ 0000 ~                                    ld      hl,UniverseSlotList
  52+ 0000 ~                                    add     hl,a
  53+ 0000 ~                                    ld      a,(hl)
  54+ 0000 ~                                    inc     a
  55+ 0000 ~                                    ret     z           ; if slot was ff inc would make it 0
  56+ 0000 ~                                    dec     a           ; get original value back for later
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000              JumpIfSlotAEmpty:       MACRO   Target
  60+ 0000 ~                                    ld      hl,UniverseSlotList
  61+ 0000 ~                                    add     hl,a
  62+ 0000 ~                                    ld      a,(hl)
  63+ 0000 ~                                    inc     a
  64+ 0000 ~                                    jp      z,Target    ; if slot was ff inc would make it 0
  65+ 0000 ~                                    dec     a           ; get original value back for later
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              JumpIfSlotHLEmpty:      MACRO   Target
  69+ 0000 ~                                    ld      a,(hl)
  70+ 0000 ~                                    and     a
  71+ 0000 ~                                    jr      nz,Target
  72+ 0000                                      ENDM
# file closed: ./Variables/UniverseSlot_macros.asm
  68  0000
  69  0000                                      INCLUDE "./Data/ShipIdEquates.asm"
# file opened: ./Data/ShipIdEquates.asm
   1+ 0000              ShipID_Adder            EQU 00
   2+ 0000              ShipID_Anaconda         EQU 01
   3+ 0000              ShipID_Asp_Mk_2         EQU 02
   4+ 0000              ShipID_Boa              EQU 03
   5+ 0000              ShipID_CargoType5       EQU 04
   6+ 0000              ShipID_Boulder          EQU 05
   7+ 0000              ShipID_Asteroid         EQU 06
   8+ 0000              ShipID_Bushmaster       EQU 07
   9+ 0000              ShipID_Chameleon        EQU 08
  10+ 0000              ShipID_CobraMk3         EQU 09
  11+ 0000              ShipID_Cobra_Mk_1       EQU 10
  12+ 0000              ShipID_Cobra_Mk_3_P     EQU 11
  13+ 0000              ShipID_Constrictor      EQU 12
  14+ 0000              ShipID_Coriolis         EQU 13
  15+ 0000              ShipID_Cougar           EQU 14
  16+ 0000              ShipID_Dodo             EQU 15
  17+ 0000              ShipID_Dragon           EQU 16
  18+ 0000              ShipID_Escape_Pod       EQU 17
  19+ 0000              ShipID_Fer_De_Lance     EQU 18
  20+ 0000              ShipID_Gecko            EQU 19
  21+ 0000              ShipID_Ghavial          EQU 20
  22+ 0000              ShipID_Iguana           EQU 21
  23+ 0000              ShipID_Krait            EQU 22
  24+ 0000              ShipID_Logo             EQU 23
  25+ 0000              ShipID_Mamba            EQU 24
  26+ 0000              ShipID_Missile          EQU 25
  27+ 0000              ShipID_Monitor          EQU 26
  28+ 0000              ShipID_Moray            EQU 27
  29+ 0000              ShipID_Ophidian         EQU 28
  30+ 0000              ShipID_Plate            EQU 29
  31+ 0000              ShipID_Python           EQU 30
  32+ 0000              ShipID_Python_P         EQU 31
  33+ 0000              ShipID_Rock_Hermit      EQU 32
  34+ 0000              ShipID_ShuttleType9     EQU 33
  35+ 0000              ShipID_Shuttle_Mk_2     EQU 34
  36+ 0000              ShipID_Sidewinder       EQU 35
  37+ 0000              ShipID_Splinter         EQU 36
  38+ 0000              ShipID_TestVector       EQU 37
  39+ 0000              ShipID_Thargoid         EQU 38
  40+ 0000              ShipID_Thargon          EQU 39
  41+ 0000              ShipID_TransportType10  EQU 40
  42+ 0000              ShipID_Viper            EQU 41
  43+ 0000              ShipID_Worm             EQU 42
  44+ 0000              ShipID_Rattler          EQU 43
  45+ 0000
# file closed: ./Data/ShipIdEquates.asm
  70  0000
  71  0000              InputMainMacro:         MACRO
  72  0000 ~                                    call    ViewKeyTest
  73  0000 ~                                    call    TestPauseMode
  74  0000 ~                                    ld      a,(GamePaused)
  75  0000 ~                                    cp      0
  76  0000 ~                                    jr      nz,MainLoop
  77  0000 ~                                    call    MovementKeyTest
  78  0000                                      ENDM
  79  0000
  80  0000              DecrementIfPossible:    MACRO   memaddr,notpossjp
  81  0000 ~                                    JumpIfMemZero memaddr, notpossjp
  82  0000 ~                                    dec     a
  83  0000 ~                                    ld      (memaddr),a
  84  0000                                      ENDM
  85  0000
  86  0000              UpdateOnCounter:        MACRO
  87  0000 ~                                    DecrementIfPossible  CurrLaserPulseOnCount, .UpdateOnDone
  88  0000 ~                                    JumpIfAIsNotZero     .UpdateOnDone
  89  0000 ~                                    ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount
  90  0000 ~            .UpdateOnDone:
  91  0000                                      ENDM
  92  0000
  93  0000              UpdateOffCounter:       MACRO
  94  0000 ~                                    DecrementIfPossible  CurrLaserPulseOffCount,  .UpdateOffDone
  95  0000 ~                                    JumpIfAIsNotZero     .UpdateOffDone
  96  0000 ~                                    JumpIfMemNeMemusng   CurrLaserPulseRate, CurrLaserPulseRateCount, .UpdateOffDone
  97  0000 ~                                    ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount
  98  0000 ~            .UpdateOffDone:
  99  0000                                      ENDM
 100  0000
 101  0000              UpdateRestCounter:      MACRO
 102  0000 ~                                    DecrementIfPossible CurrLaserPulseRestCount, .UpdateRestDone                     ; if pulse rest > 0 then  pulse rest --
 103  0000 ~            .DonePulseRest:         JumpIfMemNotZero CurrLaserPulseRestCount, .UpdateRestDone                        ; if pulse rest = 0
 104  0000 ~            .ResetRate:             ZeroA                                                                           ;    then pulse rate count = 0
 105  0000 ~                                    ld      (CurrLaserPulseRateCount),a                                             ;    .
 106  0000 ~            .UpdateRestDone
 107  0000                                      ENDM
 108  0000
 109  0000
 110  0000              UpdateLaserCounters:    MACRO
 111  0000 ~
 112  0000 ~                                    UpdateOnCounter
 113  0000 ~                                    UpdateOffCounter
 114  0000 ~                                    UpdateRestCounter
 115  0000                                      ENDM
 116  0000
 117  0000              UpdateLaserCountersold: MACRO
 118  0000 ~                                    JumpIfMemZero CurrLaserPulseOnCount,   .SkipPulseOn     ; if beam on count > 0 then beam on count --
 119  0000 ~                                    dec     a                                               ; .
 120  0000 ~                                    ld      (CurrLaserPulseOnCount),a                       ; .
 121  0000 ~            .SkipPulseOn:           JumpIfAIsNotZero  .SkipRestCounter                      ;    if beam on = 0 then
 122  0000 ~                                    ld      a,(CurrLaserPulseOffCount)                      ;       if beam off > 0 then  beam off --
 123  0000 ~                                    JumpIfMemZero CurrLaserPulseOffCount, .SkipPulseOff     ;       .
 124  0000 ~                                    dec     a                                               ;       .
 125  0000 ~                                    ld      (CurrLaserPulseOffCount),a                      ;       .
 126  0000 ~            .SkipPulseOff:          JumpIfAIsNotZero  .SkipRestCounter                      ;       if beam off = 0
 127  0000 ~                                    JumpIfMemZero CurrLaserPulseRestCount, .ZeroRateCounter ;
 128  0000 ~                                    dec     a
 129  0000 ~                                    ld      (CurrLaserPulseRestCount),a
 130  0000 ~                                    jr      nz,.SkipRestCounter
 131  0000 ~            .ZeroRateCounter:       ld      (CurrLaserPulseRateCount),a
 132  0000 ~            .SkipRestCounter:
 133  0000                                      ENDM
 134  0000
 135  0000
 136  0000              charactersetaddr		equ 15360
 137  0000              STEPDEBUG               equ 1
 138  0000
 139  0000              TopOfStack              equ $7F00
 140  0000
 141  0000              EliteNextStartup:       ORG         $8000
 142  8000 F3                                   di
 143  8001                                      ; "STARTUP"
 144  8001                                      ; Make sure  rom is in page 0 during load
 145  8001                                      MMUSelectLayer2
 145  8001 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 146  8005 CD 0E E0                             call        asm_disable_l2_readwrite
 147  8008                                      MMUSelectROMS
 147  8008 ED 91 50 FF >                     nextreg EXSDOSMMU0,        BankROM
 147  800C ED 91 51 FF >                     nextreg EXSDOSMMU1,        BankROM
 148  8010              .GenerateDefaultCmdr:   MMUSelectCommander
 148  8010 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 149  8014 CD 45 E2                             call		defaultCommander
 150  8017 CD 18 E2                             call        saveCommander
 151  801A                                      MMUSelectLayer1
 151  801A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152  801E CD 80 E0                             call		l1_cls
 153  8021 3E 07                                ld			a,7
 154  8023 CD 9B E0                             call		l1_attr_cls_to_a
 155  8026 3E FF                                ld          a,$FF
 156  8028 CD A5 E0                             call        l1_set_border
 157  802B                                      MMUSelectSpriteBank
 157  802B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 158  802F CD 45 E4                             call		sprite_load_sprite_data
 159  8032              Initialise:             MMUSelectLayer2
 159  8032 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 160  8036 CD FA E0                             call 		l2_initialise
 161  8039 CD 3E 97                             call        init_keyboard
 162  803C                                      ClearForceTransition
 162  803C 3E FF       >                        ld      a,$FF
 162  803E 32 96 87    >                        ld      (ScreenTransitionForced),a
 163  8041 3E 10        TidyDEBUG:              ld          a,16
 164  8043 32 64 86                             ld          (TidyCounter),a
 165  8046 AF           TestText:               xor			a
 166  8047 32 64 99                             ld      (JSTX),a
 167  804A              DEBUGCODE:              ClearSafeZone ; just set in open space so compas treacks su n
 167  804A 3E FF       >                        ld      a,$FF
 167  804C 32 3E 9B    >                        ld      (SpaceStationSafeZone),a
 168  804F                                      MMUSelectSpriteBank
 168  804F ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 169  8053 CD 3D E4                             call		init_sprites
 170  8056              .ClearLayer2Buffers:    DoubleBufferIfPossible
 170  8056             >                        IFDEF DOUBLEBUFFER
 170  8056             >                            MMUSelectLayer2
 170  8056 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 170  805A CD F3 E0    >                            call  l2_cls
 170  805D CD 07 E1    >                            call  l2_flip_buffers
 170  8060             >                        ENDIF
 171  8060                                      DoubleBufferIfPossible
 171  8060             >                        IFDEF DOUBLEBUFFER
 171  8060             >                            MMUSelectLayer2
 171  8060 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 171  8064 CD F3 E0    >                            call  l2_cls
 171  8067 CD 07 E1    >                            call  l2_flip_buffers
 171  806A             >                        ENDIF
 172  806A              ; Set up all 8 galaxies, 7later this will be pre built and loaded into memory from files
 173  806A CD 97 87     InitialiseGalaxies:     call		ResetUniv                       ; Reset ship data
 174  806D CD BF 87                             call        ResetGalaxy                     ; Reset each galaxy copying in code
 175  8070 CD E8 87                             call        SeedAllGalaxies
 176  8073 CD 95 90     StartAttractMode:       call        AttractMode
 177  8076                                      JumpIfAIsZero  .SkipDefault
 177  8076 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 177  8077 CA 84 80    >                        jp	z, .SkipDefault
 178  807A                                      MMUSelectCommander
 178  807A ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 179  807E CD 45 E2                             call		defaultCommander
 180  8081 C3 84 80                             jp          InitialiseMainLoop
 180  8084
 181  8084              .SkipDefault
 182  8084              ;                        call    FindNextFreeSlotInA
 183  8084              ;                        ld      b,a
 184  8084              ;                        ld      a,13 ;Coriolis station
 185  8084              ;                        call    InitialiseShipAUnivB
 186  8084              ;                        xor     a
 187  8084 CD 4F 9E     InitialiseMainLoop:     call    InitMainLoop
 188  8087              ;..MAIN GAME LOOP..................................................................................................................
 189  8087              ; MACRO BLOCKS.....................................................................................................................
 190  8087              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
 191  8087
 192  8087
 193  8087
 194  8087              ; if beam on count > 0
 195  8087              ;    then beam on count --
 196  8087              ;         if beam on count = 0
 197  8087              ;            then beam off count = beam off
 198  8087              ; if beam off > 0
 199  8087              ;    then beam off --
 200  8087              ;         if beam off = 0 and pulse rate count = max count
 201  8087              ;            then pulse rest count = pulse rest
 202  8087              ; if pulse rest > 0 then pulse rest --
 203  8087              ;    if pulse rest = 0
 204  8087              ;       then pulse rate count = 0
 205  8087
 206  8087
 207  8087              ; counter logic
 208  8087              ;    if beam on count > 0 then beam on count --
 209  8087              ;    if beam on = 0 then
 210  8087              ;       if beam off count >0 then beam off count --
 211  8087              ;       if beam off count = 0 them
 212  8087              ;          if pulse rest count > 0 then pulse rest count --
 213  8087              ;             if reset count = 0 then pulse rate count = 0
 214  8087              ; shoting logic
 215  8087              ;    if pulse on count is 0 and pulse off count is 0 and rest count is 0
 216  8087              ;       then  if fire pressed is OK
 217  8087              ;                if not beam type
 218  8087              ;                   then pulse rate count ++
 219  8087              ;                        if pulse rate count < pulse max count
 220  8087              ;                           then pulse on count = pulse on time
 221  8087              ;                                pulse off count = pulse off time
 222  8087              ;                                pulse rest count = pulse rest time
 223  8087              ;                           else pulse rest count = pulse rest time
 224  8087              ;                                pulse rate count, pulse on count, pulse off count = 0
 225  8087              ;                   else pulse on count = $FF
 226  8087              ;                        pulse off time , rest time = 0
 227  8087
 228  8087              ;..................................................................................................................................
 229  8087 CD 61 9F     MainLoop:	            call    doRandom                            ; redo the seeds every frame
 230  808A                                      UpdateLaserCounters
 230  808A             >
 230  808A             >                        UpdateOnCounter
 230  808A             >                        DecrementIfPossible  CurrLaserPulseOnCount, .UpdateOnDone
 230  808A             >                        JumpIfMemZero CurrLaserPulseOnCount, .UpdateOnDone
 230  808A 3A 69 9D    >                        ld  a,(CurrLaserPulseOnCount)
 230  808D A7          >                        and a
 230  808E CA A0 80    >                        jp  z,.UpdateOnDone
 230  8091 3D          >                        dec     a
 230  8092 32 69 9D    >                        ld      (CurrLaserPulseOnCount),a
 230  8095             >                        JumpIfAIsNotZero     .UpdateOnDone
 230  8095 FE 00       >                        cp	0
 230  8097 C2 A0 80    >                        jp	nz,.UpdateOnDone
 230  809A             >                        ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount
 230  809A 3A 67 9D    >                        ld       a,(CurrLaserPulseOffTime)
 230  809D 32 6A 9D    >                        ld       (CurrLaserPulseOffCount),a
 230  80A0             >.UpdateOnDone:
 230  80A0             >                        UpdateOffCounter
 230  80A0             >                        DecrementIfPossible  CurrLaserPulseOffCount,  .UpdateOffDone
 230  80A0             >                        JumpIfMemZero CurrLaserPulseOffCount, .UpdateOffDone
 230  80A0 3A 6A 9D    >                        ld  a,(CurrLaserPulseOffCount)
 230  80A3 A7          >                        and a
 230  80A4 CA C0 80    >                        jp  z,.UpdateOffDone
 230  80A7 3D          >                        dec     a
 230  80A8 32 6A 9D    >                        ld      (CurrLaserPulseOffCount),a
 230  80AB             >                        JumpIfAIsNotZero     .UpdateOffDone
 230  80AB FE 00       >                        cp	0
 230  80AD C2 C0 80    >                        jp	nz,.UpdateOffDone
 230  80B0             >                        JumpIfMemNeMemusng   CurrLaserPulseRate, CurrLaserPulseRateCount, .UpdateOffDone
 230  80B0 3A 65 9D    >                        ld   a,(CurrLaserPulseRate)
 230  80B3 21 6C 9D    >                        ld   hl,CurrLaserPulseRateCount
 230  80B6 BE          >                        cp   (hl)
 230  80B7 C2 C0 80    >                        jp	  nz,.UpdateOffDone
 230  80BA             >                        ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount
 230  80BA 3A 68 9D    >                        ld       a,(CurrLaserPulseRest)
 230  80BD 32 6B 9D    >                        ld       (CurrLaserPulseRestCount),a
 230  80C0             >.UpdateOffDone:
 230  80C0             >                        UpdateRestCounter
 230  80C0             >                        DecrementIfPossible CurrLaserPulseRestCount, .UpdateRestDone                     ; if pulse rest > 0 then  pulse rest --
 230  80C0             >                        JumpIfMemZero CurrLaserPulseRestCount, .UpdateRestDone
 230  80C0 3A 6B 9D    >                        ld  a,(CurrLaserPulseRestCount)
 230  80C3 A7          >                        and a
 230  80C4 CA D6 80    >                        jp  z,.UpdateRestDone
 230  80C7 3D          >                        dec     a
 230  80C8 32 6B 9D    >                        ld      (CurrLaserPulseRestCount),a
 230  80CB             >.DonePulseRest:         JumpIfMemNotZero CurrLaserPulseRestCount, .UpdateRestDone                        ; if pulse rest = 0
 230  80CB 3A 6B 9D    >                        ld  a,(CurrLaserPulseRestCount)
 230  80CE A7          >                        and a
 230  80CF C2 D6 80    >                        jp  nz,.UpdateRestDone
 230  80D2             >.ResetRate:             ZeroA                                                                           ;    then pulse rate count = 0
 230  80D2 AF          >                        xor a
 230  80D3 32 6C 9D    >                        ld      (CurrLaserPulseRateCount),a                                             ;    .
 230  80D6             >.UpdateRestDone
 231  80D6                                      CoolLasers
 231  80D6 3A 46 9D    >                        ld      a,(GunTemperature)
 231  80D9 A7          >                        and     a
 231  80DA 28 04       >                        jr      z,.AlreadyCool
 231  80DC 3D          >                        dec     a
 231  80DD 32 46 9D    >                        ld      (GunTemperature),a
 231  80E0             >.AlreadyCool:
 232  80E0 CD 4A 97                             call    scan_keyboard                       ; perform the physical input scan
 233  80E3              ;.. This bit allows cycling of ships on universe 0 in demo.........................................................................
 234  80E3 CD AC 84     DemoOfShipsDEBUG:       call    TestForNextShip
 235  80E6              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
 236  80E6 3E 00        InputBlockerCheck:      ld      a,$0
 237  80E8                                      JumpIfAEqNusng $01, SkipInputHandlers       ; as we are in a transition the whole update AI is skipped
 237  80E8 FE 01       >                        cp     $01
 237  80EA CA 13 81    >                        jp      z,SkipInputHandlers
 238  80ED                                      JumpIfMemTrue TextInputMode, SkipInputHandlers  ; in input mode all keys are processed by input
 238  80ED 3A 3B 9B    >                        ld      a,(TextInputMode)
 238  80F0 A7          >                        and     a
 238  80F1 CA 13 81    >                        jp      z, SkipInputHandlers
 239  80F4                                      InputMainMacro
 239  80F4 CD A1 88    >                        call    ViewKeyTest
 239  80F7 CD C8 85    >                        call    TestPauseMode
 239  80FA 3A 60 9A    >                        ld      a,(GamePaused)
 239  80FD FE 00       >                        cp      0
 239  80FF 20 86       >                        jr      nz,MainLoop
 239  8101 CD A0 98    >                        call    MovementKeyTest
 240  8104              ;.. Process cursor keys for respective screen if the address is 0 then we skill just skip movement.................................
 241  8104 3A 12 81     HandleMovement:         ld      a,(CallCursorRoutine+2)
 242  8107                                      JumpIfAIsZero     TestAreWeDocked
 242  8107 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 242  8108 CA 13 81    >                        jp	z, TestAreWeDocked
 243  810B              ;.. Handle displaying correct screen ..............................................................................................
 244  810B 3E 00        HandleBankSelect:       ld      a,$00
 245  810D                                      MMUSelectScreenA
 245  810D ED 92 56    >                     nextreg ScreenBankMMU,		a
 246  8110 CD 00 00     CallCursorRoutine:      call    $0000
 247  8113              ;.. Check to see if we are docked as if we are (or are docking.launching then no AI/Ship updates occur.............................
 248  8113              ;.. Also end up here if we have the screen input blocker set
 249  8113              SkipInputHandlers:
 250  8113              ;.. For Docked flag its - 0 = in free space, FF = Docked, FE transition, FD = Setup open space and transition to not docked
 251  8113 3A 5F 9A     TestAreWeDocked:        ld      a,(DockedFlag)                                ; if if we are in free space do universe update
 252  8116                                      JumpIfANENusng  0, SkipUniveseUpdate                  ; else we skip it. As we are also in dock/transition then no models should be updated so we dont; need to draw
 252  8116 FE 00       >                        cp     0
 252  8118 C2 DD 81    >                        jp      nz,SkipUniveseUpdate
 253  811B
 254  811B 21 18 9B     .UpdateEventCounter:    ld      hl,EventCounter                               ; evnery 256 cycles we do a trigger test
 255  811E 35                                   dec     (hl)
 256  811F CC 79 82                             call    z,LoopEventTriggered
 257  8122                                      CallIfMemTrue   MissileLaunchFlag, LaunchPlayerMissile
 257  8122 3A 51 9D    >                        ld      a,(MissileLaunchFlag)
 257  8125 A7          >                        and     a
 257  8126 CC 5B 83    >                        call    z, LaunchPlayerMissile
 258  8129              ;.. If we get here then we are in game running mode regardless of which screen we are on, so update AI.............................
 259  8129              ;.. we do one universe slot each loop update ......................................................................................
 260  8129              ;.. First update Sun...............................................................................................................
 261  8129 CD D0 83     .UpdateShips:           call    UpdateUniverseObjects
 262  812C                                      JumpIfMemNeNusng ScreenTransitionForced, $FF, BruteForceChange                          ; if we docked then a transition would have been forced
 262  812C 3A 96 87    >                        ld  a,(ScreenTransitionForced)
 262  812F FE FF       >                        cp  $FF
 262  8131 C2 BF 83    >                        jp  nz,BruteForceChange
 263  8134 3E 00        CheckIfViewUpdate:      ld      a,$00                                         ; if this is set to a view number then we process a view
 264  8136                                      JumpIfAIsZero  MenusLoop                                  ; This will change as more screens are added TODO
 264  8136 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 264  8137 CA D5 81    >                        jp	z, MenusLoop
 265  813A              ;..Processing a view...............................................................................................................
 266  813A              ;..Display any message ............................................................................................................
 267  813A              .CheckHyperspaceMessage:AnyHyperSpaceMacro .HandleMessages
 267  813A 2A 16 9B    >                        ld      hl,(InnerHyperCount)
 267  813D 7C          >                        ld      a,h
 267  813E B5          >                        or      l
 267  813F 28 03       >                        jr      z, .HandleMessages
 268  8141 CD 00 8F                             call    HyperSpaceMessage
 269  8144              .HandleMessages:        AnyMessagesMacro  .NoMessages
 269  8144 3A 6C 99    >                        ld      a, (MessageCount)
 269  8147 A7          >                        and     a
 269  8148 28 06       >                        jr      z, .NoMessages
 270  814A CD E2 8E                             call    DisplayCurrentMessage
 271  814D CD C1 8E                             call    UpdateMessageTimer
 272  8150
 273  8150              .NoMessages:            MMUSelectLayer2
 273  8150 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 274  8154 CD D3 E0                             call   l2_cls_upper_two_thirds
 275  8157                                      MMUSelectLayer1
 275  8157 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 276  815B              .UpdateSun:             MMUSelectSun
 276  815B ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 277  815F              .DEBUGFORCE:
 278  815F                                     ;ld          hl,$0081
 279  815F                                     ;ld          (SBnKxlo),hl
 280  815F                                     ;ld          hl,$0001
 281  815F                                     ;ld          (SBnKylo),hl
 282  815F                                     ; ld          hl,$0160
 283  815F                                     ; ld          (SBnKzlo),hl
 284  815F                                      ;ld          a,$80
 285  815F                                      ;ld          (SBnKxsgn),a
 286  815F                                      ;ld          (SBnKysgn),a
 287  815F                                     ; ZeroA
 288  815F                                    ;  ld          (SBnKzsgn),a
 289  815F CD 3E C6                             call    SunUpdateAndRender
 290  8162              ;..Later this will be done via self modifying code to load correct stars routine for view..........................................
 291  8162 3E DF        DrawDustForwards:       ld     a,$DF
 292  8164 32 19 E9                             ld     (line_gfx_colour),a
 293  8167              DustUpdateBank:         MMUSelectViewFront                                    ; This needs to be self modifying
 293  8167 ED 91 56 3E >                     nextreg ScreenBankMMU,		BankFrontView
 294  816B CD 4A 94     DustUpdateRoutine:      call   DustForward                                   ; This needs to be self modifying
 295  816E 21 39 9B     PrepLayer2:             ld      hl,ConsoleRefreshCounter
 296  8171 35                                   dec     (hl)
 297  8172 CA 80 81                             jp      z,ConsoleDraw
 298  8175 FA 8E 81                             jp      m,ConsoleDrawReset
 299  8178              .ConsoleNotDraw:        SetMemFalse ConsoleRedrawFlag
 299  8178 3E FF       >                        ld      a,$FF
 299  817A 32 3A 9B    >                        ld      (ConsoleRedrawFlag),a
 300  817D C3 C8 81                             jp      ProcessPlanet
 301  8180              ConsoleDraw:            SetMemTrue ConsoleRedrawFlag
 301  8180 AF          >                        xor     a
 301  8181 32 3A 9B    >                        ld      (ConsoleRedrawFlag),a
 302  8184                                      MMUSelectLayer2
 302  8184 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 303  8188 CD E8 E0                             call    l2_cls_lower_third                                  ; Clear layer 2 for graphics
 304  818B C3 C8 81                             jp      ProcessPlanet
 305  818E              ConsoleDrawReset:       SetMemTrue ConsoleRedrawFlag
 305  818E AF          >                        xor     a
 305  818F 32 3A 9B    >                        ld      (ConsoleRedrawFlag),a
 306  8192 36 04                                ld      (hl),ConsoleRefreshInterval
 307  8194                                      MMUSelectLayer2
 307  8194 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 308  8198 CD E8 E0                             call    l2_cls_lower_third                                  ; Clear layer 2 for graphics
 309  819B              ;ProcessSun:             call    DrawForwardSun
 310  819B 3A 65 9D     ProcessLaser:           ld      a,(CurrLaserPulseRate)
 311  819E                                      JumpIfAIsNotZero .CheckForPulse
 311  819E FE 00       >                        cp	0
 311  81A0 C2 AD 81    >                        jp	nz,.CheckForPulse
 312  81A3                                      JumpIfMemFalse FireLaserPressed, .NoLaser
 312  81A3 3A 3D 9B    >                        ld      a,(FireLaserPressed)
 312  81A6 A7          >                        and     a
 312  81A7 C2 C1 81    >                        jp      nz, .NoLaser
 313  81AA C3 B4 81                             jp      .FireLaser
 314  81AD              .CheckForPulse:         JumpIfMemZero CurrLaserPulseOnCount, .NoLaser
 314  81AD 3A 69 9D    >                        ld  a,(CurrLaserPulseOnCount)
 314  81B0 A7          >                        and a
 314  81B1 CA C1 81    >                        jp  z,.NoLaser
 315  81B4              .FireLaser:             MMUSelectSpriteBank
 315  81B4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 316  81B8 CD BB E2                             call    sprite_laser_show
 317  81BB CD C6 9D                             call    LaserDrainSystems
 318  81BE C3 C8 81                             jp      ProcessPlanet
 319  81C1              .NoLaser:               MMUSelectSpriteBank
 319  81C1 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 320  81C5 CD 95 E3                             call    sprite_laser_hide
 321  81C8              ProcessPlanet:
 322  81C8 CD 73 84     ProcessShipModels:      call   DrawForwardShips                               ; Draw all ships (this may need to be self modifying)
 323  81CB                                      ; add in loop so we only update every 4 frames, need to change CLS logic too,
 324  81CB                                      ; every 4 frames needs to do 2 updates so updates both copies of buffer
 325  81CB                                      ; now will CLS bottom thrid
 326  81CB                                      CallIfMemTrue ConsoleRedrawFlag, UpdateConsole
 326  81CB 3A 3A 9B    >                        ld      a,(ConsoleRedrawFlag)
 326  81CE A7          >                        and     a
 326  81CF CC 96 89    >                        call    z, UpdateConsole
 327  81D2 C3 EC 81                             jp LoopRepeatPoint                                    ; And we are done with views, so check if there was a special command to do
 328  81D5              ;..If we were not in views then we were in display screens/menus...................................................................
 329  81D5 2A EA 81     MenusLoop:              ld      hl,(ScreenLoopJP+1)
 330  81D8 7C                                   ld      a,h
 331  81D9 B5                                   or      l
 332  81DA CA EC 81                             jp      z,LoopRepeatPoint
 333  81DD              ;..This is the screen update routine for menus.....................................................................................
 334  81DD              ;.. Also used by transition routines
 335  81DD              SkipUniveseUpdate:      JumpIfMemZero ScreenLoopJP+1,LoopRepeatPoint
 335  81DD 3A EA 81    >                        ld  a,(ScreenLoopJP+1)
 335  81E0 A7          >                        and a
 335  81E1 CA EC 81    >                        jp  z,LoopRepeatPoint
 336  81E4 3E 00        ScreenLoopBank:         ld      a,$0
 337  81E6                                      MMUSelectScreenA
 337  81E6 ED 92 56    >                     nextreg ScreenBankMMU,		a
 338  81E9 CD 00 00     ScreenLoopJP:           call    $0000
 339  81EC 3A 5F 9A     LoopRepeatPoint:        ld      a,(DockedFlag)
 340  81EF              HandleLaunched:         JumpIfAEqNusng  $FD, WeHaveCompletedLaunch
 340  81EF FE FD       >                        cp     $FD
 340  81F1 CA 0B 82    >                        jp      z,WeHaveCompletedLaunch
 341  81F4                                      JumpIfAEqNusng  $FE, WeAreInTransition
 341  81F4 FE FE       >                        cp     $FE
 341  81F6 CA A4 83    >                        jp      z,WeAreInTransition
 342  81F9                                      JumpIfAEqNusng  $FC, WeAreHJumping
 342  81F9 FE FC       >                        cp     $FC
 342  81FB CA 11 82    >                        jp      z,WeAreHJumping
 343  81FE                                      JumpIfAEqNusng  $FB, WeAreHEntering
 343  81FE FE FB       >                        cp     $FB
 343  8200 CA 1F 82    >                        jp      z,WeAreHEntering
 344  8203                                      JumpIfAEqNusng  $FA, WeHaveCompletedHJump
 344  8203 FE FA       >                        cp     $FA
 344  8205 CA 27 82    >                        jp      z,WeHaveCompletedHJump
 345  8208 C3 A4 83                             jp  DoubleBufferCheck
 346  820B CD F9 87     WeHaveCompletedLaunch:  call    LaunchedFromStation
 347  820E C3 A4 83                             jp      DoubleBufferCheck
 348  8211 CD DB C1     WeAreHJumping:          call    hyperspace_Lightning
 349  8214 DA A4 83                             jp      c,DoubleBufferCheck
 350  8217 3E FB                                ld      a,$FB
 351  8219 32 5F 9A                             ld      (DockedFlag),a
 352  821C C3 A4 83                             jp      DoubleBufferCheck
 353  821F 3E FA        WeAreHEntering:         ld      a,$FA
 354  8221 32 5F 9A                             ld      (DockedFlag),a
 355  8224 C3 A4 83                             jp  DoubleBufferCheck
 356  8227
 357  8227
 358  8227              ; to create planet position
 359  8227              ;       take seed 2 AND %00000011 + 3 + carry and store in z sign
 360  8227              ;       take result and divide by 2 then store in x and y sign
 361  8227              ;
 362  8227              ;       take seed 4 AND %00000111 OR %10000001 and store in z sign
 363  8227              ;       take seed 6 AND %00000011 and store in x sign and y sign
 364  8227              ;       set pitch and roll to 0
 365  8227              ;
 366  8227              ;
 367  8227              ;
 368  8227              ; --- At the end of a hyperspace jump we have to reset compass, market universe sun and planets etc
 369  8227 3A 45 9B     WeHaveCompletedHJump:   ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 370  822A                                      MMUSelectGalaxyA
 370  822A ED 92 57    >                     nextreg GalaxyDataMMU,       a
 371  822D 2A 5A 9B                             ld      hl,(TargetSystemX)
 372  8230 22 58 9B                             ld      (PresentSystemX),hl
 373  8233 44                                   ld      b,h
 374  8234 4D                                   ld      c,l
 375  8235                                      CorrectPostJumpFuel
 375  8235 3A 2A 9F    >                        ld      a,(Fuel)
 375  8238 21 E1 9A    >                        ld      hl,Distance
 375  823B 96          >                        sub     a,(hl)
 375  823C 32 2A 9F    >                        ld      (Fuel),a
 376  823F                                      ForceTransition ScreenFront            ; This will also trigger stars
 376  823F 3E 09       >                        ld      a,ScreenFront
 376  8241 32 96 87    >                        ld      (ScreenTransitionForced), a
 377  8244 3E 00                                ld      a,$00
 378  8246 32 3F 9B                             ld      (ExtraVesselsCounter),a
 379  8249 32 5F 9A                             ld      (DockedFlag),a
 380  824C CD 6F F8                             call    GalaxyGenerateDesc             ; bc  holds new system to generate system
 381  824F CD BB 9F                             call    copy_working_to_system         ; and propogate copies of seeds
 382  8252 CD B3 9F                             call    copy_working_to_galaxy         ; .
 383  8255 CD A1 A0                             call    get_planet_data_working_seed   ; sort out system data
 384  8258                                      ;call    GetDigramGalaxySeed           ; .
 385  8258                                      MMUSelectStockTable                    ; .
 385  8258 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 386  825C CD AA E0                             call    generate_stock_market          ; generate new prices
 387  825F CD 9C 9E                             call    ClearUnivSlotList              ; clear out any ships
 388  8262 CD F0 9D                             call    ResetPlayerShip
 389  8265                                      HalveFugitiveStatus                    ; halves status and brings bit into carry
 389  8265 21 BC 9A    >                        ld      hl,FugitiveInnocentStatus
 389  8268 CB 3E       >                        srl     (hl)
 390  826A                                      MMUSelectSun
 390  826A ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 391  826E CD 5D C2                             call    CreateSun                      ; create the local sun and set position based on seed
 392  8271              ;TODO                        call    generateSunAndPlanetPos        ; uses current carry state too
 393  8271              ;TODO.CreateSun:             call    SetSunSlot
 394  8271              ; PROBABLY NOT NEEDED NOW                      MMUSelectShipBank1
 395  8271              ; PROBABLY NOT NEEDED NOW                      call    GetShipBankId
 396  8271              ;;SELECT CORRECT BANK                        MMUSelectUniverseN 0
 397  8271              ;;TODO                        call    CopyBodyToUniverse
 398  8271              ;;TODO                        call    CreateSun
 399  8271              ;;TODOCreatePlanet:          call    SetPlanetSlot
 400  8271              ;;TODO                       MMUSelectShipBank1
 401  8271              ;;TODO                       call    GetShipBankId
 402  8271              ;;TODO                       MMUSelectUniverseBankN 1
 403  8271              ;;TODO                       call    CopyBodyToUniverse
 404  8271                                      SetMemFalse DockedFlag
 404  8271 3E FF       >                        ld      a,$FF
 404  8273 32 5F 9A    >                        ld      (DockedFlag),a
 405  8276 C3 A4 83                             jp  DoubleBufferCheck
 406  8279
 407  8279 CD 08 9F     LoopEventTriggered:     call    FindNextFreeSlotInC                 ; c= slot number, if we cant find a slot
 408  827C D8                                   ret     c                                   ; then may as well just skip routine
 409  827D FD 61        .SpawnIsPossible:       ld      iyh,c                               ; save slot free in iyh
 410  827F              .AreWeInWhichSpace:     JumpIfMemFalse MissJumpFlag, .WitchSpaceEvent
 410  827F 3A 1A 9B    >                        ld      a,(MissJumpFlag)
 410  8282 A7          >                        and     a
 410  8283 C2 5A 83    >                        jp      nz, .WitchSpaceEvent
 411  8286 CD 61 9F     .JunkOrNot:             call    doRandom                            ; if random > 35 then its not junk
 412  8289                                      JumpIfAGTENusng 35, .NotJunk                ; .
 412  8289 FE 23       >                        cp     35
 412  828B D2 BC 82    >                        jp		nc,.NotJunk
 413  828E              .JunkLimitHitTest:      TestRoomForJunk .NotJunk                    ; can we fit in any junk
 413  828E 3E 03       >                        ld      a,3
 413  8290             >                        JumpIfALTMemusng    JunkCount, .NotJunk
 413  8290 21 40 9B    >                        ld      hl,JunkCount
 413  8293 BE          >                        cp      (hl)
 413  8294 DA BC 82    >                        jp		c,.NotJunk
 414  8297 CD 61 9F     .CouldBeTraderInstead:  call    doRandom                            ; so its now a 50/50 change of being a trader
 415  829A E6 01                                and     1
 416  829C CA 08 83                             jp      z,.SpawnTrader
 417  829F              ;... Handle spawning of junk if possible
 418  829F CD 61 9F     .SpawnJunk:             call    doRandom
 419  82A2 FE 0A                                cp      10                                  ; will set carry if a < 10
 420  82A4                                      FlipCarryFlag                               ; so now carry is set if a > 10
 420  82A4 3F          >                        ccf
 421  82A5 E6 01                                and     1                                   ; so only have carry flag
 422  82A7 CE 04                                adc     ShipID_CargoType5                   ; so now a = 4 + random + poss carry
 423  82A9 47                                   ld      b,a                                 ; save ship type
 424  82AA                                      ; if in space station zone then we can't do asteroids
 425  82AA              .CanWeSpawnAsteroid:    JumpIfMemFalse  SpaceStationSafeZone, .NotInSafeZone
 425  82AA 3A 3E 9B    >                        ld      a,(SpaceStationSafeZone)
 425  82AD A7          >                        and     a
 425  82AE C2 B5 82    >                        jp      nz, .NotInSafeZone
 426  82B1 78                                   ld      a,b
 427  82B2              .FailIfAsteroidInSafe:  ReturnIfAEqNusng   ShipID_Asteroid          ; we can't spawn asteroids near a space station
 427  82B2 FE 06       >                        cp      ShipID_Asteroid
 427  82B4 C8          >                        ret     z
 428  82B5              .NotInSafeZone:         AddJunkCount                                ; so its an increase in junk
 428  82B5 21 40 9B    >                        ld      hl,JunkCount
 428  82B8 34          >                        inc     (hl)
 429  82B9 C3 76 83                             jp      SpawnShipTypeA
 430  82BC                                      ;.......implicit ret
 431  82BC              ;... Handle spawing of non junk type object
 432  82BC              .NotJunk:               JumpIfMemTrue SpaceStationSafeZone, .SpawnTrader ; changed so that it can spawn friendly ships around a space station
 432  82BC 3A 3E 9B    >                        ld      a,(SpaceStationSafeZone)
 432  82BF A7          >                        and     a
 432  82C0 CA 08 83    >                        jp      z, .SpawnTrader
 433  82C3              .PossibleCop:           MMUSelectCommander                          ; get cargo rating
 433  82C3 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 434  82C7 CD 40 E3     .AreWeABadPerson:       call    calculateBadness                    ; a = badness
 435  82CA CB 27                                sla     a                                   ; double badness for scans
 436  82CC                                      JumpIfMemZero CopCount,.NoCopsInSystem      ; are there any cops already
 436  82CC 3A 43 9B    >                        ld  a,(CopCount)
 436  82CF A7          >                        and a
 436  82D0 CA D7 82    >                        jp  z,.NoCopsInSystem
 437  82D3 21 BC 9A     .CopsAlreadyPresent:    ld      hl,FugitiveInnocentStatus           ; or a with FIST status
 438  82D6 B6                                   or      (hl)
 439  82D7 32 62 9D     .NoCopsInSystem:        ld      (BadnessStatus),a                   ; if badness level triggers a cop
 440  82DA CD 61 9F                             call    doRandom                            ; then its hostile
 441  82DD                                      CallIfAGTEMemusng BadnessStatus, .SpawnHostileCop  ;
 441  82DD 21 62 9D    >                        ld      hl,BadnessStatus
 441  82E0 BE          >                        cp      (hl)
 441  82E1 D4 08 83    >                        call	nc,.SpawnHostileCop
 442  82E4                                      ReturnIfMemNotZero CopCount                 ; if here are police then we are done
 442  82E4 3A 43 9B    >                        ld     a,(CopCount)
 442  82E7 A7          >                        and     a
 442  82E8 C0          >                        ret    nz
 443  82E9 21 3F 9B                             ld      hl, ExtraVesselsCounter             ; count down extra vessels counter
 444  82EC 35                                   dec     (hl)                                ; to prevent mass spawing
 445  82ED F0                                   ret     p                                   ;
 446  82EE 34           .ExtraVesselHit0:       inc     (hl)                                ; set counter to 0
 447  82EF                        ;TODO              JumpIfMemNotZero MissionData,.DoMissionPlans; call special mission spawn logic routine
 448  82EF                         ;TODO             ret     c                                   ; return if carry was set (i.e. it did something)
 449  82EF 3A 45 9B                             ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 450  82F2                                      MMUSelectGalaxyA
 450  82F2 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 451  82F5 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 452  82F8                                      JumpIfAIsNotZero .NotAnarchySystem
 452  82F8 FE 00       >                        cp	0
 452  82FA C2 30 83    >                        jp	nz,.NotAnarchySystem
 453  82FD 47                                   ld      b,a
 454  82FE CD 61 9F                             call    doRandom                            ; if random > 120 then don't spawn
 455  8301                                      ReturnIfAGTENusng 120                       ;
 455  8301 FE 78       >                        cp    120
 455  8303 D0          >                        ret	 nc
 456  8304 E6 07                                and     7                                   ; if random 0 ..7 < gov rating
 457  8306                                      ReturnIfALTNusng b                          ; then return
 457  8306 B8          >                        cp    b
 457  8307 D8          >                        ret	 c
 458  8308              .SpawnTrader:       ; TODO
 459  8308              ; ... Spawn a cop at hostile status
 460  8308 3E 29        .SpawnHostileCop:       ld      a,ShipID_Viper
 461  830A CD 76 83                             call    SpawnShipTypeA                      ; call rather than jump
 462  830D CD 2E CA                             call    SetShipHostile                      ; as we have correct universe banked in now
 463  8310 C9                                   ret
 464  8311              ; ... Spawb a hostile ship or cluster
 465  8311 CD 61 9F     .SpawnHostile:          call    doRandom
 466  8314                                      JumpIfAGTENusng 100,.SpawnPirates           ; 100 in 255 change of one or more pirates
 466  8314 FE 64       >                        cp     100
 466  8316 D2 31 83    >                        jp		nc,.SpawnPirates
 467  8319 21 3F 9B     .SpawnAHostileHunter:   ld      hl, ExtraVesselsCounter             ; prevent the next spawning
 468  831C 34                                   inc     (hl)                                ;
 469  831D E6 03                                and     3                                   ; a = random 0..3
 470  831F                                      MMUSelectShipBank1
 470  831F ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 471  8323                                      GetByteAInTable ShipHunterTable             ; get hunter ship type
 471  8323 21 44 90    >                    ld          hl,ShipHunterTable
 471  8326 ED 31       >                    add         hl,a
 471  8328 7E          >                    ld          a,(hl)
 472  8329 CD 76 83                             call    SpawnShipTypeA
 473  832C CD 2E CA                             call    SetShipHostile
 474  832F C9                                   ret
 475  8330 C9           .NotAnarchySystem:      ret
 476  8331 CD 61 9F     .SpawnPirates:          call    doRandom                           ; a = random 0..3
 477  8334 E6 03                                and     3
 478  8336 32 3F 9B                             ld      (ExtraVesselsCounter),a
 479  8339 CD 61 9F     .PirateLoop:            call    doRandom
 480  833C 4F                                   ld      c,a                                 ; random and random and 7
 481  833D CD 61 9F                             call    doRandom
 482  8340 A1                                   and     c
 483  8341 E6 07                                and     7
 484  8343                                      GetByteAInTable ShipPackList
 484  8343 21 3C 90    >                    ld          hl,ShipPackList
 484  8346 ED 31       >                    add         hl,a
 484  8348 7E          >                    ld          a,(hl)
 485  8349 CD 76 83                             call    SpawnShipTypeA
 486  834C CD 2E CA                             call    SetShipHostile                      ; make sure its hostile
 487  834F                                      AddPirateCount                              ; another pirate has been spawned
 487  834F 21 44 9B    >                        ld      hl,PirateCount
 487  8352 34          >                        inc     (hl)
 488  8353 21 3F 9B                             ld      hl,ExtraVesselsCounter
 489  8356 35                                   dec     (hl)
 490  8357 20 E0                                jr      nz,.PirateLoop
 491  8359 C9                                   ret
 492  835A C9           .WitchSpaceEvent:       ret; TODO for now
 493  835B
 494  835B
 495  835B CD 08 9F     LaunchPlayerMissile:    call    FindNextFreeSlotInC                 ; Check if we have a slot free
 496  835E 38 15                                jr      c,.MissileMissFire                  ; give a miss fire indicator as we have no slots
 497  8360 3E 19        .LaunchGood:            ld      a,ShipID_Missile                    ; TODO For now only 1 missile type
 498  8362                                      GetByteAInTable ShipPackList                ; swap in missile data
 498  8362 21 3C 90    >                    ld          hl,ShipPackList
 498  8365 ED 31       >                    add         hl,a
 498  8367 7E          >                    ld          a,(hl)
 499  8368 CD 76 83                             call    SpawnShipTypeA                      ; spawn the ship
 500  836B 3A 50 9D                             ld      a,(MissileTarget)
 501  836E 32 30 C0                             ld      (UBnKMissileTarget),a               ; load target Data
 502  8371 CD 56 CA                             call    UnivSetPlayerMissile
 503  8374 C9                                   ret
 504  8375 C9           .MissileMissFire:       ret ; TODO bing bong noise misfire message
 505  8376
 506  8376              ; a = ship type, iyh = universe slot to create in
 507  8376 FD 6F        SpawnShipTypeA:         ld      iyl,a                               ; save ship type
 508  8378                                      MMUSelectShipBank1                          ; select bank 1
 508  8378 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 509  837C FD 7C                                ld      a,iyh                               ; select unverse free slot
 510  837E FD 45                                ld      b,iyl
 511  8380 CD B3 9E                             call    SetSlotAToTypeB
 512  8383                                      MMUSelectUniverseA                          ; .
 512  8383 C6 46       >                     add    a,BankUNIVDATA0
 512  8385 ED 92 56    >                     nextreg UniverseMMU,       a
 513  8388 FD 7D                                ld      a, iyl                              ; retrive ship type
 514  838A                                      ;call    SetSlotAToTypeB                    ; record in the lookup tables
 515  838A CD 0F E0                             call    GetShipBankId                       ; find actual memory location of data
 516  838D                                      MMUSelectShipBankA
 516  838D ED 92 57    >					 nextreg ShipModelMMU,	    a
 517  8390 78                                   ld      a,b                                 ; b = computed ship id for bank
 518  8391 CD 6A E0                             call    CopyShipToUniverse
 519  8394 CD C5 CA                             call    UnivSetSpawnPosition                ; set initial spawn position
 520  8397 CD 49 CB                             call    UnivInitRuntime                     ; Clear runtime data before startup
 521  839A 3A 22 C3                             ld      a,(ShipTypeAddr)
 522  839D 47                                   ld      b,a
 523  839E FD 7D                                ld      a,iyl
 524  83A0 CD BA 9E                             call    SetSlotAToClassB
 525  83A3 C9                                   ret
 526  83A4
 527  83A4                                      ; reset main loop counters
 528  83A4                                      ; from BBC TT18 jump code
 529  83A4                                      ; need to set system corrodinates, flush out univere ships etc
 530  83A4                                      ; set up new star system and landing location in system
 531  83A4                                      ; reset ship speed etc (RES2)
 532  83A4                                      ; update legal status, missle indicatrions, planet data block, sun data block (SOLAR)
 533  83A4                                      ;   put planet into data blokc 1 of FRIN
 534  83A4                                      ;   put sun inot data block (NWWSHIP)
 535  83A4                                      ; need to look at in system warp code (WARP) - note we need to -reorg all to code for teh station as that will never be in slot 0
 536  83A4
 537  83A4
 538  83A4              WeAreInTransition:
 539  83A4 3E 00        DoubleBufferCheck:      ld      a,00
 540  83A6                                      IFDEF DOUBLEBUFFER
 541  83A6 FE 00                                    cp      0
 542  83A8 CA B7 83                                 jp      z,TestTransition
 543  83AB                                          MMUSelectLayer2
 543  83AB ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 544  83AF 3A 01 E0                                 ld     a,(varL2_BUFFER_MODE)
 545  83B2 FE 00                                    cp     0
 546  83B4 C4 07 E1                                 call   nz,l2_flip_buffers
 547  83B7                                      ENDIF
 548  83B7 3A 96 87     TestTransition:         ld      a,(ScreenTransitionForced)          ; was there a bruite force screen change in any update loop
 549  83BA FE FF                                cp      $FF
 550  83BC CA 87 80                             jp      z,MainLoop
 551  83BF 57           BruteForceChange:       ld      d,a
 552  83C0 1E 10                                ld      e,ScreenMapRow
 553  83C2 ED 30                                mul
 554  83C4 DD 21 A9 86                          ld      ix,ScreenKeyMap
 555  83C8 DD 19                                add     ix,de                               ; Force screen transition
 556  83CA CD 41 88                             call    SetScreenAIX
 557  83CD C3 87 80                             jp MainLoop
 558  83D0
 559  83D0              ;..................................................................................................................................
 560  83D0              ;..Process A ship..................................................................................................................
 561  83D0
 562  83D0              ;..Update Universe Objects.........................................................................................................
 563  83D0 AF           UpdateUniverseObjects:  xor     a
 564  83D1 32 13 9B                             ld      (SelectedUniverseSlot),a
 565  83D4 57           .UpdateUniverseLoop:    ld      d,a                                             ; d is unaffected by GetTypeInSlotA
 566  83D5              ;.. If the slot is empty (FF) then skip this slot..................................................................................
 567  83D5 CD FC 9E                             call    GetTypeAtSlotA
 568  83D8 FE FF                                cp      $FF
 569  83DA 28 29                                jr      z,.ProcessedUniverseSlot
 570  83DC 7A           .UniverseObjectFound:   ld      a,d                                             ; Get back Universe slot as we want it
 571  83DD                                      MMUSelectUniverseA                                      ; and we apply roll and pitch
 571  83DD C6 46       >                     add    a,BankUNIVDATA0
 571  83DF ED 92 56    >                     nextreg UniverseMMU,       a
 572  83E2 CD 11 DC                             call    ApplyMyRollAndPitch
 573  83E5 CD EB DC                             call    ApplyShipRollAndPitch
 574  83E8              ;.. If its a space station then see if we are ready to dock........................................................................
 575  83E8 3A 22 C3     .CheckIfDockable:       ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
 576  83EB                                      JumpIfANENusng  ShipTypeStation, .NotDockingCheck       ; if its not a station so we don't test docking
 576  83EB FE 02       >                        cp     ShipTypeStation
 576  83ED C2 FB 83    >                        jp      nz,.NotDockingCheck
 577  83F0              .IsDockableAngryCheck:  JumpOnMemBitSet ShipNewBitsAddr, 4, .NotDockingCheck    ; if it is angry then we dont test docking
 577  83F0 3A 23 C3    >                        ld      a,(ShipNewBitsAddr)
 577  83F3 CB 67       >                        bit 	4,a
 577  83F5 C2 FB 83    >                        jp      nz,.NotDockingCheck
 578  83F8 CD 38 84                             call    DockingCheck                                    ; So it is a candiate to test docking. Now we do the position and angle checks
 579  83FB                                     ; ReturnIfMemEquN ScreenTransitionForced, $FF             ; if we docked then a transition would have been forced
 580  83FB              .NotDockingCheck:       CallIfMemEqMemusng SelectedUniverseSlot, CurrentUniverseAI, UpdateShip
 580  83FB 3A 13 9B    >                        ld   a,(SelectedUniverseSlot)
 580  83FE 21 12 9B    >                        ld   hl,CurrentUniverseAI
 580  8401 BE          >                        cp   (hl)
 580  8402 CC F3 85    >                        call    z,UpdateShip
 581  8405 3A 13 9B     .ProcessedUniverseSlot: ld      a,(SelectedUniverseSlot)                        ; Move to next ship cycling if need be to 0
 582  8408 3C                                   inc     a                                               ; .
 583  8409                                      JumpIfAGTENusng   UniverseSlotListSize, .UpdateAICounter    ; .
 583  8409 FE 0C       >                        cp     UniverseSlotListSize
 583  840B D2 14 84    >                        jp		nc,.UpdateAICounter
 584  840E 32 13 9B                             ld      (SelectedUniverseSlot),a
 585  8411 C3 D4 83                             jp      .UpdateUniverseLoop
 586  8414 3A 12 9B     .UpdateAICounter:       ld      a,(CurrentUniverseAI)
 587  8417 3C                                   inc     a
 588  8418 FE 0C                                cp      12
 589  841A 38 01                                jr      c,.IterateAI
 590  841C AF                                   xor     a
 591  841D 32 12 9B     .IterateAI:             ld      (CurrentUniverseAI),a
 592  8420              .CheckIfStationAngry:   ReturnIfMemFalse  SetStationAngryFlag
 592  8420 3A 14 9B    >                        ld      a,(SetStationAngryFlag)
 592  8423 A7          >                        and     a
 592  8424 C0          >                        ret     nz
 593  8425              .SetStationAngryIfPoss: ReturnIfMemNeNusng UniverseSlotList, ShipTypeStation
 593  8425 3A 21 9B    >                        ld   a,(UniverseSlotList)
 593  8428 FE 02       >                        cp     ShipTypeStation
 593  842A C8          >                        ret    z
 594  842B                                      MMUSelectUniverseN 0
 594  842B ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 595  842F CD 2E CA                             call    SetShipHostile
 596  8432                                      SetMemFalse    SetStationAngryFlag
 596  8432 3E FF       >                        ld      a,$FF
 596  8434 32 14 9B    >                        ld      (SetStationAngryFlag),a
 597  8437 C9                                   ret
 598  8438              ;..................................................................................................................................
 599  8438              ;.. Quickly eliminate space stations too far away..................................................................................
 600  8438 ED 4B 0C C0  DockingCheck:           ld      bc,(UBnKxlo)
 601  843C 2A 0F C0                             ld      hl,(UBnKylo)
 602  843F ED 5B 12 C0                          ld      de,(UBnKzlo)
 603  8443 78                                   ld      a,b
 604  8444 B4                                   or      h
 605  8445 B2                                   or      d
 606  8446 C0                                   ret     nz
 607  8447 79           .CheckIfInRangeLo:      ld      a,c
 608  8448 B5                                   or      l
 609  8449 B3                                   or      e
 610  844A E6 C0                                and     %11000000                           ; Note we should make this 1 test for scoop or collision too
 611  844C C0                                   ret     nz
 612  844D              ;.. Now check to see if we are comming in at a viable angle........................................................................
 613  844D 3A 26 C0     .CheckDockingAngle:     ld      a,(UBnkrotmatNosevZ+1)              ; get get high byte of rotmat
 614  8450                                      ReturnIfALTNusng 214                       ; this is the magic angle to be within 26 degrees +/-
 614  8450 FE D6       >                        cp    214
 614  8452 D8          >                        ret	 c
 615  8453 CD FE 85                             call    GetStationVectorToWork              ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
 616  8456 CB 7F                                bit     7,a                                 ; if its negative
 617  8458 C0                                   ret     nz                                  ; we are flying away from it
 618  8459                                      ReturnIfALTNusng 89                         ; if the axis <89 the we are not in the 22 degree angle
 618  8459 FE 59       >                        cp    89
 618  845B D8          >                        ret	 c
 619  845C 3A 1C C0                             ld      a,(UBnkrotmatRoofvX+1)              ; get roof vector high
 620  845F E6 7F                                and     SignMask8Bit
 621  8461                                      ReturnIfALTNusng 80                         ; note 80 decimal for 36.6 degrees
 621  8461 FE 50       >                        cp    80
 621  8463 D8          >                        ret	 c
 622  8464              ;.. Its passed all validation and we are docking...................................................................................
 623  8464              .AreDocking:            MMUSelectLayer1
 623  8464 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 624  8468 3E 06                                ld        a,$6
 625  846A CD A5 E0                             call      l1_set_border
 626  846D              .EnterDockingBay:       ForceTransition ScreenDocking
 626  846D 3E 0D       >                        ld      a,ScreenDocking
 626  846F 32 96 87    >                        ld      (ScreenTransitionForced), a
 627  8472 C9                                   ret
 628  8473
 629  8473              ;..................................................................................................................................
 630  8473              ;; TODODrawForwardSun:         MMUSelectSun
 631  8473              ;; TODO                        ld      a,(SunKShipType)
 632  8473              ;; TODO.ProcessBody:           cp      129
 633  8473              ;; TODO                        jr      nz,.ProcessPlanet
 634  8473              ;; TODO.ProcessSun:            call    ProcessSun
 635  8473              ;; TODO
 636  8473              ;; TODOProcessSun:             call    CheckSunDistance
 637  8473              ;; TODO
 638  8473              ;; TODO                        ret
 639  8473              ;; TODO.ProcessPlanet:         call    ProcessPlanet
 640  8473              ;; TODO                        ret
 641  8473              ;..................................................................................................................................
 642  8473 AF           DrawForwardShips:       xor     a
 643  8474 32 AB 84     .DrawShipLoop:          ld      (CurrentShipUniv),a
 644  8477 CD FC 9E                             call    GetTypeAtSlotA
 645  847A FE FF                                cp      $FF
 646  847C 28 12                                jr      z,.ProcessedDrawShip
 647  847E              ; Add in a fast check for ship behind to process nodes and if behind jump to processed Draw ship
 648  847E 3A AB 84     .SelectShipToDraw:       ld      a,(CurrentShipUniv)
 649  8481                                      MMUSelectUniverseA
 649  8481 C6 46       >                     add    a,BankUNIVDATA0
 649  8483 ED 92 56    >                     nextreg UniverseMMU,       a
 650  8486                                      ; Need check for exploding here
 651  8486 CD 29 DE     .ProcessUnivShip:       call    ProcessShip          ; TODFO TUNE THIS   ;; call    ProcessUnivShip
 652  8489              .UpdateRadar:
 653  8489              ;;;Does nothing                       ld      a,BankFrontView
 654  8489              ;;;Does nothing                       MMUSelectScreenA
 655  8489              ;;;Does nothing         ld      a,(CurrentShipUniv)
 656  8489              ;;;Does nothing         MMUSelectUniverseA
 657  8489
 658  8489                                      CallIfMemTrue ConsoleRedrawFlag,UpdateScannerShip ; Always update ship positions
 658  8489 3A 3A 9B    >                        ld      a,(ConsoleRedrawFlag)
 658  848C A7          >                        and     a
 658  848D CC BC 8D    >                        call    z, UpdateScannerShip
 659  8490 3A AB 84     .ProcessedDrawShip:     ld      a,(CurrentShipUniv)
 660  8493 3C                                   inc     a
 661  8494                                      JumpIfALTNusng   UniverseSlotListSize, .DrawShipLoop
 661  8494 FE 0C       >                        cp      UniverseSlotListSize
 661  8496 DA 74 84    >                        jp		c, .DrawShipLoop
 662  8499              .DrawSunCompass:        MMUSelectSun
 662  8499 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 663  849D CD B7 8B                             call    UpdateCompassSun                ; Always update the sun position
 664  84A0 CD FB 8C                             call    UpdateScannerSun                ; Always attempt to put the sun on the scanner
 665  84A3              .CheckPlanetCompass:    JumpIfMemFalse SpaceStationSafeZone, .DrawSpaceStationCompass
 665  84A3 3A 3E 9B    >                        ld      a,(SpaceStationSafeZone)
 665  84A6 A7          >                        and     a
 665  84A7 C2 AA 84    >                        jp      nz, .DrawSpaceStationCompass
 666  84AA              .DrawPlanetCompass:
 667  84AA
 668  84AA              .DrawSpaceStationCompass:
 669  84AA
 670  84AA C9                                   ret
 671  84AB              ;..................................................................................................................................
 672  84AB 00           CurrentShipUniv:        DB      0
 673  84AC
 674  84AC              ;;;ProcessUnivShip:        call    CheckDistance               ; Will check for negative Z and skip (how do we deal with read and side views? perhaps minsky transformation handles that?)
 675  84AC              ;;;                        ret     c
 676  84AC              ;;;                        ld      a,(UbnkDrawAsDot)
 677  84AC              ;;;                        and     a
 678  84AC              ;;;                        jr      z,.CarryOnWithDraw
 679  84AC              ;;;.itsJustADot:           ld      bc,(UBnkNodeArray)          ; if its at dot range
 680  84AC              ;;;                        ld      a,$FF                       ; just draw a pixel
 681  84AC              ;;;                        MMUSelectLayer2                     ; then go to update radar
 682  84AC              ;;;                        call    l2_plot_pixel               ;
 683  84AC              ;;;                        ClearCarryFlag
 684  84AC              ;;;                        ret
 685  84AC              ;;;.ProcessShipNodes:      call    ProcessShip
 686  84AC              ;;;
 687  84AC              ;;;call    ProcessNodes ; it hink here we need the star and planet special cases
 688  84AC              ;;;.DrawShip:              call    CullV2				        ; culling but over aggressive backface assumes all 0 up front TOFIX
 689  84AC              ;;;                        call    PrepLines                   ; LL72, process lines and clip, ciorrectly processing face visibility now
 690  84AC              ;;;                        ld      a,(CurrentShipUniv)
 691  84AC              ;;;                        MMUSelectUniverseA
 692  84AC              ;;;                        call   DrawLines
 693  84AC              ;;;                        ClearCarryFlag
 694  84AC              ;;;                        ret
 695  84AC
 696  84AC
 697  84AC 3E 46        TestForNextShip:        ld      a,c_Pressed_Quit
 698  84AE CD A5 97                             call    is_key_pressed
 699  84B1 C0                                   ret     nz
 700  84B2 3A F2 85                             ld      a,(currentDemoShip)
 701  84B5 3C                                   inc     a
 702  84B6 FE 2C                                cp      44
 703  84B8 20 01                                jr      nz,.TestOK
 704  84BA AF                                   xor     a
 705  84BB 32 F2 85     .TestOK:                ld      (currentDemoShip),a
 706  84BE CD 9C 9E                             call    ClearUnivSlotList
 707  84C1 3A F2 85                             ld      a,(currentDemoShip)
 708  84C4 47                                   ld      b,a
 709  84C5 AF                                   xor     a
 710  84C6 CD B3 9E                             call    SetSlotAToTypeB
 711  84C9                                      MMUSelectUniverseN 2
 711  84C9 ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 712  84CD CD 40 CA                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 713  84D0 3A F2 85                             ld      a,(currentDemoShip)
 714  84D3                                      MMUSelectShipBank1
 714  84D3 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 715  84D7 CD 0F E0                             call    GetShipBankId
 716  84DA                                      MMUSelectShipBankA
 716  84DA ED 92 57    >					 nextreg ShipModelMMU,	    a
 717  84DD 78                                   ld      a,b
 718  84DE CD 6A E0                             call    CopyShipToUniverse
 719  84E1 CD 09 89                             call    SetInitialShipPosition
 720  84E4 CD 65 86                             call    DEBUGSETNODES
 721  84E7 C9                                   ret
 722  84E8
 723  84E8              ;----------------------------------------------------------------------------------------------------------------------------------
 724  84E8              NeedAMessageQueue:
 725  84E8
 726  84E8 3A 17 9B     UpdateCountdownNumber:  ld		a,(OuterHyperCount)
 727  84EB 11 42 85                             ld		de,Hyp_counter
 728  84EE 0E 9C                                ld	c, -100
 729  84F0 CD FA 84                             call	.Num1
 730  84F3 0E F6                                ld	c,-10
 731  84F5 CD FA 84                             call	.Num1
 732  84F8 0E FF                                ld	c,-1
 733  84FA 06 2F        .Num1:	                ld	b,'0'-1
 734  84FC 04           .Num2:	                inc		b
 735  84FD 81                                   add		a,c
 736  84FE 38 FC                                jr		c,.Num2
 737  8500 91                                   sub 	c
 738  8501 C5                                   push	bc
 739  8502 F5                                   push	af
 740  8503 79                                   ld		a,c
 741  8504 FE FF                                cp		-1
 742  8506 78                                   ld		a,b
 743  8507 12                                   ld		(de),a
 744  8508 13                                   inc		de
 745  8509 F1                                   pop		af
 746  850A C1                                   pop		bc
 747  850B C9                                   ret
 748  850C
 749  850C              ;----------------------------------------------------------------------------------------------------------------------------------
 750  850C 54 6F 3A     Hyp_message             DB "To:"
 751  850F 00 00 00...  Hyp_to                  DS 32
 752  852F 20           Hyp_space1              DB " "
 753  8530 30 2E 30     Hyp_dist_amount         DB "0.0"
 754  8533 2E           Hyp_decimal             DB "."
 755  8534 30           Hyp_fraction            DB "0"
 756  8535 20 4C 59 00  Hyp_dis_ly              DB " LY",0
 757  8539 43 68 61 72  Hyp_charging            DB "Charging:"
 757  853D 67 69 6E 67
 757  8541 3A
 758  8542 30 30 30 00  Hyp_counter             DB "000",0
 759  8546 00 00 00...  Hyp_centeredTarget      DS 32
 760  8566 00           Hyp_centeredEol         DB 0
 761  8567 00 00 00...  Hyp_bufferpadding       DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
 762  8587 00 00 00...  Hyp_centeredCharging    DS 32
 763  85A7 00           Hyp_centeredEol2        DB 0
 764  85A8 00 00 00...  Hyp_bufferpadding2      DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
 765  85C8
 766  85C8
 767  85C8              ;DisplayTargetAndRange
 768  85C8              ;DisplayCountDownNumber
 769  85C8              ;----------------------------------------------------------------------------------------------------------------------------------
 770  85C8 3A 60 9A     TestPauseMode:          ld      a,(GamePaused)
 771  85CB FE 00                                cp      0
 772  85CD 20 12                                jr      nz,.TestForResume
 773  85CF 3A 59 9A     .CheckViewMode:         ld      a,(ScreenIndex)                     ; we can only pause if not on screen view
 774  85D2                                      ReturnIfAGTENusng       ScreenFront
 774  85D2 FE 09       >                        cp    ScreenFront
 774  85D4 D0          >                        ret	 nc
 775  85D5 3E 40        .CheckPauseKey:         ld      a,c_Pressed_Freeze
 776  85D7 CD A5 97                             call    is_key_pressed
 777  85DA C0                                   ret     nz
 778  85DB              .PausePressed:          SetAFalse                                  ; doesn't really matter if we were in pause already as resume is a different key
 778  85DB 3E FF       >                        ld      a,$FF
 779  85DD 32 60 9A                             ld      (GamePaused),a
 780  85E0 C9                                   ret
 781  85E1 3E 42        .TestForResume:         ld      a,c_Pressed_Resume                  ; In pause loop so we can check for resume key
 782  85E3 CD A5 97                             call    is_key_pressed
 783  85E6 C0                                   ret     nz
 784  85E7 AF           .ResumePressed:         xor     a
 785  85E8 32 60 9A                             ld      (GamePaused),a                      ; Resume pressed to reset pause state
 786  85EB C9                                   ret
 787  85EC
 788  85EC 3E 46        TestQuit:               ld      a,c_Pressed_Quit
 789  85EE CD A5 97                             call    is_key_pressed
 790  85F1 C9                                   ret
 791  85F2 0D           currentDemoShip:        DB      13;$12 ; 13 - corirollis
 792  85F3
 793  85F3
 794  85F3              ;----------------------------------------------------------------------------------------------------------------------------------
 795  85F3              UpdateShip:             ;  call    DEBUGSETNODES ;       call    DEBUGSETPOS
 796  85F3 21 64 86                             ld      hl,TidyCounter
 797  85F6 35                                   dec     (hl)
 798  85F7 C0                                   ret     nz
 799  85F8 3E 10                                ld      a,16
 800  85FA 32 64 86                             ld      (TidyCounter),a
 801  85FD                                      ; call    TIDY TIDY IS BROKEN
 802  85FD                                     ; add AI in here too
 803  85FD C9                                   ret
 804  85FE
 805  85FE
 806  85FE 21 0C C0     GetStationVectorToWork: ld      hl,UBnKxlo
 807  8601 11 6D 9A                             ld      de,varVector9ByteWork
 808  8604 ED A0                                ldi
 809  8606 ED A0                                ldi
 810  8608 ED A0                                ldi
 811  860A ED A0                                ldi
 812  860C ED A0                                ldi
 813  860E ED A0                                ldi
 814  8610 ED A0                                ldi
 815  8612 ED A0                                ldi
 816  8614 ED A0                                ldi
 817  8616 2A 6D 9A     .CalcNormalToXX15:      ld      hl, (varVector9ByteWork)  ; X
 818  8619 ED 5B 70 9A                          ld      de, (varVector9ByteWork+3); Y
 819  861D ED 4B 73 9A                          ld      bc, (varVector9ByteWork+6); Z
 820  8621 7D                                   ld      a,l
 821  8622 B3                                   or      e
 822  8623 B1                                   or      c
 823  8624 F6 01                                or      1
 824  8626 DD 6F                                ld      ixl,a                   ; or all bytes and with 1 so we have at least a 1
 825  8628 7C                                   ld      a,h
 826  8629 B2                                   or      d
 827  862A B0                                   or      b                       ; or all high bytes but don't worry about 1 as its sorted on low bytes
 828  862B C5           .MulBy2Loop:            push    bc
 829  862C DD 45                                ld      b,ixl
 830  862E CB 20                                sla     b                       ; Shift ixl left
 831  8630 DD 68                                ld      ixl,b
 832  8632 C1                                   pop     bc
 833  8633 CB 17                                rl      a                       ; roll into a
 834  8635 38 0E                                jr      c,.TA2                  ; if bit rolled out of rl a then we can't shift any more to the left
 835  8637                                      ShiftHLLeft1                    ; Shift Left X
 835  8637 CB 25       >			   sla l
 835  8639 CB 14       >			   rl  h
 836  863B                                      ShiftDELeft1                    ; Shift Left Y
 836  863B CB 23       >			   sla e
 836  863D CB 12       >			   rl  d
 837  863F                                      ShiftBCLeft1                    ; Shift Left Z
 837  863F CB 21       >			   sla c
 837  8641 CB 10       >			   rl  b
 838  8643 18 E6                                jr      .MulBy2Loop              ; no need to do jr nc as the first check looks for high bits across all X Y and Z
 839  8645 3A 6F 9A     .TA2:                   ld      a,(varVector9ByteWork+2); x sign
 840  8648 CB 3C                                srl     h
 841  864A B4                                   or      h
 842  864B 32 83 C0                             ld      (XX15VecX),a         ; note this is now a signed highbyte
 843  864E 3A 72 9A                             ld      a,(varVector9ByteWork+5); y sign
 844  8651 CB 3A                                srl     d
 845  8653 B2                                   or      d
 846  8654 32 84 C0                             ld      (XX15VecY),a         ; note this is now a signed highbyte
 847  8657 3A 75 9A                             ld      a,(varVector9ByteWork+8); y sign
 848  865A CB 38                                srl     b
 849  865C B0                                   or      b
 850  865D 32 85 C0                             ld      (XX15VecZ),a         ; note this is now a signed highbyte
 851  8660 CD 53 AE                             call    normaliseXX1596fast
 852  8663 C9                                   ret                             ; will return with a holding Vector Z
 853  8664
 854  8664 00           TidyCounter             DB  0
 855  8665
 856  8665                          INCLUDE "./debugMatrices.asm"
# file opened: ./debugMatrices.asm
   1+ 8665
   2+ 8665
   3+ 8665 21 88 86     DEBUGSETNODES:          ld      hl,DEBUGUBNKDATA
   4+ 8668 11 0C C0                             ld      de,UBnKxlo
   5+ 866B 01 09 00                             ld      bc,9
   6+ 866E ED B0                                ldir
   7+ 8670 21 91 86                             ld      hl,DEBUGROTMATDATA
   8+ 8673 11 15 C0                             ld      de,UBnkrotmatSidevX
   9+ 8676 01 12 00                             ld      bc,6*3
  10+ 8679 ED B0                                ldir
  11+ 867B C9                                   ret
  12+ 867C
  13+ 867C 21 88 86     DEBUGSETPOS:            ld      hl,DEBUGUBNKDATA
  14+ 867F 11 0C C0                             ld      de,UBnKxlo
  15+ 8682 01 06 00                             ld      bc,9 - 3
  16+ 8685 ED B0                                ldir
  17+ 8687 C9                                   ret
  18+ 8688
  19+ 8688              ; culltest
  20+ 8688              ;DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$31,	$03,	$00
  21+ 8688 00 00 00 00  DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$5C,	$07,	$00
  21+ 868C 00 00 5C 07
  21+ 8690 00
  22+ 8691 00 60 00 00  DEBUGROTMATDATA:        db      $00,	$60,	$00,	$00,	$00,	$00
  22+ 8695 00 00
  23+ 8697 00 00 00 60                          db      $00,	$00,	$00,	$60,	$00,	$00
  23+ 869B 00 00
  24+ 869D 00 00 00 00                          db      $00,	$00,	$00,	$00,	$00,	$E0
  24+ 86A1 00 E0
  25+ 86A3
  26+ 86A3              ; FAILS due to sharp angle, OK now
  27+ 86A3              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$EF,	$03,	$00
  28+ 86A3              ;DEBUGROTMATDATA:        db      $01,	$2F,	$B2,	$CC,	$4C,	$27
  29+ 86A3              ;                        db      $17,	$46,	$87,	$3C,	$95,	$20
  30+ 86A3              ;                        db      $E2,	$32,	$31,	$8C,	$EF,	$D1
  31+ 86A3              ; TOP RIGHT CORNER Passes as python and cobra
  32+ 86A3              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$5B,	$04,	$00
  33+ 86A3              ;DEBUGROTMATDATA:        db      $E2,	$03,	$3A,	$16,	$F5,	$60
  34+ 86A3              ;                        db      $D3,	$CE,	$F3,	$BA,	$4E,	$0F
  35+ 86A3              ;                        db      $03,	$BE,	$4A,	$4B,	$DB,	$8C
  36+ 86A3              ; Looks OK
  37+ 86A3              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $EE,    $02,    $00
  38+ 86A3              ;DEBUGROTMATDATA:        db      $35,    $d8,    $98,    $9f,    $b0,    $1a
  39+ 86A3              ;                        db      $4B,    $26,    $CE,    $d6,    $60,    $16
  40+ 86A3              ;                        db      $89,    $90,    $c4,    $9f,    $dd,    $d9
  41+ 86A3              ;
  42+ 86A3              ; Massive horizontal line
  43+ 86A3              ; 15th line (or line 14 has corrodinates 05,00 to D8,00) which looks wrong
  44+ 86A3              ; node array looks OK, looks liek its sorted as it was both -ve Y off screen fix added
  45+ 86A3              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $BD,    $03,    $00
  46+ 86A3              ;DEBUGROTMATDATA:        db      $59,    $CF,    $06,    $B6,    $61,    $8D
  47+ 86A3              ;                        db      $AD,    $B1,    $97,    $4F,    $C9,    $98
  48+ 86A3              ;                        db      $61,    $99,    $E0,    $0D,    $11,    $5C
  49+ 86A3              ; Line lost in clipping
  50+ 86A3              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $8B,    $04,    $00
  51+ 86A3              ;DEBUGROTMATDATA:        db      $A3,    $4D,    $A9,    $28,    $F8,    $AF
  52+ 86A3              ;                        db      $FB,    $97,    $8C,    $B5,    $FB,    $D0
  53+ 86A3              ;                        db      $DB,    $3A,    $29,    $CA,    $29,    $1C
  54+ 86A3              ;DEBUGUBNKDATA:          db      $5E,    $02,    $00,    $FE,    $00,    $FE,    $E5,    $09,    $00
  55+ 86A3              ;DEBUGROTMATDATA:        db      $A6,    $88,    $89,    $BB,    $53,    $4D
  56+ 86A3              ;                        db      $6D,    $D9,    $F0,    $99,    $BA,    $9E
  57+ 86A3              ;                        db      $4A,    $A8,    $89,    $47,    $DF,    $33
  58+ 86A3              ;
  59+ 86A3              ;DEBUGUBNKDATA:          db      $ED,    $05,    $00,    $FE,    $00,    $FE,    $F1,    $0A,    $00
  60+ 86A3              ;DEBUGROTMATDATA:        db      $1B,    $33,    $DE,    $B4,    $ED,    $C5
  61+ 86A3              ;                        db      $73,    $C4,    $BC,    $1E,    $96,    $C4
  62+ 86A3              ;                        db      $55,    $B9,    $35,    $D1,    $80,    $0F
  63+ 86A3              ; top left off right issue
  64+ 86A3              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $2F,    $03,    $00
  65+ 86A3              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  66+ 86A3              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  67+ 86A3              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  68+ 86A3              ; test middle of screen
  69+ 86A3              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  70+ 86A3              ;
  71+ 86A3              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  72+ 86A3              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  73+ 86A3              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  74+ 86A3              ; test middle of screen futher away
  75+ 86A3              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $02,    $00
  76+ 86A3              ;
  77+ 86A3              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  78+ 86A3              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  79+ 86A3              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  80+ 86A3
  81+ 86A3              ; Test left center clip still warping
  82+ 86A3              ;DEBUGUBNKDATA:          db      $80,    $00,    $80,    $00,    $00,    $00,    $20,    $01,    $00
  83+ 86A3              ;
  84+ 86A3              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  85+ 86A3              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  86+ 86A3              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  87+ 86A3              ; Test right center clip - seems to be warping values towards bottom of screen on clip
  88+ 86A3              ;DEBUGUBNKDATA:          db      $80,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  89+ 86A3              ;
  90+ 86A3              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  91+ 86A3              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  92+ 86A3              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  93+ 86A3              ; Test top center clip test 1 - good test many ships fail
  94+ 86A3              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $00,    $20,    $01,    $00
  95+ 86A3              ;
  96+ 86A3              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  97+ 86A3              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  98+ 86A3              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  99+ 86A3              ; Test top center clip test 2 - Poss 2nd ship has an issue with a small line
 100+ 86A3              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $60,    $00,    $00,    $2F,    $01,    $00
 101+ 86A3              ;
 102+ 86A3              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 103+ 86A3              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 104+ 86A3              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 105+ 86A3              ; Test bottom center clip ; complet shambles as if its forcing cip to below 128
 106+ 86A3              ; looks better now may have some clipping issues maybe ship data
 107+ 86A3              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $80,    $20,    $01,    $00
 108+ 86A3              ;
 109+ 86A3              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 110+ 86A3              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 111+ 86A3 E6 01 81 AD                          db      $E6,    $01,    $81,    $AD,    $B0,    $55
 111+ 86A7 B0 55
 112+ 86A9              ; Test left top center clip
 113+ 86A9
 114+ 86A9              ; Test right top center clip
 115+ 86A9              ; Test left bottom center clip
 116+ 86A9              ; Test right bottom center clip
 117+ 86A9
 118+ 86A9              ; Tests with no clip
 119+ 86A9              ;DEBUGUBNKDATA:          db      $39,    $00,    $00,    $43,    $00,    $00,    $2F,    $04,    $00
 120+ 86A9              ;
 121+ 86A9              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 122+ 86A9              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 123+ 86A9              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 124+ 86A9              ;
 125+ 86A9              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $1F,    $00,    $00
 126+ 86A9              ;
 127+ 86A9              ; UBNKPOs example 39,01,00,43,01,00,f4,03,00
 128+ 86A9              ; rotmat  example b1, 83,ae,5d,b0,1a,5e,de,82,8a,69,16,70,99,52,19,dd,d9
 129+ 86A9
# file closed: ./debugMatrices.asm
 857  86A9
 858  86A9
 859  86A9              ;TODO Optimisation
 860  86A9              ; Need this table to handle differnet events
 861  86A9              ; 1-main loop update - just general updates specfic to that screen that are not galaxy or stars, e.g. update heat, console
 862  86A9              ; cursor key, joystick press
 863  86A9              ; cursor key, joystick press
 864  86A9              ; non cursor keys presses
 865  86A9              ;
 866  86A9              ; First byte is now docked flag
 867  86A9              ;
 868  86A9              ; Padded to 8 bytes to allow a * 8 for addressing
 869  86A9              ; Byte 0   - Docked flag  : 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
 870  86A9              ; Byte 1   - Screen Id
 871  86A9              ; Byte 2,3 - address of keypress table
 872  86A9              ; Byte 4   - Bank with Display code
 873  86A9              ; Byte 5,6 - Function for display
 874  86A9              ; Byte 7,8 - Main loop update routine
 875  86A9              ; Byte 9   - Draw stars Y/N ; also are we in an external view that can have guns?
 876  86A9              ; byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 877  86A9              ; byte 11  - Double Buffering 0 = no, 1 = yes
 878  86A9              ; byte 12,13  - cursor key input routine
 879  86A9              ; byte 14  - HyperspaceBlock - can not select this screen if in hyperpace - 00 can , 01 can not
 880  86A9              ; byte 15    padding at the momnent (should add in an "AI enabled flag" for optimistation, hold previous value and on change create ships
 881  86A9              ;
 882  86A9              ;                          0    1                 2                              3                               4                    5                            6                              7                     8                       9   10  11  12                          13                          14  15
 883  86A9 00 00 F6 96  ScreenKeyMap:           DB 0,   ScreenLocal     , low addr_Pressed_LocalChart,   high addr_Pressed_LocalChart,   BankMenuShrCht,      low draw_local_chart_menu,   high draw_local_chart_menu,    $00,                  $00,                    $00,$00,$00,low local_chart_cursors,    high local_chart_cursors,   $01,$00;low loop_local_chart_menu,   high loop_local_chart_menu
 883  86AD 32 FC C3 00
 883  86B1 00 00 00 00
 883  86B5 5A C4 01 00
 884  86B9 00 01 F4 96  ScreenKeyGalactic:      DB 0,   ScreenGalactic  , low addr_Pressed_GalacticChrt, high addr_Pressed_GalacticChrt, BankMenuGalCht,      low draw_galactic_chart_menu,high draw_galactic_chart_menu, low loop_gc_menu,     high loop_gc_menu,      $00,$00,$00,low galctic_chart_cursors,  high galctic_chart_cursors, $01,$00
 884  86BD 33 48 C1 78
 884  86C1 C2 00 00 00
 884  86C5 00 C3 01 00
 885  86C9 01 02 F8 96                          DB 1,   ScreenMarket    , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  low loop_market_menu, high loop_market_menu,  $00,$00,$00,$00,                        $00,                        $01,$00
 885  86CD 36 43 C3 FA
 885  86D1 C3 00 00 00
 885  86D5 00 00 01 00
 886  86D9 02 03 F8 96                          DB 2,   ScreenMarketDsp , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 886  86DD 36 43 C3 00
 886  86E1 00 00 00 00
 886  86E5 00 00 01 00
 887  86E9 00 04 FA 96  ScreenCmdr:             DB 0,   ScreenStatus    , low addr_Pressed_Status,       high addr_Pressed_Status,       BankMenuStatus,      low draw_status_menu,        high draw_status_menu,         low loop_STAT_menu,  high loop_STAT_menu,     $00,$00,$00,$00,                        $00,                        $01,$00
 887  86ED 3F 46 CF 8A
 887  86F1 CF 00 00 00
 887  86F5 00 00 01 00
 888  86F9 00 05 FC 96                          DB 0,   ScreenInvent    , low addr_Pressed_Inventory,    high addr_Pressed_Inventory,    BankMenuInvent,      low draw_inventory_menu,     high draw_inventory_menu,      $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 888  86FD 34 F5 C1 00
 888  8701 00 00 00 00
 888  8705 00 00 01 00
 889  8709 00 06 0A 97                          DB 0,   ScreenPlanet    , low addr_Pressed_PlanetData,   high addr_Pressed_PlanetData,   BankMenuSystem,      low draw_system_data_menu,   high draw_system_data_menu,    $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 889  870D 35 F0 C2 00
 889  8711 00 00 00 00
 889  8715 00 00 01 00
 890  8719 01 07 F2 96                          DB 1,   ScreenEquip     , low addr_Pressed_Equip,        high addr_Pressed_Equip,        BankMenuEquipS,      low draw_eqshp_menu,         high draw_eqshp_menu,          low loop_eqshp_menu,  high loop_eqshp_menu,   $00,$00,$00,$00,                        $00,                        $01,$00
 890  871D 40 EA D3 86
 890  8721 D4 00 00 00
 890  8725 00 00 01 00
 891  8729 01 08 EC 96                          DB 1,   ScreenLaunch    , low addr_Pressed_Launch,       high addr_Pressed_Launch,       BankLaunchShip,      low draw_launch_ship,        high draw_launch_ship,         low loop_launch_ship, high loop_launch_ship,  $00,$01,$01,$00,                        $00,                        $01,$00
 891  872D 41 79 C1 63
 891  8731 C2 00 01 01
 891  8735 00 00 01 00
 892  8739 02 09 C2 96  ScreenKeyFront:         DB 2,   ScreenFront     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 892  873D 3E 6A C0 00
 892  8741 00 01 00 01
 892  8745 72 C2 00 00
 893  8749 02 0A C2 96                          DB 2,   ScreenAft       , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 893  874D 3E 6A C0 00
 893  8751 00 01 00 01
 893  8755 72 C2 00 00
 894  8759 02 0B C2 96                          DB 2,   ScreenLeft      , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 894  875D 3E 6A C0 00
 894  8761 00 01 00 01
 894  8765 72 C2 00 00
 895  8769 02 0C C2 96                          DB 2,   ScreenRight     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 895  876D 3E 6A C0 00
 895  8771 00 01 00 01
 895  8775 72 C2 00 00
 896  8779 03 0D FF FF                          DB 3,   ScreenDocking   , $FF,                           $FF,                            BankLaunchShip,      low draw_docking_ship,       high draw_docking_ship,        low loop_docking_ship,high loop_docking_ship, $00,$01,$01,$00,                        $00,                        $01,$00
 896  877D 41 F5 C1 98
 896  8781 C2 00 01 01
 896  8785 00 00 01 00
 897  8789 01 0E FF FF                          DB 1,   ScreenHyperspace, $FF,                           $FF,                            BankFrontView,       low draw_hyperspace,         high draw_hyperspace,          low loop_hyperspace,  high loop_hyperspace,   $00,$01,$01,$00
 897  878D 3E 2A C2 70
 897  8791 C2 00 01 01
 897  8795 00
 898  8796
 899  8796              ;               DB low addr_Pressed_Aft,          high addr_Pressed_Aft,          BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 900  8796              ;               DB low addr_Pressed_Left,         high addr_Pressed_Left,         BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 901  8796              ;               DB low addr_Pressed_Right,        high addr_Pressed_Right,        BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 902  8796              ScreenMapRow        EQU ScreenKeyGalactic - ScreenKeyMap
 903  8796              ScreenMapLen        EQU ($ - ScreenKeyMap) / ScreenMapRow
 904  8796              ScreenViewsStart    EQU (ScreenKeyFront - ScreenKeyMap)/ScreenMapRow
 905  8796 FF           ScreenTransitionForced  DB $FF
 906  8797                  INCLUDE "./GameEngine/resetUniverse.asm"
# file opened: ./GameEngine/resetUniverse.asm
   1+ 8797              ; Use bank 0 as source and bank 7 as write target
   2+ 8797              ResetUniv:              MMUSelectCpySrcN BankUNIVDATA0	         ; master universe def in bank 0
   2+ 8797 ED 91 50 46 >                     nextreg DMACpySourceMMU,	BankUNIVDATA0
   3+ 879B 3E 01                                ld		a,1             				 ; we can read bank 0 as if it was rom
   4+ 879D 06 0C                                ld		b,12
   5+ 879F C5 F5        .ResetCopyLoop:         push	bc,,af
   6+ 87A1                                      MMUSelectUniverseA			             ; copy from bank 0 to 71 to 12
   6+ 87A1 C6 46       >                     add    a,BankUNIVDATA0
   6+ 87A3 ED 92 56    >                     nextreg UniverseMMU,       a
   7+ 87A6 21 00 C0                             ld		hl,UniverseBankAddr
   8+ 87A9 11 00 00                             ld		de,dmaCopySrcAddr
   9+ 87AC 01 A2 1F                             ld		bc,UnivBankSize
  10+ 87AF CD 66 96                             call	memcopy_dma
  11+ 87B2 F1 C1                                pop		bc,,af
  12+ 87B4 57                                   ld      d,a
  13+ 87B5 C6 41                                add     "A"
  14+ 87B7 32 0B C0                             ld      (StartOfUnivN),a
  15+ 87BA 7A                                   ld      a,d
  16+ 87BB 3C                                   inc		a
  17+ 87BC 10 E1                                djnz	.ResetCopyLoop
  18+ 87BE C9                                   ret
  19+ 87BF
  20+ 87BF              ; Use bank 0 as source and bank 7 as write target
  21+ 87BF              ResetGalaxy:            MMUSelectCpySrcN BankGalaxyData0	     ; master universe def in bank 0 we can read bank 0 as if it was rom
  21+ 87BF ED 91 50 5B >                     nextreg DMACpySourceMMU,	BankGalaxyData0
  22+ 87C3 3E 5C                                ld		a,BankGalaxyData1 			   	 ; and write to real location for galaxy data
  23+ 87C5 06 07                                ld		b,7                              ; 8 galaxies but we start with galaxy 0
  24+ 87C7 0E 01                                ld      c,1                              ;
  25+ 87C9 F5           .ResetCopyLoop:         push	af                               ;
  26+ 87CA C5                                   push	bc                               ;
  27+ 87CB                                      MMUSelectGalaxyA    	                 ; copy from bank 0 to galaxy 1 to 7
  27+ 87CB ED 92 57    >                     nextreg GalaxyDataMMU,       a
  28+ 87CE 21 00 E0                             ld		hl,GalaxyDataAddr                ; using dma transfer
  29+ 87D1 11 00 00                             ld		de,dmaCopySrcAddr                ; .
  30+ 87D4 01 DD 1C                             ld		bc,GalaxyBankSize                ; .
  31+ 87D7 CD 66 96                             call	memcopy_dma                      ; .
  32+ 87DA C1                                   pop		bc                               ; .
  33+ 87DB 21 0F E0                             ld      hl, galaxy_pg_cnt                ; write out the galaxy page nbr to the page so we can diagnose page swapping
  34+ 87DE 79                                   ld      a,c                              ;
  35+ 87DF C6 30                                add     a, $30                           ; add $30 (48) to get ascii of galaxy nbr
  36+ 87E1 77                                   ld      (hl),a                           ; .
  37+ 87E2 0C                                   inc     c                                ; Do next bank
  38+ 87E3 F1                                   pop     af                               ; .
  39+ 87E4 3C                                   inc		a                                ; .
  40+ 87E5 10 E2                                djnz	.ResetCopyLoop                    ; .
  41+ 87E7 C9                                   ret
  42+ 87E8
  43+ 87E8 06 08        SeedAllGalaxies:        ld          b,8
  44+ 87EA 0E 5B                                ld          c,BankGalaxyData0
  45+ 87EC C5           .SeedAllGalaxiesLoop:   push        bc
  46+ 87ED 79                                   ld          a,c
  47+ 87EE                                      MMUSelectGalaxyA
  47+ 87EE ED 92 57    >                     nextreg GalaxyDataMMU,       a
  48+ 87F1 CD A0 FC                             call        SeedGalaxy
  49+ 87F4 C1                                   pop         bc
  50+ 87F5 0C                                   inc         c
  51+ 87F6 10 F4                                djnz        .SeedAllGalaxiesLoop
  52+ 87F8 C9                                   ret
# file closed: ./GameEngine/resetUniverse.asm
 907  87F9
 908  87F9
 909  87F9              ;----------------------------------------------------------------------------------------------------------------------------------
 910  87F9              LaunchedFromStation:    MMUSelectSun
 910  87F9 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 911  87FD CD 5D C2                             call    CreateSun                      ; create the local sun and set position based on seed
 912  8800 CD 9C 9E                             call    ClearUnivSlotList
 913  8803 CD A8 9E                             call    SetSlot0ToSpaceStation              ; set slot 1 to space station
 914  8806                                      MMUSelectUniverseN 0                        ; Prep Target universe
 914  8806 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 915  880A                                      MMUSelectShipBank1                          ; Bank in the ship model code
 915  880A ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 916  880E CD 49 CB                             call    UnivInitRuntime                     ; Zerp ship runtime data
 917  8811 3E 0D                                ld      a,CoriloisStation
 918  8813 CD 0F E0                             call    GetShipBankId
 919  8816                                      MMUSelectShipBankA                          ; Select the correct bank found
 919  8816 ED 92 57    >					 nextreg ShipModelMMU,	    a
 920  8819 78                                   ld      a,b                                 ; Select the correct ship
 921  881A CD 6A E0                             call    CopyShipToUniverse
 922  881D CD 16 CB     .BuiltStation:          call    ResetStationLaunch
 923  8820 AF           .NowInFlight:           xor     a
 924  8821 32 5F 9A                             ld      (DockedFlag),a
 925  8824                                      ForceTransition ScreenFront
 925  8824 3E 09       >                        ld      a,ScreenFront
 925  8826 32 96 87    >                        ld      (ScreenTransitionForced), a
 926  8829 CD F0 9D                             call    ResetPlayerShip
 927  882C C9                                   ret
 928  882D
 929  882D 3A EA 86     InitialiseCommander:    ld      a,(ScreenCmdr+1)
 930  8830 DD 21 E9 86                          ld      ix,ScreenCmdr
 931  8834 C3 41 88                             jp      SetScreenAIX
 932  8837
 933  8837 3A 3A 87     InitialiseFrontView:    ld      a,(ScreenKeyFront+1)
 934  883A DD 21 39 87                          ld      ix,ScreenKeyFront
 935  883E C3 41 88                             jp      SetScreenAIX
 936  8841              ; false ret here as we get it free from jp
 937  8841
 938  8841              ;----------------------------------------------------------------------------------------------------------------------------------
 939  8841 32 59 9A     SetScreenAIX:           ld      (ScreenIndex),a                 ; Set screen index to a
 940  8844                                      ClearForceTransition                    ; In case it was called by a brute force change in an update loop
 940  8844 3E FF       >                        ld      a,$FF
 940  8846 32 96 87    >                        ld      (ScreenTransitionForced),a
 941  8849 32 58 9A                             ld      (ScreenChanged),a               ; Set screen changed to FF
 942  884C DD 7E 09     .IsItAViewPort:         ld      a,(ix+9)                        ; Screen Map Byte 9  - Draw stars Y/N and also guns present
 943  884F 32 35 81                             ld      (CheckIfViewUpdate+1),a         ; Set flag to determine if we are on an exterior view
 944  8852                                      JumpIfAIsZero .NotViewPort              ;
 944  8852 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 944  8853 CA 62 88    >                        jp	z, .NotViewPort
 945  8856 DD 7E 01                             ld      a,(ix+1)                        ; get screen view number
 946  8859 D6 09                                sub     ScreenFront                     ; Now a = screen number 0 = front, 1 = aft, 2 = left 3 = right
 947  885B                                      MMUSelectCommander                      ; Load view laser to current
 947  885B ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 948  885F CD F4 E2                             call    LoadLaserToCurrent              ;
 949  8862 DD 7E 04     .NotViewPort:           ld      a,(ix+4)                        ; Screen Map Byte 4   - Bank with Display code
 950  8865 32 E5 81                             ld      (ScreenLoopBank+1),a            ; setup loop
 951  8868 32 0C 81                             ld      (HandleBankSelect+1),a          ; setup cursor keys
 952  886B                                      MMUSelectScreenA
 952  886B ED 92 56    >                     nextreg ScreenBankMMU,		a
 953  886E DD 7E 05                             ld      a,(ix+5)                        ; Screen Map Byte 5 - Function for display
 954  8871 32 9F 88                             ld      (ScreenUpdateAddr+1),a
 955  8874 DD 7E 06                             ld      a,(ix+6)                        ; Screen Map Byte 6 - Function for display
 956  8877 32 A0 88                             ld      (ScreenUpdateAddr+2),a
 957  887A DD 7E 07                             ld      a,(ix+7)                        ; Screen Map Byte 7 - Main loop update routine
 958  887D 32 EA 81                             ld      (ScreenLoopJP+1),a
 959  8880 DD 7E 08                             ld      a,(ix+8)                        ; Screen Map Byte 8 - Main loop update routine
 960  8883 32 EB 81                             ld      (ScreenLoopJP+2),a
 961  8886 DD 7E 0A                             ld      a,(ix+10)                       ; Screen Map Byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 962  8889 32 E7 80                             ld      (InputBlockerCheck+1),a          ; Set flag to block transitions as needed e.g. launch screen
 963  888C DD 7E 0B                             ld      a,(ix+11)                       ; Screen Map Byte 11  - Double Buffering 0 = no, 1 = yes
 964  888F 32 A5 83                             ld      (DoubleBufferCheck+1),a
 965  8892 DD 7E 0C                             ld      a,(ix+12)
 966  8895 32 11 81                             ld      (CallCursorRoutine+1),a
 967  8898 DD 7E 0D                             ld      a,(ix+13)
 968  889B 32 12 81                             ld      (CallCursorRoutine+2),a
 969  889E
 970  889E C3 00 00     ScreenUpdateAddr:       jp      $0000                          ; We can just drop out now and also get a free ret from caller
 971  88A1              ;----------------------------------------------------------------------------------------------------------------------------------
 972  88A1 3A 59 9A     ViewKeyTest:            ld      a,(ScreenIndex)
 973  88A4 4F                                   ld      c,a
 974  88A5 06 0E                                ld      b,ScreenMapLen                  ; For now until add screens are added
 975  88A7 DD 21 A9 86                          ld      ix,ScreenKeyMap
 976  88AB 2A 16 9B                             ld      hl,(InnerHyperCount)
 977  88AE 7C                                   ld      a,h
 978  88AF B5                                   or      l
 979  88B0 FD 67                                ld      iyh,a
 980  88B2 FD 7C        ViewScanLoop:           ld      a,iyh
 981  88B4 A7           .HyperspaceCountdown:   and     a
 982  88B5 28 08                                jr      z,.DockedFlag
 983  88B7 DD 7E 0E                             ld      a,(ix+14)
 984  88BA FE 01                                cp      1
 985  88BC CA 01 89                             jp      z,NotReadNextKey
 986  88BF DD 7E 00     .DockedFlag:            ld      a,(ix+0)                        ; Screen Map Byte 0 Docked flag
 987  88C2              ; 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
 988  88C2 FE 03                                cp      3                               ; if not selectable then don't scan this (becuase its a transition screen)
 989  88C4 28 3B                                jr      z,NotReadNextKey                ;
 990  88C6 FE 00                                cp      0                               ; if itr a always read skip docking check
 991  88C8 28 14                                jr      z,.NoDocCheck
 992  88CA 57           .DocCheck:              ld      d,a
 993  88CB 3A 5F 9A                             ld      a,(DockedFlag)
 994  88CE FE 00                                cp      0                               ; if we are docked
 995  88D0 28 07                                jr      z,.NotDockedCheck
 996  88D2 7A           .DockedCheck:           ld      a,d
 997  88D3 FE 01                                cp      1                               ; if we are docked and its a dock only then scan
 998  88D5 20 2A                                jr      nz,NotReadNextKey
 999  88D7 18 05                                jr      .NoDocCheck
1000  88D9 7A           .NotDockedCheck:        ld      a,d
1001  88DA FE 02                                cp      2                               ; if we are not docked and its a flight only then scan
1002  88DC 20 23                                jr      nz,NotReadNextKey
1003  88DE DD 7E 01     .NoDocCheck:            ld      a,(ix+1)                        ; Screen Map Byte 1 Screen Id
1004  88E1 B9                                   cp      c                               ; is the index the current screen, if so skip the scan
1005  88E2 5F                                   ld      e,a
1006  88E3 28 1C                                jr      z,NotReadNextKey
1007  88E5 DD 7E 02                             ld      a,(ix+2)                        ; Screen Map Byte 2 - address of keypress table
1008  88E8 FE FF                                cp      $FF                             ; if upper byte is FF then we do not respond
1009  88EA 28 15                                jr      z,NotReadNextKey
1010  88EC 32 F6 88                             ld      (ReadKeyAddr+1),a               ; Poke address into the ld hl,(....) below
1011  88EF DD 7E 03                             ld      a,(ix+3)                        ; Screen Map Byte 3 - address of keypress table
1012  88F2 32 F7 88                             ld      (ReadKeyAddr+2),a
1013  88F5 2A 00 00     ReadKeyAddr:            ld      hl,($0000)                      ; address is entry in the pointer table to the actual keypress
1014  88F8 7E                                   ld      a,(hl)                          ; now fetch the actual keypress
1015  88F9                                      JumpIfAIsZero NotReadNextKey
1015  88F9 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
1015  88FA CA 01 89    >                        jp	z, NotReadNextKey
1016  88FD 7B           .ValidScreenChange:     ld      a,e
1017  88FE C3 41 88                             jp      SetScreenAIX
1018  8901              ;--- CODE WILL NOT FALL TO HERE ---
1019  8901 11 10 00     NotReadNextKey:         ld      de,ScreenMapRow
1020  8904 DD 19                                add     ix,de                           ; we have only processed 3 of 8 bytes at here
1021  8906 10 AA                                djnz    ViewScanLoop
1022  8908 C9                                   ret
1023  8909
1024  8909 21 00 00     SetInitialShipPosition: ld      hl,$0000
1025  890C 22 0C C0                             ld      (UBnKxlo),hl
1026  890F 21 00 00                             ld      hl,$0000
1027  8912 22 0F C0                             ld      (UBnKylo),hl
1028  8915 21 B4 03                             ld      hl,$03B4
1029  8918 22 12 C0                             ld      (UBnKzlo),hl
1030  891B AF                                   xor     a
1031  891C 32 0E C0                             ld      (UBnKxsgn),a
1032  891F 32 11 C0                             ld      (UBnKysgn),a
1033  8922 32 14 C0                             ld      (UBnKzsgn),a
1034  8925              ;    call    Reset TODO
1035  8925 CD BC CC                             call	InitialiseOrientation            ;#00;
1036  8928 3E 01                                ld      a,1
1037  892A 32 4C 9A                             ld      (DELTA),a
1038  892D 21 04 00                             ld      hl,4
1039  8930 22 4D 9A                             ld      (DELTA4),hl
1040  8933 C9                                   ret
1041  8934
1042  8934
1043  8934                          INCLUDE "./Views/ConsoleDrawing.asm"
# file opened: ./Views/ConsoleDrawing.asm
   1+ 8934              ; bc = start position, d = length, e = colour
   2+ 8934 1E 10        Draw3LineBar:           ld      e,16
   3+ 8936 C5 D5                                push    bc,,de
   4+ 8938                                      MMUSelectLayer2
   4+ 8938 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   5+ 893C CD 8A E2                             call    l2_draw_horz_line
   6+ 893F D1 C1                                pop     bc,,de
   7+ 8941 05                                   dec     b
   8+ 8942 C5 D5                                push    bc,,de
   9+ 8944 1E 14                                ld      e,20
  10+ 8946                                      MMUSelectLayer2
  10+ 8946 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  11+ 894A CD 8A E2                             call    l2_draw_horz_line
  12+ 894D D1 C1                                pop     bc,,de
  13+ 894F 05                                   dec     b
  14+ 8950                                      MMUSelectLayer2
  14+ 8950 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  15+ 8954 CD 8A E2                             call    l2_draw_horz_line
  16+ 8957 C9                                   ret
  17+ 8958
  18+ 8958 1E 7C        DrawColourCodedBar:     ld      e,124
  19+ 895A FE 28                                cp      40
  20+ 895C 30 18                                jr      nc,DrawColourEBar
  21+ 895E 1E 54                                ld      e,84
  22+ 8960 FE 1E                                cp      30
  23+ 8962 30 12                                jr      nc,DrawColourEBar
  24+ 8964 1E D8                                ld      e,216
  25+ 8966 FE 14                                cp      20
  26+ 8968 1E EC                                ld      e,236
  27+ 896A FE 0A                                cp      10
  28+ 896C 30 08                                jr      nc,DrawColourEBar
  29+ 896E 1E E1                                ld      e,225
  30+ 8970 FE 05                                cp      5
  31+ 8972 30 02                                jr      nc,DrawColourEBar
  32+ 8974 1E E0                                ld      e,224
  33+ 8976 C5 D5        DrawColourEBar:         push    bc,,de
  34+ 8978                                      MMUSelectLayer2
  34+ 8978 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ 897C CD 8A E2                             call    l2_draw_horz_line
  36+ 897F D1 C1                                pop     bc,,de
  37+ 8981 05                                   dec     b
  38+ 8982 C5 D5                                push    bc,,de
  39+ 8984                                      MMUSelectLayer2
  39+ 8984 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  40+ 8988 CD 8A E2                             call    l2_draw_horz_line
  41+ 898B D1 C1                                pop     bc,,de
  42+ 898D 05                                   dec     b
  43+ 898E                                      MMUSelectLayer2
  43+ 898E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  44+ 8992 CD 8A E2                             call    l2_draw_horz_line
  45+ 8995 C9                                   ret
  46+ 8996
  47+ 8996                                      ; no ret needed as jp handles it
  48+ 8996
  49+ 8996
  50+ 8996 3A 4C 9A     UpdateConsole:          ld      a,(DELTA)
  51+ 8999 FE 00                                cp      0                           ; don't draw if there is nothing to draw
  52+ 899B 28 0C                                jr      z,.UpdateRoll
  53+ 899D 01 D1 84                             ld      bc,SpeedoStart
  54+ 89A0 21 9D 9D                             ld      hl,SpeedoMapping
  55+ 89A3 ED 31                                add     hl,a
  56+ 89A5 56                                   ld      d,(hl)
  57+ 89A6 CD 34 89                             call    Draw3LineBar
  58+ 89A9 3A 67 99     .UpdateRoll:            ld      a,(ALP1)
  59+ 89AC FE 00                                cp      0
  60+ 89AE CA E2 89                             jp      z,.UpdatePitch
  61+ 89B1 21 E0 8C                             ld      hl,RollMiddle
  62+ 89B4 3A 68 99                             ld      a,(ALP2)
  63+ 89B7 FE 00                                cp      0
  64+ 89B9 CA D4 89                             jp     z,.PosRoll
  65+ 89BC 16 00        .NegRoll:               ld      d,0
  66+ 89BE 3A 67 99                             ld      a,(ALP1)
  67+ 89C1 CB 27                                sla     a
  68+ 89C3 5F                                   ld      e,a
  69+ 89C4 B7                                   or      a
  70+ 89C5 ED 52                                sbc     hl,de
  71+ 89C7 44 4D                                ld      bc,hl
  72+ 89C9 3E E1                                ld      a,DialMiddleXPos
  73+ 89CB 91                                   sub     c
  74+ 89CC 57                                   ld      d,a
  75+ 89CD 1E FF                                ld      e,$FF
  76+ 89CF CD 34 89                             call    Draw3LineBar
  77+ 89D2 18 0E                                jr      .UpdatePitch
  78+ 89D4 01 E0 8C     .PosRoll:               ld      bc,RollMiddle
  79+ 89D7 3A 67 99                             ld      a,(ALP1)
  80+ 89DA CB 27                                sla     a
  81+ 89DC 57                                   ld      d,a
  82+ 89DD 1E FF                                ld      e,$FF
  83+ 89DF CD 34 89                             call    Draw3LineBar
  84+ 89E2 3A 5A 99     .UpdatePitch:           ld      a,(BET1)
  85+ 89E5 FE 00                                cp      0
  86+ 89E7 CA 1C 8A                             jp      z,.Fuel
  87+ 89EA 21 E0 94                             ld      hl,PitchMiddle
  88+ 89ED 3A 5B 99                             ld      a,(BET2)
  89+ 89F0 FE 00                                cp      0
  90+ 89F2 CA 0E 8A                             jp      z,.PosPitch
  91+ 89F5 16 00        .NegPitch:              ld      d,0
  92+ 89F7 3A 5A 99                             ld      a,(BET1)
  93+ 89FA CB 27                                sla     a
  94+ 89FC 5F                                   ld      e,a
  95+ 89FD B7                                   or      a
  96+ 89FE ED 52                                sbc     hl,de
  97+ 8A00 44 4D                                ld      bc,hl
  98+ 8A02 3E E1                                ld      a,DialMiddleXPos
  99+ 8A04 91                                   sub     c
 100+ 8A05 57                                   ld      d,a
 101+ 8A06 1E FF                                ld      e,$FF
 102+ 8A08 CD 34 89                             call    Draw3LineBar
 103+ 8A0B C3 1C 8A                             jp      .Fuel
 104+ 8A0E 01 E0 94     .PosPitch:              ld      bc,PitchMiddle
 105+ 8A11 3A 5A 99                             ld      a,(BET1)
 106+ 8A14 CB 27                                sla     a
 107+ 8A16 57                                   ld      d,a
 108+ 8A17 1E FF                                ld      e,$FF
 109+ 8A19 CD 34 89                             call    Draw3LineBar
 110+ 8A1C 3A 2A 9F     .Fuel:                  ld      a,(Fuel)
 111+ 8A1F CB 3F                                srl     a               ; divide by 4 to get range on screen
 112+ 8A21 21 78 9D                             ld      hl,FuelMapping
 113+ 8A24 ED 31                                add     hl,a
 114+ 8A26 7E                                   ld      a,(hl)
 115+ 8A27 01 10 94                             ld      bc,FuelStart
 116+ 8A2A 57                                   ld      d,a
 117+ 8A2B CD 58 89                             call    DrawColourCodedBar
 118+ 8A2E 3A 4B 9D     .ForeShield:            ld      a,(ForeShield)
 119+ 8A31 CB 3F                                srl     a
 120+ 8A33 CB 3F                                srl     a
 121+ 8A35 CB 3F                                srl     a
 122+ 8A37 01 10 84                             ld      bc,FShieldStart
 123+ 8A3A CD 58 89                             call    DrawColourCodedBar
 124+ 8A3D 3A 4C 9D     .AftShield:             ld      a,(AftShield)
 125+ 8A40 CB 3F                                srl     a
 126+ 8A42 CB 3F                                srl     a
 127+ 8A44 CB 3F                                srl     a
 128+ 8A46 01 10 8D                             ld      bc,AShieldStart
 129+ 8A49 57                                   ld      d,a
 130+ 8A4A CD 58 89                             call    DrawColourCodedBar  ;ld		(ForeShield),a
 131+ 8A4D              ;PlayerEnergy
 132+ 8A4D              ; BNEED LASER temp
 133+ 8A4D              ; NEED CABIN TEMP
 134+ 8A4D              ;NEED ALTITUDE
 135+ 8A4D              ; Draw compas - if in range draw station, else do planet
 136+ 8A4D 3A 4D 9D     .EnergyBars:            ld      a,(PlayerEnergy)
 137+ 8A50 CB 3F                                srl     a                   ; energy = energy / 2 so 31 per bar
 138+ 8A52                                      JumpIfALTNusng  31 + 1,     Draw1EnergyBar
 138+ 8A52 FE 20       >                        cp      31 + 1
 138+ 8A54 DA 65 8A    >                        jp		c, Draw1EnergyBar
 139+ 8A57                                      JumpIfALTNusng  (31*2) + 1, Draw2EnergyBars
 139+ 8A57 FE 3F       >                        cp      (31*2) + 1
 139+ 8A59 DA 6F 8A    >                        jp		c, Draw2EnergyBars
 140+ 8A5C                                      JumpIfALTNusng  (31*3) + 1, Draw3EnergyBars
 140+ 8A5C FE 5E       >                        cp      (31*3) + 1
 140+ 8A5E DA 85 8A    >                        jp		c, Draw3EnergyBars
 141+ 8A61 C3 A7 8A                             jp      Draw4EnergyBars
 142+ 8A64              ; implicit ret
 143+ 8A64
 144+ 8A64
 145+ 8A64              ; NEED ENERGY BAR
 146+ 8A64
 147+ 8A64 C9           .DoneConsole:           ret
 148+ 8A65
 149+ 8A65 1E E0        Draw1EnergyBar:         ld      e,224
 150+ 8A67 57                                   ld      d,a
 151+ 8A68 01 D5 BD                             ld      bc,EnergyBar1Start
 152+ 8A6B CD 76 89                             call    DrawColourEBar
 153+ 8A6E C9                                   ret
 154+ 8A6F 1E D8        Draw2EnergyBars:        ld      e,216
 155+ 8A71 D6 1F                                sub     31
 156+ 8A73 57                                   ld      d,a
 157+ 8A74 01 D5 B5                             ld      bc,EnergyBar2Start
 158+ 8A77 CD 76 89                             call    DrawColourEBar
 159+ 8A7A 16 1F                                ld      d,31
 160+ 8A7C 1E D8                                ld      e,216
 161+ 8A7E 01 D5 BD                             ld      bc,EnergyBar1Start
 162+ 8A81 CD 76 89                             call    DrawColourEBar
 163+ 8A84 C9                                   ret
 164+ 8A85 1E 14        Draw3EnergyBars:        ld      e,20
 165+ 8A87 D6 3E                                sub     31*2
 166+ 8A89 57                                   ld      d,a
 167+ 8A8A 1E 14                                ld      e,20
 168+ 8A8C 01 D5 AD                             ld      bc,EnergyBar3Start
 169+ 8A8F CD 76 89                             call    DrawColourEBar
 170+ 8A92 16 1F                                ld      d,31
 171+ 8A94 1E 14                                ld      e,20
 172+ 8A96 01 D5 B5                             ld      bc,EnergyBar2Start
 173+ 8A99 CD 76 89                             call    DrawColourEBar
 174+ 8A9C 16 1F                                ld      d,31
 175+ 8A9E 1E 14                                ld      e,20
 176+ 8AA0 01 D5 BD                             ld      bc,EnergyBar1Start
 177+ 8AA3 CD 76 89                             call    DrawColourEBar
 178+ 8AA6 C9                                   ret
 179+ 8AA7 1E 18        Draw4EnergyBars:        ld      e,24
 180+ 8AA9 D6 5D                                sub     31*3
 181+ 8AAB                                      JumpIfALTNusng 31,.NoMax
 181+ 8AAB FE 1F       >                        cp      31
 181+ 8AAD DA B2 8A    >                        jp		c, .NoMax
 182+ 8AB0 3E 1F        .Max                    ld      a,31
 183+ 8AB2 57           .NoMax:                 ld      d,a
 184+ 8AB3 01 D5 A5                             ld      bc,EnergyBar4Start
 185+ 8AB6 CD 76 89                             call    DrawColourEBar
 186+ 8AB9 16 1F                                ld      d,31
 187+ 8ABB 1E 18                                ld      e,24
 188+ 8ABD 01 D5 AD                             ld      bc,EnergyBar3Start
 189+ 8AC0 CD 76 89                             call    DrawColourEBar
 190+ 8AC3 16 1F                                ld      d,31
 191+ 8AC5 1E 18                                ld      e,24
 192+ 8AC7 01 D5 B5                             ld      bc,EnergyBar2Start
 193+ 8ACA CD 76 89                             call    DrawColourEBar
 194+ 8ACD 16 1F                                ld      d,31
 195+ 8ACF 1E 18                                ld      e,24
 196+ 8AD1 01 D5 BD                             ld      bc,EnergyBar1Start
 197+ 8AD4 CD 76 89                             call    DrawColourEBar
 198+ 8AD7 C9                                   ret
 199+ 8AD8
 200+ 8AD8              ScannerBottom           equ 190
 201+ 8AD8              ScannerTypeMissle       equ 2
 202+ 8AD8              ScannerXRangeOffset     equ $35
 203+ 8AD8              ScannerCenter           equ 127
 204+ 8AD8
 205+ 8AD8              ScannerDefault          equ 0
 206+ 8AD8              ScannerMissile          equ 2
 207+ 8AD8              ScannerStation          equ 4
 208+ 8AD8              ScannerEnemy            equ 6
 209+ 8AD8
 210+ 8AD8
 211+ 8AD8 00           SunXScaled              DB  0
 212+ 8AD9 00           SunYScaled              DB  0
 213+ 8ADA 00           SunZScaled              DB  0
 214+ 8ADB
 215+ 8ADB
 216+ 8ADB 18 1C 90 FC  ScannerColourTable:     DB  L2ColourGREEN_2, L2ColourGREEN_1, L2ColourYELLOW_4,L2ColourYELLOW_1,L2ColourCYAN_2,L2ColourCYAN_1,L2ColourRED_4,L2ColourPINK_4
 216+ 8ADF 12 1F 80 E0
 217+ 8AE3 C0 E0        ScannerColourTableAngry:DB  L2ColourRED_2, L2ColourRED_1 ; just a place holder for now
 218+ 8AE5
 219+ 8AE5              GetShipColor:           MACRO
 220+ 8AE5 ~                                    ld      a,(ShipTypeAddr)
 221+ 8AE5 ~                                    sla     a                            ; as its byte pairs * 2
 222+ 8AE5 ~                                    ld      hl,ScannerColourTable
 223+ 8AE5 ~                                    add     hl,a
 224+ 8AE5 ~                                    ld      a,(hl)
 225+ 8AE5                                      ENDM
 226+ 8AE5              GetShipColorBright:     MACRO
 227+ 8AE5 ~                                    ld      a,(ShipTypeAddr)
 228+ 8AE5 ~                                    sla     a                            ; as its byte pairs * 2
 229+ 8AE5 ~                                    inc     a
 230+ 8AE5 ~                                    ld      hl,ScannerColourTable
 231+ 8AE5 ~                                    add     hl,a
 232+ 8AE5 ~                                    ld      a,(hl)
 233+ 8AE5                                      ENDM
 234+ 8AE5
 235+ 8AE5              Shift24BitScan:         MACRO   regHi, reglo
 236+ 8AE5 ~                                    ld      hl,(regHi)
 237+ 8AE5 ~                                    ld      b,h
 238+ 8AE5 ~                                    ld      a,h
 239+ 8AE5 ~                                    and     SignMask8Bit
 240+ 8AE5 ~                                    ld      h,a
 241+ 8AE5 ~                                    ld      a,(reglo)
 242+ 8AE5 ~                                    sla     a
 243+ 8AE5 ~                                    rl      l
 244+ 8AE5 ~                                    rl      h
 245+ 8AE5 ~                                    sla     a
 246+ 8AE5 ~                                    rl      l
 247+ 8AE5 ~                                    rl      h
 248+ 8AE5 ~                                    sla     a
 249+ 8AE5 ~                                    rl      l
 250+ 8AE5 ~                                    rl      h
 251+ 8AE5 ~                                    sla     a
 252+ 8AE5 ~                                    rl      l
 253+ 8AE5 ~                                    rl      h
 254+ 8AE5 ~                                    sla     a
 255+ 8AE5 ~                                    rl      l
 256+ 8AE5 ~                                    rl      h
 257+ 8AE5 ~                                    sla     a
 258+ 8AE5 ~                                    rl      l
 259+ 8AE5 ~                                    rl      h
 260+ 8AE5                                      ENDM
 261+ 8AE5
 262+ 8AE5              SunShiftRight           MACRO   reglo, reghi, regsgn
 263+ 8AE5 ~                                    ld      a,regsgn
 264+ 8AE5 ~                                    srl     a
 265+ 8AE5 ~                                    rr      reghi
 266+ 8AE5 ~                                    rr      reglo
 267+ 8AE5 ~                                    ld      regsgn,a
 268+ 8AE5                                      ENDM
 269+ 8AE5
 270+ 8AE5              ;SunShiftPosTo15Bit:     ld      de,(SBnKzlo)
 271+ 8AE5              ;                        ld      a,(SBnKzsgn)
 272+ 8AE5              ;                        push    af
 273+ 8AE5              ;                        and     SignMask8Bit
 274+ 8AE5              ;                        ld      iyl,a
 275+ 8AE5              ;                        ld      hl,(SBnKxlo)
 276+ 8AE5              ;                        ld      a,(SBnKxsgn)
 277+ 8AE5              ;                        push    af
 278+ 8AE5              ;                        and     SignMask8Bit
 279+ 8AE5              ;                        ld      ixl,a
 280+ 8AE5              ;                        ld      bc,(SBnKylo)
 281+ 8AE5              ;                        ld      a,(SBnKysgn)
 282+ 8AE5              ;                        and     SignMask8Bit
 283+ 8AE5              ;                        push    af
 284+ 8AE5              ;                        ld      iyh,a
 285+ 8AE5              ;.ShiftLoop:             ld      a,iyh
 286+ 8AE5              ;                        or      iyl
 287+ 8AE5              ;                        or      ixl
 288+ 8AE5              ;                        jr      z,.ShiftBit15
 289+ 8AE5              ;.ShiftZ:                SunShiftRight iyl, d, e
 290+ 8AE5              ;.ShiftX:                SunShiftRight ixl, h, l
 291+ 8AE5              ;.ShiftY:                SunShiftRight ixh, b, c
 292+ 8AE5              ;                        jr      .ShipLoop
 293+ 8AE5              ;.ShiftBit15:            ld      a,iyh
 294+ 8AE5              ;                        or      iyl
 295+ 8AE5              ;                        or      ixl
 296+ 8AE5              ;                        jr      z,.CompletedShift
 297+ 8AE5              ;.ShiftZ:                SunShiftRight iyl, d, e
 298+ 8AE5              ;.ShiftX:                SunShiftRight ixl, h, l
 299+ 8AE5              ;.ShiftY:                SunShiftRight ixh, b, c             ; finally shift to 15 bits so we can get the sign back
 300+ 8AE5              ;.CompletedShift:        pop     af                          ; get ysgn
 301+ 8AE5              ;                        and     SignOnly8Bit
 302+ 8AE5              ;                        or      b
 303+ 8AE5              ;                        ld      b,a
 304+ 8AE5              ;                        pop     af                          ; get xsgn
 305+ 8AE5              ;                        and     SignOnly8Bit
 306+ 8AE5              ;                        or      h
 307+ 8AE5              ;                        ld      h,a
 308+ 8AE5              ;                        pop     af                          ; get zsgn
 309+ 8AE5              ;                        and     SignOnly8Bit
 310+ 8AE5              ;                        or      d
 311+ 8AE5              ;                        ld      d,a
 312+ 8AE5              ;                        ret
 313+ 8AE5              ;
 314+ 8AE5 ED 5B 17 C0  ScaleSunPos:            ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 315+ 8AE9 7A                                   ld      a,d                         ; .
 316+ 8AEA F5                                   push    af                          ; .
 317+ 8AEB E6 7F                                and     SignMask8Bit                ; .
 318+ 8AED 57                                   ld      d,a                         ; .
 319+ 8AEE 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 320+ 8AF1 7C                                   ld      a,h                         ; .
 321+ 8AF2 F5                                   push    af                          ; .
 322+ 8AF3 E6 7F                                and     SignMask8Bit                ; .
 323+ 8AF5 67                                   ld      h,a                         ; .
 324+ 8AF6 ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 325+ 8AFA 78                                   ld      a,b                         ; .
 326+ 8AFB F5                                   push    af                          ; .
 327+ 8AFC E6 7F                                and     SignMask8Bit                ; .
 328+ 8AFE 47                                   ld      b,a                         ; .
 329+ 8AFF 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 330+ 8B00 B2                                   or      d                           ; .
 331+ 8B01 B4                                   or      h                           ; .
 332+ 8B02 28 0E                                jr      z,.Shifted                  ; .
 333+ 8B04                                      ShiftBCRight1                       ; .
 333+ 8B04 CB 38       >			   srl b
 333+ 8B06 CB 19       >			   rr  c
 334+ 8B08                                      ShiftHLRight1                       ; .
 334+ 8B08 CB 3C       >			   srl h
 334+ 8B0A CB 1D       >			   rr  l
 335+ 8B0C                                      ShiftDERight1                       ; .
 335+ 8B0C CB 3A       >			   srl d
 335+ 8B0E CB 1B       >			   rr  e
 336+ 8B10 18 ED                                jr      .ShiftLoop
 337+ 8B12 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 338+ 8B13 B5                                   or      l                           ;
 339+ 8B14 B3                                   or      e                           ;
 340+ 8B15 E6 80                                and     $80                         ;
 341+ 8B17 28 0C                                jr      z,.NoAdditionalShift        ;
 342+ 8B19                                      ShiftBCRight1                       ; we want 7 bit
 342+ 8B19 CB 38       >			   srl b
 342+ 8B1B CB 19       >			   rr  c
 343+ 8B1D                                      ShiftHLRight1                       ; to acommodate the sign
 343+ 8B1D CB 3C       >			   srl h
 343+ 8B1F CB 1D       >			   rr  l
 344+ 8B21                                      ShiftDERight1                       ; .
 344+ 8B21 CB 3A       >			   srl d
 344+ 8B23 CB 1B       >			   rr  e
 345+ 8B25 F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 346+ 8B26 E6 80                                and     SignOnly8Bit                ;
 347+ 8B28 47                                   ld      b,a                         ; bc = shifted signed Y
 348+ 8B29 F1                                   pop     af                          ; get xsgn
 349+ 8B2A E6 80                                and     SignOnly8Bit                ;
 350+ 8B2C 67                                   ld      h,a                         ; hl = shifted signed X
 351+ 8B2D F1                                   pop     af                          ; get zsgn
 352+ 8B2E E6 80                                and     SignOnly8Bit                ;
 353+ 8B30 57                                   ld      d,a                         ; de = shifted signed Z
 354+ 8B31 C9                                   ret
 355+ 8B32
 356+ 8B32
 357+ 8B32              ;compass sun
 358+ 8B32              ;            if value is still 24 bit
 359+ 8B32              ;                copy xhi/xsgn y and z to xxx15 ([2 1 0 ] [ 5 4 3] [ 8 7 6 ]
 360+ 8B32              ;                normalise vector (note this assumes sun is just sign byte+ 2 bytes)
 361+ 8B32              ;                tempk39 = OR 3 low bytes
 362+ 8B32              ;                tempkA = OR 3 high bytes
 363+ 8B32              ;                 TAL2:    repeat
 364+ 8B32              ;                             asl tempka tempk39
 365+ 8B32              ;                             exit if carry set
 366+ 8B32              ;                             x coord << 1
 367+ 8B32              ;                             y corrd << 1
 368+ 8B32              ;                             z coord << 1
 369+ 8B32              ;                          until carry clear
 370+ 8B32              ;                 TA2:     shift x y and z right one and put sign bit in from sign bytes
 371+ 8B32              ;                          now XX15 holds sign + 7 bit bytes maximused for coords
 372+ 8B32              ;                          RQ = AP = X ^ 2
 373+ 8B32              ;                          TP = AP = Y ^ 2
 374+ 8B32              ;                          RQ = RQ + TP
 375+ 8B32              ;                          TP = AP = Z ^ 2
 376+ 8B32              ;                          RQ = RQ + TP
 377+ 8B32              ;                          Q = SQRT (RQ)
 378+ 8B32              ;                          for each coord - A = A/Q * 3/ 8
 379+ 8B32              ;
 380+ 8B32              ;
 381+ 8B32
 382+ 8B32 ED 5B 17 C0  UpscaleSunPosition:     ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 383+ 8B36 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 384+ 8B39 ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 385+ 8B3D 7A                                   ld      a,d
 386+ 8B3E E6 80                                and     SignOnly8Bit
 387+ 8B40 CB 3F                                srl     a
 388+ 8B42 FD 6F                                ld      iyl,a
 389+ 8B44 7C                                   ld      a,h
 390+ 8B45 E6 80                                and     SignOnly8Bit
 391+ 8B47 FD B5                                or      iyl
 392+ 8B49 CB 3F                                srl     a
 393+ 8B4B 78                                   ld      a,b
 394+ 8B4C E6 80                                and     SignOnly8Bit
 395+ 8B4E FD B5                                or      iyl
 396+ 8B50 FD 6F                                ld      iyl,a                       ; IYL now equals YXH00000 where letters = sign bits
 397+ 8B52                                      ClearSignBit d
 397+ 8B52 7A          >                        ld      a,d
 397+ 8B53 E6 7F       >                        and     SignMask8Bit
 397+ 8B55 57          >                        ld      d,a
 398+ 8B56                                      ClearSignBit h
 398+ 8B56 7C          >                        ld      a,h
 398+ 8B57 E6 7F       >                        and     SignMask8Bit
 398+ 8B59 67          >                        ld      h,a
 399+ 8B5A                                      ClearSignBit b
 399+ 8B5A 78          >                        ld      a,b
 399+ 8B5B E6 7F       >                        and     SignMask8Bit
 399+ 8B5D 47          >                        ld      b,a
 400+ 8B5E 78                                   ld      a,b
 401+ 8B5F B3                                   or      e
 402+ 8B60 B4                                   or      h
 403+ 8B61 B5                                   or      l
 404+ 8B62 B0                                   or      b
 405+ 8B63 B1                                   or      c
 406+ 8B64 28 41                                jr      z, .Setto1                 ; to prevent and infinite loop in upscale if all zero
 407+ 8B66 7A                                   ld      a,d
 408+ 8B67 B3                                   or      e
 409+ 8B68 B4                                   or      h
 410+ 8B69 CB 27                                sla     a
 411+ 8B6B 38 15                                jr      c,.DoneCalc
 412+ 8B6D 28 13                                jr      z,.DoneCalc
 413+ 8B6F              .UpscaleLoop:           ShiftDELeft1
 413+ 8B6F CB 23       >			   sla e
 413+ 8B71 CB 12       >			   rl  d
 414+ 8B73                                      ShiftHLLeft1
 414+ 8B73 CB 25       >			   sla l
 414+ 8B75 CB 14       >			   rl  h
 415+ 8B77                                      ShiftBCLeft1
 415+ 8B77 CB 21       >			   sla c
 415+ 8B79 CB 10       >			   rl  b
 416+ 8B7B CB 27                                sla     a
 417+ 8B7D 38 03                                jr      c,.DoneCalc
 418+ 8B7F C3 6F 8B                             jp      .UpscaleLoop
 419+ 8B82              .DoneCalc               ShiftDERight1
 419+ 8B82 CB 3A       >			   srl d
 419+ 8B84 CB 1B       >			   rr  e
 420+ 8B86                                      ShiftHLRight1
 420+ 8B86 CB 3C       >			   srl h
 420+ 8B88 CB 1D       >			   rr  l
 421+ 8B8A                                      ShiftBCRight1
 421+ 8B8A CB 38       >			   srl b
 421+ 8B8C CB 19       >			   rr  c
 422+ 8B8E 5A           .NowSetResultInLowByte: ld      e,d
 423+ 8B8F 6C                                   ld      l,h
 424+ 8B90 48                                   ld      c,b
 425+ 8B91 FD 7D                                ld      a,iyl
 426+ 8B93 E6 80                                and     SignOnly8Bit
 427+ 8B95 47                                   ld      b,a
 428+ 8B96 FD 7D                                ld      a,iyl
 429+ 8B98 CB 27                                sla     a
 430+ 8B9A FD 6F                                ld      iyl,a
 431+ 8B9C E6 80                                and     SignOnly8Bit
 432+ 8B9E 67                                   ld      h,a
 433+ 8B9F FD 7D                                ld      a,iyl
 434+ 8BA1 CB 27                                sla     a
 435+ 8BA3 E6 80                                and     SignOnly8Bit
 436+ 8BA5 57                                   ld      d,a
 437+ 8BA6 C9                                   ret
 438+ 8BA7 3E 01        .Setto1:                ld      a,1
 439+ 8BA9 4F                                   ld      c,a
 440+ 8BAA 5F                                   ld      e,a
 441+ 8BAB 6F                                   ld      l,a
 442+ 8BAC FD 7D                                ld      a,iyl
 443+ 8BAE CB 27                                sla     a
 444+ 8BB0 CB 27                                sla     a
 445+ 8BB2 E6 80                                and     SignOnly8Bit
 446+ 8BB4 B3                                   or      e
 447+ 8BB5 5F                                   ld      e,a
 448+ 8BB6 C9                                   ret
 449+ 8BB7
 450+ 8BB7
 451+ 8BB7
 452+ 8BB7
 453+ 8BB7              UpdateCompassSun:       MMUSelectSun
 453+ 8BB7 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 454+ 8BBB CD E5 8A                             call    ScaleSunPos                 ; get as 7 bit signed
 455+ 8BBE C5 D5 E5 D5                          push    bc,,de,,hl,,de              ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 456+ 8BC2 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 457+ 8BC3 59                                   ld      e,c                         ; .
 458+ 8BC4 ED 30                                mul                                 ; .
 459+ 8BC6 42 4B                                ld      bc,de                       ; .
 460+ 8BC8 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 461+ 8BC9 5D                                   ld      e,l                         ; .
 462+ 8BCA ED 30                                mul                                 ; .
 463+ 8BCC EB                                   ex      de,hl                       ; .
 464+ 8BCD D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 465+ 8BCE 53                                   ld      d,e                         ; de = z ^
 466+ 8BCF ED 30                                mul                                 ; .
 467+ 8BD1 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + x^2
 468+ 8BD2 09                                   add     hl,bc
 469+ 8BD3 EB                                   ex      de,hl
 470+ 8BD4 CD 70 AB                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 471+ 8BD7                                      ; if h <> 0 then more difficult
 472+ 8BD7 55                                   ld      d,l                         ; iyl = q
 473+ 8BD8 FD 6A                                ld      iyl,d                       ; .
 474+ 8BDA E1           .NormaliseX:            pop     hl                          ; hl x scaled
 475+ 8BDB 7C                                   ld      a,h                         ; c = sign
 476+ 8BDC E6 80                                and     SignOnly8Bit                ; .
 477+ 8BDE 4F                                   ld      c,a                         ; .
 478+ 8BDF C5                                   push    bc                          ; save sign to stack
 479+ 8BE0 7D                                   ld      a,l                         ; a = 8 bit abs z
 480+ 8BE1 CD 75 B0                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 481+ 8BE4 5F                                   ld      e,a                         ; .
 482+ 8BE5                                      EDiv10Inline                        ; a = e / 10
 482+ 8BE5 16 00       >                        ld      d,0
 482+ 8BE7 62 6B       >                        ld      hl,de
 482+ 8BE9 29          >                        add     hl,hl
 482+ 8BEA 19          >                        add     hl,de
 482+ 8BEB 29          >                        add     hl,hl
 482+ 8BEC 29          >                        add     hl,hl
 482+ 8BED 19          >                        add     hl,de
 482+ 8BEE 29          >                        add     hl,hl
 483+ 8BEF 7C                                   ld      a,h                         ; .
 484+ 8BF0 C1                                   pop     bc                          ; retrieve sign
 485+ 8BF1 FE 00                                cp      0
 486+ 8BF3 28 06                                jr      z,.DoneNormX                ; in case we end up with - 0
 487+ 8BF5 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 488+ 8BF7 28 02                                jr      z,.DoneNormX
 489+ 8BF9 ED 44                                neg
 490+ 8BFB DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 491+ 8BFD FD 55        .NormaliseZ:            ld      d,iyl                       ; d = q
 492+ 8BFF E1                                   pop     hl                          ; hl z scaled
 493+ 8C00 7C                                   ld      a,h                         ; c = sign
 494+ 8C01 E6 80                                and     SignOnly8Bit                ; .
 495+ 8C03 4F                                   ld      c,a                         ; .
 496+ 8C04 C5                                   push    bc                          ; save sign to stack
 497+ 8C05 7D                                   ld      a,l                         ; e = a /q * 96
 498+ 8C06 CD 75 B0                             call    AequAdivQmul96ABS              ; .
 499+ 8C09 5F                                   ld      e,a                         ; a = e / 10
 500+ 8C0A                                      EDiv10Inline                        ; .
 500+ 8C0A 16 00       >                        ld      d,0
 500+ 8C0C 62 6B       >                        ld      hl,de
 500+ 8C0E 29          >                        add     hl,hl
 500+ 8C0F 19          >                        add     hl,de
 500+ 8C10 29          >                        add     hl,hl
 500+ 8C11 29          >                        add     hl,hl
 500+ 8C12 19          >                        add     hl,de
 500+ 8C13 29          >                        add     hl,hl
 501+ 8C14 7C                                   ld      a,h                         ; retrieve sign
 502+ 8C15 C1                                   pop     bc                          ; retrieve sign
 503+ 8C16 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 504+ 8C18 28 02                                jr      z,.DoneNormZ
 505+ 8C1A ED 44                                neg
 506+ 8C1C DD 6F        .DoneNormZ:             ld      ixl,a                       ; .
 507+ 8C1E FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 508+ 8C20 E1                                   pop     hl                          ; hl y scaled
 509+ 8C21 7C                                   ld      a,h                         ; c = sign
 510+ 8C22 E6 80                                and     SignOnly8Bit                ; .
 511+ 8C24 4F                                   ld      c,a                         ; .
 512+ 8C25 C5                                   push    bc                          ; save sign to stack
 513+ 8C26 7D                                   ld      a,l                         ; a = 8 bit signed z
 514+ 8C27 CD 75 B0                             call    AequAdivQmul96ABS           ; .
 515+ 8C2A 5F                                   ld      e,a                         ; a = e / 10
 516+ 8C2B                                      EDiv10Inline                        ; .
 516+ 8C2B 16 00       >                        ld      d,0
 516+ 8C2D 62 6B       >                        ld      hl,de
 516+ 8C2F 29          >                        add     hl,hl
 516+ 8C30 19          >                        add     hl,de
 516+ 8C31 29          >                        add     hl,hl
 516+ 8C32 29          >                        add     hl,hl
 516+ 8C33 19          >                        add     hl,de
 516+ 8C34 29          >                        add     hl,hl
 517+ 8C35 7C                                   ld      a,h                         ; retrieve sign
 518+ 8C36 C1                                   pop     bc                          ; retrieve sign
 519+ 8C37 FE 00                                cp      0
 520+ 8C39 28 06                                jr      z,.DoneNormY                 ; in case we end up with - 0
 521+ 8C3B CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 522+ 8C3D 28 02                                jr      z,.DoneNormY
 523+ 8C3F ED 44                                neg                                 ;
 524+ 8C41 47           .DoneNormY:             ld      b,a                         ; result from Y
 525+ 8C42 DD 4C                                ld      c,ixh                       ; x = saved X
 526+ 8C44              .SetSprite:             MMUSelectSpriteBank
 526+ 8C44 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 527+ 8C48 CD 05 E1                             call    compass_sun_move
 528+ 8C4B DD 7D                                ld      a,ixl
 529+ 8C4D CB 7F                                bit     7,a
 530+ 8C4F 20 04                                jr      nz,.SunBehind
 531+ 8C51 CD 99 E1     .SunInfront:            call    show_compass_sun_infront
 532+ 8C54 C9                                   ret
 533+ 8C55 CD A4 E1     .SunBehind:             call    show_compass_sun_behind
 534+ 8C58 C9                                   ret
 535+ 8C59
 536+ 8C59              UpdateCompassStation:   MMUSelectShipBankN 0
 536+ 8C59 ED 91 57 00 >					 nextreg ShipModelMMU,	    0
 537+ 8C5D
 538+ 8C5D CD E5 8A                             call    ScaleSunPos                 ; get as 7 bit signed
 539+ 8C60 C5 D5 E5 D5                          push    bc,,de,,hl,,de              ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 540+ 8C64 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 541+ 8C65 59                                   ld      e,c                         ; .
 542+ 8C66 ED 30                                mul                                 ; .
 543+ 8C68 42 4B                                ld      bc,de                       ; .
 544+ 8C6A 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 545+ 8C6B 5D                                   ld      e,l                         ; .
 546+ 8C6C ED 30                                mul                                 ; .
 547+ 8C6E EB                                   ex      de,hl                       ; .
 548+ 8C6F D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 549+ 8C70 53                                   ld      d,e                         ; de = z ^
 550+ 8C71 ED 30                                mul                                 ; .
 551+ 8C73 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + x^2
 552+ 8C74 09                                   add     hl,bc
 553+ 8C75 EB                                   ex      de,hl
 554+ 8C76 CD 70 AB                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 555+ 8C79                                      ; if h <> 0 then more difficult
 556+ 8C79 55                                   ld      d,l                         ; iyl = q
 557+ 8C7A FD 6A                                ld      iyl,d                       ; .
 558+ 8C7C E1           .NormaliseX:            pop     hl                          ; hl x scaled
 559+ 8C7D 7C                                   ld      a,h                         ; c = sign
 560+ 8C7E E6 80                                and     SignOnly8Bit                ; .
 561+ 8C80 4F                                   ld      c,a                         ; .
 562+ 8C81 C5                                   push    bc                          ; save sign to stack
 563+ 8C82 7D                                   ld      a,l                         ; a = 8 bit abs z
 564+ 8C83 CD 75 B0                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 565+ 8C86 5F                                   ld      e,a                         ; .
 566+ 8C87                                      EDiv10Inline                        ; a = e / 10
 566+ 8C87 16 00       >                        ld      d,0
 566+ 8C89 62 6B       >                        ld      hl,de
 566+ 8C8B 29          >                        add     hl,hl
 566+ 8C8C 19          >                        add     hl,de
 566+ 8C8D 29          >                        add     hl,hl
 566+ 8C8E 29          >                        add     hl,hl
 566+ 8C8F 19          >                        add     hl,de
 566+ 8C90 29          >                        add     hl,hl
 567+ 8C91 7C                                   ld      a,h                         ; .
 568+ 8C92 C1                                   pop     bc                          ; retrieve sign
 569+ 8C93 FE 00                                cp      0
 570+ 8C95 28 06                                jr      z,.DoneNormX                 ; in case we end up with - 0
 571+ 8C97 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 572+ 8C99 28 02                                jr      z,.DoneNormX
 573+ 8C9B ED 44                                neg
 574+ 8C9D DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 575+ 8C9F FD 55        .NormaliseZ:            ld      d,iyl                       ; d = q
 576+ 8CA1 E1                                   pop     hl                          ; hl z scaled
 577+ 8CA2 7C                                   ld      a,h                         ; c = sign
 578+ 8CA3 E6 80                                and     SignOnly8Bit                ; .
 579+ 8CA5 4F                                   ld      c,a                         ; .
 580+ 8CA6 C5                                   push    bc                          ; save sign to stack
 581+ 8CA7 7D                                   ld      a,l                         ; e = a /q * 96
 582+ 8CA8 CD 75 B0                             call    AequAdivQmul96ABS              ; .
 583+ 8CAB 5F                                   ld      e,a                         ; a = e / 10
 584+ 8CAC                                      EDiv10Inline                        ; .
 584+ 8CAC 16 00       >                        ld      d,0
 584+ 8CAE 62 6B       >                        ld      hl,de
 584+ 8CB0 29          >                        add     hl,hl
 584+ 8CB1 19          >                        add     hl,de
 584+ 8CB2 29          >                        add     hl,hl
 584+ 8CB3 29          >                        add     hl,hl
 584+ 8CB4 19          >                        add     hl,de
 584+ 8CB5 29          >                        add     hl,hl
 585+ 8CB6 7C                                   ld      a,h                         ; retrieve sign
 586+ 8CB7 C1                                   pop     bc                          ; retrieve sign
 587+ 8CB8 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 588+ 8CBA 28 02                                jr      z,.DoneNormZ
 589+ 8CBC ED 44                                neg
 590+ 8CBE DD 6F        .DoneNormZ:             ld      ixl,a                       ; .
 591+ 8CC0 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 592+ 8CC2 E1                                   pop     hl                          ; hl y scaled
 593+ 8CC3 7C                                   ld      a,h                         ; c = sign
 594+ 8CC4 E6 80                                and     SignOnly8Bit                ; .
 595+ 8CC6 4F                                   ld      c,a                         ; .
 596+ 8CC7 C5                                   push    bc                          ; save sign to stack
 597+ 8CC8 7D                                   ld      a,l                         ; a = 8 bit signed z
 598+ 8CC9 CD 75 B0                             call    AequAdivQmul96ABS              ; .
 599+ 8CCC 5F                                   ld      e,a                         ; a = e / 10
 600+ 8CCD                                      EDiv10Inline                        ; .
 600+ 8CCD 16 00       >                        ld      d,0
 600+ 8CCF 62 6B       >                        ld      hl,de
 600+ 8CD1 29          >                        add     hl,hl
 600+ 8CD2 19          >                        add     hl,de
 600+ 8CD3 29          >                        add     hl,hl
 600+ 8CD4 29          >                        add     hl,hl
 600+ 8CD5 19          >                        add     hl,de
 600+ 8CD6 29          >                        add     hl,hl
 601+ 8CD7 7C                                   ld      a,h                         ; retrieve sign
 602+ 8CD8 C1                                   pop     bc                          ; retrieve sign
 603+ 8CD9 FE 00                                cp      0
 604+ 8CDB 28 06                                jr      z,.DoneNormY                 ; in case we end up with - 0
 605+ 8CDD CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 606+ 8CDF 28 02                                jr      z,.DoneNormY
 607+ 8CE1 ED 44                                neg
 608+ 8CE3 47           .DoneNormY:             ld      b,a                       ; .
 609+ 8CE4 DD 4C                                ld      c,ixh
 610+ 8CE6              .SetSprite:             MMUSelectSpriteBank
 610+ 8CE6 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 611+ 8CEA CD 05 E1                             call    compass_sun_move
 612+ 8CED DD 7D                                ld      a,ixl
 613+ 8CEF CB 7F                                bit     7,a
 614+ 8CF1 20 04                                jr      nz,.SunBehind
 615+ 8CF3 CD 99 E1     .SunInfront:            call    show_compass_sun_infront
 616+ 8CF6 C9                                   ret
 617+ 8CF7 CD A4 E1     .SunBehind:             call    show_compass_sun_behind
 618+ 8CFA C9                                   ret
 619+ 8CFB
 620+ 8CFB
 621+ 8CFB              UpdateScannerSun:       MMUSelectSun
 621+ 8CFB ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 622+ 8CFF                                      Shift24BitScan  SBnKyhi, SBnKylo
 622+ 8CFF 2A 14 C0    >                        ld      hl,(SBnKyhi)
 622+ 8D02 44          >                        ld      b,h
 622+ 8D03 7C          >                        ld      a,h
 622+ 8D04 E6 7F       >                        and     SignMask8Bit
 622+ 8D06 67          >                        ld      h,a
 622+ 8D07 3A 13 C0    >                        ld      a,(SBnKylo)
 622+ 8D0A CB 27       >                        sla     a
 622+ 8D0C CB 15       >                        rl      l
 622+ 8D0E CB 14       >                        rl      h
 622+ 8D10 CB 27       >                        sla     a
 622+ 8D12 CB 15       >                        rl      l
 622+ 8D14 CB 14       >                        rl      h
 622+ 8D16 CB 27       >                        sla     a
 622+ 8D18 CB 15       >                        rl      l
 622+ 8D1A CB 14       >                        rl      h
 622+ 8D1C CB 27       >                        sla     a
 622+ 8D1E CB 15       >                        rl      l
 622+ 8D20 CB 14       >                        rl      h
 622+ 8D22 CB 27       >                        sla     a
 622+ 8D24 CB 15       >                        rl      l
 622+ 8D26 CB 14       >                        rl      h
 622+ 8D28 CB 27       >                        sla     a
 622+ 8D2A CB 15       >                        rl      l
 622+ 8D2C CB 14       >                        rl      h
 623+ 8D2E 3A 12 C0     .IsItInRange:           ld      a,(SBnKxsgn)                ; if the high byte is not
 624+ 8D31 21 15 C0                             ld      hl,SBnKysgn                 ; a sign only
 625+ 8D34 B6                                   or      (hl)                        ; then its too far away
 626+ 8D35 21 18 C0                             ld      hl,SBnKzsgn                 ; for the scanner to draw
 627+ 8D38 B6                                   or      (hl)                        ; so rely on the compass
 628+ 8D39 E6 7F                                and     SignMask8Bit                ;
 629+ 8D3B C0                                   ret     nz                          ;
 630+ 8D3C 2A 16 C0     .ItsInRange:            ld      hl,(SBnKzlo)                ; we will get unsigned values
 631+ 8D3F ED 5B 10 C0                          ld      de,(SBnKxlo)
 632+ 8D43 ED 4B 13 C0                          ld      bc,(SBnKylo)
 633+ 8D47 7C                                   ld      a,h
 634+ 8D48 B2                                   or      d
 635+ 8D49 B0                                   or      b
 636+ 8D4A E6 C0                                and     %11000000
 637+ 8D4C C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 638+ 8D4D 3A 12 C0     .MakeX2Compliment:      ld      a,(SBnKxsgn)
 639+ 8D50 CB 7F                                bit     7,a
 640+ 8D52 28 04                                jr      z,.absXHi
 641+ 8D54                                      NegD
 641+ 8D54 7A          >                    ld      a,d
 641+ 8D55 ED 44       >                    neg
 641+ 8D57 57          >                    ld      d,a
 642+ 8D58 7A           .absXHi:                ld      a,d
 643+ 8D59 C6 80                                add     ScannerX
 644+ 8D5B DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 645+ 8D5D CB 3C        .ProcessZCoord:         srl     h
 646+ 8D5F CB 3C                                srl     h
 647+ 8D61 3A 18 C0     .MakeZ2Compliment:      ld      a,(SBnKzsgn)
 648+ 8D64 CB 7F                                bit     7,a
 649+ 8D66 28 04                                jr      z,.absZHi
 650+ 8D68                                      NegH
 650+ 8D68 7C          >                    ld      a,h
 650+ 8D69 ED 44       >                    neg
 650+ 8D6B 67          >                    ld      h,a
 651+ 8D6C 3E AB        .absZHi:                ld      a,ScannerY
 652+ 8D6E 94                                   sub     h
 653+ 8D6F FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 654+ 8D71 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 655+ 8D73 20 0B                                jr      nz,.StickHasLength
 656+ 8D75 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 657+ 8D77 FD 6F                                ld      iyl,a
 658+ 8D79                                      MMUSelectLayer2
 658+ 8D79 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 659+ 8D7D C3 A8 8D                             jp      .NoStick
 660+ 8D80 3A 15 C0     .StickHasLength:        ld      a,(SBnKysgn)                ; if b  =  0 then no line
 661+ 8D83 CB 7F                                bit     7,a
 662+ 8D85 28 04                                jr      z,.absYHi
 663+ 8D87                                      NegB
 663+ 8D87 78          >                    ld      a,b
 663+ 8D88 ED 44       >                    neg
 663+ 8D8A 47          >                    ld      b,a
 664+ 8D8B FD 7C        .absYHi:                ld      a,iyh
 665+ 8D8D 90           .SetStickPos:           sub     b
 666+ 8D8E                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 666+ 8D8E FE BE       >                        cp      ScannerBottom
 666+ 8D90 DA 95 8D    >                        jp		c, .StickOnScreen
 667+ 8D93 3E BE                                ld      a,ScannerBottom
 668+ 8D95 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 669+ 8D97 DD 6F                                ld      ixl,a
 670+ 8D99 FD 44                                ld      b,iyh                       ; from row
 671+ 8D9B DD 4C                                ld      c,ixh                       ; from col
 672+ 8D9D FD 55                                ld      d,iyl                       ; to row
 673+ 8D9F 1E B4                                ld      e,L2SunScanner
 674+ 8DA1                                      MMUSelectLayer2
 674+ 8DA1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 675+ 8DA5 CD 35 E3                             call    l2_draw_vert_line_to
 676+ 8DA8 FD 45        .NoStick:               ld      b,iyl                       ; row
 677+ 8DAA DD 4C                                ld      c,ixh                       ; col
 678+ 8DAC 3E FC                                ld      a,L2SunScannerBright
 679+ 8DAE CD 29 E1                             call    l2_plot_pixel
 680+ 8DB1 FD 45                                ld      b,iyl
 681+ 8DB3 DD 4C                                ld      c,ixh
 682+ 8DB5 0C                                   inc     c
 683+ 8DB6 3E FC                                ld      a,L2SunScannerBright
 684+ 8DB8 CD 29 E1                             call    l2_plot_pixel
 685+ 8DBB C9                                   ret
 686+ 8DBC
 687+ 8DBC              ; This will do a planet update if we are not in space station range
 688+ 8DBC              UpdateScannerPlanet:
 689+ 8DBC
 690+ 8DBC              ; As the space station is always ship 0 then we can just use the scanner
 691+ 8DBC
 692+ 8DBC              ; This will go though all the universe ship data banks and plot, for now we will just work on one bank
 693+ 8DBC 3A 35 C0     UpdateScannerShip:      ld      a,(UBnKexplDsp)             ; if bit 4 is clear then ship should not be drawn
 694+ 8DBF CB 67                                bit     4,a                         ; .
 695+ 8DC1                                      ;DEBUG ret     z                           ; .
 696+ 8DC1 3A 22 C3                             ld      a,(ShipTypeAddr)            ; if its a planet or sun, do not display
 697+ 8DC4 CB 7F                                bit     7,a
 698+ 8DC6 C0                                   ret     nz
 699+ 8DC7              ; DEBUG Add in station types later
 700+ 8DC7 2A 12 C0     .NotMissile:            ld      hl,(UBnKzlo)
 701+ 8DCA ED 5B 0C C0                          ld      de,(UBnKxlo)
 702+ 8DCE ED 4B 0F C0                          ld      bc,(UBnKylo)
 703+ 8DD2 7C                                   ld      a,h
 704+ 8DD3 B2                                   or      d
 705+ 8DD4 B0                                   or      b
 706+ 8DD5 E6 C0                                and     %11000000
 707+ 8DD7 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 708+ 8DD8 3A 0E C0     .MakeX2Compliment:      ld      a,(UBnKxsgn)
 709+ 8DDB CB 7F                                bit     7,a
 710+ 8DDD 28 04                                jr      z,.absXHi
 711+ 8DDF                                      NegD
 711+ 8DDF 7A          >                    ld      a,d
 711+ 8DE0 ED 44       >                    neg
 711+ 8DE2 57          >                    ld      d,a
 712+ 8DE3 7A           .absXHi:                ld      a,d
 713+ 8DE4 C6 80                                add     ScannerX
 714+ 8DE6 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 715+ 8DE8 CB 3C        .ProcessZCoord:         srl     h
 716+ 8DEA CB 3C                                srl     h
 717+ 8DEC 3A 14 C0     .MakeZ2Compliment:      ld      a,(UBnKzsgn)
 718+ 8DEF CB 7F                                bit     7,a
 719+ 8DF1 28 04                                jr      z,.absZHi
 720+ 8DF3                                      NegH
 720+ 8DF3 7C          >                    ld      a,h
 720+ 8DF4 ED 44       >                    neg
 720+ 8DF6 67          >                    ld      h,a
 721+ 8DF7 3E AB        .absZHi:                ld      a,ScannerY
 722+ 8DF9 94                                   sub     h
 723+ 8DFA FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 724+ 8DFC CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 725+ 8DFE 20 19                                jr      nz,.StickHasLength
 726+ 8E00 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 727+ 8E02 FD 6F                                ld      iyl,a
 728+ 8E04 DD 7D                                ld      a,ixl
 729+ 8E06                                      GetShipColorBright
 729+ 8E06 3A 22 C3    >                        ld      a,(ShipTypeAddr)
 729+ 8E09 CB 27       >                        sla     a                            ; as its byte pairs * 2
 729+ 8E0B 3C          >                        inc     a
 729+ 8E0C 21 DB 8A    >                        ld      hl,ScannerColourTable
 729+ 8E0F ED 31       >                        add     hl,a
 729+ 8E11 7E          >                        ld      a,(hl)
 730+ 8E12                                      MMUSelectLayer2
 730+ 8E12 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 731+ 8E16 C3 50 8E                             jp      .NoStick
 732+ 8E19 3A 11 C0     .StickHasLength:        ld      a,(UBnKysgn)                ; if b  =  0 then no line
 733+ 8E1C CB 7F                                bit     7,a
 734+ 8E1E 28 04                                jr      z,.absYHi
 735+ 8E20                                      NegB
 735+ 8E20 78          >                    ld      a,b
 735+ 8E21 ED 44       >                    neg
 735+ 8E23 47          >                    ld      b,a
 736+ 8E24 FD 7C        .absYHi:                ld      a,iyh
 737+ 8E26 90           .SetStickPos:           sub     b
 738+ 8E27                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 738+ 8E27 FE BE       >                        cp      ScannerBottom
 738+ 8E29 DA 2E 8E    >                        jp		c, .StickOnScreen
 739+ 8E2C 3E BE                                ld      a,ScannerBottom
 740+ 8E2E FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 741+ 8E30                                      GetShipColor
 741+ 8E30 3A 22 C3    >                        ld      a,(ShipTypeAddr)
 741+ 8E33 CB 27       >                        sla     a                            ; as its byte pairs * 2
 741+ 8E35 21 DB 8A    >                        ld      hl,ScannerColourTable
 741+ 8E38 ED 31       >                        add     hl,a
 741+ 8E3A 7E          >                        ld      a,(hl)
 742+ 8E3B DD 6F                                ld      ixl,a
 743+ 8E3D FD 44                                ld      b,iyh                       ; from row
 744+ 8E3F DD 4C                                ld      c,ixh                       ; from col
 745+ 8E41 FD 55                                ld      d,iyl                       ; to row
 746+ 8E43 DD 5D                                ld      e,ixl                       ; colur will only be green or yellow for now
 747+ 8E45 E5                                   push    hl
 748+ 8E46                                      MMUSelectLayer2
 748+ 8E46 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 749+ 8E4A CD 35 E3                             call    l2_draw_vert_line_to
 750+ 8E4D E1                                   pop     hl
 751+ 8E4E 23                                   inc     hl
 752+ 8E4F 7E                                   ld      a,(hl)
 753+ 8E50 FD 45        .NoStick:               ld      b,iyl                       ; row
 754+ 8E52 DD 4C                                ld      c,ixh                       ; col
 755+ 8E54 F5                                   push    af
 756+ 8E55 CD 29 E1                             call    l2_plot_pixel
 757+ 8E58 F1                                   pop     af
 758+ 8E59 FD 45                                ld      b,iyl
 759+ 8E5B DD 4C                                ld      c,ixh
 760+ 8E5D 0C                                   inc     c
 761+ 8E5E CD 29 E1                             call    l2_plot_pixel
 762+ 8E61 C9                                   ret
 763+ 8E62
 764+ 8E62
# file closed: ./Views/ConsoleDrawing.asm
1044  8E62                          INCLUDE "./Tables/message_queue.asm"
# file opened: ./Tables/message_queue.asm
   1+ 8E62
   2+ 8E62
   3+ 8E62              ResetMessageQueue:      ZeroA
   3+ 8E62 AF          >                        xor a
   4+ 8E63 32 6C 99                             ld      (MessageCount),a
   5+ 8E66 32 6D 99                             ld      (MessageCurrent),a
   6+ 8E69 21 70 99                             ld      hl,MessageQueue
   7+ 8E6C 11 6E 99                             ld      de,MessageIndex
   8+ 8E6F 06 05                                ld      b,5
   9+ 8E71 7D           .ClearMessageIndexs:    ld      a,l                                 ; Wipe out the indexes to all the data
  10+ 8E72 12                                   ld      (de),a                              ;
  11+ 8E73 13                                   inc     de                                  ;
  12+ 8E74 7C                                   ld      a,h                                 ;
  13+ 8E75 12                                   ld      (de),a                              ;
  14+ 8E76 13                                   inc     de                                  ;
  15+ 8E77 3E 21                                ld      a,MESSAGESIZE                       ;
  16+ 8E79 ED 31                                add     hl,a                                ;
  17+ 8E7B 10 F4                                djnz    .ClearMessageIndexs                 ;
  18+ 8E7D 21 70 99     .ClearText:             ld      hl,MessageQueue
  19+ 8E80 11 AA 00                             ld      de,(MAXMESSAGES * MESSAGESIZE) + MAXMESSAGES    ; MessageQueue + MessageTimeout
  20+ 8E83 3E 00                                ld      a,0
  21+ 8E85 CD 40 96                             call	memfill_dma
  22+ 8E88 C9                                   ret
  23+ 8E89
  24+ 8E89              ; Message to enqeue is a string held at DE that must be terminated in \0
  25+ 8E89              ;                                       IYH = timer for message
  26+ 8E89 3A 6C 99     EnqueMessage:           ld      a,(MessageCount)                    ; Maximum message count check
  27+ 8E8C                                      ReturnIfAGTENusng    MAXMESSAGES            ; we do not enque if queue is full
  27+ 8E8C FE 05       >                        cp    MAXMESSAGES
  27+ 8E8E D0          >                        ret	 nc
  28+ 8E8F 3C                                   inc     a
  29+ 8E90 32 6C 99                             ld      (MessageCount),a                    ; get ready for next message
  30+ 8E93 4F           .AddMessage:            ld      c,a
  31+ 8E94 3A 6D 99                             ld      a,(MessageCurrent)                  ; a = current message id + count + 1
  32+ 8E97 81                                   add     c                                   ;
  33+ 8E98                                      JumpIfALTNusng MAXMESSAGES, .ReadyToAdd     ; a = a modulus 5 (note we can only hit 5 messages
  33+ 8E98 FE 05       >                        cp      MAXMESSAGES
  33+ 8E9A DA 9F 8E    >                        jp		c, .ReadyToAdd
  34+ 8E9D D6 05        .CircularQueue:         sub     MAXMESSAGES                         ; so only need 1 cycle of modulus
  35+ 8E9F 21 15 9A     .ReadyToAdd:            ld      hl,MessageTimeout                   ; write out message display time
  36+ 8EA2 ED 31                                add     hl,a                                ; as some may be brief messages
  37+ 8EA4 4F                                   ld      c,a                                 ;
  38+ 8EA5 FD 7C                                ld      a,iyh                               ;
  39+ 8EA7 77                                   ld      (hl),a                              ;
  40+ 8EA8 79                                   ld      a,c                                 ; get back index
  41+ 8EA9 21 6E 99                             ld      hl,MessageIndex
  42+ 8EAC                                      HLEquAddrAtHLPlusA                          ; hl = target location for message
  42+ 8EAC CB 27       >                    sla         a
  42+ 8EAE ED 31       >                    add         hl,a
  42+ 8EB0 7E          >                    ld          a,(hl)
  42+ 8EB1 23          >                    inc         hl
  42+ 8EB2 66          >                    ld          h,(hl)
  42+ 8EB3 6F          >                    ld          l,a
  43+ 8EB4 EB                                   ex      de,hl                               ; de = destination, hl = message
  44+ 8EB5                                      ldCopyTextAtHLtoDE                          ; copy over text as we have done the rest
  44+ 8EB5 7E          >.CopyLoop:              ld      a,(hl)
  44+ 8EB6 12          >                        ld      (de),a
  44+ 8EB7 FE 00       >                        cp      0
  44+ 8EB9 CA C0 8E    >                        jp      z,.DoneCopy
  44+ 8EBC 23          >                        inc     hl
  44+ 8EBD 13          >                        inc     de
  44+ 8EBE 18 F5       >                        jr      .CopyLoop
  44+ 8EC0             >.DoneCopy:
  45+ 8EC0 C9                                   ret
  46+ 8EC1
  47+ 8EC1 3A 6D 99     UpdateMessageTimer:     ld      a,(MessageCurrent)
  48+ 8EC4 21 15 9A                             ld      hl,MessageTimeout
  49+ 8EC7 ED 31                                add     hl,a
  50+ 8EC9 7E                                   ld      a,(hl)
  51+ 8ECA 3D                                   dec     a
  52+ 8ECB 28 02                                jr      z,.UpdateQueue
  53+ 8ECD 77           .UpdateTimer            ld      (hl),a
  54+ 8ECE C9                                   ret
  55+ 8ECF 77           .UpdateQueue:           ld      (hl),a
  56+ 8ED0 21 6C 99                             ld      hl,MessageCount
  57+ 8ED3 35                                   dec     (hl)
  58+ 8ED4 3A 6D 99                             ld      a,(MessageCurrent)
  59+ 8ED7 23                                   inc     hl
  60+ 8ED8                                      JumpIfALTNusng MAXMESSAGES, .ReadyToUpdate
  60+ 8ED8 FE 05       >                        cp      MAXMESSAGES
  60+ 8EDA DA DE 8E    >                        jp		c, .ReadyToUpdate
  61+ 8EDD              .CircularQueue:         ZeroA
  61+ 8EDD AF          >                        xor a
  62+ 8EDE 32 6D 99     .ReadyToUpdate          ld      (MessageCurrent),a
  63+ 8EE1 C9                                   ret
  64+ 8EE2
  65+ 8EE2 3A 6C 99     DisplayCurrentMessage:  ld      a,(MessageCount)
  66+ 8EE5                                      ReturnIfAIsZero
  66+ 8EE5 A7          >                        and     a
  66+ 8EE6 C8          >                        ret     z
  67+ 8EE7 3A 6D 99                             ld      a,(MessageCurrent)
  68+ 8EEA 21 6E 99                             ld      hl,MessageIndex
  69+ 8EED                                      HLEquAddrAtHLPlusA
  69+ 8EED CB 27       >                    sla         a
  69+ 8EEF ED 31       >                    add         hl,a
  69+ 8EF1 7E          >                    ld          a,(hl)
  69+ 8EF2 23          >                    inc         hl
  69+ 8EF3 66          >                    ld          h,(hl)
  69+ 8EF4 6F          >                    ld          l,a
  70+ 8EF5                                      MMUSelectLayer1
  70+ 8EF5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  71+ 8EF9 11 01 00                             ld      de,MESSAGELINE
  72+ 8EFC CD 15 E1                             call    l1_print_at_wrap
  73+ 8EFF C9                                   ret
  74+ 8F00
  75+ 8F00              HyperSpaceMessage:      MMUSelectLayer1
  75+ 8F00 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  76+ 8F04 11 0F 85     .DisplayHyperCountDown: ld      de,Hyp_to
  77+ 8F07 21 C1 A7                             ld      hl,name_expanded
  78+ 8F0A                                      ldCopyTextAtHLtoDE
  78+ 8F0A 7E          >.CopyLoop:              ld      a,(hl)
  78+ 8F0B 12          >                        ld      (de),a
  78+ 8F0C FE 00       >                        cp      0
  78+ 8F0E CA 15 8F    >                        jp      z,.DoneCopy
  78+ 8F11 23          >                        inc     hl
  78+ 8F12 13          >                        inc     de
  78+ 8F13 18 F5       >                        jr      .CopyLoop
  78+ 8F15             >.DoneCopy:
  79+ 8F15 AF           .DoneName:              xor     a
  80+ 8F16 12                                   ld      (de),a
  81+ 8F17 32 2B 85                             ld      (Hyp_message+31),a      ; max out at 32 characters
  82+ 8F1A 21 0C 85     .CentreJustify:         ld      hl,Hyp_message
  83+ 8F1D                                      HalfLengthHL
  83+ 8F1D 06 00       >                        ld      b,0
  83+ 8F1F 7E          >.CountLenLoop:          ld      a,(hl)
  83+ 8F20 FE 00       >                        cp      0
  83+ 8F22 28 04       >                        jr      z,.DoneCount
  83+ 8F24 04          >                        inc     b
  83+ 8F25 23          >                        inc     hl
  83+ 8F26 18 F7       >                        jr      .CountLenLoop
  83+ 8F28 3E 20       >.DoneCount:             ld      a,32
  83+ 8F2A 90          >                        sub     b
  83+ 8F2B CB 2F       >                        sra     a
  84+ 8F2D 21 46 85                             ld      hl,Hyp_centeredTarget
  85+ 8F30                                      ldClearTextLoop 32
  85+ 8F30 47          >                        ld      b,a
  85+ 8F31 3E 20       >                        ld      a,32
  85+ 8F33 77          >.ClearLoop:             ld      (hl),a
  85+ 8F34 23          >                        inc     hl
  85+ 8F35 10 FC       >                        djnz    .ClearLoop
  86+ 8F37 EB                                   ex      de,hl
  87+ 8F38 21 0C 85                             ld      hl,Hyp_message
  88+ 8F3B                                      ldCopyTextAtHLtoDE
  88+ 8F3B 7E          >.CopyLoop:              ld      a,(hl)
  88+ 8F3C 12          >                        ld      (de),a
  88+ 8F3D FE 00       >                        cp      0
  88+ 8F3F CA 46 8F    >                        jp      z,.DoneCopy
  88+ 8F42 23          >                        inc     hl
  88+ 8F43 13          >                        inc     de
  88+ 8F44 18 F5       >                        jr      .CopyLoop
  88+ 8F46             >.DoneCopy:
  89+ 8F46                                      ZeroA
  89+ 8F46 AF          >                        xor a
  90+ 8F47 32 66 85                             ld      (Hyp_centeredEol),a
  91+ 8F4A 21 42 85                             ld      hl,Hyp_counter           ; clear counter digits
  92+ 8F4D 3E 20                                ld      a,32                     ; clear counter digits
  93+ 8F4F 77                                   ld      (hl),a                   ; clear counter digits
  94+ 8F50 23                                   inc     hl                       ; clear counter digits
  95+ 8F51 77                                   ld      (hl),a                   ; clear counter digits
  96+ 8F52 23                                   inc     hl                       ; clear counter digits
  97+ 8F53 77                                   ld      (hl),a                   ; clear counter digits
  98+ 8F54 CD E8 84                             call    UpdateCountdownNumber
  99+ 8F57 21 39 85                             ld      hl,Hyp_charging
 100+ 8F5A                                      HalfLengthHL
 100+ 8F5A 06 00       >                        ld      b,0
 100+ 8F5C 7E          >.CountLenLoop:          ld      a,(hl)
 100+ 8F5D FE 00       >                        cp      0
 100+ 8F5F 28 04       >                        jr      z,.DoneCount
 100+ 8F61 04          >                        inc     b
 100+ 8F62 23          >                        inc     hl
 100+ 8F63 18 F7       >                        jr      .CountLenLoop
 100+ 8F65 3E 20       >.DoneCount:             ld      a,32
 100+ 8F67 90          >                        sub     b
 100+ 8F68 CB 2F       >                        sra     a
 101+ 8F6A 21 87 85                             ld      hl,Hyp_centeredCharging
 102+ 8F6D                                      ldClearTextLoop 32
 102+ 8F6D 47          >                        ld      b,a
 102+ 8F6E 3E 20       >                        ld      a,32
 102+ 8F70 77          >.ClearLoop:             ld      (hl),a
 102+ 8F71 23          >                        inc     hl
 102+ 8F72 10 FC       >                        djnz    .ClearLoop
 103+ 8F74 EB                                   ex      de,hl
 104+ 8F75 21 39 85                             ld      hl,Hyp_charging
 105+ 8F78                                      ldCopyTextAtHLtoDE
 105+ 8F78 7E          >.CopyLoop:              ld      a,(hl)
 105+ 8F79 12          >                        ld      (de),a
 105+ 8F7A FE 00       >                        cp      0
 105+ 8F7C CA 83 8F    >                        jp      z,.DoneCopy
 105+ 8F7F 23          >                        inc     hl
 105+ 8F80 13          >                        inc     de
 105+ 8F81 18 F5       >                        jr      .CopyLoop
 105+ 8F83             >.DoneCopy:
 106+ 8F83 AF                                   xor     a
 107+ 8F84 32 A7 85                             ld      (Hyp_centeredEol2),a
 108+ 8F87 2A 16 9B     .UpdateHyperCountdown:  ld      hl,(InnerHyperCount)
 109+ 8F8A 2D                                   dec     l
 110+ 8F8B 20 26                                jr      nz,.decHyperInnerOnly
 111+ 8F8D 25                                   dec     h
 112+ 8F8E FA B7 8F                             jp      m,.HyperCountDone
 113+ 8F91 2E 0B        .resetHyperInner:       ld      l,$0B
 114+ 8F93 E5                                   push    hl
 115+ 8F94 16 0C                                ld      d,12
 116+ 8F96 3E 06                                ld      a,L1ColourPaperBlack | L1ColourInkYellow
 117+ 8F98 CD 8B E0                             call    l1_attr_cls_2DlinesA
 118+ 8F9B 16 60                                ld      d,12 * 8
 119+ 8F9D CD 74 E0                             call    l1_cls_2_lines_d
 120+ 8FA0 11 00 60                             ld      de,$6000
 121+ 8FA3 21 46 85                             ld      hl,Hyp_centeredTarget
 122+ 8FA6 CD C8 E0                             call    l1_print_at
 123+ 8FA9 11 00 68                             ld      de,$6800
 124+ 8FAC 21 87 85                             ld      hl,Hyp_centeredCharging
 125+ 8FAF CD C8 E0                             call    l1_print_at
 126+ 8FB2 E1                                   pop     hl
 127+ 8FB3 22 16 9B     .decHyperInnerOnly:     ld      (InnerHyperCount),hl
 128+ 8FB6 C9                                   ret
 129+ 8FB7 21 00 00     .HyperCountDone:        ld      hl,0
 130+ 8FBA 22 16 9B                             ld      (InnerHyperCount),hl
 131+ 8FBD 16 0C                                ld      d,12
 132+ 8FBF 3E 00                                ld      a,L1ColourPaperBlack | L1ColourInkBlack
 133+ 8FC1 CD 8B E0                             call    l1_attr_cls_2DlinesA
 134+ 8FC4 16 60                                ld      d,12 * 8
 135+ 8FC6 CD 74 E0                             call    l1_cls_2_lines_d
 136+ 8FC9                                      ForceTransition ScreenHyperspace                            ; transition to hyperspace
 136+ 8FC9 3E 0E       >                        ld      a,ScreenHyperspace
 136+ 8FCB 32 96 87    >                        ld      (ScreenTransitionForced), a
 137+ 8FCE C9                                   ret
 138+ 8FCF
# file closed: ./Tables/message_queue.asm
1045  8FCF                          INCLUDE "./Tables/LaserStatsTable.asm"
# file opened: ./Tables/LaserStatsTable.asm
   1+ 8FCF              ; LaserTypeTable
   2+ 8FCF              ; laser type = id of laser
   3+ 8FCF              ; laser pulse pause = time before next pulse
   4+ 8FCF              ; laser pulse duration = time laser is on per shot
   5+ 8FCF              ; laser damage output
   6+ 8FCF              ;
   7+ 8FCF              ; LaserType
   8+ 8FCF              ; LaserPulseRate                          ; how many pulses can be fired before long pause
   9+ 8FCF              ; LaserPulseOnTime                        ; cycles laser is on for
  10+ 8FCF              ; LaserPulseOffTime                       ; cycles laser is off for
  11+ 8FCF              ; LaserPulseRest                          ; time before pulse count resets to 0 (i.e cooldown)
  12+ 8FCF              ; LaserDamageOutput                       ; amount of damage for a laser hit
  13+ 8FCF              ; LaserEnergyDrain                        ; amount of energy drained by cycle
  14+ 8FCF              ; LaserHeat                               ; amount of heat generated
  15+ 8FCF              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
  16+ 8FCF              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
  17+ 8FCF              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
  18+ 8FCF              ; LaserTechLevel                          ; minimum tech level system to buy from
  19+ 8FCF              ;
  20+ 8FCF              LaserStatsTableWidth    EQU 12
  21+ 8FCF              ;                           0    1    2    3    4    5    6    7    8    9   10   11
  22+ 8FCF              ;                          Typ  Rate On   Off  Rst  Dam  Drn  Het  Dur  DAt  Mrk  Tek
  23+ 8FCF 00 02 05 20  LaserStatsTable:        DB $00, $02, $05, $20, $40, $03, $10, $02, $20 ,$10 ,$00, $00; basic laser
  23+ 8FD3 40 03 10 02
  23+ 8FD7 20 10 00 00
  24+ 8FDB 01 01 08 08                          DB $01, $01, $08, $08, $20, $03, $10, $08, $20 ,$10 ,$00, $01; pulse laser
  24+ 8FDF 20 03 10 08
  24+ 8FE3 20 10 00 01
  25+ 8FE7 02 06 08 03                          DB $02, $06, $08, $03, $3A, $03, $10, $02, $20 ,$10 ,$00, $02; burst laser TODO THIS ONE IS ODD
  25+ 8FEB 3A 03 10 02
  25+ 8FEF 20 10 00 02
  26+ 8FF3 03 11 06 04                          DB $03, $11, $06, $04, $50, $02, $10, $05, $30 ,$10 ,$00, $03; Gatling laser
  26+ 8FF7 50 02 10 05
  26+ 8FFB 30 10 00 03
  27+ 8FFF 04 00 01 00                          DB $04, $00, $01, $00, $03, $03, $03, $10, $20 ,$10 ,$00, $04; beam ; DOES NOT WORK
  27+ 9003 03 03 03 10
  27+ 9007 20 10 00 04
  28+ 900B 05 01 20 30                          DB $05, $01, $20, $30, $60, $03, $02, $02, $20 ,$10 ,$00, $05; mining
  28+ 900F 60 03 02 02
  28+ 9013 20 10 00 05
  29+ 9017 06 00 01 00                          DB $06, $00, $01, $00, $06, $05, $05, $05, $10 ,$10 ,$00, $08; military beam DOES NOT WORK
  29+ 901B 06 05 05 05
  29+ 901F 10 10 00 08
  30+ 9023 07 01 01 02                          DB $07, $01, $01, $02, $20, $22, $01, $30, $30 ,$11 ,$01, $10; thargoid
  30+ 9027 20 22 01 30
  30+ 902B 30 11 01 10
  31+ 902F 08 01 05 10                          DB $08, $01, $05, $10, $80, $70, $02, $03, $60 ,$11 ,$01, $10; Starkiller
  31+ 9033 80 70 02 03
  31+ 9037 60 11 01 10
  32+ 903B
  33+ 903B
  34+ 903B
  35+ 903B
  36+ 903B
  37+ 903B
  38+ 903B
# file closed: ./Tables/LaserStatsTable.asm
1046  903B                          INCLUDE "./Tables/ShipClassTable.asm"
# file opened: ./Tables/ShipClassTable.asm
   1+ 903B 00           ShipBodiesTable:        DB  $ - ShipBodiesTable
   2+ 903C 23 18 16 00  ShipPackList:           DB  ShipID_Sidewinder, ShipID_Mamba, ShipID_Krait, ShipID_Adder, ShipID_Gecko, ShipID_Cobra_Mk_1, ShipID_Worm, ShipID_Cobra_Mk_3_P
   2+ 9040 13 0A 2A 0B
   3+ 9044              ShipPackTableSize       EQU $ - ShipPackList
   4+ 9044 0B 02 1F 12  ShipHunterTable         DB  ShipID_Cobra_Mk_3_P, ShipID_Asp_Mk_2, ShipID_Python_P, ShipID_Fer_De_Lance
   5+ 9048              ShipHunterTableSize     EQU $ - ShipHunterTable
   6+ 9048
# file closed: ./Tables/ShipClassTable.asm
1047  9048
1048  9048
1049  9048
1050  9048              ;.absXhi:
1051  9048              ;                        ld      a,ScannerX
1052  9048              ;                        JumpOnBitSet d,7,ScannerNegX
1053  9048              ;                        add     a,e
1054  9048              ;                        jp      ScannerZCoord
1055  9048              ;ScannerNegX:            sub     e
1056  9048              ;ScannerZCoord:          ld      e,a
1057  9048              ;                        srl     c
1058  9048              ;                        srl     c
1059  9048              ;                        ld      a,ScannerY
1060  9048              ;                        JumpOnBitSet b,7,ScannerNegZ
1061  9048              ;                        sub     c
1062  9048              ;                        jp      ScannerYCoord
1063  9048              ;ScannerNegZ:            add     a,c
1064  9048              ;ScannerYCoord:          ld      d,a                     ; now de = pixel pos d = y e = x  for base of stick X & Z , so need Y Stick height
1065  9048              ;                        JumpOnBitSet h,7,ScannerStickDown
1066  9048              ;                        sub     l                       ; a already holds actual Y
1067  9048              ;                        JumpIfAGTENusng 128,ScannerHeightDone
1068  9048              ;                        ld      a,128
1069  9048              ;                        jp      ScannerHeightDone
1070  9048              ;ScannerStickDown:       add     a,l
1071  9048              ;                        JumpIfAGTENusng 191,ScannerHeightDone
1072  9048              ;                        ld      a,191
1073  9048              ;ScannerHeightDone:      ld      c,e            ; Now sort out line from point DE horzontal by a
1074  9048              ;                        ld      b,d
1075  9048              ;                        ld      d,a
1076  9048              ;                        cp      b
1077  9048              ;                        jp      z,Scanner0Height
1078  9048              ;                        ld      e,194 ; Should be coloured based on status but this will do for now
1079  9048              ;                        push    bc
1080  9048              ;                        push    de
1081  9048              ;                        MMUSelectLayer2
1082  9048              ;                        call    l2_draw_vert_line_to
1083  9048              ;                        pop     de
1084  9048              ;                        pop     bc
1085  9048              ;Scanner0Height:         ld      b,d
1086  9048              ;                       push    bc
1087  9048              ;                       ld      a,255
1088  9048              ;                       MMUSelectLayer2
1089  9048              ;                       call    l2_plot_pixel
1090  9048              ;                       pop     bc
1091  9048              ;                       inc     c
1092  9048              ;                       ld      a,255
1093  9048              ;                       MMUSelectLayer2
1094  9048              ;                       call    l2_plot_pixel
1095  9048 C9                                   ret
1096  9049
1097  9049
1098  9049 AF           SeedGalaxy0:            xor     a
1099  904A                                      MMUSelectGalaxyA
1099  904A ED 92 57    >                     nextreg GalaxyDataMMU,       a
1100  904D DD 21 16 E0                          ld      ix,galaxy_data
1101  9051 AF                                   xor		a
1102  9052 32 55 9A                             ld		(XSAV),a
1103  9055 CD 90 9F                             call    copy_galaxy_to_system
1104  9058 DD E5        SeedGalaxy0Loop:        push    ix
1105  905A D1                                   pop     de
1106  905B 21 3C 9A                             ld      hl,SystemSeed
1107  905E CD 96 9F                             call    copy_seed
1108  9061 DD E5                                push    ix
1109  9063 E1                                   pop     hl
1110  9064 ED 34 08 00                          add     hl,8
1111  9068 E5                                   push    hl
1112  9069 DD E1                                pop     ix
1113  906B CD CB 9F                             call    next_system_seed
1114  906E 3A 55 9A                             ld		a,(XSAV)
1115  9071 3D                                   dec		a
1116  9072 FE 00                                cp		0
1117  9074 C8                                   ret		z
1118  9075 32 55 9A                             ld		(XSAV),a
1119  9078 20 DE                                jr      nz,SeedGalaxy0Loop
1120  907A C9                                   ret
1121  907B
1122  907B
1123  907B
1124  907B
1125  907B                  ;include "./ModelRender/testdrawing.asm"
1126  907B                  include "./Menus/AttractMode.asm"
# file opened: ./Menus/AttractMode.asm
   1+ 907B              AttractDuration             EQU $00F0
   2+ 907B              AttractCounterStart         EQU $80
   3+ 907B F0 00        AttractTimer:              DW      AttractDuration
   4+ 907D 80           AttractCounter:            DB      AttractCounterStart
   5+ 907E
   6+ 907E 3D 08        Attract_boiler_text		DW $083D
   7+ 9080
   8+ 9080
   9+ 9080 4C 6F 61 64  ATTR_LoadCommander      DB "Load Commander (Y/N)",0
   9+ 9084 20 43 6F 6D
   9+ 9088 6D 61 6E 64
   9+ 908C 65 72 20 28
   9+ 9090 59 2F 4E 29
   9+ 9094 00
  10+ 9095
  11+ 9095              AttractMode:            MMUSelectLayer1
  11+ 9095 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  12+ 9099 CD 80 E0                             call	l1_cls
  13+ 909C 3E 07                                ld		a,7
  14+ 909E CD 9B E0                             call	l1_attr_cls_to_a
  15+ 90A1 1E FF                                ld      e,$FF
  16+ 90A3 ED 5B 7E 90                          ld      de,(Attract_boiler_text)
  17+ 90A7 21 80 90                             ld      hl,ATTR_LoadCommander
  18+ 90AA CD C8 E0                             call    l1_print_at
  19+ 90AD                                      MMUSelectSpriteBank
  19+ 90AD ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  20+ 90B1 CD 27 E4                             call        sprite_cls_cursors
  21+ 90B4 CD E8 E0                             call    l2_cls_lower_third
  22+ 90B7                                      MMUSelectConsoleBank
  22+ 90B7 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  23+ 90BB 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  24+ 90BE 11 00 E0                             ld          de,ConsoleImageData
  25+ 90C1 01 00 08                             ld          bc, ScreenL1BottomLen
  26+ 90C4 CD 66 96                             call        memcopy_dma
  27+ 90C7 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  28+ 90CA 11 00 E8                             ld          de,ConsoleAttributes
  29+ 90CD 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  30+ 90D0 CD 66 96                             call        memcopy_dma
  31+ 90D3                                      MMUSelectLayer2
  31+ 90D3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  32+ 90D7 CD 03 E0                             call    asm_l2_double_buffer_on
  33+ 90DA CD 46 91     .StartShip:             call    SelectARandomShip
  34+ 90DD CD 4A 97     .DrawLoop:              call    scan_keyboard
  35+ 90E0 3E 50                                ld      a,c_Pressed_Yes
  36+ 90E2 CD 98 97                             call    is_key_up_state
  37+ 90E5 20 57                                jr      nz,.YPressed
  38+ 90E7 3E 52                                ld      a,c_Pressed_No
  39+ 90E9 CD 98 97                             call    is_key_up_state
  40+ 90EC 20 53                                jr      nz,.NPressed
  41+ 90EE                                      MMUSelectUniverseN  1
  41+ 90EE ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
  42+ 90F2 CD EB DC                             call    ApplyShipRollAndPitch
  43+ 90F5                                   ;   xor     a
  44+ 90F5                                   ;  ld      (UBnKRotXCounter),a
  45+ 90F5                                   ;  ld      (UBnKRotZCounter),a
  46+ 90F5              .ProcessUnivShip:       MMUSelectLayer2
  46+ 90F5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  47+ 90F9 CD D3 E0                             call   l2_cls_upper_two_thirds
  48+ 90FC CD 29 DE                             call    ProcessShip
  49+ 90FF 01 01 01     .Drawbox:               ld		bc,$0101
  50+ 9102 11 FD 7F                             ld		de,$7FFD
  51+ 9105 3E C0                                ld		a,$C0
  52+ 9107                                      MMUSelectLayer2
  52+ 9107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  53+ 910B CD 20 E2                             call	l2_draw_box
  54+ 910E CD 07 E1     .DoubleBuffer:          call    l2_flip_buffers
  55+ 9111 3A 7D 90                             ld      a,(AttractCounter)
  56+ 9114                                      JumpIfAIsZero .SameShipPosition
  56+ 9114 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  56+ 9115 CA 2A 91    >                        jp	z, .SameShipPosition
  57+ 9118 3D                                   dec     a
  58+ 9119 32 7D 90                             ld      (AttractCounter),a
  59+ 911C 2A 12 C0                             ld      hl, (UBnKzlo)
  60+ 911F 11 08 00     .UpdatePos:             ld      de, $0008
  61+ 9122 ED 52                                sbc     hl,de
  62+ 9124 22 12 C0                             ld      (UBnKzlo),hl
  63+ 9127 CD 61 9F                             call    doRandom
  64+ 912A 2A 7B 90     .SameShipPosition:      ld      hl,(AttractTimer)
  65+ 912D 2B                                   dec     hl
  66+ 912E 22 7B 90                             ld      (AttractTimer),hl
  67+ 9131 7C                                   ld      a,h
  68+ 9132 B5                                   or      l
  69+ 9133 20 A8                                jr      nz,.DrawLoop
  70+ 9135 21 F0 00     .NewShip:               ld      hl,AttractDuration
  71+ 9138 22 7B 90                             ld      (AttractTimer),hl
  72+ 913B C3 DA 90                             jp      .StartShip
  73+ 913E 3E 00        .YPressed:              ld      a,0
  74+ 9140 C9                                   ret
  75+ 9141 3E FF        .NPressed:              ld      a,$FF
  76+ 9143 C9                                   ret
  77+ 9144 DD 01        .ExitAttractMode:       break
  78+ 9146
  79+ 9146 06 01        SelectARandomShip:      ld      b,1                             ; Demo screen uses slot 1
  80+ 9148                                      MMUSelectUniverseN  1
  80+ 9148 ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
  81+ 914C                                      MMUSelectShipBank1
  81+ 914C ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
  82+ 9150 CD 61 9F     .SelectRandom:          call    doRandom
  83+ 9153                                      JumpIfAGTENusng ShipID_Rattler+1, .SelectRandom
  83+ 9153 FE 2C       >                        cp     ShipID_Rattler+1
  83+ 9155 D2 50 91    >                        jp		nc,.SelectRandom
  84+ 9158 CD 0F E0                             call    GetShipBankId                       ; find actual memory location of data
  85+ 915B                                      MMUSelectShipBankA
  85+ 915B ED 92 57    >					 nextreg ShipModelMMU,	    a
  86+ 915E 78                                   ld      a,b
  87+ 915F CD 6A E0                             call    CopyShipToUniverse
  88+ 9162 3A 22 C3                             ld      a,(ShipTypeAddr)
  89+ 9165 CB 7F                                bit     7,a                                 ; is it a type we don't want in attract mode
  90+ 9167 20 E7                                jr      nz,.SelectRandom
  91+ 9169 CD 49 CB                             call    UnivInitRuntime
  92+ 916C CD 8C CA                             call    UnivSetDemoPostion
  93+ 916F 21 F0 00                             ld      hl,AttractDuration
  94+ 9172 22 7B 90                             ld      (AttractTimer),hl
  95+ 9175 3E 80                                ld      a, AttractCounterStart
  96+ 9177 32 7D 90                             ld      (AttractCounter),a
  97+ 917A C9                                   ret
  98+ 917B
  99+ 917B
 100+ 917B
# file closed: ./Menus/AttractMode.asm
1127  917B
1128  917B                  include "./Maths/Utilities/XX12EquNodeDotOrientation.asm"
# file opened: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
   1+ 917B              ; We enter here with hl pointing at XX16 and bc = XX15 value
   2+ 917B              ; so xx12 = XX15 * XX16 row
   3+ 917B              XX12ProcessOneRow:
   4+ 917B              XX12CalcXCell:
   5+ 917B ED 4B 83 C0          ld		bc,(UBnkXScaled)
   6+ 917F 5E           		ld		e,(hl)								    ; get orientation ZX
   7+ 9180 23           		inc		hl
   8+ 9181 56           		ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
   9+ 9182 7A           		ld		a,d
  10+ 9183 A8                   xor     b
  11+ 9184 E6 80        		and		SignOnly8Bit                            ; a = XX 16 sign
  12+ 9186 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  13+ 9188 78           		ld		a,b                                     ; now make bc abs bc
  14+ 9189 E6 7F        		and		SignMask8Bit
  15+ 918B 47           		ld		b,a                                     ; bc = abs(bc) now
  16+ 918C E5           		push	hl
  17+ 918D 16 00                ld      d,0                                     ; d = value
  18+ 918F 60           		ld		h,b
  19+ 9190 69           		ld		l,c
  20+ 9191 CD A6 AA     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  21+ 9194 22 81 96     		ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
  22+ 9197 DD 7C        		ld		a,ixh
  23+ 9199 32 88 96     		ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
  24+ 919C E1           		pop		hl
  25+ 919D              XX12CalcYCell:
  26+ 919D ED 4B 85 C0          ld		bc,(UBnkYScaled)
  27+ 91A1 23           		inc		hl
  28+ 91A2 5E           		ld		e,(hl)							    	; get orientation ZX
  29+ 91A3 23           		inc		hl
  30+ 91A4 56           		ld		d,(hl)
  31+ 91A5 7A           		ld		a,d
  32+ 91A6 A8                   xor     b
  33+ 91A7 E6 80        		and		SignOnly8Bit
  34+ 91A9 DD 67        		ld		ixh,a								    ; XX16 orientation sign to ixh
  35+ 91AB 78           		ld		a,b                                     ; now make bc abs bc
  36+ 91AC E6 7F        		and		SignMask8Bit
  37+ 91AE 47           		ld		b,a                                     ; bc = abs(bc) now
  38+ 91AF E5           		push	hl
  39+ 91B0 16 00                ld      d,0                                     ; d = value
  40+ 91B2 60           		ld		h,b
  41+ 91B3 69           		ld		l,c
  42+ 91B4 CD A6 AA     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  43+ 91B7 22 83 96     		ld		(XX12PVarResult2),hl				    ; T = 16 bit result
  44+ 91BA DD 7C        		ld		a,ixh
  45+ 91BC 32 87 96     		ld		(XX12PVarSign2),a					    ; S = sign
  46+ 91BF E1           		pop		hl
  47+ 91C0              XX12CalcZCell:
  48+ 91C0 ED 4B 87 C0          ld		bc,(UBnkZScaled)
  49+ 91C4 23           		inc		hl
  50+ 91C5 5E           		ld		e,(hl)								    ; get orientation ZX
  51+ 91C6 23           		inc		hl
  52+ 91C7 56           		ld		d,(hl)
  53+ 91C8 7A           		ld		a,d
  54+ 91C9 A8                   xor     b
  55+ 91CA E6 80        		and		SignOnly8Bit
  56+ 91CC DD 67        		ld		ixh,a								    ; orientation sign to ixh
  57+ 91CE 78           		ld		a,b                                     ; now make bc abs bc
  58+ 91CF E6 7F        		and		SignMask8Bit
  59+ 91D1 47           		ld		b,a                                     ; bc = abs(bc) now
  60+ 91D2 16 00                ld      d,0                                     ; d = value
  61+ 91D4 60           		ld		h,b
  62+ 91D5 69           		ld		l,c
  63+ 91D6 CD A6 AA     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  64+ 91D9 22 85 96     		ld		(XX12PVarResult3),hl				    ; T = 16 bit result
  65+ 91DC DD 7C        		ld		a,ixh
  66+ 91DE 32 89 96     		ld		(XX12PVarSign3),a					    ; S = sign
  67+ 91E1              XX12CalcCellResult:
  68+ 91E1 2A 81 96     		ld		hl,(XX12PVarResult1)				    ; X Cell Result
  69+ 91E4 ED 5B 83 96  		ld		de,(XX12PVarResult2)				    ; Y Cell Result
  70+ 91E8 ED 4B 87 96  		ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
  71+ 91EC              XX12MSBOnly:
  72+ 91EC 6C           		ld		l,h									    ; now move results into lower byte so / 256
  73+ 91ED 5A           		ld		e,d									    ; for both results
  74+ 91EE AF           		xor		a									    ;
  75+ 91EF 67           		ld		h,a									    ;
  76+ 91F0 57           		ld		d,a									    ; so set high byte to 0
  77+ 91F1 CD 52 B0     		call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
  78+ 91F4 47           		ld		b,a									    ; move sign into b ready for next calc
  79+ 91F5 3A 89 96     		ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
  80+ 91F8 4F           		ld		c,a									    ; goes into c to align with DE
  81+ 91F9 ED 5B 85 96  		ld		de,(XX12PVarResult3)				    ; now add result to Result 3
  82+ 91FD 5A           		ld		e,d                                     ; d = result /256
  83+ 91FE 16 00        		ld		d,0									    ; and only us high byte
  84+ 9200 CD 52 B0     		call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
  85+ 9203 C9           		ret											    ; hl = result, a = sign
  86+ 9204              								    ; hl = result, a = sign
  87+ 9204
  88+ 9204              XX12EquNodeDotTransMat:							    ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
  89+ 9204              ;...X cell
  90+ 9204 21 56 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
  91+ 9207 CD 7B 91             call    XX12ProcessOneRow                   ; hl = result, a = sign
  92+ 920A 47           		ld		b,a                                 ; b = sign
  93+ 920B 7C           		ld		a,h                                 ; a = high byte
  94+ 920C B0           		or		b
  95+ 920D 32 8A C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
  96+ 9210 7D           		ld		a,l                                 ; the result will be in the lower byte now
  97+ 9211 32 89 C0             ld      (UBnkXX12xLo),a						; that is result done for
  98+ 9214              ;...Y cell
  99+ 9214 21 5E C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 100+ 9217 CD 7B 91             call    XX12ProcessOneRow
 101+ 921A 47           		ld		b,a
 102+ 921B 7C           		ld		a,h
 103+ 921C              ;		ld		a,l
 104+ 921C B0           		or		b
 105+ 921D 32 8C C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 106+ 9220 7D           		ld		a,l                                 ; the result will be in the lower byte now
 107+ 9221 32 8B C0             ld      (UBnkXX12yLo),a						; that is result done for
 108+ 9224              ;...Z cell
 109+ 9224 21 66 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 110+ 9227 CD 7B 91             call    XX12ProcessOneRow
 111+ 922A 47           		ld		b,a
 112+ 922B 7C                   ld		a,h
 113+ 922C              ;		ld		a,l
 114+ 922C B0           		or		b
 115+ 922D 32 8E C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 116+ 9230 7D           		ld		a,l                                 ; the result will be in the lower byte now
 117+ 9231 32 8D C0             ld      (UBnkXX12zLo),a						; that is result done for
 118+ 9234 C9                   ret
 119+ 9235
 120+ 9235              XX12EquNodeDotOrientation:							; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 121+ 9235              ;...X cell
 122+ 9235 21 56 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
 123+ 9238 CD 7B 91             call    XX12ProcessOneRow                   ; hl = result, a = sign
 124+ 923B 47           		ld		b,a                                 ; b = sign
 125+ 923C 7C           		ld		a,h                                 ; a = high byte
 126+ 923D B0           		or		b
 127+ 923E 32 8A C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 128+ 9241 7D           		ld		a,l                                 ; the result will be in the lower byte now
 129+ 9242 32 89 C0             ld      (UBnkXX12xLo),a						; that is result done for
 130+ 9245              ;...Y cell
 131+ 9245 21 5E C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 132+ 9248 CD 7B 91             call    XX12ProcessOneRow
 133+ 924B 47           		ld		b,a
 134+ 924C 7C           		ld		a,h
 135+ 924D              ;		ld		a,l
 136+ 924D B0           		or		b
 137+ 924E 32 8C C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 138+ 9251 7D           		ld		a,l                                 ; the result will be in the lower byte now
 139+ 9252 32 8B C0             ld      (UBnkXX12yLo),a						; that is result done for
 140+ 9255              ;...Z cell
 141+ 9255 21 66 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 142+ 9258 CD 7B 91             call    XX12ProcessOneRow
 143+ 925B 47           		ld		b,a
 144+ 925C 7C                   ld		a,h
 145+ 925D              ;		ld		a,l
 146+ 925D B0           		or		b
 147+ 925E 32 8E C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 148+ 9261 7D           		ld		a,l                                 ; the result will be in the lower byte now
 149+ 9262 32 8D C0             ld      (UBnkXX12zLo),a						; that is result done for
 150+ 9265 C9                   ret
 151+ 9266
 152+ 9266              XX12EquNodeDotXX16:					         		; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 153+ 9266              ;...X cell
 154+ 9266 21 3E C0     		ld		hl,UBnkTransmatSidevX     			; process orientation matrix row 0
 155+ 9269 CD 7B 91             call    XX12ProcessOneRow                   ; hl = result, a = sign
 156+ 926C 47           		ld		b,a                                 ; b = sign
 157+ 926D 7C           		ld		a,h                                 ; a = high byte
 158+ 926E B0           		or		b
 159+ 926F 32 8A C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 160+ 9272 7D           		ld		a,l                                 ; the result will be in the lower byte now
 161+ 9273 32 89 C0             ld      (UBnkXX12xLo),a						; that is result done for
 162+ 9276              ;...Y cell
 163+ 9276 21 44 C0     		ld		hl,UBnkTransmatRoofvX     			; process orientation matrix row 1
 164+ 9279 CD 7B 91             call    XX12ProcessOneRow
 165+ 927C 47           		ld		b,a
 166+ 927D 7C           		ld		a,h
 167+ 927E              ;		ld		a,l
 168+ 927E B0           		or		b
 169+ 927F 32 8C C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 170+ 9282 7D           		ld		a,l                                 ; the result will be in the lower byte now
 171+ 9283 32 8B C0             ld      (UBnkXX12yLo),a						; that is result done for
 172+ 9286              ;...Z cell
 173+ 9286 21 4A C0     		ld		hl,UBnkTransmatNosevX     			; process orientation matrix row 1
 174+ 9289 CD 7B 91             call    XX12ProcessOneRow
 175+ 928C 47           		ld		b,a
 176+ 928D 7C                   ld		a,h
 177+ 928E              ;		ld		a,l
 178+ 928E B0           		or		b
 179+ 928F 32 8E C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 180+ 9292 7D           		ld		a,l                                 ; the result will be in the lower byte now
 181+ 9293 32 8D C0             ld      (UBnkXX12zLo),a						; that is result done for
 182+ 9296 C9                   ret
# file closed: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
1129  9297                  include "./ModelRender/CopyXX12ToXX15.asm"
# file opened: ./ModelRender/CopyXX12ToXX15.asm
   1+ 9297 21 89 C0     CopyXX12ToXX15:         ld      hl,XX12
   2+ 929A 11 83 C0                             ld      de,XX15
   3+ 929D 01 06 00                             ld      bc,6
   4+ 92A0 ED B0                                ldir
   5+ 92A2 C9                                   ret
   6+ 92A3
   7+ 92A3 21 89 C0     CopyXX12ToXX12Save:     ld      hl,XX12
   8+ 92A6 11 8F C0                             ld      de,XX12Save
   9+ 92A9 01 06 00                             ld      bc,6
  10+ 92AC ED B0                                ldir
  11+ 92AE C9                                   ret
  12+ 92AF
  13+ 92AF 21 8F C0     CopyXX12SaveToXX12:     ld      hl,XX12Save
  14+ 92B2 11 89 C0                             ld      de,XX12
  15+ 92B5 01 06 00                             ld      bc,6
  16+ 92B8 ED B0                                ldir
  17+ 92BA C9                                   ret
  18+ 92BB
  19+ 92BB 21 89 C0     CopyXX12ToXX12Save2:    ld      hl,XX12
  20+ 92BE 11 95 C0                             ld      de,XX12Save2
  21+ 92C1 01 06 00                             ld      bc,6
  22+ 92C4 ED B0                                ldir
  23+ 92C6 C9                                   ret
  24+ 92C7
  25+ 92C7 21 95 C0     CopyXX12Save2ToXX12:    ld      hl,XX12Save2
  26+ 92CA 11 89 C0                             ld      de,XX12
  27+ 92CD 01 06 00                             ld      bc,6
  28+ 92D0 ED B0                                ldir
  29+ 92D2 C9                                   ret
  30+ 92D3
# file closed: ./ModelRender/CopyXX12ToXX15.asm
1130  92D3                  include "./ModelRender/CopyXX15ToXX12.asm"
# file opened: ./ModelRender/CopyXX15ToXX12.asm
   1+ 92D3 21 83 C0     CopyXX15ToXX12:         ld		hl,XX15
   2+ 92D6 11 89 C0                             ld      de,XX12
   3+ 92D9 01 06 00                             ld      bc,6
   4+ 92DC ED B0                                ldir
   5+ 92DE C9                                   ret
   6+ 92DF
   7+ 92DF
   8+ 92DF
   9+ 92DF 21 83 C0     CopyXX15ToXX15Save:     ld		hl,XX15
  10+ 92E2 11 9F C0                             ld      de,XX15Save
  11+ 92E5 01 06 00                             ld      bc,6
  12+ 92E8 ED B0                                ldir
  13+ 92EA C9                                   ret
  14+ 92EB
  15+ 92EB 21 9F C0     CopyXX15SaveToXX15:     ld		hl,XX15Save
  16+ 92EE 11 83 C0                             ld      de,XX15
  17+ 92F1 01 06 00                             ld      bc,6
  18+ 92F4 ED B0                                ldir
  19+ 92F6 C9                                   ret
  20+ 92F7
  21+ 92F7 21 83 C0     CopyXX15ToXX15Save2:    ld		hl,XX15
  22+ 92FA 11 A7 C0                             ld      de,XX15Save2
  23+ 92FD 01 06 00                             ld      bc,6
  24+ 9300 ED B0                                ldir
  25+ 9302 C9                                   ret
  26+ 9303
  27+ 9303 21 A7 C0     CopyXX15Save2ToXX15:    ld		hl,XX15Save2
  28+ 9306 11 83 C0                             ld      de,XX15
  29+ 9309 01 06 00                             ld      bc,6
  30+ 930C ED B0                                ldir
  31+ 930E C9                                   ret
  32+ 930F
# file closed: ./ModelRender/CopyXX15ToXX12.asm
1131  930F                  include "./Maths/Utilities/ScaleXX16Matrix197.asm"
# file opened: ./Maths/Utilities/ScaleXX16Matrix197.asm
   1+ 930F 06 09        ScaleXX16Matrix197:     ld		b,9                 ; Interate though all 9 matrix elements
   2+ 9311 0E C5                                ld		c,ConstNorm         ; c = 197
   3+ 9313 21 3E C0                             ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
   4+ 9316 7E           .ScaleXX16Loop:         ld		a,(hl)              ; set DE = matrix value
   5+ 9317 5F                                   ld		e,a                 ;
   6+ 9318 23                                   inc		hl                  ;
   7+ 9319 7E                                   ld		a,(hl)              ;
   8+ 931A 57                                   ld		d,a                 ;
   9+ 931B E6 80                                and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  10+ 931D DD 6F                                ld		ixl,a				; retain for sign bit
  11+ 931F                                      ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  11+ 931F CB 23       >			   sla e
  11+ 9321 CB 12       >			   rl  d
  12+ 9323 7A                                   ld      a,d                 ; a = high byte after x 2
  13+ 9324 C5                                   push	bc                  ; save BC  counter and constant 197
  14+ 9325 E5                                   push	hl                  ; save HL
  15+ 9326 CD 51 AC                             call	DIV16Amul256dCUNDOC; AEquAmul256DivD; DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
  16+ 9329 E1                                   pop		hl
  17+ 932A 2B                                   dec     hl                  ; move back to low byte
  18+ 932B 71                                   ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
  19+ 932C 23                                   inc     hl                  ; move back to high byte
  20+ 932D                                  ;    ld      a,(hl)
  21+ 932D                                  ;    and     $80
  22+ 932D DD 7D                                ld      a,ixl
  23+ 932F 77                                   ld      (hl),a              ; write back just sign bit
  24+ 9330 C1                                   pop		bc                  ; retrieve both counter and constant 197
  25+ 9331 23                                   inc     hl                  ; no to next vertex value
  26+ 9332 10 E2                                djnz	.ScaleXX16Loop
  27+ 9334 C9                                   ret
  28+ 9335
# file closed: ./Maths/Utilities/ScaleXX16Matrix197.asm
1132  9335
1133  9335                  include "./Universe/StarDust/StarRoutines.asm"
# file opened: ./Universe/StarDust/StarRoutines.asm
   1+ 9335              ;note: DIV16Amul256dCUNDOC as per
   2+ 9335              ;                                   BC = A0
   3+ 9335              ;                                   DE = 0C
   4+ 9335              ;                                   so BC = a * 256 / C
   5+ 9335
   6+ 9335              ; We can cheat here, Speed is always 0 or positive
   7+ 9335              ; z postion will always be positive if we can see it
   8+ 9335
   9+ 9335 EB           InitStarAtHL:           ex      de,hl               ; preserving hl
  10+ 9336 CD 61 9F                             call    doRND               ; a = random OR bit 5
  11+ 9339 EB                                   ex      de,hl               ; .
  12+ 933A F6 08                                or      8                   ; .
  13+ 933C 77                                   ld      (hl),a              ; save to x pos
  14+ 933D E6 7F                                and     $7F                 ; a = abs a
  15+ 933F 23                                   inc     hl                  ;
  16+ 9340 77                                   ld      (hl),a              ;
  17+ 9341 EB                                   ex      de,hl               ; preserving hl
  18+ 9342 CD 61 9F                             call    doRND               ; a = -ve (random / 2)
  19+ 9345 EB                                   ex      de,hl               ; .
  20+ 9346 0F                                   rrca                        ; .
  21+ 9347 E6 80                                and     $80                 ; .
  22+ 9349 B6                                   or      (hl)                ; or with
  23+ 934A 77                                   ld      (hl),a
  24+ 934B 23                                   inc     hl
  25+ 934C EB                                   ex      de,hl
  26+ 934D CD 61 9F                             call    doRND
  27+ 9350 EB                                   ex      de,hl
  28+ 9351 F6 04                                or      4
  29+ 9353 77                                   ld      (hl),a
  30+ 9354 23                                   inc     hl
  31+ 9355 E6 7F                                and     $7F
  32+ 9357 77                                   ld      (hl),a
  33+ 9358 EB                                   ex      de,hl
  34+ 9359 CD 61 9F                             call    doRND
  35+ 935C EB                                   ex      de,hl
  36+ 935D 0F                                   rrca
  37+ 935E E6 80                                and     $80
  38+ 9360 B6                                   or      (hl)
  39+ 9361 77                                   ld      (hl),a
  40+ 9362 23                                   inc     hl
  41+ 9363 EB                                   ex      de,hl
  42+ 9364 CD 61 9F                             call    doRND
  43+ 9367 EB                                   ex      de,hl
  44+ 9368 F6 90                                or      144
  45+ 936A 77                                   ld      (hl),a
  46+ 936B 23                                   inc     hl
  47+ 936C F6 70                                or      %01110000
  48+ 936E E6 7F                                and     $7f     ; bodge
  49+ 9370 77                                   ld      (hl),a
  50+ 9371 23                                   inc     hl
  51+ 9372 C9                                   ret
  52+ 9373
  53+ 9373 EB           InitHyperStarAtHL:      ex      de,hl
  54+ 9374 CD 61 9F                             call    doRND
  55+ 9377 CB 27                                sla     a
  56+ 9379 CB 27                                sla     a                ; so its * 4 as we have a blank spot
  57+ 937B EB                                   ex      de,hl
  58+ 937C E6 F8                                and     %11111000
  59+ 937E 77                                   ld      (hl),a
  60+ 937F E6 7F                                and     $7F
  61+ 9381 23                                   inc     hl
  62+ 9382 77                                   ld      (hl),a
  63+ 9383 EB                                   ex      de,hl
  64+ 9384 CD 61 9F                             call    doRND
  65+ 9387 EB                                   ex      de,hl
  66+ 9388 0F                                   rrca
  67+ 9389 E6 80                                and     $80
  68+ 938B B6                                   or      (hl)
  69+ 938C 77                                   ld      (hl),a
  70+ 938D 23                                   inc     hl
  71+ 938E EB                                   ex      de,hl
  72+ 938F CD 61 9F                             call    doRND
  73+ 9392 CB 27                                sla     a
  74+ 9394 CB 27                                sla     a               ; so its * 4 as we have a blank spot
  75+ 9396 EB                                   ex      de,hl
  76+ 9397 E6 F8                                and     %11111000
  77+ 9399 77                                   ld      (hl),a
  78+ 939A 23                                   inc     hl
  79+ 939B E6 7F                                and     $7F
  80+ 939D 77                                   ld      (hl),a
  81+ 939E EB                                   ex      de,hl
  82+ 939F CD 61 9F                             call    doRND
  83+ 93A2 EB                                   ex      de,hl
  84+ 93A3 0F                                   rrca
  85+ 93A4 E6 80                                and     $80
  86+ 93A6 B6                                   or      (hl)
  87+ 93A7 77                                   ld      (hl),a
  88+ 93A8 23                                   inc     hl
  89+ 93A9 EB                                   ex      de,hl
  90+ 93AA CD 61 9F                             call    doRND
  91+ 93AD EB                                   ex      de,hl
  92+ 93AE F6 5F                                or      95
  93+ 93B0 77                                   ld      (hl),a
  94+ 93B1 23                                   inc     hl
  95+ 93B2 F6 70                                or      %01110000
  96+ 93B4 E6 7F                                and     $7f     ; bodge
  97+ 93B6 77                                   ld      (hl),a
  98+ 93B7 23                                   inc     hl
  99+ 93B8 C9                                   ret
 100+ 93B9
 101+ 93B9              ; we could cheat, flip the sign of DE and just add but its not very optimised
 102+ 93B9 7C           StarsSUBHLDESigned:     ld      a,h
 103+ 93BA E6 80                                and     SignOnly8Bit
 104+ 93BC 47                                   ld      b,a                         ;save sign bit in b
 105+ 93BD AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 106+ 93BE                                      JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 106+ 93BE FA EC 93    >                        jp		m, .SUBHLDEOppSGN
 107+ 93C1 78           .SUBHLDESameSigns:      ld      a,b
 108+ 93C2 B2                                   or      d
 109+ 93C3                                      JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 109+ 93C3 FA CD 93    >                        jp		m, .SUBHLDESameNeg
 110+ 93C6 B7                                   or      a
 111+ 93C7 ED 52                                sbc     hl,de
 112+ 93C9                                      JumpIfNegative .SUBHLDESameOvrFlw
 112+ 93C9 FA E0 93    >                        jp		m, .SUBHLDESameOvrFlw
 113+ 93CC C9                                   ret
 114+ 93CD 7C           .SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 115+ 93CE E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 116+ 93D0 67                                   ld      h,a
 117+ 93D1 7A                                   ld      a,d
 118+ 93D2 E6 7F                                and     SignMask8Bit
 119+ 93D4 57                                   ld      d,a
 120+ 93D5 B7                                   or      a
 121+ 93D6 ED 52                                sbc     hl,de
 122+ 93D8                                      JumpIfNegative .SUBHLDESameOvrFlw
 122+ 93D8 FA E0 93    >                        jp		m, .SUBHLDESameOvrFlw
 123+ 93DB 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 124+ 93DC F6 80                                or      SignOnly8Bit
 125+ 93DE 67                                   ld      h,a
 126+ 93DF C9                                   ret
 127+ 93E0              .SUBHLDESameOvrFlw:     NegHL
 127+ 93E0 AF          >                    xor a
 127+ 93E1 95          >                    sub l
 127+ 93E2 6F          >                    ld l,a
 127+ 93E3 9F          >                    sbc a,a
 127+ 93E4 94          >                    sub h
 127+ 93E5 67          >                    ld h,a
 128+ 93E6 78                                   ld      a,b
 129+ 93E7 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 130+ 93E9 B4                                   or      h
 131+ 93EA 67                                   ld      h,a                         ; recover sign
 132+ 93EB C9                                   ret
 133+ 93EC B7           .SUBHLDEOppSGN:         or      a
 134+ 93ED 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 135+ 93EE E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 136+ 93F0 67                                   ld      h,a
 137+ 93F1 7A                                   ld      a,d
 138+ 93F2 E6 7F                                and     SignMask8Bit
 139+ 93F4 57                                   ld      d,a
 140+ 93F5 19                                   add     hl,de
 141+ 93F6 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 142+ 93F7 B4                                   or      h
 143+ 93F8 67                                   ld      h,a                         ; set the previou sign value
 144+ 93F9 C9                                   ret
 145+ 93FA
 146+ 93FA 7C           StarsADDHLDESigned:     ld      a,h
 147+ 93FB E6 80                                and     SignOnly8Bit
 148+ 93FD 47                                   ld      b,a                         ;save sign bit in b
 149+ 93FE AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 150+ 93FF                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 150+ 93FF FA 17 94    >                        jp		m, .ADDHLDEOppSGN
 151+ 9402 78           .ADDHLDESameSigns:      ld      a,b
 152+ 9403 B2                                   or      d
 153+ 9404                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 153+ 9404 FA 09 94    >                        jp		m, .ADDHLDESameNeg
 154+ 9407 19                                   add     hl,de
 155+ 9408 C9                                   ret
 156+ 9409 7C           .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 157+ 940A E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 158+ 940C 67                                   ld      h,a
 159+ 940D 7A                                   ld      a,d
 160+ 940E E6 7F                                and     SignMask8Bit
 161+ 9410 57                                   ld      d,a
 162+ 9411 19                                   add     hl,de
 163+ 9412 3E 80                                ld      a,SignOnly8Bit
 164+ 9414 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 165+ 9415 67                                   ld      h,a
 166+ 9416 C9                                   ret
 167+ 9417 7C           .ADDHLDEOppSGN:         ld      a,h                         ; here HL and DE are opposite  so if we enter here then signs are the same so we clear the 16th bit
 168+ 9418 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 169+ 941A 67                                   ld      h,a
 170+ 941B 7A                                   ld      a,d
 171+ 941C E6 7F                                and     SignMask8Bit
 172+ 941E 57                                   ld      d,a
 173+ 941F B7                                   or      a
 174+ 9420 ED 52                                sbc     hl,de
 175+ 9422 38 04                                jr      c,.ADDHLDEOppInvert
 176+ 9424 78           .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 177+ 9425 B4                                   or      h
 178+ 9426 67                                   ld      h,a                         ; set the previou sign value
 179+ 9427 C9                                   ret
 180+ 9428              .ADDHLDEOppInvert:      NegHL
 180+ 9428 AF          >                    xor a
 180+ 9429 95          >                    sub l
 180+ 942A 6F          >                    ld l,a
 180+ 942B 9F          >                    sbc a,a
 180+ 942C 94          >                    sub h
 180+ 942D 67          >                    ld h,a
 181+ 942E 78                                   ld      a,b
 182+ 942F EE 80                                xor     SignOnly8Bit                ; flip sign bit
 183+ 9431 B4                                   or      h
 184+ 9432 67                                   ld      h,a                         ; recover sign
 185+ 9433 C9                                   ret
 186+ 9434              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ 9434 06 0B        InitialiseStars:        ld      b,MaxNumberOfStars
 188+ 9436 21 AA 9C                             ld      hl,varDust
 189+ 9439 CD 35 93     .InitStarsLoop:         call    InitStarAtHL
 190+ 943C 10 FB                                djnz    .InitStarsLoop
 191+ 943E C9                                   ret
 192+ 943F              ;----------------------------------------------------------------------------------------------------------------------------------
 193+ 943F 06 0B        InitialiseHyperStars:   ld      b,MaxNumberOfStars
 194+ 9441 21 AA 9C                             ld      hl,varDust
 195+ 9444 CD 73 93     .InitStarsLoop:         call    InitHyperStarAtHL
 196+ 9447 10 FB                                djnz    .InitStarsLoop
 197+ 9449 C9                                   ret
 198+ 944A              ;----------------------------------------------------------------------------------------------------------------------------------
 199+ 944A 06 0B        DustForward:            ld      b,MaxNumberOfStars                  ; get the number of stars to process
 200+ 944C FD 21 AA 9C                          ld      iy,varDust                          ; hl is now a pointer to the dust array
 201+ 9450 C5           StarProcessLoop:        push    bc                                  ; save counter +1
 202+ 9451 FD 7E 05     .Qequ64XSpeedDivZHi:    ld      a,(iy+5)                            ; e  = z high
 203+ 9454 5F                                   ld      e,a                                 ; d = 0
 204+ 9455 16 00                                ld      d,0                                 ; de = zhi/256
 205+ 9457 3A 4C 9A                             ld      a,(DELTA)                           ; a = speed
 206+ 945A                                      JumpIfAIsNotZero .NormalSpeed               ; if we are stationary set speed
 206+ 945A FE 00       >                        cp	0
 206+ 945C C2 60 94    >                        jp	nz,.NormalSpeed
 207+ 945F 3C                                   inc     a                                   ; so it is at least some dust movement
 208+ 9460 47           .NormalSpeed:           ld      b,a                                 ;
 209+ 9461 0E 00                                ld      c,0                                 ; bc = delta * 256
 210+ 9463 CD C5 AC                             call    BC_Div_DE                           ; BC = Speed/Z , HL = remainder
 211+ 9466                                      ShiftHLRight1
 211+ 9466 CB 3C       >			   srl h
 211+ 9468 CB 1D       >			   rr  l
 212+ 946A                                      ShiftHLRight1                               ; hl = remainder/2 so now 64 * speed / zhi
 212+ 946A CB 3C       >			   srl h
 212+ 946C CB 1D       >			   rr  l
 213+ 946E 7D                                   ld      a,l                                 ;
 214+ 946F F6 01                                or      1                                   ; so ensure A is at least 1 for ambient movement
 215+ 9471 DD 6F                                ld      ixl,a                               ; preserve A which is also VarQ = 64 * speed / zhi
 216+ 9473 FD 6E 04 FD  .ZequZMinusSpeedX64:    ld      hl,(iy+4)                           ; hl = z
 216+ 9477 66 05
 217+ 9479 ED 5B 4D 9A                          ld      de, (DELTA4)                         ; de = delta4 i.e. speed * 64 pre computed
 218+ 947D CD B9 93                             call    StarsSUBHLDESigned
 219+ 9480                                      JumpOnBitSet h,7,ResetStar                  ; if z ended up negative then reset the star
 219+ 9480 CB 7C       >                        bit 	7,h
 219+ 9482 C2 D7 95    >                        jp      nz,ResetStar
 220+ 9485 FD 75 04 FD                          ld      (iy+4),hl                           ; save new z pos
 220+ 9489 74 05
 221+ 948B FD 6E 00 FD  .XEquXPlusXhiMulQ       ld      hl,(iy+0)                           ; hl  = x
 221+ 948F 66 01
 222+ 9491 7C                                   ld      a,h                                 ;
 223+ 9492 E6 7F                                and     $7F                                 ;
 224+ 9494 57                                   ld      d,a                                 ; d = abs(x hi)
 225+ 9495 DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 226+ 9497 ED 30                                mul                                         ; de =  abs(x hi) * Q
 227+ 9499 7C                                   ld      a,h                                 ;
 228+ 949A E6 80                                and     $80                                 ;
 229+ 949C B2                                   or      d                                   ; set sign bit in d
 230+ 949D 57                                   ld      d,a                                 ;
 231+ 949E CD FA 93                             call    StarsADDHLDESigned                  ; x = x + (x hi/256 * Q)
 232+ 94A1 7C                                   ld      a,h
 233+ 94A2 E6 7F                                and     $7F
 234+ 94A4                                      JumpIfAGTENusng $70, ResetStar
 234+ 94A4 FE 70       >                        cp     $70
 234+ 94A6 D2 D7 95    >                        jp		nc,ResetStar
 235+ 94A9 FD 75 00 FD                          ld      (iy+0),hl                           ;
 235+ 94AD 74 01
 236+ 94AF FD 6E 02 FD  .YEquYPlusYhiMulQ       ld      hl,(iy+2)                           ; hl  = y
 236+ 94B3 66 03
 237+ 94B5 7C                                   ld      a,h                                 ;
 238+ 94B6 E6 7F                                and     $7F                                 ;
 239+ 94B8 57                                   ld      d,a                                 ; d = abs(y hi)
 240+ 94B9 DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 241+ 94BB ED 30                                mul                                         ; de =  abs(y hi) * Q
 242+ 94BD 7C                                   ld      a,h                                 ;
 243+ 94BE E6 80                                and     $80                                 ;
 244+ 94C0 B2                                   or      d                                   ; set sign bit in d
 245+ 94C1 57                                   ld      d,a                                 ;
 246+ 94C2 CD FA 93                             call    StarsADDHLDESigned                  ; y = y + (x hi/256 * Q)
 247+ 94C5 7C                                   ld      a,h
 248+ 94C6 E6 7F                                and     $7F
 249+ 94C8                                      JumpIfAGTENusng $60, ResetStar
 249+ 94C8 FE 60       >                        cp     $60
 249+ 94CA D2 D7 95    >                        jp		nc,ResetStar
 250+ 94CD 7C                                   ld      a,h
 251+ 94CE E6 80                                and     $80
 252+ 94D0 20 06                                jr      nz,.NoSecondCheck
 253+ 94D2 7C                                   ld      a,h
 254+ 94D3                                      JumpIfAGTENusng $20, ResetStar
 254+ 94D3 FE 20       >                        cp     $20
 254+ 94D5 D2 D7 95    >                        jp		nc,ResetStar
 255+ 94D8 FD 75 02 FD  .NoSecondCheck:         ld      (iy+2),hl                           ;
 255+ 94DC 74 03
 256+ 94DE              ; Now roll
 257+ 94DE              ;  6. x = x - alpha * y / 256
 258+ 94DE 2A 67 99     .XRoll:                 ld      hl,(ALP1)                           ; h = sign, l = magnitude
 259+ 94E1 7D                                   ld      a,l
 260+ 94E2 FE 00                                cp      0
 261+ 94E4 28 4C                                jr      z,.NoRoll                           ; don;t roll if magnitude is 0
 262+ 94E6                                      ;break
 263+ 94E6                                      ;ld      a,$80
 264+ 94E6                                      ;xor     l                                   ; l = flipped sign as we are rotating stars not us
 265+ 94E6 E5                                   push    hl
 266+ 94E7 7C                                   ld      a,h
 267+ 94E8 E6 80                                and     $80
 268+ 94EA 4F           .rxSaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 269+ 94EB 55           .rxDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 270+ 94EC FD 7E 03                             ld      a,(iy+3)                            ; get high byte from x coord
 271+ 94EF 5F                                   ld      e,a
 272+ 94F0 E6 80                                and     $80
 273+ 94F2 47           .rxBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 274+ 94F3 7B           .rxEEquABSignX:         ld      a,e
 275+ 94F4 E6 7F                                and     $7F
 276+ 94F6 5F                                   ld      e,a                                 ; save abs x hi in e
 277+ 94F7 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 278+ 94F9 79                                   ld      a,c
 279+ 94FA A8                                   xor     b                                   ; handle muliple sign bits
 280+ 94FB B2                                   or      d
 281+ 94FC 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 282+ 94FD FD 6E 00 FD                          ld      hl,(iy+0)                           ; h = iy+1, l = iy+0
 282+ 9501 66 01
 283+ 9503 CD B9 93                             call    StarsSUBHLDESigned                  ; we are usign add, so may need to fip sign?
 284+ 9506 FD 75 00 FD                          ld      (iy+0),hl
 284+ 950A 74 01
 285+ 950C              ;  5. y = y + alpha * x / 256
 286+ 950C              .YRoll:                 ;break
 287+ 950C E1                                   pop     hl                                  ; h = sign, l = magnitude
 288+ 950D 7C                                   ld      a,h
 289+ 950E E6 80                                and     $80
 290+ 9510 4F           .rySaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 291+ 9511 55           .ryDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 292+ 9512 FD 7E 01                             ld      a,(iy+1)                            ; get high byte from x coord
 293+ 9515 5F                                   ld      e,a
 294+ 9516 E6 80                                and     $80
 295+ 9518 47           .ryBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 296+ 9519 7B           .ryEEquABSignX:         ld      a,e
 297+ 951A E6 7F                                and     $7F
 298+ 951C 5F                                   ld      e,a                                 ; save abs x hi in e
 299+ 951D ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 300+ 951F 79                                   ld      a,c
 301+ 9520 A8                                   xor     b                                   ; handle muliple sign bits
 302+ 9521 B2                                   or      d
 303+ 9522 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 304+ 9523 FD 6E 02 FD                          ld      hl,(iy+2)                           ; h = iy+1, l = iy+0
 304+ 9527 66 03
 305+ 9529 CD FA 93                             call    StarsADDHLDESigned                  ; we are usign add, so may need to fip sign?
 306+ 952C FD 75 02 FD                          ld      (iy+2),hl
 306+ 9530 74 03
 307+ 9532 3A 5A 99     .NoRoll:                ld      a,(BET1)
 308+ 9535 FE 00                                cp      0
 309+ 9537 28 22                                jr      z,.NoPitch
 310+ 9539              ;  8. y = y - beta * 256
 311+ 9539 57           .YPitch:                ld      d,a                                 ; d = BET1
 312+ 953A FD 7E 02                             ld      a,(iy+2)
 313+ 953D 5F                                   ld      e,a                                 ; e = Y HI
 314+ 953E ED 30                                mul                                         ; de = BET1 * YHi so now D = BETA & YHI / 256
 315+ 9540 5F                                   ld      e,a
 316+ 9541 ED 30                                mul                                         ; so now de = (BETA & Yhi) ^ 2
 317+ 9543                                      ShiftDELeft1                                ; de = 2 * ((BETA & Yhi) ^ 2)
 317+ 9543 CB 23       >			   sla e
 317+ 9545 CB 12       >			   rl  d
 318+ 9547 3A 5C 99                             ld      a,(BET2FLIP)                        ; get inverted Sign
 319+ 954A B2                                   or      d
 320+ 954B 57                                   ld      d,a                                 ; de = - (2 * ((BETA & Yhi) ^ 2))
 321+ 954C FD 6E 02 FD                          ld      hl,(iy+2)
 321+ 9550 66 03
 322+ 9552 CD FA 93                             call    StarsADDHLDESigned
 323+ 9555 FD 75 02 FD                          ld      (iy+2),hl
 323+ 9559 74 03
 324+ 955B              ; now work out screen pos
 325+ 955B              ; Note two optimistations, write to layer 2 - we get a free removal via double buffer cls
 326+ 955B              ; read z dept than determine hw many pixesl to plot, e.g. 1,2,3,4
 327+ 955B              ;        pop     de
 328+ 955B               ;       call    ProjectStarXToScreen
 329+ 955B                                      ;pop     de
 330+ 955B              .NoPitch:
 331+ 955B FD 7E 01     .ProjectStar:           ld      a,(iy+1)
 332+ 955E 6F                                   ld      l,a
 333+ 955F E6 7F                                and     $7F
 334+ 9561                                      JumpOnBitSet l,7,StarNegXPt
 334+ 9561 CB 7D       >                        bit 	7,l
 334+ 9563 C2 6C 95    >                        jp      nz,StarNegXPt
 335+ 9566 C6 80                                add     a,$80
 336+ 9568 4F                                   ld      c,a
 337+ 9569 C3 71 95                             jp      StarDoneX
 338+ 956C 47           StarNegXPt:             ld      b,a
 339+ 956D 3E 80                                ld      a,$80
 340+ 956F 90                                   sub     b
 341+ 9570 4F                                   ld      c,a
 342+ 9571 FD 7E 03     StarDoneX:              ld      a,(iy+3)
 343+ 9574 6F                                   ld      l,a
 344+ 9575 E6 7F                                and     $7F
 345+ 9577                                      JumpOnBitSet l,7,StarNegYPt
 345+ 9577 CB 7D       >                        bit 	7,l
 345+ 9579 C2 82 95    >                        jp      nz,StarNegYPt
 346+ 957C C6 60                                add     a,$60
 347+ 957E 47                                   ld      b,a
 348+ 957F C3 87 95                             jp      StarDoneY
 349+ 9582 47           StarNegYPt:             ld      b,a
 350+ 9583 3E 60                                ld      a,$60
 351+ 9585 90                                   sub     b
 352+ 9586 47                                   ld      b,a
 353+ 9587 3E 92        StarDoneY:              ld      a,L2DustColour
 354+ 9589 C5                                   push    bc
 355+ 958A              .DrawStar:              MMUSelectLayer2
 355+ 958A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 355+ 958E CD 29 E1       call    l2_plot_pixel
 356+ 9591 FD 7E 05                             ld      a,(iy+5)
 357+ 9594 C1                                   pop    bc
 358+ 9595                                      JumpIfAGTENusng $60,EndofStarsLoop
 358+ 9595 FE 60       >                        cp     $60
 358+ 9597 D2 C7 95    >                        jp		nc,EndofStarsLoop
 359+ 959A 3E 92                                ld      a,L2DustColour
 360+ 959C 0C                                   inc     c
 361+ 959D C5                                   push    bc
 362+ 959E                                      MMUSelectLayer2
 362+ 959E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 363+ 95A2 CD 29 E1                             call    l2_plot_pixel
 364+ 95A5 FD 7E 05                             ld      a,(iy+5)
 365+ 95A8 C1                                   pop    bc
 366+ 95A9                                      JumpIfAGTENusng $37,EndofStarsLoop
 366+ 95A9 FE 37       >                        cp     $37
 366+ 95AB D2 C7 95    >                        jp		nc,EndofStarsLoop
 367+ 95AE 3E 92                                ld      a,L2DustColour
 368+ 95B0 04                                   inc     b
 369+ 95B1 C5                                   push    bc
 370+ 95B2                                      MMUSelectLayer2
 370+ 95B2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 370+ 95B6 CD 29 E1         call    l2_plot_pixel
 371+ 95B9 FD 7E 05                             ld      a,(iy+5)
 372+ 95BC C1                                   pop    bc
 373+ 95BD 3E 92                                ld      a,L2DustColour
 374+ 95BF 0D                                   dec     c
 375+ 95C0                                      MMUSelectLayer2
 375+ 95C0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 375+ 95C4 CD 29 E1         call    l2_plot_pixel
 376+ 95C7 C1           EndofStarsLoop:         pop     bc                                      ;  0
 377+ 95C8 FD E5        NextStarLoop3:          push    iy                                      ; +1
 378+ 95CA E1                                   pop     hl                                      ;  0
 379+ 95CB ED 34 06 00                          add     hl,6
 380+ 95CF E5           NextStarLoop2:          push    hl                                      ; +1
 381+ 95D0 FD E1                                pop     iy                                      ;  0
 382+ 95D2 05                                   dec     b
 383+ 95D3 C2 50 94                             jp      nz,StarProcessLoop
 384+ 95D6 C9                                   ret
 385+ 95D7 C1           ResetStar:              pop     bc                                      ; 0
 386+ 95D8 FD E5                                push    iy                                      ; +1 (current star)
 387+ 95DA E1                                   pop     hl                                      ; 0
 388+ 95DB CD 35 93                             call    InitStarAtHL
 389+ 95DE C3 C8 95                             jp      NextStarLoop3
 390+ 95E1              ;----------------------------------------------------------------------------------------------------------------------------------
 391+ 95E1 FD 4E 00     ProjectStarXToScreen:   ld      c,(iy+0)
 392+ 95E4 FD 7E 01                             ld      a,(iy+1)
 393+ 95E7 6F                                   ld      l,a
 394+ 95E8 E6 7F                                and     $7F
 395+ 95EA 47                                   ld      b,a
 396+ 95EB CD 68 AC                             call    DIV16BCDivDEUNDOC
 397+ 95EE 7D                                   ld      a,l
 398+ 95EF                                      JumpOnBitSet a,7,StarXNegativePoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 398+ 95EF CB 7F       >                        bit 	7,a
 398+ 95F1 C2 FC 95    >                        jp      nz,StarXNegativePoint
 399+ 95F4              ;StarXPositivePoint:									; x was positive result
 400+ 95F4 2E 80                                ld          l,ScreenCenterX						;
 401+ 95F6 26 00                                ld          h,0
 402+ 95F8 09                                   add         hl,bc								; hl = Screen Centre + X
 403+ 95F9 C3 03 96                             jp          StarStoreXPoint
 404+ 95FC              StarXNegativePoint:                                 ; x < 0 so need to subtract from the screen centre position
 405+ 95FC 2E 80                                ld          l,ScreenCenterX
 406+ 95FE 26 00                                ld          h,0
 407+ 9600                                      ClearCarryFlag
 407+ 9600 B7          >                        or a
 408+ 9601 ED 42                                sbc         hl,bc                               ; hl = Screen Centre - X
 409+ 9603              StarStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 410+ 9603 7D                                   ld          a,l
 411+ 9604 32 02 9D                             ld          (varStarX),a
 412+ 9607 C9                                   ret
 413+ 9608
 414+ 9608 FD 46 02     ProjectStarYToScreen:   ld          b,(iy+2)
 415+ 960B FD 7E 03                             ld          a,(iy+3)
 416+ 960E 6F                                   ld          l,a
 417+ 960F E6 7F                                and         $7F
 418+ 9611 47                                   ld          b,a
 419+ 9612 CD 68 AC                             call        DIV16BCDivDEUNDOC
 420+ 9615 7D                                   ld          a,l                                 ; XX15+2 \ sign of X dist
 421+ 9616                                      JumpOnBitSet a,7,StarNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 421+ 9616 CB 7F       >                        bit 	7,a
 421+ 9618 C2 23 96    >                        jp      nz,StarNegativeYPoint
 422+ 961B                                  ;StarPositiveYPoint:									; Y is positive so above the centre line
 423+ 961B 2E 60                               ld          l,ScreenCenterY
 424+ 961D                                      ClearCarryFlag
 424+ 961D B7          >                        or a
 425+ 961E ED 42                                sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 426+ 9620 C3 28 96                             jp          StarStoreYPoint
 427+ 9623              StarNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 428+ 9623 2E 60                                ld          l,ScreenCenterY
 429+ 9625 26 00                                ld          h,0
 430+ 9627 09                                   add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 431+ 9628              StarStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 432+ 9628 7D                                   ld          a,l
 433+ 9629 32 03 9D                             ld          (varStarY),a
 434+ 962C C9                                   ret
 435+ 962D
 436+ 962D
# file closed: ./Universe/StarDust/StarRoutines.asm
1134  962D              ;    include "Universe/move_object-MVEIT.asm"
1135  962D              ;    include "./ModelRender/draw_object.asm"
1136  962D              ;    include "./ModelRender/draw_ship_point.asm"
1137  962D              ;    include "./ModelRender/drawforwards-LL17.asm"
1138  962D              ;    include "./ModelRender/drawforwards-LL17.asm"
1139  962D
1140  962D                  INCLUDE	"./Hardware/memfill_dma.asm"
# file opened: ./Hardware/memfill_dma.asm
   1+ 962D
   2+ 962D 00           memfillvalue		DB 0
   3+ 962E 83 C3 C7 CB  memfill        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   3+ 9632 7D
   4+ 9633 2D 96        memfill_astrt  		DW memfillvalue
   5+ 9635 00 40        memfill_length 		DB $00,$40
   6+ 9637 24 10 AD     					DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   7+ 963A 00 00        memfill_bstrt  		DB $00,$00
   8+ 963C 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   9+ 9640              memfill_cmd_len	  	EQU $ - memfill
  10+ 9640
  11+ 9640              memfill_dma:
  12+ 9640              ; "memfill_dma, hl = address to fill, a = value, de = length"
  13+ 9640              .set_fill_value:
  14+ 9640 32 2D 96     	ld 		(memfillvalue),a
  15+ 9643              .set_target:
  16+ 9643 22 3A 96     	ld		(memfill_bstrt),hl
  17+ 9646              .set_length:
  18+ 9646 ED 53 35 96  	ld		(memfill_length),de
  19+ 964A              .write_dma:
  20+ 964A 21 2E 96     	ld 		hl, memfill
  21+ 964D 06 12        	ld 		b, memfill_cmd_len
  22+ 964F 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  23+ 9651 ED B3        	otir
  24+ 9653 C9           	ret
  25+ 9654
# file closed: ./Hardware/memfill_dma.asm
1141  9654                  INCLUDE	"./Hardware/memcopy_dma.asm"
# file opened: ./Hardware/memcopy_dma.asm
   1+ 9654
   2+ 9654 83 C3 C7 CB  memcopy        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   2+ 9658 7D
   3+ 9659 00 00        memcopy_astrt  		DB $00,$00
   4+ 965B 00 40        memcopy_length 		DB $00,$40
   5+ 965D 14 10 AD     					DB DMA_WR1_P1INC_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   6+ 9660 00 00        memcopy_bstrt  		DB $00,$00
   7+ 9662 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   8+ 9666              memcopy_cmd_len	  	equ $ - memcopy
   9+ 9666
  10+ 9666              memcopy_dma:
  11+ 9666              ; "memcopy_dma, hl = target address de = source address to copy, bc = length"
  12+ 9666              .set_target:
  13+ 9666 22 60 96     	ld		(memcopy_bstrt),hl
  14+ 9669              .set_source:
  15+ 9669 ED 53 59 96  	ld		(memcopy_astrt),de
  16+ 966D              .set_length:
  17+ 966D ED 43 5B 96  	ld		(memcopy_length),bc
  18+ 9671              .write_dma:
  19+ 9671 21 54 96     	ld 		hl, memcopy
  20+ 9674 06 12        	ld 		b, memcopy_cmd_len
  21+ 9676 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  22+ 9678 ED B3        	otir
  23+ 967A C9           	ret
  24+ 967B
# file closed: ./Hardware/memcopy_dma.asm
1142  967B 00 00        XX12PVarQ			DW 0
1143  967D 00 00        XX12PVarR			DW 0
1144  967F 00 00        XX12PVarS			DW 0
1145  9681 00 00        XX12PVarResult1		DW 0
1146  9683 00 00        XX12PVarResult2		DW 0
1147  9685 00 00        XX12PVarResult3		DW 0
1148  9687 00           XX12PVarSign2		DB 0
1149  9688 00           XX12PVarSign1		DB 0								; Note reversed so BC can do a little endian fetch
1150  9689 00           XX12PVarSign3		DB 0
1151  968A                  INCLUDE "./Hardware/keyboard.asm"
# file opened: ./Hardware/keyboard.asm
   1+ 968A              ;
   2+ 968A              ; $FEFE;65278 V, C, X, Z, Caps Shifts       4  3  2  1  0
   3+ 968A              ; $FDFE;65022 G, F, D, S, A                 9  8  7  6  5
   4+ 968A              ; $FBFE;64510 T, R, E, W, Q                14 13 12 11 10
   5+ 968A              ; $F7FE;63486 5, 4, 3, 2, 1                19 18 17 16 15
   6+ 968A              ; $EFFE;61438 6, 7, 8, 9, 0                24 23 22 23 20
   7+ 968A              ; $DFFE;57342 Y, U, I, O, P                29 28 27 26 25
   8+ 968A              ; $BFFE;49150 H, J, K, L, Enter            34 33 32 31 30
   9+ 968A              ; $7FFE;32766 B, N, M, Symbol Shift, Space 39 38 37 36 35
  10+ 968A              ;
  11+ 968A              ; Keyboard
  12+ 968A              ;
  13+ 968A              ;   0      1       2       3       4       5        6       7       8       9
  14+ 968A              ;  VK_CAPS, VK_Z,  VK_X,   VK_C,   VK_V,   VK_A,    VK_S,   VK_D,   VK_F,   VK_G
  15+ 968A              ;   10     11      12      13      14      15       16      17      18      19
  16+ 968A              ;  VK_Q,   VK_W,   VK_E,   VK_R,   VK_T,   VK_1,    VK_2,   VK_3,   VK_4,   VK_5
  17+ 968A              ;   20     21      22      23      24      25       26      27      28      29
  18+ 968A              ;  VK_0    VK_9,   VK_8,   VK_7,   VK_6,   VK_P ,    VK_O,  VK_I,   VK_U,   VK_Y
  19+ 968A              ;   30     31      32      33      34      35       36      37      38      39
  20+ 968A              ; VK_ENTER VK_L,   VK_K,   VK_J,   VK_H,   VK_SPACE VK_SYM, VK_M,   VK_N,   VK_B
  21+ 968A              ;
  22+ 968A              ; Default map
  23+ 968A              ;-----------------------------------------------------------------------------------------------------------------------------------
  24+ 968A              ;   0          1           2             3              4           5           6           7           8           9
  25+ 968A              ;   VK_CAPS    VK_Z        VK_X,         VK_C,          VK_V,       VK_A        VK_S,       VK_D,       VK_F,       VK_G
  26+ 968A              ;              GameSkip                  Equip          SelLCargo   Climb       Decelerate  Recentre    FireM       HomeCursor
  27+ 968A              ;                                                                                                       Find System
  28+ 968A              ;-----------------------------------------------------------------------------------------------------------------------------------
  29+ 968A              ;   10         11          12            13             14          15          16          17          18          19
  30+ 968A              ;   VK_Q       VK_W,       VK_E,         VK_R,          VK_T,       VK_1        VK_2        VK_3        VK_4        VK_5
  31+ 968A              ;   Dive       Accelerate  ECM           UnarmMissile   TargetM     FrontV      AftV        LeftV       RightV      GalacticChart
  32+ 968A              ;-----------------------------------------------------------------------------------------------------------------------------------
  33+ 968A              ;   20         Accel       22            23             24          25          26          27          28          29
  34+ 968A              ;   VK_0       VK_9,       VK_8,         VK_7,          VK_6,       VK_P ,      VK_O,       VK_I,       VK_U,       VK_Y
  35+ 968A              ;   EscapePod  Inventory   Status        MarketPrices   LocalChart  RollRight   RolLLeft                EnergyBomb  Quit
  36+ 968A              ;   PlanetData                                                      PauseGame   SaveGame
  37+ 968A              ;-----------------------------------------------------------------------------------------------------------------------------------
  38+ 968A              ;   30         31          32            33             34          Right       36          37          EnergyBomb  39
  39+ 968A              ;   VK_ENTER   VK_L,       VK_K,         VK_J,          VK_H,       VK_SPACE    VK_SYM,     VK_M,       VK_N,       VK_B
  40+ 968A              ;              Launch                    Distance       Hyperspace  Laser                               DockComp    BuyCargo
  41+ 968A              ;              ResumeGame
  42+ 968A
  43+ 968A              ; You can read address to check keystate by address KeyboardMap + c_Pressed corresponding key. There is also an addr_ helper too
  44+ 968A
  45+ 968A              c_Pressed_Front         equ 0  * 2
  46+ 968A              c_Pressed_Aft           equ 1  * 2
  47+ 968A              c_Pressed_Left          equ 2  * 2
  48+ 968A              c_Pressed_Right         equ 3  * 2
  49+ 968A              c_Pressed_RollLeft      equ 4  * 2
  50+ 968A              c_Pressed_RollRight     equ 5  * 2
  51+ 968A              c_Pressed_Dive          equ 6  * 2
  52+ 968A              c_Pressed_Climb         equ 7  * 2
  53+ 968A              c_Pressed_Accellerate   equ 8  * 2
  54+ 968A              c_Pressed_Decellerate   equ 9  * 2
  55+ 968A              c_Pressed_FireLaser     equ 10 * 2
  56+ 968A              c_Pressed_TargetMissle  equ 11 * 2
  57+ 968A              c_Pressed_FireMissile   equ 12 * 2
  58+ 968A              c_Pressed_UnarmMissile  equ 13 * 2
  59+ 968A              c_Pressed_ECM           equ 14 * 2
  60+ 968A              c_Pressed_EnergyBomb    equ 15 * 2
  61+ 968A              c_Pressed_EscapePod     equ 16 * 2
  62+ 968A              c_Pressed_DockingComp   equ 17 * 2
  63+ 968A              c_Pressed_Hyperspace    equ 18 * 2
  64+ 968A              c_Pressed_Distance      equ 19 * 2
  65+ 968A              c_Pressed_HomeCursor    equ 20 * 2
  66+ 968A              c_Pressed_Launch        equ 21 * 2
  67+ 968A              c_Pressed_BuyCargo      equ 22 * 2
  68+ 968A              c_Pressed_SellCargo     equ 23 * 2
  69+ 968A              c_Pressed_Equip         equ 24 * 2
  70+ 968A              c_Pressed_GalacticChrt  equ 25 * 2
  71+ 968A              c_Pressed_LocalChart    equ 26 * 2
  72+ 968A              c_Pressed_MarketPrices  equ 27 * 2
  73+ 968A              c_Pressed_Status        equ 28 * 2
  74+ 968A              c_Pressed_Inventory     equ 29 * 2
  75+ 968A              c_Pressed_GameSkip      equ 30 * 2
  76+ 968A              c_Pressed_Save          equ 31 * 2
  77+ 968A              c_Pressed_Freeze        equ 32 * 2
  78+ 968A              c_Pressed_Resume        equ 33 * 2
  79+ 968A              c_Pressed_Recentre      equ 34 * 2
  80+ 968A              c_Pressed_Quit          equ 35 * 2
  81+ 968A              c_Pressed_PlanetData    equ 36 * 2
  82+ 968A              c_Pressed_CursorUp      equ 37 * 2
  83+ 968A              c_Pressed_CursorDown    equ 38 * 2
  84+ 968A              c_Pressed_Find          equ 39 * 2
  85+ 968A              c_Pressed_Yes           equ 40 * 2
  86+ 968A              c_Pressed_No            equ 41 * 2
  87+ 968A
  88+ 968A
  89+ 968A              ; half row 1
  90+ 968A              VK_CAPS  				equ 0
  91+ 968A              VK_Z  					equ 1
  92+ 968A              VK_X  					equ 2
  93+ 968A              VK_C  					equ 3
  94+ 968A              VK_V  					equ 4
  95+ 968A              ; half row 2
  96+ 968A              VK_A  					equ 5
  97+ 968A              VK_S  					equ 6
  98+ 968A              VK_D  					equ 7
  99+ 968A              VK_F  					equ 8
 100+ 968A              VK_G  					equ 9
 101+ 968A              ; half row 3
 102+ 968A              VK_Q  					equ 10
 103+ 968A              VK_W  					equ 11
 104+ 968A              VK_E  					equ 12
 105+ 968A              VK_R  					equ 13
 106+ 968A              VK_T  					equ 14
 107+ 968A              ; half row 4
 108+ 968A              VK_1  					equ 15
 109+ 968A              VK_2  					equ 16
 110+ 968A              VK_3  					equ 17
 111+ 968A              VK_4  					equ 18
 112+ 968A              VK_5  					equ 19
 113+ 968A              ; half row 5
 114+ 968A              VK_0 					equ 20
 115+ 968A              VK_9 					equ 21
 116+ 968A              VK_8 					equ 22
 117+ 968A              VK_7 					equ 23
 118+ 968A              VK_6 					equ 24
 119+ 968A              ; half row 6
 120+ 968A              VK_P  					equ 25
 121+ 968A              VK_O  					equ 26
 122+ 968A              VK_I  					equ 27
 123+ 968A              VK_U  					equ 28
 124+ 968A              VK_Y  					equ 29
 125+ 968A              ; half row 7
 126+ 968A              VK_ENTER 				equ 30
 127+ 968A              VK_L  					equ 31
 128+ 968A              VK_K  					equ 32
 129+ 968A              VK_J  					equ 33
 130+ 968A              VK_H  					equ 34
 131+ 968A              ; half row 8
 132+ 968A              VK_SPACE 				equ 35
 133+ 968A              VK_SYM  				equ 36
 134+ 968A              VK_M  					equ 37
 135+ 968A              VK_N  					equ 38
 136+ 968A              VK_B  					equ 39
 137+ 968A
 138+ 968A              ;KeyboardMapping
 139+ 968A              KeyCode_Front        	equ VK_1
 140+ 968A              KeyCode_Aft          	equ VK_2
 141+ 968A              KeyCode_Left         	equ VK_3
 142+ 968A              KeyCode_Right        	equ VK_4
 143+ 968A              KeyCode_RollLeft     	equ VK_O
 144+ 968A              KeyCode_RollRight    	equ VK_P
 145+ 968A              KeyCode_Dive         	equ VK_Q
 146+ 968A              KeyCode_Climb        	equ VK_A
 147+ 968A              KeyCode_Accellerate  	equ VK_W
 148+ 968A              KeyCode_Decellerate  	equ VK_S
 149+ 968A              KeyCode_FireLaser    	equ VK_SPACE
 150+ 968A              KeyCode_TargetMissle 	equ VK_T
 151+ 968A              KeyCode_FireMissile  	equ VK_F
 152+ 968A              KeyCode_Find        	equ VK_F
 153+ 968A              KeyCode_UnarmMissile 	equ VK_R
 154+ 968A              KeyCode_ECM          	equ VK_E
 155+ 968A              KeyCode_EnergyBomb   	equ VK_U
 156+ 968A              KeyCode_EscapePod    	equ VK_CAPS
 157+ 968A              KeyCode_DockingComp  	equ VK_N
 158+ 968A              KeyCode_Hyperspace   	equ VK_H
 159+ 968A              KeyCode_Distance     	equ VK_J
 160+ 968A              KeyCode_HomeCursor   	equ VK_G
 161+ 968A              KeyCode_Launch       	equ VK_L
 162+ 968A              KeyCode_BuyCargo     	equ VK_B
 163+ 968A              KeyCode_SellCargo    	equ VK_V
 164+ 968A              KeyCode_Equip        	equ VK_C
 165+ 968A              KeyCode_GalacticChrt 	equ VK_5
 166+ 968A              KeyCode_LocalChart   	equ VK_6
 167+ 968A              KeyCode_MarketPrices 	equ VK_7
 168+ 968A              KeyCode_Status       	equ VK_8
 169+ 968A              KeyCode_Inventory    	equ VK_9
 170+ 968A              KeyCode_GameSkip     	equ VK_Z
 171+ 968A              KeyCode_Save         	equ VK_O
 172+ 968A              KeyCode_Freeze       	equ VK_B
 173+ 968A              KeyCode_Resume       	equ VK_L
 174+ 968A              KeyCode_Recentre     	equ VK_D
 175+ 968A              KeyCode_Quit         	equ VK_Y
 176+ 968A              KeyCode_PlanetData   	equ VK_0
 177+ 968A              KeyCode_CursorUp        equ VK_Q
 178+ 968A              KeyCode_CursorDown      equ VK_A
 179+ 968A              KeyCode_PressedYes      equ VK_Y
 180+ 968A              KeyCode_PressedNo       equ VK_N
 181+ 968A
 182+ 968A 00 00 00...  Keys					DS	40          ; This is the list of key states for all the VK keys presssed i.e. VK_CAPS through to VK_B
 183+ 96B2              c_KeyBoardLen 			equ $ - Keys
 184+ 96B2 00 00 00...  RawKeys					DS	8
 185+ 96BA FE FD FB F7  KeyAddrTab				DB	$FE, $FD, $FB, $F7, $EF, $DF, $BF, $7F
 185+ 96BE EF DF BF 7F
 186+ 96C2              ; Now keyboard map lists each game key and the corresponding address in the Keys table to get the value. This way redefining keys is just a case
 187+ 96C2              ; of updating this table with the respective location to look up
 188+ 96C2              ; key list sequence is in table above
 189+ 96C2 99 96 9A 96  KeyboardMap             DW  Keys+KeyCode_Front        ,Keys+KeyCode_Aft          ,Keys+KeyCode_Left         ,Keys+KeyCode_Right        ,Keys+KeyCode_RollLeft
 189+ 96C6 9B 96 9C 96
 189+ 96CA A4 96
 190+ 96CC A3 96 94 96                          DW  Keys+KeyCode_RollRight    ,Keys+KeyCode_Dive         ,Keys+KeyCode_Climb        ,Keys+KeyCode_Accellerate  ,Keys+KeyCode_Decellerate
 190+ 96D0 8F 96 95 96
 190+ 96D4 90 96
 191+ 96D6 AD 96 98 96                          DW  Keys+KeyCode_FireLaser    ,Keys+KeyCode_TargetMissle ,Keys+KeyCode_FireMissile  ,Keys+KeyCode_UnarmMissile ,Keys+KeyCode_ECM
 191+ 96DA 92 96 97 96
 191+ 96DE 96 96
 192+ 96E0 A6 96 8A 96                          DW  Keys+KeyCode_EnergyBomb   ,Keys+KeyCode_EscapePod    ,Keys+KeyCode_DockingComp  ,Keys+KeyCode_Hyperspace   ,Keys+KeyCode_Distance
 192+ 96E4 B0 96 AC 96
 192+ 96E8 AB 96
 193+ 96EA 93 96 A9 96                          DW  Keys+KeyCode_HomeCursor   ,Keys+KeyCode_Launch       ,Keys+KeyCode_BuyCargo     ,Keys+KeyCode_SellCargo    ,Keys+KeyCode_Equip
 193+ 96EE B1 96 8E 96
 193+ 96F2 8D 96
 194+ 96F4 9D 96 A2 96                          DW  Keys+KeyCode_GalacticChrt ,Keys+KeyCode_LocalChart   ,Keys+KeyCode_MarketPrices ,Keys+KeyCode_Status       ,Keys+KeyCode_Inventory
 194+ 96F8 A1 96 A0 96
 194+ 96FC 9F 96
 195+ 96FE 8B 96 A4 96                          DW  Keys+KeyCode_GameSkip     ,Keys+KeyCode_Save         ,Keys+KeyCode_Freeze       ,Keys+KeyCode_Resume       ,Keys+KeyCode_Recentre
 195+ 9702 B1 96 A9 96
 195+ 9706 91 96
 196+ 9708 A7 96 9E 96                          DW  Keys+KeyCode_Quit         ,Keys+KeyCode_PlanetData   ,Keys+KeyCode_CursorUp     ,Keys+KeyCode_CursorDown   ,Keys+KeyCode_Find
 196+ 970C 94 96 8F 96
 196+ 9710 92 96
 197+ 9712 A7 96 B0 96                          DW  Keys+KeyCode_PressedYes   ,Keys+KeyCode_PressedNo
 198+ 9716
 199+ 9716 23 5A 58 43  ASCII_Map:              DB "#","Z","X","C","V"
 199+ 971A 56
 200+ 971B 41 53 44 46                          DB "A","S","D","F","G"
 200+ 971F 47
 201+ 9720 51 57 45 52                          DB "Q","W","E","R","T"
 201+ 9724 54
 202+ 9725 31 32 33 34                          DB "1","2","3","4","5"
 202+ 9729 35
 203+ 972A 30 39 38 37                          DB "0","9","8","7","6"
 203+ 972E 36
 204+ 972F 50 4F 49 55                          DB "P","O","I","U","Y"
 204+ 9733 59
 205+ 9734 3E 4C 4B 4A                          DB ">","L","K","J","H"
 205+ 9738 48
 206+ 9739 20 5E 4D 4E                          DB " ","^","M","N","B"
 206+ 973D 42
 207+ 973E
 208+ 973E              ; mapping of a code to the lookup table Keyboard map. So if you are using an addr_Pressed you can then fetch from KeyboardMap the address in Keys
 209+ 973E              ; for the raw key press status
 210+ 973E              addr_Pressed_Front         equ KeyboardMap+c_Pressed_Front
 211+ 973E              addr_Pressed_Aft           equ KeyboardMap+c_Pressed_Aft
 212+ 973E              addr_Pressed_Left          equ KeyboardMap+c_Pressed_Left
 213+ 973E              addr_Pressed_Right         equ KeyboardMap+c_Pressed_Right
 214+ 973E              addr_Pressed_RollLeft      equ KeyboardMap+c_Pressed_RollLeft
 215+ 973E              addr_Pressed_RollRight     equ KeyboardMap+c_Pressed_RollRight
 216+ 973E              addr_Pressed_Dive          equ KeyboardMap+c_Pressed_Dive
 217+ 973E              addr_Pressed_Climb         equ KeyboardMap+c_Pressed_Climb
 218+ 973E              addr_Pressed_Accellerate   equ KeyboardMap+c_Pressed_Accellerate
 219+ 973E              addr_Pressed_Decellerate   equ KeyboardMap+c_Pressed_Decellerate
 220+ 973E              addr_Pressed_FireLaser     equ KeyboardMap+c_Pressed_FireLaser
 221+ 973E              addr_Pressed_TargetMissle  equ KeyboardMap+c_Pressed_TargetMissle
 222+ 973E              addr_Pressed_FireMissile   equ KeyboardMap+c_Pressed_FireMissile
 223+ 973E              addr_Pressed_UnarmMissile  equ KeyboardMap+c_Pressed_UnarmMissile
 224+ 973E              addr_Pressed_ECM           equ KeyboardMap+c_Pressed_ECM
 225+ 973E              addr_Pressed_EnergyBomb    equ KeyboardMap+c_Pressed_EnergyBomb
 226+ 973E              addr_Pressed_EscapePod     equ KeyboardMap+c_Pressed_EscapePod
 227+ 973E              addr_Pressed_DockingComp   equ KeyboardMap+c_Pressed_DockingComp
 228+ 973E              addr_Pressed_Hyperspace    equ KeyboardMap+c_Pressed_Hyperspace
 229+ 973E              addr_Pressed_Distance      equ KeyboardMap+c_Pressed_Distance
 230+ 973E              addr_Pressed_HomeCursor    equ KeyboardMap+c_Pressed_HomeCursor
 231+ 973E              addr_Pressed_Launch        equ KeyboardMap+c_Pressed_Launch
 232+ 973E              addr_Pressed_BuyCargo      equ KeyboardMap+c_Pressed_BuyCargo
 233+ 973E              addr_Pressed_SellCargo     equ KeyboardMap+c_Pressed_SellCargo
 234+ 973E              addr_Pressed_Equip         equ KeyboardMap+c_Pressed_Equip
 235+ 973E              addr_Pressed_GalacticChrt  equ KeyboardMap+c_Pressed_GalacticChrt
 236+ 973E              addr_Pressed_LocalChart    equ KeyboardMap+c_Pressed_LocalChart
 237+ 973E              addr_Pressed_MarketPrices  equ KeyboardMap+c_Pressed_MarketPrices
 238+ 973E              addr_Pressed_Status        equ KeyboardMap+c_Pressed_Status
 239+ 973E              addr_Pressed_Inventory     equ KeyboardMap+c_Pressed_Inventory
 240+ 973E              addr_Pressed_GameSkip      equ KeyboardMap+c_Pressed_GameSkip
 241+ 973E              addr_Pressed_Save          equ KeyboardMap+c_Pressed_Save
 242+ 973E              addr_Pressed_Freeze        equ KeyboardMap+c_Pressed_Freeze
 243+ 973E              addr_Pressed_Resume        equ KeyboardMap+c_Pressed_Resume
 244+ 973E              addr_Pressed_Recentre      equ KeyboardMap+c_Pressed_Recentre
 245+ 973E              addr_Pressed_Quit          equ KeyboardMap+c_Pressed_Quit
 246+ 973E              addr_Pressed_PlanetData    equ KeyboardMap+c_Pressed_PlanetData
 247+ 973E              addr_Pressed_CursorUp      equ KeyboardMap+c_Pressed_CursorUp
 248+ 973E              addr_Pressed_CursorDown    equ KeyboardMap+c_Pressed_CursorDown
 249+ 973E              addr_Pressed_Find          equ KeyboardMap+c_Pressed_Find
 250+ 973E
 251+ 973E
 252+ 973E              MIsKeyPressed:          MACRO   keyaddress, misstarget
 253+ 973E ~                                    ld      hl,(keyaddress)
 254+ 973E ~                                    ld      a,(hl)
 255+ 973E ~                                    JumpIfAIsZero   misstarget
 256+ 973E                                      ENDM
 257+ 973E
 258+ 973E 21 8A 96     init_keyboard:          ld		hl,Keys                         ; no key s are pressed by default
 259+ 9741 11 28 00                             ld		de, c_KeyBoardLen               ;
 260+ 9744 3E 00                                ld		a,0                             ;
 261+ 9746 CD 40 96                             call	memfill_dma                     ;
 262+ 9749 C9                                   ret                                     ;
 263+ 974A
 264+ 974A
 265+ 974A
 266+ 974A DD 21 B2 96  scan_keyboard:          ld		ix,RawKeys                      ; hl = table of raw IO port readings
 267+ 974E 21 BA 96                             ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 268+ 9751 0E 08                                ld		c,8                             ; 8 ports to ready
 269+ 9753 11 8A 96                             ld      de,Keys                         ; ix = table of key states from raw read
 270+ 9756 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 271+ 9757 DB FE                                in		a,($FE)							; read port to a
 272+ 9759 DD 77 00                             ld      (ix+0),a                        ; save raw scan
 273+ 975C DD 23                                inc     ix
 274+ 975E 23                                   inc		hl                              ; and ready for next read
 275+ 975F 06 05        .ProcessInputBits:      ld		b,5								; loop all bits (there are only 5 keys to a group)
 276+ 9761 1F           .ProcessBitsLoop:       rra                                     ; shit bit 0 into carry
 277+ 9762 CB 47                                bit		0,a								; is bit set
 278+ 9764 30 08                                jr      nc,.SetKeyPressed               ; low bit means it was pressed
 279+ 9766 FD 6F                                ld      iyl,a
 280+ 9768                                      ZeroA
 280+ 9768 AF          >                        xor a
 281+ 9769 C3 76 97                             jp      .SetKey
 282+ 976C 20 0B                                jr		nz,.SkipKeySet
 283+ 976E FD 6F        .SetKeyPressed:	        ld      iyl,a                           ; save current input byte
 284+ 9770 1A                                   ld      a,(de)                          ; get current keystate
 285+ 9771 FE 02                                cp      2
 286+ 9773 28 02                                jr      z,.AlreadyHeld
 287+ 9775 3C                                   inc     a                               ; and increment by 1 as its moved from previous state
 288+ 9776 12           .SetKey:                ld		(de),a				  	        ; save key Pressed state
 289+ 9777 FD 7D        .AlreadyHeld:           ld      a,iyl                           ; and retrieve the current input byte
 290+ 9779 13           .SkipKeySet:	        inc		de								; move to next key
 291+ 977A 10 E5                                djnz	.ProcessBitsLoop				; Process all key group bits
 292+ 977C 0D                                   dec     c                               ; thats one row of bits all processed
 293+ 977D 20 D7                                jr      nz,.PortReadLoop				; Read next input port
 294+ 977F C9                                   ret
 295+ 9780
 296+ 9780
 297+ 9780
 298+ 9780              GetKeyStateAddressDE:   MACRO
 299+ 9780 ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 300+ 9780 ~                                    add     hl,a
 301+ 9780 ~                                    ld      e,(hl)
 302+ 9780 ~                                    inc     hl
 303+ 9780 ~                                    ld      d,(hl)                          ; now de = address in keypress list
 304+ 9780                                      ENDM
 305+ 9780
 306+ 9780              GetKeyStateAddressHL:   MACRO
 307+ 9780 ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 308+ 9780 ~                                    add     hl,a
 309+ 9780 ~                                    ld      a,(hl)
 310+ 9780 ~                                    inc     hl
 311+ 9780 ~                                    ld      h,(hl)                          ; now hl = address in keypress list
 312+ 9780 ~                                    ld      l,a
 313+ 9780                                      ENDM
 314+ 9780
 315+ 9780
 316+ 9780              ;;old debug codeCurrentX            DB 0
 317+ 9780              ;;old debug codeCurrentY            DB 0
 318+ 9780              ;;old debug code
 319+ 9780              ;;old debug codedisplayKeyStatus:       xor         a
 320+ 9780              ;;old debug code                        ld          (CurrentX),a
 321+ 9780              ;;old debug code                        ld          hl,RawKeys
 322+ 9780              ;;old debug code                        ld          a,(hl)
 323+ 9780              ;;old debug code                        and         %00011111
 324+ 9780              ;;old debug code                        ld          b,5
 325+ 9780              ;;old debug code.displayLoop:           push        bc,,hl
 326+ 9780              ;;old debug code                        rra
 327+ 9780              ;;old debug code                        jr          c,.displayNoPress
 328+ 9780              ;;old debug code.displayPress:          push        af
 329+ 9780              ;;old debug code                        ld          a,(CurrentX)
 330+ 9780              ;;old debug code                        ld          e,a
 331+ 9780              ;;old debug code                        ld          a,(CurrentY)
 332+ 9780              ;;old debug code                        ld          d,a
 333+ 9780              ;;old debug code                        ld          a,'*'
 334+ 9780              ;;old debug code                        MMUSelectLayer1
 335+ 9780              ;;old debug code                        call        l1_print_char
 336+ 9780              ;;old debug code                        ld          a,(CurrentX)
 337+ 9780              ;;old debug code                        add         a,8
 338+ 9780              ;;old debug code                        ld          (CurrentX),a
 339+ 9780              ;;old debug code                        pop         af
 340+ 9780              ;;old debug code                        pop         bc,,hl
 341+ 9780              ;;old debug code                        djnz        .displayLoop
 342+ 9780              ;;old debug code                        ret
 343+ 9780              ;;old debug code.displayNoPress:        push        af
 344+ 9780              ;;old debug code                        ld          a,(CurrentX)
 345+ 9780              ;;old debug code                        ld          e,a
 346+ 9780              ;;old debug code                        ld          a,(CurrentY)
 347+ 9780              ;;old debug code                        ld          d,a
 348+ 9780              ;;old debug code                        ld          a,'O'
 349+ 9780              ;;old debug code                        MMUSelectLayer1
 350+ 9780              ;;old debug code                        call        l1_print_char
 351+ 9780              ;;old debug code                        ld          a,(CurrentX)
 352+ 9780              ;;old debug code                        add         a,8
 353+ 9780              ;;old debug code                        ld          (CurrentX),a
 354+ 9780              ;;old debug code                        pop         af
 355+ 9780              ;;old debug code                        pop         bc,,hl
 356+ 9780              ;;old debug code                        djnz        .displayLoop
 357+ 9780              ;;old debug code                        ret
 358+ 9780              ;;old debug code
 359+ 9780              ;;old debug codedisplayDownStatus:      ld  a,(Keys+      KeyCode_CursorUp)
 360+ 9780              ;;old debug code                        cp  0
 361+ 9780              ;;old debug code                        jr      z,.displayNoUp
 362+ 9780              ;;old debug code                        cp  1
 363+ 9780              ;;old debug code                        jr      z,.displayUp
 364+ 9780              ;;old debug code.displayHeld:           ld      de,8*15
 365+ 9780              ;;old debug code                        ld      a,"*"
 366+ 9780              ;;old debug code                        MMUSelectLayer1
 367+ 9780              ;;old debug code                        call        l1_print_char
 368+ 9780              ;;old debug code                        ret
 369+ 9780              ;;old debug code.displayUp:             ld      de,8*15
 370+ 9780              ;;old debug code                        ld      a,"+"
 371+ 9780              ;;old debug code                        MMUSelectLayer1
 372+ 9780              ;;old debug code                        call        l1_print_char
 373+ 9780              ;;old debug code                        ret
 374+ 9780              ;;old debug code.displayNoUp:             ld      de,8*15
 375+ 9780              ;;old debug code                        ld      a,"O"
 376+ 9780              ;;old debug code                        MMUSelectLayer1
 377+ 9780              ;;old debug code                        call        l1_print_char
 378+ 9780              ;;old debug code                        ret
 379+ 9780              ;;old debug code
 380+ 9780
 381+ 9780
 382+ 9780              ; call with a = c_Pressed key, will then read mapping does this with keyboard scan, waits until key gets to state 1, if it was already held then#
 383+ 9780              ; it will have to be let go to reset of 0 and scan again
 384+ 9780              ; Deprecated as not used as yet
 385+ 9780              ;;;;;;wait_for_key_a_press:   GetKeyStateAddressHL
 386+ 9780              ;;;;;;                        push    hl
 387+ 9780              ;;;;;;.wait_loop:             call    scan_keyboard
 388+ 9780              ;;;;;;                        pop     hl                              ; get key address into hl
 389+ 9780              ;;;;;;                        push    hl
 390+ 9780              ;;;;;;                        ld      a,(hl)
 391+ 9780              ;;;;;;                        JumpIfANENusng  1,.wait_loop             ; will also loop if held down when entering this routine
 392+ 9780              ;;;;;;                        pop     hl                              ; tidy up rogue push, less t states than detecting if we want to push or not
 393+ 9780              ;;;;;;                        ret
 394+ 9780              ;;;;;;; call with a = c_Pressed key, will then read mapping does this with keyboard scan waits until key gets to state 2
 395+ 9780              ;;;;;;wait_for_key_a_held:    GetKeyStateAddressDE
 396+ 9780              ;;;;;;                        push    hl
 397+ 9780              ;;;;;;.wait_loop:             call    scan_keyboard
 398+ 9780              ;;;;;;                        pop     hl
 399+ 9780              ;;;;;;                        push    hl
 400+ 9780              ;;;;;;                        ld      a,(hl)
 401+ 9780              ;;;;;;                        JumpIfALTNusng  2, .wait_loop
 402+ 9780              ;;;;;;                        pop     hl
 403+ 9780              ;;;;;;                        ret
 404+ 9780
 405+ 9780              ; Gets the current keystate of the c_Pressed Key in a register
 406+ 9780              get_key_a_state:        GetKeyStateAddressHL                    ; reads a mapped key and sets a to key staus, e.g. 0 1 or >=2 DOES NOT SCAN KEYBOARD
 406+ 9780 21 C2 96    >                        ld      hl,KeyboardMap                  ; work our address to read from
 406+ 9783 ED 31       >                        add     hl,a
 406+ 9785 7E          >                        ld      a,(hl)
 406+ 9786 23          >                        inc     hl
 406+ 9787 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 406+ 9788 6F          >                        ld      l,a
 407+ 9789 7E                                   ld      a,(hl)                          ; a = keystate
 408+ 978A C9                                   ret
 409+ 978B
 410+ 978B              ; sets they keystate of c pressed key in a register to 1 (pressed)
 411+ 978B              force_key_press:        GetKeyStateAddressHL                    ; read key locations
 411+ 978B 21 C2 96    >                        ld      hl,KeyboardMap                  ; work our address to read from
 411+ 978E ED 31       >                        add     hl,a
 411+ 9790 7E          >                        ld      a,(hl)
 411+ 9791 23          >                        inc     hl
 411+ 9792 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 411+ 9793 6F          >                        ld      l,a
 412+ 9794 3E 01                                ld      a,1
 413+ 9796 77                                   ld      (hl),a
 414+ 9797 C9                                   ret
 415+ 9798
 416+ 9798              is_key_up_state:        GetKeyStateAddressHL
 416+ 9798 21 C2 96    >                        ld      hl,KeyboardMap                  ; work our address to read from
 416+ 979B ED 31       >                        add     hl,a
 416+ 979D 7E          >                        ld      a,(hl)
 416+ 979E 23          >                        inc     hl
 416+ 979F 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 416+ 97A0 6F          >                        ld      l,a
 417+ 97A1 7E                                   ld      a,(hl)
 418+ 97A2 FE 00                                cp      0
 419+ 97A4 C9                                   ret
 420+ 97A5
 421+ 97A5              ; returns z is set if c_ key is pressed
 422+ 97A5              is_key_pressed:         GetKeyStateAddressHL
 422+ 97A5 21 C2 96    >                        ld      hl,KeyboardMap                  ; work our address to read from
 422+ 97A8 ED 31       >                        add     hl,a
 422+ 97AA 7E          >                        ld      a,(hl)
 422+ 97AB 23          >                        inc     hl
 422+ 97AC 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 422+ 97AD 6F          >                        ld      l,a
 423+ 97AE 7E                                   ld      a,(hl)                          ; a = keystate
 424+ 97AF FE 01                                cp      1                               ; we cant just test bit 0 as this may have been held long
 425+ 97B1 C9                                   ret
 426+ 97B2
 427+ 97B2              ; returns nz is set if c_ key is held, if key was held then keystate would be 2 or 3, i.e. bit 1 set
 428+ 97B2              is_key_held:            GetKeyStateAddressHL
 428+ 97B2 21 C2 96    >                        ld      hl,KeyboardMap                  ; work our address to read from
 428+ 97B5 ED 31       >                        add     hl,a
 428+ 97B7 7E          >                        ld      a,(hl)
 428+ 97B8 23          >                        inc     hl
 428+ 97B9 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 428+ 97BA 6F          >                        ld      l,a
 429+ 97BB 7E                                   ld      a,(hl)                          ; a = keystate
 430+ 97BC E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 431+ 97BE C9                                   ret
 432+ 97BF
 433+ 97BF              ; checks to see if any key is pressed in the key table
 434+ 97BF 21 8A 96     is_any_key_pressed:     ld      hl,Keys
 435+ 97C2 01 28 00                             ld      bc,40
 436+ 97C5 3E 01                                ld      a,1
 437+ 97C7 ED B1                                cpir                                    ; search for the value 1
 438+ 97C9 28 03                                jr      z,.KeyPressed                   ; if a key was pressed then handle press
 439+ 97CB                                      SetAFalse
 439+ 97CB 3E FF       >                        ld      a,$FF
 440+ 97CD C9                                   ret
 441+ 97CE 3E 27        .KeyPressed:            ld      a,39                            ; so c will be how many keys still to scan
 442+ 97D0 91                                   sub     c                               ; so a = 40 - c to get to result
 443+ 97D1 C9                                   ret
 444+ 97D2
 445+ 97D2 21 8A 96     is_any_key_held:        ld      hl,Keys
 446+ 97D5 06 28                                ld      b,40
 447+ 97D7 0E 00                                ld      c,0
 448+ 97D9 7E           .KeyReadLoop:           ld      a,(hl)
 449+ 97DA E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 450+ 97DC C2 E6 97                             jp      nz,.KeyPressed
 451+ 97DF 23                                   inc     hl
 452+ 97E0 0C                                   inc     c
 453+ 97E1 10 F6                                djnz    .KeyReadLoop
 454+ 97E3                                      SetAFalse
 454+ 97E3 3E FF       >                        ld      a,$FF
 455+ 97E5 C9                                   ret
 456+ 97E6 79           .KeyPressed:            ld      a,c
 457+ 97E7 C9                                   ret
 458+ 97E8
 459+ 97E8
 460+ 97E8 00 00 00...  InputString             DS  30              ; used for a 30 character input buffer
 461+ 9806 00                                   DB  0               ; end of string marker as a safety
 462+ 9807 00           InputCursor             DB  0
 463+ 9808 00           EnterPressed            DB  0               ; zero notpressed FF pressed
 464+ 9809 00           InputChanged            DB  0
 465+ 980A              InputLimit              EQU 20
 466+ 980A
 467+ 980A 21 E8 97     keyboard_copy_input_to_de:  ld      hl,InputString
 468+ 980D 3A 07 98                                 ld      a,(InputCursor)
 469+ 9810 FE 00                                    cp      0
 470+ 9812 28 05                                    jr      z,.NoString
 471+ 9814 4F                                       ld      c,a
 472+ 9815 06 00                                    ld      b,0
 473+ 9817 ED B0                                    ldir
 474+ 9819 3E 00        .NoString                   ld      a,0
 475+ 981B 12                                       ld      (de),a
 476+ 981C C9                                       ret
 477+ 981D
 478+ 981D AF           initInputText:          xor     a
 479+ 981E 32 07 98                             ld      (InputCursor),a
 480+ 9821                                      SetMemFalse EnterPressed
 480+ 9821 3E FF       >                        ld      a,$FF
 480+ 9823 32 08 98    >                        ld      (EnterPressed),a
 481+ 9826                                      SetMemFalse InputChanged
 481+ 9826 3E FF       >                        ld      a,$FF
 481+ 9828 32 09 98    >                        ld      (InputChanged),a
 482+ 982B 21 E8 97                             ld      hl,InputString
 483+ 982E 06 1E                                ld      b,30
 484+ 9830 77           .wipeloop:              ld      (hl),a
 485+ 9831 23                                   inc     hl
 486+ 9832 10 FC                                djnz    .wipeloop
 487+ 9834 C9                                   ret
 488+ 9835
 489+ 9835              InputName:              SetMemFalse InputChanged
 489+ 9835 3E FF       >                        ld      a,$FF
 489+ 9837 32 09 98    >                        ld      (InputChanged),a
 490+ 983A CD BF 97                             call    is_any_key_pressed
 491+ 983D FE FF                                cp      $FF
 492+ 983F C8                                   ret     z
 493+ 9840 4F           .KeyPressed:            ld      c,a
 494+ 9841 3A 07 98                             ld      a,(InputCursor)                 ; No key so we can now look at if we are at the end of the buffer
 495+ 9844 FE 14                                cp      InputLimit                      ; move to variable later and then cp (hl)
 496+ 9846 28 0B                                jr      z,.DeleteOrEnterOnly            ;
 497+ 9848 21 16 97                             ld      hl,ASCII_Map
 498+ 984B 79                                   ld      a,c
 499+ 984C ED 31                                add     hl,a
 500+ 984E 7E                                   ld      a,(hl)
 501+ 984F FE 41                                cp      "A"
 502+ 9851 30 0B                                jr      nc,.AlphaPressed
 503+ 9853              ; CAPS and Symbol act as delete for now
 504+ 9853 FE 20        .DeleteOrEnterOnly      cp      " "                             ; if space was  pressed (mapped to Hash in ASCII table))
 505+ 9855 28 33                                jr      z,.SpacePressed               ; for now we will ignore the shift and just assume delete
 506+ 9857 FE 3E                                cp      ">"         ; ENTER
 507+ 9859 28 19                                jr      z,.EnterPressed
 508+ 985B FE 23                                cp      "#"         ; CAPS
 509+ 985D C9                                   ret
 510+ 985E 47           .AlphaPressed:          ld      b,a
 511+ 985F 3A 07 98                             ld      a,(InputCursor)
 512+ 9862 4F                                   ld      c,a
 513+ 9863 21 E8 97                             ld      hl,InputString
 514+ 9866 ED 31                                add     hl,a
 515+ 9868 78                                   ld      a,b
 516+ 9869 70                                   ld      (hl),b
 517+ 986A 79                                   ld      a,c
 518+ 986B 21 07 98                             ld      hl,InputCursor
 519+ 986E 34                                   inc     (hl)
 520+ 986F                                      SetMemTrue InputChanged
 520+ 986F AF          >                        xor     a
 520+ 9870 32 09 98    >                        ld      (InputChanged),a
 521+ 9873 C9                                   ret
 522+ 9874 3A 07 98     .EnterPressed:          ld      a,(InputCursor)
 523+ 9877 21 E8 97                             ld      hl,InputString
 524+ 987A ED 31                                add     hl,a
 525+ 987C                                      ZeroA
 525+ 987C AF          >                        xor a
 526+ 987D 77                                   ld      (hl),a
 527+ 987E                                      SetMemTrue EnterPressed
 527+ 987E AF          >                        xor     a
 527+ 987F 32 08 98    >                        ld      (EnterPressed),a
 528+ 9882                                      SetMemTrue InputChanged
 528+ 9882 AF          >                        xor     a
 528+ 9883 32 09 98    >                        ld      (InputChanged),a
 529+ 9886 CD 3E 97                             call    init_keyboard           ; Flush keyboard status so futher inputs don't auto read the enter key as a second press
 530+ 9889 C9                                   ret
 531+ 988A 3A 07 98     .SpacePressed:          ld      a,(InputCursor)         ; Space = delete
 532+ 988D FE 00                                cp      0                       ; if input is zero length then can not delete
 533+ 988F C8                                   ret     z
 534+ 9890 3D                                   dec     a                       ; move back one and update cursor pos
 535+ 9891 32 07 98                             ld      (InputCursor),a         ;
 536+ 9894 21 E8 97                             ld      hl,InputString          ; now update end of line to null
 537+ 9897 ED 31                                add     hl,a                    ; .
 538+ 9899                                      ZeroA                           ; .
 538+ 9899 AF          >                        xor a
 539+ 989A 77                                   ld      (hl),a                  ; .
 540+ 989B                                      SetMemTrue InputChanged
 540+ 989B AF          >                        xor     a
 540+ 989C 32 09 98    >                        ld      (InputChanged),a
 541+ 989F C9                                   ret
 542+ 98A0
 543+ 98A0 AF           MovementKeyTest:        xor     a
 544+ 98A1 32 3C 9B                             ld      (CursorKeysPressed),a
 545+ 98A4 3A 5B 9A                             ld      a,(MenuIdMax)
 546+ 98A7 E6 FC                                and     $FC
 547+ 98A9 20 26                                jr      nz,CursorKeys
 548+ 98AB 2A D0 96     ClimbDiveKeys:          ld      hl,(addr_Pressed_Climb)
 549+ 98AE 7E                                   ld      a,(hl)
 550+ 98AF                                      JumpIfAIsZero ScanDiveKey
 550+ 98AF A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 550+ 98B0 CA BE 98    >                        jp	z, ScanDiveKey
 551+ 98B3 3A 3C 9B                             ld      a,(CursorKeysPressed)
 552+ 98B6 F6 80                                or      $80
 553+ 98B8 32 3C 9B                             ld      (CursorKeysPressed),a
 554+ 98BB C3 F4 98                             jp      ScanLeftKey
 555+ 98BE 2A CE 96     ScanDiveKey:            ld      hl,(addr_Pressed_Dive)
 556+ 98C1 7E                                   ld      a,(hl)
 557+ 98C2                                      JumpIfAIsZero ScanLeftKey
 557+ 98C2 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 557+ 98C3 CA F4 98    >                        jp	z, ScanLeftKey
 558+ 98C6 3A 3C 9B                             ld      a,(CursorKeysPressed)
 559+ 98C9 F6 40                                or      $40
 560+ 98CB 32 3C 9B                             ld      (CursorKeysPressed),a
 561+ 98CE C3 F4 98                             jp      ScanLeftKey
 562+ 98D1 2A 0C 97     CursorKeys:             ld      hl,(addr_Pressed_CursorUp)
 563+ 98D4 7E                                   ld      a,(hl)
 564+ 98D5                                      JumpIfAIsZero ScanCursorDownKey
 564+ 98D5 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 564+ 98D6 CA E4 98    >                        jp	z, ScanCursorDownKey
 565+ 98D9 3A 3C 9B                             ld      a,(CursorKeysPressed)
 566+ 98DC F6 80                                or      $80
 567+ 98DE 32 3C 9B                             ld      (CursorKeysPressed),a
 568+ 98E1 C3 F4 98                             jp      ScanLeftKey
 569+ 98E4 2A 0E 97     ScanCursorDownKey:      ld      hl,(addr_Pressed_CursorDown)
 570+ 98E7 7E                                   ld      a,(hl)
 571+ 98E8                                      JumpIfAIsZero ScanLeftKey
 571+ 98E8 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 571+ 98E9 CA F4 98    >                        jp	z, ScanLeftKey
 572+ 98EC 3A 3C 9B                             ld      a,(CursorKeysPressed)
 573+ 98EF F6 40                                or      $40
 574+ 98F1 32 3C 9B                             ld      (CursorKeysPressed),a
 575+ 98F4 2A CA 96     ScanLeftKey:            ld      hl,(addr_Pressed_RollLeft)
 576+ 98F7 7E                                   ld      a,(hl)
 577+ 98F8                                      JumpIfAIsZero ScanRightKey
 577+ 98F8 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 577+ 98F9 CA 05 99    >                        jp	z, ScanRightKey
 578+ 98FC 3A 3C 9B                             ld      a,(CursorKeysPressed)
 579+ 98FF F6 20                                or      $20
 580+ 9901 32 3C 9B                             ld      (CursorKeysPressed),a
 581+ 9904 C9                                   ret
 582+ 9905 2A CC 96     ScanRightKey:           ld      hl,(addr_Pressed_RollRight)
 583+ 9908 7E                                   ld      a,(hl)
 584+ 9909                                      JumpIfAIsZero ScanHomeKey
 584+ 9909 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 584+ 990A CA 16 99    >                        jp	z, ScanHomeKey
 585+ 990D 3A 3C 9B                             ld      a,(CursorKeysPressed)
 586+ 9910 F6 10                                or      $10
 587+ 9912 32 3C 9B                             ld      (CursorKeysPressed),a
 588+ 9915 C9                                   ret
 589+ 9916 2A EA 96     ScanHomeKey:            ld      hl,(addr_Pressed_HomeCursor)
 590+ 9919 7E                                   ld      a,(hl)
 591+ 991A                                      JumpIfAIsZero ScanRecentreKey
 591+ 991A A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 591+ 991B CA 27 99    >                        jp	z, ScanRecentreKey
 592+ 991E 3A 3C 9B                             ld      a,(CursorKeysPressed)
 593+ 9921 F6 08                                or      $08
 594+ 9923 32 3C 9B                             ld      (CursorKeysPressed),a
 595+ 9926 C9                                   ret
 596+ 9927 2A 06 97     ScanRecentreKey:        ld      hl,(addr_Pressed_Recentre)
 597+ 992A 7E                                   ld      a,(hl)
 598+ 992B                                      ReturnIfAIsZero
 598+ 992B A7          >                        and     a
 598+ 992C C8          >                        ret     z
 599+ 992D 3A 3C 9B                             ld      a,(CursorKeysPressed)
 600+ 9930 F6 04                                or      $04
 601+ 9932 32 3C 9B                             ld      (CursorKeysPressed),a
 602+ 9935 C9                                   ret
 603+ 9936
 604+ 9936
# file closed: ./Hardware/keyboard.asm
1152  9936
1153  9936                  INCLUDE "./Variables/constant_equates.asm"
# file opened: ./Variables/constant_equates.asm
   1+ 9936              ;Contants
   2+ 9936
   3+ 9936              SignMask8Bit		equ %01111111
   4+ 9936              SignMask16Bit		equ %0111111111111111
   5+ 9936              SignOnly8Bit		equ $80
   6+ 9936              SignOnly16Bit		equ $8000
   7+ 9936
   8+ 9936              Bit7Only            equ %10000000
   9+ 9936              Bit6Only            equ %01000000
  10+ 9936              Bit5Only            equ %00100000
  11+ 9936              Bit4Only            equ %00010000
  12+ 9936              Bit3Only            equ %00001000
  13+ 9936              Bit2Only            equ %00000100
  14+ 9936              Bit1Only            equ %00000010
  15+ 9936              Bit0Only            equ %00000001
  16+ 9936              Bit7Clear           equ %01111111
  17+ 9936              Bit6Clear           equ %10111111
  18+ 9936              Bit5Clear           equ %11011111
  19+ 9936              Bit4Clear           equ %11101111
  20+ 9936              Bit3Clear           equ %11110111
  21+ 9936              Bit2Clear           equ %11111011
  22+ 9936              Bit1Clear           equ %11111101
  23+ 9936              Bit0Clear           equ %11111110
  24+ 9936              ConstPi				equ $80
  25+ 9936              ConstNorm           equ 197
  26+ 9936
  27+ 9936              ;Text Tokens
  28+ 9936              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
  29+ 9936              BrabenBellToken 	equ $0D
  30+ 9936              AcorToken			equ $0C
  31+ 9936
  32+ 9936              ; Intro Screen
  33+ 9936              TitleShip			equ	$8C
  34+ 9936              RotationUnity		equ $60
  35+ 9936              DBCheckCode			equ $DB
  36+ 9936              MaxVisibility		equ $1F
  37+ 9936              FarInFront			equ $C0
  38+ 9936
  39+ 9936              ; Universe Managment
  40+ 9936              ShipTypeJunk        equ 3
  41+ 9936              ShipTypeStation     equ 2
  42+ 9936              ShipTypeMissile     equ 1
  43+ 9936              ShipTypeNormal      equ 0
  44+ 9936              ShipTypeText        equ 253
  45+ 9936              ShipTypeDebug       equ 254
  46+ 9936              ShipTypeEmpty       equ 255
  47+ 9936              ; TacticsControl
  48+ 9936              ShipIsTrader        equ Bit0Only   ; Trader flag  80% are peaceful 20% also have Bounty Hunter flag
  49+ 9936              ShipIsBountyHunter  equ Bit1Only   ;
  50+ 9936              ShipIsHostile       equ Bit2Only   ;
  51+ 9936              ShipNotHostile      equ Bit2Clear   ;
  52+ 9936              ShipIsPirate        equ Bit3Only   ;
  53+ 9936              ShipIsDocking       equ Bit4Only   ;
  54+ 9936              ShipIsBystander     equ Bit5Only   ;
  55+ 9936              ShipIsCop           equ Bit6Only   ;
  56+ 9936              ShipIsScoopDockEsc  equ Bit7Only   ;
  57+ 9936              ShipAIEnabled       equ Bit7Only   ;
  58+ 9936              ShipExploding       equ Bit5Only
  59+ 9936              ShipKilled          equ Bit7Clear
  60+ 9936
  61+ 9936              ; UniverseAIControl
  62+ 9936              ShipCanAnger        equ %00000001
  63+ 9936
  64+ 9936
  65+ 9936              ShipMaxDistance     equ 192
  66+ 9936              HyperSpaceTimers    equ $0B0B
  67+ 9936
  68+ 9936
  69+ 9936              MaxNumberOfStars	equ 11
  70+ 9936              ConsoleRefreshInterval  equ 4
  71+ 9936
  72+ 9936              ShipTypeSize		equ	32 			;??????? just a guess for now
  73+ 9936              ShipSST				equ 4			; its a space station
  74+ 9936              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
  75+ 9936              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
  76+ 9936              ShipCountMax		equ	2			; For now just 2 ships to debug
  77+ 9936              LineLimitPerShip	equ 70			; Max lines per ship
  78+ 9936              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
  79+ 9936              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
  80+ 9936              PlayerDocked		equ	$FF
  81+ 9936
  82+ 9936              ; Memory page managment	(Refers to a memory slot as a place to access data)
  83+ 9936              ShipDataSlot		equ	6			; this may move into rom swap out space later
  84+ 9936              UniverseObjectSlot	equ	7
  85+ 9936
  86+ 9936              KeyForwardsView		equ	$20
  87+ 9936              ; Game specific equates
  88+ 9936              MissileDropHeight   equ 5           ; how far the missile is ejected on launch in y axis
  89+ 9936
  90+ 9936              ;...Game Colour Mapping
  91+ 9936              L2DustColour        equ L2ColourGREY_1
  92+ 9936              L2SunScannerBright  equ 252
  93+ 9936              L2SunScanner        equ 180
  94+ 9936
  95+ 9936
  96+ 9936              ; Ship Data
  97+ 9936              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
  98+ 9936              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
  99+ 9936              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
 100+ 9936              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
 101+ 9936              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
 102+ 9936              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
 103+ 9936              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
 104+ 9936              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
 105+ 9936              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
 106+ 9936              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
 107+ 9936              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
 108+ 9936              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
 109+ 9936              ;;;;00 00			 EQUW 0     \ type 12 is       Python
 110+ 9936              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
 111+ 9936              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
 112+ 9936              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
 113+ 9936              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
 114+ 9936              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
 115+ 9936              ;;;;00 00			 EQUW 0     \ type 18 is
 116+ 9936              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
 117+ 9936              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
 118+ 9936              ;;;;00 00			 EQUW 0     \ type 21 is
 119+ 9936              ;;;;00 00			 EQUW 0     \ type 22 is
 120+ 9936              ;;;;00 00			 EQUW 0     \ type 23 is
 121+ 9936              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
 122+ 9936              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
 123+ 9936              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
 124+ 9936              ;;;;00 00			 EQUW 0     \ type 27 is
 125+ 9936              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
 126+ 9936              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
 127+ 9936              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
 128+ 9936              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
 129+ 9936              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
 130+ 9936              ;;;;			\ NEWB examples
 131+ 9936              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
 132+ 9936              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
 133+ 9936              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
 134+ 9936              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
 135+ 9936              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
 136+ 9936
# file closed: ./Variables/constant_equates.asm
1154  9936                  INCLUDE "./Variables/general_variables.asm"
# file opened: ./Variables/general_variables.asm
   1+ 9936
   2+ 9936
   3+ 9936 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
   4+ 9938 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
   5+ 993A              ; Variables to simulate 6502 registers until code fixed
   6+ 993A              ; These must be here in this order as reading Y and X can then be a 16 bit read
   7+ 993A 00           regX		DB	0               ; using 16 bit read into BC this would go into C
   8+ 993B 00           regY		DB	0               ; using 16 bit read into BC this would go into B
   9+ 993C 00           regA		DB	0
  10+ 993D
  11+ 993D
  12+ 993D 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
  13+ 993E 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
  14+ 9940 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
  15+ 9942
  16+ 9942
  17+ 9942
  18+ 9942              ;XX16		DS	16				; 16 byte Matrix
  19+ 9942
  20+ 9942              P0INWK							; page 0 & 46
  21+ 9942              p0INWK31						; page 0 & 65
  22+ 9942              P0INWK36						; PAGE 0 &6A
  23+ 9942
  24+ 9942 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
  25+ 9943              LastNormalVisible	equ	XX4
  26+ 9943              varXX4              equ XX4
  27+ 9943
  28+ 9943
  29+ 9943
  30+ 9943 00           PATG		DB	0				; 6502 &03C9
  31+ 9944 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
  32+ 9946
  33+ 9946
  34+ 9946              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
  35+ 9946              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &5600 XX21-1,Y
  36+ 9946
  37+ 9946              ; Present System Variables
  38+ 9946
  39+ 9946 2B           RandomSeed				DB	43			; 00 DEBUG JUST SOME START VALUES
  40+ 9947 20           RandomSeed1				DB	32	; 01
  41+ 9948 0C           RandomSeed2				DB	12			; 02
  42+ 9949 42           RandomSeed3				DB	66			; 03
  43+ 994A
  44+ 994A 00           varT1					DB	0				; 06
  45+ 994B 00           SClo					DB 0				; 07
  46+ 994C 00           SChi					DB 0				; 08
  47+ 994D 00           varP					DB 0 				; 10	XX16+7
  48+ 994E 00           varPhi					DB 0 				; 11	XX16+8
  49+ 994F 00           varPhi2					DB 0 				; 12	XX16+9
  50+ 9950              varPp1                  equ varPhi
  51+ 9950              varPp2                  equ varPhi2
  52+ 9950 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
  53+ 9951 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
  54+ 9952              UnivPointer				equ	UnivPointerLo
  55+ 9952 00           varV					DB 0				; 22                          XX0+4
  56+ 9953 00           varVHi					DB 0				; 23                          XX0+5
  57+ 9954 00           varXXlo                 DB 0                ; 24
  58+ 9955 00           varXXHi                 DB 0                ; 25
  59+ 9956              varXX					equ	varXXlo
  60+ 9956 00           YYlo                    DB 0                ; 26
  61+ 9957 00           YYHi                    DB 0                ; 27
  62+ 9958              varYY					equ	YYlo
  63+ 9958              											;	28
  64+ 9958              											;	29
  65+ 9958              ;PlayerShipPositionData - Must be contiguous for setup
  66+ 9958 00           BETA 					DB	0               ; 2A        (pitch done)
  67+ 9959 00           JSTY                    DB  0               ; Joystick analog
  68+ 995A 00           BET1 					DB	0               ; 2B        lower7 magnitude
  69+ 995B 00           BET2                    DB  0               ;            climb sign
  70+ 995C 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
  71+ 995D 1F           BET1MAXC                DB  31              ; max climb
  72+ 995E E1           BET1MAXD                DB  -31             ; max dive
  73+ 995F 00           XC						DB	0               ; 2C
  74+ 9960 00           YC						DB 	0               ; 2D
  75+ 9961              ;... ECM logic. If another ship adds ECM then we just set the loop A and B to starting values so they overlap
  76+ 9961 00           ECMActive				DB 	0				; 30		ECM Active flag
  77+ 9962 00           ECMLoopA                DB  0
  78+ 9963 00           ECMLoopB                DB  0
  79+ 9964 00 00        JSTX                    DW  0               ;           Joystick analog value
  80+ 9966 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
  81+ 9967 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude Also Apha
  82+ 9968 00           ALP2					DB  0				; 32		ALP2	Roll Sign
  83+ 9969 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
  84+ 996A 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
  85+ 996B E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
  86+ 996C
  87+ 996C
  88+ 996C
  89+ 996C              MAXMESSAGES             EQU 5
  90+ 996C              MESSAGETIMELIMIT        EQU 20
  91+ 996C              MESSAGESIZE             EQU 33
  92+ 996C              MESSAGELINE             EQU $0001
  93+ 996C
  94+ 996C 00           MessageCount            DB  0                ; used for enquing messages later
  95+ 996D 00           MessageCurrent          DB  0
  96+ 996E 05 00        MessageIndex            DW  MAXMESSAGES
  97+ 9970 00 00 00...  MessageQueue            DS  MAXMESSAGES * MESSAGESIZE
  98+ 9A15 05           MessageTimeout          DB  MAXMESSAGES
  99+ 9A16 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
 100+ 9A3B
 101+ 9A3B              ; MOVED TO Universe XX19					DB	0				; page 0 &67
 102+ 9A3B              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
 103+ 9A3B              ;DEFUNCT EQUATE NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
 104+ 9A3B 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
 105+ 9A3C              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
 106+ 9A3C
 107+ 9A3C
 108+ 9A3C 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
 109+ 9A41              											;	6D		QQ15+1
 110+ 9A41              											;	6E		QQ15+2
 111+ 9A41              											;	6F		QQ15+3
 112+ 9A41              											;	70		QQ15+4
 113+ 9A41              											;	71		QQ15+5
 114+ 9A41 00           QQ17					DB	0				;   72
 115+ 9A42 00           XX18xlo                 DB  0               ;	72		XX18   xlo
 116+ 9A43 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
 117+ 9A44 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
 118+ 9A45 00           XX18ylo                 DB  0               ;	75		XX18   ylo
 119+ 9A46 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
 120+ 9A47 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
 121+ 9A48 00           XX18zlo                 DB  0               ;	78		XX18   zlo
 122+ 9A49 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
 123+ 9A4A 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
 124+ 9A4B
 125+ 9A4B 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
 126+ 9A4C 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
 127+ 9A4D 00           DELT4Lo					DB 	0				; 7E
 128+ 9A4E 00           DELT4Hi					DB 	0				; 7F
 129+ 9A4F              DELTA4                  equ                 DELT4Lo
 130+ 9A4F
 131+ 9A4F
 132+ 9A4F              ; Not thise must be in this order else 16 bit fetches will fail
 133+ 9A4F 00           varU                    DB  0               ;   80
 134+ 9A50 00           varQ					DB  0 				;	81
 135+ 9A51 00           varR					DB  0 				;	82
 136+ 9A52 00           varS					DB  0 				;	83
 137+ 9A53              varRS                   equ varR
 138+ 9A53
 139+ 9A53 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
 140+ 9A55
 141+ 9A55 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
 142+ 9A56 00           YSAV                    DB  0               ; 85
 143+ 9A57 00           XX17					DB	0				; 86
 144+ 9A58              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
 145+ 9A58              varXX17                 equ  XX17
 146+ 9A58 00           ScreenChanged           DB  0
 147+ 9A59 00           ScreenIndex             DB  0
 148+ 9A5A 00           InvertedYAxis           DB  0
 149+ 9A5B 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
 150+ 9A5C              											; Bit 7 Set  ShortRangeChart    $80
 151+ 9A5C              											; Bit 6 Set  Galactic Chart     $40
 152+ 9A5C              											; Bit 5 Set  Market Place       $20
 153+ 9A5C              											; Bit 4 Set  Status Screen      $10
 154+ 9A5C              											; Bit 3 Set  Display Inventory  $08
 155+ 9A5C                                                          ; Bit 2 Set  Planet Data        $04
 156+ 9A5C                                                          ; View bit combinations if the ones above not matched
 157+ 9A5C                                                          ; bits 1 0
 158+ 9A5C                                                          ;      1 1  Front view , i.e. $03
 159+ 9A5C                                                          ;      1 0  Aft View          $02
 160+ 9A5C                                                          ;      0 1  Left View         $01
 161+ 9A5C                                                          ;      0 0  Right view        $00
 162+ 9A5C              											; Bit 0 Set  Data On System
 163+ 9A5C              											; 0  Space View (Not a menu)
 164+ 9A5C 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
 165+ 9A5D 00           XX13                    DB  0               ;   89
 166+ 9A5E 00           TYPE					DB	0				; 8C used for ship type in drawing
 167+ 9A5F              ;Docked flag = 00 = in free space
 168+ 9A5F              ;              FF = Docked
 169+ 9A5F              ;              FE = transition
 170+ 9A5F              ;              FD = Setup open space and transition to not docked
 171+ 9A5F              ;              FC = Hyperspace manimation
 172+ 9A5F              ;              FB = Hyperspace complete
 173+ 9A5F 00           DockedFlag				DB	0				; 8E -
 174+ 9A60 00           GamePaused              DB  0
 175+ 9A61 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
 176+ 9A62 00           varCNT                  DB  0               ; 93
 177+ 9A63
 178+ 9A63 00           varK					DB	0				; 40
 179+ 9A64 00           varKp1					DB	0				; 41
 180+ 9A65 00           varKp2					DB	0				; 42
 181+ 9A66 00           varKp3					DB	0				; 43
 182+ 9A67
 183+ 9A67 00           varK2                   DB  0               ; 9B
 184+ 9A68 00           varK2p1                 DB  0               ; 9C K2 plus 1
 185+ 9A69 00           varK2p2                 DB  0               ; 9D K2 plus 2
 186+ 9A6A 00           varK2p3                 DB  0               ; 9E K2 plus 3
 187+ 9A6B
 188+ 9A6B 00           Point                   DB  0               ; 9F      POINT
 189+ 9A6C
 190+ 9A6C 00           varT					DB	0				; D1
 191+ 9A6D
 192+ 9A6D 00 00 00...  varVector9ByteWork      DS  9
 193+ 9A76
 194+ 9A76 00 00 00 00  varK3					DS	4				; D2
 195+ 9A7A 00           varK3p2					DB	0				; 42
 196+ 9A7B 00           varK3p3					DB	0				; 43
 197+ 9A7C              varK3p1					equ varK3+1			; D3
 198+ 9A7C 00 00 00 00  varK4					DS	4				; E0
 199+ 9A80              varK4p1					equ varK4+1			; D3
 200+ 9A80
 201+ 9A80
 202+ 9A80              ;Heap
 203+ 9A80
 204+ 9A80 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
 205+ 9A82 00 00 00...  HeapData				DS	50
 206+ 9AB4              ; Contains 				X 16 bit, Y ;MissileArmedStatus		DB	0				; 0344 MSAR   using MissileTarget, if missile is not armed tehn target is FF
 207+ 9AB4              ; TODO will need an read for a list of missiles, who they are targeting an the target current vector for AI persuit
 208+ 9AB4              ; i.e. a list of programmed missiles in universe slot list code
 209+ 9AB4 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
 210+ 9ABB              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
 211+ 9ABB              ;  #&5 Does J reverse both joystick channels
 212+ 9ABB              ;  #&4 Does Y reverse joystick Y channel			03CB
 213+ 9ABB              ;  #&2 Does X toggle startup message display ? PATG?	03C9
 214+ 9ABB              ;  #&3 Does F toggle flashing information			03CA
 215+ 9ABB              ;  #&1 Does A toggle keyboard auto-recentering ?
 216+ 9ABB              ;  #&0 Caps-lock toggles keyboard flight damping
 217+ 9ABB 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
 218+ 9ABC 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
 219+ 9ABD 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
 220+ 9ACD 00           AlienItemsAvaliability  DB	0				; 039D
 221+ 9ACE 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
 222+ 9ACF 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
 223+ 9AD1 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
 224+ 9AD2              											;
 225+ 9AD2 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
 226+ 9AD3 00           MarketPrice				DB	0				; 03AA QQ24
 227+ 9AD4 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
 228+ 9AD5 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
 229+ 9AD6 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
 230+ 9AD7 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
 231+ 9AD9              											; this is ship lines stack pointer so may be redundant with paging
 232+ 9AD9              											; LS = line stack so we will have one for now to remove later
 233+ 9AD9 00           COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
 234+ 9ADA 00           DisplayEcononmy			DB	0				; 03B8
 235+ 9ADB 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
 236+ 9ADC 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
 237+ 9ADD 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
 238+ 9ADF 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
 239+ 9AE1 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
 240+ 9AE3 00 00        DisplayRadius			DW	0
 241+ 9AE5              ; --- Used in creation of sun and planet----;
 242+ 9AE5 00           PlanetXPos              DS  1
 243+ 9AE6 00           PlanetYPos              DS  1
 244+ 9AE7 00           PlanetZPos              DS  1
 245+ 9AE8 00           PlanetType              DS  1
 246+ 9AE9 00           SunXPos                 DS  1
 247+ 9AEA 00           SunYPos                 DS  1
 248+ 9AEB 00           SunZPos                 DS  1
 249+ 9AEC              ; -- Current Missile Runbtime data
 250+ 9AEC 00           CurrentMissileBank:     DB      0                                   ; used by missile logic as local copy of missile bank number
 251+ 9AED 00 00        MissileXPos             DW      0
 252+ 9AEF 00           MissileXSgn             DB      0
 253+ 9AF0 00 00        MissileYPos             DW      0
 254+ 9AF2 00           MissileYSgn             DB      0
 255+ 9AF3 00 00        MissileZPos             DW      0
 256+ 9AF5 00           MissileZSgn             DB      0
 257+ 9AF6 00 00        CurrentTargetXpos       DS      2
 258+ 9AF8 00 00        CurrentTargetXsgn       DS      2
 259+ 9AFA 00 00        CurrentTargetYpos       DS      2
 260+ 9AFC 00 00        CurrentTargetYsgn       DS      2
 261+ 9AFE 00 00        CurrentTargetZpos       DS      2
 262+ 9B00 00 00        CurrentTargetZsgn       DS      2
 263+ 9B02 00 00        TargetVectorXpos        DS      2
 264+ 9B04 00 00        TargetVectorXsgn        DS      2
 265+ 9B06 00 00        TargetVectorYpos        DS      2
 266+ 9B08 00 00        TargetVectorYsgn        DS      2
 267+ 9B0A 00 00        TargetVectorZpos        DS      2
 268+ 9B0C 00 00        TargetVectorZsgn        DS      2
 269+ 9B0E 00           CurrentMissileBlastRange:      DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 270+ 9B0F 00           CurrentMissileBlastDamage:     DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 271+ 9B10 00           CurrentMissileDetonateRange:   DB  0                       ; TODO Initi for runtime copied in when setting up a missile, allows for proximity missiles
 272+ 9B11 00           CurrentMissileDetonateDamage:  DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 273+ 9B12
 274+ 9B12              ; --- Main Loop Data -----------------------;
 275+ 9B12 00           CurrentUniverseAI       DB  0               ; current ship unviverse slot due an AI update
 276+ 9B13 00           SelectedUniverseSlot    DB  0
 277+ 9B14 00           SetStationAngryFlag     DB  0               ; used to semaphore angry space station
 278+ 9B15 00           ShipBlastCheckCounter   DB  0
 279+ 9B16 00           InnerHyperCount			DB 	0				; 2F QQ22+1
 280+ 9B17 00           OuterHyperCount			DB 	0				; 2E QQ22
 281+ 9B18 00           EventCounter            DB  0
 282+ 9B19 00           HyperCircle             DB  0
 283+ 9B1A 00           MissJumpFlag            DB  0
 284+ 9B1B 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
 285+ 9B1C 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
 286+ 9B1D 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
 287+ 9B1E 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
 288+ 9B1F 00           CurrentMissileCheck:    DB  0               ; if > Universe Slot list then free for next missile
 289+ 9B20 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
 290+ 9B21              UniverseSlotListSize    equ	12
 291+ 9B21 00 00 00...  UniverseSlotList        DS  UniverseSlotListSize
 292+ 9B2D 00 00 00...  UniverseSlotType        DS  UniverseSlotListSize ; base type, e.g. missile, cargo etc,
 293+ 9B39              ; Probably not needed UniverseTypeCount       DS  UniverseSlotListSize
 294+ 9B39 04           ConsoleRefreshCounter   DB  ConsoleRefreshInterval ; Every 4 interations the console will update twice (once for primary and once for seconday buffer)
 295+ 9B3A 00           ConsoleRedrawFlag       DB  0
 296+ 9B3B 00           TextInputMode           DB  0
 297+ 9B3C 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
 298+ 9B3D                                                          ; 7    6    5    4     3    2        1    0
 299+ 9B3D                                                          ; Up   Down Left Right Home Recentre
 300+ 9B3D 00           FireLaserPressed        DB  0
 301+ 9B3E              ; --- Current System Data ------------------;
 302+ 9B3E 00           SpaceStationSafeZone    DB  0               ; Flag to determine if we are in safe zone
 303+ 9B3F 00           ExtraVesselsCounter     DB  0
 304+ 9B40 00           JunkCount				DB  0				; $033E
 305+ 9B41 00           AsteroidCount           DB  0               ; Not used as yet
 306+ 9B42 00           TransporterCount        DB  0
 307+ 9B43 00           CopCount                DB  0
 308+ 9B44 00           PirateCount             DB  0
 309+ 9B45              ; --- Galaxy Data --------------------------;
 310+ 9B45 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
 311+ 9B46 00 00 00...  WorkingSeeds			DS	6
 312+ 9B4C 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
 313+ 9B52 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
 314+ 9B58 00           PresentSystemX			DB	0				; System we are currently in
 315+ 9B59 00           PresentSystemY			DB  0				; System we are currently in
 316+ 9B5A 00           TargetSystemX			DB	0				; System we are targeting for jump
 317+ 9B5B 00           TargetSystemY			DB	0				; System we are targeting for jump
 318+ 9B5C 00           GovPresentSystem		DB	0				; 03AE Govenment
 319+ 9B5D 00           TekPresentSystem		DB	0				; 03AF Technology
 320+ 9B5E
 321+ 9B5E 00           CompassColor			DB	0				; 03C5
 322+ 9B5F 00           SoundToggle				DB	0				; 03C6
 323+ 9B60 00           KeyboardRecenterToggle	DB	0				; 03C8
 324+ 9B61 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
 325+ 9B62 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
 326+ 9B63 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
 327+ 9B64 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
 328+ 9B65 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
 329+ 9B66 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
 330+ 9B67
 331+ 9B67              ; Working Data
 332+ 9B67
 333+ 9B67              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
 334+ 9B67              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
 335+ 9B67              ; $0925 =	EQUW page9+37* 1
 336+ 9B67              ; $094A =	EQUW page9+37* 2
 337+ 9B67              ; $096F =	EQUW page9+37* 3
 338+ 9B67              ; $0994 =	EQUW page9+37* 4
 339+ 9B67              ; $09B9 =	EQUW page9+37* 5
 340+ 9B67              ; $09DE =	EQUW page9+37* 6
 341+ 9B67              ; $0A03 =	EQUW page9+37* 7
 342+ 9B67              ; $0A28 =	EQUW page9+37* 8
 343+ 9B67              ; $0A4D =	EQUW page9+37* 9
 344+ 9B67              ; $0A72 =	EQUW page9+37*10
 345+ 9B67              ; $0A97 =	EQUW page9+37*11
 346+ 9B67              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
 347+ 9B67
 348+ 9B67
 349+ 9B67
 350+ 9B67              ; 0b00 is start address of data to save
 351+ 9B67              ; Now MissionData VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
 352+ 9B67              											; Bit mask XXXX10XX - Thargoid plan mission
 353+ 9B67
 354+ 9B67 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
 355+ 9B68
 356+ 9B68 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
 357+ 9B6A 00 00        CommanderLoadAddress	DW	0				;0C03
 358+ 9B6C 00 00        LengthOfFile			DW	0				;0C0B
 359+ 9B6E 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
 360+ 9B70
 361+ 9B70 00 00 00...  EdgesBuffer				DS 50
 362+ 9BA2              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
 363+ 9BA2              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
 364+ 9BA2
 365+ 9BA2 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
 366+ 9BE8              ShipLineStackTop		equ $ - ShipLineStack
 367+ 9BE8
 368+ 9BE8 00 00 00...  LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
 369+ 9CA8              ; LSX vector overlaps with LSO
 370+ 9CA8 00           LSX2					DB	0				; &0EC0	    \ LSX2 bline buffer size?
 371+ 9CA9 00           LSY2					DB	0           	; &0F0E	    \ LSY2
 372+ 9CAA
 373+ 9CAA              ; Star Positions are 16 bit 3d coordinates
 374+ 9CAA 00 00 00...  varDust                 DS  MaxNumberOfStars * 6
 375+ 9CEC 00 00 00...  varDustSceen            DS  MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
 376+ 9D02 00           varStarX                DB  0
 377+ 9D03 00           varStarY                DB  0
 378+ 9D04 00 00 00...  varDustX                DS MaxNumberOfStars *2
 379+ 9D1A 00 00 00...  varDustY                DS MaxNumberOfStars *2
 380+ 9D30 00 00 00...  varDustZ                DS MaxNumberOfStars *2
 381+ 9D46              ; -- Player Runtime Data
 382+ 9D46 00           GunTemperature          DB  0
 383+ 9D47 00           CabinTemperature        DB  0
 384+ 9D48 00           PlayerForwardSheild0	DB	0 ; ?????
 385+ 9D49 00           PlayerForwardSheild1    DB	0
 386+ 9D4A 00           PlayerForwardSheild2    DB	0
 387+ 9D4B 00           ForeShield				DB	0				; 03A5
 388+ 9D4C 00           AftShield				DB	0				; 03A6
 389+ 9D4D 00           PlayerEnergy			DB	0				; 03A7
 390+ 9D4E 00           CompassX				DB	0				; 03A8
 391+ 9D4F 00           CompassY				DB	0				; 03A9
 392+ 9D50 00           MissileTarget			DB  0				; 45
 393+ 9D51 00           MissileLaunchFlag       DB  0
 394+ 9D52 00 00 00...  CommanderName           DS  15
 395+ 9D61 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
 396+ 9D62 00           BadnessStatus           DB  0
 397+ 9D63              ; need to add copy table routines
 398+ 9D63 00           CurrLaserType           DB  0               ; current view laser type, copied in from LaserType array
 399+ 9D64 00           CurrLaserDamage         DB  0               ; copied in from LaserDamagedFlag array
 400+ 9D65 00           CurrLaserPulseRate      DB  0               ; current view laser amount of pulses
 401+ 9D66 00           CurrLaserPulseOnTime    DB  0               ; how many cycles the laser is on
 402+ 9D67 00           CurrLaserPulseOffTime   DB  0               ; how many cycles the laser is on
 403+ 9D68 00           CurrLaserPulseRest      DB  0               ; current view laser delay setup between pulses
 404+ 9D69              ; Count down timers must be aligned like this to work
 405+ 9D69 00           CurrLaserPulseOnCount   DB  0               ; how many cycles the laser is on timer
 406+ 9D6A 00           CurrLaserPulseOffCount  DB  0               ; how many cycles the laser is on timer
 407+ 9D6B 00           CurrLaserPulseRestCount DB  0               ; countdown after shooting for next shot
 408+ 9D6C 00           CurrLaserPulseRateCount DB  0               ; current view laser current pulses fired
 409+ 9D6D              ;note rapidly changing views could reset these so need to consider it in an array
 410+ 9D6D
 411+ 9D6D              ; LaserType
 412+ 9D6D              ; LaserPulseRate                          ; how many pulses can be fired before long pause
 413+ 9D6D              ; LaserPulsePause                         ; time before next pulse - 0 = beam
 414+ 9D6D              ; LaserPulseRest                          ; time before pulse count resets to 0
 415+ 9D6D              ; LaserDamageOutput                       ; amount of damage for a laser hit
 416+ 9D6D              ; LaserEnergyDrain                        ; amount of energy drained by cycle
 417+ 9D6D              ; LaserHeat                               ; amount of heat generated
 418+ 9D6D              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
 419+ 9D6D              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
 420+ 9D6D              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
 421+ 9D6D              ; LaserTechLevel                          ; minimum tech level system to buy from
 422+ 9D6D
 423+ 9D6D 00           CurrLaserBurstRate      DB  0
 424+ 9D6E 00           CurrLaserBurstCount     DB  0
 425+ 9D6F 00           CurrLaserDamageOutput   DB  0
 426+ 9D70 00           CurrLaserEnergyDrain    DB  0
 427+ 9D71 00           CurrLaserHeat           DB  0
 428+ 9D72 00           CurrLaserDurability     DB  0
 429+ 9D73 00           CurrLaserDurabilityAmount DB  0
 430+ 9D74
 431+ 9D74              ; -- Input variables
 432+ 9D74 00           JoystickX				DB	0				; 034C JSTX
 433+ 9D75 00           JoystickY				DB	0				; 034D JSTY
 434+ 9D76 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
 435+ 9D77 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
 436+ 9D78
 437+ 9D78              ; -- Console drawing data
 438+ 9D78              FShieldStart            equ $8410
 439+ 9D78              AShieldStart            equ $8D10
 440+ 9D78              FuelStart               equ $9410
 441+ 9D78
 442+ 9D78              EnergyBar4Start         equ $A5D5
 443+ 9D78              EnergyBar3Start         equ $ADD5
 444+ 9D78              EnergyBar2Start         equ $B5D5
 445+ 9D78              EnergyBar1Start         equ $BDD5
 446+ 9D78              ; 70 /2 = 35 values
 447+ 9D78              ;                            0                             1                             2                             3
 448+ 9D78              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6
 449+ 9D78 01 02 02 03  FuelMapping             DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,19,20,21,21,22,23,24,25,26,27,28,30,31,31
 449+ 9D7C 04 04 05 06
 449+ 9D80 06 07 08 09
 449+ 9D84 0A 0A 0B 0C
 449+ 9D88 0D 0E 0E 0F
 449+ 9D8C 10 10 11 13
 449+ 9D90 14 15 15 16
 449+ 9D94 17 18 19 1A
 449+ 9D98 1B 1C 1E 1F
 449+ 9D9C 1F
 450+ 9D9D              SpeedoStart             equ $84D1
 451+ 9D9D              ;                            0                             1                             2                             3                             4
 452+ 9D9D              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
 453+ 9D9D 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
 453+ 9DA1 04 04 05 06
 453+ 9DA5 06 07 08 09
 453+ 9DA9 0A 0A 0B 0C
 453+ 9DAD 0D 0E 0E 0F
 453+ 9DB1 10 10 11 12
 453+ 9DB5 13 14 14 15
 453+ 9DB9 16 17 18 18
 453+ 9DBD 19 1A 1A 1B
 453+ 9DC1 1C 1C 1D 1E
 453+ 9DC5 1F
 454+ 9DC6
 455+ 9DC6              DialMiddleXPos          equ $E1
 456+ 9DC6              RollMiddle              equ $8CE0
 457+ 9DC6              PitchMiddle             equ $94E0
 458+ 9DC6
 459+ 9DC6
 460+ 9DC6
 461+ 9DC6
 462+ 9DC6
# file closed: ./Variables/general_variables.asm
1155  9DC6                  INCLUDE "./Variables/general_variablesRoutines.asm"
# file opened: ./Variables/general_variablesRoutines.asm
   1+ 9DC6              LaserDrainSystems:      DrainSystem PlayerEnergy, CurrLaserEnergyDrain
   1+ 9DC6 3A 70 9D    >                        ld      a,(CurrLaserEnergyDrain)
   1+ 9DC9 47          >                        ld      b,a
   1+ 9DCA 3A 4D 9D    >                        ld      a,(PlayerEnergy)
   1+ 9DCD 90          >                        sub     a,b
   1+ 9DCE 32 4D 9D    >                        ld      (PlayerEnergy),a
   1+ 9DD1 38 03       >                        jr      c,.ZeroSystem
   1+ 9DD3 C3 DA 9D    >                        jp      .ExitPoint
   1+ 9DD6             >.ZeroSystem:            ZeroA
   1+ 9DD6 AF          >                        xor a
   1+ 9DD7 32 4D 9D    >                        ld      (PlayerEnergy),a
   1+ 9DDA             >.ExitPoint
   2+ 9DDA                                      BoostSystem GunTemperature, CurrLaserHeat
   2+ 9DDA 3A 71 9D    >                        ld      a,(CurrLaserHeat)
   2+ 9DDD 47          >                        ld      b,a
   2+ 9DDE 3A 46 9D    >                        ld      a,(GunTemperature)
   2+ 9DE1 80          >                        add     b
   2+ 9DE2 32 46 9D    >                        ld      (GunTemperature),a
   2+ 9DE5 38 03       >                        jr      c, .MaxSystem
   2+ 9DE7 C3 EF 9D    >                        jp      .ExitPoint
   2+ 9DEA 3E FF       >.MaxSystem:             ld      a,255
   2+ 9DEC 32 46 9D    >                        ld      (GunTemperature),a
   2+ 9DEF             >.ExitPoint
   3+ 9DEF C9                                   ret
   4+ 9DF0
   5+ 9DF0
   6+ 9DF0              ResetPlayerShip:        ZeroThrottle
   6+ 9DF0 AF          >                        xor     a
   6+ 9DF1 32 4C 9A    >                        ld      (DELTA),a
   6+ 9DF4 32 4D 9A    >                        ld      (DELT4Lo),a
   6+ 9DF7 32 4E 9A    >                        ld      (DELT4Lo+1),a
   7+ 9DFA                                      ZeroPitch
   7+ 9DFA AF          >                        xor     a
   7+ 9DFB 32 5B 99    >                        ld      (BET2),a
   7+ 9DFE 32 5C 99    >                        ld      (BET2FLIP),a
   7+ 9E01 32 59 99    >                        ld      (JSTY),a
   7+ 9E04 32 58 99    >                        ld      (BETA),a
   8+ 9E07                                      ZeroRoll
   8+ 9E07 AF          >                        xor     a                              ; zero roll and climb
   8+ 9E08 32 68 99    >                        ld      (ALP2),a
   8+ 9E0B 32 69 99    >                        ld      (ALP2FLIP),a
   8+ 9E0E 32 64 99    >                        ld      (JSTX),a
   8+ 9E11 32 66 99    >                        ld      (ALPHA),a
   9+ 9E14                                      ClearMissileTarget
   9+ 9E14 AF          >                        xor     a                           ; Set missile target to FF
   9+ 9E15 3D          >                        dec     a
   9+ 9E16 32 50 9D    >                        ld      (MissileTarget),a
   9+ 9E19             >                        SetMemFalse MissileLaunchFlag
   9+ 9E19 3E FF       >                        ld      a,$FF
   9+ 9E1B 32 51 9D    >                        ld      (MissileLaunchFlag),a
  10+ 9E1E                                      ClearECM
  10+ 9E1E AF          >                        xor     a
  10+ 9E1F 32 62 99    >                        ld      (ECMLoopA),a
  10+ 9E22 32 63 99    >                        ld      (ECMLoopB),a
  11+ 9E25                                      ChargeEnergyAndShields
  11+ 9E25 3E FF       >                        ld      a,$FF
  11+ 9E27 32 4D 9D    >                        ld      (PlayerEnergy),a
  11+ 9E2A 32 4B 9D    >                        ld      (ForeShield),a
  11+ 9E2D 32 4C 9D    >                        ld      (AftShield),a
  12+ 9E30                                      ClearTemperatures
  12+ 9E30 AF          >                        xor     a
  12+ 9E31 32 47 9D    >                        ld      (CabinTemperature),a
  12+ 9E34 32 46 9D    >                        ld      (GunTemperature),a
  13+ 9E37 CD 43 9E                             call    IsLaserUseable
  14+ 9E3A                                      MMUSelectCommander
  14+ 9E3A ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
  15+ 9E3E CD F4 E2                             call    LoadLaserToCurrent
  16+ 9E41 C8                                   ret     z
  17+ 9E42
  18+ 9E42 C9                                   ret
  19+ 9E43
  20+ 9E43 3A 63 9D     IsLaserUseable:         ld      a,(CurrLaserType)
  21+ 9E46 FE FF                                cp      255
  22+ 9E48 C8                                   ret     z
  23+ 9E49 3A 64 9D                             ld      a,(CurrLaserDamage)
  24+ 9E4C FE FF                                cp      255
  25+ 9E4E C9                                   ret
  26+ 9E4F
  27+ 9E4F CD 9C 9E     InitMainLoop:           call    ClearUnivSlotList
  28+ 9E52 AF                                   xor     a
  29+ 9E53 32 12 9B                             ld      (CurrentUniverseAI),a
  30+ 9E56 32 14 9B                             ld      (SetStationAngryFlag),a
  31+ 9E59 3E 03                                ld      a,3
  32+ 9E5B 32 5B 9A                             ld      (MenuIdMax),a
  33+ 9E5E                                      SetMemFalse DockedFlag
  33+ 9E5E 3E FF       >                        ld      a,$FF
  33+ 9E60 32 5F 9A    >                        ld      (DockedFlag),a
  34+ 9E63              ;                        call    InitialiseFrontView
  35+ 9E63 CD 2D 88                             call    InitialiseCommander
  36+ 9E66                                      MMUSelectUniverseN 2
  36+ 9E66 ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
  37+ 9E6A CD 09 89                             call    SetInitialShipPosition
  38+ 9E6D              ; Initialist screen refresh
  39+ 9E6D 3E 04                                ld      a, ConsoleRefreshInterval
  40+ 9E6F 32 39 9B                             ld      (ConsoleRefreshCounter),a
  41+ 9E72                                      SetMemFalse    ConsoleRedrawFlag
  41+ 9E72 3E FF       >                        ld      a,$FF
  41+ 9E74 32 3A 9B    >                        ld      (ConsoleRedrawFlag),a
  42+ 9E77                                      MMUSelectStockTable
  42+ 9E77 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
  43+ 9E7B CD AA E0                             call    generate_stock_market
  44+ 9E7E CD 62 8E                             call    ResetMessageQueue
  45+ 9E81                                      InitEventCounter
  45+ 9E81 AF          >                        xor     a
  45+ 9E82 32 18 9B    >                        ld      (EventCounter),a
  46+ 9E85                                      ClearMissJump
  46+ 9E85 3E FF       >                        ld      a,$FF
  46+ 9E87 32 1A 9B    >                        ld      (MissJumpFlag),a
  47+ 9E8A                                      SetMemFalse TextInputMode
  47+ 9E8A 3E FF       >                        ld      a,$FF
  47+ 9E8C 32 3B 9B    >                        ld      (TextInputMode),a
  48+ 9E8F C9                                   ret
  49+ 9E90
# file closed: ./Variables/general_variablesRoutines.asm
1156  9E90
1157  9E90                  INCLUDE "./Variables/UniverseSlotRoutines.asm"
# file opened: ./Variables/UniverseSlotRoutines.asm
   1+ 9E90 AF           ClearSlotCount:         xor     a
   2+ 9E91 21 21 9B                             ld      hl,UniverseSlotList
   3+ 9E94 06 0C                                ld      b, UniverseSlotListSize ; prbably not needed + UniverseSlotTypeSize
   4+ 9E96 77           .fillLoop:              ld      (hl),a
   5+ 9E97 23                                   inc     hl
   6+ 9E98 10 FC                                djnz    .fillLoop
   7+ 9E9A C9                                   ret
   8+ 9E9B
   9+ 9E9B              ; Initialises all types to a count of 1 where there is an occupied universe slot
  10+ 9E9B              ; this needs expanding to cater for a missing type, find type and increment count (use cpir?)
  11+ 9E9B              ; DOE NOT WORK CorrectSlotCount:       call    ClearSlotCount
  12+ 9E9B              ; DOE NOT WORK                         ld      hl,UniverseSlotCount
  13+ 9E9B              ; DOE NOT WORK                         ld      de,UniverseSlotList
  14+ 9E9B              ; DOE NOT WORK                         ld      b,UniverseSlotListSize
  15+ 9E9B              ; DOE NOT WORK .fillLoop:              ld      a,(de)
  16+ 9E9B              ; DOE NOT WORK                         cp      $FF
  17+ 9E9B              ; DOE NOT WORK                         jr      z,.SkipSlot
  18+ 9E9B              ; DOE NOT WORK .CorrectSlot:           ld      (hl),a
  19+ 9E9B              ; DOE NOT WORK                         inc     hl
  20+ 9E9B              ; DOE NOT WORK                         ld      (hl),1
  21+ 9E9B              ; DOE NOT WORK                         inc     hl
  22+ 9E9B              ; DOE NOT WORK                         inc     hl
  23+ 9E9B              ; DOE NOT WORK .SkipSlot               inc     de
  24+ 9E9B              ; DOE NOT WORK                         djnz    .fillLoop
  25+ 9E9B C9                                   ret
  26+ 9E9C              ; Wipe all items
  27+ 9E9C 3E FF        ClearUnivSlotList:      ld      a,$FF
  28+ 9E9E 21 21 9B                             ld      hl,UniverseSlotList
  29+ 9EA1 06 18                                ld      b, UniverseSlotListSize * 2
  30+ 9EA3 77           .fillLoop:              ld      (hl),a
  31+ 9EA4 23                                   inc     hl
  32+ 9EA5 10 FC                                djnz    .fillLoop
  33+ 9EA7 C9                                   ret
  34+ 9EA8
  35+ 9EA8 21 21 9B     SetSlot0ToSpaceStation: ld      hl,UniverseSlotList
  36+ 9EAB 36 02                                ld      (hl),ShipTypeStation
  37+ 9EAD 21 2D 9B                             ld      hl,UniverseSlotType
  38+ 9EB0 36 02                                ld      (hl),ShipTypeStation
  39+ 9EB2 C9                                   ret
  40+ 9EB3
  41+ 9EB3 21 21 9B     SetSlotAToTypeB:        ld      hl,UniverseSlotList
  42+ 9EB6 ED 31                                add     hl,a
  43+ 9EB8 70                                   ld      (hl),b
  44+ 9EB9 C9                                   ret
  45+ 9EBA
  46+ 9EBA 21 2D 9B     SetSlotAToClassB:       ld      hl,UniverseSlotType
  47+ 9EBD ED 31                                add     hl,a
  48+ 9EBF 70                                   ld      (hl),b
  49+ 9EC0 C9                                   ret
  50+ 9EC1
  51+ 9EC1              ; Clears all except slot A, used when say restarting a space station post launch
  52+ 9EC1 57           ClearFreeSlotListSaveA: ld      d,a
  53+ 9EC2 0E 00                                ld      c,0
  54+ 9EC4 21 21 9B                             ld      hl,UniverseSlotList
  55+ 9EC7 06 18                                ld      b, UniverseSlotListSize * 2
  56+ 9EC9 79           .fillLoop:              ld      a,c
  57+ 9ECA BA                                   cp      d
  58+ 9ECB 28 03                                jr      z,.SkipSlot
  59+ 9ECD 3E FF                                ld      a,$FF
  60+ 9ECF 77                                   ld      (hl),a
  61+ 9ED0 23           .SkipSlot:              inc     hl
  62+ 9ED1 23                                   inc     hl
  63+ 9ED2 10 F5                                djnz    .fillLoop
  64+ 9ED4 C9                                   ret
  65+ 9ED5
  66+ 9ED5 21 21 9B     ClearSlotA:             ld      hl,UniverseSlotList
  67+ 9ED8 ED 31                                add     hl,a
  68+ 9EDA 36 FF                                ld      (hl),$FF
  69+ 9EDC 3E 0C                                ld      a,UniverseSlotListSize  ; move to types
  70+ 9EDE ED 31                                add     hl,a
  71+ 9EE0 36 FF                                ld      (hl),$FF
  72+ 9EE2 C9                                   ret
  73+ 9EE3              ; Space Station will always be slot 0
  74+ 9EE3
  75+ 9EE3 21 2E 9B     AreShipsPresent:        ld      hl,UniverseSlotType+1
  76+ 9EE6 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
  77+ 9EE8 7E           .NextShip:              ld      a,(hl)
  78+ 9EE9 FE 00                                cp      ShipTypeNormal
  79+ 9EEB                                      ClearCarryFlag
  79+ 9EEB B7          >                        or a
  80+ 9EEC C8                                   ret     z
  81+ 9EED 23                                   inc     hl
  82+ 9EEE 10 F8                                djnz    .NextShip
  83+ 9EF0                                      SetCarryFlag
  83+ 9EF0 37          >                        scf
  84+ 9EF1 C9                                   ret
  85+ 9EF2
  86+ 9EF2 21 21 9B     IsSpaceStationPresent:  ld      hl,UniverseSlotList
  87+ 9EF5                                      ClearCarryFlag
  87+ 9EF5 B7          >                        or a
  88+ 9EF6 7E           .SearchLoop:            ld      a,(hl)
  89+ 9EF7                                      ReturnIfAEqNusng ShipTypeStation
  89+ 9EF7 FE 02       >                        cp      ShipTypeStation
  89+ 9EF9 C8          >                        ret     z
  90+ 9EFA                                      SetCarryFlag
  90+ 9EFA 37          >                        scf
  91+ 9EFB C9                                   ret
  92+ 9EFC
  93+ 9EFC 21 21 9B     GetTypeAtSlotA:         ld      hl,UniverseSlotList
  94+ 9EFF ED 31                                add     hl,a
  95+ 9F01 7E                                   ld      a,(hl)
  96+ 9F02 C9                                   ret
  97+ 9F03
  98+ 9F03 21 22 9B     IsPlanetOrSpaceStation: ld      hl,UniverseSlotList+1
  99+ 9F06 7E                                   ld      a,(hl)
 100+ 9F07 C9                                   ret
 101+ 9F08
 102+ 9F08 21 21 9B     FindNextFreeSlotInC:    ld      hl,UniverseSlotList
 103+ 9F0B 06 0C                                ld      b, UniverseSlotListSize
 104+ 9F0D 0E 00                                ld      c, 0
 105+ 9F0F 7E           .SearchLoop:            ld      a,(hl)
 106+ 9F10                                      JumpIfAEqNusng $FF, .FoundSlot
 106+ 9F10 FE FF       >                        cp     $FF
 106+ 9F12 CA 1B 9F    >                        jp      z,.FoundSlot
 107+ 9F15 0C                                   inc     c
 108+ 9F16 23                                   inc     hl
 109+ 9F17 10 F6                                djnz    .SearchLoop
 110+ 9F19                                      SetCarryFlag
 110+ 9F19 37          >                        scf
 111+ 9F1A C9                                   ret
 112+ 9F1B              .FoundSlot:             ClearCarryFlag
 112+ 9F1B B7          >                        or a
 113+ 9F1C C9                                   ret
 114+ 9F1D
 115+ 9F1D
 116+ 9F1D CD 08 9F     FindNextFreeSlotInA:    call    FindNextFreeSlotInC
 117+ 9F20 79                                   ld      a,c
 118+ 9F21 C9                                   ret
 119+ 9F22
# file closed: ./Variables/UniverseSlotRoutines.asm
1158  9F22
1159  9F22                  INCLUDE "./Variables/EquipmentVariables.asm"
# file opened: ./Variables/EquipmentVariables.asm
   1+ 9F22 00           AutoDocking				DB	0				; $033F
   2+ 9F23 00           PlayerECM				DB	0				; $0340
   3+ 9F24 00           Laser2					DB	0				; 0343 laser Power? Not sure
   4+ 9F25 00           LaserCount				DB	0				; 0346  LASCT  \ laser count =9 for pulse, cooled off?
   5+ 9F26 00 00 00 00  Cash					DB  0,0,0,0			; 0361 - 0364 Cash now litte endian
   6+ 9F2A 19           Fuel					DB	25				; 0365  QQ14
   7+ 9F2B 46           CargoBaySize			DB	70				; 036E
   8+ 9F2C 00           CargoRunningLoad        DB  0
   9+ 9F2D 00 00 00 00  CargoTonnes             DB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   9+ 9F31 00 00 00 00
   9+ 9F35 00 00 00 00
   9+ 9F39 00 00 00 00
  10+ 9F3D              ;CargoTonnes		    DB	16,1,2,3,4,5,6,7,6,9,10,11,12,13,14,15			; 036F - 037F	QQ20
  11+ 9F3D              SlaveCargoTonnes		equ CargoTonnes+3
  12+ 9F3D              NarcoticsCargoTonnes	equ CargoTonnes+6
  13+ 9F3D              FirearmsCargoTonnes		equ CargoTonnes+10
  14+ 9F3D              ; For each view laser a localised copy of the stats
  15+ 9F3D              ; TODO - need to add code to maintain on load/save/equipment transactions
  16+ 9F3D 00 00 00 00  LaserType               DS  4               ; quick reference to laser type
  17+ 9F41 00 00 00 00  LaserDamagedFlag        DS  4               ; probabiliy out of 255 that it will no fire, 0 = good, 255 = will not fire
  18+ 9F45              ; dont need as static from table LaserPulseRate          DS  4               ; how many pulses can be fired before long pause
  19+ 9F45              ; dont need as static from table LaserPulsePause         DS  4               ; time before next pulse - 0 = beam
  20+ 9F45              ; dont need as static from table LaserPulseRest          DS  4               ; time before pulse count resets to 0
  21+ 9F45              ; dont need as static from table LaserDamageOutput       DS  4               ; amount of damage for a laser hit
  22+ 9F45              ; dont need as static from table LaserEnergyDrain        DS  4               ; amount of energy drained by cycle
  23+ 9F45              ; dont need as static from table LaserHeat               DS  4               ; amount of heat generated
  24+ 9F45              ; dont need as static from table LaserDurability         DS  4               ; probabability out of 255 that a hit on it unshielded will add random amount of damage
  25+ 9F45              ; dont need as static from table LaserDurabilityAmount   DS  4               ; max amount of damagage can be sustained in one damage hit
  26+ 9F45
  27+ 9F45
  28+ 9F45              QQ20                    equ CargoTonnes
  29+ 9F45 00 00 00...  EquipmentFitted         DS  EQ_ITEM_COUNT    ; Series of flags for if each item is fitted
  30+ 9F5F              ECMPresent				EQU EquipmentFitted + EQ_ECM				; 0380
  31+ 9F5F              EnergyBomb				EQU EquipmentFitted + EQ_ENERGY_BOMB		; 0382	Also random hyperspeace in Elite A
  32+ 9F5F              ExtraEnergyUnit			EQU EquipmentFitted + EQ_ENERGY_UNIT        ; 0383
  33+ 9F5F              DockingComputer 		EQU EquipmentFitted + EQ_DOCK_COMP    		; 0384
  34+ 9F5F              GalacticHyperDrive		EQU EquipmentFitted + EQ_GAL_DRIVE   		; 0385
  35+ 9F5F              EscapePod				EQU EquipmentFitted + EQ_ESCAPE_POD  		; 0386
  36+ 9F5F 01           FuelScoopsBarrelStatus	DB	1				; 0381
  37+ 9F60
# file closed: ./Variables/EquipmentVariables.asm
1160  9F60
1161  9F60                  INCLUDE "./Variables/random_number.asm"
# file opened: ./Variables/random_number.asm
   1+ 9F60              doRandom2:									; .DORND2	\ -> &3F85 \ Restricted for explosion dust.
   2+ 9F60              doRND2:
   3+ 9F60 A7           	and		a								; fast clear carry  leave bit0 of RAND+2 at 0.
   4+ 9F61              doRandom:									;.DORND	\ -> &3F86 \ do random, new A, X.
   5+ 9F61              ; "doRandom, Random Seed update, new value in A & B)"
   6+ 9F61 3A 46 99     doRND:                  ld		a,(RandomSeed)					; Get Seed 0
   7+ 9F64 CB 17                                rl		a								; Rotate L including carry
   8+ 9F66 4F                                   ld		c,a								; c =  double lo
   9+ 9F67 21 48 99     .AddSeed2:              ld		hl,RandomSeed2
  10+ 9F6A 8E                                   adc		a,(hl)							; RAND+2
  11+ 9F6B 32 46 99     .SaveAtoSeed:           ld		(RandomSeed),a					; and save RAND
  12+ 9F6E 08           .SaveBtoSeed2:          ex		af,af'
  13+ 9F6F 79                                   ld		a,c
  14+ 9F70 32 48 99                             ld		(RandomSeed2),a
  15+ 9F73 08                                   ex		af,af'
  16+ 9F74 3A 47 99                             ld		a,(RandomSeed1)
  17+ 9F77 4F                                   ld		c,a								; C = Seed1
  18+ 9F78 21 49 99     .AddSeed3:              ld		hl,RandomSeed3
  19+ 9F7B 8E                                   adc		a,(hl)
  20+ 9F7C 32 47 99                             ld		(RandomSeed1),a
  21+ 9F7F 08                                   ex		af,af'
  22+ 9F80 79                                   ld		a,c
  23+ 9F81 32 49 99                             ld		(RandomSeed3),a
  24+ 9F84 08                                   ex		af,af'
  25+ 9F85 C9                                   ret
  26+ 9F86
# file closed: ./Variables/random_number.asm
1162  9F86                  INCLUDE "./Variables/galaxy_seed.asm"
# file opened: ./Variables/galaxy_seed.asm
   1+ 9F86 47 41 4C 41  GALAXYSEED DB "GALAXYSEED"
   1+ 9F8A 58 59 53 45
   1+ 9F8E 45 44
   2+ 9F90 21 52 9B     copy_galaxy_to_system:  ld		hl,GalaxySeeds
   3+ 9F93 11 3C 9A                             ld		de,SystemSeed
   4+ 9F96 ED A0        copy_seed:		        ldi
   5+ 9F98 ED A0                                ldi
   6+ 9F9A ED A0                                ldi
   7+ 9F9C ED A0                                ldi
   8+ 9F9E ED A0                                ldi
   9+ 9FA0 ED A0                                ldi
  10+ 9FA2 C9                                   ret
  11+ 9FA3
  12+ 9FA3 21 3C 9A     copy_system_to_galaxy:  ld		hl,SystemSeed
  13+ 9FA6 11 52 9B                             ld		de,GalaxySeeds
  14+ 9FA9 18 EB                                jr		copy_seed
  15+ 9FAB
  16+ 9FAB 21 52 9B     copy_galaxy_to_working: ld		hl,GalaxySeeds
  17+ 9FAE 11 46 9B                             ld		de,WorkingSeeds
  18+ 9FB1 18 E3                                jr		copy_seed
  19+ 9FB3
  20+ 9FB3 21 46 9B     copy_working_to_galaxy: ld		hl,WorkingSeeds
  21+ 9FB6 11 52 9B                             ld		de,GalaxySeeds
  22+ 9FB9 18 DB                                jr		copy_seed
  23+ 9FBB
  24+ 9FBB 21 46 9B     copy_working_to_system: ld		hl,WorkingSeeds
  25+ 9FBE 11 3C 9A                             ld		de,SystemSeed
  26+ 9FC1 18 D3                                jr		copy_seed
  27+ 9FC3
  28+ 9FC3 21 3C 9A     copy_system_to_working: ld		hl,SystemSeed
  29+ 9FC6 11 46 9B                             ld		de,WorkingSeeds
  30+ 9FC9 18 CB                                jr		copy_seed
  31+ 9FCB
  32+ 9FCB              next_system_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  33+ 9FCB CD CE 9F     		call	.NextStep					; This logic means we hard code x4
  34+ 9FCE              .NextStep:
  35+ 9FCE CD D1 9F     		call	process_seed				; This logic means we hard code x2
  36+ 9FD1              process_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  37+ 9FD1 3A 3C 9A     		ld		a,(SystemSeed)				; QQ15
  38+ 9FD4 B7           		or		a							; clear carry flag
  39+ 9FD5 21 3E 9A     		ld		hl,SystemSeed+2				; hl -> qq+2
  40+ 9FD8 86           		add		a,(hl)						; a= QQ15 + QQ152
  41+ 9FD9 47           		ld		b,a							; partial sum lo
  42+ 9FDA 3A 3D 9A     		ld		a,(SystemSeed+1)
  43+ 9FDD 21 3F 9A     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  44+ 9FE0 8E           		adc		a,(hl)						; note add with carry
  45+ 9FE1 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  46+ 9FE2 3A 3E 9A     		ld		a,(SystemSeed+2)
  47+ 9FE5 32 3C 9A     		ld		(SystemSeed+0),a			; copy qq152 to qq150
  48+ 9FE8 3A 3F 9A     		ld		a,(SystemSeed+3)
  49+ 9FEB 32 3D 9A     		ld		(SystemSeed+1),a			; copy qq153 to qq151
  50+ 9FEE 3A 41 9A     		ld		a,(SystemSeed+5)
  51+ 9FF1 32 3F 9A     		ld		(SystemSeed+3),a			; copy qq155 to qq153
  52+ 9FF4 3A 40 9A     		ld		a,(SystemSeed+4)
  53+ 9FF7 32 3E 9A     		ld		(SystemSeed+2),a			; copy qq154 to qq152
  54+ 9FFA B7           		or		a
  55+ 9FFB 78           		ld		a,b
  56+ 9FFC 21 3E 9A     		ld		hl,SystemSeed+2				; hl -> qq+2
  57+ 9FFF 86           		add	    a,(hl)
  58+ A000 32 40 9A     		ld		(SystemSeed+4),a
  59+ A003 79           		ld		a,c
  60+ A004 21 3F 9A     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  61+ A007 8E           		adc		a,(hl)
  62+ A008 32 41 9A     		ld		(SystemSeed+5),a
  63+ A00B C9           		ret
  64+ A00C
  65+ A00C              next_working_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  66+ A00C CD 0F A0     		call	.NextStep					; This logic means we hard code x4
  67+ A00F              .NextStep:
  68+ A00F CD 12 A0     		call	working_seed				; This logic means we hard code x2
  69+ A012              working_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  70+ A012              ; x = a + c
  71+ A012 3A 46 9B     		ld		a,(WorkingSeeds)			; QQ15
  72+ A015 B7           		or		a							; clear carry flag
  73+ A016 21 48 9B     		ld		hl,WorkingSeeds+2			; hl -> qq+2 [c]
  74+ A019 86           		add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
  75+ A01A 47           		ld		b,a							; partial sum lo [x]
  76+ A01B              ; y = b + d	+ carry
  77+ A01B 3A 47 9B     		ld		a,(WorkingSeeds+1)          ; [b]
  78+ A01E 21 49 9B     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
  79+ A021 8E           		adc		a,(hl)						; note add with carry
  80+ A022 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  81+ A023 3A 48 9B     		ld		a,(WorkingSeeds+2)
  82+ A026 32 46 9B     		ld		(WorkingSeeds+0),a			; copy qq152 to qq150 [a] = [c]
  83+ A029 3A 49 9B     		ld		a,(WorkingSeeds+3)
  84+ A02C 32 47 9B     		ld		(WorkingSeeds+1),a			; copy qq153 to qq151 [b] = [d]
  85+ A02F 3A 4B 9B     		ld		a,(WorkingSeeds+5)
  86+ A032 32 49 9B     		ld		(WorkingSeeds+3),a			; copy qq155 to qq153 [d] = [f]
  87+ A035 3A 4A 9B     		ld		a,(WorkingSeeds+4)
  88+ A038 32 48 9B     		ld		(WorkingSeeds+2),a			; copy qq154 to qq152 [c] = [e]
  89+ A03B B7           		or		a
  90+ A03C 78           		ld		a,b
  91+ A03D 21 48 9B     		ld		hl,WorkingSeeds+2		    ; hl -> qq+2
  92+ A040 86           		add	    a,(hl)
  93+ A041 32 4A 9B     		ld		(WorkingSeeds+4),a			; e = x + [c]
  94+ A044 79           		ld		a,c
  95+ A045 21 49 9B     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 )we don't inc as it affects carry)
  96+ A048 8E           		adc		a,(hl)
  97+ A049 32 4B 9B     		ld		(WorkingSeeds+5),a			; f = y + [d] + carry
  98+ A04C C9           		ret
  99+ A04D
 100+ A04D 32           working_distX	DB 50
 101+ A04E 32           working_distY	DB 50
 102+ A04F 00           current_distY	DB 0
 103+ A050
 104+ A050 AF           find_present_system:    xor		a
 105+ A051 32 55 9A                             ld		(XSAV),a
 106+ A054 3A 3D 9A     .CounterLoop:           ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 107+ A057 4F                                   ld		c,a
 108+ A058 3A 59 9B     .calcLocaldy:           ld		a,(PresentSystemY)
 109+ A05B 47                                   ld		b,a								; so b holds Y ccord
 110+ A05C 79                                   ld		a,c
 111+ A05D 90                                   sub		b
 112+ A05E CB 7F                                bit		7,a
 113+ A060 28 02                                jr		z,.positivedy
 114+ A062 ED 44        .negativedy:            neg
 115+ A064 32 4F A0     .positivedy:            ld		(current_distY),a				; save cuirrent_dist Y as we need it maybe
 116+ A067 ED 5B 4D A0                          ld		de,(working_distX)
 117+ A06B BA                                   cp		d
 118+ A06C 30 24                                jr		nc,.toofar
 119+ A06E 3A 3F 9A     .calcLocaldx:           ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 120+ A071 4F                                   ld		c,a
 121+ A072 3A 58 9B                             ld		a,(PresentSystemX)
 122+ A075 47                                   ld		b,a								; so b holds Y ccord
 123+ A076 79                                   ld		a,c
 124+ A077 90                                   sub		b
 125+ A078 CB 7F                                bit		7,a
 126+ A07A 28 02                                jr		z,.positivedx
 127+ A07C ED 44        .negativedx:            neg
 128+ A07E 4F           .positivedx:            ld		c,a
 129+ A07F BB                                   cp		e
 130+ A080 30 10                                jr		nc,.toofar
 131+ A082 3A 4F A0     .Nearer:			    ld		a,(current_distY) 				; we have a closer system
 132+ A085 47                                   ld		b,a								; we have c to recall Y into b
 133+ A086 ED 43 4D A0                          ld		(working_distX),bc
 134+ A08A C5                                   push	bc
 135+ A08B CD C3 9F                             call 	copy_system_to_working
 136+ A08E C1                                   pop		bc
 137+ A08F 78                                   ld		a,b								;
 138+ A090 B1                                   or		c								;
 139+ A091 C8                                   ret		z								; if we have distance 0 then bang on
 140+ A092 CD CB 9F     .toofar:                call	next_system_seed
 141+ A095 3A 55 9A                             ld		a,(XSAV)
 142+ A098 3D                                   dec		a
 143+ A099 FE 00                                cp		0
 144+ A09B C8                                   ret		z
 145+ A09C 32 55 9A                             ld		(XSAV),a
 146+ A09F 18 B3                                jr		.CounterLoop
 147+ A0A1
 148+ A0A1              get_planet_data_working_seed:
 149+ A0A1 3A 47 9B     		ld		a, (WorkingSeeds+1)
 150+ A0A4 E6 07        		and		7
 151+ A0A6 32 DA 9A     		ld		(DisplayEcononmy),a
 152+ A0A9 3A 48 9B     		ld		a, (WorkingSeeds+2)
 153+ A0AC CB 3F        		srl	a
 154+ A0AE CB 3F        		srl	a
 155+ A0B0 CB 3F        		srl	a
 156+ A0B2 CB 3F        		srl	a								; c/8
 157+ A0B4 E6 07        		and		7
 158+ A0B6 32 DB 9A     		ld		(DisplayGovernment),a
 159+ A0B9 CB 3F        		srl	a
 160+ A0BB FE 00        		cp		0
 161+ A0BD 20 08        		jr		nz,.CanBeRich
 162+ A0BF              .Fedual:
 163+ A0BF 3A DA 9A     		ld		a,(DisplayEcononmy)
 164+ A0C2 F6 02        		or		2							; Adjust Eco for Anarchy and Feudal, set bit 1.
 165+ A0C4 32 DA 9A     		ld		(DisplayEcononmy),a
 166+ A0C7              .CanBeRich:
 167+ A0C7 3A DA 9A     		ld		a,(DisplayEcononmy)
 168+ A0CA EE 07        		xor		7							; flip economy so Rich is now 7
 169+ A0CC 32 DC 9A     		ld		(DisplayTekLevel),a			; Flipped Eco, EcoEOR7, Rich Ind = 7
 170+ A0CF 47           		ld		b,a
 171+ A0D0 3A 49 9B     		ld		a,(WorkingSeeds+3)
 172+ A0D3 E6 03        		and		3
 173+ A0D5 80           		add		a,b
 174+ A0D6 32 DC 9A     		ld		(DisplayTekLevel),a			; Tek Level += seed d & 3
 175+ A0D9 3A DB 9A     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 176+ A0DC CB 3F        		srl		a 							; gov/2
 177+ A0DE 47           		ld		b,a
 178+ A0DF 3A DC 9A     		ld		a,(DisplayTekLevel)
 179+ A0E2 80           		add		a,b
 180+ A0E3 32 DC 9A     		ld		(DisplayTekLevel),a			; Tek += gov /2
 181+ A0E6 CB 27        		sla		a
 182+ A0E8 CB 27        		sla		a							; Onto Population (TL-1)*= 4
 183+ A0EA 47           		ld		b,a
 184+ A0EB 3A DA 9A     		ld		a,(DisplayEcononmy)
 185+ A0EE 80           		add		a,b                  		; TechLevel*4 + Eco   7-56
 186+ A0EF 47           		ld		b,a
 187+ A0F0 3A DB 9A     		ld		a,(DisplayGovernment)
 188+ A0F3 3C           		inc		a  							; +Government, 0 is Anarchy + 1
 189+ A0F4 32 DD 9A     		ld		(DisplayPopulation),a
 190+ A0F7 3A DA 9A     		ld		a,(DisplayEcononmy)
 191+ A0FA EE 07        		xor		7							; Onto productivity
 192+ A0FC C6 03        		add		3							;  (Flipped eco +3)
 193+ A0FE 57           		ld		d,a
 194+ A0FF 3A DB 9A     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 195+ A102 C6 04        		add		4
 196+ A104 5F           		ld		e,a
 197+ A105 ED 30        		mul									; ; DE = d*e, Productivity part 1. has hsb in A, lsb in P.
 198+ A107 3A DD 9A     		ld		a,(DisplayPopulation)		; then we use d for radius
 199+ A10A 57           		ld		d,a
 200+ A10B ED 30        		mul
 201+ A10D CB 23        		sla		e
 202+ A10F CB 1A        		rr		d
 203+ A111 CB 23        		sla		e
 204+ A113 CB 1A        		rr		d
 205+ A115 CB 23        		sla		e
 206+ A117 CB 1A        		rr		d							; de * 8
 207+ A119 ED 53 DF 9A  		ld		(DisplayProductivity),de
 208+ A11D              .DoRadius:
 209+ A11D 3A 49 9B     		ld		a,(WorkingSeeds+3)
 210+ A120 4F           		ld		c,a
 211+ A121 3A 4B 9B     		ld		a,(WorkingSeeds+5)
 212+ A124 E6 0F        		and		$0F							;  lower 4 bits of w2_h determine planet radius
 213+ A126 C6 0B        		add		11							;  radius min = 256*11 = 2816 km
 214+ A128 47           		ld		b,a							;
 215+ A129 ED 43 E3 9A  		ld		(DisplayRadius),bc
 216+ A12D C9           		ret
 217+ A12E
# file closed: ./Variables/galaxy_seed.asm
1163  A12E                  INCLUDE "./Tables/text_tables.asm"
# file opened: ./Tables/text_tables.asm
   1+ A12E 50 75 6C 73  StatusLaserName1	DB	"Pulse",0
   1+ A132 65 00
   2+ A134 42 65 61 6D  StatusLaserName2	DB	"Beam",0
   2+ A138 00
   3+ A139 4D 69 6C 69  StatusLaserName3    DB  "Military",0
   3+ A13D 74 61 72 79
   3+ A141 00
   4+ A142 4D 69 6E 69  StatusLaserName4    DB  "Mining",0
   4+ A146 6E 67 00
   5+ A149 43 75 73 74  StatusLaserName5    DB  "Custom",0
   5+ A14D 6F 6D 00
   6+ A150
   7+ A150 2E A1 34 A1  StatusLaserNameIdx	DW	StatusLaserName1,StatusLaserName2,StatusLaserName3,StatusLaserName4,StatusLaserName5
   7+ A154 39 A1 42 A1
   7+ A158 49 A1
   8+ A15A              StatusLaserNameIdxLen EQU $ - StatusLaserNameIdx
   9+ A15A
  10+ A15A 44 6F 63 6B  ConditionName1		DB "Docked",0
  10+ A15E 65 64 00
  11+ A161 47 72 65 65  ConditionName2		DB "Green",0
  11+ A165 6E 00
  12+ A167 59 65 6C 6C  ConditionName3		DB "Yellow",0
  12+ A16B 6F 77 00
  13+ A16E 52 65 64 00  ConditionName4		DB "Red",0
  14+ A172
  15+ A172 5A A1 61 A1  ConditionNameIdx	DW ConditionName1,ConditionName2,ConditionName3,ConditionName4
  15+ A176 67 A1 6E A1
  16+ A17A              ConditionNameIdxLen EQU $ - ConditionNameIdx
  17+ A17A
  18+ A17A 41 42 4F 55  StatusDiagrams		DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION",0
  18+ A17E 53 45 49 54
  18+ A182 49 4C 45 54
  18+ A186 53 54 4F 4E
  18+ A18A 4C 4F 4E 55
  18+ A18E 54 48 4E 4F
  18+ A192 41 4C 4C 45
  18+ A196 58 45 47 45
  18+ A19A 5A 41 43 45
  18+ A19E 42 49 53 4F
  18+ A1A2 55 53 45 53
  18+ A1A6 41 52 4D 41
  18+ A1AA 49 4E 44 49
  18+ A1AE 52 45 41 3F
  18+ A1B2 45 52 41 54
  18+ A1B6 45 4E 42 45
  18+ A1BA 52 41 4C 41
  18+ A1BE 56 45 54 49
  18+ A1C2 45 44 4F 52
  18+ A1C6 51 55 41 4E
  18+ A1CA 54 45 49 53
  18+ A1CE 52 49 4F 4E
  18+ A1D2 00
  19+ A1D3
  20+ A1D3 00 00 08 00  RankingTable		DW	$0000,$0008,$0010,$0020,$0040,$0080,$0200,$0A00,$1900,$4900,$FFFF
  20+ A1D7 10 00 20 00
  20+ A1DB 40 00 80 00
  20+ A1DF 00 02 00 0A
  20+ A1E3 00 19 00 49
  20+ A1E7 FF FF
  21+ A1E9
  22+ A1E9 48 61 72 6D  RankingName1		DB 	"Harmless",0
  22+ A1ED 6C 65 73 73
  22+ A1F1 00
  23+ A1F2 4D 6F 73 74  RankingName2		DB 	"Mostly Harmless",0
  23+ A1F6 6C 79 20 48
  23+ A1FA 61 72 6D 6C
  23+ A1FE 65 73 73 00
  24+ A202 50 6F 6F 72  RankingName3		DB 	"Poor",0
  24+ A206 00
  25+ A207 41 76 65 72  RankingName4		DB 	"Average",0
  25+ A20B 61 67 65 00
  26+ A20F 41 62 6F 76  RankingName5		DB 	"Above Average",0
  26+ A213 65 20 41 76
  26+ A217 65 72 61 67
  26+ A21B 65 00
  27+ A21D 43 6F 6D 70  RankingName6		DB 	"Competent",0
  27+ A221 65 74 65 6E
  27+ A225 74 00
  28+ A227 44 61 6E 67  RankingName7		DB 	"Dangerous",0
  28+ A22B 65 72 6F 75
  28+ A22F 73 00
  29+ A231 44 65 61 64  RankingName8		DB 	"Deadly",0
  29+ A235 6C 79 00
  30+ A238 2D 2D 2D 2D  RankingName9		DB 	"---- E L I T E ---",0
  30+ A23C 20 45 20 4C
  30+ A240 20 49 20 54
  30+ A244 20 45 20 2D
  30+ A248 2D 2D 00
  31+ A24B 53 6B 6F 6C  RankingName10		DB 	"Skollobsgod",0
  31+ A24F 6C 6F 62 73
  31+ A253 67 6F 64 00
  32+ A257 4E 75 74 74  RankingName11		DB 	"Nutter",0
  32+ A25B 65 72 00
  33+ A25E
  34+ A25E E9 A1 F2 A1  RankingNameIdx		dw RankingName1,RankingName2,RankingName3,RankingName4,RankingName5,RankingName6,RankingName7,RankingName8,RankingName9,RankingName10,RankingName11
  34+ A262 02 A2 07 A2
  34+ A266 0F A2 1D A2
  34+ A26A 27 A2 31 A2
  34+ A26E 38 A2 4B A2
  34+ A272 57 A2
  35+ A274              RankingNameIdxLen EQU $ - RankingNameIdx
  36+ A274
  37+ A274
  38+ A274              getTableText:
  39+ A274              ; ">getTableText, hl = indexlist, a = textnbr, returns with hl = porinter to head of text"
  40+ A274              ; ">Note for ranking first 2 bytes are target rank"
  41+ A274 D5           	push	de								; save DE as we will likley need it in caller
  42+ A275 ED 31        	add		hl,a							; 0 based ref, and its 2 bytes
  43+ A277 ED 31        	add		hl,a
  44+ A279 5E           	ld		e,(hl)
  45+ A27A 23           	inc		hl
  46+ A27B 56           	ld		d,(hl)							; de = indexed address
  47+ A27C EB           	ex		de,hl							; flip it to hl
  48+ A27D D1           	pop		de								; retrieve de
  49+ A27E C9           	ret										; return with hl as start entry
  50+ A27F
  51+ A27F
  52+ A27F              ;               CF      ZF      Result
  53+ A27F              ;               -----------------------------------
  54+ A27F              ;               0       0       HL > DE
  55+ A27F              ;               0       1       HL == DE
  56+ A27F              ;               1       0       HL < DE
  57+ A27F              ;               1       1       Impossible
  58+ A27F              getRankIndex:
  59+ A27F              ; ">getRank, de = kill count, returns a = index,hl destroyed"
  60+ A27F              ; ">Note for ranking first 2 bytes are target rank"
  61+ A27F 7A           	ld		a,d
  62+ A280 B3           	or		e
  63+ A281 FE 00        	cp		0
  64+ A283 C8           	ret		z								; quicks skip for 0 kills
  65+ A284 AF           	xor 	a
  66+ A285 21 D3 A1     	ld		hl,RankingTable
  67+ A288              .testLoop:
  68+ A288 4E           	ld		c,(hl)
  69+ A289 23           	inc		hl
  70+ A28A 46           	ld		b,(hl)							; bc = ranking
  71+ A28B E5           	push	hl
  72+ A28C 60           	ld		h,b
  73+ A28D 69           	ld		l,c
  74+ A28E CD 09 AE     	call	compare16HLDE
  75+ A291 38 06        	jr		c,.HLLTDE
  76+ A293              .HLGTEDE									; Found the correct rank
  77+ A293 E1           	pop		hl
  78+ A294 23           	inc		hl								; move to next value
  79+ A295 23           	inc		hl
  80+ A296 3C           	inc		a								; we canloop forever as if kills was $FFFF then hits nutter rank but also +1 = 0000 as its 16 bit
  81+ A297 18 EF        	jr		.testLoop
  82+ A299              .HLLTDE:									; HL < Kills so found correct rank
  83+ A299 E1           	pop		hl
  84+ A29A C9           	ret
  85+ A29B
# file closed: ./Tables/text_tables.asm
1164  A29B                  INCLUDE "./Tables/dictionary.asm"
# file opened: ./Tables/dictionary.asm
   1+ A29B 58 00        WordDummy					DB  "X",0
   2+ A29D 46 72 6F 6E  WordFront					DB	"Front",0              ;1
   2+ A2A1 74 00
   3+ A2A3 52 69 67 68  WordRight					DB	"Right",0              ;2
   3+ A2A7 74 00
   4+ A2A9 4C 65 66 74  WordLeft 					DB	"Left",0               ;3
   4+ A2AD 00
   5+ A2AE 52 65 61 72  WordRear   	 				DB	"Rear",0               ;4
   5+ A2B2 00
   6+ A2B3 4C 61 72 67  WordLarge           		DB  "Large",0              ;5
   6+ A2B7 65 00
   7+ A2B9 45 73 63 61  WordEscape          		DB  "Escape",0             ;6
   7+ A2BD 70 65 00
   8+ A2C0 50 6F 64 00  WordPod             		DB  "Pod",0                ;7
   9+ A2C4 43 61 72 67  WordCargo           		DB  "Cargo",0              ;8
   9+ A2C8 6F 00
  10+ A2CA 42 61 79 00  WordBay             		DB  "Bay",0                ;9
  11+ A2CE 46 75 65 6C  WordFuel            		DB  "Fuel",0               ;10
  11+ A2D2 00
  12+ A2D3 53 63 6F 6F  WordScoops          		DB  "Scoops",0             ;11
  12+ A2D7 70 73 00
  13+ A2DA 45 2E 43 2E  WordECM             		DB  "E.C.M.",0             ;12
  13+ A2DE 4D 2E 00
  14+ A2E1 53 79 73 74  WordSystem          		DB  "System",0             ;13
  14+ A2E5 65 6D 00
  15+ A2E8 45 6E 65 72  WordEnergy					DB  "Energy",0             ;14
  15+ A2EC 67 79 00
  16+ A2EF 42 6F 6D 62  WordBomb					DB  "Bomb",0               ;15
  16+ A2F3 00
  17+ A2F4 4C 61 73 65  WordLaser					DB  "Laser",0              ;16
  17+ A2F8 72 00
  18+ A2FA 50 75 6C 73  WordPulse           		DB  "Pulse",0              ;17
  18+ A2FE 65 00
  19+ A300 42 65 61 6D  WordBeam            		DB  "Beam",0               ;18
  19+ A304 00
  20+ A305 4D 69 6C 69  WordMiliary         		DB  "Miliary",0            ;19
  20+ A309 61 72 79 00
  21+ A30D 4D 69 6E 69  WordMining          		DB  "Mining",0             ;20
  21+ A311 6E 67 00
  22+ A314 43 75 73 74  WordCustom          		DB  "Custom",0             ;21
  22+ A318 6F 6D 00
  23+ A31B 55 6E 69 74  WordUnit            		DB  "Unit",0               ;22
  23+ A31F 00
  24+ A320 53 68 69 65  WordShield          		DB  "Shield",0             ;23
  24+ A324 6C 64 00
  25+ A327 44 6F 63 6B  WordDocking         		DB  "Docking",0            ;24
  25+ A32B 69 6E 67 00
  26+ A32F 43 6F 6D 70  WordComputers       		DB  "Computers",0          ;25
  26+ A333 75 74 65 72
  26+ A337 73 00
  27+ A339 48 79 70 65  WordHyperspace      		DB  "Hyperspace",0         ;26
  27+ A33D 72 73 70 61
  27+ A341 63 65 00
  28+ A344 47 61 6C 61  WordGalactic        		DB  "Galactic",0           ;27
  28+ A348 63 74 69 63
  28+ A34C 00
  29+ A34D 45 78 74 72  WordExtra           		DB  "Extra",0              ;28
  29+ A351 61 00
  30+ A353 43 6C 65 61  WordClean           		DB  "Clean",0              ;29
  30+ A357 6E 00
  31+ A359 4F 66 66 65  WordOffender        		DB  "Offender",0           ;30
  31+ A35D 6E 64 65 72
  31+ A361 00
  32+ A362 46 75 67 69  WordFugitive        		DB  "Fugitive",0           ;31
  32+ A366 74 69 76 65
  32+ A36A 00
  33+ A36B 46 6F 6F 64  WordFood					DB	"Food",0               ;32
  33+ A36F 00
  34+ A370 54 65 78 74  WordTextiles				DB 	"Textiles",0           ;33
  34+ A374 69 6C 65 73
  34+ A378 00
  35+ A379 52 61 64 69  WordRadioactives			DB  "Radioactives",0       ;34
  35+ A37D 6F 61 63 74
  35+ A381 69 76 65 73
  35+ A385 00
  36+ A386 53 6C 61 76  WordSlaves					DB  "Slaves",0             ;35
  36+ A38A 65 73 00
  37+ A38D 4C 69 71 75  WordLiquorWines     		DB  "Liquor/Wines",0       ;36
  37+ A391 6F 72 2F 57
  37+ A395 69 6E 65 73
  37+ A399 00
  38+ A39A 4C 75 78 75  WordLuxuries  	    		DB  "Luxuries",0	       ;37
  38+ A39E 72 69 65 73
  38+ A3A2 00
  39+ A3A3 4E 61 72 63  WordNarcotics  	    		DB  "Narcotics",0	       ;38
  39+ A3A7 6F 74 69 63
  39+ A3AB 73 00
  40+ A3AD 4D 61 63 68  WordMachinery  	    		DB  "Machinery",0	       ;39
  40+ A3B1 69 6E 65 72
  40+ A3B5 79 00
  41+ A3B7 41 6C 6C 6F  WordAlloys  				DB  "Alloys",0		       ;40
  41+ A3BB 79 73 00
  42+ A3BE 46 69 72 65  WordFirearms  	    		DB  "Firearms",0	       ;41
  42+ A3C2 61 72 6D 73
  42+ A3C6 00
  43+ A3C7 46 75 72 73  WordFurs  		    		DB  "Furs",0	           ;42
  43+ A3CB 00
  44+ A3CC 4D 69 6E 65  WordMinerals  	    		DB  "Minerals",0           ;43
  44+ A3D0 72 61 6C 73
  44+ A3D4 00
  45+ A3D5 47 6F 6C 64  WordGold  		    		DB  "Gold",0	           ;44
  45+ A3D9 00
  46+ A3DA 50 6C 61 74  WordPlatinum  	    		DB  "Platinum",0           ;45
  46+ A3DE 69 6E 75 6D
  46+ A3E2 00
  47+ A3E3 47 65 6D 2D  WordGemStones  				DB  "Gem-Stones",0         ;46
  47+ A3E7 53 74 6F 6E
  47+ A3EB 65 73 00
  48+ A3EE 41 6C 69 65  WordAlienItems      		DB  "Alien Items",0        ;47
  48+ A3F2 6E 20 49 74
  48+ A3F6 65 6D 73 00
  49+ A3FA 54 6F 6E 6E  WordTonnes          		DB  "Tonnes",0             ;48
  49+ A3FE 65 73 00
  50+ A401 4B 69 6C 6F  WordKilograms       		DB  "Kilograms",0          ;49
  50+ A405 67 72 61 6D
  50+ A409 73 00
  51+ A40B 47 72 61 6D  WordGrams           		DB  "Grams",0			   ;50
  51+ A40F 73 00
  52+ A411 53 68 6F 72  WordShort           		DB  "Short",0			   ;51
  52+ A415 74 00
  53+ A417 52 61 6E 67  WordRange           		DB  "Range",0			   ;52
  53+ A41B 65 00
  54+ A41D 43 68 61 72  WordChart	        		DB  "Chart",0			   ;53
  54+ A421 74 00
  55+ A423 44 61 74 61  WordData					DB	"Data",0			   ;54
  55+ A427 00
  56+ A428 4F 6E 00     WordOn						DB  "On",0                 ;55
  57+ A42B 44 69 73 74  WordDistance        		DB  "Distance",0           ;56
  57+ A42F 61 6E 63 65
  57+ A433 00
  58+ A434 45 63 6F 6E  WordEconomy         		DB  "Economy",0            ;57
  58+ A438 6F 6D 79 00
  59+ A43C 47 6F 76 65  WordGovernment      		DB  "Government",0         ;58
  59+ A440 72 6E 6D 65
  59+ A444 6E 74 00
  60+ A447 54 65 63 68  WordTechLevel       		DB  "TechLevel",0          ;59
  60+ A44B 4C 65 76 65
  60+ A44F 6C 00
  61+ A451 50 6F 70 75  WordPopulation      		DB  "Population",0         ;60
  61+ A455 6C 61 74 69
  61+ A459 6F 6E 00
  62+ A45C 4D 69 6C 6C  WordMillion         		DB  "Million",0            ;61
  62+ A460 69 6F 6E 00
  63+ A464 42 69 6C 6C  WordBillion         		DB  "Billion",0            ;62
  63+ A468 69 6F 6E 00
  64+ A46C 47 72 6F 73  WordGross           		DB  "Gross",0              ;63
  64+ A470 73 00
  65+ A472 50 72 6F 64  WordProductivity    		DB  "Productivity",0       ;64
  65+ A476 75 63 74 69
  65+ A47A 76 69 74 79
  65+ A47E 00
  66+ A47F 41 76 65 72  WordAverage         		DB  "Average",0            ;65
  66+ A483 61 67 65 00
  67+ A487 52 61 64 69  WordRadius          		DB  "Radius",0             ;66
  67+ A48B 75 73 00
  68+ A48E 4B 4D 00     WordKM              		DB  "KM",0                 ;67
  69+ A491 4D 20 43 52  WordMCR             		DB  "M CR",0               ;68
  69+ A495 00
  70+ A496 52 69 63 68  WordRich					DB  "Rich",0               ;69
  70+ A49A 00
  71+ A49B 41 76 67 00  WordAvg         			DB  "Avg",0            	   ;70
  72+ A49F 4D 61 69 6E  WordMainly          		DB  "Mainly",0             ;71
  72+ A4A3 6C 79 00
  73+ A4A6 50 6F 6F 72  WordPoor            		DB  "Poor",0               ;72
  73+ A4AA 00
  74+ A4AB 49 6E 64 75  WordIndustrial      		DB  "Industrial",0         ;73
  74+ A4AF 73 74 72 69
  74+ A4B3 61 6C 00
  75+ A4B6 41 67 72 69  WordAgricultural    		DB  "Agricultural",0       ;74
  75+ A4BA 63 75 6C 74
  75+ A4BE 75 72 61 6C
  75+ A4C2 00
  76+ A4C3 41 6E 61 72  WordAnarchy                 DB  "Anarchy",0            ;75
  76+ A4C7 63 68 79 00
  77+ A4CB 46 65 75 64  WordFeudal                  DB  "Feudal",0             ;76
  77+ A4CF 61 6C 00
  78+ A4D2 4D 75 6C 74  WordMultiGovernment         DB  "Multi-Government",0   ;77
  78+ A4D6 69 2D 47 6F
  78+ A4DA 76 65 72 6E
  78+ A4DE 6D 65 6E 74
  78+ A4E2 00
  79+ A4E3 44 69 63 74  WordDictatorship            DB  "Dictatorship",0       ;78
  79+ A4E7 61 74 6F 72
  79+ A4EB 73 68 69 70
  79+ A4EF 00
  80+ A4F0 43 6F 6D 6D  WordCommunist               DB  "Communist",0          ;79
  80+ A4F4 75 6E 69 73
  80+ A4F8 74 00
  81+ A4FA 43 6F 6E 66  WordConfederacy             DB  "Confederacy",0        ;80
  81+ A4FE 65 64 65 72
  81+ A502 61 63 79 00
  82+ A506 44 65 6D 6F  WordDemocracy               DB  "Democracy",0          ;81
  82+ A50A 63 72 61 63
  82+ A50E 79 00
  83+ A510 43 6F 72 70  WordCorporate               DB  "Corporate State",0    ;82
  83+ A514 6F 72 61 74
  83+ A518 65 20 53 74
  83+ A51C 61 74 65 00
  84+ A520 53 74 61 74  WordState 					DB  "State",0              ;83
  84+ A524 65 00
  85+ A526 4C 69 67 68  WordLight 					DB  "Light",0              ;84
  85+ A52A 74 00
  86+ A52C 59 65 61 72  WordYears 					DB  "Years",0              ;85
  86+ A530 73 00
  87+ A532 30 00        Word0						DB  "0",0				   ;86
  88+ A534 4D 61 72 6B  WordMarket					DB  "Market",0			   ;87
  88+ A538 65 74 00
  89+ A53B 50 72 69 63  WordPrices					DB  "Prices",0			   ;88
  89+ A53F 65 73 00
  90+ A542 50 72 6F 64  WordProduct    				DB  "Product",0  		   ;89
  90+ A546 75 63 74 00
  91+ A54A 55 6F 4D 00  WordUoM						DB  "UoM",0                ;90
  92+ A54E 50 72 69 63  WordPrice					DB  "Price",0              ;91
  92+ A552 65 00
  93+ A554 46 6F 72 00  WordFor                     DB  "For",0                ;92
  94+ A558 53 61 6C 65  WordSale                    DB  "Sale",0               ;93
  94+ A55C 00
  95+ A55D 74 00        Wordt						DB  "t",0                  ;94
  96+ A55F 6B 67 00     Wordkg						DB  "kg",0                 ;95
  97+ A562 67 00        Wordg						DB  "g",0                  ;96
  98+ A564 51 75 61 6E  WordQuantity				DB  "Quanitity",0		   ;97
  98+ A568 69 74 69 74
  98+ A56C 79 00
  99+ A56E 49 6E 76 00  WordInv                     DB  "Inv",0                ;98
 100+ A572 53 74 6F 63  WordStock                   DB  "Stock",0              ;99
 100+ A576 6B 00
 101+ A578 45 71 75 69  WordEquip                   DB  "Equip",0              ;100
 101+ A57C 70 00
 102+ A57E 53 68 69 70  WordShip                    DB  "Ship",0               ;101
 102+ A582 00
 103+ A583 4D 69 73 73  WordMissile                 DB  "Missile",0            ;102
 103+ A587 69 6C 65 00
 104+ A58B 48 79 70 65  WordHyperdrive              DB  "Hyperdrive",0
 104+ A58F 72 64 72 69
 104+ A593 76 65 00
 105+ A596 4D 69 6C 69  WordMilitary                DB  "Military",0
 105+ A59A 74 61 72 79
 105+ A59E 00
 106+ A59F
 107+ A59F 9B A2 9D A2  WordIdx				DW  WordDummy,          WordFront,        WordRight,        WordLeft		;0-3
 107+ A5A3 A3 A2 A9 A2
 108+ A5A7 AE A2 B3 A2  					DW  WordRear,           WordLarge,        WordEscape,       WordPod      	;4-7
 108+ A5AB B9 A2 C0 A2
 109+ A5AF C4 A2 CA A2  					DW  WordCargo,          WordBay,          WordFuel,         WordScoops   	;8
 109+ A5B3 CE A2 D3 A2
 110+ A5B7 DA A2 E1 A2  					DW  WordECM,            WordSystem,       WordEnergy,       WordBomb     	;12
 110+ A5BB E8 A2 EF A2
 111+ A5BF F4 A2 FA A2  					DW  WordLaser,          WordPulse,        WordBeam,         WordMiliary  	;16
 111+ A5C3 00 A3 05 A3
 112+ A5C7 0D A3 14 A3  					DW  WordMining,         WordCustom,       WordUnit,         WordShield   	;20
 112+ A5CB 1B A3 20 A3
 113+ A5CF 27 A3 2F A3  					DW  WordDocking,        WordComputers,    WordHyperspace,   WordGalactic 	;24
 113+ A5D3 39 A3 44 A3
 114+ A5D7 4D A3 53 A3  					DW  WordExtra,          WordClean,        WordOffender,     WordFugitive	;28
 114+ A5DB 59 A3 62 A3
 115+ A5DF 6B A3 70 A3  					DW  WordFood,           WordTextiles,     WordRadioactives, WordSlaves		;32
 115+ A5E3 79 A3 86 A3
 116+ A5E7 8D A3 9A A3  					DW  WordLiquorWines,    WordLuxuries,     WordNarcotics,    WordMachinery   ;36
 116+ A5EB A3 A3 AD A3
 117+ A5EF B7 A3 BE A3  					DW  WordAlloys,         WordFirearms,     WordFurs,         WordMinerals    ;40
 117+ A5F3 C7 A3 CC A3
 118+ A5F7 D5 A3 DA A3  					DW  WordGold,           WordPlatinum,     WordGemStones,    WordAlienItems  ;44               ;
 118+ A5FB E3 A3 EE A3
 119+ A5FF FA A3 01 A4  WordIdxUoMFull		DW  WordTonnes,         WordKilograms,    WordGrams,		WordShort		;48
 119+ A603 0B A4 11 A4
 120+ A607 17 A4 1D A4  					DW	WordRange,		    WordChart,        WordData,         WordOn          ;52
 120+ A60B 23 A4 28 A4
 121+ A60F 2B A4 34 A4  					DW  WordDistance,       WordEconomy,      WordGovernment,   WordTechLevel   ;56
 121+ A613 3C A4 47 A4
 122+ A617 51 A4 5C A4  					DW  WordPopulation,     WordMillion,      WordBillion,      WordGross       ;60
 122+ A61B 64 A4 6C A4
 123+ A61F 72 A4 7F A4  					DW  WordProductivity,   WordAverage,      WordRadius,       WordKM          ;64
 123+ A623 87 A4 8E A4
 124+ A627 91 A4        					DW  WordMCR																	;68
 125+ A629 96 A4 9B A4  WordIdxEconomy		DW  WordRich,           WordAvg,      	  WordMainly,       WordPoor        ;69
 125+ A62D 9F A4 A6 A4
 126+ A631 AB A4 B6 A4                      DW  WordIndustrial,     WordAgricultural									;73
 127+ A635 C3 A4 CB A4  WordIdxGovernment	DW  WordAnarchy,        WordFeudal,       WordMultiGovernment, WordDictatorship ;75
 127+ A639 D2 A4 E3 A4
 128+ A63D F0 A4 FA A4                      DW  WordCommunist,      WordConfederacy,  WordDemocracy,       WordCorporate ;79
 128+ A641 06 A5 10 A5
 129+ A645 20 A5 26 A5  					DW  WordState,          WordLight,        WordYears,           Word0         ; 83
 129+ A649 2C A5 32 A5
 130+ A64D 34 A5 3B A5  WordIdxMarketmenu	DW  WordMarket,         WordPrices,       WordProduct,         WordUoM	    ;87
 130+ A651 42 A5 4A A5
 131+ A655 4E A5 54 A5                      DW  WordPrice,          WordFor,          WordSale                          ;91
 131+ A659 58 A5
 132+ A65B 5D A5 5F A5  WordIdxUomAbbrev	DW	Wordt,				Wordkg,           Wordg                 		    ;94
 132+ A65F 62 A5
 133+ A661 64 A5 6E A5  					DW  WordQuantity,       WordInv,          WordStock,           WordEquip	;97
 133+ A665 72 A5 78 A5
 134+ A669 7E A5 83 A5                      DW  WordShip,           WordMissile       ; 101
 135+ A66D
 136+ A66D              ; Phrases
 137+ A66D 05 08 09 00  TextLargeCargoBay			DB 	5,8,9,0          ;0
 138+ A671 06 07 00     TextEscapePod				DB	6,7,0            ;1
 139+ A674 0A 0B 00     TextFuelScoops				DB	10,11,0          ;2
 140+ A677 0C 0D 00     TextECMSystem				DB	12,13,0          ;3
 141+ A67A 0E 0F 00     TextEnergyBomb				DB	14,15,0          ;4
 142+ A67D 0E 16 00     TextEnergyUnit				DB	14,22,0          ;5
 143+ A680 18 19 00     TextDockingComp     		DB  24,25,0          ;6
 144+ A683 1B 1A 00     TextGalacticHyper			DB	27,26,0          ;7
 145+ A686 01 12 10 00  TextFrontLaser      		DB  01,18,16,0       ;8
 146+ A68A 03 12 10 00  TextLeftLaser       		DB  03,18,16,0       ;9
 147+ A68E 02 12 10 00  TextRightLaser      		DB  02,18,16,0       ;10
 148+ A692 04 12 10 00  TextRearLaser       		DB  04,18,16,0       ;11
 149+ A696 33 34 35 00  TextShortRangeChart 		DB	51,52,53,0       ;12
 150+ A69A 1B 35 00     TextGalacticChart   		DB	27,53,0          ;13
 151+ A69D 36 37 00     TextDataOn					DB	54,55,0          ;14
 152+ A6A0 45 49 00     TextRichIndustrial          DB  69,73,0          ;15
 153+ A6A3 46 49 00     TextAvgIndustrial           DB  70,73,0			 ;16
 154+ A6A6 47 49 00     TextMainIndustrial          DB  71,73,0          ;17
 155+ A6A9 48 49 00     TextPoorIndustrial          DB  72,73,0          ;18
 156+ A6AC 45 4A 00     TextRichAgricultural        DB  69,74,0          ;19
 157+ A6AF 46 4A 00     TextAvgAgricultural         DB  70,74,0          ;20
 158+ A6B2 47 4A 00     TextMainAgricultural        DB  71,74,0          ;21
 159+ A6B5 48 4A 00     TextPoorAgricultural        DB  72,74,0          ;22
 160+ A6B8 54 55 00     TextLightYears				DB  84,85,0			 ;23
 161+ A6BB 56 54 55 00  Text0LightYears				DB  86,84,85,0		 ;24
 162+ A6BF 57 58 00     TextMarketPrices			DB  87,88,0			 ;25
 163+ A6C2 64 65        TextEquipShip               DB  100,101          ;26
 164+ A6C4
 165+ A6C4 00           TextDummy					DB  0
 166+ A6C5
 167+ A6C5 6D A6 71 A6  TextTokens			DW  TextLargeCargoBay, TextEscapePod, TextFuelScoops				; 0 2
 167+ A6C9 74 A6
 168+ A6CB 77 A6 7A A6  					DW  TextECMSystem, TextEnergyBomb, TextEnergyUnit					; 3 5
 168+ A6CF 7D A6
 169+ A6D1 80 A6 83 A6  					DW  TextDockingComp, TextGalacticHyper  							; 6 7
 170+ A6D5 86 A6 8A A6  					DW	TextFrontLaser, TextLeftLaser, TextRightLaser, TextRearLaser	; 8 11
 170+ A6D9 8E A6 92 A6
 171+ A6DD 96 A6 9A A6  					DW  TextShortRangeChart, TextGalacticChart, TextDataOn				; 12 14
 171+ A6E1 9D A6
 172+ A6E3 A0 A6 A3 A6  TextTokenEconomy	DW  TextRichIndustrial, TextAvgIndustrial, TextPoorIndustrial, TextMainIndustrial, TextMainAgricultural, TextRichAgricultural, TextAvgAgricultural,  TextPoorAgricultural
 172+ A6E7 A9 A6 A6 A6
 172+ A6EB B2 A6 AC A6
 172+ A6EF AF A6 B5 A6
 173+ A6F3 B8 A6        					DW  TextLightYears		                                            ; 21 23
 174+ A6F5 BB A6 BF A6  					DW  Text0LightYears, TextMarketPrices
 175+ A6F9 C4 A6        					DW  TextDummy;  25
 176+ A6FB 00 00 00...  TextBuffer			DS	33
 177+ A71C
 178+ A71C              TextEconomyOffset   EQU (TextTokenEconomy - TextTokens)/2
 179+ A71C              TextGovOffset       EQU (WordIdxGovernment - WordIdx)/2
 180+ A71C
 181+ A71C              CapitaliseString:
 182+ A71C              ; ">CapitaliseString hl = address"
 183+ A71C              .CapLoop:
 184+ A71C 23           	inc		hl
 185+ A71D 7E           	ld		a,(hl)
 186+ A71E FE 00        	cp		0
 187+ A720 C8           	ret		z
 188+ A721 FE 5B        	cp		'Z'+1
 189+ A723 30 F7        	jr		nc,.CapLoop
 190+ A725 FE 41        	cp		'A'
 191+ A727 38 F3        	jr		c,.CapLoop
 192+ A729              .LowerCase:
 193+ A729 C6 20        	add		a,'a'-'A'
 194+ A72B 77           	ld		(hl),a
 195+ A72C 18 EE        	jr		.CapLoop
 196+ A72E
 197+ A72E              WordIndexToAddress:
 198+ A72E 21 9F A5     	ld		hl,WordIdx
 199+ A731 ED 31        	add		hl,a
 200+ A733 ED 31        	add		hl,a
 201+ A735 D5           	push	de
 202+ A736 5E           	ld		e,(hl)
 203+ A737 23           	inc		hl
 204+ A738 56           	ld		d,(hl)
 205+ A739 EB           	ex		de,hl
 206+ A73A D1           	pop		de
 207+ A73B C9           	ret
 208+ A73C
 209+ A73C
 210+ A73C              expandTokenToString:
 211+ A73C              ; ">expandTokenToString a = texttoken"
 212+ A73C 21 C5 A6     	ld		hl,TextTokens
 213+ A73F CD 74 A2     	call	getTableText
 214+ A742 11 FB A6     	ld		de,TextBuffer
 215+ A745              .ReadLoop:
 216+ A745 7E           	ld		a,(hl)
 217+ A746 FE 00        	cp		0
 218+ A748 28 1B        	jr		z,.ReadDone
 219+ A74A E5           	push	hl
 220+ A74B D5           	push	de
 221+ A74C 21 9F A5     	ld		hl,WordIdx
 222+ A74F CD 74 A2     	call	getTableText
 223+ A752 D1           	pop		de
 224+ A753              .WordExpandLoop:
 225+ A753 7E           	ld		a,(hl)
 226+ A754 FE 00        	cp		0
 227+ A756 28 05        	jr		z,.AddSpace
 228+ A758              ;.GetChar:
 229+ A758 12           	ld		(de),a
 230+ A759 13           	inc		de
 231+ A75A 23           	inc		hl
 232+ A75B 18 F6        	jr		.WordExpandLoop
 233+ A75D              .AddSpace:
 234+ A75D 3E 20        	ld		a,' '
 235+ A75F 12           	ld		(de),a
 236+ A760 13           	inc		de
 237+ A761 E1           	pop		hl
 238+ A762 23           	inc		hl
 239+ A763 18 E0        	jr		.ReadLoop
 240+ A765              .ReadDone:
 241+ A765 1B           	dec		de
 242+ A766 AF           	xor		a
 243+ A767 12           	ld		(de),a
 244+ A768 C9           	ret
 245+ A769
# file closed: ./Tables/dictionary.asm
1165  A769                  INCLUDE "./Tables/name_digrams.asm"
# file opened: ./Tables/name_digrams.asm
   1+ A769 41 42 4F 55  name_digrams	DB "ABOUSEITILETSTONLONUTHNO"
   1+ A76D 53 45 49 54
   1+ A771 49 4C 45 54
   1+ A775 53 54 4F 4E
   1+ A779 4C 4F 4E 55
   1+ A77D 54 48 4E 4F
   2+ A781 41 4C 4C     name_digrams2   DB "ALL"
   3+ A784 45 58 45 47  				DB "EXEGEZACEBISOUSESARMAINDIREA"
   3+ A788 45 5A 41 43
   3+ A78C 45 42 49 53
   3+ A790 4F 55 53 45
   3+ A794 53 41 52 4D
   3+ A798 41 49 4E 44
   3+ A79C 49 52 45 41
   4+ A7A0 3F 45 52 41  				DB "?ERATENBERALAVETIEDORQUANTEISRION"
   4+ A7A4 54 45 4E 42
   4+ A7A8 45 52 41 4C
   4+ A7AC 41 56 45 54
   4+ A7B0 49 45 44 4F
   4+ A7B4 52 51 55 41
   4+ A7B8 4E 54 45 49
   4+ A7BC 53 52 49 4F
   4+ A7C0 4E
   5+ A7C1
   6+ A7C1              ; TODO Moveinto galaxy data module
   7+ A7C1 00 00 00...  name_expanded	DS 32
   8+ A7E1 00           				DB 0
   9+ A7E2
  10+ A7E2
  11+ A7E2
  12+ A7E2              NamingLoop:
  13+ A7E2 3A 4B 9B     	ld		a,(WorkingSeeds+5)	; a = first byte of name seed
  14+ A7E5 E6 1F        	and 	$1F					; Keep bottom 5 bits only
  15+ A7E7 FE 00        	cp		0					; 0 = skip 2 chars
  16+ A7E9 28 12        	jr		z,.SkipPhrase
  17+ A7EB C6 0C        	add		a,12
  18+ A7ED CB 27        	sla		a					; phrase = (a+12)*2
  19+ A7EF 21 69 A7     	ld		hl,name_digrams
  20+ A7F2 ED 31        	add		hl,a
  21+ A7F4 ED A0        	ldi
  22+ A7F6 7E           	ld		a,(hl)
  23+ A7F7 FE 3F        	cp		'?'
  24+ A7F9 28 02        	jr		z,.SkipPhrase
  25+ A7FB              .AddExtra:
  26+ A7FB ED A0        	ldi
  27+ A7FD              .SkipPhrase:
  28+ A7FD D5           	push	de
  29+ A7FE CD 12 A0     	call	working_seed
  30+ A801 D1           	pop		de
  31+ A802 C9           	ret
  32+ A803
  33+ A803              ;GetDigramGalaxySeed:
  34+ A803              ;	call	copy_galaxy_to_working
  35+ A803              ;	jr		GetDigramWorkingSeed
  36+ A803              ;GetDigramSystemSeed:
  37+ A803              ;	call	copy_system_to_working
  38+ A803              ;GetDigramWorkingSeed:
  39+ A803              ;; ">GetDigram a = digram seed"
  40+ A803              ;	ld		de,name_expanded
  41+ A803              ;	ld		b,3
  42+ A803              ;	ld		a,(WorkingSeeds)
  43+ A803              ;	and		$40
  44+ A803              ;	jr		z,.SmallSizeName
  45+ A803              ;.LargeSizeName:
  46+ A803              ;	call	NamingLoop
  47+ A803              ;.SmallSizeName:
  48+ A803              ;	call	NamingLoop
  49+ A803              ;	call	NamingLoop
  50+ A803              ;	call	NamingLoop
  51+ A803              ;.DoneName:
  52+ A803              ;	ex		de,hl
  53+ A803              ;	ld		(hl),0
  54+ A803              ;	ex		de,hl
  55+ A803              ;	ret
  56+ A803
  57+ A803
  58+ A803
  59+ A803              ;GetDigramWorkingSeed:
  60+ A803              ;	MESSAGE ">GetDigram a = digram seed b = length"
  61+ A803              ;	ld		b,5					; working seed
  62+ A803              ;	ld		de,name_expanded
  63+ A803              ;.ExpansionLoop:
  64+ A803              ;	push	bc
  65+ A803              ;	ld		hl,WorkingSeeds
  66+ A803              ;	ld		a,b
  67+ A803              ;	add		hl,a
  68+ A803              ;	ld		a,(hl)	; a = first byte of name seed
  69+ A803              ;	and 	$1F					; Keep bottom 5 bits only
  70+ A803              ;	cp		0					; 0 = skip 2 chars
  71+ A803              ;	jr		z,.SkipPhrase
  72+ A803              ;	or		&80					; set buit 7 high (probabtyl capitalisation)
  73+ A803              ;	call	TT27
  74+ A803              ;.SkipPhrase:
  75+ A803              ;	push	de
  76+ A803              ;	call	next_working_seed
  77+ A803              ;	pop		de
  78+ A803              ;	pop		bc
  79+ A803              ;	djnz	GetDigramWorkingSeed
  80+ A803              ;.DoneName:
  81+ A803              ;	ex		de,hl
  82+ A803              ;	ld		(hl),0
  83+ A803              ;	ex		de,hl
  84+ A803              ;	ret
  85+ A803              ;
  86+ A803              ;ExpandToken:
  87+ A803              ;	DE = target
  88+ A803              ;	a = token
  89+ A803              ;
  90+ A803              ;PlanetDigram:
  91+ A803              ;	cp		&A0							; >- 160
  92+ A803              ;	jr		c,MorePage4
  93+ A803              ;	and		$7F							; 128 to 159 now 0 to 31
  94+ A803              ;	asl		2							; Multiply by 2
  95+ A803              ;	ld		hl, name_digrams2
  96+ A803              ;	add		hl,a
  97+ A803              ;	ld		a,(hl)
  98+ A803              ;	call	ProcessTextToken
  99+ A803              ;	inc		hl
 100+ A803              ;	ld		a,(hl)
 101+ A803              ;	cp		'?'
 102+ A803              ;	ret		z
 103+ A803              ;	call	ProcessTextToken
 104+ A803              ;	ret
 105+ A803              ;MorePage4:
 106+ A803              ;	sub		$A0
 107+ A803              ;ExtraTokenCheck:
 108+ A803              ;	push	de							; save target address
 109+ A803              ;	push	bc
 110+ A803              ;	ld		b,a
 111+ A803              ;	ld		hl,varV
 112+ A803              ;	ld		(VarV),0400
 113+ A803              ;	ld		(varV),a
 114+ A803              ;	ld
 115+ A803              ;
 116+ A803              ;		.TT43	\ Token > 127 page4 token or planet digram.
 117+ A803              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 118+ A803              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 119+ A803              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 120+ A803              ;0A                      ASL A		      \ *= 2
 121+ A803              ;A8                      TAY 		      \ digram index = 0to62
 122+ A803              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 123+ A803              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 124+ A803              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 125+ A803              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 126+ A803              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 127+ A803              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 128+ A803              ;
 129+ A803              ;	.TT47	\ more page4, subtract #160
 130+ A803              ;E9 A0                   SBC #&A0	\ -= 160
 131+ A803              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 132+ A803              ;AA                      TAX 		\ copy of word index
 133+ A803              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 134+ A803              ;85 22                   STA &22		\ V
 135+ A803              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 136+ A803              ;85 23                   STA &23		\ V+1
 137+ A803              ;A0 00                   LDY #0
 138+ A803              ;8A                      TXA 		\ token = word index
 139+ A803              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 140+ A803              ;	.TT51	\ counters Y letter, X token
 141+ A803              ;B1 22                   LDA (&22),Y	\ (V),Y
 142+ A803              ;F0 07                   BEQ TT49	\ exit as word ended
 143+ A803              ;C8                      INY 		\ letter count
 144+ A803              ;D0 F9                   BNE TT51	\ loop Y
 145+ A803              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 146+ A803              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 147+ A803              ;	.TT49	\ word ended
 148+ A803              ;C8                      INY
 149+ A803              ;D0 02                   BNE TT59    	\ next word
 150+ A803              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 151+ A803              ;	.TT59	\ next word
 152+ A803              ;CA                      DEX 		\ token count
 153+ A803              ;D0 ED                   BNE TT51	\ loop X token
 154+ A803              ;	.TT50	\ token X = 0, counter Y offset to word correct
 155+ A803              ;98                      TYA
 156+ A803              ;48                      PHA 		\ store Yindex
 157+ A803              ;A5 23                   LDA &23		\ V+1
 158+ A803              ;48                      PHA 		\ correct pointer hi
 159+ A803              ;B1 22                   LDA (&22),Y 	\ (V),Y
 160+ A803              ;49 23                   EOR #&23	\ decode '#'
 161+ A803              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 162+ A803              ;68                      PLA 		\ restore this depth's Vhi
 163+ A803              ;85 23                   STA &23		\ V+1
 164+ A803              ;68                      PLA
 165+ A803              ;A8                      TAY 		\ restore this depth's Yindex
 166+ A803              ;C8                      INY 		\ next letter
 167+ A803              ;D0 02                   BNE P%+4	\ not zero so skip next page
 168+ A803              ;E6 23                   INC &23		\ V+1
 169+ A803              ;B1 22                   LDA (&22),Y	\ (V),Y
 170+ A803              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 171+ A803              ;	.TT48 	\ rts
 172+ A803              ;60                      RTS 		\ end of flight token printing TT27
 173+ A803              ;
 174+ A803              ;
 175+ A803              ;
 176+ A803              ;
 177+ A803              ;
 178+ A803              ;
 179+ A803              ;		.TT27	\ -> &36E0 \ process flight text Token in Acc
 180+ A803              ;;AA                      TAX		\ copy token to count down
 181+ A803              ;;F0 DE                   BEQ csh		\ Acc = 0, up to Cash
 182+ A803              ;30 74                   BMI TT43	\ if token is >  127 down, page4 token or digram
 183+ A803              ;CA                      DEX
 184+ A803              ;F0 BC                   BEQ tal		\ Acc == 1, up, print Galaxy number.
 185+ A803              ;CA                      DEX
 186+ A803              ;F0 A3                   BEQ ypl		\ Acc == 2, up, present planet in QQ2.
 187+ A803              ;CA                      DEX
 188+ A803              ;D0 03                   BNE P%+5	\ hop over, else X == 0
 189+ A803              ;4C 0A 33                JMP &330A \ cpl \ Acc = 3 print Planet name for seed QQ15
 190+ A803              ;CA                      DEX
 191+ A803              ;F0 8A                   BEQ cmn		\ Acc == 4, up, commander name.
 192+ A803              ;CA                      DEX
 193+ A803              ;F0 B5                   BEQ fwl		\ Acc == 5, up, fuel followed by cash.
 194+ A803              ;CA                      DEX
 195+ A803              ;D0 05                   BNE  P%+7	\ hop over, else X == 0
 196+ A803              ;A9 80                   LDA #&80	\ Acc == 6, set bit 7 TT27m
 197+ A803              ;85 72                   STA &72	 	\ QQ17
 198+ A803              ;60                      RTS
 199+ A803              ;CA                      DEX 		\ skip Acc ==7
 200+ A803              ;CA                      DEX
 201+ A803              ;D0 03                   BNE P%+5	\ hop over to continue Acc 9to127
 202+ A803              ;86 72                   STX &72	 \ QQ17	\ else Acc ==8, QQ17 set to X = 0
 203+ A803              ;60                      RTS
 204+ A803              ;CA                      DEX 		\ continue 9to127 tokens
 205+ A803              ;F0 38                   BEQ crlf	\ Acc == 9, down, colon on right.
 206+ A803              ;C9 60                   CMP #&60	\ discard X, look at Acc = token >= 96
 207+ A803              ;B0 66                   BCS ex   	\ extra >= #&60, far down
 208+ A803              ;C9 0E                   CMP #14		\ < 14 ?
 209+ A803              ;90 04                   BCC P%+6	\ goes to Token < 14 or > 31
 210+ A803              ;C9 20                   CMP #32		\ < 32 ?
 211+ A803              ;90 28                   BCC qw   	\ 14 <= token A < 32 becomes 128to145 page4 digram
 212+ A803              ;		\ Token  < 14 or > 31
 213+ A803              ;A6 72                   LDX &72	 	\ QQ17
 214+ A803              ;F0 3D                   BEQ TT74 	\ if QQ17 = 0 Upper case, jmp TT26, print character.
 215+ A803              ;30 11                   BMI TT41 	\ if bit7 set
 216+ A803              ;24 72                   BIT &72		\ QQ17 has bit6 set too
 217+ A803              ;70 30                   BVS TT46 	\ If only bit6 set, clear bit6 and print as Upper
 218+ A803              ;	.TT42	\ Uppercase to lowercase
 219+ A803              ;C9 41                   CMP #&41	\ < ascii 'A'
 220+ A803              ;90 06                   BCC TT44 	\ jmp TT26, print character
 221+ A803              ;C9 5B                   CMP #&5B	\ >= ascii 'Z'+1
 222+ A803              ;B0 02                   BCS TT44 	\ jmp TT26, print character
 223+ A803              ;69 20                   ADC #&20	\ else Upper to lowercase
 224+ A803              ;	.TT44	\ print character as is with TT26
 225+ A803              ;4C FC 1E                JMP &1EFC \ TT26 \ print character
 226+ A803              ;
 227+ A803              ;	.TT41	\ QQ17 bit7 set
 228+ A803              ;24 72                   BIT &72		\ QQ17
 229+ A803              ;70 17                   BVS TT45	\ bit6 set too, Nothing or lower.
 230+ A803              ;C9 41                   CMP #&41	\ < ascii 'A'
 231+ A803              ;90 22                   BCC TT74 	\ print as is using TT26
 232+ A803              ;48                      PHA 		\ else store token Acc
 233+ A803              ;8A                      TXA 		\ QQ17 copy
 234+ A803              ;09 40                   ORA #&40	\ set bit6 in QQ17 so subsequent ones lower
 235+ A803              ;85 72                   STA &72	 	\ QQ17
 236+ A803              ;68                      PLA 		\ restore token
 237+ A803              ;D0 EC                   BNE TT44	\ guaranteed up, print as Uppercase with TT26.
 238+ A803              ;
 239+ A803              ;	.qw	\ Acc = 14to31 becomes 128to145 page4 digram
 240+ A803              ;69 72                   ADC #&72	\ A+=114 becomes 128to145 page4 digram
 241+ A803              ;D0 32                   BNE ex		\ guaranteed down, extra.
 242+ A803              ;
 243+ A803              ;	.crlf	\ Acc == 9,  colon on right
 244+ A803              ;A9 15                   LDA #21		\ on right
 245+ A803              ;85 2C                   STA &2C		\ XC
 246+ A803              ;D0 97                   BNE TT73	\ guaranteed up, print colon.
 247+ A803              ;
 248+ A803              ;	.TT45	\ QQ17 bits 7,6 set. Nothing or lower.
 249+ A803              ;E0 FF                   CPX #&FF	\ if QQ17 = #&FF
 250+ A803              ;F0 63                   BEQ TT48	\ rts
 251+ A803              ;C9 41                   CMP #&41	\ >= ascii 'A' ?
 252+ A803              ;B0 D0                   BCS TT42	\ Uppercase to lowercase, up.
 253+ A803              ;	.TT46	\ clear bit6 QQ17 and print as is using TT26
 254+ A803              ;48                      PHA 		\ push token
 255+ A803              ;8A                      TXA 		\ QQ17 copy
 256+ A803              ;29 BF                   AND #&BF	\ clear bit6
 257+ A803              ;85 72                   STA &72	 	\ QQ17
 258+ A803              ;68                      PLA 		\ pull token
 259+ A803              ;	.TT74	\ TT26, print character.
 260+ A803              ;4C FC 1E                JMP &1EFC	\ TT26
 261+ A803              ;
 262+ A803              ;	.TT43	\ Token > 127 page4 token or planet digram.
 263+ A803              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 264+ A803              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 265+ A803              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 266+ A803              ;0A                      ASL A		      \ *= 2
 267+ A803              ;A8                      TAY 		      \ digram index = 0to62
 268+ A803              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 269+ A803              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 270+ A803              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 271+ A803              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 272+ A803              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 273+ A803              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 274+ A803              ;
 275+ A803              ;	.TT47	\ more page4, subtract #160
 276+ A803              ;E9 A0                   SBC #&A0	\ -= 160
 277+ A803              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 278+ A803              ;AA                      TAX 		\ copy of word index
 279+ A803              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 280+ A803              ;85 22                   STA &22		\ V
 281+ A803              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 282+ A803              ;85 23                   STA &23		\ V+1
 283+ A803              ;A0 00                   LDY #0
 284+ A803              ;8A                      TXA 		\ token = word index
 285+ A803              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 286+ A803              ;	.TT51	\ counters Y letter, X token
 287+ A803              ;B1 22                   LDA (&22),Y	\ (V),Y
 288+ A803              ;F0 07                   BEQ TT49	\ exit as word ended
 289+ A803              ;C8                      INY 		\ letter count
 290+ A803              ;D0 F9                   BNE TT51	\ loop Y
 291+ A803              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 292+ A803              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 293+ A803              ;	.TT49	\ word ended
 294+ A803              ;C8                      INY
 295+ A803              ;D0 02                   BNE TT59    	\ next word
 296+ A803              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 297+ A803              ;	.TT59	\ next word
 298+ A803              ;CA                      DEX 		\ token count
 299+ A803              ;D0 ED                   BNE TT51	\ loop X token
 300+ A803              ;	.TT50	\ token X = 0, counter Y offset to word correct
 301+ A803              ;98                      TYA
 302+ A803              ;48                      PHA 		\ store Yindex
 303+ A803              ;A5 23                   LDA &23		\ V+1
 304+ A803              ;48                      PHA 		\ correct pointer hi
 305+ A803              ;B1 22                   LDA (&22),Y 	\ (V),Y
 306+ A803              ;49 23                   EOR #&23	\ decode '#'
 307+ A803              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 308+ A803              ;68                      PLA 		\ restore this depth's Vhi
 309+ A803              ;85 23                   STA &23		\ V+1
 310+ A803              ;68                      PLA
 311+ A803              ;A8                      TAY 		\ restore this depth's Yindex
 312+ A803              ;C8                      INY 		\ next letter
 313+ A803              ;D0 02                   BNE P%+4	\ not zero so skip next page
 314+ A803              ;E6 23                   INC &23		\ V+1
 315+ A803              ;B1 22                   LDA (&22),Y	\ (V),Y
 316+ A803              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 317+ A803              ;	.TT48 	\ rts
 318+ A803              ;60                      RTS 		\ end of flight token printing TT27
 319+ A803              ;
 320+ A803              ;
 321+ A803              ;
# file closed: ./Tables/name_digrams.asm
1166  A803              ;INCLUDE "Tables/inwk_table.asm" This is no longer needed as we will write to univer object bank
1167  A803
1168  A803              ; Include all maths libraries to test assembly
1169  A803
1170  A803                  INCLUDE "./Maths/addhldesigned.asm"
# file opened: ./Maths/addhldesigned.asm
   1+ A803 CB 7C        addhldesigned:          bit     7,h
   2+ A805 20 03                                jr      nz,.noneghl
   3+ A807 CD 1F AE                             call    negate16hl
   4+ A80A CB 7A        .noneghl:               bit     7,d
   5+ A80C 20 03                                jr      nz,.nonegde
   6+ A80E CD 26 AE                             call    negate16de
   7+ A811 19           .nonegde:               add     hl,de                       ; do 2'd c add
   8+ A812 AF                                   xor     a                           ; assume positive
   9+ A813 CB 7C                                bit     7,h
  10+ A815 C8                                   ret     z                           ; if not set then can exit early
  11+ A816 CD 1F AE                             call    negate16hl
  12+ A819 3E FF                                ld      a,$FF
  13+ A81B C9                                   ret
  14+ A81C
# file closed: ./Maths/addhldesigned.asm
1171  A81C                  INCLUDE "./Maths/asm_add.asm"
# file opened: ./Maths/asm_add.asm
   1+ A81C
   2+ A81C              ; HL(2sc) = HL (signed) + A (unsigned), uses HL, DE, A
   3+ A81C 16 00        HL2cEquHLSgnPlusAusgn:  ld      d,0
   4+ A81E 5F                                   ld      e,a                         ; set up DE = A
   5+ A81F 7C                                   ld      a,h
   6+ A820 E6 7F                                and     SignMask8Bit
   7+ A822 28 07                                jr      z,.HLPositive               ; if HL is negative then do HL - A
   8+ A824 67           .HLNegative:            ld      h,a                         ; hl = ABS (HL)
   9+ A825                                      NegHL                               ; hl = - hl
   9+ A825 AF          >                    xor a
   9+ A826 95          >                    sub l
   9+ A827 6F          >                    ld l,a
   9+ A828 9F          >                    sbc a,a
   9+ A829 94          >                    sub h
   9+ A82A 67          >                    ld h,a
  10+ A82B              .HLPositive:            ClearCarryFlag                      ; now do adc hl,de
  10+ A82B B7          >                        or a
  11+ A82C ED 5A                                adc     hl,de                       ; aftert his hl will be 2's c
  12+ A82E C9                                   ret
  13+ A82F
  14+ A82F 5F           HLEquHLSgnPlusAusgn:    ld      e,a
  15+ A830 7C                                   ld      a,h
  16+ A831 E6 7F                                and     SignMask8Bit
  17+ A833 20 04                                jr      nz,.HLNegative              ; if HL is negative then do HL - A
  18+ A835 7B           .HLPositive:            ld      a,e                         ; else its HL + A
  19+ A836 ED 31                                add     hl,a
  20+ A838 C9                                   ret
  21+ A839              .HLNegative:            ClearSignBit    h                   ; Clear sign of HL
  21+ A839 7C          >                        ld      a,h
  21+ A83A E6 7F       >                        and     SignMask8Bit
  21+ A83C 67          >                        ld      h,a
  22+ A83D                                      NegHL                               ; and convert to 2's C
  22+ A83D AF          >                    xor a
  22+ A83E 95          >                    sub l
  22+ A83F 6F          >                    ld l,a
  22+ A840 9F          >                    sbc a,a
  22+ A841 94          >                    sub h
  22+ A842 67          >                    ld h,a
  23+ A843 16 00                                ld      d,0
  24+ A845                                      ClearCarryFlag
  24+ A845 B7          >                        or a
  25+ A846 ED 52                                sbc     hl,de                       ; now add a to -ve HL , add does not do 2's c
  26+ A848 FA 50 A8                             jp      m,.FlipResult               ; if it was negative then its really positive
  27+ A84B                                      SetSignBit      h
  27+ A84B 7C          >                        ld      a,h
  27+ A84C F6 80       >                        or      SignOnly8Bit
  27+ A84E 67          >                        ld      h,a
  28+ A84F C9                                   ret
  29+ A850              .FlipResult:            NegHL                               ; so if -hl + A => HL - A => HL - DE is negative then the actual result is +ve
  29+ A850 AF          >                    xor a
  29+ A851 95          >                    sub l
  29+ A852 6F          >                    ld l,a
  29+ A853 9F          >                    sbc a,a
  29+ A854 94          >                    sub h
  29+ A855 67          >                    ld h,a
  30+ A856 C9                                   ret
  31+ A857
  32+ A857
  33+ A857
  34+ A857              ; HL = HL (signed) + A (unsigned), uses HL, DE, A
  35+ A857 57           AddAusngToHLsng:        ld      d,a
  36+ A858 5C                                   ld      e,h
  37+ A859 7C                                   ld      a,h
  38+ A85A E6 7F                                and     SignMask8Bit
  39+ A85C 67                                   ld      h,a
  40+ A85D 7A                                   ld      a,d
  41+ A85E ED 31                                add     hl,a
  42+ A860 7B                                   ld      a,e
  43+ A861 E6 80                                and     SignOnly8Bit
  44+ A863 B4                                   or      h
  45+ A864 C9                                   ret
  46+ A865              ; HL = A (unsigned) - HL (signed), uses HL, DE, BC, A
  47+ A865 44           HLEequAusngMinusHLsng:  ld      b,h
  48+ A866 4F                                   ld      c,a
  49+ A867 78                                   ld      a,b
  50+ A868 E6 80                                and     SignOnly8Bit
  51+ A86A 20 08                                jr      nz,.DoAdd
  52+ A86C EB           .DoSubtract:            ex      de,hl               ; move hl into de
  53+ A86D 26 00                                ld      h,0                 ; hl = a
  54+ A86F 69                                   ld      l,c
  55+ A870                                      ClearCarryFlag
  55+ A870 B7          >                        or a
  56+ A871 ED 52                                sbc     hl,de               ; hl = a - hl
  57+ A873 C9                                   ret
  58+ A874 79           .DoAdd:                 ld      a,c
  59+ A875 ED 31                                add hl,a
  60+ A877 C9                                   ret
  61+ A878              ;tested mathstestsun2
  62+ A878              ; DEL = DEL + BCH signed, uses BC, DE, HL, IY, A
  63+ A878 78           AddBCHtoDELsigned:      ld      a,b                 ; Are the values both the same sign?
  64+ A879 AA                                   xor     d                   ; .
  65+ A87A E6 80                                and     SignOnly8Bit        ; .
  66+ A87C 20 19                                jr      nz,.SignDifferent   ; .
  67+ A87E 78           .SignSame:              ld      a,b                 ; if they are then we only need 1 signe
  68+ A87F E6 80                                and     SignOnly8Bit        ; so store it in iyh
  69+ A881 FD 67                                ld      iyh,a               ;
  70+ A883 78                                   ld      a,b                 ; bch = abs bch
  71+ A884 E6 7F                                and     SignMask8Bit        ; .
  72+ A886 47                                   ld      b,a                 ; .
  73+ A887 7A                                   ld      a,d                 ; del = abs del
  74+ A888 E6 7F                                and     SignMask8Bit        ; .
  75+ A88A 57                                   ld      d,a                 ; .
  76+ A88B 7C                                   ld      a,h                 ; l = h + l
  77+ A88C 85                                   add     l                   ; .
  78+ A88D 6F                                   ld      l,a                 ; .
  79+ A88E 79                                   ld      a,c                 ; e = e + c + carry
  80+ A88F 8B                                   adc     e                   ; .
  81+ A890 5F                                   ld      e,a                 ; .
  82+ A891 78                                   ld      a,b                 ; d = b + d + carry (signed)
  83+ A892 8A                                   adc     d                   ;
  84+ A893 FD B4                                or      iyh                 ; d = or back in sign bit
  85+ A895 57                                   ld      d,a                 ;
  86+ A896 C9                                   ret                         ; done
  87+ A897 78           .SignDifferent:         ld      a,b                 ; bch = abs bch
  88+ A898 FD 67                                ld      iyh,a               ; iyh = b sign
  89+ A89A E6 7F                                and     SignMask8Bit        ; .
  90+ A89C 47                                   ld      b,a                 ; .
  91+ A89D 7A                                   ld      a,d                 ; del = abs del
  92+ A89E FD 6F                                ld      iyl,a               ; iyl = d sign
  93+ A8A0 E6 7F                                and     SignMask8Bit        ; .
  94+ A8A2 57                                   ld      d,a                 ; .
  95+ A8A3 E5                                   push    hl                  ; hl = bc - de
  96+ A8A4 60 69                                ld      hl,bc               ; if bc < de then there is a carry
  97+ A8A6 ED 52                                sbc     hl,de               ;
  98+ A8A8 E1                                   pop     hl                  ;
  99+ A8A9 38 0E                                jr      c,.BCHltDEL
 100+ A8AB 20 1C                                jr      nz,.DELltBCH        ; if the result was not zero then DEL > BCH
 101+ A8AD 7C           .BCeqDE:                ld      a,h                 ; if the result was zero then check lowest bits
 102+ A8AE                                      JumpIfALTNusng l,.BCHltDEL
 102+ A8AE BD          >                        cp      l
 102+ A8AF DA B9 A8    >                        jp		c, .BCHltDEL
 103+ A8B2 20 15                                jr      nz,.DELltBCH
 104+ A8B4              ; The same so its just zero
 105+ A8B4 AF           .BCHeqDEL:              xor     a                  ; its just zero
 106+ A8B5 57                                   ld      d,a                ; .
 107+ A8B6 5F                                   ld      e,a                ; .
 108+ A8B7 6F                                   ld      l,a                ; .
 109+ A8B8 C9                                   ret                        ; .
 110+ A8B9              ;BCH is less than DEL so its DEL - BCH the sort out sign
 111+ A8B9 7D           .BCHltDEL:              ld      a,l                ; l = l - h                      ; ex
 112+ A8BA 94                                   sub     h                  ; .                              ;   01D70F DEL
 113+ A8BB 6F                                   ld      l,a                ; .                              ;  -000028 BCH
 114+ A8BC 7B                                   ld      a,e                ; e = e - c - carry              ;1.
 115+ A8BD 99                                   sbc     c                  ; .                              ;
 116+ A8BE 5F                                   ld      e,a                ; .                              ;
 117+ A8BF 7A                                   ld      a,d                ; d = d - b - carry              ;
 118+ A8C0 98                                   sbc     b                  ; .                              ;
 119+ A8C1 57                                   ld      d,a                ; .                              ;
 120+ A8C2 FD 7D                                ld      a,iyl              ; as d was larger, take d sign
 121+ A8C4 E6 80                                and     SignOnly8Bit       ;
 122+ A8C6 B2                                   or      d                  ;
 123+ A8C7 57                                   ld      d,a                ;
 124+ A8C8 C9                                   ret
 125+ A8C9 7C           .DELltBCH:              ld      a,h                ; l = h - l
 126+ A8CA 95                                   sub     l                  ;
 127+ A8CB 6F                                   ld      l,a                ;
 128+ A8CC 79                                   ld      a,c                ; e = c - e - carry
 129+ A8CD 9B                                   sbc     e                  ;
 130+ A8CE 5F                                   ld      e,a                ;
 131+ A8CF 78                                   ld      a,b                ; d = b - d - carry
 132+ A8D0 9A                                   sbc     d                  ;
 133+ A8D1 57                                   ld      d,a                ;
 134+ A8D2 FD 7C                                ld      a,iyh              ; as b was larger, take b sign into d
 135+ A8D4 E6 80                                and     SignOnly8Bit       ;
 136+ A8D6 B2                                   or      d                  ;
 137+ A8D7 57                                   ld      d,a                ;
 138+ A8D8 C9                                   ret
 139+ A8D9
 140+ A8D9
 141+ A8D9              ;BHL = AHL + DE where AHL = 16 bit + A sign and DE = 15 bit signed
 142+ A8D9 47           AddAHLtoDEsigned:       ld      b,a                     ; B = A , C = D (save sign bytes)
 143+ A8DA 4A                                   ld      c,d                     ; .
 144+ A8DB A9                                   xor     c                       ; A = A xor C
 145+ A8DC CB BA                                res     7,d                     ; clear sign bit of D
 146+ A8DE 20 02                                jr nz,  .OppositeSigns          ; if A xor C is opposite signs job to A0A1
 147+ A8E0 19                                   add     hl,de                   ; HL = HL + DE
 148+ A8E1 C9                                   ret                             ; return
 149+ A8E2 ED 52        .OppositeSigns:         sbc     hl,de                   ; HL = HL -DE
 150+ A8E4 D0                                   ret     nc                      ; if no carry return
 151+ A8E5 19                                   add     hl,de                   ; else HL = HL + DE
 152+ A8E6 EB                                   ex      de,hl                   ;      swap HL and DE
 153+ A8E7 A7                                   and     a                       ;      reset carry
 154+ A8E8 ED 52                                sbc     hl,de                   ;      HL = DE - HL (as they were swapped)
 155+ A8EA 41                                   ld      b,c                     ;      B = sign of C
 156+ A8EB C9                                   ret                             ;      ret
 157+ A8EC
 158+ A8EC
 159+ A8EC
 160+ A8EC              ; a = value to add
 161+ A8EC              ; b = offset (equivalent to regX)
 162+ A8EC              ; returns INWK [x] set to new value
 163+ A8EC              addINWKbasigned:
 164+ A8EC 21 0C C0     		ld 		hl,UBnKxlo                  ; hl = INWK 0
 165+ A8EF 4F           		ld      c,a                         ; preserve a
 166+ A8F0 78           		ld		a,b
 167+ A8F1 ED 31        		add		hl,a                        ; hl = INWK[x]
 168+ A8F3 79                   ld      a,c                         ; get back a value
 169+ A8F4 E6 80                and     $80                         ; get sign bit from a
 170+ A8F6 47                   ld      b,a                         ; now b = sign bit of a
 171+ A8F7 79                   ld      a,c                         ; a = original value
 172+ A8F8 E6 7F                and     SignMask8Bit                ; a = unsigned version of original value
 173+ A8FA              ; hl = unsigned version of INWK0[b]
 174+ A8FA              ; a = value to add, also in c which will optimise later code
 175+ A8FA              ; b = sign bit of a ( in old code was varT)
 176+ A8FA              addhlcsigned:
 177+ A8FA 5E                   ld      e,(hl)                      ; de = INKK value
 178+ A8FB 23                   inc     hl
 179+ A8FC 56                   ld      d,(hl)
 180+ A8FD 23                   inc     hl                          ; now pointing a sign
 181+ A8FE 7E                   ld      a,(hl)                      ; a = sign bit
 182+ A8FF EB                   ex      de,hl                       ; hl = value now and de = pointer to sign
 183+ A900 A8                   xor     b                           ; a = resultant sign
 184+ A901 CB 7F                bit     7,a                         ; is it negative?
 185+ A903 28 28                jr      z,.postivecalc
 186+ A905              .negativecalc:
 187+ A905 7C                   ld      a,h
 188+ A906 E6 7F                and     SignMask8Bit
 189+ A908 67                   ld      h,a                         ; strip high bit
 190+ A909 DD 68                ld      ixl,b                       ; save sign bit from b into d
 191+ A90B 06 00                ld      b,0                         ; c = value to subtract so now bc = value to subtract
 192+ A90D ED 42                sbc     hl,bc
 193+ A90F DD 45                ld      b,ixl                       ; get sign back
 194+ A911 EB                   ex      de,hl                       ; de = value hl = pointer to sign
 195+ A912 7E                   ld      a,(hl)                      ;
 196+ A913 E6 7F                and     SignMask8Bit
 197+ A915 DE 00                sbc     a,0                         ; subtract carry which could flip sign bit
 198+ A917 F6 80                or      $80                         ; set bit 0
 199+ A919 A8                   xor     b                           ; flip bit on sign (var T)
 200+ A91A 77                   ld      (hl),a
 201+ A91B 2B                   dec     hl
 202+ A91C 72                   ld      (hl),d
 203+ A91D 2B                   dec     hl
 204+ A91E 73                   ld      (hl),e                      ; write out DE to INKW[x]0,1
 205+ A91F EB                   ex      de,hl                       ; hl = value de = pointer to start if INKW[x]
 206+ A920 D8                   ret     c                           ; if carry was set then we can exit now
 207+ A921              .nocarry:
 208+ A921 CD 1F AE             call    negate16hl                  ; get hl back to positive, a is still inkw+2
 209+ A924 B0                   or      b                           ; b is still varT
 210+ A925 EB                   ex      de,hl                       ; de = value hl = pointer to start if INKW[x]
 211+ A926 73                   ld      (hl),e
 212+ A927 23                   inc     hl
 213+ A928 72                   ld      (hl),d
 214+ A929 23                   inc     hl
 215+ A92A 77                   ld      (hl),a                      ; set sign bit in INKK[x]+2
 216+ A92B EB                   ex      de,hl                       ; hl = value de = pointer to sign
 217+ A92C C9                   ret
 218+ A92D              .postivecalc:
 219+ A92D DD 68                ld      ixl,b
 220+ A92F 06 00                ld      b,0
 221+ A931 19                   add     hl,de
 222+ A932 EB                   ex      de,hl
 223+ A933 DD B5                or      ixl                         ; we don;t need to recover b here
 224+ A935 77                   ld      (hl),a                      ; push sign into INWK[x]
 225+ A936 2B                   dec     hl
 226+ A937 72                   ld      (hl),d
 227+ A938 2B                   dec     hl
 228+ A939 73                   ld      (hl),e
 229+ A93A C9                   ret
 230+ A93B
 231+ A93B              ;a = a AND 80 (i.e. bit 7) =>carry       so value is -
 232+ A93B              ;MVT1
 233+ A93B              ;    S = bits 6 to 0 of A
 234+ A93B              ;    A = sign bit => T
 235+ A93B              ;    xor sign bit with ink[x] Sign
 236+ A93B              ;    if negative thn its not an add
 237+ A93B              ;
 238+ A93B              ;        and h, 7F
 239+ A93B              ;        b = 0
 240+ A93B              ;        c = varS
 241+ A93B              ;        subtract INW[X]hilo, bc
 242+ A93B              ;        retain carry
 243+ A93B              ;        get INKW[x]Sign
 244+ A93B              ;        and 7F
 245+ A93B              ;        subtract carry (so will go negtive if negative)
 246+ A93B              ;        xor bit 7 of h with T to flip bit
 247+ A93B              ;        write to INKW[x]Sign
 248+ A93B              ;
 249+ A93B              ;    else
 250+ A93B              ;MV10.
 251+ A93B              ;        add INWK[x]hi,lo, varS
 252+ A93B              ;        or      sign bit
 253+ A93B
 254+ A93B
# file closed: ./Maths/asm_add.asm
1172  A93B                  INCLUDE "./Maths/Utilities/AddDEToCash.asm"
# file opened: ./Maths/Utilities/AddDEToCash.asm
   1+ A93B              ; Note its big endian
   2+ A93B 2A 26 9F     addDEtoCash:            ld      hl,(Cash)
   3+ A93E 19                                   add     hl,de
   4+ A93F 22 26 9F                             ld      (Cash),hl
   5+ A942 11 00 00                             ld      de,0
   6+ A945 2A 28 9F                             ld      hl,(Cash+2)
   7+ A948 ED 5A                                adc     hl,de
   8+ A94A 22 28 9F                             ld      (Cash+2),hl
   9+ A94D C9                                   ret
  10+ A94E
  11+ A94E 2A 26 9F     subDEfromCash:          ld      hl,(Cash)
  12+ A951 7C                                   ld      a,h
  13+ A952 B5                                   or      l
  14+ A953 2A 28 9F                             ld      hl,(Cash+2)
  15+ A956 B4                                   or      h
  16+ A957 B5                                   or      l
  17+ A958 C8                                   ret     z               ; No cash return
  18+ A959 B7                                   or      a
  19+ A95A 2A 26 9F                             ld      hl,(Cash)
  20+ A95D ED 52                                sbc     hl,de
  21+ A95F 22 26 9F                             ld      (Cash),hl
  22+ A962 11 00 00                             ld      de,0
  23+ A965 2A 28 9F                             ld      hl,(Cash+2)
  24+ A968 ED 52                                sbc     hl,de
  25+ A96A 22 28 9F                             ld      (Cash+2),hl
  26+ A96D                                      JumpOnBitSet h,7,.ZeroCash
  26+ A96D CB 7C       >                        bit 	7,h
  26+ A96F C2 73 A9    >                        jp      nz,.ZeroCash
  27+ A972 C9                                   ret
  28+ A973 21 00 00     .ZeroCash:              ld      hl,0
  29+ A976 22 26 9F                             ld      (Cash),hl
  30+ A979 22 28 9F                             ld      (Cash+2),hl
  31+ A97C C9                                   ret
  32+ A97D
# file closed: ./Maths/Utilities/AddDEToCash.asm
1173  A97D                  INCLUDE "./Maths/DIVD3B2.asm"
# file opened: ./Maths/DIVD3B2.asm
   1+ A97D              ;INPUTS: ahl = dividend cde = divisor
   2+ A97D              ;OUTPUTS: cde = quotient ahl = remainder
   3+ A97D 47           Div24by24:              ld b,a
   4+ A97E E5                                   push hl
   5+ A97F DD E1                                pop ix
   6+ A981 2E 18                                ld l,24
   7+ A983 E5                                   push hl
   8+ A984 AF                                   xor a
   9+ A985 67                                   ld h,a
  10+ A986 6F                                   ld l,a
  11+ A987 DD 29        .Div24by24loop:         add ix,ix
  12+ A989 CB 10                                rl b
  13+ A98B ED 6A                                adc hl,hl
  14+ A98D 17                                   rla
  15+ A98E B9                                   cp c
  16+ A98F 38 0C                                jr c,.Div24by24skip
  17+ A991 20 05                                jr nz,.Div24by24setbit
  18+ A993 ED 52                                sbc hl,de
  19+ A995 19                                   add hl,de
  20+ A996 38 05                                jr c,.Div24by24skip
  21+ A998 ED 52        .Div24by24setbit:       sbc hl,de
  22+ A99A 99                                   sbc a,c
  23+ A99B DD 23                                inc ix
  24+ A99D E3           .Div24by24skip:         ex (sp),hl
  25+ A99E 2D                                   dec l
  26+ A99F E3                                   ex (sp),hl
  27+ A9A0 20 E5                                jr nz,.Div24by24loop
  28+ A9A2 D1                                   pop de
  29+ A9A3 48                                   ld c,b
  30+ A9A4 DD E5                                push ix
  31+ A9A6 D1                                   pop de
  32+ A9A7 C9                                   ret
  33+ A9A8
  34+ A9A8 FD 67        Div24by24ASigned:       ld      iyh,a
  35+ A9AA E6 7F                                and     SignMask8Bit
  36+ A9AC CD 7D A9                             call    Div24by24
  37+ A9AF F5                                   push    af
  38+ A9B0 FD 7C                                ld      a,iyh
  39+ A9B2 E6 80                                and     SignOnly8Bit
  40+ A9B4 B1                                   or      c
  41+ A9B5 4F                                   ld      c,a
  42+ A9B6 F1                                   pop     af
  43+ A9B7 C9                                   ret
  44+ A9B8
  45+ A9B8                                      ; CDE = AHL/CDE, AHL = remainder
  46+ A9B8 FD 67        Div24by24LeadSign:      ld      iyh,a           ; Preserve signed in IYL
  47+ A9BA A9                                   xor     c               ; flip sign if negative
  48+ A9BB E6 80                                and     SignOnly8Bit    ; .
  49+ A9BD FD 6F                                ld      iyl,a           ; .
  50+ A9BF 79                                   ld      a,c             ; make both values ABS
  51+ A9C0 E6 7F                                and     SignMask8Bit    ; .
  52+ A9C2 4F                                   ld      c,a             ; .
  53+ A9C3 FD 7C                                ld      a,iyh           ; .
  54+ A9C5 E6 7F                                and     SignMask8Bit    ; .
  55+ A9C7 CD 7D A9                             call    Div24by24       ; do abs divide
  56+ A9CA FD B5                                or      iyl             ; bring in sign bit
  57+ A9CC FD 67                                ld      iyh,a           ; save a
  58+ A9CE 79                                   ld      a,c             ; sort sign for c
  59+ A9CF FD B5                                or      iyl             ;
  60+ A9D1 4F                                   ld      c,a             ;
  61+ A9D2 FD 7C                                ld      a,iyh           ; sort sign of a
  62+ A9D4 C9                                   ret
  63+ A9D5
  64+ A9D5              ; --------------------------------------------------------------
  65+ A9D5              ;divdide by 16 using undocumented instrunctions
  66+ A9D5              ;Input: BC = Dividend, DE = Divisor, HL = 0
  67+ A9D5              ;Output: BC = Quotient, HL = Remainder
  68+ A9D5 47           PROJ256mulAdivQ:        ld      b,a
  69+ A9D6 0E 00                                ld      c,0
  70+ A9D8 16 00                                ld      d,0
  71+ A9DA 3A 50 9A                             ld      a,(varQ)
  72+ A9DD 5F                                   ld      e,a
  73+ A9DE 21 00 00     PROJDIV16UNDOC:         ld      hl,0
  74+ A9E1 78                                   ld      a,b
  75+ A9E2 06 10                                ld      b,16
  76+ A9E4 CB 31        PROJDIV16UNDOCLOOP:     sll     c       ; unroll 16 times
  77+ A9E6 17                                   rla             ; ...
  78+ A9E7 ED 6A                                adc     hl,hl       ; ...
  79+ A9E9 ED 52                                sbc     hl,de       ; ...
  80+ A9EB 30 02                                jr      nc,PROJDIV16UNDOCSKIP       ; ...
  81+ A9ED 19                                   add     hl,de       ; ...
  82+ A9EE 0D                                   dec     c       ; ...
  83+ A9EF 10 F3        PROJDIV16UNDOCSKIP:     djnz    PROJDIV16UNDOCLOOP
  84+ A9F1 79                                   ld      a,c
  85+ A9F2 32 51 9A                             ld      (varR),a
  86+ A9F5 C9                                   ret
  87+ A9F6
  88+ A9F6
  89+ A9F6
  90+ A9F6
# file closed: ./Maths/DIVD3B2.asm
1174  A9F6                  INCLUDE "./Maths/multiply.asm"
# file opened: ./Maths/multiply.asm
   1+ A9F6              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
   2+ A9F6 2A 51 9A                             ld  hl,(varRS)
   3+ A9F9 3A 50 9A                             ld  a,(varQ)
   4+ A9FC C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
   5+ A9FE 11 00 00                             ld  de,0        ; de = XY
   6+ AA01 47                                   ld  b,a         ; b = Q
   7+ AA02                                      ShiftHLRight1
   7+ AA02 CB 3C       >			   srl h
   7+ AA04 CB 1D       >			   rr  l
   8+ AA06 CB 20                                sla b
   9+ AA08 30 03                                jr  nc,.LL126
  10+ AA0A EB           .LL125:                 ex de,hl
  11+ AA0B 19                                   add hl,de
  12+ AA0C EB                                   ex  de,hl       ; de = de + rs
  13+ AA0D              .LL126:                 ShiftHLRight1
  13+ AA0D CB 3C       >			   srl h
  13+ AA0F CB 1D       >			   rr  l
  14+ AA11 CB 20                                sla b
  15+ AA13 38 F5                                jr      c,.LL125
  16+ AA15 20 F6                                jr      nz,.LL126
  17+ AA17 EB                                   ex      de,hl   ; hl = result
  18+ AA18 D1 C1                                pop     bc,,de
  19+ AA1A C9                                   ret
  20+ AA1B
  21+ AA1B
  22+ AA1B              MacroDEEquQmulASigned:  MACRO
  23+ AA1B ~                                    ld      d,a                         ; save a into d
  24+ AA1B ~                                    ld      a,(varQ)
  25+ AA1B ~                                    ld      e,a
  26+ AA1B ~                                    xor     d                           ; a = a xor var Q
  27+ AA1B ~                                    and     SignOnly8Bit
  28+ AA1B ~                                    ld      b,a                         ; b = sign of a xor q
  29+ AA1B ~                                    ld      a,d                         ; d = abs d (or a reg)
  30+ AA1B ~                                    and     SignMask8Bit
  31+ AA1B ~                                    ld      d,a
  32+ AA1B ~                                    ld      a,e                         ; e = abs e (or varQ)
  33+ AA1B ~                                    and     SignMask8Bit
  34+ AA1B ~                                    ld      e,a
  35+ AA1B ~                                    mul                                 ; de = a * Q
  36+ AA1B ~                                    ld      a,d
  37+ AA1B ~                                    or      b                           ; de = a * Q leading sign bit
  38+ AA1B ~                                    ld      d,a
  39+ AA1B                                      ENDM
  40+ AA1B
  41+ AA1B
  42+ AA1B
  43+ AA1B                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
  44+ AA1B              madXAequQmulAaddRS:     MacroDEEquQmulASigned
  44+ AA1B 57          >                        ld      d,a                         ; save a into d
  44+ AA1C 3A 50 9A    >                        ld      a,(varQ)
  44+ AA1F 5F          >                        ld      e,a
  44+ AA20 AA          >                        xor     d                           ; a = a xor var Q
  44+ AA21 E6 80       >                        and     SignOnly8Bit
  44+ AA23 47          >                        ld      b,a                         ; b = sign of a xor q
  44+ AA24 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  44+ AA25 E6 7F       >                        and     SignMask8Bit
  44+ AA27 57          >                        ld      d,a
  44+ AA28 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  44+ AA29 E6 7F       >                        and     SignMask8Bit
  44+ AA2B 5F          >                        ld      e,a
  44+ AA2C ED 30       >                        mul                                 ; de = a * Q
  44+ AA2E 7A          >                        ld      a,d
  44+ AA2F B0          >                        or      b                           ; de = a * Q leading sign bit
  44+ AA30 57          >                        ld      d,a
  45+ AA31 2A 51 9A     madDEaddRS:             ld		hl,(varR)
  46+ AA34 CD 3D AA                             call	madXAAddHLDESigned
  47+ AA37 EB                                   ex      de,hl                       ; de = R.S + DE
  48+ AA38                                      ClearCarryFlag
  48+ AA38 B7          >                        or a
  49+ AA39 DD 6B                                ld      ixl,e
  50+ AA3B 7A                                   ld      a,d
  51+ AA3C C9                                   ret
  52+ AA3D
  53+ AA3D
  54+ AA3D 7C           madXAAddHLDESigned:     ld      a,h
  55+ AA3E E6 80                                and     SignOnly8Bit
  56+ AA40 47                                   ld      b,a                         ;save sign bit in b
  57+ AA41 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  58+ AA42                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
  58+ AA42 FA 5A AA    >                        jp		m, .ADDHLDEOppSGN
  59+ AA45 78           .ADDHLDESameSigns:       ld      a,b
  60+ AA46 B2                                   or      d
  61+ AA47                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
  61+ AA47 FA 4C AA    >                        jp		m, .ADDHLDESameNeg
  62+ AA4A 19                                   add     hl,de
  63+ AA4B C9                                   ret
  64+ AA4C 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  65+ AA4D E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  66+ AA4F 67                                   ld      h,a
  67+ AA50 7A                                   ld      a,d
  68+ AA51 E6 7F                                and     SignMask8Bit
  69+ AA53 57                                   ld      d,a
  70+ AA54 19                                   add     hl,de
  71+ AA55 3E 80                                ld      a,SignOnly8Bit
  72+ AA57 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  73+ AA58 67                                   ld      h,a
  74+ AA59 C9                                   ret
  75+ AA5A 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  76+ AA5B E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  77+ AA5D 67                                   ld      h,a
  78+ AA5E 7A                                   ld      a,d
  79+ AA5F E6 7F                                and     SignMask8Bit
  80+ AA61 57                                   ld      d,a
  81+ AA62 B7                                   or      a
  82+ AA63 ED 52                                sbc     hl,de
  83+ AA65 38 04                                jr      c,.ADDHLDEOppInvert
  84+ AA67 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  85+ AA68 B4                                   or      h
  86+ AA69 67                                   ld      h,a                         ; set the previou sign value
  87+ AA6A C9                                   ret
  88+ AA6B              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
  88+ AA6B AF          >                    xor a
  88+ AA6C 95          >                    sub l
  88+ AA6D 6F          >                    ld l,a
  88+ AA6E 9F          >                    sbc a,a
  88+ AA6F 94          >                    sub h
  88+ AA70 67          >                    ld h,a
  89+ AA71 78                                   ld      a,b
  90+ AA72 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  91+ AA74 B4                                   or      h
  92+ AA75 67                                   ld      h,a                         ; recover sign
  93+ AA76 C9                                   ret
  94+ AA77
  95+ AA77
  96+ AA77                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
  97+ AA77                  ;
  98+ AA77                  ; enter : hl = 16-bit multiplier   = x
  99+ AA77                  ;          e =  8-bit multiplicand = y
 100+ AA77                  ;
 101+ AA77                  ; exit  : ahl = 24-bit product
 102+ AA77                  ;         carry reset
 103+ AA77                  ;
 104+ AA77                  ; uses  : af, de, hl
 105+ AA77 54           AHLequHLmulE:           ld d,h                      ; xh
 106+ AA78 63                                   ld h,e                      ; yl
 107+ AA79 ED 30                                mul de                      ; xh*yl
 108+ AA7B EB                                   ex de,hl
 109+ AA7C ED 30                                mul de                      ; yl*xl, hl = xh*yl
 110+ AA7E
 111+ AA7E 7A                                   ld  a,d                     ; sum products
 112+ AA7F 85                                   add a,l
 113+ AA80 57                                   ld  d,a
 114+ AA81 EB                                   ex de,hl
 115+ AA82
 116+ AA82 7A                                   ld  a,d
 117+ AA83 CE 00                                adc a,0
 118+ AA85 C9                                   ret
 119+ AA86
 120+ AA86
 121+ AA86
 122+ AA86                 ; multiplication of two 16-bit numbers into a 32-bit product
 123+ AA86                 ;
 124+ AA86                 ; enter : de = 16-bit multiplicand = y
 125+ AA86                 ;         hl = 16-bit multiplicand = x
 126+ AA86                 ;
 127+ AA86                 ; exit  : dehl = 32-bit product
 128+ AA86                 ;         carry reset
 129+ AA86                 ;
 130+ AA86                 ; uses  : af, bc, de, hl
 131+ AA86
 132+ AA86
 133+ AA86
 134+ AA86 45           DEHLequDEmulHL:         ld b,l                      ; x0
 135+ AA87 4B                                   ld c,e                      ; y0
 136+ AA88 5D                                   ld e,l                      ; x0
 137+ AA89 6A                                   ld l,d
 138+ AA8A E5                                   push hl                     ; x1 y1
 139+ AA8B 69                                   ld l,c                      ; y0
 140+ AA8C              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
 141+ AA8C ED 30                                mul de                      ; y1*x0
 142+ AA8E EB                                   ex de,hl
 143+ AA8F ED 30                                mul de                      ; x1*y0
 144+ AA91
 145+ AA91 AF                                   xor a                       ; zero A
 146+ AA92 19                                   add hl,de                   ; sum cross products p2 p1
 147+ AA93 8F                                   adc a,a                     ; capture carry p3
 148+ AA94
 149+ AA94 59                                   ld e,c                      ; x0
 150+ AA95 50                                   ld d,b                      ; y0
 151+ AA96 ED 30                                mul de                      ; y0*x0
 152+ AA98
 153+ AA98 47                                   ld b,a                      ; carry from cross products
 154+ AA99 4C                                   ld c,h                      ; LSB of MSW from cross products
 155+ AA9A
 156+ AA9A 7A                                   ld a,d
 157+ AA9B 85                                   add a,l
 158+ AA9C 67                                   ld h,a
 159+ AA9D 6B                                   ld l,e                      ; LSW in HL p1 p0
 160+ AA9E
 161+ AA9E D1                                   pop de
 162+ AA9F ED 30                                mul de                      ; x1*y1
 163+ AAA1
 164+ AAA1 EB                                   ex de,hl
 165+ AAA2 ED 4A                                adc hl,bc
 166+ AAA4 EB                                   ex de,hl                    ; de = final MSW
 167+ AAA5
 168+ AAA5 C9                                   ret
 169+ AAA6
 170+ AAA6              ; multiplication of two 16-bit numbers into a 16-bit product
 171+ AAA6              ; enter : de = 16-bit multiplicand
 172+ AAA6              ;         hl = 16-bit multiplicand
 173+ AAA6              ; exit  : hl = 16-bit product
 174+ AAA6              ;         carry reset
 175+ AAA6              ; maths is
 176+ AAA6              ;        hl = y , de= x
 177+ AAA6              ;        hl = xhi,ylo + (yhigh * xlow)
 178+ AAA6              ;        hl = yhih & xlo + x
 179+ AAA6              ;
 180+ AAA6              ;
 181+ AAA6              ; uses  : af, bc, de, hl
 182+ AAA6 C5           mulDEbyHL:              push    bc
 183+ AAA7 7A                                   ld a,d                      ; a = xh
 184+ AAA8 54                                   ld d,h                      ; d = yh
 185+ AAA9 67                                   ld h,a                      ; h = xh
 186+ AAAA 4B                                   ld c,e                      ; c = xl
 187+ AAAB 45                                   ld b,l                      ; b = yl
 188+ AAAC ED 30                                mul                         ; yh * yl
 189+ AAAE EB                                   ex de,hl
 190+ AAAF ED 30                                mul                         ; xh * yl
 191+ AAB1 19                                   add hl,de                   ; add cross products
 192+ AAB2 59                                   ld e,c
 193+ AAB3 50                                   ld d,b
 194+ AAB4 ED 30                                mul                         ; yl * xl
 195+ AAB6 7D                                   ld a,l                      ; cross products lsb
 196+ AAB7 82                                   add a,d                     ; add to msb final
 197+ AAB8 67                                   ld h,a
 198+ AAB9 6B                                   ld l,e                      ; hl = final
 199+ AABA                                      ; 83 cycles, 19 bytes
 200+ AABA AF                                   xor a                       ; reset carry
 201+ AABB C1                                   pop     bc
 202+ AABC C9                                   ret
 203+ AABD
 204+ AABD
 205+ AABD              ; CHL = multiplicand D = multiplier
 206+ AABD              ; DCHL = CHL * D
 207+ AABD 7A           mulCHLbyDSigned:        ld      a,d                 ; get sign from d
 208+ AABE AC                                   xor     h                   ; xor with h to get resultant sign
 209+ AABF E6 80                                and     SignOnly8Bit        ; .
 210+ AAC1 FD 67                                ld      iyh,a               ; iyh = copy of sign
 211+ AAC3 79                                   ld      a,c                 ; now CHL = ABS (CHL)
 212+ AAC4 E6 7F                                and     SignMask8Bit        ; .
 213+ AAC6 4F                                   ld      c,a                 ; .
 214+ AAC7 7A                                   ld      a,d                 ; d = ABS D
 215+ AAC8 E6 7F                                and     SignMask8Bit        ; .
 216+ AACA              ; At this point CHL = ABS (HLE), A = ABS(D)
 217+ AACA 57           .mul1:                  ld      d,a                 ; first do D * L
 218+ AACB 5D                                   ld      e,l                 ; .
 219+ AACC ED 30                                mul     de                  ; DE = L * D
 220+ AACE 08                                   ex      af,af'              ; save multiplier
 221+ AACF 6B                                   ld      l,e                 ; L = p0
 222+ AAD0 7A                                   ld      a,d                 ; carry byte
 223+ AAD1 08                                   ex      af,af'              ; retrieve muliplier and save carry byte along with flags
 224+ AAD2 5C           .mul2:                  ld      e,h                 ; byte 2 of multiplicand
 225+ AAD3 57                                   ld      d,a                 ; and multiplier
 226+ AAD4 ED 30                                mul     de                  ; now its D & L
 227+ AAD6 08                                   ex      af,af'              ; get back carry byte with flags
 228+ AAD7 83           .carrybyte1:            add     a,e                 ; add low byte carry to result and retain carry too through next instructions
 229+ AAD8 67                                   ld      h,a                 ; h = P1
 230+ AAD9 7A                                   ld      a,d                 ; a = carry byte
 231+ AADA 08                                   ex      af,af'              ; save carry byte and get back multiplier with flags
 232+ AADB 59           .mul3:                  ld      e,c                 ; byte 3 of multiplicand
 233+ AADC 57                                   ld      d,a                 ;
 234+ AADD ED 30                                mul     de                  ;
 235+ AADF 08                                   ex      af,af'              ; get back carry byte and carry prior to first add
 236+ AAE0 8B                                   adc     a,e                 ;
 237+ AAE1 FD B4                                or      iyh                 ; recover saved resultant sign
 238+ AAE3 4F                                   ld      c,a                 ; c byte 3. Note the value range allowed can never cause a byte 3 carry
 239+ AAE4 C9                                   ret
 240+ AAE5
 241+ AAE5              ;  CHL = 53456 D = 1E
 242+ AAE5              ;  56 * 1E = A14 L = 14 carry = 0A
 243+ AAE5              ;  34 * 1E = 618 H = 18 +A = 22 carry = 6
 244+ AAE5              ;  5  * 1E = 096 C = 96 + 6 = 9C
 245+ AAE5              ;  CHL = 9C2214
 246+ AAE5
 247+ AAE5              ; DELC = HLE * D, uses HL, DE, C , A , IYH
 248+ AAE5              ; HLE = multiplicand D = multiplier
 249+ AAE5              ; tested by mathstestsun.asm all passed
 250+ AAE5 7A           mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 251+ AAE6 AC                                   xor     h                   ; xor with h to get resultant sign
 252+ AAE7 E6 80                                and     SignOnly8Bit        ; .
 253+ AAE9 FD 67                                ld      iyh,a               ; iyh = copy of sign
 254+ AAEB 7C                                   ld      a,h                 ; now HLE = ABS (HLE)
 255+ AAEC E6 7F                                and     SignMask8Bit        ; .
 256+ AAEE 67                                   ld      h,a                 ; .
 257+ AAEF 7A                                   ld      a,d                 ; d = ABS D
 258+ AAF0 E6 7F                                and     SignMask8Bit        ; .
 259+ AAF2 57                                   ld      d,a                 ; .
 260+ AAF3              ; At this point HLE = ABS (HLE), A = ABS(D)
 261+ AAF3 ED 30        .mul1:                  mul     de                  ; C = E * D
 262+ AAF5 08                                   ex      af,af'              ; save mulitplier
 263+ AAF6 4B                                   ld      c,e                 ; C = p0
 264+ AAF7 7A                                   ld      a,d                 ; save carry and get back multiplier
 265+ AAF8 08                                   ex      af,af'
 266+ AAF9 5D           .mul2:                  ld      e,l                 ; L = L * D
 267+ AAFA 57                                   ld      d,a                 ; .
 268+ AAFB ED 30                                mul     de                  ; .
 269+ AAFD 08                                   ex      af,af'              ; .
 270+ AAFE 83           .carrybyte1:            add     a,e                 ; L = L + carry byte
 271+ AAFF 6F                                   ld      l,a                 ; .
 272+ AB00 7A                                   ld      a,d
 273+ AB01 08                                   ex      af,af'              ; save new carry byte
 274+ AB02 5C           .mul3:                  ld      e,h                 ; e = H * D
 275+ AB03 57                                   ld      d,a
 276+ AB04 ED 30                                mul     de
 277+ AB06 08                                   ex      af,af'
 278+ AB07 8B                                   adc     a,e                 ;
 279+ AB08 5F                                   ld      e,a
 280+ AB09 FD 54                                ld      d,iyh
 281+ AB0B C9                                   ret
 282+ AB0C
 283+ AB0C
 284+ AB0C              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
 285+ AB0C              ; enter : de = 16-bit multiplicand
 286+ AB0C              ;         hl = 16-bit multiplicand
 287+ AB0C              ; exit  : hl = 16-bit product
 288+ AB0C              ;         carry reset
 289+ AB0C              ;
 290+ AB0C              ; uses  : af, bc, de, hl
 291+ AB0C 00           mulDEbyHLSignByte       DB      0
 292+ AB0D AF           mulDEbyHLSgnTo2c:       xor     a
 293+ AB0E 32 0C AB                             ld      (mulDEbyHLSignByte),a
 294+ AB11 7A           .SignDE:                ld      a,d
 295+ AB12 ED 27 80                             test    $80
 296+ AB15 28 08                                jr      z,.SignHL
 297+ AB17 E6 7F        .NegativeDE:            and     $7F
 298+ AB19 57                                   ld      d,a
 299+ AB1A 3E 80                                ld      a,$80
 300+ AB1C 32 0C AB                             ld      (mulDEbyHLSignByte),a
 301+ AB1F 7C           .SignHL:                ld      a,h
 302+ AB20 ED 27 80                             test    $80
 303+ AB23 28 0B                                jr      z,.AbsoluteMultiply
 304+ AB25 E6 7F        .NegativeHL:            and     $7F
 305+ AB27 67                                   ld      h,a
 306+ AB28 3A 0C AB                             ld      a,(mulDEbyHLSignByte)
 307+ AB2B EE 80                                xor     $80
 308+ AB2D 32 0C AB                             ld      (mulDEbyHLSignByte),a
 309+ AB30 CD A6 AA     .AbsoluteMultiply:      call    mulDEbyHL
 310+ AB33 3A 0C AB     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 311+ AB36 ED 27 80                             test    $80
 312+ AB39 C8                                   ret     z
 313+ AB3A AF           .Negateghl: 			xor 	a
 314+ AB3B 95                                   sub 	l
 315+ AB3C 6F                                   ld 		l,a
 316+ AB3D 9F                                   sbc 	a,a
 317+ AB3E 94                                   sub 	h
 318+ AB3F 67                                   ld 		h,a
 319+ AB40 C9                                   ret
 320+ AB41
 321+ AB41 AF           mulDESgnbyHLUnsgnTo2c:  xor     a
 322+ AB42 32 0C AB                             ld      (mulDEbyHLSignByte),a
 323+ AB45 7A           .SignDE:                ld      a,d
 324+ AB46 ED 27 80                             test    $80
 325+ AB49 28 08                                jr      z,.AbsoluteMultiply
 326+ AB4B E6 7F        .NegativeDE:            and     $7F
 327+ AB4D 57                                   ld      d,a
 328+ AB4E 3E 80                                ld      a,$80
 329+ AB50 32 0C AB                             ld      (mulDEbyHLSignByte),a
 330+ AB53 CD A6 AA     .AbsoluteMultiply:      call    mulDEbyHL
 331+ AB56 3A 0C AB     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 332+ AB59 ED 27 80                             test    $80
 333+ AB5C C8                                   ret     z
 334+ AB5D AF           .Negateghl:             xor 	a
 335+ AB5E 95                                   sub 	l
 336+ AB5F 6F                                   ld 		l,a
 337+ AB60 9F                                   sbc 	a,a
 338+ AB61 94                                   sub 	h
 339+ AB62 67                                   ld 		h,a
 340+ AB63 C9                                   ret
 341+ AB64
 342+ AB64
# file closed: ./Maths/multiply.asm
1175  AB64                  INCLUDE "./Maths/asm_square.asm"
# file opened: ./Maths/asm_square.asm
   1+ AB64              ; "ASM_SQUA : TESTGOOD"
   2+ AB64              ; "AP = A^2 A = low,P = hi"
   3+ AB64
   4+ AB64              inline_squde: MACRO
   5+ AB64 ~            			ld	e,a
   6+ AB64 ~            			ld  d,a
   7+ AB64 ~            			mul
   8+ AB64              			ENDM
   9+ AB64
  10+ AB64              inline_squa: MACRO
  11+ AB64 ~            			ld	e,a
  12+ AB64 ~            			ld  d,a
  13+ AB64 ~            			mul
  14+ AB64 ~            			ld	a,e
  15+ AB64              			ENDM
  16+ AB64
  17+ AB64
  18+ AB64              asm_squa:
  19+ AB64 E6 7F        	and SignMask8Bit
  20+ AB66              ; "ASM SQUA2 : TESTGOOD"
  21+ AB66              ; "AP = A^2 A = low,P = hi singed"
  22+ AB66              asm_squa2:
  23+ AB66 5F           	ld e, a
  24+ AB67 57           	ld d,a
  25+ AB68 ED 30        	mul
  26+ AB6A ED 53 4D 99  	ld (varP),de
  27+ AB6E 7B           	ld a,e
  28+ AB6F C9           	ret
# file closed: ./Maths/asm_square.asm
1176  AB70                  INCLUDE "./Maths/asm_sqrt.asm"
# file opened: ./Maths/asm_sqrt.asm
   1+ AB70              ; "ASM SQRT : TESTGOOD"
   2+ AB70              ; "16-bit integer square root"
   3+ AB70              ; "call with de = number to square root"
   4+ AB70              ; "returns   hl = square root"
   5+ AB70              ; "corrupts  bc, de"
   6+ AB70              asm_sqrt:
   7+ AB70 01 00 80     	ld bc,$8000
   8+ AB73 61           	ld h,c
   9+ AB74 69           	ld l,c
  10+ AB75              .sqrloop:
  11+ AB75 CB 38        	srl b
  12+ AB77 CB 19        	rr c
  13+ AB79 09           	add hl,bc
  14+ AB7A EB           	ex de,hl
  15+ AB7B ED 52        	sbc hl,de
  16+ AB7D 38 04        	jr c,.sqrbit
  17+ AB7F EB           	ex de,hl
  18+ AB80 09           	add hl,bc
  19+ AB81 18 05        	jr .sqrfi
  20+ AB83              .sqrbit:
  21+ AB83 19           	add hl,de
  22+ AB84 EB           	ex de,hl
  23+ AB85 B7           	or a
  24+ AB86 ED 42        	sbc hl,bc
  25+ AB88              .sqrfi:
  26+ AB88 CB 3C        	srl h
  27+ AB8A CB 1D        	rr l
  28+ AB8C CB 38        	srl b
  29+ AB8E CB 19        	rr c
  30+ AB90 30 E3        	jr nc,.sqrloop
  31+ AB92 C9           	ret
  32+ AB93
  33+ AB93
  34+ AB93              sqrtQR:					; Q = SQR(Qlo.Rhi) Q <~127
  35+ AB93 3A 50 9A     	ld		a,(varQ)
  36+ AB96 5F           	ld		e,a
  37+ AB97 3A 51 9A     	ld		a,(varR)
  38+ AB9A 57           	ld		d,a
  39+ AB9B CD 70 AB     	call	asm_sqrt
  40+ AB9E 7D               ld      a,l
  41+ AB9F 32 50 9A     	ld		(varQ),a
  42+ ABA2 C9           	ret
  43+ ABA3
# file closed: ./Maths/asm_sqrt.asm
1177  ABA3                  INCLUDE "./Maths/asm_divide.asm"
# file opened: ./Maths/asm_divide.asm
   1+ ABA3              ;
   2+ ABA3              ;   Set flags E to 11111110
   3+ ABA3              ;   Loop:   A << 2
   4+ ABA3              ;           if carry was 0
   5+ ABA3              ;               if a >= D
   6+ ABA3              ;                   A = A - D
   7+ ABA3              ;                   clear carry (probably irrelevant really)
   8+ ABA3              ;           else
   9+ ABA3
  10+ ABA3              ;               sla flags << bringing in carry of 1
  11+ ABA3              ;               if bit 7 of flag was set then loop
  12+ ABA3              ;                                        elase a = e and exit
  13+ ABA3              ;
  14+ ABA3              ;
  15+ ABA3
  16+ ABA3
  17+ ABA3              AEquAmul256DivD:        JumpIfAGTENusng  d, .Ll28Exit255
  17+ ABA3 BA          >                        cp     d
  17+ ABA4 D2 C2 AB    >                        jp		nc,.Ll28Exit255
  18+ ABA7 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
  19+ ABA9 CB 27        .DivideLoop:            sla     a
  20+ ABAB 38 0D                                jr      c,.LL29
  21+ ABAD                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
  21+ ABAD BA          >                        cp      d
  21+ ABAE DA B3 AB    >                        jp		c, .SkipSub
  22+ ABB1 92                                   sub     d
  23+ ABB2                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
  23+ ABB2 B7          >                        or a
  24+ ABB3              .SkipSub:               FlipCarryFlag                       ; if we did the subtract the carry will be clear so we need to invert to roll in.
  24+ ABB3 3F          >                        ccf
  25+ ABB4 CB 13                                rl      e
  26+ ABB6 38 F1                                jr      c,.DivideLoop
  27+ ABB8 7B                                   ld      a,e
  28+ ABB9 C9                                   ret
  29+ ABBA 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
  30+ ABBB                                      SetCarryFlag                        ; Set the C flag to rotate into the result in R
  30+ ABBB 37          >                        scf
  31+ ABBC CB 13                                rl      e                           ; rotate counter e left
  32+ ABBE 38 E9                                jr      c,.DivideLoop               ; if a bit was spat off teh end then loop
  33+ ABC0 7B                                   ld      a,e                         ; stick result in a
  34+ ABC1 C9                                   ret
  35+ ABC2 3E FF        .Ll28Exit255:           ld  a,255                           ; Fail with FF as result
  36+ ABC4 C9                                   ret
  37+ ABC5
  38+ ABC5
  39+ ABC5              ; Divide 8-bit values
  40+ ABC5              ; In: Divide E by divider C
  41+ ABC5              ; Out: A = result, B = rest
  42+ ABC5              ;
  43+ ABC5              ;;;Div8:
  44+ ABC5              ;;;    xor a
  45+ ABC5              ;;;    ld b,8
  46+ ABC5              ;;;Div8_Loop:
  47+ ABC5              ;;;    rl e
  48+ ABC5              ;;;    rla
  49+ ABC5              ;;;    sub c
  50+ ABC5              ;;;    jr nc,Div8_NoAdd
  51+ ABC5              ;;;    add a,c
  52+ ABC5              ;;;Div8_NoAdd:
  53+ ABC5              ;;;    djnz Div8_Loop
  54+ ABC5              ;;;    ld b,a0
  55+ ABC5              ;;;    ld a,e
  56+ ABC5              ;;;    rla
  57+ ABC5              ;;;    cpl
  58+ ABC5              ;;;    ret
  59+ ABC5
  60+ ABC5              ;;Inputs: DE is the numerator, BC is the divisor
  61+ ABC5              ;;Outputs: DE is the result
  62+ ABC5              ;;         A is a copy of E
  63+ ABC5              ;;         HL is the remainder
  64+ ABC5              ;;         BC is not changed
  65+ ABC5              ;; so DE = DE /BC
  66+ ABC5              ;140 bytes
  67+ ABC5              ;145cc
  68+ ABC5
  69+ ABC5              MacroDEDivBC:       MACRO
  70+ ABC5 ~                                rla
  71+ ABC5 ~                                adc     hl,hl
  72+ ABC5 ~                                sbc     hl,bc
  73+ ABC5 ~                                jr      nc,$+3
  74+ ABC5 ~                                add     hl,bc
  75+ ABC5                                  ENDM
  76+ ABC5
  77+ ABC5              DEequDEDivBC:
  78+ ABC5 AF               xor a
  79+ ABC6 ED 62            sbc hl,hl
  80+ ABC8 7A               ld a,d
  81+ ABC9                  MacroDEDivBC
  81+ ABC9 17          >                    rla
  81+ ABCA ED 6A       >                    adc     hl,hl
  81+ ABCC ED 42       >                    sbc     hl,bc
  81+ ABCE 30 01       >                    jr      nc,$+3
  81+ ABD0 09          >                    add     hl,bc
  82+ ABD1                  MacroDEDivBC
  82+ ABD1 17          >                    rla
  82+ ABD2 ED 6A       >                    adc     hl,hl
  82+ ABD4 ED 42       >                    sbc     hl,bc
  82+ ABD6 30 01       >                    jr      nc,$+3
  82+ ABD8 09          >                    add     hl,bc
  83+ ABD9                  MacroDEDivBC
  83+ ABD9 17          >                    rla
  83+ ABDA ED 6A       >                    adc     hl,hl
  83+ ABDC ED 42       >                    sbc     hl,bc
  83+ ABDE 30 01       >                    jr      nc,$+3
  83+ ABE0 09          >                    add     hl,bc
  84+ ABE1                  MacroDEDivBC
  84+ ABE1 17          >                    rla
  84+ ABE2 ED 6A       >                    adc     hl,hl
  84+ ABE4 ED 42       >                    sbc     hl,bc
  84+ ABE6 30 01       >                    jr      nc,$+3
  84+ ABE8 09          >                    add     hl,bc
  85+ ABE9                  MacroDEDivBC
  85+ ABE9 17          >                    rla
  85+ ABEA ED 6A       >                    adc     hl,hl
  85+ ABEC ED 42       >                    sbc     hl,bc
  85+ ABEE 30 01       >                    jr      nc,$+3
  85+ ABF0 09          >                    add     hl,bc
  86+ ABF1                  MacroDEDivBC
  86+ ABF1 17          >                    rla
  86+ ABF2 ED 6A       >                    adc     hl,hl
  86+ ABF4 ED 42       >                    sbc     hl,bc
  86+ ABF6 30 01       >                    jr      nc,$+3
  86+ ABF8 09          >                    add     hl,bc
  87+ ABF9                  MacroDEDivBC
  87+ ABF9 17          >                    rla
  87+ ABFA ED 6A       >                    adc     hl,hl
  87+ ABFC ED 42       >                    sbc     hl,bc
  87+ ABFE 30 01       >                    jr      nc,$+3
  87+ AC00 09          >                    add     hl,bc
  88+ AC01                  MacroDEDivBC
  88+ AC01 17          >                    rla
  88+ AC02 ED 6A       >                    adc     hl,hl
  88+ AC04 ED 42       >                    sbc     hl,bc
  88+ AC06 30 01       >                    jr      nc,$+3
  88+ AC08 09          >                    add     hl,bc
  89+ AC09 17               rla
  90+ AC0A 2F               cpl
  91+ AC0B 57               ld d,a
  92+ AC0C
  93+ AC0C 7B               ld a,e
  94+ AC0D                  MacroDEDivBC
  94+ AC0D 17          >                    rla
  94+ AC0E ED 6A       >                    adc     hl,hl
  94+ AC10 ED 42       >                    sbc     hl,bc
  94+ AC12 30 01       >                    jr      nc,$+3
  94+ AC14 09          >                    add     hl,bc
  95+ AC15                  MacroDEDivBC
  95+ AC15 17          >                    rla
  95+ AC16 ED 6A       >                    adc     hl,hl
  95+ AC18 ED 42       >                    sbc     hl,bc
  95+ AC1A 30 01       >                    jr      nc,$+3
  95+ AC1C 09          >                    add     hl,bc
  96+ AC1D                  MacroDEDivBC
  96+ AC1D 17          >                    rla
  96+ AC1E ED 6A       >                    adc     hl,hl
  96+ AC20 ED 42       >                    sbc     hl,bc
  96+ AC22 30 01       >                    jr      nc,$+3
  96+ AC24 09          >                    add     hl,bc
  97+ AC25                  MacroDEDivBC
  97+ AC25 17          >                    rla
  97+ AC26 ED 6A       >                    adc     hl,hl
  97+ AC28 ED 42       >                    sbc     hl,bc
  97+ AC2A 30 01       >                    jr      nc,$+3
  97+ AC2C 09          >                    add     hl,bc
  98+ AC2D                  MacroDEDivBC
  98+ AC2D 17          >                    rla
  98+ AC2E ED 6A       >                    adc     hl,hl
  98+ AC30 ED 42       >                    sbc     hl,bc
  98+ AC32 30 01       >                    jr      nc,$+3
  98+ AC34 09          >                    add     hl,bc
  99+ AC35                  MacroDEDivBC
  99+ AC35 17          >                    rla
  99+ AC36 ED 6A       >                    adc     hl,hl
  99+ AC38 ED 42       >                    sbc     hl,bc
  99+ AC3A 30 01       >                    jr      nc,$+3
  99+ AC3C 09          >                    add     hl,bc
 100+ AC3D                  MacroDEDivBC
 100+ AC3D 17          >                    rla
 100+ AC3E ED 6A       >                    adc     hl,hl
 100+ AC40 ED 42       >                    sbc     hl,bc
 100+ AC42 30 01       >                    jr      nc,$+3
 100+ AC44 09          >                    add     hl,bc
 101+ AC45                  MacroDEDivBC
 101+ AC45 17          >                    rla
 101+ AC46 ED 6A       >                    adc     hl,hl
 101+ AC48 ED 42       >                    sbc     hl,bc
 101+ AC4A 30 01       >                    jr      nc,$+3
 101+ AC4C 09          >                    add     hl,bc
 102+ AC4D 17               rla
 103+ AC4E 2F               cpl
 104+ AC4F 5F               ld e,a
 105+ AC50 C9               ret
 106+ AC51
 107+ AC51
 108+ AC51
 109+ AC51              ;divdide by 16 using undocumented instrunctions
 110+ AC51              ;Input: BC = Dividend, DE = Divisor, HL = 0
 111+ AC51              ;Output: BC = Quotient, HL = Remainder
 112+ AC51              ; Our use
 113+ AC51              ; BC = A0
 114+ AC51              ; DE = 0C
 115+ AC51              ; so BC = a * 256 / C
 116+ AC51              DIV16Amul256dCUNDOC:    JumpIfAGTENusng	  c,DEV16ATooLarge                                          ; first off if a > c ten return 255
 116+ AC51 B9          >                        cp     c
 116+ AC52 D2 7D AC    >                        jp		nc,DEV16ATooLarge
 117+ AC55 47                                   ld      b,a
 118+ AC56 59                                   ld      e,c
 119+ AC57 0E 00                                ld      c,0
 120+ AC59 16 00                                ld      d,0
 121+ AC5B C3 68 AC                             jp      DIV16UNDOC
 122+ AC5E 47           DIV16Amul256dQUNDOC:    ld      b,a
 123+ AC5F 0E 00                                ld      c,0
 124+ AC61 21 50 9A                             ld      hl,varQ
 125+ AC64 7E                                   ld      a,(hl)
 126+ AC65 16 00                                ld      d,0
 127+ AC67 5F                                   ld      e,a
 128+ AC68              DIV16BCDivDEUNDOC:
 129+ AC68 21 00 00     DIV16UNDOC:             ld      hl,0
 130+ AC6B 78                                   ld      a,b
 131+ AC6C 06 10                                ld      b,16
 132+ AC6E CB 31        DIV16UNDOCLOOP:         sll	c		; unroll 16 times
 133+ AC70 17                                   rla			; ...
 134+ AC71 ED 6A                                adc	hl,hl		; ...
 135+ AC73 ED 52                                sbc	hl,de		; ...
 136+ AC75 30 02                                jr	nc,DIV16UNDOCSKIP		; ...
 137+ AC77 19                                   add	hl,de		; ...
 138+ AC78 0D                                   dec	c		; ...
 139+ AC79 10 F3        DIV16UNDOCSKIP:         djnz DIV16UNDOCLOOP
 140+ AC7B 47                                   ld   b,a
 141+ AC7C C9                                   ret
 142+ AC7D 01 FF 00     DEV16ATooLarge:         ld     bc,$00FF
 143+ AC80 C9                                   ret
 144+ AC81
 145+ AC81              ; "> asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 146+ AC81 06 08        asm_div8:               ld b,8
 147+ AC83 AF                                   xor a
 148+ AC84 CB 21        .div8_loop:	            sla c
 149+ AC86 17                                   rla
 150+ AC87 BA                                   cp d
 151+ AC88 38 02                                jr c,.div8_skip
 151+ AC8A
 152+ AC8A 0C                                   inc c
 153+ AC8B 92                                   sub d
 154+ AC8C 10 F6        .div8_skip:	            djnz .div8_loop
 155+ AC8E C9                                   ret
 156+ AC8F              ; ">asm_div16: HL_Div_C: HL is the numerator,  C is the denominator, output A is the remainder, B is 0, C,DE is not changedHL is the quotient"
 157+ AC8F 06 10        asm_div16:              ld b,16
 158+ AC91 AF                                   xor a
 159+ AC92 CB 25        div16_loop:	            sla l
 160+ AC94 CB 14                                rl	h
 161+ AC96              ;    add hl,hl
 162+ AC96 17                                   rla
 163+ AC97 B9                                   cp c
 164+ AC98 38 02                                jr c,div16_skip
 165+ AC9A 2C                                   inc l
 166+ AC9B 91                                   sub c
 167+ AC9C 10 F4        div16_skip:		        djnz div16_loop
 168+ AC9E C9                                   ret
 169+ AC9F              ;
 170+ AC9F              ; Divide 16-bit values (with 16-bit result)
 171+ AC9F              ; In: Divide BC by divider DE
 172+ AC9F              ; Out: BC = result, HL = rest
 173+ AC9F              ;
 174+ AC9F              HLDivC_Iteration: 	MACRO
 175+ AC9F ~            					add	hl,hl		; unroll 16 times
 176+ AC9F ~            					rla				; ...
 177+ AC9F ~            					cp	c			; ...
 178+ AC9F ~            					jr	1F
 179+ AC9F ~            					sub	c			; ...
 180+ AC9F ~            1:
 181+ AC9F ~            					inc	l			; ...
 182+ AC9F              					ENDM
 183+ AC9F
 184+ AC9F
 185+ AC9F
 186+ AC9F              ; ">div1616: BC = BC / DE. HL = remainder"
 187+ AC9F 21 00 00     Div1616:            ld hl,0
 188+ ACA2 78                               ld a,b
 189+ ACA3 06 08                            ld b,8
 190+ ACA5 17           .Div16_Loop1:       rla
 191+ ACA6 ED 6A                            adc hl,hl
 192+ ACA8 ED 52                            sbc hl,de
 193+ ACAA 30 01                            jr nc,.Div16_NoAdd1
 194+ ACAC 19                               add hl,de
 195+ ACAD 10 F6        .Div16_NoAdd1:      djnz .Div16_Loop1
 196+ ACAF 17                               rla
 197+ ACB0 2F                               cpl
 198+ ACB1 47                               ld b,a
 199+ ACB2 79                               ld a,c
 200+ ACB3 48                               ld c,b
 201+ ACB4 06 08                            ld b,8
 202+ ACB6 17           .Div16_Loop2:       rla
 203+ ACB7 ED 6A                            adc hl,hl
 204+ ACB9 ED 52                            sbc hl,de
 205+ ACBB 30 01                            jr nc,.Div16_NoAdd2
 206+ ACBD 19                               add hl,de
 207+ ACBE 10 F6        .Div16_NoAdd2:      djnz .Div16_Loop2
 208+ ACC0 17                               rla
 209+ ACC1 2F                               cpl
 210+ ACC2 41                               ld b,c
 211+ ACC3 4F                               ld c,a
 212+ ACC4 C9                               ret
 213+ ACC5
 214+ ACC5
 215+ ACC5
 216+ ACC5              BCDIVDE_Iteration: MACRO
 217+ ACC5 ~            				   rla
 218+ ACC5 ~            				   adc	hl,hl
 219+ ACC5 ~            				   add	hl,de
 220+ ACC5 ~            				   jr	c,1F
 221+ ACC5 ~            				   sbc	hl,de
 222+ ACC5 ~            1:
 223+ ACC5              				   ENDM
 224+ ACC5
 225+ ACC5
 226+ ACC5              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop"
 227+ ACC5              ;BC/DE ==> BC, remainder in HL
 228+ ACC5              ;NOTE: BC/0 returns 0 as the quotient.
 229+ ACC5              ;min: 738cc
 230+ ACC5              ;max: 898cc
 231+ ACC5              ;avg: 818cc
 232+ ACC5              ;144 bytes
 233+ ACC5 AF           BC_Div_DE:              xor a
 234+ ACC6 67                                   ld h,a
 235+ ACC7 6F                                   ld l,a
 236+ ACC8 93                                   sub e
 237+ ACC9 5F                                   ld e,a
 238+ ACCA 9F                                   sbc a,a
 239+ ACCB 92                                   sub d
 240+ ACCC 57                                   ld d,a
 241+ ACCD 78                                   ld a,b
 242+ ACCE                                      BCDIVDE_Iteration
 242+ ACCE 17          >				   rla
 242+ ACCF ED 6A       >				   adc	hl,hl
 242+ ACD1 19          >				   add	hl,de
 242+ ACD2 38 02       >				   jr	c,1F
 242+ ACD4 ED 52       >				   sbc	hl,de
 242+ ACD6             >1:
 243+ ACD6                                      BCDIVDE_Iteration
 243+ ACD6 17          >				   rla
 243+ ACD7 ED 6A       >				   adc	hl,hl
 243+ ACD9 19          >				   add	hl,de
 243+ ACDA 38 02       >				   jr	c,1F
 243+ ACDC ED 52       >				   sbc	hl,de
 243+ ACDE             >1:
 244+ ACDE                                      BCDIVDE_Iteration
 244+ ACDE 17          >				   rla
 244+ ACDF ED 6A       >				   adc	hl,hl
 244+ ACE1 19          >				   add	hl,de
 244+ ACE2 38 02       >				   jr	c,1F
 244+ ACE4 ED 52       >				   sbc	hl,de
 244+ ACE6             >1:
 245+ ACE6                                      BCDIVDE_Iteration
 245+ ACE6 17          >				   rla
 245+ ACE7 ED 6A       >				   adc	hl,hl
 245+ ACE9 19          >				   add	hl,de
 245+ ACEA 38 02       >				   jr	c,1F
 245+ ACEC ED 52       >				   sbc	hl,de
 245+ ACEE             >1:
 246+ ACEE                                      BCDIVDE_Iteration
 246+ ACEE 17          >				   rla
 246+ ACEF ED 6A       >				   adc	hl,hl
 246+ ACF1 19          >				   add	hl,de
 246+ ACF2 38 02       >				   jr	c,1F
 246+ ACF4 ED 52       >				   sbc	hl,de
 246+ ACF6             >1:
 247+ ACF6                                      BCDIVDE_Iteration
 247+ ACF6 17          >				   rla
 247+ ACF7 ED 6A       >				   adc	hl,hl
 247+ ACF9 19          >				   add	hl,de
 247+ ACFA 38 02       >				   jr	c,1F
 247+ ACFC ED 52       >				   sbc	hl,de
 247+ ACFE             >1:
 248+ ACFE                                      BCDIVDE_Iteration
 248+ ACFE 17          >				   rla
 248+ ACFF ED 6A       >				   adc	hl,hl
 248+ AD01 19          >				   add	hl,de
 248+ AD02 38 02       >				   jr	c,1F
 248+ AD04 ED 52       >				   sbc	hl,de
 248+ AD06             >1:
 249+ AD06                                      BCDIVDE_Iteration
 249+ AD06 17          >				   rla
 249+ AD07 ED 6A       >				   adc	hl,hl
 249+ AD09 19          >				   add	hl,de
 249+ AD0A 38 02       >				   jr	c,1F
 249+ AD0C ED 52       >				   sbc	hl,de
 249+ AD0E             >1:
 250+ AD0E 17                                   rla
 251+ AD0F 47                                   ld b,a
 252+ AD10
 253+ AD10 79                                   ld a,c
 254+ AD11                                      BCDIVDE_Iteration
 254+ AD11 17          >				   rla
 254+ AD12 ED 6A       >				   adc	hl,hl
 254+ AD14 19          >				   add	hl,de
 254+ AD15 38 02       >				   jr	c,1F
 254+ AD17 ED 52       >				   sbc	hl,de
 254+ AD19             >1:
 255+ AD19                                      BCDIVDE_Iteration
 255+ AD19 17          >				   rla
 255+ AD1A ED 6A       >				   adc	hl,hl
 255+ AD1C 19          >				   add	hl,de
 255+ AD1D 38 02       >				   jr	c,1F
 255+ AD1F ED 52       >				   sbc	hl,de
 255+ AD21             >1:
 256+ AD21                                      BCDIVDE_Iteration
 256+ AD21 17          >				   rla
 256+ AD22 ED 6A       >				   adc	hl,hl
 256+ AD24 19          >				   add	hl,de
 256+ AD25 38 02       >				   jr	c,1F
 256+ AD27 ED 52       >				   sbc	hl,de
 256+ AD29             >1:
 257+ AD29                                      BCDIVDE_Iteration
 257+ AD29 17          >				   rla
 257+ AD2A ED 6A       >				   adc	hl,hl
 257+ AD2C 19          >				   add	hl,de
 257+ AD2D 38 02       >				   jr	c,1F
 257+ AD2F ED 52       >				   sbc	hl,de
 257+ AD31             >1:
 258+ AD31                                      BCDIVDE_Iteration
 258+ AD31 17          >				   rla
 258+ AD32 ED 6A       >				   adc	hl,hl
 258+ AD34 19          >				   add	hl,de
 258+ AD35 38 02       >				   jr	c,1F
 258+ AD37 ED 52       >				   sbc	hl,de
 258+ AD39             >1:
 259+ AD39                                      BCDIVDE_Iteration
 259+ AD39 17          >				   rla
 259+ AD3A ED 6A       >				   adc	hl,hl
 259+ AD3C 19          >				   add	hl,de
 259+ AD3D 38 02       >				   jr	c,1F
 259+ AD3F ED 52       >				   sbc	hl,de
 259+ AD41             >1:
 260+ AD41                                      BCDIVDE_Iteration
 260+ AD41 17          >				   rla
 260+ AD42 ED 6A       >				   adc	hl,hl
 260+ AD44 19          >				   add	hl,de
 260+ AD45 38 02       >				   jr	c,1F
 260+ AD47 ED 52       >				   sbc	hl,de
 260+ AD49             >1:
 261+ AD49                                      BCDIVDE_Iteration
 261+ AD49 17          >				   rla
 261+ AD4A ED 6A       >				   adc	hl,hl
 261+ AD4C 19          >				   add	hl,de
 261+ AD4D 38 02       >				   jr	c,1F
 261+ AD4F ED 52       >				   sbc	hl,de
 261+ AD51             >1:
 262+ AD51 17                                   rla
 263+ AD52 4F                                   ld c,a
 264+ AD53 C9                                   ret
 265+ AD54
 266+ AD54              ;Inputs:
 267+ AD54              ;     DE,BC are 8.8 Fixed Point numbers
 268+ AD54              ;Outputs:
 269+ AD54              ;     DE is the 8.8 Fixed Point result (rounded to the least significant bit)
 270+ AD54              ;if DE is 0 : 122cc or 136cc if BC is negative
 271+ AD54              ;if |BC|>=128*|DE| : 152cc or 166cc if BC is negative
 272+ AD54              ;Otherwise:
 273+ AD54              ;min: 1107cc
 274+ AD54              ;max: 1319cc
 275+ AD54              ;avg: 1201cc
 276+ AD54 78           BC_Div_DE_88:           ld a,b  ; First, find out if the output is positive or negative
 277+ AD55 AA                                   xor d
 278+ AD56 F5                                   push af   ;sign bit is the result sign bit
 279+ AD57              ; Now make sure the inputs are positive
 280+ AD57 A8                                   xor b     ;A now has the value of B, since I XORed it with D twice (cancelling)
 281+ AD58 F2 61 AD                             jp p,BC_Div_DE_88_lbl1   ;if Positive, don't negate
 282+ AD5B AF                                   xor a
 283+ AD5C 91                                   sub c
 284+ AD5D 4F                                   ld c,a
 285+ AD5E 9F                                   sbc a,a
 286+ AD5F 90                                   sub b
 287+ AD60 47                                   ld b,a
 288+ AD61 7A           BC_Div_DE_88_lbl1:      ld a,d  ;now make DE negative to optimize the remainder comparison
 289+ AD62 B2                                   or d
 290+ AD63 FA 6C AD                             jp m,BC_Div_DE_88_lbl2
 291+ AD66 AF                                   xor a
 292+ AD67 93                                   sub e
 293+ AD68 5F                                   ld e,a
 294+ AD69 9F                                   sbc a,a
 295+ AD6A 92                                   sub d
 296+ AD6B 57                                   ld d,a
 297+ AD6C B3           BC_Div_DE_88_lbl2:      or e      ;if DE is 0, we can call it an overflow ;A is the current value of D
 298+ AD6D 28 1D                                jr z,div_fixed88_overflow
 299+ AD6F 26 00                                ld h,0          ;The accumulator gets set to B if no overflow.;We can use H=0 to save a few cc in the meantime
 300+ AD71 78                                   ld a,b;if B+DE>=0, then we'll have overflow
 301+ AD72 83                                   add a,e
 302+ AD73 7A                                   ld a,d
 303+ AD74 8C                                   adc a,h
 304+ AD75 38 15                                jr c,div_fixed88_overflow
 305+ AD77 68                                   ld l,b  ;Now we can load the accumulator/remainder with B;H is already 0
 306+ AD78 79                                   ld a,c
 307+ AD79 CD 94 AD                             call div_fixed88_sub
 308+ AD7C 4F                                   ld c,a
 309+ AD7D 78                                   ld a,b      ;A is now 0
 310+ AD7E CD 94 AD                             call div_fixed88_sub
 311+ AD81 51                                   ld d,c
 312+ AD82 5F                                   ld e,a
 313+ AD83 F1                                   pop af
 314+ AD84 F0                                   ret p
 315+ AD85 AF                                   xor a
 316+ AD86 93                                   sub e
 317+ AD87 5F                                   ld e,a
 318+ AD88 9F                                   sbc a,a
 319+ AD89 92                                   sub d
 320+ AD8A 57                                   ld d,a
 321+ AD8B C9                                   ret
 322+ AD8C
 323+ AD8C 11 FF 7F     div_fixed88_overflow:   ld de,$7FFF
 324+ AD8F F1                                   pop af
 325+ AD90 F0                                   ret p
 326+ AD91 13                                   inc de
 327+ AD92 1C                                   inc e
 328+ AD93 C9                                   ret
 329+ AD94
 330+ AD94              ;min: 456cc
 331+ AD94              ;max: 536cc
 332+ AD94              ;avg: 496cc
 333+ AD94 06 08        div_fixed88_sub:        ld b,8
 334+ AD96 17           BC_Div_DE_88_lbl3:      rla
 335+ AD97 ED 6A                                adc hl,hl
 336+ AD99 19                                   add hl,de
 337+ AD9A 38 02                                jr c,$+4
 338+ AD9C ED 52                                sbc hl,de
 339+ AD9E 10 F6                                djnz BC_Div_DE_88_lbl3
 340+ ADA0 8F                                   adc a,a
 341+ ADA1 C9                                   ret
 342+ ADA2
# file closed: ./Maths/asm_divide.asm
1178  ADA2                  INCLUDE "./Maths/asm_unitvector.asm"
# file opened: ./Maths/asm_unitvector.asm
   1+ ADA2              asm_tis2:
   2+ ADA2              ; ">TIS2 A = (A / Q * 96) so A = -96 ---- 96  range "
   3+ ADA2              ; ">DOES NOT DO SIGNED YET"
   4+ ADA2 F5           	push af
   5+ ADA3 E6 7F            and SignMask8Bit
   6+ ADA5 57           	ld d,a				;; d = A
   7+ ADA6 3A 50 9A     	ld a,(varQ)
   8+ ADA9 5F           	ld e,a
   9+ ADAA 7A           	ld a,d
  10+ ADAB BB           	cp e
  11+ ADAC 30 11        	jr nc, .tis2_set96	;; jump if a >= Q
  12+ ADAE 1E 60        	ld e, 96
  13+ ADB0 ED 30        	mul				; de = d * 96 (also a * 96 )
  14+ ADB2 EB           	ex de,hl
  15+ ADB3 3A 50 9A     	ld a,(varQ)
  16+ ADB6 4F           	ld c,a
  17+ ADB7 CD 8F AC     	call asm_div16
  18+ ADBA F1           	pop af
  19+ ADBB E6 80        	and $80
  20+ ADBD B5           	or l
  21+ ADBE C9           	ret
  22+ ADBF              .tis2_set96:
  23+ ADBF F1           	pop af
  24+ ADC0 E6 80        	and $80
  25+ ADC2 F6 96        	or $96
  26+ ADC4 C9           	ret
  27+ ADC5
  28+ ADC5
  29+ ADC5              asm_unit_vector:
  30+ ADC5              squareregfx:
  31+ ADC5 3A 83 C0     	ld a,(UBnkXScaled)
  32+ ADC8 57           	ld d,a
  33+ ADC9 5F           	ld e,a
  34+ ADCA ED 30        	mul
  35+ ADCC EB           	ex de,hl
  36+ ADCD              squareregfy:
  37+ ADCD 3A 85 C0     	ld a, (UBnkYScaled)
  38+ ADD0 57           	ld d,a
  39+ ADD1 5F           	ld e,a
  40+ ADD2 ED 30        	mul
  41+ ADD4 19           	add hl,de
  42+ ADD5              squareregfz:
  43+ ADD5 3A 87 C0     	ld a, (UBnkZScaled)
  44+ ADD8 57           	ld d,a
  45+ ADD9 5F           	ld e,a
  46+ ADDA ED 30        	mul
  47+ ADDC 19           	add hl,de
  48+ ADDD EB           	ex de,hl			; de de to number to root
  49+ ADDE              hlequsquareroot:
  50+ ADDE CD 70 AB     	call asm_sqrt		; hl = sqrt (fx^2 + fy^2 + fx^2)
  51+ ADE1 E5           	push hl				; save it for work 3 copies
  52+ ADE2 E5           	push hl				; save it for work
  53+ ADE3 E5           	push hl				; save it for work
  54+ ADE4              normfx:
  55+ ADE4 3A 83 C0     	ld a,(UBnkXScaled)
  56+ ADE7 E1           	pop hl				; get copy #1
  57+ ADE8 7D           	ld a,l				; we assume only l had worthwhile data but could spill into h
  58+ ADE9 4F           	ld c,a
  59+ ADEA CD A2 AD     	call asm_tis2
  60+ ADED 32 83 C0     	ld (UBnkXScaled),a
  61+ ADF0              normfy:
  62+ ADF0 3A 85 C0     	ld a,(UBnkYScaled)
  63+ ADF3 E1           	pop hl				; get copy #2
  64+ ADF4 7D           	ld a,l
  65+ ADF5 4F           	ld c,a
  66+ ADF6 CD A2 AD     	call asm_tis2
  67+ ADF9 32 85 C0     	ld (UBnkYScaled),a
  68+ ADFC              normfz:
  69+ ADFC 3A 87 C0     	ld a,(UBnkZScaled)
  70+ ADFF E1           	pop hl				; get copy #2
  71+ AE00 7D           	ld a,l
  72+ AE01 4F           	ld c,a
  73+ AE02 CD A2 AD     	call asm_tis2
  74+ AE05 32 87 C0     	ld (UBnkZScaled),a
  75+ AE08              asm_unit_vector_end:
  76+ AE08 C9           	ret
  77+ AE09
# file closed: ./Maths/asm_unitvector.asm
1179  AE09                  INCLUDE "./Maths/compare16.asm"
# file opened: ./Maths/compare16.asm
   1+ AE09              ; Input:
   2+ AE09              ;       HL = 1st value
   3+ AE09              ;       DE = 2nd value
   4+ AE09              ; Output:
   5+ AE09              ;       CF, ZF = results of comparison:
   6+ AE09              ;
   7+ AE09              ;               CF      ZF      Result
   8+ AE09              ;               -----------------------------------
   9+ AE09              ;               0       0       HL > DE
  10+ AE09              ;               0       1       HL == DE
  11+ AE09              ;               1       0       HL < DE
  12+ AE09              ;               1       1       Impossible
  13+ AE09              ;
  14+ AE09
  15+ AE09 E5           compare16HLDE:      push    hl
  16+ AE0A A7                               and     a
  17+ AE0B ED 52                            sbc     hl,de
  18+ AE0D E1                               pop     hl
  19+ AE0E C9                               ret
  20+ AE0F
  21+ AE0F              ; With compare signed we do ABS comparison
  22+ AE0F              ; this is used for view ports as we just want to know if its +/- out side of 90 degrees
  23+ AE0F
  24+ AE0F E5 D5        compare16HLDEABS:   push    hl,,de
  25+ AE11 7C                               ld      a,h                                     ; Quick pass see of both the same sign
  26+ AE12 E6 7F                            and     SignMask8Bit
  27+ AE14 67                               ld      h,a
  28+ AE15 7A                               ld      a,d                                     ; Quick pass see of both the same sign
  29+ AE16 E6 7F                            and     SignMask8Bit
  30+ AE18 57                               ld      d,a
  31+ AE19 A7                               and     a
  32+ AE1A ED 52                            sbc     hl,de
  33+ AE1C D1 E1                            pop     hl,,de
  34+ AE1E C9                               ret
  35+ AE1F
  36+ AE1F
# file closed: ./Maths/compare16.asm
1180  AE1F                  INCLUDE "./Maths/negate16.asm"
# file opened: ./Maths/negate16.asm
   1+ AE1F              ;;----------------------------------------------------------------------------------------------------------------------
   2+ AE1F              ;; 16-bit negate
   3+ AE1F              negate16:
   4+ AE1F              negate16hl:
   5+ AE1F                      ; Input:
   6+ AE1F                      ;       HL = value
   7+ AE1F                      ; Output:
   8+ AE1F                      ;       HL = -value
   9+ AE1F                      ; Destroys:
  10+ AE1F                      ;       AF
  11+ AE1F                      ;
  12+ AE1F AF           	xor 	a
  13+ AE20 95           	sub 	l
  14+ AE21 6F           	ld 		l,a
  15+ AE22 9F           	sbc 	a,a
  16+ AE23 94           	sub 	h
  17+ AE24 67           	ld 		h,a
  18+ AE25 C9           	ret
  19+ AE26
  20+ AE26              negate16de:
  21+ AE26 AF           	xor 	a
  22+ AE27 93           	sub 	e
  23+ AE28 5F           	ld 		e,a
  24+ AE29 9F           	sbc 	a,a
  25+ AE2A 92           	sub 	d
  26+ AE2B 57           	ld 		d,a
  27+ AE2C C9           	ret
  28+ AE2D
  29+ AE2D              negate16bc:
  30+ AE2D AF           	xor 	a
  31+ AE2E 91           	sub 	c
  32+ AE2F 4F           	ld 		c,a
  33+ AE30 9F           	sbc 	a,a
  34+ AE31 90           	sub 	b
  35+ AE32 47           	ld 		b,a
  36+ AE33 C9           	ret
  37+ AE34
  38+ AE34
  39+ AE34              macronegate16hl:	MACRO
  40+ AE34 ~            					xor 	a
  41+ AE34 ~            					sub 	l
  42+ AE34 ~            					ld 		l,a
  43+ AE34 ~            					sbc 	a,a
  44+ AE34 ~            					sub 	h
  45+ AE34 ~            					ld 		h,a
  46+ AE34              					ENDM
  47+ AE34
  48+ AE34              macronegate16de:	MACRO
  49+ AE34 ~            					xor 	a
  50+ AE34 ~                                sub 	e
  51+ AE34 ~                                ld 		e,a
  52+ AE34 ~                                sbc 	a,a
  53+ AE34 ~                                sub 	d
  54+ AE34 ~                                ld 		d,a
  55+ AE34              					ENDM
  56+ AE34              macronegate16bc:	MACRO
  57+ AE34 ~            					xor 	a
  58+ AE34 ~                                sub 	c
  59+ AE34 ~                                ld 		c,a
  60+ AE34 ~                                sbc 	a,a
  61+ AE34 ~                                sub 	b
  62+ AE34 ~                                ld 		b,a
  63+ AE34              					ENDM
  64+ AE34
  65+ AE34              macronegate16ix:	MACRO
  66+ AE34 ~            					xor 	a
  67+ AE34 ~                                sub 	ixl
  68+ AE34 ~                                ld 		ixl,a
  69+ AE34 ~                                sbc 	a,a
  70+ AE34 ~                                sub 	ixh
  71+ AE34 ~                                ld 		ixh,a
  72+ AE34              					ENDM
# file closed: ./Maths/negate16.asm
1181  AE34                  INCLUDE "./Maths/normalise96.asm"
# file opened: ./Maths/normalise96.asm
   1+ AE34 DD 68        AequAdivDmul96Unsg:     ld			ixl,b						; Get sign bit passed in as bit 7 in b
   2+ AE36                                      JumpIfAGTENusng d, TISXAccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   2+ AE36 BA          >                        cp     d
   2+ AE37 D2 4C AE    >                        jp		nc,TISXAccGTEQ
   3+ AE3A 4F                                   ld			c,a
   4+ AE3B CD 81 AC                             call		asm_div8
   5+ AE3E 79                                   ld			a,c							; a = result
   6+ AE3F CB 3F                                srl			a							; result / 4
   7+ AE41 47                                   ld			b,a							; t = t /4
   8+ AE42 CB 3F                                srl			a							; result / 8
   9+ AE44 80                                   add			a,b							; result /8 + result /4
  10+ AE45 47                                   ld			b,a							; b = 3/8*Acc (max = 96)
  11+ AE46 DD 7D                                ld			a,ixl						; copy of Acc to look at sign bit
  12+ AE48 E6 80                                and			$80							; recover sign only
  13+ AE4A B0                                   or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  14+ AE4B C9                                   ret
  15+ AE4C              TISXAccGTEQ:
  16+ AE4C              ;TI4:										;\ clean to +/- unity
  17+ AE4C DD 7D                                ld			a,ixl     					; get saved sign from b
  18+ AE4E E6 80                                and			$80							; copy of Acc
  19+ AE50 F6 60                                or			$60							; unity
  20+ AE52 C9                                   ret
  21+ AE53
  22+ AE53
  23+ AE53
  24+ AE53
  25+ AE53              normaliseXX1596fast:
  26+ AE53                  ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  27+ AE53 3A 83 C0     	ld		a,(XX15)		    ; XX15+0
  28+ AE56 DD 67        	ld		ixh,a               ; ixh = signed x component
  29+ AE58 E6 7F        	and		SignMask8Bit                 ; a = unsigned version
  30+ AE5A              N96SQX:
  31+ AE5A              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  31+ AE5A 5F          >			ld	e,a
  31+ AE5B 57          >			ld  d,a
  31+ AE5C ED 30       >			mul
  32+ AE5E 62           	ld		h,d					; h == varR d = varO e= varA
  33+ AE5F 6B           	ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
  34+ AE60              N96SQY:
  35+ AE60 3A 84 C0     	ld		a,(XX15+1)
  36+ AE63 DD 6F        	ld		ixl,a               ; ixl = signed y componet
  37+ AE65 E6 7F        	and		SignMask8Bit                 ; = abs
  38+ AE67              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  38+ AE67 5F          >			ld	e,a
  38+ AE68 57          >			ld  d,a
  38+ AE69 ED 30       >			mul
  39+ AE6B 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  40+ AE6C              N96SQZ:
  41+ AE6C 3A 85 C0     	ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  42+ AE6F FD 67        	ld		iyh,a               ; iyh = signed
  43+ AE71 E6 7F        	and		SignMask8Bit                 ; unsigned
  44+ AE73              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  44+ AE73 5F          >			ld	e,a
  44+ AE74 57          >			ld  d,a
  44+ AE75 ED 30       >			mul
  45+ AE77              N96SQADD:
  46+ AE77 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  47+ AE78 EB           	ex		de,hl				; hl => de ready for square root
  48+ AE79              N96SQRT:
  49+ AE79 CD 70 AB     	call	asm_sqrt			; hl = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  50+ AE7C              N96NORMX:
  51+ AE7C 3A 83 C0     	ld		a,(XX15+0)
  52+ AE7F E6 7F        	and		SignMask8Bit
  53+ AE81 4F           	ld		c,a
  54+ AE82 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  55+ AE83 CD AA B0     	call	AequAdivDmul96	; does not use HL so we can retain it
  56+ AE86 47           	ld		b,a				;++SGN
  57+ AE87 DD 7C        	ld		a,ixh			;++SGN
  58+ AE89 E6 80        	and		$80				;++SGN
  59+ AE8B B0           	or		b				;++SGN
  60+ AE8C 32 83 C0     	ld		(XX15+0),a
  61+ AE8F              N96NORMY:
  62+ AE8F 3A 84 C0     	ld		a,(XX15+1)
  63+ AE92 E6 7F        	and		SignMask8Bit
  64+ AE94 4F           	ld		c,a
  65+ AE95 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  66+ AE96 CD AA B0     	call	AequAdivDmul96     	; does not use HL so we can retain it
  67+ AE99 47           	ld		b,a				;++SGN
  68+ AE9A DD 7D        	ld		a,ixl			;++SGN
  69+ AE9C E6 80        	and		$80				;++SGN
  70+ AE9E B0           	or		b				;++SGN
  71+ AE9F 32 84 C0     	ld		(XX15+1),a
  72+ AEA2              N96NORMZ:
  73+ AEA2 3A 85 C0     	ld		a,(XX15+2)
  74+ AEA5 E6 7F        	and		SignMask8Bit
  75+ AEA7 4F           	ld		c,a
  76+ AEA8 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  77+ AEA9 CD AA B0     	call	AequAdivDmul96	; does not use HL so we can retain it
  78+ AEAC 47           	ld		b,a				;++SGN
  79+ AEAD FD 7C        	ld		a,iyh			;++SGN
  80+ AEAF E6 80        	and		$80				;++SGN
  81+ AEB1 B0           	or		b				;++SGN
  82+ AEB2 32 85 C0     	ld		(XX15+2),a
  83+ AEB5 C9           	ret
  84+ AEB6
  85+ AEB6              ; Normalise vector
  86+ AEB6              ; scale Q = Sqrt (X^2 + Y^2 + Z^2)
  87+ AEB6              ; X = X / Q with 96 = 1 , i.e X = X / Q * 3/8
  88+ AEB6              ; Y = Y / Q with 96 = 1 , i.e Y = Y / Q * 3/8
  89+ AEB6              ; Z = Z / Q with 96 = 1 , i.e Z = Z / Q * 3/8
  90+ AEB6              ;
  91+ AEB6              ;
  92+ AEB6              ;
  93+ AEB6
  94+ AEB6              ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  95+ AEB6 3A 83 C0     normaliseXX1596:        ld		a,(XX15)		    ; XX15+0
  96+ AEB9                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  96+ AEB9 5F          >			ld	e,a
  96+ AEBA 57          >			ld  d,a
  96+ AEBB ED 30       >			mul
  97+ AEBD 7A                                   ld		a,d
  98+ AEBE 32 51 9A                             ld		(varR),a			; R	 \ hi sum later use b
  99+ AEC1 7B                                   ld		a,e
 100+ AEC2 32 50 9A                             ld		(varQ),a			; Q	 \ lo sum later use c
 101+ AEC5 32 4D 99                             ld		(varP),a			; P	 \ lo sum later just drop
 102+ AEC8 3A 84 C0                             ld		a,(XX15+1)
 103+ AECB                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
 103+ AECB 5F          >			ld	e,a
 103+ AECC 57          >			ld  d,a
 103+ AECD ED 30       >			mul
 104+ AECF 7A                                   ld		a,d
 105+ AED0 32 6C 9A                             ld		(varT),a			; T	 \ hi sum
 106+ AED3 7B                                   ld		a,e
 107+ AED4 32 4D 99                             ld		(varP),a			; P	 \ lo sum
 108+ AED7 21 50 9A                             ld		hl,varQ
 109+ AEDA 8E                                   adc		a,(hl)				; +Q
 110+ AEDB 32 50 9A                             ld		(varQ),a			; =>Q
 111+ AEDE 3A 6C 9A                             ld		a,(varT)			;
 112+ AEE1 21 51 9A                             ld		hl,varR
 113+ AEE4 8E                                   adc		a,(hl)				;  R
 114+ AEE5 32 51 9A                             ld		(varR),a			; R
 115+ AEE8 3A 85 C0                             ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
 116+ AEEB                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
 116+ AEEB 5F          >			ld	e,a
 116+ AEEC 57          >			ld  d,a
 116+ AEED ED 30       >			mul
 117+ AEEF 7A                                   ld		a,d
 118+ AEF0 32 6C 9A                             ld		(varT),a			; T	 \ hi sum
 119+ AEF3 7B                                   ld		a,e
 120+ AEF4 32 4D 99                             ld		(varP),a			; P	 \ lo sum
 121+ AEF7 21 50 9A                             ld		hl,varQ
 122+ AEFA 8E                                   adc		a,(hl)				; +Q
 123+ AEFB 32 50 9A                             ld		(varQ),a			; =>Q  xlo2 + ylo2 + zlo2
 124+ AEFE 3A 6C 9A                             ld		a,(varT)			; T temp Hi
 125+ AF01 21 51 9A                             ld		hl,varR
 126+ AF04 8E                                   adc		a,(hl)				; +R
 127+ AF05 32 51 9A                             ld		(varR),a			; R
 128+ AF08 CD 93 AB                             call	sqrtQR				; Q = SQR(Qlo.Rhi) Q <~127
 129+ AF0B 3A 83 C0                             ld		a,(XX15+0)
 130+ AF0E CD A4 B0                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 131+ AF11 32 83 C0                             ld		(XX15+0),a
 132+ AF14 3A 84 C0                             ld		a,(XX15+1)
 133+ AF17 CD A4 B0                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 134+ AF1A 32 84 C0                             ld		(XX15+1),a
 135+ AF1D 3A 84 C0                             ld		a,(XX15+1)
 136+ AF20 CD A4 B0                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 137+ AF23 32 84 C0                             ld		(XX15+1),a
 138+ AF26 C9                                   ret
 139+ AF27
 140+ AF27
# file closed: ./Maths/normalise96.asm
1182  AF27                  INCLUDE "./Maths/binary_to_decimal.asm"
# file opened: ./Maths/binary_to_decimal.asm
   1+ AF27              ;Number in hl to decimal ASCII
   2+ AF27              ;Thanks to z80 Bits
   3+ AF27              ;inputs:	hl = number to ASCII
   4+ AF27              ;example: hl=300 outputs '00300'
   5+ AF27              ;destroys: af, bc, hl, de used
   6+ AF27              DispHLtoDE:
   7+ AF27              ; "DispHL, writes HL to DE address"
   8+ AF27 01 F0 D8     	ld	bc,-10000
   9+ AF2A CD 40 AF     	call	Num1
  10+ AF2D 01 18 FC     	ld	bc,-1000
  11+ AF30 CD 40 AF     	call	Num1
  12+ AF33 01 9C FF     	ld	bc,-100
  13+ AF36 CD 40 AF     	call	Num1
  14+ AF39 0E F6        	ld	c,-10
  15+ AF3B CD 40 AF     	call	Num1
  16+ AF3E 0E FF        	ld	c,-1
  17+ AF40              Num1:
  18+ AF40 3E 2F        	ld	a,'0'-1
  19+ AF42              .Num2:
  20+ AF42 3C           	inc	a
  21+ AF43 09           	add	hl,bc
  22+ AF44 38 FC        	jr	c,.Num2
  23+ AF46 ED 42        	sbc	hl,bc
  24+ AF48 12           	ld	(de),a
  25+ AF49 13           	inc	de
  26+ AF4A C9           	ret
  27+ AF4B
  28+ AF4B              DispAtoDE:
  29+ AF4B 26 00        	ld h,0
  30+ AF4D 6F           	ld l,a
  31+ AF4E C3 27 AF     	jp DispHLtoDE
  32+ AF51
  33+ AF51              DispPriceAtoDE:
  34+ AF51 26 00        	ld h,0
  35+ AF53 6F           	ld l,a
  36+ AF54 01 9C FF     	ld	bc,-100
  37+ AF57 CD 67 AF     	call	.NumLeadBlank1
  38+ AF5A 0E F6        	ld	c,-10
  39+ AF5C CD 40 AF     	call	Num1
  40+ AF5F 3E 2E        	ld		a,'.'					; we could assume preformat but
  41+ AF61 12           	ld		(de),a					; we can optimse that later TODO
  42+ AF62 13           	inc		de						; with just an inc De
  43+ AF63 0E FF        	ld	c,-1
  44+ AF65 18 D9        	jr		Num1
  45+ AF67              .NumLeadBlank1:
  46+ AF67 3E 2F        	ld	a,'0'-1
  47+ AF69              .NumLeadBlank2:
  48+ AF69 3C           	inc	a
  49+ AF6A 09           	add	hl,bc
  50+ AF6B 38 FC        	jr	c,.NumLeadBlank2
  51+ AF6D FE 30        	cp	'0'
  52+ AF6F 20 02        	jr	nz,.DontBlank
  53+ AF71              .Blank:
  54+ AF71 3E 20        	ld	a,' '
  55+ AF73              .DontBlank:
  56+ AF73 ED 42        	sbc	hl,bc
  57+ AF75 12           	ld	(de),a
  58+ AF76 13           	inc	de
  59+ AF77 C9           	ret
  60+ AF78
  61+ AF78              DispQtyAtoDE:
  62+ AF78 FE 00        	cp	0
  63+ AF7A 28 23        	jr	z,.NoStock
  64+ AF7C 26 00        	ld h,0
  65+ AF7E 6F           	ld l,a
  66+ AF7F 01 9C FF     	ld	bc,-100
  67+ AF82 CD 8E AF     	call	.NumLeadBlank1
  68+ AF85 0E F6        	ld	c,-10
  69+ AF87 CD 8E AF     	call	.NumLeadBlank1
  70+ AF8A 0E FF        	ld	c,-1
  71+ AF8C 18 B2        	jr		Num1
  72+ AF8E              .NumLeadBlank1:
  73+ AF8E 3E 2F        	ld	a,'0'-1
  74+ AF90              .NumLeadBlank2:
  75+ AF90 3C           	inc	a
  76+ AF91 09           	add	hl,bc
  77+ AF92 38 FC        	jr	c,.NumLeadBlank2
  78+ AF94 FE 30        	cp	'0'
  79+ AF96 20 02        	jr	nz,.DontBlank
  80+ AF98              .Blank:
  81+ AF98 3E 20        	ld	a,' '
  82+ AF9A              .DontBlank:
  83+ AF9A ED 42        	sbc	hl,bc
  84+ AF9C 12           	ld	(de),a
  85+ AF9D 13           	inc	de
  86+ AF9E C9           	ret
  87+ AF9F              .NoStock:
  88+ AF9F 3E 20        	ld	a,' '
  89+ AFA1 12           	ld	(de),a
  90+ AFA2 13           	inc	de
  91+ AFA3 12           	ld	(de),a
  92+ AFA4 13           	inc	de
  93+ AFA5 3E 2D        	ld	a,'-'
  94+ AFA7 12           	ld	(de),a
  95+ AFA8 13           	inc de
  96+ AFA9 C9           	ret
  97+ AFAA
  98+ AFAA
  99+ AFAA              ;### CLCN32 -> Converts 32Bit-Value in ASCII-String (terminated by 0)
 100+ AFAA              ;### Input      DE,IX=32bit value, IY=destination address
 101+ AFAA              ;### Output     IY=last char in destination string
 102+ AFAA              ;### Destroyed AF,BC,DE,HL,IX
 103+ AFAA 01 00 00 00  clcn32t dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 103+ AFAE 0A 00 00 00
 103+ AFB2 64 00 00 00
 103+ AFB6 E8 03 00 00
 103+ AFBA 10 27 00 00
 104+ AFBE A0 86 01 00          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 104+ AFC2 40 42 0F 00
 104+ AFC6 80 96 98 00
 104+ AFCA 00 E1 F5 05
 104+ AFCE 00 CA 9A 3B
 105+ AFD2 00 00 00 00  clcn32z ds 4
 106+ AFD6
 107+ AFD6              ; As per display but shifts final digit by 1 and puts in "." for 1 decimal place
 108+ AFD6 CD E5 AF     DispDEIXtoIY1DP:        call    DispDEIXtoIY
 109+ AFD9 FD 7E 00                             ld      a,(IY+0)
 110+ AFDC FD 77 01                             ld      (IY+1),a
 111+ AFDF 3E 2E                                ld      a,"."
 112+ AFE1 FD 77 00                             ld      (IY+0),a
 113+ AFE4 C9                                   ret
 114+ AFE5
 115+ AFE5 DD 22 D2 AF  DispDEIXtoIY:           ld (clcn32z),ix
 116+ AFE9 ED 53 D4 AF                          ld (clcn32z+2),de
 117+ AFED DD 21 CE AF                          ld ix,clcn32t+36
 118+ AFF1 06 09                                ld b,9
 119+ AFF3 0E 00                                ld c,0
 120+ AFF5 3E 30        .clcn321:               ld a,'0'
 121+ AFF7 B7                                   or a
 122+ AFF8 DD 5E 00     .clcn322:               ld e,(ix+0)
 123+ AFFB DD 56 01                             ld d,(ix+1)
 124+ AFFE 2A D2 AF                             ld hl,(clcn32z)
 125+ B001 ED 52                                sbc hl,de
 126+ B003 22 D2 AF                             ld (clcn32z),hl
 127+ B006 DD 5E 02                             ld e,(ix+2)
 128+ B009 DD 56 03                             ld d,(ix+3)
 129+ B00C 2A D4 AF                             ld hl,(clcn32z+2)
 130+ B00F ED 52                                sbc hl,de
 131+ B011 22 D4 AF                             ld (clcn32z+2),hl
 132+ B014 38 04                                jr c,.clcn325
 133+ B016 0C                                   inc c
 134+ B017 3C                                   inc a
 135+ B018 18 DE                                jr .clcn322
 136+ B01A DD 5E 00     .clcn325:               ld e,(ix+0)
 137+ B01D DD 56 01                             ld d,(ix+1)
 138+ B020 2A D2 AF                             ld hl,(clcn32z)
 139+ B023 19                                   add hl,de
 140+ B024 22 D2 AF                             ld (clcn32z),hl
 141+ B027 DD 5E 02                             ld e,(ix+2)
 142+ B02A DD 56 03                             ld d,(ix+3)
 143+ B02D 2A D4 AF                             ld hl,(clcn32z+2)
 144+ B030 ED 5A                                adc hl,de
 145+ B032 22 D4 AF                             ld (clcn32z+2),hl
 146+ B035 11 FC FF                             ld de,-4
 147+ B038 DD 19                                add ix,de
 148+ B03A 0C                                   inc c
 149+ B03B 0D                                   dec c
 150+ B03C 28 05                                jr z,.clcn323
 151+ B03E FD 77 00                             ld (iy+0),a
 152+ B041 FD 23                                inc iy
 153+ B043 10 B0        .clcn323:               djnz .clcn321
 154+ B045 3A D2 AF                             ld a,(clcn32z)
 155+ B048 C6 30                                add A,'0'
 156+ B04A FD 77 00                             ld (iy+0),a
 157+ B04D FD 36 01 00                          ld (iy+1),0
 158+ B051 C9                                   ret
 159+ B052
# file closed: ./Maths/binary_to_decimal.asm
1183  B052                  include "./Maths/ADDHLDESignBC.asm"
# file opened: ./Maths/ADDHLDESignBC.asm
   1+ B052              ;; calcs HLB + DEC where B and C are signs
   2+ B052              ;; result HL with A as sign
   3+ B052              ;; special handling if result is zero forcign sign bit to be zero
   4+ B052 78           ADDHLDESignBC:          ld      a,b
   5+ B053 E6 80                                and     SignOnly8Bit
   6+ B055 A9                                   xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
   7+ B056                                      JumpIfNegative ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
   7+ B056 FA 64 B0    >                        jp		m, ADDHLDEsBCOppSGN
   8+ B059 78           ADDHLDEsBCSameSigns:    ld      a,b
   9+ B05A B1                                   or      c
  10+ B05B                                      JumpIfNegative ADDHLDEsBCSameNeg        ; optimisation so we can just do simple add if both positive
  10+ B05B FA 60 B0    >                        jp		m, ADDHLDEsBCSameNeg
  11+ B05E 19                                   add     hl,de                       ; both positive so a will already be zero
  12+ B05F C9                                   ret
  13+ B060 19           ADDHLDEsBCSameNeg:      add     hl,de
  14+ B061 78                                   ld      a,b
  15+ B062 B1                                   or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
  16+ B063 C9                                   ret
  17+ B064 B7           ADDHLDEsBCOppSGN:       or      a
  18+ B065 ED 52                                sbc     hl,de
  19+ B067 38 02                                jr      c,ADDHLDEsBCOppInvert
  20+ B069 78           ADDHLDEsBCOppSGNNoCarry: ld      a,b                                               ; we got here so hl > de therefore we can just take hl's previous sign bit
  21+ B06A C9                                   ret
  22+ B06B              ADDHLDEsBCOppInvert:    NegHL                         ; if result was zero then set sign to zero (which doing h or l will give us for free)
  22+ B06B AF          >                    xor a
  22+ B06C 95          >                    sub l
  22+ B06D 6F          >                    ld l,a
  22+ B06E 9F          >                    sbc a,a
  22+ B06F 94          >                    sub h
  22+ B070 67          >                    ld h,a
  23+ B071 78                                   ld      a,b
  24+ B072 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  25+ B074 C9                                   ret
  26+ B075
# file closed: ./Maths/ADDHLDESignBC.asm
1184  B075              ;INCLUDE "badd_ll38.asm"
1185  B075              ;;INCLUDE "XX12equXX15byXX16.asm"
1186  B075                  INCLUDE "./Maths/Utilities/AequAdivQmul96-TIS2.asm"
# file opened: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
   1+ B075              AequAdivQmul96ABS:      JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   1+ B075 BA          >                        cp     d
   1+ B076 D2 91 B0    >                        jp		nc,.TIS2AccGTEQ
   2+ B079 06 FE                                ld			b,$FE						; division roll (replaced varT)
   3+ B07B CB 27        .TIS2RollTLoop:			sla			a
   4+ B07D                                      JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
   4+ B07D BA          >                        cp      d
   4+ B07E DA 94 B0    >                        jp		c, .TIS2SkipSub
   5+ B081 9A                                   sbc			a,d							; do subtraction with carry
   6+ B082 37                                   scf
   7+ B083 CB 10                                rl			b							; T rolled left to push bit out the end
   8+ B085 38 F4                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
   9+ B087 78           .TIS2SKIPCont:	        ld			a,b							; T
  10+ B088 CB 3F                                srl			a							; result / 2
  11+ B08A CB 3F                                srl			a							; result / 4
  12+ B08C 47                                   ld			b,a							; t = t /4
  13+ B08D CB 3F                                srl			a							; result / 8
  14+ B08F 80                                   add			a,b							; result /8 + result /4
  15+ B090 C9                                   ret
  16+ B091 3E 60        .TIS2AccGTEQ:           ld			a,$60							; unity
  17+ B093 C9                                   ret
  18+ B094 B7           .TIS2SkipSub:           or			a
  19+ B095 CB 10                                rl			b							; T rolled left to push bit out the end
  20+ B097 38 E2                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  21+ B099 C3 87 B0                             jp			.TIS2SKIPCont
  22+ B09C
  23+ B09C
  24+ B09C              ; USES 			A DE BC
  25+ B09C              ; DOES NOT USE 	HL
  26+ B09C              TIS2962C:		; two's compliment entry point, exits not 2's compliment
  27+ B09C CB 7F        	bit			7,a
  28+ B09E 28 04        	jr			z,AequAdivQmul96
  29+ B0A0 ED 44        	neg										; revers 2s'c and just set neg bit
  30+ B0A2 CB FF        	set			7,a
  31+ B0A4              ; Note negative numbers are bit 7 set not 2's compliment
  32+ B0A4              AequAdivQmul96:								; TIS296:			; .tis2 A = A /Q *96 (or A = A * 3/8 * Q) Reduce Acc in NORM routine i.e. *96/Q clamps at +- 96
  33+ B0A4              TIS2:
  34+ B0A4 4F           	ld			c,a							; copy of Acc
  35+ B0A5 3A 50 9A     	ld			a,(varQ)
  36+ B0A8 57           	ld			d,a							; d = varQ
  37+ B0A9 79           	ld			a,c							; recover a
  38+ B0AA              AequAdivDmul96:
  39+ B0AA 4F           	ld			c,a							; copy of Acc as we need the sign, alternate entry point assuming D preloaded, wastes an "ld c,a" but simplifies code
  40+ B0AB E6 7F        	and			SignMask8Bit				; ignore sign
  41+ B0AD              	JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  41+ B0AD BA          >                        cp     d
  41+ B0AE D2 CE B0    >                        jp		nc,.TIS2AccGTEQ
  42+ B0B1 06 FE        	ld			b,$FE						; division roll (replaced varT)
  43+ B0B3              .TIS2RollTLoop:									; .TIL2	; roll T
  44+ B0B3 CB 27        	sla			a
  45+ B0B5              	JumpIfALTNusng d,.TIS2SkipSub            ; a < d so don;t subtract
  45+ B0B5 BA          >                        cp      d
  45+ B0B6 DA D4 B0    >                        jp		c, .TIS2SkipSub
  46+ B0B9 9A           	sbc			a,d							; do subtraction with carry
  47+ B0BA 37           	scf
  48+ B0BB CB 10        	rl			b							; T rolled left to push bit out the end
  49+ B0BD 38 F4        	jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  50+ B0BF              .TIS2SKIPCont:
  51+ B0BF 78           	ld			a,b							; T
  52+ B0C0 CB 3F        	srl			a							; result / 2
  53+ B0C2 CB 3F        	srl			a							; result / 4
  54+ B0C4 47           	ld			b,a							; t = t /4
  55+ B0C5 CB 3F        	srl			a							; result / 8
  56+ B0C7 80           	add			a,b							; result /8 + result /4
  57+ B0C8 47           	ld			b,a							; b = 3/8*Acc (max = 96)
  58+ B0C9 79           	ld			a,c							; copy of Acc to look at sign bit
  59+ B0CA E6 80        	and			$80							; recover sign only
  60+ B0CC B0           	or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  61+ B0CD C9           	ret
  62+ B0CE              .TIS2AccGTEQ:
  63+ B0CE              ;TI4:										;\ clean to +/- unity
  64+ B0CE 79           	ld			a,c
  65+ B0CF E6 80        	and			$80							; copy of Acc
  66+ B0D1 F6 60        	or			$60							; unity
  67+ B0D3 C9           	ret
  68+ B0D4              .TIS2SkipSub:
  69+ B0D4 B7           	or			a
  70+ B0D5 CB 10        	rl			b							; T rolled left to push bit out the end
  71+ B0D7 38 DA        	jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  72+ B0D9 C3 BF B0     	jp			.TIS2SKIPCont
  73+ B0DC
# file closed: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
1187  B0DC                  INCLUDE "./Maths/Utilities/AequAmulQdiv256-FMLTU.asm"
# file opened: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
   1+ B0DC              fmltu:
   2+ B0DC              AequAmulQdiv256:
   3+ B0DC              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=A*Q/256unsg  Fast multiply"
   4+ B0DC 57           	ld	d,a
   5+ B0DD 3A 50 9A     	ld	a,(varQ)
   6+ B0E0 5F           	ld	e,a
   7+ B0E1 ED 30        	mul
   8+ B0E3 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   9+ B0E4 C9           	ret
  10+ B0E5
# file closed: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
1188  B0E5                  INCLUDE "./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm"
# file opened: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
   1+ B0E5              ; "DV42,DV42IYH DE = P.R, c = R"
   2+ B0E5              DV42IYH:									; as per DV42 but using iyl for Y reg
   3+ B0E5 21 30 9D     		ld		hl,varDustZ
   4+ B0E8 FD 7D        		ld		a,iyl
   5+ B0EA ED 31        		add		hl,a
   6+ B0EC 7E           		ld		a,(hl)
   7+ B0ED C3 F9 B0     		jp		DV41
   8+ B0F0              DV42:										; travel step of dust particle front/rear
   9+ B0F0 21 30 9D     		ld		hl,varDustZ
  10+ B0F3 3A 3B 99     		ld		a,(regY)
  11+ B0F6 ED 31        		add		hl,a
  12+ B0F8 7E           		ld		a,(hl)						; a = SZ[y]
  13+ B0F9              DV41:										; P.R = speed/ (ZZ/8) dust left/right
  14+ B0F9 5F           		ld		e,a							; using E as Q var replacement
  15+ B0FA 3A 4C 9A     		ld		a,(DELTA)					; DELTA \ speed, how far has dust moved based on its z-coord.
  16+ B0FD              DVID4:										; P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
  17+ B0FD 06 08        		ld		b,8							; counter
  18+ B0FF CB 27        		sla		a							;
  19+ B101 57           		ld		d,a							; use d for - p = delta * 2
  20+ B102 AF           		xor		a
  21+ B103              DVL4:										; counter x loop (b reg)
  22+ B103 CB 17        		rl		a							; a = a * 2
  23+ B105 38 03        		jr		c,DV8						; jump on carry
  24+ B107 BB           		cp		e							; var Q
  25+ B108 38 02        		jr		c,DV5						; skip subtraction
  26+ B10A              DV8:
  27+ B10A 9B           		sbc		a,e							; a = a - q (with carry)
  28+ B10B 37           		scf									;  carry gets set
  29+ B10C              DV5:										; skipped subtraction
  30+ B10C CB 12        		rl		d							; d (P hi)
  31+ B10E 10 F3        		djnz	DVL4						; dec b and loop loop X, hi left in P.
  32+ B110              .CalcRemainder:								; BFRDIV R=A*256/Q
  33+ B110              ; Note we are not going to call LL28+4 but inline code here:
  34+ B110 06 FE        		ld		b,$FE						; remainder R for AofQ *256/Q
  35+ B112 4F           		ld		c,a							; use c as R var
  36+ B113              .RollRemainder:
  37+ B113 CB 27        		sla		a
  38+ B115 38 11        		jr		c,.Reduce					; if a >> generates carry reduce
  39+ B117 B8           		cp		b							; a < q?
  40+ B118 30 01        		jr		nc,.DontSBC
  41+ B11A              .DoSBC:										; a is < q
  42+ B11A 98           		sbc		a,b							; 	a -= q
  43+ B11B              .DontSBC:
  44+ B11B CB 11        		rl		c							; r << 1
  45+ B11D 38 F4        		jr		c, .RollRemainder			; if rol generated a carry, continue
  46+ B11F 79           		ld		a,c
  47+ B120 32 51 9A     		ld		(varR),a					; for backwards compat
  48+ B123 7A           		ld		a,d
  49+ B124 32 4D 99     		ld		(varP),a
  50+ B127 C9           		ret									; R (c) left with remainder
  51+ B128              .Reduce:									; a geneated a carry
  52+ B128 98           		sbc		a,b							; a = a - (q +1)
  53+ B129 37           		scf									; set carry flag for rl
  54+ B12A CB 11        		rl		c							; r << 1 briging in carry
  55+ B12C 38 E5        		jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  56+ B12E 79           		ld		a,c
  57+ B12F 32 51 9A     		ld		(varR),a					; for backwards compat
  58+ B132 7A           		ld		a,d
  59+ B133 32 4D 99     		ld		(varP),a
  60+ B136 C9           		ret
  61+ B137              .AnswerTooBig:
  62+ B137 0E FF        		ld		c,$FF						; arse its too big
  63+ B139 79           		ld		a,c
  64+ B13A 32 51 9A     		ld		(varR),a					; for backwards compat
  65+ B13D 7A           		ld		a,d
  66+ B13E 32 4D 99     		ld		(varP),a
  67+ B141 C9           		ret
  68+ B142
# file closed: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
1189  B142                  INCLUDE "./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm"
# file opened: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
   1+ B142
   2+ B142              asm_defmutl:
   3+ B142              AequDmulEdiv256usgn:
   4+ B142              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=D*E/256unsg  Fast multiply"
   5+ B142 ED 30        	mul
   6+ B144 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   7+ B145 C9           	ret
   8+ B146
   9+ B146
# file closed: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
1190  B146              ;INCLUDE "AP2equAPmulQunsgEorP-MLTU2.asm"
1191  B146              ;INCLUDE "APequPmulQUnsg-MULTU.asm"
1192  B146              ;INCLUDE "APequPmulX-MU11.asm"
1193  B146                  INCLUDE "./Maths/Utilities/APequQmulA-MULT1.asm"
# file opened: ./Maths/Utilities/APequQmulA-MULT1.asm
   1+ B146              APequQmulA:
   2+ B146              asm_mult1:
   3+ B146              ; "ASM_MULT1 (DE) A(hi).P(lo) = Q * A first part of MAD, multiply and add. Visited Quite often. A=hi P = lo also returns result in DE"
   4+ B146 FE 00        	cp	0
   5+ B148 28 1F        	jr	z,.mul0			; quick exit if its Q * 0
   6+ B14A 5F           	ld	e,a
   7+ B14B 3A 50 9A     	ld	a,(varQ)
   8+ B14E 57           	ld	d,a
   9+ B14F FE 00        	cp	0				; compare a
  10+ B151 28 16        	jr	z,.mul0			; quick exit if its 0 * a
  11+ B153 AB           	xor	e				; -- = + +- = - -+ = - ++ = +
  12+ B154 E6 80        	and $80				; get the resultant sign and save into b
  13+ B156 47           	ld	b,a
  14+ B157 7A           	ld	a,d
  15+ B158 E6 7F        	and	SignMask8Bit	; now strip off sign bits
  16+ B15A 57           	ld	d,a
  17+ B15B 7B           	ld	a,e
  18+ B15C E6 7F        	and SignMask8Bit
  19+ B15E 5F           	ld	e,a
  20+ B15F ED 30        	mul					; zxn de = d * e
  21+ B161 7B           	ld	a,e
  22+ B162 32 4D 99     	ld	(varP),a		; p = lo
  23+ B165 7A           	ld	a,d				; a = hi
  24+ B166 B0           	or	b				; de goes to a and varP also re-do sign bit
  25+ B167 57           	ld	d,a				; we will work with de having result as we may bin vars later
  26+ B168 C9           	ret
  27+ B169              .mul0:
  28+ B169 AF           	xor	a
  29+ B16A 32 4D 99     	ld	(varP),a
  30+ B16D 57           	ld	d,a
  31+ B16E 5F           	ld  e,a
  32+ B16F C9           	ret
  33+ B170
# file closed: ./Maths/Utilities/APequQmulA-MULT1.asm
1194  B170                  INCLUDE "./Maths/Utilities/badd_ll38.asm"
# file opened: ./Maths/Utilities/badd_ll38.asm
   1+ B170              baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
   2+ B170              SAEquSRPlusAQ:
   3+ B170              ; Calculate the following between sign-magnitude numbers:
   4+ B170              ;   (S A) = (S R) + (A Q)
   5+ B170              ; where the sign bytes only contain the sign bits, not magnitudes.
   6+ B170              ; note goes wrong at <-127 >128 so need 16 bit version
   7+ B170              ; so need to fix the issue with carry flag not returning a fault correctly
   8+ B170              LL38:
   9+ B170              ;	ld		d,a
  10+ B170              ;	ld		a,(varQ)
  11+ B170              ;	ld		e,a
  12+ B170              ;	ld		a,(varS)
  13+ B170              ;	ld		h,a
  14+ B170              ;	ld		a,(varR)
  15+ B170              ;	ld		l,a
  16+ B170              ;	call	ADDHLDESignedv3
  17+ B170              ;	ld		a,h
  18+ B170              ;	ld		(varS),a
  19+ B170              ;	ld		a,l
  20+ B170              ;	ret
  21+ B170              ; calculation table
  22+ B170              ;   R     Q    Op            Sign calc
  23+ B170              ;	10    5    Add           +    sign same add R sign
  24+ B170              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  25+ B170              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  26+ B170              ;	-10  -5    ABS Add       -    sign same add R sign
  27+ B170              ;   5    10    Add           +    sign same add R sign
  28+ B170              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  29+ B170              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  30+ B170              ;   -5   -10   ABS  add      -    sign same add R sign
  31+ B170
  32+ B170              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  33+ B170              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  34+ B170              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  35+ B170              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  36+ B170
  37+ B170
  38+ B170              ; Calculate sign for Q from A and varS
  39+ B170 21 52 9A     	ld		hl,varS							;
  40+ B173 AE           	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  41+ B174 FA 7F B1     	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  42+ B177 3A 50 9A     	ld		a,(varQ)						; Q	\ else addition, S already correct
  43+ B17A 21 51 9A     	ld		hl,varR
  44+ B17D 86           	add		a,(hl)							; a = Q + R
  45+ B17E C9           	ret										; Done carry set if overflow
  46+ B17F              .LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  47+ B17F 3A 51 9A     	ld		a,(varR)						; a = R
  48+ B182 21 50 9A     	ld		hl,varQ                         ; Q
  49+ B185              ;--	JumpIfALTMemHLusng LL39SwapSubtraction	; if a < (hl) then do LL39SwapSubtraction
  50+ B185              	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  50+ B185 B7          >                        or a
  51+ B186 9E           	sbc		a,(hl)							; A = R - Q which as R >= Q will always be a positive result
  52+ B187 38 01            jr      c,.LL39SignCorrection
  53+ B189              ;--    jr      a,.LL39ResultZero
  54+ B189              ;--   JumpIfNegative LL39SignCorrection		; if there was underflow we have to correct sign
  55+ B189              ;--	or		a								; Clear carry flag to say result is correct
  56+ B189 C9           	ret
  57+ B18A              .LL39SignCorrection:
  58+ B18A FE 00            cp      0                               ; if its 0 then neg will affect flag so we just zero result to save compute
  59+ B18C 28 0E            jr      z,.LL39ResultZero
  60+ B18E ED 44            neg                                     ; flip A 2'c value to positive
  61+ B190 08           	ex		af,af'							; save A temporarily
  62+ B191 3A 52 9A     	ld		a,(varS)						; Flip Sign bit in varS
  63+ B194 EE 80        	xor		$80							    ;
  64+ B196 32 52 9A     	ld		(varS),a                        ; flip sign bit of a
  65+ B199 08           	ex		af,af'                          ; get back a which is the result
  66+ B19A                  ClearCarryFlag                          ; clear carry as NEG instrunction sets it for non zero
  66+ B19A B7          >                        or a
  67+ B19B C9           	ret
  68+ B19C              .LL39ResultZero:
  69+ B19C 32 52 9A         ld      (varS),a                        ; a is zero at this stage so set sign as well
  70+ B19F                  ClearCarryFlag                          ; clear carry
  70+ B19F B7          >                        or a
  71+ B1A0 C9               ret
  72+ B1A1              ;--LL39SwapSubtraction:
  73+ B1A1              ;--	push	bc
  74+ B1A1              ;--	ld		b,a
  75+ B1A1              ;--	ld		a,(hl)
  76+ B1A1              ;--	sub		b
  77+ B1A1              ;--	pop		bc
  78+ B1A1              ;--	ex		af,af'							; do we flip here or negate. i think its flip as its overflowed unsigned
  79+ B1A1              ;--	ld		a,(varS)
  80+ B1A1              ;--	xor		$80
  81+ B1A1              ;--	ld		(varS),a
  82+ B1A1              ;--	ex		af,af'
  83+ B1A1              ;--	ret
  84+ B1A1
  85+ B1A1              ;;;;	baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
  86+ B1A1              ;;;;; Calculate the following between sign-magnitude numbers:
  87+ B1A1              ;;;;;   (S A) = (S R) + (A Q)
  88+ B1A1              ;;;;; where the sign bytes only contain the sign bits, not magnitudes.
  89+ B1A1              ;;;;; note goes wrong at <-127 >128 so need 16 bit version
  90+ B1A1              ;;;;LL38:
  91+ B1A1              ;;;;; Calculate sign for Q from A and varS
  92+ B1A1              ;;;;	ld		hl,varS							;
  93+ B1A1              ;;;;	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  94+ B1A1              ;;;;	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  95+ B1A1              ;;;;	ld		a,(varQ)						; Q	\ else addition, S already correct
  96+ B1A1              ;;;;	ld		hl,varR
  97+ B1A1              ;;;;	add		a,(hl)							; a = Q + R
  98+ B1A1              ;;;;	ret										; Done
  99+ B1A1              ;;;;.LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
 100+ B1A1              ;;;;	ld		hl,varQ                         ;
 101+ B1A1              ;;;;	ld		a,(hl)
 102+ B1A1              ;;;;	JumpIfAGTENusng 128,LL39Sub16bit		; does this need to be 16 bit
 103+ B1A1              ;;;;	ld		a,(varR)						;
 104+ B1A1              ;;;;	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
 105+ B1A1              ;;;;	sbc		a,(hl)							; A = R - Q
 106+ B1A1              ;;;;	jr		c,.SignCorrection				; if there was underflow we have to correct sign
 107+ B1A1              ;;;;	or		a								; Clear carry flag to say result is correct
 108+ B1A1              ;;;;	ret
 109+ B1A1              ;;;;.SignCorrection:
 110+ B1A1              ;;;;    neg                                     ; flip A 2'c value to positive
 111+ B1A1              ;;;;	ex		af,af'							; save A temporarily
 112+ B1A1              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 113+ B1A1              ;;;;	xor		$80							    ;
 114+ B1A1              ;;;;	ld		(varS),a                        ; flip sign bit of a
 115+ B1A1              ;;;;	ex		af,af'                          ; get back a which is the result
 116+ B1A1              ;;;;	ret
 117+ B1A1              ;;;;LL39Sub16Bit:
 118+ B1A1              ;;;;	ld		e,a
 119+ B1A1              ;;;;	ld		d,0
 120+ B1A1              ;;;;	ld		a,(varR)
 121+ B1A1              ;;;;	ld		l,a
 122+ B1A1              ;;;;	ld		h,0
 123+ B1A1              ;;;;	ClearCarryFlag
 124+ B1A1              ;;;;	sbc		hl,de
 125+ B1A1              ;;;;	jr		c,.SignCorrection16bit
 126+ B1A1              ;;;;	bit		7,h
 127+ B1A1              ;;;;	jr		z,.GoodToReturn
 128+ B1A1              ;;;;.Needtonegate:
 129+ B1A1              ;;;;	macronegate16hl
 130+ B1A1              ;;;;.GoodToReturn
 131+ B1A1              ;;;;	ld		a,l
 132+ B1A1              ;;;;	or		a
 133+ B1A1              ;;;;	ret
 134+ B1A1              ;;;;.SignCorrection16bit:
 135+ B1A1              ;;;;	macronegate16hl
 136+ B1A1              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 137+ B1A1              ;;;;	xor		$80							    ;
 138+ B1A1              ;;;;	ld		(varS),a                        ; flip sign bit of a
 139+ B1A1              ;;;;	ld		a,l
 140+ B1A1              ;;;;	ret
 141+ B1A1
 142+ B1A1
# file closed: ./Maths/Utilities/badd_ll38.asm
1195  B1A1                  INCLUDE "./Maths/Utilities/moveship4-MVS4.asm"
# file opened: ./Maths/Utilities/moveship4-MVS4.asm
   1+ B1A1              ; Note comparing hl vs iY, you need at least 3 incs or decs for hl to be slower
   2+ B1A1              ; it may be faster though if we can use hl to avoid memory actions if needed
   3+ B1A1              ; need to optimise mad as push hl pop hl and use de doesn't really improve speed
   4+ B1A1
   5+ B1A1
   6+ B1A1              moveship4Yreg:
   7+ B1A1 3A 3B 99     		ld		a,(regY)
   8+ B1A4 47           		ld		b,a
   9+ B1A5              moveship4breg:
  10+ B1A5              		; b = Y index, 9 = nosev, 15 = roofv 21 = sidev
  11+ B1A5              MVS4PitchAlphaRollBeta:
  12+ B1A5              MVS4:										;.MVS4	\ -> &52A1 \ Moveship4, Y is matrix row, pitch&roll update to coordinates
  13+ B1A5 3A 66 99     		ld		a,(ALPHA)					;  ALPHA
  14+ B1A8 32 50 9A     		ld		(varQ),a					; player ship's roll Q = Alpha
  15+ B1AB 21 0E C0     		ld		hl,UBnKxsgn
  16+ B1AE 78           		ld		a,b							; from
  17+ B1AF ED 31        		add		hl,a
  18+ B1B1 7E           		ld		a,(hl)						; INWK+2,Y
  19+ B1B2 32 51 9A     		ld		(varR),a					; R  \ lo
  20+ B1B5 23           		inc		hl
  21+ B1B6 7E           		ld		a,(hl)						; INWK+3,Y
  22+ B1B7 32 52 9A     		ld		(varS),a					; S  \ hi		SR = nosev_y (or axis y)
  23+ B1BA 2B           		dec		hl
  24+ B1BB 2B           		dec		hl
  25+ B1BC 2B           		dec		hl							;
  26+ B1BD 7E           		ld		a,(hl)						; INWK+0,Y
  27+ B1BE 32 4D 99     		ld		(varP),a					; P  \ over-written	 P = nosevx lo
  28+ B1C1 23           		inc		hl
  29+ B1C2 7E           		ld		a,(hl)						; INWK+1,Y
  30+ B1C3 EE 80        		xor		$80							; flip sign  AP = nosevx * - 1
  31+ B1C5 CD 1B AA     		call	madXAequQmulAaddRS			; MAD	\ DE = X.A = alpha*INWK+1,Y + INWK+2to3,Y
  32+ B1C8 23                   inc     hl
  33+ B1C9 23                   inc     hl
  34+ B1CA 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  35+ B1CB 2B                   dec     hl
  36+ B1CC 3A 3A 99             ld      a,(regX)
  37+ B1CF 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-aX   \ their comment
  38+ B1D0 32 4D 99             ld      (varP),a                    ;  P
  39+ B1D3 2B                   dec     hl
  40+ B1D4 2B                   dec     hl
  41+ B1D5 7E                   ld      a,(hl)                      ; INWK+0,Y
  42+ B1D6 32 51 9A             ld      (varR),a                    ;  R	\ lo
  43+ B1D9 23                   inc     hl
  44+ B1DA 7E                   ld      a,(hl)                      ;  INWK+1,Y
  45+ B1DB 32 52 9A             ld      (varS),a                    ; S	\ hi
  46+ B1DE 23                   inc     hl
  47+ B1DF 23                   inc     hl
  48+ B1E0 7E                   ld      a,(hl)                      ; INWK+3,Y
  49+ B1E1 CD 1B AA             call    madXAequQmulAaddRS          ; MAD	\ X.A = alpha*INWK+3,Y + INWK+0to1,Y
  50+ B1E4 2B                   dec     hl
  51+ B1E5 2B                   dec     hl
  52+ B1E6 77                   ld      (hl),a                      ; INWK+1,Y  \ hi
  53+ B1E7 3A 3A 99             ld      a,(regX)
  54+ B1EA 2B                   dec     hl
  55+ B1EB 77                   ld      (hl),a                      ; INWK+0,Y  \ X=X+aY   \ their comment
  56+ B1EC 32 4D 99             ld      (varP),a                    ; P
  57+ B1EF 3A 58 99             ld      a,(BETA)                    ; BETA
  58+ B1F2 32 50 9A             ld      (varQ),a                    ; Q	\ player ship's pitch
  59+ B1F5 23                   inc     hl
  60+ B1F6 23                   inc     hl
  61+ B1F7 7E                   ld      a,(hl)                      ; INWK+2,Y
  62+ B1F8 32 51 9A             ld      (varR),a                    ; R	\ lo
  63+ B1FB 23                   inc     hl
  64+ B1FC 7E                   ld      a,(hl)                      ; INWK+3,Y
  65+ B1FD 32 52 9A             ld      (varS),a                    ; S	\ hi
  66+ B200 23                   inc     hl
  67+ B201 7E                   ld      a,(hl)                      ; INWK+4,Y
  68+ B202 32 4D 99             ld      (varP),a                    ; P	\ lo
  69+ B205 23                   inc     hl
  70+ B206 7E                   ld      a,(hl)                      ; INWK+5,Y
  71+ B207 EE 80                xor     $80                         ; flip sign hi
  72+ B209 CD 1B AA             call    madXAequQmulAaddRS          ; MAD	\ X.A =-beta*INWK+5,Y + INWK+2to3,Y
  73+ B20C 2B                   dec     hl
  74+ B20D 2B                   dec     hl
  75+ B20E 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  76+ B20F 3A 3A 99             ld      a,(regX)
  77+ B212 2B                   dec     hl
  78+ B213 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-bZ  \ their comment
  79+ B214 32 4D 99             ld      (varP),a                    ; P
  80+ B217 23                   inc     hl
  81+ B218 23                   inc     hl
  82+ B219 7E                   ld      a,(hl)                      ; INWK+4,Y
  83+ B21A 32 51 9A             ld      (varR),a                    ; R	\ lo
  84+ B21D 23                   inc     hl
  85+ B21E 7E                   ld      a,(hl)                      ; INWK+5,Y
  86+ B21F 32 52 9A             ld      (varS),a                    ; S	\ hi
  87+ B222 2B                   dec     hl
  88+ B223 2B                   dec     hl
  89+ B224 7E                   ld      a,(hl)                      ; INWK+3,Y
  90+ B225 CD 1B AA             call    madXAequQmulAaddRS          ; MAD	\ X.A = beta*INWK+3,Y + INWK+4,5,Y
  91+ B228 23                   inc     hl
  92+ B229 23                   inc     hl
  93+ B22A 77                   ld      (hl),a                      ; INWK+5,Y \ hi
  94+ B22B 3A 3A 99             ld      a,(regX)
  95+ B22E 2B                   dec     hl
  96+ B22F 77                   ld      (hl),a                      ; INWK+4,Y \ Z=Z+bY   \ their comment
  97+ B230 C9                   ret
  98+ B231
  99+ B231
# file closed: ./Maths/Utilities/moveship4-MVS4.asm
1196  B231              ;INCLUDE "MoveShip5-MVS5.asm"
1197  B231              ;INCLUDE "PAequAmulQusgn-MLU2.asm"
1198  B231              ;INCLUDE "PAequDustYIdxYmulQ-MLU1.asm"
1199  B231              ;INCLUDE "PlanetP12addInwkX-MVT6.asm"
1200  B231                  INCLUDE "./Maths/Utilities/RequAmul256divQ-BFRDIV.asm"
# file opened: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
   1+ B231              ;;;LL28:
   2+ B231              ;;;    ld      c,a                         ;
   3+ B231              ;;;    ld      a,(varQ)                    ;
   4+ B231              ;;;    ld      b,a                         ;
   5+ B231              ;;;    ld      a,c                         ; Get varQ into b and retain c
   6+ B231              ;;;RequAmul256divB:                        ;
   7+ B231              ;;;LL28Breg:
   8+ B231              ;;;; "BFRDIV R = (A * 256 / Q)  byte from remainder of division, not signed a = a, b = q, c = r"
   9+ B231              ;;;	cp		b							; Check A >= Q
  10+ B231              ;;;	jr		nc, .AnswerTooBig			; A >= Q? yes too big
  11+ B231              ;;;.CalcRemainder:
  12+ B231              ;;;	ld		c, 	$FE						; set R to $FE
  13+ B231              ;;;.RollRemainder:
  14+ B231              ;;;	sla		a
  15+ B231              ;;;	jr		c,.Reduce					; if a >> generates carry reduce
  16+ B231              ;;;	cp		b							; a < q?
  17+ B231              ;;;	jr		nc,.DontSBC
  18+ B231              ;;;.DoSBC:									; a is < q
  19+ B231              ;;;	sbc		a,b							; 	a -= q
  20+ B231              ;;;.DontSBC:
  21+ B231              ;;;	rl		c							; r << 1
  22+ B231              ;;;	jr		c, .RollRemainder			; if rol generated a carry, continue
  23+ B231              ;;;    ld      a,c
  24+ B231              ;;;    ld      (varR),a
  25+ B231              ;;;	ret									; R (c) left with remainder
  26+ B231              ;;;.Reduce:								; a geneated a carry
  27+ B231              ;;;	sbc		a,b							; a = a - (q +1)
  28+ B231              ;;;	scf									; set carry flag for rl
  29+ B231              ;;;	rl		c							; r << 1 briging in carry
  30+ B231              ;;;	jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  31+ B231              ;;;    ld      a,c
  32+ B231              ;;;    ld      (varR),a
  33+ B231              ;;;	ret
  34+ B231              ;;;.AnswerTooBig:
  35+ B231              ;;;	ld	    c,$FF							; arse its too big
  36+ B231              ;;;    ld      a,c
  37+ B231              ;;;    ld      (varR),a
  38+ B231              ;;;	ret
  39+ B231
  40+ B231              BCequAmul256DivC:
  41+ B231 59             ld    e,c
  42+ B232 67             ld    h,a
  43+ B233 2E 00          ld    l,0
  44+ B235              AdivEDivide:                             ; this routine performs the operation BC=HL/E
  45+ B235 7B             ld a,e                                 ; checking the divisor; returning if it is zero
  46+ B236 B7             or a                                   ; from this time on the carry is cleared
  47+ B237 C8             ret z
  48+ B238 01 FF FF       ld bc,-1                               ; BC is used to accumulate the result
  49+ B23B 16 00          ld d,0                                 ; clearing D, so DE holds the divisor
  50+ B23D              AdivEDivLoop:                            ; subtracting DE from HL until the first overflow
  51+ B23D ED 52          sbc hl,de                              ; since the carry is zero, SBC works as if it was a SUB
  52+ B23F 03             inc bc                                 ;  note that this instruction does not alter the flags
  53+ B240 30 FB          jr nc,AdivEDivLoop                     ; no carry means that there was no overflow
  54+ B242 C9             ret
  55+ B243
  56+ B243              HL_Div_C:
  57+ B243              ; Integer divides HL by C
  58+ B243              ; Result in HL, remainder in A
  59+ B243              ; Clobbers F, B
  60+ B243 06 10                ld b,16
  61+ B245 AF                   xor a
  62+ B246              HL_Div_C_Loop:
  63+ B246 29                   add hl,hl
  64+ B247 17                   rla
  65+ B248 B9                   cp c
  66+ B249 38 02                jr c,HL_DivC_Skip
  67+ B24B 91                   sub c
  68+ B24C 2C                   inc l
  69+ B24D              HL_DivC_Skip:
  70+ B24D 10 F7                djnz HL_Div_C_Loop
  71+ B24F 7D                   ld   a,l
  72+ B250 32 51 9A             ld  (varR),a
  73+ B253 C9                   ret
  74+ B254
  75+ B254
  76+ B254
  77+ B254              ; Entry point if varQ is populated with demoninator
  78+ B254              RequAmul256divQ:
  79+ B254              BFRDIV:
  80+ B254 F5           		push	af
  81+ B255 3A 50 9A     		ld		a,(varQ)
  82+ B258 4F           		ld		c,a
  83+ B259 F1           		pop		af
  84+ B25A FE 00        		cp		0
  85+ B25C CA 73 B2     		jp		z, HLDIVC_0_BY	; fast exit if numerator is 0
  86+ B25F              RequAmul256divC:
  87+ B25F 2E 00        		ld		l,0
  88+ B261 67           		ld		h,a
  89+ B262              HL_Div_Cold:						; fast entry point if C and HL are already set
  90+ B262 06 10        		ld b,16
  91+ B264 AF           		xor a
  92+ B265              LOOPPOINT:
  93+ B265 29           		add hl,hl
  94+ B266 17           		rla
  95+ B267 B9           		cp c
  96+ B268 38 02        		jr c,SKIPINCSUB
  97+ B26A 2C           		inc l
  98+ B26B 91           		sub c
  99+ B26C              SKIPINCSUB:
 100+ B26C 10 F7        		djnz LOOPPOINT
 101+ B26E 7D           		ld		a,l
 102+ B26F 32 51 9A     		ld 		(varR),a
 103+ B272 C9           		ret
 104+ B273              HLDIVC_0_BY:
 105+ B273 32 51 9A     		ld		(varR),a
 106+ B276 C9           		ret
 107+ B277              ;	push	af
 108+ B277              ;	ld		a,b
 109+ B277              ;	ld		(varQ),a
 110+ B277              ;	pop		af
 111+ B277              ;RequAmul256divQ:
 112+ B277              ;BFRDIV:									;BFRDIV R=A*256/Q   byte from remainder of division
 113+ B277              ;	ld		hl,varQ
 114+ B277              ;	JumpIfAGTENusng	(hl),LL2			;  is A >=  Q ?, if yes, answer too big for 1 byte, R=#&FF
 115+ B277              ;	ld		b,$FE						; b = X
 116+ B277              ;	ld		c,a							; c = R	div roll counter
 117+ B277              ;LL31:									; roll R
 118+ B277              ;	sla		a
 119+ B277              ;	jr		c,LL29						; hop to Reduce
 120+ B277              ;	JumpIfALTNusng (hl)					; Q skip sbc if a < Q
 121+ B277              ;	sbc		a,(hl)						; a = a - Q
 122+ B277              ;	rl		c							; rotate R left
 123+ B277              ;	jr		c,LL31						; loop if R poped out a carry bit
 124+ B277              ;	jr		LL2Good
 125+ B277              ;LL29:									; Reduce
 126+ B277              ;	sbc		a,(hl)
 127+ B277              ;	scf
 128+ B277              ;	rl		c							; roll a carry flag into R
 129+ B277              ;	jr		c,LL31						;  loop R
 130+ B277              ;	jr		LL2Good
 131+ B277              ;LL2:
 132+ B277              ;	ld		c,$FF
 133+ B277              ;LL2Good:
 134+ B277              ;	ld		a,c
 135+ B277              ;	ld		(varR),a
 136+ B277              ;	ret
 137+ B277
# file closed: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
1201  B277                  INCLUDE "./Maths/Utilities/RequAdivQ-LL61.asm"
# file opened: ./Maths/Utilities/RequAdivQ-LL61.asm
   1+ B277              RequAdivQ:
   2+ B277              	; R = A/Q, U = remainder, code looked a little odd as if R is reminader and U = result
   3+ B277              LL61:										; Handling division R=A/Q for case further down
   4+ B277 4F           	ld		c,a								; c = A
   5+ B278 3A 50 9A     	ld		a,(varQ)						; test for divide by 0
   6+ B27B FE 00        	cp		0
   7+ B27D 28 16        	jr		z,LL84							; divide by zero error
   8+ B27F 57           	ld		d,a								; now we can do C/D
   9+ B280 06 08            ld b,8
  10+ B282 AF               xor a
  11+ B283              LL63:										; roll divide loop
  12+ B283 CB 21            sla c
  13+ B285 17               rla
  14+ B286 BA               cp d
  15+ B287 38 02            jr c,LL64
  16+ B289 0C               inc c
  17+ B28A 92               sub d
  18+ B28B              LL64:
  19+ B28B 10 F6            djnz LL63
  20+ B28D 32 4F 9A     	ld	(varU),a							; store remainder in U
  21+ B290 79           	ld	a,c
  22+ B291 32 51 9A     	ld	(varR),a							; store remainder in R
  23+ B294 C9               ret
  24+ B295              LL84:										; div error  R=U=#5
  25+ B295 3E 32        	ld		a,50
  26+ B297 32 51 9A     	ld		(varR),a
  27+ B29A 32 4F 9A     	ld		(varU),a
  28+ B29D C9           	ret
  29+ B29E
# file closed: ./Maths/Utilities/RequAdivQ-LL61.asm
1202  B29E              ;    INCLUDE "./Maths/Utilities/RSequABSrs-LL129.asm"
1203  B29E                  INCLUDE "./Maths/Utilities/RSequQmulA-MULT12.asm"
# file opened: ./Maths/Utilities/RSequQmulA-MULT12.asm
   1+ B29E              asm_mult12:
   2+ B29E              RSequQmulA:
   3+ B29E              ; "asm_ult12  R.S = Q * A \ visited quite often S = hi, R = lo, odd that its opposite to mult1"
   4+ B29E CD 46 B1     	call APequQmulA
   5+ B2A1 08           	ex 	af,af'
   6+ B2A2 7A           	ld	a,d
   7+ B2A3 32 52 9A     	ld	(varS),a
   8+ B2A6 7B           	ld	a,e
   9+ B2A7 32 51 9A     	ld	(varR),a
  10+ B2AA 08           	ex 	af,af'
  11+ B2AB C9           	ret
  12+ B2AC
# file closed: ./Maths/Utilities/RSequQmulA-MULT12.asm
1204  B2AC              ;INCLUDE "SwapRotmapXY-PUS1.asm"
1205  B2AC                  INCLUDE "./Maths/Utilities/tidy.asm"
# file opened: ./Maths/Utilities/tidy.asm
   1+ B2AC              ;rotmap0xLo: DB	0				; INWK +9
   2+ B2AC              ;rotmap0xHi: DB	0				; INWK +10
   3+ B2AC              ;rotmat0yLo: DB	0				; INWK +11
   4+ B2AC              ;rotmat0yHi: DB	0				; INWK +12
   5+ B2AC              ;rotmat0zLo:	DB 	0				; INWK +13
   6+ B2AC              ;rotmat0zHi:	DB 	0				; INWK +14
   7+ B2AC              ;rotmap1xLo: DB	0				; INWK +15
   8+ B2AC              ;rotmap1xHi:	DB	0				; INWK +16
   9+ B2AC              ;rotmat1yLo:	DB	0				; INWK +17
  10+ B2AC              ;rotmat1yHi:	DB	0				; INWK +18
  11+ B2AC              ;rotmat1zLo:	DB	0				; INWK +19
  12+ B2AC              ;rotmat1zHi:	DB	0				; INWK +20
  13+ B2AC              ;rotmat2xLo: DB	0				; INWK +21
  14+ B2AC              ;rotmat2xHi:	DB	0				; INWK +22
  15+ B2AC              ;rotmat2yLo:	DB	0				; INWK +23
  16+ B2AC              ;rotmat2yHi:	DB	0				; INWK +24
  17+ B2AC              ;rotmat2zLo:	DB	0				; INWK +25
  18+ B2AC              ;rotmat2zHi:	DB	0				; INWK +26
  19+ B2AC              ;
  20+ B2AC              ;rotmatFx	equ	rotmat0xHi
  21+ B2AC              ;rotmatFy	equ	rotmat0yHi
  22+ B2AC              ;rotmatFz	equ	rotmat0zHi
  23+ B2AC              ;rotmatUx	equ	rotmat1xHi
  24+ B2AC              ;rotmatUy	equ	rotmat1yHi
  25+ B2AC              ;rotmatUz	equ	rotmat1zHi
  26+ B2AC              ;
  27+ B2AC              ;inwkarray			equ		INWK+10
  28+ B2AC
  29+ B2AC                  include "./Universe/Ships/CopyRotMattoXX15.asm"
# file opened: ././Universe/Ships/CopyRotMattoXX15.asm
   1++B2AC              CopyRotMatNoseVtoXX15:
   2++B2AC                      ldCopyByte  UBnkrotmatNosevX+1 ,XX15VecX
   2++B2AC 3A 22 C0    >                        ld       a,(UBnkrotmatNosevX+1)
   2++B2AF 32 83 C0    >                        ld       (XX15VecX),a
   3++B2B2                      ldCopyByte  UBnkrotmatNosevY+1, XX15VecY
   3++B2B2 3A 24 C0    >                        ld       a,(UBnkrotmatNosevY+1)
   3++B2B5 32 84 C0    >                        ld       (XX15VecY),a
   4++B2B8                      ldCopyByte  UBnkrotmatNosevZ+1 ,XX15VecZ
   4++B2B8 3A 26 C0    >                        ld       a,(UBnkrotmatNosevZ+1)
   4++B2BB 32 85 C0    >                        ld       (XX15VecZ),a
   5++B2BE C9                   ret
   6++B2BF
   7++B2BF              CopyRotMatRoofVtoXX15:
   8++B2BF                      ldCopyByte  UBnkrotmatRoofvX+1 ,XX15VecX
   8++B2BF 3A 1C C0    >                        ld       a,(UBnkrotmatRoofvX+1)
   8++B2C2 32 83 C0    >                        ld       (XX15VecX),a
   9++B2C5                      ldCopyByte  UBnkrotmatRoofvY+1, XX15VecY
   9++B2C5 3A 1E C0    >                        ld       a,(UBnkrotmatRoofvY+1)
   9++B2C8 32 84 C0    >                        ld       (XX15VecY),a
  10++B2CB                      ldCopyByte  UBnkrotmatRoofvZ+1 ,XX15VecZ
  10++B2CB 3A 20 C0    >                        ld       a,(UBnkrotmatRoofvZ+1)
  10++B2CE 32 85 C0    >                        ld       (XX15VecZ),a
  11++B2D1 C9                   ret
  12++B2D2
  13++B2D2              CopyRotMatSideVtoXX15:
  14++B2D2                      ldCopyByte  UBnkrotmatSidevX+1 ,XX15VecX
  14++B2D2 3A 16 C0    >                        ld       a,(UBnkrotmatSidevX+1)
  14++B2D5 32 83 C0    >                        ld       (XX15VecX),a
  15++B2D8                      ldCopyByte  UBnkrotmatSidevY+1, XX15VecY
  15++B2D8 3A 18 C0    >                        ld       a,(UBnkrotmatSidevY+1)
  15++B2DB 32 84 C0    >                        ld       (XX15VecY),a
  16++B2DE                      ldCopyByte  UBnkrotmatSidevZ+1 ,XX15VecZ
  16++B2DE 3A 1A C0    >                        ld       a,(UBnkrotmatSidevZ+1)
  16++B2E1 32 85 C0    >                        ld       (XX15VecZ),a
  17++B2E4 C9                   ret
  18++B2E5
# file closed: ././Universe/Ships/CopyRotMattoXX15.asm
  30+ B2E5
  31+ B2E5                  include "./Universe/Ships/CopyXX15toRotMat.asm"
# file opened: ././Universe/Ships/CopyXX15toRotMat.asm
   1++B2E5              CopyXX15toRotMatNoseV:
   2++B2E5                      ldCopyByte  XX15VecX, UBnkrotmatNosevX+1
   2++B2E5 3A 83 C0    >                        ld       a,(XX15VecX)
   2++B2E8 32 22 C0    >                        ld       (UBnkrotmatNosevX+1),a
   3++B2EB                      ldCopyByte  XX15VecY, UBnkrotmatNosevY+1
   3++B2EB 3A 84 C0    >                        ld       a,(XX15VecY)
   3++B2EE 32 24 C0    >                        ld       (UBnkrotmatNosevY+1),a
   4++B2F1                      ldCopyByte  XX15VecZ, UBnkrotmatNosevZ+1
   4++B2F1 3A 85 C0    >                        ld       a,(XX15VecZ)
   4++B2F4 32 26 C0    >                        ld       (UBnkrotmatNosevZ+1),a
   5++B2F7 C9                   ret
   6++B2F8
   7++B2F8              CopyXX15toRotMatRoofV:
   8++B2F8                      ldCopyByte  XX15VecX, UBnkrotmatRoofvX+1
   8++B2F8 3A 83 C0    >                        ld       a,(XX15VecX)
   8++B2FB 32 1C C0    >                        ld       (UBnkrotmatRoofvX+1),a
   9++B2FE                      ldCopyByte  XX15VecY, UBnkrotmatRoofvY+1
   9++B2FE 3A 84 C0    >                        ld       a,(XX15VecY)
   9++B301 32 1E C0    >                        ld       (UBnkrotmatRoofvY+1),a
  10++B304                      ldCopyByte  XX15VecZ, UBnkrotmatRoofvZ+1
  10++B304 3A 85 C0    >                        ld       a,(XX15VecZ)
  10++B307 32 20 C0    >                        ld       (UBnkrotmatRoofvZ+1),a
  11++B30A C9                   ret
  12++B30B
  13++B30B              CopyXX15toRotMatSideV:
  14++B30B                      ldCopyByte  XX15VecX, UBnkrotmatSidevX+1
  14++B30B 3A 83 C0    >                        ld       a,(XX15VecX)
  14++B30E 32 16 C0    >                        ld       (UBnkrotmatSidevX+1),a
  15++B311                      ldCopyByte  XX15VecY, UBnkrotmatSidevY+1
  15++B311 3A 84 C0    >                        ld       a,(XX15VecY)
  15++B314 32 18 C0    >                        ld       (UBnkrotmatSidevY+1),a
  16++B317                      ldCopyByte  XX15VecZ, UBnkrotmatSidevZ+1
  16++B317 3A 85 C0    >                        ld       a,(XX15VecZ)
  16++B31A 32 1A C0    >                        ld       (UBnkrotmatSidevZ+1),a
  17++B31D C9                   ret
  18++B31E
# file closed: ././Universe/Ships/CopyXX15toRotMat.asm
  32+ B31E
  33+ B31E              TidySub1:									;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
  34+ B31E              		; b = regX on entry
  35+ B31E              TIS1Prep:									;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
  36+ B31E 08           		ex		af,af'
  37+ B31F 78           		ld		a,b
  38+ B320 32 50 9A     		ld		(varQ),a
  39+ B323 08           		ex		af,af'
  40+ B324 EE 80        		xor		$80							;	 flip sign of Acc
  41+ B326 CD 1B AA     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  42+ B329              ; USES 				A BC E
  43+ B329              ; DOES NOT USE		D HL
  44+ B329              Tis1Div96:							   		; .DVID96	\ Their comment A=A/96: answer is A*255/96
  45+ B329 4F           		ld		c,a							; Store sign bit in  ct (we use e reg for that)
  46+ B32A E6 80        		and		SignOnly8Bit						; ..
  47+ B32C 5F           		ld		e,a							; ..
  48+ B32D 79           		ld		a,c							; a = high byte again with sign bit cleared
  49+ B32E E6 7F        		and		SignMask8Bit							; ..
  50+ B330 06 FE        		ld		b,$FE						; slide counter T1
  51+ B332              TIS1RollTLoop								; roll T1  clamp Acc to #96 for rotation matrix unity
  52+ B332 CB 27        		sla		a
  53+ B334              		JumpIfALTNusng $60, TIS1SkipSub
  53+ B334 FE 60       >                        cp      $60
  53+ B336 DA 43 B3    >                        jp		c, TIS1SkipSub
  54+ B339 DE 60        		sbc		a,$60							; subtract 96
  55+ B33B 37           		scf
  56+ B33C CB 10        		rl		b							;  T1
  57+ B33E 38 F2        		jr		c,TIS1RollTLoop
  58+ B340              TIS1KIPCont:
  59+ B340 78           		ld		a,b							;   T1
  60+ B341 B3           		or		e							;   restore T sign
  61+ B342 C9           		ret
  62+ B343              TIS1SkipSub:
  63+ B343 B7           	or			a
  64+ B344 CB 10        	rl			b							; T rolled left to push bit out the end
  65+ B346 38 EA        	jr			c,TIS1RollTLoop				; if we still have not hit the empty marker continue
  66+ B348 C3 40 B3     	jp			TIS1KIPCont
  67+ B34B
  68+ B34B              ;.TIDY	\ -> &4679 \ Orthogonalize rotation matrix that uses 0x60 as unity returns INWK(16,18,20) = INWK(12*18+14*20, 10*16+14*20, 10*16+12*18) / INWK(10,12,14)
  69+ B34B              ; Ux,Uy,Uz = -(FyUy+FzUz, FxUx+FzUz, FxUx+FyUy)/ Fx,Fy,Fz
  70+ B34B
  71+ B34B
  72+ B34B
  73+ B34B
  74+ B34B              TidyRotYSmall:
  75+ B34B CD 76 B4     		call	CalcRoofvZ
  76+ B34E 32 20 C0     		ld		(UBnkrotmatRoofvZ+1),a			; set roofvy hi?? Says roofz TODO
  77+ B351 C3 87 B3     		jp		NormaliseRoofV
  78+ B354
  79+ B354              TidyRotXSmall:
  80+ B354 AF           		xor		a
  81+ B355 47           		ld		b,a
  82+ B356 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev_y
  83+ B359 E6 60        		and		%01100000
  84+ B35B CA 4B B3     		jp		z,TidyRotYSmall
  85+ B35E 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
  86+ B361 47           		ld		b,a							; b = regX for now
  87+ B362 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
  88+ B365 CD 3C B4     		call	CalcRoofvY					; Set (roofvy= (nosev_x * roofv_x + nosev_z * roofv_z) / nosev_y, Q -= nosev_z
  89+ B368 32 1E C0     		ld		(UBnkrotmatRoofvY+1),a			; set roofvy hi
  90+ B36B C3 87 B3     		jp		NormaliseRoofV
  91+ B36E              ; TIDY is broken
  92+ B36E              TIDY:
  93+ B36E DD 01                break
  94+ B370              ORTHOGALISE:
  95+ B370              ;-- NormaliseNosev
  96+ B370 CD AC B2     		call	CopyRotMatNoseVtoXX15
  97+ B373 CD 53 AE     		call	normaliseXX1596fast			; normalise z hi, its really TIS3
  98+ B376 CD E5 B2     		call	CopyXX15toRotMatNoseV
  99+ B379              .CheckNXSmall:
 100+ B379 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)
 101+ B37C E6 60        		and		%01100000					; check top two magnitude bits
 102+ B37E CA 54 B3     		jp		z,TidyRotXSmall
 103+ B381              .RotXIsBig:
 104+ B381 CD 02 B4             call	CalcRoofvX
 105+ B384 32 1C C0     		ld		(UBnkrotmatRoofvX+1),a    	; set roofvx hi
 106+ B387              NormaliseRoofV:
 107+ B387 CD BF B2     		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 108+ B38A CD 53 AE     		call	normaliseXX1596fast			; normalise roof
 109+ B38D              ;calc sidev x
 110+ B38D CD F8 B2     		call	CopyXX15toRotMatRoofV		; get back normalised version
 111+ B390 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)
 112+ B393 32 50 9A     		ld		(varQ),a					; q = nosev_y
 113+ B396 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 114+ B399 CD 9E B2     		call	RSequQmulA
 115+ B39C 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 116+ B39F 47           		ld		b,a							; b = regX for now
 117+ B3A0 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 118+ B3A3 CD 1E B3     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 119+ B3A6                      JumpIfAIsZero NormSideXNoNeg
 119+ B3A6 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 119+ B3A7 CA AC B3    >                        jp	z, NormSideXNoNeg
 120+ B3AA EE 80        		xor		$80							; flip a to get -sidev_x
 121+ B3AC              NormSideXNoNeg:
 122+ B3AC 32 16 C0     		ld		(UBnkrotmatSidevX+1),a
 123+ B3AF              ;calc sidev y
 124+ B3AF 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 125+ B3B2 32 50 9A     		ld		(varQ),a
 126+ B3B5 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 127+ B3B8 CD 9E B2     		call	RSequQmulA
 128+ B3BB 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)			        ; nosev x
 129+ B3BE 47           		ld		b,a							; b = regX for now
 130+ B3BF 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)			; roofv z
 131+ B3C2 CD 1E B3     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 132+ B3C5                      JumpIfAIsZero NormSideYNoNeg
 132+ B3C5 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 132+ B3C6 CA CB B3    >                        jp	z, NormSideYNoNeg
 133+ B3C9 EE 80        		xor		$80							; flip a to get -sidev_y
 134+ B3CB              NormSideYNoNeg:
 135+ B3CB 32 24 C0     		ld		(UBnkrotmatNosevY+1),a
 136+ B3CE              ;calc sidev z
 137+ B3CE 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)			; nosev x
 138+ B3D1 32 50 9A     		ld		(varQ),a
 139+ B3D4 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 140+ B3D7 CD 9E B2     		call	RSequQmulA
 141+ B3DA 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev y
 142+ B3DD 47           		ld		b,a							; b = regX for now
 143+ B3DE 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 144+ B3E1 CD 1E B3     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 145+ B3E4                      JumpIfAIsZero NormSideZNoNeg
 145+ B3E4 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 145+ B3E5 CA EA B3    >                        jp	z, NormSideZNoNeg
 146+ B3E8 EE 80        		xor		$80							; flip a to get -sidev_y
 147+ B3EA              NormSideZNoNeg:
 148+ B3EA 32 18 C0     		ld		(UBnkrotmatSidevY+1),a ;TODO SHoudl this be Y??
 149+ B3ED              .ClearLoBytes:
 150+ B3ED 21 21 C0     		ld		hl,UBnkrotmatNosevX
 151+ B3F0 06 09        		ld		b,9
 152+ B3F2 AF                   xor     a
 153+ B3F3              .ClearLoLoop:
 154+ B3F3 77           		ld		(hl),a						; zero out lo bytes
 155+ B3F4 23           		inc		hl
 156+ B3F5 23           		inc		hl
 157+ B3F6 10 FB        		djnz	.ClearLoLoop
 158+ B3F8 CD D2 B2     		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 159+ B3FB CD 53 AE     		call	normaliseXX1596fast			; normalise roof
 160+ B3FE              ;calc sidev x
 161+ B3FE CD 0B B3     		call	CopyXX15toRotMatSideV		; get back normalised version
 162+ B401
 163+ B401 C9           		ret
 164+ B402
 165+ B402
 166+ B402
 167+ B402              ;;;;;;;;.CheckNYSmall:
 168+ B402              ;;;;;;;;		ld		a,(XX15+2)					; first check z zero, if so we have to do Y
 169+ B402              ;;;;;;;;		and		$7F
 170+ B402              ;;;;;;;;		cp		0
 171+ B402              ;;;;;;;;		jp		z,Tidy1RZ
 172+ B402              ;;;;;;;;		ld		a,(XX15+1)					; now we can do a realistic check of RY
 173+ B402              ;;;;;;;;		cp 		0							; we can't end up with divide by 0 for RY
 174+ B402              ;;;;;;;;		jp		z,Tidy1RZ					; We can't have all values of vector 0 so we must do RZ
 175+ B402              ;;;;;;;;		and		%01100000					; check top two magnitude bits
 176+ B402              ;;;;;;;;		jp		z,Tidy1RY					; and tidy based on roofy
 177+ B402              ;;;;;;;;.DoNZ:
 178+ B402              ;;;;;;;;		jp		Tidy1RZ						; else we tidy based on roofz
 179+ B402              ;;;;;;;;;---RE ENTRY POINT -------------------------------------
 180+ B402              ;;;;;;;;NormaliseRoofv:
 181+ B402              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 182+ B402              ;;;;;;;;		push	bc
 183+ B402              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 184+ B402              ;;;;;;;;		pop		bc
 185+ B402              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 186+ B402              ;;;;;;;;ProcessSidev:
 187+ B402              ;;;;;;;;; -- SIDEV X
 188+ B402              ;;;;;;;;		ldCopyByte	nosev_z+1, varQ         ; use ixh as Q later
 189+ B402              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 190+ B402              ;;;;;;;;		push	bc
 191+ B402              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 192+ B402              ;;;;;;;;		pop		bc
 193+ B402              ;;;;;;;;		ld		a,(UBnkrotmatNosevY+1)
 194+ B402              ;;;;;;;;		ld		b,a							; set x (b) to value of nosev_z
 195+ B402              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 196+ B402              ;;;;;;;;		push	bc
 197+ B402              ;;;;;;;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 198+ B402              ;;;;;;;;		pop		bc
 199+ B402              ;;;;;;;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 200+ B402              ;;;;;;;;; -- SIDEV Y
 201+ B402              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 202+ B402              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 203+ B402              ;;;;;;;;		push	bc
 204+ B402              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 205+ B402              ;;;;;;;;		pop		bc
 206+ B402              ;;;;;;;;		ld		a,(UBnkrotmatNosevZ+1)
 207+ B402              ;;;;;;;;		ld		b,a
 208+ B402              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)
 209+ B402              ;;;;;;;;		push	bc
 210+ B402              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 211+ B402              ;;;;;;;;		pop		bc
 212+ B402              ;;;;;;;;		ld		(sidev_y+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 213+ B402              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 214+ B402              ;;;;;;;;		push	bc
 215+ B402              ;;;;;;;;; -- SIDEV Z
 216+ B402              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 217+ B402              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)				;
 218+ B402              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 219+ B402              ;;;;;;;;		pop		bc
 220+ B402              ;;;;;;;;		ld		a,(UBnkrotmatNosevX+1)
 221+ B402              ;;;;;;;;		ld		b,a
 222+ B402              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 223+ B402              ;;;;;;;;		push	bc
 224+ B402              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 225+ B402              ;;;;;;;;		pop		bc
 226+ B402              ;;;;;;;;		ld		(sidev_z+1),a
 227+ B402              ;;;;;;;;		xor		a							; set a = 0 so we can clear orientation low bytes
 228+ B402              ;;;;;;;;		ld		hl,sidev_z
 229+ B402              ;;;;;;;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 230+ B402              ;;;;;;;;		ld		hl,UBnkrotmatNosevX
 231+ B402              ;;;;;;;;NormaliseSideV:
 232+ B402              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 233+ B402              ;;;;;;;;		push	bc
 234+ B402              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 235+ B402              ;;;;;;;;		pop		bc
 236+ B402              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 237+ B402              ;;;;;;;;
 238+ B402
 239+ B402
 240+ B402              CalcRoofvX:
 241+ B402              Tidy1RX:										; roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 242+ B402              		ldCopyByte UBnkrotmatNosevZ+1,varQ
 242+ B402 3A 26 C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 242+ B405 32 50 9A    >                        ld       (varQ),a
 243+ B408 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 244+ B40B CD 9E B2     		call	RSequQmulA						; rs = nosez hi * roofz hi
 245+ B40E              		ldCopyByte UBnkrotmatNosevY+1,varQ
 245+ B40E 3A 24 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 245+ B411 32 50 9A    >                        ld       (varQ),a
 246+ B414 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)
 247+ B417 CD 1B AA     		call	madXAequQmulAaddRS				; DE = nosey hi * roofy hi + rs
 248+ B41A 7A           		ld		a,d
 249+ B41B E6 80        		and 	$80
 250+ B41D FD 67        		ld		iyh,a
 251+ B41F              ;DEBUG		ld		c,a
 252+ B41F 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)					; get nosev x sign
 253+ B422 4F           		ld		c,a								; temp save
 254+ B423 E6 80        		and		$80
 255+ B425 FD AC        		xor		iyh								; flip from saved multiply sign result
 256+ B427 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 257+ B429 79           		ld		a,c								; recover a
 258+ B42A E6 7F        		and		$7F								; a is unsigned nosev x
 259+ B42C 42           		ld		b,d
 260+ B42D 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 261+ B42E 57           		ld		d,a								; de = nosev x hi
 262+ B42F 1E 00        		ld		e,0
 263+ B431 CD C5 AC     		call	BC_Div_DE
 264+ B434 FD 7C        		ld		a,iyh							; get back sign from nosevx
 265+ B436 EE 80        		xor		$80								; flip sign
 266+ B438 E6 80        		and		$80								; keep sign bit only
 267+ B43A B0           		or		b
 268+ B43B C9           		ret
 269+ B43C
 270+ B43C
 271+ B43C              CalcRoofvY:
 272+ B43C              Tidy1RY:										; roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 273+ B43C              		ldCopyByte UBnkrotmatNosevZ+1,varQ				;                  A        Q              RS
 273+ B43C 3A 26 C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 273+ B43F 32 50 9A    >                        ld       (varQ),a
 274+ B442 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 275+ B445 CD 9E B2     		call	RSequQmulA
 276+ B448              		ldCopyByte UBnkrotmatNosevX+1,varQ
 276+ B448 3A 22 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 276+ B44B 32 50 9A    >                        ld       (varQ),a
 277+ B44E 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)
 278+ B451 CD 1B AA     		call	madXAequQmulAaddRS
 279+ B454 7A           		ld		a,d
 280+ B455 E6 80        		and 	$80
 281+ B457 FD 67        		ld		iyh,a
 282+ B459 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)					; get nosev x sign
 283+ B45C 4F           		ld		c,a								; temp save
 284+ B45D E6 80        		and		$80
 285+ B45F FD AC        		xor		iyh								; flip from saved multiply sign result
 286+ B461 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 287+ B463 79           		ld		a,c								; recover a
 288+ B464 E6 7F        		and		$7F								; a is unsigned nosev x
 289+ B466 42           		ld		b,d
 290+ B467 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 291+ B468 57           		ld		d,a								; de = nosev x hi
 292+ B469 1E 00        		ld		e,0
 293+ B46B CD C5 AC     		call	BC_Div_DE
 294+ B46E FD 7C        		ld		a,iyh
 295+ B470 EE 80        		xor		$80
 296+ B472 E6 80        		and		$80
 297+ B474 B0           		or		b
 298+ B475 C9           		ret
 299+ B476
 300+ B476              CalcRoofvZ:
 301+ B476              Tidy1RZ:										; roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 302+ B476              		ldCopyByte UBnkrotmatNosevY+1,varQ
 302+ B476 3A 24 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 302+ B479 32 50 9A    >                        ld       (varQ),a
 303+ B47C 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)
 304+ B47F CD 9E B2     		call	RSequQmulA						; rs = NOSEy * ROOFy
 305+ B482              		ldCopyByte UBnkrotmatNosevX+1,varQ
 305+ B482 3A 22 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 305+ B485 32 50 9A    >                        ld       (varQ),a
 306+ B488 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)
 307+ B48B CD 1B AA     		call	madXAequQmulAaddRS				; de (A,ixl) = NOSEx * ROOFx + RS
 308+ B48E 7A           		ld		a,d
 309+ B48F E6 80        		and 	$80
 310+ B491 FD 67        		ld		iyh,a
 311+ B493 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)					; get nosev x sign
 312+ B496 4F           		ld		c,a								; temp save
 313+ B497 E6 80        		and		$80
 314+ B499 FD AC        		xor		iyh								; flip from saved multiply sign result
 315+ B49B FD 67        		ld		iyh,a							; save nosesev sign to iyh
 316+ B49D 79           		ld		a,c								; recover a
 317+ B49E E6 7F        		and		$7F								; a is unsigned nosev x
 318+ B4A0 42           		ld		b,d
 319+ B4A1 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 320+ B4A2 57           		ld		d,a								; de = nosev x hi
 321+ B4A3 1E 00        		ld		e,0
 322+ B4A5 CD C5 AC     		call	BC_Div_DE
 323+ B4A8 FD 7C        		ld		a,iyh
 324+ B4AA EE 80        		xor		$80
 325+ B4AC E6 80        		and		$80
 326+ B4AE B0           		or		b
 327+ B4AF C9           		ret
 328+ B4B0
 329+ B4B0
 330+ B4B0
 331+ B4B0              ;;ProcessSidev:
 332+ B4B0              ;;		ldCopyByte	UBnkrotmatNosevZ+1, varQ         ; use ixh as Q later
 333+ B4B0              ;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 334+ B4B0              ;;		push	bc
 335+ B4B0              ;;		call	RSequQmulA					; RS = Q * A MULT12
 336+ B4B0              ;;		pop		bc
 337+ B4B0              ;;		ld		a,(UBnkrotmatNosevY+1)
 338+ B4B0              ;;		ld		b,a							; set x (b) to value of nosev_z
 339+ B4B0              ;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 340+ B4B0              ;;		push	bc
 341+ B4B0              ;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 342+ B4B0              ;;		pop		bc
 343+ B4B0              ;;		xor		$80							; sidev_x = -a by flipping sign bit
 344+ B4B0              ;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 345+ B4B0              ;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 346+ B4B0              ;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 347+ B4B0              ;;		push	bc
 348+ B4B0              ;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 349+ B4B0              ;;		pop		bc
 350+ B4B0              ;;		ld		a,(UBnkrotmatNosevZ+1)
 351+ B4B0              ;;		ld		b,a
 352+ B4B0              ;;		ld		a,(UBnkrotmatNosevY+1)
 353+ B4B0              ;;		push	bc
 354+ B4B0              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 355+ B4B0              ;;		pop		bc
 356+ B4B0              ;;		xor		$80							; a *= -1
 357+ B4B0              ;;		ld		(UBnkrotmatSidevY+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 358+ B4B0              ;;		ld		a,(UBnkrotmatRoofvY+1)
 359+ B4B0              ;;		push	bc
 360+ B4B0              ;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 361+ B4B0              ;;		ld		a,(UBnkrotmatRoofvX+1)				;
 362+ B4B0              ;;		call	RSequQmulA					; RS = Q * A MULT12
 363+ B4B0              ;;		pop		bc
 364+ B4B0              ;;		ld		a,(UBnkrotmatNosevX+1)
 365+ B4B0              ;;		ld		b,a
 366+ B4B0              ;;		ld		a,(UBnkrotmatRoofvY+1)
 367+ B4B0              ;;		push	bc
 368+ B4B0              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 369+ B4B0              ;;		pop		bc
 370+ B4B0              ;;		xor		$80
 371+ B4B0              ;;		ld		(UBnkrotmatSidevZ+1),a
 372+ B4B0              ;;		xor		a							; set a = 0 so we can clear orientation low bytes
 373+ B4B0              ;;		ld		hl,UBnkrotmatSidevZ
 374+ B4B0              ;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 375+ B4B0              ;;		ld		hl,UBnkrotmatNosevX
 376+ B4B0
 377+ B4B0
 378+ B4B0
 379+ B4B0
 380+ B4B0
 381+ B4B0
 382+ B4B0              ;;;;;;;;;-- Check to see if the top two magnitude bits are clear in nosev_x, if so jump to TI1
 383+ B4B0              ;;;;;;;;.ProcessRoofv:
 384+ B4B0              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 385+ B4B0              ;;;;;;;;		push	bc
 386+ B4B0              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 387+ B4B0              ;;;;;;;;		pop		bc
 388+ B4B0              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 389+ B4B0              ;;;;;;;;.ProcessSidev:
 390+ B4B0              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 391+ B4B0              ;;;;;;;;		push	bc
 392+ B4B0              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 393+ B4B0              ;;;;;;;;		pop		bc
 394+ B4B0              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 395+ B4B0
# file closed: ./Maths/Utilities/tidy.asm
1206  B4B0                  INCLUDE "./Maths/Utilities/LL28AequAmul256DivD.asm"
# file opened: ./Maths/Utilities/LL28AequAmul256DivD.asm
   1+ B4B0
   2+ B4B0              LL28Amul256DivD:        JumpIfAGTENusng  d, .Ll28Exit255
   2+ B4B0 BA          >                        cp     d
   2+ B4B1 D2 CF B4    >                        jp		nc,.Ll28Exit255
   3+ B4B4 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
   4+ B4B6 CB 27        .LL31:                  sla     a
   5+ B4B8 38 0D                                jr      c,.LL29
   6+ B4BA                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
   6+ B4BA BA          >                        cp      d
   6+ B4BB DA C0 B4    >                        jp		c, .SkipSub
   7+ B4BE 92                                   sub     d
   8+ B4BF                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
   8+ B4BF B7          >                        or a
   9+ B4C0 3F           .SkipSub:               ccf                                 ; if we did the subtract the carry will be clear so we need to invert to roll in.
  10+ B4C1 CB 13                                rl      e
  11+ B4C3 38 F1                                jr      c,.LL31
  12+ B4C5 7B                                   ld      a,e
  13+ B4C6 C9                                   ret
  14+ B4C7 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
  15+ B4C8 37                                   scf                                 ; Set the C flag to rotate into the result in R
  16+ B4C9 CB 13                                rl      e                           ; rotate counter e left
  17+ B4CB 38 E9                                jr      c,.LL31                     ; if a bit was spat off teh end then loop
  18+ B4CD 7B                                   ld      a,e                         ; stick result in a
  19+ B4CE C9                                   ret
  20+ B4CF 3E FF        .Ll28Exit255:           ld  a,255                           ; Fail with FF as result
  21+ B4D1 C9                                   ret
  22+ B4D2
# file closed: ./Maths/Utilities/LL28AequAmul256DivD.asm
1207  B4D2                  INCLUDE "./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm"
# file opened: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
   1+ B4D2              XAequMinusXAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
   2+ B4D2              TIS1:
   3+ B4D2 08           		ex		af,af'
   4+ B4D3 3A 3A 99     		ld		a,(regX)
   5+ B4D6 47           		ld		b,a
   6+ B4D7 08           		ex		af,af'
   7+ B4D8              BAequMinusBAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
   8+ B4D8 08           		ex		af,af'
   9+ B4D9 78           		ld		a,b
  10+ B4DA 32 50 9A     		ld		(varQ),a
  11+ B4DD 08           		ex		af,af'
  12+ B4DE EE 80        		xor		$80							;	 flip sign of Acc
  13+ B4E0 CD 1B AA     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  14+ B4E3              ; USES 				A BC E
  15+ B4E3              ; DOES NOT USE		D HL
  16+ B4E3              Div96:										; .DVID96	\ Their comment A=A/96: answer is A*255/96
  17+ B4E3 47           		ld		b,a
  18+ B4E4 E6 80        		and		$80							;	hi sign
  19+ B4E6 5F           		ld		e,a							;   e = varT
  20+ B4E7 78           		ld		a,b
  21+ B4E8 E6 7F        		and		$7F							;	hi A7
  22+ B4EA 06 FE        		ld		b,$FE						;   slide counter
  23+ B4EC 48           		ld		c,b							;   c == T1 ::  T1
  24+ B4ED              .DVL3:										;   roll T1  clamp Acc to #96 for rotation matrix unity
  25+ B4ED CB 27        		sla		a
  26+ B4EF FE 60        		cp		$60							; max 96
  27+ B4F1 30 02        		jr		nc,.DV4
  28+ B4F3 DE 60        		sbc		a,$60							;  SBC #&60
  29+ B4F5              .DV4:										; skip subtraction
  30+ B4F5 CB 11        		rl		c							;  T1
  31+ B4F7 38 F4        		jr		c,.DVL3
  32+ B4F9 79           		ld		a,c							;   T1
  33+ B4FA B3           		or		e							;   restore T sign
  34+ B4FB C9           		ret
  35+ B4FC
# file closed: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
1208  B4FC              ;INCLUDE "XAequQmuilAaddRS-MAD-ADD.asm"
1209  B4FC              ;INCLUDE "XHiYLoequPA-gc3.asm"
1210  B4FC              ;INCLUDE "XHiYLoequPmulAmul4-gc2.asm"
1211  B4FC              ;INCLUDE "XLoYHiequPmulQmul4-gcash.asm"
1212  B4FC              ;INCLUDE "XX12equXX15byXX16-LL51.asm"
1213  B4FC                ;  INCLUDE "./Maths/Utilities/XYeqyx1loSmulMdiv256-Ll120-LL123.asm"
1214  B4FC
1215  B4FC                  INCLUDE "./Tactics.asm"
# file opened: ./Tactics.asm
   1+ B4FC              ;Ship Tactics
   2+ B4FC              ; used  when no pre-checks are requrired, e.g. if forcing a space station from main loop
   3+ B4FC
   4+ B4FC
   5+ B4FC              ; set angry if possible, if its an innocent then flag the space station to get angry
   6+ B4FC 3A 23 C3     MakeAngry:              ld      a,(ShipNewBitsAddr)                     ; Check bit 5 of newb flags
   7+ B4FF                                      JumpIfMemEqNusng ShipTypeAddr, ShipTypeStation, .SetNewbAngry
   7+ B4FF 3A 22 C3    >                        ld  a,(ShipTypeAddr)
   7+ B502 FE 02       >                        cp  ShipTypeStation
   7+ B504 CA 27 B5    >                        jp  z,.SetNewbAngry
   8+ B507 E6 20        .ItsNotAStation:        and     ShipIsBystander                         ; check if space station present if its a bystander
   9+ B509 C4 2D B5                             call    nz, SetStationAngry                     ; Set Space Station if present, Angry
  10+ B50C 3A 37 C0                             ld      a,(UBnkaiatkecm)                        ; get AI data
  11+ B50F                                      ReturnIfAIsZero                                 ; if 0 then no AI attached
  11+ B50F A7          >                        and     a
  11+ B510 C8          >                        ret     z
  12+ B511 F6 80                                or      ShipAIEnabled                           ; set AI Enabled set to ensure its set
  13+ B513 32 37 C0                             ld      (UBnkaiatkecm),a                        ; .
  14+ B516 4F                                   ld      c,a                                     ; Copy to c in case we need it later
  15+ B517                                      SetMemToN UBnKAccel, 2                          ; set accelleration to 2 to speed up
  15+ B517 3E 02       >                        ld      a,2
  15+ B519 32 32 C0    >                        ld      (UBnKAccel),a
  16+ B51C CB 27                                sla     a                                       ; set pitch to 4
  17+ B51E 32 34 C0                             ld      (UBnKRotZCounter),a                     ; .
  18+ B521 3A 24 C3                             ld      a,(ShipAIFlagsAddr)
  19+ B524                                      ReturnIfBitMaskClear ShipCanAnger
  19+ B524 E6 01       >                        and     ShipCanAnger
  19+ B526 C8          >                        ret     z
  20+ B527 CD 2E CA     .SetNewbAngry:          call    SetShipHostile
  21+ B52A C9                                   ret
  22+ B52B
  23+ B52B C9           MissileDidHitUs:        ret ; TODO
  24+ B52C
  25+ B52C C9           PlayerHitByMissile:     ret; TODO , do hit set up blast radius etc
  26+ B52D
  27+ B52D CD F2 9E     SetStationAngry:        call    IsSpaceStationPresent                   ; only if present
  28+ B530 D8                                   ret     c
  29+ B531 3A 2C C0                             ld      a,(UbnKShipBankNbr)                     ; save current bank
  30+ B534 FD 67                                ld      iyh,a
  31+ B536                                      MMUSelectUniverseN 0                            ; space station is always 0
  31+ B536 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
  32+ B53A CD 2E CA                             call    SetShipHostile
  33+ B53D FD 7C                                ld      a,iyh                                   ; get prev bank back
  34+ B53F                                      MMUSelectUniverseA                              ;
  34+ B53F C6 46       >                     add    a,BankUNIVDATA0
  34+ B541 ED 92 56    >                     nextreg UniverseMMU,       a
  35+ B544 C9                                   ret
  36+ B545
  37+ B545              CheckMissileBlastInit:  ZeroA
  37+ B545 AF          >                        xor a
  38+ B546 32 1F 9B                             ld      (CurrentMissileCheck),a
  39+ B549 21 0C C0                             ld      hl,UBnKxlo                      ; Copy Blast Coordinates
  40+ B54C 01 0C 00                             ld      bc,12                           ; and Damage stats
  41+ B54F 11 ED 9A                             ld      de,MissileXPos
  42+ B552 ED B0                                ldir
  43+ B554                                      ZeroA                                   ; we have processd enque request
  43+ B554 AF          >                        xor a
  44+ B555 32 2F C0                             ld      (UBnKMissleHitToProcess),a      ;
  45+ B558 CD 15 B6                             call    CheckIfBlastHitUs               ; If we are in Range
  46+ B55B DC 2B B5                             call    c, MissileDidHitUs              ; Then we get hit
  47+ B55E C9                                   ret
  48+ B55F
  49+ B55F              CheckPointRange:        MACRO   ShipPos, ShipSign, MissilePos, MissileSign
  50+ B55F ~                                    ld      a,(MissilePos)                      ; check X Coord
  51+ B55F ~                                    ld      hl,(ShipSign)
  52+ B55F ~                                    xor     (hl)
  53+ B55F ~                                    and     SignOnly8Bit
  54+ B55F ~                                    ld      hl,(ShipPos)
  55+ B55F ~                                    ld      de,(MissilePos)
  56+ B55F ~                                    jr      z,.SignsDiffernt
  57+ B55F ~            .XSame:                 and     a
  58+ B55F ~                                    sbc     hl,de                               ; distance = Ship X - Missile X
  59+ B55F ~                                    JumpIfPositive      .CheckDiff              ; if result was -ve
  60+ B55F ~                                    NegHL
  61+ B55F ~                                    jp      .CheckDiff
  62+ B55F ~            .SignsDiffernt:         add     hl,de
  63+ B55F ~                                    ReturnIfNegative                            ; if we overflowed then return
  64+ B55F ~            .CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
  65+ B55F ~                                    ReturnIfANotZero
  66+ B55F ~                                    ld      a,l
  67+ B55F ~                                    and     a
  68+ B55F ~                                    ReturnIfAGTEMemusng   CurrentMissileBlastRange
  69+ B55F                                      ENDM
  70+ B55F              ;...................................................................
  71+ B55F              ; We only do one test per loop for spreading the load of work
  72+ B55F 3A 1F 9B     CheckMissileBlastLoop:  ld      a,(CurrentMissileCheck)
  73+ B562                                      ReturnIfAGTENusng   UniverseSlotListSize
  73+ B562 FE 0C       >                        cp    UniverseSlotListSize
  73+ B564 D0          >                        ret	 nc
  74+ B565 FD 6F                                ld      iyl,a
  75+ B567 3C                                   inc     a                                   ; update for next slot so re can fast return on distance checks
  76+ B568 32 1F 9B                             ld      (CurrentMissileCheck),a
  77+ B56B                                      ReturnIfSlotAEmpty
  77+ B56B 21 21 9B    >                        ld      hl,UniverseSlotList
  77+ B56E ED 31       >                        add     hl,a
  77+ B570 7E          >                        ld      a,(hl)
  77+ B571 3C          >                        inc     a
  77+ B572 C8          >                        ret     z           ; if slot was ff inc would make it 0
  77+ B573 3D          >                        dec     a           ; get original value back for later
  78+ B574 CD F2 9E                             call    IsSpaceStationPresent               ; If its a station its imune to missiles
  79+ B577 D8                                   ret     c                                   ; if we have a special mission to kill a staion then its type won't be space station for game logic
  80+ B578 3A 35 C0                             ld      a,(UBnKexplDsp)                     ; Don't explode a ship twice
  81+ B57B E6 20                                and     ShipExploding                       ;
  82+ B57D                                      ReturnIfNotZero                             ;
  82+ B57D C0          >                        ret     nz
  83+ B57E 3A 0E 9B                             ld      a,(CurrentMissileBlastRange)
  84+ B581 FD 67                                ld      iyh,a                               ; iyh = missile blast depending on type
  85+ B583 FD 7D        .CheckRange:            ld      a,iyl                               ; now page in universe data
  86+ B585                                      MMUSelectUniverseA
  86+ B585 C6 46       >                     add    a,BankUNIVDATA0
  86+ B587 ED 92 56    >                     nextreg UniverseMMU,       a
  87+ B58A                                      CheckPointRange UBnKxlo, UBnKxsgn, MissileXPos, MissileXSgn  ; its a square but its good enough
  87+ B58A 3A ED 9A    >                        ld      a,(MissileXPos)                      ; check X Coord
  87+ B58D 2A 0E C0    >                        ld      hl,(UBnKxsgn)
  87+ B590 AE          >                        xor     (hl)
  87+ B591 E6 80       >                        and     SignOnly8Bit
  87+ B593 2A 0C C0    >                        ld      hl,(UBnKxlo)
  87+ B596 ED 5B ED 9A >                        ld      de,(MissileXPos)
  87+ B59A 28 0F       >                        jr      z,.SignsDiffernt
  87+ B59C A7          >.XSame:                 and     a
  87+ B59D ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
  87+ B59F             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
  87+ B59F F2 AD B5    >                        jp		p, .CheckDiff
  87+ B5A2             >                        NegHL
  87+ B5A2 AF          >                    xor a
  87+ B5A3 95          >                    sub l
  87+ B5A4 6F          >                    ld l,a
  87+ B5A5 9F          >                    sbc a,a
  87+ B5A6 94          >                    sub h
  87+ B5A7 67          >                    ld h,a
  87+ B5A8 C3 AD B5    >                        jp      .CheckDiff
  87+ B5AB 19          >.SignsDiffernt:         add     hl,de
  87+ B5AC             >                        ReturnIfNegative                            ; if we overflowed then return
  87+ B5AC F8          >                        ret     m
  87+ B5AD 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
  87+ B5AE             >                        ReturnIfANotZero
  87+ B5AE A7          >                        and     a
  87+ B5AF C0          >                        ret     nz
  87+ B5B0 7D          >                        ld      a,l
  87+ B5B1 A7          >                        and     a
  87+ B5B2             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
  87+ B5B2 21 0E 9B    >                        ld      hl,CurrentMissileBlastRange
  87+ B5B5 BE          >                        cp      (hl)
  87+ B5B6 D0          >                        ret	    nc
  88+ B5B7                                      CheckPointRange UBnKylo, UBnKysgn, MissileYPos, MissileYSgn
  88+ B5B7 3A F0 9A    >                        ld      a,(MissileYPos)                      ; check X Coord
  88+ B5BA 2A 11 C0    >                        ld      hl,(UBnKysgn)
  88+ B5BD AE          >                        xor     (hl)
  88+ B5BE E6 80       >                        and     SignOnly8Bit
  88+ B5C0 2A 0F C0    >                        ld      hl,(UBnKylo)
  88+ B5C3 ED 5B F0 9A >                        ld      de,(MissileYPos)
  88+ B5C7 28 0F       >                        jr      z,.SignsDiffernt
  88+ B5C9 A7          >.XSame:                 and     a
  88+ B5CA ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
  88+ B5CC             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
  88+ B5CC F2 DA B5    >                        jp		p, .CheckDiff
  88+ B5CF             >                        NegHL
  88+ B5CF AF          >                    xor a
  88+ B5D0 95          >                    sub l
  88+ B5D1 6F          >                    ld l,a
  88+ B5D2 9F          >                    sbc a,a
  88+ B5D3 94          >                    sub h
  88+ B5D4 67          >                    ld h,a
  88+ B5D5 C3 DA B5    >                        jp      .CheckDiff
  88+ B5D8 19          >.SignsDiffernt:         add     hl,de
  88+ B5D9             >                        ReturnIfNegative                            ; if we overflowed then return
  88+ B5D9 F8          >                        ret     m
  88+ B5DA 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
  88+ B5DB             >                        ReturnIfANotZero
  88+ B5DB A7          >                        and     a
  88+ B5DC C0          >                        ret     nz
  88+ B5DD 7D          >                        ld      a,l
  88+ B5DE A7          >                        and     a
  88+ B5DF             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
  88+ B5DF 21 0E 9B    >                        ld      hl,CurrentMissileBlastRange
  88+ B5E2 BE          >                        cp      (hl)
  88+ B5E3 D0          >                        ret	    nc
  89+ B5E4                                      CheckPointRange UBnKzlo, UBnKzsgn, MissileZPos, MissileZSgn
  89+ B5E4 3A F3 9A    >                        ld      a,(MissileZPos)                      ; check X Coord
  89+ B5E7 2A 14 C0    >                        ld      hl,(UBnKzsgn)
  89+ B5EA AE          >                        xor     (hl)
  89+ B5EB E6 80       >                        and     SignOnly8Bit
  89+ B5ED 2A 12 C0    >                        ld      hl,(UBnKzlo)
  89+ B5F0 ED 5B F3 9A >                        ld      de,(MissileZPos)
  89+ B5F4 28 0F       >                        jr      z,.SignsDiffernt
  89+ B5F6 A7          >.XSame:                 and     a
  89+ B5F7 ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
  89+ B5F9             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
  89+ B5F9 F2 07 B6    >                        jp		p, .CheckDiff
  89+ B5FC             >                        NegHL
  89+ B5FC AF          >                    xor a
  89+ B5FD 95          >                    sub l
  89+ B5FE 6F          >                    ld l,a
  89+ B5FF 9F          >                    sbc a,a
  89+ B600 94          >                    sub h
  89+ B601 67          >                    ld h,a
  89+ B602 C3 07 B6    >                        jp      .CheckDiff
  89+ B605 19          >.SignsDiffernt:         add     hl,de
  89+ B606             >                        ReturnIfNegative                            ; if we overflowed then return
  89+ B606 F8          >                        ret     m
  89+ B607 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
  89+ B608             >                        ReturnIfANotZero
  89+ B608 A7          >                        and     a
  89+ B609 C0          >                        ret     nz
  89+ B60A 7D          >                        ld      a,l
  89+ B60B A7          >                        and     a
  89+ B60C             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
  89+ B60C 21 0E 9B    >                        ld      hl,CurrentMissileBlastRange
  89+ B60F BE          >                        cp      (hl)
  89+ B610 D0          >                        ret	    nc
  90+ B611 CD 6C CA                             call    ShipMissileBlast                    ; Ship hit by missile blast
  91+ B614 C9                                   ret                                         ; we are done
  92+ B615              ;...................................................................
  93+ B615 3A 27 C0     CheckIfBlastHitUs:      ld      a,(UBnKMissileBlastRange)
  94+ B618 4F                                   ld      c,a
  95+ B619 C3 20 B6                             jp      MissileHitUsCheckPos
  96+ B61C              ;...................................................................
  97+ B61C 3A 29 C0     CheckIfMissileHitUs:    ld      a,(UBnKMissileDetonateRange)
  98+ B61F 4F                                   ld      c,a
  99+ B620              ;...................................................................
 100+ B620 2A 0C C0     MissileHitUsCheckPos:   ld      hl, (UBnKxlo)
 101+ B623                                      ZeroA
 101+ B623 AF          >                        xor a
 102+ B624 B4                                   or      h
 103+ B625                                      ClearCarryFlag
 103+ B625 B7          >                        or a
 104+ B626                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 104+ B626 C0          >                        ret     nz
 105+ B627 7D                                   ld      a,l
 106+ B628                                      ReturnIfAGTENusng    c                      ; return no carry if x far
 106+ B628 B9          >                        cp    c
 106+ B629 D0          >                        ret	 nc
 107+ B62A 2A 0F C0     .CheckY:                ld      hl,(UBnKylo)
 108+ B62D                                      ZeroA
 108+ B62D AF          >                        xor a
 109+ B62E B5                                   or      l
 110+ B62F                                      ClearCarryFlag
 110+ B62F B7          >                        or a
 111+ B630                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 111+ B630 C0          >                        ret     nz
 112+ B631 7D                                   ld      a,l
 113+ B632                                      ReturnIfAGTENusng    c                      ; return no carry if y far
 113+ B632 B9          >                        cp    c
 113+ B633 D0          >                        ret	 nc
 114+ B634 2A 12 C0     .CheckZ:                ld      hl,(UBnKzlo)
 115+ B637                                      ZeroA
 115+ B637 AF          >                        xor a
 116+ B638 B5                                   or      l
 117+ B639                                      ClearCarryFlag
 117+ B639 B7          >                        or a
 118+ B63A                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 118+ B63A C0          >                        ret     nz
 119+ B63B 7D                                   ld      a,l
 120+ B63C                                      ReturnIfAGTENusng    c                      ; return no carry if z far
 120+ B63C B9          >                        cp    c
 120+ B63D D0          >                        ret	 nc
 121+ B63E              .ItsAHit:               SetCarryFlag
 121+ B63E 37          >                        scf
 121+ B63F                                              ; So must have hit
 122+ B63F C9                                   ret
 123+ B640
 124+ B640              ;...................................................................
 125+ B640              ;... Now the tactics if current ship is the missile
 126+ B640              MissileLogic:           JumpIfMemTrue UBnKMissleHitToProcess, .ProcessMissileHit
 126+ B640 3A 2F C0    >                        ld      a,(UBnKMissleHitToProcess)
 126+ B643 A7          >                        and     a
 126+ B644 CA 9D B6    >                        jp      z, .ProcessMissileHit
 127+ B647              .CheckForECM:           JumpIfMemTrue ECMActive,.ECMIsActive
 127+ B647 3A 61 99    >                        ld      a,(ECMActive)
 127+ B64A A7          >                        and     a
 127+ B64B CA A6 B6    >                        jp      z, .ECMIsActive
 128+ B64E 3A 23 C3     .IsMissileHostile:      ld      a,(ShipNewBitsAddr)                 ; is missle attacking us?
 129+ B651 E6 04                                and     ShipIsHostile
 130+ B653                                      JumpIfNotZero .MissileTargetingShip
 130+ B653 C2 6A B6    >                        jp	nz,.MissileTargetingShip
 131+ B656 2A 0C C0     .MissileTargetingPlayer:ld      hl, (UBnKxlo)                       ; check if missile in range of us
 132+ B659 3A 29 C0                             ld      a,(UBnKMissileDetonateRange)
 133+ B65C 4F                                   ld      c,a                                 ; c holds detonation range
 134+ B65D CD 20 B6                             call    MissileHitUsCheckPos
 135+ B660 D2 69 B6     .MissileNotHitUsYet:    jp      nc, .UpdateTargetingUsPos
 136+ B663 CD 2C B5     .MissleHitUs:           call    PlayerHitByMissile
 137+ B666 C3 A6 B6                             jp      .ECMIsActive                        ; we use ECM logic to destroy missile which eqneues is
 138+ B669 C9           .UpdateTargetingUsPos:  ret                         //TODO
 139+ B66A 3A 30 C0     .MissileTargetingShip:  ld      a,(UBnKMissileTarget)
 140+ B66D              .IsMissleTargetGone:    JumpIfSlotAEmpty    .ECMIsActive            ; if the target was blown up then detonate
 140+ B66D 21 21 9B    >                        ld      hl,UniverseSlotList
 140+ B670 ED 31       >                        add     hl,a
 140+ B672 7E          >                        ld      a,(hl)
 140+ B673 3C          >                        inc     a
 140+ B674 CA A6 B6    >                        jp      z,.ECMIsActive    ; if slot was ff inc would make it 0
 140+ B677 3D          >                        dec     a           ; get original value back for later
 141+ B678              ;... Note we don't have to check for impact as we already have a loop doing that
 142+ B678 FD 6F        .SelectTargetShip:      ld      iyl,a
 143+ B67A                                      MMUSelectUniverseA
 143+ B67A C6 46       >                     add    a,BankUNIVDATA0
 143+ B67C ED 92 56    >                     nextreg UniverseMMU,       a
 144+ B67F 3A 37 C0     .IsShipExploding:       ld      a,(UBnkaiatkecm)
 145+ B682 E6 20                                and     ShipExploding
 146+ B684 20 0A                                jr      nz,.UpdateTargetingShipPos
 147+ B686 FD 7D        .ShipIsExploding:       ld      a,iyl                               ; get missile back into memory
 148+ B688                                      MMUSelectUniverseA
 148+ B688 C6 46       >                     add    a,BankUNIVDATA0
 148+ B68A ED 92 56    >                     nextreg UniverseMMU,       a
 149+ B68D C3 A6 B6                             jp      .ECMIsActive
 150+ B690 21 0C C0     .UpdateTargetingShipPos:ld      hl,UBnKxlo                          ; get missile target pos top temp while
 151+ B693 11 F6 9A                             ld      de,CurrentTargetXpos
 152+ B696 01 09 00                             ld      bc,3*3
 153+ B699 ED B0                                ldir
 154+ B69B FD 7D                                ld a,iyl
 155+ B69D              .CalculateMissileVector:;TODOcall    TacticsPosMinusTarget              ; calculate vector to target
 156+ B69D              ;;TODO                        check range
 157+ B69D              ;;TODO                        if target has ecm then 7% chance it will active, reduce target energy (i.e. damage)
 158+ B69D              ;;TODO                        else
 159+ B69D              ;;TODO                            normalise teh vector for direction
 160+ B69D              ;;TODO                            dot product = missile nosev . normalised vector
 161+ B69D              ;;TODO                            cnt = high byte of dot product, cnf is +ve if facing similar direction
 162+ B69D              ;;TODO                            negate normalised vector so its opposite product
 163+ B69D              ;;TODO                            invert sign of cnt
 164+ B69D              ;;TODO                            AK = roovf . XX15
 165+ B69D              ;;TODO                            Ships pitch = call nroll to caulate teh valu eof ships pitch counter
 166+ B69D              ;;TODO                            if pitch * 2 < 32 then
 167+ B69D              ;;TODO                                ax = sidev . xx15
 168+ B69D              ;;TODO                                    a = x xort current pitch direction
 169+ B69D              ;;TODO                                    shipts roll = nroll
 170+ B69D              ;;TODO                            do accelleration at TA6 (    https://www.bbcelite.com/disc/flight/subroutine/tactics_part_7_of_7.html#ta20
 171+ B69D
 172+ B69D              ;;TODO
 173+ B69D              ;;TODO
 174+ B69D              ;;TODO
 175+ B69D              ;;TODOget the targetted ship inbto bank
 176+ B69D              ;;TODO                        check range as per player
 177+ B69D              ;;TODO                        handle explosion enc
 178+ B69D
 179+ B69D              ;                    else see how close it is to target
 180+ B69D              ;                         if close to target
 181+ B69D              ;                            then explodes destroy missile
 182+ B69D              ;                                 if ship is not station
 183+ B69D              ;                                    then set up signal target ship hit my missile flag
 184+ B69D              ;                                         set blastcheckcounter to slotlist length  (12)
 185+ B69D              ;                                 end if
 186+ B69D              ;                                 if we are in range of missle blast
 187+ B69D              ;                                    cause blast damage to our ship (this will signal death is needed)
 188+ B69D              ;                                 end if
 189+ B69D              ;                                 return
 190+ B69D              ;                         end if
 191+ B69D              ;                 end if
 192+ B69D              ;         end if
 193+ B69D 3A 1F 9B     .ProcessMissileHit:     ld      a,(CurrentMissileCheck)
 194+ B6A0                                      ReturnIfAGTENusng UniverseSlotListSize  ; need to wait another loop
 194+ B6A0 FE 0C       >                        cp    UniverseSlotListSize
 194+ B6A2 D0          >                        ret	 nc
 195+ B6A3 C3 45 B5     .ActivateNewExplosion:  jp  CheckMissileBlastInit               ; initialise
 196+ B6A6                                      ; DUMMY RET get a free return by using jp
 197+ B6A6 CD 7D CA     .ECMIsActive:           call    UnivExplodeShip                 ; ECM detonates missile
 198+ B6A9                                      SetMemTrue  UBnKMissleHitToProcess      ; Enque an explosion
 198+ B6A9 AF          >                        xor     a
 198+ B6AA 32 2F C0    >                        ld      (UBnKMissleHitToProcess),a
 199+ B6AD C3 9D B6                             jp      .ProcessMissileHit              ; lets see if we can enqueue now
 200+ B6B0                                      ; DUMMY RET get a free return as activenewexplosion does jp to init with a free ret
 201+ B6B0
 202+ B6B0
 203+ B6B0
 204+ B6B0                          ;            else if ship is angry at us
 205+ B6B0              ;
 206+ B6B0
 207+ B6B0              ; Part 1 - if type is missile and enquing a missile blast and slot free
 208+ B6B0              ;             then enqueue missile blast details
 209+ B6B0              ;                  mark as exploded
 210+ B6B0              ;                  remove missile from universe slot list
 211+ B6B0
 212+ B6B0              ; TODO, how to we deal with scared ships, e.g. if angry and no guns or missiles then should be considered scared or if hull mass < say 25% of our ship
 213+ B6B0              ; also for future ship vs ship combat
 214+ B6B0              ;... Tactics........................................................................
 215+ B6B0              ;.PART 1
 216+ B6B0              ; if shiphitbymissleflag <> false
 217+ B6B0              ;    then dec blast check counter
 218+ B6B0              ;         if blast check counter = 0
 219+ B6B0              ;            then set shiphitbymissileflag to FF
 220+ B6B0              ;    else if SetShipHitByMissileFlag = current ship number
 221+ B6B0              ;            then cause damage to ship
 222+ B6B0              ;         else if ship is in range and ship is not a station
 223+ B6B0              ;                  then cause blast damage to ship
 224+ B6B0              ;         if destroyed
 225+ B6B0              ;            then explode ship
 226+ B6B0              ;                 return
 227+ B6B0              ; end if
 228+ B6B0              ; if ship is a missle (I think we allow missile on missle action)
 229+ B6B0              ;    then if ecm is active
 230+ B6B0              ;            then destroy missile and return
 231+ B6B0              ;            else if ship is angry at us
 232+ B6B0              ;                    then if ship is close to us
 233+ B6B0              ;                            then explodes causing damage to our ship
 234+ B6B0              ;                                 enque missile blast
 235+ B6B0              ;                                 destroy missile
 236+ B6B0              ;                                 set blastcheckcounter to slotlist length
 237+ B6B0              ;                                 set shiphitbymissileflag to FE (general blast)
 238+ B6B0              ;                                 return
 239+ B6B0              ;                            else jump to part 3 to do updates
 240+ B6B0              ;                         end if
 241+ B6B0              ;                    else see how close it is to target
 242+ B6B0              ;                         if close to target
 243+ B6B0              ;                            then
 244+ B6B0              ;                                 enque missile blast
 245+ B6B0              ;                                 destroy missile
 246+ B6B0              ;                                 if ship is not station
 247+ B6B0              ;                                    then set up signal target ship hit my missile flag
 248+ B6B0              ;                                         set blastcheckcounter to slotlist length  (12)
 249+ B6B0              ;                                 end if
 250+ B6B0              ;                                 if we are in range of missle blast
 251+ B6B0              ;                                    cause blast damage to our ship (this will signal death is needed)
 252+ B6B0              ;                                 end if
 253+ B6B0              ;                                 return
 254+ B6B0              ;                         end if
 255+ B6B0              ;                 end if
 256+ B6B0              ;         end if
 257+ B6B0              ;.PART 2A ** adding in a collision logic
 258+ B6B0              ;    else if ship is close to another ship
 259+ B6B0              ;            then if docking flag set and other ship is space station or we are space station and other ship has docking flag
 260+ B6B0              ;                    then if aligned correctly
 261+ B6B0              ;                         then remove ship as docked
 262+ B6B0              ;                              return
 263+ B6B0              ;         else
 264+ B6B0              ;            call collision route and determine daamage based on sizes and bounce vectors
 265+ B6B0              ;            return
 266+ B6B0              ;.PART 2 ** Need to check if ship has AI flag
 267+ B6B0              ;    else if not hostile
 268+ B6B0              ;            then if not docking or station not present
 269+ B6B0              ;                    then calculate vector to planet
 270+ B6B0              ;                         jump to part 7
 271+ B6B0              ;                    else calculate verctor to docking slot
 272+ B6B0              ;                         call caluclate vector to docking slot (DOCKIT)
 273+ B6B0              ;                         jump to part 7
 274+ B6B0              ;                 end if
 275+ B6B0              ;            else case ship type
 276+ B6B0              ;                      >>escape pod>> point at planet and jump to step 7
 277+ B6B0              ;                      >>space station>> if hostile
 278+ B6B0              ;                                           then if cop counter < 7 and 6.2% chance
 279+ B6B0              ;                                                   then spawm hostile cop
 280+ B6B0              ;                                                end if
 281+ B6B0              ;                                           else
 282+ B6B0              ;                                                if 0.8% change and transporter count = 0
 283+ B6B0              ;                                                   then if 50% chance
 284+ B6B0              ;                                                           then spawn transporter
 285+ B6B0              ;                                                           else spawn shuttle
 286+ B6B0              ;                                                        end if
 287+ B6B0              ;                                                end if
 288+ B6B0              ;                                        end if
 289+ B6B0              ;                                        return
 290+ B6B0              ;                      >>targoid and no mother ship in slot list>> set random drift
 291+ B6B0              ;                                                                  return
 292+ B6B0              ;                      >>if bounty hunter flag>> if ship not hostile
 293+ B6B0              ;                                                   then if trader flag clear or 20% chance
 294+ B6B0              ;                                                        then if fugitive or offender
 295+ B6B0              ;                                                                then set hosile
 296+ B6B0              ;                                                end if
 297+ B6B0              ;                      >>Carrier and hanger slots > 0 >> if 22% chance (code to be added later)
 298+ B6B0              ;                                         then spawn agressive hosting one of types carried
 299+ B6B0              ;                                              reduce ships in hanger by 1
 300+ B6B0              ;                                              return
 301+ B6B0              ;                      >>rock hermit>> if 22% chance
 302+ B6B0              ;                                         then spawn agressive hosting one of Sidewinder, Mamba, Krait, Adder or Gecko
 303+ B6B0              ;                                              return
 304+ B6B0              ;                      >>pirate and in safe zone>> stop pirate being hostile by removing agressive and hostileflags
 305+ B6B0              ;                 end case
 306+ B6B0              ;         end if
 307+ B6B0              ;         recharge ship energy by recharge factor (TODO as a config item on ship type but by default 1)
 308+ B6B0              ; .PART 3
 309+ B6B0              ;         calulcate dot product of ship nose to us
 310+ B6B0              ; .PART 4
 311+ B6B0              ;         2.5% change ship rill roll a noticable amount
 312+ B6B0              ;         if ship has > 50% energy jump to part 6
 313+ B6B0              ;         if ship > 1/8th energy jump to part 5
 314+ B6B0              ;         if random 10% chance (i.e. ship < 1/8 energy and bails out)
 315+ B6B0              ;            then launch escape pod
 316+ B6B0              ;                 set AI to null
 317+ B6B0              ;                 set random pitch and roll
 318+ B6B0              ;                 set accelleation to 0
 319+ B6B0              ;         end if
 320+ B6B0              ; .PART 5
 321+ B6B0              ;         if ship does not have any missilesor ECM is firing to part 6
 322+ B6B0              ;            then if random > threshold for ship type (TODO as a config item on ship type)
 323+ B6B0              ;                    then if tharoid ; note this means thargoids are sensitve to ECM
 324+ B6B0              ;                            then launch thargon
 325+ B6B0              ;                            else spawn angry missle under ship
 326+ B6B0              ;                         end if
 327+ B6B0              ;                 end if
 328+ B6B0              ;            else return
 329+ B6B0              ;         end if
 330+ B6B0              ; .PART 6
 331+ B6B0              ;         if ship is not pointing at us from dot product ( < 160 , also > -32)
 332+ B6B0              ;            then jump to part 7
 333+ B6B0              ;            else if ship is pointing directly at us ( < 163 i.e. > -35)
 334+ B6B0              ;                    then fire laser at us (which reduces energy)
 335+ B6B0              ;                         cause laser damage to our ship (this will signal death is needed)
 336+ B6B0              ;                         decellerate by half as ship has lock on
 337+ B6B0              ;                         return
 338+ B6B0              ;                    else fire laser into space (which reduces energy)
 339+ B6B0              ;                 end if
 340+ B6B0              ;         end if
 341+ B6B0              ; .PART 7#
 342+ B6B0              ;        if ship is a msile targetting us
 343+ B6B0              ;           then ship turns towards us some more
 344+ B6B0              ;           else if z hi > =  3 or ( x hi or y hi > 1) , i.e. ship is far away
 345+ B6B0              ;                    then do random wiht bit 7 set
 346+ B6B0              ;                         if random < AI flag
 347+ B6B0              ;                            then   ship turned towards us
 348+ B6B0              ;                            else   ship turns away from us
 349+ B6B0              ;                         end if
 350+ B6B0              ;                end if
 351+ B6B0              ;           end if
 352+ B6B0              ;           calculate new roll, pitch and accelleration based on new targe vector
 353+ B6B0
 354+ B6B0
 355+ B6B0              ;        determine ship direction based on agression and type
 356+ B6B0              ;        set pitch and roll coutners
 357+ B6B0              ;        adjust speed depleding on relationship to us
 358+ B6B0              ; .PART 8 - new
 359+ B6B0              ;        if ship has ECM, another ECM is not active and missile targeted at it
 360+ B6B0              ;           if ship has enery of ECM energey cost + 1/8th total
 361+ B6B0              ;              if chance 25%
 362+ B6B0              ;                 then fire ECM
 363+ B6B0              ;
# file closed: ./Tactics.asm
1216  B6B0                  INCLUDE "./Hardware/drive_access.asm"
# file opened: ./Hardware/drive_access.asm
   1+ B6B0              M_GETSETDRV             equ $89
   2+ B6B0              F_OPEN                  equ $9a
   3+ B6B0              F_CLOSE                 equ $9b
   4+ B6B0              F_READ                  equ $9d
   5+ B6B0              F_WRITE                 equ $9e
   6+ B6B0              F_SEEK                  equ $9f
   7+ B6B0
   8+ B6B0              FA_READ                 equ $01
   9+ B6B0              FA_APPEND               equ $06
  10+ B6B0              FA_OVERWRITE            equ $0C
  11+ B6B0
  12+ B6B0              ; Success 1 = default drive, carry reset
  13+ B6B0              ; Failure HL = -1 , carry set, errno set
  14+ B6B0 F5 C5 D5 E5  GetDefaultDrive:        push	af,,bc,,de,,hl,,ix
  14+ B6B4 DD E5
  15+ B6B6 AF                                   xor	    a	; a = 0 means get default drive into A
  16+ B6B7 CF                                   rst	    $08
  17+ B6B8 89                                   db	    $89
  18+ B6B9 32 C3 B6                             ld	    (DefaultDrive),a
  19+ B6BC DD E1 E1 D1                          pop		af,,bc,,de,,hl,,ix
  19+ B6C0 C1 F1
  20+ B6C2 C9                                   ret
  21+ B6C3 00           DefaultDrive:	        db	0
  22+ B6C4
  23+ B6C4              ; *******************************************************************************************************
  24+ B6C4              ;	Function:	Open a file read for reading/writing
  25+ B6C4              ;	In:		ix = filename
  26+ B6C4              ;			b  = Open filemode
  27+ B6C4              ;	ret		a  = handle, 0 on error
  28+ B6C4              ; *******************************************************************************************************
  29+ B6C4 E5           fOpen:	                push	hl
  30+ B6C5 DD E5 E1                             ld      hl,ix
  31+ B6C8 3A C3 B6                             ld	    a,(DefaultDrive)
  32+ B6CB CF                                   rst	    $08
  33+ B6CC 9A                                   db	    F_OPEN
  34+ B6CD E1                                   pop	    hl
  35+ B6CE C9                                   ret
  36+ B6CF
  37+ B6CF              ; *******************************************************************************************************
  38+ B6CF              ;	Function	Read bytes from the open file
  39+ B6CF              ;	In:		ix  = address to read into
  40+ B6CF              ;			bc  = amount to read
  41+ B6CF              ;	ret:		carry set = error
  42+ B6CF              ; *******************************************************************************************************
  43+ B6CF B7           fRead:                  or   	a             ; is it zero?
  44+ B6D0 C8                                   ret  	z             ; if so return
  45+ B6D1 E5                                   push    hl
  46+ B6D2 DD E5 E1                             ld      hl,ix    	 ; load ix into hl and save hl for later
  47+ B6D5 CF                                   rst	    $08
  48+ B6D6 9D                                   db	    F_READ
  49+ B6D7 E1                                   pop	    hl
  50+ B6D8 C9                                   ret
  51+ B6D9
  52+ B6D9              ; *******************************************************************************************************
  53+ B6D9              ;	Function	Read bytes from the open file
  54+ B6D9              ;	In:		ix  = address to read into
  55+ B6D9              ;			bc  = amount to read
  56+ B6D9              ;	ret:		carry set = error
  57+ B6D9              ; *******************************************************************************************************
  58+ B6D9 B7           fWrite:                 or   	a             ; is it zero?
  59+ B6DA C8                                   ret  	z             ; if so return
  60+ B6DB E5                                   push	hl
  61+ B6DC DD E5 E1                             ld      hl,ix
  62+ B6DF CF                                   rst	    $08
  63+ B6E0 9E                                   db	    F_WRITE
  64+ B6E1 E1                                   pop	    hl
  65+ B6E2 C9                                   ret
  66+ B6E3
  67+ B6E3              ; *******************************************************************************************************
  68+ B6E3              ;	Function:	Close open file
  69+ B6E3              ;	In:		a  = handle
  70+ B6E3              ;	ret		a  = handle, 0 on error
  71+ B6E3              ; *******************************************************************************************************
  72+ B6E3 B7           fClose:		            or   	a             ; is it zero?
  73+ B6E4 C8                                   ret  	z             ; if so return
  74+ B6E5 CF                                   rst	    $08
  75+ B6E6 9B                                   db	    F_CLOSE
  76+ B6E7 C9                                   ret
  77+ B6E8
  78+ B6E8              ; *******************************************************************************************************
  79+ B6E8              ;	Function	Read bytes from the open file
  80+ B6E8              ;	In:		a   = file handle
  81+ B6E8              ;			L   = Seek mode (0=start, 1=rel, 2=-rel)
  82+ B6E8              ;			BCDE = bytes to seek
  83+ B6E8              ;	ret:		BCDE = file pos from start
  84+ B6E8              ; *******************************************************************************************************
  85+ B6E8 DD E5 E5     fSeek:                  push	ix,,hl
  86+ B6EB CF                                   rst	    $08
  87+ B6EC 9F                                   db	    F_SEEK
  88+ B6ED E1 DD E1                             pop	    ix,,hl
  89+ B6F0 C9                                   ret
  90+ B6F1
  91+ B6F1              ; *******************************************************************************************************
  92+ B6F1              ; Init the file system
  93+ B6F1              ; *******************************************************************************************************
  94+ B6F1 CD B0 B6     InitFileSystem:         call    GetDefaultDrive
  95+ B6F4 C9                                   ret
  96+ B6F5
  97+ B6F5              ; *******************************************************************************************************
  98+ B6F5              ; Function:	Load a whole file into memory	(confirmed working on real machine)
  99+ B6F5              ; In:		hl = file data pointer
 100+ B6F5              ;		    ix = address to load to
 101+ B6F5              ;           bc = filelength
 102+ B6F5              ; *******************************************************************************************************
 103+ B6F5 CD B0 B6     FileLoad:	            call    GetDefaultDrive
 104+ B6F8 C5 D5 F5                             push	bc,,de,,af
 105+ B6FB                                      ; get file size
 106+ B6FB C5 DD E5                             push	bc,,ix			; store size, load address,
 107+ B6FE E5 DD E1                             ld      ix,hl
 108+ B701 06 01                                ld      b,FA_READ		; mode open for reading
 109+ B703 CD C4 B6                             call    fOpen
 110+ B706 38 17                                jr	    c,.error_opening; carry set? so there was an error opening and A=error code
 111+ B708 FE 00                                cp	    0				; was file handle 0?
 112+ B70A 28 13                                jr	    z,.error_opening; of so there was an error opening.
 113+ B70C DD E1 C1                             pop     bc,,ix          ; get load address back and size back
 114+ B70F F5                                   push	af				; remember handle
 115+ B710 CD CF B6                             call	fRead			; read data from A to address IX of length BC
 116+ B713 38 0C                                jr	    c,.error_reading
 117+ B715 F1                                   pop	    af			    ; get handle back
 118+ B716 CD E3 B6                             call	fClose			; close file
 119+ B719 38 07                                jr	    c,.error_closing
 120+ B71B F1 D1 C1                             pop     bc,,de,,af      ; normal exit
 121+ B71E C9                                   ret
 122+ B71F              ;
 123+ B71F              ; On error, display error code an lock up so we can see it
 124+ B71F              ;
 125+ B71F DD E1        .error_opening:         pop	ix
 126+ B721 C1           .error_reading:		    pop	bc	; don't pop a, need error code
 127+ B722
 128+ B722              .error_closing:
 129+ B722 C1           .NormalError:  	        pop	bc	; don't pop into A, return with error code
 130+ B723 D1                                   pop	de
 131+ B724 C1                                   pop	bc
 132+ B725 C9                                   ret
 133+ B726
 134+ B726              ; *******************************************************************************************************
 135+ B726              ; Function:	Save a whole file into memory	(confirmed working on real machine)
 136+ B726              ; In:		hl = file name
 137+ B726              ;		    ix = address to save from
 138+ B726              ;		    bc = size
 139+ B726              ; *******************************************************************************************************
 140+ B726 CD B0 B6     FileSave:	            call    GetDefaultDrive		; need to do this each time?!?!?
 141+ B729 C5 DD E5                             push	bc,,ix   			; store size& save address
 142+ B72C E5 DD E1                             ld      ix,hl               ; get name into ix
 143+ B72F 06 0C                                ld      b,FA_OVERWRITE		; mode open for writing
 144+ B731 CD C4 B6                             call    fOpen
 145+ B734 38 12                                jr	    c,.error_opening	; carry set? so there was an error opening and A=error code
 146+ B736 FE 00                                cp	    0			        ; was file handle 0?
 147+ B738 28 0E                                jr	    z,.error_opening	; of so there was an error opening.
 148+ B73A DD E1 C1                             pop	    bc,,ix			    ; get lenght and save address back
 149+ B73D F5                                   push	af			        ; remember handle
 150+ B73E CD D9 B6                             call	fWrite			    ; read data from A to address IX of length BC
 151+ B741 38 04                                jr	c,.error
 152+ B743 F1                                   pop	af			            ; get handle back
 153+ B744 CD E3 B6                             call	fClose			    ; close file
 154+ B747 C9           .error:                 ret
 155+ B748              ;
 156+ B748              ; On error, display error code an lock up so we can see it
 157+ B748              ;
 158+ B748 DD E1 C1     .error_opening:         pop	bc,,ix                  ; don't pop a, need error code
 159+ B74B C9                                   ret
 160+ B74C
# file closed: ./Hardware/drive_access.asm
1217  B74C
1218  B74C                  INCLUDE "./Menus/common_menu.asm"
# file opened: ./Menus/common_menu.asm
   1+ B74C 43 4F 4D 4D  txt_commander 			DB "COMMANDER",0
   1+ B750 41 4E 44 45
   1+ B754 52 00
   2+ B756 49 4E 56 45  txt_inventory 			DB "INVENTORY",0
   2+ B75A 4E 54 4F 52
   2+ B75E 59 00
   3+ B760 50 72 65 73  txt_present_system		DB "Present System   :",0
   3+ B764 65 6E 74 20
   3+ B768 53 79 73 74
   3+ B76C 65 6D 20 20
   3+ B770 20 3A 00
   4+ B773 48 79 70 65  txt_hyperspace_system	DB "Hyperspace System:",0
   4+ B777 72 73 70 61
   4+ B77B 63 65 20 53
   4+ B77F 79 73 74 65
   4+ B783 6D 3A 00
   5+ B786 43 6F 6E 64  txt_condition			DB "Condition   :",0
   5+ B78A 69 74 69 6F
   5+ B78E 6E 20 20 20
   5+ B792 3A 00
   6+ B794 46 75 65 6C  txt_fuel				DB "Fuel        :",0
   6+ B798 20 20 20 20
   6+ B79C 20 20 20 20
   6+ B7A0 3A 00
   7+ B7A2 43 61 73 68  txt_cash				DB "Cash        :",0
   7+ B7A6 20 20 20 20
   7+ B7AA 20 20 20 20
   7+ B7AE 3A 00
   8+ B7B0 4C 65 67 61  txt_legal_status		DB "Legal Status:",0
   8+ B7B4 6C 20 53 74
   8+ B7B8 61 74 75 73
   8+ B7BC 3A 00
   9+ B7BE 52 61 74 69  txt_rating				DB "Rating      :",0
   9+ B7C2 6E 67 20 20
   9+ B7C6 20 20 20 20
   9+ B7CA 3A 00
  10+ B7CC 45 51 55 49  txt_equipment			DB "EQUIPMENT:",0
  10+ B7D0 50 4D 45 4E
  10+ B7D4 54 3A 00
  11+ B7D7
  12+ B7D7 30 30 2E 30  txt_fuel_level			DB "00.0 Light Years",0
  12+ B7DB 20 4C 69 67
  12+ B7DF 68 74 20 59
  12+ B7E3 65 61 72 73
  12+ B7E7 00
  13+ B7E8 58 58 58 58  txt_cash_amount			DB "XXXXXXXXXX",0
  13+ B7EC 58 58 58 58
  13+ B7F0 58 58 00
  14+ B7F3 2E           txt_cash_decimal        DB "."
  15+ B7F4 58 20 43 72  txt_cash_fraction       DB "X Cr",0
  15+ B7F8 00
  16+ B7F9
  17+ B7F9              txt_status_colour		equ $FF
  18+ B7F9
  19+ B7F9              print_boiler_text_l2:
  20+ B7F9              ; ">print_boilder_text hl = text structure, b = message count"
  21+ B7F9              BoilerTextLoop:
  22+ B7F9 C5           	push		bc			; Save Message Count loop value
  23+ B7FA 4E           	ld			c,(hl)		; Get Row into b
  24+ B7FB 23           	inc			hl
  25+ B7FC 46           	ld			b,(hl)		; Get Col into b
  26+ B7FD 23           	inc			hl
  27+ B7FE 5E           	ld			e,(hl)		; Get text address Lo into E
  28+ B7FF 23           	inc			hl
  29+ B800 56           	ld			d,(hl)		; Get text address Hi into E
  30+ B801 23           	inc			hl
  31+ B802 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  32+ B803 EB           	ex			de,hl		; now hl = address of text data
  33+ B804 1E FF        	ld			e,txt_status_colour
  34+ B806                  MMUSelectLayer2
  34+ B806 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ B80A CD C8 E0     	call		l1_print_at
  36+ B80D E1           	pop			hl
  37+ B80E C1           	pop			bc
  38+ B80F 10 E8        	djnz		BoilerTextLoop
  39+ B811 C9           	ret
  40+ B812
  41+ B812
  42+ B812              print_boiler_text:
  43+ B812              ; ">print_boilder_text hl = text structure, b = message count"
  44+ B812              .BoilerTextLoop:
  45+ B812 C5           	push		bc			; Save Message Count loop value
  46+ B813 4E           	ld			c,(hl)		; Get Row into b
  47+ B814 23           	inc			hl
  48+ B815 46           	ld			b,(hl)		; Get Col into b
  49+ B816 23           	inc			hl
  50+ B817 5E           	ld			e,(hl)		; Get text address Lo into E
  51+ B818 23           	inc			hl
  52+ B819 56           	ld			d,(hl)		; Get text address Hi into E
  53+ B81A 23           	inc			hl
  54+ B81B E5           	push		hl			; Save present HL to stack as this is the address for the next message
  55+ B81C EB           	ex			de,hl		; now hl = address of text data
  56+ B81D 1E FF        	ld			e,txt_status_colour
  57+ B81F C5           	push		bc
  58+ B820 D1           	pop			de
  59+ B821 CD C8 E0     	call		l1_print_at
  60+ B824 E1           	pop			hl
  61+ B825 C1           	pop			bc
  62+ B826 10 EA        	djnz		.BoilerTextLoop
  63+ B828 C9           	ret
  64+ B829
  65+ B829              GetFuelLevel:           INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++B829
   2++B829
   3++B829 3A 2A 9F     	ld		a,(Fuel)
   4++B82C 11 D7 B7     	ld		de,txt_fuel_level
   5++B82F 0E 9C        	ld	c, -100
   6++B831 CD 3B B8     	call	.Num1
   7++B834 0E F6        	ld	c,-10
   8++B836 CD 3B B8     	call	.Num1
   9++B839 0E FF        	ld	c,-1
  10++B83B              .Num1:
  11++B83B 06 2F        	ld	b,'0'-1
  12++B83D              .Num2:
  13++B83D 04           	inc		b
  14++B83E 81           	add		a,c
  15++B83F 38 FC        	jr		c,.Num2
  16++B841 91           	sub 	c
  17++B842 C5           	push	bc
  18++B843 F5           	push	af
  19++B844 79           	ld		a,c
  20++B845 FE FF        	cp		-1
  21++B847 CC 50 B8     	call	z,.InsertDot
  22++B84A 78           	ld		a,b
  23++B84B 12           	ld		(de),a
  24++B84C 13           	inc		de
  25++B84D F1           	pop		af
  26++B84E C1           	pop		bc
  27++B84F C9           	ret
  28++B850              .InsertDot:
  29++B850 3E 2E        	ld		a,'.'
  30++B852 12           	ld		(de),a
  31++B853 13           	inc		de
  32++B854 C9           	ret
  33++B855
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
  66+ B855
  67+ B855 2A 26 9F     GetCash:                ld      hl,(Cash)
  68+ B858 EB                                   ex      de,hl
  69+ B859 DD 2A 28 9F                          ld      ix,(Cash+2)
  70+ B85D FD 21 E8 B7                          ld		iy,txt_cash_amount
  71+ B861 CD E5 AF                             call 	DispDEIXtoIY	; This will write out with 0 termination after last digit
  72+ B864 FD 7E 00     .ShiftDecimalDigit:     ld		a,(IY+0)				;Push last digit to post decimal
  73+ B867 32 F4 B7                             ld		(txt_cash_fraction),a
  74+ B86A 21 E9 B7     .UpdateInteger:         ld		hl,txt_cash_amount+1	; Now was there only 1 digit
  75+ B86D 7E                                   ld		a,(hl)					; if so we leave it alone so its "0.0"
  76+ B86E FE 00                                cp		0
  77+ B870 C8                                   ret		z
  78+ B871 FD 36 00 00                          ld		(IY),0					; Else we erase last digit as it went to fraction
  79+ B875 C9                                   ret
  80+ B876
# file closed: ./Menus/common_menu.asm
1219  B876              ; ARCHIVED INCLUDE "Menus/draw_fuel_and_crosshair.asm"
1220  B876              ;INCLUDE "./title_page.asm"
1221  B876
1222  B876              ; Blocks dependent on variables in Universe Banks
1223  B876              ; Bank 49
1224  B876              ;    SEG RESETUNIVSEG
1225  B876              ;seg     CODE_SEG,       4:              $0000,       $8000                 ; flat address
1226  B876              ;seg     RESETUNIVSEG,   BankResetUniv:  StartOfBank, ResetUniverseAddr
1227  B876
1228  B876              ;	ORG ResetUniverseAddr
1229  B876              ;INCLUDE "./GameEngine/resetUniverse.asm"
1230  B876              ; Bank 50
1231  B876
1232  B876
1233  B876
1234  B876                  SLOT    MenuShrChtAddr
1235  B876                  PAGE    BankMenuShrCht
1236  B876              	ORG     MenuShrChtAddr,BankMenuShrCht
1237  C000                  INCLUDE "./Menus/short_range_chart_menu.asm"
# file opened: ./Menus/short_range_chart_menu.asm
   1+ C000
   2+ C000 53 68 6F 72  short_range_page_marker  DB "ShortRange  PG50"
   2+ C004 74 52 61 6E
   2+ C008 67 65 20 20
   2+ C00C 50 47 35 30
   3+ C010
   4+ C010 30 02 FB A6  short_range_boiler_text	DW $0230,TextBuffer
   5+ C014              short_range_header		equ 12
   6+ C014              src_xy_centre			equ $6080
   7+ C014              src_x_centre			equ $80
   8+ C014              src_y_centre			equ $60
   9+ C014              local_chart_star_colour	equ 216
  10+ C014 00 00        local_dx				dw 0
  11+ C016 00 00        local_dy				dw 0
  12+ C018              local_max_range_x		equ 20
  13+ C018              local_max_range_y		equ $26
  14+ C018 00           local_name_row			db	0
  15+ C019 00           local_name_col			db	0
  16+ C01A              local_label_shift_x		equ	3
  17+ C01A              local_label_shift_y		equ	5
  18+ C01A
  19+ C01A 44 69 73 74  src_distance            DB "Distance: "
  19+ C01E 61 6E 63 65
  19+ C022 3A 20
  20+ C024 30 30 30     src_dist_amount         DB "000"
  21+ C027 2E           src_decimal             DB "."
  22+ C028 30           src_fraction            DB "0"
  23+ C029 20 4C 69 67  src_dis_ly              DB " Light Years",0
  23+ C02D 68 74 20 59
  23+ C031 65 61 72 73
  23+ C035 00
  24+ C036 20 20 30 2E  src_default_dist        DB "  0.0"
  24+ C03A 30
  25+ C03B
  26+ C03B 00 00 00...  src_distance_val        DS  6
  27+ C041              src_fill_buffer_len     EQU 32
  28+ C041              src_fill_buffer_size    EQU 4 * src_fill_buffer_len                          ; up to 32 labels topx topy lengthx spare
  29+ C041 00 00 00...  src_printed_text        DS  src_fill_buffer_size                             ; space for occupied cells may move to bit flags later TODO
  30+ C0C1 00           src_buffer_size         DB  0
  31+ C0C2              ;----------------------------------------------------------------------------------------------------------------------------------
  32+ C0C2              SRM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C0C2
   2++C0C2              ;">print_boilder_text hl = text structure, b = message count"
   3++C0C2              .BoilerTextLoop:
   4++C0C2 C5           	push		bc			; Save Message Count loop value
   5++C0C3 4E           	ld			c,(hl)		; Get Row into b
   6++C0C4 23           	inc			hl
   7++C0C5 46           	ld			b,(hl)		; Get Col into b
   8++C0C6 23           	inc			hl
   9++C0C7 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C0C8 23           	inc			hl
  11++C0C9 56           	ld			d,(hl)		; Get text address Hi into E
  12++C0CA 23           	inc			hl
  13++C0CB E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C0CC EB           	ex			de,hl		; now hl = address of text data
  15++C0CD 1E FF        	ld			e,txt_status_colour
  16++C0CF C5           	push		bc
  17++C0D0 D1           	pop			de
  18++C0D1                  MMUSelectLayer1
  18++C0D1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0D5 CD C8 E0     	call		l1_print_at
  20++C0D8 E1           	pop			hl
  21++C0D9 C1           	pop			bc
  22++C0DA 10 E6        	djnz		.BoilerTextLoop
  23++C0DC C9           	ret
  24++C0DD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  33+ C0DD              ;----------------------------------------------------------------------------------------------------------------------------------
  34+ C0DD              SRM_draw_chart_circle_and_crosshair:
  35+ C0DD ED 4B 58 9B                          ld		bc,(PresentSystemX)				; bc = present system
  36+ C0E1 01 80 60                             ld		bc,src_xy_centre					; must be ordered x y in data
  37+ C0E4                                      MMUSelectSpriteBank
  37+ C0E4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  38+ C0E8 CD F5 E0                             call	sprite_local_cursor
  39+ C0EB 3A 2A 9F                             ld		a,(Fuel)
  40+ C0EE 57                                   ld		d,a
  41+ C0EF 1E FF                                ld		e,$FF
  42+ C0F1                                      MMUSelectLayer2
  42+ C0F1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0F5 CD 80 E7                             call	l2_draw_circle
  44+ C0F8 C9                                   ret
  45+ C0F9              ; TODO MOVE CURSOR CODE
  46+ C0F9              ;----------------------------------------------------------------------------------------------------------------------------------
  47+ C0F9              SRM_draw_hyperspace_cross_hair:
  48+ C0F9 ED 4B 5A 9B                          ld		bc,(TargetSystemX)              ; bc = selected jump
  49+ C0FD ED 5B 58 9B                          ld		de,(PresentSystemX)
  50+ C101 0E 80                                ld		c,src_x_centre
  51+ C103 06 60                                ld		b,src_y_centre
  52+ C105                                      MMUSelectSpriteBank
  52+ C105 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  53+ C109 CD FD E0                             call	sprite_local_hyper_cursor
  54+ C10C C9                                   ret
  55+ C10D              ;----------------------------------------------------------------------------------------------------------------------------------
  56+ C10D 3A 45 9B     src_get_name:           ld      a,(Galaxy)
  57+ C110                                      MMUSelectGalaxyA
  57+ C110 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  58+ C113 ED 4B 5A 9B                          ld      bc,(TargetSystemX)
  59+ C117 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
  60+ C11B CD 65 FC                             call    galaxy_system_under_cursor
  61+ C11E FE 00                                cp      0
  62+ C120 C8                                   ret     z
  63+ C121 CD 82 F6                             call	GetDigramWorkingSeed
  64+ C124 21 C1 A7                             ld		hl,name_expanded
  65+ C127 CD 1C A7                             call	CapitaliseString
  66+ C12A 21 C1 A7                             ld		hl, name_expanded
  67+ C12D 3E FF                                ld      a,$FF
  68+ C12F C9                                   ret
  69+ C130              ;----------------------------------------------------------------------------------------------------------------------------------
  70+ C130              SRM_update_hyperspace_cross_hair:
  71+ C130 ED 4B 5A 9B                          ld		bc,(TargetSystemX)              ; bc = selected jump
  72+ C134 ED 5B 58 9B                          ld		de,(PresentSystemX)
  73+ C138 79                                   ld		a,c                             ; a = target x pos
  74+ C139 93                                   sub		e                               ; a = target x - present x
  75+ C13A F2 4B C1                             jp      p,.NoFlipX                      ; if > 0 skip next bit
  76+ C13D ED 44                                neg                                     ; c = a = abs a * 4
  77+ C13F CB 27                                sla		a                               ; .
  78+ C141 CB 27                                sla		a                               ; .
  79+ C143 4F                                   ld      c,a                             ;  .
  80+ C144 3E 80                                ld      a,src_x_centre                  ; c = a = centre screen - c
  81+ C146 91                                   sub     c                               ; .
  82+ C147 4F                                   ld      c,a                             ; .
  83+ C148 C3 52 C1                             jp      .fixY                           ;. now do Y
  84+ C14B CB 27        .NoFlipX:               sla		a
  85+ C14D CB 27                                sla		a
  86+ C14F C6 80                                add		a,src_x_centre
  87+ C151 4F                                   ld      c,a
  88+ C152 78           .fixY:                  ld		a,b                             ; for Y its * 2
  89+ C153 92                                   sub		d
  90+ C154 F2 63 C1                             jp      p,.NoFlipY
  91+ C157 ED 44                                neg
  92+ C159 CB 27                                sla     a
  93+ C15B 47                                   ld      b,a
  94+ C15C 3E 60                                ld      a,src_y_centre
  95+ C15E 90                                   sub     b
  96+ C15F 47                                   ld      b,a
  97+ C160 C3 68 C1                             jp      .RedrawSprite
  98+ C163 CB 27        .NoFlipY                sla		a
  99+ C165 C6 60                                add		a,src_y_centre
 100+ C167 47                                   ld		b,a
 101+ C168              .RedrawSprite:          MMUSelectSpriteBank
 101+ C168 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 102+ C16C CD D0 E0                             call	sprite_lhc_move
 103+ C16F CD A1 C1                             call    src_name_current
 104+ C172 C9                                   ret
 105+ C173
 106+ C173 26 08        src_clear_name_area:    ld      h,8
 107+ C175 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 108+ C178 01 0A A8                             ld      bc,$A80A
 109+ C17B E5           .ClearLoop:             push    hl
 110+ C17C D5                                   push    de
 111+ C17D C5                                   push    bc
 112+ C17E                                      MMUSelectLayer2
 112+ C17E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113+ C182 CD 8A E2                             call	l2_draw_horz_line
 114+ C185 C1                                   pop     bc
 115+ C186 D1                                   pop     de
 116+ C187 E1                                   pop     hl
 117+ C188 04                                   inc     b
 118+ C189 25                                   dec     h
 119+ C18A 20 EF                                jr      nz,.ClearLoop
 120+ C18C C9                                   ret
 121+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ C18D 3A 45 9B     src_system_undercursor: ld      a,(Galaxy)
 123+ C190                                      MMUSelectGalaxyA
 123+ C190 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 124+ C193 ED 4B 5A 9B                          ld      bc,(TargetSystemX)
 125+ C197 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 126+ C19B CD 65 FC                             call    galaxy_system_under_cursor
 127+ C19E FE 00                                cp      0
 128+ C1A0 C8                                   ret     z
 129+ C1A1 CD 0D C1     src_name_current:       call    src_get_name
 130+ C1A4 FE 00                                cp      0
 131+ C1A6 C8                                   ret     z
 132+ C1A7 E5                                   push    hl
 133+ C1A8 F5                                   push    af
 134+ C1A9 CD 73 C1                             call    src_clear_name_area
 135+ C1AC F1                                   pop     af
 136+ C1AD E1                                   pop     hl
 137+ C1AE 01 0A A8                             ld      bc,$A80A
 138+ C1B1 1E FF                                ld		e,$FF
 139+ C1B3                                      MMUSelectLayer2
 139+ C1B3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 140+ C1B7 CD F9 E1                             call	l2_print_7at
 141+ C1BA CD CD C1                             call    src_calc_distance
 142+ C1BD 21 1A C0                             ld      hl,src_distance
 143+ C1C0 01 0A B0                             ld      bc,$B00A
 144+ C1C3 1E FF                                ld		e,$FF
 145+ C1C5                                      MMUSelectLayer2
 145+ C1C5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 146+ C1C9 CD F9 E1                             call	l2_print_7at
 147+ C1CC C9                                   ret
 148+ C1CD              ;----------------------------------------------------------------------------------------------------------------------------------
 149+ C1CD 3A 45 9B     src_calc_distance:      ld      a,(Galaxy)                                      ; Default in 0 distance
 150+ C1D0                                      MMUSelectGalaxyA
 150+ C1D0 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 151+ C1D3 11 24 C0                             ld      de,src_dist_amount
 152+ C1D6 21 36 C0                             ld      hl,src_default_dist
 153+ C1D9 ED A0                                ldi
 154+ C1DB ED A0                                ldi
 155+ C1DD ED A0                                ldi
 156+ C1DF ED A0                                ldi
 157+ C1E1 ED A0                                ldi
 158+ C1E3 ED 4B 58 9B                          ld      bc,(PresentSystemX)
 159+ C1E7 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 160+ C1EB ED 4B 5A 9B                          ld      bc,(TargetSystemX)
 161+ C1EF ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 162+ C1F3 CD F8 FB                             call    galaxy_find_distance                            ; get distance into HL
 163+ C1F6 DD 2A E1 9A                          ld      ix,(Distance)
 164+ C1FA 11 00 00                             ld      de,0
 165+ C1FD FD 21 3B C0                          ld      iy,src_distance_val
 166+ C201 CD E5 AF                             call    DispDEIXtoIY                                    ; use DEIX as distance and write to string at location IY
 167+ C204 FD E5                                push    iy
 168+ C206 E1                                   pop     hl                                              ; hl = iy
 169+ C207 11 3B C0                             ld      de,src_distance_val
 170+ C20A 7E                                   ld		a,(hl)				                            ;Push last digit to post decimal
 171+ C20B 32 28 C0                             ld		(src_fraction),a
 172+ C20E 2B                                   dec     hl
 173+ C20F CD 09 AE                             call    compare16HLDE
 174+ C212 38 18                                jr      c,.done_number
 175+ C214 7E                                   ld      a,(hl)
 176+ C215 32 26 C0                             ld      (src_dist_amount+2),a
 177+ C218 2B                                   dec     hl
 178+ C219 CD 09 AE                             call    compare16HLDE
 179+ C21C 38 0E                                jr      c,.done_number
 180+ C21E 7E                                   ld      a,(hl)
 181+ C21F 32 25 C0                             ld      (src_dist_amount+1),a
 182+ C222 2B                                   dec     hl
 183+ C223 CD 09 AE                             call    compare16HLDE
 184+ C226 38 04                                jr      c,.done_number
 185+ C228 7E                                   ld      a,(hl)
 186+ C229 32 24 C0                             ld      (src_dist_amount),a
 187+ C22C C9           .done_number:           ret
 188+ C22D
 189+ C22D 00 00        PosScan1                DW      0
 190+ C22F 00 00        PosScan2                DW      0
 191+ C231              ; bc = row col, d = xlength e = y length
 192+ C231              ; Check logic simplies to , if 1 = bc and 2 = de:
 193+ C231              ; 12   X1            X2    OK         2 LT X1
 194+ C231              ; 1    X1  2         X2    FAIL       1 LT X1 && 2 GT X1 && 2 LT X2
 195+ C231              ;      X1  12        X2    FAIL       1 GT X1 && 1 LT X2 && 2 GT X1 && 2 LT X2
 196+ C231              ;      X1  1         X2 2  FAIL       1 GT X1 && 1 LT X2 && 2 GT X2
 197+ C231              ;      X1            X2 12 OK         1 GT X2
 198+ C231 16 07        FreeSlotCheck:          ld      d,7
 199+ C233 ED 30                                mul
 200+ C235 79                                   ld      a,c
 201+ C236 83                                   add     e
 202+ C237 30 02                                jr      nc,.NoOverflow
 203+ C239 3E FF        .Overflow:              ld      a,$FF
 204+ C23B 5F           .NoOverflow:            ld      e,a                     ; e now equals max length in pixels
 205+ C23C 78                                   ld      a,b
 206+ C23D C6 08                                add     8
 207+ C23F 57                                   ld      d,a                     ; e = max height
 208+ C240 ED 43 2D C2                          ld      (PosScan1),bc
 209+ C244 ED 53 2F C2                          ld      (PosScan2),de
 210+ C248 DD 21 41 C0  .CheckBoxes:            ld      ix,src_printed_text
 211+ C24C 3A C1 C0                             ld      a,(src_buffer_size)
 212+ C24F FE 00                                cp      0
 213+ C251 28 3C                                jr      z,.SafeToPrint
 214+ C253 60                                   ld      h,b                     ; h will substite for row b as b is used in dnjz
 215+ C254 47                                   ld      b,a
 216+ C255 DD 7E 02     .CheckBoxLoop:          ld      a,(ix+2)
 217+ C258 FE 00                                cp      0                       ; zerolength, not applicable
 218+ C25A 28 29                                jr      z,.NoBox
 219+ C25C 3A 2D C2     .CheckRow:              ld      a,(PosScan1)
 220+ C25F 3C                                   inc     a
 221+ C260                                      JumpIfAGTENusng (ix+2), .NoBox  ; X1 >= BottomLeftX
 221+ C260 DD BE 02    >                        cp     (ix+2)
 221+ C263 D2 85 C2    >                        jp		nc,.NoBox
 222+ C266 3A 2F C2                             ld      a,(PosScan2)
 223+ C269                                      JumpIfALTNusng (ix+0),  .NoBox   ; X2 <= TopRightX
 223+ C269 DD BE 00    >                        cp      (ix+0)
 223+ C26C DA 85 C2    >                        jp		c, .NoBox
 224+ C26F 3A 2E C2     .SafeToPrintX:          ld      a,(PosScan1+1)
 225+ C272 3C                                   inc     a
 226+ C273                                      JumpIfAGTENusng (ix+3), .NoBox  ; Y1 >= BottomLeftY
 226+ C273 DD BE 03    >                        cp     (ix+3)
 226+ C276 D2 85 C2    >                        jp		nc,.NoBox
 227+ C279 3A 30 C2                             ld      a,(PosScan2+1)
 228+ C27C                                      JumpIfALTNusng (ix+1),  .NoBox  ; Y2 <= TopRightY
 228+ C27C DD BE 01    >                        cp      (ix+1)
 228+ C27F DA 85 C2    >                        jp		c, .NoBox
 229+ C282 3E FF        .MatchedBox:            ld      a,$FF
 230+ C284 C9                                   ret
 231+ C285 DD 23        .NoBox:                 inc     ix
 232+ C287 DD 23                                inc     ix
 233+ C289 DD 23                                inc     ix
 234+ C28B DD 23                                inc     ix
 235+ C28D 10 C6                                djnz    .CheckBoxLoop
 236+ C28F 21 41 C0     .SafeToPrint:           ld      hl,src_printed_text
 237+ C292 3A C1 C0                             ld      a,(src_buffer_size)
 238+ C295 57                                   ld      d,a
 239+ C296 1E 04                                ld      e,4
 240+ C298 ED 30                                mul
 241+ C29A 19                                   add     hl,de
 242+ C29B ED 5B 2D C2                          ld      de,(PosScan1)
 243+ C29F 73 23 72 2B                          ld      (hl),de
 244+ C2A3 23                                   inc     hl
 245+ C2A4 23                                   inc     hl
 246+ C2A5 ED 5B 2F C2                          ld      de,(PosScan2)
 247+ C2A9 73 23 72 2B                          ld      (hl),de
 248+ C2AD 21 C1 C0                             ld      hl,src_buffer_size
 249+ C2B0 34                                   inc     (hl)
 250+ C2B1 AF                                   xor     a
 251+ C2B2 C9                                   ret
 252+ C2B3
 253+ C2B3 CD C3 9F     src_label_ssytem:       call	copy_system_to_working
 254+ C2B6 3A 45 9B                             ld      a,(Galaxy)
 255+ C2B9                                      MMUSelectGalaxyA
 255+ C2B9 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 256+ C2BC CD 82 F6                             call	GetDigramWorkingSeed
 257+ C2BF 21 C1 A7                             ld		hl,name_expanded
 258+ C2C2 CD 1C A7                             call	CapitaliseString
 259+ C2C5 3A 18 C0                             ld		a,(local_name_row)
 260+ C2C8 D6 05                                sub		local_label_shift_y
 261+ C2CA 47                                   ld		b,a					    ; b = effective pixel row
 262+ C2CB 3A 19 C0                             ld		a,(local_name_col)
 263+ C2CE C6 03                                add		a,local_label_shift_x
 264+ C2D0 4F                                   ld		c,a                     ; c = effective pixel col
 265+ C2D1 1E 00        .GetStringName:         ld      e,0
 266+ C2D3 21 C1 A7                             ld      hl,name_expanded
 267+ C2D6 7E           .getStringLoop:         ld      a,(hl)
 268+ C2D7 23                                   inc     hl
 269+ C2D8 1C                                   inc     e
 270+ C2D9 FE 00                                cp      0                       ; String must have a terminator to work
 271+ C2DB 20 F9                                jr      nz,.getStringLoop
 272+ C2DD 16 08                                ld      d,8
 273+ C2DF C5                                   push    bc
 274+ C2E0 CD 31 C2                             call    FreeSlotCheck           ; first attemps
 275+ C2E3 C1                                   pop     bc
 276+ C2E4 FE 00                                cp      0
 277+ C2E6 28 19                                jr      z,.OKToPrint
 278+ C2E8 78                                   ld      a,b
 279+ C2E9 C6 08                                add     8
 280+ C2EB 47                                   ld      b,a
 281+ C2EC C5                                   push    bc
 282+ C2ED CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 283+ C2F0 C1                                   pop     bc
 284+ C2F1 FE 00                                cp      0
 285+ C2F3 28 0C                                jr      z,.OKToPrint
 286+ C2F5 78                                   ld      a,b
 287+ C2F6 D6 10                                sub     16
 288+ C2F8 47                                   ld      b,a
 289+ C2F9 C5                                   push    bc
 290+ C2FA CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 291+ C2FD C1                                   pop     bc
 292+ C2FE FE 00                                cp      0
 293+ C300 C0                                   ret     nz
 294+ C301 1E FF        .OKToPrint:             ld		e,$FF
 295+ C303 21 C1 A7                             ld		hl,name_expanded
 296+ C306                                      MMUSelectLayer2
 296+ C306 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C30A CD F9 E1                             call	l2_print_7at
 298+ C30D C9                                   ret
 299+ C30E
 300+ C30E              name_if_possible:
 301+ C30E 3A 18 C0     SRCpixelRowToRefRow:    ld		a,(local_name_row)
 302+ C311 D6 05                                sub		local_label_shift_y
 303+ C313 47                                   ld		b,a					; b = effective pixel row
 304+ C314 CB 3F                                srl		a
 305+ C316 CB 3F                                srl		a
 306+ C318 CB 3F                                srl		a					; divide by 8 to get character row
 307+ C31A                                  ;	sub		2					; don;t write over header TODO tweaks
 308+ C31A 21 16 9A                             ld		hl,IndexedWork
 309+ C31D ED 31                                add		hl,a
 310+ C31F 7E                                   ld		a,(hl)
 311+ C320 FE 00                                cp		0
 312+ C322 20 04                                jr		nz, SRCtryAbove		; if its not empty don't print *(need to test +-1 row TODO)
 313+ C324 36 01                                ld		(hl),1				; flag as in use
 314+ C326 18 12                                jr		SRCFoundRow
 315+ C328 2B           SRCtryAbove:            dec		hl
 316+ C329 7E                                   ld		a,(hl)
 317+ C32A FE 00                                cp		0
 318+ C32C 20 04                                jr		nz, SRCtryBelow		; if its not empty don't print *(need to test +-1 row TODO)
 319+ C32E 36 01                                ld		(hl),1				; flag as in use
 320+ C330 18 08                                jr		SRCFoundRow
 321+ C332 23           SRCtryBelow:            inc		hl
 322+ C333 23                                   inc		hl
 323+ C334 7E                                   ld		a,(hl)
 324+ C335 FE 00                                cp		0
 325+ C337 C8                                   ret		z
 326+ C338 36 01                                ld		(hl),1				; flag as in use
 327+ C33A CD C3 9F     SRCFoundRow:            call	copy_system_to_working
 328+ C33D 3A 45 9B     SRCSmallSizeName:       ld      a,(Galaxy)
 329+ C340                                      MMUSelectGalaxyA
 329+ C340 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 330+ C343 CD 82 F6                             call	GetDigramWorkingSeed
 331+ C346 21 C1 A7     SRCCapitaliseName:      ld		hl,name_expanded
 332+ C349 CD 1C A7                             call	CapitaliseString
 333+ C34C 21 C1 A7     SRCPrintName:           ld		hl, name_expanded
 334+ C34F 3A 18 C0                             ld		a,(local_name_row)
 335+ C352 D6 05                                sub		local_label_shift_y
 336+ C354 47                                   ld		b,a					; b = effective pixel row
 337+ C355 3A 19 C0                             ld		a,(local_name_col)
 338+ C358 C6 03                                add		a,local_label_shift_x
 339+ C35A 4F                                   ld		c,a
 340+ C35B 1E FF                                ld		e,$FF
 341+ C35D                                      MMUSelectLayer2
 341+ C35D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 342+ C361 CD F9 E1                             call	l2_print_7at
 343+ C364 C9                                   ret
 344+ C365
 345+ C365 AF           plot_local_stars:       xor		a
 346+ C366 32 55 9A                             ld		(XSAV),a
 347+ C369 DD 21 16 E0                          ld      ix,galaxy_data
 348+ C36D 32 C1 C0                             ld      (src_buffer_size),a
 349+ C370 21 41 C0     SRCClearNameList:       ld		hl,src_printed_text
 350+ C373 11 80 00                             ld		de,src_fill_buffer_size
 351+ C376 CD 40 96                             call	memfill_dma
 351+ C379
 352+ C379 AF           SRCCounterLoop:         xor		a
 353+ C37A 3A 45 9B                             ld      a,(Galaxy)
 354+ C37D                                      MMUSelectGalaxyA
 354+ C37D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 355+ C380 DD E5                                push    ix
 356+ C382 DD E5                                push    ix
 357+ C384 E1                                   pop     hl
 358+ C385 11 3C 9A                             ld      de,SystemSeed
 359+ C388 CD 96 9F                             call    copy_seed
 360+ C38B 3A 3D 9A                             ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 361+ C38E 4F                                   ld		c,a
 362+ C38F 3A 59 9B     SRCcalcLocaldy:         ld		a,(PresentSystemY)
 363+ C392 47                                   ld		b,a								; so b holds Y ccord
 364+ C393 79                                   ld		a,c
 365+ C394 90                                   sub		b
 366+ C395 CB 7F                                bit		7,a
 367+ C397 28 02                                jr		z,SRCpositivedy
 368+ C399 ED 44        SRCnegativedy:          neg
 369+ C39B FE 26        SRCpositivedy:          cp		local_max_range_y
 370+ C39D 30 48                                jr		nc,SRCtoofar
 371+ C39F 3A 3F 9A     SRCcalcLocaldx:         ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 372+ C3A2 4F                                   ld		c,a
 373+ C3A3 3A 58 9B                             ld		a,(PresentSystemX)
 374+ C3A6 47                                   ld		b,a								; so b holds Y ccord
 375+ C3A7 79                                   ld		a,c
 376+ C3A8 90                                   sub		b
 377+ C3A9 CB 7F                                bit		7,a
 378+ C3AB 28 02                                jr		z,SRCpositivedx
 379+ C3AD ED 44        SRCnegativedx:          neg
 380+ C3AF FE 14        SRCpositivedx:          cp		local_max_range_x
 381+ C3B1 30 34                                jr		nc,SRCtoofar
 382+ C3B3 3A 3D 9A     SRCOKToPlot             ld		a,(SystemSeed+1)
 383+ C3B6 21 59 9B                             ld		hl,PresentSystemY
 384+ C3B9 96                                   sub		(hl)
 385+ C3BA CB 27                                sla		a								; * 2
 386+ C3BC C6 60                                add		src_y_centre
 387+ C3BE 32 18 C0                             ld		(local_name_row),a
 388+ C3C1 47                                   ld		b,a
 389+ C3C2 3A 3F 9A                             ld		a,(SystemSeed+3)
 390+ C3C5 21 58 9B                             ld		hl,PresentSystemX
 391+ C3C8 96                                   sub		(hl)
 392+ C3C9 CB 27                                sla		a
 393+ C3CB CB 27                                sla		a								; * 4
 394+ C3CD C6 80                                add		src_x_centre
 395+ C3CF 32 19 C0                             ld		(local_name_col),a
 396+ C3D2 4F                                   ld		c,a
 397+ C3D3 3A 41 9A                             ld		a,(SystemSeed+5)
 398+ C3D6 E6 01                                and		$01
 399+ C3D8 C6 02                                add		a,2
 400+ C3DA 57                                   ld		d,a
 401+ C3DB 1E D8                                ld		e,local_chart_star_colour
 402+ C3DD                                      MMUSelectLayer2
 402+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 403+ C3E1 CD 39 E8                             call	l2_draw_circle_fill
 404+ C3E4                                     ; call    src_get_name
 405+ C3E4 CD B3 C2                             call	src_label_ssytem
 406+ C3E7 E1           SRCtoofar:              pop     hl
 407+ C3E8 ED 34 08 00                          add     hl,8
 408+ C3EC E5                                   push    hl
 409+ C3ED DD E1                                pop     ix
 410+ C3EF 3A 55 9A                             ld		a,(XSAV)
 411+ C3F2 3D                                   dec		a
 412+ C3F3 FE 00                                cp		0
 413+ C3F5 C8                                   ret		z
 414+ C3F6 32 55 9A                             ld		(XSAV),a
 415+ C3F9 C3 79 C3                             jp		SRCCounterLoop
 416+ C3FC              ;----------------------------------------------------------------------------------------------------------------------------------
 417+ C3FC              draw_local_chart_menu:  InitNoDoubleBuffer
 417+ C3FC             >                            MMUSelectLayer1
 417+ C3FC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 417+ C400 CD 80 E0    >                            call	l1_cls
 417+ C403 3E 07       >                            ld		a,7
 417+ C405 CD 9B E0    >                            call	l1_attr_cls_to_a
 417+ C408             >                            MMUSelectLayer2
 417+ C408 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 417+ C40C CD 09 E0    >                            call    asm_l2_double_buffer_off
 417+ C40F CD F3 E0    >                            call	l2_cls	; Get some space
 417+ C412             >                            MMUSelectSpriteBank
 417+ C412 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 417+ C416 CD 27 E4    >                            call    sprite_cls_cursors
 418+ C419 3E 80                                ld      a,$80
 419+ C41B 32 5B 9A                             ld      (MenuIdMax),a
 420+ C41E                                      CopyPresentSystemToTarget               ; for short range we always start at present and cusor on present
 420+ C41E 2A 58 9B    >                        ld      hl,(PresentSystemX)
 420+ C421 22 5A 9B    >                        ld      (TargetSystemX),hl
 421+ C424 01 01 01     SRCDrawbox:             ld		bc,$0101
 422+ C427 11 FD BE                             ld		de,$BEFD
 423+ C42A 3E C0                                ld		a,$C0
 424+ C42C                                      MMUSelectLayer2
 424+ C42C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 425+ C430 CD 20 E2                             call	l2_draw_box
 426+ C433 01 01 0A                             ld		bc,$0A01
 427+ C436 11 C0 FE                             ld		de,$FEC0
 428+ C439                                      MMUSelectLayer2
 428+ C439 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 429+ C43D CD 8A E2                             call	l2_draw_horz_line
 430+ C440 3E 0C        SRCStaticText:          ld		a,short_range_header
 431+ C442 CD 3C A7                             call	expandTokenToString
 432+ C445 06 01                                ld		b,1
 433+ C447 21 10 C0                             ld		hl,short_range_boiler_text
 434+ C44A CD C2 C0                             call	SRM_print_boiler_text
 435+ C44D CD 90 9F     SRCSetUpChart:          call	copy_galaxy_to_system
 436+ C450 CD 65 C3                             call	plot_local_stars
 437+ C453 CD DD C0     .CircleandCrosshair:    call	SRM_draw_chart_circle_and_crosshair
 438+ C456 CD F9 C0                             call	SRM_draw_hyperspace_cross_hair
 439+ C459 C9                                   ret
 440+ C45A              ;----------------------------------------------------------------------------------------------------------------------------------
 441+ C45A 3A 3C 9B     local_chart_cursors:    ld     a,(CursorKeysPressed)
 442+ C45D FE 00                                cp      0
 443+ C45F C8                                   ret     z
 444+ C460 17                                   rla
 445+ C461 DC 79 C4                             call   c,src_UpPressed
 446+ C464 17                                   rla
 447+ C465 DC 96 C4                             call   c,src_DownPressed
 448+ C468 17                                   rla
 449+ C469 DC B5 C4                             call   c,src_LeftPressed
 450+ C46C 17                                   rla
 451+ C46D DC D2 C4                             call   c,src_RightPressed
 452+ C470 17                                   rla
 453+ C471 DC F1 C4                             call   c,src_HomePressed
 454+ C474 17                                   rla
 455+ C475 DC FB C4                             call   c,src_RecenterPressed
 456+ C478 C9                                   ret
 457+ C479              ;----------------------------------------------------------------------------------------------------------------------------------
 458+ C479 3A 5B 9B     src_UpPressed:          ld     a,(TargetSystemY)
 459+ C47C                                      JumpIfAIsZero   src_BoundsLimit
 459+ C47C A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 459+ C47D CA 10 C5    >                        jp	z, src_BoundsLimit
 460+ C480 47                                   ld      b,a                         ; save target as we will need it
 461+ C481 3A 59 9B                             ld      a,(PresentSystemY)
 462+ C484 90                                   sub     b                           ; get the difference between present and target
 463+ C485 FA 8D C4                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 464+ C488                                      JumpIfAGTENusng 40,src_BoundsLimit  ; if no more than 20 then OK
 464+ C488 FE 28       >                        cp     40
 464+ C48A D2 10 C5    >                        jp		nc,src_BoundsLimit
 465+ C48D 78           .SkipBoundsTest:        ld      a,b
 466+ C48E 3D                                   dec     a
 467+ C48F 32 5B 9B                             ld      (TargetSystemY),a
 468+ C492 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 469+ C495 C9                                   ret
 470+ C496              ;----------------------------------------------------------------------------------------------------------------------------------
 471+ C496 3A 59 9B     src_DownPressed:        ld     a,(PresentSystemY)
 472+ C499 47                                   ld      b,a
 473+ C49A 3A 5B 9B                             ld      a,(TargetSystemY)
 474+ C49D 4F                                   ld      c,a
 475+ C49E                                      JumpIfAEqNusng 128,src_BoundsLimit
 475+ C49E FE 80       >                        cp     128
 475+ C4A0 CA 10 C5    >                        jp      z,src_BoundsLimit
 476+ C4A3 90                                   sub     b
 477+ C4A4 FA AC C4                             jp      m,.SkipBoundsTest
 478+ C4A7                                      JumpIfAGTENusng 40,src_BoundsLimit
 478+ C4A7 FE 28       >                        cp     40
 478+ C4A9 D2 10 C5    >                        jp		nc,src_BoundsLimit
 479+ C4AC 79           .SkipBoundsTest:        ld      a,c
 480+ C4AD 3C                                   inc    a
 481+ C4AE 32 5B 9B                             ld      (TargetSystemY),a
 482+ C4B1 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 483+ C4B4 C9                                   ret
 484+ C4B5              ;----------------------------------------------------------------------------------------------------------------------------------
 485+ C4B5 3A 5A 9B     src_LeftPressed:        ld      a,(TargetSystemX)           ; we can't move left if target is zero
 486+ C4B8                                      JumpIfAIsZero   src_BoundsLimit
 486+ C4B8 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 486+ C4B9 CA 10 C5    >                        jp	z, src_BoundsLimit
 487+ C4BC 47                                   ld      b,a                         ; save target as we will need it
 488+ C4BD 3A 58 9B                             ld      a,(PresentSystemX)
 489+ C4C0 90                                   sub     b                           ; get the difference between present and target
 490+ C4C1 FA C9 C4                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 491+ C4C4                                      JumpIfAGTENusng 20,src_BoundsLimit  ; if no more than 20 then OK
 491+ C4C4 FE 14       >                        cp     20
 491+ C4C6 D2 10 C5    >                        jp		nc,src_BoundsLimit
 492+ C4C9 78           .SkipBoundsTest:        ld      a,b
 493+ C4CA 3D                                   dec     a
 494+ C4CB 32 5A 9B                             ld      (TargetSystemX),a
 495+ C4CE CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 496+ C4D1 C9                                   ret
 497+ C4D2              ;----------------------------------------------------------------------------------------------------------------------------------
 498+ C4D2 3A 58 9B     src_RightPressed:       ld      a,(PresentSystemX)
 499+ C4D5 47                                   ld      b,a
 500+ C4D6 3A 5A 9B                             ld      a,(TargetSystemX)
 501+ C4D9 4F                                   ld      c,a
 502+ C4DA                                      JumpIfAEqNusng 255,src_BoundsLimit
 502+ C4DA FE FF       >                        cp     255
 502+ C4DC CA 10 C5    >                        jp      z,src_BoundsLimit
 503+ C4DF 90                                   sub     b
 504+ C4E0 FA E8 C4                             jp      m,.SkipBoundsTest
 505+ C4E3                                      JumpIfAGTENusng 20,src_BoundsLimit
 505+ C4E3 FE 14       >                        cp     20
 505+ C4E5 D2 10 C5    >                        jp		nc,src_BoundsLimit
 506+ C4E8 79           .SkipBoundsTest:        ld      a,c
 507+ C4E9 3C                                   inc    a
 508+ C4EA 32 5A 9B                             ld      (TargetSystemX),a
 509+ C4ED CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 510+ C4F0 C9                                   ret
 511+ C4F1              ;----------------------------------------------------------------------------------------------------------------------------------
 512+ C4F1 2A 58 9B     src_HomePressed:        ld      hl,(PresentSystemX)
 513+ C4F4 22 5A 9B                             ld      (TargetSystemX),hl
 514+ C4F7 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 515+ C4FA C9                                   ret
 516+ C4FB              ;----------------------------------------------------------------------------------------------------------------------------------
 517+ C4FB 3A 45 9B     src_RecenterPressed:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 518+ C4FE                                      MMUSelectGalaxyA
 518+ C4FE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 519+ C501 ED 4B 5A 9B                          ld      bc,(TargetSystemX)
 520+ C505 CD 70 FB                             call    find_nearest_to_bc
 521+ C508 ED 43 5A 9B                          ld      (TargetSystemX),bc
 522+ C50C CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 523+ C50F C9                                   ret
 524+ C510              ;----------------------------------------------------------------------------------------------------------------------------------
 525+ C510 AF           src_BoundsLimit:        xor     a
 526+ C511 C9                                   ret
 527+ C512
# file closed: ./Menus/short_range_chart_menu.asm
1238  C512              ; Bank 51
1239  C512
1240  C512                  SLOT    MenuGalChtAddr
1241  C512                  PAGE    BankMenuGalCht
1242  C512              	ORG     MenuGalChtAddr
1243  C000                  INCLUDE "./Menus//galactic_chart_menu.asm"
# file opened: ./Menus//galactic_chart_menu.asm
   1+ C000
   2+ C000 47 61 6C 61  galactic_chart_page_marker  DB "GalacticChrtPG51"
   2+ C004 63 74 69 63
   2+ C008 43 68 72 74
   2+ C00C 50 47 35 31
   3+ C010 40 02 FB A6  galactic_chart_boiler_text	DW $0240,TextBuffer
   4+ C014              galactic_chart_header		equ 13
   5+ C014              galactic_star_colour		equ 216
   6+ C014              galactic_star_colour2		equ 108
   7+ C014              galactic_chart_y_offset		equ $18
   8+ C014              galactic_chart_hyper_offset equ 4
   9+ C014              galactic_chart_hyper_x_offset equ 32 - 4
  10+ C014              galactic_chart_hyper_y_offset equ 32 - 4 + 24
  11+ C014 44 69 73 74  galactic_chart_distance     DB "Distance: "
  11+ C018 61 6E 63 65
  11+ C01C 3A 20
  12+ C01E 30 30 30     galactic_chart_dist_amount  DB "000"
  13+ C021 2E           galactic_chart_decimal      DB "."
  14+ C022 30           galactic_chart_fraction     DB "0"
  15+ C023 20 4C 69 67  galactic_chart_dis_ly       DB " Light Years",0
  15+ C027 68 74 20 59
  15+ C02B 65 61 72 73
  15+ C02F 00
  16+ C030 20 20 30 2E  galactic_default_dist       DB "  0.0",0
  16+ C034 30 00
  17+ C036
  18+ C036 00 00 00...  galactic_distance           DS  6
  19+ C03C
  20+ C03C              galactic_find_position      equ $B008
  21+ C03C 46 69 6E 64  galactic_find_message       DB "Find: ",0
  21+ C040 3A 20 00
  22+ C043              galactic_find_text          equ $B038
  23+ C043 20 20 20 20  galactic_blank_message      DB  "                    ",0
  23+ C047 20 20 20 20
  23+ C04B 20 20 20 20
  23+ C04F 20 20 20 20
  23+ C053 20 20 20 20
  23+ C057 00
  24+ C058 2A 2A 2D 2D  galactic_find_no_match      DB "**-- System Not Found --**",0
  24+ C05C 20 53 79 73
  24+ C060 74 65 6D 20
  24+ C064 4E 6F 74 20
  24+ C068 46 6F 75 6E
  24+ C06C 64 20 2D 2D
  24+ C070 2A 2A 00
  25+ C073 20 20 2A 2A  galactic_find_match         DB "  **-- System Found --**  ",0
  25+ C077 2D 2D 20 53
  25+ C07B 79 73 74 65
  25+ C07F 6D 20 46 6F
  25+ C083 75 6E 64 20
  25+ C087 2D 2D 2A 2A
  25+ C08B 20 20 00
  26+ C08E
  27+ C08E              GCM_print_boiler_text:
  28+ C08E                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C08E
   2++C08E              ;">print_boilder_text hl = text structure, b = message count"
   3++C08E              .BoilerTextLoop:
   4++C08E C5           	push		bc			; Save Message Count loop value
   5++C08F 4E           	ld			c,(hl)		; Get Row into b
   6++C090 23           	inc			hl
   7++C091 46           	ld			b,(hl)		; Get Col into b
   8++C092 23           	inc			hl
   9++C093 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C094 23           	inc			hl
  11++C095 56           	ld			d,(hl)		; Get text address Hi into E
  12++C096 23           	inc			hl
  13++C097 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C098 EB           	ex			de,hl		; now hl = address of text data
  15++C099 1E FF        	ld			e,txt_status_colour
  16++C09B C5           	push		bc
  17++C09C D1           	pop			de
  18++C09D                  MMUSelectLayer1
  18++C09D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0A1 CD C8 E0     	call		l1_print_at
  20++C0A4 E1           	pop			hl
  21++C0A5 C1           	pop			bc
  22++C0A6 10 E6        	djnz		.BoilerTextLoop
  23++C0A8 C9           	ret
  24++C0A9
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  29+ C0A9              GCM_draw_chart_circle_and_crosshair:
  30+ C0A9 ED 4B 58 9B  	ld		bc,(PresentSystemX)				; bc = present system
  31+ C0AD              .OnGalacticChart:
  32+ C0AD CB 38        	srl		b								; but row is row / 2
  33+ C0AF C5           	push  	bc
  34+ C0B0              	MMUSelectSpriteBank
  34+ C0B0 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  35+ C0B4 CD 91 E0     	call	sprite_galactic_cursor
  36+ C0B7 C1           	pop		bc
  37+ C0B8 78           	ld		a,b
  38+ C0B9 C6 18        	add		a,galactic_chart_y_offset
  39+ C0BB 47           	ld		b,a
  40+ C0BC 3A 2A 9F     	ld		a,(Fuel)
  41+ C0BF CB 3F        	srl		a
  42+ C0C1 CB 3F        	srl		a								; divide range of fuel by 4 for galactic chart
  43+ C0C3 57           	ld		d,a
  44+ C0C4 1E FF        	ld		e,$FF
  45+ C0C6              	MMUSelectLayer2
  45+ C0C6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  46+ C0CA CD 80 E7     	call	l2_draw_circle
  47+ C0CD C9           	ret
  48+ C0CE              ; TODO MOVE CURSOR CODE
  49+ C0CE
  50+ C0CE ED 4B 5A 9B  GCM_draw_hyperspace_cross_hair: ld		bc,(TargetSystemX)              ; bc = selected jump
  51+ C0D2 C5                                           push    bc
  52+ C0D3 CB 38                                        srl		b								; but row is row / 2
  53+ C0D5                                              MMUSelectSpriteBank
  53+ C0D5 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  54+ C0D9 CD 9D E0                                     call	sprite_galactic_hyper_cursor
  55+ C0DC C1                                           pop     bc
  56+ C0DD CD A9 E0                                     call	sprite_ghc_move
  57+ C0E0 C9                                           ret
  58+ C0E1
  59+ C0E1
  60+ C0E1 AF           plot_gc_stars:          xor		a
  61+ C0E2 32 55 9A                             ld		(XSAV),a
  62+ C0E5 DD 21 16 E0                          ld      ix,galaxy_data
  63+ C0E9 3A 45 9B     .CounterLoop:           ld      a,(Galaxy)
  64+ C0EC                                      MMUSelectGalaxyA
  64+ C0EC ED 92 57    >                     nextreg GalaxyDataMMU,       a
  65+ C0EF DD E5                                push    ix
  66+ C0F1 E1                                   pop     hl
  67+ C0F2 11 3C 9A                             ld      de,SystemSeed
  68+ C0F5 CD 96 9F                             call    copy_seed
  69+ C0F8 3A 3F 9A                             ld		a,(SystemSeed+3)				; QQ15+3 \ seed w1_h is Xcoord of star
  70+ C0FB 4F                                   ld		c,a								; c = X Coord
  71+ C0FC 3A 3D 9A                             ld		a,(SystemSeed+1)
  72+ C0FF CB 3F                                srl		a								; Ycoord /2
  73+ C101 C6 18                                add		a,galactic_chart_y_offset		; add offset to Y coord of star
  74+ C103 47                                   ld		b,a								; b = row
  75+ C104 C5                                   push	bc
  76+ C105 3E D8                                ld		a,galactic_star_colour
  77+ C107                                      MMUSelectLayer2
  77+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  78+ C10B CD 29 E1                             call	l2_plot_pixel
  79+ C10E C1                                   pop		bc
  80+ C10F 3A 40 9A                             ld		a,(SystemSeed+4)
  81+ C112 F6 50                                or		$50								; minimum distance away
  82+ C114 FE 90                                cp		$90
  83+ C116 30 0A                                jr		nc,.NoSecondPixel
  84+ C118 0C           .SecondPixel:           inc		c
  85+ C119 3E 6C                                ld		a,galactic_star_colour2
  86+ C11B                                      MMUSelectLayer2
  86+ C11B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  87+ C11F CD 29 E1                             call	l2_plot_pixel
  88+ C122 DD E5        .NoSecondPixel:         push    ix
  89+ C124 E1                                   pop     hl
  90+ C125 ED 34 08 00                          add     hl,8
  91+ C129 E5                                   push    hl
  92+ C12A DD E1                                pop     ix
  93+ C12C 3A 55 9A                             ld		a,(XSAV)
  94+ C12F 3D                                   dec		a
  95+ C130 FE 00                                cp		0
  96+ C132 C8                                   ret		z
  97+ C133 32 55 9A                             ld		(XSAV),a
  98+ C136 18 B1                                jr		.CounterLoop
  99+ C138
 100+ C138 2A 2A 2A 2A  GALDP       DB "********++++++++"
 100+ C13C 2A 2A 2A 2A
 100+ C140 2B 2B 2B 2B
 100+ C144 2B 2B 2B 2B
 101+ C148              draw_galactic_chart_menu:   InitNoDoubleBuffer
 101+ C148             >                            MMUSelectLayer1
 101+ C148 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 101+ C14C CD 80 E0    >                            call	l1_cls
 101+ C14F 3E 07       >                            ld		a,7
 101+ C151 CD 9B E0    >                            call	l1_attr_cls_to_a
 101+ C154             >                            MMUSelectLayer2
 101+ C154 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 101+ C158 CD 09 E0    >                            call    asm_l2_double_buffer_off
 101+ C15B CD F3 E0    >                            call	l2_cls	; Get some space
 101+ C15E             >                            MMUSelectSpriteBank
 101+ C15E ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 101+ C162 CD 27 E4    >                            call    sprite_cls_cursors
 102+ C165 DD 2E DC                                 ld      ixl,$DC
 103+ C168 3E 40                                    ld      a,$40
 104+ C16A 32 5B 9A                                 ld      (MenuIdMax),a
 105+ C16D 2A 58 9B                                 ld      hl,(PresentSystemX)
 106+ C170              ;                            ld      (TargetSystemX),hl
 107+ C170 CD 4C C4                                 call    gc_present_system               ; Set up the seed for present system
 108+ C173 01 01 01     .Drawbox:                   ld		bc,$0101
 109+ C176 11 FD BE                                 ld		de,$BEFD
 110+ C179 3E C0                                    ld		a,$C0
 111+ C17B                                          MMUSelectLayer2
 111+ C17B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 112+ C17F CD 20 E2                                 call	l2_draw_box
 113+ C182 01 01 0A                                 ld		bc,$0A01
 114+ C185 11 C0 FE                                 ld		de,$FEC0
 115+ C188 CD 8A E2                                 call	l2_draw_horz_line
 116+ C18B 3E 0D        .StaticText:                ld		a,galactic_chart_header
 117+ C18D CD 3C A7                                 call	expandTokenToString
 118+ C190 06 01                                    ld		b,1
 119+ C192 21 10 C0                                 ld		hl,galactic_chart_boiler_text
 120+ C195 CD 8E C0                                 call	GCM_print_boiler_text
 121+ C198 CD A9 C0     .CircleandCrosshair:        call	GCM_draw_chart_circle_and_crosshair
 122+ C19B CD CE C0                                 call	GCM_draw_hyperspace_cross_hair
 123+ C19E CD E1 C0                                 call	plot_gc_stars
 124+ C1A1 3A 45 9B                                 ld      a,(Galaxy)
 125+ C1A4                                          MMUSelectGalaxyA
 125+ C1A4 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 126+ C1A7 ED 4B 5A 9B                              ld      bc,(TargetSystemX)
 127+ C1AB CD 65 FC                                 call    galaxy_system_under_cursor          ; TODO for some reason this bit
 128+ C1AE FE 00                                    cp      0                                   ; does not reset cursor on a miss
 129+ C1B0 20 11                                    jr      nz,.CurrentTargetIsValid
 130+ C1B2              .CurrentTargetIsInvalid:    CopyPresentSystemToTarget
 130+ C1B2 2A 58 9B    >                        ld      hl,(PresentSystemX)
 130+ C1B5 22 5A 9B    >                        ld      (TargetSystemX),hl
 131+ C1B8 ED 4B 5A 9B                              ld      bc,(TargetSystemX)
 132+ C1BC                                          MMUSelectSpriteBank
 132+ C1BC ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 133+ C1C0 CD A9 E0                                 call	sprite_ghc_move
 134+ C1C3 3A 45 9B     .CurrentTargetIsValid:      ld      a,(Galaxy)
 135+ C1C6                                          MMUSelectGalaxyA
 135+ C1C6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 136+ C1C9 ED 43 5B E8                              ld      (GalaxyTargetSystem),bc
 137+ C1CD CD 65 FC                                 call    galaxy_system_under_cursor
 138+ C1D0 CD A4 C3                                 call    gc_name_if_possible
 139+ C1D3                                          SetMemFalse TextInputMode
 139+ C1D3 3E FF       >                        ld      a,$FF
 139+ C1D5 32 3B 9B    >                        ld      (TextInputMode),a
 140+ C1D8              ;IFDEF DOUBLEBUFFER
 141+ C1D8              ;    MMUSelectLayer2
 142+ C1D8              ;    call  l2_flip_buffers
 143+ C1D8              ;ENDIF
 144+ C1D8 C9                                       ret
 145+ C1D9
 146+ C1D9              gcDelayVal                  equ $0A
 147+ C1D9              gcBlinkVal                  equ $10
 148+ C1D9
 149+ C1D9
 150+ C1D9 10           gcCursorBlink               DB  gcBlinkVal
 151+ C1DA 20           gcCursorChar                DB  " "
 152+ C1DB 00           gcEndOfString               DB  0
 153+ C1DC 00 00 00...  gcInputText                 DS  31
 154+ C1FB 00 00 00 00                              DB  0,0,0,0,0
 154+ C1FF 00
 155+ C200 00 00 00...  gcBlank                     DS  32
 156+ C220
 157+ C220              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ C220 11 08 B0     gc_display_find_text:   ld		de,galactic_find_position   ; Wipe input area on screen
 159+ C223 21 3C C0                             ld      hl,galactic_find_message
 160+ C226                                      MMUSelectLayer1
 160+ C226 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 161+ C22A CD C8 E0                             call	l1_print_at
 162+ C22D C9                                   ret
 163+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 164+ C22E 11 DC C1     gc_display_find_string: ld      de,gcInputText
 165+ C231 CD 0A 98                             call    keyboard_copy_input_to_de
 166+ C234 21 DA C1                             ld      hl,gcCursorChar         ; Now just copy cursor char too
 167+ C237 ED A0                                ldi                             ; Copy cursor to local
 168+ C239 3A 07 98                             ld      a,(InputCursor)
 169+ C23C 3C                                   inc     a
 170+ C23D 47                                   ld      b,a
 171+ C23E 3E 14                                ld      a,20
 172+ C240 90                                   sub     b
 173+ C241 47                                   ld      b,a
 174+ C242 3E 20                                ld      a," "
 175+ C244 12           .SpacePad:              ld      (de),a
 176+ C245 13                                   inc     de
 177+ C246 10 FC                                djnz    .SpacePad
 178+ C248 AF                                   xor     a
 179+ C249 12                                   ld      (de),a
 180+ C24A 11 38 B0                             ld		de,galactic_find_text    ; Display text
 181+ C24D 21 DC C1                             ld      hl,gcInputText
 182+ C250                                      MMUSelectLayer1
 182+ C250 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 183+ C254 CD C8 E0                             call	l1_print_at
 184+ C257 C9                                   ret
 185+ C258
 186+ C258 3A D9 C1     blink_cursor:           ld      a,(gcCursorBlink)
 187+ C25B 3D                                   dec     a
 188+ C25C 32 D9 C1                             ld      (gcCursorBlink),a
 189+ C25F C0                                   ret     nz
 190+ C260 3E 10        .FlashCursor:           ld      a,gcBlinkVal
 191+ C262 32 D9 C1                             ld      (gcCursorBlink),a
 192+ C265 3A DA C1                             ld      a,(gcCursorChar)
 193+ C268 FE 20                                cp      " "
 194+ C26A 28 06                                jr      z,.ChangeToStar
 195+ C26C 3E 20                                ld      a," "
 196+ C26E 32 DA C1                             ld      (gcCursorChar),a
 197+ C271 C9                                   ret
 198+ C272 3E 2A        .ChangeToStar:          ld      a,"*"
 199+ C274 32 DA C1                             ld      (gcCursorChar),a
 200+ C277 C9                                   ret
 201+ C278              ;----------------------------------------------------------------------------------------------------------------------------------
 202+ C278              ; The main loop handles the find key
 203+ C278              loop_gc_menu:           JumpIfMemTrue TextInputMode,AlreadyInInputMode  ;if we are in input mode then go directly there
 203+ C278 3A 3B 9B    >                        ld      a,(TextInputMode)
 203+ C27B A7          >                        and     a
 203+ C27C CA 95 C2    >                        jp      z, AlreadyInInputMode
 204+ C27F 3E 4E        .StartFindCheck:        ld      a,c_Pressed_Find                        ;Is F pressed
 205+ C281 CD A5 97                             call    is_key_pressed
 206+ C284 C0                                   ret     nz                                      ;the main loop handles find key
 207+ C285 CD 1D 98                             call    initInputText                           ;Initialise find input
 208+ C288                                      SetMemTrue TextInputMode                        ;Set input mode to true
 208+ C288 AF          >                        xor     a
 208+ C289 32 3B 9B    >                        ld      (TextInputMode),a
 209+ C28C                                      SetMemToN gcCursorBlink, gcBlinkVal             ; set up blink
 209+ C28C 3E 10       >                        ld      a,gcBlinkVal
 209+ C28E 32 D9 C1    >                        ld      (gcCursorBlink),a
 210+ C291 CD 20 C2     .DisplayInputbar:       call    gc_display_find_text                    ; now prep the boiler plate input text
 211+ C294 C9                                   ret                                             ; and exit so next interation handles new input as we have to rescan keyboard
 212+ C295              ;Already in input mode post pressing find
 213+ C295 CD 35 98     AlreadyInInputMode:     call    InputName                               ; Call input routine to parse a key
 214+ C298                                      JumpIfMemFalse InputChanged, .blinkNoDelay      ; no key they bypass rest of input
 214+ C298 3A 09 98    >                        ld      a,(InputChanged)
 214+ C29B A7          >                        and     a
 214+ C29C C2 A9 C2    >                        jp      nz, .blinkNoDelay
 215+ C29F              .WasItEnter:            JumpIfMemTrue EnterPressed, .FindEnterPressed   ; if enter was pressed then find
 215+ C29F 3A 08 98    >                        ld      a,(EnterPressed)
 215+ C2A2 A7          >                        and     a
 215+ C2A3 CA B5 C2    >                        jp      z, .FindEnterPressed
 216+ C2A6 CD 2E C2                             call    gc_display_find_string                  ; update string
 217+ C2A9 CD 58 C2     .blinkNoDelay:          call    blink_cursor
 218+ C2AC                                      CallIfMemEqNusng    gcCursorBlink, gcBlinkVal, gc_display_find_string ; on blink we get a double update but we can live with that
 218+ C2AC 3A D9 C1    >                        ld   a,(gcCursorBlink)
 218+ C2AF FE 10       >                        cp   gcBlinkVal
 218+ C2B1 CC 2E C2    >                        call    z,gc_display_find_string
 219+ C2B4 C9                                   ret
 220+ C2B5              .FindEnterPressed:      SetMemFalse EnterPressed                        ; reset enter
 220+ C2B5 3E FF       >                        ld      a,$FF
 220+ C2B7 32 08 98    >                        ld      (EnterPressed),a
 221+ C2BA                                      SetMemFalse TextInputMode                       ; leave input mode
 221+ C2BA 3E FF       >                        ld      a,$FF
 221+ C2BC 32 3B 9B    >                        ld      (TextInputMode),a
 222+ C2BF 3A 45 9B                             ld      a,(Galaxy)                              ; Fetch correct galaxy seed bank into memory
 223+ C2C2                                      MMUSelectGalaxyA
 223+ C2C2 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 224+ C2C5 21 E8 97                             ld      hl,InputString
 225+ C2C8 11 5E E8                             ld      de,GalaxySearchString
 226+ C2CB CD D0 F6                             call    GalaxyCopyLoop
 227+ C2CE CD 39 FB                             call    find_system_by_name
 228+ C2D1 FE FF                                cp      $FF                                     ; 0 denotes found FF, failure
 229+ C2D3 28 1D                                jr      z,.FindNoMatch
 230+ C2D5 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 231+ C2D8 4F                                   ld      c,a
 232+ C2D9 3A F9 E8                             ld      a,(GalaxyWorkingSeed+1)
 233+ C2DC 47                                   ld      b,a
 234+ C2DD ED 43 5A 9B                          ld      (TargetSystemX),bc
 235+ C2E1 CD 85 C3                             call    UpdateGalacticCursor
 236+ C2E4 11 08 B0                             ld		de,galactic_find_position               ; Wipe input area on screen
 237+ C2E7 21 73 C0                             ld      hl,galactic_find_match
 238+ C2EA                                      MMUSelectLayer1
 238+ C2EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 239+ C2EE CD C8 E0                             call	l1_print_at
 240+ C2F1 C9                                   ret
 241+ C2F2              .FindNoMatch:           ; if not found display "Not found"
 242+ C2F2                                      ; move curor if found
 243+ C2F2 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 244+ C2F5 21 58 C0                             ld      hl,galactic_find_no_match
 245+ C2F8                                      MMUSelectLayer1
 245+ C2F8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 246+ C2FC CD C8 E0                             call	l1_print_at
 247+ C2FF C9                                   ret; DOSTUFFHERE
 248+ C300              ;----------------------------------------------------------------------------------------------------------------------------------
 249+ C300              galctic_chart_cursors:  ReturnIfMemTrue TextInputMode
 249+ C300 3A 3B 9B    >                        ld      a,(TextInputMode)
 249+ C303 A7          >                        and     a
 249+ C304 C8          >                        ret     z
 250+ C305 3A 3C 9B                             ld      a,(CursorKeysPressed)
 251+ C308 FE 00                                cp      0
 252+ C30A C8                                   ret     z
 253+ C30B 17                                   rla
 254+ C30C DC 24 C3                             call   c,gc_UpPressed
 255+ C30F 17                                   rla
 256+ C310 DC 34 C3                             call   c,gc_DownPressed
 257+ C313 17                                   rla
 258+ C314 DC 44 C3                             call   c,gc_LeftPressed
 259+ C317 17                                   rla
 260+ C318 DC 54 C3                             call   c,gc_RightPressed
 261+ C31B 17                                   rla
 262+ C31C DC 64 C3                             call   c,gc_HomePressed
 263+ C31F 17                                   rla
 264+ C320 DC 6E C3                             call   c,gc_RecenterPressed
 265+ C323 C9                                   ret
 266+ C324              ;----------------------------------------------------------------------------------------------------------------------------------
 267+ C324 3A 5B 9B     gc_UpPressed:           ld     a,(TargetSystemX+1)
 268+ C327                                      JumpIfAEqNusng 1,gc_BoundsLimit
 268+ C327 FE 01       >                        cp     1
 268+ C329 CA 83 C3    >                        jp      z,gc_BoundsLimit
 269+ C32C 3D                                   dec     a
 270+ C32D 32 5B 9B                             ld      (TargetSystemX+1),a
 271+ C330 CD 85 C3                             call    UpdateGalacticCursor
 272+ C333 C9                                   ret
 273+ C334              ;----------------------------------------------------------------------------------------------------------------------------------
 274+ C334 3A 5B 9B     gc_DownPressed:         ld     a,(TargetSystemX+1)
 275+ C337                                      JumpIfAEqNusng 255,gc_BoundsLimit
 275+ C337 FE FF       >                        cp     255
 275+ C339 CA 83 C3    >                        jp      z,gc_BoundsLimit
 276+ C33C 3C                                   inc    a
 277+ C33D 32 5B 9B                             ld      (TargetSystemX+1),a
 278+ C340 CD 85 C3                             call    UpdateGalacticCursor
 279+ C343 C9                                   ret
 280+ C344              ;----------------------------------------------------------------------------------------------------------------------------------
 281+ C344 3A 5A 9B     gc_LeftPressed:         ld     a,(TargetSystemX)
 282+ C347                                      JumpIfAEqNusng 2,gc_BoundsLimit
 282+ C347 FE 02       >                        cp     2
 282+ C349 CA 83 C3    >                        jp      z,gc_BoundsLimit
 283+ C34C 3D                                   dec    a
 284+ C34D 32 5A 9B                             ld      (TargetSystemX),a
 285+ C350 CD 85 C3                             call    UpdateGalacticCursor
 286+ C353 C9                                   ret
 287+ C354              ;----------------------------------------------------------------------------------------------------------------------------------
 288+ C354 3A 5A 9B     gc_RightPressed:        ld     a,(TargetSystemX)
 289+ C357                                      JumpIfAEqNusng 253,gc_BoundsLimit
 289+ C357 FE FD       >                        cp     253
 289+ C359 CA 83 C3    >                        jp      z,gc_BoundsLimit
 290+ C35C 3C                                   inc    a
 291+ C35D 32 5A 9B                             ld      (TargetSystemX),a
 292+ C360 CD 85 C3                             call    UpdateGalacticCursor
 293+ C363 C9                                   ret
 294+ C364              ;----------------------------------------------------------------------------------------------------------------------------------
 295+ C364 2A 58 9B     gc_HomePressed:         ld      hl,(PresentSystemX)
 296+ C367 22 5A 9B                             ld      (TargetSystemX),hl
 297+ C36A CD 85 C3                             call    UpdateGalacticCursor
 298+ C36D C9                                   ret
 299+ C36E              ;----------------------------------------------------------------------------------------------------------------------------------
 300+ C36E 3A 45 9B     gc_RecenterPressed:     ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 301+ C371                                      MMUSelectGalaxyA
 301+ C371 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 302+ C374 ED 4B 5A 9B                          ld      bc,(TargetSystemX)
 303+ C378 CD 70 FB                             call    find_nearest_to_bc
 304+ C37B ED 43 5A 9B                          ld      (TargetSystemX),bc
 305+ C37F CD 85 C3                             call    UpdateGalacticCursor
 306+ C382 C9                                   ret
 307+ C383              ;----------------------------------------------------------------------------------------------------------------------------------
 308+ C383 AF           gc_BoundsLimit          xor     a
 309+ C384 C9                                   ret
 310+ C385
 311+ C385              ;----------------------------------------------------------------------------------------------------------------------------------
 312+ C385 ED 4B 5A 9B  UpdateGalacticCursor:   ld		bc,(TargetSystemX)              ; bc = selected jump
 313+ C389              OnGalacticChart:        MMUSelectSpriteBank
 313+ C389 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 314+ C38D CD A9 E0                             call	sprite_ghc_move
 315+ C390 3A 45 9B                             ld      a,(Galaxy)
 316+ C393                                      MMUSelectGalaxyA
 316+ C393 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 317+ C396 ED 4B 5A 9B                          ld      bc,(TargetSystemX)
 318+ C39A ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 319+ C39E CD 65 FC                             call    galaxy_system_under_cursor
 320+ C3A1 FE 00                                cp      0
 321+ C3A3 C8                                   ret     z
 322+ C3A4              ; just fall into gc_name_if_possible
 323+ C3A4 CD 82 F6     gc_name_if_possible:    call	GetDigramWorkingSeed
 324+ C3A7 CD D2 C3                             call    gc_clear_name_area
 325+ C3AA 21 C1 A7                             ld		hl,name_expanded
 326+ C3AD CD 1C A7                             call	CapitaliseString
 327+ C3B0 21 C1 A7                             ld		hl, name_expanded
 328+ C3B3 01 0A A0                             ld      bc,$A00A
 329+ C3B6 1E FF                                ld		e,$FF
 330+ C3B8                                      MMUSelectLayer2
 330+ C3B8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 331+ C3BC CD F9 E1                             call	l2_print_7at
 332+ C3BF CD EC C3                             call    gc_calc_distance
 333+ C3C2 21 14 C0                             ld      hl,galactic_chart_distance
 334+ C3C5 01 0A A8                             ld      bc,$A80A
 335+ C3C8 1E FF                                ld		e,$FF
 336+ C3CA                                      MMUSelectLayer2
 336+ C3CA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 337+ C3CE CD F9 E1                             call	l2_print_7at
 338+ C3D1 C9                                   ret
 339+ C3D2              ;----------------------------------------------------------------------------------------------------------------------------------
 340+ C3D2 26 08        gc_clear_name_area:     ld      h,8
 341+ C3D4 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 342+ C3D7 01 0A A0                             ld      bc,$A00A
 343+ C3DA E5           .ClearLoop:             push    hl
 344+ C3DB D5                                   push    de
 345+ C3DC C5                                   push    bc
 346+ C3DD                                      MMUSelectLayer2
 346+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 347+ C3E1 CD 8A E2                             call	l2_draw_horz_line
 348+ C3E4 C1                                   pop     bc
 349+ C3E5 D1                                   pop     de
 350+ C3E6 E1                                   pop     hl
 351+ C3E7 04                                   inc     b
 352+ C3E8 25                                   dec     h
 353+ C3E9 20 EF                                jr      nz,.ClearLoop
 354+ C3EB C9                                   ret
 355+ C3EC              ;----------------------------------------------------------------------------------------------------------------------------------
 356+ C3EC 3A 45 9B     gc_calc_distance:       ld      a,(Galaxy)
 357+ C3EF                                      MMUSelectGalaxyA
 357+ C3EF ED 92 57    >                     nextreg GalaxyDataMMU,       a
 358+ C3F2 11 1E C0                             ld      de,galactic_chart_dist_amount
 359+ C3F5 21 30 C0                             ld      hl,galactic_default_dist
 360+ C3F8 ED A0                                ldi
 361+ C3FA ED A0                                ldi
 362+ C3FC ED A0                                ldi
 363+ C3FE ED A0                                ldi
 364+ C400 ED A0                                ldi
 365+ C402 ED 4B 58 9B                          ld      bc,(PresentSystemX)
 366+ C406 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 367+ C40A ED 4B 5A 9B                          ld      bc,(TargetSystemX)
 368+ C40E ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 369+ C412 CD F8 FB                             call    galaxy_find_distance            ; get distance into HL
 370+ C415 DD 2A E1 9A                          ld      ix,(Distance)
 371+ C419 11 00 00                             ld      de,0
 372+ C41C FD 21 36 C0                          ld      iy,galactic_distance
 373+ C420 CD E5 AF                             call    DispDEIXtoIY
 374+ C423 FD E5                                push    iy
 375+ C425 E1                                   pop     hl
 376+ C426 11 36 C0                             ld      de,galactic_distance
 377+ C429 7E                                   ld		a,(hl)				;Push last digit to post decimal
 378+ C42A 32 22 C0                             ld		(galactic_chart_fraction),a
 379+ C42D 2B                                   dec     hl
 380+ C42E CD 09 AE                             call    compare16HLDE
 381+ C431 38 18                                jr      c,.done_number
 382+ C433 7E                                   ld      a,(hl)
 383+ C434 32 20 C0                             ld      (galactic_chart_dist_amount+2),a
 384+ C437 2B                                   dec     hl
 385+ C438 CD 09 AE                             call    compare16HLDE
 386+ C43B 38 0E                                jr      c,.done_number
 387+ C43D 7E                                   ld      a,(hl)
 388+ C43E 32 1F C0                             ld      (galactic_chart_dist_amount+1),a
 389+ C441 2B                                   dec     hl
 390+ C442 CD 09 AE                             call    compare16HLDE
 391+ C445 38 04                                jr      c,.done_number
 392+ C447 7E                                   ld      a,(hl)
 393+ C448 32 1E C0                             ld      (galactic_chart_dist_amount),a
 394+ C44B C9           .done_number:           ret
 395+ C44C              ;----------------------------------------------------------------------------------------------------------------------------------
 396+ C44C AF           gc_present_system:      xor     a
 397+ C44D 32 55 9A                             ld		(XSAV),a
 398+ C450 DD 21 16 E0                          ld      ix,galaxy_data
 399+ C454 3A 45 9B     GCCounterLoop:          ld      a,(Galaxy)
 400+ C457                                      MMUSelectGalaxyA
 400+ C457 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 401+ C45A 2A 58 9B                             ld      hl,(PresentSystemX)
 402+ C45D DD E5                                push    ix
 403+ C45F 7D                                   ld      a,l
 404+ C460 DD BE 03                             cp      (ix+3)                          ; seed x
 405+ C463 20 14                                jr      nz,.ItsNotThisX
 406+ C465 7C                                   ld      a,h
 407+ C466 DD BE 01                             cp      (ix+1)                          ; seed x
 408+ C469 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
 409+ C46B DD E5                                push    ix
 410+ C46D E1                                   pop     hl
 411+ C46E 11 4C 9B                             ld      de,PresentSystemSeeds
 412+ C471 CD 96 9F                             call    copy_seed
 413+ C474 3E FF                                ld      a,$FF
 414+ C476 DD E1                                pop     ix
 415+ C478 C9                                   ret
 416+ C479 E1           .ItsNotThisX:           pop     hl
 417+ C47A ED 34 08 00                          add     hl,8
 418+ C47E E5                                   push    hl
 419+ C47F DD E1                                pop     ix
 420+ C481 3A 55 9A                             ld		a,(XSAV)
 421+ C484 3D                                   dec		a
 422+ C485 32 55 9A                             ld      (XSAV),a
 423+ C488 FE 00                                cp		0
 424+ C48A C8                                   ret		z
 425+ C48B 18 C7                                jr		GCCounterLoop
 426+ C48D
# file closed: ./Menus//galactic_chart_menu.asm
1244  C48D              ; Bank 52
1245  C48D
1246  C48D                  SLOT    MenuInventAddr
1247  C48D                  PAGE    BankMenuInvent
1248  C48D              	ORG     MenuInventAddr
1249  C000                  INCLUDE "./Menus/inventory_menu.asm"
# file opened: ./Menus/inventory_menu.asm
   1+ C000 49 6E 76 65  ivnentory_page_marker   DB "Inventory   PG52"
   1+ C004 6E 74 6F 72
   1+ C008 79 20 20 20
   1+ C00C 50 47 35 32
   2+ C010 48 02 1C C0  inventory_boiler_text	DW $0248,INM_inventory
   3+ C014 08 0B 26 C0  						DW $0B08,INM_fuel
   4+ C018 08 13 2C C0  						DW $1308,INM_cash
   5+ C01C
   6+ C01C 49 4E 56 45  INM_inventory 			DB "INVENTORY",0
   6+ C020 4E 54 4F 52
   6+ C024 59 00
   7+ C026 46 75 65 6C  INM_fuel				DB "Fuel:",0
   7+ C02A 3A 00
   8+ C02C 43 61 73 68  INM_cash				DB "Cash:",0
   8+ C030 3A 00
   9+ C032
  10+ C032 30 30 30 30  txt_inventory_amount	DB "00000",0
  10+ C036 30 00
  11+ C038 00 00        inventory_cursor		DW $0000
  12+ C03A              inv_fuel_position		equ	$0B30
  13+ C03A              inv_cash_position		equ	$1330
  14+ C03A
  15+ C03A              inventory_position		equ $2008
  16+ C03A              inventory_amount		equ $80
  17+ C03A              inventory_uom			equ	$B0
  18+ C03A 00           inv_selected_row        DB 0
  19+ C03B
  20+ C03B 00 00 00...  INM_cash_amount			DS 10
  21+ C045 20 43 72 00  INM_cash_UoM            DB " Cr",0
  22+ C049
  23+ C049 26 00        INM_DispAtoDE:          ld h,0
  24+ C04B 6F                                   ld l,a
  25+ C04C 01 F0 D8                             ld	bc,-10000
  26+ C04F CD 65 C0                             call	.Num1
  27+ C052 01 18 FC                             ld	bc,-1000
  28+ C055 CD 65 C0                             call	.Num1
  29+ C058 01 9C FF                             ld	bc,-100
  30+ C05B CD 65 C0                             call	.Num1
  31+ C05E 0E F6                                ld	c,-10
  32+ C060 CD 65 C0                             call	.Num1
  33+ C063 0E FF                                ld	c,-1
  34+ C065 3E 2F        .Num1:	                ld	a,'0'-1
  35+ C067 3C           .Num2:	                inc	a
  36+ C068 09                                   add	hl,bc
  37+ C069 38 FC                                jr	c,.Num2
  38+ C06B ED 42                                sbc	hl,bc
  39+ C06D 12                                   ld	(de),a
  40+ C06E 13                                   inc	de
  41+ C06F C9                                   ret
  42+ C070
  43+ C070              INM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C070
   2++C070              ;">print_boilder_text hl = text structure, b = message count"
   3++C070              .BoilerTextLoop:
   4++C070 C5           	push		bc			; Save Message Count loop value
   5++C071 4E           	ld			c,(hl)		; Get Row into b
   6++C072 23           	inc			hl
   7++C073 46           	ld			b,(hl)		; Get Col into b
   8++C074 23           	inc			hl
   9++C075 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C076 23           	inc			hl
  11++C077 56           	ld			d,(hl)		; Get text address Hi into E
  12++C078 23           	inc			hl
  13++C079 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C07A EB           	ex			de,hl		; now hl = address of text data
  15++C07B 1E FF        	ld			e,txt_status_colour
  16++C07D C5           	push		bc
  17++C07E D1           	pop			de
  18++C07F                  MMUSelectLayer1
  18++C07F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C083 CD C8 E0     	call		l1_print_at
  20++C086 E1           	pop			hl
  21++C087 C1           	pop			bc
  22++C088 10 E6        	djnz		.BoilerTextLoop
  23++C08A C9           	ret
  24++C08B
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  44+ C08B
  45+ C08B DD 22 2F C1  INM_DispDEIXtoIY:       ld (.inmclcn32z),ix
  46+ C08F ED 53 31 C1                          ld (.inmclcn32zIX),de
  47+ C093 DD 21 2B C1                          ld ix,.inmclcn32t+36
  48+ C097 06 09                                ld b,9
  49+ C099 0E 00                                ld c,0
  50+ C09B 3E 30        .inmclcn321:            ld a,'0'
  51+ C09D B7                                   or a
  52+ C09E DD 5E 00     .inmclcn322:            ld e,(ix+0)
  53+ C0A1 DD 56 01                             ld d,(ix+1)
  54+ C0A4 2A 2F C1                             ld hl,(.inmclcn32z)
  55+ C0A7 ED 52                                sbc hl,de
  56+ C0A9 22 2F C1                             ld (.inmclcn32z),hl
  57+ C0AC DD 5E 02                             ld e,(ix+2)
  58+ C0AF DD 56 03                             ld d,(ix+3)
  59+ C0B2 2A 31 C1                             ld hl,(.inmclcn32zIX)
  60+ C0B5 ED 52                                sbc hl,de
  61+ C0B7 22 31 C1                             ld (.inmclcn32zIX),hl
  62+ C0BA 38 04                                jr c,.inmclcn325
  63+ C0BC 0C                                   inc c
  64+ C0BD 3C                                   inc a
  65+ C0BE 18 DE                                jr .inmclcn322
  66+ C0C0 DD 5E 00     .inmclcn325:            ld e,(ix+0)
  67+ C0C3 DD 56 01                             ld d,(ix+1)
  68+ C0C6 2A 2F C1                             ld hl,(.inmclcn32z)
  69+ C0C9 19                                   add hl,de
  70+ C0CA 22 2F C1                             ld (.inmclcn32z),hl
  71+ C0CD DD 5E 02                             ld e,(ix+2)
  72+ C0D0 DD 56 03                             ld d,(ix+3)
  73+ C0D3 2A 31 C1                             ld hl,(.inmclcn32zIX)
  74+ C0D6 ED 5A                                adc hl,de
  75+ C0D8 22 31 C1                             ld (.inmclcn32zIX),hl
  76+ C0DB 11 FC FF                             ld de,-4
  77+ C0DE DD 19                                add ix,de
  78+ C0E0 0C                                   inc c
  79+ C0E1 0D                                   dec c
  80+ C0E2 28 05                                jr z,.inmclcn323
  81+ C0E4 FD 77 00                             ld (iy+0),a
  82+ C0E7 FD 23                                inc iy
  83+ C0E9 10 B0        .inmclcn323:            djnz .inmclcn321
  84+ C0EB 3A 2F C1                             ld a,(.inmclcn32z)
  85+ C0EE C6 30                                add A,'0'
  86+ C0F0 FD 77 00                             ld (iy+0),a
  87+ C0F3 FD 36 02 00                          ld (iy+2),0
  88+ C0F7 FD 7E 00                             ld      a,(IY+0)
  89+ C0FA FD 77 01                             ld      (IY+1),a
  90+ C0FD 3E 2E                                ld      a,"."
  91+ C0FF FD 77 00                             ld      (IY+0),a
  92+ C102 FD 23                                inc     IY
  93+ C104 FD 23                                inc     IY
  94+ C106 C9                                   ret
  95+ C107 01 00 00 00  .inmclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  95+ C10B 0A 00 00 00
  95+ C10F 64 00 00 00
  95+ C113 E8 03 00 00
  95+ C117 10 27 00 00
  96+ C11B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
  96+ C11F 40 42 0F 00
  96+ C123 80 96 98 00
  96+ C127 00 E1 F5 05
  96+ C12B 00 CA 9A 3B
  97+ C12F 00 00        .inmclcn32z             ds 2
  98+ C131 00 00        .inmclcn32zIX           ds 2
  99+ C133
 100+ C133              INM_GetFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++C133
   2++C133
   3++C133 3A 2A 9F     	ld		a,(Fuel)
   4++C136 11 D7 B7     	ld		de,txt_fuel_level
   5++C139 0E 9C        	ld	c, -100
   6++C13B CD 45 C1     	call	.Num1
   7++C13E 0E F6        	ld	c,-10
   8++C140 CD 45 C1     	call	.Num1
   9++C143 0E FF        	ld	c,-1
  10++C145              .Num1:
  11++C145 06 2F        	ld	b,'0'-1
  12++C147              .Num2:
  13++C147 04           	inc		b
  14++C148 81           	add		a,c
  15++C149 38 FC        	jr		c,.Num2
  16++C14B 91           	sub 	c
  17++C14C C5           	push	bc
  18++C14D F5           	push	af
  19++C14E 79           	ld		a,c
  20++C14F FE FF        	cp		-1
  21++C151 CC 5A C1     	call	z,.InsertDot
  22++C154 78           	ld		a,b
  23++C155 12           	ld		(de),a
  24++C156 13           	inc		de
  25++C157 F1           	pop		af
  26++C158 C1           	pop		bc
  27++C159 C9           	ret
  28++C15A              .InsertDot:
  29++C15A 3E 2E        	ld		a,'.'
  30++C15C 12           	ld		(de),a
  31++C15D 13           	inc		de
  32++C15E C9           	ret
  33++C15F
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 101+ C15F
 102+ C15F              ; "A = stock item number"
 103+ C15F              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C15F 47           PrintInvItem:           ld		b,a
 105+ C160 21 2D 9F                             ld		hl,CargoTonnes
 106+ C163 ED 31                                add		hl,a
 107+ C165 7E                                   ld		a,(hl)
 108+ C166 4F                                   ld		c,a
 109+ C167 FE 00                                cp		0
 110+ C169 C8                                   ret		z
 111+ C16A 78                                   ld		a,b
 112+ C16B C5                                   push	bc						; push item nbr + quantity
 113+ C16C                                      MMUSelectStockTable
 113+ C16C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 114+ C170 21 88 E0                             ld		hl, StockItemTable
 115+ C173 CD 74 A2                             call	getTableText
 116+ C176 7E           .ItemItemName           ld		a,(hl)
 117+ C177 21 9F A5                             ld		hl, WordIdx
 118+ C17A CD 74 A2                             call	getTableText
 119+ C17D ED 5B 38 C0                          ld		de,(inventory_cursor)
 120+ C181                                      MMUSelectLayer1
 120+ C181 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 121+ C185 CD C8 E0                             call	l1_print_at
 122+ C188 C1           .ItemAmount:            pop		bc						; b = item number, c = quantity
 123+ C189 C5                                   push	bc
 124+ C18A 79                                   ld		a,c
 125+ C18B 11 32 C0                             ld		de,txt_inventory_amount
 126+ C18E CD 49 C0                             call	INM_DispAtoDE
 127+ C191 21 32 C0                             ld		hl,txt_inventory_amount
 128+ C194 E5                                   push	hl
 129+ C195 7E           .ZeroLoop:              ld		a,(hl)
 130+ C196 FE 30                                cp		'0'
 131+ C198 20 05                                jr		nz,.NotZero
 132+ C19A 36 20        .ZeroDigit:             ld		(hl),' '
 133+ C19C 23                                   inc		hl
 134+ C19D 18 F6                                jr		.ZeroLoop
 135+ C19F ED 5B 38 C0  .NotZero:               ld		de,(inventory_cursor)
 136+ C1A3 E1                                   pop		hl
 137+ C1A4 1E 80                                ld		e,inventory_amount
 138+ C1A6                                      MMUSelectLayer1
 138+ C1A6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 139+ C1AA CD C8 E0                             call	l1_print_at
 140+ C1AD              .ItemMeasure:	        MMUSelectStockTable
 140+ C1AD ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 141+ C1B1 21 88 E0                             ld		hl, StockItemTable
 142+ C1B4 C1                                   pop		bc
 143+ C1B5 78                                   ld		a,b
 144+ C1B6 CD 74 A2                             call	getTableText
 145+ C1B9 ED 34 07 00                          add		hl,7
 146+ C1BD 7E                                   ld		a,(hl)
 147+ C1BE 21 9F A5                             ld		hl,WordIdx
 148+ C1C1 CD 74 A2                             call	getTableText
 149+ C1C4 ED 5B 38 C0                          ld		de,(inventory_cursor)
 150+ C1C8 1E B0                                ld		e,inventory_uom
 151+ C1CA                                      MMUSelectLayer1
 151+ C1CA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C1CE CD C8 E0                             call	l1_print_at
 153+ C1D1 3A 39 C0                             ld 		a,(inventory_cursor+1)
 154+ C1D4 C6 08                                add		a,8
 155+ C1D6 32 39 C0                             ld 		(inventory_cursor+1),a
 156+ C1D9 C9                                   ret
 157+ C1DA              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ C1DA 2A 28 9F     INM_GetCash:            ld		hl,(Cash+2)
 159+ C1DD EB                                   ex      de,hl
 160+ C1DE DD 2A 26 9F                          ld      ix,(Cash)
 161+ C1E2 FD 21 3B C0                          ld		iy,INM_cash_amount
 162+ C1E6 CD 8B C0                             call 	INM_DispDEIXtoIY
 163+ C1E9 FD E5                                push    IY
 164+ C1EB D1                                   pop     de
 165+ C1EC 21 45 C0                             ld      hl,INM_cash_UoM
 166+ C1EF 01 04 00                             ld      bc,4
 167+ C1F2 ED B0                                ldir
 168+ C1F4 C9                                   ret
 169+ C1F5              ;----------------------------------------------------------------------------------------------------------------------------------
 170+ C1F5              draw_inventory_menu:    InitNoDoubleBuffer
 170+ C1F5             >                            MMUSelectLayer1
 170+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 170+ C1F9 CD 80 E0    >                            call	l1_cls
 170+ C1FC 3E 07       >                            ld		a,7
 170+ C1FE CD 9B E0    >                            call	l1_attr_cls_to_a
 170+ C201             >                            MMUSelectLayer2
 170+ C201 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 170+ C205 CD 09 E0    >                            call    asm_l2_double_buffer_off
 170+ C208 CD F3 E0    >                            call	l2_cls	; Get some space
 170+ C20B             >                            MMUSelectSpriteBank
 170+ C20B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 170+ C20F CD 27 E4    >                            call    sprite_cls_cursors
 171+ C212 3E 08                                ld      a,$08
 172+ C214 32 5B 9A                             ld      (MenuIdMax),a
 173+ C217                                      MMUSelectSpriteBank
 173+ C217 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 174+ C21B CD 27 E4                             call        sprite_cls_cursors
 175+ C21E 01 01 01     .Drawbox:               ld		bc,$0101
 176+ C221 11 FD BE                             ld		de,$BEFD
 177+ C224 3E C0                                ld		a,$C0
 178+ C226                                      MMUSelectLayer2
 178+ C226 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 179+ C22A CD 20 E2                             call	l2_draw_box
 180+ C22D 01 01 0A                             ld		bc,$0A01
 181+ C230 11 C0 FE                             ld		de,$FEC0
 182+ C233 CD 8A E2                             call	l2_draw_horz_line
 183+ C236 06 03        .StaticText:	        ld		b,3
 184+ C238 21 10 C0                             ld		hl,inventory_boiler_text
 185+ C23B CD 70 C0                             call	INM_print_boiler_text
 186+ C23E CD 33 C1     .DisplayFuel:           call	INM_GetFuelLevel
 187+ C241 21 D7 B7                             ld		hl, txt_fuel_level
 188+ C244 7E                                   ld		a,(hl)
 189+ C245 FE 30                                cp		'0'
 190+ C247 20 01                                jr		nz,.PrintFuel
 191+ C249 23           .SkipLeadingZero:	    inc		hl
 192+ C24A 1E FF        .PrintFuel:             ld		e,txt_status_colour
 193+ C24C 01 30 0B                             ld		bc,inv_fuel_position
 194+ C24F                                      MMUSelectLayer2
 194+ C24F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ C253 CD 99 E1                             call	l2_print_at
 196+ C256 CD DA C1     .DisplayCash:           call	INM_GetCash
 197+ C259 21 3B C0                             ld		hl,INM_cash_amount
 198+ C25C 1E FF                                ld		e,txt_status_colour
 199+ C25E 01 30 13                             ld		bc,inv_cash_position
 200+ C261                                      MMUSelectLayer2
 200+ C261 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 201+ C265 CD 99 E1                             call	l2_print_at						; now we have the correct integer
 202+ C268 01 30 13                             ld		bc,inv_cash_position
 203+ C26B 21 3B C0                             ld		hl,INM_cash_amount
 204+ C26E 3E 00        .DisplayInventory:      ld		a,0
 205+ C270 21 08 20                             ld		hl,inventory_position
 206+ C273 22 38 C0                             ld		(inventory_cursor),hl
 207+ C276 F5           .InvLoop:	            push	af
 208+ C277 CD 5F C1                             call	PrintInvItem
 209+ C27A F1                                   pop		af
 210+ C27B 3C                                   inc		a
 211+ C27C FE 11                                cp		17
 212+ C27E 38 F6                                jr		c,.InvLoop
 213+ C280 C9                                   ret
 214+ C281
# file closed: ./Menus/inventory_menu.asm
1250  C281
1251  C281              ; Bank 53
1252  C281
1253  C281                  SLOT    MenuSystemAddr
1254  C281                  PAGE    BankMenuSystem
1255  C281              	ORG     MenuSystemAddr
1256  C000                  INCLUDE "./Menus/system_data_menu.asm"
# file opened: ./Menus/system_data_menu.asm
   1+ C000 53 79 73 74  system_data_page_marker DB "System      PG53"
   1+ C004 65 6D 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 35 33
   2+ C010
   3+ C010 40 02 FB A6  plant_boiler_text		DW $0240,TextBuffer
   4+ C014 80 02 C1 A7  						DW $0280,name_expanded
   5+ C018 08 0B 2B A4  						DW $0B08,WordDistance
   6+ C01C 08 13 34 A4  						DW $1308,WordEconomy
   7+ C020 08 1B 3C A4  						DW $1B08,WordGovernment
   8+ C024 08 23 47 A4  						DW $2308,WordTechLevel
   9+ C028 08 2B 51 A4  						DW $2B08,WordPopulation
  10+ C02C 08 3B 6C A4  						DW $3B08,WordGross
  11+ C030 38 3B 72 A4  						DW $3B38,WordProductivity
  12+ C034 08 43 7F A4  						DW $4308,WordAverage
  13+ C038 48 43 87 A4  						DW $4348,WordRadius
  14+ C03C 60 0B FB A6  planet_zero_dist		DW $0B60,TextBuffer
  15+ C040 60 13 FB A6  planet_economy_disp		DW $1360,TextBuffer
  16+ C044 0A 00        techlevel_value			DB 10,0
  17+ C046 00 00 00...  distance_value          DS 20,0
  18+ C05A 20 4C 69 67  distance_uom            DB " Light Years",0
  18+ C05E 68 74 20 59
  18+ C062 65 61 72 73
  18+ C066 00
  19+ C067 00 00 00...  radius_value            DS 20
  20+ C07B 00                                   DB 0
  21+ C07C 20 6B 6D 00  radius_uom              DB " km",0
  22+ C080 00 00 00...  population_value        DS 20
  23+ C094 00                                   DB 0
  24+ C095 20 42 69 6C  population_uom          DB " Billion",0
  24+ C099 6C 69 6F 6E
  24+ C09D 00
  25+ C09E 00 00 00...  productivity_value      DS 20
  26+ C0B2 00                                   DB 0
  27+ C0B3 20 4D 20 43  productivity_uom        DB " M CR",0
  27+ C0B7 52 00
  28+ C0B9
  29+ C0B9              GovernmentIndexOffset	EQU 75
  30+ C0B9              DistanceScreenPos       EQU $0B60
  31+ C0B9              GovernmentScreenPos		EQU $1B60
  32+ C0B9              TechLevelScreenPos		EQU $2360
  33+ C0B9              SpeciesScreenPos        EQU $3308
  34+ C0B9
  35+ C0B9 00           system_present_or_target DB 0
  36+ C0BA 00 00        saved_present			 DW 0
  37+ C0BC
  38+ C0BC
  39+ C0BC 00 00 00...  SD_present_name         DS  30
  40+ C0DA 00                                   DB  0
  41+ C0DB 00 00 00...  SD_target_name          DS  30
  42+ C0F9 00                                   DB  0
  43+ C0FA 00 00 00...  SD_species              DS 30
  44+ C118 00                                   DB 0
  45+ C119 00 00 00...  SD_planet_description   DS 300,0
  46+ C245
  47+ C245 00           SDDisplayGovernment     DB 0
  48+ C246 00           SDDisplayEconomy        DB 0
  49+ C247 00           SDDisplayTekLevel       DB 0
  50+ C248 00           SDDisplayPopulation     DB 0
  51+ C249 00 00        SDDisplayProductivity   DW 0
  52+ C24B 00 00        SDDisplayRadius         DW 0
  53+ C24D              SDDataLength            EQU $ - SDDisplayEconomy
  54+ C24D
  55+ C24D 21 0A E9     SD_copy_system_data:    ld      hl,GalaxyDisplayGovernment
  56+ C250 11 45 C2                             ld      de,SDDisplayGovernment
  57+ C253 01 07 00                             ld      bc,SDDataLength
  58+ C256 ED B0                                ldir
  59+ C258 21 47 C2     .DisplayTechPlus1:      ld     hl,SDDisplayTekLevel
  60+ C25B 34                                   inc    (hl)
  61+ C25C C9                                   ret
  62+ C25D
  63+ C25D 21 7F E8     SD_copy_to_name:        ld      hl,GalaxyExpandedName
  64+ C260 01 1E 00                             ld      bc,30
  65+ C263 ED B0                                ldir
  66+ C265 C9                                   ret
  67+ C266
  68+ C266 21 64 F1     SD_copy_species:        ld      hl,GalaxySpecies
  69+ C269 11 FA C0                             ld      de,SD_species
  70+ C26C 01 1E 00                             ld      bc,30
  71+ C26F ED B0                                ldir
  72+ C271 C9                                   ret
  73+ C272
  74+ C272 21 85 F1     SD_copy_description:    ld      hl,GalaxyPlanetDescription
  75+ C275 11 19 C1                             ld      de,SD_planet_description
  76+ C278 7E           SDCopyLoop:             ld      a,(hl)
  77+ C279 FE 00                                cp      0
  78+ C27B 28 05                                jr      z,.SD_Copy_Done
  79+ C27D ED A0                                ldi
  80+ C27F C3 78 C2                             jp      SDCopyLoop
  81+ C282 12           .SD_Copy_Done:          ld      (de),a
  82+ C283 C9                                   ret
  83+ C284
  84+ C284 26 00        SDM_DispAtoDE:          ld h,0
  85+ C286 6F                                   ld l,a
  86+ C287 01 F0 D8                             ld	bc,-10000
  87+ C28A CD A0 C2                             call	.Num1
  88+ C28D 01 18 FC                             ld	bc,-1000
  89+ C290 CD A0 C2                             call	.Num1
  90+ C293 01 9C FF                             ld	bc,-100
  91+ C296 CD A0 C2                             call	.Num1
  92+ C299 0E F6                                ld	c,-10
  93+ C29B CD A0 C2                             call	.Num1
  94+ C29E 0E FF                                ld	c,-1
  95+ C2A0 3E 2F        .Num1:	                ld	a,'0'-1
  96+ C2A2 3C           .Num2:	                inc	a
  97+ C2A3 09                                   add	hl,bc
  98+ C2A4 38 FC                                jr	c,.Num2
  99+ C2A6 ED 42                                sbc	hl,bc
 100+ C2A8 12                                   ld	(de),a
 101+ C2A9 13                                   inc	de
 102+ C2AA C9                                   ret
 103+ C2AB
 104+ C2AB
 105+ C2AB 3A 45 9B     sdm_calc_distance:      ld      a,(Galaxy)
 106+ C2AE                                      MMUSelectGalaxyA
 106+ C2AE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 107+ C2B1 ED 4B 58 9B                          ld      bc,(PresentSystemX)
 108+ C2B5 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 109+ C2B9 ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 110+ C2BD ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 111+ C2C1 CD F8 FB                             call    galaxy_find_distance            ; get distance into HL
 112+ C2C4 C9           .done_number:           ret
 113+ C2C5
 114+ C2C5
 115+ C2C5              SDM_print_boiler_text:
 116+ C2C5                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C2C5
   2++C2C5              ;">print_boilder_text hl = text structure, b = message count"
   3++C2C5              .BoilerTextLoop:
   4++C2C5 C5           	push		bc			; Save Message Count loop value
   5++C2C6 4E           	ld			c,(hl)		; Get Row into b
   6++C2C7 23           	inc			hl
   7++C2C8 46           	ld			b,(hl)		; Get Col into b
   8++C2C9 23           	inc			hl
   9++C2CA 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C2CB 23           	inc			hl
  11++C2CC 56           	ld			d,(hl)		; Get text address Hi into E
  12++C2CD 23           	inc			hl
  13++C2CE E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C2CF EB           	ex			de,hl		; now hl = address of text data
  15++C2D0 1E FF        	ld			e,txt_status_colour
  16++C2D2 C5           	push		bc
  17++C2D3 D1           	pop			de
  18++C2D4                  MMUSelectLayer1
  18++C2D4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C2D8 CD C8 E0     	call		l1_print_at
  20++C2DB E1           	pop			hl
  21++C2DC C1           	pop			bc
  22++C2DD 10 E6        	djnz		.BoilerTextLoop
  23++C2DF C9           	ret
  24++C2E0
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 117+ C2E0
 118+ C2E0 7E           PlanetLeftJustifyLoop:  ld      a,(hl)
 119+ C2E1 FE 30                                cp      "0"
 120+ C2E3 C0                                   ret      nz
 121+ C2E4 23                                   inc     hl
 122+ C2E5 10 F9                                djnz    PlanetLeftJustifyLoop
 123+ C2E7 C9                                   ret
 124+ C2E8
 125+ C2E8 00 00        SD_working_cursor       DW   0
 126+ C2EA
 127+ C2EA 00 00 00...  sd_copy_of_seed         DS 6
 128+ C2F0
 129+ C2F0              draw_system_data_menu:  InitNoDoubleBuffer
 129+ C2F0             >                            MMUSelectLayer1
 129+ C2F0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 129+ C2F4 CD 80 E0    >                            call	l1_cls
 129+ C2F7 3E 07       >                            ld		a,7
 129+ C2F9 CD 9B E0    >                            call	l1_attr_cls_to_a
 129+ C2FC             >                            MMUSelectLayer2
 129+ C2FC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 129+ C300 CD 09 E0    >                            call    asm_l2_double_buffer_off
 129+ C303 CD F3 E0    >                            call	l2_cls	; Get some space
 129+ C306             >                            MMUSelectSpriteBank
 129+ C306 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 129+ C30A CD 27 E4    >                            call    sprite_cls_cursors
 130+ C30D                                      ZeroA
 130+ C30D AF          >                        xor a
 131+ C30E 32 B9 C0                             ld      (system_present_or_target),a
 132+ C311 3E 08                                ld		a,8
 133+ C313 32 5B 9A                             ld		(MenuIdMax),a
 134+ C316 3A 45 9B     .SelectGalaxy:          ld      a,(Galaxy)
 135+ C319                                      MMUSelectGalaxyA
 135+ C319 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 136+ C31C ED 4B 5A 9B  .CheckCursorOrHome:     ld      bc,(TargetSystemX)              ; Find out if we have to work on hyperspace or normal cursor
 137+ C320 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 138+ C324 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 139+ C328 CD 65 FC                             call    galaxy_system_under_cursor
 140+ C32B FE FF        .IsCursorOnSystem:      cp      $FF                               ; if a = 0 then failed
 141+ C32D 28 0F                                jr      z,.FoundASystem
 142+ C32F ED 4B 58 9B  .UsePresentSystem:      ld      bc,(PresentSystemX)
 143+ C333 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 144+ C337 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 145+ C33B CD 65 FC                             call    galaxy_system_under_cursor
 146+ C33E ED 4B 5A 9B  .FoundASystem:          ld      bc,(TargetSystemX)
 147+ C342 2A 58 9B                             ld      hl,(PresentSystemX)
 148+ C345 78                                   ld      a,b
 149+ C346 BC                                   cp      h
 150+ C347 20 04                                jr      nz,.DiffCoord
 151+ C349 79                                   ld      a,c
 152+ C34A BD                                   cp      l
 153+ C34B 28 05                                jr      z,.SameCoord
 154+ C34D 3E FF        .DiffCoord:             ld      a,$FF
 155+ C34F 32 B9 C0                             ld      (system_present_or_target),a
 156+ C352 21 46 9B     .SameCoord:             ld      hl,WorkingSeeds            ; found a system so save it
 157+ C355 11 EA C2                             ld      de,sd_copy_of_seed
 158+ C358 CD 02 FA                             call    galaxy_copy_seed
 159+ C35B CD C5 FA     .GetSystemName:         call    GalaxyDigramWorkings       ; we have galaxy working seed populated now
 160+ C35E 01 01 01     .Drawbox:               ld		bc,$0101
 161+ C361 11 FD BE                             ld		de,$BEFD
 162+ C364 3E C0                                ld		a,$C0
 163+ C366                                      MMUSelectLayer2
 163+ C366 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 164+ C36A CD 20 E2                             call	l2_draw_box
 165+ C36D 01 01 0A                             ld		bc,$0A01
 166+ C370 11 C0 FE                             ld		de,$FEC0
 167+ C373 CD 8A E2                             call	l2_draw_horz_line
 168+ C376 3E 0E        .ExpandStatic:          ld		a,14
 169+ C378 CD 3C A7                             call	expandTokenToString
 170+ C37B 3A 45 9B     .TargetSystem:          ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 171+ C37E                                      MMUSelectGalaxyA
 171+ C37E ED 92 57    >                     nextreg GalaxyDataMMU,       a
 172+ C381 ED 4B E8 C2                          ld      bc, (SD_working_cursor)
 173+ C385               ;   call    galaxy_name_at_bc
 174+ C385                ;  cp      $FF               ; if we didn't get a
 175+ C385 21 EA C2                             ld      hl,sd_copy_of_seed
 176+ C388 11 F8 E8                             ld      de,GalaxyWorkingSeed
 177+ C38B CD 02 FA                             call    galaxy_copy_seed
 178+ C38E CD 6D F9                             call    galaxy_planet_data                              ; Geneate galaxy data from working seed
 179+ C391 CD 4D C2                             call    SD_copy_system_data
 180+ C394 11 C1 A7                             ld      de,name_expanded
 181+ C397 CD 5D C2                             call    SD_copy_to_name
 181+ C39A
 182+ C39A 11 98 13                             ld      de,hyperspace_position
 183+ C39D 21 C1 A7                             ld      hl,name_expanded
 184+ C3A0 06 0B        .StaticText:	        ld		b,11
 185+ C3A2 21 10 C0                             ld		hl,plant_boiler_text
 186+ C3A5 CD C5 C2                             call	SDM_print_boiler_text
 187+ C3A8 3A B9 C0     .CalcDistance:          ld		a,(system_present_or_target)
 188+ C3AB FE 00                                cp		0
 189+ C3AD 28 2B                                jr		z,.ZeroDistance
 190+ C3AF CD AB C2     .NotZero:               call    sdm_calc_distance
 191+ C3B2 DD 2A E1 9A  .DisplayDistance:       ld      ix,(Distance)
 192+ C3B6 11 00 00                             ld      de,0
 193+ C3B9 FD 21 46 C0                          ld      iy,distance_value
 194+ C3BD CD D6 AF                             call    DispDEIXtoIY1DP
 195+ C3C0 FD E5        .AddDistUo              push    iy
 196+ C3C2 E1                                   pop     hl
 197+ C3C3 23                                   inc     hl
 198+ C3C4 11 5A C0                             ld      de,distance_uom
 199+ C3C7 CD F0 C4                             call    SDTackOnUOMtoHL
 200+ C3CA 11 60 0B                             ld      de,DistanceScreenPos
 201+ C3CD 21 46 C0                             ld      hl,distance_value
 202+ C3D0                                      MMUSelectLayer1
 202+ C3D0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 203+ C3D4 CD C8 E0                             call	l1_print_at
 204+ C3D7 C3 E7 C3                             jp      .DisplayEconomy
 205+ C3DA 3E 18        .ZeroDistance:          ld		a,24						; print literal zero dist
 206+ C3DC CD 3C A7                             call	expandTokenToString
 207+ C3DF 06 01                                ld		b,1
 208+ C3E1 21 3C C0                             ld		hl,planet_zero_dist
 209+ C3E4 CD C5 C2                             call	SDM_print_boiler_text
 210+ C3E7 3A 46 C2     .DisplayEconomy:        ld		a,(SDDisplayEconomy)
 211+ C3EA C6 0F                                add     a,TextEconomyOffset
 212+ C3EC CD 3C A7                             call	expandTokenToString
 213+ C3EF 06 01                                ld		b,1
 214+ C3F1 21 40 C0                             ld		hl,planet_economy_disp
 215+ C3F4 CD C5 C2                             call	SDM_print_boiler_text
 216+ C3F7 3A 45 C2     .DisplayGovernment:     ld		a,(SDDisplayGovernment)
 217+ C3FA C6 4B                                add		a,TextGovOffset
 218+ C3FC CD 2E A7                             call	WordIndexToAddress
 219+ C3FF 11 60 1B                             ld		de,GovernmentScreenPos
 220+ C402                                      MMUSelectLayer1
 220+ C402 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 221+ C406 CD C8 E0                             call	l1_print_at
 222+ C409 3A 47 C2     .DisplayTechLevel:      ld		a,(SDDisplayTekLevel)
 223+ C40C 11 44 C0                             ld		de,techlevel_value
 224+ C40F CD 84 C2                             call    SDM_DispAtoDE
 225+ C412 AF                                   xor     a
 226+ C413 12                                   ld      (de),a
 227+ C414 21 44 C0                             ld      hl,techlevel_value
 228+ C417 06 05                                ld      b,5
 229+ C419 CD E0 C2                             call    PlanetLeftJustifyLoop
 230+ C41C 11 60 23                             ld		de,TechLevelScreenPos
 231+ C41F                                      MMUSelectLayer1
 231+ C41F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 232+ C423 CD C8 E0                             call	l1_print_at
 233+ C426 3A 48 C2     .DisplayPopulation:     ld      a,(SDDisplayPopulation)
 234+ C429 DD 26 00                             ld      ixh,0
 235+ C42C DD 6F                                ld      ixl,a
 236+ C42E 11 00 00                             ld      de,0
 237+ C431 FD 21 80 C0                          ld      iy,population_value
 238+ C435 CD D6 AF                             call    DispDEIXtoIY1DP
 239+ C438 FD E5        .AddUoM:                push    iy
 240+ C43A E1                                   pop     hl
 241+ C43B 23                                   inc     hl
 242+ C43C 11 95 C0                             ld      de,population_uom
 243+ C43F CD F0 C4                             call    SDTackOnUOMtoHL
 244+ C442 11 60 2B                             ld      de,$2B60
 245+ C445 21 80 C0                             ld      hl,population_value
 246+ C448                                      MMUSelectLayer1
 246+ C448 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 247+ C44C CD C8 E0                             call	l1_print_at
 248+ C44F              ;SDDisplayPopulation     DB 0
 249+ C44F 3A 45 9B     .DisplayPopulationType: ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 250+ C452                                      MMUSelectGalaxyA
 250+ C452 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 251+ C455 CD DC F6                             call    galaxy_get_species
 252+ C458 CD 66 C2                             call    SD_copy_species
 253+ C45B 21 FA C0                             ld		hl,SD_species
 254+ C45E 11 08 33                             ld		de,SpeciesScreenPos
 255+ C461                                      MMUSelectLayer1
 255+ C461 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 256+ C465 CD C8 E0                             call	l1_print_at
 257+ C468 2A 49 C2     .DisplayProductivity:   ld      hl,(SDDisplayProductivity)
 258+ C46B E5                                   push    hl
 259+ C46C DD E1                                pop     ix
 260+ C46E 11 00 00                             ld      de,0
 261+ C471 FD 21 9E C0                          ld      iy,productivity_value
 262+ C475 CD E5 AF                             call    DispDEIXtoIY
 263+ C478 FD E5        .AddProdUoM:            push    iy
 264+ C47A E1                                   pop     hl
 265+ C47B 23                                   inc     hl
 266+ C47C 11 B3 C0                             ld      de,productivity_uom
 267+ C47F CD F0 C4                             call    SDTackOnUOMtoHL
 268+ C482 11 A0 3B                             ld      de,$3BA0
 269+ C485 21 9E C0                             ld      hl,productivity_value
 270+ C488                                      MMUSelectLayer1
 270+ C488 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 271+ C48C CD C8 E0                             call	l1_print_at
 272+ C48F 3A 45 9B     .DisplayRadius:         ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 273+ C492                                      MMUSelectGalaxyA
 273+ C492 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 274+ C495 2A 10 E9                             ld      hl,(GalaxyDisplayRadius)
 275+ C498 E5                                   push    hl
 276+ C499 DD E1                                pop     ix
 277+ C49B 11 00 00                             ld      de,0
 278+ C49E FD 21 67 C0                          ld      iy,radius_value
 279+ C4A2 CD E5 AF                             call    DispDEIXtoIY
 280+ C4A5 FD E5        .AddRadiusUoM:          push    iy
 281+ C4A7 E1                                   pop     hl
 282+ C4A8 23                                   inc     hl
 283+ C4A9 11 7C C0                             ld      de,radius_uom
 284+ C4AC CD F0 C4                             call    SDTackOnUOMtoHL
 285+ C4AF 21 67 C0                             ld      hl,radius_value
 286+ C4B2 11 A0 43                             ld      de,$43A0
 287+ C4B5                                      MMUSelectLayer1
 287+ C4B5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 288+ C4B9 CD C8 E0                             call	l1_print_at
 289+ C4BC 3A 45 9B     .DisplayDescription:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 290+ C4BF                                      MMUSelectGalaxyA
 290+ C4BF ED 92 57    >                     nextreg GalaxyDataMMU,       a
 291+ C4C2 11 F8 E8     .CopySaveToGal:         ld      de,GalaxyWorkingSeed
 292+ C4C5 21 EA C2                             ld      hl,sd_copy_of_seed
 293+ C4C8 CD 02 FA                             call    galaxy_copy_seed
 294+ C4CB ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 295+ C4CF CD 6F F8                             call     GalaxyGenerateDesc
 296+ C4D2 CD 72 C2                             call    SD_copy_description
 297+ C4D5 11 08 57                             ld      de,$5708
 298+ C4D8 21 19 C1                             ld      hl,SD_planet_description
 299+ C4DB                                      MMUSelectLayer1
 299+ C4DB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 300+ C4DF CD 15 E1                             call	l1_print_at_wrap
 301+ C4E2 C9                                   ret
 302+ C4E3
 303+ C4E3              ; HL = value to add on
 304+ C4E3              ; de = Unit of Measure
 305+ C4E3 7E           SDAddUoMtoHL:           ld      a,(hl)
 306+ C4E4 FE 00                                cp      0
 307+ C4E6 28 03                                jr      z,.FoundEnd
 308+ C4E8 23                                   inc     hl
 309+ C4E9 18 F8                                jr      SDAddUoMtoHL
 310+ C4EB EB           .FoundEnd:              ex      de,hl
 311+ C4EC CD 78 C2                             call    SDCopyLoop
 312+ C4EF C9                                   ret
 313+ C4F0
 314+ C4F0              ; works on HL already being at end
 315+ C4F0              ; de = Unit of Measure
 316+ C4F0 23           SDTackOnUOMtoHL:        inc     hl
 317+ C4F1 EB                                   ex      hl,de
 318+ C4F2 CD 78 C2                             call    SDCopyLoop
 319+ C4F5 C9                                   ret
 320+ C4F6              ;
 321+ C4F6              ;
 322+ C4F6              ;    SDDisplayEconomy        DB 0
 323+ C4F6              ;SDDisplayGovernment     DB 0
 324+ C4F6              ;SDDisplayEcononmy       DB 0
 325+ C4F6              ;SDDisplayTekLevel       DB 0
 326+ C4F6              ;
 327+ C4F6              ;SDDisplayProductivity   DW 0
 328+ C4F6              ;SDDisplayRadius         DW 0
 329+ C4F6              ;SDDataLength            EQU $ - SDDisplayEconomy
 330+ C4F6              ;
 331+ C4F6
 332+ C4F6
 333+ C4F6
 334+ C4F6
 335+ C4F6
 336+ C4F6              ;; PREsent ssytem
 337+ C4F6              ;; hyperspace systrem
 338+ C4F6              ;.StatusText:
 339+ C4F6              ;	; get closet ssytem to cursor
 340+ C4F6              ;	call	get_cmdr_condition
 341+ C4F6              ;	ld		hl, ConditionNameIdx
 342+ C4F6              ;	call	getTableText
 343+ C4F6              ;	ld		de,condition_position
 344+ C4F6              ;	call	l1_print_at
 345+ C4F6              ;.DisplayFuel:
 346+ C4F6              ;	call	GetFuelLevel
 347+ C4F6              ;	ld		hl, txt_fuel_level
 348+ C4F6              ;	ld		a,(hl)
 349+ C4F6              ;	cp		'0'
 350+ C4F6              ;	jr		nz,.PrintFuel
 351+ C4F6              ;.SkipLeadingZero:
 352+ C4F6              ;	inc		hl
 353+ C4F6              ;.PrintFuel:
 354+ C4F6              ;	ld		de,fuel_position
 355+ C4F6              ;	call	l1_print_at
 356+ C4F6              ;.DisplayCash:
 357+ C4F6              ;	call	GetCash
 358+ C4F6              ;	ld		hl,txt_cash_amount
 359+ C4F6              ;	ld		de,cash_position
 360+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 361+ C4F6              ;	ld		bc,cash_position
 362+ C4F6              ;	ld		hl,txt_cash_amount
 363+ C4F6              ;.CorrectPosition:
 364+ C4F6              ;	ld		a,(hl)
 365+ C4F6              ;	cp		0
 366+ C4F6              ;	jr		z,.DoneCorrection
 367+ C4F6              ;.StillDigits:
 368+ C4F6              ;	ld		a,c
 369+ C4F6              ;	add		a,8								; its 1 character forwards
 370+ C4F6              ;	ld		c,a
 371+ C4F6              ;	inc		hl
 372+ C4F6              ;	jr		.CorrectPosition
 373+ C4F6              ;.DoneCorrection:
 374+ C4F6              ;	ld		hl,txt_cash_decimal
 375+ C4F6              ;	ld		d,b
 376+ C4F6              ;	ld		e,c
 377+ C4F6              ;	call	l1_print_at
 378+ C4F6              ;.PrintLegalStatus:
 379+ C4F6              ;	ld		a,(FugitiveInnocentStatus)
 380+ C4F6              ;	cp		0
 381+ C4F6              ;	jr		nz,.Naughty
 382+ C4F6              ;	ld		hl,WordClean
 383+ C4F6              ;	jr		.DisplayLegalStatus
 384+ C4F6              ;.Naughty:
 385+ C4F6              ;	cp		50
 386+ C4F6              ;	jr		c,.JustOffender
 387+ C4F6              ;.VeryNaughty:
 388+ C4F6              ;	ld		hl,WordFugitive
 389+ C4F6              ;	jr		.DisplayLegalStatus
 390+ C4F6              ;.JustOffender:
 391+ C4F6              ;	ld		hl,WordOffender
 392+ C4F6              ;.DisplayLegalStatus:
 393+ C4F6              ;	ld		de,legal_status_position
 394+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 395+ C4F6              ;
 396+ C4F6 C9           	ret
 397+ C4F7
# file closed: ./Menus/system_data_menu.asm
1257  C4F7
1258  C4F7              ; Bank 54
1259  C4F7
1260  C4F7                  SLOT    MenuMarketAddr
1261  C4F7                  PAGE    BankMenuMarket
1262  C4F7                  ORG     MenuMarketAddr
1263  C000                  INCLUDE "./Menus/market_prices_menu.asm"
# file opened: ./Menus/market_prices_menu.asm
   1+ C000 4D 61 72 6B  market_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 FB A6  market_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 C1 A7  						DW $0220,name_expanded
   4+ C018 80 0B 1B A3  						DW $0B80,WordUnit
   5+ C01C B0 0B 64 A5  						DW $0BB0,WordQuantity
   6+ C020 08 13 42 A5  						DW $1308,WordProduct
   7+ C024 60 13 4A A5  						DW $1360,WordUoM
   8+ C028 80 13 4E A5  						DW $1380,WordPrice
   9+ C02C B0 13 72 A5  						DW $13B0,WordStock
  10+ C030 E0 13 6E A5  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_market_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_market_quantity     DB "999",0
  24+ C03D 39 39 39 00  txt_market_cargo        DB "999",0
  25+ C041 00 00        market_cursor			DW  $0000
  26+ C043              market_position			equ $2008
  27+ C043              market_uom				equ	$68
  28+ C043              market_price 			equ $88
  29+ C043              market_Quantity			equ	$B0
  30+ C043              market_Cargo            equ $E0
  31+ C043              market_UomOffset		equ 46
  32+ C043 20 20 20 20  market_blank_line       DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mkt_hold_level          DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mkt_cash				DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mkt_selected_row        db  0
  36+ C075
  37+ C075              mkt_cash_position       equ $B048
  38+ C075 00 00 00...  mkt_cash_amount			DS 20
  39+ C089 20 43 72 20  mkt_cash_UoM            DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mkt_cargo_position      equ $A848
  41+ C094 00 00 00...  mkt_cargo_amount		DS 20
  42+ C0A8 20 54 6F 6E  mkt_cargo_UoM           DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ C0B3 3A 74 C0     mkt_highlight_row:      ld      a,(mkt_selected_row)
  47+ C0B6 C6 04                                add     a,4
  48+ C0B8 57                                   ld      d,a
  49+ C0B9 1E 56                                ld      e,L1InvHighlight
  50+ C0BB                                      MMUSelectLayer1
  50+ C0BB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ C0BF CD 30 E0                             call    l1_hilight_row
  52+ C0C2 C9                                   ret
  53+ C0C3              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ C0C3 3A 74 C0     mkt_lowlight_row        ld      a,(mkt_selected_row)
  55+ C0C6 C6 04                                add     a,4
  56+ C0C8 57                                   ld      d,a
  57+ C0C9 1E 07                                ld      e,L1InvLowlight
  58+ C0CB                                      MMUSelectLayer1
  58+ C0CB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  59+ C0CF CD 30 E0                             call    l1_hilight_row
  60+ C0D2 C9                                   ret
  61+ C0D3              ;----------------------------------------------------------------------------------------------------------------------------------
  62+ C0D3 CD EA C0     MKT_DispDEIXtoIY1DP:    call    MKT_DispDEIXtoIY
  63+ C0D6 FD 36 02 00                          ld (iy+2),0
  64+ C0DA FD 7E 00                             ld      a,(IY+0)
  65+ C0DD FD 77 01                             ld      (IY+1),a
  66+ C0E0 3E 2E                                ld      a,"."
  67+ C0E2 FD 77 00                             ld      (IY+0),a
  68+ C0E5 FD 23                                inc     IY
  69+ C0E7 FD 23                                inc     IY
  70+ C0E9 C9                                   ret
  71+ C0EA              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ C0EA DD 22 7F C1  MKT_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  73+ C0EE ED 53 81 C1                          ld (.MKTclcn32zIX),de
  74+ C0F2 DD 21 7B C1                          ld ix,.MKTclcn32t+36
  75+ C0F6 06 09                                ld b,9
  76+ C0F8 0E 00                                ld c,0
  77+ C0FA 3E 30        .MKTclcn321:            ld a,'0'
  78+ C0FC B7                                   or a
  79+ C0FD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  80+ C100 DD 56 01                             ld d,(ix+1)
  81+ C103 2A 7F C1                             ld hl,(.MKTclcn32z)
  82+ C106 ED 52                                sbc hl,de
  83+ C108 22 7F C1                             ld (.MKTclcn32z),hl
  84+ C10B DD 5E 02                             ld e,(ix+2)
  85+ C10E DD 56 03                             ld d,(ix+3)
  86+ C111 2A 81 C1                             ld hl,(.MKTclcn32zIX)
  87+ C114 ED 52                                sbc hl,de
  88+ C116 22 81 C1                             ld (.MKTclcn32zIX),hl
  89+ C119 38 04                                jr c,.MKTclcn325
  90+ C11B 0C                                   inc c
  91+ C11C 3C                                   inc a
  92+ C11D 18 DE                                jr .MKTclcn322
  93+ C11F DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  94+ C122 DD 56 01                             ld d,(ix+1)
  95+ C125 2A 7F C1                             ld hl,(.MKTclcn32z)
  96+ C128 19                                   add hl,de
  97+ C129 22 7F C1                             ld (.MKTclcn32z),hl
  98+ C12C DD 5E 02                             ld e,(ix+2)
  99+ C12F DD 56 03                             ld d,(ix+3)
 100+ C132 2A 81 C1                             ld hl,(.MKTclcn32zIX)
 101+ C135 ED 5A                                adc hl,de
 102+ C137 22 81 C1                             ld (.MKTclcn32zIX),hl
 103+ C13A 11 FC FF                             ld de,-4
 104+ C13D DD 19                                add ix,de
 105+ C13F 0C                                   inc c
 106+ C140 0D                                   dec c
 107+ C141 28 05                                jr z,.MKTclcn323
 108+ C143 FD 77 00                             ld (iy+0),a
 109+ C146 FD 23                                inc iy
 110+ C148 10 B0        .MKTclcn323:            djnz .MKTclcn321
 111+ C14A 3A 7F C1                             ld a,(.MKTclcn32z)
 112+ C14D C6 30                                add A,'0'
 113+ C14F FD 77 00                             ld (iy+0),a
 114+ C152 FD 36 01 00                          ld (iy+1),0
 115+ C156 C9                                   ret
 116+ C157 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 116+ C15B 0A 00 00 00
 116+ C15F 64 00 00 00
 116+ C163 E8 03 00 00
 116+ C167 10 27 00 00
 117+ C16B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 117+ C16F 40 42 0F 00
 117+ C173 80 96 98 00
 117+ C177 00 E1 F5 05
 117+ C17B 00 CA 9A 3B
 118+ C17F 00 00        .MKTclcn32z             ds 2
 119+ C181 00 00        .MKTclcn32zIX           ds 2
 120+ C183              ;----------------------------------------------------------------------------------------------------------------------------------
 121+ C183              ; "DispHL, writes HL to DE address"
 122+ C183 01 F0 D8     MPM_DispHLtoDE:         ld	bc,-10000
 123+ C186 CD 9C C1                             call	MPM_Num1
 124+ C189 01 18 FC                             ld	bc,-1000
 125+ C18C CD 9C C1                             call	MPM_Num1
 126+ C18F 01 9C FF                             ld	bc,-100
 127+ C192 CD 9C C1                             call	MPM_Num1
 128+ C195 0E F6                                ld	c,-10
 129+ C197 CD 9C C1                             call	MPM_Num1
 130+ C19A 0E FF                                ld	c,-1
 131+ C19C 3E 2F        MPM_Num1:	            ld	a,'0'-1
 132+ C19E 3C           .Num2:	                inc	a
 133+ C19F 09                                   add	hl,bc
 134+ C1A0 38 FC                                jr	c,.Num2
 135+ C1A2 ED 42                                sbc	hl,bc
 136+ C1A4 12                                   ld	(de),a
 137+ C1A5 13                                   inc	de
 138+ C1A6 C9                                   ret
 139+ C1A7              ;----------------------------------------------------------------------------------------------------------------------------------
 140+ C1A7 26 00        MPM_DispAtoDE:          ld h,0
 141+ C1A9 6F                                   ld l,a
 142+ C1AA C3 83 C1                             jp MPM_DispHLtoDE
 143+ C1AD              ;----------------------------------------------------------------------------------------------------------------------------------
 144+ C1AD 26 00        MPM_DispPriceAtoDE:     ld h,0
 145+ C1AF 6F                                   ld l,a
 146+ C1B0 01 9C FF                             ld	bc,-100
 147+ C1B3 CD C3 C1                             call	.NumLeadBlank1
 148+ C1B6 0E F6                                ld	c,-10
 149+ C1B8 CD 9C C1                             call	MPM_Num1
 150+ C1BB 3E 2E                                ld		a,'.'					; we could assume preformat but
 151+ C1BD 12                                   ld		(de),a					; we can optimse that later TODO
 152+ C1BE 13                                   inc		de						; with just an inc De
 153+ C1BF 0E FF                                ld	c,-1
 154+ C1C1 18 D9                                jr		MPM_Num1
 155+ C1C3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 156+ C1C5 3C           .NumLeadBlank2:	        inc	a
 157+ C1C6 09                                   add	hl,bc
 158+ C1C7 38 FC                                jr	c,.NumLeadBlank2
 159+ C1C9 FE 30                                cp	'0'
 160+ C1CB 20 02                                jr	nz,.DontBlank
 161+ C1CD 3E 20        .Blank:                 ld	a,' '
 162+ C1CF ED 42        .DontBlank:	            sbc	hl,bc
 163+ C1D1 12                                   ld	(de),a
 164+ C1D2 13                                   inc	de
 165+ C1D3 C9                                   ret
 166+ C1D4              ;----------------------------------------------------------------------------------------------------------------------------------
 167+ C1D4 FE 00        MPM_DispQtyAtoDE:       cp	0
 168+ C1D6 28 30                                jr	z,.NoStock
 169+ C1D8 26 00                                ld h,0
 170+ C1DA 6F                                   ld l,a
 171+ C1DB 01 9C FF                             ld	bc,-100
 172+ C1DE CD F7 C1                             call	.NumLeadBlank1
 173+ C1E1 FE 20        .WasLead0:              cp      ' '
 174+ C1E3 20 09                                jr      nz,.NotHundredsZero
 175+ C1E5 0E F6                                ld	c,-10
 176+ C1E7 CD F7 C1                             call	.NumLeadBlank1
 177+ C1EA 0E FF                                ld	c,-1
 178+ C1EC 18 AE                                jr		MPM_Num1
 179+ C1EE 0E F6        .NotHundredsZero:       ld	c,-10
 180+ C1F0 CD 9C C1                             call	MPM_Num1
 181+ C1F3 0E FF                                ld	c,-1
 182+ C1F5 18 A5                                jr		MPM_Num1
 183+ C1F7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 184+ C1F9 3C           .NumLeadBlank2:	        inc	a
 185+ C1FA 09                                   add	hl,bc
 186+ C1FB 38 FC                                jr	c,.NumLeadBlank2
 187+ C1FD FE 30                                cp	'0'
 188+ C1FF 20 02                                jr	nz,.DontBlank
 189+ C201 3E 20        .Blank:                 ld	a,' '
 190+ C203 ED 42        .DontBlank:	            sbc	hl,bc
 191+ C205 12                                   ld	(de),a
 192+ C206 13                                   inc	de
 193+ C207 C9                                   ret
 194+ C208 3E 20        .NoStock:               ld	a,' '
 195+ C20A 12                                   ld	(de),a
 196+ C20B 13                                   inc	de
 197+ C20C 12                                   ld	(de),a
 198+ C20D 13                                   inc	de
 199+ C20E 3E 2D                                ld	a,'-'
 200+ C210 12                                   ld	(de),a
 201+ C211 13                                   inc de
 202+ C212 C9                                   ret
 203+ C213              ;----------------------------------------------------------------------------------------------------------------------------------
 204+ C213              MPM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C213
   2++C213              ;">print_boilder_text hl = text structure, b = message count"
   3++C213              .BoilerTextLoop:
   4++C213 C5           	push		bc			; Save Message Count loop value
   5++C214 4E           	ld			c,(hl)		; Get Row into b
   6++C215 23           	inc			hl
   7++C216 46           	ld			b,(hl)		; Get Col into b
   8++C217 23           	inc			hl
   9++C218 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C219 23           	inc			hl
  11++C21A 56           	ld			d,(hl)		; Get text address Hi into E
  12++C21B 23           	inc			hl
  13++C21C E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C21D EB           	ex			de,hl		; now hl = address of text data
  15++C21E 1E FF        	ld			e,txt_status_colour
  16++C220 C5           	push		bc
  17++C221 D1           	pop			de
  18++C222                  MMUSelectLayer1
  18++C222 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C226 CD C8 E0     	call		l1_print_at
  20++C229 E1           	pop			hl
  21++C22A C1           	pop			bc
  22++C22B 10 E6        	djnz		.BoilerTextLoop
  23++C22D C9           	ret
  24++C22E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 205+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 206+ C22E 2A 28 9F     MKT_GetCash:            ld		hl,(Cash+2)
 207+ C231 EB                                   ex      de,hl
 208+ C232 DD 2A 26 9F                          ld      ix,(Cash)
 209+ C236 FD 21 75 C0                          ld		iy,mkt_cash_amount
 210+ C23A CD D3 C0                             call 	MKT_DispDEIXtoIY1DP
 211+ C23D FD E5                                push    IY
 212+ C23F D1                                   pop     de
 213+ C240 21 89 C0                             ld      hl,mkt_cash_UoM
 214+ C243 01 0B 00                             ld      bc,11
 215+ C246 ED B0                                ldir
 216+ C248 C9                                   ret
 217+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 218+ C249 11 00 00     MKT_GetCargo:   	    ld      de,0
 219+ C24C DD 21 00 00                          ld      ix,0
 220+ C250 3A 2C 9F                             ld      a,(CargoRunningLoad)
 221+ C253 DD 6F                                ld      ixl,a
 222+ C255 FD 21 94 C0                          ld		iy,mkt_cargo_amount
 223+ C259 CD EA C0                             call 	MKT_DispDEIXtoIY
 224+ C25C FD E5                                push    IY
 225+ C25E D1                                   pop     de
 226+ C25F 13                                   inc     de
 227+ C260 21 A8 C0                             ld      hl,mkt_cargo_UoM
 228+ C263 01 0B 00                             ld      bc,11
 229+ C266 ED B0                                ldir
 230+ C268 C9                                   ret
 231+ C269              ;----------------------------------------------------------------------------------------------------------------------------------
 232+ C269 CD 49 C2     MKT_DisplayCargo:       call	MKT_GetCargo
 233+ C26C 21 94 C0                             ld		hl,mkt_cargo_amount
 234+ C26F 11 48 A8                             ld      de,mkt_cargo_position
 235+ C272                                      MMUSelectLayer1
 235+ C272 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 236+ C276 CD C8 E0                             call	l1_print_at
 237+ C279 C9                                   ret
 238+ C27A              ;----------------------------------------------------------------------------------------------------------------------------------
 239+ C27A CD 2E C2     MKT_DisplayCash:        call	MKT_GetCash
 240+ C27D 21 75 C0                             ld		hl,mkt_cash_amount
 241+ C280 11 48 B0                             ld      de,mkt_cash_position
 242+ C283                                      MMUSelectLayer1
 242+ C283 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 243+ C287 CD C8 E0                             call	l1_print_at
 244+ C28A C9                                   ret
 245+ C28B              ;----------------------------------------------------------------------------------------------------------------------------------
 246+ C28B              ; "A = stock item number"
 247+ C28B F5           PrintMarketItem:        push     af
 248+ C28C 21 08 20                             ld      hl,market_position  ; hl = base cursor position + row number * 8
 249+ C28F 57                                   ld      d,a                 ; .
 250+ C290 1E 08                                ld      e,8                 ; .
 251+ C292 ED 30                                mul                         ; .
 252+ C294 53                                   ld      d,e                 ; .
 253+ C295 1E 00                                ld      e,0                 ; .
 254+ C297 19                                   add     hl,de               ; .
 255+ C298 22 41 C0                             ld      (market_cursor),hl  ; save in market cursor and copy to de
 256+ C29B EB                                   ex      hl,de               ; .
 257+ C29C 21 43 C0                             ld      hl,market_blank_line; hl = blank line text
 258+ C29F                                      MMUSelectLayer1             ; print blank line (hl) and position DE
 258+ C29F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2A3 CD C8 E0                             call	l1_print_at         ; .
 260+ C2A6 F1                                   pop     af
 261+ C2A7 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 262+ C2AB FD 21 2D 9F                          ld      iy,CargoTonnes
 263+ C2AF 1E 08                                ld		e,8
 264+ C2B1 57                                   ld		d,a
 265+ C2B2 ED 30                                mul
 266+ C2B4 DD 19                                add		ix,de				; Move down a row ix += a * 8
 267+ C2B6 16 00                                ld      d,0
 268+ C2B8 5F                                   ld      e,a
 269+ C2B9 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 270+ C2BB              .GetName:               MMUSelectStockTable
 270+ C2BB ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 271+ C2BF DD 7E 00                             ld		a,(ix+0)
 272+ C2C2 21 9F A5                             ld		hl,WordIdx
 273+ C2C5 CD 74 A2                             call	getTableText
 274+ C2C8 ED 5B 41 C0                          ld		de,(market_cursor)
 275+ C2CC                                      MMUSelectLayer1
 275+ C2CC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 276+ C2D0 CD C8 E0                             call	l1_print_at
 277+ C2D3              .GetUom                 MMUSelectStockTable
 277+ C2D3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 278+ C2D7 DD 7E 07                             ld		a,(ix+7)
 279+ C2DA C6 2E                                add		a,market_UomOffset
 280+ C2DC 21 9F A5                             ld		hl,WordIdx
 281+ C2DF CD 74 A2                             call	getTableText
 282+ C2E2 ED 5B 41 C0                          ld		de,(market_cursor)
 283+ C2E6 1E 68                                ld		e,market_uom
 284+ C2E8                                      MMUSelectLayer1
 284+ C2E8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 285+ C2EC CD C8 E0                             call	l1_print_at
 286+ C2EF              .GetPrice:              MMUSelectStockTable
 286+ C2EF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 287+ C2F3 DD 7E 02                             ld		a,(ix+2)
 288+ C2F6 11 34 C0                             ld		de,txt_market_amount
 289+ C2F9 CD AD C1                             call	MPM_DispPriceAtoDE
 290+ C2FC 21 34 C0                             ld		hl,txt_market_amount
 291+ C2FF ED 5B 41 C0                          ld		de,(market_cursor)
 292+ C303 1E 88                                ld		e,market_price
 293+ C305                                      MMUSelectLayer1
 293+ C305 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C309 CD C8 E0                             call	l1_print_at
 295+ C30C              .GetQty:                MMUSelectStockTable
 295+ C30C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 296+ C310 DD 7E 01                             ld		a,(ix+1)
 297+ C313 11 39 C0                             ld		de,txt_market_quantity
 298+ C316 CD D4 C1                             call	MPM_DispQtyAtoDE
 299+ C319 21 39 C0                             ld		hl,txt_market_quantity
 300+ C31C ED 5B 41 C0                          ld		de,(market_cursor)
 301+ C320 1E B0                                ld		e,market_Quantity
 302+ C322                                      MMUSelectLayer1
 302+ C322 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 303+ C326 CD C8 E0                             call	l1_print_at
 304+ C329 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 305+ C32C 11 3D C0                             ld      de,txt_market_cargo
 306+ C32F CD D4 C1                             call	MPM_DispQtyAtoDE
 307+ C332 21 3D C0                             ld      hl,txt_market_cargo
 308+ C335 ED 5B 41 C0                          ld      de,(market_cursor)
 309+ C339 1E E0                                ld      e,market_Cargo
 310+ C33B                                      MMUSelectLayer1
 310+ C33B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 311+ C33F CD C8 E0                             call	l1_print_at
 312+ C342 C9                                   ret
 313+ C343
 314+ C343              draw_market_prices_menu:InitNoDoubleBuffer
 314+ C343             >                            MMUSelectLayer1
 314+ C343 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 314+ C347 CD 80 E0    >                            call	l1_cls
 314+ C34A 3E 07       >                            ld		a,7
 314+ C34C CD 9B E0    >                            call	l1_attr_cls_to_a
 314+ C34F             >                            MMUSelectLayer2
 314+ C34F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 314+ C353 CD 09 E0    >                            call    asm_l2_double_buffer_off
 314+ C356 CD F3 E0    >                            call	l2_cls	; Get some space
 314+ C359             >                            MMUSelectSpriteBank
 314+ C359 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 314+ C35D CD 27 E4    >                            call    sprite_cls_cursors
 315+ C360 3E 20                                ld      a,$20
 316+ C362 32 5B 9A                             ld      (MenuIdMax),a
 317+ C365 01 01 01     .Drawbox:               ld		bc,$0101
 318+ C368 11 FD BE                             ld		de,$BEFD
 319+ C36B 3E C0                                ld		a,$C0
 320+ C36D                                      MMUSelectLayer2
 320+ C36D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 321+ C371 CD 20 E2                             call	l2_draw_box
 322+ C374 01 01 0A                             ld		bc,$0A01
 323+ C377 11 C0 FE                             ld		de,$FEC0
 324+ C37A CD 8A E2                             call	l2_draw_horz_line
 325+ C37D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 326+ C380 11 C0 50                             ld		de,$50C0
 327+ C383 CD 8A E2                             call	l2_draw_horz_line
 328+ C386 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 329+ C389 11 C0 18                             ld		de,$18C0
 330+ C38C CD 8A E2                             call	l2_draw_horz_line
 331+ C38F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 332+ C392 11 C0 28                             ld		de,$28C0
 333+ C395 CD 8A E2                             call	l2_draw_horz_line
 334+ C398 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 335+ C39B 11 C0 28                             ld		de,$28C0
 336+ C39E CD 8A E2                             call	l2_draw_horz_line
 337+ C3A1 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 338+ C3A4 11 C0 18                             ld		de,$18C0
 339+ C3A7 CD 8A E2                             call	l2_draw_horz_line
 340+ C3AA 3A 45 9B     .StaticText:	        ld      a,(Galaxy)
 341+ C3AD                                      MMUSelectGalaxyA
 341+ C3AD ED 92 57    >                     nextreg GalaxyDataMMU,       a
 342+ C3B0 3E 19                                ld		a,25
 343+ C3B2 CD 3C A7                             call	expandTokenToString
 344+ C3B5 CD 7A F6                             call	GetDigramGalaxySeed
 345+ C3B8 06 09                                ld		b,9
 346+ C3BA 21 10 C0                             ld		hl,market_boiler_text
 347+ C3BD CD 13 C2                             call	MPM_print_boiler_text
 348+ C3C0              ; Generate the market list on screen
 349+ C3C0 3E 00        .DisplayPrices:         ld		a,0
 350+ C3C2 21 08 20                             ld		hl,market_position          ; set current cursor position on screen
 351+ C3C5 22 41 C0                             ld		(market_cursor),hl          ; .
 352+ C3C8 F5           MarketLoop:	            push	af
 353+ C3C9 CD 8B C2                             call	PrintMarketItem             ; display a single market item
 354+ C3CC F1                                   pop		af
 355+ C3CD 3C                                   inc		a
 356+ C3CE FE 11                                cp		17
 357+ C3D0 20 F6                                jr		nz,MarketLoop
 358+ C3D2 AF           .InitialHighlight:      xor     a
 359+ C3D3 32 74 C0                             ld      (mkt_selected_row),a        ; assume on row zero
 360+ C3D6 CD B3 C0                             call    mkt_highlight_row
 361+ C3D9 21 64 C0     .DisCargo:              ld      hl,mkt_hold_level
 362+ C3DC 11 10 A8                             ld      de,$A810
 363+ C3DF                                      MMUSelectLayer1
 363+ C3DF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 364+ C3E3 CD C8 E0                             call	l1_print_at
 365+ C3E6 CD 69 C2                             call    MKT_DisplayCargo
 366+ C3E9 21 6C C0     .DisCash:               ld      hl,mkt_cash
 367+ C3EC 11 10 B0                             ld      de,$B010
 368+ C3EF                                      MMUSelectLayer1
 368+ C3EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 369+ C3F3 CD C8 E0                             call	l1_print_at
 370+ C3F6 CD 7A C2                             call    MKT_DisplayCash
 371+ C3F9 C9                                   ret
 372+ C3FA
 373+ C3FA
 374+ C3FA              ;----------------------------------------------------------------------------------------------------------------------------------
 375+ C3FA              ; Handles all the input whilst in the market menu
 376+ C3FA 3E 4A        loop_market_menu:       ld      a,c_Pressed_CursorUp
 377+ C3FC CD A5 97                             call    is_key_pressed
 378+ C3FF CC 1B C4                             call    z,mkt_UpPressed
 379+ C402 3E 4C                                ld      a,c_Pressed_CursorDown
 380+ C404 CD A5 97                             call    is_key_pressed
 381+ C407 CC 2C C4                             call    z,mkt_DownPressed
 382+ C40A 3E 08                                ld      a,c_Pressed_RollLeft
 383+ C40C CD A5 97                             call    is_key_pressed
 384+ C40F CC 48 C4                             call    z,mkt_LeftPressed
 385+ C412 3E 0A                                ld      a,c_Pressed_RollRight
 386+ C414 CD A5 97                             call    is_key_pressed
 387+ C417 CC 8B C4                             call    z,mkt_RightPressed
 388+ C41A C9                                   ret
 389+ C41B
 390+ C41B              ;----------------------------------------------------------------------------------------------------------------------------------
 391+ C41B 3A 74 C0     mkt_UpPressed:          ld      a,(mkt_selected_row)
 392+ C41E FE 00                                cp      0
 393+ C420 C8                                   ret     z
 394+ C421 CD C3 C0                             call    mkt_lowlight_row
 395+ C424 21 74 C0                             ld      hl,mkt_selected_row
 396+ C427 35                                   dec     (hl)
 397+ C428 CD B3 C0                             call    mkt_highlight_row
 398+ C42B C9                                   ret
 399+ C42C              ;----------------------------------------------------------------------------------------------------------------------------------
 400+ C42C 3E 4C        mkt_DownPressed:        ld      a,c_Pressed_CursorDown
 401+ C42E CD 80 97                             call    get_key_a_state
 402+ C431 FE 01                                cp      1
 403+ C433 28 02                                jr      z,.ItsOK
 404+ C435 DD 01                                break
 405+ C437 3A 74 C0     .ItsOK:                        ld      a,(mkt_selected_row)
 406+ C43A FE 10                                cp      16
 407+ C43C C8                                   ret     z
 408+ C43D CD C3 C0                             call    mkt_lowlight_row
 409+ C440 21 74 C0                             ld      hl,mkt_selected_row
 410+ C443 34                                   inc     (hl)
 411+ C444 CD B3 C0                             call    mkt_highlight_row
 412+ C447 C9                                   ret
 413+ C448              ;----------------------------------------------------------------------------------------------------------------------------------
 414+ C448 3A 74 C0     mkt_LeftPressed:        ld      a,(mkt_selected_row)
 415+ C44B 21 2D 9F                             ld      hl,CargoTonnes
 416+ C44E ED 31                                add     hl,a
 417+ C450 7E                                   ld      a,(hl)
 418+ C451 FE 00                                cp      0
 419+ C453 C8                                   ret     z
 420+ C454 35                                   dec     (hl)
 421+ C455 DD 21 00 E0                          ld      ix,StockFood
 422+ C459 3A 74 C0                             ld      a,(mkt_selected_row)
 423+ C45C 16 08                                ld      d,8
 424+ C45E 5F                                   ld      e,a
 425+ C45F ED 30                                mul
 426+ C461 DD 19                                add     ix,de
 427+ C463                                      MMUSelectStockTable
 427+ C463 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 428+ C467 DD 34 01                             inc     (ix+1)
 429+ C46A DD 7E 07                             ld      a,(ix+7)
 430+ C46D FE 30                                cp      48
 431+ C46F 20 04                                jr      nz,.UnderATonne
 432+ C471 21 2C 9F                             ld      hl,CargoRunningLoad
 433+ C474 35                                   dec     (hl)            ; We need to cosider UoM
 434+ C475 DD 7E 02     .UnderATonne:           ld      a,(ix+2)
 435+ C478 16 00                                ld      d,0
 436+ C47A 5F                                   ld      e,a
 437+ C47B CD 3B A9                             call    addDEtoCash
 438+ C47E                                      ; DO ADD CASH
 439+ C47E 3A 74 C0                             ld      a,(mkt_selected_row)
 440+ C481 CD 8B C2                             call    PrintMarketItem
 441+ C484 CD 69 C2                             call    MKT_DisplayCargo
 442+ C487 CD 7A C2                             call    MKT_DisplayCash
 443+ C48A C9                                   ret
 444+ C48B              ;----------------------------------------------------------------------------------------------------------------------------------
 445+ C48B              mkt_RightPressed:       MMUSelectStockTable
 445+ C48B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 446+ C48F DD 21 00 E0                          ld      ix,StockFood
 447+ C493 3A 74 C0                             ld      a,(mkt_selected_row)
 448+ C496 16 08                                ld      d,8
 449+ C498 5F                                   ld      e,a
 450+ C499 ED 30                                mul
 451+ C49B DD 19                                add     ix,de
 452+ C49D 4F                                   ld      c,a
 453+ C49E DD 7E 01                             ld      a,(ix+1)
 454+ C4A1 FE 00                                cp      0
 455+ C4A3 C8                                   ret     z
 456+ C4A4 DD 7E 07     .CheckUoM:              ld      a,(ix+7)
 457+ C4A7 FE 30                                cp      48
 458+ C4A9 28 0F                                jr      z,.CheckCargo                       ; cargo is in tonnes
 459+ C4AB 3A 74 C0     .NotTonnage:            ld      a,(mkt_selected_row)
 460+ C4AE 21 2D 9F                             ld      hl,CargoTonnes
 461+ C4B1 ED 31                                add     hl,a
 462+ C4B3 7E                                   ld      a,(hl)
 463+ C4B4 FE C8                                cp      200
 464+ C4B6 C8                                   ret     z                                   ; else its a 200 UoM limit
 465+ C4B7 C3 C0 C4                             jp      .CheckCash
 466+ C4BA 2A 2B 9F     .CheckCargo:            ld      hl,(CargoBaySize)                   ; = h = runningload l = cargo bay size
 467+ C4BD 7C                                   ld      a,h
 468+ C4BE BD                                   cp      l
 469+ C4BF C8                                   ret     z                                   ; return if we have already maxed out
 470+ C4C0 2A 28 9F     .CheckCash:             ld      hl,(Cash+2)
 471+ C4C3 7C                                   ld      a,h
 472+ C4C4 B5                                   or      l
 473+ C4C5 20 0F                                jr      nz,.MoreThanRequired
 474+ C4C7 2A 26 9F                             ld      hl,(Cash)
 475+ C4CA 7C                                   ld      a,h
 476+ C4CB FE 00                                cp      0
 477+ C4CD 20 07                                jr      nz,.MoreThanRequired
 478+ C4CF DD 7E 02                             ld      a,(ix+2)
 479+ C4D2 BD                                   cp      l
 480+ C4D3 30 01                                jr      nc,.MoreThanRequired
 481+ C4D5 C9                                   ret                         ; Insufficient Funds
 482+ C4D6 19           .MoreThanRequired:      add     hl,de
 483+ C4D7 7C                                   ld      a,h
 484+ C4D8 B3                                   or      e
 485+ C4D9                                      ; check cash can we buy, and cargo capacity
 486+ C4D9 DD 35 01                             dec     (ix+1)
 487+ C4DC 3A 74 C0                             ld      a,(mkt_selected_row)
 488+ C4DF 21 2D 9F                             ld      hl,CargoTonnes
 489+ C4E2 ED 31                                add     hl,a
 490+ C4E4 34                                   inc     (hl)
 491+ C4E5 DD 7E 07                             ld      a,(ix+7)
 492+ C4E8 47                                   ld      b,a
 493+ C4E9 FE 30                                cp      48
 494+ C4EB 20 05                                jr      nz,.UnderOneTonne
 495+ C4ED 78                                   ld      a,b
 496+ C4EE 21 2C 9F                             ld      hl,CargoRunningLoad
 497+ C4F1 34                                   inc     (hl)
 498+ C4F2 DD 7E 02     .UnderOneTonne:         ld      a,(ix+2)
 499+ C4F5 16 00                                ld      d,0
 500+ C4F7 5F                                   ld      e,a
 501+ C4F8 CD 4E A9                             call    subDEfromCash
 502+ C4FB 3A 74 C0                             ld      a,(mkt_selected_row)
 503+ C4FE CD 8B C2                             call    PrintMarketItem
 504+ C501 CD 69 C2                             call    MKT_DisplayCargo
 505+ C504 CD 7A C2                             call    MKT_DisplayCash
 506+ C507 C9                                   ret
# file closed: ./Menus/market_prices_menu.asm
1264  C508
1265  C508              ; Bank 66
1266  C508
1267  C508                  SLOT    DispMarketAddr
1268  C508                  PAGE    BankDispMarket
1269  C508                  ORG     DispMarketAddr
1270  C000                  INCLUDE "./Menus/market_prices_disp.asm"
# file opened: ./Menus/market_prices_disp.asm
   1+ C000 4D 61 72 6B  mktdisp_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 FB A6  mktdisp_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 C1 A7  						DW $0220,name_expanded
   4+ C018 80 0B 1B A3  						DW $0B80,WordUnit
   5+ C01C B0 0B 64 A5  						DW $0BB0,WordQuantity
   6+ C020 08 13 42 A5  						DW $1308,WordProduct
   7+ C024 60 13 4A A5  						DW $1360,WordUoM
   8+ C028 80 13 4E A5  						DW $1380,WordPrice
   9+ C02C B0 13 72 A5  						DW $13B0,WordStock
  10+ C030 E0 13 6E A5  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_mktdisp_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_mktdisp_quantity    DB "999",0
  24+ C03D 39 39 39 00  txt_mktdisp_cargo       DB "999",0
  25+ C041 00 00        mktdisp_cursor			DW  $0000
  26+ C043              mktdisp_position		equ $2008
  27+ C043              mktdisp_uom				equ	$68
  28+ C043              mktdisp_price 			equ $88
  29+ C043              mktdisp_Quantity		equ	$B0
  30+ C043              mktdisp_Cargo           equ $E0
  31+ C043              mktdisp_UomOffset		equ 46
  32+ C043 20 20 20 20  mktdisp_blank_line      DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mktdisp_hold_level      DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mktdisp_cash			DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mktdisp_selected_row    db  0
  36+ C075
  37+ C075              mktdisp_cash_position   equ $B048
  38+ C075 00 00 00...  mktdisp_cash_amount		DS 20
  39+ C089 20 43 72 20  mktdisp_cash_UoM        DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mktdisp_cargo_position  equ $A848
  41+ C094 00 00 00...  mktdisp_cargo_amount	DS 20
  42+ C0A8 20 54 6F 6E  mktdisp_cargo_UoM       DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3 CD CA C0     mktdisp_DispDEIXtoIY1DP:    call    mktdisp_DispDEIXtoIY
  46+ C0B6 FD 36 02 00                          ld (iy+2),0
  47+ C0BA FD 7E 00                             ld      a,(IY+0)
  48+ C0BD FD 77 01                             ld      (IY+1),a
  49+ C0C0 3E 2E                                ld      a,"."
  50+ C0C2 FD 77 00                             ld      (IY+0),a
  51+ C0C5 FD 23                                inc     IY
  52+ C0C7 FD 23                                inc     IY
  53+ C0C9 C9                                   ret
  54+ C0CA              ;----------------------------------------------------------------------------------------------------------------------------------
  55+ C0CA DD 22 5F C1  mktdisp_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  56+ C0CE ED 53 61 C1                          ld (.MKTclcn32zIX),de
  57+ C0D2 DD 21 5B C1                          ld ix,.MKTclcn32t+36
  58+ C0D6 06 09                                ld b,9
  59+ C0D8 0E 00                                ld c,0
  60+ C0DA 3E 30        .MKTclcn321:            ld a,'0'
  61+ C0DC B7                                   or a
  62+ C0DD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  63+ C0E0 DD 56 01                             ld d,(ix+1)
  64+ C0E3 2A 5F C1                             ld hl,(.MKTclcn32z)
  65+ C0E6 ED 52                                sbc hl,de
  66+ C0E8 22 5F C1                             ld (.MKTclcn32z),hl
  67+ C0EB DD 5E 02                             ld e,(ix+2)
  68+ C0EE DD 56 03                             ld d,(ix+3)
  69+ C0F1 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  70+ C0F4 ED 52                                sbc hl,de
  71+ C0F6 22 61 C1                             ld (.MKTclcn32zIX),hl
  72+ C0F9 38 04                                jr c,.MKTclcn325
  73+ C0FB 0C                                   inc c
  74+ C0FC 3C                                   inc a
  75+ C0FD 18 DE                                jr .MKTclcn322
  76+ C0FF DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  77+ C102 DD 56 01                             ld d,(ix+1)
  78+ C105 2A 5F C1                             ld hl,(.MKTclcn32z)
  79+ C108 19                                   add hl,de
  80+ C109 22 5F C1                             ld (.MKTclcn32z),hl
  81+ C10C DD 5E 02                             ld e,(ix+2)
  82+ C10F DD 56 03                             ld d,(ix+3)
  83+ C112 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  84+ C115 ED 5A                                adc hl,de
  85+ C117 22 61 C1                             ld (.MKTclcn32zIX),hl
  86+ C11A 11 FC FF                             ld de,-4
  87+ C11D DD 19                                add ix,de
  88+ C11F 0C                                   inc c
  89+ C120 0D                                   dec c
  90+ C121 28 05                                jr z,.MKTclcn323
  91+ C123 FD 77 00                             ld (iy+0),a
  92+ C126 FD 23                                inc iy
  93+ C128 10 B0        .MKTclcn323:            djnz .MKTclcn321
  94+ C12A 3A 5F C1                             ld a,(.MKTclcn32z)
  95+ C12D C6 30                                add A,'0'
  96+ C12F FD 77 00                             ld (iy+0),a
  97+ C132 FD 36 01 00                          ld (iy+1),0
  98+ C136 C9                                   ret
  99+ C137 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  99+ C13B 0A 00 00 00
  99+ C13F 64 00 00 00
  99+ C143 E8 03 00 00
  99+ C147 10 27 00 00
 100+ C14B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 100+ C14F 40 42 0F 00
 100+ C153 80 96 98 00
 100+ C157 00 E1 F5 05
 100+ C15B 00 CA 9A 3B
 101+ C15F 00 00        .MKTclcn32z             ds 2
 102+ C161 00 00        .MKTclcn32zIX           ds 2
 103+ C163              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C163              ; "DispHL, writes HL to DE address"
 105+ C163 01 F0 D8     MPD_DispHLtoDE:         ld	bc,-10000
 106+ C166 CD 7C C1                             call	MPD_Num1
 107+ C169 01 18 FC                             ld	bc,-1000
 108+ C16C CD 7C C1                             call	MPD_Num1
 109+ C16F 01 9C FF                             ld	bc,-100
 110+ C172 CD 7C C1                             call	MPD_Num1
 111+ C175 0E F6                                ld	c,-10
 112+ C177 CD 7C C1                             call	MPD_Num1
 113+ C17A 0E FF                                ld	c,-1
 114+ C17C 3E 2F        MPD_Num1:	            ld	a,'0'-1
 115+ C17E 3C           .Num2:	                inc	a
 116+ C17F 09                                   add	hl,bc
 117+ C180 38 FC                                jr	c,.Num2
 118+ C182 ED 42                                sbc	hl,bc
 119+ C184 12                                   ld	(de),a
 120+ C185 13                                   inc	de
 121+ C186 C9                                   ret
 122+ C187              ;----------------------------------------------------------------------------------------------------------------------------------
 123+ C187 26 00        MPD_DispAtoDE:          ld h,0
 124+ C189 6F                                   ld l,a
 125+ C18A C3 63 C1                             jp MPD_DispHLtoDE
 126+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 127+ C18D 26 00        MPD_DispPriceAtoDE:     ld h,0
 128+ C18F 6F                                   ld l,a
 129+ C190 01 9C FF                             ld	bc,-100
 130+ C193 CD A3 C1                             call	.NumLeadBlank1
 131+ C196 0E F6                                ld	c,-10
 132+ C198 CD 7C C1                             call	MPD_Num1
 133+ C19B 3E 2E                                ld		a,'.'					; we could assume preformat but
 134+ C19D 12                                   ld		(de),a					; we can optimse that later TODO
 135+ C19E 13                                   inc		de						; with just an inc De
 136+ C19F 0E FF                                ld	c,-1
 137+ C1A1 18 D9                                jr		MPD_Num1
 138+ C1A3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 139+ C1A5 3C           .NumLeadBlank2:	        inc	a
 140+ C1A6 09                                   add	hl,bc
 141+ C1A7 38 FC                                jr	c,.NumLeadBlank2
 142+ C1A9 FE 30                                cp	'0'
 143+ C1AB 20 02                                jr	nz,.DontBlank
 144+ C1AD 3E 20        .Blank:                 ld	a,' '
 145+ C1AF ED 42        .DontBlank:	            sbc	hl,bc
 146+ C1B1 12                                   ld	(de),a
 147+ C1B2 13                                   inc	de
 148+ C1B3 C9                                   ret
 149+ C1B4              ;----------------------------------------------------------------------------------------------------------------------------------
 150+ C1B4 FE 00        MPD_DispQtyAtoDE:       cp	0
 151+ C1B6 28 30                                jr	z,.NoStock
 152+ C1B8 26 00                                ld h,0
 153+ C1BA 6F                                   ld l,a
 154+ C1BB 01 9C FF                             ld	bc,-100
 155+ C1BE CD D7 C1                             call	.NumLeadBlank1
 156+ C1C1 FE 20        .WasLead0:              cp      ' '
 157+ C1C3 20 09                                jr      nz,.NotHundredsZero
 158+ C1C5 0E F6                                ld	c,-10
 159+ C1C7 CD D7 C1                             call	.NumLeadBlank1
 160+ C1CA 0E FF                                ld	c,-1
 161+ C1CC 18 AE                                jr		MPD_Num1
 162+ C1CE 0E F6        .NotHundredsZero:       ld	c,-10
 163+ C1D0 CD 7C C1                             call	MPD_Num1
 164+ C1D3 0E FF                                ld	c,-1
 165+ C1D5 18 A5                                jr		MPD_Num1
 166+ C1D7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 167+ C1D9 3C           .NumLeadBlank2:	        inc	a
 168+ C1DA 09                                   add	hl,bc
 169+ C1DB 38 FC                                jr	c,.NumLeadBlank2
 170+ C1DD FE 30                                cp	'0'
 171+ C1DF 20 02                                jr	nz,.DontBlank
 172+ C1E1 3E 20        .Blank:                 ld	a,' '
 173+ C1E3 ED 42        .DontBlank:	            sbc	hl,bc
 174+ C1E5 12                                   ld	(de),a
 175+ C1E6 13                                   inc	de
 176+ C1E7 C9                                   ret
 177+ C1E8 3E 20        .NoStock:               ld	a,' '
 178+ C1EA 12                                   ld	(de),a
 179+ C1EB 13                                   inc	de
 180+ C1EC 12                                   ld	(de),a
 181+ C1ED 13                                   inc	de
 182+ C1EE 3E 2D                                ld	a,'-'
 183+ C1F0 12                                   ld	(de),a
 184+ C1F1 13                                   inc de
 185+ C1F2 C9                                   ret
 186+ C1F3              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ C1F3              MPD_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C1F3
   2++C1F3              ;">print_boilder_text hl = text structure, b = message count"
   3++C1F3              .BoilerTextLoop:
   4++C1F3 C5           	push		bc			; Save Message Count loop value
   5++C1F4 4E           	ld			c,(hl)		; Get Row into b
   6++C1F5 23           	inc			hl
   7++C1F6 46           	ld			b,(hl)		; Get Col into b
   8++C1F7 23           	inc			hl
   9++C1F8 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C1F9 23           	inc			hl
  11++C1FA 56           	ld			d,(hl)		; Get text address Hi into E
  12++C1FB 23           	inc			hl
  13++C1FC E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C1FD EB           	ex			de,hl		; now hl = address of text data
  15++C1FE 1E FF        	ld			e,txt_status_colour
  16++C200 C5           	push		bc
  17++C201 D1           	pop			de
  18++C202                  MMUSelectLayer1
  18++C202 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C206 CD C8 E0     	call		l1_print_at
  20++C209 E1           	pop			hl
  21++C20A C1           	pop			bc
  22++C20B 10 E6        	djnz		.BoilerTextLoop
  23++C20D C9           	ret
  24++C20E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 188+ C20E              ;----------------------------------------------------------------------------------------------------------------------------------
 189+ C20E 2A 28 9F     mktdisp_GetCash:            ld		hl,(Cash+2)
 190+ C211 EB                                   ex      de,hl
 191+ C212 DD 2A 26 9F                          ld      ix,(Cash)
 192+ C216 FD 21 75 C0                          ld		iy,mktdisp_cash_amount
 193+ C21A CD B3 C0                             call 	mktdisp_DispDEIXtoIY1DP
 194+ C21D FD E5                                push    IY
 195+ C21F D1                                   pop     de
 196+ C220 21 89 C0                             ld      hl,mktdisp_cash_UoM
 197+ C223 01 0B 00                             ld      bc,11
 198+ C226 ED B0                                ldir
 199+ C228 C9                                   ret
 200+ C229              ;----------------------------------------------------------------------------------------------------------------------------------
 201+ C229 11 00 00     mktdisp_GetCargo:   	ld      de,0
 202+ C22C DD 21 00 00                          ld      ix,0
 203+ C230 3A 2C 9F                             ld      a,(CargoRunningLoad)
 204+ C233 DD 6F                                ld      ixl,a
 205+ C235 FD 21 94 C0                          ld		iy,mktdisp_cargo_amount
 206+ C239 CD CA C0                             call 	mktdisp_DispDEIXtoIY
 207+ C23C FD E5                                push    IY
 208+ C23E D1                                   pop     de
 209+ C23F 13                                   inc     de
 210+ C240 21 A8 C0                             ld      hl,mktdisp_cargo_UoM
 211+ C243 01 0B 00                             ld      bc,11
 212+ C246 ED B0                                ldir
 213+ C248 C9                                   ret
 214+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 215+ C249 CD 29 C2     mktdisp_DisplayCargo:   call	mktdisp_GetCargo
 216+ C24C 21 94 C0                             ld		hl,mktdisp_cargo_amount
 217+ C24F 11 48 A8                             ld      de,mktdisp_cargo_position
 218+ C252                                      MMUSelectLayer1
 218+ C252 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 219+ C256 CD C8 E0                             call	l1_print_at
 220+ C259 C9                                   ret
 221+ C25A              ;----------------------------------------------------------------------------------------------------------------------------------
 222+ C25A CD 0E C2     mktdisp_DisplayCash:        call	mktdisp_GetCash
 223+ C25D 21 75 C0                             ld		hl,mktdisp_cash_amount
 224+ C260 11 48 B0                             ld      de,mktdisp_cash_position
 225+ C263                                      MMUSelectLayer1
 225+ C263 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 226+ C267 CD C8 E0                             call	l1_print_at
 227+ C26A C9                                   ret
 228+ C26B              ;----------------------------------------------------------------------------------------------------------------------------------
 229+ C26B              ; "A = stock item number"
 230+ C26B F5           PrintMktDispItem:       push     af
 231+ C26C 21 08 20                             ld      hl,mktdisp_position
 232+ C26F 57                                   ld      d,a
 233+ C270 1E 08                                ld      e,8
 234+ C272 ED 30                                mul
 235+ C274 53                                   ld      d,e
 236+ C275 1E 00                                ld      e,0
 237+ C277 19                                   add     hl,de
 238+ C278 22 41 C0                             ld      (mktdisp_cursor),hl
 239+ C27B EB                                   ex      hl,de
 240+ C27C 21 43 C0                             ld      hl,mktdisp_blank_line
 241+ C27F                                      MMUSelectLayer1
 241+ C27F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 242+ C283 CD C8 E0                             call	l1_print_at
 243+ C286 F1                                   pop     af
 244+ C287 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 245+ C28B FD 21 2D 9F                          ld      iy,CargoTonnes
 246+ C28F 1E 08                                ld		e,8
 247+ C291 57                                   ld		d,a
 248+ C292 ED 30                                mul
 249+ C294 DD 19                                add		ix,de				; Move down a row ix += a * 8
 250+ C296 16 00                                ld      d,0
 251+ C298 5F                                   ld      e,a
 252+ C299 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 253+ C29B              .GetName:               MMUSelectStockTable
 253+ C29B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 254+ C29F DD 7E 00                             ld		a,(ix+0)
 255+ C2A2 21 9F A5                             ld		hl,WordIdx
 256+ C2A5 CD 74 A2                             call	getTableText
 257+ C2A8 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 258+ C2AC                                      MMUSelectLayer1
 258+ C2AC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2B0 CD C8 E0                             call	l1_print_at
 260+ C2B3              .GetUom                 MMUSelectStockTable
 260+ C2B3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 261+ C2B7 DD 7E 07                             ld		a,(ix+7)
 262+ C2BA C6 2E                                add		a,mktdisp_UomOffset
 263+ C2BC 21 9F A5                             ld		hl,WordIdx
 264+ C2BF CD 74 A2                             call	getTableText
 265+ C2C2 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 266+ C2C6 1E 68                                ld		e,mktdisp_uom
 267+ C2C8                                      MMUSelectLayer1
 267+ C2C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 268+ C2CC CD C8 E0                             call	l1_print_at
 269+ C2CF              .GetPrice:              MMUSelectStockTable
 269+ C2CF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 270+ C2D3 DD 7E 02                             ld		a,(ix+2)
 271+ C2D6 11 34 C0                             ld		de,txt_mktdisp_amount
 272+ C2D9 CD 8D C1                             call	MPD_DispPriceAtoDE
 273+ C2DC 21 34 C0                             ld		hl,txt_mktdisp_amount
 274+ C2DF ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 275+ C2E3 1E 88                                ld		e,mktdisp_price
 276+ C2E5                                      MMUSelectLayer1
 276+ C2E5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 277+ C2E9 CD C8 E0                             call	l1_print_at
 278+ C2EC              .GetQty:                MMUSelectStockTable
 278+ C2EC ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 279+ C2F0 DD 7E 01                             ld		a,(ix+1)
 280+ C2F3 11 39 C0                             ld		de,txt_mktdisp_quantity
 281+ C2F6 CD B4 C1                             call	MPD_DispQtyAtoDE
 282+ C2F9 21 39 C0                             ld		hl,txt_mktdisp_quantity
 283+ C2FC ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 284+ C300 1E B0                                ld		e,mktdisp_Quantity
 285+ C302                                      MMUSelectLayer1
 285+ C302 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 286+ C306 CD C8 E0                             call	l1_print_at
 287+ C309 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 288+ C30C 11 3D C0                             ld      de,txt_mktdisp_cargo
 289+ C30F CD B4 C1                             call	MPD_DispQtyAtoDE
 290+ C312 21 3D C0                             ld      hl,txt_mktdisp_cargo
 291+ C315 ED 5B 41 C0                          ld      de,(mktdisp_cursor)
 292+ C319 1E E0                                ld      e,mktdisp_Cargo
 293+ C31B                                      MMUSelectLayer1
 293+ C31B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C31F CD C8 E0                             call	l1_print_at
 295+ C322 C9                                   ret
 296+ C323
 297+ C323              draw_mktdisp_prices_menu:InitNoDoubleBuffer
 297+ C323             >                            MMUSelectLayer1
 297+ C323 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 297+ C327 CD 80 E0    >                            call	l1_cls
 297+ C32A 3E 07       >                            ld		a,7
 297+ C32C CD 9B E0    >                            call	l1_attr_cls_to_a
 297+ C32F             >                            MMUSelectLayer2
 297+ C32F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C333 CD 09 E0    >                            call    asm_l2_double_buffer_off
 297+ C336 CD F3 E0    >                            call	l2_cls	; Get some space
 297+ C339             >                            MMUSelectSpriteBank
 297+ C339 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 297+ C33D CD 27 E4    >                            call    sprite_cls_cursors
 298+ C340 3E 20                                ld      a,$20
 299+ C342 32 5B 9A                             ld      (MenuIdMax),a
 300+ C345 01 01 01     .Drawbox:               ld		bc,$0101
 301+ C348 11 FD BE                             ld		de,$BEFD
 302+ C34B 3E C0                                ld		a,$C0
 303+ C34D                                      MMUSelectLayer2
 303+ C34D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 304+ C351 CD 20 E2                             call	l2_draw_box
 305+ C354 01 01 0A                             ld		bc,$0A01
 306+ C357 11 C0 FE                             ld		de,$FEC0
 307+ C35A CD 8A E2                             call	l2_draw_horz_line
 308+ C35D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 309+ C360 11 C0 50                             ld		de,$50C0
 310+ C363 CD 8A E2                             call	l2_draw_horz_line
 311+ C366 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 312+ C369 11 C0 18                             ld		de,$18C0
 313+ C36C CD 8A E2                             call	l2_draw_horz_line
 314+ C36F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 315+ C372 11 C0 28                             ld		de,$28C0
 316+ C375 CD 8A E2                             call	l2_draw_horz_line
 317+ C378 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 318+ C37B 11 C0 28                             ld		de,$28C0
 319+ C37E CD 8A E2                             call	l2_draw_horz_line
 320+ C381 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 321+ C384 11 C0 18                             ld		de,$18C0
 322+ C387 CD 8A E2                             call	l2_draw_horz_line
 323+ C38A 3A 45 9B     .StaticText:	        ld      a,(Galaxy)
 324+ C38D                                      MMUSelectGalaxyA
 324+ C38D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 325+ C390 3E 19                                ld		a,25
 326+ C392 CD 3C A7                             call	expandTokenToString
 327+ C395 CD 7A F6                             call	GetDigramGalaxySeed
 328+ C398 06 09                                ld		b,9
 329+ C39A 21 10 C0                             ld		hl,mktdisp_boiler_text
 330+ C39D CD F3 C1                             call	MPD_print_boiler_text
 331+ C3A0 3E 00        .DisplayPrices:         ld		a,0
 332+ C3A2 21 08 20                             ld		hl,mktdisp_position
 333+ C3A5 22 41 C0                             ld		(mktdisp_cursor),hl
 334+ C3A8 F5           .MarketLoop:	        push	af
 335+ C3A9 CD 6B C2                             call	PrintMktDispItem
 336+ C3AC F1                                   pop		af
 337+ C3AD 3C                                   inc		a
 338+ C3AE FE 11                                cp		17
 339+ C3B0 20 F6                                jr		nz,.MarketLoop
 340+ C3B2 21 64 C0     .DisCargo:              ld      hl,mktdisp_hold_level
 341+ C3B5 11 10 A8                             ld      de,$A810
 342+ C3B8                                      MMUSelectLayer1
 342+ C3B8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 343+ C3BC CD C8 E0                             call	l1_print_at
 344+ C3BF CD 49 C2                             call    mktdisp_DisplayCargo
 345+ C3C2 21 6C C0     .DisCash:               ld      hl,mktdisp_cash
 346+ C3C5 11 10 B0                             ld      de,$B010
 347+ C3C8                                      MMUSelectLayer1
 347+ C3C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 348+ C3CC CD C8 E0                             call	l1_print_at
 349+ C3CF CD 5A C2                             call    mktdisp_DisplayCash
 350+ C3D2 C9                                   ret
 351+ C3D3
 352+ C3D3
# file closed: ./Menus/market_prices_disp.asm
1271  C3D3
1272  C3D3              ; Bank 55
1273  C3D3
1274  C3D3                  SLOT    StockTableAddr
1275  C3D3                  PAGE    BankStockTable
1276  C3D3                  ORG     StockTableAddr
1277  E000                  INCLUDE "./Tables/stock_table.asm"
# file opened: ./Tables/stock_table.asm
   1+ E000
   2+ E000
   3+ E000              ;                       Can Buy
   4+ E000              ;                       computed row on screen considering what stock is visible
   5+ E000              ;                       Show
   6+ E000              ;                       Tech Level
   7+ E000              ;                       Price
   8+ E000              ;                       Name
   9+ E000              ;                       TypeId
  10+ E000
  11+ E000
  12+ E000              ;char name[16];
  13+ E000              ;current_quantity;
  14+ E000              ;current_price;
  15+ E000              ;base_price;
  16+ E000              ;eco_adjust;
  17+ E000              ;base_quantity;
  18+ E000              ;mask;
  19+ E000              ;units;
  20+ E000
  21+ E000              ;						nam	currr   CR  Ecadj  Qty  Msk  UoM
  22+ E000 20 00 00 13  StockFood			DB  32,  0, 0,  19, -2,      6, $01, 48
  22+ E004 FE 06 01 30
  23+ E008 21 00 00 14  StockTextiles		DB	33,  0, 0,  20, -1,     10, $03, 48
  23+ E00C FF 0A 03 30
  24+ E010 22 00 00 41  StockRadioactives	DB  34,  0, 0,  65, -3,      2, $07, 48
  24+ E014 FD 02 07 30
  25+ E018 23 00 00 28  StockSlaves			DB  35,  0, 0,  40, -5,    226, $1F, 48
  25+ E01C FB E2 1F 30
  26+ E020 24 00 00 53  StockLiquorWines	DB  36,  0, 0,  83, -5,    251, $0F, 48
  26+ E024 FB FB 0F 30
  27+ E028 25 00 00 C4  StockLuxuries		DB  37,  0, 0, 196,  8,     54, $03, 48
  27+ E02C 08 36 03 30
  28+ E030 26 00 00 EB  StockNarcotics		DB  38,  0, 0, 235, 29,      8, $78, 48
  28+ E034 1D 08 78 30
  29+ E038 19 00 00 9A  StockComputers		DB  25,  0, 0, 154, 14,     56, $03, 48
  29+ E03C 0E 38 03 30
  30+ E040 27 00 00 75  StockMachinery		DB  39,  0, 0, 117,  6,     40, $07, 48
  30+ E044 06 28 07 30
  31+ E048 28 00 00 4E  StockAlloys			DB  40,  0, 0,  78,  1,     17, $1F, 48
  31+ E04C 01 11 1F 30
  32+ E050 29 00 00 7C  StockFirearms   	DB  41,  0, 0, 124, 13,     29, $07, 48
  32+ E054 0D 1D 07 30
  33+ E058 2A 00 00 B0  StockFurs       	DB  42,  0, 0, 176, -9,    220, $3F, 48
  33+ E05C F7 DC 3F 30
  34+ E060 2B 00 00 20  StockMinerals   	DB  43,  0, 0,  32, -1,     53, $03, 48
  34+ E064 FF 35 03 30
  35+ E068 2C 00 00 61  StockGold       	DB  44,  0, 0,  97, -1,     66, $07, 49
  35+ E06C FF 42 07 31
  36+ E070 2D 00 00 AB  StockPlatinum   	DB  45,  0, 0, 171, -2,     55, $1F, 49
  36+ E074 FE 37 1F 31
  37+ E078 2E 00 00 2D  StockGemStones 		DB  46,  0, 0,  45, -1,    250, $0F, 50
  37+ E07C FF FA 0F 32
  38+ E080 2F 00 00 35  StockAlienItems		DB  47,  0, 0,  53, 15,    192, $07, 48
  38+ E084 0F C0 07 30
  39+ E088
  40+ E088
  41+ E088              ;.QQ23	\Prxs -> &3DA6 \  Market prices info
  42+ E088              ;\ base_price, gradient sign+5bits, base_quantity, mask, units 2bits
  43+ E088              ;13 82 06 01			EQUD &01068213 \ Food
  44+ E088              ;14 81 0A 03 		EQUD &030A8114 \ Textiles
  45+ E088              ;41 83 02 07 		EQUD &07028341 \ Radioactives
  46+ E088              ;28 85 E2 1F 		EQUD &1FE28528 \ Slaves
  47+ E088              ;53 85 FB 0F 		EQUD &0FFB8553 \ Liquor/Wines
  48+ E088              ;C4 08 36 03 		EQUD &033608C4 \ Luxuries
  49+ E088              ;EB 1D 08 78 		EQUD &78081DEB \ Narcotics
  50+ E088              ;9A 0E 38 03 		EQUD &03380E9A \ Computers
  51+ E088              ;75 06 28 07 		EQUD &07280675 \ Machinery
  52+ E088              ;4E 01 11 1F 		EQUD &1F11014E \ Alloys
  53+ E088              ;7C 0D 1D 07 		EQUD &071D0D7C \ Firearms
  54+ E088              ;B0 89 DC 3F 		EQUD &3FDC89B0 \ Furs
  55+ E088              ;20 81 35 03 		EQUD &03358120 \ Minerals
  56+ E088              ;61 A1 42 07 		EQUD &0742A161 \ Gold
  57+ E088              ;AB A2 37 1F 		EQUD &1F37A2AB \ Platinum
  58+ E088              ;2D C1 FA 0F 		EQUD &0FFAC12D \ Gem-Stones
  59+ E088              ;35 0F C0 07 		EQUD &07C00F35 \ Alien Items
  60+ E088
  61+ E088
  62+ E088
  63+ E088
  64+ E088
  65+ E088              AlienItemsIndex		    equ 16
  66+ E088              StockListLen		    equ	17
  67+ E088
  68+ E088 00 E0 08 E0  StockItemTable		    DW 	StockFood,  StockTextiles,	   StockRadioactives
  68+ E08C 10 E0
  69+ E08E 18 E0 20 E0                          DW 	StockSlaves, StockLiquorWines, StockLuxuries
  69+ E092 28 E0
  70+ E094 30 E0 38 E0                          DW 	StockNarcotics, StockComputers, StockMachinery
  70+ E098 40 E0
  71+ E09A 48 E0 50 E0                          DW	StockAlloys, StockFirearms, StockFurs
  71+ E09E 58 E0
  72+ E0A0 60 E0 68 E0                          DW  StockMinerals, StockGold, StockPlatinum
  72+ E0A4 70 E0
  73+ E0A6 78 E0 80 E0                          DW  StockGemStones, StockAlienItems
  74+ E0AA
  75+ E0AA 06 FF        generate_stock_market:  ld		b,$FF				; so the first iteration puts it at 0
  76+ E0AC CD 90 9F                             call	copy_galaxy_to_system
  77+ E0AF DD 21 F8 DF                          ld		ix,StockFood-8		; start 8 bytes before index as first add will shift
  78+ E0B3 11 08 00     .generate_stock_loop:   ld		de,8
  79+ E0B6 DD 19                                add		ix,de				; Move down a row
  80+ E0B8 04                                   inc		b
  81+ E0B9 DD 4E 03     .CalcPrice:	            ld		c,(ix+3);			; c = base price
  82+ E0BC 3A CE 9A                             ld		a,(RandomMarketSeed)
  83+ E0BF DD A6 06                             and		(ix+6)				; and with market mask
  84+ E0C2 81                                   add		a,c
  85+ E0C3 4F                                   ld		c,a					; c = base + rand & market mask
  86+ E0C4 3A DA 9A                             ld		a,(DisplayEcononmy)	; d= economy
  87+ E0C7 57                                   ld		d,a
  88+ E0C8 DD 7E 04                             ld		a,(ix+4)
  89+ E0CB 5F                                   ld		e,a					; e  = economy adjust
  90+ E0CC CB 7B                                bit		7,e
  91+ E0CE 20 04                                jr		nz,.PosMul			; it could be negative and we onnly want
  92+ E0D0              ;.NegMul:						; e reg from mulitply not a 2'c 16 bit word
  93+ E0D0 7B                                   ld		a,e
  94+ E0D1 ED 44                                neg
  95+ E0D3 5F                                   ld		e,a
  96+ E0D4              .PosMul:
  97+ E0D4 7B                                   ld		a,e
  98+ E0D5 ED 44                                neg
  99+ E0D7 5F                                   ld		e,a
 100+ E0D8 ED 30                                mul
 101+ E0DA 79                                   ld		a,c
 102+ E0DB 83                                   add		a,e
 103+ E0DC CB 27                                sla		a
 104+ E0DE CB 27                                sla		a					; Multply price by 4
 105+ E0E0 DD 77 02                             ld		(ix+2),a			; Now have set price
 106+ E0E3 DD 4E 05     .CalcQty:	            ld		c,(ix+5);			; c = base price
 107+ E0E6 3A CE 9A                             ld		a,(RandomMarketSeed)
 108+ E0E9 DD A6 06                             and		(ix+6)				; and with market mask
 109+ E0EC 81                                   add		a,c
 110+ E0ED 4F                                   ld		c,a					; c = base + rand & market mask
 111+ E0EE 3A DA 9A                             ld		a,(DisplayEcononmy)	; d= economy
 112+ E0F1 57                                   ld		d,a
 113+ E0F2 DD 7E 04                             ld		a,(ix+4)
 114+ E0F5 5F                                   ld		e,a					; e  = economy adjust
 115+ E0F6 CB 7B                                bit		7,e
 116+ E0F8 20 04                                jr		nz,.PosQtyMul			; it could be negative and we onnly want
 117+ E0FA 7B           .NegQtyMul:				ld		a,e		; e reg from mulitply not a 2'c 16 bit word
 118+ E0FB ED 44                                neg
 119+ E0FD 5F                                   ld		e,a
 120+ E0FE 7B           .PosQtyMul:             ld		a,e
 121+ E0FF ED 44                                neg
 122+ E101 5F                                   ld		e,a
 123+ E102 ED 30                                mul
 124+ E104 79                                   ld		a,c
 125+ E105 93                                   sub		e
 126+ E106 DD 77 01                             ld		(ix+1),a			; Now have set quanity
 127+ E109 78                                   ld		a,b
 128+ E10A FE 10                                cp		AlienItemsIndex
 129+ E10C 20 A5                                jr		nz,.generate_stock_loop
 130+ E10E AF                                   xor		a
 131+ E10F DD 77 01                             ld		(ix+1),a			; Now have set quanity of alient items to always 0 in stock
 132+ E112 C9                                   ret
 133+ E113
# file closed: ./Tables/stock_table.asm
1278  E113
1279  E113              ; Bank 57
1280  E113
1281  E113                  SLOT    LAYER2Addr
1282  E113                  PAGE    BankLAYER2
1283  E113                  ORG     LAYER2Addr
1284  E000
1285  E000                  INCLUDE "./Layer2Graphics/layer2_bank_select.asm"
# file opened: ./Layer2Graphics/layer2_bank_select.asm
   1+ E000
   2+ E000 00           varL2_BANK_SELECTED			 DB	0
   3+ E001 00           varL2_BUFFER_MODE            DB 0
   4+ E002 00           varL2_ACCESS_MODE            DB 0
   5+ E003
   6+ E003 3E 08        asm_l2_double_buffer_on:    ld      a,8
   7+ E005 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
   8+ E008 C9                                       ret
   9+ E009
  10+ E009 AF           asm_l2_double_buffer_off:   xor     a
  11+ E00A 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
  12+ E00D C9                                       ret
  13+ E00E
  14+ E00E 01 3B 12     asm_disable_l2_readwrite:   ld      bc, IO_LAYER2_PORT
  15+ E011 ED 70                                    in      (c)
  16+ E013 32 02 E0                                 ld      (varL2_ACCESS_MODE),a
  17+ E016 E6 FA                                    and     LAYER2_DISABLE_MEM_ACCESS
  18+ E018 ED 79                                    out     (c),a
  19+ E01A C9                                       ret
  20+ E01B
  21+ E01B 3A 02 E0     asm_restore_l2_readwrite:   ld      a,(varL2_ACCESS_MODE)
  22+ E01E E6 05                                    and     LAYER2_READ_WRITE_MASK
  23+ E020 57                                       ld      d,a
  24+ E021 01 3B 12                                 ld      bc, IO_LAYER2_PORT
  25+ E024 ED 70                                    in      (c)
  26+ E026 32 02 E0                                 ld      (varL2_ACCESS_MODE),a
  27+ E029 A2                                       and     d
  28+ E02A ED 79                                    out     (c),a
  29+ E02C C9                                       ret
  30+ E02D
  31+ E02D 01 3B 12     asm_enable_l2_readwrite:    ld      bc, IO_LAYER2_PORT
  32+ E030 ED 70                                    in      (c)
  33+ E032 F6 05                                    or      LAYER2_READ_WRITE_MASK
  34+ E034 ED 79                                    out     (c),a
  35+ E036 C9                                       ret
  36+ E037
  37+ E037              ; "asm_l2_bank_select"
  38+ E037              ; " a = sepecific bank mask value to select, does not set varL2_BANK_SELECTED"
  39+ E037 57           asm_l2_bank_select:         ld      d,a
  40+ E038 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  41+ E03B F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK
  42+ E03D B2                                       or      d; | LAYER2_SHADOW_SCREEN_MASK
  43+ E03E 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  44+ E041 ED 79                                    out 	(c),a
  45+ E043 C9                                       ret
  46+ E044              ;  "asm_l2_bank_select a = sepecific bank number to select, dsets varL2_BANK_SELECTED"
  47+ E044 32 00 E0     asm_l2_bank_n_select:       ld		(varL2_BANK_SELECTED),a
  48+ E047 FE 00                                    cp		0
  49+ E049 20 04                                    jr 		nz,.nottopbank
  50+ E04B 3E 00        .topbank:                   ld		a,LAYER2_SHIFTED_SCREEN_TOP
  51+ E04D 18 E8                                    jr		asm_l2_bank_select
  52+ E04F FE 01        .nottopbank:                cp		1
  53+ E051 20 04                                    jr 		nz,.notmiddlebank
  54+ E053 3E 40        .middlebank:                ld		a,LAYER2_SHIFTED_SCREEN_MIDDLE
  55+ E055 18 E0                                    jr		asm_l2_bank_select
  56+ E057 3E 80        .notmiddlebank:             ld		a,LAYER2_SHIFTED_SCREEN_BOTTOM ; default to bottom
  57+ E059 18 DC                                    jr		asm_l2_bank_select
  58+ E05B              		; Note no ret as its handled by above routines
  59+ E05B
  60+ E05B              ; "asm_l2_row_bank_select"
  61+ E05B              ; "A (unsinged) = y row of pixel line from top, sets the bank to top middle or bottom and adjusts a reg to row memory address"
  62+ E05B              ; "Could optimise by holding the previous bank but given its only an out statement it may not save T states at all"
  63+ E05B              ; "destroys BC call de is safe a = adjusted poke pixel row"
  64+ E05B FE 40        asm_l2_row_bank_select:     cp 		64			; row < 64?
  65+ E05D 30 11                                    jr 		nc, .l2rowGTE64
  66+ E05F 08           .l2rowLT64:                 ex		af,af'
  67+ E060                                          ;ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP | LAYER2_SHADOW_SCREEN_MASK
  68+ E060 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  69+ E063 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  70+ E065 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  71+ E068 ED 79                                    out 	(c),a
  72+ E06A AF                                       xor		a						; set a to 0
  73+ E06B 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  74+ E06E 08                                       ex		af,af'					; return pixel poke unharmed
  75+ E06F C9                                       ret
  76+ E070 FE 80        .l2rowGTE64:                cp 		128
  77+ E072 30 14                                    jr 		nc, .l2rowGTE128
  78+ E074 08           .l2row64to127:              ex		af,af'
  79+ E075                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE | LAYER2_SHADOW_SCREEN_MASK
  80+ E075 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  81+ E078 F6 43                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  82+ E07A 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  83+ E07D ED 79                                    out 	(c),a
  84+ E07F 3E 01                                    ld		a,1						; set a to 1
  85+ E081 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  86+ E084 08                                       ex		af,af'
  87+ E085 D6 40                                    sub		64
  88+ E087 C9                                       ret
  89+ E088 08           .l2rowGTE128:               ex		af,af'
  90+ E089                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM | LAYER2_SHADOW_SCREEN_MASK
  91+ E089 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  92+ E08C F6 83                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  93+ E08E
  94+ E08E 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  95+ E091 ED 79                                    out 	(c),a
  96+ E093 3E 01                                    ld		a,1						; set a to 2
  97+ E095 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  98+ E098 08                                       ex		af,af'
  99+ E099 D6 80                                    sub		128
 100+ E09B C9                                       ret
 101+ E09C
# file closed: ./Layer2Graphics/layer2_bank_select.asm
1286  E09C                  INCLUDE "./Layer2Graphics/layer2_cls.asm"
# file opened: ./Layer2Graphics/layer2_cls.asm
   1+ E09C
   2+ E09C 00           l2_cls_byte	            DB 0
   3+ E09D              ; ">DMA Command BLOCK"
   4+ E09D
   5+ E09D 83 C3 C7 CB  l2_fill                 DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E0A1 7D
   6+ E0A2 9C E0        l2_fill_astrt           DW l2_cls_byte
   7+ E0A4 00 40        l2_fill_length          DB $00,$40
   8+ E0A6 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   9+ E0A9 00 00        l2_fill_bstrt           DB $00,$00
  10+ E0AB 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  11+ E0AF              l2_fill_cmd_len	        EQU $ - l2_fill
  12+ E0AF
  13+ E0AF              l2_cls_dma_bank:
  14+ E0AF              ; ">l2_cls_dma_bank"
  15+ E0AF              ; ">sets a bank to"
  16+ E0AF 32 9C E0     .set_colour:            ld (l2_cls_byte),a
  17+ E0B2 21 9D E0     .write_dma:             ld hl, l2_fill
  18+ E0B5 06 12                                ld b, l2_fill_cmd_len
  19+ E0B7 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  20+ E0B9 ED B3                                otir
  21+ E0BB C9                                   ret
  22+ E0BC
  23+ E0BC 3E 00        l2_set_color_upper2:    ld      a,0
  24+ E0BE CD 5B E0                             call asm_l2_row_bank_select
  25+ E0C1 3A 9C E0                             ld      a,(l2_cls_byte)
  26+ E0C4 CD AF E0                             call l2_cls_dma_bank
  27+ E0C7 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  28+ E0C9 CD 5B E0                             call asm_l2_row_bank_select
  29+ E0CC 3A 9C E0                             ld      a,(l2_cls_byte)
  30+ E0CF CD AF E0                             call l2_cls_dma_bank
  31+ E0D2 C9                                   ret
  32+ E0D3
  33+ E0D3
  34+ E0D3 3E 00        l2_cls_upper_two_thirds:ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  35+ E0D5 CD 5B E0                             call asm_l2_row_bank_select
  36+ E0D8 3E E3                                ld 	a,COLOUR_TRANSPARENT
  37+ E0DA CD AF E0                             call l2_cls_dma_bank
  38+ E0DD 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  39+ E0DF CD 5B E0                             call asm_l2_row_bank_select
  40+ E0E2 3E E3                                ld 	a,COLOUR_TRANSPARENT
  41+ E0E4 CD AF E0                             call l2_cls_dma_bank
  42+ E0E7 C9                                   ret
  43+ E0E8
  44+ E0E8 3E 80        l2_cls_lower_third:     ld a,128							; pretend we are plotting pixel on row 64 to force mid selection
  45+ E0EA CD 5B E0                             call asm_l2_row_bank_select
  46+ E0ED 3E E3                                ld 	a,COLOUR_TRANSPARENT
  47+ E0EF CD AF E0                             call l2_cls_dma_bank
  48+ E0F2 C9                                   ret
  49+ E0F3
  50+ E0F3 CD D3 E0     l2_cls:                 call l2_cls_upper_two_thirds
  51+ E0F6 CD E8 E0                             call l2_cls_lower_third
  52+ E0F9 C9                                   ret
  53+ E0FA
# file closed: ./Layer2Graphics/layer2_cls.asm
1287  E0FA                  INCLUDE "./Layer2Graphics/layer2_initialise.asm"
# file opened: ./Layer2Graphics/layer2_initialise.asm
   1+ E0FA
   2+ E0FA ED 91 12 08  l2_initialise:          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
   3+ E0FE ED 91 13 0B                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
   4+ E102 ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
   5+ E106 C9                                   ret
   6+ E107
# file closed: ./Layer2Graphics/layer2_initialise.asm
1288  E107                  INCLUDE "./Layer2Graphics/l2_flip_buffers.asm"
# file opened: ./Layer2Graphics/l2_flip_buffers.asm
   1+ E107              l2_flip_buffers:        GetNextReg LAYER2_RAM_PAGE_REGISTER
   1+ E107 C5          >            push bc
   1+ E108 01 3B 24    >                ld bc,$243B
   1+ E10B 3E 12       >                    ld a,LAYER2_RAM_PAGE_REGISTER
   1+ E10D ED 79       >                    out (c),a
   1+ E10F 04          >                    inc b
   1+ E110 ED 78       >                in a,(c)
   1+ E112 C1          >            pop bc
   2+ E113 57                                   ld      d,a
   3+ E114                                      GetNextReg LAYER2_RAM_SHADOW_REGISTER
   3+ E114 C5          >            push bc
   3+ E115 01 3B 24    >                ld bc,$243B
   3+ E118 3E 13       >                    ld a,LAYER2_RAM_SHADOW_REGISTER
   3+ E11A ED 79       >                    out (c),a
   3+ E11C 04          >                    inc b
   3+ E11D ED 78       >                in a,(c)
   3+ E11F C1          >            pop bc
   4+ E120 5F                                   ld      e,a
   5+ E121 ED 92 12                             nextreg LAYER2_RAM_PAGE_REGISTER, a
   6+ E124 7A                                   ld      a,d
   7+ E125 ED 92 13                             nextreg LAYER2_RAM_SHADOW_REGISTER, a
   8+ E128 C9                                   ret
   9+ E129
# file closed: ./Layer2Graphics/l2_flip_buffers.asm
1289  E129                  INCLUDE "./Layer2Graphics/layer2_plot_pixel.asm"
# file opened: ./Layer2Graphics/layer2_plot_pixel.asm
   1+ E129              l2_plot_pixel:
   2+ E129              ; ">l2_plot_pixel b= row number, c = column number, a = pixel col"
   3+ E129 F5           	push    af
   4+ E12A 78               ld      a,b
   5+ E12B              l2_pp_row_valid:
   6+ E12B                  JumpIfAGTENusng ScreenHeight,l2_pp_dont_plot
   6+ E12B FE C0       >                        cp     ScreenHeight
   6+ E12D D2 3B E1    >                        jp		nc,l2_pp_dont_plot
   7+ E130 C5           	push    bc								; bank select destroys bc so need to save it
   8+ E131              ;	ld      a,b
   9+ E131 CD 5B E0     	call    asm_l2_row_bank_select
  10+ E134 C1           	pop     bc
  11+ E135 47           	ld      b,a
  12+ E136 60           	ld      h,b								; hl now holds ram address after bank select
  13+ E137 69           	ld      l,c
  14+ E138 F1           	pop     af								; a = colour to plott
  15+ E139 77           	ld      (hl),a
  16+ E13A C9           	ret
  17+ E13B              l2_pp_dont_plot:
  18+ E13B F1               pop     af
  19+ E13C C9               ret
  20+ E13D
  21+ E13D              l2_plot_pixel_no_bank:
  22+ E13D              ; ">l2_plot_pixel_no_bank b= row number, c = column number, a = pixel col"
  23+ E13D              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  24+ E13D E5           	push 	hl
  25+ E13E 60           	ld 		h,b								; hl now holds ram address after bank select
  26+ E13F 69           	ld 		l,c
  27+ E140 77           	ld 		(hl),a
  28+ E141 E1           	pop		hl
  29+ E142 C9           	ret
  30+ E143
  31+ E143              l2_plot_pixel_y_test:
  32+ E143 F5           	push	af
  33+ E144 78           	ld		a,b
  34+ E145 FE C0        	cp		192
  35+ E147 30 03        	jr		nc,.clearup
  36+ E149 F1           	pop		af
  37+ E14A 18 DD        	jr		l2_plot_pixel
  38+ E14C              .clearup:
  39+ E14C F1           	pop		af
  40+ E14D C9           	ret
  41+ E14E
  42+ E14E              l2_point_pixel_y_safe:	MACRO
  43+ E14E ~            						push	hl
  44+ E14E ~            						push	bc
  45+ E14E ~            						call	l2_plot_pixel
  46+ E14E ~            						pop		bc
  47+ E14E ~            						pop		hl
  48+ E14E              						ENDM
  49+ E14E
# file closed: ./Layer2Graphics/layer2_plot_pixel.asm
1290  E14E                  INCLUDE "./Layer2Graphics/layer2_print_character.asm"
# file opened: ./Layer2Graphics/layer2_print_character.asm
   1+ E14E
   2+ E14E              l2_print_chr_at:
   3+ E14E              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
   4+ E14E              ; "Need a version that also prints absence of character"
   5+ E14E 7A           	ld		a,d
   6+ E14F FE 20        	cp		32
   7+ E151 38 3F        	jr		c,.InvalidCharacter		; Must be between 32 and 127
   8+ E153 FE 7F        	cp		127
   9+ E155 30 3B        	jr		nc,.InvalidCharacter
  10+ E157              .ValidCharater:
  11+ E157 26 00        	ld		h,0
  12+ E159 6A           	ld		l,d
  13+ E15A 29           	add		hl,hl						; * 2
  14+ E15B 29           	add		hl,hl						; * 4
  15+ E15C 29           	add		hl,hl						; * 8 to get byte address
  16+ E15D ED 34 00 3C  	add		hl,charactersetaddr			; hl = address of rom char
  17+ E161 04           	inc		b							; start + 1 pixel x and y as we only print 7x7
  18+ E162 23           	inc		hl							; skip first byte
  19+ E163 16 07        	ld		d,7
  20+ E165              .PrintCharLoop:
  21+ E165 D5           	push	de
  22+ E166 7E           	ld		a,(hl)
  23+ E167 FE 00        	cp		0
  24+ E169 28 21        	jr		z,.NextRowNoBCPop
  25+ E16B              .PrintARow:
  26+ E16B C5           	push	bc							; save row col
  27+ E16C 16 07        	ld		d,7							; d is loop row number now
  28+ E16E              .PrintPixelLoop:
  29+ E16E 0C           	inc		c							; we start at col 1 not 0 so can move inc here
  30+ E16F              .PrintTheRow:
  31+ E16F CB 27        	sla		a							; scroll char 1 pixel as we read from bit 7
  32+ E171 F5           	push	af							; save character byte
  33+ E172 CB 7F        	bit		7,a							; If left most pixel set then plot
  34+ E174 20 04        	jr		nz,.PixelToPrint
  35+ E176              .NoPixelToPrint:
  36+ E176 3E E3        	ld		a,$E3
  37+ E178 18 01        	jr		.HaveSetPixelColour
  38+ E17A              .PixelToPrint:
  39+ E17A 7B           	ld		a,e							; Get Colour
  40+ E17B              .HaveSetPixelColour
  41+ E17B E5           	push	hl
  42+ E17C              ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
  43+ E17C              .BankOnFirstOnly:
  44+ E17C F5           	push	af
  45+ E17D 7A           	ld		a,d
  46+ E17E FE 07        	cp		7
  47+ E180 28 11        	jr		z,.PlotWithBank
  48+ E182              .PlotNoBank:
  49+ E182 F1           	pop		af
  50+ E183 60           	ld 		h,b								; hl now holds ram address after bank select
  51+ E184 69           	ld 		l,c
  52+ E185 77           	ld 		(hl),a
  53+ E186              .IterateLoop:
  54+ E186              ;	pop		bc
  55+ E186 E1           	pop		hl
  56+ E187 F1           	pop		af							; a= current byte shifted
  57+ E188 15           	dec		d						 	; do dec after inc as we amy
  58+ E189 20 E3        	jr		nz,.PrintPixelLoop
  59+ E18B              .NextRow:
  60+ E18B C1           	pop		bc							; Current Col Row
  61+ E18C              .NextRowNoBCPop:
  62+ E18C D1           	pop		de							; d= row loop
  63+ E18D 04           	inc		b							; Down 1 row
  64+ E18E 23           	inc		hl							; Next character byte
  65+ E18F 15           	dec		d							; 1 done now
  66+ E190 20 D3        	jr		nz,.PrintCharLoop
  67+ E192              .InvalidCharacter:
  68+ E192 C9           	ret
  69+ E193              .PlotWithBank:
  70+ E193 F1           	pop		af
  71+ E194 CD 29 E1     	call	l2_plot_pixel				; This will shift bc to poke row
  72+ E197 18 ED        	jr		.IterateLoop
  73+ E199
  74+ E199              l2_print_at:
  75+ E199              ; "l2_print_at bc= colrow, hl = addr of message, e = colour"
  76+ E199              ; "No error trapping, if there is no null is will just cycle on the line"
  77+ E199 7E           	ld	a,(hl)							; Return if empty string
  78+ E19A FE 00        	cp	0
  79+ E19C C8           	ret	z
  80+ E19D E5           	push	hl
  81+ E19E D5           	push	de
  82+ E19F C5           	push	bc
  83+ E1A0 57           	ld		d,a							; bc = pos, de = char and colour
  84+ E1A1 CD 4E E1     	call 	l2_print_chr_at
  85+ E1A4 C1           	pop		bc
  86+ E1A5 D1           	pop		de
  87+ E1A6 E1           	pop		hl
  88+ E1A7              .Move8Pixlestoright:
  89+ E1A7 08           	ex		af,af'
  90+ E1A8 79           	ld		a,c
  91+ E1A9 C6 08        	add		8
  92+ E1AB 4F           	ld		c,a
  93+ E1AC 08           	ex		af,af'
  94+ E1AD 23           	inc		hl
  95+ E1AE 18 E9        	jr		l2_print_at					; Just loop until 0 found
  96+ E1B0
  97+ E1B0
  98+ E1B0              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
  99+ E1B0              ; "Need a version that also prints absence of character"
 100+ E1B0              ; removed blank line optimisation as we need spaces printed
 101+ E1B0 7A           l2_print_7chr_at:       ld		a,d
 102+ E1B1 FE 1F                                cp		31
 103+ E1B3 38 3D                                jr		c,.InvalidCharacter		; Must be between 32 and 127
 104+ E1B5 FE 7F                                cp		127
 105+ E1B7 30 39                                jr		nc,.InvalidCharacter
 106+ E1B9 26 00        .ValidCharater:         ld		h,0
 107+ E1BB 6A                                   ld		l,d
 108+ E1BC 29                                   add		hl,hl						; * 2
 109+ E1BD 29                                   add		hl,hl						; * 4
 110+ E1BE 29                                   add		hl,hl						; * 8 to get byte address
 111+ E1BF ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
 112+ E1C3 04                                   inc		b							; start + 1 pixel x and y as we only print 7x7
 113+ E1C4 23                                   inc		hl							; skip first byte
 114+ E1C5 16 07                                ld		d,7
 115+ E1C7 D5           .PrintCharLoop:         push	de
 116+ E1C8 7E                                   ld		a,(hl)
 117+ E1C9                                      ;cp		0
 118+ E1C9                                      ;jr		z,.NextRowNoBCPop
 119+ E1C9 C5           .PrintARow:             push	bc							; save row col
 120+ E1CA 16 06                                ld		d,6							; d is loop row number now
 121+ E1CC 0C           .PrintPixelLoop:        inc		c							; we start at col 1 not 0 so can move inc here
 122+ E1CD 28 1C                                jr		z,.NextRow
 123+ E1CF CB 27                                sla		a							; scroll char 1 pixel as we read from bit 7
 124+ E1D1 F5                                   push	af							; save character byte
 125+ E1D2 CB 7F                                bit		7,a							; If left most pixel set then plot
 126+ E1D4 20 04                                jr		nz,.PixelToPrint
 127+ E1D6 3E E3        .NoPixelToPrint:        ld		a,$E3
 128+ E1D8 18 01                                jr		.HaveSetPixelColour
 129+ E1DA 7B           .PixelToPrint:          ld		a,e							; Get Colour
 130+ E1DB E5           .HaveSetPixelColour		push	hl
 131+ E1DC                                      ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
 132+ E1DC F5           .BankOnFirstOnly:       push	af
 133+ E1DD 7A                                   ld		a,d
 134+ E1DE FE 06                                cp		6
 135+ E1E0 28 11                                jr		z,.PlotWithBank
 136+ E1E2 F1           .PlotNoBank:            pop		af
 137+ E1E3 60                                   ld 		h,b								; hl now holds ram address after bank select
 138+ E1E4 69                                   ld 		l,c
 139+ E1E5 77                                   ld 		(hl),a
 140+ E1E6              .IterateLoop:	        ;	pop		bc
 141+ E1E6 E1                                   pop		hl
 142+ E1E7 F1                                   pop		af							; a= current byte shifted
 143+ E1E8 15                                   dec		d						 	; do dec after inc as we amy
 144+ E1E9 20 E1                                jr		nz,.PrintPixelLoop
 145+ E1EB C1           .NextRow:               pop		bc							; Current Col Row
 146+ E1EC D1           .NextRowNoBCPop:	    pop		de							; d= row loop
 147+ E1ED 04                                   inc		b							; Down 1 row
 148+ E1EE 23                                   inc		hl							; Next character byte
 149+ E1EF 15                                   dec		d							; 1 done now
 150+ E1F0 20 D5                                jr		nz,.PrintCharLoop
 151+ E1F2 C9           .InvalidCharacter:      ret
 152+ E1F3 F1           .PlotWithBank:          pop		af
 153+ E1F4 CD 29 E1                             call	l2_plot_pixel				; This will shift bc to poke row
 154+ E1F7 18 ED                                jr		.IterateLoop
 155+ E1F9
 156+ E1F9              ; "l2_print_7at bc= colrow, hl = addr of message, e = colour"
 157+ E1F9              ; "No error trapping, if there is no null is will just cycle on the line"
 158+ E1F9 7E           l2_print_7at:           ld	a,(hl)							; Return if empty string
 159+ E1FA FE 00                                cp	0
 160+ E1FC C8                                   ret	z
 161+ E1FD E5                                   push	hl
 162+ E1FE D5                                   push	de
 163+ E1FF C5                                   push	bc
 164+ E200 57                                   ld		d,a							; bc = pos, de = char and colour
 165+ E201 CD B0 E1                             call 	l2_print_7chr_at
 166+ E204 C1                                   pop		bc
 167+ E205 D1                                   pop		de
 168+ E206 E1                                   pop		hl
 169+ E207 08           .Move7Pixlestoright:	ex		af,af'
 170+ E208 79                                   ld		a,c
 171+ E209 C6 07                                add		7
 172+ E20B 4F                                   ld		c,a
 173+ E20C 08                                   ex		af,af'
 174+ E20D 23                                   inc		hl
 175+ E20E 18 E9                                jr		l2_print_7at					; Just loop until 0 found
 176+ E210
 177+ E210
# file closed: ./Layer2Graphics/layer2_print_character.asm
1291  E210                  INCLUDE "./Layer2Graphics/layer2_draw_box.asm"
# file opened: ./Layer2Graphics/layer2_draw_box.asm
   1+ E210              ; "l2_draw_thick_box bc=rowcol, de=heightwidth h=color"
   2+ E210              ; TODO DMA Optimise
   3+ E210 C5 D5 E5     l2_draw_fill_box:       push    bc,,de,,hl
   4+ E213 53                                   ld      d,e
   5+ E214 5C                                   ld      e,h
   6+ E215 CD 8A E2                             call    l2_draw_horz_line           ; "bc = left side row,col, d = length, e = color"
   7+ E218 E1 D1 C1                             pop     bc,,de,,hl
   8+ E21B 04                                   inc     b
   9+ E21C 15                                   dec     d
  10+ E21D C8                                   ret     z
  11+ E21E 18 F0                                jr      l2_draw_fill_box
  12+ E220
  13+ E220              ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
  14+ E220 C5 D5 F5     l2_draw_box:            push	bc,,de,,af
  15+ E223 53                                   ld		d,e
  16+ E224 5F                                   ld		e,a
  17+ E225 14                                   inc		d
  18+ E226 CD 8A E2                             call	l2_draw_horz_line
  19+ E229 F1 D1 C1                             pop		bc,,de,,af
  20+ E22C C5 D5 F5     .bottomhorzline:	    push	bc,,de,,af
  21+ E22F 67                                   ld		h,a							;save color whilst b = row + height
  22+ E230 78                                   ld		a,b
  23+ E231 82                                   add		a,d
  24+ E232 47                                   ld		b,a
  25+ E233 53                                   ld		d,e							; d = width
  26+ E234 14                                   inc		d							; Extra pixel for width
  27+ E235 5C                                   ld		e,h							; e = colour
  28+ E236 CD 8A E2                             call	l2_draw_horz_line
  29+ E239 F1 D1 C1                             pop		bc,,de,,af
  30+ E23C C5 D5 F5     .leftvertline:          push	bc,,de,,af
  31+ E23F 04                                   inc		b							; save 2 pixles
  32+ E240 15                                   dec		d
  33+ E241 5F                                   ld		e,a							; e = color
  34+ E242 CD DB E2                             call	l2_draw_vert_line
  35+ E245 F1 D1 C1                             pop		bc,,de,,af
  36+ E248 04           .rightvertline:         inc		b							; save 2 pixles
  37+ E249 15                                   dec		d
  38+ E24A 67                                   ld		h,a							;save color whilst c = col + width
  39+ E24B 79                                   ld		a,c
  40+ E24C 83                                   add		a,e
  41+ E24D 4F                                   ld		c,a
  42+ E24E 5C                                   ld		e,h							; e = color
  43+ E24F CD DB E2                             call	l2_draw_vert_line
  44+ E252 C9                                   ret
  45+ E253
# file closed: ./Layer2Graphics/layer2_draw_box.asm
1292  E253                  INCLUDE "./Layer2Graphics/asm_l2_plot_horizontal.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_horizontal.asm
   1+ E253
   2+ E253              ;; NOTE DMA is little endian
   3+ E253 00           l2_horz_pixel           DB 0
   4+ E254
   5+ E254 83 C3 C7 CB  l2_horz_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E258 7D
   6+ E259 53 E2        l2_horz_colr            DW l2_horz_pixel
   7+ E25B 00           l2_horz_lenlo           DB 0
   8+ E25C 00           l2_horz_lenhi           DB 0
   9+ E25D 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  10+ E260 00 00        l2_horz_target          DB $00, $00
  11+ E262 CF 87                                DB DMA_LOAD, DMA_ENABLE
  12+ E264              l2_horz_cmd_len	        EQU $ - l2_horz_line
  13+ E264
  14+ E264
  15+ E264              ; "l2_draw_horz_dma"
  16+ E264              ; "plot at bc for length d colour e using dma, assumes bank already selected"
  17+ E264 7B           l2_draw_horz_dma:       ld		a,e                                               ; T=4      ;
  18+ E265 32 53 E2                             ld		(l2_horz_pixel),a                                 ; T=13     ;
  19+ E268 5A                                   ld      e,d ; saved 3 t states ld		a,d                                               ; T=4      ; e=d   4
  20+ E269 16 00                                ld      d,0; saved 3 t states ld 		(l2_horz_lenlo),a                                 ; T=13     ; d = 0  7
  21+ E26B ED 53 5B E2                          ld      (l2_horz_lenlo),de; saved 3 t states xor 	a                                                 ; T=4      ; t 20  31
  22+ E26F                                      ; saved 3 t states ld ld 		(l2_horz_lenhi),a                                 ; T=13     ;
  23+ E26F                                    ; saved 4 t states  ld		h,b                           ;          ;
  24+ E26F                                    ; saved 4 t states  ld		l,c                           ;          ;
  25+ E26F ED 43 60 E2                          ld      (l2_horz_target),bc ; saved 4 t states  was , hl  ; T=20     ;
  26+ E273 21 54 E2     .write_dma:             ld 		hl, l2_horz_line                                  ;          ;
  27+ E276 06 10                                ld 		b, l2_horz_cmd_len                                ;
  28+ E278 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT                            ;
  29+ E27A ED B3                                otir                                                      ;
  30+ E27C C9                                   ret
  31+ E27D
  32+ E27D              ; "bc = left side row,col, d = length, e = color"
  33+ E27D D5           l2_draw_horz_dma_bank:  push 	de							; save length and colour
  34+ E27E C5                                   push 	bc							; save row col
  35+ E27F 78                                   ld   	a,b
  36+ E280 CD 5B E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  37+ E283 C1                                   pop  	bc
  38+ E284 47                                   ld	 	b,a	       					; fixed row by the call we can go straight into HL with row col
  39+ E285 D1                                   pop  	de							; get length back
  40+ E286 CD 64 E2                             call    l2_draw_horz_dma
  41+ E289 C9                                   ret
  42+ E28A
  43+ E28A              ; "l2_draw_horz_line"
  44+ E28A              ; "bc = left side row,col, d = length, e = color"
  45+ E28A              ; "optimisation if above min pix is will use dma call SCREEN_HOZ_MIN_PIX not implemented yet"
  46+ E28A 7A           l2_draw_horz_line:      ld		a,d
  47+ E28B FE 00                                cp 		0							; if its zero length then just return
  48+ E28D C8           .zerolengthexit:        ret		z
  49+ E28E FE 01        .isitlen1:              cp 		1
  50+ E290 CA B2 E2                             jp 		z,.l2_draw_horz_line_1
  51+ E293 FE 0A        .longenoughtfordma:     cp  10
  52+ E295 C3 7D E2                             jp  l2_draw_horz_dma_bank
  53+ E298 D5 C5        .plottableline:         push 	de,,bc  					; save length and colour an d row col
  54+ E29A 78                                   ld   	a,b
  55+ E29B CD 5B E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  56+ E29E C1                                   pop  	bc
  57+ E29F 67                                   ld	 	h,a	       					; fixed row by the call we can go straight into HL with row col
  58+ E2A0 69                                   ld   	l,c
  59+ E2A1 D1                                   pop  	de							; get length back
  60+ E2A2 79           .cliptest:              ld	 	a,c							; get column + length
  61+ E2A3 42                                   ld  	b,d  						; speculate that we don't clip by pre-loading b with length
  62+ E2A4 82                                   add  	a,d
  63+ E2A5 30 06                                jr   	nc, .l2_draw_horz_plot_loop	; if carry is set c+d > 255
  64+ E2A7 3E FF        .clipat255:             ld   	a,$FF
  65+ E2A9 91                                   sub  	c							; a holds clipped length
  66+ E2AA 47                                   ld 		b, a 						; so now hl holds poke address  b = clipped length e = colour
  67+ E2AB 18 00                                jr		.l2_draw_horz_plot_loop
  68+ E2AD 73           .l2_draw_horz_plot_loop:ld (hl),e							; loop poking hl with e for b pixels
  69+ E2AE 23                                   inc hl
  70+ E2AF 10 FC                                djnz .l2_draw_horz_plot_loop
  71+ E2B1 C9                                   ret
  72+ E2B2 7B           .l2_draw_horz_line_1:   ld		a,e
  73+ E2B3 C3 29 E1                             jp		l2_plot_pixel				; hijack return
  74+ E2B6
  75+ E2B6              ; "l2_draw_horz_line_to"
  76+ E2B6              ; "bc = left side row,col, d right pixel, e = color"
  77+ E2B6 7A           l2_draw_horz_line_to:   ld 		a,d
  78+ E2B7 B9                                   cp 		c
  79+ E2B8 30 04                                jr		nc, .noswap
  80+ E2BA 28 07                                jr      z, .singlepixel
  81+ E2BC 51           .swap:                  ld		d,c
  82+ E2BD 4F                                   ld		c,a
  83+ E2BE 7A           .noswap:                ld		a,d
  84+ E2BF 91                                   sub		c
  85+ E2C0              ;                        dec		a							; so now its length not offset
  86+ E2C0 57                                   ld		d,a
  87+ E2C1 18 C7                                jr 		l2_draw_horz_line			; hijack routine and return statements
  88+ E2C3 7B           .singlepixel:           ld		a,e
  89+ E2C4 C3 29 E1                             jp		l2_plot_pixel				; hijack return
  90+ E2C7
# file closed: ./Layer2Graphics/asm_l2_plot_horizontal.asm
1293  E2C7                  INCLUDE "./Layer2Graphics/asm_l2_plot_vertical.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_vertical.asm
   1+ E2C7              ; ">l2_draw_vert_segment"
   2+ E2C7              ; ">hl = bank adjusted pixel poke address d = length, e = color"
   3+ E2C7              ; ">will always clip once h = 64 even if length > 64 destroys a and hl, d = resudual length not plotted"
   4+ E2C7 7A           l2_draw_vert_segment:   ld		a,d
   5+ E2C8 FE 00        .emptylinecheck:	    cp 		0
   6+ E2CA C8                                   ret		z
   7+ E2CB FE 01        .justonepixel	        cp		1
   8+ E2CD 20 02                                jr		nz, .multiplepixelsLoop
   9+ E2CF 73                                   ld		(hl),e
  10+ E2D0 C9                                   ret
  11+ E2D1              .multiplepixelsLoop:
  12+ E2D1 7C           .endofbankcheck:        ld   	a,h
  13+ E2D2 FE 40                                cp   	64
  14+ E2D4 D0                                   ret		nc							; check before we poke data if we have hit a boundary
  15+ E2D5 73           .canplotapixel:         ld   	(hl),e						; set colour
  16+ E2D6 24                                   inc 	h							; we don't check here else we would need a dec d on ret could do for optimisation of loop though
  17+ E2D7 15                                   dec		d
  18+ E2D8 C8                                   ret		z
  19+ E2D9 18 F6                                jr		.multiplepixelsLoop
  20+ E2DB
  21+ E2DB              ; ">l2_draw_vert_line"
  22+ E2DB              ; ">bc = row col d = length, e = color"
  23+ E2DB 78           l2_draw_vert_line:      ld 		a,b
  24+ E2DC FE C0        .offscreencheck:        cp 		SCREEN_HEIGHT
  25+ E2DE D0                                   ret 	nc							; can't start off the screen
  26+ E2DF 7A           .emptylinecheck:        ld		a,d
  27+ E2E0 FE 00                                cp		0
  28+ E2E2 C8                                   ret		z
  29+ E2E3 FE 01                                cp		1
  30+ E2E5 20 04                                jr		nz,.multiplepixels
  31+ E2E7 CD 29 E1     .itsonepixel:           call	l2_plot_pixel
  32+ E2EA C9                                   ret
  33+ E2EB              .multiplepixels:						; so now we have at least 2 pixels to plot
  34+ E2EB 7A           .clipto192:             ld		a,d							; get length
  35+ E2EC 80                                   add		a,b							; a= row + length
  36+ E2ED 38 04                                jr		c,.needtoclip				; if it was > 255 then there is a definite need
  37+ E2EF FE C0                                cp		SCREEN_HEIGHT
  38+ E2F1 38 08                                jr		c, .noclipneeded
  39+ E2F3 78           .needtoclip             ld		a,b
  40+ E2F4 82                                   add		a,d
  41+ E2F5 D6 C0                                sub		SCREEN_HEIGHT
  42+ E2F7 67                                   ld		h,a							; use h as a temp holding for (row + length) - 192
  43+ E2F8 7A                                   ld		a,d
  44+ E2F9 94                                   sub		h
  45+ E2FA 57                                   ld		d,a							; d = length - ((row + length) - 192)
  46+ E2FB              ; so now BC = row col, d = length clipped, e = color
  47+ E2FB 78           .noclipneeded:          ld		a,b
  48+ E2FC C5 D5                                push	bc,,de
  49+ E2FE CD 5B E0                             call 	asm_l2_row_bank_select
  49+ E301               	 	; we now have poke address and a variable holding current bank number
  50+ E301 D1 C1                                pop		bc,,de
  51+ E303 67                                   ld		h,a							; b now tolds target pixel for first plot
  52+ E304 69                                   ld		l,c  						; and c holds pixel column for plotting
  53+ E305 CD C7 E2                             call 	l2_draw_vert_segment		; draw seg, d = pixels remaining
  54+ E308 7A                                   ld		a,d							; a and d = nbr pixels remaining
  55+ E309 FE 00                                cp		0
  56+ E30B 28 27                                jr		z, .doneplotting
  57+ E30D 3A 00 E0     .anotherbank:           ld		a, (varL2_BANK_SELECTED)
  58+ E310 3C                                   inc		a
  59+ E311 06 00                                ld		b,0
  60+ E313 C5 D5                                push	bc,,de
  61+ E315 CD 44 E0                             call 	asm_l2_bank_n_select
  62+ E318 D1 C1                                pop     bc,,de
  63+ E31A 60                                   ld		h,b							; b now tolds target pixel for first plot
  64+ E31B 69                                   ld		l,c  						; and c holds pixel column for plotting
  65+ E31C CD C7 E2                             call	l2_draw_vert_segment
  66+ E31F 7A                                   ld		a,d
  67+ E320 FE 00                                cp		0
  68+ E322 28 10                                jr		z,.doneplotting
  69+ E324 3A 00 E0     .yetanotherbank:        ld		a, (varL2_BANK_SELECTED)
  70+ E327 3C                                   inc		a
  71+ E328 06 00                                ld		b,0
  72+ E32A C5 D5                                push	bc,,de
  73+ E32C CD 44 E0                             call 	asm_l2_bank_n_select
  74+ E32F D1                                   pop		de
  75+ E330 E1                                   pop		hl							; hl = bc
  76+ E331 CD C7 E2                             call	l2_draw_vert_segment		; we have now hit 192 pixels so done
  77+ E334 C9           .doneplotting:	        ret
  78+ E335
  79+ E335              ; ">l2_draw_vert_line_to"
  80+ E335              ; ">bc = row col d = to position, e = color"
  81+ E335 78           l2_draw_vert_line_to:   ld		a,b
  82+ E336 BA                                   cp		d
  83+ E337 38 02                                jr		c, .noyswap
  84+ E339 42           .yswap:                 ld		b,d			; Swap round row numbers so we are always incrementing
  85+ E33A 57                                   ld		d,a			; now we have a top to bottom to we we can calc length from bc
  86+ E33B 7A           .noyswap:               ld		a,d 		; we still may have d in a but only if it was bottom to top
  87+ E33C 90                                   sub		b
  88+ E33D 3C                                   inc		a			; so now its length not offset
  89+ E33E 57                                   ld		d,a
  90+ E33F 18 9A                                jr		l2_draw_vert_line	; we can hijack its clipping, 0 check and return logic
  91+ E341                                      ; no return needed
  92+ E341
# file closed: ./Layer2Graphics/asm_l2_plot_vertical.asm
1294  E341                  INCLUDE "./Layer2Graphics/layer2_plot_diagonal.asm"
# file opened: ./Layer2Graphics/layer2_plot_diagonal.asm
   1+ E341
   2+ E341              l2_draw_box_to:
   3+ E341              ; ">l2_draw_box_to bc=rowcol, de=torowcol a=color"
   4+ E341              ; ">NOT IMPLEMENTED YET"
   5+ E341 C9           	ret
   6+ E342
   7+ E342              ;; Note l2stepx is done via self modifying code rather than an if for speed
   8+ E342              ;; l2stepx1 and l2stepx2 are the addresses to stick the inc or dec in
   9+ E342              l2decbstep	EQU $05
  10+ E342              l2incbstep	EQU	$04
  11+ E342              l2deccstep	EQU $0D
  12+ E342              l2inccstep	EQU	$0C
  13+ E342              		; l2 deltas are signed
  14+ E342 00 00        l2deltaY	DW	0
  15+ E344 00 00        l2deltaX	DW	0
  16+ E346 00           l2deltaYsq	db	0
  17+ E347 00           l2deltaXsq	db	0
  18+ E348 00           l2deltaYn	db	0
  19+ E349 00           l2deltaXn	db	0
  20+ E34A 00           l2deltaYsqn	db	0
  21+ E34B 00           l2deltaXsqn	db	0
  22+ E34C 00           l2linecolor	db	0
  23+ E34D 00 00        l2fraction	dw	0
  24+ E34F 00 00        l2e2		dw	0
  25+ E351 00           l2way		db	0
  26+ E352 00 00        l2targetPtr	dw	0
  27+ E354              ;; These arrays should be 192 but if we use 256 then getting array2 value is just inc h rather than indexing again.
  28+ E354 00 00 00...  l2targetArray1 ds	256
  29+ E454 00 00 00...  l2targetArray2 ds	256
  30+ E554              ;; Using Bresenham Algorithm draw a diagonal line top to bottom. First we must sort of course
  31+ E554              ;;plotLine(int x0, int y0, int x1, int y1)
  32+ E554              ;;    dx =  abs(x1-x0);
  33+ E554              ;;    sx = x0<x1 ? 1 : -1;
  34+ E554              ;;    dy = -abs(y1-y0);
  35+ E554              ;;    sy = y0<y1 ? 1 : -1;
  36+ E554              ;;    err = dx+dy;  /* error value e_xy */
  37+ E554              ;;    while (true)   /* loop */
  38+ E554              ;;        plot(x0, y0);
  39+ E554              ;;        if (x0==x1 && y0==y1) break;
  40+ E554              ;;        e2 = 2*err;
  41+ E554              ;;        if (e2 >= dy) /* e_xy+e_x > 0 */
  42+ E554              ;;            err += dy;
  43+ E554              ;;            x0 += sx;
  44+ E554              ;;        end if
  45+ E554              ;;        if (e2 <= dx) /* e_xy+e_y < 0 */
  46+ E554              ;;            err += dx;
  47+ E554              ;;            y0 += sy;
  48+ E554              ;;        end if
  49+ E554              ;;    end while
  50+ E554              ; ">l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
  51+ E554              ; ">hl will be either l2targetArray1 or 2"
  52+ E554              ; NOTE IF WE INTERLEAVE THESE TWO TABLES WE COUDL READ BOTH X POS as a 16 bit read
  53+ E554 FE 01        l2_draw_diagonal_save:  cp		1
  54+ E556 28 06                                jr		z,l2S_ItsArray1
  55+ E558 21 54 E4                             ld		hl,l2targetArray2
  56+ E55B C3 61 E5                             jp		l2S_setTarget
  57+ E55E 21 54 E3     l2S_ItsArray1:	        ld		hl,l2targetArray1
  58+ E561 22 52 E3     l2S_setTarget:	        ld		(l2targetPtr),hl
  59+ E564              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
  60+ E564 32 4C E3                             ld		(l2linecolor),a					;save colour for later
  61+ E567 21 00 00                             ld		hl,0                            ;
  62+ E56A 22 44 E3                             ld		(l2deltaX),hl                   ;
  63+ E56D 22 42 E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
  64+ E570 78           l2S_preSort:            ld		a,b								;
  65+ E571                                      JumpIfALTNusng	d,l2S_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
  65+ E571 BA          >                        cp      d
  65+ E572 DA 7A E5    >                        jp		c, l2S_noYSort
  66+ E575              l2S_SortBasedOnY:	    ldhlbc									;
  66+ E575 60          >                        ld		h,b
  66+ E576 69          >                        ld		l,c
  67+ E577 EB                                   ex		de,hl                           ;
  68+ E578                                      ldbchl									; swap over bc and de using hl as an intermediate
  68+ E578 44          >                        ld		b,h
  68+ E579 4D          >                        ld		c,l
  69+ E57A DD 62        l2S_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
  70+ E57C DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
  71+ E57E 79           l2S_setXLen:            ld		a,c                             ;
  72+ E57F                                      JumpIfALTNusng e,l2S_PosXLen			; if x1 < x2 then we have a positive increment
  72+ E57F BB          >                        cp      e
  72+ E580 DA 8C E5    >                        jp		c, l2S_PosXLen
  73+ E583 79           l2S_NegXLen:            ld		a,c                             ;
  74+ E584 93                                   sub     e                               ;
  75+ E585 32 44 E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
  76+ E588 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
  77+ E58A 18 07                                jr		l2S_XINCDEC
  78+ E58C 7B           l2S_PosXLen:	        ld		a,e                             ;
  79+ E58D 91                                   sub		c                               ;
  80+ E58E 32 44 E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
  81+ E591 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
  82+ E593              l2S_XINCDEC:
  83+ E593 32 FF E5     	ld		(l2S_adjustCol),a				;
  84+ E596 32 2F E6     	ld		(l2S_adjustCol2),a				; update self modifying code for X update with inc or dec from above
  85+ E599              l2S_setYLen
  86+ E599 7A           	ld		a,d							 	; presorted on Y so it is now always positive
  87+ E59A 90           	sub		b
  88+ E59B 32 42 E3     	ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
  89+ E59E              l2S_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
  90+ E59E              ldS_FracDYltDX:								;
  91+ E59E 2A 42 E3     	ld		hl,(l2deltaY)					; Fraction = dY - dX
  92+ E5A1 ED 5B 44 E3  	ld		de,(l2deltaX)
  93+ E5A5              	ClearCarryFlag
  93+ E5A5 B7          >                        or a
  94+ E5A6 ED 52        	sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
  95+ E5A8 EB           	ex		de,hl
  96+ E5A9 FD 62        	ld		iyh,d							; we will use IY reg for fractions
  97+ E5AB FD 6B        	ld		iyl,e
  98+ E5AD F2 D2 E5     	jp		p,l2S_fracIsPositive
  99+ E5B0              l2S_fracIsNegative:
 100+ E5B0              	NegIY
 100+ E5B0 AF          >                    xor a
 100+ E5B1 FD 95       >                    sub iyl
 100+ E5B3 FD 6F       >                    ld iyl,a
 100+ E5B5 9F          >                    sbc a,a
 100+ E5B6 FD 94       >                    sub iyh
 100+ E5B8 FD 67       >                    ld iyh,a
 101+ E5BA              	ShiftIYRight1
 101+ E5BA FD 7C       >			   ld 	a,iyh
 101+ E5BC CB 3F       >			   srl 	a
 101+ E5BE FD 67       >			   ld	iyh,a
 101+ E5C0 FD 7D       >			   ld 	a,iyl
 101+ E5C2 1F          >			   rra
 101+ E5C3 FD 6F       >			   ld	iyl,a
 102+ E5C5              	NegIY
 102+ E5C5 AF          >                    xor a
 102+ E5C6 FD 95       >                    sub iyl
 102+ E5C8 FD 6F       >                    ld iyl,a
 102+ E5CA 9F          >                    sbc a,a
 102+ E5CB FD 94       >                    sub iyh
 102+ E5CD FD 67       >                    ld iyh,a
 103+ E5CF C3 DD E5     	jp		l2S_SkipCalcInc					; so we have a negative frac
 104+ E5D2              l2S_fracIsPositive:
 105+ E5D2              	ShiftIYRight1
 105+ E5D2 FD 7C       >			   ld 	a,iyh
 105+ E5D4 CB 3F       >			   srl 	a
 105+ E5D6 FD 67       >			   ld	iyh,a
 105+ E5D8 FD 7D       >			   ld 	a,iyl
 105+ E5DA 1F          >			   rra
 105+ E5DB FD 6F       >			   ld	iyl,a
 106+ E5DD              l2S_SkipCalcInc:
 107+ E5DD              l2S_Loop:									; As we loop, bc = to plot current XY
 108+ E5DD 2A 52 E3     	ld		hl,(l2targetPtr)				; Insert into respective array
 109+ E5E0 78           	ld		a,b
 110+ E5E1 ED 31        	add		hl,a
 111+ E5E3 71           	ld		(hl),c
 112+ E5E4              l2S_CheckIfEnd:
 113+ E5E4 DD 7C        	ld		a,ixh
 114+ E5E6              	JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 114+ E5E6 B8          >                        cp     b
 114+ E5E7 D2 ED E5    >                        jp		nc,l2S_CheckXPos
 115+ E5EA C3 F1 E5     	jp		l2S_Continue
 116+ E5ED              l2S_CheckXPos:
 117+ E5ED 79           	ld		a,c
 118+ E5EE              	ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 118+ E5EE DD BD       >                        cp    ixl
 118+ E5F0 D0          >                        ret	 nc
 119+ E5F1              l2S_Continue:
 120+ E5F1              l2S_HNegative:
 121+ E5F1 FD 7C        	ld		a,iyh
 122+ E5F3 CB 7F        	bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 123+ E5F5 28 0B        	jr		z,l2S_ErrNotNegative			;
 124+ E5F7              l2S_ErrNegative:								; if its a negative error update X
 125+ E5F7 3A 42 E3     	ld		a,(l2deltaY)
 126+ E5FA 16 00        	ld		d,0
 127+ E5FC 5F           	ld		e,a
 128+ E5FD FD 19        	add		iy,de							; add deltaY(unsinged) to l2fraction
 129+ E5FF              l2S_adjustCol:
 130+ E5FF 00           	nop										; this is our inc/dec of X
 131+ E600 18 DB        	jr		l2S_Loop							; repeat loop
 132+ E602              l2S_ErrNotNegative:
 133+ E602 FD 7C        	ld		a,iyh
 134+ E604 FD B5        	or		iyl
 135+ E606              	JumpIfAIsZero l2S_ErrZero					; if there is no error then goto zeroerror
 135+ E606 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 135+ E607 CA 20 E6    >                        jp	z, l2S_ErrZero
 136+ E60A              l2S_ErrPositive:								; if its a positive error then we update Y
 137+ E60A              	lddeiy
 137+ E60A FD 54       >                        ld		d,iyh
 137+ E60C FD 5D       >                        ld		e,iyl
 138+ E60E EB           	ex		de,hl
 139+ E60F 16 00        	ld		d,0
 140+ E611 3A 44 E3     	ld		a,(l2deltaX)
 141+ E614 5F           	ld		e,a
 142+ E615              	ClearCarryFlag
 142+ E615 B7          >                        or a
 143+ E616 ED 52        	sbc		hl,de
 144+ E618 EB           	ex		de,hl
 145+ E619              	ldiyde
 145+ E619 FD 62       >                        ld		iyh,d
 145+ E61B FD 6B       >                        ld		iyl,e
 146+ E61D              l2S_adjustRow:									; move Y down by one
 147+ E61D 04           	inc		b
 148+ E61E 18 BD        	jr		l2S_Loop
 149+ E620              l2S_ErrZero:
 150+ E620 2A 44 E3     	ld		hl,(l2deltaX)
 151+ E623 EB           	ex		de,hl
 152+ E624 2A 42 E3     	ld		hl,(l2deltaY)
 153+ E627              	ClearCarryFlag
 153+ E627 B7          >                        or a
 154+ E628 ED 52        	sbc		hl,de
 155+ E62A EB           	ex		de,hl
 156+ E62B              	ldiyde
 156+ E62B FD 62       >                        ld		iyh,d
 156+ E62D FD 6B       >                        ld		iyl,e
 157+ E62F              l2S_adjustCol2:
 158+ E62F 00           	nop										; update X and Y
 159+ E630 04           	inc		b
 160+ E631 18 AA        	jr		l2S_Loop
 161+ E633
 162+ E633              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 163+ E633 32 4C E3     l2_draw_diagonal:       ld		(l2linecolor),a					;save colour for later
 164+ E636 21 00 00                             ld		hl,0                            ;
 165+ E639 22 44 E3                             ld		(l2deltaX),hl                   ;
 166+ E63C 22 42 E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 167+ E63F 78           l2D_preSort:            ld		a,b								;
 168+ E640                                      JumpIfALTNusng	d,l2D_noYSort			; we must have Y1 < Y2 (if equal then verical line picked up earlier
 168+ E640 BA          >                        cp      d
 168+ E641 DA 49 E6    >                        jp		c, l2D_noYSort
 169+ E644              l2D_SortBasedOnY:	    ldhlbc									;
 169+ E644 60          >                        ld		h,b
 169+ E645 69          >                        ld		l,c
 170+ E646 EB                                   ex		de,hl                           ;
 171+ E647                                      ldbchl									; swap over bc and de using hl as an intermediate
 171+ E647 44          >                        ld		b,h
 171+ E648 4D          >                        ld		c,l
 172+ E649 DD 62        l2D_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 173+ E64B DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
 174+ E64D 79           l2D_setXLen:            ld		a,c                             ;
 175+ E64E                                      JumpIfALTNusng e,l2D_PosXLen			; if x1 < x2 then we have a positive increment
 175+ E64E BB          >                        cp      e
 175+ E64F DA 5B E6    >                        jp		c, l2D_PosXLen
 176+ E652 79           l2D_NegXLen:            ld		a,c                             ;
 177+ E653 93                                   sub     e                               ;
 178+ E654 32 44 E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 179+ E657 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 180+ E659 18 07                                jr		l2D_XINCDEC
 181+ E65B 7B           l2D_PosXLen:	        ld		a,e                             ;
 182+ E65C 91                                   sub		c                               ;
 183+ E65D 32 44 E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 184+ E660 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 185+ E662 32 D1 E6     l2D_XINCDEC:	        ld		(l2D_adjustCol),a				;
 186+ E665 32 01 E7                             ld		(l2D_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 187+ E668 7A           l2D_setYLen				ld		a,d							 	; presorted on Y so it is now always positive
 188+ E669 90                                   sub		b
 189+ E66A 32 42 E3                             ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 190+ E66D              l2D_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 191+ E66D 2A 42 E3     ldD_FracDYltDX:			ld		hl,(l2deltaY)					; Fraction = dY - dX
 192+ E670 ED 5B 44 E3                          ld		de,(l2deltaX)
 193+ E674                                      ClearCarryFlag
 193+ E674 B7          >                        or a
 194+ E675 ED 52                                sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 195+ E677 EB                                   ex		de,hl
 196+ E678 FD 62                                ld		iyh,d							; we will use IY reg for fractions
 197+ E67A FD 6B                                ld		iyl,e
 198+ E67C F2 A1 E6                             jp		p,l2D_fracIsPositive
 199+ E67F              l2D_fracIsNegative:     NegIY
 199+ E67F AF          >                    xor a
 199+ E680 FD 95       >                    sub iyl
 199+ E682 FD 6F       >                    ld iyl,a
 199+ E684 9F          >                    sbc a,a
 199+ E685 FD 94       >                    sub iyh
 199+ E687 FD 67       >                    ld iyh,a
 200+ E689                                      ShiftIYRight1
 200+ E689 FD 7C       >			   ld 	a,iyh
 200+ E68B CB 3F       >			   srl 	a
 200+ E68D FD 67       >			   ld	iyh,a
 200+ E68F FD 7D       >			   ld 	a,iyl
 200+ E691 1F          >			   rra
 200+ E692 FD 6F       >			   ld	iyl,a
 201+ E694                                      NegIY
 201+ E694 AF          >                    xor a
 201+ E695 FD 95       >                    sub iyl
 201+ E697 FD 6F       >                    ld iyl,a
 201+ E699 9F          >                    sbc a,a
 201+ E69A FD 94       >                    sub iyh
 201+ E69C FD 67       >                    ld iyh,a
 202+ E69E C3 AC E6                             jp		l2D_SkipCalcInc					; so we have a negative frac
 203+ E6A1              l2D_fracIsPositive:     ShiftIYRight1
 203+ E6A1 FD 7C       >			   ld 	a,iyh
 203+ E6A3 CB 3F       >			   srl 	a
 203+ E6A5 FD 67       >			   ld	iyh,a
 203+ E6A7 FD 7D       >			   ld 	a,iyl
 203+ E6A9 1F          >			   rra
 203+ E6AA FD 6F       >			   ld	iyl,a
 204+ E6AC              l2D_SkipCalcInc:
 205+ E6AC C5 D5        l2D_Loop:				push	bc,,de                 			; l2DeltaY and l2DeltaX are set
 206+ E6AE 3A 4C E3                             ld		a,(l2linecolor)     			;
 207+ E6B1 CD 29 E1                             call	l2_plot_pixel       			; Plot Pixel
 208+ E6B4 D1 C1                                pop     bc,,de
 209+ E6B6 DD 7C        l2D_CheckIfEnd:	        ld		a,ixh
 210+ E6B8                                      JumpIfAGTENusng	  b,l2D_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 210+ E6B8 B8          >                        cp     b
 210+ E6B9 D2 BF E6    >                        jp		nc,l2D_CheckXPos
 211+ E6BC C3 C3 E6                             jp		l2D_Continue
 212+ E6BF 79           l2D_CheckXPos:          ld		a,c
 213+ E6C0                                      ReturnIfAEqNusng ixl					; if X1 has reached or exceeded X2 then we are done
 213+ E6C0 DD BD       >                        cp      ixl
 213+ E6C2 C8          >                        ret     z
 214+ E6C3              l2D_Continue:
 215+ E6C3 FD 7C        l2D_HNegative:			ld		a,iyh
 216+ E6C5 CB 7F                                bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 217+ E6C7 28 0B                                jr		z,l2D_ErrNotNegative			;
 218+ E6C9 3A 42 E3     l2D_ErrNegative:		ld		a,(l2deltaY)
 219+ E6CC 16 00                                ld		d,0
 220+ E6CE 5F                                   ld		e,a
 221+ E6CF FD 19                                add		iy,de							; add deltaY(unsinged) to l2fraction
 222+ E6D1 00           l2D_adjustCol:          nop										; this is our inc/dec of X
 223+ E6D2 18 D8                                jr		l2D_Loop							; repeat loop
 224+ E6D4 FD 7C        l2D_ErrNotNegative:     ld		a,iyh
 225+ E6D6 FD B5                                or		iyl
 226+ E6D8                                      JumpIfAIsZero l2D_ErrZero					; if there is no error then goto zeroerror
 226+ E6D8 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 226+ E6D9 CA F2 E6    >                        jp	z, l2D_ErrZero
 227+ E6DC              l2D_ErrPositive:		lddeiy
 227+ E6DC FD 54       >                        ld		d,iyh
 227+ E6DE FD 5D       >                        ld		e,iyl
 228+ E6E0 EB                                   ex		de,hl
 229+ E6E1 16 00                                ld		d,0
 230+ E6E3 3A 44 E3                             ld		a,(l2deltaX)
 231+ E6E6 5F                                   ld		e,a
 232+ E6E7                                      ClearCarryFlag
 232+ E6E7 B7          >                        or a
 233+ E6E8 ED 52                                sbc		hl,de
 234+ E6EA EB                                   ex		de,hl
 235+ E6EB                                      ldiyde
 235+ E6EB FD 62       >                        ld		iyh,d
 235+ E6ED FD 6B       >                        ld		iyl,e
 236+ E6EF 04           l2D_adjustRow:			inc		b
 237+ E6F0 18 BA                                jr		l2D_Loop
 238+ E6F2 2A 44 E3     l2D_ErrZero:            ld		hl,(l2deltaX)
 239+ E6F5 EB                                   ex		de,hl
 240+ E6F6 2A 42 E3                             ld		hl,(l2deltaY)
 241+ E6F9                                      ClearCarryFlag
 241+ E6F9 B7          >                        or a
 242+ E6FA ED 52                                sbc		hl,de
 243+ E6FC EB                                   ex		de,hl
 244+ E6FD                                      ldiyde
 244+ E6FD FD 62       >                        ld		iyh,d
 244+ E6FF FD 6B       >                        ld		iyl,e
 245+ E701 00           l2D_adjustCol2:         nop										; update X and Y
 246+ E702 04                                   inc		b
 247+ E703 18 A7                                jr		l2D_Loop
 248+ E705              ;----------------------------------------------------------------------------------------------------------------------------------
 249+ E705
 250+ E705
 251+ E705
 252+ E705
 253+ E705              ;Loin:				; BBC version of line draw
 254+ E705              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 255+ E705              ;	ld		(l2linecolor),a					; save colour as a reg gets used alot, coudl move this into interrupt flag and disable interrups
 256+ E705              ;	ld		ixh,0							; ixh = s
 257+ E705              ;	ld		iyh,0							; iyh = swap
 258+ E705              ;	ld		l,0								; l will hold delta sign flags
 259+ E705              ;LoinCalcDeltaX:
 260+ E705              ;	ld		a,e
 261+ E705              ;	sub		c								; a = deltaX
 262+ E705              ;	JumpIfPositive LoinPosDx
 263+ E705              ;LoinNegDx:
 264+ E705              ;	neg										; carry flag will indicate deltaX was negative
 265+ E705              ;	ld		l,$80							; set bit 7 of l for negative
 266+ E705              ;LoinPosDx:
 267+ E705              ;	ld		ixl,a							; ixl = varP = deltaX
 268+ E705              ;LoinCalcDeltaY:
 269+ E705              ;	ld		a,d
 270+ E705              ;	sub		b								; a= deltaY
 271+ E705              ;	JumpIfPositive LoinPosDy
 272+ E705              ;LoinNegDy:
 273+ E705              ;	neg
 274+ E705              ;	set		6,l								; set bit 6 of l for negative deltaY
 275+ E705              ;LoinPosDy:
 276+ E705              ;	ld		iyl,a							; iyl = varQ = deltaY
 277+ E705              ;	JumpIfAGTENusng ixl, LoinSTPy			; if deltaY >= DeltaX then step along Y
 278+ E705              ;LoinSTPx:									; step along X
 279+ E705              ;	JumpOnBitClear l,7						; if l flags were clear then X2 < X2
 280+ E705              ;LoinSTPxSwapCoords:
 281+ E705              ;	dec		iyh								; swap flag now becomes FF
 282+ E705              ;	ld		a,l								; save l flags
 283+ E705              ;	ex		de,hl							; save de to hl
 284+ E705              ;	lddebc									; Point2 = point1
 285+ E705              ;	ldbchl									; Point1 = point2 that was saved
 286+ E705              ;	ld		l,a								; get back l flags
 287+ E705              ;LoinSTPxCorrectOrder:
 288+ E705              ;	l2_point_pixel_y_safe					; call plot pixel preseving bc hl
 289+ E705              ;	ld		a,iyl							; get delta Y back
 290+ E705              ;	ld		iy1,$FE							; roll counter
 291+ E705              ;LionSTPxRollQ:
 292+ E705              ;	sla		a								; highest bit of delta-Y
 293+ E705              ;	jp		c,LoinSTPxSteep
 294+ E705              ;	cp		ixl								; compare with DeltaX
 295+ E705              ;	jp		cs,LoinSTPxShallow
 296+ E705              ;LoinSTPxSteep:								;; LI4
 297+ E705              ;	sbc		a,ixl							; deltaYwork -= (deltaX+1)
 298+ E705              ;	scf										; force carry flag set
 299+ E705              ;LoinSTPxShallow:							;; LI5
 300+ E705              ;	rl		iyl								; rotate iyl which started as FE
 301+ E705              ;	jp		c,LionSTPxRollQ					; so we are doing a 6 bit loop
 302+ E705              ;	inc		ihl								; DeltaX += 1
 303+ E705              ;LoinSTPxYDirection:							; change this to self modifying code
 304+ E705              ;	ld		a,d
 305+ E705              ;	JumpIfAGTEn	b,LionDOWN:
 306+ E705              ;	ld		a,iyh							; swap flag
 307+ E705              ;	JumpIfANotZero	X1Inc  					; if swap flag was not set then no need to update R
 308+ E705              ;LoinSTPxX1Dec:
 309+ E705              ;	dec		c								; move left 1 pixel as we sawped
 310+ E705              ;LoinSTPxXCounter:							;; LIL2
 311+ E705              ;	sub		b
 312+ E705              ;	if
 313+ E705              ;
 314+ E705              ;85 82                   STA &82	   \ R	\ mask byte
 315+ E705              ;A5 81                   LDA &81	   \ Q	\ delta-Y
 316+ E705              ;A2 FE                   LDX #&FE	\ roll counter
 317+ E705              ;86 81                   STX &81		\ Q
 318+ E705              ;.LIL1	\ roll Q
 319+ E705              ;0A                      ASL A		\ highest bit of delta-Y
 320+ E705              ;B0 04                   BCS LI4		\ steep
 321+ E705              ;C5 1B                   CMP &1B	   \ P	\ delta-X
 322+ E705              ;90 03                   BCC LI5		\ shallow
 323+ E705              ;.LI4	\ steep
 324+ E705              ;E5 1B                   SBC &1B		\ P
 325+ E705              ;38                      SEC
 326+ E705              ;.LI5	\ shallow
 327+ E705              ;26 81                   ROL &81	   \ Q	\ #&FE
 328+ E705              ;B0 F2                   BCS LIL1 	\ loop Q, end with some low bits in Q
 329+ E705              ;A6 1B                   LDX &1B		\ P
 330+ E705              ;E8                      INX 		\ Xreg is width
 331+ E705              ;A5 37                   LDA &37		\ Y2
 332+ E705              ;E5 35                   SBC &35		\ Y1
 333+ E705              ;B0 2C                   BCS DOWN	\ draw line to the right and down
 334+ E705              ;A5 90                   LDA &90		\ SWAP
 335+ E705              ;D0 07                   BNE LI6		\ else Xreg was correct after all, no need to update R
 336+ E705              ;CA                      DEX
 337+ E705              ;.LIL2	\ counter X width
 338+ E705              ;A5 82                   LDA &82	   \ R	\ mask byte
 339+ E705              ;51 07                   EOR (&07),Y	\ (SC),Y
 340+ E705              ;91 07                   STA (&07),Y	\ (SC),Y
 341+ E705              ;.LI6	\ Xreg correct
 342+ E705              ;46 82                   LSR &82	   \ R	\ mask byte
 343+ E705              ;90 08                   BCC LI7   	\ else moving to next column to right. Bring carry in back
 344+ E705              ;66 82                   ROR &82		\ R
 345+ E705              ;A5 07                   LDA &07		\ SC
 346+ E705              ;69 08                   ADC #8		\ next column
 347+ E705              ;85 07                   STA &07		\ SC
 348+ E705              ;.LI7	\ S += Q. this is like an overflow monitor to update Y
 349+ E705              ;A5 83                   LDA &83		\ S
 350+ E705              ;65 81                   ADC &81	   \ Q	\ some low bits
 351+ E705              ;85 83                   STA &83		\ S
 352+ E705              ;90 07                   BCC LIC2	\ skip Y adjustment
 353+ E705              ;88                      DEY
 354+ E705              ;10 04                   BPL LIC2	\ skip Y adjustment
 355+ E705              ;C6 08                   DEC &08		\ SC+1
 356+ E705              ;A0 07                   LDY #7
 357+ E705              ;.LIC2	\ skip Y adjustment
 358+ E705              ;CA                      DEX
 359+ E705              ;D0 DC                   BNE LIL2	\ loop X width
 360+ E705              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 361+ E705              ;60                      RTS
 362+ E705              ;
 363+ E705              ;.DOWN	\ Line is going to the right and down
 364+ E705              ;A5 90                   LDA &90		\ SWAP
 365+ E705              ;F0 07                   BEQ LI9		\ no swap
 366+ E705              ;CA                      DEX
 367+ E705              ;.LIL3	\ counter X width
 368+ E705              ;A5 82                   LDA &82	    \ R \ mask byte
 369+ E705              ;51 07                   EOR (&07),Y	\ (SC),Y
 370+ E705              ;91 07                   STA (&07),Y	\ (SC),Y
 371+ E705              ;.LI9	\ no swap
 372+ E705              ;46 82                   LSR &82		\ R
 373+ E705              ;90 08                   BCC LI10	\ still in correct column, hop
 374+ E705              ;66 82                   ROR &82		\ R
 375+ E705              ;A5 07                   LDA &07		\ SC
 376+ E705              ;69 08                   ADC #8		\ next column
 377+ E705              ;85 07                   STA &07		\ SC
 378+ E705              ;.LI10	\ this is like an overflow monitor to update Y
 379+ E705              ;A5 83                   LDA &83		\ S
 380+ E705              ;65 81                   ADC &81		\ Q
 381+ E705              ;85 83                   STA &83		\ S
 382+ E705              ;90 09                   BCC LIC3	\ skip Y adjustment
 383+ E705              ;C8                      INY
 384+ E705              ;C0 08                   CPY #8
 385+ E705              ;D0 04                   BNE LIC3	\ have not reached bottom byte of char, hop
 386+ E705              ;E6 08                   INC &08		\ SC+1
 387+ E705              ;A0 00                   LDY #0
 388+ E705              ;.LIC3	\ skipped Y adjustment
 389+ E705              ;CA                      DEX
 390+ E705              ;D0 DA                   BNE LIL3	\ loop X width
 391+ E705              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 392+ E705              ;60                      RTS
 393+ E705              ;
 394+ E705              ;.STPY	\ -> &1797 \ Step along y for line, goes down and to right
 395+ E705              ;A4 35                   LDY &35		\ Y1
 396+ E705              ;98                      TYA
 397+ E705              ;A6 34                   LDX &34		\ X1
 398+ E705              ;C4 37                   CPY &37		\ Y2
 399+ E705              ;B0 10                   BCS LI15	\ skip swap if Y1 >= Y2
 400+ E705              ;C6 90                   DEC &90		\ SWAP
 401+ E705              ;A5 36                   LDA &36		\ X2
 402+ E705              ;85 34                   STA &34		\ X1
 403+ E705              ;86 36                   STX &36		\ X2
 404+ E705              ;AA                      TAX
 405+ E705              ;A5 37                   LDA &37		\ Y2
 406+ E705              ;85 35                   STA &35		\ Y1
 407+ E705              ;84 37                   STY &37		\ Y2
 408+ E705              ;A8                      TAY
 409+ E705              ;.LI15	\ Y1 Y2 order is now correct
 410+ E705              ;4A                      LSR A
 411+ E705              ;4A                      LSR A
 412+ E705              ;4A                      LSR A
 413+ E705              ;09 60                   ORA #&60
 414+ E705              ;85 08                   STA &08	 \ SC+1	\ screen hi
 415+ E705              ;8A                      TXA 		\ X1
 416+ E705              ;29 F8                   AND #&F8
 417+ E705              ;85 07                   STA &07	  \ SC	\ screen lo
 418+ E705              ;8A                      TXA
 419+ E705              ;29 07                   AND #7		\ mask index
 420+ E705              ;AA                      TAX
 421+ E705              ;BD AF 16                LDA &16AF,X \ TWOS,X \ Mode4 single pixel
 422+ E705              ;85 82                   STA &82	    \ R	\ mask
 423+ E705              ;A5 35                   LDA &35		\ Y1
 424+ E705              ;29 07                   AND #7
 425+ E705              ;A8                      TAY
 426+ E705              ;A5 1B                   LDA &1B	    \ P	\ delta-X
 427+ E705              ;A2 01                   LDX #1		\ roll counter
 428+ E705              ;86 1B                   STX &1B	    	\ P
 429+ E705              ;.LIL4	\ roll P
 430+ E705              ;0A                      ASL A
 431+ E705              ;B0 04                   BCS LI13	\ do subtraction
 432+ E705              ;C5 81                   CMP &81	    \ Q	\ delta-Y
 433+ E705              ;90 03                   BCC LI14	\ less than Q
 434+ E705              ;.LI13	\ do subtraction
 435+ E705              ;E5 81                   SBC &81		\ Q
 436+ E705              ;38                      SEC
 437+ E705              ;.LI14	\ less than Q
 438+ E705              ;26 1B                   ROL &1B		\ P
 439+ E705              ;90 F2                   BCC LIL4	\ loop P, end with some low bits in P
 440+ E705              ;A6 81                   LDX &81		\ Q
 441+ E705              ;E8                      INX 		\ adjust height
 442+ E705              ;A5 36                   LDA &36		\ X2
 443+ E705              ;E5 34                   SBC &34		\ X1
 444+ E705              ;90 2D                   BCC LFT		\ if C cleared then line moving to the left - hop down
 445+ E705              ;18                      CLC
 446+ E705              ;A5 90                   LDA &90		\ SWAP
 447+ E705              ;F0 07                   BEQ LI17 	\ skip first point
 448+ E705              ;CA                      DEX
 449+ E705              ;.LIL5	\ skipped first point, counter X
 450+ E705              ;A5 82                   LDA &82	    \ R \ mask byte
 451+ E705              ;51 07                   EOR (&07),Y	\ (SC),Y
 452+ E705              ;91 07                   STA (&07),Y	\ (SC),Y
 453+ E705              ;.LI17	\ skipped first point
 454+ E705              ;88                      DEY
 455+ E705              ;10 04                   BPL LI16	\ skip hi adjust
 456+ E705              ;C6 08                   DEC &08		\ SC+1
 457+ E705              ;A0 07                   LDY #7		\ new char
 458+ E705              ;	.LI16	\ skipped hi adjust
 459+ E705              ;A5 83                   LDA &83		\ S
 460+ E705              ;65 1B                   ADC &1B		\ P
 461+ E705              ;85 83                   STA &83		\ S
 462+ E705              ;90 0C                   BCC LIC5	\ skip, still in same column
 463+ E705              ;46 82                   LSR &82	  \ R	\ mask
 464+ E705              ;90 08                   BCC LIC5  	\ no mask bit hop
 465+ E705              ;66 82                   ROR &82   \ R	\ else moved over to next column, reset mask
 466+ E705              ;A5 07                   LDA &07	  \ SC  \ screen lo
 467+ E705              ;69 08                   ADC #8		\ next char below
 468+ E705              ;85 07                   STA &07		\ SC
 469+ E705              ;.LIC5	\ same column
 470+ E705              ;CA                      DEX
 471+ E705              ;D0 DC                   BNE LIL5	\ loop X height
 472+ E705              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 473+ E705              ;60                      RTS
 474+ E705              ;
 475+ E705              ;.LFT	\ going left
 476+ E705              ;A5 90                   LDA &90		\ SWAP
 477+ E705              ;F0 07                   BEQ LI18	\ skip first point
 478+ E705              ;CA                      DEX 		\ reduce height
 479+ E705              ;.LIL6	\ counter X height
 480+ E705              ;A5 82                   LDA &82	   \ R	\ mask byte
 481+ E705              ;51 07                   EOR (&07),Y	\ (SC),Y
 482+ E705              ;91 07                   STA (&07),Y	\ (SC),Y
 483+ E705              ;.LI18
 484+ E705              ;88                      DEY
 485+ E705              ;10 04                   BPL LI19	\ skip hi adjust
 486+ E705              ;C6 08                   DEC &08		\ SC+1
 487+ E705              ;A0 07                   LDY #7		\ rest char row
 488+ E705              ;.LI19	\ skipped hi adjust
 489+ E705              ;A5 83                   LDA &83		\ S
 490+ E705              ;65 1B                   ADC &1B	    \ P \ some low bits
 491+ E705              ;85 83                   STA &83		\ S
 492+ E705              ;90 0D                   BCC LIC6	\ no overflow
 493+ E705              ;06 82                   ASL &82	    \ R \ else move byte mask to the left
 494+ E705              ;90 09                   BCC LIC6	\ no overflow
 495+ E705              ;26 82                   ROL &82		\ R
 496+ E705              ;A5 07                   LDA &07		\ SC
 497+ E705              ;E9 07                   SBC #7		\ down 1 char
 498+ E705              ;85 07                   STA &07		\ SC
 499+ E705              ;18                      CLC
 500+ E705              ;.LIC6	\ no overflow
 501+ E705              ;CA                      DEX 		\ height
 502+ E705              ;D0 DB                   BNE LIL6	\ loop X
 503+ E705              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 504+ E705              ;.HL6
 505+ E705              ;60                      RTS 		\ end Line drawing
 506+ E705
 507+ E705
 508+ E705              ;;l2_draw_diagonalopt:
 509+ E705              	; ">TODO l2_draw_diagonalopt fast horz vert optmisation"
 510+ E705              ;;	push	af
 511+ E705              ;;	ld		a,b
 512+ E705              ;;	cp		d
 513+ E705              ;;	jr		z,.RegularDiagnonal
 514+ E705              ;;.CheckHorz:
 515+ E705              ;;	ld		a,c
 516+ E705              ;;	cp		e
 517+ E705              ;;	jr		z,.horizontalLine
 518+ E705              ;;.RegularDiagnonal:
 519+ E705              ;;	pop		af
 520+ E705              ;;	call diag
 521+ E705
 522+ E705
 523+ E705              ;;l2_signed_mul2a:
 524+ E705              ;;; ">l2_signed_mul2a - Signed a = a * 2 using shift)"
 525+ E705              ;;	TEST	$80
 526+ E705              ;;	jr		nz, .negativecalc
 527+ E705              ;;.positivecalc:
 528+ E705              ;;	ccf
 529+ E705              ;;	rla
 530+ E705              ;;	ret
 531+ E705              ;;.negativecalc:
 532+ E705              ;;	neg
 533+ E705              ;;	ccf
 534+ E705              ;;	rla
 535+ E705              ;;	neg
 536+ E705              ;;	ret
 537+ E705              ;;
 538+ E705              ;;l2_signed_mul2atohl:
 539+ E705              ;;; ">l2_signed_mul2ahl - Signed hl = a * 2 using shift)"
 540+ E705              ;;	TEST	$80
 541+ E705              ;;	jr		nz, .negativecalc
 542+ E705              ;;.positivecalc:
 543+ E705              ;;	ld		hl,0
 544+ E705              ;;	ld		l,a
 545+ E705              ;;	add		hl,a
 546+ E705              ;;	ret
 547+ E705              ;;.negativecalc:
 548+ E705              ;;	neg
 549+ E705              ;;	ld		hl,0
 550+ E705              ;;	ld		l,a
 551+ E705              ;;	neghl
 552+ E705              ;;	ret
 553+ E705              ;;
 554+ E705              ;;l2_e2fractionby2:
 555+ E705              ;;	ld 		hl,(l2fraction)
 556+ E705              ;;	push	de
 557+ E705              ;;	ld		d,h
 558+ E705              ;;	ld		e,l
 559+ E705              ;;	add		hl,de
 560+ E705              ;;	pop		de
 561+ E705              ;;	ld		(l2e2),hl
 562+ E705              ;;	ret
 563+ E705
 564+ E705
 565+ E705
 566+ E705
 567+ E705
 568+ E705              ;;//	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 569+ E705              ;;//.catchLoop:
 570+ E705              ;;//	jp .catchLoop
 571+ E705              ;;//.continue:
 572+ E705              ;;//    ld      A,D
 573+ E705              ;;//    sub     H
 574+ E705              ;;//    jr      NC,.DXpositive    ;delta_x > 0
 575+ E705              ;;//.DXNegative:
 576+ E705              ;;//    neg
 577+ E705              ;;//.DXPositive:
 578+ E705              ;;//    ld      B,A              ;B <- |delta_x|
 579+ E705              ;;//    ld      A,E
 580+ E705              ;;//    sub     L
 581+ E705              ;;//    jr      NC,.DYpositive    ;delta_y > 0
 582+ E705              ;;//.DYNegative:
 583+ E705              ;;//    neg
 584+ E705              ;;//.DYPositive:
 585+ E705              ;;//    sub     B               ;|delta_y|
 586+ E705              ;;//	push	af
 587+ E705              ;;//	jr		c,.DeltaX
 588+ E705              ;;//.DeltaY
 589+ E705              ;;//	ld      A,H             			;if |delta_x| < |delta_y| then
 590+ E705              ;;//    ld      H,L             			;then values x and y are swapped
 591+ E705              ;;//    ld      L,A             			;so the loop will always be performed on the
 592+ E705              ;;//    ld      A,D             			;x value. A flag must be set to
 593+ E705              ;;//    ld      D,E             			;remind that data must be drawn (y,x)
 594+ E705              ;;//    ld      E,A             			;instead of (x,y)
 595+ E705              ;;//.DeltaX:
 596+ E705              ;;//	ld		a,d
 597+ E705              ;;//	sub		h
 598+ E705              ;;//	jr		nc,.TestDY					; x1 < x2
 599+ E705              ;;//.TestDX:
 600+ E705              ;;//	ex		de,hl
 601+ E705              ;;//.TestDY:
 602+ E705              ;;//	ld		a,e
 603+ E705              ;;//	sub		l
 604+ E705              ;;//    ld      A,$01
 605+ E705              ;;//    jr      NC,.StoreA
 606+ E705              ;;//    neg                     ;y1 > y2 : in case2 the 'y' variable
 607+ E705              ;;//.StoreA:
 608+ E705              ;;//        ld      (l2way),A
 609+ E705              ;;//.InitLine:
 610+ E705              ;;//        ld      B,H
 611+ E705              ;;//        ld      C,L
 612+ E705              ;;//        ld      A,E
 613+ E705              ;;//        sub     L
 614+ E705              ;;//        jr      NC,.EndInit
 615+ E705              ;;//        ld      A,L
 616+ E705              ;;//        ld      L,E
 617+ E705              ;;//        ld      E,A
 618+ E705              ;;//.EndInit:
 619+ E705              ;;//        ld      A,E
 620+ E705              ;;//        sub     L
 621+ E705              ;;//        rla
 622+ E705              ;;//        ld      L,A             ;value to add in case1 (d < 0)
 623+ E705              ;;//        add     A,H
 624+ E705              ;;//        sub     D
 625+ E705              ;;//        ld      E,A             ;'d' variable is initialised
 626+ E705              ;;//        add     A,H
 627+ E705              ;;//        sub     D
 628+ E705              ;;//        ld      H,A             ;value to add in case2 (d >= 0)
 629+ E705              ;;//.Loop:
 630+ E705              ;;//        ld      A,B
 631+ E705              ;;//        sub     D
 632+ E705              ;;//        jr      NC,.EndLine       ;the line is completely drawn.
 633+ E705              ;;//        pop     AF
 634+ E705              ;;//        bit     7,A
 635+ E705              ;;//        push    AF
 636+ E705              ;;//        push    AF
 637+ E705              ;;//        push    BC
 638+ E705              ;;//        jr      Z,.DrawPoint
 639+ E705              ;;//        ld      A,B
 640+ E705              ;;//        ld      B,C
 641+ E705              ;;//        ld      C,A
 642+ E705              ;;//.DrawPoint:
 643+ E705              ;;//		push	hl
 644+ E705              ;;//		pushbcdeaf
 645+ E705              ;;//		ld		b,e
 646+ E705              ;;//		ld		c,d
 647+ E705              ;;//	ld 		a,(l2linecolor)
 648+ E705              ;;//	call	l2_plot_pixel
 649+ E705              ;;//		popafdebc
 650+ E705              ;;//		pop		hl
 651+ E705              ;;//        pop     BC
 652+ E705              ;;//        pop     AF
 653+ E705              ;;//.TestD:
 654+ E705              ;;//        bit     7,E
 655+ E705              ;;//        jr      NZ,.Case1
 656+ E705              ;;//.Case2:                          ;d >= 0
 657+ E705              ;;//        ld      A,E
 658+ E705              ;;//        add     A,H
 659+ E705              ;;//        ld      E,A
 660+ E705              ;;//        ld      A,(l2way)
 661+ E705              ;;//        add     A,C
 662+ E705              ;;//        ld      C,A
 663+ E705              ;;//        jr      .EndLoop
 664+ E705              ;;//.Case1:                          ;d < 0
 665+ E705              ;;//        ld      A,E
 666+ E705              ;;//        add     A,L
 667+ E705              ;;//        ld      E,A
 668+ E705              ;;//.EndLoop:
 669+ E705              ;;//        inc     B
 670+ E705              ;;//        jr      .Loop
 671+ E705              ;;//.EndLine:
 672+ E705              ;;//        pop     AF              ;MUST NOT BE REMOVED
 673+ E705              ;;//        pop     HL              ;can be removed
 674+ E705              ;;//        pop     DE              ;can be removed
 675+ E705              ;;//        ret
 676+ E705
 677+ E705              ;;	ld		(.l2yadjust),a
 678+ E705              ;;	call	calcdeltax:
 679+ E705              ;;	ld		(.l2xadjust),a
 680+ E705              ;;.calcfraction:							; err(or fraction) = dx+dy;
 681+ E705              ;;	push	hl
 682+ E705              ;;	push	de
 683+ E705              ;;	ld		hl,(l2deltaX)
 684+ E705              ;;	ld		de,(l2deltaY)
 685+ E705              ;;	add		hl,de
 686+ E705              ;;	ld		(l2fraction),hl
 687+ E705              ;;	pop		de
 688+ E705              ;;	pop		hl
 689+ E705              ;;.mainloop:
 690+ E705              ;;	push	bc
 691+ E705              ;;	push	de
 692+ E705              ;;	ld 		a,(l2linecolor)
 693+ E705              ;;	call	l2_plot_pixel
 694+ E705              ;;	pop		de
 695+ E705              ;;	pop		bc
 696+ E705              ;;.arewefinishedtest
 697+ E705              ;;	ld		a,b
 698+ E705              ;;	cp		d
 699+ E705              ;;	jr		nz,.notthereyet
 700+ E705              ;;	ld		a,c
 701+ E705              ;;	cp		e
 702+ E705              ;;	ret		z
 703+ E705              ;;.notthereyet:
 704+ E705              ;;	push	de
 705+ E705              ;;	call	l2_e2fractionby2			; e2 = 2*err;
 706+ E705              ;;	pop		de
 707+ E705              ;;.e2dytest:								; if (e2 >= dy) /* e_xy+e_x > 0 */  then S and P/V are the same
 708+ E705              ;;	push	de							; so if m & pe  or p & po calc (m = sign set p = 0)
 709+ E705              ;;	ld		de,(l2deltaY)				;    if m & po  or p & pe skip  (pe = pv set po = pv 0)
 710+ E705              ;;	or		a							;
 711+ E705              ;;	sbc		hl,de						;
 712+ E705              ;;	pop		de
 713+ E705              ;;	jr		z,  .dodycalc				; if equal then calc
 714+ E705              ;;	jp		p,	.dodycalc				; sign clear to H>D even with negtives
 715+ E705              ;;	jr		.skipdycalc         		; sign = 0     so  skip as pe
 716+ E705              ;;.dodycalc:
 717+ E705              ;;	ld		hl,(l2fraction)
 718+ E705              ;;	push	de
 719+ E705              ;;	ld		de,(l2deltaY)
 720+ E705              ;;	add		hl,de
 721+ E705              ;;	ld		(l2fraction),de
 722+ E705              ;;	pop		de
 723+ E705              ;;.l2yadjust:
 724+ E705              ;;	nop
 725+ E705              ;;.skipdycalc:
 726+ E705              ;;.e2dxtest:								;  if (e2 <= dx) /* e_xy+e_y < 0 */ then S and P/V are different.
 727+ E705              ;;	ld		hl,(l2e2)
 728+ E705              ;;	push	de							;
 729+ E705              ;;	ld		de,(l2deltaX)				;
 730+ E705              ;;	or		a							; clear carry flag
 731+ E705              ;;	sbc		hl,de						; hl = hl - de is if de > hl will get pv and signed different?
 732+ E705              ;;	pop		de
 733+ E705              ;;	jr		z,.dodxcalc					; e2 == dx so do calc
 734+ E705              ;;	jp		m,.dodxcalc					; was sign bit set
 735+ E705              ;;	jr		.skipdxcalc         	    ; diff so skip ; pvclear = po        pvset = pe
 736+ E705              ;;.dodxcalc:
 737+ E705              ;;	ld		hl,(l2fraction)
 738+ E705              ;;	push	de
 739+ E705              ;;	ld		de,(l2deltaX)
 740+ E705              ;;	add		hl,de
 741+ E705              ;;	ld		(l2fraction),de
 742+ E705              ;;	pop		de
 743+ E705              ;;.l2xadjust:
 744+ E705              ;;	nop
 745+ E705              ;;.skipdxcalc:
 746+ E705              ;;	jr 		.mainloop
 747+ E705
 748+ E705
 749+ E705              ;;/l2_draw_diagonalold:
 750+ E705              ;;/MESSAGE ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 751+ E705              ;;/	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 752+ E705              ;;/.sortycoords:
 753+ E705              ;;/	ld		a,b							; Sort to Y0 is always > y1 so we don't have to deal with step y and only step x
 754+ E705              ;;/	cp		d
 755+ E705              ;;/	jr		nc, .nocoordswap
 756+ E705              ;;/.swapcoords:
 757+ E705              ;;/	ex		de,hl						; save de to hl ! effective code line 98 after macros
 758+ E705              ;;/	lddebc
 759+ E705              ;;/	ldbchl
 760+ E705              ;;/.nocoordswap:
 761+ E705              ;;/	ld		a,d							; l2_dy = -ABS(l2_vy1 - l2_vy0)
 762+ E705              ;;/	sub		b							; we have already sorted  so y1 > y0
 763+ E705              ;;/	ld		(l2deltaY),a
 764+ E705              ;;/	neg									; DEBUG
 765+ E705              ;;/	ld		(l2deltaYn),a				; DEBUG
 766+ E705              ;;/	neg									; DEBUG
 767+ E705              ;;/.deltaxequABSx0Minusx1:						; we need to set l2dx to abs x1-x0 and set
 768+ E705              ;;/    ld		a,c
 769+ E705              ;;/	cp		e
 770+ E705              ;;/	jr		c, .x1GTx0
 771+ E705              ;;/.x1LTx0
 772+ E705              ;;/	ld		a,c
 773+ E705              ;;/	sub		e
 774+ E705              ;;/	ld		(l2deltaX),a				; just 8 bit for now should it be 16?
 775+ E705              ;;/	neg									; DEBUG
 776+ E705              ;;/	ld		(l2deltaXn),a				; DEBUG
 777+ E705              ;;/	neg									; DEBUG
 778+ E705              ;;/	ld		a,l2incbstep
 779+ E705              ;;/	jr		.setlayershift0
 780+ E705              ;;/.x1GTx0:
 781+ E705              ;;/	ld		a,e
 782+ E705              ;;/	sub		c
 783+ E705              ;;/	ld		(l2deltaX),a					; just 8 bit for now should it be 16?
 784+ E705              ;;/	neg									; DEBUG
 785+ E705              ;;/	ld		(l2deltaXn),a				; DEBUG
 786+ E705              ;;/	neg									; DEBUG
 787+ E705              ;;/	ld		a,l2decbstep
 788+ E705              ;;/.setlayershift0:
 789+ E705              ;;/	ld		a,0
 790+ E705              ;;/	pushbcde
 791+ E705              ;;/	call	asm_l2_bank_n_select		; l2_layer_shift = 0 and bank 0 selected
 792+ E705              ;;/	popdebc
 793+ E705              ;;/; so now we have set inc or dec instruction, l2dy, l2dx and on bank 0,
 794+ E705              ;;/.dymuliplyby2:
 795+ E705              ;;/	ld		a, (l2deltaY)				; dy *= 2
 796+ E705              ;;/	call	l2_signed_mul2a
 797+ E705              ;;/	ld		(l2deltaYsq),a
 798+ E705              ;;/	neg									; DEBUG
 799+ E705              ;;/	ld		(l2deltaYsqn),a				; DEBUG
 800+ E705              ;;/	neg									; DEBUG
 801+ E705              ;;/.dxmuliplyby2:
 802+ E705              ;;/	ld		a, (l2deltaX)				; dx *= 2
 803+ E705              ;;/	call	l2_signed_mul2a
 804+ E705              ;;/	ld		(l2deltaXsq),a
 805+ E705              ;;/	neg									; DEBUG
 806+ E705              ;;/	ld		(l2deltaXsqn),a				; DEBUG
 807+ E705              ;;/	neg									; DEBUG
 808+ E705              ;;/.plotfirstpixel:
 809+ E705              ;;/	pushbcde
 810+ E705              ;;/	ld a,(l2linecolor)
 811+ E705              ;;/	call	l2_plot_pixel
 812+ E705              ;;/	popdebc
 813+ E705              ;;/.mainloop:								; if (l2_dx > l2_dy) signed
 814+ E705              ;;/	ld		a,(l2deltaX)				;If A < N, then S and P/V are different.
 815+ E705              ;;/	ld		hl,l2deltaY					;A >= N, then S and P/V are the same
 816+ E705              ;;/	cp		(hl)
 817+ E705              ;;/	jp		m,	.signset
 818+ E705              ;;/.signclear:
 819+ E705              ;;/	jp		pe,	.dxLTEdybranch
 820+ E705              ;;/	jr		.dxGTdybranch
 821+ E705              ;;/.signset:
 822+ E705              ;;/	jp		po,	.dxLTEdybranch
 823+ E705              ;;/.dxGTdybranch:
 824+ E705              ;;/	ld		a,(l2deltaYsq)
 825+ E705              ;;/	ld		hl,l2deltaX
 826+ E705              ;;/	sub		(hl)
 827+ E705              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 dx
 828+ E705              ;;/.BranchAwhile							; while (l2_vx0 != l2_vx1)
 829+ E705              ;;/	ld		a,c
 830+ E705              ;;/	cp		e
 831+ E705              ;;/	ret		z							; if x0 = x1 then done
 832+ E705              ;;/.BranchAtestfraction:					; if (l2_fraction >= 0)
 833+ E705              ;;/	ld		a,(l2fraction)
 834+ E705              ;;/	TEST	$80
 835+ E705              ;;/	jr		nz,.BranchAskipYstep
 836+ E705              ;;/	inc		b							; 		++l2_vy0;
 837+ E705              ;;/	ld		hl,l2deltaXsq
 838+ E705              ;;/	sub		(hl)						; 		l2_fraction -= l2_dx;
 839+ E705              ;;/	ld		(l2fraction),a
 840+ E705              ;;/.BranchAskipYstep:
 841+ E705              ;;/.l2stepx1:
 842+ E705              ;;/	inc		b							; this is self modifying code point 1 l2_vx0 += l2_stepx
 843+ E705              ;;/	ld		a,(l2fraction)				; l2_fraction += l2_dy can optimise later as a already has this?
 844+ E705              ;;/	ld		hl,l2deltaYsq
 845+ E705              ;;/	add		a,(hl)
 846+ E705              ;;/	ld		(l2fraction),a
 847+ E705              ;;/.BranchAplotBCColA:						; l2_plot_pixel(l2_vx0,l2_vy0,color);
 848+ E705              ;;/	pushbcde
 849+ E705              ;;/	ld a,(l2linecolor)
 850+ E705              ;;/	call	l2_plot_pixel
 851+ E705              ;;/	popdebc
 852+ E705              ;;/.BranchAloop:
 853+ E705              ;;/	jr		.BranchAwhile
 854+ E705              ;;/.dxLTEdybranch:
 855+ E705              ;;/	ld		a,(l2deltaXsq)				; l2_fraction = l2_dx - (l2_dy >> 1);
 856+ E705              ;;/	ld		hl, l2deltaY
 857+ E705              ;;/	sub		(hl)
 858+ E705              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 d
 859+ E705              ;;/.BranchBwhile:							; while (l2_vy0 != l2_vy1)
 860+ E705              ;;/	ld		a,b
 861+ E705              ;;/	cp		d
 862+ E705              ;;/	ret		z							; if x0 = x1 then done
 863+ E705              ;;/.BranchBtestfraction:					; if (l2_fraction >= 0)
 864+ E705              ;;/	ld		a,(l2fraction)
 865+ E705              ;;/	TEST	$80
 866+ E705              ;;/	jr		nz,.BranchBskipYstep
 867+ E705              ;;/.l2stepx2
 868+ E705              ;;/	inc		b							; l2_vx0 += l2_stepx; this is self modifying code point 2
 869+ E705              ;;/	ld		a,(l2fraction)				; l2_fraction -= l2_dy
 870+ E705              ;;/	ld		hl,l2deltaYsq
 871+ E705              ;;/	sub		(hl)
 872+ E705              ;;/	ld		(l2fraction),a
 873+ E705              ;;/.BranchBskipYstep:
 874+ E705              ;;/	ld		hl, l2deltaYsq
 875+ E705              ;;/	add		a,(hl)
 876+ E705              ;;/	ld		(l2fraction),a
 877+ E705              ;;/	inc		b							; ++l2_vy0;
 878+ E705              ;;/.BranchBplotBCColA:
 879+ E705              ;;/	pushbcde
 880+ E705              ;;/	ld a,(l2linecolor)
 881+ E705              ;;/	call	l2_plot_pixel
 882+ E705              ;;/	popdebc
 883+ E705              ;;/.BranchBloop:
 884+ E705              ;;/	jr		.BranchBwhile
 885+ E705
# file closed: ./Layer2Graphics/layer2_plot_diagonal.asm
1295  E705                  INCLUDE "./Layer2Graphics/asm_l2_plot_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_triangle.asm
   1+ E705
   2+ E705
   3+ E705
   4+ E705 00 00        l2trianglebc	        DW 0
   5+ E707 00 00        l2trianglede	        DW 0
   6+ E709 00 00        l2trianglehl	        DW 0
   7+ E70B
   8+ E70B              ; "l2_draw_triangle, BC = y1x1, DE=y2x2, HL=y3x3 a = Color"
   9+ E70B C5 D5 E5 F5  l2_draw_triangle:       push	bc,,de,,hl,,af
  10+ E70F CD 33 E6                             call	l2_draw_diagonal		; BC to DE
  11+ E712 F1                                   pop		af
  12+ E713 D1                                   pop		de						; swap DE and HL
  13+ E714 E1                                   pop		hl						; so BC to DE is really to HL
  14+ E715 C1                                   pop		bc
  15+ E716 D5 E5                                push    de,,hl                    ; which is pushing original hl then original de
  16+ E718 F5                                   push	af
  17+ E719 CD 33 E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  18+ E71C F1                                   pop		af
  19+ E71D C1                                   pop		bc						; Now bc = original de
  20+ E71E D1                                   pop		de						; de = original hl
  21+ E71F CD 33 E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  22+ E722 C9                                   ret
  23+ E723
  24+ E723
  25+ E723
  26+ E723
  27+ E723
# file closed: ./Layer2Graphics/asm_l2_plot_triangle.asm
1296  E723                  INCLUDE "./Layer2Graphics/asm_l2_fill_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_fill_triangle.asm
   1+ E723              ; ">l2_fillBottomFlatTriangle BC y0x0 DE x1x2, H YCommon, L Colour"
   2+ E723              ; "note >l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
   3+ E723              ; "note line to   bc = left side row,col, d right pixel, e = color"
   4+ E723 DD 01        l2_fillBottomFlatTriangle:break
   5+ E725 7D                                   ld		a,l
   6+ E726 32 4C E3                             ld		(l2linecolor),a
   7+ E729 79                                   ld		a,c
   8+ E72A BB                                   cp		e
   9+ E72B 30 08                                jr		nc, .x2gtex1
  10+ E72D DD 26 01     .x1ltx2:                ld		ixh,1                           ; list 1 holds x0 down to x1
  11+ E730 DD 2E 02                             ld		ixl,2                           ; list 2 hols  x0 down to x2
  12+ E733 18 06                                jr		.storepoints
  13+ E735 DD 26 02     .x2gtex1:               ld		ixh,2
  14+ E738 DD 2E 01                             ld		ixl,1
  15+ E73B C5 D5 E5     .storepoints:           push	bc,,de,,hl
  16+ E73E DD 7C                                ld		a,ixh
  17+ E740 5A                                   ld		e,d                             ; we alreay have bc so its now bc -> hd
  18+ E741 54                                   ld		d,h
  19+ E742 CD 54 E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x1,ycommon,l2_LineMinX);
  20+ E745 E1 D1 C1                             pop		bc,,de,,hl
  21+ E748 C5 E5                                push	bc,,hl
  22+ E74A 54                                   ld		d,h                             ; now its bc -> he
  23+ E74B DD 7D                                ld		a,ixl
  24+ E74D CD 54 E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x2,ycommon,l2_LineMaxX);
  25+ E750 E1 C1                                pop		bc,,hl
  26+ E752 50           .SaveForLoop:           ld		d,b
  27+ E753 5C                                   ld		e,h								; save loop counters
  28+ E754 D5                                   push	de								; de = y0ycommon
  29+ E755 21 54 E3     .GetFirstHorizontalRow:	ld		hl,l2targetArray1               ; get first row for loop
  30+ E758 78                                   ld		a,b
  31+ E759 ED 31                                add		hl,a							; hl = l2targetArray1 row b
  32+ E75B 7E                                   ld		a,(hl)							;
  33+ E75C 4F                                   ld		c,a								; c = col1 i.e. l2targetarray1[b]
  34+ E75D 21 54 E4                             ld      hl,l2targetArray2
  35+ E760 78                                   ld      a,b
  36+ E761 ED 31                                add     hl,a
  37+ E763              ;                        inc		h								; hl = l2targetArray2 row b if we interleave
  38+ E763 7E                                   ld		a,(hl)
  39+ E764 57                                   ld		d,a								; d = col2 i.e. l2targetarray2[b]
  40+ E765 3A 4C E3     .SetColour:             ld		a,(l2linecolor)
  41+ E768 5F                                   ld		e,a								; de = to colour
  42+ E769 C5           .SavePoints:            push	bc								; bc = rowcol
  43+ E76A 25                                   dec		h
  44+ E76B E5                                   push	hl								; hl = l2targetArray1[b]
  45+ E76C CD B6 E2     .DoLine:	            call	l2_draw_horz_line_to
  46+ E76F E1                                   pop		hl
  47+ E770 C1                                   pop		bc
  48+ E771 04                                   inc		b								; down a rowc
  49+ E772 D1                                   pop		de								; de = from to (and b also = current)
  50+ E773 14                                   inc		d
  51+ E774 7B                                   ld		a,e								; while e >= d
  52+ E775 BA                                   cp		d
  53+ E776 30 DA                                jr 		nc,.SaveForLoop					; Is this the right point??
  54+ E778 C9                                   ret
  55+ E779
# file closed: ./Layer2Graphics/asm_l2_fill_triangle.asm
1297  E779                  INCLUDE "./Layer2Graphics/layer2_plot_circle.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle.asm
   1+ E779
   2+ E779 00 00        l2_circle_pos		DW 0
   3+ E77B 00           l2_circle_colour	DB 0
   4+ E77C 00           l2_circle_radius	DB 0
   5+ E77D 00           l2_circle_x			DB 0
   6+ E77E 00           l2_circle_y			DB 0
   7+ E77F 00           l2_circle_d			DB 0
   8+ E780
   9+ E780              ; ">l2_draw_circle BC = center row col, d = radius, e = colour"
  10+ E780 7B           l2_draw_circle:     ld		a,e
  11+ E781 32 27 E8                         ld		(.PlotPixel+1),a
  12+ E784 7A                               ld		a,d								; get radius
  13+ E785 A7                               and		a
  14+ E786 C8                               ret		z
  15+ E787 FE 01                            cp		1
  16+ E789 CA 32 E8                         jp		z,CircleSinglepixel
  17+ E78C ED 43 B6 E7                      ld		(.Plot1+1),bc					; save origin into DE reg in code
  18+ E790 DD 67                            ld		ixh,a							; ixh = raidus
  19+ E792 DD 2E 00                         ld		ixl,0
  20+ E795 26 00        .calcd:	            ld		h,0
  21+ E797 6F                               ld		l,a
  22+ E798 29                               add		hl,hl							; hl = r * 2
  23+ E799 EB                               ex		de,hl							; de = r * 2
  24+ E79A 21 03 00                         ld		hl,3
  25+ E79D A7                               and		a
  26+ E79E ED 52                            sbc		hl,de							; hl = 3 - (r * 2)
  27+ E7A0 44                               ld		b,h
  28+ E7A1 4D                               ld		c,l								; bc = 3 - (r * 2)
  29+ E7A2 21 01 00     .calcdelta:         ld		hl,1
  30+ E7A5 16 00                            ld		d,0
  31+ E7A7 DD 5D                            ld		e,ixl
  32+ E7A9 A7                               and		a
  33+ E7AA ED 52                            sbc		hl,de
  34+ E7AC 11 01 00     .Setde1:            ld		de,1
  35+ E7AF DD 7C        .CircleLoop:        ld		a,ixh
  36+ E7B1 DD BD                            cp		ixl
  37+ E7B3 D8                               ret		c
  38+ E7B4 D9           .ProcessLoop:	    exx
  39+ E7B5 11 00 00     .Plot1:             ld		de,0
  40+ E7B8 7B                               ld		a,e
  41+ E7B9 DD 85                            add		a,ixl
  42+ E7BB 4F                               ld		c,a
  43+ E7BC 7A                               ld		a,d
  44+ E7BD DD 84                            add		a,ixh
  45+ E7BF 47                               ld		b,a
  46+ E7C0 CD 26 E8                         call	.PlotPixel			;CX+X,CY+Y
  47+ E7C3 7B           .Plot2:             ld 		a,e
  48+ E7C4 DD 95                            sub 	ixl
  49+ E7C6 4F                               ld 		c,a
  50+ E7C7 7A                               ld 		a,d
  51+ E7C8 DD 84                            add 	a,ixh
  52+ E7CA 47                               ld		b,a
  53+ E7CB CD 26 E8                         call	.PlotPixel			;CX-X,CY+Y
  54+ E7CE 7B           .Plot3:             ld 		a,e
  55+ E7CF DD 85                            add		a,ixl
  56+ E7D1 4F                               ld 		c,a
  57+ E7D2 7A                               ld 		a,d
  58+ E7D3 DD 94                            sub 	ixh
  59+ E7D5 47                               ld 		b,a
  60+ E7D6 CD 26 E8                         call	.PlotPixel			;CX+X,CY-Y
  61+ E7D9 7B           .Plot4:             ld 		a,e
  62+ E7DA DD 95                            sub 	ixl
  63+ E7DC 4F                               ld 		c,a
  64+ E7DD 7A                               ld 		a,d
  65+ E7DE DD 94                            sub 	ixh
  66+ E7E0 47                               ld 		b,a
  67+ E7E1 CD 26 E8                         call	.PlotPixel			;CY+X,CX-Y
  68+ E7E4 7A           .Plot5:	            ld 		a,d
  69+ E7E5 DD 85                            add 	a,ixl
  70+ E7E7 47                               ld 		b,a
  71+ E7E8 7B                               ld 		a,e
  72+ E7E9 DD 84                            add 	a,ixh
  73+ E7EB 4F                               ld 		c,a
  74+ E7EC CD 26 E8                         call	.PlotPixel			;CY+X,CX+Y
  75+ E7EF 7A           .Plot6:	            ld 		a,d
  76+ E7F0 DD 95                            sub 	ixl
  77+ E7F2 47                               ld 		b,a
  78+ E7F3 7B                               ld 		a,e
  79+ E7F4 DD 84                            add 	a,ixh
  80+ E7F6 4F                               ld 		c,a
  81+ E7F7 CD 26 E8                         call	.PlotPixel			;CY-X,CX+Y
  82+ E7FA 7A           .Plot7:	            ld 		a,d
  83+ E7FB DD 85                            add 	a,ixl
  84+ E7FD 47                               ld 		b,a
  85+ E7FE 7B                               ld 		a,e
  86+ E7FF DD 94                            sub 	ixh
  87+ E801 4F                               ld 		c,a
  88+ E802 CD 26 E8                         call	.PlotPixel			;CY+X,CX-Y
  89+ E805 7A           .Plot8:	            ld 		a,d
  90+ E806 DD 95                            sub 	ixl
  91+ E808 47                               ld		b,a
  92+ E809 7B                               ld 		a,e
  93+ E80A DD 94                            sub 	ixh
  94+ E80C 4F                               ld 		c,a
  95+ E80D CD 26 E8                         call	.PlotPixel			;CX+X,CY-Y
  96+ E810 D9                               exx
  97+ E811 CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
  98+ E813 28 03                            jr z,   .draw_circle_1
  99+ E815 19                               add hl,de			; Delta=Delta+D1
 100+ E816 18 05                            jr      .draw_circle_2		;
 101+ E818 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 102+ E819 03                               inc     bc
 103+ E81A 03                               inc     bc				; D2=D2+2
 104+ E81B DD 25                            dec     ixh				; Y=Y-1
 105+ E81D 03           .draw_circle_2:		inc bc				; D2=D2+2
 106+ E81E 03                               inc bc
 107+ E81F 13                               inc de				; D1=D1+2
 108+ E820 13                               inc de
 109+ E821 DD 2C                            inc ixl				; X=X+1
 110+ E823 C3 AF E7                         jp      .CircleLoop
 111+ E826 3E 00        .PlotPixel:         ld		a,0                  ; This was originally indirect, where as it neeed to be value
 112+ E828 D5 C5 E5                         push	de,,bc,,hl
 113+ E82B CD 43 E1                         call 	l2_plot_pixel_y_test
 114+ E82E E1 C1 D1                         pop		de,,bc,,hl
 115+ E831 C9                               ret
 116+ E832 7B           CircleSinglepixel:  ld		a,e
 117+ E833 CD 43 E1                         call	l2_plot_pixel_y_test
 118+ E836 C9                               ret
 119+ E837
# file closed: ./Layer2Graphics/layer2_plot_circle.asm
1298  E837                  INCLUDE "./Layer2Graphics/layer2_plot_circle_fill.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle_fill.asm
   1+ E837
   2+ E837 00           l2_circle_dblx		DB 0
   3+ E838 00           l2_circle_dbly		DB 0
   4+ E839
   5+ E839              ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
   6+ E839              ; Note this code currently does not process BC
   7+ E839 7B           l2_draw_circle_fill:    ld		a,e
   8+ E83A 32 D0 E8                             ld		(.LineColour+1),a
   9+ E83D 7A                                   ld		a,d								; get radius
  10+ E83E A7                                   and		a
  11+ E83F C8                                   ret		z
  12+ E840 FE 01                                cp		1
  13+ E842 CA 32 E8                             jp		z,CircleSinglepixel
  14+ E845 ED 43 6F E8                          ld		(.Line1+1),bc					; save origin into DE reg in code
  15+ E849 DD 67                                ld		ixh,a							; ixh = raidus (x)
  16+ E84B DD 2E 00                             ld		ixl,0							; ihy = y
  17+ E84E 26 00        .calcd:	                ld		h,0
  18+ E850 6F                                   ld		l,a
  19+ E851 29                                   add		hl,hl							; hl = r * 2
  20+ E852 EB                                   ex		de,hl							; de = r * 2
  21+ E853 21 03 00                             ld		hl,3
  22+ E856 A7                                   and		a
  23+ E857 ED 52                                sbc		hl,de							; hl = 3 - (r * 2)
  24+ E859 44                                   ld		b,h
  25+ E85A 4D                                   ld		c,l								; bc = 3 - (r * 2)
  26+ E85B 21 01 00     .calcdelta              ld		hl,1
  27+ E85E 16 00                                ld		d,0
  28+ E860 DD 5D                                ld		e,ixl
  29+ E862 A7                                   and		a
  30+ E863 ED 52                                sbc		hl,de
  31+ E865 11 01 00     .Setde1	                ld		de,1
  32+ E868 DD 7C        .CircleLoop:            ld		a,ixh
  33+ E86A DD BD                                cp		ixl
  34+ E86C D8                                   ret		c
  35+ E86D D9           .ProcessLoop:	        exx
  36+ E86E 11 00 00     .Line1:                 ld		de,0
  37+ E871 7B                                   ld 		a,e
  38+ E872 DD 95                                sub 	ixl
  39+ E874 4F                                   ld 		c,a
  40+ E875 7A                                   ld 		a,d
  41+ E876 DD 84                                add 	a,ixh
  42+ E878 47                                   ld		b,a
  43+ E879                                      ;; TODO ADD DOUBLE X CALC
  44+ E879 D5                                   push	de
  45+ E87A DD 55                                ld		d,ixl
  46+ E87C CB 22                                sla		d
  47+ E87E CD CB E8                             call	.PlotLine			;CX-X,CY+Y
  48+ E881 D1                                   pop		de
  49+ E882 7B           .Line2:                 ld 		a,e
  50+ E883 DD 95                                sub		ixl
  51+ E885 4F                                   ld 		c,a
  52+ E886 7A                                   ld 		a,d
  53+ E887 DD 94                                sub 	ixh
  54+ E889 47                                   ld 		b,a
  55+ E88A                                      ;; TODO ADD DOUBLE X CALC
  56+ E88A D5                                   push	de
  57+ E88B DD 55                                ld		d,ixl
  58+ E88D CB 22                                sla		d
  59+ E88F CD CB E8                             call	.PlotLine			;CX-X,CY-Y
  60+ E892 D1                                   pop		de
  61+ E893 7B           .Line3:	                ld 		a,e
  62+ E894 DD 94                                sub		ixh
  63+ E896 4F                                   ld 		c,a
  64+ E897 7A                                   ld 		a,d
  65+ E898 DD 85                                add 	a,ixl
  66+ E89A 47                                   ld 		b,a
  67+ E89B                                      ;; TODO ADD DOUBLE Y CALC
  68+ E89B D5                                   push	de
  69+ E89C DD 54                                ld		d,ixh
  70+ E89E CB 22                                sla		d
  71+ E8A0 CD CB E8                             call	.PlotLine			;CX-Y,CY+x
  72+ E8A3 D1                                   pop		de
  73+ E8A4 7B           .Line4:	                ld 		a,e
  74+ E8A5 DD 94                                sub		ixh
  75+ E8A7 4F                                   ld 		c,a
  76+ E8A8 7A                                   ld 		a,d
  77+ E8A9 DD 95                                sub 	ixl
  78+ E8AB 47                                   ld 		b,a
  79+ E8AC                                      ;; TODO ADD DOUBLE Y CALC
  80+ E8AC D5                                   push	de
  81+ E8AD DD 54                                ld		d,ixh
  82+ E8AF CB 22                                sla		d
  83+ E8B1 CD CB E8                             call	.PlotLine			;CX-Y,CY+x
  84+ E8B4 D1                                   pop		de
  85+ E8B5 D9                                   exx
  86+ E8B6 CB 7C        .IncrementCircle:	    bit 7,h				; Check for Hl<=0
  87+ E8B8 28 03                                jr z,.draw_circle_1
  88+ E8BA 19                                   add hl,de			; Delta=Delta+D1
  89+ E8BB 18 05                                jr .draw_circle_2		;
  90+ E8BD 09           .draw_circle_1:		    add hl,bc			; Delta=Delta+D2
  91+ E8BE 03                                   inc bc
  92+ E8BF 03                                   inc bc				; D2=D2+2
  93+ E8C0 DD 25                                dec ixh				; Y=Y-1
  94+ E8C2 03           .draw_circle_2:		    inc bc				; D2=D2+2
  95+ E8C3 03                                   inc bc
  96+ E8C4 13                                   inc de				; D1=D1+2
  97+ E8C5 13                                   inc de
  98+ E8C6 DD 2C                                inc ixl				; X=X+1
  99+ E8C8 C3 68 E8                             jp .CircleLoop
 100+ E8CB D5 C5 E5 F5  .PlotLine:              push	de,,bc,,hl,,af
 101+ E8CF 3E 00        .LineColour:	        ld		a,0         ; circle colur
 102+ E8D1 5F                                   ld      e,a
 103+ E8D2 CD 8A E2                             call 	l2_draw_horz_line
 104+ E8D5 F1 E1 C1 D1                          pop     de,,bc,,hl,,af
 105+ E8D9 C9                                   ret
 106+ E8DA
# file closed: ./Layer2Graphics/layer2_plot_circle_fill.asm
1299  E8DA                  INCLUDE "./Layer2Graphics/l2_draw_any_line.asm"
# file opened: ./Layer2Graphics/l2_draw_any_line.asm
   1+ E8DA              ; ">l2_draw_any_line, bc = y0,x0 de=y1,x1,a=color: determines if its horizontal, vertical or diagonal then hands off the work"
   2+ E8DA 08           l2_draw_any_line:       ex		af,af'              ; save colour into a'
   3+ E8DB 79                                   ld		a,c                 ; if x and e are the same its horizontal
   4+ E8DC BB                                   cp		e
   5+ E8DD 28 08                                jr		z,.HorizontalLineCheck
   6+ E8DF 78                                   ld		a,b                 ; if b and d are the same its vertica;
   7+ E8E0 BA                                   cp		d
   8+ E8E1 28 0E                                jr		z,.VerticalLine
   9+ E8E3              ; use jp and get a free ret instruction optimisation
  10+ E8E3 08           .DiagonalLine:		    ex		af,af'			     ; get colour back into a
  11+ E8E4 C3 33 E6                             jp		l2_draw_diagonal
  12+ E8E7
  13+ E8E7 78           .HorizontalLineCheck:   ld      a,b
  14+ E8E8 BA                                   cp      d
  15+ E8E9 28 0B                                jr      z, .SinglePixel
  16+ E8EB 08           .HorizontalLine:        ex		af,af'              ; get colour back into a
  17+ E8EC 53                                   ld		d,e				    ; set d as target right pixel
  18+ E8ED 5F                                   ld		e,a				    ; e holds colour on this call
  19+ E8EE C3 B6 E2                             jp		l2_draw_horz_line_to
  20+ E8F1 08           .VerticalLine:          ex		af,af'
  21+ E8F2 5F                                   ld		e,a				    ; e holds colour on this call
  22+ E8F3 C3 35 E3                             jp		l2_draw_vert_line_to
  23+ E8F6 08           .SinglePixel:           ex		af,af'              ; get colour back into a
  24+ E8F7 C3 29 E1                             jp      l2_plot_pixel
  25+ E8FA              ;......................................................
  26+ E8FA
# file closed: ./Layer2Graphics/l2_draw_any_line.asm
1300  E8FA                  INCLUDE "./Layer2Graphics/clearLines-LL155.asm"
# file opened: ./Layer2Graphics/clearLines-LL155.asm
   1+ E8FA              ; ClearLines (LL155)
   2+ E8FA              ;   y = 0
   3+ E8FA              ; 	XX20 = UbnkEdgeHeapSize
   4+ E8FA              ;   exit if XX20 < 4
   5+ E8FA              ;   ++y
   6+ E8FA              ;   do
   7+ E8FA              ;		X1 = XX19(Y) ;	Y1 = XX19(++Y) ;	X2 = XX19(++Y);	Y2 = XX19(++Y)
   8+ E8FA              ;   	call DrawLine (x1,y1 to x2,y2) two's compliment (we will do 0)
   9+ E8FA              ;		++y
  10+ E8FA              ;	until Y > XX20
  11+ E8FA
  12+ E8FA              clearLines:
  13+ E8FA              layer2_clearLines:
  14+ E8FA 3A 00 C3     LL155cl:                ld		a,(UbnkLineArrayLen)
  15+ E8FD 47                                   ld		b,a
  16+ E8FE 21 0E C2                             ld		hl,UbnkLineArray
  17+ E901 C5           clearLinesLoop:         push	bc
  18+ E902 7E                                   ld		a,(hl)
  19+ E903 23                                   inc		hl
  20+ E904 4F                                   ld		c,a
  21+ E905 7E                                   ld		a,(hl)
  22+ E906 23                                   inc		hl
  23+ E907 47                                   ld		b,a
  24+ E908 7E                                   ld		a,(hl)
  25+ E909 23                                   inc		hl
  26+ E90A 5F                                   ld		e,a
  27+ E90B 7E                                   ld		a,(hl)
  28+ E90C 23                                   inc		hl
  29+ E90D 57                                   ld		d,a
  30+ E90E 3E E3                                ld		a,COLOUR_TRANSPARENT		; we erase here
  31+ E910 E5                                   push	hl
  32+ E911 CD DA E8                             call    l2_draw_any_line
  33+ E914 E1                                   pop		hl
  34+ E915 C1                                   pop		bc
  35+ E916 10 E9                                djnz	clearLinesLoop
  36+ E918 C9                                   ret
  37+ E919
# file closed: ./Layer2Graphics/clearLines-LL155.asm
1301  E919                  INCLUDE "./Layer2Graphics/l2_draw_line_v2.asm"
# file opened: ./Layer2Graphics/l2_draw_line_v2.asm
   1+ E919              ; ******************************************************************************
   2+ E919              ;
   3+ E919              ;	Draw a pixel line from (x0,y0) defined in (COORDS) - the current plot
   4+ E919              ;	coordinate, to the relative distance points (x0+x,y0+y).
   5+ E919              ;
   6+ E919              ;	Design & programming by Gunther Strube,	Copyright (C) InterLogic 1995
   7+ E919              ;
   8+ E919              ;	The (COORDS+0)	pointer contains the current y coordinate, (COORDS+1) the
   9+ E919              ;	current x coordinate. The main program should reset the (COORDS) variables
  10+ E919              ;	before using line drawing.
  11+ E919              ;
  12+ E919              ;	The routine checks the range of specified coordinates which is the
  13+ E919              ;	boundaries of the graphics area (256x64	pixels).
  14+ E919              ;	If a boundary error occurs the routine exits automatically.	This may be
  15+ E919              ;	useful if you are trying to draw a line longer than allowed. Only the
  16+ E919              ;	visible part will be drawn.
  17+ E919              ;
  18+ E919              ;	The hardware graphics memory is organized as (0,0) in the top left corner.
  19+ E919              ;
  20+ E919              ;	The plot routine is	defined by an address pointer	in IX.
  21+ E919              ;
  22+ E919              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
  23+ E919              ;		DE =	move	relative y vertical	points (maximum +/-	255).
  24+ E919              ;		IX =	pointer to plot routine that uses HL = (x,y)	of plot coordinate.
  25+ E919              ;
  26+ E919              ;	OUT:	None.
  27+ E919              ;
  28+ E919              ;	Registers	used	by routine:
  29+ E919              ;		   N	:	B, loop counter
  30+ E919              ;		   i	:	line	balance variable
  31+ E919              ;		   x	:	H/L,	horisontal, vertical distance	variables
  32+ E919              ;		   y	:	H/L,	horisontal, vertical distance	variables
  33+ E919              ;	  (x0,y0)	:	(h,l)
  34+ E919              ;	  direc_x	:	d, horisontal step increment
  35+ E919              ;	  direc_y	:	e, vertical step increment
  36+ E919              ;		 ddx	:	b, horisontal step increment
  37+ E919              ;		 ddy	:	c, vertical step increment
  38+ E919              ;
  39+ E919              ;		DE, A work registers.
  40+ E919              ;
  41+ E919              ; The algorithm in pseudo-code:
  42+ E919              ;
  43+ E919              ;	direc_x =	SGN x: direc_y	= SGN y
  44+ E919              ;	x = ABS x: y =	ABS y
  45+ E919              ;
  46+ E919              ;	if x	>= y
  47+ E919              ;		if x+y=0 then return
  48+ E919              ;		H = x
  49+ E919              ;		L = y
  50+ E919              ;		ddx = direc_x
  51+ E919              ;		ddy = 0
  52+ E919              ;	else
  53+ E919              ;		H = y
  54+ E919              ;		L = x
  55+ E919              ;		ddx = 0
  56+ E919              ;		ddy = direc_y
  57+ E919              ;	endif
  58+ E919              ;
  59+ E919              ;	B = H
  60+ E919              ;	i = INT(B/2)
  61+ E919              ;	FOR N=B TO 1 STEP -1
  62+ E919              ;		i = i + L
  63+ E919              ;		if i	< H
  64+ E919              ;			ix =	ddx
  65+ E919              ;			iy =	ddy
  66+ E919              ;		else
  67+ E919              ;			i = i - H
  68+ E919              ;			ix =	direc_x
  69+ E919              ;			iy =	direc_y
  70+ E919              ;		endif
  71+ E919              ;		x0 =	x0 +	ix
  72+ E919              ;		y0 =	y0 +	iy
  73+ E919              ;		plot	(x0,y0)
  74+ E919              ;	NEXT	N
  75+ E919              ;
  76+ E919              ;
  77+ E919              ;	Registers	changed after return:
  78+ E919              ;		..BCDEHL/IXIY/af......	same
  79+ E919              ;		AF....../..../..bcdehl	different
  80+ E919              ;
  81+ E919 DF           line_gfx_colour db $DF
  82+ E91A 00 00        line_gfx_coords	dw 0
  83+ E91C              LineHLtoDE:
  84+ E91C 7C           TestMaxY:               ld	a,h ; were h = y or l = y?
  85+ E91D FE C0                                cp	192
  86+ E91F 30 26                                jr	nc, exit_line		; y0	coordinate out	of range
  87+ E921 7A                                   ld	a,d
  88+ E922 FE C0                                cp	192
  89+ E924 30 21                                jr	nc, exit_line		; y1	coordinate out	of range
  90+ E926 22 1A E9                             ld	(line_gfx_coords),hl		; the starting	point is now default
  91+ E929 E5                                   push	hl
  92+ E92A D5                                   push	de
  93+ E92B 6C                                   ld	l,h				; L = x0
  94+ E92C 62                                   ld	h,d				; H = x1
  95+ E92D 7C           distanceX:		        ld	a,h
  96+ E92E 95                                   sub	l
  97+ E92F 6F                                   ld	l,a
  98+ E930 26 00                                ld	h,0
  99+ E932 30 02                                jr	nc, distanceXDone
 100+ E934 26 FF                                ld	h,-1
 101+ E936 D1           distanceXDone:          pop	de
 102+ E937 E3                                   ex	(sp),hl			; L = y0
 103+ E938 63                                   ld	h,e				; H = y1
 104+ E939 7C           distanceY:		        ld	a,h
 105+ E93A 95                                   sub	l
 106+ E93B 6F                                   ld	l,a
 107+ E93C 26 00                                ld	h,0
 108+ E93E 30 02                                jr	nc, distanceYDone
 109+ E940 26 FF                                ld	h,-1
 110+ E942 D1           distanceYDone:          pop	de
 111+ E943 EB                                   ex	de,hl			; h.dist.	= HL, v.dist. = DE
 112+ E944 CD 48 E9                             call	DrawLineRelative			; draw line...
 113+ E947 C9           exit_line:              ret
 114+ E948
 115+ E948              ; ***************************************************************************
 116+ E948              ;
 117+ E948              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
 118+ E948              ;		DE =	move	relative y vertical	points (maximum +/-	255).
 119+ E948              ;
 120+ E948              ; OUT: h - l distance in	HL
 121+ E948              ;
 122+ E948
 123+ E948 D5           DrawLineRelative:       push	de
 124+ E949 E5                                   push	hl
 125+ E94A D9                                   exx
 126+ E94B E1                                   pop	hl					; get relative	horisontal movement
 127+ E94C CD B7 E9                             call	sgn
 128+ E94F 57                                   ld	d,a					; direc_x	= SGN(x) installed d = +/-1 for horizontal update
 129+ E950 CD C4 E9                             call	absValue
 130+ E953 45                                   ld	b,l					; x = ABS(x)
 131+ E954 E1           DrawLineGetVertRelative:pop	hl					; get relative	vertical movement
 132+ E955 CD B7 E9                             call	sgn
 133+ E958 5F                                   ld	e,a					; direc_y	= SGN(y) installed  = +/-1 for vertical update
 134+ E959 CD C4 E9                             call	absValue
 135+ E95C 4D                                   ld	c,l					; y = ABS(y) so now bc = dxdy
 136+ E95D              ; so by here BC = dx dy HL in increment/decrement x y
 137+ E95D C5                                   push	bc
 138+ E95E D9                                   exx
 139+ E95F E1                                   pop	hl					; H = absolute	x dist., L = absolute y distance
 140+ E960 7C                                   ld	a,h
 141+ E961 BD                                   cp	l
 142+ E962 38 0A                                jr	c, x_smaller_y		; if	x >=	y
 143+ E964 B4           areXandYZero:           or	h					;	if x+y = 0
 144+ E965 28 4F                                jr	z, exit_draw		;		return
 145+ E967 D9           y_lessorequal_x:        exx						;	else
 146+ E968 42                                   ld	b,d					;		ddx = direc_x
 147+ E969 0E 00                                ld	c,0					;		ddy = 0
 148+ E96B D9                                   exx
 149+ E96C 18 08                                jr	init_drawloop		; else
 150+ E96E 7C           x_smaller_y:	        ld	a,h
 151+ E96F 65                                   ld	h,l					;	H = y
 152+ E970 6F                                   ld	l,a					;	L = x
 153+ E971 D9                                   exx
 154+ E972 06 00                                ld	b,0					;	ddx = 0
 155+ E974 4B                                   ld	c,e					;	ddy = direc_y
 156+ E975 D9                                   exx
 157+ E976 44           init_drawloop:	        ld	b,h
 158+ E977 4C                                   ld	c,h					; B = H
 159+ E978 CB 39                                srl	c					; i = INT(B/2)
 160+ E97A              										; FOR N=B	TO 1	STEP	-1
 161+ E97A 79           drawloop:		        ld	a,c
 162+ E97B 85                                   add	a,l
 163+ E97C 38 09                                jr	c, i_greater		;	i + L > 255  (i > H)
 164+ E97E BC                                   cp	h
 165+ E97F 30 06                                jr	nc, i_greater		;	if i	< H
 166+ E981 4F                                   ld	c,a					;		i = i + L
 167+ E982 D9                                   exx
 168+ E983 C5                                   push	bc				;		ix =	ddx:	iy =	ddy
 169+ E984 D9                                   exx
 170+ E985 18 05                                jr	check_plot			;	else
 171+ E987 94           i_greater:		        sub	h					;		i = i - H
 172+ E988 4F                                   ld	c,a
 173+ E989 D9                                   exx
 174+ E98A D5                                   push	de				;		ix =	direc_x: iy = direc_y
 175+ E98B D9                                   exx						;	endif
 176+ E98C E3           check_plot:		        ex	(sp),hl				;	preserve H,L distances on stack
 177+ E98D EB                                   ex	de,hl				;	D,E = ix,	iy
 178+ E98E 2A 1A E9                             ld	hl,(line_gfx_coords)
 179+ E991 7D                                   ld	a,l
 180+ E992 83                                   add	a,e					;
 181+ E993 6F                                   ld	l,a					;	y0 =	y0 +	iy (y0 is	checked by plot)
 182+ E994 7A                                   ld	a,d
 183+ E995 3C                                   inc	a
 184+ E996 84                                   add	a,h
 185+ E997 38 04                                jr	c, check_range		;	check out	of range
 186+ E999 28 1A                                jr	z, range_error		;	Fz=1	& Fc=0 denotes	x0 <	0
 187+ E99B 18 02                                jr	plot_point
 188+ E99D 20 16        check_range:            jr	nz, range_error	;	Fz=0	& Fc=1 denotes	x0 >	255
 189+ E99F
 190+ E99F 3D           plot_point:             dec	a
 191+ E9A0 C5                                   push	bc
 192+ E9A1 F5                                   push	af
 193+ E9A2 47                                   ld	    b,a					;	x0 =	x0 +	ix
 194+ E9A3 4D                                   ld		c,l
 195+ E9A4 3A 19 E9                             ld		a,(line_gfx_colour)
 196+ E9A7 ED 43 1A E9                          ld      (line_gfx_coords),bc
 197+ E9AB CD 29 E1                             call	l2_plot_pixel
 197+ E9AE
 198+ E9AE F1                                   pop		af
 199+ E9AF C1                                   pop		bc
 200+ E9B0 E1           plot_RET:		        pop	hl					;	restore H,L distances...
 201+ E9B1 10 C7                                djnz	drawloop		; NEXT N
 202+ E9B3 18 01                                jr	exit_draw
 203+ E9B5
 204+ E9B5 E1           range_error:	        pop	hl					; remove H,L distances...
 205+ E9B6 C9           exit_draw:		        ret
 206+ E9B7
 207+ E9B7
 208+ E9B7              ; ******************************************************************************
 209+ E9B7              ;
 210+ E9B7              ;	SGN (Signum value) of 16	bit signed integer.
 211+ E9B7              ;
 212+ E9B7              ;	IN:		HL =	integer
 213+ E9B7              ;	OUT:		A = result: 0,1,-1 (if zero, positive, negative)
 214+ E9B7              ;
 215+ E9B7              ;	Registers	changed after return:
 216+ E9B7              ;	..BCDEHL/IXIY	same
 217+ E9B7              ;	AF....../....	different
 218+ E9B7              ;
 219+ E9B7 7C           sgn:				    ld	a,h
 220+ E9B8 B5                                   or	l
 221+ E9B9 C8                                   ret	z				; integer	is zero, return 0...
 222+ E9BA CB 7C                                bit	7,h
 223+ E9BC 20 03                                jr	nz, negative_int
 224+ E9BE 3E 01                                ld	a,1
 225+ E9C0 C9                                   ret
 226+ E9C1 3E FF        negative_int:		    ld	a,-1
 227+ E9C3 C9                                   ret
 228+ E9C4
 229+ E9C4
 230+ E9C4              ; ******************************************************************************
 231+ E9C4              ;
 232+ E9C4              ;	ABS (Absolute value) of 16 bit signed integer.
 233+ E9C4              ;
 234+ E9C4              ;	IN:		HL =	integer
 235+ E9C4              ;	OUT:		HL =	converted	integer
 236+ E9C4              ;
 237+ E9C4              ;	Registers	changed after return:
 238+ E9C4              ;	A.BCDE../IXIY	same
 239+ E9C4              ;	.F....HL/....	different
 240+ E9C4              ;
 241+ E9C4 CB 7C        absValue:			    bit	7,h
 242+ E9C6 C8                                   ret	z				; integer	is positive...
 243+ E9C7 D5                                   push	de
 244+ E9C8 EB                                   ex	de,hl
 245+ E9C9 21 00 00                             ld	hl,0
 246+ E9CC BF                                   cp	a				; Fc	= 0,	may not be used...
 247+ E9CD ED 52                                sbc	hl,de			; convert	negative integer
 248+ E9CF D1                                   pop	de
 249+ E9D0 C9                                   ret
 250+ E9D1
# file closed: ./Layer2Graphics/l2_draw_line_v2.asm
1302  E9D1              ; Bank 56  ------------------------------------------------------------------------------------------------------------------------
1303  E9D1                  SLOT    CommanderAddr
1304  E9D1                  PAGE    BankCommander
1305  E9D1                  ORG     CommanderAddr, BankCommander
1306  E000                  INCLUDE "./Commander/commanderData.asm"
# file opened: ./Commander/commanderData.asm
   1+ E000 43 4F 4D 4D  commanderPage           DB  "COMMANDERPAGE 56"
   1+ E004 41 4E 44 45
   1+ E008 52 50 41 47
   1+ E00C 45 20 35 36
   2+ E010 4A 41 4D 45  defaultName		        DB	"JAMESON",0
   2+ E014 53 4F 4E 00
   3+ E018 10 0F 11 00  defaultStock	        DB $10, $0F, $11, $00, $03, $1C,$0E, $00, $00, $0A, $00, $11,$3A, $07, $09, $08, $00
   3+ E01C 03 1C 0E 00
   3+ E020 00 0A 00 11
   3+ E024 3A 07 09 08
   3+ E028 00
   4+ E029 4A 5A 48 02  defaultSeeds	        DB $4a, $5a, $48, $02, $53, $b7
   4+ E02D 53 B7
   5+ E02F 14           defaultHomeX	        DB $14
   6+ E030 AD           defaultHomeY	        DB $AD
   7+ E031 44 65 66 61  defaultSaveName         DB "Default.SAV",0,0,0,0
   7+ E035 75 6C 74 2E
   7+ E039 53 41 56 00
   7+ E03D 00 00 00
   8+ E040
   9+ E040              ; Gun and cabin temps are not saved as can only be saved in dock
  10+ E040              ; Note Can only save whilst docked
  11+ E040 43 4F 4D 4D  SaveCommanderHeader     DB  "COMMANDERSAVE..."
  11+ E044 41 4E 44 45
  11+ E048 52 53 41 56
  11+ E04C 45 2E 2E 2E
  12+ E050 00 00 00...  SaveFilename            DS  15
  13+ E05F 00 00 00...  SaveCommanderName       DS  15
  14+ E06E 00 00 00...  SaveSeeds               DS  06
  15+ E074 00 00 00...  SaveStockAvaliabiliy    DS  17
  16+ E085 00 00 00...  SaveCargo               DS  16
  17+ E095 00 00 00...  SaveEquipmentFitted     DS  EQ_ITEM_COUNT
  18+ E0AF 00 00 00 00  SaveLaserType           DS  4
  19+ E0B3 00 00 00 00  SaveLaserDamagedFlag    DS  4
  20+ E0B7 00           SavePresentSystemX      DS  1
  21+ E0B8 00           SavePresentSystemY      DS  1
  22+ E0B9 00           SaveTargetSystemX       DS  1
  23+ E0BA 00           SaveTargetSystemY       DS  1
  24+ E0BB 00 00 00 00  SaveCash                DS  4
  25+ E0BF 00           SaveFuel                DS  1
  26+ E0C0 00           SaveFugitiveInnocentStatus DS 1
  27+ E0C1 00 00        SaveKillTally           DS  2
  28+ E0C3 00           SaveOuterHyperCount     DS  1
  29+ E0C4 00           SaveInnerHyperCount     DS  1
  30+ E0C5 00           SaveForeShield          DS  1
  31+ E0C6 00           SaveAftShield           DS  1
  32+ E0C7 00           SavePlayerEnergy        DS  1
  33+ E0C8 00           SaveCargoBaySize        DS  1
  34+ E0C9 00           SaveFuelScoopStatus     DS  1
  35+ E0CA              SaveSize                equ $ - SaveCommanderHeader
  36+ E0CA
  37+ E0CA              copyCommanderToSave:    ldCopyStringLen CommanderName,      SaveCommanderName, 15
  37+ E0CA 21 52 9D    >                        ld      hl,CommanderName
  37+ E0CD 11 5F E0    >                        ld      de, SaveCommanderName
  37+ E0D0 01 0F 00    >                        ld      bc, 15
  37+ E0D3 ED B0       >                        ldir
  38+ E0D5                                      ldCopyStringLen GalaxySeeds,        SaveSeeds, 6
  38+ E0D5 21 52 9B    >                        ld      hl,GalaxySeeds
  38+ E0D8 11 6E E0    >                        ld      de, SaveSeeds
  38+ E0DB 01 06 00    >                        ld      bc, 6
  38+ E0DE ED B0       >                        ldir
  39+ E0E0                                      ldCopyStringLen StockAvaliabiliy,   SaveStockAvaliabiliy, 16
  39+ E0E0 21 BD 9A    >                        ld      hl,StockAvaliabiliy
  39+ E0E3 11 74 E0    >                        ld      de, SaveStockAvaliabiliy
  39+ E0E6 01 10 00    >                        ld      bc, 16
  39+ E0E9 ED B0       >                        ldir
  40+ E0EB                                      ldCopyStringLen CargoTonnes,        SaveCargo, 16
  40+ E0EB 21 2D 9F    >                        ld      hl,CargoTonnes
  40+ E0EE 11 85 E0    >                        ld      de, SaveCargo
  40+ E0F1 01 10 00    >                        ld      bc, 16
  40+ E0F4 ED B0       >                        ldir
  41+ E0F6                                      ldCopyStringLen EquipmentFitted,    SaveEquipmentFitted, EQ_ITEM_COUNT
  41+ E0F6 21 45 9F    >                        ld      hl,EquipmentFitted
  41+ E0F9 11 95 E0    >                        ld      de, SaveEquipmentFitted
  41+ E0FC 01 1A 00    >                        ld      bc, EQ_ITEM_COUNT
  41+ E0FF ED B0       >                        ldir
  42+ E101                                      ldCopyStringLen LaserType,          SaveLaserType, 4
  42+ E101 21 3D 9F    >                        ld      hl,LaserType
  42+ E104 11 AF E0    >                        ld      de, SaveLaserType
  42+ E107 01 04 00    >                        ld      bc, 4
  42+ E10A ED B0       >                        ldir
  43+ E10C                                      ldCopyStringLen LaserDamagedFlag,   SaveLaserDamagedFlag, 4
  43+ E10C 21 41 9F    >                        ld      hl,LaserDamagedFlag
  43+ E10F 11 B3 E0    >                        ld      de, SaveLaserDamagedFlag
  43+ E112 01 04 00    >                        ld      bc, 4
  43+ E115 ED B0       >                        ldir
  44+ E117                                      ldCopy2Byte     PresentSystemX,     SavePresentSystemX
  44+ E117 2A 58 9B    >                        ld       hl,(PresentSystemX)
  44+ E11A 22 B7 E0    >                        ld       (SavePresentSystemX),hl
  45+ E11D                                      ldCopy2Byte     TargetSystemX,      SaveTargetSystemX
  45+ E11D 2A 5A 9B    >                        ld       hl,(TargetSystemX)
  45+ E120 22 B9 E0    >                        ld       (SaveTargetSystemX),hl
  46+ E123                                      ldCopyStringLen Cash,               SaveCash, 6
  46+ E123 21 26 9F    >                        ld      hl,Cash
  46+ E126 11 BB E0    >                        ld      de, SaveCash
  46+ E129 01 06 00    >                        ld      bc, 6
  46+ E12C ED B0       >                        ldir
  47+ E12E                                      ldCopyByte      Fuel,               SaveFuel
  47+ E12E 3A 2A 9F    >                        ld       a,(Fuel)
  47+ E131 32 BF E0    >                        ld       (SaveFuel),a
  48+ E134                                      ldCopyByte      FugitiveInnocentStatus,  SaveFugitiveInnocentStatus
  48+ E134 3A BC 9A    >                        ld       a,(FugitiveInnocentStatus)
  48+ E137 32 C0 E0    >                        ld       (SaveFugitiveInnocentStatus),a
  49+ E13A                                      ldCopy2Byte     KillTally           ,SaveKillTally
  49+ E13A 2A CF 9A    >                        ld       hl,(KillTally)
  49+ E13D 22 C1 E0    >                        ld       (SaveKillTally),hl
  50+ E140                                      ldCopyByte      OuterHyperCount     ,SaveOuterHyperCount
  50+ E140 3A 17 9B    >                        ld       a,(OuterHyperCount)
  50+ E143 32 C3 E0    >                        ld       (SaveOuterHyperCount),a
  51+ E146                                      ldCopyByte      InnerHyperCount     ,SaveInnerHyperCount
  51+ E146 3A 16 9B    >                        ld       a,(InnerHyperCount)
  51+ E149 32 C4 E0    >                        ld       (SaveInnerHyperCount),a
  52+ E14C                                      ldCopyByte      ForeShield          ,SaveForeShield
  52+ E14C 3A 4B 9D    >                        ld       a,(ForeShield)
  52+ E14F 32 C5 E0    >                        ld       (SaveForeShield),a
  53+ E152                                      ldCopyByte      AftShield           ,SaveAftShield
  53+ E152 3A 4C 9D    >                        ld       a,(AftShield)
  53+ E155 32 C6 E0    >                        ld       (SaveAftShield),a
  54+ E158                                      ldCopyByte      PlayerEnergy        ,SavePlayerEnergy
  54+ E158 3A 4D 9D    >                        ld       a,(PlayerEnergy)
  54+ E15B 32 C7 E0    >                        ld       (SavePlayerEnergy),a
  55+ E15E                                      ldCopyByte      CargoBaySize        ,SaveCargoBaySize
  55+ E15E 3A 2B 9F    >                        ld       a,(CargoBaySize)
  55+ E161 32 C8 E0    >                        ld       (SaveCargoBaySize),a
  56+ E164                                      ldCopyByte      FuelScoopsBarrelStatus     ,SaveFuelScoopStatus
  56+ E164 3A 5F 9F    >                        ld       a,(FuelScoopsBarrelStatus)
  56+ E167 32 C9 E0    >                        ld       (SaveFuelScoopStatus),a
  57+ E16A C9                                   ret
  58+ E16B
  59+ E16B              copyCommanderFromSave:  ldCopyStringLen SaveCommanderName,      CommanderName, 15
  59+ E16B 21 5F E0    >                        ld      hl,SaveCommanderName
  59+ E16E 11 52 9D    >                        ld      de, CommanderName
  59+ E171 01 0F 00    >                        ld      bc, 15
  59+ E174 ED B0       >                        ldir
  60+ E176                                      ldCopyStringLen SaveSeeds,              GalaxySeeds, 6
  60+ E176 21 6E E0    >                        ld      hl,SaveSeeds
  60+ E179 11 52 9B    >                        ld      de, GalaxySeeds
  60+ E17C 01 06 00    >                        ld      bc, 6
  60+ E17F ED B0       >                        ldir
  61+ E181                                      ldCopyStringLen SaveStockAvaliabiliy,   StockAvaliabiliy, 16
  61+ E181 21 74 E0    >                        ld      hl,SaveStockAvaliabiliy
  61+ E184 11 BD 9A    >                        ld      de, StockAvaliabiliy
  61+ E187 01 10 00    >                        ld      bc, 16
  61+ E18A ED B0       >                        ldir
  62+ E18C                                      ldCopyStringLen SaveCargo,              CargoTonnes, 16
  62+ E18C 21 85 E0    >                        ld      hl,SaveCargo
  62+ E18F 11 2D 9F    >                        ld      de, CargoTonnes
  62+ E192 01 10 00    >                        ld      bc, 16
  62+ E195 ED B0       >                        ldir
  63+ E197                                      ldCopyStringLen SaveEquipmentFitted,    EquipmentFitted, EQ_ITEM_COUNT
  63+ E197 21 95 E0    >                        ld      hl,SaveEquipmentFitted
  63+ E19A 11 45 9F    >                        ld      de, EquipmentFitted
  63+ E19D 01 1A 00    >                        ld      bc, EQ_ITEM_COUNT
  63+ E1A0 ED B0       >                        ldir
  64+ E1A2                                      ldCopyStringLen SaveLaserType,          LaserType, 4
  64+ E1A2 21 AF E0    >                        ld      hl,SaveLaserType
  64+ E1A5 11 3D 9F    >                        ld      de, LaserType
  64+ E1A8 01 04 00    >                        ld      bc, 4
  64+ E1AB ED B0       >                        ldir
  65+ E1AD                                      ldCopyStringLen SaveLaserDamagedFlag,    LaserDamagedFlag, 4
  65+ E1AD 21 B3 E0    >                        ld      hl,SaveLaserDamagedFlag
  65+ E1B0 11 41 9F    >                        ld      de, LaserDamagedFlag
  65+ E1B3 01 04 00    >                        ld      bc, 4
  65+ E1B6 ED B0       >                        ldir
  66+ E1B8                                      ldCopy2Byte     SavePresentSystemX,     PresentSystemX
  66+ E1B8 2A B7 E0    >                        ld       hl,(SavePresentSystemX)
  66+ E1BB 22 58 9B    >                        ld       (PresentSystemX),hl
  67+ E1BE                                      ldCopy2Byte     SaveTargetSystemX,      TargetSystemX
  67+ E1BE 2A B9 E0    >                        ld       hl,(SaveTargetSystemX)
  67+ E1C1 22 5A 9B    >                        ld       (TargetSystemX),hl
  68+ E1C4 21 16 9A                             ld		hl,IndexedWork              ; not sure yet why thisis done here
  69+ E1C7 CD 90 9F                             call	        copy_galaxy_to_system
  70+ E1CA CD 50 A0                             call	        find_present_system
  71+ E1CD CD B3 9F                             call	        copy_working_to_galaxy
  72+ E1D0                                      ldCopyStringLen SaveCash,               Cash, 6
  72+ E1D0 21 BB E0    >                        ld      hl,SaveCash
  72+ E1D3 11 26 9F    >                        ld      de, Cash
  72+ E1D6 01 06 00    >                        ld      bc, 6
  72+ E1D9 ED B0       >                        ldir
  73+ E1DB                                      ldCopyByte      SaveFuel,               Fuel
  73+ E1DB 3A BF E0    >                        ld       a,(SaveFuel)
  73+ E1DE 32 2A 9F    >                        ld       (Fuel),a
  74+ E1E1                                      ldCopyByte      SaveFugitiveInnocentStatus,  FugitiveInnocentStatus
  74+ E1E1 3A C0 E0    >                        ld       a,(SaveFugitiveInnocentStatus)
  74+ E1E4 32 BC 9A    >                        ld       (FugitiveInnocentStatus),a
  75+ E1E7                                      ldCopy2Byte     SaveKillTally           ,KillTally
  75+ E1E7 2A C1 E0    >                        ld       hl,(SaveKillTally)
  75+ E1EA 22 CF 9A    >                        ld       (KillTally),hl
  76+ E1ED                                      ldCopyByte      SaveOuterHyperCount     ,OuterHyperCount
  76+ E1ED 3A C3 E0    >                        ld       a,(SaveOuterHyperCount)
  76+ E1F0 32 17 9B    >                        ld       (OuterHyperCount),a
  77+ E1F3                                      ldCopyByte      SaveInnerHyperCount     ,InnerHyperCount
  77+ E1F3 3A C4 E0    >                        ld       a,(SaveInnerHyperCount)
  77+ E1F6 32 16 9B    >                        ld       (InnerHyperCount),a
  78+ E1F9                                      ldCopyByte      SaveForeShield          ,ForeShield
  78+ E1F9 3A C5 E0    >                        ld       a,(SaveForeShield)
  78+ E1FC 32 4B 9D    >                        ld       (ForeShield),a
  79+ E1FF                                      ldCopyByte      SaveAftShield           ,AftShield
  79+ E1FF 3A C6 E0    >                        ld       a,(SaveAftShield)
  79+ E202 32 4C 9D    >                        ld       (AftShield),a
  80+ E205                                      ldCopyByte      SavePlayerEnergy        ,PlayerEnergy
  80+ E205 3A C7 E0    >                        ld       a,(SavePlayerEnergy)
  80+ E208 32 4D 9D    >                        ld       (PlayerEnergy),a
  81+ E20B                                      ldCopyByte      SaveCargoBaySize        ,CargoBaySize
  81+ E20B 3A C8 E0    >                        ld       a,(SaveCargoBaySize)
  81+ E20E 32 2B 9F    >                        ld       (CargoBaySize),a
  82+ E211                                      ldCopyByte      SaveFuelScoopStatus     ,FuelScoopsBarrelStatus
  82+ E211 3A C9 E0    >                        ld       a,(SaveFuelScoopStatus)
  82+ E214 32 5F 9F    >                        ld       (FuelScoopsBarrelStatus),a
  83+ E217 C9                                   ret
  84+ E218
  85+ E218 CD CA E0     saveCommander:          call    copyCommanderToSave
  86+ E21B                                      ldCopyStringLen defaultSaveName, SaveFilename, 15
  86+ E21B 21 31 E0    >                        ld      hl,defaultSaveName
  86+ E21E 11 50 E0    >                        ld      de, SaveFilename
  86+ E221 01 0F 00    >                        ld      bc, 15
  86+ E224 ED B0       >                        ldir
  87+ E226 21 31 E0                             ld      hl, defaultSaveName             ; default debug name
  88+ E229 DD 21 40 E0                          ld      ix, SaveCommanderHeader
  89+ E22D 01 8A 00                             ld      bc, SaveSize
  90+ E230 CD 26 B7                             call    FileSave
  91+ E233 C9                                   ret
  92+ E234
  93+ E234 21 31 E0     loadCommander:          ld      hl, defaultSaveName             ; default debug name
  94+ E237 DD 21 40 E0                          ld      ix, SaveCommanderHeader
  95+ E23B 01 8A 00                             ld      bc, SaveSize
  96+ E23E CD F5 B6                             call    FileLoad
  97+ E241 CD 6B E1                             call    copyCommanderFromSave
  98+ E244 C9                                   ret
  99+ E245
 100+ E245               ; For now hard laod, later correctlt sequence gneeral vars and dma fill with 0 for a start
 101+ E245              defaultCommander:       ldCopyStringLen defaultName, CommanderName, 8
 101+ E245 21 10 E0    >                        ld      hl,defaultName
 101+ E248 11 52 9D    >                        ld      de, CommanderName
 101+ E24B 01 08 00    >                        ld      bc, 8
 101+ E24E ED B0       >                        ldir
 102+ E250                                      ldCopyStringLen defaultSeeds, GalaxySeeds, 6
 102+ E250 21 29 E0    >                        ld      hl,defaultSeeds
 102+ E253 11 52 9B    >                        ld      de, GalaxySeeds
 102+ E256 01 06 00    >                        ld      bc, 6
 102+ E259 ED B0       >                        ldir
 103+ E25B                                      ldCopy2Byte defaultHomeX, PresentSystemX
 103+ E25B 2A 2F E0    >                        ld       hl,(defaultHomeX)
 103+ E25E 22 58 9B    >                        ld       (PresentSystemX),hl
 104+ E261                                      ldCopy2Byte defaultHomeX, TargetSystemX
 104+ E261 2A 2F E0    >                        ld       hl,(defaultHomeX)
 104+ E264 22 5A 9B    >                        ld       (TargetSystemX),hl
 105+ E267 21 16 9A                             ld		hl,IndexedWork              ; not sure yet why thisis done here
 106+ E26A CD 90 9F                             call	copy_galaxy_to_system
 107+ E26D CD 50 A0                             call	find_present_system
 108+ E270 CD B3 9F                             call	copy_working_to_galaxy
 109+ E273 01 60 EA                             ld      bc,60000
 110+ E276 ED 43 26 9F                          ld      (Cash),bc
 111+ E27A 01 00 00                             ld		bc,0
 112+ E27D ED 43 28 9F                          ld		(Cash+2), bc                    ; cash no longer big endian
 113+ E281 3E 46                                ld		a,MaxFuelLevel
 114+ E283 32 2A 9F                             ld		(Fuel),a
 115+ E286 3E 5B                                ld      a,BankGalaxyData0
 116+ E288 32 45 9B                             ld		(Galaxy),a
 117+ E28B AF                                   xor		a
 118+ E28C 21 45 9F                             ld      hl,EquipmentFitted
 119+ E28F 06 1A                                ld      b, EQ_ITEM_COUNT
 120+ E291 77           .ClearFittedLooop:      ld      (hl),a
 121+ E292 23                                   inc     hl
 122+ E293 10 FC                                djnz    .ClearFittedLooop
 123+ E295                                      SetAFalse
 123+ E295 3E FF       >                        ld      a,$FF
 124+ E297 32 53 9F                             ld      (EquipmentFitted+EQ_FRONT_BEAM),a
 125+ E29A 32 67 9B                             ld		(MissionData),a						;The Plan/Mission
 126+ E29D 3E 04                                ld      a,4                                  ; a = 0 = pulse laser
 127+ E29F 32 3D 9F                             ld		(LaserType),a
 128+ E2A2 3E FF                                ld      a,$FF                                 ; a = 255
 129+ E2A4 32 3E 9F                             ld		(LaserType+1),a
 130+ E2A7 32 3F 9F                             ld		(LaserType+2),a
 131+ E2AA 32 40 9F                             ld		(LaserType+3),a
 132+ E2AD AF                                   xor     a                                  ; a= 0
 133+ E2AE 32 41 9F                             ld      (LaserDamagedFlag),a
 134+ E2B1 32 42 9F                             ld      (LaserDamagedFlag+1),a
 135+ E2B4 32 43 9F                             ld      (LaserDamagedFlag+2),a
 136+ E2B7 32 44 9F                             ld      (LaserDamagedFlag+3),a
 137+ E2BA              ; REMOVE?             ld      a,EQ_FRONT_PULSE
 138+ E2BA AF                                   xor     a
 139+ E2BB 32 48 9F                             ld		(ECMPresent),a
 140+ E2BE 32 5F 9F                             ld		(FuelScoopsBarrelStatus),a
 141+ E2C1 32 4B 9F                             ld		(EnergyBomb),a
 142+ E2C4 32 4C 9F                             ld		(ExtraEnergyUnit),a
 143+ E2C7 32 4D 9F                             ld		(DockingComputer),a
 144+ E2CA 32 4E 9F                             ld		(GalacticHyperDrive),a
 145+ E2CD 32 4A 9F                             ld		(EscapePod),a
 146+ E2D0 32 BC 9A                             ld      (FugitiveInnocentStatus),a
 147+ E2D3 32 CF 9A                             ld		(KillTally),a
 148+ E2D6 32 17 9B                             ld      (OuterHyperCount),a
 149+ E2D9 32 16 9B                             ld      (InnerHyperCount),a
 150+ E2DC 3D                                   dec		a								; now a = 255
 151+ E2DD 32 4B 9D                             ld		(ForeShield),a
 152+ E2E0 32 4C 9D                             ld		(AftShield),a
 153+ E2E3 32 4D 9D                             ld		(PlayerEnergy),a
 154+ E2E6 3E 14                                ld		a,20
 155+ E2E8 32 2B 9F                             ld		(CargoBaySize),a
 156+ E2EB CD 5E E3                             call	ZeroCargo						; Clear out cargo
 157+ E2EE 3E 00        .SetLasers:             ld      a,0                             ; we start on Front view
 158+ E2F0 CD F4 E2                             call    LoadLaserToCurrent
 159+ E2F3 C9                                   ret
 160+ E2F4
 161+ E2F4
 162+ E2F4              ; a = current view number
 163+ E2F4 21 3D 9F     LoadLaserToCurrent:     ld      hl,LaserType                    ; .
 164+ E2F7 ED 31                                add     hl,a                            ; .
 165+ E2F9 7E                                   ld      a,(hl)                          ; .
 166+ E2FA 47                                   ld      b,a                             ; first off is there a laser present in current view
 167+ E2FB 32 63 9D                             ld      (CurrLaserType),a               ; set type
 168+ E2FE FE FF                                cp      255                             ; .
 169+ E300 C8                                   ret     z                               ; we can then drop out early if nothing fitted
 170+ E301 3E 04                                ld      a,4                             ; Damage state is in next variable in memory
 171+ E303 ED 31                                add     hl,a
 172+ E305 7E                                   ld      a,(hl)
 173+ E306 32 64 9D                             ld      (CurrLaserDamage),a             ; copy over current laser's damage
 174+ E309 50                                   ld      d,b                             ; get table index
 175+ E30A 1E 0C                                ld      e,LaserStatsTableWidth          ;
 176+ E30C ED 30                                mul     de                              ;
 177+ E30E 21 CF 8F                             ld      hl,LaserStatsTable              ;
 178+ E311 19                                   add     hl,de                           ;
 179+ E312 23                                   inc     hl                              ; we already have type
 180+ E313                                      ldAtHLtoMem CurrLaserPulseRate          ; table [1]
 180+ E313 7E          >                        ld      a,(hl)
 180+ E314 32 65 9D    >                        ld      (CurrLaserPulseRate),a
 181+ E317 23                                   inc     hl                              ; table [2]
 182+ E318                                      ldAtHLtoMem CurrLaserPulseOnTime
 182+ E318 7E          >                        ld      a,(hl)
 182+ E319 32 66 9D    >                        ld      (CurrLaserPulseOnTime),a
 183+ E31C 23                                   inc     hl                              ; table [3]
 184+ E31D                                      ldAtHLtoMem CurrLaserPulseOffTime
 184+ E31D 7E          >                        ld      a,(hl)
 184+ E31E 32 67 9D    >                        ld      (CurrLaserPulseOffTime),a
 185+ E321 23                                   inc     hl                              ; table [4]
 186+ E322                                      ldAtHLtoMem CurrLaserPulseRest
 186+ E322 7E          >                        ld      a,(hl)
 186+ E323 32 68 9D    >                        ld      (CurrLaserPulseRest),a
 187+ E326 23                                   inc     hl                              ; table [5]
 188+ E327                                      ldAtHLtoMem CurrLaserDamageOutput
 188+ E327 7E          >                        ld      a,(hl)
 188+ E328 32 6F 9D    >                        ld      (CurrLaserDamageOutput),a
 189+ E32B 23                                   inc     hl                              ; table [6]
 190+ E32C                                      ldAtHLtoMem CurrLaserEnergyDrain
 190+ E32C 7E          >                        ld      a,(hl)
 190+ E32D 32 70 9D    >                        ld      (CurrLaserEnergyDrain),a
 191+ E330 23                                   inc     hl                              ; table [7]
 192+ E331                                      ldAtHLtoMem CurrLaserHeat
 192+ E331 7E          >                        ld      a,(hl)
 192+ E332 32 71 9D    >                        ld      (CurrLaserHeat),a
 193+ E335 23                                   inc     hl                              ; table [8]
 194+ E336                                      ldAtHLtoMem CurrLaserDurability
 194+ E336 7E          >                        ld      a,(hl)
 194+ E337 32 72 9D    >                        ld      (CurrLaserDurability),a
 195+ E33A 23                                   inc     hl                              ; table [9]
 196+ E33B                                      ldAtHLtoMem CurrLaserDurabilityAmount   ; we don't need tech level etc for in game run only markets so stop here
 196+ E33B 7E          >                        ld      a,(hl)
 196+ E33C 32 73 9D    >                        ld      (CurrLaserDurabilityAmount),a
 197+ E33F C9                                   ret
 198+ E340
 199+ E340              ; Set a = 2 * (slaves + narcotics) + firearms
 200+ E340 3A 30 9F     calculateBadness:       ld      a,(SlaveCargoTonnes)            ; Badness = 2(slaves + narcotics)
 201+ E343 47                                   ld      b,a                             ; .
 202+ E344 3A 33 9F                             ld      a,(NarcoticsCargoTonnes)        ; .
 203+ E347 80                                   add     b                               ; .
 204+ E348 CB 27                                sla     a                               ; .
 205+ E34A 47                                   ld      b,a                             ;
 206+ E34B 3A 37 9F                             ld      a,(FirearmsCargoTonnes)         ; Badness += firearms tonns
 207+ E34E 80                                   add     b
 208+ E34F C9                                   ret
 209+ E350
 210+ E350 CD 6B E1     PlayerDeath:            call    copyCommanderFromSave           ; load last loaded/saved commander
 211+ E353                                      ZeroA                                   ; set current laser to front
 211+ E353 AF          >                        xor a
 212+ E354 CD F4 E2                             call    LoadLaserToCurrent
 213+ E357 CD 4F 9E                             call    InitMainLoop
 214+ E35A CD F0 9D                             call    ResetPlayerShip
 215+ E35D C9                                   ret
 216+ E35E                                  ;    clear out all other objects
 217+ E35E                                  ;    create debris
 218+ E35E                                  ;    if cargo presetn then create a cargo
 219+ E35E                                  ;
 220+ E35E                                  ;    enqueve message game over
 221+ E35E                                  ;    go to load commander page
# file closed: ./Commander/commanderData.asm
1307  E35E                  INCLUDE "./Commander/zero_player_cargo.asm"
# file opened: ./Commander/zero_player_cargo.asm
   1+ E35E              ZeroCargo:
   2+ E35E AF           		xor		a							;zero-out cargo, including gems.
   3+ E35F 06 10        		ld		b,16						;all the way up to alien items
   4+ E361 21 2D 9F     		ld		hl,CargoTonnes   			; cargo levels
   5+ E364              .ZeroLoop:
   6+ E364 77                   ld      (hl),a
   7+ E365 23           		inc		hl
   8+ E366 10 FC        		djnz	.ZeroLoop
   9+ E368 C9           		ret
  10+ E369
# file closed: ./Commander/zero_player_cargo.asm
1308  E369              ; Bank 58  ------------------------------------------------------------------------------------------------------------------------
1309  E369                  SLOT    LAYER1Addr
1310  E369                  PAGE    BankLAYER1
1311  E369                  ORG     LAYER1Addr, BankLAYER1
1312  E000
1313  E000                  INCLUDE "./Layer1Graphics/layer1_attr_utils.asm"
# file opened: ./Layer1Graphics/layer1_attr_utils.asm
   1+ E000
   2+ E000 00 58        L1AttrRow00:            DW $5800                    ;Row 1    */
   3+ E002 20 58        L1AttrRow01:            DW $5820                    ;Row 2    */
   4+ E004 40 58        L1AttrRow02:            DW $5840                    ;Row 3    */
   5+ E006 60 58        L1AttrRow03:            DW $5860                    ;Row 4    */
   6+ E008 80 58        L1AttrRow04:            DW $5880                    ;Row 5    */
   7+ E00A A0 58        L1AttrRow05:            DW $58A0                    ;Row 6    */
   8+ E00C C0 58        L1AttrRow06:            DW $58C0                    ;Row 7    */
   9+ E00E E0 58        L1AttrRow07:            DW $58E0                    ;Row 8    */
  10+ E010 00 59        L1AttrRow08:            DW $5900                    ;Row 9    */
  11+ E012 20 59        L1AttrRow09:            DW $5920                    ;Row 10   */
  12+ E014 40 59        L1AttrRow10:            DW $5940                    ;Row 11   */
  13+ E016 60 59        L1AttrRow11:            DW $5960                    ;Row 12   */
  14+ E018 80 59        L1AttrRow12:            DW $5980                    ;Row 13   */
  15+ E01A A0 59        L1AttrRow13:            DW $59A0                    ;Row 14   */
  16+ E01C C0 59        L1AttrRow14:            DW $59C0                    ;Row 15   */
  17+ E01E E0 59        L1AttrRow15:            DW $59E0                    ;Row 16   */
  18+ E020 00 5A        L1AttrRow16:            DW $5A00                    ;Row 17   */
  19+ E022 20 5A        L1AttrRow17:            DW $5A20                    ;Row 18   */
  20+ E024 40 5A        L1AttrRow18:            DW $5A40                    ;Row 19   */
  21+ E026 60 5A        L1AttrRow19:            DW $5A60                    ;Row 20   */
  22+ E028 80 5A        L1AttrRow20:            DW $5A80                    ;Row 21   */
  23+ E02A A0 5A        L1AttrRow21:            DW $5AA0                    ;Row 22   */
  24+ E02C C0 5A        L1AttrRow22:            DW $5AC0                    ;Row 23   */
  25+ E02E E0 5A        L1AttrRow23:            DW $5AE0                    ;Row 23   */
  26+ E030
  27+ E030              ; "l2_hilight_row, d = row, e = colour"
  28+ E030 21 00 E0     l1_hilight_row:         ld      hl, L1AttrRow00
  29+ E033 4B                                   ld      c,e
  30+ E034 7A                                   ld      a,d
  31+ E035 CB 27                                sla     a
  32+ E037 ED 31                                add     hl,a
  33+ E039 7E                                   ld      a,(hl)
  34+ E03A 5F                                   ld      e,a
  35+ E03B 23                                   inc     hl
  36+ E03C 7E                                   ld      a,(hl)
  37+ E03D 57                                   ld      d,a
  38+ E03E EB                                   ex      hl,de
  39+ E03F 79                                   ld		a,c
  40+ E040 11 20 00                             ld		de, 32
  41+ E043 CD 40 96                             call	memfill_dma
  42+ E046 C9                                   ret
  43+ E047
# file closed: ./Layer1Graphics/layer1_attr_utils.asm
1314  E047                  INCLUDE "./Layer1Graphics/layer1_cls.asm"
# file opened: ./Layer1Graphics/layer1_cls.asm
   1+ E047 AF           l1_cls_top:             xor     a
   2+ E048 21 00 40                             ld      hl, $4000
   3+ E04B 11 00 08                             ld      de, $0800
   4+ E04E CD 40 96                             call    memfill_dma
   5+ E051 C9                                   ret
   6+ E052
   7+ E052 AF           l1_cls_mid:             xor     a
   8+ E053 21 00 48                             ld      hl, $4800
   9+ E056 11 00 08                             ld      de, $0800
  10+ E059 CD 40 96                             call    memfill_dma
  11+ E05C C9                                   ret
  12+ E05D
  13+ E05D AF           l1_cls_bottom:          xor     a
  14+ E05E 21 00 50                             ld      hl, $5000
  15+ E061 11 00 08                             ld      de, $0800
  16+ E064 CD 40 96                             call    memfill_dma
  17+ E067 C9                                   ret
  18+ E068
  19+ E068              ; Designed specifically to clear a whole character aligned line
  20+ E068 1E 00        l1_cls_line_d:          ld      e,0
  21+ E06A ED 94                                pixelad
  22+ E06C 11 00 01                             ld      de,32 * 8
  23+ E06F AF                                   xor     a
  24+ E070 CD 40 96                             call    memfill_dma
  25+ E073 C9                                   ret
  26+ E074
  27+ E074              ; Designed specifically to clear a whole character aligned 2 lines line, used for say clearing hyperspace message
  28+ E074 1E 00        l1_cls_2_lines_d:       ld      e,0
  29+ E076 ED 94                                pixelad
  30+ E078 11 00 02                             ld      de,32 * 16
  31+ E07B AF                                   xor     a
  32+ E07C CD 40 96                             call    memfill_dma
  33+ E07F C9                                   ret
  34+ E080
  35+ E080 AF           l1_cls:                 xor		a
  36+ E081 21 00 40     l1_cls_to_a:            ld		hl,	$4000
  37+ E084 11 00 18                             ld		de, $1800
  38+ E087 CD 40 96                             call	memfill_dma
  39+ E08A C9                                   ret
  40+ E08B
  41+ E08B 21 00 58     l1_attr_cls_2DlinesA:   ld		hl,	$5800
  42+ E08E 1E 20                                ld      e,32
  43+ E090 ED 30                                mul
  44+ E092 19                                   add     hl,de
  45+ E093 11 40 00                             ld		de, 32 * 2
  46+ E096 CD 40 96                             call	memfill_dma
  47+ E099 C9                                   ret
  48+ E09A
  49+ E09A
  50+ E09A AF           l1_attr_cls:            xor		a
  51+ E09B 21 00 58     l1_attr_cls_to_a:       ld		hl,	$5800
  52+ E09E 11 00 03                             ld		de, $0300
  53+ E0A1 CD 40 96                             call	memfill_dma
  54+ E0A4 C9                                   ret
  55+ E0A5
  56+ E0A5 01 FE FE     l1_set_border:          ld	    bc, 0xFEFE
  57+ E0A8 ED 79                                out		(c),a
  58+ E0AA C9                                   ret
# file closed: ./Layer1Graphics/layer1_cls.asm
1315  E0AB                  INCLUDE "./Layer1Graphics/layer1_print_at.asm"
# file opened: ./Layer1Graphics/layer1_print_at.asm
   1+ E0AB              ; "l1 print char a = character, de = Ypixel Xchar of print"
   2+ E0AB D5 E5        l1_print_char:          push	de,,hl
   3+ E0AD ED 94                                pixelad								; hl = address of de
   4+ E0AF E5                                   push	hl							; save hl for loop
   5+ E0B0 26 00                                ld		h,0
   6+ E0B2 6F                                   ld		l,a
   7+ E0B3 29                                   add		hl,hl						; * 2
   8+ E0B4 29                                   add		hl,hl						; * 4
   9+ E0B5 29                                   add		hl,hl						; * 8 to get byte address
  10+ E0B6 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  11+ E0BA EB                                   ex		de,hl						; save address into de
  12+ E0BB E1                                   pop		hl							; get back hl for loop
  13+ E0BC 06 08                                ld		b,8							; do 8 rows
  14+ E0BE 1A           .PrintCharLoop:         ld		a,(de)						; row byte
  15+ E0BF 13                                   inc		de							; next byte
  16+ E0C0 77                                   ld		(hl),a						; poke to screen
  17+ E0C1 ED 93                                pixeldn								; Down 1 row
  18+ E0C3 10 F9                                djnz	.PrintCharLoop				; loop for 8 bytes
  19+ E0C5 E1 D1                                pop		de,,hl					    ; restore hl
  20+ E0C7 C9                                   ret
  21+ E0C8
  22+ E0C8              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  23+ E0C8              ; now skips ascii code < 32 but moves on cursor by 1 char
  24+ E0C8              l1_print_at:
  25+ E0C8 7E           .PrintLoop:             ld		a,(hl)
  26+ E0C9 FE 00                                cp		0
  27+ E0CB C8                                   ret		z
  28+ E0CC                                      CallIfAGTENusng " ", l1_print_char
  28+ E0CC FE 20       >                        cp      " "
  28+ E0CE D4 AB E0    >                        call	nc,l1_print_char
  29+ E0D1 23                                   inc		hl							; move 1 message character right
  30+ E0D2 7B                                   ld		a,e
  31+ E0D3 C6 08                                add		a,8
  32+ E0D5 5F                                   ld		e,a							; move 1 screen character right
  33+ E0D6 18 F0                                jr		.PrintLoop
  34+ E0D8              .Clearstackandfinish:   ;pop		de                      ; TODO LOOOKS TO BE A ROGUE POPDE
  35+ E0D8 C9                                   ret
  36+ E0D9
  37+ E0D9              ;l1_print_at_wrap:
  38+ E0D9              ;; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  39+ E0D9              ;	ld      iyh,e
  40+ E0D9              ;.PrintLoop:
  41+ E0D9              ;	ld		a,(hl)
  42+ E0D9              ;	cp		0
  43+ E0D9              ;	ret		z
  44+ E0D9              ;.CountWordCharLen
  45+ E0D9              ;; Need to change to word wrap, so it will loop through string as before
  46+ E0D9              ;; but read up until a null or space, take the character count * 8 for pixels
  47+ E0D9              ;; if that is > 238 then force a premature line wrap
  48+ E0D9              ;
  49+ E0D9              ;
  50+ E0D9              ;    push    iy
  51+ E0D9              ;    call	l1_print_char
  52+ E0D9              ;    pop     iy
  53+ E0D9              ;	inc		hl							; move 1 message character right
  54+ E0D9              ;	ld		a,e
  55+ E0D9              ;    cp      238
  56+ E0D9              ;    jr      nc,.NextLine
  57+ E0D9              ;	add		a,8
  58+ E0D9              ;	ld		e,a							; move 1 screen character right
  59+ E0D9              ;	jr		.PrintLoop
  60+ E0D9              ;.Clearstackandfinish:
  61+ E0D9              ;	pop		de
  62+ E0D9              ;	ret
  63+ E0D9              ;.NextLine:
  64+ E0D9              ;    ld      a,(hl)
  65+ E0D9              ;    cp      " "
  66+ E0D9              ;    ld      e,iyh
  67+ E0D9              ;    ld      a,d
  68+ E0D9              ;    add     a,8
  69+ E0D9              ;    ld      d,a
  70+ E0D9              ;    jr		.PrintLoop
  71+ E0D9
  72+ E0D9              ; Counts next word at hl, uses e and forces a wrap if it would over flow puts value in c
  73+ E0D9 E5           L1LenWordAtHL:          push    hl
  74+ E0DA D5                                   push    de
  75+ E0DB 7E           .CountLoop:             ld      a,(hl)
  76+ E0DC FE 00                                cp      0
  77+ E0DE 28 0F                                jr      z,.CountDone
  78+ E0E0 FE 20                                cp      32
  79+ E0E2 28 0B                                jr      z,.CountDone
  80+ E0E4 7B                                   ld      a,e
  81+ E0E5 C6 08                                add     a,8
  82+ E0E7 5F                                   ld      e,a
  83+ E0E8 FE EE                                cp      238
  84+ E0EA 30 07                                jr      nc,.TooLong
  85+ E0EC 23                                   inc     hl
  86+ E0ED 18 EC                                jr      .CountLoop
  87+ E0EF D1           .CountDone:             pop     de
  88+ E0F0 E1                                   pop     hl
  89+ E0F1 AF                                   xor     a
  90+ E0F2 C9                                   ret
  91+ E0F3 D1           .TooLong                pop     de
  92+ E0F4 E1                                   pop     hl
  93+ E0F5 3E FF                                ld      a,$FF
  94+ E0F7 C9                                   ret
  95+ E0F8
  96+ E0F8 7E           L1PrintWordAtHL:        ld      a,(hl)
  97+ E0F9 FE 00                                cp      0
  98+ E0FB C8                                   ret     z
  99+ E0FC FE 20                                cp      32
 100+ E0FE 28 0F                                jr      z,.ItsASpace
 101+ E100 FD E5                                push    iy
 102+ E102 CD AB E0                             call	l1_print_char
 103+ E105 FD E1                                pop     iy
 104+ E107 7B                                   ld      a,e
 105+ E108 C6 08                                add     a,8
 106+ E10A 5F                                   ld      e,a
 107+ E10B 23                                   inc     hl
 108+ E10C C3 F8 E0                             jp      L1PrintWordAtHL
 109+ E10F 23           .ItsASpace:             inc     hl      ;  Just a bodge for now
 110+ E110 7B                                   ld      a,e
 111+ E111 C6 08                                add     a,8
 112+ E113 5F                                   ld      e,a
 113+ E114 C9                                   ret
 114+ E115
 115+ E115
 116+ E115              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 117+ E115              ; Now has full word level wrapping
 118+ E115 FD 63        l1_print_at_wrap:       ld      iyh,e
 119+ E117 7E           .PrintLoop:             ld		a,(hl)
 120+ E118 FE 00                                cp		0
 121+ E11A C8                                   ret		z
 122+ E11B CD D9 E0     .CountWordCharLen:      call    L1LenWordAtHL
 123+ E11E FE FF                                cp      $FF
 124+ E120 28 06                                jr      z,.WrapNextLine
 125+ E122 CD F8 E0     .NotTooLong:            call    L1PrintWordAtHL
 126+ E125              ; Need to change to word wrap, so it will loop through string as before
 127+ E125              ; but read up until a null or space, take the character count * 8 for pixels
 128+ E125              ; if that is > 238 then force a premature line wrap
 129+ E125 18 F0                                jr		.PrintLoop
 130+ E127              .Clearstackandfinish:   ;op		de
 131+ E127 C9                                   ret
 132+ E128              .WrapNextLine:
 133+ E128 FD 5C        .NextLine:              ld      e,iyh
 134+ E12A 7A                                   ld      a,d
 135+ E12B C6 08                                add     a,8
 136+ E12D 57                                   ld      d,a
 137+ E12E 18 E7                                jr		.PrintLoop
 138+ E130
 139+ E130
# file closed: ./Layer1Graphics/layer1_print_at.asm
1316  E130              ; Bank 59  ------------------------------------------------------------------------------------------------------------------------
1317  E130              ; In the first copy of the banks the "Non number" labels exist. They will map directly in other banks
1318  E130              ; as the is aligned and data tables are after that
1319  E130              ; need to make the ship index tables same size in each to simplify further
1320  E130                  SLOT    ShipModelsAddr
1321  E130                  PAGE    BankShipModels1
1322  E130              	ORG     ShipModelsAddr, BankShipModels1
1323  E000                  INCLUDE "./Data/ShipModelMacros.asm"
# file opened: ./Data/ShipModelMacros.asm
   1+ E000              MShipBankTable          MACRO
   2+ E000 ~                                    DW      BankShipModels1
   3+ E000 ~                                    DW      BankShipModels2
   4+ E000 ~                                    DW      BankShipModels3
   5+ E000 ~                                    DW      BankShipModels4
   6+ E000                                      ENDM
   7+ E000              ; For ship number A fetch
   8+ E000              ;           the adjusted ship number in B , C = original number
   9+ E000              ;           bank number in A for the respective ship based on the ship table
  10+ E000              MGetShipBankId:         MACRO   banktable
  11+ E000 ~                                    ld      b,0
  12+ E000 ~                                    ld      c,a                                 ; c= original ship id
  13+ E000 ~            .ShiftLoop:             srl     a
  14+ E000 ~                                    srl     a
  15+ E000 ~                                    srl     a
  16+ E000 ~                                    srl     a                                   ; divide by 16
  17+ E000 ~                                    ld      b,a                                 ; b = bank nbr
  18+ E000 ~                                    ld      a,c
  19+ E000 ~                                    ld      d,b
  20+ E000 ~                                    ld      e,16
  21+ E000 ~                                    mul                                         ; de = 16 * bank number (max is about 15 banks)
  22+ E000 ~                                    sub     e                                   ; a= actual model id now
  23+ E000 ~            .SelectedBank:          ld      d,b                                 ; save current bank number
  24+ E000 ~                                    ld      b,a                                 ; b = adjusted ship nbr
  25+ E000 ~                                    ld      a,d                                 ; a = bank number
  26+ E000 ~            ;.. Now b = bank and a = adjusted ship nbr
  27+ E000 ~                                    ld      hl,banktable                        ; a= bank index
  28+ E000 ~                                    add     hl,a
  29+ E000 ~                                    add     hl,a
  30+ E000 ~                                    ld      a,(hl)                              ; a = actual bank now
  31+ E000 ~                                    ClearCarryFlag
  32+ E000 ~                                    ret
  33+ E000                                      ENDM
  34+ E000
  35+ E000              McopyVertsToUniverse:   MACRO
  36+ E000 ~                                    ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
  37+ E000 ~                                    ld          de,UBnkHullVerticies
  38+ E000 ~                                    ld          b,0
  39+ E000 ~                                    ld			a,(VertexCtX6Addr)
  40+ E000 ~                                    ld          c,a
  41+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  42+ E000 ~                                    call        memcopy_dma
  43+ E000 ~                                    ret
  44+ E000                                      ENDM
  45+ E000
  46+ E000              McopyEdgesToUniverse:   MACRO
  47+ E000 ~                                    ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
  48+ E000 ~                                    ld          de,UBnkHullEdges
  49+ E000 ~                                    ld          b,0
  50+ E000 ~                                    ld			a,(LineX4Addr)
  51+ E000 ~                                    ld          c,a
  52+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  53+ E000 ~                                    call        memcopy_dma
  54+ E000 ~                                    ret
  55+ E000                                      ENDM
  56+ E000
  57+ E000              McopyNormsToUniverse:   MACRO
  58+ E000 ~                                    ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
  59+ E000 ~                                    ld          de,UBnkHullNormals
  60+ E000 ~                                    ld          b,0
  61+ E000 ~                                    ld          a,(FaceCtX4Addr)
  62+ E000 ~                                    ld          c,a
  63+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  64+ E000 ~                                    call        memcopy_dma
  65+ E000 ~                                    ret
  66+ E000                                      ENDM
  67+ E000
  68+ E000              ; Passes in ship nbr in A and bank is part of MACRO
  69+ E000              MCopyShipToUniverse:    MACRO       banklabel
  70+ E000 ~                                    ld          hl,UBnkShipModelBank
  71+ E000 ~                                    ld          (hl),banklabel
  72+ E000 ~                                    ld          (UBnkShipModelNbr),a
  73+ E000 ~            .GetHullDataLength:     ld          hl,ShipModelSizeTable
  74+ E000 ~                                    add         hl,a
  75+ E000 ~                                    add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
  76+ E000 ~                                    ld          c,(hl)
  77+ E000 ~                                    inc         hl
  78+ E000 ~                                    ld          b,(hl)                      ; bc now equals length of data set
  79+ E000 ~            .GetHullDataAddress:    ld          hl,ShipModelTable
  80+ E000 ~                                    add         hl,a
  81+ E000 ~                                    add         hl,a                        ; now hl = address of ship data value
  82+ E000 ~                                    ld          a,(hl)
  83+ E000 ~                                    inc         hl
  84+ E000 ~                                    ld          h,(hl)
  85+ E000 ~                                    ld          l,a                         ; now hl = address of ship hull data
  86+ E000 ~                                    ld          de,UBnkHullCopy             ; Universe bank
  87+ E000 ~                                    ld          bc,ShipDataLength
  88+ E000 ~                                    ldir
  89+ E000 ~                                    call        CopyVertsToUniv
  90+ E000 ~                                    call        CopyEdgesToUniv
  91+ E000 ~                                    call        CopyNormsToUniv
  92+ E000 ~                                    ret
  93+ E000                                      ENDM
  94+ E000
  95+ E000              MCopyBodyToUniverse:    MACRO       copyRoutine
  96+ E000 ~                                    ld          a,13
  97+ E000 ~                                    call        copyRoutine
  98+ E000 ~                                    ret
  99+ E000                                      ENDM
 100+ E000
 101+ E000
 102+ E000              MCopyShipIdToUniverse:  MACRO
 103+ E000 ~                                    call        GetShipModelId
 104+ E000 ~                                    MMUSelectShipBankA
 105+ E000 ~                                    ld          a,b
 106+ E000 ~                                    jp          CopyShipToUniverse
 107+ E000                                      ENDM
# file closed: ./Data/ShipModelMacros.asm
1324  E000                  INCLUDE "./Data/ShipBank1Label.asm"
# file opened: ./Data/ShipBank1Label.asm
   1+ E000 53 68 69 70  ShipBank1Label:         DB  "ShipBank1      "
   1+ E004 42 61 6E 6B
   1+ E008 31 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank1Label.asm
1325  E00F              GetShipBankId:
1326  E00F              GetShipBank1Id:        MGetShipBankId ShipBankTable
1326  E00F 06 00       >                        ld      b,0
1326  E011 4F          >                        ld      c,a                                 ; c= original ship id
1326  E012 CB 3F       >.ShiftLoop:             srl     a
1326  E014 CB 3F       >                        srl     a
1326  E016 CB 3F       >                        srl     a
1326  E018 CB 3F       >                        srl     a                                   ; divide by 16
1326  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1326  E01B 79          >                        ld      a,c
1326  E01C 50          >                        ld      d,b
1326  E01D 1E 10       >                        ld      e,16
1326  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1326  E021 93          >                        sub     e                                   ; a= actual model id now
1326  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1326  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1326  E024 7A          >                        ld      a,d                                 ; a = bank number
1326  E025             >;.. Now b = bank and a = adjusted ship nbr
1326  E025 21 62 E0    >                        ld      hl,ShipBankTable                        ; a= bank index
1326  E028 ED 31       >                        add     hl,a
1326  E02A ED 31       >                        add     hl,a
1326  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1326  E02D             >                        ClearCarryFlag
1326  E02D B7          >                        or a
1326  E02E C9          >                        ret
1327  E02F              CopyVertsToUniv:
1328  E02F              CopyVertsToUniv1:       McopyVertsToUniverse
1328  E02F 2A 20 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1328  E032 11 25 C3    >                        ld          de,UBnkHullVerticies
1328  E035 06 00       >                        ld          b,0
1328  E037 3A 14 C3    >                        ld			a,(VertexCtX6Addr)
1328  E03A 4F          >                        ld          c,a
1328  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1328  E03C CD 66 96    >                        call        memcopy_dma
1328  E03F C9          >                        ret
1329  E040              CopyEdgesToUniv:
1330  E040              CopyEdgesToUniv1:       McopyEdgesToUniverse
1330  E040 2A 0F C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1330  E043 11 51 C4    >                        ld          de,UBnkHullEdges
1330  E046 06 00       >                        ld          b,0
1330  E048 3A 11 C3    >                        ld			a,(LineX4Addr)
1330  E04B 4F          >                        ld          c,a
1330  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1330  E04D CD 66 96    >                        call        memcopy_dma
1330  E050 C9          >                        ret
1331  E051              CopyNormsToUniv:
1332  E051              CopyNormsToUniv1:       McopyNormsToUniverse
1332  E051 2A 1C C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1332  E054 11 01 C9    >                        ld          de,UBnkHullNormals
1332  E057 06 00       >                        ld          b,0
1332  E059 3A 18 C3    >                        ld          a,(FaceCtX4Addr)
1332  E05C 4F          >                        ld          c,a
1332  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1332  E05E CD 66 96    >                        call        memcopy_dma
1332  E061 C9          >                        ret
1333  E062              ShipBankTable:
1334  E062              ShipBankTable1:         MShipBankTable
1334  E062 3B 00       >                        DW      BankShipModels1
1334  E064 43 00       >                        DW      BankShipModels2
1334  E066 44 00       >                        DW      BankShipModels3
1334  E068 45 00       >                        DW      BankShipModels4
1335  E06A              CopyShipToUniverse:
1336  E06A              CopyShipToUniverse1     MCopyShipToUniverse     BankShipModels1
1336  E06A 21 2D C0    >                        ld          hl,UBnkShipModelBank
1336  E06D 36 3B       >                        ld          (hl),BankShipModels1
1336  E06F 32 2E C0    >                        ld          (UBnkShipModelNbr),a
1336  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1336  E075 ED 31       >                        add         hl,a
1336  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1336  E079 4E          >                        ld          c,(hl)
1336  E07A 23          >                        inc         hl
1336  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1336  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1336  E07F ED 31       >                        add         hl,a
1336  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1336  E083 7E          >                        ld          a,(hl)
1336  E084 23          >                        inc         hl
1336  E085 66          >                        ld          h,(hl)
1336  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1336  E087 11 0C C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1336  E08A 01 19 00    >                        ld          bc,ShipDataLength
1336  E08D ED B0       >                        ldir
1336  E08F CD 2F E0    >                        call        CopyVertsToUniv
1336  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1336  E095 CD 51 E0    >                        call        CopyNormsToUniv
1336  E098 C9          >                        ret
1337  E099              CopyBodyToUniverse:
1338  E099              CopyBodyToUniverse1:    MCopyBodyToUniverse     CopyShipToUniverse1
1338  E099 3E 0D       >                        ld          a,13
1338  E09B CD 6A E0    >                        call        CopyShipToUniverse1
1338  E09E C9          >                        ret
1339  E09F                  INCLUDE "./Data/ShipModelMetaData1.asm"
# file opened: ./Data/ShipModelMetaData1.asm
   1+ E09F              ShipModelTable:
   2+ E09F 3F E1        ShipModelTable1:         DW Adder                                   ;00 $00
   3+ E0A1 74 E2                                 DW Anaconda                                ;01 $01
   4+ E0A3 7B E3                                 DW Asp_Mk_2                                ;02 $02
   5+ E0A5 A6 E4                                 DW Boa                                     ;03 $03
   6+ E0A7 9D E5                                 DW CargoType5                              ;04 $04
   7+ E0A9 4A E6                                 DW Boulder                                 ;05 $05
   8+ E0AB F1 E6                                 DW Asteroid                                ;06 $06
   9+ E0AD CC E7                                 DW Bushmaster                              ;07 $07
  10+ E0AF 9D E8                                 DW Chameleon                               ;08 $08
  11+ E0B1 CA E9                                 DW CobraMk3                                ;09 $09
  12+ E0B3 57 EB                                 DW Cobra_Mk_1                              ;10 $0A
  13+ E0B5 22 EC                                 DW Cobra_Mk_3_P                            ;11 $0B
  14+ E0B7 AF ED                                 DW Constrictor                             ;12 $0C
  15+ E0B9 B6 EE                                 DW Coriolis                                ;13 $0D
  16+ E0BB D7 EF                                 DW Cougar                                  ;14 $0E
  17+ E0BD DE F0                                 DW Dodo                                    ;15 $0F
  18+ E0BF              ShipVertexTable:
  19+ E0BF 58 E1        ShipVertexTable1:        DW AdderVertices                           ;00 $00
  20+ E0C1 8D E2                                 DW AnacondaVertices                        ;01 $01
  21+ E0C3 94 E3                                 DW Asp_Mk_2Vertices                        ;02 $02
  22+ E0C5 BF E4                                 DW BoaVertices                             ;03 $03
  23+ E0C7 B6 E5                                 DW CargoType5Vertices                      ;04 $04
  24+ E0C9 63 E6                                 DW BoulderVertices                         ;05 $05
  25+ E0CB 0A E7                                 DW AsteroidVertices                        ;06 $06
  26+ E0CD E5 E7                                 DW BushmasterVertices                      ;07 $07
  27+ E0CF B6 E8                                 DW ChameleonVertices                       ;08 $08
  28+ E0D1 E3 E9                                 DW CobraMk3Vertices                        ;09 $09
  29+ E0D3 70 EB                                 DW Cobra_Mk_1Vertices                      ;10 $0A
  30+ E0D5 3B EC                                 DW Cobra_Mk_3_PVertices                    ;11 $0B
  31+ E0D7 C8 ED                                 DW ConstrictorVertices                     ;12 $0C
  32+ E0D9 CF EE                                 DW CoriolisVertices                        ;13 $0D
  33+ E0DB F0 EF                                 DW CougarVertices                          ;14 $0E
  34+ E0DD F7 F0                                 DW DodoVertices                            ;15 $0F
  35+ E0DF              ShipEdgeTable:
  36+ E0DF C4 E1        ShipEdgeTable1:          DW AdderEdges                              ;00 $00
  37+ E0E1 E7 E2                                 DW AnacondaEdges                           ;01 $01
  38+ E0E3 06 E4                                 DW Asp_Mk_2Edges                           ;02 $02
  39+ E0E5 0D E5                                 DW BoaEdges                                ;03 $03
  40+ E0E7 F2 E5                                 DW CargoType5Edges                         ;04 $04
  41+ E0E9 8D E6                                 DW BoulderEdges                            ;05 $05
  42+ E0EB 40 E7                                 DW AsteroidEdges                           ;06 $06
  43+ E0ED 2D E8                                 DW BushmasterEdges                         ;07 $07
  44+ E0EF 22 E9                                 DW ChameleonEdges                          ;08 $08
  45+ E0F1 8B EA                                 DW CobraMk3Edges                           ;09 $09
  46+ E0F3 B2 EB                                 DW Cobra_Mk_1Edges                         ;10 $0A
  47+ E0F5 E3 EC                                 DW Cobra_Mk_3_PEdges                       ;11 $0B
  48+ E0F7 2E EE                                 DW ConstrictorEdges                        ;12 $0C
  49+ E0F9 2F EF                                 DW CoriolisEdges                           ;13 $0D
  50+ E0FB 62 F0                                 DW CougarEdges                             ;14 $0E
  51+ E0FD 87 F1                                 DW DodoEdges                               ;15 $0F
  52+ E0FF              ShipNormalTable:
  53+ E0FF 38 E2        ShipNormalTable1:        DW AdderNormals                            ;00 $00
  54+ E101 4B E3                                 DW AnacondaNormals                         ;01 $01
  55+ E103 76 E4                                 DW Asp_Mk_2Normals                         ;02 $02
  56+ E105 6D E5                                 DW BoaNormals                              ;03 $03
  57+ E107 2E E6                                 DW CargoType5Normals                       ;04 $04
  58+ E109 C9 E6                                 DW BoulderNormals                          ;05 $05
  59+ E10B 94 E7                                 DW AsteroidNormals                         ;06 $06
  60+ E10D 79 E8                                 DW BushmasterNormals                       ;07 $07
  61+ E10F 96 E9                                 DW ChameleonNormals                        ;08 $08
  62+ E111 23 EB                                 DW CobraMk3Normals                         ;09 $09
  63+ E113 FA EB                                 DW Cobra_Mk_1Normals                       ;10 $0A
  64+ E115 7B ED                                 DW Cobra_Mk_3_PNormals                     ;11 $0B
  65+ E117 8E EE                                 DW ConstrictorNormals                      ;12 $0C
  66+ E119 9F EF                                 DW CoriolisNormals                         ;13 $0D
  67+ E11B C6 F0                                 DW CougarNormals                           ;14 $0E
  68+ E11D 0F F2                                 DW DodoNormals                             ;15 $0F
  69+ E11F              ShipModelSizeTable:
  70+ E11F 35 01        ShipModelSizeTable1:     DW AdderLen                                ;00 $00
  71+ E121 07 01                                 DW AnacondaLen                             ;01 $01
  72+ E123 2B 01                                 DW Asp_Mk_2Len                             ;02 $02
  73+ E125 F7 00                                 DW BoaLen                                  ;03 $03
  74+ E127 AD 00                                 DW CargoType5Len                           ;04 $04
  75+ E129 A7 00                                 DW BoulderLen                              ;05 $05
  76+ E12B DB 00                                 DW AsteroidLen                             ;06 $06
  77+ E12D D1 00                                 DW BushmasterLen                           ;07 $07
  78+ E12F 2D 01                                 DW ChameleonLen                            ;08 $08
  79+ E131 8D 01                                 DW CobraMk3Len                             ;09 $09
  80+ E133 CB 00                                 DW Cobra_Mk_1Len                           ;10 $0A
  81+ E135 8D 01                                 DW Cobra_Mk_3_PLen                         ;11 $0B
  82+ E137 07 01                                 DW ConstrictorLen                          ;12 $0C
  83+ E139 21 01                                 DW CoriolisLen                             ;13 $0D
  84+ E13B 07 01                                 DW CougarLen                               ;14 $0E
  85+ E13D 61 01                                 DW DodoLen                                 ;15 $0F
  86+ E13F
  87+ E13F                                      include "Data/ships/Adder.asm"
# file opened: ./Data/ships/Adder.asm
   1++E13F 00 09 C4     Adder:	                DB $00, $09, $C4
   2++E142 C4 E1                                DW AdderEdges
   3++E144 74                                   DB AdderEdgesSize
   4++E145 00 16                                DB $00, $16
   5++E147 6C                                   DB AdderVertSize
   6++E148 1D                                   DB AdderEdgesCnt
   7++E149 00 28                                DB $00, $28
   8++E14B 3C                                   DB AdderNormalsSize
   9++E14C 17 48 18                             DB $17, $48, $18
  10++E14F 38 E2                                DW AdderNormals
  11++E151 02 21                                DB $02, $21
  12++E153 58 E1                                DW AdderVertices
  13++E155 00 00                                DB 0,0                      ; Type and Tactics
  14++E157 01                                   DB ShipCanAnger
  15++E158 12 00 28 9F  AdderVertices:	        DB $12, $00, $28, $9F, $01, $BC     ;01
  15++E15C 01 BC
  16++E15E 12 00 28 1F                          DB $12, $00, $28, $1F, $01, $23     ;02
  16++E162 01 23
  17++E164 1E 00 18 3F                          DB $1E, $00, $18, $3F, $23, $45     ;03
  17++E168 23 45
  18++E16A 1E 00 28 3F                          DB $1E, $00, $28, $3F, $45, $66     ;04
  18++E16E 45 66
  19++E170 12 07 28 7F                          DB $12, $07, $28, $7F, $56, $7E     ;05
  19++E174 56 7E
  20++E176 12 07 28 FF                          DB $12, $07, $28, $FF, $78, $AE     ;06
  20++E17A 78 AE
  21++E17C 1E 00 28 BF                          DB $1E, $00, $28, $BF, $89, $AA     ;07
  21++E180 89 AA
  22++E182 1E 00 18 BF                          DB $1E, $00, $18, $BF, $9A, $BC     ;08
  22++E186 9A BC
  23++E188 12 07 28 BF                          DB $12, $07, $28, $BF, $78, $9D     ;09
  23++E18C 78 9D
  24++E18E 12 07 28 3F                          DB $12, $07, $28, $3F, $46, $7D     ;10
  24++E192 46 7D
  25++E194 12 07 0D 9F                          DB $12, $07, $0D, $9F, $09, $BD     ;11
  25++E198 09 BD
  26++E19A 12 07 0D 1F                          DB $12, $07, $0D, $1F, $02, $4D     ;12
  26++E19E 02 4D
  27++E1A0 12 07 0D DF                          DB $12, $07, $0D, $DF, $1A, $CE     ;13
  27++E1A4 1A CE
  28++E1A6 12 07 0D 5F                          DB $12, $07, $0D, $5F, $13, $5E     ;14
  28++E1AA 13 5E
  29++E1AC 0B 03 1D 85                          DB $0B, $03, $1D, $85, $00, $00     ;15
  29++E1B0 00 00
  30++E1B2 0B 03 1D 05                          DB $0B, $03, $1D, $05, $00, $00     ;16
  30++E1B6 00 00
  31++E1B8 0B 04 18 04                          DB $0B, $04, $18, $04, $00, $00     ;17
  31++E1BC 00 00
  32++E1BE 0B 04 18 84                          DB $0B, $04, $18, $84, $00, $00     ;18
  32++E1C2 00 00
  33++E1C4              AdderVertSize:          equ $ - AdderVertices
  34++E1C4 1F 01 00 04  AdderEdges:	            DB $1F, $01, $00, $04               ;01
  35++E1C8 07 23 04 08                          DB $07, $23, $04, $08               ;02
  36++E1CC 1F 45 08 0C                          DB $1F, $45, $08, $0C               ;03
  37++E1D0 1F 56 0C 10                          DB $1F, $56, $0C, $10               ;04
  38++E1D4 1F 7E 10 14                          DB $1F, $7E, $10, $14               ;05
  39++E1D8 1F 8A 14 18                          DB $1F, $8A, $14, $18               ;06
  40++E1DC 1F 9A 18 1C                          DB $1F, $9A, $18, $1C               ;07
  41++E1E0 07 BC 1C 00                          DB $07, $BC, $1C, $00               ;08
  42++E1E4 1F 46 0C 24                          DB $1F, $46, $0C, $24               ;09
  43++E1E8 1F 7D 24 20                          DB $1F, $7D, $24, $20               ;10
  44++E1EC 1F 89 20 18                          DB $1F, $89, $20, $18               ;11
  45++E1F0 1F 0B 00 28                          DB $1F, $0B, $00, $28               ;12
  46++E1F4 1F 9B 1C 28                          DB $1F, $9B, $1C, $28               ;13
  47++E1F8 1F 02 04 2C                          DB $1F, $02, $04, $2C               ;14
  48++E1FC 1F 24 08 2C                          DB $1F, $24, $08, $2C               ;15
  49++E200 1F 1C 00 30                          DB $1F, $1C, $00, $30               ;16
  50++E204 1F AC 1C 30                          DB $1F, $AC, $1C, $30               ;17
  51++E208 1F 13 04 34                          DB $1F, $13, $04, $34               ;18
  52++E20C 1F 35 08 34                          DB $1F, $35, $08, $34               ;19
  53++E210 1F 0D 28 2C                          DB $1F, $0D, $28, $2C               ;20
  54++E214 1F 1E 30 34                          DB $1F, $1E, $30, $34               ;21
  55++E218 1F 9D 20 28                          DB $1F, $9D, $20, $28               ;22
  56++E21C 1F 4D 24 2C                          DB $1F, $4D, $24, $2C               ;23
  57++E220 1F AE 14 30                          DB $1F, $AE, $14, $30               ;24
  58++E224 1F 5E 10 34                          DB $1F, $5E, $10, $34               ;25
  59++E228 05 00 38 3C                          DB $05, $00, $38, $3C               ;26
  60++E22C 03 00 3C 40                          DB $03, $00, $3C, $40               ;27
  61++E230 04 00 40 44                          DB $04, $00, $40, $44               ;28
  62++E234 03 00 44 38                          DB $03, $00, $44, $38               ;29
  63++E238              AdderEdgesSize:         equ $ - AdderEdges
  64++E238              AdderEdgesCnt:          equ AdderEdgesSize/4
  65++E238 1F 00 27 0A  AdderNormals:	        DB $1F, $00, $27, $0A               ;01
  66++E23C 5F 00 27 0A                          DB $5F, $00, $27, $0A               ;02
  67++E240 1F 45 32 0D                          DB $1F, $45, $32, $0D               ;03
  68++E244 5F 45 32 0D                          DB $5F, $45, $32, $0D               ;04
  69++E248 1F 1E 34 00                          DB $1F, $1E, $34, $00               ;05
  70++E24C 5F 1E 34 00                          DB $5F, $1E, $34, $00               ;06
  71++E250 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;07
  72++E254 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;08
  73++E258 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;09
  74++E25C 9F 1E 34 00                          DB $9F, $1E, $34, $00               ;10
  75++E260 DF 1E 34 00                          DB $DF, $1E, $34, $00               ;11
  76++E264 9F 45 32 0D                          DB $9F, $45, $32, $0D               ;12
  77++E268 DF 45 32 0D                          DB $DF, $45, $32, $0D               ;13
  78++E26C 1F 00 1C 00                          DB $1F, $00, $1C, $00               ;14
  79++E270 5F 00 1C 00                          DB $5F, $00, $1C, $00               ;15
  80++E274
  81++E274              AdderNormalsSize:       equ $ - AdderNormals
  82++E274              AdderLen:                equ $ - Adder
  83++E274
  84++E274
  85++E274
  86++E274
  87++E274
  88++E274
  89++E274
  90++E274
  91++E274
  92++E274
  93++E274
# file closed: ./Data/ships/Adder.asm
  88+ E274                                      include "Data/ships/Anaconda.asm"
# file opened: ./Data/ships/Anaconda.asm
   1++E274 07 27 10     Anaconda:	            DB $07, $27, $10
   2++E277 E7 E2                                DW AnacondaEdges
   3++E279 64                                   DB AnacondaEdgesSize
   4++E27A 30 2E                                DB $30, $2E
   5++E27C 5A                                   DB AnacondaVertSize
   6++E27D 19                                   DB AnacondaEdgesCnt
   7++E27E 00 00                                DB $00, $00
   8++E280 30                                   DB AnacondaNormalsSize
   9++E281 24 FC 0E                             DB $24, $FC, $0E
  10++E284 4B E3                                DW AnacondaNormals
  11++E286 01 3F                                DB $01, $3F
  12++E288 8D E2                                DW AnacondaVertices
  13++E28A 00 00                                DB 0,0                      ; Type and Tactics
  14++E28C 01                                   DB ShipCanAnger
  15++E28D 00 07 3A 3E  AnacondaVertices:	    DB $00, $07, $3A, $3E, $01, $55 ;01
  15++E291 01 55
  16++E293 2B 0D 25 FE                          DB $2B, $0D, $25, $FE, $01, $22 ;02
  16++E297 01 22
  17++E299 1A 2F 03 FE                          DB $1A, $2F, $03, $FE, $02, $33 ;03
  17++E29D 02 33
  18++E29F 1A 2F 03 7E                          DB $1A, $2F, $03, $7E, $03, $44 ;04
  18++E2A3 03 44
  19++E2A5 2B 0D 25 7E                          DB $2B, $0D, $25, $7E, $04, $55 ;05
  19++E2A9 04 55
  20++E2AB 00 30 31 3E                          DB $00, $30, $31, $3E, $15, $66 ;06
  20++E2AF 15 66
  21++E2B1 45 0F 0F BE                          DB $45, $0F, $0F, $BE, $12, $77 ;07
  21++E2B5 12 77
  22++E2B7 2B 27 28 DF                          DB $2B, $27, $28, $DF, $23, $88 ;08
  22++E2BB 23 88
  23++E2BD 2B 27 28 5F                          DB $2B, $27, $28, $5F, $34, $99 ;09
  23++E2C1 34 99
  24++E2C3 45 0F 0F 3E                          DB $45, $0F, $0F, $3E, $45, $AA ;10
  24++E2C7 45 AA
  25++E2C9 2B 35 17 BF                          DB $2B, $35, $17, $BF, $FF, $FF ;11
  25++E2CD FF FF
  26++E2CF 45 01 20 DF                          DB $45, $01, $20, $DF, $27, $88 ;12
  26++E2D3 27 88
  27++E2D5 00 00 FE 1F                          DB $00, $00, $FE, $1F, $FF, $FF ;13
  27++E2D9 FF FF
  28++E2DB 45 01 20 5F                          DB $45, $01, $20, $5F, $49, $AA ;14
  28++E2DF 49 AA
  29++E2E1 2B 35 17 3F                          DB $2B, $35, $17, $3F, $FF, $FF ;15
  29++E2E5 FF FF
  30++E2E7              AnacondaVertSize:       equ $ - AnacondaVertices
  31++E2E7 1E 01 00 04  AnacondaEdges:	        DB $1E, $01, $00, $04           ;01
  32++E2EB 1E 02 04 08                          DB $1E, $02, $04, $08           ;02
  33++E2EF 1E 03 08 0C                          DB $1E, $03, $08, $0C           ;03
  34++E2F3 1E 04 0C 10                          DB $1E, $04, $0C, $10           ;04
  35++E2F7 1E 05 00 10                          DB $1E, $05, $00, $10           ;05
  36++E2FB 1D 15 00 14                          DB $1D, $15, $00, $14           ;06
  37++E2FF 1D 12 04 18                          DB $1D, $12, $04, $18           ;07
  38++E303 1D 23 08 1C                          DB $1D, $23, $08, $1C           ;08
  39++E307 1D 34 0C 20                          DB $1D, $34, $0C, $20           ;09
  40++E30B 1D 45 10 24                          DB $1D, $45, $10, $24           ;10
  41++E30F 1E 16 14 28                          DB $1E, $16, $14, $28           ;11
  42++E313 1E 17 18 28                          DB $1E, $17, $18, $28           ;12
  43++E317 1E 27 18 2C                          DB $1E, $27, $18, $2C           ;13
  44++E31B 1E 28 1C 2C                          DB $1E, $28, $1C, $2C           ;14
  45++E31F 1F 38 1C 30                          DB $1F, $38, $1C, $30           ;15
  46++E323 1F 39 20 30                          DB $1F, $39, $20, $30           ;16
  47++E327 1E 49 20 34                          DB $1E, $49, $20, $34           ;17
  48++E32B 1E 4A 24 34                          DB $1E, $4A, $24, $34           ;18
  49++E32F 1E 5A 24 38                          DB $1E, $5A, $24, $38
  50++E333 1E 56 14 38                          DB $1E, $56, $14, $38
  51++E337 1E 6B 28 38                          DB $1E, $6B, $28, $38
  52++E33B 1F 7B 28 30                          DB $1F, $7B, $28, $30
  53++E33F 1F 78 2C 30                          DB $1F, $78, $2C, $30
  54++E343 1F 9A 30 34                          DB $1F, $9A, $30, $34
  55++E347 1F AB 30 38                          DB $1F, $AB, $30, $38
  56++E34B              AnacondaEdgesSize:      equ $ - AnacondaEdges
  57++E34B              AnacondaEdgesCnt:       equ AnacondaEdgesSize/4
  58++E34B 7E 00 33 31  AnacondaNormals:	    DB $7E, $00, $33, $31           ;01
  59++E34F BE 33 12 57                          DB $BE, $33, $12, $57           ;02
  60++E353 FE 4D 39 13                          DB $FE, $4D, $39, $13           ;03
  61++E357 5F 00 5A 10                          DB $5F, $00, $5A, $10           ;04
  62++E35B 7E 4D 39 13                          DB $7E, $4D, $39, $13           ;05
  63++E35F 3E 33 12 57                          DB $3E, $33, $12, $57           ;06
  64++E363 3E 00 6F 14                          DB $3E, $00, $6F, $14           ;07
  65++E367 9F 61 48 18                          DB $9F, $61, $48, $18           ;08
  66++E36B DF 6C 44 22                          DB $DF, $6C, $44, $22           ;09
  67++E36F 5F 6C 44 22                          DB $5F, $6C, $44, $22           ;10
  68++E373 1F 61 48 18                          DB $1F, $61, $48, $18           ;11
  69++E377 1F 00 5E 12                          DB $1F, $00, $5E, $12           ;12
  70++E37B              AnacondaNormalsSize:    equ $ - AnacondaNormals
  71++E37B              AnacondaLen:            equ $ - Anaconda
  72++E37B
  73++E37B
  74++E37B
  75++E37B
# file closed: ./Data/ships/Anaconda.asm
  89+ E37B                                      include "Data/ships/Asp_Mk_2.asm"
# file opened: ./Data/ships/Asp_Mk_2.asm
   1++E37B 00 0E 10     Asp_Mk_2:	           DB $00, $0E, $10
   2++E37E 06 E4                                DW Asp_Mk_2Edges
   3++E380 70                                   DB Asp_Mk_2EdgesSize
   4++E381 20 1A                                DB $20, $1A
   5++E383 72                                   DB Asp_Mk_2VertSize
   6++E384 1C                                   DB Asp_Mk_2EdgesCnt
   7++E385 00 C8                                DB $00, $C8
   8++E387 30                                   DB Asp_Mk_2NormalsSize
   9++E388 28 96 28                             DB $28, $96, $28
  10++E38B 76 E4                                DW Asp_Mk_2Normals
  11++E38D 01 29                                DB $01, $29
  12++E38F 94 E3                                DW Asp_Mk_2Vertices
  13++E391 00 00                                DB 0,0                      ; Type and Tactics
  14++E393 01                                   DB ShipCanAnger
  15++E394 00 12 00 56  Asp_Mk_2Vertices:	    DB $00, $12, $00, $56, $01, $22 ;01
  15++E398 01 22
  16++E39A 00 09 2D 7F                          DB $00, $09, $2D, $7F, $12, $BB ;02
  16++E39E 12 BB
  17++E3A0 2B 00 2D 3F                          DB $2B, $00, $2D, $3F, $16, $BB ;03
  17++E3A4 16 BB
  18++E3A6 45 03 00 5F                          DB $45, $03, $00, $5F, $16, $79 ;04
  18++E3AA 16 79
  19++E3AC 2B 0E 1C 5F                          DB $2B, $0E, $1C, $5F, $01, $77 ;05
  19++E3B0 01 77
  20++E3B2 2B 00 2D BF                          DB $2B, $00, $2D, $BF, $25, $BB ;06
  20++E3B6 25 BB
  21++E3B8 45 03 00 DF                          DB $45, $03, $00, $DF, $25, $8A ;07
  21++E3BC 25 8A
  22++E3BE 2B 0E 1C DF                          DB $2B, $0E, $1C, $DF, $02, $88 ;08
  22++E3C2 02 88
  23++E3C4 1A 07 49 5F                          DB $1A, $07, $49, $5F, $04, $79 ;09
  23++E3C8 04 79
  24++E3CA 1A 07 49 DF                          DB $1A, $07, $49, $DF, $04, $8A ;10
  24++E3CE 04 8A
  25++E3D0 2B 0E 1C 1F                          DB $2B, $0E, $1C, $1F, $34, $69 ;11
  25++E3D4 34 69
  26++E3D6 2B 0E 1C 9F                          DB $2B, $0E, $1C, $9F, $34, $5A ;12
  26++E3DA 34 5A
  27++E3DC 00 09 2D 3F                          DB $00, $09, $2D, $3F, $35, $6B ;13
  27++E3E0 35 6B
  28++E3E2 11 00 2D AA                          DB $11, $00, $2D, $AA, $BB, $BB ;14
  28++E3E6 BB BB
  29++E3E8 11 00 2D 29                          DB $11, $00, $2D, $29, $BB, $BB ;15
  29++E3EC BB BB
  30++E3EE 00 04 2D 6A                          DB $00, $04, $2D, $6A, $BB, $BB ;16
  30++E3F2 BB BB
  31++E3F4 00 04 2D 28                          DB $00, $04, $2D, $28, $BB, $BB ;17
  31++E3F8 BB BB
  32++E3FA 00 07 49 4A                          DB $00, $07, $49, $4A, $04, $04 ;18
  32++E3FE 04 04
  33++E400 00 07 53 4A                          DB $00, $07, $53, $4A, $04, $04
  33++E404 04 04
  34++E406              Asp_Mk_2VertSize:       equ $ - Asp_Mk_2Vertices
  35++E406 16 12 00 04  Asp_Mk_2Edges:	        DB $16, $12, $00, $04           ;01
  36++E40A 16 01 00 10                          DB $16, $01, $00, $10           ;02
  37++E40E 16 02 00 1C                          DB $16, $02, $00, $1C           ;03
  38++E412 1F 1B 04 08                          DB $1F, $1B, $04, $08           ;04
  39++E416 1F 16 08 0C                          DB $1F, $16, $08, $0C           ;05
  40++E41A 10 79 0C 20                          DB $10, $79, $0C, $20           ;06
  41++E41E 1F 04 20 24                          DB $1F, $04, $20, $24           ;07
  42++E422 10 8A 18 24                          DB $10, $8A, $18, $24           ;08
  43++E426 1F 25 14 18                          DB $1F, $25, $14, $18           ;09
  44++E42A 1F 2B 04 14                          DB $1F, $2B, $04, $14           ;10
  45++E42E 1F 17 0C 10                          DB $1F, $17, $0C, $10           ;11
  46++E432 1F 07 10 20                          DB $1F, $07, $10, $20           ;12
  47++E436 1F 28 18 1C                          DB $1F, $28, $18, $1C           ;13
  48++E43A 1F 08 1C 24                          DB $1F, $08, $1C, $24           ;14
  49++E43E 1F 6B 08 30                          DB $1F, $6B, $08, $30           ;15
  50++E442 1F 5B 14 30                          DB $1F, $5B, $14, $30           ;16
  51++E446 16 36 28 30                          DB $16, $36, $28, $30           ;17
  52++E44A 16 35 2C 30                          DB $16, $35, $2C, $30           ;18
  53++E44E 16 34 28 2C                          DB $16, $34, $28, $2C
  54++E452 1F 5A 18 2C                          DB $1F, $5A, $18, $2C
  55++E456 1F 4A 24 2C                          DB $1F, $4A, $24, $2C
  56++E45A 1F 69 0C 28                          DB $1F, $69, $0C, $28
  57++E45E 1F 49 20 28                          DB $1F, $49, $20, $28
  58++E462 0A BB 34 3C                          DB $0A, $BB, $34, $3C
  59++E466 09 BB 3C 38                          DB $09, $BB, $3C, $38
  60++E46A 08 BB 38 40                          DB $08, $BB, $38, $40
  61++E46E 08 BB 40 34                          DB $08, $BB, $40, $34
  62++E472 0A 04 48 44                          DB $0A, $04, $48, $44
  63++E476              Asp_Mk_2EdgesSize:      equ $ - Asp_Mk_2Edges
  64++E476              Asp_Mk_2EdgesCnt:       equ Asp_Mk_2EdgesSize/4
  65++E476 5F 00 23 05  Asp_Mk_2Normals:	    DB $5F, $00, $23, $05           ;01
  66++E47A 7F 08 26 07                          DB $7F, $08, $26, $07           ;02
  67++E47E FF 08 26 07                          DB $FF, $08, $26, $07           ;03
  68++E482 36 00 18 01                          DB $36, $00, $18, $01           ;04
  69++E486 1F 00 2B 13                          DB $1F, $00, $2B, $13           ;05
  70++E48A BF 06 1C 02                          DB $BF, $06, $1C, $02           ;06
  71++E48E 3F 06 1C 02                          DB $3F, $06, $1C, $02           ;07
  72++E492 5F 3B 40 1F                          DB $5F, $3B, $40, $1F           ;08
  73++E496 DF 3B 40 1F                          DB $DF, $3B, $40, $1F           ;09
  74++E49A 1F 50 2E 32                          DB $1F, $50, $2E, $32           ;10
  75++E49E 9F 50 2E 32                          DB $9F, $50, $2E, $32           ;11
  76++E4A2 3F 00 00 5A                          DB $3F, $00, $00, $5A           ;12
  77++E4A6              Asp_Mk_2NormalsSize:    equ $ - Asp_Mk_2Normals
  78++E4A6              Asp_Mk_2Len:            equ $ - Asp_Mk_2
  79++E4A6
  80++E4A6
  81++E4A6
  82++E4A6
# file closed: ./Data/ships/Asp_Mk_2.asm
  90+ E4A6                                      include "Data/ships/Boa.asm"
# file opened: ./Data/ships/Boa.asm
   1++E4A6 05 13 24     Boa:	                DB $05, $13, $24
   2++E4A9 0D E5                                DW BoaEdges
   3++E4AB 60                                   DB BoaEdgesSize
   4++E4AC 00 26                                DB $00, $26
   5++E4AE 4E                                   DB BoaVertSize
   6++E4AF 18                                   DB BoaEdgesCnt
   7++E4B0 00 00                                DB $00, $00
   8++E4B2 30                                   DB BoaNormalsSize
   9++E4B3 28 FA 18                             DB $28, $FA, $18
  10++E4B6 6D E5                                DW BoaNormals
  11++E4B8 00 1C                                DB $00, $1C
  12++E4BA BF E4                                DW BoaVertices
  13++E4BC 00 00                                DB 0,0                      ; Type and Tactics
  14++E4BE 01                                   DB ShipCanAnger
  15++E4BF 00 00 5D 1F  BoaVertices:	        DB $00, $00, $5D, $1F, $FF, $FF
  15++E4C3 FF FF
  16++E4C5 00 28 57 38                          DB $00, $28, $57, $38, $02, $33
  16++E4C9 02 33
  17++E4CB 26 19 63 78                          DB $26, $19, $63, $78, $01, $44
  17++E4CF 01 44
  18++E4D1 26 19 63 F8                          DB $26, $19, $63, $F8, $12, $55
  18++E4D5 12 55
  19++E4D7 26 28 3B BF                          DB $26, $28, $3B, $BF, $23, $69
  19++E4DB 23 69
  20++E4DD 26 28 3B 3F                          DB $26, $28, $3B, $3F, $03, $6B
  20++E4E1 03 6B
  21++E4E3 3E 00 43 3F                          DB $3E, $00, $43, $3F, $04, $8B
  21++E4E7 04 8B
  22++E4E9 18 41 4F 7F                          DB $18, $41, $4F, $7F, $14, $8A
  22++E4ED 14 8A
  23++E4EF 18 41 4F FF                          DB $18, $41, $4F, $FF, $15, $7A
  23++E4F3 15 7A
  24++E4F5 3E 00 43 BF                          DB $3E, $00, $43, $BF, $25, $79
  24++E4F9 25 79
  25++E4FB 00 07 6B 36                          DB $00, $07, $6B, $36, $02, $AA
  25++E4FF 02 AA
  26++E501 0D 09 6B 76                          DB $0D, $09, $6B, $76, $01, $AA
  26++E505 01 AA
  27++E507 0D 09 6B F6                          DB $0D, $09, $6B, $F6, $12, $CC
  27++E50B 12 CC
  28++E50D              BoaVertSize:            equ $ - BoaVertices
  29++E50D 1F 6B 00 14  BoaEdges:	            DB $1F, $6B, $00, $14
  30++E511 1F 8A 00 1C                          DB $1F, $8A, $00, $1C
  31++E515 1F 79 00 24                          DB $1F, $79, $00, $24
  32++E519 1D 69 00 10                          DB $1D, $69, $00, $10
  33++E51D 1D 8B 00 18                          DB $1D, $8B, $00, $18
  34++E521 1D 7A 00 20                          DB $1D, $7A, $00, $20
  35++E525 1F 36 10 14                          DB $1F, $36, $10, $14
  36++E529 1F 0B 14 18                          DB $1F, $0B, $14, $18
  37++E52D 1F 48 18 1C                          DB $1F, $48, $18, $1C
  38++E531 1F 1A 1C 20                          DB $1F, $1A, $1C, $20
  39++E535 1F 57 20 24                          DB $1F, $57, $20, $24
  40++E539 1F 29 10 24                          DB $1F, $29, $10, $24
  41++E53D 18 23 04 10                          DB $18, $23, $04, $10
  42++E541 18 03 04 14                          DB $18, $03, $04, $14
  43++E545 18 25 0C 24                          DB $18, $25, $0C, $24
  44++E549 18 15 0C 20                          DB $18, $15, $0C, $20
  45++E54D 18 04 08 18                          DB $18, $04, $08, $18
  46++E551 18 14 08 1C                          DB $18, $14, $08, $1C
  47++E555 16 02 04 28                          DB $16, $02, $04, $28
  48++E559 16 01 08 2C                          DB $16, $01, $08, $2C
  49++E55D 16 12 0C 30                          DB $16, $12, $0C, $30
  50++E561 0E 0C 28 2C                          DB $0E, $0C, $28, $2C
  51++E565 0E 1C 2C 30                          DB $0E, $1C, $2C, $30
  52++E569 0E 2C 30 28                          DB $0E, $2C, $30, $28
  53++E56D              BoaEdgesSize:           equ $ - BoaEdges
  54++E56D              BoaEdgesCnt:            equ BoaEdgesSize/4
  55++E56D 3F 2B 25 3C  BoaNormals:	            DB $3F, $2B, $25, $3C
  56++E571 7F 00 2D 59                          DB $7F, $00, $2D, $59
  57++E575 BF 2B 25 3C                          DB $BF, $2B, $25, $3C
  58++E579 1F 00 28 00                          DB $1F, $00, $28, $00
  59++E57D 7F 3E 20 14                          DB $7F, $3E, $20, $14
  60++E581 FF 3E 20 14                          DB $FF, $3E, $20, $14
  61++E585 1F 00 17 06                          DB $1F, $00, $17, $06
  62++E589 DF 17 0F 09                          DB $DF, $17, $0F, $09
  63++E58D 5F 17 0F 09                          DB $5F, $17, $0F, $09
  64++E591 9F 1A 0D 0A                          DB $9F, $1A, $0D, $0A
  65++E595 5F 00 1F 0C                          DB $5F, $00, $1F, $0C
  66++E599 1F 1A 0D 0A                          DB $1F, $1A, $0D, $0A
  67++E59D              BoaNormalsSize:         equ $ - BoaNormals
  68++E59D              BoaLen:                 equ $ - Boa
  69++E59D
# file closed: ./Data/ships/Boa.asm
  91+ E59D
  92+ E59D                                      include "Data/ships/CargoType5.asm"
# file opened: ./Data/ships/CargoType5.asm
   1++E59D              ;	\ Transporter hull data header info 37 vertices  6*37  = &DE
   2++E59D              ; Corrected pointers
   3++E59D              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   4++E59D              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   5++E59D              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   6++E59D              ;;;				 Example of cargo
   7++E59D              ;;;
   8++E59D              ;;;		Points (nodes, vetices)		6 bytes per vertex
   9++E59D              ;;;     Byte 0 = X magnitide with origin at middle of ship
  10++E59D              ;;;		Byte 1 = Y magnitide with origin at middle of ship
  11++E59D              ;;;		Byte 2 = Z magnitide with origin at middle of ship
  12++E59D              ;;;		Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
  13++E59D              ;;;		Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  14++E59D              ;;;		Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
  15++E59D              ;;;		Edges
  16++E59D              ;;;		Byte 0 = Edge visbility Distance if > XX4 distance then won't show
  17++E59D              ;;;		Byte 1 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  18++E59D              ;;;		Byte 2 = Byte offset to Point 1 (divide by 4 for index)
  19++E59D              ;;;		Byte 3 = Byte offset to Point 2 (divide by 4 for index)
  20++E59D              ;;;	  	Normals (Faces)
  21++E59D              ;;;		Byte 0 = Sign Bits of Vertex 7=X 6=Y 5 = Z, bits 4 to 0 are distance for always visible
  22++E59D              ;;;		Byte 1 = X Lo
  23++E59D              ;;;		Byte 2 = Y Lo
  24++E59D              ;;;		Byte 3 = Z Lo
  25++E59D
  26++E59D 00 90 01     CargoType5              DB $00, $90, $01
  27++E5A0 F2 E5                                DW CargoType5Edges
  28++E5A2 3C                                   DB CargoType5EdgesSize
  29++E5A3 00 12                                DB $00,$12
  30++E5A5 3C                                   DB CargoType5VertSize
  31++E5A6 0F                                   DB CargoType5EdgesCnt
  32++E5A7 00 00                                DB $00,$00
  33++E5A9 1C                                   DB CargoType5NormalsSize
  34++E5AA 0C 11 0F                             DB $0C,$11,$0F
  35++E5AD 2E E6                                DW CargoType5Normals
  36++E5AF 02 00                                DB $02,$00
  37++E5B1 B6 E5                                DW CargoType5Vertices
  38++E5B3 03                                   DB ShipTypeJunk             ; Type
  39++E5B4 00                                   DB 0                        ; Tactics
  40++E5B5 00                                   DB 0
  41++E5B6              ; So cargo is               Edge offset $0050  Face Offset $008C, Verices will alwys be +20, LineMax 31 -> 4  EdgeCnt 15  VertexCnt 60 -> 10     FaceCn 28 -> 7
  42++E5B6 18 10 00 1F  CargoType5Vertices		DB $18,$10,$00,$1F,$10,$55 	; 60 bytes in total for data
  42++E5BA 10 55
  43++E5BC 18 05 0F 1F                          DB $18,$05,$0F,$1F,$10,$22
  43++E5C0 10 22
  44++E5C2 18 0D 09 5F                          DB $18,$0D,$09,$5F,$20,$33
  44++E5C6 20 33
  45++E5C8 18 0D 09 7F                          DB $18,$0D,$09,$7F,$30,$44
  45++E5CC 30 44
  46++E5CE 18 05 0F 3F                          DB $18,$05,$0F,$3F,$40,$55   ; end of left pentagon
  46++E5D2 40 55
  47++E5D4 18 10 00 9F                          DB $18,$10,$00,$9F,$51,$66   ; start of right pentagon
  47++E5D8 51 66
  48++E5DA 18 05 0F 9F                          DB $18,$05,$0F,$9F,$21,$66
  48++E5DE 21 66
  49++E5E0 18 0D 09 DF                          DB $18,$0D,$09,$DF,$32,$66
  49++E5E4 32 66
  50++E5E6 18 0D 09 FF                          DB $18,$0D,$09,$FF,$43,$66
  50++E5EA 43 66
  51++E5EC 18 05 0F BF                          DB $18,$05,$0F,$BF,$54,$66
  51++E5F0 54 66
  52++E5F2              CargoType5VertSize      equ $  - CargoType5Vertices
  53++E5F2 1F 10 00 04  CargoType5Edges			DB $1F,$10,$00,$04,$1F,$20,$04,$08 	; 8 x 7 = 60 bytes
  53++E5F6 1F 20 04 08
  54++E5FA 1F 30 08 0C                          DB $1F,$30,$08,$0C,$1F,$40,$0C,$10
  54++E5FE 1F 40 0C 10
  55++E602 1F 50 00 10                          DB $1F,$50,$00,$10,$1F,$51,$00,$14
  55++E606 1F 51 00 14
  56++E60A 1F 21 04 18                          DB $1F,$21,$04,$18,$1F,$32,$08,$1C
  56++E60E 1F 32 08 1C
  57++E612 1F 43 0C 20                          DB $1F,$43,$0C,$20,$1F,$54,$10,$24
  57++E616 1F 54 10 24
  58++E61A 1F 61 14 18                          DB $1F,$61,$14,$18,$1F,$62,$18,$1C
  58++E61E 1F 62 18 1C
  59++E622 1F 63 1C 20                          DB $1F,$63,$1C,$20,$1F,$64,$20,$24
  59++E626 1F 64 20 24
  60++E62A 1F 65 24 14                          DB $1F,$65,$24,$14
  61++E62E              CargoType5EdgesSize     equ $  - CargoType5Edges
  62++E62E              CargoType5EdgesCnt      equ CargoType5EdgesSize / 4
  63++E62E 1F 60 00 00  CargoType5Normals    	DB $1F,$60,$00,$00
  64++E632 1F 00 29 1E                          DB $1F,$00,$29,$1E,$5F,$00,$12,$30
  64++E636 5F 00 12 30
  65++E63A 5F 00 33 00                          DB $5F,$00,$33,$00,$7F,$00,$12,$30
  65++E63E 7F 00 12 30
  66++E642 3F 00 29 1E                          DB $3F,$00,$29,$1E,$9F,$60,$00,$00   ; end Cargo cannister
  66++E646 9F 60 00 00
  67++E64A              CargoType5NormalsSize   equ $  - CargoType5Normals
  68++E64A              CargoType5Len           equ $  - CargoType5
# file closed: ./Data/ships/CargoType5.asm
  93+ E64A                                      include "Data/ships/Boulder.asm"
# file opened: ./Data/ships/Boulder.asm
   1++E64A 00 03 84     Boulder:	            DB $00, $03, $84
   2++E64D 8D E6                                DW BoulderEdges
   3++E64F 3C                                   DB BoulderEdgesSize
   4++E650 00 0E                                DB $00, $0E
   5++E652 2A                                   DB BoulderVertSize
   6++E653 0F                                   DB BoulderEdgesCnt
   7++E654 00 01                                DB $00, $01
   8++E656 28                                   DB BoulderNormalsSize
   9++E657 14 14 1E                             DB $14, $14, $1E
  10++E65A C9 E6                                DW BoulderNormals
  11++E65C 02 00                                DB $02, $00
  12++E65E 63 E6                                DW BoulderVertices
  13++E660 03 00                                DB ShipTypeJunk,0                      ; Type and Tactics  its only junk for spawing logic
  14++E662 00                                   DB 0
  15++E663 12 25 0B BF  BoulderVertices:	    DB $12, $25, $0B, $BF, $01, $59
  15++E667 01 59
  16++E669 1E 07 0C 1F                          DB $1E, $07, $0C, $1F, $12, $56
  16++E66D 12 56
  17++E66F 1C 07 0C 7F                          DB $1C, $07, $0C, $7F, $23, $67
  17++E673 23 67
  18++E675 02 00 27 3F                          DB $02, $00, $27, $3F, $34, $78
  18++E679 34 78
  19++E67B 1C 22 1E BF                          DB $1C, $22, $1E, $BF, $04, $89
  19++E67F 04 89
  20++E681 05 0A 0D 5F                          DB $05, $0A, $0D, $5F, $FF, $FF
  20++E685 FF FF
  21++E687 14 11 1E 3F                          DB $14, $11, $1E, $3F, $FF, $FF
  21++E68B FF FF
  22++E68D              BoulderVertSize:        equ $ - BoulderVertices
  23++E68D 1F 15 00 04  BoulderEdges:	        DB $1F, $15, $00, $04
  24++E691 1F 26 04 08                          DB $1F, $26, $04, $08
  25++E695 1F 37 08 0C                          DB $1F, $37, $08, $0C
  26++E699 1F 48 0C 10                          DB $1F, $48, $0C, $10
  27++E69D 1F 09 10 00                          DB $1F, $09, $10, $00
  28++E6A1 1F 01 00 14                          DB $1F, $01, $00, $14
  29++E6A5 1F 12 04 14                          DB $1F, $12, $04, $14
  30++E6A9 1F 23 08 14                          DB $1F, $23, $08, $14
  31++E6AD 1F 34 0C 14                          DB $1F, $34, $0C, $14
  32++E6B1 1F 04 10 14                          DB $1F, $04, $10, $14
  33++E6B5 1F 59 00 18                          DB $1F, $59, $00, $18
  34++E6B9 1F 56 04 18                          DB $1F, $56, $04, $18
  35++E6BD 1F 67 08 18                          DB $1F, $67, $08, $18
  36++E6C1 1F 78 0C 18                          DB $1F, $78, $0C, $18
  37++E6C5 1F 89 10 18                          DB $1F, $89, $10, $18
  38++E6C9              BoulderEdgesSize:       equ $ - BoulderEdges
  39++E6C9              BoulderEdgesCnt:        equ BoulderEdgesSize/4
  40++E6C9 DF 0F 03 08  BoulderNormals:	        DB $DF, $0F, $03, $08
  41++E6CD 9F 07 0C 1E                          DB $9F, $07, $0C, $1E
  42++E6D1 5F 20 2F 18                          DB $5F, $20, $2F, $18
  43++E6D5 FF 03 27 07                          DB $FF, $03, $27, $07
  44++E6D9 FF 05 04 01                          DB $FF, $05, $04, $01
  45++E6DD 1F 31 54 08                          DB $1F, $31, $54, $08
  46++E6E1 3F 70 15 15                          DB $3F, $70, $15, $15
  47++E6E5 7F 4C 23 52                          DB $7F, $4C, $23, $52
  48++E6E9 3F 16 38 89                          DB $3F, $16, $38, $89
  49++E6ED 3F 28 6E 26                          DB $3F, $28, $6E, $26
  50++E6F1              BoulderNormalsSize:     equ $ - BoulderNormals
  51++E6F1              BoulderLen:             equ $ - Boulder
  52++E6F1
# file closed: ./Data/ships/Boulder.asm
  94+ E6F1                                      include "Data/ships/Asteroid.asm"
# file opened: ./Data/ships/Asteroid.asm
   1++E6F1 00 19 00     Asteroid:	            DB $00, $19, $00
   2++E6F4 40 E7                                DW AsteroidEdges
   3++E6F6 54                                   DB AsteroidEdgesSize
   4++E6F7 00 22                                DB $00, $22
   5++E6F9 36                                   DB AsteroidVertSize
   6++E6FA 15                                   DB AsteroidEdgesCnt
   7++E6FB 00 05                                DB $00, $05
   8++E6FD 38                                   DB AsteroidNormalsSize
   9++E6FE 32 3C 1E                             DB $32, $3C, $1E
  10++E701 94 E7                                DW AsteroidNormals
  11++E703 01 00                                DB $01, $00
  12++E705 0A E7                                DW AsteroidVertices
  13++E707 03 00                                DB ShipTypeJunk,0                      ; Type and Tactics
  14++E709 00                                   DB 0
  15++E70A 00 50 00 1F  AsteroidVertices:	    DB $00, $50, $00, $1F, $FF, $FF ;01
  15++E70E FF FF
  16++E710 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF ;02
  16++E714 FF FF
  17++E716 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF ;03
  17++E71A FF FF
  18++E71C 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF ;04
  18++E720 FF FF
  19++E722 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC ;05
  19++E726 65 DC
  20++E728 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF ;06
  20++E72C FF FF
  21++E72E 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32 ;07
  21++E732 10 32
  22++E734 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF ;08
  22++E738 FF FF
  23++E73A 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA ;09
  23++E73E 98 BA
  24++E740              AsteroidVertSize:       equ $ - AsteroidVertices
  25++E740 1F 72 00 04  AsteroidEdges:	        DB $1F, $72, $00, $04           ;01
  26++E744 1F D6 00 10                          DB $1F, $D6, $00, $10           ;02
  27++E748 1F C5 0C 10                          DB $1F, $C5, $0C, $10           ;03
  28++E74C 1F B4 08 0C                          DB $1F, $B4, $08, $0C           ;04
  29++E750 1F A3 04 08                          DB $1F, $A3, $04, $08           ;05
  30++E754 1F 32 04 18                          DB $1F, $32, $04, $18           ;06
  31++E758 1F 31 08 18                          DB $1F, $31, $08, $18           ;07
  32++E75C 1F 41 08 14                          DB $1F, $41, $08, $14           ;08
  33++E760 1F 10 14 18                          DB $1F, $10, $14, $18           ;09
  34++E764 1F 60 00 14                          DB $1F, $60, $00, $14           ;10
  35++E768 1F 54 0C 14                          DB $1F, $54, $0C, $14           ;11
  36++E76C 1F 20 00 18                          DB $1F, $20, $00, $18           ;12
  37++E770 1F 65 10 14                          DB $1F, $65, $10, $14           ;13
  38++E774 1F A8 04 20                          DB $1F, $A8, $04, $20           ;14
  39++E778 1F 87 04 1C                          DB $1F, $87, $04, $1C           ;15
  40++E77C 1F D7 00 1C                          DB $1F, $D7, $00, $1C           ;16
  41++E780 1F DC 10 1C                          DB $1F, $DC, $10, $1C           ;17
  42++E784 1F C9 0C 1C                          DB $1F, $C9, $0C, $1C           ;18
  43++E788 1F B9 0C 20                          DB $1F, $B9, $0C, $20
  44++E78C 1F BA 08 20                          DB $1F, $BA, $08, $20
  45++E790 1F 98 1C 20                          DB $1F, $98, $1C, $20
  46++E794
  47++E794              AsteroidEdgesSize:      equ $ - AsteroidEdges
  48++E794              AsteroidEdgesCnt:       equ AsteroidEdgesSize/4
  49++E794 1F 09 42 51  AsteroidNormals:	    DB $1F, $09, $42, $51           ;01
  50++E798 5F 09 42 51                          DB $5F, $09, $42, $51           ;02
  51++E79C 9F 48 40 1F                          DB $9F, $48, $40, $1F           ;03
  52++E7A0 DF 40 49 2F                          DB $DF, $40, $49, $2F           ;04
  53++E7A4 5F 2D 4F 41                          DB $5F, $2D, $4F, $41           ;05
  54++E7A8 1F 87 0F 23                          DB $1F, $87, $0F, $23           ;06
  55++E7AC 1F 26 4C 46                          DB $1F, $26, $4C, $46           ;07
  56++E7B0 BF 42 3B 27                          DB $BF, $42, $3B, $27           ;08
  57++E7B4 FF 43 0F 50                          DB $FF, $43, $0F, $50           ;09
  58++E7B8 7F 42 0E 4B                          DB $7F, $42, $0E, $4B           ;10
  59++E7BC FF 46 50 28                          DB $FF, $46, $50, $28           ;11
  60++E7C0 7F 3A 66 33                          DB $7F, $3A, $66, $33           ;12
  61++E7C4 3F 51 09 43                          DB $3F, $51, $09, $43           ;13
  62++E7C8 3F 2F 5E 3F                          DB $3F, $2F, $5E, $3F           ;14
  63++E7CC              AsteroidNormalsSize:    equ $ - AsteroidNormals
  64++E7CC              AsteroidLen:            equ $ - Asteroid
  65++E7CC
  66++E7CC
# file closed: ./Data/ships/Asteroid.asm
  95+ E7CC
  96+ E7CC                                      include "Data/ships/Bushmaster.asm"
# file opened: ./Data/ships/Bushmaster.asm
   1++E7CC 00 10 9A     Bushmaster:	            DB $00, $10, $9A
   2++E7CF 2D E8                                DW BushmasterEdges
   3++E7D1 4C                                   DB BushmasterEdgesSize
   4++E7D2 00 1E                                DB $00, $1E
   5++E7D4 48                                   DB BushmasterVertSize
   6++E7D5 13                                   DB BushmasterEdgesCnt
   7++E7D6 00 96                                DB $00, $96
   8++E7D8 24                                   DB BushmasterNormalsSize
   9++E7D9 14 4A 23                             DB $14, $4A, $23
  10++E7DC 79 E8                                DW BushmasterNormals
  11++E7DE 02 21                                DB $02, $21
  12++E7E0 E5 E7                                DW BushmasterVertices
  13++E7E2 00 00                                DB 0,0                      ; Type and Tactics
  14++E7E4 01                                   DB ShipCanAnger
  15++E7E5 00 00 3C 1F  BushmasterVertices:	    DB $00, $00, $3C, $1F, $23, $01
  15++E7E9 23 01
  16++E7EB 32 00 14 1F                          DB $32, $00, $14, $1F, $57, $13
  16++E7EF 57 13
  17++E7F1 32 00 14 9F                          DB $32, $00, $14, $9F, $46, $02
  17++E7F5 46 02
  18++E7F7 00 14 00 1F                          DB $00, $14, $00, $1F, $45, $01
  18++E7FB 45 01
  19++E7FD 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF
  19++E801 FF FF
  20++E803 00 0E 28 3F                          DB $00, $0E, $28, $3F, $88, $45
  20++E807 88 45
  21++E809 28 00 28 3F                          DB $28, $00, $28, $3F, $88, $57
  21++E80D 88 57
  22++E80F 28 00 28 BF                          DB $28, $00, $28, $BF, $88, $46
  22++E813 88 46
  23++E815 00 04 28 2A                          DB $00, $04, $28, $2A, $88, $88
  23++E819 88 88
  24++E81B 0A 00 28 2A                          DB $0A, $00, $28, $2A, $88, $88
  24++E81F 88 88
  25++E821 00 04 28 6A                          DB $00, $04, $28, $6A, $88, $88
  25++E825 88 88
  26++E827 0A 00 28 AA                          DB $0A, $00, $28, $AA, $88, $88
  26++E82B 88 88
  27++E82D              BushmasterVertSize:     equ $ - BushmasterVertices
  28++E82D 1F 13 00 04  BushmasterEdges:	    DB $1F, $13, $00, $04
  29++E831 1F 02 00 08                          DB $1F, $02, $00, $08
  30++E835 1F 01 00 0C                          DB $1F, $01, $00, $0C
  31++E839 1F 23 00 10                          DB $1F, $23, $00, $10
  32++E83D 1F 45 0C 14                          DB $1F, $45, $0C, $14
  33++E841 1F 04 08 0C                          DB $1F, $04, $08, $0C
  34++E845 1F 15 04 0C                          DB $1F, $15, $04, $0C
  35++E849 1F 46 08 1C                          DB $1F, $46, $08, $1C
  36++E84D 1F 57 04 18                          DB $1F, $57, $04, $18
  37++E851 1F 26 08 10                          DB $1F, $26, $08, $10
  38++E855 1F 37 04 10                          DB $1F, $37, $04, $10
  39++E859 1F 48 14 1C                          DB $1F, $48, $14, $1C
  40++E85D 1F 58 14 18                          DB $1F, $58, $14, $18
  41++E861 1F 68 10 1C                          DB $1F, $68, $10, $1C
  42++E865 1F 78 10 18                          DB $1F, $78, $10, $18
  43++E869 0A 88 20 24                          DB $0A, $88, $20, $24
  44++E86D 0A 88 24 28                          DB $0A, $88, $24, $28
  45++E871 0A 88 28 2C                          DB $0A, $88, $28, $2C
  46++E875 0A 88 2C 20                          DB $0A, $88, $2C, $20
  47++E879              BushmasterEdgesSize:    equ $ - BushmasterEdges
  48++E879              BushmasterEdgesCnt:     equ BushmasterEdgesSize/4
  49++E879 9F 17 58 1D  BushmasterNormals:	    DB $9F, $17, $58, $1D
  50++E87D 1F 17 58 1D                          DB $1F, $17, $58, $1D
  51++E881 DF 0E 5D 12                          DB $DF, $0E, $5D, $12
  52++E885 5F 0E 5D 12                          DB $5F, $0E, $5D, $12
  53++E889 BF 1F 59 0D                          DB $BF, $1F, $59, $0D
  54++E88D 3F 1F 59 0D                          DB $3F, $1F, $59, $0D
  55++E891 FF 2A 55 07                          DB $FF, $2A, $55, $07
  56++E895 7F 2A 55 07                          DB $7F, $2A, $55, $07
  57++E899 3F 00 00 60                          DB $3F, $00, $00, $60
  58++E89D              BushmasterNormalsSize:  equ $ - BushmasterNormals
  59++E89D              BushmasterLen:          equ $ - Bushmaster
  60++E89D
# file closed: ./Data/ships/Bushmaster.asm
  97+ E89D                                      include "Data/ships/Chameleon.asm"
# file opened: ./Data/ships/Chameleon.asm
   1++E89D 03 0F A0     Chameleon:	            DB $03, $0F, $A0
   2++E8A0 22 E9                                DW ChameleonEdges
   3++E8A2 74                                   DB ChameleonEdgesSize
   4++E8A3 00 1A                                DB $00, $1A
   5++E8A5 6C                                   DB ChameleonVertSize
   6++E8A6 1D                                   DB ChameleonEdgesCnt
   7++E8A7 00 C8                                DB $00, $C8
   8++E8A9 34                                   DB ChameleonNormalsSize
   9++E8AA 0A 64 1D                             DB $0A, $64, $1D
  10++E8AD 96 E9                                DW ChameleonNormals
  11++E8AF 01 23                                DB $01, $23
  12++E8B1 B6 E8                                DW ChameleonVertices
  13++E8B3 00 00                                DB 0,0                      ; Type and Tactics
  14++E8B5 01                                   DB ShipCanAnger
  15++E8B6 12 00 6E 9F  ChameleonVertices:	    DB $12, $00, $6E, $9F, $25, $01
  15++E8BA 25 01
  16++E8BC 12 00 6E 1F                          DB $12, $00, $6E, $1F, $34, $01
  16++E8C0 34 01
  17++E8C2 28 00 00 9F                          DB $28, $00, $00, $9F, $8B, $25
  17++E8C6 8B 25
  18++E8C8 08 18 00 9F                          DB $08, $18, $00, $9F, $68, $22
  18++E8CC 68 22
  19++E8CE 08 18 00 1F                          DB $08, $18, $00, $1F, $69, $33
  19++E8D2 69 33
  20++E8D4 28 00 00 1F                          DB $28, $00, $00, $1F, $9A, $34
  20++E8D8 9A 34
  21++E8DA 08 18 00 5F                          DB $08, $18, $00, $5F, $7A, $44
  21++E8DE 7A 44
  22++E8E0 08 18 00 DF                          DB $08, $18, $00, $DF, $7B, $55
  22++E8E4 7B 55
  23++E8E6 00 18 28 1F                          DB $00, $18, $28, $1F, $36, $02
  23++E8EA 36 02
  24++E8EC 00 18 28 5F                          DB $00, $18, $28, $5F, $57, $14
  24++E8F0 57 14
  25++E8F2 20 00 28 BF                          DB $20, $00, $28, $BF, $BC, $88
  25++E8F6 BC 88
  26++E8F8 00 18 28 3F                          DB $00, $18, $28, $3F, $9C, $68
  26++E8FC 9C 68
  27++E8FE 20 00 28 3F                          DB $20, $00, $28, $3F, $AC, $99
  27++E902 AC 99
  28++E904 00 18 28 7F                          DB $00, $18, $28, $7F, $BC, $7A
  28++E908 BC 7A
  29++E90A 08 00 28 AA                          DB $08, $00, $28, $AA, $CC, $CC
  29++E90E CC CC
  30++E910 00 08 28 2A                          DB $00, $08, $28, $2A, $CC, $CC
  30++E914 CC CC
  31++E916 08 00 28 2A                          DB $08, $00, $28, $2A, $CC, $CC
  31++E91A CC CC
  32++E91C 00 08 28 6A                          DB $00, $08, $28, $6A, $CC, $CC
  32++E920 CC CC
  33++E922              ChameleonVertSize:      equ $ - ChameleonVertices
  34++E922 1F 01 00 04  ChameleonEdges:	        DB $1F, $01, $00, $04
  35++E926 1F 02 00 20                          DB $1F, $02, $00, $20
  36++E92A 1F 15 00 24                          DB $1F, $15, $00, $24
  37++E92E 1F 03 04 20                          DB $1F, $03, $04, $20
  38++E932 1F 14 04 24                          DB $1F, $14, $04, $24
  39++E936 1F 34 04 14                          DB $1F, $34, $04, $14
  40++E93A 1F 25 00 08                          DB $1F, $25, $00, $08
  41++E93E 1F 26 0C 20                          DB $1F, $26, $0C, $20
  42++E942 1F 36 10 20                          DB $1F, $36, $10, $20
  43++E946 1F 75 1C 24                          DB $1F, $75, $1C, $24
  44++E94A 1F 74 18 24                          DB $1F, $74, $18, $24
  45++E94E 1F 39 10 14                          DB $1F, $39, $10, $14
  46++E952 1F 4A 14 18                          DB $1F, $4A, $14, $18
  47++E956 1F 28 08 0C                          DB $1F, $28, $08, $0C
  48++E95A 1F 5B 08 1C                          DB $1F, $5B, $08, $1C
  49++E95E 1F 8B 08 28                          DB $1F, $8B, $08, $28
  50++E962 1F 9A 14 30                          DB $1F, $9A, $14, $30
  51++E966 1F 68 0C 2C                          DB $1F, $68, $0C, $2C
  52++E96A 1F 7B 1C 34                          DB $1F, $7B, $1C, $34
  53++E96E 1F 69 10 2C                          DB $1F, $69, $10, $2C
  54++E972 1F 7A 18 34                          DB $1F, $7A, $18, $34
  55++E976 1F 8C 28 2C                          DB $1F, $8C, $28, $2C
  56++E97A 1F BC 28 34                          DB $1F, $BC, $28, $34
  57++E97E 1F 9C 2C 30                          DB $1F, $9C, $2C, $30
  58++E982 1F AC 30 34                          DB $1F, $AC, $30, $34
  59++E986 0A CC 38 3C                          DB $0A, $CC, $38, $3C
  60++E98A 0A CC 3C 40                          DB $0A, $CC, $3C, $40
  61++E98E 0A CC 40 44                          DB $0A, $CC, $40, $44
  62++E992 0A CC 44 38                          DB $0A, $CC, $44, $38
  63++E996              ChameleonEdgesSize:     equ $ - ChameleonEdges
  64++E996              ChameleonEdgesCnt:      equ ChameleonEdgesSize/4
  65++E996 1F 00 5A 1F  ChameleonNormals:	    DB $1F, $00, $5A, $1F
  66++E99A 5F 00 5A 1F                          DB $5F, $00, $5A, $1F
  67++E99E 9F 39 4C 0B                          DB $9F, $39, $4C, $0B
  68++E9A2 1F 39 4C 0B                          DB $1F, $39, $4C, $0B
  69++E9A6 5F 39 4C 0B                          DB $5F, $39, $4C, $0B
  70++E9AA DF 39 4C 0B                          DB $DF, $39, $4C, $0B
  71++E9AE 1F 00 60 00                          DB $1F, $00, $60, $00
  72++E9B2 5F 00 60 00                          DB $5F, $00, $60, $00
  73++E9B6 BF 39 4C 0B                          DB $BF, $39, $4C, $0B
  74++E9BA 3F 39 4C 0B                          DB $3F, $39, $4C, $0B
  75++E9BE 7F 39 4C 0B                          DB $7F, $39, $4C, $0B
  76++E9C2 FF 39 4C 0B                          DB $FF, $39, $4C, $0B
  77++E9C6 3F 00 00 60                          DB $3F, $00, $00, $60
  78++E9CA              ChameleonNormalsSize:   equ $ - ChameleonNormals
  79++E9CA              ChameleonLen:           equ $ - Chameleon
  80++E9CA
# file closed: ./Data/ships/Chameleon.asm
  98+ E9CA                                      include "Data/ships/CobraMk3.asm"
# file opened: ./Data/ships/CobraMk3.asm
   1++E9CA              ; Corrected pointers
   2++E9CA              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   3++E9CA              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   4++E9CA              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   5++E9CA 03 41 23     CobraMk3    		    DB $03, $41, $23
   6++E9CD 8B EA                                DW CobraMk3Edges
   7++E9CF 98                                   DB CobraMkEdgesSize
   8++E9D0 54 2A                                DB $54,$2A
   9++E9D2 A8                                   DB CobraMkVertSize
  10++E9D3 26                                   DB CobraMkEdgesCnt
  11++E9D4 00 00                                DB $00,$00
  12++E9D6 34                                   DB CobraMk3NormalsSize
  13++E9D7 32 96 1C                             DB $32,$96,$1C
  14++E9DA 23 EB                                DW CobraMk3Normals
  15++E9DC 01 13                                DB $01,$13
  16++E9DE E3 E9                                DW CobraMk3Vertices
  17++E9E0 00 00                                DB 0,0                      ; Type and Tactics
  18++E9E2 01                                   DB ShipCanAnger
  19++E9E3                                  ; missiles = 3
  20++E9E3 20 00 4C 1F  CobraMk3Vertices	    DB $20,$00,$4C,$1F,$FF,$FF
  20++E9E7 FF FF
  21++E9E9 20 00 4C 9F                          DB $20,$00,$4C,$9F,$FF,$FF
  21++E9ED FF FF
  22++E9EF 00 1A 18 1F                          DB $00,$1A,$18,$1F,$FF,$FF
  22++E9F3 FF FF
  23++E9F5 78 03 08 FF                          DB $78,$03,$08,$FF,$73,$AA
  23++E9F9 73 AA
  24++E9FB 78 03 08 7F                          DB $78,$03,$08,$7F,$84,$CC
  24++E9FF 84 CC
  25++EA01 58 10 28 BF                          DB $58,$10,$28,$BF,$FF,$FF
  25++EA05 FF FF
  26++EA07 58 10 28 3F                          DB $58,$10,$28,$3F,$FF,$FF
  26++EA0B FF FF
  27++EA0D 80 08 28 7F                          DB $80,$08,$28,$7F,$98,$CC
  27++EA11 98 CC
  28++EA13 80 08 28 FF                          DB $80,$08,$28,$FF,$97,$AA
  28++EA17 97 AA
  29++EA19 00 1A 28 3F                          DB $00,$1A,$28,$3F,$65,$99
  29++EA1D 65 99
  30++EA1F 20 18 28 FF                          DB $20,$18,$28,$FF,$A9,$BB
  30++EA23 A9 BB
  31++EA25 20 18 28 7F                          DB $20,$18,$28,$7F,$B9,$CC
  31++EA29 B9 CC
  32++EA2B 24 08 28 B4                          DB $24,$08,$28,$B4,$99,$99
  32++EA2F 99 99
  33++EA31 08 0C 28 B4                          DB $08,$0C,$28,$B4,$99,$99
  33++EA35 99 99
  34++EA37 08 0C 28 34                          DB $08,$0C,$28,$34,$99,$99
  34++EA3B 99 99
  35++EA3D 24 08 28 34                          DB $24,$08,$28,$34,$99,$99
  35++EA41 99 99
  36++EA43 24 0C 28 74                          DB $24,$0C,$28,$74,$99,$99
  36++EA47 99 99
  37++EA49 08 10 28 74                          DB $08,$10,$28,$74,$99,$99
  37++EA4D 99 99
  38++EA4F 08 10 28 F4                          DB $08,$10,$28,$F4,$99,$99
  38++EA53 99 99
  39++EA55 24 0C 28 F4                          DB $24,$0C,$28,$F4,$99,$99
  39++EA59 99 99
  40++EA5B 00 00 4C 06                          DB $00,$00,$4C,$06,$B0,$BB
  40++EA5F B0 BB
  41++EA61 00 00 5A 1F                          DB $00,$00,$5A,$1F,$B0,$BB
  41++EA65 B0 BB
  42++EA67 50 06 28 E8                          DB $50,$06,$28,$E8,$99,$99
  42++EA6B 99 99
  43++EA6D 50 06 28 A8                          DB $50,$06,$28,$A8,$99,$99
  43++EA71 99 99
  44++EA73 58 00 28 A6                          DB $58,$00,$28,$A6,$99,$99
  44++EA77 99 99
  45++EA79 50 06 28 28                          DB $50,$06,$28,$28,$99,$99
  45++EA7D 99 99
  46++EA7F 58 00 28 26                          DB $58,$00,$28,$26,$99,$99
  46++EA83 99 99
  47++EA85 50 06 28 68                          DB $50,$06,$28,$68,$99,$99
  47++EA89 99 99
  48++EA8B              CobraMkVertSize         equ $  - CobraMk3Vertices
  49++EA8B 1F B0 00 04  CobraMk3Edges		    DB $1F,$B0,$00,$04,$1F,$C4,$00,$10
  49++EA8F 1F C4 00 10
  50++EA93 1F A3 04 0C                          DB $1F,$A3,$04,$0C,$1F,$A7,$0C,$20
  50++EA97 1F A7 0C 20
  51++EA9B 1F C8 10 1C                          DB $1F,$C8,$10,$1C,$1F,$98,$18,$1C
  51++EA9F 1F 98 18 1C
  52++EAA3 1F 96 18 24                          DB $1F,$96,$18,$24,$1F,$95,$14,$24
  52++EAA7 1F 95 14 24
  53++EAAB 1F 97 14 20                          DB $1F,$97,$14,$20,$1F,$51,$08,$14
  53++EAAF 1F 51 08 14
  54++EAB3 1F 62 08 18                          DB $1F,$62,$08,$18,$1F,$73,$0C,$14
  54++EAB7 1F 73 0C 14
  55++EABB 1F 84 10 18                          DB $1F,$84,$10,$18,$1F,$10,$04,$08
  55++EABF 1F 10 04 08
  56++EAC3 1F 20 00 08                          DB $1F,$20,$00,$08,$1F,$A9,$20,$28
  56++EAC7 1F A9 20 28
  57++EACB 1F B9 28 2C                          DB $1F,$B9,$28,$2C,$1F,$C9,$1C,$2C
  57++EACF 1F C9 1C 2C
  58++EAD3 1F BA 04 28                          DB $1F,$BA,$04,$28,$1F,$CB,$00,$2C
  58++EAD7 1F CB 00 2C
  59++EADB 1D 31 04 14                          DB $1D,$31,$04,$14,$1D,$42,$00,$18
  59++EADF 1D 42 00 18
  60++EAE3 06 B0 50 54                          DB $06,$B0,$50,$54,$14,$99,$30,$34
  60++EAE7 14 99 30 34
  61++EAEB 14 99 48 4C                          DB $14,$99,$48,$4C,$14,$99,$38,$3C
  61++EAEF 14 99 38 3C
  62++EAF3 14 99 40 44                          DB $14,$99,$40,$44,$13,$99,$3C,$40
  62++EAF7 13 99 3C 40
  63++EAFB 11 99 38 44                          DB $11,$99,$38,$44,$13,$99,$34,$48
  63++EAFF 13 99 34 48
  64++EB03 13 99 30 4C                          DB $13,$99,$30,$4C,$1E,$65,$08,$24
  64++EB07 1E 65 08 24
  65++EB0B 06 99 58 60                          DB $06,$99,$58,$60,$06,$99,$5C,$60
  65++EB0F 06 99 5C 60
  66++EB13 08 99 58 5C                          DB $08,$99,$58,$5C,$06,$99,$64,$68
  66++EB17 06 99 64 68
  67++EB1B 06 99 68 6C                          DB $06,$99,$68,$6C,$08,$99,$64,$6C
  67++EB1F 08 99 64 6C
  68++EB23              CobraMkEdgesSize        equ $  - CobraMk3Edges
  69++EB23              CobraMkEdgesCnt         equ CobraMkEdgesSize/4
  70++EB23              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  71++EB23 1F 00 3E 1F  CobraMk3Normals		    DB $1F,$00,$3E,$1F
  72++EB27 9F 12 37 10                          DB $9F,$12,$37,$10
  73++EB2B 1F 12 37 10                          DB $1F,$12,$37,$10
  74++EB2F 9F 10 34 0E                          DB $9F,$10,$34,$0E
  75++EB33 1F 10 34 0E                          DB $1F,$10,$34,$0E
  76++EB37 9F 0E 2F 00                          DB $9F,$0E,$2F,$00
  77++EB3B 1F 0E 2F 00                          DB $1F,$0E,$2F,$00
  78++EB3F 9F 3D 66 00                          DB $9F,$3D,$66,$00
  79++EB43 1F 3D 66 00                          DB $1F,$3D,$66,$00
  80++EB47 3F 00 00 50                          DB $3F,$00,$00,$50
  81++EB4B DF 07 2A 09                          DB $DF,$07,$2A,$09
  82++EB4F 5F 00 1E 06                          DB $5F,$00,$1E,$06
  83++EB53 5F 07 2A 09                          DB $5F,$07,$2A,$09 		;end of Cobra Mk III
  84++EB57              CobraMk3NormalsSize     equ $  - CobraMk3Normals
  85++EB57              CobraMk3Len             equ $  - CobraMk3
  86++EB57
# file closed: ./Data/ships/CobraMk3.asm
  99+ EB57                                      include "Data/ships/Cobra_Mk_1.asm"
# file opened: ./Data/ships/Cobra_Mk_1.asm
   1++EB57 03 26 49     Cobra_Mk_1:	            DB $03, $26, $49
   2++EB5A B2 EB                                DW Cobra_Mk_1Edges
   3++EB5C 48                                   DB Cobra_Mk_1EdgesSize
   4++EB5D 28 1A                                DB $28, $1A
   5++EB5F 42                                   DB Cobra_Mk_1VertSize
   6++EB60 12                                   DB Cobra_Mk_1EdgesCnt
   7++EB61 00 4B                                DB $00, $4B
   8++EB63 28                                   DB Cobra_Mk_1NormalsSize
   9++EB64 13 51 1A                             DB $13, $51, $1A
  10++EB67 FA EB                                DW Cobra_Mk_1Normals
  11++EB69 02 22                                DB $02, $22
  12++EB6B 70 EB                                DW Cobra_Mk_1Vertices
  13++EB6D 00 00                                DB 0,0                      ; Type and Tactics
  14++EB6F 01                                   DB ShipCanAnger
  15++EB70 12 01 32 DF  Cobra_Mk_1Vertices:	    DB $12, $01, $32, $DF, $01, $23
  15++EB74 01 23
  16++EB76 12 01 32 5F                          DB $12, $01, $32, $5F, $01, $45
  16++EB7A 01 45
  17++EB7C 42 00 07 9F                          DB $42, $00, $07, $9F, $23, $88
  17++EB80 23 88
  18++EB82 42 00 07 1F                          DB $42, $00, $07, $1F, $45, $99
  18++EB86 45 99
  19++EB88 20 0C 26 BF                          DB $20, $0C, $26, $BF, $26, $78
  19++EB8C 26 78
  20++EB8E 20 0C 26 3F                          DB $20, $0C, $26, $3F, $46, $79
  20++EB92 46 79
  21++EB94 36 0C 26 FF                          DB $36, $0C, $26, $FF, $13, $78
  21++EB98 13 78
  22++EB9A 36 0C 26 7F                          DB $36, $0C, $26, $7F, $15, $79
  22++EB9E 15 79
  23++EBA0 00 0C 06 34                          DB $00, $0C, $06, $34, $02, $46
  23++EBA4 02 46
  24++EBA6 00 01 32 42                          DB $00, $01, $32, $42, $01, $11
  24++EBAA 01 11
  25++EBAC 00 01 3C 5F                          DB $00, $01, $3C, $5F, $01, $11
  25++EBB0 01 11
  26++EBB2              Cobra_Mk_1VertSize:     equ $ - Cobra_Mk_1Vertices
  27++EBB2 1F 01 04 00  Cobra_Mk_1Edges:	    DB $1F, $01, $04, $00
  28++EBB6 1F 23 00 08                          DB $1F, $23, $00, $08
  29++EBBA 1F 38 08 18                          DB $1F, $38, $08, $18
  30++EBBE 1F 17 18 1C                          DB $1F, $17, $18, $1C
  31++EBC2 1F 59 1C 0C                          DB $1F, $59, $1C, $0C
  32++EBC6 1F 45 0C 04                          DB $1F, $45, $0C, $04
  33++EBCA 1F 28 08 10                          DB $1F, $28, $08, $10
  34++EBCE 1F 67 10 14                          DB $1F, $67, $10, $14
  35++EBD2 1F 49 14 0C                          DB $1F, $49, $14, $0C
  36++EBD6 14 02 00 20                          DB $14, $02, $00, $20
  37++EBDA 14 04 20 04                          DB $14, $04, $20, $04
  38++EBDE 10 26 10 20                          DB $10, $26, $10, $20
  39++EBE2 10 46 20 14                          DB $10, $46, $20, $14
  40++EBE6 1F 78 10 18                          DB $1F, $78, $10, $18
  41++EBEA 1F 79 14 1C                          DB $1F, $79, $14, $1C
  42++EBEE 14 13 00 18                          DB $14, $13, $00, $18
  43++EBF2 14 15 04 1C                          DB $14, $15, $04, $1C
  44++EBF6 02 01 28 24                          DB $02, $01, $28, $24
  45++EBFA              Cobra_Mk_1EdgesSize:    equ $ - Cobra_Mk_1Edges
  46++EBFA              Cobra_Mk_1EdgesCnt:     equ Cobra_Mk_1EdgesSize/4
  47++EBFA 1F 00 29 0A  Cobra_Mk_1Normals:	    DB $1F, $00, $29, $0A
  48++EBFE 5F 00 1B 03                          DB $5F, $00, $1B, $03
  49++EC02 9F 08 2E 08                          DB $9F, $08, $2E, $08
  50++EC06 DF 0C 39 0C                          DB $DF, $0C, $39, $0C
  51++EC0A 1F 08 2E 08                          DB $1F, $08, $2E, $08
  52++EC0E 5F 0C 39 0C                          DB $5F, $0C, $39, $0C
  53++EC12 1F 00 31 00                          DB $1F, $00, $31, $00
  54++EC16 3F 00 00 9A                          DB $3F, $00, $00, $9A
  55++EC1A BF 79 6F 3E                          DB $BF, $79, $6F, $3E
  56++EC1E 3F 79 6F 3E                          DB $3F, $79, $6F, $3E
  57++EC22              Cobra_Mk_1NormalsSize:  equ $ - Cobra_Mk_1Normals
  58++EC22              Cobra_Mk_1Len:          equ $ - Cobra_Mk_1
  59++EC22
# file closed: ./Data/ships/Cobra_Mk_1.asm
 100+ EC22                                      include "Data/ships/Cobra_Mk_3_P.asm"
# file opened: ./Data/ships/Cobra_Mk_3_P.asm
   1++EC22 01 23 41     Cobra_Mk_3_P:	        DB $01, $23, $41
   2++EC25 E3 EC                                DW Cobra_Mk_3_PEdges
   3++EC27 98                                   DB Cobra_Mk_3_PEdgesSize
   4++EC28 54 2A                                DB $54, $2A
   5++EC2A A8                                   DB Cobra_Mk_3_PVertSize
   6++EC2B 26                                   DB Cobra_Mk_3_PEdgesCnt
   7++EC2C 00 AF                                DB $00, $AF
   8++EC2E 34                                   DB Cobra_Mk_3_PNormalsSize
   9++EC2F 32 96 1C                             DB $32, $96, $1C
  10++EC32 7B ED                                DW Cobra_Mk_3_PNormals
  11++EC34 01 12                                DB $01, $12
  12++EC36 3B EC                                DW Cobra_Mk_3_PVertices
  13++EC38 00 00                                DB 0,0                      ; Type and Tactics
  14++EC3A 01                                   DB ShipCanAnger
  15++EC3B 20 00 4C 1F  Cobra_Mk_3_PVertices:	DB $20, $00, $4C, $1F, $FF, $FF
  15++EC3F FF FF
  16++EC41 20 00 4C 9F                          DB $20, $00, $4C, $9F, $FF, $FF
  16++EC45 FF FF
  17++EC47 00 1A 18 1F                          DB $00, $1A, $18, $1F, $FF, $FF
  17++EC4B FF FF
  18++EC4D 78 03 08 FF                          DB $78, $03, $08, $FF, $73, $AA
  18++EC51 73 AA
  19++EC53 78 03 08 7F                          DB $78, $03, $08, $7F, $84, $CC
  19++EC57 84 CC
  20++EC59 58 10 28 BF                          DB $58, $10, $28, $BF, $FF, $FF
  20++EC5D FF FF
  21++EC5F 58 10 28 3F                          DB $58, $10, $28, $3F, $FF, $FF
  21++EC63 FF FF
  22++EC65 80 08 28 7F                          DB $80, $08, $28, $7F, $98, $CC
  22++EC69 98 CC
  23++EC6B 80 08 28 FF                          DB $80, $08, $28, $FF, $97, $AA
  23++EC6F 97 AA
  24++EC71 00 1A 28 3F                          DB $00, $1A, $28, $3F, $65, $99
  24++EC75 65 99
  25++EC77 20 18 28 FF                          DB $20, $18, $28, $FF, $A9, $BB
  25++EC7B A9 BB
  26++EC7D 20 18 28 7F                          DB $20, $18, $28, $7F, $B9, $CC
  26++EC81 B9 CC
  27++EC83 24 08 28 B4                          DB $24, $08, $28, $B4, $99, $99
  27++EC87 99 99
  28++EC89 08 0C 28 B4                          DB $08, $0C, $28, $B4, $99, $99
  28++EC8D 99 99
  29++EC8F 08 0C 28 34                          DB $08, $0C, $28, $34, $99, $99
  29++EC93 99 99
  30++EC95 24 08 28 34                          DB $24, $08, $28, $34, $99, $99
  30++EC99 99 99
  31++EC9B 24 0C 28 74                          DB $24, $0C, $28, $74, $99, $99
  31++EC9F 99 99
  32++ECA1 08 10 28 74                          DB $08, $10, $28, $74, $99, $99
  32++ECA5 99 99
  33++ECA7 08 10 28 F4                          DB $08, $10, $28, $F4, $99, $99
  33++ECAB 99 99
  34++ECAD 24 0C 28 F4                          DB $24, $0C, $28, $F4, $99, $99
  34++ECB1 99 99
  35++ECB3 00 00 4C 06                          DB $00, $00, $4C, $06, $B0, $BB
  35++ECB7 B0 BB
  36++ECB9 00 00 5A 1F                          DB $00, $00, $5A, $1F, $B0, $BB
  36++ECBD B0 BB
  37++ECBF 50 06 28 E8                          DB $50, $06, $28, $E8, $99, $99
  37++ECC3 99 99
  38++ECC5 50 06 28 A8                          DB $50, $06, $28, $A8, $99, $99
  38++ECC9 99 99
  39++ECCB 58 00 28 A6                          DB $58, $00, $28, $A6, $99, $99
  39++ECCF 99 99
  40++ECD1 50 06 28 28                          DB $50, $06, $28, $28, $99, $99
  40++ECD5 99 99
  41++ECD7 58 00 28 26                          DB $58, $00, $28, $26, $99, $99
  41++ECDB 99 99
  42++ECDD 50 06 28 68                          DB $50, $06, $28, $68, $99, $99
  42++ECE1 99 99
  43++ECE3              Cobra_Mk_3_PVertSize:   equ $ - Cobra_Mk_3_PVertices
  44++ECE3 1F B0 00 04  Cobra_Mk_3_PEdges:	    DB $1F, $B0, $00, $04
  45++ECE7 1F C4 00 10                          DB $1F, $C4, $00, $10
  46++ECEB 1F A3 04 0C                          DB $1F, $A3, $04, $0C
  47++ECEF 1F A7 0C 20                          DB $1F, $A7, $0C, $20
  48++ECF3 1F C8 10 1C                          DB $1F, $C8, $10, $1C
  49++ECF7 1F 98 18 1C                          DB $1F, $98, $18, $1C
  50++ECFB 1F 96 18 24                          DB $1F, $96, $18, $24
  51++ECFF 1F 95 14 24                          DB $1F, $95, $14, $24
  52++ED03 1F 97 14 20                          DB $1F, $97, $14, $20
  53++ED07 1F 51 08 14                          DB $1F, $51, $08, $14
  54++ED0B 1F 62 08 18                          DB $1F, $62, $08, $18
  55++ED0F 1F 73 0C 14                          DB $1F, $73, $0C, $14
  56++ED13 1F 84 10 18                          DB $1F, $84, $10, $18
  57++ED17 1F 10 04 08                          DB $1F, $10, $04, $08
  58++ED1B 1F 20 00 08                          DB $1F, $20, $00, $08
  59++ED1F 1F A9 20 28                          DB $1F, $A9, $20, $28
  60++ED23 1F B9 28 2C                          DB $1F, $B9, $28, $2C
  61++ED27 1F C9 1C 2C                          DB $1F, $C9, $1C, $2C
  62++ED2B 1F BA 04 28                          DB $1F, $BA, $04, $28
  63++ED2F 1F CB 00 2C                          DB $1F, $CB, $00, $2C
  64++ED33 1D 31 04 14                          DB $1D, $31, $04, $14
  65++ED37 1D 42 00 18                          DB $1D, $42, $00, $18
  66++ED3B 06 B0 50 54                          DB $06, $B0, $50, $54
  67++ED3F 14 99 30 34                          DB $14, $99, $30, $34
  68++ED43 14 99 48 4C                          DB $14, $99, $48, $4C
  69++ED47 14 99 38 3C                          DB $14, $99, $38, $3C
  70++ED4B 14 99 40 44                          DB $14, $99, $40, $44
  71++ED4F 13 99 3C 40                          DB $13, $99, $3C, $40
  72++ED53 11 99 38 44                          DB $11, $99, $38, $44
  73++ED57 13 99 34 48                          DB $13, $99, $34, $48
  74++ED5B 13 99 30 4C                          DB $13, $99, $30, $4C
  75++ED5F 1E 65 08 24                          DB $1E, $65, $08, $24
  76++ED63 06 99 58 60                          DB $06, $99, $58, $60
  77++ED67 06 99 5C 60                          DB $06, $99, $5C, $60
  78++ED6B 08 99 58 5C                          DB $08, $99, $58, $5C
  79++ED6F 06 99 64 68                          DB $06, $99, $64, $68
  80++ED73 06 99 68 6C                          DB $06, $99, $68, $6C
  81++ED77 08 99 64 6C                          DB $08, $99, $64, $6C
  82++ED7B              Cobra_Mk_3_PEdgesSize:  equ $ - Cobra_Mk_3_PEdges
  83++ED7B              Cobra_Mk_3_PEdgesCnt:   equ Cobra_Mk_3_PEdgesSize/4
  84++ED7B 1F 00 3E 1F  Cobra_Mk_3_PNormals:	DB $1F, $00, $3E, $1F
  85++ED7F 9F 12 37 10                          DB $9F, $12, $37, $10
  86++ED83 1F 12 37 10                          DB $1F, $12, $37, $10
  87++ED87 9F 10 34 0E                          DB $9F, $10, $34, $0E
  88++ED8B 1F 10 34 0E                          DB $1F, $10, $34, $0E
  89++ED8F 9F 0E 2F 00                          DB $9F, $0E, $2F, $00
  90++ED93 1F 0E 2F 00                          DB $1F, $0E, $2F, $00
  91++ED97 9F 3D 66 00                          DB $9F, $3D, $66, $00
  92++ED9B 1F 3D 66 00                          DB $1F, $3D, $66, $00
  93++ED9F 3F 00 00 50                          DB $3F, $00, $00, $50
  94++EDA3 DF 07 2A 09                          DB $DF, $07, $2A, $09
  95++EDA7 5F 00 1E 06                          DB $5F, $00, $1E, $06
  96++EDAB 5F 07 2A 09                          DB $5F, $07, $2A, $09
  97++EDAF              Cobra_Mk_3_PNormalsSize:equ $ - Cobra_Mk_3_PNormals
  98++EDAF              Cobra_Mk_3_PLen:        equ $ - Cobra_Mk_3_P
  99++EDAF
# file closed: ./Data/ships/Cobra_Mk_3_P.asm
 101+ EDAF                                      include "Data/ships/Constrictor.asm"
# file opened: ./Data/ships/Constrictor.asm
   1++EDAF              ;                      0    1    2    3   4   5   6   7   8   9   10  11  12  13  14  15   16                    17                  18  19     20                     21
   2++EDAF              ;					   Scp  Missile   Edg Edg Lin Gun Exp Vtx Edg Bounty  Face             Edg                   Face                           Vertices
   3++EDAF              ;                      Deb  Lock      Lo  Hi  x4  Vtx Cnt x6  X1  lo  hi  x4  Dot Erg Spd  hi                    Hi                  Q   Laser  Lo                     hi
   4++EDAF F3 49 26     Constrictor:    	    DB $F3, $49, $26
   5++EDB2 2E EE                                DW ConstrictorEdges
   6++EDB4 60                                   DB ConstrictorEdgesSize
   7++EDB5 00 2E                                DB $00,$2E
   8++EDB7 66                                   DB ConstrictorVertSize
   9++EDB8 18                                   DB ConstrictorEdgesCnt
  10++EDB9 18 00                                DB $18,$00
  11++EDBB 28                                   DB ConstrictorNormalsSize
  12++EDBC 2D C8 37                             DB $2D,$C8,$37
  13++EDBF 8E EE                                DW ConstrictorNormals
  14++EDC1 02 2F                                DB $02,$2F
  15++EDC3 C8 ED                                DW ConstrictorVertices
  16++EDC5 00 00                                DB 0,0                      ; Type and Tactics
  17++EDC7                                  ; missiles = 3
  18++EDC7 01                                   DB ShipCanAnger
  19++EDC8 14 07 50 5F  ConstrictorVertices     DB $14, $07, $50, $5F, $02, $99
  19++EDCC 02 99
  20++EDCE 14 07 50 DF                          DB $14, $07, $50, $DF, $01, $99
  20++EDD2 01 99
  21++EDD4 36 07 28 DF                          DB $36, $07, $28, $DF, $14, $99
  21++EDD8 14 99
  22++EDDA 36 07 28 FF                          DB $36, $07, $28, $FF, $45, $89
  22++EDDE 45 89
  23++EDE0 14 0D 28 BF                          DB $14, $0D, $28, $BF, $56, $88
  23++EDE4 56 88
  24++EDE6 14 0D 28 3F                          DB $14, $0D, $28, $3F, $67, $88
  24++EDEA 67 88
  25++EDEC 36 07 28 7F                          DB $36, $07, $28, $7F, $37, $89
  25++EDF0 37 89
  26++EDF2 36 07 28 5F                          DB $36, $07, $28, $5F, $23, $99
  26++EDF6 23 99
  27++EDF8 14 0D 05 1F                          DB $14, $0D, $05, $1F, $FF, $FF
  27++EDFC FF FF
  28++EDFE 14 0D 05 9F                          DB $14, $0D, $05, $9F, $FF, $FF
  28++EE02 FF FF
  29++EE04 14 07 3E 52                          DB $14, $07, $3E, $52, $99, $99
  29++EE08 99 99
  30++EE0A 14 07 3E D2                          DB $14, $07, $3E, $D2, $99, $99
  30++EE0E 99 99
  31++EE10 19 07 19 72                          DB $19, $07, $19, $72, $99, $99
  31++EE14 99 99
  32++EE16 19 07 19 F2                          DB $19, $07, $19, $F2, $99, $99
  32++EE1A 99 99
  33++EE1C 0F 07 0F 6A                          DB $0F, $07, $0F, $6A, $99, $99
  33++EE20 99 99
  34++EE22 0F 07 0F EA                          DB $0F, $07, $0F, $EA, $99, $99
  34++EE26 99 99
  35++EE28 00 07 00 40                          DB $00, $07, $00, $40, $9F, $01
  35++EE2C 9F 01
  36++EE2E              ConstrictorVertSize     equ $  - ConstrictorVertices
  37++EE2E 1F 09 00 04  ConstrictorEdges        DB $1F, $09, $00, $04, $1F, $19, $04, $08
  37++EE32 1F 19 04 08
  38++EE36 1F 01 04 24                          DB $1F, $01, $04, $24, $1F, $02, $00, $20
  38++EE3A 1F 02 00 20
  39++EE3E 1F 29 00 1C                          DB $1F, $29, $00, $1C, $1F, $23, $1C, $20
  39++EE42 1F 23 1C 20
  40++EE46 1F 14 08 24                          DB $1F, $14, $08, $24, $1F, $49, $08, $0C
  40++EE4A 1F 49 08 0C
  41++EE4E 1F 39 18 1C                          DB $1F, $39, $18, $1C, $1F, $37, $18, $20
  41++EE52 1F 37 18 20
  42++EE56 1F 67 14 20                          DB $1F, $67, $14, $20, $1F, $56, $10, $24
  42++EE5A 1F 56 10 24
  43++EE5E 1F 45 0C 24                          DB $1F, $45, $0C, $24, $1F, $58, $0C, $10
  43++EE62 1F 58 0C 10
  44++EE66 1F 68 10 14                          DB $1F, $68, $10, $14, $1F, $78, $14, $18
  44++EE6A 1F 78 14 18
  45++EE6E 1F 89 0C 18                          DB $1F, $89, $0C, $18, $1F, $06, $20, $24
  45++EE72 1F 06 20 24
  46++EE76 12 99 28 30                          DB $12, $99, $28, $30, $05, $99, $30, $38
  46++EE7A 05 99 30 38
  47++EE7E 0A 99 38 28                          DB $0A, $99, $38, $28, $0A, $99, $2C, $3C
  47++EE82 0A 99 2C 3C
  48++EE86 05 99 34 3C                          DB $05, $99, $34, $3C, $12, $99, $2C, $34
  48++EE8A 12 99 2C 34
  49++EE8E              ConstrictorEdgesSize    equ $  - ConstrictorEdges
  50++EE8E              ConstrictorEdgesCnt     equ ConstrictorEdgesSize/4
  51++EE8E 1F 00 37 0F  ConstrictorNormals      DB $1F, $00, $37, $0F, $9F, $18, $4B, $14
  51++EE92 9F 18 4B 14
  52++EE96 1F 18 4B 14                          DB $1F, $18, $4B, $14, $1F, $2C, $4B, $00
  52++EE9A 1F 2C 4B 00
  53++EE9E 9F 2C 4B 00                          DB $9F, $2C, $4B, $00, $9F, $2C, $4B, $00
  53++EEA2 9F 2C 4B 00
  54++EEA6 1F 00 35 00                          DB $1F, $00, $35, $00, $1F, $2C, $4B, $00
  54++EEAA 1F 2C 4B 00
  55++EEAE 3F 00 00 A0                          DB $3F, $00, $00, $A0, $5F, $00, $1B, $00
  55++EEB2 5F 00 1B 00
  56++EEB6              ConstrictorNormalsSize  equ $  - ConstrictorNormals
  57++EEB6              ConstrictorLen          equ $  - Constrictor
  58++EEB6
# file closed: ./Data/ships/Constrictor.asm
 102+ EEB6                                      include "Data/ships/Coriolis.asm"
# file opened: ./Data/ships/Coriolis.asm
   1++EEB6 00 64 00     Coriolis:	            DB $00, $64, $00
   2++EEB9 2F EF                                DW CoriolisEdges
   3++EEBB 70                                   DB CoriolisEdgesSize
   4++EEBC 00 36                                DB $00, $36
   5++EEBE 60                                   DB CoriolisVertSize
   6++EEBF 1C                                   DB CoriolisEdgesCnt
   7++EEC0 00 00                                DB $00, $00
   8++EEC2 38                                   DB CoriolisNormalsSize
   9++EEC3 78 F0 00                             DB $78, $F0, $00
  10++EEC6 9F EF                                DW CoriolisNormals
  11++EEC8 00 06                                DB $00, $06
  12++EECA CF EE                                DW CoriolisVertices
  13++EECC 02 00                                DB ShipTypeStation,0                        ; Type and Tactics
  14++EECE 00                                   DB 0                                        ; can't anger arbitrarily needs to see innocent bystander shot
  15++EECF A0 00 A0 1F  CoriolisVertices:	    DB $A0, $00, $A0, $1F, $10, $62
  15++EED3 10 62
  16++EED5 00 A0 A0 1F                          DB $00, $A0, $A0, $1F, $20, $83
  16++EED9 20 83
  17++EEDB A0 00 A0 9F                          DB $A0, $00, $A0, $9F, $30, $74
  17++EEDF 30 74
  18++EEE1 00 A0 A0 5F                          DB $00, $A0, $A0, $5F, $10, $54
  18++EEE5 10 54
  19++EEE7 A0 A0 00 5F                          DB $A0, $A0, $00, $5F, $51, $A6
  19++EEEB 51 A6
  20++EEED A0 A0 00 1F                          DB $A0, $A0, $00, $1F, $62, $B8
  20++EEF1 62 B8
  21++EEF3 A0 A0 00 9F                          DB $A0, $A0, $00, $9F, $73, $C8
  21++EEF7 73 C8
  22++EEF9 A0 A0 00 DF                          DB $A0, $A0, $00, $DF, $54, $97
  22++EEFD 54 97
  23++EEFF A0 00 A0 3F                          DB $A0, $00, $A0, $3F, $A6, $DB
  23++EF03 A6 DB
  24++EF05 00 A0 A0 3F                          DB $00, $A0, $A0, $3F, $B8, $DC
  24++EF09 B8 DC
  25++EF0B A0 00 A0 BF                          DB $A0, $00, $A0, $BF, $97, $DC
  25++EF0F 97 DC
  26++EF11 00 A0 A0 7F                          DB $00, $A0, $A0, $7F, $95, $DA
  26++EF15 95 DA
  27++EF17 0A 1E A0 5E                          DB $0A, $1E, $A0, $5E, $00, $00
  27++EF1B 00 00
  28++EF1D 0A 1E A0 1E                          DB $0A, $1E, $A0, $1E, $00, $00
  28++EF21 00 00
  29++EF23 0A 1E A0 9E                          DB $0A, $1E, $A0, $9E, $00, $00
  29++EF27 00 00
  30++EF29 0A 1E A0 DE                          DB $0A, $1E, $A0, $DE, $00, $00
  30++EF2D 00 00
  31++EF2F              CoriolisVertSize:       equ $ - CoriolisVertices
  32++EF2F 1F 10 00 0C  CoriolisEdges:	        DB $1F, $10, $00, $0C
  33++EF33 1F 20 00 04                          DB $1F, $20, $00, $04
  34++EF37 1F 30 04 08                          DB $1F, $30, $04, $08
  35++EF3B 1F 40 08 0C                          DB $1F, $40, $08, $0C
  36++EF3F 1F 51 0C 10                          DB $1F, $51, $0C, $10
  37++EF43 1F 61 00 10                          DB $1F, $61, $00, $10
  38++EF47 1F 62 00 14                          DB $1F, $62, $00, $14
  39++EF4B 1F 82 14 04                          DB $1F, $82, $14, $04
  40++EF4F 1F 83 04 18                          DB $1F, $83, $04, $18
  41++EF53 1F 73 08 18                          DB $1F, $73, $08, $18
  42++EF57 1F 74 08 1C                          DB $1F, $74, $08, $1C
  43++EF5B 1F 54 0C 1C                          DB $1F, $54, $0C, $1C
  44++EF5F 1F DA 20 2C                          DB $1F, $DA, $20, $2C
  45++EF63 1F DB 20 24                          DB $1F, $DB, $20, $24
  46++EF67 1F DC 24 28                          DB $1F, $DC, $24, $28
  47++EF6B 1F D9 28 2C                          DB $1F, $D9, $28, $2C
  48++EF6F 1F A5 10 2C                          DB $1F, $A5, $10, $2C
  49++EF73 1F A6 10 20                          DB $1F, $A6, $10, $20
  50++EF77 1F B6 14 20                          DB $1F, $B6, $14, $20
  51++EF7B 1F B8 14 24                          DB $1F, $B8, $14, $24
  52++EF7F 1F C8 18 24                          DB $1F, $C8, $18, $24
  53++EF83 1F C7 18 28                          DB $1F, $C7, $18, $28
  54++EF87 1F 97 1C 28                          DB $1F, $97, $1C, $28
  55++EF8B 1F 95 1C 2C                          DB $1F, $95, $1C, $2C
  56++EF8F 1E 00 30 34                          DB $1E, $00, $30, $34
  57++EF93 1E 00 34 38                          DB $1E, $00, $34, $38
  58++EF97 1E 00 38 3C                          DB $1E, $00, $38, $3C
  59++EF9B 1E 00 3C 30                          DB $1E, $00, $3C, $30
  60++EF9F              CoriolisEdgesSize:      equ $ - CoriolisEdges
  61++EF9F              CoriolisEdgesCnt:       equ CoriolisEdgesSize/4
  62++EF9F 1F 00 00 A0  CoriolisNormals:	    DB $1F, $00, $00, $A0
  63++EFA3 5F 6B 6B 6B                          DB $5F, $6B, $6B, $6B
  64++EFA7 1F 6B 6B 6B                          DB $1F, $6B, $6B, $6B
  65++EFAB 9F 6B 6B 6B                          DB $9F, $6B, $6B, $6B
  66++EFAF DF 6B 6B 6B                          DB $DF, $6B, $6B, $6B
  67++EFB3 5F 00 A0 00                          DB $5F, $00, $A0, $00
  68++EFB7 1F A0 00 00                          DB $1F, $A0, $00, $00
  69++EFBB 9F A0 00 00                          DB $9F, $A0, $00, $00
  70++EFBF 1F 00 A0 00                          DB $1F, $00, $A0, $00
  71++EFC3 FF 6B 6B 6B                          DB $FF, $6B, $6B, $6B
  72++EFC7 7F 6B 6B 6B                          DB $7F, $6B, $6B, $6B
  73++EFCB 3F 6B 6B 6B                          DB $3F, $6B, $6B, $6B
  74++EFCF BF 6B 6B 6B                          DB $BF, $6B, $6B, $6B
  75++EFD3 3F 00 00 A0                          DB $3F, $00, $00, $A0
  76++EFD7              CoriolisNormalsSize:    equ $ - CoriolisNormals
  77++EFD7              CoriolisLen:            equ $ - Coriolis
  78++EFD7
# file closed: ./Data/ships/Coriolis.asm
 103+ EFD7                                      include "Data/ships/Cougar.asm"
# file opened: ./Data/ships/Cougar.asm
   1++EFD7 03 13 24     Cougar:	                DB $03, $13, $24
   2++EFDA 62 F0                                DW CougarEdges
   3++EFDC 64                                   DB CougarEdgesSize
   4++EFDD 00 2A                                DB $00, $2A
   5++EFDF 72                                   DB CougarVertSize
   6++EFE0 19                                   DB CougarEdgesCnt
   7++EFE1 00 00                                DB $00, $00
   8++EFE3 18                                   DB CougarNormalsSize
   9++EFE4 22 FC 28                             DB $22, $FC, $28
  10++EFE7 C6 F0                                DW CougarNormals
  11++EFE9 02 34                                DB $02, $34
  12++EFEB F0 EF                                DW CougarVertices
  13++EFED 00 00                                DB 0,0                      ; Type and Tactics
  14++EFEF 01                                   DB ShipCanAnger
  15++EFF0 00 05 43 1F  CougarVertices:	        DB $00, $05, $43, $1F, $02, $44
  15++EFF4 02 44
  16++EFF6 14 00 28 9F                          DB $14, $00, $28, $9F, $01, $22
  16++EFFA 01 22
  17++EFFC 28 00 28 BF                          DB $28, $00, $28, $BF, $01, $55
  17++F000 01 55
  18++F002 00 0E 28 3E                          DB $00, $0E, $28, $3E, $04, $55
  18++F006 04 55
  19++F008 00 0E 28 7E                          DB $00, $0E, $28, $7E, $12, $35
  19++F00C 12 35
  20++F00E 14 00 28 1F                          DB $14, $00, $28, $1F, $23, $44
  20++F012 23 44
  21++F014 28 00 28 3F                          DB $28, $00, $28, $3F, $34, $55
  21++F018 34 55
  22++F01A 24 00 38 9F                          DB $24, $00, $38, $9F, $01, $11
  22++F01E 01 11
  23++F020 3C 00 14 BF                          DB $3C, $00, $14, $BF, $01, $11
  23++F024 01 11
  24++F026 24 00 38 1F                          DB $24, $00, $38, $1F, $34, $44
  24++F02A 34 44
  25++F02C 3C 00 14 3F                          DB $3C, $00, $14, $3F, $34, $44
  25++F030 34 44
  26++F032 00 07 23 12                          DB $00, $07, $23, $12, $00, $44
  26++F036 00 44
  27++F038 00 08 19 14                          DB $00, $08, $19, $14, $00, $44
  27++F03C 00 44
  28++F03E 0C 02 2D 94                          DB $0C, $02, $2D, $94, $00, $00
  28++F042 00 00
  29++F044 0C 02 2D 14                          DB $0C, $02, $2D, $14, $44, $44
  29++F048 44 44
  30++F04A 0A 06 28 B4                          DB $0A, $06, $28, $B4, $55, $55
  30++F04E 55 55
  31++F050 0A 06 28 F4                          DB $0A, $06, $28, $F4, $55, $55
  31++F054 55 55
  32++F056 0A 06 28 74                          DB $0A, $06, $28, $74, $55, $55
  32++F05A 55 55
  33++F05C 0A 06 28 34                          DB $0A, $06, $28, $34, $55, $55
  33++F060 55 55
  34++F062              CougarVertSize:         equ $ - CougarVertices
  35++F062 1F 02 00 04  CougarEdges:	        DB $1F, $02, $00, $04
  36++F066 1F 01 04 1C                          DB $1F, $01, $04, $1C
  37++F06A 1F 01 1C 20                          DB $1F, $01, $1C, $20
  38++F06E 1F 01 20 08                          DB $1F, $01, $20, $08
  39++F072 1E 05 08 0C                          DB $1E, $05, $08, $0C
  40++F076 1E 45 0C 18                          DB $1E, $45, $0C, $18
  41++F07A 1E 15 08 10                          DB $1E, $15, $08, $10
  42++F07E 1E 35 10 18                          DB $1E, $35, $10, $18
  43++F082 1F 34 18 28                          DB $1F, $34, $18, $28
  44++F086 1F 34 28 24                          DB $1F, $34, $28, $24
  45++F08A 1F 34 24 14                          DB $1F, $34, $24, $14
  46++F08E 1F 24 14 00                          DB $1F, $24, $14, $00
  47++F092 1B 04 00 0C                          DB $1B, $04, $00, $0C
  48++F096 1B 12 04 10                          DB $1B, $12, $04, $10
  49++F09A 1B 23 14 10                          DB $1B, $23, $14, $10
  50++F09E 1A 01 04 08                          DB $1A, $01, $04, $08
  51++F0A2 1A 34 14 18                          DB $1A, $34, $14, $18
  52++F0A6 14 00 30 34                          DB $14, $00, $30, $34
  53++F0AA 12 00 34 2C                          DB $12, $00, $34, $2C
  54++F0AE 12 44 2C 38                          DB $12, $44, $2C, $38
  55++F0B2 14 44 38 30                          DB $14, $44, $38, $30
  56++F0B6 12 55 3C 40                          DB $12, $55, $3C, $40
  57++F0BA 14 55 40 48                          DB $14, $55, $40, $48
  58++F0BE 12 55 48 44                          DB $12, $55, $48, $44
  59++F0C2 14 55 44 3C                          DB $14, $55, $44, $3C
  60++F0C6              CougarEdgesSize:        equ $ - CougarEdges
  61++F0C6              CougarEdgesCnt:         equ CougarEdgesSize/4
  62++F0C6 9F 10 2E 04  CougarNormals:	        DB $9F, $10, $2E, $04
  63++F0CA DF 10 2E 04                          DB $DF, $10, $2E, $04
  64++F0CE 5F 00 1B 05                          DB $5F, $00, $1B, $05
  65++F0D2 5F 10 2E 04                          DB $5F, $10, $2E, $04
  66++F0D6 1F 10 2E 04                          DB $1F, $10, $2E, $04
  67++F0DA 3E 00 00 A0                          DB $3E, $00, $00, $A0
  68++F0DE              CougarNormalsSize:      equ $ - CougarNormals
  69++F0DE              CougarLen:              equ $ - Cougar
  70++F0DE
# file closed: ./Data/ships/Cougar.asm
 104+ F0DE                                      include "Data/ships/Dodo.asm"
# file opened: ./Data/ships/Dodo.asm
   1++F0DE 00 7E 90     Dodo:	                DB $00, $7E, $90
   2++F0E1 87 F1                                DW DodoEdges
   3++F0E3 88                                   DB DodoEdgesSize
   4++F0E4 00 36                                DB $00, $36
   5++F0E6 90                                   DB DodoVertSize
   6++F0E7 22                                   DB DodoEdgesCnt
   7++F0E8 00 00                                DB $00, $00
   8++F0EA 30                                   DB DodoNormalsSize
   9++F0EB 7D F0 00                             DB $7D, $F0, $00
  10++F0EE 0F F2                                DW DodoNormals
  11++F0F0 00 00                                DB $00, $00
  12++F0F2 F7 F0                                DW DodoVertices
  13++F0F4 02 00                                DB ShipTypeStation,0                      ; Type and Tactics
  14++F0F6 00                                   DB 0
  15++F0F7 00 96 C4 1F  DodoVertices:	        DB $00, $96, $C4, $1F, $01, $55
  15++F0FB 01 55
  16++F0FD 8F 2E C4 1F                          DB $8F, $2E, $C4, $1F, $01, $22
  16++F101 01 22
  17++F103 58 79 C4 5F                          DB $58, $79, $C4, $5F, $02, $33
  17++F107 02 33
  18++F109 58 79 C4 DF                          DB $58, $79, $C4, $DF, $03, $44
  18++F10D 03 44
  19++F10F 8F 2E C4 9F                          DB $8F, $2E, $C4, $9F, $04, $55
  19++F113 04 55
  20++F115 00 F3 2E 1F                          DB $00, $F3, $2E, $1F, $15, $66
  20++F119 15 66
  21++F11B E7 4B 2E 1F                          DB $E7, $4B, $2E, $1F, $12, $77
  21++F11F 12 77
  22++F121 8F C4 2E 5F                          DB $8F, $C4, $2E, $5F, $23, $88
  22++F125 23 88
  23++F127 8F C4 2E DF                          DB $8F, $C4, $2E, $DF, $34, $99
  23++F12B 34 99
  24++F12D E7 4B 2E 9F                          DB $E7, $4B, $2E, $9F, $45, $AA
  24++F131 45 AA
  25++F133 8F C4 2E 3F                          DB $8F, $C4, $2E, $3F, $16, $77
  25++F137 16 77
  26++F139 E7 4B 2E 7F                          DB $E7, $4B, $2E, $7F, $27, $88
  26++F13D 27 88
  27++F13F 00 F3 2E 7F                          DB $00, $F3, $2E, $7F, $38, $99
  27++F143 38 99
  28++F145 E7 4B 2E FF                          DB $E7, $4B, $2E, $FF, $49, $AA
  28++F149 49 AA
  29++F14B 8F C4 2E BF                          DB $8F, $C4, $2E, $BF, $56, $AA
  29++F14F 56 AA
  30++F151 58 79 C4 3F                          DB $58, $79, $C4, $3F, $67, $BB
  30++F155 67 BB
  31++F157 8F 2E C4 7F                          DB $8F, $2E, $C4, $7F, $78, $BB
  31++F15B 78 BB
  32++F15D 00 96 C4 7F                          DB $00, $96, $C4, $7F, $89, $BB
  32++F161 89 BB
  33++F163 8F 2E C4 FF                          DB $8F, $2E, $C4, $FF, $9A, $BB
  33++F167 9A BB
  34++F169 58 79 C4 BF                          DB $58, $79, $C4, $BF, $6A, $BB
  34++F16D 6A BB
  35++F16F 10 20 C4 9E                          DB $10, $20, $C4, $9E, $00, $00
  35++F173 00 00
  36++F175 10 20 C4 DE                          DB $10, $20, $C4, $DE, $00, $00
  36++F179 00 00
  37++F17B 10 20 C4 17                          DB $10, $20, $C4, $17, $00, $00
  37++F17F 00 00
  38++F181 10 20 C4 57                          DB $10, $20, $C4, $57, $00, $00
  38++F185 00 00
  39++F187              DodoVertSize:           equ $ - DodoVertices
  40++F187 1F 01 00 04  DodoEdges:	            DB $1F, $01, $00, $04
  41++F18B 1F 02 04 08                          DB $1F, $02, $04, $08
  42++F18F 1F 03 08 0C                          DB $1F, $03, $08, $0C
  43++F193 1F 04 0C 10                          DB $1F, $04, $0C, $10
  44++F197 1F 05 10 00                          DB $1F, $05, $10, $00
  45++F19B 1F 16 14 28                          DB $1F, $16, $14, $28
  46++F19F 1F 17 28 18                          DB $1F, $17, $28, $18
  47++F1A3 1F 27 18 2C                          DB $1F, $27, $18, $2C
  48++F1A7 1F 28 2C 1C                          DB $1F, $28, $2C, $1C
  49++F1AB 1F 38 1C 30                          DB $1F, $38, $1C, $30
  50++F1AF 1F 39 30 20                          DB $1F, $39, $30, $20
  51++F1B3 1F 49 20 34                          DB $1F, $49, $20, $34
  52++F1B7 1F 4A 34 24                          DB $1F, $4A, $34, $24
  53++F1BB 1F 5A 24 38                          DB $1F, $5A, $24, $38
  54++F1BF 1F 56 38 14                          DB $1F, $56, $38, $14
  55++F1C3 1F 7B 3C 40                          DB $1F, $7B, $3C, $40
  56++F1C7 1F 8B 40 44                          DB $1F, $8B, $40, $44
  57++F1CB 1F 9B 44 48                          DB $1F, $9B, $44, $48
  58++F1CF 1F AB 48 4C                          DB $1F, $AB, $48, $4C
  59++F1D3 1F 6B 4C 3C                          DB $1F, $6B, $4C, $3C
  60++F1D7 1F 15 00 14                          DB $1F, $15, $00, $14
  61++F1DB 1F 12 04 18                          DB $1F, $12, $04, $18
  62++F1DF 1F 23 08 1C                          DB $1F, $23, $08, $1C
  63++F1E3 1F 34 0C 20                          DB $1F, $34, $0C, $20
  64++F1E7 1F 45 10 24                          DB $1F, $45, $10, $24
  65++F1EB 1F 67 28 3C                          DB $1F, $67, $28, $3C
  66++F1EF 1F 78 2C 40                          DB $1F, $78, $2C, $40
  67++F1F3 1F 89 30 44                          DB $1F, $89, $30, $44
  68++F1F7 1F 9A 34 48                          DB $1F, $9A, $34, $48
  69++F1FB 1F 6A 38 4C                          DB $1F, $6A, $38, $4C
  70++F1FF 1E 00 50 54                          DB $1E, $00, $50, $54
  71++F203 14 00 54 5C                          DB $14, $00, $54, $5C
  72++F207 17 00 5C 58                          DB $17, $00, $5C, $58
  73++F20B 14 00 58 50                          DB $14, $00, $58, $50
  74++F20F              DodoEdgesSize:          equ $ - DodoEdges
  75++F20F              DodoEdgesCnt:           equ DodoEdgesSize/4
  76++F20F 1F 00 00 C4  DodoNormals:	        DB $1F, $00, $00, $C4
  77++F213 1F 67 8E 58                          DB $1F, $67, $8E, $58
  78++F217 5F A9 37 59                          DB $5F, $A9, $37, $59
  79++F21B 5F 00 B0 58                          DB $5F, $00, $B0, $58
  80++F21F DF A9 37 59                          DB $DF, $A9, $37, $59
  81++F223 9F 67 8E 58                          DB $9F, $67, $8E, $58
  82++F227 3F 00 B0 58                          DB $3F, $00, $B0, $58
  83++F22B 3F A9 37 59                          DB $3F, $A9, $37, $59
  84++F22F 7F 67 8E 58                          DB $7F, $67, $8E, $58
  85++F233 FF 67 8E 58                          DB $FF, $67, $8E, $58
  86++F237 BF A9 37 59                          DB $BF, $A9, $37, $59
  87++F23B 3F 00 00 C4                          DB $3F, $00, $00, $C4
  88++F23F              DodoNormalsSize:        equ $ - DodoNormals
  89++F23F              DodoLen:                equ $ - Dodo
  90++F23F
# file closed: ./Data/ships/Dodo.asm
# file closed: ./Data/ShipModelMetaData1.asm
1340  F23F              ; Bank 67  ------------------------------------------------------------------------------------------------------------------------
1341  F23F                  SLOT    ShipModelsAddr
1342  F23F                  PAGE    BankShipModels2
1343  F23F              	ORG     ShipModelsAddr, BankShipModels2
1344  E000
1345  E000                  INCLUDE "./Data/ShipBank2Label.asm"
# file opened: ./Data/ShipBank2Label.asm
   1+ E000 53 68 69 70  ShipBank2Label:         DB  "ShipBank2      "
   1+ E004 42 61 6E 6B
   1+ E008 32 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank2Label.asm
1346  E00F              GetShipBank2Id:         MGetShipBankId ShipBankTable2
1346  E00F 06 00       >                        ld      b,0
1346  E011 4F          >                        ld      c,a                                 ; c= original ship id
1346  E012 CB 3F       >.ShiftLoop:             srl     a
1346  E014 CB 3F       >                        srl     a
1346  E016 CB 3F       >                        srl     a
1346  E018 CB 3F       >                        srl     a                                   ; divide by 16
1346  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1346  E01B 79          >                        ld      a,c
1346  E01C 50          >                        ld      d,b
1346  E01D 1E 10       >                        ld      e,16
1346  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1346  E021 93          >                        sub     e                                   ; a= actual model id now
1346  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1346  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1346  E024 7A          >                        ld      a,d                                 ; a = bank number
1346  E025             >;.. Now b = bank and a = adjusted ship nbr
1346  E025 21 62 E0    >                        ld      hl,ShipBankTable2                        ; a= bank index
1346  E028 ED 31       >                        add     hl,a
1346  E02A ED 31       >                        add     hl,a
1346  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1346  E02D             >                        ClearCarryFlag
1346  E02D B7          >                        or a
1346  E02E C9          >                        ret
1347  E02F              CopyVertsToUniv2:       McopyVertsToUniverse
1347  E02F 2A 20 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1347  E032 11 25 C3    >                        ld          de,UBnkHullVerticies
1347  E035 06 00       >                        ld          b,0
1347  E037 3A 14 C3    >                        ld			a,(VertexCtX6Addr)
1347  E03A 4F          >                        ld          c,a
1347  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1347  E03C CD 66 96    >                        call        memcopy_dma
1347  E03F C9          >                        ret
1348  E040              CopyEdgesToUniv2:       McopyEdgesToUniverse
1348  E040 2A 0F C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1348  E043 11 51 C4    >                        ld          de,UBnkHullEdges
1348  E046 06 00       >                        ld          b,0
1348  E048 3A 11 C3    >                        ld			a,(LineX4Addr)
1348  E04B 4F          >                        ld          c,a
1348  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1348  E04D CD 66 96    >                        call        memcopy_dma
1348  E050 C9          >                        ret
1349  E051              CopyNormsToUniv2:       McopyNormsToUniverse
1349  E051 2A 1C C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1349  E054 11 01 C9    >                        ld          de,UBnkHullNormals
1349  E057 06 00       >                        ld          b,0
1349  E059 3A 18 C3    >                        ld          a,(FaceCtX4Addr)
1349  E05C 4F          >                        ld          c,a
1349  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1349  E05E CD 66 96    >                        call        memcopy_dma
1349  E061 C9          >                        ret
1350  E062              ShipBankTable2:         MShipBankTable
1350  E062 3B 00       >                        DW      BankShipModels1
1350  E064 43 00       >                        DW      BankShipModels2
1350  E066 44 00       >                        DW      BankShipModels3
1350  E068 45 00       >                        DW      BankShipModels4
1351  E06A              CopyShipToUniverse2     MCopyShipToUniverse     BankShipModels2
1351  E06A 21 2D C0    >                        ld          hl,UBnkShipModelBank
1351  E06D 36 43       >                        ld          (hl),BankShipModels2
1351  E06F 32 2E C0    >                        ld          (UBnkShipModelNbr),a
1351  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1351  E075 ED 31       >                        add         hl,a
1351  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1351  E079 4E          >                        ld          c,(hl)
1351  E07A 23          >                        inc         hl
1351  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1351  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1351  E07F ED 31       >                        add         hl,a
1351  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1351  E083 7E          >                        ld          a,(hl)
1351  E084 23          >                        inc         hl
1351  E085 66          >                        ld          h,(hl)
1351  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1351  E087 11 0C C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1351  E08A 01 19 00    >                        ld          bc,ShipDataLength
1351  E08D ED B0       >                        ldir
1351  E08F CD 2F E0    >                        call        CopyVertsToUniv
1351  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1351  E095 CD 51 E0    >                        call        CopyNormsToUniv
1351  E098 C9          >                        ret
1352  E099              CopyBodyToUniverse2:    MCopyBodyToUniverse     CopyShipToUniverse2
1352  E099 3E 0D       >                        ld          a,13
1352  E09B CD 6A E0    >                        call        CopyShipToUniverse2
1352  E09E C9          >                        ret
1353  E09F
1354  E09F                  INCLUDE "./Data/ShipModelMetaData2.asm"
# file opened: ./Data/ShipModelMetaData2.asm
   1+ E09F 3F E1        ShipModelTable2:         DW Dragon                                  ;16  $10
   2+ E0A1 1A E2                                 DW Escape_Pod                              ;17  $11
   3+ E0A3 73 E2                                 DW Fer_De_Lance                            ;18  $12
   4+ E0A5 92 E3                                 DW Gecko                                   ;19  $13
   5+ E0A7 5B E4                                 DW Ghavial                                 ;20  $14
   6+ E0A9 44 E5                                 DW Iguana                                  ;21  $15
   7+ E0AB 3B E6                                 DW Krait                                   ;22  $16
   8+ E0AD 26 E7                                 DW Logo                                    ;23  $17
   9+ E0AF E3 E8                                 DW Mamba                                   ;24  $18
  10+ E0B1 16 EA                                 DW Missile                                 ;25  $19
  11+ E0B3 19 EB                                 DW Monitor                                 ;26  $1A
  12+ E0B5 20 EC                                 DW Moray                                   ;27  $1B
  13+ E0B7 FD EC                                 DW Ophidian                                ;28  $1C
  14+ E0B9 36 EE                                 DW Plate                                   ;29  $1D
  15+ E0BB 75 EE                                 DW Python                                  ;30  $1E
  16+ E0BD 6C EF                                 DW Python_P                                ;31  $1F
  17+ E0BF 58 E1        ShipVertexTable2:        DW DragonVertices                          ;16  $10
  18+ E0C1 33 E2                                 DW Escape_PodVertices                      ;17  $11
  19+ E0C3 8C E2                                 DW Fer_De_LanceVertices                    ;18  $12
  20+ E0C5 AB E3                                 DW GeckoVertices                           ;19  $13
  21+ E0C7 74 E4                                 DW GhavialVertices                         ;20  $14
  22+ E0C9 5D E5                                 DW IguanaVertices                          ;21  $15
  23+ E0CB 54 E6                                 DW KraitVertices                           ;22  $16
  24+ E0CD 3F E7                                 DW LogoVertices                            ;23  $17
  25+ E0CF FC E8                                 DW MambaVertices                           ;24  $18
  26+ E0D1 2F EA                                 DW MissileVertices                         ;25  $19
  27+ E0D3 32 EB                                 DW MonitorVertices                         ;26  $1A
  28+ E0D5 39 EC                                 DW MorayVertices                           ;27  $1B
  29+ E0D7 16 ED                                 DW OphidianVertices                        ;28  $1C
  30+ E0D9 4F EE                                 DW PlateVertices                           ;29  $1D
  31+ E0DB 8E EE                                 DW PythonVertices                          ;30  $1E
  32+ E0DD 85 EF                                 DW Python_PVertices                        ;31  $1F
  33+ E0DF 8E E1        ShipEdgeTable2:          DW DragonEdges                             ;16  $10
  34+ E0E1 4B E2                                 DW Escape_PodEdges                         ;17  $11
  35+ E0E3 FE E2                                 DW Fer_De_LanceEdges                       ;18  $12
  36+ E0E5 F3 E3                                 DW GeckoEdges                              ;19  $13
  37+ E0E7 BC E4                                 DW GhavialEdges                            ;20  $14
  38+ E0E9 B7 E5                                 DW IguanaEdges                             ;21  $15
  39+ E0EB BA E6                                 DW KraitEdges                              ;22  $16
  40+ E0ED 3B E8                                 DW LogoEdges                               ;23  $17
  41+ E0EF 92 E9                                 DW MambaEdges                              ;24  $18
  42+ E0F1 95 EA                                 DW MissileEdges                            ;25  $19
  43+ E0F3 98 EB                                 DW MonitorEdges                            ;26  $1A
  44+ E0F5 8D EC                                 DW MorayEdges                              ;27  $1B
  45+ E0F7 8E ED                                 DW OphidianEdges                           ;28  $1C
  46+ E0F9 61 EE                                 DW PlateEdges                              ;29  $1D
  47+ E0FB D0 EE                                 DW PythonEdges                             ;30  $1E
  48+ E0FD C7 EF                                 DW Python_PEdges                           ;31  $1F
  49+ E0FF E2 E1        ShipNormalTable2:        DW DragonNormals                           ;16  $10
  50+ E101 63 E2                                 DW Escape_PodNormals                       ;17  $11
  51+ E103 6A E3                                 DW Fer_De_LanceNormals                     ;18  $12
  52+ E105 37 E4                                 DW GeckoNormals                            ;19  $13
  53+ E107 14 E5                                 DW GhavialNormals                          ;20  $14
  54+ E109 13 E6                                 DW IguanaNormals                           ;21  $15
  55+ E10B 0E E7                                 DW KraitNormals                            ;22  $16
  56+ E10D CF E8                                 DW LogoNormals                             ;23  $17
  57+ E10F 02 EA                                 DW MambaNormals                            ;24  $18
  58+ E111 F5 EA                                 DW MissileNormals                          ;25  $19
  59+ E113 F4 EB                                 DW MonitorNormals                          ;26  $1A
  60+ E115 D9 EC                                 DW MorayNormals                            ;27  $1B
  61+ E117 06 EE                                 DW OphidianNormals                         ;28  $1C
  62+ E119 71 EE                                 DW PlateNormals                            ;29  $1D
  63+ E11B 38 EF                                 DW PythonNormals                           ;30  $1E
  64+ E11D 2F F0                                 DW Python_PNormals                         ;31  $1F
  65+ E11F DB 00        ShipModelSizeTable2:     DW DragonLen                               ;16  $10
  66+ E121 59 00                                 DW Escape_PodLen                           ;17  $11
  67+ E123 1F 01                                 DW Fer_De_LanceLen                         ;18  $12
  68+ E125 C9 00                                 DW GeckoLen                                ;19  $13
  69+ E127 E9 00                                 DW GhavialLen                              ;20  $14
  70+ E129 F7 00                                 DW IguanaLen                               ;21  $15
  71+ E12B EB 00                                 DW KraitLen                                ;22  $16
  72+ E12D BD 01                                 DW LogoLen                                 ;23  $17
  73+ E12F 33 01                                 DW MambaLen                                ;24  $18
  74+ E131 03 01                                 DW MissileLen                              ;25  $19
  75+ E133 07 01                                 DW MonitorLen                              ;26  $1A
  76+ E135 DD 00                                 DW MorayLen                                ;27  $1B
  77+ E137 39 01                                 DW OphidianLen                             ;28  $1C
  78+ E139 3F 00                                 DW PlateLen                                ;29  $1D
  79+ E13B F7 00                                 DW PythonLen                               ;30  $1E
  80+ E13D F7 00                                 DW Python_PLen                             ;31  $1F
  81+ E13F
  82+ E13F                                      include "Data/ships/Dragon.asm"
# file opened: ./Data/ships/Dragon.asm
   1++E13F 00 66 50     Dragon:	                DB $00, $66, $50
   2++E142 8E E1                                DW DragonEdges
   3++E144 54                                   DB DragonEdgesSize
   4++E145 00 3C                                DB $00, $3C
   5++E147 36                                   DB DragonVertSize
   6++E148 15                                   DB DragonEdgesCnt
   7++E149 00 00                                DB $00, $00
   8++E14B 38                                   DB DragonNormalsSize
   9++E14C 20 F7 14                             DB $20, $F7, $14
  10++E14F E2 E1                                DW DragonNormals
  11++E151 00 47                                DB $00, $47
  12++E153 58 E1                                DW DragonVertices
  13++E155 00 00                                DB 0,0                      ; Type and Tactics
  14++E157 01                                   DB ShipCanAnger
  15++E158 00 00 FA 1F  DragonVertices:	        DB $00, $00, $FA, $1F, $6B, $05
  15++E15C 6B 05
  16++E15E D8 00 7C 1F                          DB $D8, $00, $7C, $1F, $67, $01
  16++E162 67 01
  17++E164 D8 00 7C 3F                          DB $D8, $00, $7C, $3F, $78, $12
  17++E168 78 12
  18++E16A 00 28 FA 3F                          DB $00, $28, $FA, $3F, $CD, $23
  18++E16E CD 23
  19++E170 00 28 FA 7F                          DB $00, $28, $FA, $7F, $CD, $89
  19++E174 CD 89
  20++E176 D8 00 7C BF                          DB $D8, $00, $7C, $BF, $9A, $34
  20++E17A 9A 34
  21++E17C D8 00 7C 9F                          DB $D8, $00, $7C, $9F, $AB, $45
  21++E180 AB 45
  22++E182 00 50 00 1F                          DB $00, $50, $00, $1F, $FF, $FF
  22++E186 FF FF
  23++E188 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  23++E18C FF FF
  24++E18E              DragonVertSize:         equ $ - DragonVertices
  25++E18E 1F 01 04 1C  DragonEdges:	        DB $1F, $01, $04, $1C
  26++E192 1F 12 08 1C                          DB $1F, $12, $08, $1C
  27++E196 1F 23 0C 1C                          DB $1F, $23, $0C, $1C
  28++E19A 1F 34 14 1C                          DB $1F, $34, $14, $1C
  29++E19E 1F 45 18 1C                          DB $1F, $45, $18, $1C
  30++E1A2 1F 50 00 1C                          DB $1F, $50, $00, $1C
  31++E1A6 1F 67 04 20                          DB $1F, $67, $04, $20
  32++E1AA 1F 78 08 20                          DB $1F, $78, $08, $20
  33++E1AE 1F 89 10 20                          DB $1F, $89, $10, $20
  34++E1B2 1F 9A 14 20                          DB $1F, $9A, $14, $20
  35++E1B6 1F AB 18 20                          DB $1F, $AB, $18, $20
  36++E1BA 1F B6 00 20                          DB $1F, $B6, $00, $20
  37++E1BE 1F 06 00 04                          DB $1F, $06, $00, $04
  38++E1C2 1F 17 04 08                          DB $1F, $17, $04, $08
  39++E1C6 1F 4A 14 18                          DB $1F, $4A, $14, $18
  40++E1CA 1F 5B 00 18                          DB $1F, $5B, $00, $18
  41++E1CE 1F 2C 08 0C                          DB $1F, $2C, $08, $0C
  42++E1D2 1F 8C 08 10                          DB $1F, $8C, $08, $10
  43++E1D6 1F 3D 0C 14                          DB $1F, $3D, $0C, $14
  44++E1DA 1F 9D 10 14                          DB $1F, $9D, $10, $14
  45++E1DE 1F CD 0C 10                          DB $1F, $CD, $0C, $10
  46++E1E2              DragonEdgesSize:        equ $ - DragonEdges
  47++E1E2              DragonEdgesCnt:         equ DragonEdgesSize/4
  48++E1E2 1F 10 5A 1C  DragonNormals:	        DB $1F, $10, $5A, $1C
  49++E1E6 1F 21 5A 00                          DB $1F, $21, $5A, $00
  50++E1EA 3F 19 5B 0E                          DB $3F, $19, $5B, $0E
  51++E1EE BF 19 5B 0E                          DB $BF, $19, $5B, $0E
  52++E1F2 9F 21 5A 00                          DB $9F, $21, $5A, $00
  53++E1F6 9F 10 5A 1C                          DB $9F, $10, $5A, $1C
  54++E1FA 5F 10 5A 1C                          DB $5F, $10, $5A, $1C
  55++E1FE 5F 21 5A 00                          DB $5F, $21, $5A, $00
  56++E202 7F 19 5B 0E                          DB $7F, $19, $5B, $0E
  57++E206 FF 19 5B 0E                          DB $FF, $19, $5B, $0E
  58++E20A DF 21 5A 00                          DB $DF, $21, $5A, $00
  59++E20E DF 10 5A 1C                          DB $DF, $10, $5A, $1C
  60++E212 3F 30 00 52                          DB $3F, $30, $00, $52
  61++E216 BF 30 00 52                          DB $BF, $30, $00, $52
  62++E21A              DragonNormalsSize:      equ $ - DragonNormals
  63++E21A              DragonLen:              equ $ - Dragon
  64++E21A
# file closed: ./Data/ships/Dragon.asm
  83+ E21A                                      include "Data/ships/Escape_Pod.asm"
# file opened: ./Data/ships/Escape_Pod.asm
   1++E21A 20 01 00     Escape_Pod:             DB $20, $01, $00
   2++E21D 4B E2                                DW Escape_PodEdges
   3++E21F 18                                   DB Escape_PodEdgesSize
   4++E220 00 16                                DB $00, $16
   5++E222 18                                   DB Escape_PodVertSize
   6++E223 06                                   DB Escape_PodEdgesCnt
   7++E224 00 00                                DB $00, $00
   8++E226 10                                   DB Escape_PodNormalsSize
   9++E227 08 11 08                             DB $08, $11, $08
  10++E22A 63 E2                                DW Escape_PodNormals
  11++E22C 04 00                                DB $04, $00
  12++E22E 33 E2                                DW Escape_PodVertices
  13++E230 00 00                                DB 0,0                      ; Type and Tactics
  14++E232 00                                   DB 0
  15++E233 07 00 24 9F  Escape_PodVertices:	    DB $07, $00, $24, $9F, $12, $33
  15++E237 12 33
  16++E239 07 0E 0C FF                          DB $07, $0E, $0C, $FF, $02, $33
  16++E23D 02 33
  17++E23F 07 0E 0C BF                          DB $07, $0E, $0C, $BF, $01, $33
  17++E243 01 33
  18++E245 15 00 00 1F                          DB $15, $00, $00, $1F, $01, $22
  18++E249 01 22
  19++E24B              Escape_PodVertSize:     equ $ - Escape_PodVertices
  20++E24B 1F 23 00 04  Escape_PodEdges:	    DB $1F, $23, $00, $04
  21++E24F 1F 03 04 08                          DB $1F, $03, $04, $08
  22++E253 1F 01 08 0C                          DB $1F, $01, $08, $0C
  23++E257 1F 12 0C 00                          DB $1F, $12, $0C, $00
  24++E25B 1F 13 00 08                          DB $1F, $13, $00, $08
  25++E25F 1F 02 0C 04                          DB $1F, $02, $0C, $04
  26++E263              Escape_PodEdgesSize:    equ $ - Escape_PodEdges
  27++E263              Escape_PodEdgesCnt:     equ Escape_PodEdgesSize/4
  28++E263 3F 34 00 7A  Escape_PodNormals:	    DB $3F, $34, $00, $7A
  29++E267 1F 27 67 1E                          DB $1F, $27, $67, $1E
  30++E26B 5F 27 67 1E                          DB $5F, $27, $67, $1E
  31++E26F 9F 70 00 00                          DB $9F, $70, $00, $00
  32++E273              Escape_PodNormalsSize:  equ $ - Escape_PodNormals
  33++E273              Escape_PodLen:          equ $ - Escape_Pod
  34++E273
# file closed: ./Data/ships/Escape_Pod.asm
  84+ E273                                      include "Data/ships/Fer_De_Lance.asm"
# file opened: ./Data/ships/Fer_De_Lance.asm
   1++E273 00 06 40     Fer_De_Lance:	        DB $00, $06, $40
   2++E276 FE E2                                DW Fer_De_LanceEdges
   3++E278 6C                                   DB Fer_De_LanceEdgesSize
   4++E279 00 1A                                DB $00, $1A
   5++E27B 72                                   DB Fer_De_LanceVertSize
   6++E27C 1B                                   DB Fer_De_LanceEdgesCnt
   7++E27D 00 00                                DB $00, $00
   8++E27F 28                                   DB Fer_De_LanceNormalsSize
   9++E280 28 A0 1E                             DB $28, $A0, $1E
  10++E283 6A E3                                DW Fer_De_LanceNormals
  11++E285 01 12                                DB $01, $12
  12++E287 8C E2                                DW Fer_De_LanceVertices
  13++E289 00 00                                DB 0,0                      ; Type and Tactics
  14++E28B 01                                   DB ShipCanAnger
  15++E28C 00 0E 6C 5F  Fer_De_LanceVertices:	DB $00, $0E, $6C, $5F, $01, $59
  15++E290 01 59
  16++E292 28 0E 04 FF                          DB $28, $0E, $04, $FF, $12, $99
  16++E296 12 99
  17++E298 0C 0E 34 FF                          DB $0C, $0E, $34, $FF, $23, $99
  17++E29C 23 99
  18++E29E 0C 0E 34 7F                          DB $0C, $0E, $34, $7F, $34, $99
  18++E2A2 34 99
  19++E2A4 28 0E 04 7F                          DB $28, $0E, $04, $7F, $45, $99
  19++E2A8 45 99
  20++E2AA 28 0E 04 BC                          DB $28, $0E, $04, $BC, $01, $26
  20++E2AE 01 26
  21++E2B0 0C 02 34 BC                          DB $0C, $02, $34, $BC, $23, $67
  21++E2B4 23 67
  22++E2B6 0C 02 34 3C                          DB $0C, $02, $34, $3C, $34, $78
  22++E2BA 34 78
  23++E2BC 28 0E 04 3C                          DB $28, $0E, $04, $3C, $04, $58
  23++E2C0 04 58
  24++E2C2 00 12 14 2F                          DB $00, $12, $14, $2F, $06, $78
  24++E2C6 06 78
  25++E2C8 03 0B 61 CB                          DB $03, $0B, $61, $CB, $00, $00
  25++E2CC 00 00
  26++E2CE 1A 08 12 89                          DB $1A, $08, $12, $89, $00, $00
  26++E2D2 00 00
  27++E2D4 10 0E 04 AB                          DB $10, $0E, $04, $AB, $00, $00
  27++E2D8 00 00
  28++E2DA 03 0B 61 4B                          DB $03, $0B, $61, $4B, $00, $00
  28++E2DE 00 00
  29++E2E0 1A 08 12 09                          DB $1A, $08, $12, $09, $00, $00
  29++E2E4 00 00
  30++E2E6 10 0E 04 2B                          DB $10, $0E, $04, $2B, $00, $00
  30++E2EA 00 00
  31++E2EC 00 0E 14 6C                          DB $00, $0E, $14, $6C, $99, $99
  31++E2F0 99 99
  32++E2F2 0E 0E 2C CC                          DB $0E, $0E, $2C, $CC, $99, $99
  32++E2F6 99 99
  33++E2F8 0E 0E 2C 4C                          DB $0E, $0E, $2C, $4C, $99, $99
  33++E2FC 99 99
  34++E2FE              Fer_De_LanceVertSize:   equ $ - Fer_De_LanceVertices
  35++E2FE 1F 19 00 04  Fer_De_LanceEdges:	    DB $1F, $19, $00, $04
  36++E302 1F 29 04 08                          DB $1F, $29, $04, $08
  37++E306 1F 39 08 0C                          DB $1F, $39, $08, $0C
  38++E30A 1F 49 0C 10                          DB $1F, $49, $0C, $10
  39++E30E 1F 59 00 10                          DB $1F, $59, $00, $10
  40++E312 1C 01 00 14                          DB $1C, $01, $00, $14
  41++E316 1C 26 14 18                          DB $1C, $26, $14, $18
  42++E31A 1C 37 18 1C                          DB $1C, $37, $18, $1C
  43++E31E 1C 48 1C 20                          DB $1C, $48, $1C, $20
  44++E322 1C 05 00 20                          DB $1C, $05, $00, $20
  45++E326 0F 06 14 24                          DB $0F, $06, $14, $24
  46++E32A 0B 67 18 24                          DB $0B, $67, $18, $24
  47++E32E 0B 78 1C 24                          DB $0B, $78, $1C, $24
  48++E332 0F 08 20 24                          DB $0F, $08, $20, $24
  49++E336 0E 12 04 14                          DB $0E, $12, $04, $14
  50++E33A 0E 23 08 18                          DB $0E, $23, $08, $18
  51++E33E 0E 34 0C 1C                          DB $0E, $34, $0C, $1C
  52++E342 0E 45 10 20                          DB $0E, $45, $10, $20
  53++E346 08 00 28 2C                          DB $08, $00, $28, $2C
  54++E34A 09 00 2C 30                          DB $09, $00, $2C, $30
  55++E34E 0B 00 28 30                          DB $0B, $00, $28, $30
  56++E352 08 00 34 38                          DB $08, $00, $34, $38
  57++E356 09 00 38 3C                          DB $09, $00, $38, $3C
  58++E35A 0B 00 34 3C                          DB $0B, $00, $34, $3C
  59++E35E 0C 99 40 44                          DB $0C, $99, $40, $44
  60++E362 0C 99 40 48                          DB $0C, $99, $40, $48
  61++E366 08 99 44 48                          DB $08, $99, $44, $48
  62++E36A              Fer_De_LanceEdgesSize:  equ $ - Fer_De_LanceEdges
  63++E36A              Fer_De_LanceEdgesCnt:   equ Fer_De_LanceEdgesSize/4
  64++E36A 1C 00 18 06  Fer_De_LanceNormals:	DB $1C, $00, $18, $06
  65++E36E 9F 44 00 18                          DB $9F, $44, $00, $18
  66++E372 BF 3F 00 25                          DB $BF, $3F, $00, $25
  67++E376 3F 00 00 68                          DB $3F, $00, $00, $68
  68++E37A 3F 3F 00 25                          DB $3F, $3F, $00, $25
  69++E37E 1F 44 00 18                          DB $1F, $44, $00, $18
  70++E382 BC 0C 2E 13                          DB $BC, $0C, $2E, $13
  71++E386 3C 00 2D 16                          DB $3C, $00, $2D, $16
  72++E38A 3C 0C 2E 13                          DB $3C, $0C, $2E, $13
  73++E38E 5F 00 1C 00                          DB $5F, $00, $1C, $00
  74++E392              Fer_De_LanceNormalsSize:equ $ - Fer_De_LanceNormals
  75++E392              Fer_De_LanceLen:        equ $ - Fer_De_Lance
  76++E392
# file closed: ./Data/ships/Fer_De_Lance.asm
  85+ E392                                      include "Data/ships/Gecko.asm"
# file opened: ./Data/ships/Gecko.asm
   1++E392 00 26 49     Gecko:	                DB $00, $26, $49
   2++E395 F3 E3                                DW GeckoEdges
   3++E397 44                                   DB GeckoEdgesSize
   4++E398 00 1A                                DB $00, $1A
   5++E39A 48                                   DB GeckoVertSize
   6++E39B 11                                   DB GeckoEdgesCnt
   7++E39C 00 37                                DB $00, $37
   8++E39E 24                                   DB GeckoNormalsSize
   9++E39F 12 46 1E                             DB $12, $46, $1E
  10++E3A2 37 E4                                DW GeckoNormals
  11++E3A4 03 10                                DB $03, $10
  12++E3A6 AB E3                                DW GeckoVertices
  13++E3A8 00 00                                DB 0,0                      ; Type and Tactics
  14++E3AA 01                                   DB ShipCanAnger
  15++E3AB 0A 04 2F DF  GeckoVertices:	        DB $0A, $04, $2F, $DF, $03, $45
  15++E3AF 03 45
  16++E3B1 0A 04 2F 5F                          DB $0A, $04, $2F, $5F, $01, $23
  16++E3B5 01 23
  17++E3B7 10 08 17 BF                          DB $10, $08, $17, $BF, $05, $67
  17++E3BB 05 67
  18++E3BD 10 08 17 3F                          DB $10, $08, $17, $3F, $01, $78
  18++E3C1 01 78
  19++E3C3 42 00 03 BF                          DB $42, $00, $03, $BF, $45, $66
  19++E3C7 45 66
  20++E3C9 42 00 03 3F                          DB $42, $00, $03, $3F, $12, $88
  20++E3CD 12 88
  21++E3CF 14 0E 17 FF                          DB $14, $0E, $17, $FF, $34, $67
  21++E3D3 34 67
  22++E3D5 14 0E 17 7F                          DB $14, $0E, $17, $7F, $23, $78
  22++E3D9 23 78
  23++E3DB 08 06 21 D0                          DB $08, $06, $21, $D0, $33, $33
  23++E3DF 33 33
  24++E3E1 08 06 21 51                          DB $08, $06, $21, $51, $33, $33
  24++E3E5 33 33
  25++E3E7 08 0D 10 F0                          DB $08, $0D, $10, $F0, $33, $33
  25++E3EB 33 33
  26++E3ED 08 0D 10 71                          DB $08, $0D, $10, $71, $33, $33
  26++E3F1 33 33
  27++E3F3              GeckoVertSize:          equ $ - GeckoVertices
  28++E3F3 1F 03 00 04  GeckoEdges:	            DB $1F, $03, $00, $04
  29++E3F7 1F 12 04 14                          DB $1F, $12, $04, $14
  30++E3FB 1F 18 14 0C                          DB $1F, $18, $14, $0C
  31++E3FF 1F 07 0C 08                          DB $1F, $07, $0C, $08
  32++E403 1F 56 08 10                          DB $1F, $56, $08, $10
  33++E407 1F 45 10 00                          DB $1F, $45, $10, $00
  34++E40B 1F 28 14 1C                          DB $1F, $28, $14, $1C
  35++E40F 1F 37 1C 18                          DB $1F, $37, $1C, $18
  36++E413 1F 46 18 10                          DB $1F, $46, $18, $10
  37++E417 1D 05 00 08                          DB $1D, $05, $00, $08
  38++E41B 1E 01 04 0C                          DB $1E, $01, $04, $0C
  39++E41F 1D 34 00 18                          DB $1D, $34, $00, $18
  40++E423 1E 23 04 1C                          DB $1E, $23, $04, $1C
  41++E427 14 67 08 18                          DB $14, $67, $08, $18
  42++E42B 14 78 0C 1C                          DB $14, $78, $0C, $1C
  43++E42F 10 33 20 28                          DB $10, $33, $20, $28
  44++E433 11 33 24 2C                          DB $11, $33, $24, $2C
  45++E437              GeckoEdgesSize:             equ $ - GeckoEdges
  46++E437              GeckoEdgesCnt:          equ GeckoEdgesSize/4
  47++E437 1F 00 1F 05  GeckoNormals:	        DB $1F, $00, $1F, $05
  48++E43B 1F 04 2D 08                          DB $1F, $04, $2D, $08
  49++E43F 5F 19 6C 13                          DB $5F, $19, $6C, $13
  50++E443 5F 00 54 0C                          DB $5F, $00, $54, $0C
  51++E447 DF 19 6C 13                          DB $DF, $19, $6C, $13
  52++E44B 9F 04 2D 08                          DB $9F, $04, $2D, $08
  53++E44F BF 58 10 D6                          DB $BF, $58, $10, $D6
  54++E453 3F 00 00 BB                          DB $3F, $00, $00, $BB
  55++E457 3F 58 10 D6                          DB $3F, $58, $10, $D6
  56++E45B              GeckoNormalsSize:       equ $ - GeckoNormals
  57++E45B              GeckoLen:               equ $ - Gecko
  58++E45B
# file closed: ./Data/ships/Gecko.asm
  86+ E45B                                      include "Data/ships/Ghavial.asm"
# file opened: ./Data/ships/Ghavial.asm
   1++E45B 03 26 00     Ghavial:	            DB $03, $26, $00
   2++E45E BC E4                                DW GhavialEdges
   3++E460 58                                   DB GhavialEdgesSize
   4++E461 00 22                                DB $00, $22
   5++E463 48                                   DB GhavialVertSize
   6++E464 16                                   DB GhavialEdgesCnt
   7++E465 00 64                                DB $00, $64
   8++E467 30                                   DB GhavialNormalsSize
   9++E468 0A 72 10                             DB $0A, $72, $10
  10++E46B 14 E5                                DW GhavialNormals
  11++E46D 00 27                                DB $00, $27
  12++E46F 74 E4                                DW GhavialVertices
  13++E471 00 00                                DB 0,0                      ; Type and Tactics
  14++E473 01                                   DB ShipCanAnger
  15++E474
  16++E474 1E 00 64 1F  GhavialVertices:	DB $1E, $00, $64, $1F, $67, $01
  16++E478 67 01
  17++E47A 1E 00 64 9F  	DB $1E, $00, $64, $9F, $6B, $05
  17++E47E 6B 05
  18++E480 28 1E 1A 3F  	DB $28, $1E, $1A, $3F, $23, $01
  18++E484 23 01
  19++E486 28 1E 1A BF  	DB $28, $1E, $1A, $BF, $45, $03
  19++E48A 45 03
  20++E48C 3C 00 14 3F  	DB $3C, $00, $14, $3F, $78, $12
  20++E490 78 12
  21++E492 28 00 3C 3F  	DB $28, $00, $3C, $3F, $89, $23
  21++E496 89 23
  22++E498 3C 00 14 BF  	DB $3C, $00, $14, $BF, $AB, $45
  22++E49C AB 45
  23++E49E 28 00 3C BF  	DB $28, $00, $3C, $BF, $9A, $34
  23++E4A2 9A 34
  24++E4A4 00 1E 14 7F  	DB $00, $1E, $14, $7F, $FF, $FF
  24++E4A8 FF FF
  25++E4AA 0A 18 00 09  	DB $0A, $18, $00, $09, $00, $00
  25++E4AE 00 00
  26++E4B0 0A 18 00 89  	DB $0A, $18, $00, $89, $00, $00
  26++E4B4 00 00
  27++E4B6 00 16 0A 09  	DB $00, $16, $0A, $09, $00, $00
  27++E4BA 00 00
  28++E4BC
  29++E4BC              GhavialVertSize: equ $ - GhavialVertices
  30++E4BC
  31++E4BC
  32++E4BC 1F 01 00 08  GhavialEdges:	DB $1F, $01, $00, $08
  33++E4C0 1F 12 10 08  	DB $1F, $12, $10, $08
  34++E4C4 1F 23 14 08  	DB $1F, $23, $14, $08
  35++E4C8 1F 30 0C 08  	DB $1F, $30, $0C, $08
  36++E4CC 1F 34 1C 0C  	DB $1F, $34, $1C, $0C
  37++E4D0 1F 45 18 0C  	DB $1F, $45, $18, $0C
  38++E4D4 1F 50 0C 04  	DB $1F, $50, $0C, $04
  39++E4D8 1F 67 00 20  	DB $1F, $67, $00, $20
  40++E4DC 1F 78 10 20  	DB $1F, $78, $10, $20
  41++E4E0 1F 89 14 20  	DB $1F, $89, $14, $20
  42++E4E4 1F 9A 1C 20  	DB $1F, $9A, $1C, $20
  43++E4E8 1F AB 18 20  	DB $1F, $AB, $18, $20
  44++E4EC 1F B6 04 20  	DB $1F, $B6, $04, $20
  45++E4F0 1F 06 04 00  	DB $1F, $06, $04, $00
  46++E4F4 1F 17 00 10  	DB $1F, $17, $00, $10
  47++E4F8 1F 28 10 14  	DB $1F, $28, $10, $14
  48++E4FC 1F 39 14 1C  	DB $1F, $39, $14, $1C
  49++E500 1F 4A 1C 18  	DB $1F, $4A, $1C, $18
  50++E504 1F 5B 18 04  	DB $1F, $5B, $18, $04
  51++E508 09 00 24 28  	DB $09, $00, $24, $28
  52++E50C 09 00 28 2C  	DB $09, $00, $28, $2C
  53++E510 09 00 2C 24  	DB $09, $00, $2C, $24
  54++E514
  55++E514              GhavialEdgesSize: equ $ - GhavialEdges
  56++E514
  57++E514
  58++E514              GhavialEdgesCnt: equ GhavialEdgesSize/4
  59++E514
  60++E514
  61++E514 1F 00 3E 0E  GhavialNormals:	DB $1F, $00, $3E, $0E
  62++E518 1F 33 24 0C  	DB $1F, $33, $24, $0C
  63++E51C 3F 33 1C 19  	DB $3F, $33, $1C, $19
  64++E520 3F 00 30 2A  	DB $3F, $00, $30, $2A
  65++E524 BF 33 1C 19  	DB $BF, $33, $1C, $19
  66++E528 9F 33 24 0C  	DB $9F, $33, $24, $0C
  67++E52C 5F 00 3E 0F  	DB $5F, $00, $3E, $0F
  68++E530 5F 1C 38 07  	DB $5F, $1C, $38, $07
  69++E534 7F 1B 37 0D  	DB $7F, $1B, $37, $0D
  70++E538 7F 00 33 26  	DB $7F, $00, $33, $26
  71++E53C FF 1B 37 0D  	DB $FF, $1B, $37, $0D
  72++E540 DF 1C 38 07  	DB $DF, $1C, $38, $07
  73++E544
  74++E544              GhavialNormalsSize: equ $ - GhavialNormals
  75++E544              GhavialLen: equ $ - Ghavial
  76++E544
# file closed: ./Data/ships/Ghavial.asm
  87+ E544                                      include "Data/ships/Iguana.asm"
# file opened: ./Data/ships/Iguana.asm
   1++E544 01 0D AC     Iguana:	                DB $01, $0D, $AC
   2++E547 B7 E5                                DW IguanaEdges
   3++E549 5C                                   DB IguanaEdgesSize
   4++E54A 00 1A                                DB $00, $1A
   5++E54C 5A                                   DB IguanaVertSize
   6++E54D 17                                   DB IguanaEdgesCnt
   7++E54E 00 96                                DB $00, $96
   8++E550 28                                   DB IguanaNormalsSize
   9++E551 0A 5A 21                             DB $0A, $5A, $21
  10++E554 13 E6                                DW IguanaNormals
  11++E556 01 23                                DB $01, $23
  12++E558 5D E5                                DW IguanaVertices
  13++E55A 00 00                                DB 0,0                      ; Type and Tactics
  14++E55C 01                                   DB ShipCanAnger
  15++E55D
  16++E55D
  17++E55D 00 00 5A 1F  IguanaVertices:	DB $00, $00, $5A, $1F, $23, $01
  17++E561 23 01
  18++E563 00 14 1E 1F  	DB $00, $14, $1E, $1F, $46, $02
  18++E567 46 02
  19++E569 28 00 0A 9F  	DB $28, $00, $0A, $9F, $45, $01
  19++E56D 45 01
  20++E56F 00 14 1E 5F  	DB $00, $14, $1E, $5F, $57, $13
  20++E573 57 13
  21++E575 28 00 0A 1F  	DB $28, $00, $0A, $1F, $67, $23
  21++E579 67 23
  22++E57B 00 14 28 3F  	DB $00, $14, $28, $3F, $89, $46
  22++E57F 89 46
  23++E581 28 00 1E BF  	DB $28, $00, $1E, $BF, $88, $45
  23++E585 88 45
  24++E587 00 14 28 7F  	DB $00, $14, $28, $7F, $89, $57
  24++E58B 89 57
  25++E58D 28 00 1E 3F  	DB $28, $00, $1E, $3F, $99, $67
  25++E591 99 67
  26++E593 28 00 28 9E  	DB $28, $00, $28, $9E, $11, $00
  26++E597 11 00
  27++E599 28 00 28 1E  	DB $28, $00, $28, $1E, $33, $22
  27++E59D 33 22
  28++E59F 00 08 28 2A  	DB $00, $08, $28, $2A, $99, $88
  28++E5A3 99 88
  29++E5A5 10 00 24 AA  	DB $10, $00, $24, $AA, $88, $88
  29++E5A9 88 88
  30++E5AB 00 08 28 6A  	DB $00, $08, $28, $6A, $99, $88
  30++E5AF 99 88
  31++E5B1 10 00 24 2A  	DB $10, $00, $24, $2A, $99, $99
  31++E5B5 99 99
  32++E5B7
  33++E5B7              IguanaVertSize: equ $ - IguanaVertices
  34++E5B7
  35++E5B7
  36++E5B7
  37++E5B7 1F 02 00 04  IguanaEdges:	DB $1F, $02, $00, $04
  38++E5BB 1F 01 00 08  	DB $1F, $01, $00, $08
  39++E5BF 1F 13 00 0C  	DB $1F, $13, $00, $0C
  40++E5C3 1F 23 00 10  	DB $1F, $23, $00, $10
  41++E5C7 1F 46 04 14  	DB $1F, $46, $04, $14
  42++E5CB 1F 45 08 18  	DB $1F, $45, $08, $18
  43++E5CF 1F 57 0C 1C  	DB $1F, $57, $0C, $1C
  44++E5D3 1F 67 10 20  	DB $1F, $67, $10, $20
  45++E5D7 1F 48 14 18  	DB $1F, $48, $14, $18
  46++E5DB 1F 58 18 1C  	DB $1F, $58, $18, $1C
  47++E5DF 1F 69 14 20  	DB $1F, $69, $14, $20
  48++E5E3 1F 79 1C 20  	DB $1F, $79, $1C, $20
  49++E5E7 1F 04 04 08  	DB $1F, $04, $04, $08
  50++E5EB 1F 15 08 0C  	DB $1F, $15, $08, $0C
  51++E5EF 1F 26 04 10  	DB $1F, $26, $04, $10
  52++E5F3 1F 37 0C 10  	DB $1F, $37, $0C, $10
  53++E5F7 1F 89 14 1C  	DB $1F, $89, $14, $1C
  54++E5FB 1E 01 08 24  	DB $1E, $01, $08, $24
  55++E5FF 1E 23 10 28  	DB $1E, $23, $10, $28
  56++E603 0A 88 2C 30  	DB $0A, $88, $2C, $30
  57++E607 0A 88 34 30  	DB $0A, $88, $34, $30
  58++E60B 0A 99 2C 38  	DB $0A, $99, $2C, $38
  59++E60F 0A 99 34 38  	DB $0A, $99, $34, $38
  60++E613
  61++E613              IguanaEdgesSize: equ $ - IguanaEdges
  62++E613
  63++E613
  64++E613              IguanaEdgesCnt: equ IguanaEdgesSize/4
  65++E613
  66++E613
  67++E613 9F 33 4D 19  IguanaNormals:	DB $9F, $33, $4D, $19
  68++E617 DF 33 4D 19  	DB $DF, $33, $4D, $19
  69++E61B 1F 33 4D 19  	DB $1F, $33, $4D, $19
  70++E61F 5F 33 4D 19  	DB $5F, $33, $4D, $19
  71++E623 9F 2A 55 00  	DB $9F, $2A, $55, $00
  72++E627 DF 2A 55 00  	DB $DF, $2A, $55, $00
  73++E62B 1F 2A 55 00  	DB $1F, $2A, $55, $00
  74++E62F 5F 2A 55 00  	DB $5F, $2A, $55, $00
  75++E633 BF 17 00 5D  	DB $BF, $17, $00, $5D
  76++E637 3F 17 00 5D  	DB $3F, $17, $00, $5D
  77++E63B
  78++E63B
  79++E63B              IguanaNormalsSize: equ $ - IguanaNormals
  80++E63B              IguanaLen: equ $ - Iguana
  81++E63B
# file closed: ./Data/ships/Iguana.asm
  88+ E63B                                      include "Data/ships/Krait.asm"
# file opened: ./Data/ships/Krait.asm
   1++E63B
   2++E63B 01 10 0E     Krait:                  DB $01, $10, $0E
   3++E63E BA E6                                DW KraitEdges
   4++E640 54                                   DB KraitEdgesSize
   5++E641 00 12                                DB $00, $12
   6++E643 66                                   DB KraitVertSize
   7++E644 15                                   DB KraitEdgesCnt
   8++E645 64 00                                DB $64,$00
   9++E647 18                                   DB KraitNormalsSize
  10++E648 14 50 1E                             DB $14, $50, $1E
  11++E64B 0E E7                                DW KraitNormals
  12++E64D 02 10                                DB $02, $10
  13++E64F 54 E6                                DW KraitVertices
  14++E651 00 00                                DB 0,0                      ; Type and Tactics
  15++E653 01                                   DB ShipCanAnger
  16++E654 00 00 60 1F  KraitVertices:          DB $00, $00, $60, $1F, $01, $23
  16++E658 01 23
  17++E65A 00 12 30 3F                          DB $00, $12, $30, $3F, $03, $45
  17++E65E 03 45
  18++E660 00 12 30 7F                          DB $00, $12, $30, $7F, $12, $45
  18++E664 12 45
  19++E666 5A 00 03 3F                          DB $5A, $00, $03, $3F, $01, $44
  19++E66A 01 44
  20++E66C 5A 00 03 BF                          DB $5A, $00, $03, $BF, $23, $55
  20++E670 23 55
  21++E672 5A 00 57 1C                          DB $5A, $00, $57, $1C, $01, $11
  21++E676 01 11
  22++E678 5A 00 57 9C                          DB $5A, $00, $57, $9C, $23, $33
  22++E67C 23 33
  23++E67E 00 05 35 09                          DB $00, $05, $35, $09, $00, $33
  23++E682 00 33
  24++E684 00 07 26 06                          DB $00, $07, $26, $06, $00, $33
  24++E688 00 33
  25++E68A 12 07 13 89                          DB $12, $07, $13, $89, $33, $33
  25++E68E 33 33
  26++E690 12 07 13 09                          DB $12, $07, $13, $09, $00, $00
  26++E694 00 00
  27++E696 12 0B 27 28                          DB $12, $0B, $27, $28, $44, $44
  27++E69A 44 44
  28++E69C 12 0B 27 68                          DB $12, $0B, $27, $68, $44, $44
  28++E6A0 44 44
  29++E6A2 24 00 1E 28                          DB $24, $00, $1E, $28, $44, $44
  29++E6A6 44 44
  30++E6A8 12 0B 27 A8                          DB $12, $0B, $27, $A8, $55, $55
  30++E6AC 55 55
  31++E6AE 12 0B 27 E8                          DB $12, $0B, $27, $E8, $55, $55
  31++E6B2 55 55
  32++E6B4 24 00 1E A8                          DB $24, $00, $1E, $A8, $55, $55
  32++E6B8 55 55
  33++E6BA              KraitVertSize           equ $  - KraitVertices
  34++E6BA 1F 03 00 04  KraitEdges:             DB $1F, $03, $00, $04, $1F, $12, $00, $08
  34++E6BE 1F 12 00 08
  35++E6C2 1F 01 00 0C                          DB $1F, $01, $00, $0C, $1F, $23, $00, $10
  35++E6C6 1F 23 00 10
  36++E6CA 1F 35 04 10                          DB $1F, $35, $04, $10, $1F, $25, $10, $08
  36++E6CE 1F 25 10 08
  37++E6D2 1F 14 08 0C                          DB $1F, $14, $08, $0C, $1F, $04, $0C, $04
  37++E6D6 1F 04 0C 04
  38++E6DA 1C 01 0C 14                          DB $1C, $01, $0C, $14, $1C, $23, $10, $18
  38++E6DE 1C 23 10 18
  39++E6E2 05 45 04 08                          DB $05, $45, $04, $08, $09, $00, $1C, $28
  39++E6E6 09 00 1C 28
  40++E6EA 06 00 20 28                          DB $06, $00, $20, $28, $09, $33, $1C, $24
  40++E6EE 09 33 1C 24
  41++E6F2 06 33 20 24                          DB $06, $33, $20, $24, $08, $44, $2C, $34
  41++E6F6 08 44 2C 34
  42++E6FA 08 44 34 30                          DB $08, $44, $34, $30, $07, $44, $30, $2C
  42++E6FE 07 44 30 2C
  43++E702 07 55 38 3C                          DB $07, $55, $38, $3C, $08, $55, $3C, $40
  43++E706 08 55 3C 40
  44++E70A 08 55 40 38                          DB $08, $55, $40, $38
  45++E70E              KraitEdgesSize          equ $  - KraitEdges
  46++E70E              KraitEdgesCnt           equ KraitEdgesSize/4
  47++E70E 1F 07 30 06  KraitNormals            DB $1F, $07, $30, $06
  48++E712 5F 07 30 06                          DB $5F, $07, $30, $06, $DF, $07, $30, $06
  48++E716 DF 07 30 06
  49++E71A 9F 07 30 06                          DB $9F, $07, $30, $06, $3F, $4D, $00, $9A
  49++E71E 3F 4D 00 9A
  50++E722 BF 4D 00 9A                          DB $BF, $4D, $00, $9A
  51++E726              KraitNormalsSize        equ $  - KraitNormals
  52++E726              KraitLen                equ $  - Krait
  53++E726
# file closed: ./Data/ships/Krait.asm
  89+ E726                                      include "Data/ships/Logo.asm"
# file opened: ./Data/ships/Logo.asm
   1++E726 00 26 49     Logo:	                DB $00, $26, $49
   2++E729 3B E8                                DW LogoEdges
   3++E72B 94                                   DB LogoEdgesSize
   4++E72C 00 36                                DB $00, $36
   5++E72E FC                                   DB LogoVertSize
   6++E72F 25                                   DB LogoEdgesCnt
   7++E730 00 00                                DB $00, $00
   8++E732 14                                   DB LogoNormalsSize
   9++E733 63 FC 24                             DB $63, $FC, $24
  10++E736 CF E8                                DW LogoNormals
  11++E738 01 00                                DB $01, $00
  12++E73A 3F E7                                DW LogoVertices
  13++E73C FD 00                                DB ShipTypeText,0                      ; Type and Tactics
  14++E73E 00                                   DB 0
  15++E73F
  16++E73F 00 09 37 5F  LogoVertices:	DB $00, $09, $37, $5F, $00, $00
  16++E743 00 00
  17++E745 0A 09 1E DF  	DB $0A, $09, $1E, $DF, $00, $00
  17++E749 00 00
  18++E74B 19 09 5D DF  	DB $19, $09, $5D, $DF, $00, $00
  18++E74F 00 00
  19++E751 96 09 B4 DF  	DB $96, $09, $B4, $DF, $00, $00
  19++E755 00 00
  20++E757 5A 09 0A DF  	DB $5A, $09, $0A, $DF, $00, $00
  20++E75B 00 00
  21++E75D 8C 09 0A DF  	DB $8C, $09, $0A, $DF, $00, $00
  21++E761 00 00
  22++E763 00 09 5F 7F  	DB $00, $09, $5F, $7F, $00, $00
  22++E767 00 00
  23++E769 8C 09 0A 5F  	DB $8C, $09, $0A, $5F, $00, $00
  23++E76D 00 00
  24++E76F 5A 09 0A 5F  	DB $5A, $09, $0A, $5F, $00, $00
  24++E773 00 00
  25++E775 96 09 B4 5F  	DB $96, $09, $B4, $5F, $00, $00
  25++E779 00 00
  26++E77B 19 09 5D 5F  	DB $19, $09, $5D, $5F, $00, $00
  26++E77F 00 00
  27++E781 0A 09 1E 5F  	DB $0A, $09, $1E, $5F, $00, $00
  27++E785 00 00
  28++E787 55 09 1E FF  	DB $55, $09, $1E, $FF, $02, $33
  28++E78B 02 33
  29++E78D 55 09 1E 7F  	DB $55, $09, $1E, $7F, $02, $44
  29++E791 02 44
  30++E793 46 0B 05 9F  	DB $46, $0B, $05, $9F, $01, $33
  30++E797 01 33
  31++E799 46 0B 19 BF  	DB $46, $0B, $19, $BF, $02, $33
  31++E79D 02 33
  32++E79F 46 0B 19 3F  	DB $46, $0B, $19, $3F, $02, $44
  32++E7A3 02 44
  33++E7A5 46 0B 05 1F  	DB $46, $0B, $05, $1F, $01, $44
  33++E7A9 01 44
  34++E7AB 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  34++E7AF 00 00
  35++E7B1 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  35++E7B5 00 00
  36++E7B7 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  36++E7BB 00 00
  37++E7BD 1C 0B 02 BF  	DB $1C, $0B, $02, $BF, $00, $00
  37++E7C1 00 00
  38++E7C3 31 0B 02 BF  	DB $31, $0B, $02, $BF, $00, $00
  38++E7C7 00 00
  39++E7C9 31 0B 0A BF  	DB $31, $0B, $0A, $BF, $00, $00
  39++E7CD 00 00
  40++E7CF 31 0B 11 BF  	DB $31, $0B, $11, $BF, $00, $00
  40++E7D3 00 00
  41++E7D5 1C 0B 11 BF  	DB $1C, $0B, $11, $BF, $00, $00
  41++E7D9 00 00
  42++E7DB 1C 0B 0A BF  	DB $1C, $0B, $0A, $BF, $00, $00
  42++E7DF 00 00
  43++E7E1 18 0B 02 BF  	DB $18, $0B, $02, $BF, $00, $00
  43++E7E5 00 00
  44++E7E7 18 0B 11 BF  	DB $18, $0B, $11, $BF, $00, $00
  44++E7EB 00 00
  45++E7ED 03 0B 11 BF  	DB $03, $0B, $11, $BF, $00, $00
  45++E7F1 00 00
  46++E7F3 00 0B 02 3F  	DB $00, $0B, $02, $3F, $00, $00
  46++E7F7 00 00
  47++E7F9 00 0B 11 3F  	DB $00, $0B, $11, $3F, $00, $00
  47++E7FD 00 00
  48++E7FF 04 0B 02 3F  	DB $04, $0B, $02, $3F, $00, $00
  48++E803 00 00
  49++E805 19 0B 02 3F  	DB $19, $0B, $02, $3F, $00, $00
  49++E809 00 00
  50++E80B 0E 0B 02 3F  	DB $0E, $0B, $02, $3F, $00, $00
  50++E80F 00 00
  51++E811 0E 0B 11 3F  	DB $0E, $0B, $11, $3F, $00, $00
  51++E815 00 00
  52++E817 31 0B 02 3F  	DB $31, $0B, $02, $3F, $00, $00
  52++E81B 00 00
  53++E81D 1C 0B 02 3F  	DB $1C, $0B, $02, $3F, $00, $00
  53++E821 00 00
  54++E823 1C 0B 0A 3F  	DB $1C, $0B, $0A, $3F, $00, $00
  54++E827 00 00
  55++E829 1C 0B 11 3F  	DB $1C, $0B, $11, $3F, $00, $00
  55++E82D 00 00
  56++E82F 31 0B 11 3F  	DB $31, $0B, $11, $3F, $00, $00
  56++E833 00 00
  57++E835 31 0B 0A 3F  	DB $31, $0B, $0A, $3F, $00, $00
  57++E839 00 00
  58++E83B
  59++E83B              LogoVertSize: equ $ - LogoVertices
  60++E83B
  61++E83B
  62++E83B
  63++E83B 1F 00 00 04  LogoEdges:	DB $1F, $00, $00, $04
  64++E83F 1F 00 04 08  	DB $1F, $00, $04, $08
  65++E843 1F 00 08 0C  	DB $1F, $00, $08, $0C
  66++E847 1F 00 0C 10  	DB $1F, $00, $0C, $10
  67++E84B 1F 00 10 14  	DB $1F, $00, $10, $14
  68++E84F 1F 00 14 18  	DB $1F, $00, $14, $18
  69++E853 1F 00 18 1C  	DB $1F, $00, $18, $1C
  70++E857 1F 00 1C 20  	DB $1F, $00, $1C, $20
  71++E85B 1F 00 20 24  	DB $1F, $00, $20, $24
  72++E85F 1F 00 24 28  	DB $1F, $00, $24, $28
  73++E863 1F 00 28 2C  	DB $1F, $00, $28, $2C
  74++E867 1F 00 2C 00  	DB $1F, $00, $2C, $00
  75++E86B 1E 03 38 3C  	DB $1E, $03, $38, $3C
  76++E86F 1E 01 3C 40  	DB $1E, $01, $3C, $40
  77++E873 1E 04 40 44  	DB $1E, $04, $40, $44
  78++E877 1E 01 44 38  	DB $1E, $01, $44, $38
  79++E87B 1E 03 10 30  	DB $1E, $03, $10, $30
  80++E87F 1E 22 30 34  	DB $1E, $22, $30, $34
  81++E883 1E 04 34 20  	DB $1E, $04, $34, $20
  82++E887 1E 11 20 10  	DB $1E, $11, $20, $10
  83++E88B 1E 13 10 38  	DB $1E, $13, $10, $38
  84++E88F 1E 13 30 3C  	DB $1E, $13, $30, $3C
  85++E893 1E 24 34 40  	DB $1E, $24, $34, $40
  86++E897 1E 14 20 44  	DB $1E, $14, $20, $44
  87++E89B 1E 00 54 58  	DB $1E, $00, $54, $58
  88++E89F 1E 00 58 60  	DB $1E, $00, $58, $60
  89++E8A3 1E 00 60 64  	DB $1E, $00, $60, $64
  90++E8A7 1E 00 5C 68  	DB $1E, $00, $5C, $68
  91++E8AB 1E 00 6C 70  	DB $1E, $00, $6C, $70
  92++E8AF 1E 00 70 74  	DB $1E, $00, $70, $74
  93++E8B3 1E 00 78 7C  	DB $1E, $00, $78, $7C
  94++E8B7 1E 00 80 84  	DB $1E, $00, $80, $84
  95++E8BB 1E 00 88 8C  	DB $1E, $00, $88, $8C
  96++E8BF 1E 00 90 94  	DB $1E, $00, $90, $94
  97++E8C3 1E 00 94 9C  	DB $1E, $00, $94, $9C
  98++E8C7 1E 00 9C A0  	DB $1E, $00, $9C, $A0
  99++E8CB 1E 00 A4 98  	DB $1E, $00, $A4, $98
 100++E8CF
 101++E8CF              LogoEdgesSize: equ $ - LogoEdges
 102++E8CF
 103++E8CF
 104++E8CF              LogoEdgesCnt: equ LogoEdgesSize/4
 105++E8CF
 106++E8CF
 107++E8CF 1F 00 17 00  LogoNormals:	DB $1F, $00, $17, $00
 108++E8D3 1F 00 04 0F  	DB $1F, $00, $04, $0F
 109++E8D7 3F 00 0D 34  	DB $3F, $00, $0D, $34
 110++E8DB 9F 51 51 00  	DB $9F, $51, $51, $00
 111++E8DF 1F 51 51 00  	DB $1F, $51, $51, $00
 112++E8E3
 113++E8E3
 114++E8E3              LogoNormalsSize: equ $ - LogoNormals
 115++E8E3              LogoLen: equ $ - Logo
 116++E8E3
# file closed: ./Data/ships/Logo.asm
  90+ E8E3                                      include "Data/ships/Mamba.asm"
# file opened: ./Data/ships/Mamba.asm
   1++E8E3 01 13 24     Mamba:	                DB $01, $13, $24
   2++E8E6 92 E9                                DW MambaEdges
   3++E8E8 70                                   DB MambaEdgesSize
   4++E8E9 00 22                                DB $00, $22
   5++E8EB 96                                   DB MambaVertSize
   6++E8EC 1C                                   DB MambaEdgesCnt
   7++E8ED 00 96                                DB $00, $96
   8++E8EF 14                                   DB MambaNormalsSize
   9++E8F0 19 5A 1E                             DB $19, $5A, $1E
  10++E8F3 02 EA                                DW MambaNormals
  11++E8F5 02 12                                DB $02, $12
  12++E8F7 FC E8                                DW MambaVertices
  13++E8F9 00 00                                DB 0,0                      ; Type and Tactics
  14++E8FB 01                                   DB ShipCanAnger
  15++E8FC
  16++E8FC 00 00 40 1F  MambaVertices:	DB $00, $00, $40, $1F, $10, $32
  16++E900 10 32
  17++E902 40 08 20 FF  	DB $40, $08, $20, $FF, $20, $44
  17++E906 20 44
  18++E908 20 08 20 BE  	DB $20, $08, $20, $BE, $21, $44
  18++E90C 21 44
  19++E90E 20 08 20 3E  	DB $20, $08, $20, $3E, $31, $44
  19++E912 31 44
  20++E914 40 08 20 7F  	DB $40, $08, $20, $7F, $30, $44
  20++E918 30 44
  21++E91A 04 04 10 8E  	DB $04, $04, $10, $8E, $11, $11
  21++E91E 11 11
  22++E920 04 04 10 0E  	DB $04, $04, $10, $0E, $11, $11
  22++E924 11 11
  23++E926 08 03 1C 0D  	DB $08, $03, $1C, $0D, $11, $11
  23++E92A 11 11
  24++E92C 08 03 1C 8D  	DB $08, $03, $1C, $8D, $11, $11
  24++E930 11 11
  25++E932 14 04 10 D4  	DB $14, $04, $10, $D4, $00, $00
  25++E936 00 00
  26++E938 14 04 10 54  	DB $14, $04, $10, $54, $00, $00
  26++E93C 00 00
  27++E93E 18 07 14 F4  	DB $18, $07, $14, $F4, $00, $00
  27++E942 00 00
  28++E944 10 07 14 F0  	DB $10, $07, $14, $F0, $00, $00
  28++E948 00 00
  29++E94A 10 07 14 70  	DB $10, $07, $14, $70, $00, $00
  29++E94E 00 00
  30++E950 18 07 14 74  	DB $18, $07, $14, $74, $00, $00
  30++E954 00 00
  31++E956 08 04 20 AD  	DB $08, $04, $20, $AD, $44, $44
  31++E95A 44 44
  32++E95C 08 04 20 2D  	DB $08, $04, $20, $2D, $44, $44
  32++E960 44 44
  33++E962 08 04 20 6E  	DB $08, $04, $20, $6E, $44, $44
  33++E966 44 44
  34++E968 08 04 20 EE  	DB $08, $04, $20, $EE, $44, $44
  34++E96C 44 44
  35++E96E 20 04 20 A7  	DB $20, $04, $20, $A7, $44, $44
  35++E972 44 44
  36++E974 20 04 20 27  	DB $20, $04, $20, $27, $44, $44
  36++E978 44 44
  37++E97A 24 04 20 67  	DB $24, $04, $20, $67, $44, $44
  37++E97E 44 44
  38++E980 24 04 20 E7  	DB $24, $04, $20, $E7, $44, $44
  38++E984 44 44
  39++E986 26 00 20 A5  	DB $26, $00, $20, $A5, $44, $44
  39++E98A 44 44
  40++E98C 26 00 20 25  	DB $26, $00, $20, $25, $44, $44
  40++E990 44 44
  41++E992
  42++E992              MambaVertSize: equ $ - MambaVertices
  43++E992
  44++E992
  45++E992
  46++E992 1F 20 00 04  MambaEdges:	DB $1F, $20, $00, $04
  47++E996 1F 30 00 10  	DB $1F, $30, $00, $10
  48++E99A 1F 40 04 10  	DB $1F, $40, $04, $10
  49++E99E 1E 42 04 08  	DB $1E, $42, $04, $08
  50++E9A2 1E 41 08 0C  	DB $1E, $41, $08, $0C
  51++E9A6 1E 43 0C 10  	DB $1E, $43, $0C, $10
  52++E9AA 0E 11 14 18  	DB $0E, $11, $14, $18
  53++E9AE 0C 11 18 1C  	DB $0C, $11, $18, $1C
  54++E9B2 0D 11 1C 20  	DB $0D, $11, $1C, $20
  55++E9B6 0C 11 14 20  	DB $0C, $11, $14, $20
  56++E9BA 14 00 24 2C  	DB $14, $00, $24, $2C
  57++E9BE 10 00 24 30  	DB $10, $00, $24, $30
  58++E9C2 10 00 28 34  	DB $10, $00, $28, $34
  59++E9C6 14 00 28 38  	DB $14, $00, $28, $38
  60++E9CA 0E 00 34 38  	DB $0E, $00, $34, $38
  61++E9CE 0E 00 2C 30  	DB $0E, $00, $2C, $30
  62++E9D2 0D 44 3C 40  	DB $0D, $44, $3C, $40
  63++E9D6 0E 44 44 48  	DB $0E, $44, $44, $48
  64++E9DA 0C 44 3C 48  	DB $0C, $44, $3C, $48
  65++E9DE 0C 44 40 44  	DB $0C, $44, $40, $44
  66++E9E2 07 44 50 54  	DB $07, $44, $50, $54
  67++E9E6 05 44 50 60  	DB $05, $44, $50, $60
  68++E9EA 05 44 54 60  	DB $05, $44, $54, $60
  69++E9EE 07 44 4C 58  	DB $07, $44, $4C, $58
  70++E9F2 05 44 4C 5C  	DB $05, $44, $4C, $5C
  71++E9F6 05 44 58 5C  	DB $05, $44, $58, $5C
  72++E9FA 1E 21 00 08  	DB $1E, $21, $00, $08
  73++E9FE 1E 31 00 0C  	DB $1E, $31, $00, $0C
  74++EA02
  75++EA02              MambaEdgesSize: equ $ - MambaEdges
  76++EA02
  77++EA02
  78++EA02              MambaEdgesCnt: equ MambaEdgesSize/4
  79++EA02
  80++EA02
  81++EA02 5E 00 18 02  MambaNormals:	DB $5E, $00, $18, $02
  82++EA06 1E 00 18 02  	DB $1E, $00, $18, $02
  83++EA0A 9E 20 40 10  	DB $9E, $20, $40, $10
  84++EA0E 1E 20 40 10  	DB $1E, $20, $40, $10
  85++EA12 3E 00 00 7F  	DB $3E, $00, $00, $7F
  86++EA16
  87++EA16              MambaNormalsSize: equ $ - MambaNormals
  88++EA16              MambaLen: equ $ - Mamba
  89++EA16
# file closed: ./Data/ships/Mamba.asm
  91+ EA16                                      include "Data/ships/Missile.asm"
# file opened: ./Data/ships/Missile.asm
   1++EA16 00 06 40     Missile:	            DB $00, $06, $40
   2++EA19 95 EA                                DW MissileEdges
   3++EA1B 60                                   DB MissileEdgesSize
   4++EA1C 00 0A                                DB $00, $0A
   5++EA1E 66                                   DB MissileVertSize
   6++EA1F 18                                   DB MissileEdgesCnt
   7++EA20 00 00                                DB $00, $00
   8++EA22 24                                   DB MissileNormalsSize
   9++EA23 0E 02 2C                             DB $0E, $02, $2C
  10++EA26 F5 EA                                DW MissileNormals
  11++EA28 02 00                                DB $02, $00
  12++EA2A 2F EA                                DW MissileVertices
  13++EA2C 01 00                                DB ShipTypeMissile,0                      ; Type and Tactics
  14++EA2E 00                                   DB 0
  15++EA2F
  16++EA2F 00 00 44 1F  MissileVertices:	DB $00, $00, $44, $1F, $10, $32
  16++EA33 10 32
  17++EA35 08 08 24 5F  	DB $08, $08, $24, $5F, $21, $54
  17++EA39 21 54
  18++EA3B 08 08 24 1F  	DB $08, $08, $24, $1F, $32, $74
  18++EA3F 32 74
  19++EA41 08 08 24 9F  	DB $08, $08, $24, $9F, $30, $76
  19++EA45 30 76
  20++EA47 08 08 24 DF  	DB $08, $08, $24, $DF, $10, $65
  20++EA4B 10 65
  21++EA4D 08 08 2C 3F  	DB $08, $08, $2C, $3F, $74, $88
  21++EA51 74 88
  22++EA53 08 08 2C 7F  	DB $08, $08, $2C, $7F, $54, $88
  22++EA57 54 88
  23++EA59 08 08 2C FF  	DB $08, $08, $2C, $FF, $65, $88
  23++EA5D 65 88
  24++EA5F 08 08 2C BF  	DB $08, $08, $2C, $BF, $76, $88
  24++EA63 76 88
  25++EA65 0C 0C 2C 28  	DB $0C, $0C, $2C, $28, $74, $88
  25++EA69 74 88
  26++EA6B 0C 0C 2C 68  	DB $0C, $0C, $2C, $68, $54, $88
  26++EA6F 54 88
  27++EA71 0C 0C 2C E8  	DB $0C, $0C, $2C, $E8, $65, $88
  27++EA75 65 88
  28++EA77 0C 0C 2C A8  	DB $0C, $0C, $2C, $A8, $76, $88
  28++EA7B 76 88
  29++EA7D 08 08 0C A8  	DB $08, $08, $0C, $A8, $76, $77
  29++EA81 76 77
  30++EA83 08 08 0C E8  	DB $08, $08, $0C, $E8, $65, $66
  30++EA87 65 66
  31++EA89 08 08 0C 28  	DB $08, $08, $0C, $28, $74, $77
  31++EA8D 74 77
  32++EA8F 08 08 0C 68  	DB $08, $08, $0C, $68, $54, $55
  32++EA93 54 55
  33++EA95
  34++EA95              MissileVertSize: equ $ - MissileVertices
  35++EA95
  36++EA95
  37++EA95
  38++EA95 1F 21 00 04  MissileEdges:	DB $1F, $21, $00, $04
  39++EA99 1F 32 00 08  	DB $1F, $32, $00, $08
  40++EA9D 1F 30 00 0C  	DB $1F, $30, $00, $0C
  41++EAA1 1F 10 00 10  	DB $1F, $10, $00, $10
  42++EAA5 1F 24 04 08  	DB $1F, $24, $04, $08
  43++EAA9 1F 51 04 10  	DB $1F, $51, $04, $10
  44++EAAD 1F 60 0C 10  	DB $1F, $60, $0C, $10
  45++EAB1 1F 73 08 0C  	DB $1F, $73, $08, $0C
  46++EAB5 1F 74 08 14  	DB $1F, $74, $08, $14
  47++EAB9 1F 54 04 18  	DB $1F, $54, $04, $18
  48++EABD 1F 65 10 1C  	DB $1F, $65, $10, $1C
  49++EAC1 1F 76 0C 20  	DB $1F, $76, $0C, $20
  50++EAC5 1F 86 1C 20  	DB $1F, $86, $1C, $20
  51++EAC9 1F 87 14 20  	DB $1F, $87, $14, $20
  52++EACD 1F 84 14 18  	DB $1F, $84, $14, $18
  53++EAD1 1F 85 18 1C  	DB $1F, $85, $18, $1C
  54++EAD5 08 85 18 28  	DB $08, $85, $18, $28
  55++EAD9 08 87 14 24  	DB $08, $87, $14, $24
  56++EADD 08 87 20 30  	DB $08, $87, $20, $30
  57++EAE1 08 85 1C 2C  	DB $08, $85, $1C, $2C
  58++EAE5 08 74 24 3C  	DB $08, $74, $24, $3C
  59++EAE9 08 54 28 40  	DB $08, $54, $28, $40
  60++EAED 08 76 30 34  	DB $08, $76, $30, $34
  61++EAF1 08 65 2C 38  	DB $08, $65, $2C, $38
  62++EAF5
  63++EAF5              MissileEdgesSize: equ $ - MissileEdges
  64++EAF5
  65++EAF5
  66++EAF5              MissileEdgesCnt: equ MissileEdgesSize/4
  67++EAF5
  68++EAF5
  69++EAF5 9F 40 00 10  MissileNormals:	DB $9F, $40, $00, $10
  70++EAF9 5F 00 40 10  	DB $5F, $00, $40, $10
  71++EAFD 1F 40 00 10  	DB $1F, $40, $00, $10
  72++EB01 1F 00 40 10  	DB $1F, $00, $40, $10
  73++EB05 1F 20 00 00  	DB $1F, $20, $00, $00
  74++EB09 5F 00 20 00  	DB $5F, $00, $20, $00
  75++EB0D 9F 20 00 00  	DB $9F, $20, $00, $00
  76++EB11 1F 00 20 00  	DB $1F, $00, $20, $00
  77++EB15 3F 00 00 B0  	DB $3F, $00, $00, $B0
  78++EB19
  79++EB19
  80++EB19              MissileNormalsSize: equ $ - MissileNormals
  81++EB19              MissileLen: equ $ - Missile
  82++EB19
# file closed: ./Data/ships/Missile.asm
  92+ EB19                                      include "Data/ships/Monitor.asm"
# file opened: ./Data/ships/Monitor.asm
   1++EB19 04 36 00     Monitor:	            DB $04, $36, $00
   2++EB1C 98 EB                                DW MonitorEdges
   3++EB1E 5C                                   DB MonitorEdgesSize
   4++EB1F 00 2A                                DB $00, $2A
   5++EB21 66                                   DB MonitorVertSize
   6++EB22 17                                   DB MonitorEdgesCnt
   7++EB23 01 90                                DB $01, $90
   8++EB25 2C                                   DB MonitorNormalsSize
   9++EB26 28 84 10                             DB $28, $84, $10
  10++EB29 F4 EB                                DW MonitorNormals
  11++EB2B 00 37                                DB $00, $37
  12++EB2D 32 EB                                DW MonitorVertices
  13++EB2F 00 00                                DB 0,0                      ; Type and Tactics
  14++EB31 01                                   DB ShipCanAnger
  15++EB32
  16++EB32 00 0A 8C 1F  MonitorVertices:	    DB $00, $0A, $8C, $1F, $FF, $FF
  16++EB36 FF FF
  17++EB38 14 28 14 3F                          DB $14, $28, $14, $3F, $23, $01
  17++EB3C 23 01
  18++EB3E 14 28 14 BF                          DB $14, $28, $14, $BF, $50, $34
  18++EB42 50 34
  19++EB44 32 00 0A 1F                          DB $32, $00, $0A, $1F, $78, $12
  19++EB48 78 12
  20++EB4A 32 00 0A 9F                          DB $32, $00, $0A, $9F, $96, $45
  20++EB4E 96 45
  21++EB50 1E 04 3C 3F                          DB $1E, $04, $3C, $3F, $AA, $28
  21++EB54 AA 28
  22++EB56 1E 04 3C BF                          DB $1E, $04, $3C, $BF, $AA, $49
  22++EB5A AA 49
  23++EB5C 12 14 3C 3F                          DB $12, $14, $3C, $3F, $AA, $23
  23++EB60 AA 23
  24++EB62 12 14 3C BF                          DB $12, $14, $3C, $BF, $AA, $34
  24++EB66 AA 34
  25++EB68 00 14 3C 7F                          DB $00, $14, $3C, $7F, $AA, $89
  25++EB6C AA 89
  26++EB6E 00 28 0A 5F                          DB $00, $28, $0A, $5F, $89, $67
  26++EB72 89 67
  27++EB74 00 22 0A 0A                          DB $00, $22, $0A, $0A, $00, $00
  27++EB78 00 00
  28++EB7A 00 1A 32 0A                          DB $00, $1A, $32, $0A, $00, $00
  28++EB7E 00 00
  29++EB80 14 0A 3C 4A                          DB $14, $0A, $3C, $4A, $77, $77
  29++EB84 77 77
  30++EB86 0A 00 64 0A                          DB $0A, $00, $64, $0A, $77, $77
  30++EB8A 77 77
  31++EB8C 14 0A 3C CA                          DB $14, $0A, $3C, $CA, $66, $66
  31++EB90 66 66
  32++EB92 0A 00 64 8A                          DB $0A, $00, $64, $8A, $66, $66
  32++EB96 66 66
  33++EB98              MonitorVertSize:        equ $ - MonitorVertices
  34++EB98 1F 01 00 04  MonitorEdges:	        DB $1F, $01, $00, $04
  35++EB9C 1F 12 04 0C  	                    DB $1F, $12, $04, $0C
  36++EBA0 1F 23 04 1C                          DB $1F, $23, $04, $1C
  37++EBA4 1F 34 08 20                          DB $1F, $34, $08, $20
  38++EBA8 1F 45 08 10                          DB $1F, $45, $08, $10
  39++EBAC 1F 50 00 08                          DB $1F, $50, $00, $08
  40++EBB0 1F 03 04 08                          DB $1F, $03, $04, $08
  41++EBB4 1F 67 00 28                          DB $1F, $67, $00, $28
  42++EBB8 1F 78 0C 28                          DB $1F, $78, $0C, $28
  43++EBBC 1F 89 24 28                          DB $1F, $89, $24, $28
  44++EBC0 1F 96 10 28                          DB $1F, $96, $10, $28
  45++EBC4 1F 17 00 0C                          DB $1F, $17, $00, $0C
  46++EBC8 1F 28 0C 14                          DB $1F, $28, $0C, $14
  47++EBCC 1F 49 18 10                          DB $1F, $49, $18, $10
  48++EBD0 1F 56 10 00                          DB $1F, $56, $10, $00
  49++EBD4 1F 2A 1C 14                          DB $1F, $2A, $1C, $14
  50++EBD8 1F 3A 20 1C                          DB $1F, $3A, $20, $1C
  51++EBDC 1F 4A 20 18                          DB $1F, $4A, $20, $18
  52++EBE0 1F 8A 14 24                          DB $1F, $8A, $14, $24
  53++EBE4 1F 9A 18 24                          DB $1F, $9A, $18, $24
  54++EBE8 0A 00 2C 30                          DB $0A, $00, $2C, $30
  55++EBEC 0A 77 34 38                          DB $0A, $77, $34, $38
  56++EBF0 0A 66 3C 40                          DB $0A, $66, $3C, $40
  57++EBF4              MonitorEdgesSize:       equ $ - MonitorEdges
  58++EBF4              MonitorEdgesCnt:        equ MonitorEdgesSize/4
  59++EBF4 1F 00 3E 0B  MonitorNormals:	        DB $1F, $00, $3E, $0B
  60++EBF8 1F 2C 2B 0D                          DB $1F, $2C, $2B, $0D
  61++EBFC 3F 36 1C 10                          DB $3F, $36, $1C, $10
  62++EC00 3F 00 39 1C                          DB $3F, $00, $39, $1C
  63++EC04 BF 36 1C 10                          DB $BF, $36, $1C, $10
  64++EC08 9F 2C 2B 0D                          DB $9F, $2C, $2B, $0D
  65++EC0C DF 26 2F 12                          DB $DF, $26, $2F, $12
  66++EC10 5F 26 2F 12                          DB $5F, $26, $2F, $12
  67++EC14 7F 27 30 0D                          DB $7F, $27, $30, $0D
  68++EC18 FF 27 30 0D                          DB $FF, $27, $30, $0D
  69++EC1C 3F 00 00 40                          DB $3F, $00, $00, $40
  70++EC20              MonitorNormalsSize:     equ $ - MonitorNormals
  71++EC20              MonitorLen:             equ $ - Monitor
  72++EC20
# file closed: ./Data/ships/Monitor.asm
  93+ EC20                                      include "Data/ships/Moray.asm"
# file opened: ./Data/ships/Moray.asm
   1++EC20 01 03 84     Moray:	                DB $01, $03, $84
   2++EC23 8D EC                                DW MorayEdges
   3++EC25 4C                                   DB MorayEdgesSize
   4++EC26 00 1A                                DB $00, $1A
   5++EC28 54                                   DB MorayVertSize
   6++EC29 13                                   DB MorayEdgesCnt
   7++EC2A 00 32                                DB $00, $32
   8++EC2C 24                                   DB MorayNormalsSize
   9++EC2D 28 59 19                             DB $28, $59, $19
  10++EC30 D9 EC                                DW MorayNormals
  11++EC32 02 2A                                DB $02, $2A
  12++EC34 39 EC                                DW MorayVertices
  13++EC36 00 00                                DB 0,0                      ; Type and Tactics
  14++EC38 01                                   DB ShipCanAnger
  15++EC39
  16++EC39 0F 00 41 1F  MorayVertices:	        DB $0F, $00, $41, $1F, $02, $78
  16++EC3D 02 78
  17++EC3F 0F 00 41 9F                          DB $0F, $00, $41, $9F, $01, $67
  17++EC43 01 67
  18++EC45 00 12 28 31                          DB $00, $12, $28, $31, $FF, $FF
  18++EC49 FF FF
  19++EC4B 3C 00 00 9F                          DB $3C, $00, $00, $9F, $13, $66
  19++EC4F 13 66
  20++EC51 3C 00 00 1F                          DB $3C, $00, $00, $1F, $25, $88
  20++EC55 25 88
  21++EC57 1E 1B 0A 78                          DB $1E, $1B, $0A, $78, $45, $78
  21++EC5B 45 78
  22++EC5D 1E 1B 0A F8                          DB $1E, $1B, $0A, $F8, $34, $67
  22++EC61 34 67
  23++EC63 09 04 19 E7                          DB $09, $04, $19, $E7, $44, $44
  23++EC67 44 44
  24++EC69 09 04 19 67                          DB $09, $04, $19, $67, $44, $44
  24++EC6D 44 44
  25++EC6F 00 12 10 67                          DB $00, $12, $10, $67, $44, $44
  25++EC73 44 44
  26++EC75 0D 03 31 05                          DB $0D, $03, $31, $05, $00, $00
  26++EC79 00 00
  27++EC7B 06 00 41 05                          DB $06, $00, $41, $05, $00, $00
  27++EC7F 00 00
  28++EC81 0D 03 31 85                          DB $0D, $03, $31, $85, $00, $00
  28++EC85 00 00
  29++EC87 06 00 41 85                          DB $06, $00, $41, $85, $00, $00
  29++EC8B 00 00
  30++EC8D              MorayVertSize:          equ $ - MorayVertices
  31++EC8D 1F 07 00 04  MorayEdges:	            DB $1F, $07, $00, $04
  32++EC91 1F 16 04 0C                          DB $1F, $16, $04, $0C
  33++EC95 18 36 0C 18                          DB $18, $36, $0C, $18
  34++EC99 18 47 14 18                          DB $18, $47, $14, $18
  35++EC9D 18 58 10 14                          DB $18, $58, $10, $14
  36++ECA1 1F 28 00 10                          DB $1F, $28, $00, $10
  37++ECA5 0F 67 04 18                          DB $0F, $67, $04, $18
  38++ECA9 0F 78 00 14                          DB $0F, $78, $00, $14
  39++ECAD 0F 02 00 08                          DB $0F, $02, $00, $08
  40++ECB1 0F 01 04 08                          DB $0F, $01, $04, $08
  41++ECB5 11 13 08 0C                          DB $11, $13, $08, $0C
  42++ECB9 11 25 08 10                          DB $11, $25, $08, $10
  43++ECBD 0D 45 08 14                          DB $0D, $45, $08, $14
  44++ECC1 0D 34 08 18                          DB $0D, $34, $08, $18
  45++ECC5 05 44 1C 20                          DB $05, $44, $1C, $20
  46++ECC9 07 44 1C 24                          DB $07, $44, $1C, $24
  47++ECCD 07 44 20 24                          DB $07, $44, $20, $24
  48++ECD1 05 00 28 2C                          DB $05, $00, $28, $2C
  49++ECD5 05 00 30 34                          DB $05, $00, $30, $34
  50++ECD9              MorayEdgesSize:         equ $ - MorayEdges
  51++ECD9              MorayEdgesCnt:          equ MorayEdgesSize/4
  52++ECD9 1F 00 2B 07  MorayNormals:	        DB $1F, $00, $2B, $07
  53++ECDD 9F 0A 31 07                          DB $9F, $0A, $31, $07
  54++ECE1 1F 0A 31 07                          DB $1F, $0A, $31, $07
  55++ECE5 F8 3B 1C 65                          DB $F8, $3B, $1C, $65
  56++ECE9 78 00 34 4E                          DB $78, $00, $34, $4E
  57++ECED 78 3B 1C 65                          DB $78, $3B, $1C, $65
  58++ECF1 DF 48 63 32                          DB $DF, $48, $63, $32
  59++ECF5 5F 00 53 1E                          DB $5F, $00, $53, $1E
  60++ECF9 5F 48 63 32                          DB $5F, $48, $63, $32
  61++ECFD
  62++ECFD              MorayNormalsSize:       equ $ - MorayNormals
  63++ECFD              MorayLen:               equ $ - Moray
  64++ECFD
# file closed: ./Data/ships/Moray.asm
  94+ ECFD                                      include "Data/ships/Ophidian.asm"
# file opened: ./Data/ships/Ophidian.asm
   1++ECFD 02 0E 88     Ophidian:	            DB $02, $0E, $88
   2++ED00 8E ED                                DW OphidianEdges
   3++ED02 78                                   DB OphidianEdgesSize
   4++ED03 00 3C                                DB $00, $3C
   5++ED05 78                                   DB OphidianVertSize
   6++ED06 1E                                   DB OphidianEdgesCnt
   7++ED07 00 32                                DB $00, $32
   8++ED09 30                                   DB OphidianNormalsSize
   9++ED0A 14 40 22                             DB $14, $40, $22
  10++ED0D 06 EE                                DW OphidianNormals
  11++ED0F 01 1A                                DB $01, $1A
  12++ED11 16 ED                                DW OphidianVertices
  13++ED13 00 00                                DB 0,0                      ; Type and Tactics
  14++ED15 01                                   DB ShipCanAnger
  15++ED16
  16++ED16 14 00 46 9F  OphidianVertices:	    DB $14, $00, $46, $9F, $68, $02
  16++ED1A 68 02
  17++ED1C 14 00 46 1F                          DB $14, $00, $46, $1F, $67, $01
  17++ED20 67 01
  18++ED22 00 0A 28 1F                          DB $00, $0A, $28, $1F, $22, $01
  18++ED26 22 01
  19++ED28 1E 00 1E 9F                          DB $1E, $00, $1E, $9F, $8A, $24
  19++ED2C 8A 24
  20++ED2E 1E 00 1E 1F                          DB $1E, $00, $1E, $1F, $79, $13
  20++ED32 79 13
  21++ED34 00 10 0A 1F                          DB $00, $10, $0A, $1F, $FF, $FF
  21++ED38 FF FF
  22++ED3A 14 0A 32 3F                          DB $14, $0A, $32, $3F, $9B, $35
  22++ED3E 9B 35
  23++ED40 14 0A 32 BF                          DB $14, $0A, $32, $BF, $AB, $45
  23++ED44 AB 45
  24++ED46 1E 00 32 BF                          DB $1E, $00, $32, $BF, $BB, $4A
  24++ED4A BB 4A
  25++ED4C 28 00 32 B0                          DB $28, $00, $32, $B0, $FF, $FF
  25++ED50 FF FF
  26++ED52 1E 00 1E B0                          DB $1E, $00, $1E, $B0, $FF, $FF
  26++ED56 FF FF
  27++ED58 1E 00 32 3F                          DB $1E, $00, $32, $3F, $BB, $39
  27++ED5C BB 39
  28++ED5E 28 00 32 30                          DB $28, $00, $32, $30, $FF, $FF
  28++ED62 FF FF
  29++ED64 1E 00 1E 30                          DB $1E, $00, $1E, $30, $FF, $FF
  29++ED68 FF FF
  30++ED6A 00 0A 32 7F                          DB $00, $0A, $32, $7F, $BB, $9A
  30++ED6E BB 9A
  31++ED70 00 10 14 5F                          DB $00, $10, $14, $5F, $FF, $FF
  31++ED74 FF FF
  32++ED76 0A 04 32 30                          DB $0A, $04, $32, $30, $BB, $BB
  32++ED7A BB BB
  33++ED7C 0A 02 32 70                          DB $0A, $02, $32, $70, $BB, $BB
  33++ED80 BB BB
  34++ED82 0A 02 32 F0                          DB $0A, $02, $32, $F0, $BB, $BB
  34++ED86 BB BB
  35++ED88 0A 04 32 B0                          DB $0A, $04, $32, $B0, $BB, $BB
  35++ED8C BB BB
  36++ED8E
  37++ED8E              OphidianVertSize:       equ $ - OphidianVertices
  38++ED8E 1F 06 00 04  OphidianEdges:	        DB $1F, $06, $00, $04
  39++ED92 1F 01 04 08                          DB $1F, $01, $04, $08
  40++ED96 1F 02 00 08                          DB $1F, $02, $00, $08
  41++ED9A 1F 12 08 14                          DB $1F, $12, $08, $14
  42++ED9E 1F 13 10 14                          DB $1F, $13, $10, $14
  43++EDA2 1F 24 0C 14                          DB $1F, $24, $0C, $14
  44++EDA6 1F 35 14 18                          DB $1F, $35, $14, $18
  45++EDAA 1F 45 14 1C                          DB $1F, $45, $14, $1C
  46++EDAE 1F 28 00 0C                          DB $1F, $28, $00, $0C
  47++EDB2 1F 17 04 10                          DB $1F, $17, $04, $10
  48++EDB6 1F 39 10 2C                          DB $1F, $39, $10, $2C
  49++EDBA 1F 4A 0C 20                          DB $1F, $4A, $0C, $20
  50++EDBE 1F 67 04 3C                          DB $1F, $67, $04, $3C
  51++EDC2 1F 68 00 3C                          DB $1F, $68, $00, $3C
  52++EDC6 1F 79 10 3C                          DB $1F, $79, $10, $3C
  53++EDCA 1F 8A 0C 3C                          DB $1F, $8A, $0C, $3C
  54++EDCE 1F 9A 38 3C                          DB $1F, $9A, $38, $3C
  55++EDD2 1F 5B 18 1C                          DB $1F, $5B, $18, $1C
  56++EDD6 1F 3B 18 2C                          DB $1F, $3B, $18, $2C
  57++EDDA 1F 4B 1C 20                          DB $1F, $4B, $1C, $20
  58++EDDE 1F 9B 2C 38                          DB $1F, $9B, $2C, $38
  59++EDE2 1F AB 20 38                          DB $1F, $AB, $20, $38
  60++EDE6 10 BB 40 44                          DB $10, $BB, $40, $44
  61++EDEA 10 BB 44 48                          DB $10, $BB, $44, $48
  62++EDEE 10 BB 48 4C                          DB $10, $BB, $48, $4C
  63++EDF2 10 BB 4C 40                          DB $10, $BB, $4C, $40
  64++EDF6 10 39 30 34                          DB $10, $39, $30, $34
  65++EDFA 10 39 2C 30                          DB $10, $39, $2C, $30
  66++EDFE 10 4A 28 24                          DB $10, $4A, $28, $24
  67++EE02 10 4A 24 20                          DB $10, $4A, $24, $20
  68++EE06              OphidianEdgesSize:      equ $ - OphidianEdges
  69++EE06              OphidianEdgesCnt:       equ OphidianEdgesSize/4
  70++EE06
  71++EE06 1F 00 25 0C  OphidianNormals:	    DB $1F, $00, $25, $0C
  72++EE0A 1F 0B 1C 05                          DB $1F, $0B, $1C, $05
  73++EE0E 9F 0B 1C 05                          DB $9F, $0B, $1C, $05
  74++EE12 1F 10 22 02                          DB $1F, $10, $22, $02
  75++EE16 9F 10 22 02                          DB $9F, $10, $22, $02
  76++EE1A 3F 00 25 03                          DB $3F, $00, $25, $03
  77++EE1E 5F 00 1F 0A                          DB $5F, $00, $1F, $0A
  78++EE22 5F 0A 14 02                          DB $5F, $0A, $14, $02
  79++EE26 DF 0A 14 02                          DB $DF, $0A, $14, $02
  80++EE2A 7F 12 20 02                          DB $7F, $12, $20, $02
  81++EE2E FF 12 20 02                          DB $FF, $12, $20, $02
  82++EE32 3F 00 00 25                          DB $3F, $00, $00, $25
  83++EE36
  84++EE36              OphidianNormalsSize:    equ $ - OphidianNormals
  85++EE36              OphidianLen:            equ $ - Ophidian
  86++EE36
# file closed: ./Data/ships/Ophidian.asm
  95+ EE36                                      include "Data/ships/Plate.asm"
# file opened: ./Data/ships/Plate.asm
   1++EE36 80 00 64     Plate:	                DB $80, $00, $64
   2++EE39 61 EE                                DW PlateEdges
   3++EE3B 10                                   DB PlateEdgesSize
   4++EE3C 00 0A                                DB $00, $0A
   5++EE3E 12                                   DB PlateVertSize
   6++EE3F 04                                   DB PlateEdgesCnt
   7++EE40 00 00                                DB $00, $00
   8++EE42 04                                   DB PlateNormalsSize
   9++EE43 05 10 10                             DB $05, $10, $10
  10++EE46 71 EE                                DW PlateNormals
  11++EE48 03 00                                DB $03, $00
  12++EE4A 4F EE                                DW PlateVertices
  13++EE4C 00 00                                DB 0,0                      ; Type and Tactics
  14++EE4E 01                                   DB ShipCanAnger
  15++EE4F
  16++EE4F
  17++EE4F 0F 16 09 FF  PlateVertices:	DB $0F, $16, $09, $FF, $FF, $FF
  17++EE53 FF FF
  18++EE55 0F 26 09 BF  	DB $0F, $26, $09, $BF, $FF, $FF
  18++EE59 FF FF
  19++EE5B 13 20 0B 14  	DB $13, $20, $0B, $14, $FF, $FF
  19++EE5F FF FF
  20++EE61
  21++EE61              PlateVertSize: equ $ - PlateVertices
  22++EE61
  23++EE61
  24++EE61
  25++EE61 1F FF 00 04  PlateEdges:	DB $1F, $FF, $00, $04
  26++EE65 10 FF 04 08  	DB $10, $FF, $04, $08
  27++EE69 14 FF 08 0C  	DB $14, $FF, $08, $0C
  28++EE6D 10 FF 0C 00  	DB $10, $FF, $0C, $00
  29++EE71
  30++EE71              PlateEdgesSize: equ $ - PlateEdges
  31++EE71
  32++EE71
  33++EE71              PlateEdgesCnt: equ PlateEdgesSize/4
  34++EE71
  35++EE71
  36++EE71 00 00 00 00  PlateNormals:	DB $00, $00, $00, $00
  37++EE75
  38++EE75
  39++EE75              PlateNormalsSize: equ $ - PlateNormals
  40++EE75              PlateLen: equ $ - Plate
  41++EE75
# file closed: ./Data/ships/Plate.asm
  96+ EE75                                      include "Data/ships/Python.asm"
# file opened: ./Data/ships/Python.asm
   1++EE75              ;\ -> &5BA1 \ Python = Type 12
   2++EE75 05 00 19     Python:                 DB $05, $00, $19
   3++EE78 D0 EE                                DW PythonEdges
   4++EE7A 68                                   DB PythonEdgesSize
   5++EE7B 00 2A                                DB $00,$2A
   6++EE7D 42                                   DB PythonVertSize
   7++EE7E 1A                                   DB PythonEdgesCnt
   8++EE7F 00 00                                DB $00,$00
   9++EE81 34                                   DB PythonNormalsSize
  10++EE82 28 FA 14                             DB $28,$FA,$14
  11++EE85 38 EF                                DW PythonNormals
  12++EE87 00 1B                                DB $00, $1B
  13++EE89 8E EE                                DW PythonVertices
  14++EE8B 00 00                                DB 0,0                      ; Type and Tactics
  15++EE8D 01                                   DB ShipCanAnger
  16++EE8E
  17++EE8E 00 00 E0 1F  PythonVertices:         DB $00, $00, $E0, $1F, $10, $32
  17++EE92 10 32
  18++EE94 00 30 30 1E                          DB $00, $30, $30, $1E, $10, $54
  18++EE98 10 54
  19++EE9A 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  19++EE9E FF FF
  20++EEA0 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  20++EEA4 FF FF
  21++EEA6 00 30 20 3E                          DB $00, $30, $20, $3E, $54, $98
  21++EEAA 54 98
  22++EEAC 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  22++EEB0 89 CC
  23++EEB2 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  23++EEB6 B8 CC
  24++EEB8 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  24++EEBC A9 CC
  25++EEBE 00 30 30 5E                          DB $00, $30, $30, $5E, $32, $76
  25++EEC2 32 76
  26++EEC4 00 30 20 7E                          DB $00, $30, $20, $7E, $76, $BA
  26++EEC8 76 BA
  27++EECA 00 18 70 7E                          DB $00, $18, $70, $7E, $BA, $CC
  27++EECE BA CC
  28++EED0              PythonVertSize          equ $  - PythonVertices
  29++EED0 1E 32 00 20  PythonEdges:            DB $1E, $32, $00, $20, $1F, $20, $00, $0C
  29++EED4 1F 20 00 0C
  30++EED8 1F 31 00 08                          DB $1F, $31, $00, $08, $1E, $10, $00, $04
  30++EEDC 1E 10 00 04
  31++EEE0 1D 59 08 10                          DB $1D, $59, $08, $10, $1D, $51, $04, $08
  31++EEE4 1D 51 04 08
  32++EEE8 1D 37 08 20                          DB $1D, $37, $08, $20, $1D, $40, $04, $0C
  32++EEEC 1D 40 04 0C
  33++EEF0 1D 62 0C 20                          DB $1D, $62, $0C, $20, $1D, $A7, $08, $24
  33++EEF4 1D A7 08 24
  34++EEF8 1D 84 0C 10                          DB $1D, $84, $0C, $10, $1D, $B6, $0C, $24
  34++EEFC 1D B6 0C 24
  35++EF00 05 88 0C 14                          DB $05, $88, $0C, $14, $05, $BB, $0C, $28
  35++EF04 05 BB 0C 28
  36++EF08 05 99 08 14                          DB $05, $99, $08, $14, $05, $AA, $08, $28
  36++EF0C 05 AA 08 28
  37++EF10 1F A9 08 1C                          DB $1F, $A9, $08, $1C, $1F, $B8, $0C, $18
  37++EF14 1F B8 0C 18
  38++EF18 1F C8 14 18                          DB $1F, $C8, $14, $18, $1F, $C9, $14, $1C
  38++EF1C 1F C9 14 1C
  39++EF20 1D AC 1C 28                          DB $1D, $AC, $1C, $28, $1D, $CB, $18, $28
  39++EF24 1D CB 18 28
  40++EF28 1D 98 10 14                          DB $1D, $98, $10, $14, $1D, $BA, $24, $28
  40++EF2C 1D BA 24 28
  41++EF30 1D 54 04 10                          DB $1D, $54, $04, $10, $1D, $76, $20, $24
  41++EF34 1D 76 20 24
  42++EF38              PythonEdgesSize         equ $  - PythonEdges
  43++EF38              PythonEdgesCnt          equ PythonEdgesSize/4
  44++EF38 9E 1B 28 0B  PythonNormals           DB $9E, $1B, $28, $0B, $1E, $1B, $28, $0B
  44++EF3C 1E 1B 28 0B
  45++EF40 DE 1B 28 0B                          DB $DE, $1B, $28, $0B, $5E, $1B, $28, $0B
  45++EF44 5E 1B 28 0B
  46++EF48 9E 13 26 00                          DB $9E, $13, $26, $00, $1E, $13, $26, $00
  46++EF4C 1E 13 26 00
  47++EF50 DE 13 26 00                          DB $DE, $13, $26, $00, $5E, $13, $26, $00
  47++EF54 5E 13 26 00
  48++EF58 BE 19 25 0B                          DB $BE, $19, $25, $0B, $3E, $19, $25, $0B
  48++EF5C 3E 19 25 0B
  49++EF60 7E 19 25 0B                          DB $7E, $19, $25, $0B, $FE, $19, $25, $0B
  49++EF64 FE 19 25 0B
  50++EF68 3E 00 00 70                          DB $3E, $00, $00, $70
  51++EF6C              PythonNormalsSize       equ $  - PythonNormals
  52++EF6C              PythonLen               equ $  - Python
  53++EF6C
# file closed: ./Data/ships/Python.asm
  97+ EF6C                                      include "Data/ships/Python_P.asm"
# file opened: ./Data/ships/Python_P.asm
   1++EF6C 02 19 00     Python_P:	            DB $02, $19, $00
   2++EF6F C7 EF                                DW Python_PEdges
   3++EF71 68                                   DB Python_PEdgesSize
   4++EF72 00 2A                                DB $00, $2A
   5++EF74 42                                   DB Python_PVertSize
   6++EF75 1A                                   DB Python_PEdgesCnt
   7++EF76 00 C8                                DB $00, $C8
   8++EF78 34                                   DB Python_PNormalsSize
   9++EF79 28 FA 14                             DB $28, $FA, $14
  10++EF7C 2F F0                                DW Python_PNormals
  11++EF7E 00 1B                                DB $00, $1B
  12++EF80 85 EF                                DW Python_PVertices
  13++EF82 00 00                                DB 0,0                      ; Type and Tactics
  14++EF84 01                                   DB ShipCanAnger
  15++EF85
  16++EF85 00 00 E0 1F  Python_PVertices:	DB $00, $00, $E0, $1F, $10, $32
  16++EF89 10 32
  17++EF8B 00 30 30 1F  	DB $00, $30, $30, $1F, $10, $54
  17++EF8F 10 54
  18++EF91 60 00 10 3F  	DB $60, $00, $10, $3F, $FF, $FF
  18++EF95 FF FF
  19++EF97 60 00 10 BF  	DB $60, $00, $10, $BF, $FF, $FF
  19++EF9B FF FF
  20++EF9D 00 30 20 3F  	DB $00, $30, $20, $3F, $54, $98
  20++EFA1 54 98
  21++EFA3 00 18 70 3F  	DB $00, $18, $70, $3F, $89, $CC
  21++EFA7 89 CC
  22++EFA9 30 00 70 BF  	DB $30, $00, $70, $BF, $B8, $CC
  22++EFAD B8 CC
  23++EFAF 30 00 70 3F  	DB $30, $00, $70, $3F, $A9, $CC
  23++EFB3 A9 CC
  24++EFB5 00 30 30 5F  	DB $00, $30, $30, $5F, $32, $76
  24++EFB9 32 76
  25++EFBB 00 30 20 7F  	DB $00, $30, $20, $7F, $76, $BA
  25++EFBF 76 BA
  26++EFC1 00 18 70 7F  	DB $00, $18, $70, $7F, $BA, $CC
  26++EFC5 BA CC
  27++EFC7
  28++EFC7              Python_PVertSize: equ $ - Python_PVertices
  29++EFC7
  30++EFC7
  31++EFC7
  32++EFC7 1F 32 00 20  Python_PEdges:	DB $1F, $32, $00, $20
  33++EFCB 1F 20 00 0C  	DB $1F, $20, $00, $0C
  34++EFCF 1F 31 00 08  	DB $1F, $31, $00, $08
  35++EFD3 1F 10 00 04  	DB $1F, $10, $00, $04
  36++EFD7 1F 59 08 10  	DB $1F, $59, $08, $10
  37++EFDB 1F 51 04 08  	DB $1F, $51, $04, $08
  38++EFDF 1F 37 08 20  	DB $1F, $37, $08, $20
  39++EFE3 1F 40 04 0C  	DB $1F, $40, $04, $0C
  40++EFE7 1F 62 0C 20  	DB $1F, $62, $0C, $20
  41++EFEB 1F A7 08 24  	DB $1F, $A7, $08, $24
  42++EFEF 1F 84 0C 10  	DB $1F, $84, $0C, $10
  43++EFF3 1F B6 0C 24  	DB $1F, $B6, $0C, $24
  44++EFF7 07 88 0C 14  	DB $07, $88, $0C, $14
  45++EFFB 07 BB 0C 28  	DB $07, $BB, $0C, $28
  46++EFFF 07 99 08 14  	DB $07, $99, $08, $14
  47++F003 07 AA 08 28  	DB $07, $AA, $08, $28
  48++F007 1F A9 08 1C  	DB $1F, $A9, $08, $1C
  49++F00B 1F B8 0C 18  	DB $1F, $B8, $0C, $18
  50++F00F 1F C8 14 18  	DB $1F, $C8, $14, $18
  51++F013 1F C9 14 1C  	DB $1F, $C9, $14, $1C
  52++F017 1F AC 1C 28  	DB $1F, $AC, $1C, $28
  53++F01B 1F CB 18 28  	DB $1F, $CB, $18, $28
  54++F01F 1F 98 10 14  	DB $1F, $98, $10, $14
  55++F023 1F BA 24 28  	DB $1F, $BA, $24, $28
  56++F027 1F 54 04 10  	DB $1F, $54, $04, $10
  57++F02B 1F 76 20 24  	DB $1F, $76, $20, $24
  58++F02F
  59++F02F              Python_PEdgesSize: equ $ - Python_PEdges
  60++F02F
  61++F02F
  62++F02F              Python_PEdgesCnt: equ Python_PEdgesSize/4
  63++F02F
  64++F02F
  65++F02F 9F 1B 28 0B  Python_PNormals:	DB $9F, $1B, $28, $0B
  66++F033 1F 1B 28 0B  	DB $1F, $1B, $28, $0B
  67++F037 DF 1B 28 0B  	DB $DF, $1B, $28, $0B
  68++F03B 5F 1B 28 0B  	DB $5F, $1B, $28, $0B
  69++F03F 9F 13 26 00  	DB $9F, $13, $26, $00
  70++F043 1F 13 26 00  	DB $1F, $13, $26, $00
  71++F047 DF 13 26 00  	DB $DF, $13, $26, $00
  72++F04B 5F 13 26 00  	DB $5F, $13, $26, $00
  73++F04F BF 19 25 0B  	DB $BF, $19, $25, $0B
  74++F053 3F 19 25 0B  	DB $3F, $19, $25, $0B
  75++F057 7F 19 25 0B  	DB $7F, $19, $25, $0B
  76++F05B FF 19 25 0B  	DB $FF, $19, $25, $0B
  77++F05F 3F 00 00 70  	DB $3F, $00, $00, $70
  78++F063
  79++F063
  80++F063              Python_PNormalsSize: equ $ - Python_PNormals
  81++F063              Python_PLen: equ $ - Python_P
  82++F063
# file closed: ./Data/ships/Python_P.asm
  98+ F063
# file closed: ./Data/ShipModelMetaData2.asm
1355  F063              ; Bank 68  ------------------------------------------------------------------------------------------------------------------------
1356  F063                  SLOT    ShipModelsAddr
1357  F063                  PAGE    BankShipModels3
1358  F063              	ORG     ShipModelsAddr, BankShipModels3
1359  E000
1360  E000                  INCLUDE "./Data/ShipBank3Label.asm"
# file opened: ./Data/ShipBank3Label.asm
   1+ E000 53 68 69 70  ShipBank3Label:         DB  "ShipBank3      "
   1+ E004 42 61 6E 6B
   1+ E008 33 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank3Label.asm
1361  E00F              GetShipBank3Id:         MGetShipBankId ShipBankTable3
1361  E00F 06 00       >                        ld      b,0
1361  E011 4F          >                        ld      c,a                                 ; c= original ship id
1361  E012 CB 3F       >.ShiftLoop:             srl     a
1361  E014 CB 3F       >                        srl     a
1361  E016 CB 3F       >                        srl     a
1361  E018 CB 3F       >                        srl     a                                   ; divide by 16
1361  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1361  E01B 79          >                        ld      a,c
1361  E01C 50          >                        ld      d,b
1361  E01D 1E 10       >                        ld      e,16
1361  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1361  E021 93          >                        sub     e                                   ; a= actual model id now
1361  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1361  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1361  E024 7A          >                        ld      a,d                                 ; a = bank number
1361  E025             >;.. Now b = bank and a = adjusted ship nbr
1361  E025 21 62 E0    >                        ld      hl,ShipBankTable3                        ; a= bank index
1361  E028 ED 31       >                        add     hl,a
1361  E02A ED 31       >                        add     hl,a
1361  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1361  E02D             >                        ClearCarryFlag
1361  E02D B7          >                        or a
1361  E02E C9          >                        ret
1362  E02F              CopyVertsToUniv3:       McopyVertsToUniverse
1362  E02F 2A 20 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1362  E032 11 25 C3    >                        ld          de,UBnkHullVerticies
1362  E035 06 00       >                        ld          b,0
1362  E037 3A 14 C3    >                        ld			a,(VertexCtX6Addr)
1362  E03A 4F          >                        ld          c,a
1362  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1362  E03C CD 66 96    >                        call        memcopy_dma
1362  E03F C9          >                        ret
1363  E040              CopyEdgesToUniv3:       McopyEdgesToUniverse
1363  E040 2A 0F C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1363  E043 11 51 C4    >                        ld          de,UBnkHullEdges
1363  E046 06 00       >                        ld          b,0
1363  E048 3A 11 C3    >                        ld			a,(LineX4Addr)
1363  E04B 4F          >                        ld          c,a
1363  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1363  E04D CD 66 96    >                        call        memcopy_dma
1363  E050 C9          >                        ret
1364  E051              CopyNormsToUniv3:       McopyNormsToUniverse
1364  E051 2A 1C C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1364  E054 11 01 C9    >                        ld          de,UBnkHullNormals
1364  E057 06 00       >                        ld          b,0
1364  E059 3A 18 C3    >                        ld          a,(FaceCtX4Addr)
1364  E05C 4F          >                        ld          c,a
1364  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1364  E05E CD 66 96    >                        call        memcopy_dma
1364  E061 C9          >                        ret
1365  E062              ShipBankTable3:         MShipBankTable
1365  E062 3B 00       >                        DW      BankShipModels1
1365  E064 43 00       >                        DW      BankShipModels2
1365  E066 44 00       >                        DW      BankShipModels3
1365  E068 45 00       >                        DW      BankShipModels4
1366  E06A              CopyShipToUniverse3     MCopyShipToUniverse     BankShipModels3
1366  E06A 21 2D C0    >                        ld          hl,UBnkShipModelBank
1366  E06D 36 44       >                        ld          (hl),BankShipModels3
1366  E06F 32 2E C0    >                        ld          (UBnkShipModelNbr),a
1366  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1366  E075 ED 31       >                        add         hl,a
1366  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1366  E079 4E          >                        ld          c,(hl)
1366  E07A 23          >                        inc         hl
1366  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1366  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1366  E07F ED 31       >                        add         hl,a
1366  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1366  E083 7E          >                        ld          a,(hl)
1366  E084 23          >                        inc         hl
1366  E085 66          >                        ld          h,(hl)
1366  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1366  E087 11 0C C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1366  E08A 01 19 00    >                        ld          bc,ShipDataLength
1366  E08D ED B0       >                        ldir
1366  E08F CD 2F E0    >                        call        CopyVertsToUniv
1366  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1366  E095 CD 51 E0    >                        call        CopyNormsToUniv
1366  E098 C9          >                        ret
1367  E099              CopyBodyToUniverse3:    MCopyBodyToUniverse     CopyShipToUniverse3
1367  E099 3E 0D       >                        ld          a,13
1367  E09B CD 6A E0    >                        call        CopyShipToUniverse3
1367  E09E C9          >                        ret
1368  E09F                  INCLUDE "./Data/ShipModelMetaData3.asm"
# file opened: ./Data/ShipModelMetaData3.asm
   1+ E09F 3F E1        ShipModelTable3:         DW Rock_Hermit                             ;32  $30
   2+ E0A1 1A E2                                 DW ShuttleType9                            ;33  $31
   3+ E0A3 51 E3                                 DW Shuttle_Mk_2                            ;34  $32
   4+ E0A5 74 E4                                 DW Sidewinder                              ;35  $33
   5+ E0A7 21 E5                                 DW Splinter                                ;36  $34
   6+ E0A9 7A E5                                 DW TestVector                              ;37  $35
   7+ E0AB DD E5                                 DW Thargoid                                ;38  $36
   8+ E0AD FE E6                                 DW Thargon                                 ;39  $37
   9+ E0AF AB E7                                 DW TransportType10                         ;40  $38
  10+ E0B1 92 E9                                 DW Viper                                   ;41  $39
  11+ E0B3 71 EA                                 DW Worm                                    ;42  $3A
  12+ E0B5 26 EB                                 DW Rattler                                 ;43  $3B
  13+ E0B7 00 00                                 DW 0                                       ;44  $3C
  14+ E0B9 00 00                                 DW 0                                       ;45  $3D
  15+ E0BB 00 00                                 DW 0                                       ;46  $3E
  16+ E0BD 00 00                                 DW 0                                       ;47  $3F
  17+ E0BF 58 E1        ShipVertexTable3:        DW Rock_HermitVertices                     ;32  $30
  18+ E0C1 33 E2                                 DW ShuttleType9Vertices                    ;33  $31
  19+ E0C3 6A E3                                 DW Shuttle_Mk_2Vertices                    ;34  $32
  20+ E0C5 8D E4                                 DW SidewinderVertices                      ;35  $33
  21+ E0C7 3A E5                                 DW SplinterVertices                        ;36  $34
  22+ E0C9 93 E5                                 DW TestVectorVertices                      ;37  $35
  23+ E0CB F6 E5                                 DW ThargoidVertices                        ;38  $36
  24+ E0CD 17 E7                                 DW ThargonVertices                         ;39  $37
  25+ E0CF C4 E7                                 DW TransportType10Vertices                 ;40  $38
  26+ E0D1 AB E9                                 DW ViperVertices                           ;41  $39
  27+ E0D3 8A EA                                 DW WormVertices                            ;42  $3A
  28+ E0D5 3F EB                                 DW RattlerVertices                         ;43  $3B
  29+ E0D7 00 00                                 DW 0                                       ;44  $3C
  30+ E0D9 00 00                                 DW 0                                       ;45  $3D
  31+ E0DB 00 00                                 DW 0                                       ;46  $3E
  32+ E0DD 00 00                                 DW 0                                       ;47  $3F
  33+ E0DF
  34+ E0DF 8E E1        ShipEdgeTable3:          DW Rock_HermitEdges                        ;32  $30
  35+ E0E1 A5 E2                                 DW ShuttleType9Edges                       ;33  $31
  36+ E0E3 D0 E3                                 DW Shuttle_Mk_2Edges                       ;34  $32
  37+ E0E5 C9 E4                                 DW SidewinderEdges                         ;35  $33
  38+ E0E7 52 E5                                 DW SplinterEdges                           ;36  $34
  39+ E0E9 BD E5                                 DW TestVectorEdges                         ;37  $35
  40+ E0EB 6E E6                                 DW ThargoidEdges                           ;38  $36
  41+ E0ED 53 E7                                 DW ThargonEdges                            ;39  $37
  42+ E0EF A2 E8                                 DW TransportType10Edges                    ;40  $38
  43+ E0F1 05 EA                                 DW ViperEdges                              ;41  $39
  44+ E0F3 C6 EA                                 DW WormEdges                               ;42  $3A
  45+ E0F5 99 EB                                 DW RattlerEdges                            ;43  $3B
  46+ E0F7 00 00                                 DW 0                                       ;44  $3C
  47+ E0F9 00 00                                 DW 0                                       ;45  $3D
  48+ E0FB 00 00                                 DW 0                                       ;46  $3E
  49+ E0FD 00 00                                 DW 0                                       ;47  $3F
  50+ E0FF
  51+ E0FF E2 E1        ShipNormalTable3:        DW Rock_HermitNormals                      ;32  $30
  52+ E101 1D E3                                 DW ShuttleType9Normals                     ;33  $31
  53+ E103 40 E4                                 DW Shuttle_Mk_2Normals                     ;34  $32
  54+ E105 05 E5                                 DW SidewinderNormals                       ;35  $33
  55+ E107 6A E5                                 DW SplinterNormals                         ;36  $34
  56+ E109 CD E5                                 DW TestVectorNormals                       ;37  $35
  57+ E10B D6 E6                                 DW ThargoidNormals                         ;38  $36
  58+ E10D 8F E7                                 DW ThargonNormals                          ;39  $37
  59+ E10F 5A E9                                 DW TransportType10Normals                  ;40  $38
  60+ E111 55 EA                                 DW ViperNormals                            ;41  $39
  61+ E113 06 EB                                 DW WormNormals                             ;42  $3A
  62+ E115 99 EB                                 DW RattlerEdges                            ;43  $3B
  63+ E117 00 00                                 DW 0                                       ;44  $3C
  64+ E119 00 00                                 DW 0                                       ;45  $3D
  65+ E11B 00 00                                 DW 0                                       ;46  $3E
  66+ E11D 00 00                                 DW 0                                       ;47  $3F
  67+ E11F
  68+ E11F DB 00        ShipModelSizeTable3:     DW Rock_HermitLen                          ;32  $30
  69+ E121 37 01                                 DW ShuttleType9Len                         ;33  $31
  70+ E123 23 01                                 DW Shuttle_Mk_2Len                         ;34  $32
  71+ E125 AD 00                                 DW SidewinderLen                           ;35  $33
  72+ E127 59 00                                 DW SplinterLen                             ;36  $34
  73+ E129 63 00                                 DW TestVectorLen                           ;37  $35
  74+ E12B 21 01                                 DW ThargoidLen                             ;38  $36
  75+ E12D AD 00                                 DW ThargonLen                              ;39  $37
  76+ E12F E7 01                                 DW TransportType10Len                      ;40  $38
  77+ E131 DF 00                                 DW ViperLen                                ;41  $39
  78+ E133 B5 00                                 DW WormLen                                 ;42  $3A
  79+ E135 0F 01                                 DW RattlerLen                              ;43  $3B
  80+ E137 00 00                                 DW 0                                       ;44  $3C
  81+ E139 00 00                                 DW 0                                       ;45  $3D
  82+ E13B 00 00                                 DW 0                                       ;46  $3E
  83+ E13D 00 00                                 DW 0                                       ;47  $3F
  84+ E13F
  85+ E13F                                      include "Data/ships/Rock_Hermit.asm"
# file opened: ./Data/ships/Rock_Hermit.asm
   1++E13F 07 19 00     Rock_Hermit:	        DB $07, $19, $00
   2++E142 8E E1                                DW Rock_HermitEdges
   3++E144 54                                   DB Rock_HermitEdgesSize
   4++E145 00 32                                DB $00, $32
   5++E147 36                                   DB Rock_HermitVertSize
   6++E148 15                                   DB Rock_HermitEdgesCnt
   7++E149 00 00                                DB $00, $00
   8++E14B 38                                   DB Rock_HermitNormalsSize
   9++E14C 32 B4 1E                             DB $32, $B4, $1E
  10++E14F E2 E1                                DW Rock_HermitNormals
  11++E151 01 02                                DB $01, $02
  12++E153 58 E1                                DW Rock_HermitVertices
  13++E155 00 00                                DB 0,0                      ; Type and Tactics
  14++E157 01                                   DB ShipCanAnger
  15++E158
  16++E158
  17++E158 00 50 00 1F  Rock_HermitVertices:	DB $00, $50, $00, $1F, $FF, $FF
  17++E15C FF FF
  18++E15E 50 0A 00 DF  	DB $50, $0A, $00, $DF, $FF, $FF
  18++E162 FF FF
  19++E164 00 50 00 5F  	DB $00, $50, $00, $5F, $FF, $FF
  19++E168 FF FF
  20++E16A 46 28 00 5F  	DB $46, $28, $00, $5F, $FF, $FF
  20++E16E FF FF
  21++E170 3C 32 00 1F  	DB $3C, $32, $00, $1F, $65, $DC
  21++E174 65 DC
  22++E176 32 00 3C 1F  	DB $32, $00, $3C, $1F, $FF, $FF
  22++E17A FF FF
  23++E17C 28 00 46 9F  	DB $28, $00, $46, $9F, $10, $32
  23++E180 10 32
  24++E182 00 1E 4B 3F  	DB $00, $1E, $4B, $3F, $FF, $FF
  24++E186 FF FF
  25++E188 00 32 3C 7F  	DB $00, $32, $3C, $7F, $98, $BA
  25++E18C 98 BA
  26++E18E
  27++E18E
  28++E18E              Rock_HermitVertSize: equ $ - Rock_HermitVertices
  29++E18E
  30++E18E
  31++E18E
  32++E18E 1F 72 00 04  Rock_HermitEdges:	DB $1F, $72, $00, $04
  33++E192 1F D6 00 10  	DB $1F, $D6, $00, $10
  34++E196 1F C5 0C 10  	DB $1F, $C5, $0C, $10
  35++E19A 1F B4 08 0C  	DB $1F, $B4, $08, $0C
  36++E19E 1F A3 04 08  	DB $1F, $A3, $04, $08
  37++E1A2 1F 32 04 18  	DB $1F, $32, $04, $18
  38++E1A6 1F 31 08 18  	DB $1F, $31, $08, $18
  39++E1AA 1F 41 08 14  	DB $1F, $41, $08, $14
  40++E1AE 1F 10 14 18  	DB $1F, $10, $14, $18
  41++E1B2 1F 60 00 14  	DB $1F, $60, $00, $14
  42++E1B6 1F 54 0C 14  	DB $1F, $54, $0C, $14
  43++E1BA 1F 20 00 18  	DB $1F, $20, $00, $18
  44++E1BE 1F 65 10 14  	DB $1F, $65, $10, $14
  45++E1C2 1F A8 04 20  	DB $1F, $A8, $04, $20
  46++E1C6 1F 87 04 1C  	DB $1F, $87, $04, $1C
  47++E1CA 1F D7 00 1C  	DB $1F, $D7, $00, $1C
  48++E1CE 1F DC 10 1C  	DB $1F, $DC, $10, $1C
  49++E1D2 1F C9 0C 1C  	DB $1F, $C9, $0C, $1C
  50++E1D6 1F B9 0C 20  	DB $1F, $B9, $0C, $20
  51++E1DA 1F BA 08 20  	DB $1F, $BA, $08, $20
  52++E1DE 1F 98 1C 20  	DB $1F, $98, $1C, $20
  53++E1E2
  54++E1E2              Rock_HermitEdgesSize: equ $ - Rock_HermitEdges
  55++E1E2
  56++E1E2
  57++E1E2              Rock_HermitEdgesCnt: equ Rock_HermitEdgesSize/4
  58++E1E2
  59++E1E2
  60++E1E2 1F 09 42 51  Rock_HermitNormals:	DB $1F, $09, $42, $51
  61++E1E6 5F 09 42 51  	DB $5F, $09, $42, $51
  62++E1EA 9F 48 40 1F  	DB $9F, $48, $40, $1F
  63++E1EE DF 40 49 2F  	DB $DF, $40, $49, $2F
  64++E1F2 5F 2D 4F 41  	DB $5F, $2D, $4F, $41
  65++E1F6 1F 87 0F 23  	DB $1F, $87, $0F, $23
  66++E1FA 1F 26 4C 46  	DB $1F, $26, $4C, $46
  67++E1FE BF 42 3B 27  	DB $BF, $42, $3B, $27
  68++E202 FF 43 0F 50  	DB $FF, $43, $0F, $50
  69++E206 7F 42 0E 4B  	DB $7F, $42, $0E, $4B
  70++E20A FF 46 50 28  	DB $FF, $46, $50, $28
  71++E20E 7F 3A 66 33  	DB $7F, $3A, $66, $33
  72++E212 3F 51 09 43  	DB $3F, $51, $09, $43
  73++E216 3F 2F 5E 3F  	DB $3F, $2F, $5E, $3F
  74++E21A
  75++E21A
  76++E21A              Rock_HermitNormalsSize: equ $ - Rock_HermitNormals
  77++E21A              Rock_HermitLen: equ $ - Rock_Hermit
  78++E21A
# file closed: ./Data/ships/Rock_Hermit.asm
  86+ E21A                                      include "Data/ships/ShuttleType9.asm"
# file opened: ./Data/ships/ShuttleType9.asm
   1++E21A 0F 09 C4     ShuttleType9:	            DB $0F, $09, $C4
   2++E21D A5 E2                                    DW ShuttleType9Edges
   3++E21F 78                                       DB ShuttleType9EdgesSize
   4++E220 00 26                                    DB $00, $26
   5++E222 72                                       DB ShuttleType9VertSize
   6++E223 1E                                       DB ShuttleType9EdgesCnt
   7++E224 00 00                                    DB $00, $00
   8++E226 34                                       DB ShuttleType9NormalsSize
   9++E227 16 20 08                                 DB $16, $20, $08
  10++E22A 1D E3                                    DW ShuttleType9Normals
  11++E22C 02 00                                    DB $02, $00
  12++E22E 33 E2                                    DW ShuttleType9Vertices
  13++E230 00 00        	                        DB 0,0                      ; Type and Tactics
  14++E232 00                                       DB 0
  15++E233
  16++E233
  17++E233 00 11 17 5F  ShuttleType9Vertices:	DB $00, $11, $17, $5F, $FF, $FF
  17++E237 FF FF
  18++E239 11 00 17 9F  	DB $11, $00, $17, $9F, $FF, $FF
  18++E23D FF FF
  19++E23F 00 12 17 1F  	DB $00, $12, $17, $1F, $FF, $FF
  19++E243 FF FF
  20++E245 12 00 17 1F  	DB $12, $00, $17, $1F, $FF, $FF
  20++E249 FF FF
  21++E24B 14 14 1B FF  	DB $14, $14, $1B, $FF, $12, $39
  21++E24F 12 39
  22++E251 14 14 1B BF  	DB $14, $14, $1B, $BF, $34, $59
  22++E255 34 59
  23++E257 14 14 1B 3F  	DB $14, $14, $1B, $3F, $56, $79
  23++E25B 56 79
  24++E25D 14 14 1B 7F  	DB $14, $14, $1B, $7F, $17, $89
  24++E261 17 89
  25++E263 05 00 1B 30  	DB $05, $00, $1B, $30, $99, $99
  25++E267 99 99
  26++E269 00 02 1B 70  	DB $00, $02, $1B, $70, $99, $99
  26++E26D 99 99
  27++E26F 05 00 1B A9  	DB $05, $00, $1B, $A9, $99, $99
  27++E273 99 99
  28++E275 00 03 1B 29  	DB $00, $03, $1B, $29, $99, $99
  28++E279 99 99
  29++E27B 00 09 23 50  	DB $00, $09, $23, $50, $0A, $BC
  29++E27F 0A BC
  30++E281 03 01 1F 47  	DB $03, $01, $1F, $47, $FF, $02
  30++E285 FF 02
  31++E287 04 0B 19 08  	DB $04, $0B, $19, $08, $01, $F4
  31++E28B 01 F4
  32++E28D 0B 04 19 08  	DB $0B, $04, $19, $08, $A1, $3F
  32++E291 A1 3F
  33++E293 03 01 1F C7  	DB $03, $01, $1F, $C7, $6B, $23
  33++E297 6B 23
  34++E299 03 0B 19 88  	DB $03, $0B, $19, $88, $F8, $C0
  34++E29D F8 C0
  35++E29F 0A 04 19 88  	DB $0A, $04, $19, $88, $4F, $18
  35++E2A3 4F 18
  36++E2A5
  37++E2A5              ShuttleType9VertSize: equ $ - ShuttleType9Vertices
  38++E2A5
  39++E2A5
  40++E2A5
  41++E2A5 1F 02 00 04  ShuttleType9Edges:	DB $1F, $02, $00, $04
  42++E2A9 1F 4A 04 08  	DB $1F, $4A, $04, $08
  43++E2AD 1F 6B 08 0C  	DB $1F, $6B, $08, $0C
  44++E2B1 1F 8C 00 0C  	DB $1F, $8C, $00, $0C
  45++E2B5 1F 18 00 1C  	DB $1F, $18, $00, $1C
  46++E2B9 18 12 00 10  	DB $18, $12, $00, $10
  47++E2BD 1F 23 04 10  	DB $1F, $23, $04, $10
  48++E2C1 18 34 04 14  	DB $18, $34, $04, $14
  49++E2C5 1F 45 08 14  	DB $1F, $45, $08, $14
  50++E2C9 0C 56 08 18  	DB $0C, $56, $08, $18
  51++E2CD 1F 67 0C 18  	DB $1F, $67, $0C, $18
  52++E2D1 18 78 0C 1C  	DB $18, $78, $0C, $1C
  53++E2D5 1F 39 10 14  	DB $1F, $39, $10, $14
  54++E2D9 1F 59 14 18  	DB $1F, $59, $14, $18
  55++E2DD 1F 79 18 1C  	DB $1F, $79, $18, $1C
  56++E2E1 1F 19 10 1C  	DB $1F, $19, $10, $1C
  57++E2E5 10 0C 00 30  	DB $10, $0C, $00, $30
  58++E2E9 10 0A 04 30  	DB $10, $0A, $04, $30
  59++E2ED 10 AB 08 30  	DB $10, $AB, $08, $30
  60++E2F1 10 BC 0C 30  	DB $10, $BC, $0C, $30
  61++E2F5 10 99 20 24  	DB $10, $99, $20, $24
  62++E2F9 07 99 24 28  	DB $07, $99, $24, $28
  63++E2FD 09 99 28 2C  	DB $09, $99, $28, $2C
  64++E301 07 99 20 2C  	DB $07, $99, $20, $2C
  65++E305 05 BB 34 38  	DB $05, $BB, $34, $38
  66++E309 08 BB 38 3C  	DB $08, $BB, $38, $3C
  67++E30D 07 BB 34 3C  	DB $07, $BB, $34, $3C
  68++E311 05 AA 40 44  	DB $05, $AA, $40, $44
  69++E315 08 AA 44 48  	DB $08, $AA, $44, $48
  70++E319 07 AA 40 48  	DB $07, $AA, $40, $48
  71++E31D              ShuttleType9EdgesSize: equ $ - ShuttleType9Edges
  72++E31D              ShuttleType9EdgesCnt: equ ShuttleType9EdgesSize/4
  73++E31D
  74++E31D DF 37 37 28  ShuttleType9Normals:	DB $DF, $37, $37, $28
  75++E321 5F 00 4A 04  	DB $5F, $00, $4A, $04
  76++E325 DF 33 33 17  	DB $DF, $33, $33, $17
  77++E329 9F 4A 00 04  	DB $9F, $4A, $00, $04
  78++E32D 9F 33 33 17  	DB $9F, $33, $33, $17
  79++E331 1F 00 4A 04  	DB $1F, $00, $4A, $04
  80++E335 1F 33 33 17  	DB $1F, $33, $33, $17
  81++E339 1F 4A 00 04  	DB $1F, $4A, $00, $04
  82++E33D 5F 33 33 17  	DB $5F, $33, $33, $17
  83++E341 3F 00 00 6B  	DB $3F, $00, $00, $6B
  84++E345 9F 29 29 5A  	DB $9F, $29, $29, $5A
  85++E349 1F 29 29 5A  	DB $1F, $29, $29, $5A
  86++E34D 5F 37 37 28  	DB $5F, $37, $37, $28
  87++E351
  88++E351
  89++E351              ShuttleType9NormalsSize: equ $ - ShuttleType9Normals
  90++E351              ShuttleType9Len: equ $ - ShuttleType9
  91++E351
# file closed: ./Data/ships/ShuttleType9.asm
  87+ E351                                      include "Data/ships/Shuttle_Mk_2.asm"
# file opened: ./Data/ships/Shuttle_Mk_2.asm
   1++E351 0F 09 C4     Shuttle_Mk_2:	        DB $0F, $09, $C4
   2++E354 D0 E3                                DW Shuttle_Mk_2Edges
   3++E356 70                                   DB Shuttle_Mk_2EdgesSize
   4++E357 00 26                                DB $00, $26
   5++E359 66                                   DB Shuttle_Mk_2VertSize
   6++E35A 1C                                   DB Shuttle_Mk_2EdgesCnt
   7++E35B 00 00                                DB $00, $00
   8++E35D 34                                   DB Shuttle_Mk_2NormalsSize
   9++E35E 0A 20 09                             DB $0A, $20, $09
  10++E361 40 E4                                DW Shuttle_Mk_2Normals
  11++E363 02 00                                DB $02, $00
  12++E365 6A E3                                DW Shuttle_Mk_2Vertices
  13++E367 00 00                                DB 0,0                      ; Type and Tactics
  14++E369 00                                   DB 0
  15++E36A
  16++E36A
  17++E36A 00 00 28 1F  Shuttle_Mk_2Vertices:	DB $00, $00, $28, $1F, $23, $01
  17++E36E 23 01
  18++E370 00 14 1E 1F  	DB $00, $14, $1E, $1F, $34, $00
  18++E374 34 00
  19++E376 14 00 1E 9F  	DB $14, $00, $1E, $9F, $15, $00
  19++E37A 15 00
  20++E37C 00 14 1E 5F  	DB $00, $14, $1E, $5F, $26, $11
  20++E380 26 11
  21++E382 14 00 1E 1F  	DB $14, $00, $1E, $1F, $37, $22
  21++E386 37 22
  22++E388 14 14 14 9F  	DB $14, $14, $14, $9F, $58, $04
  22++E38C 58 04
  23++E38E 14 14 14 DF  	DB $14, $14, $14, $DF, $69, $15
  23++E392 69 15
  24++E394 14 14 14 5F  	DB $14, $14, $14, $5F, $7A, $26
  24++E398 7A 26
  25++E39A 14 14 14 1F  	DB $14, $14, $14, $1F, $7B, $34
  25++E39E 7B 34
  26++E3A0 00 14 28 3F  	DB $00, $14, $28, $3F, $BC, $48
  26++E3A4 BC 48
  27++E3A6 14 00 28 BF  	DB $14, $00, $28, $BF, $9C, $58
  27++E3AA 9C 58
  28++E3AC 00 14 28 7F  	DB $00, $14, $28, $7F, $AC, $69
  28++E3B0 AC 69
  29++E3B2 14 00 28 3F  	DB $14, $00, $28, $3F, $BC, $7A
  29++E3B6 BC 7A
  30++E3B8 04 04 28 AA  	DB $04, $04, $28, $AA, $CC, $CC
  30++E3BC CC CC
  31++E3BE 04 04 28 EA  	DB $04, $04, $28, $EA, $CC, $CC
  31++E3C2 CC CC
  32++E3C4 04 04 28 6A  	DB $04, $04, $28, $6A, $CC, $CC
  32++E3C8 CC CC
  33++E3CA 04 04 28 2A  	DB $04, $04, $28, $2A, $CC, $CC
  33++E3CE CC CC
  34++E3D0
  35++E3D0              Shuttle_Mk_2VertSize: equ $ - Shuttle_Mk_2Vertices
  36++E3D0
  37++E3D0
  38++E3D0
  39++E3D0 1F 01 00 08  Shuttle_Mk_2Edges:	DB $1F, $01, $00, $08
  40++E3D4 1F 12 00 0C  	DB $1F, $12, $00, $0C
  41++E3D8 1F 23 00 10  	DB $1F, $23, $00, $10
  42++E3DC 1F 30 00 04  	DB $1F, $30, $00, $04
  43++E3E0 1F 04 04 14  	DB $1F, $04, $04, $14
  44++E3E4 1F 05 08 14  	DB $1F, $05, $08, $14
  45++E3E8 1F 15 08 18  	DB $1F, $15, $08, $18
  46++E3EC 1F 16 0C 18  	DB $1F, $16, $0C, $18
  47++E3F0 1F 26 0C 1C  	DB $1F, $26, $0C, $1C
  48++E3F4 1F 27 10 1C  	DB $1F, $27, $10, $1C
  49++E3F8 1F 37 10 20  	DB $1F, $37, $10, $20
  50++E3FC 1F 34 04 20  	DB $1F, $34, $04, $20
  51++E400 1F 48 14 24  	DB $1F, $48, $14, $24
  52++E404 1F 58 14 28  	DB $1F, $58, $14, $28
  53++E408 1F 59 18 28  	DB $1F, $59, $18, $28
  54++E40C 1F 69 18 2C  	DB $1F, $69, $18, $2C
  55++E410 1F 6A 1C 2C  	DB $1F, $6A, $1C, $2C
  56++E414 1F 7A 1C 30  	DB $1F, $7A, $1C, $30
  57++E418 1F 7B 20 30  	DB $1F, $7B, $20, $30
  58++E41C 1F 4B 20 24  	DB $1F, $4B, $20, $24
  59++E420 1F 8C 24 28  	DB $1F, $8C, $24, $28
  60++E424 1F 9C 28 2C  	DB $1F, $9C, $28, $2C
  61++E428 1F AC 2C 30  	DB $1F, $AC, $2C, $30
  62++E42C 1F BC 30 24  	DB $1F, $BC, $30, $24
  63++E430 0A CC 34 38  	DB $0A, $CC, $34, $38
  64++E434 0A CC 38 3C  	DB $0A, $CC, $38, $3C
  65++E438 0A CC 3C 40  	DB $0A, $CC, $3C, $40
  66++E43C 0A CC 40 34  	DB $0A, $CC, $40, $34
  67++E440
  68++E440              Shuttle_Mk_2EdgesSize: equ $ - Shuttle_Mk_2Edges
  69++E440
  70++E440
  71++E440              Shuttle_Mk_2EdgesCnt: equ Shuttle_Mk_2EdgesSize/4
  72++E440
  73++E440
  74++E440 9F 27 27 4E  Shuttle_Mk_2Normals:	DB $9F, $27, $27, $4E
  75++E444 DF 27 27 4E  	DB $DF, $27, $27, $4E
  76++E448 5F 27 27 4E  	DB $5F, $27, $27, $4E
  77++E44C 1F 27 27 4E  	DB $1F, $27, $27, $4E
  78++E450 1F 00 60 00  	DB $1F, $00, $60, $00
  79++E454 9F 60 00 00  	DB $9F, $60, $00, $00
  80++E458 5F 00 60 00  	DB $5F, $00, $60, $00
  81++E45C 1F 60 00 00  	DB $1F, $60, $00, $00
  82++E460 BF 42 42 16  	DB $BF, $42, $42, $16
  83++E464 FF 42 42 16  	DB $FF, $42, $42, $16
  84++E468 7F 42 42 16  	DB $7F, $42, $42, $16
  85++E46C 3F 42 42 16  	DB $3F, $42, $42, $16
  86++E470 3F 00 00 60  	DB $3F, $00, $00, $60
  87++E474
  88++E474
  89++E474              Shuttle_Mk_2NormalsSize: equ $ - Shuttle_Mk_2Normals
  90++E474              Shuttle_Mk_2Len: equ $ - Shuttle_Mk_2
  91++E474
# file closed: ./Data/ships/Shuttle_Mk_2.asm
  88+ E474                                      include "Data/ships/Sidewinder.asm"
# file opened: ./Data/ships/Sidewinder.asm
   1++E474 00 10 81     Sidewinder:	            DB $00, $10, $81
   2++E477 C9 E4                                DW SidewinderEdges
   3++E479 3C                                   DB SidewinderEdgesSize
   4++E47A 00 1E                                DB $00, $1E
   5++E47C 3C                                   DB SidewinderVertSize
   6++E47D 0F                                   DB SidewinderEdgesCnt
   7++E47E 00 32                                DB $00, $32
   8++E480 1C                                   DB SidewinderNormalsSize
   9++E481 14 46 25                             DB $14, $46, $25
  10++E484 05 E5                                DW SidewinderNormals
  11++E486 02 10                                DB $02, $10
  12++E488 8D E4                                DW SidewinderVertices
  13++E48A 00 00                                DB 0,0                      ; Type and Tactics
  14++E48C 01                                   DB ShipCanAnger
  15++E48D
  16++E48D 20 00 24 9F  SidewinderVertices:	DB $20, $00, $24, $9F, $10, $54
  16++E491 10 54
  17++E493 20 00 24 1F  	DB $20, $00, $24, $1F, $20, $65
  17++E497 20 65
  18++E499 40 00 1C 3F  	DB $40, $00, $1C, $3F, $32, $66
  18++E49D 32 66
  19++E49F 40 00 1C BF  	DB $40, $00, $1C, $BF, $31, $44
  19++E4A3 31 44
  20++E4A5 00 10 1C 3F  	DB $00, $10, $1C, $3F, $10, $32
  20++E4A9 10 32
  21++E4AB 00 10 1C 7F  	DB $00, $10, $1C, $7F, $43, $65
  21++E4AF 43 65
  22++E4B1 0C 06 1C AF  	DB $0C, $06, $1C, $AF, $33, $33
  22++E4B5 33 33
  23++E4B7 0C 06 1C 2F  	DB $0C, $06, $1C, $2F, $33, $33
  23++E4BB 33 33
  24++E4BD 0C 06 1C 6C  	DB $0C, $06, $1C, $6C, $33, $33
  24++E4C1 33 33
  25++E4C3 0C 06 1C EC  	DB $0C, $06, $1C, $EC, $33, $33
  25++E4C7 33 33
  26++E4C9
  27++E4C9
  28++E4C9              SidewinderVertSize: equ $ - SidewinderVertices
  29++E4C9
  30++E4C9
  31++E4C9
  32++E4C9 1F 50 00 04  SidewinderEdges:	DB $1F, $50, $00, $04
  33++E4CD 1F 62 04 08  	DB $1F, $62, $04, $08
  34++E4D1 1F 20 04 10  	DB $1F, $20, $04, $10
  35++E4D5 1F 10 00 10  	DB $1F, $10, $00, $10
  36++E4D9 1F 41 00 0C  	DB $1F, $41, $00, $0C
  37++E4DD 1F 31 0C 10  	DB $1F, $31, $0C, $10
  38++E4E1 1F 32 08 10  	DB $1F, $32, $08, $10
  39++E4E5 1F 43 0C 14  	DB $1F, $43, $0C, $14
  40++E4E9 1F 63 08 14  	DB $1F, $63, $08, $14
  41++E4ED 1F 65 04 14  	DB $1F, $65, $04, $14
  42++E4F1 1F 54 00 14  	DB $1F, $54, $00, $14
  43++E4F5 0F 33 18 1C  	DB $0F, $33, $18, $1C
  44++E4F9 0C 33 1C 20  	DB $0C, $33, $1C, $20
  45++E4FD 0C 33 18 24  	DB $0C, $33, $18, $24
  46++E501 0C 33 20 24  	DB $0C, $33, $20, $24
  47++E505
  48++E505              SidewinderEdgesSize: equ $ - SidewinderEdges
  49++E505
  50++E505
  51++E505              SidewinderEdgesCnt: equ SidewinderEdgesSize/4
  52++E505
  53++E505
  54++E505 1F 00 20 08  SidewinderNormals:	DB $1F, $00, $20, $08
  55++E509 9F 0C 2F 06  	DB $9F, $0C, $2F, $06
  56++E50D 1F 0C 2F 06  	DB $1F, $0C, $2F, $06
  57++E511 3F 00 00 70  	DB $3F, $00, $00, $70
  58++E515 DF 0C 2F 06  	DB $DF, $0C, $2F, $06
  59++E519 5F 00 20 08  	DB $5F, $00, $20, $08
  60++E51D 5F 0C 2F 06  	DB $5F, $0C, $2F, $06
  61++E521
  62++E521
  63++E521              SidewinderNormalsSize: equ $ - SidewinderNormals
  64++E521              SidewinderLen: equ $ - Sidewinder
  65++E521
# file closed: ./Data/ships/Sidewinder.asm
  89+ E521                                      include "Data/ships/Splinter.asm"
# file opened: ./Data/ships/Splinter.asm
   1++E521 B0 01 00     Splinter:	            DB $B0, $01, $00
   2++E524 52 E5                                DW SplinterEdges
   3++E526 18                                   DB SplinterEdgesSize
   4++E527 00 16                                DB $00, $16
   5++E529 18                                   DB SplinterVertSize
   6++E52A 06                                   DB SplinterEdgesCnt
   7++E52B 00 00                                DB $00, $00
   8++E52D 10                                   DB SplinterNormalsSize
   9++E52E 08 14 0A                             DB $08, $14, $0A
  10++E531 6A E5                                DW SplinterNormals
  11++E533 05 00                                DB $05, $00
  12++E535 3A E5                                DW SplinterVertices
  13++E537 00 00                                DB 0,0                      ; Type and Tactics
  14++E539 00                                   DB 0
  15++E53A
  16++E53A 18 19 10 DF  SplinterVertices:	    DB $18, $19, $10, $DF, $12, $33
  16++E53E 12 33
  17++E540 00 0C 0A 3F                          DB $00, $0C, $0A, $3F, $02, $33
  17++E544 02 33
  18++E546 0B 06 02 5F                          DB $0B, $06, $02, $5F, $01, $33
  18++E54A 01 33
  19++E54C 0C 2A 07 1F                          DB $0C, $2A, $07, $1F, $01, $22
  19++E550 01 22
  20++E552              SplinterVertSize:       equ $ - SplinterVertices
  21++E552 1F 23 00 04  SplinterEdges:	        DB $1F, $23, $00, $04
  22++E556 1F 03 04 08                          DB $1F, $03, $04, $08
  23++E55A 1F 01 08 0C                          DB $1F, $01, $08, $0C
  24++E55E 1F 12 0C 00                          DB $1F, $12, $0C, $00
  25++E562 1F 13 00 08                          DB $1F, $13, $00, $08
  26++E566 1F 02 0C 04                          DB $1F, $02, $0C, $04
  27++E56A              SplinterEdgesSize:      equ $ - SplinterEdges
  28++E56A              SplinterEdgesCnt:       equ SplinterEdgesSize/4
  29++E56A 1F 23 00 04  SplinterNormals:	    DB $1F, $23, $00, $04
  30++E56E 1F 03 04 08                          DB $1F, $03, $04, $08
  31++E572 1F 01 08 0C                          DB $1F, $01, $08, $0C
  32++E576 1F 12 0C 00                          DB $1F, $12, $0C, $00
  33++E57A              SplinterNormalsSize:    equ $ - SplinterNormals
  34++E57A              SplinterLen:            equ $ - Splinter
  35++E57A
# file closed: ./Data/ships/Splinter.asm
  90+ E57A                                      include "Data/ships/TestVector.asm"
# file opened: ./Data/ships/TestVector.asm
   1++E57A 03 41 23     TestVector:             DB $03, $41, $23
   2++E57D BD E5                                DW TestVectorEdges
   3++E57F 10                                   DB TestVectorEdgesSize
   4++E580 54 2A                                DB $54,$2A
   5++E582 2A                                   DB TestVectorVertSize
   6++E583 04                                   DB TestVectorEdgesCnt
   7++E584 00 00                                DB $00,$00
   8++E586 10                                   DB TestVectorNormalsSize
   9++E587 32 96 1C                             DB $32,$96,$1C
  10++E58A CD E5                                DW TestVectorNormals
  11++E58C 04 01                                DB $04,$01
  12++E58E 93 E5                                DW TestVectorVertices
  13++E590 FE 00                                DB ShipTypeDebug,0                      ; Type and Tactics
  14++E592 00                                   DB 0
  15++E593
  16++E593 00 40 00 1F  TestVectorVertices	    DB $00,$40,$00,$1F,$00,$00
  16++E597 00 00
  17++E599 00 20 00 1F                          DB $00,$20,$00,$1F,$00,$00
  17++E59D 00 00
  18++E59F 40 00 00 1F                          DB $40,$00,$00,$1F,$01,$01
  18++E5A3 01 01
  19++E5A5 20 00 00 1F                          DB $20,$00,$00,$1F,$01,$01
  19++E5A9 01 01
  20++E5AB 00 00 40 1F                          DB $00,$00,$40,$1F,$02,$02
  20++E5AF 02 02
  21++E5B1 00 00 20 1F                          DB $00,$00,$20,$1F,$02,$02
  21++E5B5 02 02
  22++E5B7 00 00 00 1F                          DB $00,$00,$00,$1F,$03,$03
  22++E5BB 03 03
  23++E5BD              TestVectorVertSize      equ $  - TestVectorVertices
  24++E5BD 1F 00 00 04  TestVectorEdges		    DB $1F,$00,$00,$04
  25++E5C1 1F 00 08 0C                          DB $1F,$00,$08,$0C
  26++E5C5 1F 00 10 14                          DB $1F,$00,$10,$14
  27++E5C9 1F 00 18 18                          DB $1F,$00,$18,$18
  28++E5CD              TestVectorEdgesSize     equ $  - TestVectorEdges
  29++E5CD              TestVectorEdgesCnt      equ TestVectorEdgesSize/4
  30++E5CD              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  31++E5CD 1F 00 10 00  TestVectorNormals	    DB $1F,$00,$10,$00
  32++E5D1 1F 10 00 00                          DB $1F,$10,$00,$00
  33++E5D5 1F 00 00 10                          DB $1F,$00,$00,$10
  34++E5D9 1F 00 00 10                          DB $1F,$00,$00,$10
  35++E5DD              TestVectorNormalsSize   equ $  - TestVectorNormals
  36++E5DD              TestVectorLen           equ $  - TestVector
  37++E5DD
# file closed: ./Data/ships/TestVector.asm
  91+ E5DD                                      include "Data/ships/Thargoid.asm"
# file opened: ./Data/ships/Thargoid.asm
   1++E5DD 00 26 49     Thargoid:	            DB $00, $26, $49
   2++E5E0 6E E6                                DW ThargoidEdges
   3++E5E2 68                                   DB ThargoidEdgesSize
   4++E5E3 3C 26                                DB $3C, $26
   5++E5E5 78                                   DB ThargoidVertSize
   6++E5E6 1A                                   DB ThargoidEdgesCnt
   7++E5E7 01 F4                                DB $01, $F4
   8++E5E9 28                                   DB ThargoidNormalsSize
   9++E5EA 37 F0 27                             DB $37, $F0, $27
  10++E5ED D6 E6                                DW ThargoidNormals
  11++E5EF 02 16                                DB $02, $16
  12++E5F1 F6 E5                                DW ThargoidVertices
  13++E5F3 00 00                                DB 0,0                      ; Type and Tactics
  14++E5F5 01                                   DB ShipCanAnger
  15++E5F6
  16++E5F6 20 30 30 5F  ThargoidVertices:	    DB $20, $30, $30, $5F, $40, $88
  16++E5FA 40 88
  17++E5FC 20 44 00 5F                          DB $20, $44, $00, $5F, $10, $44
  17++E600 10 44
  18++E602 20 30 30 7F                          DB $20, $30, $30, $7F, $21, $44
  18++E606 21 44
  19++E608 20 00 44 3F                          DB $20, $00, $44, $3F, $32, $44
  19++E60C 32 44
  20++E60E 20 30 30 3F                          DB $20, $30, $30, $3F, $43, $55
  20++E612 43 55
  21++E614 20 44 00 1F                          DB $20, $44, $00, $1F, $54, $66
  21++E618 54 66
  22++E61A 20 30 30 1F                          DB $20, $30, $30, $1F, $64, $77
  22++E61E 64 77
  23++E620 20 00 44 1F                          DB $20, $00, $44, $1F, $74, $88
  23++E624 74 88
  24++E626 18 74 74 DF                          DB $18, $74, $74, $DF, $80, $99
  24++E62A 80 99
  25++E62C 18 A4 00 DF                          DB $18, $A4, $00, $DF, $10, $99
  25++E630 10 99
  26++E632 18 74 74 FF                          DB $18, $74, $74, $FF, $21, $99
  26++E636 21 99
  27++E638 18 00 A4 BF                          DB $18, $00, $A4, $BF, $32, $99
  27++E63C 32 99
  28++E63E 18 74 74 BF                          DB $18, $74, $74, $BF, $53, $99
  28++E642 53 99
  29++E644 18 A4 00 9F                          DB $18, $A4, $00, $9F, $65, $99
  29++E648 65 99
  30++E64A 18 74 74 9F                          DB $18, $74, $74, $9F, $76, $99
  30++E64E 76 99
  31++E650 18 00 A4 9F                          DB $18, $00, $A4, $9F, $87, $99
  31++E654 87 99
  32++E656 18 40 50 9E                          DB $18, $40, $50, $9E, $99, $99
  32++E65A 99 99
  33++E65C 18 40 50 BE                          DB $18, $40, $50, $BE, $99, $99
  33++E660 99 99
  34++E662 18 40 50 FE                          DB $18, $40, $50, $FE, $99, $99
  34++E666 99 99
  35++E668 18 40 50 DE                          DB $18, $40, $50, $DE, $99, $99
  35++E66C 99 99
  36++E66E
  37++E66E              ThargoidVertSize: equ $ - ThargoidVertices
  38++E66E
  39++E66E
  40++E66E
  41++E66E 1F 84 00 1C  ThargoidEdges:	DB $1F, $84, $00, $1C           ;01
  42++E672 1F 40 00 04                  DB $1F, $40, $00, $04           ;02
  43++E676 1F 41 04 08                  DB $1F, $41, $04, $08           ;03
  44++E67A 1F 42 08 0C                  DB $1F, $42, $08, $0C           ;04
  45++E67E 1F 43 0C 10                  DB $1F, $43, $0C, $10           ;05
  46++E682 1F 54 10 14                  DB $1F, $54, $10, $14           ;06
  47++E686 1F 64 14 18                  DB $1F, $64, $14, $18           ;07
  48++E68A 1F 74 18 1C                  DB $1F, $74, $18, $1C           ;08
  49++E68E 1F 80 00 20                  DB $1F, $80, $00, $20           ;09
  50++E692 1F 10 04 24                  DB $1F, $10, $04, $24           ;10
  51++E696 1F 21 08 28                  DB $1F, $21, $08, $28           ;11
  52++E69A 1F 32 0C 2C                  DB $1F, $32, $0C, $2C           ;12
  53++E69E 1F 53 10 30                  DB $1F, $53, $10, $30           ;13
  54++E6A2 1F 65 14 34                  DB $1F, $65, $14, $34           ;14
  55++E6A6 1F 76 18 38                  DB $1F, $76, $18, $38           ;15
  56++E6AA 1F 87 1C 3C                  DB $1F, $87, $1C, $3C           ;16
  57++E6AE 1F 98 20 3C                  DB $1F, $98, $20, $3C           ;17
  58++E6B2 1F 90 20 24                  DB $1F, $90, $20, $24           ;18
  59++E6B6 1F 91 24 28                  DB $1F, $91, $24, $28
  60++E6BA 1F 92 28 2C                  DB $1F, $92, $28, $2C
  61++E6BE 1F 93 2C 30                  DB $1F, $93, $2C, $30
  62++E6C2 1F 95 30 34                  DB $1F, $95, $30, $34
  63++E6C6 1F 96 34 38                  DB $1F, $96, $34, $38
  64++E6CA 1F 97 38 3C                  DB $1F, $97, $38, $3C
  65++E6CE 1E 99 40 44                  DB $1E, $99, $40, $44
  66++E6D2 1E 99 48 4C                  DB $1E, $99, $48, $4C
  67++E6D6
  68++E6D6              ThargoidEdgesSize: equ $ - ThargoidEdges
  69++E6D6
  70++E6D6              ThargoidEdgesCnt: equ ThargoidEdgesSize/4
  71++E6D6
  72++E6D6 5F 67 3C 19  ThargoidNormals:	DB $5F, $67, $3C, $19
  73++E6DA 7F 67 3C 19  	DB $7F, $67, $3C, $19
  74++E6DE 7F 67 19 3C  	DB $7F, $67, $19, $3C
  75++E6E2 3F 67 19 3C  	DB $3F, $67, $19, $3C
  76++E6E6 1F 40 00 00  	DB $1F, $40, $00, $00
  77++E6EA 3F 67 3C 19  	DB $3F, $67, $3C, $19
  78++E6EE 1F 67 3C 19  	DB $1F, $67, $3C, $19
  79++E6F2 1F 67 19 3C  	DB $1F, $67, $19, $3C
  80++E6F6 5F 67 19 3C  	DB $5F, $67, $19, $3C
  81++E6FA 9F 30 00 00  	DB $9F, $30, $00, $00
  82++E6FE
  83++E6FE
  84++E6FE              ThargoidNormalsSize: equ $ - ThargoidNormals
  85++E6FE              ThargoidLen: equ $ - Thargoid
  86++E6FE
# file closed: ./Data/ships/Thargoid.asm
  92+ E6FE                                      include "Data/ships/Thargon.asm"
# file opened: ./Data/ships/Thargon.asm
   1++E6FE F0 06 40     Thargon:	            DB $F0, $06, $40
   2++E701 53 E7                                DW ThargonEdges
   3++E703 3C                                   DB ThargonEdgesSize
   4++E704 00 12                                DB $00, $12
   5++E706 3C                                   DB ThargonVertSize
   6++E707 0F                                   DB ThargonEdgesCnt
   7++E708 00 32                                DB $00, $32
   8++E70A 1C                                   DB ThargonNormalsSize
   9++E70B 14 14 1E                             DB $14, $14, $1E
  10++E70E 8F E7                                DW ThargonNormals
  11++E710 02 10                                DB $02, $10
  12++E712 17 E7                                DW ThargonVertices
  13++E714 00 00                                DB 0,0                      ; Type and Tactics
  14++E716 01                                   DB ShipCanAnger
  15++E717
  16++E717
  17++E717 09 00 28 9F  ThargonVertices:	    DB $09, $00, $28, $9F, $01, $55
  17++E71B 01 55
  18++E71D 09 26 0C DF                          DB $09, $26, $0C, $DF, $01, $22
  18++E721 01 22
  19++E723 09 18 20 FF                          DB $09, $18, $20, $FF, $02, $33
  19++E727 02 33
  20++E729 09 18 20 BF                          DB $09, $18, $20, $BF, $03, $44
  20++E72D 03 44
  21++E72F 09 26 0C 9F                          DB $09, $26, $0C, $9F, $04, $55
  21++E733 04 55
  22++E735 09 00 08 3F                          DB $09, $00, $08, $3F, $15, $66
  22++E739 15 66
  23++E73B 09 0A 0F 7F                          DB $09, $0A, $0F, $7F, $12, $66
  23++E73F 12 66
  24++E741 09 06 1A 7F                          DB $09, $06, $1A, $7F, $23, $66
  24++E745 23 66
  25++E747 09 06 1A 3F                          DB $09, $06, $1A, $3F, $34, $66
  25++E74B 34 66
  26++E74D 09 0A 0F 3F                          DB $09, $0A, $0F, $3F, $45, $66
  26++E751 45 66
  27++E753
  28++E753              ThargonVertSize:        equ $ - ThargonVertices
  29++E753
  30++E753
  31++E753 1F 10 00 04  ThargonEdges:	        DB $1F, $10, $00, $04
  32++E757 1F 20 04 08                          DB $1F, $20, $04, $08
  33++E75B 1F 30 08 0C                          DB $1F, $30, $08, $0C
  34++E75F 1F 40 0C 10                          DB $1F, $40, $0C, $10
  35++E763 1F 50 00 10                          DB $1F, $50, $00, $10
  36++E767 1F 51 00 14                          DB $1F, $51, $00, $14
  37++E76B 1F 21 04 18                          DB $1F, $21, $04, $18
  38++E76F 1F 32 08 1C                          DB $1F, $32, $08, $1C
  39++E773 1F 43 0C 20                          DB $1F, $43, $0C, $20
  40++E777 1F 54 10 24                          DB $1F, $54, $10, $24
  41++E77B 1F 61 14 18                          DB $1F, $61, $14, $18
  42++E77F 1F 62 18 1C                          DB $1F, $62, $18, $1C
  43++E783 1F 63 1C 20                          DB $1F, $63, $1C, $20
  44++E787 1F 64 20 24                          DB $1F, $64, $20, $24
  45++E78B 1F 65 24 14                          DB $1F, $65, $24, $14
  46++E78F
  47++E78F              ThargonEdgesSize:       equ $ - ThargonEdges
  48++E78F
  49++E78F
  50++E78F              ThargonEdgesCnt:        equ ThargonEdgesSize/4
  51++E78F
  52++E78F
  53++E78F 9F 24 00 00  ThargonNormals:	        DB $9F, $24, $00, $00
  54++E793 5F 14 05 07                          DB $5F, $14, $05, $07
  55++E797 7F 2E 2A 0E                          DB $7F, $2E, $2A, $0E
  56++E79B 3F 24 00 68                          DB $3F, $24, $00, $68
  57++E79F 3F 2E 2A 0E                          DB $3F, $2E, $2A, $0E
  58++E7A3 1F 14 05 07                          DB $1F, $14, $05, $07
  59++E7A7 1F 24 00 00                          DB $1F, $24, $00, $00
  60++E7AB
  61++E7AB
  62++E7AB              ThargonNormalsSize:     equ $ - ThargonNormals
  63++E7AB              ThargonLen:             equ $ - Thargon
  64++E7AB
# file closed: ./Data/ships/Thargon.asm
  93+ E7AB                                      include "Data/ships/TransportType10.asm"
# file opened: ./Data/ships/TransportType10.asm
   1++E7AB 00 09 C4     TransportType10:	    DB $00, $09, $C4
   2++E7AE A2 E8                                DW TransportType10Edges
   3++E7B0 B8                                   DB TransportType10EdgesSize
   4++E7B1 30 1A                                DB $30, $1A
   5++E7B3 DE                                   DB TransportType10VertSize
   6++E7B4 2E                                   DB TransportType10EdgesCnt
   7++E7B5 00 00                                DB $00, $00
   8++E7B7 38                                   DB TransportType10NormalsSize
   9++E7B8 10 20 0A                             DB $10, $20, $0A
  10++E7BB 5A E9                                DW TransportType10Normals
  11++E7BD 02 00                                DB $02, $00
  12++E7BF C4 E7                                DW TransportType10Vertices
  13++E7C1 00 00                                DB 0,0                      ; Type and Tactics
  14++E7C3 00                                   DB 0
  15++E7C4
  16++E7C4 00 0A 1A 3F  TransportType10Vertices:DB $00, $0A, $1A, $3F, $06, $77     ;01
  16++E7C8 06 77
  17++E7CA 19 04 1A BF                          DB $19, $04, $1A, $BF, $01, $77     ;02
  17++E7CE 01 77
  18++E7D0 1C 03 1A FF                          DB $1C, $03, $1A, $FF, $01, $22     ;03
  18++E7D4 01 22
  19++E7D6 19 08 1A FF                          DB $19, $08, $1A, $FF, $02, $33     ;04
  19++E7DA 02 33
  20++E7DC 1A 08 1A 7F                          DB $1A, $08, $1A, $7F, $03, $44     ;05
  20++E7E0 03 44
  21++E7E2 1D 03 1A 7F                          DB $1D, $03, $1A, $7F, $04, $55     ;06
  21++E7E6 04 55
  22++E7E8 1A 04 1A 3F                          DB $1A, $04, $1A, $3F, $05, $66     ;07
  22++E7EC 05 66
  23++E7EE 00 06 0C 13                          DB $00, $06, $0C, $13, $FF, $FF     ;08
  23++E7F2 FF FF
  24++E7F4 1E 01 0C DF                          DB $1E, $01, $0C, $DF, $17, $89     ;09
  24++E7F8 17 89
  25++E7FA 21 08 0C DF                          DB $21, $08, $0C, $DF, $12, $39     ;10
  25++E7FE 12 39
  26++E800 21 08 0C 5F                          DB $21, $08, $0C, $5F, $34, $5A     ;11
  26++E804 34 5A
  27++E806 1E 01 0C 5F                          DB $1E, $01, $0C, $5F, $56, $AB     ;12
  27++E80A 56 AB
  28++E80C 0B 02 1E DF                          DB $0B, $02, $1E, $DF, $89, $CD     ;13
  28++E810 89 CD
  29++E812 0D 08 1E DF                          DB $0D, $08, $1E, $DF, $39, $DD     ;14
  29++E816 39 DD
  30++E818 0E 08 1E 5F                          DB $0E, $08, $1E, $5F, $3A, $DD     ;15
  30++E81C 3A DD
  31++E81E 0B 02 1E 5F                          DB $0B, $02, $1E, $5F, $AB, $CD     ;16
  31++E822 AB CD
  32++E824 05 06 02 87                          DB $05, $06, $02, $87, $77, $77     ;17
  32++E828 77 77
  33++E82A 12 03 02 87                          DB $12, $03, $02, $87, $77, $77     ;18
  33++E82E 77 77
  34++E830 05 07 07 A7                          DB $05, $07, $07, $A7, $77, $77     ;19
  34++E834 77 77
  35++E836 12 04 07 A7                          DB $12, $04, $07, $A7, $77, $77     ;20
  35++E83A 77 77
  36++E83C 0B 06 0E A7                          DB $0B, $06, $0E, $A7, $77, $77     ;21
  36++E840 77 77
  37++E842 0B 05 07 A7                          DB $0B, $05, $07, $A7, $77, $77     ;22
  37++E846 77 77
  38++E848 05 07 0E 27                          DB $05, $07, $0E, $27, $66, $66     ;23
  38++E84C 66 66
  39++E84E 12 04 0E 27                          DB $12, $04, $0E, $27, $66, $66     ;24
  39++E852 66 66
  40++E854 0B 05 07 27                          DB $0B, $05, $07, $27, $66, $66     ;25
  40++E858 66 66
  41++E85A 05 06 03 27                          DB $05, $06, $03, $27, $66, $66     ;26
  41++E85E 66 66
  42++E860 12 03 03 27                          DB $12, $03, $03, $27, $66, $66     ;27
  42++E864 66 66
  43++E866 0B 04 08 07                          DB $0B, $04, $08, $07, $66, $66     ;28
  43++E86A 66 66
  44++E86C 0B 05 03 27                          DB $0B, $05, $03, $27, $66, $66     ;29
  44++E870 66 66
  45++E872 10 08 0D E6                          DB $10, $08, $0D, $E6, $33, $33     ;30
  45++E876 33 33
  46++E878 10 08 10 C6                          DB $10, $08, $10, $C6, $33, $33     ;31
  46++E87C 33 33
  47++E87E 11 08 0D 66                          DB $11, $08, $0D, $66, $33, $33     ;32
  47++E882 33 33
  48++E884 11 08 10 46                          DB $11, $08, $10, $46, $33, $33     ;33
  48++E888 33 33
  49++E88A 0D 03 1A E8                          DB $0D, $03, $1A, $E8, $00, $00     ;34
  49++E88E 00 00
  50++E890 0D 03 1A 68                          DB $0D, $03, $1A, $68, $00, $00     ;35
  50++E894 00 00
  51++E896 09 03 1A 25                          DB $09, $03, $1A, $25, $00, $00     ;36
  51++E89A 00 00
  52++E89C 08 03 1A A5                          DB $08, $03, $1A, $A5, $00, $00     ;37
  52++E8A0 00 00
  53++E8A2
  54++E8A2              TransportType10VertSize: equ $ - TransportType10Vertices
  55++E8A2
  56++E8A2
  57++E8A2
  58++E8A2 1F 07 00 04  TransportType10Edges:	DB $1F, $07, $00, $04               ;01
  59++E8A6 1F 01 04 08                          DB $1F, $01, $04, $08               ;02
  60++E8AA 1F 02 08 0C                          DB $1F, $02, $08, $0C               ;03
  61++E8AE 1F 03 0C 10                          DB $1F, $03, $0C, $10               ;04
  62++E8B2 1F 04 10 14                          DB $1F, $04, $10, $14               ;05
  63++E8B6 1F 05 14 18                          DB $1F, $05, $14, $18               ;06
  64++E8BA 1F 06 00 18                          DB $1F, $06, $00, $18               ;07
  65++E8BE 10 67 00 1C                          DB $10, $67, $00, $1C               ;08
  66++E8C2 1F 17 04 20                          DB $1F, $17, $04, $20               ;09
  67++E8C6 0B 12 08 24                          DB $0B, $12, $08, $24               ;10
  68++E8CA 1F 23 0C 24                          DB $1F, $23, $0C, $24               ;11
  69++E8CE 1F 34 10 28                          DB $1F, $34, $10, $28               ;12
  70++E8D2 0B 45 14 28                          DB $0B, $45, $14, $28               ;13
  71++E8D6 1F 56 18 2C                          DB $1F, $56, $18, $2C               ;14
  72++E8DA 11 78 1C 20                          DB $11, $78, $1C, $20               ;15
  73++E8DE 11 19 20 24                          DB $11, $19, $20, $24               ;16
  74++E8E2 11 5A 28 2C                          DB $11, $5A, $28, $2C               ;17
  75++E8E6 11 6B 1C 2C                          DB $11, $6B, $1C, $2C               ;18
  76++E8EA 13 BC 1C 3C                          DB $13, $BC, $1C, $3C               ;19
  77++E8EE 13 8C 1C 30                          DB $13, $8C, $1C, $30               ;20
  78++E8F2 10 89 20 30                          DB $10, $89, $20, $30               ;21
  79++E8F6 1F 39 24 34                          DB $1F, $39, $24, $34               ;22
  80++E8FA 1F 3A 28 38                          DB $1F, $3A, $28, $38               ;23
  81++E8FE 10 AB 2C 3C                          DB $10, $AB, $2C, $3C               ;24
  82++E902 1F 9D 30 34                          DB $1F, $9D, $30, $34               ;25
  83++E906 1F 3D 34 38                          DB $1F, $3D, $34, $38               ;26
  84++E90A 1F AD 38 3C                          DB $1F, $AD, $38, $3C               ;27
  85++E90E 1F CD 30 3C                          DB $1F, $CD, $30, $3C               ;28
  86++E912 07 77 40 44                          DB $07, $77, $40, $44               ;29
  87++E916 07 77 48 4C                          DB $07, $77, $48, $4C               ;30
  88++E91A 07 77 4C 50                          DB $07, $77, $4C, $50               ;31
  89++E91E 07 77 48 50                          DB $07, $77, $48, $50               ;32
  90++E922 07 77 50 54                          DB $07, $77, $50, $54               ;33
  91++E926 07 66 58 5C                          DB $07, $66, $58, $5C               ;34
  92++E92A 07 66 5C 60                          DB $07, $66, $5C, $60               ;35
  93++E92E 07 66 60 58                          DB $07, $66, $60, $58               ;36
  94++E932 07 66 64 68                          DB $07, $66, $64, $68               ;37
  95++E936 07 66 68 6C                          DB $07, $66, $68, $6C               ;38
  96++E93A 07 66 64 6C                          DB $07, $66, $64, $6C               ;39
  97++E93E 07 66 6C 70                          DB $07, $66, $6C, $70               ;40
  98++E942 06 33 74 78                          DB $06, $33, $74, $78               ;41
  99++E946 06 33 7C 80                          DB $06, $33, $7C, $80               ;42
 100++E94A 08 00 84 88                          DB $08, $00, $84, $88               ;43
 101++E94E 05 00 88 8C                          DB $05, $00, $88, $8C               ;44
 102++E952 05 00 8C 90                          DB $05, $00, $8C, $90               ;45
 103++E956 05 00 90 84                          DB $05, $00, $90, $84               ;46
 104++E95A
 105++E95A              TransportType10EdgesSize: equ $ - TransportType10Edges
 106++E95A
 107++E95A
 108++E95A              TransportType10EdgesCnt: equ TransportType10EdgesSize/4
 109++E95A
 110++E95A
 111++E95A 3F 00 00 67  TransportType10Normals:	DB $3F, $00, $00, $67               ;01
 112++E95E BF 6F 30 07                          DB $BF, $6F, $30, $07               ;02
 113++E962 FF 69 3F 15                          DB $FF, $69, $3F, $15               ;03
 114++E966 5F 00 22 00                          DB $5F, $00, $22, $00               ;04
 115++E96A 7F 69 3F 15                          DB $7F, $69, $3F, $15               ;05
 116++E96E 3F 6F 30 07                          DB $3F, $6F, $30, $07               ;06
 117++E972 1F 08 20 03                          DB $1F, $08, $20, $03               ;07
 118++E976 9F 08 20 03                          DB $9F, $08, $20, $03               ;08
 119++E97A 93 08 22 0B                          DB $93, $08, $22, $0B               ;09
 120++E97E 9F 4B 20 4F                          DB $9F, $4B, $20, $4F               ;10
 121++E982 1F 4B 20 4F                          DB $1F, $4B, $20, $4F               ;11
 122++E986 13 08 22 0B                          DB $13, $08, $22, $0B               ;12
 123++E98A 1F 00 26 11                          DB $1F, $00, $26, $11               ;13
 124++E98E 1F 00 00 79                          DB $1F, $00, $00, $79               ;14
 125++E992
 126++E992
 127++E992              TransportType10NormalsSize: equ $ - TransportType10Normals
 128++E992              TransportType10Len: equ $ - TransportType10
 129++E992
# file closed: ./Data/ships/TransportType10.asm
  94+ E992                                      include "Data/ships/Viper.asm"
# file opened: ./Data/ships/Viper.asm
   1++E992              ; Mapping Orginal to new
   2++E992              ; 0    => 0
   3++E992              ; 1-2  => 1-2
   4++E992              ; 3    => EQU Edges
   5++E992              ; 4    => EQU Normals
   6++E992              ; 5    => EQU EdgesCnt
   7++E992              ; 6    => 6
   8++E992              ; 7    => 7
   9++E992              ; 8    => EQU VertSize
  10++E992              ; 9    => EQU EdgesCnt
  11++E992              ; 10-11=> 10-11
  12++E992              ; 12   => EQU  NormalsSize
  13++E992              ; 13   => 13
  14++E992              ; 14   => 14
  15++E992              ; 15   => 15
  16++E992              ; 16   => EQU Edges
  17++E992              ; 17   => EQU Normals
  18++E992              ; 18   => 18
  19++E992              ; 19   => 19
  20++E992              ;\ -> &5C93  \ Viper = Type 16
  21++E992 00 F9 15     Viper:                  DB $00, $F9, $15
  22++E995 05 EA                                DW ViperEdges
  23++E997 50                                   DB ViperEdgesSize
  24++E998 00 2A                                DB $00,$2A
  25++E99A 5A                                   DB ViperVertSize
  26++E99B 14                                   DB ViperEdgesCnt
  27++E99C 00 00                                DB $00,$00
  28++E99E 1C                                   DB ViperNormalsSize
  29++E99F 17 64 20                             DB $17, $64, $20
  30++E9A2 55 EA                                DW ViperNormals
  31++E9A4 01 11                                DB $01, $11
  32++E9A6 AB E9                                DW ViperVertices
  33++E9A8 00 00                                DB 0,0                      ; Type and Tactics
  34++E9AA 01                                   DB ShipCanAnger
  35++E9AB
  36++E9AB 00 00 48 1F  ViperVertices:          DB $00, $00, $48, $1F, $21, $43
  36++E9AF 21 43
  37++E9B1 00 10 18 1E                          DB $00, $10, $18, $1E, $10, $22
  37++E9B5 10 22
  38++E9B7 00 10 18 5E                          DB $00, $10, $18, $5E, $43, $55
  38++E9BB 43 55
  39++E9BD 30 00 18 3F                          DB $30, $00, $18, $3F, $42, $66
  39++E9C1 42 66
  40++E9C3 30 00 18 BF                          DB $30, $00, $18, $BF, $31, $66
  40++E9C7 31 66
  41++E9C9 18 10 18 7E                          DB $18, $10, $18, $7E, $54, $66
  41++E9CD 54 66
  42++E9CF 18 10 18 FE                          DB $18, $10, $18, $FE, $35, $66
  42++E9D3 35 66
  43++E9D5 18 10 18 3F                          DB $18, $10, $18, $3F, $20, $66
  43++E9D9 20 66
  44++E9DB 18 10 18 BF                          DB $18, $10, $18, $BF, $10, $66
  44++E9DF 10 66
  45++E9E1 20 00 18 B3                          DB $20, $00, $18, $B3, $66, $66
  45++E9E5 66 66
  46++E9E7 20 00 18 33                          DB $20, $00, $18, $33, $66, $66
  46++E9EB 66 66
  47++E9ED 08 08 18 33                          DB $08, $08, $18, $33, $66, $66
  47++E9F1 66 66
  48++E9F3 08 08 18 B3                          DB $08, $08, $18, $B3, $66, $66
  48++E9F7 66 66
  49++E9F9 08 08 18 F2                          DB $08, $08, $18, $F2, $66, $66
  49++E9FD 66 66
  50++E9FF 08 08 18 72                          DB $08, $08, $18, $72, $66, $66
  50++EA03 66 66
  51++EA05              ViperVertSize           equ $  - ViperVertices
  52++EA05 1F 42 00 0C  ViperEdges:             DB $1F, $42, $00, $0C, $1E, $21, $00, $04
  52++EA09 1E 21 00 04
  53++EA0D 1E 43 00 08                          DB $1E, $43, $00, $08, $1F, $31, $00, $10
  53++EA11 1F 31 00 10
  54++EA15 1E 20 04 1C                          DB $1E, $20, $04, $1C, $1E, $10, $04, $20
  54++EA19 1E 10 04 20
  55++EA1D 1E 54 08 14                          DB $1E, $54, $08, $14, $1E, $53, $08, $18
  55++EA21 1E 53 08 18
  56++EA25 1F 60 1C 20                          DB $1F, $60, $1C, $20, $1E, $65, $14, $18
  56++EA29 1E 65 14 18
  57++EA2D 1F 61 10 20                          DB $1F, $61, $10, $20, $1E, $63, $10, $18
  57++EA31 1E 63 10 18
  58++EA35 1F 62 0C 1C                          DB $1F, $62, $0C, $1C, $1E, $46, $0C, $14
  58++EA39 1E 46 0C 14
  59++EA3D 13 66 24 30                          DB $13, $66, $24, $30, $12, $66, $24, $34
  59++EA41 12 66 24 34
  60++EA45 13 66 28 2C                          DB $13, $66, $28, $2C, $12, $66, $28, $38
  60++EA49 12 66 28 38
  61++EA4D 10 66 2C 38                          DB $10, $66, $2C, $38, $10, $66, $30, $34
  61++EA51 10 66 30 34
  62++EA55              ViperEdgesSize          equ $  - ViperEdges
  63++EA55              ViperEdgesCnt           equ ViperEdgesSize/4
  64++EA55 1F 00 20 00  ViperNormals            DB $1F, $00, $20, $00, $9F, $16, $21, $0B
  64++EA59 9F 16 21 0B
  65++EA5D 1F 16 21 0B                          DB $1F, $16, $21, $0B, $DF, $16, $21, $0B
  65++EA61 DF 16 21 0B
  66++EA65 5F 16 21 0B                          DB $5F, $16, $21, $0B, $5F, $00, $20, $00
  66++EA69 5F 00 20 00
  67++EA6D 3F 00 00 30                          DB $3F, $00, $00, $30
  68++EA71              ViperNormalsSize        equ $  - ViperNormals
  69++EA71              ViperLen                equ $  - Viper
  70++EA71
# file closed: ./Data/ships/Viper.asm
  95+ EA71                                      include "Data/ships/Worm.asm"
# file opened: ./Data/ships/Worm.asm
   1++EA71 00 26 49     Worm:	                DB $00, $26, $49
   2++EA74 C6 EA                                DW WormEdges
   3++EA76 40                                   DB WormEdgesSize
   4++EA77 00 12                                DB $00, $12
   5++EA79 3C                                   DB WormVertSize
   6++EA7A 10                                   DB WormEdgesCnt
   7++EA7B 00 00                                DB $00, $00
   8++EA7D 20                                   DB WormNormalsSize
   9++EA7E 13 1E 17                             DB $13, $1E, $17
  10++EA81 06 EB                                DW WormNormals
  11++EA83 03 08                                DB $03, $08
  12++EA85 8A EA                                DW WormVertices
  13++EA87 00 00                                DB 0,0                      ; Type and Tactics
  14++EA89 01                                   DB ShipCanAnger
  15++EA8A 0A 0A 23 5F  WormVertices:	        DB $0A, $0A, $23, $5F, $02, $77
  15++EA8E 02 77
  16++EA90 0A 0A 23 DF                          DB $0A, $0A, $23, $DF, $03, $77
  16++EA94 03 77
  17++EA96 05 06 0F 1F                          DB $05, $06, $0F, $1F, $01, $24
  17++EA9A 01 24
  18++EA9C 05 06 0F 9F                          DB $05, $06, $0F, $9F, $01, $35
  18++EAA0 01 35
  19++EAA2 0F 0A 19 5F                          DB $0F, $0A, $19, $5F, $24, $77
  19++EAA6 24 77
  20++EAA8 0F 0A 19 DF                          DB $0F, $0A, $19, $DF, $35, $77
  20++EAAC 35 77
  21++EAAE 1A 0A 19 7F                          DB $1A, $0A, $19, $7F, $46, $77
  21++EAB2 46 77
  22++EAB4 1A 0A 19 FF                          DB $1A, $0A, $19, $FF, $56, $77
  22++EAB8 56 77
  23++EABA 08 0E 19 3F                          DB $08, $0E, $19, $3F, $14, $66
  23++EABE 14 66
  24++EAC0 08 0E 19 BF                          DB $08, $0E, $19, $BF, $15, $66
  24++EAC4 15 66
  25++EAC6
  26++EAC6              WormVertSize: equ $ - WormVertices
  27++EAC6
  28++EAC6
  29++EAC6 1F 07 00 04  WormEdges:	            DB $1F, $07, $00, $04
  30++EACA 1F 37 04 14                          DB $1F, $37, $04, $14
  31++EACE 1F 57 14 1C                          DB $1F, $57, $14, $1C
  32++EAD2 1F 67 1C 18                          DB $1F, $67, $1C, $18
  33++EAD6 1F 47 18 10                          DB $1F, $47, $18, $10
  34++EADA 1F 27 10 00                          DB $1F, $27, $10, $00
  35++EADE 1F 02 00 08                          DB $1F, $02, $00, $08
  36++EAE2 1F 03 04 0C                          DB $1F, $03, $04, $0C
  37++EAE6 1F 24 10 08                          DB $1F, $24, $10, $08
  38++EAEA 1F 35 14 0C                          DB $1F, $35, $14, $0C
  39++EAEE 1F 14 08 20                          DB $1F, $14, $08, $20
  40++EAF2 1F 46 20 18                          DB $1F, $46, $20, $18
  41++EAF6 1F 15 0C 24                          DB $1F, $15, $0C, $24
  42++EAFA 1F 56 24 1C                          DB $1F, $56, $24, $1C
  43++EAFE 1F 01 08 0C                          DB $1F, $01, $08, $0C
  44++EB02 1F 16 20 24                          DB $1F, $16, $20, $24
  45++EB06
  46++EB06              WormEdgesSize: equ $ - WormEdges
  47++EB06
  48++EB06
  49++EB06              WormEdgesCnt: equ WormEdgesSize/4
  50++EB06
  51++EB06
  52++EB06 1F 00 58 46  WormNormals:	        DB $1F, $00, $58, $46
  53++EB0A 1F 00 45 0E                          DB $1F, $00, $45, $0E
  54++EB0E 1F 46 42 23                          DB $1F, $46, $42, $23
  55++EB12 9F 46 42 23                          DB $9F, $46, $42, $23
  56++EB16 1F 40 31 0E                          DB $1F, $40, $31, $0E
  57++EB1A 9F 40 31 0E                          DB $9F, $40, $31, $0E
  58++EB1E 3F 00 00 C8                          DB $3F, $00, $00, $C8
  59++EB22 5F 00 50 00                          DB $5F, $00, $50, $00
  60++EB26
  61++EB26
  62++EB26              WormNormalsSize: equ $ - WormNormals
  63++EB26              WormLen: equ $ - Worm
  64++EB26
# file closed: ./Data/ships/Worm.asm
  96+ EB26                                      include "Data/ships/Rattler.asm"
# file opened: ./Data/ships/Rattler.asm
   1++EB26 02 17 70     Rattler:	            DB $02, $17, $70
   2++EB29 99 EB                                DW RattlerEdges
   3++EB2B 68                                   DB RattlerEdgesSize
   4++EB2C 00 2A                                DB $00, $2A
   5++EB2E 5A                                   DB RattlerVertSize
   6++EB2F 1A                                   DB RattlerEdgesCnt
   7++EB30 00 96                                DB $00, $96
   8++EB32 34                                   DB RattlerNormalsSize
   9++EB33 0A 71 1F                             DB $0A, $71, $1F
  10++EB36 01 EC                                DW RattlerNormals
  11++EB38 01 22                                DB $01, $22
  12++EB3A 3F EB                                DW RattlerVertices
  13++EB3C 00 00                                DB 0,0                      ; Type and Tactics
  14++EB3E 01                                   DB ShipCanAnger
  15++EB3F
  16++EB3F
  17++EB3F 00 00 3C 1F  RattlerVertices:	DB $00, $00, $3C, $1F, $89, $23
  17++EB43 89 23
  18++EB45 28 00 28 1F  	DB $28, $00, $28, $1F, $9A, $34
  18++EB49 9A 34
  19++EB4B 28 00 28 9F  	DB $28, $00, $28, $9F, $78, $12
  19++EB4F 78 12
  20++EB51 3C 00 00 1F  	DB $3C, $00, $00, $1F, $AB, $45
  20++EB55 AB 45
  21++EB57 3C 00 00 9F  	DB $3C, $00, $00, $9F, $67, $01
  21++EB5B 67 01
  22++EB5D 46 00 28 3F  	DB $46, $00, $28, $3F, $CC, $5B
  22++EB61 CC 5B
  23++EB63 46 00 28 BF  	DB $46, $00, $28, $BF, $CC, $06
  23++EB67 CC 06
  24++EB69 00 14 28 3F  	DB $00, $14, $28, $3F, $FF, $FF
  24++EB6D FF FF
  25++EB6F 00 14 28 7F  	DB $00, $14, $28, $7F, $FF, $FF
  25++EB73 FF FF
  26++EB75 0A 06 28 AA  	DB $0A, $06, $28, $AA, $CC, $CC
  26++EB79 CC CC
  27++EB7B 0A 06 28 EA  	DB $0A, $06, $28, $EA, $CC, $CC
  27++EB7F CC CC
  28++EB81 14 00 28 AA  	DB $14, $00, $28, $AA, $CC, $CC
  28++EB85 CC CC
  29++EB87 0A 06 28 2A  	DB $0A, $06, $28, $2A, $CC, $CC
  29++EB8B CC CC
  30++EB8D 0A 06 28 6A  	DB $0A, $06, $28, $6A, $CC, $CC
  30++EB91 CC CC
  31++EB93 14 00 28 2A  	DB $14, $00, $28, $2A, $CC, $CC
  31++EB97 CC CC
  32++EB99
  33++EB99              RattlerVertSize: equ $ - RattlerVertices
  34++EB99
  35++EB99
  36++EB99 1F 06 10 18  RattlerEdges:	DB $1F, $06, $10, $18
  37++EB9D 1F 17 08 10  	DB $1F, $17, $08, $10
  38++EBA1 1F 28 00 08  	DB $1F, $28, $00, $08
  39++EBA5 1F 39 00 04  	DB $1F, $39, $00, $04
  40++EBA9 1F 4A 04 0C  	DB $1F, $4A, $04, $0C
  41++EBAD 1F 5B 0C 14  	DB $1F, $5B, $0C, $14
  42++EBB1 1F 0C 18 1C  	DB $1F, $0C, $18, $1C
  43++EBB5 1F 6C 18 20  	DB $1F, $6C, $18, $20
  44++EBB9 1F 01 10 1C  	DB $1F, $01, $10, $1C
  45++EBBD 1F 67 10 20  	DB $1F, $67, $10, $20
  46++EBC1 1F 12 08 1C  	DB $1F, $12, $08, $1C
  47++EBC5 1F 78 08 20  	DB $1F, $78, $08, $20
  48++EBC9 1F 23 00 1C  	DB $1F, $23, $00, $1C
  49++EBCD 1F 89 00 20  	DB $1F, $89, $00, $20
  50++EBD1 1F 34 04 1C  	DB $1F, $34, $04, $1C
  51++EBD5 1F 9A 04 20  	DB $1F, $9A, $04, $20
  52++EBD9 1F 45 0C 1C  	DB $1F, $45, $0C, $1C
  53++EBDD 1F AB 0C 20  	DB $1F, $AB, $0C, $20
  54++EBE1 1F 5C 14 1C  	DB $1F, $5C, $14, $1C
  55++EBE5 1F BC 14 20  	DB $1F, $BC, $14, $20
  56++EBE9 0A CC 24 28  	DB $0A, $CC, $24, $28
  57++EBED 0A CC 28 2C  	DB $0A, $CC, $28, $2C
  58++EBF1 0A CC 2C 24  	DB $0A, $CC, $2C, $24
  59++EBF5 0A CC 30 34  	DB $0A, $CC, $30, $34
  60++EBF9 0A CC 34 38  	DB $0A, $CC, $34, $38
  61++EBFD 0A CC 38 30  	DB $0A, $CC, $38, $30
  62++EC01
  63++EC01              RattlerEdgesSize: equ $ - RattlerEdges
  64++EC01
  65++EC01
  66++EC01              RattlerEdgesCnt: equ RattlerEdgesSize/4
  67++EC01
  68++EC01
  69++EC01 9F 1A 5C 06  RattlerNormals:	DB $9F, $1A, $5C, $06
  70++EC05 9F 17 5C 0B  	DB $9F, $17, $5C, $0B
  71++EC09 9F 09 5D 12  	DB $9F, $09, $5D, $12
  72++EC0D 1F 09 5D 12  	DB $1F, $09, $5D, $12
  73++EC11 1F 17 5C 0B  	DB $1F, $17, $5C, $0B
  74++EC15 1F 1A 5C 06  	DB $1F, $1A, $5C, $06
  75++EC19 DF 1A 5C 06  	DB $DF, $1A, $5C, $06
  76++EC1D DF 17 5C 0B  	DB $DF, $17, $5C, $0B
  77++EC21 DF 09 5D 12  	DB $DF, $09, $5D, $12
  78++EC25 5F 09 5D 12  	DB $5F, $09, $5D, $12
  79++EC29 5F 17 5C 0B  	DB $5F, $17, $5C, $0B
  80++EC2D 5F 1A 5C 06  	DB $5F, $1A, $5C, $06
  81++EC31 3F 00 00 60  	DB $3F, $00, $00, $60
  82++EC35
  83++EC35              RattlerNormalsSize: equ $ - RattlerNormals
  84++EC35              RattlerLen: equ $ - Rattler
  85++EC35
# file closed: ./Data/ships/Rattler.asm
  97+ EC35
# file closed: ./Data/ShipModelMetaData3.asm
1369  EC35              ;;Privisioned for more models ; Bank 69  ------------------------------------------------------------------------------------------------------------------------
1370  EC35              ;;Privisioned for more models     SLOT    ShipModelsAddr
1371  EC35              ;;Privisioned for more models     PAGE    BankShipModels4
1372  EC35              ;;Privisioned for more models 	ORG     ShipModelsAddr, BankShipModels4
1373  EC35
1374  EC35              ; Bank 60  ------------------------------------------------------------------------------------------------------------------------
1375  EC35                  SLOT    SpritemembankAddr
1376  EC35                  PAGE    BankSPRITE
1377  EC35              	ORG     SpritemembankAddr, BankSPRITE
1378  E000                  INCLUDE "./Layer3Sprites/sprite_routines.asm"
# file opened: ./Layer3Sprites/sprite_routines.asm
   1+ E000
   2+ E000              galactic_cursor_sprite				equ	0
   3+ E000              galactic_cursor_sprite1				equ	galactic_cursor_sprite+1
   4+ E000              galactic_cursor_sprite2				equ	galactic_cursor_sprite1+2
   5+ E000
   6+ E000              galactic_hyper_sprite				equ	galactic_cursor_sprite2+1
   7+ E000              ;galactic_hyper_sprite1				equ galactic_hyper_sprite+1
   8+ E000              ;galactic_hyper_sprite2				equ	galactic_hyper_sprite1+1
   9+ E000
  10+ E000              local_cursor_sprite					equ	galactic_hyper_sprite+1
  11+ E000              local_cursor_sprite1				equ	local_cursor_sprite+1
  12+ E000              local_cursor_sprite2				equ	local_cursor_sprite1+1
  13+ E000
  14+ E000              local_hyper_sprite					equ	local_cursor_sprite2+1
  15+ E000              local_hyper_sprite1					equ	local_hyper_sprite+1
  16+ E000              local_hyper_sprite2					equ	local_hyper_sprite1+2
  17+ E000
  18+ E000              reticlule_sprite1                   equ	local_hyper_sprite2+1
  19+ E000              reticlule_sprite2                   equ	reticlule_sprite1+1
  20+ E000              reticlule_sprite3                   equ	reticlule_sprite2+1
  21+ E000              reticlule_sprite4                   equ reticlule_sprite3+1
  22+ E000
  23+ E000              laser_sprite1                       equ	reticlule_sprite4+1
  24+ E000              laser_sprite2                       equ	laser_sprite1    +1
  25+ E000              laser_sprite3                       equ	laser_sprite2    +1
  26+ E000              laser_sprite4                       equ laser_sprite3    +1
  27+ E000              laser_sprite5                       equ	laser_sprite4    +1
  28+ E000              laser_sprite6                       equ	laser_sprite5    +1
  29+ E000              laser_sprite7                       equ	laser_sprite6    +1
  30+ E000              laser_sprite8                       equ laser_sprite7    +1
  31+ E000              laser_sprite9                       equ	laser_sprite8    +1
  32+ E000              laser_sprite10                      equ	laser_sprite9    +1
  33+ E000              laser_sprite11                      equ	laser_sprite10   +1
  34+ E000              laser_sprite12                      equ laser_sprite11   +1
  35+ E000              laser_sprite13                      equ	laser_sprite12   +1
  36+ E000              laser_sprite14                      equ	laser_sprite13   +1
  37+ E000              laser_sprite15                      equ	laser_sprite14   +1
  38+ E000              laser_sprite16                      equ laser_sprite15   +1
  39+ E000
  40+ E000              compass_sun                         equ laser_sprite16   +1
  41+ E000              compass_station                     equ compass_sun      +1
  42+ E000
  43+ E000              glactic_pattern_1					equ 0
  44+ E000              glactic_hyper_pattern_1             equ 2
  45+ E000              local_present_cursor                equ 4
  46+ E000              local_hyper_pattern                 equ 7
  47+ E000              reticule_pattern_1                  equ 10
  48+ E000              reticule_pattern_2                  equ 11
  49+ E000              laser_pattern_1                     equ 12
  50+ E000              laser_pattern_2                     equ 13
  51+ E000              laser_pattern_3                     equ 14
  52+ E000              laser_pattern_4                     equ 15
  53+ E000              laser_pattern_5                     equ 16
  54+ E000
  55+ E000              compass_sun_infront                 equ 17
  56+ E000              compass_sun_behind                  equ 18
  57+ E000              compass_station_infront             equ 19
  58+ E000              compass_station_behind              equ 20
  59+ E000              spritecursoroffset					equ 17
  60+ E000              spriteborderoffset                  equ 32
  61+ E000
  62+ E000              HideSprite:                 MACRO   spritenbr
  63+ E000 ~                                        nextreg		SPRITE_PORT_INDEX_REGISTER,spritenbr
  64+ E000 ~                                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
  65+ E000                                          ENDM
  66+ E000
  67+ E000              ; " sprite_big BC = rowcol, D = sprite nbr , E= , pattern"
  68+ E000              sprite_big:
  69+ E000 7A           .SetAnchor:	                ld		a,d                                 ; a = sprite nbr, bug fix?
  70+ E001 F5                                       push	af									; save id for next few
  71+ E002 D5                                       push	de
  72+ E003 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
  73+ E006              ; write out X position bits 1 to 8
  74+ E006 79                                       ld		a,c
  75+ E007 21 11 00                                 ld      hl,spritecursoroffset
  76+ E00A ED 31                                    add		hl,a                                ; hl = full x position
  77+ E00C 7D                                       ld		a,l
  78+ E00D ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
  79+ E010              ; write out Y position bits 1 to 8
  80+ E010 EB                                       ex		de,hl								; de = full x position
  81+ E011 78                                       ld		a,b
  82+ E012 21 11 00                                 ld      hl,spritecursoroffset
  83+ E015 ED 31                                    add		hl,a
  84+ E017 7D                                       ld		a,l                                 ; hl = full y position
  85+ E018 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
  86+ E01B              ; write out MSB of X as its an anchor
  87+ E01B 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
  88+ E01C ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
  89+ E01F              ; write out sprite pattern
  90+ E01F D1                                       pop		de                                  ; de = pattern and sprite nbr
  91+ E020 7B                                       ld		a,e
  92+ E021 F6 C0                                    or		%11000000							;
  93+ E023 ED 92 38                                 nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
  94+ E026              ; write out msb of y in h must be bit 0 only
  95+ E026 3E 00                                    ld		a,%00000000							; big unified composite
  96+ E028 B4                                       or		h									; MSB Y
  97+ E029 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
  98+ E02C F1           .BigSprite1:                pop		af
  99+ E02D 3C                                       inc		a
 100+ E02E F5                                       push	af
 101+ E02F ED 92 34                                 nextreg		SPRITE_PORT_INDEX_REGISTER,a
 102+ E032 3E 10                                    ld		a,16
 103+ E034 ED 92 35                                 nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 104+ E037 AF                                       xor 	a
 105+ E038 ED 92 36                                 nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 106+ E03B ED 92 37                                 nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 107+ E03E 3E C1                                    ld		a,%11000001							; relative and 4 bytes of data, pattern 1
 108+ E040 ED 92 38                                 nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 109+ E043 3E 41                                    ld		a,%01000001							; big unified composite
 110+ E045 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 111+ E048 F1           .BigSprite2:                pop		af
 112+ E049 3C                                       inc		a
 113+ E04A ED 92 34                                 nextreg		SPRITE_PORT_INDEX_REGISTER,a
 114+ E04D AF                                       xor		a
 115+ E04E ED 92 35                                 nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 116+ E051 3E 10                                    ld		a,16
 117+ E053 ED 92 36                                 nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 118+ E056 AF                                       xor		a
 119+ E057 ED 92 37                                 nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 120+ E05A 3E C2                                    ld		a,%11000010							; relative and 4 bytes of data, pattern 2
 121+ E05C ED 92 38                                 nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 122+ E05F 3E 41                                    ld		a,%01000001							; big unified composite
 123+ E061 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 124+ E064 C9                                       ret
 125+ E065
 126+ E065              ; for a sinle sprite within 256x192 area
 127+ E065 7A           sprite_single:          ld		a,d                                 ; a = sprite nbr, bug fix?
 128+ E066 D5                                   push    de
 129+ E067 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 130+ E06A              ; write out X position bits 1 to 8
 131+ E06A 79                                   ld		a,c                                 ; a = column (c)
 132+ E06B 21 20 00                             ld      hl,spriteborderoffset
 133+ E06E ED 31                                add		hl,a                                ; hl = full x position
 134+ E070 EB                                   ex		de,hl								; de = full x position
 135+ E071 7B                                   ld		a,e
 136+ E072 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 137+ E075              ; write out Y position bits 1 to 8
 138+ E075 78                                   ld		a,b                                 ; a = row
 139+ E076 21 20 00                             ld      hl,spriteborderoffset
 140+ E079 ED 31                                add		hl,a
 141+ E07B 7D                                   ld		a,l                                 ; hl = full y position
 142+ E07C ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 143+ E07F              ; write out MSB of X as its an anchor
 144+ E07F 7A                                   ld		a,d									; de = MSB of X (hl bit 0)
 145+ E080 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 146+ E083              ; write out sprite pattern
 147+ E083 D1                                   pop     de
 148+ E084 7B                                   ld		a,e
 149+ E085 F6 80                                or		%10000000							;
 150+ E087 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 151+ E08A              ; write out extended attribute
 152+ E08A 3E 00                                ld      a,%00000000                         ; its a single sprite
 153+ E08C B4                                   or      h
 154+ E08D ED 92 39                             nextreg	SPRITE_PORT_ATTR4_REGISTER,a
 155+ E090 C9                                   ret
 156+ E091              ; ">sprite_galactic_cursor BC = rowcol"
 157+ E091 16 00        sprite_galactic_cursor:     ld		d,galactic_cursor_sprite
 158+ E093 1E 00                                    ld		e,0
 159+ E095 78                                       ld		a,b
 160+ E096 C6 18                                    add		a,galactic_chart_y_offset
 161+ E098 47                                       ld		b,a
 162+ E099 CD 00 E0                                 call	sprite_big
 163+ E09C C9                                       ret
 164+ E09D
 165+ E09D              ; "> sprite_galactic_hyper_cursorBC = rowcol"
 166+ E09D 78           sprite_galactic_hyper_cursor:ld		a,b
 167+ E09E C6 04                                    add		a,galactic_chart_hyper_offset
 168+ E0A0 47                                       ld		b,a
 169+ E0A1 16 04                                    ld		d,galactic_hyper_sprite
 170+ E0A3 1E 03                                    ld		e,3
 171+ E0A5 CD 65 E0                                 call	sprite_single ; sprite_big:
 172+ E0A8 C9                                       ret
 173+ E0A9              ; moves hyperspace cursor to target system x position
 174+ E0A9 3E 04        sprite_ghc_move:            ld		a,galactic_hyper_sprite
 175+ E0AB ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 176+ E0AE              ; write out X position bits 1 to 8
 177+ E0AE 79                                       ld		a,c
 178+ E0AF 21 1C 00                                 ld      hl,galactic_chart_hyper_x_offset
 179+ E0B2 ED 31                                    add		hl,a                                ; hl = full x position
 180+ E0B4 7D                                       ld		a,l
 181+ E0B5 ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 182+ E0B8              ; write out Y position bits 1 to 8
 183+ E0B8 EB                                       ex		de,hl								; de = full x position
 184+ E0B9 CB 38                                    srl		b			    					; row is row / 2
 185+ E0BB 78                                       ld      a,b
 186+ E0BC 21 34 00                                 ld      hl,galactic_chart_hyper_y_offset
 187+ E0BF ED 31                                    add		hl,a
 188+ E0C1 7D                                       ld		a,l                                 ; hl = full y position
 189+ E0C2 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 190+ E0C5              ; write out MSB of X as its an anchor
 191+ E0C5 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 192+ E0C6 ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 193+ E0C9              ; write out msb of y in h must be bit 0 only
 194+ E0C9 3E 00                                    ld		a,%00000000							; big unified composite
 195+ E0CB B2                                       or		d									; MSB Y
 196+ E0CC ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 197+ E0CF C9                                       ret
 198+ E0D0
 199+ E0D0
 200+ E0D0 3E 08        sprite_lhc_move:            ld		a,local_hyper_sprite
 201+ E0D2 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 202+ E0D5              ; write out X position bits 1 to 8
 203+ E0D5 79                                       ld		a,c
 204+ E0D6 21 11 00                                 ld      hl,spritecursoroffset
 205+ E0D9 ED 31                                    add		hl,a                                ; hl = full x position
 206+ E0DB 7D                                       ld		a,l
 207+ E0DC ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 208+ E0DF              ; write out Y position bits 1 to 8
 209+ E0DF EB                                       ex		de,hl								; de = full x position
 210+ E0E0 78                                       ld		a,b
 211+ E0E1 21 11 00                                 ld      hl,spritecursoroffset
 212+ E0E4 ED 31                                    add		hl,a
 213+ E0E6 7D                                       ld		a,l                                 ; hl = full y position
 214+ E0E7 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 215+ E0EA              ; write out MSB of X as its an anchor
 216+ E0EA 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 217+ E0EB ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 218+ E0EE              ; write out msb of y in h must be bit 0 only
 219+ E0EE 3E 00                                    ld		a,%00000000							; big unified composite
 220+ E0F0 B2                                       or		d									; MSB Y
 221+ E0F1 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 222+ E0F4 C9                                       ret
 223+ E0F5
 224+ E0F5              ; "sprite_local_cursor BC = rowcol"
 225+ E0F5 16 05        sprite_local_cursor:        ld		d,local_cursor_sprite
 226+ E0F7 1E 04                                    ld		e,local_present_cursor
 227+ E0F9 CD 00 E0                                 call	sprite_big
 228+ E0FC C9                                       ret
 229+ E0FD
 230+ E0FD              ; "sprite_local_hyper_cursor BC = rowcol"
 231+ E0FD 16 08        sprite_local_hyper_cursor:  ld		d,local_hyper_sprite
 232+ E0FF 1E 07                                    ld		e,local_hyper_pattern
 233+ E101 CD 00 E0                                 call	sprite_big
 234+ E104 C9                                       ret
 235+ E105
 236+ E105              compass_offset              equ 2
 237+ E105              ScannerX                    equ 128
 238+ E105              ScannerY                    equ 171
 239+ E105              SunScanCenterX              equ 92
 240+ E105              SunScanCenterY              equ 171
 241+ E105
 242+ E105 3E 20        compass_sun_move:       ld		a,compass_sun
 243+ E107 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 244+ E10A              ; write out X position bits 1 to 8
 245+ E10A 3E 5A                                ld      a, SunScanCenterX-compass_offset
 246+ E10C 81                                   add     a,c
 247+ E10D ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 248+ E110              ; write out Y position bits 1 to 8
 249+ E110 3E A9                                ld      a, SunScanCenterY-compass_offset
 250+ E112 90                                   sub     b
 251+ E113 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 252+ E116 C9                                   ret
 253+ E117
 254+ E117 3E 21        compass_station_move:   ld		a,compass_station
 255+ E119 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 256+ E11C              ; write out X position bits 1 to 8
 257+ E11C 79                                   ld		a,c
 258+ E11D 21 02 00                             ld      hl,compass_offset
 259+ E120 ED 31                                add		hl,a                                ; hl = full x position
 260+ E122 7D                                   ld		a,l
 261+ E123 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 262+ E126              ; write out Y position bits 1 to 8
 263+ E126 EB                                   ex		de,hl								; de = full x position
 264+ E127 78                                   ld		a,b
 265+ E128 21 02 00                             ld      hl,compass_offset           ;TODO Needs to be subtract
 266+ E12B ED 31                                add		hl,a
 267+ E12D 7D                                   ld		a,l                                 ; hl = full y position
 268+ E12E ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 269+ E131              ; write out MSB of X as its an anchor
 270+ E131 7A                                   ld		a,d									; de = MSB of X (hl bit 0)
 271+ E132 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 272+ E135 C9                                   ret
 273+ E136
 274+ E136              ReticuleCentreX      EQU (256/2)+32 -1
 275+ E136              ReticuleCentreY      EQU (192/2)+32 -1
 276+ E136              ReticuleOffset       EQU 8
 277+ E136
 278+ E136 3E 0C        sprite_reticule:        ld      a,reticlule_sprite1                 ; LEFT ARM
 279+ E138 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 280+ E13B 3E 87                                ld      a,ReticuleCentreX -16 - ReticuleOffset
 281+ E13D ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 282+ E140 3E 7F                                ld		a,ReticuleCentreY
 283+ E142 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 284+ E145 AF                                   xor     a
 285+ E146 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 286+ E149 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 287+ E14B ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 288+ E14E 3E 0D        .rightReticule          ld      a,reticlule_sprite2                 ; RIGHT ARM
 289+ E150 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 290+ E153 3E A7                                ld      a,ReticuleCentreX + ReticuleOffset
 291+ E155 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 292+ E158 3E 7F                                ld		a,ReticuleCentreY
 293+ E15A ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 294+ E15D 3E 08                                ld      a,%00001000
 295+ E15F ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 296+ E162 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 297+ E164 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 298+ E167 3E 0E        .topReticule            ld      a,reticlule_sprite3
 299+ E169 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 300+ E16C 3E 9F                                ld      a,ReticuleCentreX
 301+ E16E ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 302+ E171 3E 67                                ld		a,ReticuleCentreY-16 - ReticuleOffset
 303+ E173 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 304+ E176 AF                                   xor     a
 305+ E177 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 306+ E17A 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 307+ E17C ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 308+ E17F 3E 0F        .bottomReticule         ld      a,reticlule_sprite4
 309+ E181 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 310+ E184 3E 9F                                ld      a,ReticuleCentreX
 311+ E186 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 312+ E189 3E 87                                ld		a,ReticuleCentreY + ReticuleOffset
 313+ E18B ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 314+ E18E 3E 04                                ld      a,%00000100
 315+ E190 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring vertical
 316+ E193 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 317+ E195 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 318+ E198 C9                                   ret
 319+ E199
 320+ E199              laserbasex              equ 6
 321+ E199              laserbasey              equ 14
 322+ E199
 323+ E199              ShowSprite              MACRO   spritenbr, patternnbr
 324+ E199 ~                                    ld      a, spritenbr
 325+ E199 ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 326+ E199 ~                                    ld      a,patternnbr | %10000000
 327+ E199 ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 328+ E199                                      ENDM
 329+ E199
 330+ E199              LeftLaser:              MACRO   xoffset, yoffset, spriteL, patternL
 331+ E199 ~                                    ld      a, spriteL
 332+ E199 ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 333+ E199 ~                                    ld      a,((laserbasex + xoffset) *8) + 32
 334+ E199 ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 335+ E199 ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 336+ E199 ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 337+ E199 ~                                    xor     a
 338+ E199 ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 339+ E199 ~                                    ld      a, patternL | %00000000             ; hidden by default
 340+ E199 ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 341+ E199                                      ENDM
 342+ E199
 343+ E199              RightLaser:             MACRO   xoffset, yoffset, spriteL, patternL
 344+ E199 ~                                    ld      a, spriteL
 345+ E199 ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 346+ E199 ~                                    ld      a,(((30-laserbasex) - xoffset) *8) + 32 -2
 347+ E199 ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 348+ E199 ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 349+ E199 ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 350+ E199 ~                                    ld      a,%00001000
 351+ E199 ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 352+ E199 ~                                    ld      a, patternL | %00000000             ; hidden by default
 353+ E199 ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 354+ E199                                      ENDM
 355+ E199
 356+ E199
 357+ E199              show_compass_sun_infront:ShowSprite  compass_sun, compass_sun_infront
 357+ E199 3E 20       >                        ld      a, compass_sun
 357+ E19B ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 357+ E19E 3E 91       >                        ld      a,compass_sun_infront | %10000000
 357+ E1A0 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 358+ E1A3 C9                                    ret
 359+ E1A4
 360+ E1A4              show_compass_sun_behind: ShowSprite  compass_sun, compass_sun_behind
 360+ E1A4 3E 20       >                        ld      a, compass_sun
 360+ E1A6 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 360+ E1A9 3E 92       >                        ld      a,compass_sun_behind | %10000000
 360+ E1AB ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 361+ E1AE C9                                    ret
 362+ E1AF
 363+ E1AF              show_compass_station_infront: ShowSprite  compass_station, compass_station_infront
 363+ E1AF 3E 21       >                        ld      a, compass_station
 363+ E1B1 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 363+ E1B4 3E 93       >                        ld      a,compass_station_infront | %10000000
 363+ E1B6 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 364+ E1B9 C9                                    ret
 365+ E1BA
 366+ E1BA              show_compass_statin_behind:   ShowSprite  compass_station, compass_station_behind
 366+ E1BA 3E 21       >                        ld      a, compass_station
 366+ E1BC ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 366+ E1BF 3E 94       >                        ld      a,compass_station_behind | %10000000
 366+ E1C1 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 367+ E1C4 C9                                    ret
 368+ E1C5
 369+ E1C5
 370+ E1C5              sprite_laser:           LeftLaser  0,0,laser_sprite1 ,laser_pattern_1
 370+ E1C5 3E 10       >                        ld      a, laser_sprite1
 370+ E1C7 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 370+ E1CA 3E 50       >                        ld      a,((laserbasex + 0) *8) + 32
 370+ E1CC ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 370+ E1CF 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 370+ E1D1 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 370+ E1D4 AF          >                        xor     a
 370+ E1D5 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 370+ E1D8 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 370+ E1DA ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 371+ E1DD                                      LeftLaser  2,0,laser_sprite2 ,laser_pattern_2
 371+ E1DD 3E 11       >                        ld      a, laser_sprite2
 371+ E1DF ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 371+ E1E2 3E 60       >                        ld      a,((laserbasex + 2) *8) + 32
 371+ E1E4 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 371+ E1E7 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 371+ E1E9 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 371+ E1EC AF          >                        xor     a
 371+ E1ED ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 371+ E1F0 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 371+ E1F2 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 372+ E1F5                                      LeftLaser  4,1,laser_sprite3 ,laser_pattern_3
 372+ E1F5 3E 12       >                        ld      a, laser_sprite3
 372+ E1F7 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 372+ E1FA 3E 70       >                        ld      a,((laserbasex + 4) *8) + 32
 372+ E1FC ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 372+ E1FF 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 372+ E201 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 372+ E204 AF          >                        xor     a
 372+ E205 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 372+ E208 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 372+ E20A ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 373+ E20D                                      LeftLaser  6,1,laser_sprite4 ,laser_pattern_4
 373+ E20D 3E 13       >                        ld      a, laser_sprite4
 373+ E20F ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 373+ E212 3E 80       >                        ld      a,((laserbasex + 6) *8) + 32
 373+ E214 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 373+ E217 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 373+ E219 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 373+ E21C AF          >                        xor     a
 373+ E21D ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 373+ E220 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 373+ E222 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 374+ E225                                      LeftLaser  8,2,laser_sprite5 ,laser_pattern_5
 374+ E225 3E 14       >                        ld      a, laser_sprite5
 374+ E227 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 374+ E22A 3E 90       >                        ld      a,((laserbasex + 8) *8) + 32
 374+ E22C ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 374+ E22F 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 374+ E231 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 374+ E234 AF          >                        xor     a
 374+ E235 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 374+ E238 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 374+ E23A ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 375+ E23D                                      RightLaser 0,0,laser_sprite9 ,laser_pattern_1
 375+ E23D 3E 18       >                        ld      a, laser_sprite9
 375+ E23F ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 375+ E242 3E DE       >                        ld      a,(((30-laserbasex) - 0) *8) + 32 -2
 375+ E244 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 375+ E247 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 375+ E249 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 375+ E24C 3E 08       >                        ld      a,%00001000
 375+ E24E ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 375+ E251 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 375+ E253 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 376+ E256                                      RightLaser 2,0,laser_sprite10,laser_pattern_2
 376+ E256 3E 19       >                        ld      a, laser_sprite10
 376+ E258 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 376+ E25B 3E CE       >                        ld      a,(((30-laserbasex) - 2) *8) + 32 -2
 376+ E25D ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 376+ E260 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 376+ E262 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 376+ E265 3E 08       >                        ld      a,%00001000
 376+ E267 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 376+ E26A 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 376+ E26C ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 377+ E26F                                      RightLaser 4,1,laser_sprite11,laser_pattern_3
 377+ E26F 3E 1A       >                        ld      a, laser_sprite11
 377+ E271 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 377+ E274 3E BE       >                        ld      a,(((30-laserbasex) - 4) *8) + 32 -2
 377+ E276 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 377+ E279 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 377+ E27B ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 377+ E27E 3E 08       >                        ld      a,%00001000
 377+ E280 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 377+ E283 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 377+ E285 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 378+ E288                                      RightLaser 6,1,laser_sprite12,laser_pattern_4
 378+ E288 3E 1B       >                        ld      a, laser_sprite12
 378+ E28A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 378+ E28D 3E AE       >                        ld      a,(((30-laserbasex) - 6) *8) + 32 -2
 378+ E28F ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 378+ E292 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 378+ E294 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 378+ E297 3E 08       >                        ld      a,%00001000
 378+ E299 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 378+ E29C 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 378+ E29E ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 379+ E2A1                                      RightLaser 8,2,laser_sprite13,laser_pattern_5
 379+ E2A1 3E 1C       >                        ld      a, laser_sprite13
 379+ E2A3 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 379+ E2A6 3E 9E       >                        ld      a,(((30-laserbasex) - 8) *8) + 32 -2
 379+ E2A8 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 379+ E2AB 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 379+ E2AD ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 379+ E2B0 3E 08       >                        ld      a,%00001000
 379+ E2B2 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 379+ E2B5 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 379+ E2B7 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 380+ E2BA C9                                   ret
 381+ E2BB                                      ; Need simple show updates just to update the show attribute
 382+ E2BB
 383+ E2BB              sprite_laser_show:      ShowSprite laser_sprite1 ,laser_pattern_1
 383+ E2BB 3E 10       >                        ld      a, laser_sprite1
 383+ E2BD ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 383+ E2C0 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 383+ E2C2 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 384+ E2C5                                      ShowSprite laser_sprite2 ,laser_pattern_2
 384+ E2C5 3E 11       >                        ld      a, laser_sprite2
 384+ E2C7 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 384+ E2CA 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 384+ E2CC ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 385+ E2CF                                      ShowSprite laser_sprite3 ,laser_pattern_3
 385+ E2CF 3E 12       >                        ld      a, laser_sprite3
 385+ E2D1 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 385+ E2D4 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 385+ E2D6 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 386+ E2D9                                      ShowSprite laser_sprite4 ,laser_pattern_4
 386+ E2D9 3E 13       >                        ld      a, laser_sprite4
 386+ E2DB ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 386+ E2DE 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 386+ E2E0 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 387+ E2E3                                      ShowSprite laser_sprite5 ,laser_pattern_5
 387+ E2E3 3E 14       >                        ld      a, laser_sprite5
 387+ E2E5 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 387+ E2E8 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 387+ E2EA ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 388+ E2ED                                      ShowSprite laser_sprite9 ,laser_pattern_1
 388+ E2ED 3E 18       >                        ld      a, laser_sprite9
 388+ E2EF ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 388+ E2F2 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 388+ E2F4 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 389+ E2F7                                      ShowSprite laser_sprite10,laser_pattern_2
 389+ E2F7 3E 19       >                        ld      a, laser_sprite10
 389+ E2F9 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 389+ E2FC 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 389+ E2FE ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 390+ E301                                      ShowSprite laser_sprite11,laser_pattern_3
 390+ E301 3E 1A       >                        ld      a, laser_sprite11
 390+ E303 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 390+ E306 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 390+ E308 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 391+ E30B                                      ShowSprite laser_sprite12,laser_pattern_4
 391+ E30B 3E 1B       >                        ld      a, laser_sprite12
 391+ E30D ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 391+ E310 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 391+ E312 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 392+ E315                                      ShowSprite laser_sprite13,laser_pattern_5
 392+ E315 3E 1C       >                        ld      a, laser_sprite13
 392+ E317 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 392+ E31A 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 392+ E31C ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 393+ E31F C9                                   ret
 394+ E320
 395+ E320              sprite_galactic_hide:   HideSprite galactic_cursor_sprite
 395+ E320 ED 91 34 00 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite
 395+ E324 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 396+ E328                                      HideSprite galactic_cursor_sprite1
 396+ E328 ED 91 34 01 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite1
 396+ E32C ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 397+ E330                                      HideSprite galactic_cursor_sprite2
 397+ E330 ED 91 34 03 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite2
 397+ E334 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 398+ E338 C9                                   ret
 399+ E339
 400+ E339              sprite_galactic_hyper_hide:
 401+ E339                                      HideSprite galactic_hyper_sprite
 401+ E339 ED 91 34 04 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite
 401+ E33D ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 402+ E341                                       ;nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite1
 403+ E341              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 404+ E341              ;                        nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite2
 405+ E341              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 406+ E341 C9                                   ret
 407+ E342
 408+ E342              sprite_local_hide:      HideSprite local_cursor_sprite
 408+ E342 ED 91 34 05 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite
 408+ E346 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 409+ E34A                                      HideSprite local_cursor_sprite1
 409+ E34A ED 91 34 06 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite1
 409+ E34E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 410+ E352                                      HideSprite local_cursor_sprite2
 410+ E352 ED 91 34 07 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite2
 410+ E356 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 411+ E35A C9                                   ret
 412+ E35B
 413+ E35B              sprite_local_hyper_hide:HideSprite local_hyper_sprite
 413+ E35B ED 91 34 08 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite
 413+ E35F ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 414+ E363                                      HideSprite local_hyper_sprite1
 414+ E363 ED 91 34 09 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite1
 414+ E367 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 415+ E36B                                      HideSprite local_hyper_sprite2
 415+ E36B ED 91 34 0B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite2
 415+ E36F ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 416+ E373 C9                                   ret
 417+ E374
 418+ E374              sprite_reticule_hide:   HideSprite reticlule_sprite1
 418+ E374 ED 91 34 0C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite1
 418+ E378 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 419+ E37C                                      HideSprite reticlule_sprite2
 419+ E37C ED 91 34 0D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite2
 419+ E380 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 420+ E384                                      HideSprite reticlule_sprite3
 420+ E384 ED 91 34 0E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite3
 420+ E388 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 421+ E38C                                      HideSprite reticlule_sprite4
 421+ E38C ED 91 34 0F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite4
 421+ E390 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 422+ E394 C9                                   ret
 423+ E395
 424+ E395              sprite_laser_hide:      HideSprite laser_sprite1
 424+ E395 ED 91 34 10 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite1
 424+ E399 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 425+ E39D                                      HideSprite laser_sprite2
 425+ E39D ED 91 34 11 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite2
 425+ E3A1 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 426+ E3A5                                      HideSprite laser_sprite3
 426+ E3A5 ED 91 34 12 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite3
 426+ E3A9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 427+ E3AD                                      HideSprite laser_sprite4
 427+ E3AD ED 91 34 13 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite4
 427+ E3B1 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 428+ E3B5                                      HideSprite laser_sprite5
 428+ E3B5 ED 91 34 14 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite5
 428+ E3B9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 429+ E3BD                                      HideSprite laser_sprite6
 429+ E3BD ED 91 34 15 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite6
 429+ E3C1 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 430+ E3C5                                      HideSprite laser_sprite7
 430+ E3C5 ED 91 34 16 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite7
 430+ E3C9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 431+ E3CD                                      HideSprite laser_sprite8
 431+ E3CD ED 91 34 17 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite8
 431+ E3D1 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 432+ E3D5                                      HideSprite laser_sprite9
 432+ E3D5 ED 91 34 18 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite9
 432+ E3D9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 433+ E3DD                                      HideSprite laser_sprite10
 433+ E3DD ED 91 34 19 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite10
 433+ E3E1 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 434+ E3E5                                      HideSprite laser_sprite11
 434+ E3E5 ED 91 34 1A >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite11
 434+ E3E9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 435+ E3ED                                      HideSprite laser_sprite12
 435+ E3ED ED 91 34 1B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite12
 435+ E3F1 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 436+ E3F5                                      HideSprite laser_sprite13
 436+ E3F5 ED 91 34 1C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite13
 436+ E3F9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 437+ E3FD                                      HideSprite laser_sprite14
 437+ E3FD ED 91 34 1D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite14
 437+ E401 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 438+ E405                                      HideSprite laser_sprite15
 438+ E405 ED 91 34 1E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite15
 438+ E409 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 439+ E40D                                      HideSprite laser_sprite16
 439+ E40D ED 91 34 1F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite16
 439+ E411 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 440+ E415 C9                                   ret
 441+ E416
 442+ E416              sprite_compass_hide:    HideSprite compass_sun
 442+ E416 ED 91 34 20 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_sun
 442+ E41A ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 443+ E41E                                      HideSprite compass_station
 443+ E41E ED 91 34 21 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_station
 443+ E422 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 444+ E426 C9                                   ret
 445+ E427
 446+ E427 CD 20 E3     sprite_cls_cursors:     call	sprite_galactic_hide
 447+ E42A CD 39 E3                             call	sprite_galactic_hyper_hide
 448+ E42D CD 42 E3                             call	sprite_local_hide
 449+ E430 CD 5B E3                             call	sprite_local_hyper_hide
 450+ E433 CD 74 E3                             call    sprite_reticule_hide
 451+ E436 CD 95 E3                             call    sprite_laser_hide
 452+ E439 CD 16 E4                             call    sprite_compass_hide
 453+ E43C C9                                   ret
 454+ E43D
 455+ E43D CD 27 E4     init_sprites:           call		sprite_cls_cursors
 456+ E440 ED 91 15 43                          nextreg 	SPRITE_LAYERS_SYSTEM_REGISTER,%01000011
 457+ E444 C9                                   ret
 458+ E445
# file closed: ./Layer3Sprites/sprite_routines.asm
1379  E445                  INCLUDE "./Layer3Sprites/sprite_load.asm"
# file opened: ./Layer3Sprites/sprite_load.asm
   1+ E445 01 3B 30     sprite_load_sprite_data:ld			bc, $303B; SPRITE_SLOT_PORT
   2+ E448 AF                                   xor			a
   3+ E449 ED 79                                out			(c),a							; Prime slot upload
   4+ E44B 11 00 1A                             ld			de,26	* 256						; nbr of sprites to upload
   5+ E44E 21 5C E4                             ld			hl,Sprite1						; sprites are stored contiguous
   6+ E451 01 5B 00     SpriteLoadLoop:	        ld			bc, $5b; SPRITE_PATTERN_UPLOAD_PORT
   7+ E454 ED 90                                outinb											; do final 256th sprite
   8+ E456 1B                                   dec			de
   9+ E457 7A                                   ld			a,d
  10+ E458 B3                                   or			e
  11+ E459 20 F6                                jr			nz,SpriteLoadLoop				; keep on rolling through sprites
  12+ E45B C9                                   ret
  13+ E45C
# file closed: ./Layer3Sprites/sprite_load.asm
1380  E45C                  INCLUDE "./Layer3Sprites/SpriteSheet.asm"
# file opened: ./Layer3Sprites/SpriteSheet.asm
   1+ E45C              Sprite1:
   2+ E45C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   2+ E460 E3 E3 E3 E3
   2+ E464 E3 E3 E3 E3
   2+ E468 E3 E3 E3 E3
   3+ E46C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   3+ E470 E3 E3 E3 E3
   3+ E474 E3 E3 E3 E3
   3+ E478 E3 E3 E3 E3
   4+ E47C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   4+ E480 E3 E3 E3 E3
   4+ E484 E3 E3 E3 E3
   4+ E488 E3 E3 E3 E3
   5+ E48C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   5+ E490 E3 E3 E3 E3
   5+ E494 E3 E3 E3 E3
   5+ E498 E3 E3 E3 E3
   6+ E49C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   6+ E4A0 E3 E3 E3 E3
   6+ E4A4 E3 E3 E3 E3
   6+ E4A8 E3 E3 E3 E3
   7+ E4AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   7+ E4B0 E3 E3 E3 E3
   7+ E4B4 E3 E3 E3 E3
   7+ E4B8 E3 E3 E3 E3
   8+ E4BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   8+ E4C0 E3 E3 E3 E3
   8+ E4C4 E3 E3 E3 E3
   8+ E4C8 E3 E3 E3 E3
   9+ E4CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   9+ E4D0 E3 E3 E3 E3
   9+ E4D4 E3 E3 E3 E3
   9+ E4D8 E3 E3 E3 E3
  10+ E4DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  10+ E4E0 E3 E3 E3 E3
  10+ E4E4 E3 E3 E3 E3
  10+ E4E8 E3 E3 E3 90
  11+ E4EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  11+ E4F0 E3 E3 E3 E3
  11+ E4F4 E3 E3 E3 E3
  11+ E4F8 E3 E3 E3 B4
  12+ E4FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  12+ E500 E3 E3 E3 E3
  12+ E504 E3 E3 E3 E3
  12+ E508 E3 E3 E3 B4
  13+ E50C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  13+ E510 E3 E3 E3 E3
  13+ E514 E3 E3 E3 E3
  13+ E518 E3 E3 E3 D8
  14+ E51C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  14+ E520 E3 E3 E3 E3
  14+ E524 E3 E3 E3 E3
  14+ E528 E3 E3 E3 D8
  15+ E52C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  15+ E530 E3 E3 E3 E3
  15+ E534 E3 E3 E3 E3
  15+ E538 E3 E3 E3 FC
  16+ E53C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  16+ E540 E3 E3 E3 E3
  16+ E544 E3 E3 E3 E3
  16+ E548 E3 E3 E3 FC
  17+ E54C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90, $B4, $B4, $D8, $D8, $FC, $FC, $E3;
  17+ E550 E3 E3 E3 E3
  17+ E554 90 B4 B4 D8
  17+ E558 D8 FC FC E3
  18+ E55C
  19+ E55C
  20+ E55C
  21+ E55C              Sprite2:
  22+ E55C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  22+ E560 E3 E3 E3 E3
  22+ E564 E3 E3 E3 E3
  22+ E568 E3 E3 E3 E3
  23+ E56C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  23+ E570 E3 E3 E3 E3
  23+ E574 E3 E3 E3 E3
  23+ E578 E3 E3 E3 E3
  24+ E57C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  24+ E580 E3 E3 E3 E3
  24+ E584 E3 E3 E3 E3
  24+ E588 E3 E3 E3 E3
  25+ E58C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  25+ E590 E3 E3 E3 E3
  25+ E594 E3 E3 E3 E3
  25+ E598 E3 E3 E3 E3
  26+ E59C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  26+ E5A0 E3 E3 E3 E3
  26+ E5A4 E3 E3 E3 E3
  26+ E5A8 E3 E3 E3 E3
  27+ E5AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  27+ E5B0 E3 E3 E3 E3
  27+ E5B4 E3 E3 E3 E3
  27+ E5B8 E3 E3 E3 E3
  28+ E5BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  28+ E5C0 E3 E3 E3 E3
  28+ E5C4 E3 E3 E3 E3
  28+ E5C8 E3 E3 E3 E3
  29+ E5CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  29+ E5D0 E3 E3 E3 E3
  29+ E5D4 E3 E3 E3 E3
  29+ E5D8 E3 E3 E3 E3
  30+ E5DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  30+ E5E0 E3 E3 E3 E3
  30+ E5E4 E3 E3 E3 E3
  30+ E5E8 E3 E3 E3 E3
  31+ E5EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  31+ E5F0 E3 E3 E3 E3
  31+ E5F4 E3 E3 E3 E3
  31+ E5F8 E3 E3 E3 E3
  32+ E5FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  32+ E600 E3 E3 E3 E3
  32+ E604 E3 E3 E3 E3
  32+ E608 E3 E3 E3 E3
  33+ E60C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  33+ E610 E3 E3 E3 E3
  33+ E614 E3 E3 E3 E3
  33+ E618 E3 E3 E3 E3
  34+ E61C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  34+ E620 E3 E3 E3 E3
  34+ E624 E3 E3 E3 E3
  34+ E628 E3 E3 E3 E3
  35+ E62C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  35+ E630 E3 E3 E3 E3
  35+ E634 E3 E3 E3 E3
  35+ E638 E3 E3 E3 E3
  36+ E63C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  36+ E640 E3 E3 E3 E3
  36+ E644 E3 E3 E3 E3
  36+ E648 E3 E3 E3 E3
  37+ E64C FC FC D8 D8  	db  $FC, $FC, $D8, $D8, $B4, $B4, $90, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  37+ E650 B4 B4 90 E3
  37+ E654 E3 E3 E3 E3
  37+ E658 E3 E3 E3 E3
  38+ E65C
  39+ E65C
  40+ E65C
  41+ E65C              Sprite3:
  42+ E65C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  42+ E660 E3 E3 E3 E3
  42+ E664 E3 E3 E3 E3
  42+ E668 E3 E3 E3 FC
  43+ E66C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  43+ E670 E3 E3 E3 E3
  43+ E674 E3 E3 E3 E3
  43+ E678 E3 E3 E3 FC
  44+ E67C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  44+ E680 E3 E3 E3 E3
  44+ E684 E3 E3 E3 E3
  44+ E688 E3 E3 E3 D8
  45+ E68C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  45+ E690 E3 E3 E3 E3
  45+ E694 E3 E3 E3 E3
  45+ E698 E3 E3 E3 D8
  46+ E69C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  46+ E6A0 E3 E3 E3 E3
  46+ E6A4 E3 E3 E3 E3
  46+ E6A8 E3 E3 E3 B4
  47+ E6AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  47+ E6B0 E3 E3 E3 E3
  47+ E6B4 E3 E3 E3 E3
  47+ E6B8 E3 E3 E3 B4
  48+ E6BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  48+ E6C0 E3 E3 E3 E3
  48+ E6C4 E3 E3 E3 E3
  48+ E6C8 E3 E3 E3 90
  49+ E6CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  49+ E6D0 E3 E3 E3 E3
  49+ E6D4 E3 E3 E3 E3
  49+ E6D8 E3 E3 E3 E3
  50+ E6DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  50+ E6E0 E3 E3 E3 E3
  50+ E6E4 E3 E3 E3 E3
  50+ E6E8 E3 E3 E3 E3
  51+ E6EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  51+ E6F0 E3 E3 E3 E3
  51+ E6F4 E3 E3 E3 E3
  51+ E6F8 E3 E3 E3 E3
  52+ E6FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  52+ E700 E3 E3 E3 E3
  52+ E704 E3 E3 E3 E3
  52+ E708 E3 E3 E3 E3
  53+ E70C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  53+ E710 E3 E3 E3 E3
  53+ E714 E3 E3 E3 E3
  53+ E718 E3 E3 E3 E3
  54+ E71C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  54+ E720 E3 E3 E3 E3
  54+ E724 E3 E3 E3 E3
  54+ E728 E3 E3 E3 E3
  55+ E72C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  55+ E730 E3 E3 E3 E3
  55+ E734 E3 E3 E3 E3
  55+ E738 E3 E3 E3 E3
  56+ E73C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  56+ E740 E3 E3 E3 E3
  56+ E744 E3 E3 E3 E3
  56+ E748 E3 E3 E3 E3
  57+ E74C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  57+ E750 E3 E3 E3 E3
  57+ E754 E3 E3 E3 E3
  57+ E758 E3 E3 E3 E3
  58+ E75C
  59+ E75C
  60+ E75C
  61+ E75C              Sprite4:
  62+ E75C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  62+ E760 12 E3 E3 E3
  62+ E764 E3 E3 E3 E3
  62+ E768 E3 E3 E3 E3
  63+ E76C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  63+ E770 16 E3 E3 E3
  63+ E774 E3 E3 E3 E3
  63+ E778 E3 E3 E3 E3
  64+ E77C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $1A, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  64+ E780 1A E3 E3 E3
  64+ E784 E3 E3 E3 E3
  64+ E788 E3 E3 E3 E3
  65+ E78C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $1F, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  65+ E790 1F E3 E3 E3
  65+ E794 E3 E3 E3 E3
  65+ E798 E3 E3 E3 E3
  66+ E79C 12 16 1A 1F  	db  $12, $16, $1A, $1F, $E3, $1F, $1A, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  66+ E7A0 E3 1F 1A 16
  66+ E7A4 12 E3 E3 E3
  66+ E7A8 E3 E3 E3 E3
  67+ E7AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $1F, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  67+ E7B0 1F E3 E3 E3
  67+ E7B4 E3 E3 E3 E3
  67+ E7B8 E3 E3 E3 E3
  68+ E7BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $1A, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  68+ E7C0 1A E3 E3 E3
  68+ E7C4 E3 E3 E3 E3
  68+ E7C8 E3 E3 E3 E3
  69+ E7CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  69+ E7D0 16 E3 E3 E3
  69+ E7D4 E3 E3 E3 E3
  69+ E7D8 E3 E3 E3 E3
  70+ E7DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  70+ E7E0 12 E3 E3 E3
  70+ E7E4 E3 E3 E3 E3
  70+ E7E8 E3 E3 E3 E3
  71+ E7EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  71+ E7F0 E3 E3 E3 E3
  71+ E7F4 E3 E3 E3 E3
  71+ E7F8 E3 E3 E3 E3
  72+ E7FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  72+ E800 E3 E3 E3 E3
  72+ E804 E3 E3 E3 E3
  72+ E808 E3 E3 E3 E3
  73+ E80C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  73+ E810 E3 E3 E3 E3
  73+ E814 E3 E3 E3 E3
  73+ E818 E3 E3 E3 E3
  74+ E81C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  74+ E820 E3 E3 E3 E3
  74+ E824 E3 E3 E3 E3
  74+ E828 E3 E3 E3 E3
  75+ E82C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  75+ E830 E3 E3 E3 E3
  75+ E834 E3 E3 E3 E3
  75+ E838 E3 E3 E3 E3
  76+ E83C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  76+ E840 E3 E3 E3 E3
  76+ E844 E3 E3 E3 E3
  76+ E848 E3 E3 E3 E3
  77+ E84C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  77+ E850 E3 E3 E3 E3
  77+ E854 E3 E3 E3 E3
  77+ E858 E3 E3 E3 E3
  78+ E85C
  79+ E85C
  80+ E85C
  81+ E85C              Sprite5:
  82+ E85C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  82+ E860 E3 E3 E3 E3
  82+ E864 E3 E3 E3 E3
  82+ E868 E3 E3 E3 E3
  83+ E86C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
  83+ E870 E3 E3 E3 E3
  83+ E874 E3 E3 E3 E3
  83+ E878 E3 E3 E3 09
  84+ E87C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
  84+ E880 E3 E3 E3 E3
  84+ E884 E3 E3 E3 E3
  84+ E888 E3 E3 E3 09
  85+ E88C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
  85+ E890 E3 E3 E3 E3
  85+ E894 E3 E3 E3 E3
  85+ E898 E3 E3 E3 2C
  86+ E89C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
  86+ E8A0 E3 E3 E3 E3
  86+ E8A4 E3 E3 E3 E3
  86+ E8A8 E3 E3 E3 2C
  87+ E8AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
  87+ E8B0 E3 E3 E3 E3
  87+ E8B4 E3 E3 E3 E3
  87+ E8B8 E3 E3 E3 50
  88+ E8BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
  88+ E8C0 E3 E3 E3 E3
  88+ E8C4 E3 E3 E3 E3
  88+ E8C8 E3 E3 E3 50
  89+ E8CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
  89+ E8D0 E3 E3 E3 E3
  89+ E8D4 E3 E3 E3 E3
  89+ E8D8 E3 E3 E3 50
  90+ E8DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
  90+ E8E0 E3 E3 E3 E3
  90+ E8E4 E3 E3 E3 E3
  90+ E8E8 E3 E3 E3 15
  91+ E8EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
  91+ E8F0 E3 E3 E3 E3
  91+ E8F4 E3 E3 E3 E3
  91+ E8F8 E3 E3 E3 15
  92+ E8FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
  92+ E900 E3 E3 E3 E3
  92+ E904 E3 E3 E3 E3
  92+ E908 E3 E3 E3 15
  93+ E90C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
  93+ E910 E3 E3 E3 E3
  93+ E914 E3 E3 E3 E3
  93+ E918 E3 E3 E3 7C
  94+ E91C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
  94+ E920 E3 E3 E3 E3
  94+ E924 E3 E3 E3 E3
  94+ E928 E3 E3 E3 7C
  95+ E92C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
  95+ E930 E3 E3 E3 E3
  95+ E934 E3 E3 E3 E3
  95+ E938 E3 E3 E3 7C
  96+ E93C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
  96+ E940 E3 E3 E3 E3
  96+ E944 E3 E3 E3 E3
  96+ E948 E3 E3 E3 7C
  97+ E94C E3 09 09 2C  	db  $E3, $09, $09, $2C, $2C, $50, $50, $50, $15, $15, $15, $7C, $7C, $7C, $7C, $E3;
  97+ E950 2C 50 50 50
  97+ E954 15 15 15 7C
  97+ E958 7C 7C 7C E3
  98+ E95C
  99+ E95C
 100+ E95C
 101+ E95C              Sprite6:
 102+ E95C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 102+ E960 E3 E3 E3 E3
 102+ E964 E3 E3 E3 E3
 102+ E968 E3 E3 E3 E3
 103+ E96C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 103+ E970 E3 E3 E3 E3
 103+ E974 E3 E3 E3 E3
 103+ E978 E3 E3 E3 E3
 104+ E97C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 104+ E980 E3 E3 E3 E3
 104+ E984 E3 E3 E3 E3
 104+ E988 E3 E3 E3 E3
 105+ E98C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 105+ E990 E3 E3 E3 E3
 105+ E994 E3 E3 E3 E3
 105+ E998 E3 E3 E3 E3
 106+ E99C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 106+ E9A0 E3 E3 E3 E3
 106+ E9A4 E3 E3 E3 E3
 106+ E9A8 E3 E3 E3 E3
 107+ E9AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 107+ E9B0 E3 E3 E3 E3
 107+ E9B4 E3 E3 E3 E3
 107+ E9B8 E3 E3 E3 E3
 108+ E9BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 108+ E9C0 E3 E3 E3 E3
 108+ E9C4 E3 E3 E3 E3
 108+ E9C8 E3 E3 E3 E3
 109+ E9CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 109+ E9D0 E3 E3 E3 E3
 109+ E9D4 E3 E3 E3 E3
 109+ E9D8 E3 E3 E3 E3
 110+ E9DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 110+ E9E0 E3 E3 E3 E3
 110+ E9E4 E3 E3 E3 E3
 110+ E9E8 E3 E3 E3 E3
 111+ E9EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 111+ E9F0 E3 E3 E3 E3
 111+ E9F4 E3 E3 E3 E3
 111+ E9F8 E3 E3 E3 E3
 112+ E9FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 112+ EA00 E3 E3 E3 E3
 112+ EA04 E3 E3 E3 E3
 112+ EA08 E3 E3 E3 E3
 113+ EA0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 113+ EA10 E3 E3 E3 E3
 113+ EA14 E3 E3 E3 E3
 113+ EA18 E3 E3 E3 E3
 114+ EA1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 114+ EA20 E3 E3 E3 E3
 114+ EA24 E3 E3 E3 E3
 114+ EA28 E3 E3 E3 E3
 115+ EA2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 115+ EA30 E3 E3 E3 E3
 115+ EA34 E3 E3 E3 E3
 115+ EA38 E3 E3 E3 E3
 116+ EA3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 116+ EA40 E3 E3 E3 E3
 116+ EA44 E3 E3 E3 E3
 116+ EA48 E3 E3 E3 E3
 117+ EA4C 7C 7C 7C 7C  	db  $7C, $7C, $7C, $7C, $15, $15, $15, $50, $50, $50, $2C, $2C, $09, $09, $E3, $E3;
 117+ EA50 15 15 15 50
 117+ EA54 50 50 2C 2C
 117+ EA58 09 09 E3 E3
 118+ EA5C
 119+ EA5C
 120+ EA5C
 121+ EA5C              Sprite7:
 122+ EA5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 122+ EA60 E3 E3 E3 E3
 122+ EA64 E3 E3 E3 E3
 122+ EA68 E3 E3 E3 7C
 123+ EA6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 123+ EA70 E3 E3 E3 E3
 123+ EA74 E3 E3 E3 E3
 123+ EA78 E3 E3 E3 7C
 124+ EA7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 124+ EA80 E3 E3 E3 E3
 124+ EA84 E3 E3 E3 E3
 124+ EA88 E3 E3 E3 7C
 125+ EA8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 125+ EA90 E3 E3 E3 E3
 125+ EA94 E3 E3 E3 E3
 125+ EA98 E3 E3 E3 7C
 126+ EA9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 126+ EAA0 E3 E3 E3 E3
 126+ EAA4 E3 E3 E3 E3
 126+ EAA8 E3 E3 E3 15
 127+ EAAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 127+ EAB0 E3 E3 E3 E3
 127+ EAB4 E3 E3 E3 E3
 127+ EAB8 E3 E3 E3 15
 128+ EABC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 128+ EAC0 E3 E3 E3 E3
 128+ EAC4 E3 E3 E3 E3
 128+ EAC8 E3 E3 E3 15
 129+ EACC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 129+ EAD0 E3 E3 E3 E3
 129+ EAD4 E3 E3 E3 E3
 129+ EAD8 E3 E3 E3 50
 130+ EADC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 130+ EAE0 E3 E3 E3 E3
 130+ EAE4 E3 E3 E3 E3
 130+ EAE8 E3 E3 E3 50
 131+ EAEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 131+ EAF0 E3 E3 E3 E3
 131+ EAF4 E3 E3 E3 E3
 131+ EAF8 E3 E3 E3 50
 132+ EAFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 132+ EB00 E3 E3 E3 E3
 132+ EB04 E3 E3 E3 E3
 132+ EB08 E3 E3 E3 2C
 133+ EB0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 133+ EB10 E3 E3 E3 E3
 133+ EB14 E3 E3 E3 E3
 133+ EB18 E3 E3 E3 2C
 134+ EB1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 134+ EB20 E3 E3 E3 E3
 134+ EB24 E3 E3 E3 E3
 134+ EB28 E3 E3 E3 09
 135+ EB2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 135+ EB30 E3 E3 E3 E3
 135+ EB34 E3 E3 E3 E3
 135+ EB38 E3 E3 E3 09
 136+ EB3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 136+ EB40 E3 E3 E3 E3
 136+ EB44 E3 E3 E3 E3
 136+ EB48 E3 E3 E3 E3
 137+ EB4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 137+ EB50 E3 E3 E3 E3
 137+ EB54 E3 E3 E3 E3
 137+ EB58 E3 E3 E3 E3
 138+ EB5C
 139+ EB5C
 140+ EB5C
 141+ EB5C              Sprite8:
 142+ EB5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 142+ EB60 E3 E3 E3 E3
 142+ EB64 E3 E3 E3 E3
 142+ EB68 E3 E3 E3 E3
 143+ EB6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 143+ EB70 E3 E3 E3 E3
 143+ EB74 E3 E3 E3 E3
 143+ EB78 E3 E3 E3 44
 144+ EB7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 144+ EB80 E3 E3 E3 E3
 144+ EB84 E3 E3 E3 E3
 144+ EB88 E3 E3 E3 64
 145+ EB8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 145+ EB90 E3 E3 E3 E3
 145+ EB94 E3 E3 E3 E3
 145+ EB98 E3 E3 E3 64
 146+ EB9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 146+ EBA0 E3 E3 E3 E3
 146+ EBA4 E3 E3 E3 E3
 146+ EBA8 E3 E3 E3 64
 147+ EBAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 147+ EBB0 E3 E3 E3 E3
 147+ EBB4 E3 E3 E3 E3
 147+ EBB8 E3 E3 E3 A8
 148+ EBBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 148+ EBC0 E3 E3 E3 E3
 148+ EBC4 E3 E3 E3 E3
 148+ EBC8 E3 E3 E3 A8
 149+ EBCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 149+ EBD0 E3 E3 E3 E3
 149+ EBD4 E3 E3 E3 E3
 149+ EBD8 E3 E3 E3 A8
 150+ EBDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 150+ EBE0 E3 E3 E3 E3
 150+ EBE4 E3 E3 E3 E3
 150+ EBE8 E3 E3 E3 CC
 151+ EBEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 151+ EBF0 E3 E3 E3 E3
 151+ EBF4 E3 E3 E3 E3
 151+ EBF8 E3 E3 E3 CC
 152+ EBFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 152+ EC00 E3 E3 E3 E3
 152+ EC04 E3 E3 E3 E3
 152+ EC08 E3 E3 E3 CC
 153+ EC0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 153+ EC10 E3 E3 E3 E3
 153+ EC14 E3 E3 E3 E3
 153+ EC18 E3 E3 E3 EC
 154+ EC1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 154+ EC20 E3 E3 E3 E3
 154+ EC24 E3 E3 E3 E3
 154+ EC28 E3 E3 E3 EC
 155+ EC2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 155+ EC30 E3 E3 E3 E3
 155+ EC34 E3 E3 E3 E3
 155+ EC38 E3 E3 E3 EC
 156+ EC3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 156+ EC40 E3 E3 E3 E3
 156+ EC44 E3 E3 E3 E3
 156+ EC48 E3 E3 E3 EC
 157+ EC4C E3 44 64 64  	db  $E3, $44, $64, $64, $64, $A8, $A8, $A8, $CC, $CC, $CC, $EC, $EC, $EC, $EC, $E3;
 157+ EC50 64 A8 A8 A8
 157+ EC54 CC CC CC EC
 157+ EC58 EC EC EC E3
 158+ EC5C
 159+ EC5C
 160+ EC5C
 161+ EC5C              Sprite9:
 162+ EC5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 162+ EC60 E3 E3 E3 E3
 162+ EC64 E3 E3 E3 E3
 162+ EC68 E3 E3 E3 E3
 163+ EC6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 163+ EC70 E3 E3 E3 E3
 163+ EC74 E3 E3 E3 E3
 163+ EC78 E3 E3 E3 E3
 164+ EC7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 164+ EC80 E3 E3 E3 E3
 164+ EC84 E3 E3 E3 E3
 164+ EC88 E3 E3 E3 E3
 165+ EC8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 165+ EC90 E3 E3 E3 E3
 165+ EC94 E3 E3 E3 E3
 165+ EC98 E3 E3 E3 E3
 166+ EC9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 166+ ECA0 E3 E3 E3 E3
 166+ ECA4 E3 E3 E3 E3
 166+ ECA8 E3 E3 E3 E3
 167+ ECAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 167+ ECB0 E3 E3 E3 E3
 167+ ECB4 E3 E3 E3 E3
 167+ ECB8 E3 E3 E3 E3
 168+ ECBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 168+ ECC0 E3 E3 E3 E3
 168+ ECC4 E3 E3 E3 E3
 168+ ECC8 E3 E3 E3 E3
 169+ ECCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 169+ ECD0 E3 E3 E3 E3
 169+ ECD4 E3 E3 E3 E3
 169+ ECD8 E3 E3 E3 E3
 170+ ECDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 170+ ECE0 E3 E3 E3 E3
 170+ ECE4 E3 E3 E3 E3
 170+ ECE8 E3 E3 E3 E3
 171+ ECEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 171+ ECF0 E3 E3 E3 E3
 171+ ECF4 E3 E3 E3 E3
 171+ ECF8 E3 E3 E3 E3
 172+ ECFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 172+ ED00 E3 E3 E3 E3
 172+ ED04 E3 E3 E3 E3
 172+ ED08 E3 E3 E3 E3
 173+ ED0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 173+ ED10 E3 E3 E3 E3
 173+ ED14 E3 E3 E3 E3
 173+ ED18 E3 E3 E3 E3
 174+ ED1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 174+ ED20 E3 E3 E3 E3
 174+ ED24 E3 E3 E3 E3
 174+ ED28 E3 E3 E3 E3
 175+ ED2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 175+ ED30 E3 E3 E3 E3
 175+ ED34 E3 E3 E3 E3
 175+ ED38 E3 E3 E3 E3
 176+ ED3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 176+ ED40 E3 E3 E3 E3
 176+ ED44 E3 E3 E3 E3
 176+ ED48 E3 E3 E3 E3
 177+ ED4C EC EC EC EC  	db  $EC, $EC, $EC, $EC, $CC, $CC, $CC, $A8, $A8, $A8, $64, $64, $64, $44, $E3, $E3;
 177+ ED50 CC CC CC A8
 177+ ED54 A8 A8 64 64
 177+ ED58 64 44 E3 E3
 178+ ED5C
 179+ ED5C
 180+ ED5C
 181+ ED5C              Sprite10:
 182+ ED5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 182+ ED60 E3 E3 E3 E3
 182+ ED64 E3 E3 E3 E3
 182+ ED68 E3 E3 E3 EC
 183+ ED6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 183+ ED70 E3 E3 E3 E3
 183+ ED74 E3 E3 E3 E3
 183+ ED78 E3 E3 E3 EC
 184+ ED7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 184+ ED80 E3 E3 E3 E3
 184+ ED84 E3 E3 E3 E3
 184+ ED88 E3 E3 E3 EC
 185+ ED8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 185+ ED90 E3 E3 E3 E3
 185+ ED94 E3 E3 E3 E3
 185+ ED98 E3 E3 E3 EC
 186+ ED9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 186+ EDA0 E3 E3 E3 E3
 186+ EDA4 E3 E3 E3 E3
 186+ EDA8 E3 E3 E3 CC
 187+ EDAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 187+ EDB0 E3 E3 E3 E3
 187+ EDB4 E3 E3 E3 E3
 187+ EDB8 E3 E3 E3 CC
 188+ EDBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 188+ EDC0 E3 E3 E3 E3
 188+ EDC4 E3 E3 E3 E3
 188+ EDC8 E3 E3 E3 CC
 189+ EDCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 189+ EDD0 E3 E3 E3 E3
 189+ EDD4 E3 E3 E3 E3
 189+ EDD8 E3 E3 E3 A8
 190+ EDDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 190+ EDE0 E3 E3 E3 E3
 190+ EDE4 E3 E3 E3 E3
 190+ EDE8 E3 E3 E3 A8
 191+ EDEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 191+ EDF0 E3 E3 E3 E3
 191+ EDF4 E3 E3 E3 E3
 191+ EDF8 E3 E3 E3 A8
 192+ EDFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 192+ EE00 E3 E3 E3 E3
 192+ EE04 E3 E3 E3 E3
 192+ EE08 E3 E3 E3 64
 193+ EE0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 193+ EE10 E3 E3 E3 E3
 193+ EE14 E3 E3 E3 E3
 193+ EE18 E3 E3 E3 64
 194+ EE1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 194+ EE20 E3 E3 E3 E3
 194+ EE24 E3 E3 E3 E3
 194+ EE28 E3 E3 E3 64
 195+ EE2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 195+ EE30 E3 E3 E3 E3
 195+ EE34 E3 E3 E3 E3
 195+ EE38 E3 E3 E3 44
 196+ EE3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 196+ EE40 E3 E3 E3 E3
 196+ EE44 E3 E3 E3 E3
 196+ EE48 E3 E3 E3 E3
 197+ EE4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 197+ EE50 E3 E3 E3 E3
 197+ EE54 E3 E3 E3 E3
 197+ EE58 E3 E3 E3 E3
 198+ EE5C
 199+ EE5C
 200+ EE5C
 201+ EE5C              Sprite11:
 202+ EE5C 92 E3 E3 E3  	db  $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 202+ EE60 E3 E3 E3 E3
 202+ EE64 E3 E3 E3 E3
 202+ EE68 E3 E3 E3 E3
 203+ EE6C 92 E3 E3 E3  	db  $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 203+ EE70 E3 E3 E3 E3
 203+ EE74 E3 E3 E3 E3
 203+ EE78 E3 E3 E3 E3
 204+ EE7C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 204+ EE80 E3 E3 E3 E3
 204+ EE84 E3 E3 E3 E3
 204+ EE88 E3 E3 E3 E3
 205+ EE8C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 205+ EE90 E3 E3 E3 E3
 205+ EE94 E3 E3 E3 E3
 205+ EE98 E3 E3 E3 E3
 206+ EE9C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 206+ EEA0 E3 E3 E3 E3
 206+ EEA4 E3 E3 E3 E3
 206+ EEA8 E3 E3 E3 E3
 207+ EEAC FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 207+ EEB0 E3 E3 E3 E3
 207+ EEB4 E3 E3 E3 E3
 207+ EEB8 E3 E3 E3 E3
 208+ EEBC FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 208+ EEC0 E3 E3 E3 E3
 208+ EEC4 E3 E3 E3 E3
 208+ EEC8 E3 E3 E3 E3
 209+ EECC FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 209+ EED0 E3 E3 E3 E3
 209+ EED4 E3 E3 E3 E3
 209+ EED8 E3 E3 E3 E3
 210+ EEDC FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 210+ EEE0 E3 E3 E3 E3
 210+ EEE4 E3 E3 E3 E3
 210+ EEE8 E3 E3 E3 E3
 211+ EEEC FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 211+ EEF0 E3 E3 E3 E3
 211+ EEF4 E3 E3 E3 E3
 211+ EEF8 E3 E3 E3 E3
 212+ EEFC FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 212+ EF00 E3 E3 E3 E3
 212+ EF04 E3 E3 E3 E3
 212+ EF08 E3 E3 E3 E3
 213+ EF0C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 213+ EF10 E3 E3 E3 E3
 213+ EF14 E3 E3 E3 E3
 213+ EF18 E3 E3 E3 E3
 214+ EF1C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 214+ EF20 E3 E3 E3 E3
 214+ EF24 E3 E3 E3 E3
 214+ EF28 E3 E3 E3 E3
 215+ EF2C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 215+ EF30 E3 E3 E3 E3
 215+ EF34 E3 E3 E3 E3
 215+ EF38 E3 E3 E3 E3
 216+ EF3C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 216+ EF40 E3 E3 E3 E3
 216+ EF44 E3 E3 E3 E3
 216+ EF48 E3 E3 E3 E3
 217+ EF4C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 217+ EF50 E3 E3 E3 E3
 217+ EF54 E3 E3 E3 E3
 217+ EF58 E3 E3 E3 E3
 218+ EF5C
 219+ EF5C
 220+ EF5C
 221+ EF5C              Sprite12:
 222+ EF5C 92 92 FF FF  	db  $92, $92, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF;
 222+ EF60 FF FF FF FF
 222+ EF64 FF FF FF FF
 222+ EF68 FF FF FF FF
 223+ EF6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 223+ EF70 E3 E3 E3 E3
 223+ EF74 E3 E3 E3 E3
 223+ EF78 E3 E3 E3 E3
 224+ EF7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 224+ EF80 E3 E3 E3 E3
 224+ EF84 E3 E3 E3 E3
 224+ EF88 E3 E3 E3 E3
 225+ EF8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 225+ EF90 E3 E3 E3 E3
 225+ EF94 E3 E3 E3 E3
 225+ EF98 E3 E3 E3 E3
 226+ EF9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 226+ EFA0 E3 E3 E3 E3
 226+ EFA4 E3 E3 E3 E3
 226+ EFA8 E3 E3 E3 E3
 227+ EFAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 227+ EFB0 E3 E3 E3 E3
 227+ EFB4 E3 E3 E3 E3
 227+ EFB8 E3 E3 E3 E3
 228+ EFBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 228+ EFC0 E3 E3 E3 E3
 228+ EFC4 E3 E3 E3 E3
 228+ EFC8 E3 E3 E3 E3
 229+ EFCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 229+ EFD0 E3 E3 E3 E3
 229+ EFD4 E3 E3 E3 E3
 229+ EFD8 E3 E3 E3 E3
 230+ EFDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 230+ EFE0 E3 E3 E3 E3
 230+ EFE4 E3 E3 E3 E3
 230+ EFE8 E3 E3 E3 E3
 231+ EFEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 231+ EFF0 E3 E3 E3 E3
 231+ EFF4 E3 E3 E3 E3
 231+ EFF8 E3 E3 E3 E3
 232+ EFFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 232+ F000 E3 E3 E3 E3
 232+ F004 E3 E3 E3 E3
 232+ F008 E3 E3 E3 E3
 233+ F00C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 233+ F010 E3 E3 E3 E3
 233+ F014 E3 E3 E3 E3
 233+ F018 E3 E3 E3 E3
 234+ F01C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 234+ F020 E3 E3 E3 E3
 234+ F024 E3 E3 E3 E3
 234+ F028 E3 E3 E3 E3
 235+ F02C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 235+ F030 E3 E3 E3 E3
 235+ F034 E3 E3 E3 E3
 235+ F038 E3 E3 E3 E3
 236+ F03C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 236+ F040 E3 E3 E3 E3
 236+ F044 E3 E3 E3 E3
 236+ F048 E3 E3 E3 E3
 237+ F04C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 237+ F050 E3 E3 E3 E3
 237+ F054 E3 E3 E3 E3
 237+ F058 E3 E3 E3 E3
 238+ F05C
 239+ F05C
 240+ F05C
 241+ F05C              Sprite13:
 242+ F05C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 242+ F060 E3 E3 E3 E3
 242+ F064 E3 E3 E3 E3
 242+ F068 E3 E3 E3 E3
 243+ F06C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 243+ F070 E3 E3 E3 E3
 243+ F074 E3 E3 E3 E3
 243+ F078 E3 E3 E3 E3
 244+ F07C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 244+ F080 E3 E3 E3 E3
 244+ F084 E3 E3 E3 E3
 244+ F088 E3 E3 E3 E3
 245+ F08C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 245+ F090 E3 E3 E3 E3
 245+ F094 E3 E3 E3 E3
 245+ F098 E3 E3 E3 E3
 246+ F09C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 246+ F0A0 E3 E3 E3 E3
 246+ F0A4 E3 E3 E3 E3
 246+ F0A8 E3 E3 E3 E3
 247+ F0AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 247+ F0B0 E3 E3 E3 E3
 247+ F0B4 E3 E3 E3 E3
 247+ F0B8 E3 E3 E3 E3
 248+ F0BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 248+ F0C0 E3 E3 E3 E3
 248+ F0C4 E3 E3 E3 E3
 248+ F0C8 E3 E3 E3 E3
 249+ F0CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 249+ F0D0 E3 E3 E3 E3
 249+ F0D4 E3 E3 E3 E3
 249+ F0D8 E3 E3 E3 E3
 250+ F0DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 250+ F0E0 E3 E3 E3 E3
 250+ F0E4 E3 E3 E3 E3
 250+ F0E8 E3 E3 E3 E3
 251+ F0EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 251+ F0F0 E3 E3 E3 E3
 251+ F0F4 E3 E3 E3 E3
 251+ F0F8 E3 E3 E3 E3
 252+ F0FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 252+ F100 E3 E3 E3 E3
 252+ F104 E3 E3 E3 E3
 252+ F108 E3 E3 E3 E3
 253+ F10C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18;
 253+ F110 E3 E3 E3 E3
 253+ F114 E3 E3 E3 E3
 253+ F118 E3 E3 18 18
 254+ F11C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $1C;
 254+ F120 E3 E3 E3 E3
 254+ F124 E3 E3 E3 18
 254+ F128 18 1C 1C 1C
 255+ F12C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C, $1C, $1C;
 255+ F130 E3 E3 E3 E3
 255+ F134 18 18 18 1C
 255+ F138 1C 1C 1C 1C
 256+ F13C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $18, $18, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C, $1C;
 256+ F140 18 18 18 18
 256+ F144 18 1C 1C 1C
 256+ F148 1C 1C 1C 1C
 257+ F14C E3 E3 18 18  	db  $E3, $E3, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C;
 257+ F150 1C 1C 1C 1C
 257+ F154 1C 1C 1C 1C
 257+ F158 1C 1C 1C 1C
 258+ F15C
 259+ F15C
 260+ F15C
 261+ F15C              Sprite14:
 262+ F15C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 262+ F160 E3 E3 E3 E3
 262+ F164 E3 E3 E3 E3
 262+ F168 E3 E3 E3 E3
 263+ F16C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 263+ F170 E3 E3 E3 E3
 263+ F174 E3 E3 E3 E3
 263+ F178 E3 E3 E3 E3
 264+ F17C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 264+ F180 E3 E3 E3 E3
 264+ F184 E3 E3 E3 E3
 264+ F188 E3 E3 E3 E3
 265+ F18C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 265+ F190 E3 E3 E3 E3
 265+ F194 E3 E3 E3 E3
 265+ F198 E3 E3 E3 E3
 266+ F19C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 266+ F1A0 E3 E3 E3 E3
 266+ F1A4 E3 E3 E3 E3
 266+ F1A8 E3 E3 E3 E3
 267+ F1AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18;
 267+ F1B0 E3 E3 E3 E3
 267+ F1B4 E3 E3 E3 E3
 267+ F1B8 E3 E3 18 18
 268+ F1BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C;
 268+ F1C0 E3 E3 E3 E3
 268+ F1C4 E3 E3 E3 18
 268+ F1C8 18 18 1C 1C
 269+ F1CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $1C, $1C, $1C;
 269+ F1D0 E3 E3 E3 E3
 269+ F1D4 E3 18 18 1C
 269+ F1D8 1C 1C 1C 1C
 270+ F1DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C, $18;
 270+ F1E0 E3 E3 E3 18
 270+ F1E4 18 1C 1C 1C
 270+ F1E8 1C 1C 1C 18
 271+ F1EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $18, $18, $18, $E3;
 271+ F1F0 18 18 18 1C
 271+ F1F4 1C 1C 1C 1C
 271+ F1F8 18 18 18 E3
 272+ F1FC E3 18 18 18  	db  $E3, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3;
 272+ F200 1C 1C 1C 1C
 272+ F204 1C 1C 18 18
 272+ F208 E3 E3 E3 E3
 273+ F20C 18 1C 1C 1C  	db  $18, $1C, $1C, $1C, $1C, $1C, $1C, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3;
 273+ F210 1C 1C 1C 18
 273+ F214 18 18 E3 E3
 273+ F218 E3 E3 E3 E3
 274+ F21C 1C 1C 1C 1C  	db  $1C, $1C, $1C, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 274+ F220 1C 1C 18 18
 274+ F224 E3 E3 E3 E3
 274+ F228 E3 E3 E3 E3
 275+ F22C 1C 1C 1C 18  	db  $1C, $1C, $1C, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 275+ F230 18 18 E3 E3
 275+ F234 E3 E3 E3 E3
 275+ F238 E3 E3 E3 E3
 276+ F23C 1C 18 18 E3  	db  $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 276+ F240 E3 E3 E3 E3
 276+ F244 E3 E3 E3 E3
 276+ F248 E3 E3 E3 E3
 277+ F24C 18 E3 E3 E3  	db  $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 277+ F250 E3 E3 E3 E3
 277+ F254 E3 E3 E3 E3
 277+ F258 E3 E3 E3 E3
 278+ F25C
 279+ F25C
 280+ F25C
 281+ F25C              Sprite15:
 282+ F25C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 282+ F260 E3 E3 E3 E3
 282+ F264 E3 E3 E3 E3
 282+ F268 E3 E3 E3 E3
 283+ F26C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 283+ F270 E3 E3 E3 E3
 283+ F274 E3 E3 E3 E3
 283+ F278 E3 E3 E3 E3
 284+ F27C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 284+ F280 E3 E3 E3 E3
 284+ F284 E3 E3 E3 E3
 284+ F288 E3 E3 E3 E3
 285+ F28C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 285+ F290 E3 E3 E3 E3
 285+ F294 E3 E3 E3 E3
 285+ F298 E3 E3 E3 E3
 286+ F29C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 286+ F2A0 E3 E3 E3 E3
 286+ F2A4 E3 E3 E3 E3
 286+ F2A8 E3 E3 E3 E3
 287+ F2AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 287+ F2B0 E3 E3 E3 E3
 287+ F2B4 E3 E3 E3 E3
 287+ F2B8 E3 E3 E3 E3
 288+ F2BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18;
 288+ F2C0 E3 E3 E3 E3
 288+ F2C4 E3 E3 E3 E3
 288+ F2C8 E3 E3 E3 18
 289+ F2CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C;
 289+ F2D0 E3 E3 E3 E3
 289+ F2D4 E3 E3 E3 E3
 289+ F2D8 E3 18 18 1C
 290+ F2DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $18;
 290+ F2E0 E3 E3 E3 E3
 290+ F2E4 E3 E3 E3 18
 290+ F2E8 18 1C 1C 18
 291+ F2EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $18, $1C, $1C, $18, $18;
 291+ F2F0 E3 E3 E3 E3
 291+ F2F4 18 18 18 18
 291+ F2F8 1C 1C 18 18
 292+ F2FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C, $18, $18, $E3, $E3;
 292+ F300 E3 E3 18 18
 292+ F304 18 1C 1C 1C
 292+ F308 18 18 E3 E3
 293+ F30C E3 E3 E3 18  	db  $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3;
 293+ F310 18 18 1C 1C
 293+ F314 1C 1C 18 18
 293+ F318 E3 E3 E3 E3
 294+ F31C E3 18 18 1C  	db  $E3, $18, $18, $1C, $1C, $1C, $1C, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3;
 294+ F320 1C 1C 1C 18
 294+ F324 18 18 E3 E3
 294+ F328 E3 E3 E3 E3
 295+ F32C 18 1C 1C 1C  	db  $18, $1C, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 295+ F330 1C 18 18 E3
 295+ F334 E3 E3 E3 E3
 295+ F338 E3 E3 E3 E3
 296+ F33C 1C 1C 1C 18  	db  $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 296+ F340 18 E3 E3 E3
 296+ F344 E3 E3 E3 E3
 296+ F348 E3 E3 E3 E3
 297+ F34C 1C 18 18 E3  	db  $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 297+ F350 E3 E3 E3 E3
 297+ F354 E3 E3 E3 E3
 297+ F358 E3 E3 E3 E3
 298+ F35C
 299+ F35C
 300+ F35C
 301+ F35C              Sprite16:
 302+ F35C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18;
 302+ F360 E3 E3 E3 E3
 302+ F364 E3 E3 E3 E3
 302+ F368 E3 E3 18 18
 303+ F36C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $1C, $1C, $1C;
 303+ F370 E3 E3 E3 E3
 303+ F374 E3 E3 E3 E3
 303+ F378 18 1C 1C 1C
 304+ F37C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $18, $E3, $E3;
 304+ F380 E3 E3 E3 E3
 304+ F384 E3 18 18 1C
 304+ F388 1C 18 E3 E3
 305+ F38C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $18, $E3, $E3, $E3, $E3;
 305+ F390 E3 E3 18 18
 305+ F394 18 1C 1C 18
 305+ F398 E3 E3 E3 E3
 306+ F39C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3;
 306+ F3A0 18 18 1C 1C
 306+ F3A4 18 18 E3 E3
 306+ F3A8 E3 E3 E3 E3
 307+ F3AC E3 E3 18 18  	db  $E3, $E3, $18, $18, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 307+ F3B0 1C 1C 18 18
 307+ F3B4 E3 E3 E3 E3
 307+ F3B8 E3 E3 E3 E3
 308+ F3BC 18 18 1C 1C  	db  $18, $18, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 308+ F3C0 18 18 E3 E3
 308+ F3C4 E3 E3 E3 E3
 308+ F3C8 E3 E3 E3 E3
 309+ F3CC 1C 1C 18 18  	db  $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 309+ F3D0 E3 E3 E3 E3
 309+ F3D4 E3 E3 E3 E3
 309+ F3D8 E3 E3 E3 E3
 310+ F3DC 18 18 E3 E3  	db  $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 310+ F3E0 E3 E3 E3 E3
 310+ F3E4 E3 E3 E3 E3
 310+ F3E8 E3 E3 E3 E3
 311+ F3EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 311+ F3F0 E3 E3 E3 E3
 311+ F3F4 E3 E3 E3 E3
 311+ F3F8 E3 E3 E3 E3
 312+ F3FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 312+ F400 E3 E3 E3 E3
 312+ F404 E3 E3 E3 E3
 312+ F408 E3 E3 E3 E3
 313+ F40C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 313+ F410 E3 E3 E3 E3
 313+ F414 E3 E3 E3 E3
 313+ F418 E3 E3 E3 E3
 314+ F41C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 314+ F420 E3 E3 E3 E3
 314+ F424 E3 E3 E3 E3
 314+ F428 E3 E3 E3 E3
 315+ F42C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 315+ F430 E3 E3 E3 E3
 315+ F434 E3 E3 E3 E3
 315+ F438 E3 E3 E3 E3
 316+ F43C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 316+ F440 E3 E3 E3 E3
 316+ F444 E3 E3 E3 E3
 316+ F448 E3 E3 E3 E3
 317+ F44C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 317+ F450 E3 E3 E3 E3
 317+ F454 E3 E3 E3 E3
 317+ F458 E3 E3 E3 E3
 318+ F45C
 319+ F45C
 320+ F45C
 321+ F45C              Sprite17:
 322+ F45C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 322+ F460 E3 E3 E3 E3
 322+ F464 E3 E3 E3 E3
 322+ F468 E3 E3 E3 E3
 323+ F46C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1C, $E3, $E3;
 323+ F470 E3 E3 E3 E3
 323+ F474 E3 E3 E3 E3
 323+ F478 E3 1C E3 E3
 324+ F47C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $1C, $1C, $E3, $E3, $E3;
 324+ F480 E3 E3 E3 E3
 324+ F484 E3 E3 18 1C
 324+ F488 1C E3 E3 E3
 325+ F48C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $1C, $1C, $E3, $E3, $E3, $E3, $E3;
 325+ F490 E3 E3 E3 E3
 325+ F494 18 1C 1C E3
 325+ F498 E3 E3 E3 E3
 326+ F49C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $18, $1C, $1C, $18, $E3, $E3, $E3, $E3, $E3, $E3;
 326+ F4A0 E3 E3 18 1C
 326+ F4A4 1C 18 E3 E3
 326+ F4A8 E3 E3 E3 E3
 327+ F4AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $18, $1C, $1C, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 327+ F4B0 18 1C 1C 18
 327+ F4B4 E3 E3 E3 E3
 327+ F4B8 E3 E3 E3 E3
 328+ F4BC E3 E3 18 1C  	db  $E3, $E3, $18, $1C, $1C, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 328+ F4C0 1C 18 E3 E3
 328+ F4C4 E3 E3 E3 E3
 328+ F4C8 E3 E3 E3 E3
 329+ F4CC 18 1C 1C 18  	db  $18, $1C, $1C, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 329+ F4D0 E3 E3 E3 E3
 329+ F4D4 E3 E3 E3 E3
 329+ F4D8 E3 E3 E3 E3
 330+ F4DC 1C 18 E3 E3  	db  $1C, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 330+ F4E0 E3 E3 E3 E3
 330+ F4E4 E3 E3 E3 E3
 330+ F4E8 E3 E3 E3 E3
 331+ F4EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 331+ F4F0 E3 E3 E3 E3
 331+ F4F4 E3 E3 E3 E3
 331+ F4F8 E3 E3 E3 E3
 332+ F4FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 332+ F500 E3 E3 E3 E3
 332+ F504 E3 E3 E3 E3
 332+ F508 E3 E3 E3 E3
 333+ F50C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 333+ F510 E3 E3 E3 E3
 333+ F514 E3 E3 E3 E3
 333+ F518 E3 E3 E3 E3
 334+ F51C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 334+ F520 E3 E3 E3 E3
 334+ F524 E3 E3 E3 E3
 334+ F528 E3 E3 E3 E3
 335+ F52C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 335+ F530 E3 E3 E3 E3
 335+ F534 E3 E3 E3 E3
 335+ F538 E3 E3 E3 E3
 336+ F53C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 336+ F540 E3 E3 E3 E3
 336+ F544 E3 E3 E3 E3
 336+ F548 E3 E3 E3 E3
 337+ F54C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 337+ F550 E3 E3 E3 E3
 337+ F554 E3 E3 E3 E3
 337+ F558 E3 E3 E3 E3
 338+ F55C
 339+ F55C
 340+ F55C
 341+ F55C              Sprite18:
 342+ F55C E3 D8 B4 E3  	db  $E3, $D8, $B4, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 342+ F560 E3 E3 E3 E3
 342+ F564 E3 E3 E3 E3
 342+ F568 E3 E3 E3 E3
 343+ F56C B4 FF FC D8  	db  $B4, $FF, $FC, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 343+ F570 E3 E3 E3 E3
 343+ F574 E3 E3 E3 E3
 343+ F578 E3 E3 E3 E3
 344+ F57C D8 FC B4 D8  	db  $D8, $FC, $B4, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 344+ F580 E3 E3 E3 E3
 344+ F584 E3 E3 E3 E3
 344+ F588 E3 E3 E3 E3
 345+ F58C E3 B4 D8 E3  	db  $E3, $B4, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 345+ F590 E3 E3 E3 E3
 345+ F594 E3 E3 E3 E3
 345+ F598 E3 E3 E3 E3
 346+ F59C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 346+ F5A0 E3 E3 E3 E3
 346+ F5A4 E3 E3 E3 E3
 346+ F5A8 E3 E3 E3 E3
 347+ F5AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 347+ F5B0 E3 E3 E3 E3
 347+ F5B4 E3 E3 E3 E3
 347+ F5B8 E3 E3 E3 E3
 348+ F5BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 348+ F5C0 E3 E3 E3 E3
 348+ F5C4 E3 E3 E3 E3
 348+ F5C8 E3 E3 E3 E3
 349+ F5CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 349+ F5D0 E3 E3 E3 E3
 349+ F5D4 E3 E3 E3 E3
 349+ F5D8 E3 E3 E3 E3
 350+ F5DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 350+ F5E0 E3 E3 E3 E3
 350+ F5E4 E3 E3 E3 E3
 350+ F5E8 E3 E3 E3 E3
 351+ F5EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 351+ F5F0 E3 E3 E3 E3
 351+ F5F4 E3 E3 E3 E3
 351+ F5F8 E3 E3 E3 E3
 352+ F5FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 352+ F600 E3 E3 E3 E3
 352+ F604 E3 E3 E3 E3
 352+ F608 E3 E3 E3 E3
 353+ F60C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 353+ F610 E3 E3 E3 E3
 353+ F614 E3 E3 E3 E3
 353+ F618 E3 E3 E3 E3
 354+ F61C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 354+ F620 E3 E3 E3 E3
 354+ F624 E3 E3 E3 E3
 354+ F628 E3 E3 E3 E3
 355+ F62C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 355+ F630 E3 E3 E3 E3
 355+ F634 E3 E3 E3 E3
 355+ F638 E3 E3 E3 E3
 356+ F63C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 356+ F640 E3 E3 E3 E3
 356+ F644 E3 E3 E3 E3
 356+ F648 E3 E3 E3 E3
 357+ F64C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 357+ F650 E3 E3 E3 E3
 357+ F654 E3 E3 E3 E3
 357+ F658 E3 E3 E3 E3
 358+ F65C
 359+ F65C
 360+ F65C
 361+ F65C              Sprite19:
 362+ F65C E3 D8 B4 E3  	db  $E3, $D8, $B4, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 362+ F660 E3 E3 E3 E3
 362+ F664 E3 E3 E3 E3
 362+ F668 E3 E3 E3 E3
 363+ F66C B4 E3 E3 D8  	db  $B4, $E3, $E3, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 363+ F670 E3 E3 E3 E3
 363+ F674 E3 E3 E3 E3
 363+ F678 E3 E3 E3 E3
 364+ F67C D8 E3 E3 D8  	db  $D8, $E3, $E3, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 364+ F680 E3 E3 E3 E3
 364+ F684 E3 E3 E3 E3
 364+ F688 E3 E3 E3 E3
 365+ F68C E3 B4 D8 E3  	db  $E3, $B4, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 365+ F690 E3 E3 E3 E3
 365+ F694 E3 E3 E3 E3
 365+ F698 E3 E3 E3 E3
 366+ F69C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 366+ F6A0 E3 E3 E3 E3
 366+ F6A4 E3 E3 E3 E3
 366+ F6A8 E3 E3 E3 E3
 367+ F6AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 367+ F6B0 E3 E3 E3 E3
 367+ F6B4 E3 E3 E3 E3
 367+ F6B8 E3 E3 E3 E3
 368+ F6BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 368+ F6C0 E3 E3 E3 E3
 368+ F6C4 E3 E3 E3 E3
 368+ F6C8 E3 E3 E3 E3
 369+ F6CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 369+ F6D0 E3 E3 E3 E3
 369+ F6D4 E3 E3 E3 E3
 369+ F6D8 E3 E3 E3 E3
 370+ F6DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 370+ F6E0 E3 E3 E3 E3
 370+ F6E4 E3 E3 E3 E3
 370+ F6E8 E3 E3 E3 E3
 371+ F6EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 371+ F6F0 E3 E3 E3 E3
 371+ F6F4 E3 E3 E3 E3
 371+ F6F8 E3 E3 E3 E3
 372+ F6FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 372+ F700 E3 E3 E3 E3
 372+ F704 E3 E3 E3 E3
 372+ F708 E3 E3 E3 E3
 373+ F70C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 373+ F710 E3 E3 E3 E3
 373+ F714 E3 E3 E3 E3
 373+ F718 E3 E3 E3 E3
 374+ F71C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 374+ F720 E3 E3 E3 E3
 374+ F724 E3 E3 E3 E3
 374+ F728 E3 E3 E3 E3
 375+ F72C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 375+ F730 E3 E3 E3 E3
 375+ F734 E3 E3 E3 E3
 375+ F738 E3 E3 E3 E3
 376+ F73C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 376+ F740 E3 E3 E3 E3
 376+ F744 E3 E3 E3 E3
 376+ F748 E3 E3 E3 E3
 377+ F74C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 377+ F750 E3 E3 E3 E3
 377+ F754 E3 E3 E3 E3
 377+ F758 E3 E3 E3 E3
 378+ F75C
 379+ F75C
 380+ F75C
 381+ F75C              Sprite20:
 382+ F75C E3 16 12 E3  	db  $E3, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 382+ F760 E3 E3 E3 E3
 382+ F764 E3 E3 E3 E3
 382+ F768 E3 E3 E3 E3
 383+ F76C 12 1A 1F 16  	db  $12, $1A, $1F, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 383+ F770 E3 E3 E3 E3
 383+ F774 E3 E3 E3 E3
 383+ F778 E3 E3 E3 E3
 384+ F77C 16 1F 1A 12  	db  $16, $1F, $1A, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 384+ F780 E3 E3 E3 E3
 384+ F784 E3 E3 E3 E3
 384+ F788 E3 E3 E3 E3
 385+ F78C E3 12 16 E3  	db  $E3, $12, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 385+ F790 E3 E3 E3 E3
 385+ F794 E3 E3 E3 E3
 385+ F798 E3 E3 E3 E3
 386+ F79C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 386+ F7A0 E3 E3 E3 E3
 386+ F7A4 E3 E3 E3 E3
 386+ F7A8 E3 E3 E3 E3
 387+ F7AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 387+ F7B0 E3 E3 E3 E3
 387+ F7B4 E3 E3 E3 E3
 387+ F7B8 E3 E3 E3 E3
 388+ F7BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 388+ F7C0 E3 E3 E3 E3
 388+ F7C4 E3 E3 E3 E3
 388+ F7C8 E3 E3 E3 E3
 389+ F7CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 389+ F7D0 E3 E3 E3 E3
 389+ F7D4 E3 E3 E3 E3
 389+ F7D8 E3 E3 E3 E3
 390+ F7DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 390+ F7E0 E3 E3 E3 E3
 390+ F7E4 E3 E3 E3 E3
 390+ F7E8 E3 E3 E3 E3
 391+ F7EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 391+ F7F0 E3 E3 E3 E3
 391+ F7F4 E3 E3 E3 E3
 391+ F7F8 E3 E3 E3 E3
 392+ F7FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 392+ F800 E3 E3 E3 E3
 392+ F804 E3 E3 E3 E3
 392+ F808 E3 E3 E3 E3
 393+ F80C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 393+ F810 E3 E3 E3 E3
 393+ F814 E3 E3 E3 E3
 393+ F818 E3 E3 E3 E3
 394+ F81C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 394+ F820 E3 E3 E3 E3
 394+ F824 E3 E3 E3 E3
 394+ F828 E3 E3 E3 E3
 395+ F82C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 395+ F830 E3 E3 E3 E3
 395+ F834 E3 E3 E3 E3
 395+ F838 E3 E3 E3 E3
 396+ F83C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 396+ F840 E3 E3 E3 E3
 396+ F844 E3 E3 E3 E3
 396+ F848 E3 E3 E3 E3
 397+ F84C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 397+ F850 E3 E3 E3 E3
 397+ F854 E3 E3 E3 E3
 397+ F858 E3 E3 E3 E3
 398+ F85C
 399+ F85C
 400+ F85C
 401+ F85C              Sprite21:
 402+ F85C E3 16 12 E3  	db  $E3, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 402+ F860 E3 E3 E3 E3
 402+ F864 E3 E3 E3 E3
 402+ F868 E3 E3 E3 E3
 403+ F86C 12 E3 E3 16  	db  $12, $E3, $E3, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 403+ F870 E3 E3 E3 E3
 403+ F874 E3 E3 E3 E3
 403+ F878 E3 E3 E3 E3
 404+ F87C 16 E3 E3 12  	db  $16, $E3, $E3, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 404+ F880 E3 E3 E3 E3
 404+ F884 E3 E3 E3 E3
 404+ F888 E3 E3 E3 E3
 405+ F88C E3 12 16 E3  	db  $E3, $12, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 405+ F890 E3 E3 E3 E3
 405+ F894 E3 E3 E3 E3
 405+ F898 E3 E3 E3 E3
 406+ F89C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 406+ F8A0 E3 E3 E3 E3
 406+ F8A4 E3 E3 E3 E3
 406+ F8A8 E3 E3 E3 E3
 407+ F8AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 407+ F8B0 E3 E3 E3 E3
 407+ F8B4 E3 E3 E3 E3
 407+ F8B8 E3 E3 E3 E3
 408+ F8BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 408+ F8C0 E3 E3 E3 E3
 408+ F8C4 E3 E3 E3 E3
 408+ F8C8 E3 E3 E3 E3
 409+ F8CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 409+ F8D0 E3 E3 E3 E3
 409+ F8D4 E3 E3 E3 E3
 409+ F8D8 E3 E3 E3 E3
 410+ F8DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 410+ F8E0 E3 E3 E3 E3
 410+ F8E4 E3 E3 E3 E3
 410+ F8E8 E3 E3 E3 E3
 411+ F8EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 411+ F8F0 E3 E3 E3 E3
 411+ F8F4 E3 E3 E3 E3
 411+ F8F8 E3 E3 E3 E3
 412+ F8FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 412+ F900 E3 E3 E3 E3
 412+ F904 E3 E3 E3 E3
 412+ F908 E3 E3 E3 E3
 413+ F90C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 413+ F910 E3 E3 E3 E3
 413+ F914 E3 E3 E3 E3
 413+ F918 E3 E3 E3 E3
 414+ F91C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 414+ F920 E3 E3 E3 E3
 414+ F924 E3 E3 E3 E3
 414+ F928 E3 E3 E3 E3
 415+ F92C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 415+ F930 E3 E3 E3 E3
 415+ F934 E3 E3 E3 E3
 415+ F938 E3 E3 E3 E3
 416+ F93C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 416+ F940 E3 E3 E3 E3
 416+ F944 E3 E3 E3 E3
 416+ F948 E3 E3 E3 E3
 417+ F94C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 417+ F950 E3 E3 E3 E3
 417+ F954 E3 E3 E3 E3
 417+ F958 E3 E3 E3 E3
 418+ F95C
 419+ F95C
 420+ F95C
 421+ F95C              Sprite22:
 422+ F95C E3 03 03 E3  	db  $E3, $03, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 422+ F960 E3 E3 E3 E3
 422+ F964 E3 E3 E3 E3
 422+ F968 E3 E3 E3 E3
 423+ F96C 03 1F 1F 03  	db  $03, $1F, $1F, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 423+ F970 E3 E3 E3 E3
 423+ F974 E3 E3 E3 E3
 423+ F978 E3 E3 E3 E3
 424+ F97C 03 1F 1F 03  	db  $03, $1F, $1F, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 424+ F980 E3 E3 E3 E3
 424+ F984 E3 E3 E3 E3
 424+ F988 E3 E3 E3 E3
 425+ F98C E3 03 03 E3  	db  $E3, $03, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 425+ F990 E3 E3 E3 E3
 425+ F994 E3 E3 E3 E3
 425+ F998 E3 E3 E3 E3
 426+ F99C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 426+ F9A0 E3 E3 E3 E3
 426+ F9A4 E3 E3 E3 E3
 426+ F9A8 E3 E3 E3 E3
 427+ F9AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 427+ F9B0 E3 E3 E3 E3
 427+ F9B4 E3 E3 E3 E3
 427+ F9B8 E3 E3 E3 E3
 428+ F9BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 428+ F9C0 E3 E3 E3 E3
 428+ F9C4 E3 E3 E3 E3
 428+ F9C8 E3 E3 E3 E3
 429+ F9CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 429+ F9D0 E3 E3 E3 E3
 429+ F9D4 E3 E3 E3 E3
 429+ F9D8 E3 E3 E3 E3
 430+ F9DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 430+ F9E0 E3 E3 E3 E3
 430+ F9E4 E3 E3 E3 E3
 430+ F9E8 E3 E3 E3 E3
 431+ F9EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 431+ F9F0 E3 E3 E3 E3
 431+ F9F4 E3 E3 E3 E3
 431+ F9F8 E3 E3 E3 E3
 432+ F9FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 432+ FA00 E3 E3 E3 E3
 432+ FA04 E3 E3 E3 E3
 432+ FA08 E3 E3 E3 E3
 433+ FA0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 433+ FA10 E3 E3 E3 E3
 433+ FA14 E3 E3 E3 E3
 433+ FA18 E3 E3 E3 E3
 434+ FA1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 434+ FA20 E3 E3 E3 E3
 434+ FA24 E3 E3 E3 E3
 434+ FA28 E3 E3 E3 E3
 435+ FA2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 435+ FA30 E3 E3 E3 E3
 435+ FA34 E3 E3 E3 E3
 435+ FA38 E3 E3 E3 E3
 436+ FA3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 436+ FA40 E3 E3 E3 E3
 436+ FA44 E3 E3 E3 E3
 436+ FA48 E3 E3 E3 E3
 437+ FA4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 437+ FA50 E3 E3 E3 E3
 437+ FA54 E3 E3 E3 E3
 437+ FA58 E3 E3 E3 E3
 438+ FA5C
 439+ FA5C
 440+ FA5C
 441+ FA5C              Sprite23:
 442+ FA5C E3 03 03 E3  	db  $E3, $03, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 442+ FA60 E3 E3 E3 E3
 442+ FA64 E3 E3 E3 E3
 442+ FA68 E3 E3 E3 E3
 443+ FA6C 03 E3 E3 03  	db  $03, $E3, $E3, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 443+ FA70 E3 E3 E3 E3
 443+ FA74 E3 E3 E3 E3
 443+ FA78 E3 E3 E3 E3
 444+ FA7C 03 E3 E3 03  	db  $03, $E3, $E3, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 444+ FA80 E3 E3 E3 E3
 444+ FA84 E3 E3 E3 E3
 444+ FA88 E3 E3 E3 E3
 445+ FA8C E3 03 03 E3  	db  $E3, $03, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 445+ FA90 E3 E3 E3 E3
 445+ FA94 E3 E3 E3 E3
 445+ FA98 E3 E3 E3 E3
 446+ FA9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 446+ FAA0 E3 E3 E3 E3
 446+ FAA4 E3 E3 E3 E3
 446+ FAA8 E3 E3 E3 E3
 447+ FAAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 447+ FAB0 E3 E3 E3 E3
 447+ FAB4 E3 E3 E3 E3
 447+ FAB8 E3 E3 E3 E3
 448+ FABC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 448+ FAC0 E3 E3 E3 E3
 448+ FAC4 E3 E3 E3 E3
 448+ FAC8 E3 E3 E3 E3
 449+ FACC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 449+ FAD0 E3 E3 E3 E3
 449+ FAD4 E3 E3 E3 E3
 449+ FAD8 E3 E3 E3 E3
 450+ FADC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 450+ FAE0 E3 E3 E3 E3
 450+ FAE4 E3 E3 E3 E3
 450+ FAE8 E3 E3 E3 E3
 451+ FAEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 451+ FAF0 E3 E3 E3 E3
 451+ FAF4 E3 E3 E3 E3
 451+ FAF8 E3 E3 E3 E3
 452+ FAFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 452+ FB00 E3 E3 E3 E3
 452+ FB04 E3 E3 E3 E3
 452+ FB08 E3 E3 E3 E3
 453+ FB0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 453+ FB10 E3 E3 E3 E3
 453+ FB14 E3 E3 E3 E3
 453+ FB18 E3 E3 E3 E3
 454+ FB1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 454+ FB20 E3 E3 E3 E3
 454+ FB24 E3 E3 E3 E3
 454+ FB28 E3 E3 E3 E3
 455+ FB2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 455+ FB30 E3 E3 E3 E3
 455+ FB34 E3 E3 E3 E3
 455+ FB38 E3 E3 E3 E3
 456+ FB3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 456+ FB40 E3 E3 E3 E3
 456+ FB44 E3 E3 E3 E3
 456+ FB48 E3 E3 E3 E3
 457+ FB4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 457+ FB50 E3 E3 E3 E3
 457+ FB54 E3 E3 E3 E3
 457+ FB58 E3 E3 E3 E3
 458+ FB5C
 459+ FB5C
 460+ FB5C
 461+ FB5C              Sprite24:
 462+ FB5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 462+ FB60 E3 E3 E3 E3
 462+ FB64 E3 E3 E3 E3
 462+ FB68 E3 E3 E3 E3
 463+ FB6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 463+ FB70 E3 E3 E3 E3
 463+ FB74 E3 E3 E3 E3
 463+ FB78 E3 E3 E3 E3
 464+ FB7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 464+ FB80 E3 E3 E3 E3
 464+ FB84 E3 E3 E3 E3
 464+ FB88 E3 E3 E3 E3
 465+ FB8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 465+ FB90 E3 E3 E3 E3
 465+ FB94 E3 E3 E3 E3
 465+ FB98 E3 E3 E3 E3
 466+ FB9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 466+ FBA0 E3 E3 E3 E3
 466+ FBA4 E3 E3 E3 E3
 466+ FBA8 E3 E3 E3 E3
 467+ FBAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 467+ FBB0 E3 E3 E3 E3
 467+ FBB4 E3 E3 E3 E3
 467+ FBB8 E3 E3 E3 E3
 468+ FBBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 468+ FBC0 E3 E3 E3 E3
 468+ FBC4 E3 E3 E3 E3
 468+ FBC8 E3 E3 E3 E3
 469+ FBCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 469+ FBD0 E3 E3 E3 E3
 469+ FBD4 E3 E3 E3 E3
 469+ FBD8 E3 E3 E3 E3
 470+ FBDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 470+ FBE0 E3 E3 E3 E3
 470+ FBE4 E3 E3 E3 E3
 470+ FBE8 E3 E3 E3 E3
 471+ FBEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 471+ FBF0 E3 E3 E3 E3
 471+ FBF4 E3 E3 E3 E3
 471+ FBF8 E3 E3 E3 E3
 472+ FBFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 472+ FC00 E3 E3 E3 E3
 472+ FC04 E3 E3 E3 E3
 472+ FC08 E3 E3 E3 E3
 473+ FC0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 473+ FC10 E3 E3 E3 E3
 473+ FC14 E3 E3 E3 E3
 473+ FC18 E3 E3 E3 E3
 474+ FC1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 474+ FC20 E3 E3 E3 E3
 474+ FC24 E3 E3 E3 E3
 474+ FC28 E3 E3 E3 E3
 475+ FC2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 475+ FC30 E3 E3 E3 E3
 475+ FC34 E3 E3 E3 E3
 475+ FC38 E3 E3 E3 E3
 476+ FC3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 476+ FC40 E3 E3 E3 E3
 476+ FC44 E3 E3 E3 E3
 476+ FC48 E3 E3 E3 E3
 477+ FC4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 477+ FC50 E3 E3 E3 E3
 477+ FC54 E3 E3 E3 E3
 477+ FC58 E3 E3 E3 E3
 478+ FC5C
 479+ FC5C
 480+ FC5C
 481+ FC5C              Sprite25:
 482+ FC5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 482+ FC60 E3 E3 E3 E3
 482+ FC64 E3 E3 E3 E3
 482+ FC68 E3 E3 E3 E3
 483+ FC6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 483+ FC70 E3 E3 E3 E3
 483+ FC74 E3 E3 E3 E3
 483+ FC78 E3 E3 E3 E3
 484+ FC7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 484+ FC80 E3 E3 E3 E3
 484+ FC84 E3 E3 E3 E3
 484+ FC88 E3 E3 E3 E3
 485+ FC8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 485+ FC90 E3 E3 E3 E3
 485+ FC94 E3 E3 E3 E3
 485+ FC98 E3 E3 E3 E3
 486+ FC9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 486+ FCA0 E3 E3 E3 E3
 486+ FCA4 E3 E3 E3 E3
 486+ FCA8 E3 E3 E3 E3
 487+ FCAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 487+ FCB0 E3 E3 E3 E3
 487+ FCB4 E3 E3 E3 E3
 487+ FCB8 E3 E3 E3 E3
 488+ FCBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 488+ FCC0 E3 E3 E3 E3
 488+ FCC4 E3 E3 E3 E3
 488+ FCC8 E3 E3 E3 E3
 489+ FCCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 489+ FCD0 E3 E3 E3 E3
 489+ FCD4 E3 E3 E3 E3
 489+ FCD8 E3 E3 E3 E3
 490+ FCDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 490+ FCE0 E3 E3 E3 E3
 490+ FCE4 E3 E3 E3 E3
 490+ FCE8 E3 E3 E3 E3
 491+ FCEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 491+ FCF0 E3 E3 E3 E3
 491+ FCF4 E3 E3 E3 E3
 491+ FCF8 E3 E3 E3 E3
 492+ FCFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 492+ FD00 E3 E3 E3 E3
 492+ FD04 E3 E3 E3 E3
 492+ FD08 E3 E3 E3 E3
 493+ FD0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 493+ FD10 E3 E3 E3 E3
 493+ FD14 E3 E3 E3 E3
 493+ FD18 E3 E3 E3 E3
 494+ FD1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 494+ FD20 E3 E3 E3 E3
 494+ FD24 E3 E3 E3 E3
 494+ FD28 E3 E3 E3 E3
 495+ FD2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 495+ FD30 E3 E3 E3 E3
 495+ FD34 E3 E3 E3 E3
 495+ FD38 E3 E3 E3 E3
 496+ FD3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 496+ FD40 E3 E3 E3 E3
 496+ FD44 E3 E3 E3 E3
 496+ FD48 E3 E3 E3 E3
 497+ FD4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 497+ FD50 E3 E3 E3 E3
 497+ FD54 E3 E3 E3 E3
 497+ FD58 E3 E3 E3 E3
 498+ FD5C
 499+ FD5C
 500+ FD5C
 501+ FD5C              Sprite26:
 502+ FD5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 502+ FD60 E3 E3 E3 E3
 502+ FD64 E3 E3 E3 E3
 502+ FD68 E3 E3 E3 E3
 503+ FD6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 503+ FD70 E3 E3 E3 E3
 503+ FD74 E3 E3 E3 E3
 503+ FD78 E3 E3 E3 E3
 504+ FD7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 504+ FD80 E3 E3 E3 E3
 504+ FD84 E3 E3 E3 E3
 504+ FD88 E3 E3 E3 E3
 505+ FD8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 505+ FD90 E3 E3 E3 E3
 505+ FD94 E3 E3 E3 E3
 505+ FD98 E3 E3 E3 E3
 506+ FD9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 506+ FDA0 E3 E3 E3 E3
 506+ FDA4 E3 E3 E3 E3
 506+ FDA8 E3 E3 E3 E3
 507+ FDAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 507+ FDB0 E3 E3 E3 E3
 507+ FDB4 E3 E3 E3 E3
 507+ FDB8 E3 E3 E3 E3
 508+ FDBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 508+ FDC0 E3 E3 E3 E3
 508+ FDC4 E3 E3 E3 E3
 508+ FDC8 E3 E3 E3 E3
 509+ FDCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 509+ FDD0 E3 E3 E3 E3
 509+ FDD4 E3 E3 E3 E3
 509+ FDD8 E3 E3 E3 E3
 510+ FDDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 510+ FDE0 E3 E3 E3 E3
 510+ FDE4 E3 E3 E3 E3
 510+ FDE8 E3 E3 E3 E3
 511+ FDEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 511+ FDF0 E3 E3 E3 E3
 511+ FDF4 E3 E3 E3 E3
 511+ FDF8 E3 E3 E3 E3
 512+ FDFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 512+ FE00 E3 E3 E3 E3
 512+ FE04 E3 E3 E3 E3
 512+ FE08 E3 E3 E3 E3
 513+ FE0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 513+ FE10 E3 E3 E3 E3
 513+ FE14 E3 E3 E3 E3
 513+ FE18 E3 E3 E3 E3
 514+ FE1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 514+ FE20 E3 E3 E3 E3
 514+ FE24 E3 E3 E3 E3
 514+ FE28 E3 E3 E3 E3
 515+ FE2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 515+ FE30 E3 E3 E3 E3
 515+ FE34 E3 E3 E3 E3
 515+ FE38 E3 E3 E3 E3
 516+ FE3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 516+ FE40 E3 E3 E3 E3
 516+ FE44 E3 E3 E3 E3
 516+ FE48 E3 E3 E3 E3
 517+ FE4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 517+ FE50 E3 E3 E3 E3
 517+ FE54 E3 E3 E3 E3
 517+ FE58 E3 E3 E3 E3
 518+ FE5C
 519+ FE5C
 520+ FE5C
 521+ FE5C              Sprite27:
 522+ FE5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 522+ FE60 E3 E3 E3 E3
 522+ FE64 E3 E3 E3 E3
 522+ FE68 E3 E3 E3 E3
 523+ FE6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 523+ FE70 E3 E3 E3 E3
 523+ FE74 E3 E3 E3 E3
 523+ FE78 E3 E3 E3 E3
 524+ FE7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 524+ FE80 E3 E3 E3 E3
 524+ FE84 E3 E3 E3 E3
 524+ FE88 E3 E3 E3 E3
 525+ FE8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 525+ FE90 E3 E3 E3 E3
 525+ FE94 E3 E3 E3 E3
 525+ FE98 E3 E3 E3 E3
 526+ FE9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 526+ FEA0 E3 E3 E3 E3
 526+ FEA4 E3 E3 E3 E3
 526+ FEA8 E3 E3 E3 E3
 527+ FEAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 527+ FEB0 E3 E3 E3 E3
 527+ FEB4 E3 E3 E3 E3
 527+ FEB8 E3 E3 E3 E3
 528+ FEBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 528+ FEC0 E3 E3 E3 E3
 528+ FEC4 E3 E3 E3 E3
 528+ FEC8 E3 E3 E3 E3
 529+ FECC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 529+ FED0 E3 E3 E3 E3
 529+ FED4 E3 E3 E3 E3
 529+ FED8 E3 E3 E3 E3
 530+ FEDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 530+ FEE0 E3 E3 E3 E3
 530+ FEE4 E3 E3 E3 E3
 530+ FEE8 E3 E3 E3 E3
 531+ FEEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 531+ FEF0 E3 E3 E3 E3
 531+ FEF4 E3 E3 E3 E3
 531+ FEF8 E3 E3 E3 E3
 532+ FEFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 532+ FF00 E3 E3 E3 E3
 532+ FF04 E3 E3 E3 E3
 532+ FF08 E3 E3 E3 E3
 533+ FF0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 533+ FF10 E3 E3 E3 E3
 533+ FF14 E3 E3 E3 E3
 533+ FF18 E3 E3 E3 E3
 534+ FF1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 534+ FF20 E3 E3 E3 E3
 534+ FF24 E3 E3 E3 E3
 534+ FF28 E3 E3 E3 E3
 535+ FF2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 535+ FF30 E3 E3 E3 E3
 535+ FF34 E3 E3 E3 E3
 535+ FF38 E3 E3 E3 E3
 536+ FF3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 536+ FF40 E3 E3 E3 E3
 536+ FF44 E3 E3 E3 E3
 536+ FF48 E3 E3 E3 E3
 537+ FF4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 537+ FF50 E3 E3 E3 E3
 537+ FF54 E3 E3 E3 E3
 537+ FF58 E3 E3 E3 E3
 538+ FF5C
 539+ FF5C
 540+ FF5C
 541+ FF5C
 542+ FF5C
 543+ FF5C
# file closed: ./Layer3Sprites/SpriteSheet.asm
1381  FF5C              ; Bank 61  ------------------------------------------------------------------------------------------------------------------------
1382  FF5C                  SLOT    ConsoleImageAddr
1383  FF5C                  PAGE    BankConsole
1384  FF5C              	ORG     ConsoleImageAddr, BankConsole
1385  E000
1386  E000                  INCLUDE "./Images/ConsoleImageData.asm"
# file opened: ./Images/ConsoleImageData.asm
   1+ E000              ConsoleImageData:
   2+ E000 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$FF,$FF,$FF,$FF,$FF,$FF ; row 1
   2+ E004 FF FF 00 7F
   2+ E008 00 00 00 00
   2+ E00C 00 00 00 00
   2+ E010 00 00 00 00
   2+ E014 00 00 00 00
   2+ E018 7F 00 FF FF
   2+ E01C FF FF FF FF
   3+ E020 9C C3 FF FF      DB $9C,$C3,$FF,$FF,$FF,$FF,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$00,$01
   3+ E024 FF FF 40 08
   3+ E028 01 00 00 00
   3+ E02C 00 00 00 00
   3+ E030 00 00 00 00
   3+ E034 00 00 00 40
   3+ E038 08 01 80 00
   3+ E03C 00 00 00 01
   4+ E040 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$08,$04,$80,$00,$00,$00,$00,$01
   4+ E044 00 01 10 08
   4+ E048 04 00 00 00
   4+ E04C 00 00 00 00
   4+ E050 00 00 00 00
   4+ E054 00 00 00 10
   4+ E058 08 04 80 00
   4+ E05C 00 00 00 01
   5+ E060 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
   5+ E064 00 01 00 00
   5+ E068 00 00 00 00
   5+ E06C 00 00 00 00
   5+ E070 00 00 00 00
   5+ E074 00 00 00 00
   5+ E078 00 00 80 00
   5+ E07C 00 00 00 01
   6+ E080 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$07,$82,$00,$08,$06,$20,$01,$80,$04,$60,$10,$00,$41,$E0,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   6+ E084 00 01 00 00
   6+ E088 00 07 82 00
   6+ E08C 08 06 20 01
   6+ E090 80 04 60 10
   6+ E094 00 41 E0 00
   6+ E098 00 00 FF FF
   6+ E09C FF FF FF FF
   7+ E0A0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$30,$00,$08,$00,$04,$00,$61,$86,$00,$20,$00,$10,$00,$0C,$00,$60,$00,$FF,$FF,$FF,$FF,$FF,$FF
   7+ E0A4 00 01 00 06
   7+ E0A8 00 30 00 08
   7+ E0AC 00 04 00 61
   7+ E0B0 86 00 20 00
   7+ E0B4 10 00 0C 00
   7+ E0B8 60 00 FF FF
   7+ E0BC FF FF FF FF
   8+ E0C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$0F,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$55,$55,$55,$F0,$00,$FF,$FF,$FF,$FF,$FF,$FF
   8+ E0C4 00 01 00 0F
   8+ E0C8 AA AA AA AA
   8+ E0CC AA AA AA AA
   8+ E0D0 55 55 55 55
   8+ E0D4 55 55 55 55
   8+ E0D8 F0 00 FF FF
   8+ E0DC FF FF FF FF
   9+ E0E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$1E,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$78,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   9+ E0E4 FF FF 00 00
   9+ E0E8 00 1E 00 00
   9+ E0EC 08 00 00 01
   9+ E0F0 80 00 00 10
   9+ E0F4 00 00 78 00
   9+ E0F8 00 00 FF FF
   9+ E0FC FF FF FF FF
  10+ E100 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$01,$C9,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$C9,$C0,$80,$00,$00,$00,$00,$01 ; row 2
  10+ E104 00 01 01 C9
  10+ E108 C0 00 00 00
  10+ E10C 00 00 00 00
  10+ E110 00 00 00 00
  10+ E114 00 00 00 01
  10+ E118 C9 C0 80 00
  10+ E11C 00 00 00 01
  11+ E120 B2 C3 92 49      DB $B2,$C3,$92,$49,$24,$93,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$39
  11+ E124 24 93 40 08
  11+ E128 01 00 00 00
  11+ E12C 00 00 00 00
  11+ E130 00 00 00 00
  11+ E134 00 00 00 40
  11+ E138 08 01 80 00
  11+ E13C 00 00 7C 39
  12+ E140 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$00,$0C,$80,$00,$00,$00,$7C,$61
  12+ E144 00 01 18 00
  12+ E148 0C 00 00 00
  12+ E14C 00 00 00 00
  12+ E150 00 00 00 00
  12+ E154 00 00 00 18
  12+ E158 00 0C 80 00
  12+ E15C 00 00 7C 61
  13+ E160 9C 7E 00 00      DB $9C,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  13+ E164 00 01 00 00
  13+ E168 00 00 00 00
  13+ E16C 00 00 00 00
  13+ E170 00 00 00 00
  13+ E174 00 00 00 00
  13+ E178 00 00 80 00
  13+ E17C 00 00 00 01
  14+ E180 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$38,$04,$00,$10,$01,$40,$01,$80,$06,$80,$08,$00,$20,$1C,$00,$00,$00,$80,$00,$00,$00,$00,$81
  14+ E184 00 01 00 00
  14+ E188 00 38 04 00
  14+ E18C 10 01 40 01
  14+ E190 80 06 80 08
  14+ E194 00 20 1C 00
  14+ E198 00 00 80 00
  14+ E19C 00 00 00 81
  15+ E1A0 9C 30 00 00      DB $9C,$30,$00,$00,$00,$01,$00,$0C,$00,$40,$00,$10,$00,$04,$00,$11,$88,$00,$20,$00,$08,$00,$02,$00,$30,$00,$80,$00,$00,$00,$00,$81
  15+ E1A4 00 01 00 0C
  15+ E1A8 00 40 00 10
  15+ E1AC 00 04 00 11
  15+ E1B0 88 00 20 00
  15+ E1B4 08 00 02 00
  15+ E1B8 30 00 80 00
  15+ E1BC 00 00 00 81
  16+ E1C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$00,$10,$00,$00,$80,$00,$01,$80,$00,$01,$00,$00,$08,$00,$00,$60,$00,$80,$00,$00,$00,$00,$81
  16+ E1C4 00 01 00 06
  16+ E1C8 00 00 10 00
  16+ E1CC 00 80 00 01
  16+ E1D0 80 00 01 00
  16+ E1D4 00 08 00 00
  16+ E1D8 60 00 80 00
  16+ E1DC 00 00 00 81
  17+ E1E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$01,$E0,$00,$10,$00,$00,$01,$80,$00,$00,$08,$00,$07,$80,$00,$00,$00,$80,$00,$00,$00,$00,$81
  17+ E1E4 00 01 00 00
  17+ E1E8 00 01 E0 00
  17+ E1EC 10 00 00 01
  17+ E1F0 80 00 00 08
  17+ E1F4 00 07 80 00
  17+ E1F8 00 00 80 00
  17+ E1FC 00 00 00 81
  18+ E200 BE 3C 00 00      DB $BE,$3C,$00,$00,$00,$01,$06,$08,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$38,$80,$00,$00,$00,$3C,$79 ; row 3
  18+ E204 00 01 06 08
  18+ E208 38 00 00 00
  18+ E20C 00 00 00 00
  18+ E210 00 00 00 00
  18+ E214 00 00 00 06
  18+ E218 08 38 80 00
  18+ E21C 00 00 3C 79
  19+ E220 B2 C3 80 01      DB $B2,$C3,$80,$01,$00,$03,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$80,$00,$00,$00,$62,$65
  19+ E224 00 03 55 55
  19+ E228 55 00 00 00
  19+ E22C 00 00 00 00
  19+ E230 00 00 00 00
  19+ E234 00 00 00 55
  19+ E238 55 55 80 00
  19+ E23C 00 00 62 65
  20+ E240 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$0C,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$08,$18,$80,$00,$00,$00,$66,$61
  20+ E244 00 01 0C 08
  20+ E248 18 00 00 00
  20+ E24C 00 00 00 00
  20+ E250 00 00 00 00
  20+ E254 00 00 00 0C
  20+ E258 08 18 80 00
  20+ E25C 00 00 66 61
  21+ E260 B2 18 00 00      DB $B2,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  21+ E264 00 01 00 00
  21+ E268 00 00 00 00
  21+ E26C 00 00 00 00
  21+ E270 00 00 00 00
  21+ E274 00 00 00 00
  21+ E278 00 00 80 00
  21+ E27C 00 00 00 01
  22+ E280 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$01,$CA,$BA,$AA,$AA,$AA,$EA,$AA,$55,$57,$55,$55,$55,$5D,$53,$80,$00,$00,$80,$00,$00,$00,$00,$99
  22+ E284 00 01 00 00
  22+ E288 01 CA BA AA
  22+ E28C AA AA EA AA
  22+ E290 55 57 55 55
  22+ E294 55 5D 53 80
  22+ E298 00 00 80 00
  22+ E29C 00 00 00 99
  23+ E2A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$08,$01,$80,$00,$20,$00,$08,$00,$05,$A0,$00,$10,$00,$04,$00,$01,$80,$10,$00,$80,$00,$00,$00,$00,$B9
  23+ E2A4 00 01 00 08
  23+ E2A8 01 80 00 20
  23+ E2AC 00 08 00 05
  23+ E2B0 A0 00 10 00
  23+ E2B4 04 00 01 80
  23+ E2B8 10 00 80 00
  23+ E2BC 00 00 00 B9
  24+ E2C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$01,$00,$00,$20,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$04,$00,$00,$80,$00,$80,$00,$00,$00,$00,$B9
  24+ E2C4 00 01 00 01
  24+ E2C8 00 00 20 00
  24+ E2CC 01 00 00 01
  24+ E2D0 80 00 00 80
  24+ E2D4 00 04 00 00
  24+ E2D8 80 00 80 00
  24+ E2DC 00 00 00 B9
  25+ E2E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$1F,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$F8,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  25+ E2E4 00 01 00 00
  25+ E2E8 00 00 1F AA
  25+ E2EC AA AA AA AA
  25+ E2F0 55 55 55 55
  25+ E2F4 55 F8 00 00
  25+ E2F8 00 00 80 00
  25+ E2FC 00 00 00 A9
  26+ E300 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$0E,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$08,$18,$80,$00,$00,$00,$60,$65 ; row 4
  26+ E304 00 01 0E 08
  26+ E308 18 00 00 00
  26+ E30C 00 00 00 00
  26+ E310 00 00 00 00
  26+ E314 00 00 00 0E
  26+ E318 08 18 80 00
  26+ E31C 00 00 60 65
  27+ E320 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$62,$61
  27+ E324 00 01 40 08
  27+ E328 01 00 00 00
  27+ E32C 00 00 00 00
  27+ E330 00 00 00 00
  27+ E334 00 00 00 40
  27+ E338 08 01 80 00
  27+ E33C 00 00 62 61
  28+ E340 BC 66 00 00      DB $BC,$66,$00,$00,$00,$01,$03,$00,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$60,$80,$00,$00,$00,$66,$61
  28+ E344 00 01 03 00
  28+ E348 60 00 00 00
  28+ E34C 00 00 00 00
  28+ E350 00 00 00 00
  28+ E354 00 00 00 03
  28+ E358 00 60 80 00
  28+ E35C 00 00 66 61
  29+ E360 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  29+ E364 00 01 00 00
  29+ E368 00 00 00 00
  29+ E36C 00 0F FF FF
  29+ E370 FF FF F0 00
  29+ E374 00 00 00 00
  29+ E378 00 00 80 00
  29+ E37C 00 00 00 01
  30+ E380 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$06,$00,$20,$00,$40,$00,$A0,$01,$80,$05,$00,$02,$00,$04,$00,$60,$00,$00,$80,$00,$00,$00,$00,$B9
  30+ E384 00 01 00 00
  30+ E388 06 00 20 00
  30+ E38C 40 00 A0 01
  30+ E390 80 05 00 02
  30+ E394 00 04 00 60
  30+ E398 00 00 80 00
  30+ E39C 00 00 00 B9
  31+ E3A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$1A,$AA,$AA,$AA,$EA,$AA,$BA,$AA,$AB,$D5,$55,$5D,$55,$57,$55,$55,$55,$58,$00,$80,$00,$00,$00,$00,$85
  31+ E3A4 00 01 00 1A
  31+ E3A8 AA AA AA EA
  31+ E3AC AA BA AA AB
  31+ E3B0 D5 55 5D 55
  31+ E3B4 57 55 55 55
  31+ E3B8 58 00 80 00
  31+ E3BC 00 00 00 85
  32+ E3C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$C0,$00,$40,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$02,$00,$03,$00,$00,$80,$00,$00,$00,$00,$85
  32+ E3C4 00 01 00 00
  32+ E3C8 C0 00 40 00
  32+ E3CC 01 00 00 01
  32+ E3D0 80 00 00 80
  32+ E3D4 00 02 00 03
  32+ E3D8 00 00 80 00
  32+ E3DC 00 00 00 85
  33+ E3E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$FC,$20,$00,$00,$01,$80,$00,$00,$04,$3F,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  33+ E3E4 00 01 00 00
  33+ E3E8 00 00 00 FC
  33+ E3EC 20 00 00 01
  33+ E3F0 80 00 00 04
  33+ E3F4 3F 00 00 00
  33+ E3F8 00 00 80 00
  33+ E3FC 00 00 00 A9
  34+ E400 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$08,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$08,$0C,$80,$00,$00,$00,$3C,$65 ; row 5
  34+ E404 00 01 18 08
  34+ E408 0C 00 00 00
  34+ E40C 00 00 00 00
  34+ E410 00 00 00 00
  34+ E414 00 00 00 18
  34+ E418 08 0C 80 00
  34+ E41C 00 00 3C 65
  35+ E420 B2 7E 00 00      DB $B2,$7E,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$61
  35+ E424 00 01 40 08
  35+ E428 01 00 00 00
  35+ E42C 00 00 00 00
  35+ E430 00 00 00 00
  35+ E434 00 00 00 40
  35+ E438 08 01 80 00
  35+ E43C 00 00 7C 61
  36+ E440 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$80,$00,$00,$00,$66,$61
  36+ E444 00 01 00 FF
  36+ E448 80 00 00 00
  36+ E44C 00 00 00 00
  36+ E450 00 00 00 00
  36+ E454 00 00 00 00
  36+ E458 FF 80 80 00
  36+ E45C 00 00 66 61
  37+ E460 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$3F,$F0,$08,$01,$80,$10,$0F,$FC,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  37+ E464 00 01 00 00
  37+ E468 00 00 00 00
  37+ E46C 3F F0 08 01
  37+ E470 80 10 0F FC
  37+ E474 00 00 00 00
  37+ E478 00 00 80 00
  37+ E47C 00 00 00 01
  38+ E480 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$18,$00,$C0,$00,$80,$00,$18,$01,$80,$18,$00,$01,$00,$03,$00,$18,$00,$00,$80,$00,$00,$00,$00,$99
  38+ E484 00 01 00 00
  38+ E488 18 00 C0 00
  38+ E48C 80 00 18 01
  38+ E490 80 18 00 01
  38+ E494 00 03 00 18
  38+ E498 00 00 80 00
  38+ E49C 00 00 00 99
  39+ E4A0 BE 30 00 00      DB $BE,$30,$00,$00,$00,$01,$00,$10,$0C,$00,$00,$80,$00,$10,$00,$01,$80,$00,$08,$00,$01,$00,$00,$30,$08,$00,$80,$00,$00,$00,$00,$BD
  39+ E4A4 00 01 00 10
  39+ E4A8 0C 00 00 80
  39+ E4AC 00 10 00 01
  39+ E4B0 80 00 08 00
  39+ E4B4 01 00 00 30
  39+ E4B8 08 00 80 00
  39+ E4BC 00 00 00 BD
  40+ E4C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$30,$00,$80,$00,$02,$00,$00,$01,$80,$00,$00,$40,$00,$01,$00,$0C,$00,$00,$80,$00,$00,$00,$00,$BD
  40+ E4C4 00 01 00 00
  40+ E4C8 30 00 80 00
  40+ E4CC 02 00 00 01
  40+ E4D0 80 00 00 40
  40+ E4D4 00 01 00 0C
  40+ E4D8 00 00 80 00
  40+ E4DC 00 00 00 BD
  41+ E4E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$03,$FC,$00,$00,$01,$80,$00,$00,$3F,$C0,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$BD
  41+ E4E4 00 01 00 00
  41+ E4E8 00 00 00 03
  41+ E4EC FC 00 00 01
  41+ E4F0 80 00 00 3F
  41+ E4F4 C0 00 00 00
  41+ E4F8 00 00 80 00
  41+ E4FC 00 00 00 BD
  42+ E500 B0 C3 80 01      DB $B0,$C3,$80,$01,$00,$03,$30,$08,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$08,$06,$C0,$00,$80,$01,$06,$7D ; row 6
  42+ E504 00 03 30 08
  42+ E508 06 00 00 00
  42+ E50C 00 00 00 00
  42+ E510 00 00 00 00
  42+ E514 00 00 00 30
  42+ E518 08 06 C0 00
  42+ E51C 80 01 06 7D
  43+ E520 B2 3C 00 00      DB $B2,$3C,$00,$00,$00,$01,$40,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$01,$C0,$00,$80,$01,$66,$65
  43+ E524 00 01 40 00
  43+ E528 01 00 00 00
  43+ E52C 00 00 00 00
  43+ E530 00 00 00 00
  43+ E534 00 00 00 40
  43+ E538 00 01 C0 00
  43+ E53C 80 01 66 65
  44+ E540 B0 66 80 01      DB $B0,$66,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$80,$01,$66,$61
  44+ E544 00 03 00 00
  44+ E548 00 00 00 00
  44+ E54C 00 00 00 00
  44+ E550 00 00 00 00
  44+ E554 00 00 00 00
  44+ E558 00 00 C0 00
  44+ E55C 80 01 66 61
  45+ E560 B2 18 80 01      DB $B2,$18,$80,$01,$00,$03,$00,$00,$00,$00,$00,$1F,$C1,$AA,$AA,$AA,$55,$55,$57,$83,$F8,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  45+ E564 00 03 00 00
  45+ E568 00 00 00 1F
  45+ E56C C1 AA AA AA
  45+ E570 55 55 57 83
  45+ E574 F8 00 00 00
  45+ E578 00 00 80 00
  45+ E57C 00 00 00 01
  46+ E580 B0 18 80 01      DB $B0,$18,$80,$01,$00,$03,$00,$00,$60,$01,$00,$01,$00,$01,$04,$01,$80,$20,$80,$00,$80,$00,$80,$06,$00,$00,$80,$00,$00,$00,$00,$99
  46+ E584 00 03 00 00
  46+ E588 60 01 00 01
  46+ E58C 00 01 04 01
  46+ E590 80 20 80 00
  46+ E594 80 00 80 06
  46+ E598 00 00 80 00
  46+ E59C 00 00 00 99
  47+ E5A0 B2 30 80 01      DB $B2,$30,$80,$01,$00,$03,$00,$10,$18,$00,$01,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$80,$00,$18,$08,$00,$80,$00,$00,$00,$00,$A1
  47+ E5A4 00 03 00 10
  47+ E5A8 18 00 01 00
  47+ E5AC 00 20 00 01
  47+ E5B0 80 00 04 00
  47+ E5B4 00 80 00 18
  47+ E5B8 08 00 80 00
  47+ E5BC 00 00 00 A1
  48+ E5C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$0E,$AB,$AA,$AA,$AE,$AA,$AA,$AA,$55,$55,$55,$75,$55,$55,$D5,$70,$00,$00,$80,$00,$00,$00,$00,$85
  48+ E5C4 00 01 00 00
  48+ E5C8 0E AB AA AA
  48+ E5CC AE AA AA AA
  48+ E5D0 55 55 55 75
  48+ E5D4 55 55 D5 70
  48+ E5D8 00 00 80 00
  48+ E5DC 00 00 00 85
  49+ E5E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$03,$FF,$F0,$01,$80,$0F,$FF,$C0,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  49+ E5E4 00 01 00 00
  49+ E5E8 00 00 00 00
  49+ E5EC 03 FF F0 01
  49+ E5F0 80 0F FF C0
  49+ E5F4 00 00 00 00
  49+ E5F8 00 00 80 00
  49+ E5FC 00 00 00 89
  50+ E600 B0 C3 92 49      DB $B0,$C3,$92,$49,$24,$93,$20,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$08,$02,$C9,$24,$92,$49,$3C,$61 ; row 7
  50+ E604 24 93 20 08
  50+ E608 02 00 00 00
  50+ E60C 00 00 00 00
  50+ E610 00 00 00 00
  50+ E614 00 00 00 20
  50+ E618 08 02 C9 24
  50+ E61C 92 49 3C 61
  51+ E620 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$60,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$02,$C9,$24,$92,$49,$66,$39
  51+ E624 00 01 60 08
  51+ E628 02 00 00 00
  51+ E62C 00 00 00 00
  51+ E630 00 00 00 00
  51+ E634 00 00 00 60
  51+ E638 08 02 C9 24
  51+ E63C 92 49 66 39
  52+ E640 B0 3C 92 49      DB $B0,$3C,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$24,$92,$49,$7C,$7D
  52+ E644 24 93 00 00
  52+ E648 00 00 00 00
  52+ E64C 00 00 00 00
  52+ E650 00 00 00 00
  52+ E654 00 00 00 00
  52+ E658 00 00 C9 24
  52+ E65C 92 49 7C 7D
  53+ E660 9C 18 92 49      DB $9C,$18,$92,$49,$24,$93,$00,$00,$00,$00,$03,$E0,$02,$60,$10,$01,$80,$08,$06,$40,$07,$E0,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  53+ E664 24 93 00 00
  53+ E668 00 00 03 E0
  53+ E66C 02 60 10 01
  53+ E670 80 08 06 40
  53+ E674 07 E0 00 00
  53+ E678 00 00 80 00
  53+ E67C 00 00 00 01
  54+ E680 BE 18 92 49      DB $BE,$18,$92,$49,$24,$93,$00,$01,$AA,$AE,$AA,$AA,$AA,$AA,$AB,$AA,$55,$D5,$55,$55,$55,$55,$75,$55,$80,$00,$80,$00,$00,$00,$00,$99
  54+ E684 24 93 00 01
  54+ E688 AA AE AA AA
  54+ E68C AA AA AB AA
  54+ E690 55 D5 55 55
  54+ E694 55 55 75 55
  54+ E698 80 00 80 00
  54+ E69C 00 00 00 99
  55+ E6A0 B2 3E 92 49      DB $B2,$3E,$92,$49,$24,$93,$00,$10,$60,$00,$02,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$40,$00,$06,$08,$00,$80,$00,$00,$00,$00,$BD
  55+ E6A4 24 93 00 10
  55+ E6A8 60 00 02 00
  55+ E6AC 00 20 00 01
  55+ E6B0 80 00 04 00
  55+ E6B4 00 40 00 06
  55+ E6B8 08 00 80 00
  55+ E6BC 00 00 00 BD
  56+ E6C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$03,$02,$00,$00,$04,$00,$00,$01,$80,$00,$00,$20,$00,$00,$00,$C0,$00,$00,$80,$00,$00,$00,$00,$B9
  56+ E6C4 00 01 00 00
  56+ E6C8 03 02 00 00
  56+ E6CC 04 00 00 01
  56+ E6D0 80 00 00 20
  56+ E6D4 00 00 00 C0
  56+ E6D8 00 00 80 00
  56+ E6DC 00 00 00 B9
  57+ E6E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  57+ E6E4 00 01 00 00
  57+ E6E8 00 00 00 00
  57+ E6EC 00 00 0F FF
  57+ E6F0 FF F0 00 00
  57+ E6F4 00 00 00 00
  57+ E6F8 00 00 80 00
  57+ E6FC 00 00 00 89
  58+ E700 80 C3 FF FF      DB $80,$C3,$FF,$FF,$FF,$FF,$60,$08,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$03,$FF,$FF,$FF,$FF,$00,$61 ; row 8
  58+ E704 FF FF 60 08
  58+ E708 03 00 00 00
  58+ E70C 00 00 00 00
  58+ E710 00 00 00 00
  58+ E714 00 00 00 60
  58+ E718 08 03 FF FF
  58+ E71C FF FF 00 61
  59+ E720 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$20,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$02,$FF,$FF,$FF,$FF,$00,$01
  59+ E724 FF FF 20 00
  59+ E728 02 00 00 00
  59+ E72C 00 00 00 00
  59+ E730 00 00 00 00
  59+ E734 00 00 00 20
  59+ E738 00 02 FF FF
  59+ E73C FF FF 00 01
  60+ E740 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$01
  60+ E744 FF FF 00 00
  60+ E748 00 00 00 00
  60+ E74C 00 00 00 00
  60+ E750 00 00 00 00
  60+ E754 00 00 00 00
  60+ E758 00 00 FF FF
  60+ E75C FF FF 00 01
  61+ E760 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$7D,$8A,$AE,$BA,$AA,$AA,$55,$55,$5D,$75,$51,$BE,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  61+ E764 FF FF 00 00
  61+ E768 00 00 7D 8A
  61+ E76C AE BA AA AA
  61+ E770 55 55 5D 75
  61+ E774 51 BE 00 00
  61+ E778 00 00 80 00
  61+ E77C 00 00 00 01
  62+ E780 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$03,$00,$08,$00,$04,$00,$02,$00,$81,$81,$00,$40,$00,$20,$00,$10,$00,$C0,$00,$FF,$FF,$FF,$FF,$FF,$FF
  62+ E784 FF FF 00 03
  62+ E788 00 08 00 04
  62+ E78C 00 02 00 81
  62+ E790 81 00 40 00
  62+ E794 20 00 10 00
  62+ E798 C0 00 FF FF
  62+ E79C FF FF FF FF
  63+ E7A0 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$08,$C0,$00,$04,$00,$00,$40,$00,$01,$80,$00,$02,$00,$00,$20,$00,$03,$10,$00,$FF,$FF,$FF,$FF,$FF,$FF
  63+ E7A4 FF FF 00 08
  63+ E7A8 C0 00 04 00
  63+ E7AC 00 40 00 01
  63+ E7B0 80 00 02 00
  63+ E7B4 00 20 00 03
  63+ E7B8 10 00 FF FF
  63+ E7BC FF FF FF FF
  64+ E7C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$E4,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$27,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  64+ E7C4 00 01 00 00
  64+ E7C8 00 E4 00 00
  64+ E7CC 08 00 00 01
  64+ E7D0 80 00 00 10
  64+ E7D4 00 00 27 00
  64+ E7D8 00 00 FF FF
  64+ E7DC FF FF FF FF
  65+ E7E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  65+ E7E4 FF FF 00 00
  65+ E7E8 00 00 00 00
  65+ E7EC 00 00 00 00
  65+ E7F0 00 00 00 00
  65+ E7F4 00 00 00 00
  65+ E7F8 00 00 FF FF
  65+ E7FC FF FF FF FF
  66+ E800              ConsoleAttributes:
  67+ E800 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  67+ E804 07 07 45 45
  67+ E808 45 00 00 00
  67+ E80C 00 00 00 00
  67+ E810 00 00 00 00
  67+ E814 00 00 00 41
  67+ E818 41 41 07 07
  67+ E81C 07 07 07 07
  68+ E820 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$05,$45,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$41,$01,$07,$07,$07,$07,$07,$07
  68+ E824 07 07 05 45
  68+ E828 05 00 00 00
  68+ E82C 00 00 00 00
  68+ E830 00 00 00 00
  68+ E834 00 00 00 01
  68+ E838 41 01 07 07
  68+ E83C 07 07 07 07
  69+ E840 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  69+ E844 07 07 45 45
  69+ E848 45 00 00 00
  69+ E84C 00 00 00 00
  69+ E850 00 00 00 00
  69+ E854 00 00 00 41
  69+ E858 41 41 07 07
  69+ E85C 07 07 07 07
  70+ E860 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00,$00,$00,$00,$07,$00,$00,$00,$00,$07
  70+ E864 07 07 00 00
  70+ E868 00 00 42 42
  70+ E86C 42 42 42 42
  70+ E870 42 42 42 42
  70+ E874 42 42 00 00
  70+ E878 00 00 07 00
  70+ E87C 00 00 00 07
  71+ E880 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$02,$00,$07,$07,$07,$07,$07,$07
  71+ E884 07 07 00 02
  71+ E888 42 42 42 42
  71+ E88C 42 42 42 42
  71+ E890 42 42 42 42
  71+ E894 42 42 42 42
  71+ E898 02 00 07 07
  71+ E89C 07 07 07 07
  72+ E8A0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  72+ E8A4 07 07 00 02
  72+ E8A8 02 02 02 02
  72+ E8AC 02 02 02 02
  72+ E8B0 02 02 02 02
  72+ E8B4 02 02 02 02
  72+ E8B8 02 00 07 07
  72+ E8BC 07 07 07 07
  73+ E8C0 07 00 00 00      DB $07,$00,$00,$00,$00,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  73+ E8C4 00 07 00 02
  73+ E8C8 02 02 02 02
  73+ E8CC 02 02 02 02
  73+ E8D0 02 02 02 02
  73+ E8D4 02 02 02 02
  73+ E8D8 02 00 07 07
  73+ E8DC 07 07 07 07
  74+ E8E0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$07,$07,$07,$07,$07,$07
  74+ E8E4 07 07 00 00
  74+ E8E8 00 02 02 02
  74+ E8EC 02 02 02 02
  74+ E8F0 02 02 02 02
  74+ E8F4 02 02 02 00
  74+ E8F8 00 00 07 07
  74+ E8FC 07 07 07 07
  75+ E900
  76+ E900
# file closed: ./Images/ConsoleImageData.asm
1387  E900              ; Bank 62  ------------------------------------------------------------------------------------------------------------------------
1388  E900                  SLOT    ViewFrontAddr
1389  E900                  PAGE    BankFrontView
1390  E900                  ORG     ViewFrontAddr
1391  C000                  INCLUDE "./Views/Front_View.asm"
# file opened: ./Views/Front_View.asm
   1+ C000 46 72 6F 6E  front_page_page_marker  DB "FrontView   PG62"
   1+ C004 74 56 69 65
   1+ C008 77 20 20 20
   1+ C00C 50 47 36 32
   2+ C010
   3+ C010 47           draw_front_calc_alpha:  ld      b,a
   4+ C011 E6 80                                and     $80
   5+ C013 32 68 99                             ld      (ALP2),a                            ; set sign
   6+ C016 4F                                   ld      c,a                                 ; save sign
   7+ C017 EE 80                                xor     $80
   8+ C019 32 69 99                             ld      (ALP2FLIP),a                        ; and oppsite sign
   9+ C01C 3A 64 99                             ld      a,(JSTX)
  10+ C01F ED 27 80                             test    $80
  11+ C022 28 02                                jr      z,  .PositiveRoll
  12+ C024 ED 44        .NegativeRoll:          neg
  13+ C026 CB 3F        .PositiveRoll           srl     a                                   ; divide sign by 4
  14+ C028 CB 3F                                srl     a
  15+ C02A FE 08                                cp      8
  16+ C02C 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  17+ C02E CB 3F        .IncreasedDamp          srl     a
  18+ C030 32 67 99     .NotIncreasedDamp:      ld      (ALP1),a
  19+ C033 B1                                   or      c
  20+ C034 32 66 99                             ld      (ALPHA),a                           ; a = signed bit alph1
  21+ C037 21 70 C2     .RestartDampenRoll:     ld      hl,dampenRcounter
  22+ C03A 36 04                                ld      (hl),dampenRate
  23+ C03C C9                                   ret
  24+ C03D
  25+ C03D              ; Do the same for pitch
  26+ C03D 47           draw_front_calc_beta:   ld      b,a
  27+ C03E E6 80                                and     $80
  28+ C040 32 5B 99                             ld      (BET2),a                            ; set sign
  29+ C043 4F                                   ld      c,a                                 ; save sign
  30+ C044 EE 80                                xor     $80
  31+ C046 32 5C 99                             ld      (BET2FLIP),a                        ; and oppsite sign
  32+ C049 3A 59 99                             ld      a,(JSTY)
  33+ C04C ED 27 80                             test    $80
  34+ C04F 28 02                                jr      z,  .PositivePitch
  35+ C051 ED 44        .NegativePitch:         neg
  36+ C053 CB 3F        .PositivePitch:         srl     a                                   ; divide sign by 4
  37+ C055 CB 3F                                srl     a
  38+ C057 FE 08                                cp      8
  39+ C059 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  40+ C05B CB 3F        .IncreasedDamp          srl     a
  41+ C05D 32 5A 99     .NotIncreasedDamp:      ld      (BET1),a
  42+ C060 B1                                   or      c
  43+ C061 32 58 99                             ld      (BETA),a                            ; a = signed bit bet1
  44+ C064 21 71 C2     .RestartDampenPitch:    ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
  45+ C067 36 04                                ld      (hl),dampenRate
  46+ C069 C9                                   ret
  47+ C06A
  48+ C06A              draw_front_view:        MMUSelectLayer1
  48+ C06A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  49+ C06E CD 80 E0                             call    l1_cls
  50+ C071 CD 9A E0                             call    l1_attr_cls
  51+ C074                                      MMUSelectLayer2
  51+ C074 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  52+ C078 CD 03 E0                             call     asm_l2_double_buffer_on
  53+ C07B                                      MMUSelectSpriteBank
  53+ C07B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  54+ C07F CD 27 E4                             call    sprite_cls_cursors
  55+ C082 CD 36 E1                             call    sprite_reticule
  56+ C085 CD C5 E1                             call    sprite_laser
  57+ C088                                     ; call    sprite_laser_show
  58+ C088                                      MMUSelectConsoleBank
  58+ C088 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  59+ C08C 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  60+ C08F 11 00 E0                             ld          de,ConsoleImageData
  61+ C092 01 00 08                             ld          bc, ScreenL1BottomLen
  62+ C095 CD 66 96                             call        memcopy_dma
  63+ C098 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  64+ C09B 11 00 E8                             ld          de,ConsoleAttributes
  65+ C09E 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  66+ C0A1 CD 66 96                             call        memcopy_dma
  67+ C0A4 CD 34 94                             call        InitialiseStars
  68+ C0A7 AF                                   xor         a
  69+ C0A8 32 5F 9A                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
  70+ C0AB C9                                   ret
  71+ C0AC
  72+ C0AC
  73+ C0AC
  74+ C0AC
  75+ C0AC                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
  76+ C0AC                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
  77+ C0AC 80 40 60 28  LightningLines:         db 128, 064, 096, 040, 255, 097, 042, 076, 035, 031, 082, 039, 079, 020, 026, 079, 026, 058, 018, 022, 064, 021, 032, 026, 018, 038, 025, 030, 009, 026, 035, 020, 005, 016, 018, 037, 021, 000, 000, 018
  77+ C0B0 FF 61 2A 4C
  77+ C0B4 23 1F 52 27
  77+ C0B8 4F 14 1A 4F
  77+ C0BC 1A 3A 12 16
  77+ C0C0 40 15 20 1A
  77+ C0C4 12 26 19 1E
  77+ C0C8 09 1A 23 14
  77+ C0CC 05 10 12 25
  77+ C0D0 15 00 00 12
  78+ C0D4 80 40 8B 28                          db 128, 064, 139, 040, 255, 137, 045, 160, 035, 031, 150, 040, 157, 056, 026, 160, 036, 175, 010, 022, 156, 037, 196, 040, 018, 197, 041, 223, 033, 026, 223, 033, 245, 030, 018, 223, 032, 254, 047, 018
  78+ C0D8 FF 89 2D A0
  78+ C0DC 23 1F 96 28
  78+ C0E0 9D 38 1A A0
  78+ C0E4 24 AF 0A 16
  78+ C0E8 9C 25 C4 28
  78+ C0EC 12 C5 29 DF
  78+ C0F0 21 1A DF 21
  78+ C0F4 F5 1E 12 DF
  78+ C0F8 20 FE 2F 12
  79+ C0FC 80 40 5A 59                          db 128, 064, 090, 089, 255, 089, 089, 064, 098, 031, 079, 092, 064, 072, 025, 065, 075, 030, 070, 022, 035, 071, 038, 064, 018, 067, 095, 021, 099, 026, 031, 097, 000, 080, 018, 031, 097, 021, 110, 018
  79+ C100 FF 59 59 40
  79+ C104 62 1F 4F 5C
  79+ C108 40 48 19 41
  79+ C10C 4B 1E 46 16
  79+ C110 23 47 26 40
  79+ C114 12 43 5F 15
  79+ C118 63 1A 1F 61
  79+ C11C 00 50 12 1F
  79+ C120 61 15 6E 12
  80+ C124 80 40 61 71                          db 128, 064, 097, 113, 255, 098, 110, 064, 115, 031, 070, 115, 073, 127, 025, 071, 114, 060, 112, 022, 030, 120, 020, 126, 018, 070, 114, 050, 120, 026, 050, 120, 027, 119, 018, 020, 125, 010, 120, 018
  80+ C128 FF 62 6E 40
  80+ C12C 73 1F 46 73
  80+ C130 49 7F 19 47
  80+ C134 72 3C 70 16
  80+ C138 1E 78 14 7E
  80+ C13C 12 46 72 32
  80+ C140 78 1A 32 78
  80+ C144 1B 77 12 14
  80+ C148 7D 0A 78 12
  81+ C14C 80 40 84 59                          db 128, 064, 132, 089, 255, 131, 081, 145, 098, 031, 145, 097, 133, 103, 025, 145, 098, 150, 110, 022, 150, 109, 154, 105, 018, 150, 110, 146, 120, 026, 145, 120, 140, 126, 018, 147, 120, 159, 126, 018
  81+ C150 FF 83 51 91
  81+ C154 62 1F 91 61
  81+ C158 85 67 19 91
  81+ C15C 62 96 6E 16
  81+ C160 96 6D 9A 69
  81+ C164 12 96 6E 92
  81+ C168 78 1A 91 78
  81+ C16C 8C 7E 12 93
  81+ C170 78 9F 7E 12
  82+ C174 80 40 9F 67                          db 128, 064, 159, 103, 255, 161, 102, 171, 108, 031, 160, 102, 175, 127, 025, 175, 124, 200, 122, 022, 200, 121, 223, 120, 018, 224, 120, 225, 127, 026, 224, 119, 245, 116, 018, 246, 117, 254, 123, 018
  82+ C178 FF A1 66 AB
  82+ C17C 6C 1F A0 66
  82+ C180 AF 7F 19 AF
  82+ C184 7C C8 7A 16
  82+ C188 C8 79 DF 78
  82+ C18C 12 E0 78 E1
  82+ C190 7F 1A E0 77
  82+ C194 F5 74 12 F6
  82+ C198 75 FE 7B 12
  83+ C19C 80 40 91 4A                          db 128, 064, 145, 074, 255, 145, 073, 158, 072, 031, 159, 072, 179, 064, 025, 159, 073, 185, 085, 022, 182, 084, 197, 076, 018, 195, 075, 207, 079, 026, 206, 079, 245, 063, 018, 206, 080, 245, 105, 018
  83+ C1A0 FF 91 49 9E
  83+ C1A4 48 1F 9F 48
  83+ C1A8 B3 40 19 9F
  83+ C1AC 49 B9 55 16
  83+ C1B0 B6 54 C5 4C
  83+ C1B4 12 C3 4B CF
  83+ C1B8 4F 1A CE 4F
  83+ C1BC F5 3F 12 CE
  83+ C1C0 50 F5 69 12
  84+ C1C4
  85+ C1C4              ; Draw line at hl for b lines
  86+ C1C4 E5 C5        DrawLighningLine:       push    hl,,bc
  87+ C1C6 4E                                   ld      c,(hl)
  88+ C1C7 23                                   inc     hl
  89+ C1C8 46                                   ld      b,(hl)
  90+ C1C9 23                                   inc     hl
  91+ C1CA 5E                                   ld      e,(hl)
  92+ C1CB 23                                   inc     hl
  93+ C1CC 56                                   ld      d,(hl)
  94+ C1CD 23                                   inc     hl
  95+ C1CE 7E                                   ld      a,(hl)          ; colour
  96+ C1CF CD 33 E6                             call    l2_draw_diagonal
  97+ C1D2 C1 E1                                pop     hl,,bc
  98+ C1D4 3E 05                                ld      a,5
  99+ C1D6 ED 31                                add     hl,a
 100+ C1D8 10 EA                                djnz    DrawLighningLine
 101+ C1DA C9                                   ret
 102+ C1DB
 103+ C1DB              ;Loop though all lines
 104+ C1DB              ;   60$% chance of drawing a line, call draw line
 105+ C1DB              ;   go to next line
 106+ C1DB              ;repeat
 107+ C1DB 06 07        hyperspace_Lightning:   ld      b, 7                    ; total number of lightning bolts
 108+ C1DD 21 AC C0                             ld      hl,LightningLines
 109+ C1E0                                      MMUSelectLayer2
 109+ C1E0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 110+ C1E4                                      ;break
 111+ C1E4              ; above here select which lines table we will use
 112+ C1E4 C5 E5        .LineLoop:              push    bc,,hl
 113+ C1E6 CD 61 9F                             call    doRandom
 114+ C1E9 FE 1E                                cp      30
 115+ C1EB 30 0C                                jr      nc,.NextLine
 116+ C1ED CD 61 9F                             call    doRandom
 117+ C1F0 E6 07                                and     $07
 118+ C1F2 3C                                   inc     a
 119+ C1F3 47                                   ld      b,a
 120+ C1F4 E1                                   pop     hl
 121+ C1F5 E5                                   push    hl
 122+ C1F6 CD C4 C1                             call    DrawLighningLine
 123+ C1F9 E1 C1        .NextLine:              pop     bc,,hl
 124+ C1FB 16 08                                ld      d,8
 125+ C1FD 1E 05                                ld      e,5
 126+ C1FF ED 30                                mul
 127+ C201 19                                   add     hl,de
 128+ C202 10 E0                                djnz    .LineLoop
 129+ C204 3A 19 9B                             ld      a,(HyperCircle)
 130+ C207 57                                   ld      d,a
 131+ C208 01 80 40                             ld      bc, $4080
 132+ C20B                                      ;break
 133+ C20B 1E 00                                ld      e,$00
 134+ C20D CD 39 E8                             call    l2_draw_circle_fill; ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
 135+ C210 01 80 40                             ld      bc, $4080
 136+ C213 3A 19 9B                             ld      a,(HyperCircle)
 137+ C216 3C                                   inc     a
 138+ C217 57                                   ld      d,a
 139+ C218 1E FF                                ld      e,$FF
 140+ C21A CD 80 E7                             call    l2_draw_circle
 141+ C21D 3A 19 9B                             ld      a,(HyperCircle)
 142+ C220 3C                                   inc     a
 143+ C221 3C                                   inc     a
 144+ C222 FE 40                                cp      64
 145+ C224 D0                                   ret     nc
 146+ C225 32 19 9B                             ld      (HyperCircle),a
 147+ C228                                      SetCarryFlag
 147+ C228 37          >                        scf
 148+ C229 C9                                   ret
 149+ C22A
 150+ C22A
 151+ C22A              draw_hyperspace:        MMUSelectLayer1
 151+ C22A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C22E CD 80 E0                             call    l1_cls
 153+ C231 CD 9A E0                             call    l1_attr_cls
 154+ C234                                      MMUSelectLayer2
 154+ C234 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 155+ C238 CD 03 E0                             call     asm_l2_double_buffer_on
 156+ C23B                                      MMUSelectSpriteBank
 156+ C23B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 157+ C23F CD 27 E4                             call    sprite_cls_cursors
 158+ C242                                      MMUSelectConsoleBank
 158+ C242 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 159+ C246 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
 160+ C249 11 00 E0                             ld          de,ConsoleImageData
 161+ C24C 01 00 08                             ld          bc, ScreenL1BottomLen
 162+ C24F CD 66 96                             call        memcopy_dma
 163+ C252 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 164+ C255 11 00 E8                             ld          de,ConsoleAttributes
 165+ C258 01 00 01                             ld          bc, ScreenL1AttrBtmLen
 166+ C25B CD 66 96                             call        memcopy_dma
 167+ C25E CD 3F 94                             call        InitialiseHyperStars
 168+ C261 AF                                   xor         a
 169+ C262 32 5F 9A                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
 170+ C265 3E 02                                ld          a,2
 171+ C267 32 19 9B                             ld          (HyperCircle),a
 172+ C26A 3E FC                                ld          a,$FC
 173+ C26C 32 5F 9A                             ld          (DockedFlag),a
 174+ C26F C9                                   ret
 175+ C270
 176+ C270
 177+ C270              loop_hyperspace
 178+ C270
 179+ C270              dampenRate:             equ     $04
 180+ C270 04           dampenRcounter:         DB      dampenRate
 181+ C271 04           dampenPcounter:         DB      dampenRate
 182+ C272 AF           input_front_view:       xor         a
 183+ C273 2A D2 96                             ld      hl,(addr_Pressed_Accellerate)
 184+ C276 7E                                   ld      a,(hl)
 185+ C277                                      JumpIfAIsZero     .TestDecellerate
 185+ C277 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 185+ C278 CA 94 C2    >                        jp	z, .TestDecellerate
 186+ C27B 3A 4B 9A                             ld      a,(SHIPMAXSPEED)
 187+ C27E 57                                   ld      d,a
 188+ C27F 3A 4C 9A                             ld      a,(DELTA)
 189+ C282                                      JumpIfAGTENusng d,.TestDecellerate
 189+ C282 BA          >                        cp     d
 189+ C283 D2 94 C2    >                        jp		nc,.TestDecellerate
 190+ C286 3C                                   inc     a
 191+ C287 32 4C 9A                             ld      (DELTA),a
 192+ C28A 2A 4D 9A                             ld      hl,(DELT4Lo)
 193+ C28D ED 34 04 00                          add     hl,4
 194+ C291 22 4D 9A                             ld      (DELT4Lo),hl
 195+ C294 2A D4 96     .TestDecellerate:       ld      hl,(addr_Pressed_Decellerate)
 196+ C297 7E                                   ld      a,(hl)
 197+ C298                                      JumpIfAIsZero   .TestLeftPressed
 197+ C298 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 197+ C299 CA B1 C2    >                        jp	z, .TestLeftPressed
 198+ C29C 3A 4C 9A                             ld      a,(DELTA)
 199+ C29F                                      JumpIfAIsZero   .TestLeftPressed
 199+ C29F A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 199+ C2A0 CA B1 C2    >                        jp	z, .TestLeftPressed
 200+ C2A3 3D                                   dec     a
 201+ C2A4 32 4C 9A                             ld      (DELTA),a
 202+ C2A7 2A 4D 9A                             ld      hl,(DELT4Lo)
 203+ C2AA 2B                                   dec     hl
 204+ C2AB 2B                                   dec     hl
 205+ C2AC 2B                                   dec     hl
 206+ C2AD 2B                                   dec     hl
 207+ C2AE 22 4D 9A                             ld      (DELT4Lo),hl
 208+ C2B1 2A CA 96     .TestLeftPressed:       ld      hl,(addr_Pressed_RollLeft)
 209+ C2B4 7E                                   ld      a,(hl)
 210+ C2B5                                      JumpIfAIsZero   .TestRightPressed
 210+ C2B5 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 210+ C2B6 CA CC C2    >                        jp	z, .TestRightPressed
 211+ C2B9 3A 64 99                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 212+ C2BC 21 6B 99                             ld      hl,ALP1MAXL                         ; currnet ship max left roll
 213+ C2BF BE                                   cp      (hl)
 214+ C2C0 28 0A                                jr      z,.TestRightPressed
 215+ C2C2                                      ;break
 216+ C2C2 3D                                   dec     a                                   ; increase joystick roll
 217+ C2C3 32 64 99                             ld      (JSTX),a
 218+ C2C6 CD 10 C0                             call    draw_front_calc_alpha
 219+ C2C9 C3 01 C3                             jp      .TestDivePressed                    ; when pressing ignore damper
 220+ C2CC 2A CC 96     .TestRightPressed:       ld      hl,(addr_Pressed_RollRight)
 221+ C2CF 7E                                   ld      a,(hl)
 222+ C2D0                                      JumpIfAIsZero   .DampenRoll
 222+ C2D0 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 222+ C2D1 CA E7 C2    >                        jp	z, .DampenRoll
 223+ C2D4 3A 64 99                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 224+ C2D7 21 6A 99                             ld      hl,ALP1MAXR                         ; currnet ship max left roll
 225+ C2DA BE                                   cp      (hl)
 226+ C2DB 28 24                                jr      z,.TestDivePressed                   ; if its held then we don't dampen
 227+ C2DD                                      ;break
 228+ C2DD 3C                                   inc     a                                   ; increase joystick roll
 229+ C2DE 32 64 99     .UpdateAlphRoll:        ld      (JSTX),a
 230+ C2E1 CD 10 C0                             call    draw_front_calc_alpha
 231+ C2E4 C3 01 C3                             jp      .TestDivePressed                    ; when pressing ignore damper
 232+ C2E7 21 70 C2     .DampenRoll:            ld      hl,dampenRcounter
 233+ C2EA 35                                   dec     (hl)
 234+ C2EB 20 14                                jr      nz,.TestDivePressed
 235+ C2ED 3E 04                                ld      a,dampenRate
 236+ C2EF 77                                   ld      (hl),a
 237+ C2F0 3A 64 99                             ld      a,(JSTX)
 238+ C2F3 FE 00                                cp      0
 239+ C2F5 28 0A                                jr      z, .TestDivePressed
 240+ C2F7 CB 7F                                bit     7,a
 241+ C2F9 28 03                                jr      z,.PosRollDampen
 242+ C2FB 3C           .NegRollDampen:         inc     a
 243+ C2FC 18 01                                jr      .ApplyRollDampen
 244+ C2FE 3D           .PosRollDampen:         dec     a
 245+ C2FF 18 DD        .ApplyRollDampen:       jr      .UpdateAlphRoll
 246+ C301              ; Dive and Climb input
 247+ C301 2A CE 96     .TestDivePressed:       ld      hl,(addr_Pressed_Dive)
 248+ C304 7E                                   ld      a,(hl)
 249+ C305                                      JumpIfAIsZero   .TestClimbPressed
 249+ C305 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 249+ C306 CA 1C C3    >                        jp	z, .TestClimbPressed
 250+ C309 3A 59 99                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 251+ C30C 21 5E 99                             ld      hl,BET1MAXD                         ; currnet ship max left roll
 252+ C30F BE                                   cp      (hl)
 253+ C310 28 0A                                jr      z,.TestClimbPressed
 254+ C312                                      ;break
 255+ C312 3D                                   dec     a                                   ; increase joystick roll
 256+ C313 32 59 99                             ld      (JSTY),a
 257+ C316 CD 3D C0                             call    draw_front_calc_beta
 258+ C319 C3 51 C3                             jp      .ForwardCursorKeysDone
 259+ C31C 2A D0 96     .TestClimbPressed:      ld      hl,(addr_Pressed_Climb)
 260+ C31F 7E                                   ld      a,(hl)
 261+ C320                                      JumpIfAIsZero   .DampenPitch
 261+ C320 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 261+ C321 CA 37 C3    >                        jp	z, .DampenPitch
 262+ C324 3A 59 99                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 263+ C327 21 5D 99                             ld      hl,BET1MAXC                         ; currnet ship max left roll
 264+ C32A BE                                   cp      (hl)
 265+ C32B 28 24                                jr      z,.ForwardCursorKeysDone
 266+ C32D 3C                                   inc     a                                   ; increase joystick roll
 267+ C32E 32 59 99     .UpdateBetaPitch:       ld      (JSTY),a
 268+ C331 CD 3D C0                             call    draw_front_calc_beta
 269+ C334 C3 51 C3                             jp      .ForwardCursorKeysDone
 270+ C337 21 71 C2     .DampenPitch:           ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
 271+ C33A 35                                   dec     (hl)
 272+ C33B 20 14                                jr      nz,.ForwardCursorKeysDone
 273+ C33D 3E 04                                ld      a,dampenRate
 274+ C33F 77                                   ld      (hl),a
 275+ C340 3A 59 99                             ld      a,(JSTY)
 276+ C343 FE 00                                cp      0
 277+ C345 28 0A                                jr      z,.ForwardCursorKeysDone
 278+ C347 CB 7F                                bit     7,a
 279+ C349 28 03                                jr      z,.PosPitchDampen
 280+ C34B 3C           .NegPitchDampen:        inc     a
 281+ C34C 18 01                                jr      .ApplyPitchDampen
 282+ C34E 3D           .PosPitchDampen:        dec     a
 283+ C34F 18 DD        .ApplyPitchDampen:      jr      .UpdateBetaPitch
 284+ C351              ; Now test hyperpsace. We can't be docked as this is a view routine piece of logic but for say local charts we may
 285+ C351              ; be in flight and they have to force a forward view when hyperspace is pressed
 286+ C351              ; We won't do galatic here, but for other views force to forward view
 287+ C351 3E 24        .ForwardCursorKeysDone: ld      a,c_Pressed_Hyperspace              ; Check for hyperspace
 288+ C353 CD A5 97                             call    is_key_pressed
 289+ C356 20 48                                jr      nz,.NotHyperspace
 290+ C358              ; If we are in hyperspace countdown then test for hyperspace
 291+ C358 2A 16 9B                             ld      hl,(InnerHyperCount)                ; if hyperspace was enaged then cancel
 292+ C35B 7C                                   ld      a,h                                 ; hyperspace
 293+ C35C B5                                   or      l                                   ; .
 294+ C35D 20 41                                jr      nz,.CancelHyperspace                ; .
 295+ C35F              ; check selected target if we find one then after gettting galaxy at bc a=0 if not found
 296+ C35F ED 5B 58 9B                          ld      de,(PresentSystemX)
 297+ C363 2A 5A 9B                             ld      hl,(TargetSystemX)
 298+ C366 CD 09 AE                             call    compare16HLDE
 299+ C369 28 35                                jr      z,.NoTargetSelected                 ; can't jump to current system
 300+ C36B 3A 45 9B                             ld      a,(Galaxy)
 301+ C36E                                      MMUSelectGalaxyA
 301+ C36E ED 92 57    >                     nextreg GalaxyDataMMU,       a
 302+ C371 ED 4B 5A 9B                          ld      bc,(TargetSystemX)
 303+ C375 CD BB FA                             call    galaxy_name_at_bc
 304+ C378 FE 00                                cp      0
 305+ C37A 28 24                                jr      z,.NotHyperspace
 306+ C37C              ; check fuel is sufficient
 307+ C37C ED 4B 58 9B                          ld      bc,(PresentSystemX)
 308+ C380 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 309+ C384 ED 4B 5A 9B                          ld      bc,(TargetSystemX)
 310+ C388 ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 311+ C38C CD F8 FB                             call    galaxy_find_distance            ; get distance into HL
 312+ C38F 7C                                   ld      a,h
 313+ C390 A7                                   and     a
 314+ C391 20 0D                                jr      nz,.InsufficientFuel            ; max jump capacity is 25 ly for any ship
 315+ C393 3A 2A 9F                             ld      a,(Fuel)
 316+ C396                                      JumpIfALTNusng    l, .InsufficientFuel
 316+ C396 BD          >                        cp      l
 316+ C397 DA A0 C3    >                        jp		c, .InsufficientFuel
 317+ C39A              ; set up timer countdown
 318+ C39A 21 0B 0B                             ld      hl,HyperSpaceTimers                 ; set both timers to 15
 319+ C39D 22 16 9B                             ld      (InnerHyperCount),hl                ; .
 320+ C3A0              .CancelHyperspace
 321+ C3A0              .NoTargetSelected
 322+ C3A0              .InsufficientFuel
 323+ C3A0              .NotHyperspace:
 324+ C3A0 CD 43 9E     .CheckForLaserPressed:  call    IsLaserUseable                      ; no laser or destroyed?
 325+ C3A3 28 44                                jr      z,.CheckForMissile
 326+ C3A5              .CanLaserStillFire:     SetMemFalse FireLaserPressed                ; default to no laser
 326+ C3A5 3E FF       >                        ld      a,$FF
 326+ C3A7 32 3D 9B    >                        ld      (FireLaserPressed),a
 327+ C3AA 3A 65 9D                             ld      a,(CurrLaserPulseRate)              ; if not beam type
 328+ C3AD                                      JumpIfAIsZero .BeamType                     ; .
 328+ C3AD A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 328+ C3AE CA DB C3    >                        jp	z, .BeamType
 329+ C3B1 47                                   ld      b,a                                 ; and not run out of pulses
 330+ C3B2 3A 6C 9D                             ld      a,(CurrLaserPulseRateCount)         ;
 331+ C3B5 3A 69 9D                             ld      a,(CurrLaserPulseOnCount)           ;    if not already on
 332+ C3B8                                      JumpIfAEqNusng  b, .PulseLimitReached       ;
 332+ C3B8 B8          >                        cp     b
 332+ C3B9 CA E9 C3    >                        jp      z,.PulseLimitReached
 333+ C3BC 21 6A 9D                             ld      hl,CurrLaserPulseOffCount           ;       and not in off phase
 334+ C3BF B6                                   or      (hl)                                ;
 335+ C3C0 23                                   inc     hl  ; CurrLaserPulseRestCount       ;       and not in rest phase.
 336+ C3C1 B6                                   or      (hl)                                ;    .
 337+ C3C2 20 25                                jr      nz, .CheckForMissile                ;    .
 338+ C3C4 3E 14        .IsFirePressed:         ld      a,c_Pressed_FireLaser               ;       if fire is pressed
 339+ C3C6 CD 98 97                             call    is_key_up_state                     ;       .
 340+ C3C9 28 1E                                jr      z,.CheckForMissile                  ;       .
 341+ C3CB 3A 6C 9D     .CanProcesFire:         ld      a,(CurrLaserPulseRateCount)         ;            pulse rate count ++
 342+ C3CE 3C                                   inc     a                                   ;            .
 343+ C3CF 32 6C 9D     .StillHavePulsesLeft:   ld      (CurrLaserPulseRateCount),a         ;            .
 344+ C3D2                                      ldCopyByte CurrLaserPulseOnTime, CurrLaserPulseOnCount  ; pulse on count = pulse on time
 344+ C3D2 3A 66 9D    >                        ld       a,(CurrLaserPulseOnTime)
 344+ C3D5 32 69 9D    >                        ld       (CurrLaserPulseOnCount),a
 345+ C3D8                                   ;   ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount; pulse off count = pulse off time
 346+ C3D8                                   ;   ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount  ; pulse rest count = pulse rest time
 347+ C3D8 C3 E9 C3                             jp      .CheckForMissile
 348+ C3DB 3E 14        .BeamType:              ld      a,c_Pressed_FireLaser               ; else (beam type) if fire is pressed
 349+ C3DD CD 98 97                             call    is_key_up_state                     ;                   .
 350+ C3E0 28 07                                jr      z,.CheckForMissile                  ;                   .
 351+ C3E2                                      SetMemTrue FireLaserPressed                 ;                   set pulse on to 1
 351+ C3E2 AF          >                        xor     a
 351+ C3E3 32 3D 9B    >                        ld      (FireLaserPressed),a
 352+ C3E6 C3 E9 C3                             jp      .CheckForMissile
 353+ C3E9              .PulseLimitReached:     ;ZeroA                                       ;
 354+ C3E9                                      ;ld      (CurrLaserPulseRateCount),a         ;
 355+ C3E9                                      ;ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount   ; start the rest phase
 356+ C3E9
 357+ C3E9 3E 18        .CheckForMissile:       ld      a,c_Pressed_FireMissile             ; launch pressed?
 358+ C3EB CD A5 97                             call    is_key_pressed
 359+ C3EE 20 1C                                jr      nz,.NotMissileLaunch
 360+ C3F0                                      AnyMissilesLeft
 360+ C3F0 3A BB 9A    >                        ld      a,(NbrMissiles)
 360+ C3F3 A7          >                        and     a
 361+ C3F4 28 16                                jr      z,.NotMissileLaunch                 ; no missiles in rack
 362+ C3F6                                      IsMissileLockedOn
 362+ C3F6 3A 50 9D    >                        ld      a,(MissileTarget)
 362+ C3F9 FE FF       >                        cp      $FF
 362+ C3FB C8          >                        ret     z
 362+ C3FC             >                        ReturnIfSlotAEmpty                  ; if target slot is empty
 362+ C3FC 21 21 9B    >                        ld      hl,UniverseSlotList
 362+ C3FF ED 31       >                        add     hl,a
 362+ C401 7E          >                        ld      a,(hl)
 362+ C402 3C          >                        inc     a
 362+ C403 C8          >                        ret     z           ; if slot was ff inc would make it 0
 362+ C404 3D          >                        dec     a           ; get original value back for later
 362+ C405 C9          >                        ret                                 ; will return as nz now
 363+ C406 28 04                                jr      z,.MissileNotLocked
 364+ C408              .MissileLaunch:         SetMemTrue  MissileLaunchFlag
 364+ C408 AF          >                        xor     a
 364+ C409 32 51 9D    >                        ld      (MissileLaunchFlag),a
 365+ C40C              .MissileNotLocked:                       ; later on we need a "bing bong" nose for trying to launch an unlocked missile
 366+ C40C              .NotMissileLaunch:
 367+ C40C C9                                   ret
 368+ C40D
 369+ C40D
 370+ C40D
 371+ C40D
 372+ C40D
 373+ C40D
 374+ C40D
# file closed: ./Views/Front_View.asm
1392  C40D              ; Bank 63  ------------------------------------------------------------------------------------------------------------------------
1393  C40D                  SLOT    MenuStatusAddr
1394  C40D                  PAGE    BankMenuStatus
1395  C40D                  ORG     MenuStatusAddr
1396  C000                  INCLUDE "./Menus/status_menu.asm"
# file opened: ./Menus/status_menu.asm
   1+ C000 53 74 61 74  status_page_marker  DB "Status      PG63"
   1+ C004 75 73 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 36 33
   2+ C010
   3+ C010 40 02 4C B7  status_boiler_text		DW $0240,txt_commander
   4+ C014 90 02 52 9D  						DW $0290,CommanderName
   5+ C018 08 0B 60 B7  						DW $0B08,txt_present_system
   6+ C01C 08 13 73 B7  						DW $1308,txt_hyperspace_system
   7+ C020 08 1B 86 B7  						DW $1B08,txt_condition
   8+ C024 08 23 94 B7  						DW $2308,txt_fuel
   9+ C028 08 2B A2 B7  						DW $2B08,txt_cash
  10+ C02C 08 33 B0 B7  						DW $3308,txt_legal_status
  11+ C030 08 3B BE B7  						DW $3B08,txt_rating
  12+ C034 08 4B CC B7  						DW $4B08,txt_equipment
  13+ C038
  14+ C038 00 00        equipment_cursor		DW  $0000
  15+ C03A              present_position		equ	$0B98
  16+ C03A              hyperspace_position		equ	$1398
  17+ C03A              condition_position		equ	$1B70
  18+ C03A              fuel_position			equ	$2370
  19+ C03A              cash_position			equ	$2B70
  20+ C03A              legal_status_position	equ $3370
  21+ C03A              rank_position			equ $3B70
  22+ C03A              equipment_position		equ $5340
  23+ C03A              equipment_position2		equ $5378
  24+ C03A              equipmax_row			equ $FF
  25+ C03A
  26+ C03A 00           STAT_selected_row       DB 0
  27+ C03B 00           STAT_current_topItem    DB 0
  28+ C03C 00           STAT_current_end        DB 0
  29+ C03D              STAT_buffer_rows         EQU     128
  30+ C03D              STAT_buffer_row_len      EQU     24
  31+ C03D              STAT_eqip_window_len    EQU 10
  32+ C03D              STAT_display_buff_len    EQU     STAT_buffer_rows *   STAT_buffer_row_len
  33+ C03D 00 00 00...  STAT_display_buffer:     DS      STAT_display_buff_len                     ; maxium of 128 items can be coded for
  34+ CC3D              STAT_position			equ $5840
  35+ CC3D 00 00 00...  STAT_cash_amount    	DS 10
  36+ CC47 20 43 72 00  STAT_cash_UoM           DB " Cr",0
  37+ CC4B
  38+ CC4B 00 00 00...  stat_present_name       DS  30
  39+ CC69 00                                   DB  0
  40+ CC6A 00 00 00...  stat_target_name        DS  30
  41+ CC88 00                                   DB  0
  42+ CC89
  43+ CC89 21 7F E8     stat_copy_to_name:      ld      hl,GalaxyExpandedName
  44+ CC8C 01 1E 00                             ld      bc,30
  45+ CC8F ED B0                                ldir
  46+ CC91 C9                                   ret
  47+ CC92
  48+ CC92              ;----------------------------------------------------------------------------------------------------------------------------------
  49+ CC92              STAT_print_boiler_text: INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++CC92
   2++CC92              ;">print_boilder_text hl = text structure, b = message count"
   3++CC92              .BoilerTextLoop:
   4++CC92 C5           	push		bc			; Save Message Count loop value
   5++CC93 4E           	ld			c,(hl)		; Get Row into b
   6++CC94 23           	inc			hl
   7++CC95 46           	ld			b,(hl)		; Get Col into b
   8++CC96 23           	inc			hl
   9++CC97 5E           	ld			e,(hl)		; Get text address Lo into E
  10++CC98 23           	inc			hl
  11++CC99 56           	ld			d,(hl)		; Get text address Hi into E
  12++CC9A 23           	inc			hl
  13++CC9B E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++CC9C EB           	ex			de,hl		; now hl = address of text data
  15++CC9D 1E FF        	ld			e,txt_status_colour
  16++CC9F C5           	push		bc
  17++CCA0 D1           	pop			de
  18++CCA1                  MMUSelectLayer1
  18++CCA1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++CCA5 CD C8 E0     	call		l1_print_at
  20++CCA8 E1           	pop			hl
  21++CCA9 C1           	pop			bc
  22++CCAA 10 E6        	djnz		.BoilerTextLoop
  23++CCAC C9           	ret
  24++CCAD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  50+ CCAD              ;----------------------------------------------------------------------------------------------------------------------------------
  51+ CCAD DD 22 51 CD  STAT_DispDEIXtoIY:      ld (.STATclcn32z),ix
  52+ CCB1 ED 53 53 CD                          ld (.STATclcn32zIX),de
  53+ CCB5 DD 21 4D CD                          ld ix,.STATclcn32t+36
  54+ CCB9 06 09                                ld b,9
  55+ CCBB 0E 00                                ld c,0
  56+ CCBD 3E 30        .STATclcn321:           ld a,'0'
  57+ CCBF B7                                   or a
  58+ CCC0 DD 5E 00     .STATclcn322:           ld e,(ix+0)
  59+ CCC3 DD 56 01                             ld d,(ix+1)
  60+ CCC6 2A 51 CD                             ld hl,(.STATclcn32z)
  61+ CCC9 ED 52                                sbc hl,de
  62+ CCCB 22 51 CD                             ld (.STATclcn32z),hl
  63+ CCCE DD 5E 02                             ld e,(ix+2)
  64+ CCD1 DD 56 03                             ld d,(ix+3)
  65+ CCD4 2A 53 CD                             ld hl,(.STATclcn32zIX)
  66+ CCD7 ED 52                                sbc hl,de
  67+ CCD9 22 53 CD                             ld (.STATclcn32zIX),hl
  68+ CCDC 38 04                                jr c,.STATclcn325
  69+ CCDE 0C                                   inc c
  70+ CCDF 3C                                   inc a
  71+ CCE0 18 DE                                jr .STATclcn322
  72+ CCE2 DD 5E 00     .STATclcn325:           ld e,(ix+0)
  73+ CCE5 DD 56 01                             ld d,(ix+1)
  74+ CCE8 2A 51 CD                             ld hl,(.STATclcn32z)
  75+ CCEB 19                                   add hl,de
  76+ CCEC 22 51 CD                             ld (.STATclcn32z),hl
  77+ CCEF DD 5E 02                             ld e,(ix+2)
  78+ CCF2 DD 56 03                             ld d,(ix+3)
  79+ CCF5 2A 53 CD                             ld hl,(.STATclcn32zIX)
  80+ CCF8 ED 5A                                adc hl,de
  81+ CCFA 22 53 CD                             ld (.STATclcn32zIX),hl
  82+ CCFD 11 FC FF                             ld de,-4
  83+ CD00 DD 19                                add ix,de
  84+ CD02 0C                                   inc c
  85+ CD03 0D                                   dec c
  86+ CD04 28 05                                jr z,.STATclcn323
  87+ CD06 FD 77 00                             ld (iy+0),a
  88+ CD09 FD 23                                inc iy
  89+ CD0B 10 B0        .STATclcn323:           djnz .STATclcn321
  90+ CD0D 3A 51 CD                             ld a,(.STATclcn32z)
  91+ CD10 C6 30                                add A,'0'
  92+ CD12 FD 77 00                             ld (iy+0),a
  93+ CD15 FD 36 02 00                          ld (iy+2),0
  94+ CD19 FD 7E 00                             ld      a,(IY+0)
  95+ CD1C FD 77 01                             ld      (IY+1),a
  96+ CD1F 3E 2E                                ld      a,"."
  97+ CD21 FD 77 00                             ld      (IY+0),a
  98+ CD24 FD 23                                inc     IY
  99+ CD26 FD 23                                inc     IY
 100+ CD28 C9                                   ret
 101+ CD29 01 00 00 00  .STATclcn32t            dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 101+ CD2D 0A 00 00 00
 101+ CD31 64 00 00 00
 101+ CD35 E8 03 00 00
 101+ CD39 10 27 00 00
 102+ CD3D A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 102+ CD41 40 42 0F 00
 102+ CD45 80 96 98 00
 102+ CD49 00 E1 F5 05
 102+ CD4D 00 CA 9A 3B
 103+ CD51 00 00        .STATclcn32z            ds 2
 104+ CD53 00 00        .STATclcn32zIX          ds 2
 105+ CD55              ;----------------------------------------------------------------------------------------------------------------------------------
 106+ CD55 2A 28 9F     STAT_GetCash:           ld		hl,(Cash+2)
 107+ CD58 EB                                   ex      de,hl
 108+ CD59 DD 2A 26 9F                          ld      ix,(Cash)
 109+ CD5D FD 21 3D CC                          ld		iy,STAT_cash_amount
 110+ CD61 CD AD CC                             call 	STAT_DispDEIXtoIY
 111+ CD64 FD E5                                push    iy
 112+ CD66 D1                                   pop     de
 113+ CD67 21 47 CC                             ld      hl,STAT_cash_UoM
 114+ CD6A 01 04 00                             ld      bc,4
 115+ CD6D ED B0                                ldir
 116+ CD6F C9                                   ret
 117+ CD70              ;----------------------------------------------------------------------------------------------------------------------------------
 118+ CD70 7E           STAT_expand_word:       ld      a,(hl)
 119+ CD71 FE 00                                cp      0
 120+ CD73 C8                                   ret     z
 121+ CD74 12                                   ld      (de),a
 122+ CD75 23                                   inc     hl
 123+ CD76 13                                   inc     de
 124+ CD77 18 F7                                jr      STAT_expand_word
 125+ CD79
 126+ CD79              ; hl = list of words
 127+ CD79              ; de = adress to expand to
 128+ CD79 7E           STAT_expand_name:       ld      a,(hl)
 129+ CD7A 47                                   ld      b,a
 130+ CD7B 23                                   inc     hl
 131+ CD7C 7E                                   ld      a,(hl)              ; its a 16 bit
 132+ CD7D 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 133+ CD7E B0                                   or      b
 134+ CD7F 20 01                                jr      nz,.MoreToDo
 135+ CD81              ;                        ld      (de),a we dont want the null marker now
 136+ CD81 C9                                   ret
 137+ CD82 E5 D5        .MoreToDo:              push    hl,,de
 138+ CD84 7E                                   ld      a,(hl)              ; bodge for now no optimise
 139+ CD85 5F                                   ld      e,a
 140+ CD86 23                                   inc     hl
 141+ CD87 7E                                   ld      a,(hl)
 142+ CD88 57                                   ld      d,a
 143+ CD89 EB                                   ex      hl,de               ; hl is now Word... address
 144+ CD8A D1                                   pop     de                  ; de back to pointer to buffer
 145+ CD8B CD 70 CD     .ProcessWord:           call    STAT_expand_word
 146+ CD8E 3E 20                                ld      a," "               ; speculative space
 147+ CD90 12                                   ld      (de),a
 148+ CD91 13                                   inc     de
 149+ CD92 E1                                   pop     hl                  ; get string pointer back
 150+ CD93 23                                   inc     hl
 151+ CD94 23                                   inc     hl                  ; on to next word
 152+ CD95 18 E2                                jr      STAT_expand_name
 153+ CD97
 154+ CD97              STAT_First_Item         EQU     EQ_CARGO_BAY
 155+ CD97 3A 45 9B     STAT_buffer_list:       ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 156+ CD9A                                      MMUSelectGalaxyA
 156+ CD9A ED 92 57    >                     nextreg GalaxyDataMMU,       a
 157+ CD9D 21 3D C0                             ld      hl,STAT_display_buffer                      ; hl - target buffer
 158+ CDA0 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 159+ CDA2 11 00 0C                             ld      de, STAT_display_buff_len
 160+ CDA5 CD 40 96                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 161+ CDA8 21 54 C0                             ld      hl,STAT_display_buffer+STAT_buffer_row_len-1
 162+ CDAB 11 18 00                             ld      de,STAT_buffer_row_len
 163+ CDAE 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY
 164+ CDB0 AF                                   xor     a
 165+ CDB1 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 166+ CDB2 19                                   add     hl,de
 167+ CDB3 10 FC                                djnz    .EoLLoop
 168+ CDB5 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY              ; CurrentGameMaxEquipment but minus fuel and missiles
 169+ CDB7 DD 21 47 9F                          ld      ix,EquipmentFitted + STAT_First_Item        ; ix = equipment master table, ignore missiles
 170+ CDBB FD 21 3D C0                          ld      iy,STAT_display_buffer                      ; iy = target buffer
 171+ CDBF 0E 00                                ld      c,0                                         ; Current Row
 172+ CDC1 1E 02                                ld      e,STAT_First_Item
 173+ CDC3 DD 7E 00     .ProcessRow:            ld      a,(ix+0)                                    ; Do we own one?
 174+ CDC6 FE 00                                cp      0
 175+ CDC8 28 21                                jr      z,.DoneFittedCheck
 176+ CDCA D5 FD E5 DD  .OwnItem:               push    de,, iy,, ix,, bc
 176+ CDCE E5 C5
 177+ CDD0 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 178+ CDD3 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length, e = current equip row
 179+ CDD5 ED 30                                mul
 180+ CDD7 19                                   add     hl,de                                       ; hl = dword list of work pointers
 181+ CDD8 FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 182+ CDDC CD 79 CD                             call    STAT_expand_name                           ; expand name
 183+ CDDF C1 DD E1 FD                          pop     iy,,ix,,bc
 183+ CDE3 E1
 184+ CDE4 11 18 00                             ld      de,STAT_buffer_row_len
 185+ CDE7 FD 19                                add     iy,de                                       ; now iy = start of next column
 186+ CDE9 D1                                   pop     de
 187+ CDEA 0C                                   inc     c
 188+ CDEB DD 23        .DoneFittedCheck:       inc     ix
 189+ CDED 1C                                   inc     e
 190+ CDEE 10 D3                                djnz    .ProcessRow
 191+ CDF0 79           .DoneProcess:           ld      a,c
 192+ CDF1 32 3C C0                             ld      (STAT_current_end),a
 193+ CDF4 C9                                   ret
 194+ CDF5              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ CDF5              draw_STAT_maintext:    	InitNoDoubleBuffer
 195+ CDF5             >                            MMUSelectLayer1
 195+ CDF5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 195+ CDF9 CD 80 E0    >                            call	l1_cls
 195+ CDFC 3E 07       >                            ld		a,7
 195+ CDFE CD 9B E0    >                            call	l1_attr_cls_to_a
 195+ CE01             >                            MMUSelectLayer2
 195+ CE01 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ CE05 CD 09 E0    >                            call    asm_l2_double_buffer_off
 195+ CE08 CD F3 E0    >                            call	l2_cls	; Get some space
 195+ CE0B             >                            MMUSelectSpriteBank
 195+ CE0B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 195+ CE0F CD 27 E4    >                            call    sprite_cls_cursors
 196+ CE12 01 01 01     .Drawbox:               ld		bc,$0101
 197+ CE15 11 FD BE                             ld		de,$BEFD
 198+ CE18 3E C0                                ld		a,$C0
 199+ CE1A                                      MMUSelectLayer2
 199+ CE1A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 200+ CE1E CD 20 E2                             call	l2_draw_box
 201+ CE21 06 0A                                ld		b,10
 202+ CE23 21 10 C0                             ld		hl,status_boiler_text
 203+ CE26 CD 92 CC                             call	STAT_print_boiler_text
 204+ CE29 3A 45 9B     .PresentSystem:         ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 205+ CE2C                                      MMUSelectGalaxyA
 205+ CE2C ED 92 57    >                     nextreg GalaxyDataMMU,       a
 206+ CE2F ED 4B 58 9B                          ld      bc, (PresentSystemX)
 207+ CE33 CD BB FA                             call    galaxy_name_at_bc
 208+ CE36 11 4B CC                             ld      de,stat_present_name
 209+ CE39 CD 89 CC                             call    stat_copy_to_name
 209+ CE3C
 210+ CE3C 01 98 0B                             ld      bc,present_position
 211+ CE3F 21 4B CC                             ld      hl,stat_present_name
 212+ CE42                                      MMUSelectLayer2
 212+ CE42 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 213+ CE46 1E FF                                ld      e,txt_status_colour
 214+ CE48 CD 99 E1                             call    l2_print_at
 215+ CE4B 3A 45 9B     .HyperspaceSystem:      ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 216+ CE4E                                      MMUSelectGalaxyA
 216+ CE4E ED 92 57    >                     nextreg GalaxyDataMMU,       a
 217+ CE51 ED 4B 5A 9B                          ld      bc, (TargetSystemX)
 218+ CE55 CD BB FA                             call    galaxy_name_at_bc
 219+ CE58 11 6A CC                             ld      de,stat_target_name
 220+ CE5B CD 89 CC                             call    stat_copy_to_name
 220+ CE5E
 221+ CE5E 01 98 13                             ld      bc,hyperspace_position
 222+ CE61 21 6A CC                             ld      hl,stat_target_name
 223+ CE64                                      MMUSelectLayer2
 223+ CE64 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 224+ CE68 1E FF                                ld      e,txt_status_colour
 225+ CE6A CD 99 E1                             call    l2_print_at
 226+ CE6D CD 26 CF     .StatusText:	        call	get_cmdr_condition
 227+ CE70 21 72 A1                             ld		hl, ConditionNameIdx
 228+ CE73 CD 74 A2                             call	getTableText
 229+ CE76 01 70 1B                             ld		bc,condition_position
 230+ CE79                                      MMUSelectLayer2
 230+ CE79 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 231+ CE7D 1E FF                                ld      e,txt_status_colour
 232+ CE7F CD 99 E1                             call    l2_print_at
 233+ CE82 CD 29 B8     .DisplayFuel:           call	GetFuelLevel
 234+ CE85 21 D7 B7                             ld		hl, txt_fuel_level
 235+ CE88 7E                                   ld		a,(hl)
 236+ CE89 FE 30                                cp		'0'
 237+ CE8B 20 01                                jr		nz,.PrintFuel
 238+ CE8D 23           .SkipLeadingZero:	    inc		hl
 239+ CE8E 01 70 23     .PrintFuel:             ld		bc,fuel_position
 240+ CE91                                      MMUSelectLayer2
 240+ CE91 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 241+ CE95 1E FF                                ld      e,txt_status_colour
 242+ CE97 CD 99 E1                             call    l2_print_at
 243+ CE9A CD 55 CD     .DisplayCash:           call	STAT_GetCash
 244+ CE9D 01 70 2B                             ld		bc,cash_position
 245+ CEA0 21 3D CC                             ld		hl,STAT_cash_amount
 246+ CEA3                                      MMUSelectLayer2
 246+ CEA3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 247+ CEA7 1E FF                                ld      e,txt_status_colour
 248+ CEA9 CD 99 E1                             call    l2_print_at
 249+ CEAC 3A BC 9A     .PrintLegalStatus:      ld		a,(FugitiveInnocentStatus)
 250+ CEAF FE 00                                cp		0
 251+ CEB1 20 05                                jr		nz,.Naughty
 252+ CEB3 21 53 A3                             ld		hl,WordClean
 253+ CEB6 18 0C                                jr		.DisplayLegalStatus
 254+ CEB8 FE 32        .Naughty:               cp		50
 255+ CEBA 38 05                                jr		c,.JustOffender
 256+ CEBC 21 62 A3     .VeryNaughty:           ld		hl,WordFugitive
 257+ CEBF 18 03                                jr		.DisplayLegalStatus
 258+ CEC1 21 59 A3     .JustOffender:          ld		hl,WordOffender
 259+ CEC4 01 70 33     .DisplayLegalStatus:    ld		bc,legal_status_position
 260+ CEC7                                      MMUSelectLayer2
 260+ CEC7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 261+ CECB 1E FF                                ld      e,txt_status_colour
 262+ CECD CD 99 E1                             call    l2_print_at
 263+ CED0 ED 5B CF 9A  .DisplayRating:         ld		de,(KillTally)
 264+ CED4 CD 7F A2                             call	getRankIndex
 265+ CED7 21 5E A2                             ld		hl, RankingNameIdx
 266+ CEDA CD 74 A2                             call	getTableText
 267+ CEDD 01 70 3B                             ld		bc,rank_position
 268+ CEE0                                      MMUSelectLayer2
 268+ CEE0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 269+ CEE4 1E FF                                ld      e,txt_status_colour
 270+ CEE6 CD 99 E1                             call    l2_print_at
 271+ CEE9 C9                                   ret
 272+ CEEA
 273+ CEEA
 274+ CEEA              draw_STAT_items:        MMUSelectLayer1
 274+ CEEA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 275+ CEEE CD 80 E0                             call    l1_cls
 276+ CEF1                                      ; add in all the status stuff later
 277+ CEF1 3A 3B C0                             ld      a,(STAT_current_topItem)
 278+ CEF4 16 18                                ld      d,STAT_buffer_row_len
 279+ CEF6 5F                                   ld      e,a
 280+ CEF7 ED 30                                mul
 281+ CEF9 21 3D C0                             ld      hl,STAT_display_buffer
 282+ CEFC 19                                   add     hl,de
 283+ CEFD 3A 3B C0                             ld      a,(STAT_current_topItem)
 284+ CF00 47                                   ld      b,a
 285+ CF01 3A 3C C0                             ld      a,(STAT_current_end)
 286+ CF04 90                                   sub     b
 287+ CF05                                      JumpIfALTNusng  STAT_eqip_window_len, .FillScreen
 287+ CF05 FE 0A       >                        cp      STAT_eqip_window_len
 287+ CF07 DA 0E CF    >                        jp		c, .FillScreen
 288+ CF0A 06 0A        .JustWindowing:         ld      b,STAT_eqip_window_len
 289+ CF0C 18 01                                jr      .ReadyToPrint
 290+ CF0E 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 291+ CF0F 11 40 58     .ReadyToPrint:          ld      de,STAT_position
 292+ CF12 D5 E5 C5     .DrawARow:              push    de,, hl,, bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 293+ CF15 CD C8 E0                             call    l1_print_at
 293+ CF18
 294+ CF18 C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 295+ CF1A 11 18 00                             ld      de,STAT_buffer_row_len
 296+ CF1D 19                                   add     hl,de
 297+ CF1E D1                                   pop     de                          ; get output row back
 298+ CF1F 3E 08                                ld      a,8
 299+ CF21 82                                   add     a,d
 300+ CF22 57                                   ld      d,a
 301+ CF23 10 ED                                djnz    .DrawARow
 302+ CF25 C9                                   ret
 303+ CF26
 304+ CF26              ;----------------------------------------------------------------------------------------------------------------------------------
 305+ CF26
 306+ CF26 3A 5F 9A     get_cmdr_condition:     ld			a,(DockedFlag)
 307+ CF29 FE FF                                cp			PlayerDocked
 308+ CF2B 28 17                                jr			z,.PlayerIsDocked
 309+ CF2D              .PlayerNotDocked:	    ReturnIfMemTrue    SpaceStationSafeZone
 309+ CF2D 3A 3E 9B    >                        ld      a,(SpaceStationSafeZone)
 309+ CF30 A7          >                        and     a
 309+ CF31 C8          >                        ret     z
 310+ CF32 CD E3 9E                             call        AreShipsPresent
 311+ CF35 38 03                                jr          c,.NoShipsAround
 312+ CF37 3E 01                                ld          a,1
 313+ CF39 C9                                   ret
 314+ CF3A 3A 4D 9D     .NoShipsAround:         ld			a,(PlayerEnergy)
 315+ CF3D FE 80                                cp			$80
 316+ CF3F 3E 01                                ld          a,1
 317+ CF41 CE 01                                adc         1                                       ; add 1 + carry, if a < 128 then carry set so goes red
 318+ CF43 C9                                   ret
 319+ CF44 AF           .PlayerIsDocked:        xor			a
 320+ CF45 C9                                   ret
 321+ CF46
 322+ CF46              ;;;PrintEquipment:         ld		a,(hl)
 323+ CF46              ;;;                        cp		0
 324+ CF46              ;;;                        ret		z
 325+ CF46              ;;;                        ld		a,b
 326+ CF46              ;;;PrintEquipmentDirect:	call	expandTokenToString
 327+ CF46              ;;;                        ld		hl,TextBuffer
 328+ CF46              ;;;                        ld		de,(equipment_cursor)
 329+ CF46              ;;;                        call	l1_print_at
 330+ CF46              ;;;                        ld		bc,(equipment_cursor)
 331+ CF46              ;;;                        ld		a,b
 332+ CF46              ;;;                        add		a,8
 333+ CF46              ;;;                        ld		b,a
 334+ CF46              ;;;                        ld		(equipment_cursor),bc
 335+ CF46              ;;;                        cp		equipmax_row
 336+ CF46              ;;;                        jr		c,.SkipColUpdate
 337+ CF46              ;;;.ColUpdate:             ld		hl,equipment_position2
 338+ CF46              ;;;                        ld		(equipment_cursor),hl
 339+ CF46              ;;;                        ret
 340+ CF46              ;;;.SkipColUpdate:	        ld		a,b
 341+ CF46              ;;;                        ld		(equipment_cursor+1), a
 342+ CF46              ;;;                        ret
 343+ CF46
 344+ CF46              draw_status_menu:       InitNoDoubleBuffer
 344+ CF46             >                            MMUSelectLayer1
 344+ CF46 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 344+ CF4A CD 80 E0    >                            call	l1_cls
 344+ CF4D 3E 07       >                            ld		a,7
 344+ CF4F CD 9B E0    >                            call	l1_attr_cls_to_a
 344+ CF52             >                            MMUSelectLayer2
 344+ CF52 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 344+ CF56 CD 09 E0    >                            call    asm_l2_double_buffer_off
 344+ CF59 CD F3 E0    >                            call	l2_cls	; Get some space
 344+ CF5C             >                            MMUSelectSpriteBank
 344+ CF5C ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 344+ CF60 CD 27 E4    >                            call    sprite_cls_cursors
 345+ CF63 3E 08                                ld		a,8
 346+ CF65 32 5B 9A                             ld		(MenuIdMax),a
 347+ CF68 01 01 01     .Drawbox:               ld		bc,$0101
 348+ CF6B 11 FD BE                             ld		de,$BEFD
 349+ CF6E 3E C0                                ld		a,$C0
 350+ CF70                                      MMUSelectLayer2
 350+ CF70 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 351+ CF74 CD 20 E2                             call	l2_draw_box
 352+ CF77 01 01 0A                             ld		bc,$0A01
 353+ CF7A 11 C0 FE                             ld		de,$FEC0
 354+ CF7D CD 8A E2                             call	l2_draw_horz_line
 355+ CF80 CD 97 CD     .equipment              call    STAT_buffer_list
 356+ CF83 CD EA CE                             call    draw_STAT_items
 357+ CF86 CD F5 CD                             call    draw_STAT_maintext
 358+ CF89 C9                                   ret
 359+ CF8A
 360+ CF8A              ;----------------------------------------------------------------------------------------------------------------------------------
 361+ CF8A              ; Handles all the input whilst in the market menu
 362+ CF8A 3E 4A        loop_STAT_menu:         ld      a,c_Pressed_CursorUp
 363+ CF8C CD A5 97                             call    is_key_pressed
 364+ CF8F CC 9B CF                             call    z,STAT_UpPressed
 365+ CF92 3E 4C                                ld      a,c_Pressed_CursorDown
 366+ CF94 CD A5 97                             call    is_key_pressed
 367+ CF97 CC AD CF                             call    z,STAT_DownPressed
 368+ CF9A C9                                   ret
 369+ CF9B
 370+ CF9B              ;----------------------------------------------------------------------------------------------------------------------------------
 371+ CF9B AF           STAT_UpPressed:         xor     a
 372+ CF9C 32 3A C0                             ld      (STAT_selected_row),a
 373+ CF9F 3A 3B C0     .check_scroll_up:       ld      a,(STAT_current_topItem)
 374+ CFA2 FE 00                                cp      0
 375+ CFA4 C8                                   ret     z
 376+ CFA5 3D                                   dec     a           ; chjange later to buffering step back 1
 377+ CFA6 32 3B C0                             ld      (STAT_current_topItem),a
 378+ CFA9 CD EA CE                             call    draw_STAT_items
 379+ CFAC C9                                   ret
 380+ CFAD              ;----------------------------------------------------------------------------------------------------------------------------------
 381+ CFAD 3E 09        STAT_DownPressed:       ld      a,STAT_eqip_window_len-1
 382+ CFAF 32 3A C0                             ld      (STAT_selected_row),a
 383+ CFB2 3A 3C C0                             ld      a,(STAT_current_end)
 384+ CFB5 47                                   ld      b,a                             ; This check is if the current list is < one screen
 385+ CFB6 05                                   dec     b
 386+ CFB7 3A 3A C0                             ld      a,(STAT_selected_row)
 387+ CFBA B8                                   cp      b
 388+ CFBB C8                                   ret     z
 389+ CFBC FE 09                                cp      STAT_eqip_window_len-1
 390+ CFBE 28 05                                jr      z, .check_scroll_down
 391+ CFC0 21 3A C0                             ld      hl,STAT_selected_row
 392+ CFC3 34                                   inc     (hl)
 393+ CFC4 C9                                   ret
 394+ CFC5 47           .check_scroll_down:     ld      b,a
 395+ CFC6 3A 3B C0                             ld      a,(STAT_current_topItem)
 396+ CFC9 80                                   add     b
 397+ CFCA 3C                                   inc     a
 398+ CFCB 21 3C C0                             ld      hl,STAT_current_end
 399+ CFCE                                      ReturnIfAGTEusng      (hl)
 399+ CFCE BE          >                        cp    (hl)
 399+ CFCF D0          >                        ret	 nc
 400+ CFD0 21 3B C0     .can_scroll_down:       ld      hl,STAT_current_topItem
 401+ CFD3 34                                   inc     (hl)
 402+ CFD4 CD EA CE                             call    draw_STAT_items
 403+ CFD7 C9                                   ret
 404+ CFD8
# file closed: ./Menus/status_menu.asm
1397  CFD8
1398  CFD8              ; Bank 64  ------------------------------------------------------------------------------------------------------------------------
1399  CFD8
1400  CFD8                  SLOT    MenuEquipSAddr
1401  CFD8                  PAGE    BankMenuEquipS
1402  CFD8                  ORG     MenuEquipSAddr
1403  C000                  INCLUDE "./Menus/equip_ship_menu.asm"
# file opened: ./Menus/equip_ship_menu.asm
   1+ C000 45 71 75 69  eqshp_prices_page_marker  DB "EquipShipPG63"
   1+ C004 70 53 68 69
   1+ C008 70 50 47 36
   1+ C00C 33
   2+ C00D 50 02 19 C0  eqshp_boiler_text		DW $0250,eqship_title
   3+ C011 20 02 C1 A7  						DW $0220,name_expanded
   4+ C015 08 B0 24 C0                          DW $B008,eqship_cash
   5+ C019
   6+ C019 45 71 75 69  eqship_title            DB "Equip Ship",0
   6+ C01D 70 20 53 68
   6+ C021 69 70 00
   7+ C024 43 61 73 68  eqship_cash				DB "Cash : ",0
   7+ C028 20 3A 20 00
   8+ C02C
   9+ C02C 30 30 2E 30  txt_eqshp_amount	    DB "00.0",0
   9+ C030 00
  10+ C031 39 39 39 00  txt_eqshp_quantity      DB "999",0
  11+ C035 39 39 39 00  txt_eqshp_cargo         DB "999",0
  12+ C039 00 00        eqshp_cursor			DW  $0000
  13+ C03B              eqshp_position			equ $1808
  14+ C03B              eqshp_uom				equ	$68
  15+ C03B              eqshp_price 			equ $88
  16+ C03B              eqshp_Quantity			equ	$B0
  17+ C03B              eqshp_Cargo             equ $E0
  18+ C03B              eqshp_UomOffset		    equ 46
  19+ C03B 20 20 20 20  eqshp_blank_line        DB "                                ",0
  19+ C03F 20 20 20 20
  19+ C043 20 20 20 20
  19+ C047 20 20 20 20
  19+ C04B 20 20 20 20
  19+ C04F 20 20 20 20
  19+ C053 20 20 20 20
  19+ C057 20 20 20 20
  19+ C05B 00
  20+ C05C
  21+ C05C 00 00 00...  eqshp_item_price        DS 20
  22+ C070
  23+ C070              eqshp_cash_position     equ $B048
  24+ C070 00 00 00...  eqshp_cash_amount		DS 20
  25+ C084 20 43 72 20  eqshp_cash_UoM          DB " Cr       ",0
  25+ C088 20 20 20 20
  25+ C08C 20 20 00
  26+ C08F
  27+ C08F 00           eqshp_selected_row      DB 0
  28+ C090 00           eqshp_current_topItem   DB 0
  29+ C091 00           eqshp_current_end       DB 0
  30+ C092              eqship_buffer_rows      EQU     128
  31+ C092              eqship_buffer_row_len   EQU      32
  32+ C092              eqship_display_buff_len EQU     eqship_buffer_rows *   eqship_buffer_row_len
  33+ C092 00 00 00...  eqship_display_buffer:  DS      eqship_display_buff_len                     ; maxium of 128 items can be coded for
  34+ D092 00 00 00...  eqship_buyable_buffer:  DS      128
  35+ D112              eqship_buffer_cash_col: EQU     21
  36+ D112              eqship_fitted_module:   EQU     29
  37+ D112              ;----------------------------------------------------------------------------------------------------------------------------------
  38+ D112 3A 8F C0     eqshp_highlight_row:    ld      a,(eqshp_selected_row)
  39+ D115 C6 03                                add     a,3
  40+ D117 57                                   ld      d,a
  41+ D118 1E 56                                ld      e,L1InvHighlight
  42+ D11A                                      MMUSelectLayer1
  42+ D11A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  43+ D11E CD 30 E0                             call    l1_hilight_row
  44+ D121 C9                                   ret
  45+ D122              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ D122 3A 8F C0     eqshp_lowlight_row      ld      a,(eqshp_selected_row)
  47+ D125 C6 03                                add     a,3
  48+ D127 57                                   ld      d,a
  49+ D128 1E 07                                ld      e,L1InvLowlight
  50+ D12A                                      MMUSelectLayer1
  50+ D12A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ D12E CD 30 E0                             call    l1_hilight_row
  52+ D131 C9                                   ret
  53+ D132              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ D132 CD 49 D1     eqshp_DispDEIXtoIY1DP:  call    eqshp_DispDEIXtoIY
  55+ D135 FD 36 02 00                          ld      (iy+2),0
  56+ D139 FD 7E 00                             ld      a,(IY+0)
  57+ D13C FD 77 01                             ld      (IY+1),a
  58+ D13F 3E 2E                                ld      a,"."
  59+ D141 FD 77 00                             ld      (IY+0),a
  60+ D144 FD 23                                inc     IY
  61+ D146 FD 23                                inc     IY
  62+ D148 C9                                   ret
  63+ D149              ;----------------------------------------------------------------------------------------------------------------------------------
  64+ D149 DD 22 DA D1  eqshp_DispDEIXtoIY:     ld (.EQSHPclcn32z),ix
  65+ D14D ED 53 DC D1                          ld (.EQSHPclcn32zIX),de
  66+ D151 DD 21 D6 D1                          ld ix,.EQSHPclcn32t+36
  67+ D155 06 09                                ld b,9
  68+ D157 0E 00                                ld c,0
  69+ D159 3E 30        .EQSHPclcn321:            ld a,'0'
  70+ D15B B7                                   or a
  71+ D15C DD 5E 00     .EQSHPclcn322:            ld e,(ix+0)
  72+ D15F DD 56 01                             ld d,(ix+1)
  73+ D162 2A DA D1                             ld hl,(.EQSHPclcn32z)
  74+ D165 ED 52                                sbc hl,de
  75+ D167 22 DA D1                             ld (.EQSHPclcn32z),hl
  76+ D16A DD 5E 02                             ld e,(ix+2)
  77+ D16D DD 56 03                             ld d,(ix+3)
  78+ D170 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  79+ D173 ED 52                                sbc hl,de
  80+ D175 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  81+ D178 38 04                                jr c,.EQSHPclcn325
  82+ D17A 0C                                   inc c
  83+ D17B 3C                                   inc a
  84+ D17C 18 DE                                jr .EQSHPclcn322
  85+ D17E DD 5E 00     .EQSHPclcn325:            ld e,(ix+0)
  86+ D181 DD 56 01                             ld d,(ix+1)
  87+ D184 2A DA D1                             ld hl,(.EQSHPclcn32z)
  88+ D187 19                                   add hl,de
  89+ D188 22 DA D1                             ld (.EQSHPclcn32z),hl
  90+ D18B DD 5E 02                             ld e,(ix+2)
  91+ D18E DD 56 03                             ld d,(ix+3)
  92+ D191 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  93+ D194 ED 5A                                adc hl,de
  94+ D196 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  95+ D199 11 FC FF                             ld de,-4
  96+ D19C DD 19                                add ix,de
  97+ D19E 0C                                   inc c
  98+ D19F 0D                                   dec c
  99+ D1A0 28 05                                jr z,.EQSHPclcn323
 100+ D1A2 FD 77 00                             ld (iy+0),a
 101+ D1A5 FD 23                                inc iy
 102+ D1A7 10 B0        .EQSHPclcn323:            djnz .EQSHPclcn321
 103+ D1A9 3A DA D1                             ld a,(.EQSHPclcn32z)
 104+ D1AC C6 30                                add A,'0'
 105+ D1AE FD 77 00                             ld (iy+0),a
 106+ D1B1 C9                                   ret
 107+ D1B2 01 00 00 00  .EQSHPclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 107+ D1B6 0A 00 00 00
 107+ D1BA 64 00 00 00
 107+ D1BE E8 03 00 00
 107+ D1C2 10 27 00 00
 108+ D1C6 A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 108+ D1CA 40 42 0F 00
 108+ D1CE 80 96 98 00
 108+ D1D2 00 E1 F5 05
 108+ D1D6 00 CA 9A 3B
 109+ D1DA 00 00        .EQSHPclcn32z             ds 2
 110+ D1DC 00 00        .EQSHPclcn32zIX           ds 2
 111+ D1DE              ;----------------------------------------------------------------------------------------------------------------------------------
 112+ D1DE              ; "DispHL, writes HL to DE address"
 113+ D1DE 01 F0 D8     EQSHP_DispHLtoDE:         ld	bc,-10000
 114+ D1E1 CD F7 D1                             call	EQSHP_Num1
 115+ D1E4 01 18 FC                             ld	bc,-1000
 116+ D1E7 CD F7 D1                             call	EQSHP_Num1
 117+ D1EA 01 9C FF                             ld	bc,-100
 118+ D1ED CD F7 D1                             call	EQSHP_Num1
 119+ D1F0 0E F6                                ld	c,-10
 120+ D1F2 CD F7 D1                             call	EQSHP_Num1
 121+ D1F5 0E FF                                ld	c,-1
 122+ D1F7 3E 2F        EQSHP_Num1:	            ld	a,'0'-1
 123+ D1F9 3C           .Num2:	                inc	a
 124+ D1FA 09                                   add	hl,bc
 125+ D1FB 38 FC                                jr	c,.Num2
 126+ D1FD ED 42                                sbc	hl,bc
 127+ D1FF 12                                   ld	(de),a
 128+ D200 13                                   inc	de
 129+ D201 C9                                   ret
 130+ D202              ;----------------------------------------------------------------------------------------------------------------------------------
 131+ D202 26 00        EQSHP_DispAtoDE:          ld h,0
 132+ D204 6F                                   ld l,a
 133+ D205 C3 DE D1                             jp EQSHP_DispHLtoDE
 134+ D208              ;----------------------------------------------------------------------------------------------------------------------------------
 135+ D208 26 00        EQSHP_DispPriceAtoDE:     ld h,0
 136+ D20A 6F                                   ld l,a
 137+ D20B 01 9C FF                             ld	bc,-100
 138+ D20E CD 1E D2                             call	.NumLeadBlank1
 139+ D211 0E F6                                ld	c,-10
 140+ D213 CD F7 D1                             call	EQSHP_Num1
 141+ D216 3E 2E                                ld		a,'.'					; we could assume preformat but
 142+ D218 12                                   ld		(de),a					; we can optimse that later TODO
 143+ D219 13                                   inc		de						; with just an inc De
 144+ D21A 0E FF                                ld	c,-1
 145+ D21C 18 D9                                jr		EQSHP_Num1
 146+ D21E 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 147+ D220 3C           .NumLeadBlank2:	        inc	a
 148+ D221 09                                   add	hl,bc
 149+ D222 38 FC                                jr	c,.NumLeadBlank2
 150+ D224 FE 30                                cp	'0'
 151+ D226 20 02                                jr	nz,.DontBlank
 152+ D228 3E 20        .Blank:                 ld	a,' '
 153+ D22A ED 42        .DontBlank:	            sbc	hl,bc
 154+ D22C 12                                   ld	(de),a
 155+ D22D 13                                   inc	de
 156+ D22E C9                                   ret
 157+ D22F              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ D22F FE 00        EQSHP_DispQtyAtoDE:      cp	0
 159+ D231 28 30                                jr	z,.NoStock
 160+ D233 26 00                                ld h,0
 161+ D235 6F                                   ld l,a
 162+ D236 01 9C FF                             ld	bc,-100
 163+ D239 CD 52 D2                             call	.NumLeadBlank1
 164+ D23C FE 20        .WasLead0:              cp      ' '
 165+ D23E 20 09                                jr      nz,.NotHundredsZero
 166+ D240 0E F6                                ld	c,-10
 167+ D242 CD 52 D2                             call	.NumLeadBlank1
 168+ D245 0E FF                                ld	c,-1
 169+ D247 18 AE                                jr		EQSHP_Num1
 170+ D249 0E F6        .NotHundredsZero:       ld	c,-10
 171+ D24B CD F7 D1                             call	EQSHP_Num1
 172+ D24E 0E FF                                ld	c,-1
 173+ D250 18 A5                                jr		EQSHP_Num1
 174+ D252 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 175+ D254 3C           .NumLeadBlank2:	        inc	a
 176+ D255 09                                   add	hl,bc
 177+ D256 38 FC                                jr	c,.NumLeadBlank2
 178+ D258 FE 30                                cp	'0'
 179+ D25A 20 02                                jr	nz,.DontBlank
 180+ D25C 3E 20        .Blank:                 ld	a,' '
 181+ D25E ED 42        .DontBlank:	            sbc	hl,bc
 182+ D260 12                                   ld	(de),a
 183+ D261 13                                   inc	de
 184+ D262 C9                                   ret
 185+ D263 3E 20        .NoStock:               ld	a,' '
 186+ D265 12                                   ld	(de),a
 187+ D266 13                                   inc	de
 188+ D267 12                                   ld	(de),a
 189+ D268 13                                   inc	de
 190+ D269 3E 2D                                ld	a,'-'
 191+ D26B 12                                   ld	(de),a
 192+ D26C 13                                   inc de
 193+ D26D C9                                   ret
 194+ D26E              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ D26E              EQSHP_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++D26E
   2++D26E              ;">print_boilder_text hl = text structure, b = message count"
   3++D26E              .BoilerTextLoop:
   4++D26E C5           	push		bc			; Save Message Count loop value
   5++D26F 4E           	ld			c,(hl)		; Get Row into b
   6++D270 23           	inc			hl
   7++D271 46           	ld			b,(hl)		; Get Col into b
   8++D272 23           	inc			hl
   9++D273 5E           	ld			e,(hl)		; Get text address Lo into E
  10++D274 23           	inc			hl
  11++D275 56           	ld			d,(hl)		; Get text address Hi into E
  12++D276 23           	inc			hl
  13++D277 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++D278 EB           	ex			de,hl		; now hl = address of text data
  15++D279 1E FF        	ld			e,txt_status_colour
  16++D27B C5           	push		bc
  17++D27C D1           	pop			de
  18++D27D                  MMUSelectLayer1
  18++D27D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++D281 CD C8 E0     	call		l1_print_at
  20++D284 E1           	pop			hl
  21++D285 C1           	pop			bc
  22++D286 10 E6        	djnz		.BoilerTextLoop
  23++D288 C9           	ret
  24++D289
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 196+ D289              ;----------------------------------------------------------------------------------------------------------------------------------
 197+ D289 2A 28 9F     eqshp_GetCash:          ld		hl,(Cash+2)
 198+ D28C EB                                   ex      de,hl
 199+ D28D DD 2A 26 9F                          ld      ix,(Cash)
 200+ D291 FD 21 70 C0                          ld		iy,eqshp_cash_amount
 201+ D295 CD 32 D1                             call 	eqshp_DispDEIXtoIY1DP
 202+ D298 FD E5                                push    IY
 203+ D29A D1                                   pop     de
 204+ D29B 21 84 C0                             ld      hl,eqshp_cash_UoM
 205+ D29E 01 0B 00                             ld      bc,11
 206+ D2A1 ED B0                                ldir
 207+ D2A3 C9                                   ret
 208+ D2A4              ;----------------------------------------------------------------------------------------------------------------------------------
 209+ D2A4 CD 89 D2     eqshp_DisplayCash:      call	eqshp_GetCash
 210+ D2A7 21 70 C0                             ld		hl,eqshp_cash_amount
 211+ D2AA 11 48 B0                             ld      de,eqshp_cash_position
 212+ D2AD                                      MMUSelectLayer1
 212+ D2AD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 213+ D2B1 CD C8 E0                             call	l1_print_at
 214+ D2B4 C9                                   ret
 215+ D2B5              ;----------------------------------------------------------------------------------------------------------------------------------
 216+ D2B5 7E           eqshp_expand_word:      ld      a,(hl)
 217+ D2B6 FE 00                                cp      0
 218+ D2B8 C8                                   ret     z
 219+ D2B9 12                                   ld      (de),a
 220+ D2BA 23                                   inc     hl
 221+ D2BB 13                                   inc     de
 222+ D2BC 18 F7                                jr      eqshp_expand_word
 223+ D2BE
 224+ D2BE              ; hl = list of words
 225+ D2BE              ; de = adress to expand to
 226+ D2BE 7E           eqshp_expand_name:      ld      a,(hl)
 227+ D2BF 47                                   ld      b,a
 228+ D2C0 23                                   inc     hl
 229+ D2C1 7E                                   ld      a,(hl)              ; its a 16 bit
 230+ D2C2 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 231+ D2C3 B0                                   or      b
 232+ D2C4 20 01                                jr      nz,.MoreToDo
 233+ D2C6              ;                        ld      (de),a we dont want the null marker now
 234+ D2C6 C9                                   ret
 235+ D2C7 E5 D5        .MoreToDo:              push    hl,,de
 236+ D2C9 7E                                   ld      a,(hl)              ; bodge for now no optimise
 237+ D2CA 5F                                   ld      e,a
 238+ D2CB 23                                   inc     hl
 239+ D2CC 7E                                   ld      a,(hl)
 240+ D2CD 57                                   ld      d,a
 241+ D2CE EB                                   ex      hl,de               ; hl is now Word... address
 242+ D2CF D1                                   pop     de                  ; de back to pointer to buffer
 243+ D2D0 CD B5 D2     .ProcessWord:           call    eqshp_expand_word
 244+ D2D3 3E 20                                ld      a," "               ; speculative space
 245+ D2D5 12                                   ld      (de),a
 246+ D2D6 13                                   inc     de
 247+ D2D7 E1                                   pop     hl                  ; get string pointer back
 248+ D2D8 23                                   inc     hl
 249+ D2D9 23                                   inc     hl                  ; on to next word
 250+ D2DA 18 E2                                jr      eqshp_expand_name
 251+ D2DC
 252+ D2DC 21 92 C0     eqshp_buffer_list:      ld      hl,eqship_display_buffer                    ; hl - target buffer
 253+ D2DF 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 254+ D2E1 11 00 10                             ld      de, eqship_display_buff_len
 255+ D2E4 CD 40 96                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 256+ D2E7 21 B1 C0                             ld      hl,eqship_display_buffer+eqship_buffer_row_len-1
 257+ D2EA 11 20 00                             ld      de,eqship_buffer_row_len
 258+ D2ED 06 1A                                ld      b,ShipEquipTableSize
 259+ D2EF AF                                   xor     a
 260+ D2F0 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 261+ D2F1 19                                   add     hl,de
 262+ D2F2 10 FC                                djnz    .EoLLoop
 263+ D2F4 06 1A                                ld      b,ShipEquipTableSize                        ; CurrentGameMaxEquipment
 264+ D2F6 DD 21 D6 F4                          ld      ix,ShipEquipmentList                        ; ix = equipment master table
 265+ D2FA FD 21 92 C0                          ld      iy,eqship_display_buffer                    ; iy = target buffer
 266+ D2FE 0E 00                                ld      c,0                                         ; Current Row
 267+ D300 DD 7E 01     .ProcessRow:            ld      a,(ix+1)                                    ; get can buy
 268+ D303 FE FF                                cp      $FF                                         ; if its $FF then do not display
 269+ D305 C2 12 D3                             jp      nz,.BufferItem
 270+ D308 11 10 00     .DoNotDisplay:          ld      de,ShipEquipTableRowLen                     ; mov eto next equipment list, 7 =  row length
 271+ D30B DD 19                                add     ix,de
 272+ D30D 10 F1                                djnz    .ProcessRow
 273+ D30F C3 75 D3                             jp      .DoneProcess
 274+ D312 FD E5 DD E5  .BufferItem:            push    iy,,ix,,bc
 274+ D316 C5
 275+ D317 DD 7E 00                             ld      a,(ix+0)                                    ; get can buy
 276+ D31A 21 92 D0                             ld      hl,eqship_buyable_buffer                    ;
 277+ D31D 59                                   ld      e,c
 278+ D31E 16 00                                ld      d,0                                         ;
 279+ D320 19                                   add     hl,de                                       ;
 280+ D321 77                                   ld      (hl),a                                      ; set buyable to 0
 281+ D322 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 282+ D325 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length
 283+ D327 59                                   ld      e,c
 284+ D328 ED 30                                mul
 285+ D32A 19                                   add     hl,de                                       ; hl = dword list of work pointers
 286+ D32B FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 287+ D32F C5                                   push    bc
 288+ D330 CD BE D2                             call    eqshp_expand_name                           ; expand name
 289+ D333 C1                                   pop     bc
 290+ D334 11 15 00                             ld      de,eqship_buffer_cash_col                   ; move buffer column to 20
 291+ D337 FD 19                                add     iy,de
 292+ D339 FD E5                                push    iy
 293+ D33B DD 7E 04                             ld      a,(ix+4)
 294+ D33E 5F                                   ld      e,a
 295+ D33F DD 7E 05                             ld      a,(ix+5)
 296+ D342 57                                   ld      d,a                                         ; de = price
 297+ D343 DD 62 DD 6B                          ld      ix,de
 298+ D347                                      ;push    de
 299+ D347                                      ;pop     ix
 300+ D347 11 00 00                             ld      de,0                                        ; deix = price
 301+ D34A CD 49 D1                             call    eqshp_DispDEIXtoIY                          ; print it to pos IY
 302+ D34D 3E 20                                ld      a," "
 303+ D34F FD 77 00                             ld      (IY+0),a
 304+ D352 FD 77 01                             ld      (IY+1),a
 305+ D355 FD 77 02                             ld      (IY+2),a
 306+ D358 FD E1                                pop     iy
 307+ D35A CD 7A D3                             call    .RightJustify
 308+ D35D C1 DD E1 FD                          pop     iy,,ix,,bc
 308+ D361 E1
 309+ D362 DD 7E 07     .CheckFitted:           ld      a,(ix+7)
 310+ D365 FD 77 1D                             ld      (iy+eqship_fitted_module),a
 311+ D368 11 20 00                             ld      de,eqship_buffer_row_len
 312+ D36B FD 19                                add     iy,de                                       ; now iy = start of next column
 313+ D36D 11 10 00                             ld      de,ShipEquipTableRowLen
 314+ D370 DD 19                                add     ix,de
 315+ D372 0C                                   inc     c
 316+ D373 10 8B                                djnz    .ProcessRow
 317+ D375 79           .DoneProcess:           ld      a,c
 318+ D376 32 91 C0                             ld      (eqshp_current_end),a
 319+ D379 C9                                   ret
 320+ D37A CD 7D D3     .RightJustify:          call    .RightJustify2
 321+ D37D CD 80 D3     .RightJustify2:         call    .RightJustify3
 322+ D380 FD 7E 03     .RightJustify3:         ld      a,(iy+3)
 323+ D383 FE 20                                cp      " "
 324+ D385 CC 89 D3                             call    z,.ShuffleRight
 325+ D388 C9                                   ret
 326+ D389 FD E5        .ShuffleRight:          push    iy
 327+ D38B E1                                   pop     hl
 328+ D38C 3E 03                                ld      a,3
 329+ D38E ED 31                                add     hl,a
 330+ D390 FD 7E 02                             ld      a,(iy+2)
 331+ D393 77                                   ld      (hl),a
 332+ D394 2B                                   dec     hl
 333+ D395 FD 7E 01                             ld      a,(iy+1)
 334+ D398 77                                   ld      (hl),a
 335+ D399 2B                                   dec     hl
 336+ D39A FD 7E 00                             ld      a,(iy+0)
 337+ D39D 77                                   ld      (hl),a
 338+ D39E 2B                                   dec     hl
 339+ D39F 3E 20                                ld      a," "
 340+ D3A1 77                                   ld      (hl),a
 341+ D3A2 C9                                   ret
 342+ D3A3
 343+ D3A3
 344+ D3A3              draw_eqship_items:      MMUSelectLayer1
 344+ D3A3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 345+ D3A7 CD 80 E0                             call    l1_cls
 346+ D3AA 06 03                                ld		b,3
 347+ D3AC 21 0D C0                             ld		hl,eqshp_boiler_text
 348+ D3AF CD 6E D2                             call	EQSHP_print_boiler_text
 349+ D3B2 CD A4 D2                             call    eqshp_DisplayCash
 350+ D3B5 3A 90 C0                             ld      a,(eqshp_current_topItem)
 351+ D3B8 16 20                                ld      d,eqship_buffer_row_len
 352+ D3BA 5F                                   ld      e,a
 353+ D3BB ED 30                                mul
 354+ D3BD 21 92 C0                             ld      hl,eqship_display_buffer
 355+ D3C0 19                                   add     hl,de
 356+ D3C1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 357+ D3C4 47                                   ld      b,a
 358+ D3C5 3A 91 C0                             ld      a,(eqshp_current_end)
 359+ D3C8 90                                   sub     b
 360+ D3C9                                      JumpIfALTNusng  18, .FillScreen
 360+ D3C9 FE 12       >                        cp      18
 360+ D3CB DA D2 D3    >                        jp		c, .FillScreen
 361+ D3CE 06 12        .JustWindowing:         ld      b,18
 362+ D3D0 18 01                                jr      .ReadyToPrint
 363+ D3D2 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 364+ D3D3 11 08 18     .ReadyToPrint:          ld      de,eqshp_position
 365+ D3D6 D5 E5 C5     .DrawARow:              push    de,,hl,,bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 366+ D3D9 CD C8 E0                             call    l1_print_at
 366+ D3DC
 367+ D3DC C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 368+ D3DE 11 20 00                             ld      de,eqship_buffer_row_len
 369+ D3E1 19                                   add     hl,de
 370+ D3E2 D1                                   pop     de                          ; get output row back
 371+ D3E3 3E 08                                ld      a,8
 372+ D3E5 82                                   add     a,d
 373+ D3E6 57                                   ld      d,a
 374+ D3E7 10 ED                                djnz    .DrawARow
 375+ D3E9 C9                                   ret
 376+ D3EA
 377+ D3EA              draw_eqshp_menu:        InitNoDoubleBuffer
 377+ D3EA             >                            MMUSelectLayer1
 377+ D3EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 377+ D3EE CD 80 E0    >                            call	l1_cls
 377+ D3F1 3E 07       >                            ld		a,7
 377+ D3F3 CD 9B E0    >                            call	l1_attr_cls_to_a
 377+ D3F6             >                            MMUSelectLayer2
 377+ D3F6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 377+ D3FA CD 09 E0    >                            call    asm_l2_double_buffer_off
 377+ D3FD CD F3 E0    >                            call	l2_cls	; Get some space
 377+ D400             >                            MMUSelectSpriteBank
 377+ D400 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 377+ D404 CD 27 E4    >                            call    sprite_cls_cursors
 378+ D407 3E 20                                ld      a,$20
 379+ D409 32 5B 9A                             ld      (MenuIdMax),a
 380+ D40C 3A 45 9B     .SetData:               ld      a,(Galaxy)
 381+ D40F                                      MMUSelectGalaxyA
 381+ D40F ED 92 57    >                     nextreg GalaxyDataMMU,       a
 382+ D412 CD 6D F9                             call    galaxy_planet_data
 383+ D415 CD F5 F8                             call    galaxy_equip_market
 384+ D418 ED 4B 58 9B                          ld      bc,(PresentSystemX)
 385+ D41C CD BB FA                             call    galaxy_name_at_bc
 386+ D41F CD 6D F9                             call    galaxy_planet_data
 387+ D422 AF                                   xor     a
 388+ D423 32 90 C0                             ld      (eqshp_current_topItem),a
 389+ D426 CD DC D2                             call    eqshp_buffer_list
 390+ D429 01 01 01     .Drawbox:               ld		bc,$0101
 391+ D42C 11 FD BE                             ld		de,$BEFD
 392+ D42F 3E C0                                ld		a,$C0
 393+ D431                                      MMUSelectLayer2
 393+ D431 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 394+ D435 CD 20 E2                             call	l2_draw_box
 395+ D438 01 01 0A                             ld		bc,$0A01
 396+ D43B 11 C0 FE                             ld		de,$FEC0
 397+ D43E CD 8A E2                             call	l2_draw_horz_line
 398+ D441 3A 45 9B     .StaticText:	        ld      a,(Galaxy)
 399+ D444                                      MMUSelectGalaxyA
 399+ D444 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 400+ D447 3E 19                                ld		a,25
 401+ D449 CD 3C A7                             call	expandTokenToString
 402+ D44C CD 7A F6                             call	GetDigramGalaxySeed
 403+ D44F CD A3 D3                             call    draw_eqship_items
 404+ D452 AF           .InitialHighlight:      xor     a
 405+ D453 32 8F C0                             ld      (eqshp_selected_row),a        ; assume on row zero
 406+ D456 CD 12 D1                             call    eqshp_highlight_row
 407+ D459 CD A4 D2     .DisCash:               call    eqshp_DisplayCash
 408+ D45C C9                                   ret
 409+ D45D
 410+ D45D              ;----------------------------------------------------------------------------------------------------------------------------------
 411+ D45D CD DC D2     eqip_refesh_buffer:     call    eqshp_buffer_list
 412+ D460 3A 8F C0                             ld      a,(eqshp_selected_row)              ; get revised list length
 413+ D463 47                                   ld      b,a
 414+ D464 3A 90 C0                             ld      a,(eqshp_current_topItem)           ; get current top of screen
 415+ D467 4F                                   ld      c,a
 416+ D468 80                                   add     b                                   ; a = top + selected row
 417+ D469 21 91 C0                             ld      hl,eqshp_current_end
 418+ D46C                                      CallIfAGTENusng (hl), .NewListShorter       ; if a > new list len then rebuild
 418+ D46C BE          >                        cp      (hl)
 418+ D46D D4 73 D4    >                        call	nc,.NewListShorter
 419+ D470 C3 7F D4                             jp      .RedrawList
 420+ D473 C5           .NewListShorter:        push    bc
 421+ D474 CD 22 D1                             call    eqshp_lowlight_row
 422+ D477 C1                                   pop     bc
 423+ D478 3A 91 C0                             ld      a,(eqshp_current_end)               ; b = end of list
 424+ D47B 91                                   sub     c                                   ; minus current top
 425+ D47C 32 8F C0                             ld      (eqshp_selected_row),a
 426+ D47F CD 12 D1     .RedrawList:            call    eqshp_highlight_row
 427+ D482 CD A3 D3                             call    draw_eqship_items
 428+ D485 C9                                   ret
 429+ D486
 430+ D486              ;----------------------------------------------------------------------------------------------------------------------------------
 431+ D486              ; Handles all the input whilst in the market menu
 432+ D486 3E 4A        loop_eqshp_menu:        ld      a,c_Pressed_CursorUp
 433+ D488 CD A5 97                             call    is_key_pressed
 434+ D48B CC A7 D4                             call    z,eqshp_UpPressed
 435+ D48E 3E 4C                                ld      a,c_Pressed_CursorDown
 436+ D490 CD A5 97                             call    is_key_pressed
 437+ D493 CC C7 D4                             call    z,eqshp_DownPressed
 438+ D496 3E 08                                ld      a,c_Pressed_RollLeft
 439+ D498 CD A5 97                             call    is_key_pressed
 440+ D49B CC F3 D4                             call    z,eqshp_LeftPressed
 441+ D49E 3E 0A                                ld      a,c_Pressed_RollRight
 442+ D4A0 CD A5 97                             call    is_key_pressed
 443+ D4A3 CC 68 D5                             call    z,eqshp_RightPressed
 444+ D4A6 C9                                   ret
 445+ D4A7
 446+ D4A7              ;----------------------------------------------------------------------------------------------------------------------------------
 447+ D4A7 3A 8F C0     eqshp_UpPressed:        ld      a,(eqshp_selected_row)
 448+ D4AA FE 00                                cp      0
 449+ D4AC 28 0B                                jr      z,.check_scroll_up
 450+ D4AE CD 22 D1                             call    eqshp_lowlight_row
 451+ D4B1 21 8F C0                             ld      hl,eqshp_selected_row
 452+ D4B4 35                                   dec     (hl)
 453+ D4B5 CD 12 D1                             call    eqshp_highlight_row
 454+ D4B8 C9                                   ret
 455+ D4B9 3A 90 C0     .check_scroll_up:       ld      a,(eqshp_current_topItem)
 456+ D4BC FE 00                                cp      0
 457+ D4BE C8                                   ret     z
 458+ D4BF 3D                                   dec     a           ; chjange later to buffering step back 1
 459+ D4C0 32 90 C0                             ld      (eqshp_current_topItem),a
 460+ D4C3 CD A3 D3                             call    draw_eqship_items
 461+ D4C6 C9                                   ret
 462+ D4C7              ;----------------------------------------------------------------------------------------------------------------------------------
 463+ D4C7 3A 91 C0     eqshp_DownPressed:      ld      a,(eqshp_current_end)
 464+ D4CA 47                                   ld      b,a                             ; This check is if the current list is < one screen
 465+ D4CB 05                                   dec     b
 466+ D4CC 3A 8F C0                             ld      a,(eqshp_selected_row)
 467+ D4CF B8                                   cp      b
 468+ D4D0 C8                                   ret     z
 469+ D4D1 FE 11                                cp      17
 470+ D4D3 28 0B                                jr      z, .check_scroll_down
 471+ D4D5 CD 22 D1                             call    eqshp_lowlight_row
 472+ D4D8 21 8F C0                             ld      hl,eqshp_selected_row
 473+ D4DB 34                                   inc     (hl)
 474+ D4DC CD 12 D1                             call    eqshp_highlight_row
 475+ D4DF C9                                   ret
 476+ D4E0 47           .check_scroll_down:     ld      b,a
 477+ D4E1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 478+ D4E4 80                                   add     b
 479+ D4E5 3C                                   inc     a
 480+ D4E6 21 91 C0                             ld      hl,eqshp_current_end
 481+ D4E9                                      ReturnIfAGTEusng      (hl)
 481+ D4E9 BE          >                        cp    (hl)
 481+ D4EA D0          >                        ret	 nc
 482+ D4EB 21 90 C0     .can_scroll_down:       ld      hl,eqshp_current_topItem
 483+ D4EE 34                                   inc     (hl)
 484+ D4EF CD A3 D3                             call    draw_eqship_items
 485+ D4F2 C9                                   ret
 486+ D4F3              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ D4F3 3A 45 9B     eqshp_LeftPressed:      ld      a,(Galaxy)
 488+ D4F6                                      MMUSelectGalaxyA
 488+ D4F6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 489+ D4F9 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 490+ D4FD 3A 90 C0     .IsItFuel:              ld      a,(eqshp_current_topItem)   ; Can't refund fuel
 491+ D500 47                                   ld      b,a
 492+ D501 3A 8F C0                             ld      a,(eqshp_selected_row)
 493+ D504 80                                   add     b
 494+ D505 FE 00                                cp      0
 495+ D507 C8                                   ret     z
 496+ D508 4F           .FuelNotSelected:       ld      c,a
 497+ D509 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 498+ D50B 5F                                   ld      e,a
 499+ D50C ED 30                                mul
 500+ D50E DD 19                                add     ix,de
 501+ D510 DD 7E 07                             ld      a,(ix+7)
 502+ D513 FE 2D                                cp      "-"
 503+ D515 C8                                   ret     z
 504+ D516 79           .CheckIfMissle:         ld      a,c
 505+ D517 FE 01                                cp      EQ_MISSILE
 506+ D519 28 2F                                jr      z,.RefundMissle
 507+ D51B DD 5E 04     .RefundItemCash:        ld      e,(ix+4)
 508+ D51E DD 56 05                             ld      d,(ix+5)
 509+ D521 E5 C5                                push    hl,,bc
 510+ D523 CD 3B A9                             call    addDEtoCash         ; refund laser value
 511+ D526 C1 E1                                pop     hl,,bc
 512+ D528 3E 2D                                ld      a,"-"
 513+ D52A DD 77 07                             ld      (ix+7),a
 514+ D52D 21 45 9F                             ld      hl,EquipmentFitted
 515+ D530 79                                   ld      a,c                 ; get back current laser ref
 516+ D531 ED 31                                add     hl,a
 517+ D533 36 00                                ld      (hl),0              ; remove laser from equipment
 518+ D535 CD 5D D4                             call    eqip_refesh_buffer
 519+ D538 DD 7E 08                             ld      a,(ix+8)
 520+ D53B FE FF                                cp      $FF
 521+ D53D C8                                   ret     z
 522+ D53E 21 3D 9F     .ItsALaser              ld      hl,LaserType        ; clear out respective current laser
 523+ D541 47                                   ld      b,a
 524+ D542 DD 7E 09                             ld      a,(ix+9)
 525+ D545 ED 31                                add     hl,a
 526+ D547 36 FF                                ld      (hl),$FF            ; $FF = not fitted
 527+ D549 C9                                   ret
 528+ D54A DD 5E 04     .RefundMissle           ld      e,(ix+4)
 529+ D54D DD 56 05                             ld      d,(ix+5)
 530+ D550 E5 C5                                push    hl,,bc
 531+ D552 CD 3B A9                             call    addDEtoCash         ; refund laser value
 532+ D555 C1 E1                                pop     hl,,bc
 533+ D557 DD 7E 07                             ld      a,(ix+7)
 534+ D55A 3D                                   dec     a
 535+ D55B FE 30                                cp      "0"
 536+ D55D 20 02                                jr      nz,.NotAllSold
 537+ D55F 3E 2D        .AllSold:               ld      a,"-"
 538+ D561 DD 77 07     .NotAllSold:            ld      (ix+7),a
 539+ D564 CD 5D D4                             call    eqip_refesh_buffer
 540+ D567 C9                                   ret
 541+ D568              ;----------------------------------------------------------------------------------------------------------------------------------
 542+ D568 3A 45 9B     eqshp_RightPressed:     ld      a,(Galaxy)
 543+ D56B                                      MMUSelectGalaxyA
 543+ D56B ED 92 57    >                     nextreg GalaxyDataMMU,       a
 544+ D56E DD 21 D6 F4                          ld      ix,ShipEquipmentList
 545+ D572 3A 90 C0                             ld      a,(eqshp_current_topItem)
 546+ D575 47                                   ld      b,a
 547+ D576 3A 8F C0                             ld      a,(eqshp_selected_row)
 548+ D579 80                                   add     a,b
 549+ D57A FE 01                                cp      EQ_MISSILE
 550+ D57C 20 0A                                jr      nz,.NotAMissileBuy
 551+ D57E 08           .ItsAMissile:           ex      af,af'
 552+ D57F 3E 34                                ld      a,"4"
 553+ D581 32 9A D5                             ld      (.CompareCheck+1),a
 554+ D584 08                                   ex      af,af'
 555+ D585 C3 8F D5                             jp      .FindInTable
 556+ D588 08           .NotAMissileBuy:        ex      af,af'
 557+ D589 3E 2A                                ld      a,"*"
 558+ D58B 32 9A D5                             ld      (.CompareCheck+1),a
 559+ D58E 08                                   ex      af,af'
 560+ D58F 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 561+ D591 5F                                   ld      e,a
 562+ D592 ED 30                                mul
 563+ D594 DD 19                                add     ix,de
 564+ D596 DD 7E 07                             ld      a,(ix+7)
 565+ D599 FE 2A        .CompareCheck:          cp      "*"; not true for missles astyou can buy 1 to 4
 566+ D59B C8                                   ret     z
 567+ D59C 47           .Purchasable:           ld      b,a
 568+ D59D DD 7E 06                             ld      a,(ix+6)
 569+ D5A0 FE 01                                cp      EQ_MISSILE
 570+ D5A2 20 06                                jr      nz,.NotMissleMax
 571+ D5A4 21 BB 9A     .MissleQuanity:         ld      hl,NbrMissiles
 572+ D5A7 78                                   ld      a,b
 573+ D5A8 BE                                   cp      (hl)
 574+ D5A9 C8                                   ret     z
 575+ D5AA 4F           .NotMissleMax:          ld      c,a
 576+ D5AB DD 7E 01                             ld      a,(ix+1)
 577+ D5AE FE FF                                cp      $FF
 578+ D5B0 C8                                   ret     z
 579+ D5B1 2A 28 9F     .CheckCash:             ld      hl,(Cash+2)
 580+ D5B4 7C                                   ld      a,h
 581+ D5B5 B5                                   or      l
 582+ D5B6 20 0F                                jr      nz,.MoreThanRequired
 583+ D5B8 2A 26 9F                             ld      hl,(Cash)
 584+ D5BB 7C                                   ld      a,h
 585+ D5BC FE 00                                cp      0
 586+ D5BE 20 07                                jr      nz,.MoreThanRequired
 587+ D5C0 DD 7E 02                             ld      a,(ix+2)
 588+ D5C3 BD                                   cp      l
 589+ D5C4 30 01                                jr      nc,.MoreThanRequired
 590+ D5C6 C9                                   ret                         ; Insufficient Funds
 591+ D5C7 DD 7E 06     .MoreThanRequired:      ld      a,(ix+6)
 592+ D5CA FE 00                                cp      0
 593+ D5CC 28 15                                jr      z,.MaxFuelOut
 594+ D5CE FE 01                                cp      1
 595+ D5D0 28 1B                                jr      z,.AddMissle
 596+ D5D2                                      JumpIfAGTENusng  EQ_FRONT_PULSE,.AddLaser
 596+ D5D2 FE 0A       >                        cp     EQ_FRONT_PULSE
 596+ D5D4 D2 F7 D5    >                        jp		nc,.AddLaser
 597+ D5D7 21 45 9F     .AddNormalItem:         ld      hl,EquipmentFitted
 598+ D5DA ED 31                                add     hl,a
 599+ D5DC 36 FF                                ld      (hl),$FF
 600+ D5DE 3E 2A                                ld      a,"*"
 601+ D5E0 C3 3F D6                             jp      .AddedItem
 602+ D5E3              .MaxFuelOut:            MaxFuelMacro
 602+ D5E3 3E 46       >						ld		a,MaxFuelLevel
 602+ D5E5 32 2A 9F    >						ld		(Fuel),a
 603+ D5E8 3E 2A                                ld      a,"*"
 604+ D5EA C3 3F D6                             jp      .AddedItem
 605+ D5ED 21 BB 9A     .AddMissle:             ld      hl,NbrMissiles
 606+ D5F0 34                                   inc     (hl)
 607+ D5F1 7E                                   ld      a,(hl)
 608+ D5F2 C6 30                                add     "0"
 609+ D5F4 C3 3F D6                             jp      .AddedItem
 610+ D5F7 DD 7E 08     .AddLaser:              ld      a,(ix+8)            ; Get if its a laser, $FF = no laser
 611+ D5FA FE FF                                cp      $FF
 612+ D5FC 20 29                                jr      nz,.BuyLaser
 613+ D5FE              .LargeCargoBay: ;TODO
 614+ D5FE 4F           .RefundExistingLaser:   ld      c,a                 ; retain current laser nbr
 615+ D5FF 21 D6 F4                             ld      hl,ShipEquipmentList
 616+ D602 16 10                                ld      d,ShipEquipTableRowLen
 617+ D604 5F                                   ld      e,a
 618+ D605 ED 30                                mul
 619+ D607 19                                   add     hl,de               ; now we have the row for the current laser
 620+ D608 3E 04                                ld      a,4
 621+ D60A ED 31                                add     hl,a
 622+ D60C 7E                                   ld      a,(hl)
 623+ D60D 5F                                   ld      e,a
 624+ D60E 23                                   inc     hl
 625+ D60F 7E                                   ld      a,(hl)
 626+ D610 57                                   ld      d,a
 627+ D611 E5 C5                                push    hl,,bc
 628+ D613 CD 3B A9                             call    addDEtoCash         ; refund laser value
 629+ D616 C1 E1                                pop     hl,,bc
 630+ D618 3E 02                                ld      a,2
 631+ D61A ED 31                                add     hl,a
 632+ D61C 3E 2D                                ld      a,"-"
 633+ D61E 77                                   ld      (hl),a              ; clear on ship equipment
 634+ D61F 21 45 9F                             ld      hl,EquipmentFitted
 635+ D622 79                                   ld      a,c                 ; get back current laser ref
 636+ D623 ED 31                                add     hl,a
 637+ D625 36 00                                ld      (hl),0              ; remove laser from equipment
 638+ D627 21 45 9F     .BuyLaser:              ld      hl,EquipmentFitted
 639+ D62A DD 7E 06                             ld      a,(ix+6)
 640+ D62D ED 31                                add     hl,a
 641+ D62F 36 FF                                ld      (hl),$FF
 642+ D631 DD 7E 09                             ld      a,(ix+9)            ; get laser position
 643+ D634 21 3D 9F                             ld      hl,LaserType
 644+ D637 ED 31                                add     hl,a
 645+ D639 DD 7E 08                             ld      a,(ix+8)            ; get type
 646+ D63C 77                                   ld      (hl),a
 647+ D63D 3E 2A                                ld      a,"*"
 648+ D63F DD 77 07     .AddedItem              ld      (ix+7),a
 649+ D642 DD 5E 04                             ld      e,(ix+4)
 650+ D645 DD 56 05                             ld      d,(ix+5)
 651+ D648 CD 4E A9                             call    subDEfromCash
 652+ D64B CD 5D D4                             call    eqip_refesh_buffer
 653+ D64E C9                                   ret
# file closed: ./Menus/equip_ship_menu.asm
1404  D64F
1405  D64F
1406  D64F                  SLOT    LaunchShipAddr
1407  D64F                  PAGE    BankLaunchShip
1408  D64F                  ORG     LaunchShipAddr
1409  C000                  INCLUDE "./Transitions/launch_ship.asm"
# file opened: ./Transitions/launch_ship.asm
   1+ C000 4C 61 75 6E  launchship_page_marker  DB "LaunchShipPG65"
   1+ C004 63 68 53 68
   1+ C008 69 70 50 47
   1+ C00C 36 35
   2+ C00E
   3+ C00E 7E 3F 04 02  launchdraw_table        DB $7E,$3F, $04,$02, $66            ; purple blue
   3+ C012 66
   4+ C013              launchdraw_rowsize      equ $-launchdraw_table
   5+ C013 7C 3E 08 04                          DB $7C,$3E, $08,$04, $66
   5+ C017 66
   6+ C018 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $66
   6+ C01C 66
   7+ C01D 78 3C 10 08                          DB $78,$3C, $10,$08, $66
   7+ C021 66
   8+ C022 76 3B 14 0A                          DB $76,$3B, $14,$0A, $66
   8+ C026 66
   9+ C027 74 3A 18 0C                          DB $74,$3A, $18,$0C, $66
   9+ C02B 66
  10+ C02C 70 38 20 10                          DB $70,$38, $20,$10, $66
  10+ C030 66
  11+ C031 6C 36 28 14                          DB $6C,$36, $28,$14, $05            ; Black Blue
  11+ C035 05
  12+ C036 68 34 30 18                          DB $68,$34, $30,$18, $05
  12+ C03A 05
  13+ C03B 64 32 38 1C                          DB $64,$32, $38,$1C, $05
  13+ C03F 05
  14+ C040 60 30 40 20                          DB $60,$30, $40,$20, $05
  14+ C044 05
  15+ C045 5C 2E 48 24                          DB $5C,$2E, $48,$24, $05            ; Dark Blue
  15+ C049 05
  16+ C04A 58 2C 50 28                          DB $58,$2C, $50,$28, $02
  16+ C04E 02
  17+ C04F 54 2A 58 2C                          DB $54,$2A, $58,$2C, $02
  17+ C053 02
  18+ C054 50 28 60 30                          DB $50,$28, $60,$30, $02
  18+ C058 02
  19+ C059 4C 26 68 34                          DB $4C,$26, $68,$34, $02
  19+ C05D 02
  20+ C05E 46 23 74 3A                          DB $46,$23, $74,$3A, $02
  20+ C062 02
  21+ C063 40 20 80 40                          DB $40,$20, $80,$40, $02
  21+ C067 02
  22+ C068 38 1C 90 48                          DB $38,$1C, $90,$48, $01            ;Very Dark Blue
  22+ C06C 01
  23+ C06D 30 18 A0 50                          DB $30,$18, $A0,$50, $01
  23+ C071 01
  24+ C072 26 13 B4 5A                          DB $26,$13, $B4,$5A, $01
  24+ C076 01
  25+ C077 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $01
  25+ C07B 01
  26+ C07C 10 08 E0 70                          DB $10,$08, $E0,$70, $00            ;Black
  26+ C080 00
  27+ C081 02 01 FC 7E                          DB $02,$01, $FC,$7E, $00
  27+ C085 00
  28+ C086 FF                                   DB $FF
  29+ C087
  30+ C087              launchtablesize         EQU ($ - launchdraw_table)/launchdraw_rowsize
  31+ C087
  32+ C087 7E 3F 04 02  dockingdraw_table       DB $7E,$3F, $04,$02, $00            ; purple blue
  32+ C08B 00
  33+ C08C              dockingdraw_rowsize     equ $-dockingdraw_table
  34+ C08C 7C 3E 08 04                          DB $7C,$3E, $08,$04, $00
  34+ C090 00
  35+ C091 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $00
  35+ C095 00
  36+ C096 78 3C 10 08                          DB $78,$3C, $10,$08, $04
  36+ C09A 04
  37+ C09B 76 3B 14 0A                          DB $76,$3B, $14,$0A, $04
  37+ C09F 04
  38+ C0A0 74 3A 18 0C                          DB $74,$3A, $18,$0C, $04
  38+ C0A4 04
  39+ C0A5 70 38 20 10                          DB $70,$38, $20,$10, $21
  39+ C0A9 21
  40+ C0AA 6C 36 28 14                          DB $6C,$36, $28,$14, $21            ; Black Blue
  40+ C0AE 21
  41+ C0AF 68 34 30 18                          DB $68,$34, $30,$18, $21
  41+ C0B3 21
  42+ C0B4 64 32 38 1C                          DB $64,$32, $38,$1C, $25
  42+ C0B8 25
  43+ C0B9 60 30 40 20                          DB $60,$30, $40,$20, $25
  43+ C0BD 25
  44+ C0BE 5C 2E 48 24                          DB $5C,$2E, $48,$24, $25            ; Dark Blue
  44+ C0C2 25
  45+ C0C3 58 2C 50 28                          DB $58,$2C, $50,$28, $25
  45+ C0C7 25
  46+ C0C8 54 2A 58 2C                          DB $54,$2A, $58,$2C, $25
  46+ C0CC 25
  47+ C0CD 50 28 60 30                          DB $50,$28, $60,$30, $4C
  47+ C0D1 4C
  48+ C0D2 4C 26 68 34                          DB $4C,$26, $68,$34, $4C
  48+ C0D6 4C
  49+ C0D7 46 23 74 3A                          DB $46,$23, $74,$3A, $4C
  49+ C0DB 4C
  50+ C0DC 40 20 80 40                          DB $40,$20, $80,$40, $4C
  50+ C0E0 4C
  51+ C0E1 38 1C 90 48                          DB $38,$1C, $90,$48, $6D            ;Very Dark Blue
  51+ C0E5 6D
  52+ C0E6 30 18 A0 50                          DB $30,$18, $A0,$50, $6D
  52+ C0EA 6D
  53+ C0EB 26 13 B4 5A                          DB $26,$13, $B4,$5A, $6D
  53+ C0EF 6D
  54+ C0F0 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $6D
  54+ C0F4 6D
  55+ C0F5 10 08 E0 70                          DB $10,$08, $E0,$70, $92            ;Black
  55+ C0F9 92
  56+ C0FA 02 01 FC 7E                          DB $02,$01, $FC,$7E, $92
  56+ C0FE 92
  57+ C0FF FF                                   DB $FF
  58+ C100
  59+ C100              dockingtablesize         EQU ($ - dockingdraw_table)/dockingdraw_rowsize
  60+ C100
  61+ C100              init_countdown          EQU $FF
  62+ C100 00           launch_countdown        DB  $0000
  63+ C101 0E C0        launch_table_idx        DW launchdraw_table
  64+ C103 87 C0        docking_table_idx       DW dockingdraw_table
  65+ C105 00           current_offsetX         db 0
  66+ C106 00           current_offsetY         db 0
  67+ C107
  68+ C107
  69+ C107              LaunchTubeEdges         MMUSelectLayer2
  69+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  70+ C10B 01 00 00                             ld      bc,$0000
  71+ C10E 11 92 01                             ld      de,$0192
  72+ C111 78           .drawLoop1              ld      a,b
  73+ C112 FE 80                                cp      128
  74+ C114 28 25                                jr      z,.DoneEdge
  75+ C116 F5                                   push    af
  76+ C117 C5 D5 C5 D5                          push    bc,,de,,bc,,de
  77+ C11B CD 7D E2                             call    l2_draw_horz_dma_bank           ;"bc = left side row,col, d = length, e = color"
  78+ C11E D1 C1                                pop     bc,,de
  79+ C120 3E FF                                ld      a,$FF
  80+ C122 92                                   sub     d
  81+ C123 4F                                   ld      c,a
  82+ C124 0C                                   inc     c
  83+ C125 CD 7D E2                             call    l2_draw_horz_dma_bank
  84+ C128 D1 C1                                pop     bc,,de
  85+ C12A 78                                   ld      a,b
  86+ C12B FE 40                                cp      64
  87+ C12D 30 06                                jr      nc,.ReduceLoop
  88+ C12F 14                                   inc     d
  89+ C130 14                                   inc     d
  90+ C131 F1                                   pop     af
  91+ C132 04                                   inc     b
  92+ C133 18 DC                                jr      .drawLoop1
  93+ C135 15           .ReduceLoop:            dec     d
  94+ C136 15                                   dec     d
  95+ C137 F1                                   pop     af
  96+ C138 04                                   inc     b
  97+ C139 18 D6                                jr      .drawLoop1
  98+ C13B 3E 80        .DoneEdge:              ld      a,$80
  99+ C13D 01 00 00                             ld      bc,$0000                        ; Top Left
 100+ C140 11 FF 80                             ld      de,$80FF                        ; Bottom Right
 101+ C143 CD 33 E6                             call    l2_draw_diagonal
 102+ C146 3E 80                                ld      a,$80
 103+ C148 01 00 80                             ld      bc,$8000                        ; Botom Left
 104+ C14B 11 FF 00                             ld      de,$00FF                        ; Top Right
 105+ C14E CD 33 E6                             call    l2_draw_diagonal
 106+ C151
 107+ C151 01 00 00                             ld      bc,$0000
 108+ C154 11 80 00                             ld      DE,$0080
 109+ C157 26 60                                ld      h,$60
 110+ C159 2E 55                                ld      l,$55
 111+ C15B C9                                   ret
 112+ C15C
 113+ C15C              LaunchConsole:          MMUSelectConsoleBank                    ; Draw Console
 113+ C15C ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 114+ C160 21 00 50                             ld      hl,ScreenL1Bottom
 115+ C163 11 00 E0                             ld      de,ConsoleImageData
 116+ C166 01 00 08                             ld      bc, ScreenL1BottomLen
 117+ C169 CD 66 96                             call    memcopy_dma
 118+ C16C 21 00 5A                             ld      hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 119+ C16F 11 00 E8                             ld      de,ConsoleAttributes
 120+ C172 01 00 01                             ld      bc, ScreenL1AttrBtmLen
 121+ C175 CD 66 96                             call    memcopy_dma
 122+ C178 C9                                   ret
 123+ C179
 124+ C179              CoriloisStation         equ     13
 125+ C179
 126+ C179
 127+ C179              draw_launch_ship:       MMUSelectLayer1
 127+ C179 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 128+ C17D CD 80 E0                             call    l1_cls
 129+ C180 CD 9A E0                             call    l1_attr_cls
 130+ C183                                      MMUSelectSpriteBank
 130+ C183 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 131+ C187 CD 27 E4                             call    sprite_cls_cursors
 132+ C18A                                      MMUSelectLayer2
 132+ C18A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 133+ C18E CD 03 E0                             call    asm_l2_double_buffer_on
 134+ C191 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 135+ C193 32 9C E0                             ld      (l2_cls_byte),a
 136+ C196 CD BC E0                             call    l2_set_color_upper2
 137+ C199 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 138+ C19B 32 9C E0                             ld      (l2_cls_byte),a
 139+ C19E CD E8 E0                             call    l2_cls_lower_third
 140+ C1A1 CD 07 C1                             call    LaunchTubeEdges
 141+ C1A4 CD 5C C1                             call    LaunchConsole
 142+ C1A7              .NextBuffer:            MMUSelectLayer2
 142+ C1A7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 143+ C1AB CD 07 E1                             call    l2_flip_buffers
 144+ C1AE 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 145+ C1B0 32 9C E0                             ld      (l2_cls_byte),a
 146+ C1B3 CD BC E0                             call    l2_set_color_upper2
 147+ C1B6 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 148+ C1B8 32 9C E0                             ld      (l2_cls_byte),a
 149+ C1BB CD E8 E0                             call    l2_cls_lower_third
 150+ C1BE CD 07 C1                             call    LaunchTubeEdges
 151+ C1C1 CD 5C C1                             call    LaunchConsole
 152+ C1C4 3E FF        .SetUpTimers:           ld      a,init_countdown
 153+ C1C6 32 00 C1                             ld      (launch_countdown),a
 154+ C1C9 21 0E C0                             ld      hl,launchdraw_table
 155+ C1CC 22 01 C1                             ld      (launch_table_idx),hl
 156+ C1CF AF                                   xor     a
 157+ C1D0 32 05 C1                             ld      (current_offsetX),a
 158+ C1D3 32 06 C1                             ld      (current_offsetY),a
 159+ C1D6              .SetupGalaxy:           MaxThrottle
 159+ C1D6 3A 4B 9A    >                        ld      a,(SHIPMAXSPEED)
 159+ C1D9 32 4C 9A    >                        ld      (DELTA),a
 159+ C1DC 57          >                        ld      d,a
 159+ C1DD 1E 04       >                        ld      e,4
 159+ C1DF ED 30       >                        mul
 159+ C1E1 ED 53 4D 9A >                        ld      (DELT4Lo),de
 160+ C1E5                                      ZeroThrottle; DEBUG
 160+ C1E5 AF          >                        xor     a
 160+ C1E6 32 4C 9A    >                        ld      (DELTA),a
 160+ C1E9 32 4D 9A    >                        ld      (DELT4Lo),a
 160+ C1EC 32 4E 9A    >                        ld      (DELT4Lo+1),a
 161+ C1EF              ; To launch we need to set docked flag to transition FE and at teh end of the transition set to FD to rebuild universe
 162+ C1EF 3E FE                                ld      a,$FE
 163+ C1F1 32 5F 9A                             ld      (DockedFlag),a
 164+ C1F4 C9                                   ret
 165+ C1F5
 166+ C1F5
 167+ C1F5              draw_docking_ship:      MMUSelectLayer1
 167+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 168+ C1F9 CD 80 E0                             call    l1_cls
 169+ C1FC CD 9A E0                             call    l1_attr_cls
 170+ C1FF                                      MMUSelectSpriteBank
 170+ C1FF ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 171+ C203 CD 27 E4                             call    sprite_cls_cursors
 172+ C206                                      MMUSelectLayer2
 172+ C206 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 173+ C20A CD 03 E0                             call    asm_l2_double_buffer_on
 174+ C20D 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 175+ C20F 32 9C E0                             ld      (l2_cls_byte),a
 176+ C212 CD BC E0                             call    l2_set_color_upper2
 177+ C215 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 178+ C217 32 9C E0                             ld      (l2_cls_byte),a
 179+ C21A CD E8 E0                             call    l2_cls_lower_third
 180+ C21D CD 07 C1                             call    LaunchTubeEdges
 181+ C220 CD 5C C1                             call    LaunchConsole
 182+ C223              .NextBuffer:            MMUSelectLayer2
 182+ C223 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 183+ C227 CD 07 E1                             call    l2_flip_buffers
 184+ C22A 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 185+ C22C 32 9C E0                             ld      (l2_cls_byte),a
 186+ C22F CD BC E0                             call    l2_set_color_upper2
 187+ C232 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 188+ C234 32 9C E0                             ld      (l2_cls_byte),a
 189+ C237 CD E8 E0                             call    l2_cls_lower_third
 190+ C23A CD 07 C1                             call    LaunchTubeEdges
 191+ C23D CD 5C C1                             call    LaunchConsole
 192+ C240 3E FF        .SetUpTimers:           ld      a,init_countdown
 193+ C242 32 00 C1                             ld      (launch_countdown),a
 194+ C245 21 87 C0                             ld      hl,dockingdraw_table
 195+ C248 22 03 C1                             ld      (docking_table_idx),hl
 196+ C24B AF                                   xor     a
 197+ C24C 32 05 C1                             ld      (current_offsetX),a
 198+ C24F 32 06 C1                             ld      (current_offsetY),a
 199+ C252 AF           .SetupGalaxy:           xor     a ; palcehodler as it would cause next macro to fail re initialise all universe banks
 200+ C253                                      ZeroThrottle
 200+ C253 AF          >                        xor     a
 200+ C254 32 4C 9A    >                        ld      (DELTA),a
 200+ C257 32 4D 9A    >                        ld      (DELT4Lo),a
 200+ C25A 32 4E 9A    >                        ld      (DELT4Lo+1),a
 201+ C25D 3E FF                                ld      a,$FF
 202+ C25F 32 5F 9A                             ld      (DockedFlag),a ; we don't kill off shipts as we kill them on launch
 203+ C262 C9                                   ret
 204+ C263
 205+ C263 CD 07 C1     loop_launch_ship:       call    LaunchTubeEdges
 206+ C266 3E FF                                ld      a,init_countdown
 207+ C268 32 00 C1                             ld      (launch_countdown),a
 208+ C26B 2A 01 C1                             ld      hl,(launch_table_idx)
 209+ C26E 4E                                   ld      c,(hl)
 210+ C26F 79                                   ld      a,c
 211+ C270 FE FF                                cp      $FF
 212+ C272 28 1E                                jr      z,.FinishedLaunch
 213+ C274 23                                   inc     hl
 214+ C275 46                                   ld      b,(hl)                 ; bc = top left
 215+ C276 23                                   inc     hl
 216+ C277 5E                                   ld      e,(hl)
 217+ C278 23                                   inc     hl
 218+ C279 56                                   ld      d,(hl)                 ;de = width and height
 219+ C27A 23                                   inc     hl
 220+ C27B 7E                                   ld      a,(hl)                 ; a = colour
 221+ C27C 23                                   inc     hl
 222+ C27D 22 01 C1                             ld      (launch_table_idx),hl
 223+ C280 67                                   ld      h,a
 224+ C281 C5 D5                                push    bc,,de
 225+ C283                                      MMUSelectLayer2
 225+ C283 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ C287 CD 10 E2                             call    l2_draw_fill_box        ; ; "l2_draw_fill_box bc=rowcol, de=heightwidth h=color"
 227+ C28A D1 C1                                pop     bc,,de
 228+ C28C 3E 80                                ld      a,$80
 229+ C28E CD 20 E2                             call    l2_draw_box             ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
 230+ C291 C9                                   ret
 231+ C292 3E FD        .FinishedLaunch:        ld      a,$FD                   ; now seed that we need a universe rebuild post launch
 232+ C294 32 5F 9A                             ld      (DockedFlag),a
 233+ C297 C9                                   ret
 234+ C298
 235+ C298 CD 07 C1     loop_docking_ship:      call    LaunchTubeEdges
 236+ C29B 3E FF                                ld      a,init_countdown
 237+ C29D 32 00 C1                             ld      (launch_countdown),a
 238+ C2A0 2A 03 C1                             ld      hl,(docking_table_idx)
 239+ C2A3 4E                                   ld      c,(hl)
 240+ C2A4 79                                   ld      a,c
 241+ C2A5 FE FF                                cp      $FF
 242+ C2A7 28 1E                                jr      z,.FinishedDocking
 243+ C2A9 23                                   inc     hl
 244+ C2AA 46                                   ld      b,(hl)                 ; bc = top left
 245+ C2AB 23                                   inc     hl
 246+ C2AC 5E                                   ld      e,(hl)
 247+ C2AD 23                                   inc     hl
 248+ C2AE 56                                   ld      d,(hl)                 ;de = width and height
 249+ C2AF 23                                   inc     hl
 250+ C2B0 7E                                   ld      a,(hl)
 251+ C2B1 23                                   inc     hl
 252+ C2B2 22 03 C1                             ld      (docking_table_idx),hl
 253+ C2B5 67                                   ld      h,a
 254+ C2B6 C5 D5                                push    bc,,de
 255+ C2B8                                      MMUSelectLayer2
 255+ C2B8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ C2BC CD 10 E2                             call    l2_draw_fill_box
 257+ C2BF D1 C1                                pop     bc,,de
 258+ C2C1 3E 80                                ld      a,$80
 259+ C2C3 CD 20 E2                             call    l2_draw_box
 260+ C2C6 C9                                   ret
 261+ C2C7              .FinishedDocking        ForceTransition ScreenStatus              ; Force move to status screen
 261+ C2C7 3E 04       >                        ld      a,ScreenStatus
 261+ C2C9 32 96 87    >                        ld      (ScreenTransitionForced), a
 262+ C2CC C9                                   ret
 263+ C2CD
 264+ C2CD
 265+ C2CD
# file closed: ./Transitions/launch_ship.asm
1410  C2CD
1411  C2CD              ; Bank 70  ------------------------------------------------------------------------------------------------------------------------
1412  C2CD                  SLOT    UniverseBankAddr
1413  C2CD                  PAGE    BankUNIVDATA0
1414  C2CD              	ORG	    UniverseBankAddr,BankUNIVDATA0
1415  C000                  INCLUDE "./Universe/Ships/univ_ship_data.asm"
# file opened: ./Universe/Ships/univ_ship_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; There can be upto &12 objects in flight.
   4+ C000              ; To avoid hassle of memory heap managment, the free list
   5+ C000              ; will correspond to a memory bank offset so data will be held in
   6+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
   9+ C000              ; This means each gets its own line list, inwork etc
  10+ C000
  11+ C000              ; "Runtime Ship Data paged into in Bank 7"
  12+ C000 55 6E 69 76  StartOfUniv:        DB "Universe PG"
  12+ C004 65 72 73 65
  12+ C008 20 50 47
  13+ C00B 58           StartOfUnivN:       DB "X"
  14+ C00C              ; NOTE we can cheat and pre allocate segs just using a DS for now
  15+ C00C
  16+ C00C              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  17+ C00C              ; Universe map substibute for INWK
  18+ C00C              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  19+ C00C                                     INCLUDE "./Universe/Ships/AIRuntimeData.asm"
# file opened: ././Universe/Ships/AIRuntimeData.asm
   1++C00C              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C00C 00           UBnKxlo                     DB  0                       ; INWK+0
   3++C00D 00           UBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C00E 00           UBnKxsgn                    DB  0                       ; INWK+2
   5++C00F 00           UBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C010 00           UBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C011 00           UBnKysgn                    DB  0                       ; INWK +5
   8++C012 00           UBnKzlo                     DB  0                       ; INWK +6
   9++C013 00           UBnKzhi                     DB  0                       ; INWK +7
  10++C014 00           UBnKzsgn                    DB  0                       ; INWK +8
  11++C015              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
  12++C015              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
  13++C015              ; Note they seem to have to be after camera position not quite found why yet, can only assume it does an iy or ix indexed copy? Bu oddly does not affect space station.
  14++C015 00 00        UBnkrotmatSidevX            DW  0                       ; INWK +21
  15++C017              UBnkrotmatSidev             equ UBnkrotmatSidevX
  16++C017 00 00        UBnkrotmatSidevY            DW  0                       ; INWK +23
  17++C019 00 00        UBnkrotmatSidevZ            DW  0                       ; INWK +25
  18++C01B 00 00        UBnkrotmatRoofvX            DW  0                       ; INWK +15
  19++C01D              UBnkrotmatRoofv             equ UBnkrotmatRoofvX
  20++C01D 00 00        UBnkrotmatRoofvY            DW  0                       ; INWK +17
  21++C01F 00 00        UBnkrotmatRoofvZ            DW  0                       ; INWK +19
  22++C021 00 00        UBnkrotmatNosevX            DW  0                       ; INWK +9
  23++C023              UBnkrotmatNosev             EQU UBnkrotmatNosevX
  24++C023 00 00        UBnkrotmatNosevY            DW  0                       ; INWK +11
  25++C025 00 00        UBnkrotmatNosevZ            DW  0                       ; INWK +13
  26++C027              ; -- Note these must be here for initialise blast as it does a 12 byte ldir
  27++C027              ; . Note missile explosion will have to have logic to cause linger if a blast is to be enqued
  28++C027 00           UBnKMissileBlastRange:      DB  0                       ; copied in when setting up a missile
  29++C028 00           UBnKMissileBlastDamage:     DB  0                       ; copied in when setting up a missile
  30++C029 00           UBnKMissileDetonateRange:   DB  0                       ; copied in when setting up a missile, allows for proximity missiles
  31++C02A 00           UBnKMissileDetonateDamage:  DB  0                       ; copied in when setting up a missile
  32++C02B              ; -- Metadata for ship to help with bank managment
  33++C02B 00           UBnKShipType                DB  0
  34++C02C 00           UbnKShipBankNbr             DB  0
  35++C02D 00           UBnkShipModelBank           DB  0
  36++C02E 00           UBnkShipModelNbr            DB  0
  37++C02F              ; -- Ship AI data
  38++C02F 00           UBnKMissleHitToProcess      DB  0                       ; This is used for enquing missle blasts as we can only do one missile at a time, could make it multi but neeed to smooth CPU usage
  39++C030 00           UBnKMissileTarget           DB  0                       ; This is the bank number for the target from 0 to n if the missile is not hostile to us
  40++C031 00           UBnKspeed                   DB  0                       ; INWK +27
  41++C032 00           UBnKAccel                   DB  0                       ; INWK +28
  42++C033 00           UBnKRotXCounter             DB  0                       ; INWK +29
  43++C034 00           UBnKRotZCounter             DB  0                       ; INWK +30
  44++C035 00           UBnKexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
  45++C036              ; Flags work as follows:
  46++C036              ; 7 - Flag ship to be killed with debris
  47++C036              ; 6 - Invisible/Erase (also mentions Laser Firing?)
  48++C036              ; 5 - Ship is exploding if set, note if its a missile and one already equeued this will have to linger
  49++C036              ;     linger can be done by not erasing ship unit missile equeue handled
  50++C036              ; 4 -
  51++C036              ; 3 - Display state - Plot as a Dot
  52++C036              ; 2 - Nbr of Missiles bit 2
  53++C036              ; 1 - Nbr of Missiles bit 1
  54++C036              ; 0 - Nbr of Missiles bit 0
  55++C036 00           UBnkDrawAllFaces            DB  0
  56++C037 00           UBnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
  57++C038 00           UBnkCam0yLo                 DB  0                       ; INWK +33 ????
  58++C039 00           UBnkCam0yHi                 DB  0                       ; INWK +34?????
  59++C03A 00           UbnKEnergy                  DB  0                       ; INWK +35
  60++C03B              UBnKRuntimeSize             EQU $-UBnKShipType
  61++C03B              ; Flags work as follows:
  62++C03B              ;Bit	Description
  63++C03B              ;#0	Trader flag         * 0 = not a trader  * 1 = trader
  64++C03B              ;                       80% of traders are peaceful and mind their own business plying their trade between the planet and space station, but 20% of them moonlight as bounty hunters (see bit #1)
  65++C03B              ;                       Ships that are traders: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  66++C03B              ;#1 Bounty hunter flag  * 0 = not a bounty hunter* 1 = bounty hunter
  67++C03B              ;                       If we are a fugitive or a serious offender and we bump into a bounty hunter, they will become hostile and attack us (see bit #2)
  68++C03B              ;                       Ships that are bounty hunters: Viper, Fer-de-lance
  69++C03B              ;#2	Hostile flag        * 0 = not hostile  * 1 = hostile
  70++C03B              ;                       Hostile ships will attack us on sight; there are quite a few of them
  71++C03B              ;                       Ships that are hostile: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Worm, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid, Thargon, Constrictor
  72++C03B              ;#3	Pirate flag         * 0 = not a pirate * 1 = pirate
  73++C03B              ;                       Hostile pirates will attack us on sight, but once we get inside the space station safe zone, they will stop
  74++C03B              ;                       Ships that are pirates: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid
  75++C03B              ;#4	Docking flag        * 0 = not docking * 1 = docking
  76++C03B              ;                       Traders with their docking flag set fly towards the space station to try to dock, otherwise they aim for the planet
  77++C03B              ;                       This flag is randomly set for traders when they are spawned
  78++C03B              ;                       Ships that can be docking: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  79++C03B              ;#5	Innocent bystander  * 0 = normal * 1 = innocent bystander
  80++C03B              ;                       If we attack an innocent ship within the space station safe zone, then the station will get angry with us and start spawning cops
  81++C03B              ;                       Ships that are innocent bystanders: Shuttle, Transporter, Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Cougar
  82++C03B              ;#6	Cop flag            * 0 = not a cop * 1 = cop
  83++C03B              ;                       If we destroy a cop, then we instantly become a fugitive (the Transporter isn't actually a cop, but it's clearly under police protection)
  84++C03B              ;                       Ships that are cops: Viper, Transporter
  85++C03B              ;#7	Scooped, docked, escape pod flag
  86++C03B              ;                       For spawned ships, this flag indicates that the ship been scooped or has docked (bit 7 is always clear on spawning)
  87++C03B              ;                       For blueprints, this flag indicates whether the ship type has an escape pod fitted, so it can launch it when in dire straits
  88++C03B              ;                       Ships that have escape pods: Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Viper, Mamba, Krait, Adder, Cobra Mk I, Cobra Mk III (pirate), Asp Mk II, Python (pirate), Fer-de-lance
  89++C03B
# file closed: ././Universe/Ships/AIRuntimeData.asm
  20+ C03B              ; moved to runtime asm
  21+ C03B              ;                        INCLUDE "./Universe/Ships/ShipPosVars.asm"
  22+ C03B              ;                        INCLUDE "./Universe/Ships/RotationMatrixVars.asm"
  23+ C03B
  24+ C03B              ; Orientation Matrix [nosev x y z ] nose vector ( forward) 19 to 26
  25+ C03B              ;                    [roofv x y z ] roof vector (up)
  26+ C03B              ;                    [sidev x y z ] side vector (right)
  27+ C03B              ;;rotXCounter                 equ UBnkrotXCounter         ; INWK +29
  28+ C03B              ;;rotZCounter                 equ UBnkrotZCounter         ; INWK +30UBnkDrawCam0xLo   DB  0               ; XX18+0
  29+ C03B 00           univRAT      DB  0               ; 99
  30+ C03C 00           univRAT2     DB  0               ; 9A
  31+ C03D 00           univRAT2Val  DB  0               ; 9A
  32+ C03E
  33+ C03E                                      INCLUDE "./Universe/Ships/XX16Vars.asm"
# file opened: ././Universe/Ships/XX16Vars.asm
   1++C03E              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C03E 00 00        UBnkTransmatSidevX          DW  0               ; XX16+0
   3++C040              UBnkTransmatSidev           EQU UBnkTransmatSidevX
   4++C040 00 00        UBnkTransmatSidevY          DW 0                ; XX16+2
   5++C042 00 00        UBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C044 00 00        UBnkTransmatRoofvX          DW 0
   7++C046              UBnkTransmatRoofv           EQU UBnkTransmatRoofvX
   8++C046 00 00        UBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C048 00 00        UBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C04A 00 00        UBnkTransmatNosevX          DW 0
  11++C04C              UBnkTransmatNosev           EQU UBnkTransmatNosevX
  12++C04C 00 00        UBnkTransmatNosevY          DW 0                ; XX16+2
  13++C04E 00 00        UBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C050 00 00        UbnkTransmatTransX          DW 0
  15++C052 00 00        UbnkTransmatTransY          DW 0
  16++C054 00 00        UbnkTransmatTransZ          DW 0
  17++C056              XX16                        equ UBnkTransmatSidev
  18++C056              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C056 00 00        UbnkTransInvRow0x0          DW 0
  20++C058 00 00        UbnkTransInvRow0x1          DW 0
  21++C05A 00 00        UbnkTransInvRow0x2          DW 0
  22++C05C 00 00        UbnkTransInvRow0x3          DW 0
  23++C05E 00 00        UbnkTransInvRow1y0          DW 0
  24++C060 00 00        UbnkTransInvRow1y1          DW 0
  25++C062 00 00        UbnkTransInvRow1y2          DW 0
  26++C064 00 00        UbnkTransInvRow1y3          DW 0
  27++C066 00 00        UbnkTransInvRow2z0          DW 0
  28++C068 00 00        UbnkTransInvRow2z1          DW 0
  29++C06A 00 00        UbnkTransInvRow2z2          DW 0
  30++C06C 00 00        UbnkTransInvRow2z3          DW 0
  31++C06E
  32++C06E              XX16Inv             equ UbnkTransInvRow0x0
  33++C06E
# file closed: ././Universe/Ships/XX16Vars.asm
  34+ C06E                                      INCLUDE "./Universe/Ships/XX25Vars.asm"
# file opened: ././Universe/Ships/XX25Vars.asm
   1++C06E              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C06E 00           UbnkProjxLo                 DB  0
   3++C06F 00           UbnkProjxHi                 DB  0
   4++C070 00           UbnkProjxSgn                DB  0
   5++C071              UbnkProjx                   EQU UbnkProjxLo
   6++C071 00           UbnkProjyLo                 DB  0
   7++C072 00           UbnkProjyHi                 DB  0
   8++C073 00           UbnkProjySgn                DB  0
   9++C074              UbnkProjy                   EQU UbnkProjyLo
  10++C074 00           UbnkProjzLo                 DB  0
  11++C075 00           UbnkProjzHi                 DB  0
  12++C076 00           UbnkProjzSgn                DB  0
  13++C077              UbnkProjz                   EQU UbnkProjzLo
  14++C077              XX25                        EQU UbnkProjxLo
  15++C077
# file closed: ././Universe/Ships/XX25Vars.asm
  35+ C077                                      INCLUDE "./Universe/Ships/XX18Vars.asm"
# file opened: ././Universe/Ships/XX18Vars.asm
   1++C077              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C077 00           UBnkDrawCam0xLo             DB  0               ; XX18+0
   3++C078 00           UBnkDrawCam0xHi             DB  0               ; XX18+1
   4++C079 00           UBnkDrawCam0xSgn            DB  0               ; XX18+2
   5++C07A              UBnkDrawCam0x               equ UBnkDrawCam0xLo
   6++C07A 00           UBnkDrawCam0yLo             DB  0               ; XX18+3
   7++C07B 00           UBnkDrawCam0yHi             DB  0               ; XX18+4
   8++C07C 00           UBnkDrawCam0ySgn            DB  0               ; XX18+5
   9++C07D              UBnkDrawCam0y               equ UBnkDrawCam0yLo
  10++C07D 00           UBnkDrawCam0zLo             DB  0               ; XX18+6
  11++C07E 00           UBnkDrawCam0zHi             DB  0               ; XX18+7
  12++C07F 00           UBnkDrawCam0zSgn            DB  0               ; XX18+8
  13++C080              UBnkDrawCam0z               equ UBnkDrawCam0zLo
  14++C080              XX18                        equ UBnkDrawCam0xLo
  15++C080
# file closed: ././Universe/Ships/XX18Vars.asm
  36+ C080
  37+ C080              ; Used to make 16 bit reads a little cleaner in source code
  38+ C080 00 00 00     UbnkZPoint                  DS  3
  39+ C083              UbnkZPointLo                equ UbnkZPoint
  40+ C083              UbnkZPointHi                equ UbnkZPoint+1
  41+ C083              UbnkZPointSign              equ UbnkZPoint+2
  42+ C083                                      INCLUDE "./Universe/Ships/XX15Vars.asm"
# file opened: ././Universe/Ships/XX15Vars.asm
   1++C083              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C083 00           UBnkXScaled                 DB  0               ; XX15+0Xscaled
   3++C084 00           UBnkXScaledSign             DB  0               ; XX15+1xsign
   4++C085 00           UBnkYScaled                 DB  0               ; XX15+2yscaled
   5++C086 00           UBnkYScaledSign             DB  0               ; XX15+3ysign
   6++C087 00           UBnkZScaled                 DB  0               ; XX15+4zscaled
   7++C088 00           UBnkZScaledSign             DB  0               ; XX15+5zsign
   8++C089
   9++C089              XX15                        equ UBnkXScaled
  10++C089              XX15VecX                    equ XX15
  11++C089              XX15VecY                    equ XX15+1
  12++C089              XX15VecZ                    equ XX15+2
  13++C089              UbnkXPoint                  equ XX15
  14++C089              UbnkXPointLo                equ XX15+0
  15++C089              UbnkXPointHi                equ XX15+1
  16++C089              UbnkXPointSign              equ XX15+2
  17++C089              UbnkYPoint                  equ XX15+3
  18++C089              UbnkYPointLo                equ XX15+3
  19++C089              UbnkYPointHi                equ XX15+4
  20++C089              UbnkYPointSign              equ XX15+5
  21++C089              ; Repurposed XX15 pre clip plines
  22++C089              UbnkPreClipX1               equ XX15+0
  23++C089              UbnkPreClipY1               equ XX15+2
  24++C089              UbnkPreClipX2               equ XX15+4
  25++C089              UbnkPreClipY2               equ XX15+6
  26++C089              ; Repurposed XX15 post clip lines
  27++C089              UBnkNewX1                   equ XX15+0
  28++C089              UBnkNewY1                   equ XX15+1
  29++C089              UBnkNewX2                   equ XX15+2
  30++C089              UBnkNewY2                   equ XX15+3
  31++C089              ; Repurposed XX15
  32++C089              regXX15fx                   equ UBnkXScaled
  33++C089              regXX15fxSgn                equ UBnkXScaledSign
  34++C089              regXX15fy                   equ UBnkYScaled
  35++C089              regXX15fySgn                equ UBnkYScaledSign
  36++C089              regXX15fz                   equ UBnkZScaled
  37++C089              regXX15fzSgn                equ UBnkZScaledSign
  38++C089              ; Repurposed XX15
  39++C089              varX1                       equ UBnkXScaled       ; Reused, verify correct position
  40++C089              varY1                       equ UBnkXScaledSign   ; Reused, verify correct position
  41++C089              varZ1                       equ UBnkYScaled       ; Reused, verify correct position
  42++C089              ; After clipping the coords are two 8 bit pairs
  43++C089              UBnkPoint1Clipped           equ UBnkXScaled
  44++C089              UBnkPoint2Clipped           equ UBnkYScaled
  45++C089              ; Repurposed XX15 when plotting lines
  46++C089              ; Repurposed XX15 before calling clip routine
  47++C089              UBnkX1                      equ XX15
  48++C089              UBnKx1Lo                    equ XX15
  49++C089              UBnKx1Hi                    equ XX15+1
  50++C089              UBnkY1                      equ XX15+2
  51++C089              UbnKy1Lo                    equ XX15+2
  52++C089              UBnkY1Hi                    equ XX15+3
  53++C089              UBnkX2                      equ XX15+4
  54++C089              UBnkX2Lo                    equ XX15+4
  55++C089              UBnkX2Hi                    equ XX15+5
  56++C089
# file closed: ././Universe/Ships/XX15Vars.asm
  43+ C089                                      INCLUDE "./Universe/Ships/XX12Vars.asm"
# file opened: ././Universe/Ships/XX12Vars.asm
   1++C089              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C089              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C089 00           UBnkXX12xLo                 DB  0               ; XX12+0
   4++C08A 00           UBnkXX12xSign               DB  0               ; XX12+1
   5++C08B 00           UBnkXX12yLo                 DB  0               ; XX12+2
   6++C08C 00           UBnkXX12ySign               DB  0               ; XX12+3
   7++C08D 00           UBnkXX12zLo                 DB  0               ; XX12+4
   8++C08E 00           UBnkXX12zSign               DB  0               ; XX12+5
   9++C08F 00 00 00...  XX12Save                    DS  6
  10++C095 00 00 00...  XX12Save2                   DS  6
  11++C09B              XX12                        equ UBnkXX12xLo
  12++C09B              varXX12                     equ UBnkXX12xLo
  13++C09B              ; Repurposed XX12 when plotting lines
  14++C09B              UBnkY2                      equ XX12+0
  15++C09B              UbnKy2Lo                    equ XX12+0
  16++C09B              UBnkY2Hi                    equ XX12+1
  17++C09B              UBnkDeltaXLo                equ XX12+2
  18++C09B              UBnkDeltaXHi                equ XX12+3
  19++C09B              UBnkDeltaYLo                equ XX12+4
  20++C09B              UBnkDeltaYHi                equ XX12+5
  21++C09B              UbnkGradient                equ XX12+2
  22++C09B              UBnkTemp1                   equ XX12+2
  23++C09B              UBnkTemp1Lo                 equ XX12+2
  24++C09B              UBnkTemp1Hi                 equ XX12+3
  25++C09B              UBnkTemp2                   equ XX12+3
  26++C09B              UBnkTemp2Lo                 equ XX12+3
  27++C09B              UBnkTemp2Hi                 equ XX12+4
  28++C09B
# file closed: ././Universe/Ships/XX12Vars.asm
  44+ C09B
  45+ C09B
  46+ C09B              ; Post clipping the results are now 8 bit
  47+ C09B 00           UBnkVisibility              DB  0               ; replaces general purpose xx4 in rendering
  48+ C09C 00           UBnKDrawAsDot               DB  0               ; if 0 then OK, if 1 then just draw dot of line heap
  49+ C09D 00           UBnkProjectedY              DB  0
  50+ C09E 00           UBnkProjectedX              DB  0
  51+ C09F              UBnkProjected               equ UBnkProjectedY  ; resultant projected position
  52+ C09F 00 00 00...  XX15Save                    DS  8
  53+ C0A7 00 00 00...  XX15Save2                   DS  8
  54+ C0AF 00           VarBackface                 DB 0
  55+ C0B0              ; Heap (or array) information for lines and normals
  56+ C0B0              ; Coords are stored XY,XY,XY,XY
  57+ C0B0              ; Normals
  58+ C0B0              ; This needs re-oprganising now.
  59+ C0B0              ; Runtime Calculation Store
  60+ C0B0
  61+ C0B0              FaceArraySize               equ 30
  62+ C0B0              EdgeHeapSize                equ 40
  63+ C0B0              NodeArraySize               equ 40
  64+ C0B0              LineArraySize               equ 50
  65+ C0B0              ; Storage arrays for data
  66+ C0B0              ; Structure of arrays
  67+ C0B0              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
  68+ C0B0              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
  69+ C0B0              ; NodeArray         -  4 bytes per element      0           1            2          3
  70+ C0B0              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
  71+ C0B0              ; Line Array        -  4 bytes per eleement     0           1            2          3
  72+ C0B0              ;                                               X1          Y1           X2         Y2
  73+ C0B0 00 00 00...  UbnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
  74+ C0CE 00 00 00...  UBnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  75+ C16E 00 00 00...  UBnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  76+ C20E 00 00 00...  UbnkLineArray               DS LineArraySize * 4        ; XX19 Holds the clipped line details
  77+ C2D6              UBnkLinesHeapMax            EQU $ - UbnkLineArray
  78+ C2D6 00 00 00...  UbnkEdgeProcessedList DS EdgeHeapSize
  79+ C2FE              ; Array current Lengths
  80+ C2FE 00           UbnkFaceVisArrayLen         DS 1
  81+ C2FF 00           UBnkNodeArrayLen            DS 1
  82+ C300 00           UbnkLineArrayLen            DS 1                        ; total number of lines loaded to array
  83+ C301 00           UbnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
  84+ C302              XX20                        equ UbnkLineArrayLen
  85+ C302              varXX20                     equ UbnkLineArrayLen
  86+ C302
  87+ C302 00           UbnkEdgeHeapSize            DS 1
  88+ C303 00           UbnkEdgeHeapBytes           DS 1
  89+ C304 00           UBnkLinesHeapLen            DS 1
  90+ C305 00           UbnKEdgeHeapCounter         DS 1
  91+ C306 00           UbnKEdgeRadius              DS 1
  92+ C307 00           UbnKEdgeShipType            DS 1
  93+ C308 00           UbnKEdgeExplosionType       DS 1
  94+ C309
  95+ C309              ; Node heap is used to write out transformed Vertexs
  96+ C309
  97+ C309              ; Lines
  98+ C309 00 00 00     UBnkXX19                    DS  3
  99+ C30C
 100+ C30C 00 00 00...  UBnkHullCopy                DS  ShipDataLength
 101+ C325              ScoopDebrisAddr             equ UBnkHullCopy + ScoopDebrisOffset
 102+ C325              MissileLockLoAddr           equ UBnkHullCopy + MissileLockLoOffset
 103+ C325              MissileLockHiAddr           equ UBnkHullCopy + MissileLockHiOffset
 104+ C325              EdgeAddyAddr                equ UBnkHullCopy + EdgeAddyOffset
 105+ C325              LineX4Addr                  equ UBnkHullCopy + LineX4Offset
 106+ C325              GunVertexAddr               equ UBnkHullCopy + GunVertexOffset
 107+ C325              ExplosionCtAddr             equ UBnkHullCopy + ExplosionCtOffset
 108+ C325              VertexCtX6Addr              equ UBnkHullCopy + VertexCtX6Offset
 109+ C325              EdgeCountAddr               equ UBnkHullCopy + EdgeCountOffset
 110+ C325              BountyLoAddr                equ UBnkHullCopy + BountyLoOffset
 111+ C325              BountyHiAddr                equ UBnkHullCopy + BountyHiOffset
 112+ C325              FaceCtX4Addr                equ UBnkHullCopy + FaceCtX4Offset
 113+ C325              DotAddr                     equ UBnkHullCopy + DotOffset
 114+ C325              EnergyAddr                  equ UBnkHullCopy + EnergyOffset
 115+ C325              SpeedAddr                   equ UBnkHullCopy + SpeedOffset
 116+ C325              FaceAddyAddr                equ UBnkHullCopy + FaceAddyOffset
 117+ C325              QAddr                       equ UBnkHullCopy + QOffset
 118+ C325              LaserAddr                   equ UBnkHullCopy + LaserOffset
 119+ C325              VerticesAddyAddr            equ UBnkHullCopy + VerticiesAddyOffset
 120+ C325              ShipTypeAddr                equ UBnkHullCopy + ShipTypeOffset
 121+ C325              ShipNewBitsAddr             equ UBnkHullCopy + ShipNewBitsOffset
 122+ C325              ShipAIFlagsAddr             equ UBnkHullCopy + ShipAIFlagsOffset
 123+ C325              ; Static Ship Data. This is copied in when creating the universe object
 124+ C325              XX0                         equ UBnkHullCopy        ; general hull index pointer TODO find biggest ship design
 125+ C325              ;UBnkHullVerticies           DS  40 * 6              ; Type 10 is 37 verts so 40 to be safe
 126+ C325              ;UBnkHullEdges               DS  50 * 4              ; Type 10 is 46 edges sp 200 to be safe
 127+ C325              ;UBnkHullNormals             DS  20 * 4              ; type 10 is 14 edges so 20 to be safe
 128+ C325
 129+ C325 00 00 00...  UBnkHullVerticies           DS  300                 ; can only be 255
 130+ C451 00 00 00...  UBnkHullEdges               DS  1200                ; can be 255 * 4
 131+ C901 00 00 00...  UBnkHullNormals             DS  300                 ; can only be 255
 132+ CA2D
 133+ CA2D
 134+ CA2D 0C           OrthagCountdown             DB  12
 135+ CA2E
 136+ CA2E              UBnkShipCopy                equ UBnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 137+ CA2E              UBnk_Data_len               EQU $ - StartOfUniv
 138+ CA2E
 139+ CA2E              ZeroUnivPitchAndRoll:   MACRO
 140+ CA2E ~                                    xor     a
 141+ CA2E ~                                    ld      (UBnKRotXCounter),a
 142+ CA2E ~                                    ld      (UBnKRotZCounter),a
 143+ CA2E                                      ENDM
 144+ CA2E
 145+ CA2E              MaxUnivPitchAndRoll:    MACRO
 146+ CA2E ~                                    ld      a,127
 147+ CA2E ~                                    ld      (UBnKRotXCounter),a
 148+ CA2E ~                                    ld      (UBnKRotZCounter),a
 149+ CA2E                                      ENDM
 150+ CA2E
 151+ CA2E              RandomUnivPitchAndRoll: MACRO
 152+ CA2E ~                                    call    doRandom
 153+ CA2E ~                                    or      %01101111
 154+ CA2E ~                                    ld      (UBnKRotXCounter),a
 155+ CA2E ~                                    call    doRandom
 156+ CA2E ~                                    or      %01101111
 157+ CA2E ~                                    ld      (UBnKRotZCounter),a
 158+ CA2E                                      ENDM
 159+ CA2E
 160+ CA2E              RandomUnivSpeed:        MACRO
 161+ CA2E ~                                    call    doRandom
 162+ CA2E ~                                    and     31
 163+ CA2E ~                                    ld      (UBnKspeed),a
 164+ CA2E                                      ENDM
 165+ CA2E
 166+ CA2E              MaxUnivSpeed:           MACRO
 167+ CA2E ~                                    ld      a,31
 168+ CA2E ~                                    ld      (UBnKspeed),a
 169+ CA2E                                      ENDM
 170+ CA2E
 171+ CA2E              ZeroUnivAccelleration:  MACRO
 172+ CA2E ~                                    xor     a
 173+ CA2E ~                                    ld      (UBnKAccel),a
 174+ CA2E                                      ENDM
 175+ CA2E
 176+ CA2E 3A 23 C3     SetShipHostile:         ld      a,(ShipNewBitsAddr)
 177+ CA31 F6 04                                or      ShipIsHostile
 178+ CA33 32 23 C3                             ld      (ShipNewBitsAddr),a
 179+ CA36 C9                                   ret
 180+ CA37
 181+ CA37 3A 23 C3     ClearShipHostile:       ld      a,(ShipNewBitsAddr)
 182+ CA3A E6 FB                                and     ShipNotHostile
 183+ CA3C 32 23 C3                             ld      (ShipNewBitsAddr),a
 184+ CA3F C9                                   ret
 185+ CA40
 186+ CA40              AequN1xorN2:            MACRO  param1,param2
 187+ CA40 ~                                    ld      a,(param1)
 188+ CA40 ~                                    xor     param2
 189+ CA40                                      ENDM
 190+ CA40
 191+ CA40              N0equN1byN2div256:      MACRO param1,param2,param3
 192+ CA40 ~                                    ld      a,param3                        ;
 193+ CA40 ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 194+ CA40 ~                                    ld      a,param2                        ; A = XX16 element
 195+ CA40 ~                                    ld      d,a
 196+ CA40 ~                                    mul
 197+ CA40 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 198+ CA40 ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 199+ CA40                                      ENDM
 200+ CA40
 201+ CA40              ; --------------------------------------------------------------
 202+ CA40 21 00 C0     ResetUBnkData:          ld      hl,StartOfUniv
 203+ CA43 11 2E 0A                             ld      de,UBnk_Data_len
 204+ CA46 AF                                   xor     a
 205+ CA47 CD 40 96                             call    memfill_dma
 206+ CA4A C9                                   ret
 207+ CA4B              ; --------------------------------------------------------------
 208+ CA4B 21 0C C0     ResetUbnkPosition:      ld      hl,UBnKxlo
 209+ CA4E 06 09                                ld      b, 3*3
 210+ CA50 AF                                   xor     a
 211+ CA51 77           .zeroLoop:              ld      (hl),a
 212+ CA52 23                                   inc     hl
 213+ CA53 10 FC                                djnz    .zeroLoop
 214+ CA55 C9                                   ret
 215+ CA56
 216+ CA56              ; --------------------------------------------------------------
 217+ CA56              ; This sets the position of the current ship if its a player launched missile
 218+ CA56 CD BC CC     UnivSetPlayerMissile:   call    InitialiseOrientation           ; Player  facing
 219+ CA59 CD 4B CA                             call    ResetUbnkPosition               ; home position
 220+ CA5C 3E 05                                ld      a,MissileDropHeight
 221+ CA5E 32 0F C0                             ld      (UBnKylo),a
 222+ CA61 3E 80                                ld      a,$80
 223+ CA63 32 11 C0                             ld      (UBnKysgn),a
 224+ CA66                                      MaxUnivSpeed
 224+ CA66 3E 1F       >                        ld      a,31
 224+ CA68 32 31 C0    >                        ld      (UBnKspeed),a
 225+ CA6B C9                                   ret
 226+ CA6C              ; --------------------------------------------------------------
 227+ CA6C              ; this applies blast damage to ship
 228+ CA6C 3A 0F 9B     ShipMissileBlast:       ld      a,(CurrentMissileBlastDamage)
 229+ CA6F 47                                   ld      b,a
 230+ CA70 3A 3A C0                             ld      a,(UbnKEnergy)                   ; Reduce Energy
 231+ CA73 90                                   sub     b
 232+ CA74 C3 7D CA                             jp      UnivExplodeShip
 233+ CA77 18 04                                jr      UnivExplodeShip
 234+ CA79 32 3A C0                             ld      (UbnKEnergy),a
 235+ CA7C C9                                   ret
 236+ CA7D              ; --------------------------------------------------------------
 237+ CA7D              ; This sets the ship as a shower of explosiondwd
 238+ CA7D 3A 37 C0     UnivExplodeShip:        ld      a,(UBnkaiatkecm)
 239+ CA80 F6 20                                or      ShipExploding
 240+ CA82 E6 7F                                and     Bit7Clear
 241+ CA84 32 37 C0                             ld      (UBnkaiatkecm),a
 242+ CA87 AF                                   xor     a
 243+ CA88 32 3A C0                             ld      (UbnKEnergy),a
 244+ CA8B                                      ;TODO
 245+ CA8B C9                                   ret
 246+ CA8C
 247+ CA8C CD C5 CA     UnivSetDemoPostion:     call    UnivSetSpawnPosition
 248+ CA8F 3E 81                                ld  a,%10000001
 249+ CA91 32 37 C0                             ld  (UBnkaiatkecm),a                    ; set hostinle, no AI, has ECM
 250+ CA94 32 23 C3                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 251+ CA97 3E FF                                ld      a,$FF
 252+ CA99 32 34 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 253+ CA9C 32 33 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 254+ CA9F                                      ZeroA
 254+ CA9F AF          >                        xor a
 255+ CAA0 32 0E C0                             ld      (UBnKxsgn),a
 256+ CAA3 32 11 C0                             ld      (UBnKysgn),a
 257+ CAA6 32 14 C0                             ld      (UBnKzsgn),a
 258+ CAA9 21 00 00                             ld      hl,0
 259+ CAAC 22 0C C0                             ld      (UBnKxlo),hl
 260+ CAAF 22 0F C0                             ld      (UBnKylo),hl
 261+ CAB2 3A 22 C3                             ld      a,(ShipTypeAddr)
 262+ CAB5 21 B0 05                             ld      hl,$05B0                            ; so its a negative distance behind
 263+ CAB8                                      JumpIfANENusng ShipTypeStation, .SkipFurther
 263+ CAB8 FE 02       >                        cp     ShipTypeStation
 263+ CABA C2 C1 CA    >                        jp      nz,.SkipFurther
 264+ CABD 3E 05                                ld      a,5
 265+ CABF 84                                   add     h
 266+ CAC0 67                                   ld      h,a
 267+ CAC1 22 12 C0     .SkipFurther            ld      (UBnKzlo),hl
 268+ CAC4 C9                                   ret
 269+ CAC5              ; --------------------------------------------------------------
 270+ CAC5              ; This sets the position of the current ship randomly, called after spawing
 271+ CAC5 CD BC CC     UnivSetSpawnPosition:   call    InitialiseOrientation
 272+ CAC8                                      RandomUnivPitchAndRoll
 272+ CAC8 CD 61 9F    >                        call    doRandom
 272+ CACB F6 6F       >                        or      %01101111
 272+ CACD 32 33 C0    >                        ld      (UBnKRotXCounter),a
 272+ CAD0 CD 61 9F    >                        call    doRandom
 272+ CAD3 F6 6F       >                        or      %01101111
 272+ CAD5 32 34 C0    >                        ld      (UBnKRotZCounter),a
 273+ CAD8 CD 61 9F                             call    doRandom                        ; set x lo and y lo to random
 274+ CADB 32 0C C0     .setXlo:                ld      (UBnKxlo),a
 275+ CADE 32 0F C0     .setYlo:                ld      (UBnKylo),a
 276+ CAE1 0F           .setXsign:              rrca                                    ; rotate by 1 bit right
 277+ CAE2 47                                   ld      b,a
 278+ CAE3 E6 80                                and     SignOnly8Bit
 279+ CAE5 32 0E C0                             ld      (UBnKxsgn),a
 280+ CAE8 78           .setYSign:              ld      a,b                             ; get random back again
 281+ CAE9 0F                                   rrca                                    ; rotate by 1 bit right
 282+ CAEA 47                                   ld      b,a
 283+ CAEB E6 80                                and     SignOnly8Bit                    ; and set y sign
 284+ CAED 32 11 C0                             ld      (UBnKysgn),a
 285+ CAF0 CB 08        .setYHigh:              rrc     b                               ; as value is in b rotate again
 286+ CAF2 78                                   ld      a,b                             ;
 287+ CAF3 E6 1F                                and     31                              ; set y hi to random 0 to 31
 288+ CAF5 32 10 C0                             ld      (UBnKyhi),a                     ;
 289+ CAF8 CB 08        .setXHigh:              rrc     b                               ; as value is in b rotate again
 290+ CAFA 78                                   ld      a,b
 291+ CAFB E6 1F                                and     31                              ; set x hi to random 0 to 31
 292+ CAFD 4F                                   ld      c,a                             ; save shifted into c as well
 293+ CAFE 32 0D C0                             ld      (UBnKxhi),a
 294+ CB01 3E 50        .setZHigh:              ld      a,80                            ; set z hi to 80 - xhi - yhi - carry
 295+ CB03 98                                   sbc     b
 296+ CB04 99                                   sbc     c
 297+ CB05 32 13 C0                             ld      (UBnKzhi),a
 298+ CB08              .CheckIfBodyOrJunk:     ReturnIfMemEquN ShipTypeAddr, ShipTypeJunk
 298+ CB08 3A 22 C3    >                        ld     a,(ShipTypeAddr)
 298+ CB0B FE 03       >                        cp     ShipTypeJunk
 298+ CB0D C0          >                        ret    nz
 299+ CB0E 78                                   ld      a,b                             ; its not junk to set z sign
 300+ CB0F 0F                                   rrca                                    ; as it can jump in
 301+ CB10 E6 80                                and     SignOnly8Bit
 302+ CB12 32 14 C0                             ld      (UBnKzsgn),a
 303+ CB15 C9                                   ret
 304+ CB16
 305+ CB16              ; --------------------------------------------------------------
 306+ CB16              ; This sets current univrse object to space station
 307+ CB16 3E 81        ResetStationLaunch:     ld  a,%10000001
 308+ CB18 32 37 C0                             ld  (UBnkaiatkecm),a                    ; set hostinle, no AI, has ECM
 309+ CB1B AF                                   xor a
 310+ CB1C 32 34 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 311+ CB1F 32 23 C3                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 312+ CB22 3E FF                                ld      a,$FF
 313+ CB24 32 33 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 314+ CB27 21 00 00     .SetPosBehindUs:        ld      hl,$0000
 315+ CB2A 22 0C C0                             ld      (UBnKxlo),hl
 316+ CB2D 21 00 00                             ld      hl,$0000
 317+ CB30 22 0F C0                             ld      (UBnKylo),hl
 318+ CB33 21 B0 01                             ld      hl,$01B0                            ; so its a negative distance behind
 319+ CB36 22 12 C0                             ld      (UBnKzlo),hl
 320+ CB39 AF                                   xor     a
 321+ CB3A 32 0E C0                             ld      (UBnKxsgn),a
 322+ CB3D 32 11 C0                             ld      (UBnKysgn),a
 323+ CB40 3E 80                                ld      a,$80
 324+ CB42 32 14 C0                             ld      (UBnKzsgn),a
 325+ CB45 CD E1 CC     .SetOrientation:        call    LaunchedOrientation             ; set initial facing
 326+ CB48 C9                                   ret
 327+ CB49                  ;Input: BC = Dividend, DE = Divisor, HL = 0
 328+ CB49              ;Output: BC = Quotient, HL = Remainder
 329+ CB49
 330+ CB49              ; Initialiase data, iyh must equal slot number
 331+ CB49              ;                   iyl must be ship type
 332+ CB49 32 2C C0     UnivInitRuntime:        ld      (UbnKShipBankNbr),a
 333+ CB4C 01 10 00                             ld      bc,UBnKRuntimeSize
 334+ CB4F 21 2B C0                             ld      hl,UBnKShipType
 335+ CB52                                      ZeroA
 335+ CB52 AF          >                        xor a
 336+ CB53 77           .InitLoop:              ld      (hl),a
 337+ CB54 23                                   inc     hl
 338+ CB55 10 FC                                djnz    .InitLoop
 339+ CB57 FD 7C        .SetBankData:           ld      a,iyh
 340+ CB59 32 2C C0                             ld      (UbnKShipBankNbr),a
 341+ CB5C FD 7D                                ld      a,iyl
 342+ CB5E 32 2B C0                             ld      (UBnKShipType),a
 343+ CB61 CD 0F E0                             call    GetShipBankId                ; this will mostly be debugging info
 344+ CB64 32 2D C0                             ld      (UBnkShipModelBank),a        ; this will mostly be debugging info
 345+ CB67 78                                   ld      a,b                          ; this will mostly be debugging info
 346+ CB68 32 2E C0                             ld      (UBnkShipModelNbr),a         ; this will mostly be debugging info
 347+ CB6B C9                                   ret
 348+ CB6C
 349+ CB6C
 350+ CB6C 7C           ADDHLDESignedv3:        ld      a,h
 351+ CB6D E6 80                                and     SignOnly8Bit
 352+ CB6F 47                                   ld      b,a                         ;save sign bit in b
 353+ CB70 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 354+ CB71                                      JumpIfNegative ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 354+ CB71 FA 89 CB    >                        jp		m, ADDHLDEOppSGN
 355+ CB74 78           ADDHLDESameSigns:       ld      a,b
 356+ CB75 B2                                   or      d
 357+ CB76                                      JumpIfNegative ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 357+ CB76 FA 7B CB    >                        jp		m, ADDHLDESameNeg
 358+ CB79 19                                   add     hl,de
 359+ CB7A C9                                   ret
 360+ CB7B 7C           ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 361+ CB7C E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 362+ CB7E 67                                   ld      h,a
 363+ CB7F 7A                                   ld      a,d
 364+ CB80 E6 7F                                and     SignMask8Bit
 365+ CB82 57                                   ld      d,a
 366+ CB83 19                                   add     hl,de
 367+ CB84 3E 80                                ld      a,SignOnly8Bit
 368+ CB86 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 369+ CB87 67                                   ld      h,a
 370+ CB88 C9                                   ret
 371+ CB89 7C           ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 372+ CB8A E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 373+ CB8C 67                                   ld      h,a
 374+ CB8D 7A                                   ld      a,d
 375+ CB8E E6 7F                                and     SignMask8Bit
 376+ CB90 57                                   ld      d,a
 377+ CB91 B7                                   or      a
 378+ CB92 ED 52                                sbc     hl,de
 379+ CB94 38 04                                jr      c,ADDHLDEOppInvert
 380+ CB96 78           ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 381+ CB97 B4                                   or      h
 382+ CB98 67                                   ld      h,a                         ; set the previou sign value
 383+ CB99 C9                                   ret
 384+ CB9A              ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 384+ CB9A AF          >                    xor a
 384+ CB9B 95          >                    sub l
 384+ CB9C 6F          >                    ld l,a
 384+ CB9D 9F          >                    sbc a,a
 384+ CB9E 94          >                    sub h
 384+ CB9F 67          >                    ld h,a
 385+ CBA0 78                                   ld      a,b
 386+ CBA1 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 387+ CBA3 B4                                   or      h
 388+ CBA4 67                                   ld      h,a                         ; recover sign
 389+ CBA5 C9                                   ret
 390+ CBA6
 391+ CBA6              ; we could cheat, flip the sign of DE and just add but its not very optimised
 392+ CBA6 7C           SUBHLDESignedv3:        ld      a,h
 393+ CBA7 E6 80                                and     SignOnly8Bit
 394+ CBA9 47                                   ld      b,a                         ;save sign bit in b
 395+ CBAA AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 396+ CBAB                                      JumpIfNegative SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 396+ CBAB FA D9 CB    >                        jp		m, SUBHLDEOppSGN
 397+ CBAE 78           SUBHLDESameSigns:       ld      a,b
 398+ CBAF B2                                   or      d
 399+ CBB0                                      JumpIfNegative SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 399+ CBB0 FA BA CB    >                        jp		m, SUBHLDESameNeg
 400+ CBB3 B7                                   or      a
 401+ CBB4 ED 52                                sbc     hl,de
 402+ CBB6                                      JumpIfNegative SUBHLDESameOvrFlw
 402+ CBB6 FA CD CB    >                        jp		m, SUBHLDESameOvrFlw
 403+ CBB9 C9                                   ret
 404+ CBBA 7C           SUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 405+ CBBB E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 406+ CBBD 67                                   ld      h,a
 407+ CBBE 7A                                   ld      a,d
 408+ CBBF E6 7F                                and     SignMask8Bit
 409+ CBC1 57                                   ld      d,a
 410+ CBC2 B7                                   or      a
 411+ CBC3 ED 52                                sbc     hl,de
 412+ CBC5                                      JumpIfNegative SUBHLDESameOvrFlw
 412+ CBC5 FA CD CB    >                        jp		m, SUBHLDESameOvrFlw
 413+ CBC8 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 414+ CBC9 F6 80                                or      SignOnly8Bit
 415+ CBCB 67                                   ld      h,a
 416+ CBCC C9                                   ret
 417+ CBCD              SUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 417+ CBCD AF          >                    xor a
 417+ CBCE 95          >                    sub l
 417+ CBCF 6F          >                    ld l,a
 417+ CBD0 9F          >                    sbc a,a
 417+ CBD1 94          >                    sub h
 417+ CBD2 67          >                    ld h,a
 418+ CBD3 78                                   ld      a,b
 419+ CBD4 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 420+ CBD6 B4                                   or      h
 421+ CBD7 67                                   ld      h,a                         ; recover sign
 422+ CBD8 C9                                   ret
 423+ CBD9 B7           SUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 424+ CBDA 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 425+ CBDB E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 426+ CBDD 67                                   ld      h,a
 427+ CBDE 7A                                   ld      a,d
 428+ CBDF E6 7F                                and     SignMask8Bit
 429+ CBE1 57                                   ld      d,a
 430+ CBE2 19                                   add     hl,de
 431+ CBE3 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 432+ CBE4 B4                                   or      h
 433+ CBE5 67                                   ld      h,a                         ; set the previou sign value
 434+ CBE6 C9                                   ret
 435+ CBE7
 436+ CBE7
 437+ CBE7              SBCHLDESigned:          JumpOnBitSet h,7,SBCHLDEhlNeg
 437+ CBE7 CB 7C       >                        bit 	7,h
 437+ CBE9 C2 FA CB    >                        jp      nz,SBCHLDEhlNeg
 438+ CBEC              SBCHLDEhlPos:           JumpOnBitSet h,7,SBCHLDEhlNeg
 438+ CBEC CB 7C       >                        bit 	7,h
 438+ CBEE C2 FA CB    >                        jp      nz,SBCHLDEhlNeg
 439+ CBF1 ED 52        SBCHLDEhlPosDePos:      sbc     hl,de                           ; ignore overflow for now will sort later TODO
 440+ CBF3 C9                                   ret
 441+ CBF4 CB BA        SBCHLDEhlPosDeNeg:      res     7,d
 442+ CBF6 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 443+ CBF7 CB FA                                set     7,d
 444+ CBF9 C9                                   ret
 445+ CBFA CB BC        SBCHLDEhlNeg:           res     7,h
 446+ CBFC                                      JumpOnBitSet d,7,SBCHLDEhlNegdeNeg
 446+ CBFC CB 7A       >                        bit 	7,d
 446+ CBFE C2 06 CC    >                        jp      nz,SBCHLDEhlNegdeNeg
 447+ CC01 ED 52        SBCHLDEhlNegdePos:      sbc     hl,de                       ; ignore overflow for now will sort later TODO
 448+ CC03 CB FC                                set     7,h
 449+ CC05 C9                                   ret
 450+ CC06 CB BA        SBCHLDEhlNegdeNeg:      res     7,d
 451+ CC08 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 452+ CC09 CB FA                                set     7,d
 453+ CC0B CB FC                                set     7,h
 454+ CC0D C9                                   ret
 455+ CC0E
 456+ CC0E              ; Roate around axis
 457+ CC0E              ; varAxis1 and varAxis2 point to the address of the axis to rotate
 458+ CC0E              ; so the axis x1 points to roofv  x , y or z
 459+ CC0E              ;             x2           nosev or sidev  x, y or z
 460+ CC0E              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
 461+ CC0E              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
 462+ CC0E              ; var RAT2 gives direction
 463+ CC0E              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
 464+ CC0E              ;-Set up S R -----------------------------------------
 465+ CC0E              ; optimised we don't deal with sign here just the value of roof axis / 512
 466+ CC0E 2A 36 99     MVS5RotateAxis:         ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
 467+ CC11 5E                                   ld      e,(hl)
 468+ CC12 23                                   inc     hl
 469+ CC13 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
 470+ CC14 EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
 471+ CC15 7C                                   ld      a,h
 472+ CC16 E6 80                                and     SignOnly8Bit
 473+ CC18 FD 67                                ld      iyh,a           ; iyh = sign Axis1
 474+ CC1A 7C                                   ld      a,h
 475+ CC1B E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
 476+ CC1D CB 3F                                srl     a               ; a = Axis1/2
 477+ CC1F 5F                                   ld      e,a             ;
 478+ CC20 FD 7C                                ld      a,iyh           ; A = Axis 1 sign
 479+ CC22 57                                   ld      d,a             ; de = signed Axis1 / 512
 480+ CC23 B7                                   or      a               ; clear carry
 481+ CC24 CD A6 CB                             call    SUBHLDESignedv3 ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
 482+ CC27              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
 483+ CC27 E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
 484+ CC28 7D                                   ld      a,l
 485+ CC29 32 51 9A                             ld      (varR),a
 486+ CC2C 7C                                   ld      a,h
 487+ CC2D 32 52 9A                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
 488+ CC30              ;-calculate roofv latter half of calc
 489+ CC30 2A 38 99                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
 490+ CC33 5E                                   ld      e,(hl)
 491+ CC34 23                                   inc     hl
 492+ CC35 56                                   ld      d,(hl)          ; de = value of roof axis
 493+ CC36 7A                                   ld      a,d
 494+ CC37 E6 80                                and     SignOnly8Bit
 495+ CC39 FD 67                                ld      iyh,a           ; save sign
 496+ CC3B 7A                                   ld      a,d
 497+ CC3C E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 498+ CC3E 57                                   ld      d,a             ; de = abs (nosev)
 499+ CC3F                                      ShiftDERight1
 499+ CC3F CB 3A       >			   srl d
 499+ CC41 CB 1B       >			   rr  e
 500+ CC43                                      ShiftDERight1
 500+ CC43 CB 3A       >			   srl d
 500+ CC45 CB 1B       >			   rr  e
 501+ CC47                                      ShiftDERight1
 501+ CC47 CB 3A       >			   srl d
 501+ CC49 CB 1B       >			   rr  e
 502+ CC4B                                      ShiftDERight1           ; de = nosev /16 unsigned
 502+ CC4B CB 3A       >			   srl d
 502+ CC4D CB 1B       >			   rr  e
 503+ CC4F 3A 3C C0                             ld      a,(univRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
 504+ CC52 FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
 505+ CC54 E6 80                                and     SignOnly8Bit
 506+ CC56 B2                                   or      d
 507+ CC57 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
 508+ CC58              ;;; ld      a,e
 509+ CC58              ;;;     or      iyh
 510+ CC58              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 511+ CC58              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
 512+ CC58 E1                                   pop     hl              ; get back RS POP ID 1
 513+ CC59                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 514+ CC59              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
 515+ CC59 CD 6C CB                             call    ADDHLDESignedv3 ; do add using hl and de
 516+ CC5C E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
 517+ CC5D              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
 518+ CC5D              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
 519+ CC5D 2A 38 99                         ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
 520+ CC60 5E                               ld      e,(hl)
 521+ CC61 23                               inc     hl
 522+ CC62 56                               ld      d,(hl)
 523+ CC63 EB                               ex      de,hl
 524+ CC64 7C                               ld      a,h
 525+ CC65 E6 80                            and     $80
 526+ CC67 FD 67                            ld      iyh,a
 527+ CC69 7C                               ld      a,h
 528+ CC6A E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 529+ CC6C CB 3F                            srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
 530+ CC6E 5F                               ld      e,a
 531+ CC6F FD 7C                            ld      a,iyh
 532+ CC71 57                               ld      d,a
 533+ CC72 B7                               or      a               ; clear carry
 534+ CC73 CD A6 CB                         call    SUBHLDESignedv3
 535+ CC76              ;   sbc     hl,de           ; hl = nosev - novesv / 512
 536+ CC76 E5                               push    hl              ; save hl on stack  PUSH ID 3
 537+ CC77 7D                               ld      a,l
 538+ CC78 32 4D 99                         ld      (varP),a        ; p = low of resuilt
 539+ CC7B 7C                               ld      a,h
 540+ CC7C E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 541+ CC7E 32 6C 9A                         ld      (varT),a        ; t = high of result
 542+ CC81              ;-- Set up TQ
 543+ CC81 2A 36 99                         ld      hl,(varAxis1)   ; now work on roofv axis / 16
 544+ CC84              ;   ld      hl,(varAxis2)   ; work on nosev again
 545+ CC84 5E                               ld      e,(hl)
 546+ CC85 23                               inc     hl
 547+ CC86 56                               ld      d,(hl)
 548+ CC87 7A                               ld      a,d
 549+ CC88 E6 80                            and     $80
 550+ CC8A FD 67                            ld      iyh,a           ; save sign
 551+ CC8C 7A                               ld      a,d
 552+ CC8D E6 7F                            and     SignMask8Bit    ; a = nosev hi axis  unsigned
 553+ CC8F 57                               ld      d,a             ; de = abs (nosev)
 554+ CC90                                  ShiftDERight1
 554+ CC90 CB 3A       >			   srl d
 554+ CC92 CB 1B       >			   rr  e
 555+ CC94                                  ShiftDERight1
 555+ CC94 CB 3A       >			   srl d
 555+ CC96 CB 1B       >			   rr  e
 556+ CC98                                  ShiftDERight1
 556+ CC98 CB 3A       >			   srl d
 556+ CC9A CB 1B       >			   rr  e
 557+ CC9C                                  ShiftDERight1           ; de = nosev /16 unsigned
 557+ CC9C CB 3A       >			   srl d
 557+ CC9E CB 1B       >			   rr  e
 558+ CCA0 3A 3C C0                         ld      a,(univRAT2)
 559+ CCA3 FD AC                            xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 560+ CCA5 E6 80                            and     $80
 561+ CCA7 B2                               or      d
 562+ CCA8 57                               ld      d,a
 563+ CCA9              ;;; ld      a,e
 564+ CCA9              ;;;     or      iyh
 565+ CCA9              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 566+ CCA9 E1                               pop     hl              ; get back RS   POP ID 3
 567+ CCAA              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 568+ CCAA CD A6 CB                         call    SUBHLDESignedv3 ; do add using hl and de
 569+ CCAD              ;-- Update nosev ---------------------------------------
 570+ CCAD EB                               ex      de,hl           ; save hl to de
 571+ CCAE 2A 38 99                         ld      hl,(varAxis2)
 572+ CCB1 73                               ld      (hl),e
 573+ CCB2 23                               inc     hl
 574+ CCB3 72                               ld      (hl),d          ; copy result into nosev
 575+ CCB4              ;-- Update roofv ---------------------------------------
 576+ CCB4 D1                               pop     de              ; get calc saved on stack POP ID 2
 577+ CCB5 2A 36 99                         ld      hl,(varAxis1)
 578+ CCB8 73                               ld      (hl),e
 579+ CCB9 23                               inc     hl
 580+ CCBA 72                               ld      (hl),d          ; copy result into nosev
 581+ CCBB C9                               ret
 582+ CCBC
 583+ CCBC                                  include "Universe/Ships/InitialiseOrientation.asm"
# file opened: ./Universe/Ships/InitialiseOrientation.asm
   1++CCBC              InitialiseOrientation:
   2++CCBC              ZI1:
   3++CCBC              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   4++CCBC              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   5++CCBC              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   6++CCBC 21 00 00         ld      hl, 0
   7++CCBF 22 17 C0         ld      (UBnkrotmatSidevY),hl                ; set the zeroes
   8++CCC2 22 19 C0         ld      (UBnkrotmatSidevZ),hl                ; set the zeroes
   9++CCC5 22 1B C0         ld      (UBnkrotmatRoofvX),hl                ; set the zeroes
  10++CCC8 22 1F C0         ld      (UBnkrotmatRoofvZ),hl                ; set the zeroes
  11++CCCB 22 21 C0         ld      (UBnkrotmatNosevX),hl                ; set the zeroes
  12++CCCE 22 23 C0         ld      (UBnkrotmatNosevY),hl                ; set the zeroes
  13++CCD1 21 00 60         ld      hl, $6000					; 96 in hi byte
  14++CCD4                  ;ld      hl,1
  15++CCD4 22 15 C0         ld      (UBnkrotmatSidevX),hl
  16++CCD7 22 1D C0         ld      (UBnkrotmatRoofvY),hl
  17++CCDA 21 00 E0         ld      hl, $E000					; -96 in hi byte which is +96 with hl bit 7 set
  18++CCDD 22 25 C0         ld      (UBnkrotmatNosevZ),hl
  19++CCE0 C9               ret
  20++CCE1
  21++CCE1              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
  22++CCE1              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
  23++CCE1              ;  nosev = (-0,  -0, 1) nosev = (0, 0, &6000)
  24++CCE1
  25++CCE1              LaunchedOrientation:
  26++CCE1 CD BC CC         call    InitialiseOrientation
  27++CCE4                  FlipSignMem UBnkrotmatNosevX+1;  as its 0 flipping will make no difference
  27++CCE4 3A 22 C0    >                        ld  a,(UBnkrotmatNosevX+1)
  27++CCE7 EE 80       >                        xor SignOnly8Bit
  27++CCE9 32 22 C0    >                        ld  (UBnkrotmatNosevX+1),a
  28++CCEC                  FlipSignMem UBnkrotmatNosevY+1;  as its 0 flipping will make no difference
  28++CCEC 3A 24 C0    >                        ld  a,(UBnkrotmatNosevY+1)
  28++CCEF EE 80       >                        xor SignOnly8Bit
  28++CCF1 32 24 C0    >                        ld  (UBnkrotmatNosevY+1),a
  29++CCF4                  FlipSignMem UBnkrotmatNosevZ+1
  29++CCF4 3A 26 C0    >                        ld  a,(UBnkrotmatNosevZ+1)
  29++CCF7 EE 80       >                        xor SignOnly8Bit
  29++CCF9 32 26 C0    >                        ld  (UBnkrotmatNosevZ+1),a
  30++CCFC C9               ret
  31++CCFD
# file closed: ./Universe/Ships/InitialiseOrientation.asm
 584+ CCFD
 585+ CCFD              ;----------------------------------------------------------------------------------------------------------------------------------
 586+ CCFD              OrientateVertex:
 587+ CCFD
 588+ CCFD              ;                      [ sidev_x sidev_y sidev_z ]   [ x ]
 589+ CCFD              ;  projected [x y z] = [ roofv_x roofv_y roofv_z ] . [ y ]
 590+ CCFD              ;                      [ nosev_x nosev_y nosev_z ]   [ z ]
 591+ CCFD              ;
 592+ CCFD
 593+ CCFD              ;----------------------------------------------------------------------------------------------------------------------------------
 594+ CCFD              TransposeVertex:
 595+ CCFD              ;                      [ sidev_x roofv_x nosev_x ]   [ x ]
 596+ CCFD              ;  projected [x y z] = [ sidev_y roofv_y nosev_y ] . [ y ]
 597+ CCFD              ;                      [ sidev_z roofv_z nosev_z ]   [ z ]
 598+ CCFD              VectorToVertex:
 599+ CCFD              ;                     [ sidev_x roofv_x nosev_x ]   [ x ]   [ x ]
 600+ CCFD              ;  vector to vertex = [ sidev_y roofv_y nosev_y ] . [ y ] + [ y ]
 601+ CCFD              ;                     [ sidev_z roofv_z nosev_z ]   [ z ]   [ z ]
 602+ CCFD              ;INPUTS:    bhl = dividend  cde = divisor where b and c are sign bytes
 603+ CCFD              ;OUTPUTS:   cahl = quotient cde = divisor
 604+ CCFD 32 4F 99     DVID3B2:                ld      (varPhi2),a                     ;DVID3B2 \ Divide 3 bytes by 2, K = [P(HiLo).A]/[INWK_z HiLo], for planet radius, Xreg protected. ; P+2    \ num sg
 605+ CD00                                      ldCopy2Byte UBnKzlo, varQ               ; [QR} = Ubnk zlohi  (i.e. Inwk_z HiLo)
 605+ CD00 2A 12 C0    >                        ld       hl,(UBnKzlo)
 605+ CD03 22 50 9A    >                        ld       (varQ),hl
 606+ CD06 3A 14 C0                             ld      a,(UBnKzsgn)                    ;
 607+ CD09 32 52 9A                             ld      (varS),a                        ; S = inkw z sign
 608+ CD0C ED 5B 4D 99  DVID3B:                 ld      de,(varP)                       ; K (3bytes)=P(Lo Hi Hi2)/S.R.Q approx  Acc equiv K(0).; get P and P+1 into de
 609+ CD10 7B                                   ld      a,e                             ; num lo
 610+ CD11 F6 01                                or      1                               ; must be at least 1
 611+ CD13 32 4D 99                             ld      (varP),a                        ; store
 612+ CD16 5F                                   ld      e,a                             ; update DE too
 613+ CD17 3A 4F 99                             ld      a,(varPhi2)                     ; varP Sign     E.D.A = P Lo Hi Hi2
 614+ CD1A 21 52 9A                             ld      hl,varS                         ; hl = address of VarS
 615+ CD1D AE                                   xor     (hl)                            ; A = PHi2 Xor S Signs
 616+ CD1E E6 80                                and     $80                             ;
 617+ CD20 32 6C 9A                             ld      (varT),a                        ; T = Sign bit of A
 618+ CD23 FD 2E 00                             ld      iyl,0                           ; iyl = yReg = counter
 619+ CD26 3A 4F 99                             ld      a,(varPhi2)                     ;
 620+ CD29 E6 7F                                and     $7F                             ; A = Ph2 again but minus sign bit
 621+ CD2B              DVL9:                   JumpIfAGTENusng $40,DV14                ; counter Y up; if object is over $40 away then scaled and exit Y count
 621+ CD2B FE 40       >                        cp     $40
 621+ CD2D D2 3B CD    >                        jp		nc,DV14
 622+ CD30                                      ShiftDELeft1                            ; de (or P,P1) > 1
 622+ CD30 CB 23       >			   sla e
 622+ CD32 CB 12       >			   rl  d
 623+ CD34 CB 17                                rl      a                               ; and accumulator as 3rd byte
 624+ CD36 FD 2C                                inc     iyl
 625+ CD38 C2 2B CD                             jp      nz,DVL9                         ; loop again with a max of 256 iterations
 626+ CD3B 32 4F 99     DV14:                   ld      (varPhi2),a                     ; scaled, exited Ycount
 627+ CD3E ED 53 4D 99                          ld      (varP),de                       ; store off the value so far
 628+ CD42 3A 52 9A                             ld      a,(varS)                        ; zsign
 629+ CD45 E6 7F                                and     $7F                             ; denom sg7
 630+ CD47                                      ; jp mi,DV9                             ; this can never happen as bit 7 is and'ed out
 631+ CD47 2A 50 9A                             ld      hl,(varQ)                       ; demon lo
 632+ CD4A FD 2D        DVL6:                   dec     iyl                             ; counter Y back down, roll S. ;  scale Y back
 633+ CD4C                                      ShiftHLLeft1
 633+ CD4C CB 25       >			   sla l
 633+ CD4E CB 14       >			   rl  h
 634+ CD50 CB 17                                rl      a                               ; mulitply QRS by 2
 635+ CD52 F2 4A CD                             jp      p,DVL6                          ; loop roll S until Abit7 set.
 636+ CD55 22 50 9A     DV9:                    ld      (varQ),hl                       ; bmi cant enter here from above ; save off so far
 637+ CD58 32 50 9A                             ld      (varQ),a                        ; Q \ mostly empty so now reuse as hi denom
 638+ CD5B 3E FE                                ld      a,$FE                           ;  Xreg protected so can't LL28+4
 639+ CD5D 32 51 9A                             ld      (varR),a                        ;  R
 640+ CD60 3A 4F 99                             ld      a,(varPhi2)                     ; P+2 \ big numerator
 641+ CD63 CD D5 A9                             call    PROJ256mulAdivQ                 ; TODO LL31\ R now =A*256/Q
 642+ CD66 3E 00                                ld      a,0
 643+ CD68 32 64 9A                             ld      (varKp1),a
 644+ CD6B 32 65 9A                             ld      (varKp2),a
 645+ CD6E 32 66 9A                             ld      (varKp3),a                      ; clear out K+1 to K+3
 646+ CD71 FD 7D                                ld      a,iyl                           ; Y counter for scale
 647+ CD73                                      JumpOnBitClear a,7,DV12                 ; Ycount +ve
 647+ CD73 CB 7F       >                        bit 	7,a
 647+ CD75 CA A0 CD    >                        jp      z,DV12
 648+ CD78 3A 51 9A                             ld      a,(varR)                        ; R     \ else Y count is -ve, Acc = remainder.
 649+ CD7B ED 5B 63 9A                          ld      de,(varK)                       ; d= k1
 650+ CD7F 2A 67 9A                             ld      hl,(varK2)                      ; h = k3, l = k2
 651+ CD82 5F                                   ld      e,a                             ; use e to hold K0 pulled from a
 652+ CD83 CB 27        DVL8:                   sla     a                               ; boost up a                     ;  counter Y up
 653+ CD85 CB 12                                rl      d                               ; k1
 654+ CD87 CB 15                                rl      l                               ; k2
 655+ CD89 CB 14                                rl      h                               ; k3
 656+ CD8B FD 2C                                inc     iyl
 657+ CD8D 20 F4                                jr      nz,DVL8                         ;
 658+ CD8F ED 53 63 9A  DVL8Save:               ld      (varK),de
 659+ CD93 22 67 9A                             ld      (varK2),hl                      ; save back K0 to k3
 660+ CD96 3A 6C 9A                             ld      a,(varT)
 661+ CD99 4F                                   ld      c,a                             ; get varT into c reg
 662+ CD9A 7C                                   ld      a,h                             ; a= k3 (sign)
 663+ CD9B B1                                   or      c                               ; merge in varT (sign)that was saved much earlier up)
 664+ CD9C 32 76 9A                             ld      (varK3),a                       ; load sign bit back into K3
 665+ CD9F C9                                   ret
 666+ CDA0              DV12:                   JumpIfAIsZero   DV13                    ; Y Count zerp, go to DV13
 666+ CDA0 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 666+ CDA1 CA B8 CD    >                        jp	z, DV13
 667+ CDA4 3A 51 9A                             ld      a,(varR)                        ; Reduce Remainder
 668+ CDA7 CB 3F        DVL10:                  srl     a                               ; divide by 2                     ; counter Y reduce
 669+ CDA9 FD 2D                                dec     iyl
 670+ CDAB C2 A7 CD                             jp      nz,DVL10                        ; loop y reduce until y is zero
 671+ CDAE 32 63 9A                             ld      (varK),a                        ; k Lo
 672+ CDB1                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 672+ CDB1 3A 6C 9A    >                        ld       a,(varT)
 672+ CDB4 32 66 9A    >                        ld       (varKp3),a
 673+ CDB7 C9                                   ret
 674+ CDB8              DV13:                   ldCopyByte  varR,varK                   ; R \ already correct so copy to K lo;DV13   \ Ycount zero \ K(1to2) already = 0
 674+ CDB8 3A 51 9A    >                        ld       a,(varR)
 674+ CDBB 32 63 9A    >                        ld       (varK),a
 675+ CDBE                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 675+ CDBE 3A 6C 9A    >                        ld       a,(varT)
 675+ CDC1 32 66 9A    >                        ld       (varKp3),a
 676+ CDC4 C9                                   ret
 677+ CDC5
 678+ CDC5 CD FD CC     PLS6:                   call    DVID3B2                         ; Returns AHL K ( 2 1 0 )
 679+ CDC8 3A 66 9A                             ld      a,(varKp3)
 680+ CDCB E6 7F                                and     $7F
 681+ CDCD 21 65 9A                             ld      hl,varKp2
 682+ CDD0 B6                                   or      (hl)
 683+ CDD1 C2 E6 CD                             jp      nz,PL44TooBig
 684+ CDD4 3A 64 9A                             ld      a,(varKp1)
 685+ CDD7 FE 04                                cp      4                               ; if high byte > 4 then total > 1024 so too big
 686+ CDD9 30 0B                                jr      nc,PL44TooBig
 687+ CDDB                                      ClearCarryFlag                          ; we have a good result regardless
 687+ CDDB B7          >                        or a
 688+ CDDC 2A 63 9A                             ld      hl,(varK)                       ; get K (0 1)
 689+ CDDF 3A 66 9A                             ld      a,(varKp3)                      ; if sign bit high?
 690+ CDE2 CB 7F                                bit     7,a
 691+ CDE4 C8                                   ret     z                               ; no so we can just return
 692+ CDE5 C9           PL44:                   ret
 693+ CDE6 37           PL44TooBig:             scf
 694+ CDE7 C9                                   ret
 695+ CDE8              Project:
 696+ CDE8 2A 0C C0     PROJ:                   ld      hl,(UBnKxlo)                    ; Project K+INWK(x,y)/z to K3,K4 for center to screen
 697+ CDEB 22 4D 99                             ld      (varP),hl
 698+ CDEE 3A 0E C0                             ld      a,(UBnKxsgn)
 699+ CDF1 CD C5 CD                             call    PLS6                            ; returns result in K (0 1) (unsigned) and K (3) = sign note to no longer does 2's C
 700+ CDF4 D8                                   ret     c                               ; carry means don't print
 701+ CDF5 2A 63 9A                             ld      hl,(varK)                       ; hl = k (0 1)
 702+ CDF8                                      ; Now the question is as hl is the fractional part, should this be multiplied by 127 to get the actual range
 703+ CDF8 3E 80                                ld      a,ViewCenterX
 704+ CDFA ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 705+ CDFC 22 76 9A                             ld      (varK3),hl                      ; K3 = X position on screen
 706+ CDFF 2A 0F C0     ProjectY:               ld      hl,(UBnKylo)
 707+ CE02 22 4D 99                             ld      (varP),hl
 708+ CE05 3A 11 C0                             ld      a,(UBnKysgn)
 709+ CE08 CD C5 CD                             call    PLS6
 710+ CE0B D8                                   ret     c
 711+ CE0C 2A 63 9A                             ld      hl,(varK)                       ; hl = k (0 1)
 712+ CE0F 3E 40                                ld      a,ViewCenterY
 713+ CE11 ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 714+ CE13 22 7C 9A                             ld      (varK4),hl                      ; K3 = X position on screen
 715+ CE16 C9                                   ret
 716+ CE17              ;--------------------------------------------------------------------------------------------------------
 717+ CE17                                      include "./ModelRender/EraseOldLines-EE51.asm"
# file opened: ././ModelRender/EraseOldLines-EE51.asm
   1++CE17              ;
   2++CE17              ; EraseOldLines:
   3++CE17              ;	Loop from 0 to UbnKEdgeHeapCounter (note this should be 4 * actual nbr of lines)
   4++CE17              ;		draw line (black) UBnkLinesArray[0,1]+Loop to [2,3]+loop
   5++CE17              ;	 	loop + 4
   6++CE17              ; Return
   7++CE17
   8++CE17              EraseOldLines:
   9++CE17              EE51:										; if bit3 set draw lines in XX19 heap
  10++CE17              	ReturnOnMemBitClear UBnKexplDsp,3       ; bit 3 denotes that there is nothing to erase as its already done
  10++CE17 3A 35 C0    >                        ld     a,(UBnKexplDsp)
  10++CE1A CB 5F       >                        bit 	3,a
  10++CE1C C8          >                        ret		z
  11++CE1D CB DF        	set		3,a
  12++CE1F 32 35 C0     	ld		(UBnKexplDsp),a  				; else toggle bit3 to allow lines (set will do as its 0 by now)
  13++CE22 C3 FA E8     	jp		clearLines						; LL115	clear LINEstr. Draw lines in XX19 heap.  - note its an & not direct
  14++CE25              ; We use the ret from the clearLines so not needed here
  15++CE25
# file closed: ././ModelRender/EraseOldLines-EE51.asm
 718+ CE25                                      include "./ModelRender/TrimToScreenGrad-LL118.asm"
# file opened: ././ModelRender/TrimToScreenGrad-LL118.asm
   1++CE25              ;TrimToScreenGrad:
   2++CE25              ;LL118:										; Trim XX15,XX15+2 to screen grad=XX12+2 for CLIP
   3++CE25              ;ret
   4++CE25              ;TODO        ld      hl,(UBnKx1Lo)               ; XX15+0,1 \ x1 hi
   5++CE25              ;TODO        bit     7,a
   6++CE25              ;TODO        jr      nz,LL119		            ; x1 hi+ve skip down
   7++CE25              ;TODO        ld      a,h
   8++CE25              ;TODO        ld      (varS),a                    ; S	 \ else x1 hi -ve
   9++CE25              ;TODO        call    XYeqyx1loSmulMdiv256                       ; LL120	 \ X1<0  their comment \ X.Y = x1_lo.S *  M/2566
  10++CE25              ;TODO        ld      bc,(UbnKy1Lo)               ; step Y1 lo
  11++CE25
  12++CE25              ;18                      CLC
  13++CE25              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  14++CE25              ;85 36                   STA &36			 \ XX15+2
  15++CE25              ;98                      TYA 			 \ step Y1 hi
  16++CE25              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  17++CE25              ;85 37                   STA &37			 \ XX15+3
  18++CE25              ;A9 00                   LDA #0			 \ xleft min
  19++CE25              ;85 34                   STA &34		\ XX15+0 \ X1 lo
  20++CE25              ;85 35                   STA &35		\ XX15+1 \ X1 = 0
  21++CE25              ;AA                      TAX 			 \ Xreg = 0, will skip to Ytrim
  22++CE25              ;	.LL119	\ x1 hi +ve from LL118
  23++CE25              ;F0 19                   BEQ LL134		 \ if x1 hi = 0 skip to Ytrim
  24++CE25              ;85 83                   STA &83		\ S	 \ else x1 hi > 0
  25++CE25              ;C6 83                   DEC &83		\ S	 \ x1 hi-1
  26++CE25              ;20 19 50                JSR &5019	\ LL120  \ X1>255 their comment \ X.Y = x1lo.S *  M/256
  27++CE25              ;8A                      TXA 			 \ step Y1 lo
  28++CE25              ;18                      CLC
  29++CE25              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  30++CE25              ;85 36                   STA &36			 \ XX15+2
  31++CE25              ;98                      TYA 			 \ step Y1 hi
  32++CE25              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  33++CE25              ;85 37                   STA &37			 \ XX15+3
  34++CE25              ;A2 FF                   LDX #&FF		 \ xright max
  35++CE25              ;86 34                   STX &34		\ XX15+0 \ X1 lo
  36++CE25              ;E8                      INX 			 \ X = 0
  37++CE25              ;86 35                   STX &35		\ XX15+1 \ X1 = 255
  38++CE25              ;	.LL134	\ Ytrim
  39++CE25              ;A5 37                   LDA &37		\ XX15+3 \ y1 hi
  40++CE25              ;10 1A                   BPL LL135		 \ y1 hi +ve
  41++CE25              ;85 83                   STA &83		\ S	 \ else y1 hi -ve
  42++CE25              ;A5 36                   LDA &36		\ XX15+2 \ y1 lo
  43++CE25              ;85 82                   STA &82		\ R	 \ Y1<0 their comment
  44++CE25              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  45++CE25              ;8A                      TXA 			 \ step X1 lo
  46++CE25              ;18                      CLC
  47++CE25              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  48++CE25              ;85 34                   STA &34			 \ XX15+0
  49++CE25              ;98                      TYA 			 \ step X1 hi
  50++CE25              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  51++CE25              ;85 35                   STA &35			 \ XX15+1
  52++CE25              ;A9 00                   LDA #0			 \ Y bottom min
  53++CE25              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  54++CE25              ;85 37                   STA &37		\ XX15+3 \ Y1 = 0
  55++CE25              ;	.LL135	\ y1 hi +ve from LL134
  56++CE25              ;A5 36                   LDA &36		\ XX15+2 \ Y1 lo
  57++CE25              ;38                      SEC
  58++CE25              ;E9 C0                   SBC #&C0		 \ #Y*2  screen y height
  59++CE25              ;85 82                   STA &82		\ R	 \ Y1>191 their comment
  60++CE25              ;A5 37                   LDA &37		\ XX15+3 \ Y1 hi
  61++CE25              ;E9 00                   SBC #0			 \ any hi
  62++CE25              ;85 83                   STA &83			 \ S
  63++CE25              ;90 16                   BCC LL136		 \ failed, rts
  64++CE25              ;	.LL139
  65++CE25              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  66++CE25              ;8A                      TXA 			 \ step X1 lo
  67++CE25              ;18                      CLC
  68++CE25              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  69++CE25              ;85 34                   STA &34			 \ XX15+0
  70++CE25              ;98                      TYA 			 \ step X1 hi
  71++CE25              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  72++CE25              ;85 35                   STA &35			 \ XX15+1
  73++CE25              ;A9 BF                   LDA #&BF		 \ #Y*2-1 = y top max
  74++CE25              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  75++CE25              ;A9 00                   LDA #0			 \ Y1 hi = 0
  76++CE25              ;85 37                   STA &37		\ XX15+3 \ Y1 = 191
  77++CE25              ;	.LL136	\ rts
  78++CE25              ;60                      RTS 		 	 \ -- trim for CLIP done
  79++CE25              ;
  80++CE25
# file closed: ././ModelRender/TrimToScreenGrad-LL118.asm
 719+ CE25                                      include "./ModelRender/CLIP-LL145.asm"
# file opened: ././ModelRender/CLIP-LL145.asm
   1++CE25              ;--------------------------------------------------------------------------------------------------------------------
   2++CE25
   3++CE25 00           clipDx                  DB      0           ; also XX12+2
   4++CE26 00           clipDxHigh              DB      0           ; also XX12+3
   5++CE27 00           clipDxHighNonABS        DB      0           ; also XX12+3
   6++CE28 00           clipDy                  DB      0           ; also XX12+4
   7++CE29 00           clipDyHigh              DB      0           ; also XX12+5
   8++CE2A 00           clipGradient            DB      0
   9++CE2B 00           clipDxySign             DB      0
  10++CE2C              varX12p3                equ     clipDxySign
  11++CE2C 00           clipXGTY                DB      0
  12++CE2D 00           clipFlags               DB      0
  13++CE2E 00           SWAP                    DB      0
  14++CE2F 00 00        varYX                   DW      0
  15++CE31              ;varRegX                 DB      0
  16++CE31              ;varXX12p2               DB      0
  17++CE31 00           clipXX13                 DB      0
  18++CE32
  19++CE32
  20++CE32              ; bounds check and the start to avoid dxy calcs if off screen, eliminating off screens first saves a lot of uncessary mul/div
  21++CE32              ;ClipXX15XX12Line:
  22++CE32 ED 4B 85 C0  ClipLine:               ld      bc,(UbnkPreClipY1)          ; bc - XX15(2,3)
  23++CE36 DD 2A 89 C0                          ld      ix,(UbnkPreClipY2)          ; ix - XX12(0,1)
  24++CE3A 2A 83 C0                             ld      hl,(UbnkPreClipX1)          ; hl - XX15(0,1)
  25++CE3D ED 5B 87 C0                          ld      de,(UbnkPreClipX2)          ; de - XX15(4,5)
  26++CE41 AF                                   xor     a
  27++CE42 32 2E CE                             ld      (SWAP),a                    ; SWAP = 0
  28++CE45 7A                                   ld      a,d                         ; A = X2Hi
  29++CE46 FD 26 BF     .LL147:                 ld      iyh,$BF                     ; we need to be 191 as its 128 + another bit set from 0 to 6, we are using iyh as regX
  30++CE49                                      ;       push    af
  31++CE49                                      ;       ld      a,iyh
  32++CE49                                      ;       ld      (regX),a
  33++CE49                                      ;       pop     af
  34++CE49 DD B4                                or      ixh                         ; if (X2Hi L-OR Y2 Hi <> 0) goto LL107             -- X2Y2 off screen
  35++CE4B 20 0A                                jr      nz, .LL107
  36++CE4D DD 7D                                ld      a,ixl
  37++CE4F ED 27 80                             test    $80                         ; if screen hight < y2 lo, i.e y2 lo >127 goto LL107,
  38++CE52 20 03                                jr      nz,.LL107
  39++CE54 FD 26 00                             ld      iyh, 0                      ; else iyh = regX = 0                                                                        -- X2Y2 on screen
  40++CE57                                      ;        push    af
  41++CE57                                      ;        ld      a,iyh
  42++CE57                                      ;        ld      (regX),a
  43++CE57                                      ;        pop     af
  44++CE57              ; XX13 = regX (i.e. iyh)      ( if XX13 = XX13 is 191 if (x2, y2) is off-screen else 0) we bin XX13 as not needed
  45++CE57              ; so XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen,  XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lo is off the bottom of the screen
  46++CE57 FD 7C        .LL107                  ld      a,iyh
  47++CE59 32 31 CE                             ld      (clipXX13),a                ; debug copy iyh to xx13
  48++CE5C 7C                                   ld      a,h                         ; If (X1 hi L-OR Y1) hi  goto LL83                   -- X1Y1 off screen and maybe X2Y2
  49++CE5D B0                                   or      b                           ;
  50++CE5E 20 27                                jr      nz,.LL83                    ;
  51++CE60 79                                   ld      a,c                         ; or (y1 lo > bottom of screen)
  52++CE61 ED 27 80                             test    $80                         ; i.e  screen height < y1)
  53++CE64 20 21                                jr      nz,.LL83
  54++CE66              ; If we get here, (x1, y1) is on-screen
  55++CE66 FD 7C                                ld      a,iyh                       ; iyh = xx13 at this point if  XX13 <> 0 goto LL108                                                        -- X1Y1 on screen, if we flagged X2Y2 off screen goto LL108
  56++CE68 FE 00                                cp      0
  57++CE6A 20 15                                jr      nz, .LL108
  58++CE6C              ; Finished clipping exit point ----------------------------------------------------------------------------------------
  59++CE6C 79           .ClipDone:              ld      a,c                         ; LL146 (Clip Done)               Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
  60++CE6D 32 84 C0                             ld      (UBnkNewY1),a
  61++CE70 DD 7D                                ld      a,ixl
  62++CE72 32 86 C0                             ld      (UBnkNewY2),a
  63++CE75 7D                                   ld      a,l
  64++CE76 32 83 C0                             ld      (UBnkNewX1),a
  65++CE79 7B                                   ld      a,e
  66++CE7A 32 85 C0                             ld      (UBnkNewX2),a
  67++CE7D                                      ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
  67++CE7D B7          >                        or a
  68++CE7E C9                                   ret                                 ; 2nd pro different, it swops based on swop flag around here.
  69++CE7F              ; Finished out of bounds exit point -----------------------------------------------------------------------------------
  70++CE7F 37           .PointsOutofBounds:     scf                                 ; LL109 (ClipFailed) carry flag set as not visible
  71++CE80 C9                                   ret
  72++CE81 FD 7C        .LL108:                 ld      a,iyh
  73++CE83 B7                                   or      a
  74++CE84 1F                                   rra
  75++CE85 FD 67                                ld      iyh,a                       ; (X2Y2 Off Screen)         XX13 = 95 (i.e. divide it by 2)                                                 -- X1Y1 on screen X2Y2 off screen
  76++CE87                                      ;        push    af                  ;OPTIMISATION 6/11/21 commented out
  77++CE87                                      ;        ld      a,iyh               ;OPTIMISATION 6/11/21 commented out
  78++CE87                                      ;        ld      (regX),a            ;OPTIMISATION 6/11/21 commented out
  79++CE87                                      ;        pop     af                  ;OPTIMISATION 6/11/21 commented out
  80++CE87 FD 7C        .LL83:                  ld      a,iyh                       ; (Line On screen Test)      if XX13 < 128 then only 1 point is on screen so goto LL115                      -- We only need to deal with X2Y2
  81++CE89 ED 27 80                             test    $80                         ;
  82++CE8C 28 28                                jr      z, .LL115                   ;
  83++CE8E 7C                                   ld      a,h                         ; If both x1_hi and x2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  84++CE8F A2                                   and     d
  85++CE90                                      JumpIfNegative  .PointsOutofBounds
  85++CE90 FA 7F CE    >                        jp		m, .PointsOutofBounds
  86++CE93 78                                   ld      a,b                         ; If both y1_hi and y2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  87++CE94 DD A4                                and     ixh
  88++CE96                                      JumpIfNegative  .PointsOutofBounds
  88++CE96 FA 7F CE    >                        jp		m, .PointsOutofBounds
  89++CE99 7C                                   ld      a,h                         ; If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set, jump to LL109 to return from the subroutine with the C  flag set, as the line doesn't fit on-screen
  90++CE9A 3D                                   dec     a
  91++CE9B FD 6F                                ld      iyl,a                       ; using iyl as XX12+2 var
  92++CE9D                                      ;        push    af                 ;OPTIMISATION 6/11/21 commented out
  93++CE9D                                      ;        ld      a,iyl              ;OPTIMISATION 6/11/21 commented out
  94++CE9D                                      ;        ld      (varXX12p2),a      ;OPTIMISATION 6/11/21 commented out
  95++CE9D                                      ;        pop     af                 ;OPTIMISATION 6/11/21 commented out
  96++CE9D 7A                                   ld      a,d                         ; a = x2 hi
  97++CE9E 3D                                   dec     a
  98++CE9F FD B5                                or      iyl                         ; (x2 hi -1 ) or (x1 hi -1)
  99++CEA1                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  99++CEA1 F2 7F CE    >                        jp		p, .PointsOutofBounds
 100++CEA4              ;by here we have eliminated -ve Y1 bounds so can just test for positive high and bit 7 of lo
 101++CEA4 DD 7C                                ld      a,ixh
 102++CEA6 3D                                   dec     a
 103++CEA7 FD 6F                                ld      iyl,a
 104++CEA9 78                                   ld      a,b
 105++CEAA 3D                                   dec     a
 106++CEAB FD B5                                or      iyl
 107++CEAD                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
 107++CEAD F2 7F CE    >                        jp		p, .PointsOutofBounds
 108++CEB0 79                                   ld      a,c
 109++CEB1 DD A5                                and     ixl
 110++CEB3                                      JumpIfNegative .PointsOutofBounds   ; really if both are > 127
 110++CEB3 FA 7F CE    >                        jp		m, .PointsOutofBounds
 111++CEB6              ; Clip line: calulate the line's gradient
 112++CEB6              ; here as an optimisation we make sure X1 is always < X2  later on
 113++CEB6              .LL115:                 ClearCarryFlag
 113++CEB6 B7          >                        or a
 114++CEB7 E5 D5        .CalcDX:                push    hl,,de
 115++CEB9 EB                                   ex      hl,de                       ; so hl is x2 and de = x1
 116++CEBA ED 52                                sbc     hl,de
 117++CEBC                                     ; pop     de                          ; we need de back
 118++CEBC 22 25 CE                             ld      (clipDx),hl
 119++CEBF 7C                                   ld      a,h
 120++CEC0 32 27 CE                             ld      (clipDxHighNonABS),a
 121++CEC3                                     ; ld      a,e                         ;a = x2 lo
 122++CEC3                                     ; sbc     a,l                         ;a= a - x1
 123++CEC3                                     ; ld      (clipDx),a
 124++CEC3                                     ; ld      a,d
 125++CEC3                                     ; sbc     a,h
 126++CEC3                                     ; ld      (clipDxHigh),a                ; later we will just move to sub hl,de
 127++CEC3                                     ; ld      (clipDxHighNonABS),a          ; it looks liek we need this later post scale loop
 128++CEC3              .CalcDy:                ClearCarryFlag
 128++CEC3 B7          >                        or a
 129++CEC4 DD E5 E1                             ld      hl,ix
 130++CEC7 ED 42                                sbc     hl,bc
 131++CEC9 54 5D                                ld      de,hl           ;;OPTIMISATION 6/11/21
 132++CECB 22 28 CE                             ld      (clipDy),hl     ;OPTIMISATION 6/11/21 commented out
 133++CECE 7C           .CalcQuadrant:          ld      a,h
 134++CECF                                     ; ld      a,ixl
 135++CECF                                     ; sbc     c
 136++CECF                                     ; ld      (clipDy),a
 137++CECF                                     ; ld      a,ixh
 138++CECF                                     ; sbc     a,b
 139++CECF                                     ; ld      (clipDyHigh),a              ; so A = sign of deltay in effect
 140++CECF                                     ; pop     hl
 141++CECF
 142++CECF              ;So we now have delta_x in XX12(3 2), delta_y in XX12(5 4)  where the delta is (x1, y1) - (x2, y2))
 143++CECF                                    ;  push    hl                          ; Set S = the sign of delta_x * the sign of delta_y, so if bit 7 of S is set, the deltas have different signs
 144++CECF 21 26 CE                             ld      hl,clipDxHigh
 145++CED2 AE                                   xor     (hl)                        ; now a = sign dx xor sign dy
 146++CED3 32 52 9A                             ld      (varS),a                    ; DEBGU putting it in var S too for now
 147++CED6 32 2B CE                             ld      (clipDxySign),a
 148++CED9 3A 29 CE     .AbsDy:                 ld      a,(clipDyHigh)
 149++CEDC ED 27 80                             test    $80
 150++CEDF 28 0C                                jr      z,.LL110                    ; If delta_y_hi is positive, jump down to LL110 to skip the following
 151++CEE1 2A 28 CE                             ld      hl,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 152++CEE4                                      macronegate16de                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 152++CEE4 AF          >					xor 	a
 152++CEE5 93          >                    sub 	e
 152++CEE6 5F          >                    ld 		e,a
 152++CEE7 9F          >                    sbc 	a,a
 152++CEE8 92          >                    sub 	d
 152++CEE9 57          >                    ld 		d,a
 153++CEEA 22 28 CE                             ld      (clipDy),hl                 ;OPTIMISATION 6/11/21 commented out
 154++CEED 2A 25 CE     .LL110:                 ld      hl,(clipDx)
 155++CEF0 3A 26 CE                             ld      a,(clipDxHigh)
 156++CEF3 ED 27 80                             test    $80                         ; is it a negative X
 157++CEF6 28 06                                jr      z,.LL111                    ; If delta_x_hi is positive, jump down to LL110 to skip the following
 158++CEF8                                      ;ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 159++CEF8                                      macronegate16hl                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 159++CEF8 AF          >					xor 	a
 159++CEF9 95          >					sub 	l
 159++CEFA 6F          >					ld 		l,a
 159++CEFB 9F          >					sbc 	a,a
 159++CEFC 94          >					sub 	h
 159++CEFD 67          >					ld 		h,a
 160++CEFE                                     ; ld      (clipDx),hl                 ;OPTIMISATION 6/11/21 commented out; we still retain the old sign in NonABS version
 161++CEFE              .LL111:               ;  push    de
 162++CEFE                                     ; ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 163++CEFE                                     ; ld      de,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 164++CEFE 7C           .ScaleLoop:             ld      a,h                         ; At this point DX and DY are ABS values
 165++CEFF B2                                   or      d
 166++CF00 28 0A                                jr      z,.CalculateDelta
 166++CF02
 167++CF02                                      ShiftDERight1
 167++CF02 CB 3A       >			   srl d
 167++CF04 CB 1B       >			   rr  e
 168++CF06                                      ShiftHLRight1
 168++CF06 CB 3C       >			   srl h
 168++CF08 CB 1D       >			   rr  l
 169++CF0A 18 F2                                jr      .ScaleLoop                  ; scaled down Dx and Dy to 8 bit, Dy may have been negative
 170++CF0C              .CalculateDelta:        ;ld      (clipDx),hl                ;OPTIMISATION 6/11/21 commented out
 171++CF0C                                      ;ld      (clipDy),de                ;OPTIMISATION 6/11/21 commented out
 172++CF0C              ; By now, the high bytes of both |delta_x| and |delta_y| are zero We know that h and d are both = 0 as that's what we tested with a BEQ
 173++CF0C AF           .LL113:                 xor     a
 174++CF0D 32 6C 9A                             ld      (varT),a                    ; t = 0
 175++CF10 7D                                   ld      a,l                         ; If delta_x_lo < delta_y_lo, so our line is more vertical than horizontal, jump to LL114
 176++CF11                                      JumpIfALTNusng  e, .LL114           ;
 176++CF11 BB          >                        cp      e
 176++CF12 DA 22 CF    >                        jp		c, .LL114
 177++CF15              ; Here Dx >= Dy sp calculate Delta Y / delta X
 178++CF15 32 50 9A     .DxGTEDy:               ld      (varQ),a                    ; Set Q = delta_x_lo
 179++CF18 57                                   ld      d,a                         ; d = also Q for calc
 180++CF19 7B                                   ld      a,e                         ; Set A = delta_y_lo
 181++CF1A CD A3 AB                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate:  R (actually a reg) = 256 * A / Q   = 256 * delta_y_lo / delta_x_lo
 182++CF1D 32 51 9A                             ld      (varR),a                    ;
 183++CF20 18 10                                jr      .LL116                      ; Jump to LL116, as we now have the line's gradient in R
 184++CF22              ; Here Delta Y > Delta X so calulate delta X / delta Y
 185++CF22 7B           .LL114:                 ld      a,e                         ; Set Q = delta_y_lo
 186++CF23 57                                   ld      d,a
 187++CF24 32 50 9A                             ld      (varQ),a
 188++CF27 7D                                   ld      a,l                         ; Set A = delta_x_lo
 189++CF28 CD A3 AB                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate: R = 256 * A / Q  = 256 * delta_x_lo / delta_y_lo
 190++CF2B 32 51 9A                             ld      (varR),a                    ;
 191++CF2E 21 6C 9A                             ld      hl,varT                     ; T was set to 0 above, so this sets T = &FF
 192++CF31 35                                   dec     (hl)
 193++CF32 D1           .LL116:                 pop     de                          ; get back X2
 194++CF33 E1                                   pop     hl                          ; get back X1 into hl,
 195++CF34 3A 51 9A                             ld      a,(varR)                    ; Store the gradient in XX12+2 this can be optimised later
 196++CF37 32 2A CE                             ld      (clipGradient),a
 197++CF3A FD 6F                                ld      iyl,a
 198++CF3C                                      ;       push    af                   ;OPTIMISATION 6/11/21 commented out
 199++CF3C                                      ;       ld      a,iyl                ;OPTIMISATION 6/11/21 commented out
 200++CF3C                                      ;       ld      (varXX12p2),a        ;OPTIMISATION 6/11/21 commented out
 201++CF3C                                      ;       pop     af                   ;OPTIMISATION 6/11/21 commented out
 202++CF3C 3A 52 9A                             ld      a,(varS)
 203++CF3F 32 2B CE                             ld      (clipDxySign),a             ;  Store the type of slope in XX12+3, bit 7 clear means ?Not needed as clipDxySign is used for varS earlier?
 204++CF42                                                                          ; top left to bottom right, bit 7 set means top right to bottom left **CODE IS WRONG HERE A TEST IS BL to TR
 205++CF42 FD 7C                                ld      a,iyh                       ; iyh was XX13 from earlier
 206++CF44 FE 00                                cp      0                           ; If XX13 = 0, skip the following instruction
 207++CF46 28 05                                jr      z,.LL138                    ;
 208++CF48 ED 27 80                             test    $80                         ; If XX13 is positive, it must be 95. This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump to LLX117 to swap the (x1, y1) and (x2, y2)
 209++CF4B 28 13                                jr      z,.LLX117                   ; coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 210++CF4D              ; If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 211++CF4D CD 74 CF     .LL138                  call    ClipPointHLBC               ; Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 212++CF50 FD 7C                                ld      a,iyh                       ; If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to LL124 to return with a successfully clipped line
 213++CF52 ED 27 80                             test    $80
 214++CF55 28 1A                                jr      z,.LL124
 215++CF57              ; If we get here, XX13 = 191 (both coordinates are off-screen)
 216++CF57 7C           .LL117:                 ld      a,h                         ; If either of x1_hi or y1_hi are non-zero, jump to
 217++CF58 B0                                   or      b                           ; LL137 to return from the subroutine with the C flag
 218++CF59 C2 7F CE                             jp      nz, .PointsOutofBounds      ; set, as the line doesn't fit on-screen
 219++CF5C B1                                   or      c                           ; if x1 and y1 hi are both zero test bit 8 or Y1 to see if its > 128
 220++CF5D FA 7F CE                             jp      m, .PointsOutofBounds       ; set, as the line doesn't fit on-screen
 221++CF60              ; If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing
 222++CF60              ; the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 223++CF60 EB           .LLX117:                ex      de,hl                       ;  swap X1 and X2
 224++CF61 DD E5                                push    ix                          ;  swap Y1 and Y2
 225++CF63 C5                                   push    bc
 226++CF64 DD E1                                pop     ix
 227++CF66 C1                                   pop     bc
 228++CF67 CD 74 CF                             call    ClipPointHLBC               ;  Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 229++CF6A 3A 2E CE                             ld      a,(SWAP)
 230++CF6D 3D                                   dec     a
 231++CF6E 32 2E CE                             ld      (SWAP),a                    ; Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 232++CF71 C3 6C CE     .LL124:                 jp      .ClipDone                    ; now put points in place
 233++CF74
 234++CF74              ; Move a point along a line until it is on-screen point is held in HL(X) BC(Y) LL118
 235++CF74              ; iyh still holds XX13 iyl still holds gradient
 236++CF74 7C           ClipPointHLBC:          ld      a,h                         ; If x1_hi is positive, jump down to LL119 to skip the following
 237++CF75 ED 27 80                             test    $80
 238++CF78 28 17                                jr      z,.LL119
 239++CF7A 32 52 9A     .X1isNegative:          ld      (varS),a                    ;  Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 240++CF7D E5 D5 C5                             push    hl,,de,,bc
 241++CF80 CD F6 CF                             call    LL120                       ;  Call LL120 to calculate:   (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 242++CF83                                                                          ;                             (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 243++CF83                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 244++CF83 C1 D1 E1                             pop    hl,,de,,bc                   ;  get coordinates back
 245++CF86 2A 2F CE                             ld      hl,(varYX)
 246++CF89              ;                        ex      hl,de
 247++CF89                                  ;    ld      hl,bc
 248++CF89 09                                   add     hl,bc                       ; y1 = y1 + varYX
 249++CF8A 44 4D                                ld      bc,hl
 250++CF8C 21 00 00                             ld      hl,0                        ; Set x1 = 0
 251++CF8F               ;                       pop     de
 252++CF8F 18 1A                                jr      .LL134                      ; in BBC is set x to 0 to force jump, we will just jump
 253++CF91 FE 00        .LL119:                 cp      0
 254++CF93 28 16                                jr      z,.LL134                    ;  If x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen (as 0 <= (x_hi x_lo) <= 255)
 255++CF95 3D                                   dec     a
 256++CF96 32 52 9A                             ld      (varS),a                    ;  Otherwise x1_hi is positive, i.e. x1 >= 256 and off the right side of the screen, so set S = x1_hi - 1
 257++CF99 E5 D5 C5                             push    hl,,de,,bc
 258++CF9C CD F6 CF                             call    LL120                      ;  Call LL120 to calculate: (Y X) = (S x1_lo) * XX12+2      if T = 0  = (x1 - 256) * gradient
 259++CF9F                                                                          ;                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 260++CF9F                                                                          ;  with the sign of (Y X) set to the opposite of theline's direction of slope
 261++CF9F C1 D1 E1                             pop     hl,,de,,bc
 262++CFA2                                    ;  push    de                          ; Set y1 = y1 + (Y X)
 263++CFA2 2A 2F CE                             ld      hl,(varYX)
 264++CFA5                                    ; ex      de,hl                       ;OPTIMISATION 6/11/21 commented out
 265++CFA5 09                                   add     hl,bc                        ;OPTIMISATION 6/11/21 simplfied post debug
 266++CFA6 44 4D                                ld      bc,hl                        ;OPTIMISATION 6/11/21 simplfied post debug
 267++CFA8                                    ; ex      hl,de                       ;OPTIMISATION 6/11/21 commented out
 268++CFA8                                    ; ld      hl,bc                       ;OPTIMISATION 6/11/21 commented out
 269++CFA8                                    ; add     hl,de                       ; y1 = y1 + varYX
 270++CFA8 21 FF 00                             ld      hl,255                      ; Set x1 = 255
 271++CFAB                                    ;  pop     de
 272++CFAB              ; We have moved the point so the x-coordinate is on screen (i.e. in the range 0-255), so now for they-coordinate
 273++CFAB 78           .LL134:                 ld      a,b                         ; If y1_hi is positive, jump down to LL135  to skip the following
 274++CFAC ED 27 80                             test    $80                         ;
 275++CFAF 28 1A                                jr      z,.LL135                    ;
 276++CFB1 32 52 9A                             ld      (varS),a                    ; Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 277++CFB4 79                                   ld      a,c                         ; Set R = y1_lo
 278++CFB5 32 51 9A                             ld      (varR),a                    ;
 279++CFB8 E5 D5 C5                             push    hl,,de,,bc
 280++CFBB CD 1D D0                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 281++CFBE                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 282++CFBE                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 283++CFBE C1 D1 E1                             pop     hl,,de,,bc
 284++CFC1 D5                                   push    de
 285++CFC2 EB                                   ex      hl,de                       ; de = x1
 286++CFC3 2A 2F CE                             ld      hl,(varYX)                  ; hl = varYX
 287++CFC6 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 288++CFC7 D1                                   pop     de                          ; de = x2 again
 289++CFC8 01 00 00                             ld      bc,0                        ; Set y1 = 0
 290++CFCB 79           .LL135:                 ld      a,c                         ; if bc < 128 then no work to do
 291++CFCC E6 80                                and     $80
 292++CFCE B0                                   or      b                           ; here we see if c bit 8 is set or anything in b as we know if its 0 this would mean there is no need to clip
 293++CFCF C8                                   ret     z
 294++CFD0 E5                                   push    hl
 295++CFD1 60 69                                ld      hl,bc
 296++CFD3 01 80 00                             ld      bc,128
 297++CFD6 B7                                   or      a
 298++CFD7 ED 42                                sbc     hl,bc                       ; hl =  (S R) = (y1_hi y1_lo) - 128
 299++CFD9 22 51 9A                             ld      (varRS), hl                 ; and now RS (or SR)
 300++CFDC 7C                                   ld      a,h
 301++CFDD E1                                   pop     hl
 302++CFDE ED 27 80                             test    $80                         ; If the subtraction underflowed, i.e. if y1 < 192, then y1 is already on-screen, so jump to LL136 to return from the subroutine, as we are done
 303++CFE1 C0                                   ret     nz
 304++CFE2              ; If we get here then y1 >= 192, i.e. off the bottom of the screen
 305++CFE2 E5 D5 C5     .LL139:                 push    hl,,de,,bc
 306++CFE5 CD 1D D0                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 307++CFE8                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 308++CFE8                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 309++CFE8 C1 D1 E1                             pop     hl,,de,,bc
 310++CFEB D5                                   push    de
 311++CFEC EB                                   ex      hl,de
 312++CFED 2A 2F CE                             ld      hl,(varYX)
 313++CFF0 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 314++CFF1 01 7F 00                             ld      bc,127                      ; set bc to 127 bottom of screen
 315++CFF4 D1                                   pop     de
 316++CFF5 C9           .LL136:                 ret                                 ;  Return from the subroutine
 317++CFF6
 318++CFF6
 319++CFF6              ; Calculate the following:   * If T = 0  (more vertical than horizontal), (Y X) = (S x1_lo) * XX12+2
 320++CFF6              ;                            * If T <> 0 (more horizontal than vertical), (Y X) = (S x1_lo) / XX12+2
 321++CFF6              ;                              giving (Y X) the opposite sign to the slope direction in XX12+3.
 322++CFF6              ; Other entry points        LL122                Calculate (Y X) = (S R) * Q and set the sign to the opposite of the top byte on the stack
 323++CFF6 7D           LL120:                  ld      a,l                          ; Set R = x1_lo
 324++CFF7 32 51 9A                             ld      (varR),a
 325++CFFA CD 65 D0                             call    LL129                        ;  Call LL129 to do the following:  Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 326++CFFD F5                                   push    af                           ;  Store A on the stack so we can use it later
 327++CFFE C5                                   push    bc
 328++CFFF 47                                   ld      b,a
 329++D000 3A 6C 9A                             ld      a,(varT)                     ; instead : (Y X) = (S R ) / Q
 330++D003 FE 00                                cp      0
 331++D005 78                                   ld      a,b
 332++D006 C1                                   pop     bc                           ; we can't use af as that would disrupt the flags
 333++D007 20 23                                jr      nz, LL121
 334++D009              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 335++D009 3A 2A CE     LL122:                  ld      a,(clipGradient)
 336++D00C 32 50 9A                             ld      (varQ),a; optimise
 337++D00F CD F6 A9                             call    HLequSRmulQdiv256
 338++D012 22 2F CE                             ld      (varYX),hl
 339++D015 F1                                   pop     af
 340++D016 ED 27 80                             test    $80
 341++D019 CA 58 D0                             jp      z,LL133
 342++D01C C9                                   ret
 343++D01D              ; Calculate the following: * If T = 0,  calculate (Y X) = (S R) / XX12+2 (actually SR & XX12+2 /256)
 344++D01D              ;                          * If T <> 0, calculate (Y X) = (S R) * XX12+2
 345++D01D              ;                          giving (Y X) the opposite sign to the slope direction in XX12+3.
 346++D01D              ;
 347++D01D              ; Other entry points:      LL121                Calculate (Y X) = (S R) / Q and set the sign to the opposite of the top byte on the stack
 348++D01D              ;                          LL133                Negate (Y X) and return from the subroutine
 349++D01D              ;                          LL128                Contains an RTS
 350++D01D CD 65 D0     LL123:                  call    LL129                       ; Call LL129 to do the following: Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 351++D020 F5                                   push    af                          ; Store A on the stack so we can use it later
 352++D021 C5                                   push    bc                          ; If T is non-zero, so it's more horizontal than vertical, jump down to LL121 to calculate this
 353++D022 47                                   ld      b,a
 354++D023 3A 6C 9A                             ld      a,(varT)                    ; instead : (Y X) = (S R) * Q *** this looks to be the wrong way roudn for Y!!!!
 355++D026 FE 00                                cp      0
 356++D028 78                                   ld      a,b
 357++D029 C1                                   pop     bc
 358++D02A 20 DD                                jr      nz, LL122
 359++D02C              ; The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2, its actually X.Y=R.S*256/Q
 360++D02C 11 FE FF     LL121:                  ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 361++D02F 2A 51 9A                             ld      hl,(varRS)                  ; hl = RS
 362++D032 3A 50 9A                             ld      a,(varQ)
 363++D035 47                                   ld      b,a                         ; b = q
 364++D036              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 364++D036 CB 25       >			   sla l
 364++D038 CB 14       >			   rl  h
 365++D03A 7C                                   ld      a,h
 366++D03B 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 367++D03D                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 367++D03D B8          >                        cp      b
 367++D03E DA 49 D0    >                        jp		c, .LL132
 368++D041 3F           .LL131:                 ccf                                 ; compliment carry
 369++D042 98                                   sbc     a,b                         ; q
 370++D043 67                                   ld      h,a                         ; h (s)
 371++D044 7D                                   ld      a,l                         ; r
 372++D045 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 373++D047 37                                   scf                                 ; set carry for next rolls
 374++D048 3F                                   ccf
 375++D049              .LL132:                 RollDELeft1                         ; Rotate de bits left
 375++D049 CB 13       >               rl  e
 375++D04B CB 12       >               rl  d
 376++D04D 38 E7                                jr      c,.LL130                    ;
 377++D04F ED 53 2F CE                          ld      (varYX),de
 378++D053 F1                                   pop     af              ; get back sign
 379++D054 ED 27 80                             test    $80
 380++D057 C8                                   ret     z               ; if negative then return with value as is reversed sign
 381++D058 2A 2F CE     LL133:                  ld      hl,(varYX)      ; may not actually need this?
 382++D05B                                      NegHL
 382++D05B AF          >                    xor a
 382++D05C 95          >                    sub l
 382++D05D 6F          >                    ld l,a
 382++D05E 9F          >                    sbc a,a
 382++D05F 94          >                    sub h
 382++D060 67          >                    ld h,a
 383++D061 22 2F CE                             ld      (varYX),hl
 384++D064 C9           LL128:                  ret
 385++D065              ; Do the following, in this order:  Q = XX12+2
 386++D065              ;                                   A = S EOR XX12+3
 387++D065              ;                                   (S R) = |S R|
 388++D065              ; This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 389++D065 3A 2A CE     LL129:                  ld      a,(clipGradient)
 390++D068 32 50 9A                             ld      (varQ),a                    ;Set Q = XX12+2
 391++D06B 3A 52 9A                             ld      a,(varS)                    ; If S is positive, jump to LL127
 392++D06E E5 F5                                push    hl,,af
 393++D070 ED 27 80                             test    $80
 394++D073 28 0C                                jr      z,.LL127
 395++D075 2A 51 9A                             ld      hl,(varRS)                  ; else SR = | SR|
 396++D078                                      NegHL
 396++D078 AF          >                    xor a
 396++D079 95          >                    sub l
 396++D07A 6F          >                    ld l,a
 396++D07B 9F          >                    sbc a,a
 396++D07C 94          >                    sub h
 396++D07D 67          >                    ld h,a
 397++D07E 22 51 9A                             ld      (varRS),hl
 398++D081 21 2B CE     .LL127:                 ld      hl,clipDxySign
 399++D084 F1                                   pop     af
 400++D085 AE                                   xor     (hl)                        ; a = S XOR clipDxySign
 401++D086 E1                                   pop     hl
 402++D087 C9                                   ret
 403++D088
# file closed: ././ModelRender/CLIP-LL145.asm
 720+ D088              ;--------------------------------------------------------------------------------------------------------
 721+ D088                                      include "./Universe/Ships/CopyRotmatToTransMat.asm"
# file opened: ././Universe/Ships/CopyRotmatToTransMat.asm
   1++D088              ; Set TransMatTo
   2++D088              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3++D088              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4++D088              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5++D088              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6++D088              CopyRotmatToTransMat:                       ; Tested
   7++D088 21 15 C0     LL15_CopyRotMat:        ld      hl,UBnkrotmatSidevX
   8++D08B
   9++D08B 11 3E C0                             ld      de,UBnkTransmatSidevX
  10++D08E                                      SixLDIInstrunctions
  10++D08E ED A0       >                        ldi
  10++D090 ED A0       >                        ldi
  10++D092 ED A0       >                        ldi
  10++D094 ED A0       >                        ldi
  10++D096 ED A0       >                        ldi
  10++D098 ED A0       >                        ldi
  11++D09A 21 1B C0                             ld      hl,UBnkrotmatRoofvX
  12++D09D 11 44 C0                             ld      de, UBnkTransmatRoofvX
  13++D0A0                                      SixLDIInstrunctions
  13++D0A0 ED A0       >                        ldi
  13++D0A2 ED A0       >                        ldi
  13++D0A4 ED A0       >                        ldi
  13++D0A6 ED A0       >                        ldi
  13++D0A8 ED A0       >                        ldi
  13++D0AA ED A0       >                        ldi
  14++D0AC 21 21 C0                             ld      hl,UBnkrotmatNosevX
  15++D0AF 11 4A C0                             ld      de, UBnkTransmatNosevX
  16++D0B2                                      SixLDIInstrunctions
  16++D0B2 ED A0       >                        ldi
  16++D0B4 ED A0       >                        ldi
  16++D0B6 ED A0       >                        ldi
  16++D0B8 ED A0       >                        ldi
  16++D0BA ED A0       >                        ldi
  16++D0BC ED A0       >                        ldi
  17++D0BE C9                                   ret
  18++D0BF
  19++D0BF              CopyRotToTransMacro:    MACRO
  20++D0BF ~                                    ld      hl,UBnkrotmatSidevX
  21++D0BF ~                                    ld      de,UBnkTransmatSidevX
  22++D0BF ~                                    SixLDIInstrunctions
  23++D0BF ~                                    SixLDIInstrunctions
  24++D0BF ~                                    SixLDIInstrunctions
  25++D0BF                                      ENDM
  26++D0BF
# file closed: ././Universe/Ships/CopyRotmatToTransMat.asm
 722+ D0BF                                      include "./Universe/Ships/TransposeXX12ByShipToXX15.asm"
# file opened: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
   1++D0BF              TransposeXX12ByShipToXX15:
   2++D0BF 2A 89 C0             ld		hl,(UBnkXX12xLo)					; get X into HL
   3++D0C2 7C           		ld		a,h			                        ; get XX12 Sign
   4++D0C3 E6 80        		and		$80									; check sign bit on high byte
   5++D0C5 47           		ld		b,a									; and put it in of 12xlo in b
   6++D0C6                      ;110921 debugld      h,0
   7++D0C6 7C                   ld      a,h
   8++D0C7 E6 7F                and     $7F
   9++D0C9 67                   ld      h,a
  10++D0CA                      ;110921 debugld      h,0
  11++D0CA ED 5B 0C C0  		ld		de,(UBnKxlo)						;
  12++D0CE 3A 0E C0     		ld		a,(UBnKxsgn)						; get Ship Pos (low,high,sign)
  13++D0D1 E6 80        		and		$80									; make sure we only have bit 7
  14++D0D3 4F           		ld		c,a									; and put sign of unkxsgn c
  15++D0D4 CD 52 B0     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++D0D7 B4           		or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++D0D8 67           		ld		h,a
  18++D0D9 22 83 C0     		ld		(UBnkXScaled),hl					; now write it out to XX15 X pos
  19++D0DC              ; ..................................
  20++D0DC 2A 8B C0     		ld		hl,(UBnkXX12yLo)					; Repeat above for Y coordinate
  21++D0DF 7C           		ld		a,h
  22++D0E0 E6 80        		and		$80
  23++D0E2 47           		ld		b,a
  24++D0E3                      ;110921 debugld      h,0
  25++D0E3 7C                   ld      a,h
  26++D0E4 E6 7F                and     $7F
  27++D0E6 67                   ld      h,a
  28++D0E7                      ;110921 debugld      h,0
  29++D0E7 ED 5B 0F C0  		ld		de,(UBnKylo)
  30++D0EB 3A 11 C0     		ld		a,(UBnKysgn)
  31++D0EE E6 80        		and		$80									; make sure we only have bit 7
  32++D0F0 4F           		ld		c,a
  33++D0F1 CD 52 B0     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++D0F4 B4           		or		h									; combine sign in A with H
  35++D0F5 67           		ld		h,a
  36++D0F6 22 85 C0     		ld		(UBnkYScaled),hl
  37++D0F9              ; ..................................
  38++D0F9 2A 8D C0     		ld		hl,(UBnkXX12zLo)					; and now repeat for Z cooord
  39++D0FC 7C           		ld		a,h
  40++D0FD E6 80        		and		$80
  41++D0FF 47           		ld		b,a
  42++D100                      ;110921 debugld      h,0
  43++D100 7C                   ld      a,h
  44++D101 E6 7F                and     $7F
  45++D103 67                   ld      h,a
  46++D104                      ;110921 debugld      h,0
  47++D104 ED 5B 12 C0  		ld		de,(UBnKzlo)
  48++D108 3A 14 C0     		ld		a,(UBnKzsgn)
  49++D10B E6 80        		and		$80									; make sure we only have bit 7
  50++D10D 4F           		ld		c,a
  51++D10E CD 52 B0     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++D111 B4           		or		h									; combine sign in A with H
  53++D112 67           		ld		h,a
  54++D113 CB 7C        		bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++D115 20 16        		jr		nz,ClampZto4                        ; result was negative so we need to clamp to 4
  56++D117 E6 7F                and     $7F                                 ; a = value unsigned
  57++D119 20 06                jr      nz,NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++D11B 7D                   ld      a,l                                 ; get low byte now
  59++D11C              		JumpIfALTNusng 4,ClampZto4					; if its < 4 then fix at 4
  59++D11C FE 04       >                        cp      4
  59++D11E DA 2D D1    >                        jp		c, ClampZto4
  60++D121              NoClampZto4:
  61++D121 22 87 C0     		ld		(UBnkZScaled),hl					; hl = signed calculation and > 4
  62++D124 7D           		ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  63++D125 32 6C 9A             ld      (varT),a
  64++D128 7C           		ld		a,h
  65++D129 32 4F 9A             ld      (varU),a
  66++D12C C9           		ret
  67++D12D              ClampZto4:											; This is where we limit 4 to a minimum of 4
  68++D12D 21 04 00     		ld		hl,4
  69++D130 22 87 C0     		ld		(UBnkZScaled),hl; BODGE FOR NOW
  70++D133 7D           		ld		a,l
  71++D134 32 6C 9A             ld      (varT),a                            ;                                                                           ;;;
  72++D137 7C           		ld		a,h
  73++D138 32 4F 9A             ld      (varU),a 						; compatibility for now
  74++D13B C9           		ret
  75++D13C
# file closed: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
 723+ D13C                                      include "./Maths/Utilities/ScaleNodeTo8Bit.asm"
# file opened: ././Maths/Utilities/ScaleNodeTo8Bit.asm
   1++D13C              ScaleNodeTo8Bit:								; TODO make signed
   2++D13C ED 4B 87 C0  	ld			bc,(UBnkZScaled)
   3++D140 2A 83 C0     	ld			hl,(UBnkXScaled)
   4++D143 ED 5B 85 C0  	ld			de,(UBnkYScaled)
   5++D147              SetABSbc:
   6++D147 78           	ld			a,b
   7++D148 DD 67        	ld			ixh,a
   8++D14A E6 7F        	and			SignMask8Bit
   9++D14C 47           	ld			b,a									; bc = ABS bc
  10++D14D              SetABShl:
  11++D14D 7C           	ld			a,h
  12++D14E DD 6F        	ld			ixl,a
  13++D150 E6 7F        	and			SignMask8Bit
  14++D152 67           	ld			h,a									; hl = ABS hl
  15++D153              SetABSde:
  16++D153 7A           	ld			a,d
  17++D154 FD 67        	ld			iyh,a
  18++D156 E6 7F        	and			SignMask8Bit
  19++D158 57           	ld			d,a									; de = ABS de
  20++D159              ScaleNodeTo8BitLoop:
  21++D159 78               ld          a,b		                            ; U	\ z hi
  22++D15A B4           	or			h                                   ; XX15+1	\ x hi
  23++D15B B2           	or			d                                   ; XX15+4	\ y hi
  24++D15C 28 0F            jr          z,ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
  25++D15E                  ShiftHLRight1
  25++D15E CB 3C       >			   srl h
  25++D160 CB 1D       >			   rr  l
  26++D162                  ShiftDERight1
  26++D162 CB 3A       >			   srl d
  26++D164 CB 1B       >			   rr  e
  27++D166              	ShiftBCRight1
  27++D166 CB 38       >			   srl b
  27++D168 CB 19       >			   rr  c
  28++D16A C3 59 D1         jp          ScaleNodeTo8BitLoop
  29++D16D              ScaleNodeDone:										; now we have scaled values we have to deal with sign
  30++D16D DD 7C        	ld			a,ixh								; get sign bit and or with b
  31++D16F E6 80        	and			SignOnly8Bit
  32++D171 B0           	or			b
  33++D172 47           	ld			b,a
  34++D173              SignforHL:
  35++D173 DD 7D        	ld			a,ixl								; get sign bit and or with b
  36++D175 E6 80        	and			SignOnly8Bit
  37++D177 B4           	or			h
  38++D178 67           	ld			h,a
  39++D179              SignforDE:
  40++D179 FD 7C        	ld			a,iyh								; get sign bit and or with b
  41++D17B E6 80        	and			SignOnly8Bit
  42++D17D B2           	or			d
  43++D17E 57           	ld			d,a
  44++D17F              SignsDoneSaveResult:
  45++D17F ED 43 87 C0  	ld			(UBnkZScaled),bc
  46++D183 22 83 C0     	ld			(UBnkXScaled),hl
  47++D186 ED 53 85 C0  	ld			(UBnkYScaled),de
  48++D18A 78           	ld			a,b
  49++D18B 32 4F 9A     	ld			(varU),a
  50++D18E 79           	ld			a,c
  51++D18F 32 6C 9A     	ld			(varT),a
  52++D192 C9           	ret
  53++D193
# file closed: ././Maths/Utilities/ScaleNodeTo8Bit.asm
 724+ D193
 725+ D193              ;--------------------------------------------------------------------------------------------------------
 726+ D193 21 B0 C0     SetFaceAVisible:        ld      hl,UbnkFaceVisArray
 727+ D196 ED 31                                add     hl,a
 728+ D198 3E FF                                ld      a,$FF
 729+ D19A 77                                   ld      (hl),a
 730+ D19B C9                                   ret
 731+ D19C              ;--------------------------------------------------------------------------------------------------------
 732+ D19C 21 B0 C0     SetFaceAHidden:         ld      hl,UbnkFaceVisArray
 733+ D19F ED 31                                add     hl,a
 734+ D1A1 AF                                   xor     a
 735+ D1A2 77                                   ld      (hl),a
 736+ D1A3 C9                                   ret
 737+ D1A4              ;--------------------------------------------------------------------------------------------------------
 738+ D1A4 3A 18 C3     SetAllFacesVisible:     ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 739+ D1A7 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 740+ D1A9 CB 3F                                srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
 741+ D1AB 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 742+ D1AC 21 B0 C0                             ld      hl,UbnkFaceVisArray
 743+ D1AF 3E FF                                ld      a,$FF
 744+ D1B1              SetAllFacesVisibleLoop:
 745+ D1B1 77           EE30:                   ld      (hl),a
 746+ D1B2 23                                   inc     hl
 747+ D1B3 10 FC                                djnz    SetAllFacesVisibleLoop
 748+ D1B5 C9                                   ret
 749+ D1B6              ;--------------------------------------------------------------------------------------------------------
 750+ D1B6 3A 18 C3     SetAllFacesHidden:      ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 751+ D1B9 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 752+ D1BB CB 3F                                srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
 753+ D1BD 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 754+ D1BE 06 10                                ld      b,16
 755+ D1C0 21 B0 C0                             ld      hl,UbnkFaceVisArray
 756+ D1C3 3E 00                                ld      a,$00
 757+ D1C5 77           SetAllFacesHiddenLoop:  ld      (hl),a
 758+ D1C6 23                                   inc     hl
 759+ D1C7 10 FC                                djnz    SetAllFacesHiddenLoop
 760+ D1C9 C9                                   ret
 761+ D1CA
 762+ D1CA              ;;;;X = normal scale
 763+ D1CA              ;;;;ZtempHi = zhi
 764+ D1CA              ;;;;......................................................
 765+ D1CA              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 766+ D1CA              ;;;;  Loop                                              ::LL90
 767+ D1CA              ;;;;     inc X
 768+ D1CA              ;;;;     divide X, Y & ZtempHiLo by 2
 769+ D1CA              ;;;;  Until ZtempHi = 0
 770+ D1CA              ;;;;......................................................
 771+ D1CA              ;-LL21---------------------------------------------------------------------------------------------------
 772+ D1CA                                      include "Universe/Ships/NormaliseTransMat.asm"
# file opened: ./Universe/Ships/NormaliseTransMat.asm
   1++D1CA              ;divdide by 16 using undocumented instrunctions
   2++D1CA              Norm256mulAdivQ:
   3++D1CA 47               ld      b,a
   4++D1CB 0E 00            ld      c,0
   5++D1CD 16 00            ld      d,0
   6++D1CF 3A 50 9A         ld      a,(varQ)
   7++D1D2 5F               ld      e,a
   8++D1D3              ;Input: BC = Dividend, DE = Divisor, HL = 0
   9++D1D3              ;Output: BC = Quotient, HL = Remainder
  10++D1D3              NormDIV16UNDOC:
  11++D1D3 21 00 00         ld      hl,0
  12++D1D6 78               ld      a,b
  13++D1D7 06 10            ld      b,16
  14++D1D9              NormDIV16UNDOCLOOP:
  15++D1D9 CB 31        	sll	    c		; unroll 16 times
  16++D1DB 17           	rla	    		; ...
  17++D1DC ED 6A        	adc	    hl,hl		; ...
  18++D1DE ED 52        	sbc	    hl,de		; ...
  19++D1E0 30 02        	jr	    nc,NormDIV16UNDOCSKIP		; ...
  20++D1E2 19           	add	    hl,de		; ...
  21++D1E3 0D           	dec	    c		; ...
  22++D1E4              NormDIV16UNDOCSKIP:
  23++D1E4 10 F3            djnz    NormDIV16UNDOCLOOP
  24++D1E6 79               ld      a,c
  25++D1E7 32 51 9A         ld      (varR),a
  26++D1EA C9               ret
  27++D1EB
  28++D1EB              ; Tested OK
  29++D1EB              NormaliseTransMat:
  30++D1EB              ;LL21
  31++D1EB 21 4F C0             ld      hl,UBnkTransmatNosevZ+1         ; initialise loop
  32++D1EE 0E C5                ld      c,ConstNorm                 ; c = Q = norm = 197
  33++D1F0 79                   ld      a,c
  34++D1F1 32 50 9A             ld      (varQ),a                    ; set up varQ
  35++D1F4 06 09                ld      b,9                         ; total of 9 elements to transform
  36++D1F6              LL21Loop:
  37++D1F6 56                   ld      d,(hl)
  38++D1F7 2B                   dec     hl
  39++D1F8 5E                   ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  40++D1F9                      ShiftDELeft1                        ; De = DE * 2
  40++D1F9 CB 23       >			   sla e
  40++D1FB CB 12       >			   rl  d
  41++D1FD 7A                   ld      a,d                         ; a = hi byte after shifting
  42++D1FE E5           		push	hl
  43++D1FF C5           		push	bc
  44++D200 CD CA D1             call    Norm256mulAdivQ
  45++D203              		;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  46++D203 79                   ld      a,c                         ; BFRDIV returns R also in l reg
  47++D204 C1           		pop		bc
  48++D205 E1           		pop		hl							; bc gets wrecked by BFRDIV
  49++D206 77                   ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  50++D207 2B                   dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  51++D208 10 EC                djnz    LL21Loop                    ; loop from 2zLo through to 0xLo
  52++D20A C9                   ret
  53++D20B
# file closed: ./Universe/Ships/NormaliseTransMat.asm
 773+ D20B              ;-LL91---------------------------------------------------------------------------------------------------
 774+ D20B
 775+ D20B              ; Now we have
 776+ D20B              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 777+ D20B              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 778+ D20B              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 779+ D20B              ;
 780+ D20B              ;--------------------------------------------------------------------------------------------------------
 781+ D20B                                      include "Universe/Ships/InverseXX16.asm"
# file opened: ./Universe/Ships/InverseXX16.asm
   1++D20B              ; TESTEDOK
   2++D20B
   3++D20B              ;ScaleOrientationXX16:                       ; DEBUG TODO will combine with inverse later
   4++D20B              ;        ld      a,(XX17)
   5++D20B              ;        ld      ixl,a
   6++D20B              ;        ld      ixh,9
   7++D20B              ;        ld      hl,UBnkTransInv0x
   8++D20B              ;        ld      a,(hl)
   9++D20B              ;ScaleNode:
  10++D20B              ;        ld      b,ixl
  11++D20B              ;ScaleNodeLoop:
  12++D20B              ;        sla      a
  13++D20B              ;        djnz    ScaleNodeLoop
  14++D20B              ;        ld      (hl),a
  15++D20B              ;        inc     hl
  16++D20B              ;        inc     hl
  17++D20B              ;        dec     ixh
  18++D20B              ;        jr      nz,ScaleNode
  19++D20B              ;        ret
  20++D20B
  21++D20B
  22++D20B              InverseXX16:								; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  23++D20B              ; we coudl combine this with move to transmat later as an optimisation
  24++D20B              ; INPUT - All Scaled
  25++D20B              ;  They transmat has already been put into side, roof nose order
  26++D20B              ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  27++D20B              ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  28++D20B              ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  29++D20B              ; OUTPUT
  30++D20B              ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  31++D20B              ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  32++D20B              ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  33++D20B              ; First all side values become compoment 0 of each vector
  34++D20B 2A 3E C0             ld      hl,(UBnkTransmatSidevX)     ;
  35++D20E ED 5B 44 C0          ld      de,(UBnkTransmatRoofvX)     ;
  36++D212 ED 4B 4A C0          ld      bc,(UBnkTransmatNosevX)     ;
  37++D216 22 56 C0             ld      (UbnkTransInvRow0x0),hl     ;
  38++D219 ED 53 58 C0          ld      (UbnkTransInvRow0x1),de     ;
  39++D21D ED 43 5A C0          ld      (UbnkTransInvRow0x2),bc     ;
  40++D221 2A 40 C0             ld      hl,(UBnkTransmatSidevY)     ;
  41++D224 ED 5B 46 C0          ld      de,(UBnkTransmatRoofvY)     ;
  42++D228 ED 4B 4C C0          ld      bc,(UBnkTransmatNosevY)     ;
  43++D22C 22 5E C0             ld      (UbnkTransInvRow1y0),hl     ;
  44++D22F ED 53 60 C0          ld      (UbnkTransInvRow1y1),de     ;
  45++D233 ED 43 62 C0          ld      (UbnkTransInvRow1y2),bc     ;
  46++D237 2A 42 C0             ld      hl,(UBnkTransmatSidevZ)     ;
  47++D23A ED 5B 48 C0          ld      de,(UBnkTransmatRoofvZ)     ;
  48++D23E ED 4B 4E C0          ld      bc,(UBnkTransmatNosevZ)     ;
  49++D242 22 66 C0             ld      (UbnkTransInvRow2z0),hl     ;
  50++D245 ED 53 68 C0          ld      (UbnkTransInvRow2z1),de     ;
  51++D249 ED 43 6A C0          ld      (UbnkTransInvRow2z2),bc     ;
  52++D24D C9                   ret
  53++D24E
  54++D24E
# file closed: ./Universe/Ships/InverseXX16.asm
 782+ D24E              ;--------------------------------------------------------------------------------------------------------
 783+ D24E              ;--------------------------------------------------------------------------------------------------------
 784+ D24E              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 785+ D24E              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 786+ D24E              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 787+ D24E              ; Returns
 788+ D24E              ;
 789+ D24E              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 790+ D24E              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 791+ D24E              ;
 792+ D24E              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 793+ D24E              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 794+ D24E              ;
 795+ D24E              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 796+ D24E              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 797+ D24E              XXCURRENTN0equN1byN2div256: MACRO param1, param2, param3
 798+ D24E ~                                    ld      c,0
 799+ D24E ~                                    ld      a,param3                      ;
 800+ D24E ~                                    bit     7,a
 801+ D24E ~                                    jr      z,.val2Pos
 802+ D24E ~            ;HandleSignebits
 803+ D24E ~                                    neg
 804+ D24E ~                                    ld      c,$80
 805+ D24E ~            .val2Pos:               ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 806+ D24E ~                                    ld      a,param2                        ; A = XX16 element
 807+ D24E ~                                    bit     7,a
 808+ D24E ~                                    jr      z,.val1Pos
 809+ D24E ~            ;HandleSignebits
 810+ D24E ~                                    neg
 811+ D24E ~                                    ld      b,a
 812+ D24E ~                                    ld      a,c
 813+ D24E ~                                    xor     $80
 814+ D24E ~                                    ld      c,a
 815+ D24E ~                                    ld      a,b
 816+ D24E ~            .val1Pos:               ld      d,a
 817+ D24E ~            ;AequAmulQdiv256:
 818+ D24E ~                                    mul
 819+ D24E ~                                    ld      a,c
 820+ D24E ~                                    bit     7,a
 821+ D24E ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 822+ D24E ~                                    jr      z,.resultPos
 823+ D24E ~                                    neg
 824+ D24E ~            .resultPos:             ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 825+ D24E                                      ENDM
 826+ D24E
 827+ D24E
 828+ D24E               ; TESTEDOK
 829+ D24E              XX12DotOneRow:
 830+ D24E              XX12CalcX:              N0equN1byN2div256 varT, (hl), (UBnkXScaled)       ; T = (hl) * regXX15fx /256
 830+ D24E 3A 83 C0    >                        ld      a,(UBnkXScaled)                        ;
 830+ D251 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 830+ D252 7E          >                        ld      a,(hl)                        ; A = XX16 element
 830+ D253 57          >                        ld      d,a
 830+ D254 ED 30       >                        mul
 830+ D256 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 830+ D257 32 6C 9A    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 831+ D25A 23                                   inc     hl                                  ; move to sign byte
 832+ D25B              XX12CalcXSign:          AequN1xorN2 UBnkXScaledSign,(hl)             ;
 832+ D25B 3A 84 C0    >                        ld      a,(UBnkXScaledSign)
 832+ D25E AE          >                        xor     (hl)
 833+ D25F 32 52 9A                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 834+ D262 23                                   inc     hl
 835+ D263              XX12CalcY:              N0equN1byN2div256 varQ, (hl),(UBnkYScaled)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 835+ D263 3A 85 C0    >                        ld      a,(UBnkYScaled)                        ;
 835+ D266 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 835+ D267 7E          >                        ld      a,(hl)                        ; A = XX16 element
 835+ D268 57          >                        ld      d,a
 835+ D269 ED 30       >                        mul
 835+ D26B 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 835+ D26C 32 50 9A    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 836+ D26F                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 836+ D26F 3A 6C 9A    >                        ld       a,(varT)
 836+ D272 32 51 9A    >                        ld       (varR),a
 837+ D275 23                                   inc     hl
 838+ D276                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 838+ D276 3A 86 C0    >                        ld      a,(UBnkYScaledSign)
 838+ D279 AE          >                        xor     (hl)
 839+ D27A              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 840+ D27A E5           STequSRplusAQ           push    hl
 841+ D27B CD 70 B1                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 842+ D27E E1                                   pop     hl
 843+ D27F 32 6C 9A                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 844+ D282 23                                   inc     hl
 845+ D283              XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(UBnkZScaled)       ; Q = |sidev_z| * z_lo / 256
 845+ D283 3A 87 C0    >                        ld      a,(UBnkZScaled)                        ;
 845+ D286 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 845+ D287 7E          >                        ld      a,(hl)                        ; A = XX16 element
 845+ D288 57          >                        ld      d,a
 845+ D289 ED 30       >                        mul
 845+ D28B 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 845+ D28C 32 50 9A    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 846+ D28F                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 846+ D28F 3A 6C 9A    >                        ld       a,(varT)
 846+ D292 32 51 9A    >                        ld       (varR),a
 847+ D295 23                                   inc     hl
 848+ D296                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 848+ D296 3A 88 C0    >                        ld      a,(UBnkZScaledSign)
 848+ D299 AE          >                        xor     (hl)
 849+ D29A              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 850+ D29A CD 70 B1                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 851+ D29D              ; Now we exit with A = result S = Sign
 852+ D29D C9                                   ret
 853+ D29E
 854+ D29E
 855+ D29E              ;-- LL51---------------------------------------------------------------------------------------------------------------------------
 856+ D29E              ;TESTED OK
 857+ D29E              XX12EquXX15DotProductXX16:
 858+ D29E              XX12EquScaleDotOrientation:                         ; .LL51 \ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z
 859+ D29E 01 00 00                             ld      bc,0                                ; LDX, LDY 0
 860+ D2A1 21 3E C0                             ld      hl,UBnkTransmatSidevX
 861+ D2A4 CD 4E D2                             call    XX12DotOneRow
 862+ D2A7 32 89 C0                             ld      (UBnkXX12xLo),a
 863+ D2AA 3A 52 9A                             ld      a,(varS)
 864+ D2AD 32 8A C0                             ld      (UBnkXX12xSign),a
 865+ D2B0 21 44 C0                             ld      hl,UBnkTransmatRoofvX
 866+ D2B3 CD 4E D2                             call    XX12DotOneRow
 867+ D2B6 32 8B C0                             ld      (UBnkXX12yLo),a
 868+ D2B9 3A 52 9A                             ld      a,(varS)
 869+ D2BC 32 8C C0                             ld      (UBnkXX12ySign),a
 870+ D2BF 21 4A C0                             ld      hl,UBnkTransmatNosevX
 871+ D2C2 CD 4E D2                             call    XX12DotOneRow
 872+ D2C5 32 8D C0                             ld      (UBnkXX12zLo),a
 873+ D2C8 3A 52 9A                             ld      a,(varS)
 874+ D2CB 32 8E C0                             ld      (UBnkXX12zSign),a
 875+ D2CE C9                                   ret
 876+ D2CF              ;--------------------------------------------------------------------------------------------------------
 877+ D2CF                                      include "./Universe/Ships/CopyXX12ScaledToXX18.asm"
# file opened: ././Universe/Ships/CopyXX12ScaledToXX18.asm
   1++D2CF              CopyXX12ScaledToXX18:
   2++D2CF              CopyResultToDrawCam:
   3++D2CF                      ldCopyByte XX12         ,XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++D2CF 3A 89 C0    >                        ld       a,(XX12)
   3++D2D2 32 77 C0    >                        ld       (XX18),a
   4++D2D5                      ldCopyByte XX12+1       ,XX18+2           ; XX12+1 => XX18+2
   4++D2D5 3A 8A C0    >                        ld       a,(XX12+1)
   4++D2D8 32 79 C0    >                        ld       (XX18+2),a
   5++D2DB                      ldCopyByte XX12+2       ,XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++D2DB 3A 8B C0    >                        ld       a,(XX12+2)
   5++D2DE 32 7A C0    >                        ld       (XX18+3),a
   6++D2E1                      ldCopyByte XX12+3       ,XX18+5           ; XX12+3 => XX18+5
   6++D2E1 3A 8C C0    >                        ld       a,(XX12+3)
   6++D2E4 32 7C C0    >                        ld       (XX18+5),a
   7++D2E7                      ldCopyByte XX12+4       ,XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++D2E7 3A 8D C0    >                        ld       a,(XX12+4)
   7++D2EA 32 7D C0    >                        ld       (XX18+6),a
   8++D2ED                      ldCopyByte XX12+5       ,XX18+8           ; XX12+5 => XX18+8
   8++D2ED 3A 8E C0    >                        ld       a,(XX12+5)
   8++D2F0 32 7F C0    >                        ld       (XX18+8),a
   9++D2F3 C9                   ret
  10++D2F4
# file closed: ././Universe/Ships/CopyXX12ScaledToXX18.asm
 878+ D2F4                                      include "./Universe/Ships/CopyXX12toXX15.asm"
# file opened: ././Universe/Ships/CopyXX12toXX15.asm
   1++D2F4              CopyXX12toXX15:         ldCopyByte  UBnkXX12xLo     ,UBnkXScaled        ; xlo
   1++D2F4 3A 89 C0    >                        ld       a,(UBnkXX12xLo)
   1++D2F7 32 83 C0    >                        ld       (UBnkXScaled),a
   2++D2FA                                      ldCopyByte  UBnkXX12xSign   ,UBnkXScaledSign    ; xsg
   2++D2FA 3A 8A C0    >                        ld       a,(UBnkXX12xSign)
   2++D2FD 32 84 C0    >                        ld       (UBnkXScaledSign),a
   3++D300                                      ldCopyByte  UBnkXX12yLo     ,UBnkYScaled        ; xlo
   3++D300 3A 8B C0    >                        ld       a,(UBnkXX12yLo)
   3++D303 32 85 C0    >                        ld       (UBnkYScaled),a
   4++D306                                      ldCopyByte  UBnkXX12ySign   ,UBnkYScaledSign    ; xsg
   4++D306 3A 8C C0    >                        ld       a,(UBnkXX12ySign)
   4++D309 32 86 C0    >                        ld       (UBnkYScaledSign),a
   5++D30C                                      ldCopyByte  UBnkXX12zLo     ,UBnkZScaled        ; xlo
   5++D30C 3A 8D C0    >                        ld       a,(UBnkXX12zLo)
   5++D30F 32 87 C0    >                        ld       (UBnkZScaled),a
   6++D312                                      ldCopyByte  UBnkXX12zSign   ,UBnkZScaledSign    ; xsg
   6++D312 3A 8E C0    >                        ld       a,(UBnkXX12zSign)
   6++D315 32 88 C0    >                        ld       (UBnkZScaledSign),a
   7++D318 C9                                   ret
   8++D319
# file closed: ././Universe/Ships/CopyXX12toXX15.asm
 879+ D319                                      include "./Universe/Ships/CopyXX18toXX15.asm"
# file opened: ././Universe/Ships/CopyXX18toXX15.asm
   1++D319              CopyXX18toXX15:
   2++D319              CopyDrawCamToScaled:
   3++D319                      ldCopyByte  UBnkDrawCam0xLo ,UBnkXScaled        ; xlo
   3++D319 3A 77 C0    >                        ld       a,(UBnkDrawCam0xLo)
   3++D31C 32 83 C0    >                        ld       (UBnkXScaled),a
   4++D31F                      ldCopyByte  UBnkDrawCam0xSgn,UBnkXScaledSign    ; xsg
   4++D31F 3A 79 C0    >                        ld       a,(UBnkDrawCam0xSgn)
   4++D322 32 84 C0    >                        ld       (UBnkXScaledSign),a
   5++D325                      ldCopyByte  UBnkDrawCam0yLo ,UBnkYScaled        ; xlo
   5++D325 3A 7A C0    >                        ld       a,(UBnkDrawCam0yLo)
   5++D328 32 85 C0    >                        ld       (UBnkYScaled),a
   6++D32B                      ldCopyByte  UBnkDrawCam0ySgn,UBnkYScaledSign    ; xsg
   6++D32B 3A 7C C0    >                        ld       a,(UBnkDrawCam0ySgn)
   6++D32E 32 86 C0    >                        ld       (UBnkYScaledSign),a
   7++D331                      ldCopyByte  UBnkDrawCam0zLo ,UBnkZScaled        ; xlo
   7++D331 3A 7D C0    >                        ld       a,(UBnkDrawCam0zLo)
   7++D334 32 87 C0    >                        ld       (UBnkZScaled),a
   8++D337                      ldCopyByte  UBnkDrawCam0zSgn,UBnkZScaledSign    ; xsg
   8++D337 3A 7F C0    >                        ld       a,(UBnkDrawCam0zSgn)
   8++D33A 32 88 C0    >                        ld       (UBnkZScaledSign),a
   9++D33D C9                   ret
  10++D33E
# file closed: ././Universe/Ships/CopyXX18toXX15.asm
 880+ D33E                                      include "./Universe/Ships/CopyXX18ScaledToXX15.asm"
# file opened: ././Universe/Ships/CopyXX18ScaledToXX15.asm
   1++D33E 21 0C C0     LoadCraftToCamera:      ld      hl,UBnKxlo
   2++D341 11 77 C0                             ld      de,UBnkDrawCam0xLo
   3++D344                                      NineLDIInstrunctions                ; transfer 9 bytes
   3++D344 ED A0       >		                ldi
   3++D346 ED A0       >		                ldi
   3++D348 ED A0       >		                ldi
   3++D34A ED A0       >		                ldi
   3++D34C ED A0       >		                ldi
   3++D34E ED A0       >		                ldi
   3++D350 ED A0       >		                ldi
   3++D352 ED A0       >		                ldi
   3++D354 ED A0       >		                ldi
   4++D356 C9                                   ret
   5++D357
   6++D357              CopyCameraToXX15Signed:
   7++D357 2A 77 C0             ld  hl,(UBnkDrawCam0xLo)
   8++D35A 3A 79 C0             ld  a,(UBnkDrawCam0xSgn)
   9++D35D B4                   or  h
  10++D35E 67                   ld  h,a
  11++D35F 22 83 C0             ld  (UBnkXScaled),hl
  12++D362 2A 7A C0             ld  hl,(UBnkDrawCam0yLo)
  13++D365 3A 7C C0             ld  a,(UBnkDrawCam0ySgn)
  14++D368 B4                   or  h
  15++D369 67                   ld  h,a
  16++D36A 22 85 C0             ld  (UBnkYScaled),hl
  17++D36D 2A 7D C0             ld  hl,(UBnkDrawCam0zLo)
  18++D370 3A 7F C0             ld  a,(UBnkDrawCam0zSgn)
  19++D373 B4                   or  h
  20++D374 67                   ld  h,a
  21++D375 22 87 C0             ld  (UBnkZScaled),hl
  22++D378 C9                   ret
  23++D379
  24++D379              CopyXX18ScaledToXX15:
  25++D379              CopyDrawCamToScaledMatrix:
  26++D379                      ldCopyByte  UBnkDrawCam0zSgn, UBnkZScaledSign   ; XX18+8 => XX15+5
  26++D379 3A 7F C0    >                        ld       a,(UBnkDrawCam0zSgn)
  26++D37C 32 88 C0    >                        ld       (UBnkZScaledSign),a
  27++D37F                      ldCopyByte  UBnkDrawCam0xLo,  UBnkXScaled       ; XX18+0 => XX15+0
  27++D37F 3A 77 C0    >                        ld       a,(UBnkDrawCam0xLo)
  27++D382 32 83 C0    >                        ld       (UBnkXScaled),a
  28++D385                      ldCopyByte  UBnkDrawCam0xSgn, UBnkXScaledSign   ; XX18+2 => XX15+1
  28++D385 3A 79 C0    >                        ld       a,(UBnkDrawCam0xSgn)
  28++D388 32 84 C0    >                        ld       (UBnkXScaledSign),a
  29++D38B                      ldCopyByte  UBnkDrawCam0yLo,  UBnkYScaled       ; XX18+3 => XX15+2
  29++D38B 3A 7A C0    >                        ld       a,(UBnkDrawCam0yLo)
  29++D38E 32 85 C0    >                        ld       (UBnkYScaled),a
  30++D391                      ldCopyByte  UBnkDrawCam0ySgn, UBnkYScaledSign   ; XX18+5 => XX15+3
  30++D391 3A 7C C0    >                        ld       a,(UBnkDrawCam0ySgn)
  30++D394 32 86 C0    >                        ld       (UBnkYScaledSign),a
  31++D397                      ldCopyByte  UBnkDrawCam0zLo,  UBnkZScaled       ; XX18+6 => XX15+4
  31++D397 3A 7D C0    >                        ld       a,(UBnkDrawCam0zLo)
  31++D39A 32 87 C0    >                        ld       (UBnkZScaled),a
  32++D39D C9                   ret
  33++D39E
  34++D39E              CopyXX15ToXX18Scaled:
  35++D39E              CopyScaledMatrixToDrawCam:
  36++D39E                      ldCopyByte UBnkZScaledSign,   UBnkDrawCam0zSgn  ; XX15+5 => XX18+8
  36++D39E 3A 88 C0    >                        ld       a,(UBnkZScaledSign)
  36++D3A1 32 7F C0    >                        ld       (UBnkDrawCam0zSgn),a
  37++D3A4                      ldCopyByte UBnkXScaled,       UBnkDrawCam0xLo   ; XX15+0 => XX18+0
  37++D3A4 3A 83 C0    >                        ld       a,(UBnkXScaled)
  37++D3A7 32 77 C0    >                        ld       (UBnkDrawCam0xLo),a
  38++D3AA                      ldCopyByte UBnkXScaledSign,   UBnkDrawCam0xSgn  ; XX15+1 => XX18+2
  38++D3AA 3A 84 C0    >                        ld       a,(UBnkXScaledSign)
  38++D3AD 32 79 C0    >                        ld       (UBnkDrawCam0xSgn),a
  39++D3B0                      ldCopyByte UBnkYScaled,       UBnkDrawCam0yLo   ; XX15+2 => XX18+3
  39++D3B0 3A 85 C0    >                        ld       a,(UBnkYScaled)
  39++D3B3 32 7A C0    >                        ld       (UBnkDrawCam0yLo),a
  40++D3B6                      ldCopyByte UBnkYScaledSign,   UBnkDrawCam0ySgn  ; XX15+3 => XX18+5
  40++D3B6 3A 86 C0    >                        ld       a,(UBnkYScaledSign)
  40++D3B9 32 7C C0    >                        ld       (UBnkDrawCam0ySgn),a
  41++D3BC                      ldCopyByte UBnkZScaled,       UBnkDrawCam0zLo   ; XX15+4 => XX18+6
  41++D3BC 3A 87 C0    >                        ld       a,(UBnkZScaled)
  41++D3BF 32 7D C0    >                        ld       (UBnkDrawCam0zLo),a
  42++D3C2 C9                   ret
  43++D3C3
  44++D3C3
  45++D3C3              XX15EquXX15AddXX18:
  46++D3C3              LL94Z:
  47++D3C3 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  48++D3C5 16 00                ld      d,0                                                     ;
  49++D3C7 3A 87 C0             ld      a,(UBnkZScaled)                                         ;
  50++D3CA 6F                   ld      l,a                                                     ;
  51++D3CB 3A 88 C0             ld      a,(UBnkZScaledSign)                                     ;
  52++D3CE 47                   ld      b,a                                                     ;
  53++D3CF 3A 7D C0             ld      a,(UBnkDrawCam0zLo)                                     ;
  54++D3D2 5F                   ld      e,a                                                     ;
  55++D3D3 3A 7F C0             ld      a,(UBnkDrawCam0zSgn)                                    ;
  56++D3D6 4F                   ld      c,a                                                     ;
  57++D3D7 CD 52 B0             call    ADDHLDESignBC                                           ;
  58++D3DA 47                   ld      b,a                                                     ;
  59++D3DB 7C                   ld      a,h                                                     ;
  60++D3DC 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  61++D3DD 32 88 C0             ld      (UBnkZScaledSign),a                                     ;
  62++D3E0 7D                   ld      a,l                                                     ;
  63++D3E1 32 87 C0             ld      (UBnkZScaled),a                                         ;           endif
  64++D3E4              LL94X:
  65++D3E4 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  66++D3E6 16 00                ld      d,0                                                     ;
  67++D3E8 3A 83 C0             ld      a,(UBnkXScaled)                                         ;
  68++D3EB 6F                   ld      l,a                                                     ;
  69++D3EC 3A 84 C0             ld      a,(UBnkXScaledSign)                                     ;
  70++D3EF 47                   ld      b,a                                                     ;
  71++D3F0 3A 77 C0             ld      a,(UBnkDrawCam0xLo)                                     ;
  72++D3F3 5F                   ld      e,a                                                     ;
  73++D3F4 3A 79 C0             ld      a,(UBnkDrawCam0xSgn)                                    ;
  74++D3F7 4F                   ld      c,a                                                     ;
  75++D3F8 CD 52 B0             call    ADDHLDESignBC                                           ;
  76++D3FB 47                   ld      b,a                                                     ;
  77++D3FC 7C                   ld      a,h                                                     ;
  78++D3FD 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  79++D3FE 32 84 C0             ld      (UBnkXScaledSign),a                                     ;
  80++D401 7D                   ld      a,l                                                     ;
  81++D402 32 83 C0             ld      (UBnkXScaled),a                                         ;           endif
  82++D405              LL94Y:
  83++D405 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  84++D407 16 00                ld      d,0                                                     ;
  85++D409 3A 85 C0             ld      a,(UBnkYScaled)                                         ;
  86++D40C 6F                   ld      l,a                                                     ;
  87++D40D 3A 86 C0             ld      a,(UBnkYScaledSign)                                     ;
  88++D410 47                   ld      b,a                                                     ;
  89++D411 3A 7A C0             ld      a,(UBnkDrawCam0yLo)                                     ;
  90++D414 5F                   ld      e,a                                                     ;
  91++D415 3A 7C C0             ld      a,(UBnkDrawCam0ySgn)                                    ;
  92++D418 4F                   ld      c,a                                                     ;
  93++D419 CD 52 B0             call    ADDHLDESignBC                                           ;
  94++D41C 47                   ld      b,a                                                     ;
  95++D41D 7C                   ld      a,h                                                     ;
  96++D41E 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  97++D41F 32 86 C0             ld      (UBnkYScaledSign),a                                     ;
  98++D422 7D                   ld      a,l                                                     ;
  99++D423 32 85 C0             ld      (UBnkYScaled),a                                         ;
 100++D426 C9                   ret
 101++D427
# file closed: ././Universe/Ships/CopyXX18ScaledToXX15.asm
 881+ D427                                      include "./Universe/Ships/CopyXX12ToScaled.asm"
# file opened: ././Universe/Ships/CopyXX12ToScaled.asm
   1++D427              CopyXX12ToScaled:
   2++D427              CopyResultToScaled:
   3++D427                      ldCopyByte  XX12+0,UBnkXScaled      ; xnormal lo
   3++D427 3A 89 C0    >                        ld       a,(XX12+0)
   3++D42A 32 83 C0    >                        ld       (UBnkXScaled),a
   4++D42D                      ldCopyByte  XX12+2,UBnkYScaled      ; ynormal lo
   4++D42D 3A 8B C0    >                        ld       a,(XX12+2)
   4++D430 32 85 C0    >                        ld       (UBnkYScaled),a
   5++D433                      ldCopyByte  XX12+4,UBnkZScaled      ; znormal lo and leaves a holding zscaled normal
   5++D433 3A 8D C0    >                        ld       a,(XX12+4)
   5++D436 32 87 C0    >                        ld       (UBnkZScaled),a
   6++D439 C9                   ret
   7++D43A
# file closed: ././Universe/Ships/CopyXX12ToScaled.asm
 882+ D43A              ;--------------------------------------------------------------------------------------------------------
 883+ D43A                                      include "./Maths/Utilities/DotProductXX12XX15.asm"
# file opened: ././Maths/Utilities/DotProductXX12XX15.asm
   1++D43A              ;;; Q = XX12 xLo ,A = XX15 xLo
   2++D43A              ;;; T = A * Q/256 Usgined  (FMLTU)
   3++D43A              ;;; S = XX12 XSign Xor XX15 XSign
   4++D43A              ;;; Q = XX12 Ynormal Lo, A = XX15+2 (y lo)
   5++D43A              ;;; Q = A * Q/256 Usigned (FMLTI)
   6++D43A              ;;; R = T
   7++D43A              ;;; A = XX12+3 (ySign) Xor XX15+3 (ySign)
   8++D43A              ;;; T = BADD s(A) = R + Q(SA) (xdot + ydot)
   9++D43A              ;;; Q = XX12+4 (znormal lo) A = XX15+4 z lo
  10++D43A              ;;; Q = A * Q /256 usigned (zdot)
  11++D43A              ;;; R = T
  12++D43A              ;;; A - XX15+ 5 Zsign Xor XX12+5 Z Sign
  13++D43A
  14++D43A
  15++D43A
  16++D43A
  17++D43A
  18++D43A              MacroAequDxEdiv256usgn:	MACRO
  19++D43A ~            						mul
  20++D43A ~            						ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  21++D43A              						ENDM
  22++D43A              DotProductXX12XX15:
  23++D43A 3A 89 C0             ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  24++D43D                      JumpIfAIsZero dotxskipzero
  24++D43D A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  24++D43E CA 5B D4    >                        jp	z, dotxskipzero
  25++D441 5F                   ld          e,a
  26++D442 3A 83 C0             ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  27++D445 57                   ld          d,a                     ; de = xx12 x signed
  28++D446                      JumpIfAIsZero dotxskipzero
  28++D446 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  28++D447 CA 5B D4    >                        jp	z, dotxskipzero
  29++D44A ED 30        		mul
  30++D44C 42                   ld          b,d                     ; b = result
  31++D44D 3A 8A C0             ld          a,(UBnkXX12xSign)
  32++D450 21 84 C0             ld          hl,UBnkXScaledSign
  33++D453 AE                   xor         (hl)
  34++D454 E6 80                and         $80                     ; so sign bit only
  35++D456 FD 67                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
  36++D458 C3 5F D4             jp          dotmuly
  37++D45B              dotxskipzero:
  38++D45B AF                   xor         a
  39++D45C 47                   ld          b,a
  40++D45D FD 67                ld          iyh,a
  41++D45F              dotmuly:
  42++D45F              ; now we have b = XX12 x &d  norm x signed
  43++D45F 3A 8B C0             ld          a,(UBnkXX12yLo)
  44++D462                      JumpIfAIsZero dotyskipzero
  44++D462 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  44++D463 CA 82 D4    >                        jp	z, dotyskipzero
  45++D466 5F                   ld          e,a
  46++D467 3A 85 C0             ld          a,(UBnkYScaled)         ; XX15+2
  47++D46A                      JumpIfAIsZero dotyskipzero
  47++D46A A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  47++D46B CA 82 D4    >                        jp	z, dotyskipzero
  48++D46E 57                   ld          d,a                     ; de = xx12 x signed
  49++D46F ED 30                mul
  50++D471 4A                   ld          c,d                     ; c = result
  51++D472 DD 69                ld          ixl,c
  52++D474 3A 8C C0             ld          a,(UBnkXX12ySign)       ; A = ysg
  53++D477 21 86 C0             ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
  54++D47A AE                   xor         (hl)                    ; XX15+3
  55++D47B E6 80                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
  56++D47D DD 67                ld          ixh,a
  57++D47F C3 86 D4             jp          dotaddxy
  58++D482              dotyskipzero:
  59++D482 AF                   xor         a
  60++D483 4F                   ld          c,a
  61++D484 DD 67                ld          ixh,a
  62++D486              dotaddxy:
  63++D486              ; Optimise later as this is 16 bit
  64++D486 26 00                ld          h,0                     ;
  65++D488 68                   ld          l,b                     ; hl = xlo + x scaled
  66++D489 16 00                ld          d,0                     ;
  67++D48B 59                   ld          e,c                     ; de = ylo + yscaled
  68++D48C FD 44                ld          b,iyh                   ; b = sign of xlo + xscaled
  69++D48E 4F                   ld          c,a                     ; c = sign of ylo + yscaled
  70++D48F CD 52 B0             call ADDHLDESignBC                  ; so now hl = result so will push sign to h
  71++D492 47                   ld          b,a                     ; b = resultant sign , hl = add so far
  72++D493 3A 8D C0             ld          a,(UBnkXX12zLo)         ;
  73++D496                      JumpIfAIsZero dotzskipzero
  73++D496 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  73++D497 CA BC D4    >                        jp	z, dotzskipzero
  74++D49A 5F                   ld          e,a                     ;
  75++D49B 3A 87 C0             ld          a,(UBnkZScaled)         ;
  76++D49E                      JumpIfAIsZero dotzskipzero
  76++D49E A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  76++D49F CA BC D4    >                        jp	z, dotzskipzero
  77++D4A2 57                   ld          d,a
  78++D4A3 ED 30                mul
  79++D4A5 E5                   push        hl                      ; save prev result
  80++D4A6 3A 88 C0             ld          a,(UBnkZScaledSign)
  81++D4A9 21 8E C0             ld          hl, UBnkXX12zSign       ; XX15+5
  82++D4AC AE                   xor         (hl)                    ; hi sign
  83++D4AD E6 80                and         $80                     ; a = sign of multiply
  84++D4AF 4F                   ld          c,a                     ; c = sign of z lo & z scaled
  85++D4B0 E1                   pop         hl
  86++D4B1 5A                   ld          e,d
  87++D4B2 16 00                ld          d,0
  88++D4B4 CD 52 B0             call ADDHLDESignBC
  89++D4B7 32 52 9A             ld          (varS),a
  90++D4BA 7D                   ld          a,l
  91++D4BB C9                   ret                                 ; returns with A = value, varS = sign
  92++D4BC              dotzskipzero:                               ; if we got here then z was zero so no component so just tidy up from last add
  93++D4BC 78                   ld          a,b
  94++D4BD 32 52 9A             ld          (varS),a
  95++D4C0 7D                   ld          a,l
  96++D4C1 C9                   ret
  97++D4C2              ;;;;       DotProductXX12XX15:
  98++D4C2              ;;;;       ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  99++D4C2              ;;;;       ld          e,a
 100++D4C2              ;;;;       ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
 101++D4C2              ;;;;       ld          d,a                     ; de = xx12 x signed
 102++D4C2              ;;;;		; FMLTU	\ A=A*Q/256unsg using D as A and E as Q
 103++D4C2              ;;;;		mul
 104++D4C2              ;;;;       ld          b,d                     ; b as var T
 105++D4C2              ;;;;       ld          a,(UBnkXX12xSign)
 106++D4C2              ;;;;       ld          hl,UBnkXScaledSign
 107++D4C2              ;;;;       xor         (hl)
 108++D4C2              ;;;;       and         $80                     ; so sign bit only
 109++D4C2              ;;;;       ld          (varS),a                ; we did use c as S \ S	\ x-sign, but we actually need it in varS for BADD
 110++D4C2              ;;;; now we have b = XX12 x & norm x signed
 111++D4C2              ;;;; by here B = xlo & xscaled C = result sign
 112++D4C2              ;;;;       ld          a,(UBnkXX12yLo)
 113++D4C2              ;;;;       ld          e,a
 114++D4C2              ;;;;       ld          a,(UBnkYScaled)         ; XX15+2
 115++D4C2              ;;;;		ld          d,a						; MISSED THIS EARLIER BUG FIX
 116++D4C2              ;;;;       mul
 117++D4C2              ;;;;       ld          a,d
 118++D4C2              ;;;;       ld          (varQ),a                ; Q = Y y-dot
 119++D4C2              ;;;;       ld          a,b                     ; get back T from above held in b
 120++D4C2              ;;;;       ld          (varR),a                ; R= b \ T	\ x-dot
 121++D4C2              ;;;;       ld          a,(UBnkXX12ySign)       ; A = ysg
 122++D4C2              ;;;;       ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
 123++D4C2              ;;;;       xor         (hl)                    ; XX15+3
 124++D4C2              ;;;;       and         $80
 125++D4C2              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 126++D4C2              ;;;;       ld          (varT),a                ; var T	\ xdot+ydot
 127++D4C2              ;;;;       ld          a,(UBnkXX12zLo)         ; use d as  varQ        ; XX12+4	\ znormal lo to varQ
 128++D4C2              ;;;;       ld          e,a                     ; use e as var Q
 129++D4C2              ;;;;       ld          a,(UBnkZScaled)         ;
 130++D4C2              ;;;;       ld          d,a
 131++D4C2              ;;;;       mul
 132++D4C2              ;;;;       ld          a,d
 133++D4C2              ;;;;       ld          (varQ),a                ; Q	\ zdot
 134++D4C2              ;;;;       ldCopyByte  varT,varR               ; copy T to R so R = resutl of previous calc
 135++D4C2              ;;;;       ld          a,(UBnkZScaledSign)
 136++D4C2              ;;;;       ld          hl, UBnkXX12zSign       ; XX15+5
 137++D4C2              ;;;;       xor         (hl)                    ; hi sign
 138++D4C2              ;;;;       and         $80
 139++D4C2              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 140++D4C2              ;;;;       ret                                 ; returns with A = value, varS = sign
 141++D4C2
# file closed: ././Maths/Utilities/DotProductXX12XX15.asm
 884+ D4C2              ;--------------------------------------------------------------------------------------------------------
 885+ D4C2              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
 886+ D4C2                                      include "Universe/Ships/ScaleNormal.asm"
# file opened: ./Universe/Ships/ScaleNormal.asm
   1++D4C2              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
   2++D4C2              ; returns with XX15 scaled by Q but also z scaled in a register
   3++D4C2              ScaleNormal:
   4++D4C2              LL93:
   5++D4C2 3A 57 9A             ld      a,(XX17)                    ; scale--
   6++D4C5 DD 6F        		ld		ixl,a
   7++D4C7 3A 87 C0     		ld		a,(UBnkZScaled)				; needs to be in a just in case we abort early
   8++D4CA DD 2D        		dec		ixl
   9++D4CC F8           		ret		m							; return if q was 0, i.e. no scaling
  10++D4CD              ScaleLoop:
  11++D4CD              LL933:
  12++D4CD 21 83 C0             ld      hl,XX15
  13++D4D0 CB 3E                srl     (hl)                        ; XX15	\ xnormal lo/2 \ LL93+3 \ counter X
  14++D4D2 23                   inc     hl							; looking at XX15 x sign now
  15++D4D3 23                   inc     hl							; looking at XX15 y Lo now
  16++D4D4 CB 3E                srl     (hl)                        ; XX15+2	\ ynormal lo/2
  17++D4D6 23           		inc		hl							; looking at XX15 y sign now
  18++D4D7 23           		inc		hl							; looking at XX15 z Lo now
  19++D4D8 CB 3E        		srl		(hl)
  20++D4DA 7E           		ld		a,(hl)						; znormal lo/2 also into a it came in at the end of LL92
  21++D4DB DD 2D                dec     ixl                         ; reduce scale
  22++D4DD F2 CD D4             jp      p,ScaleLoop                 ; LL93-3 loop to lsr xx15
  23++D4E0 C9                   ret
  24++D4E1
# file closed: ./Universe/Ships/ScaleNormal.asm
 887+ D4E1              ;--------------------------------------------------------------------------------------------------------
 888+ D4E1                                      include "./Universe/Ships/ScaleObjectDistance.asm"
# file opened: ././Universe/Ships/ScaleObjectDistance.asm
   1++D4E1              ScaleObjectDistance:
   2++D4E1              ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3++D4E1 3A 1E C3             ld      a,(QAddr)                   ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4++D4E4 4F                   ld      c,a                         ; c = Q factor for scaling of normals
   5++D4E5              LL90:                                       ; scaling object distance
   6++D4E5 3A 7E C0             ld      a,(UBnkDrawCam0zHi)         ; z_hi
   7++D4E8 47                   ld      b,a                         ; z_hi (yReg)
   8++D4E9                      ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   8++D4E9 A7          >                        and     a
   8++D4EA C8          >                        ret     z
   9++D4EB              LL90Loop:
  10++D4EB              ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  11++D4EB 0C                   inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  12++D4EC                      ShiftMem16Right1 UBnkDrawCam0yLo    ; cam Y /= 2
  12++D4EC 2A 7A C0    >                    ld    hl,(UBnkDrawCam0yLo)
  12++D4EF CB 3C       >                    srl   h
  12++D4F1 CB 1D       >                    rr    l
  12++D4F3 22 7A C0    >                    ld    (UBnkDrawCam0yLo),hl
  13++D4F6                      ShiftMem16Right1 UBnkDrawCam0xLo    ; cam X /= 2
  13++D4F6 2A 77 C0    >                    ld    hl,(UBnkDrawCam0xLo)
  13++D4F9 CB 3C       >                    srl   h
  13++D4FB CB 1D       >                    rr    l
  13++D4FD 22 77 C0    >                    ld    (UBnkDrawCam0xLo),hl
  14++D500                      ShiftMem16Right1 UBnkDrawCam0zLo    ; cam Z /= 2
  14++D500 2A 7D C0    >                    ld    hl,(UBnkDrawCam0zLo)
  14++D503 CB 3C       >                    srl   h
  14++D505 CB 1D       >                    rr    l
  14++D507 22 7D C0    >                    ld    (UBnkDrawCam0zLo),hl
  15++D50A 7C                   ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  16++D50B                      JumpIfAIsNotZero LL90Loop           ; loop until z hi = 0 this gives scalinging in c
  16++D50B FE 00       >                        cp	0
  16++D50D C2 EB D4    >                        jp	nz,LL90Loop
  17++D510 C9                   ret
  18++D511
# file closed: ././Universe/Ships/ScaleObjectDistance.asm
 889+ D511              ;--------------------------------------------------------------------------------------------------------
 890+ D511
 891+ D511              ; Backface cull
 892+ D511              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
 893+ D511              ; normal vector = cross product of ship ccordinates
 894+ D511              ;
 895+ D511
 896+ D511                                      include "./Universe/Ships/CopyFaceToXX15.asm"
# file opened: ././Universe/Ships/CopyFaceToXX15.asm
   1++D511 7E           CopyFaceToXX15:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D512 47                                   ld      b,a                                                    ;;;
   3++D513 E6 80                                and     $80
   4++D515 32 84 C0                             ld      (UBnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D518 78                                   ld      a,b
   6++D519 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D51B 47                                   ld      b,a
   8++D51C E6 80                                and     $80
   9++D51E 32 86 C0                             ld      (UBnkYScaledSign),a           ;                                                                                      ;;;
  10++D521 78                                   ld      a,b
  11++D522 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D524 E6 80                                and     $80
  13++D526 32 88 C0                             ld      (UBnkZScaledSign),a           ;                                                                                      ;;;
  14++D529 23                                   inc     hl                          ; move to X ccord
  15++D52A 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D52B 32 83 C0                             ld      (UBnkXScaled),a                                                                                                    ;;;
  17++D52E 23                                   inc     hl                                                                                                                 ;;;
  18++D52F 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D530 32 85 C0                             ld      (UBnkYScaled),a                                                                                                    ;;;
  20++D533 23                                   inc     hl                                                                                                                 ;;;
  21++D534 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D535 32 87 C0                             ld      (UBnkZScaled),a
  23++D538 C9                                   ret
  24++D539
# file closed: ././Universe/Ships/CopyFaceToXX15.asm
 897+ D539                                      include "./Universe/Ships/CopyFaceToXX12.asm"
# file opened: ././Universe/Ships/CopyFaceToXX12.asm
   1++D539 7E           CopyFaceToXX12:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D53A 47                                   ld      b,a                         ; save sign bits to b
   3++D53B E6 80                                and     $80
   4++D53D 32 8A C0                             ld      (UBnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D540 78                                   ld      a,b
   6++D541 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D543 47                                   ld      b,a
   8++D544 E6 80                                and     $80
   9++D546 32 8C C0                             ld      (UBnkXX12ySign),a           ;                                                                                      ;;;
  10++D549 78                                   ld      a,b
  11++D54A CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D54C E6 80                                and     $80
  13++D54E 32 8E C0                             ld      (UBnkXX12zSign),a           ;                                                                                      ;;;
  14++D551 23                                   inc     hl                          ; move to X ccord
  15++D552 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D553 32 89 C0                             ld      (UBnkXX12xLo),a                                                                                                    ;;;
  17++D556 23                                   inc     hl                                                                                                                 ;;;
  18++D557 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D558 32 8B C0                             ld      (UBnkXX12yLo),a                                                                                                    ;;;
  20++D55B 23                                   inc     hl                                                                                                                 ;;;
  21++D55C 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D55D 32 8D C0                             ld      (UBnkXX12zLo),a
  23++D560 C9                                   ret
  24++D561
# file closed: ././Universe/Ships/CopyFaceToXX12.asm
 898+ D561              ;--------------------------------------------------------------
 899+ D561              ; Original loginc in EE29 (LL9 4 of 12)
 900+ D561              ; Enters with XX4 = z distnace scaled to 1 .. 31
 901+ D561              ; get number of faces * 4      FaceCntX4
 902+ D561              ; return if no faces
 903+ D561              ; get Face Normal scale factor FaceScale (XX17)
 904+ D561              ; get ship pos z hi     (XX18)
 905+ D561              ; While Z hi <> 0
 906+ D561              ;    FaceScale = FaceScale + 1           (XX17)
 907+ D561              ;    Ship pos y = ship pos y / 2         (XX18)
 908+ D561              ;    ship pos x = ship pos x / 2         (XX18)
 909+ D561              ;    ship pos z = ship pos z / 2         (XX18)
 910+ D561              ; Loop
 911+ D561              ; Copy Ship Pos (XX18) to Scaled         (XX15)
 912+ D561              ; Get Dot Product of Scaled (XX15) and XX16 (pre inverted) into XX12
 913+ D561              ; Copy XX12 into XX18
 914+ D561              ; For each face
 915+ D561              ;     Get Face sign and visibility distance byte
 916+ D561              ;     if normal visibility range  < XX4
 917+ D561              ;        Get Face data into XX12
 918+ D561              ;        if FaceScale (XX17) >= 4
 919+ D561              ;            Copy Ship Pos (XX18) to scaled (XX15)                                                                  ::LL143
 920+ D561              ;        else
 921+ D561              ;           Copy FaceScale scaled to X  (XX17)
 922+ D561              ;LabelOverflowLoop:
 923+ D561              ;           Copy FaceData (XX12) to Scaled (XX15)                                                                   ::LL92
 924+ D561              ;           While X >= 0
 925+ D561              ;              X--                                                                                                  ::LL93
 926+ D561              ;              if  x >= 0
 927+ D561              ;                  XX15x = XX15x / 2
 928+ D561              ;                  XX15y = XX15y / 2
 929+ D561              ;                  XX15y = XX15y / 2
 930+ D561              ;           loop
 931+ D561              ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z                                                              ::LL94
 932+ D561              ;           if A > 256 (i.e. was overflow)
 933+ D561              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 934+ D561              ;               X = 1
 935+ D561              ;               Goto LabelOverflowLoop
 936+ D561              ;           else
 937+ D561              ;              Scaled (XX15) Z = AddZ
 938+ D561              ;           endif
 939+ D561              ;           AddX = FaceData (XX12)x +  ShipPos (XX18)x
 940+ D561              ;           if A > 256 (i.e. was overflow)
 941+ D561              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 942+ D561              ;               X = 1
 943+ D561              ;               Goto LabelOverflowLoop
 944+ D561              ;           else
 945+ D561              ;              Scaled (XX15) X = AddX
 946+ D561              ;           endif
 947+ D561              ;           AddY = FaceData (XX12)y +  ShipPos (XX18)y
 948+ D561              ;           if A > 256 (i.e. was overflow)
 949+ D561              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 950+ D561              ;               X = 1
 951+ D561              ;               Goto LabelOverflowLoop
 952+ D561              ;           else
 953+ D561              ;              Scaled (XX15) Y = AddY
 954+ D561              ;           endif
 955+ D561              ;        endif
 956+ D561              ;        calculate dot product XX12.XX15  (XX15x * XX12x /256 + XX15y * XX12y /256 + XX15z * XX12z /256)        ::LL89
 957+ D561              ;        if dot product < 0
 958+ D561              ;           set face visible
 959+ D561              ;        else
 960+ D561              ;           set face invisible
 961+ D561              ;        end if
 962+ D561              ;     else
 963+ D561              ;       Set FaceVisibility to true
 964+ D561              ;     end if
 965+ D561              ; Next Face
 966+ D561
 967+ D561 DD 25        ScaleDownXX15byIXH:     dec     ixh
 968+ D563 F8                                   ret     m
 969+ D564 21 83 C0                             ld      hl,UBnkXScaled
 970+ D567 CB 3E                                srl     (hl)                        ; XX15  \ xnormal lo/2 \ LL93+3 \ counter X
 971+ D569 23                                   inc     hl                          ; looking at XX15 x sign now
 972+ D56A 23                                   inc     hl                          ; looking at XX15 y Lo now
 973+ D56B CB 3E                                srl     (hl)                        ; XX15+2    \ ynormal lo/2
 974+ D56D 23                                   inc     hl                          ; looking at XX15 y sign now
 975+ D56E 23                                   inc     hl                          ; looking at XX15 z Lo now
 976+ D56F CB 3E                                srl     (hl)
 977+ D571 C3 61 D5                             jp      ScaleDownXX15byIXH
 978+ D574 C9                                   ret
 979+ D575
 980+ D575 21 77 C0     DivideXX18By2:          ld      hl,UBnkDrawCam0xLo
 981+ D578 CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 982+ D57A 23                                   inc     hl                          ; looking at XX18 x sign now
 983+ D57B 23                                   inc     hl                          ; looking at XX18 y Lo now
 984+ D57C CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 985+ D57E 23                                   inc     hl                          ; looking at XX18 y sign now
 986+ D57F 23                                   inc     hl                          ; looking at XX18 z Lo now
 987+ D580 CB 3E                                srl     (hl)
 988+ D582 C9                                   ret
 989+ D583
 990+ D583              ;line of sight vector = [x y z] + face normal vector
 991+ D583
 992+ D583              ;               [ [x y z] . sidev + normal_x ]   [ normal_x ]
 993+ D583              ;  visibility = [ [x y z] . roofv + normal_y ] . [ normal_y ]
 994+ D583              ;               [ [x y z] . nosev + normal_z ]   [ normal_z ]
 995+ D583              ;
 996+ D583              ;--------------------------------------------------------------
 997+ D583              ; line of sight (eye outwards dot face normal vector < 0
 998+ D583              ; So lin eof sight = vector from 0,0,0 to ship pos, now we need to consider teh ship's facing
 999+ D583              ; now if we add teh veector for teh normal(times magnitude)) to teh ship position we have the true center of the face
1000+ D583              ; now we can calcualt teh dot product of this caulated vector and teh normal which if < 0 is goot. this means we use rot mat not inverted rotmat.
1001+ D583
1002+ D583              RotateXX15ByTransMatXX16:
1003+ D583 21 3E C0                             ld      hl,UBnkTransmatSidevX               ; process orientation matrix row 0
1004+ D586 CD 7B 91                             call    XX12ProcessOneRow
1005+ D589 47                                   ld      b,a                                 ; get
1006+ D58A 7D                                   ld      a,l
1007+ D58B B0                                   or      b
1008+ D58C 32 8A C0                             ld      (UBnkXX12xSign),a                   ; a = result with sign in bit 7
1009+ D58F 7D                                   ld      a,l
1010+ D590 32 89 C0                             ld      (UBnkXX12xLo),a                     ; that is result done for
1011+ D593
1012+ D593 21 44 C0                             ld      hl,UBnkTransmatRoofvX               ; process orientation matrix row 0
1013+ D596 CD 7B 91                             call    XX12ProcessOneRow
1014+ D599 47                                   ld      b,a                                 ; get
1015+ D59A 7D                                   ld      a,l
1016+ D59B B0                                   or      b
1017+ D59C 32 8C C0                             ld      (UBnkXX12ySign),a                   ; a = result with sign in bit 7
1018+ D59F 7D                                   ld      a,l
1019+ D5A0 32 8B C0                             ld      (UBnkXX12yLo),a                     ; that is result done for
1020+ D5A3
1021+ D5A3 21 4A C0                             ld      hl,UBnkTransmatNosevX               ; process orientation matrix row 0
1022+ D5A6 CD 7B 91                             call    XX12ProcessOneRow
1023+ D5A9 47                                   ld      b,a                                 ; get
1024+ D5AA 7D                                   ld      a,l
1025+ D5AB B0                                   or      b
1026+ D5AC 32 8E C0                             ld      (UBnkXX12zSign),a                   ; a = result with sign in bit 7
1027+ D5AF 7D                                   ld      a,l
1028+ D5B0 32 8D C0                             ld      (UBnkXX12zLo),a                     ; that is result done for
1029+ D5B3 C9                                   ret
1030+ D5B4
1031+ D5B4                  include "./ModelRender/BackfaceCull.asm"
# file opened: ././ModelRender/BackfaceCull.asm
   1++D5B4 00           CurrentNormIdx  DB 0
   2++D5B5              ; SomeFacesVisible:
   3++D5B5              ; EE29:
   4++D5B5
   5++D5B5              ;   Backface cull logic  line of sight vector . face normal vector
   6++D5B5              ;       line of sight vector . face normal vector
   7++D5B5              ;       => line of sight vector = [x y z] + face normal vector
   8++D5B5              ;       Where [x y z] =
   9++D5B5              ;                                               [ [x y z] . sidev ]
  10++D5B5              ;                    projected [x y z] vector = [ [x y z] . roofv ]
  11++D5B5              ;                                               [ [x y z] . nosev ]
  12++D5B5              ;
  13++D5B5              ;   so project the [x y z] vector into the face's normal space
  14++D5B5              ;  line of sight vector = projected [x y z] vector + face normal vector
  15++D5B5              ;                         [ [x y z] . sidev ]   [ normal_x ]
  16++D5B5              ;                       = [ [x y z] . roofv ] + [ normal_y ]
  17++D5B5              ;                         [ [x y z] . nosev ]   [ normal_z ]
  18++D5B5              ;
  19++D5B5              ;                         [ [x y z] . sidev + normal_x ]
  20++D5B5              ;                       = [ [x y z] . roofv + normal_y ]
  21++D5B5              ;                         [ [x y z] . nosev + normal_z ]
  22++D5B5              ;
  23++D5B5              ; so
  24++D5B5              ;              visibility = [ [x y z] . sidev + normal_x ]   [ normal_x ]
  25++D5B5              ;                            [ [x y z] . roofv + normal_y ] . [ normal_y ]
  26++D5B5              ;                           [ [x y z] . nosev + normal_z ]   [ normal_z ]
  27++D5B5              ;
  28++D5B5              ; where face is visible if visibility < 0
  29++D5B5              ;
  30++D5B5              ;   so we set XX15 to [x y z] . sidev
  31++D5B5              ;                     [x y z] . roofv
  32++D5B5              ;                     [x y z] . nosev
  33++D5B5              ;
  34++D5B5
  35++D5B5
  36++D5B5
  37++D5B5 3A 7E C0     ScaleDrawcam:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
  38++D5B8                                      JumpIfAIsZero .ScaleDone            ;
  38++D5B8 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  38++D5B9 CA E6 D5    >                        jp	z, .ScaleDone
  39++D5BC 2A 77 C0                             ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
  40++D5BF ED 5B 7A C0                          ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
  41++D5C3 ED 4B 7D C0                          ld      bc,(UBnkDrawCam0zLo)        ;
  42++D5C7 FD 2C        .ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
  43++D5C9                                      ShiftHLRight1                       ; divide cam position by 2
  43++D5C9 CB 3C       >			   srl h
  43++D5CB CB 1D       >			   rr  l
  44++D5CD                                      ShiftDERight1                       ;
  44++D5CD CB 3A       >			   srl d
  44++D5CF CB 1B       >			   rr  e
  45++D5D1                                      ShiftBCRight1                       ;
  45++D5D1 CB 38       >			   srl b
  45++D5D3 CB 19       >			   rr  c
  46++D5D5 78                                   ld      a,b                         ; loop if not scaled down
  47++D5D6                                      JumpIfAIsNotZero .ScaleNormalLoop     ;
  47++D5D6 FE 00       >                        cp	0
  47++D5D8 C2 C7 D5    >                        jp	nz,.ScaleNormalLoop
  48++D5DB 22 77 C0                             ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
  49++D5DE ED 53 7A C0                          ld      (UBnkDrawCam0yLo),de        ;
  50++D5E2 ED 43 7D C0                          ld      (UBnkDrawCam0zLo),bc        ;
  51++D5E6 FD 7D        .ScaleDone:             ld      a,iyl
  52++D5E8 32 57 9A                             ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
  53++D5EB C9                                   ret
  54++D5EC
  55++D5EC              ;;--BackFaceCull:
  56++D5EC              ;;--;debug:jp debug
  57++D5EC              ;;--; DEBUG  force for now
  58++D5EC              ;;--;                        ld     a,MaxVisibility                 ; max visibility                                               ;;;; default max visibility
  59++D5EC              ;;--;                        ld     (LastNormalVisible),a           ; XX4                                                          ;;;;
  60++D5EC              ;;--;
  61++D5EC              ;;--; DEBUG
  62++D5EC              ;;--                         ReturnIfMemisZero FaceCtX4Addr      ; get number of faces * 4      FaceCntX4 &  return if no faces
  63++D5EC              ;;--                       ; break
  64++D5EC              ;;--                        call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
  65++D5EC              ;;--                        call    ScaleXX16Matrix197               ;#02; Normalise XX16
  66++D5EC              ;;--                        call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
  67++D5EC              ;;--                        call    InverseXX16                      ;#11; Invert rotation matrix
  68++D5EC              ;;--
  69++D5EC              ;;--.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
  70++D5EC              ;;--                        ld      iyl,a                       ; iyl = scale factor
  71++D5EC              ;;--; By this point XX18 = scaled draw cam and iyl = scale factor
  72++D5EC              ;;--                        call    ScaleDrawcam
  73++D5EC              ;;--                        call    CopyDrawCamToScaled
  74++D5EC              ;;--.LL91:                  call    XX12EquNodeDotOrientation  ; xx12 = xx15 . XX16
  75++D5EC              ;;--                        call    CopyXX12ScaledToXX18        ; now xx18 = xx15.xx16
  76++D5EC              ;;--.PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
  77++D5EC              ;;--                        ld      (varV),hl
  78++D5EC              ;;--                        ld      a,(FaceCtX4Addr)                                        ; For each face
  79++D5EC              ;;--                        srl     a                                                       ;
  80++D5EC              ;;--                        srl     a                                                       ;
  81++D5EC              ;;--                        ld      b,a                                                     ;
  82++D5EC              ;;--                        xor     a
  83++D5EC              ;;--                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
  84++D5EC              ;;--ProcessNormalsLoop:     push    hl
  85++D5EC              ;;--                        push    bc
  86++D5EC              ;;--                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
  87++D5EC              ;;--                        and     $1F                                                     ;     if normal visibility range  < XX4
  88++D5EC              ;;--                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
  89++D5EC              ;;--.LL86:                  jp  .LL87 ; force testing of normals
  90++D5EC              ;;--                        jp      .FaceVisible
  91++D5EC              ;;--; This bit needs to be added to force face visible
  92++D5EC              ;;--.LL87:                  call    CopyFaceToXX12
  93++D5EC              ;;--                        ld      a,(XX17)
  94++D5EC              ;;--                        JumpIfALTNusng 4,.LL92
  95++D5EC              ;;--.LL143:                 call    CopyXX18toXX15
  96++D5EC              ;;--                        jp      .LL89
  97++D5EC              ;;--.Ovflw:                 ld      a,(XX18)
  98++D5EC              ;;--                        srl     a
  99++D5EC              ;;--                        ld      (XX18),a
 100++D5EC              ;;--                        ld      a,(XX18+6)
 101++D5EC              ;;--                        srl     a
 102++D5EC              ;;--                        ld      (XX18+6),a
 103++D5EC              ;;--                        ld      a,(XX18+3)
 104++D5EC              ;;--                        srl     a
 105++D5EC              ;;--                        ld      (XX18+3),a
 106++D5EC              ;;--                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 107++D5EC              ;;--.LL92:                   ld      b,a
 108++D5EC              ;;--                        ldCopyByte  XX12,   UBnkXScaled
 109++D5EC              ;;--                        ldCopyByte  XX12+2, UBnkYScaled
 110++D5EC              ;;--                        ldCopyByte  XX12+4, UBnkZScaled
 111++D5EC              ;;--.LL93                   dec     b
 112++D5EC              ;;--                        jp      m, .LL94
 113++D5EC              ;;--.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 114++D5EC              ;;--                        ShiftMem8Right1 UBnkYScaled
 115++D5EC              ;;--                        ShiftMem8Right1 UBnkZScaled
 116++D5EC              ;;--                        dec     b
 117++D5EC              ;;--                        jp      p,.LL93Loop
 118++D5EC              ;;--; Add normal to XX15
 119++D5EC              ;;--.LL94:                  ldCopyByte  UBnkZScaled,     varR
 120++D5EC              ;;--                        ldCopyByte  UBnkYScaled,     varS
 121++D5EC              ;;--                        ldCopyByte  UBnkDrawCam0zLo, varQ
 122++D5EC              ;;--                        ld      a,(XX18+8)
 123++D5EC              ;;--                        call    SAEquSRPlusAQ
 124++D5EC              ;;--                        jp      c,.Ovflw
 125++D5EC              ;;--                        ld      (UBnkZScaled),a
 126++D5EC              ;;--                        ldCopyByte  varS,            UBnkZScaledSign
 127++D5EC              ;;--                        ldCopyByte  UBnkXScaled,     varR
 128++D5EC              ;;--                        ldCopyByte  UBnkXScaledSign, varS
 129++D5EC              ;;--                        ldCopyByte  UBnkDrawCam0xLo, varQ
 130++D5EC              ;;--                        ld      a,(UBnkDrawCam0xSgn)
 131++D5EC              ;;--                        call    SAEquSRPlusAQ
 132++D5EC              ;;--                        jp      c,.Ovflw
 133++D5EC              ;;--                        ld      (UBnkXScaled),a
 134++D5EC              ;;--                        ldCopyByte  varS,            UBnkXScaledSign
 135++D5EC              ;;--                        ldCopyByte  UBnkYScaled,     varR
 136++D5EC              ;;--                        ldCopyByte  UBnkYScaledSign, varS
 137++D5EC              ;;--                        ld      a,(UBnkDrawCam0ySgn)
 138++D5EC              ;;--                        call    SAEquSRPlusAQ
 139++D5EC              ;;--                        jp      c,.Ovflw
 140++D5EC              ;;--                        ld      (UBnkYScaled),a
 141++D5EC              ;;--                        ldCopyByte   varS, UBnkYScaledSign
 142++D5EC              ;;--; calculate dot product:
 143++D5EC              ;;--.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 144++D5EC              ;;--                        ld      a,(UBnkXScaled)
 145++D5EC              ;;--                        call    AequAmulQdiv256
 146++D5EC              ;;--                        ld      (varT),a
 147++D5EC              ;;--                        ld      a,(UBnkXX12xSign)
 148++D5EC              ;;--                        ld      hl,UBnkXScaledSign
 149++D5EC              ;;--                        xor     (hl)
 150++D5EC              ;;--                        ld      (varS),a
 151++D5EC              ;;--                        ldCopyByte  UBnkXX12yLo, varQ
 152++D5EC              ;;--                        ld      a,(UBnkYScaled)
 153++D5EC              ;;--                        call    AequAmulQdiv256
 154++D5EC              ;;--                        ld      (varQ),a
 155++D5EC              ;;--                        ldCopyByte  varT,varR
 156++D5EC              ;;--                        ld      a,  (UBnkXX12ySign)
 157++D5EC              ;;--                        ld      hl, UBnkYScaledSign
 158++D5EC              ;;--                        xor     (hl)
 159++D5EC              ;;--                        call    SAEquSRPlusAQ
 160++D5EC              ;;--                        ld      (varT),a
 161++D5EC              ;;--                        ldCopyByte  UBnkXX12zLo, varQ
 162++D5EC              ;;--                        ld      a,  (UBnkZScaled)
 163++D5EC              ;;--                        call    AequAmulQdiv256
 164++D5EC              ;;--                        ld      (varQ),a
 165++D5EC              ;;--                        ldCopyByte  varT, varR
 166++D5EC              ;;--                        ld      a,  (UBnkZScaledSign)
 167++D5EC              ;;--                        ld      hl, UBnkXX12zSign
 168++D5EC              ;;--                        xor     (hl)
 169++D5EC              ;;--                        call    SAEquSRPlusAQ           ; now A = dot product
 170++D5EC              ;;--                        test    $80
 171++D5EC              ;;--                        jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 172++D5EC              ;;--.FaceNotVisible:         ld          a,(CurrentNormIdx)
 173++D5EC              ;;--                        call        SetFaceAHidden                                      ;           set face invisible
 174++D5EC              ;;--                        jp          ProcessNormalLoopEnd                                ;        end if
 175++D5EC              ;;--.FaceVisible:            ld          a,(CurrentNormIdx)
 176++D5EC              ;;--                        call        SetFaceAVisible
 177++D5EC              ;;--ProcessNormalLoopEnd:   ld          hl, CurrentNormIdx
 178++D5EC              ;;--                        inc         (hl)                    ; move index pointer up by one
 179++D5EC              ;;--                        pop         bc
 180++D5EC              ;;--                        pop         hl                      ; get normal data pointer back
 181++D5EC              ;;--                        ld          a,4
 182++D5EC              ;;--                        add         hl,a                    ; move to next normal entry
 183++D5EC              ;;--                        ld          (varV),hl               ; save as we need it again
 184++D5EC              ;;--                        dec         b
 185++D5EC              ;;--                        jp          nz,ProcessNormalsLoop
 186++D5EC              ;;--                        ret
 187++D5EC
 188++D5EC
 189++D5EC
 190++D5EC
 191++D5EC              ;;;;;                        call    CopyFaceToXX15                                          ;        Get Face data into XX12
 192++D5EC              ;;;;;                        ld      a,(UBnkXScaledSign)
 193++D5EC              ;;;;;                        call    XX12EquNodeDotOrientation
 194++D5EC              ;;;;;                        ld      a,(UBnkXX12zSign)
 195++D5EC              ;;;;;                        test    $80
 196++D5EC              ;;;;;                        jp      nz, FaceVisible
 197++D5EC              ;;;;;.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
 198++D5EC              ;;;;;                        ld      iyl,a                       ; iyl = scale factor
 199++D5EC              ;;;;;.ScaleNormal:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
 200++D5EC              ;;;;;                        JumpIfAIsZero .ScaleDone            ;
 201++D5EC              ;;;;;                        ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
 202++D5EC              ;;;;;                        ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
 203++D5EC              ;;;;;                        ld      bc,(UBnkDrawCam0zLo)        ;
 204++D5EC              ;;;;;.ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
 205++D5EC              ;;;;;                        ShiftHLRight1                       ; divide cam position by 2
 206++D5EC              ;;;;;                        ShiftDERight1                       ;
 207++D5EC              ;;;;;                        ShiftBCRight1                       ;
 208++D5EC              ;;;;;                        ld      a,b                         ; loop if not scaled down
 209++D5EC              ;;;;;                        JumpIfAIsNotZero .ScaleNormalLoop     ;
 210++D5EC              ;;;;;                        ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
 211++D5EC              ;;;;;                        ld      (UBnkDrawCam0yLo),de        ;
 212++D5EC              ;;;;;                        ld      (UBnkDrawCam0zLo),bc        ;
 213++D5EC              ;;;;;; By this point XX18 = scaled draw cam and iyl = scale factor
 214++D5EC              ;;;;;.ScaleDone:             ld      a,iyl
 215++D5EC              ;;;;;                        ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
 216++D5EC              ;;;;;    call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
 217++D5EC              ;;;;;    call    ScaleXX16Matrix197               ;#02; Normalise XX16
 218++D5EC              ;;;;;;    call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
 219++D5EC              ;;;;;    call    InverseXX16                      ;#11; Invert rotation matrix
 220++D5EC              ;;;;;
 221++D5EC              ;;;;;
 222++D5EC              ;;;;;
 223++D5EC              ;;;;;                        call    CopyXX18toXX15              ; copy DrawCam to Xx15
 224++D5EC              ;;;;;                        call    XX12EquNodeDotOrientation   ; Xx12 = XX15 (face normal) dot rotation matrix
 225++D5EC              ;;;;;                        call    CopyXX12ScaledToXX18              ; now XX18 = dot product
 226++D5EC              ;;;;;.ProcessNormals:        ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 227++D5EC              ;;;;;                        ld      (varV),hl
 228++D5EC              ;;;;;                        ld      a,(FaceCtX4Addr)                                        ; For each face
 229++D5EC              ;;;;;                        srl     a                                                       ;
 230++D5EC              ;;;;;                        srl     a                                                       ;
 231++D5EC              ;;;;;                        ld      b,a                                                     ;
 232++D5EC              ;;;;;                        xor     a
 233++D5EC              ;;;;;                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
 234++D5EC              ;;;;;.ProcessNormalsLoop:    push    hl
 235++D5EC              ;;;;;                        push    bc
 236++D5EC              ;;;;;                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
 237++D5EC              ;;;;;                        and     $1F                                                     ;     if normal visibility range  < XX4
 238++D5EC              ;;;;;                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
 239++D5EC              ;;;;;.CheckFaceVisibility:   call    CopyFaceToXX12              ; Get Face data into XX12
 240++D5EC              ;;;;;                        ld      a,(varXX17)                  ; if scale factor < 4 then skip next bit
 241++D5EC              ;;;;;                        JumpIfALTNusng 4,.LL92
 242++D5EC              ;;;;;.LargeScaleFactor:      call    CopyXX18toXX15
 243++D5EC              ;;;;;                        jp      .LL89
 244++D5EC              ;;;;;.Ovflw:                 ld      a,(XX18)
 245++D5EC              ;;;;;                        srl     a
 246++D5EC              ;;;;;                        ld      (XX18),a
 247++D5EC              ;;;;;                        ld      a,(XX18+6)
 248++D5EC              ;;;;;                        srl     a
 249++D5EC              ;;;;;                        ld      (XX18+6),a
 250++D5EC              ;;;;;                        ld      a,(XX18+3)
 251++D5EC              ;;;;;                        srl     a
 252++D5EC              ;;;;;                        ld      (XX18+3),a
 253++D5EC              ;;;;;                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 254++D5EC              ;;;;;.LL92:                  ld      b,a
 255++D5EC              ;;;;;                        ldCopyByte  XX12,   UBnkXScaled
 256++D5EC              ;;;;;                        ldCopyByte  XX12+2, UBnkYScaled
 257++D5EC              ;;;;;                        ldCopyByte  XX12+4, UBnkZScaled
 258++D5EC              ;;;;;.LL93                   dec     b
 259++D5EC              ;;;;;                        jp      m, .LL94
 260++D5EC              ;;;;;.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 261++D5EC              ;;;;;                        ShiftMem8Right1 UBnkYScaled
 262++D5EC              ;;;;;                        ShiftMem8Right1 UBnkZScaled
 263++D5EC              ;;;;;                        dec     b
 264++D5EC              ;;;;;                        jp      p,.LL93Loop
 265++D5EC              ;;;;;.LL94:                  ldCopyByte  UBnkZScaled,     varR
 266++D5EC              ;;;;;                        ldCopyByte  UBnkYScaled,     varS
 267++D5EC              ;;;;;                        ldCopyByte  UBnkDrawCam0zLo, varQ
 268++D5EC              ;;;;;                        ld      a,(XX18+8)
 269++D5EC              ;;;;;                        call    SAEquSRPlusAQ
 270++D5EC              ;;;;;                        jp      c,.Ovflw
 271++D5EC              ;;;;;                        ld      (UBnkZScaled),a
 272++D5EC              ;;;;;                        ldCopyByte  varS,            UBnkZScaledSign
 273++D5EC              ;;;;;                        ldCopyByte  UBnkXScaled,     varR
 274++D5EC              ;;;;;                        ldCopyByte  UBnkXScaledSign, varS
 275++D5EC              ;;;;;                        ldCopyByte  UBnkDrawCam0xLo, varQ
 276++D5EC              ;;;;;                        ld      a,(UBnkDrawCam0xSgn)
 277++D5EC              ;;;;;                        call    SAEquSRPlusAQ
 278++D5EC              ;;;;;                        jp      c,.Ovflw
 279++D5EC              ;;;;;                        ld      (UBnkXScaled),a
 280++D5EC              ;;;;;                        ldCopyByte  varS,            UBnkXScaledSign
 281++D5EC              ;;;;;                        ldCopyByte  UBnkYScaled,     varR
 282++D5EC              ;;;;;                        ldCopyByte  UBnkYScaledSign, varS
 283++D5EC              ;;;;;                        ld      a,(UBnkDrawCam0ySgn)
 284++D5EC              ;;;;;                        call    SAEquSRPlusAQ
 285++D5EC              ;;;;;                        jp      c,.Ovflw
 286++D5EC              ;;;;;                        ld      (UBnkYScaled),a
 287++D5EC              ;;;;;                        ldCopyByte   varS, UBnkYScaledSign
 288++D5EC              ;;;;;.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 289++D5EC              ;;;;;                        ld      a,(UBnkXScaled)
 290++D5EC              ;;;;;                        call    AequAmulQdiv256
 291++D5EC              ;;;;;                        ld      (varT),a
 292++D5EC              ;;;;;                        ld      a,(UBnkXX12xSign)
 293++D5EC              ;;;;;                        ld      hl,UBnkXScaledSign
 294++D5EC              ;;;;;                        xor     (hl)
 295++D5EC              ;;;;;                        ld      (varS),a
 296++D5EC              ;;;;;                        ldCopyByte  UBnkXX12yLo, varQ
 297++D5EC              ;;;;;                        ld      a,(UBnkYScaled)
 298++D5EC              ;;;;;                        call    AequAmulQdiv256
 299++D5EC              ;;;;;                        ld      (varQ),a
 300++D5EC              ;;;;;                        ldCopyByte  varT,varR
 301++D5EC              ;;;;;                        ld      a,  (UBnkXX12ySign)
 302++D5EC              ;;;;;                        ld      hl, UBnkYScaledSign
 303++D5EC              ;;;;;                        xor     (hl)
 304++D5EC              ;;;;;                        call    SAEquSRPlusAQ
 305++D5EC              ;;;;;                        ld      (varT),a
 306++D5EC              ;;;;;                        ldCopyByte  UBnkXX12zLo, varQ
 307++D5EC              ;;;;;                        ld      a,  (UBnkZScaled)
 308++D5EC              ;;;;;                        call    AequAmulQdiv256
 309++D5EC              ;;;;;                        ld      (varQ),a
 310++D5EC              ;;;;;                        ldCopyByte  varT, varR
 311++D5EC              ;;;;;                        ld      a,  (UBnkZScaledSign)
 312++D5EC              ;;;;;                        ld      hl, UBnkXX12zSign
 313++D5EC              ;;;;;                        xor     (hl)
 314++D5EC              ;;;;;                        call    SAEquSRPlusAQ           ; now A = dot product
 315++D5EC              ;;;;;                        test    $80
 316++D5EC              ;;;;;                        jr      nz,.FaceVisible
 317++D5EC              ;;;;;.FaceNotVisible:        ld      a,(CurrentNormIdx)
 318++D5EC              ;;;;;                        call    SetFaceAHidden                                      ;           set face invisible
 319++D5EC              ;;;;;                        jp      .ProcessNormalLoopEnd                                ;        end if
 320++D5EC              ;;;;;.FaceVisible:           ld      a,(CurrentNormIdx)
 321++D5EC              ;;;;;                        call    SetFaceAVisible
 322++D5EC              ;;;;;.ProcessNormalLoopEnd:   ld      hl, CurrentNormIdx
 323++D5EC              ;;;;;                        inc         (hl)                    ; move index pointer up by one
 324++D5EC              ;;;;;                        pop         bc
 325++D5EC              ;;;;;                        pop         hl                      ; get normal data pointer back
 326++D5EC              ;;;;;                        ld          a,4
 327++D5EC              ;;;;;                        add         hl,a                    ; move to next normal entry
 328++D5EC              ;;;;;                        ld          (varV),hl               ; save as we need it again
 329++D5EC              ;;;;;                        dec         b
 330++D5EC              ;;;;;                        jp          nz,.ProcessNormalsLoop
 331++D5EC              ;;;;;                        ret                                 ; If Y >= XX20 all normals' visibilities set, onto Transpose. return
 332++D5EC              ;;;;;
 333++D5EC
 334++D5EC
 335++D5EC
 336++D5EC 3A 14 C0     CheckDistance:          ld      a,(UBnKzsgn)                 ; Is the ship behind us
 337++D5EF E6 80        .CheckBehind:           and     SignOnly8Bit                 ; which means z sign is negative
 338++D5F1 20 3E                                jr      nz,.ShipNoDraw               ; .
 339++D5F3 2A 12 C0     .CheckViewPort:         ld      hl,(UBnKzlo)                 ; now check to see if its within 90 degree arc
 340++D5F6 7C                                   ld      a,h
 341++D5F7                                      JumpIfAGTENusng ShipMaxDistance, .ShipNoDraw
 341++D5F7 FE C0       >                        cp     ShipMaxDistance
 341++D5F9 D2 31 D6    >                        jp		nc,.ShipNoDraw
 342++D5FC ED 5B 0C C0  .CheckXAxis:            ld      de,(UBnKxlo)                 ; if abs x > abx z then its out side of view port
 343++D600 CD 09 AE                             call    compare16HLDE
 344++D603 38 2C                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
 345++D605 ED 5B 0F C0  .CheckYAxis:            ld      de,(UBnKylo)                ; if abs y > abx z then its out side of view port
 346++D609 CD 09 AE                             call    compare16HLDE
 347++D60C 38 23                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
 348++D60E              .CalculateXX4:          ShiftHLRight1                       ; hl = z pos / 8
 348++D60E CB 3C       >			   srl h
 348++D610 CB 1D       >			   rr  l
 349++D612                                      ShiftHLRight1                       ; .
 349++D612 CB 3C       >			   srl h
 349++D614 CB 1D       >			   rr  l
 350++D616                                      ShiftHLRight1                       ; .
 350++D616 CB 3C       >			   srl h
 350++D618 CB 1D       >			   rr  l
 351++D61A 7C                                   ld      a,h
 352++D61B CB 3F                                srl     a                           ; if a / 16 <> 0 then ship is a dot
 353++D61D              .DrawAsDotCheck:        JumpIfNotZero   .ShipIsADot
 353++D61D C2 33 D6    >                        jp	nz,.ShipIsADot
 354++D620                                      ; Check visbility distance
 355++D620              .SetXX4Dist:            ;break
 356++D620 7D                                   ld      a,l
 357++D621 1F                                   rra                                 ; l may have had bit 0 of h carried in
 358++D622 CB 3F                                srl     a                           ; so move it to bit 4 giving A as distance $000xxxxx
 359++D624 CB 3F                                srl     a
 360++D626 CB 3F                                srl     a
 361++D628 32 36 C0                             ld      (UBnkDrawAllFaces),a        ; XX4 = "all faces" distance
 362++D62B                                      SetATrue
 362++D62B AF          >                        xor     a
 363++D62C 32 9C C0                             ld      (UBnKDrawAsDot),a           ; set draw as dot to 0, i.e. false
 364++D62F                                      ClearCarryFlag
 364++D62F B7          >                        or a
 365++D630 C9                                   ret
 366++D631              .ShipNoDraw:            SetCarryFlag                        ; ship is behind so do not draw, so we don't care abour draw as dot
 366++D631 37          >                        scf
 367++D632 C9                                   ret
 368++D633              .ShipIsADot:            SetMemFalse UBnKDrawAsDot           ; use the same logic as process nodes to do 1 point
 368++D633 3E FF       >                        ld      a,$FF
 368++D635 32 9C C0    >                        ld      (UBnKDrawAsDot),a
 369++D638                                      ClearCarryFlag
 369++D638 B7          >                        or a
 370++D639 C9                                   ret
 371++D63A
 372++D63A
 373++D63A              ; TODO remove all teh processing of rotmat to load craft to camera as its already been done
 374++D63A              CullV2:                 ReturnIfMemisZero FaceCtX4Addr      ;
 374++D63A 3A 18 C3    >                        ld   a,(FaceCtX4Addr)
 374++D63D A7          >                        and a
 374++D63E C8          >                        ret    z
 375++D63F                                     ; break
 376++D63F CD 88 D0                             call    CopyRotmatToTransMat        ; XX16 = UBNKRotMat
 377++D642 CD 0F 93                             call    ScaleXX16Matrix197          ; scale rotation matrix in XX16
 378++D645 CD 3E D3                             call    LoadCraftToCamera           ; XX18 = camera
 379++D648                                      ;call    CopyCameraToXX15Signed      ; Copy the camera to XX15 as signed 15 bit
 380++D648 3A 1E C3     .BackfaceLoop:          ld      a,(QAddr)                   ;
 381++D64B FD 6F                                ld      iyl,a                       ; iyl = scale factor
 382++D64D              ; By this point XX18 = scaled draw cam and iyl = scale factor
 383++D64D CD B5 D5                             call    ScaleDrawcam                ; XX18 = scaled camera XX17 = scale
 384++D650 CD 57 D3                             call    CopyCameraToXX15Signed      ; Xx18 -> xx15 sign + 15 bit
 385++D653 CD 66 92     .LL91:                  call    XX12EquNodeDotXX16          ; xx12 = Scaled Camera . Rotation matrix (Note Xx16 no Xx16 inv)
 386++D656 CD CF D2                             call    CopyXX12ScaledToXX18        ; now xx18 = XX12 = xx15.xx16
 387++D659 21 01 C9     .PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 388++D65C 22 52 99                             ld      (varV),hl
 389++D65F 3A 18 C3                             ld      a,(FaceCtX4Addr)                                        ; For each face
 390++D662 CB 3F                                srl     a                                              ;
 391++D664 CB 3F                                srl     a                                              ;
 392++D666 47                                   ld      b,a                                            ;
 393++D667 AF                                   xor     a
 394++D668 32 B4 D5                             ld      (CurrentNormIdx),a                                          ; used to increment up face incdex as b decrements
 395++D66B E5           .ProcessNormalsLoop:    push    hl
 396++D66C C5                                   push    bc
 397++D66D 7E           .LL86:                  ld      a,(hl)                                         ; Get Face sign and visibility distance byte
 398++D66E E6 1F                                and     $1F                                            ; if normal visibility range  < XX4
 399++D670 E5                                   push    hl
 400++D671 21 36 C0                             ld      hl,UBnkDrawAllFaces
 401++D674 BE                                   cp      (hl)
 402++D675 E1                                   pop     hl
 403++D676 DA BB D7                             jp      c,.FaceVisible              ; then we always draw
 404++D679              ; This bit needs to be added to force face visible
 405++D679 CD 39 D5     .LL87:                  call    CopyFaceToXX12              ; XX12 = normal (repolaced scale version) as a working copy
 406++D67C 3A 57 9A                             ld      a,(XX17)                    ; a = q scale XX17 cauclated by the call to ScaleDrawcam
 407++D67F 47                                   ld      b,a
 408++D680                                      JumpIfALTNusng 4,.ScaleNormByXX17   ; if q >= 4 then is so big we don;t factor in + normal for dot product
 408++D680 FE 04       >                        cp      4
 408++D682 DA BD D6    >                        jp		c, .ScaleNormByXX17
 409++D685 CD 19 D3     .LL143:                 call    CopyXX18toXX15              ; and we just set XX15 = scaled Camera dot rotation matrix
 410++D688 C3 4C D7                             jp      .DoneScalingIntoXX15        ; Now Process XX12 normal
 411++D68B 3A 77 C0     .Ovflw:                 ld      a,(UBnkDrawCam0xLo)         ; divide camera by 2 if overflow
 412++D68E CB 3F                                srl     a                           ; which is held in XX18
 413++D690 32 77 C0                             ld      (UBnkDrawCam0xLo),a         ; .
 414++D693 3A 7D C0                             ld      a,(UBnkDrawCam0zLo)         ; .
 415++D696 CB 3F                                srl     a                           ; .
 416++D698 32 7D C0                             ld      (UBnkDrawCam0zLo),a         ; .
 417++D69B 3A 7A C0                             ld      a,(UBnkDrawCam0yLo)         ; .
 418++D69E CB 3F                                srl     a                           ; .
 419++D6A0 32 7A C0                             ld      (UBnkDrawCam0yLo),a        ; .
 420++D6A3 06 01        .ScaleXScaledAgain:     ld      b,1                         ; set scale to 1 so we divide original normal by 2 into face and try again and hope we didn't scaled down XX12 earlier so if we did then we must be in the do doo as the object was obscenely large and very close
 421++D6A5                                      ShiftMem8Right1 UBnkXScaled         ; Divide XX15 by 2^B
 421++D6A5 3A 83 C0    >                    ld      a,(UBnkXScaled)
 421++D6A8 CB 3F       >                    srl     a
 421++D6AA 32 83 C0    >                    ld      (UBnkXScaled),a
 422++D6AD                                      ShiftMem8Right1 UBnkYScaled         ;
 422++D6AD 3A 85 C0    >                    ld      a,(UBnkYScaled)
 422++D6B0 CB 3F       >                    srl     a
 422++D6B2 32 85 C0    >                    ld      (UBnkYScaled),a
 423++D6B5                                      ShiftMem8Right1 UBnkZScaled         ;
 423++D6B5 3A 87 C0    >                    ld      a,(UBnkZScaled)
 423++D6B8 CB 3F       >                    srl     a
 423++D6BA 32 87 C0    >                    ld      (UBnkZScaled),a
 424++D6BD              ; if we jumped to here scale factor < 4 so we copy in normal to XX15 (scaled) LL92
 425++D6BD              .ScaleNormByXX17:       ;ld      b,a
 426++D6BD CD F4 D2                             call    CopyXX12toXX15
 427++D6C0 05           .LL93                   dec     b
 428++D6C1 FA E0 D6                             jp      m, .ScaledNorm
 429++D6C4              .LL93Loop:              ShiftMem8Right1 UBnkXScaled        ; Divide XX15 by 2^B, I think this should be really XX12 and is a bug in the original code
 429++D6C4 3A 83 C0    >                    ld      a,(UBnkXScaled)
 429++D6C7 CB 3F       >                    srl     a
 429++D6C9 32 83 C0    >                    ld      (UBnkXScaled),a
 430++D6CC                                      ShiftMem8Right1 UBnkYScaled        ;
 430++D6CC 3A 85 C0    >                    ld      a,(UBnkYScaled)
 430++D6CF CB 3F       >                    srl     a
 430++D6D1 32 85 C0    >                    ld      (UBnkYScaled),a
 431++D6D4                                      ShiftMem8Right1 UBnkZScaled        ;
 431++D6D4 3A 87 C0    >                    ld      a,(UBnkZScaled)
 431++D6D7 CB 3F       >                    srl     a
 431++D6D9 32 87 C0    >                    ld      (UBnkZScaled),a
 432++D6DC 05                                   dec     b                          ;
 433++D6DD F2 C4 D6                             jp      p,.LL93Loop                ; Now we have XX15 as scaled Normal, XX15 as camera, don;t really knwo why as cals work on XX12 and XX18
 434++D6E0              .ScaledNorm:            ;ORIG CODE DOES NOT HAVE THIS call    CopyXX15ToXX12 ; DEBUG as XX15 shoudl be a sacled nromal
 435++D6E0              ; Add normal to XX15
 436++D6E0              ; if we jumped here direct from LL143 then XX15 = drawcam scaled by Q, XX12 = face normal unscaled, XX18 = drawcam scaled also
 437++D6E0              ; if we jumped here via scaling       then XX15 = normal scaled by Q,  XX12 = face normal unscaled, XX16 = drawcam scaled
 438++D6E0              ; if we hit an overflow               then XX15 = drawcam scaled by Q  XX12 = face normal unscaled, XX18 = (drawcam scaled / 2 ) / 2^ nbr overflows (if we cam in vai scaling then its a mess?
 439++D6E0              ; So LL94 is wrong as it shoud be operating on XX12 not XX15
 440++D6E0              .LL94:                  ldCopyByte UBnkZScaled, varR        ; ldCopyByte  UBnkZScaled,     varR  ; if we jumped direct XX15 = drawcam scaled, Xx12 = normal xx18 = drawcam
 440++D6E0 3A 87 C0    >                        ld       a,(UBnkZScaled)
 440++D6E3 32 51 9A    >                        ld       (varR),a
 441++D6E6                                      ldCopyByte UBnkXX12zSign, varS      ; ldCopyByte  UBnkYScaled,     varS  ; if we did scaling then xx15 = norm scaled XX18 = drawcam
 441++D6E6 3A 8E C0    >                        ld       a,(UBnkXX12zSign)
 441++D6E9 32 52 9A    >                        ld       (varS),a
 442++D6EC                                      ldCopyByte  UBnkDrawCam0zLo, varQ   ; AQ = drawcam Z signed
 442++D6EC 3A 7D C0    >                        ld       a,(UBnkDrawCam0zLo)
 442++D6EF 32 50 9A    >                        ld       (varQ),a
 443++D6F2 3A 7F C0                             ld      a,(UBnkDrawCam0zSgn)        ; .
 444++D6F5 CD 70 B1                             call    SAEquSRPlusAQ               ; SA = drawcam Z dot + z
 445++D6F8 DA 8B D6                             jp      c,.Ovflw
 446++D6FB 32 87 C0                             ld      (UBnkZScaled),a             ; XX15Z = SA
 447++D6FE                                      ldCopyByte  varS, UBnkZScaledSign   ;
 447++D6FE 3A 52 9A    >                        ld       a,(varS)
 447++D701 32 88 C0    >                        ld       (UBnkZScaledSign),a
 448++D704                                      ldCopyByte  UBnkXScaled,     varR   ; SR = normal X
 448++D704 3A 83 C0    >                        ld       a,(UBnkXScaled)
 448++D707 32 51 9A    >                        ld       (varR),a
 449++D70A                                      ldCopyByte  UBnkXX12xSign,   varS   ; .
 449++D70A 3A 8A C0    >                        ld       a,(UBnkXX12xSign)
 449++D70D 32 52 9A    >                        ld       (varS),a
 450++D710                                      ldCopyByte  UBnkDrawCam0xLo, varQ   ; AQ = drawcam x dot
 450++D710 3A 77 C0    >                        ld       a,(UBnkDrawCam0xLo)
 450++D713 32 50 9A    >                        ld       (varQ),a
 451++D716 3A 79 C0                             ld      a,(UBnkDrawCam0xSgn)        ; .
 452++D719 CD 70 B1                             call    SAEquSRPlusAQ               ; SA = normal x + drawcam x dot
 453++D71C DA 8B D6                             jp      c,.Ovflw
 454++D71F 32 83 C0                             ld      (UBnkXScaled),a             ; XX15Z = SA
 455++D722                                      ldCopyByte  varS, UBnkXScaledSign   ; .
 455++D722 3A 52 9A    >                        ld       a,(varS)
 455++D725 32 84 C0    >                        ld       (UBnkXScaledSign),a
 456++D728                                      ldCopyByte  UBnkYScaled, varR       ; SR = normal Y
 456++D728 3A 85 C0    >                        ld       a,(UBnkYScaled)
 456++D72B 32 51 9A    >                        ld       (varR),a
 457++D72E                                      ldCopyByte  UBnkXX12ySign, varS     ; .
 457++D72E 3A 8C C0    >                        ld       a,(UBnkXX12ySign)
 457++D731 32 52 9A    >                        ld       (varS),a
 458++D734                                      ldCopyByte  UBnkDrawCam0yLo, varQ   ; AQ = drawcam y dot
 458++D734 3A 7A C0    >                        ld       a,(UBnkDrawCam0yLo)
 458++D737 32 50 9A    >                        ld       (varQ),a
 459++D73A 3A 7C C0                             ld      a,(UBnkDrawCam0ySgn)        ; .
 460++D73D CD 70 B1                             call    SAEquSRPlusAQ               ; SA = normal y + drawcam y dot
 461++D740 DA 8B D6                             jp      c,.Ovflw                    ; .
 462++D743 32 85 C0                             ld      (UBnkYScaled),a             ; XX15 Y = SA
 463++D746                                      ldCopyByte   varS, UBnkYScaledSign  ; .
 463++D746 3A 52 9A    >                        ld       a,(varS)
 463++D749 32 86 C0    >                        ld       (UBnkYScaledSign),a
 464++D74C              ; calculate dot product LL89
 465++D74C              .DoneScalingIntoXX15:   ldCopyByte  UBnkXX12xLo, varQ       ; Q = norm X XX12
 465++D74C 3A 89 C0    >                        ld       a,(UBnkXX12xLo)
 465++D74F 32 50 9A    >                        ld       (varQ),a
 466++D752 3A 83 C0                             ld      a,(UBnkXScaled)             ; A = XX15 X
 467++D755 CD DC B0                             call    AequAmulQdiv256             ; A = XX15 X * XX 12 X
 468++D758 32 6C 9A                             ld      (varT),a                    ; T = XX15 X * XX 12 X
 469++D75B 3A 8A C0                             ld      a,(UBnkXX12xSign)           ; S = sign of XX15 X * XX12 X
 470++D75E 21 84 C0                             ld      hl,UBnkXScaledSign          ; .
 471++D761 AE                                   xor     (hl)                        ; .
 472++D762 32 52 9A                             ld      (varS),a                    ; .
 473++D765                                      ldCopyByte  UBnkXX12yLo, varQ       ; Q = norm Y XX12
 473++D765 3A 8B C0    >                        ld       a,(UBnkXX12yLo)
 473++D768 32 50 9A    >                        ld       (varQ),a
 474++D76B 3A 85 C0                             ld      a,(UBnkYScaled)             ; A = XX15 Y
 475++D76E CD DC B0                             call    AequAmulQdiv256             ; A = XX15 Y * XX 12 Y
 476++D771 32 50 9A                             ld      (varQ),a                    ; Q = XX15 Y * XX 12 Y
 477++D774                                      ldCopyByte  varT,varR               ; R = XX15 X * XX 12 X
 477++D774 3A 6C 9A    >                        ld       a,(varT)
 477++D777 32 51 9A    >                        ld       (varR),a
 478++D77A 3A 8C C0                             ld      a,  (UBnkXX12ySign)         ; A = sign of XX15 Y * XX 12 Y
 479++D77D 21 86 C0                             ld      hl, UBnkYScaledSign         ; .
 480++D780 AE                                   xor     (hl)                        ; .
 481++D781 CD 70 B1                             call    SAEquSRPlusAQ               ; SA = SR+AQ = (X calc) + (Y calc)
 482++D784 32 6C 9A                             ld      (varT),a                    ; T = usigned (X calc) + (Y calc)
 483++D787                                      ldCopyByte  UBnkXX12zLo, varQ       ; Q = XX12 Z
 483++D787 3A 8D C0    >                        ld       a,(UBnkXX12zLo)
 483++D78A 32 50 9A    >                        ld       (varQ),a
 484++D78D 3A 87 C0                             ld      a,  (UBnkZScaled)           ; A = XX15 Z
 485++D790 CD DC B0                             call    AequAmulQdiv256             ; A = XX12 Z * XX15 Z
 486++D793 32 50 9A                             ld      (varQ),a                    ; Q = XX12 Z * XX15 Z
 487++D796                                      ldCopyByte  varT, varR              ; R = usigned (X calc) + (Y calc)
 487++D796 3A 6C 9A    >                        ld       a,(varT)
 487++D799 32 51 9A    >                        ld       (varR),a
 488++D79C 3A 88 C0                             ld      a,  (UBnkZScaledSign)       ; A = sign of XX12 Z * XX15 Z
 489++D79F 21 8E C0                             ld      hl, UBnkXX12zSign           ; .
 490++D7A2 AE                                   xor     (hl)                        ; .
 491++D7A3 CD 70 B1                             call    SAEquSRPlusAQ               ; SA = ((X+Y signed)) (Z signed)
 492++D7A6 FE 00                                cp      0                           ; was the result 0, if so then there are scenarios where SAEquSRPlusAQ can return -ve 0
 493++D7A8 28 08                                jr      z,.FaceNotVisible           ; in which case face is not visible
 494++D7AA 3A 52 9A                             ld      a,(varS)                    ; if the cacl was a negative number then its visible
 495++D7AD ED 27 80                             test    $80                         ; this should test S not A
 496++D7B0 20 09                                jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 497++D7B2 3A B4 D5     .FaceNotVisible:         ld          a,(CurrentNormIdx)
 498++D7B5 CD 9C D1                             call        SetFaceAHidden                                      ;           set face invisible
 499++D7B8 C3 C1 D7                             jp          .ProcessNormalLoopEnd                                ;        end if
 500++D7BB 3A B4 D5     .FaceVisible:            ld          a,(CurrentNormIdx)
 501++D7BE CD 93 D1                             call        SetFaceAVisible
 502++D7C1 21 B4 D5     .ProcessNormalLoopEnd:  ld          hl, CurrentNormIdx
 503++D7C4 34                                   inc         (hl)                    ; move index pointer up by one
 504++D7C5 C1                                   pop         bc
 505++D7C6 E1                                   pop         hl                      ; get normal data pointer back
 506++D7C7 3E 04                                ld          a,4
 507++D7C9 ED 31                                add         hl,a                    ; move to next normal entry
 508++D7CB 22 52 99                             ld          (varV),hl               ; save as we need it again
 509++D7CE 05                                   dec         b
 510++D7CF C2 6B D6                             jp          nz,.ProcessNormalsLoop
 511++D7D2 C9                                   ret
 512++D7D3
# file closed: ././ModelRender/BackfaceCull.asm
1032+ D7D3              ;--------------------------------------------------------------------------------------------------------
1033+ D7D3              ; Process edges
1034+ D7D3              ; .....................................................
1035+ D7D3              TransposeNodeVal:   MACRO arg0?
1036+ D7D3 ~                    ldCopyByte  UBnK\0sgn,Ubnk\1PointSign           ; UBnkXSgn => XX15+2 x sign
1037+ D7D3 ~                    ld          bc,(UBnkXX12\0Lo)                   ; c = lo, b = sign   XX12XLoSign
1038+ D7D3 ~                    xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1039+ D7D3 ~                    jp          m,NodeNegative\1                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1040+ D7D3 ~            ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1041+ D7D3 ~            NodeXPositive\1
1041+ D7D3 ~
1042+ D7D3 ~                    ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1043+ D7D3 ~                    ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1044+ D7D3 ~                    ld          hl,(UBnK\0lo)                       ; hl = XX1 UBNKxLo
1045+ D7D3 ~                    ld          h,0                                 ; but we don;t want the sign
1046+ D7D3 ~                    add         hl,bc                               ; its a 16 bit add
1047+ D7D3 ~                    ld          (Ubnk\1Point),hl                    ; And written to XX15 0,1
1048+ D7D3 ~                    xor         a                                   ; we want to write 0 as sign bit (not in original code)
1049+ D7D3 ~                    ld          (UbnkXPointSign),a
1050+ D7D3 ~                    jp          FinishedThisNode\1
1051+ D7D3 ~            ; If we get here then _sign and vertv_ have different signs so do subtract
1052+ D7D3 ~            NodeNegative\1
1052+ D7D3 ~
1053+ D7D3 ~            LL52\1
1053+ D7D3 ~                                                              ;
1054+ D7D3 ~                    ld          hl,(UBnK\0lo)                       ; Coord
1055+ D7D3 ~                    ld          bc,(UBnkXX12\0Lo)                   ; XX12
1056+ D7D3 ~                    ld          b,0                                 ; XX12 lo byte only
1057+ D7D3 ~                    sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1058+ D7D3 ~                    jp          p,SetAndMop\1                       ; if result is positive skip to write back
1059+ D7D3 ~            NodeXNegSignChange\1
1059+ D7D3 ~
1060+ D7D3 ~            ; If we get here the result is 2'c compliment so we reverse it and flip sign
1061+ D7D3 ~                    call        negate16hl                          ; Convert back to positive and flip sign
1062+ D7D3 ~                    ld          a,(Ubnk\1PointSign)                 ; XX15+2
1063+ D7D3 ~                    xor         $80                                 ; Flip bit 7
1064+ D7D3 ~                    ld          (Ubnk\1PointSign),a                 ; XX15+2
1065+ D7D3 ~            SetAndMop\1
1065+ D7D3 ~
1066+ D7D3 ~                    ld          (UBnK\0lo),hl                       ; XX15+0
1067+ D7D3 ~            FinishedThisNode\1
1068+ D7D3                                  ENDM
1069+ D7D3
1070+ D7D3              ;--LL52 to LL55-----------------------------------------------------------------------------------------------------------------
1071+ D7D3
1072+ D7D3              TransposeXX12NodeToXX15:
1073+ D7D3                      ldCopyByte  UBnKxsgn,UbnkXPointSign           ; UBnkXSgn => XX15+2 x sign
1073+ D7D3 3A 0E C0    >                        ld       a,(UBnKxsgn)
1073+ D7D6 32 85 C0    >                        ld       (UbnkXPointSign),a
1074+ D7D9 ED 4B 89 C0          ld          bc,(UBnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
1075+ D7DD A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1076+ D7DE FA F4 D7             jp          m,NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1077+ D7E1              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1078+ D7E1              NodeXPositiveX:
1079+ D7E1 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1080+ D7E2 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1081+ D7E4 2A 0C C0             ld          hl,(UBnKxlo)                       ; hl = XX1 UBNKxLo
1082+ D7E7 26 00                ld          h,0                                 ; but we don;t want the sign
1083+ D7E9 09                   add         hl,bc                               ; its a 16 bit add
1084+ D7EA 22 83 C0             ld          (UbnkXPoint),hl                    ; And written to XX15 0,1
1085+ D7ED AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
1086+ D7EE 32 85 C0             ld          (UbnkXPointSign),a
1087+ D7F1 C3 10 D8             jp          FinishedThisNodeX
1088+ D7F4              ; If we get here then _sign and vertv_ have different signs so do subtract
1089+ D7F4              NodeNegativeX:
1090+ D7F4              LL52X:                                                 ;
1091+ D7F4 2A 0C C0             ld          hl,(UBnKxlo)                       ; Coord
1092+ D7F7 ED 4B 89 C0          ld          bc,(UBnkXX12xLo)                   ; XX12
1093+ D7FB 06 00                ld          b,0                                 ; XX12 lo byte only
1094+ D7FD ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1095+ D7FF F2 0D D8             jp          p,SetAndMopX                       ; if result is positive skip to write back
1096+ D802              NodeXNegSignChangeX:
1097+ D802              ; If we get here the result is 2'c compliment so we reverse it and flip sign
1098+ D802 CD 1F AE             call        negate16hl                          ; Convert back to positive and flip sign
1099+ D805 3A 85 C0             ld          a,(UbnkXPointSign)                 ; XX15+2
1100+ D808 EE 80                xor         $80                                 ; Flip bit 7
1101+ D80A 32 85 C0             ld          (UbnkXPointSign),a                 ; XX15+2
1102+ D80D              SetAndMopX:
1103+ D80D 22 0C C0             ld          (UBnKxlo),hl                       ; XX15+0
1104+ D810              FinishedThisNodeX:
1105+ D810
1106+ D810              LL53:
1107+ D810
1108+ D810                      ldCopyByte  UBnKysgn,UbnkYPointSign           ; UBnkXSgn => XX15+2 x sign
1108+ D810 3A 11 C0    >                        ld       a,(UBnKysgn)
1108+ D813 32 88 C0    >                        ld       (UbnkYPointSign),a
1109+ D816 ED 4B 8B C0          ld          bc,(UBnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
1110+ D81A A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1111+ D81B FA 31 D8             jp          m,NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1112+ D81E              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1113+ D81E              NodeXPositiveY:
1114+ D81E 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1115+ D81F 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1116+ D821 2A 0F C0             ld          hl,(UBnKylo)                       ; hl = XX1 UBNKxLo
1117+ D824 26 00                ld          h,0                                 ; but we don;t want the sign
1118+ D826 09                   add         hl,bc                               ; its a 16 bit add
1119+ D827 22 86 C0             ld          (UbnkYPoint),hl                    ; And written to XX15 0,1
1120+ D82A AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
1121+ D82B 32 85 C0             ld          (UbnkXPointSign),a
1122+ D82E C3 4D D8             jp          FinishedThisNodeY
1123+ D831              ; If we get here then _sign and vertv_ have different signs so do subtract
1124+ D831              NodeNegativeY:
1125+ D831              LL52Y:                                                 ;
1126+ D831 2A 0F C0             ld          hl,(UBnKylo)                       ; Coord
1127+ D834 ED 4B 8B C0          ld          bc,(UBnkXX12yLo)                   ; XX12
1128+ D838 06 00                ld          b,0                                 ; XX12 lo byte only
1129+ D83A ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1130+ D83C F2 4A D8             jp          p,SetAndMopY                       ; if result is positive skip to write back
1131+ D83F              NodeXNegSignChangeY:
1132+ D83F              ; If we get here the result is 2'c compliment so we reverse it and flip sign
1133+ D83F CD 1F AE             call        negate16hl                          ; Convert back to positive and flip sign
1134+ D842 3A 88 C0             ld          a,(UbnkYPointSign)                 ; XX15+2
1135+ D845 EE 80                xor         $80                                 ; Flip bit 7
1136+ D847 32 88 C0             ld          (UbnkYPointSign),a                 ; XX15+2
1137+ D84A              SetAndMopY:
1138+ D84A 22 0F C0             ld          (UBnKylo),hl                       ; XX15+0
1139+ D84D              FinishedThisNodeY:
1140+ D84D
1141+ D84D
1142+ D84D              TransposeZ:
1143+ D84D              LL55:                                                   ; Both y signs arrive here, Onto z                                          ;;;
1144+ D84D 3A 8E C0             ld          a,(UBnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
1145+ D850                      JumpOnBitSet a,7,NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
1145+ D850 CB 7F       >                        bit 	7,a
1145+ D852 C2 66 D8    >                        jp      nz,NegativeNodeZ
1146+ D855 3A 8D C0             ld          a,(UBnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
1147+ D858 2A 12 C0             ld          hl,(UBnKzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
1148+ D85B ED 31                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
1149+ D85D 7D                   ld          a,l
1150+ D85E 32 6C 9A             ld          (varT),a                            ;                                                                           ;;;
1151+ D861 7C                   ld          a,h
1152+ D862 32 4F 9A             ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
1153+ D865 C9                   ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
1154+ D866              ; Doing additions and scalings for each visible node around here                                                                    ;;;
1155+ D866              NegativeNodeZ:
1156+ D866              LL56:                                                   ; Enter XX12+5 -ve Z node case  from above                                  ;;;
1157+ D866 2A 12 C0             ld          hl,(UBnKzlo)                        ; INWK+6 \ z org lo                                                         ;;;
1158+ D869 ED 4B 8D C0          ld          bc,(UBnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
1159+ D86D 06 00                ld          b,0                                 ; upper byte will be garbage
1160+ D86F                      ClearCarryFlag
1160+ D86F B7          >                        or a
1161+ D870 ED 42                sbc         hl,bc                               ; 6502 used carry flag compliment
1162+ D872 7D                   ld          a,l
1163+ D873 32 6C 9A             ld          (varT),a                            ; t = result low
1164+ D876 7C                   ld          a,h
1165+ D877 32 4F 9A             ld          (varU),a                            ; u = result high
1166+ D87A E2 87 D8             jp          po,MakeNodeClose                    ; no overflow to parity would be clear
1167+ D87D              LL56Overflow:
1168+ D87D FE 00                cp          0                                   ; is varU 0?
1169+ D87F 20 16                jr          nz,NodeAdditionsDone                ; Enter Node additions done, UT=z
1170+ D881 3A 6C 9A             ld          a,(varT)                            ; T \ restore z lo
1171+ D884                      ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
1171+ D884 FE 04       >                        cp    4
1171+ D886 D0          >                        ret	 nc
1172+ D887              MakeNodeClose:
1173+ D887              LL140:                                                  ; else make node close
1174+ D887 AF                   xor         a                                   ; hi This needs tuning to use a 16 bit variable
1175+ D888 32 4F 9A             ld          (varU),a                            ; U
1176+ D88B 3E 04                ld          a,4                                 ; lo
1177+ D88D 32 6C 9A             ld          (varT),a                            ; T
1178+ D890 C9                   ret
1179+ D891              ;--LL49-------------------------------------------------------------------------------------------------------------------------
1180+ D891              ProcessVisibleNode:
1181+ D891              RotateNode:                                                                                                                         ;;;
1182+ D891 CD 9E D2             call        XX12EquXX15DotProductXX16                                                                                       ;;;           call      XX12=XX15.XX16
1183+ D894              LL52LL53LL54LL55
1184+ D894              TransposeNode:
1185+ D894 CD D3 D7             call        TransposeXX12NodeToXX15
1186+ D897
1187+ D897              ; ......................................................                                                         ;;;
1188+ D897              NodeAdditionsDone:
1189+ D897              Scale16BitTo8Bit:
1190+ D897              LL57:                                                   ; Enter Node additions done, z=T.U set up from LL55
1191+ D897 3A 4F 9A             ld          a,(varU)                            ; U \ z hi
1192+ D89A 21 84 C0             ld          hl,UbnkXPointHi
1193+ D89D B6                   or          (hl)                                ; XX15+1    \ x hi
1194+ D89E 21 87 C0             ld          hl,UbnkYPointHi
1195+ D8A1 B6                   or          (hl)                                ; XX15+4    \ y hi
1196+ D8A2              AreXYZHiAllZero:
1197+ D8A2 28 2B                jr          z,NodeScalingDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
1198+ D8A4              DivideXYZBy2:
1199+ D8A4                      ShiftMem16Right1    UbnkXPoint                  ; XX15[0,1]
1199+ D8A4 2A 83 C0    >                    ld    hl,(UbnkXPoint)
1199+ D8A7 CB 3C       >                    srl   h
1199+ D8A9 CB 1D       >                    rr    l
1199+ D8AB 22 83 C0    >                    ld    (UbnkXPoint),hl
1200+ D8AE                      ShiftMem16Right1    UbnkYPoint                  ; XX15[3,4]
1200+ D8AE 2A 86 C0    >                    ld    hl,(UbnkYPoint)
1200+ D8B1 CB 3C       >                    srl   h
1200+ D8B3 CB 1D       >                    rr    l
1200+ D8B5 22 86 C0    >                    ld    (UbnkYPoint),hl
1201+ D8B8 3A 4F 9A             ld          a,(varU)                            ; U \ z hi
1202+ D8BB 67                   ld          h,a
1203+ D8BC 3A 6C 9A             ld          a,(varT)                            ; T \ z lo
1204+ D8BF 6F                   ld          l,a
1205+ D8C0                      ShiftHLRight1
1205+ D8C0 CB 3C       >			   srl h
1205+ D8C2 CB 1D       >			   rr  l
1206+ D8C4 7C                   ld          a,h
1207+ D8C5 32 4F 9A             ld          (varU),a
1208+ D8C8 7D                   ld          a,l
1209+ D8C9 32 6C 9A             ld          (varT),a                            ; T \ z lo
1210+ D8CC C3 97 D8             jp          Scale16BitTo8Bit                    ; loop U
1211+ D8CF              NodeScalingDone:
1212+ D8CF              LL60:                                                   ; hi U rolled to 0, exited loop above.
1213+ D8CF              ProjectNodeToScreen:
1214+ D8CF                      ldCopyByte  varT,varQ                           ; T =>  Q   \ zdist lo
1214+ D8CF 3A 6C 9A    >                        ld       a,(varT)
1214+ D8D2 32 50 9A    >                        ld       (varQ),a
1215+ D8D5 3A 83 C0             ld          a,(UbnkXPointLo)                    ; XX15  \ rolled x lo
1216+ D8D8 21 50 9A             ld          hl,varQ
1217+ D8DB BE                   cp          (hl)                                ; Q
1218+ D8DC                      JumpIfALTusng DoSmallAngle                      ; LL69 if xdist < zdist hop over jmp to small x angle
1218+ D8DC DA E5 D8    >                        jp		c,DoSmallAngle
1219+ D8DF CD 77 B2             call        RequAdivQ                           ; LL61  \ visit up  R = A/Q = x/z
1220+ D8E2 C3 ED D8             jp          SkipSmallAngle                      ; LL65  \ hop over small xangle
1221+ D8E5              DoSmallAngle:                                           ; small x angle
1222+ D8E5              LL69:
1223+ D8E5              ; TODO check if we need to retain BC as this trashes it
1224+ D8E5              ;Input: BC = Dividend, DE = Divisor, HL = 0
1225+ D8E5              ;Output: BC = Quotient, HL = Remainder
1226+ D8E5 47                   ld      b,a
1227+ D8E6 CD 68 AC             call    DIV16UNDOC
1228+ D8E9 79                   ld      a,c
1229+ D8EA 32 51 9A             ld      (varR),a
1230+ D8ED               ;;;       call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1231+ D8ED              SkipSmallAngle:
1232+ D8ED              ScaleX:
1233+ D8ED              LL65:                                                   ; both continue for scaling based on z
1234+ D8ED 3A 85 C0             ld          a,(UbnkXPointSign)                  ; XX15+2 \ sign of X dist
1235+ D8F0                      JumpOnBitSet a,7,NegativeXPoint                 ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1235+ D8F0 CB 7F       >                        bit 	7,a
1235+ D8F2 C2 05 D9    >                        jp      nz,NegativeXPoint
1236+ D8F5              ; ......................................................
1237+ D8F5              PositiveXPoint:
1238+ D8F5 3A 51 9A             ld          a,(varR)
1239+ D8F8 6F                   ld          l,a
1240+ D8F9 3A 4F 9A             ld          a,(varU)
1241+ D8FC 67                   ld          h,a
1242+ D8FD 3E 80                ld          a,ScreenCenterX
1243+ D8FF ED 31                add         hl,a
1244+ D901 EB                   ex          de,hl
1245+ D902 C3 15 D9             jp          StoreXPoint
1246+ D905              NegativeXPoint:
1247+ D905              LL62:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1248+ D905 3A 51 9A             ld          a,(varR)
1249+ D908 6F                   ld          l,a
1250+ D909 3A 4F 9A             ld          a,(varU)
1251+ D90C 67                   ld          h,a
1252+ D90D 0E 80                ld          c,ScreenCenterX
1253+ D90F 06 00                ld          b,0
1254+ D911                      ClearCarryFlag
1254+ D911 B7          >                        or a
1255+ D912 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1256+ D914 EB                   ex          de,hl
1257+ D915              StoreXPoint:                                            ; also from LL62, XX3 node heap has xscreen node so far.
1258+ D915 FD 73 00             ld          (iy+0),e                            ; Update X Point
1259+ D918 FD 72 01             ld          (iy+1),d                            ; Update X Point
1260+ D91B FD 23                inc         iy
1261+ D91D FD 23                inc         iy
1262+ D91F              ; ......................................................
1263+ D91F              LL66:
1264+ D91F              ProcessYPoint:
1265+ D91F AF                   xor         a                                   ; y hi = 0
1266+ D920 32 4F 9A             ld          (varU),a                            ; U
1267+ D923                      ldCopyByte  varT,varQ                           ; Q \ zdist lo
1267+ D923 3A 6C 9A    >                        ld       a,(varT)
1267+ D926 32 50 9A    >                        ld       (varQ),a
1268+ D929 3A 86 C0             ld          a,(UbnkYPointLo)                    ; XX15+3 \ rolled y low
1269+ D92C 21 50 9A             ld          hl,varQ
1270+ D92F BE                   cp          (hl)                                ; Q
1271+ D930                      JumpIfALTusng SmallYHop                         ; if ydist < zdist hop to small yangle
1271+ D930 DA 39 D9    >                        jp		c,SmallYHop
1272+ D933              SmallYPoint:
1273+ D933 CD 77 B2             call        RequAdivQ                           ; LL61  \ else visit up R = A/Q = y/z
1274+ D936 C3 3C D9             jp          SkipYScale                          ; LL68 hop over small y yangle
1275+ D939              SmallYHop:
1276+ D939              LL67:                                                   ; Arrive from LL66 above if XX15+3 < Q \ small yangle
1277+ D939 CD 54 B2             call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1278+ D93C              SkipYScale:
1279+ D93C              LL68:                                                   ; both carry on, also arrive from LL66, yscaled based on z
1280+ D93C 3A 88 C0             ld          a,(UbnkYPointSign)                  ; XX15+5 \ sign of X dist
1281+ D93F CB 7F                bit         7,a
1282+ D941 C2 54 D9             jp          nz,NegativeYPoint                   ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1283+ D944              PositiveYPoint:
1284+ D944 3A 51 9A             ld          a,(varR)
1285+ D947 6F                   ld          l,a
1286+ D948 3A 4F 9A             ld          a,(varU)
1287+ D94B 67                   ld          h,a
1288+ D94C 3E 60                ld          a,ScreenHeightHalf
1289+ D94E ED 31                add         hl,a
1290+ D950 EB                   ex          de,hl
1291+ D951 C3 64 D9             jp          LL50
1292+ D954              NegativeYPoint:
1293+ D954              LL70:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1294+ D954 3A 51 9A             ld          a,(varR)
1295+ D957 6F                   ld          l,a
1296+ D958 3A 4F 9A             ld          a,(varU)
1297+ D95B 67                   ld          h,a
1298+ D95C 0E 60                ld          c,ScreenHeightHalf
1299+ D95E 06 00                ld          b,0
1300+ D960                      ClearCarryFlag
1300+ D960 B7          >                        or a
1301+ D961 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1302+ D963 EB                   ex          de,hl
1303+ D964              LL50:                                                   ; also from LL62, XX3 node heap has xscreen node so far.
1304+ D964 FD 73 00             ld          (iy+0),e                            ; Update X Point
1305+ D967 FD 72 01             ld          (iy+1),d                            ; Update X Point
1306+ D96A FD 23                inc         iy
1307+ D96C FD 23                inc         iy
1308+ D96E C9                   ret
1309+ D96F              ;--------------------------------------------------------------------------------------------------------
1310+ D96F              ;;;     Byte 0 = X magnitide with origin at middle of ship
1311+ D96F              ;;;     Byte 1 = Y magnitide with origin at middle of ship
1312+ D96F              ;;;     Byte 2 = Z magnitide with origin at middle of ship
1313+ D96F              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
1314+ D96F              CopyNodeToXX15:
1315+ D96F                      ldCopyByte  hl, UBnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1315+ D96F 7E          >                        ld       a,(hl)
1315+ D970 32 83 C0    >                        ld       (UBnkXScaled),a
1316+ D973 23                   inc         hl
1317+ D974                      ldCopyByte  hl, UBnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1317+ D974 7E          >                        ld       a,(hl)
1317+ D975 32 85 C0    >                        ld       (UBnkYScaled),a
1318+ D978 23                   inc         hl
1319+ D979                      ldCopyByte  hl, UBnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1319+ D979 7E          >                        ld       a,(hl)
1319+ D97A 32 87 C0    >                        ld       (UBnkZScaled),a
1320+ D97D 23                   inc         hl
1321+ D97E              PopulateXX15SignBits:
1322+ D97E              ; Simplfied for debugging, needs optimising back to original DEBUG TODO
1323+ D97E 7E                   ld          a,(hl)
1324+ D97F 4F                   ld          c,a                                 ; copy sign and visibility to c
1325+ D980 47                   ld          b,a
1326+ D981 E6 80                and         $80                                 ; keep high 3 bits
1327+ D983 32 84 C0             ld          (UBnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1328+ D986 78                   ld          a,b
1329+ D987 E6 40                and         $40
1330+ D989 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1331+ D98B 32 86 C0             ld          (UBnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1332+ D98E 78                   ld          a,b
1333+ D98F E6 20                and         $20
1334+ D991 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1335+ D993 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1336+ D995 32 88 C0             ld          (UBnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1337+ D998 79                   ld          a,c                                 ; returns a with visibility sign byte
1338+ D999 E6 1F                and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
1339+ D99B 32 6C 9A             ld          (varT),a                            ; and store in varT as its needed later
1340+ D99E C9                   ret
1341+ D99F
1342+ D99F              ;;;     Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
1343+ D99F              ;;;     Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
1344+ D99F              ;..............................................................................................................................
1345+ D99F              ProcessANode:                                           ; Start loop on Nodes for visibility, each node has 4 faces associated with ;;; For each node (point) in model                  ::LL48
1346+ D99F              LL48GetScale:
1347+ D99F 3A 42 99             ld          a,(LastNormalVisible)               ; get Normal visible range into e before we copy node
1348+ D9A2 5F                   ld          e,a
1349+ D9A3 CD 6F D9             call        CopyNodeToXX15
1350+ D9A6              LL48GetVertices:
1351+ D9A6              LL48GetVertSignAndVisDist:
1352+ D9A6                      JumpIfALTNusng e,NodeIsNotVisible               ; if XX4 > Visibility distance then vertext too far away , next vertex.                                             ;;;        goto LL50 (end of loop)
1352+ D9A6 BB          >                        cp      e
1352+ D9A7 DA E8 D9    >                        jp		c, NodeIsNotVisible
1353+ D9AA              CheckFace1:                                                                                                                         ;;;     if all FaceVisile[point face any of idx1,2,3 or 4] = 0
1354+ D9AA                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;     get point face idx from byte 4 & 5 of normal
1354+ D9AA 23          >                    inc         hl                                  ; vertex byte#1
1354+ D9AB 7E          >                    ld          a,(hl)                              ;
1354+ D9AC 32 4D 99    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1355+ D9AF 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1356+ D9B0 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1357+ D9B2 E5                   push        hl                                  ; we need to save HL                                                        ;;;
1358+ D9B3                      ldHLIdxAToA UbnkFaceVisArray                    ; visibility at face 1                                                Byte 4;;;
1358+ D9B3 21 B0 C0    >                    ld          hl,UbnkFaceVisArray
1358+ D9B6 ED 31       >                    add         hl,a
1358+ D9B8 7E          >                    ld          a,(hl)
1359+ D9B9 E1                   pop         hl                                  ;                                                                           ;;;
1360+ D9BA                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1360+ D9BA FE 00       >                        cp	0
1360+ D9BC C2 EE D9    >                        jp	nz,NodeIsVisible
1361+ D9BF              CheckFace2:                                                                                                                         ;;;
1362+ D9BF 7A                   ld          a,d                                                                                                             ;;;
1363+ D9C0 ED 23                swapnib                                                                                                                     ;;;
1364+ D9C2 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1365+ D9C4                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1365+ D9C4 FE 00       >                        cp	0
1365+ D9C6 C2 EE D9    >                        jp	nz,NodeIsVisible
1366+ D9C9              CheckFace3:                                                                                                                         ;;;
1367+ D9C9                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;
1367+ D9C9 23          >                    inc         hl                                  ; vertex byte#1
1367+ D9CA 7E          >                    ld          a,(hl)                              ;
1367+ D9CB 32 4D 99    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1368+ D9CE 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1369+ D9CF E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1370+ D9D1 E5                   push        hl                                  ; we need to save HL                                                        ;;;
1371+ D9D2                      ldHLIdxAToA UbnkFaceVisArray                  ; visibility at face 1                                                Byte 5;;;
1371+ D9D2 21 B0 C0    >                    ld          hl,UbnkFaceVisArray
1371+ D9D5 ED 31       >                    add         hl,a
1371+ D9D7 7E          >                    ld          a,(hl)
1372+ D9D8 E1                   pop         hl                                  ;                                                                           ;;;
1373+ D9D9                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1373+ D9D9 FE 00       >                        cp	0
1373+ D9DB C2 EE D9    >                        jp	nz,NodeIsVisible
1374+ D9DE              CheckFace4:                                                                                                                         ;;;
1375+ D9DE 7A                   ld          a,d                                                                                                             ;;;
1376+ D9DF ED 23                swapnib                                                                                                                     ;;;
1377+ D9E1 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1378+ D9E3                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1378+ D9E3 FE 00       >                        cp	0
1378+ D9E5 C2 EE D9    >                        jp	nz,NodeIsVisible
1379+ D9E8              NodeIsNotVisible:                                                                                                                   ;;;
1380+ D9E8 01 04 00             ld          bc,4
1381+ D9EB FD 09                add         iy,bc                               ; if not visible then move to next element in array anyway                  ;;;
1382+ D9ED                      ;;; Should we be loading FFFFFFFF into 4 bytes or just ignore?
1383+ D9ED C9                   ret                                                                                                      ;;;        goto LL50 (end of loop)
1384+ D9EE              NodeIsVisible:
1385+ D9EE              LL49:
1386+ D9EE CD 91 D8             call        ProcessVisibleNode                  ; Process node to determine if it goes on heap
1387+ D9F1 C9                   ret
1388+ D9F2
1389+ D9F2
1390+ D9F2              ProjectNodeToEye:
1391+ D9F2 ED 4B 87 C0  	ld			bc,(UBnkZScaled)					; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
1392+ D9F6 79           	ld			a,c                                 ;  so no need for a negative check
1393+ D9F7 32 50 9A     	ld			(varQ),a		                    ; VarQ = z
1394+ D9FA 3A 83 C0         ld          a,(UBnkXScaled)                     ; XX15	\ rolled x lo which is signed
1395+ D9FD CD 51 AC     	call		DIV16Amul256dCUNDOC					; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
1396+ DA00 3A 84 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
1397+ DA03                  JumpOnBitSet a,7,EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1397+ DA03 CB 7F       >                        bit 	7,a
1397+ DA05 C2 10 DA    >                        jp      nz,EyeNegativeXPoint
1398+ DA08              EyePositiveXPoint:									; x was positive result
1399+ DA08 2E 80            ld          l,ScreenCenterX						;
1400+ DA0A 26 00            ld          h,0
1401+ DA0C 09               add         hl,bc								; hl = Screen Centre + X
1402+ DA0D C3 17 DA         jp          EyeStoreXPoint
1403+ DA10              EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
1404+ DA10 2E 80            ld          l,ScreenCenterX
1405+ DA12 26 00            ld          h,0
1406+ DA14                  ClearCarryFlag
1406+ DA14 B7          >                        or a
1407+ DA15 ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
1408+ DA17              EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1409+ DA17 EB               ex          de,hl
1410+ DA18 FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
1411+ DA1B FD 72 01         ld          (iy+1),d                            ; Update X Point
1412+ DA1E              EyeProcessYPoint:
1413+ DA1E ED 4B 87 C0  	ld			bc,(UBnkZScaled)					; Now process Y co-ordinate
1414+ DA22 79           	ld			a,c
1415+ DA23 32 50 9A     	ld			(varQ),a
1416+ DA26 3A 85 C0         ld          a,(UBnkYScaled)                     ; XX15	\ rolled x lo
1417+ DA29 CD 51 AC     	call		DIV16Amul256dCUNDOC	                ; a = Y scaled * 256 / zscaled
1418+ DA2C 3A 86 C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
1419+ DA2F                  JumpOnBitSet a,7,EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
1419+ DA2F CB 7F       >                        bit 	7,a
1419+ DA31 C2 3C DA    >                        jp      nz,EyeNegativeYPoint
1420+ DA34              EyePositiveYPoint:									; Y is positive so above the centre line
1421+ DA34 2E 60            ld          l,ScreenCenterY
1422+ DA36                  ClearCarryFlag
1422+ DA36 B7          >                        or a
1423+ DA37 ED 42            sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
1424+ DA39 C3 41 DA         jp          EyeStoreYPoint
1425+ DA3C              EyeNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
1426+ DA3C 2E 60            ld          l,ScreenCenterY
1427+ DA3E 26 00            ld          h,0
1428+ DA40 09               add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
1429+ DA41              EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1430+ DA41 EB               ex          de,hl
1431+ DA42 FD 73 02         ld          (iy+2),e                            ; Update Y Point
1432+ DA45 FD 72 03         ld          (iy+3),d                            ; Update Y Point
1433+ DA48 C9               ret
1434+ DA49
1435+ DA49
1436+ DA49
1437+ DA49              ; Pitch and roll are 2 phases
1438+ DA49              ; 1 - we apply our pitch and roll to the ship position
1439+ DA49              ;       x -> x + alpha * (y - alpha * x)
1440+ DA49              ;       y -> y - alpha * x - beta * z
1441+ DA49              ;       z -> z + beta * (y - alpha * x - beta * z)
1442+ DA49              ; which can be simplified as:
1443+ DA49              ;       1. K2 = y - alpha * x
1444+ DA49              ;       2. z = z + beta * K2
1445+ DA49              ;       3. y = K2 - beta * z
1446+ DA49              ;       4. x = x + alpha * y
1447+ DA49              ; 2 - we apply our patch and roll to the ship orientation
1448+ DA49              ;      Roll calculations:
1449+ DA49              ;
1450+ DA49              ;        nosev_y = nosev_y - alpha * nosev_x_hi
1451+ DA49              ;        nosev_x = nosev_x + alpha * nosev_y_hi
1452+ DA49              ;      Pitch calculations:
1453+ DA49              ;
1454+ DA49              ;        nosev_y = nosev_y - beta * nosev_z_hi
1455+ DA49              ;        nosev_z = nosev_z + beta * nosev_y_hi
1456+ DA49
1457+ DA49
1458+ DA49              ; ---------------------------------------------------------------------------------------------------------------------------------
1459+ DA49                          INCLUDE "./Universe/Ships/ApplyMyRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyMyRollAndPitch.asm
   1++DA49
   2++DA49              ; Full version
   3++DA49              ; 1. K2 = y - alpha * x
   4++DA49              ; 2. z = z + beta * K2
   5++DA49              ; 3. y = K2 - beta * z
   6++DA49              ; 4. x = x + alpha * y
   7++DA49
   8++DA49
   9++DA49              ApplyMyRollToNosev:     ApplyMyRollToVector ALPHA, UBnkrotmatNosevX, UBnkrotmatNosevY
   9++DA49             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
   9++DA49 3A 66 99    >                        ld       a,(ALPHA)
   9++DA4C 32 50 9A    >                        ld       (varQ),a
   9++DA4F             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
   9++DA4F 2A 23 C0    >                        ld       hl,(UBnkrotmatNosevY)
   9++DA52 22 51 9A    >                        ld       (varR),hl
   9++DA55             >                        ldCopyByte  UBnkrotmatNosevX, varP           ; set P to nosevX lo (may be redundant)
   9++DA55 3A 21 C0    >                        ld       a,(UBnkrotmatNosevX)
   9++DA58 32 4D 99    >                        ld       (varP),a
   9++DA5B 3A 22 C0    >                        ld a,(UBnkrotmatNosevX+1)                    ; Set A = -nosev_x_hi
   9++DA5E EE 80       >                        xor $80                             ;
   9++DA60 CD 1B AA    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
   9++DA63 ED 53 23 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
   9++DA67             >                        ldCopy2Byte UBnkrotmatNosevX, varR           ; Set (S R) = nosev_x
   9++DA67 2A 21 C0    >                        ld       hl,(UBnkrotmatNosevX)
   9++DA6A 22 51 9A    >                        ld       (varR),hl
   9++DA6D 3A 24 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
   9++DA70 CD 1B AA    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
   9++DA73 ED 53 21 C0 >                        ld  (UBnkrotmatNosevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  10++DA77 C9                                   ret
  11++DA78              ApplyMyRollToSidev:     ApplyMyRollToVector ALPHA, UBnkrotmatSidevX, UBnkrotmatSidevY
  11++DA78             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  11++DA78 3A 66 99    >                        ld       a,(ALPHA)
  11++DA7B 32 50 9A    >                        ld       (varQ),a
  11++DA7E             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
  11++DA7E 2A 17 C0    >                        ld       hl,(UBnkrotmatSidevY)
  11++DA81 22 51 9A    >                        ld       (varR),hl
  11++DA84             >                        ldCopyByte  UBnkrotmatSidevX, varP           ; set P to nosevX lo (may be redundant)
  11++DA84 3A 15 C0    >                        ld       a,(UBnkrotmatSidevX)
  11++DA87 32 4D 99    >                        ld       (varP),a
  11++DA8A 3A 16 C0    >                        ld a,(UBnkrotmatSidevX+1)                    ; Set A = -nosev_x_hi
  11++DA8D EE 80       >                        xor $80                             ;
  11++DA8F CD 1B AA    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  11++DA92 ED 53 17 C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  11++DA96             >                        ldCopy2Byte UBnkrotmatSidevX, varR           ; Set (S R) = nosev_x
  11++DA96 2A 15 C0    >                        ld       hl,(UBnkrotmatSidevX)
  11++DA99 22 51 9A    >                        ld       (varR),hl
  11++DA9C 3A 18 C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
  11++DA9F CD 1B AA    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  11++DAA2 ED 53 15 C0 >                        ld  (UBnkrotmatSidevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  12++DAA6 C9                                   ret
  13++DAA7              ApplyMyRollToRoofv:     ApplyMyRollToVector ALPHA, UBnkrotmatRoofvX, UBnkrotmatRoofvY
  13++DAA7             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  13++DAA7 3A 66 99    >                        ld       a,(ALPHA)
  13++DAAA 32 50 9A    >                        ld       (varQ),a
  13++DAAD             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
  13++DAAD 2A 1D C0    >                        ld       hl,(UBnkrotmatRoofvY)
  13++DAB0 22 51 9A    >                        ld       (varR),hl
  13++DAB3             >                        ldCopyByte  UBnkrotmatRoofvX, varP           ; set P to nosevX lo (may be redundant)
  13++DAB3 3A 1B C0    >                        ld       a,(UBnkrotmatRoofvX)
  13++DAB6 32 4D 99    >                        ld       (varP),a
  13++DAB9 3A 1C C0    >                        ld a,(UBnkrotmatRoofvX+1)                    ; Set A = -nosev_x_hi
  13++DABC EE 80       >                        xor $80                             ;
  13++DABE CD 1B AA    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  13++DAC1 ED 53 1D C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  13++DAC5             >                        ldCopy2Byte UBnkrotmatRoofvX, varR           ; Set (S R) = nosev_x
  13++DAC5 2A 1B C0    >                        ld       hl,(UBnkrotmatRoofvX)
  13++DAC8 22 51 9A    >                        ld       (varR),hl
  13++DACB 3A 1E C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
  13++DACE CD 1B AA    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  13++DAD1 ED 53 1B C0 >                        ld  (UBnkrotmatRoofvX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  14++DAD5 C9                                   ret
  15++DAD6
  16++DAD6              ApplyMyPitchToNosev:    ApplyMyRollToVector BETA, UBnkrotmatNosevZ, UBnkrotmatNosevY
  16++DAD6             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  16++DAD6 3A 58 99    >                        ld       a,(BETA)
  16++DAD9 32 50 9A    >                        ld       (varQ),a
  16++DADC             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
  16++DADC 2A 23 C0    >                        ld       hl,(UBnkrotmatNosevY)
  16++DADF 22 51 9A    >                        ld       (varR),hl
  16++DAE2             >                        ldCopyByte  UBnkrotmatNosevZ, varP           ; set P to nosevX lo (may be redundant)
  16++DAE2 3A 25 C0    >                        ld       a,(UBnkrotmatNosevZ)
  16++DAE5 32 4D 99    >                        ld       (varP),a
  16++DAE8 3A 26 C0    >                        ld a,(UBnkrotmatNosevZ+1)                    ; Set A = -nosev_x_hi
  16++DAEB EE 80       >                        xor $80                             ;
  16++DAED CD 1B AA    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  16++DAF0 ED 53 23 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  16++DAF4             >                        ldCopy2Byte UBnkrotmatNosevZ, varR           ; Set (S R) = nosev_x
  16++DAF4 2A 25 C0    >                        ld       hl,(UBnkrotmatNosevZ)
  16++DAF7 22 51 9A    >                        ld       (varR),hl
  16++DAFA 3A 24 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
  16++DAFD CD 1B AA    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  16++DB00 ED 53 25 C0 >                        ld  (UBnkrotmatNosevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  17++DB04 C9                                   ret
  18++DB05              ApplyMyPitchToSidev:    ApplyMyRollToVector BETA, UBnkrotmatSidevZ, UBnkrotmatSidevY
  18++DB05             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  18++DB05 3A 58 99    >                        ld       a,(BETA)
  18++DB08 32 50 9A    >                        ld       (varQ),a
  18++DB0B             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
  18++DB0B 2A 17 C0    >                        ld       hl,(UBnkrotmatSidevY)
  18++DB0E 22 51 9A    >                        ld       (varR),hl
  18++DB11             >                        ldCopyByte  UBnkrotmatSidevZ, varP           ; set P to nosevX lo (may be redundant)
  18++DB11 3A 19 C0    >                        ld       a,(UBnkrotmatSidevZ)
  18++DB14 32 4D 99    >                        ld       (varP),a
  18++DB17 3A 1A C0    >                        ld a,(UBnkrotmatSidevZ+1)                    ; Set A = -nosev_x_hi
  18++DB1A EE 80       >                        xor $80                             ;
  18++DB1C CD 1B AA    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  18++DB1F ED 53 17 C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  18++DB23             >                        ldCopy2Byte UBnkrotmatSidevZ, varR           ; Set (S R) = nosev_x
  18++DB23 2A 19 C0    >                        ld       hl,(UBnkrotmatSidevZ)
  18++DB26 22 51 9A    >                        ld       (varR),hl
  18++DB29 3A 18 C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
  18++DB2C CD 1B AA    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  18++DB2F ED 53 19 C0 >                        ld  (UBnkrotmatSidevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  19++DB33 C9                                   ret
  20++DB34              ApplyMyPitchToRoofv:    ApplyMyRollToVector BETA, UBnkrotmatRoofvZ, UBnkrotmatRoofvY
  20++DB34             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  20++DB34 3A 58 99    >                        ld       a,(BETA)
  20++DB37 32 50 9A    >                        ld       (varQ),a
  20++DB3A             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
  20++DB3A 2A 1D C0    >                        ld       hl,(UBnkrotmatRoofvY)
  20++DB3D 22 51 9A    >                        ld       (varR),hl
  20++DB40             >                        ldCopyByte  UBnkrotmatRoofvZ, varP           ; set P to nosevX lo (may be redundant)
  20++DB40 3A 1F C0    >                        ld       a,(UBnkrotmatRoofvZ)
  20++DB43 32 4D 99    >                        ld       (varP),a
  20++DB46 3A 20 C0    >                        ld a,(UBnkrotmatRoofvZ+1)                    ; Set A = -nosev_x_hi
  20++DB49 EE 80       >                        xor $80                             ;
  20++DB4B CD 1B AA    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  20++DB4E ED 53 1D C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  20++DB52             >                        ldCopy2Byte UBnkrotmatRoofvZ, varR           ; Set (S R) = nosev_x
  20++DB52 2A 1F C0    >                        ld       hl,(UBnkrotmatRoofvZ)
  20++DB55 22 51 9A    >                        ld       (varR),hl
  20++DB58 3A 1E C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
  20++DB5B CD 1B AA    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  20++DB5E ED 53 1F C0 >                        ld  (UBnkrotmatRoofvZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  21++DB62 C9                                   ret
  22++DB63
  23++DB63
  24++DB63              APPequPosPlusAPP:       MACRO    Position, PositionSign
  25++DB63 ~                                    push    bc
  26++DB63 ~                                    ld      c,a                         ; save original value of a into c
  27++DB63 ~                                    ld      a,(PositionSign)
  28++DB63 ~                                    ld      b,a
  29++DB63 ~                                    ld      a,c
  30++DB63 ~                                    xor     b                           ; a = a xor x postition sign
  31++DB63 ~                                    jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  32++DB63 ~            ; Signs are the same to we just add and take which ever sign
  33++DB63 ~                                    ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  34++DB63 ~                                    ld      hl,(Position)
  35++DB63 ~                                    add     hl,de
  36++DB63 ~                                    ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  37++DB63 ~                                    ld      a,c                         ; and a = original sign as they were both the same
  38++DB63 ~                                    pop     bc
  39++DB63 ~                                    ret
  40++DB63 ~            ; Signs are opposite so we subtract
  41++DB63 ~            .MV50:                  ld      de,(varPp1)
  42++DB63 ~                                    ld      hl,(Position)
  43++DB63 ~                                    or      a
  44++DB63 ~                                    sbc     hl,de
  45++DB63 ~                                    jr      c,.MV51                     ; if the result was negative then negate result
  46++DB63 ~                                    ld      a,c                         ; get back the original sign
  47++DB63 ~                                    ld      (varPp1),hl                 ; and save result to P[2][1]
  48++DB63 ~                                    xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  49++DB63 ~                                    pop     bc
  50++DB63 ~                                    ret
  51++DB63 ~            .MV51:                  NegHL
  52++DB63 ~                                    ld      (varPp1),hl
  53++DB63 ~                                    ld      a,c                         ; the original sign will still be good
  54++DB63 ~                                    pop     bc
  55++DB63 ~                                    ret
  56++DB63                                      ENDM
  57++DB63
  58++DB63
  59++DB63              APPequXPosPlusAPP:     APPequPosPlusAPP UBnKxlo, UBnKxsgn
  59++DB63 C5          >                        push    bc
  59++DB64 4F          >                        ld      c,a                         ; save original value of a into c
  59++DB65 3A 0E C0    >                        ld      a,(UBnKxsgn)
  59++DB68 47          >                        ld      b,a
  59++DB69 79          >                        ld      a,c
  59++DB6A A8          >                        xor     b                           ; a = a xor x postition sign
  59++DB6B FA 7C DB    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  59++DB6E             >; Signs are the same to we just add and take which ever sign
  59++DB6E ED 5B 4E 99 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  59++DB72 2A 0C C0    >                        ld      hl,(UBnKxlo)
  59++DB75 19          >                        add     hl,de
  59++DB76 22 4E 99    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  59++DB79 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  59++DB7A C1          >                        pop     bc
  59++DB7B C9          >                        ret
  59++DB7C             >; Signs are opposite so we subtract
  59++DB7C ED 5B 4E 99 >.MV50:                  ld      de,(varPp1)
  59++DB80 2A 0C C0    >                        ld      hl,(UBnKxlo)
  59++DB83 B7          >                        or      a
  59++DB84 ED 52       >                        sbc     hl,de
  59++DB86 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  59++DB88 79          >                        ld      a,c                         ; get back the original sign
  59++DB89 22 4E 99    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  59++DB8C EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  59++DB8E C1          >                        pop     bc
  59++DB8F C9          >                        ret
  59++DB90             >.MV51:                  NegHL
  59++DB90 AF          >                    xor a
  59++DB91 95          >                    sub l
  59++DB92 6F          >                    ld l,a
  59++DB93 9F          >                    sbc a,a
  59++DB94 94          >                    sub h
  59++DB95 67          >                    ld h,a
  59++DB96 22 4E 99    >                        ld      (varPp1),hl
  59++DB99 79          >                        ld      a,c                         ; the original sign will still be good
  59++DB9A C1          >                        pop     bc
  59++DB9B C9          >                        ret
  60++DB9C
  61++DB9C              APPequYPosPlusAPP:     APPequPosPlusAPP UBnKylo, UBnKysgn
  61++DB9C C5          >                        push    bc
  61++DB9D 4F          >                        ld      c,a                         ; save original value of a into c
  61++DB9E 3A 11 C0    >                        ld      a,(UBnKysgn)
  61++DBA1 47          >                        ld      b,a
  61++DBA2 79          >                        ld      a,c
  61++DBA3 A8          >                        xor     b                           ; a = a xor x postition sign
  61++DBA4 FA B5 DB    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  61++DBA7             >; Signs are the same to we just add and take which ever sign
  61++DBA7 ED 5B 4E 99 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  61++DBAB 2A 0F C0    >                        ld      hl,(UBnKylo)
  61++DBAE 19          >                        add     hl,de
  61++DBAF 22 4E 99    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  61++DBB2 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  61++DBB3 C1          >                        pop     bc
  61++DBB4 C9          >                        ret
  61++DBB5             >; Signs are opposite so we subtract
  61++DBB5 ED 5B 4E 99 >.MV50:                  ld      de,(varPp1)
  61++DBB9 2A 0F C0    >                        ld      hl,(UBnKylo)
  61++DBBC B7          >                        or      a
  61++DBBD ED 52       >                        sbc     hl,de
  61++DBBF 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  61++DBC1 79          >                        ld      a,c                         ; get back the original sign
  61++DBC2 22 4E 99    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  61++DBC5 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  61++DBC7 C1          >                        pop     bc
  61++DBC8 C9          >                        ret
  61++DBC9             >.MV51:                  NegHL
  61++DBC9 AF          >                    xor a
  61++DBCA 95          >                    sub l
  61++DBCB 6F          >                    ld l,a
  61++DBCC 9F          >                    sbc a,a
  61++DBCD 94          >                    sub h
  61++DBCE 67          >                    ld h,a
  61++DBCF 22 4E 99    >                        ld      (varPp1),hl
  61++DBD2 79          >                        ld      a,c                         ; the original sign will still be good
  61++DBD3 C1          >                        pop     bc
  61++DBD4 C9          >                        ret
  62++DBD5
  63++DBD5              APPequZPosPlusAPP:     APPequPosPlusAPP UBnKzlo, UBnKzsgn
  63++DBD5 C5          >                        push    bc
  63++DBD6 4F          >                        ld      c,a                         ; save original value of a into c
  63++DBD7 3A 14 C0    >                        ld      a,(UBnKzsgn)
  63++DBDA 47          >                        ld      b,a
  63++DBDB 79          >                        ld      a,c
  63++DBDC A8          >                        xor     b                           ; a = a xor x postition sign
  63++DBDD FA EE DB    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  63++DBE0             >; Signs are the same to we just add and take which ever sign
  63++DBE0 ED 5B 4E 99 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  63++DBE4 2A 12 C0    >                        ld      hl,(UBnKzlo)
  63++DBE7 19          >                        add     hl,de
  63++DBE8 22 4E 99    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  63++DBEB 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  63++DBEC C1          >                        pop     bc
  63++DBED C9          >                        ret
  63++DBEE             >; Signs are opposite so we subtract
  63++DBEE ED 5B 4E 99 >.MV50:                  ld      de,(varPp1)
  63++DBF2 2A 12 C0    >                        ld      hl,(UBnKzlo)
  63++DBF5 B7          >                        or      a
  63++DBF6 ED 52       >                        sbc     hl,de
  63++DBF8 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  63++DBFA 79          >                        ld      a,c                         ; get back the original sign
  63++DBFB 22 4E 99    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  63++DBFE EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  63++DC00 C1          >                        pop     bc
  63++DC01 C9          >                        ret
  63++DC02             >.MV51:                  NegHL
  63++DC02 AF          >                    xor a
  63++DC03 95          >                    sub l
  63++DC04 6F          >                    ld l,a
  63++DC05 9F          >                    sbc a,a
  63++DC06 94          >                    sub h
  63++DC07 67          >                    ld h,a
  63++DC08 22 4E 99    >                        ld      (varPp1),hl
  63++DC0B 79          >                        ld      a,c                         ; the original sign will still be good
  63++DC0C C1          >                        pop     bc
  63++DC0D C9          >                        ret
  64++DC0E
  65++DC0E              ; rollWork holds Alpha intermidate results
  66++DC0E 00 00 00     rollWork      DS 3
  67++DC11              rollWorkp1    equ rollWork
  68++DC11              rollWorkp2    equ rollWork+1
  69++DC11              rollWorkp3    equ rollWork+2
  70++DC11
  71++DC11              ;----------------------------------------------------------------------------------------------------------------------------------
  72++DC11              ; based on MVEIT part 4 of 9
  73++DC11 3A 67 99     ApplyMyRollAndPitch:    ld      a,(ALP1)                    ; get roll magnitude
  74++DC14 21 5A 99                             ld      hl,BET1                     ; and pitch
  75++DC17 B6                                   or      (hl)
  76++DC18 CA D2 DC                             jp      z,.NoRotation               ; if both zero then don't compute
  77++DC1B                                      ;break
  78++DC1B              ; P[210] = x * alph (we use P[2]P[1] later as result/256
  79++DC1B 5F                                   ld      e,a                         ; e = roll magnitude
  80++DC1C 2A 0C C0                             ld      hl,(UBnKxlo)                ; hl = ship x pos
  81++DC1F CD 77 AA                             call    AHLequHLmulE                ; MULTU2-2 AHL = UbnkXlo * Alp1 both unsigned
  82++DC22 32 4F 99                             ld      (varPhi2),a                 ; set P[2] to high byte to help with ./256
  83++DC25 22 4D 99                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo * Alph1
  84++DC28              ; A = Flip sign
  85++DC28 3A 69 99                             ld      a,(ALP2FLIP)                ; flip the current roll angle alpha and xor with x sign
  86++DC2B 21 0E C0                             ld      hl,UBnKxsgn                 ; and xor with x pos sign
  87++DC2E AE                                   xor     (hl)                        ; so now  (A P+2 P+1) = - (x_sign x_hi x_lo) * alpha / 256
  88++DC2F              ; AP[2]P[1] =Y + AP[2]P[1] (i.e. Previous APP/256)
  89++DC2F CD 9C DB                             call    APPequYPosPlusAPP           ; MVT6 calculate APP = y - (x * alpha / 256)
  90++DC32              ; K2 = AP[2][1] K2(3 2 1) = (A P+2 P+1) = y - x * alpha / 256
  91++DC32 32 10 DC                             ld      (rollWorkp3),a               ; k2+3 = sign of result
  92++DC35 22 0E DC                             ld      (rollWorkp1),hl             ; k2+1,2 = result
  93++DC38              ; P[210] = K2[2 1] * Beta  = (A ~P) * X
  94++DC38 3A 5A 99                             ld      a,(BET1)                    ; a = magnitude of pitch
  95++DC3B 5F                                   ld      e,a
  96++DC3C CD 77 AA                             call    AHLequHLmulE                ; MLTU2-2 AHL = (P+2 P+1) * BET1 or by now ((UbnkXlo * Alph1)/256 * Bet1)
  97++DC3F 32 4F 99                             ld      (varPp2),a                   ; save highest byte in P2
  98++DC42 22 4D 99                             ld      (varP),hl
  99++DC45              ; Fetch sign of previosu cal and xor with BETA inverted
 100++DC45 3A 10 DC                             ld      a,(rollWorkp3)
 101++DC48 5F                                   ld      e,a
 102++DC49 3A 5B 99                             ld      a,(BET2)
 103++DC4C AB                                   xor     e                           ; so we get the sign of K3 and xor with pitch sign
 104++DC4D              ; Z = P[210] =Z + APP
 105++DC4D CD D5 DB                             call    APPequZPosPlusAPP           ; MVT6
 106++DC50 32 14 C0                             ld      (UBnKzsgn),a                ; save result back into z
 107++DC53 22 12 C0                             ld      (UBnKzlo),hl
 108++DC56              ; A[P1]P[0] = z * Beta
 109++DC56 3A 5A 99                             ld      a,(BET1)                    ; get pitch back again for mulitply in original it was kept in Q so no fetch needed
 110++DC59 5F                                   ld      e,a
 111++DC5A CD 77 AA                             call    AHLequHLmulE                ; MULTU2 P2 P1 was already in hl (A P+1 P) = (z_hi z_lo) * beta
 112++DC5D 32 4F 99                             ld      (varPp2),a                  ; P2 = high byte of result
 113++DC60 22 4D 99                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo & Alph1
 114++DC63              ; A xor BET2,Zsign
 115++DC63 3A 10 DC                             ld      a,(rollWorkp3)               ; get K3 (sign of y) and store it in y pos
 116++DC66 32 11 C0                             ld      (UBnKysgn),a                ; save result back into y
 117++DC69 5F                                   ld      e,a                         ; a = y sign Xor pitch rate sign
 118++DC6A 3A 5B 99                             ld      a,(BET2)                    ;
 119++DC6D AB                                   xor     e                           ;
 120++DC6E 5F                                   ld      e,a                         ; now xor it with z sign too
 121++DC6F 3A 14 C0                             ld      a,(UBnKzsgn)                ;
 122++DC72 AB                                   xor     e                           ; so now a = sign of y * beta * sign y * sign z
 123++DC73 F2 82 DC                             jp      p,.MV43                     ; if result is pve beta * z and y have differetn signs
 124++DC76 2A 4E 99                             ld      hl,(varPp1)
 125++DC79 ED 5B 0E DC                          ld      de,(rollWorkp1)
 126++DC7D B7                                   or      a
 127++DC7E 19                                   add     hl,de
 128++DC7F C3 9C DC                             jp      .MV44
 129++DC82 2A 0E DC     .MV43:                  ld      hl,(rollWorkp1)
 130++DC85 ED 5B 4E 99                          ld      de,(varPp1)
 131++DC89 B7                                   or      a
 132++DC8A ED 52                                sbc     hl,de                       ; (y_hi y_lo) = K2(2 1) - P(2 1)
 133++DC8C 30 0E                                jr      nc,.MV44                    ; if there was no over flow carry on
 134++DC8E                                      NegHL
 134++DC8E AF          >                    xor a
 134++DC8F 95          >                    sub l
 134++DC90 6F          >                    ld l,a
 134++DC91 9F          >                    sbc a,a
 134++DC92 94          >                    sub h
 134++DC93 67          >                    ld h,a
 135++DC94 3A 11 C0                             ld      a,(UBnKysgn)                ; flip sign bit TODO, we may have to remove xor as planets and suns are sign + 23 bit xpos
 136++DC97 EE 80                                xor     SignOnly8Bit
 137++DC99 32 11 C0                             ld      (UBnKysgn),a
 138++DC9C              ; by here we have (y_sign y_hi y_lo) = K2(2 1) - P(2 1) = K2 - beta * z
 139++DC9C 22 0F C0     .MV44:                  ld      (UBnKylo),hl                ; we do save here to avoid two writes if MV43 ended up with a 2s'c conversion
 140++DC9F 3A 67 99                             ld      a,(ALP1)                    ; get roll magnitude
 141++DCA2 5F                                   ld      e,a
 142++DCA3 2A 0F C0                             ld      hl,(UBnKylo)
 143++DCA6 CD 77 AA                             call    AHLequHLmulE                ; MLTU2-2 AHL = (y_hi y_lo) * alpha
 144++DCA9 32 4F 99                             ld      (varPp2),a                  ; store high byte P(2 1 0) = (y_hi y_lo) * alpha
 145++DCAC 22 4D 99                             ld      (varP),hl
 146++DCAF 3A 68 99                             ld      a,(ALP2)
 147++DCB2 5F                                   ld      e,a
 148++DCB3 3A 11 C0                             ld      a,(UBnKysgn)
 149++DCB6 AB                                   xor     e                           ; a = sign of roll xor y so now we have (A P+2 P+1) = (y_sign y_hi y_lo) * alpha / 256
 150++DCB7 CD 63 DB                             call    APPequXPosPlusAPP           ; MVT6 Set (A P+2 P+1) = (x_sign x_hi x_lo) + (A P+2 P+1) = x + y * alpha / 256
 151++DCBA 32 0E C0                             ld      (UBnKxsgn),a                ; save resutl stright into X pos
 152++DCBD 22 0C C0                             ld      (UBnKxlo),hl
 153++DCC0                                      ;break
 154++DCC0                                      ; if its not a sun then apply to local orientation
 155++DCC0
 156++DCC0 CD 49 DA                             call    ApplyMyRollToNosev
 157++DCC3 CD 78 DA                             call    ApplyMyRollToSidev
 158++DCC6 CD A7 DA                             call    ApplyMyRollToRoofv
 159++DCC9 CD D6 DA                             call    ApplyMyPitchToNosev
 160++DCCC CD 05 DB                             call    ApplyMyPitchToSidev
 161++DCCF CD 34 DB                             call    ApplyMyPitchToRoofv
 162++DCD2 3A 4C 9A     .NoRotation:            ld      a,(DELTA)                   ; get speed
 163++DCD5 16 00                                ld      d,0
 164++DCD7 5F                                   ld      e,a                         ; de = speed in low byte
 165++DCD8 2A 12 C0                             ld      hl,(UBnKzlo)                ; hl = z position
 166++DCDB 3A 14 C0                             ld      a,(UBnKzsgn)                ; b = z sign
 167++DCDE 47                                   ld      b,a                         ;
 168++DCDF 0E 80                                ld      c,$80                       ; c = -ve as we are always moving forwards
 169++DCE1 CD 52 B0                             call    ADDHLDESignBC               ; update speed
 170++DCE4 22 12 C0                             ld      (UBnKzlo),hl                ; write back to zpos
 171++DCE7 32 14 C0                             ld      (UBnKzsgn),a                ;
 172++DCEA C9                                   ret
# file closed: ././Universe/Ships/ApplyMyRollAndPitch.asm
1460+ DCEB                          INCLUDE "./Universe/Ships/ApplyShipRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyShipRollAndPitch.asm
   1++DCEB              ;----------------------------------------------------------------------------------------------------------------------------------
   2++DCEB              ; based on MVEIT part 4 of 9
   3++DCEB 3A 34 C0     ApplyShipRollAndPitch:  ld      a,(UBnKRotZCounter)             ; get roll magnitudeShip Pitch counter
   4++DCEE 47                                   ld      b,a
   5++DCEF E6 80                                and     SignOnly8Bit
   6++DCF1 4F                                   ld      c,a
   7++DCF2 32 3C C0                             ld      (univRAT2),a                ; get sign of pitch
   8++DCF5 78                                   ld      a,b
   9++DCF6 E6 7F                                and     SignMask8Bit                ; and magnitude
  10++DCF8 28 3A                                jr      z,.ProcessRoll
  11++DCFA FE 7F        .CheckPitchDamping:     cp      SignMask8Bit
  12++DCFC 28 01                                jr      z,.NoPitchDamping
  13++DCFE 3D           .ApplyPitchDamping:     dec     a                           ; pitch = pitch-1
  14++DCFF 32 3D C0     .NoPitchDamping         ld      (univRAT2Val),a
  15++DD02 47                                   ld      b,a
  16++DD03 B1                                   or      c                           ; bring sign back in
  17++DD04 32 34 C0                             ld      (UBnKRotZCounter),a             ; rotZCounter = updated value
  18++DD07 21 1B C0     .PitchSAxes:            ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevY
  19++DD0A 22 36 99                             ld	    (varAxis1),hl
  20++DD0D 21 21 C0                             ld	    hl,UBnkrotmatNosevX; UBnkrotmatSidevZ
  21++DD10 22 38 99                             ld	    (varAxis2),hl
  22++DD13 CD 0E CC                             call    MVS5RotateAxis
  23++DD16 21 1D C0     .PitchRAxes:            ld	    hl,UBnkrotmatRoofvY
  24++DD19 22 36 99                             ld	    (varAxis1),hl
  25++DD1C 21 23 C0                             ld	    hl,UBnkrotmatNosevY;UBnkrotmatRoofvZ
  26++DD1F 22 38 99                             ld	    (varAxis2),hl
  27++DD22 CD 0E CC                             call    MVS5RotateAxis
  28++DD25 21 1F C0     .PitchNAxes:            ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevY
  29++DD28 22 36 99                             ld	    (varAxis1),hl
  30++DD2B 21 25 C0                             ld	    hl,UBnkrotmatNosevZ
  31++DD2E 22 38 99                             ld	    (varAxis2),hl
  32++DD31 CD 0E CC                             call    MVS5RotateAxis
  33++DD34 3A 33 C0     .ProcessRoll:           ld      a,(UBnKRotXCounter)
  34++DD37 47                                   ld      b,a
  35++DD38 E6 80                                and     SignOnly8Bit
  36++DD3A 4F                                   ld      c,a
  37++DD3B 32 3C C0                             ld      (univRAT2),a                ; get sign of pitch
  38++DD3E 78                                   ld      a,b
  39++DD3F E6 7F                                and     SignMask8Bit                ; and magnitude
  40++DD41 C8                                   ret     z                           ; if no work to do then exit
  41++DD42 FE 7F        .CheckRollDamping:      cp      SignMask8Bit
  42++DD44 28 01                                jr      z,.NoRollDamping
  43++DD46 3D           .ApplyRollDamping:      dec      a                     ; pitch = pitch-1
  44++DD47 32 3D C0     .NoRollDamping          ld      (univRAT2Val),a
  45++DD4A 47                                   ld      b,a
  46++DD4B B1                                   or      c                           ; bring sign back in
  47++DD4C 32 33 C0                             ld      (UBnKRotXCounter),a             ; rotZCounter = updated value
  48++DD4F 21 1B C0     .RollSAxis:           	ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevX
  49++DD52 22 36 99                             ld	    (varAxis1),hl
  50++DD55 21 15 C0                             ld	    hl,UBnkrotmatSidevX; UBnkrotmatSidevY
  51++DD58 22 38 99                             ld	    (varAxis2),hl
  52++DD5B CD 0E CC                             call    MVS5RotateAxis
  53++DD5E 21 1D C0     .RollRAxis:             ld	    hl,UBnkrotmatRoofvY; UBnkrotmatRoofvX
  54++DD61 22 36 99                             ld	    (varAxis1),hl
  55++DD64 21 17 C0                             ld	    hl,UBnkrotmatSidevY; UBnkrotmatRoofvY
  56++DD67 22 38 99                             ld	    (varAxis2),hl
  57++DD6A CD 0E CC                             call    MVS5RotateAxis
  58++DD6D 21 1F C0     .RollNAxis:             ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevX
  59++DD70 22 36 99                             ld	    (varAxis1),hl
  60++DD73 21 19 C0                             ld	    hl,UBnkrotmatSidevZ; UBnkrotmatNosevY
  61++DD76 22 38 99                             ld	    (varAxis2),hl
  62++DD79 CD 0E CC                             call    MVS5RotateAxis
  63++DD7C C9                                   ret
  64++DD7D
# file closed: ././Universe/Ships/ApplyShipRollAndPitch.asm
1461+ DD7D                          INCLUDE "./ModelRender/DrawLines.asm"
# file opened: ././ModelRender/DrawLines.asm
   1++DD7D
   2++DD7D              ; ---------------------------------------------------------------------------------------------------------------------------------
   3++DD7D 00           DrawLinesCounter		db	0
   4++DD7E              ; Initial tests look OK
   5++DD7E              LL155:;
   6++DD7E              ClearLine:                                  ; CLEAR LINEstr visited by EE31 when XX3 heap ready to draw/erase lines in XX19 heap.
   7++DD7E                    ;break                                                                             ; ObjectInFront:
   8++DD7E 3E 65        DrawLines:              ld	a,$65 ; DEBUG
   9++DD80 FD 6F                                ld		iyl,a							; set ixl to colour (assuming we come in here with a = colour to draw)
  10++DD82 3A 00 C3                             ld		a,(UbnkLineArrayLen)			; get number of lines
  11++DD85                                      ReturnIfAIsZero   						; No lines then bail out.
  11++DD85 A7          >                        and     a
  11++DD86 C8          >                        ret     z
  12++DD87 FD 67                                ld		iyh,a			                ; number of lines still to draw
  13++DD89 21 0E C2                             ld		hl,UbnkLineArray
  14++DD8C              ;LL27:                                       ; counter Y, Draw clipped lines in XX19 ship lines heap
  15++DD8C 4E           DrawXX19ClippedLines:   ld      c,(hl)                          ; (XX19),Y c = varX1
  16++DD8D 23                                   inc     hl
  17++DD8E 46                                   ld      b,(hl)                          ; bc = point1 Y,X
  18++DD8F 23                                   inc     hl
  19++DD90              ;;DEBUGTEST        push bc
  20++DD90              ;;DEBUGTEST        push hl
  21++DD90              ;;DEBUGTEST        push de
  22++DD90              ;;DEBUGTEST        ld  a,$3F
  23++DD90              ;;DEBUGTEST        MMUSelectLayer2
  24++DD90              ;;DEBUGTEST        call    l2_plot_pixel
  25++DD90              ;;DEBUGTEST        pop de
  26++DD90              ;;DEBUGTEST        pop hl
  27++DD90              ;;DEBUGTEST        pop bc
  28++DD90 5E                                   ld      e,(hl)                          ; c = varX1
  29++DD91 23                                   inc     hl
  30++DD92 56                                   ld      d,(hl)                          ; de = point2 Y,X
  31++DD93              ;;DEBUGTEST       push bc
  32++DD93              ;;DEBUGTEST       push hl
  33++DD93              ;;DEBUGTEST       push de
  34++DD93              ;;DEBUGTEST       push de
  35++DD93              ;;DEBUGTEST       pop  bc
  36++DD93              ;;DEBUGTEST       ld  a,$3F
  37++DD93              ;;DEBUGTEST       MMUSelectLayer2
  38++DD93              ;;DEBUGTEST       call    l2_plot_pixel
  39++DD93              ;;DEBUGTEST       pop de
  40++DD93              ;;DEBUGTEST       pop hl
  41++DD93              ;;DEBUGTEST       pop bc
  42++DD93 23                                   inc     hl
  43++DD94 E5                                   push	hl
  44++DD95 FD E5                                push    iy
  45++DD97 60                                   ld      h,b
  46++DD98 69                                   ld      l,c
  47++DD99                ;  call    l2_draw_any_line                ; call version of LOIN that used BCDE
  48++DD99 FD 7D                                ld		a,iyl							; get colour back before calling line draw
  49++DD9B                                      MMUSelectLayer2
  49++DD9B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  50++DD9F CD 1C E9                             call    LineHLtoDE
  51++DDA2 FD E1                                pop     iy
  52++DDA4 E1                                   pop	    hl
  53++DDA5 FD 25                                dec     iyh
  54++DDA7 20 E3                                jr		nz,DrawXX19ClippedLines
  55++DDA9 C9                                   ret                                     ; --- Wireframe end  \ LL118-1
  56++DDAA
# file closed: ././ModelRender/DrawLines.asm
1462+ DDAA              ; ---------------------------------------------------------------------------------------------------------------------------------
1463+ DDAA
1464+ DDAA              ; DIot seem to lawyas have Y = 0???
1465+ DDAA              ProcessDot:            ; break
1466+ DDAA CD 88 D0                             call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1467+ DDAD CD 0F 93                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1468+ DDB0 CD 3E D3                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1469+ DDB3 CD 0B D2                             call    InverseXX16                      ;#11; Invert rotation matrix
1470+ DDB6 21 00 00                             ld      hl,0
1471+ DDB9 32 83 C0                             ld      (UBnkXScaled),a
1472+ DDBC 32 85 C0                             ld      (UBnkYScaled),a
1473+ DDBF 32 87 C0                             ld      (UBnkZScaled),a
1474+ DDC2 AF                                   xor     a
1475+ DDC3 CD 35 92                             call    XX12EquNodeDotOrientation
1476+ DDC6 CD BF D0                             call    TransposeXX12ByShipToXX15
1477+ DDC9 CD 3C D1                             call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1478+ DDCC FD 21 CE C0                          ld      iy,UBnkNodeArray
1479+ DDD0 CD F2 D9                             call    ProjectNodeToEye
1480+ DDD3 C9                                   ret
1481+ DDD4
1482+ DDD4              ; .....................................................
1483+ DDD4              ; Process Nodes does the following:
1484+ DDD4              ; for each node:
1485+ DDD4              ;     see if node >
1486+ DDD4 00           PNXX20DIV6          DB      0
1487+ DDD5 00 00        PNVERTEXPTR         DW      0   ; DEBUG WILL USE LATER
1488+ DDD7 00 00        PNNODEPRT           DW      0   ; DEBUG WILL USE LATER
1489+ DDD9 00           PNLASTNORM          DB      0
1490+ DDDA              ProcessNodes:           ZeroA
1490+ DDDA AF          >                        xor a
1491+ DDDB 32 00 C3                             ld      (UbnkLineArrayLen),a
1492+ DDDE CD 88 D0                             call CopyRotmatToTransMat ; CopyRotToTransMacro                      ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1493+ DDE1 CD 0F 93                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1494+ DDE4 CD 3E D3                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1495+ DDE7 CD 0B D2                             call    InverseXX16                      ;#11; Invert rotation matrix
1496+ DDEA 21 25 C3                             ld      hl,UBnkHullVerticies
1497+ DDED 3A 14 C3                             ld      a,(VertexCtX6Addr)               ; get Hull byte#8 = number of vertices *6                                   ;;;
1498+ DDF0 4F           GetActualVertexCount:   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1499+ DDF1 4F                                   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1500+ DDF2 16 06                                ld      d,6
1501+ DDF4 CD 81 AC                             call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1502+ DDF7 41                                   ld      b,c                              ; c = number of vertices
1503+ DDF8 FD 21 CE C0                          ld      iy,UBnkNodeArray
1504+ DDFC              LL48:
1505+ DDFC C5           PointLoop:	            push	bc                                  ; save counters
1506+ DDFD E5                                   push	hl                                  ; save verticies list pointer
1507+ DDFE FD E5                                push	iy                                  ; save Screen plot array pointer
1508+ DE00 78                                   ld      a,b
1509+ DE01                                      ;break
1510+ DE01 CD 6F D9                             call    CopyNodeToXX15                      ; copy verices at hl to xx15
1511+ DE04 3A 84 C0                             ld		a,(UBnkXScaledSign)
1512+ DE07 CD 35 92                             call    XX12EquNodeDotOrientation
1513+ DE0A CD BF D0                             call    TransposeXX12ByShipToXX15
1514+ DE0D CD 3C D1                             call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1515+ DE10 FD E1                                pop		iy                                  ; get back screen plot array pointer
1516+ DE12 CD F2 D9                             call    ProjectNodeToEye                     ; set up screen plot list entry
1517+ DE15                 ; ld      hl,UbnkLineArrayLen
1518+ DE15                ;  inc     (hl)                                ; another node done
1519+ DE15 FD E5        ReadyForNextPoint:      push	iy                                  ; copy screen plot pointer to hl
1520+ DE17 E1                                   pop		hl
1521+ DE18 3E 04                                ld		a,4
1522+ DE1A ED 31                                add		hl,a
1523+ DE1C E5                                   push	hl                                  ; write it back at iy + 4
1524+ DE1D FD E1                                pop		iy								    ; and put it in iy again
1525+ DE1F E1                                   pop		hl                                  ; get hl back as vertex list
1526+ DE20 3E 06                                ld		a,6
1527+ DE22 ED 31                                add 	hl,a                                ; and move to next vertex
1528+ DE24 C1                                   pop		bc                                  ; get counter back
1529+ DE25 10 D5                                djnz	PointLoop
1530+ DE27              ; ......................................................
1531+ DE27                                      ClearCarryFlag
1531+ DE27 B7          >                        or a
1532+ DE28 C9                                   ret
1533+ DE29
1534+ DE29              ; ......................................................
1535+ DE29 CD EC D5     ProcessShip:            call    CheckDistance               ; checks for z -ve and outside view frustrum
1536+ DE2C D8                                   ret     c                           ; carry flag means drop out
1537+ DE2D 3A 9C C0     .IsItADot:              ld      a,(UBnKDrawAsDot)           ; if its just a dot then don't draw
1538+ DE30                                      JumpIfATrue .CarryOnWithDraw
1538+ DE30 A7          >                        and     a
1538+ DE31 CA 54 DE    >                        jp      z, .CarryOnWithDraw
1539+ DE34 CD AA DD     .itsJustADot:           call    ProcessDot
1540+ DE37 ED 4B CE C0                          ld      bc,(UBnkNodeArray)          ; if its at dot range get X
1541+ DE3B ED 5B D0 C0                          ld      de,(UBnkNodeArray+2)        ; and Y
1542+ DE3F 78                                   ld      a,b                         ; if high byte components are not 0 then off screen
1543+ DE40 B2                                   or      d                           ;
1544+ DE41 C0                                   ret     nz                          ;
1545+ DE42 7B                                   ld      a,e
1546+ DE43 E6 80                                and     %10000000                   ; check to see if Y > 128
1547+ DE45 C0                                   ret     nz
1548+ DE46 43                                   ld      b,e                         ; now b = y and c = x
1549+ DE47 3E FF                                ld      a,L2ColourWHITE_1           ; just draw a pixel
1550+ DE49 3E E0                                ld      a,224
1551+ DE4B                                      MMUSelectLayer2                     ; then go to update radar
1551+ DE4B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1552+ DE4F CD 29 E1                             call    l2_plot_pixel               ;
1553+ DE52                                      ClearCarryFlag
1553+ DE52 B7          >                        or a
1554+ DE53 C9                                   ret
1555+ DE54              .CarryOnWithDraw:       ;break
1556+ DE54              ;DEBUG                        ld      a,(UBnkaiatkecm)            ; if its exploding then we just draw
1557+ DE54              ;DEBUG                        and     ShipExploding               ; clouds of pixels
1558+ DE54              ;DEBUG                        jr      nz,.ExplodingCloud          ; .
1559+ DE54 CD DA DD                             call    ProcessNodes                ; process notes is the poor performer or check distnace is not culling
1560+ DE57 CD 3A D6                             call    CullV2
1561+ DE5A CD E9 DE                             call    PrepLines
1562+ DE5D CD 7E DD                             call    DrawLines
1563+ DE60                                      ClearCarryFlag
1563+ DE60 B7          >                        or a
1564+ DE61 C9                                   ret
1565+ DE62 DD 01        .ExplodingCloud:        break
1566+ DE64 C9                                   ret
1567+ DE65              ; ......................................................
1568+ DE65
1569+ DE65              ;-LL49-----------------------------------------------------------------------------------------------------------------------------
1570+ DE65              ;  Entering Here we have the following:
1571+ DE65              ;  XX15(1 0) = vertex x-coordinate but sign not populated
1572+ DE65              ;  XX15(3 2) = vertex y-coordinate but sign not populated
1573+ DE65              ;  XX15(5 4) = vertex z-coordinate but sign not populated
1574+ DE65              ;
1575+ DE65              ;  XX16(  1 0)sidev_x   (3 2)roofv_x   (5 4)nosev_x
1576+ DE65              ;  XX16(  7 6)sidev_y   (9 8)roofv_y (11 10)nosev_y
1577+ DE65              ;  XX16(13 12)sidev_z (15 14)roofv_z (17 16)nosev_z
1578+ DE65              ;--------------------------------------------------------------------------------------------------------
1579+ DE65              AddLaserBeamLine:
1580+ DE65              ; this code is a bag of shit and needs re-writing
1581+ DE65              GetGunVertexNode:
1582+ DE65 3A 12 C3             ld          a,(GunVertexAddr)                   ; Hull byte#6, gun vertex*4 (XX0),Y
1583+ DE68 21 CE C0             ld          hl,UBnkNodeArray                    ; list of lines to read
1584+ DE6B ED 31                add         hl,a                                ; HL = address of GunVertexOnNodeArray
1585+ DE6D FD 2E 00             ld          iyl,0
1586+ DE70              MoveX1PointToXX15:
1587+ DE70 4E                   ld          c,(hl)                              ;
1588+ DE71 23                   inc         hl
1589+ DE72 46                   ld          b,(hl)                              ; bc = x1 of gun vertex
1590+ DE73 23                   inc         hl
1591+ DE74 ED 43 83 C0          ld          (UBnkX1),bc
1592+ DE78 0C                   inc         c
1593+ DE79 C8                   ret         z                                   ; was c 255?
1594+ DE7A 04                   inc         b
1595+ DE7B C8                   ret         z                                   ; was c 255?
1596+ DE7C              MoveY1PointToXX15:
1597+ DE7C 4E                   ld          c,(hl)                              ;
1598+ DE7D 23                   inc         hl
1599+ DE7E 46                   ld          b,(hl)                              ; bc = y1 of gun vertex
1600+ DE7F 23                   inc         hl
1601+ DE80 ED 43 85 C0          ld          (UBnkY1),bc
1602+ DE84              SetX2PointToXX15:
1603+ DE84 01 00 00             ld          bc,0                                ; set X2 to 0
1604+ DE87 ED 43 87 C0          ld          (UBnkX2),bc
1605+ DE8B 3A 12 C0             ld          a,(UBnKzlo)
1606+ DE8E 4F                   ld          c,a
1607+ DE8F              SetY2PointToXX15:
1608+ DE8F ED 43 89 C0          ld          (UBnkY2),bc                         ; set Y2to 0
1609+ DE93 3A 0E C0             ld          a,(UBnKxsgn)
1610+ DE96                      JumpOnBitClear a,7,LL74SkipDec
1610+ DE96 CB 7F       >                        bit 	7,a
1610+ DE98 CA A0 DE    >                        jp      z,LL74SkipDec
1611+ DE9B              LL74DecX2:
1612+ DE9B 3E FF                ld          a,$FF
1613+ DE9D 32 87 C0             ld          (UBnkX2Lo),a                        ; rather than dec (hl) just load with 255 as it will always be that at this code point
1614+ DEA0              LL74SkipDec:
1615+ DEA0 CD 32 CE             call        ClipLine                            ; LL145 \ clip test on XX15 XX12 vector, returns carry
1616+ DEA3 38 71                jr          c,CalculateNewLines                 ; LL170 clip returned carry set so not visibile if carry set skip the rest (laser not firing)
1617+ DEA5              ; Here we are usign hl to replace VarU as index
1618+ DEA5 2A 53 9A             ld          hl,(varU16)
1619+ DEA8 3A 83 C0             ld          a,(UBnKx1Lo)
1620+ DEAB 77                   ld          (hl),a
1621+ DEAC 23                   inc         hl
1622+ DEAD 3A 85 C0             ld          a,(UbnKy1Lo)
1623+ DEB0 77                   ld          (hl),a
1624+ DEB1 23                   inc         hl
1625+ DEB2 3A 87 C0             ld          a,(UBnkX2Lo)
1626+ DEB5 77                   ld          (hl),a
1627+ DEB6 23                   inc         hl
1628+ DEB7 3A 89 C0             ld          a,(UbnKy2Lo)
1629+ DEBA 77                   ld          (hl),a
1630+ DEBB FD 2C                inc         iyl                                 ; iyl holds as a counter to iterations
1631+ DEBD 23                   inc         hl
1632+ DEBE FD 2C                inc         iyl                                 ; ready for next byte
1633+ DEC0 22 53 9A             ld          (varU16),hl
1634+ DEC3 C9                   ret
1635+ DEC4
1636+ DEC4                  INCLUDE "Universe/Ships/PrepLines.asm"
# file opened: ./Universe/Ships/PrepLines.asm
   1++DEC4              ;--------------------------------------------------------------------------------------------------------
   2++DEC4                  INCLUDE "./ModelRender/getVertexNodeAtAToX1Y1.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   1++DEC4              ;--------------------------------------------------------------------------------------------------------
   2++DEC4              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DEC4 21 CE C0     getVertexNodeAtAToX1Y1: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DEC7 ED 31                                add         hl,a                                ; hl = address of Node
   5++DEC9 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DECA 11 83 C0                             ld          de,UBnkX1
   7++DECD ED A0                                ldi                                             ; x1 lo
   8++DECF ED A0                                ldi                                             ; x1 hi
   9++DED1 ED A0                                ldi                                             ; y1 lo
  10++DED3 ED A0                                ldi                                             ; y1 hi
  11++DED5 C9                                   ret
  12++DED6
# file closed: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   3++DED6                  INCLUDE "./ModelRender/getVertexNodeAtAToX2Y2.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   1++DED6              ;--------------------------------------------------------------------------------------------------------
   2++DED6              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DED6 21 CE C0     getVertexNodeAtAToX2Y2: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DED9 ED 31                                add         hl,a                                ; hl = address of Node
   5++DEDB 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DEDC 11 87 C0                             ld          de,UBnkX2
   7++DEDF ED A0                                ldi                                             ; x1 lo
   8++DEE1 ED A0                                ldi                                             ; x1 hi
   9++DEE3 ED A0                                ldi                                             ; y1 lo
  10++DEE5 ED A0                                ldi                                             ; y1 hi
  11++DEE7 C9                                   ret
# file closed: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   4++DEE8                  INCLUDE "./ModelRender/GetFaceAtA.asm"
# file opened: ././ModelRender/GetFaceAtA.asm
   1++DEE8              ;--------------------------------------------------------------------------------------------------------
   2++DEE8              GetFaceAtA:         MACRO
   3++DEE8 ~                                ld          hl,UbnkFaceVisArray
   4++DEE8 ~                                add         hl,a
   5++DEE8 ~                                ld          a,(hl)                              ; get face visibility
   6++DEE8                                  ENDM
   7++DEE8
# file closed: ././ModelRender/GetFaceAtA.asm
   5++DEE8              ;--------------------------------------------------------------------------------------------------------
   6++DEE8              ; LL72 Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
   7++DEE8               ;   DEFINE NOBACKFACECULL 1
   8++DEE8 00           PLEDGECTR           DB          0
   9++DEE9
  10++DEE9              PrepLines:
  11++DEE9              ; FOR NOW BRUTE FORCE IF OFF SCREEN
  12++DEE9
  13++DEE9              ; TODO add in onced DOEXP is finished
  14++DEE9              ;        ld          a,(UBnkexplDsp)                     ; INWK+31  \ display/exploding state|missiles
  15++DEE9              ;        JumpOnBitClear  a,5,EE31                        ; bit5 of mask, if zero no explosion
  16++DEE9              ;        or          8
  17++DEE9              ;        ld          (UBnkexplDsp),a                     ; else else set bit3 to erase old line
  18++DEE9              ;        jp          DOEXP                               ; erase using Do Explosion and use implicit return
  19++DEE9              ;EE31:                                                   ; no explosion
  20++DEE9              ;        JumpOnBitClear  a,3,LL74                        ; clear is hop to do New lines
  21++DEE9              ;        call        ClearLine                           ; LL155    \ else erase lines in XX19 heap at LINEstr down
  22++DEE9              ;        ld          a, $08                              ; set bit 3 of a and fall into LL74
  23++DEE9              ;
  24++DEE9              ;--------------------------------------------------------------------------------------------------------
  25++DEE9              InitialiseLineRead:
  26++DEE9                      ;break
  27++DEE9                      ldWriteZero UbnkLineArrayLen                    ; current line array index = 0
  27++DEE9 AF          >                        xor      a
  27++DEEA 32 00 C3    >                        ld       (UbnkLineArrayLen),a
  28++DEED                      ldWriteZero UbnkLineArrayBytes                  ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
  28++DEED AF          >                        xor      a
  28++DEEE 32 01 C3    >                        ld       (UbnkLineArrayBytes),a
  29++DEF1                      ldWriteZero PLEDGECTR
  29++DEF1 AF          >                        xor      a
  29++DEF2 32 E8 DE    >                        ld       (PLEDGECTR),a
  30++DEF5 3A 15 C3             ld          a,(EdgeCountAddr)
  31++DEF8 DD 67                ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
  32++DEFA FD 2E 00             ld          iyl,0                               ; ixl = current edge index
  33++DEFD 21 0E C2             ld          hl,UbnkLineArray                    ; head of array
  34++DF00 22 53 9A             ld          (varU16),hl                         ; store current line array pointer un varU16
  35++DF03                      ldCopyByte  EdgeCountAddr, XX17                 ; XX17  = total number of edges to traverse edge counter
  35++DF03 3A 15 C3    >                        ld       a,(EdgeCountAddr)
  35++DF06 32 57 9A    >                        ld       (XX17),a
  36++DF09 3A 35 C0             ld          a,(UBnKexplDsp)                     ; get explosion status
  37++DF0C                      JumpOnBitClear a,6,CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
  37++DF0C CB 77       >                        bit 	6,a
  37++DF0E CA 16 DF    >                        jp      z,CalculateNewLines
  38++DF11 E6 BF                and         $BF                                 ; else laser is firing, clear bit6.
  39++DF13 32 35 C0             ld          (UBnKexplDsp),a                     ; INWK+31
  40++DF16              ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
  41++DF16              ; NOw we can calculate hull after including laser line
  42++DF16              CalculateNewLines:
  43++DF16              LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
  44++DF16              CheckEdgesForVisibility:
  45++DF16 21 51 C4             ld          hl,UBnkHullEdges
  46++DF19                      ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
  47++DF19 22 52 99             ld          (varV),hl                           ; V \ is pointer to where edges data start
  48++DF1C 3A 11 C3             ld          a,(LineX4Addr)
  49++DF1F 47                   ld          b,a                                 ; nbr of bytes of edge data
  50++DF20              LL75Loop:                                               ; count Visible edges
  51++DF20              IsEdgeInVisibilityRange:
  52++DF20 2A 52 99             ld          hl,(varV)
  53++DF23 E5                   push        hl
  54++DF24 FD E1                pop         iy
  55++DF26                      IFDEF NOBACKFACECULL
  56++DF26 ~                        jp          VisibileEdge; DEBUGTODO
  57++DF26                      ENDIF
  58++DF26 3A 42 99             ld          a,(LastNormalVisible)               ; XX4 is visibility range
  59++DF29 57                   ld          d,a                                 ; d holds copy of XX4
  60++DF2A              ; Get Edge Byte 0
  61++DF2A FD 7E 00             ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
  62++DF2D                      JumpIfALTNusng d,LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
  62++DF2D BA          >                        cp      d
  62++DF2E DA 81 DF    >                        jp		c, LL78EdgeNotVisible
  63++DF31              EdgeMayBeVisibile:
  64++DF31              ; Get Edge Byte 1
  65++DF31              IsFace1Visibile:                                        ; edges have 2 faces to test
  66++DF31 FD 7E 01             ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
  67++DF34 4F                   ld          c,a                                 ;  c = a copy of byte 1
  68++DF35 E6 0F                and         $0F                                 ;
  69++DF37                      GetFaceAtA
  69++DF37 21 B0 C0    >                    ld          hl,UbnkFaceVisArray
  69++DF3A ED 31       >                    add         hl,a
  69++DF3C 7E          >                    ld          a,(hl)                              ; get face visibility
  70++DF3D              ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
  71++DF3D                      JumpIfAIsNotZero VisibileEdge                     ; LL70 visible edge
  71++DF3D FE 00       >                        cp	0
  71++DF3F C2 53 DF    >                        jp	nz,VisibileEdge
  72++DF42              IsFace2Visibile:
  73++DF42 79                   ld          a,c                                 ; restore byte 1 from c register
  74++DF43 ED 23                swapnib                                         ;
  75++DF45 E6 0F                and         $0F                                 ; swap high byte into low byte
  76++DF47 E5                   push        hl
  77++DF48                      GetFaceAtA
  77++DF48 21 B0 C0    >                    ld          hl,UbnkFaceVisArray
  77++DF4B ED 31       >                    add         hl,a
  77++DF4D 7E          >                    ld          a,(hl)                              ; get face visibility
  78++DF4E E1                   pop         hl
  79++DF4F                      JumpIfAIsZero LL78EdgeNotVisible                ; edge not visible
  79++DF4F A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  79++DF50 CA 81 DF    >                        jp	z, LL78EdgeNotVisible
  80++DF53              VisibileEdge:                                           ; Now we need to node id from bytes 2 - start and 3 - end
  81++DF53              ;LL79--Visible edge--------------------------------------
  82++DF53              ; Get Edge Byte 2
  83++DF53 FD 7E 02             ld          a,(IY+2)                            ; get Node id
  84++DF56 CD C4 DE             call        getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
  85++DF59 FD 7E 03             ld          a,(IY+3)
  86++DF5C CD D6 DE             call        getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
  87++DF5F CD 32 CE             call        ClipLine
  88++DF62 38 1D                jr          c,LL78EdgeNotVisible                ; LL78 edge not visible
  89++DF64              LL80:                                                   ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
  90++DF64 ED 5B 53 9A          ld          de,(varU16)                         ; clipped edges heap address
  91++DF68 21 83 C0             ld          hl,UBnkNewX1
  92++DF6B                      FourLDIInstrunctions
  92++DF6B ED A0       >                        ldi
  92++DF6D ED A0       >                        ldi
  92++DF6F ED A0       >                        ldi
  92++DF71 ED A0       >                        ldi
  93++DF73 ED 53 53 9A          ld          (varU16),de                         ; update U16 with current address
  94++DF77 21 00 C3             ld          hl,UbnkLineArrayLen                 ; we have loaded one line
  95++DF7A 34                   inc         (hl)
  96++DF7B 7E                   ld          a,(hl)
  97++DF7C                      JumpIfAGTENusng LineArraySize,CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
  97++DF7C FE 32       >                        cp     LineArraySize
  97++DF7E D2 97 DF    >                        jp		nc,CompletedLineGeneration
  98++DF81              ; If we hit here we skip the write of line arryay u16
  99++DF81              LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
 100++DF81              LL78:
 101++DF81 2A 52 99             ld          hl,(varV)                           ; varV is current edge address
 102++DF84 3E 04                ld          a,4
 103++DF86 ED 31                add         hl,a
 104++DF88 22 52 99             ld          (varV),hl
 105++DF8B 21 E8 DE             ld          hl,PLEDGECTR                        ;
 106++DF8E 34                   inc         (hl)                                ;
 107++DF8F 7E                   ld          a,(hl)                              ; current edge index ++
 108++DF90                      JumpIfANEMemusng XX17,LL75Loop                  ; compare with total number of edges
 108++DF90 21 57 9A    >                        ld    hl,XX17
 108++DF93 BE          >                        cp    (hl)
 108++DF94 C2 20 DF    >                        jp      nz,LL75Loop
 109++DF97              CompletedLineGeneration:
 110++DF97              LL81:
 111++DF97              LL81SHPPT:                                              ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
 112++DF97 3A 00 C3             ld          a,(UbnkLineArrayLen)                ; UbnkLineArrayLen = nbr of lines loaded
 113++DF9A CB 27                sla         a
 114++DF9C CB 27                sla         a                                   ; multiple by 4 to equal number of bytes
 115++DF9E 32 01 C3             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
 116++DFA1              ExitEdgeDataLoop:
 117++DFA1 C9                   ret
 118++DFA2
# file closed: ./Universe/Ships/PrepLines.asm
1637+ DFA2
1638+ DFA2              UnivBankSize  EQU $ - StartOfUniv
1639+ DFA2
# file closed: ./Universe/Ships/univ_ship_data.asm
1416  DFA2                  DISPLAY "Universe Data - Bytes free ",/D, $2000 - (UnivBankSize)
1417  DFA2                  SLOT    UniverseBankAddr
1418  DFA2                  PAGE    BankUNIVDATA1
1419  DFA2              	ORG	UniverseBankAddr,BankUNIVDATA1
1420  C000 FF           UNIVDATABlock1      DB $FF
1421  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1422  E000
1423  E000                  SLOT    UniverseBankAddr
1424  E000                  PAGE    BankUNIVDATA2
1425  E000              	ORG	UniverseBankAddr,BankUNIVDATA2
1426  C000 FF           UNIVDATABlock2      DB $FF
1427  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1428  E000
1429  E000                  SLOT    UniverseBankAddr
1430  E000                  PAGE    BankUNIVDATA3
1431  E000              	ORG	UniverseBankAddr,BankUNIVDATA3
1432  C000 FF           UNIVDATABlock3      DB $FF
1433  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1434  E000
1435  E000                  SLOT    UniverseBankAddr
1436  E000                  PAGE    BankUNIVDATA4
1437  E000              	ORG	UniverseBankAddr,BankUNIVDATA4
1438  C000 FF           UNIVDATABlock4      DB $FF
1439  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1440  E000
1441  E000                  SLOT    UniverseBankAddr
1442  E000                  PAGE    BankUNIVDATA5
1443  E000              	ORG	UniverseBankAddr,BankUNIVDATA5
1444  C000 FF           UNIVDATABlock5      DB $FF
1445  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1446  E000
1447  E000                  SLOT    UniverseBankAddr
1448  E000                  PAGE    BankUNIVDATA6
1449  E000              	ORG	UniverseBankAddr,BankUNIVDATA6
1450  C000 FF           UNIVDATABlock6      DB $FF
1451  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1452  E000
1453  E000                  SLOT    UniverseBankAddr
1454  E000                  PAGE    BankUNIVDATA7
1455  E000              	ORG	UniverseBankAddr,BankUNIVDATA7
1456  C000 FF           UNIVDATABlock7      DB $FF
1457  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1458  E000
1459  E000                  SLOT    UniverseBankAddr
1460  E000                  PAGE    BankUNIVDATA8
1461  E000              	ORG	UniverseBankAddr,BankUNIVDATA8
1462  C000 FF           UNIVDATABlock8      DB $FF
1463  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1464  E000
1465  E000                  SLOT    UniverseBankAddr
1466  E000                  PAGE    BankUNIVDATA9
1467  E000              	ORG	UniverseBankAddr,BankUNIVDATA9
1468  C000 FF           UNIVDATABlock9      DB $FF
1469  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1470  E000
1471  E000                  SLOT    UniverseBankAddr
1472  E000                  PAGE    BankUNIVDATA10
1473  E000              	ORG	UniverseBankAddr,BankUNIVDATA10
1474  C000 FF           UNIVDATABlock10     DB $FF
1475  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1476  E000
1477  E000                  SLOT    UniverseBankAddr
1478  E000                  PAGE    BankUNIVDATA11
1479  E000              	ORG	UniverseBankAddr,BankUNIVDATA11
1480  C000 FF           UNIVDATABlock11     DB $FF
1481  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1482  E000
1483  E000                  SLOT    UniverseBankAddr
1484  E000                  PAGE    BankUNIVDATA12
1485  E000              	ORG	UniverseBankAddr,BankUNIVDATA12
1486  C000 FF           UNIVDATABlock12     DB $FF
1487  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1488  E000
1489  E000                  SLOT    GalaxyDataAddr
1490  E000                  PAGE    BankGalaxyData0
1491  E000              	ORG GalaxyDataAddr, BankGalaxyData0
1492  E000                  INCLUDE "./Universe/Galaxy/galaxy_data.asm"
# file opened: ./Universe/Galaxy/galaxy_data.asm
   1+ E000 47 61 6C 61  galaxy_page_marker  DB "Galaxy      PG9"
   1+ E004 78 79 20 20
   1+ E008 20 20 20 20
   1+ E00C 50 47 39
   2+ E00F 30           galaxy_pg_cnt       DB "0"
   3+ E010 00 00 00...  galaxy_master_seed  DS 6
   4+ E016 00 00 00...  galaxy_data DS 8*256
   5+ E816 2D 2D 2D 2D  galaxy_code_end DB "-----------------------------------------------------------------"
   5+ E81A 2D 2D 2D 2D
   5+ E81E 2D 2D 2D 2D
   5+ E822 2D 2D 2D 2D
   5+ E826 2D 2D 2D 2D
   5+ E82A 2D 2D 2D 2D
   5+ E82E 2D 2D 2D 2D
   5+ E832 2D 2D 2D 2D
   5+ E836 2D 2D 2D 2D
   5+ E83A 2D 2D 2D 2D
   5+ E83E 2D 2D 2D 2D
   5+ E842 2D 2D 2D 2D
   5+ E846 2D 2D 2D 2D
   5+ E84A 2D 2D 2D 2D
   5+ E84E 2D 2D 2D 2D
   5+ E852 2D 2D 2D 2D
   5+ E856 2D
   6+ E857 00 00        GalaxyPresentSystem:     DW 0
   7+ E859 00 00        GalaxyDestinationSystem: DW 0
   8+ E85B 00 00        GalaxyTargetSystem:      DW 0
   9+ E85D              ; including a DB 0 as a catcher
  10+ E85D 00           GalaxySearchLength:      DB 0
  11+ E85E 00 00 00...  GalaxySearchString:      DS 32
  12+ E87E 00                                    DB 0
  13+ E87F 00 00 00...  GalaxyExpandedName:      DS 32
  14+ E89F 00                                    DB 0
  15+ E8A0 41 42 4F 55  GalaxyName_digrams	     DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION"
  15+ E8A4 53 45 49 54
  15+ E8A8 49 4C 45 54
  15+ E8AC 53 54 4F 4E
  15+ E8B0 4C 4F 4E 55
  15+ E8B4 54 48 4E 4F
  15+ E8B8 41 4C 4C 45
  15+ E8BC 58 45 47 45
  15+ E8C0 5A 41 43 45
  15+ E8C4 42 49 53 4F
  15+ E8C8 55 53 45 53
  15+ E8CC 41 52 4D 41
  15+ E8D0 49 4E 44 49
  15+ E8D4 52 45 41 3F
  15+ E8D8 45 52 41 54
  15+ E8DC 45 4E 42 45
  15+ E8E0 52 41 4C 41
  15+ E8E4 56 45 54 49
  15+ E8E8 45 44 4F 52
  15+ E8EC 51 55 41 4E
  15+ E8F0 54 45 49 53
  15+ E8F4 52 49 4F 4E
  16+ E8F8 00 00 00...  GalaxyWorkingSeed        DS 6
  17+ E8FE 00 00 00...  GalaxyNamingSeed         DS 6
  18+ E904 00 00 00...  GalaxySavedRandomSeed    DS 6
  19+ E90A
  20+ E90A 00           GalaxyDisplayGovernment         DB 0
  21+ E90B 00           GalaxyDisplayEconomy            DB 0
  22+ E90C 00           GalaxyDisplayTekLevel           DB 0
  23+ E90D 00           GalaxyDisplayPopulation         DB 0
  24+ E90E 00 00        GalaxyDisplayProductivity       DW 0
  25+ E910 00 00        GalaxyDisplayRadius             DW 0
  26+ E912
  27+ E912 66 61 62 6C  GalaxyDescList01A       DB "fabled",0
  27+ E916 65 64 00
  28+ E919 6E 6F 74 61  GalaxyDescList01B       DB "notable",0
  28+ E91D 62 6C 65 00
  29+ E921 77 65 6C 6C  GalaxyDescList01C       DB "well known",0
  29+ E925 20 6B 6E 6F
  29+ E929 77 6E 00
  30+ E92C 66 61 6D 6F  GalaxyDescList01D       DB "famous",0
  30+ E930 75 73 00
  31+ E933 6E 6F 74 65  GalaxyDescList01E       DB "noted",0
  31+ E937 64 00
  32+ E939 76 65 72 79  GalaxyDescList02A       DB "very",0
  32+ E93D 00
  33+ E93E 6D 69 6C 64  GalaxyDescList02B       DB "mildly",0
  33+ E942 6C 79 00
  34+ E945 6D 6F 73 74  GalaxyDescList02C       DB "most",0
  34+ E949 00
  35+ E94A 72 65 61 73  GalaxyDescList02D       DB "reasonably",0
  35+ E94E 6F 6E 61 62
  35+ E952 6C 79 00
  36+ E955 00           GalaxyDescList02E       DB 0
  37+ E956 61 6E 63 69  GalaxyDescList03A       DB "ancient",0
  37+ E95A 65 6E 74 00
  38+ E95E 3C 32 30 3E  GalaxyDescList03B       DB "<20>",0
  38+ E962 00
  39+ E963 67 72 65 61  GalaxyDescList03C       DB "great",0
  39+ E967 74 00
  40+ E969 76 61 73 74  GalaxyDescList03D       DB "vast",0
  40+ E96D 00
  41+ E96E 70 69 6E 6B  GalaxyDescList03E       DB "pink",0
  41+ E972 00
  42+ E973 3C 32 39 3E  GalaxyDescList04A       DB "<29> <28> plantations",0
  42+ E977 20 3C 32 38
  42+ E97B 3E 20 70 6C
  42+ E97F 61 6E 74 61
  42+ E983 74 69 6F 6E
  42+ E987 73 00
  43+ E989 6D 6F 75 6E  GalaxyDescList04B       DB "mountains",0
  43+ E98D 74 61 69 6E
  43+ E991 73 00
  44+ E993 3C 32 37 3E  GalaxyDescList04C       DB "<27>",0
  44+ E997 00
  45+ E998 3C 31 39 3E  GalaxyDescList04D       DB "<19> forests",0
  45+ E99C 20 66 6F 72
  45+ E9A0 65 73 74 73
  45+ E9A4 00
  46+ E9A5 6F 63 65 61  GalaxyDescList04E       DB "oceans",0
  46+ E9A9 6E 73 00
  47+ E9AC 73 68 79 6E  GalaxyDescList05A       DB "shyness",0
  47+ E9B0 65 73 73 00
  48+ E9B4 73 69 6C 6C  GalaxyDescList05B       DB "silliness",0
  48+ E9B8 69 6E 65 73
  48+ E9BC 73 00
  49+ E9BE 6D 61 74 69  GalaxyDescList05C       DB "mating traditions",0
  49+ E9C2 6E 67 20 74
  49+ E9C6 72 61 64 69
  49+ E9CA 74 69 6F 6E
  49+ E9CE 73 00
  50+ E9D0 6C 6F 61 74  GalaxyDescList05D       DB "loathing of <5>",0
  50+ E9D4 68 69 6E 67
  50+ E9D8 20 6F 66 20
  50+ E9DC 3C 35 3E 00
  51+ E9E0 6C 6F 76 65  GalaxyDescList05E       DB "love for <5>",0
  51+ E9E4 20 66 6F 72
  51+ E9E8 20 3C 35 3E
  51+ E9EC 00
  52+ E9ED 66 6F 6F 64  GalaxyDescList06A       DB "food blenders",0
  52+ E9F1 20 62 6C 65
  52+ E9F5 6E 64 65 72
  52+ E9F9 73 00
  53+ E9FB 74 6F 75 72  GalaxyDescList06B       DB "tourists",0
  53+ E9FF 69 73 74 73
  53+ EA03 00
  54+ EA04 70 6F 65 74  GalaxyDescList06C       DB "poetry",0
  54+ EA08 72 79 00
  55+ EA0B 64 69 73 63  GalaxyDescList06D       DB "discos",0
  55+ EA0F 6F 73 00
  56+ EA12 3C 31 33 3E  GalaxyDescList06E       DB "<13>",0
  56+ EA16 00
  57+ EA17 74 61 6C 6B  GalaxyDescList07A       DB "talking tree",0
  57+ EA1B 69 6E 67 20
  57+ EA1F 74 72 65 65
  57+ EA23 00
  58+ EA24 63 72 61 62  GalaxyDescList07B       DB "crab",0
  58+ EA28 00
  59+ EA29 62 61 74 00  GalaxyDescList07C       DB "bat",0
  60+ EA2D 6C 6F 62 73  GalaxyDescList07D       DB "lobst",0
  60+ EA31 74 00
  61+ EA33 25 52 00     GalaxyDescList07E       DB "%R",0
  62+ EA36 62 65 73 65  GalaxyDescList08A       DB "beset",0
  62+ EA3A 74 00
  63+ EA3C 70 6C 61 67  GalaxyDescList08B       DB "plagued",0
  63+ EA40 75 65 64 00
  64+ EA44 72 61 76 61  GalaxyDescList08C       DB "ravaged",0
  64+ EA48 67 65 64 00
  65+ EA4C 63 75 72 73  GalaxyDescList08D       DB "cursed",0
  65+ EA50 65 64 00
  66+ EA53 73 63 6F 75  GalaxyDescList08E       DB "scourged",0
  66+ EA57 72 67 65 64
  66+ EA5B 00
  67+ EA5C 3C 32 31 3E  GalaxyDescList09A       DB "<21> civil war",0
  67+ EA60 20 63 69 76
  67+ EA64 69 6C 20 77
  67+ EA68 61 72 00
  68+ EA6B 3C 32 36 3E  GalaxyDescList09B       DB "<26> <23> <24>s",0
  68+ EA6F 20 3C 32 33
  68+ EA73 3E 20 3C 32
  68+ EA77 34 3E 73 00
  69+ EA7B 61 20 3C 32  GalaxyDescList09C       DB "a <26> disease",0
  69+ EA7F 36 3E 20 64
  69+ EA83 69 73 65 61
  69+ EA87 73 65 00
  70+ EA8A 3C 32 31 3E  GalaxyDescList09D       DB "<21> earthquakes",0
  70+ EA8E 20 65 61 72
  70+ EA92 74 68 71 75
  70+ EA96 61 6B 65 73
  70+ EA9A 00
  71+ EA9B 3C 32 31 3E  GalaxyDescList09E       DB "<21> solar activity",0
  71+ EA9F 20 73 6F 6C
  71+ EAA3 61 72 20 61
  71+ EAA7 63 74 69 76
  71+ EAAB 69 74 79 00
  72+ EAAF 69 74 73 20  GalaxyDescList10A       DB "its <2> <3>",0
  72+ EAB3 3C 32 3E 20
  72+ EAB7 3C 33 3E 00
  73+ EABB 74 68 65 20  GalaxyDescList10B       DB "the %I <23> <24>",0
  73+ EABF 25 49 20 3C
  73+ EAC3 32 33 3E 20
  73+ EAC7 3C 32 34 3E
  73+ EACB 00
  74+ EACC 69 74 73 20  GalaxyDescList10C       DB "its inhabitants' <25> <4>",0
  74+ EAD0 69 6E 68 61
  74+ EAD4 62 69 74 61
  74+ EAD8 6E 74 73 27
  74+ EADC 20 3C 32 35
  74+ EAE0 3E 20 3C 34
  74+ EAE4 3E 00
  75+ EAE6 3C 33 32 3E  GalaxyDescList10D       DB "<32>",0
  75+ EAEA 00
  76+ EAEB 69 74 73 20  GalaxyDescList10E       DB "its <12> <13>",0
  76+ EAEF 3C 31 32 3E
  76+ EAF3 20 3C 31 33
  76+ EAF7 3E 00
  77+ EAF9 6A 75 69 63  GalaxyDescList11A       DB "juice",0
  77+ EAFD 65 00
  78+ EAFF 62 72 61 6E  GalaxyDescList11B       DB "brandy",0
  78+ EB03 64 79 00
  79+ EB06 77 61 74 65  GalaxyDescList11C       DB "water",0
  79+ EB0A 72 00
  80+ EB0C 62 72 65 77  GalaxyDescList11D       DB "brew",0
  80+ EB10 00
  81+ EB11 67 61 72 67  GalaxyDescList11E       DB "gargle blasters",0
  81+ EB15 6C 65 20 62
  81+ EB19 6C 61 73 74
  81+ EB1D 65 72 73 00
  82+ EB21 25 52 00     GalaxyDescList12A       DB "%R",0
  83+ EB24 25 49 20 3C  GalaxyDescList12B       DB "%I <24>",0
  83+ EB28 32 34 3E 00
  84+ EB2C 25 49 20 25  GalaxyDescList12C       DB "%I %R",0
  84+ EB30 52 00
  85+ EB32 25 49 20 3C  GalaxyDescList12D       DB "%I <26>",0
  85+ EB36 32 36 3E 00
  86+ EB3A 3C 32 36 3E  GalaxyDescList12E       DB "<26> %R",0
  86+ EB3E 20 25 52 00
  87+ EB42 66 61 62 75  GalaxyDescList13A       DB "fabulous",0
  87+ EB46 6C 6F 75 73
  87+ EB4A 00
  88+ EB4B 65 78 6F 74  GalaxyDescList13B       DB "exotic",0
  88+ EB4F 69 63 00
  89+ EB52 68 6F 6F 70  GalaxyDescList13C       DB "hoopy",0
  89+ EB56 79 00
  90+ EB58 75 6E 75 73  GalaxyDescList13D       DB "unusual",0
  90+ EB5C 75 61 6C 00
  91+ EB60 65 78 63 69  GalaxyDescList13E       DB "exciting",0
  91+ EB64 74 69 6E 67
  91+ EB68 00
  92+ EB69 63 75 69 73  GalaxyDescList14A       DB "cuisine",0
  92+ EB6D 69 6E 65 00
  93+ EB71 6E 69 67 68  GalaxyDescList14B       DB "night life",0
  93+ EB75 74 20 6C 69
  93+ EB79 66 65 00
  94+ EB7C 63 61 73 69  GalaxyDescList14C       DB "casinos",0
  94+ EB80 6E 6F 73 00
  95+ EB84 73 69 74 20  GalaxyDescList14D       DB "sit coms",0
  95+ EB88 63 6F 6D 73
  95+ EB8C 00
  96+ EB8D 20 3C 33 32  GalaxyDescList14E       DB " <32> ",0
  96+ EB91 3E 20 00
  97+ EB94 25 48 00     GalaxyDescList15A       DB "%H",0
  98+ EB97 54 68 65 20  GalaxyDescList15B       DB "The planet %H",0
  98+ EB9B 70 6C 61 6E
  98+ EB9F 65 74 20 25
  98+ EBA3 48 00
  99+ EBA5 54 68 65 20  GalaxyDescList15C       DB "The world %H",0
  99+ EBA9 77 6F 72 6C
  99+ EBAD 64 20 25 48
  99+ EBB1 00
 100+ EBB2 54 68 69 73  GalaxyDescList15D       DB "This planet",0
 100+ EBB6 20 70 6C 61
 100+ EBBA 6E 65 74 00
 101+ EBBE 54 68 69 73  GalaxyDescList15E       DB "This world",0
 101+ EBC2 20 77 6F 72
 101+ EBC6 6C 64 00
 102+ EBC9 6E 20 75 6E  GalaxyDescList16A       DB "n unremarkable",0
 102+ EBCD 72 65 6D 61
 102+ EBD1 72 6B 61 62
 102+ EBD5 6C 65 00
 103+ EBD8 20 62 6F 72  GalaxyDescList16B       DB " boring",0
 103+ EBDC 69 6E 67 00
 104+ EBE0 20 64 75 6C  GalaxyDescList16C       DB " dull",0
 104+ EBE4 6C 00
 105+ EBE6 20 74 65 64  GalaxyDescList16D       DB " tedious",0
 105+ EBEA 69 6F 75 73
 105+ EBEE 00
 106+ EBEF 20 72 65 76  GalaxyDescList16E       DB " revolting",0
 106+ EBF3 6F 6C 74 69
 106+ EBF7 6E 67 00
 107+ EBFA 70 6C 61 6E  GalaxyDescList17A       DB "planet",0
 107+ EBFE 65 74 00
 108+ EC01 77 6F 72 6C  GalaxyDescList17B       DB "world",0
 108+ EC05 64 00
 109+ EC07 70 6C 61 63  GalaxyDescList17C       DB "place",0
 109+ EC0B 65 00
 110+ EC0D 6C 69 74 74  GalaxyDescList17D       DB "little planet",0
 110+ EC11 6C 65 20 70
 110+ EC15 6C 61 6E 65
 110+ EC19 74 00
 111+ EC1B 64 75 6D 70  GalaxyDescList17E       DB "dump",0
 111+ EC1F 00
 112+ EC20 77 61 73 70  GalaxyDescList18A       DB "wasp",0
 112+ EC24 00
 113+ EC25 6D 6F 74 68  GalaxyDescList18B       DB "moth",0
 113+ EC29 00
 114+ EC2A 67 72 75 62  GalaxyDescList18C       DB "grub",0
 114+ EC2E 00
 115+ EC2F 61 6E 74 00  GalaxyDescList18D       DB "ant",0
 116+ EC33 25 52 00     GalaxyDescList18E       DB "%R",0
 117+ EC36 70 6F 65 74  GalaxyDescList19A       DB "poet",0
 117+ EC3A 00
 118+ EC3B 61 72 74 73  GalaxyDescList19B       DB "arts graduate",0
 118+ EC3F 20 67 72 61
 118+ EC43 64 75 61 74
 118+ EC47 65 00
 119+ EC49 79 61 6B 00  GalaxyDescList19C       DB "yak",0
 120+ EC4D 73 6E 61 69  GalaxyDescList19D       DB "snail",0
 120+ EC51 6C 00
 121+ EC53 73 6C 75 67  GalaxyDescList19E       DB "slug",0
 121+ EC57 00
 122+ EC58 74 72 6F 70  GalaxyDescList20A       DB "tropical",0
 122+ EC5C 69 63 61 6C
 122+ EC60 00
 123+ EC61 64 65 6E 73  GalaxyDescList20B       DB "dense",0
 123+ EC65 65 00
 124+ EC67 72 61 69 6E  GalaxyDescList20C       DB "rain",0
 124+ EC6B 00
 125+ EC6C 69 6D 70 65  GalaxyDescList20D       DB "impenetrable",0
 125+ EC70 6E 65 74 72
 125+ EC74 61 62 6C 65
 125+ EC78 00
 126+ EC79 65 78 75 62  GalaxyDescList20E       DB "exuberant",0
 126+ EC7D 65 72 61 6E
 126+ EC81 74 00
 127+ EC83 66 75 6E 6E  GalaxyDescList21A       DB "funny",0
 127+ EC87 79 00
 128+ EC89 77 69 65 72  GalaxyDescList21B       DB "wierd",0
 128+ EC8D 64 00
 129+ EC8F 75 6E 75 73  GalaxyDescList21C       DB "unusual",0
 129+ EC93 75 61 6C 00
 130+ EC97 73 74 72 61  GalaxyDescList21D       DB "strange",0
 130+ EC9B 6E 67 65 00
 131+ EC9F 70 65 63 75  GalaxyDescList21E       DB "peculiar",0
 131+ ECA3 6C 69 61 72
 131+ ECA7 00
 132+ ECA8 66 72 65 71  GalaxyDescList22A       DB "frequent",0
 132+ ECAC 75 65 6E 74
 132+ ECB0 00
 133+ ECB1 6F 63 63 61  GalaxyDescList22B       DB "occasional",0
 133+ ECB5 73 69 6F 6E
 133+ ECB9 61 6C 00
 134+ ECBC 75 6E 70 72  GalaxyDescList22C       DB "unpredictable",0
 134+ ECC0 65 64 69 63
 134+ ECC4 74 61 62 6C
 134+ ECC8 65 00
 135+ ECCA 64 72 65 61  GalaxyDescList22D       DB "dreadful",0
 135+ ECCE 64 66 75 6C
 135+ ECD2 00
 136+ ECD3 64 65 61 64  GalaxyDescList22E       DB "deadly",0
 136+ ECD7 6C 79 00
 137+ ECDA 3C 31 3E 20  GalaxyDescList23A       DB "<1> <0> for <9>",0
 137+ ECDE 3C 30 3E 20
 137+ ECE2 66 6F 72 20
 137+ ECE6 3C 39 3E 00
 138+ ECEA 3C 31 3E 20  GalaxyDescList23B       DB "<1> <0> for <9> and <9>",0
 138+ ECEE 3C 30 3E 20
 138+ ECF2 66 6F 72 20
 138+ ECF6 3C 39 3E 20
 138+ ECFA 61 6E 64 20
 138+ ECFE 3C 39 3E 00
 139+ ED02 3C 37 3E 20  GalaxyDescList23C       DB "<7> by <8>",0
 139+ ED06 62 79 20 3C
 139+ ED0A 38 3E 00
 140+ ED0D 3C 31 3E 20  GalaxyDescList23D       DB "<1> <0> for <9> but <7> by <8>",0
 140+ ED11 3C 30 3E 20
 140+ ED15 66 6F 72 20
 140+ ED19 3C 39 3E 20
 140+ ED1D 62 75 74 20
 140+ ED21 3C 37 3E 20
 140+ ED25 62 79 20 3C
 140+ ED29 38 3E 00
 141+ ED2C 61 3C 31 35  GalaxyDescList23E       DB "a<15> <16>",0
 141+ ED30 3E 20 3C 31
 141+ ED34 36 3E 00
 142+ ED37 3C 32 36 3E  GalaxyDescList24A       DB "<26>",0
 142+ ED3B 00
 143+ ED3C 6D 6F 75 6E  GalaxyDescList24B       DB "mountain",0
 143+ ED40 74 61 69 6E
 143+ ED44 00
 144+ ED45 65 64 69 62  GalaxyDescList24C       DB "edible",0
 144+ ED49 6C 65 00
 145+ ED4C 74 72 65 65  GalaxyDescList24D       DB "tree",0
 145+ ED50 00
 146+ ED51 73 70 6F 74  GalaxyDescList24E       DB "spotted",0
 146+ ED55 74 65 64 00
 147+ ED59 3C 33 30 3E  GalaxyDescList25A       DB "<30>",0
 147+ ED5D 00
 148+ ED5E 3C 33 31 3E  GalaxyDescList25B       DB "<31>",0
 148+ ED62 00
 149+ ED63 3C 36 3E 6F  GalaxyDescList25C       DB "<6>oid",0
 149+ ED67 69 64 00
 150+ ED6A 3C 31 38 3E  GalaxyDescList25D       DB "<18>",0
 150+ ED6E 00
 151+ ED6F 3C 31 37 3E  GalaxyDescList25E       DB "<17>",0
 151+ ED73 00
 152+ ED74 61 6E 63 69  GalaxyDescList26A       DB "ancient",0
 152+ ED78 65 6E 74 00
 153+ ED7C 65 78 63 65  GalaxyDescList26B       DB "exceptional",0
 153+ ED80 70 74 69 6F
 153+ ED84 6E 61 6C 00
 154+ ED88 65 63 63 65  GalaxyDescList26C       DB "eccentric",0
 154+ ED8C 6E 74 72 69
 154+ ED90 63 00
 155+ ED92 69 6E 67 72  GalaxyDescList26D       DB "ingrained",0
 155+ ED96 61 69 6E 65
 155+ ED9A 64 00
 156+ ED9C 3C 32 30 3E  GalaxyDescList26E       DB "<20>",0
 156+ EDA0 00
 157+ EDA1 6B 69 6C 6C  GalaxyDescList27A       DB "killer",0
 157+ EDA5 65 72 00
 158+ EDA8 64 65 61 64  GalaxyDescList27B       DB "deadly",0
 158+ EDAC 6C 79 00
 159+ EDAF 65 76 69 6C  GalaxyDescList27C       DB "evil",0
 159+ EDB3 00
 160+ EDB4 6C 65 74 68  GalaxyDescList27D       DB "lethal",0
 160+ EDB8 61 6C 00
 161+ EDBB 76 69 63 69  GalaxyDescList27E       DB "vicious",0
 161+ EDBF 6F 75 73 00
 162+ EDC3 70 61 72 6B  GalaxyDescList28A       DB "parking meters",0
 162+ EDC7 69 6E 67 20
 162+ EDCB 6D 65 74 65
 162+ EDCF 72 73 00
 163+ EDD2 64 75 73 74  GalaxyDescList28B       DB "dust clouds",0
 163+ EDD6 20 63 6C 6F
 163+ EDDA 75 64 73 00
 164+ EDDE 69 63 65 20  GalaxyDescList28C       DB "ice bergs",0
 164+ EDE2 62 65 72 67
 164+ EDE6 73 00
 165+ EDE8 72 6F 63 6B  GalaxyDescList28D       DB "rock formations",0
 165+ EDEC 20 66 6F 72
 165+ EDF0 6D 61 74 69
 165+ EDF4 6F 6E 73 00
 166+ EDF8 76 6F 6C 63  GalaxyDescList28E       DB "volcanoes",0
 166+ EDFC 61 6E 6F 65
 166+ EE00 73 00
 167+ EE02 70 6C 61 6E  GalaxyDescList29A       DB "plant",0
 167+ EE06 74 00
 168+ EE08 74 75 6C 69  GalaxyDescList29B       DB "tulip",0
 168+ EE0C 70 00
 169+ EE0E 62 61 6E 61  GalaxyDescList29C       DB "banana",0
 169+ EE12 6E 61 00
 170+ EE15 63 6F 72 6E  GalaxyDescList29D       DB "corn",0
 170+ EE19 00
 171+ EE1A 25 52 77 65  GalaxyDescList29E       DB "%Rweed",0
 171+ EE1E 65 64 00
 172+ EE21 25 52 00     GalaxyDescList30A       DB "%R",0
 173+ EE24 23 49 20 25  GalaxyDescList30B       DB "#I %R",0
 173+ EE28 52 00
 174+ EE2A 23 49 20 3C  GalaxyDescList30C       DB "#I <26>",0
 174+ EE2E 32 36 3E 00
 175+ EE32 69 6E 68 61  GalaxyDescList30D       DB "inhabitant",0
 175+ EE36 62 69 74 61
 175+ EE3A 6E 74 00
 176+ EE3D 25 49 20 25  GalaxyDescList30E       DB "%I %R",0
 176+ EE41 52 00
 177+ EE43 73 68 72 65  GalaxyDescList31A       DB "shrew",0
 177+ EE47 77 00
 178+ EE49 62 65 61 73  GalaxyDescList31B       DB "beast",0
 178+ EE4D 74 00
 179+ EE4F 62 69 73 6F  GalaxyDescList31C       DB "bison",0
 179+ EE53 6E 00
 180+ EE55 73 6E 61 6B  GalaxyDescList31D       DB "snake",0
 180+ EE59 65 00
 181+ EE5B 77 6F 6C 66  GalaxyDescList31E       DB "wolf",0
 181+ EE5F 00
 182+ EE60 6C 65 6F 70  GalaxyDescList32A       DB "leopard",0
 182+ EE64 61 72 64 00
 183+ EE68 63 61 74 00  GalaxyDescList32B       DB "cat",0
 184+ EE6C 6D 6F 6E 6B  GalaxyDescList32C       DB "monkey",0
 184+ EE70 65 79 00
 185+ EE73 67 6F 61 74  GalaxyDescList32D       DB "goat",0
 185+ EE77 00
 186+ EE78 66 69 73 68  GalaxyDescList32E       DB "fish",0
 186+ EE7C 00
 187+ EE7D 3C 31 31 3E  GalaxyDescList33A       DB "<11> <10>",0
 187+ EE81 20 3C 31 30
 187+ EE85 3E 00
 188+ EE87 23 49 20 3C  GalaxyDescList33B       DB "#I <30> <33>",0
 188+ EE8B 33 30 3E 20
 188+ EE8F 3C 33 33 3E
 188+ EE93 00
 189+ EE94 69 74 73 20  GalaxyDescList33C       DB "its <12> <31> <33>",0
 189+ EE98 3C 31 32 3E
 189+ EE9C 20 3C 33 31
 189+ EEA0 3E 20 3C 33
 189+ EEA4 33 3E 00
 190+ EEA7 3C 33 34 3E  GalaxyDescList33D       DB "<34> <35>",0
 190+ EEAB 20 3C 33 35
 190+ EEAF 3E 00
 191+ EEB1 3C 31 31 3E  GalaxyDescList33E       DB "<11> <10>",0
 191+ EEB5 20 3C 31 30
 191+ EEB9 3E 00
 192+ EEBB 6D 65 61 74  GalaxyDescList34A       DB "meat",0
 192+ EEBF 00
 193+ EEC0 63 75 74 6C  GalaxyDescList34B       DB "cutlet",0
 193+ EEC4 65 74 00
 194+ EEC7 73 74 65 61  GalaxyDescList34C       DB "steak",0
 194+ EECB 6B 00
 195+ EECD 62 75 72 67  GalaxyDescList34D       DB "burgers",0
 195+ EED1 65 72 73 00
 196+ EED5 73 6F 75 70  GalaxyDescList34E       DB "soup",0
 196+ EED9 00
 197+ EEDA 69 63 65 00  GalaxyDescList35A       DB "ice",0
 198+ EEDE 6D 75 64 00  GalaxyDescList35B       DB "mud",0
 199+ EEE2 5A 65 72 6F  GalaxyDescList35C       DB "Zero-G",0
 199+ EEE6 2D 47 00
 200+ EEE9 76 61 63 75  GalaxyDescList35D       DB "vacuum",0
 200+ EEED 75 6D 00
 201+ EEF0 25 49 20 75  GalaxyDescList35E       DB "%I ultra",0
 201+ EEF4 6C 74 72 61
 201+ EEF8 00
 202+ EEF9 68 6F 63 6B  GalaxyDescList36A       DB "hockey",0
 202+ EEFD 65 79 00
 203+ EF00 63 72 69 63  GalaxyDescList36B       DB "cricket",0
 203+ EF04 6B 65 74 00
 204+ EF08 6B 61 72 61  GalaxyDescList36C       DB "karate",0
 204+ EF0C 74 65 00
 205+ EF0F 70 6F 6C 6F  GalaxyDescList36D       DB "polo",0
 205+ EF13 00
 206+ EF14 74 65 6E 6E  GalaxyDescList36E       DB "tennis",0
 206+ EF18 69 73 00
 207+ EF1B
 208+ EF1B 12 E9 19 E9  GalaxyDescList          DW GalaxyDescList01A, GalaxyDescList01B, GalaxyDescList01C, GalaxyDescList01D, GalaxyDescList01E
 208+ EF1F 21 E9 2C E9
 208+ EF23 33 E9
 209+ EF25 39 E9 3E E9                          DW GalaxyDescList02A, GalaxyDescList02B, GalaxyDescList02C, GalaxyDescList02D, GalaxyDescList02E
 209+ EF29 45 E9 4A E9
 209+ EF2D 55 E9
 210+ EF2F 56 E9 5E E9                          DW GalaxyDescList03A, GalaxyDescList03B, GalaxyDescList03C, GalaxyDescList03D, GalaxyDescList03E
 210+ EF33 63 E9 69 E9
 210+ EF37 6E E9
 211+ EF39 73 E9 89 E9                          DW GalaxyDescList04A, GalaxyDescList04B, GalaxyDescList04C, GalaxyDescList04D, GalaxyDescList04E
 211+ EF3D 93 E9 98 E9
 211+ EF41 A5 E9
 212+ EF43 AC E9 B4 E9                          DW GalaxyDescList05A, GalaxyDescList05B, GalaxyDescList05C, GalaxyDescList05D, GalaxyDescList05E
 212+ EF47 BE E9 D0 E9
 212+ EF4B E0 E9
 213+ EF4D ED E9 FB E9                          DW GalaxyDescList06A, GalaxyDescList06B, GalaxyDescList06C, GalaxyDescList06D, GalaxyDescList06E
 213+ EF51 04 EA 0B EA
 213+ EF55 12 EA
 214+ EF57 17 EA 24 EA                          DW GalaxyDescList07A, GalaxyDescList07B, GalaxyDescList07C, GalaxyDescList07D, GalaxyDescList07E
 214+ EF5B 29 EA 2D EA
 214+ EF5F 33 EA
 215+ EF61 36 EA 3C EA                          DW GalaxyDescList08A, GalaxyDescList08B, GalaxyDescList08C, GalaxyDescList08D, GalaxyDescList08E
 215+ EF65 44 EA 4C EA
 215+ EF69 53 EA
 216+ EF6B 5C EA 6B EA                          DW GalaxyDescList09A, GalaxyDescList09B, GalaxyDescList09C, GalaxyDescList09D, GalaxyDescList09E
 216+ EF6F 7B EA 8A EA
 216+ EF73 9B EA
 217+ EF75 AF EA BB EA                          DW GalaxyDescList10A, GalaxyDescList10B, GalaxyDescList10C, GalaxyDescList10D, GalaxyDescList10E
 217+ EF79 CC EA E6 EA
 217+ EF7D EB EA
 218+ EF7F F9 EA FF EA                          DW GalaxyDescList11A, GalaxyDescList11B, GalaxyDescList11C, GalaxyDescList11D, GalaxyDescList11E
 218+ EF83 06 EB 0C EB
 218+ EF87 11 EB
 219+ EF89 21 EB 24 EB                          DW GalaxyDescList12A, GalaxyDescList12B, GalaxyDescList12C, GalaxyDescList12D, GalaxyDescList12E
 219+ EF8D 2C EB 32 EB
 219+ EF91 3A EB
 220+ EF93 42 EB 4B EB                          DW GalaxyDescList13A, GalaxyDescList13B, GalaxyDescList13C, GalaxyDescList13D, GalaxyDescList13E
 220+ EF97 52 EB 58 EB
 220+ EF9B 60 EB
 221+ EF9D 69 EB 71 EB                          DW GalaxyDescList14A, GalaxyDescList14B, GalaxyDescList14C, GalaxyDescList14D, GalaxyDescList14E
 221+ EFA1 7C EB 84 EB
 221+ EFA5 8D EB
 222+ EFA7 94 EB 97 EB                          DW GalaxyDescList15A, GalaxyDescList15B, GalaxyDescList15C, GalaxyDescList15D, GalaxyDescList15E
 222+ EFAB A5 EB B2 EB
 222+ EFAF BE EB
 223+ EFB1 C9 EB D8 EB                          DW GalaxyDescList16A, GalaxyDescList16B, GalaxyDescList16C, GalaxyDescList16D, GalaxyDescList16E
 223+ EFB5 E0 EB E6 EB
 223+ EFB9 EF EB
 224+ EFBB FA EB 01 EC                          DW GalaxyDescList17A, GalaxyDescList17B, GalaxyDescList17C, GalaxyDescList17D, GalaxyDescList17E
 224+ EFBF 07 EC 0D EC
 224+ EFC3 1B EC
 225+ EFC5 20 EC 25 EC                          DW GalaxyDescList18A, GalaxyDescList18B, GalaxyDescList18C, GalaxyDescList18D, GalaxyDescList18E
 225+ EFC9 2A EC 2F EC
 225+ EFCD 33 EC
 226+ EFCF 36 EC 3B EC                          DW GalaxyDescList19A, GalaxyDescList19B, GalaxyDescList19C, GalaxyDescList19D, GalaxyDescList19E
 226+ EFD3 49 EC 4D EC
 226+ EFD7 53 EC
 227+ EFD9 58 EC 61 EC                          DW GalaxyDescList20A, GalaxyDescList20B, GalaxyDescList20C, GalaxyDescList20D, GalaxyDescList20E
 227+ EFDD 67 EC 6C EC
 227+ EFE1 79 EC
 228+ EFE3 83 EC 89 EC                          DW GalaxyDescList21A, GalaxyDescList21B, GalaxyDescList21C, GalaxyDescList21D, GalaxyDescList21E
 228+ EFE7 8F EC 97 EC
 228+ EFEB 9F EC
 229+ EFED A8 EC B1 EC                          DW GalaxyDescList22A, GalaxyDescList22B, GalaxyDescList22C, GalaxyDescList22D, GalaxyDescList22E
 229+ EFF1 BC EC CA EC
 229+ EFF5 D3 EC
 230+ EFF7 DA EC EA EC                          DW GalaxyDescList23A, GalaxyDescList23B, GalaxyDescList23C, GalaxyDescList23D, GalaxyDescList23E
 230+ EFFB 02 ED 0D ED
 230+ EFFF 2C ED
 231+ F001 37 ED 3C ED                          DW GalaxyDescList24A, GalaxyDescList24B, GalaxyDescList24C, GalaxyDescList24D, GalaxyDescList24E
 231+ F005 45 ED 4C ED
 231+ F009 51 ED
 232+ F00B 59 ED 5E ED                          DW GalaxyDescList25A, GalaxyDescList25B, GalaxyDescList25C, GalaxyDescList25D, GalaxyDescList25E
 232+ F00F 63 ED 6A ED
 232+ F013 6F ED
 233+ F015 74 ED 7C ED                          DW GalaxyDescList26A, GalaxyDescList26B, GalaxyDescList26C, GalaxyDescList26D, GalaxyDescList26E
 233+ F019 88 ED 92 ED
 233+ F01D 9C ED
 234+ F01F A1 ED A8 ED                          DW GalaxyDescList27A, GalaxyDescList27B, GalaxyDescList27C, GalaxyDescList27D, GalaxyDescList27E
 234+ F023 AF ED B4 ED
 234+ F027 BB ED
 235+ F029 C3 ED D2 ED                          DW GalaxyDescList28A, GalaxyDescList28B, GalaxyDescList28C, GalaxyDescList28D, GalaxyDescList28E
 235+ F02D DE ED E8 ED
 235+ F031 F8 ED
 236+ F033 02 EE 08 EE                          DW GalaxyDescList29A, GalaxyDescList29B, GalaxyDescList29C, GalaxyDescList29D, GalaxyDescList29E
 236+ F037 0E EE 15 EE
 236+ F03B 1A EE
 237+ F03D 21 EE 24 EE                          DW GalaxyDescList30A, GalaxyDescList30B, GalaxyDescList30C, GalaxyDescList30D, GalaxyDescList30E
 237+ F041 2A EE 32 EE
 237+ F045 3D EE
 238+ F047 43 EE 49 EE                          DW GalaxyDescList31A, GalaxyDescList31B, GalaxyDescList31C, GalaxyDescList31D, GalaxyDescList31E
 238+ F04B 4F EE 55 EE
 238+ F04F 5B EE
 239+ F051 60 EE 68 EE                          DW GalaxyDescList32A, GalaxyDescList32B, GalaxyDescList32C, GalaxyDescList32D, GalaxyDescList32E
 239+ F055 6C EE 73 EE
 239+ F059 78 EE
 240+ F05B 7D EE 87 EE                          DW GalaxyDescList33A, GalaxyDescList33B, GalaxyDescList33C, GalaxyDescList33D, GalaxyDescList33E
 240+ F05F 94 EE A7 EE
 240+ F063 B1 EE
 241+ F065 BB EE C0 EE                          DW GalaxyDescList34A, GalaxyDescList34B, GalaxyDescList34C, GalaxyDescList34D, GalaxyDescList34E
 241+ F069 C7 EE CD EE
 241+ F06D D5 EE
 242+ F06F DA EE DE EE                          DW GalaxyDescList35A, GalaxyDescList35B, GalaxyDescList35C, GalaxyDescList35D, GalaxyDescList35E
 242+ F073 E2 EE E9 EE
 242+ F077 F0 EE
 243+ F079 F9 EE 00 EF                          DW GalaxyDescList36A, GalaxyDescList36B, GalaxyDescList36C, GalaxyDescList36D, GalaxyDescList36E
 243+ F07D 08 EF 0F EF
 243+ F081 14 EF
 244+ F083
 245+ F083 4C 61 72 67  GalaxyInhabitantDesc1   DB "Large ",0
 245+ F087 65 20 00
 246+ F08A 46 69 65 72  GalaxyInhabitantDesc1A  DB "Fierce ",0
 246+ F08E 63 65 20 00
 247+ F092 53 6D 61 6C  GalaxyInhabitantDesc1B  DB "Small ", 0
 247+ F096 6C 20 00
 248+ F099 47 72 65 65  GalaxyInhabitantDesc2   DB "Green ",0
 248+ F09D 6E 20 00
 249+ F0A0 52 65 64 20  GalaxyInhabitantDesc2A  DB "Red ",  0
 249+ F0A4 00
 250+ F0A5 59 65 6C 6C  GalaxyInhabitantDesc2B  DB "Yellow ",0
 250+ F0A9 6F 77 20 00
 251+ F0AD 42 6C 75 65  GalaxyInhabitantDesc2C  DB "Blue ",  0
 251+ F0B1 20 00
 252+ F0B3 42 6C 61 63  GalaxyInhabitantDesc2D  DB "Black ",0
 252+ F0B7 6B 20 00
 253+ F0BA 48 61 72 6D  GalaxyInhabitantDesc2E  DB "Harmless ",0
 253+ F0BE 6C 65 73 73
 253+ F0C2 20 00
 254+ F0C4 53 6C 69 6D  GalaxyInhabitantDesc3   DB "Slimy ",0
 254+ F0C8 79 20 00
 255+ F0CB 42 75 67 2D  GalaxyInhabitantDesc3A  DB "Bug-Eyed ", 0
 255+ F0CF 45 79 65 64
 255+ F0D3 20 00
 256+ F0D5 48 6F 72 6E  GalaxyInhabitantDesc3B  DB "Horned ",0
 256+ F0D9 65 64 20 00
 257+ F0DD 42 6F 6E 79  GalaxyInhabitantDesc3C  DB "Bony ",  0
 257+ F0E1 20 00
 258+ F0E3 46 61 74 20  GalaxyInhabitantDesc3D  DB "Fat ",  0
 258+ F0E7 00
 259+ F0E8 46 75 72 72  GalaxyInhabitantDesc3E  DB "Furry ",  0
 259+ F0EC 79 20 00
 260+ F0EF 52 6F 64 65  GalaxyInhabitantDesc4   DB "Rodent",0
 260+ F0F3 6E 74 00
 261+ F0F6 46 72 6F 67  GalaxyInhabitantDesc4A  DB "Frog",      0
 261+ F0FA 00
 262+ F0FB 4C 69 7A 61  GalaxyInhabitantDesc4B  DB "Lizard", 0
 262+ F0FF 72 64 00
 263+ F102 4C 6F 62 73  GalaxyInhabitantDesc4C  DB "Lobster",0
 263+ F106 74 65 72 00
 264+ F10A 42 69 72 64  GalaxyInhabitantDesc4D  DB "Bird",  0
 264+ F10E 00
 265+ F10F 48 75 6D 61  GalaxyInhabitantDesc4E  DB "Humanoid", 0
 265+ F113 6E 6F 69 64
 265+ F117 00
 266+ F118 46 65 6C 69  GalaxyInhabitantDesc4F  DB "Feline", 0
 266+ F11C 6E 65 00
 267+ F11F 49 6E 73 65  GalaxyInhabitantDesc4G  DB "Insect",0
 267+ F123 63 74 00
 268+ F126 48 75 6D 61  GalaxyInhabitantHuman   DB "Human Colonal",0
 268+ F12A 6E 20 43 6F
 268+ F12E 6C 6F 6E 61
 268+ F132 6C 00
 269+ F134
 270+ F134 83 F0 8A F0  GalaxyInhabitantDesc1Ix DW GalaxyInhabitantDesc1,GalaxyInhabitantDesc1A,GalaxyInhabitantDesc1B
 270+ F138 92 F0
 271+ F13A 99 F0 A0 F0  GalaxyInhabitantDesc2Ix DW GalaxyInhabitantDesc2,GalaxyInhabitantDesc2A,GalaxyInhabitantDesc2B,GalaxyInhabitantDesc2C,GalaxyInhabitantDesc2D,GalaxyInhabitantDesc2E
 271+ F13E A5 F0 AD F0
 271+ F142 B3 F0 BA F0
 272+ F146 C4 F0 CB F0  GalaxyInhabitantDesc3Ix DW GalaxyInhabitantDesc3,GalaxyInhabitantDesc3A,GalaxyInhabitantDesc3B,GalaxyInhabitantDesc3C,GalaxyInhabitantDesc3D,GalaxyInhabitantDesc3E
 272+ F14A D5 F0 DD F0
 272+ F14E E3 F0 E8 F0
 273+ F152 EF F0 F6 F0  GalaxyInhabitantDesc4Ix DW GalaxyInhabitantDesc4,GalaxyInhabitantDesc4A,GalaxyInhabitantDesc4B,GalaxyInhabitantDesc4C,GalaxyInhabitantDesc4D,GalaxyInhabitantDesc4E,GalaxyInhabitantDesc4F,GalaxyInhabitantDesc4G
 273+ F156 FB F0 02 F1
 273+ F15A 0A F1 0F F1
 273+ F15E 18 F1 1F F1
 274+ F162 26 F1        GalaxyInhabitantHumanIx DW GalaxyInhabitantHuman
 275+ F164 00 00 00...  GalaxySpecies           DS 32
 276+ F184 00                                   DB 0
 277+ F185 00 00 00...  GalaxyPlanetDescription DS 300
 278+ F2B1 00                                   DB 0
 279+ F2B2 00 00 00...  GalaxyPlanetSource      DS 300,0
 280+ F3DE 3C 31 34 3E  GalaxyPlanetDescStarter DB "<14> is <22>",0
 280+ F3E2 20 69 73 20
 280+ F3E6 3C 32 32 3E
 280+ F3EA 00
 281+ F3EB
 282+ F3EB
 283+ F3EB D3           GalaxyExtendedDescs:    DB 211                                                  ; System 211, Galaxy 0                Teorge = Token  1
 284+ F3EC 96                                   DB 150                                                  ; System 150, Galaxy 0, Mission 1       Xeer = Token  2
 285+ F3ED 24                                   DB 36                                                   ; System  36, Galaxy 0, Mission 1   Reesdice = Token  3
 286+ F3EE 1C                                   DB 28                                                   ; System  28, Galaxy 0, Mission 1      Arexe = Token  4
 287+ F3EF FD                                   DB 253                                                  ; System 253, Galaxy 1, Mission 1     Errius = Token  5
 288+ F3F0 4F                                   DB 79                                                   ; System  79, Galaxy 1, Mission 1     Inbibe = Token  6
 289+ F3F1 35                                   DB 53                                                   ; System  53, Galaxy 1, Mission 1      Ausar = Token  7
 290+ F3F2 76                                   DB 118                                                  ; System 118, Galaxy 1, Mission 1     Usleri = Token  8
 291+ F3F3 64                                   DB 100                                                  ; System 100, Galaxy 2                Arredi = Token  9
 292+ F3F4 20                                   DB 32                                                   ; System  32, Galaxy 1, Mission 1     Bebege = Token 10
 293+ F3F5 44                                   DB 68                                                   ; System  68, Galaxy 1, Mission 1     Cearso = Token 11
 294+ F3F6 A4                                   DB 164                                                  ; System 164, Galaxy 1, Mission 1     Dicela = Token 12
 295+ F3F7 DC                                   DB 220                                                  ; System 220, Galaxy 1, Mission 1     Eringe = Token 13
 296+ F3F8 6A                                   DB 106                                                  ; System 106, Galaxy 1, Mission 1     Gexein = Token 14
 297+ F3F9 10                                   DB 16                                                   ; System  16, Galaxy 1, Mission 1     Isarin = Token 15
 298+ F3FA A2                                   DB 162                                                  ; System 162, Galaxy 1, Mission 1   Letibema = Token 16
 299+ F3FB 03                                   DB 3                                                    ; System   3, Galaxy 1, Mission 1     Maisso = Token 17
 300+ F3FC 6B                                   DB 107                                                  ; System 107, Galaxy 1, Mission 1       Onen = Token 18
 301+ F3FD 1A                                   DB 26                                                   ; System  26, Galaxy 1, Mission 1     Ramaza = Token 19
 302+ F3FE C0                                   DB 192                                                  ; System 192, Galaxy 1, Mission 1     Sosole = Token 20
 303+ F3FF B8                                   DB 184                                                  ; System 184, Galaxy 1, Mission 1     Tivere = Token 21
 304+ F400 05                                   DB 5                                                    ; System   5, Galaxy 1, Mission 1     Veriar = Token 22
 305+ F401 65                                   DB 101                                                  ; System 101, Galaxy 2, Mission 1     Xeveon = Token 23
 306+ F402 C1                                   DB 193                                                  ; System 193, Galaxy 1, Mission 1     Orarra = Token 24
 307+ F403 29                                   DB 41                                                   ; System  41, Galaxy 2                Anreer = Token 25
 308+ F404 07                                   DB 7                                                    ; System   7, Galaxy 0                  Lave = Token 26
 309+ F405 2E                                   DB 46                                                   ; System  46, Galaxy 0              Riedquat = Token 27
 310+ F406
 311+ F406                  INCLUDE "./Data/EquipmentEquates.asm"
# file opened: ././Data/EquipmentEquates.asm
   1++F406
   2++F406              EQ_FUEL                 EQU 0
   3++F406              EQ_MISSILE              EQU 1
   4++F406              EQ_CARGO_BAY            EQU 2
   5++F406              EQ_ECM                  EQU 3
   6++F406              EQ_FUEL_SCOOPS          EQU 4
   7++F406              EQ_ESCAPE_POD           EQU 5
   8++F406              EQ_ENERGY_BOMB          EQU 6
   9++F406              EQ_ENERGY_UNIT          EQU 7
  10++F406              EQ_DOCK_COMP            EQU 8
  11++F406              EQ_GAL_DRIVE            EQU 9
  12++F406              EQ_FRONT_PULSE          EQU 10
  13++F406              EQ_REAR_PULSE           EQU 11
  14++F406              EQ_LEFT_PULSE           EQU 12
  15++F406              EQ_RIGHT_PULSE          EQU 13
  16++F406              EQ_FRONT_BEAM           EQU 14
  17++F406              EQ_REAR_BEAM            EQU 15
  18++F406              EQ_LEFT_BEAM            EQU 16
  19++F406              EQ_RIGHT_BEAM           EQU 17
  20++F406              EQ_FRONT_MINING         EQU 18
  21++F406              EQ_REAR_MINING          EQU 19
  22++F406              EQ_LEFT_MINING          EQU 20
  23++F406              EQ_RIGHT_MINING         EQU 21
  24++F406              EQ_FRONT_MILITARY       EQU 22
  25++F406              EQ_REAR_MILITARY        EQU 23
  26++F406              EQ_LEFT_MILITARY        EQU 24
  27++F406              EQ_RIGHT_MILITARY       EQU 25
  28++F406
  29++F406              EQ_ITEM_COUNT           EQU EQ_RIGHT_MILITARY+1
  30++F406
# file closed: ././Data/EquipmentEquates.asm
 312+ F406
 313+ F406              EquipNameTableRowLen    EQU 8
 314+ F406 CE A2 00 00  ShipEquipNameTable      DW  WordFuel,       0,              0,          0
 314+ F40A 00 00 00 00
 315+ F40E 83 A5 00 00                          DW  WordMissile,    0,              0,          0
 315+ F412 00 00 00 00
 316+ F416 B3 A2 C4 A2                          DW  WordLarge,      WordCargo,      WordBay,    0
 316+ F41A CA A2 00 00
 317+ F41E DA A2 E1 A2                          DW  WordECM,        WordSystem,     0,          0
 317+ F422 00 00 00 00
 318+ F426 CE A2 D3 A2                          DW  WordFuel,       WordScoops,     0,          0
 318+ F42A 00 00 00 00
 319+ F42E B9 A2 C0 A2                          DW  WordEscape,     WordPod,        0,          0
 319+ F432 00 00 00 00
 320+ F436 E8 A2 EF A2                          DW  WordEnergy,     WordBomb,       0,          0
 320+ F43A 00 00 00 00
 321+ F43E 4D A3 E8 A2                          DW  WordExtra,      WordEnergy,     WordUnit,   0
 321+ F442 1B A3 00 00
 322+ F446 27 A3 2F A3                          DW  WordDocking,    WordComputers,  0,          0
 322+ F44A 00 00 00 00
 323+ F44E 44 A3 8B A5                          DW  WordGalactic,   WordHyperdrive, 0,          0
 323+ F452 00 00 00 00
 324+ F456 9D A2 FA A2                          DW  WordFront,      WordPulse,      WordLaser,  0
 324+ F45A F4 A2 00 00
 325+ F45E AE A2 FA A2                          DW  WordRear,       WordPulse,      WordLaser,  0
 325+ F462 F4 A2 00 00
 326+ F466 A9 A2 FA A2                          DW  WordLeft,       WordPulse,      WordLaser,  0
 326+ F46A F4 A2 00 00
 327+ F46E A3 A2 FA A2                          DW  WordRight,      WordPulse,      WordLaser,  0
 327+ F472 F4 A2 00 00
 328+ F476 9D A2 00 A3                          DW  WordFront,      WordBeam,       WordLaser,  0
 328+ F47A F4 A2 00 00
 329+ F47E AE A2 00 A3                          DW  WordRear,       WordBeam,       WordLaser,  0
 329+ F482 F4 A2 00 00
 330+ F486 A9 A2 00 A3                          DW  WordLeft,       WordBeam,       WordLaser,  0
 330+ F48A F4 A2 00 00
 331+ F48E A3 A2 00 A3                          DW  WordRight,      WordBeam,       WordLaser,  0
 331+ F492 F4 A2 00 00
 332+ F496 9D A2 0D A3                          DW  WordFront,      WordMining,     WordLaser,  0
 332+ F49A F4 A2 00 00
 333+ F49E AE A2 0D A3                          DW  WordRear,       WordMining,     WordLaser,  0
 333+ F4A2 F4 A2 00 00
 334+ F4A6 A9 A2 0D A3                          DW  WordLeft,       WordMining,     WordLaser,  0
 334+ F4AA F4 A2 00 00
 335+ F4AE A3 A2 0D A3                          DW  WordRight,      WordMining,     WordLaser,  0
 335+ F4B2 F4 A2 00 00
 336+ F4B6 9D A2 96 A5                          DW  WordFront,      WordMilitary,   WordLaser,  0
 336+ F4BA F4 A2 00 00
 337+ F4BE AE A2 96 A5                          DW  WordRear,       WordMilitary,   WordLaser,  0
 337+ F4C2 F4 A2 00 00
 338+ F4C6 A9 A2 96 A5                          DW  WordLeft,       WordMilitary,   WordLaser,  0
 338+ F4CA F4 A2 00 00
 339+ F4CE A3 A2 96 A5                          DW  WordRight,      WordMilitary,   WordLaser,  0
 339+ F4D2 F4 A2 00 00
 340+ F4D6
 341+ F4D6              ;Each row is 7 bytes
 342+ F4D6              ;                                                               12345  6  789012345678901
 343+ F4D6              ;	canbuy;
 344+ F4D6              ;	y;
 345+ F4D6              ;	show;
 346+ F4D6              ;	level;
 347+ F4D6              ;	price 2 bytes;
 348+ F4D6              ;	type;
 349+ F4D6              ;ShipFrontWeapons        DB EQ_FRONT_PULSE,  EQ_FRONT_PULSE,     EQ_FRONT_MINING,    EQ_FRONT_MINING
 350+ F4D6              ;ShipRearWeapons         DB EQ_REAR_PULSE,   EQ_REAR_PULSE,      EQ_REAR_MINING,     EQ_REAR_MINING
 351+ F4D6              ;ShipLeftWeapons         DB EQ_LEFT_PULSE,   EQ_LEFT_PULSE,      EQ_LEFT_MINING,     EQ_LEFT_MINING
 352+ F4D6              ;ShipRightWeapons        DB EQ_RIGHT_PULSE,  EQ_RIGHT_PULSE,     EQ_RIGHT_MINING,    EQ_RIGHT_MINING
 353+ F4D6              ;                           c  y  s  t
 354+ F4D6              ;                           a  p  h  e                                            fi     P     Vi
 355+ F4D6              ;                           n  o  o  c                                            tt     o     ew
 356+ F4D6              ;                           B  s  w  h  price                  type               ed     s
 357+ F4D6 00 00 01 01  ShipEquipmentList       DB  0, 0, 1, 1, low     2, high     2, EQ_FUEL          , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 357+ F4DA 02 00 00 00
 357+ F4DE FF 00 00 00
 357+ F4E2 00 00 00 00
 358+ F4E6 00 01 01 01                          DB  0, 1, 1, 1, low   300, high   300, EQ_MISSILE       , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 358+ F4EA 2C 01 01 00
 358+ F4EE FF 00 00 00
 358+ F4F2 00 00 00 00
 359+ F4F6 00 02 01 01                          DB  0, 2, 1, 1, low  4000, high  4000, EQ_CARGO_BAY     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 359+ F4FA A0 0F 02 00
 359+ F4FE FF 00 00 00
 359+ F502 00 00 00 00
 360+ F506 00 03 01 02                          DB  0, 3, 1, 2, low  6000, high  6000, EQ_ECM           , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 360+ F50A 70 17 03 00
 360+ F50E FF 00 00 00
 360+ F512 00 00 00 00
 361+ F516 00 04 01 05                          DB  0, 4, 1, 5, low  5250, high  5250, EQ_FUEL_SCOOPS   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 361+ F51A 82 14 04 00
 361+ F51E FF 00 00 00
 361+ F522 00 00 00 00
 362+ F526 00 05 01 06                          DB  0, 5, 1, 6, low 10000, high 10000, EQ_ESCAPE_POD    , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 362+ F52A 10 27 05 00
 362+ F52E FF 00 00 00
 362+ F532 00 00 00 00
 363+ F536 00 06 01 07                          DB  0, 6, 1, 7, low  9000, high  9000, EQ_ENERGY_BOMB   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 363+ F53A 28 23 06 00
 363+ F53E FF 00 00 00
 363+ F542 00 00 00 00
 364+ F546 00 07 01 08                          DB  0, 7, 1, 8, low 15000, high 15000, EQ_ENERGY_UNIT   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 364+ F54A 98 3A 07 00
 364+ F54E FF 00 00 00
 364+ F552 00 00 00 00
 365+ F556 00 08 01 09                          DB  0, 8, 1, 9, low 15000, high 15000, EQ_DOCK_COMP     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 365+ F55A 98 3A 08 00
 365+ F55E FF 00 00 00
 365+ F562 00 00 00 00
 366+ F566 00 09 01 0A                          DB  0, 9, 1,10, low 50000, high 50000, EQ_GAL_DRIVE     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 366+ F56A 50 C3 09 00
 366+ F56E FF 00 00 00
 366+ F572 00 00 00 00
 367+ F576 00 0A 01 03                          DB  0,10, 1, 3, low  4000, high  4000, EQ_FRONT_PULSE   , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 367+ F57A A0 0F 0A 00
 367+ F57E 00 00 00 00
 367+ F582 00 00 00 00
 368+ F586 00 0B 01 03                          DB  0,11, 1, 3, low  4000, high  4000, EQ_REAR_PULSE    , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 368+ F58A A0 0F 0B 00
 368+ F58E 01 01 00 00
 368+ F592 00 00 00 00
 369+ F596 00 0C 01 03                          DB  0,12, 1, 3, low  4000, high  4000, EQ_LEFT_PULSE    , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 369+ F59A A0 0F 0C 00
 369+ F59E 02 02 00 00
 369+ F5A2 00 00 00 00
 370+ F5A6 00 0D 01 03                          DB  0,13, 1, 3, low  4000, high  4000, EQ_RIGHT_PULSE   , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 370+ F5AA A0 0F 0D 00
 370+ F5AE 03 03 00 00
 370+ F5B2 00 00 00 00
 371+ F5B6 00 0E 00 04                          DB  0,14, 0, 4, low 10000, high 10000, EQ_FRONT_BEAM    , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 371+ F5BA 10 27 0E 00
 371+ F5BE 00 00 00 00
 371+ F5C2 00 00 00 00
 372+ F5C6 00 0F 00 04                          DB  0,15, 0, 4, low 10000, high 10000, EQ_REAR_BEAM     , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 372+ F5CA 10 27 0F 00
 372+ F5CE 01 01 00 00
 372+ F5D2 00 00 00 00
 373+ F5D6 00 10 00 04                          DB  0,16, 0, 4, low 10000, high 10000, EQ_LEFT_BEAM     , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 373+ F5DA 10 27 10 00
 373+ F5DE 02 02 00 00
 373+ F5E2 00 00 00 00
 374+ F5E6 00 11 00 04                          DB  0,17, 0, 4, low 10000, high 10000, EQ_RIGHT_BEAM    , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 374+ F5EA 10 27 11 00
 374+ F5EE 03 03 00 00
 374+ F5F2 00 00 00 00
 375+ F5F6 00 12 00 0A                          DB  0,18, 0,10, low  8000, high  8000, EQ_FRONT_MINING  , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 375+ F5FA 40 1F 12 00
 375+ F5FE 00 00 00 00
 375+ F602 00 00 00 00
 376+ F606 00 13 00 0A                          DB  0,19, 0,10, low  8000, high  8000, EQ_REAR_MINING   , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 376+ F60A 40 1F 13 00
 376+ F60E 01 01 00 00
 376+ F612 00 00 00 00
 377+ F616 00 14 00 0A                          DB  0,20, 0,10, low  8000, high  8000, EQ_LEFT_MINING   , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 377+ F61A 40 1F 14 00
 377+ F61E 02 02 00 00
 377+ F622 00 00 00 00
 378+ F626 00 15 00 0A                          DB  0,21, 0,10, low  8000, high  8000, EQ_RIGHT_MINING  , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 378+ F62A 40 1F 15 00
 378+ F62E 03 03 00 00
 378+ F632 00 00 00 00
 379+ F636 00 16 00 0A                          DB  0,22, 0,10, low 60000, high 60000, EQ_FRONT_MILITARY, 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 379+ F63A 60 EA 16 00
 379+ F63E 00 00 00 00
 379+ F642 00 00 00 00
 380+ F646 00 17 00 0A                          DB  0,23, 0,10, low 60000, high 60000, EQ_REAR_MILITARY , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 380+ F64A 60 EA 17 00
 380+ F64E 01 01 00 00
 380+ F652 00 00 00 00
 381+ F656 00 18 00 0A                          DB  0,24, 0,10, low 60000, high 60000, EQ_LEFT_MILITARY , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 381+ F65A 60 EA 18 00
 381+ F65E 02 02 00 00
 381+ F662 00 00 00 00
 382+ F666 00 19 00 0A                          DB  0,25, 0,10, low 60000, high 60000, EQ_RIGHT_MILITARY, 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 382+ F66A 60 EA 19 00
 382+ F66E 03 03 00 00
 382+ F672 00 00 00 00
 383+ F676              ShipEquipTableRowLen    EQU 16
 384+ F676              ShipEquipTableSize      EQU ($-ShipEquipmentList)/ShipEquipTableRowLen
 385+ F676
 386+ F676              ;------------------------------------------------------------------------------------------------------------------------------------
 387+ F676 2B           GalaxyRandSeed			DB	43	            ; Just some start values
 388+ F677 20           GalaxyRandSeed1			DB	32	            ; Just some start values
 389+ F678 0C           GalaxyRandSeed2			DB	12	            ; Just some start values
 390+ F679 42           GalaxyRandSeed3			DB	66	            ; Just some start values
 391+ F67A              GalaxySeedRandom:
 392+ F67A              ;------------------------------------------------------------------------------------------------------------------------------------
 393+ F67A CD AB 9F     GetDigramGalaxySeed:    call	copy_galaxy_to_working
 394+ F67D 18 03                                jr		GetDigramWorkingSeed
 395+ F67F CD C3 9F     GetDigramSystemSeed:    call	copy_system_to_working
 396+ F682 11 C1 A7     GetDigramWorkingSeed:   ld		de,name_expanded    ; ">GetDigram a = digram seed"
 397+ F685 06 03                                ld		b,3
 398+ F687 3A 46 9B                             ld		a,(WorkingSeeds)
 399+ F68A E6 40                                and		$40
 400+ F68C 28 03                                jr		z,.SmallSizeName
 401+ F68E CD E2 A7     .LargeSizeName:         call	NamingLoop
 402+ F691 CD E2 A7     .SmallSizeName:         call	NamingLoop
 403+ F694 CD E2 A7                             call	NamingLoop
 404+ F697 CD E2 A7                             call	NamingLoop
 405+ F69A EB           .DoneName:              ex		de,hl
 406+ F69B 36 00                                ld		(hl),0
 407+ F69D EB                                   ex		de,hl
 408+ F69E C9                                   ret
 409+ F69F
 410+ F69F 11 76 F6     GalaxySetSeedFromHL:    ld      de,GalaxyRandSeed
 411+ F6A2              ; Uses registers a,b and hl
 412+ F6A2 B7           GalaxyDoRandom:         or      a                                               ; in 6502 this is called after a bcc instruction to will always be clear (see .detok2 and .dt6)
 413+ F6A3 3A 76 F6                             ld      a,(GalaxyRandSeed)
 414+ F6A6 CB 17        .Seed0Rolled:           rl      a                                               ; r0 << 1
 415+ F6A8 47                                   ld      b,a                                             ; b = reg x in 6502 so x = r0 << 1
 416+ F6A9 21 78 F6     .AddSeed2               ld      hl,GalaxyRandSeed2                              ;
 417+ F6AC 8E                                   adc     a,(hl)                                          ; a = r0 << 1 + r2
 418+ F6AD 32 76 F6     .SetRandSeed0:          ld		(GalaxyRandSeed),a					            ; set r0' = (r0 << 1) +  r2 + (r0 bit 7)
 419+ F6B0 78                                   ld      a,b
 420+ F6B1 32 78 F6     .SetRandSeed2:          ld      (GalaxyRandSeed2),a                             ; set r2' =  r0 << 1
 421+ F6B4 3A 77 F6     .GetRandSeed1:          ld      a,(GalaxyRandSeed1)
 422+ F6B7 47                                   ld      b,a                                             ; b = r1
 423+ F6B8 21 79 F6                             ld      hl,GalaxyRandSeed3
 424+ F6BB 8E                                   adc     a,(hl)                                          ; Adc from before may have set carry flag or may not, will be set if r0 << 1 + r2 + carry > 256
 425+ F6BC 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; set r1' = r1 + r3 + carry
 426+ F6BF 4F                                   ld      c,a
 427+ F6C0 78                                   ld      a,b
 428+ F6C1 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; set r3 = r1
 429+ F6C4 79                                   ld      a,c
 430+ F6C5 C9                                   ret
 431+ F6C6
 432+ F6C6              ;------------------------------------------------------------------------------------------------------------------------------------
 433+ F6C6 ED 31        galaxy_cpy_str_a_at_hl_to_de:add     hl,a
 434+ F6C8 ED 31                                add     hl,a
 435+ F6CA 7E                                   ld      a,(hl)              ;  Fetch low byte
 436+ F6CB 47                                   ld      b,a
 437+ F6CC 23                                   inc     hl
 438+ F6CD 7E                                   ld      a,(hl)              ;  Fetch high byte
 439+ F6CE 68                                   ld      l,b
 440+ F6CF 67                                   ld      h,a
 441+ F6D0 7E           GalaxyCopyLoop:         ld      a,(hl)
 442+ F6D1 FE 00                                cp      0
 443+ F6D3 28 05                                jr      z,.CopyDone
 444+ F6D5 12                                   ld      (de),a
 445+ F6D6 23                                   inc     hl
 446+ F6D7 13                                   inc     de
 447+ F6D8 18 F6                                jr      GalaxyCopyLoop
 448+ F6DA 12           .CopyDone:              ld      (de),a
 449+ F6DB C9                                   ret
 450+ F6DC              ;------------------------------------------------------------------------------------------------------------------------------------
 451+ F6DC 11 64 F1     galaxy_get_species:     ld      de,GalaxySpecies
 452+ F6DF 3E 28                                ld      a,"("
 453+ F6E1 12                                   ld      (de),a
 454+ F6E2 13                                   inc     de
 455+ F6E3 3A FC E8                             ld      a,(GalaxyWorkingSeed+4)
 456+ F6E6 CB 7F                                bit     7,a
 457+ F6E8 20 0A                                jr      nz,.NonHuman
 458+ F6EA 21 62 F1                             ld      hl,GalaxyInhabitantHumanIx
 459+ F6ED AF                                   xor     a
 460+ F6EE CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 461+ F6F1 C3 4F F7                             jp      .galaxy_species_exit
 462+ F6F4 3A FD E8     .NonHuman:              ld      a,(GalaxyWorkingSeed+5)
 463+ F6F7 CB 3F                                srl     a
 464+ F6F9 CB 3F                                srl     a
 465+ F6FB E6 07                                and     $07
 466+ F6FD FE 03                                cp      3
 467+ F6FF 30 0A                                jr      nc,.NotDesc1
 468+ F701 21 34 F1                             ld      hl,GalaxyInhabitantDesc1Ix
 469+ F704 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 470+ F707 3E 20                                ld      a," "
 471+ F709 12                                   ld      (de),a
 472+ F70A 13                                   inc     de
 473+ F70B 3A FD E8     .NotDesc1:              ld      a,(GalaxyWorkingSeed+5)
 474+ F70E CB 3F                                srl     a
 475+ F710 CB 3F                                srl     a
 476+ F712 CB 3F                                srl     a
 477+ F714 CB 3F                                srl     a
 478+ F716 CB 3F                                srl     a
 479+ F718 FE 06                                cp      6
 480+ F71A 30 0A                                jr      nc,.NotDesc2
 481+ F71C 21 3A F1                             ld      hl,GalaxyInhabitantDesc2Ix
 482+ F71F CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 483+ F722 3E 20                                ld      a," "
 484+ F724 12                                   ld      (de),a
 485+ F725 13                                   inc     de
 486+ F726 3A F9 E8     .NotDesc2:              ld      a,(GalaxyWorkingSeed+1)
 487+ F729 47                                   ld      b,a
 488+ F72A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 489+ F72D A8                                   xor     b
 490+ F72E E6 07                                and     $07
 491+ F730 F5                                   push    af
 492+ F731 FE 06                                cp      6
 493+ F733 30 0A                                jr      nc,.NotDesc3
 494+ F735 21 46 F1                             ld      hl,GalaxyInhabitantDesc3Ix
 495+ F738 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 496+ F73B 3E 20                                ld      a," "
 497+ F73D 12                                   ld      (de),a
 498+ F73E 13                                   inc     de
 499+ F73F F1           .NotDesc3:              pop     af
 500+ F740 47                                   ld      b,a
 501+ F741 3A FD E8                             ld      a,(GalaxyWorkingSeed+5)
 502+ F744 E6 03                                and     $03
 503+ F746 80                                   add     a,b
 504+ F747 E6 07                                and     $07
 505+ F749 21 52 F1                             ld      hl,GalaxyInhabitantDesc4Ix
 506+ F74C CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 507+ F74F 3E 73        .galaxy_species_exit:   ld      a,"s"
 508+ F751 12                                   ld      (de),a
 509+ F752 13                                   inc     de
 510+ F753 3E 29                                ld      a,")"
 511+ F755 12                                   ld      (de),a
 512+ F756 13                                   inc     de
 513+ F757 AF                                   xor     a
 514+ F758 12                                   ld      (de),a
 515+ F759 C9                                   ret
 516+ F75A
 517+ F75A
 518+ F75A              ; To copy seed, loops from 3 to 0
 519+ F75A              ; copy seed X + 2 to target X
 520+ F75A              ; x = x -1
 521+ F75A
 522+ F75A              ; For lave we shoudl have "Lave is most famous for its vast rain forests and the Lavian tree grub"
 523+ F75A
 524+ F75A              GalaxyCapitaliseString: ; ">CapitaliseString hl = address"
 525+ F75A 23                                   inc		hl
 526+ F75B 7E                                   ld		a,(hl)
 527+ F75C FE 00                                cp		0
 528+ F75E C8                                   ret		z
 529+ F75F FE 5B                                cp		'Z'+1
 530+ F761 30 F7                                jr		nc,GalaxyCapitaliseString
 531+ F763 FE 41                                cp		'A'
 532+ F765 38 F3                                jr		c,GalaxyCapitaliseString
 533+ F767 C6 20        .LowerCase:             add		a,'a'-'A'
 534+ F769 77                                   ld		(hl),a
 535+ F76A 18 EE                                jr		GalaxyCapitaliseString
 536+ F76C
 537+ F76C
 538+ F76C              GalaxyGoatSoup:         ;ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 539+ F76C                                      ;call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 540+ F76C                                      ;cp      $FF
 541+ F76C                                      ;jr      z,.NoSystemFound
 542+ F76C 3A 48 9B     .SeedGalaxy             ld      a,(WorkingSeeds+2)                              ;
 543+ F76F 32 76 F6                             ld      (GalaxyRandSeed),a                              ; r0 = Seed C
 544+ F772 3A 49 9B                             ld      a,(WorkingSeeds+3)                              ;
 545+ F775 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; r1 = Seeed D
 546+ F778 3A 4A 9B                             ld      a,(WorkingSeeds+4)                              ;
 547+ F77B 32 78 F6                             ld      (GalaxyRandSeed2),a                             ; r2 = Seed E
 548+ F77E 3A 4B 9B                             ld      a,(WorkingSeeds+5)                              ;
 549+ F781 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; r3 = Seed F
 550+ F784 C9                                   ret
 551+ F785              ; For later......
 552+ F785 3E 05        .MarkExtendedDesc:      ld      a,5                                             ;  ("{lower case}{justify}{single cap}[86-90] IS [140-144].{cr}{left align}"
 553+ F787 F5           .GalaxyExpandDesc:      push    af
 554+ F788 47                                   ld      b,a                                             ; b = 6502 X reg
 555+ F789 C5                                   push    bc                                              ; save Y reg
 556+ F78A
 557+ F78A              ;------------------------------------------------------------------------------------------------------------------------------------
 558+ F78A              ; We enter here with BC = the Y and X Coordinates of the system to select in this galaxy
 559+ F78A              ; This is based on the docked BBC PDesc Pink Volcanoes version ratehr tha goat soup
 560+ F78A ED 43 5B E8  GalaxyPinkVolcano:      ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 561+ F78E CD 65 FC                             call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 562+ F791                                      ;cp      $FF
 563+ F791                                      ;jr      z,.NoSystemFound
 564+ F791              .SpecialDescs:          ; this is not implemented yet to read GalaxyExtendedDescs look at .PDL1
 565+ F791
 566+ F791
 567+ F791
 568+ F791              ;.NoSytemFound:          Print the "Unable to identify a system at present position"
 569+ F791
 570+ F791 00 00 00...  GalaxyNameCopy          DS      30
 571+ F7AF
 572+ F7AF 1E 00        ExpandAtHLToE:          ld      e,0
 573+ F7B1 7E           .ExpandTokenLoop:       ld      a,(hl)
 574+ F7B2 FE 3E                                cp      ">"
 575+ F7B4 C8                                   ret     z
 576+ F7B5 23                                   inc     hl
 577+ F7B6 16 0A                                ld      d,10
 578+ F7B8 ED 30                                mul
 579+ F7BA D6 30                                sub     "0"
 580+ F7BC 83                                   add     a,e
 581+ F7BD 5F                                   ld      e,a
 582+ F7BE 18 F1                                jr      .ExpandTokenLoop
 583+ F7C0
 584+ F7C0 E5           SelectTokenToHL:        push    hl                                          ;+1
 585+ F7C1 C5                                   push    bc                                          ;+2
 586+ F7C2 CD A2 F6                             call    GalaxyDoRandom
 587+ F7C5 C1                                   pop     bc                                          ;+1
 588+ F7C6 E1                                   pop     hl                                          ;+0
 589+ F7C7 16 00        .CalcOptionAToD:        ld      d,0
 590+ F7C9 FE 33                                cp      $33
 591+ F7CB DA CF F7                             jp      c,.Check66
 592+ F7CE 14           .IsGTE33:               inc     d
 593+ F7CF FE 66        .Check66:               cp      $66
 594+ F7D1 DA D5 F7                             jp      c,.Check99
 595+ F7D4 14           .IsGTE66:               inc     d
 596+ F7D5 FE 99        .Check99:               cp      $99
 597+ F7D7 DA DB F7     .IsGTE99:               jp      c,.CheckCC
 598+ F7DA 14                                   inc     d
 599+ F7DB FE CC        .CheckCC:               cp      $CC
 600+ F7DD 38 01                                jr      c,.TokenIdToAddress
 601+ F7DF 14           .ItGETCC:               inc     d
 602+ F7E0 21 1B EF     .TokenIdToAddress:      ld      hl,GalaxyDescList
 603+ F7E3 7B                                   ld      a,e
 604+ F7E4 CB 27                                sla     a                                               ; x 2
 605+ F7E6 ED 31                                add     hl,a                                            ; hl + a * 2
 606+ F7E8 ED 31                                add     hl,a                                            ; hl + a * 4
 607+ F7EA ED 31                                add     hl,a                                            ; hl + a * 6
 608+ F7EC ED 31                                add     hl,a                                            ; hl + a * 8
 609+ F7EE ED 31                                add     hl,a                                            ; hl + a * 10
 610+ F7F0 7A                                   ld      a,d
 611+ F7F1 ED 31                                add     hl,a
 612+ F7F3 ED 31                                add     hl,a                                            ; hl = desc array [e][d]
 613+ F7F5 7E           .LookUpDataFromTable:   ld      a,(hl)
 614+ F7F6 DD 6F                                ld      ixl,a
 615+ F7F8 23                                   inc     hl
 616+ F7F9 7E                                   ld      a,(hl)
 617+ F7FA DD 67                                ld      ixh,a                                           ; ix = address at (hl)
 618+ F7FC DD E5                                push    ix                                              ;+2
 619+ F7FE E1                                   pop     hl                                              ;+1
 620+ F7FF C9                                   ret
 621+ F800              ;------------------------------------------------------------------------------------------------------------------------------------
 622+ F800 E5           ProcessHSymbol:         push    hl                                              ;+1
 623+ F801 D5                                   push    de                                              ;+2
 624+ F802 C5                                   push    bc                                              ;+3
 625+ F803 21 91 F7     .CopyInNameH:           ld      hl, GalaxyNameCopy
 626+ F806 FD 54                                ld      d,iyh
 627+ F808 FD 5D                                ld      e,iyl
 628+ F80A CD D0 F6                             call    GalaxyCopyLoop
 629+ F80D FD 62                                ld      iyh,d
 630+ F80F FD 6B                                ld      iyl,e
 631+ F811 C1                                   pop     bc                                              ;+2
 632+ F812 D1                                   pop     de                                              ;+1
 633+ F813 E1                                   pop     hl
 634+ F814 C9                                   ret
 635+ F815              ;------------------------------------------------------------------------------------------------------------------------------------
 636+ F815 E5           ProcessISymbol:         push    hl                                              ;+1
 637+ F816 D5                                   push    de                                              ;+2
 638+ F817 C5                                   push    bc                                              ;+3
 639+ F818 21 91 F7     .CopyInNameI:           ld      hl, GalaxyNameCopy
 640+ F81B FD 54                                ld      d,iyh
 641+ F81D FD 5D                                ld      e,iyl
 642+ F81F CD D0 F6                             call    GalaxyCopyLoop
 643+ F822 FD 62                                ld      iyh,d
 644+ F824 FD 6B                                ld      iyl,e
 645+ F826 3E 69                                ld      a,"i"
 646+ F828 EB                                   ex      de,hl
 647+ F829 77                                   ld      (hl),a
 648+ F82A 23                                   inc     hl
 649+ F82B 3E 61                                ld      a,"a"
 650+ F82D 77                                   ld      (hl),a
 651+ F82E 23                                   inc     hl
 652+ F82F 3E 6E                                ld      a,"n"
 653+ F831 77                                   ld      (hl),a
 654+ F832 23                                   inc     hl
 655+ F833 E5                                   push    hl
 656+ F834 FD E1                                pop     iy
 657+ F836 C1                                   pop     bc                                              ;+2
 658+ F837 D1                                   pop     de                                              ;+1
 659+ F838 E1                                   pop     hl                                              ;+0
 660+ F839 C9                                   ret
 661+ F83A              ;------------------------------------------------------------------------------------------------------------------------------------
 662+ F83A E5           ProcessRSymbol:         push    hl                                              ;+1
 663+ F83B D5                                   push    de                                              ;+2
 664+ F83C CD A2 F6                             call    GalaxyDoRandom ;(Correct one or do we use teh clear carry version?)
 665+ F83F E6 03                                and     $03
 666+ F841 47                                   ld      b,a
 667+ F842 04                                   inc     b
 668+ F843 AF                                   xor     a
 669+ F844 4F                                   ld      c,a
 670+ F845 C5           .RLoop:                 push    bc                                              ;+3
 671+ F846 CD A2 F6                             call    GalaxyDoRandom
 672+ F849 C1                                   pop     bc                                              ;+2
 673+ F84A E6 3E                                and     $3E
 674+ F84C 21 A0 E8                             ld      hl,GalaxyName_digrams
 675+ F84F ED 31                                add     hl,a
 676+ F851 7E                                   ld      a,(hl)
 677+ F852 FE 41                                cp      "A"
 678+ F854 38 01                                jr      c,.NotLowercase
 679+ F856 81                                   add     a,c
 680+ F857 FD 77 00     .NotLowercase:          ld      (iy+0),a
 681+ F85A 23                                   inc     hl
 682+ F85B FD 23                                inc     iy
 683+ F85D 0E 20                                ld      c,$20               ; fixed force to lower case
 684+ F85F 7E                                   ld      a,(hl)
 685+ F860 FE 41                                cp      "A"
 686+ F862 38 01                                jr      c,.NotLowercase2
 687+ F864 81                                   add     a,c
 688+ F865 FD 77 00     .NotLowercase2:         ld      (iy+0),a
 689+ F868 FD 23                                inc     iy
 690+ F86A 10 D9                                djnz    .RLoop
 691+ F86C D1                                   pop     de                                              ;+1
 692+ F86D E1                                   pop     hl                                              ;+0
 693+ F86E C9                                   ret
 694+ F86F              ;------------------------------------------------------------------------------------------------------------------------------------
 695+ F86F ED 43 5B E8  GalaxyGenerateDesc:     ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 696+ F873 CD 65 FC                             call    galaxy_system_under_cursor
 697+ F876 CD BF FA     .CopySystemName:        call    galaxy_digram_seed                              ; make a local copy of system name
 698+ F879 21 7F E8                             ld      hl,GalaxyExpandedName
 699+ F87C 11 91 F7                             ld      de,GalaxyNameCopy
 700+ F87F CD D0 F6                             call    GalaxyCopyLoop
 701+ F882 21 91 F7     .CapitaliseName:        ld      hl,GalaxyNameCopy
 702+ F885 CD 5A F7                             call    GalaxyCapitaliseString
 703+ F888                                      ; we will also capitalise the local copy here later
 704+ F888 21 DE F3     .InitDescription:       ld      hl,GalaxyPlanetDescStarter                      ; Initialise galaxy description to  <14> is <22>
 705+ F88B 11 B2 F2                             ld      de,GalaxyPlanetSource
 706+ F88E CD D0 F6                             call    GalaxyCopyLoop
 707+ F891 AF           .ClearOutDescription:   xor     a
 708+ F892 21 85 F1                             ld      hl,GalaxyPlanetDescription
 709+ F895 77                                   ld      (hl),a
 710+ F896 11 86 F1                             ld      de,GalaxyPlanetDescription+1
 711+ F899 01 2C 01                             ld      bc,300                                          ; copy previous byte to current for 300 bytes (as we have DS 300 + 1)
 712+ F89C ED B0                                ldir                                                    ; zero it out, don't need this at the end but simplifies debugging
 713+ F89E CD 6C F7     .CopySeedToRandom:      call    GalaxyGoatSoup
 714+ F8A1 21 B2 F2                             ld      hl,GalaxyPlanetSource
 715+ F8A4 FD 21 85 F1                          ld      iy,GalaxyPlanetDescription
 716+ F8A8              ; At this point we are now prepped ready to expand the string to a full description
 717+ F8A8              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 718+ F8A8 7E           .ExpRecursive:          ld      a,(hl)
 719+ F8A9 FE 00                                cp      0
 720+ F8AB CA F0 F8                             jp      z,.ExpansionComplete
 721+ F8AE FE 3C                                cp      "<"
 722+ F8B0 C2 C3 F8                             jp      nz,.NotToken
 723+ F8B3 23           .ItIsAToken:            inc     hl
 724+ F8B4 CD AF F7     .ReadToken:             call    ExpandAtHLToE                                   ; here we have a <X> token
 725+ F8B7 23                                   inc     hl
 726+ F8B8 E5           .SaveCurrentPosition:   push    hl                                              ;+1 Save the current pointer to the text as we are now diverting off to another address
 727+ F8B9 CD C0 F7     .LookUpToken:           call    SelectTokenToHL                                 ; Get random token id by using d as list and e as offest against galaxydesc list and return address in hl
 728+ F8BC CD A8 F8                             call    .ExpRecursive
 729+ F8BF E1           .RestoreCurrentPosition:pop     hl                                              ;+0 get back our old HL we saved off
 730+ F8C0 C3 A8 F8     .TokenNextIteration:    jp      .ExpRecursive
 731+ F8C3              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 732+ F8C3 FE 25        .NotToken:              cp      "%"
 733+ F8C5 C2 E7 F8                             jp      nz,.RegularCharacter
 734+ F8C8 23                                   inc     hl                                              ; issue was that it was stuck on "%" and not reading the next character for the token to expand
 735+ F8C9 7E                                   ld      a,(hl)
 736+ F8CA FE 48                                cp      "H"
 737+ F8CC 20 07                                jr      nz,.IsItI
 738+ F8CE 23           .ItIsAnH:               inc     hl
 739+ F8CF CD 00 F8                             call    ProcessHSymbol
 740+ F8D2 C3 A8 F8                             jp      .ExpRecursive
 741+ F8D5 FE 49        .IsItI:                 cp      "I"
 742+ F8D7 20 07                                jr      nz,.ItIsR
 743+ F8D9 23           .ItIsAnI:               inc     hl
 744+ F8DA CD 15 F8                             call    ProcessISymbol
 745+ F8DD C3 A8 F8                             jp      .ExpRecursive
 746+ F8E0 CD 3A F8     .ItIsR:                 call    ProcessRSymbol
 747+ F8E3 23                                   inc     hl
 748+ F8E4 C3 A8 F8     .SystemNextIteration:   jp      .ExpRecursive
 749+ F8E7 FD 77 00     .RegularCharacter:      ld      (iy+0),a
 750+ F8EA FD 23                                inc     iy
 751+ F8EC 23                                   inc     hl
 752+ F8ED C3 A8 F8     .RegularNextIteration:  jp      .ExpRecursive
 753+ F8F0 AF           .ExpansionComplete:     xor     a
 754+ F8F1 FD 77 01                             ld      (iy+1),a    ; will thsi work as a bodge
 755+ F8F4 C9                                   ret
 756+ F8F5              ;----------------------------------------------------------------------------------------------------------------------------------
 757+ F8F5 3A 0C E9     galaxy_equip_market:    ld      a,(GalaxyDisplayTekLevel)
 758+ F8F8 3C                                   inc     a
 759+ F8F9 67                                   ld      h,a
 760+ F8FA 0E 00                                ld      c,0
 761+ F8FC 06 1A                                ld      b,ShipEquipTableSize            ;NO_OF_EQUIP_ITEMS
 762+ F8FE 11 10 00                             ld      de,ShipEquipTableRowLen         ; Bytes per row
 763+ F901 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 764+ F905 DD 7E 06     .ItemCheckLoop:         ld      a,(ix+6)                        ; is it type fuel
 765+ F908 FE 00                                cp      0
 766+ F90A                                      ; Check Cash TODO
 767+ F90A 28 00                                jr      z,.CheckTechLevel
 768+ F90C DD 7E 03     .CheckTechLevel:        ld      a,(ix+3)                        ; ItemTech Level
 769+ F90F BC                                   cp      h
 770+ F910                                      ;jr      nc,.DoNotShowItem
 771+ F910 DD 7E 02     .CheckShowItem:         ld      a,(ix+2)
 772+ F913 FE 00                                cp      0
 773+ F915                                    ;  jr      z,.DoNotShowItem
 774+ F915 79           .ShowItem:              ld      a,c
 775+ F916 DD 71 01                             ld      (ix+1),c                        ; Show Item Row Id
 776+ F919 DD 7E 06     .CheckFitted:           ld      a,(ix+6)
 777+ F91C FE 00                                cp      EQ_FUEL
 778+ F91E 28 18                                jr      z,.FuelLevel
 779+ F920 FE 01                                cp      EQ_MISSILE
 780+ F922 28 25                                jr      z,.CountMissiles
 781+ F924 21 45 9F     .IsFitted:              ld      hl,EquipmentFitted
 782+ F927 ED 31                                add     hl,a
 783+ F929 7E                                   ld      a,(hl)
 784+ F92A FE 00                                cp      0
 785+ F92C 28 05                                jr      z,.NotFittedItem
 786+ F92E 3E 2A        .FittedItem:            ld      a,"*"
 787+ F930 C3 5A F9                             jp      .MoreToDoCheck
 788+ F933 3E 2D        .NotFittedItem:         ld      a,"-"
 789+ F935 C3 5A F9                             jp      .MoreToDoCheck
 790+ F938 3A 2A 9F     .FuelLevel:             ld      a,(Fuel)
 791+ F93B FE 46                                cp      MaxFuelLevel
 792+ F93D 28 05                                jr      z,.FullFuel
 793+ F93F 3E 2D        .NotFullFuel:           ld      a,"-"
 794+ F941 C3 5A F9                             jp      .MoreToDoCheck
 795+ F944 3E 2A        .FullFuel               ld      a,"*"                           ; later on do 3 starts low, med,full
 796+ F946 C3 5A F9                             jp      .MoreToDoCheck
 797+ F949 3A BB 9A     .CountMissiles:         ld      a,(NbrMissiles)
 798+ F94C FE 00                                cp      0
 799+ F94E 28 05                                jr      z,.NoMissiles
 800+ F950 C6 30                                add     "0"
 801+ F952 C3 5A F9                             jp      .MoreToDoCheck
 802+ F955 3E 2D        .NoMissiles:            ld      a,"-"
 803+ F957 C3 5A F9                             jp      .MoreToDoCheck
 804+ F95A DD 77 07     .MoreToDoCheck:         ld      (ix+7),a                        ; update fitted status
 805+ F95D 0C                                   inc     c
 806+ F95E DD 19                                add     ix,de
 807+ F960 10 A3                                djnz    .ItemCheckLoop
 808+ F962 C9                                   ret
 809+ F963 3E FF        .DoNotShowItem          ld      a,$FF                           ; $FF = hide
 810+ F965 DD 77 01                             ld      (ix+1),a
 811+ F968 DD 19                                add     ix,de
 812+ F96A 10 99                                djnz    .ItemCheckLoop
 813+ F96C C9                                   ret
 814+ F96D              ;----------------------------------------------------------------------------------------------------------------------------------
 815+ F96D 3A FA E8     galaxy_planet_data:     ld      a,(GalaxyWorkingSeed+2)
 816+ F970 B7           .GenerateGovernment:    or      a
 817+ F971 CB 3F                                srl	    a                                               ; Government = seed2 / 8 & 7
 818+ F973 CB 3F                                srl	    a
 819+ F975 CB 3F                                srl	    a                                                   ;
 820+ F977 E6 07                                and     $07                                             ;
 821+ F979 32 0A E9                             ld      (GalaxyDisplayGovernment),a                     ;
 822+ F97C 3A F9 E8     .GenerateEconomy:       ld      a,(GalaxyWorkingSeed+1)
 823+ F97F E6 07                                and     $07
 824+ F981 47                                   ld      b,a
 825+ F982 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 826+ F985                                      JumpIfAGTENusng 1, .GreaterThan1
 826+ F985 FE 01       >                        cp     1
 826+ F987 D2 93 F9    >                        jp		nc,.GreaterThan1
 827+ F98A 78           .OneOrZero:             ld      a,b
 828+ F98B F6 02                                or      2
 829+ F98D 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 830+ F990 C3 97 F9                             jp      .GenerateTechLevel
 831+ F993 78           .GreaterThan1:          ld      a,b
 832+ F994 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 833+ F997 EE 07        .GenerateTechLevel:     xor     $07                                             ; tech = economy xor 7 + seed3 & 3 + government /2 + fovernemnt & 1
 834+ F999 47                                   ld      b,a
 835+ F99A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 836+ F99D E6 03                                and     $03
 837+ F99F 80                                   add     b
 838+ F9A0 47                                   ld      b,a
 839+ F9A1 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 840+ F9A4 4F                                   ld      c,a
 841+ F9A5 CB 2F                                sra     a
 842+ F9A7 80                                   add     b
 843+ F9A8 47                                   ld      b,a
 844+ F9A9 79                                   ld      a,c
 845+ F9AA E6 01                                and     $1
 846+ F9AC 80                                   add     b
 847+ F9AD 32 0C E9                             ld      (GalaxyDisplayTekLevel),a
 848+ F9B0 CB 27        .GeneratePopulation:    sla     a                                               ; population = tech level * 4 + government + economy + 1
 849+ F9B2 CB 27                                sla     a
 850+ F9B4 21 0A E9                             ld      hl,GalaxyDisplayGovernment
 851+ F9B7 86                                   add     a,(hl)
 852+ F9B8 47                                   ld      b,a
 853+ F9B9 3A 0B E9                             ld      a,(GalaxyDisplayEconomy)
 854+ F9BC 80                                   add     a,b
 855+ F9BD 3C                                   inc     a
 856+ F9BE 32 0D E9                             ld      (GalaxyDisplayPopulation),a
 857+ F9C1 3A 0B E9     .GenerateProductivity:  ld      a,(GalaxyDisplayEconomy)
 858+ F9C4 EE 07                                xor     7
 859+ F9C6 C6 03                                add     3
 860+ F9C8 57                                   ld      d,a
 861+ F9C9 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 862+ F9CC C6 04                                add     4
 863+ F9CE 5F                                   ld      e,a
 864+ F9CF ED 30                                mul                                                     ; the next mulitply will be a 16 bit value
 865+ F9D1 3A 0D E9                             ld      a,(GalaxyDisplayPopulation)
 866+ F9D4 26 00                                ld      h,0
 867+ F9D6 6F                                   ld      l,a
 868+ F9D7 CD A6 AA                             call    mulDEbyHL
 869+ F9DA EB                                   ex      de,hl
 870+ F9DB                                      ShiftDELeft1
 870+ F9DB CB 23       >			   sla e
 870+ F9DD CB 12       >			   rl  d
 871+ F9DF                                      ShiftDELeft1
 871+ F9DF CB 23       >			   sla e
 871+ F9E1 CB 12       >			   rl  d
 872+ F9E3                                      ShiftDELeft1
 872+ F9E3 CB 23       >			   sla e
 872+ F9E5 CB 12       >			   rl  d
 873+ F9E7 ED 53 0E E9                          ld      (GalaxyDisplayProductivity),de
 874+ F9EB 3A FD E8     .GenerateRadius:        ld		a,(GalaxyWorkingSeed+5)                         ;radius min = 256*11 = 2816 km
 875+ F9EE E6 0F                                and		$0F
 876+ F9F0 C6 0B                                add     11
 877+ F9F2 47                                   ld      b,a
 878+ F9F3 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 879+ F9F6 4F                                   ld      c,a
 880+ F9F7 ED 43 10 E9                          ld      (GalaxyDisplayRadius),bc
 881+ F9FB C9                                   ret
 882+ F9FC
 883+ F9FC              galaxy_master_seed_to_system:
 884+ F9FC 21 10 E0     		ld		hl,galaxy_master_seed
 885+ F9FF 11 3C 9A     		ld		de,SystemSeed
 886+ FA02              galaxy_copy_seed:
 887+ FA02 ED A0        		ldi
 888+ FA04 ED A0        		ldi
 889+ FA06 ED A0        		ldi
 890+ FA08 ED A0        		ldi
 891+ FA0A ED A0        		ldi
 892+ FA0C ED A0        		ldi
 893+ FA0E C9           		ret
 894+ FA0F
 895+ FA0F              galaxy_master_to_galaxy_working:
 896+ FA0F 21 10 E0     		ld		hl,galaxy_master_seed
 897+ FA12 11 F8 E8     		ld		de,GalaxyWorkingSeed
 898+ FA15 18 EB        		jr		galaxy_copy_seed
 899+ FA17
 900+ FA17              galaxy_master_to_galaxy_naming:
 901+ FA17 21 10 E0     		ld		hl,galaxy_master_seed
 902+ FA1A 11 FE E8     		ld		de,GalaxyNamingSeed
 903+ FA1D 18 E3        		jr		galaxy_copy_seed
 904+ FA1F
 905+ FA1F              working_seed_to_galaxy_working:
 906+ FA1F 21 46 9B             ld      hl,WorkingSeeds
 907+ FA22 11 F8 E8     		ld		de,GalaxyWorkingSeed
 908+ FA25 18 DB        		jr		galaxy_copy_seed
 909+ FA27
 910+ FA27              working_seed_to_galaxy_naming:
 911+ FA27 21 46 9B             ld      hl,WorkingSeeds
 912+ FA2A 11 FE E8     		ld		de,GalaxyNamingSeed
 913+ FA2D 18 D3        		jr		galaxy_copy_seed
 914+ FA2F
 915+ FA2F              galaxy_ix_seed_to_galaxy_naming:
 916+ FA2F DD E5                push    ix
 917+ FA31 E1                   pop     hl
 918+ FA32 11 FE E8     		ld		de,GalaxyNamingSeed
 919+ FA35 18 CB        		jr		galaxy_copy_seed
 920+ FA37
 921+ FA37
 922+ FA37              galaxy_working_seed_to_galaxy_naming:
 923+ FA37 21 F8 E8             ld      hl,GalaxyWorkingSeed
 924+ FA3A 11 FE E8     		ld		de,GalaxyNamingSeed
 925+ FA3D 18 C3        		jr		galaxy_copy_seed
 926+ FA3F
 927+ FA3F              galaxy_working_seed_to_system:
 928+ FA3F 21 F8 E8     		ld		hl,GalaxyWorkingSeed
 929+ FA42 11 3C 9A     		ld		de,SystemSeed
 930+ FA45 18 BB        		jr		galaxy_copy_seed
 931+ FA47
 932+ FA47              system_seed_to_galaxy_working:
 933+ FA47 21 3C 9A     		ld		hl,SystemSeed
 934+ FA4A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 935+ FA4D 18 B3        		jr		galaxy_copy_seed
 936+ FA4F
 937+ FA4F
 938+ FA4F              system_seed_to_galaxy_naming:
 939+ FA4F 21 3C 9A     		ld		hl,SystemSeed
 940+ FA52 11 FE E8     		ld		de,GalaxyNamingSeed
 941+ FA55 18 AB        		jr		galaxy_copy_seed
 942+ FA57
 943+ FA57              ix_seed_to_galaxy_working:
 944+ FA57 DD E5                push    ix
 945+ FA59 E1                   pop     hl
 946+ FA5A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 947+ FA5D 18 A3        		jr		galaxy_copy_seed
 948+ FA5F
 949+ FA5F              ; Here we twist just once rather than the usual4 for a system
 950+ FA5F 3A FE E8     NextGalaxyNamingSeed:   ld		a,(GalaxyNamingSeed)			; QQ15 ; x = a + c
 951+ FA62 B7                                   or		a							; clear carry flag
 952+ FA63 21 00 E9                             ld		hl,GalaxyNamingSeed+2			; hl -> qq+2 [c]
 953+ FA66 86                                   add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
 954+ FA67 47                                   ld		b,a							; partial sum lo [x]
 955+ FA68              ; y = b + d	+ carry
 956+ FA68 3A FF E8                             ld		a,(GalaxyNamingSeed+1)          ; [b]
 957+ FA6B 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
 958+ FA6E 8E                                   adc		a,(hl)						; note add with carry
 959+ FA6F 4F                                   ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
 960+ FA70 3A 00 E9                             ld		a,(GalaxyNamingSeed+2)
 961+ FA73 32 FE E8                             ld		(GalaxyNamingSeed+0),a			; copy qq152 to qq150 [a] = [c]
 962+ FA76 3A 01 E9                             ld		a,(GalaxyNamingSeed+3)
 963+ FA79 32 FF E8                             ld		(GalaxyNamingSeed+1),a			; copy qq153 to qq151 [b] = [d]
 964+ FA7C 3A 03 E9                             ld		a,(GalaxyNamingSeed+5)
 965+ FA7F 32 01 E9                             ld		(GalaxyNamingSeed+3),a			; copy qq155 to qq153 [d] = [f]
 966+ FA82 3A 02 E9                             ld		a,(GalaxyNamingSeed+4)
 967+ FA85 32 00 E9                             ld		(GalaxyNamingSeed+2),a			; copy qq154 to qq152 [c] = [e]
 968+ FA88 B7                                   or		a
 969+ FA89 78                                   ld		a,b
 970+ FA8A 21 00 E9                             ld		hl,GalaxyNamingSeed+2		    ; hl -> qq+2
 971+ FA8D 86                                   add	    a,(hl)
 972+ FA8E 32 02 E9                             ld		(GalaxyNamingSeed+4),a			; e = x + [c]
 973+ FA91 79                                   ld		a,c
 974+ FA92 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 )we don't inc as it affects carry)
 975+ FA95 8E                                   adc		a,(hl)
 976+ FA96 32 03 E9                             ld		(GalaxyNamingSeed+5),a			; f = y + [d] + carry
 977+ FA99 C9                                   ret
 978+ FA9A
 979+ FA9A
 980+ FA9A 3A 03 E9     GalaxyNamingLoop:       ld		a,(GalaxyNamingSeed+5)	        ; a = first byte of name seed
 981+ FA9D E6 1F                                and 	$1F					            ; Keep bottom 5 bits only
 982+ FA9F FE 00                                cp		0					            ; 0 = skip 2 chars
 983+ FAA1 28 12                                jr		z,.SkipPhrase
 984+ FAA3 C6 0C                                add		a,12
 985+ FAA5 CB 27                                sla		a					            ; phrase = (a+12)*2
 986+ FAA7 21 A0 E8                             ld		hl,GalaxyName_digrams
 987+ FAAA ED 31                                add		hl,a
 988+ FAAC ED A0                                ldi
 989+ FAAE 7E                                   ld		a,(hl)
 990+ FAAF FE 3F                                cp		'?'
 991+ FAB1 28 02                                jr		z,.SkipPhrase
 992+ FAB3 ED A0        .AddExtra:              ldi
 993+ FAB5 D5           .SkipPhrase:            push	de
 994+ FAB6 CD 5F FA                             call	NextGalaxyNamingSeed
 995+ FAB9 D1                                   pop		de
 996+ FABA C9                                   ret
 997+ FABB
 998+ FABB              ; takes location in BC, finds seed and expands the name
 999+ FABB ED 43 5B E8  galaxy_name_at_bc:      ld      (GalaxyTargetSystem),bc
1000+ FABF CD 65 FC     galaxy_digram_seed:     call    galaxy_system_under_cursor
1001+ FAC2 FE 00                                cp      0
1002+ FAC4 C8                                   ret     z
1003+ FAC5
1004+ FAC5 CD 27 FA     GalaxyDigramWorkings:   call    working_seed_to_galaxy_naming
1005+ FAC8 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1006+ FACB
1007+ FACB CD 17 FA     GalaxyDigramSeed:       call    galaxy_master_to_galaxy_naming
1008+ FACE C3 E0 FA                             jp      GalaxyDigramNamingSeed
1009+ FAD1
1010+ FAD1 CD 37 FA     GalaxyDigramWorkingSeed:call    galaxy_working_seed_to_galaxy_naming
1011+ FAD4 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1012+ FAD7
1013+ FAD7 CD 2F FA     GalaxyDigramWIXSeed:    call    galaxy_ix_seed_to_galaxy_naming
1014+ FADA C3 E0 FA                             jp      GalaxyDigramNamingSeed
1015+ FADD
1016+ FADD CD 4F FA     SystemGetDigramSeed:    call    system_seed_to_galaxy_naming
1017+ FAE0
1018+ FAE0 11 7F E8     GalaxyDigramNamingSeed: ld		de,GalaxyExpandedName
1019+ FAE3 06 03        GalaxyDigramToDE:       ld		b,3
1020+ FAE5 3A FE E8                             ld		a,(GalaxyNamingSeed)
1021+ FAE8 E6 40                                and		$40
1022+ FAEA 28 03                                jr		z,.SmallSizeName
1023+ FAEC CD 9A FA     .LargeSizeName:         call	GalaxyNamingLoop
1024+ FAEF CD 9A FA     .SmallSizeName:         call	GalaxyNamingLoop
1025+ FAF2 CD 9A FA                             call	GalaxyNamingLoop
1026+ FAF5 CD 9A FA                             call	GalaxyNamingLoop
1027+ FAF8 EB           .DoneName:              ex		de,hl
1028+ FAF9 36 00                                ld		(hl),0
1029+ FAFB EB                                   ex		de,hl
1030+ FAFC AF                                   xor     a
1031+ FAFD 3D                                   dec     a
1032+ FAFE C9                                   ret
1033+ FAFF              ;reorte X 13 Y 97
1034+ FAFF
1035+ FAFF              ;----------------------------------------------------------------------------------------------------------------------------------
1036+ FAFF 3A 5D E8     is_system_found:        ld      a,(GalaxySearchLength)
1037+ FB02                                      ;dec     a                       ; as we won't check the /0 just first match
1038+ FB02 4F                                   ld      c,a                     ; will always be max of 32 as that is what length routine does
1039+ FB03 06 00                                ld      b,0                     ; so we can use cpir
1040+ FB05 11 5E E8     .readyToSearch:         ld      de,GalaxySearchString   ; hl = string we are serching
1041+ FB08 21 7F E8                             ld      hl,GalaxyExpandedName   ; de = the expanded galaxy name
1042+ FB0B 7E           .searchLoop:            ld      a,(hl)                  ; if the string is too short then maybe there is a longer one to find
1043+ FB0C                                      JumpIfAIsZero   .noMatch        ; but
1043+ FB0C A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
1043+ FB0D CA 1B FB    >                        jp	z, .noMatch
1044+ FB10 1A                                   ld      a,(de)                  ; get the character to search for
1045+ FB11 ED A1                                cpi                             ; compare with value in A from HL
1046+ FB13 20 06                                jr      nz,.noMatch
1047+ FB15 13                                   inc     de                      ; move to next search character
1048+ FB16 E2 1E FB                             jp      po, .matched            ; if c = 0 then we have hit the bingpot
1049+ FB19 18 F0                                jr      .searchLoop             ; else keep looping
1050+ FB1B              .noMatch:               SetAFalse
1050+ FB1B 3E FF       >                        ld      a,$FF
1051+ FB1D C9                                   ret
1052+ FB1E              .matched:               SetATrue
1052+ FB1E AF          >                        xor     a
1053+ FB1F C9                                   ret
1054+ FB20
1055+ FB20 21 5E E8     set_galaxy_search_len:  ld      hl,GalaxySearchString
1056+ FB23 06 00                                ld      b,0
1057+ FB25 0E 20                                ld      c,32                    ; limiter for missing /0
1058+ FB27 7E           .SearchLoop:            ld      a,(hl)
1059+ FB28                                      JumpIfAIsZero .foundLength
1059+ FB28 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
1059+ FB29 CA 34 FB    >                        jp	z, .foundLength
1060+ FB2C 04                                   inc     b
1061+ FB2D 0D                                   dec     c
1062+ FB2E 28 04                                jr      z,.foundLength
1063+ FB30 23                                   inc     hl
1064+ FB31 C3 27 FB                             jp      .SearchLoop
1065+ FB34 78           .foundLength:           ld      a,b
1066+ FB35 32 5D E8                             ld      (GalaxySearchLength),a
1067+ FB38 C9                                   ret
1068+ FB39
1069+ FB39              ; find system by searching for GalaxySearchString
1070+ FB39 CD 20 FB     find_system_by_name:    call    set_galaxy_search_len
1071+ FB3C AF                                   xor     a
1072+ FB3D 32 55 9A                             ld      (XSAV),a
1073+ FB40 DD 21 16 E0                          ld      ix,galaxy_data
1074+ FB44 CD 57 FA     .nextSystem:            call    ix_seed_to_galaxy_working
1075+ FB47 CD D1 FA                             call    GalaxyDigramWorkingSeed
1076+ FB4A CD FF FA                             call    is_system_found
1077+ FB4D                                      JumpIfATrue .FoundAtIX
1077+ FB4D A7          >                        and     a
1077+ FB4E CA 6A FB    >                        jp      z, .FoundAtIX
1078+ FB51 3A 55 9A     .notFoundYet:           ld      a,(XSAV)
1079+ FB54 3D                                   dec     a
1080+ FB55 28 10                                jr      z,.NoMoreSystems
1081+ FB57 32 55 9A     .moreToSearch:          ld      (XSAV),a
1082+ FB5A DD E5                                push    ix
1083+ FB5C E1                                   pop     hl
1084+ FB5D ED 34 08 00                          add     hl,8
1085+ FB61 E5                                   push    hl
1086+ FB62 DD E1                                pop     ix
1087+ FB64 C3 44 FB                             jp      .nextSystem
1088+ FB67 3E FF        .NoMoreSystems:         ld      a,$FF
1089+ FB69 C9                                   ret
1090+ FB6A CD 57 FA     .FoundAtIX              call    ix_seed_to_galaxy_working
1091+ FB6D C9                                   ret
1092+ FB6E              ;----------------------------------------------------------------------------------------------------------------------------------
1093+ FB6E 00 00        nearestfound:           DW 0
1094+ FB70              ; In here de carries current nearest and loads into nearest found
1095+ FB70              ; does a basic distance check for x then y each under threshold, then does x+y under threshold  jsut in case we have an extreme like 0 x and high dist y
1096+ FB70 DD 21 16 E0  find_nearest_to_bc:     ld      ix,galaxy_data
1097+ FB74 FD 26 00                             ld      iyh,0
1098+ FB77 FD 2E 78                             ld      iyl,120
1099+ FB7A ED 43 6E FB                          ld      (nearestfound),bc
1100+ FB7E DD 7E 03     find_nearest_loop:      ld      a,(ix+3)                        ;
1101+ FB81 5F                                   ld      e,a                             ; e= current seed x
1102+ FB82                                      JumpIfALTNusng c, nearestXPosLT         ; not we need to know if its e - c or c - e we coudl do 2's compliement of course
1102+ FB82 B9          >                        cp      c
1102+ FB83 DA 94 FB    >                        jp		c, nearestXPosLT
1103+ FB86 D5           nearestXPosGTE:         push    de                              ;
1104+ FB87 26 00                                ld      h,0                             ;
1105+ FB89 6F                                   ld      l,a                             ; hl = seed x
1106+ FB8A 16 00                                ld      d,0                             ;
1107+ FB8C 59                                   ld      e,c                             ; de = nearest x
1108+ FB8D B7                                   or      a                               ;
1109+ FB8E ED 52                                sbc     hl,de                           ; hl = distance between the two
1110+ FB90 D1                                   pop     de
1111+ FB91 C3 9E FB                             jp      nearestDistXPos
1112+ FB94 D5           nearestXPosLT:          push    de                              ;
1113+ FB95 26 00                                ld      h,0                             ;
1114+ FB97 69                                   ld      l,c                             ; hl = nearest x
1115+ FB98 16 00                                ld      d,0                             ;
1116+ FB9A B7                                   or      a                               ; de = seed x
1117+ FB9B ED 52                                sbc     hl,de                           ;
1118+ FB9D D1                                   pop     de                              ; hl = distance between the two
1119+ FB9E 7D           nearestDistXPos:        ld      a,l                             ; so l = abs distance as does a
1120+ FB9F FD BD                                cp      iyl                             ; under initial threshold?
1121+ FBA1 30 3D                                jr      nc,find_nearest_miss            ; no so its a miss
1122+ FBA3               ;DEBUG                       ld      l,a                             ; l = distance (we can drop thsi as it was done above!)
1123+ FBA3 DD 7E 01                             ld      a,(ix+1)                        ;
1124+ FBA6 57                                   ld      d,a                             ; d = seed y
1125+ FBA7                                      JumpIfALTNusng b, nearestYPosLT         ; determine abs calc
1125+ FBA7 B8          >                        cp      b
1125+ FBA8 DA BC FB    >                        jp		c, nearestYPosLT
1126+ FBAB E5           nearestYPosGTE:         push    hl                              ; save current x distance
1127+ FBAC D5                                   push    de                              ;
1128+ FBAD 26 00                                ld      h,0                             ;
1129+ FBAF 6F                                   ld      l,a                             ; hl = seed y
1130+ FBB0 16 00                                ld      d,0                             ;
1131+ FBB2 58                                   ld      e,b                             ; de = nearest y
1132+ FBB3 B7                                   or      a                               ;
1133+ FBB4 ED 52                                sbc     hl,de                           ; hl = distance between the two
1134+ FBB6 7D                                   ld      a,l
1135+ FBB7 D1                                   pop     de
1136+ FBB8 E1                                   pop     hl
1137+ FBB9 C3 CA FB                             jp      nearestDistYPos
1138+ FBBC E5           nearestYPosLT:          push    hl                              ; save current x distance
1139+ FBBD D5                                   push    de                              ;
1140+ FBBE 26 00                                ld      h,0                             ;
1141+ FBC0 68                                   ld      l,b                             ; hl = nearest y
1142+ FBC1 5A                                   ld      e,d                             ;
1143+ FBC2 16 00                                ld      d,0                             ; de = seed y
1144+ FBC4 B7                                   or      a                               ;
1145+ FBC5 ED 52                                sbc     hl,de                           ; hl = distance between the two
1146+ FBC7 7D                                   ld      a,l
1147+ FBC8 D1                                   pop     de
1148+ FBC9 E1                                   pop     hl                              ; now we get distance in l back into hl, distance y is in a
1149+ FBCA FD BD        nearestDistYPos:        cp      iyl                             ; under initial threshold?
1150+ FBCC 30 12                                jr      nc, find_nearest_miss
1151+ FBCE 26 00                                ld      h,0                             ; hl = distance for x
1152+ FBD0 ED 31                                add     hl,a                            ; adding distance y
1153+ FBD2 7D                                   ld      a,l                             ; and copy it to l
1154+ FBD3 FD BD                                cp      iyl                             ; is the pair under distance
1155+ FBD5 30 09                                jr      nc, find_nearest_miss           ;
1156+ FBD7 FD 6F        nearest_found_a_hit:    ld      iyl,a                           ; so we have a hit
1157+ FBD9 ED 53 6E FB                          ld      (nearestfound),de               ;
1158+ FBDD                                      ReturnIfALTNusng 2                      ; exact match bail out, note 1 can be an exact match due to Y axis, as we are looking at seed pos then this is accurate enough and we won't hit dx 1 and dy 0 hopefully in any galaxy :)
1158+ FBDD FE 02       >                        cp    2
1158+ FBDF D8          >                        ret	 c
1159+ FBE0 DD E5        find_nearest_miss:      push     ix
1160+ FBE2 E1                                   pop      hl
1161+ FBE3 ED 34 08 00                          add      hl,8
1162+ FBE7 E5                                   push     hl
1163+ FBE8 DD E1                                pop      ix
1164+ FBEA FD 25                                dec     iyh
1165+ FBEC FD 7C                                ld      a,iyh
1166+ FBEE                                      JumpIfAIsNotZero find_nearest_loop
1166+ FBEE FE 00       >                        cp	0
1166+ FBF0 C2 7E FB    >                        jp	nz,find_nearest_loop
1167+ FBF3 ED 4B 6E FB                          ld      bc ,(nearestfound)              ; if we hit here then after searching we have found a nearest
1168+ FBF7 C9                                   ret
1169+ FBF8              ;----------------------------------------------------------------------------------------------------------------------------------
1170+ FBF8              ; Does a sqare root distance
1171+ FBF8 16 00        galaxy_find_distance:   ld      d,0
1172+ FBFA 26 00                                ld      h,0
1173+ FBFC 3A 57 E8                             ld      a,(GalaxyPresentSystem)
1174+ FBFF 47                                   ld      b,a
1175+ FC00 3A 59 E8                             ld      a,(GalaxyDestinationSystem)
1176+ FC03 B8                                   cp      b
1177+ FC04 20 0E                                jr      nz,.NotSame
1178+ FC06 C5           .XSame:                 push    bc
1179+ FC07 F5                                   push    af
1180+ FC08 3A 58 E8                             ld      a,(GalaxyPresentSystem+1)
1181+ FC0B 47                                   ld      b,a
1182+ FC0C 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1183+ FC0F B8                                   cp      b
1184+ FC10 C1                                   pop     bc
1185+ FC11 F1                                   pop     af
1186+ FC12 28 49                                jr      z,.ZeroDistance
1187+ FC14 30 08        .NotSame:               jr      nc,.DestinationGTEPresentX
1188+ FC16 68           .DestinationLTPresentX: ld      l,b
1189+ FC17 5F                                   ld      e,a
1190+ FC18 B7                                   or      a
1191+ FC19 ED 52                                sbc     hl,de
1192+ FC1B C3 23 FC                             jp      .SquareXDist
1193+ FC1E 6F           .DestinationGTEPresentX:ld      l,a
1194+ FC1F 58                                   ld      e,b
1195+ FC20 B7                                   or      a
1196+ FC21 ED 52                                sbc     hl,de
1197+ FC23 55           .SquareXDist:           ld      d,l
1198+ FC24 5D                                   ld      e,l
1199+ FC25 ED 30                                mul
1200+ FC27 3A 58 E8     .CalcYDistSq            ld      a,(GalaxyPresentSystem+1)
1201+ FC2A 47                                   ld      b,a
1202+ FC2B 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1203+ FC2E B8                                   cp      b
1204+ FC2F 30 0B                                jr      nc,.DestinationGTEPresentY
1205+ FC31 4F           .DestinationLTPresentY: ld      c,a
1206+ FC32 68                                   ld      l,b
1207+ FC33 06 00                                ld      b,0
1208+ FC35 26 00                                ld      h,0
1209+ FC37 ED 42                                sbc     hl,bc
1210+ FC39 C3 44 FC                             jp      .DestinationYDone
1211+ FC3C 48           .DestinationGTEPresentY:ld      c,b
1212+ FC3D 6F                                   ld      l,a
1213+ FC3E 06 00                                ld      b,0
1214+ FC40 26 00                                ld      h,0
1215+ FC42 ED 42                                sbc     hl,bc
1216+ FC44 CB 2D        .DestinationYDone:      sra     l                   ; divide L by 2 for galaxy size
1217+ FC46 7D                                   ld      a,l
1218+ FC47 EB                                   ex      de,hl
1219+ FC48 57                                   ld      d,a
1220+ FC49 5F                                   ld      e,a
1221+ FC4A ED 30        .SquareYDist:           mul
1222+ FC4C 19                                   add     hl,de
1223+ FC4D EB                                   ex      de,hl
1224+ FC4E CD 70 AB                             call    asm_sqrt            ; distance via pythagoras in hl
1225+ FC51                                      ShiftHLLeft1
1225+ FC51 CB 25       >			   sla l
1225+ FC53 CB 14       >			   rl  h
1226+ FC55                                      ShiftHLLeft1                ; Multiply by 4 to get distance
1226+ FC55 CB 25       >			   sla l
1226+ FC57 CB 14       >			   rl  h
1227+ FC59 22 E1 9A                             ld      (Distance),hl       ; Distance is now caulated distance
1228+ FC5C C9                                   ret
1229+ FC5D AF           .ZeroDistance:          xor     a
1230+ FC5E 32 E1 9A                             ld      (Distance),a
1231+ FC61 32 E2 9A                             ld      (Distance+1),a
1232+ FC64 C9                                   ret
1233+ FC65              ;----------------------------------------------------------------------------------------------------------------------------------
1234+ FC65              ; Find the systems pointed to by GalaxyTargetSystem and loads it into WorkingSeeds
1235+ FC65              ; this needs to chagne to galaxyresultseed or galayxworkingseed
1236+ FC65 AF           galaxy_system_under_cursor:xor     a
1237+ FC66 32 55 9A                             ld		(XSAV),a
1238+ FC69 DD 21 16 E0                          ld      ix,galaxy_data
1239+ FC6D 2A 5B E8     .GCCounterLoop:         ld      hl,(GalaxyTargetSystem)
1240+ FC70 DD E5                                push    ix
1241+ FC72 7D                                   ld      a,l
1242+ FC73 DD BE 03                             cp      (ix+3)                          ; seed x
1243+ FC76 20 14                                jr      nz,.ItsNotThisX
1244+ FC78 7C                                   ld      a,h
1245+ FC79 DD BE 01                             cp      (ix+1)                          ; seed x
1246+ FC7C 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
1247+ FC7E DD E5                                push    ix
1248+ FC80 E1                                   pop     hl
1249+ FC81 11 46 9B                             ld      de,WorkingSeeds                 ;' copy to wkring Seeds
1250+ FC84 CD 96 9F                             call    copy_seed
1251+ FC87 3E FF                                ld      a,$FF
1252+ FC89 DD E1                                pop     ix
1253+ FC8B C9                                   ret
1254+ FC8C E1           .ItsNotThisX:           pop     hl
1255+ FC8D ED 34 08 00                          add     hl,8
1256+ FC91 E5                                   push    hl
1257+ FC92 DD E1                                pop     ix
1258+ FC94 3A 55 9A                             ld		a,(XSAV)
1259+ FC97 3D                                   dec		a
1260+ FC98 32 55 9A                             ld      (XSAV),a
1261+ FC9B FE 00                                cp		0
1262+ FC9D C8                                   ret		z
1263+ FC9E 18 CD                                jr		.GCCounterLoop
1264+ FCA0              ;----------------------------------------------------------------------------------------------------------------------------------
1265+ FCA0 21 3C 9A     SeedGalaxy:             ld      hl,SystemSeed                   ; First copy system seed to galaxy master
1266+ FCA3 11 10 E0                             ld      de,galaxy_master_seed           ; .
1267+ FCA6 ED A0                                ldi                                     ; .
1268+ FCA8 ED A0                                ldi                                     ; .
1269+ FCAA ED A0                                ldi                                     ; .
1270+ FCAC ED A0                                ldi                                     ; .
1271+ FCAE ED A0                                ldi                                     ; .
1272+ FCB0 ED A0                                ldi                                     ; .
1273+ FCB2 DD 21 16 E0                          ld      ix,galaxy_data                  ; Generate system seed data for each planet
1274+ FCB6 AF                                   xor		a                               ; .
1275+ FCB7 32 55 9A                             ld		(XSAV),a                        ; .
1276+ FCBA DD E5        SeedGalaxyLoop:         push    ix                              ; .
1277+ FCBC D1                                   pop     de                              ; .
1278+ FCBD 21 3C 9A                             ld      hl,SystemSeed                   ; .
1279+ FCC0 CD 96 9F                             call    copy_seed                       ; .
1280+ FCC3 DD E5                                push    ix                              ; .
1281+ FCC5 E1                                   pop     hl                              ; .
1282+ FCC6 ED 34 08 00                          add     hl,8                            ; .
1283+ FCCA E5                                   push    hl                              ; .
1284+ FCCB DD E1                                pop     ix                              ; .
1285+ FCCD CD CB 9F                             call    next_system_seed                ; .
1286+ FCD0 3A 55 9A                             ld		a,(XSAV)                        ; .
1287+ FCD3 3D                                   dec		a                               ; .
1288+ FCD4 FE 00                                cp		0                               ; .
1289+ FCD6 C8                                   ret		z                               ; .
1290+ FCD7 32 55 9A                             ld		(XSAV),a                        ; .
1291+ FCDA 18 DE                                jr      SeedGalaxyLoop                  ; .
1292+ FCDC C9                                   ret
1293+ FCDD
1294+ FCDD              GalaxyBankSize   EQU $ - galaxy_page_marker
1295+ FCDD
# file closed: ./Universe/Galaxy/galaxy_data.asm
1493  FCDD
1494  FCDD                  DISPLAY "Galaxy Data - Bytes free ",/D, $2000 - ($- GalaxyDataAddr)
1495  FCDD
1496  FCDD              ; Bank 83  ------------------------------------------------------------------------------------------------------------------------
1497  FCDD                  SLOT    SunBankAddr
1498  FCDD                  PAGE    BankSunData
1499  FCDD              	ORG	    SunBankAddr,BankSunData
1500  C000                  INCLUDE "./Universe/Sun/sun_data.asm"
# file opened: ./Universe/Sun/sun_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; In  flight ship data tables
   4+ C000              ; There can be upto &12 objects in flight.
   5+ C000              ; To avoid hassle of memory heap managment, the free list
   6+ C000              ; will correspond to a memory bank offset so data will be held in
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   9+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  10+ C000              ; This means each gets its own line list, inwork etc
  11+ C000
  12+ C000              ; "Runtime Ship Data paged into in Bank 7"
  13+ C000 53 75 6E 20  StartOfSun:        DB "Sun and Planet X"
  13+ C004 61 6E 64 20
  13+ C008 50 6C 61 6E
  13+ C00C 65 74 20 58
  14+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  15+ C010              CheckRowHLOnScreen:     MACRO   failtarget
  16+ C010 ~                                    ld      a,h                             ; is h byte set, i.e > 256 or < 0
  17+ C010 ~                                    and     a                               ; .
  18+ C010 ~                                    jr      nz,failtarget                   ; h <> 0 so fails (covers <0 and > 255
  19+ C010 ~                                    ld      a,l                             ; l bit 7 0?
  20+ C010 ~                                    and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
  21+ C010 ~                                    jr      nz,failtarget                   ;
  22+ C010                                      ENDM
  23+ C010
  24+ C010              ; IY = SBnKLineArray + rowValue*2
  25+ C010              IYEquRowN:              MACRO   rowValue                        ; set up iy as target address
  26+ C010 ~                                    ld      a,rowValue
  27+ C010 ~                                    ld      hl,SBnKLineArray
  28+ C010 ~                                    add     hl,a
  29+ C010 ~                                    add     hl,a
  30+ C010 ~                                    push    hl
  31+ C010 ~                                    pop     iy
  32+ C010                                      ENDM
  33+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  34+ C010              ; Universe map substibute for INWK
  35+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  36+ C010              SBnKDataBlock:
  37+ C010                                      INCLUDE "./Universe/Sun/SunPosVars.asm"
# file opened: ././Universe/Sun/SunPosVars.asm
   1++C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C010 00           SBnKxlo                     DB  0                       ; INWK+0
   3++C011 00           SBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C012 00           SBnKxsgn                    DB  0                       ; INWK+2
   5++C013 00           SBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C014 00           SBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C015 00           SBnKysgn                    DB  0                       ; INWK +5
   8++C016 00           SBnKzlo                     DB  0                       ; INWK +6
   9++C017 00           SBnKzhi                     DB  0                       ; INWK +7
  10++C018 00           SBnKzsgn                    DB  0                       ; INWK +8
  11++C019
# file closed: ././Universe/Sun/SunPosVars.asm
  38+ C019                                      INCLUDE "./Universe/Sun/SunRotationMatrixVars.asm"
# file opened: ././Universe/Sun/SunRotationMatrixVars.asm
   1++C019              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C019              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C019 00 00        SBnKrotmatSidevX            DW  0                       ; INWK +21
   4++C01B              SBnKrotmatSidev             equ SBnKrotmatSidevX
   5++C01B 00 00        SBnKrotmatSidevY            DW  0                       ; INWK +23
   6++C01D 00 00        SBnKrotmatSidevZ            DW  0                       ; INWK +25
   7++C01F 00 00        SBnKrotmatRoofvX            DW  0                       ; INWK +15
   8++C021              SBnKrotmatRoofv             equ SBnKrotmatRoofvX
   9++C021 00 00        SBnKrotmatRoofvY            DW  0                       ; INWK +17
  10++C023 00 00        SBnKrotmatRoofvZ            DW  0                       ; INWK +19
  11++C025 00 00        SBnKrotmatNosevX            DW  0                       ; INWK +9
  12++C027              SBnKrotmatNosev             EQU SBnKrotmatNosevX
  13++C027 00 00        SBnKrotmatNosevY            DW  0                       ; INWK +11
  14++C029 00 00        SBnKrotmatNosevZ            DW  0                       ; INWK +13
  15++C02B
# file closed: ././Universe/Sun/SunRotationMatrixVars.asm
  39+ C02B                                      INCLUDE "./Universe/Sun/SunAIRuntimeData.asm"
# file opened: ././Universe/Sun/SunAIRuntimeData.asm
   1++C02B              ; -- Ship AI data
   2++C02B 00           SBnKRotXCounter             DB  0                       ; INWK +29
   3++C02C 00           SBnKRotZCounter             DB  0                       ; INWK +30
   4++C02D 00           SBnkCam0yLo                 DB  0                       ; INWK +33 ????
   5++C02E 00           SBnkCam0yHi                 DB  0                       ; INWK +34?????
   6++C02F
# file closed: ././Universe/Sun/SunAIRuntimeData.asm
  40+ C02F
  41+ C02F
  42+ C02F                                      INCLUDE "./Universe/Sun/SunXX16Vars.asm"
# file opened: ././Universe/Sun/SunXX16Vars.asm
   1++C02F              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C02F 00 00        SBnkTransmatSidevX          DW  0               ; XX16+0
   3++C031              SBnkTransmatSidev           EQU SBnkTransmatSidevX
   4++C031 00 00        SBnkTransmatSidevY          DW 0                ; XX16+2
   5++C033 00 00        SBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C035 00 00        SBnkTransmatRoofvX          DW 0
   7++C037              SBnkTransmatRoofv           EQU SBnkTransmatRoofvX
   8++C037 00 00        SBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C039 00 00        SBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C03B 00 00        SBnkTransmatNosevX          DW 0
  11++C03D              SBnkTransmatNosev           EQU SBnkTransmatNosevX
  12++C03D 00 00        SBnkTransmatNosevY          DW 0                ; XX16+2
  13++C03F 00 00        SBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C041 00 00        SBnkTransmatTransX          DW 0
  15++C043 00 00        SBnkTransmatTransY          DW 0
  16++C045 00 00        SBnkTransmatTransZ          DW 0
  17++C047              SunXX16                      equ SBnkTransmatSidev
  18++C047              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C047 00 00        SBnkTransInvRow0x0          DW 0
  20++C049 00 00        SBnkTransInvRow0x1          DW 0
  21++C04B 00 00        SBnkTransInvRow0x2          DW 0
  22++C04D 00 00        SBnkTransInvRow0x3          DW 0
  23++C04F 00 00        SBnkTransInvRow1y0          DW 0
  24++C051 00 00        SBnkTransInvRow1y1          DW 0
  25++C053 00 00        SBnkTransInvRow1y2          DW 0
  26++C055 00 00        SBnkTransInvRow1y3          DW 0
  27++C057 00 00        SBnkTransInvRow2z0          DW 0
  28++C059 00 00        SBnkTransInvRow2z1          DW 0
  29++C05B 00 00        SBnkTransInvRow2z2          DW 0
  30++C05D 00 00        SBnkTransInvRow2z3          DW 0
  31++C05F
  32++C05F              SunXX16Inv             equ SBnkTransInvRow0x0
  33++C05F
# file closed: ././Universe/Sun/SunXX16Vars.asm
  43+ C05F                                      INCLUDE "./Universe/Sun/SunXX25Vars.asm"
# file opened: ././Universe/Sun/SunXX25Vars.asm
   1++C05F              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C05F 00           SBnKProjxLo                 DB  0
   3++C060 00           SBnKProjxHi                 DB  0
   4++C061 00           SBnKProjxSgn                DB  0
   5++C062              SBnKProjx                   EQU SBnKProjxLo
   6++C062 00           SBnKProjyLo                 DB  0
   7++C063 00           SBnKProjyHi                 DB  0
   8++C064 00           SBnKProjySgn                DB  0
   9++C065              SBnKProjy                   EQU SBnKProjyLo
  10++C065 00           SBnKProjzLo                 DB  0
  11++C066 00           SBnKProjzHi                 DB  0
  12++C067 00           SBnKProjzSgn                DB  0
  13++C068              SBnKProjz                   EQU SBnKProjzLo
  14++C068              SXX25                       EQU SBnKProjxLo
  15++C068
# file closed: ././Universe/Sun/SunXX25Vars.asm
  44+ C068                                      INCLUDE "./Universe/Sun/SunXX18Vars.asm"
# file opened: ././Universe/Sun/SunXX18Vars.asm
   1++C068              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C068 00           SBnKDrawCam0xLo             DB  0               ; XX18+0
   3++C069 00           SBnKDrawCam0xHi             DB  0               ; XX18+1
   4++C06A 00           SBnKDrawCam0xSgn            DB  0               ; XX18+2
   5++C06B              SBnKDrawCam0x               equ SBnKDrawCam0xLo
   6++C06B 00           SBnKDrawCam0yLo             DB  0               ; XX18+3
   7++C06C 00           SBnKDrawCam0yHi             DB  0               ; XX18+4
   8++C06D 00           SBnKDrawCam0ySgn            DB  0               ; XX18+5
   9++C06E              SBnKDrawCam0y               equ SBnKDrawCam0yLo
  10++C06E 00           SBnKDrawCam0zLo             DB  0               ; XX18+6
  11++C06F 00           SBnKDrawCam0zHi             DB  0               ; XX18+7
  12++C070 00           SBnKDrawCam0zSgn            DB  0               ; XX18+8
  13++C071              SBnKDrawCam0z               equ SBnKDrawCam0zLo
  14++C071              SXX18                       equ SBnKDrawCam0xLo
  15++C071
# file closed: ././Universe/Sun/SunXX18Vars.asm
  45+ C071
  46+ C071              ; Used to make 16 bit reads a little cleaner in source code
  47+ C071 00 00 00     SBnKzPoint                  DS  3
  48+ C074              SBnKzPointLo                equ SBnKzPoint
  49+ C074              SBnKzPointHi                equ SBnKzPoint+1
  50+ C074              SBnKzPointSign              equ SBnKzPoint+2
  51+ C074                                      INCLUDE "./Universe/Sun/SunXX15Vars.asm"
# file opened: ././Universe/Sun/SunXX15Vars.asm
   1++C074              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C074 00           SBnKXScaled                 DB  0               ; XX15+0Xscaled
   3++C075 00           SBnKXScaledSign             DB  0               ; XX15+1xsign
   4++C076 00           SBnKYScaled                 DB  0               ; XX15+2yscaled
   5++C077 00           SBnKYScaledSign             DB  0               ; XX15+3ysign
   6++C078 00           SBnKZScaled                 DB  0               ; XX15+4zscaled
   7++C079 00           SBnKZScaledSign             DB  0               ; XX15+5zsign
   8++C07A
   9++C07A              SXX15                       equ SBnKXScaled
  10++C07A              SXX15VecX                   equ SXX15
  11++C07A              SXX15VecY                   equ SXX15+1
  12++C07A              SXX15VecZ                   equ SXX15+2
  13++C07A              SBnKXPoint                  equ SXX15
  14++C07A              SBnKXPointLo                equ SXX15+0
  15++C07A              SBnKXPointHi                equ SXX15+1
  16++C07A              SBnKXPointSign              equ SXX15+2
  17++C07A              SBnKYPoint                  equ SXX15+3
  18++C07A              SBnKYPointLo                equ SXX15+3
  19++C07A              SBnKYPointHi                equ SXX15+4
  20++C07A              SBnKYPointSign              equ SXX15+5
  21++C07A
# file closed: ././Universe/Sun/SunXX15Vars.asm
  52+ C07A                                      INCLUDE "./Universe/Sun/SunXX12Vars.asm"
# file opened: ././Universe/Sun/SunXX12Vars.asm
   1++C07A              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07A              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07A 00           SBnKXX12xLo                 DB  0               ; XX12+0
   4++C07B 00           SBnKXX12xSign               DB  0               ; XX12+1
   5++C07C 00           SBnKXX12yLo                 DB  0               ; XX12+2
   6++C07D 00           SBnKXX12ySign               DB  0               ; XX12+3
   7++C07E 00           SBnKXX12zLo                 DB  0               ; XX12+4
   8++C07F 00           SBnKXX12zSign               DB  0               ; XX12+5
   9++C080 00 00 00...  SXX12Save                   DS  6
  10++C086 00 00 00...  SXX12Save2                  DS  6
  11++C08C              SXX12                       equ SBnKXX12xLo
  12++C08C              varSXX12                    equ SBnKXX12xLo
  13++C08C              ; Repurposed XX12 when plotting lines
  14++C08C              SBnkY2                      equ SXX12+0
  15++C08C              SbnKy2Lo                    equ SXX12+0
  16++C08C              SBnkY2Hi                    equ SXX12+1
  17++C08C              SBnkDeltaXLo                equ SXX12+2
  18++C08C              SBnkDeltaXHi                equ SXX12+3
  19++C08C              SBnkDeltaYLo                equ SXX12+4
  20++C08C              SBnkDeltaYHi                equ SXX12+5
  21++C08C              SbnkGradient                equ SXX12+2
  22++C08C              SBnkTemp1                   equ SXX12+2
  23++C08C              SBnkTemp1Lo                 equ SXX12+2
  24++C08C              SBnkTemp1Hi                 equ SXX12+3
  25++C08C              SBnkTemp2                   equ SXX12+3
  26++C08C              SBnkTemp2Lo                 equ SXX12+3
  27++C08C              SBnkTemp2Hi                 equ SXX12+4
  28++C08C
# file closed: ././Universe/Sun/SunXX12Vars.asm
  53+ C08C
  54+ C08C
  55+ C08C              ; Post clipping the results are now 8 bit
  56+ C08C 00           SBnKVisibility              DB  0               ; replaces general purpose xx4 in rendering
  57+ C08D 00           SBnKProjectedY              DB  0
  58+ C08E 00           SBnKProjectedX              DB  0
  59+ C08F              SBnKProjected               equ SBnKProjectedY  ; resultant projected position
  60+ C08F 00 00 00...  SunXX15Save                 DS  8
  61+ C097 00 00 00...  SunXX15Save2                DS  8
  62+ C09F              ; Heap (or array) information for lines and normals
  63+ C09F              ; Coords are stored XY,XY,XY,XY
  64+ C09F              ; Normals
  65+ C09F              ; This needs re-oprganising now.
  66+ C09F              ; Runtime Calculation Store
  67+ C09F
  68+ C09F              SunLineArraySize            equ 128 * 2
  69+ C09F              ; Storage arrays for data
  70+ C09F
  71+ C09F 00 00 00...  SBnKLineArray               DS SunLineArraySize ; XX19 Holds the clipped line details
  72+ C19F              SBnKLinesHeapMax            EQU $ - SBnKLineArray
  73+ C19F
  74+ C19F 00 00        LineArrayPtr                DW  0
  75+ C1A1
  76+ C1A1              SBnK_Data_len               EQU $ - SBnKDataBlock
  77+ C1A1
  78+ C1A1              ; --------------------------------------------------------------
  79+ C1A1 21 10 C0     ResetSBnKData:          ld      hl,SBnKDataBlock
  80+ C1A4 11 91 01                             ld      de,SBnK_Data_len
  81+ C1A7 AF                                   xor     a
  82+ C1A8 CD 40 96                             call    memfill_dma
  83+ C1AB C9                                   ret
  84+ C1AC              ; --------------------------------------------------------------
  85+ C1AC 21 10 C0     ResetSBnKPosition:      ld      hl,SBnKxlo
  86+ C1AF 06 09                                ld      b, 3*3
  87+ C1B1 AF                                   xor     a
  88+ C1B2 77           .zeroLoop:              ld      (hl),a
  89+ C1B3 23                                   inc     hl
  90+ C1B4 10 FC                                djnz    .zeroLoop
  91+ C1B6 C9                                   ret
  92+ C1B7              ; This uses UBNKNodeArray as the list
  93+ C1B7              ; the array is 256 * 2 bytes
  94+ C1B7              ; counter is current row y pos
  95+ C1B7              ; byte 1 is start x pos
  96+ C1B7              ; byte 2 is end x pos
  97+ C1B7              ; if they are both 0 then skip
  98+ C1B7              ; its always horizontal, yellow
  99+ C1B7
 100+ C1B7              ; PLANET
 101+ C1B7
 102+ C1B7
 103+ C1B7              .SunNoDraw:             SetCarryFlag                    ; ship is behind so do not draw, so we don't care abour draw as dot
 103+ C1B7 37          >                        scf
 104+ C1B8 C9                                   ret
 105+ C1B9
 106+ C1B9
 107+ C1B9
 108+ C1B9              SunBankDraw:            MACRO
 109+ C1B9 ~            .drawLoop               ld      a,(hl)
 110+ C1B9 ~                                    ld      c,a                     ; c = left column
 111+ C1B9 ~                                    inc     hl
 112+ C1B9 ~                                    ld      d,(hl)                  ; d = right col
 113+ C1B9 ~                                    inc     hl                      ; now ready for next linel
 114+ C1B9 ~                                    push    hl,,bc
 115+ C1B9 ~                                    cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 116+ C1B9 ~                                    IfResultZeroGoto .NoLineDraw
 117+ C1B9 ~                                    ld      a,d                     ; get right col back
 118+ C1B9 ~                                    sub     c                       ; subtract left so a = length
 119+ C1B9 ~                                    inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 120+ C1B9 ~                                    call    z, .FixWidth
 121+ C1B9 ~                                    ld      d,a                     ; de = length (e - d)
 122+ C1B9 ~                                    ld      e,216                   ; yellow
 123+ C1B9 ~                                    call    l2_draw_horz_dma        ; draw without bank switch
 124+ C1B9 ~            .NoLineDraw:            pop     hl,,bc
 125+ C1B9 ~                                    inc     b
 126+ C1B9 ~                                    dec     iyh
 127+ C1B9 ~                                    IfResultNotZeroGoto  .drawLoop
 128+ C1B9                                      ENDM
 129+ C1B9
 130+ C1B9
 131+ C1B9
 132+ C1B9              SunDraw:                MMUSelectLayer2
 132+ C1B9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 133+ C1BD 3A 56 C5     .OptimiseStartPos:      ld      a,(MinYOffset)
 134+ C1C0                                      JumpIfAIsZero .OffsetIsZero     ; if offset is 0 then just initate as normal
 134+ C1C0 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 134+ C1C1 CA D1 C1    >                        jp	z, .OffsetIsZero
 135+ C1C4                                      JumpIfALTNusng 64, .OffsetLT64  ; if offset >=64 then we adjust and mve to bank 0
 135+ C1C4 FE 40       >                        cp      64
 135+ C1C6 DA DE C1    >                        jp		c, .OffsetLT64
 136+ C1C9 D6 40        .OffsetGTE64:           sub     64
 137+ C1CB 32 56 C5                             ld      (MinYOffset),a          ; adjust offset for bank 2
 138+ C1CE C3 16 C2                             jp      .StartBank2
 139+ C1D1 06 00        .OffsetIsZero:          ld      b,0                     ; row
 140+ C1D3 FD 26 40                             ld      iyh,64                  ; counter
 141+ C1D6 21 9F C0                             ld      hl,SBnKLineArray        ; set hl to start of array
 142+ C1D9 C3 F0 C1                             jp      .StartBank1
 143+ C1DC              ;-- Snuck routine in here so that the macro will be happier
 144+ C1DC 3D           .FixWidth:              dec     a                       ; if carry resulted in a value of zero then correct
 145+ C1DD C9                                   ret
 146+ C1DE 21 9F C0     .OffsetLT64:            ld      hl,SBnKLineArray        ; adjust hl for line array offset
 147+ C1E1 ED 31                                add     hl,a                    ; .
 148+ C1E3 ED 31                                add     hl,a                    ; .
 149+ C1E5 47                                   ld      b,a                     ; set b row to the actual offset
 150+ C1E6 4F                                   ld      c,a                     ; iyh = 64 - Y offset
 151+ C1E7 3E 40                                ld      a,64                    ; .
 152+ C1E9 91                                   sub     c                       ; .
 153+ C1EA FD 67                                ld      iyh,a
 154+ C1EC AF                                   xor     a                       ; Ready bank 2 with no offset
 155+ C1ED 32 56 C5                             ld      (MinYOffset),a          ; .
 156+ C1F0 D9           .StartBank1:            exx
 157+ C1F1 3E 00                                ld      a,LAYER2_SHIFTED_SCREEN_TOP
 158+ C1F3 CD 37 E0                             call    asm_l2_bank_select      ; get in the first bank, we will only then bank select when needed
 159+ C1F6 D9                                   exx
 160+ C1F7                                      SunBankDraw
 160+ C1F7 7E          >.drawLoop               ld      a,(hl)
 160+ C1F8 4F          >                        ld      c,a                     ; c = left column
 160+ C1F9 23          >                        inc     hl
 160+ C1FA 56          >                        ld      d,(hl)                  ; d = right col
 160+ C1FB 23          >                        inc     hl                      ; now ready for next linel
 160+ C1FC E5 C5       >                        push    hl,,bc
 160+ C1FE BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 160+ C1FF             >                        IfResultZeroGoto .NoLineDraw
 160+ C1FF CA 0E C2    >                        jp	z,.NoLineDraw
 160+ C202 7A          >                        ld      a,d                     ; get right col back
 160+ C203 91          >                        sub     c                       ; subtract left so a = length
 160+ C204 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 160+ C205 CC DC C1    >                        call    z, .FixWidth
 160+ C208 57          >                        ld      d,a                     ; de = length (e - d)
 160+ C209 1E D8       >                        ld      e,216                   ; yellow
 160+ C20B CD 64 E2    >                        call    l2_draw_horz_dma        ; draw without bank switch
 160+ C20E C1 E1       >.NoLineDraw:            pop     hl,,bc
 160+ C210 04          >                        inc     b
 160+ C211 FD 25       >                        dec     iyh
 160+ C213             >                        IfResultNotZeroGoto  .drawLoop
 160+ C213 C2 F7 C1    >                        jp	nz,.drawLoop
 161+ C216 3A 56 C5     .StartBank2:            ld      a,(MinYOffset)
 162+ C219                                      JumpIfAIsZero .OffsetBank2IsZero; if offset is 0 then we just continue, offset can never be >127 else there would be no draw
 162+ C219 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 162+ C21A CA 2E C2    >                        jp	z, .OffsetBank2IsZero
 163+ C21D 21 1F C1     .NotZeroOffset:         ld      hl,SBnKLineArray + (64 * 2); adjust to correct offset
 164+ C220 ED 31                                add     hl,a
 165+ C222 ED 31                                add     hl,a
 166+ C224 4F                                   ld      c,a                     ; iyh = 64 - offset
 167+ C225 3E 40                                ld      a,64                    ; .
 168+ C227 91                                   sub     c                       ; .
 169+ C228 FD 67                                ld      iyh,a                   ; .
 170+ C22A 41                                   ld      b,c                     ; b = offset row
 171+ C22B C3 36 C2                             jp      .drawLineBank2
 172+ C22E 21 1F C1     .OffsetBank2IsZero:     ld      hl,SBnKLineArray + (64 * 2); start with offset adjusted
 173+ C231 06 00                                ld      b,0
 174+ C233 FD 26 40                             ld      iyh,64
 175+ C236 D9           .drawLineBank2:         exx
 176+ C237 3E 40                                ld      a,LAYER2_SHIFTED_SCREEN_MIDDLE
 177+ C239 CD 37 E0                             call    asm_l2_bank_select      ; now do the lower bank
 178+ C23C D9                                   exx
 179+ C23D              ; Could make this a sub routine but unwrapping saves a call
 180+ C23D                                      SunBankDraw
 180+ C23D 7E          >.drawLoop               ld      a,(hl)
 180+ C23E 4F          >                        ld      c,a                     ; c = left column
 180+ C23F 23          >                        inc     hl
 180+ C240 56          >                        ld      d,(hl)                  ; d = right col
 180+ C241 23          >                        inc     hl                      ; now ready for next linel
 180+ C242 E5 C5       >                        push    hl,,bc
 180+ C244 BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 180+ C245             >                        IfResultZeroGoto .NoLineDraw
 180+ C245 CA 54 C2    >                        jp	z,.NoLineDraw
 180+ C248 7A          >                        ld      a,d                     ; get right col back
 180+ C249 91          >                        sub     c                       ; subtract left so a = length
 180+ C24A 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 180+ C24B CC DC C1    >                        call    z, .FixWidth
 180+ C24E 57          >                        ld      d,a                     ; de = length (e - d)
 180+ C24F 1E D8       >                        ld      e,216                   ; yellow
 180+ C251 CD 64 E2    >                        call    l2_draw_horz_dma        ; draw without bank switch
 180+ C254 C1 E1       >.NoLineDraw:            pop     hl,,bc
 180+ C256 04          >                        inc     b
 180+ C257 FD 25       >                        dec     iyh
 180+ C259             >                        IfResultNotZeroGoto  .drawLoop
 180+ C259 C2 3D C2    >                        jp	nz,.drawLoop
 181+ C25C C9                                   ret
 182+ C25D
 183+ C25D              ; --------------------------------------------------------------
 184+ C25D              ; This sets current universe object to a star / sun, they use sign + 23 bit positions
 185+ C25D CD A1 C1     CreateSun:              call    ResetSBnKData
 186+ C260 3A 49 9B                             ld      a,(WorkingSeeds+3)
 187+ C263 E6 07                                and     %00000111
 188+ C265 F6 81                                or      %10000001
 189+ C267 32 18 C0                             ld      (SBnKzsgn),a
 190+ C26A 3A 4B 9B                             ld      a,(WorkingSeeds+5)
 191+ C26D E6 03                                and     %00000011
 192+ C26F 32 12 C0                             ld      (SBnKxsgn),a
 193+ C272 32 15 C0                             ld      (SBnKysgn),a
 194+ C275                                   ; DEBUG   ld      hl, $0000
 195+ C275                                   ; DEBUG   ld      (SBnKzhi),hl
 196+ C275                                   ; DEBUG   ld      a, $E3
 197+ C275                                   ; DEBUG   ld      (SBnKzlo),a
 198+ C275 C9                                   ret
 199+ C276              ; --------------------------------------------------------------
 200+ C276              ; This sets current universe object to a planet,they use sign + 23 bit positions
 201+ C276              ;;TODOCreatePlanet:           call    ResetSBnKData
 202+ C276              ;;TODO                        ld      a,(DisplayTekLevel)
 203+ C276              ;;TODO                        and     $00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
 204+ C276              ;;TODO                        or      $10000000
 205+ C276              ;;TODO                        ld      (SBnKShipType),a
 206+ C276              ;;TODO                        xor     a
 207+ C276              ;;TODO                        ld      (SBnKaiatkecm),a
 208+ C276              ;;TODO                        MaxUnivPitchAndRoll
 209+ C276              ;;TODO                        ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
 210+ C276              ;;TODO                        and     %00000011               ; .
 211+ C276              ;;TODO                        adc     3                       ; .
 212+ C276              ;;TODO                        ld      (SBnKzsgn),a            ; set z sign to 3 + C + 0..3 bits
 213+ C276              ;;TODO                        rr      a
 214+ C276              ;;TODO                        ld      (PlanetXsgn),a
 215+ C276              ;;TODO                        ld      (PlanetYsgn),a
 216+ C276              ;;TODO                        ret
 217+ C276
 218+ C276
 219+ C276                                 ;     include "./Maths/ADDHLDESignBC.asm"
 220+ C276
 221+ C276 7C           SunADDHLDESignedv3:     ld      a,h
 222+ C277 E6 80                                and     SignOnly8Bit
 223+ C279 47                                   ld      b,a                         ;save sign bit in b
 224+ C27A AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 225+ C27B                                      JumpIfNegative .SunADDHLDEOppSGN    ;Signs are opposite there fore we can subtract to get difference
 225+ C27B FA 96 C2    >                        jp		m, .SunADDHLDEOppSGN
 226+ C27E 78           .SunADDHLDESameSigns:   ld      a,b
 227+ C27F B2                                   or      d
 228+ C280                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 228+ C280 FA 88 C2    >                        jp		m, .SunADDHLDESameNeg
 229+ C283                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 229+ C283 FA 88 C2    >                        jp		m, .SunADDHLDESameNeg
 230+ C286 19                                   add     hl,de
 231+ C287 C9                                   ret
 232+ C288 7C           .SunADDHLDESameNeg:     ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 233+ C289 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 234+ C28B 67                                   ld      h,a
 235+ C28C 7A                                   ld      a,d
 236+ C28D E6 7F                                and     SignMask8Bit
 237+ C28F 57                                   ld      d,a
 238+ C290 19                                   add     hl,de
 239+ C291 3E 80                                ld      a,SignOnly8Bit
 240+ C293 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 241+ C294 67                                   ld      h,a
 242+ C295 C9                                   ret
 243+ C296 7C           .SunADDHLDEOppSGN:      ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 244+ C297 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 245+ C299 67                                   ld      h,a
 246+ C29A 7A                                   ld      a,d
 247+ C29B E6 7F                                and     SignMask8Bit
 248+ C29D 57                                   ld      d,a
 249+ C29E B7                                   or      a
 250+ C29F ED 52                                sbc     hl,de
 251+ C2A1 38 04                                jr      c,.SunADDHLDEOppInvert
 252+ C2A3 78           .SunADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 253+ C2A4 B4                                   or      h
 254+ C2A5 67                                   ld      h,a                         ; set the previou sign value
 255+ C2A6 C9                                   ret
 256+ C2A7              .SunADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 256+ C2A7 AF          >                    xor a
 256+ C2A8 95          >                    sub l
 256+ C2A9 6F          >                    ld l,a
 256+ C2AA 9F          >                    sbc a,a
 256+ C2AB 94          >                    sub h
 256+ C2AC 67          >                    ld h,a
 257+ C2AD 78                                   ld      a,b
 258+ C2AE EE 80                                xor     SignOnly8Bit                ; flip sign bit
 259+ C2B0 B4                                   or      h
 260+ C2B1 67                                   ld      h,a                         ; recover sign
 261+ C2B2 C9                                   ret
 262+ C2B3
 263+ C2B3              ; we could cheat, flip the sign of DE and just add but its not very optimised
 264+ C2B3 7C           .SunSUBHLDESignedv3:        ld      a,h
 265+ C2B4 E6 80                                and     SignOnly8Bit
 266+ C2B6 47                                   ld      b,a                         ;save sign bit in b
 267+ C2B7 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 268+ C2B8                                      JumpIfNegative .SunSUBHLDEOppSGN        ;Signs are opposite therefore we can add
 268+ C2B8 FA E6 C2    >                        jp		m, .SunSUBHLDEOppSGN
 269+ C2BB 78           .SunSUBHLDESameSigns:       ld      a,b
 270+ C2BC B2                                   or      d
 271+ C2BD                                      JumpIfNegative .SunSUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 271+ C2BD FA C7 C2    >                        jp		m, .SunSUBHLDESameNeg
 272+ C2C0 B7                                   or      a
 273+ C2C1 ED 52                                sbc     hl,de
 274+ C2C3                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 274+ C2C3 FA DA C2    >                        jp		m, .SunSUBHLDESameOvrFlw
 275+ C2C6 C9                                   ret
 276+ C2C7 7C           .SunSUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 277+ C2C8 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 278+ C2CA 67                                   ld      h,a
 279+ C2CB 7A                                   ld      a,d
 280+ C2CC E6 7F                                and     SignMask8Bit
 281+ C2CE 57                                   ld      d,a
 282+ C2CF B7                                   or      a
 283+ C2D0 ED 52                                sbc     hl,de
 284+ C2D2                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 284+ C2D2 FA DA C2    >                        jp		m, .SunSUBHLDESameOvrFlw
 285+ C2D5 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 286+ C2D6 F6 80                                or      SignOnly8Bit
 287+ C2D8 67                                   ld      h,a
 288+ C2D9 C9                                   ret
 289+ C2DA              .SunSUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 289+ C2DA AF          >                    xor a
 289+ C2DB 95          >                    sub l
 289+ C2DC 6F          >                    ld l,a
 289+ C2DD 9F          >                    sbc a,a
 289+ C2DE 94          >                    sub h
 289+ C2DF 67          >                    ld h,a
 290+ C2E0 78                                   ld      a,b
 291+ C2E1 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 292+ C2E3 B4                                   or      h
 293+ C2E4 67                                   ld      h,a                         ; recover sign
 294+ C2E5 C9                                   ret
 295+ C2E6 B7           .SunSUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 296+ C2E7 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 297+ C2E8 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 298+ C2EA 67                                   ld      h,a
 299+ C2EB 7A                                   ld      a,d
 300+ C2EC E6 7F                                and     SignMask8Bit
 301+ C2EE 57                                   ld      d,a
 302+ C2EF 19                                   add     hl,de
 303+ C2F0 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 304+ C2F1 B4                                   or      h
 305+ C2F2 67                                   ld      h,a                         ; set the previou sign value
 306+ C2F3 C9                                   ret
 307+ C2F4
 308+ C2F4
 309+ C2F4              .SunSBCHLDESigned:      JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 309+ C2F4 CB 7C       >                        bit 	7,h
 309+ C2F6 C2 07 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 310+ C2F9              .SunSBCHLDEhlPos:       JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 310+ C2F9 CB 7C       >                        bit 	7,h
 310+ C2FB C2 07 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 311+ C2FE ED 52        .SunSBCHLDEhlPosDePos:  sbc     hl,de                           ; ignore overflow for now will sort later TODO
 312+ C300 C9                                   ret
 313+ C301 CB BA        .SunSBCHLDEhlPosDeNeg:  res     7,d
 314+ C303 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 315+ C304 CB FA                                set     7,d
 316+ C306 C9                                   ret
 317+ C307 CB BC        .SunSBCHLDEhlNeg:       res     7,h
 318+ C309                                      JumpOnBitSet d,7,.SunSBCHLDEhlNegdeNeg
 318+ C309 CB 7A       >                        bit 	7,d
 318+ C30B C2 13 C3    >                        jp      nz,.SunSBCHLDEhlNegdeNeg
 319+ C30E ED 52        .SunSBCHLDEhlNegdePos:  sbc     hl,de                       ; ignore overflow for now will sort later TODO
 320+ C310 CB FC                                set     7,h
 321+ C312 C9                                   ret
 322+ C313 CB BA        .SunSBCHLDEhlNegdeNeg:      res     7,d
 323+ C315 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 324+ C316 CB FA                                set     7,d
 325+ C318 CB FC                                set     7,h
 326+ C31A C9                                   ret
 327+ C31B
 328+ C31B
 329+ C31B                                      include "./Universe/Sun/TransposeSunXX12BySunToSunXX15.asm"
# file opened: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
   1++C31B              TransposeSXX12BySunToSXX15:
   2++C31B 2A 7A C0                             ld		hl,(SBnKXX12xLo)					; get X into HL
   3++C31E 7C                                   ld		a,h			                        ; get XX12 Sign
   4++C31F E6 80                                and		$80									; check sign bit on high byte
   5++C321 47                                   ld		b,a									; and put it in of 12xlo in b
   6++C322                                      ;110921 debugld      h,0
   7++C322 7C                                   ld      a,h
   8++C323 E6 7F                                and     $7F
   9++C325 67                                   ld      h,a
  10++C326                                      ;110921 debugld      h,0
  11++C326 ED 5B 10 C0                          ld		de,(SBnKxlo)						;
  12++C32A 3A 12 C0                             ld		a,(SBnKxsgn)						; get Ship Pos (low,high,sign)
  13++C32D E6 80                                and		$80									; make sure we only have bit 7
  14++C32F 4F                                   ld		c,a									; and put sign of unkxsgn c
  15++C330 CD 52 B0                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++C333 B4                                   or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++C334 67                                   ld		h,a
  18++C335 22 74 C0                             ld		(SBnKXScaled),hl					; now write it out to XX15 X pos
  19++C338              ; ..................................
  20++C338 2A 7C C0                             ld		hl,(SBnKXX12yLo)					; Repeat above for Y coordinate
  21++C33B 7C                                   ld		a,h
  22++C33C E6 80                                and		$80
  23++C33E 47                                   ld		b,a
  24++C33F                                      ;110921 debugld      h,0
  25++C33F 7C                                   ld      a,h
  26++C340 E6 7F                                and     $7F
  27++C342 67                                   ld      h,a
  28++C343                                      ;110921 debugld      h,0
  29++C343 ED 5B 13 C0                          ld		de,(SBnKylo)
  30++C347 3A 15 C0                             ld		a,(SBnKysgn)
  31++C34A E6 80                                and		$80									; make sure we only have bit 7
  32++C34C 4F                                   ld		c,a
  33++C34D CD 52 B0                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++C350 B4                                   or		h									; combine sign in A with H
  35++C351 67                                   ld		h,a
  36++C352 22 76 C0                             ld		(SBnKYScaled),hl
  37++C355              ; ..................................
  38++C355 2A 7E C0                             ld		hl,(SBnKXX12zLo)					; and now repeat for Z cooord
  39++C358 7C                                   ld		a,h
  40++C359 E6 80                                and		$80
  41++C35B 47                                   ld		b,a
  42++C35C                                      ;110921 debugld      h,0
  43++C35C 7C                                   ld      a,h
  44++C35D E6 7F                                and     $7F
  45++C35F 67                                   ld      h,a
  46++C360                                      ;110921 debugld      h,0
  47++C360 ED 5B 16 C0                          ld		de,(SBnKzlo)
  48++C364 3A 18 C0                             ld		a,(SBnKzsgn)
  49++C367 E6 80                                and		$80									; make sure we only have bit 7
  50++C369 4F                                   ld		c,a
  51++C36A CD 52 B0                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++C36D B4                                   or		h									; combine sign in A with H
  53++C36E 67                                   ld		h,a
  54++C36F CB 7C                                bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++C371 20 16                                jr		nz,.ClampZto4                        ; result was negative so we need to clamp to 4
  56++C373 E6 7F                                and     $7F                                 ; a = value unsigned
  57++C375 20 06                                jr      nz,.NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++C377 7D                                   ld      a,l                                 ; get low byte now
  59++C378                                      JumpIfALTNusng 4,.ClampZto4					; if its < 4 then fix at 4
  59++C378 FE 04       >                        cp      4
  59++C37A DA 89 C3    >                        jp		c, .ClampZto4
  60++C37D 22 78 C0     .NoClampZto4:           ld		(SBnKZScaled),hl					; hl = signed calculation and > 4
  61++C380 7D                                   ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  62++C381 32 6C 9A                             ld      (varT),a
  63++C384 7C                                   ld		a,h
  64++C385 32 4F 9A                             ld      (varU),a
  65++C388 C9                                   ret
  66++C389              ; This is where we limit 4 to a minimum of 4
  67++C389 21 04 00     .ClampZto4:             ld		hl,4
  68++C38C 22 78 C0                             ld		(SBnKZScaled),hl; BODGE FOR NOW
  69++C38F 7D                                   ld		a,l
  70++C390 32 6C 9A                             ld      (varT),a                            ;                                                                           ;;;
  71++C393 7C                                   ld		a,h
  72++C394 32 4F 9A                             ld      (varU),a 						; compatibility for now
  73++C397 C9                                   ret
  74++C398
# file closed: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
 330+ C398
 331+ C398
 332+ C398 ED 4B 78 C0  ScaleSunTo8Bit:			ld			bc,(SBnKZScaled)
 333+ C39C 2A 74 C0                             ld			hl,(SBnKXScaled)
 334+ C39F ED 5B 76 C0                          ld			de,(SBnKYScaled)
 335+ C3A3 78           .SetABSbc:              ld			a,b
 336+ C3A4 DD 67                                ld			ixh,a
 337+ C3A6 E6 7F                                and			SignMask8Bit
 338+ C3A8 47                                   ld			b,a									; bc = ABS bc
 339+ C3A9 7C           .SetABShl:              ld			a,h
 340+ C3AA DD 6F                                ld			ixl,a
 341+ C3AC E6 7F                                and			SignMask8Bit
 342+ C3AE 67                                   ld			h,a									; hl = ABS hl
 343+ C3AF 7A           .SetABSde:              ld			a,d
 344+ C3B0 FD 67                                ld			iyh,a
 345+ C3B2 E6 7F                                and			SignMask8Bit
 346+ C3B4 57                                   ld			d,a									; de = ABS de
 347+ C3B5 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 348+ C3B6 B4                                   or			h                                   ; XX15+1	\ x hi
 349+ C3B7 B2                                   or			d                                   ; XX15+4	\ y hi
 350+ C3B8 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 351+ C3BA                                      ShiftHLRight1
 351+ C3BA CB 3C       >			   srl h
 351+ C3BC CB 1D       >			   rr  l
 352+ C3BE                                      ShiftDERight1
 352+ C3BE CB 3A       >			   srl d
 352+ C3C0 CB 1B       >			   rr  e
 353+ C3C2                                      ShiftBCRight1
 353+ C3C2 CB 38       >			   srl b
 353+ C3C4 CB 19       >			   rr  c
 354+ C3C6 C3 B5 C3                             jp          .ScaleNodeTo8BitLoop
 355+ C3C9              ; now we have scaled values we have to deal with sign
 356+ C3C9 DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 357+ C3CB E6 80                                and			SignOnly8Bit
 358+ C3CD B0                                   or			b
 359+ C3CE 47                                   ld			b,a
 360+ C3CF DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 361+ C3D1 E6 80                                and			SignOnly8Bit
 362+ C3D3 B4                                   or			h
 363+ C3D4 67                                   ld			h,a
 364+ C3D5 FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 365+ C3D7 E6 80                                and			SignOnly8Bit
 366+ C3D9 B2                                   or			d
 367+ C3DA 57                                   ld			d,a
 368+ C3DB ED 43 78 C0  .SignsDoneSaveResult:	ld			(SBnKZScaled),bc
 369+ C3DF 22 74 C0                             ld			(SBnKXScaled),hl
 370+ C3E2 ED 53 76 C0                          ld			(SBnKYScaled),de
 371+ C3E6 78                                   ld			a,b
 372+ C3E7 32 4F 9A                             ld			(varU),a
 373+ C3EA 79                                   ld			a,c
 374+ C3EB 32 6C 9A                             ld			(varT),a
 375+ C3EE C9                                   ret
 376+ C3EF
 377+ C3EF              ;--------------------------------------------------------------------------------------------------------
 378+ C3EF              ;;;;X = normal scale
 379+ C3EF              ;;;;ZtempHi = zhi
 380+ C3EF              ;;;;......................................................
 381+ C3EF              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 382+ C3EF              ;;;;  Loop                                              ::LL90
 383+ C3EF              ;;;;     inc X
 384+ C3EF              ;;;;     divide X, Y & ZtempHiLo by 2
 385+ C3EF              ;;;;  Until ZtempHi = 0
 386+ C3EF              ;;;;......................................................
 387+ C3EF              ;-LL21---------------------------------------------------------------------------------------------------
 388+ C3EF              ;                        include "./Universe/NormaliseTransMat.asm"
 389+ C3EF              ;-LL91---------------------------------------------------------------------------------------------------
 390+ C3EF
 391+ C3EF              ; Now we have
 392+ C3EF              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 393+ C3EF              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 394+ C3EF              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 395+ C3EF              ;
 396+ C3EF              ;--------------------------------------------------------------------------------------------------------
 397+ C3EF              ;--------------------------------------------------------------------------------------------------------
 398+ C3EF              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 399+ C3EF              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 400+ C3EF              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 401+ C3EF              ; Returns
 402+ C3EF              ;
 403+ C3EF              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 404+ C3EF              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 405+ C3EF              ;
 406+ C3EF              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 407+ C3EF              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 408+ C3EF              ;
 409+ C3EF              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 410+ C3EF              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 411+ C3EF
 412+ C3EF
 413+ C3EF               ; TESTEDOK
 414+ C3EF              SXX12DotOneRow:
 415+ C3EF              SXX12CalcX:              N0equN1byN2div256 varT, (hl), (SBnKXScaled)       ; T = (hl) * regSunXX15fx /256
 415+ C3EF 3A 74 C0    >                        ld      a,(SBnKXScaled)                        ;
 415+ C3F2 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 415+ C3F3 7E          >                        ld      a,(hl)                        ; A = XX16 element
 415+ C3F4 57          >                        ld      d,a
 415+ C3F5 ED 30       >                        mul
 415+ C3F7 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 415+ C3F8 32 6C 9A    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 416+ C3FB 23                                   inc     hl                                  ; move to sign byte
 417+ C3FC              SXX12CalcXSign:          AequN1xorN2 SBnKXScaledSign,(hl)             ;
 417+ C3FC 3A 75 C0    >                        ld      a,(SBnKXScaledSign)
 417+ C3FF AE          >                        xor     (hl)
 418+ C400 32 52 9A                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 419+ C403 23                                   inc     hl
 420+ C404              SXX12CalcY:              N0equN1byN2div256 varQ, (hl),(SBnKYScaled)       ; Q = XX16 * SunXX15 /256 using varQ to hold regSunXX15fx
 420+ C404 3A 76 C0    >                        ld      a,(SBnKYScaled)                        ;
 420+ C407 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 420+ C408 7E          >                        ld      a,(hl)                        ; A = XX16 element
 420+ C409 57          >                        ld      d,a
 420+ C40A ED 30       >                        mul
 420+ C40C 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 420+ C40D 32 50 9A    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 421+ C410                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 421+ C410 3A 6C 9A    >                        ld       a,(varT)
 421+ C413 32 51 9A    >                        ld       (varR),a
 422+ C416 23                                   inc     hl
 423+ C417                                      AequN1xorN2 SBnKYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 423+ C417 3A 77 C0    >                        ld      a,(SBnKYScaledSign)
 423+ C41A AE          >                        xor     (hl)
 424+ C41B              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 425+ C41B E5           SSTequSRplusAQ           push    hl
 426+ C41C CD 70 B1                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 427+ C41F E1                                   pop     hl
 428+ C420 32 6C 9A                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 429+ C423 23                                   inc     hl
 430+ C424              SXX12CalcZ:              N0equN1byN2div256 varQ,(hl),(SBnKZScaled)       ; Q = |sidev_z| * z_lo / 256
 430+ C424 3A 78 C0    >                        ld      a,(SBnKZScaled)                        ;
 430+ C427 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 430+ C428 7E          >                        ld      a,(hl)                        ; A = XX16 element
 430+ C429 57          >                        ld      d,a
 430+ C42A ED 30       >                        mul
 430+ C42C 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 430+ C42D 32 50 9A    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 431+ C430                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 431+ C430 3A 6C 9A    >                        ld       a,(varT)
 431+ C433 32 51 9A    >                        ld       (varR),a
 432+ C436 23                                   inc     hl
 433+ C437                                      AequN1xorN2 SBnKZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 433+ C437 3A 79 C0    >                        ld      a,(SBnKZScaledSign)
 433+ C43A AE          >                        xor     (hl)
 434+ C43B              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 435+ C43B CD 70 B1                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 436+ C43E              ; Now we exit with A = result S = Sign
 437+ C43E C9                                   ret
 438+ C43F
 439+ C43F
 440+ C43F
 441+ C43F              ;--------------------------------------------------------------------------------------------------------
 442+ C43F                                      include "./Universe/Sun/CopySunXX12ScaledToSunXX18.asm"
# file opened: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
   1++C43F              CopySXX12ScaledToSXX18:
   2++C43F              CopyResultToSDrawCam:
   3++C43F                      ldCopyByte SXX12         ,SXX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C43F 3A 7A C0    >                        ld       a,(SXX12)
   3++C442 32 68 C0    >                        ld       (SXX18),a
   4++C445                      ldCopyByte SXX12+1       ,SXX18+2           ; XX12+1 => XX18+2
   4++C445 3A 7B C0    >                        ld       a,(SXX12+1)
   4++C448 32 6A C0    >                        ld       (SXX18+2),a
   5++C44B                      ldCopyByte SXX12+2       ,SXX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C44B 3A 7C C0    >                        ld       a,(SXX12+2)
   5++C44E 32 6B C0    >                        ld       (SXX18+3),a
   6++C451                      ldCopyByte SXX12+3       ,SXX18+5           ; XX12+3 => XX18+5
   6++C451 3A 7D C0    >                        ld       a,(SXX12+3)
   6++C454 32 6D C0    >                        ld       (SXX18+5),a
   7++C457                      ldCopyByte SXX12+4       ,SXX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C457 3A 7E C0    >                        ld       a,(SXX12+4)
   7++C45A 32 6E C0    >                        ld       (SXX18+6),a
   8++C45D                      ldCopyByte SXX12+5       ,SXX18+8           ; XX12+5 => XX18+8
   8++C45D 3A 7F C0    >                        ld       a,(SXX12+5)
   8++C460 32 70 C0    >                        ld       (SXX18+8),a
   9++C463 C9                   ret
  10++C464
# file closed: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
 443+ C464              ;                        include "./Variables/CopySunXX12toSunXX15.asm"
 444+ C464              ;                       include "./Variables/CopySunXX18toSunXX15.asm"
 445+ C464              ;                       include "./Variables/CopySunXX18ScaledToSunXX15.asm"
 446+ C464              ;                       include "./Variables/CopySunXX12ToScaled.asm"
 447+ C464              ;--------------------------------------------------------------------------------------------------------
 448+ C464              ;                        include "./Maths/Utilities/DotProductXX12SunXX15.asm"
 449+ C464              ;--------------------------------------------------------------------------------------------------------
 450+ C464
 451+ C464 DD 25        ScaleDownSXX15byIXH:    dec     ixh
 452+ C466 F8                                   ret     m
 453+ C467 21 74 C0                             ld      hl,SBnKXScaled
 454+ C46A CB 3E                                srl     (hl)                        ; SunXX15  \ xnormal lo/2 \ LL93+3 \ counter X
 455+ C46C 23                                   inc     hl                          ; looking at SunXX15 x sign now
 456+ C46D 23                                   inc     hl                          ; looking at SunXX15 y Lo now
 457+ C46E CB 3E                                srl     (hl)                        ; SunXX15+2    \ ynormal lo/2
 458+ C470 23                                   inc     hl                          ; looking at SunXX15 y sign now
 459+ C471 23                                   inc     hl                          ; looking at SunXX15 z Lo now
 460+ C472 CB 3E                                srl     (hl)
 461+ C474 C3 64 C4                             jp      ScaleDownSXX15byIXH
 462+ C477 C9                                   ret
 463+ C478
 464+ C478 21 68 C0     DivideSXX18By2:         ld      hl,SBnKDrawCam0xLo
 465+ C47B CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 466+ C47D 23                                   inc     hl                          ; looking at XX18 x sign now
 467+ C47E 23                                   inc     hl                          ; looking at XX18 y Lo now
 468+ C47F CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 469+ C481 23                                   inc     hl                          ; looking at XX18 y sign now
 470+ C482 23                                   inc     hl                          ; looking at XX18 z Lo now
 471+ C483 CB 3E                                srl     (hl)
 472+ C485 C9                                   ret
 473+ C486
 474+ C486              ; ......................................................                                                         ;;;
 475+ C486
 476+ C486
 477+ C486
 478+ C486
 479+ C486              ; Pitch and roll are 2 phases
 480+ C486              ; 1 - we apply our pitch and roll to the ship position
 481+ C486              ;       x -> x + alpha * (y - alpha * x)
 482+ C486              ;       y -> y - alpha * x - beta * z
 483+ C486              ;       z -> z + beta * (y - alpha * x - beta * z)
 484+ C486              ; which can be simplified as:
 485+ C486              ;       1. K2 = y - alpha * x
 486+ C486              ;       2. z = z + beta * K2
 487+ C486              ;       3. y = K2 - beta * z
 488+ C486              ;       4. x = x + alpha * y
 489+ C486              ; 2 - we apply our patch and roll to the ship orientation
 490+ C486              ;      Roll calculations:
 491+ C486              ;
 492+ C486              ;        nosev_y = nosev_y - alpha * nosev_x_hi
 493+ C486              ;        nosev_x = nosev_x + alpha * nosev_y_hi
 494+ C486              ;      Pitch calculations:
 495+ C486              ;
 496+ C486              ;        nosev_y = nosev_y - beta * nosev_z_hi
 497+ C486              ;        nosev_z = nosev_z + beta * nosev_y_hi
 498+ C486
 499+ C486
 500+ C486                          INCLUDE "./Universe/Sun/SunApplyMyRollAndPitch.asm"
# file opened: ././Universe/Sun/SunApplyMyRollAndPitch.asm
   1++C486
   2++C486              ; Full version
   3++C486              ; 1. K2 = y - alpha * x
   4++C486              ; 2. z = z + beta * K2
   5++C486              ; 3. y = K2 - beta * z
   6++C486              ; 4. x = x + alpha * y
   7++C486
   8++C486
   9++C486
  10++C486              ; SunrollWork holds Alpha intermidate results
  11++C486 00 00 00     SunRollResult:          DS 3                    ; equivalent of K
  12++C489              SunRollResultp1         equ SunRollResult
  13++C489              SunRollResultp2         equ SunRollResult+1
  14++C489              SunRollResultp3         equ SunRollResult+2
  15++C489 00           SunRollResultp4         DB 0
  16++C48A              ;SunRollResult2:         DS 3                    ; do we need this? TODO
  17++C48A 00 00 00     SunZResult:             DS 3
  18++C48D              ;  1. K2 = y - alpha * x
  19++C48D              ;  2. z = z + beta * K2
  20++C48D              ;  3. y = K2 - beta * z
  21++C48D              ;  4. x = x + alpha * y
  22++C48D              ;.... or
  23++C48D              ;  2. z = z + (beta * (y - alpha * x))
  24++C48D              ;  3. y = (y - alpha * x) - (beta * z)
  25++C48D              ;  4. x = x + (alpha * y)
  26++C48D
  27++C48D
  28++C48D              ;----------------------------------------------------------------------------------------------------------------------------------
  29++C48D              ; Sun version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
  30++C48D 3A 66 99     SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  31++C490 21 58 99                             ld      hl,BETA
  32++C493 B6                                   or      (hl)
  33++C494 E6 7F                                and     SignMask8Bit
  34++C496 CA 32 C5                             jp      z,.NoRotation
  35++C499              .CalcZ:                 ;break
  36++C499 3A 66 99                             ld      a,(ALPHA)                   ; get roll magnitude
  37++C49C FE 00                                cp      0
  38++C49E 20 0B                                jr      nz,.ApplyAlpha
  39++C4A0 ED 5B 14 C0  .NoAlpha:               ld      de,(SBnKyhi)                ; here we have no roll so
  40++C4A4 3A 13 C0                             ld      a,(SBnKylo)                 ; store untouched in SunRollResult
  41++C4A7 6F                                   ld      l,a                         ; .
  42++C4A8 C3 C7 C4                             jp      .SaveResult1                ; .
  43++C4AB EE 80        .ApplyAlpha:            xor     SignOnly8Bit                ; d = -alpha (Q value)
  44++C4AD 57                                   ld      d,a                         ;
  45++C4AE 3A 10 C0                             ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
  46++C4B1 5F                                   ld      e,a                         ; .
  47++C4B2 2A 11 C0                             ld      hl,(SBnKxhi)                ; .
  48++C4B5 CD E5 AA                             call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256 where d = sign byte
  49++C4B8 7A           .SkipAlphaMultiply:     ld      a,d
  50++C4B9 32 89 C4                             ld      (SunRollResultp4),a         ; save sign from result, ELC holds actual result
  51++C4BC 3A 13 C0     .CalcYPlusDEL:          ld      a,(SBnKylo)                 ; BCH = Y sgn, hi, lo, we loose the C from result
  52++C4BF 67                                   ld      h,a                         ; .
  53++C4C0 ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; .
  54++C4C4 CD 78 A8                             call    AddBCHtoDELsigned           ; DEL = Y - ( X *  alpha /256) (which is K2)
  55++C4C7 7A           .SaveResult1:           ld      a,d                         ; SunPitchWork = AHL = DEL
  56++C4C8 63                                   ld      h,e                         ;
  57++C4C9 32 88 C4     .CopyResultTo2:         ld      (SunRollResult+2),a         ; .
  58++C4CC 22 86 C4                             ld      (SunRollResult) ,hl         ; .
  59++C4CF 5D           .CalcY:                 ld      e,l                         ; HLE = result (K2)
  60++C4D0 6C                                   ld      l,h                         ; .
  61++C4D1 67                                   ld      h,a                         ; .
  62++C4D2 3A 58 99                             ld      a,(BETA)                    ; get pitch
  63++C4D5 57                                   ld      d,a                         ; now D = BETA
  64++C4D6 CD E5 AA                             call    mulHLEbyDSigned             ; DELC = (y - alpha * x /256 ) * Beta or K2 * beta
  65++C4D9 ED 4B 17 C0                          ld      bc,(SBnKzhi)                ; BCH = z
  66++C4DD 3A 16 C0                             ld      a,(SBnKzlo)                 ; .
  67++C4E0 67                                   ld      h,a                         ; .
  68++C4E1 CD 78 A8                             call    AddBCHtoDELsigned           ; DEL = z + ((y - alpha * x /256 ) * Beta) /256
  69++C4E4 ED 53 8B C4  .SaveZResult:           ld      (SunZResult+1),de           ; We now have a z result which we save
  70++C4E8 ED 53 17 C0                          ld      (SBnKzhi),de                ; .
  71++C4EC 7D                                   ld      a,l                         ; .
  72++C4ED 32 8A C4                             ld      (SunZResult),a              ; .
  73++C4F0 32 16 C0                             ld      (SBnKzlo),a                 ; .
  74++C4F3 EB           .CalcMinusBetaMulZ:     ex      de,hl                       ; HLE = DEL = z post calculation
  75++C4F4                                      ; not needed bugld      e,l                         ; .
  76++C4F4 3A 58 99                             ld      a,(BETA)                    ; d = - BETA
  77++C4F7 EE 80                                xor     SignOnly8Bit                ; .
  78++C4F9 57                                   ld      d,a                         ; .
  79++C4FA CD E5 AA                             call    mulHLEbyDSigned             ; DELC = z * - BETA
  80++C4FD ED 4B 87 C4                          ld      bc, (SunRollResult+1)       ; BCH = (y - alpha * x) (or K2)
  81++C501 3A 86 C4                             ld      a,(SunRollResult)           ; .
  82++C504 67                                   ld      h,a                         ; .
  83++C505 CD 78 A8                             call    AddBCHtoDELsigned           ; DEL = (y - alpha * x) - (Z * BETA) (K2+ (Z * -BETA)
  84++C508 ED 53 14 C0                          ld      (SBnKyhi),de                ; y = (y - alpha * x) - (Z * BETA)
  85++C50C 7D                                   ld      a,l                         ; .
  86++C50D 32 13 C0                             ld      (SBnKylo),a                 ; .
  87++C510 EB           .CalcX:                 ex      de,hl                       ; HLE = DEL = Y
  88++C511 5D                                   ld      e,l                         ; .
  89++C512 3A 66 99                             ld      a,(ALPHA)                   ; D = alpha
  90++C515 FE 00                                cp      0                           ; if alpha is 0 then don't update x
  91++C517 CA 32 C5                             jp      z,.NoRotation
  92++C51A 57                                   ld      d,a                         ; .
  93++C51B CD E5 AA                             call    mulHLEbyDSigned             ; DELC = Y * alpha
  94++C51E ED 4B 11 C0                          ld      bc,(SBnKxhi)                ; BCH = x
  95++C522 3A 10 C0                             ld      a,(SBnKxlo)                 ; .
  96++C525 67                                   ld      h,a                         ; .
  97++C526 CD 78 A8                             call    AddBCHtoDELsigned           ; DEL = x + (alpha * y /256 )
  98++C529 ED 53 11 C0                          ld      (SBnKxhi),de                ; x = x + (alpha * y /256 )
  99++C52D 7C                                   ld      a,h                         ; .
 100++C52E 32 10 C0                             ld      (SBnKxlo),a                 ; .
 101++C531 C9                                   ret
 102++C532 3A 4C 9A     .NoRotation:            ld      a,(DELTA)                   ; BCH = - Delta
 103++C535 FE 00                                cp      0
 104++C537 C8                                   ret     z
 105++C538 0E 00                                ld      c,0                         ;
 106++C53A 67                                   ld      h,a                         ;
 107++C53B 06 80                                ld      b,$80                       ;
 108++C53D ED 5B 17 C0                          ld      de,(SBnKzhi)                ; DEL = z position
 109++C541 3A 16 C0                             ld      a,(SBnKzlo)                 ; .
 110++C544 6F                                   ld      l,a                         ; .
 111++C545 CD 78 A8                             call    AddBCHtoDELsigned           ; update speed
 112++C548 ED 53 17 C0                          ld      (SBnKzhi),DE                ; write back to zpos
 113++C54C 7D                                   ld      a,l
 114++C54D 32 16 C0                             ld      (SBnKzlo),a                ;
 115++C550 C9                                   ret
 116++C551
 117++C551              ;
 118++C551              ;SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
 119++C551              ;                        ld      hl,BETA
 120++C551              ;                        or      (hl)
 121++C551              ;                        and     SignMask8Bit
 122++C551              ;                        ret     z
 123++C551              ;.CalcZ:                 ;break
 124++C551              ;                        ld      a,(ALPHA)                   ; get roll magnitude
 125++C551              ;                        xor     SignOnly8Bit                ; get Q = -alpha
 126++C551              ;                        ld      d,a                         ; d reg represents Q (abount to roll)
 127++C551              ;                        ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
 128++C551              ;                        ld      e,a                         ;
 129++C551              ;                        ld      hl,(SBnKxhi)                ;
 130++C551              ;                        call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256
 131++C551              ;                        ld      a,d
 132++C551              ;                        ld      (SunRollResultp4),a         ; save D (I guess we need the sign?)
 133++C551              ;.CalcYPlusDEL:          ld      a,(SBnKylo)                 ; BCH = Y sgn, hi, lo
 134++C551              ;                        ld      h,a
 135++C551              ;                        ld      bc,(SBnKyhi)
 136++C551              ;                        call    AddBCHtoDELsigned           ; DEL = Y - ( X *  alpha /256)
 137++C551              ;.SaveResult1:           ld      a,l                         ; SunPitchWork = DEL
 138++C551              ;                        ;ld      (SunRollResult), a          ; SunPitchWork + 0 = L
 139++C551              ;                        ex      de,hl                       ; SunPitchWork + 1 = E
 140++C551              ;.CopyResultTo2:         ld      (SunRollResult+1),a         ; SunPitchWork + 2 = D
 141++C551              ;                        ld      (SunRollResult+1) ,hl       ; Copy K to K2 (y - alpha * x)
 142++C551              ;                        ;ld      (SunRollResult2+1),hl       ; also HLA = result
 143++C551              ;                        ld      a,(SunRollResult)           ; .
 144++C551              ;                        ;ld      (SunRollResult2),a          ; .
 145++C551              ;.CalcY:                 ld      e,a                         ; so now HLE = result
 146++C551              ;                        ld      a,(BETA)                    ; get pitch
 147++C551              ;                        ld      d,a                         ; now D = BETA
 148++C551              ;                        call    mulHLEbyDSigned             ; DELC = (y - alpha * x /256 ) * Beta
 149++C551              ;                        ld      bc,(SBnKzhi)                ; BCH = z
 150++C551              ;                        ld      a,(SBnKzlo)                 ;
 151++C551              ;                        ld      h,a                         ;
 152++C551              ;                        call    AddBCHtoDELsigned           ; DEL = z + ((y - alpha * x /256 ) * Beta) /256
 153++C551              ;.SaveZResult:           ld      (SunZResult+1),de           ; We now have a z result which we save
 154++C551              ;                        ld      (SBnKzhi),de                ; .
 155++C551              ;                        ld      a,l                         ; .
 156++C551              ;                        ld      (SunZResult),a              ; .
 157++C551              ;                        ld      (SBnKzlo),a                 ; .
 158++C551              ;.CalcMinusBetaMulZ:     ex      de,hl                       ; HLE = DEL = z post calculation
 159++C551              ;                        ld      e,l                         ;
 160++C551              ;                        ld      a,(BETA)                    ; d = - BETA
 161++C551              ;                        ld      d,a                         ;
 162++C551              ;                        xor     SignOnly8Bit                ;
 163++C551              ;                        call    mulHLEbyDSigned             ; DELC = z * - BETA
 164++C551              ;                        ld      bc, (SunRollResult+1)       ; BCH = (y - alpha * x) (or K2)
 165++C551              ;                        ld      a,(SunRollResult)           ;
 166++C551              ;                        ld      h,a                         ;
 167++C551              ;                        call    AddBCHtoDELsigned           ; DEL = (y - alpha * x) - (Z * BETA)
 168++C551              ;                        ld      (SBnKyhi),de                ; y = (y - alpha * x) - (Z * BETA)
 169++C551              ;                        ld      a,l                         ;
 170++C551              ;                        ld      (SBnKylo),a                 ;
 171++C551              ;.CalcX:                 ex      de,hl                       ; HLE = DEL = Y
 172++C551              ;                        ld      e,l                         ;
 173++C551              ;                        ld      a,(ALPHA)
 174++C551              ;                        ld      d,a                         ; D = alpha
 175++C551              ;                        call    mulHLEbyDSigned             ; DELC = Y * alpha
 176++C551              ;                        ld      bc,(SBnKxhi)                ; BCH = x
 177++C551              ;                        ld      a,(SBnKxlo)                 ;
 178++C551              ;                        ld      h,a                         ;
 179++C551              ;                        call    AddBCHtoDELsigned           ; DEL = x + (alpha * y /256 )
 180++C551              ;                        ld      (SBnKxhi),de                ; x = x + (alpha * y /256 )
 181++C551              ;                        ld      a,h                         ;
 182++C551              ;                        ld      (SBnKxlo),a                 ;
 183++C551              ;                        ret
 184++C551              ;
# file closed: ././Universe/Sun/SunApplyMyRollAndPitch.asm
 501+ C551              ;            INCLUDE "./Universe/SunApplyShipRollAndPitch.asm"
 502+ C551
 503+ C551 00           SunOnScreen             DB 0
 504+ C552 00 00        cLineArrayPtr            DW 0
 505+ C554 00           LineCount               DB 0
 506+ C555 00           RaggedSize              DB 0
 507+ C556 00           MinYOffset              DB 0
 508+ C557 00           MaxYOffSet              DB 0
 509+ C558 00 00        SunScrnX                DW  0       ; signed
 510+ C55A 00 00        SunScrnY                DW  0       ; signed
 511+ C55C 00           SunRadius               DB  0       ; unsigned
 512+ C55D              ; draw circle
 513+ C55D
 514+ C55D              ;
 515+ C55D              ;DIVD3B2 K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo)
 516+ C55D
 517+ C55D 00 00 00 00  SunVarK                 DS 4
 518+ C561 00 00 00     SunVarP                 DS 3
 519+ C564 00           SunVarQ                 DS 1
 520+ C565 00           SunVarR                 DS 1
 521+ C566 00           SunVarS                 DS 1
 522+ C567 00           SunVarT                 DS 1
 523+ C568
 524+ C568              ; Needs tuning for registers vs memroy
 525+ C568 22 61 C5     SunKEquAHLDivCDE:       ld      (SunVarP),hl
 526+ C56B 32 63 C5                             ld      (SunVarP+2),a
 527+ C56E ED 53 64 C5                          ld      (SunVarQ),de
 528+ C572 79                                   ld      a,c
 529+ C573 32 66 C5                             ld      (SunVarS),a
 530+ C576 3A 61 C5     SunDivD3B:              ld      a,(SunVarP)                 ; Ensure P is at least 1
 531+ C579 F6 01                                or      1
 532+ C57B 32 61 C5                             ld      (SunVarP),a
 533+ C57E 3A 63 C5                             ld      a,(SunVarP+2)               ; T = Sign xor Sign
 534+ C581 21 66 C5                             ld      hl,SunVarS
 535+ C584 AE                                   xor     (hl)
 536+ C585 E6 80                                and     SignOnly8Bit
 537+ C587 32 67 C5                             ld      (SunVarT),a
 538+ C58A 06 00                                ld      b,0                         ; b = y counter
 539+ C58C 3A 63 C5                             ld      a,(SunVarP+2)               ; a = abs high byte of p
 540+ C58F E6 7F                                and     SignMask8Bit                ; .
 541+ C591 2A 61 C5                             ld      hl,(SunVarP)                ; shift P left
 542+ C594              .SunDVL9:               JumpIfAGTENusng   64, .SunDV14      ; if high p > 64 then go to DV14
 542+ C594 FE 40       >                        cp     64
 542+ C596 D2 A3 C5    >                        jp		nc,.SunDV14
 543+ C599                                      ShiftHLLeft1                        ;
 543+ C599 CB 25       >			   sla l
 543+ C59B CB 14       >			   rl  h
 544+ C59D CB 17                                rl      a                           ;
 545+ C59F 04                                   inc     b                           ; increase shift count
 546+ C5A0 C3 94 C5                             jp      .SunDVL9
 547+ C5A3 22 61 C5     .SunDV14:               ld      (SunVarP),hl                ; save off var P
 548+ C5A6 32 63 C5                             ld      (SunVarP+2),a
 549+ C5A9 3A 66 C5                             ld      a,(SunVarS)                 ; a= ABS varS
 550+ C5AC E6 7F                                and     SignMask8Bit
 551+ C5AE 2A 64 C5                             ld      hl,(SunVarQ)                ; HL = vars Q & R
 552+ C5B1 05           .SunDVL6:               dec     b                           ; reduce b counter by 1
 553+ C5B2                                      ShiftHLLeft1                        ; varQRA  shift left
 553+ C5B2 CB 25       >			   sla l
 553+ C5B4 CB 14       >			   rl  h
 554+ C5B6 CB 17                                rl      a                           ;
 555+ C5B8 F2 B1 C5                             jp      p, .SunDVL6                 ; keep shifting until bit 7 of a is set
 556+ C5BB 22 64 C5                             ld      (SunVarQ),hl                ; save QR
 557+ C5BE 32 66 C5     .SunDV9:                ld      (SunVarS),a                 ; save S
 558+ C5C1                                      ;ld      a,h
 559+ C5C1                                      ;ld      (varQ),a
 560+ C5C1 4F                                   ld      c,a
 561+ C5C2 3A 63 C5                             ld      a,(SunVarP+2)
 562+ C5C5 C5                                   push    bc                          ; save shift counter in b
 563+ C5C6 CD 51 AC                             call    DIV16Amul256dCUNDOC
 564+ C5C9                                      ;call    RequAmul256divQ
 565+ C5C9 79                                   ld      a, c
 566+ C5CA 32 51 9A                             ld      (varR),a
 567+ C5CD C1                                   pop     bc                          ; retrieve shift counter
 568+ C5CE 21 00 00                             ld      hl,0                        ; set K to 0
 569+ C5D1 22 5D C5                             ld      (SunVarK),hl                ; .
 570+ C5D4 22 5F C5                             ld      (SunVarK+2),hl              ; .
 571+ C5D7 CB 78                                bit     7,b                         ; is counter positive
 572+ C5D9 28 32                                jr      z,.SunDV12                  ; .
 573+ C5DB 3A 51 9A                             ld      a,(varR)                    ;
 574+ C5DE CB 27        .SunDVL8:               sla     a                           ; Shift K by 1 left
 575+ C5E0 21 5E C5                             ld      hl,SunVarK+1                ; .
 576+ C5E3 CB 16                                rl      (hl)                        ; .
 577+ C5E5 23                                   inc     hl                          ; .
 578+ C5E6 CB 16                                rl      (hl)                        ; .
 579+ C5E8 23                                   inc     hl                          ; .
 580+ C5E9 CB 16                                rl      (hl)                        ; .
 581+ C5EB 04                                   inc     b
 582+ C5EC 20 F0                                jr      nz,.SunDVL8                 ; loop until K is shifted
 583+ C5EE 32 5D C5                             ld      (SunVarK),a
 584+ C5F1 3A 60 C5                             ld      a,(SunVarK+3)
 585+ C5F4 21 67 C5                             ld      hl,SunVarT
 586+ C5F7 B6                                   or      (hl)
 587+ C5F8 32 60 C5                             ld      (SunVarK+3),a
 588+ C5FB C9                                   ret
 589+ C5FC 3A 51 9A     .SunDV13:               ld      a,(varR)                    ; when we get here, shift is zero
 590+ C5FF 32 5D C5                             ld      (SunVarK),a
 591+ C602 3A 60 C5                             ld      a,(SunVarK+3)
 592+ C605 21 67 C5                             ld      hl,SunVarT
 593+ C608 B6                                   or      (hl)
 594+ C609 32 60 C5                             ld      (SunVarK+3),a
 595+ C60C C9                                   ret
 596+ C60D 78           .SunDV12:               ld      a,b
 597+ C60E A7                                   and     a
 598+ C60F 28 EB                                jr      z,.SunDV13
 599+ C611 3A 51 9A                             ld      a,(varR)                    ; it probably is already R so need to test
 600+ C614 CB 2F        .SunDVL10:              sra     a                           ; Shift K by 1 left
 601+ C616 05                                   dec     b
 602+ C617 20 FB                                jr      nz,.SunDVL10
 603+ C619 32 5D C5                             ld      (SunVarK),a                 ; as original divide was onyl 8 bits K 1,2,3 don;t matter
 604+ C61C 3A 67 C5                             ld      a,(SunVarT)
 605+ C61F 32 60 C5                             ld      (SunVarK+3),a
 606+ C622 C9                                   ret
 607+ C623
 608+ C623
 609+ C623
 610+ C623              SunProcessVertex:       MACRO   vertlo, vertsgn
 611+ C623 ~            .SunProjectToEye:       ld      de,(SBnKzlo)                ; X Pos = X / Z
 612+ C623 ~                                    ld      a,(SBnKzsgn)                ; CDE = z
 613+ C623 ~                                    ld      c,a                         ;
 614+ C623 ~                                    ld      hl,(vertlo)                ; AHL = x
 615+ C623 ~                                    ld      a,(vertsgn)                ;
 616+ C623 ~                                    call    SunKEquAHLDivCDE            ; result in sunvarK to K + 3
 617+ C623 ~                                    ld      hl,(SunVarK)                ; result is in DEHL (high to low)
 618+ C623 ~                                    ld      de,(SunVarK+2)
 619+ C623 ~            .CheckPosOnScreenX:     ld      a,d                         ; a= abs highest byte (k+3)  or k+2
 620+ C623 ~                                    and     SignMask8Bit                ;
 621+ C623 ~                                    or      e                           ;
 622+ C623 ~                                    ret     nz                          ; off screen
 623+ C623 ~                                    ld      a,h                         ; a = k + 1 can do this as ABS
 624+ C623 ~                                    ReturnIfAGTEusng 4                  ; if > 1024 then return
 625+ C623 ~                                    ld      a,d                         ; get sign back
 626+ C623 ~                                    and     SignOnly8Bit                ; if positive then we are good
 627+ C623 ~                                    jr      z,.calculatedVert
 628+ C623 ~            .XIsNegative:           NegHL                               ; make 2's c as negative
 629+ C623 ~            .calculatedVert:
 630+ C623                                      ENDM
 631+ C623
 632+ C623              ; .........................................................................................................................
 633+ C623 ED 5B 16 C0  SunCalculateRadius:     ld      de,(SBnKzlo)
 634+ C627 3A 18 C0                             ld      a,(SBnKzsgn)
 635+ C62A 4F                                   ld      c,a
 636+ C62B 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 637+ C62E AF                                   xor     a
 638+ C62F CD B8 A9                             call    Div24by24LeadSign           ; radius = AHL/CDE = 24576 / distance z
 639+ C632 7A                                   ld      a,d                         ; if high byte (d) = 0 then e contains radius
 640+ C633                                      JumpIfAIsZero  .SaveRadius
 640+ C633 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 640+ C634 CA 39 C6    >                        jp	z, .SaveRadius
 641+ C637 1E F8        .MaxRadius:             ld      e,248                       ;set radius to 248 as maxed out
 642+ C639 7B           .SaveRadius:            ld      a,e
 643+ C63A 32 5C C5                             ld      (SunRadius),a               ; save a copy of radius now for later
 644+ C63D C9                                   ret
 645+ C63E
 646+ C63E                                 ; could probabyl set a variable say "varGood", default as 1 then set to 0 if we end up with a good calulation?? may not need it as we draw here
 647+ C63E CD 8D C4     SunUpdateAndRender:     call    SunApplyMyRollAndPitch
 648+ C641 3A 18 C0     .CheckDrawable:         ld      a,(SBnKzsgn)
 649+ C644 E6 80                                and     SignOnly8Bit
 650+ C646 C0                                   ret     nz
 651+ C647              .CheckDist48:           ReturnIfAGTENusng 48                ; at a distance over 48 its too far away
 651+ C647 FE 30       >                        cp    48
 651+ C649 D0          >                        ret	 nc
 652+ C64A 21 17 C0                             ld      hl,SBnKzhi                  ; if the two high bytes are zero then its too close
 653+ C64D B6                                   or      (hl)
 654+ C64E                                      ReturnIfAIsZero
 654+ C64E A7          >                        and     a
 654+ C64F C8          >                        ret     z
 655+ C650              .calculateX:            SunProcessVertex SBnKxlo, SBnKxsgn
 655+ C650 ED 5B 16 C0 >.SunProjectToEye:       ld      de,(SBnKzlo)                ; X Pos = X / Z
 655+ C654 3A 18 C0    >                        ld      a,(SBnKzsgn)                ; CDE = z
 655+ C657 4F          >                        ld      c,a                         ;
 655+ C658 2A 10 C0    >                        ld      hl,(SBnKxlo)                ; AHL = x
 655+ C65B 3A 12 C0    >                        ld      a,(SBnKxsgn)                ;
 655+ C65E CD 68 C5    >                        call    SunKEquAHLDivCDE            ; result in sunvarK to K + 3
 655+ C661 2A 5D C5    >                        ld      hl,(SunVarK)                ; result is in DEHL (high to low)
 655+ C664 ED 5B 5F C5 >                        ld      de,(SunVarK+2)
 655+ C668 7A          >.CheckPosOnScreenX:     ld      a,d                         ; a= abs highest byte (k+3)  or k+2
 655+ C669 E6 7F       >                        and     SignMask8Bit                ;
 655+ C66B B3          >                        or      e                           ;
 655+ C66C C0          >                        ret     nz                          ; off screen
 655+ C66D 7C          >                        ld      a,h                         ; a = k + 1 can do this as ABS
 655+ C66E             >                        ReturnIfAGTEusng 4                  ; if > 1024 then return
 655+ C66E FE 04       >                        cp    4
 655+ C670 D0          >                        ret	 nc
 655+ C671 7A          >                        ld      a,d                         ; get sign back
 655+ C672 E6 80       >                        and     SignOnly8Bit                ; if positive then we are good
 655+ C674 28 06       >                        jr      z,.calculatedVert
 655+ C676             >.XIsNegative:           NegHL                               ; make 2's c as negative
 655+ C676 AF          >                    xor a
 655+ C677 95          >                    sub l
 655+ C678 6F          >                    ld l,a
 655+ C679 9F          >                    sbc a,a
 655+ C67A 94          >                    sub h
 655+ C67B 67          >                    ld h,a
 655+ C67C             >.calculatedVert:
 656+ C67C 1E 80        .calculatedX:           ld      e,ScreenCenterX
 657+ C67E 16 00                                ld      d,0
 658+ C680                                      ClearCarryFlag
 658+ C680 B7          >                        or a
 659+ C681 ED 5A                                adc     hl,de
 660+ C683                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 661+ C683 22 58 C5                             ld      (SunScrnX),hl               ; save projected X Position, 2's compliment
 662+ C686              .calculateY:            SunProcessVertex SBnKylo, SBnKysgn
 662+ C686 ED 5B 16 C0 >.SunProjectToEye:       ld      de,(SBnKzlo)                ; X Pos = X / Z
 662+ C68A 3A 18 C0    >                        ld      a,(SBnKzsgn)                ; CDE = z
 662+ C68D 4F          >                        ld      c,a                         ;
 662+ C68E 2A 13 C0    >                        ld      hl,(SBnKylo)                ; AHL = x
 662+ C691 3A 15 C0    >                        ld      a,(SBnKysgn)                ;
 662+ C694 CD 68 C5    >                        call    SunKEquAHLDivCDE            ; result in sunvarK to K + 3
 662+ C697 2A 5D C5    >                        ld      hl,(SunVarK)                ; result is in DEHL (high to low)
 662+ C69A ED 5B 5F C5 >                        ld      de,(SunVarK+2)
 662+ C69E 7A          >.CheckPosOnScreenX:     ld      a,d                         ; a= abs highest byte (k+3)  or k+2
 662+ C69F E6 7F       >                        and     SignMask8Bit                ;
 662+ C6A1 B3          >                        or      e                           ;
 662+ C6A2 C0          >                        ret     nz                          ; off screen
 662+ C6A3 7C          >                        ld      a,h                         ; a = k + 1 can do this as ABS
 662+ C6A4             >                        ReturnIfAGTEusng 4                  ; if > 1024 then return
 662+ C6A4 FE 04       >                        cp    4
 662+ C6A6 D0          >                        ret	 nc
 662+ C6A7 7A          >                        ld      a,d                         ; get sign back
 662+ C6A8 E6 80       >                        and     SignOnly8Bit                ; if positive then we are good
 662+ C6AA 28 06       >                        jr      z,.calculatedVert
 662+ C6AC             >.XIsNegative:           NegHL                               ; make 2's c as negative
 662+ C6AC AF          >                    xor a
 662+ C6AD 95          >                    sub l
 662+ C6AE 6F          >                    ld l,a
 662+ C6AF 9F          >                    sbc a,a
 662+ C6B0 94          >                    sub h
 662+ C6B1 67          >                    ld h,a
 662+ C6B2             >.calculatedVert:
 663+ C6B2 1E 60        .calculatedY:           ld      e,ScreenCenterY
 664+ C6B4 57                                   ld      d,a
 665+ C6B5 EB                                   ex      de,hl
 666+ C6B6                                      ClearCarryFlag
 666+ C6B6 B7          >                        or a
 667+ C6B7 ED 52                                sbc     hl,de
 668+ C6B9                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 669+ C6B9 22 5A C5                             ld      (SunScrnY),hl               ; save projected Y Position, 2's compliment
 670+ C6BC              ; .........................................................................................................................
 671+ C6BC CD 23 C6                             call    SunCalculateRadius
 672+ C6BF              ; .........................................................................................................................
 673+ C6BF 2A 58 C5     .CheckIfSunOnScreen:    ld      hl,(SunScrnX)               ; get x pixel position
 674+ C6C2 FD 26 00                             ld      iyh,0                       ; iyh holds draw status, 0= OK
 675+ C6C5 16 00                                ld      d,0                         ; e still holds radius
 676+ C6C7 7C                                   ld      a,h
 677+ C6C8                                      JumpOnLeadSignSet   h,.CheckXNegative
 677+ C6C8 7C          >                        ld      a,h
 677+ C6C9 E6 80       >                        and     SignOnly8Bit
 677+ C6CB C2 E1 C6    >                        jp      nz,.CheckXNegative
 678+ C6CE 7C           .CheckXPositive:        ld      a,h
 679+ C6CF                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero its definitly on screen
 679+ C6CF A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 679+ C6D0 CA EA C6    >                        jp	z, .XOnScreen
 680+ C6D3 16 00                                ld      d,0                         ; de = radius
 681+ C6D5                                      ClearCarryFlag
 681+ C6D5 B7          >                        or a
 682+ C6D6 ED 52                                sbc     hl,de
 683+ C6D8 FA EA C6                             jp      m   ,.XOnScreen             ; if result was negative then it spans screen
 684+ C6DB 7C                                   ld      a,h
 685+ C6DC                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero then its partially on screen at least
 685+ C6DC A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 685+ C6DD CA EA C6    >                        jp	z, .XOnScreen
 686+ C6E0 C9                                   ret                                 ; None of the X coordinates are on screen
 687+ C6E1 16 00        .CheckXNegative:        ld      d,0                         ; de = radius
 688+ C6E3                                      ClearCarryFlag
 688+ C6E3 B7          >                        or a
 689+ C6E4 ED 5A                                adc     hl,de                       ; so we have hl - de
 690+ C6E6 F2 EA C6                             jp      p,.XOnScreen                ; if result was positive then it spans screen so we are good
 691+ C6E9 C9                                   ret                                 ; else x is totally off the left side of the screen
 692+ C6EA              ; .........................................................................................................................
 693+ C6EA 2A 5A C5     .XOnScreen:             ld      hl,(SunScrnY)               ; now Check Y coordinate
 694+ C6ED                                      JumpOnLeadSignSet   h,.CheckYNegative
 694+ C6ED 7C          >                        ld      a,h
 694+ C6EE E6 80       >                        and     SignOnly8Bit
 694+ C6F0 C2 12 C7    >                        jp      nz,.CheckYNegative
 695+ C6F3 7C           .CheckYPositive:        ld      a,h
 696+ C6F4                                      JumpIfAIsNotZero   .PosYCheck2
 696+ C6F4 FE 00       >                        cp	0
 696+ C6F6 C2 FF C6    >                        jp	nz,.PosYCheck2
 697+ C6F9 7D                                   ld      a,l
 698+ C6FA E6 80                                and     %10000000
 699+ C6FC CA 1B C7                             jp      z,YOnScreen                ; at least 1 row is on screen as > 128
 700+ C6FF 16 00        .PosYCheck2:            ld      d,0                         ; de = radius
 701+ C701                                      ClearCarryFlag
 701+ C701 B7          >                        or a
 702+ C702 ED 52                                sbc     hl,de
 703+ C704 FA 1B C7                             jp      m,YOnScreen                ; so if its -ve then it spans screen
 704+ C707 7C                                   ld      a,h                         ; if h > 0 then off screen so did not span
 705+ C708                                      ReturnIfANotZero                    ; .
 705+ C708 A7          >                        and     a
 705+ C709 C0          >                        ret     nz
 706+ C70A 7D                                   ld      a,l                         ; if l > 128 then off screen so did not span
 707+ C70B E6 80                                and     %10000000                   ; .
 708+ C70D                                      ReturnIfANotZero                    ; .
 708+ C70D A7          >                        and     a
 708+ C70E C0          >                        ret     nz
 709+ C70F C3 1B C7                             jp      YOnScreen                  ; so Y at least spans
 710+ C712 16 00        .CheckYNegative:        ld      d,0                         ; de = radius
 711+ C714                                      ClearCarryFlag
 711+ C714 B7          >                        or a
 712+ C715 ED 5A                                adc     hl,de                       ; so we have hl - de
 713+ C717 F2 1B C7                             jp      p,YOnScreen                ; if result was positive then it spans screen so we are good
 714+ C71A C9                                   ret                                 ; else never gets above 0 so return
 715+ C71B              ; .........................................................................................................................
 716+ C71B 21 9F C0     YOnScreen:             ld      hl,SBnKLineArray            ; we load start and end as 0
 717+ C71E 11 00 01                             ld		de, SunLineArraySize        ; just if we get a 0,0 genuine we will not plot it
 718+ C721 3E 00                                ld		a,0
 719+ C723 CD 40 96                             call	memfill_dma
 720+ C726              ; .........................................................................................................................
 721+ C726 11 00 00     .SetRaggedEdgeMax:      ld      de,0
 722+ C729 3A 5C C5                             ld      a,(SunRadius)               ; get readius
 723+ C72C FE 60                                cp      96                          ; if > 96 then roll carry flag into e
 724+ C72E                                      FlipCarryFlag
 724+ C72E 3F          >                        ccf
 725+ C72F CB 13                                rl      e                           ; if > 40 then roll carry flag into e
 726+ C731 FE 28                                cp      40
 727+ C733                                      FlipCarryFlag
 727+ C733 3F          >                        ccf
 728+ C734 CB 13                                rl      e
 729+ C736 FE 10                                cp      16                          ; if > 16 then roll carry flag into e
 730+ C738                                      FlipCarryFlag
 730+ C738 3F          >                        ccf
 731+ C739 CB 13                                rl     e
 732+ C73B 7B                                   ld      a,e                         ; a = ragged size from %00000111 to %00000000
 733+ C73C 32 55 C5                             ld      (RaggedSize),a
 734+ C73F              ; .........................................................................................................................
 735+ C73F 21 9F C0     .SkipSetK:              ld      hl,SBnKLineArray            ; prep line array details ready for filling
 736+ C742 22 9F C1                             ld      (LineArrayPtr),hl
 737+ C745 AF                                   xor     a
 738+ C746 32 54 C5                             ld      (LineCount),a
 739+ C749              ; .........................................................................................................................
 740+ C749 2A 5A C5     .GetMinY:               ld      hl,(SunScrnY)               ; now calculate start Y position
 741+ C74C 3A 5C C5                             ld      a,(SunRadius)
 742+ C74F 5F                                   ld      e,a
 743+ C750 16 00                                ld      d,0
 744+ C752                                      ClearCarryFlag
 744+ C752 B7          >                        or a
 745+ C753 ED 52                                sbc     hl,de
 746+ C755 F2 5B C7                             jp      p,.DoneMinY
 747+ C758 21 00 00                             ld      hl,0                        ; if its negative then we start with 0 as it can only go up screen after radius
 748+ C75B              .DoneMinY:              ReturnIfRegNotZero h                ; if h > 0 then off the screen
 748+ C75B 7C          >                        ld      a, h
 748+ C75C A7          >                        and     a
 748+ C75D C0          >                        ret     nz
 749+ C75E 7D                                   ld      a,l                         ; check if l > 127
 750+ C75F E6 80                                and     SignOnly8Bit                ; .
 751+ C761 C0                                   ret     nz                          ; if bit is set then > 128
 752+ C762 7D           .SetMinY:               ld      a,l
 753+ C763 32 56 C5                             ld      (MinYOffset),a              ; so now we have Y top of screen
 754+ C766 2A 5A C5     .GetMaxY:               ld      hl,(SunScrnY)               ; get hl = Y + radius, note if we got here then this can never be a negative result but can go from -ve hl to +ve result
 755+ C769 3A 5C C5                             ld      a,(SunRadius)               ; hl = hl + radius
 756+ C76C 16 00                                ld      d,0                         ; .
 757+ C76E 5F                                   ld      e,a                         ; .
 758+ C76F                                      ClearCarryFlag                      ; .
 758+ C76F B7          >                        or a
 759+ C770 ED 5A                                adc     hl,de                       ; .
 760+ C772 7C                                   ld      a,h
 761+ C773 A7                                   and     a
 762+ C774 28 06                                jr      z,.YHiOK
 763+ C776 21 7F 00     .YHiGTE127:             ld      hl,127
 764+ C779 C3 85 C7                             jp      .SetMaxY
 765+ C77C 7D           .YHiOK:                 ld      a,l                         ; clamp at 127
 766+ C77D E6 80                                and     SignOnly8Bit                ; .
 767+ C77F CA 85 C7                             jp      z,.SetMaxY
 768+ C782 21 7F 00                             ld      hl,127
 769+ C785 7D           .SetMaxY                ld      a,l
 770+ C786 32 57 C5                             ld      (MaxYOffSet),a              ; so now we have min and max Y coordinates and SunScrnX & Y holds center
 771+ C789 CD 90 C7                             call    SunDrawCircle
 772+ C78C CD B9 C1                             call    SunDraw
 773+ C78F C9                                   ret
 774+ C790                                      ; b8 04 00 02 00 00 60 01 00 gives a 0.5 so we have the cal wrong as its +-1 so should be * result of divide by 128
 775+ C790              ;.. Now we caluclate the circle of the star
 776+ C790              ;.. its from MinY down the screen to MaxY center ProjX,ProjY.
 777+ C790              ;.. We can use the circle draw logic gtom Bressenham's algorithm
 778+ C790              ; so now there are the following conditions to consider
 779+ C790              ; y min = 0   y center is negative radius <= ABS (Y center)             => Don't draw
 780+ C790              ; y min = 0   y center is negative radius > ABS (Y center)+1            => Draw bottom half only
 781+ C790              ; y max = 127 y center is > 127    radius <= y center - 127             => Don't draw
 782+ C790              ; y max = 127 y center is > 127    radius > y center - 127              => Draw top half only
 783+ C790              ; y min >= 0  y center > y min     we don't need to worry about radius  => Draw both halves
 784+ C790              ; x center + radius < 0                                                 => Don't draw
 785+ C790              ; x center - radius > 255                                               => Don't draw
 786+ C790              ; we won't consider x more here as the driver is the y coordinate but we will check if x is vaiable
 787+ C790              ; x point = max (x point, 0)   on left
 788+ C790              ; x point = min (x point, 255) on right
 789+ C790
 790+ C790              SetIYPlusOffset:        MACRO   reg
 791+ C790 ~                                    push    hl,,iy                          ; save hl, then hl = iy
 792+ C790 ~                                    pop     hl                              ;
 793+ C790 ~                                    ld      a,reg
 794+ C790 ~                                    add     hl,a
 795+ C790 ~                                    add     hl,a
 796+ C790 ~                                    push    hl
 797+ C790 ~                                    pop     iy
 798+ C790 ~                                    pop     hl
 799+ C790                                      ENDM
 800+ C790
 801+ C790              SetIYMinusOffset:       MACRO   reg
 802+ C790 ~                                    push    de,,hl,,iy                      ; save hl, then hl = iy
 803+ C790 ~                                    pop     hl                              ;
 804+ C790 ~                                    ld      a,reg
 805+ C790 ~                                    add     a,a
 806+ C790 ~                                    ld      e,a
 807+ C790 ~                                    ld      d,0
 808+ C790 ~                                    ClearCarryFlag
 809+ C790 ~                                    sbc     hl,de
 810+ C790 ~                                    push    hl
 811+ C790 ~                                    pop     iy
 812+ C790 ~                                    pop     de,,hl
 813+ C790                                      ENDM
 814+ C790
 815+ C790
 816+ C790              ;;;-SunDrawCircle:          ld      a,(SunRadius)
 817+ C790              ;;;-.CheckRadius:           ReturnIfAIsZero                         ; elimiate zero or single pixel
 818+ C790              ;;;-                        JumpIfAEqNusng  1, SunCircleSinglePixel
 819+ C790              ;;;-                       ; JumpIfAGTENusng 127, SunFullScreen      ; if its covering whole then just make it yellow
 820+ C790              ;;;-; already done .MakeCentreX2C:         MemSignedTo2C SunScrnX                   ; convert 16 bit signed to 2's compliment
 821+ C790              ;;;-; already done .MakeCentreY2C:         MemSignedTo2C SunScrnY                   ; .
 822+ C790              ;;;-.BoundsCheck            ld      hl,(SunScrnY)
 823+ C790              ;;;-                        push    hl
 824+ C790              ;;;-                        ld      a,(SunRadius)
 825+ C790              ;;;-                        add     hl,a
 826+ C790              ;;;-                        bit     7,h
 827+ C790              ;;;-                        ret     nz                              ; if Y + radius is negative then off the screen
 828+ C790              ;;;-                        pop     hl
 829+ C790              ;;;-                        ld      d,0
 830+ C790              ;;;-                        ld      e,a
 831+ C790              ;;;-                        ClearCarryFlag
 832+ C790              ;;;-                        sbc     hl,de
 833+ C790              ;;;-                        ld      a,h
 834+ C790              ;;;-                        ReturnIfAGTENusng  1                     ; really shoudl be signed TODO
 835+ C790              ;;;-
 836+ C790              ;;;-                        ld      hl,(SunScrnX)
 837+ C790              ;;;-                        push    hl
 838+ C790              ;;;-                        ld      a,(SunRadius)
 839+ C790              ;;;-                        add     hl,a
 840+ C790              ;;;-                        bit     7,h
 841+ C790              ;;;-                        ret     nz                              ; if Y + radius is negative then off the screen
 842+ C790              ;;;-                        pop     hl
 843+ C790              ;;;-                        ld      d,0
 844+ C790              ;;;-                        ld      e,a
 845+ C790              ;;;-                        ClearCarryFlag
 846+ C790              ;;;-                        sbc     hl,de
 847+ C790              ;;;-                        ld      a,h
 848+ C790              ;;;-
 849+ C790              ;;;-                        ReturnIfAGTENusng 1                      ; really shoudl be signed TODO
 850+ C790              SunDrawCircle
 851+ C790                                      ; ** BNOTE Ptuichj abnd roll has a bug as piitch increases z axis value
 852+ C790              .PrepCircleData:       ; ld      ixl,0
 853+ C790                                     ; ld		(.Plot1+1),bc			        ; save origin into DE reg in code
 854+ C790 3A 5C C5                             ld      a,(SunRadius)
 855+ C793 DD 67                                ld		ixh,a							; ixh = radius
 856+ C795 DD 2E 00                             ld		ixl,0						    ; ixl = delta (y)
 857+ C798 26 00        .calcd:	                ld		h,0                             ; de = radius * 2
 858+ C79A 6F                                   ld		l,a                             ; .
 859+ C79B 29                                   add		hl,hl							; .
 860+ C79C EB                                   ex		de,hl							; .
 861+ C79D 21 03 00                             ld		hl,3                            ; hl = 3 - (r * 2)
 862+ C7A0 A7                                   and		a                               ; .
 863+ C7A1 ED 52                                sbc		hl,de							; .
 864+ C7A3 44                                   ld		b,h                             ; bc = 3 - (r * 2) : d = 3 - 2r
 865+ C7A4 4D                                   ld		c,l								; .
 866+ C7A5 21 01 00     .calcdelta:             ld		hl,1                            ; set hl to 1
 867+ C7A8 16 00                                ld		d,0                             ; de = ixl
 868+ C7AA DD 5D                                ld		e,ixl                           ;
 869+ C7AC                                      ClearCarryFlag                          ;
 869+ C7AC B7          >                        or a
 870+ C7AD ED 52                                sbc		hl,de                           ; hl = 1 - ixl
 871+ C7AF 11 01 00     .Setde1:                ld		de,1                            ; del = 1
 872+ C7B2 DD 7C        .CircleLoop:            ld		a,ixh                           ; if x = y then exit
 873+ C7B4 DD BD                                cp		ixl                             ;
 874+ C7B6 D8                                   ret		c                               ;
 875+ C7B7 D9           .ProcessLoop:	        exx                                     ; save out registers
 876+ C7B8              ; Process CY+Y CX+X & CY+Y CX-X..................................
 877+ C7B8 2A 5A C5     .Plot1:                 ld      hl, (SunScrnY)
 878+ C7BB DD 7C        .Get1YRow:              ld      a,ixh
 879+ C7BD ED 31                                add     hl,a                            ; Check to see if CY+Y (note is add hl ,a usginedf only??)
 880+ C7BF              .Check1YRowOnScreen:    CheckRowHLOnScreen .NoTopPixelPair
 880+ C7BF 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
 880+ C7C0 A7          >                        and     a                               ; .
 880+ C7C1 20 26       >                        jr      nz,.NoTopPixelPair                   ; h <> 0 so fails (covers <0 and > 255
 880+ C7C3 7D          >                        ld      a,l                             ; l bit 7 0?
 880+ C7C4 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
 880+ C7C6 20 21       >                        jr      nz,.NoTopPixelPair                   ;
 881+ C7C8              .Write1YCoord:          SetIYPlusOffset ixh                     ; IY = IY + ixh
 881+ C7C8 E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
 881+ C7CB E1          >                        pop     hl                              ;
 881+ C7CC DD 7C       >                        ld      a,ixh
 881+ C7CE ED 31       >                        add     hl,a
 881+ C7D0 ED 31       >                        add     hl,a
 881+ C7D2 E5          >                        push    hl
 881+ C7D3 FD E1       >                        pop     iy
 881+ C7D5 E1          >                        pop     hl
 882+ C7D6                                      IYEquRowN l                             ; IY = SBnkLineArray + (2 * l) - set up iy as target address
 882+ C7D6 7D          >                        ld      a,l
 882+ C7D7 21 9F C0    >                        ld      hl,SBnKLineArray
 882+ C7DA ED 31       >                        add     hl,a
 882+ C7DC ED 31       >                        add     hl,a
 882+ C7DE E5          >                        push    hl
 882+ C7DF FD E1       >                        pop     iy
 883+ C7E1 DD 7D                                ld      a,ixl
 884+ C7E3 CD B6 C8                             call    ProcessXRowA
 885+ C7E6 C3 E9 C7                             jp      .Plot2
 886+ C7E9              .NoTopPixelPair:        ;break
 887+ C7E9              ; Process CY-Y CX+X & CY-Y CX-X..................................
 888+ C7E9 2A 5A C5     .Plot2:                 ld      hl, (SunScrnY)
 889+ C7EC 16 00        .Get2YRow:              ld      d,0
 890+ C7EE DD 5C                                ld      e,ixh
 891+ C7F0                                      ClearCarryFlag
 891+ C7F0 B7          >                        or a
 892+ C7F1 ED 52                                sbc     hl,de
 893+ C7F3              .Check2YRowOnScreen:    CheckRowHLOnScreen .NoBottomPixelPair
 893+ C7F3 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
 893+ C7F4 A7          >                        and     a                               ; .
 893+ C7F5 20 2B       >                        jr      nz,.NoBottomPixelPair                   ; h <> 0 so fails (covers <0 and > 255
 893+ C7F7 7D          >                        ld      a,l                             ; l bit 7 0?
 893+ C7F8 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
 893+ C7FA 20 26       >                        jr      nz,.NoBottomPixelPair                   ;
 894+ C7FC                                      SetIYMinusOffset ixh
 894+ C7FC D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
 894+ C800 E1          >                        pop     hl                              ;
 894+ C801 DD 7C       >                        ld      a,ixh
 894+ C803 87          >                        add     a,a
 894+ C804 5F          >                        ld      e,a
 894+ C805 16 00       >                        ld      d,0
 894+ C807             >                        ClearCarryFlag
 894+ C807 B7          >                        or a
 894+ C808 ED 52       >                        sbc     hl,de
 894+ C80A E5          >                        push    hl
 894+ C80B FD E1       >                        pop     iy
 894+ C80D E1 D1       >                        pop     de,,hl
 895+ C80F              .Write2YCoord:          IYEquRowN l                             ; set up iy as target address
 895+ C80F 7D          >                        ld      a,l
 895+ C810 21 9F C0    >                        ld      hl,SBnKLineArray
 895+ C813 ED 31       >                        add     hl,a
 895+ C815 ED 31       >                        add     hl,a
 895+ C817 E5          >                        push    hl
 895+ C818 FD E1       >                        pop     iy
 896+ C81A DD 7D                                ld      a,ixl
 897+ C81C CD B6 C8                             call    ProcessXRowA
 898+ C81F C3 22 C8                             jp      .Plot3
 899+ C822              .NoBottomPixelPair:     ;break
 900+ C822              ; Process CY+X CX+Y & CY+X CX-Y..................................
 901+ C822 2A 5A C5     .Plot3:                 ld      hl, (SunScrnY)
 902+ C825 DD 7D        .Get3YRow:              ld      a,ixl
 903+ C827 ED 31                                add     hl,a                            ; Check to see if CY+Y
 904+ C829              .Check3YRowOnScreen:    CheckRowHLOnScreen .NoTop3PixelPair
 904+ C829 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
 904+ C82A A7          >                        and     a                               ; .
 904+ C82B 20 26       >                        jr      nz,.NoTop3PixelPair                   ; h <> 0 so fails (covers <0 and > 255
 904+ C82D 7D          >                        ld      a,l                             ; l bit 7 0?
 904+ C82E E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
 904+ C830 20 21       >                        jr      nz,.NoTop3PixelPair                   ;
 905+ C832                                      SetIYPlusOffset ixl
 905+ C832 E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
 905+ C835 E1          >                        pop     hl                              ;
 905+ C836 DD 7D       >                        ld      a,ixl
 905+ C838 ED 31       >                        add     hl,a
 905+ C83A ED 31       >                        add     hl,a
 905+ C83C E5          >                        push    hl
 905+ C83D FD E1       >                        pop     iy
 905+ C83F E1          >                        pop     hl
 906+ C840              .Write3YCoord:          IYEquRowN l                             ; set up iy as target address
 906+ C840 7D          >                        ld      a,l
 906+ C841 21 9F C0    >                        ld      hl,SBnKLineArray
 906+ C844 ED 31       >                        add     hl,a
 906+ C846 ED 31       >                        add     hl,a
 906+ C848 E5          >                        push    hl
 906+ C849 FD E1       >                        pop     iy
 907+ C84B DD 7C                                ld      a,ixh
 908+ C84D CD B6 C8                             call    ProcessXRowA
 909+ C850 C3 53 C8                             jp      .Plot4
 910+ C853              .NoTop3PixelPair:       ;break
 911+ C853              ; Process CY-X CX+Y & CY-X CX-Y..................................
 912+ C853 2A 5A C5     .Plot4:                 ld      hl, (SunScrnY)
 913+ C856 16 00        .Get4YRow:              ld      d,0
 914+ C858 DD 5D                                ld      e,ixl
 915+ C85A                                      ClearCarryFlag
 915+ C85A B7          >                        or a
 916+ C85B ED 52                                sbc     hl,de
 917+ C85D              .Check4YRowOnScreen:    CheckRowHLOnScreen .NoBottom4PixelPair
 917+ C85D 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
 917+ C85E A7          >                        and     a                               ; .
 917+ C85F 20 28       >                        jr      nz,.NoBottom4PixelPair                   ; h <> 0 so fails (covers <0 and > 255
 917+ C861 7D          >                        ld      a,l                             ; l bit 7 0?
 917+ C862 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
 917+ C864 20 23       >                        jr      nz,.NoBottom4PixelPair                   ;
 918+ C866                                      SetIYMinusOffset ixl
 918+ C866 D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
 918+ C86A E1          >                        pop     hl                              ;
 918+ C86B DD 7D       >                        ld      a,ixl
 918+ C86D 87          >                        add     a,a
 918+ C86E 5F          >                        ld      e,a
 918+ C86F 16 00       >                        ld      d,0
 918+ C871             >                        ClearCarryFlag
 918+ C871 B7          >                        or a
 918+ C872 ED 52       >                        sbc     hl,de
 918+ C874 E5          >                        push    hl
 918+ C875 FD E1       >                        pop     iy
 918+ C877 E1 D1       >                        pop     de,,hl
 919+ C879              .Write4YCoord:          IYEquRowN l                             ; set up iy as target address
 919+ C879 7D          >                        ld      a,l
 919+ C87A 21 9F C0    >                        ld      hl,SBnKLineArray
 919+ C87D ED 31       >                        add     hl,a
 919+ C87F ED 31       >                        add     hl,a
 919+ C881 E5          >                        push    hl
 919+ C882 FD E1       >                        pop     iy
 920+ C884 DD 7C                                ld      a,ixh
 921+ C886 CD B6 C8                             call    ProcessXRowA
 922+ C889              .NoBottom4PixelPair:
 923+ C889              ; Completed one iteration........................................
 924+ C889 D9                                   exx
 925+ C88A CB 7C        .IncrementCircle:	    bit     7,h				; Check for Hl<=0
 926+ C88C 28 03                                jr z,   .draw_circle_1
 927+ C88E 19                                   add hl,de			; Delta=Delta+D1
 928+ C88F 18 05                                jr      .draw_circle_2		;
 929+ C891 09           .draw_circle_1:		    add     hl,bc			; Delta=Delta+D2
 930+ C892 03                                   inc     bc
 931+ C893 03                                   inc     bc				; D2=D2+2
 932+ C894 DD 25                                dec     ixh				; Y=Y-1
 933+ C896 03           .draw_circle_2:		    inc bc				    ; D2=D2+2
 934+ C897 03                                   inc bc
 935+ C898 13                                   inc de				    ; D1=D1+2
 936+ C899 13                                   inc de
 937+ C89A DD 2C                                inc ixl				    ; X=X+1
 938+ C89C C3 B2 C7                             jp      .CircleLoop
 939+ C89F 2A 58 C5     SunCircleSinglePixel:     ld      hl,(SunScrnX)
 940+ C8A2 7C                                   ld      a,h
 941+ C8A3 A7                                   and     a
 942+ C8A4 C0                                   ret     nz                  ; if the high byte is set then no pixel
 943+ C8A5 4D                                   ld      c,l
 944+ C8A6 2A 5A C5                             ld      hl,(SunScrnY)
 945+ C8A9 7C                                   ld      a,h
 946+ C8AA A7                                   and     a
 947+ C8AB C0                                   ret     nz                  ; if the high byte is set then no pixel
 948+ C8AC 7D                                   ld      a,l
 949+ C8AD CB 7F                                bit     7,a
 950+ C8AF C0                                   ret     nz                  ; if l > 127 then no pixel
 951+ C8B0 47                                   ld      b,a
 952+ C8B1 7B                                   ld		a,e
 953+ C8B2 CD 43 E1                             call	l2_plot_pixel_y_test
 954+ C8B5 C9                                   ret
 955+ C8B6
 956+ C8B6              ProcessXRowA:           ;break
 957+ C8B6 2A 58 C5                             ld      hl,(SunScrnX)                    ; get X Center
 958+ C8B9 F5                                   push    af                              ; save A (curent offset +/- value
 959+ C8BA ED 31                                add     hl,a                            ; Hl = HL + offset
 960+ C8BC 7C                                   ld      a,h                             ; is HL negative?, if so then set C to 0
 961+ C8BD CB 7F                                bit     7,a                             ;
 962+ C8BF 20 14                                jr      nz,.XCoordNegative              ; We can have this for non X + Radius i.e. the equater
 963+ C8C1 A7                                   and     a                               ; if H <> 0? (why by here must be +ve), set c to $FF
 964+ C8C2 20 16                                jr      nz,.XCoordMaxed                 ; .
 965+ C8C4 4D                                   ld      c,l                             ; else set c to l and do the -ve offset
 966+ C8C5 C5           .AddFuzz:               push    bc
 967+ C8C6 CD 61 9F                             call    doRandom                        ; c = c - random AND ragged Size
 968+ C8C9 C1                                   pop     bc
 969+ C8CA 21 55 C5                             ld      hl,RaggedSize                   ;
 970+ C8CD A6                                   and     (hl)                            ;
 971+ C8CE 81                                   add     c                               ;
 972+ C8CF 4F                                   ld      c,a                             ;
 973+ C8D0 38 08                                jr      c,.XCoordMaxed                  ; has fuzz caused a carry, if so > 255 to make 255
 974+ C8D2 C3 DC C8                             jp      .ProcessSubtract                ;
 975+ C8D5 0E 00        .XCoordNegative:        ld      c,0                             ; if it was negative then 0
 976+ C8D7 C3 DC C8                             jp      .ProcessSubtract
 977+ C8DA 0E FF        .XCoordMaxed:           ld      c,255                           ; if it was +ve then 255
 978+ C8DC F1           .ProcessSubtract:       pop     af                              ; get offset back
 979+ C8DD 5F                                   ld      e,a                             ; but goes into DE as its a subtract
 980+ C8DE 16 00                                ld      d,0
 981+ C8E0 2A 58 C5                             ld      hl,(SunScrnX)                    ; so do subtract
 982+ C8E3                                      ClearCarryFlag                          ; .
 982+ C8E3 B7          >                        or a
 983+ C8E4 ED 52                                sbc     hl,de                           ; .
 984+ C8E6 FA 03 C9                             jp      m,.XCoordLeftNegative           ; again test for min max
 985+ C8E9 E5 C5        .AddFuzzSubtract:       push    hl,,bc
 986+ C8EB CD 61 9F                             call    doRandom                        ; c = c - random AND ragged Size
 987+ C8EE C1                                   pop     bc
 988+ C8EF 21 55 C5                             ld      hl,RaggedSize                   ;
 989+ C8F2 A6                                   and     (hl)                            ;
 990+ C8F3 5F                                   ld      e,a
 991+ C8F4 E1                                   pop     hl
 992+ C8F5 ED 52                                sbc     hl,de
 993+ C8F7 FA 03 C9                             jp      m,.XCoordLeftNegative           ; again test for min max
 994+ C8FA 7C                                   ld      a,h
 995+ C8FB A7                                   and     a
 996+ C8FC C2 08 C9                             jp      nz,.XCordLeftMaxed
 997+ C8FF 45                                   ld      b,l
 998+ C900 C3 0A C9                             jp      .CompletedXCoords
 999+ C903 06 00        .XCoordLeftNegative:    ld      b,0
1000+ C905 C3 0A C9                             jp      .CompletedXCoords
1001+ C908 06 FF        .XCordLeftMaxed:        ld      b,255
1002+ C90A 78           .CompletedXCoords:      ld      a,b
1003+ C90B FD 77 00     .RowSaveIY1             ld      (iy+0),a                        ; iy holds current line array index
1004+ C90E 79                                   ld      a,c
1005+ C90F FD 77 01     .RowSaveIY3             ld      (iy+1),a
1006+ C912 C9                                   ret
1007+ C913
1008+ C913              ; .....................................................
1009+ C913              ; if the universe object is a planet or sun then do that instead
1010+ C913              ;;TODOProcessPlanet:          cp      129
1011+ C913              ;;TODO                        jr      nz, .ItsAPlanet
1012+ C913              ;;TODO.ItsAStar:              ld      a,(SBnKzsgn)
1013+ C913              ;;TODO                        cp      48                               ; if z > 48 (it must be positive to enter this routine)
1014+ C913
1015+ C913
1016+ C913              ; Square Root using tables
1017+ C913              ; DE = number to find
1018+ C913 21 33 CB     SunLookupSqrtDE:        ld      hl,SunSquareRootTable
1019+ C916 7A           .LookupCorseJump:       ld      a,d
1020+ C917 ED 31                                add     hl,a
1021+ C919 ED 31                                add     hl,a
1022+ C91B 7E                                   ld      a,(hl)
1023+ C91C 23                                   inc     hl
1024+ C91D 66                                   ld      h,(hl)
1025+ C91E 6F                                   ld      l,a
1026+ C91F 7E           .FineSearchLoop:        ld      a,(hl)
1027+ C920                                      JumpIfAEqNusng  e, .FoundByte
1027+ C920 BB          >                        cp     e
1027+ C921 CA 2D C9    >                        jp      z,.FoundByte
1028+ C924                                      JumpIfAGTENusng e, .PreviousByte
1028+ C924 BB          >                        cp     e
1028+ C925 D2 30 C9    >                        jp		nc,.PreviousByte
1029+ C928 23           .NotFound:              inc     hl
1030+ C929 23                                   inc     hl
1031+ C92A C3 1F C9                             jp      .FineSearchLoop
1032+ C92D 23           .FoundByte:             inc     hl
1033+ C92E 7E                                   ld      a,(hl)
1034+ C92F C9                                   ret
1035+ C930 2B           .PreviousByte:          dec     hl
1036+ C931 7E                                   ld      a,(hl)
1037+ C932 C9                                   ret
1038+ C933
1039+ C933 33 CB 45 CB  SunRootHighIndex:       DW SunSqr00,SunSqr01,SunSqr02,SunSqr03,SunSqr04,SunSqr05,SunSqr06,SunSqr07,SunSqr08,SunSqr09,SunSqr0A,SunSqr0B,SunSqr0C,SunSqr0D,SunSqr0E,SunSqr0F
1039+ C937 53 CB 5F CB
1039+ C93B 69 CB 71 CB
1039+ C93F 79 CB 81 CB
1039+ C943 89 CB 8F CB
1039+ C947 97 CB 9D CB
1039+ C94B A1 CB A7 CB
1039+ C94F AD CB B3 CB
1040+ C953 B9 CB BF CB                          DW SunSqr10,SunSqr11,SunSqr12,SunSqr13,SunSqr14,SunSqr15,SunSqr16,SunSqr17,SunSqr18,SunSqr19,SunSqr1A,SunSqr1B,SunSqr1C,SunSqr1D,SunSqr1E,SunSqr1F
1040+ C957 C5 CB CB CB
1040+ C95B D1 CB D5 CB
1040+ C95F D9 CB DB CB
1040+ C963 DF CB E3 CB
1040+ C967 E7 CB EB CB
1040+ C96B EF CB F3 CB
1040+ C96F F5 CB F9 CB
1041+ C973 FB CB FF CB                          DW SunSqr20,SunSqr21,SunSqr22,SunSqr23,SunSqr24,SunSqr25,SunSqr26,SunSqr27,SunSqr28,SunSqr29,SunSqr2A,SunSqr2B,SunSqr2C,SunSqr2D,SunSqr2E,SunSqr2F
1041+ C977 03 CC 05 CC
1041+ C97B 07 CC 0B CC
1041+ C97F 0D CC 0F CC
1041+ C983 13 CC 15 CC
1041+ C987 17 CC 19 CC
1041+ C98B 1D CC 1F CC
1041+ C98F 21 CC 25 CC
1042+ C993 29 CC 2D CC                          DW SunSqr30,SunSqr31,SunSqr32,SunSqr33,SunSqr34,SunSqr35,SunSqr36,SunSqr37,SunSqr38,SunSqr39,SunSqr3A,SunSqr3B,SunSqr3C,SunSqr3D,SunSqr3E,SunSqr3F
1042+ C997 31 CC 35 CC
1042+ C99B 37 CC 3B CC
1042+ C99F 3F CC 43 CC
1042+ C9A3 45 CC 49 CC
1042+ C9A7 4D CC 51 CC
1042+ C9AB 55 CC 59 CC
1042+ C9AF 5D CC 61 CC
1043+ C9B3 65 CC 69 CC                          DW SunSqr40,SunSqr41,SunSqr42,SunSqr43,SunSqr44,SunSqr45,SunSqr46,SunSqr47,SunSqr48,SunSqr49,SunSqr4A,SunSqr4B,SunSqr4C,SunSqr4D,SunSqr4E,SunSqr4F
1043+ C9B7 6D CC 71 CC
1043+ C9BB 75 CC 79 CC
1043+ C9BF 7D CC 81 CC
1043+ C9C3 85 CC 89 CC
1043+ C9C7 8D CC 91 CC
1043+ C9CB 95 CC 99 CC
1043+ C9CF 9D CC A1 CC
1044+ C9D3 A5 CC A7 CC                          DW SunSqr50,SunSqr51,SunSqr52,SunSqr53,SunSqr54,SunSqr55,SunSqr56,SunSqr57,SunSqr58,SunSqr59,SunSqr5A,SunSqr5B,SunSqr5C,SunSqr5D,SunSqr5E,SunSqr5F
1044+ C9D7 AB CC AF CC
1044+ C9DB B3 CC B7 CC
1044+ C9DF BB CC BF CC
1044+ C9E3 C3 CC C5 CC
1044+ C9E7 C9 CC CD CC
1044+ C9EB D1 CC D5 CC
1044+ C9EF D9 CC DB CC
1045+ C9F3 DF CC E3 CC                          DW SunSqr60,SunSqr61,SunSqr62,SunSqr63,SunSqr64,SunSqr65,SunSqr66,SunSqr67,SunSqr68,SunSqr69,SunSqr6A,SunSqr6B,SunSqr6C,SunSqr6D,SunSqr6E,SunSqr6F
1045+ C9F7 E7 CC EB CC
1045+ C9FB ED CC F1 CC
1045+ C9FF F5 CC F9 CC
1045+ CA03 FD CC FF CC
1045+ CA07 03 CD 07 CD
1045+ CA0B 0B CD 0D CD
1045+ CA0F 0F CD 13 CD
1046+ CA13 17 CD 1B CD                          DW SunSqr70,SunSqr71,SunSqr72,SunSqr73,SunSqr74,SunSqr75,SunSqr76,SunSqr77,SunSqr78,SunSqr79,SunSqr7A,SunSqr7B,SunSqr7C,SunSqr7D,SunSqr7E,SunSqr7F
1046+ CA17 1F CD 23 CD
1046+ CA1B 27 CD 2B CD
1046+ CA1F 2D CD 31 CD
1046+ CA23 35 CD 37 CD
1046+ CA27 3B CD 3F CD
1046+ CA2B 43 CD 45 CD
1046+ CA2F 49 CD 4D CD
1047+ CA33 51 CD 53 CD                          DW SunSqr80,SunSqr81,SunSqr82,SunSqr83,SunSqr84,SunSqr85,SunSqr86,SunSqr87,SunSqr88,SunSqr89,SunSqr8A,SunSqr8B,SunSqr8C,SunSqr8D,SunSqr8E,SunSqr8F
1047+ CA37 57 CD 59 CD
1047+ CA3B 5D CD 61 CD
1047+ CA3F 65 CD 67 CD
1047+ CA43 6B CD 6F CD
1047+ CA47 71 CD 75 CD
1047+ CA4B 79 CD 7B CD
1047+ CA4F 7F CD 83 CD
1048+ CA53 85 CD 89 CD                          DW SunSqr90,SunSqr91,SunSqr92,SunSqr93,SunSqr94,SunSqr95,SunSqr96,SunSqr97,SunSqr98,SunSqr99,SunSqr9A,SunSqr9B,SunSqr9C,SunSqr9D,SunSqr9E,SunSqr9F
1048+ CA57 8D CD 8F CD
1048+ CA5B 93 CD 97 CD
1048+ CA5F 99 CD 9D CD
1048+ CA63 A1 CD A3 CD
1048+ CA67 A7 CD AB CD
1048+ CA6B AD CD B1 CD
1048+ CA6F B5 CD B7 CD
1049+ CA73 BB CD BF CD                          DW SunSqrA0,SunSqrA1,SunSqrA2,SunSqrA3,SunSqrA4,SunSqrA5,SunSqrA6,SunSqrA7,SunSqrA8,SunSqrA9,SunSqrAA,SunSqrAB,SunSqrAC,SunSqrAD,SunSqrAE,SunSqrAF
1049+ CA77 C1 CD C5 CD
1049+ CA7B C7 CD CB CD
1049+ CA7F CF CD D1 CD
1049+ CA83 D5 CD D7 CD
1049+ CA87 DB CD DF CD
1049+ CA8B E1 CD E5 CD
1049+ CA8F E9 CD EB CD
1050+ CA93 ED CD EF CD                          DW SunSqrB0,SunSqrB1,SunSqrB2,SunSqrB3,SunSqrB4,SunSqrB5,SunSqrB6,SunSqrB7,SunSqrB8,SunSqrB9,SunSqrBA,SunSqrBB,SunSqrBC,SunSqrBD,SunSqrBE,SunSqrBF
1050+ CA97 F3 CD F7 CD
1050+ CA9B F9 CD FD CD
1050+ CA9F FF CD 03 CE
1050+ CAA3 07 CE 0B CE
1050+ CAA7 0D CE 0F CE
1050+ CAAB 13 CE 15 CE
1050+ CAAF 19 CE 1D CE
1051+ CAB3 1F CE 23 CE                          DW SunSqrC0,SunSqrC1,SunSqrC2,SunSqrC3,SunSqrC4,SunSqrC5,SunSqrC6,SunSqrC7,SunSqrC8,SunSqrC9,SunSqrCA,SunSqrCB,SunSqrCC,SunSqrCD,SunSqrCE,SunSqrCF
1051+ CAB7 25 CE 29 CE
1051+ CABB 2B CE 2F CE
1051+ CABF 33 CE 35 CE
1051+ CAC3 37 CE 39 CE
1051+ CAC7 3D CE 3F CE
1051+ CACB 43 CE 47 CE
1051+ CACF 49 CE 4D CE
1052+ CAD3 4F CE 53 CE                          DW SunSqrD0,SunSqrD1,SunSqrD2,SunSqrD3,SunSqrD4,SunSqrD5,SunSqrD6,SunSqrD7,SunSqrD8,SunSqrD9,SunSqrDA,SunSqrDB,SunSqrDC,SunSqrDD,SunSqrDE,SunSqrDF
1052+ CAD7 55 CE 59 CE
1052+ CADB 5B CE 5F CE
1052+ CADF 63 CE 65 CE
1052+ CAE3 69 CE 6B CE
1052+ CAE7 6F CE 71 CE
1052+ CAEB 75 CE 77 CE
1052+ CAEF 79 CE 7B CE
1053+ CAF3 7F CE 83 CE                          DW SunSqrE0,SunSqrE1,SunSqrE2,SunSqrE3,SunSqrE4,SunSqrE5,SunSqrE6,SunSqrE7,SunSqrE8,SunSqrE9,SunSqrEA,SunSqrEB,SunSqrEC,SunSqrED,SunSqrEE,SunSqrEF
1053+ CAF7 87 CE 8B CE
1053+ CAFB 8F CE 93 CE
1053+ CAFF 95 CE 99 CE
1053+ CB03 9D CE A1 CE
1053+ CB07 A3 CE A7 CE
1053+ CB0B A9 CE AB CE
1053+ CB0F AD CE B1 CE
1054+ CB13 B3 CE B5 CE                          DW SunSqrF0,SunSqrF1,SunSqrF2,SunSqrF3,SunSqrF4,SunSqrF5,SunSqrF6,SunSqrF7,SunSqrF8,SunSqrF9,SunSqrFA,SunSqrFB,SunSqrFC,SunSqrFD,SunSqrFE,SunSqrFF
1054+ CB17 B7 CE BB CE
1054+ CB1B BD CE C1 CE
1054+ CB1F C3 CE C7 CE
1054+ CB23 C9 CE CD CE
1054+ CB27 CF CE D3 CE
1054+ CB2B D5 CE D9 CE
1054+ CB2F DB CE DD CE
1055+ CB33
1056+ CB33              SunSquareRootTable:
1057+ CB33 00 00        SunSqr00:               DB $00,   0
1058+ CB35 04 02                                DB $04,   2
1059+ CB37 10 04                                DB $10,   4
1060+ CB39 24 06                                DB $24,   6
1061+ CB3B 40 08                                DB $40,   8
1062+ CB3D 64 0A                                DB $64,  10
1063+ CB3F 90 0C                                DB $90,  12
1064+ CB41 C4 0E                                DB $C4,  14
1065+ CB43 FF 0F                                DB $FF,  15
1066+ CB45 00 10        SunSqr01:               DB $00,  16
1067+ CB47 21 11                                DB $21,  17
1068+ CB49 44 12                                DB $44,  18
1069+ CB4B 69 13                                DB $69,  19
1070+ CB4D 90 14                                DB $90,  20
1071+ CB4F B9 15                                DB $B9,  21
1072+ CB51 FF 16                                DB $FF,  22
1073+ CB53 11 17        SunSqr02:               DB $11,  23
1074+ CB55 40 18                                DB $40,  24
1075+ CB57 71 19                                DB $71,  25
1076+ CB59 A4 1A                                DB $A4,  26
1077+ CB5B D9 1B                                DB $D9,  27
1078+ CB5D FF 1B                                DB $FF,  27
1079+ CB5F 10 1C        SunSqr03:               DB $10,  28
1080+ CB61 49 1D                                DB $49,  29
1081+ CB63 84 1E                                DB $84,  30
1082+ CB65 C1 1F                                DB $C1,  31
1083+ CB67 FF 1F                                DB $FF,  31
1084+ CB69 00 20        SunSqr04:               DB $00,  32
1085+ CB6B 41 21                                DB $41,  33
1086+ CB6D 84 22                                DB $84,  34
1087+ CB6F FF 23                                DB $FF,  35
1088+ CB71 10 24        SunSqr05:               DB $10,  36
1089+ CB73 59 25                                DB $59,  37
1090+ CB75 A4 26                                DB $A4,  38
1091+ CB77 FF 27                                DB $FF,  39
1092+ CB79 40 28        SunSqr06:               DB $40,  40
1093+ CB7B 91 29                                DB $91,  41
1094+ CB7D E4 2A                                DB $E4,  42
1095+ CB7F FF 2A                                DB $FF,  42
1096+ CB81 39 2B        SunSqr07:               DB $39,  43
1097+ CB83 90 2C                                DB $90,  44
1098+ CB85 E9 2D                                DB $E9,  45
1099+ CB87 FF 2D                                DB $FF,  45
1100+ CB89 44 2E        SunSqr08:               DB $44,  46
1101+ CB8B A1 2F                                DB $A1,  47
1102+ CB8D FF 2F                                DB $FF,  47
1103+ CB8F 00 30        SunSqr09:               DB $00,  48
1104+ CB91 61 31                                DB $61,  49
1105+ CB93 C4 32                                DB $C4,  50
1106+ CB95 FF 32                                DB $FF,  50
1107+ CB97 29 33        SunSqr0A:               DB $29,  51
1108+ CB99 90 34                                DB $90,  52
1109+ CB9B FF 35                                DB $FF,  53
1110+ CB9D 64 36        SunSqr0B:               DB $64,  54
1111+ CB9F FF 37                                DB $FF,  55
1112+ CBA1 40 38        SunSqr0C:               DB $40,  56
1113+ CBA3 B1 39                                DB $B1,  57
1114+ CBA5 FF 39                                DB $FF,  57
1115+ CBA7 24 3A        SunSqr0D:               DB $24,  58
1116+ CBA9 99 3B                                DB $99,  59
1117+ CBAB FF 3B                                DB $FF,  59
1118+ CBAD 10 3C        SunSqr0E:               DB $10,  60
1119+ CBAF 89 3D                                DB $89,  61
1120+ CBB1 FF 3D                                DB $FF,  61
1121+ CBB3 04 3E        SunSqr0F:               DB $04,  62
1122+ CBB5 81 3F                                DB $81,  63
1123+ CBB7 FF 3F                                DB $FF,  63
1124+ CBB9 00 40        SunSqr10:               DB $00,  64
1125+ CBBB 81 41                                DB $81,  65
1126+ CBBD FF 41                                DB $FF,  65
1127+ CBBF 04 42        SunSqr11:               DB $04,  66
1128+ CBC1 89 43                                DB $89,  67
1129+ CBC3 FF 43                                DB $FF,  67
1130+ CBC5 10 44        SunSqr12:               DB $10,  68
1131+ CBC7 99 45                                DB $99,  69
1132+ CBC9 FF 45                                DB $FF,  69
1133+ CBCB 24 46        SunSqr13:               DB $24,  70
1134+ CBCD B1 47                                DB $B1,  71
1135+ CBCF FF 47                                DB $FF,  71
1136+ CBD1 40 48        SunSqr14:               DB $40,  72
1137+ CBD3 FF 49                                DB $FF,  73
1138+ CBD5 64 4A        SunSqr15:               DB $64,  74
1139+ CBD7 FF 4B                                DB $FF,  75
1140+ CBD9 FF 4C        SunSqr16:               DB $FF,  76
1141+ CBDB C4 4D        SunSqr17:               DB $C4,  77
1142+ CBDD FF 4E                                DB $FF,  78
1143+ CBDF 61 4F        SunSqr18:               DB $61,  79
1144+ CBE1 FF 4F                                DB $FF,  79
1145+ CBE3 00 50        SunSqr19:               DB $00,  80
1146+ CBE5 FF 51                                DB $FF,  81
1147+ CBE7 44 52        SunSqr1A:               DB $44,  82
1148+ CBE9 FF 53                                DB $FF,  83
1149+ CBEB 90 54        SunSqr1B:               DB $90,  84
1150+ CBED FF 54                                DB $FF,  84
1151+ CBEF 39 55        SunSqr1C:               DB $39,  85
1152+ CBF1 FF 56                                DB $FF,  86
1153+ CBF3 FF 57        SunSqr1D:               DB $FF,  87
1154+ CBF5 40 58        SunSqr1E:               DB $40,  88
1155+ CBF7 FF 59                                DB $FF,  89
1156+ CBF9 FF 5A        SunSqr1F:               DB $FF,  90
1157+ CBFB 59 5B        SunSqr20:               DB $59,  91
1158+ CBFD FF 5B                                DB $FF,  91
1159+ CBFF 10 5C        SunSqr21:               DB $10,  92
1160+ CC01 FF 5D                                DB $FF,  93
1161+ CC03 FF 5E        SunSqr22:               DB $FF,  94
1162+ CC05 FF 5F        SunSqr23:               DB $FF,  95
1163+ CC07 00 60        SunSqr24:               DB $00,  96
1164+ CC09 FF 61                                DB $FF,  97
1165+ CC0B 84 62        SunSqr25:               DB $84,  98
1166+ CC0D 49 63        SunSqr26:               DB $49,  99
1167+ CC0F 10 64        SunSqr27:               DB $10, 100
1168+ CC11 FF 65                                DB $FF, 101
1169+ CC13 FF 66        SunSqr28:               DB $FF, 102
1170+ CC15 FF 67        SunSqr29:               DB $FF, 103
1171+ CC17 FF 68        SunSqr2A:               DB $FF, 104
1172+ CC19 11 69        SunSqr2B:               DB $11, 105
1173+ CC1B FF 6A                                DB $FF, 106
1174+ CC1D FF 6B        SunSqr2C:               DB $FF, 107
1175+ CC1F FF 6C        SunSqr2D:               DB $FF, 108
1176+ CC21 69 6D        SunSqr2E:               DB $69, 109
1177+ CC23 FF 6E                                DB $FF, 110
1178+ CC25 44 6E        SunSqr2F:               DB $44, 110
1179+ CC27 FF 6F                                DB $FF, 111
1180+ CC29 21 6F        SunSqr30:               DB $21, 111
1181+ CC2B FF 70                                DB $FF, 112
1182+ CC2D 00 70        SunSqr31:               DB $00, 112
1183+ CC2F FF 71                                DB $FF, 113
1184+ CC31 C4 72        SunSqr32:               DB $C4, 114
1185+ CC33 FF 72                                DB $FF, 114
1186+ CC35 FF 73        SunSqr33:               DB $FF, 115
1187+ CC37 90 74        SunSqr34:               DB $90, 116
1188+ CC39 FF 75                                DB $FF, 117
1189+ CC3B 79 75        SunSqr35:               DB $79, 117
1190+ CC3D FF 76                                DB $FF, 118
1191+ CC3F 64 76        SunSqr36:               DB $64, 118
1192+ CC41 64 77                                DB $64, 119
1193+ CC43 51 77        SunSqr37:               DB $51, 119
1194+ CC45 40 78        SunSqr38:               DB $40, 120
1195+ CC47 FF 79                                DB $FF, 121
1196+ CC49 31 79        SunSqr39:               DB $31, 121
1197+ CC4B FF 7A                                DB $FF, 122
1198+ CC4D 24 7A        SunSqr3A:               DB $24, 122
1199+ CC4F FF 7B                                DB $FF, 123
1200+ CC51 19 7B        SunSqr3B:               DB $19, 123
1201+ CC53 FF 7C                                DB $FF, 124
1202+ CC55 10 7C        SunSqr3C:               DB $10, 124
1203+ CC57 FF 7D                                DB $FF, 125
1204+ CC59 09 7D        SunSqr3D:               DB $09, 125
1205+ CC5B FF 7D                                DB $FF, 125
1206+ CC5D 04 7E        SunSqr3E:               DB $04, 126
1207+ CC5F FF 7E                                DB $FF, 126
1208+ CC61 01 7F        SunSqr3F:               DB $01, 127
1209+ CC63 FF 7F                                DB $FF, 127
1210+ CC65 00 80        SunSqr40:               DB $00, 128
1211+ CC67 FF 80                                DB $FF, 128
1212+ CC69 01 81        SunSqr41:               DB $01, 129
1213+ CC6B FF 82                                DB $FF, 130
1214+ CC6D 04 82        SunSqr42:               DB $04, 130
1215+ CC6F FF 83                                DB $FF, 131
1216+ CC71 09 83        SunSqr43:               DB $09, 131
1217+ CC73 FF 84                                DB $FF, 132
1218+ CC75 10 84        SunSqr44:               DB $10, 132
1219+ CC77 FF 85                                DB $FF, 133
1220+ CC79 19 85        SunSqr45:               DB $19, 133
1221+ CC7B FF 86                                DB $FF, 134
1222+ CC7D 24 86        SunSqr46:               DB $24, 134
1223+ CC7F FF 87                                DB $FF, 135
1224+ CC81 31 87        SunSqr47:               DB $31, 135
1225+ CC83 FF 88                                DB $FF, 136
1226+ CC85 40 88        SunSqr48:               DB $40, 136
1227+ CC87 FF 89                                DB $FF, 137
1228+ CC89 51 89        SunSqr49:               DB $51, 137
1229+ CC8B FF 8A                                DB $FF, 138
1230+ CC8D 64 8A        SunSqr4A:               DB $64, 138
1231+ CC8F FF 8A                                DB $FF, 138
1232+ CC91 79 8B        SunSqr4B:               DB $79, 139
1233+ CC93 FF 8B                                DB $FF, 139
1234+ CC95 90 8C        SunSqr4C:               DB $90, 140
1235+ CC97 FF 8C                                DB $FF, 140
1236+ CC99 A9 8D        SunSqr4D:               DB $A9, 141
1237+ CC9B FF 8D                                DB $FF, 141
1238+ CC9D C4 8E        SunSqr4E:               DB $C4, 142
1239+ CC9F FF 8E                                DB $FF, 142
1240+ CCA1 E1 8F        SunSqr4F:               DB $E1, 143
1241+ CCA3 FF 8F                                DB $FF, 143
1242+ CCA5 FF 8F        SunSqr50:               DB $FF, 143
1243+ CCA7 00 90        SunSqr51:               DB $00, 144
1244+ CCA9 FF 90                                DB $FF, 144
1245+ CCAB 21 91        SunSqr52:               DB $21, 145
1246+ CCAD FF 91                                DB $FF, 145
1247+ CCAF 44 92        SunSqr53:               DB $44, 146
1248+ CCB1 FF 92                                DB $FF, 146
1249+ CCB3 69 93        SunSqr54:               DB $69, 147
1250+ CCB5 FF 93                                DB $FF, 147
1251+ CCB7 90 94        SunSqr55:               DB $90, 148
1252+ CCB9 FF 94                                DB $FF, 148
1253+ CCBB B9 95        SunSqr56:               DB $B9, 149
1254+ CCBD FF 95                                DB $FF, 149
1255+ CCBF E4 96        SunSqr57:               DB $E4, 150
1256+ CCC1 FF 96                                DB $FF, 150
1257+ CCC3 FF 96        SunSqr58:               DB $FF, 150
1258+ CCC5 11 97        SunSqr59:               DB $11, 151
1259+ CCC7 FF 97                                DB $FF, 151
1260+ CCC9 40 98        SunSqr5A:               DB $40, 152
1261+ CCCB FF 98                                DB $FF, 152
1262+ CCCD 71 99        SunSqr5B:               DB $71, 153
1263+ CCCF FF 99                                DB $FF, 153
1264+ CCD1 A4 9A        SunSqr5C:               DB $A4, 154
1265+ CCD3 FF 9A                                DB $FF, 154
1266+ CCD5 D9 9B        SunSqr5D:               DB $D9, 155
1267+ CCD7 FF 9B                                DB $FF, 155
1268+ CCD9 FF 9B        SunSqr5E:               DB $FF, 155
1269+ CCDB 10 9C        SunSqr5F:               DB $10, 156
1270+ CCDD FF 9C                                DB $FF, 156
1271+ CCDF 49 9D        SunSqr60:               DB $49, 157
1272+ CCE1 FF 9D                                DB $FF, 157
1273+ CCE3 84 9E        SunSqr61:               DB $84, 158
1274+ CCE5 FF 9E                                DB $FF, 158
1275+ CCE7 C1 9F        SunSqr62:               DB $C1, 159
1276+ CCE9 FF 9F                                DB $FF, 159
1277+ CCEB FF 9F        SunSqr63:               DB $FF, 159
1278+ CCED 00 A0        SunSqr64:               DB $00, 160
1279+ CCEF FF A0                                DB $FF, 160
1280+ CCF1 41 A1        SunSqr65:               DB $41, 161
1281+ CCF3 FF A1                                DB $FF, 161
1282+ CCF5 84 A2        SunSqr66:               DB $84, 162
1283+ CCF7 FF A2                                DB $FF, 162
1284+ CCF9 C9 A3        SunSqr67:               DB $C9, 163
1285+ CCFB FF A3                                DB $FF, 163
1286+ CCFD FF A3        SunSqr68:               DB $FF, 163
1287+ CCFF 10 A4        SunSqr69:               DB $10, 164
1288+ CD01 FF A4                                DB $FF, 164
1289+ CD03 59 A5        SunSqr6A:               DB $59, 165
1290+ CD05 FF A5                                DB $FF, 165
1291+ CD07 A4 A6        SunSqr6B:               DB $A4, 166
1292+ CD09 FF A6                                DB $FF, 166
1293+ CD0B FF A7        SunSqr6C:               DB $FF, 167
1294+ CD0D FF A7        SunSqr6D:               DB $FF, 167
1295+ CD0F 40 A8        SunSqr6E:               DB $40, 168
1296+ CD11 FF A8                                DB $FF, 168
1297+ CD13 91 A9        SunSqr6F:               DB $91, 169
1298+ CD15 FF A9                                DB $FF, 169
1299+ CD17 E4 AA        SunSqr70:               DB $E4, 170
1300+ CD19 FF AA                                DB $FF, 170
1301+ CD1B 00 AA        SunSqr71:               DB $00, 170
1302+ CD1D FF AA                                DB $FF, 170
1303+ CD1F 39 AB        SunSqr72:               DB $39, 171
1304+ CD21 FF AB                                DB $FF, 171
1305+ CD23 90 AC        SunSqr73:               DB $90, 172
1306+ CD25 FF AC                                DB $FF, 172
1307+ CD27 E9 AD        SunSqr74:               DB $E9, 173
1308+ CD29 FF AD                                DB $FF, 173
1309+ CD2B FF AD        SunSqr75:               DB $FF, 173
1310+ CD2D 44 AE        SunSqr76:               DB $44, 174
1311+ CD2F FF AE                                DB $FF, 174
1312+ CD31 A1 AF        SunSqr77:               DB $A1, 175
1313+ CD33 FF AF                                DB $FF, 175
1314+ CD35 FF AF        SunSqr78:               DB $FF, 175
1315+ CD37 00 B0        SunSqr79:               DB $00, 176
1316+ CD39 FF B0                                DB $FF, 176
1317+ CD3B 61 B1        SunSqr7A:               DB $61, 177
1318+ CD3D FF B1                                DB $FF, 177
1319+ CD3F C4 B2        SunSqr7B:               DB $C4, 178
1320+ CD41 FF B2                                DB $FF, 178
1321+ CD43 FF B2        SunSqr7C:               DB $FF, 178
1322+ CD45 29 B3        SunSqr7D:               DB $29, 179
1323+ CD47 FF B3                                DB $FF, 179
1324+ CD49 90 B4        SunSqr7E:               DB $90, 180
1325+ CD4B FF B4                                DB $FF, 180
1326+ CD4D F9 B5        SunSqr7F:               DB $F9, 181
1327+ CD4F FF B5                                DB $FF, 181
1328+ CD51 FF B5        SunSqr80:               DB $FF, 181
1329+ CD53 64 B6        SunSqr81:               DB $64, 182
1330+ CD55 FF B6                                DB $FF, 182
1331+ CD57 D1 B7        SunSqr82:               DB $D1, 183
1332+ CD59 FF B7        SunSqr83:               DB $FF, 183
1333+ CD5B FF B7                                DB $FF, 183
1334+ CD5D 40 B8        SunSqr84:               DB $40, 184
1335+ CD5F FF B8                                DB $FF, 184
1336+ CD61 B1 B9        SunSqr85:               DB $B1, 185
1337+ CD63 FF B9                                DB $FF, 185
1338+ CD65 FF B9        SunSqr86:               DB $FF, 185
1339+ CD67 24 BA        SunSqr87:               DB $24, 186
1340+ CD69 FF BA                                DB $FF, 186
1341+ CD6B 99 BB        SunSqr88:               DB $99, 187
1342+ CD6D FF BB                                DB $FF, 187
1343+ CD6F FF BB        SunSqr89:               DB $FF, 187
1344+ CD71 10 BC        SunSqr8A:               DB $10, 188
1345+ CD73 FF BC                                DB $FF, 188
1346+ CD75 89 BD        SunSqr8B:               DB $89, 189
1347+ CD77 FF BD                                DB $FF, 189
1348+ CD79 FF BD        SunSqr8C:               DB $FF, 189
1349+ CD7B 04 BE        SunSqr8D:               DB $04, 190
1350+ CD7D FF BE                                DB $FF, 190
1351+ CD7F 81 BF        SunSqr8E:               DB $81, 191
1352+ CD81 FF BF                                DB $FF, 191
1353+ CD83 FF BF        SunSqr8F:               DB $FF, 191
1354+ CD85 00 C0        SunSqr90:               DB $00, 192
1355+ CD87 FF C0                                DB $FF, 192
1356+ CD89 81 C1        SunSqr91:               DB $81, 193
1357+ CD8B FF C1                                DB $FF, 193
1358+ CD8D FF C1        SunSqr92:               DB $FF, 193
1359+ CD8F 04 C2        SunSqr93:               DB $04, 194
1360+ CD91 FF C2                                DB $FF, 194
1361+ CD93 89 C3        SunSqr94:               DB $89, 195
1362+ CD95 FF C3                                DB $FF, 195
1363+ CD97 FF C3        SunSqr95:               DB $FF, 195
1364+ CD99 10 C4        SunSqr96:               DB $10, 196
1365+ CD9B FF C4                                DB $FF, 196
1366+ CD9D 99 C5        SunSqr97:               DB $99, 197
1367+ CD9F FF C5                                DB $FF, 197
1368+ CDA1 FF C5        SunSqr98:               DB $FF, 197
1369+ CDA3 24 C6        SunSqr99:               DB $24, 198
1370+ CDA5 FF C6                                DB $FF, 198
1371+ CDA7 B1 C7        SunSqr9A:               DB $B1, 199
1372+ CDA9 FF C7                                DB $FF, 199
1373+ CDAB FF C7        SunSqr9B:               DB $FF, 199
1374+ CDAD 40 C8        SunSqr9C:               DB $40, 200
1375+ CDAF FF C8                                DB $FF, 200
1376+ CDB1 D1 C9        SunSqr9D:               DB $D1, 201
1377+ CDB3 FF C9                                DB $FF, 201
1378+ CDB5 FF C9        SunSqr9E:               DB $FF, 201
1379+ CDB7 64 CA        SunSqr9F:               DB $64, 202
1380+ CDB9 FF CA                                DB $FF, 202
1381+ CDBB F9 CB        SunSqrA0:               DB $F9, 203
1382+ CDBD FF CB                                DB $FF, 203
1383+ CDBF FF CB        SunSqrA1:               DB $FF, 203
1384+ CDC1 90 CC        SunSqrA2:               DB $90, 204
1385+ CDC3 FF CC                                DB $FF, 204
1386+ CDC5 FF CC        SunSqrA3:               DB $FF, 204
1387+ CDC7 29 CD        SunSqrA4:               DB $29, 205
1388+ CDC9 FF CD                                DB $FF, 205
1389+ CDCB C4 CE        SunSqrA5:               DB $C4, 206
1390+ CDCD FF CE                                DB $FF, 206
1391+ CDCF FF CE        SunSqrA6:               DB $FF, 206
1392+ CDD1 61 CF        SunSqrA7:               DB $61, 207
1393+ CDD3 FF CF                                DB $FF, 207
1394+ CDD5 FF CF        SunSqrA8:               DB $FF, 207
1395+ CDD7 00 D0        SunSqrA9:               DB $00, 208
1396+ CDD9 FF D0                                DB $FF, 208
1397+ CDDB A1 D1        SunSqrAA:               DB $A1, 209
1398+ CDDD FF D1                                DB $FF, 209
1399+ CDDF FF D1        SunSqrAB:               DB $FF, 209
1400+ CDE1 44 D2        SunSqrAC:               DB $44, 210
1401+ CDE3 FF D2                                DB $FF, 210
1402+ CDE5 E9 D3        SunSqrAD:               DB $E9, 211
1403+ CDE7 FF D3                                DB $FF, 211
1404+ CDE9 FF D3        SunSqrAE:               DB $FF, 211
1405+ CDEB 90 D4        SunSqrAF:               DB $90, 212
1406+ CDED FF D4        SunSqrB0:               DB $FF, 212
1407+ CDEF 39 D5        SunSqrB1:               DB $39, 213
1408+ CDF1 FF D5                                DB $FF, 213
1409+ CDF3 E4 D6        SunSqrB2:               DB $E4, 214
1410+ CDF5 FF D6                                DB $FF, 214
1411+ CDF7 FF D6        SunSqrB3:               DB $FF, 214
1412+ CDF9 91 D7        SunSqrB4:               DB $91, 215
1413+ CDFB FF D7                                DB $FF, 215
1414+ CDFD FF D7        SunSqrB5:               DB $FF, 215
1415+ CDFF 40 D8        SunSqrB6:               DB $40, 216
1416+ CE01 FF D8                                DB $FF, 216
1417+ CE03 F1 D9        SunSqrB7:               DB $F1, 217
1418+ CE05 FF D9                                DB $FF, 217
1419+ CE07 FF D9        SunSqrB8:               DB $FF, 217
1420+ CE09 FF D9                                DB $FF, 217
1421+ CE0B A4 DA        SunSqrB9:               DB $A4, 218
1422+ CE0D FF DA        SunSqrBA:               DB $FF, 218 ; we can reuse SunSeqrBA as  $FF for B9 terminator as well as they have the same target
1423+ CE0F 59 DB        SunSqrBB:               DB $59, 219
1424+ CE11 FF DB                                DB $FF, 219
1425+ CE13 FF DB        SunSqrBC:               DB $FF, 219
1426+ CE15 10 DC        SunSqrBD:               DB $10, 220
1427+ CE17 FF DC                                DB $FF, 220
1428+ CE19 C9 DD        SunSqrBE:               DB $C9, 221
1429+ CE1B FF DD                                DB $FF, 221
1430+ CE1D FF DD        SunSqrBF:               DB $FF, 221
1431+ CE1F 84 DE        SunSqrC0:               DB $84, 222
1432+ CE21 FF DE                                DB $FF, 222
1433+ CE23 FF DE        SunSqrC1:               DB $FF, 222
1434+ CE25 41 DF        SunSqrC2:               DB $41, 223
1435+ CE27 FF DF                                DB $FF, 223
1436+ CE29 FF DF        SunSqrC3:               DB $FF, 223
1437+ CE2B 00 E0        SunSqrC4:               DB $00, 224
1438+ CE2D FF E0                                DB $FF, 224
1439+ CE2F C1 E1        SunSqrC5:               DB $C1, 225
1440+ CE31 FF E1                                DB $FF, 225
1441+ CE33 FF E1        SunSqrC6:               DB $FF, 225
1442+ CE35 84 E2        SunSqrC7:               DB $84, 226
1443+ CE37 FF E2        SunSqrC8:               DB $FF, 226
1444+ CE39 49 E3        SunSqrC9:               DB $49, 227
1445+ CE3B FF E3                                DB $FF, 227
1446+ CE3D FF E4        SunSqrCA:               DB $FF, 228
1447+ CE3F 10 E4        SunSqrCB:               DB $10, 228
1448+ CE41 FF E4                                DB $FF, 228
1449+ CE43 D9 E5        SunSqrCC:               DB $D9, 229
1450+ CE45 FF E5                                DB $FF, 229
1451+ CE47 FF E5        SunSqrCD:               DB $FF, 229
1452+ CE49 A4 E6        SunSqrCE:               DB $A4, 230
1453+ CE4B FF E6                                DB $FF, 230
1454+ CE4D FF E6        SunSqrCF:               DB $FF, 230
1455+ CE4F 71 E7        SunSqrD0:               DB $71, 231
1456+ CE51 FF E7                                DB $FF, 231
1457+ CE53 FF E7        SunSqrD1:               DB $FF, 231
1458+ CE55 40 E8        SunSqrD2:               DB $40, 232
1459+ CE57 FF E8                                DB $FF, 232
1460+ CE59 FF E8        SunSqrD3:               DB $FF, 232
1461+ CE5B 11 E9        SunSqrD4:               DB $11, 233
1462+ CE5D FF E9                                DB $FF, 233
1463+ CE5F E4 EA        SunSqrD5:               DB $E4, 234
1464+ CE61 FF EA                                DB $FF, 234
1465+ CE63 FF EA        SunSqrD6:               DB $FF, 234
1466+ CE65 B9 EB        SunSqrD7:               DB $B9, 235
1467+ CE67 FF EB                                DB $FF, 235
1468+ CE69 FF EB        SunSqrD8:               DB $FF, 235
1469+ CE6B 90 EC        SunSqrD9:               DB $90, 236
1470+ CE6D FF EC                                DB $FF, 236
1471+ CE6F FF EC        SunSqrDA:               DB $FF, 236
1472+ CE71 69 ED        SunSqrDB:               DB $69, 237
1473+ CE73 FF ED                                DB $FF, 237
1474+ CE75 FF ED        SunSqrDC:               DB $FF, 237
1475+ CE77 44 EE        SunSqrDD:               DB $44, 238
1476+ CE79 FF EE        SunSqrDE:               DB $FF, 238
1477+ CE7B 21 EF        SunSqrDF:               DB $21, 239
1478+ CE7D FF EF                                DB $FF, 239
1479+ CE7F 00 F0        SunSqrE0:               DB $00, 240
1480+ CE81 FF F0                                DB $FF, 240
1481+ CE83 00 F0        SunSqrE1:               DB $00, 240
1482+ CE85 FF F0                                DB $FF, 240
1483+ CE87 E1 F1        SunSqrE2:               DB $E1, 241
1484+ CE89 FF F1                                DB $FF, 241
1485+ CE8B E1 F1        SunSqrE3:               DB $E1, 241
1486+ CE8D FF F1                                DB $FF, 241
1487+ CE8F C4 F2        SunSqrE4:               DB $C4, 242
1488+ CE91 FF F2                                DB $FF, 242
1489+ CE93 FF F2        SunSqrE5:               DB $FF, 242
1490+ CE95 A9 F3        SunSqrE6:               DB $A9, 243
1491+ CE97 FF F3                                DB $FF, 243
1492+ CE99 FF F3        SunSqrE7:               DB $FF, 243
1493+ CE9B FF F3                                DB $FF, 243
1494+ CE9D 90 F3        SunSqrE8:               DB $90, 243
1495+ CE9F FF F4                                DB $FF, 244
1496+ CEA1 FF F4        SunSqrE9:               DB $FF, 244
1497+ CEA3 79 F5        SunSqrEA:               DB $79, 245
1498+ CEA5 FF F5                                DB $FF, 245
1499+ CEA7 FF F5        SunSqrEB:               DB $FF, 245
1500+ CEA9 64 F6        SunSqrEC:               DB $64, 246
1501+ CEAB FF F6        SunSqrED:               DB $FF, 246
1502+ CEAD 51 F7        SunSqrEE:               DB $51, 247
1503+ CEAF FF F7                                DB $FF, 247
1504+ CEB1 FF F7        SunSqrEF:               DB $FF, 247
1505+ CEB3 40 F8        SunSqrF0:               DB $40, 248
1506+ CEB5 FF F8        SunSqrF1:               DB $FF, 248
1507+ CEB7 31 F9        SunSqrF2:               DB $31, 249
1508+ CEB9 FF F9                                DB $FF, 249
1509+ CEBB FF F9        SunSqrF3:               DB $FF, 249
1510+ CEBD 24 FA        SunSqrF4:               DB $24, 250
1511+ CEBF FF FA                                DB $FF, 250
1512+ CEC1 FF FA        SunSqrF5:               DB $FF, 250
1513+ CEC3 19 FB        SunSqrF6:               DB $19, 251
1514+ CEC5 FF FB                                DB $FF, 251
1515+ CEC7 FF FB        SunSqrF7:               DB $FF, 251
1516+ CEC9 10 FC        SunSqrF8:               DB $10, 252
1517+ CECB FF FC                                DB $FF, 252
1518+ CECD FF FC        SunSqrF9:               DB $FF, 252
1519+ CECF 09 FD        SunSqrFA:               DB $09, 253
1520+ CED1 FF FD                                DB $FF, 253
1521+ CED3 FF FD        SunSqrFB:               DB $FF, 253
1522+ CED5 04 FE        SunSqrFC:               DB $04, 254
1523+ CED7 FF FE                                DB $FF, 254
1524+ CED9 FF FE        SunSqrFD:               DB $FF, 254
1525+ CEDB 01 FF        SunSqrFE:               DB $01, 255
1526+ CEDD FF FF        SunSqrFF:               DB $FF, 255
1527+ CEDF
1528+ CEDF
1529+ CEDF
1530+ CEDF              SunBankSize  EQU $ - StartOfSun
1531+ CEDF
1532+ CEDF
# file closed: ./Universe/Sun/sun_data.asm
1501  CEDF
1502  CEDF              ; Bank 84  ------------------------------------------------------------------------------------------------------------------------
1503  CEDF                  SLOT    PlanetBankAddr
1504  CEDF                  PAGE    BankPlanetData
1505  CEDF              	ORG	    PlanetBankAddr,BankPlanetData
1506  C000                  ;TODO INCLUDE "./Universe/planet_data.asm"
1507  C000
1508  C000                  SLOT    GalaxyDataAddr
1509  C000                  PAGE    BankGalaxyData1
1510  C000              	ORG GalaxyDataAddr, BankGalaxyData1
1511  E000 FF           GALAXYDATABlock1         DB $FF
1512  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1513  0000
1514  0000                  SLOT    GalaxyDataAddr
1515  0000                  PAGE    BankGalaxyData2
1516  0000              	ORG GalaxyDataAddr, BankGalaxyData2
1517  E000 FF           GALAXYDATABlock2         DB $FF
1518  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1519  0000                  SLOT    GalaxyDataAddr
1520  0000                  PAGE    BankGalaxyData3
1521  0000              	ORG GalaxyDataAddr, BankGalaxyData3
1522  E000 FF           GALAXYDATABlock3         DB $FF
1523  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1524  0000                  SLOT    GalaxyDataAddr
1525  0000                  PAGE    BankGalaxyData4
1526  0000              	ORG GalaxyDataAddr, BankGalaxyData4
1527  E000 FF           GALAXYDATABlock4         DB $FF
1528  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1529  0000                  SLOT    GalaxyDataAddr
1530  0000                  PAGE    BankGalaxyData5
1531  0000              	ORG GalaxyDataAddr,BankGalaxyData5
1532  E000 FF           GALAXYDATABlock5         DB $FF
1533  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1534  0000                  SLOT    GalaxyDataAddr
1535  0000                  PAGE    BankGalaxyData6
1536  0000              	ORG GalaxyDataAddr,BankGalaxyData6
1537  E000 FF           GALAXYDATABlock6         DB $FF
1538  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1539  0000                  SLOT    GalaxyDataAddr
1540  0000                  PAGE    BankGalaxyData7
1541  0000              	ORG GalaxyDataAddr,BankGalaxyData7
1542  E000 FF           GALAXYDATABlock7         DB $FF
1543  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1544  0000
1545  0000
1546  0000
1547  0000
1548  0000                  SAVENEX OPEN "EliteN.nex", $8000 , $7F00
1549  0000                  SAVENEX CFG  0,0,0,1
1550  0000                  SAVENEX AUTO
1551  0000                  SAVENEX CLOSE
1552  0000
# file closed: eliteNext.asm
