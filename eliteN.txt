# file opened: eliteNext.asm
   1  0000               DEVICE ZXSPECTRUMNEXT
   2  0000               DEFINE  DOUBLEBUFFER 1
   3  0000               ;DEFINE  LOGMATHS     1
   4  0000               ;DEFINE  DIAGSPRITES 1
   5  0000               CSPECTMAP eliteN.map
   6  0000               OPT --zxnext=cspect --syntax=a --reversepop
   7  0000
   8  0000              DEBUGSEGSIZE   equ 1
   9  0000              DEBUGLOGSUMMARY equ 1
  10  0000              ;DEBUGLOGDETAIL equ 1
  11  0000
  12  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  13  0000              ; Game Defines
  14  0000              ScreenLocal      EQU 0
  15  0000              ScreenGalactic   EQU ScreenLocal + 1
  16  0000              ScreenMarket     EQU ScreenGalactic + 1
  17  0000              ScreenMarketDsp  EQU ScreenMarket + 1
  18  0000              ScreenStatus     EQU ScreenMarketDsp + 1
  19  0000              ScreenInvent     EQU ScreenStatus + 1
  20  0000              ScreenPlanet     EQU ScreenInvent + 1
  21  0000              ScreenEquip      EQU ScreenPlanet + 1
  22  0000              ScreenLaunch     EQU ScreenEquip + 1
  23  0000              ScreenFront      EQU ScreenLaunch + 1
  24  0000              ScreenAft        EQU ScreenFront+1
  25  0000              ScreenLeft       EQU ScreenAft+1
  26  0000              ScreenRight      EQU ScreenLeft+1
  27  0000              ScreenDocking    EQU ScreenRight+1
  28  0000              ScreenHyperspace EQU ScreenDocking+1
  29  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  30  0000              ; Colour Defines
  31  0000                  INCLUDE "./Hardware/L2ColourDefines.asm"
# file opened: ./Hardware/L2ColourDefines.asm
   1+ 0000              L2ColourBLACK           EQU   0
   2+ 0000              L2ColourRED_1           EQU 224                 ; RGB 255,  0,  0
   3+ 0000              L2ColourRED_2           EQU 192                 ; RGB 218,  0,  0
   4+ 0000              L2ColourRED_3           EQU 160                 ; RGB 182,  0,  0
   5+ 0000              L2ColourRED_4           EQU 128                 ; RGB 145,  0,  0
   6+ 0000              L2ColourRED_5           EQU  96                 ; RGB 109,  0,  0
   7+ 0000              L2ColourRED_6           EQU  64                 ; RGB  72,  0,  0
   8+ 0000              L2ColourRED_7           EQU  32                 ; RGB  36,  0,  0
   9+ 0000              L2ColourYELLOW_1        EQU 252                 ; RGB 255,255,  0
  10+ 0000              L2ColourYELLOW_2        EQU 216                 ; RGB 218,218,  0
  11+ 0000              L2ColourYELLOW_3        EQU 180                 ; RGB 182,182,  0
  12+ 0000              L2ColourYELLOW_4        EQU 144                 ; RGB 145,145,  0
  13+ 0000              L2ColourYELLOW_5        EQU 108                 ; RGB 109.109,  0
  14+ 0000              L2ColourYELLOW_6        EQU  72                 ; RGB  72, 72,  0
  15+ 0000              L2ColourYELLOW_7        EQU  36                 ; RGB  36, 36,  0
  16+ 0000              L2ColourGREEN_1		    EQU  28                 ; RGB   0,255,  0
  17+ 0000              L2ColourGREEN_2		    EQU  24                 ; RGB   0,218,  0
  18+ 0000              L2ColourGREEN_3		    EQU  16                 ; RGB   0,145,  0
  19+ 0000              L2ColourGREEN_4         EQU  12                 ; RGB   0,109,  0
  20+ 0000              L2ColourGREEN_5         EQU   8                 ; RGB   0, 72,  0
  21+ 0000              L2ColourGREEN_6         EQU   4                 ; RGB   0, 36,  0
  22+ 0000              L2ColourBLUE_1          EQU   3                 ; RGB 0,0,255
  23+ 0000              L2ColourBLUE_2          EQU   2                 ; RGB 0,0,170
  24+ 0000              L2ColourBLUE_3          EQU   1                 ; RGB 0,0,85
  25+ 0000
  26+ 0000
  27+ 0000              L2ColourWHITE_1         EQU 255                 ; RGB 255,255,255
  28+ 0000              L2ColourWHITE_2         EQU 146
  29+ 0000              L2ColourGREY_1		    EQU L2ColourWHITE_2
  30+ 0000              L2ColourGREY_2		    EQU 109
  31+ 0000              L2ColourGREY_3		    EQU  73
  32+ 0000              L2ColourGREY_4		    EQU  37
  33+ 0000
  34+ 0000              L2ColourGREEN_MB        EQU  29                 ;RGB 0,255,85
  35+ 0000              L2ColourGREEN_MR        EQU 124                 ;RGB 109.255,0
  36+ 0000              L2ColourCREAM_1         EQU 218                 ; RGB 218,218,170
  37+ 0000              L2ColourCREAM_2         EQU 182                 ; RGB 182,182,170
  38+ 0000              L2ColourCREAM_3         EQU 146                 ; RGB 145,145,170
  39+ 0000
  40+ 0000              L2ColourTRANSPARENT     EQU 227                 ; RGB 255,  0,255
  41+ 0000              L2ColourMAGENTA_1       EQU 162                 ; RGB 182,  0,170
  42+ 0000              L2ColourMAGENTA_2       EQU 130                 ; RGB 145,  0,170
  43+ 0000              L2ColourMAGENTA_3       EQU  97                 ; RGB 109,  0, 85
  44+ 0000              L2ColourMAGENTA_4       EQU  65                 ; RGB  72,  0, 85
  45+ 0000              L2ColourORANGE_1        EQU 236                 ; RGB
  46+ 0000              L2ColourORANGE_2        EQU 168                 ; RGB
  47+ 0000              L2ColourORANGE_3        EQU  68                 ; RGB
  48+ 0000              L2ColourCYAN_1          EQU  31                 ; RGB   0,255, 255
  49+ 0000              L2ColourCYAN_2          EQU  18                 ; RGB
  50+ 0000              L2ColourCYAN_3          EQU   9                 ; RGB
  51+ 0000              L2ColourPURPLE_1        EQU 109                 ; RGB
  52+ 0000              L2ColourPURPLE_2        EQU  66                 ; RGB
  53+ 0000              L2ColourPURPLE_3        EQU  33                 ; RGB
  54+ 0000              L2ColourPINK_1		    EQU 231                 ; RGB
  55+ 0000              L2ColourPINK_2		    EQU 226                 ; RGB
  56+ 0000              L2ColourPINK_3		    EQU 225                 ; RGB
  57+ 0000              L2ColourPINK_4		    EQU 224                 ; RGB
  58+ 0000
# file closed: ./Hardware/L2ColourDefines.asm
  32  0000                  INCLUDE "./Hardware/L1ColourDefines.asm"
# file opened: ./Hardware/L1ColourDefines.asm
   1+ 0000
   2+ 0000              L1ColourInkBlack        EQU %00000000
   3+ 0000              L1ColourInkBlue         EQU %00000001
   4+ 0000              L1ColourInkRed          EQU %00000010
   5+ 0000              L1ColourInkMagenta      EQU %00000011
   6+ 0000              L1ColourInkGreen        EQU %00000100
   7+ 0000              L1ColourInkCyan         EQU %00000101
   8+ 0000              L1ColourInkYellow       EQU %00000110
   9+ 0000              L1ColourInkWhite        EQU %00000111
  10+ 0000              L1ColourPaperBlack      EQU %00000000
  11+ 0000              L1ColourPaperBlue       EQU %00001000
  12+ 0000              L1ColourPaperRed        EQU %00010000
  13+ 0000              L1ColourPaperMagenta    EQU %00011000
  14+ 0000              L1ColourPaperGreen      EQU %00100000
  15+ 0000              L1ColourPaperCyan       EQU %00101000
  16+ 0000              L1ColourPaperYellow     EQU %00110000
  17+ 0000              L1ColourPaperWhite      EQU %00111000
  18+ 0000              L1ColourFlash           EQU %10000000
  19+ 0000              L1ColourBright          EQU %01000000
  20+ 0000              ;----------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              ; Screen Specific Colour Defines
  22+ 0000              L1InvHighlight          EQU L1ColourBright | L1ColourPaperRed   | L1ColourInkYellow
  23+ 0000              L1InvLowlight           EQU                  L1ColourPaperBlack | L1ColourInkWhite
# file closed: ./Hardware/L1ColourDefines.asm
  33  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  34  0000              ; Total screen list
  35  0000              ; Local Chart
  36  0000              ; Galactic Chart
  37  0000              ; Market Prices
  38  0000              ; Inventory
  39  0000              ; Comander status
  40  0000              ; System Data
  41  0000              ; Mission Briefing
  42  0000              ; missio completion
  43  0000              ; Docked  Menu (only place otehr than pause you can load and save)
  44  0000              ; Pause Menu (only place you can load from )
  45  0000              ; byint and selling equipment
  46  0000              ; bying and selling stock
  47  0000
  48  0000                                      INCLUDE "./Hardware/register_defines.asm"
# file opened: ./Hardware/register_defines.asm
   1+ 0000              IO_LAYER2_PORT                          EQU $123B
   2+ 0000              IO_EXT_BANK_PORT 			            EQU $DFFD ; 57341
   3+ 0000              IO_BANK_PORT                            EQU $7FFD ; 32765
   4+ 0000              REGISTER_NUMBER_PORT					EQU $243B
   5+ 0000              REGISTER_VALUE_PORT						EQU $253B
   6+ 0000              SPRITE_SLOT_PORT						EQU $303B ; port for sprite and pattern index
   7+ 0000              SPRITE_INFO_PORT                        EQU $0057
   8+ 0000              SPRITE_PATTERN_UPLOAD_PORT				EQU $005B
   9+ 0000
  10+ 0000              MACHINE_ID_REGISTER						EQU 0
  11+ 0000              VERSION_REGISTER						EQU 1
  12+ 0000              RESET_REGISTER		    				EQU 2
  13+ 0000              MACHINE_TYPE_REGISTER					EQU 3
  14+ 0000              PAGE_RAM_REGISTER						EQU 4
  15+ 0000              PERIPHERAL_1_REGISTER					EQU 5
  16+ 0000              PERIPHERAL_2_REGISTER					EQU 6
  17+ 0000              TURBO_MODE_REGISTER						EQU 7
  18+ 0000              PERIPHERAL_3_REGISTER					EQU 8
  19+ 0000              ANTI_BRICK_SYSTEM_REGISTER				EQU 10
  20+ 0000              LAYER2_RAM_PAGE_REGISTER				EQU 18
  21+ 0000              LAYER2_RAM_SHADOW_REGISTER      		EQU 19
  22+ 0000              TRANSPARENCY_COLOUR_REGISTER			EQU 20
  23+ 0000              SPRITE_LAYERS_SYSTEM_REGISTER			EQU 21
  24+ 0000              LAYER2_OFFSET_X_REGISTER				EQU 22
  25+ 0000              LAYER2_OFFSET_Y_REGISTER				EQU 23
  26+ 0000              CLIP_WINDOW_LAYER2_REGISTER				EQU 24
  27+ 0000              CLIP_WINDOW_SPRITES_REGISTER			EQU 25
  28+ 0000              CLIP_WINDOW_ULA_REGISTER				EQU 26
  29+ 0000              CLIP_WINDOW_CONTROL_REGISTER			EQU 28
  30+ 0000              ACTIVE_VIDEO_LINE_MSB_REGISTER			EQU 30
  31+ 0000              ACTIVE_VIDEO_LINE_LSB_REGISTER			EQU 31
  32+ 0000              LINE_INTERRUPT_CONTROL_REGISTER			EQU 34
  33+ 0000              LINE_INTERRUPT_VALUE_LSB_REGISTER		EQU 35
  34+ 0000              KEYMAP_HIGH_ADDRESS_REGISTER			EQU 40
  35+ 0000              KEYMAP_LOW_ADDRESS_REGISTER				EQU 41
  36+ 0000              KEYMAP_HIGH_DATA_REGISTER				EQU 42
  37+ 0000              KEYMAP_LOW_DATA_REGISTER				EQU 43
  38+ 0000              DAC_B_MIRROR_REGISTER                   EQU 44
  39+ 0000              DAC_AB_MIRROR_REGISTER                  EQU 45
  40+ 0000              DAC_C_MORROR_REGISTER                   EQU 46
  41+ 0000              TILEMAP_OFFSET_XMSB_REGISTER            EQU 47
  42+ 0000              TILEMAP_OFFSET_XLSB_REGISTER            EQU 48
  43+ 0000              TILEMAP_OFFSET_YMSB_REGISTER            EQU 49
  44+ 0000              LORES_OFFSET_X_REGISTER					EQU 50
  45+ 0000              LORES_OFFSET_Y_REGISTER					EQU 51
  46+ 0000              SPRITE_PORT_INDEX_REGISTER              EQU 52
  47+ 0000              SPRITE_PORT_ATTR0_REGISTER              EQU 53
  48+ 0000              SPRITE_PORT_ATTR1_REGISTER              EQU 54
  49+ 0000              SPRITE_PORT_ATTR2_REGISTER              EQU 55
  50+ 0000              SPRITE_PORT_ATTR3_REGISTER              EQU 56
  51+ 0000              SPRITE_PORT_ATTR4_REGISTER              EQU 57
  52+ 0000              PALETTE_INDEX_REGISTER					EQU 64
  53+ 0000              PALETTE_VALUE_8BIT_REGISTER				EQU 65
  54+ 0000              PALETTE_FORMAT_REGISTER					EQU 66
  55+ 0000              PALETTE_CONTROL_REGISTER				EQU 67
  56+ 0000              PALETTE_VALUE_9BIT_REGISTER				EQU 68
  57+ 0000              MMU_SLOT_0_REGISTER						EQU 80
  58+ 0000              MMU_SLOT_1_REGISTER						EQU 81
  59+ 0000              MMU_SLOT_2_REGISTER						EQU 82
  60+ 0000              MMU_SLOT_3_REGISTER						EQU 83
  61+ 0000              MMU_SLOT_4_REGISTER						EQU 84
  62+ 0000              MMU_SLOT_5_REGISTER						EQU 85
  63+ 0000              MMU_SLOT_6_REGISTER						EQU 86
  64+ 0000              MMU_SLOT_7_REGISTER						EQU 87
  65+ 0000              COPPER_DATA_REGISTER					EQU 96
  66+ 0000              COPPER_CONTROL_LOW_REGISTER				EQU 97
  67+ 0000              COPPER_CONTROL_HIGH_REGISTER			EQU 98
  68+ 0000              DISPLAY_CONTROL_1_REGISTER              EQU 105
  69+ 0000              LAYER_2_CONTROL_REGISTER                EQU 112
  70+ 0000              LAYER_2_X_OFFSET_MSB_REGISTER           EQU 113
  71+ 0000              DEBUG_LEDS_REGISTER						EQU 255
  72+ 0000
  73+ 0000
  74+ 0000              GetNextReg:	MACRO register
  75+ 0000 ~                        push bc
  76+ 0000 ~                            ld bc,$243B
  77+ 0000 ~                                ld a,register
  78+ 0000 ~                                out (c),a
  79+ 0000 ~                                inc b
  80+ 0000 ~                            in a,(c)
  81+ 0000 ~                        pop bc
  82+ 0000                          ENDM
  83+ 0000
# file closed: ./Hardware/register_defines.asm
  49  0000                                      INCLUDE "./Layer2Graphics/layer2_defines.asm"
# file opened: ./Layer2Graphics/layer2_defines.asm
   1+ 0000
   2+ 0000
   3+ 0000              LAYER2_SHIFTED_SCREEN_TOP  	 equ 0
   4+ 0000              LAYER2_SHIFTED_SCREEN_MIDDLE equ $40
   5+ 0000              LAYER2_SHIFTED_SCREEN_BOTTOM equ $80
   6+ 0000
   7+ 0000              ; note hi byte is not decoded on DMA port so can out OUTIR
   8+ 0000              IO_DATAGEAR_DMA_PORT 		 equ 107
   9+ 0000              IO_SPRITE_SLOT_PORT 		 equ 12347
  10+ 0000              IO_SPRITE_PATTERN_PORT       equ 91
  11+ 0000              IO_SPRITE_ATTRIBUTES_PORT    equ 87
  12+ 0000
  13+ 0000              LAYER2_VISIBLE_MASK 		equ $02
  14+ 0000              ; DEBUG 0 for always write to primary 08 for double buffering
  15+ 0000                  IFDEF DOUBLEBUFFER
  16+ 0000              LAYER2_SHADOW_SCREEN_MASK 	equ $08
  17+ 0000                  ELSE
  18+ 0000 ~            LAYER2_SHADOW_SCREEN_MASK 	equ $00
  19+ 0000                  ENDIF
  20+ 0000              LAYER2_READ_ENABLE_MASK 	equ %00000100
  21+ 0000              LAYER2_WRITE_ENABLE_MASK 	equ %00000001
  22+ 0000              LAYER2_READ_WRITE_MASK      equ %00000101
  23+ 0000              LAYER2_SCREEN_SECTION_MASK 	equ $03
  24+ 0000              LAYER2_SCREEN_SECTION_SHIFT equ 6
  25+ 0000
  26+ 0000              LAYER2_DISABLE_MEM_WRITE    equ %11111110
  27+ 0000              LAYER2_DISABLE_MEM_READ     equ %11111011
  28+ 0000              LAYER2_DISABLE_MEM_ACCESS   equ %11111010
  29+ 0000
  30+ 0000              LAYER2_SCREEN_BANK1          equ 8
  31+ 0000              LAYER2_SCREEN_BANK2          equ 9
  32+ 0000              LAYER2_SCREEN_BANK3          equ 10
  33+ 0000              LAYER2_SHADOW_BANK1          equ 11
  34+ 0000              LAYER2_SHADOW_BANK2          equ 12
  35+ 0000              LAYER2_SHADOW_BANK3          equ 13
  36+ 0000
  37+ 0000              SCREEN_HEIGHT 				 equ 192
  38+ 0000              SCREEN_RAM_BASE				 equ $0000
  39+ 0000              SCREEN_HOZ_MIN_PIX		     equ 10
  40+ 0000
  41+ 0000              SPRITES_VISIBLE_MASK         equ $01
  42+ 0000              SPRITES_ON_BORDER_MASK       equ $02
  43+ 0000              LAYER_PRIORITIES_MASK        equ $07
  44+ 0000              LORES_MODE_MASK              equ $80
  45+ 0000              LAYER_PRIORITIES_SHIFT       equ 2
  46+ 0000
  47+ 0000              LAYER_PRIORITIES_S_L_U 		equ 0
  48+ 0000              LAYER_PRIORITIES_L_S_U 		equ 1
  49+ 0000              LAYER_PRIORITIES_S_U_L  	equ 2
  50+ 0000              LAYER_PRIORITIES_L_U_S 		equ 3
  51+ 0000              LAYER_PRIORITIES_U_S_L 		equ 4
  52+ 0000              LAYER_PRIORITIES_U_L_S 		equ 5
  53+ 0000
  54+ 0000              DMA_WRO_BLOCK_PORTA_A2B_XFR  equ $7D
  55+ 0000              DMA_WRO_BLOCK_PORTA_B2A_XFR  equ $79
  56+ 0000              DMA_WR1_P1FIXED_MEMORY       equ $24
  57+ 0000              DMA_WR1_P1DEC_MEMORY         equ $04
  58+ 0000              DMA_WR1_P1INC_MEMORY         equ $14
  59+ 0000              DMA_WR2_P2FIXED_MEMORY       equ $20
  60+ 0000              DMA_WR2_P2DEC_MEMORY         equ $00
  61+ 0000              DMA_WR2_P2INC_MEMORY         equ $10
  62+ 0000              DMA_WR4_CONT_MODE            equ $AD
  63+ 0000              DMA_RESET                    equ $c3
  64+ 0000              DMA_RESET_PORT_A_TIMING      equ $c7
  65+ 0000              DMA_RESET_PORT_B_TIMING      equ $cb
  66+ 0000              DMA_LOAD                     equ $cf
  67+ 0000              DMA_CONTINUE                 equ $d3
  68+ 0000              DMA_DISABLE_INTERUPTS        equ $af
  69+ 0000              DMA_ENABLE_INTERUPTS         equ $ab
  70+ 0000              DMA_RESET_DISABLE_INTERUPTS  equ $a3
  71+ 0000              DMA_ENABLE_AFTER_RETI        equ $b7
  72+ 0000              DMA_READ_STATUS_BYTE         equ $bf
  73+ 0000              DMA_REINIT_STATUS_BYTE       equ $8b
  74+ 0000              DMA_START_READ_SEQUENCE      equ $a7
  75+ 0000              DMA_FORCE_READY              equ $b3
  76+ 0000              DMA_STOP_AT_END			     equ $82
  77+ 0000              DMA_DISABLE                  equ $83
  78+ 0000              DMA_ENABLE                   equ $87
  79+ 0000              DMA_WRITE_REGISTER_COMMAND   equ $bb
  80+ 0000              DMA_BURST                    equ $cd
  81+ 0000              DMA_CONTINUOUS               equ $ad
  82+ 0000              ZXN_DMA_PORT                 equ $6b
  83+ 0000
  84+ 0000
  85+ 0000              COLOUR_TRANSPARENT			 equ $E3
  86+ 0000
  87+ 0000
  88+ 0000
  89+ 0000
# file closed: ./Layer2Graphics/layer2_defines.asm
  50  0000                                      INCLUDE	"./Hardware/memory_bank_defines.asm"
# file opened: ./Hardware/memory_bank_defines.asm
   1+ 0000
   2+ 0000              membanksize			    equ	$1FFF
   3+ 0000
   4+ 0000              StartOfBank     	    equ $0000
   5+ 0000
   6+ 0000              membank0 			    equ $0000
   7+ 0000              dmaCopySrcAddr		    equ	$0000
   8+ 0000              MathsTablesAddr         equ $0000
   9+ 0000              membank1 			    equ $2000
  10+ 0000              membank2 			    equ $4000
  11+ 0000              membank3 			    equ $6000
  12+ 0000              membank4 			    equ $8000
  13+ 0000              membank5 			    equ $a000
  14+ 0000              membank6 			    equ $c000
  15+ 0000              ScreenBank              equ $c000
  16+ 0000              MenuGalChtAddr          equ $c000
  17+ 0000              MenuEquipSAddr          equ $c000
  18+ 0000              MenuInventAddr          equ $c000
  19+ 0000              MenuMarketAddr          equ $c000
  20+ 0000              DispMarketAddr          equ $c000
  21+ 0000              MenuShrChtAddr          equ $c000
  22+ 0000              MenuStatusAddr          equ $c000
  23+ 0000              MenuSystemAddr          equ $c000
  24+ 0000              ViewFrontAddr           equ $c000
  25+ 0000              SunBankAddr             equ $c000
  26+ 0000              PlanetBankAddr          equ $c000
  27+ 0000              UniverseBankAddr	    equ $c000
  28+ 0000              LaunchShipAddr          equ $c000
  29+ 0000              membank7 			    equ $e000
  30+ 0000              L1membankAddr   	    equ $e000
  31+ 0000              L2membankAddr   	    equ $e000
  32+ 0000              ShipModelsAddr	        equ $e000
  33+ 0000              SpritemembankAddr       equ $e000
  34+ 0000              ResetUniverseAddr       equ $e000
  35+ 0000              StockTableAddr	        equ $e000
  36+ 0000              CommanderAddr           equ $e000
  37+ 0000              LAYER2Addr              equ $e000
  38+ 0000              LAYER1Addr              equ $e000
  39+ 0000              SPRITEAddr              equ $e000
  40+ 0000              ConsoleImageAddr        equ $e000
  41+ 0000              GalaxyDataAddr          equ $e000
  42+ 0000
  43+ 0000              EXSDOSMMU0              equ MMU_SLOT_0_REGISTER
  44+ 0000              MathsTablesMMU          equ MMU_SLOT_0_REGISTER
  45+ 0000              ShipReadMMU             equ MMU_SLOT_0_REGISTER
  46+ 0000              DMACpySourceMMU		    equ	MMU_SLOT_0_REGISTER
  47+ 0000              EXSDOSMMU1              equ MMU_SLOT_1_REGISTER
  48+ 0000              SunMMU 		            equ MMU_SLOT_6_REGISTER
  49+ 0000              PlanetMMU 		        equ MMU_SLOT_6_REGISTER
  50+ 0000              UniverseMMU 		    equ MMU_SLOT_6_REGISTER
  51+ 0000              ScreenBankMMU           equ MMU_SLOT_6_REGISTER
  52+ 0000              MenuEquipSMMU           equ MMU_SLOT_6_REGISTER
  53+ 0000              MenuShrChtMMU           equ MMU_SLOT_6_REGISTER
  54+ 0000              MenuGalChtMMU           equ MMU_SLOT_6_REGISTER
  55+ 0000              MenuInventMMU           equ MMU_SLOT_6_REGISTER
  56+ 0000              MenuSystemMMU           equ MMU_SLOT_6_REGISTER
  57+ 0000              MenuMarketMMU           equ MMU_SLOT_6_REGISTER
  58+ 0000              DispMarketMMU           equ MMU_SLOT_6_REGISTER
  59+ 0000              MenuStatusMMU           equ MMU_SLOT_6_REGISTER
  60+ 0000              LaunchShipMMU           equ MMU_SLOT_6_REGISTER
  61+ 0000              L1memMMU       		    equ MMU_SLOT_7_REGISTER
  62+ 0000              L2memMMU       		    equ MMU_SLOT_7_REGISTER
  63+ 0000              SpritememMMU   		    equ MMU_SLOT_7_REGISTER
  64+ 0000              ShipModelMMU  		    equ MMU_SLOT_7_REGISTER
  65+ 0000              ResetUniverseMMU	    equ MMU_SLOT_7_REGISTER
  66+ 0000              CommanderMMU	        equ MMU_SLOT_7_REGISTER
  67+ 0000              StockTableMMU		    equ MMU_SLOT_7_REGISTER
  68+ 0000              ConsoleImageDataMMU	    equ MMU_SLOT_7_REGISTER
  69+ 0000              GalaxyDataMMU	        equ MMU_SLOT_7_REGISTER
  70+ 0000
  71+ 0000              BankResetUniv           equ 49
  72+ 0000              BankMenuShrCht          equ 50
  73+ 0000              BankMenuGalCht          equ 51
  74+ 0000              BankMenuInvent          equ 52
  75+ 0000              BankMenuSystem          equ 53
  76+ 0000              BankMenuMarket          equ 54
  77+ 0000              BankStockTable          equ 55
  78+ 0000              BankCommander           equ 56
  79+ 0000              BankLAYER2              equ 57
  80+ 0000              BankLAYER1              equ 58
  81+ 0000              BankShipModels1         equ 59
  82+ 0000              BankSPRITE              equ 60
  83+ 0000              BankConsole             equ 61
  84+ 0000              BankFrontView           equ 62
  85+ 0000              BankMenuStatus          equ 63
  86+ 0000              BankMenuEquipS          equ 64
  87+ 0000              BankLaunchShip          equ 65
  88+ 0000              BankDispMarket          equ 66
  89+ 0000              BankShipModels2         equ 67
  90+ 0000              BankShipModels3         equ 68
  91+ 0000              BankShipModels4         equ 69
  92+ 0000
  93+ 0000              BankUNIVDATA0           equ 70
  94+ 0000              BankUNIVDATA1           equ 71
  95+ 0000              BankUNIVDATA2           equ 72
  96+ 0000              BankUNIVDATA3           equ 73
  97+ 0000              BankUNIVDATA4           equ 74
  98+ 0000              BankUNIVDATA5           equ 75
  99+ 0000              BankUNIVDATA6           equ 76
 100+ 0000              BankUNIVDATA7           equ 77
 101+ 0000              BankUNIVDATA8           equ 78
 102+ 0000              BankUNIVDATA9           equ 79
 103+ 0000              BankUNIVDATA10          equ 80
 104+ 0000              BankUNIVDATA11          equ 81
 105+ 0000              BankUNIVDATA12          equ 82
 106+ 0000              BankSunData             equ 83
 107+ 0000              BankPlanetData          equ 84
 108+ 0000
 109+ 0000              BankGalaxyData0         equ 91
 110+ 0000              BankGalaxyData1         equ 92
 111+ 0000              BankGalaxyData2         equ 93
 112+ 0000              BankGalaxyData3         equ 94
 113+ 0000              BankGalaxyData4         equ 95
 114+ 0000              BankGalaxyData5         equ 96
 115+ 0000              BankGalaxyData6         equ 97
 116+ 0000              BankGalaxyData7         equ 98
 117+ 0000
 118+ 0000              BankMathsTables         equ 99
 119+ 0000
 120+ 0000              BankROM                 equ 255
 121+ 0000
# file closed: ./Hardware/memory_bank_defines.asm
  51  0000                                      INCLUDE "./Hardware/screen_equates.asm"
# file opened: ./Hardware/screen_equates.asm
   1+ 0000              ScreenHeight 		equ 192
   2+ 0000              ScreenLastRow       equ ScreenHeight -1
   3+ 0000              ScreenWidth  		equ 256
   4+ 0000              ScreenLastCol       equ ScreenWidth -1
   5+ 0000              ScreenHeightHalf	equ 96
   6+ 0000              ScreenWidthHalf  	equ 128
   7+ 0000              ScreenCenterY		equ 96
   8+ 0000              ScreenCenterX       equ 128
   9+ 0000              ViewHeight          equ 128
  10+ 0000              ViewHeightPlus1     equ 128+1
  11+ 0000              ViewLastRow       	equ ViewHeight -1
  12+ 0000              ViewWidth  			equ 256
  13+ 0000              ViewLastCol         equ ViewWidth -1
  14+ 0000              ViewHeightHalf      equ 63
  15+ 0000              ViewWidthHalf       equ 127
  16+ 0000              ViewCenterY         equ 64
  17+ 0000              ViewCenterX         equ 128
  18+ 0000              ShipColour			equ $FF		; place holder for debugging TODO
  19+ 0000              ScreenL1Bottom      equ $5000
  20+ 0000              ScreenL1BottomLen   equ 32 * 8 * 8
  21+ 0000              ScreenL1AttrBtm     equ $5A00
  22+ 0000              ScreenL1AttrBtmLen  equ 32 * 8
  23+ 0000
# file closed: ./Hardware/screen_equates.asm
  52  0000                                      INCLUDE "./Data/ShipModelEquates.asm"
# file opened: ./Data/ShipModelEquates.asm
   1+ 0000              ScoopDebrisOffset	    equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   2+ 0000              MissileLockLoOffset	    equ 1
   3+ 0000              MissileLockHiOffset	    equ 2
   4+ 0000              EdgeAddyOffset		    equ 3
   5+ 0000              LineX4Offset		    equ 5
   6+ 0000              GunVertexOffset		    equ 6
   7+ 0000              ExplosionCtOffset	    equ 7
   8+ 0000              VertexCountOffset       equ 8
   9+ 0000              VertexCtX6Offset	    equ 9
  10+ 0000              EdgeCountOffset		    equ 10
  11+ 0000              BountyLoOffset		    equ 11
  12+ 0000              BountyHiOffset		    equ 12
  13+ 0000              FaceCtX4Offset		    equ 13
  14+ 0000              DotOffset			    equ 14
  15+ 0000              EnergyOffset		    equ 15
  16+ 0000              SpeedOffset			    equ 16
  17+ 0000              FaceAddyOffset		    equ 17
  18+ 0000              QOffset				    equ 19
  19+ 0000              LaserOffset			    equ 20
  20+ 0000              VerticiesAddyOffset     equ 21
  21+ 0000              ShipTypeOffset          equ 23
  22+ 0000              ShipNewBitsOffset       equ 24
  23+ 0000              ShipAIFlagsOffset       equ 25
  24+ 0000              ShipECMFittedChanceOffset     equ 26
  25+ 0000              ShipDataLength          equ ShipECMFittedChanceOffset+1
  26+ 0000
  27+ 0000              CobraTablePointer       equ 43
  28+ 0000              ;29 faulty
  29+ 0000              BankThreshold           equ 16
  30+ 0000
  31+ 0000              ShipTableALast          equ 23
  32+ 0000              ShipTableBLast          equ 39
  33+ 0000              ShipTableCLast          equ 55
  34+ 0000
# file closed: ./Data/ShipModelEquates.asm
  53  0000                                      INCLUDE "./Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1+ 0000              InitNoDoubleBuffer:         MACRO
   2+ 0000 ~                                        MMUSelectLayer1
   3+ 0000 ~                                        call	l1_cls
   4+ 0000 ~                                        ld		a,7
   5+ 0000 ~                                        call	l1_attr_cls_to_a
   6+ 0000 ~                                        MMUSelectLayer2
   7+ 0000 ~                                        call    asm_l2_double_buffer_off
   8+ 0000 ~                                        call	l2_cls	; Get some space
   9+ 0000 ~                                        MMUSelectSpriteBank
  10+ 0000 ~                                        call    sprite_cls_cursors
  11+ 0000                                          ENDM
  12+ 0000
  13+ 0000
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
  54  0000                                      INCLUDE "./Macros/graphicsMacros.asm"
# file opened: ./Macros/graphicsMacros.asm
   1+ 0000              ; General Graphics macros
   2+ 0000              DoubleBufferIfPossible: MACRO
   3+ 0000 ~                                    IFDEF DOUBLEBUFFER
   4+ 0000 ~                                        MMUSelectLayer2
   5+ 0000 ~                                        call  l2_cls
   6+ 0000 ~                                        call  l2_flip_buffers
   7+ 0000 ~                                    ENDIF
   8+ 0000                                      ENDM
# file closed: ./Macros/graphicsMacros.asm
  55  0000                                      INCLUDE "./Macros/callMacros.asm"
# file opened: ./Macros/callMacros.asm
   1+ 0000
   2+ 0000              CallIfAEqNusng:         MACRO   reg,target
   3+ 0000 ~                                    cp      reg
   4+ 0000 ~                                    call	z,target
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              CallIfAGTENusng:        MACRO   reg,target
   8+ 0000 ~                                    cp      reg
   9+ 0000 ~                                    call	nc,target
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              CallIfAGTEMemusng:      MACRO   reg,target
  13+ 0000 ~                                    ld      hl,reg
  14+ 0000 ~                                    cp      (hl)
  15+ 0000 ~                                    call	nc,target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              CallIfALTNusng:         MACRO   reg,target
  19+ 0000 ~                                    cp      reg
  20+ 0000 ~                                    call	c,target
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              CallIfMemEqMemusng:     MACRO mem, address, target
  24+ 0000 ~                                    ld   a,(mem)
  25+ 0000 ~                                    ld   hl,address
  26+ 0000 ~                                    cp   (hl)
  27+ 0000 ~                                    call    z,target
  28+ 0000                                      ENDM
  29+ 0000
  30+ 0000              CallIfMemEqNusng:       MACRO mem, value, target
  31+ 0000 ~                                    ld   a,(mem)
  32+ 0000 ~                                    cp   value
  33+ 0000 ~                                    call    z,target
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              CallIfMemTrue:          MACRO mem, target
  37+ 0000 ~                                    ld      a,(mem)
  38+ 0000 ~                                    and     a
  39+ 0000 ~                                    call    z, target
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              CallIfMemFalse:         MACRO mem, target
  43+ 0000 ~                                    ld      a,(mem)
  44+ 0000 ~                                    and     a
  45+ 0000 ~                                    call    nz, target
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              CallIfMemZero:          MACRO mem, target
  49+ 0000 ~                                    ld      a,(mem)
  50+ 0000 ~                                    and     a
  51+ 0000 ~                                    call    z, target
  52+ 0000                                      ENDM
  53+ 0000
  54+ 0000              CallIfMemNotZero:       MACRO mem, target
  55+ 0000 ~                                    ld      a,(mem)
  56+ 0000 ~                                    and     a
  57+ 0000 ~                                    call    nz, target
  58+ 0000                                      ENDM
  59+ 0000              CallIfATrue:            MACRO target
  60+ 0000 ~                                    and     a
  61+ 0000 ~                                    call    z, target
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              CallIfAFalse:           MACRO target
  65+ 0000 ~                                    and     a
  66+ 0000 ~                                    call    nz, target
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              CallIfAZero:            MACRO target
  70+ 0000 ~                                    and     a
  71+ 0000 ~                                    call    z, target
  72+ 0000                                      ENDM
  73+ 0000
  74+ 0000              CallIfANotZero:         MACRO target
  75+ 0000 ~                                    and     a
  76+ 0000 ~                                    call    nz, target
  77+ 0000                                      ENDM
# file closed: ./Macros/callMacros.asm
  56  0000                                      INCLUDE "./Macros/carryFlagMacros.asm"
# file opened: ./Macros/carryFlagMacros.asm
   1+ 0000
   2+ 0000              SetCarryFlag:           MACRO
   3+ 0000 ~                                    scf
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearCarryFlag:	        MACRO
   7+ 0000 ~                                    or a
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              FlipCarryFlag:          MACRO
  11+ 0000 ~                                    ccf
  12+ 0000                                      ENDM
  13+ 0000
# file closed: ./Macros/carryFlagMacros.asm
  57  0000                                      INCLUDE "./Macros/CopyByteMacros.asm"
# file opened: ./Macros/CopyByteMacros.asm
   1+ 0000              CopyByteAtHLixToA:		MACRO memloc
   2+ 0000 ~            						ex          de,hl                               ; save hl
   3+ 0000 ~            						ld          hl,memloc
   4+ 0000 ~            						add         hl,a
   5+ 0000 ~            						ld          a,(hl)                              ; get XX2[x]
   6+ 0000 ~            						ex          de,hl                               ; get hl back as we need it in loop
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              ; Increments IYL
  10+ 0000              ; Increments IHL
  11+ 0000              ; Gets value at hl and loads into Parameter 1 address
  12+ 0000
  13+ 0000              CopyByteAtNextHLiyl: 	MACRO memloc
  14+ 0000 ~            						inc         iyl                                 ;
  15+ 0000 ~            						inc         hl                                  ; vertex byte#1
  16+ 0000 ~            						ld          a,(hl)                              ;
  17+ 0000 ~            						ld          (memloc),a                     ; XX15+2 = (V),Y
  18+ 0000              						ENDM
  19+ 0000
  20+ 0000              ;------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              CopyByteAtNextHL:   MACRO targetaddr
  22+ 0000 ~                                inc         hl                                  ; vertex byte#1
  23+ 0000 ~                                ld          a,(hl)                              ;
  24+ 0000 ~                                ld          (targetaddr),a                     ; SunXX15+2 = (V),Y
  25+ 0000                                  ENDM
# file closed: ./Macros/CopyByteMacros.asm
  58  0000                                      INCLUDE "./Macros/ldCopyMacros.asm"
# file opened: ./Macros/ldCopyMacros.asm
   1+ 0000              ZeroA:		            MACRO
   2+ 0000 ~                                    xor a
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              SetATrue:               MACRO
   6+ 0000 ~                                    xor     a
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              SetAFalse:              MACRO
  10+ 0000 ~                                    ld      a,$FF
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              SetMemFalse             MACRO   mem
  14+ 0000 ~                                    ld      a,$FF
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetMemTrue              MACRO   mem
  19+ 0000 ~                                    xor     a
  20+ 0000 ~                                    ld      (mem),a
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              SetMemToN:              MACRO   mem,value
  24+ 0000 ~                                    ld      a,value
  25+ 0000 ~                                    ld      (mem),a
  26+ 0000                                      ENDM
  27+ 0000
  28+ 0000              ldCopyStringLen:        MACRO   source, target, strlen
  29+ 0000 ~                                    ld      hl,source
  30+ 0000 ~                                    ld      de, target
  31+ 0000 ~                                    ld      bc, strlen
  32+ 0000 ~                                    ldir
  33+ 0000                                      ENDM
  34+ 0000
  35+ 0000              ldCopyTextAtHLtoDE:     MACRO
  36+ 0000 ~            .CopyLoop:              ld      a,(hl)
  37+ 0000 ~                                    ld      (de),a
  38+ 0000 ~                                    cp      0
  39+ 0000 ~                                    jp      z,.DoneCopy
  40+ 0000 ~                                    inc     hl
  41+ 0000 ~                                    inc     de
  42+ 0000 ~                                    jr      .CopyLoop
  43+ 0000 ~            .DoneCopy:
  44+ 0000                                      ENDM
  45+ 0000
  46+ 0000              ldClearTextLoop:        MACRO   TextSize
  47+ 0000 ~                                    ld      b,a
  48+ 0000 ~                                    ld      a,TextSize
  49+ 0000 ~            .ClearLoop:             ld      (hl),a
  50+ 0000 ~                                    inc     hl
  51+ 0000 ~                                    djnz    .ClearLoop
  52+ 0000                                      ENDM
  53+ 0000
  54+ 0000              ldCopyByte:             MACRO memfrom, memto
  55+ 0000 ~                                    ld       a,(memfrom)
  56+ 0000 ~                                    ld       (memto),a
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000
  60+ 0000              ldCopyByteABS:          MACRO memfrom, memto
  61+ 0000 ~                                    ld       a,(memfrom)
  62+ 0000 ~                                    and		$7F
  63+ 0000 ~                                    ld       (memto),a
  64+ 0000                                      ENDM
  65+ 0000
  66+ 0000              ldAtHLtoMem:            MACRO   memto
  67+ 0000 ~                                    ld      a,(hl)
  68+ 0000 ~                                    ld      (memto),a
  69+ 0000                                      ENDM
  70+ 0000
  71+ 0000              ldCopy2Byte             MACRO  memfrom, memto
  72+ 0000 ~                                    ld       hl,(memfrom)
  73+ 0000 ~                                    ld       (memto),hl
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              ldWriteConst            MACRO  memfrom, memto
  77+ 0000 ~                                    ld       a,memfrom
  78+ 0000 ~                                    ld       (memto),a
  79+ 0000                                      ENDM
  80+ 0000
  81+ 0000              ldWriteZero             MACRO  memto
  82+ 0000 ~                                    xor      a
  83+ 0000 ~                                    ld       (memto),a
  84+ 0000                                      ENDM
  85+ 0000
  86+ 0000              ldIXLaFromN:	        MACRO memfrom
  87+ 0000 ~                                    ld		a,(memfrom)
  88+ 0000 ~                                    ld		ixl,a
  89+ 0000                                      ENDM
  90+ 0000
  91+ 0000              ldIXHaFromN:	        MACRO memfrom
  92+ 0000 ~                                    ld		a,(memfrom)
  93+ 0000 ~                                    ld		ixh,a
  94+ 0000                                      ENDM
  95+ 0000
  96+ 0000              ldIYLaFromN:	        MACRO memfrom
  97+ 0000 ~                                    ld		a,(memfrom)
  98+ 0000 ~                                    ld		iyl,a
  99+ 0000                                      ENDM
 100+ 0000
 101+ 0000              ldIYHaFromN:	        MACRO memfrom
 102+ 0000 ~                                    ld		a,(memfrom)
 103+ 0000 ~                                    ld		iyh,a
 104+ 0000                                      ENDM
 105+ 0000
 106+ 0000              ; Read a 32 bit value from address HL into BCDE
 107+ 0000              ldBCDEatHL:             MACRO
 108+ 0000 ~                                    ld      e,(hl)
 109+ 0000 ~                                    inc     hl
 110+ 0000 ~                                    ld      d,(hl)
 111+ 0000 ~                                    inc     hl
 112+ 0000 ~                                    ld      c,(hl)
 113+ 0000 ~                                    inc     hl
 114+ 0000 ~                                    ld      b,(hl)
 115+ 0000 ~                                    inc     hl
 116+ 0000                                      ENDM
 117+ 0000
 118+ 0000              ldBCatHL:               MACRO
 119+ 0000 ~                                    ld      c,(hl)
 120+ 0000 ~                                    inc     hl
 121+ 0000 ~                                    ld      b,(hl)
 122+ 0000 ~                                    inc     hl
 123+ 0000                                      ENDM
 124+ 0000
 125+ 0000              ldhlde:			        MACRO
 126+ 0000 ~                                    ld		h,d
 127+ 0000 ~                                    ld		l,e
 128+ 0000                                      ENDM
 129+ 0000
 130+ 0000              ldhlbc:			        MACRO
 131+ 0000 ~                                    ld		h,b
 132+ 0000 ~                                    ld		l,c
 133+ 0000                                      ENDM
 134+ 0000
 135+ 0000              ldbcde:			        MACRO
 136+ 0000 ~                                    ld		b,d
 137+ 0000 ~                                    ld		c,e
 138+ 0000                                      ENDM
 139+ 0000
 140+ 0000              lddebc:			        MACRO
 141+ 0000 ~                                    ld		d,b
 142+ 0000 ~                                    ld		e,c
 143+ 0000                                      ENDM
 144+ 0000
 145+ 0000              ldbchl:			        MACRO
 146+ 0000 ~                                    ld		b,h
 147+ 0000 ~                                    ld		c,l
 148+ 0000                                      ENDM
 149+ 0000
 150+ 0000              lddeiy:			        MACRO
 151+ 0000 ~                                    ld		d,iyh
 152+ 0000 ~                                    ld		e,iyl
 153+ 0000                                      ENDM
 154+ 0000
 155+ 0000              ldiyde:			        MACRO
 156+ 0000 ~                                    ld		iyh,d
 157+ 0000 ~                                    ld		iyl,e
 158+ 0000                                      ENDM
 159+ 0000
 160+ 0000
 161+ 0000              FourLDIInstrunctions:   MACRO
 162+ 0000 ~                                    ldi
 163+ 0000 ~                                    ldi
 164+ 0000 ~                                    ldi
 165+ 0000 ~                                    ldi
 166+ 0000                                      ENDM
 167+ 0000
 168+ 0000              FiveLDIInstrunctions:   MACRO
 169+ 0000 ~                                    ldi
 170+ 0000 ~                                    ldi
 171+ 0000 ~                                    ldi
 172+ 0000 ~                                    ldi
 173+ 0000 ~                                    ldi
 174+ 0000                                      ENDM
 175+ 0000
 176+ 0000              SixLDIInstrunctions:    MACRO
 177+ 0000 ~                                    ldi
 178+ 0000 ~                                    ldi
 179+ 0000 ~                                    ldi
 180+ 0000 ~                                    ldi
 181+ 0000 ~                                    ldi
 182+ 0000 ~                                    ldi
 183+ 0000                                      ENDM
 184+ 0000
 185+ 0000              EightLDIInstrunctions:  MACRO
 186+ 0000 ~            		                ldi
 187+ 0000 ~            		                ldi
 188+ 0000 ~            		                ldi
 189+ 0000 ~            		                ldi
 190+ 0000 ~            		                ldi
 191+ 0000 ~            		                ldi
 192+ 0000 ~            		                ldi
 193+ 0000 ~            		                ldi
 194+ 0000                                      ENDM
 195+ 0000
 196+ 0000              NineLDIInstrunctions:  MACRO
 197+ 0000 ~            		                ldi
 198+ 0000 ~            		                ldi
 199+ 0000 ~            		                ldi
 200+ 0000 ~            		                ldi
 201+ 0000 ~            		                ldi
 202+ 0000 ~            		                ldi
 203+ 0000 ~            		                ldi
 204+ 0000 ~            		                ldi
 205+ 0000 ~            		                ldi
 206+ 0000                                      ENDM
# file closed: ./Macros/ldCopyMacros.asm
  59  0000                                      INCLUDE "./Macros/ldIndexedMacros.asm"
# file opened: ./Macros/ldIndexedMacros.asm
   1+ 0000              GetByteAInTable:    MACRO table
   2+ 0000 ~                                ld          hl,table
   3+ 0000 ~                                add         hl,a
   4+ 0000 ~                                ld          a,(hl)
   5+ 0000                                  ENDM
   6+ 0000
   7+ 0000              HLWordAInTable:     MACRO table
   8+ 0000 ~                                ld          hl,table
   9+ 0000 ~                                sla         a
  10+ 0000 ~                                add         hl,a
  11+ 0000 ~                                ld          a,(hl)
  12+ 0000 ~                                inc         hl
  13+ 0000 ~                                ld          h,(hl)
  14+ 0000 ~                                ld          l,a
  15+ 0000                                  ENDM
  16+ 0000
  17+ 0000
  18+ 0000              ldAToHLixl:			MACRO value
  19+ 0000 ~            					ld          hl,value
  20+ 0000 ~            					ex          af,af'
  21+ 0000 ~            					ld          a,ixl
  22+ 0000 ~            					add         hl,a
  23+ 0000 ~            					ex          af,af'
  24+ 0000 ~            					ld          (hl),a
  25+ 0000              					ENDM
  26+ 0000
  27+ 0000              ldAToHLiyl:			MACRO value
  28+ 0000 ~            					ld          hl,value
  29+ 0000 ~            					ex          af,af'
  30+ 0000 ~            					ld          a,iyl
  31+ 0000 ~            					add         hl,a
  32+ 0000 ~            					ex          af,af'
  33+ 0000 ~            					ld          (hl),a
  34+ 0000              					ENDM
  35+ 0000
  36+ 0000
  37+ 0000              ldHLixlToA:         MACRO value
  38+ 0000 ~                                ld          hl,value
  39+ 0000 ~                                ex          af,af'
  40+ 0000 ~                                ld          a,ixl
  41+ 0000 ~                                add         hl,a
  42+ 0000 ~                                ld          a,(hl)
  43+ 0000                                  ENDM
  44+ 0000
  45+ 0000              ldHLiylToA:         MACRO value
  46+ 0000 ~                                ld          hl,value
  47+ 0000 ~                                ex          af,af'
  48+ 0000 ~                                ld          a,iyl
  49+ 0000 ~                                add         hl,a
  50+ 0000 ~                                ld          a,(hl)
  51+ 0000                                  ENDM
  52+ 0000
  53+ 0000              ldHLIdxAToA:        MACRO value
  54+ 0000 ~                                ld          hl,value
  55+ 0000 ~                                add         hl,a
  56+ 0000 ~                                ld          a,(hl)
  57+ 0000                                  ENDM
  58+ 0000
  59+ 0000              HLEquAddrAtHLPlusA: MACRO
  60+ 0000 ~                                sla         a
  61+ 0000 ~                                add         hl,a
  62+ 0000 ~                                ld          a,(hl)
  63+ 0000 ~                                inc         hl
  64+ 0000 ~                                ld          h,(hl)
  65+ 0000 ~                                ld          l,a
  66+ 0000                                  ENDM
# file closed: ./Macros/ldIndexedMacros.asm
  60  0000                                      INCLUDE "./Macros/jumpMacros.asm"
# file opened: ./Macros/jumpMacros.asm
   1+ 0000              JumpIfPositive:	        MACRO target
   2+ 0000 ~                                    jp		p, target
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              JumpIfNegative:	        MACRO target
   6+ 0000 ~                                    jp		m, target
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000
  10+ 0000              JumpIfUnderflow:	    MACRO target
  11+ 0000 ~                                    jp		po, target
  12+ 0000                                      ENDM
  13+ 0000
  14+ 0000              JumpIfOverflow:	        MACRO target
  15+ 0000 ~                                    jp		po, target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000
  19+ 0000              JumpIfNotZero:	        MACRO target
  20+ 0000 ~                                    jp	nz,target
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              JumpIfZero:	            MACRO target
  24+ 0000 ~                                    jp	z,target
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              ;.. Bit routines
  28+ 0000              JumpOnLeadSignSet:      MACRO   reg, target
  29+ 0000 ~                                    ld      a,reg
  30+ 0000 ~                                    and     SignOnly8Bit
  31+ 0000 ~                                    jp      nz,target
  32+ 0000                                      ENDM
  33+ 0000
  34+ 0000              JumpOnLeadSignClear:    MACRO   reg, target
  35+ 0000 ~                                    ld      a,reg
  36+ 0000 ~                                    and     SignOnly8Bit
  37+ 0000 ~                                    jp      z,target
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              JumpOnLeadSignSetA:     MACRO   target
  41+ 0000 ~                                    and     SignOnly8Bit
  42+ 0000 ~                                    jp      nz,target
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              JumpOnLeadSignClearA:   MACRO   target
  46+ 0000 ~                                    and     SignOnly8Bit
  47+ 0000 ~                                    jp      z,target
  48+ 0000                                      ENDM
  49+ 0000
  50+ 0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
  51+ 0000 ~                                    ld      a,(mem)
  52+ 0000 ~                                    bit 	bitnbr,a
  53+ 0000 ~                                    jp      nz,target
  54+ 0000                                      ENDM
  55+ 0000
  56+ 0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
  57+ 0000 ~                                    ld      a,(mem)
  58+ 0000 ~                                    bit 	bitnbr,a
  59+ 0000 ~                                    jp      z,target
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000
  63+ 0000              JumpOnABitSet:          MACRO   bitnbr, target
  64+ 0000 ~                                    bit 	bitnbr, a
  65+ 0000 ~                                    jp      nz,target
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              JumpOnABitClear:        MACRO   bitnbr, target
  69+ 0000 ~                                    bit 	bitnbr, a
  70+ 0000 ~                                    jp      z,target
  71+ 0000                                      ENDM
  72+ 0000
  73+ 0000              JumpOnABit5Set:         MACRO   target
  74+ 0000 ~                                    and     Bit5Only
  75+ 0000 ~                                    jp      nz,target
  76+ 0000                                      ENDM
  77+ 0000
  78+ 0000              JumpOnABit5Clear:       MACRO   target
  79+ 0000 ~                                    and     Bit5Only
  80+ 0000 ~                                    jp      z,target
  81+ 0000                                      ENDM
  82+ 0000
  83+ 0000              JumpOnBitMaskSet:       MACRO   bitmask, target
  84+ 0000 ~                                    and     bitmask
  85+ 0000 ~                                    jp      nz,target
  86+ 0000                                      ENDM
  87+ 0000
  88+ 0000              JumpOnBitMaskClear:     MACRO   bitmask, target
  89+ 0000 ~                                    and     bitmask
  90+ 0000 ~                                    jp      z,target
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              JumpOnMemBitMaskSet:    MACRO   mem, bitmask, target
  94+ 0000 ~                                    ld      a,(mem)
  95+ 0000 ~                                    and     bitmask
  96+ 0000 ~                                    jp      nz,target
  97+ 0000                                      ENDM
  98+ 0000
  99+ 0000              JumpOnMemBitMaskClear:  MACRO   mem, bitmask, target
 100+ 0000 ~                                    ld      a,(mem)
 101+ 0000 ~                                    and     bitmask
 102+ 0000 ~                                    jp      z,target
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
 106+ 0000 ~                                    bit 	bitnbr,reg
 107+ 0000 ~                                    jp      nz,target
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
 111+ 0000 ~                                    bit 	bitnbr,reg
 112+ 0000 ~                                    jp      z,target
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              ; Comparison Routines
 116+ 0000              JumpIfAGTEusng:         MACRO
 117+ 0000 ~                                    jp		nc,target
 118+ 0000                                      ENDM
 119+ 0000
 120+ 0000              JumpIfAGTENusng:        MACRO reg,target
 121+ 0000 ~                                    cp     reg
 122+ 0000 ~                                    jp		nc,target
 123+ 0000                                      ENDM
 124+ 0000
 125+ 0000              JumpIfAGTEMemusng:      MACRO mem,target
 126+ 0000 ~                                    ld      hl,mem
 127+ 0000 ~                                    cp      (hl)
 128+ 0000 ~                                    jp		nc,target
 129+ 0000                                      ENDM
 130+ 0000
 131+ 0000              JumpIfALTMemusng:       MACRO mem,target
 132+ 0000 ~                                    ld      hl,mem
 133+ 0000 ~                                    cp      (hl)
 134+ 0000 ~                                    jp		c,target
 135+ 0000                                      ENDM
 136+ 0000
 137+ 0000              JumpIfMemGTENusng:      MACRO mem, value, target
 138+ 0000 ~                                    ld     a,(mem)
 139+ 0000 ~                                    cp     value
 140+ 0000 ~                                    jp	  nc,target
 141+ 0000                                      ENDM
 142+ 0000
 143+ 0000              JumpIfMemGTEMemusng:    MACRO mem, address, target
 144+ 0000 ~                                    ld   a,(mem)
 145+ 0000 ~                                    ld   hl,address
 146+ 0000 ~                                    cp   (hl)
 147+ 0000 ~                                    jp	  nc,target
 148+ 0000                                      ENDM
 149+ 0000
 150+ 0000              JumpIfMemEqMemusng:     MACRO mem, address, target
 151+ 0000 ~                                    ld   a,(mem)
 152+ 0000 ~                                    ld   hl,address
 153+ 0000 ~                                    cp   (hl)
 154+ 0000 ~                                    jp	  z,target
 155+ 0000                                      ENDM
 156+ 0000
 157+ 0000              JumpIfMemNeMemusng:     MACRO mem, address, target
 158+ 0000 ~                                    ld   a,(mem)
 159+ 0000 ~                                    ld   hl,address
 160+ 0000 ~                                    cp   (hl)
 161+ 0000 ~                                    jp	  nz,target
 162+ 0000                                      ENDM
 163+ 0000
 164+ 0000              JumpIfMemTrue:          MACRO mem, target
 165+ 0000 ~                                    ld      a,(mem)
 166+ 0000 ~                                    and     a
 167+ 0000 ~                                    jp      z, target
 168+ 0000                                      ENDM
 169+ 0000
 170+ 0000              JumpIfMemFalse:         MACRO mem, target
 171+ 0000 ~                                    ld      a,(mem)
 172+ 0000 ~                                    and     a
 173+ 0000 ~                                    jp      nz, target
 174+ 0000                                      ENDM
 175+ 0000
 176+ 0000              JumpIfATrue:            MACRO target
 177+ 0000 ~                                    and     a
 178+ 0000 ~                                    jp      z, target
 179+ 0000                                      ENDM
 180+ 0000
 181+ 0000              JumpIfAFalse:           MACRO target
 182+ 0000 ~                                    and     a
 183+ 0000 ~                                    jp      nz, target
 184+ 0000                                      ENDM
 185+ 0000
 186+ 0000              JumpIfANotFalse:        MACRO target
 187+ 0000 ~                                    cp      $FF
 188+ 0000 ~                                    jp      nz, target
 189+ 0000                                      ENDM
 190+ 0000
 191+ 0000              JumpIfALTusng:          MACRO target
 192+ 0000 ~                                    jp		c,target
 193+ 0000                                      ENDM
 194+ 0000
 195+ 0000              JumpIfALTNusng:         MACRO value, target
 196+ 0000 ~                                    cp      value
 197+ 0000 ~                                    jp		c, target
 198+ 0000                                      ENDM
 199+ 0000
 200+ 0000              JumpIfMemLTNusng:       MACRO mem, value, target
 201+ 0000 ~                                    ld      a,(mem)
 202+ 0000 ~                                    cp      value
 203+ 0000 ~                                    jp	  c,target
 204+ 0000                                      ENDM
 205+ 0000
 206+ 0000              JumpIfMemLTMemusng:     MACRO mem, value, target
 207+ 0000 ~                                    ld    a,(mem)
 208+ 0000 ~                                    ld    hl,value
 209+ 0000 ~                                    cp    (hl)
 210+ 0000 ~                                    jp	  c,target
 211+ 0000                                      ENDM
 212+ 0000
 213+ 0000              JumpIfMemEqNusng:       MACRO mem,value,target
 214+ 0000 ~                                    ld  a,(mem)
 215+ 0000 ~                                    cp  value
 216+ 0000 ~                                    jp  z,target
 217+ 0000                                      ENDM
 218+ 0000
 219+ 0000              JumpIfMemNeNusng:       MACRO mem,value,target
 220+ 0000 ~                                    ld  a,(mem)
 221+ 0000 ~                                    cp  value
 222+ 0000 ~                                    jp  nz,target
 223+ 0000                                      ENDM
 224+ 0000
 225+ 0000              JumpIfMemZero:          MACRO mem,target
 226+ 0000 ~                                    ld  a,(mem)
 227+ 0000 ~                                    and a
 228+ 0000 ~                                    jp  z,target
 229+ 0000                                      ENDM
 230+ 0000
 231+ 0000              JumpIfMemNotZero:       MACRO mem,target
 232+ 0000 ~                                    ld  a,(mem)
 233+ 0000 ~                                    and a
 234+ 0000 ~                                    jp  nz,target
 235+ 0000                                      ENDM
 236+ 0000
 237+ 0000              JumpIfALTMemHLusng:     MACRO target
 238+ 0000 ~                                    cp    (hl)
 239+ 0000 ~                                    jp	  c,target
 240+ 0000                                      ENDM
 241+ 0000
 242+ 0000              JumpIfANENusng:         MACRO value, target
 243+ 0000 ~                                    cp     value
 244+ 0000 ~                                    jp      nz,target
 245+ 0000                                      ENDM
 246+ 0000
 247+ 0000              JumpIfANEquNusng:       MACRO value, target
 248+ 0000 ~                                    cp     value
 249+ 0000 ~                                    jp     z,target
 250+ 0000                                      ENDM
 251+ 0000
 252+ 0000              JumpIfANEMemusng:       MACRO  value, target
 253+ 0000 ~                                    ld    hl,value
 254+ 0000 ~                                    cp    (hl)
 255+ 0000 ~                                    jp      nz,target
 256+ 0000                                      ENDM
 257+ 0000
 258+ 0000              JumpIfAEqNusng:         MACRO value, target
 259+ 0000 ~                                    cp     value
 260+ 0000 ~                                    jp      z,target
 261+ 0000                                      ENDM
 262+ 0000
 263+ 0000              JumpIfAIsZero:	        MACRO target
 264+ 0000 ~                                    and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 265+ 0000 ~                                    jp	    z, target
 266+ 0000                                      ENDM
 267+ 0000
 268+ 0000              JumpIfRegIsNotZero:     MACRO   reg, target
 269+ 0000 ~                                    ld      a,reg
 270+ 0000 ~                                    and     a
 271+ 0000 ~                                    jp	    nz,target
 272+ 0000                                      ENDM
 273+ 0000
 274+ 0000              JumpIfAIsNotZero:       MACRO target
 275+ 0000 ~                                    and     a
 276+ 0000 ~                                    jp	    nz,target
 277+ 0000                                      ENDM
 278+ 0000
 279+ 0000              JumpIfMemIsNotZero:     MACRO value, target
 280+ 0000 ~                                    ld      a,(value)
 281+ 0000 ~                                    and     a
 282+ 0000 ~                                    jp	    nz,target
 283+ 0000                                      ENDM
 284+ 0000              IfResultZeroGoto:	    MACRO target
 285+ 0000 ~                                    jp	z,target
 286+ 0000                                      ENDM
 287+ 0000
 288+ 0000              IfResultNotZeroGoto:    MACRO target
 289+ 0000 ~                                    jp	nz,target
 290+ 0000                                      ENDM
 291+ 0000
# file closed: ./Macros/jumpMacros.asm
  61  0000                                      INCLUDE "./Macros/MathsMacros.asm"
# file opened: ./Macros/MathsMacros.asm
   1+ 0000
   2+ 0000              ABSa2c:                 MACRO
   3+ 0000 ~                                    bit     7,a
   4+ 0000 ~                                    jp      z,.DoneABSa
   5+ 0000 ~                                    neg
   6+ 0000 ~            .DoneABSa:
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              DEEquSquareA:           MACRO
  10+ 0000 ~                                    ld  d,a
  11+ 0000 ~                                    ld  e,a
  12+ 0000 ~                                    mul de
  13+ 0000                                      ENDM
  14+ 0000
  15+ 0000              ApplyMyRollToVector:    MACRO angle, vectorX, vectorY
  16+ 0000 ~                                    ldCopyByte angle,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  17+ 0000 ~                                    ldCopy2Byte vectorY, varR           ; RS =  nosev_y
  18+ 0000 ~                                    ldCopyByte  vectorX, varP           ; set P to nosevX lo (may be redundant)
  19+ 0000 ~                                    ld a,(vectorX+1)                    ; Set A = -nosev_x_hi
  20+ 0000 ~                                    xor $80                             ;
  21+ 0000 ~                                    call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  22+ 0000 ~                                    ld  (vectorY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  23+ 0000 ~                                    ldCopy2Byte vectorX, varR           ; Set (S R) = nosev_x
  24+ 0000 ~                                    ld  a,(vectorY+1)                   ;  Set A = nosev_y_hi
  25+ 0000 ~                                    call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  26+ 0000 ~                                    ld  (vectorX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000              SignedHLTo2C:           MACRO
  30+ 0000 ~                                    bit     7,h
  31+ 0000 ~                                    jr      z,.Done2c
  32+ 0000 ~                                    ld      a,h
  33+ 0000 ~                                    and     SignMask8Bit
  34+ 0000 ~                                    ld      h,a
  35+ 0000 ~                                    NegHL
  36+ 0000 ~            .Done2c:
  37+ 0000                                      ENDM
  38+ 0000
  39+ 0000              MemSignedTo2C:          MACRO   memfrom
  40+ 0000 ~                                    ld      hl,(memfrom)
  41+ 0000 ~                                    bit     7,h
  42+ 0000 ~                                    jr      z,.Done2c
  43+ 0000 ~                                    ld      a,h
  44+ 0000 ~                                    and     SignMask8Bit
  45+ 0000 ~                                    ld      h,a
  46+ 0000 ~            .Done2c:                ld      (memfrom),hl
  47+ 0000                                      ENDM
  48+ 0000
  49+ 0000
  50+ 0000                  ;returns result in H
  51+ 0000              EDiv10Inline:           MACRO
  52+ 0000 ~                                    ld      d,0
  53+ 0000 ~                                    ld      hl,de
  54+ 0000 ~                                    add     hl,hl
  55+ 0000 ~                                    add     hl,de
  56+ 0000 ~                                    add     hl,hl
  57+ 0000 ~                                    add     hl,hl
  58+ 0000 ~                                    add     hl,de
  59+ 0000 ~                                    add     hl,hl
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              cpHLDE:                 MACRO
  63+ 0000 ~                                    push    hl
  64+ 0000 ~                                    and     a
  65+ 0000 ~                                    sbc     hl,de
  66+ 0000 ~                                    pop     hl
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              ;Unsigned
  70+ 0000              ;If HL == DE, then Z flag is set.
  71+ 0000              ;If HL != DE, then Z flag is reset.
  72+ 0000              ;If HL <  DE, then C flag is set.
  73+ 0000              ;If HL >= DE, then C flag is reset.
  74+ 0000              ;
  75+ 0000              ;Signed
  76+ 0000              ;If HL == DE, then Z flag is set.
  77+ 0000              ;If HL != DE, then Z flag is reset.
  78+ 0000              ;If HL <  DE, then S and P/V are different.
  79+ 0000              ;If HL >= DE, then S and P/V are the same.
  80+ 0000
  81+ 0000              N0equN1byN2div256:      MACRO param1,param2,param3
  82+ 0000 ~                                    ld      a,param3                        ;
  83+ 0000 ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
  84+ 0000 ~                                    ld      a,param2                        ; A = XX16 element
  85+ 0000 ~                                    ld      d,a
  86+ 0000 ~                                    mul
  87+ 0000 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
  88+ 0000 ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
  89+ 0000                                      ENDM
  90+ 0000
  91+ 0000              AequN1xorN2:            MACRO  param1,param2
  92+ 0000 ~                                    ld      a,(param1)
  93+ 0000 ~                                    xor     param2
  94+ 0000                                      ENDM
  95+ 0000
# file closed: ./Macros/MathsMacros.asm
  62  0000                                      INCLUDE "./Macros/MMUMacros.asm"
# file opened: ./Macros/MMUMacros.asm
   1+ 0000              MMUSelectROM0:       MACRO
   2+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   3+ 0000                                   ENDM
   4+ 0000
   5+ 0000              MMUSelectROMS:       MACRO
   6+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   7+ 0000 ~                                 nextreg EXSDOSMMU1,        BankROM
   8+ 0000                                   ENDM
   9+ 0000
  10+ 0000              MMUSelectMathsTables:MACRO
  11+ 0000 ~                                 nextreg MathsTablesMMU,    BankMathsTables
  12+ 0000                                   ENDM
  13+ 0000
  14+ 0000              MMUSelectSpriteBank: MACRO
  15+ 0000 ~            					 nextreg SpritememMMU,	    BankSPRITE
  16+ 0000              					 ENDM
  17+ 0000
  18+ 0000              MMUSelectConsoleBank: MACRO
  19+ 0000 ~            					 nextreg ConsoleImageDataMMU,  BankConsole
  20+ 0000              					 ENDM
  21+ 0000
  22+ 0000              MMUSelectLayer1: 	 MACRO
  23+ 0000 ~            					 nextreg L1memMMU,		    BankLAYER1
  24+ 0000              					 ENDM
  25+ 0000
  26+ 0000              MMUSelectLayer2: 	 MACRO
  27+ 0000 ~            					 nextreg L2memMMU,		    BankLAYER2
  28+ 0000              					 ENDM
  29+ 0000
  30+ 0000              MMUSelectResetUniv:  MACRO
  31+ 0000 ~                                 nextreg ResetUniverseMMU, BankResetUniv
  32+ 0000                                   ENDM
  33+ 0000
  34+ 0000              MMUSelectShipARead:  MACRO
  35+ 0000 ~                                 add    a,BankUNIVDATA0
  36+ 0000 ~                                 nextreg ShipReadMMU,       a
  37+ 0000                                   ENDM
  38+ 0000
  39+ 0000              MMUSelectShipBank1:  MACRO
  40+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels1
  41+ 0000              					 ENDM
  42+ 0000              MMUSelectShipBank2:  MACRO
  43+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels2
  44+ 0000              					 ENDM
  45+ 0000              MMUSelectShipBank3:  MACRO
  46+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels3
  47+ 0000              					 ENDM
  48+ 0000              MMUSelectShipBank4:  MACRO
  49+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels4
  50+ 0000              					 ENDM
  51+ 0000
  52+ 0000              MMUSelectShipBankA   MACRO
  53+ 0000 ~            					 nextreg ShipModelMMU,	    a
  54+ 0000              					 ENDM
  55+ 0000
  56+ 0000              MMUSelectShipBankN:  MACRO value
  57+ 0000 ~            					 nextreg ShipModelMMU,	    value
  58+ 0000              					 ENDM
  59+ 0000
  60+ 0000              MMUSelectCommander:	 MACRO
  61+ 0000 ~                                 nextreg CommanderMMU,       BankCommander
  62+ 0000              					 ENDM
  63+ 0000
  64+ 0000              MMUSelectStockTable: MACRO
  65+ 0000 ~                                 nextreg StockTableMMU,     BankStockTable
  66+ 0000              					 ENDM
  67+ 0000
  68+ 0000              MMUSelectCpySrcA:    MACRO
  69+ 0000 ~                                 nextreg DMACpySourceMMU,	a
  70+ 0000              					 ENDM
  71+ 0000
  72+ 0000              MMUSelectCpySrcN:    MACRO value
  73+ 0000 ~                                 nextreg DMACpySourceMMU,	value
  74+ 0000              					 ENDM
  75+ 0000
  76+ 0000              MMUSelectSun:        MACRO
  77+ 0000 ~                                 nextreg SunMMU,            BankSunData
  78+ 0000                                   ENDM
  79+ 0000
  80+ 0000              MMUSelectPlanet:     MACRO
  81+ 0000 ~                                 nextreg PlanetMMU,         BankPlanetData
  82+ 0000                                   ENDM
  83+ 0000
  84+ 0000              MMUSelectUniverseA:  MACRO
  85+ 0000 ~                                 add    a,BankUNIVDATA0
  86+ 0000 ~                                 nextreg UniverseMMU,       a
  87+ 0000                                   ENDM
  88+ 0000              ;Version that assumes a pre calulated A, used whn optimising many switches
  89+ 0000              MMUSelectUnivBankA:  MACRO
  90+ 0000 ~                                 nextreg UniverseMMU,       a
  91+ 0000                                   ENDM
  92+ 0000
  93+ 0000              MMUSelectUniverseN:  MACRO value
  94+ 0000 ~                                 nextreg UniverseMMU,       BankUNIVDATA0+value
  95+ 0000                                   ENDM
  96+ 0000
  97+ 0000              MMUSelectGalaxyA:    MACRO
  98+ 0000 ~                                 nextreg GalaxyDataMMU,       a
  99+ 0000                                   ENDM
 100+ 0000
 101+ 0000              MMUSelectGalaxyN:    MACRO value
 102+ 0000 ~                                 nextreg GalaxyDataMMU,     BankGalaxyData0+value
 103+ 0000                                   ENDM
 104+ 0000              MMUSelectGalaxyACopy:MACRO
 105+ 0000 ~                                 nextreg UniverseMMU,       a
 106+ 0000                                   ENDM
 107+ 0000
 108+ 0000              MMUSelectUniverseAbs:MACRO value
 109+ 0000 ~                                 nextreg UniverseMMU,       value
 110+ 0000                                   ENDM
 111+ 0000
 112+ 0000              MMUSelectMenuGalCht: MACRO
 113+ 0000 ~                                 nextreg MenuGalChtMMU,		BankMenuGalCht
 114+ 0000              					 ENDM
 115+ 0000
 116+ 0000              MMUSelectMenuShrCht: MACRO
 117+ 0000 ~            					 nextreg MenuShrChtMMU,		BankMenuShrCht
 118+ 0000              					 ENDM
 119+ 0000
 120+ 0000              MMUSelectMenuInvent: MACRO
 121+ 0000 ~                                 nextreg MenuInventMMU,		BankMenuInvent
 122+ 0000              					 ENDM
 123+ 0000
 124+ 0000              MMUSelectMenuSystem: MACRO
 125+ 0000 ~                                 nextreg MenuSystemMMU,		BankMenuSystem
 126+ 0000              					 ENDM
 127+ 0000
 128+ 0000              MMUSelectMenuMarket: MACRO
 129+ 0000 ~                                 nextreg MenuMarketMMU,		BankMenuMarket
 130+ 0000              					 ENDM
 131+ 0000
 132+ 0000              MMUSelectMenuStatus: MACRO
 133+ 0000 ~                                 nextreg MenuStatusMMU,		BankMenuStatus
 134+ 0000              					 ENDM
 135+ 0000
 136+ 0000              MMUSelectViewFront:  MACRO
 137+ 0000 ~                                 nextreg ScreenBankMMU,		BankFrontView
 138+ 0000              					 ENDM
 139+ 0000
 140+ 0000              MMUSelectScreenA:    MACRO
 141+ 0000 ~                                 nextreg ScreenBankMMU,		a
 142+ 0000              					 ENDM
 143+ 0000
# file closed: ./Macros/MMUMacros.asm
  63  0000                                      INCLUDE "./Macros/NegateMacros.asm"
# file opened: ./Macros/NegateMacros.asm
   1+ 0000
   2+ 0000              NegIY:			    MACRO
   3+ 0000 ~                                xor a
   4+ 0000 ~                                sub iyl
   5+ 0000 ~                                ld iyl,a
   6+ 0000 ~                                sbc a,a
   7+ 0000 ~                                sub iyh
   8+ 0000 ~                                ld iyh,a
   9+ 0000                                  ENDM
  10+ 0000
  11+ 0000              NegHL:			    MACRO
  12+ 0000 ~                                xor a
  13+ 0000 ~                                sub l
  14+ 0000 ~                                ld l,a
  15+ 0000 ~                                sbc a,a
  16+ 0000 ~                                sub h
  17+ 0000 ~                                ld h,a
  18+ 0000                                  ENDM
  19+ 0000
  20+ 0000              NegDE:			    MACRO
  21+ 0000 ~                                xor a
  22+ 0000 ~                                sub e
  23+ 0000 ~                                ld e,a
  24+ 0000 ~                                sbc a,a
  25+ 0000 ~                                sub d
  26+ 0000 ~                                ld d,a
  27+ 0000                                  ENDM
  28+ 0000
  29+ 0000              NegBC:			    MACRO
  30+ 0000 ~                                xor a
  31+ 0000 ~                                sub c
  32+ 0000 ~                                ld c,a
  33+ 0000 ~                                sbc a,a
  34+ 0000 ~                                sub  b
  35+ 0000 ~                                ld b,a
  36+ 0000                                  ENDM
  37+ 0000
  38+ 0000              NegH                MACRO
  39+ 0000 ~                                ld      a,h
  40+ 0000 ~                                neg
  41+ 0000 ~                                ld      h,a
  42+ 0000                                  ENDM
  43+ 0000
  44+ 0000              NegD                MACRO
  45+ 0000 ~                                ld      a,d
  46+ 0000 ~                                neg
  47+ 0000 ~                                ld      d,a
  48+ 0000                                  ENDM
  49+ 0000
  50+ 0000              NegB                MACRO
  51+ 0000 ~                                ld      a,b
  52+ 0000 ~                                neg
  53+ 0000 ~                                ld      b,a
  54+ 0000                                  ENDM
  55+ 0000
# file closed: ./Macros/NegateMacros.asm
  64  0000                                      INCLUDE "./Macros/returnMacros.asm"
# file opened: ./Macros/returnMacros.asm
   1+ 0000              ReturnOnBitSet:         MACRO  reg, bitnbr
   2+ 0000 ~                                    bit 	bitnbr,reg
   3+ 0000 ~                                    ret     nz
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ReturnOnMemBitSet:      MACRO mem, bitnbr
   7+ 0000 ~                                    ld   a,(mem)
   8+ 0000 ~                                    bit 	bitnbr,a
   9+ 0000 ~                                    ret     nz
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              ReturnOnBitClear:       MACRO reg, bitnbr
  13+ 0000 ~                                    bit 	bitnbr,reg
  14+ 0000 ~                                    ret		z
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              ReturnOnMemBitClear:    MACRO mem, bitnbr
  18+ 0000 ~                                    ld     a,(mem)
  19+ 0000 ~                                    bit 	bitnbr,a
  20+ 0000 ~                                    ret		z
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              ReturnIfMemFalse:       MACRO   mem
  24+ 0000 ~                                    ld      a,(mem)
  25+ 0000 ~                                    and     a
  26+ 0000 ~                                    ret     nz
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000              ReturnIfMemTrue:        MACRO   mem
  30+ 0000 ~                                    ld      a,(mem)
  31+ 0000 ~                                    and     a
  32+ 0000 ~                                    ret     z
  33+ 0000                                      ENDM
  34+ 0000
  35+ 0000              ReturnIfAIsZero:        MACRO
  36+ 0000 ~                                    and     a
  37+ 0000 ~                                    ret     z
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              ReturnIfMemisZero:      MACRO mem
  41+ 0000 ~                                    ld   a,(mem)
  42+ 0000 ~                                    and a
  43+ 0000 ~                                    ret    z
  44+ 0000                                      ENDM
  45+ 0000
  46+ 0000              ReturnIfMemIsNegative:  MACRO mem
  47+ 0000 ~                                    ld      a,(mem)
  48+ 0000 ~                                    and     $80
  49+ 0000 ~                                    ret     nz
  50+ 0000                                      ENDM
  51+ 0000
  52+ 0000              ReturnIfBitMaskClear    MACRO   bitmask
  53+ 0000 ~                                    and     bitmask
  54+ 0000 ~                                    ret     z
  55+ 0000                                      ENDM
  56+ 0000
  57+ 0000              ReturnIfBitMaskSet      MACRO   bitmask
  58+ 0000 ~                                    and     bitmask
  59+ 0000 ~                                    ret     nz
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              ReturnIfMemEquN:        MACRO mem, value
  63+ 0000 ~                                    ld     a,(mem)
  64+ 0000 ~                                    cp     value
  65+ 0000 ~                                    ret    nz
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              ReturnIfMemNeNusng:     MACRO mem, value
  69+ 0000 ~                                    ld   a,(mem)
  70+ 0000 ~                                    cp     value
  71+ 0000 ~                                    ret    z
  72+ 0000                                      ENDM
  73+ 0000
  74+ 0000              ReturnIfRegNotZero:     MACRO reg
  75+ 0000 ~                                    ld      a, reg
  76+ 0000 ~                                    and     a
  77+ 0000 ~                                    ret     nz
  78+ 0000                                      ENDM
  79+ 0000
  80+ 0000              ReturnIfANotZero:       MACRO
  81+ 0000 ~                                    and     a
  82+ 0000 ~                                    ret     nz
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              ReturnIfNotZero:        MACRO
  86+ 0000 ~                                    ret     nz
  87+ 0000                                      ENDM
  88+ 0000
  89+ 0000
  90+ 0000              ReturnIfNegative:       MACRO
  91+ 0000 ~                                    ret     m
  92+ 0000                                      ENDM
  93+ 0000
  94+ 0000
  95+ 0000              ReturnIfMemNotZero:     MACRO mem
  96+ 0000 ~                                    ld     a,(mem)
  97+ 0000 ~                                    and     a
  98+ 0000 ~                                    ret    nz
  99+ 0000                                      ENDM
 100+ 0000
 101+ 0000              ReturnIfAGTEusng:       MACRO value
 102+ 0000 ~                                    cp    value
 103+ 0000 ~                                    ret	 nc
 104+ 0000                                      ENDM
 105+ 0000
 106+ 0000              ReturnIfRegLTNusng:     MACRO reg, value
 107+ 0000 ~                                    ld      a,reg
 108+ 0000 ~                                    cp      value
 109+ 0000 ~                                    ret	    c
 110+ 0000                                      ENDM
 111+ 0000
 112+ 0000              ReturnIfALTNusng:       MACRO value
 113+ 0000 ~                                    cp    value
 114+ 0000 ~                                    ret	 c
 115+ 0000                                      ENDM
 116+ 0000
 117+ 0000              ReturnIfAGTENusng:      MACRO value
 118+ 0000 ~                                    cp    value
 119+ 0000 ~                                    ret	 nc
 120+ 0000                                      ENDM
 121+ 0000
 122+ 0000              ReturnIfAGTEMemusng:    MACRO value
 123+ 0000 ~                                    ld      hl,value
 124+ 0000 ~                                    cp      (hl)
 125+ 0000 ~                                    ret	    nc
 126+ 0000                                      ENDM
 127+ 0000
 128+ 0000              ReturnIfANENusng:       MACRO value
 129+ 0000 ~                                    cp      value
 130+ 0000 ~                                    ret     nz
 131+ 0000                                      ENDM
 132+ 0000
 133+ 0000              ReturnIfAEqNusng:       MACRO value
 134+ 0000 ~                                    cp      value
 135+ 0000 ~                                    ret     z
 136+ 0000                                      ENDM
 137+ 0000
# file closed: ./Macros/returnMacros.asm
  65  0000                                      INCLUDE "./Macros/ShiftMacros.asm"
# file opened: ./Macros/ShiftMacros.asm
   1+ 0000              ShiftIYRight1: MACRO
   2+ 0000 ~            			   ld 	a,iyh
   3+ 0000 ~            			   srl 	a
   4+ 0000 ~            			   ld	iyh,a
   5+ 0000 ~            			   ld 	a,iyl
   6+ 0000 ~            			   rra
   7+ 0000 ~            			   ld	iyl,a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000              ShiftHLRight1: MACRO
  11+ 0000 ~            			   srl h
  12+ 0000 ~            			   rr  l
  13+ 0000              			   ENDM
  14+ 0000
  15+ 0000              ShiftDERight1: MACRO
  16+ 0000 ~            			   srl d
  17+ 0000 ~            			   rr  e
  18+ 0000              			   ENDM
  19+ 0000
  20+ 0000              ShiftBCRight1: MACRO
  21+ 0000 ~            			   srl b
  22+ 0000 ~            			   rr  c
  23+ 0000              			   ENDM
  24+ 0000
  25+ 0000
  26+ 0000
  27+ 0000              ShiftHLDiv8:   MACRO
  28+ 0000 ~            			   srl h
  29+ 0000 ~            			   rr  l
  30+ 0000 ~            			   srl h
  31+ 0000 ~            			   rr  l
  32+ 0000 ~            			   srl h
  33+ 0000 ~            			   rr  l
  34+ 0000              			   ENDM
  35+ 0000
  36+ 0000              ShiftHLLeft1:  MACRO
  37+ 0000 ~            			   sla l
  38+ 0000 ~            			   rl  h
  39+ 0000              			   ENDM
  40+ 0000
  41+ 0000              ShiftDELeft1:  MACRO
  42+ 0000 ~            			   sla e
  43+ 0000 ~            			   rl  d
  44+ 0000              			   ENDM
  45+ 0000
  46+ 0000
  47+ 0000              RollDELeft1:   MACRO
  48+ 0000 ~                           rl  e
  49+ 0000 ~                           rl  d
  50+ 0000                             ENDM
  51+ 0000
  52+ 0000              ShiftBCLeft1:  MACRO
  53+ 0000 ~            			   sla c
  54+ 0000 ~            			   rl  b
  55+ 0000              			   ENDM
  56+ 0000
  57+ 0000
  58+ 0000              ShiftMem16Right1:   MACRO memaddr
  59+ 0000 ~                                ld    hl,(memaddr)
  60+ 0000 ~                                srl   h
  61+ 0000 ~                                rr    l
  62+ 0000 ~                                ld    (memaddr),hl
  63+ 0000                                  ENDM
  64+ 0000
  65+ 0000              ShiftMem8Right1:    MACRO memaddr
  66+ 0000 ~                                ld      a,(memaddr)
  67+ 0000 ~                                srl     a
  68+ 0000 ~                                ld      (memaddr),a
  69+ 0000                                  ENDM
  70+ 0000
  71+ 0000
  72+ 0000              ShiftMem8Left1A:    MACRO memaddr
  73+ 0000 ~                                ld      a,(memaddr)
  74+ 0000 ~                                sla     a
  75+ 0000 ~                                ld      (memaddr),a
  76+ 0000                                  ENDM
  77+ 0000
# file closed: ./Macros/ShiftMacros.asm
  66  0000                                      INCLUDE "./Macros/signBitMacros.asm"
# file opened: ./Macros/signBitMacros.asm
   1+ 0000              SetMemBitN              MACRO mem,bitnbr
   2+ 0000 ~                                    ld      hl,mem
   3+ 0000 ~                                    set     bitnbr,(hl)
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearMemBitN            MACRO mem,bitnbr
   7+ 0000 ~                                    ld      hl,mem
   8+ 0000 ~                                    res     bitnbr,(hl)
   9+ 0000                                      ENDM
  10+ 0000
  11+ 0000
  12+ 0000              ClearSignBitMem:        MACRO mem
  13+ 0000 ~                                    ld      a,(mem)
  14+ 0000 ~                                    and     SignMask8Bit
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetSignBitMem:          MACRO   mem
  19+ 0000 ~                                    ld      a,(mem)
  20+ 0000 ~                                    or      SignOnly8Bit
  21+ 0000 ~                                    ld      (mem),a
  22+ 0000                                      ENDM
  23+ 0000
  24+ 0000              FlipSignMem:            MACRO mem
  25+ 0000 ~                                    ld  a,(mem)
  26+ 0000 ~                                    xor SignOnly8Bit
  27+ 0000 ~                                    ld  (mem),a
  28+ 0000                                      ENDM
  29+ 0000
  30+ 0000              SignBitOnlyMem:         MACRO mem
  31+ 0000 ~                                    ld      a, (mem)
  32+ 0000 ~                                    and     SignOnly8Bit
  33+ 0000 ~                                    ld      (mem),a
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              ClearSignBit:           MACRO reg
  37+ 0000 ~                                    ld      a,reg
  38+ 0000 ~                                    and     SignMask8Bit
  39+ 0000 ~                                    ld      reg,a
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              SetSignBit:             MACRO   reg
  43+ 0000 ~                                    ld      a,reg
  44+ 0000 ~                                    or      SignOnly8Bit
  45+ 0000 ~                                    ld      reg,a
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              FlipSignBit:            MACRO   reg
  49+ 0000 ~                                    ld      a, reg
  50+ 0000 ~                                    xor     SignOnly8Bit
  51+ 0000 ~                                    ld      reg,a
  52+ 0000                                      ENDM
  53+ 0000
  54+ 0000              SignBitOnly:            MACRO   reg
  55+ 0000 ~                                    ld      a, reg
  56+ 0000 ~                                    and     SignOnly8Bit
  57+ 0000 ~                                    ld      reg,a
  58+ 0000                                      ENDM
  59+ 0000
  60+ 0000              ClearSignBitA:          MACRO
  61+ 0000 ~                                    and     SignMask8Bit
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              SetSignBitA:            MACRO
  65+ 0000 ~                                    or      SignOnly8Bit
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              FlipSignBitA:           MACRO
  69+ 0000 ~                                    xor     SignOnly8Bit
  70+ 0000                                      ENDM
  71+ 0000
  72+ 0000              SignBitOnlyA:           MACRO
  73+ 0000 ~                                    and     SignOnly8Bit
  74+ 0000                                      ENDM
# file closed: ./Macros/signBitMacros.asm
  67  0000                                      INCLUDE "./Tables/message_queue_macros.asm"
# file opened: ./Tables/message_queue_macros.asm
   1+ 0000
   2+ 0000              AnyMessagesMacro:       MACRO   NoMessageTarget
   3+ 0000 ~                                    ld      a, (MessageCount)
   4+ 0000 ~                                    and     a
   5+ 0000 ~                                    jr      z, NoMessageTarget
   6+ 0000                                      ENDM
   7+ 0000
   8+ 0000              AnyHyperSpaceMacro:     MACRO   NoMessageText
   9+ 0000 ~                                    ld      hl,(InnerHyperCount)
  10+ 0000 ~                                    ld      a,h
  11+ 0000 ~                                    or      l
  12+ 0000 ~                                    jr      z, NoMessageText
  13+ 0000                                      ENDM
  14+ 0000
# file closed: ./Tables/message_queue_macros.asm
  68  0000                                      INCLUDE "./Variables/general_variables_macros.asm"
# file opened: ./Variables/general_variables_macros.asm
   1+ 0000              ; limited to 255 character length
   2+ 0000              CountLengthHL:          MACRO   Limiter
   3+ 0000 ~                                    ld      de,hl
   4+ 0000 ~                                    ld      bc,Limiter
   5+ 0000 ~                                    xor     a
   6+ 0000 ~                                    cpir
   7+ 0000 ~                                    ClearCarryFlag
   8+ 0000 ~                                    sbc     hl,de
   9+ 0000 ~                                    ld      a,l
  10+ 0000 ~                                    ret
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              HalfLengthHL:           MACRO
  14+ 0000 ~                                    ld      b,0
  15+ 0000 ~            .CountLenLoop:          ld      a,(hl)
  16+ 0000 ~                                    cp      0
  17+ 0000 ~                                    jr      z,.DoneCount
  18+ 0000 ~                                    inc     b
  19+ 0000 ~                                    inc     hl
  20+ 0000 ~                                    jr      .CountLenLoop
  21+ 0000 ~            .DoneCount:             ld      a,32
  22+ 0000 ~                                    sub     b
  23+ 0000 ~                                    sra     a
  24+ 0000                                      ENDM
  25+ 0000
  26+ 0000              MakeInnocentMacro:		MACRO
  27+ 0000 ~            						xor		a
  28+ 0000 ~            						ld		(FugitiveInnocentStatus),a
  29+ 0000              						ENDM
  30+ 0000
  31+ 0000              NoEscapePodMacro:		MACRO
  32+ 0000 ~            						xor		a
  33+ 0000 ~            						ld		(EscapePod),a
  34+ 0000              						ENDM
  35+ 0000
  36+ 0000              MaxFuelLevel            EQU     70              ; 7.0 light years max
  37+ 0000              MaxFuelMacro:			MACRO
  38+ 0000 ~            						ld		a,MaxFuelLevel
  39+ 0000 ~            						ld		(Fuel),a
  40+ 0000              						ENDM
  41+ 0000
  42+ 0000              MaxThrottle:            MACRO
  43+ 0000 ~                                    ld      a,(SHIPMAXSPEED)
  44+ 0000 ~                                    ld      (DELTA),a
  45+ 0000 ~                                    ld      d,a
  46+ 0000 ~                                    ld      e,4
  47+ 0000 ~                                    mul
  48+ 0000 ~                                    ld      (DELT4Lo),de
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              ZeroThrottle:           MACRO
  52+ 0000 ~                                    xor     a
  53+ 0000 ~                                    ld      (DELTA),a
  54+ 0000 ~                                    ld      (DELT4Lo),a
  55+ 0000 ~                                    ld      (DELT4Lo+1),a
  56+ 0000                                      ENDM
  57+ 0000
  58+ 0000              ZeroPitch:              MACRO
  59+ 0000 ~                                    xor     a
  60+ 0000 ~                                    ld      (BET2),a
  61+ 0000 ~                                    ld      (BET2FLIP),a
  62+ 0000 ~                                    ld      (JSTY),a
  63+ 0000 ~                                    ld      (BETA),a
  64+ 0000                                      ENDM
  65+ 0000
  66+ 0000              ZeroRoll:               MACRO
  67+ 0000 ~                                    xor     a                              ; zero roll and climb
  68+ 0000 ~                                    ld      (ALP2),a
  69+ 0000 ~                                    ld      (ALP2FLIP),a
  70+ 0000 ~                                    ld      (JSTX),a
  71+ 0000 ~                                    ld      (ALPHA),a
  72+ 0000                                      ENDM
  73+ 0000
  74+ 0000              CorrectPostJumpFuel:    MACRO
  75+ 0000 ~                                    ld      a,(Fuel)
  76+ 0000 ~                                    ld      hl,Distance
  77+ 0000 ~                                    sub     a,(hl)
  78+ 0000 ~                                    ld      (Fuel),a
  79+ 0000                                      ENDM
  80+ 0000
  81+ 0000              AnyMissilesLeft:        MACRO
  82+ 0000 ~                                    ld      a,(NbrMissiles)
  83+ 0000 ~                                    and     a
  84+ 0000                                      ENDM
  85+ 0000
  86+ 0000              SetMissileTargetA:      MACRO
  87+ 0000 ~                                    ld      (MissileTargettingFlag),a   ; Set to slot number clearing bit 7
  88+ 0000                                      ENDM
  89+ 0000
  90+ 0000              ClearMissileTarget:     MACRO
  91+ 0000 ~                                    ld      a,StageMissileNoTarget
  92+ 0000 ~                                    ld      (MissileTargettingFlag),a           ; reset targetting
  93+ 0000                                      ENDM
  94+ 0000
  95+ 0000              ; Clear targetting bits which signals launch if lower nibble has selected target
  96+ 0000              SetMissileLaunch:       MACRO
  97+ 0000 ~                                    ld      a,(MissileTargettingFlag)
  98+ 0000 ~                                    and     $0F
  99+ 0000 ~                                    ld      (MissileTargettingFlag),a
 100+ 0000                                      ENDM
 101+ 0000
 102+ 0000              LockMissileToA:         MACRO
 103+ 0000 ~                                    or      $80
 104+ 0000 ~                                    ld      (MissileTargettingFlag),a
 105+ 0000                                      ENDM
 106+ 0000
 107+ 0000              ClearECM:               MACRO
 108+ 0000 ~                                    xor     a
 109+ 0000 ~                                    ld      (ECMCountDown),a
 110+ 0000                                      ENDM
 111+ 0000
 112+ 0000
 113+ 0000              ; Will check to see if bit 2 is set, if it is clear, then friendly hence z is set
 114+ 0000              ;                                    if hit is set then hostile hence z is not set
 115+ 0000              IsShipFriendly:         MACRO
 116+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 117+ 0000 ~                                    and     ShipNotHostile                  ; mask so we only have hostile bit
 118+ 0000                                      ENDM
 119+ 0000
 120+ 0000              ; Will check to see if bit 5 is set, if clear, then not exploding z clear
 121+ 0000              ;                                    if set    then exploding     z set
 122+ 0000              IsShipExploding:        MACRO
 123+ 0000 ~                                    ld      a,(UBnkaiatkecm)
 124+ 0000 ~                                    and     ShipExploding
 125+ 0000                                      ENDM
 126+ 0000
 127+ 0000              UpdateLaserOnCounter:   MACRO
 128+ 0000 ~                                    ld      a,(CurrLaserPulseOnCount)
 129+ 0000 ~                                    and     a
 130+ 0000 ~                                    jr      z,.LaserOnIsDone
 131+ 0000 ~                                    dec     a
 132+ 0000 ~                                    ld      (CurrLaserPulseOnCount),a
 133+ 0000 ~                                    jr      z,.LaserOnIsDone
 134+ 0000 ~                                    ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount
 135+ 0000 ~            .LaserOnIsDone:
 136+ 0000                                      ENDM
 137+ 0000
 138+ 0000              UpdateLaserOffCounter:  MACRO
 139+ 0000 ~                                    ld      a,(CurrLaserPulseOffTime)
 140+ 0000 ~                                    and     a
 141+ 0000 ~                                    jr      z,.LaserOffIsDone
 142+ 0000 ~                                    dec     a
 143+ 0000 ~                                    ld      (CurrLaserPulseOffTime),a
 144+ 0000 ~                                    jr      z,.LaserOffIsDone
 145+ 0000 ~                                    ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount
 146+ 0000 ~            .LaserOffIsDone:
 147+ 0000                                      ENDM
 148+ 0000
 149+ 0000              UpdateLaserRestCounter: MACRO
 150+ 0000 ~                                    ld      a,(CurrLaserPulseRestCount)
 151+ 0000 ~                                    and     a
 152+ 0000 ~                                    jr      z,.LaserRestIsDone
 153+ 0000 ~                                    dec     a
 154+ 0000 ~                                    ld      (CurrLaserPulseRestCount),a
 155+ 0000 ~                                    jr      z,.LaserRestIsDone
 156+ 0000 ~                                    ZeroA                                                                           ;    then pulse rate count = 0
 157+ 0000 ~                                    ld      (CurrLaserPulseRateCount),a                                             ;    .
 158+ 0000 ~            .LaserRestIsDone
 159+ 0000                                      ENDM
 160+ 0000
 161+ 0000              ChargeEnergyAndShields: MACRO
 162+ 0000 ~                                    ld      a,$FF
 163+ 0000 ~                                    ld      (PlayerEnergy),a
 164+ 0000 ~                                    ld      (ForeShield),a
 165+ 0000 ~                                    ld      (AftShield),a
 166+ 0000                                      ENDM
 167+ 0000
 168+ 0000              CopyPresentSystemToTarget: MACRO
 169+ 0000 ~                                    ld      hl,(PresentSystemX)
 170+ 0000 ~                                    ld      (TargetSystemX),hl
 171+ 0000                                      ENDM
 172+ 0000
 173+ 0000              CopyTargetSystemToPresent: MACRO
 174+ 0000 ~                                    ld      hl,(TargetSystemX)
 175+ 0000 ~                                    ld      (PresentSystemX),hl
 176+ 0000                                      ENDM
 177+ 0000
 178+ 0000              HalveFugitiveStatus:    MACRO
 179+ 0000 ~                                    ld      hl,FugitiveInnocentStatus
 180+ 0000 ~                                    srl     (hl)
 181+ 0000                                      ENDM
 182+ 0000
 183+ 0000              ClearForceTransition    MACRO
 184+ 0000 ~                                    ld      a,$FF
 185+ 0000 ~                                    ld      (ScreenTransitionForced),a
 186+ 0000                                      ENDM
 187+ 0000
 188+ 0000              ForceTransition:        MACRO newScreen
 189+ 0000 ~                                    ld      a,newScreen
 190+ 0000 ~                                    ld      (ScreenTransitionForced), a
 191+ 0000                                      ENDM
 192+ 0000
 193+ 0000              IsSpaceStationPresent:  MACRO
 194+ 0000 ~                                    ld      a,(SpaceStationSafeZone)
 195+ 0000 ~                                    and     a
 196+ 0000                                      ENDM
 197+ 0000
 198+ 0000              SetSafeZone:            MACRO
 199+ 0000 ~                                    xor     a
 200+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 201+ 0000                                      ENDM
 202+ 0000
 203+ 0000              ClearSafeZone:          MACRO
 204+ 0000 ~                                    ld      a,$FF
 205+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 206+ 0000                                      ENDM
 207+ 0000
 208+ 0000              ClearTemperatures:      MACRO
 209+ 0000 ~                                    xor     a
 210+ 0000 ~                                    ld      (CabinTemperature),a
 211+ 0000 ~                                    ld      (GunTemperature),a
 212+ 0000                                      ENDM
 213+ 0000
 214+ 0000              CoolCabin:              MACRO
 215+ 0000 ~                                    ld      a,(CabinTemperature)
 216+ 0000 ~                                    and     a
 217+ 0000 ~                                    jr      z,.AlreadyCool
 218+ 0000 ~                                    dec     a
 219+ 0000 ~                                    ld      (CabinTemperature),a
 220+ 0000 ~            .AlreadyCool:
 221+ 0000                                      ENDM
 222+ 0000
 223+ 0000              CoolLasers:             MACRO
 224+ 0000 ~                                    ld      a,(GunTemperature)
 225+ 0000 ~                                    and     a
 226+ 0000 ~                                    jr      z,.AlreadyCool
 227+ 0000 ~                                    dec     a
 228+ 0000 ~                                    ld      (GunTemperature),a
 229+ 0000 ~            .AlreadyCool:
 230+ 0000                                      ENDM
 231+ 0000
 232+ 0000              ; type 255 is "not fitted"
 233+ 0000
 234+ 0000
 235+ 0000              InitEventCounter:       MACRO
 236+ 0000 ~                                    xor     a
 237+ 0000 ~                                    ld      (EventCounter),a
 238+ 0000                                      ENDM
 239+ 0000
 240+ 0000              ClearMissJump:          MACRO
 241+ 0000 ~                                    ld      a,$FF
 242+ 0000 ~                                    ld      (MissJumpFlag),a
 243+ 0000                                      ENDM
 244+ 0000
 245+ 0000
 246+ 0000              DrainSystem:            MACRO   SystemMem, DrainMem
 247+ 0000 ~                                    ld      a,(DrainMem)
 248+ 0000 ~                                    ld      b,a
 249+ 0000 ~                                    ld      a,(SystemMem)
 250+ 0000 ~                                    sub     a,b
 251+ 0000 ~                                    ld      (SystemMem),a
 252+ 0000 ~                                    jr      c,.ZeroSystem
 253+ 0000 ~                                    jp      .ExitPoint
 254+ 0000 ~            .ZeroSystem:            ZeroA
 255+ 0000 ~                                    ld      (SystemMem),a
 256+ 0000 ~            .ExitPoint
 257+ 0000                                      ENDM
 258+ 0000
 259+ 0000              BoostSystem:            MACRO   SystemMem, BoostMem
 260+ 0000 ~                                    ld      a,(BoostMem)
 261+ 0000 ~                                    ld      b,a
 262+ 0000 ~                                    ld      a,(SystemMem)
 263+ 0000 ~                                    add     b
 264+ 0000 ~                                    ld      (SystemMem),a
 265+ 0000 ~                                    jr      c, .MaxSystem
 266+ 0000 ~                                    jp      .ExitPoint
 267+ 0000 ~            .MaxSystem:             ld      a,255
 268+ 0000 ~                                    ld      (SystemMem),a
 269+ 0000 ~            .ExitPoint
 270+ 0000                                      ENDM
 271+ 0000
# file closed: ./Variables/general_variables_macros.asm
  69  0000                                      INCLUDE "./Variables/UniverseSlot_macros.asm"
# file opened: ./Variables/UniverseSlot_macros.asm
   1+ 0000
   2+ 0000              AddJunkCount:           MACRO
   3+ 0000 ~                                    ld      hl,JunkCount
   4+ 0000 ~                                    inc     (hl)
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              SubJunkCount:           MACRO
   8+ 0000 ~                                    ld      hl,JunkCount
   9+ 0000 ~                                    dec     (hl)
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              AddCop:                 MACRO
  13+ 0000 ~                                    ld      hl,CopCount
  14+ 0000 ~                                    inc     (hl)
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              SubCop:                 MACRO
  18+ 0000 ~                                    ld      hl,CopCount
  19+ 0000 ~                                    dec     (hl)
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              AddPirateCount:         MACRO
  23+ 0000 ~                                    ld      hl,PirateCount
  24+ 0000 ~                                    inc     (hl)
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              SubPirateCount:         MACRO
  28+ 0000 ~                                    ld      hl,PirateCount
  29+ 0000 ~                                    inc     (hl)
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              AreCopsPresent:         MACRO
  33+ 0000 ~                                    ld      a,(CopCount)
  34+ 0000 ~                                    and     a
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              ; Class == shiptype
  38+ 0000              SetSlotAToUnivClass:    MACRO
  39+ 0000 ~                                    ex      af,af'
  40+ 0000 ~                                    ld      a,(ShipTypeAddr)
  41+ 0000 ~                                    ld      b,a
  42+ 0000 ~                                    ex      af,af'
  43+ 0000 ~                                    call    SetSlotAToClassB
  44+ 0000                                      ENDM
  45+ 0000
  46+ 0000              TestRoomForJunk:        MACRO   Target
  47+ 0000 ~                                    ld      a,3
  48+ 0000 ~                                    JumpIfALTMemusng    JunkCount, Target
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              JumpIfSpaceStation:     MACRO   Target
  52+ 0000 ~                                    ld      hl,UniverseSlotType
  53+ 0000 ~                                    ld      a,(hl)
  54+ 0000 ~                                    cp      ShipTypeStation
  55+ 0000                                      ENDM
  56+ 0000
  57+ 0000              ClearSlotMem:           MACRO   mem
  58+ 0000 ~                                    ld      a,(mem)
  59+ 0000 ~                                    call    ClearSlotA
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              IsSlotEmpty:            MACRO
  63+ 0000 ~                                    ld      hl,UniverseSlotList
  64+ 0000 ~                                    add     hl,a
  65+ 0000 ~                                    ld      a,(hl)
  66+ 0000 ~                                    cp      0
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              IsSlotMissile:          MACRO
  70+ 0000 ~                                    ld      hl,UniverseSlotType
  71+ 0000 ~                                    ld      a,(hl)
  72+ 0000 ~                                    cp      ShipTypeMissile
  73+ 0000                                      ENDM
  74+ 0000
  75+ 0000              ; Checks if slot is empty else A = ship type
  76+ 0000              ReturnIfSlotAEmpty:     MACRO
  77+ 0000 ~                                    ld      hl,UniverseSlotList
  78+ 0000 ~                                    add     hl,a
  79+ 0000 ~                                    ld      a,(hl)
  80+ 0000 ~                                    inc     a
  81+ 0000 ~                                    ret     z           ; if slot was ff inc would make it 0
  82+ 0000 ~                                    dec     a           ; get original value back for later
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              JumpIfSlotAEmpty:       MACRO   Target
  86+ 0000 ~                                    ld      hl,UniverseSlotList
  87+ 0000 ~                                    add     hl,a
  88+ 0000 ~                                    ld      a,(hl)
  89+ 0000 ~                                    inc     a
  90+ 0000 ~                                    jp      z,Target    ; if slot was ff inc would make it 0
  91+ 0000 ~                                    dec     a           ; get original value back for later
  92+ 0000                                      ENDM
  93+ 0000
  94+ 0000              JumpIfSlotHLEmpty:      MACRO   Target
  95+ 0000 ~                                    ld      a,(hl)
  96+ 0000 ~                                    and     a
  97+ 0000 ~                                    jr      nz,Target
  98+ 0000                                      ENDM
# file closed: ./Variables/UniverseSlot_macros.asm
  70  0000
  71  0000                                      INCLUDE "./Data/ShipIdEquates.asm"
# file opened: ./Data/ShipIdEquates.asm
   1+ 0000              ShipID_Adder            EQU 00
   2+ 0000              ShipID_Anaconda         EQU 01
   3+ 0000              ShipID_Asp_Mk_2         EQU 02
   4+ 0000              ShipID_Boa              EQU 03
   5+ 0000              ShipID_CargoType5       EQU 04
   6+ 0000              ShipID_Boulder          EQU 05
   7+ 0000              ShipID_Asteroid         EQU 06
   8+ 0000              ShipID_Bushmaster       EQU 07
   9+ 0000              ShipID_Chameleon        EQU 08
  10+ 0000              ShipID_CobraMk3         EQU 09
  11+ 0000              ShipID_Cobra_Mk_1       EQU 10
  12+ 0000              ShipID_Cobra_Mk_3_P     EQU 11
  13+ 0000              ShipID_Constrictor      EQU 12
  14+ 0000              ShipID_Coriolis         EQU 13
  15+ 0000              ShipID_Cougar           EQU 14
  16+ 0000              ShipID_Dodo             EQU 15
  17+ 0000              ShipID_Dragon           EQU 16
  18+ 0000              ShipID_Escape_Pod       EQU 17
  19+ 0000              ShipID_Fer_De_Lance     EQU 18
  20+ 0000              ShipID_Gecko            EQU 19
  21+ 0000              ShipID_Ghavial          EQU 20
  22+ 0000              ShipID_Iguana           EQU 21
  23+ 0000              ShipID_Krait            EQU 22
  24+ 0000              ShipID_Logo             EQU 23
  25+ 0000              ShipID_Mamba            EQU 24
  26+ 0000              ShipID_Missile          EQU 25
  27+ 0000              ShipID_Monitor          EQU 26
  28+ 0000              ShipID_Moray            EQU 27
  29+ 0000              ShipID_Ophidian         EQU 28
  30+ 0000              ShipID_Plate            EQU 29
  31+ 0000              ShipID_Python           EQU 30
  32+ 0000              ShipID_Python_P         EQU 31
  33+ 0000              ShipID_Rock_Hermit      EQU 32
  34+ 0000              ShipID_ShuttleType9     EQU 33
  35+ 0000              ShipID_Shuttle_Mk_2     EQU 34
  36+ 0000              ShipID_Sidewinder       EQU 35
  37+ 0000              ShipID_Splinter         EQU 36
  38+ 0000              ShipID_TestVector       EQU 37
  39+ 0000              ShipID_Thargoid         EQU 38
  40+ 0000              ShipID_Thargon          EQU 39
  41+ 0000              ShipID_TransportType10  EQU 40
  42+ 0000              ShipID_Viper            EQU 41
  43+ 0000              ShipID_Worm             EQU 42
  44+ 0000              ShipID_Rattler          EQU 43
  45+ 0000
# file closed: ./Data/ShipIdEquates.asm
  72  0000
  73  0000
  74  0000
  75  0000              UpdateLaserCountersold: MACRO
  76  0000 ~                                    JumpIfMemZero CurrLaserPulseOnCount,   .SkipPulseOn     ; if beam on count > 0 then beam on count --
  77  0000 ~                                    dec     a                                               ; .
  78  0000 ~                                    ld      (CurrLaserPulseOnCount),a                       ; .
  79  0000 ~            .SkipPulseOn:           JumpIfAIsNotZero  .SkipRestCounter                      ;    if beam on = 0 then
  80  0000 ~                                    ld      a,(CurrLaserPulseOffCount)                      ;       if beam off > 0 then  beam off --
  81  0000 ~                                    JumpIfMemZero CurrLaserPulseOffCount, .SkipPulseOff     ;       .
  82  0000 ~                                    dec     a                                               ;       .
  83  0000 ~                                    ld      (CurrLaserPulseOffCount),a                      ;       .
  84  0000 ~            .SkipPulseOff:          JumpIfAIsNotZero  .SkipRestCounter                      ;       if beam off = 0
  85  0000 ~                                    JumpIfMemZero CurrLaserPulseRestCount, .ZeroRateCounter ;
  86  0000 ~                                    dec     a
  87  0000 ~                                    ld      (CurrLaserPulseRestCount),a
  88  0000 ~                                    jr      nz,.SkipRestCounter
  89  0000 ~            .ZeroRateCounter:       ld      (CurrLaserPulseRateCount),a
  90  0000 ~            .SkipRestCounter:
  91  0000                                      ENDM
  92  0000
  93  0000              MessageAt:              MACRO   x,y,message
  94  0000 ~                                    MMUSelectLayer1
  95  0000 ~                                    ld      d,y
  96  0000 ~                                    ld      e,x
  97  0000 ~                                    ld      hl,message
  98  0000 ~                                    call    l1_print_at_wrap
  99  0000                                      ENDM
 100  0000
 101  0000              SetBorder:              MACRO   value
 102  0000 ~                                    MMUSelectLayer1
 103  0000 ~                                    ld          a,value
 104  0000 ~                                    call        l1_set_border
 105  0000                                      ENDM
 106  0000
 107  0000              charactersetaddr		equ 15360
 108  0000              STEPDEBUG               equ 1
 109  0000
 110  0000              TopOfStack              equ $6100
 111  0000
 112  0000                                      ORG         $6200
 113  6200 F3           EliteNextStartup:       di
 114  6201 CD 2F A2     .InitiliseFileIO:       call        GetDefaultDrive
 115  6204              .InitialiseLayerOrder:
 116  6204                                      DISPLAY "Starting Assembly At ", EliteNextStartup
 117  6204                                      ; "STARTUP"
 118  6204                                      ; Make sure  rom is in page 0 during load
 119  6204                                      MMUSelectSpriteBank
 119  6204 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 120  6208 CD 94 E5                             call		init_sprites
 121  620B                                      MMUSelectLayer2
 121  620B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 122  620F CD 0E E0                             call        asm_disable_l2_readwrite
 123  6212                                      MMUSelectROMS
 123  6212 ED 91 50 FF >                     nextreg EXSDOSMMU0,        BankROM
 123  6216 ED 91 51 FF >                     nextreg EXSDOSMMU1,        BankROM
 124  621A              .GenerateDefaultCmdr:   MMUSelectCommander
 124  621A ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 125  621E CD 45 E2                             call		defaultCommander
 126  6221 CD 18 E2                             call        saveCommander
 127  6224                                      MMUSelectLayer1
 127  6224 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 128  6228 CD 80 E0                             call		l1_cls
 129  622B 3E 07                                ld			a,7
 130  622D CD 9B E0                             call		l1_attr_cls_to_a
 131  6230                                      SetBorder   $FF
 131  6230             >                        MMUSelectLayer1
 131  6230 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 131  6234 3E FF       >                        ld          a,$FF
 131  6236 CD A5 E0    >                        call        l1_set_border
 132  6239              .InitialiseL2:          MMUSelectLayer2
 132  6239 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 133  623D CD 06 E1                             call 		l2_initialise
 134  6240 CD FF E0                             call		l2_cls
 135  6243              .InitialisingMessage:   MessageAt   0,0,InitialiseMessage
 135  6243             >                        MMUSelectLayer1
 135  6243 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 135  6247 16 00       >                        ld      d,0
 135  6249 1E 00       >                        ld      e,0
 135  624B 21 9E 68    >                        ld      hl,InitialiseMessage
 135  624E CD 15 E1    >                        call    l1_print_at_wrap
 136  6251                                      SetBorder   $01
 136  6251             >                        MMUSelectLayer1
 136  6251 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 136  6255 3E 01       >                        ld          a,$01
 136  6257 CD A5 E0    >                        call        l1_set_border
 137  625A                                      MessageAt   0,8,LoadingSpritesMessage
 137  625A             >                        MMUSelectLayer1
 137  625A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 137  625E 16 08       >                        ld      d,8
 137  6260 1E 00       >                        ld      e,0
 137  6262 21 AA 68    >                        ld      hl,LoadingSpritesMessage
 137  6265 CD 15 E1    >                        call    l1_print_at_wrap
 138  6268                                      ZeroA
 138  6268 AF          >                        xor a
 139  6269 32 CE 68                             ld          (LoadCounter),a
 140  626C              .StreamSpriteData:      MMUSelectSpriteBank
 140  626C ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 141  6270 CD 20 E6                             call        load_pattern_files; load_sprite_patterns
 142  6273              ;                        call        stream_open_sprite_file
 143  6273              ;                        ld          e,0
 144  6273              ;                        ld          d,29
 145  6273              ;.LoadLoop:              push        de
 146  6273              ;                        push        af
 147  6273              ;                        SetBorder   $02
 148  6273              ;                        ld          a,e
 149  6273              ;                        MMUSelectSpriteBank
 150  6273              ;                        call        stream_select_sprite_a
 151  6273              ;                        pop         af
 152  6273              ;                        MMUSelectSpriteBank
 153  6273              ;                        call        stream_load_sprite
 154  6273              ;                        pop         de
 155  6273              ;                        inc         e
 156  6273              ;                        dec         d
 157  6273              ;                        push        af,,de,,hl,,ix,,iy
 158  6273              ;                        ld          a,(LoadCounter)
 159  6273              ;                        ld          d,16
 160  6273              ;                        ld          e,a
 161  6273              ;                        add         8
 162  6273              ;                        ld          (LoadCounter),a
 163  6273              ;                        ld          hl,SpriteProgress
 164  6273              ;                        MMUSelectLayer1
 165  6273              ;                        call        l1_print_at_wrap
 166  6273              ;                        SetBorder   $03
 167  6273              ;                        pop         af,,de,,hl,,ix,,iy
 168  6273              ;                        jr          nz,.LoadLoop
 169  6273              ;                        SetBorder   $04
 170  6273              ;                        MMUSelectSpriteBank
 171  6273              ;                        call        stream_close_spr_file_a
 172  6273 CD A1 7D                             call        init_keyboard
 173  6276              .PostDiag:                          ClearForceTransition
 173  6276 3E FF       >                        ld      a,$FF
 173  6278 32 86 6B    >                        ld      (ScreenTransitionForced),a
 174  627B                                      SetBorder   $04
 174  627B             >                        MMUSelectLayer1
 174  627B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 174  627F 3E 04       >                        ld          a,$04
 174  6281 CD A5 E0    >                        call        l1_set_border
 175  6284                                      MMUSelectSpriteBank
 175  6284 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 176  6288 CD AF E5                             call        sprite_diagnostic
 177  628B                                      SetBorder   $05
 177  628B             >                        MMUSelectLayer1
 177  628B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 177  628F 3E 05       >                        ld          a,$05
 177  6291 CD A5 E0    >                        call        l1_set_border
 178  6294 CD 5D 7E     .PostDiag2:             call        WaitForAnyKey
 179  6297                                      MMUSelectSpriteBank
 179  6297 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 180  629B CD 9F E5                             call        sprite_diagnostic_clear
 181  629E CD 5D 7E                             call        WaitForAnyKey
 182  62A1 3E 10        TidyDEBUG:              ld          a,16
 183  62A3 32 42 6A                             ld          (TidyCounter),a
 184  62A6 AF           TestText:               xor			a
 185  62A7 32 25 80                             ld      (JSTX),a
 186  62AA              DEBUGCODE:              ClearSafeZone ; just set in open space so compas treacks su n
 186  62AA 3E FF       >                        ld      a,$FF
 186  62AC 32 01 82    >                        ld      (SpaceStationSafeZone),a
 187  62AF                                      SetBorder   $06
 187  62AF             >                        MMUSelectLayer1
 187  62AF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 187  62B3 3E 06       >                        ld          a,$06
 187  62B5 CD A5 E0    >                        call        l1_set_border
 188  62B8
 189  62B8
 190  62B8              .ClearLayer2Buffers:    DoubleBufferIfPossible
 190  62B8             >                        IFDEF DOUBLEBUFFER
 190  62B8             >                            MMUSelectLayer2
 190  62B8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 190  62BC CD FF E0    >                            call  l2_cls
 190  62BF CD 13 E1    >                            call  l2_flip_buffers
 190  62C2             >                        ENDIF
 191  62C2                                      DoubleBufferIfPossible
 191  62C2             >                        IFDEF DOUBLEBUFFER
 191  62C2             >                            MMUSelectLayer2
 191  62C2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 191  62C6 CD FF E0    >                            call  l2_cls
 191  62C9 CD 13 E1    >                            call  l2_flip_buffers
 191  62CC             >                        ENDIF
 192  62CC              ; Set up all 8 galaxies, 7later this will be pre built and loaded into memory from files
 193  62CC                                      SetBorder   $07
 193  62CC             >                        MMUSelectLayer1
 193  62CC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 193  62D0 3E 07       >                        ld          a,$07
 193  62D2 CD A5 E0    >                        call        l1_set_border
 194  62D5              InitialiseGalaxies:     MessageAt   0,24,InitialisingGalaxies
 194  62D5             >                        MMUSelectLayer1
 194  62D5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 194  62D9 16 18       >                        ld      d,24
 194  62DB 1E 00       >                        ld      e,0
 194  62DD 21 B9 68    >                        ld      hl,InitialisingGalaxies
 194  62E0 CD 15 E1    >                        call    l1_print_at_wrap
 195  62E3 CD 87 6B                             call		ResetUniv                       ; Reset ship data
 196  62E6 CD AF 6B                             call        ResetGalaxy                     ; Reset each galaxy copying in code
 197  62E9 CD D8 6B                             call        SeedAllGalaxies
 198  62EC                                      MMUSelectSpriteBank
 198  62EC ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 199  62F0 CD 8A E5                             call        sprite_cls_all
 200  62F3                                      MMUSelectLayer1
 200  62F3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 201  62F7 CD 80 E0                             call		l1_cls
 202  62FA                                      SetBorder   $00
 202  62FA             >                        MMUSelectLayer1
 202  62FA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 202  62FE 3E 00       >                        ld          a,$00
 202  6300 CD A5 E0    >                        call        l1_set_border
 203  6303 CD 6D 77     StartAttractMode:       call        AttractMode
 204  6306                                      JumpIfAIsZero  .SkipDefault
 204  6306 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 204  6307 CA 14 63    >                        jp	    z, .SkipDefault
 205  630A                                      MMUSelectCommander
 205  630A ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 206  630E CD 45 E2                             call		defaultCommander
 207  6311 C3 14 63                             jp          InitialiseMainLoop
 207  6314
 208  6314              .SkipDefault
 209  6314              ;                        call    FindNextFreeSlotInA
 210  6314              ;                        ld      b,a
 211  6314              ;                        ld      a,13 ;Coriolis station
 212  6314              ;                        call    InitialiseShipAUnivB
 213  6314              ;                        xor     a
 214  6314 CD 4A 85     InitialiseMainLoop:     call    InitMainLoop
 215  6317              ;..MAIN GAME LOOP..................................................................................................................
 216  6317              ; MACRO BLOCKS.....................................................................................................................
 217  6317              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
 218  6317
 219  6317
 220  6317
 221  6317              ; if beam on count > 0
 222  6317              ;    then beam on count --
 223  6317              ;         if beam on count = 0
 224  6317              ;            then beam off count = beam off
 225  6317              ; if beam off > 0
 226  6317              ;    then beam off --
 227  6317              ;         if beam off = 0 and pulse rate count = max count
 228  6317              ;            then pulse rest count = pulse rest
 229  6317              ; if pulse rest > 0 then pulse rest --
 230  6317              ;    if pulse rest = 0
 231  6317              ;       then pulse rate count = 0
 232  6317
 233  6317
 234  6317              ; counter logic
 235  6317              ;    if beam on count > 0 then beam on count --
 236  6317              ;    if beam on = 0 then
 237  6317              ;       if beam off count >0 then beam off count --
 238  6317              ;       if beam off count = 0 them
 239  6317              ;          if pulse rest count > 0 then pulse rest count --
 240  6317              ;             if reset count = 0 then pulse rate count = 0
 241  6317              ; shoting logic
 242  6317              ;    if pulse on count is 0 and pulse off count is 0 and rest count is 0
 243  6317              ;       then  if fire pressed is OK
 244  6317              ;                if not beam type
 245  6317              ;                   then pulse rate count ++
 246  6317              ;                        if pulse rate count < pulse max count
 247  6317              ;                           then pulse on count = pulse on time
 248  6317              ;                                pulse off count = pulse off time
 249  6317              ;                                pulse rest count = pulse rest time
 250  6317              ;                           else pulse rest count = pulse rest time
 251  6317              ;                                pulse rate count, pulse on count, pulse off count = 0
 252  6317              ;                   else pulse on count = $FF
 253  6317              ;                        pulse off time , rest time = 0
 254  6317
 255  6317              ;..................................................................................................................................
 256  6317                                      INCLUDE "./GameEngine/MainLoop.asm"
# file opened: ./GameEngine/MainLoop.asm
   1+ 6317                  DEFINE  MAINLOOP_UPDATE_LASERS
   2+ 6317                  DEFINE  MAINLOOP_COOL_LASERS
   3+ 6317                  DEFINE  MAINLOOP_ECM
   4+ 6317                  DEFINE  MAINLOOP_KEYBOARDSCAN
   5+ 6317              ;    DEFINE  MAINLOOP_DEMOSHIPS
   6+ 6317                  DEFINE  MAINLOOP_INPUTHANDLER
   7+ 6317                  DEFINE  MAINLOOP_EVENTHANDLER
   8+ 6317                  DEFINE  MAINLOOP_RECHARGE
   9+ 6317                  DEFINE  MAINLOOP_LAUNCHMISSILE
  10+ 6317                  DEFINE  MAINLOOP_UPDATEUNIVERSE
  11+ 6317 CD B2 86     MainLoop:	            call    doRandom                                                ; redo the seeds every frame
  12+ 631A                                  IFDEF MAINLOOP_UPDATE_LASERS
  13+ 631A                                      UpdateLaserOnCounter
  13+ 631A 3A 32 84    >                        ld      a,(CurrLaserPulseOnCount)
  13+ 631D A7          >                        and     a
  13+ 631E 28 0C       >                        jr      z,.LaserOnIsDone
  13+ 6320 3D          >                        dec     a
  13+ 6321 32 32 84    >                        ld      (CurrLaserPulseOnCount),a
  13+ 6324 28 06       >                        jr      z,.LaserOnIsDone
  13+ 6326             >                        ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount
  13+ 6326 3A 29 84    >                        ld       a,(CurrLaserPulseOffTime)
  13+ 6329 32 33 84    >                        ld       (CurrLaserPulseOffCount),a
  13+ 632C             >.LaserOnIsDone:
  14+ 632C                                      UpdateLaserOffCounter
  14+ 632C 3A 29 84    >                        ld      a,(CurrLaserPulseOffTime)
  14+ 632F A7          >                        and     a
  14+ 6330 28 0C       >                        jr      z,.LaserOffIsDone
  14+ 6332 3D          >                        dec     a
  14+ 6333 32 29 84    >                        ld      (CurrLaserPulseOffTime),a
  14+ 6336 28 06       >                        jr      z,.LaserOffIsDone
  14+ 6338             >                        ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount
  14+ 6338 3A 2A 84    >                        ld       a,(CurrLaserPulseRest)
  14+ 633B 32 34 84    >                        ld       (CurrLaserPulseRestCount),a
  14+ 633E             >.LaserOffIsDone:
  15+ 633E                                      UpdateLaserRestCounter
  15+ 633E 3A 34 84    >                        ld      a,(CurrLaserPulseRestCount)
  15+ 6341 A7          >                        and     a
  15+ 6342 28 0A       >                        jr      z,.LaserRestIsDone
  15+ 6344 3D          >                        dec     a
  15+ 6345 32 34 84    >                        ld      (CurrLaserPulseRestCount),a
  15+ 6348 28 04       >                        jr      z,.LaserRestIsDone
  15+ 634A             >                        ZeroA                                                                           ;    then pulse rate count = 0
  15+ 634A AF          >                        xor a
  15+ 634B 32 35 84    >                        ld      (CurrLaserPulseRateCount),a                                             ;    .
  15+ 634E             >.LaserRestIsDone
  16+ 634E                                  ENDIF
  17+ 634E                                  IFDEF MAINLOOP_COOL_LASERS
  18+ 634E                                      CoolLasers
  18+ 634E 3A 09 84    >                        ld      a,(GunTemperature)
  18+ 6351 A7          >                        and     a
  18+ 6352 28 04       >                        jr      z,.AlreadyCool
  18+ 6354 3D          >                        dec     a
  18+ 6355 32 09 84    >                        ld      (GunTemperature),a
  18+ 6358             >.AlreadyCool:
  19+ 6358                                  ENDIF
  20+ 6358                                  IFDEF MAINLOOP_ECM
  21+ 6358                                      INCLUDE "./GameEngine/MainLoop_ECM.asm"
# file opened: ././GameEngine/MainLoop_ECM.asm
   1++6358 3A 7F 81     .ReducePlayerECM:       ld      a,(PlayerECMActiveCount)
   2++635B A7                                   and     a
   3++635C CA 6E 63                             jp      z, .DonePlayerECM
   4++635F 3D                                   dec     a
   5++6360 32 7F 81                             ld      (PlayerECMActiveCount),a
   6++6363 3A 10 84                             ld      a,(PlayerEnergy)
   7++6366 A7                                   and     a
   8++6367 CA 6E 63                             jp      z, .DonePlayerECM
   9++636A 3D                                   dec     a
  10++636B 32 10 84                             ld      (PlayerEnergy),a
  11++636E              .DonePlayerECM:
  12++636E 3A 23 80     .ReduceCommonECM:       ld      a,(ECMCountDown)
  13++6371 A7                                   and     a
  14++6372 CA 79 63                             jp      z, .DoneCommonECM
  15++6375 3D                                   dec     a
  16++6376 32 23 80                             ld      (ECMCountDown),a
  17++6379              .DoneCommonECM:
  18++6379
# file closed: ././GameEngine/MainLoop_ECM.asm
  22+ 6379                                  ENDIF
  23+ 6379                                  IFDEF MAINLOOP_KEYBOARDSCAN
  24+ 6379 CD AD 7D                             call    scan_keyboard                                           ; perform the physical input scan
  25+ 637C                                  ENDIF
  26+ 637C              ;.. This bit allows cycling of ships on universe 0 in demo.........................................................................
  27+ 637C                                  IFDEF MAINLOOP_DEMOSHIPS
  28+ 637C ~            DemoOfShipsDEBUG:       call    TestForNextShip
  29+ 637C                                  ENDIF
  30+ 637C              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
  31+ 637C 3E 00        InputBlockerCheck:      ld      a,$0
  32+ 637E                                  IFDEF MAINLOOP_INPUTHANDLER
  33+ 637E                                      JumpIfAEqNusng $01, SkipInputHandlers                           ; as we are in a transition the whole update AI is skipped
  33+ 637E FE 01       >                        cp     $01
  33+ 6380 CA AA 63    >                        jp      z,SkipInputHandlers
  34+ 6383                                      JumpIfMemTrue TextInputMode, SkipInputHandlers                  ; in input mode all keys are processed by input
  34+ 6383 3A FE 81    >                        ld      a,(TextInputMode)
  34+ 6386 A7          >                        and     a
  34+ 6387 CA AA 63    >                        jp      z, SkipInputHandlers
  35+ 638A CD B4 6C                             call    ViewKeyTest
  36+ 638D CD B1 69                             call    TestPauseMode
  37+ 6390 3A 23 81                             ld      a,(GamePaused)
  38+ 6393 FE 00                                cp      0
  39+ 6395 C2 17 63                             jp      nz,MainLoop
  40+ 6398 CD 5E 7F                             call    MovementKeyTest
  41+ 639B              ;.. Process cursor keys for respective screen if the address is 0 then we skill just skip movement.................................
  42+ 639B                                  ENDIF
  43+ 639B 3A A9 63     HandleMovement:         ld      a,(CallCursorRoutine+2)
  44+ 639E                                      JumpIfAIsZero     TestAreWeDocked
  44+ 639E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  44+ 639F CA AA 63    >                        jp	    z, TestAreWeDocked
  45+ 63A2              ;.. Handle displaying correct screen ..............................................................................................
  46+ 63A2 3E 00        HandleBankSelect:       ld      a,$00
  47+ 63A4                                      MMUSelectScreenA
  47+ 63A4 ED 92 56    >                     nextreg ScreenBankMMU,		a
  48+ 63A7 CD 00 00     CallCursorRoutine:      call    $0000
  49+ 63AA              ;.. Check to see if we are docked as if we are (or are docking.launching then no AI/Ship updates occur.............................
  50+ 63AA              ;.. Also end up here if we have the screen input blocker set
  51+ 63AA              SkipInputHandlers:
  52+ 63AA              ;.. For Docked flag its - 0 = in free space, FF = Docked, FE transition, FD = Setup open space and transition to not docked
  53+ 63AA              TestAreWeDocked:        JumpIfMemNeNusng DockedFlag, StateNormal, UpdateLoop            ; if if we are in free space do universe updateelse we skip it. As we are also in dock/transition then no models should be updated so we dont; need to draw
  53+ 63AA 3A 22 81    >                        ld  a,(DockedFlag)
  53+ 63AD FE 00       >                        cp  StateNormal
  53+ 63AF C2 6C 64    >                        jp  nz,UpdateLoop
  54+ 63B2                                  IFDEF MAINLOOP_EVENTHANDLER
  55+ 63B2 21 DB 81     .UpdateEventCounter:    ld      hl,EventCounter                                         ; evnery 256 cycles we do a trigger test
  56+ 63B5 35                                   dec     (hl)
  57+ 63B6 CC 0F 65     .ProcessEvent:          call    z,LoopEventTriggered
  58+ 63B9                                  ENDIF
  59+ 63B9                                  IFDEF MAINLOOP_RECHARGE
  60+ 63B9 3A DB 81     .ProcessRecharge:       ld      a,(EventCounter)
  61+ 63BC E6 07                                and     7
  62+ 63BE CC 98 85                             call    z, RechargeShip
  63+ 63C1                                  ENDIF
  64+ 63C1                                  IFDEF MAINLOOP_LAUNCHMISSILE
  65+ 63C1 3A 13 84     .PlayerMissileLaunch:   ld      a,(MissileTargettingFlag)                               ; if bit 7 is clear then we have a target and launch requested
  66+ 63C4 E6 80                                and     $80
  67+ 63C6 CC F6 65                             call    z,  LaunchPlayerMissile
  68+ 63C9                                  ENDIF
  69+ 63C9              ;.. If we get here then we are in game running mode regardless of which screen we are on, so update AI.............................
  70+ 63C9              ;.. we do one universe slot each loop update ......................................................................................
  71+ 63C9              ;.. First update Sun...............................................................................................................
  72+ 63C9 3E 00        UpdateShipsControl:     ld      a,0
  73+ 63CB A7                                   and     a
  74+ 63CC                                  IFDEF MAINLOOP_UPDATEUNIVERSE
  75+ 63CC CC 8B 66     .UpdateShips:           call    z, UpdateUniverseObjects
  76+ 63CF                                  ENDIF
  77+ 63CF                                      JumpIfMemNeNusng ScreenTransitionForced, $FF, BruteForceChange  ; if we docked then a transition would have been forced
  77+ 63CF 3A 86 6B    >                        ld  a,(ScreenTransitionForced)
  77+ 63D2 FE FF       >                        cp  $FF
  77+ 63D4 C2 70 66    >                        jp  nz,BruteForceChange
  78+ 63D7 3E 00        CheckIfViewUpdate:      ld      a,$00                                                   ; if this is set to a view number then we process a view
  79+ 63D9                                      JumpIfAIsZero  UpdateLoop                                       ; This will change as more screens are added TODO
  79+ 63D9 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  79+ 63DA CA 6C 64    >                        jp	    z, UpdateLoop
  80+ 63DD              ;..Processing a view...............................................................................................................
  81+ 63DD              ;..Display any message ............................................................................................................
  82+ 63DD              .CheckHyperspaceMessage:AnyHyperSpaceMacro .HandleMessages
  82+ 63DD 2A D9 81    >                        ld      hl,(InnerHyperCount)
  82+ 63E0 7C          >                        ld      a,h
  82+ 63E1 B5          >                        or      l
  82+ 63E2 28 03       >                        jr      z, .HandleMessages
  83+ 63E4 CD D8 75                             call    HyperSpaceMessage
  84+ 63E7              .HandleMessages:        AnyMessagesMacro  .NoMessages
  84+ 63E7 3A 2D 80    >                        ld      a, (MessageCount)
  84+ 63EA A7          >                        and     a
  84+ 63EB 28 06       >                        jr      z, .NoMessages
  85+ 63ED CD BA 75                             call    DisplayCurrentMessage
  86+ 63F0 CD 99 75                             call    UpdateMessageTimer
  87+ 63F3
  88+ 63F3              .NoMessages:            MMUSelectLayer2
  88+ 63F3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  89+ 63F7 21 FC 81     CheckConsoleReDraw:     ld      hl,ConsoleRefreshCounter
  90+ 63FA 35                                   dec     (hl)
  91+ 63FB CA 0B 64                             jp      z,.ConsoleDrawBuffer1                                   ; when it hits 0 then frame 1 of console is drawm
  92+ 63FE FA 09 64                             jp      m,.ConsoleDrawBuffer2                                   ; need top also do next frame for double buffering
  93+ 6401              .ConsoleNotDraw:        SetMemFalse ConsoleRedrawFlag
  93+ 6401 3E FF       >                        ld      a,$FF
  93+ 6403 32 FD 81    >                        ld      (ConsoleRedrawFlag),a
  94+ 6406 C3 15 64                             jp      .JustViewPortCLS
  95+ 6409 36 05        .ConsoleDrawBuffer2:    ld      (hl),ConsoleRefreshInterval
  96+ 640B              .ConsoleDrawBuffer1:    SetMemTrue ConsoleRedrawFlag
  96+ 640B AF          >                        xor     a
  96+ 640C 32 FD 81    >                        ld      (ConsoleRedrawFlag),a
  97+ 640F CD FF E0                             call    l2_cls                                                  ; Clear layer 2 for graphics
  98+ 6412 C3 18 64                             jp      .ViewPortCLSDone
  99+ 6415 CD DF E0     .JustViewPortCLS:       call   l2_cls_upper_two_thirds
 100+ 6418              .ViewPortCLSDone:
 101+ 6418                                      MMUSelectLayer1
 101+ 6418 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 102+ 641C              .UpdateSun:             MMUSelectSun
 102+ 641C ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 103+ 6420              .DEBUGFORCE:
 104+ 6420                                     ;ld          hl,$0081
 105+ 6420                                     ;ld          (SBnKxlo),hl
 106+ 6420                                     ;ld          hl,$0001
 107+ 6420                                     ;ld          (SBnKylo),hl
 108+ 6420                                     ; ld          hl,$0160
 109+ 6420                                     ; ld          (SBnKzlo),hl
 110+ 6420                                      ;ld          a,$80
 111+ 6420                                      ;ld          (SBnKxsgn),a
 112+ 6420                                      ;ld          (SBnKysgn),a
 113+ 6420                                     ; ZeroA
 114+ 6420                                    ;  ld          (SBnKzsgn),a
 115+ 6420 CD 33 C7                             call    SunUpdateAndRender
 116+ 6423              .UpdatePlanet:          MMUSelectPlanet
 116+ 6423 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 117+ 6427 CD 40 C3                             call    PlanetUpdateAndRender
 118+ 642A              ;..Later this will be done via self modifying code to load correct stars routine for view..........................................
 119+ 642A 3E DF        DrawDustForwards:       ld     a,$DF
 120+ 642C 32 CB EA                             ld     (line_gfx_colour),a
 121+ 642F              DustUpdateBank:         MMUSelectViewFront                                              ; This needs to be self modifying
 121+ 642F ED 91 56 3E >                     nextreg ScreenBankMMU,		BankFrontView
 122+ 6433 CD AE 7A     DustUpdateRoutine:      call   DustForward                                              ; This needs to be self modifying
 123+ 6436              ;ProcessSun:             call    DrawForwardSun
 124+ 6436 3A 27 84     ProcessLaser:           ld      a,(CurrLaserPulseRate)
 125+ 6439                                      JumpIfAIsNotZero .CheckForPulse
 125+ 6439 A7          >                        and     a
 125+ 643A C2 47 64    >                        jp	    nz,.CheckForPulse
 126+ 643D                                      JumpIfMemFalse FireLaserPressed, .NoLaser
 126+ 643D 3A 00 82    >                        ld      a,(FireLaserPressed)
 126+ 6440 A7          >                        and     a
 126+ 6441 C2 5B 64    >                        jp      nz, .NoLaser
 127+ 6444 C3 4E 64                             jp      .FireLaser
 128+ 6447              .CheckForPulse:         JumpIfMemZero CurrLaserPulseOnCount, .NoLaser
 128+ 6447 3A 32 84    >                        ld  a,(CurrLaserPulseOnCount)
 128+ 644A A7          >                        and a
 128+ 644B CA 5B 64    >                        jp  z,.NoLaser
 129+ 644E              .FireLaser:             MMUSelectSpriteBank
 129+ 644E ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 130+ 6452 CD 3E E3                             call    sprite_laser_show
 131+ 6455 CD 88 84                             call    LaserDrainSystems
 132+ 6458 C3 62 64                             jp      ProcessPlanet
 133+ 645B              .NoLaser:               MMUSelectSpriteBank
 133+ 645B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 134+ 645F CD DC E4                             call    sprite_laser_hide
 135+ 6462              ProcessPlanet:
 136+ 6462 CD 14 68     ProcessShipModels:      call   DrawForwardShips                                     ; Draw all ships (this may need to be self modifying)
 137+ 6465                                      ; add in loop so we only update every 4 frames, need to change CLS logic too,
 138+ 6465                                      ; every 4 frames needs to do 2 updates so updates both copies of buffer
 139+ 6465                                      ; now will CLS bottom thrid
 140+ 6465                                      CallIfMemTrue ConsoleRedrawFlag, UpdateConsole
 140+ 6465 3A FD 81    >                        ld      a,(ConsoleRedrawFlag)
 140+ 6468 A7          >                        and     a
 140+ 6469 CC DD 6D    >                        call    z, UpdateConsole
 141+ 646C              ;..If we were not in views then we were in display screens/menus...................................................................
 142+ 646C              UpdateLoop:             JumpIfMemZero ScreenLoopJP+1,LoopRepeatPoint
 142+ 646C 3A 79 64    >                        ld  a,(ScreenLoopJP+1)
 142+ 646F A7          >                        and a
 142+ 6470 CA 7B 64    >                        jp  z,LoopRepeatPoint
 143+ 6473              ;..This is the screen update routine for menus.....................................................................................
 144+ 6473              ;.. Also used by transition routines
 145+ 6473 3E 00        ScreenLoopBank:         ld      a,$0
 146+ 6475                                      MMUSelectScreenA
 146+ 6475 ED 92 56    >                     nextreg ScreenBankMMU,		a
 147+ 6478 CD 00 00     ScreenLoopJP:           call    $0000
 148+ 647B 3A 22 81     LoopRepeatPoint:        ld      a,(DockedFlag)
 149+ 647E              HandleLaunched:         JumpIfAEqNusng  StateCompletedLaunch,   WeHaveCompletedLaunch
 149+ 647E FE FD       >                        cp     StateCompletedLaunch
 149+ 6480 CA 9A 64    >                        jp      z,WeHaveCompletedLaunch
 150+ 6483                                      JumpIfAEqNusng  StateInTransition,      WeAreInTransition
 150+ 6483 FE FE       >                        cp     StateInTransition
 150+ 6485 CA 55 66    >                        jp      z,WeAreInTransition
 151+ 6488                                      JumpIfAEqNusng  StateHJumping,          WeAreHJumping
 151+ 6488 FE FC       >                        cp     StateHJumping
 151+ 648A CA A0 64    >                        jp      z,WeAreHJumping
 152+ 648D                                      JumpIfAEqNusng  StateHEntering,         WeAreHEntering
 152+ 648D FE FB       >                        cp     StateHEntering
 152+ 648F CA AE 64    >                        jp      z,WeAreHEntering
 153+ 6492                                      JumpIfAEqNusng  StateCompletedHJump,    WeHaveCompletedHJump
 153+ 6492 FE FA       >                        cp     StateCompletedHJump
 153+ 6494 CA B6 64    >                        jp      z,WeHaveCompletedHJump
 154+ 6497
 155+ 6497 C3 55 66                             jp  DoubleBufferCheck
 156+ 649A CD E9 6B     WeHaveCompletedLaunch:  call    LaunchedFromStation
 157+ 649D C3 55 66                             jp      DoubleBufferCheck
 158+ 64A0 CD 4D C2     WeAreHJumping:          call    hyperspace_Lightning
 159+ 64A3 DA 55 66                             jp      c,DoubleBufferCheck
 160+ 64A6 3E FB                                ld      a,StateHEntering
 161+ 64A8 32 22 81                             ld      (DockedFlag),a
 162+ 64AB C3 55 66                             jp      DoubleBufferCheck
 163+ 64AE 3E FA        WeAreHEntering:         ld      a,StateCompletedHJump
 164+ 64B0 32 22 81                             ld      (DockedFlag),a
 165+ 64B3 C3 55 66                             jp      DoubleBufferCheck
 166+ 64B6
 167+ 64B6
 168+ 64B6              ; to create planet position
 169+ 64B6              ;       take seed 2 AND %00000011 + 3 + carry and store in z sign
 170+ 64B6              ;       take result and divide by 2 then store in x and y sign
 171+ 64B6              ;
 172+ 64B6              ;       take seed 4 AND %00000111 OR %10000001 and store in z sign
 173+ 64B6              ;       take seed 6 AND %00000011 and store in x sign and y sign
 174+ 64B6              ;       set pitch and roll to 0
 175+ 64B6              ;
 176+ 64B6              ;
 177+ 64B6              ;
 178+ 64B6              ; --- At the end of a hyperspace jump we have to reset compass, market universe sun and planets etc
 179+ 64B6 3A 08 82     WeHaveCompletedHJump:   ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 180+ 64B9                                      MMUSelectGalaxyA
 180+ 64B9 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 181+ 64BC 2A 1D 82                             ld      hl,(TargetSystemX)
 182+ 64BF 22 1B 82                             ld      (PresentSystemX),hl
 183+ 64C2 44                                   ld      b,h
 184+ 64C3 4D                                   ld      c,l
 185+ 64C4                                      CorrectPostJumpFuel
 185+ 64C4 3A 7B 86    >                        ld      a,(Fuel)
 185+ 64C7 21 A4 81    >                        ld      hl,Distance
 185+ 64CA 96          >                        sub     a,(hl)
 185+ 64CB 32 7B 86    >                        ld      (Fuel),a
 186+ 64CE                                      ForceTransition ScreenFront            ; This will also trigger stars
 186+ 64CE 3E 09       >                        ld      a,ScreenFront
 186+ 64D0 32 86 6B    >                        ld      (ScreenTransitionForced), a
 187+ 64D3 3E 00                                ld      a,$00
 188+ 64D5 32 02 82                             ld      (ExtraVesselsCounter),a
 189+ 64D8 32 22 81                             ld      (DockedFlag),a
 190+ 64DB CD 6F F8                             call    GalaxyGenerateDesc             ; bc  holds new system to generate system
 191+ 64DE CD 30 87                             call    copy_working_to_system         ; and propogate copies of seeds
 192+ 64E1 CD 28 87                             call    copy_working_to_galaxy         ; .
 193+ 64E4 CD 16 88                             call    get_planet_data_working_seed   ; sort out system data
 194+ 64E7                                      ;call    GetDigramGalaxySeed           ; .
 195+ 64E7                                      MMUSelectStockTable                    ; .
 195+ 64E7 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 196+ 64EB CD AA E0                             call    generate_stock_market          ; generate new prices
 197+ 64EE CD ED 85                             call    ClearUnivSlotList              ; clear out any ships
 198+ 64F1 CD B2 84                             call    ResetPlayerShip
 199+ 64F4                                      HalveFugitiveStatus                    ; halves status and brings bit into carry
 199+ 64F4 21 80 81    >                        ld      hl,FugitiveInnocentStatus
 199+ 64F7 CB 3E       >                        srl     (hl)
 200+ 64F9                                      MMUSelectSun
 200+ 64F9 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 201+ 64FD CD 61 C2                             call    CreateSun                      ; create the local sun and set position based on seed
 202+ 6500                                      MMUSelectPlanet
 202+ 6500 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 203+ 6504 CD BA C0                             call    CreatePlanet
 204+ 6507              ;TODO                        call    generateSunAndPlanetPos        ; uses current carry state too
 205+ 6507              ;TODO.CreateSun:             call    SetSunSlot
 206+ 6507              ; PROBABLY NOT NEEDED NOW                      MMUSelectShipBank1
 207+ 6507              ; PROBABLY NOT NEEDED NOW                      call    GetShipBankId
 208+ 6507              ;;SELECT CORRECT BANK                        MMUSelectUniverseN 0
 209+ 6507              ;;TODO                        call    CopyBodyToUniverse
 210+ 6507              ;;TODO                        call    CreateSun
 211+ 6507              ;;TODOCreatePlanet:          call    SetPlanetSlot
 212+ 6507              ;;TODO                       MMUSelectShipBank1
 213+ 6507              ;;TODO                       call    GetShipBankId
 214+ 6507              ;;TODO                       MMUSelectUniverseBankN 1
 215+ 6507              ;;TODO                       call    CopyBodyToUniverse
 216+ 6507                                      SetMemFalse DockedFlag
 216+ 6507 3E FF       >                        ld      a,$FF
 216+ 6509 32 22 81    >                        ld      (DockedFlag),a
 217+ 650C C3 55 66                             jp  DoubleBufferCheck
 218+ 650F
 219+ 650F CD 59 86     LoopEventTriggered:     call    FindNextFreeSlotInC                 ; c= slot number, if we cant find a slot
 220+ 6512 D8                                   ret     c                                   ; then may as well just skip routine
 221+ 6513              .DEBUGTEST:             SetMemFalse SpaceStationSafeZone
 221+ 6513 3E FF       >                        ld      a,$FF
 221+ 6515 32 01 82    >                        ld      (SpaceStationSafeZone),a
 222+ 6518 FD 61        .SpawnIsPossible:       ld      iyh,c                               ; save slot free in iyh
 223+ 651A              .AreWeInWhichSpace:     JumpIfMemTrue MissJumpFlag, .WitchSpaceEvent
 223+ 651A 3A DD 81    >                        ld      a,(MissJumpFlag)
 223+ 651D A7          >                        and     a
 223+ 651E CA F5 65    >                        jp      z, .WitchSpaceEvent
 224+ 6521 CD B2 86     .JunkOrNot:             call    doRandom                            ; if random > 35 then its not junk
 225+ 6524                                      JumpIfAGTENusng 35, .NotJunk                ; .
 225+ 6524 FE 23       >                        cp     35
 225+ 6526 D2 58 65    >                        jp		nc,.NotJunk
 226+ 6529              .JunkLimitHitTest:      TestRoomForJunk .NotJunk                    ; can we fit in any junk
 226+ 6529 3E 03       >                        ld      a,3
 226+ 652B             >                        JumpIfALTMemusng    JunkCount, .NotJunk
 226+ 652B 21 03 82    >                        ld      hl,JunkCount
 226+ 652E BE          >                        cp      (hl)
 226+ 652F DA 58 65    >                        jp		c,.NotJunk
 227+ 6532 CD B2 86     .CouldBeTraderInstead:  call    doRandom                            ; so its now a 50/50 change of being a trader
 228+ 6535 E6 01                                and     1
 229+ 6537 CA A3 65                             jp      z,.SpawnTrader
 230+ 653A              ;... Handle spawning of junk if possible
 231+ 653A CD B2 86     .SpawnJunk:             call    doRandom
 232+ 653D FE 0A                                cp      10                                  ; will set carry if a < 10
 233+ 653F                                      FlipCarryFlag                               ; so now carry is set if a > 10
 233+ 653F 3F          >                        ccf
 234+ 6540 E6 01                                and     1                                   ; so only have carry flag
 235+ 6542 CE 04                                adc     ShipID_CargoType5                   ; so now a = 4 + random + poss carry
 236+ 6544 47                                   ld      b,a                                 ; save ship type
 237+ 6545                                      ; if in space station zone then we can't do asteroids
 238+ 6545              .CanWeSpawnAsteroid:    JumpIfMemFalse  SpaceStationSafeZone, .NotInSafeZone
 238+ 6545 3A 01 82    >                        ld      a,(SpaceStationSafeZone)
 238+ 6548 A7          >                        and     a
 238+ 6549 C2 50 65    >                        jp      nz, .NotInSafeZone
 239+ 654C 78                                   ld      a,b
 240+ 654D              .FailIfAsteroidInSafe:  ReturnIfAEqNusng   ShipID_Asteroid          ; we can't spawn asteroids near a space station
 240+ 654D FE 06       >                        cp      ShipID_Asteroid
 240+ 654F C8          >                        ret     z
 241+ 6550              .NotInSafeZone:         AddJunkCount                                ; so its an increase in junk
 241+ 6550 21 03 82    >                        ld      hl,JunkCount
 241+ 6553 34          >                        inc     (hl)
 242+ 6554 78                                   ld      a,b                                 ; get ship type back
 243+ 6555 C3 1A 66                             jp      SpawnShipTypeA
 244+ 6558                                      ;.......implicit ret
 245+ 6558              ;... Handle spawing of non junk type object
 246+ 6558              .NotJunk:               JumpIfMemTrue SpaceStationSafeZone, .SpawnTrader ; changed so that it can spawn friendly ships around a space station
 246+ 6558 3A 01 82    >                        ld      a,(SpaceStationSafeZone)
 246+ 655B A7          >                        and     a
 246+ 655C CA A3 65    >                        jp      z, .SpawnTrader
 247+ 655F              .PossibleCop:           MMUSelectCommander                          ; get cargo rating
 247+ 655F ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 248+ 6563 CD 40 E3     .AreWeABadPerson:       call    calculateBadness                    ; a = badness
 249+ 6566 CB 27                                sla     a                                   ; double badness for scans
 250+ 6568                                      JumpIfMemZero CopCount,.NoCopsInSystem      ; are there any cops already
 250+ 6568 3A 06 82    >                        ld  a,(CopCount)
 250+ 656B A7          >                        and a
 250+ 656C CA 73 65    >                        jp  z,.NoCopsInSystem
 251+ 656F 21 80 81     .CopsAlreadyPresent:    ld      hl,FugitiveInnocentStatus           ; or a with FIST status
 252+ 6572 B6                                   or      (hl)
 253+ 6573 32 24 84     .NoCopsInSystem:        ld      (BadnessStatus),a                   ; if badness level triggers a cop
 254+ 6576 CD B2 86                             call    doRandom                            ; then its hostile
 255+ 6579                                      CallIfAGTEMemusng BadnessStatus, .SpawnHostileCop  ;
 255+ 6579 21 24 84    >                        ld      hl,BadnessStatus
 255+ 657C BE          >                        cp      (hl)
 255+ 657D D4 A3 65    >                        call	nc,.SpawnHostileCop
 256+ 6580                                      ReturnIfMemNotZero CopCount                 ; if here are police then we are done
 256+ 6580 3A 06 82    >                        ld     a,(CopCount)
 256+ 6583 A7          >                        and     a
 256+ 6584 C0          >                        ret    nz
 257+ 6585 21 02 82                             ld      hl, ExtraVesselsCounter             ; count down extra vessels counter
 258+ 6588 35                                   dec     (hl)                                ; to prevent mass spawing
 259+ 6589 F0                                   ret     p                                   ;
 260+ 658A 34           .ExtraVesselHit0:       inc     (hl)                                ; set counter to 0
 261+ 658B                        ;TODO              JumpIfMemNotZero MissionData,.DoMissionPlans; call special mission spawn logic routine
 262+ 658B                         ;TODO             ret     c                                   ; return if carry was set (i.e. it did something)
 263+ 658B 3A 08 82                             ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 264+ 658E                                      MMUSelectGalaxyA
 264+ 658E ED 92 57    >                     nextreg GalaxyDataMMU,       a
 265+ 6591 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 266+ 6594                                      JumpIfAIsNotZero .NotAnarchySystem
 266+ 6594 A7          >                        and     a
 266+ 6595 C2 CB 65    >                        jp	    nz,.NotAnarchySystem
 267+ 6598 47                                   ld      b,a
 268+ 6599 CD B2 86                             call    doRandom                            ; if random > 120 then don't spawn
 269+ 659C                                      ReturnIfAGTENusng 120                       ;
 269+ 659C FE 78       >                        cp    120
 269+ 659E D0          >                        ret	 nc
 270+ 659F E6 07                                and     7                                   ; if random 0 ..7 < gov rating
 271+ 65A1                                      ReturnIfALTNusng b                          ; then return
 271+ 65A1 B8          >                        cp    b
 271+ 65A2 D8          >                        ret	 c
 272+ 65A3              .SpawnTrader:       ; TODO
 273+ 65A3              ; ... Spawn a cop at hostile status
 274+ 65A3 3E 29        .SpawnHostileCop:       ld      a,ShipID_Viper
 275+ 65A5 CD 1A 66                             call    SpawnShipTypeA                      ; call rather than jump
 276+ 65A8 CD 3E C5                             call    SetShipHostile                      ; as we have correct universe banked in now
 277+ 65AB C9                                   ret
 278+ 65AC              ; ... Spawb a hostile ship or cluster
 279+ 65AC CD B2 86     .SpawnHostile:          call    doRandom
 280+ 65AF                                      JumpIfAGTENusng 100,.SpawnPirates           ; 100 in 255 change of one or more pirates
 280+ 65AF FE 64       >                        cp     100
 280+ 65B1 D2 CC 65    >                        jp		nc,.SpawnPirates
 281+ 65B4 21 02 82     .SpawnAHostileHunter:   ld      hl, ExtraVesselsCounter             ; prevent the next spawning
 282+ 65B7 34                                   inc     (hl)                                ;
 283+ 65B8 E6 03                                and     3                                   ; a = random 0..3
 284+ 65BA                                      MMUSelectShipBank1
 284+ 65BA ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 285+ 65BE                                      GetByteAInTable ShipHunterTable             ; get hunter ship type
 285+ 65BE 21 1C 77    >                    ld          hl,ShipHunterTable
 285+ 65C1 ED 31       >                    add         hl,a
 285+ 65C3 7E          >                    ld          a,(hl)
 286+ 65C4 CD 1A 66                             call    SpawnShipTypeA
 287+ 65C7 CD 3E C5                             call    SetShipHostile
 288+ 65CA C9                                   ret
 289+ 65CB C9           .NotAnarchySystem:      ret
 290+ 65CC CD B2 86     .SpawnPirates:          call    doRandom                           ; a = random 0..3
 291+ 65CF E6 03                                and     3
 292+ 65D1 32 02 82                             ld      (ExtraVesselsCounter),a
 293+ 65D4 CD B2 86     .PirateLoop:            call    doRandom
 294+ 65D7 4F                                   ld      c,a                                 ; random and random and 7
 295+ 65D8 CD B2 86                             call    doRandom
 296+ 65DB A1                                   and     c
 297+ 65DC E6 07                                and     7
 298+ 65DE                                      GetByteAInTable ShipPackList
 298+ 65DE 21 14 77    >                    ld          hl,ShipPackList
 298+ 65E1 ED 31       >                    add         hl,a
 298+ 65E3 7E          >                    ld          a,(hl)
 299+ 65E4 CD 1A 66                             call    SpawnShipTypeA
 300+ 65E7 CD 3E C5                             call    SetShipHostile                      ; make sure its hostile
 301+ 65EA                                      AddPirateCount                              ; another pirate has been spawned
 301+ 65EA 21 07 82    >                        ld      hl,PirateCount
 301+ 65ED 34          >                        inc     (hl)
 302+ 65EE 21 02 82                             ld      hl,ExtraVesselsCounter
 303+ 65F1 35                                   dec     (hl)
 304+ 65F2 20 E0                                jr      nz,.PirateLoop
 305+ 65F4 C9                                   ret
 306+ 65F5 C9           .WitchSpaceEvent:       ret; TODO for now
 307+ 65F6
 308+ 65F6
 309+ 65F6 CD 59 86     LaunchPlayerMissile:    call    FindNextFreeSlotInC                 ; Check if we have a slot free
 310+ 65F9 38 1E                                jr      c,.MissileMissFire                  ; give a miss fire indicator as we have no slots
 311+ 65FB 3E 00        .LaunchGood:            ld      a,0                                 ; TODO For now only 1 missile type
 312+ 65FD                                      GetByteAInTable ShipMissileTable            ; swap in missile data
 312+ 65FD 21 20 77    >                    ld          hl,ShipMissileTable
 312+ 6600 ED 31       >                    add         hl,a
 312+ 6602 7E          >                    ld          a,(hl)
 313+ 6603 CD 1A 66                             call    SpawnShipTypeA                      ; spawn the ship
 314+ 6606 3A 13 84                             ld      a,(MissileTargettingFlag)           ; Get target from computer
 315+ 6609 32 35 C0                             ld      (UBnKMissileTarget),a               ; load target Data
 316+ 660C CD AC C5                             call    UnivSetPlayerMissile                ; .
 317+ 660F                                      ClearMissileTarget                          ; reset targetting
 317+ 660F 3E FF       >                        ld      a,StageMissileNoTarget
 317+ 6611 32 13 84    >                        ld      (MissileTargettingFlag),a           ; reset targetting
 318+ 6614 21 7E 81                             ld      hl, NbrMissiles
 319+ 6617 35                                   dec     (hl)
 320+ 6618
 321+ 6618                                      ; TODO handle removal of missile from inventory and console
 322+ 6618 C9                                   ret
 323+ 6619 C9           .MissileMissFire:       ret ; TODO bing bong noise misfire message
 324+ 661A
 325+ 661A              ; a = ship type, iyh = universe slot to create in
 326+ 661A FD 6F        SpawnShipTypeA:         ld      iyl,a                               ; save ship type
 327+ 661C                                      ReturnIfAGTENusng   ShipTotalModelCount     ; current ship count limit
 327+ 661C FE 2C       >                        cp    ShipTotalModelCount
 327+ 661E D0          >                        ret	 nc
 328+ 661F                                      MMUSelectShipBank1                          ; select bank 1
 328+ 661F ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 329+ 6623 FD 7C                                ld      a,iyh                               ; A = slot number
 330+ 6625 FD 45                                ld      b,iyl                               ; b = ship type
 331+ 6627 CD 04 86                             call    SetSlotAToTypeB                     ; Allocate slot as used
 332+ 662A                                      MMUSelectUniverseA                          ; .
 332+ 662A C6 46       >                     add    a,BankUNIVDATA0
 332+ 662C ED 92 56    >                     nextreg UniverseMMU,       a
 333+ 662F FD 44        .MarkUnivDiags:         ld      b, iyh                              ; mark diagnostics for bank number in memory
 334+ 6631 C6 41                                add     "A"
 335+ 6633 32 0B C0                             ld      (StartOfUnivN),a                    ; to help debugging
 336+ 6636 FD 7D        .CopyOverShipData:      ld      a,iyl                               ; .
 337+ 6638                                      ;call    SetSlotAToTypeB                    ; record in the lookup tables
 338+ 6638 CD 0F E0                             call    GetShipBankId                       ; find actual memory location of data
 339+ 663B                                      MMUSelectShipBankA
 339+ 663B ED 92 57    >					 nextreg ShipModelMMU,	    a
 340+ 663E 78                                   ld      a,b                                 ; b = computed ship id for bank
 341+ 663F CD 6A E0                             call    CopyShipToUniverse
 342+ 6642 CD 3D C6                             call    UnivSetSpawnPosition                ; set initial spawn position
 343+ 6645 CD F2 C6                             call    UnivInitRuntime                     ; Clear runtime data before startup, iy h and l are already set up
 344+ 6648 3A 31 C3                             ld      a,(ShipTypeAddr)                    ; get ship type
 345+ 664B 32 0F C0                             ld      (ShipTypeCopy),a                    ; to help debugging
 346+ 664E 47                                   ld      b,a
 347+ 664F FD 7D                                ld      a,iyl
 348+ 6651 CD 0B 86                             call    SetSlotAToClassB
 349+ 6654 C9                                   ret
 350+ 6655
 351+ 6655                                      ; reset main loop counters
 352+ 6655                                      ; from BBC TT18 jump code
 353+ 6655                                      ; need to set system corrodinates, flush out univere ships etc
 354+ 6655                                      ; set up new star system and landing location in system
 355+ 6655                                      ; reset ship speed etc (RES2)
 356+ 6655                                      ; update legal status, missle indicatrions, planet data block, sun data block (SOLAR)
 357+ 6655                                      ;   put planet into data blokc 1 of FRIN
 358+ 6655                                      ;   put sun inot data block (NWWSHIP)
 359+ 6655                                      ; need to look at in system warp code (WARP) - note we need to -reorg all to code for teh station as that will never be in slot 0
 360+ 6655
 361+ 6655
 362+ 6655              WeAreInTransition:
 363+ 6655 3E 00        DoubleBufferCheck:      ld      a,00
 364+ 6657                                      IFDEF DOUBLEBUFFER
 365+ 6657 FE 00                                    cp      0
 366+ 6659 CA 68 66                                 jp      z,TestTransition
 367+ 665C                                          MMUSelectLayer2
 367+ 665C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 368+ 6660 3A 01 E0                                 ld     a,(varL2_BUFFER_MODE)
 369+ 6663 FE 00                                    cp     0
 370+ 6665 C4 13 E1                                 call   nz,l2_flip_buffers
 371+ 6668                                      ENDIF
 372+ 6668 3A 86 6B     TestTransition:         ld      a,(ScreenTransitionForced)          ; was there a bruite force screen change in any update loop
 373+ 666B FE FF                                cp      $FF
 374+ 666D CA 17 63                             jp      z,MainLoop
 375+ 6670 CD 3A 6C     BruteForceChange:       call    SetScreenA
 376+ 6673 C3 17 63                             jp MainLoop
 377+ 6676
# file closed: ./GameEngine/MainLoop.asm
 257  6676              ;..................................................................................................................................
 258  6676              ;..Process A ship..................................................................................................................
 259  6676              ; Apply Damage b to ship based on shield value of a
 260  6676              ; returns a with new shield value
 261  6676                                      INCLUDE "./GameEngine/DamagePlayer.asm"
# file opened: ./GameEngine/DamagePlayer.asm
   1+ 6676              ;..Process A ship..................................................................................................................
   2+ 6676              ; Apply Damage b to ship based on shield value of a
   3+ 6676              ; returns a with new shield value
   4+ 6676              ApplyDamage:            ClearCarryFlag
   4+ 6676 B7          >                        or a
   5+ 6677 98                                   sbc     b
   6+ 6678 D0                                   ret     nc                  ; no carry so was not negative
   7+ 6679
   8+ 6679 ED 44        .KilledShield:          neg                         ; over hit shield
   9+ 667B 4F                                   ld      c,a                 ; save overhit in c
  10+ 667C 3A 10 84                             ld      a,(PlayerEnergy)    ; and apply it to player energy
  11+ 667F                                      ClearCarryFlag
  11+ 667F B7          >                        or a
  12+ 6680 99                                   sbc     c
  13+ 6681 F2 85 66                             jp      p,.DoneDamage       ; if result was 0 or more then completed damage
  14+ 6684 AF           .KilledPlayer:          xor     a
  15+ 6685 32 10 84     .DoneDamage:            ld      (PlayerEnergy),a
  16+ 6688 AF                                   xor     a                   ; shield is gone
  17+ 6689 C9                                   ret
  18+ 668A
# file closed: ./GameEngine/DamagePlayer.asm
 262  668A              ;..Update Universe Objects.........................................................................................................
 263  668A                                      INCLUDE "./GameEngine/UpdateUniverseObjects.asm"
# file opened: ./GameEngine/UpdateUniverseObjects.asm
   1+ 668A              ;..................................................................................................................................
   2+ 668A 00           CurrentShipUniv:        DB      0
   3+ 668B              ;..................................................................................................................................
   4+ 668B AF           UpdateUniverseObjects:  xor     a
   5+ 668C 32 D6 81                             ld      (SelectedUniverseSlot),a
   6+ 668F 57           .UpdateUniverseLoop:    ld      d,a                                             ; d is unaffected by GetTypeInSlotA
   7+ 6690              ;.. If the slot is empty (FF) then skip this slot..................................................................................
   8+ 6690 CD 4D 86                             call    GetTypeAtSlotA
   9+ 6693 FD 6F                                ld      iyl,a                                           ; save type into iyl for later
  10+ 6695 FE FF                                cp      $FF
  11+ 6697 CA DB 67                             jp      z,.UniverseSlotIsEmpty
  12+ 669A 7A           .UniverseObjectFound:   ld      a,d                                             ; Get back Universe slot as we want it
  13+ 669B                                      MMUSelectUniverseA                                      ; and we apply roll and pitch
  13+ 669B C6 46       >                     add    a,BankUNIVDATA0
  13+ 669D ED 92 56    >                     nextreg UniverseMMU,       a
  14+ 66A0 CD 68 D7                             call    ApplyMyRollAndPitch                             ; todo , make all 4 of these 1 call
  15+ 66A3 CD 42 D8                             call    ApplyShipRollAndPitch
  16+ 66A6 CD D4 D8                             call    ApplyShipSpeed
  17+ 66A9 CD 89 C5                             call    UpdateSpeedAndPitch                             ; update based on rates of speed roll and pitch accelleration/decelleration
  18+ 66AC              ;.. apply ships movement
  19+ 66AC              ;.. If its a space station then see if we are ready to dock........................................................................
  20+ 66AC 3A 41 C0     .CheckExploding:        ld      a,(UBnKexplDsp)                                 ; is it destroyed
  21+ 66AF E6 A0                                and     %10100000                                       ; or exploding
  22+ 66B1 C2 C8 67                             jp      nz,.ProcessedUniverseSlot                       ; then no action
  23+ 66B4              .CheckIfMissile:        JumpIfMemEqNusng ShipTypeAddr, ShipTypeMissile, .CollisionDone ; Missiles don't have ECM and do collision checks on their tactics phase
  23+ 66B4 3A 31 C3    >                        ld  a,(ShipTypeAddr)
  23+ 66B7 FE 01       >                        cp  ShipTypeMissile
  23+ 66B9 CA 8D 67    >                        jp  z,.CollisionDone
  24+ 66BC CD 77 C5     .ProcessECM:            call    UpdateECM                                       ; Update ECM Counters
  25+ 66BF 2A 10 C0     .CheckIfClose:          ld      hl,(UBnKxlo)                                    ; chigh byte check or just too far away
  26+ 66C2 ED 5B 13 C0                          ld      de,(UBnKylo)                                    ; .
  27+ 66C6 ED 4B 16 C0                          ld      bc,(UBnKzlo)                                    ; .
  28+ 66CA B4                                   or      h                                               ; .
  29+ 66CB B2                                   or      d                                               ; .
  30+ 66CC B0                                   or      b                                               ; .
  31+ 66CD C2 8D 67                             jp      nz,.CollisionDone                                    ; .
  32+ 66D0 B5           .CheckLowBit7Close:     or      l                                               ; if bit 7 of low is set then still too far
  33+ 66D1 B3                                   or      e                                               ; .
  34+ 66D2 B1                                   or      c                                               ; .
  35+ 66D3 FD 67                                ld      iyh,a                                           ; save it in case we need to check bit 6 in collision check
  36+ 66D5 E6 80                                and     $80                                             ; .
  37+ 66D7 C2 8D 67                             jp      nz,.CollisionDone                                    ; .
  38+ 66DA 3A 31 C3     .CheckIfDockable:       ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
  39+ 66DD                                      JumpIfANENusng  ShipTypeStation, .CollisionCheck        ; if its not a station so we don't test docking
  39+ 66DD FE 02       >                        cp     ShipTypeStation
  39+ 66DF C2 13 67    >                        jp      nz,.CollisionCheck
  40+ 66E2              .IsDockableAngryCheck:  JumpOnMemBitSet ShipNewBitsAddr, 4, .CollisionCheck     ; if it is angry then we dont test docking
  40+ 66E2 3A 32 C3    >                        ld      a,(ShipNewBitsAddr)
  40+ 66E5 CB 67       >                        bit 	4,a
  40+ 66E7 C2 13 67    >                        jp      nz,.CollisionCheck
  41+ 66EA              .CheckHighNoseZ:        JumpIfMemLTNusng  UBnkrotmatNosevZ+1 , 214, .CollisionCheck ; get get high byte of rotmat this is the magic angle to be within 26 degrees +/-
  41+ 66EA 3A 2A C0    >                        ld      a,(UBnkrotmatNosevZ+1)
  41+ 66ED FE D6       >                        cp      214
  41+ 66EF DA 13 67    >                        jp	  c,.CollisionCheck
  42+ 66F2 CD DC 69     .GetStationVector:      call    GetStationVectorToWork                          ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
  43+ 66F5                                      JumpIfALTNusng  89, .CollisionCheck                     ; if the z axis <89 the we are not in the 22 degree angle,m if its negative then unsigned comparison will cater for this
  43+ 66F5 FE 59       >                        cp      89
  43+ 66F7 DA 13 67    >                        jp		c, .CollisionCheck
  44+ 66FA 3A 20 C0     .CheckAbsRoofXHi:       ld      a,(UBnkrotmatRoofvX+1)                          ; get abs roof vector high
  45+ 66FD E6 7F                                and     SignMask8Bit                                    ; .
  46+ 66FF                                      JumpIfALTNusng 80, .CollisionCheck                      ; note 80 decimal for 36.6 degrees horizontal
  46+ 66FF FE 50       >                        cp      80
  46+ 6701 DA 13 67    >                        jp		c, .CollisionCheck
  47+ 6704              ;.. Its passed all validation and we are docking...................................................................................
  48+ 6704              .WeAreDocking:          MMUSelectLayer1
  48+ 6704 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  49+ 6708 3E 06                                ld        a,$6
  50+ 670A CD A5 E0                             call      l1_set_border
  51+ 670D              .EnterDockingBay:       ForceTransition ScreenDocking                           ;  Force transition
  51+ 670D 3E 0D       >                        ld      a,ScreenDocking
  51+ 670F 32 86 6B    >                        ld      (ScreenTransitionForced), a
  52+ 6712 C9                                   ret                                                     ;  don't bother with other objects
  53+ 6713                                      ; So it is a candiate to test docking. Now we do the position and angle checks
  54+ 6713 FD 7D        .CollisionCheck:        ld      a,iyl
  55+ 6715                                      JumpIfAEqNusng ShipTypeStation, .HaveCollided           ; stations dont check bit 6
  55+ 6715 FE 02       >                        cp     ShipTypeStation
  55+ 6717 CA 50 67    >                        jp      z,.HaveCollided
  56+ 671A                                      JumpIfAEqNusng ShipTypeMissile, .CollisionDone          ; Missile collisions are done in the tactics code
  56+ 671A FE 01       >                        cp     ShipTypeMissile
  56+ 671C CA 8D 67    >                        jp      z,.CollisionDone
  57+ 671F FD 7C        .VeryCloseCheck:        ld      a,iyh                                           ; bit 6 is still too far
  58+ 6721 E6 C0                                and     %11000000                                       ; .
  59+ 6723 20 68                                jr      nz,.CollisionDone                                    ; .
  60+ 6725 FD 7D        .ScoopableCheck:        ld      a,iyl                                           ; so if its not scoopable
  61+ 6727                                      JumpIfANENusng  ShipTypeScoopable, .HaveCollided        ; then its a collision
  61+ 6727 FE 04       >                        cp     ShipTypeScoopable
  61+ 6729 C2 50 67    >                        jp      nz,.HaveCollided
  62+ 672C 3A 9A 86     .ScoopsEquiped:         ld      a,(FuelScoop)                                   ; if there is no scoop then impact
  63+ 672F                                      JumpIfANENusng  EquipmentItemFitted, .HaveCollided      ; .
  63+ 672F FE FF       >                        cp     EquipmentItemFitted
  63+ 6731 C2 50 67    >                        jp      nz,.HaveCollided
  64+ 6734 3A 15 C0     .ScoopRegion:           ld      a,(UBnKysgn)                                    ; if the y axis is negative then we are OK
  65+ 6737                                      JumpIfAIsZero   .HaveCollided                           ; else its a collision
  65+ 6737 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  65+ 6738 CA 50 67    >                        jp	    z, .HaveCollided
  66+ 673B CD 91 C6     .CollectedCargo:        call    ShipCargoType
  67+ 673E 57           .DoWeHaveCapacity:      ld      d,a                                             ; save cargotype
  68+ 673F CD 05 85                             call    CanWeScoopCargoD
  69+ 6742 38 03                                jr      c, .NoRoom
  70+ 6744 CD FD 84     .CanScoop:              call    AddCargoTypeD
  71+ 6747              .NoRoom:                ClearSlotMem    SelectedUniverseSlot                    ; we only need to clear slot list as univ ship is now junk
  71+ 6747 3A D6 81    >                        ld      a,(SelectedUniverseSlot)
  71+ 674A CD 26 86    >                        call    ClearSlotA
  72+ 674D C3 8D 67                             jp      .CollisionDone
  73+ 6750              ; ... Generic collision
  74+ 6750              .HaveCollided:          JumpIfMemLTNusng DELTA, 5, .SmallBump
  74+ 6750 3A 0D 81    >                        ld      a,(DELTA)
  74+ 6753 FE 05       >                        cp      5
  74+ 6755 DA 64 67    >                        jp	  c,.SmallBump
  75+ 6758 3A 47 C0     .BigBump:               ld      a,(UBnKEnergy)                                  ; get energy level which gives us an approximate to size and health
  76+ 675B                                      SetCarryFlag
  76+ 675B 37          >                        scf
  77+ 675C 17                                   rla                                                     ; divide by 2 but also bring in carry so its 128 + energy / 2
  78+ 675D 47                                   ld      b,a
  79+ 675E CD 36 DB                             call    KillShip                                        ; mark ship as dead (if possible)
  80+ 6761 C3 6E 67                             jp      .ApplyDamage
  81+ 6764 3A 0D 81     .SmallBump:             ld      a,(DELTA)                                       ; if out ship speed < 5 then set damage to
  82+ 6767 47                                   ld      b,a
  83+ 6768 CD 58 DB                             call    DamageShip                                      ; dent target too  TODO make damge totally proportional to speed
  84+ 676B C3 6E 67                             jp      .ApplyDamage
  85+ 676E CD 8D 85     .ApplyDamage:           call    SetSpeedZero
  86+ 6771 3A 18 C0                             ld      a,(UBnKzsgn)                                    ; front or back
  87+ 6774 E6 80                                and     $80
  88+ 6776 20 0C                                jr      nz,.HitRear
  89+ 6778 3A 0E 84                             ld      a,(ForeShield)
  90+ 677B CD 76 66                             call    ApplyDamage
  91+ 677E 32 0E 84                             ld      (ForeShield),a
  92+ 6781 C3 8D 67                             jp      .CollisionDone
  93+ 6784 3A 0F 84     .HitRear:               ld      a,(AftShield)
  94+ 6787 CD 76 66                             call    ApplyDamage
  95+ 678A 32 0F 84                             ld      (AftShield),a
  96+ 678D              ; Now check laser
  97+ 678D CD 4B 6D     .CollisionDone:         call    ShipInSights
  98+ 6790 30 36                                jr      nc,.ProcessedUniverseSlot                        ; for laser and missile we can check once
  99+ 6792 3A 27 84                             ld      a,(CurrLaserPulseRate)
 100+ 6795                                      JumpIfAIsNotZero .CheckForPulse
 100+ 6795 A7          >                        and     a
 100+ 6796 C2 A3 67    >                        jp	    nz,.CheckForPulse
 101+ 6799                                      JumpIfMemFalse FireLaserPressed,     .NoLaser
 101+ 6799 3A 00 82    >                        ld      a,(FireLaserPressed)
 101+ 679C A7          >                        and     a
 101+ 679D C2 B8 67    >                        jp      nz, .NoLaser
 102+ 67A0 C3 AA 67                             jp      .LaserDamage
 103+ 67A3              .CheckForPulse:         JumpIfMemZero CurrLaserPulseOnCount, .NoLaser
 103+ 67A3 3A 32 84    >                        ld  a,(CurrLaserPulseOnCount)
 103+ 67A6 A7          >                        and a
 103+ 67A7 CA B8 67    >                        jp  z,.NoLaser
 104+ 67AA 3A 2D 84     .LaserDamage:           ld      a,(CurrLaserDamageOutput)
 105+ 67AD CD 58 DB                             call    DamageShip
 106+ 67B0 3A 41 C0                             ld      a,(UBnKexplDsp)                                 ; is it destroyed
 107+ 67B3 E6 A0                                and     %10100000
 108+ 67B5 C2 C8 67                             jp      nz,.ProcessedUniverseSlot                        ; can't lock on debris
 109+ 67B8              .NoLaser:
 110+ 67B8              ; Now check missile lock
 111+ 67B8              .PlayerMissileLock:     JumpIfMemNeNusng MissileTargettingFlag, StageMissileTargeting, .ProcessedUniverseSlot
 111+ 67B8 3A 13 84    >                        ld  a,(MissileTargettingFlag)
 111+ 67BB FE FE       >                        cp  StageMissileTargeting
 111+ 67BD C2 C8 67    >                        jp  nz,.ProcessedUniverseSlot
 112+ 67C0 3A D6 81     .LockPlayerMissile:     ld      a,(SelectedUniverseSlot)                        ; set to locked and nto launchedd
 113+ 67C3                                      LockMissileToA                                          ; .
 113+ 67C3 F6 80       >                        or      $80
 113+ 67C5 32 13 84    >                        ld      (MissileTargettingFlag),a
 114+ 67C8              .ProcessedUniverseSlot:
 115+ 67C8              ;...Tactics Section................................................................................................................
 116+ 67C8              .AreWeReadyForAI:       IsSlotMissile                                           ; Missiles update every iteration
 116+ 67C8 21 F0 81    >                        ld      hl,UniverseSlotType
 116+ 67CB 7E          >                        ld      a,(hl)
 116+ 67CC FE 01       >                        cp      ShipTypeMissile
 117+ 67CE CA 0E 68                             jp      z,.UpdateMissile                                ; so we bypass the logic check
 118+ 67D1                                      CallIfMemEqMemusng SelectedUniverseSlot, CurrentUniverseAI, UpdateShip
 118+ 67D1 3A D6 81    >                        ld   a,(SelectedUniverseSlot)
 118+ 67D4 21 D5 81    >                        ld   hl,CurrentUniverseAI
 118+ 67D7 BE          >                        cp   (hl)
 118+ 67D8 CC D8 9D    >                        call    z,UpdateShip
 119+ 67DB              .UniverseSlotIsEmpty:
 120+ 67DB 3A D6 81     .DoneAICheck:           ld      a,(SelectedUniverseSlot)                        ; Move to next ship cycling if need be to 0
 121+ 67DE 3C                                   inc     a                                               ; .
 122+ 67DF                                      JumpIfAGTENusng   UniverseSlotListSize, .UpdateAICounter; .
 122+ 67DF FE 0C       >                        cp     UniverseSlotListSize
 122+ 67E1 D2 EA 67    >                        jp		nc,.UpdateAICounter
 123+ 67E4 32 D6 81                             ld      (SelectedUniverseSlot),a
 124+ 67E7 C3 8F 66                             jp      .UpdateUniverseLoop
 125+ 67EA 3A D5 81     .UpdateAICounter:       ld      a,(CurrentUniverseAI)
 126+ 67ED 3C                                   inc     a
 127+ 67EE FE 0C                                cp      12
 128+ 67F0 38 01                                jr      c,.IterateAI
 129+ 67F2 AF                                   xor     a
 130+ 67F3 32 D5 81     .IterateAI:             ld      (CurrentUniverseAI),a
 131+ 67F6              .CheckIfStationAngry:   ReturnIfMemFalse  SetStationAngryFlag
 131+ 67F6 3A D7 81    >                        ld      a,(SetStationAngryFlag)
 131+ 67F9 A7          >                        and     a
 131+ 67FA C0          >                        ret     nz
 132+ 67FB              .SetStationAngryIfPoss: ReturnIfMemNeNusng UniverseSlotList, ShipTypeStation
 132+ 67FB 3A E4 81    >                        ld   a,(UniverseSlotList)
 132+ 67FE FE 02       >                        cp     ShipTypeStation
 132+ 6800 C8          >                        ret    z
 133+ 6801                                      MMUSelectUniverseN 0
 133+ 6801 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 134+ 6805 CD 3E C5                             call    SetShipHostile
 135+ 6808                                      SetMemFalse    SetStationAngryFlag
 135+ 6808 3E FF       >                        ld      a,$FF
 135+ 680A 32 D7 81    >                        ld      (SetStationAngryFlag),a
 136+ 680D C9                                   ret
 137+ 680E CD D8 9D     .UpdateMissile:         call    UpdateShip                                      ; we do it this way top avoid double calling
 138+ 6811 C3 DB 67                             jp      .DoneAICheck                                    ; ai if the ai slot to process = missile type
 139+ 6814              ;..................................................................................................................................
 140+ 6814
 141+ 6814 AF           DrawForwardShips:       xor     a
 142+ 6815 32 8A 66     .DrawShipLoop:          ld      (CurrentShipUniv),a
 143+ 6818 CD 4D 86                             call    GetTypeAtSlotA
 144+ 681B FE FF                                cp      $FF
 145+ 681D 28 12                                jr      z,.ProcessedDrawShip
 146+ 681F              ; Add in a fast check for ship behind to process nodes and if behind jump to processed Draw ship
 147+ 681F 3A 8A 66     .SelectShipToDraw:       ld      a,(CurrentShipUniv)
 148+ 6822                                      MMUSelectUniverseA
 148+ 6822 C6 46       >                     add    a,BankUNIVDATA0
 148+ 6824 ED 92 56    >                     nextreg UniverseMMU,       a
 149+ 6827 CD EF D9     .ProcessUnivShip:       call    ProcessShip          ; The whole explosion logic is now encapsulated in process ship ;TODO TUNE THIS   ;; call    ProcessUnivShip
 150+ 682A              ; Debris still appears on radar
 151+ 682A              .UpdateRadar:
 152+ 682A              ;;;Does nothing                       ld      a,BankFrontView
 153+ 682A              ;;;Does nothing                       MMUSelectScreenA
 154+ 682A              ;;;Does nothing         ld      a,(CurrentShipUniv)
 155+ 682A              ;;;Does nothing         MMUSelectUniverseA
 156+ 682A
 157+ 682A                                      CallIfMemTrue ConsoleRedrawFlag,UpdateScannerShip ; Always update ship positions
 157+ 682A 3A FD 81    >                        ld      a,(ConsoleRedrawFlag)
 157+ 682D A7          >                        and     a
 157+ 682E CC 94 74    >                        call    z, UpdateScannerShip
 158+ 6831 3A 8A 66     .ProcessedDrawShip:     ld      a,(CurrentShipUniv)
 159+ 6834 3C                                   inc     a
 160+ 6835                                      JumpIfALTNusng   UniverseSlotListSize, .DrawShipLoop
 160+ 6835 FE 0C       >                        cp      UniverseSlotListSize
 160+ 6837 DA 15 68    >                        jp		c, .DrawShipLoop
 161+ 683A              .DrawSunCompass:        MMUSelectSun
 161+ 683A ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 162+ 683E CD AF 70                             call    UpdateCompassSun                ; Always update the sun position
 163+ 6841 CD 12 73                             call    UpdateScannerSun                ; Always attempt to put the sun on the scanner
 164+ 6844              .CheckPlanetCompass:    JumpIfMemFalse SpaceStationSafeZone, .DrawStationCompass
 164+ 6844 3A 01 82    >                        ld      a,(SpaceStationSafeZone)
 164+ 6847 A7          >                        and     a
 164+ 6848 C2 56 68    >                        jp      nz, .DrawStationCompass
 165+ 684B              .DrawPlanetCompass:     MMUSelectPlanet
 165+ 684B ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 166+ 684F CD 2F 71                             call    UpdateCompassPlanet
 167+ 6852 CD D3 73                             call    UpdateScannerPlanet
 168+ 6855 C9                                   ret
 169+ 6856              .DrawStationCompass:
 170+ 6856
 171+ 6856 C9                                   ret
 172+ 6857
 173+ 6857
 174+ 6857              ;..................................................................................................................................
 175+ 6857
 176+ 6857 3E 46        TestForNextShip:        ld      a,c_Pressed_Quit
 177+ 6859 CD 08 7E                             call    is_key_pressed
 178+ 685C C0                                   ret     nz
 179+ 685D 3A DB 69                             ld      a,(currentDemoShip)
 180+ 6860 3C                                   inc     a
 181+ 6861 FE 2C                                cp      44
 182+ 6863 20 01                                jr      nz,.TestOK
 183+ 6865 AF                                   xor     a
 184+ 6866 32 DB 69     .TestOK:                ld      (currentDemoShip),a
 185+ 6869 CD ED 85                             call    ClearUnivSlotList
 186+ 686C 3A DB 69                             ld      a,(currentDemoShip)
 187+ 686F 47                                   ld      b,a
 188+ 6870 AF                                   xor     a
 189+ 6871 CD 04 86                             call    SetSlotAToTypeB
 190+ 6874 F5                                   push    af
 191+ 6875                                      MMUSelectUniverseN 2
 191+ 6875 ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 192+ 6879                                      SetSlotAToUnivClass
 192+ 6879 08          >                        ex      af,af'
 192+ 687A 3A 31 C3    >                        ld      a,(ShipTypeAddr)
 192+ 687D 47          >                        ld      b,a
 192+ 687E 08          >                        ex      af,af'
 192+ 687F CD 0B 86    >                        call    SetSlotAToClassB
 193+ 6882 F1                                   pop     af
 194+ 6883 CD 50 C5                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 195+ 6886 3A DB 69                             ld      a,(currentDemoShip)
 196+ 6889                                      MMUSelectShipBank1
 196+ 6889 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 197+ 688D CD 0F E0                             call    GetShipBankId
 198+ 6890                                      MMUSelectShipBankA
 198+ 6890 ED 92 57    >					 nextreg ShipModelMMU,	    a
 199+ 6893 78                                   ld      a,b
 200+ 6894 CD 6A E0                             call    CopyShipToUniverse
 201+ 6897 CD 20 6D                             call    SetInitialShipPosition
 202+ 689A CD 43 6A                             call    DEBUGSETNODES
 203+ 689D C9                                   ret
 204+ 689E
# file closed: ./GameEngine/UpdateUniverseObjects.asm
 264  689E              ;..................................................................................................................................
 265  689E              ;; TODODrawForwardSun:         MMUSelectSun
 266  689E              ;; TODO                        ld      a,(SunKShipType)
 267  689E              ;; TODO.ProcessBody:           cp      129
 268  689E              ;; TODO                        jr      nz,.ProcessPlanet
 269  689E              ;; TODO.ProcessSun:            call    ProcessSun
 270  689E              ;; TODO
 271  689E              ;; TODOProcessSun:             call    CheckSunDistance
 272  689E              ;; TODO
 273  689E              ;; TODO                        ret
 274  689E              ;; TODO.ProcessPlanet:         call    ProcessPlanet
 275  689E              ;; TODO                        ret
 276  689E              ;..................................................................................................................................
 277  689E
 278  689E
 279  689E              ;;;ProcessUnivShip:        call    CheckVisible               ; Will check for negative Z and skip (how do we deal with read and side views? perhaps minsky transformation handles that?)
 280  689E              ;;;                        ret     c
 281  689E              ;;;                        ld      a,(UbnkDrawAsDot)
 282  689E              ;;;                        and     a
 283  689E              ;;;                        jr      z,.CarryOnWithDraw
 284  689E              ;;;.itsJustADot:           ld      bc,(UBnkNodeArray)          ; if its at dot range
 285  689E              ;;;                        ld      a,$FF                       ; just draw a pixel
 286  689E              ;;;                        MMUSelectLayer2                     ; then go to update radar
 287  689E              ;;;                        call    l2_plot_pixel               ;
 288  689E              ;;;                        ClearCarryFlag
 289  689E              ;;;                        ret
 290  689E              ;;;.ProcessShipNodes:      call    ProcessShip
 291  689E              ;;;
 292  689E              ;;;call    ProcessNodes ; it hink here we need the star and planet special cases
 293  689E              ;;;.DrawShip:              call    CullV2				        ; culling but over aggressive backface assumes all 0 up front TOFIX
 294  689E              ;;;                        call    PrepLines                   ; LL72, process lines and clip, ciorrectly processing face visibility now
 295  689E              ;;;                        ld      a,(CurrentShipUniv)
 296  689E              ;;;                        MMUSelectUniverseA
 297  689E              ;;;                        call   DrawLines
 298  689E              ;;;                        ClearCarryFlag
 299  689E              ;;;                        ret
 300  689E
 301  689E
 302  689E              ;----------------------------------------------------------------------------------------------------------------------------------
 303  689E 49 6E 74 69  InitialiseMessage       DB "Intialising",0
 303  68A2 61 6C 69 73
 303  68A6 69 6E 67 00
 304  68AA 4C 6F 61 64  LoadingSpritesMessage   DB "LoadingSprites",0
 304  68AE 69 6E 67 53
 304  68B2 70 72 69 74
 304  68B6 65 73 00
 305  68B9 49 6E 74 69  InitialisingGalaxies    DB "IntiailisingGalaxies",0
 305  68BD 61 69 6C 69
 305  68C1 73 69 6E 67
 305  68C5 47 61 6C 61
 305  68C9 78 69 65 73
 305  68CD 00
 306  68CE 00           LoadCounter             DB 0
 307  68CF 2A 00        SpriteProgress          DB "*",0
 308  68D1              ;----------------------------------------------------------------------------------------------------------------------------------
 309  68D1
 310  68D1              NeedAMessageQueue:
 311  68D1
 312  68D1              ;..................................................................................................................................
 313  68D1                                      INCLUDE "./GameEngine/HyperSpaceTimers.asm"
# file opened: ./GameEngine/HyperSpaceTimers.asm
   1+ 68D1              ;----------------------------------------------------------------------------------------------------------------------------------
   2+ 68D1 3A DA 81     UpdateCountdownNumber:  ld		a,(OuterHyperCount)
   3+ 68D4 11 2B 69                             ld		de,Hyp_counter
   4+ 68D7 0E 9C                                ld	c, -100
   5+ 68D9 CD E3 68                             call	.Num1
   6+ 68DC 0E F6                                ld	c,-10
   7+ 68DE CD E3 68                             call	.Num1
   8+ 68E1 0E FF                                ld	c,-1
   9+ 68E3 06 2F        .Num1:	                ld	b,'0'-1
  10+ 68E5 04           .Num2:	                inc		b
  11+ 68E6 81                                   add		a,c
  12+ 68E7 38 FC                                jr		c,.Num2
  13+ 68E9 91                                   sub 	c
  14+ 68EA C5                                   push	bc
  15+ 68EB F5                                   push	af
  16+ 68EC 79                                   ld		a,c
  17+ 68ED FE FF                                cp		-1
  18+ 68EF 78                                   ld		a,b
  19+ 68F0 12                                   ld		(de),a
  20+ 68F1 13                                   inc		de
  21+ 68F2 F1                                   pop		af
  22+ 68F3 C1                                   pop		bc
  23+ 68F4 C9                                   ret
  24+ 68F5
  25+ 68F5              ;----------------------------------------------------------------------------------------------------------------------------------
  26+ 68F5 54 6F 3A     Hyp_message             DB "To:"
  27+ 68F8 00 00 00...  Hyp_to                  DS 32
  28+ 6918 20           Hyp_space1              DB " "
  29+ 6919 30 2E 30     Hyp_dist_amount         DB "0.0"
  30+ 691C 2E           Hyp_decimal             DB "."
  31+ 691D 30           Hyp_fraction            DB "0"
  32+ 691E 20 4C 59 00  Hyp_dis_ly              DB " LY",0
  33+ 6922 43 68 61 72  Hyp_charging            DB "Charging:"
  33+ 6926 67 69 6E 67
  33+ 692A 3A
  34+ 692B 30 30 30 00  Hyp_counter             DB "000",0
  35+ 692F 00 00 00...  Hyp_centeredTarget      DS 32
  36+ 694F 00           Hyp_centeredEol         DB 0
  37+ 6950 00 00 00...  Hyp_bufferpadding       DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
  38+ 6970 00 00 00...  Hyp_centeredCharging    DS 32
  39+ 6990 00           Hyp_centeredEol2        DB 0
  40+ 6991 00 00 00...  Hyp_bufferpadding2      DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
  41+ 69B1
  42+ 69B1
# file closed: ./GameEngine/HyperSpaceTimers.asm
 314  69B1
 315  69B1
 316  69B1
 317  69B1              ;DisplayTargetAndRange
 318  69B1              ;DisplayCountDownNumber
 319  69B1              ;----------------------------------------------------------------------------------------------------------------------------------
 320  69B1 3A 23 81     TestPauseMode:          ld      a,(GamePaused)
 321  69B4 FE 00                                cp      0
 322  69B6 20 12                                jr      nz,.TestForResume
 323  69B8 3A 1A 81     .CheckViewMode:         ld      a,(ScreenIndex)                     ; we can only pause if not on screen view
 324  69BB                                      ReturnIfAGTENusng       ScreenFront
 324  69BB FE 09       >                        cp    ScreenFront
 324  69BD D0          >                        ret	 nc
 325  69BE 3E 40        .CheckPauseKey:         ld      a,c_Pressed_Freeze
 326  69C0 CD 08 7E                             call    is_key_pressed
 327  69C3 C0                                   ret     nz
 328  69C4              .PausePressed:          SetAFalse                                  ; doesn't really matter if we were in pause already as resume is a different key
 328  69C4 3E FF       >                        ld      a,$FF
 329  69C6 32 23 81                             ld      (GamePaused),a
 330  69C9 C9                                   ret
 331  69CA 3E 42        .TestForResume:         ld      a,c_Pressed_Resume                  ; In pause loop so we can check for resume key
 332  69CC CD 08 7E                             call    is_key_pressed
 333  69CF C0                                   ret     nz
 334  69D0 AF           .ResumePressed:         xor     a
 335  69D1 32 23 81                             ld      (GamePaused),a                      ; Resume pressed to reset pause state
 336  69D4 C9                                   ret
 337  69D5
 338  69D5 3E 46        TestQuit:               ld      a,c_Pressed_Quit
 339  69D7 CD 08 7E                             call    is_key_pressed
 340  69DA C9                                   ret
 341  69DB 0D           currentDemoShip:        DB      13;$12 ; 13 - corirollis
 342  69DC
 343  69DC
 344  69DC 21 10 C0     GetStationVectorToWork: ld      hl,UBnKxlo
 345  69DF 11 30 81                             ld      de,varVector9ByteWork
 346  69E2 ED A0                                ldi
 347  69E4 ED A0                                ldi
 348  69E6 ED A0                                ldi
 349  69E8 ED A0                                ldi
 350  69EA ED A0                                ldi
 351  69EC ED A0                                ldi
 352  69EE ED A0                                ldi
 353  69F0 ED A0                                ldi
 354  69F2 ED A0                                ldi
 355  69F4 2A 30 81     .CalcNormalToXX15:      ld      hl, (varVector9ByteWork)  ; X
 356  69F7 ED 5B 33 81                          ld      de, (varVector9ByteWork+3); Y
 357  69FB ED 4B 36 81                          ld      bc, (varVector9ByteWork+6); Z
 358  69FF 7D                                   ld      a,l
 359  6A00 B3                                   or      e
 360  6A01 B1                                   or      c
 361  6A02 F6 01                                or      1
 362  6A04 DD 6F                                ld      ixl,a                   ; or all bytes and with 1 so we have at least a 1
 363  6A06 7C                                   ld      a,h
 364  6A07 B2                                   or      d
 365  6A08 B0                                   or      b                       ; or all high bytes but don't worry about 1 as its sorted on low bytes
 366  6A09 C5           .MulBy2Loop:            push    bc
 367  6A0A DD 45                                ld      b,ixl
 368  6A0C CB 20                                sla     b                       ; Shift ixl left
 369  6A0E DD 68                                ld      ixl,b
 370  6A10 C1                                   pop     bc
 371  6A11 CB 17                                rl      a                       ; roll into a
 372  6A13 38 0E                                jr      c,.TA2                  ; if bit rolled out of rl a then we can't shift any more to the left
 373  6A15                                      ShiftHLLeft1                    ; Shift Left X
 373  6A15 CB 25       >			   sla l
 373  6A17 CB 14       >			   rl  h
 374  6A19                                      ShiftDELeft1                    ; Shift Left Y
 374  6A19 CB 23       >			   sla e
 374  6A1B CB 12       >			   rl  d
 375  6A1D                                      ShiftBCLeft1                    ; Shift Left Z
 375  6A1D CB 21       >			   sla c
 375  6A1F CB 10       >			   rl  b
 376  6A21 18 E6                                jr      .MulBy2Loop              ; no need to do jr nc as the first check looks for high bits across all X Y and Z
 377  6A23 3A 32 81     .TA2:                   ld      a,(varVector9ByteWork+2); x sign
 378  6A26 CB 3C                                srl     h
 379  6A28 B4                                   or      h
 380  6A29 32 92 C0                             ld      (XX15VecX),a         ; note this is now a signed highbyte
 381  6A2C 3A 35 81                             ld      a,(varVector9ByteWork+5); y sign
 382  6A2F CB 3A                                srl     d
 383  6A31 B2                                   or      d
 384  6A32 32 93 C0                             ld      (XX15VecY),a         ; note this is now a signed highbyte
 385  6A35 3A 38 81                             ld      a,(varVector9ByteWork+8); y sign
 386  6A38 CB 38                                srl     b
 387  6A3A B0                                   or      b
 388  6A3B 32 94 C0                             ld      (XX15VecZ),a         ; note this is now a signed highbyte
 389  6A3E CD 3B 97                             call    normaliseXX1596fast
 390  6A41 C9                                   ret                          ; will return with a holding Vector Z
 391  6A42
 392  6A42 00           TidyCounter             DB  0
 393  6A43
 394  6A43                          INCLUDE "./debugMatrices.asm"
# file opened: ./debugMatrices.asm
   1+ 6A43
   2+ 6A43
   3+ 6A43 21 66 6A     DEBUGSETNODES:          ld      hl,DEBUGUBNKDATA
   4+ 6A46 11 10 C0                             ld      de,UBnKxlo
   5+ 6A49 01 09 00                             ld      bc,9
   6+ 6A4C ED B0                                ldir
   7+ 6A4E 21 6F 6A                             ld      hl,DEBUGROTMATDATA
   8+ 6A51 11 19 C0                             ld      de,UBnkrotmatSidevX
   9+ 6A54 01 12 00                             ld      bc,6*3
  10+ 6A57 ED B0                                ldir
  11+ 6A59 C9                                   ret
  12+ 6A5A
  13+ 6A5A 21 66 6A     DEBUGSETPOS:            ld      hl,DEBUGUBNKDATA
  14+ 6A5D 11 10 C0                             ld      de,UBnKxlo
  15+ 6A60 01 06 00                             ld      bc,9 - 3
  16+ 6A63 ED B0                                ldir
  17+ 6A65 C9                                   ret
  18+ 6A66
  19+ 6A66              ; culltest
  20+ 6A66              ;DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$31,	$03,	$00
  21+ 6A66 00 00 00 00  DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$5C,	$07,	$00
  21+ 6A6A 00 00 5C 07
  21+ 6A6E 00
  22+ 6A6F 00 60 00 00  DEBUGROTMATDATA:        db      $00,	$60,	$00,	$00,	$00,	$00
  22+ 6A73 00 00
  23+ 6A75 00 00 00 60                          db      $00,	$00,	$00,	$60,	$00,	$00
  23+ 6A79 00 00
  24+ 6A7B 00 00 00 00                          db      $00,	$00,	$00,	$00,	$00,	$E0
  24+ 6A7F 00 E0
  25+ 6A81
  26+ 6A81              ; FAILS due to sharp angle, OK now
  27+ 6A81              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$EF,	$03,	$00
  28+ 6A81              ;DEBUGROTMATDATA:        db      $01,	$2F,	$B2,	$CC,	$4C,	$27
  29+ 6A81              ;                        db      $17,	$46,	$87,	$3C,	$95,	$20
  30+ 6A81              ;                        db      $E2,	$32,	$31,	$8C,	$EF,	$D1
  31+ 6A81              ; TOP RIGHT CORNER Passes as python and cobra
  32+ 6A81              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$5B,	$04,	$00
  33+ 6A81              ;DEBUGROTMATDATA:        db      $E2,	$03,	$3A,	$16,	$F5,	$60
  34+ 6A81              ;                        db      $D3,	$CE,	$F3,	$BA,	$4E,	$0F
  35+ 6A81              ;                        db      $03,	$BE,	$4A,	$4B,	$DB,	$8C
  36+ 6A81              ; Looks OK
  37+ 6A81              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $EE,    $02,    $00
  38+ 6A81              ;DEBUGROTMATDATA:        db      $35,    $d8,    $98,    $9f,    $b0,    $1a
  39+ 6A81              ;                        db      $4B,    $26,    $CE,    $d6,    $60,    $16
  40+ 6A81              ;                        db      $89,    $90,    $c4,    $9f,    $dd,    $d9
  41+ 6A81              ;
  42+ 6A81              ; Massive horizontal line
  43+ 6A81              ; 15th line (or line 14 has corrodinates 05,00 to D8,00) which looks wrong
  44+ 6A81              ; node array looks OK, looks liek its sorted as it was both -ve Y off screen fix added
  45+ 6A81              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $BD,    $03,    $00
  46+ 6A81              ;DEBUGROTMATDATA:        db      $59,    $CF,    $06,    $B6,    $61,    $8D
  47+ 6A81              ;                        db      $AD,    $B1,    $97,    $4F,    $C9,    $98
  48+ 6A81              ;                        db      $61,    $99,    $E0,    $0D,    $11,    $5C
  49+ 6A81              ; Line lost in clipping
  50+ 6A81              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $8B,    $04,    $00
  51+ 6A81              ;DEBUGROTMATDATA:        db      $A3,    $4D,    $A9,    $28,    $F8,    $AF
  52+ 6A81              ;                        db      $FB,    $97,    $8C,    $B5,    $FB,    $D0
  53+ 6A81              ;                        db      $DB,    $3A,    $29,    $CA,    $29,    $1C
  54+ 6A81              ;DEBUGUBNKDATA:          db      $5E,    $02,    $00,    $FE,    $00,    $FE,    $E5,    $09,    $00
  55+ 6A81              ;DEBUGROTMATDATA:        db      $A6,    $88,    $89,    $BB,    $53,    $4D
  56+ 6A81              ;                        db      $6D,    $D9,    $F0,    $99,    $BA,    $9E
  57+ 6A81              ;                        db      $4A,    $A8,    $89,    $47,    $DF,    $33
  58+ 6A81              ;
  59+ 6A81              ;DEBUGUBNKDATA:          db      $ED,    $05,    $00,    $FE,    $00,    $FE,    $F1,    $0A,    $00
  60+ 6A81              ;DEBUGROTMATDATA:        db      $1B,    $33,    $DE,    $B4,    $ED,    $C5
  61+ 6A81              ;                        db      $73,    $C4,    $BC,    $1E,    $96,    $C4
  62+ 6A81              ;                        db      $55,    $B9,    $35,    $D1,    $80,    $0F
  63+ 6A81              ; top left off right issue
  64+ 6A81              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $2F,    $03,    $00
  65+ 6A81              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  66+ 6A81              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  67+ 6A81              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  68+ 6A81              ; test middle of screen
  69+ 6A81              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  70+ 6A81              ;
  71+ 6A81              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  72+ 6A81              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  73+ 6A81              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  74+ 6A81              ; test middle of screen futher away
  75+ 6A81              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $02,    $00
  76+ 6A81              ;
  77+ 6A81              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  78+ 6A81              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  79+ 6A81              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  80+ 6A81
  81+ 6A81              ; Test left center clip still warping
  82+ 6A81              ;DEBUGUBNKDATA:          db      $80,    $00,    $80,    $00,    $00,    $00,    $20,    $01,    $00
  83+ 6A81              ;
  84+ 6A81              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  85+ 6A81              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  86+ 6A81              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  87+ 6A81              ; Test right center clip - seems to be warping values towards bottom of screen on clip
  88+ 6A81              ;DEBUGUBNKDATA:          db      $80,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  89+ 6A81              ;
  90+ 6A81              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  91+ 6A81              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  92+ 6A81              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  93+ 6A81              ; Test top center clip test 1 - good test many ships fail
  94+ 6A81              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $00,    $20,    $01,    $00
  95+ 6A81              ;
  96+ 6A81              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  97+ 6A81              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  98+ 6A81              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  99+ 6A81              ; Test top center clip test 2 - Poss 2nd ship has an issue with a small line
 100+ 6A81              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $60,    $00,    $00,    $2F,    $01,    $00
 101+ 6A81              ;
 102+ 6A81              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 103+ 6A81              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 104+ 6A81              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 105+ 6A81              ; Test bottom center clip ; complet shambles as if its forcing cip to below 128
 106+ 6A81              ; looks better now may have some clipping issues maybe ship data
 107+ 6A81              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $80,    $20,    $01,    $00
 108+ 6A81              ;
 109+ 6A81              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 110+ 6A81              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 111+ 6A81 E6 01 81 AD                          db      $E6,    $01,    $81,    $AD,    $B0,    $55
 111+ 6A85 B0 55
 112+ 6A87              ; Test left top center clip
 113+ 6A87
 114+ 6A87              ; Test right top center clip
 115+ 6A87              ; Test left bottom center clip
 116+ 6A87              ; Test right bottom center clip
 117+ 6A87
 118+ 6A87              ; Tests with no clip
 119+ 6A87              ;DEBUGUBNKDATA:          db      $39,    $00,    $00,    $43,    $00,    $00,    $2F,    $04,    $00
 120+ 6A87              ;
 121+ 6A87              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 122+ 6A87              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 123+ 6A87              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 124+ 6A87              ;
 125+ 6A87              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $1F,    $00,    $00
 126+ 6A87              ;
 127+ 6A87              ; UBNKPOs example 39,01,00,43,01,00,f4,03,00
 128+ 6A87              ; rotmat  example b1, 83,ae,5d,b0,1a,5e,de,82,8a,69,16,70,99,52,19,dd,d9
 129+ 6A87
# file closed: ./debugMatrices.asm
 395  6A87
 396  6A87
 397  6A87              ;TODO Optimisation
 398  6A87              ; Need this table to handle differnet events
 399  6A87              ; 1-main loop update - just general updates specfic to that screen that are not galaxy or stars, e.g. update heat, console
 400  6A87              ; cursor key, joystick press
 401  6A87              ; cursor key, joystick press
 402  6A87              ; non cursor keys presses
 403  6A87              ;
 404  6A87                                      INCLUDE "./Tables/ScreenControlTable.asm"
# file opened: ./Tables/ScreenControlTable.asm
   1+ 6A87              ; First byte is now docked flag
   2+ 6A87              ;
   3+ 6A87              ; Padded to 8 bytes to allow a * 8 for addressing
   4+ 6A87              ; Byte 0   - Docked flag  : 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
   5+ 6A87              ; Byte 1   - Screen Id
   6+ 6A87              ; Byte 2,3 - address of keypress table
   7+ 6A87              ; Byte 4   - Bank with Display code
   8+ 6A87              ; Byte 5,6 - Function for display
   9+ 6A87              ; Byte 7,8 - Main loop update routine
  10+ 6A87              ; Byte 9   - Draw stars Y/N ; also are we in an external view that can have guns?
  11+ 6A87              ; byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
  12+ 6A87              ; byte 11  - Double Buffering 0 = no, 1 = yes
  13+ 6A87              ; byte 12,13  - cursor key input routine
  14+ 6A87              ; byte 14  - HyperspaceBlock - can not select this screen if in hyperpace - 00 can , 01 can not
  15+ 6A87              ; byte 15    padding at the momnent (should add in an "AI enabled flag" for optimistation, hold previous value and on change create ships
  16+ 6A87              ; byte 16  - block update ship
  17+ 6A87              ;                          0    1                 2                              3                               4                    5                            6                              7                     8                       9   10  11  12                          13                          14  15  16
  18+ 6A87 00 00 59 7D  ScreenKeyMap:           DB 0,   ScreenLocal     , low addr_Pressed_LocalChart,   high addr_Pressed_LocalChart,   BankMenuShrCht,      low draw_local_chart_menu,   high draw_local_chart_menu,    $00,                  $00,                    $00,$00,$00,low local_chart_cursors,    high local_chart_cursors,   $01,$00,$00;low loop_local_chart_menu,   high loop_local_chart_menu
  18+ 6A8B 32 FC C3 00
  18+ 6A8F 00 00 00 00
  18+ 6A93 5A C4 01 00
  18+ 6A97 00
  19+ 6A98 00 01 57 7D  ScreenKeyGalactic:      DB 0,   ScreenGalactic  , low addr_Pressed_GalacticChrt, high addr_Pressed_GalacticChrt, BankMenuGalCht,      low draw_galactic_chart_menu,high draw_galactic_chart_menu, low loop_gc_menu,     high loop_gc_menu,      $00,$00,$00,low galctic_chart_cursors,  high galctic_chart_cursors, $01,$00,$00
  19+ 6A9C 33 48 C1 78
  19+ 6AA0 C2 00 00 00
  19+ 6AA4 00 C3 01 00
  19+ 6AA8 00
  20+ 6AA9 01 02 5B 7D                          DB 1,   ScreenMarket    , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  low loop_market_menu, high loop_market_menu,  $00,$00,$00,$00,                        $00,                        $01,$00,$00
  20+ 6AAD 36 43 C3 FA
  20+ 6AB1 C3 00 00 00
  20+ 6AB5 00 00 01 00
  20+ 6AB9 00
  21+ 6ABA 02 03 5B 7D                          DB 2,   ScreenMarketDsp , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00
  21+ 6ABE 36 43 C3 00
  21+ 6AC2 00 00 00 00
  21+ 6AC6 00 00 01 00
  21+ 6ACA 00
  22+ 6ACB 00 04 5D 7D  ScreenCmdr:             DB 0,   ScreenStatus    , low addr_Pressed_Status,       high addr_Pressed_Status,       BankMenuStatus,      low draw_status_menu,        high draw_status_menu,         low loop_STAT_menu,  high loop_STAT_menu,     $00,$00,$00,$00,                        $00,                        $01,$00,$00
  22+ 6ACF 3F 2D CF 76
  22+ 6AD3 CF 00 00 00
  22+ 6AD7 00 00 01 00
  22+ 6ADB 00
  23+ 6ADC 00 05 5F 7D                          DB 0,   ScreenInvent    , low addr_Pressed_Inventory,    high addr_Pressed_Inventory,    BankMenuInvent,      low draw_inventory_menu,     high draw_inventory_menu,      $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00
  23+ 6AE0 34 F5 C1 00
  23+ 6AE4 00 00 00 00
  23+ 6AE8 00 00 01 00
  23+ 6AEC 00
  24+ 6AED 00 06 6D 7D                          DB 0,   ScreenPlanet    , low addr_Pressed_PlanetData,   high addr_Pressed_PlanetData,   BankMenuSystem,      low draw_system_data_menu,   high draw_system_data_menu,    $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00
  24+ 6AF1 35 F0 C2 00
  24+ 6AF5 00 00 00 00
  24+ 6AF9 00 00 01 00
  24+ 6AFD 00
  25+ 6AFE 01 07 55 7D                          DB 1,   ScreenEquip     , low addr_Pressed_Equip,        high addr_Pressed_Equip,        BankMenuEquipS,      low draw_eqshp_menu,         high draw_eqshp_menu,          low loop_eqshp_menu,  high loop_eqshp_menu,   $00,$00,$00,$00,                        $00,                        $01,$00,$00
  25+ 6B02 40 EA D3 86
  25+ 6B06 D4 00 00 00
  25+ 6B0A 00 00 01 00
  25+ 6B0E 00
  26+ 6B0F 01 08 4F 7D                          DB 1,   ScreenLaunch    , low addr_Pressed_Launch,       high addr_Pressed_Launch,       BankLaunchShip,      low draw_launch_ship,        high draw_launch_ship,         low loop_launch_ship, high loop_launch_ship,  $00,$01,$01,$00,                        $00,                        $01,$00,$FF
  26+ 6B13 41 79 C1 63
  26+ 6B17 C2 00 01 01
  26+ 6B1B 00 00 01 00
  26+ 6B1F FF
  27+ 6B20 02 09 25 7D  ScreenKeyFront:         DB 2,   ScreenFront     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          low update_front_view,high update_front_view, $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00,$00
  27+ 6B24 3E 6A C0 D2
  27+ 6B28 C0 01 00 01
  27+ 6B2C E4 C2 00 00
  27+ 6B30 00
  28+ 6B31 02 0A 25 7D                          DB 2,   ScreenAft       , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00,$00
  28+ 6B35 3E 6A C0 00
  28+ 6B39 00 01 00 01
  28+ 6B3D E4 C2 00 00
  28+ 6B41 00
  29+ 6B42 02 0B 25 7D                          DB 2,   ScreenLeft      , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00,$00
  29+ 6B46 3E 6A C0 00
  29+ 6B4A 00 01 00 01
  29+ 6B4E E4 C2 00 00
  29+ 6B52 00
  30+ 6B53 02 0C 25 7D                          DB 2,   ScreenRight     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00,$00
  30+ 6B57 3E 6A C0 00
  30+ 6B5B 00 01 00 01
  30+ 6B5F E4 C2 00 00
  30+ 6B63 00
  31+ 6B64 03 0D FF FF                          DB 3,   ScreenDocking   , $FF,                           $FF,                            BankLaunchShip,      low draw_docking_ship,       high draw_docking_ship,        low loop_docking_ship,high loop_docking_ship, $00,$01,$01,$00,                        $00,                        $01,$00,$FF
  31+ 6B68 41 F5 C1 98
  31+ 6B6C C2 00 01 01
  31+ 6B70 00 00 01 00
  31+ 6B74 FF
  32+ 6B75 01 0E FF FF                          DB 1,   ScreenHyperspace, $FF,                           $FF,                            BankFrontView,       low draw_hyperspace,         high draw_hyperspace,          low loop_hyperspace,  high loop_hyperspace,   $00,$01,$01,$00,                        $00,                        $01,$00,$FF
  32+ 6B79 3E 9C C2 E2
  32+ 6B7D C2 00 01 01
  32+ 6B81 00 00 01 00
  32+ 6B85 FF
  33+ 6B86
  34+ 6B86              ;               DB low addr_Pressed_Aft,          high addr_Pressed_Aft,          BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  35+ 6B86              ;               DB low addr_Pressed_Left,         high addr_Pressed_Left,         BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  36+ 6B86              ;               DB low addr_Pressed_Right,        high addr_Pressed_Right,        BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  37+ 6B86              ScreenMapRow        EQU ScreenKeyGalactic - ScreenKeyMap
  38+ 6B86              ScreenMapLen        EQU ($ - ScreenKeyMap) / ScreenMapRow
  39+ 6B86              ScreenViewsStart    EQU (ScreenKeyFront - ScreenKeyMap)/ScreenMapRow
  40+ 6B86              ScreenCount         EQU 15
  41+ 6B86
# file closed: ./Tables/ScreenControlTable.asm
 405  6B86
 406  6B86 FF           ScreenTransitionForced  DB $FF
 407  6B87                  INCLUDE "./GameEngine/resetUniverse.asm"
# file opened: ./GameEngine/resetUniverse.asm
   1+ 6B87              ; Use bank 0 as source and bank 7 as write target
   2+ 6B87              ResetUniv:              MMUSelectCpySrcN BankUNIVDATA0	         ; master universe def in bank 0
   2+ 6B87 ED 91 50 46 >                     nextreg DMACpySourceMMU,	BankUNIVDATA0
   3+ 6B8B 3E 01                                ld		a,1             				 ; we can read bank 0 as if it was rom
   4+ 6B8D 06 0C                                ld		b,12
   5+ 6B8F C5 F5        .ResetCopyLoop:         push	bc,,af
   6+ 6B91                                      MMUSelectUniverseA			             ; copy from bank 0 to 71 to 12
   6+ 6B91 C6 46       >                     add    a,BankUNIVDATA0
   6+ 6B93 ED 92 56    >                     nextreg UniverseMMU,       a
   7+ 6B96 21 00 C0                             ld		hl,UniverseBankAddr
   8+ 6B99 11 00 00                             ld		de,dmaCopySrcAddr
   9+ 6B9C 01 AB 1C                             ld		bc,UnivBankSize
  10+ 6B9F CD C9 7C                             call	memcopy_dma
  11+ 6BA2 F1 C1                                pop		bc,,af
  12+ 6BA4 57                                   ld      d,a
  13+ 6BA5 C6 41                                add     "A"
  14+ 6BA7 32 0B C0                             ld      (StartOfUnivN),a
  15+ 6BAA 7A                                   ld      a,d
  16+ 6BAB 3C                                   inc		a
  17+ 6BAC 10 E1                                djnz	.ResetCopyLoop
  18+ 6BAE C9                                   ret
  19+ 6BAF
  20+ 6BAF              ; Use bank 0 as source and bank 7 as write target
  21+ 6BAF              ResetGalaxy:            MMUSelectCpySrcN BankGalaxyData0	     ; master universe def in bank 0 we can read bank 0 as if it was rom
  21+ 6BAF ED 91 50 5B >                     nextreg DMACpySourceMMU,	BankGalaxyData0
  22+ 6BB3 3E 5C                                ld		a,BankGalaxyData1 			   	 ; and write to real location for galaxy data
  23+ 6BB5 06 07                                ld		b,7                              ; 8 galaxies but we start with galaxy 0
  24+ 6BB7 0E 01                                ld      c,1                              ;
  25+ 6BB9 F5           .ResetCopyLoop:         push	af                               ;
  26+ 6BBA C5                                   push	bc                               ;
  27+ 6BBB                                      MMUSelectGalaxyA    	                 ; copy from bank 0 to galaxy 1 to 7
  27+ 6BBB ED 92 57    >                     nextreg GalaxyDataMMU,       a
  28+ 6BBE 21 00 E0                             ld		hl,GalaxyDataAddr                ; using dma transfer
  29+ 6BC1 11 00 00                             ld		de,dmaCopySrcAddr                ; .
  30+ 6BC4 01 DC 1C                             ld		bc,GalaxyBankSize                ; .
  31+ 6BC7 CD C9 7C                             call	memcopy_dma                      ; .
  32+ 6BCA C1                                   pop		bc                               ; .
  33+ 6BCB 21 0F E0                             ld      hl, galaxy_pg_cnt                ; write out the galaxy page nbr to the page so we can diagnose page swapping
  34+ 6BCE 79                                   ld      a,c                              ;
  35+ 6BCF C6 30                                add     a, $30                           ; add $30 (48) to get ascii of galaxy nbr
  36+ 6BD1 77                                   ld      (hl),a                           ; .
  37+ 6BD2 0C                                   inc     c                                ; Do next bank
  38+ 6BD3 F1                                   pop     af                               ; .
  39+ 6BD4 3C                                   inc		a                                ; .
  40+ 6BD5 10 E2                                djnz	.ResetCopyLoop                    ; .
  41+ 6BD7 C9                                   ret
  42+ 6BD8
  43+ 6BD8 06 08        SeedAllGalaxies:        ld          b,8
  44+ 6BDA 0E 5B                                ld          c,BankGalaxyData0
  45+ 6BDC C5           .SeedAllGalaxiesLoop:   push        bc
  46+ 6BDD 79                                   ld          a,c
  47+ 6BDE                                      MMUSelectGalaxyA
  47+ 6BDE ED 92 57    >                     nextreg GalaxyDataMMU,       a
  48+ 6BE1 CD 9F FC                             call        SeedGalaxy
  49+ 6BE4 C1                                   pop         bc
  50+ 6BE5 0C                                   inc         c
  51+ 6BE6 10 F4                                djnz        .SeedAllGalaxiesLoop
  52+ 6BE8 C9                                   ret
# file closed: ./GameEngine/resetUniverse.asm
 408  6BE9
 409  6BE9
 410  6BE9              ;----------------------------------------------------------------------------------------------------------------------------------
 411  6BE9              LaunchedFromStation:    MMUSelectSun
 411  6BE9 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 412  6BED CD 85 C2                             call    CreateSunLaunched                   ; create the local sun and set position based on seed
 413  6BF0                                      MMUSelectPlanet
 413  6BF0 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 414  6BF4 CD E2 C0                             call    CreatePlanetLaunched
 415  6BF7 CD ED 85                             call    ClearUnivSlotList
 416  6BFA CD F9 85                             call    SetSlot0ToSpaceStation              ; set slot 1 to space station
 417  6BFD                                      MMUSelectUniverseN 0                        ; Prep Target universe
 417  6BFD ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 418  6C01                                      MMUSelectShipBank1                          ; Bank in the ship model code
 418  6C01 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 419  6C05 FD 26 00                             ld      iyh,0                               ; Zero ship runtime data
 420  6C08 FD 2E 02                             ld      iyl,ShipTypeStation                 ; and mark as spece station
 421  6C0B CD F2 C6                             call    UnivInitRuntime                     ; its always slot 0
 422  6C0E 3E 0D                                ld      a,CoriloisStation
 423  6C10 CD 0F E0                             call    GetShipBankId
 424  6C13                                      MMUSelectShipBankA                          ; Select the correct bank found
 424  6C13 ED 92 57    >					 nextreg ShipModelMMU,	    a
 425  6C16 78                                   ld      a,b                                 ; Select the correct ship
 426  6C17 CD 6A E0                             call    CopyShipToUniverse
 427  6C1A CD BF C6     .BuiltStation:          call    ResetStationLaunch
 428  6C1D 3E 00        .NowInFlight:           ld      a,StateNormal
 429  6C1F 32 22 81                             ld      (DockedFlag),a
 430  6C22                                      ForceTransition ScreenFront
 430  6C22 3E 09       >                        ld      a,ScreenFront
 430  6C24 32 86 6B    >                        ld      (ScreenTransitionForced), a
 431  6C27 CD B2 84                             call    ResetPlayerShip
 432  6C2A C9                                   ret
 433  6C2B
 434  6C2B 3A CC 6A     InitialiseCommander:    ld      a,(ScreenCmdr+1)
 435  6C2E C3 3A 6C                             jp      SetScreenA
 436  6C31
 437  6C31 3A 21 6B     InitialiseFrontView:    ld      a,(ScreenKeyFront+1)
 438  6C34 C3 3A 6C                             jp      SetScreenA
 439  6C37              ; false ret here as we get it free from jp
 440  6C37              ;----------------------------------------------------------------------------------------------------------------------------------
 441  6C37                                      INCLUDE "./GameEngine/SetScreenA.asm"
# file opened: ./GameEngine/SetScreenA.asm
   1+ 6C37              ; SetScreenA.asm
   2+ 6C37              ;----------------------------------------------------------------------------------------------------------------------------------
   3+ 6C37 C3 37 6C     InvalidScreenBlock:     jp     InvalidScreenBlock
   4+ 6C3A              SetScreenA:             JumpIfAGTENusng ScreenCount, InvalidScreenBlock
   4+ 6C3A FE 0F       >                        cp     ScreenCount
   4+ 6C3C D2 37 6C    >                        jp		nc,InvalidScreenBlock
   5+ 6C3F 32 1A 81     .SetUpIndex:            ld      (ScreenIndex),a                 ; Set screen index to a
   6+ 6C42 57           .SetUpIX:               ld      d,a
   7+ 6C43 1E 11                                ld      e,ScreenMapRow
   8+ 6C45 ED 30                                mul
   9+ 6C47 DD 21 87 6A                          ld      ix,ScreenKeyMap
  10+ 6C4B DD 19                                add     ix,de
  11+ 6C4D DD 22 1B 81                          ld      (ScreenIndexTablePointer),ix    ; optimises later fetches
  12+ 6C51                                      ClearForceTransition                    ; In case it was called by a brute force change in an update loop
  12+ 6C51 3E FF       >                        ld      a,$FF
  12+ 6C53 32 86 6B    >                        ld      (ScreenTransitionForced),a
  13+ 6C56 32 19 81                             ld      (ScreenChanged),a               ; Set screen changed to FF
  14+ 6C59 DD 7E 09     .IsItAViewPort:         ld      a,(ix+9)                        ; Screen Map Byte 9  - Draw stars Y/N and also guns present
  15+ 6C5C 32 D8 63                             ld      (CheckIfViewUpdate+1),a         ; Set flag to determine if we are on an exterior view
  16+ 6C5F                                      JumpIfAIsZero .NotViewPort              ;
  16+ 6C5F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  16+ 6C60 CA 6F 6C    >                        jp	    z, .NotViewPort
  17+ 6C63 DD 7E 01                             ld      a,(ix+1)                        ; get screen view number
  18+ 6C66 D6 09                                sub     ScreenFront                     ; Now a = screen number 0 = front, 1 = aft, 2 = left 3 = right
  19+ 6C68                                      MMUSelectCommander                      ; Load view laser to current
  19+ 6C68 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
  20+ 6C6C CD F4 E2                             call    LoadLaserToCurrent              ;
  21+ 6C6F DD 7E 04     .NotViewPort:           ld      a,(ix+4)                        ; Screen Map Byte 4   - Bank with Display code
  22+ 6C72 32 74 64                             ld      (ScreenLoopBank+1),a            ; setup loop
  23+ 6C75 32 A3 63                             ld      (HandleBankSelect+1),a          ; setup cursor keys
  24+ 6C78                                      MMUSelectScreenA
  24+ 6C78 ED 92 56    >                     nextreg ScreenBankMMU,		a
  25+ 6C7B DD 7E 05                             ld      a,(ix+5)                        ; Screen Map Byte 5 & 6 - Function for display initialisation
  26+ 6C7E 32 B2 6C                             ld      (ScreenUpdateAddr+1),a          ; .
  27+ 6C81 DD 7E 06                             ld      a,(ix+6)                        ; .
  28+ 6C84 32 B3 6C                             ld      (ScreenUpdateAddr+2),a          ; .
  29+ 6C87 DD 7E 07                             ld      a,(ix+7)                        ; Screen Map Byte 7 & 8 - Main loop update routine
  30+ 6C8A 32 79 64                             ld      (ScreenLoopJP+1),a              ; .
  31+ 6C8D DD 7E 08                             ld      a,(ix+8)                        ; .
  32+ 6C90 32 7A 64                             ld      (ScreenLoopJP+2),a              ; .
  33+ 6C93 DD 7E 0A                             ld      a,(ix+10)                       ; Screen Map Byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
  34+ 6C96 32 7D 63                             ld      (InputBlockerCheck+1),a          ; Set flag to block transitions as needed e.g. launch screen
  35+ 6C99 DD 7E 0B                             ld      a,(ix+11)                       ; Screen Map Byte 11  - Double Buffering 0 = no, 1 = yes
  36+ 6C9C 32 56 66                             ld      (DoubleBufferCheck+1),a
  37+ 6C9F DD 7E 0C                             ld      a,(ix+12)
  38+ 6CA2 32 A8 63                             ld      (CallCursorRoutine+1),a
  39+ 6CA5 DD 7E 0D                             ld      a,(ix+13)
  40+ 6CA8 32 A9 63                             ld      (CallCursorRoutine+2),a
  41+ 6CAB DD 7E 10                             ld      a,(ix+16)
  42+ 6CAE 32 CA 63                             ld      (UpdateShipsControl+1),a       ; determin if we call update universe objects in this screen
  43+ 6CB1 C3 00 00     ScreenUpdateAddr:       jp      $0000                          ; We can just drop out now and also get a free ret from caller
  44+ 6CB4
# file closed: ./GameEngine/SetScreenA.asm
 442  6CB4                                      INCLUDE "./GameEngine/ViewKeyTest.asm"
# file opened: ./GameEngine/ViewKeyTest.asm
   1+ 6CB4 3A 1A 81     ViewKeyTest:            ld      a,(ScreenIndex)
   2+ 6CB7 4F                                   ld      c,a
   3+ 6CB8 06 0F                                ld      b,ScreenMapLen                  ; For now until add screens are added
   4+ 6CBA DD 21 87 6A                          ld      ix,ScreenKeyMap                 ; IX = table head for scanning
   5+ 6CBE 2A D9 81                             ld      hl,(InnerHyperCount)
   6+ 6CC1 7C                                   ld      a,h
   7+ 6CC2 B5                                   or      l
   8+ 6CC3 FD 67                                ld      iyh,a
   9+ 6CC5 FD 7C        ViewScanLoop:           ld      a,iyh
  10+ 6CC7 A7           .HyperspaceCountdown:   and     a
  11+ 6CC8 28 08                                jr      z,.CheckDockedFlag
  12+ 6CCA DD 7E 0E                             ld      a,(ix+14)
  13+ 6CCD FE 01                                cp      1
  14+ 6CCF CA 18 6D                             jp      z,NotReadNextKey
  15+ 6CD2 DD 7E 00     .CheckDockedFlag:       ld      a,(ix+0)                        ; Screen Map Byte 0 Docked keyboard read flag
  16+ 6CD5              ; 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
  17+ 6CD5                                      JumpIfAEqNusng 3, NotReadNextKey        ; No keypress allowed at all (e.g. in hyperspace)
  17+ 6CD5 FE 03       >                        cp     3
  17+ 6CD7 CA 18 6D    >                        jp      z,NotReadNextKey
  18+ 6CDA                                      JumpIfAIsZero    .CanReadKey            ; if its the skip check for docking status
  18+ 6CDA A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  18+ 6CDB CA F5 6C    >                        jp	    z, .CanReadKey
  19+ 6CDE 57           .DocCheck:              ld      d,a                             ; save ix+0 value
  20+ 6CDF                                      JumpIfMemEqNusng DockedFlag, StateNormal, .NotDockedCheck ; if we are not in a docked state the we ar egood
  20+ 6CDF 3A 22 81    >                        ld  a,(DockedFlag)
  20+ 6CE2 FE 00       >                        cp  StateNormal
  20+ 6CE4 CA EF 6C    >                        jp  z,.NotDockedCheck
  21+ 6CE7 7A           .DockedCheck:           ld      a,d                             ; we are docked so only ix+0 value of 1 is allowed
  22+ 6CE8                                      JumpIfANENusng 1, NotReadNextKey        ; if we are docked and its not 1 then don't read
  22+ 6CE8 FE 01       >                        cp     1
  22+ 6CEA C2 18 6D    >                        jp      nz,NotReadNextKey
  23+ 6CED 18 06                                jr      .CanReadKey                     ; we can now scan as normal  as its 2 and docked
  24+ 6CEF 7A           .NotDockedCheck:        ld      a,d                             ; if we are not docked then code 2 is not keyscan allowed
  25+ 6CF0                                      JumpIfANENusng 2,NotReadNextKey
  25+ 6CF0 FE 02       >                        cp     2
  25+ 6CF2 C2 18 6D    >                        jp      nz,NotReadNextKey
  26+ 6CF5 DD 7E 01     .CanReadKey:            ld      a,(ix+1)                        ; Screen Map Byte 1 Screen Id
  27+ 6CF8 B9                                   cp      c                               ; is the index the current screen, if so skip the scan
  28+ 6CF9 5F                                   ld      e,a
  29+ 6CFA 28 1C                                jr      z,NotReadNextKey                ; we cant transition to current screen
  30+ 6CFC DD 7E 03                             ld      a,(ix+3)                        ; Screen Map Byte 3 - address of keypress table
  31+ 6CFF FE FF                                cp      $FF                             ; if upper byte is FF then we do not respond
  32+ 6D01 28 15                                jr      z,NotReadNextKey
  33+ 6D03 32 0E 6D                             ld      (ReadKeyAddr+2),a               ; Poke address into the ld hl,(....) below
  34+ 6D06 DD 7E 02                             ld      a,(ix+2)                        ; Screen Map Byte 2 - address of keypress table
  35+ 6D09 32 0D 6D                             ld      (ReadKeyAddr+1),a
  36+ 6D0C 2A 00 00     ReadKeyAddr:            ld      hl,($0000)                      ; address is entry in the pointer table to the actual keypress
  37+ 6D0F 7E                                   ld      a,(hl)                          ; now fetch the actual keypress
  38+ 6D10                                      JumpIfAIsZero NotReadNextKey
  38+ 6D10 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  38+ 6D11 CA 18 6D    >                        jp	    z, NotReadNextKey
  39+ 6D14 7B           .ValidScreenChange:     ld      a,e                             ; entering here e= current screen search number
  40+ 6D15 C3 3A 6C                             jp      SetScreenA
  41+ 6D18              ;--- CODE WILL NOT FALL TO HERE ---
  42+ 6D18 11 11 00     NotReadNextKey:         ld      de,ScreenMapRow
  43+ 6D1B DD 19                                add     ix,de                           ; we have only processed 3 of 8 bytes at here
  44+ 6D1D 10 A6                                djnz    ViewScanLoop
  45+ 6D1F C9                                   ret
  46+ 6D20
# file closed: ./GameEngine/ViewKeyTest.asm
 443  6D20              ;----------------------------------------------------------------------------------------------------------------------------------
 444  6D20 21 00 00     SetInitialShipPosition: ld      hl,$0000
 445  6D23 22 10 C0                             ld      (UBnKxlo),hl
 446  6D26 21 00 00                             ld      hl,$0000
 447  6D29 22 13 C0                             ld      (UBnKylo),hl
 448  6D2C 21 B4 03                             ld      hl,$03B4
 449  6D2F 22 16 C0                             ld      (UBnKzlo),hl
 450  6D32 AF                                   xor     a
 451  6D33 32 12 C0                             ld      (UBnKxsgn),a
 452  6D36 32 15 C0                             ld      (UBnKysgn),a
 453  6D39 32 18 C0                             ld      (UBnKzsgn),a
 454  6D3C              ;    call    Reset TODO
 455  6D3C CD 12 C8                             call	InitialiseOrientation            ;#00;
 456  6D3F 3E 01                                ld      a,1
 457  6D41 32 0D 81                             ld      (DELTA),a
 458  6D44 21 04 00                             ld      hl,4
 459  6D47 22 0E 81                             ld      (DELTA4),hl
 460  6D4A C9                                   ret
 461  6D4B
 462  6D4B              ; Checks to see if current ship swapped in is in our sights
 463  6D4B              ; we don;t need to deal with planets or sun as they have their own memory bank
 464  6D4B              ShipInSights:           ClearCarryFlag                          ; Carry clear no hit
 464  6D4B B7          >                        or a
 465  6D4C                                      ReturnIfMemIsNegative UBnKzsgn
 465  6D4C 3A 18 C0    >                        ld      a,(UBnKzsgn)
 465  6D4F E6 80       >                        and     $80
 465  6D51 C0          >                        ret     nz
 466  6D52 3A 41 C0                             ld      a,(UBnKexplDsp)                 ; get exploding flag and or with x and y high
 467  6D55 2A 10 C0                             ld      hl,(UBnKxlo)                    ; do 16 bit fetch as we will often need both bytes
 468  6D58 ED 4B 13 C0                          ld      bc,(UBnKylo)                    ; .
 469  6D5C B4                                   or      h
 470  6D5D B0                                   or      b
 471  6D5E C0                                   ret     nz                              ; if exploding or x hi or y hi are set then its nto targetable
 472  6D5F 7D                                   ld      a,l                             ; hl =xlo ^ 2
 473  6D60                                      DEEquSquareA                            ; .
 473  6D60 57          >                        ld  d,a
 473  6D61 5F          >                        ld  e,a
 473  6D62 ED 30       >                        mul de
 474  6D64 62 6B                                ld      hl,de                           ; .
 475  6D66 79                                   ld      a,c                             ; de = de = ylo ^ 2
 476  6D67                                      DEEquSquareA                            ; .
 476  6D67 57          >                        ld  d,a
 476  6D68 5F          >                        ld  e,a
 476  6D69 ED 30       >                        mul de
 477  6D6B 19                                   add     hl,de                           ; hl = xlo ^ 2 + ylo ^ 2
 478  6D6C D8                                   ret     c                               ; if there was a carry then out of line of sight
 479  6D6D ED 5B 1B C3                          ld      de,(MissileLockLoAddr)          ; get targettable area ^ 2 from blueprint copy
 480  6D71                                      cpHLDE                                  ; now compare x^2 + y^2 to target area
 480  6D71 E5          >                        push    hl
 480  6D72 A7          >                        and     a
 480  6D73 ED 52       >                        sbc     hl,de
 480  6D75 E1          >                        pop     hl
 481  6D76 28 01                                jr      z,.EdgeHit                      ; if its an edge hit then we need to set carry
 482  6D78 C9                                   ret                                     ; if its < area then its a hit and carry is set, we will not work on =
 483  6D79              .EdgeHit:               SetCarryFlag                            ; its an edge hit then we need to set carry
 483  6D79 37          >                        scf
 484  6D7A C9                                   ret
 485  6D7B
 486  6D7B
 487  6D7B                          INCLUDE "./Views/ConsoleDrawing.asm"
# file opened: ./Views/ConsoleDrawing.asm
   1+ 6D7B              ; bc = start position, d = length, e = colour
   2+ 6D7B 1E 10        Draw3LineBar:           ld      e,16
   3+ 6D7D C5 D5                                push    bc,,de
   4+ 6D7F                                      MMUSelectLayer2
   4+ 6D7F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   5+ 6D83 CD B3 E2                             call    l2_draw_horz_line
   6+ 6D86 D1 C1                                pop     bc,,de
   7+ 6D88 05                                   dec     b
   8+ 6D89 C5 D5                                push    bc,,de
   9+ 6D8B 1E 14                                ld      e,20
  10+ 6D8D                                      MMUSelectLayer2
  10+ 6D8D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  11+ 6D91 CD B3 E2                             call    l2_draw_horz_line
  12+ 6D94 D1 C1                                pop     bc,,de
  13+ 6D96 05                                   dec     b
  14+ 6D97                                      MMUSelectLayer2
  14+ 6D97 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  15+ 6D9B CD B3 E2                             call    l2_draw_horz_line
  16+ 6D9E C9                                   ret
  17+ 6D9F
  18+ 6D9F 1E 7C        DrawColourCodedBar:     ld      e,124
  19+ 6DA1 FE 28                                cp      40
  20+ 6DA3 30 18                                jr      nc,DrawColourEBar
  21+ 6DA5 1E 54                                ld      e,84
  22+ 6DA7 FE 1E                                cp      30
  23+ 6DA9 30 12                                jr      nc,DrawColourEBar
  24+ 6DAB 1E D8                                ld      e,216
  25+ 6DAD FE 14                                cp      20
  26+ 6DAF 1E EC                                ld      e,236
  27+ 6DB1 FE 0A                                cp      10
  28+ 6DB3 30 08                                jr      nc,DrawColourEBar
  29+ 6DB5 1E E1                                ld      e,225
  30+ 6DB7 FE 05                                cp      5
  31+ 6DB9 30 02                                jr      nc,DrawColourEBar
  32+ 6DBB 1E E0                                ld      e,224
  33+ 6DBD C5 D5        DrawColourEBar:         push    bc,,de
  34+ 6DBF                                      MMUSelectLayer2
  34+ 6DBF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ 6DC3 CD B3 E2                             call    l2_draw_horz_line
  36+ 6DC6 D1 C1                                pop     bc,,de
  37+ 6DC8 05                                   dec     b
  38+ 6DC9 C5 D5                                push    bc,,de
  39+ 6DCB                                      MMUSelectLayer2
  39+ 6DCB ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  40+ 6DCF CD B3 E2                             call    l2_draw_horz_line
  41+ 6DD2 D1 C1                                pop     bc,,de
  42+ 6DD4 05                                   dec     b
  43+ 6DD5                                      MMUSelectLayer2
  43+ 6DD5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  44+ 6DD9 CD B3 E2                             call    l2_draw_horz_line
  45+ 6DDC C9                                   ret
  46+ 6DDD
  47+ 6DDD                                      ; no ret needed as jp handles it
  48+ 6DDD
  49+ 6DDD
  50+ 6DDD 3A 0D 81     UpdateConsole:          ld      a,(DELTA)
  51+ 6DE0 FE 00                                cp      0                           ; don't draw if there is nothing to draw
  52+ 6DE2 28 0C                                jr      z,.UpdateRoll
  53+ 6DE4 01 D1 84                             ld      bc,SpeedoStart
  54+ 6DE7 21 5F 84                             ld      hl,SpeedoMapping
  55+ 6DEA ED 31                                add     hl,a
  56+ 6DEC 56                                   ld      d,(hl)
  57+ 6DED CD 7B 6D                             call    Draw3LineBar
  58+ 6DF0 3A 28 80     .UpdateRoll:            ld      a,(ALP1)
  59+ 6DF3 FE 00                                cp      0
  60+ 6DF5 CA 29 6E                             jp      z,.UpdatePitch
  61+ 6DF8 21 E0 8C                             ld      hl,RollMiddle
  62+ 6DFB 3A 29 80                             ld      a,(ALP2)
  63+ 6DFE FE 00                                cp      0
  64+ 6E00 CA 1B 6E                             jp     z,.PosRoll
  65+ 6E03 16 00        .NegRoll:               ld      d,0
  66+ 6E05 3A 28 80                             ld      a,(ALP1)
  67+ 6E08 CB 27                                sla     a
  68+ 6E0A 5F                                   ld      e,a
  69+ 6E0B B7                                   or      a
  70+ 6E0C ED 52                                sbc     hl,de
  71+ 6E0E 44 4D                                ld      bc,hl
  72+ 6E10 3E E1                                ld      a,DialMiddleXPos
  73+ 6E12 91                                   sub     c
  74+ 6E13 57                                   ld      d,a
  75+ 6E14 1E FF                                ld      e,$FF
  76+ 6E16 CD 7B 6D                             call    Draw3LineBar
  77+ 6E19 18 0E                                jr      .UpdatePitch
  78+ 6E1B 01 E0 8C     .PosRoll:               ld      bc,RollMiddle
  79+ 6E1E 3A 28 80                             ld      a,(ALP1)
  80+ 6E21 CB 27                                sla     a
  81+ 6E23 57                                   ld      d,a
  82+ 6E24 1E FF                                ld      e,$FF
  83+ 6E26 CD 7B 6D                             call    Draw3LineBar
  84+ 6E29 3A 1C 80     .UpdatePitch:           ld      a,(BET1)
  85+ 6E2C FE 00                                cp      0
  86+ 6E2E CA 63 6E                             jp      z,.Fuel
  87+ 6E31 21 E0 94                             ld      hl,PitchMiddle
  88+ 6E34 3A 1D 80                             ld      a,(BET2)
  89+ 6E37 FE 00                                cp      0
  90+ 6E39 CA 55 6E                             jp      z,.PosPitch
  91+ 6E3C 16 00        .NegPitch:              ld      d,0
  92+ 6E3E 3A 1C 80                             ld      a,(BET1)
  93+ 6E41 CB 27                                sla     a
  94+ 6E43 5F                                   ld      e,a
  95+ 6E44 B7                                   or      a
  96+ 6E45 ED 52                                sbc     hl,de
  97+ 6E47 44 4D                                ld      bc,hl
  98+ 6E49 3E E1                                ld      a,DialMiddleXPos
  99+ 6E4B 91                                   sub     c
 100+ 6E4C 57                                   ld      d,a
 101+ 6E4D 1E FF                                ld      e,$FF
 102+ 6E4F CD 7B 6D                             call    Draw3LineBar
 103+ 6E52 C3 63 6E                             jp      .Fuel
 104+ 6E55 01 E0 94     .PosPitch:              ld      bc,PitchMiddle
 105+ 6E58 3A 1C 80                             ld      a,(BET1)
 106+ 6E5B CB 27                                sla     a
 107+ 6E5D 57                                   ld      d,a
 108+ 6E5E 1E FF                                ld      e,$FF
 109+ 6E60 CD 7B 6D                             call    Draw3LineBar
 110+ 6E63 3A 7B 86     .Fuel:                  ld      a,(Fuel)
 111+ 6E66 CB 3F                                srl     a               ; divide by 4 to get range on screen
 112+ 6E68 21 3A 84                             ld      hl,FuelMapping
 113+ 6E6B ED 31                                add     hl,a
 114+ 6E6D 7E                                   ld      a,(hl)
 115+ 6E6E 01 10 94                             ld      bc,FuelStart
 116+ 6E71 57                                   ld      d,a
 117+ 6E72 CD 9F 6D                             call    DrawColourCodedBar
 118+ 6E75 3A 0E 84     .FrontShield:           ld      a,(ForeShield)
 119+ 6E78 CB 3F                                srl     a
 120+ 6E7A CB 3F                                srl     a
 121+ 6E7C CB 3F                                srl     a
 122+ 6E7E 01 10 84                             ld      bc,FShieldStart
 123+ 6E81 57                                   ld      d,a
 124+ 6E82 CD 9F 6D                             call    DrawColourCodedBar
 125+ 6E85 3A 0F 84     .AftShield:             ld      a,(AftShield)
 126+ 6E88 CB 3F                                srl     a
 127+ 6E8A CB 3F                                srl     a
 128+ 6E8C CB 3F                                srl     a
 129+ 6E8E 01 10 8D                             ld      bc,AShieldStart
 130+ 6E91 57                                   ld      d,a
 131+ 6E92 CD 9F 6D                             call    DrawColourCodedBar
 132+ 6E95              .SpriteDraw:            MMUSelectSpriteBank
 132+ 6E95 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 133+ 6E99 3A 23 80     .DrawECM:               ld      a,(ECMCountDown)
 134+ 6E9C                                      JumpIfAIsZero   .HideECM
 134+ 6E9C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 134+ 6E9D CA A6 6E    >                        jp	    z, .HideECM
 135+ 6EA0 CD CF E1     .ShowECM:               call    show_ecm_sprite
 136+ 6EA3 C3 A9 6E                             jp      .ProcessedECM
 137+ 6EA6 CD 18 E4     .HideECM:               call    sprite_ecm_hide
 138+ 6EA9              .ProcessedECM:
 139+ 6EA9 3A 7E 81     .DrawMissiles:          ld      a,(NbrMissiles)
 140+ 6EAC FD 6F                                ld      iyl,a
 141+ 6EAE                                      JumpIfAIsZero   .HideAllMissiles
 141+ 6EAE A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 141+ 6EAF CA ED 6E    >                        jp	    z, .HideAllMissiles
 142+ 6EB2 3A 13 84     .DrawMissile_1:         ld      a,(MissileTargettingFlag)
 143+ 6EB5                                      JumpIfAEqNusng  $FF,.Missile1Ready
 143+ 6EB5 FE FF       >                        cp     $FF
 143+ 6EB7 CA C5 6E    >                        jp      z,.Missile1Ready
 144+ 6EBA                                      JumpIfAEqNusng  $FE,.Missile1Armed
 144+ 6EBA FE FE       >                        cp     $FE
 144+ 6EBC CA CB 6E    >                        jp      z,.Missile1Armed
 145+ 6EBF CD 11 E2     .Missile1Locked:        call    show_missile_1_locked
 146+ 6EC2 C3 CE 6E                             jp      .DrawMissile_2
 147+ 6EC5 CD DA E1     .Missile1Ready:         call    show_missile_1_ready
 148+ 6EC8 C3 CE 6E                             jp      .DrawMissile_2
 149+ 6ECB CD 06 E2     .Missile1Armed:         call    show_missile_1_armed
 150+ 6ECE FD 7D        .DrawMissile_2:         ld      a,iyl
 151+ 6ED0                                      JumpIfALTNusng 2, .Only1Missile
 151+ 6ED0 FE 02       >                        cp      2
 151+ 6ED2 DA F0 6E    >                        jp		c, .Only1Missile
 152+ 6ED5 CD E5 E1                             call    show_missile_2_ready
 153+ 6ED8 FD 7D        .DrawMissile_3:         ld      a,iyl
 154+ 6EDA                                      JumpIfALTNusng 3, .Only2Missiles
 154+ 6EDA FE 03       >                        cp      3
 154+ 6EDC DA F3 6E    >                        jp		c, .Only2Missiles
 155+ 6EDF CD F0 E1                             call    show_missile_3_ready
 156+ 6EE2 FD 7D        .DrawMissile_4:         ld      a,iyl
 157+ 6EE4                                      JumpIfALTNusng 4, .Only2Missiles
 157+ 6EE4 FE 04       >                        cp      4
 157+ 6EE6 DA F3 6E    >                        jp		c, .Only2Missiles
 158+ 6EE9 CD FB E1                             call    show_missile_4_ready
 159+ 6EEC C9                                   ret
 160+ 6EED CD 21 E4     .HideAllMissiles:       call    sprite_missile_1_hide
 161+ 6EF0 CD 2A E4     .Only1Missile:          call    sprite_missile_2_hide
 162+ 6EF3 CD 33 E4     .Only2Missiles:         call    sprite_missile_3_hide
 163+ 6EF6 CD 3C E4     .Only3Missiles:         call    sprite_missile_4_hide
 164+ 6EF9              ;PlayerEnergy
 165+ 6EF9              ; BNEED LASER temp
 166+ 6EF9              ; NEED CABIN TEMP
 167+ 6EF9              ;NEED ALTITUDE
 168+ 6EF9              ; Draw compas - if in range draw station, else do planet
 169+ 6EF9 3A 10 84     .EnergyBars:            ld      a,(PlayerEnergy)
 170+ 6EFC CB 3F                                srl     a                   ; energy = energy / 2 so 31 per bar
 171+ 6EFE                                      JumpIfALTNusng  31 + 1,     Draw1EnergyBar
 171+ 6EFE FE 20       >                        cp      31 + 1
 171+ 6F00 DA 10 6F    >                        jp		c, Draw1EnergyBar
 172+ 6F03                                      JumpIfALTNusng  (31*2) + 1, Draw2EnergyBars
 172+ 6F03 FE 3F       >                        cp      (31*2) + 1
 172+ 6F05 DA 1A 6F    >                        jp		c, Draw2EnergyBars
 173+ 6F08                                      JumpIfALTNusng  (31*3) + 1, Draw3EnergyBars
 173+ 6F08 FE 5E       >                        cp      (31*3) + 1
 173+ 6F0A DA 30 6F    >                        jp		c, Draw3EnergyBars
 174+ 6F0D C3 52 6F                             jp      Draw4EnergyBars
 175+ 6F10
 176+ 6F10 1E E0        Draw1EnergyBar:         ld      e,224
 177+ 6F12 57                                   ld      d,a
 178+ 6F13 01 D5 BD                             ld      bc,EnergyBar1Start
 179+ 6F16 CD BD 6D                             call    DrawColourEBar
 180+ 6F19 C9                                   ret
 181+ 6F1A 1E D8        Draw2EnergyBars:        ld      e,216
 182+ 6F1C D6 1F                                sub     31
 183+ 6F1E 57                                   ld      d,a
 184+ 6F1F 01 D5 B5                             ld      bc,EnergyBar2Start
 185+ 6F22 CD BD 6D                             call    DrawColourEBar
 186+ 6F25 16 1F                                ld      d,31
 187+ 6F27 1E D8                                ld      e,216
 188+ 6F29 01 D5 BD                             ld      bc,EnergyBar1Start
 189+ 6F2C CD BD 6D                             call    DrawColourEBar
 190+ 6F2F C9                                   ret
 191+ 6F30 1E 14        Draw3EnergyBars:        ld      e,20
 192+ 6F32 D6 3E                                sub     31*2
 193+ 6F34 57                                   ld      d,a
 194+ 6F35 1E 14                                ld      e,20
 195+ 6F37 01 D5 AD                             ld      bc,EnergyBar3Start
 196+ 6F3A CD BD 6D                             call    DrawColourEBar
 197+ 6F3D 16 1F                                ld      d,31
 198+ 6F3F 1E 14                                ld      e,20
 199+ 6F41 01 D5 B5                             ld      bc,EnergyBar2Start
 200+ 6F44 CD BD 6D                             call    DrawColourEBar
 201+ 6F47 16 1F                                ld      d,31
 202+ 6F49 1E 14                                ld      e,20
 203+ 6F4B 01 D5 BD                             ld      bc,EnergyBar1Start
 204+ 6F4E CD BD 6D                             call    DrawColourEBar
 205+ 6F51 C9                                   ret
 206+ 6F52 1E 18        Draw4EnergyBars:        ld      e,24
 207+ 6F54 D6 5D                                sub     31*3
 208+ 6F56                                      JumpIfALTNusng 31,.NoMax
 208+ 6F56 FE 1F       >                        cp      31
 208+ 6F58 DA 5D 6F    >                        jp		c, .NoMax
 209+ 6F5B 3E 1F        .Max                    ld      a,31
 210+ 6F5D 57           .NoMax:                 ld      d,a
 211+ 6F5E 01 D5 A5                             ld      bc,EnergyBar4Start
 212+ 6F61 CD BD 6D                             call    DrawColourEBar
 213+ 6F64 16 1F                                ld      d,31
 214+ 6F66 1E 18                                ld      e,24
 215+ 6F68 01 D5 AD                             ld      bc,EnergyBar3Start
 216+ 6F6B CD BD 6D                             call    DrawColourEBar
 217+ 6F6E 16 1F                                ld      d,31
 218+ 6F70 1E 18                                ld      e,24
 219+ 6F72 01 D5 B5                             ld      bc,EnergyBar2Start
 220+ 6F75 CD BD 6D                             call    DrawColourEBar
 221+ 6F78 16 1F                                ld      d,31
 222+ 6F7A 1E 18                                ld      e,24
 223+ 6F7C 01 D5 BD                             ld      bc,EnergyBar1Start
 224+ 6F7F CD BD 6D                             call    DrawColourEBar
 225+ 6F82 C9                                   ret
 226+ 6F83
 227+ 6F83              ScannerBottom           equ 190
 228+ 6F83              ScannerTypeMissle       equ 2
 229+ 6F83              ScannerXRangeOffset     equ $35
 230+ 6F83              ScannerCenter           equ 127
 231+ 6F83
 232+ 6F83              ScannerDefault          equ 0
 233+ 6F83              ScannerMissile          equ 2
 234+ 6F83              ScannerStation          equ 4
 235+ 6F83              ScannerEnemy            equ 6
 236+ 6F83
 237+ 6F83
 238+ 6F83 00           SunXScaled              DB  0
 239+ 6F84 00           SunYScaled              DB  0
 240+ 6F85 00           SunZScaled              DB  0
 241+ 6F86
 242+ 6F86
 243+ 6F86 18 1C 90 FC  ScannerColourTable:     DB  L2ColourGREEN_2, L2ColourGREEN_1, L2ColourYELLOW_4,L2ColourYELLOW_1,L2ColourCYAN_2,L2ColourCYAN_1,L2ColourRED_4,L2ColourPINK_4
 243+ 6F8A 12 1F 80 E0
 244+ 6F8E C0 E0        ScannerColourTableAngry:DB  L2ColourRED_2, L2ColourRED_1 ; just a place holder for now
 245+ 6F90
 246+ 6F90              GetShipColor:           MACRO
 247+ 6F90 ~                                    ld      a,(ShipTypeAddr)
 248+ 6F90 ~                                    sla     a                            ; as its byte pairs * 2
 249+ 6F90 ~                                    ld      hl,ScannerColourTable
 250+ 6F90 ~                                    add     hl,a
 251+ 6F90 ~                                    ld      a,(hl)
 252+ 6F90                                      ENDM
 253+ 6F90              GetShipColorBright:     MACRO
 254+ 6F90 ~                                    ld      a,(ShipTypeAddr)
 255+ 6F90 ~                                    sla     a                            ; as its byte pairs * 2
 256+ 6F90 ~                                    inc     a
 257+ 6F90 ~                                    ld      hl,ScannerColourTable
 258+ 6F90 ~                                    add     hl,a
 259+ 6F90 ~                                    ld      a,(hl)
 260+ 6F90                                      ENDM
 261+ 6F90
 262+ 6F90              Shift24BitScan:         MACRO   regHi, reglo
 263+ 6F90 ~                                    ld      hl,(regHi)
 264+ 6F90 ~                                    ld      b,h
 265+ 6F90 ~                                    ld      a,h
 266+ 6F90 ~                                    and     SignMask8Bit
 267+ 6F90 ~                                    ld      h,a
 268+ 6F90 ~                                    ld      a,(reglo)
 269+ 6F90 ~                                    sla     a
 270+ 6F90 ~                                    rl      l
 271+ 6F90 ~                                    rl      h
 272+ 6F90 ~                                    sla     a
 273+ 6F90 ~                                    rl      l
 274+ 6F90 ~                                    rl      h
 275+ 6F90 ~                                    sla     a
 276+ 6F90 ~                                    rl      l
 277+ 6F90 ~                                    rl      h
 278+ 6F90 ~                                    sla     a
 279+ 6F90 ~                                    rl      l
 280+ 6F90 ~                                    rl      h
 281+ 6F90 ~                                    sla     a
 282+ 6F90 ~                                    rl      l
 283+ 6F90 ~                                    rl      h
 284+ 6F90 ~                                    sla     a
 285+ 6F90 ~                                    rl      l
 286+ 6F90 ~                                    rl      h
 287+ 6F90                                      ENDM
 288+ 6F90
 289+ 6F90              SunShiftRight           MACRO   reglo, reghi, regsgn
 290+ 6F90 ~                                    ld      a,regsgn
 291+ 6F90 ~                                    srl     a
 292+ 6F90 ~                                    rr      reghi
 293+ 6F90 ~                                    rr      reglo
 294+ 6F90 ~                                    ld      regsgn,a
 295+ 6F90                                      ENDM
 296+ 6F90
 297+ 6F90              ;SunShiftPosTo15Bit:     ld      de,(SBnKzlo)
 298+ 6F90              ;                        ld      a,(SBnKzsgn)
 299+ 6F90              ;                        push    af
 300+ 6F90              ;                        and     SignMask8Bit
 301+ 6F90              ;                        ld      iyl,a
 302+ 6F90              ;                        ld      hl,(SBnKxlo)
 303+ 6F90              ;                        ld      a,(SBnKxsgn)
 304+ 6F90              ;                        push    af
 305+ 6F90              ;                        and     SignMask8Bit
 306+ 6F90              ;                        ld      ixl,a
 307+ 6F90              ;                        ld      bc,(SBnKylo)
 308+ 6F90              ;                        ld      a,(SBnKysgn)
 309+ 6F90              ;                        and     SignMask8Bit
 310+ 6F90              ;                        push    af
 311+ 6F90              ;                        ld      iyh,a
 312+ 6F90              ;.ShiftLoop:             ld      a,iyh
 313+ 6F90              ;                        or      iyl
 314+ 6F90              ;                        or      ixl
 315+ 6F90              ;                        jr      z,.ShiftBit15
 316+ 6F90              ;.ShiftZ:                SunShiftRight iyl, d, e
 317+ 6F90              ;.ShiftX:                SunShiftRight ixl, h, l
 318+ 6F90              ;.ShiftY:                SunShiftRight ixh, b, c
 319+ 6F90              ;                        jr      .ShipLoop
 320+ 6F90              ;.ShiftBit15:            ld      a,iyh
 321+ 6F90              ;                        or      iyl
 322+ 6F90              ;                        or      ixl
 323+ 6F90              ;                        jr      z,.CompletedShift
 324+ 6F90              ;.ShiftZ:                SunShiftRight iyl, d, e
 325+ 6F90              ;.ShiftX:                SunShiftRight ixl, h, l
 326+ 6F90              ;.ShiftY:                SunShiftRight ixh, b, c             ; finally shift to 15 bits so we can get the sign back
 327+ 6F90              ;.CompletedShift:        pop     af                          ; get ysgn
 328+ 6F90              ;                        and     SignOnly8Bit
 329+ 6F90              ;                        or      b
 330+ 6F90              ;                        ld      b,a
 331+ 6F90              ;                        pop     af                          ; get xsgn
 332+ 6F90              ;                        and     SignOnly8Bit
 333+ 6F90              ;                        or      h
 334+ 6F90              ;                        ld      h,a
 335+ 6F90              ;                        pop     af                          ; get zsgn
 336+ 6F90              ;                        and     SignOnly8Bit
 337+ 6F90              ;                        or      d
 338+ 6F90              ;                        ld      d,a
 339+ 6F90              ;                        ret
 340+ 6F90              ;
 341+ 6F90 ED 5B 17 C0  ScalePlanetPos:         ld      de,(PBnKzhi)                ; de = abs z & save sign on stack
 342+ 6F94 7A                                   ld      a,d                         ; .
 343+ 6F95 F5                                   push    af                          ; .
 344+ 6F96 E6 7F                                and     SignMask8Bit                ; .
 345+ 6F98 57                                   ld      d,a                         ; .
 346+ 6F99 2A 11 C0                             ld      hl,(PBnKxhi)                ; hl = abs x & save sign on stack
 347+ 6F9C 7C                                   ld      a,h                         ; .
 348+ 6F9D F5                                   push    af                          ; .
 349+ 6F9E E6 7F                                and     SignMask8Bit                ; .
 350+ 6FA0 67                                   ld      h,a                         ; .
 351+ 6FA1 ED 4B 14 C0                          ld      bc,(PBnKyhi)                ; bc = abs y & save sign on stack
 352+ 6FA5 78                                   ld      a,b                         ; .
 353+ 6FA6 F5                                   push    af                          ; .
 354+ 6FA7 E6 7F                                and     SignMask8Bit                ; .
 355+ 6FA9 47                                   ld      b,a                         ; .
 356+ 6FAA 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 357+ 6FAB B2                                   or      d                           ; .
 358+ 6FAC B4                                   or      h                           ; .
 359+ 6FAD 28 0E                                jr      z,.Shifted                  ; .
 360+ 6FAF                                      ShiftBCRight1                       ; .
 360+ 6FAF CB 38       >			   srl b
 360+ 6FB1 CB 19       >			   rr  c
 361+ 6FB3                                      ShiftHLRight1                       ; .
 361+ 6FB3 CB 3C       >			   srl h
 361+ 6FB5 CB 1D       >			   rr  l
 362+ 6FB7                                      ShiftDERight1                       ; .
 362+ 6FB7 CB 3A       >			   srl d
 362+ 6FB9 CB 1B       >			   rr  e
 363+ 6FBB 18 ED                                jr      .ShiftLoop
 364+ 6FBD 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 365+ 6FBE B5                                   or      l                           ;
 366+ 6FBF B3                                   or      e                           ;
 367+ 6FC0 E6 80                                and     $80                         ;
 368+ 6FC2 28 0C                                jr      z,.NoAdditionalShift        ;
 369+ 6FC4                                      ShiftBCRight1                       ; we want 7 bit
 369+ 6FC4 CB 38       >			   srl b
 369+ 6FC6 CB 19       >			   rr  c
 370+ 6FC8                                      ShiftHLRight1                       ; to acommodate the sign
 370+ 6FC8 CB 3C       >			   srl h
 370+ 6FCA CB 1D       >			   rr  l
 371+ 6FCC                                      ShiftDERight1                       ; .
 371+ 6FCC CB 3A       >			   srl d
 371+ 6FCE CB 1B       >			   rr  e
 372+ 6FD0 F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 373+ 6FD1 E6 80                                and     SignOnly8Bit                ;
 374+ 6FD3 47                                   ld      b,a                         ; bc = shifted signed Y
 375+ 6FD4 F1                                   pop     af                          ; get xsgn
 376+ 6FD5 E6 80                                and     SignOnly8Bit                ;
 377+ 6FD7 67                                   ld      h,a                         ; hl = shifted signed X
 378+ 6FD8 F1                                   pop     af                          ; get zsgn
 379+ 6FD9 E6 80                                and     SignOnly8Bit                ;
 380+ 6FDB 57                                   ld      d,a                         ; de = shifted signed Z
 381+ 6FDC C9                                   ret
 382+ 6FDD
 383+ 6FDD ED 5B 17 C0  ScaleSunPos:            ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 384+ 6FE1 7A                                   ld      a,d                         ; .
 385+ 6FE2 F5                                   push    af                          ; .
 386+ 6FE3 E6 7F                                and     SignMask8Bit                ; .
 387+ 6FE5 57                                   ld      d,a                         ; .
 388+ 6FE6 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 389+ 6FE9 7C                                   ld      a,h                         ; .
 390+ 6FEA F5                                   push    af                          ; .
 391+ 6FEB E6 7F                                and     SignMask8Bit                ; .
 392+ 6FED 67                                   ld      h,a                         ; .
 393+ 6FEE ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 394+ 6FF2 78                                   ld      a,b                         ; .
 395+ 6FF3 F5                                   push    af                          ; .
 396+ 6FF4 E6 7F                                and     SignMask8Bit                ; .
 397+ 6FF6 47                                   ld      b,a                         ; .
 398+ 6FF7 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 399+ 6FF8 B2                                   or      d                           ; .
 400+ 6FF9 B4                                   or      h                           ; .
 401+ 6FFA 28 0E                                jr      z,.Shifted                  ; .
 402+ 6FFC                                      ShiftBCRight1                       ; .
 402+ 6FFC CB 38       >			   srl b
 402+ 6FFE CB 19       >			   rr  c
 403+ 7000                                      ShiftHLRight1                       ; .
 403+ 7000 CB 3C       >			   srl h
 403+ 7002 CB 1D       >			   rr  l
 404+ 7004                                      ShiftDERight1                       ; .
 404+ 7004 CB 3A       >			   srl d
 404+ 7006 CB 1B       >			   rr  e
 405+ 7008 18 ED                                jr      .ShiftLoop
 406+ 700A 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 407+ 700B B5                                   or      l                           ;
 408+ 700C B3                                   or      e                           ;
 409+ 700D E6 80                                and     $80                         ;
 410+ 700F 28 0C                                jr      z,.NoAdditionalShift        ;
 411+ 7011                                      ShiftBCRight1                       ; we want 7 bit
 411+ 7011 CB 38       >			   srl b
 411+ 7013 CB 19       >			   rr  c
 412+ 7015                                      ShiftHLRight1                       ; to acommodate the sign
 412+ 7015 CB 3C       >			   srl h
 412+ 7017 CB 1D       >			   rr  l
 413+ 7019                                      ShiftDERight1                       ; .
 413+ 7019 CB 3A       >			   srl d
 413+ 701B CB 1B       >			   rr  e
 414+ 701D F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 415+ 701E E6 80                                and     SignOnly8Bit                ;
 416+ 7020 47                                   ld      b,a                         ; bc = shifted signed Y
 417+ 7021 F1                                   pop     af                          ; get xsgn
 418+ 7022 E6 80                                and     SignOnly8Bit                ;
 419+ 7024 67                                   ld      h,a                         ; hl = shifted signed X
 420+ 7025 F1                                   pop     af                          ; get zsgn
 421+ 7026 E6 80                                and     SignOnly8Bit                ;
 422+ 7028 57                                   ld      d,a                         ; de = shifted signed Z
 423+ 7029 C9                                   ret
 424+ 702A
 425+ 702A              ;compass sun
 426+ 702A              ;            if value is still 24 bit
 427+ 702A              ;                copy xhi/xsgn y and z to xxx15 ([2 1 0 ] [ 5 4 3] [ 8 7 6 ]
 428+ 702A              ;                normalise vector (note this assumes sun is just sign byte+ 2 bytes)
 429+ 702A              ;                tempk39 = OR 3 low bytes
 430+ 702A              ;                tempkA = OR 3 high bytes
 431+ 702A              ;                 TAL2:    repeat
 432+ 702A              ;                             asl tempka tempk39
 433+ 702A              ;                             exit if carry set
 434+ 702A              ;                             x coord << 1
 435+ 702A              ;                             y corrd << 1
 436+ 702A              ;                             z coord << 1
 437+ 702A              ;                          until carry clear
 438+ 702A              ;                 TA2:     shift x y and z right one and put sign bit in from sign bytes
 439+ 702A              ;                          now XX15 holds sign + 7 bit bytes maximused for coords
 440+ 702A              ;                          RQ = AP = X ^ 2
 441+ 702A              ;                          TP = AP = Y ^ 2
 442+ 702A              ;                          RQ = RQ + TP
 443+ 702A              ;                          TP = AP = Z ^ 2
 444+ 702A              ;                          RQ = RQ + TP
 445+ 702A              ;                          Q = SQRT (RQ)
 446+ 702A              ;                          for each coord - A = A/Q * 3/ 8
 447+ 702A              ;
 448+ 702A              ;
 449+ 702A
 450+ 702A ED 5B 17 C0  UpscaleSunPosition:     ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 451+ 702E 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 452+ 7031 ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 453+ 7035 7A                                   ld      a,d
 454+ 7036 E6 80                                and     SignOnly8Bit
 455+ 7038 CB 3F                                srl     a
 456+ 703A FD 6F                                ld      iyl,a
 457+ 703C 7C                                   ld      a,h
 458+ 703D E6 80                                and     SignOnly8Bit
 459+ 703F FD B5                                or      iyl
 460+ 7041 CB 3F                                srl     a
 461+ 7043 78                                   ld      a,b
 462+ 7044 E6 80                                and     SignOnly8Bit
 463+ 7046 FD B5                                or      iyl
 464+ 7048 FD 6F                                ld      iyl,a                       ; IYL now equals YXH00000 where letters = sign bits
 465+ 704A                                      ClearSignBit d
 465+ 704A 7A          >                        ld      a,d
 465+ 704B E6 7F       >                        and     SignMask8Bit
 465+ 704D 57          >                        ld      d,a
 466+ 704E                                      ClearSignBit h
 466+ 704E 7C          >                        ld      a,h
 466+ 704F E6 7F       >                        and     SignMask8Bit
 466+ 7051 67          >                        ld      h,a
 467+ 7052                                      ClearSignBit b
 467+ 7052 78          >                        ld      a,b
 467+ 7053 E6 7F       >                        and     SignMask8Bit
 467+ 7055 47          >                        ld      b,a
 468+ 7056 78                                   ld      a,b
 469+ 7057 B3                                   or      e
 470+ 7058 B4                                   or      h
 471+ 7059 B5                                   or      l
 472+ 705A B0                                   or      b
 473+ 705B B1                                   or      c
 474+ 705C 28 41                                jr      z, .Setto1                 ; to prevent and infinite loop in upscale if all zero
 475+ 705E 7A                                   ld      a,d
 476+ 705F B3                                   or      e
 477+ 7060 B4                                   or      h
 478+ 7061 CB 27                                sla     a
 479+ 7063 38 15                                jr      c,.DoneCalc
 480+ 7065 28 13                                jr      z,.DoneCalc
 481+ 7067              .UpscaleLoop:           ShiftDELeft1
 481+ 7067 CB 23       >			   sla e
 481+ 7069 CB 12       >			   rl  d
 482+ 706B                                      ShiftHLLeft1
 482+ 706B CB 25       >			   sla l
 482+ 706D CB 14       >			   rl  h
 483+ 706F                                      ShiftBCLeft1
 483+ 706F CB 21       >			   sla c
 483+ 7071 CB 10       >			   rl  b
 484+ 7073 CB 27                                sla     a
 485+ 7075 38 03                                jr      c,.DoneCalc
 486+ 7077 C3 67 70                             jp      .UpscaleLoop
 487+ 707A              .DoneCalc               ShiftDERight1
 487+ 707A CB 3A       >			   srl d
 487+ 707C CB 1B       >			   rr  e
 488+ 707E                                      ShiftHLRight1
 488+ 707E CB 3C       >			   srl h
 488+ 7080 CB 1D       >			   rr  l
 489+ 7082                                      ShiftBCRight1
 489+ 7082 CB 38       >			   srl b
 489+ 7084 CB 19       >			   rr  c
 490+ 7086 5A           .NowSetResultInLowByte: ld      e,d
 491+ 7087 6C                                   ld      l,h
 492+ 7088 48                                   ld      c,b
 493+ 7089 FD 7D                                ld      a,iyl
 494+ 708B E6 80                                and     SignOnly8Bit
 495+ 708D 47                                   ld      b,a
 496+ 708E FD 7D                                ld      a,iyl
 497+ 7090 CB 27                                sla     a
 498+ 7092 FD 6F                                ld      iyl,a
 499+ 7094 E6 80                                and     SignOnly8Bit
 500+ 7096 67                                   ld      h,a
 501+ 7097 FD 7D                                ld      a,iyl
 502+ 7099 CB 27                                sla     a
 503+ 709B E6 80                                and     SignOnly8Bit
 504+ 709D 57                                   ld      d,a
 505+ 709E C9                                   ret
 506+ 709F 3E 01        .Setto1:                ld      a,1
 507+ 70A1 4F                                   ld      c,a
 508+ 70A2 5F                                   ld      e,a
 509+ 70A3 6F                                   ld      l,a
 510+ 70A4 FD 7D                                ld      a,iyl
 511+ 70A6 CB 27                                sla     a
 512+ 70A8 CB 27                                sla     a
 513+ 70AA E6 80                                and     SignOnly8Bit
 514+ 70AC B3                                   or      e
 515+ 70AD 5F                                   ld      e,a
 516+ 70AE C9                                   ret
 517+ 70AF
 518+ 70AF
 519+ 70AF              UpdateCompassSun:       MMUSelectSun
 519+ 70AF ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 520+ 70B3 CD DD 6F                             call    ScaleSunPos                 ; get as 7 bit signed
 521+ 70B6 C5 E5 D5                             push    bc,,hl,,de                  ; +3 save to stack Y, X and Z scaled and signed hihg = sign, low = 7 bit value
 522+ 70B9 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 523+ 70BA 59                                   ld      e,c                         ; .
 524+ 70BB ED 30                                mul                                 ; .
 525+ 70BD 42 4B                                ld      bc,de                       ; .
 526+ 70BF 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 527+ 70C0 5D                                   ld      e,l                         ; .
 528+ 70C1 ED 30                                mul                                 ; .
 529+ 70C3 EB                                   ex      de,hl                       ; .
 530+ 70C4 D1           .normaliseZSqr:         pop     de                          ; +2 get Z saved from stack so now stack contains Y Z X
 531+ 70C5 53                                   ld      d,e                         ; de = z ^
 532+ 70C6 ED 30                                mul                                 ; .
 533+ 70C8 19           .normaliseSqrt:         add     hl,de                       ; de = x^2 + y^2 + z^2
 534+ 70C9 09                                   add     hl,bc                       ; .
 535+ 70CA EB                                   ex      de,hl                       ; .
 536+ 70CB CD C1 93                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 537+ 70CE                                      ; if h <> 0 then more difficult
 538+ 70CE 55                                   ld      d,l                         ; iyl = q
 539+ 70CF FD 6A                                ld      iyl,d                       ; .
 540+ 70D1 E1           .NormaliseX:            pop     hl                          ; +1 get back hl x scaled
 541+ 70D2 7C                                   ld      a,h                         ; c = sign
 542+ 70D3 E6 80                                and     SignOnly8Bit                ; .
 543+ 70D5 4F                                   ld      c,a                         ; .
 544+ 70D6 C5                                   push    bc                          ; +2 save bc temporarily as it will get altered
 545+ 70D7 7D                                   ld      a,l                         ; a = 8 bit abs z
 546+ 70D8 CD 3A 99                             call    AequAdivQmul96ABS           ; e = a /q * 96 (d was already loaded with q)
 547+ 70DB 5F                                   ld      e,a                         ; .
 548+ 70DC                                      EDiv10Inline                        ; a = e / 10
 548+ 70DC 16 00       >                        ld      d,0
 548+ 70DE 62 6B       >                        ld      hl,de
 548+ 70E0 29          >                        add     hl,hl
 548+ 70E1 19          >                        add     hl,de
 548+ 70E2 29          >                        add     hl,hl
 548+ 70E3 29          >                        add     hl,hl
 548+ 70E4 19          >                        add     hl,de
 548+ 70E5 29          >                        add     hl,hl
 549+ 70E6 7C                                   ld      a,h                         ; .
 550+ 70E7 C1                                   pop     bc                          ; +1 retrieve bc
 551+ 70E8 FE 00                                cp      0                           ; if result in h was 0 then done
 552+ 70EA 28 06                                jr      z,.DoneNormX                ; in case we end up with - 0
 553+ 70EC CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 554+ 70EE 28 02                                jr      z,.DoneNormX
 555+ 70F0 ED 44                                neg
 556+ 70F2 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 557+ 70F4 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 558+ 70F6 E1                                   pop     hl                          ; +0 hl y scaled
 559+ 70F7 7C                                   ld      a,h                         ; c = sign
 560+ 70F8 E6 80                                and     SignOnly8Bit                ; .
 561+ 70FA 4F                                   ld      c,a                         ; .
 562+ 70FB C5                                   push    bc                          ; +1 save sign to stack
 563+ 70FC 7D                                   ld      a,l                         ; a = 8 bit signed z
 564+ 70FD CD 3A 99                             call    AequAdivQmul96ABS           ; .
 565+ 7100 5F                                   ld      e,a                         ; a = e / 10
 566+ 7101                                      EDiv10Inline                        ; .
 566+ 7101 16 00       >                        ld      d,0
 566+ 7103 62 6B       >                        ld      hl,de
 566+ 7105 29          >                        add     hl,hl
 566+ 7106 19          >                        add     hl,de
 566+ 7107 29          >                        add     hl,hl
 566+ 7108 29          >                        add     hl,hl
 566+ 7109 19          >                        add     hl,de
 566+ 710A 29          >                        add     hl,hl
 567+ 710B 7C                                   ld      a,h                         ; retrieve sign
 568+ 710C C1                                   pop     bc                          ; +1 retrieve sign
 569+ 710D FE 00                                cp      0
 570+ 710F 28 06                                jr      z,.DoneNormY                ; in case we end up with - 0
 571+ 7111 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 572+ 7113 28 02                                jr      z,.DoneNormY
 573+ 7115 ED 44                                neg                                 ;
 574+ 7117 47           .DoneNormY:             ld      b,a                         ; result from Y
 575+ 7118 DD 4C                                ld      c,ixh                       ; x = saved X
 576+ 711A              .SetSprite:             MMUSelectSpriteBank
 576+ 711A ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 577+ 711E CD 05 E1                             call    compass_sun_move
 578+ 7121 DD 7D                                ld      a,ixl
 579+ 7123 CB 7F                                bit     7,a
 580+ 7125 20 04                                jr      nz,.SunBehind
 581+ 7127 CD 1C E2     .SunInfront:            call    show_compass_sun_infront
 582+ 712A C9                                   ret
 583+ 712B CD 27 E2     .SunBehind:             call    show_compass_sun_behind
 584+ 712E C9                                   ret
 585+ 712F
 586+ 712F
 587+ 712F              UpdateCompassPlanet:    MMUSelectPlanet
 587+ 712F ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 588+ 7133 CD 90 6F                             call    ScalePlanetPos              ; get as 7 bit signed
 589+ 7136 C5 E5 D5                             push    bc,,hl,,de                  ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 590+ 7139 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 591+ 713A 59                                   ld      e,c                         ; .
 592+ 713B ED 30                                mul                                 ; .
 593+ 713D 42 4B                                ld      bc,de                       ; .
 594+ 713F 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 595+ 7140 5D                                   ld      e,l                         ; .
 596+ 7141 ED 30                                mul                                 ; .
 597+ 7143 EB                                   ex      de,hl                       ; .
 598+ 7144 D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 599+ 7145 53                                   ld      d,e                         ; de = z ^
 600+ 7146 ED 30                                mul                                 ; .
 601+ 7148 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + z^2
 602+ 7149 09                                   add     hl,bc
 603+ 714A EB                                   ex      de,hl
 604+ 714B CD C1 93                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 605+ 714E                                      ; if h <> 0 then more difficult
 606+ 714E 55                                   ld      d,l                         ; iyl = q
 607+ 714F FD 6A                                ld      iyl,d                       ; .
 608+ 7151 E1           .NormaliseX:            pop     hl                          ; hl x scaled
 609+ 7152 7C                                   ld      a,h                         ; c = sign
 610+ 7153 E6 80                                and     SignOnly8Bit                ; .
 611+ 7155 4F                                   ld      c,a                         ; .
 612+ 7156 C5                                   push    bc                          ; save sign to stack
 613+ 7157 7D                                   ld      a,l                         ; a = 8 bit abs z
 614+ 7158 CD 3A 99                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 615+ 715B 5F                                   ld      e,a                         ; .
 616+ 715C                                      EDiv10Inline                        ; a = e / 10
 616+ 715C 16 00       >                        ld      d,0
 616+ 715E 62 6B       >                        ld      hl,de
 616+ 7160 29          >                        add     hl,hl
 616+ 7161 19          >                        add     hl,de
 616+ 7162 29          >                        add     hl,hl
 616+ 7163 29          >                        add     hl,hl
 616+ 7164 19          >                        add     hl,de
 616+ 7165 29          >                        add     hl,hl
 617+ 7166 7C                                   ld      a,h                         ; .
 618+ 7167 C1                                   pop     bc                          ; retrieve sign
 619+ 7168 FE 00                                cp      0
 620+ 716A 28 06                                jr      z,.DoneNormX                ; in case we end up with - 0
 621+ 716C CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 622+ 716E 28 02                                jr      z,.DoneNormX
 623+ 7170 ED 44                                neg
 624+ 7172 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 625+ 7174 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 626+ 7176 E1                                   pop     hl                          ; hl y scaled
 627+ 7177 7C                                   ld      a,h                         ; c = sign
 628+ 7178 E6 80                                and     SignOnly8Bit                ; .
 629+ 717A 4F                                   ld      c,a                         ; .
 630+ 717B C5                                   push    bc                          ; save sign to stack
 631+ 717C 7D                                   ld      a,l                         ; a = 8 bit signed z
 632+ 717D CD 3A 99                             call    AequAdivQmul96ABS           ; .
 633+ 7180 5F                                   ld      e,a                         ; a = e / 10
 634+ 7181                                      EDiv10Inline                        ; .
 634+ 7181 16 00       >                        ld      d,0
 634+ 7183 62 6B       >                        ld      hl,de
 634+ 7185 29          >                        add     hl,hl
 634+ 7186 19          >                        add     hl,de
 634+ 7187 29          >                        add     hl,hl
 634+ 7188 29          >                        add     hl,hl
 634+ 7189 19          >                        add     hl,de
 634+ 718A 29          >                        add     hl,hl
 635+ 718B 7C                                   ld      a,h                         ; retrieve sign
 636+ 718C C1                                   pop     bc                          ; retrieve sign
 637+ 718D FE 00                                cp      0
 638+ 718F 28 06                                jr      z,.DoneNormY                 ; in case we end up with - 0
 639+ 7191 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 640+ 7193 28 02                                jr      z,.DoneNormY
 641+ 7195 ED 44                                neg                                 ;
 642+ 7197 47           .DoneNormY:             ld      b,a                         ; result from Y
 643+ 7198 DD 4C                                ld      c,ixh                       ; x = saved X
 644+ 719A              .SetSprite:             MMUSelectSpriteBank
 644+ 719A ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 645+ 719E CD 17 E1                             call    compass_station_move
 646+ 71A1 DD 7D                                ld      a,ixl
 647+ 71A3 CB 7F                                bit     7,a
 648+ 71A5 20 04                                jr      nz,.PlanetBehind
 649+ 71A7 CD 32 E2     .PlanetInfront:         call    show_compass_station_infront
 650+ 71AA C9                                   ret
 651+ 71AB CD 3D E2     .PlanetBehind:          call    show_compass_station_behind
 652+ 71AE C9                                   ret
 653+ 71AF
 654+ 71AF              UpdatePlanetSun:        MMUSelectPlanet
 654+ 71AF ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 655+ 71B3                                      Shift24BitScan  PBnKyhi, PBnKylo
 655+ 71B3 2A 14 C0    >                        ld      hl,(PBnKyhi)
 655+ 71B6 44          >                        ld      b,h
 655+ 71B7 7C          >                        ld      a,h
 655+ 71B8 E6 7F       >                        and     SignMask8Bit
 655+ 71BA 67          >                        ld      h,a
 655+ 71BB 3A 13 C0    >                        ld      a,(PBnKylo)
 655+ 71BE CB 27       >                        sla     a
 655+ 71C0 CB 15       >                        rl      l
 655+ 71C2 CB 14       >                        rl      h
 655+ 71C4 CB 27       >                        sla     a
 655+ 71C6 CB 15       >                        rl      l
 655+ 71C8 CB 14       >                        rl      h
 655+ 71CA CB 27       >                        sla     a
 655+ 71CC CB 15       >                        rl      l
 655+ 71CE CB 14       >                        rl      h
 655+ 71D0 CB 27       >                        sla     a
 655+ 71D2 CB 15       >                        rl      l
 655+ 71D4 CB 14       >                        rl      h
 655+ 71D6 CB 27       >                        sla     a
 655+ 71D8 CB 15       >                        rl      l
 655+ 71DA CB 14       >                        rl      h
 655+ 71DC CB 27       >                        sla     a
 655+ 71DE CB 15       >                        rl      l
 655+ 71E0 CB 14       >                        rl      h
 656+ 71E2 3A 12 C0     .IsItInRange:           ld      a,(PBnKxsgn)                ; if the high byte is not
 657+ 71E5 21 15 C0                             ld      hl,PBnKysgn                 ; a sign only
 658+ 71E8 B6                                   or      (hl)                        ; then its too far away
 659+ 71E9 21 18 C0                             ld      hl,PBnKzsgn                 ; for the scanner to draw
 660+ 71EC B6                                   or      (hl)                        ; so rely on the compass
 661+ 71ED E6 7F                                and     SignMask8Bit                ;
 662+ 71EF C0                                   ret     nz                          ;
 663+ 71F0 2A 16 C0     .ItsInRange:            ld      hl,(PBnKzlo)                ; we will get unsigned values
 664+ 71F3 ED 5B 10 C0                          ld      de,(PBnKxlo)
 665+ 71F7 ED 4B 13 C0                          ld      bc,(PBnKylo)
 666+ 71FB 7C                                   ld      a,h
 667+ 71FC B2                                   or      d
 668+ 71FD B0                                   or      b
 669+ 71FE E6 C0                                and     %11000000
 670+ 7200 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 671+ 7201 3A 12 C0     .MakeX2Compliment:      ld      a,(PBnKxsgn)
 672+ 7204 CB 7F                                bit     7,a
 673+ 7206 28 04                                jr      z,.absXHi
 674+ 7208                                      NegD
 674+ 7208 7A          >                    ld      a,d
 674+ 7209 ED 44       >                    neg
 674+ 720B 57          >                    ld      d,a
 675+ 720C 7A           .absXHi:                ld      a,d
 676+ 720D C6 80                                add     ScannerX
 677+ 720F DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 678+ 7211 CB 3C        .ProcessZCoord:         srl     h
 679+ 7213 CB 3C                                srl     h
 680+ 7215 3A 18 C0     .MakeZ2Compliment:      ld      a,(PBnKzsgn)
 681+ 7218 CB 7F                                bit     7,a
 682+ 721A 28 04                                jr      z,.absZHi
 683+ 721C                                      NegH
 683+ 721C 7C          >                    ld      a,h
 683+ 721D ED 44       >                    neg
 683+ 721F 67          >                    ld      h,a
 684+ 7220 3E AB        .absZHi:                ld      a,ScannerY
 685+ 7222 94                                   sub     h
 686+ 7223 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 687+ 7225 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 688+ 7227 20 0B                                jr      nz,.StickHasLength
 689+ 7229 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 690+ 722B FD 6F                                ld      iyl,a
 691+ 722D                                      MMUSelectLayer2
 691+ 722D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 692+ 7231 C3 5C 72                             jp      .NoStick
 693+ 7234 3A 15 C0     .StickHasLength:        ld      a,(PBnKysgn)                ; if b  =  0 then no line
 694+ 7237 CB 7F                                bit     7,a
 695+ 7239 28 04                                jr      z,.absYHi
 696+ 723B                                      NegB
 696+ 723B 78          >                    ld      a,b
 696+ 723C ED 44       >                    neg
 696+ 723E 47          >                    ld      b,a
 697+ 723F FD 7C        .absYHi:                ld      a,iyh
 698+ 7241 90           .SetStickPos:           sub     b
 699+ 7242                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 699+ 7242 FE BE       >                        cp      ScannerBottom
 699+ 7244 DA 49 72    >                        jp		c, .StickOnScreen
 700+ 7247 3E BE                                ld      a,ScannerBottom
 701+ 7249 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 702+ 724B DD 6F                                ld      ixl,a
 703+ 724D FD 44                                ld      b,iyh                       ; from row
 704+ 724F DD 4C                                ld      c,ixh                       ; from col
 705+ 7251 FD 55                                ld      d,iyl                       ; to row
 706+ 7253 1E B4                                ld      e,L2SunScanner
 707+ 7255                                      MMUSelectLayer2
 707+ 7255 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 708+ 7259 CD 5E E3                             call    l2_draw_vert_line_to
 709+ 725C FD 45        .NoStick:               ld      b,iyl                       ; row
 710+ 725E DD 4C                                ld      c,ixh                       ; col
 711+ 7260 3E FC                                ld      a,L2SunScannerBright
 712+ 7262 CD 35 E1                             call    l2_plot_pixel
 713+ 7265 FD 45                                ld      b,iyl
 714+ 7267 DD 4C                                ld      c,ixh
 715+ 7269 0C                                   inc     c
 716+ 726A 3E FC                                ld      a,L2SunScannerBright
 717+ 726C CD 35 E1                             call    l2_plot_pixel
 718+ 726F C9                                   ret
 719+ 7270
 720+ 7270              UpdateCompassStation:   MMUSelectShipBankN 0
 720+ 7270 ED 91 57 00 >					 nextreg ShipModelMMU,	    0
 721+ 7274
 722+ 7274 CD DD 6F                             call    ScaleSunPos                 ; get as 7 bit signed
 723+ 7277 C5 D5 E5 D5                          push    bc,,de,,hl,,de              ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 724+ 727B 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 725+ 727C 59                                   ld      e,c                         ; .
 726+ 727D ED 30                                mul                                 ; .
 727+ 727F 42 4B                                ld      bc,de                       ; .
 728+ 7281 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 729+ 7282 5D                                   ld      e,l                         ; .
 730+ 7283 ED 30                                mul                                 ; .
 731+ 7285 EB                                   ex      de,hl                       ; .
 732+ 7286 D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 733+ 7287 53                                   ld      d,e                         ; de = z ^
 734+ 7288 ED 30                                mul                                 ; .
 735+ 728A 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + x^2
 736+ 728B 09                                   add     hl,bc
 737+ 728C EB                                   ex      de,hl
 738+ 728D CD C1 93                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 739+ 7290                                      ; if h <> 0 then more difficult
 740+ 7290 55                                   ld      d,l                         ; iyl = q
 741+ 7291 FD 6A                                ld      iyl,d                       ; .
 742+ 7293 E1           .NormaliseX:            pop     hl                          ; hl x scaled
 743+ 7294 7C                                   ld      a,h                         ; c = sign
 744+ 7295 E6 80                                and     SignOnly8Bit                ; .
 745+ 7297 4F                                   ld      c,a                         ; .
 746+ 7298 C5                                   push    bc                          ; save sign to stack
 747+ 7299 7D                                   ld      a,l                         ; a = 8 bit abs z
 748+ 729A CD 3A 99                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 749+ 729D 5F                                   ld      e,a                         ; .
 750+ 729E                                      EDiv10Inline                        ; a = e / 10
 750+ 729E 16 00       >                        ld      d,0
 750+ 72A0 62 6B       >                        ld      hl,de
 750+ 72A2 29          >                        add     hl,hl
 750+ 72A3 19          >                        add     hl,de
 750+ 72A4 29          >                        add     hl,hl
 750+ 72A5 29          >                        add     hl,hl
 750+ 72A6 19          >                        add     hl,de
 750+ 72A7 29          >                        add     hl,hl
 751+ 72A8 7C                                   ld      a,h                         ; .
 752+ 72A9 C1                                   pop     bc                          ; retrieve sign
 753+ 72AA FE 00                                cp      0
 754+ 72AC 28 06                                jr      z,.DoneNormX                 ; in case we end up with - 0
 755+ 72AE CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 756+ 72B0 28 02                                jr      z,.DoneNormX
 757+ 72B2 ED 44                                neg
 758+ 72B4 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 759+ 72B6 FD 55        .NormaliseZ:            ld      d,iyl                       ; d = q
 760+ 72B8 E1                                   pop     hl                          ; hl z scaled
 761+ 72B9 7C                                   ld      a,h                         ; c = sign
 762+ 72BA E6 80                                and     SignOnly8Bit                ; .
 763+ 72BC 4F                                   ld      c,a                         ; .
 764+ 72BD C5                                   push    bc                          ; save sign to stack
 765+ 72BE 7D                                   ld      a,l                         ; e = a /q * 96
 766+ 72BF CD 3A 99                             call    AequAdivQmul96ABS              ; .
 767+ 72C2 5F                                   ld      e,a                         ; a = e / 10
 768+ 72C3                                      EDiv10Inline                        ; .
 768+ 72C3 16 00       >                        ld      d,0
 768+ 72C5 62 6B       >                        ld      hl,de
 768+ 72C7 29          >                        add     hl,hl
 768+ 72C8 19          >                        add     hl,de
 768+ 72C9 29          >                        add     hl,hl
 768+ 72CA 29          >                        add     hl,hl
 768+ 72CB 19          >                        add     hl,de
 768+ 72CC 29          >                        add     hl,hl
 769+ 72CD 7C                                   ld      a,h                         ; retrieve sign
 770+ 72CE C1                                   pop     bc                          ; retrieve sign
 771+ 72CF CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 772+ 72D1 28 02                                jr      z,.DoneNormZ
 773+ 72D3 ED 44                                neg
 774+ 72D5 DD 6F        .DoneNormZ:             ld      ixl,a                       ; .
 775+ 72D7 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 776+ 72D9 E1                                   pop     hl                          ; hl y scaled
 777+ 72DA 7C                                   ld      a,h                         ; c = sign
 778+ 72DB E6 80                                and     SignOnly8Bit                ; .
 779+ 72DD 4F                                   ld      c,a                         ; .
 780+ 72DE C5                                   push    bc                          ; save sign to stack
 781+ 72DF 7D                                   ld      a,l                         ; a = 8 bit signed z
 782+ 72E0 CD 3A 99                             call    AequAdivQmul96ABS              ; .
 783+ 72E3 5F                                   ld      e,a                         ; a = e / 10
 784+ 72E4                                      EDiv10Inline                        ; .
 784+ 72E4 16 00       >                        ld      d,0
 784+ 72E6 62 6B       >                        ld      hl,de
 784+ 72E8 29          >                        add     hl,hl
 784+ 72E9 19          >                        add     hl,de
 784+ 72EA 29          >                        add     hl,hl
 784+ 72EB 29          >                        add     hl,hl
 784+ 72EC 19          >                        add     hl,de
 784+ 72ED 29          >                        add     hl,hl
 785+ 72EE 7C                                   ld      a,h                         ; retrieve sign
 786+ 72EF C1                                   pop     bc                          ; retrieve sign
 787+ 72F0 FE 00                                cp      0
 788+ 72F2 28 06                                jr      z,.DoneNormY                ; in case we end up with - 0
 789+ 72F4 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 790+ 72F6 28 02                                jr      z,.DoneNormY
 791+ 72F8 ED 44                                neg
 792+ 72FA 47           .DoneNormY:             ld      b,a                         ; .
 793+ 72FB DD 4C                                ld      c,ixh
 794+ 72FD              .SetSprite:             MMUSelectSpriteBank
 794+ 72FD ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 795+ 7301 CD 05 E1                             call    compass_sun_move
 796+ 7304 DD 7D                                ld      a,ixl
 797+ 7306 CB 7F                                bit     7,a
 798+ 7308 20 04                                jr      nz,.SunBehind
 799+ 730A CD 1C E2     .SunInfront:            call    show_compass_sun_infront
 800+ 730D C9                                   ret
 801+ 730E CD 27 E2     .SunBehind:             call    show_compass_sun_behind
 802+ 7311 C9                                   ret
 803+ 7312
 804+ 7312
 805+ 7312              UpdateScannerSun:       MMUSelectSun
 805+ 7312 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 806+ 7316                                      Shift24BitScan  SBnKyhi, SBnKylo
 806+ 7316 2A 14 C0    >                        ld      hl,(SBnKyhi)
 806+ 7319 44          >                        ld      b,h
 806+ 731A 7C          >                        ld      a,h
 806+ 731B E6 7F       >                        and     SignMask8Bit
 806+ 731D 67          >                        ld      h,a
 806+ 731E 3A 13 C0    >                        ld      a,(SBnKylo)
 806+ 7321 CB 27       >                        sla     a
 806+ 7323 CB 15       >                        rl      l
 806+ 7325 CB 14       >                        rl      h
 806+ 7327 CB 27       >                        sla     a
 806+ 7329 CB 15       >                        rl      l
 806+ 732B CB 14       >                        rl      h
 806+ 732D CB 27       >                        sla     a
 806+ 732F CB 15       >                        rl      l
 806+ 7331 CB 14       >                        rl      h
 806+ 7333 CB 27       >                        sla     a
 806+ 7335 CB 15       >                        rl      l
 806+ 7337 CB 14       >                        rl      h
 806+ 7339 CB 27       >                        sla     a
 806+ 733B CB 15       >                        rl      l
 806+ 733D CB 14       >                        rl      h
 806+ 733F CB 27       >                        sla     a
 806+ 7341 CB 15       >                        rl      l
 806+ 7343 CB 14       >                        rl      h
 807+ 7345 3A 12 C0     .IsItInRange:           ld      a,(SBnKxsgn)                ; if the high byte is not
 808+ 7348 21 15 C0                             ld      hl,SBnKysgn                 ; a sign only
 809+ 734B B6                                   or      (hl)                        ; then its too far away
 810+ 734C 21 18 C0                             ld      hl,SBnKzsgn                 ; for the scanner to draw
 811+ 734F B6                                   or      (hl)                        ; so rely on the compass
 812+ 7350 E6 7F                                and     SignMask8Bit                ;
 813+ 7352 C0                                   ret     nz                          ;
 814+ 7353 2A 16 C0     .ItsInRange:            ld      hl,(SBnKzlo)                ; we will get unsigned values
 815+ 7356 ED 5B 10 C0                          ld      de,(SBnKxlo)
 816+ 735A ED 4B 13 C0                          ld      bc,(SBnKylo)
 817+ 735E 7C                                   ld      a,h
 818+ 735F B2                                   or      d
 819+ 7360 B0                                   or      b
 820+ 7361 E6 C0                                and     %11000000
 821+ 7363 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 822+ 7364 3A 12 C0     .MakeX2Compliment:      ld      a,(SBnKxsgn)
 823+ 7367 CB 7F                                bit     7,a
 824+ 7369 28 04                                jr      z,.absXHi
 825+ 736B                                      NegD
 825+ 736B 7A          >                    ld      a,d
 825+ 736C ED 44       >                    neg
 825+ 736E 57          >                    ld      d,a
 826+ 736F 7A           .absXHi:                ld      a,d
 827+ 7370 C6 80                                add     ScannerX
 828+ 7372 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 829+ 7374 CB 3C        .ProcessZCoord:         srl     h
 830+ 7376 CB 3C                                srl     h
 831+ 7378 3A 18 C0     .MakeZ2Compliment:      ld      a,(SBnKzsgn)
 832+ 737B CB 7F                                bit     7,a
 833+ 737D 28 04                                jr      z,.absZHi
 834+ 737F                                      NegH
 834+ 737F 7C          >                    ld      a,h
 834+ 7380 ED 44       >                    neg
 834+ 7382 67          >                    ld      h,a
 835+ 7383 3E AB        .absZHi:                ld      a,ScannerY
 836+ 7385 94                                   sub     h
 837+ 7386 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 838+ 7388 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 839+ 738A 20 0B                                jr      nz,.StickHasLength
 840+ 738C FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 841+ 738E FD 6F                                ld      iyl,a
 842+ 7390                                      MMUSelectLayer2
 842+ 7390 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 843+ 7394 C3 BF 73                             jp      .NoStick
 844+ 7397 3A 15 C0     .StickHasLength:        ld      a,(SBnKysgn)                ; if b  =  0 then no line
 845+ 739A CB 7F                                bit     7,a
 846+ 739C 28 04                                jr      z,.absYHi
 847+ 739E                                      NegB
 847+ 739E 78          >                    ld      a,b
 847+ 739F ED 44       >                    neg
 847+ 73A1 47          >                    ld      b,a
 848+ 73A2 FD 7C        .absYHi:                ld      a,iyh
 849+ 73A4 90           .SetStickPos:           sub     b
 850+ 73A5                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 850+ 73A5 FE BE       >                        cp      ScannerBottom
 850+ 73A7 DA AC 73    >                        jp		c, .StickOnScreen
 851+ 73AA 3E BE                                ld      a,ScannerBottom
 852+ 73AC FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 853+ 73AE DD 6F                                ld      ixl,a
 854+ 73B0 FD 44                                ld      b,iyh                       ; from row
 855+ 73B2 DD 4C                                ld      c,ixh                       ; from col
 856+ 73B4 FD 55                                ld      d,iyl                       ; to row
 857+ 73B6 1E B4                                ld      e,L2SunScanner
 858+ 73B8                                      MMUSelectLayer2
 858+ 73B8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 859+ 73BC CD 5E E3                             call    l2_draw_vert_line_to
 860+ 73BF FD 45        .NoStick:               ld      b,iyl                       ; row
 861+ 73C1 DD 4C                                ld      c,ixh                       ; col
 862+ 73C3 3E FC                                ld      a,L2SunScannerBright
 863+ 73C5 CD 35 E1                             call    l2_plot_pixel
 864+ 73C8 FD 45                                ld      b,iyl
 865+ 73CA DD 4C                                ld      c,ixh
 866+ 73CC 0C                                   inc     c
 867+ 73CD 3E FC                                ld      a,L2SunScannerBright
 868+ 73CF CD 35 E1                             call    l2_plot_pixel
 869+ 73D2 C9                                   ret
 870+ 73D3
 871+ 73D3              ; This will do a planet update if we are not in space station range
 872+ 73D3              UpdateScannerPlanet:    MMUSelectPlanet
 872+ 73D3 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 873+ 73D7                                      Shift24BitScan  PBnKyhi, PBnKylo
 873+ 73D7 2A 14 C0    >                        ld      hl,(PBnKyhi)
 873+ 73DA 44          >                        ld      b,h
 873+ 73DB 7C          >                        ld      a,h
 873+ 73DC E6 7F       >                        and     SignMask8Bit
 873+ 73DE 67          >                        ld      h,a
 873+ 73DF 3A 13 C0    >                        ld      a,(PBnKylo)
 873+ 73E2 CB 27       >                        sla     a
 873+ 73E4 CB 15       >                        rl      l
 873+ 73E6 CB 14       >                        rl      h
 873+ 73E8 CB 27       >                        sla     a
 873+ 73EA CB 15       >                        rl      l
 873+ 73EC CB 14       >                        rl      h
 873+ 73EE CB 27       >                        sla     a
 873+ 73F0 CB 15       >                        rl      l
 873+ 73F2 CB 14       >                        rl      h
 873+ 73F4 CB 27       >                        sla     a
 873+ 73F6 CB 15       >                        rl      l
 873+ 73F8 CB 14       >                        rl      h
 873+ 73FA CB 27       >                        sla     a
 873+ 73FC CB 15       >                        rl      l
 873+ 73FE CB 14       >                        rl      h
 873+ 7400 CB 27       >                        sla     a
 873+ 7402 CB 15       >                        rl      l
 873+ 7404 CB 14       >                        rl      h
 874+ 7406 3A 12 C0     .IsItInRange:           ld      a,(PBnKxsgn)                ; if the high byte is not
 875+ 7409 21 15 C0                             ld      hl,PBnKysgn                 ; a sign only
 876+ 740C B6                                   or      (hl)                        ; then its too far away
 877+ 740D 21 18 C0                             ld      hl,PBnKzsgn                 ; for the scanner to draw
 878+ 7410 B6                                   or      (hl)                        ; so rely on the compass
 879+ 7411 E6 7F                                and     SignMask8Bit                ;
 880+ 7413 C0                                   ret     nz                          ;
 881+ 7414 2A 16 C0     .ItsInRange:            ld      hl,(PBnKzlo)                ; we will get unsigned values
 882+ 7417 ED 5B 10 C0                          ld      de,(PBnKxlo)
 883+ 741B ED 4B 13 C0                          ld      bc,(PBnKylo)
 884+ 741F 7C                                   ld      a,h
 885+ 7420 B2                                   or      d
 886+ 7421 B0                                   or      b
 887+ 7422 E6 C0                                and     %11000000
 888+ 7424 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 889+ 7425 3A 12 C0     .MakeX2Compliment:      ld      a,(PBnKxsgn)
 890+ 7428 CB 7F                                bit     7,a
 891+ 742A 28 04                                jr      z,.absXHi
 892+ 742C                                      NegD
 892+ 742C 7A          >                    ld      a,d
 892+ 742D ED 44       >                    neg
 892+ 742F 57          >                    ld      d,a
 893+ 7430 7A           .absXHi:                ld      a,d
 894+ 7431 C6 80                                add     ScannerX
 895+ 7433 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 896+ 7435 CB 3C        .ProcessZCoord:         srl     h
 897+ 7437 CB 3C                                srl     h
 898+ 7439 3A 18 C0     .MakeZ2Compliment:      ld      a,(PBnKzsgn)
 899+ 743C CB 7F                                bit     7,a
 900+ 743E 28 04                                jr      z,.absZHi
 901+ 7440                                      NegH
 901+ 7440 7C          >                    ld      a,h
 901+ 7441 ED 44       >                    neg
 901+ 7443 67          >                    ld      h,a
 902+ 7444 3E AB        .absZHi:                ld      a,ScannerY
 903+ 7446 94                                   sub     h
 904+ 7447 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 905+ 7449 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 906+ 744B 20 0B                                jr      nz,.StickHasLength
 907+ 744D FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 908+ 744F FD 6F                                ld      iyl,a
 909+ 7451                                      MMUSelectLayer2
 909+ 7451 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 910+ 7455 C3 80 74                             jp      .NoStick
 911+ 7458 3A 15 C0     .StickHasLength:        ld      a,(PBnKysgn)                ; if b  =  0 then no line
 912+ 745B CB 7F                                bit     7,a
 913+ 745D 28 04                                jr      z,.absYHi
 914+ 745F                                      NegB
 914+ 745F 78          >                    ld      a,b
 914+ 7460 ED 44       >                    neg
 914+ 7462 47          >                    ld      b,a
 915+ 7463 FD 7C        .absYHi:                ld      a,iyh
 916+ 7465 90           .SetStickPos:           sub     b
 917+ 7466                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 917+ 7466 FE BE       >                        cp      ScannerBottom
 917+ 7468 DA 6D 74    >                        jp		c, .StickOnScreen
 918+ 746B 3E BE                                ld      a,ScannerBottom
 919+ 746D FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 920+ 746F DD 6F                                ld      ixl,a
 921+ 7471 FD 44                                ld      b,iyh                       ; from row
 922+ 7473 DD 4C                                ld      c,ixh                       ; from col
 923+ 7475 FD 55                                ld      d,iyl                       ; to row
 924+ 7477 1E B4                                ld      e,L2SunScanner
 925+ 7479                                      MMUSelectLayer2
 925+ 7479 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 926+ 747D CD 5E E3                             call    l2_draw_vert_line_to
 927+ 7480 FD 45        .NoStick:               ld      b,iyl                       ; row
 928+ 7482 DD 4C                                ld      c,ixh                       ; col
 929+ 7484 3E FC                                ld      a,L2SunScannerBright
 930+ 7486 CD 35 E1                             call    l2_plot_pixel
 931+ 7489 FD 45                                ld      b,iyl
 932+ 748B DD 4C                                ld      c,ixh
 933+ 748D 0C                                   inc     c
 934+ 748E 3E FC                                ld      a,L2SunScannerBright
 935+ 7490 CD 35 E1                             call    l2_plot_pixel
 936+ 7493 C9                                   ret
 937+ 7494
 938+ 7494
 939+ 7494              ; As the space station is always ship 0 then we can just use the scanner
 940+ 7494
 941+ 7494              ; This will go though all the universe ship data banks and plot, for now we will just work on one bank
 942+ 7494 3A 41 C0     UpdateScannerShip:      ld      a,(UBnKexplDsp)             ; if bit 4 is clear then ship should not be drawn
 943+ 7497 CB 67                                bit     4,a                         ; .
 944+ 7499                                      ;DEBUG ret     z                           ; .
 945+ 7499 3A 31 C3                             ld      a,(ShipTypeAddr)            ; if its a planet or sun, do not display
 946+ 749C CB 7F                                bit     7,a
 947+ 749E C0                                   ret     nz
 948+ 749F              ; DEBUG Add in station types later
 949+ 749F 2A 16 C0     .NotMissile:            ld      hl,(UBnKzlo)
 950+ 74A2 ED 5B 10 C0                          ld      de,(UBnKxlo)
 951+ 74A6 ED 4B 13 C0                          ld      bc,(UBnKylo)
 952+ 74AA 7C                                   ld      a,h
 953+ 74AB B2                                   or      d
 954+ 74AC B0                                   or      b
 955+ 74AD E6 C0                                and     %11000000
 956+ 74AF C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 957+ 74B0 3A 12 C0     .MakeX2Compliment:      ld      a,(UBnKxsgn)
 958+ 74B3 CB 7F                                bit     7,a
 959+ 74B5 28 04                                jr      z,.absXHi
 960+ 74B7                                      NegD
 960+ 74B7 7A          >                    ld      a,d
 960+ 74B8 ED 44       >                    neg
 960+ 74BA 57          >                    ld      d,a
 961+ 74BB 7A           .absXHi:                ld      a,d
 962+ 74BC C6 80                                add     ScannerX
 963+ 74BE DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 964+ 74C0 CB 3C        .ProcessZCoord:         srl     h
 965+ 74C2 CB 3C                                srl     h
 966+ 74C4 3A 18 C0     .MakeZ2Compliment:      ld      a,(UBnKzsgn)
 967+ 74C7 CB 7F                                bit     7,a
 968+ 74C9 28 04                                jr      z,.absZHi
 969+ 74CB                                      NegH
 969+ 74CB 7C          >                    ld      a,h
 969+ 74CC ED 44       >                    neg
 969+ 74CE 67          >                    ld      h,a
 970+ 74CF 3E AB        .absZHi:                ld      a,ScannerY
 971+ 74D1 94                                   sub     h
 972+ 74D2 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 973+ 74D4 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 974+ 74D6 20 19                                jr      nz,.StickHasLength
 975+ 74D8 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 976+ 74DA FD 6F                                ld      iyl,a
 977+ 74DC DD 7D                                ld      a,ixl
 978+ 74DE                                      GetShipColorBright
 978+ 74DE 3A 31 C3    >                        ld      a,(ShipTypeAddr)
 978+ 74E1 CB 27       >                        sla     a                            ; as its byte pairs * 2
 978+ 74E3 3C          >                        inc     a
 978+ 74E4 21 86 6F    >                        ld      hl,ScannerColourTable
 978+ 74E7 ED 31       >                        add     hl,a
 978+ 74E9 7E          >                        ld      a,(hl)
 979+ 74EA                                      MMUSelectLayer2
 979+ 74EA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 980+ 74EE C3 28 75                             jp      .NoStick
 981+ 74F1 3A 15 C0     .StickHasLength:        ld      a,(UBnKysgn)                ; if b  =  0 then no line
 982+ 74F4 CB 7F                                bit     7,a
 983+ 74F6 28 04                                jr      z,.absYHi
 984+ 74F8                                      NegB
 984+ 74F8 78          >                    ld      a,b
 984+ 74F9 ED 44       >                    neg
 984+ 74FB 47          >                    ld      b,a
 985+ 74FC FD 7C        .absYHi:                ld      a,iyh
 986+ 74FE 90           .SetStickPos:           sub     b
 987+ 74FF                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 987+ 74FF FE BE       >                        cp      ScannerBottom
 987+ 7501 DA 06 75    >                        jp		c, .StickOnScreen
 988+ 7504 3E BE                                ld      a,ScannerBottom
 989+ 7506 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 990+ 7508                                      GetShipColor
 990+ 7508 3A 31 C3    >                        ld      a,(ShipTypeAddr)
 990+ 750B CB 27       >                        sla     a                            ; as its byte pairs * 2
 990+ 750D 21 86 6F    >                        ld      hl,ScannerColourTable
 990+ 7510 ED 31       >                        add     hl,a
 990+ 7512 7E          >                        ld      a,(hl)
 991+ 7513 DD 6F                                ld      ixl,a
 992+ 7515 FD 44                                ld      b,iyh                       ; from row
 993+ 7517 DD 4C                                ld      c,ixh                       ; from col
 994+ 7519 FD 55                                ld      d,iyl                       ; to row
 995+ 751B DD 5D                                ld      e,ixl                       ; colur will only be green or yellow for now
 996+ 751D E5                                   push    hl
 997+ 751E                                      MMUSelectLayer2
 997+ 751E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 998+ 7522 CD 5E E3                             call    l2_draw_vert_line_to
 999+ 7525 E1                                   pop     hl
1000+ 7526 23                                   inc     hl
1001+ 7527 7E                                   ld      a,(hl)
1002+ 7528 FD 45        .NoStick:               ld      b,iyl                       ; row
1003+ 752A DD 4C                                ld      c,ixh                       ; col
1004+ 752C F5                                   push    af
1005+ 752D CD 35 E1                             call    l2_plot_pixel
1006+ 7530 F1                                   pop     af
1007+ 7531 FD 45                                ld      b,iyl
1008+ 7533 DD 4C                                ld      c,ixh
1009+ 7535 0C                                   inc     c
1010+ 7536 CD 35 E1                             call    l2_plot_pixel
1011+ 7539 C9                                   ret
1012+ 753A
1013+ 753A
# file closed: ./Views/ConsoleDrawing.asm
 488  753A                          INCLUDE "./Tables/message_queue.asm"
# file opened: ./Tables/message_queue.asm
   1+ 753A
   2+ 753A
   3+ 753A              ResetMessageQueue:      ZeroA
   3+ 753A AF          >                        xor a
   4+ 753B 32 2D 80                             ld      (MessageCount),a
   5+ 753E 32 2E 80                             ld      (MessageCurrent),a
   6+ 7541 21 31 80                             ld      hl,MessageQueue
   7+ 7544 11 2F 80                             ld      de,MessageIndex
   8+ 7547 06 05                                ld      b,5
   9+ 7549 7D           .ClearMessageIndexs:    ld      a,l                                 ; Wipe out the indexes to all the data
  10+ 754A 12                                   ld      (de),a                              ;
  11+ 754B 13                                   inc     de                                  ;
  12+ 754C 7C                                   ld      a,h                                 ;
  13+ 754D 12                                   ld      (de),a                              ;
  14+ 754E 13                                   inc     de                                  ;
  15+ 754F 3E 21                                ld      a,MESSAGESIZE                       ;
  16+ 7551 ED 31                                add     hl,a                                ;
  17+ 7553 10 F4                                djnz    .ClearMessageIndexs                 ;
  18+ 7555 21 31 80     .ClearText:             ld      hl,MessageQueue
  19+ 7558 11 AA 00                             ld      de,(MAXMESSAGES * MESSAGESIZE) + MAXMESSAGES    ; MessageQueue + MessageTimeout
  20+ 755B 3E 00                                ld      a,0
  21+ 755D CD A3 7C                             call	memfill_dma
  22+ 7560 C9                                   ret
  23+ 7561
  24+ 7561              ; Message to enqeue is a string held at DE that must be terminated in \0
  25+ 7561              ;                                       IYH = timer for message
  26+ 7561 3A 2D 80     EnqueMessage:           ld      a,(MessageCount)                    ; Maximum message count check
  27+ 7564                                      ReturnIfAGTENusng    MAXMESSAGES            ; we do not enque if queue is full
  27+ 7564 FE 05       >                        cp    MAXMESSAGES
  27+ 7566 D0          >                        ret	 nc
  28+ 7567 3C                                   inc     a
  29+ 7568 32 2D 80                             ld      (MessageCount),a                    ; get ready for next message
  30+ 756B 4F           .AddMessage:            ld      c,a
  31+ 756C 3A 2E 80                             ld      a,(MessageCurrent)                  ; a = current message id + count + 1
  32+ 756F 81                                   add     c                                   ;
  33+ 7570                                      JumpIfALTNusng MAXMESSAGES, .ReadyToAdd     ; a = a modulus 5 (note we can only hit 5 messages
  33+ 7570 FE 05       >                        cp      MAXMESSAGES
  33+ 7572 DA 77 75    >                        jp		c, .ReadyToAdd
  34+ 7575 D6 05        .CircularQueue:         sub     MAXMESSAGES                         ; so only need 1 cycle of modulus
  35+ 7577 21 D6 80     .ReadyToAdd:            ld      hl,MessageTimeout                   ; write out message display time
  36+ 757A ED 31                                add     hl,a                                ; as some may be brief messages
  37+ 757C 4F                                   ld      c,a                                 ;
  38+ 757D FD 7C                                ld      a,iyh                               ;
  39+ 757F 77                                   ld      (hl),a                              ;
  40+ 7580 79                                   ld      a,c                                 ; get back index
  41+ 7581 21 2F 80                             ld      hl,MessageIndex
  42+ 7584                                      HLEquAddrAtHLPlusA                          ; hl = target location for message
  42+ 7584 CB 27       >                    sla         a
  42+ 7586 ED 31       >                    add         hl,a
  42+ 7588 7E          >                    ld          a,(hl)
  42+ 7589 23          >                    inc         hl
  42+ 758A 66          >                    ld          h,(hl)
  42+ 758B 6F          >                    ld          l,a
  43+ 758C EB                                   ex      de,hl                               ; de = destination, hl = message
  44+ 758D                                      ldCopyTextAtHLtoDE                          ; copy over text as we have done the rest
  44+ 758D 7E          >.CopyLoop:              ld      a,(hl)
  44+ 758E 12          >                        ld      (de),a
  44+ 758F FE 00       >                        cp      0
  44+ 7591 CA 98 75    >                        jp      z,.DoneCopy
  44+ 7594 23          >                        inc     hl
  44+ 7595 13          >                        inc     de
  44+ 7596 18 F5       >                        jr      .CopyLoop
  44+ 7598             >.DoneCopy:
  45+ 7598 C9                                   ret
  46+ 7599
  47+ 7599 3A 2E 80     UpdateMessageTimer:     ld      a,(MessageCurrent)
  48+ 759C 21 D6 80                             ld      hl,MessageTimeout
  49+ 759F ED 31                                add     hl,a
  50+ 75A1 7E                                   ld      a,(hl)
  51+ 75A2 3D                                   dec     a
  52+ 75A3 28 02                                jr      z,.UpdateQueue
  53+ 75A5 77           .UpdateTimer            ld      (hl),a
  54+ 75A6 C9                                   ret
  55+ 75A7 77           .UpdateQueue:           ld      (hl),a
  56+ 75A8 21 2D 80                             ld      hl,MessageCount
  57+ 75AB 35                                   dec     (hl)
  58+ 75AC 3A 2E 80                             ld      a,(MessageCurrent)
  59+ 75AF 23                                   inc     hl
  60+ 75B0                                      JumpIfALTNusng MAXMESSAGES, .ReadyToUpdate
  60+ 75B0 FE 05       >                        cp      MAXMESSAGES
  60+ 75B2 DA B6 75    >                        jp		c, .ReadyToUpdate
  61+ 75B5              .CircularQueue:         ZeroA
  61+ 75B5 AF          >                        xor a
  62+ 75B6 32 2E 80     .ReadyToUpdate          ld      (MessageCurrent),a
  63+ 75B9 C9                                   ret
  64+ 75BA
  65+ 75BA 3A 2D 80     DisplayCurrentMessage:  ld      a,(MessageCount)
  66+ 75BD                                      ReturnIfAIsZero
  66+ 75BD A7          >                        and     a
  66+ 75BE C8          >                        ret     z
  67+ 75BF 3A 2E 80                             ld      a,(MessageCurrent)
  68+ 75C2 21 2F 80                             ld      hl,MessageIndex
  69+ 75C5                                      HLEquAddrAtHLPlusA
  69+ 75C5 CB 27       >                    sla         a
  69+ 75C7 ED 31       >                    add         hl,a
  69+ 75C9 7E          >                    ld          a,(hl)
  69+ 75CA 23          >                    inc         hl
  69+ 75CB 66          >                    ld          h,(hl)
  69+ 75CC 6F          >                    ld          l,a
  70+ 75CD                                      MMUSelectLayer1
  70+ 75CD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  71+ 75D1 11 01 00                             ld      de,MESSAGELINE
  72+ 75D4 CD 15 E1                             call    l1_print_at_wrap
  73+ 75D7 C9                                   ret
  74+ 75D8
  75+ 75D8              HyperSpaceMessage:      MMUSelectLayer1
  75+ 75D8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  76+ 75DC 11 F8 68     .DisplayHyperCountDown: ld      de,Hyp_to
  77+ 75DF 21 36 8F                             ld      hl,name_expanded
  78+ 75E2                                      ldCopyTextAtHLtoDE
  78+ 75E2 7E          >.CopyLoop:              ld      a,(hl)
  78+ 75E3 12          >                        ld      (de),a
  78+ 75E4 FE 00       >                        cp      0
  78+ 75E6 CA ED 75    >                        jp      z,.DoneCopy
  78+ 75E9 23          >                        inc     hl
  78+ 75EA 13          >                        inc     de
  78+ 75EB 18 F5       >                        jr      .CopyLoop
  78+ 75ED             >.DoneCopy:
  79+ 75ED AF           .DoneName:              xor     a
  80+ 75EE 12                                   ld      (de),a
  81+ 75EF 32 14 69                             ld      (Hyp_message+31),a      ; max out at 32 characters
  82+ 75F2 21 F5 68     .CentreJustify:         ld      hl,Hyp_message
  83+ 75F5                                      HalfLengthHL
  83+ 75F5 06 00       >                        ld      b,0
  83+ 75F7 7E          >.CountLenLoop:          ld      a,(hl)
  83+ 75F8 FE 00       >                        cp      0
  83+ 75FA 28 04       >                        jr      z,.DoneCount
  83+ 75FC 04          >                        inc     b
  83+ 75FD 23          >                        inc     hl
  83+ 75FE 18 F7       >                        jr      .CountLenLoop
  83+ 7600 3E 20       >.DoneCount:             ld      a,32
  83+ 7602 90          >                        sub     b
  83+ 7603 CB 2F       >                        sra     a
  84+ 7605 21 2F 69                             ld      hl,Hyp_centeredTarget
  85+ 7608                                      ldClearTextLoop 32
  85+ 7608 47          >                        ld      b,a
  85+ 7609 3E 20       >                        ld      a,32
  85+ 760B 77          >.ClearLoop:             ld      (hl),a
  85+ 760C 23          >                        inc     hl
  85+ 760D 10 FC       >                        djnz    .ClearLoop
  86+ 760F EB                                   ex      de,hl
  87+ 7610 21 F5 68                             ld      hl,Hyp_message
  88+ 7613                                      ldCopyTextAtHLtoDE
  88+ 7613 7E          >.CopyLoop:              ld      a,(hl)
  88+ 7614 12          >                        ld      (de),a
  88+ 7615 FE 00       >                        cp      0
  88+ 7617 CA 1E 76    >                        jp      z,.DoneCopy
  88+ 761A 23          >                        inc     hl
  88+ 761B 13          >                        inc     de
  88+ 761C 18 F5       >                        jr      .CopyLoop
  88+ 761E             >.DoneCopy:
  89+ 761E                                      ZeroA
  89+ 761E AF          >                        xor a
  90+ 761F 32 4F 69                             ld      (Hyp_centeredEol),a
  91+ 7622 21 2B 69                             ld      hl,Hyp_counter           ; clear counter digits
  92+ 7625 3E 20                                ld      a,32                     ; clear counter digits
  93+ 7627 77                                   ld      (hl),a                   ; clear counter digits
  94+ 7628 23                                   inc     hl                       ; clear counter digits
  95+ 7629 77                                   ld      (hl),a                   ; clear counter digits
  96+ 762A 23                                   inc     hl                       ; clear counter digits
  97+ 762B 77                                   ld      (hl),a                   ; clear counter digits
  98+ 762C CD D1 68                             call    UpdateCountdownNumber
  99+ 762F 21 22 69                             ld      hl,Hyp_charging
 100+ 7632                                      HalfLengthHL
 100+ 7632 06 00       >                        ld      b,0
 100+ 7634 7E          >.CountLenLoop:          ld      a,(hl)
 100+ 7635 FE 00       >                        cp      0
 100+ 7637 28 04       >                        jr      z,.DoneCount
 100+ 7639 04          >                        inc     b
 100+ 763A 23          >                        inc     hl
 100+ 763B 18 F7       >                        jr      .CountLenLoop
 100+ 763D 3E 20       >.DoneCount:             ld      a,32
 100+ 763F 90          >                        sub     b
 100+ 7640 CB 2F       >                        sra     a
 101+ 7642 21 70 69                             ld      hl,Hyp_centeredCharging
 102+ 7645                                      ldClearTextLoop 32
 102+ 7645 47          >                        ld      b,a
 102+ 7646 3E 20       >                        ld      a,32
 102+ 7648 77          >.ClearLoop:             ld      (hl),a
 102+ 7649 23          >                        inc     hl
 102+ 764A 10 FC       >                        djnz    .ClearLoop
 103+ 764C EB                                   ex      de,hl
 104+ 764D 21 22 69                             ld      hl,Hyp_charging
 105+ 7650                                      ldCopyTextAtHLtoDE
 105+ 7650 7E          >.CopyLoop:              ld      a,(hl)
 105+ 7651 12          >                        ld      (de),a
 105+ 7652 FE 00       >                        cp      0
 105+ 7654 CA 5B 76    >                        jp      z,.DoneCopy
 105+ 7657 23          >                        inc     hl
 105+ 7658 13          >                        inc     de
 105+ 7659 18 F5       >                        jr      .CopyLoop
 105+ 765B             >.DoneCopy:
 106+ 765B AF                                   xor     a
 107+ 765C 32 90 69                             ld      (Hyp_centeredEol2),a
 108+ 765F 2A D9 81     .UpdateHyperCountdown:  ld      hl,(InnerHyperCount)
 109+ 7662 2D                                   dec     l
 110+ 7663 20 26                                jr      nz,.decHyperInnerOnly
 111+ 7665 25                                   dec     h
 112+ 7666 FA 8F 76                             jp      m,.HyperCountDone
 113+ 7669 2E 0B        .resetHyperInner:       ld      l,$0B
 114+ 766B E5                                   push    hl
 115+ 766C 16 0C                                ld      d,12
 116+ 766E 3E 06                                ld      a,L1ColourPaperBlack | L1ColourInkYellow
 117+ 7670 CD 8B E0                             call    l1_attr_cls_2DlinesA
 118+ 7673 16 60                                ld      d,12 * 8
 119+ 7675 CD 74 E0                             call    l1_cls_2_lines_d
 120+ 7678 11 00 60                             ld      de,$6000
 121+ 767B 21 2F 69                             ld      hl,Hyp_centeredTarget
 122+ 767E CD C8 E0                             call    l1_print_at
 123+ 7681 11 00 68                             ld      de,$6800
 124+ 7684 21 70 69                             ld      hl,Hyp_centeredCharging
 125+ 7687 CD C8 E0                             call    l1_print_at
 126+ 768A E1                                   pop     hl
 127+ 768B 22 D9 81     .decHyperInnerOnly:     ld      (InnerHyperCount),hl
 128+ 768E C9                                   ret
 129+ 768F 21 00 00     .HyperCountDone:        ld      hl,0
 130+ 7692 22 D9 81                             ld      (InnerHyperCount),hl
 131+ 7695 16 0C                                ld      d,12
 132+ 7697 3E 00                                ld      a,L1ColourPaperBlack | L1ColourInkBlack
 133+ 7699 CD 8B E0                             call    l1_attr_cls_2DlinesA
 134+ 769C 16 60                                ld      d,12 * 8
 135+ 769E CD 74 E0                             call    l1_cls_2_lines_d
 136+ 76A1                                      ForceTransition ScreenHyperspace                            ; transition to hyperspace
 136+ 76A1 3E 0E       >                        ld      a,ScreenHyperspace
 136+ 76A3 32 86 6B    >                        ld      (ScreenTransitionForced), a
 137+ 76A6 C9                                   ret
 138+ 76A7
# file closed: ./Tables/message_queue.asm
 489  76A7                          INCLUDE "./Tables/LaserStatsTable.asm"
# file opened: ./Tables/LaserStatsTable.asm
   1+ 76A7              ; LaserTypeTable
   2+ 76A7              ; laser type = id of laser
   3+ 76A7              ; laser pulse pause = time before next pulse
   4+ 76A7              ; laser pulse duration = time laser is on per shot
   5+ 76A7              ; laser damage output
   6+ 76A7              ;
   7+ 76A7              ; LaserType
   8+ 76A7              ; LaserPulseRate                          ; how many pulses can be fired before long pause
   9+ 76A7              ; LaserPulseOnTime                        ; cycles laser is on for
  10+ 76A7              ; LaserPulseOffTime                       ; cycles laser is off for
  11+ 76A7              ; LaserPulseRest                          ; time before pulse count resets to 0 (i.e cooldown)
  12+ 76A7              ; LaserDamageOutput                       ; amount of damage for a laser hit
  13+ 76A7              ; LaserEnergyDrain                        ; amount of energy drained by cycle
  14+ 76A7              ; LaserHeat                               ; amount of heat generated
  15+ 76A7              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
  16+ 76A7              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
  17+ 76A7              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
  18+ 76A7              ; LaserTechLevel                          ; minimum tech level system to buy from
  19+ 76A7              ;
  20+ 76A7              LaserStatsTableWidth    EQU 12
  21+ 76A7              ;                           0    1    2    3    4    5    6    7    8    9   10   11
  22+ 76A7              ;                          Typ  Rate On   Off  Rst  Dam  Drn  Het  Dur  DAt  Mrk  Tek
  23+ 76A7 00 02 05 20  LaserStatsTable:        DB $00, $02, $05, $20, $40, $03, $10, $02, $20 ,$10 ,$00, $00; basic laser
  23+ 76AB 40 03 10 02
  23+ 76AF 20 10 00 00
  24+ 76B3 01 01 08 08                          DB $01, $01, $08, $08, $20, $03, $10, $08, $20 ,$10 ,$00, $01; pulse laser
  24+ 76B7 20 03 10 08
  24+ 76BB 20 10 00 01
  25+ 76BF 02 06 08 03                          DB $02, $06, $08, $03, $3A, $03, $10, $02, $20 ,$10 ,$00, $02; burst laser TODO THIS ONE IS ODD
  25+ 76C3 3A 03 10 02
  25+ 76C7 20 10 00 02
  26+ 76CB 03 11 06 04                          DB $03, $11, $06, $04, $50, $02, $10, $05, $30 ,$10 ,$00, $03; Gatling laser
  26+ 76CF 50 02 10 05
  26+ 76D3 30 10 00 03
  27+ 76D7 04 00 01 00                          DB $04, $00, $01, $00, $03, $03, $03, $10, $20 ,$10 ,$00, $04; beam ; DOES NOT WORK
  27+ 76DB 03 03 03 10
  27+ 76DF 20 10 00 04
  28+ 76E3 05 01 20 30                          DB $05, $01, $20, $30, $60, $03, $02, $02, $20 ,$10 ,$00, $05; mining
  28+ 76E7 60 03 02 02
  28+ 76EB 20 10 00 05
  29+ 76EF 06 00 01 00                          DB $06, $00, $01, $00, $06, $05, $05, $05, $10 ,$10 ,$00, $08; military beam DOES NOT WORK
  29+ 76F3 06 05 05 05
  29+ 76F7 10 10 00 08
  30+ 76FB 07 01 01 02                          DB $07, $01, $01, $02, $20, $22, $01, $30, $30 ,$11 ,$01, $10; thargoid
  30+ 76FF 20 22 01 30
  30+ 7703 30 11 01 10
  31+ 7707 08 01 05 10                          DB $08, $01, $05, $10, $80, $70, $02, $03, $60 ,$11 ,$01, $10; Starkiller
  31+ 770B 80 70 02 03
  31+ 770F 60 11 01 10
  32+ 7713
  33+ 7713
  34+ 7713
  35+ 7713
  36+ 7713
  37+ 7713
  38+ 7713
# file closed: ./Tables/LaserStatsTable.asm
 490  7713                          INCLUDE "./Tables/ShipClassTable.asm"
# file opened: ./Tables/ShipClassTable.asm
   1+ 7713 00           ShipBodiesTable:        DB  $ - ShipBodiesTable
   2+ 7714 23 18 16 00  ShipPackList:           DB  ShipID_Sidewinder, ShipID_Mamba, ShipID_Krait, ShipID_Adder, ShipID_Gecko, ShipID_Cobra_Mk_1, ShipID_Worm, ShipID_Cobra_Mk_3_P
   2+ 7718 13 0A 2A 0B
   3+ 771C              ShipPackTableSize       EQU $ - ShipPackList
   4+ 771C 0B 02 1F 12  ShipHunterTable         DB  ShipID_Cobra_Mk_3_P, ShipID_Asp_Mk_2, ShipID_Python_P, ShipID_Fer_De_Lance
   5+ 7720              ShipHunterTableSize     EQU $ - ShipHunterTable
   6+ 7720 19           ShipMissileTable        DB  ShipID_Missile
   7+ 7721              ShipMissileTableSize    EQU $ - ShipMissileTable
# file closed: ./Tables/ShipClassTable.asm
 491  7721
 492  7721 AF           SeedGalaxy0:            xor     a
 493  7722                                      MMUSelectGalaxyA
 493  7722 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 494  7725 DD 21 16 E0                          ld      ix,galaxy_data
 495  7729 AF                                   xor		a
 496  772A 32 16 81                             ld		(XSAV),a
 497  772D CD 05 87                             call    copy_galaxy_to_system
 498  7730 DD E5        SeedGalaxy0Loop:        push    ix
 499  7732 D1                                   pop     de
 500  7733 21 FD 80                             ld      hl,SystemSeed
 501  7736 CD 0B 87                             call    copy_seed
 502  7739 DD E5                                push    ix
 503  773B E1                                   pop     hl
 504  773C ED 34 08 00                          add     hl,8
 505  7740 E5                                   push    hl
 506  7741 DD E1                                pop     ix
 507  7743 CD 40 87                             call    next_system_seed
 508  7746 3A 16 81                             ld		a,(XSAV)
 509  7749 3D                                   dec		a
 510  774A FE 00                                cp		0
 511  774C C8                                   ret		z
 512  774D 32 16 81                             ld		(XSAV),a
 513  7750 20 DE                                jr      nz,SeedGalaxy0Loop
 514  7752 C9                                   ret
 515  7753
 516  7753
 517  7753
 518  7753
 519  7753                  ;include "./ModelRender/testdrawing.asm"
 520  7753                  include "./Menus/AttractMode.asm"
# file opened: ./Menus/AttractMode.asm
   1+ 7753              AttractDuration             EQU $00F0
   2+ 7753              AttractCounterStart         EQU $80
   3+ 7753 F0 00        AttractTimer:              DW      AttractDuration
   4+ 7755 80           AttractCounter:            DB      AttractCounterStart
   5+ 7756
   6+ 7756 3D 08        Attract_boiler_text		DW $083D
   7+ 7758
   8+ 7758
   9+ 7758 4C 6F 61 64  ATTR_LoadCommander      DB "Load Commander (Y/N)",0
   9+ 775C 20 43 6F 6D
   9+ 7760 6D 61 6E 64
   9+ 7764 65 72 20 28
   9+ 7768 59 2F 4E 29
   9+ 776C 00
  10+ 776D
  11+ 776D              AttractMode:            MMUSelectLayer1
  11+ 776D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  12+ 7771 CD 80 E0                             call	l1_cls
  13+ 7774 3E 07                                ld		a,7
  14+ 7776 CD 9B E0                             call	l1_attr_cls_to_a
  15+ 7779 1E FF                                ld      e,$FF
  16+ 777B ED 5B 56 77                          ld      de,(Attract_boiler_text)
  17+ 777F 21 58 77                             ld      hl,ATTR_LoadCommander
  18+ 7782 CD C8 E0                             call    l1_print_at
  19+ 7785                                      MMUSelectSpriteBank
  19+ 7785 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  20+ 7789 CD 6E E5                             call        sprite_cls_cursors
  21+ 778C CD F4 E0                             call    l2_cls_lower_third
  22+ 778F                                      MMUSelectConsoleBank
  22+ 778F ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  23+ 7793 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  24+ 7796 11 00 E0                             ld          de,ConsoleImageData
  25+ 7799 01 00 08                             ld          bc, ScreenL1BottomLen
  26+ 779C CD C9 7C                             call        memcopy_dma
  27+ 779F 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  28+ 77A2 11 00 E8                             ld          de,ConsoleAttributes
  29+ 77A5 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  30+ 77A8 CD C9 7C                             call        memcopy_dma
  31+ 77AB                                      MMUSelectLayer2
  31+ 77AB ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  32+ 77AF CD 03 E0                             call    asm_l2_double_buffer_on
  33+ 77B2 CD 1E 78     .StartShip:             call    SelectARandomShip
  34+ 77B5 CD AD 7D     .DrawLoop:              call    scan_keyboard
  35+ 77B8 3E 50                                ld      a,c_Pressed_Yes
  36+ 77BA CD FB 7D                             call    is_key_up_state
  37+ 77BD 20 57                                jr      nz,.YPressed
  38+ 77BF 3E 52                                ld      a,c_Pressed_No
  39+ 77C1 CD FB 7D                             call    is_key_up_state
  40+ 77C4 20 53                                jr      nz,.NPressed
  41+ 77C6                                      MMUSelectUniverseN  1
  41+ 77C6 ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
  42+ 77CA CD 42 D8                             call    ApplyShipRollAndPitch
  43+ 77CD                                   ;   xor     a
  44+ 77CD                                   ;  ld      (UBnKRotXCounter),a
  45+ 77CD                                   ;  ld      (UBnKRotZCounter),a
  46+ 77CD              .ProcessUnivShip:       MMUSelectLayer2
  46+ 77CD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  47+ 77D1 CD DF E0                             call   l2_cls_upper_two_thirds
  48+ 77D4 CD EF D9                             call    ProcessShip
  49+ 77D7 01 01 01     .Drawbox:               ld		bc,$0101
  50+ 77DA 11 FD 7F                             ld		de,$7FFD
  51+ 77DD 3E C0                                ld		a,$C0
  52+ 77DF                                      MMUSelectLayer2
  52+ 77DF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  53+ 77E3 CD 49 E2                             call	l2_draw_box
  54+ 77E6 CD 13 E1     .DoubleBuffer:          call    l2_flip_buffers
  55+ 77E9 3A 55 77                             ld      a,(AttractCounter)
  56+ 77EC                                      JumpIfAIsZero .SameShipPosition
  56+ 77EC A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  56+ 77ED CA 02 78    >                        jp	    z, .SameShipPosition
  57+ 77F0 3D                                   dec     a
  58+ 77F1 32 55 77                             ld      (AttractCounter),a
  59+ 77F4 2A 16 C0                             ld      hl, (UBnKzlo)
  60+ 77F7 11 08 00     .UpdatePos:             ld      de, $0008
  61+ 77FA ED 52                                sbc     hl,de
  62+ 77FC 22 16 C0                             ld      (UBnKzlo),hl
  63+ 77FF CD B2 86                             call    doRandom
  64+ 7802 2A 53 77     .SameShipPosition:      ld      hl,(AttractTimer)
  65+ 7805 2B                                   dec     hl
  66+ 7806 22 53 77                             ld      (AttractTimer),hl
  67+ 7809 7C                                   ld      a,h
  68+ 780A B5                                   or      l
  69+ 780B 20 A8                                jr      nz,.DrawLoop
  70+ 780D 21 F0 00     .NewShip:               ld      hl,AttractDuration
  71+ 7810 22 53 77                             ld      (AttractTimer),hl
  72+ 7813 C3 B2 77                             jp      .StartShip
  73+ 7816 3E 00        .YPressed:              ld      a,0
  74+ 7818 C9                                   ret
  75+ 7819 3E FF        .NPressed:              ld      a,$FF
  76+ 781B C9                                   ret
  77+ 781C DD 01        .ExitAttractMode:       break
  78+ 781E
  79+ 781E 06 01        SelectARandomShip:      ld      b,1                             ; Demo screen uses slot 1
  80+ 7820                                      MMUSelectUniverseN  1
  80+ 7820 ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
  81+ 7824                                      MMUSelectShipBank1
  81+ 7824 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
  82+ 7828 FD 26 01                             ld      iyh, 1
  83+ 782B CD B2 86     .SelectRandom:          call    doRandom
  84+ 782E                                      JumpIfAGTENusng ShipID_Rattler+1, .SelectRandom
  84+ 782E FE 2C       >                        cp     ShipID_Rattler+1
  84+ 7830 D2 2B 78    >                        jp		nc,.SelectRandom
  85+ 7833 FD 6F                                ld      iyl,a
  86+ 7835 CD 0F E0                             call    GetShipBankId                       ; find actual memory location of data
  87+ 7838                                      MMUSelectShipBankA
  87+ 7838 ED 92 57    >					 nextreg ShipModelMMU,	    a
  88+ 783B 78                                   ld      a,b
  89+ 783C CD 6A E0                             call    CopyShipToUniverse
  90+ 783F 3A 31 C3                             ld      a,(ShipTypeAddr)
  91+ 7842 CB 7F                                bit     7,a                                 ; is it a type we don't want in attract mode
  92+ 7844 20 E5                                jr      nz,.SelectRandom
  93+ 7846 3E 01                                ld      a,1                                 ; slot 1, iyh and iyl already set
  94+ 7848 CD F2 C6                             call    UnivInitRuntime
  95+ 784B CD 04 C6                             call    UnivSetDemoPostion
  96+ 784E 21 F0 00                             ld      hl,AttractDuration
  97+ 7851 22 53 77                             ld      (AttractTimer),hl
  98+ 7854 3E 80                                ld      a, AttractCounterStart
  99+ 7856 32 55 77                             ld      (AttractCounter),a
 100+ 7859 C9                                   ret
 101+ 785A
 102+ 785A
 103+ 785A
# file closed: ./Menus/AttractMode.asm
 521  785A
 522  785A                  include "./Maths/Utilities/XX12EquNodeDotOrientation.asm"
# file opened: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
   1+ 785A              ; We enter here with hl pointing at XX16 and bc = XX15 value
   2+ 785A              ; so xx12 = XX15 * XX16 row
   3+ 785A              XX12ProcessOneRow:
   4+ 785A              XX12CalcXCell:
   5+ 785A ED 4B 92 C0          ld		bc,(UBnkXScaled)
   6+ 785E 5E           		ld		e,(hl)								    ; get orientation ZX
   7+ 785F 23           		inc		hl
   8+ 7860 56           		ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
   9+ 7861 7A           		ld		a,d
  10+ 7862 A8                   xor     b
  11+ 7863 E6 80        		and		SignOnly8Bit                            ; a = XX 16 sign
  12+ 7865 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  13+ 7867 78           		ld		a,b                                     ; now make bc abs bc
  14+ 7868 E6 7F        		and		SignMask8Bit
  15+ 786A 47           		ld		b,a                                     ; bc = abs(bc) now
  16+ 786B E5           		push	hl
  17+ 786C 16 00                ld      d,0                                     ; d = value
  18+ 786E 60           		ld		h,b
  19+ 786F 69           		ld		l,c
  20+ 7870 CD E2 92     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  21+ 7873 22 E4 7C     		ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
  22+ 7876 DD 7C        		ld		a,ixh
  23+ 7878 32 EB 7C     		ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
  24+ 787B E1           		pop		hl
  25+ 787C              XX12CalcYCell:
  26+ 787C ED 4B 94 C0          ld		bc,(UBnkYScaled)
  27+ 7880 23           		inc		hl
  28+ 7881 5E           		ld		e,(hl)							    	; get orientation ZX
  29+ 7882 23           		inc		hl
  30+ 7883 56           		ld		d,(hl)
  31+ 7884 7A           		ld		a,d
  32+ 7885 A8                   xor     b
  33+ 7886 E6 80        		and		SignOnly8Bit
  34+ 7888 DD 67        		ld		ixh,a								    ; XX16 orientation sign to ixh
  35+ 788A 78           		ld		a,b                                     ; now make bc abs bc
  36+ 788B E6 7F        		and		SignMask8Bit
  37+ 788D 47           		ld		b,a                                     ; bc = abs(bc) now
  38+ 788E E5           		push	hl
  39+ 788F 16 00                ld      d,0                                     ; d = value
  40+ 7891 60           		ld		h,b
  41+ 7892 69           		ld		l,c
  42+ 7893 CD E2 92     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  43+ 7896 22 E6 7C     		ld		(XX12PVarResult2),hl				    ; T = 16 bit result
  44+ 7899 DD 7C        		ld		a,ixh
  45+ 789B 32 EA 7C     		ld		(XX12PVarSign2),a					    ; S = sign
  46+ 789E E1           		pop		hl
  47+ 789F              XX12CalcZCell:
  48+ 789F ED 4B 96 C0          ld		bc,(UBnkZScaled)
  49+ 78A3 23           		inc		hl
  50+ 78A4 5E           		ld		e,(hl)								    ; get orientation ZX
  51+ 78A5 23           		inc		hl
  52+ 78A6 56           		ld		d,(hl)
  53+ 78A7 7A           		ld		a,d
  54+ 78A8 A8                   xor     b
  55+ 78A9 E6 80        		and		SignOnly8Bit
  56+ 78AB DD 67        		ld		ixh,a								    ; orientation sign to ixh
  57+ 78AD 78           		ld		a,b                                     ; now make bc abs bc
  58+ 78AE E6 7F        		and		SignMask8Bit
  59+ 78B0 47           		ld		b,a                                     ; bc = abs(bc) now
  60+ 78B1 16 00                ld      d,0                                     ; d = value
  61+ 78B3 60           		ld		h,b
  62+ 78B4 69           		ld		l,c
  63+ 78B5 CD E2 92     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  64+ 78B8 22 E8 7C     		ld		(XX12PVarResult3),hl				    ; T = 16 bit result
  65+ 78BB DD 7C        		ld		a,ixh
  66+ 78BD 32 EC 7C     		ld		(XX12PVarSign3),a					    ; S = sign
  67+ 78C0              XX12CalcCellResult:
  68+ 78C0 2A E4 7C     		ld		hl,(XX12PVarResult1)				    ; X Cell Result
  69+ 78C3 ED 5B E6 7C  		ld		de,(XX12PVarResult2)				    ; Y Cell Result
  70+ 78C7 ED 4B EA 7C  		ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
  71+ 78CB              XX12MSBOnly:
  72+ 78CB 6C           		ld		l,h									    ; now move results into lower byte so / 256
  73+ 78CC 5A           		ld		e,d									    ; for both results
  74+ 78CD AF           		xor		a									    ;
  75+ 78CE 67           		ld		h,a									    ;
  76+ 78CF 57           		ld		d,a									    ; so set high byte to 0
  77+ 78D0 CD B1 8F     		call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
  78+ 78D3 47           		ld		b,a									    ; move sign into b ready for next calc
  79+ 78D4 3A EC 7C     		ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
  80+ 78D7 4F           		ld		c,a									    ; goes into c to align with DE
  81+ 78D8 ED 5B E8 7C  		ld		de,(XX12PVarResult3)				    ; now add result to Result 3
  82+ 78DC 5A           		ld		e,d                                     ; d = result /256
  83+ 78DD 16 00        		ld		d,0									    ; and only us high byte
  84+ 78DF CD B1 8F     		call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
  85+ 78E2 C9           		ret											    ; hl = result, a = sign
  86+ 78E3              								    ; hl = result, a = sign
  87+ 78E3
  88+ 78E3              XX12EquNodeDotTransMat:							    ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
  89+ 78E3              ;...X cell
  90+ 78E3 21 65 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
  91+ 78E6 CD 5A 78             call    XX12ProcessOneRow                   ; hl = result, a = sign
  92+ 78E9 47           		ld		b,a                                 ; b = sign
  93+ 78EA 7C           		ld		a,h                                 ; a = high byte
  94+ 78EB B0           		or		b
  95+ 78EC 32 99 C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
  96+ 78EF 7D           		ld		a,l                                 ; the result will be in the lower byte now
  97+ 78F0 32 98 C0             ld      (UBnkXX12xLo),a						; that is result done for
  98+ 78F3              ;...Y cell
  99+ 78F3 21 6D C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 100+ 78F6 CD 5A 78             call    XX12ProcessOneRow
 101+ 78F9 47           		ld		b,a
 102+ 78FA 7C           		ld		a,h
 103+ 78FB              ;		ld		a,l
 104+ 78FB B0           		or		b
 105+ 78FC 32 9B C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 106+ 78FF 7D           		ld		a,l                                 ; the result will be in the lower byte now
 107+ 7900 32 9A C0             ld      (UBnkXX12yLo),a						; that is result done for
 108+ 7903              ;...Z cell
 109+ 7903 21 75 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 110+ 7906 CD 5A 78             call    XX12ProcessOneRow
 111+ 7909 47           		ld		b,a
 112+ 790A 7C                   ld		a,h
 113+ 790B              ;		ld		a,l
 114+ 790B B0           		or		b
 115+ 790C 32 9D C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 116+ 790F 7D           		ld		a,l                                 ; the result will be in the lower byte now
 117+ 7910 32 9C C0             ld      (UBnkXX12zLo),a						; that is result done for
 118+ 7913 C9                   ret
 119+ 7914
 120+ 7914              XX12EquNodeDotOrientation:							; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 121+ 7914              ;...X cell
 122+ 7914 21 65 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
 123+ 7917 CD 5A 78             call    XX12ProcessOneRow                   ; hl = result, a = sign
 124+ 791A 47           		ld		b,a                                 ; b = sign
 125+ 791B 7C           		ld		a,h                                 ; a = high byte
 126+ 791C B0           		or		b
 127+ 791D 32 99 C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 128+ 7920 7D           		ld		a,l                                 ; the result will be in the lower byte now
 129+ 7921 32 98 C0             ld      (UBnkXX12xLo),a						; that is result done for
 130+ 7924              ;...Y cell
 131+ 7924 21 6D C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 132+ 7927 CD 5A 78             call    XX12ProcessOneRow
 133+ 792A 47           		ld		b,a
 134+ 792B 7C           		ld		a,h
 135+ 792C              ;		ld		a,l
 136+ 792C B0           		or		b
 137+ 792D 32 9B C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 138+ 7930 7D           		ld		a,l                                 ; the result will be in the lower byte now
 139+ 7931 32 9A C0             ld      (UBnkXX12yLo),a						; that is result done for
 140+ 7934              ;...Z cell
 141+ 7934 21 75 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 142+ 7937 CD 5A 78             call    XX12ProcessOneRow
 143+ 793A 47           		ld		b,a
 144+ 793B 7C                   ld		a,h
 145+ 793C              ;		ld		a,l
 146+ 793C B0           		or		b
 147+ 793D 32 9D C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 148+ 7940 7D           		ld		a,l                                 ; the result will be in the lower byte now
 149+ 7941 32 9C C0             ld      (UBnkXX12zLo),a						; that is result done for
 150+ 7944 C9                   ret
 151+ 7945
 152+ 7945              XX12EquNodeDotXX16:					         		; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 153+ 7945              ;...X cell
 154+ 7945 21 4D C0     		ld		hl,UBnkTransmatSidevX     			; process orientation matrix row 0
 155+ 7948 CD 5A 78             call    XX12ProcessOneRow                   ; hl = result, a = sign
 156+ 794B 47           		ld		b,a                                 ; b = sign
 157+ 794C 7C           		ld		a,h                                 ; a = high byte
 158+ 794D B0           		or		b
 159+ 794E 32 99 C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 160+ 7951 7D           		ld		a,l                                 ; the result will be in the lower byte now
 161+ 7952 32 98 C0             ld      (UBnkXX12xLo),a						; that is result done for
 162+ 7955              ;...Y cell
 163+ 7955 21 53 C0     		ld		hl,UBnkTransmatRoofvX     			; process orientation matrix row 1
 164+ 7958 CD 5A 78             call    XX12ProcessOneRow
 165+ 795B 47           		ld		b,a
 166+ 795C 7C           		ld		a,h
 167+ 795D              ;		ld		a,l
 168+ 795D B0           		or		b
 169+ 795E 32 9B C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 170+ 7961 7D           		ld		a,l                                 ; the result will be in the lower byte now
 171+ 7962 32 9A C0             ld      (UBnkXX12yLo),a						; that is result done for
 172+ 7965              ;...Z cell
 173+ 7965 21 59 C0     		ld		hl,UBnkTransmatNosevX     			; process orientation matrix row 1
 174+ 7968 CD 5A 78             call    XX12ProcessOneRow
 175+ 796B 47           		ld		b,a
 176+ 796C 7C                   ld		a,h
 177+ 796D              ;		ld		a,l
 178+ 796D B0           		or		b
 179+ 796E 32 9D C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 180+ 7971 7D           		ld		a,l                                 ; the result will be in the lower byte now
 181+ 7972 32 9C C0             ld      (UBnkXX12zLo),a						; that is result done for
 182+ 7975 C9                   ret
# file closed: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
 523  7976                  include "./ModelRender/CopyXX12ToXX15.asm"
# file opened: ./ModelRender/CopyXX12ToXX15.asm
   1+ 7976 21 98 C0     CopyXX12ToXX15:         ld      hl,XX12
   2+ 7979 11 92 C0                             ld      de,XX15
   3+ 797C 01 06 00                             ld      bc,6
   4+ 797F ED B0                                ldir
   5+ 7981 C9                                   ret
   6+ 7982
   7+ 7982 21 98 C0     CopyXX12ToXX12Save:     ld      hl,XX12
   8+ 7985 11 9E C0                             ld      de,XX12Save
   9+ 7988 01 06 00                             ld      bc,6
  10+ 798B ED B0                                ldir
  11+ 798D C9                                   ret
  12+ 798E
  13+ 798E 21 9E C0     CopyXX12SaveToXX12:     ld      hl,XX12Save
  14+ 7991 11 98 C0                             ld      de,XX12
  15+ 7994 01 06 00                             ld      bc,6
  16+ 7997 ED B0                                ldir
  17+ 7999 C9                                   ret
  18+ 799A
  19+ 799A 21 98 C0     CopyXX12ToXX12Save2:    ld      hl,XX12
  20+ 799D 11 A4 C0                             ld      de,XX12Save2
  21+ 79A0 01 06 00                             ld      bc,6
  22+ 79A3 ED B0                                ldir
  23+ 79A5 C9                                   ret
  24+ 79A6
  25+ 79A6 21 A4 C0     CopyXX12Save2ToXX12:    ld      hl,XX12Save2
  26+ 79A9 11 98 C0                             ld      de,XX12
  27+ 79AC 01 06 00                             ld      bc,6
  28+ 79AF ED B0                                ldir
  29+ 79B1 C9                                   ret
  30+ 79B2
# file closed: ./ModelRender/CopyXX12ToXX15.asm
 524  79B2                  include "./ModelRender/CopyXX15ToXX12.asm"
# file opened: ./ModelRender/CopyXX15ToXX12.asm
   1+ 79B2 21 92 C0     CopyXX15ToXX12:         ld		hl,XX15
   2+ 79B5 11 98 C0                             ld      de,XX12
   3+ 79B8 01 06 00                             ld      bc,6
   4+ 79BB ED B0                                ldir
   5+ 79BD C9                                   ret
   6+ 79BE
   7+ 79BE
   8+ 79BE
   9+ 79BE 21 92 C0     CopyXX15ToXX15Save:     ld		hl,XX15
  10+ 79C1 11 AD C0                             ld      de,XX15Save
  11+ 79C4 01 06 00                             ld      bc,6
  12+ 79C7 ED B0                                ldir
  13+ 79C9 C9                                   ret
  14+ 79CA
  15+ 79CA 21 AD C0     CopyXX15SaveToXX15:     ld		hl,XX15Save
  16+ 79CD 11 92 C0                             ld      de,XX15
  17+ 79D0 01 06 00                             ld      bc,6
  18+ 79D3 ED B0                                ldir
  19+ 79D5 C9                                   ret
  20+ 79D6
  21+ 79D6 21 92 C0     CopyXX15ToXX15Save2:    ld		hl,XX15
  22+ 79D9 11 B5 C0                             ld      de,XX15Save2
  23+ 79DC 01 06 00                             ld      bc,6
  24+ 79DF ED B0                                ldir
  25+ 79E1 C9                                   ret
  26+ 79E2
  27+ 79E2 21 B5 C0     CopyXX15Save2ToXX15:    ld		hl,XX15Save2
  28+ 79E5 11 92 C0                             ld      de,XX15
  29+ 79E8 01 06 00                             ld      bc,6
  30+ 79EB ED B0                                ldir
  31+ 79ED C9                                   ret
  32+ 79EE
# file closed: ./ModelRender/CopyXX15ToXX12.asm
 525  79EE                  include "./Maths/Utilities/ScaleXX16Matrix197.asm"
# file opened: ./Maths/Utilities/ScaleXX16Matrix197.asm
   1+ 79EE              ScaleXX16Matrix197:
   2+ 79EE                      IFDEF LOGMATHS
   3+ 79EE ~                                    ld		b,9                 ; Interate though all 9 matrix elements
   4+ 79EE ~                                    ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
   5+ 79EE ~                                    MMUSelectMathsTables
   6+ 79EE ~            .ScaleXX16Loop:         ld		e,(hl)              ; set DE = matrix value              ;
   7+ 79EE ~                                    inc		hl                  ;
   8+ 79EE ~                                    ld		a,(hl)              ;
   9+ 79EE ~                                    ld		d,a                 ;
  10+ 79EE ~                                    and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  11+ 79EE ~                                    ld		ixl,a				; retain for sign bit
  12+ 79EE ~                                    ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  13+ 79EE ~                                    ld      a,d                 ; a = high byte after x 2
  14+ 79EE ~                                    push	bc                  ; save BC  counter and constant 197
  15+ 79EE ~                                    push	hl                  ; save HL
  16+ 79EE ~                                    call    AEquAmul256Div197Log;
  17+ 79EE ~                                    pop		hl
  18+ 79EE ~                                    dec     hl                  ; move back to low byte
  19+ 79EE ~                                    ld      (hl),a              ; save result in low byte as we want to preserve high byte sign
  20+ 79EE ~                                    inc     hl                  ; move back to high byte
  21+ 79EE ~                                    ld      a,ixl
  22+ 79EE ~                                    ld      (hl),a              ; write back just sign bit
  23+ 79EE ~                                    pop		bc                  ; retrieve both counter and constant 197
  24+ 79EE ~                                    inc     hl                  ; no to next vertex value
  25+ 79EE ~                                    djnz	.ScaleXX16Loop
  26+ 79EE ~                                    MMUSelectROM0
  27+ 79EE ~                                    ret
  28+ 79EE                      ELSE
  29+ 79EE 06 09                                ld		b,9                 ; Interate though all 9 matrix elements
  30+ 79F0 0E C5                                ld		c,ConstNorm         ; c = 197
  31+ 79F2 21 4D C0                             ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
  32+ 79F5 7E           .ScaleXX16Loop:         ld		a,(hl)              ; set DE = matrix value
  33+ 79F6 5F                                   ld		e,a                 ;
  34+ 79F7 23                                   inc		hl                  ;
  35+ 79F8 7E                                   ld		a,(hl)              ;
  36+ 79F9 57                                   ld		d,a                 ;
  37+ 79FA E6 80                                and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  38+ 79FC DD 6F                                ld		ixl,a				; retain for sign bit
  39+ 79FE                                      ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  39+ 79FE CB 23       >			   sla e
  39+ 7A00 CB 12       >			   rl  d
  40+ 7A02 7A                                   ld      a,d                 ; a = high byte after x 2
  41+ 7A03 C5                                   push	bc                  ; save BC  counter and constant 197
  42+ 7A04 E5                                   push	hl                  ; save HL
  43+ 7A05 CD FB 94                             call	DIV16Amul256dCUNDOC; AEquAmul256DivD; DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
  44+ 7A08 E1                                   pop		hl
  45+ 7A09 2B                                   dec     hl                  ; move back to low byte
  46+ 7A0A 71                                   ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
  47+ 7A0B 23                                   inc     hl                  ; move back to high byte
  48+ 7A0C                                  ;    ld      a,(hl)
  49+ 7A0C                                  ;    and     $80
  50+ 7A0C DD 7D                                ld      a,ixl
  51+ 7A0E 77                                   ld      (hl),a              ; write back just sign bit
  52+ 7A0F C1                                   pop		bc                  ; retrieve both counter and constant 197
  53+ 7A10 23                                   inc     hl                  ; no to next vertex value
  54+ 7A11 10 E2                                djnz	.ScaleXX16Loop
  55+ 7A13 C9                                   ret
  56+ 7A14                      ENDIF
# file closed: ./Maths/Utilities/ScaleXX16Matrix197.asm
 526  7A14
 527  7A14                  include "./Universe/StarDust/StarRoutines.asm"
# file opened: ./Universe/StarDust/StarRoutines.asm
   1+ 7A14              ;note: DIV16Amul256dCUNDOC as per
   2+ 7A14              ;                                   BC = A0
   3+ 7A14              ;                                   DE = 0C
   4+ 7A14              ;                                   so BC = a * 256 / C
   5+ 7A14
   6+ 7A14              ; We can cheat here, Speed is always 0 or positive
   7+ 7A14              ; z postion will always be positive if we can see it
   8+ 7A14
   9+ 7A14 EB           InitStarAtHL:           ex      de,hl               ; preserving hl
  10+ 7A15 CD B2 86                             call    doRND               ; a = random OR bit 5
  11+ 7A18 EB                                   ex      de,hl               ; .
  12+ 7A19 F6 08                                or      8                   ; .
  13+ 7A1B 77                                   ld      (hl),a              ; save to x pos
  14+ 7A1C E6 7F                                and     $7F                 ; a = abs a
  15+ 7A1E 23                                   inc     hl                  ;
  16+ 7A1F 77                                   ld      (hl),a              ;
  17+ 7A20 EB                                   ex      de,hl               ; preserving hl
  18+ 7A21 CD B2 86                             call    doRND               ; a = -ve (random / 2)
  19+ 7A24 EB                                   ex      de,hl               ; .
  20+ 7A25 0F                                   rrca                        ; .
  21+ 7A26 E6 80                                and     $80                 ; .
  22+ 7A28 B6                                   or      (hl)                ; or with
  23+ 7A29 77                                   ld      (hl),a
  24+ 7A2A 23                                   inc     hl
  25+ 7A2B EB                                   ex      de,hl
  26+ 7A2C CD B2 86                             call    doRND
  27+ 7A2F EB                                   ex      de,hl
  28+ 7A30 F6 04                                or      4
  29+ 7A32 77                                   ld      (hl),a
  30+ 7A33 23                                   inc     hl
  31+ 7A34 E6 7F                                and     $7F
  32+ 7A36 77                                   ld      (hl),a
  33+ 7A37 EB                                   ex      de,hl
  34+ 7A38 CD B2 86                             call    doRND
  35+ 7A3B EB                                   ex      de,hl
  36+ 7A3C 0F                                   rrca
  37+ 7A3D E6 80                                and     $80
  38+ 7A3F B6                                   or      (hl)
  39+ 7A40 77                                   ld      (hl),a
  40+ 7A41 23                                   inc     hl
  41+ 7A42 EB                                   ex      de,hl
  42+ 7A43 CD B2 86                             call    doRND
  43+ 7A46 EB                                   ex      de,hl
  44+ 7A47 F6 90                                or      144
  45+ 7A49 77                                   ld      (hl),a
  46+ 7A4A 23                                   inc     hl
  47+ 7A4B F6 70                                or      %01110000
  48+ 7A4D E6 7F                                and     $7f     ; bodge
  49+ 7A4F 77                                   ld      (hl),a
  50+ 7A50 23                                   inc     hl
  51+ 7A51 C9                                   ret
  52+ 7A52
  53+ 7A52 EB           InitHyperStarAtHL:      ex      de,hl
  54+ 7A53 CD B2 86                             call    doRND
  55+ 7A56 CB 27                                sla     a
  56+ 7A58 CB 27                                sla     a                ; so its * 4 as we have a blank spot
  57+ 7A5A EB                                   ex      de,hl
  58+ 7A5B E6 F8                                and     %11111000
  59+ 7A5D 77                                   ld      (hl),a
  60+ 7A5E E6 7F                                and     $7F
  61+ 7A60 23                                   inc     hl
  62+ 7A61 77                                   ld      (hl),a
  63+ 7A62 EB                                   ex      de,hl
  64+ 7A63 CD B2 86                             call    doRND
  65+ 7A66 EB                                   ex      de,hl
  66+ 7A67 0F                                   rrca
  67+ 7A68 E6 80                                and     $80
  68+ 7A6A B6                                   or      (hl)
  69+ 7A6B 77                                   ld      (hl),a
  70+ 7A6C 23                                   inc     hl
  71+ 7A6D EB                                   ex      de,hl
  72+ 7A6E CD B2 86                             call    doRND
  73+ 7A71 CB 27                                sla     a
  74+ 7A73 CB 27                                sla     a               ; so its * 4 as we have a blank spot
  75+ 7A75 EB                                   ex      de,hl
  76+ 7A76 E6 F8                                and     %11111000
  77+ 7A78 77                                   ld      (hl),a
  78+ 7A79 23                                   inc     hl
  79+ 7A7A E6 7F                                and     $7F
  80+ 7A7C 77                                   ld      (hl),a
  81+ 7A7D EB                                   ex      de,hl
  82+ 7A7E CD B2 86                             call    doRND
  83+ 7A81 EB                                   ex      de,hl
  84+ 7A82 0F                                   rrca
  85+ 7A83 E6 80                                and     $80
  86+ 7A85 B6                                   or      (hl)
  87+ 7A86 77                                   ld      (hl),a
  88+ 7A87 23                                   inc     hl
  89+ 7A88 EB                                   ex      de,hl
  90+ 7A89 CD B2 86                             call    doRND
  91+ 7A8C EB                                   ex      de,hl
  92+ 7A8D F6 5F                                or      95
  93+ 7A8F 77                                   ld      (hl),a
  94+ 7A90 23                                   inc     hl
  95+ 7A91 F6 70                                or      %01110000
  96+ 7A93 E6 7F                                and     $7f     ; bodge
  97+ 7A95 77                                   ld      (hl),a
  98+ 7A96 23                                   inc     hl
  99+ 7A97 C9                                   ret
 100+ 7A98
 101+ 7A98              ; we could cheat, flip the sign of DE and just add but its not very optimised
 102+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtractStarsSUBHLDESigned:     ld      a,h
 103+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        and     SignOnly8Bit
 104+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        ld      b,a                         ;save sign bit in b
 105+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 106+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 107+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract.SUBHLDESameSigns:      ld      a,b
 108+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        or      d
 109+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 110+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        or      a
 111+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        sbc     hl,de
 112+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        JumpIfNegative .SUBHLDESameOvrFlw
 113+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        ret
 114+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract.SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 115+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        and     SignMask8Bit                ; we could check the value of b for optimisation
 116+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        ld      h,a
 117+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        ld      a,d
 118+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        and     SignMask8Bit
 119+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        ld      d,a
 120+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        or      a
 121+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        sbc     hl,de
 122+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        JumpIfNegative .SUBHLDESameOvrFlw
 123+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 124+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        or      SignOnly8Bit
 125+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        ld      h,a
 126+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        ret
 127+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract.SUBHLDESameOvrFlw:     NegHL
 128+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        ld      a,b
 129+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        xor     SignOnly8Bit                ; flip sign bit
 130+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        or      h
 131+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        ld      h,a                         ; recover sign
 132+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        ret
 133+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract.SUBHLDEOppSGN:         or      a
 134+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 135+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        and     SignMask8Bit                ; we could check the value of b for optimisation
 136+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        ld      h,a
 137+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        ld      a,d
 138+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        and     SignMask8Bit
 139+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        ld      d,a
 140+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        add     hl,de
 141+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 142+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        or      h
 143+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        ld      h,a                         ; set the previou sign value
 144+ 7A98              ;;; MOVED TO SUBHLDESigned in asm_subtract                        ret
 145+ 7A98
 146+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add StarsADDHLDESigned:     ld      a,h
 147+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         and     SignOnly8Bit
 148+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         ld      b,a                         ;save sign bit in b
 149+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 150+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 151+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add .ADDHLDESameSigns:      ld      a,b
 152+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         or      d
 153+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 154+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         add     hl,de
 155+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         ret
 156+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 157+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         and     SignMask8Bit                ; we could check the value of b for optimisation
 158+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         ld      h,a
 159+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         ld      a,d
 160+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         and     SignMask8Bit
 161+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         ld      d,a
 162+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         add     hl,de
 163+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         ld      a,SignOnly8Bit
 164+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 165+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         ld      h,a
 166+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         ret
 167+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add .ADDHLDEOppSGN:         ld      a,h                         ; here HL and DE are opposite  so if we enter here then signs are the same so we clear the 16th bit
 168+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         and     SignMask8Bit                ; we could check the value of b for optimisation
 169+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         ld      h,a
 170+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         ld      a,d
 171+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         and     SignMask8Bit
 172+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         ld      d,a
 173+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         or      a
 174+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         sbc     hl,de
 175+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         jr      c,.ADDHLDEOppInvert
 176+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 177+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         or      h
 178+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         ld      h,a                         ; set the previou sign value
 179+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         ret
 180+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add .ADDHLDEOppInvert:      NegHL
 181+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         ld      a,b
 182+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         xor     SignOnly8Bit                ; flip sign bit
 183+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         or      h
 184+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         ld      h,a                         ; recover sign
 185+ 7A98              ;;; MOVED TO ADDHLDESigned in asm_add                         ret
 186+ 7A98              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ 7A98 06 0B        InitialiseStars:        ld      b,MaxNumberOfStars
 188+ 7A9A 21 6D 83                             ld      hl,varDust
 189+ 7A9D CD 14 7A     .InitStarsLoop:         call    InitStarAtHL
 190+ 7AA0 10 FB                                djnz    .InitStarsLoop
 191+ 7AA2 C9                                   ret
 192+ 7AA3              ;----------------------------------------------------------------------------------------------------------------------------------
 193+ 7AA3 06 0B        InitialiseHyperStars:   ld      b,MaxNumberOfStars
 194+ 7AA5 21 6D 83                             ld      hl,varDust
 195+ 7AA8 CD 52 7A     .InitStarsLoop:         call    InitHyperStarAtHL
 196+ 7AAB 10 FB                                djnz    .InitStarsLoop
 197+ 7AAD C9                                   ret
 198+ 7AAE              ;----------------------------------------------------------------------------------------------------------------------------------
 199+ 7AAE 06 0B        DustForward:            ld      b,MaxNumberOfStars                  ; get the number of stars to process
 200+ 7AB0 FD 21 6D 83                          ld      iy,varDust                          ; hl is now a pointer to the dust array
 201+ 7AB4 C5           StarProcessLoop:        push    bc                                  ; save counter +1
 202+ 7AB5 FD 7E 05     .Qequ64XSpeedDivZHi:    ld      a,(iy+5)                            ; e  = z high
 203+ 7AB8 5F                                   ld      e,a                                 ; d = 0
 204+ 7AB9 16 00                                ld      d,0                                 ; de = zhi/256
 205+ 7ABB 3A 0D 81                             ld      a,(DELTA)                           ; a = speed
 206+ 7ABE                                      JumpIfAIsNotZero .NormalSpeed               ; if we are stationary set speed
 206+ 7ABE A7          >                        and     a
 206+ 7ABF C2 C3 7A    >                        jp	    nz,.NormalSpeed
 207+ 7AC2 3C                                   inc     a                                   ; so it is at least some dust movement
 208+ 7AC3 47           .NormalSpeed:           ld      b,a                                 ;
 209+ 7AC4 0E 00                                ld      c,0                                 ; bc = delta * 256
 210+ 7AC6 CD AD 95                             call    BC_Div_DE                           ; BC = Speed/Z , HL = remainder
 211+ 7AC9                                      ShiftHLRight1
 211+ 7AC9 CB 3C       >			   srl h
 211+ 7ACB CB 1D       >			   rr  l
 212+ 7ACD                                      ShiftHLRight1                               ; hl = remainder/2 so now 64 * speed / zhi
 212+ 7ACD CB 3C       >			   srl h
 212+ 7ACF CB 1D       >			   rr  l
 213+ 7AD1 7D                                   ld      a,l                                 ;
 214+ 7AD2 F6 01                                or      1                                   ; so ensure A is at least 1 for ambient movement
 215+ 7AD4 DD 6F                                ld      ixl,a                               ; preserve A which is also VarQ = 64 * speed / zhi
 216+ 7AD6 FD 6E 04 FD  .ZequZMinusSpeedX64:    ld      hl,(iy+4)                           ; hl = z
 216+ 7ADA 66 05
 217+ 7ADC ED 5B 0E 81                          ld      de, (DELTA4)                         ; de = delta4 i.e. speed * 64 pre computed
 218+ 7AE0 CD 30 91                             call    SUBHLDESigned
 219+ 7AE3                                      JumpOnBitSet h,7,ResetStar                  ; if z ended up negative then reset the star
 219+ 7AE3 CB 7C       >                        bit 	7,h
 219+ 7AE5 C2 3A 7C    >                        jp      nz,ResetStar
 220+ 7AE8 FD 75 04 FD                          ld      (iy+4),hl                           ; save new z pos
 220+ 7AEC 74 05
 221+ 7AEE FD 6E 00 FD  .XEquXPlusXhiMulQ       ld      hl,(iy+0)                           ; hl  = x
 221+ 7AF2 66 01
 222+ 7AF4 7C                                   ld      a,h                                 ;
 223+ 7AF5 E6 7F                                and     $7F                                 ;
 224+ 7AF7 57                                   ld      d,a                                 ; d = abs(x hi)
 225+ 7AF8 DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 226+ 7AFA ED 30                                mul                                         ; de =  abs(x hi) * Q
 227+ 7AFC 7C                                   ld      a,h                                 ;
 228+ 7AFD E6 80                                and     $80                                 ;
 229+ 7AFF B2                                   or      d                                   ; set sign bit in d
 230+ 7B00 57                                   ld      d,a                                 ;
 231+ 7B01 CD D4 8F                             call    ADDHLDESignedV4                  ; x = x + (x hi/256 * Q)
 232+ 7B04 7C                                   ld      a,h
 233+ 7B05 E6 7F                                and     $7F
 234+ 7B07                                      JumpIfAGTENusng $70, ResetStar
 234+ 7B07 FE 70       >                        cp     $70
 234+ 7B09 D2 3A 7C    >                        jp		nc,ResetStar
 235+ 7B0C FD 75 00 FD                          ld      (iy+0),hl                           ;
 235+ 7B10 74 01
 236+ 7B12 FD 6E 02 FD  .YEquYPlusYhiMulQ       ld      hl,(iy+2)                           ; hl  = y
 236+ 7B16 66 03
 237+ 7B18 7C                                   ld      a,h                                 ;
 238+ 7B19 E6 7F                                and     $7F                                 ;
 239+ 7B1B 57                                   ld      d,a                                 ; d = abs(y hi)
 240+ 7B1C DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 241+ 7B1E ED 30                                mul                                         ; de =  abs(y hi) * Q
 242+ 7B20 7C                                   ld      a,h                                 ;
 243+ 7B21 E6 80                                and     $80                                 ;
 244+ 7B23 B2                                   or      d                                   ; set sign bit in d
 245+ 7B24 57                                   ld      d,a                                 ;
 246+ 7B25 CD D4 8F                             call    ADDHLDESignedV4                  ; y = y + (x hi/256 * Q)
 247+ 7B28 7C                                   ld      a,h
 248+ 7B29 E6 7F                                and     $7F
 249+ 7B2B                                      JumpIfAGTENusng $60, ResetStar
 249+ 7B2B FE 60       >                        cp     $60
 249+ 7B2D D2 3A 7C    >                        jp		nc,ResetStar
 250+ 7B30 7C                                   ld      a,h
 251+ 7B31 E6 80                                and     $80
 252+ 7B33 20 06                                jr      nz,.NoSecondCheck
 253+ 7B35 7C                                   ld      a,h
 254+ 7B36                                      JumpIfAGTENusng $20, ResetStar
 254+ 7B36 FE 20       >                        cp     $20
 254+ 7B38 D2 3A 7C    >                        jp		nc,ResetStar
 255+ 7B3B FD 75 02 FD  .NoSecondCheck:         ld      (iy+2),hl                           ;
 255+ 7B3F 74 03
 256+ 7B41              ; Now roll
 257+ 7B41              ;  6. x = x - alpha * y / 256
 258+ 7B41 3A 28 80     .XRoll:                 ld      a,(ALP1)                           ; h = sign, l = magnitude
 259+ 7B44 FE 00                                cp      0
 260+ 7B46 28 4D                                jr      z,.NoRoll                           ; don;t roll if magnitude is 0
 261+ 7B48                                   ;   break
 262+ 7B48 6F                                   ld      l,a                                 ; roll magnitude
 263+ 7B49 3A 2A 80                             ld      a,(ALP2FLIP)                        ; inverted roll sign
 264+ 7B4C E6 80                                and     SignOnly8Bit                        ; sanitise sign bit
 265+ 7B4E 67                                   ld      h,a                                 ; h = roll sign
 266+ 7B4F E5                                   push    hl                                  ; save on the stack
 267+ 7B50 4F           .rxSaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 268+ 7B51 55           .rxDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 269+ 7B52 FD 7E 03                             ld      a,(iy+3)                            ; get high byte from x coord
 270+ 7B55 5F                                   ld      e,a                                 ; save signed byte
 271+ 7B56 E6 80                                and     SignOnly8Bit                        ; a = sign only
 272+ 7B58 47           .rxBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 273+ 7B59 7B           .rxEEquABSignX:         ld      a,e                                 ; e = abs byte
 274+ 7B5A E6 7F                                and     SignMask8Bit
 275+ 7B5C 5F                                   ld      e,a                                 ; save abs x hi in e
 276+ 7B5D ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 277+ 7B5F 79                                   ld      a,c                                 ; get back sign from roll
 278+ 7B60 A8                                   xor     b                                   ; handle muliple sign bits
 279+ 7B61 B2                                   or      d
 280+ 7B62 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 281+ 7B63 FD 6E 00 FD                          ld      hl,(iy+0)                           ; h = iy+1, l = iy+0
 281+ 7B67 66 01
 282+ 7B69 CD 30 91                             call    SUBHLDESigned                       ; we are usign add, so may need to fip sign?
 283+ 7B6C FD 75 00 FD                          ld      (iy+0),hl
 283+ 7B70 74 01
 284+ 7B72              ;  5. y = y + alpha * x / 256
 285+ 7B72              .YRoll:                 ;break
 286+ 7B72 E1                                   pop     hl                                  ; h = sign, l = magnitude
 287+ 7B73 4C           .rySaveAlphaSign:       ld      c,h                                 ; save alpha sign in c
 288+ 7B74 55           .ryDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 289+ 7B75 FD 7E 01                             ld      a,(iy+1)                            ; get high byte from x coord
 290+ 7B78 5F                                   ld      e,a
 291+ 7B79 E6 80                                and     SignOnly8Bit
 292+ 7B7B 47           .ryBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 293+ 7B7C 7B           .ryEEquABSignX:         ld      a,e
 294+ 7B7D E6 7F                                and     SignMask8Bit
 295+ 7B7F 5F                                   ld      e,a                                 ; save abs x hi in e
 296+ 7B80 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 297+ 7B82 79                                   ld      a,c
 298+ 7B83 A8                                   xor     b                                   ; handle muliple sign bits
 299+ 7B84 B2                                   or      d
 300+ 7B85 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 301+ 7B86 FD 6E 02 FD                          ld      hl,(iy+2)                           ; h = iy+1, l = iy+0
 301+ 7B8A 66 03
 302+ 7B8C CD D4 8F                             call    ADDHLDESignedV4                  ; we are usign add, so may need to fip sign?
 303+ 7B8F FD 75 02 FD                          ld      (iy+2),hl
 303+ 7B93 74 03
 304+ 7B95 3A 1C 80     .NoRoll:                ld      a,(BET1)
 305+ 7B98 FE 00                                cp      0
 306+ 7B9A 28 22                                jr      z,.NoPitch
 307+ 7B9C              ;  8. y = y - beta * 256
 308+ 7B9C 57           .YPitch:                ld      d,a                                 ; d = BET1
 309+ 7B9D FD 7E 02                             ld      a,(iy+2)
 310+ 7BA0 5F                                   ld      e,a                                 ; e = Y HI
 311+ 7BA1 ED 30                                mul                                         ; de = BET1 * YHi so now D = BETA & YHI / 256
 312+ 7BA3 5F                                   ld      e,a
 313+ 7BA4 ED 30                                mul                                         ; so now de = (BETA & Yhi) ^ 2
 314+ 7BA6                                      ShiftDELeft1                                ; de = 2 * ((BETA & Yhi) ^ 2)
 314+ 7BA6 CB 23       >			   sla e
 314+ 7BA8 CB 12       >			   rl  d
 315+ 7BAA 3A 1D 80                             ld      a,(BET2)                            ; get inverted Sign
 316+ 7BAD B2                                   or      d
 317+ 7BAE 57                                   ld      d,a                                 ; de = - (2 * ((BETA & Yhi) ^ 2))
 318+ 7BAF FD 6E 02 FD                          ld      hl,(iy+2)
 318+ 7BB3 66 03
 319+ 7BB5 CD D4 8F                             call    ADDHLDESignedV4
 320+ 7BB8 FD 75 02 FD                          ld      (iy+2),hl
 320+ 7BBC 74 03
 321+ 7BBE              ; now work out screen pos
 322+ 7BBE              ; Note two optimistations, write to layer 2 - we get a free removal via double buffer cls
 323+ 7BBE              ; read z dept than determine hw many pixesl to plot, e.g. 1,2,3,4
 324+ 7BBE              ;        pop     de
 325+ 7BBE               ;       call    ProjectStarXToScreen
 326+ 7BBE                                      ;pop     de
 327+ 7BBE              .NoPitch:
 328+ 7BBE FD 7E 01     .ProjectStar:           ld      a,(iy+1)
 329+ 7BC1 6F                                   ld      l,a
 330+ 7BC2 E6 7F                                and     $7F
 331+ 7BC4                                      JumpOnBitSet l,7,StarNegXPt
 331+ 7BC4 CB 7D       >                        bit 	7,l
 331+ 7BC6 C2 CF 7B    >                        jp      nz,StarNegXPt
 332+ 7BC9 C6 80                                add     a,$80
 333+ 7BCB 4F                                   ld      c,a
 334+ 7BCC C3 D4 7B                             jp      StarDoneX
 335+ 7BCF 47           StarNegXPt:             ld      b,a
 336+ 7BD0 3E 80                                ld      a,$80
 337+ 7BD2 90                                   sub     b
 338+ 7BD3 4F                                   ld      c,a
 339+ 7BD4 FD 7E 03     StarDoneX:              ld      a,(iy+3)
 340+ 7BD7 6F                                   ld      l,a
 341+ 7BD8 E6 7F                                and     $7F
 342+ 7BDA                                      JumpOnBitSet l,7,StarNegYPt
 342+ 7BDA CB 7D       >                        bit 	7,l
 342+ 7BDC C2 E5 7B    >                        jp      nz,StarNegYPt
 343+ 7BDF C6 60                                add     a,$60
 344+ 7BE1 47                                   ld      b,a
 345+ 7BE2 C3 EA 7B                             jp      StarDoneY
 346+ 7BE5 47           StarNegYPt:             ld      b,a
 347+ 7BE6 3E 60                                ld      a,$60
 348+ 7BE8 90                                   sub     b
 349+ 7BE9 47                                   ld      b,a
 350+ 7BEA 3E 92        StarDoneY:              ld      a,L2DustColour
 351+ 7BEC C5                                   push    bc
 352+ 7BED              .DrawStar:              MMUSelectLayer2
 352+ 7BED ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 352+ 7BF1 CD 35 E1       call    l2_plot_pixel
 353+ 7BF4 FD 7E 05                             ld      a,(iy+5)
 354+ 7BF7 C1                                   pop    bc
 355+ 7BF8                                      JumpIfAGTENusng $60,EndofStarsLoop
 355+ 7BF8 FE 60       >                        cp     $60
 355+ 7BFA D2 2A 7C    >                        jp		nc,EndofStarsLoop
 356+ 7BFD 3E 92                                ld      a,L2DustColour
 357+ 7BFF 0C                                   inc     c
 358+ 7C00 C5                                   push    bc
 359+ 7C01                                      MMUSelectLayer2
 359+ 7C01 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 360+ 7C05 CD 35 E1                             call    l2_plot_pixel
 361+ 7C08 FD 7E 05                             ld      a,(iy+5)
 362+ 7C0B C1                                   pop    bc
 363+ 7C0C                                      JumpIfAGTENusng $37,EndofStarsLoop
 363+ 7C0C FE 37       >                        cp     $37
 363+ 7C0E D2 2A 7C    >                        jp		nc,EndofStarsLoop
 364+ 7C11 3E 92                                ld      a,L2DustColour
 365+ 7C13 04                                   inc     b
 366+ 7C14 C5                                   push    bc
 367+ 7C15                                      MMUSelectLayer2
 367+ 7C15 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 367+ 7C19 CD 35 E1         call    l2_plot_pixel
 368+ 7C1C FD 7E 05                             ld      a,(iy+5)
 369+ 7C1F C1                                   pop    bc
 370+ 7C20 3E 92                                ld      a,L2DustColour
 371+ 7C22 0D                                   dec     c
 372+ 7C23                                      MMUSelectLayer2
 372+ 7C23 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 372+ 7C27 CD 35 E1         call    l2_plot_pixel
 373+ 7C2A C1           EndofStarsLoop:         pop     bc                                      ;  0
 374+ 7C2B FD E5        NextStarLoop3:          push    iy                                      ; +1
 375+ 7C2D E1                                   pop     hl                                      ;  0
 376+ 7C2E ED 34 06 00                          add     hl,6
 377+ 7C32 E5           NextStarLoop2:          push    hl                                      ; +1
 378+ 7C33 FD E1                                pop     iy                                      ;  0
 379+ 7C35 05                                   dec     b
 380+ 7C36 C2 B4 7A                             jp      nz,StarProcessLoop
 381+ 7C39 C9                                   ret
 382+ 7C3A C1           ResetStar:              pop     bc                                      ; 0
 383+ 7C3B FD E5                                push    iy                                      ; +1 (current star)
 384+ 7C3D E1                                   pop     hl                                      ; 0
 385+ 7C3E CD 14 7A                             call    InitStarAtHL
 386+ 7C41 C3 2B 7C                             jp      NextStarLoop3
 387+ 7C44              ;----------------------------------------------------------------------------------------------------------------------------------
 388+ 7C44 FD 4E 00     ProjectStarXToScreen:   ld      c,(iy+0)
 389+ 7C47 FD 7E 01                             ld      a,(iy+1)
 390+ 7C4A 6F                                   ld      l,a
 391+ 7C4B E6 7F                                and     $7F
 392+ 7C4D 47                                   ld      b,a
 393+ 7C4E CD 12 95                             call    DIV16BCDivDEUNDOC
 394+ 7C51 7D                                   ld      a,l
 395+ 7C52                                      JumpOnBitSet a,7,StarXNegativePoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 395+ 7C52 CB 7F       >                        bit 	7,a
 395+ 7C54 C2 5F 7C    >                        jp      nz,StarXNegativePoint
 396+ 7C57              ;StarXPositivePoint:									; x was positive result
 397+ 7C57 2E 80                                ld          l,ScreenCenterX						;
 398+ 7C59 26 00                                ld          h,0
 399+ 7C5B 09                                   add         hl,bc								; hl = Screen Centre + X
 400+ 7C5C C3 66 7C                             jp          StarStoreXPoint
 401+ 7C5F              StarXNegativePoint:                                 ; x < 0 so need to subtract from the screen centre position
 402+ 7C5F 2E 80                                ld          l,ScreenCenterX
 403+ 7C61 26 00                                ld          h,0
 404+ 7C63                                      ClearCarryFlag
 404+ 7C63 B7          >                        or a
 405+ 7C64 ED 42                                sbc         hl,bc                               ; hl = Screen Centre - X
 406+ 7C66              StarStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 407+ 7C66 7D                                   ld          a,l
 408+ 7C67 32 C5 83                             ld          (varStarX),a
 409+ 7C6A C9                                   ret
 410+ 7C6B
 411+ 7C6B FD 46 02     ProjectStarYToScreen:   ld          b,(iy+2)
 412+ 7C6E FD 7E 03                             ld          a,(iy+3)
 413+ 7C71 6F                                   ld          l,a
 414+ 7C72 E6 7F                                and         $7F
 415+ 7C74 47                                   ld          b,a
 416+ 7C75 CD 12 95                             call        DIV16BCDivDEUNDOC
 417+ 7C78 7D                                   ld          a,l                                 ; XX15+2 \ sign of X dist
 418+ 7C79                                      JumpOnBitSet a,7,StarNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 418+ 7C79 CB 7F       >                        bit 	7,a
 418+ 7C7B C2 86 7C    >                        jp      nz,StarNegativeYPoint
 419+ 7C7E                                  ;StarPositiveYPoint:									; Y is positive so above the centre line
 420+ 7C7E 2E 60                               ld          l,ScreenCenterY
 421+ 7C80                                      ClearCarryFlag
 421+ 7C80 B7          >                        or a
 422+ 7C81 ED 42                                sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 423+ 7C83 C3 8B 7C                             jp          StarStoreYPoint
 424+ 7C86              StarNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 425+ 7C86 2E 60                                ld          l,ScreenCenterY
 426+ 7C88 26 00                                ld          h,0
 427+ 7C8A 09                                   add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 428+ 7C8B              StarStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 429+ 7C8B 7D                                   ld          a,l
 430+ 7C8C 32 C6 83                             ld          (varStarY),a
 431+ 7C8F C9                                   ret
 432+ 7C90
 433+ 7C90
# file closed: ./Universe/StarDust/StarRoutines.asm
 528  7C90              ;    include "Universe/move_object-MVEIT.asm"
 529  7C90              ;    include "./ModelRender/draw_object.asm"
 530  7C90              ;    include "./ModelRender/draw_ship_point.asm"
 531  7C90              ;    include "./ModelRender/drawforwards-LL17.asm"
 532  7C90              ;    include "./ModelRender/drawforwards-LL17.asm"
 533  7C90
 534  7C90                  INCLUDE	"./Hardware/memfill_dma.asm"
# file opened: ./Hardware/memfill_dma.asm
   1+ 7C90
   2+ 7C90 00           memfillvalue		DB 0
   3+ 7C91 83 C3 C7 CB  memfill        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   3+ 7C95 7D
   4+ 7C96 90 7C        memfill_astrt  		DW memfillvalue
   5+ 7C98 00 40        memfill_length 		DB $00,$40
   6+ 7C9A 24 10 AD     					DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   7+ 7C9D 00 00        memfill_bstrt  		DB $00,$00
   8+ 7C9F 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   9+ 7CA3              memfill_cmd_len	  	EQU $ - memfill
  10+ 7CA3
  11+ 7CA3              memfill_dma:
  12+ 7CA3              ; "memfill_dma, hl = address to fill, a = value, de = length"
  13+ 7CA3              .set_fill_value:
  14+ 7CA3 32 90 7C     	ld 		(memfillvalue),a
  15+ 7CA6              .set_target:
  16+ 7CA6 22 9D 7C     	ld		(memfill_bstrt),hl
  17+ 7CA9              .set_length:
  18+ 7CA9 ED 53 98 7C  	ld		(memfill_length),de
  19+ 7CAD              .write_dma:
  20+ 7CAD 21 91 7C     	ld 		hl, memfill
  21+ 7CB0 06 12        	ld 		b, memfill_cmd_len
  22+ 7CB2 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  23+ 7CB4 ED B3        	otir
  24+ 7CB6 C9           	ret
  25+ 7CB7
# file closed: ./Hardware/memfill_dma.asm
 535  7CB7                  INCLUDE	"./Hardware/memcopy_dma.asm"
# file opened: ./Hardware/memcopy_dma.asm
   1+ 7CB7
   2+ 7CB7 83 C3 C7 CB  memcopy        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   2+ 7CBB 7D
   3+ 7CBC 00 00        memcopy_astrt  		DB $00,$00
   4+ 7CBE 00 40        memcopy_length 		DB $00,$40
   5+ 7CC0 14 10 AD     					DB DMA_WR1_P1INC_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   6+ 7CC3 00 00        memcopy_bstrt  		DB $00,$00
   7+ 7CC5 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   8+ 7CC9              memcopy_cmd_len	  	equ $ - memcopy
   9+ 7CC9
  10+ 7CC9              memcopy_dma:
  11+ 7CC9              ; "memcopy_dma, hl = target address de = source address to copy, bc = length"
  12+ 7CC9              .set_target:
  13+ 7CC9 22 C3 7C     	ld		(memcopy_bstrt),hl
  14+ 7CCC              .set_source:
  15+ 7CCC ED 53 BC 7C  	ld		(memcopy_astrt),de
  16+ 7CD0              .set_length:
  17+ 7CD0 ED 43 BE 7C  	ld		(memcopy_length),bc
  18+ 7CD4              .write_dma:
  19+ 7CD4 21 B7 7C     	ld 		hl, memcopy
  20+ 7CD7 06 12        	ld 		b, memcopy_cmd_len
  21+ 7CD9 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  22+ 7CDB ED B3        	otir
  23+ 7CDD C9           	ret
  24+ 7CDE
# file closed: ./Hardware/memcopy_dma.asm
 536  7CDE 00 00        XX12PVarQ			DW 0
 537  7CE0 00 00        XX12PVarR			DW 0
 538  7CE2 00 00        XX12PVarS			DW 0
 539  7CE4 00 00        XX12PVarResult1		DW 0
 540  7CE6 00 00        XX12PVarResult2		DW 0
 541  7CE8 00 00        XX12PVarResult3		DW 0
 542  7CEA 00           XX12PVarSign2		DB 0
 543  7CEB 00           XX12PVarSign1		DB 0								; Note reversed so BC can do a little endian fetch
 544  7CEC 00           XX12PVarSign3		DB 0
 545  7CED                  INCLUDE "./Hardware/keyboard.asm"
# file opened: ./Hardware/keyboard.asm
   1+ 7CED              ;
   2+ 7CED              ; $FEFE;65278 V, C, X, Z, Caps Shifts       4  3  2  1  0
   3+ 7CED              ; $FDFE;65022 G, F, D, S, A                 9  8  7  6  5
   4+ 7CED              ; $FBFE;64510 T, R, E, W, Q                14 13 12 11 10
   5+ 7CED              ; $F7FE;63486 5, 4, 3, 2, 1                19 18 17 16 15
   6+ 7CED              ; $EFFE;61438 6, 7, 8, 9, 0                24 23 22 23 20
   7+ 7CED              ; $DFFE;57342 Y, U, I, O, P                29 28 27 26 25
   8+ 7CED              ; $BFFE;49150 H, J, K, L, Enter            34 33 32 31 30
   9+ 7CED              ; $7FFE;32766 B, N, M, Symbol Shift, Space 39 38 37 36 35
  10+ 7CED              ;
  11+ 7CED              ; Keyboard
  12+ 7CED              ;
  13+ 7CED              ;   0      1       2       3       4       5        6       7       8       9
  14+ 7CED              ;  VK_CAPS, VK_Z,  VK_X,   VK_C,   VK_V,   VK_A,    VK_S,   VK_D,   VK_F,   VK_G
  15+ 7CED              ;   10     11      12      13      14      15       16      17      18      19
  16+ 7CED              ;  VK_Q,   VK_W,   VK_E,   VK_R,   VK_T,   VK_1,    VK_2,   VK_3,   VK_4,   VK_5
  17+ 7CED              ;   20     21      22      23      24      25       26      27      28      29
  18+ 7CED              ;  VK_0    VK_9,   VK_8,   VK_7,   VK_6,   VK_P ,    VK_O,  VK_I,   VK_U,   VK_Y
  19+ 7CED              ;   30     31      32      33      34      35       36      37      38      39
  20+ 7CED              ; VK_ENTER VK_L,   VK_K,   VK_J,   VK_H,   VK_SPACE VK_SYM, VK_M,   VK_N,   VK_B
  21+ 7CED              ;
  22+ 7CED              ; Default map
  23+ 7CED              ;-----------------------------------------------------------------------------------------------------------------------------------
  24+ 7CED              ;   0          1           2             3              4           5           6           7           8           9
  25+ 7CED              ;   VK_CAPS    VK_Z        VK_X,         VK_C,          VK_V,       VK_A        VK_S,       VK_D,       VK_F,       VK_G
  26+ 7CED              ;              GameSkip                  Equip          SelLCargo   Climb       Decelerate  Recentre    FireM       HomeCursor
  27+ 7CED              ;                                                                                                       Find System
  28+ 7CED              ;-----------------------------------------------------------------------------------------------------------------------------------
  29+ 7CED              ;   10         11          12            13             14          15          16          17          18          19
  30+ 7CED              ;   VK_Q       VK_W,       VK_E,         VK_R,          VK_T,       VK_1        VK_2        VK_3        VK_4        VK_5
  31+ 7CED              ;   Dive       Accelerate  ECM           UnarmMissile   TargetM     FrontV      AftV        LeftV       RightV      GalacticChart
  32+ 7CED              ;-----------------------------------------------------------------------------------------------------------------------------------
  33+ 7CED              ;   20         Accel       22            23             24          25          26          27          28          29
  34+ 7CED              ;   VK_0       VK_9,       VK_8,         VK_7,          VK_6,       VK_P ,      VK_O,       VK_I,       VK_U,       VK_Y
  35+ 7CED              ;   EscapePod  Inventory   Status        MarketPrices   LocalChart  RollRight   RolLLeft                EnergyBomb  Quit
  36+ 7CED              ;   PlanetData                                                      PauseGame   SaveGame
  37+ 7CED              ;-----------------------------------------------------------------------------------------------------------------------------------
  38+ 7CED              ;   30         31          32            33             34          Right       36          37          EnergyBomb  39
  39+ 7CED              ;   VK_ENTER   VK_L,       VK_K,         VK_J,          VK_H,       VK_SPACE    VK_SYM,     VK_M,       VK_N,       VK_B
  40+ 7CED              ;              Launch                    Distance       Hyperspace  Laser                               DockComp    BuyCargo
  41+ 7CED              ;              ResumeGame
  42+ 7CED
  43+ 7CED              ; You can read address to check keystate by address KeyboardMap + c_Pressed corresponding key. There is also an addr_ helper too
  44+ 7CED
  45+ 7CED              c_Pressed_Front         equ 0  * 2
  46+ 7CED              c_Pressed_Aft           equ 1  * 2
  47+ 7CED              c_Pressed_Left          equ 2  * 2
  48+ 7CED              c_Pressed_Right         equ 3  * 2
  49+ 7CED              c_Pressed_RollLeft      equ 4  * 2
  50+ 7CED              c_Pressed_RollRight     equ 5  * 2
  51+ 7CED              c_Pressed_Dive          equ 6  * 2
  52+ 7CED              c_Pressed_Climb         equ 7  * 2
  53+ 7CED              c_Pressed_Accellerate   equ 8  * 2
  54+ 7CED              c_Pressed_Decellerate   equ 9  * 2
  55+ 7CED              c_Pressed_FireLaser     equ 10 * 2
  56+ 7CED              c_Pressed_TargetMissle  equ 11 * 2
  57+ 7CED              c_Pressed_FireMissile   equ 12 * 2
  58+ 7CED              c_Pressed_UnarmMissile  equ 13 * 2
  59+ 7CED              c_Pressed_ECM           equ 14 * 2
  60+ 7CED              c_Pressed_EnergyBomb    equ 15 * 2
  61+ 7CED              c_Pressed_EscapePod     equ 16 * 2
  62+ 7CED              c_Pressed_DockingComp   equ 17 * 2
  63+ 7CED              c_Pressed_Hyperspace    equ 18 * 2
  64+ 7CED              c_Pressed_Distance      equ 19 * 2
  65+ 7CED              c_Pressed_HomeCursor    equ 20 * 2
  66+ 7CED              c_Pressed_Launch        equ 21 * 2
  67+ 7CED              c_Pressed_BuyCargo      equ 22 * 2
  68+ 7CED              c_Pressed_SellCargo     equ 23 * 2
  69+ 7CED              c_Pressed_Equip         equ 24 * 2
  70+ 7CED              c_Pressed_GalacticChrt  equ 25 * 2
  71+ 7CED              c_Pressed_LocalChart    equ 26 * 2
  72+ 7CED              c_Pressed_MarketPrices  equ 27 * 2
  73+ 7CED              c_Pressed_Status        equ 28 * 2
  74+ 7CED              c_Pressed_Inventory     equ 29 * 2
  75+ 7CED              c_Pressed_GameSkip      equ 30 * 2
  76+ 7CED              c_Pressed_Save          equ 31 * 2
  77+ 7CED              c_Pressed_Freeze        equ 32 * 2
  78+ 7CED              c_Pressed_Resume        equ 33 * 2
  79+ 7CED              c_Pressed_Recentre      equ 34 * 2
  80+ 7CED              c_Pressed_Quit          equ 35 * 2
  81+ 7CED              c_Pressed_PlanetData    equ 36 * 2
  82+ 7CED              c_Pressed_CursorUp      equ 37 * 2
  83+ 7CED              c_Pressed_CursorDown    equ 38 * 2
  84+ 7CED              c_Pressed_Find          equ 39 * 2
  85+ 7CED              c_Pressed_Yes           equ 40 * 2
  86+ 7CED              c_Pressed_No            equ 41 * 2
  87+ 7CED
  88+ 7CED
  89+ 7CED              ; half row 1
  90+ 7CED              VK_CAPS  				equ 0
  91+ 7CED              VK_Z  					equ 1
  92+ 7CED              VK_X  					equ 2
  93+ 7CED              VK_C  					equ 3
  94+ 7CED              VK_V  					equ 4
  95+ 7CED              ; half row 2
  96+ 7CED              VK_A  					equ 5
  97+ 7CED              VK_S  					equ 6
  98+ 7CED              VK_D  					equ 7
  99+ 7CED              VK_F  					equ 8
 100+ 7CED              VK_G  					equ 9
 101+ 7CED              ; half row 3
 102+ 7CED              VK_Q  					equ 10
 103+ 7CED              VK_W  					equ 11
 104+ 7CED              VK_E  					equ 12
 105+ 7CED              VK_R  					equ 13
 106+ 7CED              VK_T  					equ 14
 107+ 7CED              ; half row 4
 108+ 7CED              VK_1  					equ 15
 109+ 7CED              VK_2  					equ 16
 110+ 7CED              VK_3  					equ 17
 111+ 7CED              VK_4  					equ 18
 112+ 7CED              VK_5  					equ 19
 113+ 7CED              ; half row 5
 114+ 7CED              VK_0 					equ 20
 115+ 7CED              VK_9 					equ 21
 116+ 7CED              VK_8 					equ 22
 117+ 7CED              VK_7 					equ 23
 118+ 7CED              VK_6 					equ 24
 119+ 7CED              ; half row 6
 120+ 7CED              VK_P  					equ 25
 121+ 7CED              VK_O  					equ 26
 122+ 7CED              VK_I  					equ 27
 123+ 7CED              VK_U  					equ 28
 124+ 7CED              VK_Y  					equ 29
 125+ 7CED              ; half row 7
 126+ 7CED              VK_ENTER 				equ 30
 127+ 7CED              VK_L  					equ 31
 128+ 7CED              VK_K  					equ 32
 129+ 7CED              VK_J  					equ 33
 130+ 7CED              VK_H  					equ 34
 131+ 7CED              ; half row 8
 132+ 7CED              VK_SPACE 				equ 35
 133+ 7CED              VK_SYM  				equ 36
 134+ 7CED              VK_M  					equ 37
 135+ 7CED              VK_N  					equ 38
 136+ 7CED              VK_B  					equ 39
 137+ 7CED
 138+ 7CED              ;KeyboardMapping
 139+ 7CED              KeyCode_Front        	equ VK_1
 140+ 7CED              KeyCode_Aft          	equ VK_2
 141+ 7CED              KeyCode_Left         	equ VK_3
 142+ 7CED              KeyCode_Right        	equ VK_4
 143+ 7CED              KeyCode_RollLeft     	equ VK_O
 144+ 7CED              KeyCode_RollRight    	equ VK_P
 145+ 7CED              KeyCode_Dive         	equ VK_Q
 146+ 7CED              KeyCode_Climb        	equ VK_A
 147+ 7CED              KeyCode_Accellerate  	equ VK_W
 148+ 7CED              KeyCode_Decellerate  	equ VK_S
 149+ 7CED              KeyCode_FireLaser    	equ VK_SPACE
 150+ 7CED              KeyCode_TargetMissle 	equ VK_T
 151+ 7CED              KeyCode_FireMissile  	equ VK_F
 152+ 7CED              KeyCode_Find        	equ VK_F
 153+ 7CED              KeyCode_UnarmMissile 	equ VK_R
 154+ 7CED              KeyCode_ECM          	equ VK_E
 155+ 7CED              KeyCode_EnergyBomb   	equ VK_U
 156+ 7CED              KeyCode_EscapePod    	equ VK_CAPS
 157+ 7CED              KeyCode_DockingComp  	equ VK_N
 158+ 7CED              KeyCode_Hyperspace   	equ VK_H
 159+ 7CED              KeyCode_Distance     	equ VK_J
 160+ 7CED              KeyCode_HomeCursor   	equ VK_G
 161+ 7CED              KeyCode_Launch       	equ VK_L
 162+ 7CED              KeyCode_BuyCargo     	equ VK_B
 163+ 7CED              KeyCode_SellCargo    	equ VK_V
 164+ 7CED              KeyCode_Equip        	equ VK_C
 165+ 7CED              KeyCode_GalacticChrt 	equ VK_5
 166+ 7CED              KeyCode_LocalChart   	equ VK_6
 167+ 7CED              KeyCode_MarketPrices 	equ VK_7
 168+ 7CED              KeyCode_Status       	equ VK_8
 169+ 7CED              KeyCode_Inventory    	equ VK_9
 170+ 7CED              KeyCode_GameSkip     	equ VK_Z
 171+ 7CED              KeyCode_Save         	equ VK_O
 172+ 7CED              KeyCode_Freeze       	equ VK_B
 173+ 7CED              KeyCode_Resume       	equ VK_L
 174+ 7CED              KeyCode_Recentre     	equ VK_D
 175+ 7CED              KeyCode_Quit         	equ VK_Y
 176+ 7CED              KeyCode_PlanetData   	equ VK_0
 177+ 7CED              KeyCode_CursorUp        equ VK_Q
 178+ 7CED              KeyCode_CursorDown      equ VK_A
 179+ 7CED              KeyCode_PressedYes      equ VK_Y
 180+ 7CED              KeyCode_PressedNo       equ VK_N
 181+ 7CED
 182+ 7CED 00 00 00...  Keys					DS	40          ; This is the list of key states for all the VK keys presssed i.e. VK_CAPS through to VK_B
 183+ 7D15              c_KeyBoardLen 			equ $ - Keys
 184+ 7D15 00 00 00...  RawKeys					DS	8
 185+ 7D1D FE FD FB F7  KeyAddrTab				DB	$FE, $FD, $FB, $F7, $EF, $DF, $BF, $7F
 185+ 7D21 EF DF BF 7F
 186+ 7D25              ; Now keyboard map lists each game key and the corresponding address in the Keys table to get the value. This way redefining keys is just a case
 187+ 7D25              ; of updating this table with the respective location to look up
 188+ 7D25              ; key list sequence is in table above
 189+ 7D25 FC 7C FD 7C  KeyboardMap             DW  Keys+KeyCode_Front        ,Keys+KeyCode_Aft          ,Keys+KeyCode_Left         ,Keys+KeyCode_Right        ,Keys+KeyCode_RollLeft
 189+ 7D29 FE 7C FF 7C
 189+ 7D2D 07 7D
 190+ 7D2F 06 7D F7 7C                          DW  Keys+KeyCode_RollRight    ,Keys+KeyCode_Dive         ,Keys+KeyCode_Climb        ,Keys+KeyCode_Accellerate  ,Keys+KeyCode_Decellerate
 190+ 7D33 F2 7C F8 7C
 190+ 7D37 F3 7C
 191+ 7D39 10 7D FB 7C                          DW  Keys+KeyCode_FireLaser    ,Keys+KeyCode_TargetMissle ,Keys+KeyCode_FireMissile  ,Keys+KeyCode_UnarmMissile ,Keys+KeyCode_ECM
 191+ 7D3D F5 7C FA 7C
 191+ 7D41 F9 7C
 192+ 7D43 09 7D ED 7C                          DW  Keys+KeyCode_EnergyBomb   ,Keys+KeyCode_EscapePod    ,Keys+KeyCode_DockingComp  ,Keys+KeyCode_Hyperspace   ,Keys+KeyCode_Distance
 192+ 7D47 13 7D 0F 7D
 192+ 7D4B 0E 7D
 193+ 7D4D F6 7C 0C 7D                          DW  Keys+KeyCode_HomeCursor   ,Keys+KeyCode_Launch       ,Keys+KeyCode_BuyCargo     ,Keys+KeyCode_SellCargo    ,Keys+KeyCode_Equip
 193+ 7D51 14 7D F1 7C
 193+ 7D55 F0 7C
 194+ 7D57 00 7D 05 7D                          DW  Keys+KeyCode_GalacticChrt ,Keys+KeyCode_LocalChart   ,Keys+KeyCode_MarketPrices ,Keys+KeyCode_Status       ,Keys+KeyCode_Inventory
 194+ 7D5B 04 7D 03 7D
 194+ 7D5F 02 7D
 195+ 7D61 EE 7C 07 7D                          DW  Keys+KeyCode_GameSkip     ,Keys+KeyCode_Save         ,Keys+KeyCode_Freeze       ,Keys+KeyCode_Resume       ,Keys+KeyCode_Recentre
 195+ 7D65 14 7D 0C 7D
 195+ 7D69 F4 7C
 196+ 7D6B 0A 7D 01 7D                          DW  Keys+KeyCode_Quit         ,Keys+KeyCode_PlanetData   ,Keys+KeyCode_CursorUp     ,Keys+KeyCode_CursorDown   ,Keys+KeyCode_Find
 196+ 7D6F F7 7C F2 7C
 196+ 7D73 F5 7C
 197+ 7D75 0A 7D 13 7D                          DW  Keys+KeyCode_PressedYes   ,Keys+KeyCode_PressedNo
 198+ 7D79
 199+ 7D79 23 5A 58 43  ASCII_Map:              DB "#","Z","X","C","V"
 199+ 7D7D 56
 200+ 7D7E 41 53 44 46                          DB "A","S","D","F","G"
 200+ 7D82 47
 201+ 7D83 51 57 45 52                          DB "Q","W","E","R","T"
 201+ 7D87 54
 202+ 7D88 31 32 33 34                          DB "1","2","3","4","5"
 202+ 7D8C 35
 203+ 7D8D 30 39 38 37                          DB "0","9","8","7","6"
 203+ 7D91 36
 204+ 7D92 50 4F 49 55                          DB "P","O","I","U","Y"
 204+ 7D96 59
 205+ 7D97 3E 4C 4B 4A                          DB ">","L","K","J","H"
 205+ 7D9B 48
 206+ 7D9C 20 5E 4D 4E                          DB " ","^","M","N","B"
 206+ 7DA0 42
 207+ 7DA1
 208+ 7DA1              ; mapping of a code to the lookup table Keyboard map. So if you are using an addr_Pressed you can then fetch from KeyboardMap the address in Keys
 209+ 7DA1              ; for the raw key press status
 210+ 7DA1              addr_Pressed_Front         equ KeyboardMap+c_Pressed_Front
 211+ 7DA1              addr_Pressed_Aft           equ KeyboardMap+c_Pressed_Aft
 212+ 7DA1              addr_Pressed_Left          equ KeyboardMap+c_Pressed_Left
 213+ 7DA1              addr_Pressed_Right         equ KeyboardMap+c_Pressed_Right
 214+ 7DA1              addr_Pressed_RollLeft      equ KeyboardMap+c_Pressed_RollLeft
 215+ 7DA1              addr_Pressed_RollRight     equ KeyboardMap+c_Pressed_RollRight
 216+ 7DA1              addr_Pressed_Dive          equ KeyboardMap+c_Pressed_Dive
 217+ 7DA1              addr_Pressed_Climb         equ KeyboardMap+c_Pressed_Climb
 218+ 7DA1              addr_Pressed_Accellerate   equ KeyboardMap+c_Pressed_Accellerate
 219+ 7DA1              addr_Pressed_Decellerate   equ KeyboardMap+c_Pressed_Decellerate
 220+ 7DA1              addr_Pressed_FireLaser     equ KeyboardMap+c_Pressed_FireLaser
 221+ 7DA1              addr_Pressed_TargetMissle  equ KeyboardMap+c_Pressed_TargetMissle
 222+ 7DA1              addr_Pressed_FireMissile   equ KeyboardMap+c_Pressed_FireMissile
 223+ 7DA1              addr_Pressed_UnarmMissile  equ KeyboardMap+c_Pressed_UnarmMissile
 224+ 7DA1              addr_Pressed_ECM           equ KeyboardMap+c_Pressed_ECM
 225+ 7DA1              addr_Pressed_EnergyBomb    equ KeyboardMap+c_Pressed_EnergyBomb
 226+ 7DA1              addr_Pressed_EscapePod     equ KeyboardMap+c_Pressed_EscapePod
 227+ 7DA1              addr_Pressed_DockingComp   equ KeyboardMap+c_Pressed_DockingComp
 228+ 7DA1              addr_Pressed_Hyperspace    equ KeyboardMap+c_Pressed_Hyperspace
 229+ 7DA1              addr_Pressed_Distance      equ KeyboardMap+c_Pressed_Distance
 230+ 7DA1              addr_Pressed_HomeCursor    equ KeyboardMap+c_Pressed_HomeCursor
 231+ 7DA1              addr_Pressed_Launch        equ KeyboardMap+c_Pressed_Launch
 232+ 7DA1              addr_Pressed_BuyCargo      equ KeyboardMap+c_Pressed_BuyCargo
 233+ 7DA1              addr_Pressed_SellCargo     equ KeyboardMap+c_Pressed_SellCargo
 234+ 7DA1              addr_Pressed_Equip         equ KeyboardMap+c_Pressed_Equip
 235+ 7DA1              addr_Pressed_GalacticChrt  equ KeyboardMap+c_Pressed_GalacticChrt
 236+ 7DA1              addr_Pressed_LocalChart    equ KeyboardMap+c_Pressed_LocalChart
 237+ 7DA1              addr_Pressed_MarketPrices  equ KeyboardMap+c_Pressed_MarketPrices
 238+ 7DA1              addr_Pressed_Status        equ KeyboardMap+c_Pressed_Status
 239+ 7DA1              addr_Pressed_Inventory     equ KeyboardMap+c_Pressed_Inventory
 240+ 7DA1              addr_Pressed_GameSkip      equ KeyboardMap+c_Pressed_GameSkip
 241+ 7DA1              addr_Pressed_Save          equ KeyboardMap+c_Pressed_Save
 242+ 7DA1              addr_Pressed_Freeze        equ KeyboardMap+c_Pressed_Freeze
 243+ 7DA1              addr_Pressed_Resume        equ KeyboardMap+c_Pressed_Resume
 244+ 7DA1              addr_Pressed_Recentre      equ KeyboardMap+c_Pressed_Recentre
 245+ 7DA1              addr_Pressed_Quit          equ KeyboardMap+c_Pressed_Quit
 246+ 7DA1              addr_Pressed_PlanetData    equ KeyboardMap+c_Pressed_PlanetData
 247+ 7DA1              addr_Pressed_CursorUp      equ KeyboardMap+c_Pressed_CursorUp
 248+ 7DA1              addr_Pressed_CursorDown    equ KeyboardMap+c_Pressed_CursorDown
 249+ 7DA1              addr_Pressed_Find          equ KeyboardMap+c_Pressed_Find
 250+ 7DA1
 251+ 7DA1
 252+ 7DA1              MIsKeyPressed:          MACRO   keyaddress, misstarget
 253+ 7DA1 ~                                    ld      hl,(keyaddress)
 254+ 7DA1 ~                                    ld      a,(hl)
 255+ 7DA1 ~                                    JumpIfAIsZero   misstarget
 256+ 7DA1                                      ENDM
 257+ 7DA1
 258+ 7DA1 21 ED 7C     init_keyboard:          ld		hl,Keys                         ; no key s are pressed by default
 259+ 7DA4 11 28 00                             ld		de, c_KeyBoardLen               ;
 260+ 7DA7 3E 00                                ld		a,0                             ;
 261+ 7DA9 CD A3 7C                             call	memfill_dma                     ;
 262+ 7DAC C9                                   ret                                     ;
 263+ 7DAD
 264+ 7DAD
 265+ 7DAD
 266+ 7DAD DD 21 15 7D  scan_keyboard:          ld		ix,RawKeys                      ; hl = table of raw IO port readings
 267+ 7DB1 21 1D 7D                             ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 268+ 7DB4 0E 08                                ld		c,8                             ; 8 ports to ready
 269+ 7DB6 11 ED 7C                             ld      de,Keys                         ; ix = table of key states from raw read
 270+ 7DB9 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 271+ 7DBA DB FE                                in		a,($FE)							; read port to a
 272+ 7DBC DD 77 00                             ld      (ix+0),a                        ; save raw scan
 273+ 7DBF DD 23                                inc     ix
 274+ 7DC1 23                                   inc		hl                              ; and ready for next read
 275+ 7DC2 06 05        .ProcessInputBits:      ld		b,5								; loop all bits (there are only 5 keys to a group)
 276+ 7DC4 1F           .ProcessBitsLoop:       rra                                     ; shit bit 0 into carry
 277+ 7DC5 CB 47                                bit		0,a								; is bit set
 278+ 7DC7 30 08                                jr      nc,.SetKeyPressed               ; low bit means it was pressed
 279+ 7DC9 FD 6F                                ld      iyl,a
 280+ 7DCB                                      ZeroA
 280+ 7DCB AF          >                        xor a
 281+ 7DCC C3 D9 7D                             jp      .SetKey
 282+ 7DCF 20 0B                                jr		nz,.SkipKeySet
 283+ 7DD1 FD 6F        .SetKeyPressed:	        ld      iyl,a                           ; save current input byte
 284+ 7DD3 1A                                   ld      a,(de)                          ; get current keystate
 285+ 7DD4 FE 02                                cp      2
 286+ 7DD6 28 02                                jr      z,.AlreadyHeld
 287+ 7DD8 3C                                   inc     a                               ; and increment by 1 as its moved from previous state
 288+ 7DD9 12           .SetKey:                ld		(de),a				  	        ; save key Pressed state
 289+ 7DDA FD 7D        .AlreadyHeld:           ld      a,iyl                           ; and retrieve the current input byte
 290+ 7DDC 13           .SkipKeySet:	        inc		de								; move to next key
 291+ 7DDD 10 E5                                djnz	.ProcessBitsLoop				; Process all key group bits
 292+ 7DDF 0D                                   dec     c                               ; thats one row of bits all processed
 293+ 7DE0 20 D7                                jr      nz,.PortReadLoop				; Read next input port
 294+ 7DE2 C9                                   ret
 295+ 7DE3
 296+ 7DE3
 297+ 7DE3
 298+ 7DE3              GetKeyStateAddressDE:   MACRO
 299+ 7DE3 ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 300+ 7DE3 ~                                    add     hl,a
 301+ 7DE3 ~                                    ld      e,(hl)
 302+ 7DE3 ~                                    inc     hl
 303+ 7DE3 ~                                    ld      d,(hl)                          ; now de = address in keypress list
 304+ 7DE3                                      ENDM
 305+ 7DE3
 306+ 7DE3              GetKeyStateAddressHL:   MACRO
 307+ 7DE3 ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 308+ 7DE3 ~                                    add     hl,a
 309+ 7DE3 ~                                    ld      a,(hl)
 310+ 7DE3 ~                                    inc     hl
 311+ 7DE3 ~                                    ld      h,(hl)                          ; now hl = address in keypress list
 312+ 7DE3 ~                                    ld      l,a
 313+ 7DE3                                      ENDM
 314+ 7DE3
 315+ 7DE3
 316+ 7DE3              ;;old debug codeCurrentX            DB 0
 317+ 7DE3              ;;old debug codeCurrentY            DB 0
 318+ 7DE3              ;;old debug code
 319+ 7DE3              ;;old debug codedisplayKeyStatus:       xor         a
 320+ 7DE3              ;;old debug code                        ld          (CurrentX),a
 321+ 7DE3              ;;old debug code                        ld          hl,RawKeys
 322+ 7DE3              ;;old debug code                        ld          a,(hl)
 323+ 7DE3              ;;old debug code                        and         %00011111
 324+ 7DE3              ;;old debug code                        ld          b,5
 325+ 7DE3              ;;old debug code.displayLoop:           push        bc,,hl
 326+ 7DE3              ;;old debug code                        rra
 327+ 7DE3              ;;old debug code                        jr          c,.displayNoPress
 328+ 7DE3              ;;old debug code.displayPress:          push        af
 329+ 7DE3              ;;old debug code                        ld          a,(CurrentX)
 330+ 7DE3              ;;old debug code                        ld          e,a
 331+ 7DE3              ;;old debug code                        ld          a,(CurrentY)
 332+ 7DE3              ;;old debug code                        ld          d,a
 333+ 7DE3              ;;old debug code                        ld          a,'*'
 334+ 7DE3              ;;old debug code                        MMUSelectLayer1
 335+ 7DE3              ;;old debug code                        call        l1_print_char
 336+ 7DE3              ;;old debug code                        ld          a,(CurrentX)
 337+ 7DE3              ;;old debug code                        add         a,8
 338+ 7DE3              ;;old debug code                        ld          (CurrentX),a
 339+ 7DE3              ;;old debug code                        pop         af
 340+ 7DE3              ;;old debug code                        pop         bc,,hl
 341+ 7DE3              ;;old debug code                        djnz        .displayLoop
 342+ 7DE3              ;;old debug code                        ret
 343+ 7DE3              ;;old debug code.displayNoPress:        push        af
 344+ 7DE3              ;;old debug code                        ld          a,(CurrentX)
 345+ 7DE3              ;;old debug code                        ld          e,a
 346+ 7DE3              ;;old debug code                        ld          a,(CurrentY)
 347+ 7DE3              ;;old debug code                        ld          d,a
 348+ 7DE3              ;;old debug code                        ld          a,'O'
 349+ 7DE3              ;;old debug code                        MMUSelectLayer1
 350+ 7DE3              ;;old debug code                        call        l1_print_char
 351+ 7DE3              ;;old debug code                        ld          a,(CurrentX)
 352+ 7DE3              ;;old debug code                        add         a,8
 353+ 7DE3              ;;old debug code                        ld          (CurrentX),a
 354+ 7DE3              ;;old debug code                        pop         af
 355+ 7DE3              ;;old debug code                        pop         bc,,hl
 356+ 7DE3              ;;old debug code                        djnz        .displayLoop
 357+ 7DE3              ;;old debug code                        ret
 358+ 7DE3              ;;old debug code
 359+ 7DE3              ;;old debug codedisplayDownStatus:      ld  a,(Keys+      KeyCode_CursorUp)
 360+ 7DE3              ;;old debug code                        cp  0
 361+ 7DE3              ;;old debug code                        jr      z,.displayNoUp
 362+ 7DE3              ;;old debug code                        cp  1
 363+ 7DE3              ;;old debug code                        jr      z,.displayUp
 364+ 7DE3              ;;old debug code.displayHeld:           ld      de,8*15
 365+ 7DE3              ;;old debug code                        ld      a,"*"
 366+ 7DE3              ;;old debug code                        MMUSelectLayer1
 367+ 7DE3              ;;old debug code                        call        l1_print_char
 368+ 7DE3              ;;old debug code                        ret
 369+ 7DE3              ;;old debug code.displayUp:             ld      de,8*15
 370+ 7DE3              ;;old debug code                        ld      a,"+"
 371+ 7DE3              ;;old debug code                        MMUSelectLayer1
 372+ 7DE3              ;;old debug code                        call        l1_print_char
 373+ 7DE3              ;;old debug code                        ret
 374+ 7DE3              ;;old debug code.displayNoUp:             ld      de,8*15
 375+ 7DE3              ;;old debug code                        ld      a,"O"
 376+ 7DE3              ;;old debug code                        MMUSelectLayer1
 377+ 7DE3              ;;old debug code                        call        l1_print_char
 378+ 7DE3              ;;old debug code                        ret
 379+ 7DE3              ;;old debug code
 380+ 7DE3
 381+ 7DE3
 382+ 7DE3              ; call with a = c_Pressed key, will then read mapping does this with keyboard scan, waits until key gets to state 1, if it was already held then#
 383+ 7DE3              ; it will have to be let go to reset of 0 and scan again
 384+ 7DE3              ; Deprecated as not used as yet
 385+ 7DE3              ;;;;;;wait_for_key_a_press:   GetKeyStateAddressHL
 386+ 7DE3              ;;;;;;                        push    hl
 387+ 7DE3              ;;;;;;.wait_loop:             call    scan_keyboard
 388+ 7DE3              ;;;;;;                        pop     hl                              ; get key address into hl
 389+ 7DE3              ;;;;;;                        push    hl
 390+ 7DE3              ;;;;;;                        ld      a,(hl)
 391+ 7DE3              ;;;;;;                        JumpIfANENusng  1,.wait_loop             ; will also loop if held down when entering this routine
 392+ 7DE3              ;;;;;;                        pop     hl                              ; tidy up rogue push, less t states than detecting if we want to push or not
 393+ 7DE3              ;;;;;;                        ret
 394+ 7DE3              ;;;;;;; call with a = c_Pressed key, will then read mapping does this with keyboard scan waits until key gets to state 2
 395+ 7DE3              ;;;;;;wait_for_key_a_held:    GetKeyStateAddressDE
 396+ 7DE3              ;;;;;;                        push    hl
 397+ 7DE3              ;;;;;;.wait_loop:             call    scan_keyboard
 398+ 7DE3              ;;;;;;                        pop     hl
 399+ 7DE3              ;;;;;;                        push    hl
 400+ 7DE3              ;;;;;;                        ld      a,(hl)
 401+ 7DE3              ;;;;;;                        JumpIfALTNusng  2, .wait_loop
 402+ 7DE3              ;;;;;;                        pop     hl
 403+ 7DE3              ;;;;;;                        ret
 404+ 7DE3
 405+ 7DE3              ; Gets the current keystate of the c_Pressed Key in a register
 406+ 7DE3              get_key_a_state:        GetKeyStateAddressHL                    ; reads a mapped key and sets a to key staus, e.g. 0 1 or >=2 DOES NOT SCAN KEYBOARD
 406+ 7DE3 21 25 7D    >                        ld      hl,KeyboardMap                  ; work our address to read from
 406+ 7DE6 ED 31       >                        add     hl,a
 406+ 7DE8 7E          >                        ld      a,(hl)
 406+ 7DE9 23          >                        inc     hl
 406+ 7DEA 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 406+ 7DEB 6F          >                        ld      l,a
 407+ 7DEC 7E                                   ld      a,(hl)                          ; a = keystate
 408+ 7DED C9                                   ret
 409+ 7DEE
 410+ 7DEE              ; sets they keystate of c pressed key in a register to 1 (pressed)
 411+ 7DEE              force_key_press:        GetKeyStateAddressHL                    ; read key locations
 411+ 7DEE 21 25 7D    >                        ld      hl,KeyboardMap                  ; work our address to read from
 411+ 7DF1 ED 31       >                        add     hl,a
 411+ 7DF3 7E          >                        ld      a,(hl)
 411+ 7DF4 23          >                        inc     hl
 411+ 7DF5 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 411+ 7DF6 6F          >                        ld      l,a
 412+ 7DF7 3E 01                                ld      a,1
 413+ 7DF9 77                                   ld      (hl),a
 414+ 7DFA C9                                   ret
 415+ 7DFB
 416+ 7DFB              is_key_up_state:        GetKeyStateAddressHL
 416+ 7DFB 21 25 7D    >                        ld      hl,KeyboardMap                  ; work our address to read from
 416+ 7DFE ED 31       >                        add     hl,a
 416+ 7E00 7E          >                        ld      a,(hl)
 416+ 7E01 23          >                        inc     hl
 416+ 7E02 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 416+ 7E03 6F          >                        ld      l,a
 417+ 7E04 7E                                   ld      a,(hl)
 418+ 7E05 FE 00                                cp      0
 419+ 7E07 C9                                   ret
 420+ 7E08
 421+ 7E08              ; returns z is set if c_ key is pressed
 422+ 7E08              is_key_pressed:         GetKeyStateAddressHL
 422+ 7E08 21 25 7D    >                        ld      hl,KeyboardMap                  ; work our address to read from
 422+ 7E0B ED 31       >                        add     hl,a
 422+ 7E0D 7E          >                        ld      a,(hl)
 422+ 7E0E 23          >                        inc     hl
 422+ 7E0F 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 422+ 7E10 6F          >                        ld      l,a
 423+ 7E11 7E                                   ld      a,(hl)                          ; a = keystate
 424+ 7E12 FE 01                                cp      1                               ; we cant just test bit 0 as this may have been held long
 425+ 7E14 C9                                   ret
 426+ 7E15
 427+ 7E15              ; returns nz is set if c_ key is held, if key was held then keystate would be 2 or 3, i.e. bit 1 set
 428+ 7E15              is_key_held:            GetKeyStateAddressHL
 428+ 7E15 21 25 7D    >                        ld      hl,KeyboardMap                  ; work our address to read from
 428+ 7E18 ED 31       >                        add     hl,a
 428+ 7E1A 7E          >                        ld      a,(hl)
 428+ 7E1B 23          >                        inc     hl
 428+ 7E1C 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 428+ 7E1D 6F          >                        ld      l,a
 429+ 7E1E 7E                                   ld      a,(hl)                          ; a = keystate
 430+ 7E1F E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 431+ 7E21 C9                                   ret
 432+ 7E22
 433+ 7E22              ; checks to see if any key is pressed in the key table
 434+ 7E22 21 ED 7C     is_any_key_pressed:     ld      hl,Keys
 435+ 7E25 01 28 00                             ld      bc,40
 436+ 7E28 3E 01                                ld      a,1
 437+ 7E2A ED B1                                cpir                                    ; search for the value 1
 438+ 7E2C 28 03                                jr      z,.KeyPressed                   ; if a key was pressed then handle press
 439+ 7E2E                                      SetAFalse
 439+ 7E2E 3E FF       >                        ld      a,$FF
 440+ 7E30 C9                                   ret
 441+ 7E31 3E 27        .KeyPressed:            ld      a,39                            ; so c will be how many keys still to scan
 442+ 7E33 91                                   sub     c                               ; so a = 40 - c to get to result
 443+ 7E34 C9                                   ret
 444+ 7E35
 445+ 7E35 21 ED 7C     is_any_key_held:        ld      hl,Keys
 446+ 7E38 06 28                                ld      b,40
 447+ 7E3A 0E 00                                ld      c,0
 448+ 7E3C 7E           .KeyReadLoop:           ld      a,(hl)
 449+ 7E3D E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 450+ 7E3F C2 49 7E                             jp      nz,.KeyPressed
 451+ 7E42 23                                   inc     hl
 452+ 7E43 0C                                   inc     c
 453+ 7E44 10 F6                                djnz    .KeyReadLoop
 454+ 7E46                                      SetAFalse
 454+ 7E46 3E FF       >                        ld      a,$FF
 455+ 7E48 C9                                   ret
 456+ 7E49 79           .KeyPressed:            ld      a,c
 457+ 7E4A C9                                   ret
 458+ 7E4B
 459+ 7E4B
 460+ 7E4B 21 1D 7D     WaitForNoKey:           ld      hl,KeyAddrTab                   ; de = table of IO ports to read
 461+ 7E4E 06 08                                ld		b,8                             ; 8 ports to ready
 462+ 7E50 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 463+ 7E51 DB FE                                in		a,($FE)							; read port to a
 464+ 7E53 E6 1F                                and     %00011111
 465+ 7E55 FE 1F                                cp      %00011111
 466+ 7E57 20 F2                                jr      nz ,WaitForNoKey
 467+ 7E59 23                                   inc		hl                              ; and ready for next read
 468+ 7E5A 10 F4                                djnz    .PortReadLoop
 469+ 7E5C C9                                   ret
 470+ 7E5D
 471+ 7E5D F5 D5 C5 E5  WaitForAnyKey:          push    af,,de,,bc,,hl
 472+ 7E61 CD 4B 7E                             call    WaitForNoKey
 473+ 7E64 21 1D 7D     .waitKeyLoop:           ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 474+ 7E67 06 08                                ld		b,8                             ; 8 ports to ready
 475+ 7E69 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 476+ 7E6A DB FE                                in		a,($FE)							; read port to a
 477+ 7E6C E6 1F                                and     %00011111
 478+ 7E6E FE 1F                                cp      %00011111
 479+ 7E70 C2 7A 7E                             jp      nz,.WaitComplete
 480+ 7E73 C0                                   ret     nz
 481+ 7E74 23                                   inc		hl                              ; and ready for next read
 482+ 7E75 10 F2                                djnz    .PortReadLoop
 483+ 7E77 C3 64 7E                             jp      .waitKeyLoop
 484+ 7E7A E1 C1 D1 F1  .WaitComplete:          pop     af,,de,,bc,,hl
 485+ 7E7E C9                                   ret
 486+ 7E7F
 487+ 7E7F
 488+ 7E7F 00 00 00...  InputString             DS  30              ; used for a 30 character input buffer
 489+ 7E9D 00                                   DB  0               ; end of string marker as a safety
 490+ 7E9E 00           InputCursor             DB  0
 491+ 7E9F 00           EnterPressed            DB  0               ; zero notpressed FF pressed
 492+ 7EA0 00           InputChanged            DB  0
 493+ 7EA1              InputLimit              EQU 20
 494+ 7EA1
 495+ 7EA1 21 7F 7E     keyboard_copy_input_to_de:  ld      hl,InputString
 496+ 7EA4 3A 9E 7E                                 ld      a,(InputCursor)
 497+ 7EA7 FE 00                                    cp      0
 498+ 7EA9 28 05                                    jr      z,.NoString
 499+ 7EAB 4F                                       ld      c,a
 500+ 7EAC 06 00                                    ld      b,0
 501+ 7EAE ED B0                                    ldir
 502+ 7EB0 3E 00        .NoString                   ld      a,0
 503+ 7EB2 12                                       ld      (de),a
 504+ 7EB3 C9                                       ret
 505+ 7EB4
 506+ 7EB4 AF           initInputText:          xor     a
 507+ 7EB5 32 9E 7E                             ld      (InputCursor),a
 508+ 7EB8                                      SetMemFalse EnterPressed
 508+ 7EB8 3E FF       >                        ld      a,$FF
 508+ 7EBA 32 9F 7E    >                        ld      (EnterPressed),a
 509+ 7EBD                                      SetMemFalse InputChanged
 509+ 7EBD 3E FF       >                        ld      a,$FF
 509+ 7EBF 32 A0 7E    >                        ld      (InputChanged),a
 510+ 7EC2 21 7F 7E                             ld      hl,InputString
 511+ 7EC5 06 1E                                ld      b,30
 512+ 7EC7 77           .wipeloop:              ld      (hl),a
 513+ 7EC8 23                                   inc     hl
 514+ 7EC9 10 FC                                djnz    .wipeloop
 515+ 7ECB C9                                   ret
 516+ 7ECC
 517+ 7ECC              InputName:              SetMemFalse InputChanged
 517+ 7ECC 3E FF       >                        ld      a,$FF
 517+ 7ECE 32 A0 7E    >                        ld      (InputChanged),a
 518+ 7ED1 CD 22 7E                             call    is_any_key_pressed
 519+ 7ED4 FE FF                                cp      $FF
 520+ 7ED6 C8                                   ret     z
 521+ 7ED7 4F           .KeyPressed:            ld      c,a
 522+ 7ED8 3A 9E 7E                             ld      a,(InputCursor)                 ; No key so we can now look at if we are at the end of the buffer
 523+ 7EDB FE 14                                cp      InputLimit                      ; move to variable later and then cp (hl)
 524+ 7EDD 28 0B                                jr      z,.DeleteOrEnterOnly            ;
 525+ 7EDF 21 79 7D                             ld      hl,ASCII_Map
 526+ 7EE2 79                                   ld      a,c
 527+ 7EE3 ED 31                                add     hl,a
 528+ 7EE5 7E                                   ld      a,(hl)
 529+ 7EE6 FE 41                                cp      "A"
 530+ 7EE8 30 0B                                jr      nc,.AlphaPressed
 531+ 7EEA              ; CAPS and Symbol act as delete for now
 532+ 7EEA FE 20        .DeleteOrEnterOnly      cp      " "                             ; if space was  pressed (mapped to Hash in ASCII table))
 533+ 7EEC 28 33                                jr      z,.SpacePressed               ; for now we will ignore the shift and just assume delete
 534+ 7EEE FE 3E                                cp      ">"         ; ENTER
 535+ 7EF0 28 19                                jr      z,.EnterPressed
 536+ 7EF2 FE 23                                cp      "#"         ; CAPS
 537+ 7EF4 C9                                   ret
 538+ 7EF5 47           .AlphaPressed:          ld      b,a
 539+ 7EF6 3A 9E 7E                             ld      a,(InputCursor)
 540+ 7EF9 4F                                   ld      c,a
 541+ 7EFA 21 7F 7E                             ld      hl,InputString
 542+ 7EFD ED 31                                add     hl,a
 543+ 7EFF 78                                   ld      a,b
 544+ 7F00 70                                   ld      (hl),b
 545+ 7F01 79                                   ld      a,c
 546+ 7F02 21 9E 7E                             ld      hl,InputCursor
 547+ 7F05 34                                   inc     (hl)
 548+ 7F06                                      SetMemTrue InputChanged
 548+ 7F06 AF          >                        xor     a
 548+ 7F07 32 A0 7E    >                        ld      (InputChanged),a
 549+ 7F0A C9                                   ret
 550+ 7F0B 3A 9E 7E     .EnterPressed:          ld      a,(InputCursor)
 551+ 7F0E 21 7F 7E                             ld      hl,InputString
 552+ 7F11 ED 31                                add     hl,a
 553+ 7F13                                      ZeroA
 553+ 7F13 AF          >                        xor a
 554+ 7F14 77                                   ld      (hl),a
 555+ 7F15                                      SetMemTrue EnterPressed
 555+ 7F15 AF          >                        xor     a
 555+ 7F16 32 9F 7E    >                        ld      (EnterPressed),a
 556+ 7F19                                      SetMemTrue InputChanged
 556+ 7F19 AF          >                        xor     a
 556+ 7F1A 32 A0 7E    >                        ld      (InputChanged),a
 557+ 7F1D CD A1 7D                             call    init_keyboard           ; Flush keyboard status so futher inputs don't auto read the enter key as a second press
 558+ 7F20 C9                                   ret
 559+ 7F21 3A 9E 7E     .SpacePressed:          ld      a,(InputCursor)         ; Space = delete
 560+ 7F24 FE 00                                cp      0                       ; if input is zero length then can not delete
 561+ 7F26 C8                                   ret     z
 562+ 7F27 3D                                   dec     a                       ; move back one and update cursor pos
 563+ 7F28 32 9E 7E                             ld      (InputCursor),a         ;
 564+ 7F2B 21 7F 7E                             ld      hl,InputString          ; now update end of line to null
 565+ 7F2E ED 31                                add     hl,a                    ; .
 566+ 7F30                                      ZeroA                           ; .
 566+ 7F30 AF          >                        xor a
 567+ 7F31 77                                   ld      (hl),a                  ; .
 568+ 7F32                                      SetMemTrue InputChanged
 568+ 7F32 AF          >                        xor     a
 568+ 7F33 32 A0 7E    >                        ld      (InputChanged),a
 569+ 7F36 C9                                   ret
 570+ 7F37
 571+ 7F37              TargetMissileTest:      JumpIfMemZero NbrMissiles,      .ClearTargetting
 571+ 7F37 3A 7E 81    >                        ld  a,(NbrMissiles)
 571+ 7F3A A7          >                        and a
 571+ 7F3B CA 52 7F    >                        jp  z,.ClearTargetting
 572+ 7F3E 3A 13 84                             ld      a,(MissileTargettingFlag)   ; if we are comitted to launch
 573+ 7F41 CB 7F                                bit     7,a                         ; then don't scan
 574+ 7F43 C8                                   ret     z                           ; as it will be cleared on launch
 575+ 7F44 3E 16        .ScanForKey:            ld      a,c_Pressed_TargetMissle    ; if not pressed we are done
 576+ 7F46 CD 08 7E                             call    is_key_pressed              ; .
 577+ 7F49 C0                                   ret     nz                          ; .
 578+ 7F4A 3A 13 84     .TargetPressed:         ld      a,(MissileTargettingFlag)   ; get flag back
 579+ 7F4D                                      JumpIfAEqNusng StageMissileNoTarget, .SetTargetting
 579+ 7F4D FE FF       >                        cp     StageMissileNoTarget
 579+ 7F4F CA 58 7F    >                        jp      z,.SetTargetting
 580+ 7F52              .ClearTargetting:       SetMemToN   MissileTargettingFlag, StageMissileNoTarget
 580+ 7F52 3E FF       >                        ld      a,StageMissileNoTarget
 580+ 7F54 32 13 84    >                        ld      (MissileTargettingFlag),a
 581+ 7F57 C9                                   ret
 582+ 7F58              .SetTargetting:         SetMemToN   MissileTargettingFlag, StageMissileTargeting
 582+ 7F58 3E FE       >                        ld      a,StageMissileTargeting
 582+ 7F5A 32 13 84    >                        ld      (MissileTargettingFlag),a
 583+ 7F5D C9                                   ret
 584+ 7F5E
 585+ 7F5E AF           MovementKeyTest:        xor     a
 586+ 7F5F 32 FF 81                             ld      (CursorKeysPressed),a
 587+ 7F62 3A 1E 81                             ld      a,(MenuIdMax)
 588+ 7F65 E6 FC                                and     $FC
 589+ 7F67 20 26                                jr      nz,CursorKeys
 590+ 7F69 2A 33 7D     ClimbDiveKeys:          ld      hl,(addr_Pressed_Climb)                 ; Check for Climb
 591+ 7F6C 7E                                   ld      a,(hl)
 592+ 7F6D                                      JumpIfAIsZero ScanDiveKey
 592+ 7F6D A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 592+ 7F6E CA 7C 7F    >                        jp	    z, ScanDiveKey
 593+ 7F71 3A FF 81                             ld      a,(CursorKeysPressed)
 594+ 7F74 F6 80                                or      CursorClimb
 595+ 7F76 32 FF 81                             ld      (CursorKeysPressed),a
 596+ 7F79 C3 B2 7F                             jp      ScanLeftKey
 597+ 7F7C 2A 31 7D     ScanDiveKey:            ld      hl,(addr_Pressed_Dive)                  ; Check for Dive
 598+ 7F7F 7E                                   ld      a,(hl)
 599+ 7F80                                      JumpIfAIsZero ScanLeftKey
 599+ 7F80 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 599+ 7F81 CA B2 7F    >                        jp	    z, ScanLeftKey
 600+ 7F84 3A FF 81                             ld      a,(CursorKeysPressed)
 601+ 7F87 F6 40                                or      CursorDive
 602+ 7F89 32 FF 81                             ld      (CursorKeysPressed),a
 603+ 7F8C C3 B2 7F                             jp      ScanLeftKey
 604+ 7F8F 2A 6F 7D     CursorKeys:             ld      hl,(addr_Pressed_CursorUp)              ; Check cursor keys
 605+ 7F92 7E                                   ld      a,(hl)
 606+ 7F93                                      JumpIfAIsZero ScanCursorDownKey
 606+ 7F93 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 606+ 7F94 CA A2 7F    >                        jp	    z, ScanCursorDownKey
 607+ 7F97 3A FF 81                             ld      a,(CursorKeysPressed)
 608+ 7F9A F6 80                                or      CursorClimb
 609+ 7F9C 32 FF 81                             ld      (CursorKeysPressed),a
 610+ 7F9F C3 B2 7F                             jp      ScanLeftKey
 611+ 7FA2 2A 71 7D     ScanCursorDownKey:      ld      hl,(addr_Pressed_CursorDown)
 612+ 7FA5 7E                                   ld      a,(hl)
 613+ 7FA6                                      JumpIfAIsZero ScanLeftKey
 613+ 7FA6 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 613+ 7FA7 CA B2 7F    >                        jp	    z, ScanLeftKey
 614+ 7FAA 3A FF 81                             ld      a,(CursorKeysPressed)
 615+ 7FAD F6 40                                or      CursorDive
 616+ 7FAF 32 FF 81                             ld      (CursorKeysPressed),a
 617+ 7FB2 2A 2D 7D     ScanLeftKey:            ld      hl,(addr_Pressed_RollLeft)
 618+ 7FB5 7E                                   ld      a,(hl)
 619+ 7FB6                                      JumpIfAIsZero ScanRightKey
 619+ 7FB6 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 619+ 7FB7 CA C3 7F    >                        jp	    z, ScanRightKey
 620+ 7FBA 3A FF 81                             ld      a,(CursorKeysPressed)
 621+ 7FBD F6 20                                or      CursorLeft
 622+ 7FBF 32 FF 81                             ld      (CursorKeysPressed),a
 623+ 7FC2 C9                                   ret
 624+ 7FC3 2A 2F 7D     ScanRightKey:           ld      hl,(addr_Pressed_RollRight)
 625+ 7FC6 7E                                   ld      a,(hl)
 626+ 7FC7                                      JumpIfAIsZero ScanHomeKey
 626+ 7FC7 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 626+ 7FC8 CA D4 7F    >                        jp	    z, ScanHomeKey
 627+ 7FCB 3A FF 81                             ld      a,(CursorKeysPressed)
 628+ 7FCE F6 10                                or      CursorRight
 629+ 7FD0 32 FF 81                             ld      (CursorKeysPressed),a
 630+ 7FD3 C9                                   ret
 631+ 7FD4 2A 4D 7D     ScanHomeKey:            ld      hl,(addr_Pressed_HomeCursor)
 632+ 7FD7 7E                                   ld      a,(hl)
 633+ 7FD8                                      JumpIfAIsZero ScanRecentreKey
 633+ 7FD8 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 633+ 7FD9 CA E5 7F    >                        jp	    z, ScanRecentreKey
 634+ 7FDC 3A FF 81                             ld      a,(CursorKeysPressed)
 635+ 7FDF F6 08                                or      CursorHome
 636+ 7FE1 32 FF 81                             ld      (CursorKeysPressed),a
 637+ 7FE4 C9                                   ret
 638+ 7FE5 2A 69 7D     ScanRecentreKey:        ld      hl,(addr_Pressed_Recentre)
 639+ 7FE8 7E                                   ld      a,(hl)
 640+ 7FE9                                      ReturnIfAIsZero
 640+ 7FE9 A7          >                        and     a
 640+ 7FEA C8          >                        ret     z
 641+ 7FEB 3A FF 81                             ld      a,(CursorKeysPressed)
 642+ 7FEE F6 04                                or      CursorRecenter
 643+ 7FF0 32 FF 81                             ld      (CursorKeysPressed),a
 644+ 7FF3 C9                                   ret
 645+ 7FF4
 646+ 7FF4
# file closed: ./Hardware/keyboard.asm
 546  7FF4
 547  7FF4                  INCLUDE "./Variables/constant_equates.asm"
# file opened: ./Variables/constant_equates.asm
   1+ 7FF4              ;Contants
   2+ 7FF4
   3+ 7FF4              SignMask8Bit		equ %01111111
   4+ 7FF4              SignMask16Bit		equ %0111111111111111
   5+ 7FF4              SignOnly8Bit		equ $80
   6+ 7FF4              SignOnly16Bit		equ $8000
   7+ 7FF4
   8+ 7FF4              Bit7Only            equ %10000000
   9+ 7FF4              Bit6Only            equ %01000000
  10+ 7FF4              Bit5Only            equ %00100000
  11+ 7FF4              Bit4Only            equ %00010000
  12+ 7FF4              Bit3Only            equ %00001000
  13+ 7FF4              Bit2Only            equ %00000100
  14+ 7FF4              Bit1Only            equ %00000010
  15+ 7FF4              Bit0Only            equ %00000001
  16+ 7FF4              Bit7Clear           equ %01111111
  17+ 7FF4              Bit6Clear           equ %10111111
  18+ 7FF4              Bit5Clear           equ %11011111
  19+ 7FF4              Bit4Clear           equ %11101111
  20+ 7FF4              Bit3Clear           equ %11110111
  21+ 7FF4              Bit2Clear           equ %11111011
  22+ 7FF4              Bit1Clear           equ %11111101
  23+ 7FF4              Bit0Clear           equ %11111110
  24+ 7FF4              ConstPi				equ $80
  25+ 7FF4              ConstNorm           equ 197
  26+ 7FF4
  27+ 7FF4              ;Text Tokens
  28+ 7FF4              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
  29+ 7FF4              BrabenBellToken 	equ $0D
  30+ 7FF4              AcorToken			equ $0C
  31+ 7FF4              ; Cursor Bits
  32+ 7FF4              CursorClimb         equ %10000000
  33+ 7FF4              CursorDive          equ %01000000
  34+ 7FF4              CursorLeft          equ %00100000
  35+ 7FF4              CursorRight         equ %00010000
  36+ 7FF4              CursorHome          equ %00001000
  37+ 7FF4              CursorRecenter      equ %00000100
  38+ 7FF4
  39+ 7FF4              ; Intro Screen
  40+ 7FF4              TitleShip			equ	$8C
  41+ 7FF4              RotationUnity		equ $60
  42+ 7FF4              DBCheckCode			equ $DB
  43+ 7FF4              MaxVisibility		equ $1F
  44+ 7FF4              FarInFront			equ $C0
  45+ 7FF4              ; Equipment Flags
  46+ 7FF4              EquipmentItemFitted     equ $FF
  47+ 7FF4              EquipmentItemNotFitted  equ 0
  48+ 7FF4              ; Universe Managment
  49+ 7FF4              ShipTotalModelCount     equ 44
  50+ 7FF4              ShipTypeScoopable       equ 4         ; a sub set of junk
  51+ 7FF4              ShipTypeJunk            equ 3
  52+ 7FF4              ShipTypeStation         equ 2
  53+ 7FF4              ShipTypeMissile         equ 1
  54+ 7FF4              ShipTypeNormal          equ 0
  55+ 7FF4              ShipTypeText            equ 253
  56+ 7FF4              ShipTypeDebug           equ 254
  57+ 7FF4              ShipTypeEmpty           equ 255
  58+ 7FF4              ; TacticsControl
  59+ 7FF4              ShipExplosionDuration   equ 75         ; amount of frames an explosion lasts for
  60+ 7FF4              ShipIsTrader            equ Bit0Only   ; Trader flag  80% are peaceful 20% also have Bounty Hunter flag
  61+ 7FF4              ShipIsBountyHunter      equ Bit1Only   ;
  62+ 7FF4              ShipIsHostile           equ Bit2Only   ;
  63+ 7FF4              ShipNotHostile          equ Bit2Clear   ;
  64+ 7FF4              ShipIsPirate            equ Bit3Only   ;
  65+ 7FF4              ShipIsDot               equ Bit3Only
  66+ 7FF4              ShipIsNotDot            equ Bit3Clear
  67+ 7FF4              ShipIsDotBitNbr         equ 3
  68+ 7FF4              ShipKilled              equ Bit4Only    ; Ship has just been marked as killed so initiate cloud of debris
  69+ 7FF4              ShipKilledBitNbr        equ 4
  70+ 7FF4              ShipIsDocking           equ Bit4Only   ;
  71+ 7FF4              ShipIsBystander         equ Bit5Only   ;
  72+ 7FF4              ShipIsVisible           equ Bit6Only
  73+ 7FF4              ShipIsVisibleBitNbr     equ 6
  74+ 7FF4              ShipIsCop               equ Bit6Only   ;
  75+ 7FF4              ShipIsScoopDockEsc      equ Bit7Only   ;
  76+ 7FF4              ShipAIEnabled           equ Bit7Only   ;
  77+ 7FF4              ShipAIDisabled          equ Bit7Clear
  78+ 7FF4              ShipAIEnabledBitNbr     equ 7
  79+ 7FF4              ShipExploding           equ Bit5Only
  80+ 7FF4              ShipExplodingBitNbr     equ 5
  81+ 7FF4              ; Equipment Defaults
  82+ 7FF4              ECMCounterMax           equ $80
  83+ 7FF4              ; Main Loop State
  84+ 7FF4              StatePlayerDocked       equ $FF
  85+ 7FF4              StateCompletedLaunch    equ $FD
  86+ 7FF4              StateInTransition       equ $FE
  87+ 7FF4              StateHJumping           equ $FC
  88+ 7FF4              StateHEntering          equ $FB
  89+ 7FF4              StateCompletedHJump     equ $FA
  90+ 7FF4              StateNormal             equ 0
  91+ 7FF4              ; Missile Stage flags , $8x = locked to ship id x, $0x = fire at ship id x requested
  92+ 7FF4              StageMissileNoTarget equ $FF
  93+ 7FF4              StageMissileTargeting equ $FE
  94+ 7FF4              ; UniverseAIControl
  95+ 7FF4              ShipCanAnger        equ %00000001
  96+ 7FF4
  97+ 7FF4
  98+ 7FF4              ShipMaxDistance     equ 192
  99+ 7FF4              HyperSpaceTimers    equ $0B0B
 100+ 7FF4
 101+ 7FF4
 102+ 7FF4              MaxNumberOfStars	equ 11
 103+ 7FF4              ConsoleRefreshInterval  equ 5
 104+ 7FF4
 105+ 7FF4              ShipTypeSize		equ	32 			;??????? just a guess for now
 106+ 7FF4              ShipSST				equ 4			; its a space station
 107+ 7FF4              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
 108+ 7FF4              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
 109+ 7FF4              ShipCountMax		equ	2			; For now just 2 ships to debug
 110+ 7FF4              LineLimitPerShip	equ 70			; Max lines per ship
 111+ 7FF4              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
 112+ 7FF4              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
 113+ 7FF4
 114+ 7FF4              ; Memory page managment	(Refers to a memory slot as a place to access data)
 115+ 7FF4              ShipDataSlot		equ	6			; this may move into rom swap out space later
 116+ 7FF4              UniverseObjectSlot	equ	7
 117+ 7FF4
 118+ 7FF4              KeyForwardsView		equ	$20
 119+ 7FF4              ; Game specific equates
 120+ 7FF4              MissileDropHeight   equ 5           ; how far the missile is ejected on launch in y axis
 121+ 7FF4
 122+ 7FF4              ;...Game Colour Mapping
 123+ 7FF4              L2DustColour        equ L2ColourGREY_1
 124+ 7FF4              L2SunScannerBright  equ 252
 125+ 7FF4              L2SunScanner        equ 180
 126+ 7FF4              L2DebrisColour      equ L2ColourYELLOW_1
 127+ 7FF4
 128+ 7FF4
 129+ 7FF4              ; Ship Data
 130+ 7FF4              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
 131+ 7FF4              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
 132+ 7FF4              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
 133+ 7FF4              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
 134+ 7FF4              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
 135+ 7FF4              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
 136+ 7FF4              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
 137+ 7FF4              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
 138+ 7FF4              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
 139+ 7FF4              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
 140+ 7FF4              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
 141+ 7FF4              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
 142+ 7FF4              ;;;;00 00			 EQUW 0     \ type 12 is       Python
 143+ 7FF4              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
 144+ 7FF4              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
 145+ 7FF4              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
 146+ 7FF4              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
 147+ 7FF4              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
 148+ 7FF4              ;;;;00 00			 EQUW 0     \ type 18 is
 149+ 7FF4              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
 150+ 7FF4              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
 151+ 7FF4              ;;;;00 00			 EQUW 0     \ type 21 is
 152+ 7FF4              ;;;;00 00			 EQUW 0     \ type 22 is
 153+ 7FF4              ;;;;00 00			 EQUW 0     \ type 23 is
 154+ 7FF4              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
 155+ 7FF4              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
 156+ 7FF4              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
 157+ 7FF4              ;;;;00 00			 EQUW 0     \ type 27 is
 158+ 7FF4              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
 159+ 7FF4              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
 160+ 7FF4              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
 161+ 7FF4              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
 162+ 7FF4              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
 163+ 7FF4              ;;;;			\ NEWB examples
 164+ 7FF4              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
 165+ 7FF4              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
 166+ 7FF4              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
 167+ 7FF4              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
 168+ 7FF4              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
 169+ 7FF4
# file closed: ./Variables/constant_equates.asm
 548  7FF4                  INCLUDE "./Variables/general_variables.asm"
# file opened: ./Variables/general_variables.asm
   1+ 7FF4
   2+ 7FF4
   3+ 7FF4 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
   4+ 7FF6 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
   5+ 7FF8              ; Variables to simulate 6502 registers until code fixed
   6+ 7FF8              ; These must be here in this order as reading Y and X can then be a 16 bit read
   7+ 7FF8 00           regX		DB	0               ; using 16 bit read into BC this would go into C
   8+ 7FF9 00           regY		DB	0               ; using 16 bit read into BC this would go into B
   9+ 7FFA 00           regA		DB	0
  10+ 7FFB
  11+ 7FFB
  12+ 7FFB 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
  13+ 7FFC 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
  14+ 7FFE 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
  15+ 8000
  16+ 8000
  17+ 8000
  18+ 8000              ;XX16		DS	16				; 16 byte Matrix
  19+ 8000
  20+ 8000              P0INWK							; page 0 & 46
  21+ 8000              p0INWK31						; page 0 & 65
  22+ 8000              P0INWK36						; PAGE 0 &6A
  23+ 8000
  24+ 8000 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
  25+ 8001              LastNormalVisible	equ	XX4
  26+ 8001              varXX4              equ XX4
  27+ 8001
  28+ 8001
  29+ 8001
  30+ 8001 00           PATG		DB	0				; 6502 &03C9
  31+ 8002 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
  32+ 8004
  33+ 8004
  34+ 8004              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
  35+ 8004              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &5600 XX21-1,Y
  36+ 8004
  37+ 8004              ; Present System Variables
  38+ 8004
  39+ 8004 2B           RandomSeed				DB	43			    ; 00 DEBUG JUST SOME START VALUES
  40+ 8005 20           RandomSeed1				DB	32	            ; 01
  41+ 8006 0C           RandomSeed2				DB	12			    ; 02
  42+ 8007 42           RandomSeed3				DB	66			    ; 03
  43+ 8008 00 00 00 00  RandomSeedSave          DS  4               ; used in explosion routine to save randoms
  44+ 800C 00           varT1					DB	0				; 06
  45+ 800D 00           SClo					DB 0				; 07
  46+ 800E 00           SChi					DB 0				; 08
  47+ 800F 00           varP					DB 0 				; 10	XX16+7
  48+ 8010 00           varPhi					DB 0 				; 11	XX16+8
  49+ 8011 00           varPhi2					DB 0 				; 12	XX16+9
  50+ 8012              varPp1                  equ varPhi
  51+ 8012              varPp2                  equ varPhi2
  52+ 8012 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
  53+ 8013 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
  54+ 8014              UnivPointer				equ	UnivPointerLo
  55+ 8014 00           varV					DB 0				; 22                          XX0+4
  56+ 8015 00           varVHi					DB 0				; 23                          XX0+5
  57+ 8016 00           varXXlo                 DB 0                ; 24
  58+ 8017 00           varXXHi                 DB 0                ; 25
  59+ 8018              varXX					equ	varXXlo
  60+ 8018 00           YYlo                    DB 0                ; 26
  61+ 8019 00           YYHi                    DB 0                ; 27
  62+ 801A              varYY					equ	YYlo
  63+ 801A              											;	28
  64+ 801A              											;	29
  65+ 801A              ;PlayerShipPositionData - Must be contiguous for setup
  66+ 801A 00           BETA 					DB	0               ; 2A        (pitch done)
  67+ 801B 00           JSTY                    DB  0               ; Joystick analog
  68+ 801C 00           BET1 					DB	0               ; 2B        lower7 magnitude
  69+ 801D 00           BET2                    DB  0               ;            climb sign
  70+ 801E 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
  71+ 801F 1F           BET1MAXC                DB  31              ; max climb
  72+ 8020 E1           BET1MAXD                DB  -31             ; max dive
  73+ 8021 00           XC						DB	0               ; 2C
  74+ 8022 00           YC						DB 	0               ; 2D
  75+ 8023              ;... ECM logic. If another ship adds ECM then we just set the loop A and B to starting values so they overlap
  76+ 8023 00           ECMCountDown            DB  0
  77+ 8024 00           ECMLoopB                DB  0
  78+ 8025 00 00        JSTX                    DW  0               ;           Joystick analog value
  79+ 8027 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
  80+ 8028 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude Also Apha
  81+ 8029 00           ALP2					DB  0				; 32		ALP2	Roll Sign
  82+ 802A 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
  83+ 802B 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
  84+ 802C E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
  85+ 802D
  86+ 802D
  87+ 802D
  88+ 802D              MAXMESSAGES             EQU 5
  89+ 802D              MESSAGETIMELIMIT        EQU 20
  90+ 802D              MESSAGESIZE             EQU 33
  91+ 802D              MESSAGELINE             EQU $0001
  92+ 802D
  93+ 802D 00           MessageCount            DB  0                ; used for enquing messages later
  94+ 802E 00           MessageCurrent          DB  0
  95+ 802F 05 00        MessageIndex            DW  MAXMESSAGES
  96+ 8031 00 00 00...  MessageQueue            DS  MAXMESSAGES * MESSAGESIZE
  97+ 80D6 05           MessageTimeout          DB  MAXMESSAGES
  98+ 80D7 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
  99+ 80FC
 100+ 80FC              ; MOVED TO Universe XX19					DB	0				; page 0 &67
 101+ 80FC              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
 102+ 80FC              ;DEFUNCT EQUATE NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
 103+ 80FC 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
 104+ 80FD              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
 105+ 80FD
 106+ 80FD
 107+ 80FD 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
 108+ 8102              											;	6D		QQ15+1
 109+ 8102              											;	6E		QQ15+2
 110+ 8102              											;	6F		QQ15+3
 111+ 8102              											;	70		QQ15+4
 112+ 8102              											;	71		QQ15+5
 113+ 8102 00           QQ17					DB	0				;   72
 114+ 8103 00           XX18xlo                 DB  0               ;	72		XX18   xlo
 115+ 8104 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
 116+ 8105 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
 117+ 8106 00           XX18ylo                 DB  0               ;	75		XX18   ylo
 118+ 8107 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
 119+ 8108 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
 120+ 8109 00           XX18zlo                 DB  0               ;	78		XX18   zlo
 121+ 810A 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
 122+ 810B 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
 123+ 810C
 124+ 810C 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
 125+ 810D 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
 126+ 810E 00           DELT4Lo					DB 	0				; 7E
 127+ 810F 00           DELT4Hi					DB 	0				; 7F
 128+ 8110              DELTA4                  equ                 DELT4Lo
 129+ 8110
 130+ 8110
 131+ 8110              ; Not thise must be in this order else 16 bit fetches will fail
 132+ 8110 00           varU                    DB  0               ;   80
 133+ 8111 00           varQ					DB  0 				;	81
 134+ 8112 00           varR					DB  0 				;	82
 135+ 8113 00           varS					DB  0 				;	83
 136+ 8114              varRS                   equ varR
 137+ 8114
 138+ 8114 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
 139+ 8116
 140+ 8116 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
 141+ 8117 00           YSAV                    DB  0               ; 85
 142+ 8118 00           XX17					DB	0				; 86
 143+ 8119              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
 144+ 8119              varXX17                 equ  XX17
 145+ 8119 00           ScreenChanged           DB  0
 146+ 811A 00           ScreenIndex             DB  0
 147+ 811B 00 00        ScreenIndexTablePointer DW  0
 148+ 811D 00           InvertedYAxis           DB  0
 149+ 811E 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
 150+ 811F              											; Bit 7 Set  ShortRangeChart    $80
 151+ 811F              											; Bit 6 Set  Galactic Chart     $40
 152+ 811F              											; Bit 5 Set  Market Place       $20
 153+ 811F              											; Bit 4 Set  Status Screen      $10
 154+ 811F              											; Bit 3 Set  Display Inventory  $08
 155+ 811F                                                          ; Bit 2 Set  Planet Data        $04
 156+ 811F                                                          ; View bit combinations if the ones above not matched
 157+ 811F                                                          ; bits 1 0
 158+ 811F                                                          ;      1 1  Front view , i.e. $03
 159+ 811F                                                          ;      1 0  Aft View          $02
 160+ 811F                                                          ;      0 1  Left View         $01
 161+ 811F                                                          ;      0 0  Right view        $00
 162+ 811F              											; Bit 0 Set  Data On System
 163+ 811F              											; 0  Space View (Not a menu)
 164+ 811F 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
 165+ 8120 00           XX13                    DB  0               ;   89
 166+ 8121 00           TYPE					DB	0				; 8C used for ship type in drawing
 167+ 8122              ;Docked flag = 00 = in free space
 168+ 8122              ;              FF = Docked
 169+ 8122              ;              FE = transition
 170+ 8122              ;              FD = Setup open space and transition to not docked
 171+ 8122              ;              FC = Hyperspace manimation
 172+ 8122              ;              FB = Hyperspace complete
 173+ 8122 00           DockedFlag				DB	0				; 8E -
 174+ 8123 00           GamePaused              DB  0
 175+ 8124 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
 176+ 8125 00           varCNT                  DB  0               ; 93
 177+ 8126
 178+ 8126 00           varK					DB	0				; 40
 179+ 8127 00           varKp1					DB	0				; 41
 180+ 8128 00           varKp2					DB	0				; 42
 181+ 8129 00           varKp3					DB	0				; 43
 182+ 812A
 183+ 812A 00           varK2                   DB  0               ; 9B
 184+ 812B 00           varK2p1                 DB  0               ; 9C K2 plus 1
 185+ 812C 00           varK2p2                 DB  0               ; 9D K2 plus 2
 186+ 812D 00           varK2p3                 DB  0               ; 9E K2 plus 3
 187+ 812E
 188+ 812E 00           Point                   DB  0               ; 9F      POINT
 189+ 812F
 190+ 812F 00           varT					DB	0				; D1
 191+ 8130
 192+ 8130 00 00 00...  varVector9ByteWork      DS  9
 193+ 8139
 194+ 8139 00 00 00 00  varK3					DS	4				; D2
 195+ 813D 00           varK3p2					DB	0				; 42
 196+ 813E 00           varK3p3					DB	0				; 43
 197+ 813F              varK3p1					equ varK3+1			; D3
 198+ 813F 00 00 00 00  varK4					DS	4				; E0
 199+ 8143              varK4p1					equ varK4+1			; D3
 200+ 8143
 201+ 8143
 202+ 8143              ;Heap
 203+ 8143
 204+ 8143 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
 205+ 8145 00 00 00...  HeapData				DS	50
 206+ 8177              ; Contains 				X 16 bit, Y ;MissileArmedStatus		DB	0				; 0344 MSAR   using MissileTarget, if missile is not armed tehn target is FF
 207+ 8177              ; TODO will need an read for a list of missiles, who they are targeting an the target current vector for AI persuit
 208+ 8177              ; i.e. a list of programmed missiles in universe slot list code
 209+ 8177 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
 210+ 817E              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
 211+ 817E              ;  #&5 Does J reverse both joystick channels
 212+ 817E              ;  #&4 Does Y reverse joystick Y channel			03CB
 213+ 817E              ;  #&2 Does X toggle startup message display ? PATG?	03C9
 214+ 817E              ;  #&3 Does F toggle flashing information			03CA
 215+ 817E              ;  #&1 Does A toggle keyboard auto-recentering ?
 216+ 817E              ;  #&0 Caps-lock toggles keyboard flight damping
 217+ 817E 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
 218+ 817F 00           PlayerECMActiveCount    DB  0               ; Countdown for player ECM
 219+ 8180 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
 220+ 8181 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
 221+ 8191 00           AlienItemsAvaliability  DB	0				; 039D
 222+ 8192 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
 223+ 8193 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
 224+ 8195 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
 225+ 8196              											;
 226+ 8196 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
 227+ 8197 00           MarketPrice				DB	0				; 03AA QQ24
 228+ 8198 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
 229+ 8199 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
 230+ 819A 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
 231+ 819B 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
 232+ 819D              											; this is ship lines stack pointer so may be redundant with paging
 233+ 819D              											; LS = line stack so we will have one for now to remove later
 234+ 819D              ; not needed as we don't do security on file COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
 235+ 819D 00           DisplayEcononmy			DB	0				; 03B8
 236+ 819E 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
 237+ 819F 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
 238+ 81A0 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
 239+ 81A2 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
 240+ 81A4 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
 241+ 81A6 00 00        DisplayRadius			DW	0
 242+ 81A8              ; --- Used in creation of sun and planet----;
 243+ 81A8 00           PlanetXPos              DS  1
 244+ 81A9 00           PlanetYPos              DS  1
 245+ 81AA 00           PlanetZPos              DS  1
 246+ 81AB 00           PlanetType              DS  1
 247+ 81AC 00           SunXPos                 DS  1
 248+ 81AD 00           SunYPos                 DS  1
 249+ 81AE 00           SunZPos                 DS  1
 250+ 81AF              ; -- Current Missile Runbtime data
 251+ 81AF 00           CurrentMissileBank:     DB      0                                   ; used by missile logic as local copy of missile bank number
 252+ 81B0 00 00        MissileXPos             DW      0
 253+ 81B2 00           MissileXSgn             DB      0
 254+ 81B3 00 00        MissileYPos             DW      0
 255+ 81B5 00           MissileYSgn             DB      0
 256+ 81B6 00 00        MissileZPos             DW      0
 257+ 81B8 00           MissileZSgn             DB      0
 258+ 81B9 00 00        CurrentTargetXpos       DS      2
 259+ 81BB 00 00        CurrentTargetXsgn       DS      2
 260+ 81BD 00 00        CurrentTargetYpos       DS      2
 261+ 81BF 00 00        CurrentTargetYsgn       DS      2
 262+ 81C1 00 00        CurrentTargetZpos       DS      2
 263+ 81C3 00 00        CurrentTargetZsgn       DS      2
 264+ 81C5 00 00        TargetVectorXpos        DS      2
 265+ 81C7 00 00        TargetVectorXsgn        DS      2
 266+ 81C9 00 00        TargetVectorYpos        DS      2
 267+ 81CB 00 00        TargetVectorYsgn        DS      2
 268+ 81CD 00 00        TargetVectorZpos        DS      2
 269+ 81CF 00 00        TargetVectorZsgn        DS      2
 270+ 81D1 00           CurrentMissileBlastRange:      DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 271+ 81D2 00           CurrentMissileBlastDamage:     DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 272+ 81D3 00           CurrentMissileDetonateRange:   DB  0                       ; TODO Initi for runtime copied in when setting up a missile, allows for proximity missiles
 273+ 81D4 00           CurrentMissileDetonateDamage:  DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 274+ 81D5
 275+ 81D5              ; --- Main Loop Data -----------------------;
 276+ 81D5 00           CurrentUniverseAI       DB  0               ; current ship unviverse slot due an AI update
 277+ 81D6 00           SelectedUniverseSlot    DB  0
 278+ 81D7 00           SetStationAngryFlag     DB  0               ; used to semaphore angry space station
 279+ 81D8 00           ShipBlastCheckCounter   DB  0
 280+ 81D9 00           InnerHyperCount			DB 	0				; 2F QQ22+1
 281+ 81DA 00           OuterHyperCount			DB 	0				; 2E QQ22
 282+ 81DB 00           EventCounter            DB  0
 283+ 81DC 00           HyperCircle             DB  0
 284+ 81DD 00           MissJumpFlag            DB  0
 285+ 81DE 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
 286+ 81DF 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
 287+ 81E0 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
 288+ 81E1 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
 289+ 81E2 00           CurrentMissileCheck:    DB  0               ; if > Universe Slot list then free for next missile
 290+ 81E3 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
 291+ 81E4              UniverseSlotListSize    equ	12
 292+ 81E4 00 00 00...  UniverseSlotList        DS  UniverseSlotListSize
 293+ 81F0 00 00 00...  UniverseSlotType        DS  UniverseSlotListSize ; base type, e.g. missile, cargo etc,
 294+ 81FC              ; Probably not needed UniverseTypeCount       DS  UniverseSlotListSize
 295+ 81FC 05           ConsoleRefreshCounter   DB  ConsoleRefreshInterval ; Every 4 interations the console will update twice (once for primary and once for seconday buffer)
 296+ 81FD 00           ConsoleRedrawFlag       DB  0
 297+ 81FE 00           TextInputMode           DB  0
 298+ 81FF 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
 299+ 8200                                                          ; 7    6    5    4     3    2        1    0
 300+ 8200                                                          ; Up   Down Left Right Home Recentre
 301+ 8200 00           FireLaserPressed        DB  0
 302+ 8201              ; --- Current System Data ------------------;
 303+ 8201 00           SpaceStationSafeZone    DB  0               ; Flag to determine if we are in safe zone
 304+ 8202 00           ExtraVesselsCounter     DB  0
 305+ 8203 00           JunkCount				DB  0				; $033E
 306+ 8204 00           AsteroidCount           DB  0               ; Not used as yet
 307+ 8205 00           TransporterCount        DB  0
 308+ 8206 00           CopCount                DB  0
 309+ 8207 00           PirateCount             DB  0
 310+ 8208              ; --- Galaxy Data --------------------------;
 311+ 8208 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
 312+ 8209 00 00 00...  WorkingSeeds			DS	6
 313+ 820F 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
 314+ 8215 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
 315+ 821B 00           PresentSystemX			DB	0				; System we are currently in
 316+ 821C 00           PresentSystemY			DB  0				; System we are currently in
 317+ 821D 00           TargetSystemX			DB	0				; System we are targeting for jump
 318+ 821E 00           TargetSystemY			DB	0				; System we are targeting for jump
 319+ 821F 00           GovPresentSystem		DB	0				; 03AE Govenment
 320+ 8220 00           TekPresentSystem		DB	0				; 03AF Technology
 321+ 8221
 322+ 8221 00           CompassColor			DB	0				; 03C5
 323+ 8222 00           SoundToggle				DB	0				; 03C6
 324+ 8223 00           KeyboardRecenterToggle	DB	0				; 03C8
 325+ 8224 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
 326+ 8225 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
 327+ 8226 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
 328+ 8227 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
 329+ 8228 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
 330+ 8229 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
 331+ 822A
 332+ 822A              ; Working Data
 333+ 822A
 334+ 822A              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
 335+ 822A              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
 336+ 822A              ; $0925 =	EQUW page9+37* 1
 337+ 822A              ; $094A =	EQUW page9+37* 2
 338+ 822A              ; $096F =	EQUW page9+37* 3
 339+ 822A              ; $0994 =	EQUW page9+37* 4
 340+ 822A              ; $09B9 =	EQUW page9+37* 5
 341+ 822A              ; $09DE =	EQUW page9+37* 6
 342+ 822A              ; $0A03 =	EQUW page9+37* 7
 343+ 822A              ; $0A28 =	EQUW page9+37* 8
 344+ 822A              ; $0A4D =	EQUW page9+37* 9
 345+ 822A              ; $0A72 =	EQUW page9+37*10
 346+ 822A              ; $0A97 =	EQUW page9+37*11
 347+ 822A              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
 348+ 822A
 349+ 822A
 350+ 822A
 351+ 822A              ; 0b00 is start address of data to save
 352+ 822A              ; Now MissionData VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
 353+ 822A              											; Bit mask XXXX10XX - Thargoid plan mission
 354+ 822A
 355+ 822A 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
 356+ 822B
 357+ 822B 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
 358+ 822D 00 00        CommanderLoadAddress	DW	0				;0C03
 359+ 822F 00 00        LengthOfFile			DW	0				;0C0B
 360+ 8231 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
 361+ 8233
 362+ 8233 00 00 00...  EdgesBuffer				DS 50
 363+ 8265              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
 364+ 8265              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
 365+ 8265
 366+ 8265 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
 367+ 82AB              ShipLineStackTop		equ $ - ShipLineStack
 368+ 82AB
 369+ 82AB 00 00 00...  LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
 370+ 836B              ; LSX vector overlaps with LSO
 371+ 836B 00           LSX2					DB	0				; &0EC0	    \ LSX2 bline buffer size?
 372+ 836C 00           LSY2					DB	0           	; &0F0E	    \ LSY2
 373+ 836D
 374+ 836D              ; Star Positions are 16 bit 3d coordinates
 375+ 836D 00 00 00...  varDust                 DS  MaxNumberOfStars * 6
 376+ 83AF 00 00 00...  varDustSceen            DS  MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
 377+ 83C5 00           varStarX                DB  0
 378+ 83C6 00           varStarY                DB  0
 379+ 83C7 00 00 00...  varDustX                DS MaxNumberOfStars *2
 380+ 83DD 00 00 00...  varDustY                DS MaxNumberOfStars *2
 381+ 83F3 00 00 00...  varDustZ                DS MaxNumberOfStars *2
 382+ 8409              ; -- Player Runtime Data
 383+ 8409 00           GunTemperature          DB  0
 384+ 840A 00           CabinTemperature        DB  0
 385+ 840B 00           PlayerForwardSheild0	DB	0 ; ?????
 386+ 840C 00           PlayerForwardSheild1    DB	0
 387+ 840D 00           PlayerForwardSheild2    DB	0
 388+ 840E 00           ForeShield				DB	0				; These three must be contiguous
 389+ 840F 00           AftShield				DB	0				; .
 390+ 8410 00           PlayerEnergy			DB	0				; and in this order
 391+ 8411 00           CompassX				DB	0				; 03A8
 392+ 8412 00           CompassY				DB	0				; 03A9
 393+ 8413              ; Simplification of missile targetting
 394+ 8413              ; $FF no missile targettting enabled
 395+ 8413              ; $FE missile targetting, no target selected
 396+ 8413              ; bit 7 set then tagetting and lower nibble holds missile target and launching
 397+ 8413              ; bit 7 clear launch at selected target in lower nibble
 398+ 8413 00           MissileTargettingFlag   DB  0
 399+ 8414              ;;MissileTarget			DB  0				; 45
 400+ 8414              ;;MissileLaunchFlag       DB  0
 401+ 8414 00 00 00...  CommanderName           DS  15
 402+ 8423 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
 403+ 8424 00           BadnessStatus           DB  0
 404+ 8425              ;note rapidly changing views could reset these so need to consider it in an array
 405+ 8425              ; LaserType
 406+ 8425              ; LaserPulseRate                          ; how many pulses can be fired before long pause
 407+ 8425              ; LaserPulsePause                         ; time before next pulse - 0 = beam
 408+ 8425              ; LaserPulseRest                          ; time before pulse count resets to 0
 409+ 8425              ; LaserDamageOutput                       ; amount of damage for a laser hit
 410+ 8425              ; LaserEnergyDrain                        ; amount of energy drained by cycle
 411+ 8425              ; LaserHeat                               ; amount of heat generated
 412+ 8425              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
 413+ 8425              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
 414+ 8425              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
 415+ 8425              ; LaserTechLevel                          ; minimum tech level system to buy from
 416+ 8425              ; need to add copy table routines
 417+ 8425 00           CurrLaserType           DB  0               ; current view laser type, copied in from LaserType array
 418+ 8426 00           CurrLaserDamage         DB  0               ; copied in from LaserDamagedFlag array
 419+ 8427 00           CurrLaserPulseRate      DB  0               ; current view laser amount of pulses
 420+ 8428 00           CurrLaserPulseOnTime    DB  0               ; how many cycles the laser is on
 421+ 8429 00           CurrLaserPulseOffTime   DB  0               ; how many cycles the laser is on
 422+ 842A 00           CurrLaserPulseRest      DB  0               ; current view laser delay setup between pulses
 423+ 842B
 424+ 842B 00           CurrLaserBurstRate      DB  0
 425+ 842C 00           CurrLaserBurstCount     DB  0
 426+ 842D 00           CurrLaserDamageOutput   DB  0
 427+ 842E 00           CurrLaserEnergyDrain    DB  0
 428+ 842F 00           CurrLaserHeat           DB  0
 429+ 8430 00           CurrLaserDurability     DB  0
 430+ 8431 00           CurrLaserDurabilityAmount DB  0
 431+ 8432
 432+ 8432              ; Count down timers must be aligned like this to work
 433+ 8432 00           CurrLaserPulseOnCount   DB  0               ; how many cycles the laser is on timer
 434+ 8433 00           CurrLaserPulseOffCount  DB  0               ; how many cycles the laser is on timer
 435+ 8434 00           CurrLaserPulseRestCount DB  0               ; countdown after shooting for next shot
 436+ 8435 00           CurrLaserPulseRateCount DB  0               ; current view laser current pulses fired
 437+ 8436
 438+ 8436              ; -- Input variables
 439+ 8436 00           JoystickX				DB	0				; 034C JSTX
 440+ 8437 00           JoystickY				DB	0				; 034D JSTY
 441+ 8438 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
 442+ 8439 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
 443+ 843A
 444+ 843A              ; -- Console drawing data
 445+ 843A              FShieldStart            equ $8410
 446+ 843A              AShieldStart            equ $8D10
 447+ 843A              FuelStart               equ $9410
 448+ 843A
 449+ 843A              EnergyBar4Start         equ $A5D5
 450+ 843A              EnergyBar3Start         equ $ADD5
 451+ 843A              EnergyBar2Start         equ $B5D5
 452+ 843A              EnergyBar1Start         equ $BDD5
 453+ 843A              ; 70 /2 = 35 values
 454+ 843A              ;                            0                             1                             2                             3
 455+ 843A              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6
 456+ 843A 01 02 02 03  FuelMapping             DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,19,20,21,21,22,23,24,25,26,27,28,30,31,31
 456+ 843E 04 04 05 06
 456+ 8442 06 07 08 09
 456+ 8446 0A 0A 0B 0C
 456+ 844A 0D 0E 0E 0F
 456+ 844E 10 10 11 13
 456+ 8452 14 15 15 16
 456+ 8456 17 18 19 1A
 456+ 845A 1B 1C 1E 1F
 456+ 845E 1F
 457+ 845F              SpeedoStart             equ $84D1
 458+ 845F              ;                            0                             1                             2                             3                             4
 459+ 845F              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
 460+ 845F 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
 460+ 8463 04 04 05 06
 460+ 8467 06 07 08 09
 460+ 846B 0A 0A 0B 0C
 460+ 846F 0D 0E 0E 0F
 460+ 8473 10 10 11 12
 460+ 8477 13 14 14 15
 460+ 847B 16 17 18 18
 460+ 847F 19 1A 1A 1B
 460+ 8483 1C 1C 1D 1E
 460+ 8487 1F
 461+ 8488
 462+ 8488              DialMiddleXPos          equ $E1
 463+ 8488              RollMiddle              equ $8CE0
 464+ 8488              PitchMiddle             equ $94E0
 465+ 8488
 466+ 8488
 467+ 8488
 468+ 8488
 469+ 8488
# file closed: ./Variables/general_variables.asm
 549  8488                  INCLUDE "./Variables/general_variablesRoutines.asm"
# file opened: ./Variables/general_variablesRoutines.asm
   1+ 8488              LaserDrainSystems:      DrainSystem PlayerEnergy, CurrLaserEnergyDrain
   1+ 8488 3A 2E 84    >                        ld      a,(CurrLaserEnergyDrain)
   1+ 848B 47          >                        ld      b,a
   1+ 848C 3A 10 84    >                        ld      a,(PlayerEnergy)
   1+ 848F 90          >                        sub     a,b
   1+ 8490 32 10 84    >                        ld      (PlayerEnergy),a
   1+ 8493 38 03       >                        jr      c,.ZeroSystem
   1+ 8495 C3 9C 84    >                        jp      .ExitPoint
   1+ 8498             >.ZeroSystem:            ZeroA
   1+ 8498 AF          >                        xor a
   1+ 8499 32 10 84    >                        ld      (PlayerEnergy),a
   1+ 849C             >.ExitPoint
   2+ 849C                                      BoostSystem GunTemperature, CurrLaserHeat
   2+ 849C 3A 2F 84    >                        ld      a,(CurrLaserHeat)
   2+ 849F 47          >                        ld      b,a
   2+ 84A0 3A 09 84    >                        ld      a,(GunTemperature)
   2+ 84A3 80          >                        add     b
   2+ 84A4 32 09 84    >                        ld      (GunTemperature),a
   2+ 84A7 38 03       >                        jr      c, .MaxSystem
   2+ 84A9 C3 B1 84    >                        jp      .ExitPoint
   2+ 84AC 3E FF       >.MaxSystem:             ld      a,255
   2+ 84AE 32 09 84    >                        ld      (GunTemperature),a
   2+ 84B1             >.ExitPoint
   3+ 84B1 C9                                   ret
   4+ 84B2
   5+ 84B2
   6+ 84B2              ResetPlayerShip:        ZeroThrottle
   6+ 84B2 AF          >                        xor     a
   6+ 84B3 32 0D 81    >                        ld      (DELTA),a
   6+ 84B6 32 0E 81    >                        ld      (DELT4Lo),a
   6+ 84B9 32 0F 81    >                        ld      (DELT4Lo+1),a
   7+ 84BC                                      ZeroPitch
   7+ 84BC AF          >                        xor     a
   7+ 84BD 32 1D 80    >                        ld      (BET2),a
   7+ 84C0 32 1E 80    >                        ld      (BET2FLIP),a
   7+ 84C3 32 1B 80    >                        ld      (JSTY),a
   7+ 84C6 32 1A 80    >                        ld      (BETA),a
   8+ 84C9                                      ZeroRoll
   8+ 84C9 AF          >                        xor     a                              ; zero roll and climb
   8+ 84CA 32 29 80    >                        ld      (ALP2),a
   8+ 84CD 32 2A 80    >                        ld      (ALP2FLIP),a
   8+ 84D0 32 25 80    >                        ld      (JSTX),a
   8+ 84D3 32 27 80    >                        ld      (ALPHA),a
   9+ 84D6                                      ClearMissileTarget
   9+ 84D6 3E FF       >                        ld      a,StageMissileNoTarget
   9+ 84D8 32 13 84    >                        ld      (MissileTargettingFlag),a           ; reset targetting
  10+ 84DB                                      ClearECM
  10+ 84DB AF          >                        xor     a
  10+ 84DC 32 23 80    >                        ld      (ECMCountDown),a
  11+ 84DF                                      ChargeEnergyAndShields
  11+ 84DF 3E FF       >                        ld      a,$FF
  11+ 84E1 32 10 84    >                        ld      (PlayerEnergy),a
  11+ 84E4 32 0E 84    >                        ld      (ForeShield),a
  11+ 84E7 32 0F 84    >                        ld      (AftShield),a
  12+ 84EA                                      ClearTemperatures
  12+ 84EA AF          >                        xor     a
  12+ 84EB 32 0A 84    >                        ld      (CabinTemperature),a
  12+ 84EE 32 09 84    >                        ld      (GunTemperature),a
  13+ 84F1 CD 3E 85                             call    IsLaserUseable
  14+ 84F4                                      MMUSelectCommander
  14+ 84F4 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
  15+ 84F8 CD F4 E2                             call    LoadLaserToCurrent
  16+ 84FB C8                                   ret     z
  17+ 84FC
  18+ 84FC C9                                   ret
  19+ 84FD
  20+ 84FD 21 7E 86     AddCargoTypeD:          ld      hl,CargoTonnes
  21+ 8500 57                                   ld      d,a
  22+ 8501 ED 31                                add     hl,a
  23+ 8503 34                                   inc     (hl)
  24+ 8504 C9                                   ret
  25+ 8505
  26+ 8505 7A           CanWeScoopCargoD:       ld      a,d
  27+ 8506                                      JumpIfAGTENusng  GoldIndex, .ItMayNotBeTonnes  ; if its cargo in kgs or gs then jump
  27+ 8506 FE 0E       >                        cp     GoldIndex
  27+ 8508 D2 2A 85    >                        jp		nc,.ItMayNotBeTonnes
  28+ 850B 21 7E 86     .ItsTonnes:             ld      hl,CargoTonnes
  29+ 850E 0E 00                                ld      c,0
  30+ 8510 06 0E                                ld      b,MineralsIndex+1           ; Only count to Gold as that is in KG
  31+ 8512 7E           .AddLoop:               ld      a,(hl)
  32+ 8513 81                                   add     c
  33+ 8514 4F                                   ld      c,a                     ; add to counter
  34+ 8515 05                                   dec     b
  35+ 8516 23                                   inc     hl
  36+ 8517 10 F9                                djnz    .AddLoop
  37+ 8519 21 8F 86                             ld      hl,AlienItemsTonnes     ; Finally do alien items
  38+ 851C 7E                                   ld      a,(hl)
  39+ 851D 81                                   add     c
  40+ 851E 4F                                   ld      c,a
  41+ 851F 3A 7C 86                             ld      a,(CargoBaySize)        ; Get Bay Size
  42+ 8522                                      JumpIfAEqNusng c, .CargoFull
  42+ 8522 B9          >                        cp     c
  42+ 8523 CA 28 85    >                        jp      z,.CargoFull
  43+ 8526              .StillRoom:             ClearCarryFlag
  43+ 8526 B7          >                        or a
  44+ 8527 C9                                   ret
  45+ 8528              .CargoFull:             SetCarryFlag
  45+ 8528 37          >                        scf
  46+ 8529 C9                                   ret
  47+ 852A              .ItMayNotBeTonnes:      JumpIfAEqNusng  AlienItemsIndex,.ItsTonnes       ;ALienItems are tonnes
  47+ 852A FE 11       >                        cp     AlienItemsIndex
  47+ 852C CA 0B 85    >                        jp      z,.ItsTonnes
  48+ 852F 21 7E 86                             ld      hl,CargoTonnes
  49+ 8532 7A                                   ld      a,d
  50+ 8533 ED 31                                add     hl,a
  51+ 8535 7E                                   ld      a,(hl)
  52+ 8536                                      JumpIfAEqNusng  200, .StillRoom
  52+ 8536 FE C8       >                        cp     200
  52+ 8538 CA 26 85    >                        jp      z,.StillRoom
  53+ 853B C3 28 85                             jp      .CargoFull
  54+ 853E              ; END of rountine
  55+ 853E
  56+ 853E 3A 25 84     IsLaserUseable:         ld      a,(CurrLaserType)
  57+ 8541 FE FF                                cp      255
  58+ 8543 C8                                   ret     z
  59+ 8544 3A 26 84                             ld      a,(CurrLaserDamage)
  60+ 8547 FE FF                                cp      255
  61+ 8549 C9                                   ret
  62+ 854A
  63+ 854A CD ED 85     InitMainLoop:           call    ClearUnivSlotList
  64+ 854D AF                                   xor     a
  65+ 854E 32 D5 81                             ld      (CurrentUniverseAI),a
  66+ 8551 3E 03                                ld      a,3
  67+ 8553 32 1E 81                             ld      (MenuIdMax),a
  68+ 8556                                      SetMemFalse SetStationAngryFlag
  68+ 8556 3E FF       >                        ld      a,$FF
  68+ 8558 32 D7 81    >                        ld      (SetStationAngryFlag),a
  69+ 855B                                      SetMemFalse DockedFlag
  69+ 855B 3E FF       >                        ld      a,$FF
  69+ 855D 32 22 81    >                        ld      (DockedFlag),a
  70+ 8560              ;                        call    InitialiseFrontView
  71+ 8560 CD 2B 6C                             call    InitialiseCommander
  72+ 8563                                      MMUSelectUniverseN 2
  72+ 8563 ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
  73+ 8567 CD 20 6D                             call    SetInitialShipPosition
  74+ 856A              ; Initialist screen refresh
  75+ 856A 3E 05                                ld      a, ConsoleRefreshInterval
  76+ 856C 32 FC 81                             ld      (ConsoleRefreshCounter),a
  77+ 856F                                      SetMemFalse    ConsoleRedrawFlag
  77+ 856F 3E FF       >                        ld      a,$FF
  77+ 8571 32 FD 81    >                        ld      (ConsoleRedrawFlag),a
  78+ 8574                                      MMUSelectStockTable
  78+ 8574 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
  79+ 8578 CD AA E0                             call    generate_stock_market
  80+ 857B CD 3A 75                             call    ResetMessageQueue
  81+ 857E                                      InitEventCounter
  81+ 857E AF          >                        xor     a
  81+ 857F 32 DB 81    >                        ld      (EventCounter),a
  82+ 8582                                      ClearMissJump
  82+ 8582 3E FF       >                        ld      a,$FF
  82+ 8584 32 DD 81    >                        ld      (MissJumpFlag),a
  83+ 8587                                      SetMemFalse TextInputMode
  83+ 8587 3E FF       >                        ld      a,$FF
  83+ 8589 32 FE 81    >                        ld      (TextInputMode),a
  84+ 858C C9                                   ret
  85+ 858D
  86+ 858D 3E 00        SetSpeedZero:           ld      a,0
  87+ 858F 32 0D 81                             ld      (DELTA),a                                       ;
  88+ 8592 67                                   ld      h,a                                             ;
  89+ 8593 6F                                   ld      l,a                                             ;
  90+ 8594 22 0E 81                             ld      (DELT4Lo),hl                                    ;
  91+ 8597 C9                                   ret
  92+ 8598
  93+ 8598 3A 10 84     RechargeShip:           ld      a,(PlayerEnergy)
  94+ 859B CB 7F                                bit     7,a
  95+ 859D 28 0D                                jr      z,.UpdatePlayerEnergy
  96+ 859F 21 0E 84     .ShieldCharge:          ld      hl,ForeShield
  97+ 85A2 34                                   inc     (hl)
  98+ 85A3 20 01                                jr      nz,.DoneForeShield
  99+ 85A5 35           .ForeOverCharge:        dec     (hl)
 100+ 85A6 23           .DoneForeShield:        inc     hl                                              ; point to aft shield
 101+ 85A7 34                                   inc     (hl)
 102+ 85A8 20 01                                jr      nz,.DoneAftShield
 103+ 85AA 35                                   dec     (hl)                                            ; back to 255
 104+ 85AB 23           .DoneAftShield:         inc     hl                                              ; point to energy
 105+ 85AC 34           .UpdatePlayerEnergy:    inc     (hl)
 106+ 85AD 28 0A                                jr      z,.OverflowedEnergy
 107+ 85AF 3A 9D 86                             ld      a,(ExtraEnergyUnit)
 108+ 85B2                                      ReturnIfANENusng EquipmentItemFitted                    ; if energy unit fitted an extra step
 108+ 85B2 FE FF       >                        cp      EquipmentItemFitted
 108+ 85B4 C0          >                        ret     nz
 109+ 85B5 34           .EnergyUnitFitted:      inc     (hl)
 110+ 85B6 28 01                                jr      z,.OverflowedEnergy
 111+ 85B8 C9                                   ret
 112+ 85B9 35           .OverflowedEnergy:      dec     (hl)                                            ;  restore to 255
 113+ 85BA C9                                   ret
 114+ 85BB 21 10 84     .SkipShieldCharge:      ld      hl,PlayerEnergy
 115+ 85BE 18 EC                                jr      .UpdatePlayerEnergy
 116+ 85C0
 117+ 85C0              ; sets carry to true if target
 118+ 85C0 3A 13 84     IsMissileLockedOn:      ld      a,(MissileTargettingFlag)
 119+ 85C3 CB 7F                                bit     7,a
 120+ 85C5 28 07                                jr      z, .TargetSelected
 121+ 85C7 E6 70                                and     $70                         ; are all upper bits set (we can ignore bit 7)
 122+ 85C9 CA CE 85                             jp      z, .TargetSelected           ; if its only bit 7 then we have a lock
 123+ 85CC                                      ClearCarryFlag                      ; if bitsd 6 to 4 were set then it must be unlocked status
 123+ 85CC B7          >                        or a
 124+ 85CD C9                                   ret
 125+ 85CE              .TargetSelected:        JumpIfSlotAEmpty .TargetInvalid     ; does slot A have an target
 125+ 85CE 21 E4 81    >                        ld      hl,UniverseSlotList
 125+ 85D1 ED 31       >                        add     hl,a
 125+ 85D3 7E          >                        ld      a,(hl)
 125+ 85D4 3C          >                        inc     a
 125+ 85D5 CA DB 85    >                        jp      z,.TargetInvalid    ; if slot was ff inc would make it 0
 125+ 85D8 3D          >                        dec     a           ; get original value back for later
 126+ 85D9                                      SetCarryFlag
 126+ 85D9 37          >                        scf
 127+ 85DA C9                                   ret
 128+ 85DB 3E FF        .TargetInvalid:         ld      a, StageMissileNoTarget     ; housekeep missile status if target gone
 129+ 85DD 32 13 84                             ld      (MissileTargettingFlag),a
 130+ 85E0 C9                                   ret
 131+ 85E1
 132+ 85E1              SetMissileTargetting:   MACRO
 133+ 85E1 ~                                    SetMemTrue MissileTargettingFlag
 134+ 85E1                                      ENDM
 135+ 85E1
 136+ 85E1              ClearMissileTargetting: MACRO
 137+ 85E1 ~                                    SetMemTrue MissileTargettingFlag
 138+ 85E1                                      ENDM
 139+ 85E1
# file closed: ./Variables/general_variablesRoutines.asm
 550  85E1
 551  85E1                  INCLUDE "./Variables/UniverseSlotRoutines.asm"
# file opened: ./Variables/UniverseSlotRoutines.asm
   1+ 85E1              ; Note this code is core code and can not be in a memory bank unless do explosion code is changed too
   2+ 85E1 AF           ClearSlotCount:         xor     a
   3+ 85E2 21 E4 81                             ld      hl,UniverseSlotList
   4+ 85E5 06 0C                                ld      b, UniverseSlotListSize ; prbably not needed + UniverseSlotTypeSize
   5+ 85E7 77           .fillLoop:              ld      (hl),a
   6+ 85E8 23                                   inc     hl
   7+ 85E9 10 FC                                djnz    .fillLoop
   8+ 85EB C9                                   ret
   9+ 85EC
  10+ 85EC              ; Initialises all types to a count of 1 where there is an occupied universe slot
  11+ 85EC              ; this needs expanding to cater for a missing type, find type and increment count (use cpir?)
  12+ 85EC              ; DOE NOT WORK CorrectSlotCount:       call    ClearSlotCount
  13+ 85EC              ; DOE NOT WORK                         ld      hl,UniverseSlotCount
  14+ 85EC              ; DOE NOT WORK                         ld      de,UniverseSlotList
  15+ 85EC              ; DOE NOT WORK                         ld      b,UniverseSlotListSize
  16+ 85EC              ; DOE NOT WORK .fillLoop:              ld      a,(de)
  17+ 85EC              ; DOE NOT WORK                         cp      $FF
  18+ 85EC              ; DOE NOT WORK                         jr      z,.SkipSlot
  19+ 85EC              ; DOE NOT WORK .CorrectSlot:           ld      (hl),a
  20+ 85EC              ; DOE NOT WORK                         inc     hl
  21+ 85EC              ; DOE NOT WORK                         ld      (hl),1
  22+ 85EC              ; DOE NOT WORK                         inc     hl
  23+ 85EC              ; DOE NOT WORK                         inc     hl
  24+ 85EC              ; DOE NOT WORK .SkipSlot               inc     de
  25+ 85EC              ; DOE NOT WORK                         djnz    .fillLoop
  26+ 85EC C9                                   ret
  27+ 85ED              ; Wipe all items
  28+ 85ED 3E FF        ClearUnivSlotList:      ld      a,$FF
  29+ 85EF 21 E4 81                             ld      hl,UniverseSlotList
  30+ 85F2 06 18                                ld      b, UniverseSlotListSize * 2
  31+ 85F4 77           .fillLoop:              ld      (hl),a
  32+ 85F5 23                                   inc     hl
  33+ 85F6 10 FC                                djnz    .fillLoop
  34+ 85F8 C9                                   ret
  35+ 85F9
  36+ 85F9 21 E4 81     SetSlot0ToSpaceStation: ld      hl,UniverseSlotList
  37+ 85FC 36 02                                ld      (hl),ShipTypeStation
  38+ 85FE 21 F0 81                             ld      hl,UniverseSlotType
  39+ 8601 36 02                                ld      (hl),ShipTypeStation
  40+ 8603 C9                                   ret
  41+ 8604
  42+ 8604 21 E4 81     SetSlotAToTypeB:        ld      hl,UniverseSlotList
  43+ 8607 ED 31                                add     hl,a
  44+ 8609 70                                   ld      (hl),b
  45+ 860A C9                                   ret
  46+ 860B
  47+ 860B 21 F0 81     SetSlotAToClassB:       ld      hl,UniverseSlotType
  48+ 860E ED 31                                add     hl,a
  49+ 8610 70                                   ld      (hl),b
  50+ 8611 C9                                   ret
  51+ 8612
  52+ 8612              ; Clears all except slot A, used when say restarting a space station post launch
  53+ 8612 57           ClearFreeSlotListSaveA: ld      d,a
  54+ 8613 0E 00                                ld      c,0
  55+ 8615 21 E4 81                             ld      hl,UniverseSlotList
  56+ 8618 06 18                                ld      b, UniverseSlotListSize * 2
  57+ 861A 79           .fillLoop:              ld      a,c
  58+ 861B BA                                   cp      d
  59+ 861C 28 03                                jr      z,.SkipSlot
  60+ 861E 3E FF                                ld      a,$FF
  61+ 8620 77                                   ld      (hl),a
  62+ 8621 23           .SkipSlot:              inc     hl
  63+ 8622 23                                   inc     hl
  64+ 8623 10 F5                                djnz    .fillLoop
  65+ 8625 C9                                   ret
  66+ 8626
  67+ 8626 21 E4 81     ClearSlotA:             ld      hl,UniverseSlotList
  68+ 8629 ED 31                                add     hl,a
  69+ 862B 36 FF                                ld      (hl),$FF
  70+ 862D 3E 0C                                ld      a,UniverseSlotListSize  ; move to types
  71+ 862F ED 31                                add     hl,a
  72+ 8631 36 FF                                ld      (hl),$FF
  73+ 8633 C9                                   ret
  74+ 8634              ; Space Station will always be slot 0
  75+ 8634
  76+ 8634 21 F1 81     AreShipsPresent:        ld      hl,UniverseSlotType+1
  77+ 8637 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
  78+ 8639 7E           .NextShip:              ld      a,(hl)
  79+ 863A FE 00                                cp      ShipTypeNormal
  80+ 863C                                      ClearCarryFlag
  80+ 863C B7          >                        or a
  81+ 863D C8                                   ret     z
  82+ 863E 23                                   inc     hl
  83+ 863F 10 F8                                djnz    .NextShip
  84+ 8641                                      SetCarryFlag
  84+ 8641 37          >                        scf
  85+ 8642 C9                                   ret
  86+ 8643
  87+ 8643 21 E4 81     IsSpaceStationPresent:  ld      hl,UniverseSlotList
  88+ 8646                                      ClearCarryFlag
  88+ 8646 B7          >                        or a
  89+ 8647 7E           .SearchLoop:            ld      a,(hl)
  90+ 8648                                      ReturnIfAEqNusng ShipTypeStation
  90+ 8648 FE 02       >                        cp      ShipTypeStation
  90+ 864A C8          >                        ret     z
  91+ 864B                                      SetCarryFlag
  91+ 864B 37          >                        scf
  92+ 864C C9                                   ret
  93+ 864D
  94+ 864D 21 E4 81     GetTypeAtSlotA:         ld      hl,UniverseSlotList
  95+ 8650 ED 31                                add     hl,a
  96+ 8652 7E                                   ld      a,(hl)
  97+ 8653 C9                                   ret
  98+ 8654
  99+ 8654 21 E5 81     IsPlanetOrSpaceStation: ld      hl,UniverseSlotList+1
 100+ 8657 7E                                   ld      a,(hl)
 101+ 8658 C9                                   ret
 102+ 8659
 103+ 8659 21 E4 81     FindNextFreeSlotInC:    ld      hl,UniverseSlotList
 104+ 865C 06 0C                                ld      b, UniverseSlotListSize
 105+ 865E 0E 00                                ld      c, 0
 106+ 8660 7E           .SearchLoop:            ld      a,(hl)
 107+ 8661                                      JumpIfAEqNusng $FF, .FoundSlot
 107+ 8661 FE FF       >                        cp     $FF
 107+ 8663 CA 6C 86    >                        jp      z,.FoundSlot
 108+ 8666 0C                                   inc     c
 109+ 8667 23                                   inc     hl
 110+ 8668 10 F6                                djnz    .SearchLoop
 111+ 866A                                      SetCarryFlag
 111+ 866A 37          >                        scf
 112+ 866B C9                                   ret
 113+ 866C              .FoundSlot:             ClearCarryFlag
 113+ 866C B7          >                        or a
 114+ 866D C9                                   ret
 115+ 866E
 116+ 866E
 117+ 866E CD 59 86     FindNextFreeSlotInA:    call    FindNextFreeSlotInC
 118+ 8671 79                                   ld      a,c
 119+ 8672 C9                                   ret
 120+ 8673
# file closed: ./Variables/UniverseSlotRoutines.asm
 552  8673
 553  8673                  INCLUDE "./Variables/EquipmentVariables.asm"
# file opened: ./Variables/EquipmentVariables.asm
   1+ 8673 00           AutoDocking				DB	0				; $033F
   2+ 8674 00           PlayerECM				DB	0				; $0340
   3+ 8675 00           Laser2					DB	0				; 0343 laser Power? Not sure
   4+ 8676 00           LaserCount				DB	0				; 0346  LASCT  \ laser count =9 for pulse, cooled off?
   5+ 8677 00 00 00 00  Cash					DB  0,0,0,0			; 0361 - 0364 Cash now litte endian
   6+ 867B 19           Fuel					DB	25				; 0365  QQ14
   7+ 867C 46           CargoBaySize			DB	70				; 036E
   8+ 867D 00           CargoRunningLoad        DB  0
   9+ 867E 00 00 00 00  CargoTonnes             DB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   9+ 8682 00 00 00 00
   9+ 8686 00 00 00 00
   9+ 868A 00 00 00 00
  10+ 868E              ;CargoTonnes		    DB	16,1,2,3,4,5,6,7,6,9,10,11,12,13,14,15			; 036F - 037F	QQ20
  11+ 868E              SlaveCargoTonnes		equ CargoTonnes+3
  12+ 868E              NarcoticsCargoTonnes	equ CargoTonnes+6
  13+ 868E              FirearmsCargoTonnes		equ CargoTonnes+10
  14+ 868E              GoldCargoKGs:           equ CargoTonnes+15
  15+ 868E              AlienItemsTonnes        equ CargoTonnes+17
  16+ 868E              ; For each view laser a localised copy of the stats
  17+ 868E              ; TODO - need to add code to maintain on load/save/equipment transactions
  18+ 868E 00 00 00 00  LaserType               DS  4               ; quick reference to laser type
  19+ 8692 00 00 00 00  LaserDamagedFlag        DS  4               ; probabiliy out of 255 that it will no fire, 0 = good, 255 = will not fire
  20+ 8696              ; dont need as static from table LaserPulseRate          DS  4               ; how many pulses can be fired before long pause
  21+ 8696              ; dont need as static from table LaserPulsePause         DS  4               ; time before next pulse - 0 = beam
  22+ 8696              ; dont need as static from table LaserPulseRest          DS  4               ; time before pulse count resets to 0
  23+ 8696              ; dont need as static from table LaserDamageOutput       DS  4               ; amount of damage for a laser hit
  24+ 8696              ; dont need as static from table LaserEnergyDrain        DS  4               ; amount of energy drained by cycle
  25+ 8696              ; dont need as static from table LaserHeat               DS  4               ; amount of heat generated
  26+ 8696              ; dont need as static from table LaserDurability         DS  4               ; probabability out of 255 that a hit on it unshielded will add random amount of damage
  27+ 8696              ; dont need as static from table LaserDurabilityAmount   DS  4               ; max amount of damagage can be sustained in one damage hit
  28+ 8696
  29+ 8696
  30+ 8696              QQ20                    equ CargoTonnes
  31+ 8696 00 00 00...  EquipmentFitted         DS  EQ_ITEM_COUNT    ; Series of flags for if each item is fitted
  32+ 86B0              ECMPresent				EQU EquipmentFitted + EQ_ECM				; 0380
  33+ 86B0              FuelScoop               EQU EquipmentFitted + EQ_FUEL_SCOOPS
  34+ 86B0              EnergyBomb				EQU EquipmentFitted + EQ_ENERGY_BOMB		; 0382	Also random hyperspeace in Elite A
  35+ 86B0              ExtraEnergyUnit			EQU EquipmentFitted + EQ_ENERGY_UNIT        ; 0383
  36+ 86B0              DockingComputer 		EQU EquipmentFitted + EQ_DOCK_COMP    		; 0384
  37+ 86B0              GalacticHyperDrive		EQU EquipmentFitted + EQ_GAL_DRIVE   		; 0385
  38+ 86B0              EscapePod				EQU EquipmentFitted + EQ_ESCAPE_POD  		; 0386
  39+ 86B0 01           FuelScoopsBarrelStatus	DB	1				; 0381
  40+ 86B1
# file closed: ./Variables/EquipmentVariables.asm
 554  86B1
 555  86B1                  INCLUDE "./Variables/random_number.asm"
# file opened: ./Variables/random_number.asm
   1+ 86B1              doRandom2:									; .DORND2	\ -> &3F85 \ Restricted for explosion dust.
   2+ 86B1              doRND2:
   3+ 86B1 A7           	and		a								; fast clear carry  leave bit0 of RAND+2 at 0.
   4+ 86B2              doRandom:									;.DORND	\ -> &3F86 \ do random, new A, X.
   5+ 86B2              ; "doRandom, Random Seed update, new value in A & C)"
   6+ 86B2              ; uses a c h l registers
   7+ 86B2              doRND:                  ;exx                                     ; protect bc,de,hl
   8+ 86B2 3A 04 80                             ld		a,(RandomSeed)					; Get Seed 0
   9+ 86B5 CB 17                                rl		a								; Rotate L including carry
  10+ 86B7 4F                                   ld		c,a								; c =  double lo
  11+ 86B8 21 06 80     .AddSeed2:              ld		hl,RandomSeed2
  12+ 86BB 8E                                   adc		a,(hl)							; RAND+2
  13+ 86BC 32 04 80     .SaveAtoSeed:           ld		(RandomSeed),a					; and save RAND
  14+ 86BF 08           .SaveBtoSeed2:          ex		af,af'
  15+ 86C0 79                                   ld		a,c
  16+ 86C1 32 06 80                             ld		(RandomSeed2),a
  17+ 86C4 08                                   ex		af,af'
  18+ 86C5 3A 05 80                             ld		a,(RandomSeed1)
  19+ 86C8 4F                                   ld		c,a								; C = Seed1
  20+ 86C9 21 07 80     .AddSeed3:              ld		hl,RandomSeed3
  21+ 86CC 8E                                   adc		a,(hl)
  22+ 86CD 32 05 80                             ld		(RandomSeed1),a
  23+ 86D0 08                                   ex		af,af'
  24+ 86D1 79                                   ld		a,c
  25+ 86D2 32 07 80                             ld		(RandomSeed3),a
  26+ 86D5 08                                   ex		af,af'
  27+ 86D6                                      ;exx                                     ; get bc,de,hl back
  28+ 86D6 C9                                   ret
  29+ 86D7
  30+ 86D7 21 04 80     saveRandomSeeds:        ld      hl,RandomSeed
  31+ 86DA 11 08 80                             ld      de,RandomSeedSave
  32+ 86DD 01 04 00                             ld      bc,4
  33+ 86E0 ED A0                                ldi
  34+ 86E2 ED A0                                ldi
  35+ 86E4 ED A0                                ldi
  36+ 86E6 ED A0                                ldi
  37+ 86E8 C9                                   ret
  38+ 86E9
  39+ 86E9 21 08 80     restoreRandomSeeds:     ld      hl,RandomSeedSave
  40+ 86EC 11 04 80                             ld      de,RandomSeed
  41+ 86EF 01 04 00                             ld      bc,4
  42+ 86F2 ED A0                                ldi
  43+ 86F4 ED A0                                ldi
  44+ 86F6 ED A0                                ldi
  45+ 86F8 ED A0                                ldi
  46+ 86FA C9                                   ret
# file closed: ./Variables/random_number.asm
 556  86FB                  INCLUDE "./Variables/galaxy_seed.asm"
# file opened: ./Variables/galaxy_seed.asm
   1+ 86FB 47 41 4C 41  GALAXYSEED DB "GALAXYSEED"
   1+ 86FF 58 59 53 45
   1+ 8703 45 44
   2+ 8705 21 15 82     copy_galaxy_to_system:  ld		hl,GalaxySeeds
   3+ 8708 11 FD 80                             ld		de,SystemSeed
   4+ 870B ED A0        copy_seed:		        ldi
   5+ 870D ED A0                                ldi
   6+ 870F ED A0                                ldi
   7+ 8711 ED A0                                ldi
   8+ 8713 ED A0                                ldi
   9+ 8715 ED A0                                ldi
  10+ 8717 C9                                   ret
  11+ 8718
  12+ 8718 21 FD 80     copy_system_to_galaxy:  ld		hl,SystemSeed
  13+ 871B 11 15 82                             ld		de,GalaxySeeds
  14+ 871E 18 EB                                jr		copy_seed
  15+ 8720
  16+ 8720 21 15 82     copy_galaxy_to_working: ld		hl,GalaxySeeds
  17+ 8723 11 09 82                             ld		de,WorkingSeeds
  18+ 8726 18 E3                                jr		copy_seed
  19+ 8728
  20+ 8728 21 09 82     copy_working_to_galaxy: ld		hl,WorkingSeeds
  21+ 872B 11 15 82                             ld		de,GalaxySeeds
  22+ 872E 18 DB                                jr		copy_seed
  23+ 8730
  24+ 8730 21 09 82     copy_working_to_system: ld		hl,WorkingSeeds
  25+ 8733 11 FD 80                             ld		de,SystemSeed
  26+ 8736 18 D3                                jr		copy_seed
  27+ 8738
  28+ 8738 21 FD 80     copy_system_to_working: ld		hl,SystemSeed
  29+ 873B 11 09 82                             ld		de,WorkingSeeds
  30+ 873E 18 CB                                jr		copy_seed
  31+ 8740
  32+ 8740              next_system_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  33+ 8740 CD 43 87     		call	.NextStep					; This logic means we hard code x4
  34+ 8743              .NextStep:
  35+ 8743 CD 46 87     		call	process_seed				; This logic means we hard code x2
  36+ 8746              process_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  37+ 8746 3A FD 80     		ld		a,(SystemSeed)				; QQ15
  38+ 8749 B7           		or		a							; clear carry flag
  39+ 874A 21 FF 80     		ld		hl,SystemSeed+2				; hl -> qq+2
  40+ 874D 86           		add		a,(hl)						; a= QQ15 + QQ152
  41+ 874E 47           		ld		b,a							; partial sum lo
  42+ 874F 3A FE 80     		ld		a,(SystemSeed+1)
  43+ 8752 21 00 81     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  44+ 8755 8E           		adc		a,(hl)						; note add with carry
  45+ 8756 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  46+ 8757 3A FF 80     		ld		a,(SystemSeed+2)
  47+ 875A 32 FD 80     		ld		(SystemSeed+0),a			; copy qq152 to qq150
  48+ 875D 3A 00 81     		ld		a,(SystemSeed+3)
  49+ 8760 32 FE 80     		ld		(SystemSeed+1),a			; copy qq153 to qq151
  50+ 8763 3A 02 81     		ld		a,(SystemSeed+5)
  51+ 8766 32 00 81     		ld		(SystemSeed+3),a			; copy qq155 to qq153
  52+ 8769 3A 01 81     		ld		a,(SystemSeed+4)
  53+ 876C 32 FF 80     		ld		(SystemSeed+2),a			; copy qq154 to qq152
  54+ 876F B7           		or		a
  55+ 8770 78           		ld		a,b
  56+ 8771 21 FF 80     		ld		hl,SystemSeed+2				; hl -> qq+2
  57+ 8774 86           		add	    a,(hl)
  58+ 8775 32 01 81     		ld		(SystemSeed+4),a
  59+ 8778 79           		ld		a,c
  60+ 8779 21 00 81     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  61+ 877C 8E           		adc		a,(hl)
  62+ 877D 32 02 81     		ld		(SystemSeed+5),a
  63+ 8780 C9           		ret
  64+ 8781
  65+ 8781              next_working_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  66+ 8781 CD 84 87     		call	.NextStep					; This logic means we hard code x4
  67+ 8784              .NextStep:
  68+ 8784 CD 87 87     		call	working_seed				; This logic means we hard code x2
  69+ 8787              working_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  70+ 8787              ; x = a + c
  71+ 8787 3A 09 82     		ld		a,(WorkingSeeds)			; QQ15
  72+ 878A B7           		or		a							; clear carry flag
  73+ 878B 21 0B 82     		ld		hl,WorkingSeeds+2			; hl -> qq+2 [c]
  74+ 878E 86           		add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
  75+ 878F 47           		ld		b,a							; partial sum lo [x]
  76+ 8790              ; y = b + d	+ carry
  77+ 8790 3A 0A 82     		ld		a,(WorkingSeeds+1)          ; [b]
  78+ 8793 21 0C 82     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
  79+ 8796 8E           		adc		a,(hl)						; note add with carry
  80+ 8797 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  81+ 8798 3A 0B 82     		ld		a,(WorkingSeeds+2)
  82+ 879B 32 09 82     		ld		(WorkingSeeds+0),a			; copy qq152 to qq150 [a] = [c]
  83+ 879E 3A 0C 82     		ld		a,(WorkingSeeds+3)
  84+ 87A1 32 0A 82     		ld		(WorkingSeeds+1),a			; copy qq153 to qq151 [b] = [d]
  85+ 87A4 3A 0E 82     		ld		a,(WorkingSeeds+5)
  86+ 87A7 32 0C 82     		ld		(WorkingSeeds+3),a			; copy qq155 to qq153 [d] = [f]
  87+ 87AA 3A 0D 82     		ld		a,(WorkingSeeds+4)
  88+ 87AD 32 0B 82     		ld		(WorkingSeeds+2),a			; copy qq154 to qq152 [c] = [e]
  89+ 87B0 B7           		or		a
  90+ 87B1 78           		ld		a,b
  91+ 87B2 21 0B 82     		ld		hl,WorkingSeeds+2		    ; hl -> qq+2
  92+ 87B5 86           		add	    a,(hl)
  93+ 87B6 32 0D 82     		ld		(WorkingSeeds+4),a			; e = x + [c]
  94+ 87B9 79           		ld		a,c
  95+ 87BA 21 0C 82     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 )we don't inc as it affects carry)
  96+ 87BD 8E           		adc		a,(hl)
  97+ 87BE 32 0E 82     		ld		(WorkingSeeds+5),a			; f = y + [d] + carry
  98+ 87C1 C9           		ret
  99+ 87C2
 100+ 87C2 32           working_distX	DB 50
 101+ 87C3 32           working_distY	DB 50
 102+ 87C4 00           current_distY	DB 0
 103+ 87C5
 104+ 87C5 AF           find_present_system:    xor		a
 105+ 87C6 32 16 81                             ld		(XSAV),a
 106+ 87C9 3A FE 80     .CounterLoop:           ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 107+ 87CC 4F                                   ld		c,a
 108+ 87CD 3A 1C 82     .calcLocaldy:           ld		a,(PresentSystemY)
 109+ 87D0 47                                   ld		b,a								; so b holds Y ccord
 110+ 87D1 79                                   ld		a,c
 111+ 87D2 90                                   sub		b
 112+ 87D3 CB 7F                                bit		7,a
 113+ 87D5 28 02                                jr		z,.positivedy
 114+ 87D7 ED 44        .negativedy:            neg
 115+ 87D9 32 C4 87     .positivedy:            ld		(current_distY),a				; save cuirrent_dist Y as we need it maybe
 116+ 87DC ED 5B C2 87                          ld		de,(working_distX)
 117+ 87E0 BA                                   cp		d
 118+ 87E1 30 24                                jr		nc,.toofar
 119+ 87E3 3A 00 81     .calcLocaldx:           ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 120+ 87E6 4F                                   ld		c,a
 121+ 87E7 3A 1B 82                             ld		a,(PresentSystemX)
 122+ 87EA 47                                   ld		b,a								; so b holds Y ccord
 123+ 87EB 79                                   ld		a,c
 124+ 87EC 90                                   sub		b
 125+ 87ED CB 7F                                bit		7,a
 126+ 87EF 28 02                                jr		z,.positivedx
 127+ 87F1 ED 44        .negativedx:            neg
 128+ 87F3 4F           .positivedx:            ld		c,a
 129+ 87F4 BB                                   cp		e
 130+ 87F5 30 10                                jr		nc,.toofar
 131+ 87F7 3A C4 87     .Nearer:			    ld		a,(current_distY) 				; we have a closer system
 132+ 87FA 47                                   ld		b,a								; we have c to recall Y into b
 133+ 87FB ED 43 C2 87                          ld		(working_distX),bc
 134+ 87FF C5                                   push	bc
 135+ 8800 CD 38 87                             call 	copy_system_to_working
 136+ 8803 C1                                   pop		bc
 137+ 8804 78                                   ld		a,b								;
 138+ 8805 B1                                   or		c								;
 139+ 8806 C8                                   ret		z								; if we have distance 0 then bang on
 140+ 8807 CD 40 87     .toofar:                call	next_system_seed
 141+ 880A 3A 16 81                             ld		a,(XSAV)
 142+ 880D 3D                                   dec		a
 143+ 880E FE 00                                cp		0
 144+ 8810 C8                                   ret		z
 145+ 8811 32 16 81                             ld		(XSAV),a
 146+ 8814 18 B3                                jr		.CounterLoop
 147+ 8816
 148+ 8816              get_planet_data_working_seed:
 149+ 8816 3A 0A 82     		ld		a, (WorkingSeeds+1)
 150+ 8819 E6 07        		and		7
 151+ 881B 32 9D 81     		ld		(DisplayEcononmy),a
 152+ 881E 3A 0B 82     		ld		a, (WorkingSeeds+2)
 153+ 8821 CB 3F        		srl	a
 154+ 8823 CB 3F        		srl	a
 155+ 8825 CB 3F        		srl	a
 156+ 8827 CB 3F        		srl	a								; c/8
 157+ 8829 E6 07        		and		7
 158+ 882B 32 9E 81     		ld		(DisplayGovernment),a
 159+ 882E CB 3F        		srl	a
 160+ 8830 FE 00        		cp		0
 161+ 8832 20 08        		jr		nz,.CanBeRich
 162+ 8834              .Fedual:
 163+ 8834 3A 9D 81     		ld		a,(DisplayEcononmy)
 164+ 8837 F6 02        		or		2							; Adjust Eco for Anarchy and Feudal, set bit 1.
 165+ 8839 32 9D 81     		ld		(DisplayEcononmy),a
 166+ 883C              .CanBeRich:
 167+ 883C 3A 9D 81     		ld		a,(DisplayEcononmy)
 168+ 883F EE 07        		xor		7							; flip economy so Rich is now 7
 169+ 8841 32 9F 81     		ld		(DisplayTekLevel),a			; Flipped Eco, EcoEOR7, Rich Ind = 7
 170+ 8844 47           		ld		b,a
 171+ 8845 3A 0C 82     		ld		a,(WorkingSeeds+3)
 172+ 8848 E6 03        		and		3
 173+ 884A 80           		add		a,b
 174+ 884B 32 9F 81     		ld		(DisplayTekLevel),a			; Tek Level += seed d & 3
 175+ 884E 3A 9E 81     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 176+ 8851 CB 3F        		srl		a 							; gov/2
 177+ 8853 47           		ld		b,a
 178+ 8854 3A 9F 81     		ld		a,(DisplayTekLevel)
 179+ 8857 80           		add		a,b
 180+ 8858 32 9F 81     		ld		(DisplayTekLevel),a			; Tek += gov /2
 181+ 885B CB 27        		sla		a
 182+ 885D CB 27        		sla		a							; Onto Population (TL-1)*= 4
 183+ 885F 47           		ld		b,a
 184+ 8860 3A 9D 81     		ld		a,(DisplayEcononmy)
 185+ 8863 80           		add		a,b                  		; TechLevel*4 + Eco   7-56
 186+ 8864 47           		ld		b,a
 187+ 8865 3A 9E 81     		ld		a,(DisplayGovernment)
 188+ 8868 3C           		inc		a  							; +Government, 0 is Anarchy + 1
 189+ 8869 32 A0 81     		ld		(DisplayPopulation),a
 190+ 886C 3A 9D 81     		ld		a,(DisplayEcononmy)
 191+ 886F EE 07        		xor		7							; Onto productivity
 192+ 8871 C6 03        		add		3							;  (Flipped eco +3)
 193+ 8873 57           		ld		d,a
 194+ 8874 3A 9E 81     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 195+ 8877 C6 04        		add		4
 196+ 8879 5F           		ld		e,a
 197+ 887A ED 30        		mul									; ; DE = d*e, Productivity part 1. has hsb in A, lsb in P.
 198+ 887C 3A A0 81     		ld		a,(DisplayPopulation)		; then we use d for radius
 199+ 887F 57           		ld		d,a
 200+ 8880 ED 30        		mul
 201+ 8882 CB 23        		sla		e
 202+ 8884 CB 1A        		rr		d
 203+ 8886 CB 23        		sla		e
 204+ 8888 CB 1A        		rr		d
 205+ 888A CB 23        		sla		e
 206+ 888C CB 1A        		rr		d							; de * 8
 207+ 888E ED 53 A2 81  		ld		(DisplayProductivity),de
 208+ 8892              .DoRadius:
 209+ 8892 3A 0C 82     		ld		a,(WorkingSeeds+3)
 210+ 8895 4F           		ld		c,a
 211+ 8896 3A 0E 82     		ld		a,(WorkingSeeds+5)
 212+ 8899 E6 0F        		and		$0F							;  lower 4 bits of w2_h determine planet radius
 213+ 889B C6 0B        		add		11							;  radius min = 256*11 = 2816 km
 214+ 889D 47           		ld		b,a							;
 215+ 889E ED 43 A6 81  		ld		(DisplayRadius),bc
 216+ 88A2 C9           		ret
 217+ 88A3
# file closed: ./Variables/galaxy_seed.asm
 557  88A3                  INCLUDE "./Tables/text_tables.asm"
# file opened: ./Tables/text_tables.asm
   1+ 88A3 50 75 6C 73  StatusLaserName1	DB	"Pulse",0
   1+ 88A7 65 00
   2+ 88A9 42 65 61 6D  StatusLaserName2	DB	"Beam",0
   2+ 88AD 00
   3+ 88AE 4D 69 6C 69  StatusLaserName3    DB  "Military",0
   3+ 88B2 74 61 72 79
   3+ 88B6 00
   4+ 88B7 4D 69 6E 69  StatusLaserName4    DB  "Mining",0
   4+ 88BB 6E 67 00
   5+ 88BE 43 75 73 74  StatusLaserName5    DB  "Custom",0
   5+ 88C2 6F 6D 00
   6+ 88C5
   7+ 88C5 A3 88 A9 88  StatusLaserNameIdx	DW	StatusLaserName1,StatusLaserName2,StatusLaserName3,StatusLaserName4,StatusLaserName5
   7+ 88C9 AE 88 B7 88
   7+ 88CD BE 88
   8+ 88CF              StatusLaserNameIdxLen EQU $ - StatusLaserNameIdx
   9+ 88CF
  10+ 88CF 44 6F 63 6B  ConditionName1		DB "Docked",0
  10+ 88D3 65 64 00
  11+ 88D6 47 72 65 65  ConditionName2		DB "Green",0
  11+ 88DA 6E 00
  12+ 88DC 59 65 6C 6C  ConditionName3		DB "Yellow",0
  12+ 88E0 6F 77 00
  13+ 88E3 52 65 64 00  ConditionName4		DB "Red",0
  14+ 88E7
  15+ 88E7 CF 88 D6 88  ConditionNameIdx	DW ConditionName1,ConditionName2,ConditionName3,ConditionName4
  15+ 88EB DC 88 E3 88
  16+ 88EF              ConditionNameIdxLen EQU $ - ConditionNameIdx
  17+ 88EF
  18+ 88EF 41 42 4F 55  StatusDiagrams		DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION",0
  18+ 88F3 53 45 49 54
  18+ 88F7 49 4C 45 54
  18+ 88FB 53 54 4F 4E
  18+ 88FF 4C 4F 4E 55
  18+ 8903 54 48 4E 4F
  18+ 8907 41 4C 4C 45
  18+ 890B 58 45 47 45
  18+ 890F 5A 41 43 45
  18+ 8913 42 49 53 4F
  18+ 8917 55 53 45 53
  18+ 891B 41 52 4D 41
  18+ 891F 49 4E 44 49
  18+ 8923 52 45 41 3F
  18+ 8927 45 52 41 54
  18+ 892B 45 4E 42 45
  18+ 892F 52 41 4C 41
  18+ 8933 56 45 54 49
  18+ 8937 45 44 4F 52
  18+ 893B 51 55 41 4E
  18+ 893F 54 45 49 53
  18+ 8943 52 49 4F 4E
  18+ 8947 00
  19+ 8948
  20+ 8948 00 00 08 00  RankingTable		DW	$0000,$0008,$0010,$0020,$0040,$0080,$0200,$0A00,$1900,$4900,$FFFF
  20+ 894C 10 00 20 00
  20+ 8950 40 00 80 00
  20+ 8954 00 02 00 0A
  20+ 8958 00 19 00 49
  20+ 895C FF FF
  21+ 895E
  22+ 895E 48 61 72 6D  RankingName1		DB 	"Harmless",0
  22+ 8962 6C 65 73 73
  22+ 8966 00
  23+ 8967 4D 6F 73 74  RankingName2		DB 	"Mostly Harmless",0
  23+ 896B 6C 79 20 48
  23+ 896F 61 72 6D 6C
  23+ 8973 65 73 73 00
  24+ 8977 50 6F 6F 72  RankingName3		DB 	"Poor",0
  24+ 897B 00
  25+ 897C 41 76 65 72  RankingName4		DB 	"Average",0
  25+ 8980 61 67 65 00
  26+ 8984 41 62 6F 76  RankingName5		DB 	"Above Average",0
  26+ 8988 65 20 41 76
  26+ 898C 65 72 61 67
  26+ 8990 65 00
  27+ 8992 43 6F 6D 70  RankingName6		DB 	"Competent",0
  27+ 8996 65 74 65 6E
  27+ 899A 74 00
  28+ 899C 44 61 6E 67  RankingName7		DB 	"Dangerous",0
  28+ 89A0 65 72 6F 75
  28+ 89A4 73 00
  29+ 89A6 44 65 61 64  RankingName8		DB 	"Deadly",0
  29+ 89AA 6C 79 00
  30+ 89AD 2D 2D 2D 2D  RankingName9		DB 	"---- E L I T E ---",0
  30+ 89B1 20 45 20 4C
  30+ 89B5 20 49 20 54
  30+ 89B9 20 45 20 2D
  30+ 89BD 2D 2D 00
  31+ 89C0 53 6B 6F 6C  RankingName10		DB 	"Skollobsgod",0
  31+ 89C4 6C 6F 62 73
  31+ 89C8 67 6F 64 00
  32+ 89CC 4E 75 74 74  RankingName11		DB 	"Nutter",0
  32+ 89D0 65 72 00
  33+ 89D3
  34+ 89D3 5E 89 67 89  RankingNameIdx		dw RankingName1,RankingName2,RankingName3,RankingName4,RankingName5,RankingName6,RankingName7,RankingName8,RankingName9,RankingName10,RankingName11
  34+ 89D7 77 89 7C 89
  34+ 89DB 84 89 92 89
  34+ 89DF 9C 89 A6 89
  34+ 89E3 AD 89 C0 89
  34+ 89E7 CC 89
  35+ 89E9              RankingNameIdxLen EQU $ - RankingNameIdx
  36+ 89E9
  37+ 89E9
  38+ 89E9              getTableText:
  39+ 89E9              ; ">getTableText, hl = indexlist, a = textnbr, returns with hl = porinter to head of text"
  40+ 89E9              ; ">Note for ranking first 2 bytes are target rank"
  41+ 89E9 D5           	push	de								; save DE as we will likley need it in caller
  42+ 89EA ED 31        	add		hl,a							; 0 based ref, and its 2 bytes
  43+ 89EC ED 31        	add		hl,a
  44+ 89EE 5E           	ld		e,(hl)
  45+ 89EF 23           	inc		hl
  46+ 89F0 56           	ld		d,(hl)							; de = indexed address
  47+ 89F1 EB           	ex		de,hl							; flip it to hl
  48+ 89F2 D1           	pop		de								; retrieve de
  49+ 89F3 C9           	ret										; return with hl as start entry
  50+ 89F4
  51+ 89F4
  52+ 89F4              ;               CF      ZF      Result
  53+ 89F4              ;               -----------------------------------
  54+ 89F4              ;               0       0       HL > DE
  55+ 89F4              ;               0       1       HL == DE
  56+ 89F4              ;               1       0       HL < DE
  57+ 89F4              ;               1       1       Impossible
  58+ 89F4              getRankIndex:
  59+ 89F4              ; ">getRank, de = kill count, returns a = index,hl destroyed"
  60+ 89F4              ; ">Note for ranking first 2 bytes are target rank"
  61+ 89F4 7A           	ld		a,d
  62+ 89F5 B3           	or		e
  63+ 89F6 FE 00        	cp		0
  64+ 89F8 C8           	ret		z								; quicks skip for 0 kills
  65+ 89F9 AF           	xor 	a
  66+ 89FA 21 48 89     	ld		hl,RankingTable
  67+ 89FD              .testLoop:
  68+ 89FD 4E           	ld		c,(hl)
  69+ 89FE 23           	inc		hl
  70+ 89FF 46           	ld		b,(hl)							; bc = ranking
  71+ 8A00 E5           	push	hl
  72+ 8A01 60           	ld		h,b
  73+ 8A02 69           	ld		l,c
  74+ 8A03 CD F1 96     	call	compare16HLDE
  75+ 8A06 38 06        	jr		c,.HLLTDE
  76+ 8A08              .HLGTEDE									; Found the correct rank
  77+ 8A08 E1           	pop		hl
  78+ 8A09 23           	inc		hl								; move to next value
  79+ 8A0A 23           	inc		hl
  80+ 8A0B 3C           	inc		a								; we canloop forever as if kills was $FFFF then hits nutter rank but also +1 = 0000 as its 16 bit
  81+ 8A0C 18 EF        	jr		.testLoop
  82+ 8A0E              .HLLTDE:									; HL < Kills so found correct rank
  83+ 8A0E E1           	pop		hl
  84+ 8A0F C9           	ret
  85+ 8A10
# file closed: ./Tables/text_tables.asm
 558  8A10                  INCLUDE "./Tables/dictionary.asm"
# file opened: ./Tables/dictionary.asm
   1+ 8A10 58 00        WordDummy					DB  "X",0
   2+ 8A12 46 72 6F 6E  WordFront					DB	"Front",0              ;1
   2+ 8A16 74 00
   3+ 8A18 52 69 67 68  WordRight					DB	"Right",0              ;2
   3+ 8A1C 74 00
   4+ 8A1E 4C 65 66 74  WordLeft 					DB	"Left",0               ;3
   4+ 8A22 00
   5+ 8A23 52 65 61 72  WordRear   	 				DB	"Rear",0               ;4
   5+ 8A27 00
   6+ 8A28 4C 61 72 67  WordLarge           		DB  "Large",0              ;5
   6+ 8A2C 65 00
   7+ 8A2E 45 73 63 61  WordEscape          		DB  "Escape",0             ;6
   7+ 8A32 70 65 00
   8+ 8A35 50 6F 64 00  WordPod             		DB  "Pod",0                ;7
   9+ 8A39 43 61 72 67  WordCargo           		DB  "Cargo",0              ;8
   9+ 8A3D 6F 00
  10+ 8A3F 42 61 79 00  WordBay             		DB  "Bay",0                ;9
  11+ 8A43 46 75 65 6C  WordFuel            		DB  "Fuel",0               ;10
  11+ 8A47 00
  12+ 8A48 53 63 6F 6F  WordScoops          		DB  "Scoops",0             ;11
  12+ 8A4C 70 73 00
  13+ 8A4F 45 2E 43 2E  WordECM             		DB  "E.C.M.",0             ;12
  13+ 8A53 4D 2E 00
  14+ 8A56 53 79 73 74  WordSystem          		DB  "System",0             ;13
  14+ 8A5A 65 6D 00
  15+ 8A5D 45 6E 65 72  WordEnergy					DB  "Energy",0             ;14
  15+ 8A61 67 79 00
  16+ 8A64 42 6F 6D 62  WordBomb					DB  "Bomb",0               ;15
  16+ 8A68 00
  17+ 8A69 4C 61 73 65  WordLaser					DB  "Laser",0              ;16
  17+ 8A6D 72 00
  18+ 8A6F 50 75 6C 73  WordPulse           		DB  "Pulse",0              ;17
  18+ 8A73 65 00
  19+ 8A75 42 65 61 6D  WordBeam            		DB  "Beam",0               ;18
  19+ 8A79 00
  20+ 8A7A 4D 69 6C 69  WordMiliary         		DB  "Miliary",0            ;19
  20+ 8A7E 61 72 79 00
  21+ 8A82 4D 69 6E 69  WordMining          		DB  "Mining",0             ;20
  21+ 8A86 6E 67 00
  22+ 8A89 43 75 73 74  WordCustom          		DB  "Custom",0             ;21
  22+ 8A8D 6F 6D 00
  23+ 8A90 55 6E 69 74  WordUnit            		DB  "Unit",0               ;22
  23+ 8A94 00
  24+ 8A95 53 68 69 65  WordShield          		DB  "Shield",0             ;23
  24+ 8A99 6C 64 00
  25+ 8A9C 44 6F 63 6B  WordDocking         		DB  "Docking",0            ;24
  25+ 8AA0 69 6E 67 00
  26+ 8AA4 43 6F 6D 70  WordComputers       		DB  "Computers",0          ;25
  26+ 8AA8 75 74 65 72
  26+ 8AAC 73 00
  27+ 8AAE 48 79 70 65  WordHyperspace      		DB  "Hyperspace",0         ;26
  27+ 8AB2 72 73 70 61
  27+ 8AB6 63 65 00
  28+ 8AB9 47 61 6C 61  WordGalactic        		DB  "Galactic",0           ;27
  28+ 8ABD 63 74 69 63
  28+ 8AC1 00
  29+ 8AC2 45 78 74 72  WordExtra           		DB  "Extra",0              ;28
  29+ 8AC6 61 00
  30+ 8AC8 43 6C 65 61  WordClean           		DB  "Clean",0              ;29
  30+ 8ACC 6E 00
  31+ 8ACE 4F 66 66 65  WordOffender        		DB  "Offender",0           ;30
  31+ 8AD2 6E 64 65 72
  31+ 8AD6 00
  32+ 8AD7 46 75 67 69  WordFugitive        		DB  "Fugitive",0           ;31
  32+ 8ADB 74 69 76 65
  32+ 8ADF 00
  33+ 8AE0 46 6F 6F 64  WordFood					DB	"Food",0               ;32
  33+ 8AE4 00
  34+ 8AE5 54 65 78 74  WordTextiles				DB 	"Textiles",0           ;33
  34+ 8AE9 69 6C 65 73
  34+ 8AED 00
  35+ 8AEE 52 61 64 69  WordRadioactives			DB  "Radioactives",0       ;34
  35+ 8AF2 6F 61 63 74
  35+ 8AF6 69 76 65 73
  35+ 8AFA 00
  36+ 8AFB 53 6C 61 76  WordSlaves					DB  "Slaves",0             ;35
  36+ 8AFF 65 73 00
  37+ 8B02 4C 69 71 75  WordLiquorWines     		DB  "Liquor/Wines",0       ;36
  37+ 8B06 6F 72 2F 57
  37+ 8B0A 69 6E 65 73
  37+ 8B0E 00
  38+ 8B0F 4C 75 78 75  WordLuxuries  	    		DB  "Luxuries",0	       ;37
  38+ 8B13 72 69 65 73
  38+ 8B17 00
  39+ 8B18 4E 61 72 63  WordNarcotics  	    		DB  "Narcotics",0	       ;38
  39+ 8B1C 6F 74 69 63
  39+ 8B20 73 00
  40+ 8B22 4D 61 63 68  WordMachinery  	    		DB  "Machinery",0	       ;39
  40+ 8B26 69 6E 65 72
  40+ 8B2A 79 00
  41+ 8B2C 41 6C 6C 6F  WordAlloys  				DB  "Alloys",0		       ;40
  41+ 8B30 79 73 00
  42+ 8B33 46 69 72 65  WordFirearms  	    		DB  "Firearms",0	       ;41
  42+ 8B37 61 72 6D 73
  42+ 8B3B 00
  43+ 8B3C 46 75 72 73  WordFurs  		    		DB  "Furs",0	           ;42
  43+ 8B40 00
  44+ 8B41 4D 69 6E 65  WordMinerals  	    		DB  "Minerals",0           ;43
  44+ 8B45 72 61 6C 73
  44+ 8B49 00
  45+ 8B4A 47 6F 6C 64  WordGold  		    		DB  "Gold",0	           ;44
  45+ 8B4E 00
  46+ 8B4F 50 6C 61 74  WordPlatinum  	    		DB  "Platinum",0           ;45
  46+ 8B53 69 6E 75 6D
  46+ 8B57 00
  47+ 8B58 47 65 6D 2D  WordGemStones  				DB  "Gem-Stones",0         ;46
  47+ 8B5C 53 74 6F 6E
  47+ 8B60 65 73 00
  48+ 8B63 41 6C 69 65  WordAlienItems      		DB  "Alien Items",0        ;47
  48+ 8B67 6E 20 49 74
  48+ 8B6B 65 6D 73 00
  49+ 8B6F 54 6F 6E 6E  WordTonnes          		DB  "Tonnes",0             ;48
  49+ 8B73 65 73 00
  50+ 8B76 4B 69 6C 6F  WordKilograms       		DB  "Kilograms",0          ;49
  50+ 8B7A 67 72 61 6D
  50+ 8B7E 73 00
  51+ 8B80 47 72 61 6D  WordGrams           		DB  "Grams",0			   ;50
  51+ 8B84 73 00
  52+ 8B86 53 68 6F 72  WordShort           		DB  "Short",0			   ;51
  52+ 8B8A 74 00
  53+ 8B8C 52 61 6E 67  WordRange           		DB  "Range",0			   ;52
  53+ 8B90 65 00
  54+ 8B92 43 68 61 72  WordChart	        		DB  "Chart",0			   ;53
  54+ 8B96 74 00
  55+ 8B98 44 61 74 61  WordData					DB	"Data",0			   ;54
  55+ 8B9C 00
  56+ 8B9D 4F 6E 00     WordOn						DB  "On",0                 ;55
  57+ 8BA0 44 69 73 74  WordDistance        		DB  "Distance",0           ;56
  57+ 8BA4 61 6E 63 65
  57+ 8BA8 00
  58+ 8BA9 45 63 6F 6E  WordEconomy         		DB  "Economy",0            ;57
  58+ 8BAD 6F 6D 79 00
  59+ 8BB1 47 6F 76 65  WordGovernment      		DB  "Government",0         ;58
  59+ 8BB5 72 6E 6D 65
  59+ 8BB9 6E 74 00
  60+ 8BBC 54 65 63 68  WordTechLevel       		DB  "TechLevel",0          ;59
  60+ 8BC0 4C 65 76 65
  60+ 8BC4 6C 00
  61+ 8BC6 50 6F 70 75  WordPopulation      		DB  "Population",0         ;60
  61+ 8BCA 6C 61 74 69
  61+ 8BCE 6F 6E 00
  62+ 8BD1 4D 69 6C 6C  WordMillion         		DB  "Million",0            ;61
  62+ 8BD5 69 6F 6E 00
  63+ 8BD9 42 69 6C 6C  WordBillion         		DB  "Billion",0            ;62
  63+ 8BDD 69 6F 6E 00
  64+ 8BE1 47 72 6F 73  WordGross           		DB  "Gross",0              ;63
  64+ 8BE5 73 00
  65+ 8BE7 50 72 6F 64  WordProductivity    		DB  "Productivity",0       ;64
  65+ 8BEB 75 63 74 69
  65+ 8BEF 76 69 74 79
  65+ 8BF3 00
  66+ 8BF4 41 76 65 72  WordAverage         		DB  "Average",0            ;65
  66+ 8BF8 61 67 65 00
  67+ 8BFC 52 61 64 69  WordRadius          		DB  "Radius",0             ;66
  67+ 8C00 75 73 00
  68+ 8C03 4B 4D 00     WordKM              		DB  "KM",0                 ;67
  69+ 8C06 4D 20 43 52  WordMCR             		DB  "M CR",0               ;68
  69+ 8C0A 00
  70+ 8C0B 52 69 63 68  WordRich					DB  "Rich",0               ;69
  70+ 8C0F 00
  71+ 8C10 41 76 67 00  WordAvg         			DB  "Avg",0            	   ;70
  72+ 8C14 4D 61 69 6E  WordMainly          		DB  "Mainly",0             ;71
  72+ 8C18 6C 79 00
  73+ 8C1B 50 6F 6F 72  WordPoor            		DB  "Poor",0               ;72
  73+ 8C1F 00
  74+ 8C20 49 6E 64 75  WordIndustrial      		DB  "Industrial",0         ;73
  74+ 8C24 73 74 72 69
  74+ 8C28 61 6C 00
  75+ 8C2B 41 67 72 69  WordAgricultural    		DB  "Agricultural",0       ;74
  75+ 8C2F 63 75 6C 74
  75+ 8C33 75 72 61 6C
  75+ 8C37 00
  76+ 8C38 41 6E 61 72  WordAnarchy                 DB  "Anarchy",0            ;75
  76+ 8C3C 63 68 79 00
  77+ 8C40 46 65 75 64  WordFeudal                  DB  "Feudal",0             ;76
  77+ 8C44 61 6C 00
  78+ 8C47 4D 75 6C 74  WordMultiGovernment         DB  "Multi-Government",0   ;77
  78+ 8C4B 69 2D 47 6F
  78+ 8C4F 76 65 72 6E
  78+ 8C53 6D 65 6E 74
  78+ 8C57 00
  79+ 8C58 44 69 63 74  WordDictatorship            DB  "Dictatorship",0       ;78
  79+ 8C5C 61 74 6F 72
  79+ 8C60 73 68 69 70
  79+ 8C64 00
  80+ 8C65 43 6F 6D 6D  WordCommunist               DB  "Communist",0          ;79
  80+ 8C69 75 6E 69 73
  80+ 8C6D 74 00
  81+ 8C6F 43 6F 6E 66  WordConfederacy             DB  "Confederacy",0        ;80
  81+ 8C73 65 64 65 72
  81+ 8C77 61 63 79 00
  82+ 8C7B 44 65 6D 6F  WordDemocracy               DB  "Democracy",0          ;81
  82+ 8C7F 63 72 61 63
  82+ 8C83 79 00
  83+ 8C85 43 6F 72 70  WordCorporate               DB  "Corporate State",0    ;82
  83+ 8C89 6F 72 61 74
  83+ 8C8D 65 20 53 74
  83+ 8C91 61 74 65 00
  84+ 8C95 53 74 61 74  WordState 					DB  "State",0              ;83
  84+ 8C99 65 00
  85+ 8C9B 4C 69 67 68  WordLight 					DB  "Light",0              ;84
  85+ 8C9F 74 00
  86+ 8CA1 59 65 61 72  WordYears 					DB  "Years",0              ;85
  86+ 8CA5 73 00
  87+ 8CA7 30 00        Word0						DB  "0",0				   ;86
  88+ 8CA9 4D 61 72 6B  WordMarket					DB  "Market",0			   ;87
  88+ 8CAD 65 74 00
  89+ 8CB0 50 72 69 63  WordPrices					DB  "Prices",0			   ;88
  89+ 8CB4 65 73 00
  90+ 8CB7 50 72 6F 64  WordProduct    				DB  "Product",0  		   ;89
  90+ 8CBB 75 63 74 00
  91+ 8CBF 55 6F 4D 00  WordUoM						DB  "UoM",0                ;90
  92+ 8CC3 50 72 69 63  WordPrice					DB  "Price",0              ;91
  92+ 8CC7 65 00
  93+ 8CC9 46 6F 72 00  WordFor                     DB  "For",0                ;92
  94+ 8CCD 53 61 6C 65  WordSale                    DB  "Sale",0               ;93
  94+ 8CD1 00
  95+ 8CD2 74 00        Wordt						DB  "t",0                  ;94
  96+ 8CD4 6B 67 00     Wordkg						DB  "kg",0                 ;95
  97+ 8CD7 67 00        Wordg						DB  "g",0                  ;96
  98+ 8CD9 51 75 61 6E  WordQuantity				DB  "Quanitity",0		   ;97
  98+ 8CDD 69 74 69 74
  98+ 8CE1 79 00
  99+ 8CE3 49 6E 76 00  WordInv                     DB  "Inv",0                ;98
 100+ 8CE7 53 74 6F 63  WordStock                   DB  "Stock",0              ;99
 100+ 8CEB 6B 00
 101+ 8CED 45 71 75 69  WordEquip                   DB  "Equip",0              ;100
 101+ 8CF1 70 00
 102+ 8CF3 53 68 69 70  WordShip                    DB  "Ship",0               ;101
 102+ 8CF7 00
 103+ 8CF8 4D 69 73 73  WordMissile                 DB  "Missile",0            ;102
 103+ 8CFC 69 6C 65 00
 104+ 8D00 48 79 70 65  WordHyperdrive              DB  "Hyperdrive",0
 104+ 8D04 72 64 72 69
 104+ 8D08 76 65 00
 105+ 8D0B 4D 69 6C 69  WordMilitary                DB  "Military",0
 105+ 8D0F 74 61 72 79
 105+ 8D13 00
 106+ 8D14
 107+ 8D14 10 8A 12 8A  WordIdx				DW  WordDummy,          WordFront,        WordRight,        WordLeft		;0-3
 107+ 8D18 18 8A 1E 8A
 108+ 8D1C 23 8A 28 8A  					DW  WordRear,           WordLarge,        WordEscape,       WordPod      	;4-7
 108+ 8D20 2E 8A 35 8A
 109+ 8D24 39 8A 3F 8A  					DW  WordCargo,          WordBay,          WordFuel,         WordScoops   	;8
 109+ 8D28 43 8A 48 8A
 110+ 8D2C 4F 8A 56 8A  					DW  WordECM,            WordSystem,       WordEnergy,       WordBomb     	;12
 110+ 8D30 5D 8A 64 8A
 111+ 8D34 69 8A 6F 8A  					DW  WordLaser,          WordPulse,        WordBeam,         WordMiliary  	;16
 111+ 8D38 75 8A 7A 8A
 112+ 8D3C 82 8A 89 8A  					DW  WordMining,         WordCustom,       WordUnit,         WordShield   	;20
 112+ 8D40 90 8A 95 8A
 113+ 8D44 9C 8A A4 8A  					DW  WordDocking,        WordComputers,    WordHyperspace,   WordGalactic 	;24
 113+ 8D48 AE 8A B9 8A
 114+ 8D4C C2 8A C8 8A  					DW  WordExtra,          WordClean,        WordOffender,     WordFugitive	;28
 114+ 8D50 CE 8A D7 8A
 115+ 8D54 E0 8A E5 8A  					DW  WordFood,           WordTextiles,     WordRadioactives, WordSlaves		;32
 115+ 8D58 EE 8A FB 8A
 116+ 8D5C 02 8B 0F 8B  					DW  WordLiquorWines,    WordLuxuries,     WordNarcotics,    WordMachinery   ;36
 116+ 8D60 18 8B 22 8B
 117+ 8D64 2C 8B 33 8B  					DW  WordAlloys,         WordFirearms,     WordFurs,         WordMinerals    ;40
 117+ 8D68 3C 8B 41 8B
 118+ 8D6C 4A 8B 4F 8B  					DW  WordGold,           WordPlatinum,     WordGemStones,    WordAlienItems  ;44               ;
 118+ 8D70 58 8B 63 8B
 119+ 8D74 6F 8B 76 8B  WordIdxUoMFull		DW  WordTonnes,         WordKilograms,    WordGrams,		WordShort		;48
 119+ 8D78 80 8B 86 8B
 120+ 8D7C 8C 8B 92 8B  					DW	WordRange,		    WordChart,        WordData,         WordOn          ;52
 120+ 8D80 98 8B 9D 8B
 121+ 8D84 A0 8B A9 8B  					DW  WordDistance,       WordEconomy,      WordGovernment,   WordTechLevel   ;56
 121+ 8D88 B1 8B BC 8B
 122+ 8D8C C6 8B D1 8B  					DW  WordPopulation,     WordMillion,      WordBillion,      WordGross       ;60
 122+ 8D90 D9 8B E1 8B
 123+ 8D94 E7 8B F4 8B  					DW  WordProductivity,   WordAverage,      WordRadius,       WordKM          ;64
 123+ 8D98 FC 8B 03 8C
 124+ 8D9C 06 8C        					DW  WordMCR																	;68
 125+ 8D9E 0B 8C 10 8C  WordIdxEconomy		DW  WordRich,           WordAvg,      	  WordMainly,       WordPoor        ;69
 125+ 8DA2 14 8C 1B 8C
 126+ 8DA6 20 8C 2B 8C                      DW  WordIndustrial,     WordAgricultural									;73
 127+ 8DAA 38 8C 40 8C  WordIdxGovernment	DW  WordAnarchy,        WordFeudal,       WordMultiGovernment, WordDictatorship ;75
 127+ 8DAE 47 8C 58 8C
 128+ 8DB2 65 8C 6F 8C                      DW  WordCommunist,      WordConfederacy,  WordDemocracy,       WordCorporate ;79
 128+ 8DB6 7B 8C 85 8C
 129+ 8DBA 95 8C 9B 8C  					DW  WordState,          WordLight,        WordYears,           Word0         ; 83
 129+ 8DBE A1 8C A7 8C
 130+ 8DC2 A9 8C B0 8C  WordIdxMarketmenu	DW  WordMarket,         WordPrices,       WordProduct,         WordUoM	    ;87
 130+ 8DC6 B7 8C BF 8C
 131+ 8DCA C3 8C C9 8C                      DW  WordPrice,          WordFor,          WordSale                          ;91
 131+ 8DCE CD 8C
 132+ 8DD0 D2 8C D4 8C  WordIdxUomAbbrev	DW	Wordt,				Wordkg,           Wordg                 		    ;94
 132+ 8DD4 D7 8C
 133+ 8DD6 D9 8C E3 8C  					DW  WordQuantity,       WordInv,          WordStock,           WordEquip	;97
 133+ 8DDA E7 8C ED 8C
 134+ 8DDE F3 8C F8 8C                      DW  WordShip,           WordMissile       ; 101
 135+ 8DE2
 136+ 8DE2              ; Phrases
 137+ 8DE2 05 08 09 00  TextLargeCargoBay			DB 	5,8,9,0          ;0
 138+ 8DE6 06 07 00     TextEscapePod				DB	6,7,0            ;1
 139+ 8DE9 0A 0B 00     TextFuelScoops				DB	10,11,0          ;2
 140+ 8DEC 0C 0D 00     TextECMSystem				DB	12,13,0          ;3
 141+ 8DEF 0E 0F 00     TextEnergyBomb				DB	14,15,0          ;4
 142+ 8DF2 0E 16 00     TextEnergyUnit				DB	14,22,0          ;5
 143+ 8DF5 18 19 00     TextDockingComp     		DB  24,25,0          ;6
 144+ 8DF8 1B 1A 00     TextGalacticHyper			DB	27,26,0          ;7
 145+ 8DFB 01 12 10 00  TextFrontLaser      		DB  01,18,16,0       ;8
 146+ 8DFF 03 12 10 00  TextLeftLaser       		DB  03,18,16,0       ;9
 147+ 8E03 02 12 10 00  TextRightLaser      		DB  02,18,16,0       ;10
 148+ 8E07 04 12 10 00  TextRearLaser       		DB  04,18,16,0       ;11
 149+ 8E0B 33 34 35 00  TextShortRangeChart 		DB	51,52,53,0       ;12
 150+ 8E0F 1B 35 00     TextGalacticChart   		DB	27,53,0          ;13
 151+ 8E12 36 37 00     TextDataOn					DB	54,55,0          ;14
 152+ 8E15 45 49 00     TextRichIndustrial          DB  69,73,0          ;15
 153+ 8E18 46 49 00     TextAvgIndustrial           DB  70,73,0			 ;16
 154+ 8E1B 47 49 00     TextMainIndustrial          DB  71,73,0          ;17
 155+ 8E1E 48 49 00     TextPoorIndustrial          DB  72,73,0          ;18
 156+ 8E21 45 4A 00     TextRichAgricultural        DB  69,74,0          ;19
 157+ 8E24 46 4A 00     TextAvgAgricultural         DB  70,74,0          ;20
 158+ 8E27 47 4A 00     TextMainAgricultural        DB  71,74,0          ;21
 159+ 8E2A 48 4A 00     TextPoorAgricultural        DB  72,74,0          ;22
 160+ 8E2D 54 55 00     TextLightYears				DB  84,85,0			 ;23
 161+ 8E30 56 54 55 00  Text0LightYears				DB  86,84,85,0		 ;24
 162+ 8E34 57 58 00     TextMarketPrices			DB  87,88,0			 ;25
 163+ 8E37 64 65        TextEquipShip               DB  100,101          ;26
 164+ 8E39
 165+ 8E39 00           TextDummy					DB  0
 166+ 8E3A
 167+ 8E3A E2 8D E6 8D  TextTokens			DW  TextLargeCargoBay, TextEscapePod, TextFuelScoops				; 0 2
 167+ 8E3E E9 8D
 168+ 8E40 EC 8D EF 8D  					DW  TextECMSystem, TextEnergyBomb, TextEnergyUnit					; 3 5
 168+ 8E44 F2 8D
 169+ 8E46 F5 8D F8 8D  					DW  TextDockingComp, TextGalacticHyper  							; 6 7
 170+ 8E4A FB 8D FF 8D  					DW	TextFrontLaser, TextLeftLaser, TextRightLaser, TextRearLaser	; 8 11
 170+ 8E4E 03 8E 07 8E
 171+ 8E52 0B 8E 0F 8E  					DW  TextShortRangeChart, TextGalacticChart, TextDataOn				; 12 14
 171+ 8E56 12 8E
 172+ 8E58 15 8E 18 8E  TextTokenEconomy	DW  TextRichIndustrial, TextAvgIndustrial, TextPoorIndustrial, TextMainIndustrial, TextMainAgricultural, TextRichAgricultural, TextAvgAgricultural,  TextPoorAgricultural
 172+ 8E5C 1E 8E 1B 8E
 172+ 8E60 27 8E 21 8E
 172+ 8E64 24 8E 2A 8E
 173+ 8E68 2D 8E        					DW  TextLightYears		                                            ; 21 23
 174+ 8E6A 30 8E 34 8E  					DW  Text0LightYears, TextMarketPrices
 175+ 8E6E 39 8E        					DW  TextDummy;  25
 176+ 8E70 00 00 00...  TextBuffer			DS	33
 177+ 8E91
 178+ 8E91              TextEconomyOffset   EQU (TextTokenEconomy - TextTokens)/2
 179+ 8E91              TextGovOffset       EQU (WordIdxGovernment - WordIdx)/2
 180+ 8E91
 181+ 8E91              CapitaliseString:
 182+ 8E91              ; ">CapitaliseString hl = address"
 183+ 8E91              .CapLoop:
 184+ 8E91 23           	inc		hl
 185+ 8E92 7E           	ld		a,(hl)
 186+ 8E93 FE 00        	cp		0
 187+ 8E95 C8           	ret		z
 188+ 8E96 FE 5B        	cp		'Z'+1
 189+ 8E98 30 F7        	jr		nc,.CapLoop
 190+ 8E9A FE 41        	cp		'A'
 191+ 8E9C 38 F3        	jr		c,.CapLoop
 192+ 8E9E              .LowerCase:
 193+ 8E9E C6 20        	add		a,'a'-'A'
 194+ 8EA0 77           	ld		(hl),a
 195+ 8EA1 18 EE        	jr		.CapLoop
 196+ 8EA3
 197+ 8EA3              WordIndexToAddress:
 198+ 8EA3 21 14 8D     	ld		hl,WordIdx
 199+ 8EA6 ED 31        	add		hl,a
 200+ 8EA8 ED 31        	add		hl,a
 201+ 8EAA D5           	push	de
 202+ 8EAB 5E           	ld		e,(hl)
 203+ 8EAC 23           	inc		hl
 204+ 8EAD 56           	ld		d,(hl)
 205+ 8EAE EB           	ex		de,hl
 206+ 8EAF D1           	pop		de
 207+ 8EB0 C9           	ret
 208+ 8EB1
 209+ 8EB1
 210+ 8EB1              expandTokenToString:
 211+ 8EB1              ; ">expandTokenToString a = texttoken"
 212+ 8EB1 21 3A 8E     	ld		hl,TextTokens
 213+ 8EB4 CD E9 89     	call	getTableText
 214+ 8EB7 11 70 8E     	ld		de,TextBuffer
 215+ 8EBA              .ReadLoop:
 216+ 8EBA 7E           	ld		a,(hl)
 217+ 8EBB FE 00        	cp		0
 218+ 8EBD 28 1B        	jr		z,.ReadDone
 219+ 8EBF E5           	push	hl
 220+ 8EC0 D5           	push	de
 221+ 8EC1 21 14 8D     	ld		hl,WordIdx
 222+ 8EC4 CD E9 89     	call	getTableText
 223+ 8EC7 D1           	pop		de
 224+ 8EC8              .WordExpandLoop:
 225+ 8EC8 7E           	ld		a,(hl)
 226+ 8EC9 FE 00        	cp		0
 227+ 8ECB 28 05        	jr		z,.AddSpace
 228+ 8ECD              ;.GetChar:
 229+ 8ECD 12           	ld		(de),a
 230+ 8ECE 13           	inc		de
 231+ 8ECF 23           	inc		hl
 232+ 8ED0 18 F6        	jr		.WordExpandLoop
 233+ 8ED2              .AddSpace:
 234+ 8ED2 3E 20        	ld		a,' '
 235+ 8ED4 12           	ld		(de),a
 236+ 8ED5 13           	inc		de
 237+ 8ED6 E1           	pop		hl
 238+ 8ED7 23           	inc		hl
 239+ 8ED8 18 E0        	jr		.ReadLoop
 240+ 8EDA              .ReadDone:
 241+ 8EDA 1B           	dec		de
 242+ 8EDB AF           	xor		a
 243+ 8EDC 12           	ld		(de),a
 244+ 8EDD C9           	ret
 245+ 8EDE
# file closed: ./Tables/dictionary.asm
 559  8EDE                  INCLUDE "./Tables/name_digrams.asm"
# file opened: ./Tables/name_digrams.asm
   1+ 8EDE 41 42 4F 55  name_digrams	DB "ABOUSEITILETSTONLONUTHNO"
   1+ 8EE2 53 45 49 54
   1+ 8EE6 49 4C 45 54
   1+ 8EEA 53 54 4F 4E
   1+ 8EEE 4C 4F 4E 55
   1+ 8EF2 54 48 4E 4F
   2+ 8EF6 41 4C 4C     name_digrams2   DB "ALL"
   3+ 8EF9 45 58 45 47  				DB "EXEGEZACEBISOUSESARMAINDIREA"
   3+ 8EFD 45 5A 41 43
   3+ 8F01 45 42 49 53
   3+ 8F05 4F 55 53 45
   3+ 8F09 53 41 52 4D
   3+ 8F0D 41 49 4E 44
   3+ 8F11 49 52 45 41
   4+ 8F15 3F 45 52 41  				DB "?ERATENBERALAVETIEDORQUANTEISRION"
   4+ 8F19 54 45 4E 42
   4+ 8F1D 45 52 41 4C
   4+ 8F21 41 56 45 54
   4+ 8F25 49 45 44 4F
   4+ 8F29 52 51 55 41
   4+ 8F2D 4E 54 45 49
   4+ 8F31 53 52 49 4F
   4+ 8F35 4E
   5+ 8F36
   6+ 8F36              ; TODO Moveinto galaxy data module
   7+ 8F36 00 00 00...  name_expanded	DS 32
   8+ 8F56 00           				DB 0
   9+ 8F57
  10+ 8F57
  11+ 8F57
  12+ 8F57              NamingLoop:
  13+ 8F57 3A 0E 82     	ld		a,(WorkingSeeds+5)	; a = first byte of name seed
  14+ 8F5A E6 1F        	and 	$1F					; Keep bottom 5 bits only
  15+ 8F5C FE 00        	cp		0					; 0 = skip 2 chars
  16+ 8F5E 28 12        	jr		z,.SkipPhrase
  17+ 8F60 C6 0C        	add		a,12
  18+ 8F62 CB 27        	sla		a					; phrase = (a+12)*2
  19+ 8F64 21 DE 8E     	ld		hl,name_digrams
  20+ 8F67 ED 31        	add		hl,a
  21+ 8F69 ED A0        	ldi
  22+ 8F6B 7E           	ld		a,(hl)
  23+ 8F6C FE 3F        	cp		'?'
  24+ 8F6E 28 02        	jr		z,.SkipPhrase
  25+ 8F70              .AddExtra:
  26+ 8F70 ED A0        	ldi
  27+ 8F72              .SkipPhrase:
  28+ 8F72 D5           	push	de
  29+ 8F73 CD 87 87     	call	working_seed
  30+ 8F76 D1           	pop		de
  31+ 8F77 C9           	ret
  32+ 8F78
  33+ 8F78              ;GetDigramGalaxySeed:
  34+ 8F78              ;	call	copy_galaxy_to_working
  35+ 8F78              ;	jr		GetDigramWorkingSeed
  36+ 8F78              ;GetDigramSystemSeed:
  37+ 8F78              ;	call	copy_system_to_working
  38+ 8F78              ;GetDigramWorkingSeed:
  39+ 8F78              ;; ">GetDigram a = digram seed"
  40+ 8F78              ;	ld		de,name_expanded
  41+ 8F78              ;	ld		b,3
  42+ 8F78              ;	ld		a,(WorkingSeeds)
  43+ 8F78              ;	and		$40
  44+ 8F78              ;	jr		z,.SmallSizeName
  45+ 8F78              ;.LargeSizeName:
  46+ 8F78              ;	call	NamingLoop
  47+ 8F78              ;.SmallSizeName:
  48+ 8F78              ;	call	NamingLoop
  49+ 8F78              ;	call	NamingLoop
  50+ 8F78              ;	call	NamingLoop
  51+ 8F78              ;.DoneName:
  52+ 8F78              ;	ex		de,hl
  53+ 8F78              ;	ld		(hl),0
  54+ 8F78              ;	ex		de,hl
  55+ 8F78              ;	ret
  56+ 8F78
  57+ 8F78
  58+ 8F78
  59+ 8F78              ;GetDigramWorkingSeed:
  60+ 8F78              ;	MESSAGE ">GetDigram a = digram seed b = length"
  61+ 8F78              ;	ld		b,5					; working seed
  62+ 8F78              ;	ld		de,name_expanded
  63+ 8F78              ;.ExpansionLoop:
  64+ 8F78              ;	push	bc
  65+ 8F78              ;	ld		hl,WorkingSeeds
  66+ 8F78              ;	ld		a,b
  67+ 8F78              ;	add		hl,a
  68+ 8F78              ;	ld		a,(hl)	; a = first byte of name seed
  69+ 8F78              ;	and 	$1F					; Keep bottom 5 bits only
  70+ 8F78              ;	cp		0					; 0 = skip 2 chars
  71+ 8F78              ;	jr		z,.SkipPhrase
  72+ 8F78              ;	or		&80					; set buit 7 high (probabtyl capitalisation)
  73+ 8F78              ;	call	TT27
  74+ 8F78              ;.SkipPhrase:
  75+ 8F78              ;	push	de
  76+ 8F78              ;	call	next_working_seed
  77+ 8F78              ;	pop		de
  78+ 8F78              ;	pop		bc
  79+ 8F78              ;	djnz	GetDigramWorkingSeed
  80+ 8F78              ;.DoneName:
  81+ 8F78              ;	ex		de,hl
  82+ 8F78              ;	ld		(hl),0
  83+ 8F78              ;	ex		de,hl
  84+ 8F78              ;	ret
  85+ 8F78              ;
  86+ 8F78              ;ExpandToken:
  87+ 8F78              ;	DE = target
  88+ 8F78              ;	a = token
  89+ 8F78              ;
  90+ 8F78              ;PlanetDigram:
  91+ 8F78              ;	cp		&A0							; >- 160
  92+ 8F78              ;	jr		c,MorePage4
  93+ 8F78              ;	and		$7F							; 128 to 159 now 0 to 31
  94+ 8F78              ;	asl		2							; Multiply by 2
  95+ 8F78              ;	ld		hl, name_digrams2
  96+ 8F78              ;	add		hl,a
  97+ 8F78              ;	ld		a,(hl)
  98+ 8F78              ;	call	ProcessTextToken
  99+ 8F78              ;	inc		hl
 100+ 8F78              ;	ld		a,(hl)
 101+ 8F78              ;	cp		'?'
 102+ 8F78              ;	ret		z
 103+ 8F78              ;	call	ProcessTextToken
 104+ 8F78              ;	ret
 105+ 8F78              ;MorePage4:
 106+ 8F78              ;	sub		$A0
 107+ 8F78              ;ExtraTokenCheck:
 108+ 8F78              ;	push	de							; save target address
 109+ 8F78              ;	push	bc
 110+ 8F78              ;	ld		b,a
 111+ 8F78              ;	ld		hl,varV
 112+ 8F78              ;	ld		(VarV),0400
 113+ 8F78              ;	ld		(varV),a
 114+ 8F78              ;	ld
 115+ 8F78              ;
 116+ 8F78              ;		.TT43	\ Token > 127 page4 token or planet digram.
 117+ 8F78              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 118+ 8F78              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 119+ 8F78              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 120+ 8F78              ;0A                      ASL A		      \ *= 2
 121+ 8F78              ;A8                      TAY 		      \ digram index = 0to62
 122+ 8F78              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 123+ 8F78              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 124+ 8F78              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 125+ 8F78              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 126+ 8F78              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 127+ 8F78              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 128+ 8F78              ;
 129+ 8F78              ;	.TT47	\ more page4, subtract #160
 130+ 8F78              ;E9 A0                   SBC #&A0	\ -= 160
 131+ 8F78              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 132+ 8F78              ;AA                      TAX 		\ copy of word index
 133+ 8F78              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 134+ 8F78              ;85 22                   STA &22		\ V
 135+ 8F78              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 136+ 8F78              ;85 23                   STA &23		\ V+1
 137+ 8F78              ;A0 00                   LDY #0
 138+ 8F78              ;8A                      TXA 		\ token = word index
 139+ 8F78              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 140+ 8F78              ;	.TT51	\ counters Y letter, X token
 141+ 8F78              ;B1 22                   LDA (&22),Y	\ (V),Y
 142+ 8F78              ;F0 07                   BEQ TT49	\ exit as word ended
 143+ 8F78              ;C8                      INY 		\ letter count
 144+ 8F78              ;D0 F9                   BNE TT51	\ loop Y
 145+ 8F78              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 146+ 8F78              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 147+ 8F78              ;	.TT49	\ word ended
 148+ 8F78              ;C8                      INY
 149+ 8F78              ;D0 02                   BNE TT59    	\ next word
 150+ 8F78              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 151+ 8F78              ;	.TT59	\ next word
 152+ 8F78              ;CA                      DEX 		\ token count
 153+ 8F78              ;D0 ED                   BNE TT51	\ loop X token
 154+ 8F78              ;	.TT50	\ token X = 0, counter Y offset to word correct
 155+ 8F78              ;98                      TYA
 156+ 8F78              ;48                      PHA 		\ store Yindex
 157+ 8F78              ;A5 23                   LDA &23		\ V+1
 158+ 8F78              ;48                      PHA 		\ correct pointer hi
 159+ 8F78              ;B1 22                   LDA (&22),Y 	\ (V),Y
 160+ 8F78              ;49 23                   EOR #&23	\ decode '#'
 161+ 8F78              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 162+ 8F78              ;68                      PLA 		\ restore this depth's Vhi
 163+ 8F78              ;85 23                   STA &23		\ V+1
 164+ 8F78              ;68                      PLA
 165+ 8F78              ;A8                      TAY 		\ restore this depth's Yindex
 166+ 8F78              ;C8                      INY 		\ next letter
 167+ 8F78              ;D0 02                   BNE P%+4	\ not zero so skip next page
 168+ 8F78              ;E6 23                   INC &23		\ V+1
 169+ 8F78              ;B1 22                   LDA (&22),Y	\ (V),Y
 170+ 8F78              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 171+ 8F78              ;	.TT48 	\ rts
 172+ 8F78              ;60                      RTS 		\ end of flight token printing TT27
 173+ 8F78              ;
 174+ 8F78              ;
 175+ 8F78              ;
 176+ 8F78              ;
 177+ 8F78              ;
 178+ 8F78              ;
 179+ 8F78              ;		.TT27	\ -> &36E0 \ process flight text Token in Acc
 180+ 8F78              ;;AA                      TAX		\ copy token to count down
 181+ 8F78              ;;F0 DE                   BEQ csh		\ Acc = 0, up to Cash
 182+ 8F78              ;30 74                   BMI TT43	\ if token is >  127 down, page4 token or digram
 183+ 8F78              ;CA                      DEX
 184+ 8F78              ;F0 BC                   BEQ tal		\ Acc == 1, up, print Galaxy number.
 185+ 8F78              ;CA                      DEX
 186+ 8F78              ;F0 A3                   BEQ ypl		\ Acc == 2, up, present planet in QQ2.
 187+ 8F78              ;CA                      DEX
 188+ 8F78              ;D0 03                   BNE P%+5	\ hop over, else X == 0
 189+ 8F78              ;4C 0A 33                JMP &330A \ cpl \ Acc = 3 print Planet name for seed QQ15
 190+ 8F78              ;CA                      DEX
 191+ 8F78              ;F0 8A                   BEQ cmn		\ Acc == 4, up, commander name.
 192+ 8F78              ;CA                      DEX
 193+ 8F78              ;F0 B5                   BEQ fwl		\ Acc == 5, up, fuel followed by cash.
 194+ 8F78              ;CA                      DEX
 195+ 8F78              ;D0 05                   BNE  P%+7	\ hop over, else X == 0
 196+ 8F78              ;A9 80                   LDA #&80	\ Acc == 6, set bit 7 TT27m
 197+ 8F78              ;85 72                   STA &72	 	\ QQ17
 198+ 8F78              ;60                      RTS
 199+ 8F78              ;CA                      DEX 		\ skip Acc ==7
 200+ 8F78              ;CA                      DEX
 201+ 8F78              ;D0 03                   BNE P%+5	\ hop over to continue Acc 9to127
 202+ 8F78              ;86 72                   STX &72	 \ QQ17	\ else Acc ==8, QQ17 set to X = 0
 203+ 8F78              ;60                      RTS
 204+ 8F78              ;CA                      DEX 		\ continue 9to127 tokens
 205+ 8F78              ;F0 38                   BEQ crlf	\ Acc == 9, down, colon on right.
 206+ 8F78              ;C9 60                   CMP #&60	\ discard X, look at Acc = token >= 96
 207+ 8F78              ;B0 66                   BCS ex   	\ extra >= #&60, far down
 208+ 8F78              ;C9 0E                   CMP #14		\ < 14 ?
 209+ 8F78              ;90 04                   BCC P%+6	\ goes to Token < 14 or > 31
 210+ 8F78              ;C9 20                   CMP #32		\ < 32 ?
 211+ 8F78              ;90 28                   BCC qw   	\ 14 <= token A < 32 becomes 128to145 page4 digram
 212+ 8F78              ;		\ Token  < 14 or > 31
 213+ 8F78              ;A6 72                   LDX &72	 	\ QQ17
 214+ 8F78              ;F0 3D                   BEQ TT74 	\ if QQ17 = 0 Upper case, jmp TT26, print character.
 215+ 8F78              ;30 11                   BMI TT41 	\ if bit7 set
 216+ 8F78              ;24 72                   BIT &72		\ QQ17 has bit6 set too
 217+ 8F78              ;70 30                   BVS TT46 	\ If only bit6 set, clear bit6 and print as Upper
 218+ 8F78              ;	.TT42	\ Uppercase to lowercase
 219+ 8F78              ;C9 41                   CMP #&41	\ < ascii 'A'
 220+ 8F78              ;90 06                   BCC TT44 	\ jmp TT26, print character
 221+ 8F78              ;C9 5B                   CMP #&5B	\ >= ascii 'Z'+1
 222+ 8F78              ;B0 02                   BCS TT44 	\ jmp TT26, print character
 223+ 8F78              ;69 20                   ADC #&20	\ else Upper to lowercase
 224+ 8F78              ;	.TT44	\ print character as is with TT26
 225+ 8F78              ;4C FC 1E                JMP &1EFC \ TT26 \ print character
 226+ 8F78              ;
 227+ 8F78              ;	.TT41	\ QQ17 bit7 set
 228+ 8F78              ;24 72                   BIT &72		\ QQ17
 229+ 8F78              ;70 17                   BVS TT45	\ bit6 set too, Nothing or lower.
 230+ 8F78              ;C9 41                   CMP #&41	\ < ascii 'A'
 231+ 8F78              ;90 22                   BCC TT74 	\ print as is using TT26
 232+ 8F78              ;48                      PHA 		\ else store token Acc
 233+ 8F78              ;8A                      TXA 		\ QQ17 copy
 234+ 8F78              ;09 40                   ORA #&40	\ set bit6 in QQ17 so subsequent ones lower
 235+ 8F78              ;85 72                   STA &72	 	\ QQ17
 236+ 8F78              ;68                      PLA 		\ restore token
 237+ 8F78              ;D0 EC                   BNE TT44	\ guaranteed up, print as Uppercase with TT26.
 238+ 8F78              ;
 239+ 8F78              ;	.qw	\ Acc = 14to31 becomes 128to145 page4 digram
 240+ 8F78              ;69 72                   ADC #&72	\ A+=114 becomes 128to145 page4 digram
 241+ 8F78              ;D0 32                   BNE ex		\ guaranteed down, extra.
 242+ 8F78              ;
 243+ 8F78              ;	.crlf	\ Acc == 9,  colon on right
 244+ 8F78              ;A9 15                   LDA #21		\ on right
 245+ 8F78              ;85 2C                   STA &2C		\ XC
 246+ 8F78              ;D0 97                   BNE TT73	\ guaranteed up, print colon.
 247+ 8F78              ;
 248+ 8F78              ;	.TT45	\ QQ17 bits 7,6 set. Nothing or lower.
 249+ 8F78              ;E0 FF                   CPX #&FF	\ if QQ17 = #&FF
 250+ 8F78              ;F0 63                   BEQ TT48	\ rts
 251+ 8F78              ;C9 41                   CMP #&41	\ >= ascii 'A' ?
 252+ 8F78              ;B0 D0                   BCS TT42	\ Uppercase to lowercase, up.
 253+ 8F78              ;	.TT46	\ clear bit6 QQ17 and print as is using TT26
 254+ 8F78              ;48                      PHA 		\ push token
 255+ 8F78              ;8A                      TXA 		\ QQ17 copy
 256+ 8F78              ;29 BF                   AND #&BF	\ clear bit6
 257+ 8F78              ;85 72                   STA &72	 	\ QQ17
 258+ 8F78              ;68                      PLA 		\ pull token
 259+ 8F78              ;	.TT74	\ TT26, print character.
 260+ 8F78              ;4C FC 1E                JMP &1EFC	\ TT26
 261+ 8F78              ;
 262+ 8F78              ;	.TT43	\ Token > 127 page4 token or planet digram.
 263+ 8F78              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 264+ 8F78              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 265+ 8F78              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 266+ 8F78              ;0A                      ASL A		      \ *= 2
 267+ 8F78              ;A8                      TAY 		      \ digram index = 0to62
 268+ 8F78              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 269+ 8F78              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 270+ 8F78              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 271+ 8F78              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 272+ 8F78              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 273+ 8F78              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 274+ 8F78              ;
 275+ 8F78              ;	.TT47	\ more page4, subtract #160
 276+ 8F78              ;E9 A0                   SBC #&A0	\ -= 160
 277+ 8F78              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 278+ 8F78              ;AA                      TAX 		\ copy of word index
 279+ 8F78              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 280+ 8F78              ;85 22                   STA &22		\ V
 281+ 8F78              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 282+ 8F78              ;85 23                   STA &23		\ V+1
 283+ 8F78              ;A0 00                   LDY #0
 284+ 8F78              ;8A                      TXA 		\ token = word index
 285+ 8F78              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 286+ 8F78              ;	.TT51	\ counters Y letter, X token
 287+ 8F78              ;B1 22                   LDA (&22),Y	\ (V),Y
 288+ 8F78              ;F0 07                   BEQ TT49	\ exit as word ended
 289+ 8F78              ;C8                      INY 		\ letter count
 290+ 8F78              ;D0 F9                   BNE TT51	\ loop Y
 291+ 8F78              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 292+ 8F78              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 293+ 8F78              ;	.TT49	\ word ended
 294+ 8F78              ;C8                      INY
 295+ 8F78              ;D0 02                   BNE TT59    	\ next word
 296+ 8F78              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 297+ 8F78              ;	.TT59	\ next word
 298+ 8F78              ;CA                      DEX 		\ token count
 299+ 8F78              ;D0 ED                   BNE TT51	\ loop X token
 300+ 8F78              ;	.TT50	\ token X = 0, counter Y offset to word correct
 301+ 8F78              ;98                      TYA
 302+ 8F78              ;48                      PHA 		\ store Yindex
 303+ 8F78              ;A5 23                   LDA &23		\ V+1
 304+ 8F78              ;48                      PHA 		\ correct pointer hi
 305+ 8F78              ;B1 22                   LDA (&22),Y 	\ (V),Y
 306+ 8F78              ;49 23                   EOR #&23	\ decode '#'
 307+ 8F78              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 308+ 8F78              ;68                      PLA 		\ restore this depth's Vhi
 309+ 8F78              ;85 23                   STA &23		\ V+1
 310+ 8F78              ;68                      PLA
 311+ 8F78              ;A8                      TAY 		\ restore this depth's Yindex
 312+ 8F78              ;C8                      INY 		\ next letter
 313+ 8F78              ;D0 02                   BNE P%+4	\ not zero so skip next page
 314+ 8F78              ;E6 23                   INC &23		\ V+1
 315+ 8F78              ;B1 22                   LDA (&22),Y	\ (V),Y
 316+ 8F78              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 317+ 8F78              ;	.TT48 	\ rts
 318+ 8F78              ;60                      RTS 		\ end of flight token printing TT27
 319+ 8F78              ;
 320+ 8F78              ;
 321+ 8F78              ;
# file closed: ./Tables/name_digrams.asm
 560  8F78              ;INCLUDE "Tables/inwk_table.asm" This is no longer needed as we will write to univer object bank
 561  8F78
 562  8F78              ; Include all maths libraries to test assembly
 563  8F78
 564  8F78              ;;    INCLUDE "./Maths/addhldesigned.asm"
 565  8F78                  INCLUDE "./Maths/asm_add.asm"
# file opened: ./Maths/asm_add.asm
   1+ 8F78              ;; calcs BHB + CDE where B and C are signs and may be 24 bit
   2+ 8F78              ;; result HL with A as sign
   3+ 8F78              ;; special handling if result is zero forcign sign bit to be zero
   4+ 8F78 78           AHLEquBHLaddCDE:        ld      a,b
   5+ 8F79 A9                                   xor     c
   6+ 8F7A E6 80                                and     SignOnly8Bit
   7+ 8F7C                                      JumpIfNegative   .OppositeSigns
   7+ 8F7C FA 8F 8F    >                        jp		m, .OppositeSigns
   8+ 8F7F DD 60        .SameSigns:             ld      ixh,b                      ; ixh = b
   9+ 8F81                                      ClearSignBit b                      ; b = ABS b
   9+ 8F81 78          >                        ld      a,b
   9+ 8F82 E6 7F       >                        and     SignMask8Bit
   9+ 8F84 47          >                        ld      b,a
  10+ 8F85 19                                   add     hl,de                      ; hl = hl + de
  11+ 8F86 78                                   ld      a,b                        ; a = b + c + carry
  12+ 8F87 89                                   adc     c                          ;
  13+ 8F88 47                                   ld      b,a                        ;
  14+ 8F89 DD 7C                                ld      a,ixh                      ;
  15+ 8F8B                                      SignBitOnlyA                        ;
  15+ 8F8B E6 80       >                        and     SignOnly8Bit
  16+ 8F8D B0                                   or      b                          ;
  17+ 8F8E C9                                   ret                                ;
  18+ 8F8F DD 60        .OppositeSigns:         ld      ixh,b
  19+ 8F91 DD 69                                ld      ixl,c
  20+ 8F93                                      ClearSignBit c                      ; c = ABS C
  20+ 8F93 79          >                        ld      a,c
  20+ 8F94 E6 7F       >                        and     SignMask8Bit
  20+ 8F96 4F          >                        ld      c,a
  21+ 8F97 78                                   ld      a,b
  22+ 8F98                                      ClearSignBitA
  22+ 8F98 E6 7F       >                        and     SignMask8Bit
  23+ 8F9A 99                                   sbc     c
  24+ 8F9B                                      JumpIfNegative  .OppositeCDEgtBHL
  24+ 8F9B FA AA 8F    >                        jp		m, .OppositeCDEgtBHL
  25+ 8F9E ED 52                                sbc     hl,de
  26+ 8FA0                                      JumpIfNegative  .OppositeCDEgtBHL
  26+ 8FA0 FA AA 8F    >                        jp		m, .OppositeCDEgtBHL
  27+ 8FA3 47                                   ld      b,a
  28+ 8FA4 DD 7C                                ld      a,ixh
  29+ 8FA6                                      SignBitOnlyA                        ;
  29+ 8FA6 E6 80       >                        and     SignOnly8Bit
  30+ 8FA8 B0                                   or      b                          ;
  31+ 8FA9 C9                                   ret                                ;
  32+ 8FAA EB           .OppositeCDEgtBHL:      ex      de,hl
  33+ 8FAB 78                                   ld      a,b
  34+ 8FAC 41                                   ld      b,c
  35+ 8FAD 4F                                   ld      c,a
  36+ 8FAE C3 8F 8F                             jp      .OppositeSigns
  37+ 8FB1
  38+ 8FB1
  39+ 8FB1 78           ADDHLDESignBC:          ld      a,b
  40+ 8FB2 E6 80                                and     SignOnly8Bit
  41+ 8FB4 A9                                   xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
  42+ 8FB5                                      JumpIfNegative ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
  42+ 8FB5 FA C3 8F    >                        jp		m, ADDHLDEsBCOppSGN
  43+ 8FB8 78           ADDHLDEsBCSameSigns:    ld      a,b
  44+ 8FB9 B1                                   or      c
  45+ 8FBA                                      JumpIfNegative ADDHLDEsBCSameNeg    ; optimisation so we can just do simple add if both positive
  45+ 8FBA FA BF 8F    >                        jp		m, ADDHLDEsBCSameNeg
  46+ 8FBD 19                                   add     hl,de                       ; both positive so a will already be zero
  47+ 8FBE C9                                   ret
  48+ 8FBF 19           ADDHLDEsBCSameNeg:      add     hl,de
  49+ 8FC0 78                                   ld      a,b
  50+ 8FC1 B1                                   or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
  51+ 8FC2 C9                                   ret
  52+ 8FC3              ADDHLDEsBCOppSGN:       ClearCarryFlag
  52+ 8FC3 B7          >                        or a
  53+ 8FC4 ED 52                                sbc     hl,de
  54+ 8FC6 38 02                                jr      c,ADDHLDEsBCOppInvert
  55+ 8FC8 78           ADDHLDEsBCOppSGNNoCarry: ld      a,b                        ; we got here so hl > de therefore we can just take hl's previous sign bit
  56+ 8FC9 C9                                   ret
  57+ 8FCA              ADDHLDEsBCOppInvert:    NegHL                               ; if result was zero then set sign to zero (which doing h or l will give us for free)
  57+ 8FCA AF          >                    xor a
  57+ 8FCB 95          >                    sub l
  57+ 8FCC 6F          >                    ld l,a
  57+ 8FCD 9F          >                    sbc a,a
  57+ 8FCE 94          >                    sub h
  57+ 8FCF 67          >                    ld h,a
  58+ 8FD0 78                                   ld      a,b
  59+ 8FD1 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  60+ 8FD3 C9                                   ret
  61+ 8FD4
  62+ 8FD4 7C           ADDHLDESignedV4:        ld      a,h
  63+ 8FD5 E6 80                                and     SignOnly8Bit
  64+ 8FD7 47                                   ld      b,a                         ;save sign bit in b
  65+ 8FD8 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  66+ 8FD9                                      JumpIfNegative .ADDHLDEOppSGN       ;Signs are opposite there fore we can subtract to get difference
  66+ 8FD9 FA F1 8F    >                        jp		m, .ADDHLDEOppSGN
  67+ 8FDC 78           .ADDHLDESameSigns:      ld      a,b
  68+ 8FDD B2                                   or      d
  69+ 8FDE                                      JumpIfNegative .ADDHLDESameNeg      ; optimisation so we can just do simple add if both positive
  69+ 8FDE FA E3 8F    >                        jp		m, .ADDHLDESameNeg
  70+ 8FE1 19                                   add     hl,de
  71+ 8FE2 C9                                   ret
  72+ 8FE3 7C           .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  73+ 8FE4 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  74+ 8FE6 67                                   ld      h,a
  75+ 8FE7 7A                                   ld      a,d
  76+ 8FE8 E6 7F                                and     SignMask8Bit
  77+ 8FEA 57                                   ld      d,a
  78+ 8FEB 19                                   add     hl,de
  79+ 8FEC 3E 80                                ld      a,SignOnly8Bit
  80+ 8FEE B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  81+ 8FEF 67                                   ld      h,a
  82+ 8FF0 C9                                   ret
  83+ 8FF1 7C           .ADDHLDEOppSGN:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  84+ 8FF2 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  85+ 8FF4 67                                   ld      h,a
  86+ 8FF5 7A                                   ld      a,d
  87+ 8FF6 E6 7F                                and     SignMask8Bit
  88+ 8FF8 57                                   ld      d,a
  89+ 8FF9                                      ClearCarryFlag
  89+ 8FF9 B7          >                        or a
  90+ 8FFA ED 52                                sbc     hl,de
  91+ 8FFC 38 04                                jr      c,.ADDHLDEOppInvert
  92+ 8FFE 78           .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  93+ 8FFF B4                                   or      h
  94+ 9000 67                                   ld      h,a                         ; set the previou sign value
  95+ 9001 C9                                   ret
  96+ 9002              .ADDHLDEOppInvert:      NegHL                                                   ; we need to flip the sign and 2'c the Hl result
  96+ 9002 AF          >                    xor a
  96+ 9003 95          >                    sub l
  96+ 9004 6F          >                    ld l,a
  96+ 9005 9F          >                    sbc a,a
  96+ 9006 94          >                    sub h
  96+ 9007 67          >                    ld h,a
  97+ 9008 78                                   ld      a,b
  98+ 9009 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  99+ 900B B4                                   or      h
 100+ 900C 67                                   ld      h,a                         ; recover sign
 101+ 900D C9                                   ret
 102+ 900E
 103+ 900E              ;;;NOT USED addhldesigned:          bit     7,h
 104+ 900E              ;;;NOT USED                         jr      nz,.noneghl
 105+ 900E              ;;;NOT USED                         call    negate16hl
 106+ 900E              ;;;NOT USED .noneghl:               bit     7,d
 107+ 900E              ;;;NOT USED                         jr      nz,.nonegde
 108+ 900E              ;;;NOT USED                         call    negate16de
 109+ 900E              ;;;NOT USED .nonegde:               add     hl,de                       ; do 2'd c add
 110+ 900E              ;;;NOT USED                         xor     a                           ; assume positive
 111+ 900E              ;;;NOT USED                         bit     7,h
 112+ 900E              ;;;NOT USED                         ret     z                           ; if not set then can exit early
 113+ 900E              ;;;NOT USED                         call    negate16hl
 114+ 900E              ;;;NOT USED                         ld      a,$FF
 115+ 900E              ;;;NOT USED                         ret
 116+ 900E
 117+ 900E
 118+ 900E              ; HL(2sc) = HL (signed) + A (unsigned), uses HL, DE, A
 119+ 900E              ; 06 06 2022 not used
 120+ 900E 16 00        HL2cEquHLSgnPlusAusgn:  ld      d,0
 121+ 9010 5F                                   ld      e,a                         ; set up DE = A
 122+ 9011 7C                                   ld      a,h
 123+ 9012 E6 7F                                and     SignMask8Bit
 124+ 9014 28 07                                jr      z,.HLPositive               ; if HL is negative then do HL - A
 125+ 9016 67           .HLNegative:            ld      h,a                         ; hl = ABS (HL)
 126+ 9017                                      NegHL                               ; hl = - hl
 126+ 9017 AF          >                    xor a
 126+ 9018 95          >                    sub l
 126+ 9019 6F          >                    ld l,a
 126+ 901A 9F          >                    sbc a,a
 126+ 901B 94          >                    sub h
 126+ 901C 67          >                    ld h,a
 127+ 901D              .HLPositive:            ClearCarryFlag                      ; now do adc hl,de
 127+ 901D B7          >                        or a
 128+ 901E ED 5A                                adc     hl,de                       ; aftert his hl will be 2's c
 129+ 9020 C9                                   ret
 130+ 9021              ; 06 06 2022 not used
 131+ 9021 5F           HLEquHLSgnPlusAusgn:    ld      e,a
 132+ 9022 7C                                   ld      a,h
 133+ 9023 E6 7F                                and     SignMask8Bit
 134+ 9025 20 04                                jr      nz,.HLNegative              ; if HL is negative then do HL - A
 135+ 9027 7B           .HLPositive:            ld      a,e                         ; else its HL + A
 136+ 9028 ED 31                                add     hl,a
 137+ 902A C9                                   ret
 138+ 902B              .HLNegative:            ClearSignBit    h                   ; Clear sign of HL
 138+ 902B 7C          >                        ld      a,h
 138+ 902C E6 7F       >                        and     SignMask8Bit
 138+ 902E 67          >                        ld      h,a
 139+ 902F                                      NegHL                               ; and convert to 2's C
 139+ 902F AF          >                    xor a
 139+ 9030 95          >                    sub l
 139+ 9031 6F          >                    ld l,a
 139+ 9032 9F          >                    sbc a,a
 139+ 9033 94          >                    sub h
 139+ 9034 67          >                    ld h,a
 140+ 9035 16 00                                ld      d,0
 141+ 9037                                      ClearCarryFlag
 141+ 9037 B7          >                        or a
 142+ 9038 ED 52                                sbc     hl,de                       ; now add a to -ve HL , add does not do 2's c
 143+ 903A FA 42 90                             jp      m,.FlipResult               ; if it was negative then its really positive
 144+ 903D                                      SetSignBit      h
 144+ 903D 7C          >                        ld      a,h
 144+ 903E F6 80       >                        or      SignOnly8Bit
 144+ 9040 67          >                        ld      h,a
 145+ 9041 C9                                   ret
 146+ 9042              .FlipResult:            NegHL                               ; so if -hl + A => HL - A => HL - DE is negative then the actual result is +ve
 146+ 9042 AF          >                    xor a
 146+ 9043 95          >                    sub l
 146+ 9044 6F          >                    ld l,a
 146+ 9045 9F          >                    sbc a,a
 146+ 9046 94          >                    sub h
 146+ 9047 67          >                    ld h,a
 147+ 9048 C9                                   ret
 148+ 9049
 149+ 9049
 150+ 9049              ; 06 06 2022 not used
 151+ 9049              ; HL = HL (signed) + A (unsigned), uses HL, DE, A
 152+ 9049 57           AddAusngToHLsng:        ld      d,a
 153+ 904A 5C                                   ld      e,h
 154+ 904B 7C                                   ld      a,h
 155+ 904C E6 7F                                and     SignMask8Bit
 156+ 904E 67                                   ld      h,a
 157+ 904F 7A                                   ld      a,d
 158+ 9050 ED 31                                add     hl,a
 159+ 9052 7B                                   ld      a,e
 160+ 9053 E6 80                                and     SignOnly8Bit
 161+ 9055 B4                                   or      h
 162+ 9056 C9                                   ret
 163+ 9057              ; 06 06 2022 not used
 164+ 9057              ; HL = A (unsigned) - HL (signed), uses HL, DE, BC, A
 165+ 9057 44           HLEequAusngMinusHLsng:  ld      b,h
 166+ 9058 4F                                   ld      c,a
 167+ 9059 78                                   ld      a,b
 168+ 905A E6 80                                and     SignOnly8Bit
 169+ 905C 20 08                                jr      nz,.DoAdd
 170+ 905E EB           .DoSubtract:            ex      de,hl               ; move hl into de
 171+ 905F 26 00                                ld      h,0                 ; hl = a
 172+ 9061 69                                   ld      l,c
 173+ 9062                                      ClearCarryFlag
 173+ 9062 B7          >                        or a
 174+ 9063 ED 52                                sbc     hl,de               ; hl = a - hl
 175+ 9065 C9                                   ret
 176+ 9066 79           .DoAdd:                 ld      a,c
 177+ 9067 ED 31                                add hl,a
 178+ 9069 C9                                   ret
 179+ 906A              ;tested mathstestsun2
 180+ 906A              ; DEL = DEL + BCH signed, uses BC, DE, HL, IY, A
 181+ 906A 78           AddBCHtoDELsigned:      ld      a,b                 ; Are the values both the same sign?
 182+ 906B AA                                   xor     d                   ; .
 183+ 906C E6 80                                and     SignOnly8Bit        ; .
 184+ 906E 20 19                                jr      nz,.SignDifferent   ; .
 185+ 9070 78           .SignSame:              ld      a,b                 ; if they are then we only need 1 signe
 186+ 9071 E6 80                                and     SignOnly8Bit        ; so store it in iyh
 187+ 9073 FD 67                                ld      iyh,a               ;
 188+ 9075 78                                   ld      a,b                 ; bch = abs bch
 189+ 9076 E6 7F                                and     SignMask8Bit        ; .
 190+ 9078 47                                   ld      b,a                 ; .
 191+ 9079 7A                                   ld      a,d                 ; del = abs del
 192+ 907A E6 7F                                and     SignMask8Bit        ; .
 193+ 907C 57                                   ld      d,a                 ; .
 194+ 907D 7C                                   ld      a,h                 ; l = h + l
 195+ 907E 85                                   add     l                   ; .
 196+ 907F 6F                                   ld      l,a                 ; .
 197+ 9080 79                                   ld      a,c                 ; e = e + c + carry
 198+ 9081 8B                                   adc     e                   ; .
 199+ 9082 5F                                   ld      e,a                 ; .
 200+ 9083 78                                   ld      a,b                 ; d = b + d + carry (signed)
 201+ 9084 8A                                   adc     d                   ;
 202+ 9085 FD B4                                or      iyh                 ; d = or back in sign bit
 203+ 9087 57                                   ld      d,a                 ;
 204+ 9088 C9                                   ret                         ; done
 205+ 9089 78           .SignDifferent:         ld      a,b                 ; bch = abs bch
 206+ 908A FD 67                                ld      iyh,a               ; iyh = b sign
 207+ 908C E6 7F                                and     SignMask8Bit        ; .
 208+ 908E 47                                   ld      b,a                 ; .
 209+ 908F 7A                                   ld      a,d                 ; del = abs del
 210+ 9090 FD 6F                                ld      iyl,a               ; iyl = d sign
 211+ 9092 E6 7F                                and     SignMask8Bit        ; .
 212+ 9094 57                                   ld      d,a                 ; .
 213+ 9095 E5                                   push    hl                  ; save hl
 214+ 9096 60 69                                ld      hl,bc               ; hl = bc - de, if bc < de then there is a carry
 215+ 9098 ED 52                                sbc     hl,de               ;
 216+ 909A E1                                   pop     hl                  ;
 217+ 909B 38 0E                                jr      c,.BCHltDEL
 218+ 909D 20 1C                                jr      nz,.DELltBCH        ; if the result was not zero then DEL > BCH
 219+ 909F 7C           .BCeqDE:                ld      a,h                 ; if the result was zero then check lowest bits
 220+ 90A0                                      JumpIfALTNusng l,.BCHltDEL
 220+ 90A0 BD          >                        cp      l
 220+ 90A1 DA AB 90    >                        jp		c, .BCHltDEL
 221+ 90A4 20 15                                jr      nz,.DELltBCH
 222+ 90A6              ; The same so its just zero
 223+ 90A6 AF           .BCHeqDEL:              xor     a                  ; its just zero
 224+ 90A7 57                                   ld      d,a                ; .
 225+ 90A8 5F                                   ld      e,a                ; .
 226+ 90A9 6F                                   ld      l,a                ; .
 227+ 90AA C9                                   ret                        ; .
 228+ 90AB              ;BCH is less than DEL so its DEL - BCH the sort out sign
 229+ 90AB 7D           .BCHltDEL:              ld      a,l                ; l = l - h                      ; ex
 230+ 90AC 94                                   sub     h                  ; .                              ;   01D70F DEL
 231+ 90AD 6F                                   ld      l,a                ; .                              ;  -000028 BCH
 232+ 90AE 7B                                   ld      a,e                ; e = e - c - carry              ;1.
 233+ 90AF 99                                   sbc     c                  ; .                              ;
 234+ 90B0 5F                                   ld      e,a                ; .                              ;
 235+ 90B1 7A                                   ld      a,d                ; d = d - b - carry              ;
 236+ 90B2 98                                   sbc     b                  ; .                              ;
 237+ 90B3 57                                   ld      d,a                ; .                              ;
 238+ 90B4 FD 7D                                ld      a,iyl              ; as d was larger, take d sign
 239+ 90B6 E6 80                                and     SignOnly8Bit       ;
 240+ 90B8 B2                                   or      d                  ;
 241+ 90B9 57                                   ld      d,a                ;
 242+ 90BA C9                                   ret
 243+ 90BB 7C           .DELltBCH:              ld      a,h                ; l = h - l
 244+ 90BC 95                                   sub     l                  ;
 245+ 90BD 6F                                   ld      l,a                ;
 246+ 90BE 79                                   ld      a,c                ; e = c - e - carry
 247+ 90BF 9B                                   sbc     e                  ;
 248+ 90C0 5F                                   ld      e,a                ;
 249+ 90C1 78                                   ld      a,b                ; d = b - d - carry
 250+ 90C2 9A                                   sbc     d                  ;
 251+ 90C3 57                                   ld      d,a                ;
 252+ 90C4 FD 7C                                ld      a,iyh              ; as b was larger, take b sign into d
 253+ 90C6 E6 80                                and     SignOnly8Bit       ;
 254+ 90C8 B2                                   or      d                  ;
 255+ 90C9 57                                   ld      d,a                ;
 256+ 90CA C9                                   ret
 257+ 90CB
 258+ 90CB              ; 06 06 2022 not used
 259+ 90CB              ;BHL = AHL + DE where AHL = 16 bit + A sign and DE = 15 bit signed
 260+ 90CB 47           AddAHLtoDEsigned:       ld      b,a                     ; B = A , C = D (save sign bytes)
 261+ 90CC 4A                                   ld      c,d                     ; .
 262+ 90CD A9                                   xor     c                       ; A = A xor C
 263+ 90CE CB BA                                res     7,d                     ; clear sign bit of D
 264+ 90D0 20 02                                jr nz,  .OppositeSigns          ; if A xor C is opposite signs job to A0A1
 265+ 90D2 19                                   add     hl,de                   ; HL = HL + DE
 266+ 90D3 C9                                   ret                             ; return
 267+ 90D4 ED 52        .OppositeSigns:         sbc     hl,de                   ; HL = HL -DE
 268+ 90D6 D0                                   ret     nc                      ; if no carry return
 269+ 90D7 19                                   add     hl,de                   ; else HL = HL + DE
 270+ 90D8 EB                                   ex      de,hl                   ;      swap HL and DE
 271+ 90D9 A7                                   and     a                       ;      reset carry
 272+ 90DA ED 52                                sbc     hl,de                   ;      HL = DE - HL (as they were swapped)
 273+ 90DC 41                                   ld      b,c                     ;      B = sign of C
 274+ 90DD C9                                   ret                             ;      ret
 275+ 90DE
 276+ 90DE
 277+ 90DE              ; 06 06 2022 not used
 278+ 90DE              ; a = value to add
 279+ 90DE              ; b = offset (equivalent to regX)
 280+ 90DE              ; returns INWK [x] set to new value
 281+ 90DE              addINWKbasigned:
 282+ 90DE 21 10 C0     		ld 		hl,UBnKxlo                  ; hl = INWK 0
 283+ 90E1 4F           		ld      c,a                         ; preserve a
 284+ 90E2 78           		ld		a,b
 285+ 90E3 ED 31        		add		hl,a                        ; hl = INWK[x]
 286+ 90E5 79                   ld      a,c                         ; get back a value
 287+ 90E6 E6 80                and     $80                         ; get sign bit from a
 288+ 90E8 47                   ld      b,a                         ; now b = sign bit of a
 289+ 90E9 79                   ld      a,c                         ; a = original value
 290+ 90EA E6 7F                and     SignMask8Bit                ; a = unsigned version of original value
 291+ 90EC              ; 06 06 2022 not used
 292+ 90EC              ; hl = unsigned version of INWK0[b]
 293+ 90EC              ; a = value to add, also in c which will optimise later code
 294+ 90EC              ; b = sign bit of a ( in old code was varT)
 295+ 90EC              addhlcsigned:
 296+ 90EC 5E                   ld      e,(hl)                      ; de = INKK value
 297+ 90ED 23                   inc     hl
 298+ 90EE 56                   ld      d,(hl)
 299+ 90EF 23                   inc     hl                          ; now pointing a sign
 300+ 90F0 7E                   ld      a,(hl)                      ; a = sign bit
 301+ 90F1 EB                   ex      de,hl                       ; hl = value now and de = pointer to sign
 302+ 90F2 A8                   xor     b                           ; a = resultant sign
 303+ 90F3 CB 7F                bit     7,a                         ; is it negative?
 304+ 90F5 28 2B                jr      z,.postivecalc
 305+ 90F7              .negativecalc:
 306+ 90F7 7C                   ld      a,h
 307+ 90F8 E6 7F                and     SignMask8Bit
 308+ 90FA 67                   ld      h,a                         ; strip high bit
 309+ 90FB DD 68                ld      ixl,b                       ; save sign bit from b into d
 310+ 90FD 06 00                ld      b,0                         ; c = value to subtract so now bc = value to subtract
 311+ 90FF ED 42                sbc     hl,bc
 312+ 9101 DD 45                ld      b,ixl                       ; get sign back
 313+ 9103 EB                   ex      de,hl                       ; de = value hl = pointer to sign
 314+ 9104 7E                   ld      a,(hl)                      ;
 315+ 9105 E6 7F                and     SignMask8Bit
 316+ 9107 DE 00                sbc     a,0                         ; subtract carry which could flip sign bit
 317+ 9109 F6 80                or      $80                         ; set bit 0
 318+ 910B A8                   xor     b                           ; flip bit on sign (var T)
 319+ 910C 77                   ld      (hl),a
 320+ 910D 2B                   dec     hl
 321+ 910E 72                   ld      (hl),d
 322+ 910F 2B                   dec     hl
 323+ 9110 73                   ld      (hl),e                      ; write out DE to INKW[x]0,1
 324+ 9111 EB                   ex      de,hl                       ; hl = value de = pointer to start if INKW[x]
 325+ 9112 D8                   ret     c                           ; if carry was set then we can exit now
 326+ 9113              .nocarry:
 327+ 9113                      NegHL                               ; get hl back to positive, a is still inkw+2
 327+ 9113 AF          >                    xor a
 327+ 9114 95          >                    sub l
 327+ 9115 6F          >                    ld l,a
 327+ 9116 9F          >                    sbc a,a
 327+ 9117 94          >                    sub h
 327+ 9118 67          >                    ld h,a
 328+ 9119 B0                   or      b                           ; b is still varT
 329+ 911A EB                   ex      de,hl                       ; de = value hl = pointer to start if INKW[x]
 330+ 911B 73                   ld      (hl),e
 331+ 911C 23                   inc     hl
 332+ 911D 72                   ld      (hl),d
 333+ 911E 23                   inc     hl
 334+ 911F 77                   ld      (hl),a                      ; set sign bit in INKK[x]+2
 335+ 9120 EB                   ex      de,hl                       ; hl = value de = pointer to sign
 336+ 9121 C9                   ret
 337+ 9122              .postivecalc:
 338+ 9122 DD 68                ld      ixl,b
 339+ 9124 06 00                ld      b,0
 340+ 9126 19                   add     hl,de
 341+ 9127 EB                   ex      de,hl
 342+ 9128 DD B5                or      ixl                         ; we don;t need to recover b here
 343+ 912A 77                   ld      (hl),a                      ; push sign into INWK[x]
 344+ 912B 2B                   dec     hl
 345+ 912C 72                   ld      (hl),d
 346+ 912D 2B                   dec     hl
 347+ 912E 73                   ld      (hl),e
 348+ 912F C9                   ret
 349+ 9130
 350+ 9130              ;a = a AND 80 (i.e. bit 7) =>carry       so value is -
 351+ 9130              ;MVT1
 352+ 9130              ;    S = bits 6 to 0 of A
 353+ 9130              ;    A = sign bit => T
 354+ 9130              ;    xor sign bit with ink[x] Sign
 355+ 9130              ;    if negative thn its not an add
 356+ 9130              ;
 357+ 9130              ;        and h, 7F
 358+ 9130              ;        b = 0
 359+ 9130              ;        c = varS
 360+ 9130              ;        subtract INW[X]hilo, bc
 361+ 9130              ;        retain carry
 362+ 9130              ;        get INKW[x]Sign
 363+ 9130              ;        and 7F
 364+ 9130              ;        subtract carry (so will go negtive if negative)
 365+ 9130              ;        xor bit 7 of h with T to flip bit
 366+ 9130              ;        write to INKW[x]Sign
 367+ 9130              ;
 368+ 9130              ;    else
 369+ 9130              ;MV10.
 370+ 9130              ;        add INWK[x]hi,lo, varS
 371+ 9130              ;        or      sign bit
 372+ 9130
 373+ 9130
# file closed: ./Maths/asm_add.asm
 566  9130                  INCLUDE "./Maths/asm_subtract.asm"
# file opened: ./Maths/asm_subtract.asm
   1+ 9130              ;...subtract routines
   2+ 9130              ; we could cheat, flip the sign of DE and just add but its not very optimised
   3+ 9130 7C           SUBHLDESigned:          ld      a,h
   4+ 9131 E6 80                                and     SignOnly8Bit
   5+ 9133 47                                   ld      b,a                         ;save sign bit in b
   6+ 9134 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
   7+ 9135                                      JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
   7+ 9135 FA 63 91    >                        jp		m, .SUBHLDEOppSGN
   8+ 9138 78           .SUBHLDESameSigns:      ld      a,b
   9+ 9139 B2                                   or      d
  10+ 913A                                      JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
  10+ 913A FA 44 91    >                        jp		m, .SUBHLDESameNeg
  11+ 913D                                      ClearCarryFlag
  11+ 913D B7          >                        or a
  12+ 913E ED 52                                sbc     hl,de
  13+ 9140                                      JumpIfNegative .SUBHLDESameOvrFlw
  13+ 9140 FA 57 91    >                        jp		m, .SUBHLDESameOvrFlw
  14+ 9143 C9                                   ret
  15+ 9144 7C           .SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  16+ 9145 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  17+ 9147 67                                   ld      h,a
  18+ 9148 7A                                   ld      a,d
  19+ 9149 E6 7F                                and     SignMask8Bit
  20+ 914B 57                                   ld      d,a
  21+ 914C                                      ClearCarryFlag
  21+ 914C B7          >                        or a
  22+ 914D ED 52                                sbc     hl,de
  23+ 914F                                      JumpIfNegative .SUBHLDESameOvrFlw
  23+ 914F FA 57 91    >                        jp		m, .SUBHLDESameOvrFlw
  24+ 9152 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
  25+ 9153 F6 80                                or      SignOnly8Bit
  26+ 9155 67                                   ld      h,a
  27+ 9156 C9                                   ret
  28+ 9157              .SUBHLDESameOvrFlw:     NegHL
  28+ 9157 AF          >                    xor a
  28+ 9158 95          >                    sub l
  28+ 9159 6F          >                    ld l,a
  28+ 915A 9F          >                    sbc a,a
  28+ 915B 94          >                    sub h
  28+ 915C 67          >                    ld h,a
  29+ 915D 78                                   ld      a,b
  30+ 915E EE 80                                xor     SignOnly8Bit                ; flip sign bit
  31+ 9160 B4                                   or      h
  32+ 9161 67                                   ld      h,a                         ; recover sign
  33+ 9162 C9                                   ret
  34+ 9163 B7           .SUBHLDEOppSGN:         or      a
  35+ 9164 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  36+ 9165 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  37+ 9167 67                                   ld      h,a
  38+ 9168 7A                                   ld      a,d
  39+ 9169 E6 7F                                and     SignMask8Bit
  40+ 916B 57                                   ld      d,a
  41+ 916C 19                                   add     hl,de
  42+ 916D 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  43+ 916E B4                                   or      h
  44+ 916F 67                                   ld      h,a                         ; set the previou sign value
  45+ 9170 C9                                   ret
  46+ 9171
  47+ 9171              ;;WordSignedSubtract:         MACRO   x1,x1sgn, x2, x2sgn, resultx, resultsgn, completionexit
  48+ 9171              ;;                            ld      a,(x1sgn)
  49+ 9171              ;;                            ld      b,a
  50+ 9171              ;;                            ld      hl,x2sgn
  51+ 9171              ;;                            xor     (hl)
  52+ 9171              ;;                            and     $80
  53+ 9171              ;;                            jr      nz,.xSignsDifferent
  54+ 9171              ;;.xSignsSame:                ld      hl,(x1)
  55+ 9171              ;;                            ld      de,(x2)
  56+ 9171              ;;                            sbc     hl,de
  57+ 9171              ;;                            jp      p,.xSameDone
  58+ 9171              ;;.xSameNeg:                  NegHL
  59+ 9171              ;;                            ld      a,$80
  60+ 9171              ;;                            xor     b
  61+ 9171              ;;                            ld      b,a
  62+ 9171              ;;.xSameDone:                 ld      (resultx),hl
  63+ 9171              ;;                            ld      a,b
  64+ 9171              ;;                            ld      (resultsgn),a
  65+ 9171              ;;                            jp      completionexit
  66+ 9171              ;;.xSignsDifferent:           ld      hl,(x1)
  67+ 9171              ;;                            ld      de,(x2)
  68+ 9171              ;;                            add     hl,de
  69+ 9171              ;;                            ld      (resultx),hl
  70+ 9171              ;;                            ld      a,b
  71+ 9171              ;;                            ld      (resultsgn),a
  72+ 9171              ;;                            ENDM
  73+ 9171              ;;
  74+ 9171              ;;; HL(2sc) = HL (signed) - A (unsigned), uses HL, DE, A
  75+ 9171              ;;HL2cEquHLSgnPMinusAusgn:ld      d,0
  76+ 9171              ;;                        ld      e,a                         ; set up DE = A
  77+ 9171              ;;                        ld      a,h
  78+ 9171              ;;                        and     SignMask8Bit
  79+ 9171              ;;                        jr      z,.HLPositive               ; if HL is negative then do HL - A
  80+ 9171              ;;.HLNegative:            ld      h,a                         ; hl = ABS (HL)
  81+ 9171              ;;                        NegHL                               ; hl = - hl
  82+ 9171              ;;.HLPositive:            ClearCarryFlag                      ; now do adc hl,de
  83+ 9171              ;;                        sbc     hl,de                       ; aftert his hl will be 2's c
  84+ 9171              ;;                        ret
  85+ 9171              ;;
  86+ 9171              ;;; HL = HL (signed) - A (unsigned), uses HL, DE, A
  87+ 9171              ;;SubAusngFromHLsng:      ld      d,a
  88+ 9171              ;;                        ld      e,h
  89+ 9171              ;;                        ld      a,h
  90+ 9171              ;;                        and     SignMask8Bit
  91+ 9171              ;;                        ld      h,a
  92+ 9171              ;;                        ld      a,d
  93+ 9171              ;;                        add     hl,a
  94+ 9171              ;;                        ld      a,e
  95+ 9171              ;;                        and     SignOnly8Bit
  96+ 9171              ;;                        or      h
  97+ 9171              ;;                        ret
  98+ 9171              ;;; HL = A (unsigned) - HL (signed), uses HL, DE, BC, A
  99+ 9171              ;;HLEequAusngMinusHLsng:  ld      b,h
 100+ 9171              ;;                        ld      c,a
 101+ 9171              ;;                        ld      a,b
 102+ 9171              ;;                        and     SignOnly8Bit
 103+ 9171              ;;                        jr      nz,.DoAdd
 104+ 9171              ;;.DoSubtract:            ex      de,hl               ; move hl into de
 105+ 9171              ;;                        ld      h,0                 ; hl = a
 106+ 9171              ;;                        ld      l,c
 107+ 9171              ;;                        ClearCarryFlag
 108+ 9171              ;;                        sbc     hl,de               ; hl = a - hl
 109+ 9171              ;;                        ret
 110+ 9171              ;;.DoAdd:                 ld      a,c
 111+ 9171              ;;                        add hl,a
 112+ 9171              ;;                        ret
 113+ 9171              ;;
 114+ 9171              ;;
 115+ 9171              ;;TacticsPosMinusTarget:      WordSignedSubtract UBnKxlo, UBnkxsgn, CurrentTargetXpos, CurrentTargetXsgn, .ProcessY
 116+ 9171              ;;.ProcessY:                  WordSignedSubtract UBnKylo, UBnkysgn, CurrentTargetYpos, CurrentTargetYsgn, .ProcessZ
 117+ 9171              ;;.ProcessZ:                  WordSignedSubtract UBnKzlo, UBnkzsgn, CurrentTargetZpos, CurrentTargetZsgn, .ProcessDone
 118+ 9171              ;;.ProcessDone                ret
 119+ 9171              ;;
 120+ 9171
# file closed: ./Maths/asm_subtract.asm
 567  9171                  INCLUDE "./Maths/Utilities/AddDEToCash.asm"
# file opened: ./Maths/Utilities/AddDEToCash.asm
   1+ 9171              ; Note its big endian
   2+ 9171 2A 77 86     addDEtoCash:            ld      hl,(Cash)
   3+ 9174 19                                   add     hl,de
   4+ 9175 22 77 86                             ld      (Cash),hl
   5+ 9178 11 00 00                             ld      de,0
   6+ 917B 2A 79 86                             ld      hl,(Cash+2)
   7+ 917E ED 5A                                adc     hl,de
   8+ 9180 22 79 86                             ld      (Cash+2),hl
   9+ 9183 C9                                   ret
  10+ 9184
  11+ 9184 2A 77 86     subDEfromCash:          ld      hl,(Cash)
  12+ 9187 7C                                   ld      a,h
  13+ 9188 B5                                   or      l
  14+ 9189 2A 79 86                             ld      hl,(Cash+2)
  15+ 918C B4                                   or      h
  16+ 918D B5                                   or      l
  17+ 918E C8                                   ret     z               ; No cash return
  18+ 918F B7                                   or      a
  19+ 9190 2A 77 86                             ld      hl,(Cash)
  20+ 9193 ED 52                                sbc     hl,de
  21+ 9195 22 77 86                             ld      (Cash),hl
  22+ 9198 11 00 00                             ld      de,0
  23+ 919B 2A 79 86                             ld      hl,(Cash+2)
  24+ 919E ED 52                                sbc     hl,de
  25+ 91A0 22 79 86                             ld      (Cash+2),hl
  26+ 91A3                                      JumpOnBitSet h,7,.ZeroCash
  26+ 91A3 CB 7C       >                        bit 	7,h
  26+ 91A5 C2 A9 91    >                        jp      nz,.ZeroCash
  27+ 91A8 C9                                   ret
  28+ 91A9 21 00 00     .ZeroCash:              ld      hl,0
  29+ 91AC 22 77 86                             ld      (Cash),hl
  30+ 91AF 22 79 86                             ld      (Cash+2),hl
  31+ 91B2 C9                                   ret
  32+ 91B3
# file closed: ./Maths/Utilities/AddDEToCash.asm
 568  91B3                  INCLUDE "./Maths/DIVD3B2.asm"
# file opened: ./Maths/DIVD3B2.asm
   1+ 91B3              ;INPUTS: ahl = dividend cde = divisor
   2+ 91B3              ;OUTPUTS: cde = quotient ahl = remainder
   3+ 91B3 47           Div24by24:              ld b,a
   4+ 91B4 E5                                   push hl
   5+ 91B5 DD E1                                pop ix
   6+ 91B7 2E 18                                ld l,24
   7+ 91B9 E5                                   push hl
   8+ 91BA AF                                   xor a
   9+ 91BB 67                                   ld h,a
  10+ 91BC 6F                                   ld l,a
  11+ 91BD DD 29        .Div24by24loop:         add ix,ix
  12+ 91BF CB 10                                rl b
  13+ 91C1 ED 6A                                adc hl,hl
  14+ 91C3 17                                   rla
  15+ 91C4 B9                                   cp c
  16+ 91C5 38 0C                                jr c,.Div24by24skip
  17+ 91C7 20 05                                jr nz,.Div24by24setbit
  18+ 91C9 ED 52                                sbc hl,de
  19+ 91CB 19                                   add hl,de
  20+ 91CC 38 05                                jr c,.Div24by24skip
  21+ 91CE ED 52        .Div24by24setbit:       sbc hl,de
  22+ 91D0 99                                   sbc a,c
  23+ 91D1 DD 23                                inc ix
  24+ 91D3 E3           .Div24by24skip:         ex (sp),hl
  25+ 91D4 2D                                   dec l
  26+ 91D5 E3                                   ex (sp),hl
  27+ 91D6 20 E5                                jr nz,.Div24by24loop
  28+ 91D8 D1                                   pop de
  29+ 91D9 48                                   ld c,b
  30+ 91DA DD E5                                push ix
  31+ 91DC D1                                   pop de
  32+ 91DD C9                                   ret
  33+ 91DE
  34+ 91DE FD 67        Div24by24ASigned:       ld      iyh,a
  35+ 91E0 E6 7F                                and     SignMask8Bit
  36+ 91E2 CD B3 91                             call    Div24by24
  37+ 91E5 F5                                   push    af
  38+ 91E6 FD 7C                                ld      a,iyh
  39+ 91E8 E6 80                                and     SignOnly8Bit
  40+ 91EA B1                                   or      c
  41+ 91EB 4F                                   ld      c,a
  42+ 91EC F1                                   pop     af
  43+ 91ED C9                                   ret
  44+ 91EE
  45+ 91EE                                      ; CDE = AHL/CDE, AHL = remainder
  46+ 91EE FD 67        Div24by24LeadSign:      ld      iyh,a           ; Preserve signed in IYL
  47+ 91F0 A9                                   xor     c               ; flip sign if negative
  48+ 91F1 E6 80                                and     SignOnly8Bit    ; .
  49+ 91F3 FD 6F                                ld      iyl,a           ; .
  50+ 91F5 79                                   ld      a,c             ; make both values ABS
  51+ 91F6 E6 7F                                and     SignMask8Bit    ; .
  52+ 91F8 4F                                   ld      c,a             ; .
  53+ 91F9 FD 7C                                ld      a,iyh           ; .
  54+ 91FB E6 7F                                and     SignMask8Bit    ; .
  55+ 91FD CD B3 91                             call    Div24by24       ; do abs divide
  56+ 9200 FD B5                                or      iyl             ; bring in sign bit
  57+ 9202 FD 67                                ld      iyh,a           ; save a
  58+ 9204 79                                   ld      a,c             ; sort sign for c
  59+ 9205 FD B5                                or      iyl             ;
  60+ 9207 4F                                   ld      c,a             ;
  61+ 9208 FD 7C                                ld      a,iyh           ; sort sign of a
  62+ 920A C9                                   ret
  63+ 920B
  64+ 920B              ; --------------------------------------------------------------
  65+ 920B              ;divdide by 16 using undocumented instrunctions
  66+ 920B              ;Input: BC = Dividend, DE = Divisor, HL = 0
  67+ 920B              ;Output: BC = Quotient, HL = Remainder
  68+ 920B 47           PROJ256mulAdivQ:        ld      b,a
  69+ 920C 0E 00                                ld      c,0
  70+ 920E 16 00                                ld      d,0
  71+ 9210 3A 11 81                             ld      a,(varQ)
  72+ 9213 5F                                   ld      e,a
  73+ 9214 21 00 00     PROJDIV16UNDOC:         ld      hl,0
  74+ 9217 78                                   ld      a,b
  75+ 9218 06 10                                ld      b,16
  76+ 921A CB 31        PROJDIV16UNDOCLOOP:     sll     c       ; unroll 16 times
  77+ 921C 17                                   rla             ; ...
  78+ 921D ED 6A                                adc     hl,hl       ; ...
  79+ 921F ED 52                                sbc     hl,de       ; ...
  80+ 9221 30 02                                jr      nc,PROJDIV16UNDOCSKIP       ; ...
  81+ 9223 19                                   add     hl,de       ; ...
  82+ 9224 0D                                   dec     c       ; ...
  83+ 9225 10 F3        PROJDIV16UNDOCSKIP:     djnz    PROJDIV16UNDOCLOOP
  84+ 9227 79                                   ld      a,c
  85+ 9228 32 12 81                             ld      (varR),a
  86+ 922B C9                                   ret
  87+ 922C
  88+ 922C
  89+ 922C
  90+ 922C
# file closed: ./Maths/DIVD3B2.asm
 569  922C                  INCLUDE "./Maths/multiply.asm"
# file opened: ./Maths/multiply.asm
   1+ 922C              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
   2+ 922C 2A 12 81                             ld  hl,(varRS)
   3+ 922F 3A 11 81                             ld  a,(varQ)
   4+ 9232 C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
   5+ 9234 11 00 00                             ld  de,0        ; de = XY
   6+ 9237 47                                   ld  b,a         ; b = Q
   7+ 9238                                      ShiftHLRight1
   7+ 9238 CB 3C       >			   srl h
   7+ 923A CB 1D       >			   rr  l
   8+ 923C CB 20                                sla b
   9+ 923E 30 03                                jr  nc,.LL126
  10+ 9240 EB           .LL125:                 ex de,hl
  11+ 9241 19                                   add hl,de
  12+ 9242 EB                                   ex  de,hl       ; de = de + rs
  13+ 9243              .LL126:                 ShiftHLRight1
  13+ 9243 CB 3C       >			   srl h
  13+ 9245 CB 1D       >			   rr  l
  14+ 9247 CB 20                                sla b
  15+ 9249 38 F5                                jr      c,.LL125
  16+ 924B 20 F6                                jr      nz,.LL126
  17+ 924D EB                                   ex      de,hl   ; hl = result
  18+ 924E D1 C1                                pop     bc,,de
  19+ 9250 C9                                   ret
  20+ 9251
  21+ 9251
  22+ 9251              MacroDEEquQmulASigned:  MACRO
  23+ 9251 ~                                    ld      d,a                         ; save a into d
  24+ 9251 ~                                    ld      a,(varQ)
  25+ 9251 ~                                    ld      e,a
  26+ 9251 ~                                    xor     d                           ; a = a xor var Q
  27+ 9251 ~                                    and     SignOnly8Bit
  28+ 9251 ~                                    ld      b,a                         ; b = sign of a xor q
  29+ 9251 ~                                    ld      a,d                         ; d = abs d (or a reg)
  30+ 9251 ~                                    and     SignMask8Bit
  31+ 9251 ~                                    ld      d,a
  32+ 9251 ~                                    ld      a,e                         ; e = abs e (or varQ)
  33+ 9251 ~                                    and     SignMask8Bit
  34+ 9251 ~                                    ld      e,a
  35+ 9251 ~                                    mul                                 ; de = a * Q
  36+ 9251 ~                                    ld      a,d
  37+ 9251 ~                                    or      b                           ; de = a * Q leading sign bit
  38+ 9251 ~                                    ld      d,a
  39+ 9251                                      ENDM
  40+ 9251
  41+ 9251
  42+ 9251
  43+ 9251                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
  44+ 9251              madXAequQmulAaddRS:     MacroDEEquQmulASigned
  44+ 9251 57          >                        ld      d,a                         ; save a into d
  44+ 9252 3A 11 81    >                        ld      a,(varQ)
  44+ 9255 5F          >                        ld      e,a
  44+ 9256 AA          >                        xor     d                           ; a = a xor var Q
  44+ 9257 E6 80       >                        and     SignOnly8Bit
  44+ 9259 47          >                        ld      b,a                         ; b = sign of a xor q
  44+ 925A 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  44+ 925B E6 7F       >                        and     SignMask8Bit
  44+ 925D 57          >                        ld      d,a
  44+ 925E 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  44+ 925F E6 7F       >                        and     SignMask8Bit
  44+ 9261 5F          >                        ld      e,a
  44+ 9262 ED 30       >                        mul                                 ; de = a * Q
  44+ 9264 7A          >                        ld      a,d
  44+ 9265 B0          >                        or      b                           ; de = a * Q leading sign bit
  44+ 9266 57          >                        ld      d,a
  45+ 9267 2A 12 81     madDEaddRS:             ld		hl,(varR)
  46+ 926A CD 73 92                             call	madXAAddHLDESigned
  47+ 926D EB                                   ex      de,hl                       ; de = R.S + DE
  48+ 926E                                      ClearCarryFlag
  48+ 926E B7          >                        or a
  49+ 926F DD 6B                                ld      ixl,e
  50+ 9271 7A                                   ld      a,d
  51+ 9272 C9                                   ret
  52+ 9273
  53+ 9273
  54+ 9273 7C           madXAAddHLDESigned:     ld      a,h
  55+ 9274 E6 80                                and     SignOnly8Bit
  56+ 9276 47                                   ld      b,a                         ;save sign bit in b
  57+ 9277 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  58+ 9278                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
  58+ 9278 FA 90 92    >                        jp		m, .ADDHLDEOppSGN
  59+ 927B 78           .ADDHLDESameSigns:       ld      a,b
  60+ 927C B2                                   or      d
  61+ 927D                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
  61+ 927D FA 82 92    >                        jp		m, .ADDHLDESameNeg
  62+ 9280 19                                   add     hl,de
  63+ 9281 C9                                   ret
  64+ 9282 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  65+ 9283 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  66+ 9285 67                                   ld      h,a
  67+ 9286 7A                                   ld      a,d
  68+ 9287 E6 7F                                and     SignMask8Bit
  69+ 9289 57                                   ld      d,a
  70+ 928A 19                                   add     hl,de
  71+ 928B 3E 80                                ld      a,SignOnly8Bit
  72+ 928D B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  73+ 928E 67                                   ld      h,a
  74+ 928F C9                                   ret
  75+ 9290 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  76+ 9291 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  77+ 9293 67                                   ld      h,a
  78+ 9294 7A                                   ld      a,d
  79+ 9295 E6 7F                                and     SignMask8Bit
  80+ 9297 57                                   ld      d,a
  81+ 9298 B7                                   or      a
  82+ 9299 ED 52                                sbc     hl,de
  83+ 929B 38 04                                jr      c,.ADDHLDEOppInvert
  84+ 929D 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  85+ 929E B4                                   or      h
  86+ 929F 67                                   ld      h,a                         ; set the previou sign value
  87+ 92A0 C9                                   ret
  88+ 92A1              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
  88+ 92A1 AF          >                    xor a
  88+ 92A2 95          >                    sub l
  88+ 92A3 6F          >                    ld l,a
  88+ 92A4 9F          >                    sbc a,a
  88+ 92A5 94          >                    sub h
  88+ 92A6 67          >                    ld h,a
  89+ 92A7 78                                   ld      a,b
  90+ 92A8 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  91+ 92AA B4                                   or      h
  92+ 92AB 67                                   ld      h,a                         ; recover sign
  93+ 92AC C9                                   ret
  94+ 92AD
  95+ 92AD
  96+ 92AD                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
  97+ 92AD                  ;
  98+ 92AD                  ; enter : hl = 16-bit multiplier   = x
  99+ 92AD                  ;          e =  8-bit multiplicand = y
 100+ 92AD                  ;
 101+ 92AD                  ; exit  : ahl = 24-bit product
 102+ 92AD                  ;         carry reset
 103+ 92AD                  ;
 104+ 92AD                  ; uses  : af, de, hl
 105+ 92AD 54           AHLequHLmulE:           ld d,h                      ; xh
 106+ 92AE 63                                   ld h,e                      ; yl
 107+ 92AF ED 30                                mul de                      ; xh*yl
 108+ 92B1 EB                                   ex de,hl
 109+ 92B2 ED 30                                mul de                      ; yl*xl, hl = xh*yl
 110+ 92B4
 111+ 92B4 7A                                   ld  a,d                     ; sum products
 112+ 92B5 85                                   add a,l
 113+ 92B6 57                                   ld  d,a
 114+ 92B7 EB                                   ex de,hl
 115+ 92B8
 116+ 92B8 7A                                   ld  a,d
 117+ 92B9 CE 00                                adc a,0
 118+ 92BB C9                                   ret
 119+ 92BC
 120+ 92BC 54           HLE0quH0mulE:           ld      d,h                 ; .
 121+ 92BD 63                                   ld      h,e                 ; .
 122+ 92BE ED 30                                mul     de                  ; de = xh * yl
 123+ 92C0 EB                                   ex      de,hl
 124+ 92C1 C9                                   ret
 125+ 92C2
 126+ 92C2                 ; multiplication of two 16-bit numbers into a 32-bit product
 127+ 92C2                 ;
 128+ 92C2                 ; enter : de = 16-bit multiplicand = y
 129+ 92C2                 ;         hl = 16-bit multiplicand = x
 130+ 92C2                 ;
 131+ 92C2                 ; exit  : dehl = 32-bit product
 132+ 92C2                 ;         carry reset
 133+ 92C2                 ;
 134+ 92C2                 ; uses  : af, bc, de, hl
 135+ 92C2
 136+ 92C2
 137+ 92C2
 138+ 92C2 45           DEHLequDEmulHL:         ld b,l                      ; x0
 139+ 92C3 4B                                   ld c,e                      ; y0
 140+ 92C4 5D                                   ld e,l                      ; x0
 141+ 92C5 6A                                   ld l,d
 142+ 92C6 E5                                   push hl                     ; x1 y1
 143+ 92C7 69                                   ld l,c                      ; y0
 144+ 92C8              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
 145+ 92C8 ED 30                                mul de                      ; y1*x0
 146+ 92CA EB                                   ex de,hl
 147+ 92CB ED 30                                mul de                      ; x1*y0
 148+ 92CD
 149+ 92CD AF                                   xor a                       ; zero A
 150+ 92CE 19                                   add hl,de                   ; sum cross products p2 p1
 151+ 92CF 8F                                   adc a,a                     ; capture carry p3
 152+ 92D0
 153+ 92D0 59                                   ld e,c                      ; x0
 154+ 92D1 50                                   ld d,b                      ; y0
 155+ 92D2 ED 30                                mul de                      ; y0*x0
 156+ 92D4
 157+ 92D4 47                                   ld b,a                      ; carry from cross products
 158+ 92D5 4C                                   ld c,h                      ; LSB of MSW from cross products
 159+ 92D6
 160+ 92D6 7A                                   ld a,d
 161+ 92D7 85                                   add a,l
 162+ 92D8 67                                   ld h,a
 163+ 92D9 6B                                   ld l,e                      ; LSW in HL p1 p0
 164+ 92DA
 165+ 92DA D1                                   pop de
 166+ 92DB ED 30                                mul de                      ; x1*y1
 167+ 92DD
 168+ 92DD EB                                   ex de,hl
 169+ 92DE ED 4A                                adc hl,bc
 170+ 92E0 EB                                   ex de,hl                    ; de = final MSW
 171+ 92E1
 172+ 92E1 C9                                   ret
 173+ 92E2
 174+ 92E2              ; multiplication of two 16-bit numbers into a 16-bit product
 175+ 92E2              ; enter : de = 16-bit multiplicand
 176+ 92E2              ;         hl = 16-bit multiplicand
 177+ 92E2              ; exit  : hl = 16-bit product
 178+ 92E2              ;         carry reset
 179+ 92E2              ; maths is
 180+ 92E2              ;        hl = y , de= x
 181+ 92E2              ;        hl = xhi,ylo + (yhigh * xlow)
 182+ 92E2              ;        hl = yhih & xlo + x
 183+ 92E2              ;
 184+ 92E2              ;
 185+ 92E2              ; uses  : af, bc, de, hl
 186+ 92E2 C5           mulDEbyHL:              push    bc
 187+ 92E3 7A                                   ld a,d                      ; a = xh
 188+ 92E4 54                                   ld d,h                      ; d = yh
 189+ 92E5 67                                   ld h,a                      ; h = xh
 190+ 92E6 4B                                   ld c,e                      ; c = xl
 191+ 92E7 45                                   ld b,l                      ; b = yl
 192+ 92E8 ED 30                                mul                         ; yh * yl
 193+ 92EA EB                                   ex de,hl
 194+ 92EB ED 30                                mul                         ; xh * yl
 195+ 92ED 19                                   add hl,de                   ; add cross products
 196+ 92EE 59                                   ld e,c
 197+ 92EF 50                                   ld d,b
 198+ 92F0 ED 30                                mul                         ; yl * xl
 199+ 92F2 7D                                   ld a,l                      ; cross products lsb
 200+ 92F3 82                                   add a,d                     ; add to msb final
 201+ 92F4 67                                   ld h,a
 202+ 92F5 6B                                   ld l,e                      ; hl = final
 203+ 92F6                                      ; 83 cycles, 19 bytes
 204+ 92F6 AF                                   xor a                       ; reset carry
 205+ 92F7 C1                                   pop     bc
 206+ 92F8 C9                                   ret
 207+ 92F9
 208+ 92F9
 209+ 92F9              ; CHL = multiplicand D = multiplier
 210+ 92F9              ; DCHL = CHL * D
 211+ 92F9 7A           mulCHLbyDSigned:        ld      a,d                 ; get sign from d
 212+ 92FA AC                                   xor     h                   ; xor with h to get resultant sign
 213+ 92FB E6 80                                and     SignOnly8Bit        ; .
 214+ 92FD FD 67                                ld      iyh,a               ; iyh = copy of sign
 215+ 92FF 79                                   ld      a,c                 ; now CHL = ABS (CHL)
 216+ 9300 E6 7F                                and     SignMask8Bit        ; .
 217+ 9302 4F                                   ld      c,a                 ; .
 218+ 9303 7A                                   ld      a,d                 ; d = ABS D
 219+ 9304 E6 7F                                and     SignMask8Bit        ; .
 220+ 9306              ; At this point CHL = ABS (HLE), A = ABS(D)
 221+ 9306 57           .mul1:                  ld      d,a                 ; first do D * L
 222+ 9307 5D                                   ld      e,l                 ; .
 223+ 9308 ED 30                                mul     de                  ; DE = L * D
 224+ 930A 08                                   ex      af,af'              ; save multiplier
 225+ 930B 6B                                   ld      l,e                 ; L = p0
 226+ 930C 7A                                   ld      a,d                 ; carry byte
 227+ 930D 08                                   ex      af,af'              ; retrieve muliplier and save carry byte along with flags
 228+ 930E 5C           .mul2:                  ld      e,h                 ; byte 2 of multiplicand
 229+ 930F 57                                   ld      d,a                 ; and multiplier
 230+ 9310 ED 30                                mul     de                  ; now its D & L
 231+ 9312 08                                   ex      af,af'              ; get back carry byte with flags
 232+ 9313 83           .carrybyte1:            add     a,e                 ; add low byte carry to result and retain carry too through next instructions
 233+ 9314 67                                   ld      h,a                 ; h = P1
 234+ 9315 7A                                   ld      a,d                 ; a = carry byte
 235+ 9316 08                                   ex      af,af'              ; save carry byte and get back multiplier with flags
 236+ 9317 59           .mul3:                  ld      e,c                 ; byte 3 of multiplicand
 237+ 9318 57                                   ld      d,a                 ;
 238+ 9319 ED 30                                mul     de                  ;
 239+ 931B 08                                   ex      af,af'              ; get back carry byte and carry prior to first add
 240+ 931C 8B                                   adc     a,e                 ;
 241+ 931D FD B4                                or      iyh                 ; recover saved resultant sign
 242+ 931F 4F                                   ld      c,a                 ; c byte 3. Note the value range allowed can never cause a byte 3 carry
 243+ 9320 C9                                   ret
 244+ 9321
 245+ 9321              ;  CHL = 53456 D = 1E
 246+ 9321              ;  56 * 1E = A14 L = 14 carry = 0A
 247+ 9321              ;  34 * 1E = 618 H = 18 +A = 22 carry = 6
 248+ 9321              ;  5  * 1E = 096 C = 96 + 6 = 9C
 249+ 9321              ;  CHL = 9C2214
 250+ 9321              ;mult3
 251+ 9321              ; DELC = HLE * D, uses HL, DE, C , A , IYH
 252+ 9321              ; HLE = multiplicand D = multiplier
 253+ 9321              ; tested by mathstestsun.asm all passed
 254+ 9321              ; Algorithm
 255+ 9321              ; AC =  E * D   (save carry)         H    L    E
 256+ 9321              ; DE =  L * D                                  D
 257+ 9321              ;  L =  A + E + carry                         E*D (lo)
 258+ 9321              ; DE =  H * D                             L*D+ ^ (hi)
 259+ 9321              ;  E =  A + E + carry                H*D (lo) + carry
 260+ 9321              ;
 261+ 9321              ;
 262+ 9321 7A           mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 263+ 9322 AC                                   xor     h                   ; xor with h to get resultant sign
 264+ 9323 E6 80                                and     SignOnly8Bit        ; .
 265+ 9325 FD 67                                ld      iyh,a               ; iyh = copy of sign
 266+ 9327 7C                                   ld      a,h                 ; now HLE = ABS (HLE)
 267+ 9328 E6 7F                                and     SignMask8Bit        ; .
 268+ 932A 67                                   ld      h,a                 ; .
 269+ 932B 7A                                   ld      a,d                 ; d = ABS D
 270+ 932C E6 7F                                and     SignMask8Bit        ; .
 271+ 932E 57                                   ld      d,a                 ; .
 272+ 932F B7           .testEitherSideZero:    or      a
 273+ 9330 28 24                                jr      z,.ResultZero
 274+ 9332 7C                                   ld      a,h
 275+ 9333 B5                                   or      l
 276+ 9334 B3                                   or      e
 277+ 9335 28 1F                                jr      z,.ResultZero
 278+ 9337              ; At this point HLE = ABS (HLE), A = ABS(D)
 279+ 9337 42                                   ld      b,d                 ; save Quotient
 280+ 9338 ED 30        .mul1:                  mul     de                  ; C = E * D
 281+ 933A 4B                                   ld      c,e                 ; C = p0
 282+ 933B FD 6A                                ld      iyl,d               ; save carry (p1)
 283+ 933D 5D           .mul2:                  ld      e,l                 ; L = L * D
 284+ 933E 50                                   ld      d,b                 ; .
 285+ 933F ED 30                                mul     de                  ; .
 286+ 9341 FD 7D                                ld      a,iyl               ; get back p1
 287+ 9343 83           .carrybyte1:            add     a,e                 ; L = L + E
 288+ 9344 6F                                   ld      l,a                 ; .
 289+ 9345 FD 6A                                ld      iyl,d               ; save new carry byte
 290+ 9347 5C           .mul3:                  ld      e,h                 ; E = H * D
 291+ 9348 50                                   ld      d,b                 ; .
 292+ 9349 ED 30                                mul     de                  ; .
 293+ 934B FD 7D                                ld      a,iyl
 294+ 934D 8B                                   adc     a,e                 ; .
 295+ 934E 5F                                   ld      e,a                 ; .
 296+ 934F 7A           .ItsNotZero:            ld      a,d                 ;
 297+ 9350 CE 00                                adc     a,0                 ; final carry bit
 298+ 9352 FD B4                                or      iyh                 ; bring back sign
 299+ 9354 57                                   ld      d,a                 ; s = sign
 300+ 9355 C9                                   ret
 301+ 9356 11 00 00     .ResultZero:            ld      de,0
 302+ 9359                                      ZeroA
 302+ 9359 AF          >                        xor a
 303+ 935A 4F                                   ld      c,a
 304+ 935B 6F                                   ld      l,a
 305+ 935C C9                                   ret
 306+ 935D
 307+ 935D              ;;;
 308+ 935D              ;;;
 309+ 935D              ;;;mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 310+ 935D              ;;;                        xor     h                   ; xor with h to get resultant sign
 311+ 935D              ;;;                        and     SignOnly8Bit        ; .
 312+ 935D              ;;;                        ld      iyh,a               ; iyh = copy of sign
 313+ 935D              ;;;                        ld      a,h                 ; now HLE = ABS (HLE)
 314+ 935D              ;;;                        and     SignMask8Bit        ; .
 315+ 935D              ;;;                        ld      h,a                 ; .
 316+ 935D              ;;;                        ld      a,d                 ; d = ABS D
 317+ 935D              ;;;                        and     SignMask8Bit        ; .
 318+ 935D              ;;;                        ld      d,a                 ; .
 319+ 935D              ;;;.testEitherSideZero:    or      a
 320+ 935D              ;;;                        jr      z,.ResultZero
 321+ 935D              ;;;                        ld      a,h
 322+ 935D              ;;;                        or      l
 323+ 935D              ;;;                        or      e
 324+ 935D              ;;;                        jr      z,.ResultZero
 325+ 935D              ;;;; At this point HLE = ABS (HLE), A = ABS(D)
 326+ 935D              ;;;.mul1:                  mul     de                  ; C = E * D
 327+ 935D              ;;;                        ex      af,af'              ; save mulitplier
 328+ 935D              ;;;                        ld      c,e                 ; C = p0
 329+ 935D              ;;;                        ld      a,d                 ; save carry (p1)
 330+ 935D              ;;;                        ex      af,af'              ; .
 331+ 935D              ;;;.mul2:                  ld      e,l                 ; L = L * D
 332+ 935D              ;;;                        ld      d,a                 ; .
 333+ 935D              ;;;                        mul     de                  ; .
 334+ 935D              ;;;                        ex      af,af'              ; .
 335+ 935D              ;;;.carrybyte1:            add     a,e                 ; L = L + E
 336+ 935D              ;;;                        ld      l,a                 ; .
 337+ 935D              ;;;                        ld      a,d
 338+ 935D              ;;;                        ex      af,af'              ; save new carry byte
 339+ 935D              ;;;.mul3:                  ld      e,h                 ; E = H * D
 340+ 935D              ;;;                        ld      d,a                 ; .
 341+ 935D              ;;;                        mul     de                  ; .
 342+ 935D              ;;;                        ex      af,af'              ; .
 343+ 935D              ;;;                        adc     a,e                 ; .
 344+ 935D              ;;;                        ld      e,a                 ; .
 345+ 935D              ;;;.ItsNotZero:            ld      a,d                 ;
 346+ 935D              ;;;                        adc     a,0                 ; final carry bit
 347+ 935D              ;;;                        or      iyh                 ; bring back sign
 348+ 935D              ;;;                        ld      d,a                 ; s = sign
 349+ 935D              ;;;                        ret
 350+ 935D              ;;;.ResultZero:            ld      de,0
 351+ 935D              ;;;                        ZeroA
 352+ 935D              ;;;                        ld      c,a
 353+ 935D              ;;;                        ld      l,a
 354+ 935D              ;;;                        ret
 355+ 935D
 356+ 935D              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
 357+ 935D              ; enter : de = 16-bit multiplicand
 358+ 935D              ;         hl = 16-bit multiplicand
 359+ 935D              ; exit  : hl = 16-bit product
 360+ 935D              ;         carry reset
 361+ 935D              ;
 362+ 935D              ; uses  : af, bc, de, hl
 363+ 935D 00           mulDEbyHLSignByte       DB      0
 364+ 935E AF           mulDEbyHLSgnTo2c:       xor     a
 365+ 935F 32 5D 93                             ld      (mulDEbyHLSignByte),a
 366+ 9362 7A           .SignDE:                ld      a,d
 367+ 9363 ED 27 80                             test    $80
 368+ 9366 28 08                                jr      z,.SignHL
 369+ 9368 E6 7F        .NegativeDE:            and     $7F
 370+ 936A 57                                   ld      d,a
 371+ 936B 3E 80                                ld      a,$80
 372+ 936D 32 5D 93                             ld      (mulDEbyHLSignByte),a
 373+ 9370 7C           .SignHL:                ld      a,h
 374+ 9371 ED 27 80                             test    $80
 375+ 9374 28 0B                                jr      z,.AbsoluteMultiply
 376+ 9376 E6 7F        .NegativeHL:            and     $7F
 377+ 9378 67                                   ld      h,a
 378+ 9379 3A 5D 93                             ld      a,(mulDEbyHLSignByte)
 379+ 937C EE 80                                xor     $80
 380+ 937E 32 5D 93                             ld      (mulDEbyHLSignByte),a
 381+ 9381 CD E2 92     .AbsoluteMultiply:      call    mulDEbyHL
 382+ 9384 3A 5D 93     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 383+ 9387 ED 27 80                             test    $80
 384+ 938A C8                                   ret     z
 385+ 938B AF           .Negateghl: 			xor 	a
 386+ 938C 95                                   sub 	l
 387+ 938D 6F                                   ld 		l,a
 388+ 938E 9F                                   sbc 	a,a
 389+ 938F 94                                   sub 	h
 390+ 9390 67                                   ld 		h,a
 391+ 9391 C9                                   ret
 392+ 9392
 393+ 9392 AF           mulDESgnbyHLUnsgnTo2c:  xor     a
 394+ 9393 32 5D 93                             ld      (mulDEbyHLSignByte),a
 395+ 9396 7A           .SignDE:                ld      a,d
 396+ 9397 ED 27 80                             test    $80
 397+ 939A 28 08                                jr      z,.AbsoluteMultiply
 398+ 939C E6 7F        .NegativeDE:            and     $7F
 399+ 939E 57                                   ld      d,a
 400+ 939F 3E 80                                ld      a,$80
 401+ 93A1 32 5D 93                             ld      (mulDEbyHLSignByte),a
 402+ 93A4 CD E2 92     .AbsoluteMultiply:      call    mulDEbyHL
 403+ 93A7 3A 5D 93     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 404+ 93AA ED 27 80                             test    $80
 405+ 93AD C8                                   ret     z
 406+ 93AE AF           .Negateghl:             xor 	a
 407+ 93AF 95                                   sub 	l
 408+ 93B0 6F                                   ld 		l,a
 409+ 93B1 9F                                   sbc 	a,a
 410+ 93B2 94                                   sub 	h
 411+ 93B3 67                                   ld 		h,a
 412+ 93B4 C9                                   ret
 413+ 93B5
 414+ 93B5
# file closed: ./Maths/multiply.asm
 570  93B5                  INCLUDE "./Maths/asm_square.asm"
# file opened: ./Maths/asm_square.asm
   1+ 93B5              ; "ASM_SQUA : TESTGOOD"
   2+ 93B5              ; "AP = A^2 A = low,P = hi"
   3+ 93B5
   4+ 93B5              inline_squde: MACRO
   5+ 93B5 ~            			ld	e,a
   6+ 93B5 ~            			ld  d,a
   7+ 93B5 ~            			mul
   8+ 93B5              			ENDM
   9+ 93B5
  10+ 93B5              inline_squa: MACRO
  11+ 93B5 ~            			ld	e,a
  12+ 93B5 ~            			ld  d,a
  13+ 93B5 ~            			mul
  14+ 93B5 ~            			ld	a,e
  15+ 93B5              			ENDM
  16+ 93B5
  17+ 93B5
  18+ 93B5              asm_squa:
  19+ 93B5 E6 7F        	and SignMask8Bit
  20+ 93B7              ; "ASM SQUA2 : TESTGOOD"
  21+ 93B7              ; "AP = A^2 A = low,P = hi singed"
  22+ 93B7              asm_squa2:
  23+ 93B7 5F           	ld e, a
  24+ 93B8 57           	ld d,a
  25+ 93B9 ED 30        	mul
  26+ 93BB ED 53 0F 80  	ld (varP),de
  27+ 93BF 7B           	ld a,e
  28+ 93C0 C9           	ret
# file closed: ./Maths/asm_square.asm
 571  93C1                  INCLUDE "./Maths/asm_sqrt.asm"
# file opened: ./Maths/asm_sqrt.asm
   1+ 93C1              ; "ASM SQRT : TESTGOOD"
   2+ 93C1              ; "16-bit integer square root"
   3+ 93C1              ; "call with de = number to square root"
   4+ 93C1              ; "returns   hl = square root"
   5+ 93C1              ; "corrupts  bc, de"
   6+ 93C1              asm_sqrt:
   7+ 93C1 01 00 80     	ld bc,$8000
   8+ 93C4 61           	ld h,c
   9+ 93C5 69           	ld l,c
  10+ 93C6              .sqrloop:
  11+ 93C6 CB 38        	srl b
  12+ 93C8 CB 19        	rr c
  13+ 93CA 09           	add hl,bc
  14+ 93CB EB           	ex de,hl
  15+ 93CC ED 52        	sbc hl,de
  16+ 93CE 38 04        	jr c,.sqrbit
  17+ 93D0 EB           	ex de,hl
  18+ 93D1 09           	add hl,bc
  19+ 93D2 18 05        	jr .sqrfi
  20+ 93D4              .sqrbit:
  21+ 93D4 19           	add hl,de
  22+ 93D5 EB           	ex de,hl
  23+ 93D6 B7           	or a
  24+ 93D7 ED 42        	sbc hl,bc
  25+ 93D9              .sqrfi:
  26+ 93D9 CB 3C        	srl h
  27+ 93DB CB 1D        	rr l
  28+ 93DD CB 38        	srl b
  29+ 93DF CB 19        	rr c
  30+ 93E1 30 E3        	jr nc,.sqrloop
  31+ 93E3 C9           	ret
  32+ 93E4
  33+ 93E4
  34+ 93E4              sqrtQR:					; Q = SQR(Qlo.Rhi) Q <~127
  35+ 93E4 3A 11 81     	ld		a,(varQ)
  36+ 93E7 5F           	ld		e,a
  37+ 93E8 3A 12 81     	ld		a,(varR)
  38+ 93EB 57           	ld		d,a
  39+ 93EC CD C1 93     	call	asm_sqrt
  40+ 93EF 7D               ld      a,l
  41+ 93F0 32 11 81     	ld		(varQ),a
  42+ 93F3 C9           	ret
  43+ 93F4
# file closed: ./Maths/asm_sqrt.asm
 572  93F4                  INCLUDE "./Maths/asm_divide.asm"
# file opened: ./Maths/asm_divide.asm
   1+ 93F4
   2+ 93F4
   3+ 93F4
   4+ 93F4              ;
   5+ 93F4              ;   Set flags E to 11111110
   6+ 93F4              ;   Loop:   A << 2
   7+ 93F4              ;           if carry was 0
   8+ 93F4              ;               if a >= D
   9+ 93F4              ;                   A = A - D
  10+ 93F4              ;                   clear carry (probably irrelevant really)
  11+ 93F4              ;           else
  12+ 93F4
  13+ 93F4              ;               sla flags << bringing in carry of 1
  14+ 93F4              ;               if bit 7 of flag was set then loop
  15+ 93F4              ;                                        elase a = e and exit
  16+ 93F4              ;
  17+ 93F4              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop BC/DE ==> BC, remainder in HL
  18+ 93F4              ;
  19+ 93F4              ;INPUTS: hl = dividend dbc = divisor
  20+ 93F4              ;OUTPUTS: hl/de -> AHL = quotient CDE = remainder, Carryflag set if divide by 0
  21+ 93F4
  22+ 93F4 14           Div16by24usgn:          inc     d                           ; can we fast retu
  23+ 93F5 15                                   dec     d
  24+ 93F6 20 13                                jr      nz,.ResultZero
  25+ 93F8 50 59                                ld      de,bc                       ; so prep for bc/de
  26+ 93FA 44 4D                                ld      bc,hl
  27+ 93FC 7A           .div16by16usng:         ld      a,d
  28+ 93FD B3                                   or      e
  29+ 93FE 28 10                                jr      z,.DivideByZero
  30+ 9400 14                                   inc     d
  31+ 9401 15                                   dec     d
  32+ 9402 CD AD 95                             call    BC_Div_DE
  33+ 9405                                      ZeroA
  33+ 9405 AF          >                        xor a
  34+ 9406 EB                                   ex      de,hl                       ; de = remainder (need to fix c after hl = nothing of worth)
  35+ 9407 60 69                                ld      hl,bc                       ; hl = result (a is zero from above)
  36+ 9409 4F                                   ld      c,a                         ; now fix c
  37+ 940A C9                                   ret
  38+ 940B AF           .ResultZero:            xor     a                           ; set AHL to 0 as d was 0 so h is zero
  39+ 940C 4F                                   ld      c,a                         ; c = 0
  40+ 940D 67                                   ld      h,a
  41+ 940E 6F                                   ld      l,a
  42+ 940F C9                                   ret
  43+ 9410 3E FF        .DivideByZero:          ld      a,$FF
  44+ 9412 67                                   ld      h,a
  45+ 9413 6F                                   ld      l,a
  46+ 9414                                      SetCarryFlag
  46+ 9414 37          >                        scf
  47+ 9415 C9                                   ret
  48+ 9416
  49+ 9416              ;DIVD4 P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
  50+ 9416 06 08        HLEquAmul256DivD:       ld		b,8							; counter
  51+ 9418 CB 27                                sla		a							;
  52+ 941A 67                                   ld		h,a							; r a * 2 we will build result in hl
  53+ 941B CB 17        .DivideLoop:            rl		a							; a = a * 2
  54+ 941D 38 03                                jr      c,.StraightToSubtraction    ; jump on carry to subtraction
  55+ 941F BA                                   cp      d                           ; what was var Q
  56+ 9420 38 03                                jr		c,.SkipSubtraction	        ; if a < d skip subtraction, note this will come to skip subtraction with carry the wrong way round
  57+ 9422              .StraightToSubtraction: ClearCarryFlag                      ; in 6502 the borrow flag is inverted carry, z80 just uses carry so we need to clear it
  57+ 9422 B7          >                        or a
  58+ 9423 9A                                   sbc     a,d                         ; a = a - q
  59+ 9424                                      ClearCarryFlag                      ; set carry so it gets shifted into bit 0 of b. we do this as we have to flip carry due to jr c from earlier cp d
  59+ 9424 B7          >                        or a
  60+ 9425 3F           .SkipSubtraction:       ccf                                 ; we need to do this as 6502 does opposite on carry, i.e. if we jumped direct here then carry would be set in z80
  61+ 9426 CB 14                                rl      h                           ; roll d left bringing in carry if there was an sbc performed
  62+ 9428 10 F1                                djnz    .DivideLoop                 ; 8 cycles
  63+ 942A BA           .CalculateRemainder:    cp      d                           ; calulate 256 * a / d if q >= q then answer will not fit in one byte d is still set, a holds remainder to be subtracted
  64+ 942B 30 19                                jr      nc, .RemainderTooBig
  65+ 942D                                      ClearCarryFlag                      ; remove carry as the previous cp will have set it and mess up the sla in the remainder loop
  65+ 942D B7          >                        or a
  66+ 942E 06 FE        .InitRemainderLoop:     ld      b,%11111110                 ; loop for bits 1 to 7
  67+ 9430 68                                   ld      l,b                         ; and set l to capture result bits (R)
  68+ 9431 CB 27        .RemainderLoop:         sla     a                           ; shift a left
  69+ 9433 38 0A                                jr      c, .RemainderSubtraction    ; if there was a carry go to subtraction
  70+ 9435 BA                                   cp      d                           ; if a < d then skip subtraction
  71+ 9436 38 01                                jr      c,.RemainderSkipSubtract    ; .
  72+ 9438 9A                                   sbc     d                           ; a > q so a = a - q, carry will be clear here
  73+ 9439 3F           .RemainderSkipSubtract: ccf                                 ; as the jr used z80 we need to flip the carry to behave like 6502
  74+ 943A CB 15                                rl      l                           ; rotate counter to the left
  75+ 943C 38 F3                                jr      c, .RemainderLoop           ; if there was a bit pushed to carry then loop
  76+ 943E C9                                   ret
  77+ 943F 9A           .RemainderSubtraction:  sbc     d                           ; as the carry came from an sla we want to retain it
  78+ 9440                                      SetCarryFlag                        ; roll in a carry bit to result
  78+ 9440 37          >                        scf
  79+ 9441 CB 15                                rl      l                           ;
  80+ 9443 38 EC                                jr      c, .RemainderLoop           ; and loop if there was a carry bit that came out
  81+ 9445 C9                                   ret
  82+ 9446 2E FF        .RemainderTooBig:       ld      l,$FF                       ; now hl = result
  83+ 9448 C9                                   ret
  84+ 9449
  85+ 9449 BA           AEquAmul256DivD:        cp      d
  86+ 944A 28 1D                                jr      z,.BothSame
  87+ 944C 30 1E                                jr      nc,.DgtA
  88+ 944E 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
  89+ 9450 CB 27        .DivideLoop:            sla     a
  90+ 9452 38 0D                                jr      c,.LL29
  91+ 9454                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
  91+ 9454 BA          >                        cp      d
  91+ 9455 DA 5A 94    >                        jp		c, .SkipSub
  92+ 9458 92                                   sub     d
  93+ 9459                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
  93+ 9459 B7          >                        or a
  94+ 945A              .SkipSub:               FlipCarryFlag                       ; if we did the subtract the carry will be clear so we need to invert to roll in.
  94+ 945A 3F          >                        ccf
  95+ 945B CB 13                                rl      e
  96+ 945D 38 F1                                jr      c,.DivideLoop
  97+ 945F 7B                                   ld      a,e
  98+ 9460 C9                                   ret
  99+ 9461 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
 100+ 9462                                      SetCarryFlag                        ; Set the C flag to rotate into the result in R
 100+ 9462 37          >                        scf
 101+ 9463 CB 13                                rl      e                           ; rotate counter e left
 102+ 9465 38 E9                                jr      c,.DivideLoop               ; if a bit was spat off teh end then loop
 103+ 9467 7B                                   ld      a,e                         ; stick result in a
 104+ 9468 C9                                   ret
 105+ 9469 3E 01        .BothSame:              ld  a,1
 106+ 946B C9                                   ret
 107+ 946C 3E FF        .DgtA:                  ld  a,255                           ; Fail with FF as result
 108+ 946E C9                                   ret
 109+ 946F
 110+ 946F
 111+ 946F              ; Divide 8-bit values
 112+ 946F              ; In: Divide E by divider C
 113+ 946F              ; Out: A = result, B = rest
 114+ 946F              ;
 115+ 946F              ;;;Div8:
 116+ 946F              ;;;    xor a
 117+ 946F              ;;;    ld b,8
 118+ 946F              ;;;Div8_Loop:
 119+ 946F              ;;;    rl e
 120+ 946F              ;;;    rla
 121+ 946F              ;;;    sub c
 122+ 946F              ;;;    jr nc,Div8_NoAdd
 123+ 946F              ;;;    add a,c
 124+ 946F              ;;;Div8_NoAdd:
 125+ 946F              ;;;    djnz Div8_Loop
 126+ 946F              ;;;    ld b,a0
 127+ 946F              ;;;    ld a,e
 128+ 946F              ;;;    rla
 129+ 946F              ;;;    cpl
 130+ 946F              ;;;    ret
 131+ 946F
 132+ 946F              ;;Inputs: DE is the numerator, BC is the divisor
 133+ 946F              ;;Outputs: DE is the result
 134+ 946F              ;;         A is a copy of E
 135+ 946F              ;;         HL is the remainder
 136+ 946F              ;;         BC is not changed
 137+ 946F              ;; so DE = DE /BC
 138+ 946F              ;140 bytes
 139+ 946F              ;145cc
 140+ 946F
 141+ 946F              MacroDEDivBC:       MACRO
 142+ 946F ~                                rla
 143+ 946F ~                                adc     hl,hl
 144+ 946F ~                                sbc     hl,bc
 145+ 946F ~                                jr      nc,$+3
 146+ 946F ~                                add     hl,bc
 147+ 946F                                  ENDM
 148+ 946F
 149+ 946F              DEequDEDivBC:
 150+ 946F AF               xor a
 151+ 9470 ED 62            sbc hl,hl
 152+ 9472 7A               ld a,d
 153+ 9473                  MacroDEDivBC
 153+ 9473 17          >                    rla
 153+ 9474 ED 6A       >                    adc     hl,hl
 153+ 9476 ED 42       >                    sbc     hl,bc
 153+ 9478 30 01       >                    jr      nc,$+3
 153+ 947A 09          >                    add     hl,bc
 154+ 947B                  MacroDEDivBC
 154+ 947B 17          >                    rla
 154+ 947C ED 6A       >                    adc     hl,hl
 154+ 947E ED 42       >                    sbc     hl,bc
 154+ 9480 30 01       >                    jr      nc,$+3
 154+ 9482 09          >                    add     hl,bc
 155+ 9483                  MacroDEDivBC
 155+ 9483 17          >                    rla
 155+ 9484 ED 6A       >                    adc     hl,hl
 155+ 9486 ED 42       >                    sbc     hl,bc
 155+ 9488 30 01       >                    jr      nc,$+3
 155+ 948A 09          >                    add     hl,bc
 156+ 948B                  MacroDEDivBC
 156+ 948B 17          >                    rla
 156+ 948C ED 6A       >                    adc     hl,hl
 156+ 948E ED 42       >                    sbc     hl,bc
 156+ 9490 30 01       >                    jr      nc,$+3
 156+ 9492 09          >                    add     hl,bc
 157+ 9493                  MacroDEDivBC
 157+ 9493 17          >                    rla
 157+ 9494 ED 6A       >                    adc     hl,hl
 157+ 9496 ED 42       >                    sbc     hl,bc
 157+ 9498 30 01       >                    jr      nc,$+3
 157+ 949A 09          >                    add     hl,bc
 158+ 949B                  MacroDEDivBC
 158+ 949B 17          >                    rla
 158+ 949C ED 6A       >                    adc     hl,hl
 158+ 949E ED 42       >                    sbc     hl,bc
 158+ 94A0 30 01       >                    jr      nc,$+3
 158+ 94A2 09          >                    add     hl,bc
 159+ 94A3                  MacroDEDivBC
 159+ 94A3 17          >                    rla
 159+ 94A4 ED 6A       >                    adc     hl,hl
 159+ 94A6 ED 42       >                    sbc     hl,bc
 159+ 94A8 30 01       >                    jr      nc,$+3
 159+ 94AA 09          >                    add     hl,bc
 160+ 94AB                  MacroDEDivBC
 160+ 94AB 17          >                    rla
 160+ 94AC ED 6A       >                    adc     hl,hl
 160+ 94AE ED 42       >                    sbc     hl,bc
 160+ 94B0 30 01       >                    jr      nc,$+3
 160+ 94B2 09          >                    add     hl,bc
 161+ 94B3 17               rla
 162+ 94B4 2F               cpl
 163+ 94B5 57               ld d,a
 164+ 94B6
 165+ 94B6 7B               ld a,e
 166+ 94B7                  MacroDEDivBC
 166+ 94B7 17          >                    rla
 166+ 94B8 ED 6A       >                    adc     hl,hl
 166+ 94BA ED 42       >                    sbc     hl,bc
 166+ 94BC 30 01       >                    jr      nc,$+3
 166+ 94BE 09          >                    add     hl,bc
 167+ 94BF                  MacroDEDivBC
 167+ 94BF 17          >                    rla
 167+ 94C0 ED 6A       >                    adc     hl,hl
 167+ 94C2 ED 42       >                    sbc     hl,bc
 167+ 94C4 30 01       >                    jr      nc,$+3
 167+ 94C6 09          >                    add     hl,bc
 168+ 94C7                  MacroDEDivBC
 168+ 94C7 17          >                    rla
 168+ 94C8 ED 6A       >                    adc     hl,hl
 168+ 94CA ED 42       >                    sbc     hl,bc
 168+ 94CC 30 01       >                    jr      nc,$+3
 168+ 94CE 09          >                    add     hl,bc
 169+ 94CF                  MacroDEDivBC
 169+ 94CF 17          >                    rla
 169+ 94D0 ED 6A       >                    adc     hl,hl
 169+ 94D2 ED 42       >                    sbc     hl,bc
 169+ 94D4 30 01       >                    jr      nc,$+3
 169+ 94D6 09          >                    add     hl,bc
 170+ 94D7                  MacroDEDivBC
 170+ 94D7 17          >                    rla
 170+ 94D8 ED 6A       >                    adc     hl,hl
 170+ 94DA ED 42       >                    sbc     hl,bc
 170+ 94DC 30 01       >                    jr      nc,$+3
 170+ 94DE 09          >                    add     hl,bc
 171+ 94DF                  MacroDEDivBC
 171+ 94DF 17          >                    rla
 171+ 94E0 ED 6A       >                    adc     hl,hl
 171+ 94E2 ED 42       >                    sbc     hl,bc
 171+ 94E4 30 01       >                    jr      nc,$+3
 171+ 94E6 09          >                    add     hl,bc
 172+ 94E7                  MacroDEDivBC
 172+ 94E7 17          >                    rla
 172+ 94E8 ED 6A       >                    adc     hl,hl
 172+ 94EA ED 42       >                    sbc     hl,bc
 172+ 94EC 30 01       >                    jr      nc,$+3
 172+ 94EE 09          >                    add     hl,bc
 173+ 94EF                  MacroDEDivBC
 173+ 94EF 17          >                    rla
 173+ 94F0 ED 6A       >                    adc     hl,hl
 173+ 94F2 ED 42       >                    sbc     hl,bc
 173+ 94F4 30 01       >                    jr      nc,$+3
 173+ 94F6 09          >                    add     hl,bc
 174+ 94F7 17               rla
 175+ 94F8 2F               cpl
 176+ 94F9 5F               ld e,a
 177+ 94FA C9               ret
 178+ 94FB
 179+ 94FB
 180+ 94FB
 181+ 94FB              ;divdide by 16 using undocumented instrunctions
 182+ 94FB              ;Input: BC = Dividend, DE = Divisor, HL = 0
 183+ 94FB              ;Output: BC = Quotient, HL = Remainder
 184+ 94FB              ; Our use
 185+ 94FB              ; BC = A0
 186+ 94FB              ; DE = 0C
 187+ 94FB              ; so BC = a * 256 / C
 188+ 94FB              DIV16Amul256dCUNDOC:    JumpIfAGTENusng	  c,DEV16ATooLarge                                          ; first off if a > c ten return 255
 188+ 94FB B9          >                        cp     c
 188+ 94FC D2 27 95    >                        jp		nc,DEV16ATooLarge
 189+ 94FF 47                                   ld      b,a
 190+ 9500 59                                   ld      e,c
 191+ 9501 0E 00                                ld      c,0
 192+ 9503 16 00                                ld      d,0
 193+ 9505 C3 12 95                             jp      DIV16UNDOC
 194+ 9508 47           DIV16Amul256dQUNDOC:    ld      b,a
 195+ 9509 0E 00                                ld      c,0
 196+ 950B 21 11 81                             ld      hl,varQ
 197+ 950E 7E                                   ld      a,(hl)
 198+ 950F 16 00                                ld      d,0
 199+ 9511 5F                                   ld      e,a
 200+ 9512              DIV16BCDivDEUNDOC:
 201+ 9512 21 00 00     DIV16UNDOC:             ld      hl,0
 202+ 9515 78                                   ld      a,b
 203+ 9516 06 10                                ld      b,16
 204+ 9518 CB 31        DIV16UNDOCLOOP:         sll	c		; unroll 16 times
 205+ 951A 17                                   rla			; ...
 206+ 951B ED 6A                                adc	hl,hl		; ...
 207+ 951D ED 52                                sbc	hl,de		; ...
 208+ 951F 30 02                                jr	nc,DIV16UNDOCSKIP		; ...
 209+ 9521 19                                   add	hl,de		; ...
 210+ 9522 0D                                   dec	c		; ...
 211+ 9523 10 F3        DIV16UNDOCSKIP:         djnz DIV16UNDOCLOOP
 212+ 9525 47                                   ld   b,a
 213+ 9526 C9                                   ret
 214+ 9527 01 FF 00     DEV16ATooLarge:         ld     bc,$00FF
 215+ 952A C9                                   ret
 216+ 952B              ; switch to logarithm version
 217+ 952B              ; "> asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 218+ 952B 06 08        asm_div8:               ld b,8
 219+ 952D AF                                   xor a
 220+ 952E CB 21        .div8_loop:	            sla c
 221+ 9530 17                                   rla
 222+ 9531 BA                                   cp d
 223+ 9532 38 02                                jr c,.div8_skip
 223+ 9534
 224+ 9534 0C                                   inc c
 225+ 9535 92                                   sub d
 226+ 9536 10 F6        .div8_skip:	            djnz .div8_loop
 227+ 9538 C9                                   ret
 228+ 9539              ; ">asm_div16: HL_Div_C: HL is the numerator,  C is the denominator, output A is the remainder, B is 0, C,DE is not changedHL is the quotient"
 229+ 9539 06 10        asm_div16:              ld b,16
 230+ 953B AF                                   xor a
 231+ 953C CB 25        div16_loop:	            sla l
 232+ 953E CB 14                                rl	h
 233+ 9540              ;    add hl,hl
 234+ 9540 17                                   rla
 235+ 9541 B9                                   cp c
 236+ 9542 38 02                                jr c,div16_skip
 237+ 9544 2C                                   inc l
 238+ 9545 91                                   sub c
 239+ 9546 10 F4        div16_skip:		        djnz div16_loop
 240+ 9548 C9                                   ret
 241+ 9549              ;
 242+ 9549              ; Divide 16-bit values (with 16-bit result)
 243+ 9549              ; In: Divide BC by divider DE
 244+ 9549              ; Out: BC = result, HL = rest
 245+ 9549              ;
 246+ 9549              HLDivC_Iteration: 	MACRO
 247+ 9549 ~            					add	hl,hl		; unroll 16 times
 248+ 9549 ~            					rla				; ...
 249+ 9549 ~            					cp	c			; ...
 250+ 9549 ~            					jr	1F
 251+ 9549 ~            					sub	c			; ...
 252+ 9549 ~            1:
 253+ 9549 ~            					inc	l			; ...
 254+ 9549              					ENDM
 255+ 9549
 256+ 9549
 257+ 9549              ; 06 06 2022 Not used
 258+ 9549              ; ">div1616: BC = BC / DE. HL = remainder"
 259+ 9549 21 00 00     Div1616:            ld hl,0
 260+ 954C 78                               ld a,b
 261+ 954D 06 08                            ld b,8
 262+ 954F 17           .Div16_Loop1:       rla
 263+ 9550 ED 6A                            adc hl,hl
 264+ 9552 ED 52                            sbc hl,de
 265+ 9554 30 01                            jr nc,.Div16_NoAdd1
 266+ 9556 19                               add hl,de
 267+ 9557 10 F6        .Div16_NoAdd1:      djnz .Div16_Loop1
 268+ 9559 17                               rla
 269+ 955A 2F                               cpl
 270+ 955B 47                               ld b,a
 271+ 955C 79                               ld a,c
 272+ 955D 48                               ld c,b
 273+ 955E 06 08                            ld b,8
 274+ 9560 17           .Div16_Loop2:       rla
 275+ 9561 ED 6A                            adc hl,hl
 276+ 9563 ED 52                            sbc hl,de
 277+ 9565 30 01                            jr nc,.Div16_NoAdd2
 278+ 9567 19                               add hl,de
 279+ 9568 10 F6        .Div16_NoAdd2:      djnz .Div16_Loop2
 280+ 956A 17                               rla
 281+ 956B 2F                               cpl
 282+ 956C 41                               ld b,c
 283+ 956D 4F                               ld c,a
 284+ 956E C9                               ret
 285+ 956F
 286+ 956F
 287+ 956F              EDivC_Iteration:        MACRO
 288+ 956F ~                                    rl  e
 289+ 956F ~                                    rla
 290+ 956F ~                                    sub c
 291+ 956F ~                                    jr  nc,.Div8_NoAdd
 292+ 956F ~                                    add a,c
 293+ 956F ~            .Div8_NoAdd:
 294+ 956F                                      ENDM
 295+ 956F
 296+ 956F              ; Switch to a logarithm version
 297+ 956F              ; Divide E by divider C Out: A = result, B = rest
 298+ 956F              E_Div_C:                ZeroA
 298+ 956F AF          >                        xor a
 299+ 9570                                      EDivC_Iteration
 299+ 9570 CB 13       >                        rl  e
 299+ 9572 17          >                        rla
 299+ 9573 91          >                        sub c
 299+ 9574 30 01       >                        jr  nc,.Div8_NoAdd
 299+ 9576 81          >                        add a,c
 299+ 9577             >.Div8_NoAdd:
 300+ 9577                                      EDivC_Iteration
 300+ 9577 CB 13       >                        rl  e
 300+ 9579 17          >                        rla
 300+ 957A 91          >                        sub c
 300+ 957B 30 01       >                        jr  nc,.Div8_NoAdd
 300+ 957D 81          >                        add a,c
 300+ 957E             >.Div8_NoAdd:
 301+ 957E                                      EDivC_Iteration
 301+ 957E CB 13       >                        rl  e
 301+ 9580 17          >                        rla
 301+ 9581 91          >                        sub c
 301+ 9582 30 01       >                        jr  nc,.Div8_NoAdd
 301+ 9584 81          >                        add a,c
 301+ 9585             >.Div8_NoAdd:
 302+ 9585                                      EDivC_Iteration
 302+ 9585 CB 13       >                        rl  e
 302+ 9587 17          >                        rla
 302+ 9588 91          >                        sub c
 302+ 9589 30 01       >                        jr  nc,.Div8_NoAdd
 302+ 958B 81          >                        add a,c
 302+ 958C             >.Div8_NoAdd:
 303+ 958C                                      EDivC_Iteration
 303+ 958C CB 13       >                        rl  e
 303+ 958E 17          >                        rla
 303+ 958F 91          >                        sub c
 303+ 9590 30 01       >                        jr  nc,.Div8_NoAdd
 303+ 9592 81          >                        add a,c
 303+ 9593             >.Div8_NoAdd:
 304+ 9593                                      EDivC_Iteration
 304+ 9593 CB 13       >                        rl  e
 304+ 9595 17          >                        rla
 304+ 9596 91          >                        sub c
 304+ 9597 30 01       >                        jr  nc,.Div8_NoAdd
 304+ 9599 81          >                        add a,c
 304+ 959A             >.Div8_NoAdd:
 305+ 959A                                      EDivC_Iteration
 305+ 959A CB 13       >                        rl  e
 305+ 959C 17          >                        rla
 305+ 959D 91          >                        sub c
 305+ 959E 30 01       >                        jr  nc,.Div8_NoAdd
 305+ 95A0 81          >                        add a,c
 305+ 95A1             >.Div8_NoAdd:
 306+ 95A1                                      EDivC_Iteration
 306+ 95A1 CB 13       >                        rl  e
 306+ 95A3 17          >                        rla
 306+ 95A4 91          >                        sub c
 306+ 95A5 30 01       >                        jr  nc,.Div8_NoAdd
 306+ 95A7 81          >                        add a,c
 306+ 95A8             >.Div8_NoAdd:
 307+ 95A8 47                                   ld      b,a
 308+ 95A9 7B                                   ld      a,e
 309+ 95AA 17                                   rla
 310+ 95AB 2F                                   cpl
 311+ 95AC C9                                   ret
 312+ 95AD
 313+ 95AD
 314+ 95AD              BCDIVDE_Iteration:      MACRO
 315+ 95AD ~                                    rla
 316+ 95AD ~                                    adc	    hl,hl
 317+ 95AD ~                                    add	    hl,de
 318+ 95AD ~                                    jr	    c,1F
 319+ 95AD ~                                    sbc	    hl,de
 320+ 95AD ~            1:
 321+ 95AD                                      ENDM
 322+ 95AD
 323+ 95AD
 324+ 95AD              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop"
 325+ 95AD              ;BC/DE ==> BC, remainder in HL
 326+ 95AD              ;NOTE: BC/0 returns 0 as the quotient.
 327+ 95AD              ;min: 738cc
 328+ 95AD              ;max: 898cc
 329+ 95AD              ;avg: 818cc
 330+ 95AD              ;144 bytes
 331+ 95AD AF           BC_Div_DE:              xor a
 332+ 95AE 67                                   ld h,a
 333+ 95AF 6F                                   ld l,a
 334+ 95B0 93                                   sub e
 335+ 95B1 5F                                   ld e,a
 336+ 95B2 9F                                   sbc a,a
 337+ 95B3 92                                   sub d
 338+ 95B4 57                                   ld d,a
 339+ 95B5 78                                   ld a,b
 340+ 95B6                                      BCDIVDE_Iteration
 340+ 95B6 17          >                        rla
 340+ 95B7 ED 6A       >                        adc	    hl,hl
 340+ 95B9 19          >                        add	    hl,de
 340+ 95BA 38 02       >                        jr	    c,1F
 340+ 95BC ED 52       >                        sbc	    hl,de
 340+ 95BE             >1:
 341+ 95BE                                      BCDIVDE_Iteration
 341+ 95BE 17          >                        rla
 341+ 95BF ED 6A       >                        adc	    hl,hl
 341+ 95C1 19          >                        add	    hl,de
 341+ 95C2 38 02       >                        jr	    c,1F
 341+ 95C4 ED 52       >                        sbc	    hl,de
 341+ 95C6             >1:
 342+ 95C6                                      BCDIVDE_Iteration
 342+ 95C6 17          >                        rla
 342+ 95C7 ED 6A       >                        adc	    hl,hl
 342+ 95C9 19          >                        add	    hl,de
 342+ 95CA 38 02       >                        jr	    c,1F
 342+ 95CC ED 52       >                        sbc	    hl,de
 342+ 95CE             >1:
 343+ 95CE                                      BCDIVDE_Iteration
 343+ 95CE 17          >                        rla
 343+ 95CF ED 6A       >                        adc	    hl,hl
 343+ 95D1 19          >                        add	    hl,de
 343+ 95D2 38 02       >                        jr	    c,1F
 343+ 95D4 ED 52       >                        sbc	    hl,de
 343+ 95D6             >1:
 344+ 95D6                                      BCDIVDE_Iteration
 344+ 95D6 17          >                        rla
 344+ 95D7 ED 6A       >                        adc	    hl,hl
 344+ 95D9 19          >                        add	    hl,de
 344+ 95DA 38 02       >                        jr	    c,1F
 344+ 95DC ED 52       >                        sbc	    hl,de
 344+ 95DE             >1:
 345+ 95DE                                      BCDIVDE_Iteration
 345+ 95DE 17          >                        rla
 345+ 95DF ED 6A       >                        adc	    hl,hl
 345+ 95E1 19          >                        add	    hl,de
 345+ 95E2 38 02       >                        jr	    c,1F
 345+ 95E4 ED 52       >                        sbc	    hl,de
 345+ 95E6             >1:
 346+ 95E6                                      BCDIVDE_Iteration
 346+ 95E6 17          >                        rla
 346+ 95E7 ED 6A       >                        adc	    hl,hl
 346+ 95E9 19          >                        add	    hl,de
 346+ 95EA 38 02       >                        jr	    c,1F
 346+ 95EC ED 52       >                        sbc	    hl,de
 346+ 95EE             >1:
 347+ 95EE                                      BCDIVDE_Iteration
 347+ 95EE 17          >                        rla
 347+ 95EF ED 6A       >                        adc	    hl,hl
 347+ 95F1 19          >                        add	    hl,de
 347+ 95F2 38 02       >                        jr	    c,1F
 347+ 95F4 ED 52       >                        sbc	    hl,de
 347+ 95F6             >1:
 348+ 95F6 17                                   rla
 349+ 95F7 47                                   ld b,a
 350+ 95F8
 351+ 95F8 79                                   ld a,c
 352+ 95F9                                      BCDIVDE_Iteration
 352+ 95F9 17          >                        rla
 352+ 95FA ED 6A       >                        adc	    hl,hl
 352+ 95FC 19          >                        add	    hl,de
 352+ 95FD 38 02       >                        jr	    c,1F
 352+ 95FF ED 52       >                        sbc	    hl,de
 352+ 9601             >1:
 353+ 9601                                      BCDIVDE_Iteration
 353+ 9601 17          >                        rla
 353+ 9602 ED 6A       >                        adc	    hl,hl
 353+ 9604 19          >                        add	    hl,de
 353+ 9605 38 02       >                        jr	    c,1F
 353+ 9607 ED 52       >                        sbc	    hl,de
 353+ 9609             >1:
 354+ 9609                                      BCDIVDE_Iteration
 354+ 9609 17          >                        rla
 354+ 960A ED 6A       >                        adc	    hl,hl
 354+ 960C 19          >                        add	    hl,de
 354+ 960D 38 02       >                        jr	    c,1F
 354+ 960F ED 52       >                        sbc	    hl,de
 354+ 9611             >1:
 355+ 9611                                      BCDIVDE_Iteration
 355+ 9611 17          >                        rla
 355+ 9612 ED 6A       >                        adc	    hl,hl
 355+ 9614 19          >                        add	    hl,de
 355+ 9615 38 02       >                        jr	    c,1F
 355+ 9617 ED 52       >                        sbc	    hl,de
 355+ 9619             >1:
 356+ 9619                                      BCDIVDE_Iteration
 356+ 9619 17          >                        rla
 356+ 961A ED 6A       >                        adc	    hl,hl
 356+ 961C 19          >                        add	    hl,de
 356+ 961D 38 02       >                        jr	    c,1F
 356+ 961F ED 52       >                        sbc	    hl,de
 356+ 9621             >1:
 357+ 9621                                      BCDIVDE_Iteration
 357+ 9621 17          >                        rla
 357+ 9622 ED 6A       >                        adc	    hl,hl
 357+ 9624 19          >                        add	    hl,de
 357+ 9625 38 02       >                        jr	    c,1F
 357+ 9627 ED 52       >                        sbc	    hl,de
 357+ 9629             >1:
 358+ 9629                                      BCDIVDE_Iteration
 358+ 9629 17          >                        rla
 358+ 962A ED 6A       >                        adc	    hl,hl
 358+ 962C 19          >                        add	    hl,de
 358+ 962D 38 02       >                        jr	    c,1F
 358+ 962F ED 52       >                        sbc	    hl,de
 358+ 9631             >1:
 359+ 9631                                      BCDIVDE_Iteration
 359+ 9631 17          >                        rla
 359+ 9632 ED 6A       >                        adc	    hl,hl
 359+ 9634 19          >                        add	    hl,de
 359+ 9635 38 02       >                        jr	    c,1F
 359+ 9637 ED 52       >                        sbc	    hl,de
 359+ 9639             >1:
 360+ 9639 17                                   rla
 361+ 963A 4F                                   ld c,a
 362+ 963B C9                                   ret
 363+ 963C
 364+ 963C              ; 06 06 2022 not used
 365+ 963C              ;Inputs:
 366+ 963C              ;     DE,BC are 8.8 Fixed Point numbers
 367+ 963C              ;Outputs:
 368+ 963C              ;     DE is the 8.8 Fixed Point result (rounded to the least significant bit)
 369+ 963C              ;if DE is 0 : 122cc or 136cc if BC is negative
 370+ 963C              ;if |BC|>=128*|DE| : 152cc or 166cc if BC is negative
 371+ 963C              ;Otherwise:
 372+ 963C              ;min: 1107cc
 373+ 963C              ;max: 1319cc
 374+ 963C              ;avg: 1201cc
 375+ 963C 78           BC_Div_DE_88:           ld a,b  ; First, find out if the output is positive or negative
 376+ 963D AA                                   xor d
 377+ 963E F5                                   push af   ;sign bit is the result sign bit
 378+ 963F              ; Now make sure the inputs are positive
 379+ 963F A8                                   xor b     ;A now has the value of B, since I XORed it with D twice (cancelling)
 380+ 9640 F2 49 96                             jp p,BC_Div_DE_88_lbl1   ;if Positive, don't negate
 381+ 9643 AF                                   xor a
 382+ 9644 91                                   sub c
 383+ 9645 4F                                   ld c,a
 384+ 9646 9F                                   sbc a,a
 385+ 9647 90                                   sub b
 386+ 9648 47                                   ld b,a
 387+ 9649 7A           BC_Div_DE_88_lbl1:      ld a,d  ;now make DE negative to optimize the remainder comparison
 388+ 964A B2                                   or d
 389+ 964B FA 54 96                             jp m,BC_Div_DE_88_lbl2
 390+ 964E AF                                   xor a
 391+ 964F 93                                   sub e
 392+ 9650 5F                                   ld e,a
 393+ 9651 9F                                   sbc a,a
 394+ 9652 92                                   sub d
 395+ 9653 57                                   ld d,a
 396+ 9654 B3           BC_Div_DE_88_lbl2:      or e      ;if DE is 0, we can call it an overflow ;A is the current value of D
 397+ 9655 28 1D                                jr z,div_fixed88_overflow
 398+ 9657 26 00                                ld h,0          ;The accumulator gets set to B if no overflow.;We can use H=0 to save a few cc in the meantime
 399+ 9659 78                                   ld a,b;if B+DE>=0, then we'll have overflow
 400+ 965A 83                                   add a,e
 401+ 965B 7A                                   ld a,d
 402+ 965C 8C                                   adc a,h
 403+ 965D 38 15                                jr c,div_fixed88_overflow
 404+ 965F 68                                   ld l,b  ;Now we can load the accumulator/remainder with B;H is already 0
 405+ 9660 79                                   ld a,c
 406+ 9661 CD 7C 96                             call div_fixed88_sub
 407+ 9664 4F                                   ld c,a
 408+ 9665 78                                   ld a,b      ;A is now 0
 409+ 9666 CD 7C 96                             call div_fixed88_sub
 410+ 9669 51                                   ld d,c
 411+ 966A 5F                                   ld e,a
 412+ 966B F1                                   pop af
 413+ 966C F0                                   ret p
 414+ 966D AF                                   xor a
 415+ 966E 93                                   sub e
 416+ 966F 5F                                   ld e,a
 417+ 9670 9F                                   sbc a,a
 418+ 9671 92                                   sub d
 419+ 9672 57                                   ld d,a
 420+ 9673 C9                                   ret
 421+ 9674
 422+ 9674 11 FF 7F     div_fixed88_overflow:   ld de,$7FFF
 423+ 9677 F1                                   pop af
 424+ 9678 F0                                   ret p
 425+ 9679 13                                   inc de
 426+ 967A 1C                                   inc e
 427+ 967B C9                                   ret
 428+ 967C
 429+ 967C              ;min: 456cc
 430+ 967C              ;max: 536cc
 431+ 967C              ;avg: 496cc
 432+ 967C 06 08        div_fixed88_sub:        ld b,8
 433+ 967E 17           BC_Div_DE_88_lbl3:      rla
 434+ 967F ED 6A                                adc hl,hl
 435+ 9681 19                                   add hl,de
 436+ 9682 38 02                                jr c,$+4
 437+ 9684 ED 52                                sbc hl,de
 438+ 9686 10 F6                                djnz BC_Div_DE_88_lbl3
 439+ 9688 8F                                   adc a,a
 440+ 9689 C9                                   ret
 441+ 968A
# file closed: ./Maths/asm_divide.asm
 573  968A                  INCLUDE "./Maths/asm_unitvector.asm"
# file opened: ./Maths/asm_unitvector.asm
   1+ 968A              asm_tis2:
   2+ 968A              ; ">TIS2 A = (A / Q * 96) so A = -96 ---- 96  range "
   3+ 968A              ; ">DOES NOT DO SIGNED YET"
   4+ 968A F5           	push af
   5+ 968B E6 7F            and SignMask8Bit
   6+ 968D 57           	ld d,a				;; d = A
   7+ 968E 3A 11 81     	ld a,(varQ)
   8+ 9691 5F           	ld e,a
   9+ 9692 7A           	ld a,d
  10+ 9693 BB           	cp e
  11+ 9694 30 11        	jr nc, .tis2_set96	;; jump if a >= Q
  12+ 9696 1E 60        	ld e, 96
  13+ 9698 ED 30        	mul				; de = d * 96 (also a * 96 )
  14+ 969A EB           	ex de,hl
  15+ 969B 3A 11 81     	ld a,(varQ)
  16+ 969E 4F           	ld c,a
  17+ 969F CD 39 95     	call asm_div16
  18+ 96A2 F1           	pop af
  19+ 96A3 E6 80        	and $80
  20+ 96A5 B5           	or l
  21+ 96A6 C9           	ret
  22+ 96A7              .tis2_set96:
  23+ 96A7 F1           	pop af
  24+ 96A8 E6 80        	and $80
  25+ 96AA F6 96        	or $96
  26+ 96AC C9           	ret
  27+ 96AD
  28+ 96AD
  29+ 96AD              asm_unit_vector:
  30+ 96AD              squareregfx:
  31+ 96AD 3A 92 C0     	ld a,(UBnkXScaled)
  32+ 96B0 57           	ld d,a
  33+ 96B1 5F           	ld e,a
  34+ 96B2 ED 30        	mul
  35+ 96B4 EB           	ex de,hl
  36+ 96B5              squareregfy:
  37+ 96B5 3A 94 C0     	ld a, (UBnkYScaled)
  38+ 96B8 57           	ld d,a
  39+ 96B9 5F           	ld e,a
  40+ 96BA ED 30        	mul
  41+ 96BC 19           	add hl,de
  42+ 96BD              squareregfz:
  43+ 96BD 3A 96 C0     	ld a, (UBnkZScaled)
  44+ 96C0 57           	ld d,a
  45+ 96C1 5F           	ld e,a
  46+ 96C2 ED 30        	mul
  47+ 96C4 19           	add hl,de
  48+ 96C5 EB           	ex de,hl			; de de to number to root
  49+ 96C6              hlequsquareroot:
  50+ 96C6 CD C1 93     	call asm_sqrt		; hl = sqrt (fx^2 + fy^2 + fx^2)
  51+ 96C9 E5           	push hl				; save it for work 3 copies
  52+ 96CA E5           	push hl				; save it for work
  53+ 96CB E5           	push hl				; save it for work
  54+ 96CC              normfx:
  55+ 96CC 3A 92 C0     	ld a,(UBnkXScaled)
  56+ 96CF E1           	pop hl				; get copy #1
  57+ 96D0 7D           	ld a,l				; we assume only l had worthwhile data but could spill into h
  58+ 96D1 4F           	ld c,a
  59+ 96D2 CD 8A 96     	call asm_tis2
  60+ 96D5 32 92 C0     	ld (UBnkXScaled),a
  61+ 96D8              normfy:
  62+ 96D8 3A 94 C0     	ld a,(UBnkYScaled)
  63+ 96DB E1           	pop hl				; get copy #2
  64+ 96DC 7D           	ld a,l
  65+ 96DD 4F           	ld c,a
  66+ 96DE CD 8A 96     	call asm_tis2
  67+ 96E1 32 94 C0     	ld (UBnkYScaled),a
  68+ 96E4              normfz:
  69+ 96E4 3A 96 C0     	ld a,(UBnkZScaled)
  70+ 96E7 E1           	pop hl				; get copy #2
  71+ 96E8 7D           	ld a,l
  72+ 96E9 4F           	ld c,a
  73+ 96EA CD 8A 96     	call asm_tis2
  74+ 96ED 32 96 C0     	ld (UBnkZScaled),a
  75+ 96F0              asm_unit_vector_end:
  76+ 96F0 C9           	ret
  77+ 96F1
# file closed: ./Maths/asm_unitvector.asm
 574  96F1                  INCLUDE "./Maths/compare16.asm"
# file opened: ./Maths/compare16.asm
   1+ 96F1              ; Input:
   2+ 96F1              ;       HL = 1st value
   3+ 96F1              ;       DE = 2nd value
   4+ 96F1              ; Output:
   5+ 96F1              ;       CF, ZF = results of comparison:
   6+ 96F1              ;
   7+ 96F1              ;               CF      ZF      Result
   8+ 96F1              ;               -----------------------------------
   9+ 96F1              ;               0       0       HL > DE
  10+ 96F1              ;               0       1       HL == DE
  11+ 96F1              ;               1       0       HL < DE
  12+ 96F1              ;               1       1       Impossible
  13+ 96F1              ;
  14+ 96F1
  15+ 96F1 E5           compare16HLDE:      push    hl
  16+ 96F2 A7                               and     a
  17+ 96F3 ED 52                            sbc     hl,de
  18+ 96F5 E1                               pop     hl
  19+ 96F6 C9                               ret
  20+ 96F7
  21+ 96F7              ; With compare signed we do ABS comparison
  22+ 96F7              ; this is used for view ports as we just want to know if its +/- out side of 90 degrees
  23+ 96F7
  24+ 96F7 E5 D5        compare16HLDEABS:   push    hl,,de
  25+ 96F9 7C                               ld      a,h                                     ; Quick pass see of both the same sign
  26+ 96FA E6 7F                            and     SignMask8Bit
  27+ 96FC 67                               ld      h,a
  28+ 96FD 7A                               ld      a,d                                     ; Quick pass see of both the same sign
  29+ 96FE E6 7F                            and     SignMask8Bit
  30+ 9700 57                               ld      d,a
  31+ 9701 A7                               and     a
  32+ 9702 ED 52                            sbc     hl,de
  33+ 9704 D1 E1                            pop     hl,,de
  34+ 9706 C9                               ret
  35+ 9707
  36+ 9707
# file closed: ./Maths/compare16.asm
 575  9707                  INCLUDE "./Maths/negate16.asm"
# file opened: ./Maths/negate16.asm
   1+ 9707              ;;----------------------------------------------------------------------------------------------------------------------
   2+ 9707              ;; 16-bit negate
   3+ 9707              negate16:
   4+ 9707              negate16hl:
   5+ 9707                      ; Input:
   6+ 9707                      ;       HL = value
   7+ 9707                      ; Output:
   8+ 9707                      ;       HL = -value
   9+ 9707                      ; Destroys:
  10+ 9707                      ;       AF
  11+ 9707                      ;
  12+ 9707 AF           	xor 	a
  13+ 9708 95           	sub 	l
  14+ 9709 6F           	ld 		l,a
  15+ 970A 9F           	sbc 	a,a
  16+ 970B 94           	sub 	h
  17+ 970C 67           	ld 		h,a
  18+ 970D C9           	ret
  19+ 970E
  20+ 970E              negate16de:
  21+ 970E AF           	xor 	a
  22+ 970F 93           	sub 	e
  23+ 9710 5F           	ld 		e,a
  24+ 9711 9F           	sbc 	a,a
  25+ 9712 92           	sub 	d
  26+ 9713 57           	ld 		d,a
  27+ 9714 C9           	ret
  28+ 9715
  29+ 9715              negate16bc:
  30+ 9715 AF           	xor 	a
  31+ 9716 91           	sub 	c
  32+ 9717 4F           	ld 		c,a
  33+ 9718 9F           	sbc 	a,a
  34+ 9719 90           	sub 	b
  35+ 971A 47           	ld 		b,a
  36+ 971B C9           	ret
  37+ 971C
  38+ 971C
  39+ 971C              macronegate16hl:	MACRO
  40+ 971C ~            					xor 	a
  41+ 971C ~            					sub 	l
  42+ 971C ~            					ld 		l,a
  43+ 971C ~            					sbc 	a,a
  44+ 971C ~            					sub 	h
  45+ 971C ~            					ld 		h,a
  46+ 971C              					ENDM
  47+ 971C
  48+ 971C              macronegate16de:	MACRO
  49+ 971C ~            					xor 	a
  50+ 971C ~                                sub 	e
  51+ 971C ~                                ld 		e,a
  52+ 971C ~                                sbc 	a,a
  53+ 971C ~                                sub 	d
  54+ 971C ~                                ld 		d,a
  55+ 971C              					ENDM
  56+ 971C              macronegate16bc:	MACRO
  57+ 971C ~            					xor 	a
  58+ 971C ~                                sub 	c
  59+ 971C ~                                ld 		c,a
  60+ 971C ~                                sbc 	a,a
  61+ 971C ~                                sub 	b
  62+ 971C ~                                ld 		b,a
  63+ 971C              					ENDM
  64+ 971C
  65+ 971C              macronegate16ix:	MACRO
  66+ 971C ~            					xor 	a
  67+ 971C ~                                sub 	ixl
  68+ 971C ~                                ld 		ixl,a
  69+ 971C ~                                sbc 	a,a
  70+ 971C ~                                sub 	ixh
  71+ 971C ~                                ld 		ixh,a
  72+ 971C              					ENDM
# file closed: ./Maths/negate16.asm
 576  971C                  INCLUDE "./Maths/normalise96.asm"
# file opened: ./Maths/normalise96.asm
   1+ 971C              AequAdivDmul96Unsg:     JumpIfAGTENusng d, .Unity    			; if A >= Q then return with a 1 (unity i.e. 96)
   1+ 971C BA          >                        cp     d
   1+ 971D D2 38 97    >                        jp		nc,.Unity
   2+ 9720 06 FF                                ld          b,%11111111                 ; Loop through 8 bits
   3+ 9722 CB 27        .DivLoop:               sla         a                           ; shift a left
   4+ 9724                                      JumpIfALTNusng d, .skipSubtract         ; if a < q skip the following
   4+ 9724 BA          >                        cp      d
   4+ 9725 DA 29 97    >                        jp		c, .skipSubtract
   5+ 9728 92                                   sub         d
   6+ 9729              .skipSubtract:          FlipCarryFlag
   6+ 9729 3F          >                        ccf
   7+ 972A CB 10                                rl          b
   8+ 972C 38 F4                                jr          c,.DivLoop
   9+ 972E 78                                   ld          a,b
  10+ 972F CB 3F                                srl         a                  			; t = t /4
  11+ 9731 CB 3F                                srl			a							; result / 8
  12+ 9733 47                                   ld          b,a
  13+ 9734 CB 3F                                srl         a
  14+ 9736 80                                   add			a,b							; result /8 + result /4
  15+ 9737 C9                                   ret
  16+ 9738 3E 60        .Unity:                 ld			a,$60	    				; unity
  17+ 973A C9                                   ret
  18+ 973B
  19+ 973B
  20+ 973B
  21+ 973B
  22+ 973B              normaliseXX1596fast:
  23+ 973B                  ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  24+ 973B 3A 92 C0     	ld		a,(XX15)		    ; XX15+0
  25+ 973E DD 67        	ld		ixh,a               ; ixh = signed x component
  26+ 9740 E6 7F        	and		SignMask8Bit                 ; a = unsigned version
  27+ 9742              N96SQX:
  28+ 9742              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  28+ 9742 5F          >			ld	e,a
  28+ 9743 57          >			ld  d,a
  28+ 9744 ED 30       >			mul
  29+ 9746 62           	ld		h,d					; h == varR d = varO e= varA
  30+ 9747 6B           	ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
  31+ 9748              N96SQY:
  32+ 9748 3A 93 C0     	ld		a,(XX15+1)
  33+ 974B DD 6F        	ld		ixl,a               ; ixl = signed y componet
  34+ 974D E6 7F        	and		SignMask8Bit                 ; = abs
  35+ 974F              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  35+ 974F 5F          >			ld	e,a
  35+ 9750 57          >			ld  d,a
  35+ 9751 ED 30       >			mul
  36+ 9753 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  37+ 9754              N96SQZ:
  38+ 9754 3A 94 C0     	ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  39+ 9757 FD 67        	ld		iyh,a               ; iyh = signed
  40+ 9759 E6 7F        	and		SignMask8Bit                 ; unsigned
  41+ 975B              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  41+ 975B 5F          >			ld	e,a
  41+ 975C 57          >			ld  d,a
  41+ 975D ED 30       >			mul
  42+ 975F              N96SQADD:
  43+ 975F 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  44+ 9760 EB           	ex		de,hl				; hl => de ready for square root
  45+ 9761              N96SQRT:
  46+ 9761 CD C1 93     	call	asm_sqrt			; hl = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  47+ 9764              N96NORMX:
  48+ 9764 3A 92 C0     	ld		a,(XX15+0)
  49+ 9767 E6 7F        	and		SignMask8Bit
  50+ 9769 4F           	ld		c,a
  51+ 976A 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  52+ 976B CD 6F 99     	call	AequAdivDmul96	; does not use HL so we can retain it
  53+ 976E 47           	ld		b,a				;++SGN
  54+ 976F DD 7C        	ld		a,ixh			;++SGN
  55+ 9771 E6 80        	and		$80				;++SGN
  56+ 9773 B0           	or		b				;++SGN
  57+ 9774 32 92 C0     	ld		(XX15+0),a
  58+ 9777              N96NORMY:
  59+ 9777 3A 93 C0     	ld		a,(XX15+1)
  60+ 977A E6 7F        	and		SignMask8Bit
  61+ 977C 4F           	ld		c,a
  62+ 977D 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  63+ 977E CD 6F 99     	call	AequAdivDmul96     	; does not use HL so we can retain it
  64+ 9781 47           	ld		b,a				;++SGN
  65+ 9782 DD 7D        	ld		a,ixl			;++SGN
  66+ 9784 E6 80        	and		$80				;++SGN
  67+ 9786 B0           	or		b				;++SGN
  68+ 9787 32 93 C0     	ld		(XX15+1),a
  69+ 978A              N96NORMZ:
  70+ 978A 3A 94 C0     	ld		a,(XX15+2)
  71+ 978D E6 7F        	and		SignMask8Bit
  72+ 978F 4F           	ld		c,a
  73+ 9790 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  74+ 9791 CD 6F 99     	call	AequAdivDmul96	; does not use HL so we can retain it
  75+ 9794 47           	ld		b,a				;++SGN
  76+ 9795 FD 7C        	ld		a,iyh			;++SGN
  77+ 9797 E6 80        	and		$80				;++SGN
  78+ 9799 B0           	or		b				;++SGN
  79+ 979A 32 94 C0     	ld		(XX15+2),a
  80+ 979D C9           	ret
  81+ 979E
  82+ 979E              ; Normalise vector
  83+ 979E              ; scale Q = Sqrt (X^2 + Y^2 + Z^2)
  84+ 979E              ; X = X / Q with 96 = 1 , i.e X = X / Q * 3/8
  85+ 979E              ; Y = Y / Q with 96 = 1 , i.e Y = Y / Q * 3/8
  86+ 979E              ; Z = Z / Q with 96 = 1 , i.e Z = Z / Q * 3/8
  87+ 979E              ;
  88+ 979E              ;
  89+ 979E              ;
  90+ 979E
  91+ 979E              ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  92+ 979E 3A 92 C0     normaliseXX1596:        ld		a,(XX15)		    ; XX15+0
  93+ 97A1                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  93+ 97A1 5F          >			ld	e,a
  93+ 97A2 57          >			ld  d,a
  93+ 97A3 ED 30       >			mul
  94+ 97A5 7A                                   ld		a,d
  95+ 97A6 32 12 81                             ld		(varR),a			; R	 \ hi sum later use b
  96+ 97A9 7B                                   ld		a,e
  97+ 97AA 32 11 81                             ld		(varQ),a			; Q	 \ lo sum later use c
  98+ 97AD 32 0F 80                             ld		(varP),a			; P	 \ lo sum later just drop
  99+ 97B0 3A 93 C0                             ld		a,(XX15+1)
 100+ 97B3                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
 100+ 97B3 5F          >			ld	e,a
 100+ 97B4 57          >			ld  d,a
 100+ 97B5 ED 30       >			mul
 101+ 97B7 7A                                   ld		a,d
 102+ 97B8 32 2F 81                             ld		(varT),a			; T	 \ hi sum
 103+ 97BB 7B                                   ld		a,e
 104+ 97BC 32 0F 80                             ld		(varP),a			; P	 \ lo sum
 105+ 97BF 21 11 81                             ld		hl,varQ
 106+ 97C2 8E                                   adc		a,(hl)				; +Q
 107+ 97C3 32 11 81                             ld		(varQ),a			; =>Q
 108+ 97C6 3A 2F 81                             ld		a,(varT)			;
 109+ 97C9 21 12 81                             ld		hl,varR
 110+ 97CC 8E                                   adc		a,(hl)				;  R
 111+ 97CD 32 12 81                             ld		(varR),a			; R
 112+ 97D0 3A 94 C0                             ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
 113+ 97D3                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
 113+ 97D3 5F          >			ld	e,a
 113+ 97D4 57          >			ld  d,a
 113+ 97D5 ED 30       >			mul
 114+ 97D7 7A                                   ld		a,d
 115+ 97D8 32 2F 81                             ld		(varT),a			; T	 \ hi sum
 116+ 97DB 7B                                   ld		a,e
 117+ 97DC 32 0F 80                             ld		(varP),a			; P	 \ lo sum
 118+ 97DF 21 11 81                             ld		hl,varQ
 119+ 97E2 8E                                   adc		a,(hl)				; +Q
 120+ 97E3 32 11 81                             ld		(varQ),a			; =>Q  xlo2 + ylo2 + zlo2
 121+ 97E6 3A 2F 81                             ld		a,(varT)			; T temp Hi
 122+ 97E9 21 12 81                             ld		hl,varR
 123+ 97EC 8E                                   adc		a,(hl)				; +R
 124+ 97ED 32 12 81                             ld		(varR),a			; R
 125+ 97F0 CD E4 93                             call	sqrtQR				; Q = SQR(Qlo.Rhi) Q <~127
 126+ 97F3 3A 92 C0                             ld		a,(XX15+0)
 127+ 97F6 CD 69 99                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 128+ 97F9 32 92 C0                             ld		(XX15+0),a
 129+ 97FC 3A 93 C0                             ld		a,(XX15+1)
 130+ 97FF CD 69 99                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 131+ 9802 32 93 C0                             ld		(XX15+1),a
 132+ 9805 3A 93 C0                             ld		a,(XX15+1)
 133+ 9808 CD 69 99                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 134+ 980B 32 93 C0                             ld		(XX15+1),a
 135+ 980E C9                                   ret
 136+ 980F
 137+ 980F
# file closed: ./Maths/normalise96.asm
 577  980F                  INCLUDE "./Maths/binary_to_decimal.asm"
# file opened: ./Maths/binary_to_decimal.asm
   1+ 980F              ;Number in hl to decimal ASCII
   2+ 980F              ;Thanks to z80 Bits
   3+ 980F              ;inputs:	hl = number to ASCII
   4+ 980F              ;example: hl=300 outputs '00300'
   5+ 980F              ;destroys: af, bc, hl, de used
   6+ 980F              DispHLtoDE:
   7+ 980F              ; "DispHL, writes HL to DE address"
   8+ 980F 01 F0 D8     	ld	bc,-10000
   9+ 9812 CD 28 98     	call	Num1
  10+ 9815 01 18 FC     	ld	bc,-1000
  11+ 9818 CD 28 98     	call	Num1
  12+ 981B 01 9C FF     	ld	bc,-100
  13+ 981E CD 28 98     	call	Num1
  14+ 9821 0E F6        	ld	c,-10
  15+ 9823 CD 28 98     	call	Num1
  16+ 9826 0E FF        	ld	c,-1
  17+ 9828              Num1:
  18+ 9828 3E 2F        	ld	a,'0'-1
  19+ 982A              .Num2:
  20+ 982A 3C           	inc	a
  21+ 982B 09           	add	hl,bc
  22+ 982C 38 FC        	jr	c,.Num2
  23+ 982E ED 42        	sbc	hl,bc
  24+ 9830 12           	ld	(de),a
  25+ 9831 13           	inc	de
  26+ 9832 C9           	ret
  27+ 9833
  28+ 9833              DispAtoDE:
  29+ 9833 26 00        	ld h,0
  30+ 9835 6F           	ld l,a
  31+ 9836 C3 0F 98     	jp DispHLtoDE
  32+ 9839
  33+ 9839              DispPriceAtoDE:
  34+ 9839 26 00        	ld h,0
  35+ 983B 6F           	ld l,a
  36+ 983C 01 9C FF     	ld	bc,-100
  37+ 983F CD 4F 98     	call	.NumLeadBlank1
  38+ 9842 0E F6        	ld	c,-10
  39+ 9844 CD 28 98     	call	Num1
  40+ 9847 3E 2E        	ld		a,'.'					; we could assume preformat but
  41+ 9849 12           	ld		(de),a					; we can optimse that later TODO
  42+ 984A 13           	inc		de						; with just an inc De
  43+ 984B 0E FF        	ld	c,-1
  44+ 984D 18 D9        	jr		Num1
  45+ 984F              .NumLeadBlank1:
  46+ 984F 3E 2F        	ld	a,'0'-1
  47+ 9851              .NumLeadBlank2:
  48+ 9851 3C           	inc	a
  49+ 9852 09           	add	hl,bc
  50+ 9853 38 FC        	jr	c,.NumLeadBlank2
  51+ 9855 FE 30        	cp	'0'
  52+ 9857 20 02        	jr	nz,.DontBlank
  53+ 9859              .Blank:
  54+ 9859 3E 20        	ld	a,' '
  55+ 985B              .DontBlank:
  56+ 985B ED 42        	sbc	hl,bc
  57+ 985D 12           	ld	(de),a
  58+ 985E 13           	inc	de
  59+ 985F C9           	ret
  60+ 9860
  61+ 9860              DispQtyAtoDE:
  62+ 9860 FE 00        	cp	0
  63+ 9862 28 23        	jr	z,.NoStock
  64+ 9864 26 00        	ld h,0
  65+ 9866 6F           	ld l,a
  66+ 9867 01 9C FF     	ld	bc,-100
  67+ 986A CD 76 98     	call	.NumLeadBlank1
  68+ 986D 0E F6        	ld	c,-10
  69+ 986F CD 76 98     	call	.NumLeadBlank1
  70+ 9872 0E FF        	ld	c,-1
  71+ 9874 18 B2        	jr		Num1
  72+ 9876              .NumLeadBlank1:
  73+ 9876 3E 2F        	ld	a,'0'-1
  74+ 9878              .NumLeadBlank2:
  75+ 9878 3C           	inc	a
  76+ 9879 09           	add	hl,bc
  77+ 987A 38 FC        	jr	c,.NumLeadBlank2
  78+ 987C FE 30        	cp	'0'
  79+ 987E 20 02        	jr	nz,.DontBlank
  80+ 9880              .Blank:
  81+ 9880 3E 20        	ld	a,' '
  82+ 9882              .DontBlank:
  83+ 9882 ED 42        	sbc	hl,bc
  84+ 9884 12           	ld	(de),a
  85+ 9885 13           	inc	de
  86+ 9886 C9           	ret
  87+ 9887              .NoStock:
  88+ 9887 3E 20        	ld	a,' '
  89+ 9889 12           	ld	(de),a
  90+ 988A 13           	inc	de
  91+ 988B 12           	ld	(de),a
  92+ 988C 13           	inc	de
  93+ 988D 3E 2D        	ld	a,'-'
  94+ 988F 12           	ld	(de),a
  95+ 9890 13           	inc de
  96+ 9891 C9           	ret
  97+ 9892
  98+ 9892
  99+ 9892              ;### CLCN32 -> Converts 32Bit-Value in ASCII-String (terminated by 0)
 100+ 9892              ;### Input      DE,IX=32bit value, IY=destination address
 101+ 9892              ;### Output     IY=last char in destination string
 102+ 9892              ;### Destroyed AF,BC,DE,HL,IX
 103+ 9892 01 00 00 00  clcn32t dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 103+ 9896 0A 00 00 00
 103+ 989A 64 00 00 00
 103+ 989E E8 03 00 00
 103+ 98A2 10 27 00 00
 104+ 98A6 A0 86 01 00          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 104+ 98AA 40 42 0F 00
 104+ 98AE 80 96 98 00
 104+ 98B2 00 E1 F5 05
 104+ 98B6 00 CA 9A 3B
 105+ 98BA 00 00 00 00  clcn32z ds 4
 106+ 98BE
 107+ 98BE              ; As per display but shifts final digit by 1 and puts in "." for 1 decimal place
 108+ 98BE CD CD 98     DispDEIXtoIY1DP:        call    DispDEIXtoIY
 109+ 98C1 FD 7E 00                             ld      a,(IY+0)
 110+ 98C4 FD 77 01                             ld      (IY+1),a
 111+ 98C7 3E 2E                                ld      a,"."
 112+ 98C9 FD 77 00                             ld      (IY+0),a
 113+ 98CC C9                                   ret
 114+ 98CD
 115+ 98CD DD 22 BA 98  DispDEIXtoIY:           ld (clcn32z),ix
 116+ 98D1 ED 53 BC 98                          ld (clcn32z+2),de
 117+ 98D5 DD 21 B6 98                          ld ix,clcn32t+36
 118+ 98D9 06 09                                ld b,9
 119+ 98DB 0E 00                                ld c,0
 120+ 98DD 3E 30        .clcn321:               ld a,'0'
 121+ 98DF B7                                   or a
 122+ 98E0 DD 5E 00     .clcn322:               ld e,(ix+0)
 123+ 98E3 DD 56 01                             ld d,(ix+1)
 124+ 98E6 2A BA 98                             ld hl,(clcn32z)
 125+ 98E9 ED 52                                sbc hl,de
 126+ 98EB 22 BA 98                             ld (clcn32z),hl
 127+ 98EE DD 5E 02                             ld e,(ix+2)
 128+ 98F1 DD 56 03                             ld d,(ix+3)
 129+ 98F4 2A BC 98                             ld hl,(clcn32z+2)
 130+ 98F7 ED 52                                sbc hl,de
 131+ 98F9 22 BC 98                             ld (clcn32z+2),hl
 132+ 98FC 38 04                                jr c,.clcn325
 133+ 98FE 0C                                   inc c
 134+ 98FF 3C                                   inc a
 135+ 9900 18 DE                                jr .clcn322
 136+ 9902 DD 5E 00     .clcn325:               ld e,(ix+0)
 137+ 9905 DD 56 01                             ld d,(ix+1)
 138+ 9908 2A BA 98                             ld hl,(clcn32z)
 139+ 990B 19                                   add hl,de
 140+ 990C 22 BA 98                             ld (clcn32z),hl
 141+ 990F DD 5E 02                             ld e,(ix+2)
 142+ 9912 DD 56 03                             ld d,(ix+3)
 143+ 9915 2A BC 98                             ld hl,(clcn32z+2)
 144+ 9918 ED 5A                                adc hl,de
 145+ 991A 22 BC 98                             ld (clcn32z+2),hl
 146+ 991D 11 FC FF                             ld de,-4
 147+ 9920 DD 19                                add ix,de
 148+ 9922 0C                                   inc c
 149+ 9923 0D                                   dec c
 150+ 9924 28 05                                jr z,.clcn323
 151+ 9926 FD 77 00                             ld (iy+0),a
 152+ 9929 FD 23                                inc iy
 153+ 992B 10 B0        .clcn323:               djnz .clcn321
 154+ 992D 3A BA 98                             ld a,(clcn32z)
 155+ 9930 C6 30                                add A,'0'
 156+ 9932 FD 77 00                             ld (iy+0),a
 157+ 9935 FD 36 01 00                          ld (iy+1),0
 158+ 9939 C9                                   ret
 159+ 993A
# file closed: ./Maths/binary_to_decimal.asm
 578  993A              ;;    include "./Maths/ADDHLDESignBC.asm"
 579  993A              ;INCLUDE "badd_ll38.asm"
 580  993A              ;;INCLUDE "XX12equXX15byXX16.asm"
 581  993A                  INCLUDE "./Maths/Utilities/AequAdivQmul96-TIS2.asm"
# file opened: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
   1+ 993A              AequAdivQmul96ABS:      JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   1+ 993A BA          >                        cp     d
   1+ 993B D2 56 99    >                        jp		nc,.TIS2AccGTEQ
   2+ 993E 06 FE                                ld			b,$FE						; division roll (replaced varT)
   3+ 9940 CB 27        .TIS2RollTLoop:			sla			a
   4+ 9942                                      JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
   4+ 9942 BA          >                        cp      d
   4+ 9943 DA 59 99    >                        jp		c, .TIS2SkipSub
   5+ 9946 9A                                   sbc			a,d							; do subtraction with carry
   6+ 9947 37                                   scf
   7+ 9948 CB 10                                rl			b							; T rolled left to push bit out the end
   8+ 994A 38 F4                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
   9+ 994C 78           .TIS2SKIPCont:	        ld			a,b							; T
  10+ 994D CB 3F                                srl			a							; result / 2
  11+ 994F CB 3F                                srl			a							; result / 4
  12+ 9951 47                                   ld			b,a							; t = t /4
  13+ 9952 CB 3F                                srl			a							; result / 8
  14+ 9954 80                                   add			a,b							; result /8 + result /4
  15+ 9955 C9                                   ret
  16+ 9956 3E 60        .TIS2AccGTEQ:           ld			a,$60							; unity
  17+ 9958 C9                                   ret
  18+ 9959 B7           .TIS2SkipSub:           or			a
  19+ 995A CB 10                                rl			b							; T rolled left to push bit out the end
  20+ 995C 38 E2                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  21+ 995E C3 4C 99                             jp			.TIS2SKIPCont
  22+ 9961
  23+ 9961
  24+ 9961              ; USES 			A DE BC
  25+ 9961              ; DOES NOT USE 	HL
  26+ 9961              TIS2962C:		; two's compliment entry point, exits not 2's compliment
  27+ 9961 CB 7F        	bit			7,a
  28+ 9963 28 04        	jr			z,AequAdivQmul96
  29+ 9965 ED 44        	neg										; revers 2s'c and just set neg bit
  30+ 9967 CB FF        	set			7,a
  31+ 9969              ; Note negative numbers are bit 7 set not 2's compliment
  32+ 9969              AequAdivQmul96:								; TIS296:			; .tis2 A = A /Q *96 (or A = A * 3/8 * Q) Reduce Acc in NORM routine i.e. *96/Q clamps at +- 96
  33+ 9969              TIS2:
  34+ 9969 4F           	ld			c,a							; copy of Acc
  35+ 996A 3A 11 81     	ld			a,(varQ)
  36+ 996D 57           	ld			d,a							; d = varQ
  37+ 996E 79           	ld			a,c							; recover a
  38+ 996F              AequAdivDmul96:
  39+ 996F 4F           	ld			c,a							; copy of Acc as we need the sign, alternate entry point assuming D preloaded, wastes an "ld c,a" but simplifies code
  40+ 9970 E6 7F        	and			SignMask8Bit				; ignore sign
  41+ 9972              	JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  41+ 9972 BA          >                        cp     d
  41+ 9973 D2 93 99    >                        jp		nc,.TIS2AccGTEQ
  42+ 9976 06 FE        	ld			b,$FE						; division roll (replaced varT)
  43+ 9978              .TIS2RollTLoop:									; .TIL2	; roll T
  44+ 9978 CB 27        	sla			a
  45+ 997A              	JumpIfALTNusng d,.TIS2SkipSub            ; a < d so don;t subtract
  45+ 997A BA          >                        cp      d
  45+ 997B DA 99 99    >                        jp		c, .TIS2SkipSub
  46+ 997E 9A           	sbc			a,d							; do subtraction with carry
  47+ 997F 37           	scf
  48+ 9980 CB 10        	rl			b							; T rolled left to push bit out the end
  49+ 9982 38 F4        	jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  50+ 9984              .TIS2SKIPCont:
  51+ 9984 78           	ld			a,b							; T
  52+ 9985 CB 3F        	srl			a							; result / 2
  53+ 9987 CB 3F        	srl			a							; result / 4
  54+ 9989 47           	ld			b,a							; t = t /4
  55+ 998A CB 3F        	srl			a							; result / 8
  56+ 998C 80           	add			a,b							; result /8 + result /4
  57+ 998D 47           	ld			b,a							; b = 3/8*Acc (max = 96)
  58+ 998E 79           	ld			a,c							; copy of Acc to look at sign bit
  59+ 998F E6 80        	and			$80							; recover sign only
  60+ 9991 B0           	or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  61+ 9992 C9           	ret
  62+ 9993              .TIS2AccGTEQ:
  63+ 9993              ;TI4:										;\ clean to +/- unity
  64+ 9993 79           	ld			a,c
  65+ 9994 E6 80        	and			$80							; copy of Acc
  66+ 9996 F6 60        	or			$60							; unity
  67+ 9998 C9           	ret
  68+ 9999              .TIS2SkipSub:
  69+ 9999 B7           	or			a
  70+ 999A CB 10        	rl			b							; T rolled left to push bit out the end
  71+ 999C 38 DA        	jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  72+ 999E C3 84 99     	jp			.TIS2SKIPCont
  73+ 99A1
# file closed: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
 582  99A1                  INCLUDE "./Maths/Utilities/AequAmulQdiv256-FMLTU.asm"
# file opened: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
   1+ 99A1              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=A*Q/256unsg  Fast multiply"
   2+ 99A1              fmltu:
   3+ 99A1 57           AequAmulQdiv256:        ld	d,a
   4+ 99A2 3A 11 81                             ld	a,(varQ)
   5+ 99A5 5F                                   ld	e,a
   6+ 99A6 ED 30                                mul
   7+ 99A8 7A                                   ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   8+ 99A9 C9                                   ret
   9+ 99AA
  10+ 99AA 5F           AequAmulDdiv256:        ld  e,a
  11+ 99AB ED 30                                mul
  12+ 99AD 7A                                   ld  a,d
  13+ 99AE C9                                   ret
  14+ 99AF
# file closed: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
 583  99AF                  INCLUDE "./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm"
# file opened: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
   1+ 99AF              ; "DV42,DV42IYH DE = P.R, c = R"
   2+ 99AF              DV42IYH:									; as per DV42 but using iyl for Y reg
   3+ 99AF 21 F3 83     		ld		hl,varDustZ
   4+ 99B2 FD 7D        		ld		a,iyl
   5+ 99B4 ED 31        		add		hl,a
   6+ 99B6 7E           		ld		a,(hl)
   7+ 99B7 C3 C3 99     		jp		DV41
   8+ 99BA              DV42:										; travel step of dust particle front/rear
   9+ 99BA 21 F3 83     		ld		hl,varDustZ
  10+ 99BD 3A F9 7F     		ld		a,(regY)
  11+ 99C0 ED 31        		add		hl,a
  12+ 99C2 7E           		ld		a,(hl)						; a = SZ[y]
  13+ 99C3              DV41:										; P.R = speed/ (ZZ/8) dust left/right
  14+ 99C3 5F           		ld		e,a							; using E as Q var replacement
  15+ 99C4 3A 0D 81     		ld		a,(DELTA)					; DELTA \ speed, how far has dust moved based on its z-coord.
  16+ 99C7              DVID4:										; P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
  17+ 99C7 06 08        		ld		b,8							; counter
  18+ 99C9 CB 27        		sla		a							;
  19+ 99CB 57           		ld		d,a							; use d for - p = delta * 2
  20+ 99CC AF           		xor		a
  21+ 99CD              DVL4:										; counter x loop (b reg)
  22+ 99CD CB 17        		rl		a							; a = a * 2
  23+ 99CF 38 03        		jr		c,DV8						; jump on carry
  24+ 99D1 BB           		cp		e							; var Q
  25+ 99D2 38 02        		jr		c,DV5						; skip subtraction
  26+ 99D4              DV8:
  27+ 99D4 9B           		sbc		a,e							; a = a - q (with carry)
  28+ 99D5 37           		scf									;  carry gets set
  29+ 99D6              DV5:										; skipped subtraction
  30+ 99D6 CB 12        		rl		d							; d (P hi)
  31+ 99D8 10 F3        		djnz	DVL4						; dec b and loop loop X, hi left in P.
  32+ 99DA              .CalcRemainder:								; BFRDIV R=A*256/Q
  33+ 99DA              ; Note we are not going to call LL28+4 but inline code here:
  34+ 99DA 06 FE        		ld		b,$FE						; remainder R for AofQ *256/Q
  35+ 99DC 4F           		ld		c,a							; use c as R var
  36+ 99DD              .RollRemainder:
  37+ 99DD CB 27        		sla		a
  38+ 99DF 38 11        		jr		c,.Reduce					; if a >> generates carry reduce
  39+ 99E1 B8           		cp		b							; a < q?
  40+ 99E2 30 01        		jr		nc,.DontSBC
  41+ 99E4              .DoSBC:										; a is < q
  42+ 99E4 98           		sbc		a,b							; 	a -= q
  43+ 99E5              .DontSBC:
  44+ 99E5 CB 11        		rl		c							; r << 1
  45+ 99E7 38 F4        		jr		c, .RollRemainder			; if rol generated a carry, continue
  46+ 99E9 79           		ld		a,c
  47+ 99EA 32 12 81     		ld		(varR),a					; for backwards compat
  48+ 99ED 7A           		ld		a,d
  49+ 99EE 32 0F 80     		ld		(varP),a
  50+ 99F1 C9           		ret									; R (c) left with remainder
  51+ 99F2              .Reduce:									; a geneated a carry
  52+ 99F2 98           		sbc		a,b							; a = a - (q +1)
  53+ 99F3 37           		scf									; set carry flag for rl
  54+ 99F4 CB 11        		rl		c							; r << 1 briging in carry
  55+ 99F6 38 E5        		jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  56+ 99F8 79           		ld		a,c
  57+ 99F9 32 12 81     		ld		(varR),a					; for backwards compat
  58+ 99FC 7A           		ld		a,d
  59+ 99FD 32 0F 80     		ld		(varP),a
  60+ 9A00 C9           		ret
  61+ 9A01              .AnswerTooBig:
  62+ 9A01 0E FF        		ld		c,$FF						; arse its too big
  63+ 9A03 79           		ld		a,c
  64+ 9A04 32 12 81     		ld		(varR),a					; for backwards compat
  65+ 9A07 7A           		ld		a,d
  66+ 9A08 32 0F 80     		ld		(varP),a
  67+ 9A0B C9           		ret
  68+ 9A0C
# file closed: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
 584  9A0C                  INCLUDE "./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm"
# file opened: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
   1+ 9A0C
   2+ 9A0C              asm_defmutl:
   3+ 9A0C              AequDmulEdiv256usgn:
   4+ 9A0C              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=D*E/256unsg  Fast multiply"
   5+ 9A0C ED 30        	mul
   6+ 9A0E 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   7+ 9A0F C9           	ret
   8+ 9A10
   9+ 9A10
# file closed: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
 585  9A10              ;INCLUDE "AP2equAPmulQunsgEorP-MLTU2.asm"
 586  9A10              ;INCLUDE "APequPmulQUnsg-MULTU.asm"
 587  9A10              ;INCLUDE "APequPmulX-MU11.asm"
 588  9A10                  INCLUDE "./Maths/Utilities/APequQmulA-MULT1.asm"
# file opened: ./Maths/Utilities/APequQmulA-MULT1.asm
   1+ 9A10              APequQmulA:
   2+ 9A10              asm_mult1:
   3+ 9A10              ; "ASM_MULT1 (DE) A(hi).P(lo) = Q * A first part of MAD, multiply and add. Visited Quite often. A=hi P = lo also returns result in DE"
   4+ 9A10 FE 00        	cp	0
   5+ 9A12 28 1F        	jr	z,.mul0			; quick exit if its Q * 0
   6+ 9A14 5F           	ld	e,a
   7+ 9A15 3A 11 81     	ld	a,(varQ)
   8+ 9A18 57           	ld	d,a
   9+ 9A19 FE 00        	cp	0				; compare a
  10+ 9A1B 28 16        	jr	z,.mul0			; quick exit if its 0 * a
  11+ 9A1D AB           	xor	e				; -- = + +- = - -+ = - ++ = +
  12+ 9A1E E6 80        	and $80				; get the resultant sign and save into b
  13+ 9A20 47           	ld	b,a
  14+ 9A21 7A           	ld	a,d
  15+ 9A22 E6 7F        	and	SignMask8Bit	; now strip off sign bits
  16+ 9A24 57           	ld	d,a
  17+ 9A25 7B           	ld	a,e
  18+ 9A26 E6 7F        	and SignMask8Bit
  19+ 9A28 5F           	ld	e,a
  20+ 9A29 ED 30        	mul					; zxn de = d * e
  21+ 9A2B 7B           	ld	a,e
  22+ 9A2C 32 0F 80     	ld	(varP),a		; p = lo
  23+ 9A2F 7A           	ld	a,d				; a = hi
  24+ 9A30 B0           	or	b				; de goes to a and varP also re-do sign bit
  25+ 9A31 57           	ld	d,a				; we will work with de having result as we may bin vars later
  26+ 9A32 C9           	ret
  27+ 9A33              .mul0:
  28+ 9A33 AF           	xor	a
  29+ 9A34 32 0F 80     	ld	(varP),a
  30+ 9A37 57           	ld	d,a
  31+ 9A38 5F           	ld  e,a
  32+ 9A39 C9           	ret
  33+ 9A3A
# file closed: ./Maths/Utilities/APequQmulA-MULT1.asm
 589  9A3A                  INCLUDE "./Maths/Utilities/badd_ll38.asm"
# file opened: ./Maths/Utilities/badd_ll38.asm
   1+ 9A3A              baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
   2+ 9A3A              SAEquSRPlusAQ:
   3+ 9A3A              ; Calculate the following between sign-magnitude numbers:
   4+ 9A3A              ;   (S A) = (S R) + (A Q)
   5+ 9A3A              ; where the sign bytes only contain the sign bits, not magnitudes.
   6+ 9A3A              ; note goes wrong at <-127 >128 so need 16 bit version
   7+ 9A3A              ; so need to fix the issue with carry flag not returning a fault correctly
   8+ 9A3A              LL38:
   9+ 9A3A              ;	ld		d,a
  10+ 9A3A              ;	ld		a,(varQ)
  11+ 9A3A              ;	ld		e,a
  12+ 9A3A              ;	ld		a,(varS)
  13+ 9A3A              ;	ld		h,a
  14+ 9A3A              ;	ld		a,(varR)
  15+ 9A3A              ;	ld		l,a
  16+ 9A3A              ;	call	ADDHLDESignedv3
  17+ 9A3A              ;	ld		a,h
  18+ 9A3A              ;	ld		(varS),a
  19+ 9A3A              ;	ld		a,l
  20+ 9A3A              ;	ret
  21+ 9A3A              ; calculation table
  22+ 9A3A              ;   R     Q    Op            Sign calc
  23+ 9A3A              ;	10    5    Add           +    sign same add R sign
  24+ 9A3A              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  25+ 9A3A              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  26+ 9A3A              ;	-10  -5    ABS Add       -    sign same add R sign
  27+ 9A3A              ;   5    10    Add           +    sign same add R sign
  28+ 9A3A              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  29+ 9A3A              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  30+ 9A3A              ;   -5   -10   ABS  add      -    sign same add R sign
  31+ 9A3A
  32+ 9A3A              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  33+ 9A3A              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  34+ 9A3A              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  35+ 9A3A              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  36+ 9A3A
  37+ 9A3A
  38+ 9A3A              ; Calculate sign for Q from A and varS
  39+ 9A3A 21 13 81     	ld		hl,varS							;
  40+ 9A3D AE           	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  41+ 9A3E FA 49 9A     	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  42+ 9A41 3A 11 81     	ld		a,(varQ)						; Q	\ else addition, S already correct
  43+ 9A44 21 12 81     	ld		hl,varR
  44+ 9A47 86           	add		a,(hl)							; a = Q + R
  45+ 9A48 C9           	ret										; Done carry set if overflow
  46+ 9A49              .LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  47+ 9A49 3A 12 81     	ld		a,(varR)						; a = R
  48+ 9A4C 21 11 81     	ld		hl,varQ                         ; Q
  49+ 9A4F              ;--	JumpIfALTMemHLusng LL39SwapSubtraction	; if a < (hl) then do LL39SwapSubtraction
  50+ 9A4F              	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  50+ 9A4F B7          >                        or a
  51+ 9A50 9E           	sbc		a,(hl)							; A = R - Q which as R >= Q will always be a positive result
  52+ 9A51 38 01            jr      c,.LL39SignCorrection
  53+ 9A53              ;--    jr      a,.LL39ResultZero
  54+ 9A53              ;--   JumpIfNegative LL39SignCorrection		; if there was underflow we have to correct sign
  55+ 9A53              ;--	or		a								; Clear carry flag to say result is correct
  56+ 9A53 C9           	ret
  57+ 9A54              .LL39SignCorrection:
  58+ 9A54 FE 00            cp      0                               ; if its 0 then neg will affect flag so we just zero result to save compute
  59+ 9A56 28 0E            jr      z,.LL39ResultZero
  60+ 9A58 ED 44            neg                                     ; flip A 2'c value to positive
  61+ 9A5A 08           	ex		af,af'							; save A temporarily
  62+ 9A5B 3A 13 81     	ld		a,(varS)						; Flip Sign bit in varS
  63+ 9A5E EE 80        	xor		$80							    ;
  64+ 9A60 32 13 81     	ld		(varS),a                        ; flip sign bit of a
  65+ 9A63 08           	ex		af,af'                          ; get back a which is the result
  66+ 9A64                  ClearCarryFlag                          ; clear carry as NEG instrunction sets it for non zero
  66+ 9A64 B7          >                        or a
  67+ 9A65 C9           	ret
  68+ 9A66              .LL39ResultZero:
  69+ 9A66 32 13 81         ld      (varS),a                        ; a is zero at this stage so set sign as well
  70+ 9A69                  ClearCarryFlag                          ; clear carry
  70+ 9A69 B7          >                        or a
  71+ 9A6A C9               ret
  72+ 9A6B              ;--LL39SwapSubtraction:
  73+ 9A6B              ;--	push	bc
  74+ 9A6B              ;--	ld		b,a
  75+ 9A6B              ;--	ld		a,(hl)
  76+ 9A6B              ;--	sub		b
  77+ 9A6B              ;--	pop		bc
  78+ 9A6B              ;--	ex		af,af'							; do we flip here or negate. i think its flip as its overflowed unsigned
  79+ 9A6B              ;--	ld		a,(varS)
  80+ 9A6B              ;--	xor		$80
  81+ 9A6B              ;--	ld		(varS),a
  82+ 9A6B              ;--	ex		af,af'
  83+ 9A6B              ;--	ret
  84+ 9A6B
  85+ 9A6B              ;;;;	baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
  86+ 9A6B              ;;;;; Calculate the following between sign-magnitude numbers:
  87+ 9A6B              ;;;;;   (S A) = (S R) + (A Q)
  88+ 9A6B              ;;;;; where the sign bytes only contain the sign bits, not magnitudes.
  89+ 9A6B              ;;;;; note goes wrong at <-127 >128 so need 16 bit version
  90+ 9A6B              ;;;;LL38:
  91+ 9A6B              ;;;;; Calculate sign for Q from A and varS
  92+ 9A6B              ;;;;	ld		hl,varS							;
  93+ 9A6B              ;;;;	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  94+ 9A6B              ;;;;	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  95+ 9A6B              ;;;;	ld		a,(varQ)						; Q	\ else addition, S already correct
  96+ 9A6B              ;;;;	ld		hl,varR
  97+ 9A6B              ;;;;	add		a,(hl)							; a = Q + R
  98+ 9A6B              ;;;;	ret										; Done
  99+ 9A6B              ;;;;.LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
 100+ 9A6B              ;;;;	ld		hl,varQ                         ;
 101+ 9A6B              ;;;;	ld		a,(hl)
 102+ 9A6B              ;;;;	JumpIfAGTENusng 128,LL39Sub16bit		; does this need to be 16 bit
 103+ 9A6B              ;;;;	ld		a,(varR)						;
 104+ 9A6B              ;;;;	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
 105+ 9A6B              ;;;;	sbc		a,(hl)							; A = R - Q
 106+ 9A6B              ;;;;	jr		c,.SignCorrection				; if there was underflow we have to correct sign
 107+ 9A6B              ;;;;	or		a								; Clear carry flag to say result is correct
 108+ 9A6B              ;;;;	ret
 109+ 9A6B              ;;;;.SignCorrection:
 110+ 9A6B              ;;;;    neg                                     ; flip A 2'c value to positive
 111+ 9A6B              ;;;;	ex		af,af'							; save A temporarily
 112+ 9A6B              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 113+ 9A6B              ;;;;	xor		$80							    ;
 114+ 9A6B              ;;;;	ld		(varS),a                        ; flip sign bit of a
 115+ 9A6B              ;;;;	ex		af,af'                          ; get back a which is the result
 116+ 9A6B              ;;;;	ret
 117+ 9A6B              ;;;;LL39Sub16Bit:
 118+ 9A6B              ;;;;	ld		e,a
 119+ 9A6B              ;;;;	ld		d,0
 120+ 9A6B              ;;;;	ld		a,(varR)
 121+ 9A6B              ;;;;	ld		l,a
 122+ 9A6B              ;;;;	ld		h,0
 123+ 9A6B              ;;;;	ClearCarryFlag
 124+ 9A6B              ;;;;	sbc		hl,de
 125+ 9A6B              ;;;;	jr		c,.SignCorrection16bit
 126+ 9A6B              ;;;;	bit		7,h
 127+ 9A6B              ;;;;	jr		z,.GoodToReturn
 128+ 9A6B              ;;;;.Needtonegate:
 129+ 9A6B              ;;;;	macronegate16hl
 130+ 9A6B              ;;;;.GoodToReturn
 131+ 9A6B              ;;;;	ld		a,l
 132+ 9A6B              ;;;;	or		a
 133+ 9A6B              ;;;;	ret
 134+ 9A6B              ;;;;.SignCorrection16bit:
 135+ 9A6B              ;;;;	macronegate16hl
 136+ 9A6B              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 137+ 9A6B              ;;;;	xor		$80							    ;
 138+ 9A6B              ;;;;	ld		(varS),a                        ; flip sign bit of a
 139+ 9A6B              ;;;;	ld		a,l
 140+ 9A6B              ;;;;	ret
 141+ 9A6B
 142+ 9A6B
# file closed: ./Maths/Utilities/badd_ll38.asm
 590  9A6B                  INCLUDE "./Maths/Utilities/moveship4-MVS4.asm"
# file opened: ./Maths/Utilities/moveship4-MVS4.asm
   1+ 9A6B              ; Note comparing hl vs iY, you need at least 3 incs or decs for hl to be slower
   2+ 9A6B              ; it may be faster though if we can use hl to avoid memory actions if needed
   3+ 9A6B              ; need to optimise mad as push hl pop hl and use de doesn't really improve speed
   4+ 9A6B
   5+ 9A6B
   6+ 9A6B              moveship4Yreg:
   7+ 9A6B 3A F9 7F     		ld		a,(regY)
   8+ 9A6E 47           		ld		b,a
   9+ 9A6F              moveship4breg:
  10+ 9A6F              		; b = Y index, 9 = nosev, 15 = roofv 21 = sidev
  11+ 9A6F              MVS4PitchAlphaRollBeta:
  12+ 9A6F              MVS4:										;.MVS4	\ -> &52A1 \ Moveship4, Y is matrix row, pitch&roll update to coordinates
  13+ 9A6F 3A 27 80     		ld		a,(ALPHA)					;  ALPHA
  14+ 9A72 32 11 81     		ld		(varQ),a					; player ship's roll Q = Alpha
  15+ 9A75 21 12 C0     		ld		hl,UBnKxsgn
  16+ 9A78 78           		ld		a,b							; from
  17+ 9A79 ED 31        		add		hl,a
  18+ 9A7B 7E           		ld		a,(hl)						; INWK+2,Y
  19+ 9A7C 32 12 81     		ld		(varR),a					; R  \ lo
  20+ 9A7F 23           		inc		hl
  21+ 9A80 7E           		ld		a,(hl)						; INWK+3,Y
  22+ 9A81 32 13 81     		ld		(varS),a					; S  \ hi		SR = nosev_y (or axis y)
  23+ 9A84 2B           		dec		hl
  24+ 9A85 2B           		dec		hl
  25+ 9A86 2B           		dec		hl							;
  26+ 9A87 7E           		ld		a,(hl)						; INWK+0,Y
  27+ 9A88 32 0F 80     		ld		(varP),a					; P  \ over-written	 P = nosevx lo
  28+ 9A8B 23           		inc		hl
  29+ 9A8C 7E           		ld		a,(hl)						; INWK+1,Y
  30+ 9A8D EE 80        		xor		$80							; flip sign  AP = nosevx * - 1
  31+ 9A8F CD 51 92     		call	madXAequQmulAaddRS			; MAD	\ DE = X.A = alpha*INWK+1,Y + INWK+2to3,Y
  32+ 9A92 23                   inc     hl
  33+ 9A93 23                   inc     hl
  34+ 9A94 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  35+ 9A95 2B                   dec     hl
  36+ 9A96 3A F8 7F             ld      a,(regX)
  37+ 9A99 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-aX   \ their comment
  38+ 9A9A 32 0F 80             ld      (varP),a                    ;  P
  39+ 9A9D 2B                   dec     hl
  40+ 9A9E 2B                   dec     hl
  41+ 9A9F 7E                   ld      a,(hl)                      ; INWK+0,Y
  42+ 9AA0 32 12 81             ld      (varR),a                    ;  R	\ lo
  43+ 9AA3 23                   inc     hl
  44+ 9AA4 7E                   ld      a,(hl)                      ;  INWK+1,Y
  45+ 9AA5 32 13 81             ld      (varS),a                    ; S	\ hi
  46+ 9AA8 23                   inc     hl
  47+ 9AA9 23                   inc     hl
  48+ 9AAA 7E                   ld      a,(hl)                      ; INWK+3,Y
  49+ 9AAB CD 51 92             call    madXAequQmulAaddRS          ; MAD	\ X.A = alpha*INWK+3,Y + INWK+0to1,Y
  50+ 9AAE 2B                   dec     hl
  51+ 9AAF 2B                   dec     hl
  52+ 9AB0 77                   ld      (hl),a                      ; INWK+1,Y  \ hi
  53+ 9AB1 3A F8 7F             ld      a,(regX)
  54+ 9AB4 2B                   dec     hl
  55+ 9AB5 77                   ld      (hl),a                      ; INWK+0,Y  \ X=X+aY   \ their comment
  56+ 9AB6 32 0F 80             ld      (varP),a                    ; P
  57+ 9AB9 3A 1A 80             ld      a,(BETA)                    ; BETA
  58+ 9ABC 32 11 81             ld      (varQ),a                    ; Q	\ player ship's pitch
  59+ 9ABF 23                   inc     hl
  60+ 9AC0 23                   inc     hl
  61+ 9AC1 7E                   ld      a,(hl)                      ; INWK+2,Y
  62+ 9AC2 32 12 81             ld      (varR),a                    ; R	\ lo
  63+ 9AC5 23                   inc     hl
  64+ 9AC6 7E                   ld      a,(hl)                      ; INWK+3,Y
  65+ 9AC7 32 13 81             ld      (varS),a                    ; S	\ hi
  66+ 9ACA 23                   inc     hl
  67+ 9ACB 7E                   ld      a,(hl)                      ; INWK+4,Y
  68+ 9ACC 32 0F 80             ld      (varP),a                    ; P	\ lo
  69+ 9ACF 23                   inc     hl
  70+ 9AD0 7E                   ld      a,(hl)                      ; INWK+5,Y
  71+ 9AD1 EE 80                xor     $80                         ; flip sign hi
  72+ 9AD3 CD 51 92             call    madXAequQmulAaddRS          ; MAD	\ X.A =-beta*INWK+5,Y + INWK+2to3,Y
  73+ 9AD6 2B                   dec     hl
  74+ 9AD7 2B                   dec     hl
  75+ 9AD8 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  76+ 9AD9 3A F8 7F             ld      a,(regX)
  77+ 9ADC 2B                   dec     hl
  78+ 9ADD 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-bZ  \ their comment
  79+ 9ADE 32 0F 80             ld      (varP),a                    ; P
  80+ 9AE1 23                   inc     hl
  81+ 9AE2 23                   inc     hl
  82+ 9AE3 7E                   ld      a,(hl)                      ; INWK+4,Y
  83+ 9AE4 32 12 81             ld      (varR),a                    ; R	\ lo
  84+ 9AE7 23                   inc     hl
  85+ 9AE8 7E                   ld      a,(hl)                      ; INWK+5,Y
  86+ 9AE9 32 13 81             ld      (varS),a                    ; S	\ hi
  87+ 9AEC 2B                   dec     hl
  88+ 9AED 2B                   dec     hl
  89+ 9AEE 7E                   ld      a,(hl)                      ; INWK+3,Y
  90+ 9AEF CD 51 92             call    madXAequQmulAaddRS          ; MAD	\ X.A = beta*INWK+3,Y + INWK+4,5,Y
  91+ 9AF2 23                   inc     hl
  92+ 9AF3 23                   inc     hl
  93+ 9AF4 77                   ld      (hl),a                      ; INWK+5,Y \ hi
  94+ 9AF5 3A F8 7F             ld      a,(regX)
  95+ 9AF8 2B                   dec     hl
  96+ 9AF9 77                   ld      (hl),a                      ; INWK+4,Y \ Z=Z+bY   \ their comment
  97+ 9AFA C9                   ret
  98+ 9AFB
  99+ 9AFB
# file closed: ./Maths/Utilities/moveship4-MVS4.asm
 591  9AFB              ;INCLUDE "MoveShip5-MVS5.asm"
 592  9AFB              ;INCLUDE "PAequAmulQusgn-MLU2.asm"
 593  9AFB              ;INCLUDE "PAequDustYIdxYmulQ-MLU1.asm"
 594  9AFB              ;INCLUDE "PlanetP12addInwkX-MVT6.asm"
 595  9AFB                  INCLUDE "./Maths/Utilities/RequAmul256divQ-BFRDIV.asm"
# file opened: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
   1+ 9AFB              ;;;LL28:
   2+ 9AFB              ;;;    ld      c,a                         ;
   3+ 9AFB              ;;;    ld      a,(varQ)                    ;
   4+ 9AFB              ;;;    ld      b,a                         ;
   5+ 9AFB              ;;;    ld      a,c                         ; Get varQ into b and retain c
   6+ 9AFB              ;;;RequAmul256divB:                        ;
   7+ 9AFB              ;;;LL28Breg:
   8+ 9AFB              ;;;; "BFRDIV R = (A * 256 / Q)  byte from remainder of division, not signed a = a, b = q, c = r"
   9+ 9AFB              ;;;	cp		b							; Check A >= Q
  10+ 9AFB              ;;;	jr		nc, .AnswerTooBig			; A >= Q? yes too big
  11+ 9AFB              ;;;.CalcRemainder:
  12+ 9AFB              ;;;	ld		c, 	$FE						; set R to $FE
  13+ 9AFB              ;;;.RollRemainder:
  14+ 9AFB              ;;;	sla		a
  15+ 9AFB              ;;;	jr		c,.Reduce					; if a >> generates carry reduce
  16+ 9AFB              ;;;	cp		b							; a < q?
  17+ 9AFB              ;;;	jr		nc,.DontSBC
  18+ 9AFB              ;;;.DoSBC:									; a is < q
  19+ 9AFB              ;;;	sbc		a,b							; 	a -= q
  20+ 9AFB              ;;;.DontSBC:
  21+ 9AFB              ;;;	rl		c							; r << 1
  22+ 9AFB              ;;;	jr		c, .RollRemainder			; if rol generated a carry, continue
  23+ 9AFB              ;;;    ld      a,c
  24+ 9AFB              ;;;    ld      (varR),a
  25+ 9AFB              ;;;	ret									; R (c) left with remainder
  26+ 9AFB              ;;;.Reduce:								; a geneated a carry
  27+ 9AFB              ;;;	sbc		a,b							; a = a - (q +1)
  28+ 9AFB              ;;;	scf									; set carry flag for rl
  29+ 9AFB              ;;;	rl		c							; r << 1 briging in carry
  30+ 9AFB              ;;;	jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  31+ 9AFB              ;;;    ld      a,c
  32+ 9AFB              ;;;    ld      (varR),a
  33+ 9AFB              ;;;	ret
  34+ 9AFB              ;;;.AnswerTooBig:
  35+ 9AFB              ;;;	ld	    c,$FF							; arse its too big
  36+ 9AFB              ;;;    ld      a,c
  37+ 9AFB              ;;;    ld      (varR),a
  38+ 9AFB              ;;;	ret
  39+ 9AFB
  40+ 9AFB              BCequAmul256DivC:
  41+ 9AFB 59             ld    e,c
  42+ 9AFC 67             ld    h,a
  43+ 9AFD 2E 00          ld    l,0
  44+ 9AFF              AdivEDivide:                             ; this routine performs the operation BC=HL/E
  45+ 9AFF 7B             ld a,e                                 ; checking the divisor; returning if it is zero
  46+ 9B00 B7             or a                                   ; from this time on the carry is cleared
  47+ 9B01 C8             ret z
  48+ 9B02 01 FF FF       ld bc,-1                               ; BC is used to accumulate the result
  49+ 9B05 16 00          ld d,0                                 ; clearing D, so DE holds the divisor
  50+ 9B07              AdivEDivLoop:                            ; subtracting DE from HL until the first overflow
  51+ 9B07 ED 52          sbc hl,de                              ; since the carry is zero, SBC works as if it was a SUB
  52+ 9B09 03             inc bc                                 ;  note that this instruction does not alter the flags
  53+ 9B0A 30 FB          jr nc,AdivEDivLoop                     ; no carry means that there was no overflow
  54+ 9B0C C9             ret
  55+ 9B0D
  56+ 9B0D              HL_Div_C:
  57+ 9B0D              ; Integer divides HL by C
  58+ 9B0D              ; Result in HL, remainder in A
  59+ 9B0D              ; Clobbers F, B
  60+ 9B0D 06 10                ld b,16
  61+ 9B0F AF                   xor a
  62+ 9B10              HL_Div_C_Loop:
  63+ 9B10 29                   add hl,hl
  64+ 9B11 17                   rla
  65+ 9B12 B9                   cp c
  66+ 9B13 38 02                jr c,HL_DivC_Skip
  67+ 9B15 91                   sub c
  68+ 9B16 2C                   inc l
  69+ 9B17              HL_DivC_Skip:
  70+ 9B17 10 F7                djnz HL_Div_C_Loop
  71+ 9B19 7D                   ld   a,l
  72+ 9B1A 32 12 81             ld  (varR),a
  73+ 9B1D C9                   ret
  74+ 9B1E
  75+ 9B1E
  76+ 9B1E
  77+ 9B1E              ; Entry point if varQ is populated with demoninator
  78+ 9B1E              RequAmul256divQ:
  79+ 9B1E              BFRDIV:
  80+ 9B1E F5           		push	af
  81+ 9B1F 3A 11 81     		ld		a,(varQ)
  82+ 9B22 4F           		ld		c,a
  83+ 9B23 F1           		pop		af
  84+ 9B24 FE 00        		cp		0
  85+ 9B26 CA 3D 9B     		jp		z, HLDIVC_0_BY	; fast exit if numerator is 0
  86+ 9B29              RequAmul256divC:
  87+ 9B29 2E 00        		ld		l,0
  88+ 9B2B 67           		ld		h,a
  89+ 9B2C              HL_Div_Cold:						; fast entry point if C and HL are already set
  90+ 9B2C 06 10        		ld b,16
  91+ 9B2E AF           		xor a
  92+ 9B2F              LOOPPOINT:
  93+ 9B2F 29           		add hl,hl
  94+ 9B30 17           		rla
  95+ 9B31 B9           		cp c
  96+ 9B32 38 02        		jr c,SKIPINCSUB
  97+ 9B34 2C           		inc l
  98+ 9B35 91           		sub c
  99+ 9B36              SKIPINCSUB:
 100+ 9B36 10 F7        		djnz LOOPPOINT
 101+ 9B38 7D           		ld		a,l
 102+ 9B39 32 12 81     		ld 		(varR),a
 103+ 9B3C C9           		ret
 104+ 9B3D              HLDIVC_0_BY:
 105+ 9B3D 32 12 81     		ld		(varR),a
 106+ 9B40 C9           		ret
 107+ 9B41              ;	push	af
 108+ 9B41              ;	ld		a,b
 109+ 9B41              ;	ld		(varQ),a
 110+ 9B41              ;	pop		af
 111+ 9B41              ;RequAmul256divQ:
 112+ 9B41              ;BFRDIV:									;BFRDIV R=A*256/Q   byte from remainder of division
 113+ 9B41              ;	ld		hl,varQ
 114+ 9B41              ;	JumpIfAGTENusng	(hl),LL2			;  is A >=  Q ?, if yes, answer too big for 1 byte, R=#&FF
 115+ 9B41              ;	ld		b,$FE						; b = X
 116+ 9B41              ;	ld		c,a							; c = R	div roll counter
 117+ 9B41              ;LL31:									; roll R
 118+ 9B41              ;	sla		a
 119+ 9B41              ;	jr		c,LL29						; hop to Reduce
 120+ 9B41              ;	JumpIfALTNusng (hl)					; Q skip sbc if a < Q
 121+ 9B41              ;	sbc		a,(hl)						; a = a - Q
 122+ 9B41              ;	rl		c							; rotate R left
 123+ 9B41              ;	jr		c,LL31						; loop if R poped out a carry bit
 124+ 9B41              ;	jr		LL2Good
 125+ 9B41              ;LL29:									; Reduce
 126+ 9B41              ;	sbc		a,(hl)
 127+ 9B41              ;	scf
 128+ 9B41              ;	rl		c							; roll a carry flag into R
 129+ 9B41              ;	jr		c,LL31						;  loop R
 130+ 9B41              ;	jr		LL2Good
 131+ 9B41              ;LL2:
 132+ 9B41              ;	ld		c,$FF
 133+ 9B41              ;LL2Good:
 134+ 9B41              ;	ld		a,c
 135+ 9B41              ;	ld		(varR),a
 136+ 9B41              ;	ret
 137+ 9B41
# file closed: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
 596  9B41                  INCLUDE "./Maths/Utilities/RequAdivQ-LL61.asm"
# file opened: ./Maths/Utilities/RequAdivQ-LL61.asm
   1+ 9B41              RequAdivQ:
   2+ 9B41              	; R = A/Q, U = remainder, code looked a little odd as if R is reminader and U = result
   3+ 9B41              LL61:										; Handling division R=A/Q for case further down
   4+ 9B41 4F           	ld		c,a								; c = A
   5+ 9B42 3A 11 81     	ld		a,(varQ)						; test for divide by 0
   6+ 9B45 FE 00        	cp		0
   7+ 9B47 28 16        	jr		z,LL84							; divide by zero error
   8+ 9B49 57           	ld		d,a								; now we can do C/D
   9+ 9B4A 06 08            ld b,8
  10+ 9B4C AF               xor a
  11+ 9B4D              LL63:										; roll divide loop
  12+ 9B4D CB 21            sla c
  13+ 9B4F 17               rla
  14+ 9B50 BA               cp d
  15+ 9B51 38 02            jr c,LL64
  16+ 9B53 0C               inc c
  17+ 9B54 92               sub d
  18+ 9B55              LL64:
  19+ 9B55 10 F6            djnz LL63
  20+ 9B57 32 10 81     	ld	(varU),a							; store remainder in U
  21+ 9B5A 79           	ld	a,c
  22+ 9B5B 32 12 81     	ld	(varR),a							; store remainder in R
  23+ 9B5E C9               ret
  24+ 9B5F              LL84:										; div error  R=U=#5
  25+ 9B5F 3E 32        	ld		a,50
  26+ 9B61 32 12 81     	ld		(varR),a
  27+ 9B64 32 10 81     	ld		(varU),a
  28+ 9B67 C9           	ret
  29+ 9B68
# file closed: ./Maths/Utilities/RequAdivQ-LL61.asm
 597  9B68              ;    INCLUDE "./Maths/Utilities/RSequABSrs-LL129.asm"
 598  9B68                  INCLUDE "./Maths/Utilities/RSequQmulA-MULT12.asm"
# file opened: ./Maths/Utilities/RSequQmulA-MULT12.asm
   1+ 9B68              asm_mult12:
   2+ 9B68              RSequQmulA:
   3+ 9B68              ; "asm_ult12  R.S = Q * A \ visited quite often S = hi, R = lo, odd that its opposite to mult1"
   4+ 9B68 CD 10 9A     	call APequQmulA
   5+ 9B6B 08           	ex 	af,af'
   6+ 9B6C 7A           	ld	a,d
   7+ 9B6D 32 13 81     	ld	(varS),a
   8+ 9B70 7B           	ld	a,e
   9+ 9B71 32 12 81     	ld	(varR),a
  10+ 9B74 08           	ex 	af,af'
  11+ 9B75 C9           	ret
  12+ 9B76
# file closed: ./Maths/Utilities/RSequQmulA-MULT12.asm
 599  9B76              ;INCLUDE "SwapRotmapXY-PUS1.asm"
 600  9B76                  INCLUDE "./Maths/Utilities/tidy.asm"
# file opened: ./Maths/Utilities/tidy.asm
   1+ 9B76              ;rotmap0xLo: DB	0				; INWK +9
   2+ 9B76              ;rotmap0xHi: DB	0				; INWK +10
   3+ 9B76              ;rotmat0yLo: DB	0				; INWK +11
   4+ 9B76              ;rotmat0yHi: DB	0				; INWK +12
   5+ 9B76              ;rotmat0zLo:	DB 	0				; INWK +13
   6+ 9B76              ;rotmat0zHi:	DB 	0				; INWK +14
   7+ 9B76              ;rotmap1xLo: DB	0				; INWK +15
   8+ 9B76              ;rotmap1xHi:	DB	0				; INWK +16
   9+ 9B76              ;rotmat1yLo:	DB	0				; INWK +17
  10+ 9B76              ;rotmat1yHi:	DB	0				; INWK +18
  11+ 9B76              ;rotmat1zLo:	DB	0				; INWK +19
  12+ 9B76              ;rotmat1zHi:	DB	0				; INWK +20
  13+ 9B76              ;rotmat2xLo: DB	0				; INWK +21
  14+ 9B76              ;rotmat2xHi:	DB	0				; INWK +22
  15+ 9B76              ;rotmat2yLo:	DB	0				; INWK +23
  16+ 9B76              ;rotmat2yHi:	DB	0				; INWK +24
  17+ 9B76              ;rotmat2zLo:	DB	0				; INWK +25
  18+ 9B76              ;rotmat2zHi:	DB	0				; INWK +26
  19+ 9B76              ;
  20+ 9B76              ;rotmatFx	equ	rotmat0xHi
  21+ 9B76              ;rotmatFy	equ	rotmat0yHi
  22+ 9B76              ;rotmatFz	equ	rotmat0zHi
  23+ 9B76              ;rotmatUx	equ	rotmat1xHi
  24+ 9B76              ;rotmatUy	equ	rotmat1yHi
  25+ 9B76              ;rotmatUz	equ	rotmat1zHi
  26+ 9B76              ;
  27+ 9B76              ;inwkarray			equ		INWK+10
  28+ 9B76
  29+ 9B76                  include "./Universe/Ships/CopyRotMattoXX15.asm"
# file opened: ././Universe/Ships/CopyRotMattoXX15.asm
   1++9B76              CopyRotMatNoseVtoXX15:
   2++9B76                      ldCopyByte  UBnkrotmatNosevX+1 ,XX15VecX
   2++9B76 3A 26 C0    >                        ld       a,(UBnkrotmatNosevX+1)
   2++9B79 32 92 C0    >                        ld       (XX15VecX),a
   3++9B7C                      ldCopyByte  UBnkrotmatNosevY+1, XX15VecY
   3++9B7C 3A 28 C0    >                        ld       a,(UBnkrotmatNosevY+1)
   3++9B7F 32 93 C0    >                        ld       (XX15VecY),a
   4++9B82                      ldCopyByte  UBnkrotmatNosevZ+1 ,XX15VecZ
   4++9B82 3A 2A C0    >                        ld       a,(UBnkrotmatNosevZ+1)
   4++9B85 32 94 C0    >                        ld       (XX15VecZ),a
   5++9B88 C9                   ret
   6++9B89
   7++9B89              CopyRotMatRoofVtoXX15:
   8++9B89                      ldCopyByte  UBnkrotmatRoofvX+1 ,XX15VecX
   8++9B89 3A 20 C0    >                        ld       a,(UBnkrotmatRoofvX+1)
   8++9B8C 32 92 C0    >                        ld       (XX15VecX),a
   9++9B8F                      ldCopyByte  UBnkrotmatRoofvY+1, XX15VecY
   9++9B8F 3A 22 C0    >                        ld       a,(UBnkrotmatRoofvY+1)
   9++9B92 32 93 C0    >                        ld       (XX15VecY),a
  10++9B95                      ldCopyByte  UBnkrotmatRoofvZ+1 ,XX15VecZ
  10++9B95 3A 24 C0    >                        ld       a,(UBnkrotmatRoofvZ+1)
  10++9B98 32 94 C0    >                        ld       (XX15VecZ),a
  11++9B9B C9                   ret
  12++9B9C
  13++9B9C              CopyRotMatSideVtoXX15:
  14++9B9C                      ldCopyByte  UBnkrotmatSidevX+1 ,XX15VecX
  14++9B9C 3A 1A C0    >                        ld       a,(UBnkrotmatSidevX+1)
  14++9B9F 32 92 C0    >                        ld       (XX15VecX),a
  15++9BA2                      ldCopyByte  UBnkrotmatSidevY+1, XX15VecY
  15++9BA2 3A 1C C0    >                        ld       a,(UBnkrotmatSidevY+1)
  15++9BA5 32 93 C0    >                        ld       (XX15VecY),a
  16++9BA8                      ldCopyByte  UBnkrotmatSidevZ+1 ,XX15VecZ
  16++9BA8 3A 1E C0    >                        ld       a,(UBnkrotmatSidevZ+1)
  16++9BAB 32 94 C0    >                        ld       (XX15VecZ),a
  17++9BAE C9                   ret
  18++9BAF
# file closed: ././Universe/Ships/CopyRotMattoXX15.asm
  30+ 9BAF
  31+ 9BAF                  include "./Universe/Ships/CopyXX15toRotMat.asm"
# file opened: ././Universe/Ships/CopyXX15toRotMat.asm
   1++9BAF              CopyXX15toRotMatNoseV:
   2++9BAF                      ldCopyByte  XX15VecX, UBnkrotmatNosevX+1
   2++9BAF 3A 92 C0    >                        ld       a,(XX15VecX)
   2++9BB2 32 26 C0    >                        ld       (UBnkrotmatNosevX+1),a
   3++9BB5                      ldCopyByte  XX15VecY, UBnkrotmatNosevY+1
   3++9BB5 3A 93 C0    >                        ld       a,(XX15VecY)
   3++9BB8 32 28 C0    >                        ld       (UBnkrotmatNosevY+1),a
   4++9BBB                      ldCopyByte  XX15VecZ, UBnkrotmatNosevZ+1
   4++9BBB 3A 94 C0    >                        ld       a,(XX15VecZ)
   4++9BBE 32 2A C0    >                        ld       (UBnkrotmatNosevZ+1),a
   5++9BC1 C9                   ret
   6++9BC2
   7++9BC2              CopyXX15toRotMatRoofV:
   8++9BC2                      ldCopyByte  XX15VecX, UBnkrotmatRoofvX+1
   8++9BC2 3A 92 C0    >                        ld       a,(XX15VecX)
   8++9BC5 32 20 C0    >                        ld       (UBnkrotmatRoofvX+1),a
   9++9BC8                      ldCopyByte  XX15VecY, UBnkrotmatRoofvY+1
   9++9BC8 3A 93 C0    >                        ld       a,(XX15VecY)
   9++9BCB 32 22 C0    >                        ld       (UBnkrotmatRoofvY+1),a
  10++9BCE                      ldCopyByte  XX15VecZ, UBnkrotmatRoofvZ+1
  10++9BCE 3A 94 C0    >                        ld       a,(XX15VecZ)
  10++9BD1 32 24 C0    >                        ld       (UBnkrotmatRoofvZ+1),a
  11++9BD4 C9                   ret
  12++9BD5
  13++9BD5              CopyXX15toRotMatSideV:
  14++9BD5                      ldCopyByte  XX15VecX, UBnkrotmatSidevX+1
  14++9BD5 3A 92 C0    >                        ld       a,(XX15VecX)
  14++9BD8 32 1A C0    >                        ld       (UBnkrotmatSidevX+1),a
  15++9BDB                      ldCopyByte  XX15VecY, UBnkrotmatSidevY+1
  15++9BDB 3A 93 C0    >                        ld       a,(XX15VecY)
  15++9BDE 32 1C C0    >                        ld       (UBnkrotmatSidevY+1),a
  16++9BE1                      ldCopyByte  XX15VecZ, UBnkrotmatSidevZ+1
  16++9BE1 3A 94 C0    >                        ld       a,(XX15VecZ)
  16++9BE4 32 1E C0    >                        ld       (UBnkrotmatSidevZ+1),a
  17++9BE7 C9                   ret
  18++9BE8
# file closed: ././Universe/Ships/CopyXX15toRotMat.asm
  32+ 9BE8
  33+ 9BE8              TidySub1:									;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
  34+ 9BE8              		; b = regX on entry
  35+ 9BE8              TIS1Prep:									;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
  36+ 9BE8 08           		ex		af,af'
  37+ 9BE9 78           		ld		a,b
  38+ 9BEA 32 11 81     		ld		(varQ),a
  39+ 9BED 08           		ex		af,af'
  40+ 9BEE EE 80        		xor		$80							;	 flip sign of Acc
  41+ 9BF0 CD 51 92     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  42+ 9BF3              ; USES 				A BC E
  43+ 9BF3              ; DOES NOT USE		D HL
  44+ 9BF3              Tis1Div96:							   		; .DVID96	\ Their comment A=A/96: answer is A*255/96
  45+ 9BF3 4F           		ld		c,a							; Store sign bit in  ct (we use e reg for that)
  46+ 9BF4 E6 80        		and		SignOnly8Bit						; ..
  47+ 9BF6 5F           		ld		e,a							; ..
  48+ 9BF7 79           		ld		a,c							; a = high byte again with sign bit cleared
  49+ 9BF8 E6 7F        		and		SignMask8Bit							; ..
  50+ 9BFA 06 FE        		ld		b,$FE						; slide counter T1
  51+ 9BFC              TIS1RollTLoop								; roll T1  clamp Acc to #96 for rotation matrix unity
  52+ 9BFC CB 27        		sla		a
  53+ 9BFE              		JumpIfALTNusng $60, TIS1SkipSub
  53+ 9BFE FE 60       >                        cp      $60
  53+ 9C00 DA 0D 9C    >                        jp		c, TIS1SkipSub
  54+ 9C03 DE 60        		sbc		a,$60							; subtract 96
  55+ 9C05 37           		scf
  56+ 9C06 CB 10        		rl		b							;  T1
  57+ 9C08 38 F2        		jr		c,TIS1RollTLoop
  58+ 9C0A              TIS1KIPCont:
  59+ 9C0A 78           		ld		a,b							;   T1
  60+ 9C0B B3           		or		e							;   restore T sign
  61+ 9C0C C9           		ret
  62+ 9C0D              TIS1SkipSub:
  63+ 9C0D B7           	or			a
  64+ 9C0E CB 10        	rl			b							; T rolled left to push bit out the end
  65+ 9C10 38 EA        	jr			c,TIS1RollTLoop				; if we still have not hit the empty marker continue
  66+ 9C12 C3 0A 9C     	jp			TIS1KIPCont
  67+ 9C15
  68+ 9C15              ;.TIDY	\ -> &4679 \ Orthogonalize rotation matrix that uses 0x60 as unity returns INWK(16,18,20) = INWK(12*18+14*20, 10*16+14*20, 10*16+12*18) / INWK(10,12,14)
  69+ 9C15              ; Ux,Uy,Uz = -(FyUy+FzUz, FxUx+FzUz, FxUx+FyUy)/ Fx,Fy,Fz
  70+ 9C15
  71+ 9C15
  72+ 9C15
  73+ 9C15
  74+ 9C15              TidyRotYSmall:
  75+ 9C15 CD 3E 9D     		call	CalcRoofvZ
  76+ 9C18 32 24 C0     		ld		(UBnkrotmatRoofvZ+1),a			; set roofvy hi?? Says roofz TODO
  77+ 9C1B C3 4F 9C     		jp		NormaliseRoofV
  78+ 9C1E
  79+ 9C1E              TidyRotXSmall:
  80+ 9C1E AF           		xor		a
  81+ 9C1F 47           		ld		b,a
  82+ 9C20 3A 28 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev_y
  83+ 9C23 E6 60        		and		%01100000
  84+ 9C25 CA 15 9C     		jp		z,TidyRotYSmall
  85+ 9C28 3A 2A C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
  86+ 9C2B 47           		ld		b,a							; b = regX for now
  87+ 9C2C 3A 22 C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
  88+ 9C2F CD 04 9D     		call	CalcRoofvY					; Set (roofvy= (nosev_x * roofv_x + nosev_z * roofv_z) / nosev_y, Q -= nosev_z
  89+ 9C32 32 22 C0     		ld		(UBnkrotmatRoofvY+1),a			; set roofvy hi
  90+ 9C35 C3 4F 9C     		jp		NormaliseRoofV
  91+ 9C38              ; TIDY is broken
  92+ 9C38              TIDY:
  93+ 9C38
  94+ 9C38              ORTHOGALISE:
  95+ 9C38              ;-- NormaliseNosev
  96+ 9C38 CD 76 9B     		call	CopyRotMatNoseVtoXX15
  97+ 9C3B CD 3B 97     		call	normaliseXX1596fast			; normalise z hi, its really TIS3
  98+ 9C3E CD AF 9B     		call	CopyXX15toRotMatNoseV
  99+ 9C41              .CheckNXSmall:
 100+ 9C41 3A 26 C0     		ld		a,(UBnkrotmatNosevX+1)
 101+ 9C44 E6 60        		and		%01100000					; check top two magnitude bits
 102+ 9C46 CA 1E 9C     		jp		z,TidyRotXSmall
 103+ 9C49              .RotXIsBig:
 104+ 9C49 CD CA 9C             call	CalcRoofvX
 105+ 9C4C 32 20 C0     		ld		(UBnkrotmatRoofvX+1),a    	; set roofvx hi
 106+ 9C4F              NormaliseRoofV:
 107+ 9C4F CD 89 9B     		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 108+ 9C52 CD 3B 97     		call	normaliseXX1596fast			; normalise roof
 109+ 9C55              ;calc sidev x
 110+ 9C55 CD C2 9B     		call	CopyXX15toRotMatRoofV		; get back normalised version
 111+ 9C58 3A 26 C0     		ld		a,(UBnkrotmatNosevX+1)
 112+ 9C5B 32 11 81     		ld		(varQ),a					; q = nosev_y
 113+ 9C5E 3A 24 C0     		ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 114+ 9C61 CD 68 9B     		call	RSequQmulA
 115+ 9C64 3A 2A C0     		ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 116+ 9C67 47           		ld		b,a							; b = regX for now
 117+ 9C68 3A 22 C0     		ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 118+ 9C6B CD E8 9B     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 119+ 9C6E                      JumpIfAIsZero NormSideXNoNeg
 119+ 9C6E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 119+ 9C6F CA 74 9C    >                        jp	    z, NormSideXNoNeg
 120+ 9C72 EE 80        		xor		$80							; flip a to get -sidev_x
 121+ 9C74              NormSideXNoNeg:
 122+ 9C74 32 1A C0     		ld		(UBnkrotmatSidevX+1),a
 123+ 9C77              ;calc sidev y
 124+ 9C77 3A 2A C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 125+ 9C7A 32 11 81     		ld		(varQ),a
 126+ 9C7D 3A 20 C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 127+ 9C80 CD 68 9B     		call	RSequQmulA
 128+ 9C83 3A 26 C0     		ld		a,(UBnkrotmatNosevX+1)			        ; nosev x
 129+ 9C86 47           		ld		b,a							; b = regX for now
 130+ 9C87 3A 24 C0     		ld		a,(UBnkrotmatRoofvZ+1)			; roofv z
 131+ 9C8A CD E8 9B     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 132+ 9C8D                      JumpIfAIsZero NormSideYNoNeg
 132+ 9C8D A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 132+ 9C8E CA 93 9C    >                        jp	    z, NormSideYNoNeg
 133+ 9C91 EE 80        		xor		$80							; flip a to get -sidev_y
 134+ 9C93              NormSideYNoNeg:
 135+ 9C93 32 28 C0     		ld		(UBnkrotmatNosevY+1),a
 136+ 9C96              ;calc sidev z
 137+ 9C96 3A 26 C0     		ld		a,(UBnkrotmatNosevX+1)			; nosev x
 138+ 9C99 32 11 81     		ld		(varQ),a
 139+ 9C9C 3A 22 C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 140+ 9C9F CD 68 9B     		call	RSequQmulA
 141+ 9CA2 3A 28 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev y
 142+ 9CA5 47           		ld		b,a							; b = regX for now
 143+ 9CA6 3A 20 C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 144+ 9CA9 CD E8 9B     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 145+ 9CAC                      JumpIfAIsZero NormSideZNoNeg
 145+ 9CAC A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 145+ 9CAD CA B2 9C    >                        jp	    z, NormSideZNoNeg
 146+ 9CB0 EE 80        		xor		$80							; flip a to get -sidev_y
 147+ 9CB2              NormSideZNoNeg:
 148+ 9CB2 32 1C C0     		ld		(UBnkrotmatSidevY+1),a ;TODO SHoudl this be Y??
 149+ 9CB5              .ClearLoBytes:
 150+ 9CB5 21 25 C0     		ld		hl,UBnkrotmatNosevX
 151+ 9CB8 06 09        		ld		b,9
 152+ 9CBA AF                   xor     a
 153+ 9CBB              .ClearLoLoop:
 154+ 9CBB 77           		ld		(hl),a						; zero out lo bytes
 155+ 9CBC 23           		inc		hl
 156+ 9CBD 23           		inc		hl
 157+ 9CBE 10 FB        		djnz	.ClearLoLoop
 158+ 9CC0 CD 9C 9B     		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 159+ 9CC3 CD 3B 97     		call	normaliseXX1596fast			; normalise roof
 160+ 9CC6              ;calc sidev x
 161+ 9CC6 CD D5 9B     		call	CopyXX15toRotMatSideV		; get back normalised version
 162+ 9CC9
 163+ 9CC9 C9           		ret
 164+ 9CCA
 165+ 9CCA
 166+ 9CCA
 167+ 9CCA              ;;;;;;;;.CheckNYSmall:
 168+ 9CCA              ;;;;;;;;		ld		a,(XX15+2)					; first check z zero, if so we have to do Y
 169+ 9CCA              ;;;;;;;;		and		$7F
 170+ 9CCA              ;;;;;;;;		cp		0
 171+ 9CCA              ;;;;;;;;		jp		z,Tidy1RZ
 172+ 9CCA              ;;;;;;;;		ld		a,(XX15+1)					; now we can do a realistic check of RY
 173+ 9CCA              ;;;;;;;;		cp 		0							; we can't end up with divide by 0 for RY
 174+ 9CCA              ;;;;;;;;		jp		z,Tidy1RZ					; We can't have all values of vector 0 so we must do RZ
 175+ 9CCA              ;;;;;;;;		and		%01100000					; check top two magnitude bits
 176+ 9CCA              ;;;;;;;;		jp		z,Tidy1RY					; and tidy based on roofy
 177+ 9CCA              ;;;;;;;;.DoNZ:
 178+ 9CCA              ;;;;;;;;		jp		Tidy1RZ						; else we tidy based on roofz
 179+ 9CCA              ;;;;;;;;;---RE ENTRY POINT -------------------------------------
 180+ 9CCA              ;;;;;;;;NormaliseRoofv:
 181+ 9CCA              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 182+ 9CCA              ;;;;;;;;		push	bc
 183+ 9CCA              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 184+ 9CCA              ;;;;;;;;		pop		bc
 185+ 9CCA              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 186+ 9CCA              ;;;;;;;;ProcessSidev:
 187+ 9CCA              ;;;;;;;;; -- SIDEV X
 188+ 9CCA              ;;;;;;;;		ldCopyByte	nosev_z+1, varQ         ; use ixh as Q later
 189+ 9CCA              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 190+ 9CCA              ;;;;;;;;		push	bc
 191+ 9CCA              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 192+ 9CCA              ;;;;;;;;		pop		bc
 193+ 9CCA              ;;;;;;;;		ld		a,(UBnkrotmatNosevY+1)
 194+ 9CCA              ;;;;;;;;		ld		b,a							; set x (b) to value of nosev_z
 195+ 9CCA              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 196+ 9CCA              ;;;;;;;;		push	bc
 197+ 9CCA              ;;;;;;;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 198+ 9CCA              ;;;;;;;;		pop		bc
 199+ 9CCA              ;;;;;;;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 200+ 9CCA              ;;;;;;;;; -- SIDEV Y
 201+ 9CCA              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 202+ 9CCA              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 203+ 9CCA              ;;;;;;;;		push	bc
 204+ 9CCA              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 205+ 9CCA              ;;;;;;;;		pop		bc
 206+ 9CCA              ;;;;;;;;		ld		a,(UBnkrotmatNosevZ+1)
 207+ 9CCA              ;;;;;;;;		ld		b,a
 208+ 9CCA              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)
 209+ 9CCA              ;;;;;;;;		push	bc
 210+ 9CCA              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 211+ 9CCA              ;;;;;;;;		pop		bc
 212+ 9CCA              ;;;;;;;;		ld		(sidev_y+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 213+ 9CCA              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 214+ 9CCA              ;;;;;;;;		push	bc
 215+ 9CCA              ;;;;;;;;; -- SIDEV Z
 216+ 9CCA              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 217+ 9CCA              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)				;
 218+ 9CCA              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 219+ 9CCA              ;;;;;;;;		pop		bc
 220+ 9CCA              ;;;;;;;;		ld		a,(UBnkrotmatNosevX+1)
 221+ 9CCA              ;;;;;;;;		ld		b,a
 222+ 9CCA              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 223+ 9CCA              ;;;;;;;;		push	bc
 224+ 9CCA              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 225+ 9CCA              ;;;;;;;;		pop		bc
 226+ 9CCA              ;;;;;;;;		ld		(sidev_z+1),a
 227+ 9CCA              ;;;;;;;;		xor		a							; set a = 0 so we can clear orientation low bytes
 228+ 9CCA              ;;;;;;;;		ld		hl,sidev_z
 229+ 9CCA              ;;;;;;;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 230+ 9CCA              ;;;;;;;;		ld		hl,UBnkrotmatNosevX
 231+ 9CCA              ;;;;;;;;NormaliseSideV:
 232+ 9CCA              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 233+ 9CCA              ;;;;;;;;		push	bc
 234+ 9CCA              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 235+ 9CCA              ;;;;;;;;		pop		bc
 236+ 9CCA              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 237+ 9CCA              ;;;;;;;;
 238+ 9CCA
 239+ 9CCA
 240+ 9CCA              CalcRoofvX:
 241+ 9CCA              Tidy1RX:										; roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 242+ 9CCA              		ldCopyByte UBnkrotmatNosevZ+1,varQ
 242+ 9CCA 3A 2A C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 242+ 9CCD 32 11 81    >                        ld       (varQ),a
 243+ 9CD0 3A 24 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 244+ 9CD3 CD 68 9B     		call	RSequQmulA						; rs = nosez hi * roofz hi
 245+ 9CD6              		ldCopyByte UBnkrotmatNosevY+1,varQ
 245+ 9CD6 3A 28 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 245+ 9CD9 32 11 81    >                        ld       (varQ),a
 246+ 9CDC 3A 22 C0     		ld		a,(UBnkrotmatRoofvY+1)
 247+ 9CDF CD 51 92     		call	madXAequQmulAaddRS				; DE = nosey hi * roofy hi + rs
 248+ 9CE2 7A           		ld		a,d
 249+ 9CE3 E6 80        		and 	$80
 250+ 9CE5 FD 67        		ld		iyh,a
 251+ 9CE7              ;DEBUG		ld		c,a
 252+ 9CE7 3A 26 C0     		ld		a,(UBnkrotmatNosevX+1)					; get nosev x sign
 253+ 9CEA 4F           		ld		c,a								; temp save
 254+ 9CEB E6 80        		and		$80
 255+ 9CED FD AC        		xor		iyh								; flip from saved multiply sign result
 256+ 9CEF FD 67        		ld		iyh,a							; save nosesev sign to iyh
 257+ 9CF1 79           		ld		a,c								; recover a
 258+ 9CF2 E6 7F        		and		$7F								; a is unsigned nosev x
 259+ 9CF4 42           		ld		b,d
 260+ 9CF5 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 261+ 9CF6 57           		ld		d,a								; de = nosev x hi
 262+ 9CF7 1E 00        		ld		e,0
 263+ 9CF9 CD AD 95     		call	BC_Div_DE
 264+ 9CFC FD 7C        		ld		a,iyh							; get back sign from nosevx
 265+ 9CFE EE 80        		xor		$80								; flip sign
 266+ 9D00 E6 80        		and		$80								; keep sign bit only
 267+ 9D02 B0           		or		b
 268+ 9D03 C9           		ret
 269+ 9D04
 270+ 9D04
 271+ 9D04              CalcRoofvY:
 272+ 9D04              Tidy1RY:										; roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 273+ 9D04              		ldCopyByte UBnkrotmatNosevZ+1,varQ				;                  A        Q              RS
 273+ 9D04 3A 2A C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 273+ 9D07 32 11 81    >                        ld       (varQ),a
 274+ 9D0A 3A 24 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 275+ 9D0D CD 68 9B     		call	RSequQmulA
 276+ 9D10              		ldCopyByte UBnkrotmatNosevX+1,varQ
 276+ 9D10 3A 26 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 276+ 9D13 32 11 81    >                        ld       (varQ),a
 277+ 9D16 3A 20 C0     		ld		a,(UBnkrotmatRoofvX+1)
 278+ 9D19 CD 51 92     		call	madXAequQmulAaddRS
 279+ 9D1C 7A           		ld		a,d
 280+ 9D1D E6 80        		and 	$80
 281+ 9D1F FD 67        		ld		iyh,a
 282+ 9D21 3A 28 C0     		ld		a,(UBnkrotmatNosevY+1)					; get nosev x sign
 283+ 9D24 4F           		ld		c,a								; temp save
 284+ 9D25 E6 80        		and		$80
 285+ 9D27 FD AC        		xor		iyh								; flip from saved multiply sign result
 286+ 9D29 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 287+ 9D2B 79           		ld		a,c								; recover a
 288+ 9D2C E6 7F        		and		$7F								; a is unsigned nosev x
 289+ 9D2E 42           		ld		b,d
 290+ 9D2F 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 291+ 9D30 57           		ld		d,a								; de = nosev x hi
 292+ 9D31 1E 00        		ld		e,0
 293+ 9D33 CD AD 95     		call	BC_Div_DE
 294+ 9D36 FD 7C        		ld		a,iyh
 295+ 9D38 EE 80        		xor		$80
 296+ 9D3A E6 80        		and		$80
 297+ 9D3C B0           		or		b
 298+ 9D3D C9           		ret
 299+ 9D3E
 300+ 9D3E              CalcRoofvZ:
 301+ 9D3E              Tidy1RZ:										; roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 302+ 9D3E              		ldCopyByte UBnkrotmatNosevY+1,varQ
 302+ 9D3E 3A 28 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 302+ 9D41 32 11 81    >                        ld       (varQ),a
 303+ 9D44 3A 22 C0     		ld		a,(UBnkrotmatRoofvY+1)
 304+ 9D47 CD 68 9B     		call	RSequQmulA						; rs = NOSEy * ROOFy
 305+ 9D4A              		ldCopyByte UBnkrotmatNosevX+1,varQ
 305+ 9D4A 3A 26 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 305+ 9D4D 32 11 81    >                        ld       (varQ),a
 306+ 9D50 3A 20 C0     		ld		a,(UBnkrotmatRoofvX+1)
 307+ 9D53 CD 51 92     		call	madXAequQmulAaddRS				; de (A,ixl) = NOSEx * ROOFx + RS
 308+ 9D56 7A           		ld		a,d
 309+ 9D57 E6 80        		and 	$80
 310+ 9D59 FD 67        		ld		iyh,a
 311+ 9D5B 3A 2A C0     		ld		a,(UBnkrotmatNosevZ+1)					; get nosev x sign
 312+ 9D5E 4F           		ld		c,a								; temp save
 313+ 9D5F E6 80        		and		$80
 314+ 9D61 FD AC        		xor		iyh								; flip from saved multiply sign result
 315+ 9D63 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 316+ 9D65 79           		ld		a,c								; recover a
 317+ 9D66 E6 7F        		and		$7F								; a is unsigned nosev x
 318+ 9D68 42           		ld		b,d
 319+ 9D69 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 320+ 9D6A 57           		ld		d,a								; de = nosev x hi
 321+ 9D6B 1E 00        		ld		e,0
 322+ 9D6D CD AD 95     		call	BC_Div_DE
 323+ 9D70 FD 7C        		ld		a,iyh
 324+ 9D72 EE 80        		xor		$80
 325+ 9D74 E6 80        		and		$80
 326+ 9D76 B0           		or		b
 327+ 9D77 C9           		ret
 328+ 9D78
 329+ 9D78
 330+ 9D78
 331+ 9D78              ;;ProcessSidev:
 332+ 9D78              ;;		ldCopyByte	UBnkrotmatNosevZ+1, varQ         ; use ixh as Q later
 333+ 9D78              ;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 334+ 9D78              ;;		push	bc
 335+ 9D78              ;;		call	RSequQmulA					; RS = Q * A MULT12
 336+ 9D78              ;;		pop		bc
 337+ 9D78              ;;		ld		a,(UBnkrotmatNosevY+1)
 338+ 9D78              ;;		ld		b,a							; set x (b) to value of nosev_z
 339+ 9D78              ;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 340+ 9D78              ;;		push	bc
 341+ 9D78              ;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 342+ 9D78              ;;		pop		bc
 343+ 9D78              ;;		xor		$80							; sidev_x = -a by flipping sign bit
 344+ 9D78              ;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 345+ 9D78              ;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 346+ 9D78              ;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 347+ 9D78              ;;		push	bc
 348+ 9D78              ;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 349+ 9D78              ;;		pop		bc
 350+ 9D78              ;;		ld		a,(UBnkrotmatNosevZ+1)
 351+ 9D78              ;;		ld		b,a
 352+ 9D78              ;;		ld		a,(UBnkrotmatNosevY+1)
 353+ 9D78              ;;		push	bc
 354+ 9D78              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 355+ 9D78              ;;		pop		bc
 356+ 9D78              ;;		xor		$80							; a *= -1
 357+ 9D78              ;;		ld		(UBnkrotmatSidevY+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 358+ 9D78              ;;		ld		a,(UBnkrotmatRoofvY+1)
 359+ 9D78              ;;		push	bc
 360+ 9D78              ;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 361+ 9D78              ;;		ld		a,(UBnkrotmatRoofvX+1)				;
 362+ 9D78              ;;		call	RSequQmulA					; RS = Q * A MULT12
 363+ 9D78              ;;		pop		bc
 364+ 9D78              ;;		ld		a,(UBnkrotmatNosevX+1)
 365+ 9D78              ;;		ld		b,a
 366+ 9D78              ;;		ld		a,(UBnkrotmatRoofvY+1)
 367+ 9D78              ;;		push	bc
 368+ 9D78              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 369+ 9D78              ;;		pop		bc
 370+ 9D78              ;;		xor		$80
 371+ 9D78              ;;		ld		(UBnkrotmatSidevZ+1),a
 372+ 9D78              ;;		xor		a							; set a = 0 so we can clear orientation low bytes
 373+ 9D78              ;;		ld		hl,UBnkrotmatSidevZ
 374+ 9D78              ;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 375+ 9D78              ;;		ld		hl,UBnkrotmatNosevX
 376+ 9D78
 377+ 9D78
 378+ 9D78
 379+ 9D78
 380+ 9D78
 381+ 9D78
 382+ 9D78              ;;;;;;;;;-- Check to see if the top two magnitude bits are clear in nosev_x, if so jump to TI1
 383+ 9D78              ;;;;;;;;.ProcessRoofv:
 384+ 9D78              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 385+ 9D78              ;;;;;;;;		push	bc
 386+ 9D78              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 387+ 9D78              ;;;;;;;;		pop		bc
 388+ 9D78              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 389+ 9D78              ;;;;;;;;.ProcessSidev:
 390+ 9D78              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 391+ 9D78              ;;;;;;;;		push	bc
 392+ 9D78              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 393+ 9D78              ;;;;;;;;		pop		bc
 394+ 9D78              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 395+ 9D78
# file closed: ./Maths/Utilities/tidy.asm
 601  9D78                  INCLUDE "./Maths/Utilities/LL28AequAmul256DivD.asm"
# file opened: ./Maths/Utilities/LL28AequAmul256DivD.asm
   1+ 9D78
   2+ 9D78              LL28Amul256DivD:        JumpIfAGTENusng  d, .Ll28Exit255
   2+ 9D78 BA          >                        cp     d
   2+ 9D79 D2 97 9D    >                        jp		nc,.Ll28Exit255
   3+ 9D7C 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
   4+ 9D7E CB 27        .LL31:                  sla     a
   5+ 9D80 38 0D                                jr      c,.LL29
   6+ 9D82                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
   6+ 9D82 BA          >                        cp      d
   6+ 9D83 DA 88 9D    >                        jp		c, .SkipSub
   7+ 9D86 92                                   sub     d
   8+ 9D87                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
   8+ 9D87 B7          >                        or a
   9+ 9D88 3F           .SkipSub:               ccf                                 ; if we did the subtract the carry will be clear so we need to invert to roll in.
  10+ 9D89 CB 13                                rl      e
  11+ 9D8B 38 F1                                jr      c,.LL31
  12+ 9D8D 7B                                   ld      a,e
  13+ 9D8E C9                                   ret
  14+ 9D8F 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
  15+ 9D90 37                                   scf                                 ; Set the C flag to rotate into the result in R
  16+ 9D91 CB 13                                rl      e                           ; rotate counter e left
  17+ 9D93 38 E9                                jr      c,.LL31                     ; if a bit was spat off teh end then loop
  18+ 9D95 7B                                   ld      a,e                         ; stick result in a
  19+ 9D96 C9                                   ret
  20+ 9D97 3E FF        .Ll28Exit255:           ld  a,255                           ; Fail with FF as result
  21+ 9D99 C9                                   ret
  22+ 9D9A
# file closed: ./Maths/Utilities/LL28AequAmul256DivD.asm
 602  9D9A                  INCLUDE "./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm"
# file opened: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
   1+ 9D9A              XAequMinusXAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
   2+ 9D9A              TIS1:
   3+ 9D9A 08           		ex		af,af'
   4+ 9D9B 3A F8 7F     		ld		a,(regX)
   5+ 9D9E 47           		ld		b,a
   6+ 9D9F 08           		ex		af,af'
   7+ 9DA0              BAequMinusBAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
   8+ 9DA0 08           		ex		af,af'
   9+ 9DA1 78           		ld		a,b
  10+ 9DA2 32 11 81     		ld		(varQ),a
  11+ 9DA5 08           		ex		af,af'
  12+ 9DA6 EE 80        		xor		$80							;	 flip sign of Acc
  13+ 9DA8 CD 51 92     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  14+ 9DAB              ; USES 				A BC E
  15+ 9DAB              ; DOES NOT USE		D HL
  16+ 9DAB              Div96:										; .DVID96	\ Their comment A=A/96: answer is A*255/96
  17+ 9DAB 47           		ld		b,a
  18+ 9DAC E6 80        		and		$80							;	hi sign
  19+ 9DAE 5F           		ld		e,a							;   e = varT
  20+ 9DAF 78           		ld		a,b
  21+ 9DB0 E6 7F        		and		$7F							;	hi A7
  22+ 9DB2 06 FE        		ld		b,$FE						;   slide counter
  23+ 9DB4 48           		ld		c,b							;   c == T1 ::  T1
  24+ 9DB5              .DVL3:										;   roll T1  clamp Acc to #96 for rotation matrix unity
  25+ 9DB5 CB 27        		sla		a
  26+ 9DB7 FE 60        		cp		$60							; max 96
  27+ 9DB9 30 02        		jr		nc,.DV4
  28+ 9DBB DE 60        		sbc		a,$60							;  SBC #&60
  29+ 9DBD              .DV4:										; skip subtraction
  30+ 9DBD CB 11        		rl		c							;  T1
  31+ 9DBF 38 F4        		jr		c,.DVL3
  32+ 9DC1 79           		ld		a,c							;   T1
  33+ 9DC2 B3           		or		e							;   restore T sign
  34+ 9DC3 C9           		ret
  35+ 9DC4
# file closed: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
 603  9DC4              ;INCLUDE "XAequQmuilAaddRS-MAD-ADD.asm"
 604  9DC4              ;INCLUDE "XHiYLoequPA-gc3.asm"
 605  9DC4              ;INCLUDE "XHiYLoequPmulAmul4-gc2.asm"
 606  9DC4              ;INCLUDE "XLoYHiequPmulQmul4-gcash.asm"
 607  9DC4              ;INCLUDE "XX12equXX15byXX16-LL51.asm"
 608  9DC4                ;  INCLUDE "./Maths/Utilities/XYeqyx1loSmulMdiv256-Ll120-LL123.asm"
 609  9DC4
 610  9DC4                  INCLUDE "./GameEngine/Tactics.asm"
# file opened: ./GameEngine/Tactics.asm
   1+ 9DC4              ;Ship Tactics
   2+ 9DC4 F5 9D 4C 9F  ShipAIJumpTable:      DW    NormalAI,   MissileAI,  StationAI,  JunkAI,     ScoopableAI
   2+ 9DC8 F6 9D F7 9D
   2+ 9DCC F8 9D
   3+ 9DCE F9 9D FA 9D                        DW    ThargoidAI, NoAI,       NoAI,       NoAI,       NoAI
   3+ 9DD2 FA 9D FA 9D
   3+ 9DD6 FA 9D
   4+ 9DD8              ShipAiJumpTableMax:   EQU ($ - ShipAIJumpTable)/2
   5+ 9DD8
   6+ 9DD8
   7+ 9DD8
   8+ 9DD8              ;----------------------------------------------------------------------------------------------------------------------------------
   9+ 9DD8              ; Main entry point to tactics. Every time it will do a a tidy and the do AI logic
  10+ 9DD8              UpdateShip:             ;  call    DEBUGSETNODES ;       call    DEBUGSETPOS
  11+ 9DD8 21 42 6A                            ld      hl,TidyCounter
  12+ 9DDB 35                                  dec     (hl)
  13+ 9DDC C0                                  ret     nz
  14+ 9DDD 3E 10                               ld      a,16
  15+ 9DDF 32 42 6A                            ld      (TidyCounter),a
  16+ 9DE2                                      ; call    TIDY TIDY IS BROKEN
  17+ 9DE2                                     ; add AI in here too
  18+ 9DE2 3A 31 C3                            ld       a,(ShipTypeAddr)
  19+ 9DE5                                     ReturnIfAGTEusng ShipAiJumpTableMax              ; TODO capture duff jumps whilst debugging in case a new shjip type code is added
  19+ 9DE5 FE 0A       >                        cp    ShipAiJumpTableMax
  19+ 9DE7 D0          >                        ret	 nc
  20+ 9DE8 21 C4 9D                            ld       hl,ShipAIJumpTable
  21+ 9DEB ED 31                               add      hl,a
  22+ 9DED ED 31                               add      hl,a
  23+ 9DEF 7E                                  ld       a,(hl)                                  ; contrary to the name
  24+ 9DF0 23                                  inc      hl                                      ; jp (hl) is really
  25+ 9DF1 66                                  ld       h,(hl)                                  ; jp hl
  26+ 9DF2 6F                                  ld       l,a                                     ;
  27+ 9DF3 E9                                  jp       hl                                      ; Follow the AI Jump Table
  28+ 9DF4 C9                                  ret                                              ; not needed as jp handles this
  29+ 9DF5
  30+ 9DF5
  31+ 9DF5
  32+ 9DF5              ; used  when no pre-checks are requrired, e.g. if forcing a space station from main loop
  33+ 9DF5
  34+ 9DF5 C9           NormalAI:               ret
  35+ 9DF6 C9           StationAI:              ret
  36+ 9DF7 C9           JunkAI:                 ret
  37+ 9DF8 C9           ScoopableAI:            ret
  38+ 9DF9 C9           ThargoidAI:             ret
  39+ 9DFA C9           NoAI:                   ret
  40+ 9DFB
  41+ 9DFB              ;----------------------------------------------------------------------------------------------------------------------------------
  42+ 9DFB              ; set angry if possible, if its an innocent then flag the space station to get angry
  43+ 9DFB 3A 32 C3     MakeAngry:              ld      a,(ShipNewBitsAddr)                     ; Check bit 5 of newb flags
  44+ 9DFE                                      ;break
  45+ 9DFE                                      JumpIfMemEqNusng ShipTypeAddr, ShipTypeStation, .SetNewbAngry
  45+ 9DFE 3A 31 C3    >                        ld  a,(ShipTypeAddr)
  45+ 9E01 FE 02       >                        cp  ShipTypeStation
  45+ 9E03 CA 22 9E    >                        jp  z,.SetNewbAngry
  46+ 9E06 E6 20        .ItsNotAStation:        and     ShipIsBystander                         ; check if space station present if its a bystander
  47+ 9E08 C4 29 9E                             call    nz, SetStationAngry                     ; Set Space Station if present, Angry
  48+ 9E0B 3A 43 C0                             ld      a,(UBnkaiatkecm)                        ; get AI data
  49+ 9E0E                                      ReturnOnBitClear a, ShipAIEnabledBitNbr         ; if 0 then no AI attached so it can't get angry
  49+ 9E0E CB 7F       >                        bit 	ShipAIEnabledBitNbr,a
  49+ 9E10 C8          >                        ret		z
  50+ 9E11 4F                                   ld      c,a                                     ; Copy to c in case we need it later
  51+ 9E12                                      SetMemToN UBnKAccel, 2                          ; set accelleration to 2 to speed up
  51+ 9E12 3E 02       >                        ld      a,2
  51+ 9E14 32 37 C0    >                        ld      (UBnKAccel),a
  52+ 9E17 CB 27                                sla     a                                       ; set pitch to 4
  53+ 9E19 32 39 C0                             ld      (UBnKRotZCounter),a                     ; .
  54+ 9E1C 3A 33 C3                             ld      a,(ShipAIFlagsAddr)
  55+ 9E1F                                      ReturnIfBitMaskClear ShipCanAnger
  55+ 9E1F E6 01       >                        and     ShipCanAnger
  55+ 9E21 C8          >                        ret     z
  56+ 9E22 CD 3E C5     .SetNewbAngry:          call    SetShipHostile
  57+ 9E25 C9                                   ret
  58+ 9E26
  59+ 9E26              ;----------------------------------------------------------------------------------------------------------------------------------
  60+ 9E26 C9           MissileDidHitUs:        ret ; TODO
  61+ 9E27
  62+ 9E27              ;----------------------------------------------------------------------------------------------------------------------------------
  63+ 9E27 C9           PlayerHitByMissile:     ret; TODO , do hit set up blast radius etc
  64+ 9E28              ;----------------------------------------------------------------------------------------------------------------------------------
  65+ 9E28 C9           MissileHitShipA:        ret; TODO hit ship do explosion, check for near by and if player is near and missile type logic, e.g. AP or HE
  66+ 9E29              ;----------------------------------------------------------------------------------------------------------------------------------
  67+ 9E29 CD 43 86     SetStationAngry:        call    IsSpaceStationPresent                   ; only if present
  68+ 9E2C D8                                   ret     c
  69+ 9E2D 3A 30 C0                             ld      a,(UbnKShipUnivBankNbr)                     ; save current bank
  70+ 9E30 FD 67                                ld      iyh,a
  71+ 9E32                                      MMUSelectUniverseN 0                            ; space station is always 0
  71+ 9E32 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
  72+ 9E36 CD 3E C5                             call    SetShipHostile
  73+ 9E39 FD 7C                                ld      a,iyh                                   ; get prev bank back
  74+ 9E3B                                      MMUSelectUniverseA                              ;
  74+ 9E3B C6 46       >                     add    a,BankUNIVDATA0
  74+ 9E3D ED 92 56    >                     nextreg UniverseMMU,       a
  75+ 9E40 C9                                   ret
  76+ 9E41
  77+ 9E41              ;----------------------------------------------------------------------------------------------------------------------------------
  78+ 9E41              CheckMissileBlastInit:  ZeroA
  78+ 9E41 AF          >                        xor a
  79+ 9E42 32 E2 81                             ld      (CurrentMissileCheck),a
  80+ 9E45 21 10 C0                             ld      hl,UBnKxlo                      ; Copy Blast Coordinates
  81+ 9E48 01 0C 00                             ld      bc,12                           ; and Damage stats
  82+ 9E4B 11 B0 81                             ld      de,MissileXPos
  83+ 9E4E ED B0                                ldir
  84+ 9E50                                      ZeroA                                   ; we have processd enque request
  84+ 9E50 AF          >                        xor a
  85+ 9E51 32 34 C0                             ld      (UBnKMissleHitToProcess),a      ;
  86+ 9E54 CD 11 9F                             call    CheckIfBlastHitUs               ; If we are in Range
  87+ 9E57 DC 26 9E                             call    c, MissileDidHitUs              ; Then we get hit
  88+ 9E5A C9                                   ret
  89+ 9E5B
  90+ 9E5B              ;----------------------------------------------------------------------------------------------------------------------------------
  91+ 9E5B              CheckPointRange:        MACRO   ShipPos, ShipSign, MissilePos, MissileSign
  92+ 9E5B ~                                    ld      a,(MissilePos)                      ; check X Coord
  93+ 9E5B ~                                    ld      hl,(ShipSign)
  94+ 9E5B ~                                    xor     (hl)
  95+ 9E5B ~                                    and     SignOnly8Bit
  96+ 9E5B ~                                    ld      hl,(ShipPos)
  97+ 9E5B ~                                    ld      de,(MissilePos)
  98+ 9E5B ~                                    jr      z,.SignsDiffernt
  99+ 9E5B ~            .XSame:                 and     a
 100+ 9E5B ~                                    sbc     hl,de                               ; distance = Ship X - Missile X
 101+ 9E5B ~                                    JumpIfPositive      .CheckDiff              ; if result was -ve
 102+ 9E5B ~                                    NegHL
 103+ 9E5B ~                                    jp      .CheckDiff
 104+ 9E5B ~            .SignsDiffernt:         add     hl,de
 105+ 9E5B ~                                    ReturnIfNegative                            ; if we overflowed then return
 106+ 9E5B ~            .CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 107+ 9E5B ~                                    ReturnIfANotZero
 108+ 9E5B ~                                    ld      a,l
 109+ 9E5B ~                                    and     a
 110+ 9E5B ~                                    ReturnIfAGTEMemusng   CurrentMissileBlastRange
 111+ 9E5B                                      ENDM
 112+ 9E5B              ;...................................................................
 113+ 9E5B              ; We only do one test per loop for spreading the load of work
 114+ 9E5B 3A E2 81     CheckMissileBlastLoop:  ld      a,(CurrentMissileCheck)
 115+ 9E5E                                      ReturnIfAGTENusng   UniverseSlotListSize
 115+ 9E5E FE 0C       >                        cp    UniverseSlotListSize
 115+ 9E60 D0          >                        ret	 nc
 116+ 9E61 FD 6F                                ld      iyl,a
 117+ 9E63 3C                                   inc     a                                   ; update for next slot so re can fast return on distance checks
 118+ 9E64 32 E2 81                             ld      (CurrentMissileCheck),a
 119+ 9E67                                      ReturnIfSlotAEmpty
 119+ 9E67 21 E4 81    >                        ld      hl,UniverseSlotList
 119+ 9E6A ED 31       >                        add     hl,a
 119+ 9E6C 7E          >                        ld      a,(hl)
 119+ 9E6D 3C          >                        inc     a
 119+ 9E6E C8          >                        ret     z           ; if slot was ff inc would make it 0
 119+ 9E6F 3D          >                        dec     a           ; get original value back for later
 120+ 9E70 CD 43 86                             call    IsSpaceStationPresent               ; If its a station its imune to missiles
 121+ 9E73 D8                                   ret     c                                   ; if we have a special mission to kill a staion then its type won't be space station for game logic
 122+ 9E74 3A 41 C0                             ld      a,(UBnKexplDsp)                     ; Don't explode a ship twice
 123+ 9E77 E6 20                                and     ShipExploding                       ;
 124+ 9E79                                      ReturnIfNotZero                             ;
 124+ 9E79 C0          >                        ret     nz
 125+ 9E7A 3A D1 81                             ld      a,(CurrentMissileBlastRange)
 126+ 9E7D FD 67                                ld      iyh,a                               ; iyh = missile blast depending on type
 127+ 9E7F FD 7D        .CheckRange:            ld      a,iyl                               ; now page in universe data
 128+ 9E81                                      MMUSelectUniverseA
 128+ 9E81 C6 46       >                     add    a,BankUNIVDATA0
 128+ 9E83 ED 92 56    >                     nextreg UniverseMMU,       a
 129+ 9E86                                      CheckPointRange UBnKxlo, UBnKxsgn, MissileXPos, MissileXSgn  ; its a square but its good enough
 129+ 9E86 3A B0 81    >                        ld      a,(MissileXPos)                      ; check X Coord
 129+ 9E89 2A 12 C0    >                        ld      hl,(UBnKxsgn)
 129+ 9E8C AE          >                        xor     (hl)
 129+ 9E8D E6 80       >                        and     SignOnly8Bit
 129+ 9E8F 2A 10 C0    >                        ld      hl,(UBnKxlo)
 129+ 9E92 ED 5B B0 81 >                        ld      de,(MissileXPos)
 129+ 9E96 28 0F       >                        jr      z,.SignsDiffernt
 129+ 9E98 A7          >.XSame:                 and     a
 129+ 9E99 ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
 129+ 9E9B             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
 129+ 9E9B F2 A9 9E    >                        jp		p, .CheckDiff
 129+ 9E9E             >                        NegHL
 129+ 9E9E AF          >                    xor a
 129+ 9E9F 95          >                    sub l
 129+ 9EA0 6F          >                    ld l,a
 129+ 9EA1 9F          >                    sbc a,a
 129+ 9EA2 94          >                    sub h
 129+ 9EA3 67          >                    ld h,a
 129+ 9EA4 C3 A9 9E    >                        jp      .CheckDiff
 129+ 9EA7 19          >.SignsDiffernt:         add     hl,de
 129+ 9EA8             >                        ReturnIfNegative                            ; if we overflowed then return
 129+ 9EA8 F8          >                        ret     m
 129+ 9EA9 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 129+ 9EAA             >                        ReturnIfANotZero
 129+ 9EAA A7          >                        and     a
 129+ 9EAB C0          >                        ret     nz
 129+ 9EAC 7D          >                        ld      a,l
 129+ 9EAD A7          >                        and     a
 129+ 9EAE             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
 129+ 9EAE 21 D1 81    >                        ld      hl,CurrentMissileBlastRange
 129+ 9EB1 BE          >                        cp      (hl)
 129+ 9EB2 D0          >                        ret	    nc
 130+ 9EB3                                      CheckPointRange UBnKylo, UBnKysgn, MissileYPos, MissileYSgn
 130+ 9EB3 3A B3 81    >                        ld      a,(MissileYPos)                      ; check X Coord
 130+ 9EB6 2A 15 C0    >                        ld      hl,(UBnKysgn)
 130+ 9EB9 AE          >                        xor     (hl)
 130+ 9EBA E6 80       >                        and     SignOnly8Bit
 130+ 9EBC 2A 13 C0    >                        ld      hl,(UBnKylo)
 130+ 9EBF ED 5B B3 81 >                        ld      de,(MissileYPos)
 130+ 9EC3 28 0F       >                        jr      z,.SignsDiffernt
 130+ 9EC5 A7          >.XSame:                 and     a
 130+ 9EC6 ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
 130+ 9EC8             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
 130+ 9EC8 F2 D6 9E    >                        jp		p, .CheckDiff
 130+ 9ECB             >                        NegHL
 130+ 9ECB AF          >                    xor a
 130+ 9ECC 95          >                    sub l
 130+ 9ECD 6F          >                    ld l,a
 130+ 9ECE 9F          >                    sbc a,a
 130+ 9ECF 94          >                    sub h
 130+ 9ED0 67          >                    ld h,a
 130+ 9ED1 C3 D6 9E    >                        jp      .CheckDiff
 130+ 9ED4 19          >.SignsDiffernt:         add     hl,de
 130+ 9ED5             >                        ReturnIfNegative                            ; if we overflowed then return
 130+ 9ED5 F8          >                        ret     m
 130+ 9ED6 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 130+ 9ED7             >                        ReturnIfANotZero
 130+ 9ED7 A7          >                        and     a
 130+ 9ED8 C0          >                        ret     nz
 130+ 9ED9 7D          >                        ld      a,l
 130+ 9EDA A7          >                        and     a
 130+ 9EDB             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
 130+ 9EDB 21 D1 81    >                        ld      hl,CurrentMissileBlastRange
 130+ 9EDE BE          >                        cp      (hl)
 130+ 9EDF D0          >                        ret	    nc
 131+ 9EE0                                      CheckPointRange UBnKzlo, UBnKzsgn, MissileZPos, MissileZSgn
 131+ 9EE0 3A B6 81    >                        ld      a,(MissileZPos)                      ; check X Coord
 131+ 9EE3 2A 18 C0    >                        ld      hl,(UBnKzsgn)
 131+ 9EE6 AE          >                        xor     (hl)
 131+ 9EE7 E6 80       >                        and     SignOnly8Bit
 131+ 9EE9 2A 16 C0    >                        ld      hl,(UBnKzlo)
 131+ 9EEC ED 5B B6 81 >                        ld      de,(MissileZPos)
 131+ 9EF0 28 0F       >                        jr      z,.SignsDiffernt
 131+ 9EF2 A7          >.XSame:                 and     a
 131+ 9EF3 ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
 131+ 9EF5             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
 131+ 9EF5 F2 03 9F    >                        jp		p, .CheckDiff
 131+ 9EF8             >                        NegHL
 131+ 9EF8 AF          >                    xor a
 131+ 9EF9 95          >                    sub l
 131+ 9EFA 6F          >                    ld l,a
 131+ 9EFB 9F          >                    sbc a,a
 131+ 9EFC 94          >                    sub h
 131+ 9EFD 67          >                    ld h,a
 131+ 9EFE C3 03 9F    >                        jp      .CheckDiff
 131+ 9F01 19          >.SignsDiffernt:         add     hl,de
 131+ 9F02             >                        ReturnIfNegative                            ; if we overflowed then return
 131+ 9F02 F8          >                        ret     m
 131+ 9F03 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 131+ 9F04             >                        ReturnIfANotZero
 131+ 9F04 A7          >                        and     a
 131+ 9F05 C0          >                        ret     nz
 131+ 9F06 7D          >                        ld      a,l
 131+ 9F07 A7          >                        and     a
 131+ 9F08             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
 131+ 9F08 21 D1 81    >                        ld      hl,CurrentMissileBlastRange
 131+ 9F0B BE          >                        cp      (hl)
 131+ 9F0C D0          >                        ret	    nc
 132+ 9F0D CD E4 C5                             call    ShipMissileBlast                    ; Ship hit by missile blast
 133+ 9F10 C9                                   ret                                         ; we are done
 134+ 9F11              ;...................................................................
 135+ 9F11 3A 2B C0     CheckIfBlastHitUs:      ld      a,(UBnKMissileBlastRange)
 136+ 9F14 4F                                   ld      c,a
 137+ 9F15 C3 1C 9F                             jp      MissileHitUsCheckPos
 138+ 9F18              ;...................................................................
 139+ 9F18 3A 2D C0     CheckIfMissileHitUs:    ld      a,(UBnKMissileDetonateRange)
 140+ 9F1B 4F                                   ld      c,a
 141+ 9F1C              ;...................................................................
 142+ 9F1C 2A 10 C0     MissileHitUsCheckPos:   ld      hl, (UBnKxlo)
 143+ 9F1F                                      ZeroA
 143+ 9F1F AF          >                        xor a
 144+ 9F20 B4                                   or      h
 145+ 9F21                                      ClearCarryFlag
 145+ 9F21 B7          >                        or a
 146+ 9F22                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 146+ 9F22 C0          >                        ret     nz
 147+ 9F23 7D                                   ld      a,l
 148+ 9F24                                      ReturnIfAGTENusng    c                      ; return no carry if x far
 148+ 9F24 B9          >                        cp    c
 148+ 9F25 D0          >                        ret	 nc
 149+ 9F26 2A 13 C0     .CheckY:                ld      hl,(UBnKylo)
 150+ 9F29                                      ZeroA
 150+ 9F29 AF          >                        xor a
 151+ 9F2A B5                                   or      l
 152+ 9F2B                                      ClearCarryFlag
 152+ 9F2B B7          >                        or a
 153+ 9F2C                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 153+ 9F2C C0          >                        ret     nz
 154+ 9F2D 7D                                   ld      a,l
 155+ 9F2E                                      ReturnIfAGTENusng    c                      ; return no carry if y far
 155+ 9F2E B9          >                        cp    c
 155+ 9F2F D0          >                        ret	 nc
 156+ 9F30 2A 16 C0     .CheckZ:                ld      hl,(UBnKzlo)
 157+ 9F33                                      ZeroA
 157+ 9F33 AF          >                        xor a
 158+ 9F34 B5                                   or      l
 159+ 9F35                                      ClearCarryFlag
 159+ 9F35 B7          >                        or a
 160+ 9F36                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 160+ 9F36 C0          >                        ret     nz
 161+ 9F37 7D                                   ld      a,l
 162+ 9F38                                      ReturnIfAGTENusng    c                      ; return no carry if z far
 162+ 9F38 B9          >                        cp    c
 162+ 9F39 D0          >                        ret	 nc
 163+ 9F3A              .ItsAHit:               SetCarryFlag
 163+ 9F3A 37          >                        scf
 163+ 9F3B                                              ; So must have hit
 164+ 9F3B C9                                   ret
 165+ 9F3C
 166+ 9F3C              SelectMissileBank:      MACRO
 167+ 9F3C ~                                    ld      a,iyh
 168+ 9F3C ~                                    MMUSelectUnivBankA
 169+ 9F3C                                      ENDM
 170+ 9F3C
 171+ 9F3C              SelectTargetBank:       MACRO
 172+ 9F3C ~                                    ld      a,iyl
 173+ 9F3C ~                                    MMUSelectUnivBankA
 174+ 9F3C                                      ENDM
 175+ 9F3C
 176+ 9F3C              ;...................................................................
 177+ 9F3C              ; ... Copy of target data for missile calcs etc
 178+ 9F3C 00           TacticsTargetShip       DB 0
 179+ 9F3D 00 00 00     TacticsUBnKx            DS 3
 180+ 9F40 00 00 00     TacticsUBnKy            DS 3
 181+ 9F43 00 00 00     TacticsUBnKz            DS 3
 182+ 9F46 00 00        TacticsDotProduct       DS 2
 183+ 9F48 00 00        TacticsDotProduct2      DS 2
 184+ 9F4A 00 00        TacticsDotProduct3      DS 2
 185+ 9F4C
 186+ 9F4C              ;... Now the tactics if current ship is the missile, when we enter this SelectedUniverseSlot holds slot of missile
 187+ 9F4C              MissileAI:              ;break
 188+ 9F4C                                      JumpIfMemTrue UBnKMissleHitToProcess, .ProcessMissileHit
 188+ 9F4C 3A 34 C0    >                        ld      a,(UBnKMissleHitToProcess)
 188+ 9F4F A7          >                        and     a
 188+ 9F50 CA D4 A0    >                        jp      z, .ProcessMissileHit
 189+ 9F53              .CheckForECM:           JumpIfMemNotZero ECMCountDown,.ECMIsActive  ; If ECM is running then kill the missile
 189+ 9F53 3A 23 80    >                        ld  a,(ECMCountDown)
 189+ 9F56 A7          >                        and a
 189+ 9F57 C2 DD A0    >                        jp  nz,.ECMIsActive
 190+ 9F5A              .IsMissileHostile:      IsShipFriendly                              ; is missle attacking us?
 190+ 9F5A 3A 32 C3    >                        ld      a,(ShipNewBitsAddr)
 190+ 9F5D E6 FB       >                        and     ShipNotHostile                  ; mask so we only have hostile bit
 191+ 9F5F                                      JumpIfZero .MissileTargetingShip            ; Missile is friendly then z is set else targetting us
 191+ 9F5F CA 76 9F    >                        jp	z,.MissileTargetingShip
 192+ 9F62 2A 10 C0     .MissileTargetingPlayer:ld      hl, (UBnKxlo)                       ; check if missile in range of us
 193+ 9F65 3A 2D C0                             ld      a,(UBnKMissileDetonateRange)
 194+ 9F68 4F                                   ld      c,a                                 ; c holds detonation range
 195+ 9F69 CD 1C 9F                             call    MissileHitUsCheckPos
 196+ 9F6C D2 75 9F     .MissileNotHitUsYet:    jp      nc, .UpdateTargetingUsPos
 197+ 9F6F CD 27 9E     .MissleHitUs:           call    PlayerHitByMissile
 198+ 9F72 C3 DD A0                             jp      .ECMIsActive                        ; we use ECM logic to destroy missile which eqneues is
 199+ 9F75 C9           .UpdateTargetingUsPos:  ret                        ;;;;;;***********TODO
 200+ 9F76              ;--- Missile is targeting other ship
 201+ 9F76 3A D6 81     .MissileTargetingShip:  ld      a,(SelectedUniverseSlot)            ; we will use this quite a lot with next bank switching
 202+ 9F79 C6 46        .SaveMissileBank:       add     a,BankUNIVDATA0                     ; pre calculate add to optimise
 203+ 9F7B FD 67                                ld      iyh,a
 204+ 9F7D 3A 35 C0     .SaveTargetBank:        ld      a,(UBnKMissileTarget)               ; target will be used a lot too
 205+ 9F80 C6 46                                add     a,BankUNIVDATA0                     ; pre calculate add to optimise
 206+ 9F82 FD 6F                                ld      iyl,a                               ; save target
 207+ 9F84              .IsMissleTargetGone:    JumpIfSlotAEmpty    .ECMIsActive            ; if the target was blown up then detonate
 207+ 9F84 21 E4 81    >                        ld      hl,UniverseSlotList
 207+ 9F87 ED 31       >                        add     hl,a
 207+ 9F89 7E          >                        ld      a,(hl)
 207+ 9F8A 3C          >                        inc     a
 207+ 9F8B CA DD A0    >                        jp      z,.ECMIsActive    ; if slot was ff inc would make it 0
 207+ 9F8E 3D          >                        dec     a           ; get original value back for later
 208+ 9F8F              ;... Note we don't have to check for impact as we already have a loop doing that
 209+ 9F8F              .SelectTargetShip:      SelectTargetBank
 209+ 9F8F FD 7D       >                        ld      a,iyl
 209+ 9F91             >                        MMUSelectUnivBankA
 209+ 9F91 ED 92 56    >                     nextreg UniverseMMU,       a
 210+ 9F94 3A 43 C0     .IsShipExploding:       ld      a,(UBnkaiatkecm)                    ; check exploding status
 211+ 9F97 E6 20                                and     ShipExploding                       ; as if exploding then the missile will also explode
 212+ 9F99 28 08                                jr      z,.UpdateTargetingShipX
 213+ 9F9B              .ShipIsExploding:       SelectMissileBank                           ; get missile back into memory
 213+ 9F9B FD 7C       >                        ld      a,iyh
 213+ 9F9D             >                        MMUSelectUnivBankA
 213+ 9F9D ED 92 56    >                     nextreg UniverseMMU,       a
 214+ 9FA0 C3 DD A0                             jp      .ECMIsActive
 215+ 9FA3              ;--- At this point we already have the target banked in ready for calculating vector
 216+ 9FA3              .UpdateTargetingShipX
 216+ 9FA3 ED 5B 10 C0   ld      de,(UBnKxlo)                        ; get target ship X
 217+ 9FA7 3A 12 C0                             ld      a,(UBnKxsgn)                        ; and flip sign so we have missile - target
 218+ 9FAA                                      FlipSignBitA
 218+ 9FAA EE 80       >                        xor     SignOnly8Bit
 219+ 9FAC 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 220+ 9FAD                                      SelectMissileBank
 220+ 9FAD FD 7C       >                        ld      a,iyh
 220+ 9FAF             >                        MMUSelectUnivBankA
 220+ 9FAF ED 92 56    >                     nextreg UniverseMMU,       a
 221+ 9FB2 2A 10 C0                             ld      hl,(UBnKxlo)                        ; get missile x
 222+ 9FB5 3A 12 C0                             ld      a,(UBnKxsgn)                        ; get missile x sign
 223+ 9FB8 47                                   ld      b,a
 224+ 9FB9 CD B1 8F                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 225+ 9FBC 22 E7 A0                             ld      (TacticsVectorX),hl
 226+ 9FBF 32 E9 A0                             ld      (TacticsVectorX+2),a
 227+ 9FC2              .UpdateTargetingShipY:  SelectTargetBank
 227+ 9FC2 FD 7D       >                        ld      a,iyl
 227+ 9FC4             >                        MMUSelectUnivBankA
 227+ 9FC4 ED 92 56    >                     nextreg UniverseMMU,       a
 228+ 9FC7 ED 5B 13 C0                          ld      de,(UBnKylo)                        ; get target ship X
 229+ 9FCB 3A 15 C0                             ld      a,(UBnKysgn)
 230+ 9FCE                                      FlipSignBitA
 230+ 9FCE EE 80       >                        xor     SignOnly8Bit
 231+ 9FD0 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 232+ 9FD1                                      SelectMissileBank
 232+ 9FD1 FD 7C       >                        ld      a,iyh
 232+ 9FD3             >                        MMUSelectUnivBankA
 232+ 9FD3 ED 92 56    >                     nextreg UniverseMMU,       a
 233+ 9FD6 2A 13 C0                             ld      hl,(UBnKylo)                        ; get missile x
 234+ 9FD9 3A 15 C0                             ld      a,(UBnKysgn)                        ; get missile x sign
 235+ 9FDC 47                                   ld      b,a
 236+ 9FDD CD B1 8F                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 237+ 9FE0 22 EA A0                             ld      (TacticsVectorY),hl
 238+ 9FE3 32 EC A0                             ld      (TacticsVectorY+2),a
 239+ 9FE6              .UpdateTargetingShipZ:  SelectTargetBank
 239+ 9FE6 FD 7D       >                        ld      a,iyl
 239+ 9FE8             >                        MMUSelectUnivBankA
 239+ 9FE8 ED 92 56    >                     nextreg UniverseMMU,       a
 240+ 9FEB ED 5B 16 C0                          ld      de,(UBnKzlo)                        ; get target ship X
 241+ 9FEF 3A 18 C0                             ld      a,(UBnKzsgn)
 242+ 9FF2                                      FlipSignBitA
 242+ 9FF2 EE 80       >                        xor     SignOnly8Bit
 243+ 9FF4 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 244+ 9FF5                                      SelectMissileBank
 244+ 9FF5 FD 7C       >                        ld      a,iyh
 244+ 9FF7             >                        MMUSelectUnivBankA
 244+ 9FF7 ED 92 56    >                     nextreg UniverseMMU,       a
 245+ 9FFA 2A 16 C0                             ld      hl,(UBnKzlo)                        ; get missile x
 246+ 9FFD 3A 18 C0                             ld      a,(UBnKzsgn)                        ; get missile x sign
 247+ A000 47                                   ld      b,a
 248+ A001 CD B1 8F                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 249+ A004 22 ED A0                             ld      (TacticsVectorZ),hl
 250+ A007 32 EF A0                             ld      (TacticsVectorZ+2),a
 251+ A00A              ; by here missile in in memory and TacticsVector now holds distance
 252+ A00A              ; if or ABS all high bytes is <> 0
 253+ A00A 2A E8 A0     .CheckDistance:         ld      hl,(TacticsVectorX+1)              ; test if high bytes are set
 254+ A00D 7C                                   ld      a,h                                ; .
 255+ A00E ED 5B EB A0                          ld      de,(TacticsVectorY+1)              ; .
 256+ A012 B2                                   or      d                                  ; .
 257+ A013 ED 4B EE A0                          ld      bc,(TacticsVectorZ+1)              ; .
 258+ A017 B0                                   or      b                                  ; .
 259+ A018                                      ClearSignBitA                              ; .
 259+ A018 E6 7F       >                        and     SignMask8Bit
 260+ A01A                                      JumpIfNotZero       .FarAway               ; .
 260+ A01A C2 29 A0    >                        jp	nz,.FarAway
 261+ A01D B5                                   or      l                                  ; test for low byte bit 7
 262+ A01E B3                                   or      e                                  ; .
 263+ A01F B1                                   or      c                                  ; .
 264+ A020                                      JumpIfNotZero       .FarAway               ; .
 264+ A020 C2 29 A0    >                        jp	nz,.FarAway
 265+ A023              ; If we get here its close enough to detonate
 266+ A023 3A 35 C0     .CloseMissileExplode:   ld      a,(UBnKMissileTarget)
 267+ A026 C3 28 9E                             jp      MissileHitShipA
 268+ A029              ;   *far away ** TODO need to set memory read write on page 0
 269+ A029              .FarAway:               SelectTargetBank
 269+ A029 FD 7D       >                        ld      a,iyl
 269+ A02B             >                        MMUSelectUnivBankA
 269+ A02B ED 92 56    >                     nextreg UniverseMMU,       a
 270+ A02E                                      JumpIfMemFalse      UBnKECMFitted, .NoECM                   ; if target has ECM and enough energy to use it
 270+ A02E 3A 49 C0    >                        ld      a,(UBnKECMFitted)
 270+ A031 A7          >                        and     a
 270+ A032 C2 4F A0    >                        jp      nz, .NoECM
 271+ A035                                      JumpIfMemLTNusng    UBnKEnergy,    ECMCounterMax, .NoECM    ; .
 271+ A035 3A 47 C0    >                        ld      a,(UBnKEnergy)
 271+ A038 FE 80       >                        cp      ECMCounterMax
 271+ A03A DA 4F A0    >                        jp	  c,.NoECM
 272+ A03D                                      JumpIfMemIsNotZero   ECMCountDown, .NoECM                ; . ECM is already active
 272+ A03D 3A 23 80    >                        ld      a,(ECMCountDown)
 272+ A040 A7          >                        and     a
 272+ A041 C2 4F A0    >                        jp	    nz,.NoECM
 273+ A044 3A 06 80     .TestIfUsingECM:        ld      a,(RandomSeed2)                                             ; if random < 16
 274+ A047                                      JumpIfAGTENusng     16, .UpdateMissilePos                           ;   then fire ECM destroying missile
 274+ A047 FE 10       >                        cp     16
 274+ A049 D2 4F A0    >                        jp		nc,.UpdateMissilePos
 275+ A04C              ;. If we get here then target is still paged in to fire ECM
 276+ A04C C3 66 C5     .ZeroPageFireECM:       jp      FireECM                                             ; with an implicit return
 277+ A04F              ;                       implicit ret
 278+ A04F              ;. If we get here then target is still paged in with no ECM
 279+ A04F              .NoECM:
 280+ A04F                                    ;;;         ** can do 16 bit maths as we can take teh view that once a object/space station is 24 bit value away then
 281+ A04F                                    ;;;         ** targeting computer looses track and destructs missiles
 282+ A04F              ;--- Now we can actually update the missile AI
 283+ A04F              .UpdateMissilePos:      ;break
 284+ A04F                                      SelectMissileBank
 284+ A04F FD 7C       >                        ld      a,iyh
 284+ A051             >                        MMUSelectUnivBankA
 284+ A051 ED 92 56    >                     nextreg UniverseMMU,       a
 285+ A054                                      ;call    ReduceTacticVectors                 ; get vectors down to 5 bit + sign bit
 286+ A054 CD 58 A1                             call    NormalizeTactics                    ; Normalise vector
 287+ A057 CD F9 A0                             call    XX12EquTacticsDotNosev              ; SA = nose . XX15
 288+ A05A 32 46 9F                             ld      (TacticsDotProduct),a               ; CNT = A (high byte of dot product)
 289+ A05D                                      FlipSignMem TacticsVectorX+1                ; negate vector in XX15 so it points opposite direction
 289+ A05D 3A E8 A0    >                        ld  a,(TacticsVectorX+1)
 289+ A060 EE 80       >                        xor SignOnly8Bit
 289+ A062 32 E8 A0    >                        ld  (TacticsVectorX+1),a
 290+ A065                                      FlipSignMem TacticsVectorY+1                ; .
 290+ A065 3A EB A0    >                        ld  a,(TacticsVectorY+1)
 290+ A068 EE 80       >                        xor SignOnly8Bit
 290+ A06A 32 EB A0    >                        ld  (TacticsVectorY+1),a
 291+ A06D                                      FlipSignMem TacticsVectorZ+1                ; .
 291+ A06D 3A EE A0    >                        ld  a,(TacticsVectorZ+1)
 291+ A070 EE 80       >                        xor SignOnly8Bit
 291+ A072 32 EE A0    >                        ld  (TacticsVectorZ+1),a
 292+ A075 3A 13 81                             ld      a,(varS)
 293+ A078 EE 80                                xor SignOnly8Bit
 294+ A07A 32 47 9F                             ld      (TacticsDotProduct+1),a             ;  negate value of CNT so +ve if facing or -ve if facing same way
 295+ A07D CD 4C A1                             call    XX12EquTacticsDotRoofv              ;  AX = roofv.XX15
 296+ A080 32 48 9F                             ld      (TacticsDotProduct2),a              ;  SaveA
 297+ A083 3A 13 81                             ld      a,(varS)                            ;  .
 298+ A086 32 49 9F                             ld      (TacticsDotProduct2+1),a            ;  .
 299+ A089                                      FlipSignBitA                                ; use the flip version of dot product
 299+ A089 EE 80       >                        xor     SignOnly8Bit
 300+ A08B 06 03                                ld      b,3                                 ; and pitch to maxium 3
 301+ A08D B0                                   or      b                                   ; .
 302+ A08E 32 39 C0                             ld      (UBnKRotZCounter),a                 ; .
 303+ A091 3A 38 C0                             ld      a,(UBnKRotXCounter)                 ; a = abs roll counter
 304+ A094                                      ClearSignBitA                               ;
 304+ A094 E6 7F       >                        and     SignMask8Bit
 305+ A096                                      JumpIfAGTENusng 16, .AlreadyRolling
 305+ A096 FE 10       >                        cp     16
 305+ A098 D2 B2 A0    >                        jp		nc,.AlreadyRolling
 306+ A09B CD 52 A1                             call    XX12EquTacticsDotSidev              ; get dot product of xx15. sidev
 307+ A09E 32 48 9F                             ld      (TacticsDotProduct2),a              ; This will be positive if XX15 is pointing in the same direction
 308+ A0A1 3A 13 81                             ld      a,(varS)                            ;
 309+ A0A4 32 49 9F                             ld      (TacticsDotProduct2+1),a            ;
 310+ A0A7                                      SetSignBitA                                   ; Set the ship's roll counter to 5, with the sign set to positive if the pitch counter and dot product have different signs
 310+ A0A7 F6 80       >                        or      SignOnly8Bit
 311+ A0A9 21 39 C0                             ld      hl,UBnKRotZCounter
 312+ A0AC AE                                   xor     (hl)
 313+ A0AD F6 05                                or      5
 314+ A0AF 32 38 C0                             ld      (UBnKRotXCounter),a
 315+ A0B2 3A 47 9F     .AlreadyRolling:        ld      a,(TacticsDotProduct+1)             ; Fetch the dot product, and if it's negative jump to
 316+ A0B5                                      JumpIfAIsNotZero    .SlowDown               ; slow down routine
 316+ A0B5 A7          >                        and     a
 316+ A0B6 C2 C7 A0    >                        jp	    nz,.SlowDown
 317+ A0B9 3A 46 9F                             ld      a,(TacticsDotProduct)
 318+ A0BC                                      JumpIfALTNusng  22, .SlowDown
 318+ A0BC FE 16       >                        cp      22
 318+ A0BE DA C7 A0    >                        jp		c, .SlowDown
 319+ A0C1 3E 03        .Accellerate:           ld      a,3                                 ; full accelleration
 320+ A0C3 32 37 C0                             ld      (UBnKAccel),a
 321+ A0C6 C9                                   ret
 322+ A0C7 3A 48 9F     .SlowDown:              ld      a,(TacticsDotProduct2)              ; this is already abs so no need to do abs
 323+ A0CA                                      ReturnIfALTNusng  18                        ; If A < 18 then the ship is way off the XX15 vector, so return without slowing down, as it still has quite a bit ofturning to do to get on course
 323+ A0CA FE 12       >                        cp    18
 323+ A0CC D8          >                        ret	 c
 324+ A0CD 3E FE                                ld      a,$FE                               ; A = -3 as missiles are more nimble and can brake more quickly
 325+ A0CF 32 37 C0                             ld      (UBnKAccel),a
 326+ A0D2 C9                                   ret
 327+ A0D3                                      ;
 328+ A0D3                                      ;           ships pitch counter = calculate teh shipt pitch counter (jsr nroll)
 329+ A0D3                                      ;           get roll counter from ship byte 29 (value = abs(byte 29 * 2) ,e. shift left
 330+ A0D3                                      ;           if roll counter < 32
 331+ A0D3                                      ;               AX = sidev . XX15
 332+ A0D3                                      ;               A = A xor pitch counter sigh
 333+ A0D3                                      ;               byte 29 = calcualte nroll to get ship pitch counter into
 334+ A0D3                                      ;           get back CNT
 335+ A0D3                                      ;           if CNT >= 0 AND CNT < CNT2 ** how is CNT2 set up?
 336+ A0D3                                      ;             then
 337+ A0D3                                      ;               Accelleration (byte 28) = 3
 338+ A0D3                                      ;               return
 339+ A0D3                                      ;           A = ABS(CNT)
 340+ A0D3                                      ;          if |CNT| >=  18
 341+ A0D3                                      ;            then
 342+ A0D3                                      ;              ship accelleration = -2
 343+ A0D3 C9                                   ret
 344+ A0D4
 345+ A0D4
 346+ A0D4
 347+ A0D4
 348+ A0D4                                      ;
 349+ A0D4                                      ; else
 350+ A0D4                                      ;   *close enough for a detoniation
 351+ A0D4                                      ;   if target is a space station, set space station to trigger ECM and destroy missile (note that compromised station will not trigger ECM)
 352+ A0D4                                      ;   process missile hit object
 353+ A0D4                                      ;   work out if blast hit anythign else including us
 354+ A0D4
 355+ A0D4 3A E2 81     .ProcessMissileHit:     ld      a,(CurrentMissileCheck)
 356+ A0D7                                      ReturnIfAGTENusng UniverseSlotListSize  ; need to wait another loop
 356+ A0D7 FE 0C       >                        cp    UniverseSlotListSize
 356+ A0D9 D0          >                        ret	 nc
 357+ A0DA C3 41 9E     .ActivateNewExplosion:  jp  CheckMissileBlastInit               ; initialise
 358+ A0DD                                      ; DUMMY RET get a free return by using jp
 359+ A0DD CD F5 C5     .ECMIsActive:           call    UnivExplodeShip                 ; ECM detonates missile
 360+ A0E0                                      SetMemTrue  UBnKMissleHitToProcess      ; Enque an explosion
 360+ A0E0 AF          >                        xor     a
 360+ A0E1 32 34 C0    >                        ld      (UBnKMissleHitToProcess),a
 361+ A0E4 C3 D4 A0                             jp      .ProcessMissileHit              ; lets see if we can enqueue now
 362+ A0E7                                      ; DUMMY RET get a free return as activenewexplosion does jp to init with a free ret
 363+ A0E7
 364+ A0E7
 365+ A0E7 00 00 00     TacticsVectorX:         DS 3
 366+ A0EA 00 00 00     TacticsVectorY:         DS 3
 367+ A0ED 00 00 00     TacticsVectorZ:         DS 3
 368+ A0F0 00 00        TacticsNormX:           DS 2
 369+ A0F2 00 00        TacticsNormY:           DS 2
 370+ A0F4 00 00        TacticsNormZ:           DS 2
 371+ A0F6 01           TacticsNormalisedX      DB  1                                   ; normalised version, NormXYZ still hold sign bits
 372+ A0F7 01           TacticsNormalisedY      DB  1                                   ;
 373+ A0F8 01           TacticsNormalisedZ      DB  1                                   ;
 374+ A0F9              ; Tested OK
 375+ A0F9              ;LL21
 376+ A0F9
 377+ A0F9
 378+ A0F9 21 59 C0     XX12EquTacticsDotNosev: ld      hl,UBnkTransmatNosevX
 379+ A0FC              XX12EquTacticsDotHL:    N0equN1byN2div256 varT, (hl), (TacticsVectorX)       ; T = (hl) * regXX15fx /256
 379+ A0FC 3A E7 A0    >                        ld      a,(TacticsVectorX)                        ;
 379+ A0FF 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 379+ A100 7E          >                        ld      a,(hl)                        ; A = XX16 element
 379+ A101 57          >                        ld      d,a
 379+ A102 ED 30       >                        mul
 379+ A104 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 379+ A105 32 2F 81    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 380+ A108 23                                   inc     hl                                  ; move to sign byte
 381+ A109              .XX12CalcXSign:         AequN1xorN2 UBnkXScaledSign,(hl)             ;
 381+ A109 3A 93 C0    >                        ld      a,(UBnkXScaledSign)
 381+ A10C AE          >                        xor     (hl)
 382+ A10D 32 13 81                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 383+ A110 23                                   inc     hl
 384+ A111              .XX12CalcY:              N0equN1byN2div256 varQ, (hl),(TacticsVectorY)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 384+ A111 3A EA A0    >                        ld      a,(TacticsVectorY)                        ;
 384+ A114 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 384+ A115 7E          >                        ld      a,(hl)                        ; A = XX16 element
 384+ A116 57          >                        ld      d,a
 384+ A117 ED 30       >                        mul
 384+ A119 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 384+ A11A 32 11 81    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 385+ A11D                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 385+ A11D 3A 2F 81    >                        ld       a,(varT)
 385+ A120 32 12 81    >                        ld       (varR),a
 386+ A123 23                                   inc     hl
 387+ A124                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 387+ A124 3A 95 C0    >                        ld      a,(UBnkYScaledSign)
 387+ A127 AE          >                        xor     (hl)
 388+ A128              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 389+ A128 E5           .STequSRplusAQ           push    hl
 390+ A129 CD 3A 9A                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 391+ A12C E1                                   pop     hl
 392+ A12D 32 2F 81                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 393+ A130 23                                   inc     hl
 394+ A131              .XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(TacticsVectorZ)       ; Q = |sidev_z| * z_lo / 256
 394+ A131 3A ED A0    >                        ld      a,(TacticsVectorZ)                        ;
 394+ A134 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 394+ A135 7E          >                        ld      a,(hl)                        ; A = XX16 element
 394+ A136 57          >                        ld      d,a
 394+ A137 ED 30       >                        mul
 394+ A139 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 394+ A13A 32 11 81    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 395+ A13D                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 395+ A13D 3A 2F 81    >                        ld       a,(varT)
 395+ A140 32 12 81    >                        ld       (varR),a
 396+ A143 23                                   inc     hl
 397+ A144                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 397+ A144 3A 97 C0    >                        ld      a,(UBnkZScaledSign)
 397+ A147 AE          >                        xor     (hl)
 398+ A148              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 399+ A148 CD 3A 9A                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 400+ A14B              ; Now we exit with A = result S = Sign
 401+ A14B C9                                   ret
 402+ A14C
 403+ A14C 21 53 C0     XX12EquTacticsDotRoofv: ld      hl,UBnkTransmatRoofvX
 404+ A14F C3 FC A0                             jp      XX12EquTacticsDotHL
 405+ A152
 406+ A152 21 4D C0     XX12EquTacticsDotSidev: ld      hl,UBnkTransmatSidevX
 407+ A155 C3 FC A0                             jp      XX12EquTacticsDotHL
 408+ A158
 409+ A158              ;-- Now its scaled we can normalise
 410+ A158 2A E7 A0     NormalizeTactics:       ld      hl, (TacticsVectorX)        ; pull XX15 into registers
 411+ A15B ED 5B EA A0                          ld      de, (TacticsVectorY)        ; .
 412+ A15F ED 4B ED A0                          ld      bc, (TacticsVectorZ)        ; .
 413+ A163 7C           .ScaleLoop:             ld      a,h
 414+ A164 B2                                   or      d
 415+ A165 B0                                   or      b
 416+ A166 28 0F                                jr      z,.DoneScaling
 417+ A168                                      ShiftHLRight1
 417+ A168 CB 3C       >			   srl h
 417+ A16A CB 1D       >			   rr  l
 418+ A16C                                      ShiftDERight1
 418+ A16C CB 3A       >			   srl d
 418+ A16E CB 1B       >			   rr  e
 419+ A170                                      ShiftBCRight1
 419+ A170 CB 38       >			   srl b
 419+ A172 CB 19       >			   rr  c
 420+ A174 C3 63 A1                             jp      .ScaleLoop
 421+ A177 E5 D5 C5     .DoneScaling:           push    hl,,de,,bc
 422+ A17A 53                                   ld      d,e                         ; hl = y ^ 2
 423+ A17B ED 30                                mul     de                          ; .
 424+ A17D EB                                   ex      de,hl                       ; .
 425+ A17E 53                                   ld      d,e                         ; de = x ^ 2
 426+ A17F ED 30                                mul     de                          ; .
 427+ A181 19                                   add     hl,de                       ; hl = y^ 2 + x ^ 2
 428+ A182 51                                   ld      d,c
 429+ A183 59                                   ld      e,c
 430+ A184 ED 30                                mul     de
 431+ A186 19                                   add     hl,de                       ; hl =  y^ 2 + x ^ 2 + z ^ 2
 432+ A187 CD C1 93                             call    asm_sqrt                    ; hl = sqrt (de) = sqrt (x ^ 2 + y ^ 2 + z ^ 2)
 433+ A18A                                      ; add in logic if h is low then use lower bytes for all
 434+ A18A 7D                                   ld      a,l
 435+ A18B FD 67                                ld      iyh,a
 436+ A18D 57                                   ld      d,a
 437+ A18E C1                                   pop     bc
 438+ A18F 79                                   ld      a,c
 439+ A190 CD 1C 97                             call    AequAdivDmul96Unsg
 440+ A193 32 ED A0                             ld      (TacticsVectorZ),a
 441+ A196 D1                                   pop     de
 442+ A197 7B                                   ld      a,e
 443+ A198 FD 54                                ld      d,iyh
 444+ A19A CD 1C 97                             call    AequAdivDmul96Unsg
 445+ A19D 32 EA A0                             ld      (TacticsVectorY),a
 446+ A1A0 E1                                   pop     hl
 447+ A1A1 7D                                   ld      a,l
 448+ A1A2 FD 54                                ld      d,iyh
 449+ A1A4 CD 1C 97                             call    AequAdivDmul96Unsg
 450+ A1A7 32 E7 A0                             ld      (TacticsVectorX),a
 451+ A1AA                                      SignBitOnlyMem TacticsVectorX+1
 451+ A1AA 3A E8 A0    >                        ld      a, (TacticsVectorX+1)
 451+ A1AD E6 80       >                        and     SignOnly8Bit
 451+ A1AF 32 E8 A0    >                        ld      (TacticsVectorX+1),a
 452+ A1B2                                      SignBitOnlyMem TacticsVectorY+1
 452+ A1B2 3A EB A0    >                        ld      a, (TacticsVectorY+1)
 452+ A1B5 E6 80       >                        and     SignOnly8Bit
 452+ A1B7 32 EB A0    >                        ld      (TacticsVectorY+1),a
 453+ A1BA                                      SignBitOnlyMem TacticsVectorZ+1
 453+ A1BA 3A EE A0    >                        ld      a, (TacticsVectorZ+1)
 453+ A1BD E6 80       >                        and     SignOnly8Bit
 453+ A1BF 32 EE A0    >                        ld      (TacticsVectorZ+1),a
 454+ A1C2 C9                                   ret
 455+ A1C3
 456+ A1C3
 457+ A1C3              ;TODOcall    TacticsPosMinusTarget              ; calculate vector to target
 458+ A1C3              ;;TODO                        check range
 459+ A1C3              ;;TODO                        if target has ecm then 7% chance it will active, reduce target energy (i.e. damage)
 460+ A1C3              ;;TODO                        else
 461+ A1C3              ;;TODO                            normalise teh vector for direction
 462+ A1C3              ;;TODO                            dot product = missile nosev . normalised vector
 463+ A1C3              ;;TODO                            cnt = high byte of dot product, cnf is +ve if facing similar direction
 464+ A1C3              ;;TODO                            negate normalised vector so its opposite product
 465+ A1C3              ;;TODO                            invert sign of cnt
 466+ A1C3              ;;TODO                            AK = roovf . XX15
 467+ A1C3              ;;TODO                            Ships pitch = call nroll to caulate teh valu eof ships pitch counter
 468+ A1C3              ;;TODO                            if pitch * 2 < 32 then
 469+ A1C3              ;;TODO                                ax = sidev . xx15
 470+ A1C3              ;;TODO                                    a = x xort current pitch direction
 471+ A1C3              ;;TODO                                    shipts roll = nroll
 472+ A1C3              ;;TODO                            do accelleration at TA6 (    https://www.bbcelite.com/disc/flight/subroutine/tactics_part_7_of_7.html#ta20
 473+ A1C3
 474+ A1C3              ;;TODO
 475+ A1C3              ;;TODO
 476+ A1C3              ;;TODO
 477+ A1C3              ;;TODOget the targetted ship inbto bank
 478+ A1C3              ;;TODO                        check range as per player
 479+ A1C3              ;;TODO                        handle explosion enc
 480+ A1C3
 481+ A1C3              ;                    else see how close it is to target
 482+ A1C3              ;                         if close to target
 483+ A1C3              ;                            then explodes destroy missile
 484+ A1C3              ;                                 if ship is not station
 485+ A1C3              ;                                    then set up signal target ship hit my missile flag
 486+ A1C3              ;                                         set blastcheckcounter to slotlist length  (12)
 487+ A1C3              ;                                 end if
 488+ A1C3              ;                                 if we are in range of missle blast
 489+ A1C3              ;                                    cause blast damage to our ship (this will signal death is needed)
 490+ A1C3              ;                                 end if
 491+ A1C3              ;                                 return
 492+ A1C3              ;                         end if
 493+ A1C3              ;                 end if
 494+ A1C3              ;         end if
 495+ A1C3
 496+ A1C3
 497+ A1C3                          ;            else if ship is angry at us
 498+ A1C3              ;
 499+ A1C3
 500+ A1C3              ; Part 1 - if type is missile and enquing a missile blast and slot free
 501+ A1C3              ;             then enqueue missile blast details
 502+ A1C3              ;                  mark as exploded
 503+ A1C3              ;                  remove missile from universe slot list
 504+ A1C3
 505+ A1C3              ; TODO, how to we deal with scared ships, e.g. if angry and no guns or missiles then should be considered scared or if hull mass < say 25% of our ship
 506+ A1C3              ; also for future ship vs ship combat
 507+ A1C3              ;... Tactics........................................................................
 508+ A1C3              ;.PART 1
 509+ A1C3              ; if shiphitbymissleflag <> false
 510+ A1C3              ;    then dec blast check counter
 511+ A1C3              ;         if blast check counter = 0
 512+ A1C3              ;            then set shiphitbymissileflag to FF
 513+ A1C3              ;    else if SetShipHitByMissileFlag = current ship number
 514+ A1C3              ;            then cause damage to ship
 515+ A1C3              ;         else if ship is in range and ship is not a station
 516+ A1C3              ;                  then cause blast damage to ship
 517+ A1C3              ;         if destroyed
 518+ A1C3              ;            then explode ship
 519+ A1C3              ;                 return
 520+ A1C3              ; end if
 521+ A1C3              ; if ship is a missle (I think we allow missile on missle action)
 522+ A1C3              ;    then if ecm is active
 523+ A1C3              ;            then destroy missile and return
 524+ A1C3              ;            else if ship is angry at us
 525+ A1C3              ;                    then if ship is close to us
 526+ A1C3              ;                            then explodes causing damage to our ship
 527+ A1C3              ;                                 enque missile blast
 528+ A1C3              ;                                 destroy missile
 529+ A1C3              ;                                 set blastcheckcounter to slotlist length
 530+ A1C3              ;                                 set shiphitbymissileflag to FE (general blast)
 531+ A1C3              ;                                 return
 532+ A1C3              ;                            else jump to part 3 to do updates
 533+ A1C3              ;                         end if
 534+ A1C3              ;                    else see how close it is to target
 535+ A1C3              ;                         if close to target
 536+ A1C3              ;                            then
 537+ A1C3              ;                                 enque missile blast
 538+ A1C3              ;                                 destroy missile
 539+ A1C3              ;                                 if ship is not station
 540+ A1C3              ;                                    then set up signal target ship hit my missile flag
 541+ A1C3              ;                                         set blastcheckcounter to slotlist length  (12)
 542+ A1C3              ;                                 end if
 543+ A1C3              ;                                 if we are in range of missle blast
 544+ A1C3              ;                                    cause blast damage to our ship (this will signal death is needed)
 545+ A1C3              ;                                 end if
 546+ A1C3              ;                                 return
 547+ A1C3              ;                         end if
 548+ A1C3              ;                 end if
 549+ A1C3              ;         end if
 550+ A1C3              ;.PART 2A ** adding in a collision logic
 551+ A1C3              ;    else if ship is close to another ship
 552+ A1C3              ;            then if docking flag set and other ship is space station or we are space station and other ship has docking flag
 553+ A1C3              ;                    then if aligned correctly
 554+ A1C3              ;                         then remove ship as docked
 555+ A1C3              ;                              return
 556+ A1C3              ;         else
 557+ A1C3              ;            call collision route and determine daamage based on sizes and bounce vectors
 558+ A1C3              ;            return
 559+ A1C3              ;.PART 2 ** Need to check if ship has AI flag
 560+ A1C3              ;    else if not hostile
 561+ A1C3              ;            then if not docking or station not present
 562+ A1C3              ;                    then calculate vector to planet
 563+ A1C3              ;                         jump to part 7
 564+ A1C3              ;                    else calculate verctor to docking slot
 565+ A1C3              ;                         call caluclate vector to docking slot (DOCKIT)
 566+ A1C3              ;                         jump to part 7
 567+ A1C3              ;                 end if
 568+ A1C3              ;            else case ship type
 569+ A1C3              ;                      >>escape pod>> point at planet and jump to step 7
 570+ A1C3              ;                      >>space station>> if hostile
 571+ A1C3              ;                                           then if cop counter < 7 and 6.2% chance
 572+ A1C3              ;                                                   then spawm hostile cop
 573+ A1C3              ;                                                end if
 574+ A1C3              ;                                           else
 575+ A1C3              ;                                                if 0.8% change and transporter count = 0
 576+ A1C3              ;                                                   then if 50% chance
 577+ A1C3              ;                                                           then spawn transporter
 578+ A1C3              ;                                                           else spawn shuttle
 579+ A1C3              ;                                                        end if
 580+ A1C3              ;                                                end if
 581+ A1C3              ;                                        end if
 582+ A1C3              ;                                        return
 583+ A1C3              ;                      >>targoid and no mother ship in slot list>> set random drift
 584+ A1C3              ;                                                                  return
 585+ A1C3              ;                      >>if bounty hunter flag>> if ship not hostile
 586+ A1C3              ;                                                   then if trader flag clear or 20% chance
 587+ A1C3              ;                                                        then if fugitive or offender
 588+ A1C3              ;                                                                then set hosile
 589+ A1C3              ;                                                end if
 590+ A1C3              ;                      >>Carrier and hanger slots > 0 >> if 22% chance (code to be added later)
 591+ A1C3              ;                                         then spawn agressive hosting one of types carried
 592+ A1C3              ;                                              reduce ships in hanger by 1
 593+ A1C3              ;                                              return
 594+ A1C3              ;                      >>rock hermit>> if 22% chance
 595+ A1C3              ;                                         then spawn agressive hosting one of Sidewinder, Mamba, Krait, Adder or Gecko
 596+ A1C3              ;                                              return
 597+ A1C3              ;                      >>pirate and in safe zone>> stop pirate being hostile by removing agressive and hostileflags
 598+ A1C3              ;                 end case
 599+ A1C3              ;         end if
 600+ A1C3              ;         recharge ship energy by recharge factor (TODO as a config item on ship type but by default 1)
 601+ A1C3              ; .PART 3
 602+ A1C3              ;         calulcate dot product of ship nose to us
 603+ A1C3              ; .PART 4
 604+ A1C3              ;         2.5% change ship rill roll a noticable amount
 605+ A1C3              ;         if ship has > 50% energy jump to part 6
 606+ A1C3              ;         if ship > 1/8th energy jump to part 5
 607+ A1C3              ;         if random 10% chance (i.e. ship < 1/8 energy and bails out)
 608+ A1C3              ;            then launch escape pod
 609+ A1C3              ;                 set AI to null
 610+ A1C3              ;                 set random pitch and roll
 611+ A1C3              ;                 set accelleation to 0
 612+ A1C3              ;         end if
 613+ A1C3              ; .PART 5
 614+ A1C3              ;         if ship does not have any missilesor ECM is firing to part 6
 615+ A1C3              ;            then if random > threshold for ship type (TODO as a config item on ship type)
 616+ A1C3              ;                    then if tharoid ; note this means thargoids are sensitve to ECM
 617+ A1C3              ;                            then launch thargon
 618+ A1C3              ;                            else spawn angry missle under ship
 619+ A1C3              ;                         end if
 620+ A1C3              ;                 end if
 621+ A1C3              ;            else return
 622+ A1C3              ;         end if
 623+ A1C3              ; .PART 6
 624+ A1C3              ;         if ship is not pointing at us from dot product ( < 160 , also > -32)
 625+ A1C3              ;            then jump to part 7
 626+ A1C3              ;            else if ship is pointing directly at us ( < 163 i.e. > -35)
 627+ A1C3              ;                    then fire laser at us (which reduces energy)
 628+ A1C3              ;                         cause laser damage to our ship (this will signal death is needed)
 629+ A1C3              ;                         decellerate by half as ship has lock on
 630+ A1C3              ;                         return
 631+ A1C3              ;                    else fire laser into space (which reduces energy)
 632+ A1C3              ;                 end if
 633+ A1C3              ;         end if
 634+ A1C3              ; .PART 7#
 635+ A1C3              ;        if ship is a msile targetting us
 636+ A1C3              ;           then ship turns towards us some more
 637+ A1C3              ;           else if z hi > =  3 or ( x hi or y hi > 1) , i.e. ship is far away
 638+ A1C3              ;                    then do random wiht bit 7 set
 639+ A1C3              ;                         if random < AI flag
 640+ A1C3              ;                            then   ship turned towards us
 641+ A1C3              ;                            else   ship turns away from us
 642+ A1C3              ;                         end if
 643+ A1C3              ;                end if
 644+ A1C3              ;           end if
 645+ A1C3              ;           calculate new roll, pitch and accelleration based on new targe vector
 646+ A1C3
 647+ A1C3
 648+ A1C3              ;        determine ship direction based on agression and type
 649+ A1C3              ;        set pitch and roll coutners
 650+ A1C3              ;        adjust speed depleding on relationship to us
 651+ A1C3              ; .PART 8 - new
 652+ A1C3              ;        if ship has ECM, another ECM is not active and missile targeted at it
 653+ A1C3              ;           if ship has enery of ECM energey cost + 1/8th total
 654+ A1C3              ;              if chance 25%
 655+ A1C3              ;                 then fire ECM
 656+ A1C3              ;
 657+ A1C3
 658+ A1C3
 659+ A1C3
 660+ A1C3
 661+ A1C3 2A E7 A0     ReduceTacticVectors:ld      hl, (TacticsVectorX)        ; pull XX15 into registers
 662+ A1C6 ED 5B EA A0                      ld      de, (TacticsVectorY)        ; .
 663+ A1CA ED 4B ED A0                      ld      bc, (TacticsVectorZ)        ; .
 664+ A1CE 3A E9 A0                         ld      a,(TacticsVectorX+2)        ; .
 665+ A1D1 FD 67                            ld      iyh,a                       ; iyh = X sign
 666+ A1D3 3A EC A0                         ld      a,(TacticsVectorY+2)        ; .
 667+ A1D6 FD 6F                            ld      iyl,a                       ; iyl = Y sign
 668+ A1D8 3A EF A0                         ld      a,(TacticsVectorZ+2)        ; .
 669+ A1DB DD 67                            ld      ixh,a                       ; ixh = z sign
 670+ A1DD FD B4        .ScaleLoop:         or      iyh                         ; now check if upper has value
 671+ A1DF FD B5                            or      iyl                         ; .
 672+ A1E1                                  ClearSignBitA                       ;  exluding sign bit
 672+ A1E1 E6 7F       >                        and     SignMask8Bit
 673+ A1E3 28 21                            jr      z,.DoneScaling              ; and exit loop if upper byte is only sign component
 674+ A1E5 FD 7C        .ScaledDownBy2:     ld      a,iyh
 675+ A1E7 CB 2F                            sra     a
 676+ A1E9 FD 67                            ld      iyh,a                       ; actually we can keep sign bit so just sr then rr
 677+ A1EB CB 1C                            rr      h                           ; Deal with X
 678+ A1ED CB 1D                            rr      l                           ;
 679+ A1EF FD 7D                            ld      a,iyl
 680+ A1F1 CB 2F                            sra     a                           ; actually we can keep sign bit so just sr then rr
 681+ A1F3 FD 6F                            ld      iyl,a
 682+ A1F5 CB 1A                            rr      d                           ; Deal with Y
 683+ A1F7 CB 1B                            rr      e                           ;
 684+ A1F9 DD 7D                            ld      a, ixl                      ; actually we can keep sign bit so just sr then rr
 685+ A1FB CB 2F                            sra     a
 686+ A1FD DD 6F                            ld      ixl,a
 687+ A1FF CB 18                            rr      b                           ; Deal with Z
 688+ A201 CB 19                            rr      c                           ;
 689+ A203 C3 DD A1                         jp      .ScaleLoop
 690+ A206 7C           .DoneScaling:       ld      a,h
 691+ A207 B2                               or      d
 692+ A208 B0                               or      b
 693+ A209                                  SignBitOnlyA                        ; check if new sign bit has a value rotated in,
 693+ A209 E6 80       >                        and     SignOnly8Bit
 694+ A20B 28 0C                            jr      z,.OKToNormalise
 695+ A20D              .ShiftTo15Bit:      ShiftHLRight1                       ; one last shift to 15 bit we don't need
 695+ A20D CB 3C       >			   srl h
 695+ A20F CB 1D       >			   rr  l
 696+ A211                                  ShiftDERight1                       ; to do sign bytes
 696+ A211 CB 3A       >			   srl d
 696+ A213 CB 1B       >			   rr  e
 697+ A215                                  ShiftBCRight1                       ; as value must be 0
 697+ A215 CB 38       >			   srl b
 697+ A217 CB 19       >			   rr  c
 698+ A219 7C           .OKToNormalise:     ld      a,h                         ; iyh now can only hold sign
 699+ A21A FD B4                            or      iyh                         ; so by the end of here
 700+ A21C 67                               ld      h,a                         ;   hl = x
 701+ A21D 7A                               ld      a,d                         ;   de = y
 702+ A21E FD B5                            or      iyl                         ;   bc = z
 703+ A220 57                               ld      d,a                         ; all scaled to 15 bit + sign
 704+ A221 78                               ld      a,b                         ;
 705+ A222 DD B4                            or      ixh                         ;
 706+ A224 47                               ld      b,a                         ;
 707+ A225 22 F0 A0                         ld      (TacticsNormX),hl
 708+ A228 22 F2 A0                         ld      (TacticsNormY),hl
 709+ A22B 22 F4 A0                         ld      (TacticsNormZ),hl
 710+ A22E C9                               ret
 711+ A22F                                 ; ***SIgn bits*** need to be in byte 3
 712+ A22F
# file closed: ./GameEngine/Tactics.asm
 611  A22F                  INCLUDE "./Hardware/drive_access.asm"
# file opened: ./Hardware/drive_access.asm
   1+ A22F              M_GETSETDRV             equ $89
   2+ A22F              F_OPEN                  equ $9a
   3+ A22F              F_CLOSE                 equ $9b
   4+ A22F              F_READ                  equ $9d
   5+ A22F              F_WRITE                 equ $9e
   6+ A22F              F_SEEK                  equ $9f
   7+ A22F
   8+ A22F              FA_READ                 equ $01
   9+ A22F              FA_APPEND               equ $06
  10+ A22F              FA_OVERWRITE            equ $0C
  11+ A22F              DISK_FILEMAP            equ $85
  12+ A22F              DISK_STRMSTART          equ $86
  13+ A22F              DISK_STRMEND            equ $87
  14+ A22F
  15+ A22F              ESX_MODE_READ           equ $01
  16+ A22F              ESX_MODE_OPEN_EXIST     equ $00
  17+ A22F
  18+ A22F              FILEMAP_SIZE            equ $20
  19+ A22F              FILEMAP_BLOCK_SIZE      equ $06
  20+ A22F
  21+ A22F              ; Success 1 = default drive, carry reset
  22+ A22F              ; Failure HL = -1 , carry set, errno set
  23+ A22F F5 C5 D5 E5  GetDefaultDrive:        push	af,,bc,,de,,hl,,ix
  23+ A233 DD E5
  24+ A235 AF                                   xor	    a	; a = 0 means get default drive into A
  25+ A236 CF                                   rst	    $08
  26+ A237 89                                   db	    M_GETSETDRV
  27+ A238 32 CD A2                             ld	    (DefaultDrive),a
  28+ A23B DD E1 E1 D1                          pop		af,,bc,,de,,hl,,ix
  28+ A23F C1 F1
  29+ A241 C9                                   ret
  30+ A242
  31+ A242
  32+ A242              ; Disable NMI Multi face - needed for streaming
  33+ A242              ;disable_multiface:      ld      bc,REGISTER_NUMBER_PORT
  34+ A242              ;                        ld      a,PERIPHERAL_2_REGISTER
  35+ A242              ;                        out     (c),a
  36+ A242              ;                        inc     b
  37+ A242              ;                        in      a,(c)
  38+ A242              ;                        and     %11110111
  39+ A242              ;                        out     (c),a
  40+ A242              ;                        ret
  41+ A242              ;
  42+ A242              ;enable_multiface:       ld      bc,REGISTER_NUMBER_PORT
  43+ A242              ;                        ld      a,PERIPHERAL_2_REGISTER
  44+ A242              ;                        out     (c),a
  45+ A242              ;                        inc     b
  46+ A242              ;                        in      a,(c)
  47+ A242              ;                        or      %00001000
  48+ A242              ;                        out     (c),a
  49+ A242              ;                        ret
  50+ A242              ;
  51+ A242              ; *******************************************************************************************************
  52+ A242              ;	Function:	Open a file read for reading/writing
  53+ A242              ;	In:		ix = filename
  54+ A242              ;			b  = Open filemode
  55+ A242              ;	ret		a  = handle, 0 on error
  56+ A242              ;   fOpen_read_exists takes defaults and sets up default drive
  57+ A242              ; *******************************************************************************************************
  58+ A242              ;fOpen_read_exists:      ld      b,ESX_MODE_READ | ESX_MODE_OPEN_EXIST
  59+ A242              ;                        call    GetDefaultDrive
  60+ A242              ;                        call    fOpen
  61+ A242              ;                        call    fRefill_map
  62+ A242              ;                        jp      c,.RefilMapError
  63+ A242              ;                        jp      z,.RefilMapEmpty
  64+ A242              ;                        ret
  65+ A242              ;.RefilMapError:         jp      .RefilMapError
  66+ A242              ;.RefilMapEmpty:         jp      .RefilMapEmpty
  67+ A242              ;
  68+ A242              ;
  69+ A242
  70+ A242 3A CD A2     fOpen:	                ld	    a,(DefaultDrive); default drive must be called before we start
  71+ A245 CF                                   rst	    $08
  72+ A246 9A                                   db	    F_OPEN
  73+ A247 32 CE A2                             ld      (FileHandle),a  ; make a local copy of last file opened
  74+ A24A 38 01                                jr      c,.FileOpenError
  75+ A24C C9                                   ret
  76+ A24D C3 4D A2     .FileOpenError:         jp      .FileOpenError
  77+ A250
  78+ A250              ; *******************************************************************************************************
  79+ A250              ;	Function	refills the buffer map with card addresses for the file
  80+ A250              ;	In:		a  = file handle (if calling fRefill_mapA)
  81+ A250              ;           ix = address of filemap_buffer (if calling fRefill_mapA)
  82+ A250              ;           de = filemap size (which should equal 4 in our case)
  83+ A250              ;			bc  = amount to read
  84+ A250              ;	ret:		carry set = error
  85+ A250              ;               zero set  = no data loaded so still error
  86+ A250              ;   you can use fRefill_map to pull default valuess
  87+ A250              ; *******************************************************************************************************
  88+ A250              ;fRefill_map:            ld      a,(FileHandle)
  89+ A250              ;                        ld      ix,FilemapBuffer
  90+ A250              ;                        ld      de,FILEMAP_SIZE
  91+ A250              ;fRefill_mapA:           rst     $08
  92+ A250              ;                        db      DISK_FILEMAP
  93+ A250              ;.SetFlags:              ld      (CardFlags),a                   ; set up adressing mode flags  bit 0=card id (0 or 1) bit 1=0 for byte addressing, 1 for block addressing
  94+ A250              ;.CheckForEntries:       ld      (FilemapBufferLast),hl          ; save last entry address +2
  95+ A250              ;                        ld      de,FilemapBuffer
  96+ A250              ;                        sbc     hl,de                           ; hl = number of entries found
  97+ A250              ;                        ld      a,$ff
  98+ A250              ;                        ret
  99+ A250              ;
 100+ A250              ;read_stream_block:      ld      hl,(FilemapBufferPointer)
 101+ A250              ;                        ldBCDEatHL                              ; load the disk address
 102+ A250              ;                        push    bc                              ; into IXDE
 103+ A250              ;                        pop     ix                              ; now IXDE = card address
 104+ A250              ;                        ldBCatHL                                ; bc = number of blocks to be read
 105+ A250              ;                        ld      (FilemapBlockCount),bc
 106+ A250              ;                        ret
 107+ A250              ; Start up stream of data
 108+ A250              ; If successful, the call returns with:
 109+ A250              ; B=protocol: 0=SD/MMC, 1=IDE,  C=data port
 110+ A250              ; NOTE: On the Next, these values will always be: B=0 C=$EB
 111+ A250              ;fStream_start:          ld      hl,FilemapBuffer                ; set to head of filemap
 112+ A250              ;                        ld      (FilemapBufferPointer),hl       ; .
 113+ A250              ;                        ZeroA
 114+ A250              ;                        ld      (FilereadsPerformed),a
 115+ A250              ;                        call    read_stream_block
 116+ A250              ;                        ld      a,(CardFlags)                   ; get card flags back
 117+ A250              ;                        rst     $08
 118+ A250              ;                        DB      DISK_STRMSTART                  ; start up stream
 119+ A250              ;                        ld      (FileStreamPort),bc             ; save port information (even through it will not change on a next)
 120+ A250              ;                        ret
 121+ A250
 122+ A250              ; *******************************************************************************************************
 123+ A250              ;	Function	stream in a block of data to memory
 124+ A250              ;	In:		ix  = address to read into
 125+ A250              ;			bc  = amount to read
 126+ A250              ;	ret:		carry set = error
 127+ A250              ; *******************************************************************************************************
 128+ A250              ;fStream_block:          ld      ix,FileBuffer
 129+ A250              ;                        ld      a,(CardFlags)
 130+ A250              ;                        ld      bc,(FileStreamPort)
 131+ A250              ;                        ld      hl,FileBuffer
 132+ A250              ;                        ld      (FilemapBufferPointer),hl
 133+ A250              ;.StreamLoop:            ld      b,0
 134+ A250              ;                        ld      a,(TargetSize+1)
 135+ A250              ;                        cp      2
 136+ A250              ;                        jr      c,.stream_partial_block
 137+ A250              ;.StreamFullBlock:       inir                                ; read 256 bytes to hl
 138+ A250              ;                        inir                                ; read 256 bytes to hl+256
 139+ A250              ;                        dec     b                           ; update byte count
 140+ A250              ;                        dec     b                           ; .
 141+ A250              ;                        ld      hl,TargetSize               ; 512 bytes read
 142+ A250              ;                        ld      de,512
 143+ A250              ;                        ClearCarryFlag
 144+ A250              ;                        sbc     hl,de
 145+ A250              ;                        ld      (TargetSize),hl
 146+ A250              ;                        ld      a,(FileStreamPort+1)        ; get the protocol
 147+ A250              ;                        and     a
 148+ A250              ;                        jr      nz,.protocol_ide            ; we arn't using but for compatibility
 149+ A250              ;.protocol_sdmmc:        in      a,(c)                       ; for sd and mmc, read in the 2 byte CRC
 150+ A250              ;                        nop                                 ; as the max performance of the interface is
 151+ A250              ;                        nop                                 ; 16T per byte, no ops pad out operation
 152+ A250              ;                        in      a,(c)
 153+ A250              ;                        nop
 154+ A250              ;                        nop
 155+ A250              ;.wait_for_next_block:   in      a,(c)                       ; if wait token is not FF then we are read
 156+ A250              ;                        cp      $FF
 157+ A250              ;                        jr      z,.wait_for_next_block
 158+ A250              ;                        cp      $FE                         ; if not and its not FE its a fault
 159+ A250              ;                        jr      nz,.token_error
 160+ A250              ;.protocol_ide:          ld      de,(TargetSize)             ; Any more bytes required
 161+ A250              ;                        ld      a,d
 162+ A250              ;                        or      e
 163+ A250              ;                        jr      z,.streaming_complete
 164+ A250              ;                        ret
 165+ A250              ;.stream_partial_block:  and     a                           ; is block at least 256 bytes?
 166+ A250              ;                        jr      z,.under256_bytes
 167+ A250              ;                        inir                                ; get 256 bytes
 168+ A250              ;.under256_bytes:        ld      b,e
 169+ A250              ;                        inc     b
 170+ A250              ;                        dec     b
 171+ A250              ;                        jr      z,.streaming_complete
 172+ A250              ;                        inir
 173+ A250              ;.streaming_complete:    ld      a,(CardFlags)
 174+ A250              ;                        rst     $08
 175+ A250              ;                        DB      DISK_STRMEND
 176+ A250              ;                        ld      a,(FileHandle)
 177+ A250              ;                        call    fClose
 178+ A250              ;                        ret
 179+ A250              ;.token_error:           jp      .token_error
 180+ A250              ;
 181+ A250              ;
 182+ A250              ;fOpenReadFile:          ld      (TargetSize),bc
 183+ A250              ;                        call    disable_multiface
 184+ A250              ;                        call    fOpen_read_exists
 185+ A250              ;.SetupStream:           call    fStream_start
 186+ A250              ;                        jr      c,.FileStreamError
 187+ A250              ;                        ret
 188+ A250              ;
 189+ A250              ;.FileStreamError:       jp      .FileStreamError
 190+ A250              ;
 191+ A250              ; *******************************************************************************************************
 192+ A250              ;	Function	Read bytes from the open file
 193+ A250              ;	In:		ix  = address to read into
 194+ A250              ;			bc  = amount to read
 195+ A250              ;	ret:		carry set = error
 196+ A250              ; *******************************************************************************************************
 197+ A250 B7           fRead:                  or   	a             ; is it zero?
 198+ A251 C8                                   ret  	z             ; if so return
 199+ A252 E5                                   push    hl
 200+ A253 DD E5 E1                             ld      hl,ix    	 ; load ix into hl and save hl for later
 201+ A256 CF                                   rst	    $08
 202+ A257 9D                                   db	    F_READ
 203+ A258 E1                                   pop	    hl
 204+ A259 C9                                   ret
 205+ A25A
 206+ A25A              ; *******************************************************************************************************
 207+ A25A              ;	Function	Write bytes to the open file
 208+ A25A              ;	In:		ix  = address to read from
 209+ A25A              ;			bc  = amount to write
 210+ A25A              ;	ret:		carry set = error
 211+ A25A              ; *******************************************************************************************************
 212+ A25A B7           fWrite:                 or   	a             ; is it zero?
 213+ A25B C8                                   ret  	z             ; if so return
 214+ A25C E5                                   push	hl
 215+ A25D DD E5 E1                             ld      hl,ix
 216+ A260 CF                                   rst	    $08
 217+ A261 9E                                   db	    F_WRITE
 218+ A262 E1                                   pop	    hl
 219+ A263 C9                                   ret
 220+ A264
 221+ A264              ; *******************************************************************************************************
 222+ A264              ;	Function:	Close open file
 223+ A264              ;	In:		a  = handle
 224+ A264              ;	ret		a  = handle, 0 on error
 225+ A264              ; *******************************************************************************************************
 226+ A264 B7           fClose:		            or   	a             ; is it zero?
 227+ A265 C8                                   ret  	z             ; if so return
 228+ A266 CF                                   rst	    $08
 229+ A267 9B                                   db	    F_CLOSE
 230+ A268 C9                                   ret
 231+ A269
 232+ A269              ;fSeekHome:              push    bc,,de,,hl,,ix
 233+ A269              ;                        ld      bc,0
 234+ A269              ;                        ld      de,0
 235+ A269              ;                        ld      l,0
 236+ A269              ;                        call    fSeek
 237+ A269              ;                        pop     bc,,de,,hl,,ix
 238+ A269              ;                        ret
 239+ A269              ;
 240+ A269              ;fSeekForward256:        push    bc,,de,,hl,,ix
 241+ A269              ;                        ld      bc,0
 242+ A269              ;                        ld      de,256
 243+ A269              ;                        ld      l,1
 244+ A269              ;                        call    fSeek
 245+ A269              ;                        pop     bc,,de,,hl,,ix
 246+ A269              ;                        ret
 247+ A269
 248+ A269              ; *******************************************************************************************************
 249+ A269              ;	Function	Read bytes from the open file
 250+ A269              ;	In:		a   = file handle
 251+ A269              ;			L   = Seek mode (0=start, 1=rel, 2=-rel)
 252+ A269              ;			BCDE = bytes to seek
 253+ A269              ;	ret:		BCDE = file pos from start
 254+ A269              ; *******************************************************************************************************
 255+ A269 DD E5 E5     fSeek:                  push	ix,,hl
 256+ A26C CF                                   rst	    $08
 257+ A26D 9F                                   db	    F_SEEK
 258+ A26E E1 DD E1                             pop	    ix,,hl
 259+ A271 C9                                   ret
 260+ A272
 261+ A272              ; *******************************************************************************************************
 262+ A272              ; Init the file system
 263+ A272              ; *******************************************************************************************************
 264+ A272 CD 2F A2     InitFileSystem:         call    GetDefaultDrive
 265+ A275 C9                                   ret
 266+ A276
 267+ A276              ; *******************************************************************************************************
 268+ A276              ; Function:	Load a whole file into memory	(confirmed working on real machine)
 269+ A276              ; In:		hl = file data pointer
 270+ A276              ;		    ix = address to load to
 271+ A276              ;           bc = filelength
 272+ A276              ; *******************************************************************************************************
 273+ A276 CD 2F A2     FileLoad:	            call    GetDefaultDrive
 274+ A279 C5 D5 F5                             push	bc,,de,,af
 275+ A27C                                      ; get file size
 276+ A27C C5 DD E5                             push	bc,,ix			; store size, load address,
 277+ A27F E5 DD E1                             ld      ix,hl
 278+ A282 06 01                                ld      b,FA_READ		; mode open for reading
 279+ A284 CD 42 A2                             call    fOpen
 280+ A287 38 17                                jr	    c,.error_opening; carry set? so there was an error opening and A=error code
 281+ A289 FE 00                                cp	    0				; was file handle 0?
 282+ A28B 28 13                                jr	    z,.error_opening; of so there was an error opening.
 283+ A28D DD E1 C1                             pop     bc,,ix          ; get load address back and size back
 284+ A290 F5                                   push	af				; remember handle
 285+ A291 CD 50 A2                             call	fRead			; read data from A to address IX of length BC
 286+ A294 38 0C                                jr	    c,.error_reading
 287+ A296 F1                                   pop	    af			    ; get handle back
 288+ A297 CD 64 A2                             call	fClose			; close file
 289+ A29A 38 07                                jr	    c,.error_closing
 290+ A29C F1 D1 C1                             pop     bc,,de,,af      ; normal exit
 291+ A29F C9                                   ret
 292+ A2A0              ;
 293+ A2A0              ; On error, display error code an lock up so we can see it
 294+ A2A0              ;
 295+ A2A0 DD E1        .error_opening:         pop	ix
 296+ A2A2 C1           .error_reading:		    pop	bc	; don't pop a, need error code
 297+ A2A3
 298+ A2A3              .error_closing:
 299+ A2A3 C1           .NormalError:  	        pop	bc	; don't pop into A, return with error code
 300+ A2A4 D1                                   pop	de
 301+ A2A5 C1                                   pop	bc
 302+ A2A6 C9                                   ret
 303+ A2A7
 304+ A2A7              ; *******************************************************************************************************
 305+ A2A7              ; Function:	Save a whole file into memory	(confirmed working on real machine)
 306+ A2A7              ; In:		hl = file name
 307+ A2A7              ;		    ix = address to save from
 308+ A2A7              ;		    bc = size
 309+ A2A7              ; *******************************************************************************************************
 310+ A2A7 CD 2F A2     FileSave:	            call    GetDefaultDrive		; need to do this each time?!?!?
 311+ A2AA C5 DD E5                             push	bc,,ix   			; store size& save address
 312+ A2AD E5 DD E1                             ld      ix,hl               ; get name into ix
 313+ A2B0 06 0C                                ld      b,FA_OVERWRITE		; mode open for writing
 314+ A2B2 CD 42 A2                             call    fOpen
 315+ A2B5 38 12                                jr	    c,.error_opening	; carry set? so there was an error opening and A=error code
 316+ A2B7 FE 00                                cp	    0			        ; was file handle 0?
 317+ A2B9 28 0E                                jr	    z,.error_opening	; of so there was an error opening.
 318+ A2BB DD E1 C1                             pop	    bc,,ix			    ; get lenght and save address back
 319+ A2BE F5                                   push	af			        ; remember handle
 320+ A2BF CD 5A A2                             call	fWrite			    ; read data from A to address IX of length BC
 321+ A2C2 38 04                                jr	c,.error
 322+ A2C4 F1                                   pop	af			            ; get handle back
 323+ A2C5 CD 64 A2                             call	fClose			    ; close file
 324+ A2C8 C9           .error:                 ret
 325+ A2C9              ;
 326+ A2C9              ; On error, display error code an lock up so we can see it
 327+ A2C9              ;
 328+ A2C9 DD E1 C1     .error_opening:         pop	bc,,ix                  ; don't pop a, need error code
 329+ A2CC C9                                   ret
 330+ A2CD
 331+ A2CD 00           DefaultDrive:	        DB	0
 332+ A2CE 00           FileHandle:             DB  0
 333+ A2CF 00           CardFlags               DB  0
 334+ A2D0 00 00        TargetSize              DW  0
 335+ A2D2 00 00        FileStreamPort          DW  0
 336+ A2D4 00 00 00...  FileBuffer              DS  512                     ; block of data
 337+ A4D4 00           FilereadsPerformed      DB  0
 338+ A4D5 00 00        FilemapBlockCount       DW  0
 339+ A4D7 00 00        FilemapBufferPointer    DW  0
 340+ A4D9 00 00        FilemapBufferLast       DW  0
 341+ A4DB 00 00 00...  FilemapBuffer           DS  FILEMAP_BLOCK_SIZE * FILEMAP_SIZE        ; expecting 60 to be overkill as most should be 1
 342+ A59B
# file closed: ./Hardware/drive_access.asm
 612  A59B
 613  A59B                  INCLUDE "./Menus/common_menu.asm"
# file opened: ./Menus/common_menu.asm
   1+ A59B 43 4F 4D 4D  txt_commander 			DB "COMMANDER",0
   1+ A59F 41 4E 44 45
   1+ A5A3 52 00
   2+ A5A5 49 4E 56 45  txt_inventory 			DB "INVENTORY",0
   2+ A5A9 4E 54 4F 52
   2+ A5AD 59 00
   3+ A5AF 50 72 65 73  txt_present_system		DB "Present System   :",0
   3+ A5B3 65 6E 74 20
   3+ A5B7 53 79 73 74
   3+ A5BB 65 6D 20 20
   3+ A5BF 20 3A 00
   4+ A5C2 48 79 70 65  txt_hyperspace_system	DB "Hyperspace System:",0
   4+ A5C6 72 73 70 61
   4+ A5CA 63 65 20 53
   4+ A5CE 79 73 74 65
   4+ A5D2 6D 3A 00
   5+ A5D5 43 6F 6E 64  txt_condition			DB "Condition   :",0
   5+ A5D9 69 74 69 6F
   5+ A5DD 6E 20 20 20
   5+ A5E1 3A 00
   6+ A5E3 46 75 65 6C  txt_fuel				DB "Fuel        :",0
   6+ A5E7 20 20 20 20
   6+ A5EB 20 20 20 20
   6+ A5EF 3A 00
   7+ A5F1 43 61 73 68  txt_cash				DB "Cash        :",0
   7+ A5F5 20 20 20 20
   7+ A5F9 20 20 20 20
   7+ A5FD 3A 00
   8+ A5FF 4C 65 67 61  txt_legal_status		DB "Legal Status:",0
   8+ A603 6C 20 53 74
   8+ A607 61 74 75 73
   8+ A60B 3A 00
   9+ A60D 52 61 74 69  txt_rating				DB "Rating      :",0
   9+ A611 6E 67 20 20
   9+ A615 20 20 20 20
   9+ A619 3A 00
  10+ A61B 45 51 55 49  txt_equipment			DB "EQUIPMENT:",0
  10+ A61F 50 4D 45 4E
  10+ A623 54 3A 00
  11+ A626
  12+ A626 30 30 2E 30  txt_fuel_level			DB "00.0 Light Years",0
  12+ A62A 20 4C 69 67
  12+ A62E 68 74 20 59
  12+ A632 65 61 72 73
  12+ A636 00
  13+ A637 58 58 58 58  txt_cash_amount			DB "XXXXXXXXXX",0
  13+ A63B 58 58 58 58
  13+ A63F 58 58 00
  14+ A642 2E           txt_cash_decimal        DB "."
  15+ A643 58 20 43 72  txt_cash_fraction       DB "X Cr",0
  15+ A647 00
  16+ A648
  17+ A648              txt_status_colour		equ $FF
  18+ A648
  19+ A648              print_boiler_text_l2:
  20+ A648              ; ">print_boilder_text hl = text structure, b = message count"
  21+ A648              BoilerTextLoop:
  22+ A648 C5           	push		bc			; Save Message Count loop value
  23+ A649 4E           	ld			c,(hl)		; Get Row into b
  24+ A64A 23           	inc			hl
  25+ A64B 46           	ld			b,(hl)		; Get Col into b
  26+ A64C 23           	inc			hl
  27+ A64D 5E           	ld			e,(hl)		; Get text address Lo into E
  28+ A64E 23           	inc			hl
  29+ A64F 56           	ld			d,(hl)		; Get text address Hi into E
  30+ A650 23           	inc			hl
  31+ A651 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  32+ A652 EB           	ex			de,hl		; now hl = address of text data
  33+ A653 1E FF        	ld			e,txt_status_colour
  34+ A655                  MMUSelectLayer2
  34+ A655 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ A659 CD C8 E0     	call		l1_print_at
  36+ A65C E1           	pop			hl
  37+ A65D C1           	pop			bc
  38+ A65E 10 E8        	djnz		BoilerTextLoop
  39+ A660 C9           	ret
  40+ A661
  41+ A661
  42+ A661              print_boiler_text:
  43+ A661              ; ">print_boilder_text hl = text structure, b = message count"
  44+ A661              .BoilerTextLoop:
  45+ A661 C5           	push		bc			; Save Message Count loop value
  46+ A662 4E           	ld			c,(hl)		; Get Row into b
  47+ A663 23           	inc			hl
  48+ A664 46           	ld			b,(hl)		; Get Col into b
  49+ A665 23           	inc			hl
  50+ A666 5E           	ld			e,(hl)		; Get text address Lo into E
  51+ A667 23           	inc			hl
  52+ A668 56           	ld			d,(hl)		; Get text address Hi into E
  53+ A669 23           	inc			hl
  54+ A66A E5           	push		hl			; Save present HL to stack as this is the address for the next message
  55+ A66B EB           	ex			de,hl		; now hl = address of text data
  56+ A66C 1E FF        	ld			e,txt_status_colour
  57+ A66E C5           	push		bc
  58+ A66F D1           	pop			de
  59+ A670 CD C8 E0     	call		l1_print_at
  60+ A673 E1           	pop			hl
  61+ A674 C1           	pop			bc
  62+ A675 10 EA        	djnz		.BoilerTextLoop
  63+ A677 C9           	ret
  64+ A678
  65+ A678              GetFuelLevel:           INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++A678
   2++A678
   3++A678 3A 7B 86     	ld		a,(Fuel)
   4++A67B 11 26 A6     	ld		de,txt_fuel_level
   5++A67E 0E 9C        	ld	c, -100
   6++A680 CD 8A A6     	call	.Num1
   7++A683 0E F6        	ld	c,-10
   8++A685 CD 8A A6     	call	.Num1
   9++A688 0E FF        	ld	c,-1
  10++A68A              .Num1:
  11++A68A 06 2F        	ld	b,'0'-1
  12++A68C              .Num2:
  13++A68C 04           	inc		b
  14++A68D 81           	add		a,c
  15++A68E 38 FC        	jr		c,.Num2
  16++A690 91           	sub 	c
  17++A691 C5           	push	bc
  18++A692 F5           	push	af
  19++A693 79           	ld		a,c
  20++A694 FE FF        	cp		-1
  21++A696 CC 9F A6     	call	z,.InsertDot
  22++A699 78           	ld		a,b
  23++A69A 12           	ld		(de),a
  24++A69B 13           	inc		de
  25++A69C F1           	pop		af
  26++A69D C1           	pop		bc
  27++A69E C9           	ret
  28++A69F              .InsertDot:
  29++A69F 3E 2E        	ld		a,'.'
  30++A6A1 12           	ld		(de),a
  31++A6A2 13           	inc		de
  32++A6A3 C9           	ret
  33++A6A4
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
  66+ A6A4
  67+ A6A4 2A 77 86     GetCash:                ld      hl,(Cash)
  68+ A6A7 EB                                   ex      de,hl
  69+ A6A8 DD 2A 79 86                          ld      ix,(Cash+2)
  70+ A6AC FD 21 37 A6                          ld		iy,txt_cash_amount
  71+ A6B0 CD CD 98                             call 	DispDEIXtoIY	; This will write out with 0 termination after last digit
  72+ A6B3 FD 7E 00     .ShiftDecimalDigit:     ld		a,(IY+0)				;Push last digit to post decimal
  73+ A6B6 32 43 A6                             ld		(txt_cash_fraction),a
  74+ A6B9 21 38 A6     .UpdateInteger:         ld		hl,txt_cash_amount+1	; Now was there only 1 digit
  75+ A6BC 7E                                   ld		a,(hl)					; if so we leave it alone so its "0.0"
  76+ A6BD FE 00                                cp		0
  77+ A6BF C8                                   ret		z
  78+ A6C0 FD 36 00 00                          ld		(IY),0					; Else we erase last digit as it went to fraction
  79+ A6C4 C9                                   ret
  80+ A6C5
# file closed: ./Menus/common_menu.asm
 614  A6C5
 615  A6C5              EndOfNonBanked:
 616  A6C5                  DISPLAY "Non Banked Code Ends At", EndOfNonBanked
 617  A6C5
 618  A6C5              ; ARCHIVED INCLUDE "Menus/draw_fuel_and_crosshair.asm"
 619  A6C5              ;INCLUDE "./title_page.asm"
 620  A6C5
 621  A6C5              ; Blocks dependent on variables in Universe Banks
 622  A6C5              ; Bank 49
 623  A6C5              ;    SEG RESETUNIVSEG
 624  A6C5              ;seg     CODE_SEG,       4:              $0000,       $8000                 ; flat address
 625  A6C5              ;seg     RESETUNIVSEG,   BankResetUniv:  StartOfBank, ResetUniverseAddr
 626  A6C5
 627  A6C5
 628  A6C5
 629  A6C5              ;	ORG ResetUniverseAddr
 630  A6C5              ;INCLUDE "./GameEngine/resetUniverse.asm"
 631  A6C5              ; Bank 50  ------------------------------------------------------------------------------------------------------------------------
 632  A6C5                  SLOT    MenuShrChtAddr
 633  A6C5                  PAGE    BankMenuShrCht
 634  A6C5              	ORG     MenuShrChtAddr,BankMenuShrCht
 635  C000                  INCLUDE "./Menus/short_range_chart_menu.asm"
# file opened: ./Menus/short_range_chart_menu.asm
   1+ C000
   2+ C000 53 68 6F 72  short_range_page_marker  DB "ShortRange  PG50"
   2+ C004 74 52 61 6E
   2+ C008 67 65 20 20
   2+ C00C 50 47 35 30
   3+ C010
   4+ C010 30 02 70 8E  short_range_boiler_text	DW $0230,TextBuffer
   5+ C014              short_range_header		equ 12
   6+ C014              src_xy_centre			equ $6080
   7+ C014              src_x_centre			equ $80
   8+ C014              src_y_centre			equ $60
   9+ C014              local_chart_star_colour	equ 216
  10+ C014 00 00        local_dx				dw 0
  11+ C016 00 00        local_dy				dw 0
  12+ C018              local_max_range_x		equ 20
  13+ C018              local_max_range_y		equ $26
  14+ C018 00           local_name_row			db	0
  15+ C019 00           local_name_col			db	0
  16+ C01A              local_label_shift_x		equ	3
  17+ C01A              local_label_shift_y		equ	5
  18+ C01A
  19+ C01A 44 69 73 74  src_distance            DB "Distance: "
  19+ C01E 61 6E 63 65
  19+ C022 3A 20
  20+ C024 30 30 30     src_dist_amount         DB "000"
  21+ C027 2E           src_decimal             DB "."
  22+ C028 30           src_fraction            DB "0"
  23+ C029 20 4C 69 67  src_dis_ly              DB " Light Years",0
  23+ C02D 68 74 20 59
  23+ C031 65 61 72 73
  23+ C035 00
  24+ C036 20 20 30 2E  src_default_dist        DB "  0.0"
  24+ C03A 30
  25+ C03B
  26+ C03B 00 00 00...  src_distance_val        DS  6
  27+ C041              src_fill_buffer_len     EQU 32
  28+ C041              src_fill_buffer_size    EQU 4 * src_fill_buffer_len                          ; up to 32 labels topx topy lengthx spare
  29+ C041 00 00 00...  src_printed_text        DS  src_fill_buffer_size                             ; space for occupied cells may move to bit flags later TODO
  30+ C0C1 00           src_buffer_size         DB  0
  31+ C0C2              ;----------------------------------------------------------------------------------------------------------------------------------
  32+ C0C2              SRM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C0C2
   2++C0C2              ;">print_boilder_text hl = text structure, b = message count"
   3++C0C2              .BoilerTextLoop:
   4++C0C2 C5           	push		bc			; Save Message Count loop value
   5++C0C3 4E           	ld			c,(hl)		; Get Row into b
   6++C0C4 23           	inc			hl
   7++C0C5 46           	ld			b,(hl)		; Get Col into b
   8++C0C6 23           	inc			hl
   9++C0C7 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C0C8 23           	inc			hl
  11++C0C9 56           	ld			d,(hl)		; Get text address Hi into E
  12++C0CA 23           	inc			hl
  13++C0CB E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C0CC EB           	ex			de,hl		; now hl = address of text data
  15++C0CD 1E FF        	ld			e,txt_status_colour
  16++C0CF C5           	push		bc
  17++C0D0 D1           	pop			de
  18++C0D1                  MMUSelectLayer1
  18++C0D1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0D5 CD C8 E0     	call		l1_print_at
  20++C0D8 E1           	pop			hl
  21++C0D9 C1           	pop			bc
  22++C0DA 10 E6        	djnz		.BoilerTextLoop
  23++C0DC C9           	ret
  24++C0DD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  33+ C0DD              ;----------------------------------------------------------------------------------------------------------------------------------
  34+ C0DD              SRM_draw_chart_circle_and_crosshair:
  35+ C0DD ED 4B 1B 82                          ld		bc,(PresentSystemX)				; bc = present system
  36+ C0E1 01 80 60                             ld		bc,src_xy_centre					; must be ordered x y in data
  37+ C0E4                                      MMUSelectSpriteBank
  37+ C0E4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  38+ C0E8 CD F5 E0                             call	sprite_local_cursor
  39+ C0EB 3A 7B 86                             ld		a,(Fuel)
  40+ C0EE 57                                   ld		d,a
  41+ C0EF 1E FF                                ld		e,$FF
  42+ C0F1                                      MMUSelectLayer2
  42+ C0F1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0F5 CD A7 E7                             call	l2_draw_circle
  44+ C0F8 C9                                   ret
  45+ C0F9              ; TODO MOVE CURSOR CODE
  46+ C0F9              ;----------------------------------------------------------------------------------------------------------------------------------
  47+ C0F9              SRM_draw_hyperspace_cross_hair:
  48+ C0F9 ED 4B 1D 82                          ld		bc,(TargetSystemX)              ; bc = selected jump
  49+ C0FD ED 5B 1B 82                          ld		de,(PresentSystemX)
  50+ C101 0E 80                                ld		c,src_x_centre
  51+ C103 06 60                                ld		b,src_y_centre
  52+ C105                                      MMUSelectSpriteBank
  52+ C105 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  53+ C109 CD FD E0                             call	sprite_local_hyper_cursor
  54+ C10C C9                                   ret
  55+ C10D              ;----------------------------------------------------------------------------------------------------------------------------------
  56+ C10D 3A 08 82     src_get_name:           ld      a,(Galaxy)
  57+ C110                                      MMUSelectGalaxyA
  57+ C110 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  58+ C113 ED 4B 1D 82                          ld      bc,(TargetSystemX)
  59+ C117 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
  60+ C11B CD 64 FC                             call    galaxy_system_under_cursor
  61+ C11E FE 00                                cp      0
  62+ C120 C8                                   ret     z
  63+ C121 CD 82 F6                             call	GetDigramWorkingSeed
  64+ C124 21 36 8F                             ld		hl,name_expanded
  65+ C127 CD 91 8E                             call	CapitaliseString
  66+ C12A 21 36 8F                             ld		hl, name_expanded
  67+ C12D 3E FF                                ld      a,$FF
  68+ C12F C9                                   ret
  69+ C130              ;----------------------------------------------------------------------------------------------------------------------------------
  70+ C130              SRM_update_hyperspace_cross_hair:
  71+ C130 ED 4B 1D 82                          ld		bc,(TargetSystemX)              ; bc = selected jump
  72+ C134 ED 5B 1B 82                          ld		de,(PresentSystemX)
  73+ C138 79                                   ld		a,c                             ; a = target x pos
  74+ C139 93                                   sub		e                               ; a = target x - present x
  75+ C13A F2 4B C1                             jp      p,.NoFlipX                      ; if > 0 skip next bit
  76+ C13D ED 44                                neg                                     ; c = a = abs a * 4
  77+ C13F CB 27                                sla		a                               ; .
  78+ C141 CB 27                                sla		a                               ; .
  79+ C143 4F                                   ld      c,a                             ;  .
  80+ C144 3E 80                                ld      a,src_x_centre                  ; c = a = centre screen - c
  81+ C146 91                                   sub     c                               ; .
  82+ C147 4F                                   ld      c,a                             ; .
  83+ C148 C3 52 C1                             jp      .fixY                           ;. now do Y
  84+ C14B CB 27        .NoFlipX:               sla		a
  85+ C14D CB 27                                sla		a
  86+ C14F C6 80                                add		a,src_x_centre
  87+ C151 4F                                   ld      c,a
  88+ C152 78           .fixY:                  ld		a,b                             ; for Y its * 2
  89+ C153 92                                   sub		d
  90+ C154 F2 63 C1                             jp      p,.NoFlipY
  91+ C157 ED 44                                neg
  92+ C159 CB 27                                sla     a
  93+ C15B 47                                   ld      b,a
  94+ C15C 3E 60                                ld      a,src_y_centre
  95+ C15E 90                                   sub     b
  96+ C15F 47                                   ld      b,a
  97+ C160 C3 68 C1                             jp      .RedrawSprite
  98+ C163 CB 27        .NoFlipY                sla		a
  99+ C165 C6 60                                add		a,src_y_centre
 100+ C167 47                                   ld		b,a
 101+ C168              .RedrawSprite:          MMUSelectSpriteBank
 101+ C168 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 102+ C16C CD D0 E0                             call	sprite_lhc_move
 103+ C16F CD A1 C1                             call    src_name_current
 104+ C172 C9                                   ret
 105+ C173
 106+ C173 26 08        src_clear_name_area:    ld      h,8
 107+ C175 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 108+ C178 01 0A A8                             ld      bc,$A80A
 109+ C17B E5           .ClearLoop:             push    hl
 110+ C17C D5                                   push    de
 111+ C17D C5                                   push    bc
 112+ C17E                                      MMUSelectLayer2
 112+ C17E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113+ C182 CD B3 E2                             call	l2_draw_horz_line
 114+ C185 C1                                   pop     bc
 115+ C186 D1                                   pop     de
 116+ C187 E1                                   pop     hl
 117+ C188 04                                   inc     b
 118+ C189 25                                   dec     h
 119+ C18A 20 EF                                jr      nz,.ClearLoop
 120+ C18C C9                                   ret
 121+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ C18D 3A 08 82     src_system_undercursor: ld      a,(Galaxy)
 123+ C190                                      MMUSelectGalaxyA
 123+ C190 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 124+ C193 ED 4B 1D 82                          ld      bc,(TargetSystemX)
 125+ C197 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 126+ C19B CD 64 FC                             call    galaxy_system_under_cursor
 127+ C19E FE 00                                cp      0
 128+ C1A0 C8                                   ret     z
 129+ C1A1 CD 0D C1     src_name_current:       call    src_get_name
 130+ C1A4 FE 00                                cp      0
 131+ C1A6 C8                                   ret     z
 132+ C1A7 E5                                   push    hl
 133+ C1A8 F5                                   push    af
 134+ C1A9 CD 73 C1                             call    src_clear_name_area
 135+ C1AC F1                                   pop     af
 136+ C1AD E1                                   pop     hl
 137+ C1AE 01 0A A8                             ld      bc,$A80A
 138+ C1B1 1E FF                                ld		e,$FF
 139+ C1B3                                      MMUSelectLayer2
 139+ C1B3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 140+ C1B7 CD 22 E2                             call	l2_print_7at
 141+ C1BA CD CD C1                             call    src_calc_distance
 142+ C1BD 21 1A C0                             ld      hl,src_distance
 143+ C1C0 01 0A B0                             ld      bc,$B00A
 144+ C1C3 1E FF                                ld		e,$FF
 145+ C1C5                                      MMUSelectLayer2
 145+ C1C5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 146+ C1C9 CD 22 E2                             call	l2_print_7at
 147+ C1CC C9                                   ret
 148+ C1CD              ;----------------------------------------------------------------------------------------------------------------------------------
 149+ C1CD 3A 08 82     src_calc_distance:      ld      a,(Galaxy)                                      ; Default in 0 distance
 150+ C1D0                                      MMUSelectGalaxyA
 150+ C1D0 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 151+ C1D3 11 24 C0                             ld      de,src_dist_amount
 152+ C1D6 21 36 C0                             ld      hl,src_default_dist
 153+ C1D9 ED A0                                ldi
 154+ C1DB ED A0                                ldi
 155+ C1DD ED A0                                ldi
 156+ C1DF ED A0                                ldi
 157+ C1E1 ED A0                                ldi
 158+ C1E3 ED 4B 1B 82                          ld      bc,(PresentSystemX)
 159+ C1E7 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 160+ C1EB ED 4B 1D 82                          ld      bc,(TargetSystemX)
 161+ C1EF ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 162+ C1F3 CD F7 FB                             call    galaxy_find_distance                            ; get distance into HL
 163+ C1F6 DD 2A A4 81                          ld      ix,(Distance)
 164+ C1FA 11 00 00                             ld      de,0
 165+ C1FD FD 21 3B C0                          ld      iy,src_distance_val
 166+ C201 CD CD 98                             call    DispDEIXtoIY                                    ; use DEIX as distance and write to string at location IY
 167+ C204 FD E5                                push    iy
 168+ C206 E1                                   pop     hl                                              ; hl = iy
 169+ C207 11 3B C0                             ld      de,src_distance_val
 170+ C20A 7E                                   ld		a,(hl)				                            ;Push last digit to post decimal
 171+ C20B 32 28 C0                             ld		(src_fraction),a
 172+ C20E 2B                                   dec     hl
 173+ C20F CD F1 96                             call    compare16HLDE
 174+ C212 38 18                                jr      c,.done_number
 175+ C214 7E                                   ld      a,(hl)
 176+ C215 32 26 C0                             ld      (src_dist_amount+2),a
 177+ C218 2B                                   dec     hl
 178+ C219 CD F1 96                             call    compare16HLDE
 179+ C21C 38 0E                                jr      c,.done_number
 180+ C21E 7E                                   ld      a,(hl)
 181+ C21F 32 25 C0                             ld      (src_dist_amount+1),a
 182+ C222 2B                                   dec     hl
 183+ C223 CD F1 96                             call    compare16HLDE
 184+ C226 38 04                                jr      c,.done_number
 185+ C228 7E                                   ld      a,(hl)
 186+ C229 32 24 C0                             ld      (src_dist_amount),a
 187+ C22C C9           .done_number:           ret
 188+ C22D
 189+ C22D 00 00        PosScan1                DW      0
 190+ C22F 00 00        PosScan2                DW      0
 191+ C231              ; bc = row col, d = xlength e = y length
 192+ C231              ; Check logic simplies to , if 1 = bc and 2 = de:
 193+ C231              ; 12   X1            X2    OK         2 LT X1
 194+ C231              ; 1    X1  2         X2    FAIL       1 LT X1 && 2 GT X1 && 2 LT X2
 195+ C231              ;      X1  12        X2    FAIL       1 GT X1 && 1 LT X2 && 2 GT X1 && 2 LT X2
 196+ C231              ;      X1  1         X2 2  FAIL       1 GT X1 && 1 LT X2 && 2 GT X2
 197+ C231              ;      X1            X2 12 OK         1 GT X2
 198+ C231 16 07        FreeSlotCheck:          ld      d,7
 199+ C233 ED 30                                mul
 200+ C235 79                                   ld      a,c
 201+ C236 83                                   add     e
 202+ C237 30 02                                jr      nc,.NoOverflow
 203+ C239 3E FF        .Overflow:              ld      a,$FF
 204+ C23B 5F           .NoOverflow:            ld      e,a                     ; e now equals max length in pixels
 205+ C23C 78                                   ld      a,b
 206+ C23D C6 08                                add     8
 207+ C23F 57                                   ld      d,a                     ; e = max height
 208+ C240 ED 43 2D C2                          ld      (PosScan1),bc
 209+ C244 ED 53 2F C2                          ld      (PosScan2),de
 210+ C248 DD 21 41 C0  .CheckBoxes:            ld      ix,src_printed_text
 211+ C24C 3A C1 C0                             ld      a,(src_buffer_size)
 212+ C24F FE 00                                cp      0
 213+ C251 28 3C                                jr      z,.SafeToPrint
 214+ C253 60                                   ld      h,b                     ; h will substite for row b as b is used in dnjz
 215+ C254 47                                   ld      b,a
 216+ C255 DD 7E 02     .CheckBoxLoop:          ld      a,(ix+2)
 217+ C258 FE 00                                cp      0                       ; zerolength, not applicable
 218+ C25A 28 29                                jr      z,.NoBox
 219+ C25C 3A 2D C2     .CheckRow:              ld      a,(PosScan1)
 220+ C25F 3C                                   inc     a
 221+ C260                                      JumpIfAGTENusng (ix+2), .NoBox  ; X1 >= BottomLeftX
 221+ C260 DD BE 02    >                        cp     (ix+2)
 221+ C263 D2 85 C2    >                        jp		nc,.NoBox
 222+ C266 3A 2F C2                             ld      a,(PosScan2)
 223+ C269                                      JumpIfALTNusng (ix+0),  .NoBox   ; X2 <= TopRightX
 223+ C269 DD BE 00    >                        cp      (ix+0)
 223+ C26C DA 85 C2    >                        jp		c, .NoBox
 224+ C26F 3A 2E C2     .SafeToPrintX:          ld      a,(PosScan1+1)
 225+ C272 3C                                   inc     a
 226+ C273                                      JumpIfAGTENusng (ix+3), .NoBox  ; Y1 >= BottomLeftY
 226+ C273 DD BE 03    >                        cp     (ix+3)
 226+ C276 D2 85 C2    >                        jp		nc,.NoBox
 227+ C279 3A 30 C2                             ld      a,(PosScan2+1)
 228+ C27C                                      JumpIfALTNusng (ix+1),  .NoBox  ; Y2 <= TopRightY
 228+ C27C DD BE 01    >                        cp      (ix+1)
 228+ C27F DA 85 C2    >                        jp		c, .NoBox
 229+ C282 3E FF        .MatchedBox:            ld      a,$FF
 230+ C284 C9                                   ret
 231+ C285 DD 23        .NoBox:                 inc     ix
 232+ C287 DD 23                                inc     ix
 233+ C289 DD 23                                inc     ix
 234+ C28B DD 23                                inc     ix
 235+ C28D 10 C6                                djnz    .CheckBoxLoop
 236+ C28F 21 41 C0     .SafeToPrint:           ld      hl,src_printed_text
 237+ C292 3A C1 C0                             ld      a,(src_buffer_size)
 238+ C295 57                                   ld      d,a
 239+ C296 1E 04                                ld      e,4
 240+ C298 ED 30                                mul
 241+ C29A 19                                   add     hl,de
 242+ C29B ED 5B 2D C2                          ld      de,(PosScan1)
 243+ C29F 73 23 72 2B                          ld      (hl),de
 244+ C2A3 23                                   inc     hl
 245+ C2A4 23                                   inc     hl
 246+ C2A5 ED 5B 2F C2                          ld      de,(PosScan2)
 247+ C2A9 73 23 72 2B                          ld      (hl),de
 248+ C2AD 21 C1 C0                             ld      hl,src_buffer_size
 249+ C2B0 34                                   inc     (hl)
 250+ C2B1 AF                                   xor     a
 251+ C2B2 C9                                   ret
 252+ C2B3
 253+ C2B3 CD 38 87     src_label_ssytem:       call	copy_system_to_working
 254+ C2B6 3A 08 82                             ld      a,(Galaxy)
 255+ C2B9                                      MMUSelectGalaxyA
 255+ C2B9 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 256+ C2BC CD 82 F6                             call	GetDigramWorkingSeed
 257+ C2BF 21 36 8F                             ld		hl,name_expanded
 258+ C2C2 CD 91 8E                             call	CapitaliseString
 259+ C2C5 3A 18 C0                             ld		a,(local_name_row)
 260+ C2C8 D6 05                                sub		local_label_shift_y
 261+ C2CA 47                                   ld		b,a					    ; b = effective pixel row
 262+ C2CB 3A 19 C0                             ld		a,(local_name_col)
 263+ C2CE C6 03                                add		a,local_label_shift_x
 264+ C2D0 4F                                   ld		c,a                     ; c = effective pixel col
 265+ C2D1 1E 00        .GetStringName:         ld      e,0
 266+ C2D3 21 36 8F                             ld      hl,name_expanded
 267+ C2D6 7E           .getStringLoop:         ld      a,(hl)
 268+ C2D7 23                                   inc     hl
 269+ C2D8 1C                                   inc     e
 270+ C2D9 FE 00                                cp      0                       ; String must have a terminator to work
 271+ C2DB 20 F9                                jr      nz,.getStringLoop
 272+ C2DD 16 08                                ld      d,8
 273+ C2DF C5                                   push    bc
 274+ C2E0 CD 31 C2                             call    FreeSlotCheck           ; first attemps
 275+ C2E3 C1                                   pop     bc
 276+ C2E4 FE 00                                cp      0
 277+ C2E6 28 19                                jr      z,.OKToPrint
 278+ C2E8 78                                   ld      a,b
 279+ C2E9 C6 08                                add     8
 280+ C2EB 47                                   ld      b,a
 281+ C2EC C5                                   push    bc
 282+ C2ED CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 283+ C2F0 C1                                   pop     bc
 284+ C2F1 FE 00                                cp      0
 285+ C2F3 28 0C                                jr      z,.OKToPrint
 286+ C2F5 78                                   ld      a,b
 287+ C2F6 D6 10                                sub     16
 288+ C2F8 47                                   ld      b,a
 289+ C2F9 C5                                   push    bc
 290+ C2FA CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 291+ C2FD C1                                   pop     bc
 292+ C2FE FE 00                                cp      0
 293+ C300 C0                                   ret     nz
 294+ C301 1E FF        .OKToPrint:             ld		e,$FF
 295+ C303 21 36 8F                             ld		hl,name_expanded
 296+ C306                                      MMUSelectLayer2
 296+ C306 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C30A CD 22 E2                             call	l2_print_7at
 298+ C30D C9                                   ret
 299+ C30E
 300+ C30E              name_if_possible:
 301+ C30E 3A 18 C0     SRCpixelRowToRefRow:    ld		a,(local_name_row)
 302+ C311 D6 05                                sub		local_label_shift_y
 303+ C313 47                                   ld		b,a					; b = effective pixel row
 304+ C314 CB 3F                                srl		a
 305+ C316 CB 3F                                srl		a
 306+ C318 CB 3F                                srl		a					; divide by 8 to get character row
 307+ C31A                                  ;	sub		2					; don;t write over header TODO tweaks
 308+ C31A 21 D7 80                             ld		hl,IndexedWork
 309+ C31D ED 31                                add		hl,a
 310+ C31F 7E                                   ld		a,(hl)
 311+ C320 FE 00                                cp		0
 312+ C322 20 04                                jr		nz, SRCtryAbove		; if its not empty don't print *(need to test +-1 row TODO)
 313+ C324 36 01                                ld		(hl),1				; flag as in use
 314+ C326 18 12                                jr		SRCFoundRow
 315+ C328 2B           SRCtryAbove:            dec		hl
 316+ C329 7E                                   ld		a,(hl)
 317+ C32A FE 00                                cp		0
 318+ C32C 20 04                                jr		nz, SRCtryBelow		; if its not empty don't print *(need to test +-1 row TODO)
 319+ C32E 36 01                                ld		(hl),1				; flag as in use
 320+ C330 18 08                                jr		SRCFoundRow
 321+ C332 23           SRCtryBelow:            inc		hl
 322+ C333 23                                   inc		hl
 323+ C334 7E                                   ld		a,(hl)
 324+ C335 FE 00                                cp		0
 325+ C337 C8                                   ret		z
 326+ C338 36 01                                ld		(hl),1				; flag as in use
 327+ C33A CD 38 87     SRCFoundRow:            call	copy_system_to_working
 328+ C33D 3A 08 82     SRCSmallSizeName:       ld      a,(Galaxy)
 329+ C340                                      MMUSelectGalaxyA
 329+ C340 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 330+ C343 CD 82 F6                             call	GetDigramWorkingSeed
 331+ C346 21 36 8F     SRCCapitaliseName:      ld		hl,name_expanded
 332+ C349 CD 91 8E                             call	CapitaliseString
 333+ C34C 21 36 8F     SRCPrintName:           ld		hl, name_expanded
 334+ C34F 3A 18 C0                             ld		a,(local_name_row)
 335+ C352 D6 05                                sub		local_label_shift_y
 336+ C354 47                                   ld		b,a					; b = effective pixel row
 337+ C355 3A 19 C0                             ld		a,(local_name_col)
 338+ C358 C6 03                                add		a,local_label_shift_x
 339+ C35A 4F                                   ld		c,a
 340+ C35B 1E FF                                ld		e,$FF
 341+ C35D                                      MMUSelectLayer2
 341+ C35D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 342+ C361 CD 22 E2                             call	l2_print_7at
 343+ C364 C9                                   ret
 344+ C365
 345+ C365 AF           plot_local_stars:       xor		a
 346+ C366 32 16 81                             ld		(XSAV),a
 347+ C369 DD 21 16 E0                          ld      ix,galaxy_data
 348+ C36D 32 C1 C0                             ld      (src_buffer_size),a
 349+ C370 21 41 C0     SRCClearNameList:       ld		hl,src_printed_text
 350+ C373 11 80 00                             ld		de,src_fill_buffer_size
 351+ C376 CD A3 7C                             call	memfill_dma
 351+ C379
 352+ C379 AF           SRCCounterLoop:         xor		a
 353+ C37A 3A 08 82                             ld      a,(Galaxy)
 354+ C37D                                      MMUSelectGalaxyA
 354+ C37D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 355+ C380 DD E5                                push    ix
 356+ C382 DD E5                                push    ix
 357+ C384 E1                                   pop     hl
 358+ C385 11 FD 80                             ld      de,SystemSeed
 359+ C388 CD 0B 87                             call    copy_seed
 360+ C38B 3A FE 80                             ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 361+ C38E 4F                                   ld		c,a
 362+ C38F 3A 1C 82     SRCcalcLocaldy:         ld		a,(PresentSystemY)
 363+ C392 47                                   ld		b,a								; so b holds Y ccord
 364+ C393 79                                   ld		a,c
 365+ C394 90                                   sub		b
 366+ C395 CB 7F                                bit		7,a
 367+ C397 28 02                                jr		z,SRCpositivedy
 368+ C399 ED 44        SRCnegativedy:          neg
 369+ C39B FE 26        SRCpositivedy:          cp		local_max_range_y
 370+ C39D 30 48                                jr		nc,SRCtoofar
 371+ C39F 3A 00 81     SRCcalcLocaldx:         ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 372+ C3A2 4F                                   ld		c,a
 373+ C3A3 3A 1B 82                             ld		a,(PresentSystemX)
 374+ C3A6 47                                   ld		b,a								; so b holds Y ccord
 375+ C3A7 79                                   ld		a,c
 376+ C3A8 90                                   sub		b
 377+ C3A9 CB 7F                                bit		7,a
 378+ C3AB 28 02                                jr		z,SRCpositivedx
 379+ C3AD ED 44        SRCnegativedx:          neg
 380+ C3AF FE 14        SRCpositivedx:          cp		local_max_range_x
 381+ C3B1 30 34                                jr		nc,SRCtoofar
 382+ C3B3 3A FE 80     SRCOKToPlot             ld		a,(SystemSeed+1)
 383+ C3B6 21 1C 82                             ld		hl,PresentSystemY
 384+ C3B9 96                                   sub		(hl)
 385+ C3BA CB 27                                sla		a								; * 2
 386+ C3BC C6 60                                add		src_y_centre
 387+ C3BE 32 18 C0                             ld		(local_name_row),a
 388+ C3C1 47                                   ld		b,a
 389+ C3C2 3A 00 81                             ld		a,(SystemSeed+3)
 390+ C3C5 21 1B 82                             ld		hl,PresentSystemX
 391+ C3C8 96                                   sub		(hl)
 392+ C3C9 CB 27                                sla		a
 393+ C3CB CB 27                                sla		a								; * 4
 394+ C3CD C6 80                                add		src_x_centre
 395+ C3CF 32 19 C0                             ld		(local_name_col),a
 396+ C3D2 4F                                   ld		c,a
 397+ C3D3 3A 02 81                             ld		a,(SystemSeed+5)
 398+ C3D6 E6 01                                and		$01
 399+ C3D8 C6 02                                add		a,2
 400+ C3DA 57                                   ld		d,a
 401+ C3DB 1E D8                                ld		e,local_chart_star_colour
 402+ C3DD                                      MMUSelectLayer2
 402+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 403+ C3E1 CD EB E9                             call	l2_draw_circle_fill
 404+ C3E4                                     ; call    src_get_name
 405+ C3E4 CD B3 C2                             call	src_label_ssytem
 406+ C3E7 E1           SRCtoofar:              pop     hl
 407+ C3E8 ED 34 08 00                          add     hl,8
 408+ C3EC E5                                   push    hl
 409+ C3ED DD E1                                pop     ix
 410+ C3EF 3A 16 81                             ld		a,(XSAV)
 411+ C3F2 3D                                   dec		a
 412+ C3F3 FE 00                                cp		0
 413+ C3F5 C8                                   ret		z
 414+ C3F6 32 16 81                             ld		(XSAV),a
 415+ C3F9 C3 79 C3                             jp		SRCCounterLoop
 416+ C3FC              ;----------------------------------------------------------------------------------------------------------------------------------
 417+ C3FC              draw_local_chart_menu:  InitNoDoubleBuffer
 417+ C3FC             >                            MMUSelectLayer1
 417+ C3FC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 417+ C400 CD 80 E0    >                            call	l1_cls
 417+ C403 3E 07       >                            ld		a,7
 417+ C405 CD 9B E0    >                            call	l1_attr_cls_to_a
 417+ C408             >                            MMUSelectLayer2
 417+ C408 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 417+ C40C CD 09 E0    >                            call    asm_l2_double_buffer_off
 417+ C40F CD FF E0    >                            call	l2_cls	; Get some space
 417+ C412             >                            MMUSelectSpriteBank
 417+ C412 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 417+ C416 CD 6E E5    >                            call    sprite_cls_cursors
 418+ C419 3E 80                                ld      a,$80
 419+ C41B 32 1E 81                             ld      (MenuIdMax),a
 420+ C41E                                      CopyPresentSystemToTarget               ; for short range we always start at present and cusor on present
 420+ C41E 2A 1B 82    >                        ld      hl,(PresentSystemX)
 420+ C421 22 1D 82    >                        ld      (TargetSystemX),hl
 421+ C424 01 01 01     SRCDrawbox:             ld		bc,$0101
 422+ C427 11 FD BE                             ld		de,$BEFD
 423+ C42A 3E C0                                ld		a,$C0
 424+ C42C                                      MMUSelectLayer2
 424+ C42C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 425+ C430 CD 49 E2                             call	l2_draw_box
 426+ C433 01 01 0A                             ld		bc,$0A01
 427+ C436 11 C0 FE                             ld		de,$FEC0
 428+ C439                                      MMUSelectLayer2
 428+ C439 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 429+ C43D CD B3 E2                             call	l2_draw_horz_line
 430+ C440 3E 0C        SRCStaticText:          ld		a,short_range_header
 431+ C442 CD B1 8E                             call	expandTokenToString
 432+ C445 06 01                                ld		b,1
 433+ C447 21 10 C0                             ld		hl,short_range_boiler_text
 434+ C44A CD C2 C0                             call	SRM_print_boiler_text
 435+ C44D CD 05 87     SRCSetUpChart:          call	copy_galaxy_to_system
 436+ C450 CD 65 C3                             call	plot_local_stars
 437+ C453 CD DD C0     .CircleandCrosshair:    call	SRM_draw_chart_circle_and_crosshair
 438+ C456 CD F9 C0                             call	SRM_draw_hyperspace_cross_hair
 439+ C459 C9                                   ret
 440+ C45A              ;----------------------------------------------------------------------------------------------------------------------------------
 441+ C45A 3A FF 81     local_chart_cursors:    ld     a,(CursorKeysPressed)
 442+ C45D                                      ReturnIfAIsZero
 442+ C45D A7          >                        and     a
 442+ C45E C8          >                        ret     z
 443+ C45F 17                                   rla
 444+ C460 DC 78 C4                             call   c,src_UpPressed
 445+ C463 17                                   rla
 446+ C464 DC 95 C4                             call   c,src_DownPressed
 447+ C467 17                                   rla
 448+ C468 DC B4 C4                             call   c,src_LeftPressed
 449+ C46B 17                                   rla
 450+ C46C DC D1 C4                             call   c,src_RightPressed
 451+ C46F 17                                   rla
 452+ C470 DC F0 C4                             call   c,src_HomePressed
 453+ C473 17                                   rla
 454+ C474 DC FA C4                             call   c,src_RecenterPressed
 455+ C477 C9                                   ret
 456+ C478              ;----------------------------------------------------------------------------------------------------------------------------------
 457+ C478 3A 1E 82     src_UpPressed:          ld     a,(TargetSystemY)
 458+ C47B                                      JumpIfAIsZero   src_BoundsLimit
 458+ C47B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 458+ C47C CA 0F C5    >                        jp	    z, src_BoundsLimit
 459+ C47F 47                                   ld      b,a                         ; save target as we will need it
 460+ C480 3A 1C 82                             ld      a,(PresentSystemY)
 461+ C483 90                                   sub     b                           ; get the difference between present and target
 462+ C484 FA 8C C4                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 463+ C487                                      JumpIfAGTENusng 40,src_BoundsLimit  ; if no more than 20 then OK
 463+ C487 FE 28       >                        cp     40
 463+ C489 D2 0F C5    >                        jp		nc,src_BoundsLimit
 464+ C48C 78           .SkipBoundsTest:        ld      a,b
 465+ C48D 3D                                   dec     a
 466+ C48E 32 1E 82                             ld      (TargetSystemY),a
 467+ C491 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 468+ C494 C9                                   ret
 469+ C495              ;----------------------------------------------------------------------------------------------------------------------------------
 470+ C495 3A 1C 82     src_DownPressed:        ld     a,(PresentSystemY)
 471+ C498 47                                   ld      b,a
 472+ C499 3A 1E 82                             ld      a,(TargetSystemY)
 473+ C49C 4F                                   ld      c,a
 474+ C49D                                      JumpIfAEqNusng 128,src_BoundsLimit
 474+ C49D FE 80       >                        cp     128
 474+ C49F CA 0F C5    >                        jp      z,src_BoundsLimit
 475+ C4A2 90                                   sub     b
 476+ C4A3 FA AB C4                             jp      m,.SkipBoundsTest
 477+ C4A6                                      JumpIfAGTENusng 40,src_BoundsLimit
 477+ C4A6 FE 28       >                        cp     40
 477+ C4A8 D2 0F C5    >                        jp		nc,src_BoundsLimit
 478+ C4AB 79           .SkipBoundsTest:        ld      a,c
 479+ C4AC 3C                                   inc    a
 480+ C4AD 32 1E 82                             ld      (TargetSystemY),a
 481+ C4B0 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 482+ C4B3 C9                                   ret
 483+ C4B4              ;----------------------------------------------------------------------------------------------------------------------------------
 484+ C4B4 3A 1D 82     src_LeftPressed:        ld      a,(TargetSystemX)           ; we can't move left if target is zero
 485+ C4B7                                      JumpIfAIsZero   src_BoundsLimit
 485+ C4B7 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 485+ C4B8 CA 0F C5    >                        jp	    z, src_BoundsLimit
 486+ C4BB 47                                   ld      b,a                         ; save target as we will need it
 487+ C4BC 3A 1B 82                             ld      a,(PresentSystemX)
 488+ C4BF 90                                   sub     b                           ; get the difference between present and target
 489+ C4C0 FA C8 C4                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 490+ C4C3                                      JumpIfAGTENusng 20,src_BoundsLimit  ; if no more than 20 then OK
 490+ C4C3 FE 14       >                        cp     20
 490+ C4C5 D2 0F C5    >                        jp		nc,src_BoundsLimit
 491+ C4C8 78           .SkipBoundsTest:        ld      a,b
 492+ C4C9 3D                                   dec     a
 493+ C4CA 32 1D 82                             ld      (TargetSystemX),a
 494+ C4CD CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 495+ C4D0 C9                                   ret
 496+ C4D1              ;----------------------------------------------------------------------------------------------------------------------------------
 497+ C4D1 3A 1B 82     src_RightPressed:       ld      a,(PresentSystemX)
 498+ C4D4 47                                   ld      b,a
 499+ C4D5 3A 1D 82                             ld      a,(TargetSystemX)
 500+ C4D8 4F                                   ld      c,a
 501+ C4D9                                      JumpIfAEqNusng 255,src_BoundsLimit
 501+ C4D9 FE FF       >                        cp     255
 501+ C4DB CA 0F C5    >                        jp      z,src_BoundsLimit
 502+ C4DE 90                                   sub     b
 503+ C4DF FA E7 C4                             jp      m,.SkipBoundsTest
 504+ C4E2                                      JumpIfAGTENusng 20,src_BoundsLimit
 504+ C4E2 FE 14       >                        cp     20
 504+ C4E4 D2 0F C5    >                        jp		nc,src_BoundsLimit
 505+ C4E7 79           .SkipBoundsTest:        ld      a,c
 506+ C4E8 3C                                   inc    a
 507+ C4E9 32 1D 82                             ld      (TargetSystemX),a
 508+ C4EC CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 509+ C4EF C9                                   ret
 510+ C4F0              ;----------------------------------------------------------------------------------------------------------------------------------
 511+ C4F0 2A 1B 82     src_HomePressed:        ld      hl,(PresentSystemX)
 512+ C4F3 22 1D 82                             ld      (TargetSystemX),hl
 513+ C4F6 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 514+ C4F9 C9                                   ret
 515+ C4FA              ;----------------------------------------------------------------------------------------------------------------------------------
 516+ C4FA 3A 08 82     src_RecenterPressed:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 517+ C4FD                                      MMUSelectGalaxyA
 517+ C4FD ED 92 57    >                     nextreg GalaxyDataMMU,       a
 518+ C500 ED 4B 1D 82                          ld      bc,(TargetSystemX)
 519+ C504 CD 70 FB                             call    find_nearest_to_bc
 520+ C507 ED 43 1D 82                          ld      (TargetSystemX),bc
 521+ C50B CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 522+ C50E C9                                   ret
 523+ C50F              ;----------------------------------------------------------------------------------------------------------------------------------
 524+ C50F AF           src_BoundsLimit:        xor     a
 525+ C510 C9                                   ret
 526+ C511
# file closed: ./Menus/short_range_chart_menu.asm
 636  C511                  DISPLAY "Bank ",BankMenuShrCht," - Bytes free ",/D, $2000 - ($-MenuShrChtAddr), " - BankMenuShrCht"
 637  C511              ; Bank 51  ------------------------------------------------------------------------------------------------------------------------
 638  C511                  SLOT    MenuGalChtAddr
 639  C511                  PAGE    BankMenuGalCht
 640  C511              	ORG     MenuGalChtAddr
 641  C000                  INCLUDE "./Menus//galactic_chart_menu.asm"
# file opened: ./Menus//galactic_chart_menu.asm
   1+ C000
   2+ C000 47 61 6C 61  galactic_chart_page_marker  DB "GalacticChrtPG51"
   2+ C004 63 74 69 63
   2+ C008 43 68 72 74
   2+ C00C 50 47 35 31
   3+ C010 40 02 70 8E  galactic_chart_boiler_text	DW $0240,TextBuffer
   4+ C014              galactic_chart_header		equ 13
   5+ C014              galactic_star_colour		equ 216
   6+ C014              galactic_star_colour2		equ 108
   7+ C014              galactic_chart_y_offset		equ $18
   8+ C014              galactic_chart_hyper_offset equ 4
   9+ C014              galactic_chart_hyper_x_offset equ 32 - 4
  10+ C014              galactic_chart_hyper_y_offset equ 32 - 4 + 24
  11+ C014 44 69 73 74  galactic_chart_distance     DB "Distance: "
  11+ C018 61 6E 63 65
  11+ C01C 3A 20
  12+ C01E 30 30 30     galactic_chart_dist_amount  DB "000"
  13+ C021 2E           galactic_chart_decimal      DB "."
  14+ C022 30           galactic_chart_fraction     DB "0"
  15+ C023 20 4C 69 67  galactic_chart_dis_ly       DB " Light Years",0
  15+ C027 68 74 20 59
  15+ C02B 65 61 72 73
  15+ C02F 00
  16+ C030 20 20 30 2E  galactic_default_dist       DB "  0.0",0
  16+ C034 30 00
  17+ C036
  18+ C036 00 00 00...  galactic_distance           DS  6
  19+ C03C
  20+ C03C              galactic_find_position      equ $B008
  21+ C03C 46 69 6E 64  galactic_find_message       DB "Find: ",0
  21+ C040 3A 20 00
  22+ C043              galactic_find_text          equ $B038
  23+ C043 20 20 20 20  galactic_blank_message      DB  "                    ",0
  23+ C047 20 20 20 20
  23+ C04B 20 20 20 20
  23+ C04F 20 20 20 20
  23+ C053 20 20 20 20
  23+ C057 00
  24+ C058 2A 2A 2D 2D  galactic_find_no_match      DB "**-- System Not Found --**",0
  24+ C05C 20 53 79 73
  24+ C060 74 65 6D 20
  24+ C064 4E 6F 74 20
  24+ C068 46 6F 75 6E
  24+ C06C 64 20 2D 2D
  24+ C070 2A 2A 00
  25+ C073 20 20 2A 2A  galactic_find_match         DB "  **-- System Found --**  ",0
  25+ C077 2D 2D 20 53
  25+ C07B 79 73 74 65
  25+ C07F 6D 20 46 6F
  25+ C083 75 6E 64 20
  25+ C087 2D 2D 2A 2A
  25+ C08B 20 20 00
  26+ C08E
  27+ C08E              GCM_print_boiler_text:
  28+ C08E                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C08E
   2++C08E              ;">print_boilder_text hl = text structure, b = message count"
   3++C08E              .BoilerTextLoop:
   4++C08E C5           	push		bc			; Save Message Count loop value
   5++C08F 4E           	ld			c,(hl)		; Get Row into b
   6++C090 23           	inc			hl
   7++C091 46           	ld			b,(hl)		; Get Col into b
   8++C092 23           	inc			hl
   9++C093 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C094 23           	inc			hl
  11++C095 56           	ld			d,(hl)		; Get text address Hi into E
  12++C096 23           	inc			hl
  13++C097 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C098 EB           	ex			de,hl		; now hl = address of text data
  15++C099 1E FF        	ld			e,txt_status_colour
  16++C09B C5           	push		bc
  17++C09C D1           	pop			de
  18++C09D                  MMUSelectLayer1
  18++C09D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0A1 CD C8 E0     	call		l1_print_at
  20++C0A4 E1           	pop			hl
  21++C0A5 C1           	pop			bc
  22++C0A6 10 E6        	djnz		.BoilerTextLoop
  23++C0A8 C9           	ret
  24++C0A9
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  29+ C0A9              GCM_draw_chart_circle_and_crosshair:
  30+ C0A9 ED 4B 1B 82  	ld		bc,(PresentSystemX)				; bc = present system
  31+ C0AD              .OnGalacticChart:
  32+ C0AD CB 38        	srl		b								; but row is row / 2
  33+ C0AF C5           	push  	bc
  34+ C0B0              	MMUSelectSpriteBank
  34+ C0B0 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  35+ C0B4 CD 91 E0     	call	sprite_galactic_cursor
  36+ C0B7 C1           	pop		bc
  37+ C0B8 78           	ld		a,b
  38+ C0B9 C6 18        	add		a,galactic_chart_y_offset
  39+ C0BB 47           	ld		b,a
  40+ C0BC 3A 7B 86     	ld		a,(Fuel)
  41+ C0BF CB 3F        	srl		a
  42+ C0C1 CB 3F        	srl		a								; divide range of fuel by 4 for galactic chart
  43+ C0C3 57           	ld		d,a
  44+ C0C4 1E FF        	ld		e,$FF
  45+ C0C6              	MMUSelectLayer2
  45+ C0C6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  46+ C0CA CD A7 E7     	call	l2_draw_circle
  47+ C0CD C9           	ret
  48+ C0CE              ; TODO MOVE CURSOR CODE
  49+ C0CE
  50+ C0CE ED 4B 1D 82  GCM_draw_hyperspace_cross_hair: ld		bc,(TargetSystemX)              ; bc = selected jump
  51+ C0D2 C5                                           push    bc
  52+ C0D3 CB 38                                        srl		b								; but row is row / 2
  53+ C0D5                                              MMUSelectSpriteBank
  53+ C0D5 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  54+ C0D9 CD 9D E0                                     call	sprite_galactic_hyper_cursor
  55+ C0DC C1                                           pop     bc
  56+ C0DD CD A9 E0                                     call	sprite_ghc_move
  57+ C0E0 C9                                           ret
  58+ C0E1
  59+ C0E1
  60+ C0E1 AF           plot_gc_stars:          xor		a
  61+ C0E2 32 16 81                             ld		(XSAV),a
  62+ C0E5 DD 21 16 E0                          ld      ix,galaxy_data
  63+ C0E9 3A 08 82     .CounterLoop:           ld      a,(Galaxy)
  64+ C0EC                                      MMUSelectGalaxyA
  64+ C0EC ED 92 57    >                     nextreg GalaxyDataMMU,       a
  65+ C0EF DD E5                                push    ix
  66+ C0F1 E1                                   pop     hl
  67+ C0F2 11 FD 80                             ld      de,SystemSeed
  68+ C0F5 CD 0B 87                             call    copy_seed
  69+ C0F8 3A 00 81                             ld		a,(SystemSeed+3)				; QQ15+3 \ seed w1_h is Xcoord of star
  70+ C0FB 4F                                   ld		c,a								; c = X Coord
  71+ C0FC 3A FE 80                             ld		a,(SystemSeed+1)
  72+ C0FF CB 3F                                srl		a								; Ycoord /2
  73+ C101 C6 18                                add		a,galactic_chart_y_offset		; add offset to Y coord of star
  74+ C103 47                                   ld		b,a								; b = row
  75+ C104 C5                                   push	bc
  76+ C105 3E D8                                ld		a,galactic_star_colour
  77+ C107                                      MMUSelectLayer2
  77+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  78+ C10B CD 35 E1                             call	l2_plot_pixel
  79+ C10E C1                                   pop		bc
  80+ C10F 3A 01 81                             ld		a,(SystemSeed+4)
  81+ C112 F6 50                                or		$50								; minimum distance away
  82+ C114 FE 90                                cp		$90
  83+ C116 30 0A                                jr		nc,.NoSecondPixel
  84+ C118 0C           .SecondPixel:           inc		c
  85+ C119 3E 6C                                ld		a,galactic_star_colour2
  86+ C11B                                      MMUSelectLayer2
  86+ C11B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  87+ C11F CD 35 E1                             call	l2_plot_pixel
  88+ C122 DD E5        .NoSecondPixel:         push    ix
  89+ C124 E1                                   pop     hl
  90+ C125 ED 34 08 00                          add     hl,8
  91+ C129 E5                                   push    hl
  92+ C12A DD E1                                pop     ix
  93+ C12C 3A 16 81                             ld		a,(XSAV)
  94+ C12F 3D                                   dec		a
  95+ C130 FE 00                                cp		0
  96+ C132 C8                                   ret		z
  97+ C133 32 16 81                             ld		(XSAV),a
  98+ C136 18 B1                                jr		.CounterLoop
  99+ C138
 100+ C138 2A 2A 2A 2A  GALDP       DB "********++++++++"
 100+ C13C 2A 2A 2A 2A
 100+ C140 2B 2B 2B 2B
 100+ C144 2B 2B 2B 2B
 101+ C148              draw_galactic_chart_menu:   InitNoDoubleBuffer
 101+ C148             >                            MMUSelectLayer1
 101+ C148 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 101+ C14C CD 80 E0    >                            call	l1_cls
 101+ C14F 3E 07       >                            ld		a,7
 101+ C151 CD 9B E0    >                            call	l1_attr_cls_to_a
 101+ C154             >                            MMUSelectLayer2
 101+ C154 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 101+ C158 CD 09 E0    >                            call    asm_l2_double_buffer_off
 101+ C15B CD FF E0    >                            call	l2_cls	; Get some space
 101+ C15E             >                            MMUSelectSpriteBank
 101+ C15E ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 101+ C162 CD 6E E5    >                            call    sprite_cls_cursors
 102+ C165 DD 2E DC                                 ld      ixl,$DC
 103+ C168 3E 40                                    ld      a,$40
 104+ C16A 32 1E 81                                 ld      (MenuIdMax),a
 105+ C16D 2A 1B 82                                 ld      hl,(PresentSystemX)
 106+ C170              ;                            ld      (TargetSystemX),hl
 107+ C170 CD 4B C4                                 call    gc_present_system               ; Set up the seed for present system
 108+ C173 01 01 01     .Drawbox:                   ld		bc,$0101
 109+ C176 11 FD BE                                 ld		de,$BEFD
 110+ C179 3E C0                                    ld		a,$C0
 111+ C17B                                          MMUSelectLayer2
 111+ C17B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 112+ C17F CD 49 E2                                 call	l2_draw_box
 113+ C182 01 01 0A                                 ld		bc,$0A01
 114+ C185 11 C0 FE                                 ld		de,$FEC0
 115+ C188 CD B3 E2                                 call	l2_draw_horz_line
 116+ C18B 3E 0D        .StaticText:                ld		a,galactic_chart_header
 117+ C18D CD B1 8E                                 call	expandTokenToString
 118+ C190 06 01                                    ld		b,1
 119+ C192 21 10 C0                                 ld		hl,galactic_chart_boiler_text
 120+ C195 CD 8E C0                                 call	GCM_print_boiler_text
 121+ C198 CD A9 C0     .CircleandCrosshair:        call	GCM_draw_chart_circle_and_crosshair
 122+ C19B CD CE C0                                 call	GCM_draw_hyperspace_cross_hair
 123+ C19E CD E1 C0                                 call	plot_gc_stars
 124+ C1A1 3A 08 82                                 ld      a,(Galaxy)
 125+ C1A4                                          MMUSelectGalaxyA
 125+ C1A4 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 126+ C1A7 ED 4B 1D 82                              ld      bc,(TargetSystemX)
 127+ C1AB CD 64 FC                                 call    galaxy_system_under_cursor          ; TODO for some reason this bit
 128+ C1AE FE 00                                    cp      0                                   ; does not reset cursor on a miss
 129+ C1B0 20 11                                    jr      nz,.CurrentTargetIsValid
 130+ C1B2              .CurrentTargetIsInvalid:    CopyPresentSystemToTarget
 130+ C1B2 2A 1B 82    >                        ld      hl,(PresentSystemX)
 130+ C1B5 22 1D 82    >                        ld      (TargetSystemX),hl
 131+ C1B8 ED 4B 1D 82                              ld      bc,(TargetSystemX)
 132+ C1BC                                          MMUSelectSpriteBank
 132+ C1BC ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 133+ C1C0 CD A9 E0                                 call	sprite_ghc_move
 134+ C1C3 3A 08 82     .CurrentTargetIsValid:      ld      a,(Galaxy)
 135+ C1C6                                          MMUSelectGalaxyA
 135+ C1C6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 136+ C1C9 ED 43 5B E8                              ld      (GalaxyTargetSystem),bc
 137+ C1CD CD 64 FC                                 call    galaxy_system_under_cursor
 138+ C1D0 CD A3 C3                                 call    gc_name_if_possible
 139+ C1D3                                          SetMemFalse TextInputMode
 139+ C1D3 3E FF       >                        ld      a,$FF
 139+ C1D5 32 FE 81    >                        ld      (TextInputMode),a
 140+ C1D8 C9                                       ret
 141+ C1D9
 142+ C1D9              gcDelayVal                  equ $0A
 143+ C1D9              gcBlinkVal                  equ $10
 144+ C1D9
 145+ C1D9
 146+ C1D9 10           gcCursorBlink               DB  gcBlinkVal
 147+ C1DA 20           gcCursorChar                DB  " "
 148+ C1DB 00           gcEndOfString               DB  0
 149+ C1DC 00 00 00...  gcInputText                 DS  31
 150+ C1FB 00 00 00 00                              DB  0,0,0,0,0
 150+ C1FF 00
 151+ C200 00 00 00...  gcBlank                     DS  32
 152+ C220
 153+ C220              ;----------------------------------------------------------------------------------------------------------------------------------
 154+ C220 11 08 B0     gc_display_find_text:   ld		de,galactic_find_position   ; Wipe input area on screen
 155+ C223 21 3C C0                             ld      hl,galactic_find_message
 156+ C226                                      MMUSelectLayer1
 156+ C226 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 157+ C22A CD C8 E0                             call	l1_print_at
 158+ C22D C9                                   ret
 159+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 160+ C22E 11 DC C1     gc_display_find_string: ld      de,gcInputText
 161+ C231 CD A1 7E                             call    keyboard_copy_input_to_de
 162+ C234 21 DA C1                             ld      hl,gcCursorChar         ; Now just copy cursor char too
 163+ C237 ED A0                                ldi                             ; Copy cursor to local
 164+ C239 3A 9E 7E                             ld      a,(InputCursor)
 165+ C23C 3C                                   inc     a
 166+ C23D 47                                   ld      b,a
 167+ C23E 3E 14                                ld      a,20
 168+ C240 90                                   sub     b
 169+ C241 47                                   ld      b,a
 170+ C242 3E 20                                ld      a," "
 171+ C244 12           .SpacePad:              ld      (de),a
 172+ C245 13                                   inc     de
 173+ C246 10 FC                                djnz    .SpacePad
 174+ C248 AF                                   xor     a
 175+ C249 12                                   ld      (de),a
 176+ C24A 11 38 B0                             ld		de,galactic_find_text    ; Display text
 177+ C24D 21 DC C1                             ld      hl,gcInputText
 178+ C250                                      MMUSelectLayer1
 178+ C250 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 179+ C254 CD C8 E0                             call	l1_print_at
 180+ C257 C9                                   ret
 181+ C258
 182+ C258 3A D9 C1     blink_cursor:           ld      a,(gcCursorBlink)
 183+ C25B 3D                                   dec     a
 184+ C25C 32 D9 C1                             ld      (gcCursorBlink),a
 185+ C25F C0                                   ret     nz
 186+ C260 3E 10        .FlashCursor:           ld      a,gcBlinkVal
 187+ C262 32 D9 C1                             ld      (gcCursorBlink),a
 188+ C265 3A DA C1                             ld      a,(gcCursorChar)
 189+ C268 FE 20                                cp      " "
 190+ C26A 28 06                                jr      z,.ChangeToStar
 191+ C26C 3E 20                                ld      a," "
 192+ C26E 32 DA C1                             ld      (gcCursorChar),a
 193+ C271 C9                                   ret
 194+ C272 3E 2A        .ChangeToStar:          ld      a,"*"
 195+ C274 32 DA C1                             ld      (gcCursorChar),a
 196+ C277 C9                                   ret
 197+ C278              ;----------------------------------------------------------------------------------------------------------------------------------
 198+ C278              ; The main loop handles the find key
 199+ C278              loop_gc_menu:           JumpIfMemTrue TextInputMode,AlreadyInInputMode  ;if we are in input mode then go directly there
 199+ C278 3A FE 81    >                        ld      a,(TextInputMode)
 199+ C27B A7          >                        and     a
 199+ C27C CA 95 C2    >                        jp      z, AlreadyInInputMode
 200+ C27F 3E 4E        .StartFindCheck:        ld      a,c_Pressed_Find                        ;Is F pressed
 201+ C281 CD 08 7E                             call    is_key_pressed
 202+ C284 C0                                   ret     nz                                      ;the main loop handles find key
 203+ C285 CD B4 7E                             call    initInputText                           ;Initialise find input
 204+ C288                                      SetMemTrue TextInputMode                        ;Set input mode to true
 204+ C288 AF          >                        xor     a
 204+ C289 32 FE 81    >                        ld      (TextInputMode),a
 205+ C28C                                      SetMemToN gcCursorBlink, gcBlinkVal             ; set up blink
 205+ C28C 3E 10       >                        ld      a,gcBlinkVal
 205+ C28E 32 D9 C1    >                        ld      (gcCursorBlink),a
 206+ C291 CD 20 C2     .DisplayInputbar:       call    gc_display_find_text                    ; now prep the boiler plate input text
 207+ C294 C9                                   ret                                             ; and exit so next interation handles new input as we have to rescan keyboard
 208+ C295              ;Already in input mode post pressing find
 209+ C295 CD CC 7E     AlreadyInInputMode:     call    InputName                               ; Call input routine to parse a key
 210+ C298                                      JumpIfMemFalse InputChanged, .blinkNoDelay      ; no key they bypass rest of input
 210+ C298 3A A0 7E    >                        ld      a,(InputChanged)
 210+ C29B A7          >                        and     a
 210+ C29C C2 A9 C2    >                        jp      nz, .blinkNoDelay
 211+ C29F              .WasItEnter:            JumpIfMemTrue EnterPressed, .FindEnterPressed   ; if enter was pressed then find
 211+ C29F 3A 9F 7E    >                        ld      a,(EnterPressed)
 211+ C2A2 A7          >                        and     a
 211+ C2A3 CA B5 C2    >                        jp      z, .FindEnterPressed
 212+ C2A6 CD 2E C2                             call    gc_display_find_string                  ; update string
 213+ C2A9 CD 58 C2     .blinkNoDelay:          call    blink_cursor
 214+ C2AC                                      CallIfMemEqNusng    gcCursorBlink, gcBlinkVal, gc_display_find_string ; on blink we get a double update but we can live with that
 214+ C2AC 3A D9 C1    >                        ld   a,(gcCursorBlink)
 214+ C2AF FE 10       >                        cp   gcBlinkVal
 214+ C2B1 CC 2E C2    >                        call    z,gc_display_find_string
 215+ C2B4 C9                                   ret
 216+ C2B5              .FindEnterPressed:      SetMemFalse EnterPressed                        ; reset enter
 216+ C2B5 3E FF       >                        ld      a,$FF
 216+ C2B7 32 9F 7E    >                        ld      (EnterPressed),a
 217+ C2BA                                      SetMemFalse TextInputMode                       ; leave input mode
 217+ C2BA 3E FF       >                        ld      a,$FF
 217+ C2BC 32 FE 81    >                        ld      (TextInputMode),a
 218+ C2BF 3A 08 82                             ld      a,(Galaxy)                              ; Fetch correct galaxy seed bank into memory
 219+ C2C2                                      MMUSelectGalaxyA
 219+ C2C2 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 220+ C2C5 21 7F 7E                             ld      hl,InputString
 221+ C2C8 11 5E E8                             ld      de,GalaxySearchString
 222+ C2CB CD D0 F6                             call    GalaxyCopyLoop
 223+ C2CE CD 39 FB                             call    find_system_by_name
 224+ C2D1 FE FF                                cp      $FF                                     ; 0 denotes found FF, failure
 225+ C2D3 28 1D                                jr      z,.FindNoMatch
 226+ C2D5 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 227+ C2D8 4F                                   ld      c,a
 228+ C2D9 3A F9 E8                             ld      a,(GalaxyWorkingSeed+1)
 229+ C2DC 47                                   ld      b,a
 230+ C2DD ED 43 1D 82                          ld      (TargetSystemX),bc
 231+ C2E1 CD 84 C3                             call    UpdateGalacticCursor
 232+ C2E4 11 08 B0                             ld		de,galactic_find_position               ; Wipe input area on screen
 233+ C2E7 21 73 C0                             ld      hl,galactic_find_match
 234+ C2EA                                      MMUSelectLayer1
 234+ C2EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 235+ C2EE CD C8 E0                             call	l1_print_at
 236+ C2F1 C9                                   ret
 237+ C2F2              .FindNoMatch:           ; if not found display "Not found"
 238+ C2F2                                      ; move curor if found
 239+ C2F2 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 240+ C2F5 21 58 C0                             ld      hl,galactic_find_no_match
 241+ C2F8                                      MMUSelectLayer1
 241+ C2F8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 242+ C2FC CD C8 E0                             call	l1_print_at
 243+ C2FF C9                                   ret; DOSTUFFHERE
 244+ C300              ;----------------------------------------------------------------------------------------------------------------------------------
 245+ C300              galctic_chart_cursors:  ReturnIfMemTrue TextInputMode
 245+ C300 3A FE 81    >                        ld      a,(TextInputMode)
 245+ C303 A7          >                        and     a
 245+ C304 C8          >                        ret     z
 246+ C305 3A FF 81                             ld      a,(CursorKeysPressed)
 247+ C308                                      ReturnIfAIsZero
 247+ C308 A7          >                        and     a
 247+ C309 C8          >                        ret     z
 248+ C30A 17                                   rla
 249+ C30B DC 23 C3                             call   c,gc_UpPressed
 250+ C30E 17                                   rla
 251+ C30F DC 33 C3                             call   c,gc_DownPressed
 252+ C312 17                                   rla
 253+ C313 DC 43 C3                             call   c,gc_LeftPressed
 254+ C316 17                                   rla
 255+ C317 DC 53 C3                             call   c,gc_RightPressed
 256+ C31A 17                                   rla
 257+ C31B DC 63 C3                             call   c,gc_HomePressed
 258+ C31E 17                                   rla
 259+ C31F DC 6D C3                             call   c,gc_RecenterPressed
 260+ C322 C9                                   ret
 261+ C323              ;----------------------------------------------------------------------------------------------------------------------------------
 262+ C323 3A 1E 82     gc_UpPressed:           ld     a,(TargetSystemX+1)
 263+ C326                                      JumpIfAEqNusng 1,gc_BoundsLimit
 263+ C326 FE 01       >                        cp     1
 263+ C328 CA 82 C3    >                        jp      z,gc_BoundsLimit
 264+ C32B 3D                                   dec     a
 265+ C32C 32 1E 82                             ld      (TargetSystemX+1),a
 266+ C32F CD 84 C3                             call    UpdateGalacticCursor
 267+ C332 C9                                   ret
 268+ C333              ;----------------------------------------------------------------------------------------------------------------------------------
 269+ C333 3A 1E 82     gc_DownPressed:         ld     a,(TargetSystemX+1)
 270+ C336                                      JumpIfAEqNusng 255,gc_BoundsLimit
 270+ C336 FE FF       >                        cp     255
 270+ C338 CA 82 C3    >                        jp      z,gc_BoundsLimit
 271+ C33B 3C                                   inc    a
 272+ C33C 32 1E 82                             ld      (TargetSystemX+1),a
 273+ C33F CD 84 C3                             call    UpdateGalacticCursor
 274+ C342 C9                                   ret
 275+ C343              ;----------------------------------------------------------------------------------------------------------------------------------
 276+ C343 3A 1D 82     gc_LeftPressed:         ld     a,(TargetSystemX)
 277+ C346                                      JumpIfAEqNusng 2,gc_BoundsLimit
 277+ C346 FE 02       >                        cp     2
 277+ C348 CA 82 C3    >                        jp      z,gc_BoundsLimit
 278+ C34B 3D                                   dec    a
 279+ C34C 32 1D 82                             ld      (TargetSystemX),a
 280+ C34F CD 84 C3                             call    UpdateGalacticCursor
 281+ C352 C9                                   ret
 282+ C353              ;----------------------------------------------------------------------------------------------------------------------------------
 283+ C353 3A 1D 82     gc_RightPressed:        ld     a,(TargetSystemX)
 284+ C356                                      JumpIfAEqNusng 253,gc_BoundsLimit
 284+ C356 FE FD       >                        cp     253
 284+ C358 CA 82 C3    >                        jp      z,gc_BoundsLimit
 285+ C35B 3C                                   inc    a
 286+ C35C 32 1D 82                             ld      (TargetSystemX),a
 287+ C35F CD 84 C3                             call    UpdateGalacticCursor
 288+ C362 C9                                   ret
 289+ C363              ;----------------------------------------------------------------------------------------------------------------------------------
 290+ C363 2A 1B 82     gc_HomePressed:         ld      hl,(PresentSystemX)
 291+ C366 22 1D 82                             ld      (TargetSystemX),hl
 292+ C369 CD 84 C3                             call    UpdateGalacticCursor
 293+ C36C C9                                   ret
 294+ C36D              ;----------------------------------------------------------------------------------------------------------------------------------
 295+ C36D 3A 08 82     gc_RecenterPressed:     ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 296+ C370                                      MMUSelectGalaxyA
 296+ C370 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 297+ C373 ED 4B 1D 82                          ld      bc,(TargetSystemX)
 298+ C377 CD 70 FB                             call    find_nearest_to_bc
 299+ C37A ED 43 1D 82                          ld      (TargetSystemX),bc
 300+ C37E CD 84 C3                             call    UpdateGalacticCursor
 301+ C381 C9                                   ret
 302+ C382              ;----------------------------------------------------------------------------------------------------------------------------------
 303+ C382 AF           gc_BoundsLimit          xor     a
 304+ C383 C9                                   ret
 305+ C384
 306+ C384              ;----------------------------------------------------------------------------------------------------------------------------------
 307+ C384 ED 4B 1D 82  UpdateGalacticCursor:   ld		bc,(TargetSystemX)              ; bc = selected jump
 308+ C388              OnGalacticChart:        MMUSelectSpriteBank
 308+ C388 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 309+ C38C CD A9 E0                             call	sprite_ghc_move
 310+ C38F 3A 08 82                             ld      a,(Galaxy)
 311+ C392                                      MMUSelectGalaxyA
 311+ C392 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 312+ C395 ED 4B 1D 82                          ld      bc,(TargetSystemX)
 313+ C399 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 314+ C39D CD 64 FC                             call    galaxy_system_under_cursor
 315+ C3A0 FE 00                                cp      0
 316+ C3A2 C8                                   ret     z
 317+ C3A3              ; just fall into gc_name_if_possible
 318+ C3A3 CD 82 F6     gc_name_if_possible:    call	GetDigramWorkingSeed
 319+ C3A6 CD D1 C3                             call    gc_clear_name_area
 320+ C3A9 21 36 8F                             ld		hl,name_expanded
 321+ C3AC CD 91 8E                             call	CapitaliseString
 322+ C3AF 21 36 8F                             ld		hl, name_expanded
 323+ C3B2 01 0A A0                             ld      bc,$A00A
 324+ C3B5 1E FF                                ld		e,$FF
 325+ C3B7                                      MMUSelectLayer2
 325+ C3B7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 326+ C3BB CD 22 E2                             call	l2_print_7at
 327+ C3BE CD EB C3                             call    gc_calc_distance
 328+ C3C1 21 14 C0                             ld      hl,galactic_chart_distance
 329+ C3C4 01 0A A8                             ld      bc,$A80A
 330+ C3C7 1E FF                                ld		e,$FF
 331+ C3C9                                      MMUSelectLayer2
 331+ C3C9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 332+ C3CD CD 22 E2                             call	l2_print_7at
 333+ C3D0 C9                                   ret
 334+ C3D1              ;----------------------------------------------------------------------------------------------------------------------------------
 335+ C3D1 26 08        gc_clear_name_area:     ld      h,8
 336+ C3D3 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 337+ C3D6 01 0A A0                             ld      bc,$A00A
 338+ C3D9 E5           .ClearLoop:             push    hl
 339+ C3DA D5                                   push    de
 340+ C3DB C5                                   push    bc
 341+ C3DC                                      MMUSelectLayer2
 341+ C3DC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 342+ C3E0 CD B3 E2                             call	l2_draw_horz_line
 343+ C3E3 C1                                   pop     bc
 344+ C3E4 D1                                   pop     de
 345+ C3E5 E1                                   pop     hl
 346+ C3E6 04                                   inc     b
 347+ C3E7 25                                   dec     h
 348+ C3E8 20 EF                                jr      nz,.ClearLoop
 349+ C3EA C9                                   ret
 350+ C3EB              ;----------------------------------------------------------------------------------------------------------------------------------
 351+ C3EB 3A 08 82     gc_calc_distance:       ld      a,(Galaxy)
 352+ C3EE                                      MMUSelectGalaxyA
 352+ C3EE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 353+ C3F1 11 1E C0                             ld      de,galactic_chart_dist_amount
 354+ C3F4 21 30 C0                             ld      hl,galactic_default_dist
 355+ C3F7 ED A0                                ldi
 356+ C3F9 ED A0                                ldi
 357+ C3FB ED A0                                ldi
 358+ C3FD ED A0                                ldi
 359+ C3FF ED A0                                ldi
 360+ C401 ED 4B 1B 82                          ld      bc,(PresentSystemX)
 361+ C405 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 362+ C409 ED 4B 1D 82                          ld      bc,(TargetSystemX)
 363+ C40D ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 364+ C411 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 365+ C414 DD 2A A4 81                          ld      ix,(Distance)
 366+ C418 11 00 00                             ld      de,0
 367+ C41B FD 21 36 C0                          ld      iy,galactic_distance
 368+ C41F CD CD 98                             call    DispDEIXtoIY
 369+ C422 FD E5                                push    iy
 370+ C424 E1                                   pop     hl
 371+ C425 11 36 C0                             ld      de,galactic_distance
 372+ C428 7E                                   ld		a,(hl)				;Push last digit to post decimal
 373+ C429 32 22 C0                             ld		(galactic_chart_fraction),a
 374+ C42C 2B                                   dec     hl
 375+ C42D CD F1 96                             call    compare16HLDE
 376+ C430 38 18                                jr      c,.done_number
 377+ C432 7E                                   ld      a,(hl)
 378+ C433 32 20 C0                             ld      (galactic_chart_dist_amount+2),a
 379+ C436 2B                                   dec     hl
 380+ C437 CD F1 96                             call    compare16HLDE
 381+ C43A 38 0E                                jr      c,.done_number
 382+ C43C 7E                                   ld      a,(hl)
 383+ C43D 32 1F C0                             ld      (galactic_chart_dist_amount+1),a
 384+ C440 2B                                   dec     hl
 385+ C441 CD F1 96                             call    compare16HLDE
 386+ C444 38 04                                jr      c,.done_number
 387+ C446 7E                                   ld      a,(hl)
 388+ C447 32 1E C0                             ld      (galactic_chart_dist_amount),a
 389+ C44A C9           .done_number:           ret
 390+ C44B              ;----------------------------------------------------------------------------------------------------------------------------------
 391+ C44B AF           gc_present_system:      xor     a
 392+ C44C 32 16 81                             ld		(XSAV),a
 393+ C44F DD 21 16 E0                          ld      ix,galaxy_data
 394+ C453 3A 08 82     GCCounterLoop:          ld      a,(Galaxy)
 395+ C456                                      MMUSelectGalaxyA
 395+ C456 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 396+ C459 2A 1B 82                             ld      hl,(PresentSystemX)
 397+ C45C DD E5                                push    ix
 398+ C45E 7D                                   ld      a,l
 399+ C45F DD BE 03                             cp      (ix+3)                          ; seed x
 400+ C462 20 14                                jr      nz,.ItsNotThisX
 401+ C464 7C                                   ld      a,h
 402+ C465 DD BE 01                             cp      (ix+1)                          ; seed x
 403+ C468 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
 404+ C46A DD E5                                push    ix
 405+ C46C E1                                   pop     hl
 406+ C46D 11 0F 82                             ld      de,PresentSystemSeeds
 407+ C470 CD 0B 87                             call    copy_seed
 408+ C473 3E FF                                ld      a,$FF
 409+ C475 DD E1                                pop     ix
 410+ C477 C9                                   ret
 411+ C478 E1           .ItsNotThisX:           pop     hl
 412+ C479 ED 34 08 00                          add     hl,8
 413+ C47D E5                                   push    hl
 414+ C47E DD E1                                pop     ix
 415+ C480 3A 16 81                             ld		a,(XSAV)
 416+ C483 3D                                   dec		a
 417+ C484 32 16 81                             ld      (XSAV),a
 418+ C487 FE 00                                cp		0
 419+ C489 C8                                   ret		z
 420+ C48A 18 C7                                jr		GCCounterLoop
 421+ C48C
# file closed: ./Menus//galactic_chart_menu.asm
 642  C48C                  DISPLAY "Bank ",BankMenuGalCht," - Bytes free ",/D, $2000 - ($-MenuGalChtAddr), " - BankMenuGalCht"
 643  C48C              ; Bank 52  ------------------------------------------------------------------------------------------------------------------------
 644  C48C                  SLOT    MenuInventAddr
 645  C48C                  PAGE    BankMenuInvent
 646  C48C              	ORG     MenuInventAddr
 647  C000                  INCLUDE "./Menus/inventory_menu.asm"
# file opened: ./Menus/inventory_menu.asm
   1+ C000 49 6E 76 65  ivnentory_page_marker   DB "Inventory   PG52"
   1+ C004 6E 74 6F 72
   1+ C008 79 20 20 20
   1+ C00C 50 47 35 32
   2+ C010 48 02 1C C0  inventory_boiler_text	DW $0248,INM_inventory
   3+ C014 08 0B 26 C0  						DW $0B08,INM_fuel
   4+ C018 08 13 2C C0  						DW $1308,INM_cash
   5+ C01C
   6+ C01C 49 4E 56 45  INM_inventory 			DB "INVENTORY",0
   6+ C020 4E 54 4F 52
   6+ C024 59 00
   7+ C026 46 75 65 6C  INM_fuel				DB "Fuel:",0
   7+ C02A 3A 00
   8+ C02C 43 61 73 68  INM_cash				DB "Cash:",0
   8+ C030 3A 00
   9+ C032
  10+ C032 30 30 30 30  txt_inventory_amount	DB "00000",0
  10+ C036 30 00
  11+ C038 00 00        inventory_cursor		DW $0000
  12+ C03A              inv_fuel_position		equ	$0B30
  13+ C03A              inv_cash_position		equ	$1330
  14+ C03A
  15+ C03A              inventory_position		equ $2008
  16+ C03A              inventory_amount		equ $80
  17+ C03A              inventory_uom			equ	$B0
  18+ C03A 00           inv_selected_row        DB 0
  19+ C03B
  20+ C03B 00 00 00...  INM_cash_amount			DS 10
  21+ C045 20 43 72 00  INM_cash_UoM            DB " Cr",0
  22+ C049
  23+ C049 26 00        INM_DispAtoDE:          ld h,0
  24+ C04B 6F                                   ld l,a
  25+ C04C 01 F0 D8                             ld	bc,-10000
  26+ C04F CD 65 C0                             call	.Num1
  27+ C052 01 18 FC                             ld	bc,-1000
  28+ C055 CD 65 C0                             call	.Num1
  29+ C058 01 9C FF                             ld	bc,-100
  30+ C05B CD 65 C0                             call	.Num1
  31+ C05E 0E F6                                ld	c,-10
  32+ C060 CD 65 C0                             call	.Num1
  33+ C063 0E FF                                ld	c,-1
  34+ C065 3E 2F        .Num1:	                ld	a,'0'-1
  35+ C067 3C           .Num2:	                inc	a
  36+ C068 09                                   add	hl,bc
  37+ C069 38 FC                                jr	c,.Num2
  38+ C06B ED 42                                sbc	hl,bc
  39+ C06D 12                                   ld	(de),a
  40+ C06E 13                                   inc	de
  41+ C06F C9                                   ret
  42+ C070
  43+ C070              INM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C070
   2++C070              ;">print_boilder_text hl = text structure, b = message count"
   3++C070              .BoilerTextLoop:
   4++C070 C5           	push		bc			; Save Message Count loop value
   5++C071 4E           	ld			c,(hl)		; Get Row into b
   6++C072 23           	inc			hl
   7++C073 46           	ld			b,(hl)		; Get Col into b
   8++C074 23           	inc			hl
   9++C075 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C076 23           	inc			hl
  11++C077 56           	ld			d,(hl)		; Get text address Hi into E
  12++C078 23           	inc			hl
  13++C079 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C07A EB           	ex			de,hl		; now hl = address of text data
  15++C07B 1E FF        	ld			e,txt_status_colour
  16++C07D C5           	push		bc
  17++C07E D1           	pop			de
  18++C07F                  MMUSelectLayer1
  18++C07F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C083 CD C8 E0     	call		l1_print_at
  20++C086 E1           	pop			hl
  21++C087 C1           	pop			bc
  22++C088 10 E6        	djnz		.BoilerTextLoop
  23++C08A C9           	ret
  24++C08B
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  44+ C08B
  45+ C08B DD 22 2F C1  INM_DispDEIXtoIY:       ld (.inmclcn32z),ix
  46+ C08F ED 53 31 C1                          ld (.inmclcn32zIX),de
  47+ C093 DD 21 2B C1                          ld ix,.inmclcn32t+36
  48+ C097 06 09                                ld b,9
  49+ C099 0E 00                                ld c,0
  50+ C09B 3E 30        .inmclcn321:            ld a,'0'
  51+ C09D B7                                   or a
  52+ C09E DD 5E 00     .inmclcn322:            ld e,(ix+0)
  53+ C0A1 DD 56 01                             ld d,(ix+1)
  54+ C0A4 2A 2F C1                             ld hl,(.inmclcn32z)
  55+ C0A7 ED 52                                sbc hl,de
  56+ C0A9 22 2F C1                             ld (.inmclcn32z),hl
  57+ C0AC DD 5E 02                             ld e,(ix+2)
  58+ C0AF DD 56 03                             ld d,(ix+3)
  59+ C0B2 2A 31 C1                             ld hl,(.inmclcn32zIX)
  60+ C0B5 ED 52                                sbc hl,de
  61+ C0B7 22 31 C1                             ld (.inmclcn32zIX),hl
  62+ C0BA 38 04                                jr c,.inmclcn325
  63+ C0BC 0C                                   inc c
  64+ C0BD 3C                                   inc a
  65+ C0BE 18 DE                                jr .inmclcn322
  66+ C0C0 DD 5E 00     .inmclcn325:            ld e,(ix+0)
  67+ C0C3 DD 56 01                             ld d,(ix+1)
  68+ C0C6 2A 2F C1                             ld hl,(.inmclcn32z)
  69+ C0C9 19                                   add hl,de
  70+ C0CA 22 2F C1                             ld (.inmclcn32z),hl
  71+ C0CD DD 5E 02                             ld e,(ix+2)
  72+ C0D0 DD 56 03                             ld d,(ix+3)
  73+ C0D3 2A 31 C1                             ld hl,(.inmclcn32zIX)
  74+ C0D6 ED 5A                                adc hl,de
  75+ C0D8 22 31 C1                             ld (.inmclcn32zIX),hl
  76+ C0DB 11 FC FF                             ld de,-4
  77+ C0DE DD 19                                add ix,de
  78+ C0E0 0C                                   inc c
  79+ C0E1 0D                                   dec c
  80+ C0E2 28 05                                jr z,.inmclcn323
  81+ C0E4 FD 77 00                             ld (iy+0),a
  82+ C0E7 FD 23                                inc iy
  83+ C0E9 10 B0        .inmclcn323:            djnz .inmclcn321
  84+ C0EB 3A 2F C1                             ld a,(.inmclcn32z)
  85+ C0EE C6 30                                add A,'0'
  86+ C0F0 FD 77 00                             ld (iy+0),a
  87+ C0F3 FD 36 02 00                          ld (iy+2),0
  88+ C0F7 FD 7E 00                             ld      a,(IY+0)
  89+ C0FA FD 77 01                             ld      (IY+1),a
  90+ C0FD 3E 2E                                ld      a,"."
  91+ C0FF FD 77 00                             ld      (IY+0),a
  92+ C102 FD 23                                inc     IY
  93+ C104 FD 23                                inc     IY
  94+ C106 C9                                   ret
  95+ C107 01 00 00 00  .inmclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  95+ C10B 0A 00 00 00
  95+ C10F 64 00 00 00
  95+ C113 E8 03 00 00
  95+ C117 10 27 00 00
  96+ C11B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
  96+ C11F 40 42 0F 00
  96+ C123 80 96 98 00
  96+ C127 00 E1 F5 05
  96+ C12B 00 CA 9A 3B
  97+ C12F 00 00        .inmclcn32z             ds 2
  98+ C131 00 00        .inmclcn32zIX           ds 2
  99+ C133
 100+ C133              INM_GetFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++C133
   2++C133
   3++C133 3A 7B 86     	ld		a,(Fuel)
   4++C136 11 26 A6     	ld		de,txt_fuel_level
   5++C139 0E 9C        	ld	c, -100
   6++C13B CD 45 C1     	call	.Num1
   7++C13E 0E F6        	ld	c,-10
   8++C140 CD 45 C1     	call	.Num1
   9++C143 0E FF        	ld	c,-1
  10++C145              .Num1:
  11++C145 06 2F        	ld	b,'0'-1
  12++C147              .Num2:
  13++C147 04           	inc		b
  14++C148 81           	add		a,c
  15++C149 38 FC        	jr		c,.Num2
  16++C14B 91           	sub 	c
  17++C14C C5           	push	bc
  18++C14D F5           	push	af
  19++C14E 79           	ld		a,c
  20++C14F FE FF        	cp		-1
  21++C151 CC 5A C1     	call	z,.InsertDot
  22++C154 78           	ld		a,b
  23++C155 12           	ld		(de),a
  24++C156 13           	inc		de
  25++C157 F1           	pop		af
  26++C158 C1           	pop		bc
  27++C159 C9           	ret
  28++C15A              .InsertDot:
  29++C15A 3E 2E        	ld		a,'.'
  30++C15C 12           	ld		(de),a
  31++C15D 13           	inc		de
  32++C15E C9           	ret
  33++C15F
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 101+ C15F
 102+ C15F              ; "A = stock item number"
 103+ C15F              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C15F 47           PrintInvItem:           ld		b,a
 105+ C160 21 7E 86                             ld		hl,CargoTonnes
 106+ C163 ED 31                                add		hl,a
 107+ C165 7E                                   ld		a,(hl)
 108+ C166 4F                                   ld		c,a
 109+ C167 FE 00                                cp		0
 110+ C169 C8                                   ret		z
 111+ C16A 78                                   ld		a,b
 112+ C16B C5                                   push	bc						; push item nbr + quantity
 113+ C16C                                      MMUSelectStockTable
 113+ C16C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 114+ C170 21 88 E0                             ld		hl, StockItemTable
 115+ C173 CD E9 89                             call	getTableText
 116+ C176 7E           .ItemItemName           ld		a,(hl)
 117+ C177 21 14 8D                             ld		hl, WordIdx
 118+ C17A CD E9 89                             call	getTableText
 119+ C17D ED 5B 38 C0                          ld		de,(inventory_cursor)
 120+ C181                                      MMUSelectLayer1
 120+ C181 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 121+ C185 CD C8 E0                             call	l1_print_at
 122+ C188 C1           .ItemAmount:            pop		bc						; b = item number, c = quantity
 123+ C189 C5                                   push	bc
 124+ C18A 79                                   ld		a,c
 125+ C18B 11 32 C0                             ld		de,txt_inventory_amount
 126+ C18E CD 49 C0                             call	INM_DispAtoDE
 127+ C191 21 32 C0                             ld		hl,txt_inventory_amount
 128+ C194 E5                                   push	hl
 129+ C195 7E           .ZeroLoop:              ld		a,(hl)
 130+ C196 FE 30                                cp		'0'
 131+ C198 20 05                                jr		nz,.NotZero
 132+ C19A 36 20        .ZeroDigit:             ld		(hl),' '
 133+ C19C 23                                   inc		hl
 134+ C19D 18 F6                                jr		.ZeroLoop
 135+ C19F ED 5B 38 C0  .NotZero:               ld		de,(inventory_cursor)
 136+ C1A3 E1                                   pop		hl
 137+ C1A4 1E 80                                ld		e,inventory_amount
 138+ C1A6                                      MMUSelectLayer1
 138+ C1A6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 139+ C1AA CD C8 E0                             call	l1_print_at
 140+ C1AD              .ItemMeasure:	        MMUSelectStockTable
 140+ C1AD ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 141+ C1B1 21 88 E0                             ld		hl, StockItemTable
 142+ C1B4 C1                                   pop		bc
 143+ C1B5 78                                   ld		a,b
 144+ C1B6 CD E9 89                             call	getTableText
 145+ C1B9 ED 34 07 00                          add		hl,7
 146+ C1BD 7E                                   ld		a,(hl)
 147+ C1BE 21 14 8D                             ld		hl,WordIdx
 148+ C1C1 CD E9 89                             call	getTableText
 149+ C1C4 ED 5B 38 C0                          ld		de,(inventory_cursor)
 150+ C1C8 1E B0                                ld		e,inventory_uom
 151+ C1CA                                      MMUSelectLayer1
 151+ C1CA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C1CE CD C8 E0                             call	l1_print_at
 153+ C1D1 3A 39 C0                             ld 		a,(inventory_cursor+1)
 154+ C1D4 C6 08                                add		a,8
 155+ C1D6 32 39 C0                             ld 		(inventory_cursor+1),a
 156+ C1D9 C9                                   ret
 157+ C1DA              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ C1DA 2A 79 86     INM_GetCash:            ld		hl,(Cash+2)
 159+ C1DD EB                                   ex      de,hl
 160+ C1DE DD 2A 77 86                          ld      ix,(Cash)
 161+ C1E2 FD 21 3B C0                          ld		iy,INM_cash_amount
 162+ C1E6 CD 8B C0                             call 	INM_DispDEIXtoIY
 163+ C1E9 FD E5                                push    IY
 164+ C1EB D1                                   pop     de
 165+ C1EC 21 45 C0                             ld      hl,INM_cash_UoM
 166+ C1EF 01 04 00                             ld      bc,4
 167+ C1F2 ED B0                                ldir
 168+ C1F4 C9                                   ret
 169+ C1F5              ;----------------------------------------------------------------------------------------------------------------------------------
 170+ C1F5              draw_inventory_menu:    InitNoDoubleBuffer
 170+ C1F5             >                            MMUSelectLayer1
 170+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 170+ C1F9 CD 80 E0    >                            call	l1_cls
 170+ C1FC 3E 07       >                            ld		a,7
 170+ C1FE CD 9B E0    >                            call	l1_attr_cls_to_a
 170+ C201             >                            MMUSelectLayer2
 170+ C201 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 170+ C205 CD 09 E0    >                            call    asm_l2_double_buffer_off
 170+ C208 CD FF E0    >                            call	l2_cls	; Get some space
 170+ C20B             >                            MMUSelectSpriteBank
 170+ C20B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 170+ C20F CD 6E E5    >                            call    sprite_cls_cursors
 171+ C212 3E 08                                ld      a,$08
 172+ C214 32 1E 81                             ld      (MenuIdMax),a
 173+ C217                                      MMUSelectSpriteBank
 173+ C217 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 174+ C21B CD 6E E5                             call        sprite_cls_cursors
 175+ C21E 01 01 01     .Drawbox:               ld		bc,$0101
 176+ C221 11 FD BE                             ld		de,$BEFD
 177+ C224 3E C0                                ld		a,$C0
 178+ C226                                      MMUSelectLayer2
 178+ C226 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 179+ C22A CD 49 E2                             call	l2_draw_box
 180+ C22D 01 01 0A                             ld		bc,$0A01
 181+ C230 11 C0 FE                             ld		de,$FEC0
 182+ C233 CD B3 E2                             call	l2_draw_horz_line
 183+ C236 06 03        .StaticText:	        ld		b,3
 184+ C238 21 10 C0                             ld		hl,inventory_boiler_text
 185+ C23B CD 70 C0                             call	INM_print_boiler_text
 186+ C23E CD 33 C1     .DisplayFuel:           call	INM_GetFuelLevel
 187+ C241 21 26 A6                             ld		hl, txt_fuel_level
 188+ C244 7E                                   ld		a,(hl)
 189+ C245 FE 30                                cp		'0'
 190+ C247 20 01                                jr		nz,.PrintFuel
 191+ C249 23           .SkipLeadingZero:	    inc		hl
 192+ C24A 1E FF        .PrintFuel:             ld		e,txt_status_colour
 193+ C24C 01 30 0B                             ld		bc,inv_fuel_position
 194+ C24F                                      MMUSelectLayer2
 194+ C24F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ C253 CD C2 E1                             call	l2_print_at
 196+ C256 CD DA C1     .DisplayCash:           call	INM_GetCash
 197+ C259 21 3B C0                             ld		hl,INM_cash_amount
 198+ C25C 1E FF                                ld		e,txt_status_colour
 199+ C25E 01 30 13                             ld		bc,inv_cash_position
 200+ C261                                      MMUSelectLayer2
 200+ C261 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 201+ C265 CD C2 E1                             call	l2_print_at						; now we have the correct integer
 202+ C268 01 30 13                             ld		bc,inv_cash_position
 203+ C26B 21 3B C0                             ld		hl,INM_cash_amount
 204+ C26E 3E 00        .DisplayInventory:      ld		a,0
 205+ C270 21 08 20                             ld		hl,inventory_position
 206+ C273 22 38 C0                             ld		(inventory_cursor),hl
 207+ C276 F5           .InvLoop:	            push	af
 208+ C277 CD 5F C1                             call	PrintInvItem
 209+ C27A F1                                   pop		af
 210+ C27B 3C                                   inc		a
 211+ C27C FE 11                                cp		17
 212+ C27E 38 F6                                jr		c,.InvLoop
 213+ C280 C9                                   ret
 214+ C281
# file closed: ./Menus/inventory_menu.asm
 648  C281                  DISPLAY "Bank ",BankMenuInvent," - Bytes free ",/D, $2000 - ($-MenuInventAddr), " - BankMenuInvent"
 649  C281              ; Bank 53  ------------------------------------------------------------------------------------------------------------------------
 650  C281                  SLOT    MenuSystemAddr
 651  C281                  PAGE    BankMenuSystem
 652  C281              	ORG     MenuSystemAddr
 653  C000                  INCLUDE "./Menus/system_data_menu.asm"
# file opened: ./Menus/system_data_menu.asm
   1+ C000 53 79 73 74  system_data_page_marker DB "System      PG53"
   1+ C004 65 6D 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 35 33
   2+ C010
   3+ C010 40 02 70 8E  plant_boiler_text		DW $0240,TextBuffer
   4+ C014 80 02 36 8F  						DW $0280,name_expanded
   5+ C018 08 0B A0 8B  						DW $0B08,WordDistance
   6+ C01C 08 13 A9 8B  						DW $1308,WordEconomy
   7+ C020 08 1B B1 8B  						DW $1B08,WordGovernment
   8+ C024 08 23 BC 8B  						DW $2308,WordTechLevel
   9+ C028 08 2B C6 8B  						DW $2B08,WordPopulation
  10+ C02C 08 3B E1 8B  						DW $3B08,WordGross
  11+ C030 38 3B E7 8B  						DW $3B38,WordProductivity
  12+ C034 08 43 F4 8B  						DW $4308,WordAverage
  13+ C038 48 43 FC 8B  						DW $4348,WordRadius
  14+ C03C 60 0B 70 8E  planet_zero_dist		DW $0B60,TextBuffer
  15+ C040 60 13 70 8E  planet_economy_disp		DW $1360,TextBuffer
  16+ C044 0A 00        techlevel_value			DB 10,0
  17+ C046 00 00 00...  distance_value          DS 20,0
  18+ C05A 20 4C 69 67  distance_uom            DB " Light Years",0
  18+ C05E 68 74 20 59
  18+ C062 65 61 72 73
  18+ C066 00
  19+ C067 00 00 00...  radius_value            DS 20
  20+ C07B 00                                   DB 0
  21+ C07C 20 6B 6D 00  radius_uom              DB " km",0
  22+ C080 00 00 00...  population_value        DS 20
  23+ C094 00                                   DB 0
  24+ C095 20 42 69 6C  population_uom          DB " Billion",0
  24+ C099 6C 69 6F 6E
  24+ C09D 00
  25+ C09E 00 00 00...  productivity_value      DS 20
  26+ C0B2 00                                   DB 0
  27+ C0B3 20 4D 20 43  productivity_uom        DB " M CR",0
  27+ C0B7 52 00
  28+ C0B9
  29+ C0B9              GovernmentIndexOffset	EQU 75
  30+ C0B9              DistanceScreenPos       EQU $0B60
  31+ C0B9              GovernmentScreenPos		EQU $1B60
  32+ C0B9              TechLevelScreenPos		EQU $2360
  33+ C0B9              SpeciesScreenPos        EQU $3308
  34+ C0B9
  35+ C0B9 00           system_present_or_target DB 0
  36+ C0BA 00 00        saved_present			 DW 0
  37+ C0BC
  38+ C0BC
  39+ C0BC 00 00 00...  SD_present_name         DS  30
  40+ C0DA 00                                   DB  0
  41+ C0DB 00 00 00...  SD_target_name          DS  30
  42+ C0F9 00                                   DB  0
  43+ C0FA 00 00 00...  SD_species              DS 30
  44+ C118 00                                   DB 0
  45+ C119 00 00 00...  SD_planet_description   DS 300,0
  46+ C245
  47+ C245 00           SDDisplayGovernment     DB 0
  48+ C246 00           SDDisplayEconomy        DB 0
  49+ C247 00           SDDisplayTekLevel       DB 0
  50+ C248 00           SDDisplayPopulation     DB 0
  51+ C249 00 00        SDDisplayProductivity   DW 0
  52+ C24B 00 00        SDDisplayRadius         DW 0
  53+ C24D              SDDataLength            EQU $ - SDDisplayEconomy
  54+ C24D
  55+ C24D 21 0A E9     SD_copy_system_data:    ld      hl,GalaxyDisplayGovernment
  56+ C250 11 45 C2                             ld      de,SDDisplayGovernment
  57+ C253 01 07 00                             ld      bc,SDDataLength
  58+ C256 ED B0                                ldir
  59+ C258 21 47 C2     .DisplayTechPlus1:      ld     hl,SDDisplayTekLevel
  60+ C25B 34                                   inc    (hl)
  61+ C25C C9                                   ret
  62+ C25D
  63+ C25D 21 7F E8     SD_copy_to_name:        ld      hl,GalaxyExpandedName
  64+ C260 01 1E 00                             ld      bc,30
  65+ C263 ED B0                                ldir
  66+ C265 C9                                   ret
  67+ C266
  68+ C266 21 64 F1     SD_copy_species:        ld      hl,GalaxySpecies
  69+ C269 11 FA C0                             ld      de,SD_species
  70+ C26C 01 1E 00                             ld      bc,30
  71+ C26F ED B0                                ldir
  72+ C271 C9                                   ret
  73+ C272
  74+ C272 21 85 F1     SD_copy_description:    ld      hl,GalaxyPlanetDescription
  75+ C275 11 19 C1                             ld      de,SD_planet_description
  76+ C278 7E           SDCopyLoop:             ld      a,(hl)
  77+ C279 FE 00                                cp      0
  78+ C27B 28 05                                jr      z,.SD_Copy_Done
  79+ C27D ED A0                                ldi
  80+ C27F C3 78 C2                             jp      SDCopyLoop
  81+ C282 12           .SD_Copy_Done:          ld      (de),a
  82+ C283 C9                                   ret
  83+ C284
  84+ C284 26 00        SDM_DispAtoDE:          ld h,0
  85+ C286 6F                                   ld l,a
  86+ C287 01 F0 D8                             ld	bc,-10000
  87+ C28A CD A0 C2                             call	.Num1
  88+ C28D 01 18 FC                             ld	bc,-1000
  89+ C290 CD A0 C2                             call	.Num1
  90+ C293 01 9C FF                             ld	bc,-100
  91+ C296 CD A0 C2                             call	.Num1
  92+ C299 0E F6                                ld	c,-10
  93+ C29B CD A0 C2                             call	.Num1
  94+ C29E 0E FF                                ld	c,-1
  95+ C2A0 3E 2F        .Num1:	                ld	a,'0'-1
  96+ C2A2 3C           .Num2:	                inc	a
  97+ C2A3 09                                   add	hl,bc
  98+ C2A4 38 FC                                jr	c,.Num2
  99+ C2A6 ED 42                                sbc	hl,bc
 100+ C2A8 12                                   ld	(de),a
 101+ C2A9 13                                   inc	de
 102+ C2AA C9                                   ret
 103+ C2AB
 104+ C2AB
 105+ C2AB 3A 08 82     sdm_calc_distance:      ld      a,(Galaxy)
 106+ C2AE                                      MMUSelectGalaxyA
 106+ C2AE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 107+ C2B1 ED 4B 1B 82                          ld      bc,(PresentSystemX)
 108+ C2B5 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 109+ C2B9 ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 110+ C2BD ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 111+ C2C1 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 112+ C2C4 C9           .done_number:           ret
 113+ C2C5
 114+ C2C5
 115+ C2C5              SDM_print_boiler_text:
 116+ C2C5                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C2C5
   2++C2C5              ;">print_boilder_text hl = text structure, b = message count"
   3++C2C5              .BoilerTextLoop:
   4++C2C5 C5           	push		bc			; Save Message Count loop value
   5++C2C6 4E           	ld			c,(hl)		; Get Row into b
   6++C2C7 23           	inc			hl
   7++C2C8 46           	ld			b,(hl)		; Get Col into b
   8++C2C9 23           	inc			hl
   9++C2CA 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C2CB 23           	inc			hl
  11++C2CC 56           	ld			d,(hl)		; Get text address Hi into E
  12++C2CD 23           	inc			hl
  13++C2CE E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C2CF EB           	ex			de,hl		; now hl = address of text data
  15++C2D0 1E FF        	ld			e,txt_status_colour
  16++C2D2 C5           	push		bc
  17++C2D3 D1           	pop			de
  18++C2D4                  MMUSelectLayer1
  18++C2D4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C2D8 CD C8 E0     	call		l1_print_at
  20++C2DB E1           	pop			hl
  21++C2DC C1           	pop			bc
  22++C2DD 10 E6        	djnz		.BoilerTextLoop
  23++C2DF C9           	ret
  24++C2E0
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 117+ C2E0
 118+ C2E0 7E           PlanetLeftJustifyLoop:  ld      a,(hl)
 119+ C2E1 FE 30                                cp      "0"
 120+ C2E3 C0                                   ret      nz
 121+ C2E4 23                                   inc     hl
 122+ C2E5 10 F9                                djnz    PlanetLeftJustifyLoop
 123+ C2E7 C9                                   ret
 124+ C2E8
 125+ C2E8 00 00        SD_working_cursor       DW   0
 126+ C2EA
 127+ C2EA 00 00 00...  sd_copy_of_seed         DS 6
 128+ C2F0
 129+ C2F0              draw_system_data_menu:  InitNoDoubleBuffer
 129+ C2F0             >                            MMUSelectLayer1
 129+ C2F0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 129+ C2F4 CD 80 E0    >                            call	l1_cls
 129+ C2F7 3E 07       >                            ld		a,7
 129+ C2F9 CD 9B E0    >                            call	l1_attr_cls_to_a
 129+ C2FC             >                            MMUSelectLayer2
 129+ C2FC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 129+ C300 CD 09 E0    >                            call    asm_l2_double_buffer_off
 129+ C303 CD FF E0    >                            call	l2_cls	; Get some space
 129+ C306             >                            MMUSelectSpriteBank
 129+ C306 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 129+ C30A CD 6E E5    >                            call    sprite_cls_cursors
 130+ C30D                                      ZeroA
 130+ C30D AF          >                        xor a
 131+ C30E 32 B9 C0                             ld      (system_present_or_target),a
 132+ C311 3E 08                                ld		a,8
 133+ C313 32 1E 81                             ld		(MenuIdMax),a
 134+ C316 3A 08 82     .SelectGalaxy:          ld      a,(Galaxy)
 135+ C319                                      MMUSelectGalaxyA
 135+ C319 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 136+ C31C ED 4B 1D 82  .CheckCursorOrHome:     ld      bc,(TargetSystemX)              ; Find out if we have to work on hyperspace or normal cursor
 137+ C320 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 138+ C324 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 139+ C328 CD 64 FC                             call    galaxy_system_under_cursor
 140+ C32B FE FF        .IsCursorOnSystem:      cp      $FF                               ; if a = 0 then failed
 141+ C32D 28 0F                                jr      z,.FoundASystem
 142+ C32F ED 4B 1B 82  .UsePresentSystem:      ld      bc,(PresentSystemX)
 143+ C333 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 144+ C337 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 145+ C33B CD 64 FC                             call    galaxy_system_under_cursor
 146+ C33E ED 4B 1D 82  .FoundASystem:          ld      bc,(TargetSystemX)
 147+ C342 2A 1B 82                             ld      hl,(PresentSystemX)
 148+ C345 78                                   ld      a,b
 149+ C346 BC                                   cp      h
 150+ C347 20 04                                jr      nz,.DiffCoord
 151+ C349 79                                   ld      a,c
 152+ C34A BD                                   cp      l
 153+ C34B 28 05                                jr      z,.SameCoord
 154+ C34D 3E FF        .DiffCoord:             ld      a,$FF
 155+ C34F 32 B9 C0                             ld      (system_present_or_target),a
 156+ C352 21 09 82     .SameCoord:             ld      hl,WorkingSeeds            ; found a system so save it
 157+ C355 11 EA C2                             ld      de,sd_copy_of_seed
 158+ C358 CD 02 FA                             call    galaxy_copy_seed
 159+ C35B CD C5 FA     .GetSystemName:         call    GalaxyDigramWorkings       ; we have galaxy working seed populated now
 160+ C35E 01 01 01     .Drawbox:               ld		bc,$0101
 161+ C361 11 FD BE                             ld		de,$BEFD
 162+ C364 3E C0                                ld		a,$C0
 163+ C366                                      MMUSelectLayer2
 163+ C366 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 164+ C36A CD 49 E2                             call	l2_draw_box
 165+ C36D 01 01 0A                             ld		bc,$0A01
 166+ C370 11 C0 FE                             ld		de,$FEC0
 167+ C373 CD B3 E2                             call	l2_draw_horz_line
 168+ C376 3E 0E        .ExpandStatic:          ld		a,14
 169+ C378 CD B1 8E                             call	expandTokenToString
 170+ C37B 3A 08 82     .TargetSystem:          ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 171+ C37E                                      MMUSelectGalaxyA
 171+ C37E ED 92 57    >                     nextreg GalaxyDataMMU,       a
 172+ C381 ED 4B E8 C2                          ld      bc, (SD_working_cursor)
 173+ C385               ;   call    galaxy_name_at_bc
 174+ C385                ;  cp      $FF               ; if we didn't get a
 175+ C385 21 EA C2                             ld      hl,sd_copy_of_seed
 176+ C388 11 F8 E8                             ld      de,GalaxyWorkingSeed
 177+ C38B CD 02 FA                             call    galaxy_copy_seed
 178+ C38E CD 6D F9                             call    galaxy_planet_data                              ; Geneate galaxy data from working seed
 179+ C391 CD 4D C2                             call    SD_copy_system_data
 180+ C394 11 36 8F                             ld      de,name_expanded
 181+ C397 CD 5D C2                             call    SD_copy_to_name
 181+ C39A
 182+ C39A 11 98 13                             ld      de,hyperspace_position
 183+ C39D 21 36 8F                             ld      hl,name_expanded
 184+ C3A0 06 0B        .StaticText:	        ld		b,11
 185+ C3A2 21 10 C0                             ld		hl,plant_boiler_text
 186+ C3A5 CD C5 C2                             call	SDM_print_boiler_text
 187+ C3A8 3A B9 C0     .CalcDistance:          ld		a,(system_present_or_target)
 188+ C3AB FE 00                                cp		0
 189+ C3AD 28 2B                                jr		z,.ZeroDistance
 190+ C3AF CD AB C2     .NotZero:               call    sdm_calc_distance
 191+ C3B2 DD 2A A4 81  .DisplayDistance:       ld      ix,(Distance)
 192+ C3B6 11 00 00                             ld      de,0
 193+ C3B9 FD 21 46 C0                          ld      iy,distance_value
 194+ C3BD CD BE 98                             call    DispDEIXtoIY1DP
 195+ C3C0 FD E5        .AddDistUo              push    iy
 196+ C3C2 E1                                   pop     hl
 197+ C3C3 23                                   inc     hl
 198+ C3C4 11 5A C0                             ld      de,distance_uom
 199+ C3C7 CD F0 C4                             call    SDTackOnUOMtoHL
 200+ C3CA 11 60 0B                             ld      de,DistanceScreenPos
 201+ C3CD 21 46 C0                             ld      hl,distance_value
 202+ C3D0                                      MMUSelectLayer1
 202+ C3D0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 203+ C3D4 CD C8 E0                             call	l1_print_at
 204+ C3D7 C3 E7 C3                             jp      .DisplayEconomy
 205+ C3DA 3E 18        .ZeroDistance:          ld		a,24						; print literal zero dist
 206+ C3DC CD B1 8E                             call	expandTokenToString
 207+ C3DF 06 01                                ld		b,1
 208+ C3E1 21 3C C0                             ld		hl,planet_zero_dist
 209+ C3E4 CD C5 C2                             call	SDM_print_boiler_text
 210+ C3E7 3A 46 C2     .DisplayEconomy:        ld		a,(SDDisplayEconomy)
 211+ C3EA C6 0F                                add     a,TextEconomyOffset
 212+ C3EC CD B1 8E                             call	expandTokenToString
 213+ C3EF 06 01                                ld		b,1
 214+ C3F1 21 40 C0                             ld		hl,planet_economy_disp
 215+ C3F4 CD C5 C2                             call	SDM_print_boiler_text
 216+ C3F7 3A 45 C2     .DisplayGovernment:     ld		a,(SDDisplayGovernment)
 217+ C3FA C6 4B                                add		a,TextGovOffset
 218+ C3FC CD A3 8E                             call	WordIndexToAddress
 219+ C3FF 11 60 1B                             ld		de,GovernmentScreenPos
 220+ C402                                      MMUSelectLayer1
 220+ C402 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 221+ C406 CD C8 E0                             call	l1_print_at
 222+ C409 3A 47 C2     .DisplayTechLevel:      ld		a,(SDDisplayTekLevel)
 223+ C40C 11 44 C0                             ld		de,techlevel_value
 224+ C40F CD 84 C2                             call    SDM_DispAtoDE
 225+ C412 AF                                   xor     a
 226+ C413 12                                   ld      (de),a
 227+ C414 21 44 C0                             ld      hl,techlevel_value
 228+ C417 06 05                                ld      b,5
 229+ C419 CD E0 C2                             call    PlanetLeftJustifyLoop
 230+ C41C 11 60 23                             ld		de,TechLevelScreenPos
 231+ C41F                                      MMUSelectLayer1
 231+ C41F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 232+ C423 CD C8 E0                             call	l1_print_at
 233+ C426 3A 48 C2     .DisplayPopulation:     ld      a,(SDDisplayPopulation)
 234+ C429 DD 26 00                             ld      ixh,0
 235+ C42C DD 6F                                ld      ixl,a
 236+ C42E 11 00 00                             ld      de,0
 237+ C431 FD 21 80 C0                          ld      iy,population_value
 238+ C435 CD BE 98                             call    DispDEIXtoIY1DP
 239+ C438 FD E5        .AddUoM:                push    iy
 240+ C43A E1                                   pop     hl
 241+ C43B 23                                   inc     hl
 242+ C43C 11 95 C0                             ld      de,population_uom
 243+ C43F CD F0 C4                             call    SDTackOnUOMtoHL
 244+ C442 11 60 2B                             ld      de,$2B60
 245+ C445 21 80 C0                             ld      hl,population_value
 246+ C448                                      MMUSelectLayer1
 246+ C448 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 247+ C44C CD C8 E0                             call	l1_print_at
 248+ C44F              ;SDDisplayPopulation     DB 0
 249+ C44F 3A 08 82     .DisplayPopulationType: ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 250+ C452                                      MMUSelectGalaxyA
 250+ C452 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 251+ C455 CD DC F6                             call    galaxy_get_species
 252+ C458 CD 66 C2                             call    SD_copy_species
 253+ C45B 21 FA C0                             ld		hl,SD_species
 254+ C45E 11 08 33                             ld		de,SpeciesScreenPos
 255+ C461                                      MMUSelectLayer1
 255+ C461 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 256+ C465 CD C8 E0                             call	l1_print_at
 257+ C468 2A 49 C2     .DisplayProductivity:   ld      hl,(SDDisplayProductivity)
 258+ C46B E5                                   push    hl
 259+ C46C DD E1                                pop     ix
 260+ C46E 11 00 00                             ld      de,0
 261+ C471 FD 21 9E C0                          ld      iy,productivity_value
 262+ C475 CD CD 98                             call    DispDEIXtoIY
 263+ C478 FD E5        .AddProdUoM:            push    iy
 264+ C47A E1                                   pop     hl
 265+ C47B 23                                   inc     hl
 266+ C47C 11 B3 C0                             ld      de,productivity_uom
 267+ C47F CD F0 C4                             call    SDTackOnUOMtoHL
 268+ C482 11 A0 3B                             ld      de,$3BA0
 269+ C485 21 9E C0                             ld      hl,productivity_value
 270+ C488                                      MMUSelectLayer1
 270+ C488 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 271+ C48C CD C8 E0                             call	l1_print_at
 272+ C48F 3A 08 82     .DisplayRadius:         ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 273+ C492                                      MMUSelectGalaxyA
 273+ C492 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 274+ C495 2A 10 E9                             ld      hl,(GalaxyDisplayRadius)
 275+ C498 E5                                   push    hl
 276+ C499 DD E1                                pop     ix
 277+ C49B 11 00 00                             ld      de,0
 278+ C49E FD 21 67 C0                          ld      iy,radius_value
 279+ C4A2 CD CD 98                             call    DispDEIXtoIY
 280+ C4A5 FD E5        .AddRadiusUoM:          push    iy
 281+ C4A7 E1                                   pop     hl
 282+ C4A8 23                                   inc     hl
 283+ C4A9 11 7C C0                             ld      de,radius_uom
 284+ C4AC CD F0 C4                             call    SDTackOnUOMtoHL
 285+ C4AF 21 67 C0                             ld      hl,radius_value
 286+ C4B2 11 A0 43                             ld      de,$43A0
 287+ C4B5                                      MMUSelectLayer1
 287+ C4B5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 288+ C4B9 CD C8 E0                             call	l1_print_at
 289+ C4BC 3A 08 82     .DisplayDescription:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 290+ C4BF                                      MMUSelectGalaxyA
 290+ C4BF ED 92 57    >                     nextreg GalaxyDataMMU,       a
 291+ C4C2 11 F8 E8     .CopySaveToGal:         ld      de,GalaxyWorkingSeed
 292+ C4C5 21 EA C2                             ld      hl,sd_copy_of_seed
 293+ C4C8 CD 02 FA                             call    galaxy_copy_seed
 294+ C4CB ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 295+ C4CF CD 6F F8                             call     GalaxyGenerateDesc
 296+ C4D2 CD 72 C2                             call    SD_copy_description
 297+ C4D5 11 08 57                             ld      de,$5708
 298+ C4D8 21 19 C1                             ld      hl,SD_planet_description
 299+ C4DB                                      MMUSelectLayer1
 299+ C4DB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 300+ C4DF CD 15 E1                             call	l1_print_at_wrap
 301+ C4E2 C9                                   ret
 302+ C4E3
 303+ C4E3              ; HL = value to add on
 304+ C4E3              ; de = Unit of Measure
 305+ C4E3 7E           SDAddUoMtoHL:           ld      a,(hl)
 306+ C4E4 FE 00                                cp      0
 307+ C4E6 28 03                                jr      z,.FoundEnd
 308+ C4E8 23                                   inc     hl
 309+ C4E9 18 F8                                jr      SDAddUoMtoHL
 310+ C4EB EB           .FoundEnd:              ex      de,hl
 311+ C4EC CD 78 C2                             call    SDCopyLoop
 312+ C4EF C9                                   ret
 313+ C4F0
 314+ C4F0              ; works on HL already being at end
 315+ C4F0              ; de = Unit of Measure
 316+ C4F0 23           SDTackOnUOMtoHL:        inc     hl
 317+ C4F1 EB                                   ex      hl,de
 318+ C4F2 CD 78 C2                             call    SDCopyLoop
 319+ C4F5 C9                                   ret
 320+ C4F6              ;
 321+ C4F6              ;
 322+ C4F6              ;    SDDisplayEconomy        DB 0
 323+ C4F6              ;SDDisplayGovernment     DB 0
 324+ C4F6              ;SDDisplayEcononmy       DB 0
 325+ C4F6              ;SDDisplayTekLevel       DB 0
 326+ C4F6              ;
 327+ C4F6              ;SDDisplayProductivity   DW 0
 328+ C4F6              ;SDDisplayRadius         DW 0
 329+ C4F6              ;SDDataLength            EQU $ - SDDisplayEconomy
 330+ C4F6              ;
 331+ C4F6
 332+ C4F6
 333+ C4F6
 334+ C4F6
 335+ C4F6
 336+ C4F6              ;; PREsent ssytem
 337+ C4F6              ;; hyperspace systrem
 338+ C4F6              ;.StatusText:
 339+ C4F6              ;	; get closet ssytem to cursor
 340+ C4F6              ;	call	get_cmdr_condition
 341+ C4F6              ;	ld		hl, ConditionNameIdx
 342+ C4F6              ;	call	getTableText
 343+ C4F6              ;	ld		de,condition_position
 344+ C4F6              ;	call	l1_print_at
 345+ C4F6              ;.DisplayFuel:
 346+ C4F6              ;	call	GetFuelLevel
 347+ C4F6              ;	ld		hl, txt_fuel_level
 348+ C4F6              ;	ld		a,(hl)
 349+ C4F6              ;	cp		'0'
 350+ C4F6              ;	jr		nz,.PrintFuel
 351+ C4F6              ;.SkipLeadingZero:
 352+ C4F6              ;	inc		hl
 353+ C4F6              ;.PrintFuel:
 354+ C4F6              ;	ld		de,fuel_position
 355+ C4F6              ;	call	l1_print_at
 356+ C4F6              ;.DisplayCash:
 357+ C4F6              ;	call	GetCash
 358+ C4F6              ;	ld		hl,txt_cash_amount
 359+ C4F6              ;	ld		de,cash_position
 360+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 361+ C4F6              ;	ld		bc,cash_position
 362+ C4F6              ;	ld		hl,txt_cash_amount
 363+ C4F6              ;.CorrectPosition:
 364+ C4F6              ;	ld		a,(hl)
 365+ C4F6              ;	cp		0
 366+ C4F6              ;	jr		z,.DoneCorrection
 367+ C4F6              ;.StillDigits:
 368+ C4F6              ;	ld		a,c
 369+ C4F6              ;	add		a,8								; its 1 character forwards
 370+ C4F6              ;	ld		c,a
 371+ C4F6              ;	inc		hl
 372+ C4F6              ;	jr		.CorrectPosition
 373+ C4F6              ;.DoneCorrection:
 374+ C4F6              ;	ld		hl,txt_cash_decimal
 375+ C4F6              ;	ld		d,b
 376+ C4F6              ;	ld		e,c
 377+ C4F6              ;	call	l1_print_at
 378+ C4F6              ;.PrintLegalStatus:
 379+ C4F6              ;	ld		a,(FugitiveInnocentStatus)
 380+ C4F6              ;	cp		0
 381+ C4F6              ;	jr		nz,.Naughty
 382+ C4F6              ;	ld		hl,WordClean
 383+ C4F6              ;	jr		.DisplayLegalStatus
 384+ C4F6              ;.Naughty:
 385+ C4F6              ;	cp		50
 386+ C4F6              ;	jr		c,.JustOffender
 387+ C4F6              ;.VeryNaughty:
 388+ C4F6              ;	ld		hl,WordFugitive
 389+ C4F6              ;	jr		.DisplayLegalStatus
 390+ C4F6              ;.JustOffender:
 391+ C4F6              ;	ld		hl,WordOffender
 392+ C4F6              ;.DisplayLegalStatus:
 393+ C4F6              ;	ld		de,legal_status_position
 394+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 395+ C4F6              ;
 396+ C4F6 C9           	ret
 397+ C4F7
# file closed: ./Menus/system_data_menu.asm
 654  C4F7                  DISPLAY "Bank ",BankMenuSystem," - Bytes free ",/D, $2000 - ($-MenuSystemAddr), " - BankMenuSystem"
 655  C4F7              ; Bank 54  ------------------------------------------------------------------------------------------------------------------------
 656  C4F7                  SLOT    MenuMarketAddr
 657  C4F7                  PAGE    BankMenuMarket
 658  C4F7                  ORG     MenuMarketAddr
 659  C000                  INCLUDE "./Menus/market_prices_menu.asm"
# file opened: ./Menus/market_prices_menu.asm
   1+ C000 4D 61 72 6B  market_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 70 8E  market_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 36 8F  						DW $0220,name_expanded
   4+ C018 80 0B 90 8A  						DW $0B80,WordUnit
   5+ C01C B0 0B D9 8C  						DW $0BB0,WordQuantity
   6+ C020 08 13 B7 8C  						DW $1308,WordProduct
   7+ C024 60 13 BF 8C  						DW $1360,WordUoM
   8+ C028 80 13 C3 8C  						DW $1380,WordPrice
   9+ C02C B0 13 E7 8C  						DW $13B0,WordStock
  10+ C030 E0 13 E3 8C  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_market_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_market_quantity     DB "999",0
  24+ C03D 39 39 39 00  txt_market_cargo        DB "999",0
  25+ C041 00 00        market_cursor			DW  $0000
  26+ C043              market_position			equ $2008
  27+ C043              market_uom				equ	$68
  28+ C043              market_price 			equ $88
  29+ C043              market_Quantity			equ	$B0
  30+ C043              market_Cargo            equ $E0
  31+ C043              market_UomOffset		equ 46
  32+ C043 20 20 20 20  market_blank_line       DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mkt_hold_level          DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mkt_cash				DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mkt_selected_row        db  0
  36+ C075
  37+ C075              mkt_cash_position       equ $B048
  38+ C075 00 00 00...  mkt_cash_amount			DS 20
  39+ C089 20 43 72 20  mkt_cash_UoM            DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mkt_cargo_position      equ $A848
  41+ C094 00 00 00...  mkt_cargo_amount		DS 20
  42+ C0A8 20 54 6F 6E  mkt_cargo_UoM           DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ C0B3 3A 74 C0     mkt_highlight_row:      ld      a,(mkt_selected_row)
  47+ C0B6 C6 04                                add     a,4
  48+ C0B8 57                                   ld      d,a
  49+ C0B9 1E 56                                ld      e,L1InvHighlight
  50+ C0BB                                      MMUSelectLayer1
  50+ C0BB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ C0BF CD 30 E0                             call    l1_hilight_row
  52+ C0C2 C9                                   ret
  53+ C0C3              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ C0C3 3A 74 C0     mkt_lowlight_row        ld      a,(mkt_selected_row)
  55+ C0C6 C6 04                                add     a,4
  56+ C0C8 57                                   ld      d,a
  57+ C0C9 1E 07                                ld      e,L1InvLowlight
  58+ C0CB                                      MMUSelectLayer1
  58+ C0CB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  59+ C0CF CD 30 E0                             call    l1_hilight_row
  60+ C0D2 C9                                   ret
  61+ C0D3              ;----------------------------------------------------------------------------------------------------------------------------------
  62+ C0D3 CD EA C0     MKT_DispDEIXtoIY1DP:    call    MKT_DispDEIXtoIY
  63+ C0D6 FD 36 02 00                          ld (iy+2),0
  64+ C0DA FD 7E 00                             ld      a,(IY+0)
  65+ C0DD FD 77 01                             ld      (IY+1),a
  66+ C0E0 3E 2E                                ld      a,"."
  67+ C0E2 FD 77 00                             ld      (IY+0),a
  68+ C0E5 FD 23                                inc     IY
  69+ C0E7 FD 23                                inc     IY
  70+ C0E9 C9                                   ret
  71+ C0EA              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ C0EA DD 22 7F C1  MKT_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  73+ C0EE ED 53 81 C1                          ld (.MKTclcn32zIX),de
  74+ C0F2 DD 21 7B C1                          ld ix,.MKTclcn32t+36
  75+ C0F6 06 09                                ld b,9
  76+ C0F8 0E 00                                ld c,0
  77+ C0FA 3E 30        .MKTclcn321:            ld a,'0'
  78+ C0FC B7                                   or a
  79+ C0FD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  80+ C100 DD 56 01                             ld d,(ix+1)
  81+ C103 2A 7F C1                             ld hl,(.MKTclcn32z)
  82+ C106 ED 52                                sbc hl,de
  83+ C108 22 7F C1                             ld (.MKTclcn32z),hl
  84+ C10B DD 5E 02                             ld e,(ix+2)
  85+ C10E DD 56 03                             ld d,(ix+3)
  86+ C111 2A 81 C1                             ld hl,(.MKTclcn32zIX)
  87+ C114 ED 52                                sbc hl,de
  88+ C116 22 81 C1                             ld (.MKTclcn32zIX),hl
  89+ C119 38 04                                jr c,.MKTclcn325
  90+ C11B 0C                                   inc c
  91+ C11C 3C                                   inc a
  92+ C11D 18 DE                                jr .MKTclcn322
  93+ C11F DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  94+ C122 DD 56 01                             ld d,(ix+1)
  95+ C125 2A 7F C1                             ld hl,(.MKTclcn32z)
  96+ C128 19                                   add hl,de
  97+ C129 22 7F C1                             ld (.MKTclcn32z),hl
  98+ C12C DD 5E 02                             ld e,(ix+2)
  99+ C12F DD 56 03                             ld d,(ix+3)
 100+ C132 2A 81 C1                             ld hl,(.MKTclcn32zIX)
 101+ C135 ED 5A                                adc hl,de
 102+ C137 22 81 C1                             ld (.MKTclcn32zIX),hl
 103+ C13A 11 FC FF                             ld de,-4
 104+ C13D DD 19                                add ix,de
 105+ C13F 0C                                   inc c
 106+ C140 0D                                   dec c
 107+ C141 28 05                                jr z,.MKTclcn323
 108+ C143 FD 77 00                             ld (iy+0),a
 109+ C146 FD 23                                inc iy
 110+ C148 10 B0        .MKTclcn323:            djnz .MKTclcn321
 111+ C14A 3A 7F C1                             ld a,(.MKTclcn32z)
 112+ C14D C6 30                                add A,'0'
 113+ C14F FD 77 00                             ld (iy+0),a
 114+ C152 FD 36 01 00                          ld (iy+1),0
 115+ C156 C9                                   ret
 116+ C157 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 116+ C15B 0A 00 00 00
 116+ C15F 64 00 00 00
 116+ C163 E8 03 00 00
 116+ C167 10 27 00 00
 117+ C16B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 117+ C16F 40 42 0F 00
 117+ C173 80 96 98 00
 117+ C177 00 E1 F5 05
 117+ C17B 00 CA 9A 3B
 118+ C17F 00 00        .MKTclcn32z             ds 2
 119+ C181 00 00        .MKTclcn32zIX           ds 2
 120+ C183              ;----------------------------------------------------------------------------------------------------------------------------------
 121+ C183              ; "DispHL, writes HL to DE address"
 122+ C183 01 F0 D8     MPM_DispHLtoDE:         ld	bc,-10000
 123+ C186 CD 9C C1                             call	MPM_Num1
 124+ C189 01 18 FC                             ld	bc,-1000
 125+ C18C CD 9C C1                             call	MPM_Num1
 126+ C18F 01 9C FF                             ld	bc,-100
 127+ C192 CD 9C C1                             call	MPM_Num1
 128+ C195 0E F6                                ld	c,-10
 129+ C197 CD 9C C1                             call	MPM_Num1
 130+ C19A 0E FF                                ld	c,-1
 131+ C19C 3E 2F        MPM_Num1:	            ld	a,'0'-1
 132+ C19E 3C           .Num2:	                inc	a
 133+ C19F 09                                   add	hl,bc
 134+ C1A0 38 FC                                jr	c,.Num2
 135+ C1A2 ED 42                                sbc	hl,bc
 136+ C1A4 12                                   ld	(de),a
 137+ C1A5 13                                   inc	de
 138+ C1A6 C9                                   ret
 139+ C1A7              ;----------------------------------------------------------------------------------------------------------------------------------
 140+ C1A7 26 00        MPM_DispAtoDE:          ld h,0
 141+ C1A9 6F                                   ld l,a
 142+ C1AA C3 83 C1                             jp MPM_DispHLtoDE
 143+ C1AD              ;----------------------------------------------------------------------------------------------------------------------------------
 144+ C1AD 26 00        MPM_DispPriceAtoDE:     ld h,0
 145+ C1AF 6F                                   ld l,a
 146+ C1B0 01 9C FF                             ld	bc,-100
 147+ C1B3 CD C3 C1                             call	.NumLeadBlank1
 148+ C1B6 0E F6                                ld	c,-10
 149+ C1B8 CD 9C C1                             call	MPM_Num1
 150+ C1BB 3E 2E                                ld		a,'.'					; we could assume preformat but
 151+ C1BD 12                                   ld		(de),a					; we can optimse that later TODO
 152+ C1BE 13                                   inc		de						; with just an inc De
 153+ C1BF 0E FF                                ld	c,-1
 154+ C1C1 18 D9                                jr		MPM_Num1
 155+ C1C3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 156+ C1C5 3C           .NumLeadBlank2:	        inc	a
 157+ C1C6 09                                   add	hl,bc
 158+ C1C7 38 FC                                jr	c,.NumLeadBlank2
 159+ C1C9 FE 30                                cp	'0'
 160+ C1CB 20 02                                jr	nz,.DontBlank
 161+ C1CD 3E 20        .Blank:                 ld	a,' '
 162+ C1CF ED 42        .DontBlank:	            sbc	hl,bc
 163+ C1D1 12                                   ld	(de),a
 164+ C1D2 13                                   inc	de
 165+ C1D3 C9                                   ret
 166+ C1D4              ;----------------------------------------------------------------------------------------------------------------------------------
 167+ C1D4 FE 00        MPM_DispQtyAtoDE:       cp	0
 168+ C1D6 28 30                                jr	z,.NoStock
 169+ C1D8 26 00                                ld h,0
 170+ C1DA 6F                                   ld l,a
 171+ C1DB 01 9C FF                             ld	bc,-100
 172+ C1DE CD F7 C1                             call	.NumLeadBlank1
 173+ C1E1 FE 20        .WasLead0:              cp      ' '
 174+ C1E3 20 09                                jr      nz,.NotHundredsZero
 175+ C1E5 0E F6                                ld	c,-10
 176+ C1E7 CD F7 C1                             call	.NumLeadBlank1
 177+ C1EA 0E FF                                ld	c,-1
 178+ C1EC 18 AE                                jr		MPM_Num1
 179+ C1EE 0E F6        .NotHundredsZero:       ld	c,-10
 180+ C1F0 CD 9C C1                             call	MPM_Num1
 181+ C1F3 0E FF                                ld	c,-1
 182+ C1F5 18 A5                                jr		MPM_Num1
 183+ C1F7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 184+ C1F9 3C           .NumLeadBlank2:	        inc	a
 185+ C1FA 09                                   add	hl,bc
 186+ C1FB 38 FC                                jr	c,.NumLeadBlank2
 187+ C1FD FE 30                                cp	'0'
 188+ C1FF 20 02                                jr	nz,.DontBlank
 189+ C201 3E 20        .Blank:                 ld	a,' '
 190+ C203 ED 42        .DontBlank:	            sbc	hl,bc
 191+ C205 12                                   ld	(de),a
 192+ C206 13                                   inc	de
 193+ C207 C9                                   ret
 194+ C208 3E 20        .NoStock:               ld	a,' '
 195+ C20A 12                                   ld	(de),a
 196+ C20B 13                                   inc	de
 197+ C20C 12                                   ld	(de),a
 198+ C20D 13                                   inc	de
 199+ C20E 3E 2D                                ld	a,'-'
 200+ C210 12                                   ld	(de),a
 201+ C211 13                                   inc de
 202+ C212 C9                                   ret
 203+ C213              ;----------------------------------------------------------------------------------------------------------------------------------
 204+ C213              MPM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C213
   2++C213              ;">print_boilder_text hl = text structure, b = message count"
   3++C213              .BoilerTextLoop:
   4++C213 C5           	push		bc			; Save Message Count loop value
   5++C214 4E           	ld			c,(hl)		; Get Row into b
   6++C215 23           	inc			hl
   7++C216 46           	ld			b,(hl)		; Get Col into b
   8++C217 23           	inc			hl
   9++C218 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C219 23           	inc			hl
  11++C21A 56           	ld			d,(hl)		; Get text address Hi into E
  12++C21B 23           	inc			hl
  13++C21C E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C21D EB           	ex			de,hl		; now hl = address of text data
  15++C21E 1E FF        	ld			e,txt_status_colour
  16++C220 C5           	push		bc
  17++C221 D1           	pop			de
  18++C222                  MMUSelectLayer1
  18++C222 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C226 CD C8 E0     	call		l1_print_at
  20++C229 E1           	pop			hl
  21++C22A C1           	pop			bc
  22++C22B 10 E6        	djnz		.BoilerTextLoop
  23++C22D C9           	ret
  24++C22E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 205+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 206+ C22E 2A 79 86     MKT_GetCash:            ld		hl,(Cash+2)
 207+ C231 EB                                   ex      de,hl
 208+ C232 DD 2A 77 86                          ld      ix,(Cash)
 209+ C236 FD 21 75 C0                          ld		iy,mkt_cash_amount
 210+ C23A CD D3 C0                             call 	MKT_DispDEIXtoIY1DP
 211+ C23D FD E5                                push    IY
 212+ C23F D1                                   pop     de
 213+ C240 21 89 C0                             ld      hl,mkt_cash_UoM
 214+ C243 01 0B 00                             ld      bc,11
 215+ C246 ED B0                                ldir
 216+ C248 C9                                   ret
 217+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 218+ C249 11 00 00     MKT_GetCargo:   	    ld      de,0
 219+ C24C DD 21 00 00                          ld      ix,0
 220+ C250 3A 7D 86                             ld      a,(CargoRunningLoad)
 221+ C253 DD 6F                                ld      ixl,a
 222+ C255 FD 21 94 C0                          ld		iy,mkt_cargo_amount
 223+ C259 CD EA C0                             call 	MKT_DispDEIXtoIY
 224+ C25C FD E5                                push    IY
 225+ C25E D1                                   pop     de
 226+ C25F 13                                   inc     de
 227+ C260 21 A8 C0                             ld      hl,mkt_cargo_UoM
 228+ C263 01 0B 00                             ld      bc,11
 229+ C266 ED B0                                ldir
 230+ C268 C9                                   ret
 231+ C269              ;----------------------------------------------------------------------------------------------------------------------------------
 232+ C269 CD 49 C2     MKT_DisplayCargo:       call	MKT_GetCargo
 233+ C26C 21 94 C0                             ld		hl,mkt_cargo_amount
 234+ C26F 11 48 A8                             ld      de,mkt_cargo_position
 235+ C272                                      MMUSelectLayer1
 235+ C272 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 236+ C276 CD C8 E0                             call	l1_print_at
 237+ C279 C9                                   ret
 238+ C27A              ;----------------------------------------------------------------------------------------------------------------------------------
 239+ C27A CD 2E C2     MKT_DisplayCash:        call	MKT_GetCash
 240+ C27D 21 75 C0                             ld		hl,mkt_cash_amount
 241+ C280 11 48 B0                             ld      de,mkt_cash_position
 242+ C283                                      MMUSelectLayer1
 242+ C283 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 243+ C287 CD C8 E0                             call	l1_print_at
 244+ C28A C9                                   ret
 245+ C28B              ;----------------------------------------------------------------------------------------------------------------------------------
 246+ C28B              ; "A = stock item number"
 247+ C28B F5           PrintMarketItem:        push     af
 248+ C28C 21 08 20                             ld      hl,market_position  ; hl = base cursor position + row number * 8
 249+ C28F 57                                   ld      d,a                 ; .
 250+ C290 1E 08                                ld      e,8                 ; .
 251+ C292 ED 30                                mul                         ; .
 252+ C294 53                                   ld      d,e                 ; .
 253+ C295 1E 00                                ld      e,0                 ; .
 254+ C297 19                                   add     hl,de               ; .
 255+ C298 22 41 C0                             ld      (market_cursor),hl  ; save in market cursor and copy to de
 256+ C29B EB                                   ex      hl,de               ; .
 257+ C29C 21 43 C0                             ld      hl,market_blank_line; hl = blank line text
 258+ C29F                                      MMUSelectLayer1             ; print blank line (hl) and position DE
 258+ C29F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2A3 CD C8 E0                             call	l1_print_at         ; .
 260+ C2A6 F1                                   pop     af
 261+ C2A7 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 262+ C2AB FD 21 7E 86                          ld      iy,CargoTonnes
 263+ C2AF 1E 08                                ld		e,8
 264+ C2B1 57                                   ld		d,a
 265+ C2B2 ED 30                                mul
 266+ C2B4 DD 19                                add		ix,de				; Move down a row ix += a * 8
 267+ C2B6 16 00                                ld      d,0
 268+ C2B8 5F                                   ld      e,a
 269+ C2B9 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 270+ C2BB              .GetName:               MMUSelectStockTable
 270+ C2BB ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 271+ C2BF DD 7E 00                             ld		a,(ix+0)
 272+ C2C2 21 14 8D                             ld		hl,WordIdx
 273+ C2C5 CD E9 89                             call	getTableText
 274+ C2C8 ED 5B 41 C0                          ld		de,(market_cursor)
 275+ C2CC                                      MMUSelectLayer1
 275+ C2CC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 276+ C2D0 CD C8 E0                             call	l1_print_at
 277+ C2D3              .GetUom                 MMUSelectStockTable
 277+ C2D3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 278+ C2D7 DD 7E 07                             ld		a,(ix+7)
 279+ C2DA C6 2E                                add		a,market_UomOffset
 280+ C2DC 21 14 8D                             ld		hl,WordIdx
 281+ C2DF CD E9 89                             call	getTableText
 282+ C2E2 ED 5B 41 C0                          ld		de,(market_cursor)
 283+ C2E6 1E 68                                ld		e,market_uom
 284+ C2E8                                      MMUSelectLayer1
 284+ C2E8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 285+ C2EC CD C8 E0                             call	l1_print_at
 286+ C2EF              .GetPrice:              MMUSelectStockTable
 286+ C2EF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 287+ C2F3 DD 7E 02                             ld		a,(ix+2)
 288+ C2F6 11 34 C0                             ld		de,txt_market_amount
 289+ C2F9 CD AD C1                             call	MPM_DispPriceAtoDE
 290+ C2FC 21 34 C0                             ld		hl,txt_market_amount
 291+ C2FF ED 5B 41 C0                          ld		de,(market_cursor)
 292+ C303 1E 88                                ld		e,market_price
 293+ C305                                      MMUSelectLayer1
 293+ C305 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C309 CD C8 E0                             call	l1_print_at
 295+ C30C              .GetQty:                MMUSelectStockTable
 295+ C30C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 296+ C310 DD 7E 01                             ld		a,(ix+1)
 297+ C313 11 39 C0                             ld		de,txt_market_quantity
 298+ C316 CD D4 C1                             call	MPM_DispQtyAtoDE
 299+ C319 21 39 C0                             ld		hl,txt_market_quantity
 300+ C31C ED 5B 41 C0                          ld		de,(market_cursor)
 301+ C320 1E B0                                ld		e,market_Quantity
 302+ C322                                      MMUSelectLayer1
 302+ C322 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 303+ C326 CD C8 E0                             call	l1_print_at
 304+ C329 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 305+ C32C 11 3D C0                             ld      de,txt_market_cargo
 306+ C32F CD D4 C1                             call	MPM_DispQtyAtoDE
 307+ C332 21 3D C0                             ld      hl,txt_market_cargo
 308+ C335 ED 5B 41 C0                          ld      de,(market_cursor)
 309+ C339 1E E0                                ld      e,market_Cargo
 310+ C33B                                      MMUSelectLayer1
 310+ C33B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 311+ C33F CD C8 E0                             call	l1_print_at
 312+ C342 C9                                   ret
 313+ C343
 314+ C343              draw_market_prices_menu:InitNoDoubleBuffer
 314+ C343             >                            MMUSelectLayer1
 314+ C343 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 314+ C347 CD 80 E0    >                            call	l1_cls
 314+ C34A 3E 07       >                            ld		a,7
 314+ C34C CD 9B E0    >                            call	l1_attr_cls_to_a
 314+ C34F             >                            MMUSelectLayer2
 314+ C34F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 314+ C353 CD 09 E0    >                            call    asm_l2_double_buffer_off
 314+ C356 CD FF E0    >                            call	l2_cls	; Get some space
 314+ C359             >                            MMUSelectSpriteBank
 314+ C359 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 314+ C35D CD 6E E5    >                            call    sprite_cls_cursors
 315+ C360 3E 20                                ld      a,$20
 316+ C362 32 1E 81                             ld      (MenuIdMax),a
 317+ C365 01 01 01     .Drawbox:               ld		bc,$0101
 318+ C368 11 FD BE                             ld		de,$BEFD
 319+ C36B 3E C0                                ld		a,$C0
 320+ C36D                                      MMUSelectLayer2
 320+ C36D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 321+ C371 CD 49 E2                             call	l2_draw_box
 322+ C374 01 01 0A                             ld		bc,$0A01
 323+ C377 11 C0 FE                             ld		de,$FEC0
 324+ C37A CD B3 E2                             call	l2_draw_horz_line
 325+ C37D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 326+ C380 11 C0 50                             ld		de,$50C0
 327+ C383 CD B3 E2                             call	l2_draw_horz_line
 328+ C386 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 329+ C389 11 C0 18                             ld		de,$18C0
 330+ C38C CD B3 E2                             call	l2_draw_horz_line
 331+ C38F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 332+ C392 11 C0 28                             ld		de,$28C0
 333+ C395 CD B3 E2                             call	l2_draw_horz_line
 334+ C398 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 335+ C39B 11 C0 28                             ld		de,$28C0
 336+ C39E CD B3 E2                             call	l2_draw_horz_line
 337+ C3A1 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 338+ C3A4 11 C0 18                             ld		de,$18C0
 339+ C3A7 CD B3 E2                             call	l2_draw_horz_line
 340+ C3AA 3A 08 82     .StaticText:	        ld      a,(Galaxy)
 341+ C3AD                                      MMUSelectGalaxyA
 341+ C3AD ED 92 57    >                     nextreg GalaxyDataMMU,       a
 342+ C3B0 3E 19                                ld		a,25
 343+ C3B2 CD B1 8E                             call	expandTokenToString
 344+ C3B5 CD 7A F6                             call	GetDigramGalaxySeed
 345+ C3B8 06 09                                ld		b,9
 346+ C3BA 21 10 C0                             ld		hl,market_boiler_text
 347+ C3BD CD 13 C2                             call	MPM_print_boiler_text
 348+ C3C0              ; Generate the market list on screen
 349+ C3C0 3E 00        .DisplayPrices:         ld		a,0
 350+ C3C2 21 08 20                             ld		hl,market_position          ; set current cursor position on screen
 351+ C3C5 22 41 C0                             ld		(market_cursor),hl          ; .
 352+ C3C8 F5           MarketLoop:	            push	af
 353+ C3C9 CD 8B C2                             call	PrintMarketItem             ; display a single market item
 354+ C3CC F1                                   pop		af
 355+ C3CD 3C                                   inc		a
 356+ C3CE FE 11                                cp		17
 357+ C3D0 20 F6                                jr		nz,MarketLoop
 358+ C3D2 AF           .InitialHighlight:      xor     a
 359+ C3D3 32 74 C0                             ld      (mkt_selected_row),a        ; assume on row zero
 360+ C3D6 CD B3 C0                             call    mkt_highlight_row
 361+ C3D9 21 64 C0     .DisCargo:              ld      hl,mkt_hold_level
 362+ C3DC 11 10 A8                             ld      de,$A810
 363+ C3DF                                      MMUSelectLayer1
 363+ C3DF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 364+ C3E3 CD C8 E0                             call	l1_print_at
 365+ C3E6 CD 69 C2                             call    MKT_DisplayCargo
 366+ C3E9 21 6C C0     .DisCash:               ld      hl,mkt_cash
 367+ C3EC 11 10 B0                             ld      de,$B010
 368+ C3EF                                      MMUSelectLayer1
 368+ C3EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 369+ C3F3 CD C8 E0                             call	l1_print_at
 370+ C3F6 CD 7A C2                             call    MKT_DisplayCash
 371+ C3F9 C9                                   ret
 372+ C3FA
 373+ C3FA
 374+ C3FA              ;----------------------------------------------------------------------------------------------------------------------------------
 375+ C3FA              ; Handles all the input whilst in the market menu
 376+ C3FA 3E 4A        loop_market_menu:       ld      a,c_Pressed_CursorUp
 377+ C3FC CD 08 7E                             call    is_key_pressed
 378+ C3FF CC 1B C4                             call    z,mkt_UpPressed
 379+ C402 3E 4C                                ld      a,c_Pressed_CursorDown
 380+ C404 CD 08 7E                             call    is_key_pressed
 381+ C407 CC 2C C4                             call    z,mkt_DownPressed
 382+ C40A 3E 08                                ld      a,c_Pressed_RollLeft
 383+ C40C CD 08 7E                             call    is_key_pressed
 384+ C40F CC 46 C4                             call    z,mkt_LeftPressed
 385+ C412 3E 0A                                ld      a,c_Pressed_RollRight
 386+ C414 CD 08 7E                             call    is_key_pressed
 387+ C417 CC 89 C4                             call    z,mkt_RightPressed
 388+ C41A C9                                   ret
 389+ C41B
 390+ C41B              ;----------------------------------------------------------------------------------------------------------------------------------
 391+ C41B 3A 74 C0     mkt_UpPressed:          ld      a,(mkt_selected_row)
 392+ C41E FE 00                                cp      0
 393+ C420 C8                                   ret     z
 394+ C421 CD C3 C0                             call    mkt_lowlight_row
 395+ C424 21 74 C0                             ld      hl,mkt_selected_row
 396+ C427 35                                   dec     (hl)
 397+ C428 CD B3 C0                             call    mkt_highlight_row
 398+ C42B C9                                   ret
 399+ C42C              ;----------------------------------------------------------------------------------------------------------------------------------
 400+ C42C 3E 4C        mkt_DownPressed:        ld      a,c_Pressed_CursorDown
 401+ C42E CD E3 7D                             call    get_key_a_state
 402+ C431 FE 01                                cp      1
 403+ C433 28 00                                jr      z,.ItsOK
 404+ C435 3A 74 C0     .ItsOK:                 ld      a,(mkt_selected_row)
 405+ C438 FE 10                                cp      16
 406+ C43A C8                                   ret     z
 407+ C43B CD C3 C0                             call    mkt_lowlight_row
 408+ C43E 21 74 C0                             ld      hl,mkt_selected_row
 409+ C441 34                                   inc     (hl)
 410+ C442 CD B3 C0                             call    mkt_highlight_row
 411+ C445 C9                                   ret
 412+ C446              ;----------------------------------------------------------------------------------------------------------------------------------
 413+ C446 3A 74 C0     mkt_LeftPressed:        ld      a,(mkt_selected_row)
 414+ C449 21 7E 86                             ld      hl,CargoTonnes
 415+ C44C ED 31                                add     hl,a
 416+ C44E 7E                                   ld      a,(hl)
 417+ C44F FE 00                                cp      0
 418+ C451 C8                                   ret     z
 419+ C452 35                                   dec     (hl)
 420+ C453 DD 21 00 E0                          ld      ix,StockFood
 421+ C457 3A 74 C0                             ld      a,(mkt_selected_row)
 422+ C45A 16 08                                ld      d,8
 423+ C45C 5F                                   ld      e,a
 424+ C45D ED 30                                mul
 425+ C45F DD 19                                add     ix,de
 426+ C461                                      MMUSelectStockTable
 426+ C461 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 427+ C465 DD 34 01                             inc     (ix+1)
 428+ C468 DD 7E 07                             ld      a,(ix+7)
 429+ C46B FE 30                                cp      48
 430+ C46D 20 04                                jr      nz,.UnderATonne
 431+ C46F 21 7D 86                             ld      hl,CargoRunningLoad
 432+ C472 35                                   dec     (hl)            ; We need to cosider UoM
 433+ C473 DD 7E 02     .UnderATonne:           ld      a,(ix+2)
 434+ C476 16 00                                ld      d,0
 435+ C478 5F                                   ld      e,a
 436+ C479 CD 71 91                             call    addDEtoCash
 437+ C47C                                      ; DO ADD CASH
 438+ C47C 3A 74 C0                             ld      a,(mkt_selected_row)
 439+ C47F CD 8B C2                             call    PrintMarketItem
 440+ C482 CD 69 C2                             call    MKT_DisplayCargo
 441+ C485 CD 7A C2                             call    MKT_DisplayCash
 442+ C488 C9                                   ret
 443+ C489              ;----------------------------------------------------------------------------------------------------------------------------------
 444+ C489              mkt_RightPressed:       MMUSelectStockTable
 444+ C489 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 445+ C48D DD 21 00 E0                          ld      ix,StockFood
 446+ C491 3A 74 C0                             ld      a,(mkt_selected_row)
 447+ C494 16 08                                ld      d,8
 448+ C496 5F                                   ld      e,a
 449+ C497 ED 30                                mul
 450+ C499 DD 19                                add     ix,de
 451+ C49B 4F                                   ld      c,a
 452+ C49C DD 7E 01                             ld      a,(ix+1)
 453+ C49F FE 00                                cp      0
 454+ C4A1 C8                                   ret     z
 455+ C4A2 DD 7E 07     .CheckUoM:              ld      a,(ix+7)
 456+ C4A5 FE 30                                cp      48
 457+ C4A7 28 0F                                jr      z,.CheckCargo                       ; cargo is in tonnes
 458+ C4A9 3A 74 C0     .NotTonnage:            ld      a,(mkt_selected_row)
 459+ C4AC 21 7E 86                             ld      hl,CargoTonnes
 460+ C4AF ED 31                                add     hl,a
 461+ C4B1 7E                                   ld      a,(hl)
 462+ C4B2 FE C8                                cp      200
 463+ C4B4 C8                                   ret     z                                   ; else its a 200 UoM limit
 464+ C4B5 C3 BE C4                             jp      .CheckCash
 465+ C4B8 2A 7C 86     .CheckCargo:            ld      hl,(CargoBaySize)                   ; = h = runningload l = cargo bay size
 466+ C4BB 7C                                   ld      a,h
 467+ C4BC BD                                   cp      l
 468+ C4BD C8                                   ret     z                                   ; return if we have already maxed out
 469+ C4BE 2A 79 86     .CheckCash:             ld      hl,(Cash+2)
 470+ C4C1 7C                                   ld      a,h
 471+ C4C2 B5                                   or      l
 472+ C4C3 20 0F                                jr      nz,.MoreThanRequired
 473+ C4C5 2A 77 86                             ld      hl,(Cash)
 474+ C4C8 7C                                   ld      a,h
 475+ C4C9 FE 00                                cp      0
 476+ C4CB 20 07                                jr      nz,.MoreThanRequired
 477+ C4CD DD 7E 02                             ld      a,(ix+2)
 478+ C4D0 BD                                   cp      l
 479+ C4D1 30 01                                jr      nc,.MoreThanRequired
 480+ C4D3 C9                                   ret                         ; Insufficient Funds
 481+ C4D4 19           .MoreThanRequired:      add     hl,de
 482+ C4D5 7C                                   ld      a,h
 483+ C4D6 B3                                   or      e
 484+ C4D7                                      ; check cash can we buy, and cargo capacity
 485+ C4D7 DD 35 01                             dec     (ix+1)
 486+ C4DA 3A 74 C0                             ld      a,(mkt_selected_row)
 487+ C4DD 21 7E 86                             ld      hl,CargoTonnes
 488+ C4E0 ED 31                                add     hl,a
 489+ C4E2 34                                   inc     (hl)
 490+ C4E3 DD 7E 07                             ld      a,(ix+7)
 491+ C4E6 47                                   ld      b,a
 492+ C4E7 FE 30                                cp      48
 493+ C4E9 20 05                                jr      nz,.UnderOneTonne
 494+ C4EB 78                                   ld      a,b
 495+ C4EC 21 7D 86                             ld      hl,CargoRunningLoad
 496+ C4EF 34                                   inc     (hl)
 497+ C4F0 DD 7E 02     .UnderOneTonne:         ld      a,(ix+2)
 498+ C4F3 16 00                                ld      d,0
 499+ C4F5 5F                                   ld      e,a
 500+ C4F6 CD 84 91                             call    subDEfromCash
 501+ C4F9 3A 74 C0                             ld      a,(mkt_selected_row)
 502+ C4FC CD 8B C2                             call    PrintMarketItem
 503+ C4FF CD 69 C2                             call    MKT_DisplayCargo
 504+ C502 CD 7A C2                             call    MKT_DisplayCash
 505+ C505 C9                                   ret
# file closed: ./Menus/market_prices_menu.asm
 660  C506                  DISPLAY "Bank ",BankMenuMarket," - Bytes free ",/D, $2000 - ($-MenuMarketAddr), " - BankMenuMarket"
 661  C506              ; Bank 55  ------------------------------------------------------------------------------------------------------------------------
 662  C506                  SLOT    StockTableAddr
 663  C506                  PAGE    BankStockTable
 664  C506                  ORG     StockTableAddr
 665  E000                  INCLUDE "./Tables/stock_table.asm"
# file opened: ./Tables/stock_table.asm
   1+ E000
   2+ E000
   3+ E000              ;                       Can Buy
   4+ E000              ;                       computed row on screen considering what stock is visible
   5+ E000              ;                       Show
   6+ E000              ;                       Tech Level
   7+ E000              ;                       Price
   8+ E000              ;                       Name
   9+ E000              ;                       TypeId
  10+ E000
  11+ E000
  12+ E000              ;char name[16];
  13+ E000              ;current_quantity;
  14+ E000              ;current_price;
  15+ E000              ;base_price;
  16+ E000              ;eco_adjust;
  17+ E000              ;base_quantity;
  18+ E000              ;mask;
  19+ E000              ;units;
  20+ E000
  21+ E000              ;						nam	currr   CR  Ecadj  Qty  Msk  UoM
  22+ E000 20 00 00 13  StockFood			DB  32,  0, 0,  19, -2,      6, $01, 48  ; 01
  22+ E004 FE 06 01 30
  23+ E008 21 00 00 14  StockTextiles		DB	33,  0, 0,  20, -1,     10, $03, 48  ; 02
  23+ E00C FF 0A 03 30
  24+ E010 22 00 00 41  StockRadioactives	DB  34,  0, 0,  65, -3,      2, $07, 48  ; 03
  24+ E014 FD 02 07 30
  25+ E018 23 00 00 28  StockSlaves			DB  35,  0, 0,  40, -5,    226, $1F, 48  ; 04
  25+ E01C FB E2 1F 30
  26+ E020 24 00 00 53  StockLiquorWines	DB  36,  0, 0,  83, -5,    251, $0F, 48  ; 05
  26+ E024 FB FB 0F 30
  27+ E028 25 00 00 C4  StockLuxuries		DB  37,  0, 0, 196,  8,     54, $03, 48  ; 06
  27+ E02C 08 36 03 30
  28+ E030 26 00 00 EB  StockNarcotics		DB  38,  0, 0, 235, 29,      8, $78, 48  ; 07
  28+ E034 1D 08 78 30
  29+ E038 19 00 00 9A  StockComputers		DB  25,  0, 0, 154, 14,     56, $03, 48  ; 08
  29+ E03C 0E 38 03 30
  30+ E040 27 00 00 75  StockMachinery		DB  39,  0, 0, 117,  6,     40, $07, 48  ; 09
  30+ E044 06 28 07 30
  31+ E048 28 00 00 4E  StockAlloys			DB  40,  0, 0,  78,  1,     17, $1F, 48  ; 11
  31+ E04C 01 11 1F 30
  32+ E050 29 00 00 7C  StockFirearms   	DB  41,  0, 0, 124, 13,     29, $07, 48  ; 12
  32+ E054 0D 1D 07 30
  33+ E058 2A 00 00 B0  StockFurs       	DB  42,  0, 0, 176, -9,    220, $3F, 48  ; 13
  33+ E05C F7 DC 3F 30
  34+ E060 2B 00 00 20  StockMinerals   	DB  43,  0, 0,  32, -1,     53, $03, 48  ; 14
  34+ E064 FF 35 03 30
  35+ E068 2C 00 00 61  StockGold       	DB  44,  0, 0,  97, -1,     66, $07, 49  ; 15
  35+ E06C FF 42 07 31
  36+ E070 2D 00 00 AB  StockPlatinum   	DB  45,  0, 0, 171, -2,     55, $1F, 49  ; 16
  36+ E074 FE 37 1F 31
  37+ E078 2E 00 00 2D  StockGemStones 		DB  46,  0, 0,  45, -1,    250, $0F, 50  ; 17
  37+ E07C FF FA 0F 32
  38+ E080 2F 00 00 35  StockAlienItems		DB  47,  0, 0,  53, 15,    192, $07, 48  ; 18
  38+ E084 0F C0 07 30
  39+ E088
  40+ E088
  41+ E088              ;.QQ23	\Prxs -> &3DA6 \  Market prices info
  42+ E088              ;\ base_price, gradient sign+5bits, base_quantity, mask, units 2bits
  43+ E088              ;13 82 06 01			EQUD &01068213 \ Food
  44+ E088              ;14 81 0A 03 		EQUD &030A8114 \ Textiles
  45+ E088              ;41 83 02 07 		EQUD &07028341 \ Radioactives
  46+ E088              ;28 85 E2 1F 		EQUD &1FE28528 \ Slaves
  47+ E088              ;53 85 FB 0F 		EQUD &0FFB8553 \ Liquor/Wines
  48+ E088              ;C4 08 36 03 		EQUD &033608C4 \ Luxuries
  49+ E088              ;EB 1D 08 78 		EQUD &78081DEB \ Narcotics
  50+ E088              ;9A 0E 38 03 		EQUD &03380E9A \ Computers
  51+ E088              ;75 06 28 07 		EQUD &07280675 \ Machinery
  52+ E088              ;4E 01 11 1F 		EQUD &1F11014E \ Alloys
  53+ E088              ;7C 0D 1D 07 		EQUD &071D0D7C \ Firearms
  54+ E088              ;B0 89 DC 3F 		EQUD &3FDC89B0 \ Furs
  55+ E088              ;20 81 35 03 		EQUD &03358120 \ Minerals
  56+ E088              ;61 A1 42 07 		EQUD &0742A161 \ Gold
  57+ E088              ;AB A2 37 1F 		EQUD &1F37A2AB \ Platinum
  58+ E088              ;2D C1 FA 0F 		EQUD &0FFAC12D \ Gem-Stones
  59+ E088              ;35 0F C0 07 		EQUD &07C00F35 \ Alien Items
  60+ E088
  61+ E088
  62+ E088              FoodIndex               EQU 01
  63+ E088              TextilesIndex           EQU 02
  64+ E088              RadioactivesIndex       EQU 03
  65+ E088              SlavesIndex             EQU 04
  66+ E088              LiquorWinesIndex        EQU 05
  67+ E088              LuxuriesIndex           EQU 06
  68+ E088              NarcoticsIndex          EQU 07
  69+ E088              ComputersIndex          EQU 08
  70+ E088              MachineryIndex          EQU 09
  71+ E088              AlloysIndex             EQU 10
  72+ E088              FirearmsIndex           EQU 11
  73+ E088              FursIndex               EQU 12
  74+ E088              MineralsIndex           EQU 13
  75+ E088              GoldIndex               EQU 14
  76+ E088              PlatinumIndex           EQU 15
  77+ E088              GemStonesIndex          EQU 16
  78+ E088              AlienItemsIndex		    equ 17
  79+ E088              StockListLen		    equ	18
  80+ E088
  81+ E088 00 E0 08 E0  StockItemTable		    DW 	StockFood,  StockTextiles,	   StockRadioactives
  81+ E08C 10 E0
  82+ E08E 18 E0 20 E0                          DW 	StockSlaves, StockLiquorWines, StockLuxuries
  82+ E092 28 E0
  83+ E094 30 E0 38 E0                          DW 	StockNarcotics, StockComputers, StockMachinery
  83+ E098 40 E0
  84+ E09A 48 E0 50 E0                          DW	StockAlloys, StockFirearms, StockFurs
  84+ E09E 58 E0
  85+ E0A0 60 E0 68 E0                          DW  StockMinerals, StockGold, StockPlatinum
  85+ E0A4 70 E0
  86+ E0A6 78 E0 80 E0                          DW  StockGemStones, StockAlienItems
  87+ E0AA
  88+ E0AA 06 FF        generate_stock_market:  ld		b,$FF				; so the first iteration puts it at 0
  89+ E0AC CD 05 87                             call	copy_galaxy_to_system
  90+ E0AF DD 21 F8 DF                          ld		ix,StockFood-8		; start 8 bytes before index as first add will shift
  91+ E0B3 11 08 00     .generate_stock_loop:   ld		de,8
  92+ E0B6 DD 19                                add		ix,de				; Move down a row
  93+ E0B8 04                                   inc		b
  94+ E0B9 DD 4E 03     .CalcPrice:	            ld		c,(ix+3);			; c = base price
  95+ E0BC 3A 92 81                             ld		a,(RandomMarketSeed)
  96+ E0BF DD A6 06                             and		(ix+6)				; and with market mask
  97+ E0C2 81                                   add		a,c
  98+ E0C3 4F                                   ld		c,a					; c = base + rand & market mask
  99+ E0C4 3A 9D 81                             ld		a,(DisplayEcononmy)	; d= economy
 100+ E0C7 57                                   ld		d,a
 101+ E0C8 DD 7E 04                             ld		a,(ix+4)
 102+ E0CB 5F                                   ld		e,a					; e  = economy adjust
 103+ E0CC CB 7B                                bit		7,e
 104+ E0CE 20 04                                jr		nz,.PosMul			; it could be negative and we onnly want
 105+ E0D0              ;.NegMul:						; e reg from mulitply not a 2'c 16 bit word
 106+ E0D0 7B                                   ld		a,e
 107+ E0D1 ED 44                                neg
 108+ E0D3 5F                                   ld		e,a
 109+ E0D4              .PosMul:
 110+ E0D4 7B                                   ld		a,e
 111+ E0D5 ED 44                                neg
 112+ E0D7 5F                                   ld		e,a
 113+ E0D8 ED 30                                mul
 114+ E0DA 79                                   ld		a,c
 115+ E0DB 83                                   add		a,e
 116+ E0DC CB 27                                sla		a
 117+ E0DE CB 27                                sla		a					; Multply price by 4
 118+ E0E0 DD 77 02                             ld		(ix+2),a			; Now have set price
 119+ E0E3 DD 4E 05     .CalcQty:	            ld		c,(ix+5);			; c = base price
 120+ E0E6 3A 92 81                             ld		a,(RandomMarketSeed)
 121+ E0E9 DD A6 06                             and		(ix+6)				; and with market mask
 122+ E0EC 81                                   add		a,c
 123+ E0ED 4F                                   ld		c,a					; c = base + rand & market mask
 124+ E0EE 3A 9D 81                             ld		a,(DisplayEcononmy)	; d= economy
 125+ E0F1 57                                   ld		d,a
 126+ E0F2 DD 7E 04                             ld		a,(ix+4)
 127+ E0F5 5F                                   ld		e,a					; e  = economy adjust
 128+ E0F6 CB 7B                                bit		7,e
 129+ E0F8 20 04                                jr		nz,.PosQtyMul			; it could be negative and we onnly want
 130+ E0FA 7B           .NegQtyMul:				ld		a,e		; e reg from mulitply not a 2'c 16 bit word
 131+ E0FB ED 44                                neg
 132+ E0FD 5F                                   ld		e,a
 133+ E0FE 7B           .PosQtyMul:             ld		a,e
 134+ E0FF ED 44                                neg
 135+ E101 5F                                   ld		e,a
 136+ E102 ED 30                                mul
 137+ E104 79                                   ld		a,c
 138+ E105 93                                   sub		e
 139+ E106 DD 77 01                             ld		(ix+1),a			; Now have set quanity
 140+ E109 78                                   ld		a,b
 141+ E10A FE 11                                cp		AlienItemsIndex
 142+ E10C 20 A5                                jr		nz,.generate_stock_loop
 143+ E10E AF                                   xor		a
 144+ E10F DD 77 01                             ld		(ix+1),a			; Now have set quanity of alient items to always 0 in stock
 145+ E112 C9                                   ret
 146+ E113
# file closed: ./Tables/stock_table.asm
 666  E113                  DISPLAY "Bank ",BankStockTable," - Bytes free ",/D, $2000 - ($-StockTableAddr), " - BankStockTable"
 667  E113              ; Bank 56  ------------------------------------------------------------------------------------------------------------------------
 668  E113                  SLOT    CommanderAddr
 669  E113                  PAGE    BankCommander
 670  E113                  ORG     CommanderAddr, BankCommander
 671  E000                  INCLUDE "./Commander/commanderData.asm"
# file opened: ./Commander/commanderData.asm
   1+ E000 43 4F 4D 4D  commanderPage           DB  "COMMANDERPAGE 56"
   1+ E004 41 4E 44 45
   1+ E008 52 50 41 47
   1+ E00C 45 20 35 36
   2+ E010 4A 41 4D 45  defaultName		        DB	"JAMESON",0
   2+ E014 53 4F 4E 00
   3+ E018 10 0F 11 00  defaultStock	        DB $10, $0F, $11, $00, $03, $1C,$0E, $00, $00, $0A, $00, $11,$3A, $07, $09, $08, $00
   3+ E01C 03 1C 0E 00
   3+ E020 00 0A 00 11
   3+ E024 3A 07 09 08
   3+ E028 00
   4+ E029 4A 5A 48 02  defaultSeeds	        DB $4a, $5a, $48, $02, $53, $b7
   4+ E02D 53 B7
   5+ E02F 14           defaultHomeX	        DB $14
   6+ E030 AD           defaultHomeY	        DB $AD
   7+ E031 44 65 66 61  defaultSaveName         DB "Default.SAV",0,0,0,0
   7+ E035 75 6C 74 2E
   7+ E039 53 41 56 00
   7+ E03D 00 00 00
   8+ E040
   9+ E040              ; Gun and cabin temps are not saved as can only be saved in dock
  10+ E040              ; Note Can only save whilst docked
  11+ E040 43 4F 4D 4D  SaveCommanderHeader     DB  "COMMANDERSAVE..."
  11+ E044 41 4E 44 45
  11+ E048 52 53 41 56
  11+ E04C 45 2E 2E 2E
  12+ E050 00 00 00...  SaveFilename            DS  15
  13+ E05F 00 00 00...  SaveCommanderName       DS  15
  14+ E06E 00 00 00...  SaveSeeds               DS  06
  15+ E074 00 00 00...  SaveStockAvaliabiliy    DS  17
  16+ E085 00 00 00...  SaveCargo               DS  16
  17+ E095 00 00 00...  SaveEquipmentFitted     DS  EQ_ITEM_COUNT
  18+ E0AF 00 00 00 00  SaveLaserType           DS  4
  19+ E0B3 00 00 00 00  SaveLaserDamagedFlag    DS  4
  20+ E0B7 00           SavePresentSystemX      DS  1
  21+ E0B8 00           SavePresentSystemY      DS  1
  22+ E0B9 00           SaveTargetSystemX       DS  1
  23+ E0BA 00           SaveTargetSystemY       DS  1
  24+ E0BB 00 00 00 00  SaveCash                DS  4
  25+ E0BF 00           SaveFuel                DS  1
  26+ E0C0 00           SaveFugitiveInnocentStatus DS 1
  27+ E0C1 00 00        SaveKillTally           DS  2
  28+ E0C3 00           SaveOuterHyperCount     DS  1
  29+ E0C4 00           SaveInnerHyperCount     DS  1
  30+ E0C5 00           SaveForeShield          DS  1
  31+ E0C6 00           SaveAftShield           DS  1
  32+ E0C7 00           SavePlayerEnergy        DS  1
  33+ E0C8 00           SaveCargoBaySize        DS  1
  34+ E0C9 00           SaveFuelScoopStatus     DS  1
  35+ E0CA              SaveSize                equ $ - SaveCommanderHeader
  36+ E0CA
  37+ E0CA              copyCommanderToSave:    ldCopyStringLen CommanderName,      SaveCommanderName, 15
  37+ E0CA 21 14 84    >                        ld      hl,CommanderName
  37+ E0CD 11 5F E0    >                        ld      de, SaveCommanderName
  37+ E0D0 01 0F 00    >                        ld      bc, 15
  37+ E0D3 ED B0       >                        ldir
  38+ E0D5                                      ldCopyStringLen GalaxySeeds,        SaveSeeds, 6
  38+ E0D5 21 15 82    >                        ld      hl,GalaxySeeds
  38+ E0D8 11 6E E0    >                        ld      de, SaveSeeds
  38+ E0DB 01 06 00    >                        ld      bc, 6
  38+ E0DE ED B0       >                        ldir
  39+ E0E0                                      ldCopyStringLen StockAvaliabiliy,   SaveStockAvaliabiliy, 16
  39+ E0E0 21 81 81    >                        ld      hl,StockAvaliabiliy
  39+ E0E3 11 74 E0    >                        ld      de, SaveStockAvaliabiliy
  39+ E0E6 01 10 00    >                        ld      bc, 16
  39+ E0E9 ED B0       >                        ldir
  40+ E0EB                                      ldCopyStringLen CargoTonnes,        SaveCargo, 16
  40+ E0EB 21 7E 86    >                        ld      hl,CargoTonnes
  40+ E0EE 11 85 E0    >                        ld      de, SaveCargo
  40+ E0F1 01 10 00    >                        ld      bc, 16
  40+ E0F4 ED B0       >                        ldir
  41+ E0F6                                      ldCopyStringLen EquipmentFitted,    SaveEquipmentFitted, EQ_ITEM_COUNT
  41+ E0F6 21 96 86    >                        ld      hl,EquipmentFitted
  41+ E0F9 11 95 E0    >                        ld      de, SaveEquipmentFitted
  41+ E0FC 01 1A 00    >                        ld      bc, EQ_ITEM_COUNT
  41+ E0FF ED B0       >                        ldir
  42+ E101                                      ldCopyStringLen LaserType,          SaveLaserType, 4
  42+ E101 21 8E 86    >                        ld      hl,LaserType
  42+ E104 11 AF E0    >                        ld      de, SaveLaserType
  42+ E107 01 04 00    >                        ld      bc, 4
  42+ E10A ED B0       >                        ldir
  43+ E10C                                      ldCopyStringLen LaserDamagedFlag,   SaveLaserDamagedFlag, 4
  43+ E10C 21 92 86    >                        ld      hl,LaserDamagedFlag
  43+ E10F 11 B3 E0    >                        ld      de, SaveLaserDamagedFlag
  43+ E112 01 04 00    >                        ld      bc, 4
  43+ E115 ED B0       >                        ldir
  44+ E117                                      ldCopy2Byte     PresentSystemX,     SavePresentSystemX
  44+ E117 2A 1B 82    >                        ld       hl,(PresentSystemX)
  44+ E11A 22 B7 E0    >                        ld       (SavePresentSystemX),hl
  45+ E11D                                      ldCopy2Byte     TargetSystemX,      SaveTargetSystemX
  45+ E11D 2A 1D 82    >                        ld       hl,(TargetSystemX)
  45+ E120 22 B9 E0    >                        ld       (SaveTargetSystemX),hl
  46+ E123                                      ldCopyStringLen Cash,               SaveCash, 6
  46+ E123 21 77 86    >                        ld      hl,Cash
  46+ E126 11 BB E0    >                        ld      de, SaveCash
  46+ E129 01 06 00    >                        ld      bc, 6
  46+ E12C ED B0       >                        ldir
  47+ E12E                                      ldCopyByte      Fuel,               SaveFuel
  47+ E12E 3A 7B 86    >                        ld       a,(Fuel)
  47+ E131 32 BF E0    >                        ld       (SaveFuel),a
  48+ E134                                      ldCopyByte      FugitiveInnocentStatus,  SaveFugitiveInnocentStatus
  48+ E134 3A 80 81    >                        ld       a,(FugitiveInnocentStatus)
  48+ E137 32 C0 E0    >                        ld       (SaveFugitiveInnocentStatus),a
  49+ E13A                                      ldCopy2Byte     KillTally           ,SaveKillTally
  49+ E13A 2A 93 81    >                        ld       hl,(KillTally)
  49+ E13D 22 C1 E0    >                        ld       (SaveKillTally),hl
  50+ E140                                      ldCopyByte      OuterHyperCount     ,SaveOuterHyperCount
  50+ E140 3A DA 81    >                        ld       a,(OuterHyperCount)
  50+ E143 32 C3 E0    >                        ld       (SaveOuterHyperCount),a
  51+ E146                                      ldCopyByte      InnerHyperCount     ,SaveInnerHyperCount
  51+ E146 3A D9 81    >                        ld       a,(InnerHyperCount)
  51+ E149 32 C4 E0    >                        ld       (SaveInnerHyperCount),a
  52+ E14C                                      ldCopyByte      ForeShield          ,SaveForeShield
  52+ E14C 3A 0E 84    >                        ld       a,(ForeShield)
  52+ E14F 32 C5 E0    >                        ld       (SaveForeShield),a
  53+ E152                                      ldCopyByte      AftShield           ,SaveAftShield
  53+ E152 3A 0F 84    >                        ld       a,(AftShield)
  53+ E155 32 C6 E0    >                        ld       (SaveAftShield),a
  54+ E158                                      ldCopyByte      PlayerEnergy        ,SavePlayerEnergy
  54+ E158 3A 10 84    >                        ld       a,(PlayerEnergy)
  54+ E15B 32 C7 E0    >                        ld       (SavePlayerEnergy),a
  55+ E15E                                      ldCopyByte      CargoBaySize        ,SaveCargoBaySize
  55+ E15E 3A 7C 86    >                        ld       a,(CargoBaySize)
  55+ E161 32 C8 E0    >                        ld       (SaveCargoBaySize),a
  56+ E164                                      ldCopyByte      FuelScoopsBarrelStatus     ,SaveFuelScoopStatus
  56+ E164 3A B0 86    >                        ld       a,(FuelScoopsBarrelStatus)
  56+ E167 32 C9 E0    >                        ld       (SaveFuelScoopStatus),a
  57+ E16A C9                                   ret
  58+ E16B
  59+ E16B              copyCommanderFromSave:  ldCopyStringLen SaveCommanderName,      CommanderName, 15
  59+ E16B 21 5F E0    >                        ld      hl,SaveCommanderName
  59+ E16E 11 14 84    >                        ld      de, CommanderName
  59+ E171 01 0F 00    >                        ld      bc, 15
  59+ E174 ED B0       >                        ldir
  60+ E176                                      ldCopyStringLen SaveSeeds,              GalaxySeeds, 6
  60+ E176 21 6E E0    >                        ld      hl,SaveSeeds
  60+ E179 11 15 82    >                        ld      de, GalaxySeeds
  60+ E17C 01 06 00    >                        ld      bc, 6
  60+ E17F ED B0       >                        ldir
  61+ E181                                      ldCopyStringLen SaveStockAvaliabiliy,   StockAvaliabiliy, 16
  61+ E181 21 74 E0    >                        ld      hl,SaveStockAvaliabiliy
  61+ E184 11 81 81    >                        ld      de, StockAvaliabiliy
  61+ E187 01 10 00    >                        ld      bc, 16
  61+ E18A ED B0       >                        ldir
  62+ E18C                                      ldCopyStringLen SaveCargo,              CargoTonnes, 16
  62+ E18C 21 85 E0    >                        ld      hl,SaveCargo
  62+ E18F 11 7E 86    >                        ld      de, CargoTonnes
  62+ E192 01 10 00    >                        ld      bc, 16
  62+ E195 ED B0       >                        ldir
  63+ E197                                      ldCopyStringLen SaveEquipmentFitted,    EquipmentFitted, EQ_ITEM_COUNT
  63+ E197 21 95 E0    >                        ld      hl,SaveEquipmentFitted
  63+ E19A 11 96 86    >                        ld      de, EquipmentFitted
  63+ E19D 01 1A 00    >                        ld      bc, EQ_ITEM_COUNT
  63+ E1A0 ED B0       >                        ldir
  64+ E1A2                                      ldCopyStringLen SaveLaserType,          LaserType, 4
  64+ E1A2 21 AF E0    >                        ld      hl,SaveLaserType
  64+ E1A5 11 8E 86    >                        ld      de, LaserType
  64+ E1A8 01 04 00    >                        ld      bc, 4
  64+ E1AB ED B0       >                        ldir
  65+ E1AD                                      ldCopyStringLen SaveLaserDamagedFlag,    LaserDamagedFlag, 4
  65+ E1AD 21 B3 E0    >                        ld      hl,SaveLaserDamagedFlag
  65+ E1B0 11 92 86    >                        ld      de, LaserDamagedFlag
  65+ E1B3 01 04 00    >                        ld      bc, 4
  65+ E1B6 ED B0       >                        ldir
  66+ E1B8                                      ldCopy2Byte     SavePresentSystemX,     PresentSystemX
  66+ E1B8 2A B7 E0    >                        ld       hl,(SavePresentSystemX)
  66+ E1BB 22 1B 82    >                        ld       (PresentSystemX),hl
  67+ E1BE                                      ldCopy2Byte     SaveTargetSystemX,      TargetSystemX
  67+ E1BE 2A B9 E0    >                        ld       hl,(SaveTargetSystemX)
  67+ E1C1 22 1D 82    >                        ld       (TargetSystemX),hl
  68+ E1C4 21 D7 80                             ld		hl,IndexedWork              ; not sure yet why thisis done here
  69+ E1C7 CD 05 87                             call	        copy_galaxy_to_system
  70+ E1CA CD C5 87                             call	        find_present_system
  71+ E1CD CD 28 87                             call	        copy_working_to_galaxy
  72+ E1D0                                      ldCopyStringLen SaveCash,               Cash, 6
  72+ E1D0 21 BB E0    >                        ld      hl,SaveCash
  72+ E1D3 11 77 86    >                        ld      de, Cash
  72+ E1D6 01 06 00    >                        ld      bc, 6
  72+ E1D9 ED B0       >                        ldir
  73+ E1DB                                      ldCopyByte      SaveFuel,               Fuel
  73+ E1DB 3A BF E0    >                        ld       a,(SaveFuel)
  73+ E1DE 32 7B 86    >                        ld       (Fuel),a
  74+ E1E1                                      ldCopyByte      SaveFugitiveInnocentStatus,  FugitiveInnocentStatus
  74+ E1E1 3A C0 E0    >                        ld       a,(SaveFugitiveInnocentStatus)
  74+ E1E4 32 80 81    >                        ld       (FugitiveInnocentStatus),a
  75+ E1E7                                      ldCopy2Byte     SaveKillTally           ,KillTally
  75+ E1E7 2A C1 E0    >                        ld       hl,(SaveKillTally)
  75+ E1EA 22 93 81    >                        ld       (KillTally),hl
  76+ E1ED                                      ldCopyByte      SaveOuterHyperCount     ,OuterHyperCount
  76+ E1ED 3A C3 E0    >                        ld       a,(SaveOuterHyperCount)
  76+ E1F0 32 DA 81    >                        ld       (OuterHyperCount),a
  77+ E1F3                                      ldCopyByte      SaveInnerHyperCount     ,InnerHyperCount
  77+ E1F3 3A C4 E0    >                        ld       a,(SaveInnerHyperCount)
  77+ E1F6 32 D9 81    >                        ld       (InnerHyperCount),a
  78+ E1F9                                      ldCopyByte      SaveForeShield          ,ForeShield
  78+ E1F9 3A C5 E0    >                        ld       a,(SaveForeShield)
  78+ E1FC 32 0E 84    >                        ld       (ForeShield),a
  79+ E1FF                                      ldCopyByte      SaveAftShield           ,AftShield
  79+ E1FF 3A C6 E0    >                        ld       a,(SaveAftShield)
  79+ E202 32 0F 84    >                        ld       (AftShield),a
  80+ E205                                      ldCopyByte      SavePlayerEnergy        ,PlayerEnergy
  80+ E205 3A C7 E0    >                        ld       a,(SavePlayerEnergy)
  80+ E208 32 10 84    >                        ld       (PlayerEnergy),a
  81+ E20B                                      ldCopyByte      SaveCargoBaySize        ,CargoBaySize
  81+ E20B 3A C8 E0    >                        ld       a,(SaveCargoBaySize)
  81+ E20E 32 7C 86    >                        ld       (CargoBaySize),a
  82+ E211                                      ldCopyByte      SaveFuelScoopStatus     ,FuelScoopsBarrelStatus
  82+ E211 3A C9 E0    >                        ld       a,(SaveFuelScoopStatus)
  82+ E214 32 B0 86    >                        ld       (FuelScoopsBarrelStatus),a
  83+ E217 C9                                   ret
  84+ E218
  85+ E218 CD CA E0     saveCommander:          call    copyCommanderToSave
  86+ E21B                                      ldCopyStringLen defaultSaveName, SaveFilename, 15
  86+ E21B 21 31 E0    >                        ld      hl,defaultSaveName
  86+ E21E 11 50 E0    >                        ld      de, SaveFilename
  86+ E221 01 0F 00    >                        ld      bc, 15
  86+ E224 ED B0       >                        ldir
  87+ E226 21 31 E0                             ld      hl, defaultSaveName             ; default debug name
  88+ E229 DD 21 40 E0                          ld      ix, SaveCommanderHeader
  89+ E22D 01 8A 00                             ld      bc, SaveSize
  90+ E230 CD A7 A2                             call    FileSave
  91+ E233 C9                                   ret
  92+ E234
  93+ E234 21 31 E0     loadCommander:          ld      hl, defaultSaveName             ; default debug name
  94+ E237 DD 21 40 E0                          ld      ix, SaveCommanderHeader
  95+ E23B 01 8A 00                             ld      bc, SaveSize
  96+ E23E CD 76 A2                             call    FileLoad
  97+ E241 CD 6B E1                             call    copyCommanderFromSave
  98+ E244 C9                                   ret
  99+ E245
 100+ E245               ; For now hard laod, later correctlt sequence gneeral vars and dma fill with 0 for a start
 101+ E245              defaultCommander:       ldCopyStringLen defaultName, CommanderName, 8
 101+ E245 21 10 E0    >                        ld      hl,defaultName
 101+ E248 11 14 84    >                        ld      de, CommanderName
 101+ E24B 01 08 00    >                        ld      bc, 8
 101+ E24E ED B0       >                        ldir
 102+ E250                                      ldCopyStringLen defaultSeeds, GalaxySeeds, 6
 102+ E250 21 29 E0    >                        ld      hl,defaultSeeds
 102+ E253 11 15 82    >                        ld      de, GalaxySeeds
 102+ E256 01 06 00    >                        ld      bc, 6
 102+ E259 ED B0       >                        ldir
 103+ E25B                                      ldCopy2Byte defaultHomeX, PresentSystemX
 103+ E25B 2A 2F E0    >                        ld       hl,(defaultHomeX)
 103+ E25E 22 1B 82    >                        ld       (PresentSystemX),hl
 104+ E261                                      ldCopy2Byte defaultHomeX, TargetSystemX
 104+ E261 2A 2F E0    >                        ld       hl,(defaultHomeX)
 104+ E264 22 1D 82    >                        ld       (TargetSystemX),hl
 105+ E267 21 D7 80                             ld		hl,IndexedWork              ; not sure yet why thisis done here
 106+ E26A CD 05 87                             call	copy_galaxy_to_system
 107+ E26D CD C5 87                             call	find_present_system
 108+ E270 CD 28 87                             call	copy_working_to_galaxy
 109+ E273 01 60 EA                             ld      bc,60000
 110+ E276 ED 43 77 86                          ld      (Cash),bc
 111+ E27A 01 00 00                             ld		bc,0
 112+ E27D ED 43 79 86                          ld		(Cash+2), bc                    ; cash no longer big endian
 113+ E281 3E 46                                ld		a,MaxFuelLevel
 114+ E283 32 7B 86                             ld		(Fuel),a
 115+ E286 3E 5B                                ld      a,BankGalaxyData0
 116+ E288 32 08 82                             ld		(Galaxy),a
 117+ E28B AF                                   xor		a
 118+ E28C 21 96 86                             ld      hl,EquipmentFitted
 119+ E28F 06 1A                                ld      b, EQ_ITEM_COUNT
 120+ E291 77           .ClearFittedLooop:      ld      (hl),a
 121+ E292 23                                   inc     hl
 122+ E293 10 FC                                djnz    .ClearFittedLooop
 123+ E295                                      SetAFalse
 123+ E295 3E FF       >                        ld      a,$FF
 124+ E297 32 A4 86                             ld      (EquipmentFitted+EQ_FRONT_BEAM),a
 125+ E29A 32 2A 82                             ld		(MissionData),a						;The Plan/Mission
 126+ E29D 3E 04                                ld      a,4                                  ; a = 0 = pulse laser
 127+ E29F 32 8E 86                             ld		(LaserType),a
 128+ E2A2 3E FF                                ld      a,$FF                                 ; a = 255
 129+ E2A4 32 8F 86                             ld		(LaserType+1),a
 130+ E2A7 32 90 86                             ld		(LaserType+2),a
 131+ E2AA 32 91 86                             ld		(LaserType+3),a
 132+ E2AD AF                                   xor     a                                  ; a= 0
 133+ E2AE 32 92 86                             ld      (LaserDamagedFlag),a
 134+ E2B1 32 93 86                             ld      (LaserDamagedFlag+1),a
 135+ E2B4 32 94 86                             ld      (LaserDamagedFlag+2),a
 136+ E2B7 32 95 86                             ld      (LaserDamagedFlag+3),a
 137+ E2BA              ; REMOVE?             ld      a,EQ_FRONT_PULSE
 138+ E2BA AF                                   xor     a
 139+ E2BB 32 99 86                             ld		(ECMPresent),a
 140+ E2BE 32 B0 86                             ld		(FuelScoopsBarrelStatus),a
 141+ E2C1 32 9C 86                             ld		(EnergyBomb),a
 142+ E2C4 32 9D 86                             ld		(ExtraEnergyUnit),a
 143+ E2C7 32 9E 86                             ld		(DockingComputer),a
 144+ E2CA 32 9F 86                             ld		(GalacticHyperDrive),a
 145+ E2CD 32 9B 86                             ld		(EscapePod),a
 146+ E2D0 32 80 81                             ld      (FugitiveInnocentStatus),a
 147+ E2D3 32 93 81                             ld		(KillTally),a
 148+ E2D6 32 DA 81                             ld      (OuterHyperCount),a
 149+ E2D9 32 D9 81                             ld      (InnerHyperCount),a
 150+ E2DC 3D                                   dec		a								; now a = 255
 151+ E2DD 32 0E 84                             ld		(ForeShield),a
 152+ E2E0 32 0F 84                             ld		(AftShield),a
 153+ E2E3 32 10 84                             ld		(PlayerEnergy),a
 154+ E2E6 3E 14                                ld		a,20
 155+ E2E8 32 7C 86                             ld		(CargoBaySize),a
 156+ E2EB CD 5E E3                             call	ZeroCargo						; Clear out cargo
 157+ E2EE 3E 00        .SetLasers:             ld      a,0                             ; we start on Front view
 158+ E2F0 CD F4 E2                             call    LoadLaserToCurrent
 159+ E2F3 C9                                   ret
 160+ E2F4
 161+ E2F4
 162+ E2F4              ; a = current view number
 163+ E2F4 21 8E 86     LoadLaserToCurrent:     ld      hl,LaserType                    ; .
 164+ E2F7 ED 31                                add     hl,a                            ; .
 165+ E2F9 7E                                   ld      a,(hl)                          ; .
 166+ E2FA 47                                   ld      b,a                             ; first off is there a laser present in current view
 167+ E2FB 32 25 84                             ld      (CurrLaserType),a               ; set type
 168+ E2FE FE FF                                cp      255                             ; .
 169+ E300 C8                                   ret     z                               ; we can then drop out early if nothing fitted
 170+ E301 3E 04                                ld      a,4                             ; Damage state is in next variable in memory
 171+ E303 ED 31                                add     hl,a
 172+ E305 7E                                   ld      a,(hl)
 173+ E306 32 26 84                             ld      (CurrLaserDamage),a             ; copy over current laser's damage
 174+ E309 50                                   ld      d,b                             ; get table index
 175+ E30A 1E 0C                                ld      e,LaserStatsTableWidth          ;
 176+ E30C ED 30                                mul     de                              ;
 177+ E30E 21 A7 76                             ld      hl,LaserStatsTable              ;
 178+ E311 19                                   add     hl,de                           ;
 179+ E312 23                                   inc     hl                              ; we already have type
 180+ E313                                      ldAtHLtoMem CurrLaserPulseRate          ; table [1]
 180+ E313 7E          >                        ld      a,(hl)
 180+ E314 32 27 84    >                        ld      (CurrLaserPulseRate),a
 181+ E317 23                                   inc     hl                              ; table [2]
 182+ E318                                      ldAtHLtoMem CurrLaserPulseOnTime
 182+ E318 7E          >                        ld      a,(hl)
 182+ E319 32 28 84    >                        ld      (CurrLaserPulseOnTime),a
 183+ E31C 23                                   inc     hl                              ; table [3]
 184+ E31D                                      ldAtHLtoMem CurrLaserPulseOffTime
 184+ E31D 7E          >                        ld      a,(hl)
 184+ E31E 32 29 84    >                        ld      (CurrLaserPulseOffTime),a
 185+ E321 23                                   inc     hl                              ; table [4]
 186+ E322                                      ldAtHLtoMem CurrLaserPulseRest
 186+ E322 7E          >                        ld      a,(hl)
 186+ E323 32 2A 84    >                        ld      (CurrLaserPulseRest),a
 187+ E326 23                                   inc     hl                              ; table [5]
 188+ E327                                      ldAtHLtoMem CurrLaserDamageOutput
 188+ E327 7E          >                        ld      a,(hl)
 188+ E328 32 2D 84    >                        ld      (CurrLaserDamageOutput),a
 189+ E32B 23                                   inc     hl                              ; table [6]
 190+ E32C                                      ldAtHLtoMem CurrLaserEnergyDrain
 190+ E32C 7E          >                        ld      a,(hl)
 190+ E32D 32 2E 84    >                        ld      (CurrLaserEnergyDrain),a
 191+ E330 23                                   inc     hl                              ; table [7]
 192+ E331                                      ldAtHLtoMem CurrLaserHeat
 192+ E331 7E          >                        ld      a,(hl)
 192+ E332 32 2F 84    >                        ld      (CurrLaserHeat),a
 193+ E335 23                                   inc     hl                              ; table [8]
 194+ E336                                      ldAtHLtoMem CurrLaserDurability
 194+ E336 7E          >                        ld      a,(hl)
 194+ E337 32 30 84    >                        ld      (CurrLaserDurability),a
 195+ E33A 23                                   inc     hl                              ; table [9]
 196+ E33B                                      ldAtHLtoMem CurrLaserDurabilityAmount   ; we don't need tech level etc for in game run only markets so stop here
 196+ E33B 7E          >                        ld      a,(hl)
 196+ E33C 32 31 84    >                        ld      (CurrLaserDurabilityAmount),a
 197+ E33F C9                                   ret
 198+ E340
 199+ E340              ; Set a = 2 * (slaves + narcotics) + firearms
 200+ E340 3A 81 86     calculateBadness:       ld      a,(SlaveCargoTonnes)            ; Badness = 2(slaves + narcotics)
 201+ E343 47                                   ld      b,a                             ; .
 202+ E344 3A 84 86                             ld      a,(NarcoticsCargoTonnes)        ; .
 203+ E347 80                                   add     b                               ; .
 204+ E348 CB 27                                sla     a                               ; .
 205+ E34A 47                                   ld      b,a                             ;
 206+ E34B 3A 88 86                             ld      a,(FirearmsCargoTonnes)         ; Badness += firearms tonns
 207+ E34E 80                                   add     b
 208+ E34F C9                                   ret
 209+ E350
 210+ E350 CD 6B E1     PlayerDeath:            call    copyCommanderFromSave           ; load last loaded/saved commander
 211+ E353                                      ZeroA                                   ; set current laser to front
 211+ E353 AF          >                        xor a
 212+ E354 CD F4 E2                             call    LoadLaserToCurrent
 213+ E357 CD 4A 85                             call    InitMainLoop
 214+ E35A CD B2 84                             call    ResetPlayerShip
 215+ E35D C9                                   ret
 216+ E35E                                  ;    clear out all other objects
 217+ E35E                                  ;    create debris
 218+ E35E                                  ;    if cargo presetn then create a cargo
 219+ E35E                                  ;
 220+ E35E                                  ;    enqueve message game over
 221+ E35E                                  ;    go to load commander page
# file closed: ./Commander/commanderData.asm
 672  E35E                  INCLUDE "./Commander/zero_player_cargo.asm"
# file opened: ./Commander/zero_player_cargo.asm
   1+ E35E              ZeroCargo:
   2+ E35E AF           		xor		a							;zero-out cargo, including gems.
   3+ E35F 06 10        		ld		b,16						;all the way up to alien items
   4+ E361 21 7E 86     		ld		hl,CargoTonnes   			; cargo levels
   5+ E364              .ZeroLoop:
   6+ E364 77                   ld      (hl),a
   7+ E365 23           		inc		hl
   8+ E366 10 FC        		djnz	.ZeroLoop
   9+ E368 C9           		ret
  10+ E369
# file closed: ./Commander/zero_player_cargo.asm
 673  E369                  DISPLAY "Bank ",BankCommander," - Bytes free ",/D, $2000 - ($-CommanderAddr), " - BankCommander"
 674  E369              ; Bank 57  ------------------------------------------------------------------------------------------------------------------------
 675  E369                  SLOT    LAYER2Addr
 676  E369                  PAGE    BankLAYER2
 677  E369                  ORG     LAYER2Addr
 678  E000
 679  E000                  INCLUDE "./Layer2Graphics/layer2_bank_select.asm"
# file opened: ./Layer2Graphics/layer2_bank_select.asm
   1+ E000
   2+ E000 00           varL2_BANK_SELECTED			 DB	0
   3+ E001 00           varL2_BUFFER_MODE            DB 0
   4+ E002 00           varL2_ACCESS_MODE            DB 0
   5+ E003
   6+ E003 3E 08        asm_l2_double_buffer_on:    ld      a,8
   7+ E005 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
   8+ E008 C9                                       ret
   9+ E009
  10+ E009 AF           asm_l2_double_buffer_off:   xor     a
  11+ E00A 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
  12+ E00D C9                                       ret
  13+ E00E
  14+ E00E 01 3B 12     asm_disable_l2_readwrite:   ld      bc, IO_LAYER2_PORT
  15+ E011 ED 70                                    in      (c)
  16+ E013 32 02 E0                                 ld      (varL2_ACCESS_MODE),a
  17+ E016 E6 FA                                    and     LAYER2_DISABLE_MEM_ACCESS
  18+ E018 ED 79                                    out     (c),a
  19+ E01A C9                                       ret
  20+ E01B
  21+ E01B 3A 02 E0     asm_restore_l2_readwrite:   ld      a,(varL2_ACCESS_MODE)
  22+ E01E E6 05                                    and     LAYER2_READ_WRITE_MASK
  23+ E020 57                                       ld      d,a
  24+ E021 01 3B 12                                 ld      bc, IO_LAYER2_PORT
  25+ E024 ED 70                                    in      (c)
  26+ E026 32 02 E0                                 ld      (varL2_ACCESS_MODE),a
  27+ E029 A2                                       and     d
  28+ E02A ED 79                                    out     (c),a
  29+ E02C C9                                       ret
  30+ E02D
  31+ E02D 01 3B 12     asm_enable_l2_readwrite:    ld      bc, IO_LAYER2_PORT
  32+ E030 ED 70                                    in      (c)
  33+ E032 F6 05                                    or      LAYER2_READ_WRITE_MASK
  34+ E034 ED 79                                    out     (c),a
  35+ E036 C9                                       ret
  36+ E037
  37+ E037              ; "asm_l2_bank_select"
  38+ E037              ; " a = sepecific bank mask value to select, does not set varL2_BANK_SELECTED"
  39+ E037 57           asm_l2_bank_select:         ld      d,a
  40+ E038 FE 00                                    cp      0
  41+ E03A 28 08                                    jr      z,.NotBreakDebug
  42+ E03C FE 40                                    cp      $40
  43+ E03E 28 04                                    jr      z,.NotBreakDebug
  44+ E040 FE 80                                    cp      $80
  45+ E042 28 00                                    jr      z,.NotBreakDebug
  46+ E044              .NotBreakDebug:
  47+ E044 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  48+ E047 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK
  49+ E049 B2                                       or      d; | LAYER2_SHADOW_SCREEN_MASK
  50+ E04A 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  51+ E04D ED 79                                    out 	(c),a
  52+ E04F C9                                       ret
  53+ E050              ;  "asm_l2_bank_select a = sepecific bank number to select, dsets varL2_BANK_SELECTED"
  54+ E050 32 00 E0     asm_l2_bank_n_select:       ld		(varL2_BANK_SELECTED),a
  55+ E053 FE 00                                    cp		0
  56+ E055 20 04                                    jr 		nz,.nottopbank
  57+ E057 3E 00        .topbank:                   ld		a,LAYER2_SHIFTED_SCREEN_TOP
  58+ E059 18 DC                                    jr		asm_l2_bank_select
  59+ E05B FE 01        .nottopbank:                cp		1
  60+ E05D 20 04                                    jr 		nz,.notmiddlebank
  61+ E05F 3E 40        .middlebank:                ld		a,LAYER2_SHIFTED_SCREEN_MIDDLE
  62+ E061 18 D4                                    jr		asm_l2_bank_select
  63+ E063 3E 80        .notmiddlebank:             ld		a,LAYER2_SHIFTED_SCREEN_BOTTOM ; default to bottom
  64+ E065 18 D0                                    jr		asm_l2_bank_select
  65+ E067              		; Note no ret as its handled by above routines
  66+ E067
  67+ E067              ; "asm_l2_row_bank_select"
  68+ E067              ; "A (unsinged) = y row of pixel line from top, sets the bank to top middle or bottom and adjusts a reg to row memory address"
  69+ E067              ; "Could optimise by holding the previous bank but given its only an out statement it may not save T states at all"
  70+ E067              ; "destroys BC call de is safe a = adjusted poke pixel row"
  71+ E067 FE 40        asm_l2_row_bank_select:     cp 		64			; row < 64?
  72+ E069 30 11                                    jr 		nc, .l2rowGTE64
  73+ E06B 08           .l2rowLT64:                 ex		af,af'
  74+ E06C                                          ;ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP | LAYER2_SHADOW_SCREEN_MASK
  75+ E06C 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  76+ E06F F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  77+ E071 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  78+ E074 ED 79                                    out 	(c),a
  79+ E076 AF                                       xor		a						; set a to 0
  80+ E077 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  81+ E07A 08                                       ex		af,af'					; return pixel poke unharmed
  82+ E07B C9                                       ret
  83+ E07C FE 80        .l2rowGTE64:                cp 		128
  84+ E07E 30 14                                    jr 		nc, .l2rowGTE128
  85+ E080 08           .l2row64to127:              ex		af,af'
  86+ E081                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE | LAYER2_SHADOW_SCREEN_MASK
  87+ E081 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  88+ E084 F6 43                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  89+ E086 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  90+ E089 ED 79                                    out 	(c),a
  91+ E08B 3E 01                                    ld		a,1						; set a to 1
  92+ E08D 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  93+ E090 08                                       ex		af,af'
  94+ E091 D6 40                                    sub		64
  95+ E093 C9                                       ret
  96+ E094 08           .l2rowGTE128:               ex		af,af'
  97+ E095                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM | LAYER2_SHADOW_SCREEN_MASK
  98+ E095 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  99+ E098 F6 83                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 100+ E09A
 101+ E09A 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
 102+ E09D ED 79                                    out 	(c),a
 103+ E09F 3E 01                                    ld		a,1						; set a to 2
 104+ E0A1 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
 105+ E0A4 08                                       ex		af,af'
 106+ E0A5 D6 80                                    sub		128
 107+ E0A7 C9                                       ret
 108+ E0A8
 109+ E0A8
# file closed: ./Layer2Graphics/layer2_bank_select.asm
 680  E0A8                  INCLUDE "./Layer2Graphics/layer2_cls.asm"
# file opened: ./Layer2Graphics/layer2_cls.asm
   1+ E0A8
   2+ E0A8 00           l2_cls_byte	            DB 0
   3+ E0A9              ; ">DMA Command BLOCK"
   4+ E0A9
   5+ E0A9 83 C3 C7 CB  l2_fill                 DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E0AD 7D
   6+ E0AE A8 E0        l2_fill_astrt           DW l2_cls_byte
   7+ E0B0 00 40        l2_fill_length          DB $00,$40
   8+ E0B2 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   9+ E0B5 00 00        l2_fill_bstrt           DB $00,$00
  10+ E0B7 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  11+ E0BB              l2_fill_cmd_len	        EQU $ - l2_fill
  12+ E0BB
  13+ E0BB              l2_cls_dma_bank:
  14+ E0BB              ; ">l2_cls_dma_bank"
  15+ E0BB              ; ">sets a bank to"
  16+ E0BB 32 A8 E0     .set_colour:            ld (l2_cls_byte),a
  17+ E0BE 21 A9 E0     .write_dma:             ld hl, l2_fill
  18+ E0C1 06 12                                ld b, l2_fill_cmd_len
  19+ E0C3 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  20+ E0C5 ED B3                                otir
  21+ E0C7 C9                                   ret
  22+ E0C8
  23+ E0C8 3E 00        l2_set_color_upper2:    ld      a,0
  24+ E0CA CD 67 E0                             call asm_l2_row_bank_select
  25+ E0CD 3A A8 E0                             ld      a,(l2_cls_byte)
  26+ E0D0 CD BB E0                             call l2_cls_dma_bank
  27+ E0D3 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  28+ E0D5 CD 67 E0                             call asm_l2_row_bank_select
  29+ E0D8 3A A8 E0                             ld      a,(l2_cls_byte)
  30+ E0DB CD BB E0                             call l2_cls_dma_bank
  31+ E0DE C9                                   ret
  32+ E0DF
  33+ E0DF
  34+ E0DF 3E 00        l2_cls_upper_two_thirds:ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  35+ E0E1 CD 67 E0                             call asm_l2_row_bank_select
  36+ E0E4 3E E3                                ld 	a,COLOUR_TRANSPARENT
  37+ E0E6 CD BB E0                             call l2_cls_dma_bank
  38+ E0E9 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  39+ E0EB CD 67 E0                             call asm_l2_row_bank_select
  40+ E0EE 3E E3                                ld 	a,COLOUR_TRANSPARENT
  41+ E0F0 CD BB E0                             call l2_cls_dma_bank
  42+ E0F3 C9                                   ret
  43+ E0F4
  44+ E0F4 3E 80        l2_cls_lower_third:     ld a,128							; pretend we are plotting pixel on row 64 to force mid selection
  45+ E0F6 CD 67 E0                             call asm_l2_row_bank_select
  46+ E0F9 3E E3                                ld 	a,COLOUR_TRANSPARENT
  47+ E0FB CD BB E0                             call l2_cls_dma_bank
  48+ E0FE C9                                   ret
  49+ E0FF
  50+ E0FF CD DF E0     l2_cls:                 call l2_cls_upper_two_thirds
  51+ E102 CD F4 E0                             call l2_cls_lower_third
  52+ E105 C9                                   ret
  53+ E106
# file closed: ./Layer2Graphics/layer2_cls.asm
 681  E106                  INCLUDE "./Layer2Graphics/layer2_initialise.asm"
# file opened: ./Layer2Graphics/layer2_initialise.asm
   1+ E106
   2+ E106 ED 91 12 08  l2_initialise:          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
   3+ E10A ED 91 13 0B                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
   4+ E10E ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
   5+ E112 C9                                   ret
   6+ E113
# file closed: ./Layer2Graphics/layer2_initialise.asm
 682  E113                  INCLUDE "./Layer2Graphics/l2_flip_buffers.asm"
# file opened: ./Layer2Graphics/l2_flip_buffers.asm
   1+ E113              l2_flip_buffers:        GetNextReg LAYER2_RAM_PAGE_REGISTER
   1+ E113 C5          >            push bc
   1+ E114 01 3B 24    >                ld bc,$243B
   1+ E117 3E 12       >                    ld a,LAYER2_RAM_PAGE_REGISTER
   1+ E119 ED 79       >                    out (c),a
   1+ E11B 04          >                    inc b
   1+ E11C ED 78       >                in a,(c)
   1+ E11E C1          >            pop bc
   2+ E11F 57                                   ld      d,a
   3+ E120                                      GetNextReg LAYER2_RAM_SHADOW_REGISTER
   3+ E120 C5          >            push bc
   3+ E121 01 3B 24    >                ld bc,$243B
   3+ E124 3E 13       >                    ld a,LAYER2_RAM_SHADOW_REGISTER
   3+ E126 ED 79       >                    out (c),a
   3+ E128 04          >                    inc b
   3+ E129 ED 78       >                in a,(c)
   3+ E12B C1          >            pop bc
   4+ E12C 5F                                   ld      e,a
   5+ E12D ED 92 12                             nextreg LAYER2_RAM_PAGE_REGISTER, a
   6+ E130 7A                                   ld      a,d
   7+ E131 ED 92 13                             nextreg LAYER2_RAM_SHADOW_REGISTER, a
   8+ E134 C9                                   ret
   9+ E135
# file closed: ./Layer2Graphics/l2_flip_buffers.asm
 683  E135                  INCLUDE "./Layer2Graphics/layer2_plot_pixel.asm"
# file opened: ./Layer2Graphics/layer2_plot_pixel.asm
   1+ E135              ; ">l2_plot_pixel b= row number, c = column number, a = pixel col"
   2+ E135 F5           l2_plot_pixel:          push    af
   3+ E136 78                                   ld      a,b
   4+ E137              l2_pp_row_valid:        JumpIfAGTENusng ScreenHeight,l2_pp_dont_plot
   4+ E137 FE C0       >                        cp     ScreenHeight
   4+ E139 D2 47 E1    >                        jp		nc,l2_pp_dont_plot
   5+ E13C C5                                   push    bc								; bank select destroys bc so need to save it
   6+ E13D                                  ;	ld      a,b
   7+ E13D CD 67 E0                             call    asm_l2_row_bank_select
   8+ E140 C1                                   pop     bc
   9+ E141 47                                   ld      b,a
  10+ E142 60                                   ld      h,b								; hl now holds ram address after bank select
  11+ E143 69                                   ld      l,c
  12+ E144 F1                                   pop     af								; a = colour to plott
  13+ E145 77                                   ld      (hl),a
  14+ E146 C9                                   ret
  15+ E147 F1           l2_pp_dont_plot:        pop     af
  16+ E148 C9                                   ret
  17+ E149
  18+ E149              ; y aixs bounds check must have been done before calling this
  19+ E149 F5           l2_plot_pixel_no_check: push    af
  20+ E14A C5                                   push    bc								; bank select destroys bc so need to save it
  21+ E14B 78                                   ld      a,b                             ; determine target bank
  22+ E14C CD 67 E0                             call    asm_l2_row_bank_select
  23+ E14F C1                                   pop     bc
  24+ E150 47                                   ld      b,a                             ; b now adjusted for bank, c = column
  25+ E151 60 69                                ld      hl,bc                           ; hl now holds ram address after bank select
  26+ E153 F1                                   pop     af								; a = colour to plott
  27+ E154 77                                   ld      (hl),a                          ; poke to ram
  28+ E155 C9                                   ret
  29+ E156
  30+ E156              ; ">l2_plot_pixel_no_bank b= row number, c = column number, a = pixel col"
  31+ E156              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  32+ E156 E5           l2_plot_pixel_no_bank:  push 	hl
  33+ E157 60                                   ld 		h,b								; hl now holds ram address after bank select
  34+ E158 69                                   ld 		l,c
  35+ E159 77                                   ld 		(hl),a
  36+ E15A E1                                   pop		hl
  37+ E15B C9                                   ret
  38+ E15C
  39+ E15C F5           ShipPixel:              push    af
  40+ E15D 78                                   ld      a,b
  41+ E15E FE 7F                                cp      127
  42+ E160 D0                                   ret     nc
  43+ E161 F1                                   pop     af
  44+ E162 18 E5                                jr      l2_plot_pixel_no_check
  45+ E164                                      ;***Implicit ret due to jr
  46+ E164
  47+ E164              ; in bc = yx iyl = colour
  48+ E164 78           DebrisPixel:            ld      a,b
  49+ E165 FE 7F                                cp      127
  50+ E167 D0                                   ret     nc
  51+ E168 FD 7D                                ld      a, iyl
  52+ E16A 18 DD                                jr      l2_plot_pixel_no_check
  53+ E16C                                      ;***Implicit ret due to jr
  54+ E16C
  55+ E16C F5           l2_plot_pixel_y_test:   push	af
  56+ E16D 78                                   ld		a,b
  57+ E16E FE C0                                cp		192
  58+ E170 30 03                                jr		nc,.clearup
  59+ E172 F1                                   pop		af
  60+ E173 18 C0                                jr		l2_plot_pixel
  61+ E175 F1           .clearup:               pop		af
  62+ E176 C9                                   ret
  63+ E177
  64+ E177              l2_point_pixel_y_safe:	MACRO
  65+ E177 ~            						push	hl
  66+ E177 ~            						push	bc
  67+ E177 ~            						call	l2_plot_pixel
  68+ E177 ~            						pop		bc
  69+ E177 ~            						pop		hl
  70+ E177              						ENDM
  71+ E177
# file closed: ./Layer2Graphics/layer2_plot_pixel.asm
 684  E177                  INCLUDE "./Layer2Graphics/layer2_print_character.asm"
# file opened: ./Layer2Graphics/layer2_print_character.asm
   1+ E177
   2+ E177              l2_print_chr_at:
   3+ E177              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
   4+ E177              ; "Need a version that also prints absence of character"
   5+ E177 7A           	ld		a,d
   6+ E178 FE 20        	cp		32
   7+ E17A 38 3F        	jr		c,.InvalidCharacter		; Must be between 32 and 127
   8+ E17C FE 7F        	cp		127
   9+ E17E 30 3B        	jr		nc,.InvalidCharacter
  10+ E180              .ValidCharater:
  11+ E180 26 00        	ld		h,0
  12+ E182 6A           	ld		l,d
  13+ E183 29           	add		hl,hl						; * 2
  14+ E184 29           	add		hl,hl						; * 4
  15+ E185 29           	add		hl,hl						; * 8 to get byte address
  16+ E186 ED 34 00 3C  	add		hl,charactersetaddr			; hl = address of rom char
  17+ E18A 04           	inc		b							; start + 1 pixel x and y as we only print 7x7
  18+ E18B 23           	inc		hl							; skip first byte
  19+ E18C 16 07        	ld		d,7
  20+ E18E              .PrintCharLoop:
  21+ E18E D5           	push	de
  22+ E18F 7E           	ld		a,(hl)
  23+ E190 FE 00        	cp		0
  24+ E192 28 21        	jr		z,.NextRowNoBCPop
  25+ E194              .PrintARow:
  26+ E194 C5           	push	bc							; save row col
  27+ E195 16 07        	ld		d,7							; d is loop row number now
  28+ E197              .PrintPixelLoop:
  29+ E197 0C           	inc		c							; we start at col 1 not 0 so can move inc here
  30+ E198              .PrintTheRow:
  31+ E198 CB 27        	sla		a							; scroll char 1 pixel as we read from bit 7
  32+ E19A F5           	push	af							; save character byte
  33+ E19B CB 7F        	bit		7,a							; If left most pixel set then plot
  34+ E19D 20 04        	jr		nz,.PixelToPrint
  35+ E19F              .NoPixelToPrint:
  36+ E19F 3E E3        	ld		a,$E3
  37+ E1A1 18 01        	jr		.HaveSetPixelColour
  38+ E1A3              .PixelToPrint:
  39+ E1A3 7B           	ld		a,e							; Get Colour
  40+ E1A4              .HaveSetPixelColour
  41+ E1A4 E5           	push	hl
  42+ E1A5              ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
  43+ E1A5              .BankOnFirstOnly:
  44+ E1A5 F5           	push	af
  45+ E1A6 7A           	ld		a,d
  46+ E1A7 FE 07        	cp		7
  47+ E1A9 28 11        	jr		z,.PlotWithBank
  48+ E1AB              .PlotNoBank:
  49+ E1AB F1           	pop		af
  50+ E1AC 60           	ld 		h,b								; hl now holds ram address after bank select
  51+ E1AD 69           	ld 		l,c
  52+ E1AE 77           	ld 		(hl),a
  53+ E1AF              .IterateLoop:
  54+ E1AF              ;	pop		bc
  55+ E1AF E1           	pop		hl
  56+ E1B0 F1           	pop		af							; a= current byte shifted
  57+ E1B1 15           	dec		d						 	; do dec after inc as we amy
  58+ E1B2 20 E3        	jr		nz,.PrintPixelLoop
  59+ E1B4              .NextRow:
  60+ E1B4 C1           	pop		bc							; Current Col Row
  61+ E1B5              .NextRowNoBCPop:
  62+ E1B5 D1           	pop		de							; d= row loop
  63+ E1B6 04           	inc		b							; Down 1 row
  64+ E1B7 23           	inc		hl							; Next character byte
  65+ E1B8 15           	dec		d							; 1 done now
  66+ E1B9 20 D3        	jr		nz,.PrintCharLoop
  67+ E1BB              .InvalidCharacter:
  68+ E1BB C9           	ret
  69+ E1BC              .PlotWithBank:
  70+ E1BC F1           	pop		af
  71+ E1BD CD 35 E1     	call	l2_plot_pixel				; This will shift bc to poke row
  72+ E1C0 18 ED        	jr		.IterateLoop
  73+ E1C2
  74+ E1C2              l2_print_at:
  75+ E1C2              ; "l2_print_at bc= colrow, hl = addr of message, e = colour"
  76+ E1C2              ; "No error trapping, if there is no null is will just cycle on the line"
  77+ E1C2 7E           	ld	a,(hl)							; Return if empty string
  78+ E1C3 FE 00        	cp	0
  79+ E1C5 C8           	ret	z
  80+ E1C6 E5           	push	hl
  81+ E1C7 D5           	push	de
  82+ E1C8 C5           	push	bc
  83+ E1C9 57           	ld		d,a							; bc = pos, de = char and colour
  84+ E1CA CD 77 E1     	call 	l2_print_chr_at
  85+ E1CD C1           	pop		bc
  86+ E1CE D1           	pop		de
  87+ E1CF E1           	pop		hl
  88+ E1D0              .Move8Pixlestoright:
  89+ E1D0 08           	ex		af,af'
  90+ E1D1 79           	ld		a,c
  91+ E1D2 C6 08        	add		8
  92+ E1D4 4F           	ld		c,a
  93+ E1D5 08           	ex		af,af'
  94+ E1D6 23           	inc		hl
  95+ E1D7 18 E9        	jr		l2_print_at					; Just loop until 0 found
  96+ E1D9
  97+ E1D9
  98+ E1D9              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
  99+ E1D9              ; "Need a version that also prints absence of character"
 100+ E1D9              ; removed blank line optimisation as we need spaces printed
 101+ E1D9 7A           l2_print_7chr_at:       ld		a,d
 102+ E1DA FE 1F                                cp		31
 103+ E1DC 38 3D                                jr		c,.InvalidCharacter		; Must be between 32 and 127
 104+ E1DE FE 7F                                cp		127
 105+ E1E0 30 39                                jr		nc,.InvalidCharacter
 106+ E1E2 26 00        .ValidCharater:         ld		h,0
 107+ E1E4 6A                                   ld		l,d
 108+ E1E5 29                                   add		hl,hl						; * 2
 109+ E1E6 29                                   add		hl,hl						; * 4
 110+ E1E7 29                                   add		hl,hl						; * 8 to get byte address
 111+ E1E8 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
 112+ E1EC 04                                   inc		b							; start + 1 pixel x and y as we only print 7x7
 113+ E1ED 23                                   inc		hl							; skip first byte
 114+ E1EE 16 07                                ld		d,7
 115+ E1F0 D5           .PrintCharLoop:         push	de
 116+ E1F1 7E                                   ld		a,(hl)
 117+ E1F2                                      ;cp		0
 118+ E1F2                                      ;jr		z,.NextRowNoBCPop
 119+ E1F2 C5           .PrintARow:             push	bc							; save row col
 120+ E1F3 16 06                                ld		d,6							; d is loop row number now
 121+ E1F5 0C           .PrintPixelLoop:        inc		c							; we start at col 1 not 0 so can move inc here
 122+ E1F6 28 1C                                jr		z,.NextRow
 123+ E1F8 CB 27                                sla		a							; scroll char 1 pixel as we read from bit 7
 124+ E1FA F5                                   push	af							; save character byte
 125+ E1FB CB 7F                                bit		7,a							; If left most pixel set then plot
 126+ E1FD 20 04                                jr		nz,.PixelToPrint
 127+ E1FF 3E E3        .NoPixelToPrint:        ld		a,$E3
 128+ E201 18 01                                jr		.HaveSetPixelColour
 129+ E203 7B           .PixelToPrint:          ld		a,e							; Get Colour
 130+ E204 E5           .HaveSetPixelColour		push	hl
 131+ E205                                      ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
 132+ E205 F5           .BankOnFirstOnly:       push	af
 133+ E206 7A                                   ld		a,d
 134+ E207 FE 06                                cp		6
 135+ E209 28 11                                jr		z,.PlotWithBank
 136+ E20B F1           .PlotNoBank:            pop		af
 137+ E20C 60                                   ld 		h,b								; hl now holds ram address after bank select
 138+ E20D 69                                   ld 		l,c
 139+ E20E 77                                   ld 		(hl),a
 140+ E20F              .IterateLoop:	        ;	pop		bc
 141+ E20F E1                                   pop		hl
 142+ E210 F1                                   pop		af							; a= current byte shifted
 143+ E211 15                                   dec		d						 	; do dec after inc as we amy
 144+ E212 20 E1                                jr		nz,.PrintPixelLoop
 145+ E214 C1           .NextRow:               pop		bc							; Current Col Row
 146+ E215 D1           .NextRowNoBCPop:	    pop		de							; d= row loop
 147+ E216 04                                   inc		b							; Down 1 row
 148+ E217 23                                   inc		hl							; Next character byte
 149+ E218 15                                   dec		d							; 1 done now
 150+ E219 20 D5                                jr		nz,.PrintCharLoop
 151+ E21B C9           .InvalidCharacter:      ret
 152+ E21C F1           .PlotWithBank:          pop		af
 153+ E21D CD 35 E1                             call	l2_plot_pixel				; This will shift bc to poke row
 154+ E220 18 ED                                jr		.IterateLoop
 155+ E222
 156+ E222              ; "l2_print_7at bc= colrow, hl = addr of message, e = colour"
 157+ E222              ; "No error trapping, if there is no null is will just cycle on the line"
 158+ E222 7E           l2_print_7at:           ld	a,(hl)							; Return if empty string
 159+ E223 FE 00                                cp	0
 160+ E225 C8                                   ret	z
 161+ E226 E5                                   push	hl
 162+ E227 D5                                   push	de
 163+ E228 C5                                   push	bc
 164+ E229 57                                   ld		d,a							; bc = pos, de = char and colour
 165+ E22A CD D9 E1                             call 	l2_print_7chr_at
 166+ E22D C1                                   pop		bc
 167+ E22E D1                                   pop		de
 168+ E22F E1                                   pop		hl
 169+ E230 08           .Move7Pixlestoright:	ex		af,af'
 170+ E231 79                                   ld		a,c
 171+ E232 C6 07                                add		7
 172+ E234 4F                                   ld		c,a
 173+ E235 08                                   ex		af,af'
 174+ E236 23                                   inc		hl
 175+ E237 18 E9                                jr		l2_print_7at					; Just loop until 0 found
 176+ E239
 177+ E239
# file closed: ./Layer2Graphics/layer2_print_character.asm
 685  E239                  INCLUDE "./Layer2Graphics/layer2_draw_box.asm"
# file opened: ./Layer2Graphics/layer2_draw_box.asm
   1+ E239              ; "l2_draw_thick_box bc=rowcol, de=heightwidth h=color"
   2+ E239              ; TODO DMA Optimise
   3+ E239 C5 D5 E5     l2_draw_fill_box:       push    bc,,de,,hl
   4+ E23C 53                                   ld      d,e
   5+ E23D 5C                                   ld      e,h
   6+ E23E CD B3 E2                             call    l2_draw_horz_line           ; "bc = left side row,col, d = length, e = color"
   7+ E241 E1 D1 C1                             pop     bc,,de,,hl
   8+ E244 04                                   inc     b
   9+ E245 15                                   dec     d
  10+ E246 C8                                   ret     z
  11+ E247 18 F0                                jr      l2_draw_fill_box
  12+ E249
  13+ E249              ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
  14+ E249 C5 D5 F5     l2_draw_box:            push	bc,,de,,af
  15+ E24C 53                                   ld		d,e
  16+ E24D 5F                                   ld		e,a
  17+ E24E 14                                   inc		d
  18+ E24F CD B3 E2                             call	l2_draw_horz_line
  19+ E252 F1 D1 C1                             pop		bc,,de,,af
  20+ E255 C5 D5 F5     .bottomhorzline:	    push	bc,,de,,af
  21+ E258 67                                   ld		h,a							;save color whilst b = row + height
  22+ E259 78                                   ld		a,b
  23+ E25A 82                                   add		a,d
  24+ E25B 47                                   ld		b,a
  25+ E25C 53                                   ld		d,e							; d = width
  26+ E25D 14                                   inc		d							; Extra pixel for width
  27+ E25E 5C                                   ld		e,h							; e = colour
  28+ E25F CD B3 E2                             call	l2_draw_horz_line
  29+ E262 F1 D1 C1                             pop		bc,,de,,af
  30+ E265 C5 D5 F5     .leftvertline:          push	bc,,de,,af
  31+ E268 04                                   inc		b							; save 2 pixles
  32+ E269 15                                   dec		d
  33+ E26A 5F                                   ld		e,a							; e = color
  34+ E26B CD 04 E3                             call	l2_draw_vert_line
  35+ E26E F1 D1 C1                             pop		bc,,de,,af
  36+ E271 04           .rightvertline:         inc		b							; save 2 pixles
  37+ E272 15                                   dec		d
  38+ E273 67                                   ld		h,a							;save color whilst c = col + width
  39+ E274 79                                   ld		a,c
  40+ E275 83                                   add		a,e
  41+ E276 4F                                   ld		c,a
  42+ E277 5C                                   ld		e,h							; e = color
  43+ E278 CD 04 E3                             call	l2_draw_vert_line
  44+ E27B C9                                   ret
  45+ E27C
# file closed: ./Layer2Graphics/layer2_draw_box.asm
 686  E27C                  INCLUDE "./Layer2Graphics/asm_l2_plot_horizontal.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_horizontal.asm
   1+ E27C
   2+ E27C              ;; NOTE DMA is little endian
   3+ E27C 00           l2_horz_pixel           DB 0
   4+ E27D
   5+ E27D 83 C3 C7 CB  l2_horz_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E281 7D
   6+ E282 7C E2        l2_horz_colr            DW l2_horz_pixel
   7+ E284 00           l2_horz_lenlo           DB 0
   8+ E285 00           l2_horz_lenhi           DB 0
   9+ E286 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  10+ E289 00 00        l2_horz_target          DB $00, $00
  11+ E28B CF 87                                DB DMA_LOAD, DMA_ENABLE
  12+ E28D              l2_horz_cmd_len	        EQU $ - l2_horz_line
  13+ E28D
  14+ E28D
  15+ E28D              ; "l2_draw_horz_dma"
  16+ E28D              ; "plot at bc for length d colour e using dma, assumes bank already selected"
  17+ E28D 7B           l2_draw_horz_dma:       ld		a,e                                               ; T=4      ;
  18+ E28E 32 7C E2                             ld		(l2_horz_pixel),a                                 ; T=13     ;
  19+ E291 5A                                   ld      e,d ; saved 3 t states ld		a,d                                               ; T=4      ; e=d   4
  20+ E292 16 00                                ld      d,0; saved 3 t states ld 		(l2_horz_lenlo),a                                 ; T=13     ; d = 0  7
  21+ E294 ED 53 84 E2                          ld      (l2_horz_lenlo),de; saved 3 t states xor 	a                                                 ; T=4      ; t 20  31
  22+ E298                                      ; saved 3 t states ld ld 		(l2_horz_lenhi),a                                 ; T=13     ;
  23+ E298                                    ; saved 4 t states  ld		h,b                           ;          ;
  24+ E298                                    ; saved 4 t states  ld		l,c                           ;          ;
  25+ E298 ED 43 89 E2                          ld      (l2_horz_target),bc ; saved 4 t states  was , hl  ; T=20     ;
  26+ E29C 21 7D E2     .write_dma:             ld 		hl, l2_horz_line                                  ;          ;
  27+ E29F 06 10                                ld 		b, l2_horz_cmd_len                                ;
  28+ E2A1 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT                            ;
  29+ E2A3 ED B3                                otir                                                      ;
  30+ E2A5 C9                                   ret
  31+ E2A6
  32+ E2A6              ; "bc = left side row,col, d = length, e = color"
  33+ E2A6 D5           l2_draw_horz_dma_bank:  push 	de							; save length and colour
  34+ E2A7 C5                                   push 	bc							; save row col
  35+ E2A8 78                                   ld   	a,b
  36+ E2A9 CD 67 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  37+ E2AC C1                                   pop  	bc
  38+ E2AD 47                                   ld	 	b,a	       					; fixed row by the call we can go straight into HL with row col
  39+ E2AE D1                                   pop  	de							; get length back
  40+ E2AF CD 8D E2                             call    l2_draw_horz_dma
  41+ E2B2 C9                                   ret
  42+ E2B3
  43+ E2B3              ; "l2_draw_horz_line"
  44+ E2B3              ; "bc = left side row,col, d = length, e = color"
  45+ E2B3              ; "optimisation if above min pix is will use dma call SCREEN_HOZ_MIN_PIX not implemented yet"
  46+ E2B3 7A           l2_draw_horz_line:      ld		a,d
  47+ E2B4 FE 00                                cp 		0							; if its zero length then just return
  48+ E2B6 C8           .zerolengthexit:        ret		z
  49+ E2B7 FE 01        .isitlen1:              cp 		1
  50+ E2B9 CA DB E2                             jp 		z,.l2_draw_horz_line_1
  51+ E2BC FE 0A        .longenoughtfordma:     cp  10
  52+ E2BE C3 A6 E2                             jp  l2_draw_horz_dma_bank
  53+ E2C1 D5 C5        .plottableline:         push 	de,,bc  					; save length and colour an d row col
  54+ E2C3 78                                   ld   	a,b
  55+ E2C4 CD 67 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  56+ E2C7 C1                                   pop  	bc
  57+ E2C8 67                                   ld	 	h,a	       					; fixed row by the call we can go straight into HL with row col
  58+ E2C9 69                                   ld   	l,c
  59+ E2CA D1                                   pop  	de							; get length back
  60+ E2CB 79           .cliptest:              ld	 	a,c							; get column + length
  61+ E2CC 42                                   ld  	b,d  						; speculate that we don't clip by pre-loading b with length
  62+ E2CD 82                                   add  	a,d
  63+ E2CE 30 06                                jr   	nc, .l2_draw_horz_plot_loop	; if carry is set c+d > 255
  64+ E2D0 3E FF        .clipat255:             ld   	a,$FF
  65+ E2D2 91                                   sub  	c							; a holds clipped length
  66+ E2D3 47                                   ld 		b, a 						; so now hl holds poke address  b = clipped length e = colour
  67+ E2D4 18 00                                jr		.l2_draw_horz_plot_loop
  68+ E2D6 73           .l2_draw_horz_plot_loop:ld (hl),e							; loop poking hl with e for b pixels
  69+ E2D7 23                                   inc hl
  70+ E2D8 10 FC                                djnz .l2_draw_horz_plot_loop
  71+ E2DA C9                                   ret
  72+ E2DB 7B           .l2_draw_horz_line_1:   ld		a,e
  73+ E2DC C3 35 E1                             jp		l2_plot_pixel				; hijack return
  74+ E2DF
  75+ E2DF              ; "l2_draw_horz_line_to"
  76+ E2DF              ; "bc = left side row,col, d right pixel, e = color"
  77+ E2DF 7A           l2_draw_horz_line_to:   ld 		a,d
  78+ E2E0 B9                                   cp 		c
  79+ E2E1 30 04                                jr		nc, .noswap
  80+ E2E3 28 07                                jr      z, .singlepixel
  81+ E2E5 51           .swap:                  ld		d,c
  82+ E2E6 4F                                   ld		c,a
  83+ E2E7 7A           .noswap:                ld		a,d
  84+ E2E8 91                                   sub		c
  85+ E2E9              ;                        dec		a							; so now its length not offset
  86+ E2E9 57                                   ld		d,a
  87+ E2EA 18 C7                                jr 		l2_draw_horz_line			; hijack routine and return statements
  88+ E2EC 7B           .singlepixel:           ld		a,e
  89+ E2ED C3 35 E1                             jp		l2_plot_pixel				; hijack return
  90+ E2F0
# file closed: ./Layer2Graphics/asm_l2_plot_horizontal.asm
 687  E2F0                  INCLUDE "./Layer2Graphics/asm_l2_plot_vertical.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_vertical.asm
   1+ E2F0              ; ">l2_draw_vert_segment"
   2+ E2F0              ; ">hl = bank adjusted pixel poke address d = length, e = color"
   3+ E2F0              ; ">will always clip once h = 64 even if length > 64 destroys a and hl, d = resudual length not plotted"
   4+ E2F0 7A           l2_draw_vert_segment:   ld		a,d
   5+ E2F1 FE 00        .emptylinecheck:	    cp 		0
   6+ E2F3 C8                                   ret		z
   7+ E2F4 FE 01        .justonepixel	        cp		1
   8+ E2F6 20 02                                jr		nz, .multiplepixelsLoop
   9+ E2F8 73                                   ld		(hl),e
  10+ E2F9 C9                                   ret
  11+ E2FA              .multiplepixelsLoop:
  12+ E2FA 7C           .endofbankcheck:        ld   	a,h
  13+ E2FB FE 40                                cp   	64
  14+ E2FD D0                                   ret		nc							; check before we poke data if we have hit a boundary
  15+ E2FE 73           .canplotapixel:         ld   	(hl),e						; set colour
  16+ E2FF 24                                   inc 	h							; we don't check here else we would need a dec d on ret could do for optimisation of loop though
  17+ E300 15                                   dec		d
  18+ E301 C8                                   ret		z
  19+ E302 18 F6                                jr		.multiplepixelsLoop
  20+ E304
  21+ E304              ; ">l2_draw_vert_line"
  22+ E304              ; ">bc = row col d = length, e = color"
  23+ E304 78           l2_draw_vert_line:      ld 		a,b
  24+ E305 FE C0        .offscreencheck:        cp 		SCREEN_HEIGHT
  25+ E307 D0                                   ret 	nc							; can't start off the screen
  26+ E308 7A           .emptylinecheck:        ld		a,d
  27+ E309 FE 00                                cp		0
  28+ E30B C8                                   ret		z
  29+ E30C FE 01                                cp		1
  30+ E30E 20 04                                jr		nz,.multiplepixels
  31+ E310 CD 35 E1     .itsonepixel:           call	l2_plot_pixel
  32+ E313 C9                                   ret
  33+ E314              .multiplepixels:						; so now we have at least 2 pixels to plot
  34+ E314 7A           .clipto192:             ld		a,d							; get length
  35+ E315 80                                   add		a,b							; a= row + length
  36+ E316 38 04                                jr		c,.needtoclip				; if it was > 255 then there is a definite need
  37+ E318 FE C0                                cp		SCREEN_HEIGHT
  38+ E31A 38 08                                jr		c, .noclipneeded
  39+ E31C 78           .needtoclip             ld		a,b
  40+ E31D 82                                   add		a,d
  41+ E31E D6 C0                                sub		SCREEN_HEIGHT
  42+ E320 67                                   ld		h,a							; use h as a temp holding for (row + length) - 192
  43+ E321 7A                                   ld		a,d
  44+ E322 94                                   sub		h
  45+ E323 57                                   ld		d,a							; d = length - ((row + length) - 192)
  46+ E324              ; so now BC = row col, d = length clipped, e = color
  47+ E324 78           .noclipneeded:          ld		a,b
  48+ E325 C5 D5                                push	bc,,de
  49+ E327 CD 67 E0                             call 	asm_l2_row_bank_select
  49+ E32A               	 	; we now have poke address and a variable holding current bank number
  50+ E32A D1 C1                                pop		bc,,de
  51+ E32C 67                                   ld		h,a							; b now tolds target pixel for first plot
  52+ E32D 69                                   ld		l,c  						; and c holds pixel column for plotting
  53+ E32E CD F0 E2                             call 	l2_draw_vert_segment		; draw seg, d = pixels remaining
  54+ E331 7A                                   ld		a,d							; a and d = nbr pixels remaining
  55+ E332 FE 00                                cp		0
  56+ E334 28 27                                jr		z, .doneplotting
  57+ E336 3A 00 E0     .anotherbank:           ld		a, (varL2_BANK_SELECTED)
  58+ E339 3C                                   inc		a
  59+ E33A 06 00                                ld		b,0
  60+ E33C C5 D5                                push	bc,,de
  61+ E33E CD 50 E0                             call 	asm_l2_bank_n_select
  62+ E341 D1 C1                                pop     bc,,de
  63+ E343 60                                   ld		h,b							; b now tolds target pixel for first plot
  64+ E344 69                                   ld		l,c  						; and c holds pixel column for plotting
  65+ E345 CD F0 E2                             call	l2_draw_vert_segment
  66+ E348 7A                                   ld		a,d
  67+ E349 FE 00                                cp		0
  68+ E34B 28 10                                jr		z,.doneplotting
  69+ E34D 3A 00 E0     .yetanotherbank:        ld		a, (varL2_BANK_SELECTED)
  70+ E350 3C                                   inc		a
  71+ E351 06 00                                ld		b,0
  72+ E353 C5 D5                                push	bc,,de
  73+ E355 CD 50 E0                             call 	asm_l2_bank_n_select
  74+ E358 D1                                   pop		de
  75+ E359 E1                                   pop		hl							; hl = bc
  76+ E35A CD F0 E2                             call	l2_draw_vert_segment		; we have now hit 192 pixels so done
  77+ E35D C9           .doneplotting:	        ret
  78+ E35E
  79+ E35E              ; ">l2_draw_vert_line_to"
  80+ E35E              ; ">bc = row col d = to position, e = color"
  81+ E35E 78           l2_draw_vert_line_to:   ld		a,b
  82+ E35F BA                                   cp		d
  83+ E360 38 02                                jr		c, .noyswap
  84+ E362 42           .yswap:                 ld		b,d			; Swap round row numbers so we are always incrementing
  85+ E363 57                                   ld		d,a			; now we have a top to bottom to we we can calc length from bc
  86+ E364 7A           .noyswap:               ld		a,d 		; we still may have d in a but only if it was bottom to top
  87+ E365 90                                   sub		b
  88+ E366 3C                                   inc		a			; so now its length not offset
  89+ E367 57                                   ld		d,a
  90+ E368 18 9A                                jr		l2_draw_vert_line	; we can hijack its clipping, 0 check and return logic
  91+ E36A                                      ; no return needed
  92+ E36A
# file closed: ./Layer2Graphics/asm_l2_plot_vertical.asm
 688  E36A                  INCLUDE "./Layer2Graphics/layer2_plot_diagonal.asm"
# file opened: ./Layer2Graphics/layer2_plot_diagonal.asm
   1+ E36A
   2+ E36A              l2_draw_box_to:
   3+ E36A              ; ">l2_draw_box_to bc=rowcol, de=torowcol a=color"
   4+ E36A              ; ">NOT IMPLEMENTED YET"
   5+ E36A C9           	ret
   6+ E36B
   7+ E36B              ;; Note l2stepx is done via self modifying code rather than an if for speed
   8+ E36B              ;; l2stepx1 and l2stepx2 are the addresses to stick the inc or dec in
   9+ E36B              l2decbstep	EQU $05
  10+ E36B              l2incbstep	EQU	$04
  11+ E36B              l2deccstep	EQU $0D
  12+ E36B              l2inccstep	EQU	$0C
  13+ E36B              		; l2 deltas are signed
  14+ E36B 00 00        l2deltaY	DW	0
  15+ E36D 00 00        l2deltaX	DW	0
  16+ E36F 00           l2deltaYsq	db	0
  17+ E370 00           l2deltaXsq	db	0
  18+ E371 00           l2deltaYn	db	0
  19+ E372 00           l2deltaXn	db	0
  20+ E373 00           l2deltaYsqn	db	0
  21+ E374 00           l2deltaXsqn	db	0
  22+ E375 00           l2linecolor	db	0
  23+ E376 00 00        l2fraction	dw	0
  24+ E378 00 00        l2e2		dw	0
  25+ E37A 00           l2way		db	0
  26+ E37B 00 00        l2targetPtr	dw	0
  27+ E37D              ;; These arrays should be 192 but if we use 256 then getting array2 value is just inc h rather than indexing again.
  28+ E37D 00 00 00...  l2targetArray1 ds	256
  29+ E47D 00 00 00...  l2targetArray2 ds	256
  30+ E57D              ;; Using Bresenham Algorithm draw a diagonal line top to bottom. First we must sort of course
  31+ E57D              ;;plotLine(int x0, int y0, int x1, int y1)
  32+ E57D              ;;    dx =  abs(x1-x0);
  33+ E57D              ;;    sx = x0<x1 ? 1 : -1;
  34+ E57D              ;;    dy = -abs(y1-y0);
  35+ E57D              ;;    sy = y0<y1 ? 1 : -1;
  36+ E57D              ;;    err = dx+dy;  /* error value e_xy */
  37+ E57D              ;;    while (true)   /* loop */
  38+ E57D              ;;        plot(x0, y0);
  39+ E57D              ;;        if (x0==x1 && y0==y1) break;
  40+ E57D              ;;        e2 = 2*err;
  41+ E57D              ;;        if (e2 >= dy) /* e_xy+e_x > 0 */
  42+ E57D              ;;            err += dy;
  43+ E57D              ;;            x0 += sx;
  44+ E57D              ;;        end if
  45+ E57D              ;;        if (e2 <= dx) /* e_xy+e_y < 0 */
  46+ E57D              ;;            err += dx;
  47+ E57D              ;;            y0 += sy;
  48+ E57D              ;;        end if
  49+ E57D              ;;    end while
  50+ E57D              ; ">l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
  51+ E57D              ; ">hl will be either l2targetArray1 or 2"
  52+ E57D              ; NOTE IF WE INTERLEAVE THESE TWO TABLES WE COUDL READ BOTH X POS as a 16 bit read
  53+ E57D FE 01        l2_draw_diagonal_save:  cp		1
  54+ E57F 28 06                                jr		z,l2S_ItsArray1
  55+ E581 21 7D E4                             ld		hl,l2targetArray2
  56+ E584 C3 8A E5                             jp		l2S_setTarget
  57+ E587 21 7D E3     l2S_ItsArray1:	        ld		hl,l2targetArray1
  58+ E58A 22 7B E3     l2S_setTarget:	        ld		(l2targetPtr),hl
  59+ E58D              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
  60+ E58D 32 75 E3                             ld		(l2linecolor),a					;save colour for later
  61+ E590 21 00 00                             ld		hl,0                            ;
  62+ E593 22 6D E3                             ld		(l2deltaX),hl                   ;
  63+ E596 22 6B E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
  64+ E599 78           l2S_preSort:            ld		a,b								;
  65+ E59A                                      JumpIfALTNusng	d,l2S_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
  65+ E59A BA          >                        cp      d
  65+ E59B DA A3 E5    >                        jp		c, l2S_noYSort
  66+ E59E              l2S_SortBasedOnY:	    ldhlbc									;
  66+ E59E 60          >                        ld		h,b
  66+ E59F 69          >                        ld		l,c
  67+ E5A0 EB                                   ex		de,hl                           ;
  68+ E5A1                                      ldbchl									; swap over bc and de using hl as an intermediate
  68+ E5A1 44          >                        ld		b,h
  68+ E5A2 4D          >                        ld		c,l
  69+ E5A3 DD 62        l2S_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
  70+ E5A5 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
  71+ E5A7 79           l2S_setXLen:            ld		a,c                             ;
  72+ E5A8                                      JumpIfALTNusng e,l2S_PosXLen			; if x1 < x2 then we have a positive increment
  72+ E5A8 BB          >                        cp      e
  72+ E5A9 DA B5 E5    >                        jp		c, l2S_PosXLen
  73+ E5AC 79           l2S_NegXLen:            ld		a,c                             ;
  74+ E5AD 93                                   sub     e                               ;
  75+ E5AE 32 6D E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
  76+ E5B1 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
  77+ E5B3 18 07                                jr		l2S_XINCDEC
  78+ E5B5 7B           l2S_PosXLen:	        ld		a,e                             ;
  79+ E5B6 91                                   sub		c                               ;
  80+ E5B7 32 6D E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
  81+ E5BA 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
  82+ E5BC              l2S_XINCDEC:
  83+ E5BC 32 28 E6     	ld		(l2S_adjustCol),a				;
  84+ E5BF 32 58 E6     	ld		(l2S_adjustCol2),a				; update self modifying code for X update with inc or dec from above
  85+ E5C2              l2S_setYLen
  86+ E5C2 7A           	ld		a,d							 	; presorted on Y so it is now always positive
  87+ E5C3 90           	sub		b
  88+ E5C4 32 6B E3     	ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
  89+ E5C7              l2S_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
  90+ E5C7              ldS_FracDYltDX:								;
  91+ E5C7 2A 6B E3     	ld		hl,(l2deltaY)					; Fraction = dY - dX
  92+ E5CA ED 5B 6D E3  	ld		de,(l2deltaX)
  93+ E5CE              	ClearCarryFlag
  93+ E5CE B7          >                        or a
  94+ E5CF ED 52        	sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
  95+ E5D1 EB           	ex		de,hl
  96+ E5D2 FD 62        	ld		iyh,d							; we will use IY reg for fractions
  97+ E5D4 FD 6B        	ld		iyl,e
  98+ E5D6 F2 FB E5     	jp		p,l2S_fracIsPositive
  99+ E5D9              l2S_fracIsNegative:
 100+ E5D9              	NegIY
 100+ E5D9 AF          >                    xor a
 100+ E5DA FD 95       >                    sub iyl
 100+ E5DC FD 6F       >                    ld iyl,a
 100+ E5DE 9F          >                    sbc a,a
 100+ E5DF FD 94       >                    sub iyh
 100+ E5E1 FD 67       >                    ld iyh,a
 101+ E5E3              	ShiftIYRight1
 101+ E5E3 FD 7C       >			   ld 	a,iyh
 101+ E5E5 CB 3F       >			   srl 	a
 101+ E5E7 FD 67       >			   ld	iyh,a
 101+ E5E9 FD 7D       >			   ld 	a,iyl
 101+ E5EB 1F          >			   rra
 101+ E5EC FD 6F       >			   ld	iyl,a
 102+ E5EE              	NegIY
 102+ E5EE AF          >                    xor a
 102+ E5EF FD 95       >                    sub iyl
 102+ E5F1 FD 6F       >                    ld iyl,a
 102+ E5F3 9F          >                    sbc a,a
 102+ E5F4 FD 94       >                    sub iyh
 102+ E5F6 FD 67       >                    ld iyh,a
 103+ E5F8 C3 06 E6     	jp		l2S_SkipCalcInc					; so we have a negative frac
 104+ E5FB              l2S_fracIsPositive:
 105+ E5FB              	ShiftIYRight1
 105+ E5FB FD 7C       >			   ld 	a,iyh
 105+ E5FD CB 3F       >			   srl 	a
 105+ E5FF FD 67       >			   ld	iyh,a
 105+ E601 FD 7D       >			   ld 	a,iyl
 105+ E603 1F          >			   rra
 105+ E604 FD 6F       >			   ld	iyl,a
 106+ E606              l2S_SkipCalcInc:
 107+ E606              l2S_Loop:									; As we loop, bc = to plot current XY
 108+ E606 2A 7B E3     	ld		hl,(l2targetPtr)				; Insert into respective array
 109+ E609 78           	ld		a,b
 110+ E60A ED 31        	add		hl,a
 111+ E60C 71           	ld		(hl),c
 112+ E60D              l2S_CheckIfEnd:
 113+ E60D DD 7C        	ld		a,ixh
 114+ E60F              	JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 114+ E60F B8          >                        cp     b
 114+ E610 D2 16 E6    >                        jp		nc,l2S_CheckXPos
 115+ E613 C3 1A E6     	jp		l2S_Continue
 116+ E616              l2S_CheckXPos:
 117+ E616 79           	ld		a,c
 118+ E617              	ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 118+ E617 DD BD       >                        cp    ixl
 118+ E619 D0          >                        ret	 nc
 119+ E61A              l2S_Continue:
 120+ E61A              l2S_HNegative:
 121+ E61A FD 7C        	ld		a,iyh
 122+ E61C CB 7F        	bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 123+ E61E 28 0B        	jr		z,l2S_ErrNotNegative			;
 124+ E620              l2S_ErrNegative:								; if its a negative error update X
 125+ E620 3A 6B E3     	ld		a,(l2deltaY)
 126+ E623 16 00        	ld		d,0
 127+ E625 5F           	ld		e,a
 128+ E626 FD 19        	add		iy,de							; add deltaY(unsinged) to l2fraction
 129+ E628              l2S_adjustCol:
 130+ E628 00           	nop										; this is our inc/dec of X
 131+ E629 18 DB        	jr		l2S_Loop							; repeat loop
 132+ E62B              l2S_ErrNotNegative:
 133+ E62B FD 7C        	ld		a,iyh
 134+ E62D FD B5        	or		iyl
 135+ E62F              	JumpIfAIsZero l2S_ErrZero					; if there is no error then goto zeroerror
 135+ E62F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 135+ E630 CA 49 E6    >                        jp	    z, l2S_ErrZero
 136+ E633              l2S_ErrPositive:								; if its a positive error then we update Y
 137+ E633              	lddeiy
 137+ E633 FD 54       >                        ld		d,iyh
 137+ E635 FD 5D       >                        ld		e,iyl
 138+ E637 EB           	ex		de,hl
 139+ E638 16 00        	ld		d,0
 140+ E63A 3A 6D E3     	ld		a,(l2deltaX)
 141+ E63D 5F           	ld		e,a
 142+ E63E              	ClearCarryFlag
 142+ E63E B7          >                        or a
 143+ E63F ED 52        	sbc		hl,de
 144+ E641 EB           	ex		de,hl
 145+ E642              	ldiyde
 145+ E642 FD 62       >                        ld		iyh,d
 145+ E644 FD 6B       >                        ld		iyl,e
 146+ E646              l2S_adjustRow:									; move Y down by one
 147+ E646 04           	inc		b
 148+ E647 18 BD        	jr		l2S_Loop
 149+ E649              l2S_ErrZero:
 150+ E649 2A 6D E3     	ld		hl,(l2deltaX)
 151+ E64C EB           	ex		de,hl
 152+ E64D 2A 6B E3     	ld		hl,(l2deltaY)
 153+ E650              	ClearCarryFlag
 153+ E650 B7          >                        or a
 154+ E651 ED 52        	sbc		hl,de
 155+ E653 EB           	ex		de,hl
 156+ E654              	ldiyde
 156+ E654 FD 62       >                        ld		iyh,d
 156+ E656 FD 6B       >                        ld		iyl,e
 157+ E658              l2S_adjustCol2:
 158+ E658 00           	nop										; update X and Y
 159+ E659 04           	inc		b
 160+ E65A 18 AA        	jr		l2S_Loop
 161+ E65C
 162+ E65C              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 163+ E65C 32 75 E3     l2_draw_diagonal:       ld		(l2linecolor),a					;save colour for later
 164+ E65F 21 00 00                             ld		hl,0                            ;
 165+ E662 22 6D E3                             ld		(l2deltaX),hl                   ;
 166+ E665 22 6B E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 167+ E668 78           l2D_preSort:            ld		a,b								;
 168+ E669                                      JumpIfALTNusng	d,l2D_noYSort			; we must have Y1 < Y2 (if equal then verical line picked up earlier
 168+ E669 BA          >                        cp      d
 168+ E66A DA 72 E6    >                        jp		c, l2D_noYSort
 169+ E66D              l2D_SortBasedOnY:	    ldhlbc									;
 169+ E66D 60          >                        ld		h,b
 169+ E66E 69          >                        ld		l,c
 170+ E66F EB                                   ex		de,hl                           ;
 171+ E670                                      ldbchl									; swap over bc and de using hl as an intermediate
 171+ E670 44          >                        ld		b,h
 171+ E671 4D          >                        ld		c,l
 172+ E672 DD 62        l2D_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 173+ E674 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
 174+ E676 79           l2D_setXLen:            ld		a,c                             ;
 175+ E677                                      JumpIfALTNusng e,l2D_PosXLen			; if x1 < x2 then we have a positive increment
 175+ E677 BB          >                        cp      e
 175+ E678 DA 84 E6    >                        jp		c, l2D_PosXLen
 176+ E67B 79           l2D_NegXLen:            ld		a,c                             ;
 177+ E67C 93                                   sub     e                               ;
 178+ E67D 32 6D E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 179+ E680 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 180+ E682 18 07                                jr		l2D_XINCDEC
 181+ E684 7B           l2D_PosXLen:	        ld		a,e                             ;
 182+ E685 91                                   sub		c                               ;
 183+ E686 32 6D E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 184+ E689 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 185+ E68B 32 FA E6     l2D_XINCDEC:	        ld		(l2D_adjustCol),a				;
 186+ E68E 32 2A E7                             ld		(l2D_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 187+ E691 7A           l2D_setYLen				ld		a,d							 	; presorted on Y so it is now always positive
 188+ E692 90                                   sub		b
 189+ E693 32 6B E3                             ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 190+ E696              l2D_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 191+ E696 2A 6B E3     ldD_FracDYltDX:			ld		hl,(l2deltaY)					; Fraction = dY - dX
 192+ E699 ED 5B 6D E3                          ld		de,(l2deltaX)
 193+ E69D                                      ClearCarryFlag
 193+ E69D B7          >                        or a
 194+ E69E ED 52                                sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 195+ E6A0 EB                                   ex		de,hl
 196+ E6A1 FD 62                                ld		iyh,d							; we will use IY reg for fractions
 197+ E6A3 FD 6B                                ld		iyl,e
 198+ E6A5 F2 CA E6                             jp		p,l2D_fracIsPositive
 199+ E6A8              l2D_fracIsNegative:     NegIY
 199+ E6A8 AF          >                    xor a
 199+ E6A9 FD 95       >                    sub iyl
 199+ E6AB FD 6F       >                    ld iyl,a
 199+ E6AD 9F          >                    sbc a,a
 199+ E6AE FD 94       >                    sub iyh
 199+ E6B0 FD 67       >                    ld iyh,a
 200+ E6B2                                      ShiftIYRight1
 200+ E6B2 FD 7C       >			   ld 	a,iyh
 200+ E6B4 CB 3F       >			   srl 	a
 200+ E6B6 FD 67       >			   ld	iyh,a
 200+ E6B8 FD 7D       >			   ld 	a,iyl
 200+ E6BA 1F          >			   rra
 200+ E6BB FD 6F       >			   ld	iyl,a
 201+ E6BD                                      NegIY
 201+ E6BD AF          >                    xor a
 201+ E6BE FD 95       >                    sub iyl
 201+ E6C0 FD 6F       >                    ld iyl,a
 201+ E6C2 9F          >                    sbc a,a
 201+ E6C3 FD 94       >                    sub iyh
 201+ E6C5 FD 67       >                    ld iyh,a
 202+ E6C7 C3 D5 E6                             jp		l2D_SkipCalcInc					; so we have a negative frac
 203+ E6CA              l2D_fracIsPositive:     ShiftIYRight1
 203+ E6CA FD 7C       >			   ld 	a,iyh
 203+ E6CC CB 3F       >			   srl 	a
 203+ E6CE FD 67       >			   ld	iyh,a
 203+ E6D0 FD 7D       >			   ld 	a,iyl
 203+ E6D2 1F          >			   rra
 203+ E6D3 FD 6F       >			   ld	iyl,a
 204+ E6D5              l2D_SkipCalcInc:
 205+ E6D5 C5 D5        l2D_Loop:				push	bc,,de                 			; l2DeltaY and l2DeltaX are set
 206+ E6D7 3A 75 E3                             ld		a,(l2linecolor)     			;
 207+ E6DA CD 35 E1                             call	l2_plot_pixel       			; Plot Pixel
 208+ E6DD D1 C1                                pop     bc,,de
 209+ E6DF DD 7C        l2D_CheckIfEnd:	        ld		a,ixh
 210+ E6E1                                      JumpIfAGTENusng	  b,l2D_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 210+ E6E1 B8          >                        cp     b
 210+ E6E2 D2 E8 E6    >                        jp		nc,l2D_CheckXPos
 211+ E6E5 C3 EC E6                             jp		l2D_Continue
 212+ E6E8 79           l2D_CheckXPos:          ld		a,c
 213+ E6E9                                      ReturnIfAEqNusng ixl					; if X1 has reached or exceeded X2 then we are done
 213+ E6E9 DD BD       >                        cp      ixl
 213+ E6EB C8          >                        ret     z
 214+ E6EC              l2D_Continue:
 215+ E6EC FD 7C        l2D_HNegative:			ld		a,iyh
 216+ E6EE CB 7F                                bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 217+ E6F0 28 0B                                jr		z,l2D_ErrNotNegative			;
 218+ E6F2 3A 6B E3     l2D_ErrNegative:		ld		a,(l2deltaY)
 219+ E6F5 16 00                                ld		d,0
 220+ E6F7 5F                                   ld		e,a
 221+ E6F8 FD 19                                add		iy,de							; add deltaY(unsinged) to l2fraction
 222+ E6FA 00           l2D_adjustCol:          nop										; this is our inc/dec of X
 223+ E6FB 18 D8                                jr		l2D_Loop							; repeat loop
 224+ E6FD FD 7C        l2D_ErrNotNegative:     ld		a,iyh
 225+ E6FF FD B5                                or		iyl
 226+ E701                                      JumpIfAIsZero l2D_ErrZero					; if there is no error then goto zeroerror
 226+ E701 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 226+ E702 CA 1B E7    >                        jp	    z, l2D_ErrZero
 227+ E705              l2D_ErrPositive:		lddeiy
 227+ E705 FD 54       >                        ld		d,iyh
 227+ E707 FD 5D       >                        ld		e,iyl
 228+ E709 EB                                   ex		de,hl
 229+ E70A 16 00                                ld		d,0
 230+ E70C 3A 6D E3                             ld		a,(l2deltaX)
 231+ E70F 5F                                   ld		e,a
 232+ E710                                      ClearCarryFlag
 232+ E710 B7          >                        or a
 233+ E711 ED 52                                sbc		hl,de
 234+ E713 EB                                   ex		de,hl
 235+ E714                                      ldiyde
 235+ E714 FD 62       >                        ld		iyh,d
 235+ E716 FD 6B       >                        ld		iyl,e
 236+ E718 04           l2D_adjustRow:			inc		b
 237+ E719 18 BA                                jr		l2D_Loop
 238+ E71B 2A 6D E3     l2D_ErrZero:            ld		hl,(l2deltaX)
 239+ E71E EB                                   ex		de,hl
 240+ E71F 2A 6B E3                             ld		hl,(l2deltaY)
 241+ E722                                      ClearCarryFlag
 241+ E722 B7          >                        or a
 242+ E723 ED 52                                sbc		hl,de
 243+ E725 EB                                   ex		de,hl
 244+ E726                                      ldiyde
 244+ E726 FD 62       >                        ld		iyh,d
 244+ E728 FD 6B       >                        ld		iyl,e
 245+ E72A 00           l2D_adjustCol2:         nop										; update X and Y
 246+ E72B 04                                   inc		b
 247+ E72C 18 A7                                jr		l2D_Loop
 248+ E72E              ;----------------------------------------------------------------------------------------------------------------------------------
 249+ E72E
 250+ E72E
 251+ E72E
 252+ E72E
 253+ E72E              ;Loin:				; BBC version of line draw
 254+ E72E              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 255+ E72E              ;	ld		(l2linecolor),a					; save colour as a reg gets used alot, coudl move this into interrupt flag and disable interrups
 256+ E72E              ;	ld		ixh,0							; ixh = s
 257+ E72E              ;	ld		iyh,0							; iyh = swap
 258+ E72E              ;	ld		l,0								; l will hold delta sign flags
 259+ E72E              ;LoinCalcDeltaX:
 260+ E72E              ;	ld		a,e
 261+ E72E              ;	sub		c								; a = deltaX
 262+ E72E              ;	JumpIfPositive LoinPosDx
 263+ E72E              ;LoinNegDx:
 264+ E72E              ;	neg										; carry flag will indicate deltaX was negative
 265+ E72E              ;	ld		l,$80							; set bit 7 of l for negative
 266+ E72E              ;LoinPosDx:
 267+ E72E              ;	ld		ixl,a							; ixl = varP = deltaX
 268+ E72E              ;LoinCalcDeltaY:
 269+ E72E              ;	ld		a,d
 270+ E72E              ;	sub		b								; a= deltaY
 271+ E72E              ;	JumpIfPositive LoinPosDy
 272+ E72E              ;LoinNegDy:
 273+ E72E              ;	neg
 274+ E72E              ;	set		6,l								; set bit 6 of l for negative deltaY
 275+ E72E              ;LoinPosDy:
 276+ E72E              ;	ld		iyl,a							; iyl = varQ = deltaY
 277+ E72E              ;	JumpIfAGTENusng ixl, LoinSTPy			; if deltaY >= DeltaX then step along Y
 278+ E72E              ;LoinSTPx:									; step along X
 279+ E72E              ;	JumpOnBitClear l,7						; if l flags were clear then X2 < X2
 280+ E72E              ;LoinSTPxSwapCoords:
 281+ E72E              ;	dec		iyh								; swap flag now becomes FF
 282+ E72E              ;	ld		a,l								; save l flags
 283+ E72E              ;	ex		de,hl							; save de to hl
 284+ E72E              ;	lddebc									; Point2 = point1
 285+ E72E              ;	ldbchl									; Point1 = point2 that was saved
 286+ E72E              ;	ld		l,a								; get back l flags
 287+ E72E              ;LoinSTPxCorrectOrder:
 288+ E72E              ;	l2_point_pixel_y_safe					; call plot pixel preseving bc hl
 289+ E72E              ;	ld		a,iyl							; get delta Y back
 290+ E72E              ;	ld		iy1,$FE							; roll counter
 291+ E72E              ;LionSTPxRollQ:
 292+ E72E              ;	sla		a								; highest bit of delta-Y
 293+ E72E              ;	jp		c,LoinSTPxSteep
 294+ E72E              ;	cp		ixl								; compare with DeltaX
 295+ E72E              ;	jp		cs,LoinSTPxShallow
 296+ E72E              ;LoinSTPxSteep:								;; LI4
 297+ E72E              ;	sbc		a,ixl							; deltaYwork -= (deltaX+1)
 298+ E72E              ;	scf										; force carry flag set
 299+ E72E              ;LoinSTPxShallow:							;; LI5
 300+ E72E              ;	rl		iyl								; rotate iyl which started as FE
 301+ E72E              ;	jp		c,LionSTPxRollQ					; so we are doing a 6 bit loop
 302+ E72E              ;	inc		ihl								; DeltaX += 1
 303+ E72E              ;LoinSTPxYDirection:							; change this to self modifying code
 304+ E72E              ;	ld		a,d
 305+ E72E              ;	JumpIfAGTEn	b,LionDOWN:
 306+ E72E              ;	ld		a,iyh							; swap flag
 307+ E72E              ;	JumpIfANotZero	X1Inc  					; if swap flag was not set then no need to update R
 308+ E72E              ;LoinSTPxX1Dec:
 309+ E72E              ;	dec		c								; move left 1 pixel as we sawped
 310+ E72E              ;LoinSTPxXCounter:							;; LIL2
 311+ E72E              ;	sub		b
 312+ E72E              ;	if
 313+ E72E              ;
 314+ E72E              ;85 82                   STA &82	   \ R	\ mask byte
 315+ E72E              ;A5 81                   LDA &81	   \ Q	\ delta-Y
 316+ E72E              ;A2 FE                   LDX #&FE	\ roll counter
 317+ E72E              ;86 81                   STX &81		\ Q
 318+ E72E              ;.LIL1	\ roll Q
 319+ E72E              ;0A                      ASL A		\ highest bit of delta-Y
 320+ E72E              ;B0 04                   BCS LI4		\ steep
 321+ E72E              ;C5 1B                   CMP &1B	   \ P	\ delta-X
 322+ E72E              ;90 03                   BCC LI5		\ shallow
 323+ E72E              ;.LI4	\ steep
 324+ E72E              ;E5 1B                   SBC &1B		\ P
 325+ E72E              ;38                      SEC
 326+ E72E              ;.LI5	\ shallow
 327+ E72E              ;26 81                   ROL &81	   \ Q	\ #&FE
 328+ E72E              ;B0 F2                   BCS LIL1 	\ loop Q, end with some low bits in Q
 329+ E72E              ;A6 1B                   LDX &1B		\ P
 330+ E72E              ;E8                      INX 		\ Xreg is width
 331+ E72E              ;A5 37                   LDA &37		\ Y2
 332+ E72E              ;E5 35                   SBC &35		\ Y1
 333+ E72E              ;B0 2C                   BCS DOWN	\ draw line to the right and down
 334+ E72E              ;A5 90                   LDA &90		\ SWAP
 335+ E72E              ;D0 07                   BNE LI6		\ else Xreg was correct after all, no need to update R
 336+ E72E              ;CA                      DEX
 337+ E72E              ;.LIL2	\ counter X width
 338+ E72E              ;A5 82                   LDA &82	   \ R	\ mask byte
 339+ E72E              ;51 07                   EOR (&07),Y	\ (SC),Y
 340+ E72E              ;91 07                   STA (&07),Y	\ (SC),Y
 341+ E72E              ;.LI6	\ Xreg correct
 342+ E72E              ;46 82                   LSR &82	   \ R	\ mask byte
 343+ E72E              ;90 08                   BCC LI7   	\ else moving to next column to right. Bring carry in back
 344+ E72E              ;66 82                   ROR &82		\ R
 345+ E72E              ;A5 07                   LDA &07		\ SC
 346+ E72E              ;69 08                   ADC #8		\ next column
 347+ E72E              ;85 07                   STA &07		\ SC
 348+ E72E              ;.LI7	\ S += Q. this is like an overflow monitor to update Y
 349+ E72E              ;A5 83                   LDA &83		\ S
 350+ E72E              ;65 81                   ADC &81	   \ Q	\ some low bits
 351+ E72E              ;85 83                   STA &83		\ S
 352+ E72E              ;90 07                   BCC LIC2	\ skip Y adjustment
 353+ E72E              ;88                      DEY
 354+ E72E              ;10 04                   BPL LIC2	\ skip Y adjustment
 355+ E72E              ;C6 08                   DEC &08		\ SC+1
 356+ E72E              ;A0 07                   LDY #7
 357+ E72E              ;.LIC2	\ skip Y adjustment
 358+ E72E              ;CA                      DEX
 359+ E72E              ;D0 DC                   BNE LIL2	\ loop X width
 360+ E72E              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 361+ E72E              ;60                      RTS
 362+ E72E              ;
 363+ E72E              ;.DOWN	\ Line is going to the right and down
 364+ E72E              ;A5 90                   LDA &90		\ SWAP
 365+ E72E              ;F0 07                   BEQ LI9		\ no swap
 366+ E72E              ;CA                      DEX
 367+ E72E              ;.LIL3	\ counter X width
 368+ E72E              ;A5 82                   LDA &82	    \ R \ mask byte
 369+ E72E              ;51 07                   EOR (&07),Y	\ (SC),Y
 370+ E72E              ;91 07                   STA (&07),Y	\ (SC),Y
 371+ E72E              ;.LI9	\ no swap
 372+ E72E              ;46 82                   LSR &82		\ R
 373+ E72E              ;90 08                   BCC LI10	\ still in correct column, hop
 374+ E72E              ;66 82                   ROR &82		\ R
 375+ E72E              ;A5 07                   LDA &07		\ SC
 376+ E72E              ;69 08                   ADC #8		\ next column
 377+ E72E              ;85 07                   STA &07		\ SC
 378+ E72E              ;.LI10	\ this is like an overflow monitor to update Y
 379+ E72E              ;A5 83                   LDA &83		\ S
 380+ E72E              ;65 81                   ADC &81		\ Q
 381+ E72E              ;85 83                   STA &83		\ S
 382+ E72E              ;90 09                   BCC LIC3	\ skip Y adjustment
 383+ E72E              ;C8                      INY
 384+ E72E              ;C0 08                   CPY #8
 385+ E72E              ;D0 04                   BNE LIC3	\ have not reached bottom byte of char, hop
 386+ E72E              ;E6 08                   INC &08		\ SC+1
 387+ E72E              ;A0 00                   LDY #0
 388+ E72E              ;.LIC3	\ skipped Y adjustment
 389+ E72E              ;CA                      DEX
 390+ E72E              ;D0 DA                   BNE LIL3	\ loop X width
 391+ E72E              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 392+ E72E              ;60                      RTS
 393+ E72E              ;
 394+ E72E              ;.STPY	\ -> &1797 \ Step along y for line, goes down and to right
 395+ E72E              ;A4 35                   LDY &35		\ Y1
 396+ E72E              ;98                      TYA
 397+ E72E              ;A6 34                   LDX &34		\ X1
 398+ E72E              ;C4 37                   CPY &37		\ Y2
 399+ E72E              ;B0 10                   BCS LI15	\ skip swap if Y1 >= Y2
 400+ E72E              ;C6 90                   DEC &90		\ SWAP
 401+ E72E              ;A5 36                   LDA &36		\ X2
 402+ E72E              ;85 34                   STA &34		\ X1
 403+ E72E              ;86 36                   STX &36		\ X2
 404+ E72E              ;AA                      TAX
 405+ E72E              ;A5 37                   LDA &37		\ Y2
 406+ E72E              ;85 35                   STA &35		\ Y1
 407+ E72E              ;84 37                   STY &37		\ Y2
 408+ E72E              ;A8                      TAY
 409+ E72E              ;.LI15	\ Y1 Y2 order is now correct
 410+ E72E              ;4A                      LSR A
 411+ E72E              ;4A                      LSR A
 412+ E72E              ;4A                      LSR A
 413+ E72E              ;09 60                   ORA #&60
 414+ E72E              ;85 08                   STA &08	 \ SC+1	\ screen hi
 415+ E72E              ;8A                      TXA 		\ X1
 416+ E72E              ;29 F8                   AND #&F8
 417+ E72E              ;85 07                   STA &07	  \ SC	\ screen lo
 418+ E72E              ;8A                      TXA
 419+ E72E              ;29 07                   AND #7		\ mask index
 420+ E72E              ;AA                      TAX
 421+ E72E              ;BD AF 16                LDA &16AF,X \ TWOS,X \ Mode4 single pixel
 422+ E72E              ;85 82                   STA &82	    \ R	\ mask
 423+ E72E              ;A5 35                   LDA &35		\ Y1
 424+ E72E              ;29 07                   AND #7
 425+ E72E              ;A8                      TAY
 426+ E72E              ;A5 1B                   LDA &1B	    \ P	\ delta-X
 427+ E72E              ;A2 01                   LDX #1		\ roll counter
 428+ E72E              ;86 1B                   STX &1B	    	\ P
 429+ E72E              ;.LIL4	\ roll P
 430+ E72E              ;0A                      ASL A
 431+ E72E              ;B0 04                   BCS LI13	\ do subtraction
 432+ E72E              ;C5 81                   CMP &81	    \ Q	\ delta-Y
 433+ E72E              ;90 03                   BCC LI14	\ less than Q
 434+ E72E              ;.LI13	\ do subtraction
 435+ E72E              ;E5 81                   SBC &81		\ Q
 436+ E72E              ;38                      SEC
 437+ E72E              ;.LI14	\ less than Q
 438+ E72E              ;26 1B                   ROL &1B		\ P
 439+ E72E              ;90 F2                   BCC LIL4	\ loop P, end with some low bits in P
 440+ E72E              ;A6 81                   LDX &81		\ Q
 441+ E72E              ;E8                      INX 		\ adjust height
 442+ E72E              ;A5 36                   LDA &36		\ X2
 443+ E72E              ;E5 34                   SBC &34		\ X1
 444+ E72E              ;90 2D                   BCC LFT		\ if C cleared then line moving to the left - hop down
 445+ E72E              ;18                      CLC
 446+ E72E              ;A5 90                   LDA &90		\ SWAP
 447+ E72E              ;F0 07                   BEQ LI17 	\ skip first point
 448+ E72E              ;CA                      DEX
 449+ E72E              ;.LIL5	\ skipped first point, counter X
 450+ E72E              ;A5 82                   LDA &82	    \ R \ mask byte
 451+ E72E              ;51 07                   EOR (&07),Y	\ (SC),Y
 452+ E72E              ;91 07                   STA (&07),Y	\ (SC),Y
 453+ E72E              ;.LI17	\ skipped first point
 454+ E72E              ;88                      DEY
 455+ E72E              ;10 04                   BPL LI16	\ skip hi adjust
 456+ E72E              ;C6 08                   DEC &08		\ SC+1
 457+ E72E              ;A0 07                   LDY #7		\ new char
 458+ E72E              ;	.LI16	\ skipped hi adjust
 459+ E72E              ;A5 83                   LDA &83		\ S
 460+ E72E              ;65 1B                   ADC &1B		\ P
 461+ E72E              ;85 83                   STA &83		\ S
 462+ E72E              ;90 0C                   BCC LIC5	\ skip, still in same column
 463+ E72E              ;46 82                   LSR &82	  \ R	\ mask
 464+ E72E              ;90 08                   BCC LIC5  	\ no mask bit hop
 465+ E72E              ;66 82                   ROR &82   \ R	\ else moved over to next column, reset mask
 466+ E72E              ;A5 07                   LDA &07	  \ SC  \ screen lo
 467+ E72E              ;69 08                   ADC #8		\ next char below
 468+ E72E              ;85 07                   STA &07		\ SC
 469+ E72E              ;.LIC5	\ same column
 470+ E72E              ;CA                      DEX
 471+ E72E              ;D0 DC                   BNE LIL5	\ loop X height
 472+ E72E              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 473+ E72E              ;60                      RTS
 474+ E72E              ;
 475+ E72E              ;.LFT	\ going left
 476+ E72E              ;A5 90                   LDA &90		\ SWAP
 477+ E72E              ;F0 07                   BEQ LI18	\ skip first point
 478+ E72E              ;CA                      DEX 		\ reduce height
 479+ E72E              ;.LIL6	\ counter X height
 480+ E72E              ;A5 82                   LDA &82	   \ R	\ mask byte
 481+ E72E              ;51 07                   EOR (&07),Y	\ (SC),Y
 482+ E72E              ;91 07                   STA (&07),Y	\ (SC),Y
 483+ E72E              ;.LI18
 484+ E72E              ;88                      DEY
 485+ E72E              ;10 04                   BPL LI19	\ skip hi adjust
 486+ E72E              ;C6 08                   DEC &08		\ SC+1
 487+ E72E              ;A0 07                   LDY #7		\ rest char row
 488+ E72E              ;.LI19	\ skipped hi adjust
 489+ E72E              ;A5 83                   LDA &83		\ S
 490+ E72E              ;65 1B                   ADC &1B	    \ P \ some low bits
 491+ E72E              ;85 83                   STA &83		\ S
 492+ E72E              ;90 0D                   BCC LIC6	\ no overflow
 493+ E72E              ;06 82                   ASL &82	    \ R \ else move byte mask to the left
 494+ E72E              ;90 09                   BCC LIC6	\ no overflow
 495+ E72E              ;26 82                   ROL &82		\ R
 496+ E72E              ;A5 07                   LDA &07		\ SC
 497+ E72E              ;E9 07                   SBC #7		\ down 1 char
 498+ E72E              ;85 07                   STA &07		\ SC
 499+ E72E              ;18                      CLC
 500+ E72E              ;.LIC6	\ no overflow
 501+ E72E              ;CA                      DEX 		\ height
 502+ E72E              ;D0 DB                   BNE LIL6	\ loop X
 503+ E72E              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 504+ E72E              ;.HL6
 505+ E72E              ;60                      RTS 		\ end Line drawing
 506+ E72E
 507+ E72E
 508+ E72E              ;;l2_draw_diagonalopt:
 509+ E72E              	; ">TODO l2_draw_diagonalopt fast horz vert optmisation"
 510+ E72E              ;;	push	af
 511+ E72E              ;;	ld		a,b
 512+ E72E              ;;	cp		d
 513+ E72E              ;;	jr		z,.RegularDiagnonal
 514+ E72E              ;;.CheckHorz:
 515+ E72E              ;;	ld		a,c
 516+ E72E              ;;	cp		e
 517+ E72E              ;;	jr		z,.horizontalLine
 518+ E72E              ;;.RegularDiagnonal:
 519+ E72E              ;;	pop		af
 520+ E72E              ;;	call diag
 521+ E72E
 522+ E72E
 523+ E72E              ;;l2_signed_mul2a:
 524+ E72E              ;;; ">l2_signed_mul2a - Signed a = a * 2 using shift)"
 525+ E72E              ;;	TEST	$80
 526+ E72E              ;;	jr		nz, .negativecalc
 527+ E72E              ;;.positivecalc:
 528+ E72E              ;;	ccf
 529+ E72E              ;;	rla
 530+ E72E              ;;	ret
 531+ E72E              ;;.negativecalc:
 532+ E72E              ;;	neg
 533+ E72E              ;;	ccf
 534+ E72E              ;;	rla
 535+ E72E              ;;	neg
 536+ E72E              ;;	ret
 537+ E72E              ;;
 538+ E72E              ;;l2_signed_mul2atohl:
 539+ E72E              ;;; ">l2_signed_mul2ahl - Signed hl = a * 2 using shift)"
 540+ E72E              ;;	TEST	$80
 541+ E72E              ;;	jr		nz, .negativecalc
 542+ E72E              ;;.positivecalc:
 543+ E72E              ;;	ld		hl,0
 544+ E72E              ;;	ld		l,a
 545+ E72E              ;;	add		hl,a
 546+ E72E              ;;	ret
 547+ E72E              ;;.negativecalc:
 548+ E72E              ;;	neg
 549+ E72E              ;;	ld		hl,0
 550+ E72E              ;;	ld		l,a
 551+ E72E              ;;	neghl
 552+ E72E              ;;	ret
 553+ E72E              ;;
 554+ E72E              ;;l2_e2fractionby2:
 555+ E72E              ;;	ld 		hl,(l2fraction)
 556+ E72E              ;;	push	de
 557+ E72E              ;;	ld		d,h
 558+ E72E              ;;	ld		e,l
 559+ E72E              ;;	add		hl,de
 560+ E72E              ;;	pop		de
 561+ E72E              ;;	ld		(l2e2),hl
 562+ E72E              ;;	ret
 563+ E72E
 564+ E72E
 565+ E72E
 566+ E72E
 567+ E72E
 568+ E72E              ;;//	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 569+ E72E              ;;//.catchLoop:
 570+ E72E              ;;//	jp .catchLoop
 571+ E72E              ;;//.continue:
 572+ E72E              ;;//    ld      A,D
 573+ E72E              ;;//    sub     H
 574+ E72E              ;;//    jr      NC,.DXpositive    ;delta_x > 0
 575+ E72E              ;;//.DXNegative:
 576+ E72E              ;;//    neg
 577+ E72E              ;;//.DXPositive:
 578+ E72E              ;;//    ld      B,A              ;B <- |delta_x|
 579+ E72E              ;;//    ld      A,E
 580+ E72E              ;;//    sub     L
 581+ E72E              ;;//    jr      NC,.DYpositive    ;delta_y > 0
 582+ E72E              ;;//.DYNegative:
 583+ E72E              ;;//    neg
 584+ E72E              ;;//.DYPositive:
 585+ E72E              ;;//    sub     B               ;|delta_y|
 586+ E72E              ;;//	push	af
 587+ E72E              ;;//	jr		c,.DeltaX
 588+ E72E              ;;//.DeltaY
 589+ E72E              ;;//	ld      A,H             			;if |delta_x| < |delta_y| then
 590+ E72E              ;;//    ld      H,L             			;then values x and y are swapped
 591+ E72E              ;;//    ld      L,A             			;so the loop will always be performed on the
 592+ E72E              ;;//    ld      A,D             			;x value. A flag must be set to
 593+ E72E              ;;//    ld      D,E             			;remind that data must be drawn (y,x)
 594+ E72E              ;;//    ld      E,A             			;instead of (x,y)
 595+ E72E              ;;//.DeltaX:
 596+ E72E              ;;//	ld		a,d
 597+ E72E              ;;//	sub		h
 598+ E72E              ;;//	jr		nc,.TestDY					; x1 < x2
 599+ E72E              ;;//.TestDX:
 600+ E72E              ;;//	ex		de,hl
 601+ E72E              ;;//.TestDY:
 602+ E72E              ;;//	ld		a,e
 603+ E72E              ;;//	sub		l
 604+ E72E              ;;//    ld      A,$01
 605+ E72E              ;;//    jr      NC,.StoreA
 606+ E72E              ;;//    neg                     ;y1 > y2 : in case2 the 'y' variable
 607+ E72E              ;;//.StoreA:
 608+ E72E              ;;//        ld      (l2way),A
 609+ E72E              ;;//.InitLine:
 610+ E72E              ;;//        ld      B,H
 611+ E72E              ;;//        ld      C,L
 612+ E72E              ;;//        ld      A,E
 613+ E72E              ;;//        sub     L
 614+ E72E              ;;//        jr      NC,.EndInit
 615+ E72E              ;;//        ld      A,L
 616+ E72E              ;;//        ld      L,E
 617+ E72E              ;;//        ld      E,A
 618+ E72E              ;;//.EndInit:
 619+ E72E              ;;//        ld      A,E
 620+ E72E              ;;//        sub     L
 621+ E72E              ;;//        rla
 622+ E72E              ;;//        ld      L,A             ;value to add in case1 (d < 0)
 623+ E72E              ;;//        add     A,H
 624+ E72E              ;;//        sub     D
 625+ E72E              ;;//        ld      E,A             ;'d' variable is initialised
 626+ E72E              ;;//        add     A,H
 627+ E72E              ;;//        sub     D
 628+ E72E              ;;//        ld      H,A             ;value to add in case2 (d >= 0)
 629+ E72E              ;;//.Loop:
 630+ E72E              ;;//        ld      A,B
 631+ E72E              ;;//        sub     D
 632+ E72E              ;;//        jr      NC,.EndLine       ;the line is completely drawn.
 633+ E72E              ;;//        pop     AF
 634+ E72E              ;;//        bit     7,A
 635+ E72E              ;;//        push    AF
 636+ E72E              ;;//        push    AF
 637+ E72E              ;;//        push    BC
 638+ E72E              ;;//        jr      Z,.DrawPoint
 639+ E72E              ;;//        ld      A,B
 640+ E72E              ;;//        ld      B,C
 641+ E72E              ;;//        ld      C,A
 642+ E72E              ;;//.DrawPoint:
 643+ E72E              ;;//		push	hl
 644+ E72E              ;;//		pushbcdeaf
 645+ E72E              ;;//		ld		b,e
 646+ E72E              ;;//		ld		c,d
 647+ E72E              ;;//	ld 		a,(l2linecolor)
 648+ E72E              ;;//	call	l2_plot_pixel
 649+ E72E              ;;//		popafdebc
 650+ E72E              ;;//		pop		hl
 651+ E72E              ;;//        pop     BC
 652+ E72E              ;;//        pop     AF
 653+ E72E              ;;//.TestD:
 654+ E72E              ;;//        bit     7,E
 655+ E72E              ;;//        jr      NZ,.Case1
 656+ E72E              ;;//.Case2:                          ;d >= 0
 657+ E72E              ;;//        ld      A,E
 658+ E72E              ;;//        add     A,H
 659+ E72E              ;;//        ld      E,A
 660+ E72E              ;;//        ld      A,(l2way)
 661+ E72E              ;;//        add     A,C
 662+ E72E              ;;//        ld      C,A
 663+ E72E              ;;//        jr      .EndLoop
 664+ E72E              ;;//.Case1:                          ;d < 0
 665+ E72E              ;;//        ld      A,E
 666+ E72E              ;;//        add     A,L
 667+ E72E              ;;//        ld      E,A
 668+ E72E              ;;//.EndLoop:
 669+ E72E              ;;//        inc     B
 670+ E72E              ;;//        jr      .Loop
 671+ E72E              ;;//.EndLine:
 672+ E72E              ;;//        pop     AF              ;MUST NOT BE REMOVED
 673+ E72E              ;;//        pop     HL              ;can be removed
 674+ E72E              ;;//        pop     DE              ;can be removed
 675+ E72E              ;;//        ret
 676+ E72E
 677+ E72E              ;;	ld		(.l2yadjust),a
 678+ E72E              ;;	call	calcdeltax:
 679+ E72E              ;;	ld		(.l2xadjust),a
 680+ E72E              ;;.calcfraction:							; err(or fraction) = dx+dy;
 681+ E72E              ;;	push	hl
 682+ E72E              ;;	push	de
 683+ E72E              ;;	ld		hl,(l2deltaX)
 684+ E72E              ;;	ld		de,(l2deltaY)
 685+ E72E              ;;	add		hl,de
 686+ E72E              ;;	ld		(l2fraction),hl
 687+ E72E              ;;	pop		de
 688+ E72E              ;;	pop		hl
 689+ E72E              ;;.mainloop:
 690+ E72E              ;;	push	bc
 691+ E72E              ;;	push	de
 692+ E72E              ;;	ld 		a,(l2linecolor)
 693+ E72E              ;;	call	l2_plot_pixel
 694+ E72E              ;;	pop		de
 695+ E72E              ;;	pop		bc
 696+ E72E              ;;.arewefinishedtest
 697+ E72E              ;;	ld		a,b
 698+ E72E              ;;	cp		d
 699+ E72E              ;;	jr		nz,.notthereyet
 700+ E72E              ;;	ld		a,c
 701+ E72E              ;;	cp		e
 702+ E72E              ;;	ret		z
 703+ E72E              ;;.notthereyet:
 704+ E72E              ;;	push	de
 705+ E72E              ;;	call	l2_e2fractionby2			; e2 = 2*err;
 706+ E72E              ;;	pop		de
 707+ E72E              ;;.e2dytest:								; if (e2 >= dy) /* e_xy+e_x > 0 */  then S and P/V are the same
 708+ E72E              ;;	push	de							; so if m & pe  or p & po calc (m = sign set p = 0)
 709+ E72E              ;;	ld		de,(l2deltaY)				;    if m & po  or p & pe skip  (pe = pv set po = pv 0)
 710+ E72E              ;;	or		a							;
 711+ E72E              ;;	sbc		hl,de						;
 712+ E72E              ;;	pop		de
 713+ E72E              ;;	jr		z,  .dodycalc				; if equal then calc
 714+ E72E              ;;	jp		p,	.dodycalc				; sign clear to H>D even with negtives
 715+ E72E              ;;	jr		.skipdycalc         		; sign = 0     so  skip as pe
 716+ E72E              ;;.dodycalc:
 717+ E72E              ;;	ld		hl,(l2fraction)
 718+ E72E              ;;	push	de
 719+ E72E              ;;	ld		de,(l2deltaY)
 720+ E72E              ;;	add		hl,de
 721+ E72E              ;;	ld		(l2fraction),de
 722+ E72E              ;;	pop		de
 723+ E72E              ;;.l2yadjust:
 724+ E72E              ;;	nop
 725+ E72E              ;;.skipdycalc:
 726+ E72E              ;;.e2dxtest:								;  if (e2 <= dx) /* e_xy+e_y < 0 */ then S and P/V are different.
 727+ E72E              ;;	ld		hl,(l2e2)
 728+ E72E              ;;	push	de							;
 729+ E72E              ;;	ld		de,(l2deltaX)				;
 730+ E72E              ;;	or		a							; clear carry flag
 731+ E72E              ;;	sbc		hl,de						; hl = hl - de is if de > hl will get pv and signed different?
 732+ E72E              ;;	pop		de
 733+ E72E              ;;	jr		z,.dodxcalc					; e2 == dx so do calc
 734+ E72E              ;;	jp		m,.dodxcalc					; was sign bit set
 735+ E72E              ;;	jr		.skipdxcalc         	    ; diff so skip ; pvclear = po        pvset = pe
 736+ E72E              ;;.dodxcalc:
 737+ E72E              ;;	ld		hl,(l2fraction)
 738+ E72E              ;;	push	de
 739+ E72E              ;;	ld		de,(l2deltaX)
 740+ E72E              ;;	add		hl,de
 741+ E72E              ;;	ld		(l2fraction),de
 742+ E72E              ;;	pop		de
 743+ E72E              ;;.l2xadjust:
 744+ E72E              ;;	nop
 745+ E72E              ;;.skipdxcalc:
 746+ E72E              ;;	jr 		.mainloop
 747+ E72E
 748+ E72E
 749+ E72E              ;;/l2_draw_diagonalold:
 750+ E72E              ;;/MESSAGE ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 751+ E72E              ;;/	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 752+ E72E              ;;/.sortycoords:
 753+ E72E              ;;/	ld		a,b							; Sort to Y0 is always > y1 so we don't have to deal with step y and only step x
 754+ E72E              ;;/	cp		d
 755+ E72E              ;;/	jr		nc, .nocoordswap
 756+ E72E              ;;/.swapcoords:
 757+ E72E              ;;/	ex		de,hl						; save de to hl ! effective code line 98 after macros
 758+ E72E              ;;/	lddebc
 759+ E72E              ;;/	ldbchl
 760+ E72E              ;;/.nocoordswap:
 761+ E72E              ;;/	ld		a,d							; l2_dy = -ABS(l2_vy1 - l2_vy0)
 762+ E72E              ;;/	sub		b							; we have already sorted  so y1 > y0
 763+ E72E              ;;/	ld		(l2deltaY),a
 764+ E72E              ;;/	neg									; DEBUG
 765+ E72E              ;;/	ld		(l2deltaYn),a				; DEBUG
 766+ E72E              ;;/	neg									; DEBUG
 767+ E72E              ;;/.deltaxequABSx0Minusx1:						; we need to set l2dx to abs x1-x0 and set
 768+ E72E              ;;/    ld		a,c
 769+ E72E              ;;/	cp		e
 770+ E72E              ;;/	jr		c, .x1GTx0
 771+ E72E              ;;/.x1LTx0
 772+ E72E              ;;/	ld		a,c
 773+ E72E              ;;/	sub		e
 774+ E72E              ;;/	ld		(l2deltaX),a				; just 8 bit for now should it be 16?
 775+ E72E              ;;/	neg									; DEBUG
 776+ E72E              ;;/	ld		(l2deltaXn),a				; DEBUG
 777+ E72E              ;;/	neg									; DEBUG
 778+ E72E              ;;/	ld		a,l2incbstep
 779+ E72E              ;;/	jr		.setlayershift0
 780+ E72E              ;;/.x1GTx0:
 781+ E72E              ;;/	ld		a,e
 782+ E72E              ;;/	sub		c
 783+ E72E              ;;/	ld		(l2deltaX),a					; just 8 bit for now should it be 16?
 784+ E72E              ;;/	neg									; DEBUG
 785+ E72E              ;;/	ld		(l2deltaXn),a				; DEBUG
 786+ E72E              ;;/	neg									; DEBUG
 787+ E72E              ;;/	ld		a,l2decbstep
 788+ E72E              ;;/.setlayershift0:
 789+ E72E              ;;/	ld		a,0
 790+ E72E              ;;/	pushbcde
 791+ E72E              ;;/	call	asm_l2_bank_n_select		; l2_layer_shift = 0 and bank 0 selected
 792+ E72E              ;;/	popdebc
 793+ E72E              ;;/; so now we have set inc or dec instruction, l2dy, l2dx and on bank 0,
 794+ E72E              ;;/.dymuliplyby2:
 795+ E72E              ;;/	ld		a, (l2deltaY)				; dy *= 2
 796+ E72E              ;;/	call	l2_signed_mul2a
 797+ E72E              ;;/	ld		(l2deltaYsq),a
 798+ E72E              ;;/	neg									; DEBUG
 799+ E72E              ;;/	ld		(l2deltaYsqn),a				; DEBUG
 800+ E72E              ;;/	neg									; DEBUG
 801+ E72E              ;;/.dxmuliplyby2:
 802+ E72E              ;;/	ld		a, (l2deltaX)				; dx *= 2
 803+ E72E              ;;/	call	l2_signed_mul2a
 804+ E72E              ;;/	ld		(l2deltaXsq),a
 805+ E72E              ;;/	neg									; DEBUG
 806+ E72E              ;;/	ld		(l2deltaXsqn),a				; DEBUG
 807+ E72E              ;;/	neg									; DEBUG
 808+ E72E              ;;/.plotfirstpixel:
 809+ E72E              ;;/	pushbcde
 810+ E72E              ;;/	ld a,(l2linecolor)
 811+ E72E              ;;/	call	l2_plot_pixel
 812+ E72E              ;;/	popdebc
 813+ E72E              ;;/.mainloop:								; if (l2_dx > l2_dy) signed
 814+ E72E              ;;/	ld		a,(l2deltaX)				;If A < N, then S and P/V are different.
 815+ E72E              ;;/	ld		hl,l2deltaY					;A >= N, then S and P/V are the same
 816+ E72E              ;;/	cp		(hl)
 817+ E72E              ;;/	jp		m,	.signset
 818+ E72E              ;;/.signclear:
 819+ E72E              ;;/	jp		pe,	.dxLTEdybranch
 820+ E72E              ;;/	jr		.dxGTdybranch
 821+ E72E              ;;/.signset:
 822+ E72E              ;;/	jp		po,	.dxLTEdybranch
 823+ E72E              ;;/.dxGTdybranch:
 824+ E72E              ;;/	ld		a,(l2deltaYsq)
 825+ E72E              ;;/	ld		hl,l2deltaX
 826+ E72E              ;;/	sub		(hl)
 827+ E72E              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 dx
 828+ E72E              ;;/.BranchAwhile							; while (l2_vx0 != l2_vx1)
 829+ E72E              ;;/	ld		a,c
 830+ E72E              ;;/	cp		e
 831+ E72E              ;;/	ret		z							; if x0 = x1 then done
 832+ E72E              ;;/.BranchAtestfraction:					; if (l2_fraction >= 0)
 833+ E72E              ;;/	ld		a,(l2fraction)
 834+ E72E              ;;/	TEST	$80
 835+ E72E              ;;/	jr		nz,.BranchAskipYstep
 836+ E72E              ;;/	inc		b							; 		++l2_vy0;
 837+ E72E              ;;/	ld		hl,l2deltaXsq
 838+ E72E              ;;/	sub		(hl)						; 		l2_fraction -= l2_dx;
 839+ E72E              ;;/	ld		(l2fraction),a
 840+ E72E              ;;/.BranchAskipYstep:
 841+ E72E              ;;/.l2stepx1:
 842+ E72E              ;;/	inc		b							; this is self modifying code point 1 l2_vx0 += l2_stepx
 843+ E72E              ;;/	ld		a,(l2fraction)				; l2_fraction += l2_dy can optimise later as a already has this?
 844+ E72E              ;;/	ld		hl,l2deltaYsq
 845+ E72E              ;;/	add		a,(hl)
 846+ E72E              ;;/	ld		(l2fraction),a
 847+ E72E              ;;/.BranchAplotBCColA:						; l2_plot_pixel(l2_vx0,l2_vy0,color);
 848+ E72E              ;;/	pushbcde
 849+ E72E              ;;/	ld a,(l2linecolor)
 850+ E72E              ;;/	call	l2_plot_pixel
 851+ E72E              ;;/	popdebc
 852+ E72E              ;;/.BranchAloop:
 853+ E72E              ;;/	jr		.BranchAwhile
 854+ E72E              ;;/.dxLTEdybranch:
 855+ E72E              ;;/	ld		a,(l2deltaXsq)				; l2_fraction = l2_dx - (l2_dy >> 1);
 856+ E72E              ;;/	ld		hl, l2deltaY
 857+ E72E              ;;/	sub		(hl)
 858+ E72E              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 d
 859+ E72E              ;;/.BranchBwhile:							; while (l2_vy0 != l2_vy1)
 860+ E72E              ;;/	ld		a,b
 861+ E72E              ;;/	cp		d
 862+ E72E              ;;/	ret		z							; if x0 = x1 then done
 863+ E72E              ;;/.BranchBtestfraction:					; if (l2_fraction >= 0)
 864+ E72E              ;;/	ld		a,(l2fraction)
 865+ E72E              ;;/	TEST	$80
 866+ E72E              ;;/	jr		nz,.BranchBskipYstep
 867+ E72E              ;;/.l2stepx2
 868+ E72E              ;;/	inc		b							; l2_vx0 += l2_stepx; this is self modifying code point 2
 869+ E72E              ;;/	ld		a,(l2fraction)				; l2_fraction -= l2_dy
 870+ E72E              ;;/	ld		hl,l2deltaYsq
 871+ E72E              ;;/	sub		(hl)
 872+ E72E              ;;/	ld		(l2fraction),a
 873+ E72E              ;;/.BranchBskipYstep:
 874+ E72E              ;;/	ld		hl, l2deltaYsq
 875+ E72E              ;;/	add		a,(hl)
 876+ E72E              ;;/	ld		(l2fraction),a
 877+ E72E              ;;/	inc		b							; ++l2_vy0;
 878+ E72E              ;;/.BranchBplotBCColA:
 879+ E72E              ;;/	pushbcde
 880+ E72E              ;;/	ld a,(l2linecolor)
 881+ E72E              ;;/	call	l2_plot_pixel
 882+ E72E              ;;/	popdebc
 883+ E72E              ;;/.BranchBloop:
 884+ E72E              ;;/	jr		.BranchBwhile
 885+ E72E
# file closed: ./Layer2Graphics/layer2_plot_diagonal.asm
 689  E72E                  INCLUDE "./Layer2Graphics/asm_l2_plot_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_triangle.asm
   1+ E72E
   2+ E72E
   3+ E72E
   4+ E72E 00 00        l2trianglebc	        DW 0
   5+ E730 00 00        l2trianglede	        DW 0
   6+ E732 00 00        l2trianglehl	        DW 0
   7+ E734
   8+ E734              ; "l2_draw_triangle, BC = y1x1, DE=y2x2, HL=y3x3 a = Color"
   9+ E734 C5 D5 E5 F5  l2_draw_triangle:       push	bc,,de,,hl,,af
  10+ E738 CD 5C E6                             call	l2_draw_diagonal		; BC to DE
  11+ E73B F1                                   pop		af
  12+ E73C D1                                   pop		de						; swap DE and HL
  13+ E73D E1                                   pop		hl						; so BC to DE is really to HL
  14+ E73E C1                                   pop		bc
  15+ E73F D5 E5                                push    de,,hl                    ; which is pushing original hl then original de
  16+ E741 F5                                   push	af
  17+ E742 CD 5C E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  18+ E745 F1                                   pop		af
  19+ E746 C1                                   pop		bc						; Now bc = original de
  20+ E747 D1                                   pop		de						; de = original hl
  21+ E748 CD 5C E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  22+ E74B C9                                   ret
  23+ E74C
  24+ E74C
  25+ E74C
  26+ E74C
  27+ E74C
# file closed: ./Layer2Graphics/asm_l2_plot_triangle.asm
 690  E74C                  INCLUDE "./Layer2Graphics/asm_l2_fill_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_fill_triangle.asm
   1+ E74C              ; ">l2_fillBottomFlatTriangle BC y0x0 DE x1x2, H YCommon, L Colour"
   2+ E74C              ; "note >l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
   3+ E74C              ; "note line to   bc = left side row,col, d right pixel, e = color"
   4+ E74C              l2_fillBottomFlatTriangle:;break
   5+ E74C 7D                                   ld		a,l
   6+ E74D 32 75 E3                             ld		(l2linecolor),a
   7+ E750 79                                   ld		a,c
   8+ E751 BB                                   cp		e
   9+ E752 30 08                                jr		nc, .x2gtex1
  10+ E754 DD 26 01     .x1ltx2:                ld		ixh,1                           ; list 1 holds x0 down to x1
  11+ E757 DD 2E 02                             ld		ixl,2                           ; list 2 hols  x0 down to x2
  12+ E75A 18 06                                jr		.storepoints
  13+ E75C DD 26 02     .x2gtex1:               ld		ixh,2
  14+ E75F DD 2E 01                             ld		ixl,1
  15+ E762 C5 D5 E5     .storepoints:           push	bc,,de,,hl
  16+ E765 DD 7C                                ld		a,ixh
  17+ E767 5A                                   ld		e,d                             ; we alreay have bc so its now bc -> hd
  18+ E768 54                                   ld		d,h
  19+ E769 CD 7D E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x1,ycommon,l2_LineMinX);
  20+ E76C E1 D1 C1                             pop		bc,,de,,hl
  21+ E76F C5 E5                                push	bc,,hl
  22+ E771 54                                   ld		d,h                             ; now its bc -> he
  23+ E772 DD 7D                                ld		a,ixl
  24+ E774 CD 7D E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x2,ycommon,l2_LineMaxX);
  25+ E777 E1 C1                                pop		bc,,hl
  26+ E779 50           .SaveForLoop:           ld		d,b
  27+ E77A 5C                                   ld		e,h								; save loop counters
  28+ E77B D5                                   push	de								; de = y0ycommon
  29+ E77C 21 7D E3     .GetFirstHorizontalRow:	ld		hl,l2targetArray1               ; get first row for loop
  30+ E77F 78                                   ld		a,b
  31+ E780 ED 31                                add		hl,a							; hl = l2targetArray1 row b
  32+ E782 7E                                   ld		a,(hl)							;
  33+ E783 4F                                   ld		c,a								; c = col1 i.e. l2targetarray1[b]
  34+ E784 21 7D E4                             ld      hl,l2targetArray2
  35+ E787 78                                   ld      a,b
  36+ E788 ED 31                                add     hl,a
  37+ E78A              ;                        inc		h								; hl = l2targetArray2 row b if we interleave
  38+ E78A 7E                                   ld		a,(hl)
  39+ E78B 57                                   ld		d,a								; d = col2 i.e. l2targetarray2[b]
  40+ E78C 3A 75 E3     .SetColour:             ld		a,(l2linecolor)
  41+ E78F 5F                                   ld		e,a								; de = to colour
  42+ E790 C5           .SavePoints:            push	bc								; bc = rowcol
  43+ E791 25                                   dec		h
  44+ E792 E5                                   push	hl								; hl = l2targetArray1[b]
  45+ E793 CD DF E2     .DoLine:	            call	l2_draw_horz_line_to
  46+ E796 E1                                   pop		hl
  47+ E797 C1                                   pop		bc
  48+ E798 04                                   inc		b								; down a rowc
  49+ E799 D1                                   pop		de								; de = from to (and b also = current)
  50+ E79A 14                                   inc		d
  51+ E79B 7B                                   ld		a,e								; while e >= d
  52+ E79C BA                                   cp		d
  53+ E79D 30 DA                                jr 		nc,.SaveForLoop					; Is this the right point??
  54+ E79F C9                                   ret
  55+ E7A0
# file closed: ./Layer2Graphics/asm_l2_fill_triangle.asm
 691  E7A0                  INCLUDE "./Layer2Graphics/layer2_plot_circle.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle.asm
   1+ E7A0
   2+ E7A0 00 00        l2_circle_pos		DW 0
   3+ E7A2 00           l2_circle_colour	DB 0
   4+ E7A3 00           l2_circle_radius	DB 0
   5+ E7A4 00           l2_circle_x			DB 0
   6+ E7A5 00           l2_circle_y			DB 0
   7+ E7A6 00           l2_circle_d			DB 0
   8+ E7A7
   9+ E7A7              ; ">l2_draw_circle BC = center row col, d = radius, e = colour"
  10+ E7A7 7B           l2_draw_circle:     ld		a,e
  11+ E7A8 32 4E E8                         ld		(.PlotPixel+1),a
  12+ E7AB 7A                               ld		a,d								; get radius
  13+ E7AC A7                               and		a
  14+ E7AD C8                               ret		z
  15+ E7AE FE 01                            cp		1
  16+ E7B0 CA 59 E8                         jp		z,CircleSinglepixel
  17+ E7B3 ED 43 DD E7                      ld		(.Plot1+1),bc					; save origin into DE reg in code
  18+ E7B7 DD 67                            ld		ixh,a							; ixh = raidus
  19+ E7B9 DD 2E 00                         ld		ixl,0
  20+ E7BC 26 00        .calcd:	            ld		h,0
  21+ E7BE 6F                               ld		l,a
  22+ E7BF 29                               add		hl,hl							; hl = r * 2
  23+ E7C0 EB                               ex		de,hl							; de = r * 2
  24+ E7C1 21 03 00                         ld		hl,3
  25+ E7C4 A7                               and		a
  26+ E7C5 ED 52                            sbc		hl,de							; hl = 3 - (r * 2)
  27+ E7C7 44                               ld		b,h
  28+ E7C8 4D                               ld		c,l								; bc = 3 - (r * 2)
  29+ E7C9 21 01 00     .calcdelta:         ld		hl,1
  30+ E7CC 16 00                            ld		d,0
  31+ E7CE DD 5D                            ld		e,ixl
  32+ E7D0 A7                               and		a
  33+ E7D1 ED 52                            sbc		hl,de
  34+ E7D3 11 01 00     .Setde1:            ld		de,1
  35+ E7D6 DD 7C        .CircleLoop:        ld		a,ixh
  36+ E7D8 DD BD                            cp		ixl
  37+ E7DA D8                               ret		c
  38+ E7DB D9           .ProcessLoop:	    exx
  39+ E7DC 11 00 00     .Plot1:             ld		de,0
  40+ E7DF 7B                               ld		a,e
  41+ E7E0 DD 85                            add		a,ixl
  42+ E7E2 4F                               ld		c,a
  43+ E7E3 7A                               ld		a,d
  44+ E7E4 DD 84                            add		a,ixh
  45+ E7E6 47                               ld		b,a
  46+ E7E7 CD 4D E8                         call	.PlotPixel			;CX+X,CY+Y
  47+ E7EA 7B           .Plot2:             ld 		a,e
  48+ E7EB DD 95                            sub 	ixl
  49+ E7ED 4F                               ld 		c,a
  50+ E7EE 7A                               ld 		a,d
  51+ E7EF DD 84                            add 	a,ixh
  52+ E7F1 47                               ld		b,a
  53+ E7F2 CD 4D E8                         call	.PlotPixel			;CX-X,CY+Y
  54+ E7F5 7B           .Plot3:             ld 		a,e
  55+ E7F6 DD 85                            add		a,ixl
  56+ E7F8 4F                               ld 		c,a
  57+ E7F9 7A                               ld 		a,d
  58+ E7FA DD 94                            sub 	ixh
  59+ E7FC 47                               ld 		b,a
  60+ E7FD CD 4D E8                         call	.PlotPixel			;CX+X,CY-Y
  61+ E800 7B           .Plot4:             ld 		a,e
  62+ E801 DD 95                            sub 	ixl
  63+ E803 4F                               ld 		c,a
  64+ E804 7A                               ld 		a,d
  65+ E805 DD 94                            sub 	ixh
  66+ E807 47                               ld 		b,a
  67+ E808 CD 4D E8                         call	.PlotPixel			;CX-X,CY-Y
  68+ E80B 7A           .Plot5:	            ld 		a,d
  69+ E80C DD 85                            add 	a,ixl
  70+ E80E 47                               ld 		b,a
  71+ E80F 7B                               ld 		a,e
  72+ E810 DD 84                            add 	a,ixh
  73+ E812 4F                               ld 		c,a
  74+ E813 CD 4D E8                         call	.PlotPixel			;CY+X,CX+Y
  75+ E816 7A           .Plot6:	            ld 		a,d
  76+ E817 DD 95                            sub 	ixl
  77+ E819 47                               ld 		b,a
  78+ E81A 7B                               ld 		a,e
  79+ E81B DD 84                            add 	a,ixh
  80+ E81D 4F                               ld 		c,a
  81+ E81E CD 4D E8                         call	.PlotPixel			;CY-X,CX+Y
  82+ E821 7A           .Plot7:	            ld 		a,d
  83+ E822 DD 85                            add 	a,ixl
  84+ E824 47                               ld 		b,a
  85+ E825 7B                               ld 		a,e
  86+ E826 DD 94                            sub 	ixh
  87+ E828 4F                               ld 		c,a
  88+ E829 CD 4D E8                         call	.PlotPixel			;CY+X,CX-Y
  89+ E82C 7A           .Plot8:	            ld 		a,d
  90+ E82D DD 95                            sub 	ixl
  91+ E82F 47                               ld		b,a
  92+ E830 7B                               ld 		a,e
  93+ E831 DD 94                            sub 	ixh
  94+ E833 4F                               ld 		c,a
  95+ E834 CD 4D E8                         call	.PlotPixel			;CY-X,CX-Y
  96+ E837 D9                               exx
  97+ E838 CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
  98+ E83A 28 03                            jr z,   .draw_circle_1
  99+ E83C 19                               add hl,de			; Delta=Delta+D1
 100+ E83D 18 05                            jr      .draw_circle_2		;
 101+ E83F 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 102+ E840 03                               inc     bc
 103+ E841 03                               inc     bc				; D2=D2+2
 104+ E842 DD 25                            dec     ixh				; Y=Y-1
 105+ E844 03           .draw_circle_2:		inc bc				; D2=D2+2
 106+ E845 03                               inc bc
 107+ E846 13                               inc de				; D1=D1+2
 108+ E847 13                               inc de
 109+ E848 DD 2C                            inc ixl				; X=X+1
 110+ E84A C3 D6 E7                         jp      .CircleLoop
 111+ E84D 3E 00        .PlotPixel:         ld		a,0                  ; This was originally indirect, where as it neeed to be value
 112+ E84F D5 C5 E5                         push	de,,bc,,hl
 113+ E852 CD 6C E1                         call 	l2_plot_pixel_y_test
 114+ E855 E1 C1 D1                         pop		de,,bc,,hl
 115+ E858 C9                               ret
 116+ E859 7B           CircleSinglepixel:  ld		a,e
 117+ E85A CD 6C E1                         call	l2_plot_pixel_y_test
 118+ E85D C9                               ret
 119+ E85E
 120+ E85E              ; ">l2_draw_clipped_circle HL = Center X 2's c, DE = Center Y 2's c = center , c = radius, b = colour"
 121+ E85E 43           l2_draw_clipped_circle:     ld		b,e                     ; save Colour
 122+ E85F 32 D7 E9                         ld		(.PlotPixel+1),a
 123+ E862 79                               ld		a,c								; get radius
 124+ E863                                  ReturnIfAIsZero
 124+ E863 A7          >                        and     a
 124+ E864 C8          >                        ret     z
 125+ E865                                  JumpIfAEqNusng  1, .circleSinglepixel
 125+ E865 FE 01       >                        cp     1
 125+ E867 CA E4 E9    >                        jp      z,.circleSinglepixel
 126+ E86A ED 53 97 E8                      ld		(.Plot1Y+1),de					; save origin into DE and HL
 127+ E86E 22 9A E8                         ld      (.Plot1X+1),hl                  ; .
 128+ E871 DD 67                            ld		ixh,a							; ixh = raidus
 129+ E873 DD 2E 00                         ld		ixl,0						    ; ixl = 0
 130+ E876 26 00        .calcd:	            ld		h,0                             ; hl = radius
 131+ E878 6F                               ld		l,a                             ; .
 132+ E879 29                               add		hl,hl							; hl = r * 2
 133+ E87A EB                               ex		de,hl							; de = r * 2
 134+ E87B 21 03 00                         ld		hl,3                            ; hl = 3 - (r * 2)
 135+ E87E A7                               and		a                               ; .
 136+ E87F ED 52                            sbc		hl,de							; .
 137+ E881 44                               ld		b,h                             ; bc = 3 - (r * 2)
 138+ E882 4D                               ld		c,l								; .
 139+ E883 21 01 00     .calcdelta:         ld		hl,1                            ; hl = 1
 140+ E886 16 00                            ld		d,0                             ; de = ixl
 141+ E888 DD 5D                            ld		e,ixl                           ;
 142+ E88A A7                               and		a                               ;
 143+ E88B ED 52                            sbc		hl,de                           ; hl = 1 - radius
 144+ E88D 11 01 00     .Setde1:            ld		de,1                            ; de = 1
 145+ E890              .CircleLoop:        ReturnIfRegLTNusng ixh, ixl             ; if radius > ixl counter
 145+ E890 DD 7C       >                        ld      a,ixh
 145+ E892 DD BD       >                        cp      ixl
 145+ E894 D8          >                        ret	    c
 146+ E895 D9           .ProcessLoop:	    exx                                     ; save all bc,de,hl registers
 147+ E896 11 00 00     .Plot1Y:            ld		de,0                            ; this is Y coord
 148+ E899 21 00 00     .Plot1X:            ld      hl,0                            ; this is x coord
 149+ E89C E5 D5 C5                         push    hl,,de,,bc                      ; save bc +3
 150+ E89F 06 00                            ld      b,0
 151+ E8A1 DD 4D                            ld      c,ixl
 152+ E8A3                                  ClearCarryFlag
 152+ E8A3 B7          >                        or a
 153+ E8A4 ED 4A                            adc     hl,bc
 154+ E8A6 C1                               pop     bc                              ; can optimise, perhaps use iy instead of bc or just optimise push pop and jump to an overall .Plot1Done and minimise push pops + 2
 155+ E8A7                                  JumpIfRegIsNotZero  h,.Plot1Done        ; if h <> 0 then hl < 0 or hl > 255
 155+ E8A7 7C          >                        ld      a,h
 155+ E8A8 A7          >                        and     a
 155+ E8A9 C2 BE E8    >                        jp	    nz,.Plot1Done
 156+ E8AC EB                               ex      de,hl                           ; now de = x coord calculated
 157+ E8AD C5                               push    bc                              ; + 3
 158+ E8AE                                  ClearCarryFlag
 158+ E8AE B7          >                        or a
 159+ E8AF 06 00                            ld      b,0
 160+ E8B1 DD 4D                            ld      c,ixl
 161+ E8B3 ED 4A                            adc     hl,bc
 162+ E8B5 C1                               pop     bc                              ; + 2
 163+ E8B6                                  JumpIfRegIsNotZero  h,.Plot1Done        ; if h <> 0 then hl < 0 or hl > 255
 163+ E8B6 7C          >                        ld      a,h
 163+ E8B7 A7          >                        and     a
 163+ E8B8 C2 BE E8    >                        jp	    nz,.Plot1Done
 164+ E8BB CD D6 E9                         call	.PlotPixel	            		;CX+X,CY+Y using DE = x and hl = y *** Note if we order plot 1 to 8 we can selectivley jump past many on elimiation check
 165+ E8BE D1 E1        .Plot1Done:         pop     hl,,de                          ; get de (y) and hl (x) back but reversed as the next plot expected the to be reversed from the ex de,hl above  + 0
 166+ E8C0 E5 D5 C5     .Plot2:             push    hl,,de,,bc                      ; e.g  do all CX + X first, so plot1, plot3 and just one check for cx + x off screen
 167+ E8C3 06 00                            ld      b,0                             ;                              plot2, plot8 for cx - x
 168+ E8C5 DD 4D                            ld      c,ixl                           ;                              plot4, plot5 for cy + x  ** Need to check the comments on each plot are correct
 169+ E8C7                                  ClearCarryFlag                          ;                              plot6        for cy - x
 169+ E8C7 B7          >                        or a
 170+ E8C8 ED 42                            sbc     hl,bc                           ;                              plot7 is last one
 171+ E8CA C1                               pop     bc                              ;
 172+ E8CB                                  JumpIfRegIsNotZero  h,.Plot2Done        ;
 172+ E8CB 7C          >                        ld      a,h
 172+ E8CC A7          >                        and     a
 172+ E8CD C2 E2 E8    >                        jp	    nz,.Plot2Done
 173+ E8D0 EB                               ex      de,hl
 174+ E8D1 C5                               push    bc
 175+ E8D2 06 00                            ld      b,0
 176+ E8D4 DD 4D                            ld      c,ixl
 177+ E8D6                                  ClearCarryFlag
 177+ E8D6 B7          >                        or a
 178+ E8D7 ED 4A                            adc     hl,bc
 179+ E8D9 C1                               pop     bc
 180+ E8DA                                  JumpIfRegIsNotZero  h,.Plot2Done
 180+ E8DA 7C          >                        ld      a,h
 180+ E8DB A7          >                        and     a
 180+ E8DC C2 E2 E8    >                        jp	    nz,.Plot2Done
 181+ E8DF CD D6 E9                         call	.PlotPixel	                    ; CX-X,CY+Y
 182+ E8E2 E1 D1        .Plot2Done:         pop     de,,hl
 183+ E8E4 E5 D5 C5     .Plot3:             push    hl,,de,,bc
 184+ E8E7 06 00                            ld      b,0
 185+ E8E9 DD 4D                            ld      c,ixl
 186+ E8EB                                  ClearCarryFlag
 186+ E8EB B7          >                        or a
 187+ E8EC ED 4A                            adc     hl,bc
 188+ E8EE C1                               pop     bc
 189+ E8EF                                  JumpIfRegIsNotZero  h,.Plot3Done
 189+ E8EF 7C          >                        ld      a,h
 189+ E8F0 A7          >                        and     a
 189+ E8F1 C2 06 E9    >                        jp	    nz,.Plot3Done
 190+ E8F4 EB                               ex      de,hl
 191+ E8F5 C5                               push    bc
 192+ E8F6 06 00                            ld      b,0
 193+ E8F8 DD 4D                            ld      c,ixl
 194+ E8FA                                  ClearCarryFlag
 194+ E8FA B7          >                        or a
 195+ E8FB ED 42                            sbc     hl,bc
 196+ E8FD C1                               pop     bc
 197+ E8FE                                  JumpIfRegIsNotZero  h,.Plot3Done
 197+ E8FE 7C          >                        ld      a,h
 197+ E8FF A7          >                        and     a
 197+ E900 C2 06 E9    >                        jp	    nz,.Plot3Done
 198+ E903 CD D6 E9                         call	.PlotPixel	                    ; CX+X,CY-Y
 199+ E906 E1 D1        .Plot3Done:         pop     de,,hl
 200+ E908 E5 D5 C5     .Plot4:             push    hl,,de,,bc
 201+ E90B 06 00                            ld      b,0
 202+ E90D DD 4D                            ld      c,ixl
 203+ E90F                                  ClearCarryFlag
 203+ E90F B7          >                        or a
 204+ E910 ED 42                            sbc     hl,bc
 205+ E912 C1                               pop     bc
 206+ E913                                  JumpIfRegIsNotZero  h,.Plot4Done
 206+ E913 7C          >                        ld      a,h
 206+ E914 A7          >                        and     a
 206+ E915 C2 2A E9    >                        jp	    nz,.Plot4Done
 207+ E918 EB                               ex      de,hl
 208+ E919 C5                               push    bc
 209+ E91A 06 00                            ld      b,0
 210+ E91C DD 4D                            ld      c,ixl
 211+ E91E                                  ClearCarryFlag
 211+ E91E B7          >                        or a
 212+ E91F ED 42                            sbc     hl,bc
 213+ E921 C1                               pop     bc
 214+ E922                                  JumpIfRegIsNotZero  h,.Plot4Done
 214+ E922 7C          >                        ld      a,h
 214+ E923 A7          >                        and     a
 214+ E924 C2 2A E9    >                        jp	    nz,.Plot4Done
 215+ E927 CD D6 E9                         call	.PlotPixel	                    ; CX-X,CY-Y
 216+ E92A E1 D1        .Plot4Done:         pop     de,,hl
 217+ E92C EB           .Plot5:             ex      de,hl
 218+ E92D E5 D5 C5                         push    hl,,de,,bc
 219+ E930 06 00                            ld      b,0
 220+ E932 DD 4D                            ld      c,ixl
 221+ E934                                  ClearCarryFlag
 221+ E934 B7          >                        or a
 222+ E935 ED 4A                            adc     hl,bc
 223+ E937 C1                               pop     bc
 224+ E938                                  JumpIfRegIsNotZero  h,.Plot5Done
 224+ E938 7C          >                        ld      a,h
 224+ E939 A7          >                        and     a
 224+ E93A C2 4F E9    >                        jp	    nz,.Plot5Done
 225+ E93D EB                               ex      de,hl
 226+ E93E C5                               push    bc
 227+ E93F 06 00                            ld      b,0
 228+ E941 DD 4D                            ld      c,ixl
 229+ E943                                  ClearCarryFlag
 229+ E943 B7          >                        or a
 230+ E944 ED 4A                            adc     hl,bc
 231+ E946 C1                               pop     bc
 232+ E947                                  JumpIfRegIsNotZero  h,.Plot5Done
 232+ E947 7C          >                        ld      a,h
 232+ E948 A7          >                        and     a
 232+ E949 C2 4F E9    >                        jp	    nz,.Plot5Done
 233+ E94C CD D6 E9                         call	.PlotPixel	                    ;CY+X,CX+Y
 234+ E94F E1 D1        .Plot5Done:         pop     de,,hl
 235+ E951 EB           .Plot6:             ex      de,hl
 236+ E952 E5 D5 C5                         push    hl,,de,,bc
 237+ E955 06 00                            ld      b,0
 238+ E957 DD 4D                            ld      c,ixl
 239+ E959                                  ClearCarryFlag
 239+ E959 B7          >                        or a
 240+ E95A ED 42                            sbc     hl,bc
 241+ E95C C1                               pop     bc
 242+ E95D                                  JumpIfRegIsNotZero  h,.Plot6Done
 242+ E95D 7C          >                        ld      a,h
 242+ E95E A7          >                        and     a
 242+ E95F C2 74 E9    >                        jp	    nz,.Plot6Done
 243+ E962 EB                               ex      de,hl
 244+ E963 C5                               push    bc
 245+ E964 06 00                            ld      b,0
 246+ E966 DD 4D                            ld      c,ixl
 247+ E968                                  ClearCarryFlag
 247+ E968 B7          >                        or a
 248+ E969 ED 4A                            adc     hl,bc
 249+ E96B C1                               pop     bc
 250+ E96C                                  JumpIfRegIsNotZero  h,.Plot6Done
 250+ E96C 7C          >                        ld      a,h
 250+ E96D A7          >                        and     a
 250+ E96E C2 74 E9    >                        jp	    nz,.Plot6Done
 251+ E971 CD D6 E9                         call	.PlotPixel	                    ; CY-X,CX+Y
 252+ E974 E1 D1        .Plot6Done:         pop     de,,hl
 253+ E976 EB           .Plot7:             ex      de,hl
 254+ E977 E5 D5 C5                         push    hl,,de,,bc
 255+ E97A 06 00                            ld      b,0
 256+ E97C DD 4D                            ld      c,ixl
 257+ E97E                                  ClearCarryFlag
 257+ E97E B7          >                        or a
 258+ E97F ED 4A                            adc     hl,bc
 259+ E981 C1                               pop     bc
 260+ E982                                  JumpIfRegIsNotZero  h,.Plot7Done
 260+ E982 7C          >                        ld      a,h
 260+ E983 A7          >                        and     a
 260+ E984 C2 99 E9    >                        jp	    nz,.Plot7Done
 261+ E987 EB                               ex      de,hl
 262+ E988 C5                               push    bc
 263+ E989 06 00                            ld      b,0
 264+ E98B DD 4D                            ld      c,ixl
 265+ E98D                                  ClearCarryFlag
 265+ E98D B7          >                        or a
 266+ E98E ED 42                            sbc     hl,bc
 267+ E990 C1                               pop     bc
 268+ E991                                  JumpIfRegIsNotZero  h,.Plot7Done
 268+ E991 7C          >                        ld      a,h
 268+ E992 A7          >                        and     a
 268+ E993 C2 99 E9    >                        jp	    nz,.Plot7Done
 269+ E996 CD D6 E9                         call	.PlotPixel	                    ; CY+X,CX-Y
 270+ E999 E1 D1        .Plot7Done:         pop     de,,hl
 271+ E99B EB           .Plot8:             ex      de,hl
 272+ E99C E5 D5 C5                         push    hl,,de,,bc
 273+ E99F 06 00                            ld      b,0
 274+ E9A1 DD 4D                            ld      c,ixl
 275+ E9A3                                  ClearCarryFlag
 275+ E9A3 B7          >                        or a
 276+ E9A4 ED 42                            sbc     hl,bc
 277+ E9A6 C1                               pop     bc
 278+ E9A7                                  JumpIfRegIsNotZero  h,.Plot8Done
 278+ E9A7 7C          >                        ld      a,h
 278+ E9A8 A7          >                        and     a
 278+ E9A9 C2 BE E9    >                        jp	    nz,.Plot8Done
 279+ E9AC EB                               ex      de,hl
 280+ E9AD C5                               push    bc
 281+ E9AE 06 00                            ld      b,0
 282+ E9B0 DD 4D                            ld      c,ixl
 283+ E9B2                                  ClearCarryFlag
 283+ E9B2 B7          >                        or a
 284+ E9B3 ED 42                            sbc     hl,bc
 285+ E9B5 C1                               pop     bc
 286+ E9B6                                  JumpIfRegIsNotZero  h,.Plot8Done
 286+ E9B6 7C          >                        ld      a,h
 286+ E9B7 A7          >                        and     a
 286+ E9B8 C2 BE E9    >                        jp	    nz,.Plot8Done
 287+ E9BB CD D6 E9                         call	.PlotPixel	                    ; CY-X,CX-Y
 288+ E9BE E1 D1        .Plot8Done:         pop     de,,hl
 289+ E9C0 D9           .PlotDone:          exx
 290+ E9C1 CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
 291+ E9C3 28 03                            jr z,   .draw_circle_1
 292+ E9C5 19                               add hl,de			; Delta=Delta+D1
 293+ E9C6 18 05                            jr      .draw_circle_2		;
 294+ E9C8 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 295+ E9C9 03                               inc     bc
 296+ E9CA 03                               inc     bc				; D2=D2+2
 297+ E9CB DD 25                            dec     ixh				; Y=Y-1
 298+ E9CD 03           .draw_circle_2:		inc     bc				; D2=D2+2
 299+ E9CE 03                               inc     bc
 300+ E9CF 13                               inc     de				; D1=D1+2
 301+ E9D0 13                               inc     de
 302+ E9D1 DD 2C                            inc     ixl				; X=X+1
 303+ E9D3 C3 90 E8                         jp      .CircleLoop
 304+ E9D6 3E 00        .PlotPixel:         ld		a,0                  ; This was originally indirect, where as it neeed to be value
 305+ E9D8 D5 C5 E5                         push	de,,bc,,hl
 306+ E9DB 45                               ld      b,l                     ; At this point de = x and hl = y
 307+ E9DC 4B                               ld      c,e
 308+ E9DD CD 6C E1                         call 	l2_plot_pixel_y_test
 309+ E9E0 E1 C1 D1                         pop		de,,bc,,hl
 310+ E9E3 C9                               ret
 311+ E9E4 7B           .circleSinglepixel:  ld		a,e
 312+ E9E5 CD 6C E1                         call	l2_plot_pixel_y_test
 313+ E9E8 C9                               ret
# file closed: ./Layer2Graphics/layer2_plot_circle.asm
 692  E9E9                  INCLUDE "./Layer2Graphics/layer2_plot_circle_fill.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle_fill.asm
   1+ E9E9
   2+ E9E9 00           l2_circle_dblx		DB 0
   3+ E9EA 00           l2_circle_dbly		DB 0
   4+ E9EB
   5+ E9EB              ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
   6+ E9EB              ; Note this code currently does not process BC
   7+ E9EB 7B           l2_draw_circle_fill:    ld		a,e
   8+ E9EC 32 82 EA                             ld		(.LineColour+1),a
   9+ E9EF 7A                                   ld		a,d								; get radius
  10+ E9F0 A7                                   and		a
  11+ E9F1 C8                                   ret		z
  12+ E9F2 FE 01                                cp		1
  13+ E9F4 CA 59 E8                             jp		z,CircleSinglepixel
  14+ E9F7 ED 43 21 EA                          ld		(.Line1+1),bc					; save origin into DE reg in code
  15+ E9FB DD 67                                ld		ixh,a							; ixh = raidus (x)
  16+ E9FD DD 2E 00                             ld		ixl,0							; ihy = y
  17+ EA00 26 00        .calcd:	                ld		h,0
  18+ EA02 6F                                   ld		l,a
  19+ EA03 29                                   add		hl,hl							; hl = r * 2
  20+ EA04 EB                                   ex		de,hl							; de = r * 2
  21+ EA05 21 03 00                             ld		hl,3
  22+ EA08 A7                                   and		a
  23+ EA09 ED 52                                sbc		hl,de							; hl = 3 - (r * 2)
  24+ EA0B 44                                   ld		b,h
  25+ EA0C 4D                                   ld		c,l								; bc = 3 - (r * 2)
  26+ EA0D 21 01 00     .calcdelta              ld		hl,1
  27+ EA10 16 00                                ld		d,0
  28+ EA12 DD 5D                                ld		e,ixl
  29+ EA14 A7                                   and		a
  30+ EA15 ED 52                                sbc		hl,de
  31+ EA17 11 01 00     .Setde1	                ld		de,1
  32+ EA1A DD 7C        .CircleLoop:            ld		a,ixh
  33+ EA1C DD BD                                cp		ixl
  34+ EA1E D8                                   ret		c
  35+ EA1F D9           .ProcessLoop:	        exx
  36+ EA20 11 00 00     .Line1:                 ld		de,0
  37+ EA23 7B                                   ld 		a,e
  38+ EA24 DD 95                                sub 	ixl
  39+ EA26 4F                                   ld 		c,a
  40+ EA27 7A                                   ld 		a,d
  41+ EA28 DD 84                                add 	a,ixh
  42+ EA2A 47                                   ld		b,a
  43+ EA2B                                      ;; TODO ADD DOUBLE X CALC
  44+ EA2B D5                                   push	de
  45+ EA2C DD 55                                ld		d,ixl
  46+ EA2E CB 22                                sla		d
  47+ EA30 CD 7D EA                             call	.PlotLine			;CX-X,CY+Y
  48+ EA33 D1                                   pop		de
  49+ EA34 7B           .Line2:                 ld 		a,e
  50+ EA35 DD 95                                sub		ixl
  51+ EA37 4F                                   ld 		c,a
  52+ EA38 7A                                   ld 		a,d
  53+ EA39 DD 94                                sub 	ixh
  54+ EA3B 47                                   ld 		b,a
  55+ EA3C                                      ;; TODO ADD DOUBLE X CALC
  56+ EA3C D5                                   push	de
  57+ EA3D DD 55                                ld		d,ixl
  58+ EA3F CB 22                                sla		d
  59+ EA41 CD 7D EA                             call	.PlotLine			;CX-X,CY-Y
  60+ EA44 D1                                   pop		de
  61+ EA45 7B           .Line3:	                ld 		a,e
  62+ EA46 DD 94                                sub		ixh
  63+ EA48 4F                                   ld 		c,a
  64+ EA49 7A                                   ld 		a,d
  65+ EA4A DD 85                                add 	a,ixl
  66+ EA4C 47                                   ld 		b,a
  67+ EA4D                                      ;; TODO ADD DOUBLE Y CALC
  68+ EA4D D5                                   push	de
  69+ EA4E DD 54                                ld		d,ixh
  70+ EA50 CB 22                                sla		d
  71+ EA52 CD 7D EA                             call	.PlotLine			;CX-Y,CY+x
  72+ EA55 D1                                   pop		de
  73+ EA56 7B           .Line4:	                ld 		a,e
  74+ EA57 DD 94                                sub		ixh
  75+ EA59 4F                                   ld 		c,a
  76+ EA5A 7A                                   ld 		a,d
  77+ EA5B DD 95                                sub 	ixl
  78+ EA5D 47                                   ld 		b,a
  79+ EA5E                                      ;; TODO ADD DOUBLE Y CALC
  80+ EA5E D5                                   push	de
  81+ EA5F DD 54                                ld		d,ixh
  82+ EA61 CB 22                                sla		d
  83+ EA63 CD 7D EA                             call	.PlotLine			;CX-Y,CY+x
  84+ EA66 D1                                   pop		de
  85+ EA67 D9                                   exx
  86+ EA68 CB 7C        .IncrementCircle:	    bit 7,h				; Check for Hl<=0
  87+ EA6A 28 03                                jr z,.draw_circle_1
  88+ EA6C 19                                   add hl,de			; Delta=Delta+D1
  89+ EA6D 18 05                                jr .draw_circle_2		;
  90+ EA6F 09           .draw_circle_1:		    add hl,bc			; Delta=Delta+D2
  91+ EA70 03                                   inc bc
  92+ EA71 03                                   inc bc				; D2=D2+2
  93+ EA72 DD 25                                dec ixh				; Y=Y-1
  94+ EA74 03           .draw_circle_2:		    inc bc				; D2=D2+2
  95+ EA75 03                                   inc bc
  96+ EA76 13                                   inc de				; D1=D1+2
  97+ EA77 13                                   inc de
  98+ EA78 DD 2C                                inc ixl				; X=X+1
  99+ EA7A C3 1A EA                             jp .CircleLoop
 100+ EA7D D5 C5 E5 F5  .PlotLine:              push	de,,bc,,hl,,af
 101+ EA81 3E 00        .LineColour:	        ld		a,0         ; circle colur
 102+ EA83 5F                                   ld      e,a
 103+ EA84 CD B3 E2                             call 	l2_draw_horz_line
 104+ EA87 F1 E1 C1 D1                          pop     de,,bc,,hl,,af
 105+ EA8B C9                                   ret
 106+ EA8C
# file closed: ./Layer2Graphics/layer2_plot_circle_fill.asm
 693  EA8C                  INCLUDE "./Layer2Graphics/l2_draw_any_line.asm"
# file opened: ./Layer2Graphics/l2_draw_any_line.asm
   1+ EA8C              ; ">l2_draw_any_line, bc = y0,x0 de=y1,x1,a=color: determines if its horizontal, vertical or diagonal then hands off the work"
   2+ EA8C 08           l2_draw_any_line:       ex		af,af'              ; save colour into a'
   3+ EA8D 79                                   ld		a,c                 ; if x and e are the same its horizontal
   4+ EA8E BB                                   cp		e
   5+ EA8F 28 08                                jr		z,.HorizontalLineCheck
   6+ EA91 78                                   ld		a,b                 ; if b and d are the same its vertica;
   7+ EA92 BA                                   cp		d
   8+ EA93 28 0E                                jr		z,.VerticalLine
   9+ EA95              ; use jp and get a free ret instruction optimisation
  10+ EA95 08           .DiagonalLine:		    ex		af,af'			     ; get colour back into a
  11+ EA96 C3 5C E6                             jp		l2_draw_diagonal
  12+ EA99
  13+ EA99 78           .HorizontalLineCheck:   ld      a,b
  14+ EA9A BA                                   cp      d
  15+ EA9B 28 0B                                jr      z, .SinglePixel
  16+ EA9D 08           .HorizontalLine:        ex		af,af'              ; get colour back into a
  17+ EA9E 53                                   ld		d,e				    ; set d as target right pixel
  18+ EA9F 5F                                   ld		e,a				    ; e holds colour on this call
  19+ EAA0 C3 DF E2                             jp		l2_draw_horz_line_to
  20+ EAA3 08           .VerticalLine:          ex		af,af'
  21+ EAA4 5F                                   ld		e,a				    ; e holds colour on this call
  22+ EAA5 C3 5E E3                             jp		l2_draw_vert_line_to
  23+ EAA8 08           .SinglePixel:           ex		af,af'              ; get colour back into a
  24+ EAA9 C3 35 E1                             jp      l2_plot_pixel
  25+ EAAC              ;......................................................
  26+ EAAC
# file closed: ./Layer2Graphics/l2_draw_any_line.asm
 694  EAAC                  INCLUDE "./Layer2Graphics/clearLines-LL155.asm"
# file opened: ./Layer2Graphics/clearLines-LL155.asm
   1+ EAAC              ; ClearLines (LL155)
   2+ EAAC              ;   y = 0
   3+ EAAC              ; 	XX20 = UbnkEdgeHeapSize
   4+ EAAC              ;   exit if XX20 < 4
   5+ EAAC              ;   ++y
   6+ EAAC              ;   do
   7+ EAAC              ;		X1 = XX19(Y) ;	Y1 = XX19(++Y) ;	X2 = XX19(++Y);	Y2 = XX19(++Y)
   8+ EAAC              ;   	call DrawLine (x1,y1 to x2,y2) two's compliment (we will do 0)
   9+ EAAC              ;		++y
  10+ EAAC              ;	until Y > XX20
  11+ EAAC
  12+ EAAC              clearLines:
  13+ EAAC              layer2_clearLines:
  14+ EAAC 3A 0E C3     LL155cl:                ld		a,(UbnkLineArrayLen)
  15+ EAAF 47                                   ld		b,a
  16+ EAB0 21 1C C2                             ld		hl,UbnkLineArray
  17+ EAB3 C5           clearLinesLoop:         push	bc
  18+ EAB4 7E                                   ld		a,(hl)
  19+ EAB5 23                                   inc		hl
  20+ EAB6 4F                                   ld		c,a
  21+ EAB7 7E                                   ld		a,(hl)
  22+ EAB8 23                                   inc		hl
  23+ EAB9 47                                   ld		b,a
  24+ EABA 7E                                   ld		a,(hl)
  25+ EABB 23                                   inc		hl
  26+ EABC 5F                                   ld		e,a
  27+ EABD 7E                                   ld		a,(hl)
  28+ EABE 23                                   inc		hl
  29+ EABF 57                                   ld		d,a
  30+ EAC0 3E E3                                ld		a,COLOUR_TRANSPARENT		; we erase here
  31+ EAC2 E5                                   push	hl
  32+ EAC3 CD 8C EA                             call    l2_draw_any_line
  33+ EAC6 E1                                   pop		hl
  34+ EAC7 C1                                   pop		bc
  35+ EAC8 10 E9                                djnz	clearLinesLoop
  36+ EACA C9                                   ret
  37+ EACB
# file closed: ./Layer2Graphics/clearLines-LL155.asm
 695  EACB                  INCLUDE "./Layer2Graphics/l2_draw_line_v2.asm"
# file opened: ./Layer2Graphics/l2_draw_line_v2.asm
   1+ EACB              ; ******************************************************************************
   2+ EACB              ;
   3+ EACB              ;	Draw a pixel line from (x0,y0) defined in (COORDS) - the current plot
   4+ EACB              ;	coordinate, to the relative distance points (x0+x,y0+y).
   5+ EACB              ;
   6+ EACB              ;	Design & programming by Gunther Strube,	Copyright (C) InterLogic 1995
   7+ EACB              ;
   8+ EACB              ;	The (COORDS+0)	pointer contains the current y coordinate, (COORDS+1) the
   9+ EACB              ;	current x coordinate. The main program should reset the (COORDS) variables
  10+ EACB              ;	before using line drawing.
  11+ EACB              ;
  12+ EACB              ;	The routine checks the range of specified coordinates which is the
  13+ EACB              ;	boundaries of the graphics area (256x64	pixels).
  14+ EACB              ;	If a boundary error occurs the routine exits automatically.	This may be
  15+ EACB              ;	useful if you are trying to draw a line longer than allowed. Only the
  16+ EACB              ;	visible part will be drawn.
  17+ EACB              ;
  18+ EACB              ;	The hardware graphics memory is organized as (0,0) in the top left corner.
  19+ EACB              ;
  20+ EACB              ;	The plot routine is	defined by an address pointer	in IX.
  21+ EACB              ;
  22+ EACB              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
  23+ EACB              ;		DE =	move	relative y vertical	points (maximum +/-	255).
  24+ EACB              ;		IX =	pointer to plot routine that uses HL = (x,y)	of plot coordinate.
  25+ EACB              ;
  26+ EACB              ;	OUT:	None.
  27+ EACB              ;
  28+ EACB              ;	Registers	used	by routine:
  29+ EACB              ;		   N	:	B, loop counter
  30+ EACB              ;		   i	:	line	balance variable
  31+ EACB              ;		   x	:	H/L,	horisontal, vertical distance	variables
  32+ EACB              ;		   y	:	H/L,	horisontal, vertical distance	variables
  33+ EACB              ;	  (x0,y0)	:	(h,l)
  34+ EACB              ;	  direc_x	:	d, horisontal step increment
  35+ EACB              ;	  direc_y	:	e, vertical step increment
  36+ EACB              ;		 ddx	:	b, horisontal step increment
  37+ EACB              ;		 ddy	:	c, vertical step increment
  38+ EACB              ;
  39+ EACB              ;		DE, A work registers.
  40+ EACB              ;
  41+ EACB              ; The algorithm in pseudo-code:
  42+ EACB              ;
  43+ EACB              ;	direc_x =	SGN x: direc_y	= SGN y
  44+ EACB              ;	x = ABS x: y =	ABS y
  45+ EACB              ;
  46+ EACB              ;	if x	>= y
  47+ EACB              ;		if x+y=0 then return
  48+ EACB              ;		H = x
  49+ EACB              ;		L = y
  50+ EACB              ;		ddx = direc_x
  51+ EACB              ;		ddy = 0
  52+ EACB              ;	else
  53+ EACB              ;		H = y
  54+ EACB              ;		L = x
  55+ EACB              ;		ddx = 0
  56+ EACB              ;		ddy = direc_y
  57+ EACB              ;	endif
  58+ EACB              ;
  59+ EACB              ;	B = H
  60+ EACB              ;	i = INT(B/2)
  61+ EACB              ;	FOR N=B TO 1 STEP -1
  62+ EACB              ;		i = i + L
  63+ EACB              ;		if i	< H
  64+ EACB              ;			ix =	ddx
  65+ EACB              ;			iy =	ddy
  66+ EACB              ;		else
  67+ EACB              ;			i = i - H
  68+ EACB              ;			ix =	direc_x
  69+ EACB              ;			iy =	direc_y
  70+ EACB              ;		endif
  71+ EACB              ;		x0 =	x0 +	ix
  72+ EACB              ;		y0 =	y0 +	iy
  73+ EACB              ;		plot	(x0,y0)
  74+ EACB              ;	NEXT	N
  75+ EACB              ;
  76+ EACB              ;
  77+ EACB              ;	Registers	changed after return:
  78+ EACB              ;		..BCDEHL/IXIY/af......	same
  79+ EACB              ;		AF....../..../..bcdehl	different
  80+ EACB              ;
  81+ EACB DF           line_gfx_colour db $DF
  82+ EACC 00 00        line_gfx_coords	dw 0
  83+ EACE              LineHLtoDE:
  84+ EACE 7C           TestMaxY:               ld	a,h ; were h = y or l = y?
  85+ EACF FE C0                                cp	192
  86+ EAD1 30 26                                jr	nc, exit_line		; y0	coordinate out	of range
  87+ EAD3 7A                                   ld	a,d
  88+ EAD4 FE C0                                cp	192
  89+ EAD6 30 21                                jr	nc, exit_line		; y1	coordinate out	of range
  90+ EAD8 22 CC EA                             ld	(line_gfx_coords),hl		; the starting	point is now default
  91+ EADB E5                                   push	hl
  92+ EADC D5                                   push	de
  93+ EADD 6C                                   ld	l,h				; L = x0
  94+ EADE 62                                   ld	h,d				; H = x1
  95+ EADF 7C           distanceX:		        ld	a,h
  96+ EAE0 95                                   sub	l
  97+ EAE1 6F                                   ld	l,a
  98+ EAE2 26 00                                ld	h,0
  99+ EAE4 30 02                                jr	nc, distanceXDone
 100+ EAE6 26 FF                                ld	h,-1
 101+ EAE8 D1           distanceXDone:          pop	de
 102+ EAE9 E3                                   ex	(sp),hl			; L = y0
 103+ EAEA 63                                   ld	h,e				; H = y1
 104+ EAEB 7C           distanceY:		        ld	a,h
 105+ EAEC 95                                   sub	l
 106+ EAED 6F                                   ld	l,a
 107+ EAEE 26 00                                ld	h,0
 108+ EAF0 30 02                                jr	nc, distanceYDone
 109+ EAF2 26 FF                                ld	h,-1
 110+ EAF4 D1           distanceYDone:          pop	de
 111+ EAF5 EB                                   ex	de,hl			; h.dist.	= HL, v.dist. = DE
 112+ EAF6 CD FA EA                             call	DrawLineRelative			; draw line...
 113+ EAF9 C9           exit_line:              ret
 114+ EAFA
 115+ EAFA              ; ***************************************************************************
 116+ EAFA              ;
 117+ EAFA              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
 118+ EAFA              ;		DE =	move	relative y vertical	points (maximum +/-	255).
 119+ EAFA              ;
 120+ EAFA              ; OUT: h - l distance in	HL
 121+ EAFA              ;
 122+ EAFA
 123+ EAFA D5           DrawLineRelative:       push	de
 124+ EAFB E5                                   push	hl
 125+ EAFC D9                                   exx
 126+ EAFD E1                                   pop	hl					; get relative	horisontal movement
 127+ EAFE CD 69 EB                             call	sgn
 128+ EB01 57                                   ld	d,a					; direc_x	= SGN(x) installed d = +/-1 for horizontal update
 129+ EB02 CD 76 EB                             call	absValue
 130+ EB05 45                                   ld	b,l					; x = ABS(x)
 131+ EB06 E1           DrawLineGetVertRelative:pop	hl					; get relative	vertical movement
 132+ EB07 CD 69 EB                             call	sgn
 133+ EB0A 5F                                   ld	e,a					; direc_y	= SGN(y) installed  = +/-1 for vertical update
 134+ EB0B CD 76 EB                             call	absValue
 135+ EB0E 4D                                   ld	c,l					; y = ABS(y) so now bc = dxdy
 136+ EB0F              ; so by here BC = dx dy HL in increment/decrement x y
 137+ EB0F C5                                   push	bc
 138+ EB10 D9                                   exx
 139+ EB11 E1                                   pop	hl					; H = absolute	x dist., L = absolute y distance
 140+ EB12 7C                                   ld	a,h
 141+ EB13 BD                                   cp	l
 142+ EB14 38 0A                                jr	c, x_smaller_y		; if	x >=	y
 143+ EB16 B4           areXandYZero:           or	h					;	if x+y = 0
 144+ EB17 28 4F                                jr	z, exit_draw		;		return
 145+ EB19 D9           y_lessorequal_x:        exx						;	else
 146+ EB1A 42                                   ld	b,d					;		ddx = direc_x
 147+ EB1B 0E 00                                ld	c,0					;		ddy = 0
 148+ EB1D D9                                   exx
 149+ EB1E 18 08                                jr	init_drawloop		; else
 150+ EB20 7C           x_smaller_y:	        ld	a,h
 151+ EB21 65                                   ld	h,l					;	H = y
 152+ EB22 6F                                   ld	l,a					;	L = x
 153+ EB23 D9                                   exx
 154+ EB24 06 00                                ld	b,0					;	ddx = 0
 155+ EB26 4B                                   ld	c,e					;	ddy = direc_y
 156+ EB27 D9                                   exx
 157+ EB28 44           init_drawloop:	        ld	b,h
 158+ EB29 4C                                   ld	c,h					; B = H
 159+ EB2A CB 39                                srl	c					; i = INT(B/2)
 160+ EB2C              										; FOR N=B	TO 1	STEP	-1
 161+ EB2C 79           drawloop:		        ld	a,c
 162+ EB2D 85                                   add	a,l
 163+ EB2E 38 09                                jr	c, i_greater		;	i + L > 255  (i > H)
 164+ EB30 BC                                   cp	h
 165+ EB31 30 06                                jr	nc, i_greater		;	if i	< H
 166+ EB33 4F                                   ld	c,a					;		i = i + L
 167+ EB34 D9                                   exx
 168+ EB35 C5                                   push	bc				;		ix =	ddx:	iy =	ddy
 169+ EB36 D9                                   exx
 170+ EB37 18 05                                jr	check_plot			;	else
 171+ EB39 94           i_greater:		        sub	h					;		i = i - H
 172+ EB3A 4F                                   ld	c,a
 173+ EB3B D9                                   exx
 174+ EB3C D5                                   push	de				;		ix =	direc_x: iy = direc_y
 175+ EB3D D9                                   exx						;	endif
 176+ EB3E E3           check_plot:		        ex	(sp),hl				;	preserve H,L distances on stack
 177+ EB3F EB                                   ex	de,hl				;	D,E = ix,	iy
 178+ EB40 2A CC EA                             ld	hl,(line_gfx_coords)
 179+ EB43 7D                                   ld	a,l
 180+ EB44 83                                   add	a,e					;
 181+ EB45 6F                                   ld	l,a					;	y0 =	y0 +	iy (y0 is	checked by plot)
 182+ EB46 7A                                   ld	a,d
 183+ EB47 3C                                   inc	a
 184+ EB48 84                                   add	a,h
 185+ EB49 38 04                                jr	c, check_range		;	check out	of range
 186+ EB4B 28 1A                                jr	z, range_error		;	Fz=1	& Fc=0 denotes	x0 <	0
 187+ EB4D 18 02                                jr	plot_point
 188+ EB4F 20 16        check_range:            jr	nz, range_error	;	Fz=0	& Fc=1 denotes	x0 >	255
 189+ EB51
 190+ EB51 3D           plot_point:             dec	a
 191+ EB52 C5                                   push	bc
 192+ EB53 F5                                   push	af
 193+ EB54 47                                   ld	    b,a					;	x0 =	x0 +	ix
 194+ EB55 4D                                   ld		c,l
 195+ EB56 3A CB EA                             ld		a,(line_gfx_colour)
 196+ EB59 ED 43 CC EA                          ld      (line_gfx_coords),bc
 197+ EB5D CD 35 E1                             call	l2_plot_pixel
 197+ EB60
 198+ EB60 F1                                   pop		af
 199+ EB61 C1                                   pop		bc
 200+ EB62 E1           plot_RET:		        pop	hl					;	restore H,L distances...
 201+ EB63 10 C7                                djnz	drawloop		; NEXT N
 202+ EB65 18 01                                jr	exit_draw
 203+ EB67
 204+ EB67 E1           range_error:	        pop	hl					; remove H,L distances...
 205+ EB68 C9           exit_draw:		        ret
 206+ EB69
 207+ EB69
 208+ EB69              ; ******************************************************************************
 209+ EB69              ;
 210+ EB69              ;	SGN (Signum value) of 16	bit signed integer.
 211+ EB69              ;
 212+ EB69              ;	IN:		HL =	integer
 213+ EB69              ;	OUT:		A = result: 0,1,-1 (if zero, positive, negative)
 214+ EB69              ;
 215+ EB69              ;	Registers	changed after return:
 216+ EB69              ;	..BCDEHL/IXIY	same
 217+ EB69              ;	AF....../....	different
 218+ EB69              ;
 219+ EB69 7C           sgn:				    ld	a,h
 220+ EB6A B5                                   or	l
 221+ EB6B C8                                   ret	z				; integer	is zero, return 0...
 222+ EB6C CB 7C                                bit	7,h
 223+ EB6E 20 03                                jr	nz, negative_int
 224+ EB70 3E 01                                ld	a,1
 225+ EB72 C9                                   ret
 226+ EB73 3E FF        negative_int:		    ld	a,-1
 227+ EB75 C9                                   ret
 228+ EB76
 229+ EB76
 230+ EB76              ; ******************************************************************************
 231+ EB76              ;
 232+ EB76              ;	ABS (Absolute value) of 16 bit signed integer.
 233+ EB76              ;
 234+ EB76              ;	IN:		HL =	integer
 235+ EB76              ;	OUT:		HL =	converted	integer
 236+ EB76              ;
 237+ EB76              ;	Registers	changed after return:
 238+ EB76              ;	A.BCDE../IXIY	same
 239+ EB76              ;	.F....HL/....	different
 240+ EB76              ;
 241+ EB76 CB 7C        absValue:			    bit	7,h
 242+ EB78 C8                                   ret	z				; integer	is positive...
 243+ EB79 D5                                   push	de
 244+ EB7A EB                                   ex	de,hl
 245+ EB7B 21 00 00                             ld	hl,0
 246+ EB7E BF                                   cp	a				; Fc	= 0,	may not be used...
 247+ EB7F ED 52                                sbc	hl,de			; convert	negative integer
 248+ EB81 D1                                   pop	de
 249+ EB82 C9                                   ret
 250+ EB83
# file closed: ./Layer2Graphics/l2_draw_line_v2.asm
 696  EB83                  DISPLAY "Bank ",BankLAYER2," - Bytes free ",/D, $2000 - ($-LAYER2Addr), " - BankLAYER2"
 697  EB83              ; Bank 58  ------------------------------------------------------------------------------------------------------------------------
 698  EB83                  SLOT    LAYER1Addr
 699  EB83                  PAGE    BankLAYER1
 700  EB83                  ORG     LAYER1Addr, BankLAYER1
 701  E000
 702  E000                  INCLUDE "./Layer1Graphics/layer1_attr_utils.asm"
# file opened: ./Layer1Graphics/layer1_attr_utils.asm
   1+ E000
   2+ E000 00 58        L1AttrRow00:            DW $5800                    ;Row 1    */
   3+ E002 20 58        L1AttrRow01:            DW $5820                    ;Row 2    */
   4+ E004 40 58        L1AttrRow02:            DW $5840                    ;Row 3    */
   5+ E006 60 58        L1AttrRow03:            DW $5860                    ;Row 4    */
   6+ E008 80 58        L1AttrRow04:            DW $5880                    ;Row 5    */
   7+ E00A A0 58        L1AttrRow05:            DW $58A0                    ;Row 6    */
   8+ E00C C0 58        L1AttrRow06:            DW $58C0                    ;Row 7    */
   9+ E00E E0 58        L1AttrRow07:            DW $58E0                    ;Row 8    */
  10+ E010 00 59        L1AttrRow08:            DW $5900                    ;Row 9    */
  11+ E012 20 59        L1AttrRow09:            DW $5920                    ;Row 10   */
  12+ E014 40 59        L1AttrRow10:            DW $5940                    ;Row 11   */
  13+ E016 60 59        L1AttrRow11:            DW $5960                    ;Row 12   */
  14+ E018 80 59        L1AttrRow12:            DW $5980                    ;Row 13   */
  15+ E01A A0 59        L1AttrRow13:            DW $59A0                    ;Row 14   */
  16+ E01C C0 59        L1AttrRow14:            DW $59C0                    ;Row 15   */
  17+ E01E E0 59        L1AttrRow15:            DW $59E0                    ;Row 16   */
  18+ E020 00 5A        L1AttrRow16:            DW $5A00                    ;Row 17   */
  19+ E022 20 5A        L1AttrRow17:            DW $5A20                    ;Row 18   */
  20+ E024 40 5A        L1AttrRow18:            DW $5A40                    ;Row 19   */
  21+ E026 60 5A        L1AttrRow19:            DW $5A60                    ;Row 20   */
  22+ E028 80 5A        L1AttrRow20:            DW $5A80                    ;Row 21   */
  23+ E02A A0 5A        L1AttrRow21:            DW $5AA0                    ;Row 22   */
  24+ E02C C0 5A        L1AttrRow22:            DW $5AC0                    ;Row 23   */
  25+ E02E E0 5A        L1AttrRow23:            DW $5AE0                    ;Row 23   */
  26+ E030
  27+ E030              ; "l2_hilight_row, d = row, e = colour"
  28+ E030 21 00 E0     l1_hilight_row:         ld      hl, L1AttrRow00
  29+ E033 4B                                   ld      c,e
  30+ E034 7A                                   ld      a,d
  31+ E035 CB 27                                sla     a
  32+ E037 ED 31                                add     hl,a
  33+ E039 7E                                   ld      a,(hl)
  34+ E03A 5F                                   ld      e,a
  35+ E03B 23                                   inc     hl
  36+ E03C 7E                                   ld      a,(hl)
  37+ E03D 57                                   ld      d,a
  38+ E03E EB                                   ex      hl,de
  39+ E03F 79                                   ld		a,c
  40+ E040 11 20 00                             ld		de, 32
  41+ E043 CD A3 7C                             call	memfill_dma
  42+ E046 C9                                   ret
  43+ E047
# file closed: ./Layer1Graphics/layer1_attr_utils.asm
 703  E047                  INCLUDE "./Layer1Graphics/layer1_cls.asm"
# file opened: ./Layer1Graphics/layer1_cls.asm
   1+ E047 AF           l1_cls_top:             xor     a
   2+ E048 21 00 40                             ld      hl, $4000
   3+ E04B 11 00 08                             ld      de, $0800
   4+ E04E CD A3 7C                             call    memfill_dma
   5+ E051 C9                                   ret
   6+ E052
   7+ E052 AF           l1_cls_mid:             xor     a
   8+ E053 21 00 48                             ld      hl, $4800
   9+ E056 11 00 08                             ld      de, $0800
  10+ E059 CD A3 7C                             call    memfill_dma
  11+ E05C C9                                   ret
  12+ E05D
  13+ E05D AF           l1_cls_bottom:          xor     a
  14+ E05E 21 00 50                             ld      hl, $5000
  15+ E061 11 00 08                             ld      de, $0800
  16+ E064 CD A3 7C                             call    memfill_dma
  17+ E067 C9                                   ret
  18+ E068
  19+ E068              ; Designed specifically to clear a whole character aligned line
  20+ E068 1E 00        l1_cls_line_d:          ld      e,0
  21+ E06A ED 94                                pixelad
  22+ E06C 11 00 01                             ld      de,32 * 8
  23+ E06F AF                                   xor     a
  24+ E070 CD A3 7C                             call    memfill_dma
  25+ E073 C9                                   ret
  26+ E074
  27+ E074              ; Designed specifically to clear a whole character aligned 2 lines line, used for say clearing hyperspace message
  28+ E074 1E 00        l1_cls_2_lines_d:       ld      e,0
  29+ E076 ED 94                                pixelad
  30+ E078 11 00 02                             ld      de,32 * 16
  31+ E07B AF                                   xor     a
  32+ E07C CD A3 7C                             call    memfill_dma
  33+ E07F C9                                   ret
  34+ E080
  35+ E080 AF           l1_cls:                 xor		a
  36+ E081 21 00 40     l1_cls_to_a:            ld		hl,	$4000
  37+ E084 11 00 18                             ld		de, $1800
  38+ E087 CD A3 7C                             call	memfill_dma
  39+ E08A C9                                   ret
  40+ E08B
  41+ E08B 21 00 58     l1_attr_cls_2DlinesA:   ld		hl,	$5800
  42+ E08E 1E 20                                ld      e,32
  43+ E090 ED 30                                mul
  44+ E092 19                                   add     hl,de
  45+ E093 11 40 00                             ld		de, 32 * 2
  46+ E096 CD A3 7C                             call	memfill_dma
  47+ E099 C9                                   ret
  48+ E09A
  49+ E09A
  50+ E09A AF           l1_attr_cls:            xor		a
  51+ E09B 21 00 58     l1_attr_cls_to_a:       ld		hl,	$5800
  52+ E09E 11 00 03                             ld		de, $0300
  53+ E0A1 CD A3 7C                             call	memfill_dma
  54+ E0A4 C9                                   ret
  55+ E0A5
  56+ E0A5 01 FE FE     l1_set_border:          ld	    bc, 0xFEFE
  57+ E0A8 ED 79                                out		(c),a
  58+ E0AA C9                                   ret
# file closed: ./Layer1Graphics/layer1_cls.asm
 704  E0AB                  INCLUDE "./Layer1Graphics/layer1_print_at.asm"
# file opened: ./Layer1Graphics/layer1_print_at.asm
   1+ E0AB              ; "l1 print char a = character, de = Ypixel Xchar of print"
   2+ E0AB D5 E5        l1_print_char:          push	de,,hl
   3+ E0AD ED 94                                pixelad								; hl = address of de
   4+ E0AF E5                                   push	hl							; save hl for loop
   5+ E0B0 26 00                                ld		h,0
   6+ E0B2 6F                                   ld		l,a
   7+ E0B3 29                                   add		hl,hl						; * 2
   8+ E0B4 29                                   add		hl,hl						; * 4
   9+ E0B5 29                                   add		hl,hl						; * 8 to get byte address
  10+ E0B6 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  11+ E0BA EB                                   ex		de,hl						; save address into de
  12+ E0BB E1                                   pop		hl							; get back hl for loop
  13+ E0BC 06 08                                ld		b,8							; do 8 rows
  14+ E0BE 1A           .PrintCharLoop:         ld		a,(de)						; row byte
  15+ E0BF 13                                   inc		de							; next byte
  16+ E0C0 77                                   ld		(hl),a						; poke to screen
  17+ E0C1 ED 93                                pixeldn								; Down 1 row
  18+ E0C3 10 F9                                djnz	.PrintCharLoop				; loop for 8 bytes
  19+ E0C5 E1 D1                                pop		de,,hl					    ; restore hl
  20+ E0C7 C9                                   ret
  21+ E0C8
  22+ E0C8              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  23+ E0C8              ; now skips ascii code < 32 but moves on cursor by 1 char
  24+ E0C8              l1_print_at:
  25+ E0C8 7E           .PrintLoop:             ld		a,(hl)
  26+ E0C9 FE 00                                cp		0
  27+ E0CB C8                                   ret		z
  28+ E0CC                                      CallIfAGTENusng " ", l1_print_char
  28+ E0CC FE 20       >                        cp      " "
  28+ E0CE D4 AB E0    >                        call	nc,l1_print_char
  29+ E0D1 23                                   inc		hl							; move 1 message character right
  30+ E0D2 7B                                   ld		a,e
  31+ E0D3 C6 08                                add		a,8
  32+ E0D5 5F                                   ld		e,a							; move 1 screen character right
  33+ E0D6 18 F0                                jr		.PrintLoop
  34+ E0D8              .Clearstackandfinish:   ;pop		de                      ; TODO LOOOKS TO BE A ROGUE POPDE
  35+ E0D8 C9                                   ret
  36+ E0D9
  37+ E0D9              ;l1_print_at_wrap:
  38+ E0D9              ;; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  39+ E0D9              ;	ld      iyh,e
  40+ E0D9              ;.PrintLoop:
  41+ E0D9              ;	ld		a,(hl)
  42+ E0D9              ;	cp		0
  43+ E0D9              ;	ret		z
  44+ E0D9              ;.CountWordCharLen
  45+ E0D9              ;; Need to change to word wrap, so it will loop through string as before
  46+ E0D9              ;; but read up until a null or space, take the character count * 8 for pixels
  47+ E0D9              ;; if that is > 238 then force a premature line wrap
  48+ E0D9              ;
  49+ E0D9              ;
  50+ E0D9              ;    push    iy
  51+ E0D9              ;    call	l1_print_char
  52+ E0D9              ;    pop     iy
  53+ E0D9              ;	inc		hl							; move 1 message character right
  54+ E0D9              ;	ld		a,e
  55+ E0D9              ;    cp      238
  56+ E0D9              ;    jr      nc,.NextLine
  57+ E0D9              ;	add		a,8
  58+ E0D9              ;	ld		e,a							; move 1 screen character right
  59+ E0D9              ;	jr		.PrintLoop
  60+ E0D9              ;.Clearstackandfinish:
  61+ E0D9              ;	pop		de
  62+ E0D9              ;	ret
  63+ E0D9              ;.NextLine:
  64+ E0D9              ;    ld      a,(hl)
  65+ E0D9              ;    cp      " "
  66+ E0D9              ;    ld      e,iyh
  67+ E0D9              ;    ld      a,d
  68+ E0D9              ;    add     a,8
  69+ E0D9              ;    ld      d,a
  70+ E0D9              ;    jr		.PrintLoop
  71+ E0D9
  72+ E0D9              ; Counts next word at hl, uses e and forces a wrap if it would over flow puts value in c
  73+ E0D9 E5           L1LenWordAtHL:          push    hl
  74+ E0DA D5                                   push    de
  75+ E0DB 7E           .CountLoop:             ld      a,(hl)
  76+ E0DC FE 00                                cp      0
  77+ E0DE 28 0F                                jr      z,.CountDone
  78+ E0E0 FE 20                                cp      32
  79+ E0E2 28 0B                                jr      z,.CountDone
  80+ E0E4 7B                                   ld      a,e
  81+ E0E5 C6 08                                add     a,8
  82+ E0E7 5F                                   ld      e,a
  83+ E0E8 FE EE                                cp      238
  84+ E0EA 30 07                                jr      nc,.TooLong
  85+ E0EC 23                                   inc     hl
  86+ E0ED 18 EC                                jr      .CountLoop
  87+ E0EF D1           .CountDone:             pop     de
  88+ E0F0 E1                                   pop     hl
  89+ E0F1 AF                                   xor     a
  90+ E0F2 C9                                   ret
  91+ E0F3 D1           .TooLong                pop     de
  92+ E0F4 E1                                   pop     hl
  93+ E0F5 3E FF                                ld      a,$FF
  94+ E0F7 C9                                   ret
  95+ E0F8
  96+ E0F8 7E           L1PrintWordAtHL:        ld      a,(hl)
  97+ E0F9 FE 00                                cp      0
  98+ E0FB C8                                   ret     z
  99+ E0FC FE 20                                cp      32
 100+ E0FE 28 0F                                jr      z,.ItsASpace
 101+ E100 FD E5                                push    iy
 102+ E102 CD AB E0                             call	l1_print_char
 103+ E105 FD E1                                pop     iy
 104+ E107 7B                                   ld      a,e
 105+ E108 C6 08                                add     a,8
 106+ E10A 5F                                   ld      e,a
 107+ E10B 23                                   inc     hl
 108+ E10C C3 F8 E0                             jp      L1PrintWordAtHL
 109+ E10F 23           .ItsASpace:             inc     hl      ;  Just a bodge for now
 110+ E110 7B                                   ld      a,e
 111+ E111 C6 08                                add     a,8
 112+ E113 5F                                   ld      e,a
 113+ E114 C9                                   ret
 114+ E115
 115+ E115
 116+ E115              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 117+ E115              ; Now has full word level wrapping
 118+ E115 FD 63        l1_print_at_wrap:       ld      iyh,e
 119+ E117 7E           .PrintLoop:             ld		a,(hl)
 120+ E118 FE 00                                cp		0
 121+ E11A C8                                   ret		z
 122+ E11B CD D9 E0     .CountWordCharLen:      call    L1LenWordAtHL
 123+ E11E FE FF                                cp      $FF
 124+ E120 28 06                                jr      z,.WrapNextLine
 125+ E122 CD F8 E0     .NotTooLong:            call    L1PrintWordAtHL
 126+ E125              ; Need to change to word wrap, so it will loop through string as before
 127+ E125              ; but read up until a null or space, take the character count * 8 for pixels
 128+ E125              ; if that is > 238 then force a premature line wrap
 129+ E125 18 F0                                jr		.PrintLoop
 130+ E127              .Clearstackandfinish:   ;op		de
 131+ E127 C9                                   ret
 132+ E128              .WrapNextLine:
 133+ E128 FD 5C        .NextLine:              ld      e,iyh
 134+ E12A 7A                                   ld      a,d
 135+ E12B C6 08                                add     a,8
 136+ E12D 57                                   ld      d,a
 137+ E12E 18 E7                                jr		.PrintLoop
 138+ E130
 139+ E130
# file closed: ./Layer1Graphics/layer1_print_at.asm
 705  E130                  DISPLAY "Bank ",BankLAYER1," - Bytes free ",/D, $2000 - ($-LAYER1Addr), " - BankLAYER1"
 706  E130              ; Bank 59  ------------------------------------------------------------------------------------------------------------------------
 707  E130              ; In the first copy of the banks the "Non number" labels exist. They will map directly in other banks
 708  E130              ; as the is aligned and data tables are after that
 709  E130              ; need to make the ship index tables same size in each to simplify further
 710  E130                  SLOT    ShipModelsAddr
 711  E130                  PAGE    BankShipModels1
 712  E130              	ORG     ShipModelsAddr, BankShipModels1
 713  E000                  INCLUDE "./Data/ShipModelMacros.asm"
# file opened: ./Data/ShipModelMacros.asm
   1+ E000              MShipBankTable          MACRO
   2+ E000 ~                                    DW      BankShipModels1
   3+ E000 ~                                    DW      BankShipModels2
   4+ E000 ~                                    DW      BankShipModels3
   5+ E000 ~                                    DW      BankShipModels4
   6+ E000                                      ENDM
   7+ E000              ; For ship number A fetch
   8+ E000              ;           the adjusted ship number in B , C = original number
   9+ E000              ;           bank number in A for the respective ship based on the ship table
  10+ E000              MGetShipBankId:         MACRO   banktable
  11+ E000 ~                                    ld      b,0
  12+ E000 ~                                    ld      c,a                                 ; c= original ship id
  13+ E000 ~            .ShiftLoop:             srl     a
  14+ E000 ~                                    srl     a
  15+ E000 ~                                    srl     a
  16+ E000 ~                                    srl     a                                   ; divide by 16
  17+ E000 ~                                    ld      b,a                                 ; b = bank nbr
  18+ E000 ~                                    ld      a,c
  19+ E000 ~                                    ld      d,b
  20+ E000 ~                                    ld      e,16
  21+ E000 ~                                    mul                                         ; de = 16 * bank number (max is about 15 banks)
  22+ E000 ~                                    sub     e                                   ; a= actual model id now
  23+ E000 ~            .SelectedBank:          ld      d,b                                 ; save current bank number
  24+ E000 ~                                    ld      b,a                                 ; b = adjusted ship nbr
  25+ E000 ~                                    ld      a,d                                 ; a = bank number
  26+ E000 ~            ;.. Now b = bank and a = adjusted ship nbr
  27+ E000 ~                                    ld      hl,banktable                        ; a= bank index
  28+ E000 ~                                    add     hl,a
  29+ E000 ~                                    add     hl,a
  30+ E000 ~                                    ld      a,(hl)                              ; a = actual bank now
  31+ E000 ~                                    ClearCarryFlag
  32+ E000 ~                                    ret
  33+ E000                                      ENDM
  34+ E000
  35+ E000              McopyVertsToUniverse:   MACRO
  36+ E000 ~                                    ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
  37+ E000 ~                                    ld          de,UBnkHullVerticies
  38+ E000 ~                                    ld          b,0
  39+ E000 ~                                    ld			a,(VertexCtX6Addr)
  40+ E000 ~                                    ld          c,a
  41+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  42+ E000 ~                                    call        memcopy_dma
  43+ E000 ~                                    ret
  44+ E000                                      ENDM
  45+ E000
  46+ E000              McopyEdgesToUniverse:   MACRO
  47+ E000 ~                                    ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
  48+ E000 ~                                    ld          de,UBnkHullEdges
  49+ E000 ~                                    ld          b,0
  50+ E000 ~                                    ld			a,(LineX4Addr)
  51+ E000 ~                                    ld          c,a
  52+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  53+ E000 ~                                    call        memcopy_dma
  54+ E000 ~                                    ret
  55+ E000                                      ENDM
  56+ E000
  57+ E000              McopyNormsToUniverse:   MACRO
  58+ E000 ~                                    ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
  59+ E000 ~                                    ld          de,UBnkHullNormals
  60+ E000 ~                                    ld          b,0
  61+ E000 ~                                    ld          a,(FaceCtX4Addr)
  62+ E000 ~                                    ld          c,a
  63+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  64+ E000 ~                                    call        memcopy_dma
  65+ E000 ~                                    ret
  66+ E000                                      ENDM
  67+ E000
  68+ E000              ; Passes in ship nbr in A and bank is part of MACRO
  69+ E000              MCopyShipToUniverse:    MACRO       banklabel
  70+ E000 ~                                    ld          hl,UBnkShipModelBank
  71+ E000 ~                                    ld          (hl),banklabel
  72+ E000 ~                                    ld          (UBnKShipModelNbr),a
  73+ E000 ~            .GetHullDataLength:     ld          hl,ShipModelSizeTable
  74+ E000 ~                                    add         hl,a
  75+ E000 ~                                    add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
  76+ E000 ~                                    ld          c,(hl)
  77+ E000 ~                                    inc         hl
  78+ E000 ~                                    ld          b,(hl)                      ; bc now equals length of data set
  79+ E000 ~            .GetHullDataAddress:    ld          hl,ShipModelTable
  80+ E000 ~                                    add         hl,a
  81+ E000 ~                                    add         hl,a                        ; now hl = address of ship data value
  82+ E000 ~                                    ld          a,(hl)
  83+ E000 ~                                    inc         hl
  84+ E000 ~                                    ld          h,(hl)
  85+ E000 ~                                    ld          l,a                         ; now hl = address of ship hull data
  86+ E000 ~                                    ld          de,UBnkHullCopy             ; Universe bank
  87+ E000 ~                                    ld          bc,ShipDataLength
  88+ E000 ~                                    ldir
  89+ E000 ~                                    call        CopyVertsToUniv
  90+ E000 ~                                    call        CopyEdgesToUniv
  91+ E000 ~                                    call        CopyNormsToUniv
  92+ E000 ~                                    ret
  93+ E000                                      ENDM
  94+ E000
  95+ E000              MCopyBodyToUniverse:    MACRO       copyRoutine
  96+ E000 ~                                    ld          a,13
  97+ E000 ~                                    call        copyRoutine
  98+ E000 ~                                    ret
  99+ E000                                      ENDM
 100+ E000
 101+ E000
 102+ E000              MCopyShipIdToUniverse:  MACRO
 103+ E000 ~                                    call        GetShipModelId
 104+ E000 ~                                    MMUSelectShipBankA
 105+ E000 ~                                    ld          a,b
 106+ E000 ~                                    jp          CopyShipToUniverse
 107+ E000                                      ENDM
# file closed: ./Data/ShipModelMacros.asm
 714  E000                  INCLUDE "./Data/ShipBank1Label.asm"
# file opened: ./Data/ShipBank1Label.asm
   1+ E000 53 68 69 70  ShipBank1Label:         DB  "ShipBank1      "
   1+ E004 42 61 6E 6B
   1+ E008 31 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank1Label.asm
 715  E00F              GetShipBankId:
 716  E00F              GetShipBank1Id:        MGetShipBankId ShipBankTable
 716  E00F 06 00       >                        ld      b,0
 716  E011 4F          >                        ld      c,a                                 ; c= original ship id
 716  E012 CB 3F       >.ShiftLoop:             srl     a
 716  E014 CB 3F       >                        srl     a
 716  E016 CB 3F       >                        srl     a
 716  E018 CB 3F       >                        srl     a                                   ; divide by 16
 716  E01A 47          >                        ld      b,a                                 ; b = bank nbr
 716  E01B 79          >                        ld      a,c
 716  E01C 50          >                        ld      d,b
 716  E01D 1E 10       >                        ld      e,16
 716  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
 716  E021 93          >                        sub     e                                   ; a= actual model id now
 716  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
 716  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
 716  E024 7A          >                        ld      a,d                                 ; a = bank number
 716  E025             >;.. Now b = bank and a = adjusted ship nbr
 716  E025 21 62 E0    >                        ld      hl,ShipBankTable                        ; a= bank index
 716  E028 ED 31       >                        add     hl,a
 716  E02A ED 31       >                        add     hl,a
 716  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
 716  E02D             >                        ClearCarryFlag
 716  E02D B7          >                        or a
 716  E02E C9          >                        ret
 717  E02F              CopyVertsToUniv:
 718  E02F              CopyVertsToUniv1:       McopyVertsToUniverse
 718  E02F 2A 2F C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
 718  E032 11 35 C3    >                        ld          de,UBnkHullVerticies
 718  E035 06 00       >                        ld          b,0
 718  E037 3A 23 C3    >                        ld			a,(VertexCtX6Addr)
 718  E03A 4F          >                        ld          c,a
 718  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 718  E03C CD C9 7C    >                        call        memcopy_dma
 718  E03F C9          >                        ret
 719  E040              CopyEdgesToUniv:
 720  E040              CopyEdgesToUniv1:       McopyEdgesToUniverse
 720  E040 2A 1D C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
 720  E043 11 25 C4    >                        ld          de,UBnkHullEdges
 720  E046 06 00       >                        ld          b,0
 720  E048 3A 1F C3    >                        ld			a,(LineX4Addr)
 720  E04B 4F          >                        ld          c,a
 720  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 720  E04D CD C9 7C    >                        call        memcopy_dma
 720  E050 C9          >                        ret
 721  E051              CopyNormsToUniv:
 722  E051              CopyNormsToUniv1:       McopyNormsToUniverse
 722  E051 2A 2B C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 722  E054 11 ED C4    >                        ld          de,UBnkHullNormals
 722  E057 06 00       >                        ld          b,0
 722  E059 3A 27 C3    >                        ld          a,(FaceCtX4Addr)
 722  E05C 4F          >                        ld          c,a
 722  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 722  E05E CD C9 7C    >                        call        memcopy_dma
 722  E061 C9          >                        ret
 723  E062              ShipBankTable:
 724  E062              ShipBankTable1:         MShipBankTable
 724  E062 3B 00       >                        DW      BankShipModels1
 724  E064 43 00       >                        DW      BankShipModels2
 724  E066 44 00       >                        DW      BankShipModels3
 724  E068 45 00       >                        DW      BankShipModels4
 725  E06A              CopyShipToUniverse:
 726  E06A              CopyShipToUniverse1     MCopyShipToUniverse     BankShipModels1
 726  E06A 21 31 C0    >                        ld          hl,UBnkShipModelBank
 726  E06D 36 3B       >                        ld          (hl),BankShipModels1
 726  E06F 32 32 C0    >                        ld          (UBnKShipModelNbr),a
 726  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
 726  E075 ED 31       >                        add         hl,a
 726  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 726  E079 4E          >                        ld          c,(hl)
 726  E07A 23          >                        inc         hl
 726  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
 726  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
 726  E07F ED 31       >                        add         hl,a
 726  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
 726  E083 7E          >                        ld          a,(hl)
 726  E084 23          >                        inc         hl
 726  E085 66          >                        ld          h,(hl)
 726  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
 726  E087 11 1A C3    >                        ld          de,UBnkHullCopy             ; Universe bank
 726  E08A 01 1B 00    >                        ld          bc,ShipDataLength
 726  E08D ED B0       >                        ldir
 726  E08F CD 2F E0    >                        call        CopyVertsToUniv
 726  E092 CD 40 E0    >                        call        CopyEdgesToUniv
 726  E095 CD 51 E0    >                        call        CopyNormsToUniv
 726  E098 C9          >                        ret
 727  E099              CopyBodyToUniverse:
 728  E099              CopyBodyToUniverse1:    MCopyBodyToUniverse     CopyShipToUniverse1
 728  E099 3E 0D       >                        ld          a,13
 728  E09B CD 6A E0    >                        call        CopyShipToUniverse1
 728  E09E C9          >                        ret
 729  E09F                  INCLUDE "./Data/ShipModelMetaData1.asm"
# file opened: ./Data/ShipModelMetaData1.asm
   1+ E09F              ShipModelTable:
   2+ E09F 3F E1        ShipModelTable1:         DW Adder                                   ;00 $00
   3+ E0A1 76 E2                                 DW Anaconda                                ;01 $01
   4+ E0A3 7F E3                                 DW Asp_Mk_2                                ;02 $02
   5+ E0A5 AC E4                                 DW Boa                                     ;03 $03
   6+ E0A7 A5 E5                                 DW CargoType5                              ;04 $04
   7+ E0A9 54 E6                                 DW Boulder                                 ;05 $05
   8+ E0AB FD E6                                 DW Asteroid                                ;06 $06
   9+ E0AD DA E7                                 DW Bushmaster                              ;07 $07
  10+ E0AF AD E8                                 DW Chameleon                               ;08 $08
  11+ E0B1 DC E9                                 DW CobraMk3                                ;09 $09
  12+ E0B3 6B EB                                 DW Cobra_Mk_1                              ;10 $0A
  13+ E0B5 38 EC                                 DW Cobra_Mk_3_P                            ;11 $0B
  14+ E0B7 C7 ED                                 DW Constrictor                             ;12 $0C
  15+ E0B9 D0 EE                                 DW Coriolis                                ;13 $0D
  16+ E0BB F3 EF                                 DW Cougar                                  ;14 $0E
  17+ E0BD FC F0                                 DW Dodo                                    ;15 $0F
  18+ E0BF              ShipVertexTable:
  19+ E0BF 5A E1        ShipVertexTable1:        DW AdderVertices                           ;00 $00
  20+ E0C1 91 E2                                 DW AnacondaVertices                        ;01 $01
  21+ E0C3 9A E3                                 DW Asp_Mk_2Vertices                        ;02 $02
  22+ E0C5 C7 E4                                 DW BoaVertices                             ;03 $03
  23+ E0C7 C0 E5                                 DW CargoType5Vertices                      ;04 $04
  24+ E0C9 6F E6                                 DW BoulderVertices                         ;05 $05
  25+ E0CB 18 E7                                 DW AsteroidVertices                        ;06 $06
  26+ E0CD F5 E7                                 DW BushmasterVertices                      ;07 $07
  27+ E0CF C8 E8                                 DW ChameleonVertices                       ;08 $08
  28+ E0D1 F7 E9                                 DW CobraMk3Vertices                        ;09 $09
  29+ E0D3 86 EB                                 DW Cobra_Mk_1Vertices                      ;10 $0A
  30+ E0D5 53 EC                                 DW Cobra_Mk_3_PVertices                    ;11 $0B
  31+ E0D7 E2 ED                                 DW ConstrictorVertices                     ;12 $0C
  32+ E0D9 EB EE                                 DW CoriolisVertices                        ;13 $0D
  33+ E0DB 0E F0                                 DW CougarVertices                          ;14 $0E
  34+ E0DD 17 F1                                 DW DodoVertices                            ;15 $0F
  35+ E0DF              ShipEdgeTable:
  36+ E0DF C6 E1        ShipEdgeTable1:          DW AdderEdges                              ;00 $00
  37+ E0E1 EB E2                                 DW AnacondaEdges                           ;01 $01
  38+ E0E3 0C E4                                 DW Asp_Mk_2Edges                           ;02 $02
  39+ E0E5 15 E5                                 DW BoaEdges                                ;03 $03
  40+ E0E7 FC E5                                 DW CargoType5Edges                         ;04 $04
  41+ E0E9 99 E6                                 DW BoulderEdges                            ;05 $05
  42+ E0EB 4E E7                                 DW AsteroidEdges                           ;06 $06
  43+ E0ED 3D E8                                 DW BushmasterEdges                         ;07 $07
  44+ E0EF 34 E9                                 DW ChameleonEdges                          ;08 $08
  45+ E0F1 9F EA                                 DW CobraMk3Edges                           ;09 $09
  46+ E0F3 C8 EB                                 DW Cobra_Mk_1Edges                         ;10 $0A
  47+ E0F5 FB EC                                 DW Cobra_Mk_3_PEdges                       ;11 $0B
  48+ E0F7 48 EE                                 DW ConstrictorEdges                        ;12 $0C
  49+ E0F9 4B EF                                 DW CoriolisEdges                           ;13 $0D
  50+ E0FB 80 F0                                 DW CougarEdges                             ;14 $0E
  51+ E0FD A7 F1                                 DW DodoEdges                               ;15 $0F
  52+ E0FF              ShipNormalTable:
  53+ E0FF 3A E2        ShipNormalTable1:        DW AdderNormals                            ;00 $00
  54+ E101 4F E3                                 DW AnacondaNormals                         ;01 $01
  55+ E103 7C E4                                 DW Asp_Mk_2Normals                         ;02 $02
  56+ E105 75 E5                                 DW BoaNormals                              ;03 $03
  57+ E107 38 E6                                 DW CargoType5Normals                       ;04 $04
  58+ E109 D5 E6                                 DW BoulderNormals                          ;05 $05
  59+ E10B A2 E7                                 DW AsteroidNormals                         ;06 $06
  60+ E10D 89 E8                                 DW BushmasterNormals                       ;07 $07
  61+ E10F A8 E9                                 DW ChameleonNormals                        ;08 $08
  62+ E111 37 EB                                 DW CobraMk3Normals                         ;09 $09
  63+ E113 10 EC                                 DW Cobra_Mk_1Normals                       ;10 $0A
  64+ E115 93 ED                                 DW Cobra_Mk_3_PNormals                     ;11 $0B
  65+ E117 A8 EE                                 DW ConstrictorNormals                      ;12 $0C
  66+ E119 BB EF                                 DW CoriolisNormals                         ;13 $0D
  67+ E11B E4 F0                                 DW CougarNormals                           ;14 $0E
  68+ E11D 2F F2                                 DW DodoNormals                             ;15 $0F
  69+ E11F              ShipModelSizeTable:
  70+ E11F 37 01        ShipModelSizeTable1:     DW AdderLen                                ;00 $00
  71+ E121 09 01                                 DW AnacondaLen                             ;01 $01
  72+ E123 2D 01                                 DW Asp_Mk_2Len                             ;02 $02
  73+ E125 F9 00                                 DW BoaLen                                  ;03 $03
  74+ E127 AF 00                                 DW CargoType5Len                           ;04 $04
  75+ E129 A9 00                                 DW BoulderLen                              ;05 $05
  76+ E12B DD 00                                 DW AsteroidLen                             ;06 $06
  77+ E12D D3 00                                 DW BushmasterLen                           ;07 $07
  78+ E12F 2F 01                                 DW ChameleonLen                            ;08 $08
  79+ E131 8F 01                                 DW CobraMk3Len                             ;09 $09
  80+ E133 CD 00                                 DW Cobra_Mk_1Len                           ;10 $0A
  81+ E135 8F 01                                 DW Cobra_Mk_3_PLen                         ;11 $0B
  82+ E137 09 01                                 DW ConstrictorLen                          ;12 $0C
  83+ E139 23 01                                 DW CoriolisLen                             ;13 $0D
  84+ E13B 09 01                                 DW CougarLen                               ;14 $0E
  85+ E13D 63 01                                 DW DodoLen                                 ;15 $0F
  86+ E13F
  87+ E13F                                      include "Data/ships/Adder.asm"
# file opened: ./Data/ships/Adder.asm
   1++E13F 00           Adder:	                DB $00
   2++E140 C4 09                                DW $09C4
   3++E142 C6 E1                                DW AdderEdges
   4++E144 74                                   DB AdderEdgesSize
   5++E145 00 16                                DB $00, $16
   6++E147 12                                   DB AdderVertSize / 6
   7++E148 6C                                   DB AdderVertSize
   8++E149 1D                                   DB AdderEdgesCnt
   9++E14A 00 28                                DB $00, $28
  10++E14C 3C                                   DB AdderNormalsSize
  11++E14D 17 48 18                             DB $17, $48, $18
  12++E150 3A E2                                DW AdderNormals
  13++E152 02 21                                DB $02, $21
  14++E154 5A E1                                DW AdderVertices
  15++E156 00 00                                DB 0,0                      ; Type and Tactics
  16++E158 01                                   DB ShipCanAnger
  17++E159 80                                   DB $80                      ; chance of ECM module
  18++E15A 12 00 28 9F  AdderVertices:	        DB $12, $00, $28, $9F, $01, $BC     ;01
  18++E15E 01 BC
  19++E160 12 00 28 1F                          DB $12, $00, $28, $1F, $01, $23     ;02
  19++E164 01 23
  20++E166 1E 00 18 3F                          DB $1E, $00, $18, $3F, $23, $45     ;03
  20++E16A 23 45
  21++E16C 1E 00 28 3F                          DB $1E, $00, $28, $3F, $45, $66     ;04
  21++E170 45 66
  22++E172 12 07 28 7F                          DB $12, $07, $28, $7F, $56, $7E     ;05
  22++E176 56 7E
  23++E178 12 07 28 FF                          DB $12, $07, $28, $FF, $78, $AE     ;06
  23++E17C 78 AE
  24++E17E 1E 00 28 BF                          DB $1E, $00, $28, $BF, $89, $AA     ;07
  24++E182 89 AA
  25++E184 1E 00 18 BF                          DB $1E, $00, $18, $BF, $9A, $BC     ;08
  25++E188 9A BC
  26++E18A 12 07 28 BF                          DB $12, $07, $28, $BF, $78, $9D     ;09
  26++E18E 78 9D
  27++E190 12 07 28 3F                          DB $12, $07, $28, $3F, $46, $7D     ;10
  27++E194 46 7D
  28++E196 12 07 0D 9F                          DB $12, $07, $0D, $9F, $09, $BD     ;11
  28++E19A 09 BD
  29++E19C 12 07 0D 1F                          DB $12, $07, $0D, $1F, $02, $4D     ;12
  29++E1A0 02 4D
  30++E1A2 12 07 0D DF                          DB $12, $07, $0D, $DF, $1A, $CE     ;13
  30++E1A6 1A CE
  31++E1A8 12 07 0D 5F                          DB $12, $07, $0D, $5F, $13, $5E     ;14
  31++E1AC 13 5E
  32++E1AE 0B 03 1D 85                          DB $0B, $03, $1D, $85, $00, $00     ;15
  32++E1B2 00 00
  33++E1B4 0B 03 1D 05                          DB $0B, $03, $1D, $05, $00, $00     ;16
  33++E1B8 00 00
  34++E1BA 0B 04 18 04                          DB $0B, $04, $18, $04, $00, $00     ;17
  34++E1BE 00 00
  35++E1C0 0B 04 18 84                          DB $0B, $04, $18, $84, $00, $00     ;18
  35++E1C4 00 00
  36++E1C6              AdderVertSize:          equ $ - AdderVertices
  37++E1C6 1F 01 00 04  AdderEdges:	            DB $1F, $01, $00, $04               ;01
  38++E1CA 07 23 04 08                          DB $07, $23, $04, $08               ;02
  39++E1CE 1F 45 08 0C                          DB $1F, $45, $08, $0C               ;03
  40++E1D2 1F 56 0C 10                          DB $1F, $56, $0C, $10               ;04
  41++E1D6 1F 7E 10 14                          DB $1F, $7E, $10, $14               ;05
  42++E1DA 1F 8A 14 18                          DB $1F, $8A, $14, $18               ;06
  43++E1DE 1F 9A 18 1C                          DB $1F, $9A, $18, $1C               ;07
  44++E1E2 07 BC 1C 00                          DB $07, $BC, $1C, $00               ;08
  45++E1E6 1F 46 0C 24                          DB $1F, $46, $0C, $24               ;09
  46++E1EA 1F 7D 24 20                          DB $1F, $7D, $24, $20               ;10
  47++E1EE 1F 89 20 18                          DB $1F, $89, $20, $18               ;11
  48++E1F2 1F 0B 00 28                          DB $1F, $0B, $00, $28               ;12
  49++E1F6 1F 9B 1C 28                          DB $1F, $9B, $1C, $28               ;13
  50++E1FA 1F 02 04 2C                          DB $1F, $02, $04, $2C               ;14
  51++E1FE 1F 24 08 2C                          DB $1F, $24, $08, $2C               ;15
  52++E202 1F 1C 00 30                          DB $1F, $1C, $00, $30               ;16
  53++E206 1F AC 1C 30                          DB $1F, $AC, $1C, $30               ;17
  54++E20A 1F 13 04 34                          DB $1F, $13, $04, $34               ;18
  55++E20E 1F 35 08 34                          DB $1F, $35, $08, $34               ;19
  56++E212 1F 0D 28 2C                          DB $1F, $0D, $28, $2C               ;20
  57++E216 1F 1E 30 34                          DB $1F, $1E, $30, $34               ;21
  58++E21A 1F 9D 20 28                          DB $1F, $9D, $20, $28               ;22
  59++E21E 1F 4D 24 2C                          DB $1F, $4D, $24, $2C               ;23
  60++E222 1F AE 14 30                          DB $1F, $AE, $14, $30               ;24
  61++E226 1F 5E 10 34                          DB $1F, $5E, $10, $34               ;25
  62++E22A 05 00 38 3C                          DB $05, $00, $38, $3C               ;26
  63++E22E 03 00 3C 40                          DB $03, $00, $3C, $40               ;27
  64++E232 04 00 40 44                          DB $04, $00, $40, $44               ;28
  65++E236 03 00 44 38                          DB $03, $00, $44, $38               ;29
  66++E23A              AdderEdgesSize:         equ $ - AdderEdges
  67++E23A              AdderEdgesCnt:          equ AdderEdgesSize/4
  68++E23A 1F 00 27 0A  AdderNormals:	        DB $1F, $00, $27, $0A               ;01
  69++E23E 5F 00 27 0A                          DB $5F, $00, $27, $0A               ;02
  70++E242 1F 45 32 0D                          DB $1F, $45, $32, $0D               ;03
  71++E246 5F 45 32 0D                          DB $5F, $45, $32, $0D               ;04
  72++E24A 1F 1E 34 00                          DB $1F, $1E, $34, $00               ;05
  73++E24E 5F 1E 34 00                          DB $5F, $1E, $34, $00               ;06
  74++E252 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;07
  75++E256 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;08
  76++E25A 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;09
  77++E25E 9F 1E 34 00                          DB $9F, $1E, $34, $00               ;10
  78++E262 DF 1E 34 00                          DB $DF, $1E, $34, $00               ;11
  79++E266 9F 45 32 0D                          DB $9F, $45, $32, $0D               ;12
  80++E26A DF 45 32 0D                          DB $DF, $45, $32, $0D               ;13
  81++E26E 1F 00 1C 00                          DB $1F, $00, $1C, $00               ;14
  82++E272 5F 00 1C 00                          DB $5F, $00, $1C, $00               ;15
  83++E276
  84++E276              AdderNormalsSize:       equ $ - AdderNormals
  85++E276              AdderLen:                equ $ - Adder
  86++E276
  87++E276
  88++E276
  89++E276
  90++E276
  91++E276
  92++E276
  93++E276
  94++E276
  95++E276
  96++E276
# file closed: ./Data/ships/Adder.asm
  88+ E276                                      include "Data/ships/Anaconda.asm"
# file opened: ./Data/ships/Anaconda.asm
   1++E276 07           Anaconda:	            DB $07
   2++E277 10 27                                DW $2710
   3++E279 EB E2                                DW AnacondaEdges
   4++E27B 64                                   DB AnacondaEdgesSize
   5++E27C 30 2E                                DB $30, $2E
   6++E27E 0F                                   DB AnacondaVertSize / 6
   7++E27F 5A                                   DB AnacondaVertSize
   8++E280 19                                   DB AnacondaEdgesCnt
   9++E281 00 00                                DB $00, $00
  10++E283 30                                   DB AnacondaNormalsSize
  11++E284 24 FC 0E                             DB $24, $FC, $0E
  12++E287 4F E3                                DW AnacondaNormals
  13++E289 01 3F                                DB $01, $3F
  14++E28B 91 E2                                DW AnacondaVertices
  15++E28D 00 00                                DB 0,0                      ; Type and Tactics
  16++E28F 01                                   DB ShipCanAnger
  17++E290 D0                                   DB $D0                      ; chance of ECM module
  18++E291 00 07 3A 3E  AnacondaVertices:	    DB $00, $07, $3A, $3E, $01, $55 ;01
  18++E295 01 55
  19++E297 2B 0D 25 FE                          DB $2B, $0D, $25, $FE, $01, $22 ;02
  19++E29B 01 22
  20++E29D 1A 2F 03 FE                          DB $1A, $2F, $03, $FE, $02, $33 ;03
  20++E2A1 02 33
  21++E2A3 1A 2F 03 7E                          DB $1A, $2F, $03, $7E, $03, $44 ;04
  21++E2A7 03 44
  22++E2A9 2B 0D 25 7E                          DB $2B, $0D, $25, $7E, $04, $55 ;05
  22++E2AD 04 55
  23++E2AF 00 30 31 3E                          DB $00, $30, $31, $3E, $15, $66 ;06
  23++E2B3 15 66
  24++E2B5 45 0F 0F BE                          DB $45, $0F, $0F, $BE, $12, $77 ;07
  24++E2B9 12 77
  25++E2BB 2B 27 28 DF                          DB $2B, $27, $28, $DF, $23, $88 ;08
  25++E2BF 23 88
  26++E2C1 2B 27 28 5F                          DB $2B, $27, $28, $5F, $34, $99 ;09
  26++E2C5 34 99
  27++E2C7 45 0F 0F 3E                          DB $45, $0F, $0F, $3E, $45, $AA ;10
  27++E2CB 45 AA
  28++E2CD 2B 35 17 BF                          DB $2B, $35, $17, $BF, $FF, $FF ;11
  28++E2D1 FF FF
  29++E2D3 45 01 20 DF                          DB $45, $01, $20, $DF, $27, $88 ;12
  29++E2D7 27 88
  30++E2D9 00 00 FE 1F                          DB $00, $00, $FE, $1F, $FF, $FF ;13
  30++E2DD FF FF
  31++E2DF 45 01 20 5F                          DB $45, $01, $20, $5F, $49, $AA ;14
  31++E2E3 49 AA
  32++E2E5 2B 35 17 3F                          DB $2B, $35, $17, $3F, $FF, $FF ;15
  32++E2E9 FF FF
  33++E2EB              AnacondaVertSize:       equ $ - AnacondaVertices
  34++E2EB 1E 01 00 04  AnacondaEdges:	        DB $1E, $01, $00, $04           ;01
  35++E2EF 1E 02 04 08                          DB $1E, $02, $04, $08           ;02
  36++E2F3 1E 03 08 0C                          DB $1E, $03, $08, $0C           ;03
  37++E2F7 1E 04 0C 10                          DB $1E, $04, $0C, $10           ;04
  38++E2FB 1E 05 00 10                          DB $1E, $05, $00, $10           ;05
  39++E2FF 1D 15 00 14                          DB $1D, $15, $00, $14           ;06
  40++E303 1D 12 04 18                          DB $1D, $12, $04, $18           ;07
  41++E307 1D 23 08 1C                          DB $1D, $23, $08, $1C           ;08
  42++E30B 1D 34 0C 20                          DB $1D, $34, $0C, $20           ;09
  43++E30F 1D 45 10 24                          DB $1D, $45, $10, $24           ;10
  44++E313 1E 16 14 28                          DB $1E, $16, $14, $28           ;11
  45++E317 1E 17 18 28                          DB $1E, $17, $18, $28           ;12
  46++E31B 1E 27 18 2C                          DB $1E, $27, $18, $2C           ;13
  47++E31F 1E 28 1C 2C                          DB $1E, $28, $1C, $2C           ;14
  48++E323 1F 38 1C 30                          DB $1F, $38, $1C, $30           ;15
  49++E327 1F 39 20 30                          DB $1F, $39, $20, $30           ;16
  50++E32B 1E 49 20 34                          DB $1E, $49, $20, $34           ;17
  51++E32F 1E 4A 24 34                          DB $1E, $4A, $24, $34           ;18
  52++E333 1E 5A 24 38                          DB $1E, $5A, $24, $38
  53++E337 1E 56 14 38                          DB $1E, $56, $14, $38
  54++E33B 1E 6B 28 38                          DB $1E, $6B, $28, $38
  55++E33F 1F 7B 28 30                          DB $1F, $7B, $28, $30
  56++E343 1F 78 2C 30                          DB $1F, $78, $2C, $30
  57++E347 1F 9A 30 34                          DB $1F, $9A, $30, $34
  58++E34B 1F AB 30 38                          DB $1F, $AB, $30, $38
  59++E34F              AnacondaEdgesSize:      equ $ - AnacondaEdges
  60++E34F              AnacondaEdgesCnt:       equ AnacondaEdgesSize/4
  61++E34F 7E 00 33 31  AnacondaNormals:	    DB $7E, $00, $33, $31           ;01
  62++E353 BE 33 12 57                          DB $BE, $33, $12, $57           ;02
  63++E357 FE 4D 39 13                          DB $FE, $4D, $39, $13           ;03
  64++E35B 5F 00 5A 10                          DB $5F, $00, $5A, $10           ;04
  65++E35F 7E 4D 39 13                          DB $7E, $4D, $39, $13           ;05
  66++E363 3E 33 12 57                          DB $3E, $33, $12, $57           ;06
  67++E367 3E 00 6F 14                          DB $3E, $00, $6F, $14           ;07
  68++E36B 9F 61 48 18                          DB $9F, $61, $48, $18           ;08
  69++E36F DF 6C 44 22                          DB $DF, $6C, $44, $22           ;09
  70++E373 5F 6C 44 22                          DB $5F, $6C, $44, $22           ;10
  71++E377 1F 61 48 18                          DB $1F, $61, $48, $18           ;11
  72++E37B 1F 00 5E 12                          DB $1F, $00, $5E, $12           ;12
  73++E37F              AnacondaNormalsSize:    equ $ - AnacondaNormals
  74++E37F              AnacondaLen:            equ $ - Anaconda
  75++E37F
  76++E37F
  77++E37F
  78++E37F
# file closed: ./Data/ships/Anaconda.asm
  89+ E37F                                      include "Data/ships/Asp_Mk_2.asm"
# file opened: ./Data/ships/Asp_Mk_2.asm
   1++E37F 00           Asp_Mk_2:	            DB $00
   2++E380 10 0E                                DW $0E10
   3++E382 0C E4                                DW Asp_Mk_2Edges
   4++E384 70                                   DB Asp_Mk_2EdgesSize
   5++E385 20 1A                                DB $20, $1A
   6++E387 13                                   DB Asp_Mk_2VertSize /6
   7++E388 72                                   DB Asp_Mk_2VertSize
   8++E389 1C                                   DB Asp_Mk_2EdgesCnt
   9++E38A 00 C8                                DB $00, $C8
  10++E38C 30                                   DB Asp_Mk_2NormalsSize
  11++E38D 28 96 28                             DB $28, $96, $28
  12++E390 7C E4                                DW Asp_Mk_2Normals
  13++E392 01 29                                DB $01, $29
  14++E394 9A E3                                DW Asp_Mk_2Vertices
  15++E396 00 00                                DB 0,0                      ; Type and Tactics
  16++E398 01                                   DB ShipCanAnger
  17++E399 80                                   DB $80                      ; chance of ECM module
  18++E39A 00 12 00 56  Asp_Mk_2Vertices:	    DB $00, $12, $00, $56, $01, $22 ;01
  18++E39E 01 22
  19++E3A0 00 09 2D 7F                          DB $00, $09, $2D, $7F, $12, $BB ;02
  19++E3A4 12 BB
  20++E3A6 2B 00 2D 3F                          DB $2B, $00, $2D, $3F, $16, $BB ;03
  20++E3AA 16 BB
  21++E3AC 45 03 00 5F                          DB $45, $03, $00, $5F, $16, $79 ;04
  21++E3B0 16 79
  22++E3B2 2B 0E 1C 5F                          DB $2B, $0E, $1C, $5F, $01, $77 ;05
  22++E3B6 01 77
  23++E3B8 2B 00 2D BF                          DB $2B, $00, $2D, $BF, $25, $BB ;06
  23++E3BC 25 BB
  24++E3BE 45 03 00 DF                          DB $45, $03, $00, $DF, $25, $8A ;07
  24++E3C2 25 8A
  25++E3C4 2B 0E 1C DF                          DB $2B, $0E, $1C, $DF, $02, $88 ;08
  25++E3C8 02 88
  26++E3CA 1A 07 49 5F                          DB $1A, $07, $49, $5F, $04, $79 ;09
  26++E3CE 04 79
  27++E3D0 1A 07 49 DF                          DB $1A, $07, $49, $DF, $04, $8A ;10
  27++E3D4 04 8A
  28++E3D6 2B 0E 1C 1F                          DB $2B, $0E, $1C, $1F, $34, $69 ;11
  28++E3DA 34 69
  29++E3DC 2B 0E 1C 9F                          DB $2B, $0E, $1C, $9F, $34, $5A ;12
  29++E3E0 34 5A
  30++E3E2 00 09 2D 3F                          DB $00, $09, $2D, $3F, $35, $6B ;13
  30++E3E6 35 6B
  31++E3E8 11 00 2D AA                          DB $11, $00, $2D, $AA, $BB, $BB ;14
  31++E3EC BB BB
  32++E3EE 11 00 2D 29                          DB $11, $00, $2D, $29, $BB, $BB ;15
  32++E3F2 BB BB
  33++E3F4 00 04 2D 6A                          DB $00, $04, $2D, $6A, $BB, $BB ;16
  33++E3F8 BB BB
  34++E3FA 00 04 2D 28                          DB $00, $04, $2D, $28, $BB, $BB ;17
  34++E3FE BB BB
  35++E400 00 07 49 4A                          DB $00, $07, $49, $4A, $04, $04 ;18
  35++E404 04 04
  36++E406 00 07 53 4A                          DB $00, $07, $53, $4A, $04, $04 ;19
  36++E40A 04 04
  37++E40C              Asp_Mk_2VertSize:       equ $ - Asp_Mk_2Vertices
  38++E40C 16 12 00 04  Asp_Mk_2Edges:	        DB $16, $12, $00, $04           ;01
  39++E410 16 01 00 10                          DB $16, $01, $00, $10           ;02
  40++E414 16 02 00 1C                          DB $16, $02, $00, $1C           ;03
  41++E418 1F 1B 04 08                          DB $1F, $1B, $04, $08           ;04
  42++E41C 1F 16 08 0C                          DB $1F, $16, $08, $0C           ;05
  43++E420 10 79 0C 20                          DB $10, $79, $0C, $20           ;06
  44++E424 1F 04 20 24                          DB $1F, $04, $20, $24           ;07
  45++E428 10 8A 18 24                          DB $10, $8A, $18, $24           ;08
  46++E42C 1F 25 14 18                          DB $1F, $25, $14, $18           ;09
  47++E430 1F 2B 04 14                          DB $1F, $2B, $04, $14           ;10
  48++E434 1F 17 0C 10                          DB $1F, $17, $0C, $10           ;11
  49++E438 1F 07 10 20                          DB $1F, $07, $10, $20           ;12
  50++E43C 1F 28 18 1C                          DB $1F, $28, $18, $1C           ;13
  51++E440 1F 08 1C 24                          DB $1F, $08, $1C, $24           ;14
  52++E444 1F 6B 08 30                          DB $1F, $6B, $08, $30           ;15
  53++E448 1F 5B 14 30                          DB $1F, $5B, $14, $30           ;16
  54++E44C 16 36 28 30                          DB $16, $36, $28, $30           ;17
  55++E450 16 35 2C 30                          DB $16, $35, $2C, $30           ;18
  56++E454 16 34 28 2C                          DB $16, $34, $28, $2C
  57++E458 1F 5A 18 2C                          DB $1F, $5A, $18, $2C
  58++E45C 1F 4A 24 2C                          DB $1F, $4A, $24, $2C
  59++E460 1F 69 0C 28                          DB $1F, $69, $0C, $28
  60++E464 1F 49 20 28                          DB $1F, $49, $20, $28
  61++E468 0A BB 34 3C                          DB $0A, $BB, $34, $3C
  62++E46C 09 BB 3C 38                          DB $09, $BB, $3C, $38
  63++E470 08 BB 38 40                          DB $08, $BB, $38, $40
  64++E474 08 BB 40 34                          DB $08, $BB, $40, $34
  65++E478 0A 04 48 44                          DB $0A, $04, $48, $44
  66++E47C              Asp_Mk_2EdgesSize:      equ $ - Asp_Mk_2Edges
  67++E47C              Asp_Mk_2EdgesCnt:       equ Asp_Mk_2EdgesSize/4
  68++E47C 5F 00 23 05  Asp_Mk_2Normals:	    DB $5F, $00, $23, $05           ;01
  69++E480 7F 08 26 07                          DB $7F, $08, $26, $07           ;02
  70++E484 FF 08 26 07                          DB $FF, $08, $26, $07           ;03
  71++E488 36 00 18 01                          DB $36, $00, $18, $01           ;04
  72++E48C 1F 00 2B 13                          DB $1F, $00, $2B, $13           ;05
  73++E490 BF 06 1C 02                          DB $BF, $06, $1C, $02           ;06
  74++E494 3F 06 1C 02                          DB $3F, $06, $1C, $02           ;07
  75++E498 5F 3B 40 1F                          DB $5F, $3B, $40, $1F           ;08
  76++E49C DF 3B 40 1F                          DB $DF, $3B, $40, $1F           ;09
  77++E4A0 1F 50 2E 32                          DB $1F, $50, $2E, $32           ;10
  78++E4A4 9F 50 2E 32                          DB $9F, $50, $2E, $32           ;11
  79++E4A8 3F 00 00 5A                          DB $3F, $00, $00, $5A           ;12
  80++E4AC              Asp_Mk_2NormalsSize:    equ $ - Asp_Mk_2Normals
  81++E4AC              Asp_Mk_2Len:            equ $ - Asp_Mk_2
  82++E4AC
  83++E4AC
  84++E4AC
  85++E4AC
# file closed: ./Data/ships/Asp_Mk_2.asm
  90+ E4AC                                      include "Data/ships/Boa.asm"
# file opened: ./Data/ships/Boa.asm
   1++E4AC 05           Boa:	                DB $05
   2++E4AD 24 13                                DW $1324
   3++E4AF 15 E5                                DW BoaEdges
   4++E4B1 60                                   DB BoaEdgesSize
   5++E4B2 00 26                                DB $00, $26
   6++E4B4 0D                                   DB BoaVertSize /6
   7++E4B5 4E                                   DB BoaVertSize
   8++E4B6 18                                   DB BoaEdgesCnt
   9++E4B7 00 00                                DB $00, $00
  10++E4B9 30                                   DB BoaNormalsSize
  11++E4BA 28 FA 18                             DB $28, $FA, $18
  12++E4BD 75 E5                                DW BoaNormals
  13++E4BF 00 1C                                DB $00, $1C
  14++E4C1 C7 E4                                DW BoaVertices
  15++E4C3 00 00                                DB 0,0                      ; Type and Tactics
  16++E4C5 01                                   DB ShipCanAnger
  17++E4C6 A0                                   DB $A0                      ; chance of ECM module
  18++E4C7 00 00 5D 1F  BoaVertices:	        DB $00, $00, $5D, $1F, $FF, $FF ; 01
  18++E4CB FF FF
  19++E4CD 00 28 57 38                          DB $00, $28, $57, $38, $02, $33 ; 02
  19++E4D1 02 33
  20++E4D3 26 19 63 78                          DB $26, $19, $63, $78, $01, $44 ; 03
  20++E4D7 01 44
  21++E4D9 26 19 63 F8                          DB $26, $19, $63, $F8, $12, $55 ; 04
  21++E4DD 12 55
  22++E4DF 26 28 3B BF                          DB $26, $28, $3B, $BF, $23, $69 ; 05
  22++E4E3 23 69
  23++E4E5 26 28 3B 3F                          DB $26, $28, $3B, $3F, $03, $6B ; 06
  23++E4E9 03 6B
  24++E4EB 3E 00 43 3F                          DB $3E, $00, $43, $3F, $04, $8B ; 07
  24++E4EF 04 8B
  25++E4F1 18 41 4F 7F                          DB $18, $41, $4F, $7F, $14, $8A ; 08
  25++E4F5 14 8A
  26++E4F7 18 41 4F FF                          DB $18, $41, $4F, $FF, $15, $7A ; 09
  26++E4FB 15 7A
  27++E4FD 3E 00 43 BF                          DB $3E, $00, $43, $BF, $25, $79 ; 10
  27++E501 25 79
  28++E503 00 07 6B 36                          DB $00, $07, $6B, $36, $02, $AA ; 11
  28++E507 02 AA
  29++E509 0D 09 6B 76                          DB $0D, $09, $6B, $76, $01, $AA ; 12
  29++E50D 01 AA
  30++E50F 0D 09 6B F6                          DB $0D, $09, $6B, $F6, $12, $CC ; 13
  30++E513 12 CC
  31++E515              BoaVertSize:            equ $ - BoaVertices
  32++E515 1F 6B 00 14  BoaEdges:	            DB $1F, $6B, $00, $14
  33++E519 1F 8A 00 1C                          DB $1F, $8A, $00, $1C
  34++E51D 1F 79 00 24                          DB $1F, $79, $00, $24
  35++E521 1D 69 00 10                          DB $1D, $69, $00, $10
  36++E525 1D 8B 00 18                          DB $1D, $8B, $00, $18
  37++E529 1D 7A 00 20                          DB $1D, $7A, $00, $20
  38++E52D 1F 36 10 14                          DB $1F, $36, $10, $14
  39++E531 1F 0B 14 18                          DB $1F, $0B, $14, $18
  40++E535 1F 48 18 1C                          DB $1F, $48, $18, $1C
  41++E539 1F 1A 1C 20                          DB $1F, $1A, $1C, $20
  42++E53D 1F 57 20 24                          DB $1F, $57, $20, $24
  43++E541 1F 29 10 24                          DB $1F, $29, $10, $24
  44++E545 18 23 04 10                          DB $18, $23, $04, $10
  45++E549 18 03 04 14                          DB $18, $03, $04, $14
  46++E54D 18 25 0C 24                          DB $18, $25, $0C, $24
  47++E551 18 15 0C 20                          DB $18, $15, $0C, $20
  48++E555 18 04 08 18                          DB $18, $04, $08, $18
  49++E559 18 14 08 1C                          DB $18, $14, $08, $1C
  50++E55D 16 02 04 28                          DB $16, $02, $04, $28
  51++E561 16 01 08 2C                          DB $16, $01, $08, $2C
  52++E565 16 12 0C 30                          DB $16, $12, $0C, $30
  53++E569 0E 0C 28 2C                          DB $0E, $0C, $28, $2C
  54++E56D 0E 1C 2C 30                          DB $0E, $1C, $2C, $30
  55++E571 0E 2C 30 28                          DB $0E, $2C, $30, $28
  56++E575              BoaEdgesSize:           equ $ - BoaEdges
  57++E575              BoaEdgesCnt:            equ BoaEdgesSize/4
  58++E575 3F 2B 25 3C  BoaNormals:	            DB $3F, $2B, $25, $3C
  59++E579 7F 00 2D 59                          DB $7F, $00, $2D, $59
  60++E57D BF 2B 25 3C                          DB $BF, $2B, $25, $3C
  61++E581 1F 00 28 00                          DB $1F, $00, $28, $00
  62++E585 7F 3E 20 14                          DB $7F, $3E, $20, $14
  63++E589 FF 3E 20 14                          DB $FF, $3E, $20, $14
  64++E58D 1F 00 17 06                          DB $1F, $00, $17, $06
  65++E591 DF 17 0F 09                          DB $DF, $17, $0F, $09
  66++E595 5F 17 0F 09                          DB $5F, $17, $0F, $09
  67++E599 9F 1A 0D 0A                          DB $9F, $1A, $0D, $0A
  68++E59D 5F 00 1F 0C                          DB $5F, $00, $1F, $0C
  69++E5A1 1F 1A 0D 0A                          DB $1F, $1A, $0D, $0A
  70++E5A5              BoaNormalsSize:         equ $ - BoaNormals
  71++E5A5              BoaLen:                 equ $ - Boa
  72++E5A5
# file closed: ./Data/ships/Boa.asm
  91+ E5A5
  92+ E5A5                                      include "Data/ships/CargoType5.asm"
# file opened: ./Data/ships/CargoType5.asm
   1++E5A5              ;	\ Transporter hull data header info 37 vertices  6*37  = &DE
   2++E5A5              ; Corrected pointers
   3++E5A5              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   4++E5A5              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   5++E5A5              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   6++E5A5              ;;;				 Example of cargo
   7++E5A5              ;;;
   8++E5A5              ;;;		Points (nodes, vetices)		6 bytes per vertex
   9++E5A5              ;;;     Byte 0 = X magnitide with origin at middle of ship
  10++E5A5              ;;;		Byte 1 = Y magnitide with origin at middle of ship
  11++E5A5              ;;;		Byte 2 = Z magnitide with origin at middle of ship
  12++E5A5              ;;;		Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
  13++E5A5              ;;;		Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  14++E5A5              ;;;		Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
  15++E5A5              ;;;		Edges
  16++E5A5              ;;;		Byte 0 = Edge visbility Distance if > XX4 distance then won't show
  17++E5A5              ;;;		Byte 1 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  18++E5A5              ;;;		Byte 2 = Byte offset to Point 1 (divide by 4 for index)
  19++E5A5              ;;;		Byte 3 = Byte offset to Point 2 (divide by 4 for index)
  20++E5A5              ;;;	  	Normals (Faces)
  21++E5A5              ;;;		Byte 0 = Sign Bits of Vertex 7=X 6=Y 5 = Z, bits 4 to 0 are distance for always visible
  22++E5A5              ;;;		Byte 1 = X Lo
  23++E5A5              ;;;		Byte 2 = Y Lo
  24++E5A5              ;;;		Byte 3 = Z Lo
  25++E5A5
  26++E5A5 00           CargoType5              DB $00
  27++E5A6 90 01                                DW $0190
  28++E5A8 FC E5                                DW CargoType5Edges
  29++E5AA 3C                                   DB CargoType5EdgesSize
  30++E5AB 00 12                                DB $00,$12
  31++E5AD 0A                                   DB CargoType5VertSize /6
  32++E5AE 3C                                   DB CargoType5VertSize
  33++E5AF 0F                                   DB CargoType5EdgesCnt
  34++E5B0 00 00                                DB $00,$00
  35++E5B2 1C                                   DB CargoType5NormalsSize
  36++E5B3 0C 11 0F                             DB $0C,$11,$0F
  37++E5B6 38 E6                                DW CargoType5Normals
  38++E5B8 02 00                                DB $02,$00
  39++E5BA C0 E5                                DW CargoType5Vertices
  40++E5BC 04                                   DB ShipTypeScoopable        ; Type
  41++E5BD 00                                   DB 0                        ; Tactics
  42++E5BE 00                                   DB 0
  43++E5BF 00                                   DB $0                      ; chance of ECM module
  44++E5C0              ; So cargo is               Edge offset $0050  Face Offset $008C, Verices will alwys be +20, LineMax 31 -> 4  EdgeCnt 15  VertexCnt 60 -> 10     FaceCn 28 -> 7
  45++E5C0 18 10 00 1F  CargoType5Vertices		DB $18,$10,$00,$1F,$10,$55 	; 60 bytes in total for data
  45++E5C4 10 55
  46++E5C6 18 05 0F 1F                          DB $18,$05,$0F,$1F,$10,$22
  46++E5CA 10 22
  47++E5CC 18 0D 09 5F                          DB $18,$0D,$09,$5F,$20,$33
  47++E5D0 20 33
  48++E5D2 18 0D 09 7F                          DB $18,$0D,$09,$7F,$30,$44
  48++E5D6 30 44
  49++E5D8 18 05 0F 3F                          DB $18,$05,$0F,$3F,$40,$55   ; end of left pentagon
  49++E5DC 40 55
  50++E5DE 18 10 00 9F                          DB $18,$10,$00,$9F,$51,$66   ; start of right pentagon
  50++E5E2 51 66
  51++E5E4 18 05 0F 9F                          DB $18,$05,$0F,$9F,$21,$66
  51++E5E8 21 66
  52++E5EA 18 0D 09 DF                          DB $18,$0D,$09,$DF,$32,$66
  52++E5EE 32 66
  53++E5F0 18 0D 09 FF                          DB $18,$0D,$09,$FF,$43,$66
  53++E5F4 43 66
  54++E5F6 18 05 0F BF                          DB $18,$05,$0F,$BF,$54,$66
  54++E5FA 54 66
  55++E5FC              CargoType5VertSize      equ $  - CargoType5Vertices
  56++E5FC 1F 10 00 04  CargoType5Edges			DB $1F,$10,$00,$04,$1F,$20,$04,$08 	; 8 x 7 = 60 bytes
  56++E600 1F 20 04 08
  57++E604 1F 30 08 0C                          DB $1F,$30,$08,$0C,$1F,$40,$0C,$10
  57++E608 1F 40 0C 10
  58++E60C 1F 50 00 10                          DB $1F,$50,$00,$10,$1F,$51,$00,$14
  58++E610 1F 51 00 14
  59++E614 1F 21 04 18                          DB $1F,$21,$04,$18,$1F,$32,$08,$1C
  59++E618 1F 32 08 1C
  60++E61C 1F 43 0C 20                          DB $1F,$43,$0C,$20,$1F,$54,$10,$24
  60++E620 1F 54 10 24
  61++E624 1F 61 14 18                          DB $1F,$61,$14,$18,$1F,$62,$18,$1C
  61++E628 1F 62 18 1C
  62++E62C 1F 63 1C 20                          DB $1F,$63,$1C,$20,$1F,$64,$20,$24
  62++E630 1F 64 20 24
  63++E634 1F 65 24 14                          DB $1F,$65,$24,$14
  64++E638              CargoType5EdgesSize     equ $  - CargoType5Edges
  65++E638              CargoType5EdgesCnt      equ CargoType5EdgesSize / 4
  66++E638 1F 60 00 00  CargoType5Normals    	DB $1F,$60,$00,$00
  67++E63C 1F 00 29 1E                          DB $1F,$00,$29,$1E,$5F,$00,$12,$30
  67++E640 5F 00 12 30
  68++E644 5F 00 33 00                          DB $5F,$00,$33,$00,$7F,$00,$12,$30
  68++E648 7F 00 12 30
  69++E64C 3F 00 29 1E                          DB $3F,$00,$29,$1E,$9F,$60,$00,$00   ; end Cargo cannister
  69++E650 9F 60 00 00
  70++E654              CargoType5NormalsSize   equ $  - CargoType5Normals
  71++E654              CargoType5Len           equ $  - CargoType5
# file closed: ./Data/ships/CargoType5.asm
  93+ E654                                      include "Data/ships/Boulder.asm"
# file opened: ./Data/ships/Boulder.asm
   1++E654 00           Boulder:	            DB $00
   2++E655 84 03                                DW $0384
   3++E657 99 E6                                DW BoulderEdges
   4++E659 3C                                   DB BoulderEdgesSize
   5++E65A 00 0E                                DB $00, $0E
   6++E65C 07                                   DB BoulderVertSize /6
   7++E65D 2A                                   DB BoulderVertSize
   8++E65E 0F                                   DB BoulderEdgesCnt
   9++E65F 00 01                                DB $00, $01
  10++E661 28                                   DB BoulderNormalsSize
  11++E662 14 14 1E                             DB $14, $14, $1E
  12++E665 D5 E6                                DW BoulderNormals
  13++E667 02 00                                DB $02, $00
  14++E669 6F E6                                DW BoulderVertices
  15++E66B 03 00                                DB ShipTypeJunk,0                      ; Type and Tactics  its only junk for spawing logic
  16++E66D 00                                   DB 0
  17++E66E A0                                   DB $A0                      ; chance of ECM module
  18++E66F 12 25 0B BF  BoulderVertices:	    DB $12, $25, $0B, $BF, $01, $59
  18++E673 01 59
  19++E675 1E 07 0C 1F                          DB $1E, $07, $0C, $1F, $12, $56
  19++E679 12 56
  20++E67B 1C 07 0C 7F                          DB $1C, $07, $0C, $7F, $23, $67
  20++E67F 23 67
  21++E681 02 00 27 3F                          DB $02, $00, $27, $3F, $34, $78
  21++E685 34 78
  22++E687 1C 22 1E BF                          DB $1C, $22, $1E, $BF, $04, $89
  22++E68B 04 89
  23++E68D 05 0A 0D 5F                          DB $05, $0A, $0D, $5F, $FF, $FF
  23++E691 FF FF
  24++E693 14 11 1E 3F                          DB $14, $11, $1E, $3F, $FF, $FF
  24++E697 FF FF
  25++E699              BoulderVertSize:        equ $ - BoulderVertices
  26++E699 1F 15 00 04  BoulderEdges:	        DB $1F, $15, $00, $04
  27++E69D 1F 26 04 08                          DB $1F, $26, $04, $08
  28++E6A1 1F 37 08 0C                          DB $1F, $37, $08, $0C
  29++E6A5 1F 48 0C 10                          DB $1F, $48, $0C, $10
  30++E6A9 1F 09 10 00                          DB $1F, $09, $10, $00
  31++E6AD 1F 01 00 14                          DB $1F, $01, $00, $14
  32++E6B1 1F 12 04 14                          DB $1F, $12, $04, $14
  33++E6B5 1F 23 08 14                          DB $1F, $23, $08, $14
  34++E6B9 1F 34 0C 14                          DB $1F, $34, $0C, $14
  35++E6BD 1F 04 10 14                          DB $1F, $04, $10, $14
  36++E6C1 1F 59 00 18                          DB $1F, $59, $00, $18
  37++E6C5 1F 56 04 18                          DB $1F, $56, $04, $18
  38++E6C9 1F 67 08 18                          DB $1F, $67, $08, $18
  39++E6CD 1F 78 0C 18                          DB $1F, $78, $0C, $18
  40++E6D1 1F 89 10 18                          DB $1F, $89, $10, $18
  41++E6D5              BoulderEdgesSize:       equ $ - BoulderEdges
  42++E6D5              BoulderEdgesCnt:        equ BoulderEdgesSize/4
  43++E6D5 DF 0F 03 08  BoulderNormals:	        DB $DF, $0F, $03, $08
  44++E6D9 9F 07 0C 1E                          DB $9F, $07, $0C, $1E
  45++E6DD 5F 20 2F 18                          DB $5F, $20, $2F, $18
  46++E6E1 FF 03 27 07                          DB $FF, $03, $27, $07
  47++E6E5 FF 05 04 01                          DB $FF, $05, $04, $01
  48++E6E9 1F 31 54 08                          DB $1F, $31, $54, $08
  49++E6ED 3F 70 15 15                          DB $3F, $70, $15, $15
  50++E6F1 7F 4C 23 52                          DB $7F, $4C, $23, $52
  51++E6F5 3F 16 38 89                          DB $3F, $16, $38, $89
  52++E6F9 3F 28 6E 26                          DB $3F, $28, $6E, $26
  53++E6FD              BoulderNormalsSize:     equ $ - BoulderNormals
  54++E6FD              BoulderLen:             equ $ - Boulder
  55++E6FD
# file closed: ./Data/ships/Boulder.asm
  94+ E6FD                                      include "Data/ships/Asteroid.asm"
# file opened: ./Data/ships/Asteroid.asm
   1++E6FD 00           Asteroid:	            DB $00
   2++E6FE 00 19                                DW $1900
   3++E700 4E E7                                DW AsteroidEdges
   4++E702 54                                   DB AsteroidEdgesSize
   5++E703 00 22                                DB $00, $22
   6++E705 09                                   DB AsteroidVertSize /6
   7++E706 36                                   DB AsteroidVertSize
   8++E707 15                                   DB AsteroidEdgesCnt
   9++E708 00 05                                DB $00, $05
  10++E70A 38                                   DB AsteroidNormalsSize
  11++E70B 32 3C 1E                             DB $32, $3C, $1E
  12++E70E A2 E7                                DW AsteroidNormals
  13++E710 01 00                                DB $01, $00
  14++E712 18 E7                                DW AsteroidVertices
  15++E714 03 00                                DB ShipTypeJunk,0                      ; Type and Tactics
  16++E716 00                                   DB 0
  17++E717 00                                   DB $00                      ; chance of ECM module
  18++E718 00 50 00 1F  AsteroidVertices:	    DB $00, $50, $00, $1F, $FF, $FF ;01
  18++E71C FF FF
  19++E71E 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF ;02
  19++E722 FF FF
  20++E724 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF ;03
  20++E728 FF FF
  21++E72A 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF ;04
  21++E72E FF FF
  22++E730 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC ;05
  22++E734 65 DC
  23++E736 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF ;06
  23++E73A FF FF
  24++E73C 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32 ;07
  24++E740 10 32
  25++E742 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF ;08
  25++E746 FF FF
  26++E748 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA ;09
  26++E74C 98 BA
  27++E74E              AsteroidVertSize:       equ $ - AsteroidVertices
  28++E74E 1F 72 00 04  AsteroidEdges:	        DB $1F, $72, $00, $04           ;01
  29++E752 1F D6 00 10                          DB $1F, $D6, $00, $10           ;02
  30++E756 1F C5 0C 10                          DB $1F, $C5, $0C, $10           ;03
  31++E75A 1F B4 08 0C                          DB $1F, $B4, $08, $0C           ;04
  32++E75E 1F A3 04 08                          DB $1F, $A3, $04, $08           ;05
  33++E762 1F 32 04 18                          DB $1F, $32, $04, $18           ;06
  34++E766 1F 31 08 18                          DB $1F, $31, $08, $18           ;07
  35++E76A 1F 41 08 14                          DB $1F, $41, $08, $14           ;08
  36++E76E 1F 10 14 18                          DB $1F, $10, $14, $18           ;09
  37++E772 1F 60 00 14                          DB $1F, $60, $00, $14           ;10
  38++E776 1F 54 0C 14                          DB $1F, $54, $0C, $14           ;11
  39++E77A 1F 20 00 18                          DB $1F, $20, $00, $18           ;12
  40++E77E 1F 65 10 14                          DB $1F, $65, $10, $14           ;13
  41++E782 1F A8 04 20                          DB $1F, $A8, $04, $20           ;14
  42++E786 1F 87 04 1C                          DB $1F, $87, $04, $1C           ;15
  43++E78A 1F D7 00 1C                          DB $1F, $D7, $00, $1C           ;16
  44++E78E 1F DC 10 1C                          DB $1F, $DC, $10, $1C           ;17
  45++E792 1F C9 0C 1C                          DB $1F, $C9, $0C, $1C           ;18
  46++E796 1F B9 0C 20                          DB $1F, $B9, $0C, $20
  47++E79A 1F BA 08 20                          DB $1F, $BA, $08, $20
  48++E79E 1F 98 1C 20                          DB $1F, $98, $1C, $20
  49++E7A2
  50++E7A2              AsteroidEdgesSize:      equ $ - AsteroidEdges
  51++E7A2              AsteroidEdgesCnt:       equ AsteroidEdgesSize/4
  52++E7A2 1F 09 42 51  AsteroidNormals:	    DB $1F, $09, $42, $51           ;01
  53++E7A6 5F 09 42 51                          DB $5F, $09, $42, $51           ;02
  54++E7AA 9F 48 40 1F                          DB $9F, $48, $40, $1F           ;03
  55++E7AE DF 40 49 2F                          DB $DF, $40, $49, $2F           ;04
  56++E7B2 5F 2D 4F 41                          DB $5F, $2D, $4F, $41           ;05
  57++E7B6 1F 87 0F 23                          DB $1F, $87, $0F, $23           ;06
  58++E7BA 1F 26 4C 46                          DB $1F, $26, $4C, $46           ;07
  59++E7BE BF 42 3B 27                          DB $BF, $42, $3B, $27           ;08
  60++E7C2 FF 43 0F 50                          DB $FF, $43, $0F, $50           ;09
  61++E7C6 7F 42 0E 4B                          DB $7F, $42, $0E, $4B           ;10
  62++E7CA FF 46 50 28                          DB $FF, $46, $50, $28           ;11
  63++E7CE 7F 3A 66 33                          DB $7F, $3A, $66, $33           ;12
  64++E7D2 3F 51 09 43                          DB $3F, $51, $09, $43           ;13
  65++E7D6 3F 2F 5E 3F                          DB $3F, $2F, $5E, $3F           ;14
  66++E7DA              AsteroidNormalsSize:    equ $ - AsteroidNormals
  67++E7DA              AsteroidLen:            equ $ - Asteroid
  68++E7DA
  69++E7DA
# file closed: ./Data/ships/Asteroid.asm
  95+ E7DA
  96+ E7DA                                      include "Data/ships/Bushmaster.asm"
# file opened: ./Data/ships/Bushmaster.asm
   1++E7DA 00           Bushmaster:	            DB $00                          ; 00 scoop debris
   2++E7DB 9A 10                                DW $109A                        ; 01 missile lock radius
   3++E7DD 3D E8                                DW BushmasterEdges              ; 03 edge address
   4++E7DF 4C                                   DB BushmasterEdgesSize          ; 05 edge data length
   5++E7E0 00                                   DB $00                          ; 06 gun vertex
   6++E7E1 1E                                   DB $1E                          ; 07 explosion count
   7++E7E2 0C                                   DB BushmasterVertSize /6        ; 08 vertex count
   8++E7E3 48                                   DB BushmasterVertSize           ; 09 vertex data length
   9++E7E4 13                                   DB BushmasterEdgesCnt           ; 10 edge count
  10++E7E5 00 96                                DB $00, $96                     ; 11 bounty hi lo
  11++E7E7 24                                   DB BushmasterNormalsSize        ; 13 normal data length
  12++E7E8 14                                   DB $14                          ; 14 dot range
  13++E7E9 4A                                   DB $4A                          ; 15 energy
  14++E7EA 23                                   DB $23                          ; 16 speed
  15++E7EB 89 E8                                DW BushmasterNormals            ; 17 normal data address
  16++E7ED 02 21                                DB $02, $21                     ; 19 scaling factor, laser type
  17++E7EF F5 E7                                DW BushmasterVertices           ; 21 Verticies adddress
  18++E7F1 00 00                                DB 0,0                          ; 23 type, new bits
  19++E7F3 01                                   DB ShipCanAnger                 ; 25 ai flags
  20++E7F4 70                                   DB $70                          ; chance of ECM module
  21++E7F5 00 00 3C 1F  BushmasterVertices:	    DB $00, $00, $3C, $1F, $23, $01  ; 01
  21++E7F9 23 01
  22++E7FB 32 00 14 1F                          DB $32, $00, $14, $1F, $57, $13  ; 02
  22++E7FF 57 13
  23++E801 32 00 14 9F                          DB $32, $00, $14, $9F, $46, $02  ; 03
  23++E805 46 02
  24++E807 00 14 00 1F                          DB $00, $14, $00, $1F, $45, $01  ; 04
  24++E80B 45 01
  25++E80D 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF  ; 05
  25++E811 FF FF
  26++E813 00 0E 28 3F                          DB $00, $0E, $28, $3F, $88, $45  ; 06
  26++E817 88 45
  27++E819 28 00 28 3F                          DB $28, $00, $28, $3F, $88, $57  ; 07
  27++E81D 88 57
  28++E81F 28 00 28 BF                          DB $28, $00, $28, $BF, $88, $46  ; 08
  28++E823 88 46
  29++E825 00 04 28 2A                          DB $00, $04, $28, $2A, $88, $88  ; 09
  29++E829 88 88
  30++E82B 0A 00 28 2A                          DB $0A, $00, $28, $2A, $88, $88  ; 10
  30++E82F 88 88
  31++E831 00 04 28 6A                          DB $00, $04, $28, $6A, $88, $88  ; 11
  31++E835 88 88
  32++E837 0A 00 28 AA                          DB $0A, $00, $28, $AA, $88, $88  ; 12           ; 12 * 6 = 72
  32++E83B 88 88
  33++E83D              BushmasterVertSize:     equ $ - BushmasterVertices
  34++E83D 1F 13 00 04  BushmasterEdges:	    DB $1F, $13, $00, $04            ; 01
  35++E841 1F 02 00 08                          DB $1F, $02, $00, $08            ; 02
  36++E845 1F 01 00 0C                          DB $1F, $01, $00, $0C            ; 03
  37++E849 1F 23 00 10                          DB $1F, $23, $00, $10            ; 04
  38++E84D 1F 45 0C 14                          DB $1F, $45, $0C, $14            ; 05
  39++E851 1F 04 08 0C                          DB $1F, $04, $08, $0C            ; 06
  40++E855 1F 15 04 0C                          DB $1F, $15, $04, $0C            ; 07
  41++E859 1F 46 08 1C                          DB $1F, $46, $08, $1C            ; 08
  42++E85D 1F 57 04 18                          DB $1F, $57, $04, $18            ; 09
  43++E861 1F 26 08 10                          DB $1F, $26, $08, $10            ; 10
  44++E865 1F 37 04 10                          DB $1F, $37, $04, $10            ; 11
  45++E869 1F 48 14 1C                          DB $1F, $48, $14, $1C            ; 12
  46++E86D 1F 58 14 18                          DB $1F, $58, $14, $18            ; 13
  47++E871 1F 68 10 1C                          DB $1F, $68, $10, $1C            ; 14
  48++E875 1F 78 10 18                          DB $1F, $78, $10, $18            ; 15
  49++E879 0A 88 20 24                          DB $0A, $88, $20, $24            ; 16
  50++E87D 0A 88 24 28                          DB $0A, $88, $24, $28            ; 17
  51++E881 0A 88 28 2C                          DB $0A, $88, $28, $2C            ; 18
  52++E885 0A 88 2C 20                          DB $0A, $88, $2C, $20            ; 19           ; 19 * 4 = 76
  53++E889              BushmasterEdgesSize:    equ $ - BushmasterEdges
  54++E889              BushmasterEdgesCnt:     equ BushmasterEdgesSize/4        ;
  55++E889 9F 17 58 1D  BushmasterNormals:	    DB $9F, $17, $58, $1D            ; 01
  56++E88D 1F 17 58 1D                          DB $1F, $17, $58, $1D            ; 02
  57++E891 DF 0E 5D 12                          DB $DF, $0E, $5D, $12            ; 03
  58++E895 5F 0E 5D 12                          DB $5F, $0E, $5D, $12            ; 04
  59++E899 BF 1F 59 0D                          DB $BF, $1F, $59, $0D            ; 05
  60++E89D 3F 1F 59 0D                          DB $3F, $1F, $59, $0D            ; 06
  61++E8A1 FF 2A 55 07                          DB $FF, $2A, $55, $07            ; 07
  62++E8A5 7F 2A 55 07                          DB $7F, $2A, $55, $07            ; 08
  63++E8A9 3F 00 00 60                          DB $3F, $00, $00, $60            ; 09           ; 9 * 4 = 36
  64++E8AD              BushmasterNormalsSize:  equ $ - BushmasterNormals
  65++E8AD              BushmasterLen:          equ $ - Bushmaster
  66++E8AD
# file closed: ./Data/ships/Bushmaster.asm
  97+ E8AD                                      include "Data/ships/Chameleon.asm"
# file opened: ./Data/ships/Chameleon.asm
   1++E8AD 03           Chameleon:	            DB $03
   2++E8AE A0 0F                                DW $0FA0
   3++E8B0 34 E9                                DW ChameleonEdges
   4++E8B2 74                                   DB ChameleonEdgesSize
   5++E8B3 00 1A                                DB $00, $1A
   6++E8B5 12                                   DB ChameleonVertSize /6
   7++E8B6 6C                                   DB ChameleonVertSize
   8++E8B7 1D                                   DB ChameleonEdgesCnt
   9++E8B8 00 C8                                DB $00, $C8
  10++E8BA 34                                   DB ChameleonNormalsSize
  11++E8BB 0A 64 1D                             DB $0A, $64, $1D
  12++E8BE A8 E9                                DW ChameleonNormals
  13++E8C0 01 23                                DB $01, $23
  14++E8C2 C8 E8                                DW ChameleonVertices
  15++E8C4 00 00                                DB 0,0                      ; Type and Tactics
  16++E8C6 01                                   DB ShipCanAnger
  17++E8C7 40                                   DB $40                      ; chance of ECM module
  18++E8C8 12 00 6E 9F  ChameleonVertices:	    DB $12, $00, $6E, $9F, $25, $01
  18++E8CC 25 01
  19++E8CE 12 00 6E 1F                          DB $12, $00, $6E, $1F, $34, $01
  19++E8D2 34 01
  20++E8D4 28 00 00 9F                          DB $28, $00, $00, $9F, $8B, $25
  20++E8D8 8B 25
  21++E8DA 08 18 00 9F                          DB $08, $18, $00, $9F, $68, $22
  21++E8DE 68 22
  22++E8E0 08 18 00 1F                          DB $08, $18, $00, $1F, $69, $33
  22++E8E4 69 33
  23++E8E6 28 00 00 1F                          DB $28, $00, $00, $1F, $9A, $34
  23++E8EA 9A 34
  24++E8EC 08 18 00 5F                          DB $08, $18, $00, $5F, $7A, $44
  24++E8F0 7A 44
  25++E8F2 08 18 00 DF                          DB $08, $18, $00, $DF, $7B, $55
  25++E8F6 7B 55
  26++E8F8 00 18 28 1F                          DB $00, $18, $28, $1F, $36, $02
  26++E8FC 36 02
  27++E8FE 00 18 28 5F                          DB $00, $18, $28, $5F, $57, $14
  27++E902 57 14
  28++E904 20 00 28 BF                          DB $20, $00, $28, $BF, $BC, $88
  28++E908 BC 88
  29++E90A 00 18 28 3F                          DB $00, $18, $28, $3F, $9C, $68
  29++E90E 9C 68
  30++E910 20 00 28 3F                          DB $20, $00, $28, $3F, $AC, $99
  30++E914 AC 99
  31++E916 00 18 28 7F                          DB $00, $18, $28, $7F, $BC, $7A
  31++E91A BC 7A
  32++E91C 08 00 28 AA                          DB $08, $00, $28, $AA, $CC, $CC
  32++E920 CC CC
  33++E922 00 08 28 2A                          DB $00, $08, $28, $2A, $CC, $CC
  33++E926 CC CC
  34++E928 08 00 28 2A                          DB $08, $00, $28, $2A, $CC, $CC
  34++E92C CC CC
  35++E92E 00 08 28 6A                          DB $00, $08, $28, $6A, $CC, $CC
  35++E932 CC CC
  36++E934              ChameleonVertSize:      equ $ - ChameleonVertices
  37++E934 1F 01 00 04  ChameleonEdges:	        DB $1F, $01, $00, $04
  38++E938 1F 02 00 20                          DB $1F, $02, $00, $20
  39++E93C 1F 15 00 24                          DB $1F, $15, $00, $24
  40++E940 1F 03 04 20                          DB $1F, $03, $04, $20
  41++E944 1F 14 04 24                          DB $1F, $14, $04, $24
  42++E948 1F 34 04 14                          DB $1F, $34, $04, $14
  43++E94C 1F 25 00 08                          DB $1F, $25, $00, $08
  44++E950 1F 26 0C 20                          DB $1F, $26, $0C, $20
  45++E954 1F 36 10 20                          DB $1F, $36, $10, $20
  46++E958 1F 75 1C 24                          DB $1F, $75, $1C, $24
  47++E95C 1F 74 18 24                          DB $1F, $74, $18, $24
  48++E960 1F 39 10 14                          DB $1F, $39, $10, $14
  49++E964 1F 4A 14 18                          DB $1F, $4A, $14, $18
  50++E968 1F 28 08 0C                          DB $1F, $28, $08, $0C
  51++E96C 1F 5B 08 1C                          DB $1F, $5B, $08, $1C
  52++E970 1F 8B 08 28                          DB $1F, $8B, $08, $28
  53++E974 1F 9A 14 30                          DB $1F, $9A, $14, $30
  54++E978 1F 68 0C 2C                          DB $1F, $68, $0C, $2C
  55++E97C 1F 7B 1C 34                          DB $1F, $7B, $1C, $34
  56++E980 1F 69 10 2C                          DB $1F, $69, $10, $2C
  57++E984 1F 7A 18 34                          DB $1F, $7A, $18, $34
  58++E988 1F 8C 28 2C                          DB $1F, $8C, $28, $2C
  59++E98C 1F BC 28 34                          DB $1F, $BC, $28, $34
  60++E990 1F 9C 2C 30                          DB $1F, $9C, $2C, $30
  61++E994 1F AC 30 34                          DB $1F, $AC, $30, $34
  62++E998 0A CC 38 3C                          DB $0A, $CC, $38, $3C
  63++E99C 0A CC 3C 40                          DB $0A, $CC, $3C, $40
  64++E9A0 0A CC 40 44                          DB $0A, $CC, $40, $44
  65++E9A4 0A CC 44 38                          DB $0A, $CC, $44, $38
  66++E9A8              ChameleonEdgesSize:     equ $ - ChameleonEdges
  67++E9A8              ChameleonEdgesCnt:      equ ChameleonEdgesSize/4
  68++E9A8 1F 00 5A 1F  ChameleonNormals:	    DB $1F, $00, $5A, $1F
  69++E9AC 5F 00 5A 1F                          DB $5F, $00, $5A, $1F
  70++E9B0 9F 39 4C 0B                          DB $9F, $39, $4C, $0B
  71++E9B4 1F 39 4C 0B                          DB $1F, $39, $4C, $0B
  72++E9B8 5F 39 4C 0B                          DB $5F, $39, $4C, $0B
  73++E9BC DF 39 4C 0B                          DB $DF, $39, $4C, $0B
  74++E9C0 1F 00 60 00                          DB $1F, $00, $60, $00
  75++E9C4 5F 00 60 00                          DB $5F, $00, $60, $00
  76++E9C8 BF 39 4C 0B                          DB $BF, $39, $4C, $0B
  77++E9CC 3F 39 4C 0B                          DB $3F, $39, $4C, $0B
  78++E9D0 7F 39 4C 0B                          DB $7F, $39, $4C, $0B
  79++E9D4 FF 39 4C 0B                          DB $FF, $39, $4C, $0B
  80++E9D8 3F 00 00 60                          DB $3F, $00, $00, $60
  81++E9DC              ChameleonNormalsSize:   equ $ - ChameleonNormals
  82++E9DC              ChameleonLen:           equ $ - Chameleon
  83++E9DC
# file closed: ./Data/ships/Chameleon.asm
  98+ E9DC                                      include "Data/ships/CobraMk3.asm"
# file opened: ./Data/ships/CobraMk3.asm
   1++E9DC              ; Corrected pointers
   2++E9DC              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   3++E9DC              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   4++E9DC              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   5++E9DC 03           CobraMk3    		    DB $03
   6++E9DD 41 23                                DW $2341
   7++E9DF 9F EA                                DW CobraMk3Edges
   8++E9E1 98                                   DB CobraMkEdgesSize
   9++E9E2 54 2A                                DB $54,$2A
  10++E9E4 1C                                   DB CobraMkVertSize /6
  11++E9E5 A8                                   DB CobraMkVertSize
  12++E9E6 26                                   DB CobraMkEdgesCnt
  13++E9E7 00 00                                DB $00,$00
  14++E9E9 34                                   DB CobraMk3NormalsSize
  15++E9EA 32 96 1C                             DB $32,$96,$1C
  16++E9ED 37 EB                                DW CobraMk3Normals
  17++E9EF 01 13                                DB $01,$13
  18++E9F1 F7 E9                                DW CobraMk3Vertices
  19++E9F3 00 00                                DB 0,0                      ; Type and Tactics
  20++E9F5 01                                   DB ShipCanAnger
  21++E9F6                                  ; missiles = 3
  22++E9F6 70                                   DB $70                      ; chance of ECM module
  23++E9F7 20 00 4C 1F  CobraMk3Vertices	    DB $20,$00,$4C,$1F,$FF,$FF
  23++E9FB FF FF
  24++E9FD 20 00 4C 9F                          DB $20,$00,$4C,$9F,$FF,$FF
  24++EA01 FF FF
  25++EA03 00 1A 18 1F                          DB $00,$1A,$18,$1F,$FF,$FF
  25++EA07 FF FF
  26++EA09 78 03 08 FF                          DB $78,$03,$08,$FF,$73,$AA
  26++EA0D 73 AA
  27++EA0F 78 03 08 7F                          DB $78,$03,$08,$7F,$84,$CC
  27++EA13 84 CC
  28++EA15 58 10 28 BF                          DB $58,$10,$28,$BF,$FF,$FF
  28++EA19 FF FF
  29++EA1B 58 10 28 3F                          DB $58,$10,$28,$3F,$FF,$FF
  29++EA1F FF FF
  30++EA21 80 08 28 7F                          DB $80,$08,$28,$7F,$98,$CC
  30++EA25 98 CC
  31++EA27 80 08 28 FF                          DB $80,$08,$28,$FF,$97,$AA
  31++EA2B 97 AA
  32++EA2D 00 1A 28 3F                          DB $00,$1A,$28,$3F,$65,$99
  32++EA31 65 99
  33++EA33 20 18 28 FF                          DB $20,$18,$28,$FF,$A9,$BB
  33++EA37 A9 BB
  34++EA39 20 18 28 7F                          DB $20,$18,$28,$7F,$B9,$CC
  34++EA3D B9 CC
  35++EA3F 24 08 28 B4                          DB $24,$08,$28,$B4,$99,$99
  35++EA43 99 99
  36++EA45 08 0C 28 B4                          DB $08,$0C,$28,$B4,$99,$99
  36++EA49 99 99
  37++EA4B 08 0C 28 34                          DB $08,$0C,$28,$34,$99,$99
  37++EA4F 99 99
  38++EA51 24 08 28 34                          DB $24,$08,$28,$34,$99,$99
  38++EA55 99 99
  39++EA57 24 0C 28 74                          DB $24,$0C,$28,$74,$99,$99
  39++EA5B 99 99
  40++EA5D 08 10 28 74                          DB $08,$10,$28,$74,$99,$99
  40++EA61 99 99
  41++EA63 08 10 28 F4                          DB $08,$10,$28,$F4,$99,$99
  41++EA67 99 99
  42++EA69 24 0C 28 F4                          DB $24,$0C,$28,$F4,$99,$99
  42++EA6D 99 99
  43++EA6F 00 00 4C 06                          DB $00,$00,$4C,$06,$B0,$BB
  43++EA73 B0 BB
  44++EA75 00 00 5A 1F                          DB $00,$00,$5A,$1F,$B0,$BB
  44++EA79 B0 BB
  45++EA7B 50 06 28 E8                          DB $50,$06,$28,$E8,$99,$99
  45++EA7F 99 99
  46++EA81 50 06 28 A8                          DB $50,$06,$28,$A8,$99,$99
  46++EA85 99 99
  47++EA87 58 00 28 A6                          DB $58,$00,$28,$A6,$99,$99
  47++EA8B 99 99
  48++EA8D 50 06 28 28                          DB $50,$06,$28,$28,$99,$99
  48++EA91 99 99
  49++EA93 58 00 28 26                          DB $58,$00,$28,$26,$99,$99
  49++EA97 99 99
  50++EA99 50 06 28 68                          DB $50,$06,$28,$68,$99,$99
  50++EA9D 99 99
  51++EA9F              CobraMkVertSize         equ $  - CobraMk3Vertices
  52++EA9F 1F B0 00 04  CobraMk3Edges		    DB $1F,$B0,$00,$04,$1F,$C4,$00,$10
  52++EAA3 1F C4 00 10
  53++EAA7 1F A3 04 0C                          DB $1F,$A3,$04,$0C,$1F,$A7,$0C,$20
  53++EAAB 1F A7 0C 20
  54++EAAF 1F C8 10 1C                          DB $1F,$C8,$10,$1C,$1F,$98,$18,$1C
  54++EAB3 1F 98 18 1C
  55++EAB7 1F 96 18 24                          DB $1F,$96,$18,$24,$1F,$95,$14,$24
  55++EABB 1F 95 14 24
  56++EABF 1F 97 14 20                          DB $1F,$97,$14,$20,$1F,$51,$08,$14
  56++EAC3 1F 51 08 14
  57++EAC7 1F 62 08 18                          DB $1F,$62,$08,$18,$1F,$73,$0C,$14
  57++EACB 1F 73 0C 14
  58++EACF 1F 84 10 18                          DB $1F,$84,$10,$18,$1F,$10,$04,$08
  58++EAD3 1F 10 04 08
  59++EAD7 1F 20 00 08                          DB $1F,$20,$00,$08,$1F,$A9,$20,$28
  59++EADB 1F A9 20 28
  60++EADF 1F B9 28 2C                          DB $1F,$B9,$28,$2C,$1F,$C9,$1C,$2C
  60++EAE3 1F C9 1C 2C
  61++EAE7 1F BA 04 28                          DB $1F,$BA,$04,$28,$1F,$CB,$00,$2C
  61++EAEB 1F CB 00 2C
  62++EAEF 1D 31 04 14                          DB $1D,$31,$04,$14,$1D,$42,$00,$18
  62++EAF3 1D 42 00 18
  63++EAF7 06 B0 50 54                          DB $06,$B0,$50,$54,$14,$99,$30,$34
  63++EAFB 14 99 30 34
  64++EAFF 14 99 48 4C                          DB $14,$99,$48,$4C,$14,$99,$38,$3C
  64++EB03 14 99 38 3C
  65++EB07 14 99 40 44                          DB $14,$99,$40,$44,$13,$99,$3C,$40
  65++EB0B 13 99 3C 40
  66++EB0F 11 99 38 44                          DB $11,$99,$38,$44,$13,$99,$34,$48
  66++EB13 13 99 34 48
  67++EB17 13 99 30 4C                          DB $13,$99,$30,$4C,$1E,$65,$08,$24
  67++EB1B 1E 65 08 24
  68++EB1F 06 99 58 60                          DB $06,$99,$58,$60,$06,$99,$5C,$60
  68++EB23 06 99 5C 60
  69++EB27 08 99 58 5C                          DB $08,$99,$58,$5C,$06,$99,$64,$68
  69++EB2B 06 99 64 68
  70++EB2F 06 99 68 6C                          DB $06,$99,$68,$6C,$08,$99,$64,$6C
  70++EB33 08 99 64 6C
  71++EB37              CobraMkEdgesSize        equ $  - CobraMk3Edges
  72++EB37              CobraMkEdgesCnt         equ CobraMkEdgesSize/4
  73++EB37              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  74++EB37 1F 00 3E 1F  CobraMk3Normals		    DB $1F,$00,$3E,$1F
  75++EB3B 9F 12 37 10                          DB $9F,$12,$37,$10
  76++EB3F 1F 12 37 10                          DB $1F,$12,$37,$10
  77++EB43 9F 10 34 0E                          DB $9F,$10,$34,$0E
  78++EB47 1F 10 34 0E                          DB $1F,$10,$34,$0E
  79++EB4B 9F 0E 2F 00                          DB $9F,$0E,$2F,$00
  80++EB4F 1F 0E 2F 00                          DB $1F,$0E,$2F,$00
  81++EB53 9F 3D 66 00                          DB $9F,$3D,$66,$00
  82++EB57 1F 3D 66 00                          DB $1F,$3D,$66,$00
  83++EB5B 3F 00 00 50                          DB $3F,$00,$00,$50
  84++EB5F DF 07 2A 09                          DB $DF,$07,$2A,$09
  85++EB63 5F 00 1E 06                          DB $5F,$00,$1E,$06
  86++EB67 5F 07 2A 09                          DB $5F,$07,$2A,$09 		;end of Cobra Mk III
  87++EB6B              CobraMk3NormalsSize     equ $  - CobraMk3Normals
  88++EB6B              CobraMk3Len             equ $  - CobraMk3
  89++EB6B
# file closed: ./Data/ships/CobraMk3.asm
  99+ EB6B                                      include "Data/ships/Cobra_Mk_1.asm"
# file opened: ./Data/ships/Cobra_Mk_1.asm
   1++EB6B 03           Cobra_Mk_1:	            DB $03
   2++EB6C 49 26                                DW $2649
   3++EB6E C8 EB                                DW Cobra_Mk_1Edges
   4++EB70 48                                   DB Cobra_Mk_1EdgesSize
   5++EB71 28 1A                                DB $28, $1A
   6++EB73 0B                                   DB Cobra_Mk_1VertSize /6
   7++EB74 42                                   DB Cobra_Mk_1VertSize
   8++EB75 12                                   DB Cobra_Mk_1EdgesCnt
   9++EB76 00 4B                                DB $00, $4B
  10++EB78 28                                   DB Cobra_Mk_1NormalsSize
  11++EB79 13 51 1A                             DB $13, $51, $1A
  12++EB7C 10 EC                                DW Cobra_Mk_1Normals
  13++EB7E 02 22                                DB $02, $22
  14++EB80 86 EB                                DW Cobra_Mk_1Vertices
  15++EB82 00 00                                DB 0,0                      ; Type and Tactics
  16++EB84 01                                   DB ShipCanAnger
  17++EB85 30                                   DB $30                      ; chance of ECM module
  18++EB86 12 01 32 DF  Cobra_Mk_1Vertices:	    DB $12, $01, $32, $DF, $01, $23
  18++EB8A 01 23
  19++EB8C 12 01 32 5F                          DB $12, $01, $32, $5F, $01, $45
  19++EB90 01 45
  20++EB92 42 00 07 9F                          DB $42, $00, $07, $9F, $23, $88
  20++EB96 23 88
  21++EB98 42 00 07 1F                          DB $42, $00, $07, $1F, $45, $99
  21++EB9C 45 99
  22++EB9E 20 0C 26 BF                          DB $20, $0C, $26, $BF, $26, $78
  22++EBA2 26 78
  23++EBA4 20 0C 26 3F                          DB $20, $0C, $26, $3F, $46, $79
  23++EBA8 46 79
  24++EBAA 36 0C 26 FF                          DB $36, $0C, $26, $FF, $13, $78
  24++EBAE 13 78
  25++EBB0 36 0C 26 7F                          DB $36, $0C, $26, $7F, $15, $79
  25++EBB4 15 79
  26++EBB6 00 0C 06 34                          DB $00, $0C, $06, $34, $02, $46
  26++EBBA 02 46
  27++EBBC 00 01 32 42                          DB $00, $01, $32, $42, $01, $11
  27++EBC0 01 11
  28++EBC2 00 01 3C 5F                          DB $00, $01, $3C, $5F, $01, $11
  28++EBC6 01 11
  29++EBC8              Cobra_Mk_1VertSize:     equ $ - Cobra_Mk_1Vertices
  30++EBC8 1F 01 04 00  Cobra_Mk_1Edges:	    DB $1F, $01, $04, $00
  31++EBCC 1F 23 00 08                          DB $1F, $23, $00, $08
  32++EBD0 1F 38 08 18                          DB $1F, $38, $08, $18
  33++EBD4 1F 17 18 1C                          DB $1F, $17, $18, $1C
  34++EBD8 1F 59 1C 0C                          DB $1F, $59, $1C, $0C
  35++EBDC 1F 45 0C 04                          DB $1F, $45, $0C, $04
  36++EBE0 1F 28 08 10                          DB $1F, $28, $08, $10
  37++EBE4 1F 67 10 14                          DB $1F, $67, $10, $14
  38++EBE8 1F 49 14 0C                          DB $1F, $49, $14, $0C
  39++EBEC 14 02 00 20                          DB $14, $02, $00, $20
  40++EBF0 14 04 20 04                          DB $14, $04, $20, $04
  41++EBF4 10 26 10 20                          DB $10, $26, $10, $20
  42++EBF8 10 46 20 14                          DB $10, $46, $20, $14
  43++EBFC 1F 78 10 18                          DB $1F, $78, $10, $18
  44++EC00 1F 79 14 1C                          DB $1F, $79, $14, $1C
  45++EC04 14 13 00 18                          DB $14, $13, $00, $18
  46++EC08 14 15 04 1C                          DB $14, $15, $04, $1C
  47++EC0C 02 01 28 24                          DB $02, $01, $28, $24
  48++EC10              Cobra_Mk_1EdgesSize:    equ $ - Cobra_Mk_1Edges
  49++EC10              Cobra_Mk_1EdgesCnt:     equ Cobra_Mk_1EdgesSize/4
  50++EC10 1F 00 29 0A  Cobra_Mk_1Normals:	    DB $1F, $00, $29, $0A
  51++EC14 5F 00 1B 03                          DB $5F, $00, $1B, $03
  52++EC18 9F 08 2E 08                          DB $9F, $08, $2E, $08
  53++EC1C DF 0C 39 0C                          DB $DF, $0C, $39, $0C
  54++EC20 1F 08 2E 08                          DB $1F, $08, $2E, $08
  55++EC24 5F 0C 39 0C                          DB $5F, $0C, $39, $0C
  56++EC28 1F 00 31 00                          DB $1F, $00, $31, $00
  57++EC2C 3F 00 00 9A                          DB $3F, $00, $00, $9A
  58++EC30 BF 79 6F 3E                          DB $BF, $79, $6F, $3E
  59++EC34 3F 79 6F 3E                          DB $3F, $79, $6F, $3E
  60++EC38              Cobra_Mk_1NormalsSize:  equ $ - Cobra_Mk_1Normals
  61++EC38              Cobra_Mk_1Len:          equ $ - Cobra_Mk_1
  62++EC38
# file closed: ./Data/ships/Cobra_Mk_1.asm
 100+ EC38                                      include "Data/ships/Cobra_Mk_3_P.asm"
# file opened: ./Data/ships/Cobra_Mk_3_P.asm
   1++EC38 01           Cobra_Mk_3_P:	        DB $01
   2++EC39 41 23                                DW $2341
   3++EC3B FB EC                                DW Cobra_Mk_3_PEdges
   4++EC3D 98                                   DB Cobra_Mk_3_PEdgesSize
   5++EC3E 54 2A                                DB $54, $2A
   6++EC40 1C                                   DB Cobra_Mk_3_PVertSize /6
   7++EC41 A8                                   DB Cobra_Mk_3_PVertSize
   8++EC42 26                                   DB Cobra_Mk_3_PEdgesCnt
   9++EC43 00 AF                                DB $00, $AF
  10++EC45 34                                   DB Cobra_Mk_3_PNormalsSize
  11++EC46 32 96 1C                             DB $32, $96, $1C
  12++EC49 93 ED                                DW Cobra_Mk_3_PNormals
  13++EC4B 01 12                                DB $01, $12
  14++EC4D 53 EC                                DW Cobra_Mk_3_PVertices
  15++EC4F 00 00                                DB 0,0                      ; Type and Tactics
  16++EC51 01                                   DB ShipCanAnger
  17++EC52 90                                   DB $90                      ; chance of ECM module
  18++EC53 20 00 4C 1F  Cobra_Mk_3_PVertices:	DB $20, $00, $4C, $1F, $FF, $FF
  18++EC57 FF FF
  19++EC59 20 00 4C 9F                          DB $20, $00, $4C, $9F, $FF, $FF
  19++EC5D FF FF
  20++EC5F 00 1A 18 1F                          DB $00, $1A, $18, $1F, $FF, $FF
  20++EC63 FF FF
  21++EC65 78 03 08 FF                          DB $78, $03, $08, $FF, $73, $AA
  21++EC69 73 AA
  22++EC6B 78 03 08 7F                          DB $78, $03, $08, $7F, $84, $CC
  22++EC6F 84 CC
  23++EC71 58 10 28 BF                          DB $58, $10, $28, $BF, $FF, $FF
  23++EC75 FF FF
  24++EC77 58 10 28 3F                          DB $58, $10, $28, $3F, $FF, $FF
  24++EC7B FF FF
  25++EC7D 80 08 28 7F                          DB $80, $08, $28, $7F, $98, $CC
  25++EC81 98 CC
  26++EC83 80 08 28 FF                          DB $80, $08, $28, $FF, $97, $AA
  26++EC87 97 AA
  27++EC89 00 1A 28 3F                          DB $00, $1A, $28, $3F, $65, $99
  27++EC8D 65 99
  28++EC8F 20 18 28 FF                          DB $20, $18, $28, $FF, $A9, $BB
  28++EC93 A9 BB
  29++EC95 20 18 28 7F                          DB $20, $18, $28, $7F, $B9, $CC
  29++EC99 B9 CC
  30++EC9B 24 08 28 B4                          DB $24, $08, $28, $B4, $99, $99
  30++EC9F 99 99
  31++ECA1 08 0C 28 B4                          DB $08, $0C, $28, $B4, $99, $99
  31++ECA5 99 99
  32++ECA7 08 0C 28 34                          DB $08, $0C, $28, $34, $99, $99
  32++ECAB 99 99
  33++ECAD 24 08 28 34                          DB $24, $08, $28, $34, $99, $99
  33++ECB1 99 99
  34++ECB3 24 0C 28 74                          DB $24, $0C, $28, $74, $99, $99
  34++ECB7 99 99
  35++ECB9 08 10 28 74                          DB $08, $10, $28, $74, $99, $99
  35++ECBD 99 99
  36++ECBF 08 10 28 F4                          DB $08, $10, $28, $F4, $99, $99
  36++ECC3 99 99
  37++ECC5 24 0C 28 F4                          DB $24, $0C, $28, $F4, $99, $99
  37++ECC9 99 99
  38++ECCB 00 00 4C 06                          DB $00, $00, $4C, $06, $B0, $BB
  38++ECCF B0 BB
  39++ECD1 00 00 5A 1F                          DB $00, $00, $5A, $1F, $B0, $BB
  39++ECD5 B0 BB
  40++ECD7 50 06 28 E8                          DB $50, $06, $28, $E8, $99, $99
  40++ECDB 99 99
  41++ECDD 50 06 28 A8                          DB $50, $06, $28, $A8, $99, $99
  41++ECE1 99 99
  42++ECE3 58 00 28 A6                          DB $58, $00, $28, $A6, $99, $99
  42++ECE7 99 99
  43++ECE9 50 06 28 28                          DB $50, $06, $28, $28, $99, $99
  43++ECED 99 99
  44++ECEF 58 00 28 26                          DB $58, $00, $28, $26, $99, $99
  44++ECF3 99 99
  45++ECF5 50 06 28 68                          DB $50, $06, $28, $68, $99, $99
  45++ECF9 99 99
  46++ECFB              Cobra_Mk_3_PVertSize:   equ $ - Cobra_Mk_3_PVertices
  47++ECFB 1F B0 00 04  Cobra_Mk_3_PEdges:	    DB $1F, $B0, $00, $04
  48++ECFF 1F C4 00 10                          DB $1F, $C4, $00, $10
  49++ED03 1F A3 04 0C                          DB $1F, $A3, $04, $0C
  50++ED07 1F A7 0C 20                          DB $1F, $A7, $0C, $20
  51++ED0B 1F C8 10 1C                          DB $1F, $C8, $10, $1C
  52++ED0F 1F 98 18 1C                          DB $1F, $98, $18, $1C
  53++ED13 1F 96 18 24                          DB $1F, $96, $18, $24
  54++ED17 1F 95 14 24                          DB $1F, $95, $14, $24
  55++ED1B 1F 97 14 20                          DB $1F, $97, $14, $20
  56++ED1F 1F 51 08 14                          DB $1F, $51, $08, $14
  57++ED23 1F 62 08 18                          DB $1F, $62, $08, $18
  58++ED27 1F 73 0C 14                          DB $1F, $73, $0C, $14
  59++ED2B 1F 84 10 18                          DB $1F, $84, $10, $18
  60++ED2F 1F 10 04 08                          DB $1F, $10, $04, $08
  61++ED33 1F 20 00 08                          DB $1F, $20, $00, $08
  62++ED37 1F A9 20 28                          DB $1F, $A9, $20, $28
  63++ED3B 1F B9 28 2C                          DB $1F, $B9, $28, $2C
  64++ED3F 1F C9 1C 2C                          DB $1F, $C9, $1C, $2C
  65++ED43 1F BA 04 28                          DB $1F, $BA, $04, $28
  66++ED47 1F CB 00 2C                          DB $1F, $CB, $00, $2C
  67++ED4B 1D 31 04 14                          DB $1D, $31, $04, $14
  68++ED4F 1D 42 00 18                          DB $1D, $42, $00, $18
  69++ED53 06 B0 50 54                          DB $06, $B0, $50, $54
  70++ED57 14 99 30 34                          DB $14, $99, $30, $34
  71++ED5B 14 99 48 4C                          DB $14, $99, $48, $4C
  72++ED5F 14 99 38 3C                          DB $14, $99, $38, $3C
  73++ED63 14 99 40 44                          DB $14, $99, $40, $44
  74++ED67 13 99 3C 40                          DB $13, $99, $3C, $40
  75++ED6B 11 99 38 44                          DB $11, $99, $38, $44
  76++ED6F 13 99 34 48                          DB $13, $99, $34, $48
  77++ED73 13 99 30 4C                          DB $13, $99, $30, $4C
  78++ED77 1E 65 08 24                          DB $1E, $65, $08, $24
  79++ED7B 06 99 58 60                          DB $06, $99, $58, $60
  80++ED7F 06 99 5C 60                          DB $06, $99, $5C, $60
  81++ED83 08 99 58 5C                          DB $08, $99, $58, $5C
  82++ED87 06 99 64 68                          DB $06, $99, $64, $68
  83++ED8B 06 99 68 6C                          DB $06, $99, $68, $6C
  84++ED8F 08 99 64 6C                          DB $08, $99, $64, $6C
  85++ED93              Cobra_Mk_3_PEdgesSize:  equ $ - Cobra_Mk_3_PEdges
  86++ED93              Cobra_Mk_3_PEdgesCnt:   equ Cobra_Mk_3_PEdgesSize/4
  87++ED93 1F 00 3E 1F  Cobra_Mk_3_PNormals:	DB $1F, $00, $3E, $1F
  88++ED97 9F 12 37 10                          DB $9F, $12, $37, $10
  89++ED9B 1F 12 37 10                          DB $1F, $12, $37, $10
  90++ED9F 9F 10 34 0E                          DB $9F, $10, $34, $0E
  91++EDA3 1F 10 34 0E                          DB $1F, $10, $34, $0E
  92++EDA7 9F 0E 2F 00                          DB $9F, $0E, $2F, $00
  93++EDAB 1F 0E 2F 00                          DB $1F, $0E, $2F, $00
  94++EDAF 9F 3D 66 00                          DB $9F, $3D, $66, $00
  95++EDB3 1F 3D 66 00                          DB $1F, $3D, $66, $00
  96++EDB7 3F 00 00 50                          DB $3F, $00, $00, $50
  97++EDBB DF 07 2A 09                          DB $DF, $07, $2A, $09
  98++EDBF 5F 00 1E 06                          DB $5F, $00, $1E, $06
  99++EDC3 5F 07 2A 09                          DB $5F, $07, $2A, $09
 100++EDC7              Cobra_Mk_3_PNormalsSize:equ $ - Cobra_Mk_3_PNormals
 101++EDC7              Cobra_Mk_3_PLen:        equ $ - Cobra_Mk_3_P
 102++EDC7
# file closed: ./Data/ships/Cobra_Mk_3_P.asm
 101+ EDC7                                      include "Data/ships/Constrictor.asm"
# file opened: ./Data/ships/Constrictor.asm
   1++EDC7              ;                      0    1    2    3   4   5   6   7   8   9   10  11  12  13  14  15   16                    17                  18  19     20                     21
   2++EDC7              ;					   Scp  Missile   Edg Edg Lin Gun Exp Vtx Edg Bounty  Face             Edg                   Face                           Vertices
   3++EDC7              ;                      Deb  Lock      Lo  Hi  x4  Vtx Cnt x6  X1  lo  hi  x4  Dot Erg Spd  hi                    Hi                  Q   Laser  Lo                     hi
   4++EDC7 F3           Constrictor:    	    DB $F3
   5++EDC8 49 26                                DW $2649
   6++EDCA 48 EE                                DW ConstrictorEdges
   7++EDCC 60                                   DB ConstrictorEdgesSize
   8++EDCD 00 2E                                DB $00,$2E
   9++EDCF 11                                   DB ConstrictorVertSize /6
  10++EDD0 66                                   DB ConstrictorVertSize
  11++EDD1 18                                   DB ConstrictorEdgesCnt
  12++EDD2 18 00                                DB $18,$00
  13++EDD4 28                                   DB ConstrictorNormalsSize
  14++EDD5 2D C8 37                             DB $2D,$C8,$37
  15++EDD8 A8 EE                                DW ConstrictorNormals
  16++EDDA 02 2F                                DB $02,$2F
  17++EDDC E2 ED                                DW ConstrictorVertices
  18++EDDE 00 00                                DB 0,0                      ; Type and Tactics
  19++EDE0                                  ; missiles = 3
  20++EDE0 01                                   DB ShipCanAnger
  21++EDE1 FF                                   DB $FF                      ; chance of ECM module
  22++EDE2 14 07 50 5F  ConstrictorVertices     DB $14, $07, $50, $5F, $02, $99
  22++EDE6 02 99
  23++EDE8 14 07 50 DF                          DB $14, $07, $50, $DF, $01, $99
  23++EDEC 01 99
  24++EDEE 36 07 28 DF                          DB $36, $07, $28, $DF, $14, $99
  24++EDF2 14 99
  25++EDF4 36 07 28 FF                          DB $36, $07, $28, $FF, $45, $89
  25++EDF8 45 89
  26++EDFA 14 0D 28 BF                          DB $14, $0D, $28, $BF, $56, $88
  26++EDFE 56 88
  27++EE00 14 0D 28 3F                          DB $14, $0D, $28, $3F, $67, $88
  27++EE04 67 88
  28++EE06 36 07 28 7F                          DB $36, $07, $28, $7F, $37, $89
  28++EE0A 37 89
  29++EE0C 36 07 28 5F                          DB $36, $07, $28, $5F, $23, $99
  29++EE10 23 99
  30++EE12 14 0D 05 1F                          DB $14, $0D, $05, $1F, $FF, $FF
  30++EE16 FF FF
  31++EE18 14 0D 05 9F                          DB $14, $0D, $05, $9F, $FF, $FF
  31++EE1C FF FF
  32++EE1E 14 07 3E 52                          DB $14, $07, $3E, $52, $99, $99
  32++EE22 99 99
  33++EE24 14 07 3E D2                          DB $14, $07, $3E, $D2, $99, $99
  33++EE28 99 99
  34++EE2A 19 07 19 72                          DB $19, $07, $19, $72, $99, $99
  34++EE2E 99 99
  35++EE30 19 07 19 F2                          DB $19, $07, $19, $F2, $99, $99
  35++EE34 99 99
  36++EE36 0F 07 0F 6A                          DB $0F, $07, $0F, $6A, $99, $99
  36++EE3A 99 99
  37++EE3C 0F 07 0F EA                          DB $0F, $07, $0F, $EA, $99, $99
  37++EE40 99 99
  38++EE42 00 07 00 40                          DB $00, $07, $00, $40, $9F, $01
  38++EE46 9F 01
  39++EE48              ConstrictorVertSize     equ $  - ConstrictorVertices
  40++EE48 1F 09 00 04  ConstrictorEdges        DB $1F, $09, $00, $04, $1F, $19, $04, $08
  40++EE4C 1F 19 04 08
  41++EE50 1F 01 04 24                          DB $1F, $01, $04, $24, $1F, $02, $00, $20
  41++EE54 1F 02 00 20
  42++EE58 1F 29 00 1C                          DB $1F, $29, $00, $1C, $1F, $23, $1C, $20
  42++EE5C 1F 23 1C 20
  43++EE60 1F 14 08 24                          DB $1F, $14, $08, $24, $1F, $49, $08, $0C
  43++EE64 1F 49 08 0C
  44++EE68 1F 39 18 1C                          DB $1F, $39, $18, $1C, $1F, $37, $18, $20
  44++EE6C 1F 37 18 20
  45++EE70 1F 67 14 20                          DB $1F, $67, $14, $20, $1F, $56, $10, $24
  45++EE74 1F 56 10 24
  46++EE78 1F 45 0C 24                          DB $1F, $45, $0C, $24, $1F, $58, $0C, $10
  46++EE7C 1F 58 0C 10
  47++EE80 1F 68 10 14                          DB $1F, $68, $10, $14, $1F, $78, $14, $18
  47++EE84 1F 78 14 18
  48++EE88 1F 89 0C 18                          DB $1F, $89, $0C, $18, $1F, $06, $20, $24
  48++EE8C 1F 06 20 24
  49++EE90 12 99 28 30                          DB $12, $99, $28, $30, $05, $99, $30, $38
  49++EE94 05 99 30 38
  50++EE98 0A 99 38 28                          DB $0A, $99, $38, $28, $0A, $99, $2C, $3C
  50++EE9C 0A 99 2C 3C
  51++EEA0 05 99 34 3C                          DB $05, $99, $34, $3C, $12, $99, $2C, $34
  51++EEA4 12 99 2C 34
  52++EEA8              ConstrictorEdgesSize    equ $  - ConstrictorEdges
  53++EEA8              ConstrictorEdgesCnt     equ ConstrictorEdgesSize/4
  54++EEA8 1F 00 37 0F  ConstrictorNormals      DB $1F, $00, $37, $0F, $9F, $18, $4B, $14
  54++EEAC 9F 18 4B 14
  55++EEB0 1F 18 4B 14                          DB $1F, $18, $4B, $14, $1F, $2C, $4B, $00
  55++EEB4 1F 2C 4B 00
  56++EEB8 9F 2C 4B 00                          DB $9F, $2C, $4B, $00, $9F, $2C, $4B, $00
  56++EEBC 9F 2C 4B 00
  57++EEC0 1F 00 35 00                          DB $1F, $00, $35, $00, $1F, $2C, $4B, $00
  57++EEC4 1F 2C 4B 00
  58++EEC8 3F 00 00 A0                          DB $3F, $00, $00, $A0, $5F, $00, $1B, $00
  58++EECC 5F 00 1B 00
  59++EED0              ConstrictorNormalsSize  equ $  - ConstrictorNormals
  60++EED0              ConstrictorLen          equ $  - Constrictor
  61++EED0
# file closed: ./Data/ships/Constrictor.asm
 102+ EED0                                      include "Data/ships/Coriolis.asm"
# file opened: ./Data/ships/Coriolis.asm
   1++EED0 00           Coriolis:	            DB $00
   2++EED1 00 64                                DW $6400
   3++EED3 4B EF                                DW CoriolisEdges
   4++EED5 70                                   DB CoriolisEdgesSize
   5++EED6 00 36                                DB $00, $36
   6++EED8 10                                   DB CoriolisVertSize /6
   7++EED9 60                                   DB CoriolisVertSize
   8++EEDA 1C                                   DB CoriolisEdgesCnt
   9++EEDB 00 00                                DB $00, $00
  10++EEDD 38                                   DB CoriolisNormalsSize
  11++EEDE 78 F0 00                             DB $78, $F0, $00
  12++EEE1 BB EF                                DW CoriolisNormals
  13++EEE3 00 06                                DB $00, $06
  14++EEE5 EB EE                                DW CoriolisVertices
  15++EEE7 02 00                                DB ShipTypeStation,0                        ; Type and Tactics
  16++EEE9 00                                   DB 0                                        ; can't anger arbitrarily needs to see innocent bystander shot
  17++EEEA FF                                   DB $FF                                      ; will always have ECM
  18++EEEB A0 00 A0 1F  CoriolisVertices:	    DB $A0, $00, $A0, $1F, $10, $62
  18++EEEF 10 62
  19++EEF1 00 A0 A0 1F                          DB $00, $A0, $A0, $1F, $20, $83
  19++EEF5 20 83
  20++EEF7 A0 00 A0 9F                          DB $A0, $00, $A0, $9F, $30, $74
  20++EEFB 30 74
  21++EEFD 00 A0 A0 5F                          DB $00, $A0, $A0, $5F, $10, $54
  21++EF01 10 54
  22++EF03 A0 A0 00 5F                          DB $A0, $A0, $00, $5F, $51, $A6
  22++EF07 51 A6
  23++EF09 A0 A0 00 1F                          DB $A0, $A0, $00, $1F, $62, $B8
  23++EF0D 62 B8
  24++EF0F A0 A0 00 9F                          DB $A0, $A0, $00, $9F, $73, $C8
  24++EF13 73 C8
  25++EF15 A0 A0 00 DF                          DB $A0, $A0, $00, $DF, $54, $97
  25++EF19 54 97
  26++EF1B A0 00 A0 3F                          DB $A0, $00, $A0, $3F, $A6, $DB
  26++EF1F A6 DB
  27++EF21 00 A0 A0 3F                          DB $00, $A0, $A0, $3F, $B8, $DC
  27++EF25 B8 DC
  28++EF27 A0 00 A0 BF                          DB $A0, $00, $A0, $BF, $97, $DC
  28++EF2B 97 DC
  29++EF2D 00 A0 A0 7F                          DB $00, $A0, $A0, $7F, $95, $DA
  29++EF31 95 DA
  30++EF33 0A 1E A0 5E                          DB $0A, $1E, $A0, $5E, $00, $00
  30++EF37 00 00
  31++EF39 0A 1E A0 1E                          DB $0A, $1E, $A0, $1E, $00, $00
  31++EF3D 00 00
  32++EF3F 0A 1E A0 9E                          DB $0A, $1E, $A0, $9E, $00, $00
  32++EF43 00 00
  33++EF45 0A 1E A0 DE                          DB $0A, $1E, $A0, $DE, $00, $00
  33++EF49 00 00
  34++EF4B              CoriolisVertSize:       equ $ - CoriolisVertices
  35++EF4B 1F 10 00 0C  CoriolisEdges:	        DB $1F, $10, $00, $0C
  36++EF4F 1F 20 00 04                          DB $1F, $20, $00, $04
  37++EF53 1F 30 04 08                          DB $1F, $30, $04, $08
  38++EF57 1F 40 08 0C                          DB $1F, $40, $08, $0C
  39++EF5B 1F 51 0C 10                          DB $1F, $51, $0C, $10
  40++EF5F 1F 61 00 10                          DB $1F, $61, $00, $10
  41++EF63 1F 62 00 14                          DB $1F, $62, $00, $14
  42++EF67 1F 82 14 04                          DB $1F, $82, $14, $04
  43++EF6B 1F 83 04 18                          DB $1F, $83, $04, $18
  44++EF6F 1F 73 08 18                          DB $1F, $73, $08, $18
  45++EF73 1F 74 08 1C                          DB $1F, $74, $08, $1C
  46++EF77 1F 54 0C 1C                          DB $1F, $54, $0C, $1C
  47++EF7B 1F DA 20 2C                          DB $1F, $DA, $20, $2C
  48++EF7F 1F DB 20 24                          DB $1F, $DB, $20, $24
  49++EF83 1F DC 24 28                          DB $1F, $DC, $24, $28
  50++EF87 1F D9 28 2C                          DB $1F, $D9, $28, $2C
  51++EF8B 1F A5 10 2C                          DB $1F, $A5, $10, $2C
  52++EF8F 1F A6 10 20                          DB $1F, $A6, $10, $20
  53++EF93 1F B6 14 20                          DB $1F, $B6, $14, $20
  54++EF97 1F B8 14 24                          DB $1F, $B8, $14, $24
  55++EF9B 1F C8 18 24                          DB $1F, $C8, $18, $24
  56++EF9F 1F C7 18 28                          DB $1F, $C7, $18, $28
  57++EFA3 1F 97 1C 28                          DB $1F, $97, $1C, $28
  58++EFA7 1F 95 1C 2C                          DB $1F, $95, $1C, $2C
  59++EFAB 1E 00 30 34                          DB $1E, $00, $30, $34
  60++EFAF 1E 00 34 38                          DB $1E, $00, $34, $38
  61++EFB3 1E 00 38 3C                          DB $1E, $00, $38, $3C
  62++EFB7 1E 00 3C 30                          DB $1E, $00, $3C, $30
  63++EFBB              CoriolisEdgesSize:      equ $ - CoriolisEdges
  64++EFBB              CoriolisEdgesCnt:       equ CoriolisEdgesSize/4
  65++EFBB 1F 00 00 A0  CoriolisNormals:	    DB $1F, $00, $00, $A0
  66++EFBF 5F 6B 6B 6B                          DB $5F, $6B, $6B, $6B
  67++EFC3 1F 6B 6B 6B                          DB $1F, $6B, $6B, $6B
  68++EFC7 9F 6B 6B 6B                          DB $9F, $6B, $6B, $6B
  69++EFCB DF 6B 6B 6B                          DB $DF, $6B, $6B, $6B
  70++EFCF 5F 00 A0 00                          DB $5F, $00, $A0, $00
  71++EFD3 1F A0 00 00                          DB $1F, $A0, $00, $00
  72++EFD7 9F A0 00 00                          DB $9F, $A0, $00, $00
  73++EFDB 1F 00 A0 00                          DB $1F, $00, $A0, $00
  74++EFDF FF 6B 6B 6B                          DB $FF, $6B, $6B, $6B
  75++EFE3 7F 6B 6B 6B                          DB $7F, $6B, $6B, $6B
  76++EFE7 3F 6B 6B 6B                          DB $3F, $6B, $6B, $6B
  77++EFEB BF 6B 6B 6B                          DB $BF, $6B, $6B, $6B
  78++EFEF 3F 00 00 A0                          DB $3F, $00, $00, $A0
  79++EFF3              CoriolisNormalsSize:    equ $ - CoriolisNormals
  80++EFF3              CoriolisLen:            equ $ - Coriolis
  81++EFF3
# file closed: ./Data/ships/Coriolis.asm
 103+ EFF3                                      include "Data/ships/Cougar.asm"
# file opened: ./Data/ships/Cougar.asm
   1++EFF3 03           Cougar:	                DB $03
   2++EFF4 24 13                                DW $1324
   3++EFF6 80 F0                                DW CougarEdges
   4++EFF8 64                                   DB CougarEdgesSize
   5++EFF9 00 2A                                DB $00, $2A
   6++EFFB 13                                   DB CougarVertSize /6
   7++EFFC 72                                   DB CougarVertSize
   8++EFFD 19                                   DB CougarEdgesCnt
   9++EFFE 00 00                                DB $00, $00
  10++F000 18                                   DB CougarNormalsSize
  11++F001 22 FC 28                             DB $22, $FC, $28
  12++F004 E4 F0                                DW CougarNormals
  13++F006 02 34                                DB $02, $34
  14++F008 0E F0                                DW CougarVertices
  15++F00A 00 00                                DB 0,0                      ; Type and Tactics
  16++F00C 01                                   DB ShipCanAnger
  17++F00D B0                                   DB $B0                      ; chance of ECM module
  18++F00E 00 05 43 1F  CougarVertices:	        DB $00, $05, $43, $1F, $02, $44
  18++F012 02 44
  19++F014 14 00 28 9F                          DB $14, $00, $28, $9F, $01, $22
  19++F018 01 22
  20++F01A 28 00 28 BF                          DB $28, $00, $28, $BF, $01, $55
  20++F01E 01 55
  21++F020 00 0E 28 3E                          DB $00, $0E, $28, $3E, $04, $55
  21++F024 04 55
  22++F026 00 0E 28 7E                          DB $00, $0E, $28, $7E, $12, $35
  22++F02A 12 35
  23++F02C 14 00 28 1F                          DB $14, $00, $28, $1F, $23, $44
  23++F030 23 44
  24++F032 28 00 28 3F                          DB $28, $00, $28, $3F, $34, $55
  24++F036 34 55
  25++F038 24 00 38 9F                          DB $24, $00, $38, $9F, $01, $11
  25++F03C 01 11
  26++F03E 3C 00 14 BF                          DB $3C, $00, $14, $BF, $01, $11
  26++F042 01 11
  27++F044 24 00 38 1F                          DB $24, $00, $38, $1F, $34, $44
  27++F048 34 44
  28++F04A 3C 00 14 3F                          DB $3C, $00, $14, $3F, $34, $44
  28++F04E 34 44
  29++F050 00 07 23 12                          DB $00, $07, $23, $12, $00, $44
  29++F054 00 44
  30++F056 00 08 19 14                          DB $00, $08, $19, $14, $00, $44
  30++F05A 00 44
  31++F05C 0C 02 2D 94                          DB $0C, $02, $2D, $94, $00, $00
  31++F060 00 00
  32++F062 0C 02 2D 14                          DB $0C, $02, $2D, $14, $44, $44
  32++F066 44 44
  33++F068 0A 06 28 B4                          DB $0A, $06, $28, $B4, $55, $55
  33++F06C 55 55
  34++F06E 0A 06 28 F4                          DB $0A, $06, $28, $F4, $55, $55
  34++F072 55 55
  35++F074 0A 06 28 74                          DB $0A, $06, $28, $74, $55, $55
  35++F078 55 55
  36++F07A 0A 06 28 34                          DB $0A, $06, $28, $34, $55, $55
  36++F07E 55 55
  37++F080              CougarVertSize:         equ $ - CougarVertices
  38++F080 1F 02 00 04  CougarEdges:	        DB $1F, $02, $00, $04
  39++F084 1F 01 04 1C                          DB $1F, $01, $04, $1C
  40++F088 1F 01 1C 20                          DB $1F, $01, $1C, $20
  41++F08C 1F 01 20 08                          DB $1F, $01, $20, $08
  42++F090 1E 05 08 0C                          DB $1E, $05, $08, $0C
  43++F094 1E 45 0C 18                          DB $1E, $45, $0C, $18
  44++F098 1E 15 08 10                          DB $1E, $15, $08, $10
  45++F09C 1E 35 10 18                          DB $1E, $35, $10, $18
  46++F0A0 1F 34 18 28                          DB $1F, $34, $18, $28
  47++F0A4 1F 34 28 24                          DB $1F, $34, $28, $24
  48++F0A8 1F 34 24 14                          DB $1F, $34, $24, $14
  49++F0AC 1F 24 14 00                          DB $1F, $24, $14, $00
  50++F0B0 1B 04 00 0C                          DB $1B, $04, $00, $0C
  51++F0B4 1B 12 04 10                          DB $1B, $12, $04, $10
  52++F0B8 1B 23 14 10                          DB $1B, $23, $14, $10
  53++F0BC 1A 01 04 08                          DB $1A, $01, $04, $08
  54++F0C0 1A 34 14 18                          DB $1A, $34, $14, $18
  55++F0C4 14 00 30 34                          DB $14, $00, $30, $34
  56++F0C8 12 00 34 2C                          DB $12, $00, $34, $2C
  57++F0CC 12 44 2C 38                          DB $12, $44, $2C, $38
  58++F0D0 14 44 38 30                          DB $14, $44, $38, $30
  59++F0D4 12 55 3C 40                          DB $12, $55, $3C, $40
  60++F0D8 14 55 40 48                          DB $14, $55, $40, $48
  61++F0DC 12 55 48 44                          DB $12, $55, $48, $44
  62++F0E0 14 55 44 3C                          DB $14, $55, $44, $3C
  63++F0E4              CougarEdgesSize:        equ $ - CougarEdges
  64++F0E4              CougarEdgesCnt:         equ CougarEdgesSize/4
  65++F0E4 9F 10 2E 04  CougarNormals:	        DB $9F, $10, $2E, $04
  66++F0E8 DF 10 2E 04                          DB $DF, $10, $2E, $04
  67++F0EC 5F 00 1B 05                          DB $5F, $00, $1B, $05
  68++F0F0 5F 10 2E 04                          DB $5F, $10, $2E, $04
  69++F0F4 1F 10 2E 04                          DB $1F, $10, $2E, $04
  70++F0F8 3E 00 00 A0                          DB $3E, $00, $00, $A0
  71++F0FC              CougarNormalsSize:      equ $ - CougarNormals
  72++F0FC              CougarLen:              equ $ - Cougar
  73++F0FC
# file closed: ./Data/ships/Cougar.asm
 104+ F0FC                                      include "Data/ships/Dodo.asm"
# file opened: ./Data/ships/Dodo.asm
   1++F0FC 00           Dodo:	                DB $00
   2++F0FD 90 7E                                DW $7E90
   3++F0FF A7 F1                                DW DodoEdges
   4++F101 88                                   DB DodoEdgesSize
   5++F102 00 36                                DB $00, $36
   6++F104 18                                   DB DodoVertSize /6
   7++F105 90                                   DB DodoVertSize
   8++F106 22                                   DB DodoEdgesCnt
   9++F107 00 00                                DB $00, $00
  10++F109 30                                   DB DodoNormalsSize
  11++F10A 7D F0 00                             DB $7D, $F0, $00
  12++F10D 2F F2                                DW DodoNormals
  13++F10F 00 00                                DB $00, $00
  14++F111 17 F1                                DW DodoVertices
  15++F113 02 00                                DB ShipTypeStation,0                      ; Type and Tactics
  16++F115 00                                   DB 0
  17++F116 FF                                   DB $FF                                      ; will always have ECM
  18++F117 00 96 C4 1F  DodoVertices:	        DB $00, $96, $C4, $1F, $01, $55
  18++F11B 01 55
  19++F11D 8F 2E C4 1F                          DB $8F, $2E, $C4, $1F, $01, $22
  19++F121 01 22
  20++F123 58 79 C4 5F                          DB $58, $79, $C4, $5F, $02, $33
  20++F127 02 33
  21++F129 58 79 C4 DF                          DB $58, $79, $C4, $DF, $03, $44
  21++F12D 03 44
  22++F12F 8F 2E C4 9F                          DB $8F, $2E, $C4, $9F, $04, $55
  22++F133 04 55
  23++F135 00 F3 2E 1F                          DB $00, $F3, $2E, $1F, $15, $66
  23++F139 15 66
  24++F13B E7 4B 2E 1F                          DB $E7, $4B, $2E, $1F, $12, $77
  24++F13F 12 77
  25++F141 8F C4 2E 5F                          DB $8F, $C4, $2E, $5F, $23, $88
  25++F145 23 88
  26++F147 8F C4 2E DF                          DB $8F, $C4, $2E, $DF, $34, $99
  26++F14B 34 99
  27++F14D E7 4B 2E 9F                          DB $E7, $4B, $2E, $9F, $45, $AA
  27++F151 45 AA
  28++F153 8F C4 2E 3F                          DB $8F, $C4, $2E, $3F, $16, $77
  28++F157 16 77
  29++F159 E7 4B 2E 7F                          DB $E7, $4B, $2E, $7F, $27, $88
  29++F15D 27 88
  30++F15F 00 F3 2E 7F                          DB $00, $F3, $2E, $7F, $38, $99
  30++F163 38 99
  31++F165 E7 4B 2E FF                          DB $E7, $4B, $2E, $FF, $49, $AA
  31++F169 49 AA
  32++F16B 8F C4 2E BF                          DB $8F, $C4, $2E, $BF, $56, $AA
  32++F16F 56 AA
  33++F171 58 79 C4 3F                          DB $58, $79, $C4, $3F, $67, $BB
  33++F175 67 BB
  34++F177 8F 2E C4 7F                          DB $8F, $2E, $C4, $7F, $78, $BB
  34++F17B 78 BB
  35++F17D 00 96 C4 7F                          DB $00, $96, $C4, $7F, $89, $BB
  35++F181 89 BB
  36++F183 8F 2E C4 FF                          DB $8F, $2E, $C4, $FF, $9A, $BB
  36++F187 9A BB
  37++F189 58 79 C4 BF                          DB $58, $79, $C4, $BF, $6A, $BB
  37++F18D 6A BB
  38++F18F 10 20 C4 9E                          DB $10, $20, $C4, $9E, $00, $00
  38++F193 00 00
  39++F195 10 20 C4 DE                          DB $10, $20, $C4, $DE, $00, $00
  39++F199 00 00
  40++F19B 10 20 C4 17                          DB $10, $20, $C4, $17, $00, $00
  40++F19F 00 00
  41++F1A1 10 20 C4 57                          DB $10, $20, $C4, $57, $00, $00
  41++F1A5 00 00
  42++F1A7              DodoVertSize:           equ $ - DodoVertices
  43++F1A7 1F 01 00 04  DodoEdges:	            DB $1F, $01, $00, $04
  44++F1AB 1F 02 04 08                          DB $1F, $02, $04, $08
  45++F1AF 1F 03 08 0C                          DB $1F, $03, $08, $0C
  46++F1B3 1F 04 0C 10                          DB $1F, $04, $0C, $10
  47++F1B7 1F 05 10 00                          DB $1F, $05, $10, $00
  48++F1BB 1F 16 14 28                          DB $1F, $16, $14, $28
  49++F1BF 1F 17 28 18                          DB $1F, $17, $28, $18
  50++F1C3 1F 27 18 2C                          DB $1F, $27, $18, $2C
  51++F1C7 1F 28 2C 1C                          DB $1F, $28, $2C, $1C
  52++F1CB 1F 38 1C 30                          DB $1F, $38, $1C, $30
  53++F1CF 1F 39 30 20                          DB $1F, $39, $30, $20
  54++F1D3 1F 49 20 34                          DB $1F, $49, $20, $34
  55++F1D7 1F 4A 34 24                          DB $1F, $4A, $34, $24
  56++F1DB 1F 5A 24 38                          DB $1F, $5A, $24, $38
  57++F1DF 1F 56 38 14                          DB $1F, $56, $38, $14
  58++F1E3 1F 7B 3C 40                          DB $1F, $7B, $3C, $40
  59++F1E7 1F 8B 40 44                          DB $1F, $8B, $40, $44
  60++F1EB 1F 9B 44 48                          DB $1F, $9B, $44, $48
  61++F1EF 1F AB 48 4C                          DB $1F, $AB, $48, $4C
  62++F1F3 1F 6B 4C 3C                          DB $1F, $6B, $4C, $3C
  63++F1F7 1F 15 00 14                          DB $1F, $15, $00, $14
  64++F1FB 1F 12 04 18                          DB $1F, $12, $04, $18
  65++F1FF 1F 23 08 1C                          DB $1F, $23, $08, $1C
  66++F203 1F 34 0C 20                          DB $1F, $34, $0C, $20
  67++F207 1F 45 10 24                          DB $1F, $45, $10, $24
  68++F20B 1F 67 28 3C                          DB $1F, $67, $28, $3C
  69++F20F 1F 78 2C 40                          DB $1F, $78, $2C, $40
  70++F213 1F 89 30 44                          DB $1F, $89, $30, $44
  71++F217 1F 9A 34 48                          DB $1F, $9A, $34, $48
  72++F21B 1F 6A 38 4C                          DB $1F, $6A, $38, $4C
  73++F21F 1E 00 50 54                          DB $1E, $00, $50, $54
  74++F223 14 00 54 5C                          DB $14, $00, $54, $5C
  75++F227 17 00 5C 58                          DB $17, $00, $5C, $58
  76++F22B 14 00 58 50                          DB $14, $00, $58, $50
  77++F22F              DodoEdgesSize:          equ $ - DodoEdges
  78++F22F              DodoEdgesCnt:           equ DodoEdgesSize/4
  79++F22F 1F 00 00 C4  DodoNormals:	        DB $1F, $00, $00, $C4
  80++F233 1F 67 8E 58                          DB $1F, $67, $8E, $58
  81++F237 5F A9 37 59                          DB $5F, $A9, $37, $59
  82++F23B 5F 00 B0 58                          DB $5F, $00, $B0, $58
  83++F23F DF A9 37 59                          DB $DF, $A9, $37, $59
  84++F243 9F 67 8E 58                          DB $9F, $67, $8E, $58
  85++F247 3F 00 B0 58                          DB $3F, $00, $B0, $58
  86++F24B 3F A9 37 59                          DB $3F, $A9, $37, $59
  87++F24F 7F 67 8E 58                          DB $7F, $67, $8E, $58
  88++F253 FF 67 8E 58                          DB $FF, $67, $8E, $58
  89++F257 BF A9 37 59                          DB $BF, $A9, $37, $59
  90++F25B 3F 00 00 C4                          DB $3F, $00, $00, $C4
  91++F25F              DodoNormalsSize:        equ $ - DodoNormals
  92++F25F              DodoLen:                equ $ - Dodo
  93++F25F
# file closed: ./Data/ships/Dodo.asm
# file closed: ./Data/ShipModelMetaData1.asm
 730  F25F                  DISPLAY "Bank ",BankShipModels1," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels1"
 731  F25F              ; Bank 66  ------------------------------------------------------------------------------------------------------------------------
 732  F25F                  SLOT    DispMarketAddr
 733  F25F                  PAGE    BankDispMarket
 734  F25F                  ORG     DispMarketAddr
 735  C000                  INCLUDE "./Menus/market_prices_disp.asm"
# file opened: ./Menus/market_prices_disp.asm
   1+ C000 4D 61 72 6B  mktdisp_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 70 8E  mktdisp_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 36 8F  						DW $0220,name_expanded
   4+ C018 80 0B 90 8A  						DW $0B80,WordUnit
   5+ C01C B0 0B D9 8C  						DW $0BB0,WordQuantity
   6+ C020 08 13 B7 8C  						DW $1308,WordProduct
   7+ C024 60 13 BF 8C  						DW $1360,WordUoM
   8+ C028 80 13 C3 8C  						DW $1380,WordPrice
   9+ C02C B0 13 E7 8C  						DW $13B0,WordStock
  10+ C030 E0 13 E3 8C  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_mktdisp_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_mktdisp_quantity    DB "999",0
  24+ C03D 39 39 39 00  txt_mktdisp_cargo       DB "999",0
  25+ C041 00 00        mktdisp_cursor			DW  $0000
  26+ C043              mktdisp_position		equ $2008
  27+ C043              mktdisp_uom				equ	$68
  28+ C043              mktdisp_price 			equ $88
  29+ C043              mktdisp_Quantity		equ	$B0
  30+ C043              mktdisp_Cargo           equ $E0
  31+ C043              mktdisp_UomOffset		equ 46
  32+ C043 20 20 20 20  mktdisp_blank_line      DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mktdisp_hold_level      DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mktdisp_cash			DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mktdisp_selected_row    db  0
  36+ C075
  37+ C075              mktdisp_cash_position   equ $B048
  38+ C075 00 00 00...  mktdisp_cash_amount		DS 20
  39+ C089 20 43 72 20  mktdisp_cash_UoM        DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mktdisp_cargo_position  equ $A848
  41+ C094 00 00 00...  mktdisp_cargo_amount	DS 20
  42+ C0A8 20 54 6F 6E  mktdisp_cargo_UoM       DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3 CD CA C0     mktdisp_DispDEIXtoIY1DP:    call    mktdisp_DispDEIXtoIY
  46+ C0B6 FD 36 02 00                          ld (iy+2),0
  47+ C0BA FD 7E 00                             ld      a,(IY+0)
  48+ C0BD FD 77 01                             ld      (IY+1),a
  49+ C0C0 3E 2E                                ld      a,"."
  50+ C0C2 FD 77 00                             ld      (IY+0),a
  51+ C0C5 FD 23                                inc     IY
  52+ C0C7 FD 23                                inc     IY
  53+ C0C9 C9                                   ret
  54+ C0CA              ;----------------------------------------------------------------------------------------------------------------------------------
  55+ C0CA DD 22 5F C1  mktdisp_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  56+ C0CE ED 53 61 C1                          ld (.MKTclcn32zIX),de
  57+ C0D2 DD 21 5B C1                          ld ix,.MKTclcn32t+36
  58+ C0D6 06 09                                ld b,9
  59+ C0D8 0E 00                                ld c,0
  60+ C0DA 3E 30        .MKTclcn321:            ld a,'0'
  61+ C0DC B7                                   or a
  62+ C0DD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  63+ C0E0 DD 56 01                             ld d,(ix+1)
  64+ C0E3 2A 5F C1                             ld hl,(.MKTclcn32z)
  65+ C0E6 ED 52                                sbc hl,de
  66+ C0E8 22 5F C1                             ld (.MKTclcn32z),hl
  67+ C0EB DD 5E 02                             ld e,(ix+2)
  68+ C0EE DD 56 03                             ld d,(ix+3)
  69+ C0F1 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  70+ C0F4 ED 52                                sbc hl,de
  71+ C0F6 22 61 C1                             ld (.MKTclcn32zIX),hl
  72+ C0F9 38 04                                jr c,.MKTclcn325
  73+ C0FB 0C                                   inc c
  74+ C0FC 3C                                   inc a
  75+ C0FD 18 DE                                jr .MKTclcn322
  76+ C0FF DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  77+ C102 DD 56 01                             ld d,(ix+1)
  78+ C105 2A 5F C1                             ld hl,(.MKTclcn32z)
  79+ C108 19                                   add hl,de
  80+ C109 22 5F C1                             ld (.MKTclcn32z),hl
  81+ C10C DD 5E 02                             ld e,(ix+2)
  82+ C10F DD 56 03                             ld d,(ix+3)
  83+ C112 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  84+ C115 ED 5A                                adc hl,de
  85+ C117 22 61 C1                             ld (.MKTclcn32zIX),hl
  86+ C11A 11 FC FF                             ld de,-4
  87+ C11D DD 19                                add ix,de
  88+ C11F 0C                                   inc c
  89+ C120 0D                                   dec c
  90+ C121 28 05                                jr z,.MKTclcn323
  91+ C123 FD 77 00                             ld (iy+0),a
  92+ C126 FD 23                                inc iy
  93+ C128 10 B0        .MKTclcn323:            djnz .MKTclcn321
  94+ C12A 3A 5F C1                             ld a,(.MKTclcn32z)
  95+ C12D C6 30                                add A,'0'
  96+ C12F FD 77 00                             ld (iy+0),a
  97+ C132 FD 36 01 00                          ld (iy+1),0
  98+ C136 C9                                   ret
  99+ C137 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  99+ C13B 0A 00 00 00
  99+ C13F 64 00 00 00
  99+ C143 E8 03 00 00
  99+ C147 10 27 00 00
 100+ C14B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 100+ C14F 40 42 0F 00
 100+ C153 80 96 98 00
 100+ C157 00 E1 F5 05
 100+ C15B 00 CA 9A 3B
 101+ C15F 00 00        .MKTclcn32z             ds 2
 102+ C161 00 00        .MKTclcn32zIX           ds 2
 103+ C163              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C163              ; "DispHL, writes HL to DE address"
 105+ C163 01 F0 D8     MPD_DispHLtoDE:         ld	bc,-10000
 106+ C166 CD 7C C1                             call	MPD_Num1
 107+ C169 01 18 FC                             ld	bc,-1000
 108+ C16C CD 7C C1                             call	MPD_Num1
 109+ C16F 01 9C FF                             ld	bc,-100
 110+ C172 CD 7C C1                             call	MPD_Num1
 111+ C175 0E F6                                ld	c,-10
 112+ C177 CD 7C C1                             call	MPD_Num1
 113+ C17A 0E FF                                ld	c,-1
 114+ C17C 3E 2F        MPD_Num1:	            ld	a,'0'-1
 115+ C17E 3C           .Num2:	                inc	a
 116+ C17F 09                                   add	hl,bc
 117+ C180 38 FC                                jr	c,.Num2
 118+ C182 ED 42                                sbc	hl,bc
 119+ C184 12                                   ld	(de),a
 120+ C185 13                                   inc	de
 121+ C186 C9                                   ret
 122+ C187              ;----------------------------------------------------------------------------------------------------------------------------------
 123+ C187 26 00        MPD_DispAtoDE:          ld h,0
 124+ C189 6F                                   ld l,a
 125+ C18A C3 63 C1                             jp MPD_DispHLtoDE
 126+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 127+ C18D 26 00        MPD_DispPriceAtoDE:     ld h,0
 128+ C18F 6F                                   ld l,a
 129+ C190 01 9C FF                             ld	bc,-100
 130+ C193 CD A3 C1                             call	.NumLeadBlank1
 131+ C196 0E F6                                ld	c,-10
 132+ C198 CD 7C C1                             call	MPD_Num1
 133+ C19B 3E 2E                                ld		a,'.'					; we could assume preformat but
 134+ C19D 12                                   ld		(de),a					; we can optimse that later TODO
 135+ C19E 13                                   inc		de						; with just an inc De
 136+ C19F 0E FF                                ld	c,-1
 137+ C1A1 18 D9                                jr		MPD_Num1
 138+ C1A3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 139+ C1A5 3C           .NumLeadBlank2:	        inc	a
 140+ C1A6 09                                   add	hl,bc
 141+ C1A7 38 FC                                jr	c,.NumLeadBlank2
 142+ C1A9 FE 30                                cp	'0'
 143+ C1AB 20 02                                jr	nz,.DontBlank
 144+ C1AD 3E 20        .Blank:                 ld	a,' '
 145+ C1AF ED 42        .DontBlank:	            sbc	hl,bc
 146+ C1B1 12                                   ld	(de),a
 147+ C1B2 13                                   inc	de
 148+ C1B3 C9                                   ret
 149+ C1B4              ;----------------------------------------------------------------------------------------------------------------------------------
 150+ C1B4 FE 00        MPD_DispQtyAtoDE:       cp	0
 151+ C1B6 28 30                                jr	z,.NoStock
 152+ C1B8 26 00                                ld h,0
 153+ C1BA 6F                                   ld l,a
 154+ C1BB 01 9C FF                             ld	bc,-100
 155+ C1BE CD D7 C1                             call	.NumLeadBlank1
 156+ C1C1 FE 20        .WasLead0:              cp      ' '
 157+ C1C3 20 09                                jr      nz,.NotHundredsZero
 158+ C1C5 0E F6                                ld	c,-10
 159+ C1C7 CD D7 C1                             call	.NumLeadBlank1
 160+ C1CA 0E FF                                ld	c,-1
 161+ C1CC 18 AE                                jr		MPD_Num1
 162+ C1CE 0E F6        .NotHundredsZero:       ld	c,-10
 163+ C1D0 CD 7C C1                             call	MPD_Num1
 164+ C1D3 0E FF                                ld	c,-1
 165+ C1D5 18 A5                                jr		MPD_Num1
 166+ C1D7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 167+ C1D9 3C           .NumLeadBlank2:	        inc	a
 168+ C1DA 09                                   add	hl,bc
 169+ C1DB 38 FC                                jr	c,.NumLeadBlank2
 170+ C1DD FE 30                                cp	'0'
 171+ C1DF 20 02                                jr	nz,.DontBlank
 172+ C1E1 3E 20        .Blank:                 ld	a,' '
 173+ C1E3 ED 42        .DontBlank:	            sbc	hl,bc
 174+ C1E5 12                                   ld	(de),a
 175+ C1E6 13                                   inc	de
 176+ C1E7 C9                                   ret
 177+ C1E8 3E 20        .NoStock:               ld	a,' '
 178+ C1EA 12                                   ld	(de),a
 179+ C1EB 13                                   inc	de
 180+ C1EC 12                                   ld	(de),a
 181+ C1ED 13                                   inc	de
 182+ C1EE 3E 2D                                ld	a,'-'
 183+ C1F0 12                                   ld	(de),a
 184+ C1F1 13                                   inc de
 185+ C1F2 C9                                   ret
 186+ C1F3              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ C1F3              MPD_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C1F3
   2++C1F3              ;">print_boilder_text hl = text structure, b = message count"
   3++C1F3              .BoilerTextLoop:
   4++C1F3 C5           	push		bc			; Save Message Count loop value
   5++C1F4 4E           	ld			c,(hl)		; Get Row into b
   6++C1F5 23           	inc			hl
   7++C1F6 46           	ld			b,(hl)		; Get Col into b
   8++C1F7 23           	inc			hl
   9++C1F8 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C1F9 23           	inc			hl
  11++C1FA 56           	ld			d,(hl)		; Get text address Hi into E
  12++C1FB 23           	inc			hl
  13++C1FC E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C1FD EB           	ex			de,hl		; now hl = address of text data
  15++C1FE 1E FF        	ld			e,txt_status_colour
  16++C200 C5           	push		bc
  17++C201 D1           	pop			de
  18++C202                  MMUSelectLayer1
  18++C202 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C206 CD C8 E0     	call		l1_print_at
  20++C209 E1           	pop			hl
  21++C20A C1           	pop			bc
  22++C20B 10 E6        	djnz		.BoilerTextLoop
  23++C20D C9           	ret
  24++C20E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 188+ C20E              ;----------------------------------------------------------------------------------------------------------------------------------
 189+ C20E 2A 79 86     mktdisp_GetCash:            ld		hl,(Cash+2)
 190+ C211 EB                                   ex      de,hl
 191+ C212 DD 2A 77 86                          ld      ix,(Cash)
 192+ C216 FD 21 75 C0                          ld		iy,mktdisp_cash_amount
 193+ C21A CD B3 C0                             call 	mktdisp_DispDEIXtoIY1DP
 194+ C21D FD E5                                push    IY
 195+ C21F D1                                   pop     de
 196+ C220 21 89 C0                             ld      hl,mktdisp_cash_UoM
 197+ C223 01 0B 00                             ld      bc,11
 198+ C226 ED B0                                ldir
 199+ C228 C9                                   ret
 200+ C229              ;----------------------------------------------------------------------------------------------------------------------------------
 201+ C229 11 00 00     mktdisp_GetCargo:   	ld      de,0
 202+ C22C DD 21 00 00                          ld      ix,0
 203+ C230 3A 7D 86                             ld      a,(CargoRunningLoad)
 204+ C233 DD 6F                                ld      ixl,a
 205+ C235 FD 21 94 C0                          ld		iy,mktdisp_cargo_amount
 206+ C239 CD CA C0                             call 	mktdisp_DispDEIXtoIY
 207+ C23C FD E5                                push    IY
 208+ C23E D1                                   pop     de
 209+ C23F 13                                   inc     de
 210+ C240 21 A8 C0                             ld      hl,mktdisp_cargo_UoM
 211+ C243 01 0B 00                             ld      bc,11
 212+ C246 ED B0                                ldir
 213+ C248 C9                                   ret
 214+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 215+ C249 CD 29 C2     mktdisp_DisplayCargo:   call	mktdisp_GetCargo
 216+ C24C 21 94 C0                             ld		hl,mktdisp_cargo_amount
 217+ C24F 11 48 A8                             ld      de,mktdisp_cargo_position
 218+ C252                                      MMUSelectLayer1
 218+ C252 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 219+ C256 CD C8 E0                             call	l1_print_at
 220+ C259 C9                                   ret
 221+ C25A              ;----------------------------------------------------------------------------------------------------------------------------------
 222+ C25A CD 0E C2     mktdisp_DisplayCash:        call	mktdisp_GetCash
 223+ C25D 21 75 C0                             ld		hl,mktdisp_cash_amount
 224+ C260 11 48 B0                             ld      de,mktdisp_cash_position
 225+ C263                                      MMUSelectLayer1
 225+ C263 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 226+ C267 CD C8 E0                             call	l1_print_at
 227+ C26A C9                                   ret
 228+ C26B              ;----------------------------------------------------------------------------------------------------------------------------------
 229+ C26B              ; "A = stock item number"
 230+ C26B F5           PrintMktDispItem:       push     af
 231+ C26C 21 08 20                             ld      hl,mktdisp_position
 232+ C26F 57                                   ld      d,a
 233+ C270 1E 08                                ld      e,8
 234+ C272 ED 30                                mul
 235+ C274 53                                   ld      d,e
 236+ C275 1E 00                                ld      e,0
 237+ C277 19                                   add     hl,de
 238+ C278 22 41 C0                             ld      (mktdisp_cursor),hl
 239+ C27B EB                                   ex      hl,de
 240+ C27C 21 43 C0                             ld      hl,mktdisp_blank_line
 241+ C27F                                      MMUSelectLayer1
 241+ C27F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 242+ C283 CD C8 E0                             call	l1_print_at
 243+ C286 F1                                   pop     af
 244+ C287 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 245+ C28B FD 21 7E 86                          ld      iy,CargoTonnes
 246+ C28F 1E 08                                ld		e,8
 247+ C291 57                                   ld		d,a
 248+ C292 ED 30                                mul
 249+ C294 DD 19                                add		ix,de				; Move down a row ix += a * 8
 250+ C296 16 00                                ld      d,0
 251+ C298 5F                                   ld      e,a
 252+ C299 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 253+ C29B              .GetName:               MMUSelectStockTable
 253+ C29B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 254+ C29F DD 7E 00                             ld		a,(ix+0)
 255+ C2A2 21 14 8D                             ld		hl,WordIdx
 256+ C2A5 CD E9 89                             call	getTableText
 257+ C2A8 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 258+ C2AC                                      MMUSelectLayer1
 258+ C2AC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2B0 CD C8 E0                             call	l1_print_at
 260+ C2B3              .GetUom                 MMUSelectStockTable
 260+ C2B3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 261+ C2B7 DD 7E 07                             ld		a,(ix+7)
 262+ C2BA C6 2E                                add		a,mktdisp_UomOffset
 263+ C2BC 21 14 8D                             ld		hl,WordIdx
 264+ C2BF CD E9 89                             call	getTableText
 265+ C2C2 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 266+ C2C6 1E 68                                ld		e,mktdisp_uom
 267+ C2C8                                      MMUSelectLayer1
 267+ C2C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 268+ C2CC CD C8 E0                             call	l1_print_at
 269+ C2CF              .GetPrice:              MMUSelectStockTable
 269+ C2CF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 270+ C2D3 DD 7E 02                             ld		a,(ix+2)
 271+ C2D6 11 34 C0                             ld		de,txt_mktdisp_amount
 272+ C2D9 CD 8D C1                             call	MPD_DispPriceAtoDE
 273+ C2DC 21 34 C0                             ld		hl,txt_mktdisp_amount
 274+ C2DF ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 275+ C2E3 1E 88                                ld		e,mktdisp_price
 276+ C2E5                                      MMUSelectLayer1
 276+ C2E5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 277+ C2E9 CD C8 E0                             call	l1_print_at
 278+ C2EC              .GetQty:                MMUSelectStockTable
 278+ C2EC ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 279+ C2F0 DD 7E 01                             ld		a,(ix+1)
 280+ C2F3 11 39 C0                             ld		de,txt_mktdisp_quantity
 281+ C2F6 CD B4 C1                             call	MPD_DispQtyAtoDE
 282+ C2F9 21 39 C0                             ld		hl,txt_mktdisp_quantity
 283+ C2FC ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 284+ C300 1E B0                                ld		e,mktdisp_Quantity
 285+ C302                                      MMUSelectLayer1
 285+ C302 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 286+ C306 CD C8 E0                             call	l1_print_at
 287+ C309 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 288+ C30C 11 3D C0                             ld      de,txt_mktdisp_cargo
 289+ C30F CD B4 C1                             call	MPD_DispQtyAtoDE
 290+ C312 21 3D C0                             ld      hl,txt_mktdisp_cargo
 291+ C315 ED 5B 41 C0                          ld      de,(mktdisp_cursor)
 292+ C319 1E E0                                ld      e,mktdisp_Cargo
 293+ C31B                                      MMUSelectLayer1
 293+ C31B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C31F CD C8 E0                             call	l1_print_at
 295+ C322 C9                                   ret
 296+ C323
 297+ C323              draw_mktdisp_prices_menu:InitNoDoubleBuffer
 297+ C323             >                            MMUSelectLayer1
 297+ C323 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 297+ C327 CD 80 E0    >                            call	l1_cls
 297+ C32A 3E 07       >                            ld		a,7
 297+ C32C CD 9B E0    >                            call	l1_attr_cls_to_a
 297+ C32F             >                            MMUSelectLayer2
 297+ C32F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C333 CD 09 E0    >                            call    asm_l2_double_buffer_off
 297+ C336 CD FF E0    >                            call	l2_cls	; Get some space
 297+ C339             >                            MMUSelectSpriteBank
 297+ C339 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 297+ C33D CD 6E E5    >                            call    sprite_cls_cursors
 298+ C340 3E 20                                ld      a,$20
 299+ C342 32 1E 81                             ld      (MenuIdMax),a
 300+ C345 01 01 01     .Drawbox:               ld		bc,$0101
 301+ C348 11 FD BE                             ld		de,$BEFD
 302+ C34B 3E C0                                ld		a,$C0
 303+ C34D                                      MMUSelectLayer2
 303+ C34D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 304+ C351 CD 49 E2                             call	l2_draw_box
 305+ C354 01 01 0A                             ld		bc,$0A01
 306+ C357 11 C0 FE                             ld		de,$FEC0
 307+ C35A CD B3 E2                             call	l2_draw_horz_line
 308+ C35D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 309+ C360 11 C0 50                             ld		de,$50C0
 310+ C363 CD B3 E2                             call	l2_draw_horz_line
 311+ C366 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 312+ C369 11 C0 18                             ld		de,$18C0
 313+ C36C CD B3 E2                             call	l2_draw_horz_line
 314+ C36F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 315+ C372 11 C0 28                             ld		de,$28C0
 316+ C375 CD B3 E2                             call	l2_draw_horz_line
 317+ C378 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 318+ C37B 11 C0 28                             ld		de,$28C0
 319+ C37E CD B3 E2                             call	l2_draw_horz_line
 320+ C381 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 321+ C384 11 C0 18                             ld		de,$18C0
 322+ C387 CD B3 E2                             call	l2_draw_horz_line
 323+ C38A 3A 08 82     .StaticText:	        ld      a,(Galaxy)
 324+ C38D                                      MMUSelectGalaxyA
 324+ C38D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 325+ C390 3E 19                                ld		a,25
 326+ C392 CD B1 8E                             call	expandTokenToString
 327+ C395 CD 7A F6                             call	GetDigramGalaxySeed
 328+ C398 06 09                                ld		b,9
 329+ C39A 21 10 C0                             ld		hl,mktdisp_boiler_text
 330+ C39D CD F3 C1                             call	MPD_print_boiler_text
 331+ C3A0 3E 00        .DisplayPrices:         ld		a,0
 332+ C3A2 21 08 20                             ld		hl,mktdisp_position
 333+ C3A5 22 41 C0                             ld		(mktdisp_cursor),hl
 334+ C3A8 F5           .MarketLoop:	        push	af
 335+ C3A9 CD 6B C2                             call	PrintMktDispItem
 336+ C3AC F1                                   pop		af
 337+ C3AD 3C                                   inc		a
 338+ C3AE FE 11                                cp		17
 339+ C3B0 20 F6                                jr		nz,.MarketLoop
 340+ C3B2 21 64 C0     .DisCargo:              ld      hl,mktdisp_hold_level
 341+ C3B5 11 10 A8                             ld      de,$A810
 342+ C3B8                                      MMUSelectLayer1
 342+ C3B8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 343+ C3BC CD C8 E0                             call	l1_print_at
 344+ C3BF CD 49 C2                             call    mktdisp_DisplayCargo
 345+ C3C2 21 6C C0     .DisCash:               ld      hl,mktdisp_cash
 346+ C3C5 11 10 B0                             ld      de,$B010
 347+ C3C8                                      MMUSelectLayer1
 347+ C3C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 348+ C3CC CD C8 E0                             call	l1_print_at
 349+ C3CF CD 5A C2                             call    mktdisp_DisplayCash
 350+ C3D2 C9                                   ret
 351+ C3D3
 352+ C3D3
# file closed: ./Menus/market_prices_disp.asm
 736  C3D3                  DISPLAY "Bank ",BankDispMarket," - Bytes free ",/D, $2000 - ($-MenuShrChtAddr), " - BankDispMarket"
 737  C3D3              ; Bank 67  ------------------------------------------------------------------------------------------------------------------------
 738  C3D3                  SLOT    ShipModelsAddr
 739  C3D3                  PAGE    BankShipModels2
 740  C3D3              	ORG     ShipModelsAddr, BankShipModels2
 741  E000
 742  E000                  INCLUDE "./Data/ShipBank2Label.asm"
# file opened: ./Data/ShipBank2Label.asm
   1+ E000 53 68 69 70  ShipBank2Label:         DB  "ShipBank2      "
   1+ E004 42 61 6E 6B
   1+ E008 32 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank2Label.asm
 743  E00F              GetShipBank2Id:         MGetShipBankId ShipBankTable2
 743  E00F 06 00       >                        ld      b,0
 743  E011 4F          >                        ld      c,a                                 ; c= original ship id
 743  E012 CB 3F       >.ShiftLoop:             srl     a
 743  E014 CB 3F       >                        srl     a
 743  E016 CB 3F       >                        srl     a
 743  E018 CB 3F       >                        srl     a                                   ; divide by 16
 743  E01A 47          >                        ld      b,a                                 ; b = bank nbr
 743  E01B 79          >                        ld      a,c
 743  E01C 50          >                        ld      d,b
 743  E01D 1E 10       >                        ld      e,16
 743  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
 743  E021 93          >                        sub     e                                   ; a= actual model id now
 743  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
 743  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
 743  E024 7A          >                        ld      a,d                                 ; a = bank number
 743  E025             >;.. Now b = bank and a = adjusted ship nbr
 743  E025 21 62 E0    >                        ld      hl,ShipBankTable2                        ; a= bank index
 743  E028 ED 31       >                        add     hl,a
 743  E02A ED 31       >                        add     hl,a
 743  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
 743  E02D             >                        ClearCarryFlag
 743  E02D B7          >                        or a
 743  E02E C9          >                        ret
 744  E02F              CopyVertsToUniv2:       McopyVertsToUniverse
 744  E02F 2A 2F C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
 744  E032 11 35 C3    >                        ld          de,UBnkHullVerticies
 744  E035 06 00       >                        ld          b,0
 744  E037 3A 23 C3    >                        ld			a,(VertexCtX6Addr)
 744  E03A 4F          >                        ld          c,a
 744  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 744  E03C CD C9 7C    >                        call        memcopy_dma
 744  E03F C9          >                        ret
 745  E040              CopyEdgesToUniv2:       McopyEdgesToUniverse
 745  E040 2A 1D C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
 745  E043 11 25 C4    >                        ld          de,UBnkHullEdges
 745  E046 06 00       >                        ld          b,0
 745  E048 3A 1F C3    >                        ld			a,(LineX4Addr)
 745  E04B 4F          >                        ld          c,a
 745  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 745  E04D CD C9 7C    >                        call        memcopy_dma
 745  E050 C9          >                        ret
 746  E051              CopyNormsToUniv2:       McopyNormsToUniverse
 746  E051 2A 2B C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 746  E054 11 ED C4    >                        ld          de,UBnkHullNormals
 746  E057 06 00       >                        ld          b,0
 746  E059 3A 27 C3    >                        ld          a,(FaceCtX4Addr)
 746  E05C 4F          >                        ld          c,a
 746  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 746  E05E CD C9 7C    >                        call        memcopy_dma
 746  E061 C9          >                        ret
 747  E062              ShipBankTable2:         MShipBankTable
 747  E062 3B 00       >                        DW      BankShipModels1
 747  E064 43 00       >                        DW      BankShipModels2
 747  E066 44 00       >                        DW      BankShipModels3
 747  E068 45 00       >                        DW      BankShipModels4
 748  E06A              CopyShipToUniverse2     MCopyShipToUniverse     BankShipModels2
 748  E06A 21 31 C0    >                        ld          hl,UBnkShipModelBank
 748  E06D 36 43       >                        ld          (hl),BankShipModels2
 748  E06F 32 32 C0    >                        ld          (UBnKShipModelNbr),a
 748  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
 748  E075 ED 31       >                        add         hl,a
 748  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 748  E079 4E          >                        ld          c,(hl)
 748  E07A 23          >                        inc         hl
 748  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
 748  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
 748  E07F ED 31       >                        add         hl,a
 748  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
 748  E083 7E          >                        ld          a,(hl)
 748  E084 23          >                        inc         hl
 748  E085 66          >                        ld          h,(hl)
 748  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
 748  E087 11 1A C3    >                        ld          de,UBnkHullCopy             ; Universe bank
 748  E08A 01 1B 00    >                        ld          bc,ShipDataLength
 748  E08D ED B0       >                        ldir
 748  E08F CD 2F E0    >                        call        CopyVertsToUniv
 748  E092 CD 40 E0    >                        call        CopyEdgesToUniv
 748  E095 CD 51 E0    >                        call        CopyNormsToUniv
 748  E098 C9          >                        ret
 749  E099              CopyBodyToUniverse2:    MCopyBodyToUniverse     CopyShipToUniverse2
 749  E099 3E 0D       >                        ld          a,13
 749  E09B CD 6A E0    >                        call        CopyShipToUniverse2
 749  E09E C9          >                        ret
 750  E09F
 751  E09F                  INCLUDE "./Data/ShipModelMetaData2.asm"
# file opened: ./Data/ShipModelMetaData2.asm
   1+ E09F 3F E1        ShipModelTable2:         DW Dragon                                  ;16  $10
   2+ E0A1 1C E2                                 DW Escape_Pod                              ;17  $11
   3+ E0A3 77 E2                                 DW Fer_De_Lance                            ;18  $12
   4+ E0A5 98 E3                                 DW Gecko                                   ;19  $13
   5+ E0A7 63 E4                                 DW Ghavial                                 ;20  $14
   6+ E0A9 4E E5                                 DW Iguana                                  ;21  $15
   7+ E0AB 47 E6                                 DW Krait                                   ;22  $16
   8+ E0AD 34 E7                                 DW Logo                                    ;23  $17
   9+ E0AF F3 E8                                 DW Mamba                                   ;24  $18
  10+ E0B1 28 EA                                 DW Missile                                 ;25  $19
  11+ E0B3 2D EB                                 DW Monitor                                 ;26  $1A
  12+ E0B5 36 EC                                 DW Moray                                   ;27  $1B
  13+ E0B7 15 ED                                 DW Ophidian                                ;28  $1C
  14+ E0B9 50 EE                                 DW Plate                                   ;29  $1D
  15+ E0BB 91 EE                                 DW Python                                  ;30  $1E
  16+ E0BD 8A EF                                 DW Python_P                                ;31  $1F
  17+ E0BF 5A E1        ShipVertexTable2:        DW DragonVertices                          ;16  $10
  18+ E0C1 37 E2                                 DW Escape_PodVertices                      ;17  $11
  19+ E0C3 92 E2                                 DW Fer_De_LanceVertices                    ;18  $12
  20+ E0C5 B3 E3                                 DW GeckoVertices                           ;19  $13
  21+ E0C7 7E E4                                 DW GhavialVertices                         ;20  $14
  22+ E0C9 69 E5                                 DW IguanaVertices                          ;21  $15
  23+ E0CB 62 E6                                 DW KraitVertices                           ;22  $16
  24+ E0CD 4F E7                                 DW LogoVertices                            ;23  $17
  25+ E0CF 0E E9                                 DW MambaVertices                           ;24  $18
  26+ E0D1 43 EA                                 DW MissileVertices                         ;25  $19
  27+ E0D3 48 EB                                 DW MonitorVertices                         ;26  $1A
  28+ E0D5 51 EC                                 DW MorayVertices                           ;27  $1B
  29+ E0D7 30 ED                                 DW OphidianVertices                        ;28  $1C
  30+ E0D9 6B EE                                 DW PlateVertices                           ;29  $1D
  31+ E0DB AC EE                                 DW PythonVertices                          ;30  $1E
  32+ E0DD A5 EF                                 DW Python_PVertices                        ;31  $1F
  33+ E0DF 90 E1        ShipEdgeTable2:          DW DragonEdges                             ;16  $10
  34+ E0E1 4F E2                                 DW Escape_PodEdges                         ;17  $11
  35+ E0E3 04 E3                                 DW Fer_De_LanceEdges                       ;18  $12
  36+ E0E5 FB E3                                 DW GeckoEdges                              ;19  $13
  37+ E0E7 C6 E4                                 DW GhavialEdges                            ;20  $14
  38+ E0E9 C3 E5                                 DW IguanaEdges                             ;21  $15
  39+ E0EB C8 E6                                 DW KraitEdges                              ;22  $16
  40+ E0ED 4B E8                                 DW LogoEdges                               ;23  $17
  41+ E0EF A4 E9                                 DW MambaEdges                              ;24  $18
  42+ E0F1 A9 EA                                 DW MissileEdges                            ;25  $19
  43+ E0F3 AE EB                                 DW MonitorEdges                            ;26  $1A
  44+ E0F5 A5 EC                                 DW MorayEdges                              ;27  $1B
  45+ E0F7 A8 ED                                 DW OphidianEdges                           ;28  $1C
  46+ E0F9 7D EE                                 DW PlateEdges                              ;29  $1D
  47+ E0FB EE EE                                 DW PythonEdges                             ;30  $1E
  48+ E0FD E7 EF                                 DW Python_PEdges                           ;31  $1F
  49+ E0FF E4 E1        ShipNormalTable2:        DW DragonNormals                           ;16  $10
  50+ E101 67 E2                                 DW Escape_PodNormals                       ;17  $11
  51+ E103 70 E3                                 DW Fer_De_LanceNormals                     ;18  $12
  52+ E105 3F E4                                 DW GeckoNormals                            ;19  $13
  53+ E107 1E E5                                 DW GhavialNormals                          ;20  $14
  54+ E109 1F E6                                 DW IguanaNormals                           ;21  $15
  55+ E10B 1C E7                                 DW KraitNormals                            ;22  $16
  56+ E10D DF E8                                 DW LogoNormals                             ;23  $17
  57+ E10F 14 EA                                 DW MambaNormals                            ;24  $18
  58+ E111 09 EB                                 DW MissileNormals                          ;25  $19
  59+ E113 0A EC                                 DW MonitorNormals                          ;26  $1A
  60+ E115 F1 EC                                 DW MorayNormals                            ;27  $1B
  61+ E117 20 EE                                 DW OphidianNormals                         ;28  $1C
  62+ E119 8D EE                                 DW PlateNormals                            ;29  $1D
  63+ E11B 56 EF                                 DW PythonNormals                           ;30  $1E
  64+ E11D 4F F0                                 DW Python_PNormals                         ;31  $1F
  65+ E11F DD 00        ShipModelSizeTable2:     DW DragonLen                               ;16  $10
  66+ E121 5B 00                                 DW Escape_PodLen                           ;17  $11
  67+ E123 21 01                                 DW Fer_De_LanceLen                         ;18  $12
  68+ E125 CB 00                                 DW GeckoLen                                ;19  $13
  69+ E127 EB 00                                 DW GhavialLen                              ;20  $14
  70+ E129 F9 00                                 DW IguanaLen                               ;21  $15
  71+ E12B ED 00                                 DW KraitLen                                ;22  $16
  72+ E12D BF 01                                 DW LogoLen                                 ;23  $17
  73+ E12F 35 01                                 DW MambaLen                                ;24  $18
  74+ E131 05 01                                 DW MissileLen                              ;25  $19
  75+ E133 09 01                                 DW MonitorLen                              ;26  $1A
  76+ E135 DF 00                                 DW MorayLen                                ;27  $1B
  77+ E137 3B 01                                 DW OphidianLen                             ;28  $1C
  78+ E139 41 00                                 DW PlateLen                                ;29  $1D
  79+ E13B F9 00                                 DW PythonLen                               ;30  $1E
  80+ E13D F9 00                                 DW Python_PLen                             ;31  $1F
  81+ E13F
  82+ E13F                                      include "Data/ships/Dragon.asm"
# file opened: ./Data/ships/Dragon.asm
   1++E13F 00           Dragon:	                DB $00
   2++E140 66 50                                DW $5066
   3++E142 90 E1                                DW DragonEdges
   4++E144 54                                   DB DragonEdgesSize
   5++E145 00 3C                                DB $00, $3C
   6++E147 09                                   DB DragonVertSize /6
   7++E148 36                                   DB DragonVertSize
   8++E149 15                                   DB DragonEdgesCnt
   9++E14A 00 00                                DB $00, $00
  10++E14C 38                                   DB DragonNormalsSize
  11++E14D 20 F7 14                             DB $20, $F7, $14
  12++E150 E4 E1                                DW DragonNormals
  13++E152 00 47                                DB $00, $47
  14++E154 5A E1                                DW DragonVertices
  15++E156 00 00                                DB 0,0                      ; Type and Tactics
  16++E158 01                                   DB ShipCanAnger
  17++E159 B0                                   DB $B0                      ; chance of ECM module
  18++E15A 00 00 FA 1F  DragonVertices:	        DB $00, $00, $FA, $1F, $6B, $05
  18++E15E 6B 05
  19++E160 D8 00 7C 1F                          DB $D8, $00, $7C, $1F, $67, $01
  19++E164 67 01
  20++E166 D8 00 7C 3F                          DB $D8, $00, $7C, $3F, $78, $12
  20++E16A 78 12
  21++E16C 00 28 FA 3F                          DB $00, $28, $FA, $3F, $CD, $23
  21++E170 CD 23
  22++E172 00 28 FA 7F                          DB $00, $28, $FA, $7F, $CD, $89
  22++E176 CD 89
  23++E178 D8 00 7C BF                          DB $D8, $00, $7C, $BF, $9A, $34
  23++E17C 9A 34
  24++E17E D8 00 7C 9F                          DB $D8, $00, $7C, $9F, $AB, $45
  24++E182 AB 45
  25++E184 00 50 00 1F                          DB $00, $50, $00, $1F, $FF, $FF
  25++E188 FF FF
  26++E18A 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  26++E18E FF FF
  27++E190              DragonVertSize:         equ $ - DragonVertices
  28++E190 1F 01 04 1C  DragonEdges:	        DB $1F, $01, $04, $1C
  29++E194 1F 12 08 1C                          DB $1F, $12, $08, $1C
  30++E198 1F 23 0C 1C                          DB $1F, $23, $0C, $1C
  31++E19C 1F 34 14 1C                          DB $1F, $34, $14, $1C
  32++E1A0 1F 45 18 1C                          DB $1F, $45, $18, $1C
  33++E1A4 1F 50 00 1C                          DB $1F, $50, $00, $1C
  34++E1A8 1F 67 04 20                          DB $1F, $67, $04, $20
  35++E1AC 1F 78 08 20                          DB $1F, $78, $08, $20
  36++E1B0 1F 89 10 20                          DB $1F, $89, $10, $20
  37++E1B4 1F 9A 14 20                          DB $1F, $9A, $14, $20
  38++E1B8 1F AB 18 20                          DB $1F, $AB, $18, $20
  39++E1BC 1F B6 00 20                          DB $1F, $B6, $00, $20
  40++E1C0 1F 06 00 04                          DB $1F, $06, $00, $04
  41++E1C4 1F 17 04 08                          DB $1F, $17, $04, $08
  42++E1C8 1F 4A 14 18                          DB $1F, $4A, $14, $18
  43++E1CC 1F 5B 00 18                          DB $1F, $5B, $00, $18
  44++E1D0 1F 2C 08 0C                          DB $1F, $2C, $08, $0C
  45++E1D4 1F 8C 08 10                          DB $1F, $8C, $08, $10
  46++E1D8 1F 3D 0C 14                          DB $1F, $3D, $0C, $14
  47++E1DC 1F 9D 10 14                          DB $1F, $9D, $10, $14
  48++E1E0 1F CD 0C 10                          DB $1F, $CD, $0C, $10
  49++E1E4              DragonEdgesSize:        equ $ - DragonEdges
  50++E1E4              DragonEdgesCnt:         equ DragonEdgesSize/4
  51++E1E4 1F 10 5A 1C  DragonNormals:	        DB $1F, $10, $5A, $1C
  52++E1E8 1F 21 5A 00                          DB $1F, $21, $5A, $00
  53++E1EC 3F 19 5B 0E                          DB $3F, $19, $5B, $0E
  54++E1F0 BF 19 5B 0E                          DB $BF, $19, $5B, $0E
  55++E1F4 9F 21 5A 00                          DB $9F, $21, $5A, $00
  56++E1F8 9F 10 5A 1C                          DB $9F, $10, $5A, $1C
  57++E1FC 5F 10 5A 1C                          DB $5F, $10, $5A, $1C
  58++E200 5F 21 5A 00                          DB $5F, $21, $5A, $00
  59++E204 7F 19 5B 0E                          DB $7F, $19, $5B, $0E
  60++E208 FF 19 5B 0E                          DB $FF, $19, $5B, $0E
  61++E20C DF 21 5A 00                          DB $DF, $21, $5A, $00
  62++E210 DF 10 5A 1C                          DB $DF, $10, $5A, $1C
  63++E214 3F 30 00 52                          DB $3F, $30, $00, $52
  64++E218 BF 30 00 52                          DB $BF, $30, $00, $52
  65++E21C              DragonNormalsSize:      equ $ - DragonNormals
  66++E21C              DragonLen:              equ $ - Dragon
  67++E21C
# file closed: ./Data/ships/Dragon.asm
  83+ E21C                                      include "Data/ships/Escape_Pod.asm"
# file opened: ./Data/ships/Escape_Pod.asm
   1++E21C 20           Escape_Pod:             DB $20
   2++E21D 00 01                                DW $0100
   3++E21F 4F E2                                DW Escape_PodEdges
   4++E221 18                                   DB Escape_PodEdgesSize
   5++E222 00 16                                DB $00, $16
   6++E224 04                                   DB Escape_PodVertSize /6
   7++E225 18                                   DB Escape_PodVertSize
   8++E226 06                                   DB Escape_PodEdgesCnt
   9++E227 00 00                                DB $00, $00
  10++E229 10                                   DB Escape_PodNormalsSize
  11++E22A 08 11 08                             DB $08, $11, $08
  12++E22D 67 E2                                DW Escape_PodNormals
  13++E22F 04 00                                DB $04, $00
  14++E231 37 E2                                DW Escape_PodVertices
  15++E233 00 00                                DB 0,0                      ; Type and Tactics
  16++E235 00                                   DB 0
  17++E236 FF                                   DB $FF                      ; chance of ECM module
  18++E237 07 00 24 9F  Escape_PodVertices:	    DB $07, $00, $24, $9F, $12, $33
  18++E23B 12 33
  19++E23D 07 0E 0C FF                          DB $07, $0E, $0C, $FF, $02, $33
  19++E241 02 33
  20++E243 07 0E 0C BF                          DB $07, $0E, $0C, $BF, $01, $33
  20++E247 01 33
  21++E249 15 00 00 1F                          DB $15, $00, $00, $1F, $01, $22
  21++E24D 01 22
  22++E24F              Escape_PodVertSize:     equ $ - Escape_PodVertices
  23++E24F 1F 23 00 04  Escape_PodEdges:	    DB $1F, $23, $00, $04
  24++E253 1F 03 04 08                          DB $1F, $03, $04, $08
  25++E257 1F 01 08 0C                          DB $1F, $01, $08, $0C
  26++E25B 1F 12 0C 00                          DB $1F, $12, $0C, $00
  27++E25F 1F 13 00 08                          DB $1F, $13, $00, $08
  28++E263 1F 02 0C 04                          DB $1F, $02, $0C, $04
  29++E267              Escape_PodEdgesSize:    equ $ - Escape_PodEdges
  30++E267              Escape_PodEdgesCnt:     equ Escape_PodEdgesSize/4
  31++E267 3F 34 00 7A  Escape_PodNormals:	    DB $3F, $34, $00, $7A
  32++E26B 1F 27 67 1E                          DB $1F, $27, $67, $1E
  33++E26F 5F 27 67 1E                          DB $5F, $27, $67, $1E
  34++E273 9F 70 00 00                          DB $9F, $70, $00, $00
  35++E277              Escape_PodNormalsSize:  equ $ - Escape_PodNormals
  36++E277              Escape_PodLen:          equ $ - Escape_Pod
  37++E277
# file closed: ./Data/ships/Escape_Pod.asm
  84+ E277                                      include "Data/ships/Fer_De_Lance.asm"
# file opened: ./Data/ships/Fer_De_Lance.asm
   1++E277 00           Fer_De_Lance:	        DB $00
   2++E278 40 06                                DW $0640
   3++E27A 04 E3                                DW Fer_De_LanceEdges
   4++E27C 6C                                   DB Fer_De_LanceEdgesSize
   5++E27D 00 1A                                DB $00, $1A
   6++E27F 13                                   DB Fer_De_LanceVertSize /6
   7++E280 72                                   DB Fer_De_LanceVertSize
   8++E281 1B                                   DB Fer_De_LanceEdgesCnt
   9++E282 00 00                                DB $00, $00
  10++E284 28                                   DB Fer_De_LanceNormalsSize
  11++E285 28 A0 1E                             DB $28, $A0, $1E
  12++E288 70 E3                                DW Fer_De_LanceNormals
  13++E28A 01 12                                DB $01, $12
  14++E28C 92 E2                                DW Fer_De_LanceVertices
  15++E28E 00 00                                DB 0,0                      ; Type and Tactics
  16++E290 01                                   DB ShipCanAnger
  17++E291 FF                                   DB $FF                      ; chance of ECM module
  18++E292 00 0E 6C 5F  Fer_De_LanceVertices:	DB $00, $0E, $6C, $5F, $01, $59
  18++E296 01 59
  19++E298 28 0E 04 FF                          DB $28, $0E, $04, $FF, $12, $99
  19++E29C 12 99
  20++E29E 0C 0E 34 FF                          DB $0C, $0E, $34, $FF, $23, $99
  20++E2A2 23 99
  21++E2A4 0C 0E 34 7F                          DB $0C, $0E, $34, $7F, $34, $99
  21++E2A8 34 99
  22++E2AA 28 0E 04 7F                          DB $28, $0E, $04, $7F, $45, $99
  22++E2AE 45 99
  23++E2B0 28 0E 04 BC                          DB $28, $0E, $04, $BC, $01, $26
  23++E2B4 01 26
  24++E2B6 0C 02 34 BC                          DB $0C, $02, $34, $BC, $23, $67
  24++E2BA 23 67
  25++E2BC 0C 02 34 3C                          DB $0C, $02, $34, $3C, $34, $78
  25++E2C0 34 78
  26++E2C2 28 0E 04 3C                          DB $28, $0E, $04, $3C, $04, $58
  26++E2C6 04 58
  27++E2C8 00 12 14 2F                          DB $00, $12, $14, $2F, $06, $78
  27++E2CC 06 78
  28++E2CE 03 0B 61 CB                          DB $03, $0B, $61, $CB, $00, $00
  28++E2D2 00 00
  29++E2D4 1A 08 12 89                          DB $1A, $08, $12, $89, $00, $00
  29++E2D8 00 00
  30++E2DA 10 0E 04 AB                          DB $10, $0E, $04, $AB, $00, $00
  30++E2DE 00 00
  31++E2E0 03 0B 61 4B                          DB $03, $0B, $61, $4B, $00, $00
  31++E2E4 00 00
  32++E2E6 1A 08 12 09                          DB $1A, $08, $12, $09, $00, $00
  32++E2EA 00 00
  33++E2EC 10 0E 04 2B                          DB $10, $0E, $04, $2B, $00, $00
  33++E2F0 00 00
  34++E2F2 00 0E 14 6C                          DB $00, $0E, $14, $6C, $99, $99
  34++E2F6 99 99
  35++E2F8 0E 0E 2C CC                          DB $0E, $0E, $2C, $CC, $99, $99
  35++E2FC 99 99
  36++E2FE 0E 0E 2C 4C                          DB $0E, $0E, $2C, $4C, $99, $99
  36++E302 99 99
  37++E304              Fer_De_LanceVertSize:   equ $ - Fer_De_LanceVertices
  38++E304 1F 19 00 04  Fer_De_LanceEdges:	    DB $1F, $19, $00, $04
  39++E308 1F 29 04 08                          DB $1F, $29, $04, $08
  40++E30C 1F 39 08 0C                          DB $1F, $39, $08, $0C
  41++E310 1F 49 0C 10                          DB $1F, $49, $0C, $10
  42++E314 1F 59 00 10                          DB $1F, $59, $00, $10
  43++E318 1C 01 00 14                          DB $1C, $01, $00, $14
  44++E31C 1C 26 14 18                          DB $1C, $26, $14, $18
  45++E320 1C 37 18 1C                          DB $1C, $37, $18, $1C
  46++E324 1C 48 1C 20                          DB $1C, $48, $1C, $20
  47++E328 1C 05 00 20                          DB $1C, $05, $00, $20
  48++E32C 0F 06 14 24                          DB $0F, $06, $14, $24
  49++E330 0B 67 18 24                          DB $0B, $67, $18, $24
  50++E334 0B 78 1C 24                          DB $0B, $78, $1C, $24
  51++E338 0F 08 20 24                          DB $0F, $08, $20, $24
  52++E33C 0E 12 04 14                          DB $0E, $12, $04, $14
  53++E340 0E 23 08 18                          DB $0E, $23, $08, $18
  54++E344 0E 34 0C 1C                          DB $0E, $34, $0C, $1C
  55++E348 0E 45 10 20                          DB $0E, $45, $10, $20
  56++E34C 08 00 28 2C                          DB $08, $00, $28, $2C
  57++E350 09 00 2C 30                          DB $09, $00, $2C, $30
  58++E354 0B 00 28 30                          DB $0B, $00, $28, $30
  59++E358 08 00 34 38                          DB $08, $00, $34, $38
  60++E35C 09 00 38 3C                          DB $09, $00, $38, $3C
  61++E360 0B 00 34 3C                          DB $0B, $00, $34, $3C
  62++E364 0C 99 40 44                          DB $0C, $99, $40, $44
  63++E368 0C 99 40 48                          DB $0C, $99, $40, $48
  64++E36C 08 99 44 48                          DB $08, $99, $44, $48
  65++E370              Fer_De_LanceEdgesSize:  equ $ - Fer_De_LanceEdges
  66++E370              Fer_De_LanceEdgesCnt:   equ Fer_De_LanceEdgesSize/4
  67++E370 1C 00 18 06  Fer_De_LanceNormals:	DB $1C, $00, $18, $06
  68++E374 9F 44 00 18                          DB $9F, $44, $00, $18
  69++E378 BF 3F 00 25                          DB $BF, $3F, $00, $25
  70++E37C 3F 00 00 68                          DB $3F, $00, $00, $68
  71++E380 3F 3F 00 25                          DB $3F, $3F, $00, $25
  72++E384 1F 44 00 18                          DB $1F, $44, $00, $18
  73++E388 BC 0C 2E 13                          DB $BC, $0C, $2E, $13
  74++E38C 3C 00 2D 16                          DB $3C, $00, $2D, $16
  75++E390 3C 0C 2E 13                          DB $3C, $0C, $2E, $13
  76++E394 5F 00 1C 00                          DB $5F, $00, $1C, $00
  77++E398              Fer_De_LanceNormalsSize:equ $ - Fer_De_LanceNormals
  78++E398              Fer_De_LanceLen:        equ $ - Fer_De_Lance
  79++E398
# file closed: ./Data/ships/Fer_De_Lance.asm
  85+ E398                                      include "Data/ships/Gecko.asm"
# file opened: ./Data/ships/Gecko.asm
   1++E398 00           Gecko:	                DB $00
   2++E399 49 26                                DW $2649
   3++E39B FB E3                                DW GeckoEdges
   4++E39D 44                                   DB GeckoEdgesSize
   5++E39E 00 1A                                DB $00, $1A
   6++E3A0 0C                                   DB GeckoVertSize /6
   7++E3A1 48                                   DB GeckoVertSize
   8++E3A2 11                                   DB GeckoEdgesCnt
   9++E3A3 00 37                                DB $00, $37
  10++E3A5 24                                   DB GeckoNormalsSize
  11++E3A6 12 46 1E                             DB $12, $46, $1E
  12++E3A9 3F E4                                DW GeckoNormals
  13++E3AB 03 10                                DB $03, $10
  14++E3AD B3 E3                                DW GeckoVertices
  15++E3AF 00 00                                DB 0,0                      ; Type and Tactics
  16++E3B1 01                                   DB ShipCanAnger
  17++E3B2 60                                   DB $60                      ; chance of ECM module
  18++E3B3 0A 04 2F DF  GeckoVertices:	        DB $0A, $04, $2F, $DF, $03, $45
  18++E3B7 03 45
  19++E3B9 0A 04 2F 5F                          DB $0A, $04, $2F, $5F, $01, $23
  19++E3BD 01 23
  20++E3BF 10 08 17 BF                          DB $10, $08, $17, $BF, $05, $67
  20++E3C3 05 67
  21++E3C5 10 08 17 3F                          DB $10, $08, $17, $3F, $01, $78
  21++E3C9 01 78
  22++E3CB 42 00 03 BF                          DB $42, $00, $03, $BF, $45, $66
  22++E3CF 45 66
  23++E3D1 42 00 03 3F                          DB $42, $00, $03, $3F, $12, $88
  23++E3D5 12 88
  24++E3D7 14 0E 17 FF                          DB $14, $0E, $17, $FF, $34, $67
  24++E3DB 34 67
  25++E3DD 14 0E 17 7F                          DB $14, $0E, $17, $7F, $23, $78
  25++E3E1 23 78
  26++E3E3 08 06 21 D0                          DB $08, $06, $21, $D0, $33, $33
  26++E3E7 33 33
  27++E3E9 08 06 21 51                          DB $08, $06, $21, $51, $33, $33
  27++E3ED 33 33
  28++E3EF 08 0D 10 F0                          DB $08, $0D, $10, $F0, $33, $33
  28++E3F3 33 33
  29++E3F5 08 0D 10 71                          DB $08, $0D, $10, $71, $33, $33
  29++E3F9 33 33
  30++E3FB              GeckoVertSize:          equ $ - GeckoVertices
  31++E3FB 1F 03 00 04  GeckoEdges:	            DB $1F, $03, $00, $04
  32++E3FF 1F 12 04 14                          DB $1F, $12, $04, $14
  33++E403 1F 18 14 0C                          DB $1F, $18, $14, $0C
  34++E407 1F 07 0C 08                          DB $1F, $07, $0C, $08
  35++E40B 1F 56 08 10                          DB $1F, $56, $08, $10
  36++E40F 1F 45 10 00                          DB $1F, $45, $10, $00
  37++E413 1F 28 14 1C                          DB $1F, $28, $14, $1C
  38++E417 1F 37 1C 18                          DB $1F, $37, $1C, $18
  39++E41B 1F 46 18 10                          DB $1F, $46, $18, $10
  40++E41F 1D 05 00 08                          DB $1D, $05, $00, $08
  41++E423 1E 01 04 0C                          DB $1E, $01, $04, $0C
  42++E427 1D 34 00 18                          DB $1D, $34, $00, $18
  43++E42B 1E 23 04 1C                          DB $1E, $23, $04, $1C
  44++E42F 14 67 08 18                          DB $14, $67, $08, $18
  45++E433 14 78 0C 1C                          DB $14, $78, $0C, $1C
  46++E437 10 33 20 28                          DB $10, $33, $20, $28
  47++E43B 11 33 24 2C                          DB $11, $33, $24, $2C
  48++E43F              GeckoEdgesSize:             equ $ - GeckoEdges
  49++E43F              GeckoEdgesCnt:          equ GeckoEdgesSize/4
  50++E43F 1F 00 1F 05  GeckoNormals:	        DB $1F, $00, $1F, $05
  51++E443 1F 04 2D 08                          DB $1F, $04, $2D, $08
  52++E447 5F 19 6C 13                          DB $5F, $19, $6C, $13
  53++E44B 5F 00 54 0C                          DB $5F, $00, $54, $0C
  54++E44F DF 19 6C 13                          DB $DF, $19, $6C, $13
  55++E453 9F 04 2D 08                          DB $9F, $04, $2D, $08
  56++E457 BF 58 10 D6                          DB $BF, $58, $10, $D6
  57++E45B 3F 00 00 BB                          DB $3F, $00, $00, $BB
  58++E45F 3F 58 10 D6                          DB $3F, $58, $10, $D6
  59++E463              GeckoNormalsSize:       equ $ - GeckoNormals
  60++E463              GeckoLen:               equ $ - Gecko
  61++E463
# file closed: ./Data/ships/Gecko.asm
  86+ E463                                      include "Data/ships/Ghavial.asm"
# file opened: ./Data/ships/Ghavial.asm
   1++E463 03           Ghavial:	            DB $03
   2++E464 00 26                                DW $2600
   3++E466 C6 E4                                DW GhavialEdges
   4++E468 58                                   DB GhavialEdgesSize
   5++E469 00 22                                DB $00, $22
   6++E46B 0C                                   DB GhavialVertSize /6
   7++E46C 48                                   DB GhavialVertSize
   8++E46D 16                                   DB GhavialEdgesCnt
   9++E46E 00 64                                DB $00, $64
  10++E470 30                                   DB GhavialNormalsSize
  11++E471 0A 72 10                             DB $0A, $72, $10
  12++E474 1E E5                                DW GhavialNormals
  13++E476 00 27                                DB $00, $27
  14++E478 7E E4                                DW GhavialVertices
  15++E47A 00 00                                DB 0,0                      ; Type and Tactics
  16++E47C 01                                   DB ShipCanAnger
  17++E47D 60                                   DB $60                      ; chance of ECM module
  18++E47E
  19++E47E 1E 00 64 1F  GhavialVertices:	DB $1E, $00, $64, $1F, $67, $01
  19++E482 67 01
  20++E484 1E 00 64 9F                      DB $1E, $00, $64, $9F, $6B, $05
  20++E488 6B 05
  21++E48A 28 1E 1A 3F                      DB $28, $1E, $1A, $3F, $23, $01
  21++E48E 23 01
  22++E490 28 1E 1A BF                      DB $28, $1E, $1A, $BF, $45, $03
  22++E494 45 03
  23++E496 3C 00 14 3F                      DB $3C, $00, $14, $3F, $78, $12
  23++E49A 78 12
  24++E49C 28 00 3C 3F                      DB $28, $00, $3C, $3F, $89, $23
  24++E4A0 89 23
  25++E4A2 3C 00 14 BF                      DB $3C, $00, $14, $BF, $AB, $45
  25++E4A6 AB 45
  26++E4A8 28 00 3C BF                      DB $28, $00, $3C, $BF, $9A, $34
  26++E4AC 9A 34
  27++E4AE 00 1E 14 7F                      DB $00, $1E, $14, $7F, $FF, $FF
  27++E4B2 FF FF
  28++E4B4 0A 18 00 09                      DB $0A, $18, $00, $09, $00, $00
  28++E4B8 00 00
  29++E4BA 0A 18 00 89                      DB $0A, $18, $00, $89, $00, $00
  29++E4BE 00 00
  30++E4C0 00 16 0A 09                      DB $00, $16, $0A, $09, $00, $00
  30++E4C4 00 00
  31++E4C6
  32++E4C6              GhavialVertSize: equ $ - GhavialVertices
  33++E4C6
  34++E4C6
  35++E4C6 1F 01 00 08  GhavialEdges:	DB $1F, $01, $00, $08
  36++E4CA 1F 12 10 08                  DB $1F, $12, $10, $08
  37++E4CE 1F 23 14 08                  DB $1F, $23, $14, $08
  38++E4D2 1F 30 0C 08                  DB $1F, $30, $0C, $08
  39++E4D6 1F 34 1C 0C                  DB $1F, $34, $1C, $0C
  40++E4DA 1F 45 18 0C                  DB $1F, $45, $18, $0C
  41++E4DE 1F 50 0C 04                  DB $1F, $50, $0C, $04
  42++E4E2 1F 67 00 20                  DB $1F, $67, $00, $20
  43++E4E6 1F 78 10 20                  DB $1F, $78, $10, $20
  44++E4EA 1F 89 14 20                  DB $1F, $89, $14, $20
  45++E4EE 1F 9A 1C 20                  DB $1F, $9A, $1C, $20
  46++E4F2 1F AB 18 20                  DB $1F, $AB, $18, $20
  47++E4F6 1F B6 04 20                  DB $1F, $B6, $04, $20
  48++E4FA 1F 06 04 00                  DB $1F, $06, $04, $00
  49++E4FE 1F 17 00 10                  DB $1F, $17, $00, $10
  50++E502 1F 28 10 14                  DB $1F, $28, $10, $14
  51++E506 1F 39 14 1C                  DB $1F, $39, $14, $1C
  52++E50A 1F 4A 1C 18                  DB $1F, $4A, $1C, $18
  53++E50E 1F 5B 18 04                  DB $1F, $5B, $18, $04
  54++E512 09 00 24 28                  DB $09, $00, $24, $28
  55++E516 09 00 28 2C                  DB $09, $00, $28, $2C
  56++E51A 09 00 2C 24                  DB $09, $00, $2C, $24
  57++E51E
  58++E51E              GhavialEdgesSize: equ $ - GhavialEdges
  59++E51E
  60++E51E
  61++E51E              GhavialEdgesCnt: equ GhavialEdgesSize/4
  62++E51E
  63++E51E
  64++E51E 1F 00 3E 0E  GhavialNormals:	DB $1F, $00, $3E, $0E
  65++E522 1F 33 24 0C                  DB $1F, $33, $24, $0C
  66++E526 3F 33 1C 19                  DB $3F, $33, $1C, $19
  67++E52A 3F 00 30 2A                  DB $3F, $00, $30, $2A
  68++E52E BF 33 1C 19                  DB $BF, $33, $1C, $19
  69++E532 9F 33 24 0C                  DB $9F, $33, $24, $0C
  70++E536 5F 00 3E 0F                  DB $5F, $00, $3E, $0F
  71++E53A 5F 1C 38 07                  DB $5F, $1C, $38, $07
  72++E53E 7F 1B 37 0D                  DB $7F, $1B, $37, $0D
  73++E542 7F 00 33 26                  DB $7F, $00, $33, $26
  74++E546 FF 1B 37 0D                  DB $FF, $1B, $37, $0D
  75++E54A DF 1C 38 07                  DB $DF, $1C, $38, $07
  76++E54E
  77++E54E              GhavialNormalsSize: equ $ - GhavialNormals
  78++E54E              GhavialLen: equ $ - Ghavial
  79++E54E
# file closed: ./Data/ships/Ghavial.asm
  87+ E54E                                      include "Data/ships/Iguana.asm"
# file opened: ./Data/ships/Iguana.asm
   1++E54E 01           Iguana:	                DB $01
   2++E54F AC 0D                                DW $0DAC
   3++E551 C3 E5                                DW IguanaEdges
   4++E553 5C                                   DB IguanaEdgesSize
   5++E554 00 1A                                DB $00, $1A
   6++E556 0F                                   DB IguanaVertSize /6
   7++E557 5A                                   DB IguanaVertSize
   8++E558 17                                   DB IguanaEdgesCnt
   9++E559 00 96                                DB $00, $96
  10++E55B 28                                   DB IguanaNormalsSize
  11++E55C 0A 5A 21                             DB $0A, $5A, $21
  12++E55F 1F E6                                DW IguanaNormals
  13++E561 01 23                                DB $01, $23
  14++E563 69 E5                                DW IguanaVertices
  15++E565 00 00                                DB 0,0                      ; Type and Tactics
  16++E567 01                                   DB ShipCanAnger
  17++E568 80                                   DB $80                      ; chance of ECM module
  18++E569
  19++E569
  20++E569 00 00 5A 1F  IguanaVertices:	DB $00, $00, $5A, $1F, $23, $01
  20++E56D 23 01
  21++E56F 00 14 1E 1F                  DB $00, $14, $1E, $1F, $46, $02
  21++E573 46 02
  22++E575 28 00 0A 9F                  DB $28, $00, $0A, $9F, $45, $01
  22++E579 45 01
  23++E57B 00 14 1E 5F                  DB $00, $14, $1E, $5F, $57, $13
  23++E57F 57 13
  24++E581 28 00 0A 1F                  DB $28, $00, $0A, $1F, $67, $23
  24++E585 67 23
  25++E587 00 14 28 3F                  DB $00, $14, $28, $3F, $89, $46
  25++E58B 89 46
  26++E58D 28 00 1E BF                  DB $28, $00, $1E, $BF, $88, $45
  26++E591 88 45
  27++E593 00 14 28 7F                  DB $00, $14, $28, $7F, $89, $57
  27++E597 89 57
  28++E599 28 00 1E 3F                  DB $28, $00, $1E, $3F, $99, $67
  28++E59D 99 67
  29++E59F 28 00 28 9E                  DB $28, $00, $28, $9E, $11, $00
  29++E5A3 11 00
  30++E5A5 28 00 28 1E                  DB $28, $00, $28, $1E, $33, $22
  30++E5A9 33 22
  31++E5AB 00 08 28 2A                  DB $00, $08, $28, $2A, $99, $88
  31++E5AF 99 88
  32++E5B1 10 00 24 AA                  DB $10, $00, $24, $AA, $88, $88
  32++E5B5 88 88
  33++E5B7 00 08 28 6A                  DB $00, $08, $28, $6A, $99, $88
  33++E5BB 99 88
  34++E5BD 10 00 24 2A                  DB $10, $00, $24, $2A, $99, $99
  34++E5C1 99 99
  35++E5C3
  36++E5C3              IguanaVertSize: equ $ - IguanaVertices
  37++E5C3
  38++E5C3
  39++E5C3
  40++E5C3 1F 02 00 04  IguanaEdges:	DB $1F, $02, $00, $04
  41++E5C7 1F 01 00 08                  DB $1F, $01, $00, $08
  42++E5CB 1F 13 00 0C                  DB $1F, $13, $00, $0C
  43++E5CF 1F 23 00 10                  DB $1F, $23, $00, $10
  44++E5D3 1F 46 04 14                  DB $1F, $46, $04, $14
  45++E5D7 1F 45 08 18                  DB $1F, $45, $08, $18
  46++E5DB 1F 57 0C 1C                  DB $1F, $57, $0C, $1C
  47++E5DF 1F 67 10 20                  DB $1F, $67, $10, $20
  48++E5E3 1F 48 14 18                  DB $1F, $48, $14, $18
  49++E5E7 1F 58 18 1C                  DB $1F, $58, $18, $1C
  50++E5EB 1F 69 14 20                  DB $1F, $69, $14, $20
  51++E5EF 1F 79 1C 20                  DB $1F, $79, $1C, $20
  52++E5F3 1F 04 04 08                  DB $1F, $04, $04, $08
  53++E5F7 1F 15 08 0C                  DB $1F, $15, $08, $0C
  54++E5FB 1F 26 04 10                  DB $1F, $26, $04, $10
  55++E5FF 1F 37 0C 10                  DB $1F, $37, $0C, $10
  56++E603 1F 89 14 1C                  DB $1F, $89, $14, $1C
  57++E607 1E 01 08 24                  DB $1E, $01, $08, $24
  58++E60B 1E 23 10 28                  DB $1E, $23, $10, $28
  59++E60F 0A 88 2C 30                  DB $0A, $88, $2C, $30
  60++E613 0A 88 34 30                  DB $0A, $88, $34, $30
  61++E617 0A 99 2C 38                  DB $0A, $99, $2C, $38
  62++E61B 0A 99 34 38                  DB $0A, $99, $34, $38
  63++E61F
  64++E61F              IguanaEdgesSize: equ $ - IguanaEdges
  65++E61F
  66++E61F
  67++E61F              IguanaEdgesCnt: equ IguanaEdgesSize/4
  68++E61F
  69++E61F
  70++E61F 9F 33 4D 19  IguanaNormals:	DB $9F, $33, $4D, $19
  71++E623 DF 33 4D 19  	DB $DF, $33, $4D, $19
  72++E627 1F 33 4D 19  	DB $1F, $33, $4D, $19
  73++E62B 5F 33 4D 19  	DB $5F, $33, $4D, $19
  74++E62F 9F 2A 55 00  	DB $9F, $2A, $55, $00
  75++E633 DF 2A 55 00  	DB $DF, $2A, $55, $00
  76++E637 1F 2A 55 00  	DB $1F, $2A, $55, $00
  77++E63B 5F 2A 55 00  	DB $5F, $2A, $55, $00
  78++E63F BF 17 00 5D  	DB $BF, $17, $00, $5D
  79++E643 3F 17 00 5D  	DB $3F, $17, $00, $5D
  80++E647
  81++E647
  82++E647              IguanaNormalsSize: equ $ - IguanaNormals
  83++E647              IguanaLen: equ $ - Iguana
  84++E647
# file closed: ./Data/ships/Iguana.asm
  88+ E647                                      include "Data/ships/Krait.asm"
# file opened: ./Data/ships/Krait.asm
   1++E647
   2++E647 01           Krait:                  DB $01
   3++E648 0E 10                                DW $100E
   4++E64A C8 E6                                DW KraitEdges
   5++E64C 54                                   DB KraitEdgesSize
   6++E64D 00 12                                DB $00, $12
   7++E64F 11                                   DB KraitVertSize /6
   8++E650 66                                   DB KraitVertSize
   9++E651 15                                   DB KraitEdgesCnt
  10++E652 64 00                                DB $64,$00
  11++E654 18                                   DB KraitNormalsSize
  12++E655 14 50 1E                             DB $14, $50, $1E
  13++E658 1C E7                                DW KraitNormals
  14++E65A 02 10                                DB $02, $10
  15++E65C 62 E6                                DW KraitVertices
  16++E65E 00 00                                DB 0,0                      ; Type and Tactics
  17++E660 01                                   DB ShipCanAnger
  18++E661 D0                                   DB $D0                      ; chance of ECM module
  19++E662 00 00 60 1F  KraitVertices:          DB $00, $00, $60, $1F, $01, $23
  19++E666 01 23
  20++E668 00 12 30 3F                          DB $00, $12, $30, $3F, $03, $45
  20++E66C 03 45
  21++E66E 00 12 30 7F                          DB $00, $12, $30, $7F, $12, $45
  21++E672 12 45
  22++E674 5A 00 03 3F                          DB $5A, $00, $03, $3F, $01, $44
  22++E678 01 44
  23++E67A 5A 00 03 BF                          DB $5A, $00, $03, $BF, $23, $55
  23++E67E 23 55
  24++E680 5A 00 57 1C                          DB $5A, $00, $57, $1C, $01, $11
  24++E684 01 11
  25++E686 5A 00 57 9C                          DB $5A, $00, $57, $9C, $23, $33
  25++E68A 23 33
  26++E68C 00 05 35 09                          DB $00, $05, $35, $09, $00, $33
  26++E690 00 33
  27++E692 00 07 26 06                          DB $00, $07, $26, $06, $00, $33
  27++E696 00 33
  28++E698 12 07 13 89                          DB $12, $07, $13, $89, $33, $33
  28++E69C 33 33
  29++E69E 12 07 13 09                          DB $12, $07, $13, $09, $00, $00
  29++E6A2 00 00
  30++E6A4 12 0B 27 28                          DB $12, $0B, $27, $28, $44, $44
  30++E6A8 44 44
  31++E6AA 12 0B 27 68                          DB $12, $0B, $27, $68, $44, $44
  31++E6AE 44 44
  32++E6B0 24 00 1E 28                          DB $24, $00, $1E, $28, $44, $44
  32++E6B4 44 44
  33++E6B6 12 0B 27 A8                          DB $12, $0B, $27, $A8, $55, $55
  33++E6BA 55 55
  34++E6BC 12 0B 27 E8                          DB $12, $0B, $27, $E8, $55, $55
  34++E6C0 55 55
  35++E6C2 24 00 1E A8                          DB $24, $00, $1E, $A8, $55, $55
  35++E6C6 55 55
  36++E6C8              KraitVertSize           equ $  - KraitVertices
  37++E6C8 1F 03 00 04  KraitEdges:             DB $1F, $03, $00, $04, $1F, $12, $00, $08
  37++E6CC 1F 12 00 08
  38++E6D0 1F 01 00 0C                          DB $1F, $01, $00, $0C, $1F, $23, $00, $10
  38++E6D4 1F 23 00 10
  39++E6D8 1F 35 04 10                          DB $1F, $35, $04, $10, $1F, $25, $10, $08
  39++E6DC 1F 25 10 08
  40++E6E0 1F 14 08 0C                          DB $1F, $14, $08, $0C, $1F, $04, $0C, $04
  40++E6E4 1F 04 0C 04
  41++E6E8 1C 01 0C 14                          DB $1C, $01, $0C, $14, $1C, $23, $10, $18
  41++E6EC 1C 23 10 18
  42++E6F0 05 45 04 08                          DB $05, $45, $04, $08, $09, $00, $1C, $28
  42++E6F4 09 00 1C 28
  43++E6F8 06 00 20 28                          DB $06, $00, $20, $28, $09, $33, $1C, $24
  43++E6FC 09 33 1C 24
  44++E700 06 33 20 24                          DB $06, $33, $20, $24, $08, $44, $2C, $34
  44++E704 08 44 2C 34
  45++E708 08 44 34 30                          DB $08, $44, $34, $30, $07, $44, $30, $2C
  45++E70C 07 44 30 2C
  46++E710 07 55 38 3C                          DB $07, $55, $38, $3C, $08, $55, $3C, $40
  46++E714 08 55 3C 40
  47++E718 08 55 40 38                          DB $08, $55, $40, $38
  48++E71C              KraitEdgesSize          equ $  - KraitEdges
  49++E71C              KraitEdgesCnt           equ KraitEdgesSize/4
  50++E71C 1F 07 30 06  KraitNormals            DB $1F, $07, $30, $06
  51++E720 5F 07 30 06                          DB $5F, $07, $30, $06, $DF, $07, $30, $06
  51++E724 DF 07 30 06
  52++E728 9F 07 30 06                          DB $9F, $07, $30, $06, $3F, $4D, $00, $9A
  52++E72C 3F 4D 00 9A
  53++E730 BF 4D 00 9A                          DB $BF, $4D, $00, $9A
  54++E734              KraitNormalsSize        equ $  - KraitNormals
  55++E734              KraitLen                equ $  - Krait
  56++E734
# file closed: ./Data/ships/Krait.asm
  89+ E734                                      include "Data/ships/Logo.asm"
# file opened: ./Data/ships/Logo.asm
   1++E734 00           Logo:	                DB $00
   2++E735 49 26                                DW $2649
   3++E737 4B E8                                DW LogoEdges
   4++E739 94                                   DB LogoEdgesSize
   5++E73A 00 36                                DB $00, $36
   6++E73C 2A                                   DB LogoVertSize /6
   7++E73D FC                                   DB LogoVertSize
   8++E73E 25                                   DB LogoEdgesCnt
   9++E73F 00 00                                DB $00, $00
  10++E741 14                                   DB LogoNormalsSize
  11++E742 63 FC 24                             DB $63, $FC, $24
  12++E745 DF E8                                DW LogoNormals
  13++E747 01 00                                DB $01, $00
  14++E749 4F E7                                DW LogoVertices
  15++E74B FD 00                                DB ShipTypeText,0                      ; Type and Tactics
  16++E74D 00                                   DB 0
  17++E74E FF                                   DB $FF                      ; chance of ECM module
  18++E74F
  19++E74F 00 09 37 5F  LogoVertices:	DB $00, $09, $37, $5F, $00, $00
  19++E753 00 00
  20++E755 0A 09 1E DF  	DB $0A, $09, $1E, $DF, $00, $00
  20++E759 00 00
  21++E75B 19 09 5D DF  	DB $19, $09, $5D, $DF, $00, $00
  21++E75F 00 00
  22++E761 96 09 B4 DF  	DB $96, $09, $B4, $DF, $00, $00
  22++E765 00 00
  23++E767 5A 09 0A DF  	DB $5A, $09, $0A, $DF, $00, $00
  23++E76B 00 00
  24++E76D 8C 09 0A DF  	DB $8C, $09, $0A, $DF, $00, $00
  24++E771 00 00
  25++E773 00 09 5F 7F  	DB $00, $09, $5F, $7F, $00, $00
  25++E777 00 00
  26++E779 8C 09 0A 5F  	DB $8C, $09, $0A, $5F, $00, $00
  26++E77D 00 00
  27++E77F 5A 09 0A 5F  	DB $5A, $09, $0A, $5F, $00, $00
  27++E783 00 00
  28++E785 96 09 B4 5F  	DB $96, $09, $B4, $5F, $00, $00
  28++E789 00 00
  29++E78B 19 09 5D 5F  	DB $19, $09, $5D, $5F, $00, $00
  29++E78F 00 00
  30++E791 0A 09 1E 5F  	DB $0A, $09, $1E, $5F, $00, $00
  30++E795 00 00
  31++E797 55 09 1E FF  	DB $55, $09, $1E, $FF, $02, $33
  31++E79B 02 33
  32++E79D 55 09 1E 7F  	DB $55, $09, $1E, $7F, $02, $44
  32++E7A1 02 44
  33++E7A3 46 0B 05 9F  	DB $46, $0B, $05, $9F, $01, $33
  33++E7A7 01 33
  34++E7A9 46 0B 19 BF  	DB $46, $0B, $19, $BF, $02, $33
  34++E7AD 02 33
  35++E7AF 46 0B 19 3F  	DB $46, $0B, $19, $3F, $02, $44
  35++E7B3 02 44
  36++E7B5 46 0B 05 1F  	DB $46, $0B, $05, $1F, $01, $44
  36++E7B9 01 44
  37++E7BB 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  37++E7BF 00 00
  38++E7C1 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  38++E7C5 00 00
  39++E7C7 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  39++E7CB 00 00
  40++E7CD 1C 0B 02 BF  	DB $1C, $0B, $02, $BF, $00, $00
  40++E7D1 00 00
  41++E7D3 31 0B 02 BF  	DB $31, $0B, $02, $BF, $00, $00
  41++E7D7 00 00
  42++E7D9 31 0B 0A BF  	DB $31, $0B, $0A, $BF, $00, $00
  42++E7DD 00 00
  43++E7DF 31 0B 11 BF  	DB $31, $0B, $11, $BF, $00, $00
  43++E7E3 00 00
  44++E7E5 1C 0B 11 BF  	DB $1C, $0B, $11, $BF, $00, $00
  44++E7E9 00 00
  45++E7EB 1C 0B 0A BF  	DB $1C, $0B, $0A, $BF, $00, $00
  45++E7EF 00 00
  46++E7F1 18 0B 02 BF  	DB $18, $0B, $02, $BF, $00, $00
  46++E7F5 00 00
  47++E7F7 18 0B 11 BF  	DB $18, $0B, $11, $BF, $00, $00
  47++E7FB 00 00
  48++E7FD 03 0B 11 BF  	DB $03, $0B, $11, $BF, $00, $00
  48++E801 00 00
  49++E803 00 0B 02 3F  	DB $00, $0B, $02, $3F, $00, $00
  49++E807 00 00
  50++E809 00 0B 11 3F  	DB $00, $0B, $11, $3F, $00, $00
  50++E80D 00 00
  51++E80F 04 0B 02 3F  	DB $04, $0B, $02, $3F, $00, $00
  51++E813 00 00
  52++E815 19 0B 02 3F  	DB $19, $0B, $02, $3F, $00, $00
  52++E819 00 00
  53++E81B 0E 0B 02 3F  	DB $0E, $0B, $02, $3F, $00, $00
  53++E81F 00 00
  54++E821 0E 0B 11 3F  	DB $0E, $0B, $11, $3F, $00, $00
  54++E825 00 00
  55++E827 31 0B 02 3F  	DB $31, $0B, $02, $3F, $00, $00
  55++E82B 00 00
  56++E82D 1C 0B 02 3F  	DB $1C, $0B, $02, $3F, $00, $00
  56++E831 00 00
  57++E833 1C 0B 0A 3F  	DB $1C, $0B, $0A, $3F, $00, $00
  57++E837 00 00
  58++E839 1C 0B 11 3F  	DB $1C, $0B, $11, $3F, $00, $00
  58++E83D 00 00
  59++E83F 31 0B 11 3F  	DB $31, $0B, $11, $3F, $00, $00
  59++E843 00 00
  60++E845 31 0B 0A 3F  	DB $31, $0B, $0A, $3F, $00, $00
  60++E849 00 00
  61++E84B
  62++E84B              LogoVertSize: equ $ - LogoVertices
  63++E84B
  64++E84B
  65++E84B
  66++E84B 1F 00 00 04  LogoEdges:	DB $1F, $00, $00, $04
  67++E84F 1F 00 04 08  	DB $1F, $00, $04, $08
  68++E853 1F 00 08 0C  	DB $1F, $00, $08, $0C
  69++E857 1F 00 0C 10  	DB $1F, $00, $0C, $10
  70++E85B 1F 00 10 14  	DB $1F, $00, $10, $14
  71++E85F 1F 00 14 18  	DB $1F, $00, $14, $18
  72++E863 1F 00 18 1C  	DB $1F, $00, $18, $1C
  73++E867 1F 00 1C 20  	DB $1F, $00, $1C, $20
  74++E86B 1F 00 20 24  	DB $1F, $00, $20, $24
  75++E86F 1F 00 24 28  	DB $1F, $00, $24, $28
  76++E873 1F 00 28 2C  	DB $1F, $00, $28, $2C
  77++E877 1F 00 2C 00  	DB $1F, $00, $2C, $00
  78++E87B 1E 03 38 3C  	DB $1E, $03, $38, $3C
  79++E87F 1E 01 3C 40  	DB $1E, $01, $3C, $40
  80++E883 1E 04 40 44  	DB $1E, $04, $40, $44
  81++E887 1E 01 44 38  	DB $1E, $01, $44, $38
  82++E88B 1E 03 10 30  	DB $1E, $03, $10, $30
  83++E88F 1E 22 30 34  	DB $1E, $22, $30, $34
  84++E893 1E 04 34 20  	DB $1E, $04, $34, $20
  85++E897 1E 11 20 10  	DB $1E, $11, $20, $10
  86++E89B 1E 13 10 38  	DB $1E, $13, $10, $38
  87++E89F 1E 13 30 3C  	DB $1E, $13, $30, $3C
  88++E8A3 1E 24 34 40  	DB $1E, $24, $34, $40
  89++E8A7 1E 14 20 44  	DB $1E, $14, $20, $44
  90++E8AB 1E 00 54 58  	DB $1E, $00, $54, $58
  91++E8AF 1E 00 58 60  	DB $1E, $00, $58, $60
  92++E8B3 1E 00 60 64  	DB $1E, $00, $60, $64
  93++E8B7 1E 00 5C 68  	DB $1E, $00, $5C, $68
  94++E8BB 1E 00 6C 70  	DB $1E, $00, $6C, $70
  95++E8BF 1E 00 70 74  	DB $1E, $00, $70, $74
  96++E8C3 1E 00 78 7C  	DB $1E, $00, $78, $7C
  97++E8C7 1E 00 80 84  	DB $1E, $00, $80, $84
  98++E8CB 1E 00 88 8C  	DB $1E, $00, $88, $8C
  99++E8CF 1E 00 90 94  	DB $1E, $00, $90, $94
 100++E8D3 1E 00 94 9C  	DB $1E, $00, $94, $9C
 101++E8D7 1E 00 9C A0  	DB $1E, $00, $9C, $A0
 102++E8DB 1E 00 A4 98  	DB $1E, $00, $A4, $98
 103++E8DF
 104++E8DF              LogoEdgesSize: equ $ - LogoEdges
 105++E8DF
 106++E8DF
 107++E8DF              LogoEdgesCnt: equ LogoEdgesSize/4
 108++E8DF
 109++E8DF
 110++E8DF 1F 00 17 00  LogoNormals:	DB $1F, $00, $17, $00
 111++E8E3 1F 00 04 0F  	DB $1F, $00, $04, $0F
 112++E8E7 3F 00 0D 34  	DB $3F, $00, $0D, $34
 113++E8EB 9F 51 51 00  	DB $9F, $51, $51, $00
 114++E8EF 1F 51 51 00  	DB $1F, $51, $51, $00
 115++E8F3
 116++E8F3
 117++E8F3              LogoNormalsSize: equ $ - LogoNormals
 118++E8F3              LogoLen: equ $ - Logo
 119++E8F3
# file closed: ./Data/ships/Logo.asm
  90+ E8F3                                      include "Data/ships/Mamba.asm"
# file opened: ./Data/ships/Mamba.asm
   1++E8F3 01           Mamba:	                DB $01
   2++E8F4 24 13                                DW $1324
   3++E8F6 A4 E9                                DW MambaEdges
   4++E8F8 70                                   DB MambaEdgesSize
   5++E8F9 00 22                                DB $00, $22
   6++E8FB 19                                   DB MambaVertSize /6
   7++E8FC 96                                   DB MambaVertSize
   8++E8FD 1C                                   DB MambaEdgesCnt
   9++E8FE 00 96                                DB $00, $96
  10++E900 14                                   DB MambaNormalsSize
  11++E901 19 5A 1E                             DB $19, $5A, $1E
  12++E904 14 EA                                DW MambaNormals
  13++E906 02 12                                DB $02, $12
  14++E908 0E E9                                DW MambaVertices
  15++E90A 00 00                                DB 0,0                      ; Type and Tactics
  16++E90C 01                                   DB ShipCanAnger
  17++E90D E0                                   DB $E0                      ; chance of ECM module
  18++E90E
  19++E90E 00 00 40 1F  MambaVertices:	DB $00, $00, $40, $1F, $10, $32
  19++E912 10 32
  20++E914 40 08 20 FF                  DB $40, $08, $20, $FF, $20, $44
  20++E918 20 44
  21++E91A 20 08 20 BE                  DB $20, $08, $20, $BE, $21, $44
  21++E91E 21 44
  22++E920 20 08 20 3E                  DB $20, $08, $20, $3E, $31, $44
  22++E924 31 44
  23++E926 40 08 20 7F                  DB $40, $08, $20, $7F, $30, $44
  23++E92A 30 44
  24++E92C 04 04 10 8E                  DB $04, $04, $10, $8E, $11, $11
  24++E930 11 11
  25++E932 04 04 10 0E                  DB $04, $04, $10, $0E, $11, $11
  25++E936 11 11
  26++E938 08 03 1C 0D                  DB $08, $03, $1C, $0D, $11, $11
  26++E93C 11 11
  27++E93E 08 03 1C 8D                  DB $08, $03, $1C, $8D, $11, $11
  27++E942 11 11
  28++E944 14 04 10 D4                  DB $14, $04, $10, $D4, $00, $00
  28++E948 00 00
  29++E94A 14 04 10 54                  DB $14, $04, $10, $54, $00, $00
  29++E94E 00 00
  30++E950 18 07 14 F4                  DB $18, $07, $14, $F4, $00, $00
  30++E954 00 00
  31++E956 10 07 14 F0                  DB $10, $07, $14, $F0, $00, $00
  31++E95A 00 00
  32++E95C 10 07 14 70                  DB $10, $07, $14, $70, $00, $00
  32++E960 00 00
  33++E962 18 07 14 74                  DB $18, $07, $14, $74, $00, $00
  33++E966 00 00
  34++E968 08 04 20 AD                  DB $08, $04, $20, $AD, $44, $44
  34++E96C 44 44
  35++E96E 08 04 20 2D                  DB $08, $04, $20, $2D, $44, $44
  35++E972 44 44
  36++E974 08 04 20 6E                  DB $08, $04, $20, $6E, $44, $44
  36++E978 44 44
  37++E97A 08 04 20 EE                  DB $08, $04, $20, $EE, $44, $44
  37++E97E 44 44
  38++E980 20 04 20 A7                  DB $20, $04, $20, $A7, $44, $44
  38++E984 44 44
  39++E986 20 04 20 27                  DB $20, $04, $20, $27, $44, $44
  39++E98A 44 44
  40++E98C 24 04 20 67                  DB $24, $04, $20, $67, $44, $44
  40++E990 44 44
  41++E992 24 04 20 E7                  DB $24, $04, $20, $E7, $44, $44
  41++E996 44 44
  42++E998 26 00 20 A5                  DB $26, $00, $20, $A5, $44, $44
  42++E99C 44 44
  43++E99E 26 00 20 25                  DB $26, $00, $20, $25, $44, $44
  43++E9A2 44 44
  44++E9A4
  45++E9A4              MambaVertSize: equ $ - MambaVertices
  46++E9A4
  47++E9A4
  48++E9A4
  49++E9A4 1F 20 00 04  MambaEdges:	DB $1F, $20, $00, $04
  50++E9A8 1F 30 00 10  	DB $1F, $30, $00, $10
  51++E9AC 1F 40 04 10  	DB $1F, $40, $04, $10
  52++E9B0 1E 42 04 08  	DB $1E, $42, $04, $08
  53++E9B4 1E 41 08 0C  	DB $1E, $41, $08, $0C
  54++E9B8 1E 43 0C 10  	DB $1E, $43, $0C, $10
  55++E9BC 0E 11 14 18  	DB $0E, $11, $14, $18
  56++E9C0 0C 11 18 1C  	DB $0C, $11, $18, $1C
  57++E9C4 0D 11 1C 20  	DB $0D, $11, $1C, $20
  58++E9C8 0C 11 14 20  	DB $0C, $11, $14, $20
  59++E9CC 14 00 24 2C  	DB $14, $00, $24, $2C
  60++E9D0 10 00 24 30  	DB $10, $00, $24, $30
  61++E9D4 10 00 28 34  	DB $10, $00, $28, $34
  62++E9D8 14 00 28 38  	DB $14, $00, $28, $38
  63++E9DC 0E 00 34 38  	DB $0E, $00, $34, $38
  64++E9E0 0E 00 2C 30  	DB $0E, $00, $2C, $30
  65++E9E4 0D 44 3C 40  	DB $0D, $44, $3C, $40
  66++E9E8 0E 44 44 48  	DB $0E, $44, $44, $48
  67++E9EC 0C 44 3C 48  	DB $0C, $44, $3C, $48
  68++E9F0 0C 44 40 44  	DB $0C, $44, $40, $44
  69++E9F4 07 44 50 54  	DB $07, $44, $50, $54
  70++E9F8 05 44 50 60  	DB $05, $44, $50, $60
  71++E9FC 05 44 54 60  	DB $05, $44, $54, $60
  72++EA00 07 44 4C 58  	DB $07, $44, $4C, $58
  73++EA04 05 44 4C 5C  	DB $05, $44, $4C, $5C
  74++EA08 05 44 58 5C  	DB $05, $44, $58, $5C
  75++EA0C 1E 21 00 08  	DB $1E, $21, $00, $08
  76++EA10 1E 31 00 0C  	DB $1E, $31, $00, $0C
  77++EA14
  78++EA14              MambaEdgesSize: equ $ - MambaEdges
  79++EA14
  80++EA14
  81++EA14              MambaEdgesCnt: equ MambaEdgesSize/4
  82++EA14
  83++EA14
  84++EA14 5E 00 18 02  MambaNormals:	DB $5E, $00, $18, $02
  85++EA18 1E 00 18 02  	DB $1E, $00, $18, $02
  86++EA1C 9E 20 40 10  	DB $9E, $20, $40, $10
  87++EA20 1E 20 40 10  	DB $1E, $20, $40, $10
  88++EA24 3E 00 00 7F  	DB $3E, $00, $00, $7F
  89++EA28
  90++EA28              MambaNormalsSize: equ $ - MambaNormals
  91++EA28              MambaLen: equ $ - Mamba
  92++EA28
# file closed: ./Data/ships/Mamba.asm
  91+ EA28                                      include "Data/ships/Missile.asm"
# file opened: ./Data/ships/Missile.asm
   1++EA28 00           Missile:	            DB $00
   2++EA29 40 06                                DW $0640
   3++EA2B A9 EA                                DW MissileEdges
   4++EA2D 60                                   DB MissileEdgesSize
   5++EA2E 00 0A                                DB $00, $0A
   6++EA30 11                                   DB MissileVertSize /6
   7++EA31 66                                   DB MissileVertSize
   8++EA32 18                                   DB MissileEdgesCnt
   9++EA33 00 00                                DB $00, $00
  10++EA35 24                                   DB MissileNormalsSize
  11++EA36 0E 02 2C                             DB $0E, $02, $2C
  12++EA39 09 EB                                DW MissileNormals
  13++EA3B 02 00                                DB $02, $00
  14++EA3D 43 EA                                DW MissileVertices
  15++EA3F 01 00                                DB ShipTypeMissile,0                      ; Type and Tactics
  16++EA41 00                                   DB 0
  17++EA42 00                                   DB $00                      ; chance of ECM module
  18++EA43
  19++EA43 00 00 44 1F  MissileVertices:	DB $00, $00, $44, $1F, $10, $32
  19++EA47 10 32
  20++EA49 08 08 24 5F                      DB $08, $08, $24, $5F, $21, $54
  20++EA4D 21 54
  21++EA4F 08 08 24 1F                      DB $08, $08, $24, $1F, $32, $74
  21++EA53 32 74
  22++EA55 08 08 24 9F                      DB $08, $08, $24, $9F, $30, $76
  22++EA59 30 76
  23++EA5B 08 08 24 DF                      DB $08, $08, $24, $DF, $10, $65
  23++EA5F 10 65
  24++EA61 08 08 2C 3F                      DB $08, $08, $2C, $3F, $74, $88
  24++EA65 74 88
  25++EA67 08 08 2C 7F                      DB $08, $08, $2C, $7F, $54, $88
  25++EA6B 54 88
  26++EA6D 08 08 2C FF                      DB $08, $08, $2C, $FF, $65, $88
  26++EA71 65 88
  27++EA73 08 08 2C BF                      DB $08, $08, $2C, $BF, $76, $88
  27++EA77 76 88
  28++EA79 0C 0C 2C 28                      DB $0C, $0C, $2C, $28, $74, $88
  28++EA7D 74 88
  29++EA7F 0C 0C 2C 68                      DB $0C, $0C, $2C, $68, $54, $88
  29++EA83 54 88
  30++EA85 0C 0C 2C E8                      DB $0C, $0C, $2C, $E8, $65, $88
  30++EA89 65 88
  31++EA8B 0C 0C 2C A8                      DB $0C, $0C, $2C, $A8, $76, $88
  31++EA8F 76 88
  32++EA91 08 08 0C A8                      DB $08, $08, $0C, $A8, $76, $77
  32++EA95 76 77
  33++EA97 08 08 0C E8                      DB $08, $08, $0C, $E8, $65, $66
  33++EA9B 65 66
  34++EA9D 08 08 0C 28                      DB $08, $08, $0C, $28, $74, $77
  34++EAA1 74 77
  35++EAA3 08 08 0C 68                      DB $08, $08, $0C, $68, $54, $55
  35++EAA7 54 55
  36++EAA9
  37++EAA9              MissileVertSize: equ $ - MissileVertices
  38++EAA9
  39++EAA9
  40++EAA9
  41++EAA9 1F 21 00 04  MissileEdges:	DB $1F, $21, $00, $04
  42++EAAD 1F 32 00 08  	DB $1F, $32, $00, $08
  43++EAB1 1F 30 00 0C  	DB $1F, $30, $00, $0C
  44++EAB5 1F 10 00 10  	DB $1F, $10, $00, $10
  45++EAB9 1F 24 04 08  	DB $1F, $24, $04, $08
  46++EABD 1F 51 04 10  	DB $1F, $51, $04, $10
  47++EAC1 1F 60 0C 10  	DB $1F, $60, $0C, $10
  48++EAC5 1F 73 08 0C  	DB $1F, $73, $08, $0C
  49++EAC9 1F 74 08 14  	DB $1F, $74, $08, $14
  50++EACD 1F 54 04 18  	DB $1F, $54, $04, $18
  51++EAD1 1F 65 10 1C  	DB $1F, $65, $10, $1C
  52++EAD5 1F 76 0C 20  	DB $1F, $76, $0C, $20
  53++EAD9 1F 86 1C 20  	DB $1F, $86, $1C, $20
  54++EADD 1F 87 14 20  	DB $1F, $87, $14, $20
  55++EAE1 1F 84 14 18  	DB $1F, $84, $14, $18
  56++EAE5 1F 85 18 1C  	DB $1F, $85, $18, $1C
  57++EAE9 08 85 18 28  	DB $08, $85, $18, $28
  58++EAED 08 87 14 24  	DB $08, $87, $14, $24
  59++EAF1 08 87 20 30  	DB $08, $87, $20, $30
  60++EAF5 08 85 1C 2C  	DB $08, $85, $1C, $2C
  61++EAF9 08 74 24 3C  	DB $08, $74, $24, $3C
  62++EAFD 08 54 28 40  	DB $08, $54, $28, $40
  63++EB01 08 76 30 34  	DB $08, $76, $30, $34
  64++EB05 08 65 2C 38  	DB $08, $65, $2C, $38
  65++EB09
  66++EB09              MissileEdgesSize: equ $ - MissileEdges
  67++EB09
  68++EB09
  69++EB09              MissileEdgesCnt: equ MissileEdgesSize/4
  70++EB09
  71++EB09
  72++EB09 9F 40 00 10  MissileNormals:	DB $9F, $40, $00, $10
  73++EB0D 5F 00 40 10  	DB $5F, $00, $40, $10
  74++EB11 1F 40 00 10  	DB $1F, $40, $00, $10
  75++EB15 1F 00 40 10  	DB $1F, $00, $40, $10
  76++EB19 1F 20 00 00  	DB $1F, $20, $00, $00
  77++EB1D 5F 00 20 00  	DB $5F, $00, $20, $00
  78++EB21 9F 20 00 00  	DB $9F, $20, $00, $00
  79++EB25 1F 00 20 00  	DB $1F, $00, $20, $00
  80++EB29 3F 00 00 B0  	DB $3F, $00, $00, $B0
  81++EB2D
  82++EB2D
  83++EB2D              MissileNormalsSize: equ $ - MissileNormals
  84++EB2D              MissileLen: equ $ - Missile
  85++EB2D
# file closed: ./Data/ships/Missile.asm
  92+ EB2D                                      include "Data/ships/Monitor.asm"
# file opened: ./Data/ships/Monitor.asm
   1++EB2D 04           Monitor:	            DB $04
   2++EB2E 00 36                                DW $3600
   3++EB30 AE EB                                DW MonitorEdges
   4++EB32 5C                                   DB MonitorEdgesSize
   5++EB33 00 2A                                DB $00, $2A
   6++EB35 11                                   DB MonitorVertSize /6
   7++EB36 66                                   DB MonitorVertSize
   8++EB37 17                                   DB MonitorEdgesCnt
   9++EB38 01 90                                DB $01, $90
  10++EB3A 2C                                   DB MonitorNormalsSize
  11++EB3B 28 84 10                             DB $28, $84, $10
  12++EB3E 0A EC                                DW MonitorNormals
  13++EB40 00 37                                DB $00, $37
  14++EB42 48 EB                                DW MonitorVertices
  15++EB44 00 00                                DB 0,0                      ; Type and Tactics
  16++EB46 01                                   DB ShipCanAnger
  17++EB47 40                                   DB $40                      ; chance of ECM module
  18++EB48
  19++EB48 00 0A 8C 1F  MonitorVertices:	    DB $00, $0A, $8C, $1F, $FF, $FF
  19++EB4C FF FF
  20++EB4E 14 28 14 3F                          DB $14, $28, $14, $3F, $23, $01
  20++EB52 23 01
  21++EB54 14 28 14 BF                          DB $14, $28, $14, $BF, $50, $34
  21++EB58 50 34
  22++EB5A 32 00 0A 1F                          DB $32, $00, $0A, $1F, $78, $12
  22++EB5E 78 12
  23++EB60 32 00 0A 9F                          DB $32, $00, $0A, $9F, $96, $45
  23++EB64 96 45
  24++EB66 1E 04 3C 3F                          DB $1E, $04, $3C, $3F, $AA, $28
  24++EB6A AA 28
  25++EB6C 1E 04 3C BF                          DB $1E, $04, $3C, $BF, $AA, $49
  25++EB70 AA 49
  26++EB72 12 14 3C 3F                          DB $12, $14, $3C, $3F, $AA, $23
  26++EB76 AA 23
  27++EB78 12 14 3C BF                          DB $12, $14, $3C, $BF, $AA, $34
  27++EB7C AA 34
  28++EB7E 00 14 3C 7F                          DB $00, $14, $3C, $7F, $AA, $89
  28++EB82 AA 89
  29++EB84 00 28 0A 5F                          DB $00, $28, $0A, $5F, $89, $67
  29++EB88 89 67
  30++EB8A 00 22 0A 0A                          DB $00, $22, $0A, $0A, $00, $00
  30++EB8E 00 00
  31++EB90 00 1A 32 0A                          DB $00, $1A, $32, $0A, $00, $00
  31++EB94 00 00
  32++EB96 14 0A 3C 4A                          DB $14, $0A, $3C, $4A, $77, $77
  32++EB9A 77 77
  33++EB9C 0A 00 64 0A                          DB $0A, $00, $64, $0A, $77, $77
  33++EBA0 77 77
  34++EBA2 14 0A 3C CA                          DB $14, $0A, $3C, $CA, $66, $66
  34++EBA6 66 66
  35++EBA8 0A 00 64 8A                          DB $0A, $00, $64, $8A, $66, $66
  35++EBAC 66 66
  36++EBAE              MonitorVertSize:        equ $ - MonitorVertices
  37++EBAE 1F 01 00 04  MonitorEdges:	        DB $1F, $01, $00, $04
  38++EBB2 1F 12 04 0C  	                    DB $1F, $12, $04, $0C
  39++EBB6 1F 23 04 1C                          DB $1F, $23, $04, $1C
  40++EBBA 1F 34 08 20                          DB $1F, $34, $08, $20
  41++EBBE 1F 45 08 10                          DB $1F, $45, $08, $10
  42++EBC2 1F 50 00 08                          DB $1F, $50, $00, $08
  43++EBC6 1F 03 04 08                          DB $1F, $03, $04, $08
  44++EBCA 1F 67 00 28                          DB $1F, $67, $00, $28
  45++EBCE 1F 78 0C 28                          DB $1F, $78, $0C, $28
  46++EBD2 1F 89 24 28                          DB $1F, $89, $24, $28
  47++EBD6 1F 96 10 28                          DB $1F, $96, $10, $28
  48++EBDA 1F 17 00 0C                          DB $1F, $17, $00, $0C
  49++EBDE 1F 28 0C 14                          DB $1F, $28, $0C, $14
  50++EBE2 1F 49 18 10                          DB $1F, $49, $18, $10
  51++EBE6 1F 56 10 00                          DB $1F, $56, $10, $00
  52++EBEA 1F 2A 1C 14                          DB $1F, $2A, $1C, $14
  53++EBEE 1F 3A 20 1C                          DB $1F, $3A, $20, $1C
  54++EBF2 1F 4A 20 18                          DB $1F, $4A, $20, $18
  55++EBF6 1F 8A 14 24                          DB $1F, $8A, $14, $24
  56++EBFA 1F 9A 18 24                          DB $1F, $9A, $18, $24
  57++EBFE 0A 00 2C 30                          DB $0A, $00, $2C, $30
  58++EC02 0A 77 34 38                          DB $0A, $77, $34, $38
  59++EC06 0A 66 3C 40                          DB $0A, $66, $3C, $40
  60++EC0A              MonitorEdgesSize:       equ $ - MonitorEdges
  61++EC0A              MonitorEdgesCnt:        equ MonitorEdgesSize/4
  62++EC0A 1F 00 3E 0B  MonitorNormals:	        DB $1F, $00, $3E, $0B
  63++EC0E 1F 2C 2B 0D                          DB $1F, $2C, $2B, $0D
  64++EC12 3F 36 1C 10                          DB $3F, $36, $1C, $10
  65++EC16 3F 00 39 1C                          DB $3F, $00, $39, $1C
  66++EC1A BF 36 1C 10                          DB $BF, $36, $1C, $10
  67++EC1E 9F 2C 2B 0D                          DB $9F, $2C, $2B, $0D
  68++EC22 DF 26 2F 12                          DB $DF, $26, $2F, $12
  69++EC26 5F 26 2F 12                          DB $5F, $26, $2F, $12
  70++EC2A 7F 27 30 0D                          DB $7F, $27, $30, $0D
  71++EC2E FF 27 30 0D                          DB $FF, $27, $30, $0D
  72++EC32 3F 00 00 40                          DB $3F, $00, $00, $40
  73++EC36              MonitorNormalsSize:     equ $ - MonitorNormals
  74++EC36              MonitorLen:             equ $ - Monitor
  75++EC36
# file closed: ./Data/ships/Monitor.asm
  93+ EC36                                      include "Data/ships/Moray.asm"
# file opened: ./Data/ships/Moray.asm
   1++EC36 01           Moray:	                DB $01
   2++EC37 84 03                                DW $0384
   3++EC39 A5 EC                                DW MorayEdges
   4++EC3B 4C                                   DB MorayEdgesSize
   5++EC3C 00 1A                                DB $00, $1A
   6++EC3E 0E                                   DB MorayVertSize /6
   7++EC3F 54                                   DB MorayVertSize
   8++EC40 13                                   DB MorayEdgesCnt
   9++EC41 00 32                                DB $00, $32
  10++EC43 24                                   DB MorayNormalsSize
  11++EC44 28 59 19                             DB $28, $59, $19
  12++EC47 F1 EC                                DW MorayNormals
  13++EC49 02 2A                                DB $02, $2A
  14++EC4B 51 EC                                DW MorayVertices
  15++EC4D 00 00                                DB 0,0                      ; Type and Tactics
  16++EC4F 01                                   DB ShipCanAnger
  17++EC50 C0                                   DB $C0                      ; chance of ECM module
  18++EC51
  19++EC51 0F 00 41 1F  MorayVertices:	        DB $0F, $00, $41, $1F, $02, $78
  19++EC55 02 78
  20++EC57 0F 00 41 9F                          DB $0F, $00, $41, $9F, $01, $67
  20++EC5B 01 67
  21++EC5D 00 12 28 31                          DB $00, $12, $28, $31, $FF, $FF
  21++EC61 FF FF
  22++EC63 3C 00 00 9F                          DB $3C, $00, $00, $9F, $13, $66
  22++EC67 13 66
  23++EC69 3C 00 00 1F                          DB $3C, $00, $00, $1F, $25, $88
  23++EC6D 25 88
  24++EC6F 1E 1B 0A 78                          DB $1E, $1B, $0A, $78, $45, $78
  24++EC73 45 78
  25++EC75 1E 1B 0A F8                          DB $1E, $1B, $0A, $F8, $34, $67
  25++EC79 34 67
  26++EC7B 09 04 19 E7                          DB $09, $04, $19, $E7, $44, $44
  26++EC7F 44 44
  27++EC81 09 04 19 67                          DB $09, $04, $19, $67, $44, $44
  27++EC85 44 44
  28++EC87 00 12 10 67                          DB $00, $12, $10, $67, $44, $44
  28++EC8B 44 44
  29++EC8D 0D 03 31 05                          DB $0D, $03, $31, $05, $00, $00
  29++EC91 00 00
  30++EC93 06 00 41 05                          DB $06, $00, $41, $05, $00, $00
  30++EC97 00 00
  31++EC99 0D 03 31 85                          DB $0D, $03, $31, $85, $00, $00
  31++EC9D 00 00
  32++EC9F 06 00 41 85                          DB $06, $00, $41, $85, $00, $00
  32++ECA3 00 00
  33++ECA5              MorayVertSize:          equ $ - MorayVertices
  34++ECA5 1F 07 00 04  MorayEdges:	            DB $1F, $07, $00, $04
  35++ECA9 1F 16 04 0C                          DB $1F, $16, $04, $0C
  36++ECAD 18 36 0C 18                          DB $18, $36, $0C, $18
  37++ECB1 18 47 14 18                          DB $18, $47, $14, $18
  38++ECB5 18 58 10 14                          DB $18, $58, $10, $14
  39++ECB9 1F 28 00 10                          DB $1F, $28, $00, $10
  40++ECBD 0F 67 04 18                          DB $0F, $67, $04, $18
  41++ECC1 0F 78 00 14                          DB $0F, $78, $00, $14
  42++ECC5 0F 02 00 08                          DB $0F, $02, $00, $08
  43++ECC9 0F 01 04 08                          DB $0F, $01, $04, $08
  44++ECCD 11 13 08 0C                          DB $11, $13, $08, $0C
  45++ECD1 11 25 08 10                          DB $11, $25, $08, $10
  46++ECD5 0D 45 08 14                          DB $0D, $45, $08, $14
  47++ECD9 0D 34 08 18                          DB $0D, $34, $08, $18
  48++ECDD 05 44 1C 20                          DB $05, $44, $1C, $20
  49++ECE1 07 44 1C 24                          DB $07, $44, $1C, $24
  50++ECE5 07 44 20 24                          DB $07, $44, $20, $24
  51++ECE9 05 00 28 2C                          DB $05, $00, $28, $2C
  52++ECED 05 00 30 34                          DB $05, $00, $30, $34
  53++ECF1              MorayEdgesSize:         equ $ - MorayEdges
  54++ECF1              MorayEdgesCnt:          equ MorayEdgesSize/4
  55++ECF1 1F 00 2B 07  MorayNormals:	        DB $1F, $00, $2B, $07
  56++ECF5 9F 0A 31 07                          DB $9F, $0A, $31, $07
  57++ECF9 1F 0A 31 07                          DB $1F, $0A, $31, $07
  58++ECFD F8 3B 1C 65                          DB $F8, $3B, $1C, $65
  59++ED01 78 00 34 4E                          DB $78, $00, $34, $4E
  60++ED05 78 3B 1C 65                          DB $78, $3B, $1C, $65
  61++ED09 DF 48 63 32                          DB $DF, $48, $63, $32
  62++ED0D 5F 00 53 1E                          DB $5F, $00, $53, $1E
  63++ED11 5F 48 63 32                          DB $5F, $48, $63, $32
  64++ED15
  65++ED15              MorayNormalsSize:       equ $ - MorayNormals
  66++ED15              MorayLen:               equ $ - Moray
  67++ED15
# file closed: ./Data/ships/Moray.asm
  94+ ED15                                      include "Data/ships/Ophidian.asm"
# file opened: ./Data/ships/Ophidian.asm
   1++ED15 02           Ophidian:	            DB $02
   2++ED16 88 0E                                DW $0E88
   3++ED18 A8 ED                                DW OphidianEdges
   4++ED1A 78                                   DB OphidianEdgesSize
   5++ED1B 00 3C                                DB $00, $3C
   6++ED1D 14                                   DB OphidianVertSize /6
   7++ED1E 78                                   DB OphidianVertSize
   8++ED1F 1E                                   DB OphidianEdgesCnt
   9++ED20 00 32                                DB $00, $32
  10++ED22 30                                   DB OphidianNormalsSize
  11++ED23 14 40 22                             DB $14, $40, $22
  12++ED26 20 EE                                DW OphidianNormals
  13++ED28 01 1A                                DB $01, $1A
  14++ED2A 30 ED                                DW OphidianVertices
  15++ED2C 00 00                                DB 0,0                      ; Type and Tactics
  16++ED2E 01                                   DB ShipCanAnger
  17++ED2F C0                                   DB $C0                      ; chance of ECM module
  18++ED30
  19++ED30 14 00 46 9F  OphidianVertices:	    DB $14, $00, $46, $9F, $68, $02 ; 01
  19++ED34 68 02
  20++ED36 14 00 46 1F                          DB $14, $00, $46, $1F, $67, $01 ; 02
  20++ED3A 67 01
  21++ED3C 00 0A 28 1F                          DB $00, $0A, $28, $1F, $22, $01 ; 03
  21++ED40 22 01
  22++ED42 1E 00 1E 9F                          DB $1E, $00, $1E, $9F, $8A, $24 ; 04
  22++ED46 8A 24
  23++ED48 1E 00 1E 1F                          DB $1E, $00, $1E, $1F, $79, $13 ; 05
  23++ED4C 79 13
  24++ED4E 00 10 0A 1F                          DB $00, $10, $0A, $1F, $FF, $FF ; 06
  24++ED52 FF FF
  25++ED54 14 0A 32 3F                          DB $14, $0A, $32, $3F, $9B, $35 ; 07
  25++ED58 9B 35
  26++ED5A 14 0A 32 BF                          DB $14, $0A, $32, $BF, $AB, $45 ; 08
  26++ED5E AB 45
  27++ED60 1E 00 32 BF                          DB $1E, $00, $32, $BF, $BB, $4A ; 09
  27++ED64 BB 4A
  28++ED66 28 00 32 B0                          DB $28, $00, $32, $B0, $FF, $FF ; 10
  28++ED6A FF FF
  29++ED6C 1E 00 1E B0                          DB $1E, $00, $1E, $B0, $FF, $FF ; 11
  29++ED70 FF FF
  30++ED72 1E 00 32 3F                          DB $1E, $00, $32, $3F, $BB, $39 ; 12
  30++ED76 BB 39
  31++ED78 28 00 32 30                          DB $28, $00, $32, $30, $FF, $FF ; 13
  31++ED7C FF FF
  32++ED7E 1E 00 1E 30                          DB $1E, $00, $1E, $30, $FF, $FF ; 14
  32++ED82 FF FF
  33++ED84 00 0A 32 7F                          DB $00, $0A, $32, $7F, $BB, $9A ; 15
  33++ED88 BB 9A
  34++ED8A 00 10 14 5F                          DB $00, $10, $14, $5F, $FF, $FF ; 16
  34++ED8E FF FF
  35++ED90 0A 04 32 30                          DB $0A, $04, $32, $30, $BB, $BB ; 17
  35++ED94 BB BB
  36++ED96 0A 02 32 70                          DB $0A, $02, $32, $70, $BB, $BB ; 18
  36++ED9A BB BB
  37++ED9C 0A 02 32 F0                          DB $0A, $02, $32, $F0, $BB, $BB ; 19
  37++EDA0 BB BB
  38++EDA2 0A 04 32 B0                          DB $0A, $04, $32, $B0, $BB, $BB ; 20
  38++EDA6 BB BB
  39++EDA8
  40++EDA8              OphidianVertSize:       equ $ - OphidianVertices
  41++EDA8 1F 06 00 04  OphidianEdges:	        DB $1F, $06, $00, $04
  42++EDAC 1F 01 04 08                          DB $1F, $01, $04, $08
  43++EDB0 1F 02 00 08                          DB $1F, $02, $00, $08
  44++EDB4 1F 12 08 14                          DB $1F, $12, $08, $14
  45++EDB8 1F 13 10 14                          DB $1F, $13, $10, $14
  46++EDBC 1F 24 0C 14                          DB $1F, $24, $0C, $14
  47++EDC0 1F 35 14 18                          DB $1F, $35, $14, $18
  48++EDC4 1F 45 14 1C                          DB $1F, $45, $14, $1C
  49++EDC8 1F 28 00 0C                          DB $1F, $28, $00, $0C
  50++EDCC 1F 17 04 10                          DB $1F, $17, $04, $10
  51++EDD0 1F 39 10 2C                          DB $1F, $39, $10, $2C
  52++EDD4 1F 4A 0C 20                          DB $1F, $4A, $0C, $20
  53++EDD8 1F 67 04 3C                          DB $1F, $67, $04, $3C
  54++EDDC 1F 68 00 3C                          DB $1F, $68, $00, $3C
  55++EDE0 1F 79 10 3C                          DB $1F, $79, $10, $3C
  56++EDE4 1F 8A 0C 3C                          DB $1F, $8A, $0C, $3C
  57++EDE8 1F 9A 38 3C                          DB $1F, $9A, $38, $3C
  58++EDEC 1F 5B 18 1C                          DB $1F, $5B, $18, $1C
  59++EDF0 1F 3B 18 2C                          DB $1F, $3B, $18, $2C
  60++EDF4 1F 4B 1C 20                          DB $1F, $4B, $1C, $20
  61++EDF8 1F 9B 2C 38                          DB $1F, $9B, $2C, $38
  62++EDFC 1F AB 20 38                          DB $1F, $AB, $20, $38
  63++EE00 10 BB 40 44                          DB $10, $BB, $40, $44
  64++EE04 10 BB 44 48                          DB $10, $BB, $44, $48
  65++EE08 10 BB 48 4C                          DB $10, $BB, $48, $4C
  66++EE0C 10 BB 4C 40                          DB $10, $BB, $4C, $40
  67++EE10 10 39 30 34                          DB $10, $39, $30, $34
  68++EE14 10 39 2C 30                          DB $10, $39, $2C, $30
  69++EE18 10 4A 28 24                          DB $10, $4A, $28, $24
  70++EE1C 10 4A 24 20                          DB $10, $4A, $24, $20
  71++EE20              OphidianEdgesSize:      equ $ - OphidianEdges
  72++EE20              OphidianEdgesCnt:       equ OphidianEdgesSize/4
  73++EE20
  74++EE20 1F 00 25 0C  OphidianNormals:	    DB $1F, $00, $25, $0C
  75++EE24 1F 0B 1C 05                          DB $1F, $0B, $1C, $05
  76++EE28 9F 0B 1C 05                          DB $9F, $0B, $1C, $05
  77++EE2C 1F 10 22 02                          DB $1F, $10, $22, $02
  78++EE30 9F 10 22 02                          DB $9F, $10, $22, $02
  79++EE34 3F 00 25 03                          DB $3F, $00, $25, $03
  80++EE38 5F 00 1F 0A                          DB $5F, $00, $1F, $0A
  81++EE3C 5F 0A 14 02                          DB $5F, $0A, $14, $02
  82++EE40 DF 0A 14 02                          DB $DF, $0A, $14, $02
  83++EE44 7F 12 20 02                          DB $7F, $12, $20, $02
  84++EE48 FF 12 20 02                          DB $FF, $12, $20, $02
  85++EE4C 3F 00 00 25                          DB $3F, $00, $00, $25
  86++EE50
  87++EE50              OphidianNormalsSize:    equ $ - OphidianNormals
  88++EE50              OphidianLen:            equ $ - Ophidian
  89++EE50
# file closed: ./Data/ships/Ophidian.asm
  95+ EE50                                      include "Data/ships/Plate.asm"
# file opened: ./Data/ships/Plate.asm
   1++EE50 80           Plate:	                DB $80
   2++EE51 64 00                                DW $0064
   3++EE53 7D EE                                DW PlateEdges
   4++EE55 10                                   DB PlateEdgesSize
   5++EE56 00 0A                                DB $00, $0A
   6++EE58 03                                   DB PlateVertSize /6
   7++EE59 12                                   DB PlateVertSize
   8++EE5A 04                                   DB PlateEdgesCnt
   9++EE5B 00 00                                DB $00, $00
  10++EE5D 04                                   DB PlateNormalsSize
  11++EE5E 05 10 10                             DB $05, $10, $10
  12++EE61 8D EE                                DW PlateNormals
  13++EE63 03 00                                DB $03, $00
  14++EE65 6B EE                                DW PlateVertices
  15++EE67 00 00                                DB 0,0                      ; Type and Tactics
  16++EE69 01                                   DB ShipCanAnger
  17++EE6A 00                                   DB $00                      ; chance of ECM module
  18++EE6B
  19++EE6B
  20++EE6B 0F 16 09 FF  PlateVertices:	        DB $0F, $16, $09, $FF, $FF, $FF
  20++EE6F FF FF
  21++EE71 0F 26 09 BF                          DB $0F, $26, $09, $BF, $FF, $FF
  21++EE75 FF FF
  22++EE77 13 20 0B 14                          DB $13, $20, $0B, $14, $FF, $FF
  22++EE7B FF FF
  23++EE7D
  24++EE7D              PlateVertSize: equ $ - PlateVertices
  25++EE7D
  26++EE7D
  27++EE7D
  28++EE7D 1F FF 00 04  PlateEdges:	DB $1F, $FF, $00, $04
  29++EE81 10 FF 04 08  	DB $10, $FF, $04, $08
  30++EE85 14 FF 08 0C  	DB $14, $FF, $08, $0C
  31++EE89 10 FF 0C 00  	DB $10, $FF, $0C, $00
  32++EE8D
  33++EE8D              PlateEdgesSize: equ $ - PlateEdges
  34++EE8D
  35++EE8D
  36++EE8D              PlateEdgesCnt: equ PlateEdgesSize/4
  37++EE8D
  38++EE8D
  39++EE8D 00 00 00 00  PlateNormals:	DB $00, $00, $00, $00
  40++EE91
  41++EE91
  42++EE91              PlateNormalsSize: equ $ - PlateNormals
  43++EE91              PlateLen: equ $ - Plate
  44++EE91
# file closed: ./Data/ships/Plate.asm
  96+ EE91                                      include "Data/ships/Python.asm"
# file opened: ./Data/ships/Python.asm
   1++EE91              ;\ -> &5BA1 \ Python = Type 12
   2++EE91 05           Python:                 DB $05
   3++EE92 00 19                                DW $1900
   4++EE94 EE EE                                DW PythonEdges
   5++EE96 68                                   DB PythonEdgesSize
   6++EE97 00 2A                                DB $00,$2A
   7++EE99 0B                                   DB PythonVertSize /6
   8++EE9A 42                                   DB PythonVertSize
   9++EE9B 1A                                   DB PythonEdgesCnt
  10++EE9C 00 00                                DB $00,$00
  11++EE9E 34                                   DB PythonNormalsSize
  12++EE9F 28 FA 14                             DB $28,$FA,$14
  13++EEA2 56 EF                                DW PythonNormals
  14++EEA4 00 1B                                DB $00, $1B
  15++EEA6 AC EE                                DW PythonVertices
  16++EEA8 00 00                                DB 0,0                      ; Type and Tactics
  17++EEAA 01                                   DB ShipCanAnger
  18++EEAB E0                                   DB $E0                      ; chance of ECM module
  19++EEAC
  20++EEAC 00 00 E0 1F  PythonVertices:         DB $00, $00, $E0, $1F, $10, $32
  20++EEB0 10 32
  21++EEB2 00 30 30 1E                          DB $00, $30, $30, $1E, $10, $54
  21++EEB6 10 54
  22++EEB8 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  22++EEBC FF FF
  23++EEBE 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  23++EEC2 FF FF
  24++EEC4 00 30 20 3E                          DB $00, $30, $20, $3E, $54, $98
  24++EEC8 54 98
  25++EECA 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  25++EECE 89 CC
  26++EED0 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  26++EED4 B8 CC
  27++EED6 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  27++EEDA A9 CC
  28++EEDC 00 30 30 5E                          DB $00, $30, $30, $5E, $32, $76
  28++EEE0 32 76
  29++EEE2 00 30 20 7E                          DB $00, $30, $20, $7E, $76, $BA
  29++EEE6 76 BA
  30++EEE8 00 18 70 7E                          DB $00, $18, $70, $7E, $BA, $CC
  30++EEEC BA CC
  31++EEEE              PythonVertSize          equ $  - PythonVertices
  32++EEEE 1E 32 00 20  PythonEdges:            DB $1E, $32, $00, $20, $1F, $20, $00, $0C
  32++EEF2 1F 20 00 0C
  33++EEF6 1F 31 00 08                          DB $1F, $31, $00, $08, $1E, $10, $00, $04
  33++EEFA 1E 10 00 04
  34++EEFE 1D 59 08 10                          DB $1D, $59, $08, $10, $1D, $51, $04, $08
  34++EF02 1D 51 04 08
  35++EF06 1D 37 08 20                          DB $1D, $37, $08, $20, $1D, $40, $04, $0C
  35++EF0A 1D 40 04 0C
  36++EF0E 1D 62 0C 20                          DB $1D, $62, $0C, $20, $1D, $A7, $08, $24
  36++EF12 1D A7 08 24
  37++EF16 1D 84 0C 10                          DB $1D, $84, $0C, $10, $1D, $B6, $0C, $24
  37++EF1A 1D B6 0C 24
  38++EF1E 05 88 0C 14                          DB $05, $88, $0C, $14, $05, $BB, $0C, $28
  38++EF22 05 BB 0C 28
  39++EF26 05 99 08 14                          DB $05, $99, $08, $14, $05, $AA, $08, $28
  39++EF2A 05 AA 08 28
  40++EF2E 1F A9 08 1C                          DB $1F, $A9, $08, $1C, $1F, $B8, $0C, $18
  40++EF32 1F B8 0C 18
  41++EF36 1F C8 14 18                          DB $1F, $C8, $14, $18, $1F, $C9, $14, $1C
  41++EF3A 1F C9 14 1C
  42++EF3E 1D AC 1C 28                          DB $1D, $AC, $1C, $28, $1D, $CB, $18, $28
  42++EF42 1D CB 18 28
  43++EF46 1D 98 10 14                          DB $1D, $98, $10, $14, $1D, $BA, $24, $28
  43++EF4A 1D BA 24 28
  44++EF4E 1D 54 04 10                          DB $1D, $54, $04, $10, $1D, $76, $20, $24
  44++EF52 1D 76 20 24
  45++EF56              PythonEdgesSize         equ $  - PythonEdges
  46++EF56              PythonEdgesCnt          equ PythonEdgesSize/4
  47++EF56 9E 1B 28 0B  PythonNormals           DB $9E, $1B, $28, $0B, $1E, $1B, $28, $0B
  47++EF5A 1E 1B 28 0B
  48++EF5E DE 1B 28 0B                          DB $DE, $1B, $28, $0B, $5E, $1B, $28, $0B
  48++EF62 5E 1B 28 0B
  49++EF66 9E 13 26 00                          DB $9E, $13, $26, $00, $1E, $13, $26, $00
  49++EF6A 1E 13 26 00
  50++EF6E DE 13 26 00                          DB $DE, $13, $26, $00, $5E, $13, $26, $00
  50++EF72 5E 13 26 00
  51++EF76 BE 19 25 0B                          DB $BE, $19, $25, $0B, $3E, $19, $25, $0B
  51++EF7A 3E 19 25 0B
  52++EF7E 7E 19 25 0B                          DB $7E, $19, $25, $0B, $FE, $19, $25, $0B
  52++EF82 FE 19 25 0B
  53++EF86 3E 00 00 70                          DB $3E, $00, $00, $70
  54++EF8A              PythonNormalsSize       equ $  - PythonNormals
  55++EF8A              PythonLen               equ $  - Python
  56++EF8A
# file closed: ./Data/ships/Python.asm
  97+ EF8A                                      include "Data/ships/Python_P.asm"
# file opened: ./Data/ships/Python_P.asm
   1++EF8A 02           Python_P:	            DB $02
   2++EF8B 00 19                                DW $1900
   3++EF8D E7 EF                                DW Python_PEdges
   4++EF8F 68                                   DB Python_PEdgesSize
   5++EF90 00 2A                                DB $00, $2A
   6++EF92 0B                                   DB Python_PVertSize /6
   7++EF93 42                                   DB Python_PVertSize
   8++EF94 1A                                   DB Python_PEdgesCnt
   9++EF95 00 C8                                DB $00, $C8
  10++EF97 34                                   DB Python_PNormalsSize
  11++EF98 28 FA 14                             DB $28, $FA, $14
  12++EF9B 4F F0                                DW Python_PNormals
  13++EF9D 00 1B                                DB $00, $1B
  14++EF9F A5 EF                                DW Python_PVertices
  15++EFA1 00 00                                DB 0,0                      ; Type and Tactics
  16++EFA3 01                                   DB ShipCanAnger
  17++EFA4 F0                                   DB $F0                      ; chance of ECM module
  18++EFA5
  19++EFA5 00 00 E0 1F  Python_PVertices:	    DB $00, $00, $E0, $1F, $10, $32
  19++EFA9 10 32
  20++EFAB 00 30 30 1F                          DB $00, $30, $30, $1F, $10, $54
  20++EFAF 10 54
  21++EFB1 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  21++EFB5 FF FF
  22++EFB7 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  22++EFBB FF FF
  23++EFBD 00 30 20 3F                          DB $00, $30, $20, $3F, $54, $98
  23++EFC1 54 98
  24++EFC3 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  24++EFC7 89 CC
  25++EFC9 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  25++EFCD B8 CC
  26++EFCF 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  26++EFD3 A9 CC
  27++EFD5 00 30 30 5F                          DB $00, $30, $30, $5F, $32, $76
  27++EFD9 32 76
  28++EFDB 00 30 20 7F                          DB $00, $30, $20, $7F, $76, $BA
  28++EFDF 76 BA
  29++EFE1 00 18 70 7F                          DB $00, $18, $70, $7F, $BA, $CC
  29++EFE5 BA CC
  30++EFE7
  31++EFE7              Python_PVertSize: equ $ - Python_PVertices
  32++EFE7
  33++EFE7
  34++EFE7
  35++EFE7 1F 32 00 20  Python_PEdges:	DB $1F, $32, $00, $20
  36++EFEB 1F 20 00 0C  	DB $1F, $20, $00, $0C
  37++EFEF 1F 31 00 08  	DB $1F, $31, $00, $08
  38++EFF3 1F 10 00 04  	DB $1F, $10, $00, $04
  39++EFF7 1F 59 08 10  	DB $1F, $59, $08, $10
  40++EFFB 1F 51 04 08  	DB $1F, $51, $04, $08
  41++EFFF 1F 37 08 20  	DB $1F, $37, $08, $20
  42++F003 1F 40 04 0C  	DB $1F, $40, $04, $0C
  43++F007 1F 62 0C 20  	DB $1F, $62, $0C, $20
  44++F00B 1F A7 08 24  	DB $1F, $A7, $08, $24
  45++F00F 1F 84 0C 10  	DB $1F, $84, $0C, $10
  46++F013 1F B6 0C 24  	DB $1F, $B6, $0C, $24
  47++F017 07 88 0C 14  	DB $07, $88, $0C, $14
  48++F01B 07 BB 0C 28  	DB $07, $BB, $0C, $28
  49++F01F 07 99 08 14  	DB $07, $99, $08, $14
  50++F023 07 AA 08 28  	DB $07, $AA, $08, $28
  51++F027 1F A9 08 1C  	DB $1F, $A9, $08, $1C
  52++F02B 1F B8 0C 18  	DB $1F, $B8, $0C, $18
  53++F02F 1F C8 14 18  	DB $1F, $C8, $14, $18
  54++F033 1F C9 14 1C  	DB $1F, $C9, $14, $1C
  55++F037 1F AC 1C 28  	DB $1F, $AC, $1C, $28
  56++F03B 1F CB 18 28  	DB $1F, $CB, $18, $28
  57++F03F 1F 98 10 14  	DB $1F, $98, $10, $14
  58++F043 1F BA 24 28  	DB $1F, $BA, $24, $28
  59++F047 1F 54 04 10  	DB $1F, $54, $04, $10
  60++F04B 1F 76 20 24  	DB $1F, $76, $20, $24
  61++F04F
  62++F04F              Python_PEdgesSize: equ $ - Python_PEdges
  63++F04F
  64++F04F
  65++F04F              Python_PEdgesCnt: equ Python_PEdgesSize/4
  66++F04F
  67++F04F
  68++F04F 9F 1B 28 0B  Python_PNormals:	DB $9F, $1B, $28, $0B
  69++F053 1F 1B 28 0B  	DB $1F, $1B, $28, $0B
  70++F057 DF 1B 28 0B  	DB $DF, $1B, $28, $0B
  71++F05B 5F 1B 28 0B  	DB $5F, $1B, $28, $0B
  72++F05F 9F 13 26 00  	DB $9F, $13, $26, $00
  73++F063 1F 13 26 00  	DB $1F, $13, $26, $00
  74++F067 DF 13 26 00  	DB $DF, $13, $26, $00
  75++F06B 5F 13 26 00  	DB $5F, $13, $26, $00
  76++F06F BF 19 25 0B  	DB $BF, $19, $25, $0B
  77++F073 3F 19 25 0B  	DB $3F, $19, $25, $0B
  78++F077 7F 19 25 0B  	DB $7F, $19, $25, $0B
  79++F07B FF 19 25 0B  	DB $FF, $19, $25, $0B
  80++F07F 3F 00 00 70  	DB $3F, $00, $00, $70
  81++F083
  82++F083
  83++F083              Python_PNormalsSize: equ $ - Python_PNormals
  84++F083              Python_PLen: equ $ - Python_P
  85++F083
# file closed: ./Data/ships/Python_P.asm
  98+ F083
# file closed: ./Data/ShipModelMetaData2.asm
 752  F083                  DISPLAY "Bank ",BankShipModels2," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels2"
 753  F083              ; Bank 68  ------------------------------------------------------------------------------------------------------------------------
 754  F083                  SLOT    ShipModelsAddr
 755  F083                  PAGE    BankShipModels3
 756  F083              	ORG     ShipModelsAddr, BankShipModels3
 757  E000
 758  E000                  INCLUDE "./Data/ShipBank3Label.asm"
# file opened: ./Data/ShipBank3Label.asm
   1+ E000 53 68 69 70  ShipBank3Label:         DB  "ShipBank3      "
   1+ E004 42 61 6E 6B
   1+ E008 33 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank3Label.asm
 759  E00F              GetShipBank3Id:         MGetShipBankId ShipBankTable3
 759  E00F 06 00       >                        ld      b,0
 759  E011 4F          >                        ld      c,a                                 ; c= original ship id
 759  E012 CB 3F       >.ShiftLoop:             srl     a
 759  E014 CB 3F       >                        srl     a
 759  E016 CB 3F       >                        srl     a
 759  E018 CB 3F       >                        srl     a                                   ; divide by 16
 759  E01A 47          >                        ld      b,a                                 ; b = bank nbr
 759  E01B 79          >                        ld      a,c
 759  E01C 50          >                        ld      d,b
 759  E01D 1E 10       >                        ld      e,16
 759  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
 759  E021 93          >                        sub     e                                   ; a= actual model id now
 759  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
 759  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
 759  E024 7A          >                        ld      a,d                                 ; a = bank number
 759  E025             >;.. Now b = bank and a = adjusted ship nbr
 759  E025 21 62 E0    >                        ld      hl,ShipBankTable3                        ; a= bank index
 759  E028 ED 31       >                        add     hl,a
 759  E02A ED 31       >                        add     hl,a
 759  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
 759  E02D             >                        ClearCarryFlag
 759  E02D B7          >                        or a
 759  E02E C9          >                        ret
 760  E02F              CopyVertsToUniv3:       McopyVertsToUniverse
 760  E02F 2A 2F C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
 760  E032 11 35 C3    >                        ld          de,UBnkHullVerticies
 760  E035 06 00       >                        ld          b,0
 760  E037 3A 23 C3    >                        ld			a,(VertexCtX6Addr)
 760  E03A 4F          >                        ld          c,a
 760  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 760  E03C CD C9 7C    >                        call        memcopy_dma
 760  E03F C9          >                        ret
 761  E040              CopyEdgesToUniv3:       McopyEdgesToUniverse
 761  E040 2A 1D C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
 761  E043 11 25 C4    >                        ld          de,UBnkHullEdges
 761  E046 06 00       >                        ld          b,0
 761  E048 3A 1F C3    >                        ld			a,(LineX4Addr)
 761  E04B 4F          >                        ld          c,a
 761  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 761  E04D CD C9 7C    >                        call        memcopy_dma
 761  E050 C9          >                        ret
 762  E051              CopyNormsToUniv3:       McopyNormsToUniverse
 762  E051 2A 2B C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 762  E054 11 ED C4    >                        ld          de,UBnkHullNormals
 762  E057 06 00       >                        ld          b,0
 762  E059 3A 27 C3    >                        ld          a,(FaceCtX4Addr)
 762  E05C 4F          >                        ld          c,a
 762  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 762  E05E CD C9 7C    >                        call        memcopy_dma
 762  E061 C9          >                        ret
 763  E062              ShipBankTable3:         MShipBankTable
 763  E062 3B 00       >                        DW      BankShipModels1
 763  E064 43 00       >                        DW      BankShipModels2
 763  E066 44 00       >                        DW      BankShipModels3
 763  E068 45 00       >                        DW      BankShipModels4
 764  E06A              CopyShipToUniverse3     MCopyShipToUniverse     BankShipModels3
 764  E06A 21 31 C0    >                        ld          hl,UBnkShipModelBank
 764  E06D 36 44       >                        ld          (hl),BankShipModels3
 764  E06F 32 32 C0    >                        ld          (UBnKShipModelNbr),a
 764  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
 764  E075 ED 31       >                        add         hl,a
 764  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 764  E079 4E          >                        ld          c,(hl)
 764  E07A 23          >                        inc         hl
 764  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
 764  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
 764  E07F ED 31       >                        add         hl,a
 764  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
 764  E083 7E          >                        ld          a,(hl)
 764  E084 23          >                        inc         hl
 764  E085 66          >                        ld          h,(hl)
 764  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
 764  E087 11 1A C3    >                        ld          de,UBnkHullCopy             ; Universe bank
 764  E08A 01 1B 00    >                        ld          bc,ShipDataLength
 764  E08D ED B0       >                        ldir
 764  E08F CD 2F E0    >                        call        CopyVertsToUniv
 764  E092 CD 40 E0    >                        call        CopyEdgesToUniv
 764  E095 CD 51 E0    >                        call        CopyNormsToUniv
 764  E098 C9          >                        ret
 765  E099              CopyBodyToUniverse3:    MCopyBodyToUniverse     CopyShipToUniverse3
 765  E099 3E 0D       >                        ld          a,13
 765  E09B CD 6A E0    >                        call        CopyShipToUniverse3
 765  E09E C9          >                        ret
 766  E09F                  INCLUDE "./Data/ShipModelMetaData3.asm"
# file opened: ./Data/ShipModelMetaData3.asm
   1+ E09F 3F E1        ShipModelTable3:         DW Rock_Hermit                             ;32  $30
   2+ E0A1 1C E2                                 DW ShuttleType9                            ;33  $31
   3+ E0A3 55 E3                                 DW Shuttle_Mk_2                            ;34  $32
   4+ E0A5 7A E4                                 DW Sidewinder                              ;35  $33
   5+ E0A7 29 E5                                 DW Splinter                                ;36  $34
   6+ E0A9 84 E5                                 DW TestVector                              ;37  $35
   7+ E0AB E9 E5                                 DW Thargoid                                ;38  $36
   8+ E0AD 0C E7                                 DW Thargon                                 ;39  $37
   9+ E0AF BB E7                                 DW TransportType10                         ;40  $38
  10+ E0B1 A4 E9                                 DW Viper                                   ;41  $39
  11+ E0B3 85 EA                                 DW Worm                                    ;42  $3A
  12+ E0B5 3C EB                                 DW Rattler                                 ;43  $3B
  13+ E0B7 00 00                                 DW 0                                       ;44  $3C
  14+ E0B9 00 00                                 DW 0                                       ;45  $3D
  15+ E0BB 00 00                                 DW 0                                       ;46  $3E
  16+ E0BD 00 00                                 DW 0                                       ;47  $3F
  17+ E0BF 5A E1        ShipVertexTable3:        DW Rock_HermitVertices                     ;32  $30
  18+ E0C1 37 E2                                 DW ShuttleType9Vertices                    ;33  $31
  19+ E0C3 70 E3                                 DW Shuttle_Mk_2Vertices                    ;34  $32
  20+ E0C5 95 E4                                 DW SidewinderVertices                      ;35  $33
  21+ E0C7 44 E5                                 DW SplinterVertices                        ;36  $34
  22+ E0C9 9F E5                                 DW TestVectorVertices                      ;37  $35
  23+ E0CB 04 E6                                 DW ThargoidVertices                        ;38  $36
  24+ E0CD 27 E7                                 DW ThargonVertices                         ;39  $37
  25+ E0CF D6 E7                                 DW TransportType10Vertices                 ;40  $38
  26+ E0D1 BF E9                                 DW ViperVertices                           ;41  $39
  27+ E0D3 A0 EA                                 DW WormVertices                            ;42  $3A
  28+ E0D5 57 EB                                 DW RattlerVertices                         ;43  $3B
  29+ E0D7 00 00                                 DW 0                                       ;44  $3C
  30+ E0D9 00 00                                 DW 0                                       ;45  $3D
  31+ E0DB 00 00                                 DW 0                                       ;46  $3E
  32+ E0DD 00 00                                 DW 0                                       ;47  $3F
  33+ E0DF
  34+ E0DF 90 E1        ShipEdgeTable3:          DW Rock_HermitEdges                        ;32  $30
  35+ E0E1 A9 E2                                 DW ShuttleType9Edges                       ;33  $31
  36+ E0E3 D6 E3                                 DW Shuttle_Mk_2Edges                       ;34  $32
  37+ E0E5 D1 E4                                 DW SidewinderEdges                         ;35  $33
  38+ E0E7 5C E5                                 DW SplinterEdges                           ;36  $34
  39+ E0E9 C9 E5                                 DW TestVectorEdges                         ;37  $35
  40+ E0EB 7C E6                                 DW ThargoidEdges                           ;38  $36
  41+ E0ED 63 E7                                 DW ThargonEdges                            ;39  $37
  42+ E0EF B4 E8                                 DW TransportType10Edges                    ;40  $38
  43+ E0F1 19 EA                                 DW ViperEdges                              ;41  $39
  44+ E0F3 DC EA                                 DW WormEdges                               ;42  $3A
  45+ E0F5 B1 EB                                 DW RattlerEdges                            ;43  $3B
  46+ E0F7 00 00                                 DW 0                                       ;44  $3C
  47+ E0F9 00 00                                 DW 0                                       ;45  $3D
  48+ E0FB 00 00                                 DW 0                                       ;46  $3E
  49+ E0FD 00 00                                 DW 0                                       ;47  $3F
  50+ E0FF
  51+ E0FF E4 E1        ShipNormalTable3:        DW Rock_HermitNormals                      ;32  $30
  52+ E101 21 E3                                 DW ShuttleType9Normals                     ;33  $31
  53+ E103 46 E4                                 DW Shuttle_Mk_2Normals                     ;34  $32
  54+ E105 0D E5                                 DW SidewinderNormals                       ;35  $33
  55+ E107 74 E5                                 DW SplinterNormals                         ;36  $34
  56+ E109 D9 E5                                 DW TestVectorNormals                       ;37  $35
  57+ E10B E4 E6                                 DW ThargoidNormals                         ;38  $36
  58+ E10D 9F E7                                 DW ThargonNormals                          ;39  $37
  59+ E10F 6C E9                                 DW TransportType10Normals                  ;40  $38
  60+ E111 69 EA                                 DW ViperNormals                            ;41  $39
  61+ E113 1C EB                                 DW WormNormals                             ;42  $3A
  62+ E115 B1 EB                                 DW RattlerEdges                            ;43  $3B
  63+ E117 00 00                                 DW 0                                       ;44  $3C
  64+ E119 00 00                                 DW 0                                       ;45  $3D
  65+ E11B 00 00                                 DW 0                                       ;46  $3E
  66+ E11D 00 00                                 DW 0                                       ;47  $3F
  67+ E11F
  68+ E11F DD 00        ShipModelSizeTable3:     DW Rock_HermitLen                          ;32  $30
  69+ E121 39 01                                 DW ShuttleType9Len                         ;33  $31
  70+ E123 25 01                                 DW Shuttle_Mk_2Len                         ;34  $32
  71+ E125 AF 00                                 DW SidewinderLen                           ;35  $33
  72+ E127 5B 00                                 DW SplinterLen                             ;36  $34
  73+ E129 65 00                                 DW TestVectorLen                           ;37  $35
  74+ E12B 23 01                                 DW ThargoidLen                             ;38  $36
  75+ E12D AF 00                                 DW ThargonLen                              ;39  $37
  76+ E12F E9 01                                 DW TransportType10Len                      ;40  $38
  77+ E131 E1 00                                 DW ViperLen                                ;41  $39
  78+ E133 B7 00                                 DW WormLen                                 ;42  $3A
  79+ E135 11 01                                 DW RattlerLen                              ;43  $3B
  80+ E137 00 00                                 DW 0                                       ;44  $3C
  81+ E139 00 00                                 DW 0                                       ;45  $3D
  82+ E13B 00 00                                 DW 0                                       ;46  $3E
  83+ E13D 00 00                                 DW 0                                       ;47  $3F
  84+ E13F
  85+ E13F                                      include "Data/ships/Rock_Hermit.asm"
# file opened: ./Data/ships/Rock_Hermit.asm
   1++E13F 07           Rock_Hermit:	        DB $07
   2++E140 00 19                                DW $1900
   3++E142 90 E1                                DW Rock_HermitEdges
   4++E144 54                                   DB Rock_HermitEdgesSize
   5++E145 00 32                                DB $00, $32
   6++E147 09                                   DB Rock_HermitVertSize /6
   7++E148 36                                   DB Rock_HermitVertSize
   8++E149 15                                   DB Rock_HermitEdgesCnt
   9++E14A 00 00                                DB $00, $00
  10++E14C 38                                   DB Rock_HermitNormalsSize
  11++E14D 32 B4 1E                             DB $32, $B4, $1E
  12++E150 E4 E1                                DW Rock_HermitNormals
  13++E152 01 02                                DB $01, $02
  14++E154 5A E1                                DW Rock_HermitVertices
  15++E156 00 00                                DB 0,0                      ; Type and Tactics
  16++E158 01                                   DB ShipCanAnger
  17++E159 30                                   DB $30                      ; chance of ECM module
  18++E15A
  19++E15A
  20++E15A 00 50 00 1F  Rock_HermitVertices:	DB $00, $50, $00, $1F, $FF, $FF
  20++E15E FF FF
  21++E160 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF
  21++E164 FF FF
  22++E166 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  22++E16A FF FF
  23++E16C 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF
  23++E170 FF FF
  24++E172 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC
  24++E176 65 DC
  25++E178 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF
  25++E17C FF FF
  26++E17E 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32
  26++E182 10 32
  27++E184 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF
  27++E188 FF FF
  28++E18A 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA
  28++E18E 98 BA
  29++E190
  30++E190
  31++E190              Rock_HermitVertSize: equ $ - Rock_HermitVertices
  32++E190
  33++E190
  34++E190
  35++E190 1F 72 00 04  Rock_HermitEdges:	DB $1F, $72, $00, $04
  36++E194 1F D6 00 10  	DB $1F, $D6, $00, $10
  37++E198 1F C5 0C 10  	DB $1F, $C5, $0C, $10
  38++E19C 1F B4 08 0C  	DB $1F, $B4, $08, $0C
  39++E1A0 1F A3 04 08  	DB $1F, $A3, $04, $08
  40++E1A4 1F 32 04 18  	DB $1F, $32, $04, $18
  41++E1A8 1F 31 08 18  	DB $1F, $31, $08, $18
  42++E1AC 1F 41 08 14  	DB $1F, $41, $08, $14
  43++E1B0 1F 10 14 18  	DB $1F, $10, $14, $18
  44++E1B4 1F 60 00 14  	DB $1F, $60, $00, $14
  45++E1B8 1F 54 0C 14  	DB $1F, $54, $0C, $14
  46++E1BC 1F 20 00 18  	DB $1F, $20, $00, $18
  47++E1C0 1F 65 10 14  	DB $1F, $65, $10, $14
  48++E1C4 1F A8 04 20  	DB $1F, $A8, $04, $20
  49++E1C8 1F 87 04 1C  	DB $1F, $87, $04, $1C
  50++E1CC 1F D7 00 1C  	DB $1F, $D7, $00, $1C
  51++E1D0 1F DC 10 1C  	DB $1F, $DC, $10, $1C
  52++E1D4 1F C9 0C 1C  	DB $1F, $C9, $0C, $1C
  53++E1D8 1F B9 0C 20  	DB $1F, $B9, $0C, $20
  54++E1DC 1F BA 08 20  	DB $1F, $BA, $08, $20
  55++E1E0 1F 98 1C 20  	DB $1F, $98, $1C, $20
  56++E1E4
  57++E1E4              Rock_HermitEdgesSize: equ $ - Rock_HermitEdges
  58++E1E4
  59++E1E4
  60++E1E4              Rock_HermitEdgesCnt: equ Rock_HermitEdgesSize/4
  61++E1E4
  62++E1E4
  63++E1E4 1F 09 42 51  Rock_HermitNormals:	DB $1F, $09, $42, $51
  64++E1E8 5F 09 42 51  	DB $5F, $09, $42, $51
  65++E1EC 9F 48 40 1F  	DB $9F, $48, $40, $1F
  66++E1F0 DF 40 49 2F  	DB $DF, $40, $49, $2F
  67++E1F4 5F 2D 4F 41  	DB $5F, $2D, $4F, $41
  68++E1F8 1F 87 0F 23  	DB $1F, $87, $0F, $23
  69++E1FC 1F 26 4C 46  	DB $1F, $26, $4C, $46
  70++E200 BF 42 3B 27  	DB $BF, $42, $3B, $27
  71++E204 FF 43 0F 50  	DB $FF, $43, $0F, $50
  72++E208 7F 42 0E 4B  	DB $7F, $42, $0E, $4B
  73++E20C FF 46 50 28  	DB $FF, $46, $50, $28
  74++E210 7F 3A 66 33  	DB $7F, $3A, $66, $33
  75++E214 3F 51 09 43  	DB $3F, $51, $09, $43
  76++E218 3F 2F 5E 3F  	DB $3F, $2F, $5E, $3F
  77++E21C
  78++E21C
  79++E21C              Rock_HermitNormalsSize: equ $ - Rock_HermitNormals
  80++E21C              Rock_HermitLen: equ $ - Rock_Hermit
  81++E21C
# file closed: ./Data/ships/Rock_Hermit.asm
  86+ E21C                                      include "Data/ships/ShuttleType9.asm"
# file opened: ./Data/ships/ShuttleType9.asm
   1++E21C 0F           ShuttleType9:	            DB $0F
   2++E21D C4 09                                    DW $09C4
   3++E21F A9 E2                                    DW ShuttleType9Edges
   4++E221 78                                       DB ShuttleType9EdgesSize
   5++E222 00 26                                    DB $00, $26
   6++E224 13                                       DB ShuttleType9VertSize /6
   7++E225 72                                       DB ShuttleType9VertSize
   8++E226 1E                                       DB ShuttleType9EdgesCnt
   9++E227 00 00                                    DB $00, $00
  10++E229 34                                       DB ShuttleType9NormalsSize
  11++E22A 16 20 08                                 DB $16, $20, $08
  12++E22D 21 E3                                    DW ShuttleType9Normals
  13++E22F 02 00                                    DB $02, $00
  14++E231 37 E2                                    DW ShuttleType9Vertices
  15++E233 00 00        	                        DB 0,0                      ; Type and Tactics
  16++E235 00                                       DB 0
  17++E236 80                                       DB $80                      ; chance of ECM module
  18++E237
  19++E237
  20++E237 00 11 17 5F  ShuttleType9Vertices:	DB $00, $11, $17, $5F, $FF, $FF ; 01
  20++E23B FF FF
  21++E23D 11 00 17 9F                          DB $11, $00, $17, $9F, $FF, $FF ; 02
  21++E241 FF FF
  22++E243 00 12 17 1F                          DB $00, $12, $17, $1F, $FF, $FF ; 03
  22++E247 FF FF
  23++E249 12 00 17 1F                          DB $12, $00, $17, $1F, $FF, $FF ; 04
  23++E24D FF FF
  24++E24F 14 14 1B FF                          DB $14, $14, $1B, $FF, $12, $39 ; 05
  24++E253 12 39
  25++E255 14 14 1B BF                          DB $14, $14, $1B, $BF, $34, $59 ; 06
  25++E259 34 59
  26++E25B 14 14 1B 3F                          DB $14, $14, $1B, $3F, $56, $79 ; 07
  26++E25F 56 79
  27++E261 14 14 1B 7F                          DB $14, $14, $1B, $7F, $17, $89 ; 08
  27++E265 17 89
  28++E267 05 00 1B 30                          DB $05, $00, $1B, $30, $99, $99 ; 09
  28++E26B 99 99
  29++E26D 00 02 1B 70                          DB $00, $02, $1B, $70, $99, $99 ; 10
  29++E271 99 99
  30++E273 05 00 1B A9                          DB $05, $00, $1B, $A9, $99, $99 ; 11
  30++E277 99 99
  31++E279 00 03 1B 29                          DB $00, $03, $1B, $29, $99, $99 ; 12
  31++E27D 99 99
  32++E27F 00 09 23 50                          DB $00, $09, $23, $50, $0A, $BC ; 13
  32++E283 0A BC
  33++E285 03 01 1F 47                          DB $03, $01, $1F, $47, $FF, $02 ; 14
  33++E289 FF 02
  34++E28B 04 0B 19 08                          DB $04, $0B, $19, $08, $01, $F4 ; 15
  34++E28F 01 F4
  35++E291 0B 04 19 08                          DB $0B, $04, $19, $08, $A1, $3F ; 16
  35++E295 A1 3F
  36++E297 03 01 1F C7                          DB $03, $01, $1F, $C7, $6B, $23 ; 17
  36++E29B 6B 23
  37++E29D 03 0B 19 88                          DB $03, $0B, $19, $88, $F8, $C0 ; 18
  37++E2A1 F8 C0
  38++E2A3 0A 04 19 88                          DB $0A, $04, $19, $88, $4F, $18 ; 19
  38++E2A7 4F 18
  39++E2A9
  40++E2A9              ShuttleType9VertSize: equ $ - ShuttleType9Vertices
  41++E2A9
  42++E2A9
  43++E2A9
  44++E2A9 1F 02 00 04  ShuttleType9Edges:	DB $1F, $02, $00, $04
  45++E2AD 1F 4A 04 08  	DB $1F, $4A, $04, $08
  46++E2B1 1F 6B 08 0C  	DB $1F, $6B, $08, $0C
  47++E2B5 1F 8C 00 0C  	DB $1F, $8C, $00, $0C
  48++E2B9 1F 18 00 1C  	DB $1F, $18, $00, $1C
  49++E2BD 18 12 00 10  	DB $18, $12, $00, $10
  50++E2C1 1F 23 04 10  	DB $1F, $23, $04, $10
  51++E2C5 18 34 04 14  	DB $18, $34, $04, $14
  52++E2C9 1F 45 08 14  	DB $1F, $45, $08, $14
  53++E2CD 0C 56 08 18  	DB $0C, $56, $08, $18
  54++E2D1 1F 67 0C 18  	DB $1F, $67, $0C, $18
  55++E2D5 18 78 0C 1C  	DB $18, $78, $0C, $1C
  56++E2D9 1F 39 10 14  	DB $1F, $39, $10, $14
  57++E2DD 1F 59 14 18  	DB $1F, $59, $14, $18
  58++E2E1 1F 79 18 1C  	DB $1F, $79, $18, $1C
  59++E2E5 1F 19 10 1C  	DB $1F, $19, $10, $1C
  60++E2E9 10 0C 00 30  	DB $10, $0C, $00, $30
  61++E2ED 10 0A 04 30  	DB $10, $0A, $04, $30
  62++E2F1 10 AB 08 30  	DB $10, $AB, $08, $30
  63++E2F5 10 BC 0C 30  	DB $10, $BC, $0C, $30
  64++E2F9 10 99 20 24  	DB $10, $99, $20, $24
  65++E2FD 07 99 24 28  	DB $07, $99, $24, $28
  66++E301 09 99 28 2C  	DB $09, $99, $28, $2C
  67++E305 07 99 20 2C  	DB $07, $99, $20, $2C
  68++E309 05 BB 34 38  	DB $05, $BB, $34, $38
  69++E30D 08 BB 38 3C  	DB $08, $BB, $38, $3C
  70++E311 07 BB 34 3C  	DB $07, $BB, $34, $3C
  71++E315 05 AA 40 44  	DB $05, $AA, $40, $44
  72++E319 08 AA 44 48  	DB $08, $AA, $44, $48
  73++E31D 07 AA 40 48  	DB $07, $AA, $40, $48
  74++E321              ShuttleType9EdgesSize: equ $ - ShuttleType9Edges
  75++E321              ShuttleType9EdgesCnt: equ ShuttleType9EdgesSize/4
  76++E321
  77++E321 DF 37 37 28  ShuttleType9Normals:	DB $DF, $37, $37, $28
  78++E325 5F 00 4A 04  	DB $5F, $00, $4A, $04
  79++E329 DF 33 33 17  	DB $DF, $33, $33, $17
  80++E32D 9F 4A 00 04  	DB $9F, $4A, $00, $04
  81++E331 9F 33 33 17  	DB $9F, $33, $33, $17
  82++E335 1F 00 4A 04  	DB $1F, $00, $4A, $04
  83++E339 1F 33 33 17  	DB $1F, $33, $33, $17
  84++E33D 1F 4A 00 04  	DB $1F, $4A, $00, $04
  85++E341 5F 33 33 17  	DB $5F, $33, $33, $17
  86++E345 3F 00 00 6B  	DB $3F, $00, $00, $6B
  87++E349 9F 29 29 5A  	DB $9F, $29, $29, $5A
  88++E34D 1F 29 29 5A  	DB $1F, $29, $29, $5A
  89++E351 5F 37 37 28  	DB $5F, $37, $37, $28
  90++E355
  91++E355
  92++E355              ShuttleType9NormalsSize: equ $ - ShuttleType9Normals
  93++E355              ShuttleType9Len: equ $ - ShuttleType9
  94++E355
# file closed: ./Data/ships/ShuttleType9.asm
  87+ E355                                      include "Data/ships/Shuttle_Mk_2.asm"
# file opened: ./Data/ships/Shuttle_Mk_2.asm
   1++E355 0F           Shuttle_Mk_2:	        DB $0F
   2++E356 C4 09                                DW $09C4
   3++E358 D6 E3                                DW Shuttle_Mk_2Edges
   4++E35A 70                                   DB Shuttle_Mk_2EdgesSize
   5++E35B 00 26                                DB $00, $26
   6++E35D 11                                   DB Shuttle_Mk_2VertSize /6
   7++E35E 66                                   DB Shuttle_Mk_2VertSize
   8++E35F 1C                                   DB Shuttle_Mk_2EdgesCnt
   9++E360 00 00                                DB $00, $00
  10++E362 34                                   DB Shuttle_Mk_2NormalsSize
  11++E363 0A 20 09                             DB $0A, $20, $09
  12++E366 46 E4                                DW Shuttle_Mk_2Normals
  13++E368 02 00                                DB $02, $00
  14++E36A 70 E3                                DW Shuttle_Mk_2Vertices
  15++E36C 00 00                                DB 0,0                      ; Type and Tactics
  16++E36E 00                                   DB 0
  17++E36F 80                                   DB $80                      ; chance of ECM module
  18++E370
  19++E370
  20++E370 00 00 28 1F  Shuttle_Mk_2Vertices:	DB $00, $00, $28, $1F, $23, $01
  20++E374 23 01
  21++E376 00 14 1E 1F  	DB $00, $14, $1E, $1F, $34, $00
  21++E37A 34 00
  22++E37C 14 00 1E 9F  	DB $14, $00, $1E, $9F, $15, $00
  22++E380 15 00
  23++E382 00 14 1E 5F  	DB $00, $14, $1E, $5F, $26, $11
  23++E386 26 11
  24++E388 14 00 1E 1F  	DB $14, $00, $1E, $1F, $37, $22
  24++E38C 37 22
  25++E38E 14 14 14 9F  	DB $14, $14, $14, $9F, $58, $04
  25++E392 58 04
  26++E394 14 14 14 DF  	DB $14, $14, $14, $DF, $69, $15
  26++E398 69 15
  27++E39A 14 14 14 5F  	DB $14, $14, $14, $5F, $7A, $26
  27++E39E 7A 26
  28++E3A0 14 14 14 1F  	DB $14, $14, $14, $1F, $7B, $34
  28++E3A4 7B 34
  29++E3A6 00 14 28 3F  	DB $00, $14, $28, $3F, $BC, $48
  29++E3AA BC 48
  30++E3AC 14 00 28 BF  	DB $14, $00, $28, $BF, $9C, $58
  30++E3B0 9C 58
  31++E3B2 00 14 28 7F  	DB $00, $14, $28, $7F, $AC, $69
  31++E3B6 AC 69
  32++E3B8 14 00 28 3F  	DB $14, $00, $28, $3F, $BC, $7A
  32++E3BC BC 7A
  33++E3BE 04 04 28 AA  	DB $04, $04, $28, $AA, $CC, $CC
  33++E3C2 CC CC
  34++E3C4 04 04 28 EA  	DB $04, $04, $28, $EA, $CC, $CC
  34++E3C8 CC CC
  35++E3CA 04 04 28 6A  	DB $04, $04, $28, $6A, $CC, $CC
  35++E3CE CC CC
  36++E3D0 04 04 28 2A  	DB $04, $04, $28, $2A, $CC, $CC
  36++E3D4 CC CC
  37++E3D6
  38++E3D6              Shuttle_Mk_2VertSize: equ $ - Shuttle_Mk_2Vertices
  39++E3D6
  40++E3D6
  41++E3D6
  42++E3D6 1F 01 00 08  Shuttle_Mk_2Edges:	DB $1F, $01, $00, $08
  43++E3DA 1F 12 00 0C  	DB $1F, $12, $00, $0C
  44++E3DE 1F 23 00 10  	DB $1F, $23, $00, $10
  45++E3E2 1F 30 00 04  	DB $1F, $30, $00, $04
  46++E3E6 1F 04 04 14  	DB $1F, $04, $04, $14
  47++E3EA 1F 05 08 14  	DB $1F, $05, $08, $14
  48++E3EE 1F 15 08 18  	DB $1F, $15, $08, $18
  49++E3F2 1F 16 0C 18  	DB $1F, $16, $0C, $18
  50++E3F6 1F 26 0C 1C  	DB $1F, $26, $0C, $1C
  51++E3FA 1F 27 10 1C  	DB $1F, $27, $10, $1C
  52++E3FE 1F 37 10 20  	DB $1F, $37, $10, $20
  53++E402 1F 34 04 20  	DB $1F, $34, $04, $20
  54++E406 1F 48 14 24  	DB $1F, $48, $14, $24
  55++E40A 1F 58 14 28  	DB $1F, $58, $14, $28
  56++E40E 1F 59 18 28  	DB $1F, $59, $18, $28
  57++E412 1F 69 18 2C  	DB $1F, $69, $18, $2C
  58++E416 1F 6A 1C 2C  	DB $1F, $6A, $1C, $2C
  59++E41A 1F 7A 1C 30  	DB $1F, $7A, $1C, $30
  60++E41E 1F 7B 20 30  	DB $1F, $7B, $20, $30
  61++E422 1F 4B 20 24  	DB $1F, $4B, $20, $24
  62++E426 1F 8C 24 28  	DB $1F, $8C, $24, $28
  63++E42A 1F 9C 28 2C  	DB $1F, $9C, $28, $2C
  64++E42E 1F AC 2C 30  	DB $1F, $AC, $2C, $30
  65++E432 1F BC 30 24  	DB $1F, $BC, $30, $24
  66++E436 0A CC 34 38  	DB $0A, $CC, $34, $38
  67++E43A 0A CC 38 3C  	DB $0A, $CC, $38, $3C
  68++E43E 0A CC 3C 40  	DB $0A, $CC, $3C, $40
  69++E442 0A CC 40 34  	DB $0A, $CC, $40, $34
  70++E446
  71++E446              Shuttle_Mk_2EdgesSize: equ $ - Shuttle_Mk_2Edges
  72++E446
  73++E446
  74++E446              Shuttle_Mk_2EdgesCnt: equ Shuttle_Mk_2EdgesSize/4
  75++E446
  76++E446
  77++E446 9F 27 27 4E  Shuttle_Mk_2Normals:	DB $9F, $27, $27, $4E
  78++E44A DF 27 27 4E  	DB $DF, $27, $27, $4E
  79++E44E 5F 27 27 4E  	DB $5F, $27, $27, $4E
  80++E452 1F 27 27 4E  	DB $1F, $27, $27, $4E
  81++E456 1F 00 60 00  	DB $1F, $00, $60, $00
  82++E45A 9F 60 00 00  	DB $9F, $60, $00, $00
  83++E45E 5F 00 60 00  	DB $5F, $00, $60, $00
  84++E462 1F 60 00 00  	DB $1F, $60, $00, $00
  85++E466 BF 42 42 16  	DB $BF, $42, $42, $16
  86++E46A FF 42 42 16  	DB $FF, $42, $42, $16
  87++E46E 7F 42 42 16  	DB $7F, $42, $42, $16
  88++E472 3F 42 42 16  	DB $3F, $42, $42, $16
  89++E476 3F 00 00 60  	DB $3F, $00, $00, $60
  90++E47A
  91++E47A
  92++E47A              Shuttle_Mk_2NormalsSize: equ $ - Shuttle_Mk_2Normals
  93++E47A              Shuttle_Mk_2Len: equ $ - Shuttle_Mk_2
  94++E47A
# file closed: ./Data/ships/Shuttle_Mk_2.asm
  88+ E47A                                      include "Data/ships/Sidewinder.asm"
# file opened: ./Data/ships/Sidewinder.asm
   1++E47A 00           Sidewinder:	            DB $00
   2++E47B 81 10                                DW $1081
   3++E47D D1 E4                                DW SidewinderEdges
   4++E47F 3C                                   DB SidewinderEdgesSize
   5++E480 00 1E                                DB $00, $1E
   6++E482 0A                                   DB SidewinderVertSize /6
   7++E483 3C                                   DB SidewinderVertSize
   8++E484 0F                                   DB SidewinderEdgesCnt
   9++E485 00 32                                DB $00, $32
  10++E487 1C                                   DB SidewinderNormalsSize
  11++E488 14 46 25                             DB $14, $46, $25
  12++E48B 0D E5                                DW SidewinderNormals
  13++E48D 02 10                                DB $02, $10
  14++E48F 95 E4                                DW SidewinderVertices
  15++E491 00 00                                DB 0,0                      ; Type and Tactics
  16++E493 01                                   DB ShipCanAnger
  17++E494 30                                   DB $30                      ; chance of ECM module
  18++E495
  19++E495 20 00 24 9F  SidewinderVertices:	DB $20, $00, $24, $9F, $10, $54
  19++E499 10 54
  20++E49B 20 00 24 1F  	DB $20, $00, $24, $1F, $20, $65
  20++E49F 20 65
  21++E4A1 40 00 1C 3F  	DB $40, $00, $1C, $3F, $32, $66
  21++E4A5 32 66
  22++E4A7 40 00 1C BF  	DB $40, $00, $1C, $BF, $31, $44
  22++E4AB 31 44
  23++E4AD 00 10 1C 3F  	DB $00, $10, $1C, $3F, $10, $32
  23++E4B1 10 32
  24++E4B3 00 10 1C 7F  	DB $00, $10, $1C, $7F, $43, $65
  24++E4B7 43 65
  25++E4B9 0C 06 1C AF  	DB $0C, $06, $1C, $AF, $33, $33
  25++E4BD 33 33
  26++E4BF 0C 06 1C 2F  	DB $0C, $06, $1C, $2F, $33, $33
  26++E4C3 33 33
  27++E4C5 0C 06 1C 6C  	DB $0C, $06, $1C, $6C, $33, $33
  27++E4C9 33 33
  28++E4CB 0C 06 1C EC  	DB $0C, $06, $1C, $EC, $33, $33
  28++E4CF 33 33
  29++E4D1
  30++E4D1
  31++E4D1              SidewinderVertSize: equ $ - SidewinderVertices
  32++E4D1
  33++E4D1
  34++E4D1
  35++E4D1 1F 50 00 04  SidewinderEdges:	DB $1F, $50, $00, $04
  36++E4D5 1F 62 04 08  	DB $1F, $62, $04, $08
  37++E4D9 1F 20 04 10  	DB $1F, $20, $04, $10
  38++E4DD 1F 10 00 10  	DB $1F, $10, $00, $10
  39++E4E1 1F 41 00 0C  	DB $1F, $41, $00, $0C
  40++E4E5 1F 31 0C 10  	DB $1F, $31, $0C, $10
  41++E4E9 1F 32 08 10  	DB $1F, $32, $08, $10
  42++E4ED 1F 43 0C 14  	DB $1F, $43, $0C, $14
  43++E4F1 1F 63 08 14  	DB $1F, $63, $08, $14
  44++E4F5 1F 65 04 14  	DB $1F, $65, $04, $14
  45++E4F9 1F 54 00 14  	DB $1F, $54, $00, $14
  46++E4FD 0F 33 18 1C  	DB $0F, $33, $18, $1C
  47++E501 0C 33 1C 20  	DB $0C, $33, $1C, $20
  48++E505 0C 33 18 24  	DB $0C, $33, $18, $24
  49++E509 0C 33 20 24  	DB $0C, $33, $20, $24
  50++E50D
  51++E50D              SidewinderEdgesSize: equ $ - SidewinderEdges
  52++E50D
  53++E50D
  54++E50D              SidewinderEdgesCnt: equ SidewinderEdgesSize/4
  55++E50D
  56++E50D
  57++E50D 1F 00 20 08  SidewinderNormals:	DB $1F, $00, $20, $08
  58++E511 9F 0C 2F 06  	DB $9F, $0C, $2F, $06
  59++E515 1F 0C 2F 06  	DB $1F, $0C, $2F, $06
  60++E519 3F 00 00 70  	DB $3F, $00, $00, $70
  61++E51D DF 0C 2F 06  	DB $DF, $0C, $2F, $06
  62++E521 5F 00 20 08  	DB $5F, $00, $20, $08
  63++E525 5F 0C 2F 06  	DB $5F, $0C, $2F, $06
  64++E529
  65++E529
  66++E529              SidewinderNormalsSize: equ $ - SidewinderNormals
  67++E529              SidewinderLen: equ $ - Sidewinder
  68++E529
# file closed: ./Data/ships/Sidewinder.asm
  89+ E529                                      include "Data/ships/Splinter.asm"
# file opened: ./Data/ships/Splinter.asm
   1++E529 B0           Splinter:	            DB $B0
   2++E52A 00 01                                DW $0100
   3++E52C 5C E5                                DW SplinterEdges
   4++E52E 18                                   DB SplinterEdgesSize
   5++E52F 00 16                                DB $00, $16
   6++E531 04                                   DB SplinterVertSize /6
   7++E532 18                                   DB SplinterVertSize
   8++E533 06                                   DB SplinterEdgesCnt
   9++E534 00 00                                DB $00, $00
  10++E536 10                                   DB SplinterNormalsSize
  11++E537 08 14 0A                             DB $08, $14, $0A
  12++E53A 74 E5                                DW SplinterNormals
  13++E53C 05 00                                DB $05, $00
  14++E53E 44 E5                                DW SplinterVertices
  15++E540 00 00                                DB 0,0                      ; Type and Tactics
  16++E542 00                                   DB 0
  17++E543 00                                   DB $00                      ; chance of ECM module
  18++E544
  19++E544 18 19 10 DF  SplinterVertices:	    DB $18, $19, $10, $DF, $12, $33
  19++E548 12 33
  20++E54A 00 0C 0A 3F                          DB $00, $0C, $0A, $3F, $02, $33
  20++E54E 02 33
  21++E550 0B 06 02 5F                          DB $0B, $06, $02, $5F, $01, $33
  21++E554 01 33
  22++E556 0C 2A 07 1F                          DB $0C, $2A, $07, $1F, $01, $22
  22++E55A 01 22
  23++E55C              SplinterVertSize:       equ $ - SplinterVertices
  24++E55C 1F 23 00 04  SplinterEdges:	        DB $1F, $23, $00, $04
  25++E560 1F 03 04 08                          DB $1F, $03, $04, $08
  26++E564 1F 01 08 0C                          DB $1F, $01, $08, $0C
  27++E568 1F 12 0C 00                          DB $1F, $12, $0C, $00
  28++E56C 1F 13 00 08                          DB $1F, $13, $00, $08
  29++E570 1F 02 0C 04                          DB $1F, $02, $0C, $04
  30++E574              SplinterEdgesSize:      equ $ - SplinterEdges
  31++E574              SplinterEdgesCnt:       equ SplinterEdgesSize/4
  32++E574 1F 23 00 04  SplinterNormals:	    DB $1F, $23, $00, $04
  33++E578 1F 03 04 08                          DB $1F, $03, $04, $08
  34++E57C 1F 01 08 0C                          DB $1F, $01, $08, $0C
  35++E580 1F 12 0C 00                          DB $1F, $12, $0C, $00
  36++E584              SplinterNormalsSize:    equ $ - SplinterNormals
  37++E584              SplinterLen:            equ $ - Splinter
  38++E584
# file closed: ./Data/ships/Splinter.asm
  90+ E584                                      include "Data/ships/TestVector.asm"
# file opened: ./Data/ships/TestVector.asm
   1++E584 03           TestVector:             DB $03
   2++E585 23 41                                DW $4123
   3++E587 C9 E5                                DW TestVectorEdges
   4++E589 10                                   DB TestVectorEdgesSize
   5++E58A 54 2A                                DB $54,$2A
   6++E58C 07                                   DB TestVectorVertSize /6
   7++E58D 2A                                   DB TestVectorVertSize
   8++E58E 04                                   DB TestVectorEdgesCnt
   9++E58F 00 00                                DB $00,$00
  10++E591 10                                   DB TestVectorNormalsSize
  11++E592 32 96 1C                             DB $32,$96,$1C
  12++E595 D9 E5                                DW TestVectorNormals
  13++E597 04 01                                DB $04,$01
  14++E599 9F E5                                DW TestVectorVertices
  15++E59B FE 00                                DB ShipTypeDebug,0                      ; Type and Tactics
  16++E59D 00                                   DB 0
  17++E59E 00                                   DB $00                      ; chance of ECM module
  18++E59F
  19++E59F 00 40 00 1F  TestVectorVertices	    DB $00,$40,$00,$1F,$00,$00
  19++E5A3 00 00
  20++E5A5 00 20 00 1F                          DB $00,$20,$00,$1F,$00,$00
  20++E5A9 00 00
  21++E5AB 40 00 00 1F                          DB $40,$00,$00,$1F,$01,$01
  21++E5AF 01 01
  22++E5B1 20 00 00 1F                          DB $20,$00,$00,$1F,$01,$01
  22++E5B5 01 01
  23++E5B7 00 00 40 1F                          DB $00,$00,$40,$1F,$02,$02
  23++E5BB 02 02
  24++E5BD 00 00 20 1F                          DB $00,$00,$20,$1F,$02,$02
  24++E5C1 02 02
  25++E5C3 00 00 00 1F                          DB $00,$00,$00,$1F,$03,$03
  25++E5C7 03 03
  26++E5C9              TestVectorVertSize      equ $  - TestVectorVertices
  27++E5C9 1F 00 00 04  TestVectorEdges		    DB $1F,$00,$00,$04
  28++E5CD 1F 00 08 0C                          DB $1F,$00,$08,$0C
  29++E5D1 1F 00 10 14                          DB $1F,$00,$10,$14
  30++E5D5 1F 00 18 18                          DB $1F,$00,$18,$18
  31++E5D9              TestVectorEdgesSize     equ $  - TestVectorEdges
  32++E5D9              TestVectorEdgesCnt      equ TestVectorEdgesSize/4
  33++E5D9              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  34++E5D9 1F 00 10 00  TestVectorNormals	    DB $1F,$00,$10,$00
  35++E5DD 1F 10 00 00                          DB $1F,$10,$00,$00
  36++E5E1 1F 00 00 10                          DB $1F,$00,$00,$10
  37++E5E5 1F 00 00 10                          DB $1F,$00,$00,$10
  38++E5E9              TestVectorNormalsSize   equ $  - TestVectorNormals
  39++E5E9              TestVectorLen           equ $  - TestVector
  40++E5E9
# file closed: ./Data/ships/TestVector.asm
  91+ E5E9                                      include "Data/ships/Thargoid.asm"
# file opened: ./Data/ships/Thargoid.asm
   1++E5E9 00           Thargoid:	            DB $00
   2++E5EA 49 26                                DW $2649
   3++E5EC 7C E6                                DW ThargoidEdges
   4++E5EE 68                                   DB ThargoidEdgesSize
   5++E5EF 3C 26                                DB $3C, $26
   6++E5F1 14                                   DB ThargoidVertSize /6
   7++E5F2 78                                   DB ThargoidVertSize
   8++E5F3 1A                                   DB ThargoidEdgesCnt
   9++E5F4 01 F4                                DB $01, $F4
  10++E5F6 28                                   DB ThargoidNormalsSize
  11++E5F7 37 F0 27                             DB $37, $F0, $27
  12++E5FA E4 E6                                DW ThargoidNormals
  13++E5FC 02 16                                DB $02, $16
  14++E5FE 04 E6                                DW ThargoidVertices
  15++E600 00 00                                DB 0,0                      ; Type and Tactics
  16++E602 01                                   DB ShipCanAnger
  17++E603 FF                                   DB $FF                      ; chance of ECM module
  18++E604
  19++E604 20 30 30 5F  ThargoidVertices:	    DB $20, $30, $30, $5F, $40, $88 ; 01
  19++E608 40 88
  20++E60A 20 44 00 5F                          DB $20, $44, $00, $5F, $10, $44 ; 02
  20++E60E 10 44
  21++E610 20 30 30 7F                          DB $20, $30, $30, $7F, $21, $44 ; 03
  21++E614 21 44
  22++E616 20 00 44 3F                          DB $20, $00, $44, $3F, $32, $44 ; 04
  22++E61A 32 44
  23++E61C 20 30 30 3F                          DB $20, $30, $30, $3F, $43, $55 ; 05
  23++E620 43 55
  24++E622 20 44 00 1F                          DB $20, $44, $00, $1F, $54, $66 ; 06
  24++E626 54 66
  25++E628 20 30 30 1F                          DB $20, $30, $30, $1F, $64, $77 ; 07
  25++E62C 64 77
  26++E62E 20 00 44 1F                          DB $20, $00, $44, $1F, $74, $88 ; 08
  26++E632 74 88
  27++E634 18 74 74 DF                          DB $18, $74, $74, $DF, $80, $99 ; 09
  27++E638 80 99
  28++E63A 18 A4 00 DF                          DB $18, $A4, $00, $DF, $10, $99 ; 10
  28++E63E 10 99
  29++E640 18 74 74 FF                          DB $18, $74, $74, $FF, $21, $99 ; 11
  29++E644 21 99
  30++E646 18 00 A4 BF                          DB $18, $00, $A4, $BF, $32, $99 ; 12
  30++E64A 32 99
  31++E64C 18 74 74 BF                          DB $18, $74, $74, $BF, $53, $99 ; 13
  31++E650 53 99
  32++E652 18 A4 00 9F                          DB $18, $A4, $00, $9F, $65, $99 ; 14
  32++E656 65 99
  33++E658 18 74 74 9F                          DB $18, $74, $74, $9F, $76, $99 ; 15
  33++E65C 76 99
  34++E65E 18 00 A4 9F                          DB $18, $00, $A4, $9F, $87, $99 ; 16
  34++E662 87 99
  35++E664 18 40 50 9E                          DB $18, $40, $50, $9E, $99, $99 ; 17
  35++E668 99 99
  36++E66A 18 40 50 BE                          DB $18, $40, $50, $BE, $99, $99 ; 18
  36++E66E 99 99
  37++E670 18 40 50 FE                          DB $18, $40, $50, $FE, $99, $99 ; 19
  37++E674 99 99
  38++E676 18 40 50 DE                          DB $18, $40, $50, $DE, $99, $99 ; 20
  38++E67A 99 99
  39++E67C
  40++E67C              ThargoidVertSize: equ $ - ThargoidVertices
  41++E67C
  42++E67C
  43++E67C
  44++E67C 1F 84 00 1C  ThargoidEdges:	DB $1F, $84, $00, $1C           ;01
  45++E680 1F 40 00 04                  DB $1F, $40, $00, $04           ;02
  46++E684 1F 41 04 08                  DB $1F, $41, $04, $08           ;03
  47++E688 1F 42 08 0C                  DB $1F, $42, $08, $0C           ;04
  48++E68C 1F 43 0C 10                  DB $1F, $43, $0C, $10           ;05
  49++E690 1F 54 10 14                  DB $1F, $54, $10, $14           ;06
  50++E694 1F 64 14 18                  DB $1F, $64, $14, $18           ;07
  51++E698 1F 74 18 1C                  DB $1F, $74, $18, $1C           ;08
  52++E69C 1F 80 00 20                  DB $1F, $80, $00, $20           ;09
  53++E6A0 1F 10 04 24                  DB $1F, $10, $04, $24           ;10
  54++E6A4 1F 21 08 28                  DB $1F, $21, $08, $28           ;11
  55++E6A8 1F 32 0C 2C                  DB $1F, $32, $0C, $2C           ;12
  56++E6AC 1F 53 10 30                  DB $1F, $53, $10, $30           ;13
  57++E6B0 1F 65 14 34                  DB $1F, $65, $14, $34           ;14
  58++E6B4 1F 76 18 38                  DB $1F, $76, $18, $38           ;15
  59++E6B8 1F 87 1C 3C                  DB $1F, $87, $1C, $3C           ;16
  60++E6BC 1F 98 20 3C                  DB $1F, $98, $20, $3C           ;17
  61++E6C0 1F 90 20 24                  DB $1F, $90, $20, $24           ;18
  62++E6C4 1F 91 24 28                  DB $1F, $91, $24, $28
  63++E6C8 1F 92 28 2C                  DB $1F, $92, $28, $2C
  64++E6CC 1F 93 2C 30                  DB $1F, $93, $2C, $30
  65++E6D0 1F 95 30 34                  DB $1F, $95, $30, $34
  66++E6D4 1F 96 34 38                  DB $1F, $96, $34, $38
  67++E6D8 1F 97 38 3C                  DB $1F, $97, $38, $3C
  68++E6DC 1E 99 40 44                  DB $1E, $99, $40, $44
  69++E6E0 1E 99 48 4C                  DB $1E, $99, $48, $4C
  70++E6E4
  71++E6E4              ThargoidEdgesSize: equ $ - ThargoidEdges
  72++E6E4
  73++E6E4              ThargoidEdgesCnt: equ ThargoidEdgesSize/4
  74++E6E4
  75++E6E4 5F 67 3C 19  ThargoidNormals:	DB $5F, $67, $3C, $19
  76++E6E8 7F 67 3C 19  	DB $7F, $67, $3C, $19
  77++E6EC 7F 67 19 3C  	DB $7F, $67, $19, $3C
  78++E6F0 3F 67 19 3C  	DB $3F, $67, $19, $3C
  79++E6F4 1F 40 00 00  	DB $1F, $40, $00, $00
  80++E6F8 3F 67 3C 19  	DB $3F, $67, $3C, $19
  81++E6FC 1F 67 3C 19  	DB $1F, $67, $3C, $19
  82++E700 1F 67 19 3C  	DB $1F, $67, $19, $3C
  83++E704 5F 67 19 3C  	DB $5F, $67, $19, $3C
  84++E708 9F 30 00 00  	DB $9F, $30, $00, $00
  85++E70C
  86++E70C
  87++E70C              ThargoidNormalsSize: equ $ - ThargoidNormals
  88++E70C              ThargoidLen: equ $ - Thargoid
  89++E70C
# file closed: ./Data/ships/Thargoid.asm
  92+ E70C                                      include "Data/ships/Thargon.asm"
# file opened: ./Data/ships/Thargon.asm
   1++E70C F0           Thargon:	            DB $F0
   2++E70D 40 06                                DW $0640
   3++E70F 63 E7                                DW ThargonEdges
   4++E711 3C                                   DB ThargonEdgesSize
   5++E712 00 12                                DB $00, $12
   6++E714 0A                                   DB ThargonVertSize /6
   7++E715 3C                                   DB ThargonVertSize
   8++E716 0F                                   DB ThargonEdgesCnt
   9++E717 00 32                                DB $00, $32
  10++E719 1C                                   DB ThargonNormalsSize
  11++E71A 14 14 1E                             DB $14, $14, $1E
  12++E71D 9F E7                                DW ThargonNormals
  13++E71F 02 10                                DB $02, $10
  14++E721 27 E7                                DW ThargonVertices
  15++E723 00 00                                DB 0,0                      ; Type and Tactics
  16++E725 01                                   DB ShipCanAnger
  17++E726 00                                   DB $00                      ; chance of ECM module
  18++E727
  19++E727
  20++E727 09 00 28 9F  ThargonVertices:	    DB $09, $00, $28, $9F, $01, $55
  20++E72B 01 55
  21++E72D 09 26 0C DF                          DB $09, $26, $0C, $DF, $01, $22
  21++E731 01 22
  22++E733 09 18 20 FF                          DB $09, $18, $20, $FF, $02, $33
  22++E737 02 33
  23++E739 09 18 20 BF                          DB $09, $18, $20, $BF, $03, $44
  23++E73D 03 44
  24++E73F 09 26 0C 9F                          DB $09, $26, $0C, $9F, $04, $55
  24++E743 04 55
  25++E745 09 00 08 3F                          DB $09, $00, $08, $3F, $15, $66
  25++E749 15 66
  26++E74B 09 0A 0F 7F                          DB $09, $0A, $0F, $7F, $12, $66
  26++E74F 12 66
  27++E751 09 06 1A 7F                          DB $09, $06, $1A, $7F, $23, $66
  27++E755 23 66
  28++E757 09 06 1A 3F                          DB $09, $06, $1A, $3F, $34, $66
  28++E75B 34 66
  29++E75D 09 0A 0F 3F                          DB $09, $0A, $0F, $3F, $45, $66
  29++E761 45 66
  30++E763
  31++E763              ThargonVertSize:        equ $ - ThargonVertices
  32++E763
  33++E763
  34++E763 1F 10 00 04  ThargonEdges:	        DB $1F, $10, $00, $04
  35++E767 1F 20 04 08                          DB $1F, $20, $04, $08
  36++E76B 1F 30 08 0C                          DB $1F, $30, $08, $0C
  37++E76F 1F 40 0C 10                          DB $1F, $40, $0C, $10
  38++E773 1F 50 00 10                          DB $1F, $50, $00, $10
  39++E777 1F 51 00 14                          DB $1F, $51, $00, $14
  40++E77B 1F 21 04 18                          DB $1F, $21, $04, $18
  41++E77F 1F 32 08 1C                          DB $1F, $32, $08, $1C
  42++E783 1F 43 0C 20                          DB $1F, $43, $0C, $20
  43++E787 1F 54 10 24                          DB $1F, $54, $10, $24
  44++E78B 1F 61 14 18                          DB $1F, $61, $14, $18
  45++E78F 1F 62 18 1C                          DB $1F, $62, $18, $1C
  46++E793 1F 63 1C 20                          DB $1F, $63, $1C, $20
  47++E797 1F 64 20 24                          DB $1F, $64, $20, $24
  48++E79B 1F 65 24 14                          DB $1F, $65, $24, $14
  49++E79F
  50++E79F              ThargonEdgesSize:       equ $ - ThargonEdges
  51++E79F
  52++E79F
  53++E79F              ThargonEdgesCnt:        equ ThargonEdgesSize/4
  54++E79F
  55++E79F
  56++E79F 9F 24 00 00  ThargonNormals:	        DB $9F, $24, $00, $00
  57++E7A3 5F 14 05 07                          DB $5F, $14, $05, $07
  58++E7A7 7F 2E 2A 0E                          DB $7F, $2E, $2A, $0E
  59++E7AB 3F 24 00 68                          DB $3F, $24, $00, $68
  60++E7AF 3F 2E 2A 0E                          DB $3F, $2E, $2A, $0E
  61++E7B3 1F 14 05 07                          DB $1F, $14, $05, $07
  62++E7B7 1F 24 00 00                          DB $1F, $24, $00, $00
  63++E7BB
  64++E7BB
  65++E7BB              ThargonNormalsSize:     equ $ - ThargonNormals
  66++E7BB              ThargonLen:             equ $ - Thargon
  67++E7BB
# file closed: ./Data/ships/Thargon.asm
  93+ E7BB                                      include "Data/ships/TransportType10.asm"
# file opened: ./Data/ships/TransportType10.asm
   1++E7BB 00           TransportType10:	    DB $00
   2++E7BC C4 09                                DW $09C4
   3++E7BE B4 E8                                DW TransportType10Edges
   4++E7C0 B8                                   DB TransportType10EdgesSize
   5++E7C1 30 1A                                DB $30, $1A
   6++E7C3 25                                   DB TransportType10VertSize /6
   7++E7C4 DE                                   DB TransportType10VertSize
   8++E7C5 2E                                   DB TransportType10EdgesCnt
   9++E7C6 00 00                                DB $00, $00
  10++E7C8 38                                   DB TransportType10NormalsSize
  11++E7C9 10 20 0A                             DB $10, $20, $0A
  12++E7CC 6C E9                                DW TransportType10Normals
  13++E7CE 02 00                                DB $02, $00
  14++E7D0 D6 E7                                DW TransportType10Vertices
  15++E7D2 00 00                                DB 0,0                      ; Type and Tactics
  16++E7D4 00                                   DB 0
  17++E7D5 FF                                   DB $FF                      ; chance of ECM module
  18++E7D6
  19++E7D6 00 0A 1A 3F  TransportType10Vertices:DB $00, $0A, $1A, $3F, $06, $77     ;01
  19++E7DA 06 77
  20++E7DC 19 04 1A BF                          DB $19, $04, $1A, $BF, $01, $77     ;02
  20++E7E0 01 77
  21++E7E2 1C 03 1A FF                          DB $1C, $03, $1A, $FF, $01, $22     ;03
  21++E7E6 01 22
  22++E7E8 19 08 1A FF                          DB $19, $08, $1A, $FF, $02, $33     ;04
  22++E7EC 02 33
  23++E7EE 1A 08 1A 7F                          DB $1A, $08, $1A, $7F, $03, $44     ;05
  23++E7F2 03 44
  24++E7F4 1D 03 1A 7F                          DB $1D, $03, $1A, $7F, $04, $55     ;06
  24++E7F8 04 55
  25++E7FA 1A 04 1A 3F                          DB $1A, $04, $1A, $3F, $05, $66     ;07
  25++E7FE 05 66
  26++E800 00 06 0C 13                          DB $00, $06, $0C, $13, $FF, $FF     ;08
  26++E804 FF FF
  27++E806 1E 01 0C DF                          DB $1E, $01, $0C, $DF, $17, $89     ;09
  27++E80A 17 89
  28++E80C 21 08 0C DF                          DB $21, $08, $0C, $DF, $12, $39     ;10
  28++E810 12 39
  29++E812 21 08 0C 5F                          DB $21, $08, $0C, $5F, $34, $5A     ;11
  29++E816 34 5A
  30++E818 1E 01 0C 5F                          DB $1E, $01, $0C, $5F, $56, $AB     ;12
  30++E81C 56 AB
  31++E81E 0B 02 1E DF                          DB $0B, $02, $1E, $DF, $89, $CD     ;13
  31++E822 89 CD
  32++E824 0D 08 1E DF                          DB $0D, $08, $1E, $DF, $39, $DD     ;14
  32++E828 39 DD
  33++E82A 0E 08 1E 5F                          DB $0E, $08, $1E, $5F, $3A, $DD     ;15
  33++E82E 3A DD
  34++E830 0B 02 1E 5F                          DB $0B, $02, $1E, $5F, $AB, $CD     ;16
  34++E834 AB CD
  35++E836 05 06 02 87                          DB $05, $06, $02, $87, $77, $77     ;17
  35++E83A 77 77
  36++E83C 12 03 02 87                          DB $12, $03, $02, $87, $77, $77     ;18
  36++E840 77 77
  37++E842 05 07 07 A7                          DB $05, $07, $07, $A7, $77, $77     ;19
  37++E846 77 77
  38++E848 12 04 07 A7                          DB $12, $04, $07, $A7, $77, $77     ;20
  38++E84C 77 77
  39++E84E 0B 06 0E A7                          DB $0B, $06, $0E, $A7, $77, $77     ;21
  39++E852 77 77
  40++E854 0B 05 07 A7                          DB $0B, $05, $07, $A7, $77, $77     ;22
  40++E858 77 77
  41++E85A 05 07 0E 27                          DB $05, $07, $0E, $27, $66, $66     ;23
  41++E85E 66 66
  42++E860 12 04 0E 27                          DB $12, $04, $0E, $27, $66, $66     ;24
  42++E864 66 66
  43++E866 0B 05 07 27                          DB $0B, $05, $07, $27, $66, $66     ;25
  43++E86A 66 66
  44++E86C 05 06 03 27                          DB $05, $06, $03, $27, $66, $66     ;26
  44++E870 66 66
  45++E872 12 03 03 27                          DB $12, $03, $03, $27, $66, $66     ;27
  45++E876 66 66
  46++E878 0B 04 08 07                          DB $0B, $04, $08, $07, $66, $66     ;28
  46++E87C 66 66
  47++E87E 0B 05 03 27                          DB $0B, $05, $03, $27, $66, $66     ;29
  47++E882 66 66
  48++E884 10 08 0D E6                          DB $10, $08, $0D, $E6, $33, $33     ;30
  48++E888 33 33
  49++E88A 10 08 10 C6                          DB $10, $08, $10, $C6, $33, $33     ;31
  49++E88E 33 33
  50++E890 11 08 0D 66                          DB $11, $08, $0D, $66, $33, $33     ;32
  50++E894 33 33
  51++E896 11 08 10 46                          DB $11, $08, $10, $46, $33, $33     ;33
  51++E89A 33 33
  52++E89C 0D 03 1A E8                          DB $0D, $03, $1A, $E8, $00, $00     ;34
  52++E8A0 00 00
  53++E8A2 0D 03 1A 68                          DB $0D, $03, $1A, $68, $00, $00     ;35
  53++E8A6 00 00
  54++E8A8 09 03 1A 25                          DB $09, $03, $1A, $25, $00, $00     ;36
  54++E8AC 00 00
  55++E8AE 08 03 1A A5                          DB $08, $03, $1A, $A5, $00, $00     ;37
  55++E8B2 00 00
  56++E8B4
  57++E8B4              TransportType10VertSize: equ $ - TransportType10Vertices
  58++E8B4
  59++E8B4
  60++E8B4
  61++E8B4 1F 07 00 04  TransportType10Edges:	DB $1F, $07, $00, $04               ;01
  62++E8B8 1F 01 04 08                          DB $1F, $01, $04, $08               ;02
  63++E8BC 1F 02 08 0C                          DB $1F, $02, $08, $0C               ;03
  64++E8C0 1F 03 0C 10                          DB $1F, $03, $0C, $10               ;04
  65++E8C4 1F 04 10 14                          DB $1F, $04, $10, $14               ;05
  66++E8C8 1F 05 14 18                          DB $1F, $05, $14, $18               ;06
  67++E8CC 1F 06 00 18                          DB $1F, $06, $00, $18               ;07
  68++E8D0 10 67 00 1C                          DB $10, $67, $00, $1C               ;08
  69++E8D4 1F 17 04 20                          DB $1F, $17, $04, $20               ;09
  70++E8D8 0B 12 08 24                          DB $0B, $12, $08, $24               ;10
  71++E8DC 1F 23 0C 24                          DB $1F, $23, $0C, $24               ;11
  72++E8E0 1F 34 10 28                          DB $1F, $34, $10, $28               ;12
  73++E8E4 0B 45 14 28                          DB $0B, $45, $14, $28               ;13
  74++E8E8 1F 56 18 2C                          DB $1F, $56, $18, $2C               ;14
  75++E8EC 11 78 1C 20                          DB $11, $78, $1C, $20               ;15
  76++E8F0 11 19 20 24                          DB $11, $19, $20, $24               ;16
  77++E8F4 11 5A 28 2C                          DB $11, $5A, $28, $2C               ;17
  78++E8F8 11 6B 1C 2C                          DB $11, $6B, $1C, $2C               ;18
  79++E8FC 13 BC 1C 3C                          DB $13, $BC, $1C, $3C               ;19
  80++E900 13 8C 1C 30                          DB $13, $8C, $1C, $30               ;20
  81++E904 10 89 20 30                          DB $10, $89, $20, $30               ;21
  82++E908 1F 39 24 34                          DB $1F, $39, $24, $34               ;22
  83++E90C 1F 3A 28 38                          DB $1F, $3A, $28, $38               ;23
  84++E910 10 AB 2C 3C                          DB $10, $AB, $2C, $3C               ;24
  85++E914 1F 9D 30 34                          DB $1F, $9D, $30, $34               ;25
  86++E918 1F 3D 34 38                          DB $1F, $3D, $34, $38               ;26
  87++E91C 1F AD 38 3C                          DB $1F, $AD, $38, $3C               ;27
  88++E920 1F CD 30 3C                          DB $1F, $CD, $30, $3C               ;28
  89++E924 07 77 40 44                          DB $07, $77, $40, $44               ;29
  90++E928 07 77 48 4C                          DB $07, $77, $48, $4C               ;30
  91++E92C 07 77 4C 50                          DB $07, $77, $4C, $50               ;31
  92++E930 07 77 48 50                          DB $07, $77, $48, $50               ;32
  93++E934 07 77 50 54                          DB $07, $77, $50, $54               ;33
  94++E938 07 66 58 5C                          DB $07, $66, $58, $5C               ;34
  95++E93C 07 66 5C 60                          DB $07, $66, $5C, $60               ;35
  96++E940 07 66 60 58                          DB $07, $66, $60, $58               ;36
  97++E944 07 66 64 68                          DB $07, $66, $64, $68               ;37
  98++E948 07 66 68 6C                          DB $07, $66, $68, $6C               ;38
  99++E94C 07 66 64 6C                          DB $07, $66, $64, $6C               ;39
 100++E950 07 66 6C 70                          DB $07, $66, $6C, $70               ;40
 101++E954 06 33 74 78                          DB $06, $33, $74, $78               ;41
 102++E958 06 33 7C 80                          DB $06, $33, $7C, $80               ;42
 103++E95C 08 00 84 88                          DB $08, $00, $84, $88               ;43
 104++E960 05 00 88 8C                          DB $05, $00, $88, $8C               ;44
 105++E964 05 00 8C 90                          DB $05, $00, $8C, $90               ;45
 106++E968 05 00 90 84                          DB $05, $00, $90, $84               ;46
 107++E96C
 108++E96C              TransportType10EdgesSize: equ $ - TransportType10Edges
 109++E96C
 110++E96C
 111++E96C              TransportType10EdgesCnt: equ TransportType10EdgesSize/4
 112++E96C
 113++E96C
 114++E96C 3F 00 00 67  TransportType10Normals:	DB $3F, $00, $00, $67               ;01
 115++E970 BF 6F 30 07                          DB $BF, $6F, $30, $07               ;02
 116++E974 FF 69 3F 15                          DB $FF, $69, $3F, $15               ;03
 117++E978 5F 00 22 00                          DB $5F, $00, $22, $00               ;04
 118++E97C 7F 69 3F 15                          DB $7F, $69, $3F, $15               ;05
 119++E980 3F 6F 30 07                          DB $3F, $6F, $30, $07               ;06
 120++E984 1F 08 20 03                          DB $1F, $08, $20, $03               ;07
 121++E988 9F 08 20 03                          DB $9F, $08, $20, $03               ;08
 122++E98C 93 08 22 0B                          DB $93, $08, $22, $0B               ;09
 123++E990 9F 4B 20 4F                          DB $9F, $4B, $20, $4F               ;10
 124++E994 1F 4B 20 4F                          DB $1F, $4B, $20, $4F               ;11
 125++E998 13 08 22 0B                          DB $13, $08, $22, $0B               ;12
 126++E99C 1F 00 26 11                          DB $1F, $00, $26, $11               ;13
 127++E9A0 1F 00 00 79                          DB $1F, $00, $00, $79               ;14
 128++E9A4
 129++E9A4
 130++E9A4              TransportType10NormalsSize: equ $ - TransportType10Normals
 131++E9A4              TransportType10Len: equ $ - TransportType10
 132++E9A4
# file closed: ./Data/ships/TransportType10.asm
  94+ E9A4                                      include "Data/ships/Viper.asm"
# file opened: ./Data/ships/Viper.asm
   1++E9A4              ; Mapping Orginal to new
   2++E9A4              ; 0    => 0
   3++E9A4              ; 1-2  => 1-2
   4++E9A4              ; 3    => EQU Edges
   5++E9A4              ; 4    => EQU Normals
   6++E9A4              ; 5    => EQU EdgesCnt
   7++E9A4              ; 6    => 6
   8++E9A4              ; 7    => 7
   9++E9A4              ; 8    => EQU VertSize
  10++E9A4              ; 9    => EQU EdgesCnt
  11++E9A4              ; 10-11=> 10-11
  12++E9A4              ; 12   => EQU  NormalsSize
  13++E9A4              ; 13   => 13
  14++E9A4              ; 14   => 14
  15++E9A4              ; 15   => 15
  16++E9A4              ; 16   => EQU Edges
  17++E9A4              ; 17   => EQU Normals
  18++E9A4              ; 18   => 18
  19++E9A4              ; 19   => 19
  20++E9A4              ;\ -> &5C93  \ Viper = Type 16
  21++E9A4 00           Viper:                  DB $00
  22++E9A5 F9 15                                DW $15F9
  23++E9A7 19 EA                                DW ViperEdges
  24++E9A9 50                                   DB ViperEdgesSize
  25++E9AA 00 2A                                DB $00,$2A
  26++E9AC 0F                                   DB ViperVertSize /6
  27++E9AD 5A                                   DB ViperVertSize
  28++E9AE 14                                   DB ViperEdgesCnt
  29++E9AF 00 00                                DB $00,$00
  30++E9B1 1C                                   DB ViperNormalsSize
  31++E9B2 17 64 20                             DB $17, $64, $20
  32++E9B5 69 EA                                DW ViperNormals
  33++E9B7 01 11                                DB $01, $11
  34++E9B9 BF E9                                DW ViperVertices
  35++E9BB 00 00                                DB 0,0                      ; Type and Tactics
  36++E9BD 01                                   DB ShipCanAnger
  37++E9BE FF                                   DB $FF                      ; chance of ECM module
  38++E9BF
  39++E9BF 00 00 48 1F  ViperVertices:          DB $00, $00, $48, $1F, $21, $43
  39++E9C3 21 43
  40++E9C5 00 10 18 1E                          DB $00, $10, $18, $1E, $10, $22
  40++E9C9 10 22
  41++E9CB 00 10 18 5E                          DB $00, $10, $18, $5E, $43, $55
  41++E9CF 43 55
  42++E9D1 30 00 18 3F                          DB $30, $00, $18, $3F, $42, $66
  42++E9D5 42 66
  43++E9D7 30 00 18 BF                          DB $30, $00, $18, $BF, $31, $66
  43++E9DB 31 66
  44++E9DD 18 10 18 7E                          DB $18, $10, $18, $7E, $54, $66
  44++E9E1 54 66
  45++E9E3 18 10 18 FE                          DB $18, $10, $18, $FE, $35, $66
  45++E9E7 35 66
  46++E9E9 18 10 18 3F                          DB $18, $10, $18, $3F, $20, $66
  46++E9ED 20 66
  47++E9EF 18 10 18 BF                          DB $18, $10, $18, $BF, $10, $66
  47++E9F3 10 66
  48++E9F5 20 00 18 B3                          DB $20, $00, $18, $B3, $66, $66
  48++E9F9 66 66
  49++E9FB 20 00 18 33                          DB $20, $00, $18, $33, $66, $66
  49++E9FF 66 66
  50++EA01 08 08 18 33                          DB $08, $08, $18, $33, $66, $66
  50++EA05 66 66
  51++EA07 08 08 18 B3                          DB $08, $08, $18, $B3, $66, $66
  51++EA0B 66 66
  52++EA0D 08 08 18 F2                          DB $08, $08, $18, $F2, $66, $66
  52++EA11 66 66
  53++EA13 08 08 18 72                          DB $08, $08, $18, $72, $66, $66
  53++EA17 66 66
  54++EA19              ViperVertSize           equ $  - ViperVertices
  55++EA19 1F 42 00 0C  ViperEdges:             DB $1F, $42, $00, $0C, $1E, $21, $00, $04
  55++EA1D 1E 21 00 04
  56++EA21 1E 43 00 08                          DB $1E, $43, $00, $08, $1F, $31, $00, $10
  56++EA25 1F 31 00 10
  57++EA29 1E 20 04 1C                          DB $1E, $20, $04, $1C, $1E, $10, $04, $20
  57++EA2D 1E 10 04 20
  58++EA31 1E 54 08 14                          DB $1E, $54, $08, $14, $1E, $53, $08, $18
  58++EA35 1E 53 08 18
  59++EA39 1F 60 1C 20                          DB $1F, $60, $1C, $20, $1E, $65, $14, $18
  59++EA3D 1E 65 14 18
  60++EA41 1F 61 10 20                          DB $1F, $61, $10, $20, $1E, $63, $10, $18
  60++EA45 1E 63 10 18
  61++EA49 1F 62 0C 1C                          DB $1F, $62, $0C, $1C, $1E, $46, $0C, $14
  61++EA4D 1E 46 0C 14
  62++EA51 13 66 24 30                          DB $13, $66, $24, $30, $12, $66, $24, $34
  62++EA55 12 66 24 34
  63++EA59 13 66 28 2C                          DB $13, $66, $28, $2C, $12, $66, $28, $38
  63++EA5D 12 66 28 38
  64++EA61 10 66 2C 38                          DB $10, $66, $2C, $38, $10, $66, $30, $34
  64++EA65 10 66 30 34
  65++EA69              ViperEdgesSize          equ $  - ViperEdges
  66++EA69              ViperEdgesCnt           equ ViperEdgesSize/4
  67++EA69 1F 00 20 00  ViperNormals            DB $1F, $00, $20, $00, $9F, $16, $21, $0B
  67++EA6D 9F 16 21 0B
  68++EA71 1F 16 21 0B                          DB $1F, $16, $21, $0B, $DF, $16, $21, $0B
  68++EA75 DF 16 21 0B
  69++EA79 5F 16 21 0B                          DB $5F, $16, $21, $0B, $5F, $00, $20, $00
  69++EA7D 5F 00 20 00
  70++EA81 3F 00 00 30                          DB $3F, $00, $00, $30
  71++EA85              ViperNormalsSize        equ $  - ViperNormals
  72++EA85              ViperLen                equ $  - Viper
  73++EA85
# file closed: ./Data/ships/Viper.asm
  95+ EA85                                      include "Data/ships/Worm.asm"
# file opened: ./Data/ships/Worm.asm
   1++EA85 00           Worm:	                DB $00
   2++EA86 49 26                                DW $2649
   3++EA88 DC EA                                DW WormEdges
   4++EA8A 40                                   DB WormEdgesSize
   5++EA8B 00 12                                DB $00, $12
   6++EA8D 0A                                   DB WormVertSize /6
   7++EA8E 3C                                   DB WormVertSize
   8++EA8F 10                                   DB WormEdgesCnt
   9++EA90 00 00                                DB $00, $00
  10++EA92 20                                   DB WormNormalsSize
  11++EA93 13 1E 17                             DB $13, $1E, $17
  12++EA96 1C EB                                DW WormNormals
  13++EA98 03 08                                DB $03, $08
  14++EA9A A0 EA                                DW WormVertices
  15++EA9C 00 00                                DB 0,0                      ; Type and Tactics
  16++EA9E 01                                   DB ShipCanAnger
  17++EA9F B0                                   DB $B0                      ; chance of ECM module
  18++EAA0 0A 0A 23 5F  WormVertices:	        DB $0A, $0A, $23, $5F, $02, $77
  18++EAA4 02 77
  19++EAA6 0A 0A 23 DF                          DB $0A, $0A, $23, $DF, $03, $77
  19++EAAA 03 77
  20++EAAC 05 06 0F 1F                          DB $05, $06, $0F, $1F, $01, $24
  20++EAB0 01 24
  21++EAB2 05 06 0F 9F                          DB $05, $06, $0F, $9F, $01, $35
  21++EAB6 01 35
  22++EAB8 0F 0A 19 5F                          DB $0F, $0A, $19, $5F, $24, $77
  22++EABC 24 77
  23++EABE 0F 0A 19 DF                          DB $0F, $0A, $19, $DF, $35, $77
  23++EAC2 35 77
  24++EAC4 1A 0A 19 7F                          DB $1A, $0A, $19, $7F, $46, $77
  24++EAC8 46 77
  25++EACA 1A 0A 19 FF                          DB $1A, $0A, $19, $FF, $56, $77
  25++EACE 56 77
  26++EAD0 08 0E 19 3F                          DB $08, $0E, $19, $3F, $14, $66
  26++EAD4 14 66
  27++EAD6 08 0E 19 BF                          DB $08, $0E, $19, $BF, $15, $66
  27++EADA 15 66
  28++EADC
  29++EADC              WormVertSize: equ $ - WormVertices
  30++EADC
  31++EADC
  32++EADC 1F 07 00 04  WormEdges:	            DB $1F, $07, $00, $04
  33++EAE0 1F 37 04 14                          DB $1F, $37, $04, $14
  34++EAE4 1F 57 14 1C                          DB $1F, $57, $14, $1C
  35++EAE8 1F 67 1C 18                          DB $1F, $67, $1C, $18
  36++EAEC 1F 47 18 10                          DB $1F, $47, $18, $10
  37++EAF0 1F 27 10 00                          DB $1F, $27, $10, $00
  38++EAF4 1F 02 00 08                          DB $1F, $02, $00, $08
  39++EAF8 1F 03 04 0C                          DB $1F, $03, $04, $0C
  40++EAFC 1F 24 10 08                          DB $1F, $24, $10, $08
  41++EB00 1F 35 14 0C                          DB $1F, $35, $14, $0C
  42++EB04 1F 14 08 20                          DB $1F, $14, $08, $20
  43++EB08 1F 46 20 18                          DB $1F, $46, $20, $18
  44++EB0C 1F 15 0C 24                          DB $1F, $15, $0C, $24
  45++EB10 1F 56 24 1C                          DB $1F, $56, $24, $1C
  46++EB14 1F 01 08 0C                          DB $1F, $01, $08, $0C
  47++EB18 1F 16 20 24                          DB $1F, $16, $20, $24
  48++EB1C
  49++EB1C              WormEdgesSize: equ $ - WormEdges
  50++EB1C
  51++EB1C
  52++EB1C              WormEdgesCnt: equ WormEdgesSize/4
  53++EB1C
  54++EB1C
  55++EB1C 1F 00 58 46  WormNormals:	        DB $1F, $00, $58, $46
  56++EB20 1F 00 45 0E                          DB $1F, $00, $45, $0E
  57++EB24 1F 46 42 23                          DB $1F, $46, $42, $23
  58++EB28 9F 46 42 23                          DB $9F, $46, $42, $23
  59++EB2C 1F 40 31 0E                          DB $1F, $40, $31, $0E
  60++EB30 9F 40 31 0E                          DB $9F, $40, $31, $0E
  61++EB34 3F 00 00 C8                          DB $3F, $00, $00, $C8
  62++EB38 5F 00 50 00                          DB $5F, $00, $50, $00
  63++EB3C
  64++EB3C
  65++EB3C              WormNormalsSize: equ $ - WormNormals
  66++EB3C              WormLen: equ $ - Worm
  67++EB3C
# file closed: ./Data/ships/Worm.asm
  96+ EB3C                                      include "Data/ships/Rattler.asm"
# file opened: ./Data/ships/Rattler.asm
   1++EB3C 02           Rattler:	            DB $02
   2++EB3D 70 17                                DW $1770
   3++EB3F B1 EB                                DW RattlerEdges
   4++EB41 68                                   DB RattlerEdgesSize
   5++EB42 00 2A                                DB $00, $2A
   6++EB44 0F                                   DB RattlerVertSize /6
   7++EB45 5A                                   DB RattlerVertSize
   8++EB46 1A                                   DB RattlerEdgesCnt
   9++EB47 00 96                                DB $00, $96
  10++EB49 34                                   DB RattlerNormalsSize
  11++EB4A 0A 71 1F                             DB $0A, $71, $1F
  12++EB4D 19 EC                                DW RattlerNormals
  13++EB4F 01 22                                DB $01, $22
  14++EB51 57 EB                                DW RattlerVertices
  15++EB53 00 00                                DB 0,0                      ; Type and Tactics
  16++EB55 01                                   DB ShipCanAnger
  17++EB56 90                                   DB $90                      ; chance of ECM module
  18++EB57
  19++EB57
  20++EB57 00 00 3C 1F  RattlerVertices:	    DB $00, $00, $3C, $1F, $89, $23
  20++EB5B 89 23
  21++EB5D 28 00 28 1F                          DB $28, $00, $28, $1F, $9A, $34
  21++EB61 9A 34
  22++EB63 28 00 28 9F                          DB $28, $00, $28, $9F, $78, $12
  22++EB67 78 12
  23++EB69 3C 00 00 1F                          DB $3C, $00, $00, $1F, $AB, $45
  23++EB6D AB 45
  24++EB6F 3C 00 00 9F                          DB $3C, $00, $00, $9F, $67, $01
  24++EB73 67 01
  25++EB75 46 00 28 3F                          DB $46, $00, $28, $3F, $CC, $5B
  25++EB79 CC 5B
  26++EB7B 46 00 28 BF                          DB $46, $00, $28, $BF, $CC, $06
  26++EB7F CC 06
  27++EB81 00 14 28 3F                          DB $00, $14, $28, $3F, $FF, $FF
  27++EB85 FF FF
  28++EB87 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF
  28++EB8B FF FF
  29++EB8D 0A 06 28 AA                          DB $0A, $06, $28, $AA, $CC, $CC
  29++EB91 CC CC
  30++EB93 0A 06 28 EA                          DB $0A, $06, $28, $EA, $CC, $CC
  30++EB97 CC CC
  31++EB99 14 00 28 AA                          DB $14, $00, $28, $AA, $CC, $CC
  31++EB9D CC CC
  32++EB9F 0A 06 28 2A                          DB $0A, $06, $28, $2A, $CC, $CC
  32++EBA3 CC CC
  33++EBA5 0A 06 28 6A                          DB $0A, $06, $28, $6A, $CC, $CC
  33++EBA9 CC CC
  34++EBAB 14 00 28 2A                          DB $14, $00, $28, $2A, $CC, $CC
  34++EBAF CC CC
  35++EBB1
  36++EBB1              RattlerVertSize: equ $ - RattlerVertices
  37++EBB1
  38++EBB1
  39++EBB1 1F 06 10 18  RattlerEdges:	DB $1F, $06, $10, $18
  40++EBB5 1F 17 08 10  	DB $1F, $17, $08, $10
  41++EBB9 1F 28 00 08  	DB $1F, $28, $00, $08
  42++EBBD 1F 39 00 04  	DB $1F, $39, $00, $04
  43++EBC1 1F 4A 04 0C  	DB $1F, $4A, $04, $0C
  44++EBC5 1F 5B 0C 14  	DB $1F, $5B, $0C, $14
  45++EBC9 1F 0C 18 1C  	DB $1F, $0C, $18, $1C
  46++EBCD 1F 6C 18 20  	DB $1F, $6C, $18, $20
  47++EBD1 1F 01 10 1C  	DB $1F, $01, $10, $1C
  48++EBD5 1F 67 10 20  	DB $1F, $67, $10, $20
  49++EBD9 1F 12 08 1C  	DB $1F, $12, $08, $1C
  50++EBDD 1F 78 08 20  	DB $1F, $78, $08, $20
  51++EBE1 1F 23 00 1C  	DB $1F, $23, $00, $1C
  52++EBE5 1F 89 00 20  	DB $1F, $89, $00, $20
  53++EBE9 1F 34 04 1C  	DB $1F, $34, $04, $1C
  54++EBED 1F 9A 04 20  	DB $1F, $9A, $04, $20
  55++EBF1 1F 45 0C 1C  	DB $1F, $45, $0C, $1C
  56++EBF5 1F AB 0C 20  	DB $1F, $AB, $0C, $20
  57++EBF9 1F 5C 14 1C  	DB $1F, $5C, $14, $1C
  58++EBFD 1F BC 14 20  	DB $1F, $BC, $14, $20
  59++EC01 0A CC 24 28  	DB $0A, $CC, $24, $28
  60++EC05 0A CC 28 2C  	DB $0A, $CC, $28, $2C
  61++EC09 0A CC 2C 24  	DB $0A, $CC, $2C, $24
  62++EC0D 0A CC 30 34  	DB $0A, $CC, $30, $34
  63++EC11 0A CC 34 38  	DB $0A, $CC, $34, $38
  64++EC15 0A CC 38 30  	DB $0A, $CC, $38, $30
  65++EC19
  66++EC19              RattlerEdgesSize: equ $ - RattlerEdges
  67++EC19
  68++EC19
  69++EC19              RattlerEdgesCnt: equ RattlerEdgesSize/4
  70++EC19
  71++EC19
  72++EC19 9F 1A 5C 06  RattlerNormals:	DB $9F, $1A, $5C, $06
  73++EC1D 9F 17 5C 0B  	DB $9F, $17, $5C, $0B
  74++EC21 9F 09 5D 12  	DB $9F, $09, $5D, $12
  75++EC25 1F 09 5D 12  	DB $1F, $09, $5D, $12
  76++EC29 1F 17 5C 0B  	DB $1F, $17, $5C, $0B
  77++EC2D 1F 1A 5C 06  	DB $1F, $1A, $5C, $06
  78++EC31 DF 1A 5C 06  	DB $DF, $1A, $5C, $06
  79++EC35 DF 17 5C 0B  	DB $DF, $17, $5C, $0B
  80++EC39 DF 09 5D 12  	DB $DF, $09, $5D, $12
  81++EC3D 5F 09 5D 12  	DB $5F, $09, $5D, $12
  82++EC41 5F 17 5C 0B  	DB $5F, $17, $5C, $0B
  83++EC45 5F 1A 5C 06  	DB $5F, $1A, $5C, $06
  84++EC49 3F 00 00 60  	DB $3F, $00, $00, $60
  85++EC4D
  86++EC4D              RattlerNormalsSize: equ $ - RattlerNormals
  87++EC4D              RattlerLen: equ $ - Rattler
  88++EC4D
# file closed: ./Data/ships/Rattler.asm
  97+ EC4D
# file closed: ./Data/ShipModelMetaData3.asm
 767  EC4D              ;;Privisioned for more models ; Bank 69  ------------------------------------------------------------------------------------------------------------------------
 768  EC4D              ;;Privisioned for more models     SLOT    ShipModelsAddr
 769  EC4D              ;;Privisioned for more models     PAGE    BankShipModels4
 770  EC4D              ;;Privisioned for more models 	ORG     ShipModelsAddr, BankShipModels4
 771  EC4D                  DISPLAY "Bank ",BankShipModels3," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels3"
 772  EC4D              ; Bank 60  ------------------------------------------------------------------------------------------------------------------------
 773  EC4D                  SLOT    SpritemembankAddr
 774  EC4D                  PAGE    BankSPRITE
 775  EC4D              	ORG     SpritemembankAddr, BankSPRITE
 776  E000                  INCLUDE "./Layer3Sprites/sprite_routines.asm"
# file opened: ./Layer3Sprites/sprite_routines.asm
   1+ E000
   2+ E000              galactic_cursor_sprite				equ	0                            ; 00
   3+ E000              galactic_cursor_sprite1				equ	galactic_cursor_sprite+1     ; 01
   4+ E000              galactic_cursor_sprite2				equ	galactic_cursor_sprite1+2    ; 02
   5+ E000                                                                                   ;
   6+ E000              galactic_hyper_sprite				equ	galactic_cursor_sprite2+1    ; 03
   7+ E000              ;galactic_hyper_sprite1				equ galactic_hyper_sprite+1      ;
   8+ E000              ;galactic_hyper_sprite2				equ	galactic_hyper_sprite1+1     ;
   9+ E000
  10+ E000              local_cursor_sprite					equ	galactic_hyper_sprite+1      ; 04
  11+ E000              local_cursor_sprite1				equ	local_cursor_sprite+1        ; 05
  12+ E000              local_cursor_sprite2				equ	local_cursor_sprite1+1       ; 06
  13+ E000
  14+ E000              local_hyper_sprite					equ	local_cursor_sprite2+1       ; 07
  15+ E000              local_hyper_sprite1					equ	local_hyper_sprite+1         ; 08
  16+ E000              local_hyper_sprite2					equ	local_hyper_sprite1+2        ; 09
  17+ E000
  18+ E000              reticlule_sprite1                   equ	local_hyper_sprite2+1        ; 10
  19+ E000              reticlule_sprite2                   equ	reticlule_sprite1+1          ; 11
  20+ E000              reticlule_sprite3                   equ	reticlule_sprite2+1          ; 12
  21+ E000              reticlule_sprite4                   equ reticlule_sprite3+1          ; 13
  22+ E000
  23+ E000              laser_sprite1                       equ	reticlule_sprite4+1          ; 14
  24+ E000              laser_sprite2                       equ	laser_sprite1    +1          ; 15
  25+ E000              laser_sprite3                       equ	laser_sprite2    +1          ; 16
  26+ E000              laser_sprite4                       equ laser_sprite3    +1          ; 17
  27+ E000              laser_sprite5                       equ	laser_sprite4    +1          ; 18
  28+ E000              laser_sprite6                       equ	laser_sprite5    +1          ; 19
  29+ E000              laser_sprite7                       equ	laser_sprite6    +1          ; 20
  30+ E000              laser_sprite8                       equ laser_sprite7    +1          ; 21
  31+ E000              laser_sprite9                       equ	laser_sprite8    +1          ; 22
  32+ E000              laser_sprite10                      equ	laser_sprite9    +1          ; 23
  33+ E000              laser_sprite11                      equ	laser_sprite10   +1          ; 24
  34+ E000              laser_sprite12                      equ laser_sprite11   +1          ; 25
  35+ E000              laser_sprite13                      equ	laser_sprite12   +1          ; 26
  36+ E000              laser_sprite14                      equ	laser_sprite13   +1          ; 27
  37+ E000              laser_sprite15                      equ	laser_sprite14   +1          ; 28
  38+ E000              laser_sprite16                      equ laser_sprite15   +1          ; 29
  39+ E000              compass_sun                         equ laser_sprite16   +1          ; 30
  40+ E000              compass_station                     equ compass_sun      +1          ; 31
  41+ E000              targetting_sprite1                  equ compass_station  +1          ; 32
  42+ E000              targetting_sprite2                  equ targetting_sprite1   +1      ; 33
  43+ E000              ECM_sprite                          equ targetting_sprite2   +1      ; 34
  44+ E000              missile_sprite1                     equ ECM_sprite       +1          ; 35
  45+ E000              missile_sprite2                     equ missile_sprite1  +1          ; 36
  46+ E000              missile_sprite3                     equ missile_sprite2  +1          ; 37
  47+ E000              missile_sprite4                     equ missile_sprite3  +1          ; 38
  48+ E000
  49+ E000              glactic_pattern_1					equ 0
  50+ E000              glactic_hyper_pattern_1             equ 2
  51+ E000              local_present_cursor                equ 4
  52+ E000              local_hyper_pattern                 equ 7
  53+ E000              reticule_pattern_1                  equ 10
  54+ E000              reticule_pattern_2                  equ 11
  55+ E000              laser_pattern_1                     equ 12
  56+ E000              laser_pattern_2                     equ 13
  57+ E000              laser_pattern_3                     equ 14
  58+ E000              laser_pattern_4                     equ 15
  59+ E000              laser_pattern_5                     equ 16
  60+ E000              targetting_pattern                  equ 23
  61+ E000              lock_pattern                        equ 24
  62+ E000              ecm_pattern                         equ 25
  63+ E000              missile_ready_pattern               equ 26
  64+ E000              missile_armed_pattern               equ 27
  65+ E000              missile_locked_pattern              equ 28
  66+ E000
  67+ E000              compass_sun_infront                 equ 17
  68+ E000              compass_sun_behind                  equ 18
  69+ E000              compass_station_infront             equ 19
  70+ E000              compass_station_behind              equ 20
  71+ E000              spritecursoroffset					equ 17
  72+ E000              spriteborderoffset                  equ 32
  73+ E000
  74+ E000              HideSprite:                 MACRO   spritenbr
  75+ E000 ~                                        nextreg		SPRITE_PORT_INDEX_REGISTER,spritenbr
  76+ E000 ~                                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
  77+ E000                                          ENDM
  78+ E000
  79+ E000              ; " sprite_big BC = rowcol, D = sprite nbr , E= , pattern"
  80+ E000              sprite_big:
  81+ E000 7A           .SetAnchor:	                ld		a,d                                 ; a = sprite nbr, bug fix?
  82+ E001 F5                                       push	af									; save id for next few
  83+ E002 D5                                       push	de
  84+ E003 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
  85+ E006              ; write out X position bits 1 to 8
  86+ E006 79                                       ld		a,c
  87+ E007 21 11 00                                 ld      hl,spritecursoroffset
  88+ E00A ED 31                                    add		hl,a                                ; hl = full x position
  89+ E00C 7D                                       ld		a,l
  90+ E00D ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
  91+ E010              ; write out Y position bits 1 to 8
  92+ E010 EB                                       ex		de,hl								; de = full x position
  93+ E011 78                                       ld		a,b
  94+ E012 21 11 00                                 ld      hl,spritecursoroffset
  95+ E015 ED 31                                    add		hl,a
  96+ E017 7D                                       ld		a,l                                 ; hl = full y position
  97+ E018 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
  98+ E01B              ; write out MSB of X as its an anchor
  99+ E01B 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 100+ E01C ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 101+ E01F              ; write out sprite pattern
 102+ E01F D1                                       pop		de                                  ; de = pattern and sprite nbr
 103+ E020 7B                                       ld		a,e
 104+ E021 F6 C0                                    or		%11000000							;
 105+ E023 ED 92 38                                 nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 106+ E026              ; write out msb of y in h must be bit 0 only
 107+ E026 3E 00                                    ld		a,%00000000							; big unified composite
 108+ E028 B4                                       or		h									; MSB Y
 109+ E029 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 110+ E02C F1           .BigSprite1:                pop		af
 111+ E02D 3C                                       inc		a
 112+ E02E F5                                       push	af
 113+ E02F ED 92 34                                 nextreg		SPRITE_PORT_INDEX_REGISTER,a
 114+ E032 3E 10                                    ld		a,16
 115+ E034 ED 92 35                                 nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 116+ E037 AF                                       xor 	a
 117+ E038 ED 92 36                                 nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 118+ E03B ED 92 37                                 nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 119+ E03E 3E C1                                    ld		a,%11000001							; relative and 4 bytes of data, pattern 1
 120+ E040 ED 92 38                                 nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 121+ E043 3E 41                                    ld		a,%01000001							; big unified composite
 122+ E045 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 123+ E048 F1           .BigSprite2:                pop		af
 124+ E049 3C                                       inc		a
 125+ E04A ED 92 34                                 nextreg		SPRITE_PORT_INDEX_REGISTER,a
 126+ E04D AF                                       xor		a
 127+ E04E ED 92 35                                 nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 128+ E051 3E 10                                    ld		a,16
 129+ E053 ED 92 36                                 nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 130+ E056 AF                                       xor		a
 131+ E057 ED 92 37                                 nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 132+ E05A 3E C2                                    ld		a,%11000010							; relative and 4 bytes of data, pattern 2
 133+ E05C ED 92 38                                 nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 134+ E05F 3E 41                                    ld		a,%01000001							; big unified composite
 135+ E061 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 136+ E064 C9                                       ret
 137+ E065
 138+ E065              ; for a sinle sprite within 256x192 area
 139+ E065 7A           sprite_single:          ld		a,d                                 ; a = sprite nbr, bug fix?
 140+ E066 D5                                   push    de
 141+ E067 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 142+ E06A              ; write out X position bits 1 to 8
 143+ E06A 79                                   ld		a,c                                 ; a = column (c)
 144+ E06B 21 20 00                             ld      hl,spriteborderoffset
 145+ E06E ED 31                                add		hl,a                                ; hl = full x position
 146+ E070 EB                                   ex		de,hl								; de = full x position
 147+ E071 7B                                   ld		a,e
 148+ E072 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 149+ E075              ; write out Y position bits 1 to 8
 150+ E075 78                                   ld		a,b                                 ; a = row
 151+ E076 21 20 00                             ld      hl,spriteborderoffset
 152+ E079 ED 31                                add		hl,a
 153+ E07B 7D                                   ld		a,l                                 ; hl = full y position
 154+ E07C ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 155+ E07F              ; write out MSB of X as its an anchor
 156+ E07F 7A                                   ld		a,d									; de = MSB of X (hl bit 0)
 157+ E080 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 158+ E083              ; write out sprite pattern
 159+ E083 D1                                   pop     de
 160+ E084 7B                                   ld		a,e
 161+ E085 F6 80                                or		%10000000							;
 162+ E087 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 163+ E08A              ; write out extended attribute
 164+ E08A 3E 00                                ld      a,%00000000                         ; its a single sprite
 165+ E08C B4                                   or      h
 166+ E08D ED 92 39                             nextreg	SPRITE_PORT_ATTR4_REGISTER,a
 167+ E090 C9                                   ret
 168+ E091              ; ">sprite_galactic_cursor BC = rowcol"
 169+ E091 16 00        sprite_galactic_cursor:     ld		d,galactic_cursor_sprite
 170+ E093 1E 00                                    ld		e,0
 171+ E095 78                                       ld		a,b
 172+ E096 C6 18                                    add		a,galactic_chart_y_offset
 173+ E098 47                                       ld		b,a
 174+ E099 CD 00 E0                                 call	sprite_big
 175+ E09C C9                                       ret
 176+ E09D
 177+ E09D              ; "> sprite_galactic_hyper_cursorBC = rowcol"
 178+ E09D 78           sprite_galactic_hyper_cursor:ld		a,b
 179+ E09E C6 04                                    add		a,galactic_chart_hyper_offset
 180+ E0A0 47                                       ld		b,a
 181+ E0A1 16 04                                    ld		d,galactic_hyper_sprite
 182+ E0A3 1E 03                                    ld		e,3
 183+ E0A5 CD 65 E0                                 call	sprite_single ; sprite_big:
 184+ E0A8 C9                                       ret
 185+ E0A9
 186+ E0A9
 187+ E0A9              ; moves hyperspace cursor to target system x position
 188+ E0A9 3E 04        sprite_ghc_move:            ld		a,galactic_hyper_sprite
 189+ E0AB ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 190+ E0AE              ; write out X position bits 1 to 8
 191+ E0AE 79                                       ld		a,c
 192+ E0AF 21 1C 00                                 ld      hl,galactic_chart_hyper_x_offset
 193+ E0B2 ED 31                                    add		hl,a                                ; hl = full x position
 194+ E0B4 7D                                       ld		a,l
 195+ E0B5 ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 196+ E0B8              ; write out Y position bits 1 to 8
 197+ E0B8 EB                                       ex		de,hl								; de = full x position
 198+ E0B9 CB 38                                    srl		b			    					; row is row / 2
 199+ E0BB 78                                       ld      a,b
 200+ E0BC 21 34 00                                 ld      hl,galactic_chart_hyper_y_offset
 201+ E0BF ED 31                                    add		hl,a
 202+ E0C1 7D                                       ld		a,l                                 ; hl = full y position
 203+ E0C2 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 204+ E0C5              ; write out MSB of X as its an anchor
 205+ E0C5 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 206+ E0C6 ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 207+ E0C9              ; write out msb of y in h must be bit 0 only
 208+ E0C9 3E 00                                    ld		a,%00000000							; big unified composite
 209+ E0CB B2                                       or		d									; MSB Y
 210+ E0CC ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 211+ E0CF C9                                       ret
 212+ E0D0
 213+ E0D0
 214+ E0D0 3E 08        sprite_lhc_move:            ld		a,local_hyper_sprite
 215+ E0D2 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 216+ E0D5              ; write out X position bits 1 to 8
 217+ E0D5 79                                       ld		a,c
 218+ E0D6 21 11 00                                 ld      hl,spritecursoroffset
 219+ E0D9 ED 31                                    add		hl,a                                ; hl = full x position
 220+ E0DB 7D                                       ld		a,l
 221+ E0DC ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 222+ E0DF              ; write out Y position bits 1 to 8
 223+ E0DF EB                                       ex		de,hl								; de = full x position
 224+ E0E0 78                                       ld		a,b
 225+ E0E1 21 11 00                                 ld      hl,spritecursoroffset
 226+ E0E4 ED 31                                    add		hl,a
 227+ E0E6 7D                                       ld		a,l                                 ; hl = full y position
 228+ E0E7 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 229+ E0EA              ; write out MSB of X as its an anchor
 230+ E0EA 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 231+ E0EB ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 232+ E0EE              ; write out msb of y in h must be bit 0 only
 233+ E0EE 3E 00                                    ld		a,%00000000							; big unified composite
 234+ E0F0 B2                                       or		d									; MSB Y
 235+ E0F1 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 236+ E0F4 C9                                       ret
 237+ E0F5
 238+ E0F5              ; "sprite_local_cursor BC = rowcol"
 239+ E0F5 16 05        sprite_local_cursor:        ld		d,local_cursor_sprite
 240+ E0F7 1E 04                                    ld		e,local_present_cursor
 241+ E0F9 CD 00 E0                                 call	sprite_big
 242+ E0FC C9                                       ret
 243+ E0FD
 244+ E0FD              ; "sprite_local_hyper_cursor BC = rowcol"
 245+ E0FD 16 08        sprite_local_hyper_cursor:  ld		d,local_hyper_sprite
 246+ E0FF 1E 07                                    ld		e,local_hyper_pattern
 247+ E101 CD 00 E0                                 call	sprite_big
 248+ E104 C9                                       ret
 249+ E105
 250+ E105              compass_offset              equ 2
 251+ E105              ScannerX                    equ 128
 252+ E105              ScannerY                    equ 171
 253+ E105              SunScanCenterX              equ 92
 254+ E105              SunScanCenterY              equ 171
 255+ E105              PlanetScanCenterX           equ 164
 256+ E105              PlanetScanCenterY           equ 171
 257+ E105
 258+ E105
 259+ E105 3E 20        compass_sun_move:       ld		a,compass_sun
 260+ E107 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 261+ E10A              ; write out X position bits 1 to 8
 262+ E10A 3E 5A                                ld      a, SunScanCenterX-compass_offset
 263+ E10C 81                                   add     a,c
 264+ E10D ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 265+ E110              ; write out Y position bits 1 to 8
 266+ E110 3E A9                                ld      a, SunScanCenterY-compass_offset
 267+ E112 90                                   sub     b
 268+ E113 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 269+ E116 C9                                   ret
 270+ E117
 271+ E117 3E 21        compass_station_move:   ld		a,compass_station
 272+ E119 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 273+ E11C              ; write out X position bits 1 to 8
 274+ E11C 3E A2                                ld      a, PlanetScanCenterX-compass_offset
 275+ E11E 81                                   add     a,c
 276+ E11F ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 277+ E122              ; write out Y position bits 1 to 8
 278+ E122 3E A9                                ld      a, PlanetScanCenterY-compass_offset
 279+ E124 90                                   sub     b
 280+ E125 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 281+ E128 C9                                   ret
 282+ E129
 283+ E129              ReticuleCentreX         EQU (256/2)+32 -1
 284+ E129              ReticuleCentreY         EQU (192/2)+32 -1
 285+ E129              ReticuleOffset          EQU 8
 286+ E129
 287+ E129              TargetetingCentreX1     EQU ReticuleCentreX -32
 288+ E129              TargetetingCentreX2     EQU ReticuleCentreX +16
 289+ E129              TargetetingCentreY      EQU ReticuleCentreY -7
 290+ E129
 291+ E129              sprite_missile_x        EQU 2+32
 292+ E129              sprite_missile_y        EQU 192-8+32
 293+ E129
 294+ E129              sprite_ecm_x            EQU (6*8) +2 +32
 295+ E129              sprite_ecm_y            EQU 192-15+32
 296+ E129
 297+ E129 3E 24        sprite_ECM:             ld      a,ECM_sprite
 298+ E12B ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a
 299+ E12E 3E 52                                ld      a,sprite_ecm_x
 300+ E130 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 301+ E133 3E D1                                ld		a,sprite_ecm_y
 302+ E135 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 303+ E138 3E 99                                ld      a,ecm_pattern | %10000000
 304+ E13A ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 305+ E13D C9                                   ret
 306+ E13E
 307+ E13E ED 92 34     sprite_missile_ready:   nextreg SPRITE_PORT_INDEX_REGISTER,a
 308+ E141 79                                   ld      a,c
 309+ E142 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 310+ E145 3E D8                                ld		a,sprite_missile_y
 311+ E147 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 312+ E14A 3E 9A                                ld      a,missile_ready_pattern | %10000000
 313+ E14C ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 314+ E14F C9                                   ret
 315+ E150
 316+ E150 3E 25        sprite_missile_1:       ld      a,missile_sprite1
 317+ E152 0E 22                                ld      c,sprite_missile_x
 318+ E154 C3 3E E1                             jp      sprite_missile_ready
 319+ E157
 320+ E157 3E 26        sprite_missile_2:       ld      a,missile_sprite2
 321+ E159 0E 31                                ld      c,sprite_missile_x+15
 322+ E15B C3 3E E1                             jp      sprite_missile_ready
 323+ E15E
 324+ E15E 3E 27        sprite_missile_3:       ld      a,missile_sprite3
 325+ E160 0E 3B                                ld      c,sprite_missile_x+25
 326+ E162 C3 3E E1                             jp      sprite_missile_ready
 327+ E165
 328+ E165 3E 28        sprite_missile_4:       ld      a,missile_sprite4
 329+ E167 0E 45                                ld      c,sprite_missile_x +35
 330+ E169 C3 3E E1                             jp      sprite_missile_ready
 331+ E16C
 332+ E16C
 333+ E16C
 334+ E16C 3E 0C        sprite_reticule:        ld      a,reticlule_sprite1                 ; LEFT ARM
 335+ E16E ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 336+ E171 3E 87                                ld      a,ReticuleCentreX -16 - ReticuleOffset
 337+ E173 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 338+ E176 3E 7F                                ld		a,ReticuleCentreY
 339+ E178 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 340+ E17B AF                                   xor     a
 341+ E17C ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 342+ E17F 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 343+ E181 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 344+ E184 3E 0D        .rightReticule          ld      a,reticlule_sprite2                 ; RIGHT ARM
 345+ E186 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 346+ E189 3E A7                                ld      a,ReticuleCentreX + ReticuleOffset
 347+ E18B ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 348+ E18E 3E 7F                                ld		a,ReticuleCentreY
 349+ E190 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 350+ E193 3E 08                                ld      a,%00001000
 351+ E195 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 352+ E198 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 353+ E19A ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 354+ E19D 3E 0E        .topReticule            ld      a,reticlule_sprite3
 355+ E19F ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 356+ E1A2 3E 9F                                ld      a,ReticuleCentreX
 357+ E1A4 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 358+ E1A7 3E 67                                ld		a,ReticuleCentreY-16 - ReticuleOffset
 359+ E1A9 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 360+ E1AC AF                                   xor     a
 361+ E1AD ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 362+ E1B0 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 363+ E1B2 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 364+ E1B5 3E 0F        .bottomReticule         ld      a,reticlule_sprite4
 365+ E1B7 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 366+ E1BA 3E 9F                                ld      a,ReticuleCentreX
 367+ E1BC ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 368+ E1BF 3E 87                                ld		a,ReticuleCentreY + ReticuleOffset
 369+ E1C1 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 370+ E1C4 3E 04                                ld      a,%00000100
 371+ E1C6 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring vertical
 372+ E1C9 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 373+ E1CB ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 374+ E1CE C9                                   ret
 375+ E1CF
 376+ E1CF              laserbasex              equ 6
 377+ E1CF              laserbasey              equ 14
 378+ E1CF
 379+ E1CF              ShowSprite              MACRO   spritenbr, patternnbr
 380+ E1CF ~                                    ld      a, spritenbr
 381+ E1CF ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 382+ E1CF ~                                    ld      a,patternnbr | %10000000
 383+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 384+ E1CF                                      ENDM
 385+ E1CF
 386+ E1CF              LeftLaser:              MACRO   xoffset, yoffset, spriteL, patternL
 387+ E1CF ~                                    ld      a, spriteL
 388+ E1CF ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 389+ E1CF ~                                    ld      a,((laserbasex + xoffset) *8) + 32
 390+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 391+ E1CF ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 392+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 393+ E1CF ~                                    xor     a
 394+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 395+ E1CF ~                                    ld      a, patternL | %00000000             ; hidden by default
 396+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 397+ E1CF                                      ENDM
 398+ E1CF
 399+ E1CF              RightLaser:             MACRO   xoffset, yoffset, spriteL, patternL
 400+ E1CF ~                                    ld      a, spriteL
 401+ E1CF ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 402+ E1CF ~                                    ld      a,(((30-laserbasex) - xoffset) *8) + 32 -2
 403+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 404+ E1CF ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 405+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 406+ E1CF ~                                    ld      a,%00001000
 407+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 408+ E1CF ~                                    ld      a, patternL | %00000000             ; hidden by default
 409+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 410+ E1CF                                      ENDM
 411+ E1CF
 412+ E1CF              show_ecm_sprite:        ShowSprite  ECM_sprite, ecm_pattern
 412+ E1CF 3E 24       >                        ld      a, ECM_sprite
 412+ E1D1 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 412+ E1D4 3E 99       >                        ld      a,ecm_pattern | %10000000
 412+ E1D6 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 413+ E1D9 C9                                   ret
 414+ E1DA
 415+ E1DA              show_missile_1_ready:   ShowSprite  missile_sprite1, missile_ready_pattern
 415+ E1DA 3E 25       >                        ld      a, missile_sprite1
 415+ E1DC ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 415+ E1DF 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 415+ E1E1 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 416+ E1E4 C9                                   ret
 417+ E1E5
 418+ E1E5              show_missile_2_ready:   ShowSprite  missile_sprite2, missile_ready_pattern
 418+ E1E5 3E 26       >                        ld      a, missile_sprite2
 418+ E1E7 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 418+ E1EA 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 418+ E1EC ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 419+ E1EF C9                                   ret
 420+ E1F0
 421+ E1F0              show_missile_3_ready:   ShowSprite  missile_sprite3, missile_ready_pattern
 421+ E1F0 3E 27       >                        ld      a, missile_sprite3
 421+ E1F2 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 421+ E1F5 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 421+ E1F7 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 422+ E1FA C9                                   ret
 423+ E1FB
 424+ E1FB              show_missile_4_ready:   ShowSprite  missile_sprite4, missile_ready_pattern
 424+ E1FB 3E 28       >                        ld      a, missile_sprite4
 424+ E1FD ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 424+ E200 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 424+ E202 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 425+ E205 C9                                   ret
 426+ E206
 427+ E206              show_missile_1_armed:   ShowSprite  missile_sprite1, missile_armed_pattern
 427+ E206 3E 25       >                        ld      a, missile_sprite1
 427+ E208 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 427+ E20B 3E 9B       >                        ld      a,missile_armed_pattern | %10000000
 427+ E20D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 428+ E210 C9                                   ret
 429+ E211
 430+ E211              show_missile_1_locked:  ShowSprite  missile_sprite1, missile_locked_pattern
 430+ E211 3E 25       >                        ld      a, missile_sprite1
 430+ E213 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 430+ E216 3E 9C       >                        ld      a,missile_locked_pattern | %10000000
 430+ E218 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 431+ E21B C9                                   ret
 432+ E21C
 433+ E21C
 434+ E21C              show_compass_sun_infront:ShowSprite  compass_sun, compass_sun_infront
 434+ E21C 3E 20       >                        ld      a, compass_sun
 434+ E21E ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 434+ E221 3E 91       >                        ld      a,compass_sun_infront | %10000000
 434+ E223 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 435+ E226 C9                                    ret
 436+ E227
 437+ E227              show_compass_sun_behind: ShowSprite  compass_sun, compass_sun_behind
 437+ E227 3E 20       >                        ld      a, compass_sun
 437+ E229 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 437+ E22C 3E 92       >                        ld      a,compass_sun_behind | %10000000
 437+ E22E ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 438+ E231 C9                                    ret
 439+ E232
 440+ E232              show_compass_station_infront: ShowSprite  compass_station, compass_station_infront
 440+ E232 3E 21       >                        ld      a, compass_station
 440+ E234 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 440+ E237 3E 93       >                        ld      a,compass_station_infront | %10000000
 440+ E239 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 441+ E23C C9                                    ret
 442+ E23D
 443+ E23D              show_compass_station_behind:  ShowSprite  compass_station, compass_station_behind
 443+ E23D 3E 21       >                        ld      a, compass_station
 443+ E23F ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 443+ E242 3E 94       >                        ld      a,compass_station_behind | %10000000
 443+ E244 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 444+ E247 C9                                    ret
 445+ E248
 446+ E248              sprite_laser:           LeftLaser  0,0,laser_sprite1 ,laser_pattern_1
 446+ E248 3E 10       >                        ld      a, laser_sprite1
 446+ E24A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 446+ E24D 3E 50       >                        ld      a,((laserbasex + 0) *8) + 32
 446+ E24F ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 446+ E252 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 446+ E254 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 446+ E257 AF          >                        xor     a
 446+ E258 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 446+ E25B 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 446+ E25D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 447+ E260                                      LeftLaser  2,0,laser_sprite2 ,laser_pattern_2
 447+ E260 3E 11       >                        ld      a, laser_sprite2
 447+ E262 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 447+ E265 3E 60       >                        ld      a,((laserbasex + 2) *8) + 32
 447+ E267 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 447+ E26A 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 447+ E26C ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 447+ E26F AF          >                        xor     a
 447+ E270 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 447+ E273 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 447+ E275 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 448+ E278                                      LeftLaser  4,1,laser_sprite3 ,laser_pattern_3
 448+ E278 3E 12       >                        ld      a, laser_sprite3
 448+ E27A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 448+ E27D 3E 70       >                        ld      a,((laserbasex + 4) *8) + 32
 448+ E27F ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 448+ E282 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 448+ E284 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 448+ E287 AF          >                        xor     a
 448+ E288 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 448+ E28B 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 448+ E28D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 449+ E290                                      LeftLaser  6,1,laser_sprite4 ,laser_pattern_4
 449+ E290 3E 13       >                        ld      a, laser_sprite4
 449+ E292 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 449+ E295 3E 80       >                        ld      a,((laserbasex + 6) *8) + 32
 449+ E297 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 449+ E29A 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 449+ E29C ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 449+ E29F AF          >                        xor     a
 449+ E2A0 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 449+ E2A3 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 449+ E2A5 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 450+ E2A8                                      LeftLaser  8,2,laser_sprite5 ,laser_pattern_5
 450+ E2A8 3E 14       >                        ld      a, laser_sprite5
 450+ E2AA ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 450+ E2AD 3E 90       >                        ld      a,((laserbasex + 8) *8) + 32
 450+ E2AF ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 450+ E2B2 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 450+ E2B4 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 450+ E2B7 AF          >                        xor     a
 450+ E2B8 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 450+ E2BB 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 450+ E2BD ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 451+ E2C0                                      RightLaser 0,0,laser_sprite9 ,laser_pattern_1
 451+ E2C0 3E 18       >                        ld      a, laser_sprite9
 451+ E2C2 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 451+ E2C5 3E DE       >                        ld      a,(((30-laserbasex) - 0) *8) + 32 -2
 451+ E2C7 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 451+ E2CA 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 451+ E2CC ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 451+ E2CF 3E 08       >                        ld      a,%00001000
 451+ E2D1 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 451+ E2D4 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 451+ E2D6 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 452+ E2D9                                      RightLaser 2,0,laser_sprite10,laser_pattern_2
 452+ E2D9 3E 19       >                        ld      a, laser_sprite10
 452+ E2DB ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 452+ E2DE 3E CE       >                        ld      a,(((30-laserbasex) - 2) *8) + 32 -2
 452+ E2E0 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 452+ E2E3 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 452+ E2E5 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 452+ E2E8 3E 08       >                        ld      a,%00001000
 452+ E2EA ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 452+ E2ED 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 452+ E2EF ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 453+ E2F2                                      RightLaser 4,1,laser_sprite11,laser_pattern_3
 453+ E2F2 3E 1A       >                        ld      a, laser_sprite11
 453+ E2F4 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 453+ E2F7 3E BE       >                        ld      a,(((30-laserbasex) - 4) *8) + 32 -2
 453+ E2F9 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 453+ E2FC 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 453+ E2FE ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 453+ E301 3E 08       >                        ld      a,%00001000
 453+ E303 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 453+ E306 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 453+ E308 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 454+ E30B                                      RightLaser 6,1,laser_sprite12,laser_pattern_4
 454+ E30B 3E 1B       >                        ld      a, laser_sprite12
 454+ E30D ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 454+ E310 3E AE       >                        ld      a,(((30-laserbasex) - 6) *8) + 32 -2
 454+ E312 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 454+ E315 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 454+ E317 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 454+ E31A 3E 08       >                        ld      a,%00001000
 454+ E31C ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 454+ E31F 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 454+ E321 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 455+ E324                                      RightLaser 8,2,laser_sprite13,laser_pattern_5
 455+ E324 3E 1C       >                        ld      a, laser_sprite13
 455+ E326 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 455+ E329 3E 9E       >                        ld      a,(((30-laserbasex) - 8) *8) + 32 -2
 455+ E32B ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 455+ E32E 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 455+ E330 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 455+ E333 3E 08       >                        ld      a,%00001000
 455+ E335 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 455+ E338 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 455+ E33A ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 456+ E33D C9                                   ret
 457+ E33E                                      ; Need simple show updates just to update the show attribute
 458+ E33E
 459+ E33E              sprite_laser_show:      ShowSprite laser_sprite1 ,laser_pattern_1
 459+ E33E 3E 10       >                        ld      a, laser_sprite1
 459+ E340 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 459+ E343 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 459+ E345 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 460+ E348                                      ShowSprite laser_sprite2 ,laser_pattern_2
 460+ E348 3E 11       >                        ld      a, laser_sprite2
 460+ E34A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 460+ E34D 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 460+ E34F ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 461+ E352                                      ShowSprite laser_sprite3 ,laser_pattern_3
 461+ E352 3E 12       >                        ld      a, laser_sprite3
 461+ E354 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 461+ E357 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 461+ E359 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 462+ E35C                                      ShowSprite laser_sprite4 ,laser_pattern_4
 462+ E35C 3E 13       >                        ld      a, laser_sprite4
 462+ E35E ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 462+ E361 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 462+ E363 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 463+ E366                                      ShowSprite laser_sprite5 ,laser_pattern_5
 463+ E366 3E 14       >                        ld      a, laser_sprite5
 463+ E368 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 463+ E36B 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 463+ E36D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 464+ E370                                      ShowSprite laser_sprite9 ,laser_pattern_1
 464+ E370 3E 18       >                        ld      a, laser_sprite9
 464+ E372 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 464+ E375 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 464+ E377 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 465+ E37A                                      ShowSprite laser_sprite10,laser_pattern_2
 465+ E37A 3E 19       >                        ld      a, laser_sprite10
 465+ E37C ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 465+ E37F 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 465+ E381 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 466+ E384                                      ShowSprite laser_sprite11,laser_pattern_3
 466+ E384 3E 1A       >                        ld      a, laser_sprite11
 466+ E386 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 466+ E389 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 466+ E38B ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 467+ E38E                                      ShowSprite laser_sprite12,laser_pattern_4
 467+ E38E 3E 1B       >                        ld      a, laser_sprite12
 467+ E390 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 467+ E393 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 467+ E395 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 468+ E398                                      ShowSprite laser_sprite13,laser_pattern_5
 468+ E398 3E 1C       >                        ld      a, laser_sprite13
 468+ E39A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 468+ E39D 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 468+ E39F ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 469+ E3A2 C9                                   ret
 470+ E3A3
 471+ E3A3              sprite_galactic_hide:   HideSprite galactic_cursor_sprite
 471+ E3A3 ED 91 34 00 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite
 471+ E3A7 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 472+ E3AB                                      HideSprite galactic_cursor_sprite1
 472+ E3AB ED 91 34 01 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite1
 472+ E3AF ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 473+ E3B3                                      HideSprite galactic_cursor_sprite2
 473+ E3B3 ED 91 34 03 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite2
 473+ E3B7 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 474+ E3BB C9                                   ret
 475+ E3BC
 476+ E3BC              sprite_galactic_hyper_hide:
 477+ E3BC                                      HideSprite galactic_hyper_sprite
 477+ E3BC ED 91 34 04 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite
 477+ E3C0 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 478+ E3C4                                       ;nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite1
 479+ E3C4              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 480+ E3C4              ;                        nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite2
 481+ E3C4              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 482+ E3C4 C9                                   ret
 483+ E3C5
 484+ E3C5              sprite_local_hide:      HideSprite local_cursor_sprite
 484+ E3C5 ED 91 34 05 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite
 484+ E3C9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 485+ E3CD                                      HideSprite local_cursor_sprite1
 485+ E3CD ED 91 34 06 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite1
 485+ E3D1 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 486+ E3D5                                      HideSprite local_cursor_sprite2
 486+ E3D5 ED 91 34 07 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite2
 486+ E3D9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 487+ E3DD C9                                   ret
 488+ E3DE
 489+ E3DE              sprite_local_hyper_hide:HideSprite local_hyper_sprite
 489+ E3DE ED 91 34 08 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite
 489+ E3E2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 490+ E3E6                                      HideSprite local_hyper_sprite1
 490+ E3E6 ED 91 34 09 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite1
 490+ E3EA ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 491+ E3EE                                      HideSprite local_hyper_sprite2
 491+ E3EE ED 91 34 0B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite2
 491+ E3F2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 492+ E3F6 C9                                   ret
 493+ E3F7
 494+ E3F7              sprite_reticule_hide:   HideSprite reticlule_sprite1
 494+ E3F7 ED 91 34 0C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite1
 494+ E3FB ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 495+ E3FF                                      HideSprite reticlule_sprite2
 495+ E3FF ED 91 34 0D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite2
 495+ E403 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 496+ E407                                      HideSprite reticlule_sprite3
 496+ E407 ED 91 34 0E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite3
 496+ E40B ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 497+ E40F                                      HideSprite reticlule_sprite4
 497+ E40F ED 91 34 0F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite4
 497+ E413 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 498+ E417 C9                                   ret
 499+ E418
 500+ E418              sprite_ecm_hide:        HideSprite ECM_sprite
 500+ E418 ED 91 34 24 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,ECM_sprite
 500+ E41C ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 501+ E420 C9                                   ret
 502+ E421
 503+ E421              sprite_missile_1_hide:  HideSprite missile_sprite1
 503+ E421 ED 91 34 25 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite1
 503+ E425 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 504+ E429 C9                                   ret
 505+ E42A
 506+ E42A              sprite_missile_2_hide:  HideSprite missile_sprite2
 506+ E42A ED 91 34 26 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite2
 506+ E42E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 507+ E432 C9                                   ret
 508+ E433
 509+ E433              sprite_missile_3_hide:  HideSprite missile_sprite3
 509+ E433 ED 91 34 27 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite3
 509+ E437 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 510+ E43B C9                                   ret
 511+ E43C
 512+ E43C              sprite_missile_4_hide:  HideSprite missile_sprite4
 512+ E43C ED 91 34 28 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite4
 512+ E440 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 513+ E444 C9                                   ret
 514+ E445
 515+ E445 CD 21 E4     sprite_missile_all_hide:call  sprite_missile_1_hide
 516+ E448 CD 2A E4                             call  sprite_missile_2_hide
 517+ E44B CD 33 E4                             call  sprite_missile_3_hide
 518+ E44E CD 3C E4                             call  sprite_missile_4_hide
 519+ E451 C9                                   ret
 520+ E452
 521+ E452 3E 22        sprite_targetting:      ld      a,targetting_sprite1                 ; LEFT ARM
 522+ E454 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 523+ E457 3E 7F                                ld      a,TargetetingCentreX1
 524+ E459 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 525+ E45C 3E 78                                ld		a,TargetetingCentreY
 526+ E45E ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 527+ E461 AF                                   xor     a
 528+ E462 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 529+ E465 3E 97                                ld      a,targetting_pattern | %10000000
 530+ E467 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 531+ E46A 3E 23        .right:                 ld      a,targetting_sprite2                ; RIGHT ARM
 532+ E46C ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 533+ E46F 3E AF                                ld      a,TargetetingCentreX2
 534+ E471 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 535+ E474 3E 78                                ld		a,TargetetingCentreY
 536+ E476 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 537+ E479 3E 08                                ld      a,%00001000
 538+ E47B ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 539+ E47E 3E 97                                ld      a,targetting_pattern | %10000000
 540+ E480 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 541+ E483 C9                                   ret
 542+ E484
 543+ E484 3E 22        sprite_lock:            ld      a,targetting_sprite1                 ; LEFT ARM
 544+ E486 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 545+ E489 3E 7F                                ld      a,TargetetingCentreX1
 546+ E48B ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 547+ E48E 3E 78                                ld		a,TargetetingCentreY
 548+ E490 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 549+ E493 AF                                   xor     a
 550+ E494 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 551+ E497 3E 98                                ld      a,lock_pattern | %10000000
 552+ E499 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 553+ E49C 3E 23        .right:                 ld      a,targetting_sprite2                 ; RIGHT ARM
 554+ E49E ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 555+ E4A1 3E AF                                ld      a,TargetetingCentreX2
 556+ E4A3 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 557+ E4A6 3E 78                                ld		a,TargetetingCentreY
 558+ E4A8 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 559+ E4AB 3E 08                                ld      a,%00001000
 560+ E4AD ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 561+ E4B0 3E 98                                ld      a,lock_pattern | %10000000
 562+ E4B2 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 563+ E4B5 C9                                   ret
 564+ E4B6
 565+ E4B6
 566+ E4B6
 567+ E4B6              sprite_targetting_hide: HideSprite targetting_sprite1
 567+ E4B6 ED 91 34 22 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,targetting_sprite1
 567+ E4BA ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 568+ E4BE                                      HideSprite targetting_sprite2
 568+ E4BE ED 91 34 23 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,targetting_sprite2
 568+ E4C2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 569+ E4C6 C9                                   ret
 570+ E4C7
 571+ E4C7              sprite_targetting_show: ShowSprite targetting_sprite1, targetting_pattern
 571+ E4C7 3E 22       >                        ld      a, targetting_sprite1
 571+ E4C9 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 571+ E4CC 3E 97       >                        ld      a,targetting_pattern | %10000000
 571+ E4CE ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 572+ E4D1                                      ShowSprite targetting_sprite2, targetting_pattern
 572+ E4D1 3E 23       >                        ld      a, targetting_sprite2
 572+ E4D3 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 572+ E4D6 3E 97       >                        ld      a,targetting_pattern | %10000000
 572+ E4D8 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 573+ E4DB C9                                   ret
 574+ E4DC
 575+ E4DC              sprite_laser_hide:      HideSprite laser_sprite1
 575+ E4DC ED 91 34 10 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite1
 575+ E4E0 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 576+ E4E4                                      HideSprite laser_sprite2
 576+ E4E4 ED 91 34 11 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite2
 576+ E4E8 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 577+ E4EC                                      HideSprite laser_sprite3
 577+ E4EC ED 91 34 12 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite3
 577+ E4F0 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 578+ E4F4                                      HideSprite laser_sprite4
 578+ E4F4 ED 91 34 13 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite4
 578+ E4F8 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 579+ E4FC                                      HideSprite laser_sprite5
 579+ E4FC ED 91 34 14 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite5
 579+ E500 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 580+ E504                                      HideSprite laser_sprite6
 580+ E504 ED 91 34 15 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite6
 580+ E508 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 581+ E50C                                      HideSprite laser_sprite7
 581+ E50C ED 91 34 16 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite7
 581+ E510 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 582+ E514                                      HideSprite laser_sprite8
 582+ E514 ED 91 34 17 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite8
 582+ E518 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 583+ E51C                                      HideSprite laser_sprite9
 583+ E51C ED 91 34 18 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite9
 583+ E520 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 584+ E524                                      HideSprite laser_sprite10
 584+ E524 ED 91 34 19 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite10
 584+ E528 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 585+ E52C                                      HideSprite laser_sprite11
 585+ E52C ED 91 34 1A >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite11
 585+ E530 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 586+ E534                                      HideSprite laser_sprite12
 586+ E534 ED 91 34 1B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite12
 586+ E538 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 587+ E53C                                      HideSprite laser_sprite13
 587+ E53C ED 91 34 1C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite13
 587+ E540 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 588+ E544                                      HideSprite laser_sprite14
 588+ E544 ED 91 34 1D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite14
 588+ E548 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 589+ E54C                                      HideSprite laser_sprite15
 589+ E54C ED 91 34 1E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite15
 589+ E550 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 590+ E554                                      HideSprite laser_sprite16
 590+ E554 ED 91 34 1F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite16
 590+ E558 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 591+ E55C C9                                   ret
 592+ E55D
 593+ E55D              sprite_compass_hide:    HideSprite compass_sun
 593+ E55D ED 91 34 20 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_sun
 593+ E561 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 594+ E565                                      HideSprite compass_station
 594+ E565 ED 91 34 21 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_station
 594+ E569 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 595+ E56D C9                                   ret
 596+ E56E
 597+ E56E CD A3 E3     sprite_cls_cursors:     call	sprite_galactic_hide
 598+ E571 CD BC E3                             call	sprite_galactic_hyper_hide
 599+ E574 CD C5 E3                             call	sprite_local_hide
 600+ E577 CD DE E3                             call	sprite_local_hyper_hide
 601+ E57A CD F7 E3                             call    sprite_reticule_hide
 602+ E57D CD DC E4                             call    sprite_laser_hide
 603+ E580 CD 5D E5                             call    sprite_compass_hide
 604+ E583 CD B6 E4                             call    sprite_targetting_hide
 605+ E586 CD 45 E4                             call    sprite_missile_all_hide
 606+ E589 C9                                   ret
 607+ E58A
 608+ E58A CD 6E E5     sprite_cls_all:         call    sprite_cls_cursors
 609+ E58D CD 18 E4                             call    sprite_ecm_hide
 610+ E590 CD 45 E4                             call    sprite_missile_all_hide
 611+ E593 C9                                   ret
 612+ E594
 613+ E594 CD 6E E5     init_sprites:           call		sprite_cls_cursors
 614+ E597 ED 91 15 43                          nextreg 	SPRITE_LAYERS_SYSTEM_REGISTER,%01000011
 615+ E59B C9                                   ret
 616+ E59C
 617+ E59C
 618+ E59C              select_sprite_a:        MACRO
 619+ E59C ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 620+ E59C                                      ENDM
 621+ E59C
 622+ E59C              set_sprite_x_low_a:     MACRO
 623+ E59C ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 624+ E59C                                      ENDM
 625+ E59C
 626+ E59C              set_sprite_y_low_a:     MACRO
 627+ E59C ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a
 628+ E59C                                      ENDM
 629+ E59C
 630+ E59C              set_sprite_x_msb_anc:   MACRO
 631+ E59C ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a
 632+ E59C                                      ENDM
 633+ E59C
 634+ E59C              set_sprite_pat_a:       MACRO
 635+ E59C ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 636+ E59C                                      ENDM
 637+ E59C
 638+ E59C              set_sprite_pat_a_nx:    MACRO
 639+ E59C ~                                    and     %10111111
 640+ E59C ~                                    set_sprite_pat_a
 641+ E59C                                      ENDM
 642+ E59C
 643+ E59C              set_sprite_pat_a_vis:   MACRO
 644+ E59C ~                                    or      %10000000
 645+ E59C ~                                    set_sprite_pat_a
 646+ E59C                                      ENDM
 647+ E59C
 648+ E59C              set_sprite_hidden:      MACRO
 649+ E59C ~                                    xor     a
 650+ E59C ~                                    set_sprite_pat_a
 651+ E59C                                      ENDM
 652+ E59C
 653+ E59C              set_sprite_pas_a_vis_nx:MACRO
 654+ E59C ~                                    or      %10000000
 655+ E59C ~                                    set_sprite_pat_a_nx
 656+ E59C                                      ENDM
 657+ E59C
 658+ E59C              set_sprite_extended_a:  MACRO
 659+ E59C ~                                    nextreg	SPRITE_PORT_ATTR4_REGISTER,a
 660+ E59C                                      ENDM
 661+ E59C
 662+ E59C 20           diag_x_pos:             DB 32
 663+ E59D 40           diag_y_pos:             DB 64
 664+ E59E 00           diag_sprite_nbr:        DB 0
 665+ E59F
 666+ E59F 06 40        sprite_diagnostic_clear:ld      b,64
 667+ E5A1 0E 00                                ld      c,0
 668+ E5A3 79           .HideLoop:              ld      a,c
 669+ E5A4                                      HideSprite a
 669+ E5A4 ED 92 34    >                            nextreg		SPRITE_PORT_INDEX_REGISTER,a
 669+ E5A7 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 670+ E5AB 0C                                   inc     c
 671+ E5AC 10 F5                                djnz    .HideLoop
 672+ E5AE C9                                   ret
 673+ E5AF
 674+ E5AF AF           sprite_diagnostic:      xor a
 675+ E5B0 32 9E E5                             ld      (diag_sprite_nbr),a
 676+ E5B3 01 3B 30                             ld      bc,$303B
 677+ E5B6 ED 79                                out     (c),a
 678+ E5B8 01 57 00     .sprite_loop:           ld      bc,SPRITE_INFO_PORT
 679+ E5BB 3A 9C E5                             ld      a,(diag_x_pos)
 680+ E5BE ED 79                                out     (c),a
 681+ E5C0 C6 10                                add     16
 682+ E5C2 32 9C E5                             ld      (diag_x_pos),a
 683+ E5C5 3A 9D E5                             ld      a,(diag_y_pos)
 684+ E5C8 ED 79                                out     (c),a
 685+ E5CA AF                                   xor     a
 686+ E5CB ED 79                                out     (c),a
 687+ E5CD 3A 9E E5                             ld      a,(diag_sprite_nbr)
 688+ E5D0 F6 80                                or      %10000000
 689+ E5D2 E6 BF                                and     %10111111
 690+ E5D4 ED 79                                out     (c),a
 691+ E5D6 3A 9E E5                             ld      a,(diag_sprite_nbr)
 692+ E5D9 3C                                   inc     a
 693+ E5DA 32 9E E5                             ld      (diag_sprite_nbr),a
 694+ E5DD                                      JumpIfALTNusng 14,.sprite_loop
 694+ E5DD FE 0E       >                        cp      14
 694+ E5DF DA B8 E5    >                        jp		c, .sprite_loop
 695+ E5E2 3E 40                                ld      a,64
 696+ E5E4                                      JumpIfALTNusng  25,.cont
 696+ E5E4 FE 19       >                        cp      25
 696+ E5E6 DA EA E5    >                        jp		c, .cont
 697+ E5E9 C9                                   ret
 698+ E5EA 3E 40        .cont:                  ld      a,64
 699+ E5EC 32 9D E5                             ld      (diag_y_pos),a
 700+ E5EF 18 C7                                jr      .sprite_loop
 701+ E5F1 C9                                   ret
 702+ E5F2
 703+ E5F2
 704+ E5F2
# file closed: ./Layer3Sprites/sprite_routines.asm
 777  E5F2                  INCLUDE "./Layer3Sprites/sprite_load.asm"
# file opened: ./Layer3Sprites/sprite_load.asm
   1+ E5F2
   2+ E5F2
   3+ E5F2
   4+ E5F2 00 00 00...  FileWork                DS 10
   5+ E5FC 00           FileNumber:             DB  0
   6+ E5FD
   7+ E5FD 4E 45 53 70  Filename                DB "NESpr"
   7+ E601 72
   8+ E602 30 30        FileNbr                 DB "00"
   9+ E604 2E 64 61 74  Extension:              DB ".dat",0
   9+ E608 00
  10+ E609
  11+ E609
  12+ E609 3A FC E5     FileNbrA:               ld      a,(FileNumber)
  13+ E60C ED 23                                swapnib
  14+ E60E E6 0F                                and     %00001111
  15+ E610 06 30                                ld      b,"0"
  16+ E612 80                                   add     b
  17+ E613 32 02 E6                             ld      (FileNbr),a
  18+ E616 3A FC E5                             ld      a,(FileNumber)
  19+ E619 E6 0F                                and     %00001111
  20+ E61B 80                                   add     b
  21+ E61C 32 03 E6                             ld      (FileNbr+1),a
  22+ E61F C9                                   ret
  23+ E620
  24+ E620 01 3B 30     load_pattern_files:     ld          bc,SPRITE_SLOT_PORT             ; select pattern 0
  25+ E623                                      ZeroA                                       ;
  25+ E623 AF          >                        xor a
  26+ E624 ED 79                                out         (c),a
  27+ E626 3E 01                                ld          a,$01
  28+ E628 32 FC E5                             ld          (FileNumber),a
  29+ E62B 06 1D                                ld          b,29
  30+ E62D C5           .ReadLoop:              push        bc
  31+ E62E CD 09 E6                             call        FileNbrA
  32+ E631 CD 40 E6                             call        load_a_pattern
  33+ E634 3A FC E5                             ld          a,(FileNumber)
  34+ E637 3C                                   inc         a
  35+ E638 27                                   daa
  36+ E639 32 FC E5                             ld          (FileNumber),a
  37+ E63C C1                                   pop         bc
  38+ E63D 10 EE                                djnz        .ReadLoop
  39+ E63F C9                                   ret
  40+ E640                                                   ; write byte 256
  41+ E640
  42+ E640 21 FD E5     load_a_pattern:         ld          hl,Filename
  43+ E643 DD 21 5D E6                          ld          ix,SpriteDatabuffer
  44+ E647 01 00 01                             ld          bc,256
  45+ E64A CD 76 A2                             call        FileLoad
  46+ E64D 1E FF                                ld          e,255
  47+ E64F 01 5B 00     .streamPattern:         ld          bc, SPRITE_PATTERN_UPLOAD_PORT
  48+ E652 21 5D E6                             ld          hl, SpriteDatabuffer
  49+ E655 ED 90        .streamPatternLoop:     outinb                                      ; write byte of pattern
  50+ E657 1D                                   dec         e
  51+ E658 20 FB                                jr          nz, .streamPatternLoop          ; carry on writing for "e" iterations
  52+ E65A ED 90                                outinb
  53+ E65C C9                                   ret
  54+ E65D
  55+ E65D 00 00 00...  SpriteDatabuffer:       DS  256
  56+ E75D
  57+ E75D
# file closed: ./Layer3Sprites/sprite_load.asm
 778  E75D              ;;;***    INCLUDE "./Layer3Sprites/SpriteSheet.asm"
 779  E75D                  DISPLAY "Bank ",BankSPRITE," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankSPRITE"
 780  E75D              ; Bank 61  ------------------------------------------------------------------------------------------------------------------------
 781  E75D                  SLOT    ConsoleImageAddr
 782  E75D                  PAGE    BankConsole
 783  E75D              	ORG     ConsoleImageAddr, BankConsole
 784  E000                  INCLUDE "./Images/ConsoleImageData.asm"
# file opened: ./Images/ConsoleImageData.asm
   1+ E000              ConsoleImageData:
   2+ E000 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$FF,$FF,$FF,$FF,$FF,$FF ; row 1
   2+ E004 FF FF 00 7F
   2+ E008 00 00 00 00
   2+ E00C 00 00 00 00
   2+ E010 00 00 00 00
   2+ E014 00 00 00 00
   2+ E018 7F 00 FF FF
   2+ E01C FF FF FF FF
   3+ E020 9C C3 FF FF      DB $9C,$C3,$FF,$FF,$FF,$FF,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$00,$01
   3+ E024 FF FF 40 08
   3+ E028 01 00 00 00
   3+ E02C 00 00 00 00
   3+ E030 00 00 00 00
   3+ E034 00 00 00 40
   3+ E038 08 01 80 00
   3+ E03C 00 00 00 01
   4+ E040 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$08,$04,$80,$00,$00,$00,$00,$01
   4+ E044 00 01 10 08
   4+ E048 04 00 00 00
   4+ E04C 00 00 00 00
   4+ E050 00 00 00 00
   4+ E054 00 00 00 10
   4+ E058 08 04 80 00
   4+ E05C 00 00 00 01
   5+ E060 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
   5+ E064 00 01 00 00
   5+ E068 00 00 00 00
   5+ E06C 00 00 00 00
   5+ E070 00 00 00 00
   5+ E074 00 00 00 00
   5+ E078 00 00 80 00
   5+ E07C 00 00 00 01
   6+ E080 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$07,$82,$00,$08,$06,$20,$01,$80,$04,$60,$10,$00,$41,$E0,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   6+ E084 00 01 00 00
   6+ E088 00 07 82 00
   6+ E08C 08 06 20 01
   6+ E090 80 04 60 10
   6+ E094 00 41 E0 00
   6+ E098 00 00 FF FF
   6+ E09C FF FF FF FF
   7+ E0A0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$30,$00,$08,$00,$04,$00,$61,$86,$00,$20,$00,$10,$00,$0C,$00,$60,$00,$FF,$FF,$FF,$FF,$FF,$FF
   7+ E0A4 00 01 00 06
   7+ E0A8 00 30 00 08
   7+ E0AC 00 04 00 61
   7+ E0B0 86 00 20 00
   7+ E0B4 10 00 0C 00
   7+ E0B8 60 00 FF FF
   7+ E0BC FF FF FF FF
   8+ E0C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$0F,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$55,$55,$55,$F0,$00,$FF,$FF,$FF,$FF,$FF,$FF
   8+ E0C4 00 01 00 0F
   8+ E0C8 AA AA AA AA
   8+ E0CC AA AA AA AA
   8+ E0D0 55 55 55 55
   8+ E0D4 55 55 55 55
   8+ E0D8 F0 00 FF FF
   8+ E0DC FF FF FF FF
   9+ E0E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$1E,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$78,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   9+ E0E4 FF FF 00 00
   9+ E0E8 00 1E 00 00
   9+ E0EC 08 00 00 01
   9+ E0F0 80 00 00 10
   9+ E0F4 00 00 78 00
   9+ E0F8 00 00 FF FF
   9+ E0FC FF FF FF FF
  10+ E100 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$01,$C9,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$C9,$C0,$80,$00,$00,$00,$00,$01 ; row 2
  10+ E104 00 01 01 C9
  10+ E108 C0 00 00 00
  10+ E10C 00 00 00 00
  10+ E110 00 00 00 00
  10+ E114 00 00 00 01
  10+ E118 C9 C0 80 00
  10+ E11C 00 00 00 01
  11+ E120 B2 C3 92 49      DB $B2,$C3,$92,$49,$24,$93,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$39
  11+ E124 24 93 40 08
  11+ E128 01 00 00 00
  11+ E12C 00 00 00 00
  11+ E130 00 00 00 00
  11+ E134 00 00 00 40
  11+ E138 08 01 80 00
  11+ E13C 00 00 7C 39
  12+ E140 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$00,$0C,$80,$00,$00,$00,$7C,$61
  12+ E144 00 01 18 00
  12+ E148 0C 00 00 00
  12+ E14C 00 00 00 00
  12+ E150 00 00 00 00
  12+ E154 00 00 00 18
  12+ E158 00 0C 80 00
  12+ E15C 00 00 7C 61
  13+ E160 9C 7E 00 00      DB $9C,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  13+ E164 00 01 00 00
  13+ E168 00 00 00 00
  13+ E16C 00 00 00 00
  13+ E170 00 00 00 00
  13+ E174 00 00 00 00
  13+ E178 00 00 80 00
  13+ E17C 00 00 00 01
  14+ E180 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$38,$04,$00,$10,$01,$40,$01,$80,$06,$80,$08,$00,$20,$1C,$00,$00,$00,$80,$00,$00,$00,$00,$81
  14+ E184 00 01 00 00
  14+ E188 00 38 04 00
  14+ E18C 10 01 40 01
  14+ E190 80 06 80 08
  14+ E194 00 20 1C 00
  14+ E198 00 00 80 00
  14+ E19C 00 00 00 81
  15+ E1A0 9C 30 00 00      DB $9C,$30,$00,$00,$00,$01,$00,$0C,$00,$40,$00,$10,$00,$04,$00,$11,$88,$00,$20,$00,$08,$00,$02,$00,$30,$00,$80,$00,$00,$00,$00,$81
  15+ E1A4 00 01 00 0C
  15+ E1A8 00 40 00 10
  15+ E1AC 00 04 00 11
  15+ E1B0 88 00 20 00
  15+ E1B4 08 00 02 00
  15+ E1B8 30 00 80 00
  15+ E1BC 00 00 00 81
  16+ E1C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$00,$10,$00,$00,$80,$00,$01,$80,$00,$01,$00,$00,$08,$00,$00,$60,$00,$80,$00,$00,$00,$00,$81
  16+ E1C4 00 01 00 06
  16+ E1C8 00 00 10 00
  16+ E1CC 00 80 00 01
  16+ E1D0 80 00 01 00
  16+ E1D4 00 08 00 00
  16+ E1D8 60 00 80 00
  16+ E1DC 00 00 00 81
  17+ E1E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$01,$E0,$00,$10,$00,$00,$01,$80,$00,$00,$08,$00,$07,$80,$00,$00,$00,$80,$00,$00,$00,$00,$81
  17+ E1E4 00 01 00 00
  17+ E1E8 00 01 E0 00
  17+ E1EC 10 00 00 01
  17+ E1F0 80 00 00 08
  17+ E1F4 00 07 80 00
  17+ E1F8 00 00 80 00
  17+ E1FC 00 00 00 81
  18+ E200 BE 3C 00 00      DB $BE,$3C,$00,$00,$00,$01,$06,$08,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$38,$80,$00,$00,$00,$3C,$79 ; row 3
  18+ E204 00 01 06 08
  18+ E208 38 00 00 00
  18+ E20C 00 00 00 00
  18+ E210 00 00 00 00
  18+ E214 00 00 00 06
  18+ E218 08 38 80 00
  18+ E21C 00 00 3C 79
  19+ E220 B2 C3 80 01      DB $B2,$C3,$80,$01,$00,$03,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$80,$00,$00,$00,$62,$65
  19+ E224 00 03 55 55
  19+ E228 55 00 00 00
  19+ E22C 00 00 00 00
  19+ E230 00 00 00 00
  19+ E234 00 00 00 55
  19+ E238 55 55 80 00
  19+ E23C 00 00 62 65
  20+ E240 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$0C,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$08,$18,$80,$00,$00,$00,$66,$61
  20+ E244 00 01 0C 08
  20+ E248 18 00 00 00
  20+ E24C 00 00 00 00
  20+ E250 00 00 00 00
  20+ E254 00 00 00 0C
  20+ E258 08 18 80 00
  20+ E25C 00 00 66 61
  21+ E260 B2 18 00 00      DB $B2,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  21+ E264 00 01 00 00
  21+ E268 00 00 00 00
  21+ E26C 00 00 00 00
  21+ E270 00 00 00 00
  21+ E274 00 00 00 00
  21+ E278 00 00 80 00
  21+ E27C 00 00 00 01
  22+ E280 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$01,$CA,$BA,$AA,$AA,$AA,$EA,$AA,$55,$57,$55,$55,$55,$5D,$53,$80,$00,$00,$80,$00,$00,$00,$00,$99
  22+ E284 00 01 00 00
  22+ E288 01 CA BA AA
  22+ E28C AA AA EA AA
  22+ E290 55 57 55 55
  22+ E294 55 5D 53 80
  22+ E298 00 00 80 00
  22+ E29C 00 00 00 99
  23+ E2A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$08,$01,$80,$00,$20,$00,$08,$00,$05,$A0,$00,$10,$00,$04,$00,$01,$80,$10,$00,$80,$00,$00,$00,$00,$B9
  23+ E2A4 00 01 00 08
  23+ E2A8 01 80 00 20
  23+ E2AC 00 08 00 05
  23+ E2B0 A0 00 10 00
  23+ E2B4 04 00 01 80
  23+ E2B8 10 00 80 00
  23+ E2BC 00 00 00 B9
  24+ E2C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$01,$00,$00,$20,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$04,$00,$00,$80,$00,$80,$00,$00,$00,$00,$B9
  24+ E2C4 00 01 00 01
  24+ E2C8 00 00 20 00
  24+ E2CC 01 00 00 01
  24+ E2D0 80 00 00 80
  24+ E2D4 00 04 00 00
  24+ E2D8 80 00 80 00
  24+ E2DC 00 00 00 B9
  25+ E2E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$1F,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$F8,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  25+ E2E4 00 01 00 00
  25+ E2E8 00 00 1F AA
  25+ E2EC AA AA AA AA
  25+ E2F0 55 55 55 55
  25+ E2F4 55 F8 00 00
  25+ E2F8 00 00 80 00
  25+ E2FC 00 00 00 A9
  26+ E300 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$0E,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$08,$18,$80,$00,$00,$00,$60,$65 ; row 4
  26+ E304 00 01 0E 08
  26+ E308 18 00 00 00
  26+ E30C 00 00 00 00
  26+ E310 00 00 00 00
  26+ E314 00 00 00 0E
  26+ E318 08 18 80 00
  26+ E31C 00 00 60 65
  27+ E320 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$62,$61
  27+ E324 00 01 40 08
  27+ E328 01 00 00 00
  27+ E32C 00 00 00 00
  27+ E330 00 00 00 00
  27+ E334 00 00 00 40
  27+ E338 08 01 80 00
  27+ E33C 00 00 62 61
  28+ E340 BC 66 00 00      DB $BC,$66,$00,$00,$00,$01,$03,$00,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$60,$80,$00,$00,$00,$66,$61
  28+ E344 00 01 03 00
  28+ E348 60 00 00 00
  28+ E34C 00 00 00 00
  28+ E350 00 00 00 00
  28+ E354 00 00 00 03
  28+ E358 00 60 80 00
  28+ E35C 00 00 66 61
  29+ E360 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  29+ E364 00 01 00 00
  29+ E368 00 00 00 00
  29+ E36C 00 0F FF FF
  29+ E370 FF FF F0 00
  29+ E374 00 00 00 00
  29+ E378 00 00 80 00
  29+ E37C 00 00 00 01
  30+ E380 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$06,$00,$20,$00,$40,$00,$A0,$01,$80,$05,$00,$02,$00,$04,$00,$60,$00,$00,$80,$00,$00,$00,$00,$B9
  30+ E384 00 01 00 00
  30+ E388 06 00 20 00
  30+ E38C 40 00 A0 01
  30+ E390 80 05 00 02
  30+ E394 00 04 00 60
  30+ E398 00 00 80 00
  30+ E39C 00 00 00 B9
  31+ E3A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$1A,$AA,$AA,$AA,$EA,$AA,$BA,$AA,$AB,$D5,$55,$5D,$55,$57,$55,$55,$55,$58,$00,$80,$00,$00,$00,$00,$85
  31+ E3A4 00 01 00 1A
  31+ E3A8 AA AA AA EA
  31+ E3AC AA BA AA AB
  31+ E3B0 D5 55 5D 55
  31+ E3B4 57 55 55 55
  31+ E3B8 58 00 80 00
  31+ E3BC 00 00 00 85
  32+ E3C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$C0,$00,$40,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$02,$00,$03,$00,$00,$80,$00,$00,$00,$00,$85
  32+ E3C4 00 01 00 00
  32+ E3C8 C0 00 40 00
  32+ E3CC 01 00 00 01
  32+ E3D0 80 00 00 80
  32+ E3D4 00 02 00 03
  32+ E3D8 00 00 80 00
  32+ E3DC 00 00 00 85
  33+ E3E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$FC,$20,$00,$00,$01,$80,$00,$00,$04,$3F,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  33+ E3E4 00 01 00 00
  33+ E3E8 00 00 00 FC
  33+ E3EC 20 00 00 01
  33+ E3F0 80 00 00 04
  33+ E3F4 3F 00 00 00
  33+ E3F8 00 00 80 00
  33+ E3FC 00 00 00 A9
  34+ E400 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$08,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$08,$0C,$80,$00,$00,$00,$3C,$65 ; row 5
  34+ E404 00 01 18 08
  34+ E408 0C 00 00 00
  34+ E40C 00 00 00 00
  34+ E410 00 00 00 00
  34+ E414 00 00 00 18
  34+ E418 08 0C 80 00
  34+ E41C 00 00 3C 65
  35+ E420 B2 7E 00 00      DB $B2,$7E,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$61
  35+ E424 00 01 40 08
  35+ E428 01 00 00 00
  35+ E42C 00 00 00 00
  35+ E430 00 00 00 00
  35+ E434 00 00 00 40
  35+ E438 08 01 80 00
  35+ E43C 00 00 7C 61
  36+ E440 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$80,$00,$00,$00,$66,$61
  36+ E444 00 01 00 FF
  36+ E448 80 00 00 00
  36+ E44C 00 00 00 00
  36+ E450 00 00 00 00
  36+ E454 00 00 00 00
  36+ E458 FF 80 80 00
  36+ E45C 00 00 66 61
  37+ E460 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$3F,$F0,$08,$01,$80,$10,$0F,$FC,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  37+ E464 00 01 00 00
  37+ E468 00 00 00 00
  37+ E46C 3F F0 08 01
  37+ E470 80 10 0F FC
  37+ E474 00 00 00 00
  37+ E478 00 00 80 00
  37+ E47C 00 00 00 01
  38+ E480 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$18,$00,$C0,$00,$80,$00,$18,$01,$80,$18,$00,$01,$00,$03,$00,$18,$00,$00,$80,$00,$00,$00,$00,$99
  38+ E484 00 01 00 00
  38+ E488 18 00 C0 00
  38+ E48C 80 00 18 01
  38+ E490 80 18 00 01
  38+ E494 00 03 00 18
  38+ E498 00 00 80 00
  38+ E49C 00 00 00 99
  39+ E4A0 BE 30 00 00      DB $BE,$30,$00,$00,$00,$01,$00,$10,$0C,$00,$00,$80,$00,$10,$00,$01,$80,$00,$08,$00,$01,$00,$00,$30,$08,$00,$80,$00,$00,$00,$00,$BD
  39+ E4A4 00 01 00 10
  39+ E4A8 0C 00 00 80
  39+ E4AC 00 10 00 01
  39+ E4B0 80 00 08 00
  39+ E4B4 01 00 00 30
  39+ E4B8 08 00 80 00
  39+ E4BC 00 00 00 BD
  40+ E4C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$30,$00,$80,$00,$02,$00,$00,$01,$80,$00,$00,$40,$00,$01,$00,$0C,$00,$00,$80,$00,$00,$00,$00,$BD
  40+ E4C4 00 01 00 00
  40+ E4C8 30 00 80 00
  40+ E4CC 02 00 00 01
  40+ E4D0 80 00 00 40
  40+ E4D4 00 01 00 0C
  40+ E4D8 00 00 80 00
  40+ E4DC 00 00 00 BD
  41+ E4E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$03,$FC,$00,$00,$01,$80,$00,$00,$3F,$C0,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$BD
  41+ E4E4 00 01 00 00
  41+ E4E8 00 00 00 03
  41+ E4EC FC 00 00 01
  41+ E4F0 80 00 00 3F
  41+ E4F4 C0 00 00 00
  41+ E4F8 00 00 80 00
  41+ E4FC 00 00 00 BD
  42+ E500 B0 C3 80 01      DB $B0,$C3,$80,$01,$00,$03,$30,$08,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$08,$06,$C0,$00,$80,$01,$06,$7D ; row 6
  42+ E504 00 03 30 08
  42+ E508 06 00 00 00
  42+ E50C 00 00 00 00
  42+ E510 00 00 00 00
  42+ E514 00 00 00 30
  42+ E518 08 06 C0 00
  42+ E51C 80 01 06 7D
  43+ E520 B2 3C 00 00      DB $B2,$3C,$00,$00,$00,$01,$40,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$01,$C0,$00,$80,$01,$66,$65
  43+ E524 00 01 40 00
  43+ E528 01 00 00 00
  43+ E52C 00 00 00 00
  43+ E530 00 00 00 00
  43+ E534 00 00 00 40
  43+ E538 00 01 C0 00
  43+ E53C 80 01 66 65
  44+ E540 B0 66 80 01      DB $B0,$66,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$80,$01,$66,$61
  44+ E544 00 03 00 00
  44+ E548 00 00 00 00
  44+ E54C 00 00 00 00
  44+ E550 00 00 00 00
  44+ E554 00 00 00 00
  44+ E558 00 00 C0 00
  44+ E55C 80 01 66 61
  45+ E560 B2 18 80 01      DB $B2,$18,$80,$01,$00,$03,$00,$00,$00,$00,$00,$1F,$C1,$AA,$AA,$AA,$55,$55,$57,$83,$F8,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  45+ E564 00 03 00 00
  45+ E568 00 00 00 1F
  45+ E56C C1 AA AA AA
  45+ E570 55 55 57 83
  45+ E574 F8 00 00 00
  45+ E578 00 00 80 00
  45+ E57C 00 00 00 01
  46+ E580 B0 18 80 01      DB $B0,$18,$80,$01,$00,$03,$00,$00,$60,$01,$00,$01,$00,$01,$04,$01,$80,$20,$80,$00,$80,$00,$80,$06,$00,$00,$80,$00,$00,$00,$00,$99
  46+ E584 00 03 00 00
  46+ E588 60 01 00 01
  46+ E58C 00 01 04 01
  46+ E590 80 20 80 00
  46+ E594 80 00 80 06
  46+ E598 00 00 80 00
  46+ E59C 00 00 00 99
  47+ E5A0 B2 30 80 01      DB $B2,$30,$80,$01,$00,$03,$00,$10,$18,$00,$01,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$80,$00,$18,$08,$00,$80,$00,$00,$00,$00,$A1
  47+ E5A4 00 03 00 10
  47+ E5A8 18 00 01 00
  47+ E5AC 00 20 00 01
  47+ E5B0 80 00 04 00
  47+ E5B4 00 80 00 18
  47+ E5B8 08 00 80 00
  47+ E5BC 00 00 00 A1
  48+ E5C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$0E,$AB,$AA,$AA,$AE,$AA,$AA,$AA,$55,$55,$55,$75,$55,$55,$D5,$70,$00,$00,$80,$00,$00,$00,$00,$85
  48+ E5C4 00 01 00 00
  48+ E5C8 0E AB AA AA
  48+ E5CC AE AA AA AA
  48+ E5D0 55 55 55 75
  48+ E5D4 55 55 D5 70
  48+ E5D8 00 00 80 00
  48+ E5DC 00 00 00 85
  49+ E5E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$03,$FF,$F0,$01,$80,$0F,$FF,$C0,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  49+ E5E4 00 01 00 00
  49+ E5E8 00 00 00 00
  49+ E5EC 03 FF F0 01
  49+ E5F0 80 0F FF C0
  49+ E5F4 00 00 00 00
  49+ E5F8 00 00 80 00
  49+ E5FC 00 00 00 89
  50+ E600 B0 C3 92 49      DB $B0,$C3,$92,$49,$24,$93,$20,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$08,$02,$C9,$24,$92,$49,$3C,$61 ; row 7
  50+ E604 24 93 20 08
  50+ E608 02 00 00 00
  50+ E60C 00 00 00 00
  50+ E610 00 00 00 00
  50+ E614 00 00 00 20
  50+ E618 08 02 C9 24
  50+ E61C 92 49 3C 61
  51+ E620 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$60,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$02,$C9,$24,$92,$49,$66,$39
  51+ E624 00 01 60 08
  51+ E628 02 00 00 00
  51+ E62C 00 00 00 00
  51+ E630 00 00 00 00
  51+ E634 00 00 00 60
  51+ E638 08 02 C9 24
  51+ E63C 92 49 66 39
  52+ E640 B0 3C 92 49      DB $B0,$3C,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$24,$92,$49,$7C,$7D
  52+ E644 24 93 00 00
  52+ E648 00 00 00 00
  52+ E64C 00 00 00 00
  52+ E650 00 00 00 00
  52+ E654 00 00 00 00
  52+ E658 00 00 C9 24
  52+ E65C 92 49 7C 7D
  53+ E660 9C 18 92 49      DB $9C,$18,$92,$49,$24,$93,$00,$00,$00,$00,$03,$E0,$02,$60,$10,$01,$80,$08,$06,$40,$07,$E0,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  53+ E664 24 93 00 00
  53+ E668 00 00 03 E0
  53+ E66C 02 60 10 01
  53+ E670 80 08 06 40
  53+ E674 07 E0 00 00
  53+ E678 00 00 80 00
  53+ E67C 00 00 00 01
  54+ E680 BE 18 92 49      DB $BE,$18,$92,$49,$24,$93,$00,$01,$AA,$AE,$AA,$AA,$AA,$AA,$AB,$AA,$55,$D5,$55,$55,$55,$55,$75,$55,$80,$00,$80,$00,$00,$00,$00,$99
  54+ E684 24 93 00 01
  54+ E688 AA AE AA AA
  54+ E68C AA AA AB AA
  54+ E690 55 D5 55 55
  54+ E694 55 55 75 55
  54+ E698 80 00 80 00
  54+ E69C 00 00 00 99
  55+ E6A0 B2 3E 92 49      DB $B2,$3E,$92,$49,$24,$93,$00,$10,$60,$00,$02,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$40,$00,$06,$08,$00,$80,$00,$00,$00,$00,$BD
  55+ E6A4 24 93 00 10
  55+ E6A8 60 00 02 00
  55+ E6AC 00 20 00 01
  55+ E6B0 80 00 04 00
  55+ E6B4 00 40 00 06
  55+ E6B8 08 00 80 00
  55+ E6BC 00 00 00 BD
  56+ E6C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$03,$02,$00,$00,$04,$00,$00,$01,$80,$00,$00,$20,$00,$00,$00,$C0,$00,$00,$80,$00,$00,$00,$00,$B9
  56+ E6C4 00 01 00 00
  56+ E6C8 03 02 00 00
  56+ E6CC 04 00 00 01
  56+ E6D0 80 00 00 20
  56+ E6D4 00 00 00 C0
  56+ E6D8 00 00 80 00
  56+ E6DC 00 00 00 B9
  57+ E6E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  57+ E6E4 00 01 00 00
  57+ E6E8 00 00 00 00
  57+ E6EC 00 00 0F FF
  57+ E6F0 FF F0 00 00
  57+ E6F4 00 00 00 00
  57+ E6F8 00 00 80 00
  57+ E6FC 00 00 00 89
  58+ E700 80 C3 FF FF      DB $80,$C3,$FF,$FF,$FF,$FF,$60,$08,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$03,$FF,$FF,$FF,$FF,$00,$61 ; row 8
  58+ E704 FF FF 60 08
  58+ E708 03 00 00 00
  58+ E70C 00 00 00 00
  58+ E710 00 00 00 00
  58+ E714 00 00 00 60
  58+ E718 08 03 FF FF
  58+ E71C FF FF 00 61
  59+ E720 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$20,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$02,$FF,$FF,$FF,$FF,$00,$01
  59+ E724 FF FF 20 00
  59+ E728 02 00 00 00
  59+ E72C 00 00 00 00
  59+ E730 00 00 00 00
  59+ E734 00 00 00 20
  59+ E738 00 02 FF FF
  59+ E73C FF FF 00 01
  60+ E740 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$01
  60+ E744 FF FF 00 00
  60+ E748 00 00 00 00
  60+ E74C 00 00 00 00
  60+ E750 00 00 00 00
  60+ E754 00 00 00 00
  60+ E758 00 00 FF FF
  60+ E75C FF FF 00 01
  61+ E760 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$7D,$8A,$AE,$BA,$AA,$AA,$55,$55,$5D,$75,$51,$BE,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  61+ E764 FF FF 00 00
  61+ E768 00 00 7D 8A
  61+ E76C AE BA AA AA
  61+ E770 55 55 5D 75
  61+ E774 51 BE 00 00
  61+ E778 00 00 80 00
  61+ E77C 00 00 00 01
  62+ E780 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$03,$00,$08,$00,$04,$00,$02,$00,$81,$81,$00,$40,$00,$20,$00,$10,$00,$C0,$00,$FF,$FF,$FF,$FF,$FF,$FF
  62+ E784 FF FF 00 03
  62+ E788 00 08 00 04
  62+ E78C 00 02 00 81
  62+ E790 81 00 40 00
  62+ E794 20 00 10 00
  62+ E798 C0 00 FF FF
  62+ E79C FF FF FF FF
  63+ E7A0 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$08,$C0,$00,$04,$00,$00,$40,$00,$01,$80,$00,$02,$00,$00,$20,$00,$03,$10,$00,$FF,$FF,$FF,$FF,$FF,$FF
  63+ E7A4 FF FF 00 08
  63+ E7A8 C0 00 04 00
  63+ E7AC 00 40 00 01
  63+ E7B0 80 00 02 00
  63+ E7B4 00 20 00 03
  63+ E7B8 10 00 FF FF
  63+ E7BC FF FF FF FF
  64+ E7C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$E4,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$27,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  64+ E7C4 00 01 00 00
  64+ E7C8 00 E4 00 00
  64+ E7CC 08 00 00 01
  64+ E7D0 80 00 00 10
  64+ E7D4 00 00 27 00
  64+ E7D8 00 00 FF FF
  64+ E7DC FF FF FF FF
  65+ E7E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  65+ E7E4 00 01 00 00
  65+ E7E8 00 00 00 00
  65+ E7EC 00 00 00 00
  65+ E7F0 00 00 00 00
  65+ E7F4 00 00 00 00
  65+ E7F8 00 00 FF FF
  65+ E7FC FF FF FF FF
  66+ E800              ConsoleAttributes:
  67+ E800 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  67+ E804 07 07 45 45
  67+ E808 45 00 00 00
  67+ E80C 00 00 00 00
  67+ E810 00 00 00 00
  67+ E814 00 00 00 41
  67+ E818 41 41 07 07
  67+ E81C 07 07 07 07
  68+ E820 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$05,$45,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$41,$01,$07,$07,$07,$07,$07,$07
  68+ E824 07 07 05 45
  68+ E828 05 00 00 00
  68+ E82C 00 00 00 00
  68+ E830 00 00 00 00
  68+ E834 00 00 00 01
  68+ E838 41 01 07 07
  68+ E83C 07 07 07 07
  69+ E840 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  69+ E844 07 07 45 45
  69+ E848 45 00 00 00
  69+ E84C 00 00 00 00
  69+ E850 00 00 00 00
  69+ E854 00 00 00 41
  69+ E858 41 41 07 07
  69+ E85C 07 07 07 07
  70+ E860 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00,$00,$00,$00,$07,$00,$00,$00,$00,$07
  70+ E864 07 07 00 00
  70+ E868 00 00 42 42
  70+ E86C 42 42 42 42
  70+ E870 42 42 42 42
  70+ E874 42 42 00 00
  70+ E878 00 00 07 00
  70+ E87C 00 00 00 07
  71+ E880 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$02,$00,$07,$07,$07,$07,$07,$07
  71+ E884 07 07 00 02
  71+ E888 42 42 42 42
  71+ E88C 42 42 42 42
  71+ E890 42 42 42 42
  71+ E894 42 42 42 42
  71+ E898 02 00 07 07
  71+ E89C 07 07 07 07
  72+ E8A0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  72+ E8A4 07 07 00 02
  72+ E8A8 02 02 02 02
  72+ E8AC 02 02 02 02
  72+ E8B0 02 02 02 02
  72+ E8B4 02 02 02 02
  72+ E8B8 02 00 07 07
  72+ E8BC 07 07 07 07
  73+ E8C0 07 00 00 00      DB $07,$00,$00,$00,$00,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  73+ E8C4 00 07 00 02
  73+ E8C8 02 02 02 02
  73+ E8CC 02 02 02 02
  73+ E8D0 02 02 02 02
  73+ E8D4 02 02 02 02
  73+ E8D8 02 00 07 07
  73+ E8DC 07 07 07 07
  74+ E8E0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$07,$07,$07,$07,$07,$07
  74+ E8E4 07 07 00 00
  74+ E8E8 00 02 02 02
  74+ E8EC 02 02 02 02
  74+ E8F0 02 02 02 02
  74+ E8F4 02 02 02 00
  74+ E8F8 00 00 07 07
  74+ E8FC 07 07 07 07
  75+ E900
  76+ E900
# file closed: ./Images/ConsoleImageData.asm
 785  E900                  DISPLAY "Bank ",BankConsole," - Bytes free ",/D, $2000 - ($-ConsoleImageAddr), " - BankConsole"
 786  E900              ; Bank 62  ------------------------------------------------------------------------------------------------------------------------
 787  E900                  SLOT    ViewFrontAddr
 788  E900                  PAGE    BankFrontView
 789  E900                  ORG     ViewFrontAddr
 790  C000                  INCLUDE "./Views/Front_View.asm"
# file opened: ./Views/Front_View.asm
   1+ C000 46 72 6F 6E  front_page_page_marker  DB "FrontView   PG62"
   1+ C004 74 56 69 65
   1+ C008 77 20 20 20
   1+ C00C 50 47 36 32
   2+ C010
   3+ C010 47           draw_front_calc_alpha:  ld      b,a
   4+ C011 E6 80                                and     $80
   5+ C013 32 29 80                             ld      (ALP2),a                            ; set sign
   6+ C016 4F                                   ld      c,a                                 ; save sign
   7+ C017 EE 80                                xor     $80
   8+ C019 32 2A 80                             ld      (ALP2FLIP),a                        ; and oppsite sign
   9+ C01C 3A 25 80                             ld      a,(JSTX)
  10+ C01F ED 27 80                             test    $80
  11+ C022 28 02                                jr      z,  .PositiveRoll
  12+ C024 ED 44        .NegativeRoll:          neg
  13+ C026 CB 3F        .PositiveRoll           srl     a                                   ; divide sign by 4
  14+ C028 CB 3F                                srl     a
  15+ C02A FE 08                                cp      8
  16+ C02C 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  17+ C02E CB 3F        .IncreasedDamp          srl     a
  18+ C030 32 28 80     .NotIncreasedDamp:      ld      (ALP1),a
  19+ C033 B1                                   or      c
  20+ C034 32 27 80                             ld      (ALPHA),a                           ; a = signed bit alph1
  21+ C037 21 E2 C2     .RestartDampenRoll:     ld      hl,dampenRcounter
  22+ C03A 36 04                                ld      (hl),dampenRate
  23+ C03C C9                                   ret
  24+ C03D
  25+ C03D              ; Do the same for pitch
  26+ C03D 47           draw_front_calc_beta:   ld      b,a
  27+ C03E E6 80                                and     $80
  28+ C040 32 1D 80                             ld      (BET2),a                            ; set sign
  29+ C043 4F                                   ld      c,a                                 ; save sign
  30+ C044 EE 80                                xor     $80
  31+ C046 32 1E 80                             ld      (BET2FLIP),a                        ; and oppsite sign
  32+ C049 3A 1B 80                             ld      a,(JSTY)
  33+ C04C ED 27 80                             test    $80
  34+ C04F 28 02                                jr      z,  .PositivePitch
  35+ C051 ED 44        .NegativePitch:         neg
  36+ C053 CB 3F        .PositivePitch:         srl     a                                   ; divide sign by 4
  37+ C055 CB 3F                                srl     a
  38+ C057 FE 08                                cp      8
  39+ C059 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  40+ C05B CB 3F        .IncreasedDamp          srl     a
  41+ C05D 32 1C 80     .NotIncreasedDamp:      ld      (BET1),a
  42+ C060 B1                                   or      c
  43+ C061 32 1A 80                             ld      (BETA),a                            ; a = signed bit bet1
  44+ C064 21 E3 C2     .RestartDampenPitch:    ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
  45+ C067 36 04                                ld      (hl),dampenRate
  46+ C069 C9                                   ret
  47+ C06A
  48+ C06A              initialise_front_view:
  49+ C06A
  50+ C06A              draw_front_view:        MMUSelectLayer1
  50+ C06A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ C06E CD 80 E0                             call    l1_cls
  52+ C071 CD 9A E0                             call    l1_attr_cls
  53+ C074                                      MMUSelectLayer2
  53+ C074 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  54+ C078 CD 03 E0                             call     asm_l2_double_buffer_on
  55+ C07B                                      MMUSelectSpriteBank
  55+ C07B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  56+ C07F CD 6E E5                             call    sprite_cls_cursors
  57+ C082 CD 6C E1                             call    sprite_reticule
  58+ C085 CD 48 E2                             call    sprite_laser
  59+ C088 CD 52 E4                             call    sprite_targetting
  60+ C08B CD 84 E4                             call    sprite_lock
  61+ C08E CD B6 E4                             call    sprite_targetting_hide      ; do not show targeting initially
  62+ C091 CD 29 E1                             call    sprite_ECM
  63+ C094 CD 50 E1                             call    sprite_missile_1
  64+ C097 CD 57 E1                             call    sprite_missile_2
  65+ C09A CD 5E E1                             call    sprite_missile_3
  66+ C09D CD 65 E1                             call    sprite_missile_4
  67+ C0A0 CD 18 E4                             call    sprite_ecm_hide
  68+ C0A3 CD 45 E4                             call    sprite_missile_all_hide
  69+ C0A6                                     ; call    sprite_laser_show
  70+ C0A6                                      MMUSelectConsoleBank
  70+ C0A6 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  71+ C0AA 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  72+ C0AD 11 00 E0                             ld          de,ConsoleImageData
  73+ C0B0 01 00 08                             ld          bc, ScreenL1BottomLen
  74+ C0B3 CD C9 7C                             call        memcopy_dma
  75+ C0B6 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  76+ C0B9 11 00 E8                             ld          de,ConsoleAttributes
  77+ C0BC 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  78+ C0BF CD C9 7C                             call        memcopy_dma
  79+ C0C2 CD 98 7A                             call        InitialiseStars
  80+ C0C5 AF                                   xor         a
  81+ C0C6 32 22 81                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
  82+ C0C9 32 D0 C0                             ld          (CurrentLock),a             ; we are on no targetting sprites
  83+ C0CC 32 D1 C0                             ld          (ShowingLock),a
  84+ C0CF C9                                   ret
  85+ C0D0
  86+ C0D0 00           CurrentLock             DB      0
  87+ C0D1 00           ShowingLock             DB      0
  88+ C0D2 3A 13 84     update_front_view:      ld      a,(MissileTargettingFlag)
  89+ C0D5                                      JumpIfANEquNusng StageMissileNoTarget,  .NoTarget
  89+ C0D5 FE FF       >                        cp     StageMissileNoTarget
  89+ C0D7 CA E7 C0    >                        jp     z,.NoTarget
  90+ C0DA                                      JumpIfANEquNusng StageMissileTargeting, .Targetting
  90+ C0DA FE FE       >                        cp     StageMissileTargeting
  90+ C0DC CA F4 C0    >                        jp     z,.Targetting
  91+ C0DF CB 7F                                bit     7,a
  92+ C0E1 20 26                                jr      nz, .Locked
  93+ C0E3 CD B6 E4                             call    sprite_targetting_hide
  94+ C0E6 C9                                   ret
  95+ C0E7 3A D1 C0     .NoTarget:              ld      a,(ShowingLock)
  96+ C0EA                                      ReturnIfAIsZero
  96+ C0EA A7          >                        and     a
  96+ C0EB C8          >                        ret     z
  97+ C0EC                                      MMUSelectSpriteBank
  97+ C0EC ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  98+ C0F0 CD B6 E4                             call     sprite_targetting_hide
  99+ C0F3 C9                                   ret
 100+ C0F4              .Targetting:            CallIfMemZero CurrentLock, sprite_targetting
 100+ C0F4 3A D0 C0    >                        ld      a,(CurrentLock)
 100+ C0F7 A7          >                        and     a
 100+ C0F8 CC 52 E4    >                        call    z, sprite_targetting
 101+ C0FB                                      CallIfMemZero ShowingLock, sprite_targetting_show
 101+ C0FB 3A D1 C0    >                        ld      a,(ShowingLock)
 101+ C0FE A7          >                        and     a
 101+ C0FF CC C7 E4    >                        call    z, sprite_targetting_show
 102+ C102 21 00 01                             ld      hl,$0100                        ; set both bytes in one go
 103+ C105 22 D0 C0                             ld      (CurrentLock),hl
 104+ C108 C9                                   ret
 105+ C109              .Locked:                CallIfMemNotZero CurrentLock, sprite_lock
 105+ C109 3A D0 C0    >                        ld      a,(CurrentLock)
 105+ C10C A7          >                        and     a
 105+ C10D C4 84 E4    >                        call    nz, sprite_lock
 106+ C110                                      CallIfMemZero ShowingLock, sprite_targetting_show
 106+ C110 3A D1 C0    >                        ld      a,(ShowingLock)
 106+ C113 A7          >                        and     a
 106+ C114 CC C7 E4    >                        call    z, sprite_targetting_show
 107+ C117 21 01 01                             ld      hl,$0101                        ; set both bytes in one go
 108+ C11A 22 D0 C0                             ld      (CurrentLock),hl
 109+ C11D C9                                   ret
 110+ C11E
 111+ C11E                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
 112+ C11E                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
 113+ C11E 80 40 60 28  LightningLines:         db 128, 064, 096, 040, 255, 097, 042, 076, 035, 031, 082, 039, 079, 020, 026, 079, 026, 058, 018, 022, 064, 021, 032, 026, 018, 038, 025, 030, 009, 026, 035, 020, 005, 016, 018, 037, 021, 000, 000, 018
 113+ C122 FF 61 2A 4C
 113+ C126 23 1F 52 27
 113+ C12A 4F 14 1A 4F
 113+ C12E 1A 3A 12 16
 113+ C132 40 15 20 1A
 113+ C136 12 26 19 1E
 113+ C13A 09 1A 23 14
 113+ C13E 05 10 12 25
 113+ C142 15 00 00 12
 114+ C146 80 40 8B 28                          db 128, 064, 139, 040, 255, 137, 045, 160, 035, 031, 150, 040, 157, 056, 026, 160, 036, 175, 010, 022, 156, 037, 196, 040, 018, 197, 041, 223, 033, 026, 223, 033, 245, 030, 018, 223, 032, 254, 047, 018
 114+ C14A FF 89 2D A0
 114+ C14E 23 1F 96 28
 114+ C152 9D 38 1A A0
 114+ C156 24 AF 0A 16
 114+ C15A 9C 25 C4 28
 114+ C15E 12 C5 29 DF
 114+ C162 21 1A DF 21
 114+ C166 F5 1E 12 DF
 114+ C16A 20 FE 2F 12
 115+ C16E 80 40 5A 59                          db 128, 064, 090, 089, 255, 089, 089, 064, 098, 031, 079, 092, 064, 072, 025, 065, 075, 030, 070, 022, 035, 071, 038, 064, 018, 067, 095, 021, 099, 026, 031, 097, 000, 080, 018, 031, 097, 021, 110, 018
 115+ C172 FF 59 59 40
 115+ C176 62 1F 4F 5C
 115+ C17A 40 48 19 41
 115+ C17E 4B 1E 46 16
 115+ C182 23 47 26 40
 115+ C186 12 43 5F 15
 115+ C18A 63 1A 1F 61
 115+ C18E 00 50 12 1F
 115+ C192 61 15 6E 12
 116+ C196 80 40 61 71                          db 128, 064, 097, 113, 255, 098, 110, 064, 115, 031, 070, 115, 073, 127, 025, 071, 114, 060, 112, 022, 030, 120, 020, 126, 018, 070, 114, 050, 120, 026, 050, 120, 027, 119, 018, 020, 125, 010, 120, 018
 116+ C19A FF 62 6E 40
 116+ C19E 73 1F 46 73
 116+ C1A2 49 7F 19 47
 116+ C1A6 72 3C 70 16
 116+ C1AA 1E 78 14 7E
 116+ C1AE 12 46 72 32
 116+ C1B2 78 1A 32 78
 116+ C1B6 1B 77 12 14
 116+ C1BA 7D 0A 78 12
 117+ C1BE 80 40 84 59                          db 128, 064, 132, 089, 255, 131, 081, 145, 098, 031, 145, 097, 133, 103, 025, 145, 098, 150, 110, 022, 150, 109, 154, 105, 018, 150, 110, 146, 120, 026, 145, 120, 140, 126, 018, 147, 120, 159, 126, 018
 117+ C1C2 FF 83 51 91
 117+ C1C6 62 1F 91 61
 117+ C1CA 85 67 19 91
 117+ C1CE 62 96 6E 16
 117+ C1D2 96 6D 9A 69
 117+ C1D6 12 96 6E 92
 117+ C1DA 78 1A 91 78
 117+ C1DE 8C 7E 12 93
 117+ C1E2 78 9F 7E 12
 118+ C1E6 80 40 9F 67                          db 128, 064, 159, 103, 255, 161, 102, 171, 108, 031, 160, 102, 175, 127, 025, 175, 124, 200, 122, 022, 200, 121, 223, 120, 018, 224, 120, 225, 127, 026, 224, 119, 245, 116, 018, 246, 117, 254, 123, 018
 118+ C1EA FF A1 66 AB
 118+ C1EE 6C 1F A0 66
 118+ C1F2 AF 7F 19 AF
 118+ C1F6 7C C8 7A 16
 118+ C1FA C8 79 DF 78
 118+ C1FE 12 E0 78 E1
 118+ C202 7F 1A E0 77
 118+ C206 F5 74 12 F6
 118+ C20A 75 FE 7B 12
 119+ C20E 80 40 91 4A                          db 128, 064, 145, 074, 255, 145, 073, 158, 072, 031, 159, 072, 179, 064, 025, 159, 073, 185, 085, 022, 182, 084, 197, 076, 018, 195, 075, 207, 079, 026, 206, 079, 245, 063, 018, 206, 080, 245, 105, 018
 119+ C212 FF 91 49 9E
 119+ C216 48 1F 9F 48
 119+ C21A B3 40 19 9F
 119+ C21E 49 B9 55 16
 119+ C222 B6 54 C5 4C
 119+ C226 12 C3 4B CF
 119+ C22A 4F 1A CE 4F
 119+ C22E F5 3F 12 CE
 119+ C232 50 F5 69 12
 120+ C236
 121+ C236              ; Draw line at hl for b lines
 122+ C236 E5 C5        DrawLighningLine:       push    hl,,bc
 123+ C238 4E                                   ld      c,(hl)
 124+ C239 23                                   inc     hl
 125+ C23A 46                                   ld      b,(hl)
 126+ C23B 23                                   inc     hl
 127+ C23C 5E                                   ld      e,(hl)
 128+ C23D 23                                   inc     hl
 129+ C23E 56                                   ld      d,(hl)
 130+ C23F 23                                   inc     hl
 131+ C240 7E                                   ld      a,(hl)          ; colour
 132+ C241 CD 5C E6                             call    l2_draw_diagonal
 133+ C244 C1 E1                                pop     hl,,bc
 134+ C246 3E 05                                ld      a,5
 135+ C248 ED 31                                add     hl,a
 136+ C24A 10 EA                                djnz    DrawLighningLine
 137+ C24C C9                                   ret
 138+ C24D
 139+ C24D              ;Loop though all lines
 140+ C24D              ;   60$% chance of drawing a line, call draw line
 141+ C24D              ;   go to next line
 142+ C24D              ;repeat
 143+ C24D 06 07        hyperspace_Lightning:   ld      b, 7                    ; total number of lightning bolts
 144+ C24F 21 1E C1                             ld      hl,LightningLines
 145+ C252                                      MMUSelectLayer2
 145+ C252 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 146+ C256                                      ;break
 147+ C256              ; above here select which lines table we will use
 148+ C256 C5 E5        .LineLoop:              push    bc,,hl
 149+ C258 CD B2 86                             call    doRandom
 150+ C25B FE 1E                                cp      30
 151+ C25D 30 0C                                jr      nc,.NextLine
 152+ C25F CD B2 86                             call    doRandom
 153+ C262 E6 07                                and     $07
 154+ C264 3C                                   inc     a
 155+ C265 47                                   ld      b,a
 156+ C266 E1                                   pop     hl
 157+ C267 E5                                   push    hl
 158+ C268 CD 36 C2                             call    DrawLighningLine
 159+ C26B E1 C1        .NextLine:              pop     bc,,hl
 160+ C26D 16 08                                ld      d,8
 161+ C26F 1E 05                                ld      e,5
 162+ C271 ED 30                                mul
 163+ C273 19                                   add     hl,de
 164+ C274 10 E0                                djnz    .LineLoop
 165+ C276 3A DC 81                             ld      a,(HyperCircle)
 166+ C279 57                                   ld      d,a
 167+ C27A 01 80 40                             ld      bc, $4080
 168+ C27D                                      ;break
 169+ C27D 1E 00                                ld      e,$00
 170+ C27F CD EB E9                             call    l2_draw_circle_fill; ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
 171+ C282 01 80 40                             ld      bc, $4080
 172+ C285 3A DC 81                             ld      a,(HyperCircle)
 173+ C288 3C                                   inc     a
 174+ C289 57                                   ld      d,a
 175+ C28A 1E FF                                ld      e,$FF
 176+ C28C CD A7 E7                             call    l2_draw_circle
 177+ C28F 3A DC 81                             ld      a,(HyperCircle)
 178+ C292 3C                                   inc     a
 179+ C293 3C                                   inc     a
 180+ C294 FE 40                                cp      64
 181+ C296 D0                                   ret     nc
 182+ C297 32 DC 81                             ld      (HyperCircle),a
 183+ C29A                                      SetCarryFlag
 183+ C29A 37          >                        scf
 184+ C29B C9                                   ret
 185+ C29C
 186+ C29C
 187+ C29C              draw_hyperspace:        MMUSelectLayer1
 187+ C29C ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 188+ C2A0 CD 80 E0                             call    l1_cls
 189+ C2A3 CD 9A E0                             call    l1_attr_cls
 190+ C2A6                                      MMUSelectLayer2
 190+ C2A6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 191+ C2AA CD 03 E0                             call     asm_l2_double_buffer_on
 192+ C2AD                                      MMUSelectSpriteBank
 192+ C2AD ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 193+ C2B1 CD 6E E5                             call    sprite_cls_cursors
 194+ C2B4                                      MMUSelectConsoleBank
 194+ C2B4 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 195+ C2B8 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
 196+ C2BB 11 00 E0                             ld          de,ConsoleImageData
 197+ C2BE 01 00 08                             ld          bc, ScreenL1BottomLen
 198+ C2C1 CD C9 7C                             call        memcopy_dma
 199+ C2C4 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 200+ C2C7 11 00 E8                             ld          de,ConsoleAttributes
 201+ C2CA 01 00 01                             ld          bc, ScreenL1AttrBtmLen
 202+ C2CD CD C9 7C                             call        memcopy_dma
 203+ C2D0 CD A3 7A                             call        InitialiseHyperStars
 204+ C2D3 AF                                   xor         a
 205+ C2D4 32 22 81                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
 206+ C2D7 3E 02                                ld          a,2
 207+ C2D9 32 DC 81                             ld          (HyperCircle),a
 208+ C2DC 3E FC                                ld          a,$FC
 209+ C2DE 32 22 81                             ld          (DockedFlag),a
 210+ C2E1 C9                                   ret
 211+ C2E2
 212+ C2E2
 213+ C2E2              loop_hyperspace
 214+ C2E2
 215+ C2E2              dampenRate:             equ     $04
 216+ C2E2 04           dampenRcounter:         DB      dampenRate
 217+ C2E3 04           dampenPcounter:         DB      dampenRate
 218+ C2E4 AF           input_front_view:       xor         a
 219+ C2E5 2A 35 7D                             ld      hl,(addr_Pressed_Accellerate)
 220+ C2E8 7E                                   ld      a,(hl)
 221+ C2E9                                      JumpIfAIsZero     .TestDecellerate
 221+ C2E9 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 221+ C2EA CA 06 C3    >                        jp	    z, .TestDecellerate
 222+ C2ED 3A 0C 81                             ld      a,(SHIPMAXSPEED)
 223+ C2F0 57                                   ld      d,a
 224+ C2F1 3A 0D 81                             ld      a,(DELTA)
 225+ C2F4                                      JumpIfAGTENusng d,.TestDecellerate
 225+ C2F4 BA          >                        cp     d
 225+ C2F5 D2 06 C3    >                        jp		nc,.TestDecellerate
 226+ C2F8 3C                                   inc     a
 227+ C2F9 32 0D 81                             ld      (DELTA),a
 228+ C2FC 2A 0E 81                             ld      hl,(DELT4Lo)
 229+ C2FF ED 34 04 00                          add     hl,4
 230+ C303 22 0E 81                             ld      (DELT4Lo),hl
 231+ C306 2A 37 7D     .TestDecellerate:       ld      hl,(addr_Pressed_Decellerate)
 232+ C309 7E                                   ld      a,(hl)
 233+ C30A                                      JumpIfAIsZero   .TestLeftPressed
 233+ C30A A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 233+ C30B CA 23 C3    >                        jp	    z, .TestLeftPressed
 234+ C30E 3A 0D 81                             ld      a,(DELTA)
 235+ C311                                      JumpIfAIsZero   .TestLeftPressed
 235+ C311 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 235+ C312 CA 23 C3    >                        jp	    z, .TestLeftPressed
 236+ C315 3D                                   dec     a
 237+ C316 32 0D 81                             ld      (DELTA),a
 238+ C319 2A 0E 81                             ld      hl,(DELT4Lo)
 239+ C31C 2B                                   dec     hl
 240+ C31D 2B                                   dec     hl
 241+ C31E 2B                                   dec     hl
 242+ C31F 2B                                   dec     hl
 243+ C320 22 0E 81                             ld      (DELT4Lo),hl
 244+ C323 2A 2D 7D     .TestLeftPressed:       ld      hl,(addr_Pressed_RollLeft)
 245+ C326 7E                                   ld      a,(hl)
 246+ C327                                      JumpIfAIsZero   .TestRightPressed
 246+ C327 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 246+ C328 CA 3E C3    >                        jp	    z, .TestRightPressed
 247+ C32B 3A 25 80                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 248+ C32E 21 2C 80                             ld      hl,ALP1MAXL                         ; currnet ship max left roll
 249+ C331 BE                                   cp      (hl)
 250+ C332 28 0A                                jr      z,.TestRightPressed
 251+ C334                                      ;break
 252+ C334 3D                                   dec     a                                   ; increase joystick roll
 253+ C335 32 25 80                             ld      (JSTX),a
 254+ C338 CD 10 C0                             call    draw_front_calc_alpha
 255+ C33B C3 73 C3                             jp      .TestDivePressed                    ; when pressing ignore damper
 256+ C33E 2A 2F 7D     .TestRightPressed:       ld      hl,(addr_Pressed_RollRight)
 257+ C341 7E                                   ld      a,(hl)
 258+ C342                                      JumpIfAIsZero   .DampenRoll
 258+ C342 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 258+ C343 CA 59 C3    >                        jp	    z, .DampenRoll
 259+ C346 3A 25 80                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 260+ C349 21 2B 80                             ld      hl,ALP1MAXR                         ; currnet ship max left roll
 261+ C34C BE                                   cp      (hl)
 262+ C34D 28 24                                jr      z,.TestDivePressed                   ; if its held then we don't dampen
 263+ C34F                                      ;break
 264+ C34F 3C                                   inc     a                                   ; increase joystick roll
 265+ C350 32 25 80     .UpdateAlphRoll:        ld      (JSTX),a
 266+ C353 CD 10 C0                             call    draw_front_calc_alpha
 267+ C356 C3 73 C3                             jp      .TestDivePressed                    ; when pressing ignore damper
 268+ C359 21 E2 C2     .DampenRoll:            ld      hl,dampenRcounter
 269+ C35C 35                                   dec     (hl)
 270+ C35D 20 14                                jr      nz,.TestDivePressed
 271+ C35F 3E 04                                ld      a,dampenRate
 272+ C361 77                                   ld      (hl),a
 273+ C362 3A 25 80                             ld      a,(JSTX)
 274+ C365 FE 00                                cp      0
 275+ C367 28 0A                                jr      z, .TestDivePressed
 276+ C369 CB 7F                                bit     7,a
 277+ C36B 28 03                                jr      z,.PosRollDampen
 278+ C36D 3C           .NegRollDampen:         inc     a
 279+ C36E 18 01                                jr      .ApplyRollDampen
 280+ C370 3D           .PosRollDampen:         dec     a
 281+ C371 18 DD        .ApplyRollDampen:       jr      .UpdateAlphRoll
 282+ C373              ; Dive and Climb input
 283+ C373 2A 31 7D     .TestDivePressed:       ld      hl,(addr_Pressed_Dive)
 284+ C376 7E                                   ld      a,(hl)
 285+ C377                                      JumpIfAIsZero   .TestClimbPressed
 285+ C377 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 285+ C378 CA 8E C3    >                        jp	    z, .TestClimbPressed
 286+ C37B 3A 1B 80                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 287+ C37E 21 20 80                             ld      hl,BET1MAXD                         ; currnet ship max left roll
 288+ C381 BE                                   cp      (hl)
 289+ C382 28 0A                                jr      z,.TestClimbPressed
 290+ C384                                      ;break
 291+ C384 3D                                   dec     a                                   ; increase joystick roll
 292+ C385 32 1B 80                             ld      (JSTY),a
 293+ C388 CD 3D C0                             call    draw_front_calc_beta
 294+ C38B C3 C3 C3                             jp      .ForwardCursorKeysDone
 295+ C38E 2A 33 7D     .TestClimbPressed:      ld      hl,(addr_Pressed_Climb)
 296+ C391 7E                                   ld      a,(hl)
 297+ C392                                      JumpIfAIsZero   .DampenPitch
 297+ C392 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 297+ C393 CA A9 C3    >                        jp	    z, .DampenPitch
 298+ C396 3A 1B 80                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 299+ C399 21 1F 80                             ld      hl,BET1MAXC                         ; currnet ship max left roll
 300+ C39C BE                                   cp      (hl)
 301+ C39D 28 24                                jr      z,.ForwardCursorKeysDone
 302+ C39F 3C                                   inc     a                                   ; increase joystick roll
 303+ C3A0 32 1B 80     .UpdateBetaPitch:       ld      (JSTY),a
 304+ C3A3 CD 3D C0                             call    draw_front_calc_beta
 305+ C3A6 C3 C3 C3                             jp      .ForwardCursorKeysDone
 306+ C3A9 21 E3 C2     .DampenPitch:           ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
 307+ C3AC 35                                   dec     (hl)
 308+ C3AD 20 14                                jr      nz,.ForwardCursorKeysDone
 309+ C3AF 3E 04                                ld      a,dampenRate
 310+ C3B1 77                                   ld      (hl),a
 311+ C3B2 3A 1B 80                             ld      a,(JSTY)
 312+ C3B5 FE 00                                cp      0
 313+ C3B7 28 0A                                jr      z,.ForwardCursorKeysDone
 314+ C3B9 CB 7F                                bit     7,a
 315+ C3BB 28 03                                jr      z,.PosPitchDampen
 316+ C3BD 3C           .NegPitchDampen:        inc     a
 317+ C3BE 18 01                                jr      .ApplyPitchDampen
 318+ C3C0 3D           .PosPitchDampen:        dec     a
 319+ C3C1 18 DD        .ApplyPitchDampen:      jr      .UpdateBetaPitch
 320+ C3C3              ; Now test hyperpsace. We can't be docked as this is a view routine piece of logic but for say local charts we may
 321+ C3C3              ; be in flight and they have to force a forward view when hyperspace is pressed
 322+ C3C3              ; We won't do galatic here, but for other views force to forward view
 323+ C3C3 3E 24        .ForwardCursorKeysDone: ld      a,c_Pressed_Hyperspace              ; Check for hyperspace
 324+ C3C5 CD 08 7E                             call    is_key_pressed
 325+ C3C8 20 48                                jr      nz,.NotHyperspace
 326+ C3CA              ; If we are in hyperspace countdown then test for hyperspace
 327+ C3CA 2A D9 81                             ld      hl,(InnerHyperCount)                ; if hyperspace was enaged then cancel
 328+ C3CD 7C                                   ld      a,h                                 ; hyperspace
 329+ C3CE B5                                   or      l                                   ; .
 330+ C3CF 20 41                                jr      nz,.CancelHyperspace                ; .
 331+ C3D1              ; check selected target if we find one then after gettting galaxy at bc a=0 if not found
 332+ C3D1 ED 5B 1B 82                          ld      de,(PresentSystemX)
 333+ C3D5 2A 1D 82                             ld      hl,(TargetSystemX)
 334+ C3D8 CD F1 96                             call    compare16HLDE
 335+ C3DB 28 35                                jr      z,.NoTargetSelected                 ; can't jump to current system
 336+ C3DD 3A 08 82                             ld      a,(Galaxy)
 337+ C3E0                                      MMUSelectGalaxyA
 337+ C3E0 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 338+ C3E3 ED 4B 1D 82                          ld      bc,(TargetSystemX)
 339+ C3E7 CD BB FA                             call    galaxy_name_at_bc
 340+ C3EA FE 00                                cp      0
 341+ C3EC 28 24                                jr      z,.NotHyperspace
 342+ C3EE              ; check fuel is sufficient
 343+ C3EE ED 4B 1B 82                          ld      bc,(PresentSystemX)
 344+ C3F2 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 345+ C3F6 ED 4B 1D 82                          ld      bc,(TargetSystemX)
 346+ C3FA ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 347+ C3FE CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 348+ C401 7C                                   ld      a,h
 349+ C402 A7                                   and     a
 350+ C403 20 0D                                jr      nz,.InsufficientFuel            ; max jump capacity is 25 ly for any ship
 351+ C405 3A 7B 86                             ld      a,(Fuel)
 352+ C408                                      JumpIfALTNusng    l, .InsufficientFuel
 352+ C408 BD          >                        cp      l
 352+ C409 DA 12 C4    >                        jp		c, .InsufficientFuel
 353+ C40C              ; set up timer countdown
 354+ C40C 21 0B 0B                             ld      hl,HyperSpaceTimers                 ; set both timers to 15
 355+ C40F 22 D9 81                             ld      (InnerHyperCount),hl                ; .
 356+ C412              .CancelHyperspace
 357+ C412              .NoTargetSelected
 358+ C412              .InsufficientFuel
 359+ C412              .NotHyperspace:
 360+ C412 CD 3E 85     .CheckForLaserPressed:  call    IsLaserUseable                      ; no laser or destroyed?
 361+ C415 28 44                                jr      z,.CheckTargetting
 362+ C417              .CanLaserStillFire:     SetMemFalse FireLaserPressed                ; default to no laser
 362+ C417 3E FF       >                        ld      a,$FF
 362+ C419 32 00 82    >                        ld      (FireLaserPressed),a
 363+ C41C 3A 27 84                             ld      a,(CurrLaserPulseRate)              ; if not beam type
 364+ C41F                                      JumpIfAIsZero .BeamType                     ; .
 364+ C41F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 364+ C420 CA 4D C4    >                        jp	    z, .BeamType
 365+ C423 47                                   ld      b,a                                 ; and not run out of pulses
 366+ C424 3A 35 84                             ld      a,(CurrLaserPulseRateCount)         ;
 367+ C427 3A 32 84                             ld      a,(CurrLaserPulseOnCount)           ;    if not already on
 368+ C42A                                      JumpIfAEqNusng  b, .PulseLimitReached       ;
 368+ C42A B8          >                        cp     b
 368+ C42B CA 5B C4    >                        jp      z,.PulseLimitReached
 369+ C42E 21 33 84                             ld      hl,CurrLaserPulseOffCount           ;       and not in off phase
 370+ C431 B6                                   or      (hl)                                ;
 371+ C432 23                                   inc     hl  ; CurrLaserPulseRestCount       ;       and not in rest phase.
 372+ C433 B6                                   or      (hl)                                ;    .
 373+ C434 20 25                                jr      nz, .CheckTargetting                ;    .
 374+ C436 3E 14        .IsFirePressed:         ld      a,c_Pressed_FireLaser               ;       if fire is pressed
 375+ C438 CD FB 7D                             call    is_key_up_state                     ;       .
 376+ C43B 28 1E                                jr      z,.CheckTargetting                  ;       .
 377+ C43D 3A 35 84     .CanProcesFire:         ld      a,(CurrLaserPulseRateCount)         ;            pulse rate count ++
 378+ C440 3C                                   inc     a                                   ;            .
 379+ C441 32 35 84     .StillHavePulsesLeft:   ld      (CurrLaserPulseRateCount),a         ;            .
 380+ C444                                      ldCopyByte CurrLaserPulseOnTime, CurrLaserPulseOnCount  ; pulse on count = pulse on time
 380+ C444 3A 28 84    >                        ld       a,(CurrLaserPulseOnTime)
 380+ C447 32 32 84    >                        ld       (CurrLaserPulseOnCount),a
 381+ C44A                                   ;   ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount; pulse off count = pulse off time
 382+ C44A                                   ;   ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount  ; pulse rest count = pulse rest time
 383+ C44A C3 5B C4                             jp      .CheckTargetting
 384+ C44D 3E 14        .BeamType:              ld      a,c_Pressed_FireLaser               ; else (beam type) if fire is pressed
 385+ C44F CD FB 7D                             call    is_key_up_state                     ;                   .
 386+ C452 28 07                                jr      z,.CheckTargetting                  ;                   .
 387+ C454                                      SetMemTrue FireLaserPressed                 ;                   set pulse on to 1
 387+ C454 AF          >                        xor     a
 387+ C455 32 00 82    >                        ld      (FireLaserPressed),a
 388+ C458 C3 5B C4                             jp      .CheckTargetting
 389+ C45B              .PulseLimitReached:     ;ZeroA                                       ;
 390+ C45B                                      ;ld      (CurrLaserPulseRateCount),a         ;
 391+ C45B                                      ;ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount   ; start the rest phase
 392+ C45B              ; . Here we check to see if the target lock has been pressed
 393+ C45B CD 37 7F     .CheckTargetting:       call    TargetMissileTest
 394+ C45E 3E 18        .CheckForMissile:       ld      a,c_Pressed_FireMissile             ; launch pressed?
 395+ C460 CD 08 7E                             call    is_key_pressed
 396+ C463 20 13                                jr      nz,.NotMissileLaunch
 397+ C465                                      AnyMissilesLeft
 397+ C465 3A 7E 81    >                        ld      a,(NbrMissiles)
 397+ C468 A7          >                        and     a
 398+ C469 28 0D                                jr      z,.NotMissileLaunch                 ; no missiles in rack
 399+ C46B CD C0 85                             call    IsMissileLockedOn
 400+ C46E 28 08                                jr      z,.MissileNotLocked
 401+ C470              .MissileLaunch:         SetMissileLaunch
 401+ C470 3A 13 84    >                        ld      a,(MissileTargettingFlag)
 401+ C473 E6 0F       >                        and     $0F
 401+ C475 32 13 84    >                        ld      (MissileTargettingFlag),a
 402+ C478              .MissileNotLocked:                       ; later on we need a "bing bong" nose for trying to launch an unlocked missile
 403+ C478              .NotMissileLaunch:
 404+ C478 3A 99 86     .CheckForECM:           ld      a,(ECMPresent)
 405+ C47B                                      JumpIfAEqNusng EquipmentItemNotFitted,.NoECM
 405+ C47B FE 00       >                        cp     EquipmentItemNotFitted
 405+ C47D CA A0 C4    >                        jp      z,.NoECM
 406+ C480 3A 7F 81     .CheckECMActive:        ld      a,(PlayerECMActiveCount)
 407+ C483                                      JumpIfAIsNotZero .NoECM
 407+ C483 A7          >                        and     a
 407+ C484 C2 A0 C4    >                        jp	    nz,.NoECM
 408+ C487 3E 1C        .CheckForKeyPress:      ld      a, c_Pressed_ECM
 409+ C489 CD 08 7E                             call    is_key_pressed
 410+ C48C 20 12                                jr      nz, .NoECM
 411+ C48E              .FireECM:               SetMemToN      PlayerECMActiveCount, ECMCounterMax
 411+ C48E 3E 80       >                        ld      a,ECMCounterMax
 411+ C490 32 7F 81    >                        ld      (PlayerECMActiveCount),a
 412+ C493 3A 23 80                             ld      a,(ECMCountDown)
 413+ C496                                      JumpIfAGTENusng ECMCounterMax, .NoECM
 413+ C496 FE 80       >                        cp     ECMCounterMax
 413+ C498 D2 A0 C4    >                        jp		nc,.NoECM
 414+ C49B                                      SetMemToN      ECMCountDown, ECMCounterMax
 414+ C49B 3E 80       >                        ld      a,ECMCounterMax
 414+ C49D 32 23 80    >                        ld      (ECMCountDown),a
 415+ C4A0 C9           .NoECM:                 ret
 416+ C4A1
 417+ C4A1
 418+ C4A1
 419+ C4A1
 420+ C4A1
 421+ C4A1
 422+ C4A1
# file closed: ./Views/Front_View.asm
 791  C4A1                  DISPLAY "Bank ",BankFrontView," - Bytes free ",/D, $2000 - ($-ViewFrontAddr), " - BankFrontView"
 792  C4A1              ; Bank 63  ------------------------------------------------------------------------------------------------------------------------
 793  C4A1                  SLOT    MenuStatusAddr
 794  C4A1                  PAGE    BankMenuStatus
 795  C4A1                  ORG     MenuStatusAddr
 796  C000                  INCLUDE "./Menus/status_menu.asm"
# file opened: ./Menus/status_menu.asm
   1+ C000 53 74 61 74  status_page_marker  DB "Status      PG63"
   1+ C004 75 73 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 36 33
   2+ C010
   3+ C010 40 02 9B A5  status_boiler_text		DW $0240,txt_commander
   4+ C014 90 02 14 84  						DW $0290,CommanderName
   5+ C018 08 0B AF A5  						DW $0B08,txt_present_system
   6+ C01C 08 13 C2 A5  						DW $1308,txt_hyperspace_system
   7+ C020 08 1B D5 A5  						DW $1B08,txt_condition
   8+ C024 08 23 E3 A5  						DW $2308,txt_fuel
   9+ C028 08 2B F1 A5  						DW $2B08,txt_cash
  10+ C02C 08 33 FF A5  						DW $3308,txt_legal_status
  11+ C030 08 3B 0D A6  						DW $3B08,txt_rating
  12+ C034 08 4B 1B A6  						DW $4B08,txt_equipment
  13+ C038
  14+ C038 00 00        equipment_cursor		DW  $0000
  15+ C03A              present_position		equ	$0B98
  16+ C03A              hyperspace_position		equ	$1398
  17+ C03A              condition_position		equ	$1B70
  18+ C03A              fuel_position			equ	$2370
  19+ C03A              cash_position			equ	$2B70
  20+ C03A              legal_status_position	equ $3370
  21+ C03A              rank_position			equ $3B70
  22+ C03A              equipment_position		equ $5340
  23+ C03A              equipment_position2		equ $5378
  24+ C03A              equipmax_row			equ $FF
  25+ C03A
  26+ C03A 00           STAT_selected_row       DB 0
  27+ C03B 00           STAT_current_topItem    DB 0
  28+ C03C 00           STAT_current_end        DB 0
  29+ C03D              STAT_buffer_rows         EQU     128
  30+ C03D              STAT_buffer_row_len      EQU     24
  31+ C03D              STAT_eqip_window_len    EQU 10
  32+ C03D              STAT_display_buff_len   EQU     STAT_buffer_rows *   STAT_buffer_row_len
  33+ C03D 00 00 00...  STAT_display_buffer:    DS      STAT_display_buff_len                     ; maxium of 128 items can be coded for
  34+ CC3D              STAT_position			equ $5840
  35+ CC3D 00 00 00...  STAT_cash_amount    	DS 10
  36+ CC47 20 43 72 00  STAT_cash_UoM           DB " Cr",0
  37+ CC4B
  38+ CC4B 00 00 00...  stat_present_name       DS  30
  39+ CC69 00                                   DB  0
  40+ CC6A 00 00 00...  stat_target_name        DS  30
  41+ CC88 00                                   DB  0
  42+ CC89
  43+ CC89 21 7F E8     stat_copy_to_name:      ld      hl,GalaxyExpandedName
  44+ CC8C 01 1E 00                             ld      bc,30
  45+ CC8F ED B0                                ldir
  46+ CC91 C9                                   ret
  47+ CC92
  48+ CC92              ;----------------------------------------------------------------------------------------------------------------------------------
  49+ CC92              STAT_print_boiler_text: INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++CC92
   2++CC92              ;">print_boilder_text hl = text structure, b = message count"
   3++CC92              .BoilerTextLoop:
   4++CC92 C5           	push		bc			; Save Message Count loop value
   5++CC93 4E           	ld			c,(hl)		; Get Row into b
   6++CC94 23           	inc			hl
   7++CC95 46           	ld			b,(hl)		; Get Col into b
   8++CC96 23           	inc			hl
   9++CC97 5E           	ld			e,(hl)		; Get text address Lo into E
  10++CC98 23           	inc			hl
  11++CC99 56           	ld			d,(hl)		; Get text address Hi into E
  12++CC9A 23           	inc			hl
  13++CC9B E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++CC9C EB           	ex			de,hl		; now hl = address of text data
  15++CC9D 1E FF        	ld			e,txt_status_colour
  16++CC9F C5           	push		bc
  17++CCA0 D1           	pop			de
  18++CCA1                  MMUSelectLayer1
  18++CCA1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++CCA5 CD C8 E0     	call		l1_print_at
  20++CCA8 E1           	pop			hl
  21++CCA9 C1           	pop			bc
  22++CCAA 10 E6        	djnz		.BoilerTextLoop
  23++CCAC C9           	ret
  24++CCAD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  50+ CCAD              ;----------------------------------------------------------------------------------------------------------------------------------
  51+ CCAD DD 22 51 CD  STAT_DispDEIXtoIY:      ld (.STATclcn32z),ix
  52+ CCB1 ED 53 53 CD                          ld (.STATclcn32zIX),de
  53+ CCB5 DD 21 4D CD                          ld ix,.STATclcn32t+36
  54+ CCB9 06 09                                ld b,9
  55+ CCBB 0E 00                                ld c,0
  56+ CCBD 3E 30        .STATclcn321:           ld a,'0'
  57+ CCBF B7                                   or a
  58+ CCC0 DD 5E 00     .STATclcn322:           ld e,(ix+0)
  59+ CCC3 DD 56 01                             ld d,(ix+1)
  60+ CCC6 2A 51 CD                             ld hl,(.STATclcn32z)
  61+ CCC9 ED 52                                sbc hl,de
  62+ CCCB 22 51 CD                             ld (.STATclcn32z),hl
  63+ CCCE DD 5E 02                             ld e,(ix+2)
  64+ CCD1 DD 56 03                             ld d,(ix+3)
  65+ CCD4 2A 53 CD                             ld hl,(.STATclcn32zIX)
  66+ CCD7 ED 52                                sbc hl,de
  67+ CCD9 22 53 CD                             ld (.STATclcn32zIX),hl
  68+ CCDC 38 04                                jr c,.STATclcn325
  69+ CCDE 0C                                   inc c
  70+ CCDF 3C                                   inc a
  71+ CCE0 18 DE                                jr .STATclcn322
  72+ CCE2 DD 5E 00     .STATclcn325:           ld e,(ix+0)
  73+ CCE5 DD 56 01                             ld d,(ix+1)
  74+ CCE8 2A 51 CD                             ld hl,(.STATclcn32z)
  75+ CCEB 19                                   add hl,de
  76+ CCEC 22 51 CD                             ld (.STATclcn32z),hl
  77+ CCEF DD 5E 02                             ld e,(ix+2)
  78+ CCF2 DD 56 03                             ld d,(ix+3)
  79+ CCF5 2A 53 CD                             ld hl,(.STATclcn32zIX)
  80+ CCF8 ED 5A                                adc hl,de
  81+ CCFA 22 53 CD                             ld (.STATclcn32zIX),hl
  82+ CCFD 11 FC FF                             ld de,-4
  83+ CD00 DD 19                                add ix,de
  84+ CD02 0C                                   inc c
  85+ CD03 0D                                   dec c
  86+ CD04 28 05                                jr z,.STATclcn323
  87+ CD06 FD 77 00                             ld (iy+0),a
  88+ CD09 FD 23                                inc iy
  89+ CD0B 10 B0        .STATclcn323:           djnz .STATclcn321
  90+ CD0D 3A 51 CD                             ld a,(.STATclcn32z)
  91+ CD10 C6 30                                add A,'0'
  92+ CD12 FD 77 00                             ld (iy+0),a
  93+ CD15 FD 36 02 00                          ld (iy+2),0
  94+ CD19 FD 7E 00                             ld      a,(IY+0)
  95+ CD1C FD 77 01                             ld      (IY+1),a
  96+ CD1F 3E 2E                                ld      a,"."
  97+ CD21 FD 77 00                             ld      (IY+0),a
  98+ CD24 FD 23                                inc     IY
  99+ CD26 FD 23                                inc     IY
 100+ CD28 C9                                   ret
 101+ CD29 01 00 00 00  .STATclcn32t            dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 101+ CD2D 0A 00 00 00
 101+ CD31 64 00 00 00
 101+ CD35 E8 03 00 00
 101+ CD39 10 27 00 00
 102+ CD3D A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 102+ CD41 40 42 0F 00
 102+ CD45 80 96 98 00
 102+ CD49 00 E1 F5 05
 102+ CD4D 00 CA 9A 3B
 103+ CD51 00 00        .STATclcn32z            ds 2
 104+ CD53 00 00        .STATclcn32zIX          ds 2
 105+ CD55              ;----------------------------------------------------------------------------------------------------------------------------------
 106+ CD55 2A 79 86     STAT_GetCash:           ld		hl,(Cash+2)
 107+ CD58 EB                                   ex      de,hl
 108+ CD59 DD 2A 77 86                          ld      ix,(Cash)
 109+ CD5D FD 21 3D CC                          ld		iy,STAT_cash_amount
 110+ CD61 CD AD CC                             call 	STAT_DispDEIXtoIY
 111+ CD64 FD E5                                push    iy
 112+ CD66 D1                                   pop     de
 113+ CD67 21 47 CC                             ld      hl,STAT_cash_UoM
 114+ CD6A 01 04 00                             ld      bc,4
 115+ CD6D ED B0                                ldir
 116+ CD6F C9                                   ret
 117+ CD70              ;----------------------------------------------------------------------------------------------------------------------------------
 118+ CD70 7E           STAT_expand_word:       ld      a,(hl)
 119+ CD71 FE 00                                cp      0
 120+ CD73 C8                                   ret     z
 121+ CD74 12                                   ld      (de),a
 122+ CD75 23                                   inc     hl
 123+ CD76 13                                   inc     de
 124+ CD77 18 F7                                jr      STAT_expand_word
 125+ CD79
 126+ CD79              ; hl = list of words
 127+ CD79              ; de = adress to expand to
 128+ CD79 7E           STAT_expand_name:       ld      a,(hl)
 129+ CD7A 47                                   ld      b,a
 130+ CD7B 23                                   inc     hl
 131+ CD7C 7E                                   ld      a,(hl)              ; its a 16 bit
 132+ CD7D 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 133+ CD7E B0                                   or      b
 134+ CD7F 20 01                                jr      nz,.MoreToDo
 135+ CD81              ;                        ld      (de),a we dont want the null marker now
 136+ CD81 C9                                   ret
 137+ CD82 E5 D5        .MoreToDo:              push    hl,,de
 138+ CD84 7E                                   ld      a,(hl)              ; bodge for now no optimise
 139+ CD85 5F                                   ld      e,a
 140+ CD86 23                                   inc     hl
 141+ CD87 7E                                   ld      a,(hl)
 142+ CD88 57                                   ld      d,a
 143+ CD89 EB                                   ex      hl,de               ; hl is now Word... address
 144+ CD8A D1                                   pop     de                  ; de back to pointer to buffer
 145+ CD8B CD 70 CD     .ProcessWord:           call    STAT_expand_word
 146+ CD8E 3E 20                                ld      a," "               ; speculative space
 147+ CD90 12                                   ld      (de),a
 148+ CD91 13                                   inc     de
 149+ CD92 E1                                   pop     hl                  ; get string pointer back
 150+ CD93 23                                   inc     hl
 151+ CD94 23                                   inc     hl                  ; on to next word
 152+ CD95 18 E2                                jr      STAT_expand_name
 153+ CD97
 154+ CD97              STAT_First_Item         EQU     EQ_CARGO_BAY
 155+ CD97 3A 08 82     STAT_buffer_list:       ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 156+ CD9A                                      MMUSelectGalaxyA
 156+ CD9A ED 92 57    >                     nextreg GalaxyDataMMU,       a
 157+ CD9D 21 3D C0                             ld      hl,STAT_display_buffer                      ; hl - target buffer
 158+ CDA0 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 159+ CDA2 11 00 0C                             ld      de, STAT_display_buff_len
 160+ CDA5 CD A3 7C                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 161+ CDA8 21 54 C0                             ld      hl,STAT_display_buffer+STAT_buffer_row_len-1
 162+ CDAB 11 18 00                             ld      de,STAT_buffer_row_len
 163+ CDAE 06 80                                ld      b,STAT_buffer_rows
 164+ CDB0                                      ZeroA
 164+ CDB0 AF          >                        xor a
 165+ CDB1 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 166+ CDB2 19                                   add     hl,de
 167+ CDB3 10 FC                                djnz    .EoLLoop
 168+ CDB5 DD 21 98 86                          ld      ix,EquipmentFitted + STAT_First_Item        ; ix = equipment master table, ignore missiles
 169+ CDB9 FD 21 3D C0                          ld      iy,STAT_display_buffer                      ; iy = target buffer
 170+ CDBD 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY              ; we do not include Fuel and Missile counts
 171+ CDBF 0E 00                                ld      c,0                                         ; Current Row
 172+ CDC1 1E 02                                ld      e,STAT_First_Item
 173+ CDC3 DD 7E 00     .ProcessRow:            ld      a,(ix+0)                                    ; Do we own one?
 174+ CDC6                                      JumpIfAIsZero .NotFitted                            ; optimised check for EquipmentItemNotFitted
 174+ CDC6 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 174+ CDC7 CA EB CD    >                        jp	    z, .NotFitted
 175+ CDCA D5 FD E5 DD  .OwnItem:               push    de,, iy,, ix,, bc
 175+ CDCE E5 C5
 176+ CDD0 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 177+ CDD3 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length, e = current equip row
 178+ CDD5 ED 30                                mul
 179+ CDD7 19                                   add     hl,de                                       ; hl = dword list of work pointers
 180+ CDD8 FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 181+ CDDC CD 79 CD                             call    STAT_expand_name                           ; expand name
 182+ CDDF C1 DD E1 FD                          pop     iy,,ix,,bc
 182+ CDE3 E1
 183+ CDE4 11 18 00                             ld      de,STAT_buffer_row_len
 184+ CDE7 FD 19                                add     iy,de                                       ; now iy = start of next column
 185+ CDE9 D1                                   pop     de
 186+ CDEA 0C                                   inc     c
 187+ CDEB              .NotFitted:
 188+ CDEB DD 23        .DoneFittedCheck:       inc     ix
 189+ CDED 1C                                   inc     e
 190+ CDEE 10 D3                                djnz    .ProcessRow
 191+ CDF0 79           .DoneProcess:           ld      a,c
 192+ CDF1 32 3C C0                             ld      (STAT_current_end),a
 193+ CDF4 C9                                   ret
 194+ CDF5
 195+ CDF5 06 0A        draw_STAT_boilertext:   ld		b,10
 196+ CDF7 21 10 C0                             ld		hl,status_boiler_text
 197+ CDFA CD 92 CC                             call	STAT_print_boiler_text
 198+ CDFD C9                                   ret
 199+ CDFE
 200+ CDFE              ;----------------------------------------------------------------------------------------------------------------------------------
 201+ CDFE 01 01 01     draw_STAT_maintext:    	ld		bc,$0101
 202+ CE01 11 FD BE                             ld		de,$BEFD
 203+ CE04 3E C0                                ld		a,$C0
 204+ CE06                                      MMUSelectLayer2
 204+ CE06 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 205+ CE0A CD 49 E2                             call	l2_draw_box
 206+ CE0D CD F5 CD                             call    draw_STAT_boilertext
 207+ CE10 3A 08 82     .PresentSystem:         ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 208+ CE13                                      MMUSelectGalaxyA
 208+ CE13 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 209+ CE16 ED 4B 1B 82                          ld      bc, (PresentSystemX)
 210+ CE1A CD BB FA                             call    galaxy_name_at_bc
 211+ CE1D 11 4B CC                             ld      de,stat_present_name
 212+ CE20 CD 89 CC                             call    stat_copy_to_name
 212+ CE23
 213+ CE23 01 98 0B                             ld      bc,present_position
 214+ CE26 21 4B CC                             ld      hl,stat_present_name
 215+ CE29                                      MMUSelectLayer2
 215+ CE29 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 216+ CE2D 1E FF                                ld      e,txt_status_colour
 217+ CE2F CD C2 E1                             call    l2_print_at
 218+ CE32 3A 08 82     .HyperspaceSystem:      ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 219+ CE35                                      MMUSelectGalaxyA
 219+ CE35 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 220+ CE38 ED 4B 1D 82                          ld      bc, (TargetSystemX)
 221+ CE3C CD BB FA                             call    galaxy_name_at_bc
 222+ CE3F 11 6A CC                             ld      de,stat_target_name
 223+ CE42 CD 89 CC                             call    stat_copy_to_name
 223+ CE45
 224+ CE45 01 98 13                             ld      bc,hyperspace_position
 225+ CE48 21 6A CC                             ld      hl,stat_target_name
 226+ CE4B                                      MMUSelectLayer2
 226+ CE4B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 227+ CE4F 1E FF                                ld      e,txt_status_colour
 228+ CE51 CD C2 E1                             call    l2_print_at
 229+ CE54 CD 0D CF     .StatusText:	        call	get_cmdr_condition
 230+ CE57 21 E7 88                             ld		hl, ConditionNameIdx
 231+ CE5A CD E9 89                             call	getTableText
 232+ CE5D 01 70 1B                             ld		bc,condition_position
 233+ CE60                                      MMUSelectLayer2
 233+ CE60 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 234+ CE64 1E FF                                ld      e,txt_status_colour
 235+ CE66 CD C2 E1                             call    l2_print_at
 236+ CE69 CD 78 A6     .DisplayFuel:           call	GetFuelLevel
 237+ CE6C 21 26 A6                             ld		hl, txt_fuel_level
 238+ CE6F 7E                                   ld		a,(hl)
 239+ CE70 FE 30                                cp		'0'
 240+ CE72 20 01                                jr		nz,.PrintFuel
 241+ CE74 23           .SkipLeadingZero:	    inc		hl
 242+ CE75 01 70 23     .PrintFuel:             ld		bc,fuel_position
 243+ CE78                                      MMUSelectLayer2
 243+ CE78 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 244+ CE7C 1E FF                                ld      e,txt_status_colour
 245+ CE7E CD C2 E1                             call    l2_print_at
 246+ CE81 CD 55 CD     .DisplayCash:           call	STAT_GetCash
 247+ CE84 01 70 2B                             ld		bc,cash_position
 248+ CE87 21 3D CC                             ld		hl,STAT_cash_amount
 249+ CE8A                                      MMUSelectLayer2
 249+ CE8A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 250+ CE8E 1E FF                                ld      e,txt_status_colour
 251+ CE90 CD C2 E1                             call    l2_print_at
 252+ CE93 3A 80 81     .PrintLegalStatus:      ld		a,(FugitiveInnocentStatus)
 253+ CE96 FE 00                                cp		0
 254+ CE98 20 05                                jr		nz,.Naughty
 255+ CE9A 21 C8 8A                             ld		hl,WordClean
 256+ CE9D 18 0C                                jr		.DisplayLegalStatus
 257+ CE9F FE 32        .Naughty:               cp		50
 258+ CEA1 38 05                                jr		c,.JustOffender
 259+ CEA3 21 D7 8A     .VeryNaughty:           ld		hl,WordFugitive
 260+ CEA6 18 03                                jr		.DisplayLegalStatus
 261+ CEA8 21 CE 8A     .JustOffender:          ld		hl,WordOffender
 262+ CEAB 01 70 33     .DisplayLegalStatus:    ld		bc,legal_status_position
 263+ CEAE                                      MMUSelectLayer2
 263+ CEAE ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 264+ CEB2 1E FF                                ld      e,txt_status_colour
 265+ CEB4 CD C2 E1                             call    l2_print_at
 266+ CEB7 ED 5B 93 81  .DisplayRating:         ld		de,(KillTally)
 267+ CEBB CD F4 89                             call	getRankIndex
 268+ CEBE 21 D3 89                             ld		hl, RankingNameIdx
 269+ CEC1 CD E9 89                             call	getTableText
 270+ CEC4 01 70 3B                             ld		bc,rank_position
 271+ CEC7                                      MMUSelectLayer2
 271+ CEC7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 272+ CECB 1E FF                                ld      e,txt_status_colour
 273+ CECD CD C2 E1                             call    l2_print_at
 274+ CED0 C9                                   ret
 275+ CED1
 276+ CED1
 277+ CED1              draw_STAT_items:        MMUSelectLayer1
 277+ CED1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 278+ CED5 CD 80 E0                             call    l1_cls
 279+ CED8                                      ; add in all the status stuff later
 280+ CED8 3A 3B C0                             ld      a,(STAT_current_topItem)                    ; Move to correct top of stat list item
 281+ CEDB 16 18                                ld      d,STAT_buffer_row_len                       ; so de = offset to first item in display
 282+ CEDD 5F                                   ld      e,a
 283+ CEDE ED 30                                mul
 284+ CEE0 21 3D C0                             ld      hl,STAT_display_buffer                      ; hl = pointer to first item in display
 285+ CEE3 19                                   add     hl,de                                       ;
 286+ CEE4 3A 3B C0                             ld      a,(STAT_current_topItem)                    ; set a to number of lines to display
 287+ CEE7 47                                   ld      b,a                                         ;
 288+ CEE8 3A 3C C0                             ld      a,(STAT_current_end)                        ;
 289+ CEEB 90                                   sub     b                                           ;
 290+ CEEC                                      JumpIfALTNusng  STAT_eqip_window_len, .FillScreen   ; if there are enough then just do a screen fill
 290+ CEEC FE 0A       >                        cp      STAT_eqip_window_len
 290+ CEEE DA F5 CE    >                        jp		c, .FillScreen
 291+ CEF1 06 0A        .JustWindowing:         ld      b,STAT_eqip_window_len                      ; if its more than a screen then window
 292+ CEF3 18 01                                jr      .ReadyToPrint
 293+ CEF5 47           .FillScreen:            ld      b,a                                         ; b = the mumber of rows to display
 294+ CEF6 11 40 58     .ReadyToPrint:          ld      de,STAT_position
 295+ CEF9 D5 E5 C5     .DrawARow:              push    de,, hl,, bc                                ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 296+ CEFC CD C8 E0                             call    l1_print_at
 296+ CEFF
 297+ CEFF C1 E1                                pop     hl,,bc                                      ; get mesage addr back and move down one line
 298+ CF01 11 18 00                             ld      de,STAT_buffer_row_len
 299+ CF04 19                                   add     hl,de
 300+ CF05 D1                                   pop     de                                           ; get output row back
 301+ CF06 3E 08                                ld      a,8
 302+ CF08 82                                   add     a,d
 303+ CF09 57                                   ld      d,a
 304+ CF0A 10 ED                                djnz    .DrawARow
 305+ CF0C C9                                   ret
 306+ CF0D
 307+ CF0D              ;----------------------------------------------------------------------------------------------------------------------------------
 308+ CF0D
 309+ CF0D 3A 22 81     get_cmdr_condition:     ld			a,(DockedFlag)
 310+ CF10 FE FF                                cp			StatePlayerDocked
 311+ CF12 28 17                                jr			z,.PlayerIsDocked
 312+ CF14              .PlayerNotDocked:	    ReturnIfMemTrue    SpaceStationSafeZone
 312+ CF14 3A 01 82    >                        ld      a,(SpaceStationSafeZone)
 312+ CF17 A7          >                        and     a
 312+ CF18 C8          >                        ret     z
 313+ CF19 CD 34 86                             call        AreShipsPresent
 314+ CF1C 38 03                                jr          c,.NoShipsAround
 315+ CF1E 3E 01                                ld          a,1
 316+ CF20 C9                                   ret
 317+ CF21 3A 10 84     .NoShipsAround:         ld			a,(PlayerEnergy)
 318+ CF24 FE 80                                cp			$80
 319+ CF26 3E 01                                ld          a,1
 320+ CF28 CE 01                                adc         1                                       ; add 1 + carry, if a < 128 then carry set so goes red
 321+ CF2A C9                                   ret
 322+ CF2B AF           .PlayerIsDocked:        xor			a
 323+ CF2C C9                                   ret
 324+ CF2D
 325+ CF2D              draw_status_menu:       InitNoDoubleBuffer
 325+ CF2D             >                            MMUSelectLayer1
 325+ CF2D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 325+ CF31 CD 80 E0    >                            call	l1_cls
 325+ CF34 3E 07       >                            ld		a,7
 325+ CF36 CD 9B E0    >                            call	l1_attr_cls_to_a
 325+ CF39             >                            MMUSelectLayer2
 325+ CF39 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 325+ CF3D CD 09 E0    >                            call    asm_l2_double_buffer_off
 325+ CF40 CD FF E0    >                            call	l2_cls	; Get some space
 325+ CF43             >                            MMUSelectSpriteBank
 325+ CF43 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 325+ CF47 CD 6E E5    >                            call    sprite_cls_cursors
 326+ CF4A 3E 08                                ld		a,8
 327+ CF4C 32 1E 81                             ld		(MenuIdMax),a
 328+ CF4F 01 01 01     .Drawbox:               ld		bc,$0101
 329+ CF52 11 FD BE                             ld		de,$BEFD
 330+ CF55 3E C0                                ld		a,$C0
 331+ CF57                                      MMUSelectLayer2
 331+ CF57 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 332+ CF5B CD 49 E2                             call	l2_draw_box
 333+ CF5E 01 01 0A                             ld		bc,$0A01
 334+ CF61 11 C0 FE                             ld		de,$FEC0
 335+ CF64                                      SetMemToN STAT_current_topItem, 0
 335+ CF64 3E 00       >                        ld      a,0
 335+ CF66 32 3B C0    >                        ld      (STAT_current_topItem),a
 336+ CF69 CD B3 E2                             call	l2_draw_horz_line
 337+ CF6C CD 97 CD     .equipment              call    STAT_buffer_list
 338+ CF6F CD D1 CE                             call    draw_STAT_items
 339+ CF72 CD FE CD                             call    draw_STAT_maintext
 340+ CF75 C9                                   ret
 341+ CF76
 342+ CF76              ;----------------------------------------------------------------------------------------------------------------------------------
 343+ CF76              ; Handles all the input whilst in the market menu
 344+ CF76 3E 4A        loop_STAT_menu:         ld      a,c_Pressed_CursorUp
 345+ CF78 CD 08 7E                             call    is_key_pressed
 346+ CF7B CC 87 CF                             call    z,STAT_UpPressed
 347+ CF7E 3E 4C                                ld      a,c_Pressed_CursorDown
 348+ CF80 CD 08 7E                             call    is_key_pressed
 349+ CF83 CC 9C CF                             call    z,STAT_DownPressed
 350+ CF86 C9                                   ret
 351+ CF87
 352+ CF87              ;----------------------------------------------------------------------------------------------------------------------------------
 353+ CF87 AF           STAT_UpPressed:         xor     a
 354+ CF88 32 3A C0                             ld      (STAT_selected_row),a
 355+ CF8B 3A 3B C0     .check_scroll_up:       ld      a,(STAT_current_topItem)
 356+ CF8E FE 00                                cp      0
 357+ CF90 C8                                   ret     z
 358+ CF91 3D                                   dec     a           ; chjange later to buffering step back 1
 359+ CF92 32 3B C0                             ld      (STAT_current_topItem),a
 360+ CF95 CD D1 CE                             call    draw_STAT_items
 361+ CF98 CD F5 CD                             call    draw_STAT_boilertext
 362+ CF9B C9                                   ret
 363+ CF9C              ;----------------------------------------------------------------------------------------------------------------------------------
 364+ CF9C 3E 09        STAT_DownPressed:       ld      a,STAT_eqip_window_len-1
 365+ CF9E 32 3A C0                             ld      (STAT_selected_row),a
 366+ CFA1 3A 3C C0                             ld      a,(STAT_current_end)
 367+ CFA4 47                                   ld      b,a                             ; This check is if the current list is < one screen
 368+ CFA5 05                                   dec     b
 369+ CFA6 3A 3A C0                             ld      a,(STAT_selected_row)
 370+ CFA9 B8                                   cp      b
 371+ CFAA C8                                   ret     z
 372+ CFAB FE 09                                cp      STAT_eqip_window_len-1
 373+ CFAD 28 05                                jr      z, .check_scroll_down
 374+ CFAF 21 3A C0                             ld      hl,STAT_selected_row
 375+ CFB2 34                                   inc     (hl)
 376+ CFB3 C9                                   ret
 377+ CFB4 47           .check_scroll_down:     ld      b,a
 378+ CFB5 3A 3B C0                             ld      a,(STAT_current_topItem)
 379+ CFB8 80                                   add     b
 380+ CFB9 3C                                   inc     a
 381+ CFBA 21 3C C0                             ld      hl,STAT_current_end
 382+ CFBD                                      ReturnIfAGTEusng      (hl)
 382+ CFBD BE          >                        cp    (hl)
 382+ CFBE D0          >                        ret	 nc
 383+ CFBF 21 3B C0     .can_scroll_down:       ld      hl,STAT_current_topItem
 384+ CFC2 34                                   inc     (hl)
 385+ CFC3 CD D1 CE                             call    draw_STAT_items
 386+ CFC6 CD F5 CD                             call    draw_STAT_boilertext
 387+ CFC9 C9                                   ret
 388+ CFCA
# file closed: ./Menus/status_menu.asm
 797  CFCA                  DISPLAY "Bank ",BankMenuStatus," - Bytes free ",/D, $2000 - ($-MenuStatusAddr), " - BankMenuStatus"
 798  CFCA              ; Bank 64  ------------------------------------------------------------------------------------------------------------------------
 799  CFCA                  SLOT    MenuEquipSAddr
 800  CFCA                  PAGE    BankMenuEquipS
 801  CFCA                  ORG     MenuEquipSAddr
 802  C000                  INCLUDE "./Menus/equip_ship_menu.asm"
# file opened: ./Menus/equip_ship_menu.asm
   1+ C000 45 71 75 69  eqshp_prices_page_marker  DB "EquipShipPG63"
   1+ C004 70 53 68 69
   1+ C008 70 50 47 36
   1+ C00C 33
   2+ C00D 50 02 19 C0  eqshp_boiler_text		DW $0250,eqship_title
   3+ C011 20 02 36 8F  						DW $0220,name_expanded
   4+ C015 08 B0 24 C0                          DW $B008,eqship_cash
   5+ C019
   6+ C019 45 71 75 69  eqship_title            DB "Equip Ship",0
   6+ C01D 70 20 53 68
   6+ C021 69 70 00
   7+ C024 43 61 73 68  eqship_cash				DB "Cash : ",0
   7+ C028 20 3A 20 00
   8+ C02C
   9+ C02C 30 30 2E 30  txt_eqshp_amount	    DB "00.0",0
   9+ C030 00
  10+ C031 39 39 39 00  txt_eqshp_quantity      DB "999",0
  11+ C035 39 39 39 00  txt_eqshp_cargo         DB "999",0
  12+ C039 00 00        eqshp_cursor			DW  $0000
  13+ C03B              eqshp_position			equ $1808
  14+ C03B              eqshp_uom				equ	$68
  15+ C03B              eqshp_price 			equ $88
  16+ C03B              eqshp_Quantity			equ	$B0
  17+ C03B              eqshp_Cargo             equ $E0
  18+ C03B              eqshp_UomOffset		    equ 46
  19+ C03B 20 20 20 20  eqshp_blank_line        DB "                                ",0
  19+ C03F 20 20 20 20
  19+ C043 20 20 20 20
  19+ C047 20 20 20 20
  19+ C04B 20 20 20 20
  19+ C04F 20 20 20 20
  19+ C053 20 20 20 20
  19+ C057 20 20 20 20
  19+ C05B 00
  20+ C05C
  21+ C05C 00 00 00...  eqshp_item_price        DS 20
  22+ C070
  23+ C070              eqshp_cash_position     equ $B048
  24+ C070 00 00 00...  eqshp_cash_amount		DS 20
  25+ C084 20 43 72 20  eqshp_cash_UoM          DB " Cr       ",0
  25+ C088 20 20 20 20
  25+ C08C 20 20 00
  26+ C08F
  27+ C08F 00           eqshp_selected_row      DB 0
  28+ C090 00           eqshp_current_topItem   DB 0
  29+ C091 00           eqshp_current_end       DB 0
  30+ C092              eqship_buffer_rows      EQU     128
  31+ C092              eqship_buffer_row_len   EQU      32
  32+ C092              eqship_display_buff_len EQU     eqship_buffer_rows *   eqship_buffer_row_len
  33+ C092 00 00 00...  eqship_display_buffer:  DS      eqship_display_buff_len                     ; maxium of 128 items can be coded for
  34+ D092 00 00 00...  eqship_buyable_buffer:  DS      128
  35+ D112              eqship_buffer_cash_col: EQU     21
  36+ D112              eqship_fitted_module:   EQU     29
  37+ D112              ;----------------------------------------------------------------------------------------------------------------------------------
  38+ D112 3A 8F C0     eqshp_highlight_row:    ld      a,(eqshp_selected_row)
  39+ D115 C6 03                                add     a,3
  40+ D117 57                                   ld      d,a
  41+ D118 1E 56                                ld      e,L1InvHighlight
  42+ D11A                                      MMUSelectLayer1
  42+ D11A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  43+ D11E CD 30 E0                             call    l1_hilight_row
  44+ D121 C9                                   ret
  45+ D122              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ D122 3A 8F C0     eqshp_lowlight_row      ld      a,(eqshp_selected_row)
  47+ D125 C6 03                                add     a,3
  48+ D127 57                                   ld      d,a
  49+ D128 1E 07                                ld      e,L1InvLowlight
  50+ D12A                                      MMUSelectLayer1
  50+ D12A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ D12E CD 30 E0                             call    l1_hilight_row
  52+ D131 C9                                   ret
  53+ D132              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ D132 CD 49 D1     eqshp_DispDEIXtoIY1DP:  call    eqshp_DispDEIXtoIY
  55+ D135 FD 36 02 00                          ld      (iy+2),0
  56+ D139 FD 7E 00                             ld      a,(IY+0)
  57+ D13C FD 77 01                             ld      (IY+1),a
  58+ D13F 3E 2E                                ld      a,"."
  59+ D141 FD 77 00                             ld      (IY+0),a
  60+ D144 FD 23                                inc     IY
  61+ D146 FD 23                                inc     IY
  62+ D148 C9                                   ret
  63+ D149              ;----------------------------------------------------------------------------------------------------------------------------------
  64+ D149 DD 22 DA D1  eqshp_DispDEIXtoIY:     ld (.EQSHPclcn32z),ix
  65+ D14D ED 53 DC D1                          ld (.EQSHPclcn32zIX),de
  66+ D151 DD 21 D6 D1                          ld ix,.EQSHPclcn32t+36
  67+ D155 06 09                                ld b,9
  68+ D157 0E 00                                ld c,0
  69+ D159 3E 30        .EQSHPclcn321:            ld a,'0'
  70+ D15B B7                                   or a
  71+ D15C DD 5E 00     .EQSHPclcn322:            ld e,(ix+0)
  72+ D15F DD 56 01                             ld d,(ix+1)
  73+ D162 2A DA D1                             ld hl,(.EQSHPclcn32z)
  74+ D165 ED 52                                sbc hl,de
  75+ D167 22 DA D1                             ld (.EQSHPclcn32z),hl
  76+ D16A DD 5E 02                             ld e,(ix+2)
  77+ D16D DD 56 03                             ld d,(ix+3)
  78+ D170 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  79+ D173 ED 52                                sbc hl,de
  80+ D175 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  81+ D178 38 04                                jr c,.EQSHPclcn325
  82+ D17A 0C                                   inc c
  83+ D17B 3C                                   inc a
  84+ D17C 18 DE                                jr .EQSHPclcn322
  85+ D17E DD 5E 00     .EQSHPclcn325:            ld e,(ix+0)
  86+ D181 DD 56 01                             ld d,(ix+1)
  87+ D184 2A DA D1                             ld hl,(.EQSHPclcn32z)
  88+ D187 19                                   add hl,de
  89+ D188 22 DA D1                             ld (.EQSHPclcn32z),hl
  90+ D18B DD 5E 02                             ld e,(ix+2)
  91+ D18E DD 56 03                             ld d,(ix+3)
  92+ D191 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  93+ D194 ED 5A                                adc hl,de
  94+ D196 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  95+ D199 11 FC FF                             ld de,-4
  96+ D19C DD 19                                add ix,de
  97+ D19E 0C                                   inc c
  98+ D19F 0D                                   dec c
  99+ D1A0 28 05                                jr z,.EQSHPclcn323
 100+ D1A2 FD 77 00                             ld (iy+0),a
 101+ D1A5 FD 23                                inc iy
 102+ D1A7 10 B0        .EQSHPclcn323:            djnz .EQSHPclcn321
 103+ D1A9 3A DA D1                             ld a,(.EQSHPclcn32z)
 104+ D1AC C6 30                                add A,'0'
 105+ D1AE FD 77 00                             ld (iy+0),a
 106+ D1B1 C9                                   ret
 107+ D1B2 01 00 00 00  .EQSHPclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 107+ D1B6 0A 00 00 00
 107+ D1BA 64 00 00 00
 107+ D1BE E8 03 00 00
 107+ D1C2 10 27 00 00
 108+ D1C6 A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 108+ D1CA 40 42 0F 00
 108+ D1CE 80 96 98 00
 108+ D1D2 00 E1 F5 05
 108+ D1D6 00 CA 9A 3B
 109+ D1DA 00 00        .EQSHPclcn32z             ds 2
 110+ D1DC 00 00        .EQSHPclcn32zIX           ds 2
 111+ D1DE              ;----------------------------------------------------------------------------------------------------------------------------------
 112+ D1DE              ; "DispHL, writes HL to DE address"
 113+ D1DE 01 F0 D8     EQSHP_DispHLtoDE:         ld	bc,-10000
 114+ D1E1 CD F7 D1                             call	EQSHP_Num1
 115+ D1E4 01 18 FC                             ld	bc,-1000
 116+ D1E7 CD F7 D1                             call	EQSHP_Num1
 117+ D1EA 01 9C FF                             ld	bc,-100
 118+ D1ED CD F7 D1                             call	EQSHP_Num1
 119+ D1F0 0E F6                                ld	c,-10
 120+ D1F2 CD F7 D1                             call	EQSHP_Num1
 121+ D1F5 0E FF                                ld	c,-1
 122+ D1F7 3E 2F        EQSHP_Num1:	            ld	a,'0'-1
 123+ D1F9 3C           .Num2:	                inc	a
 124+ D1FA 09                                   add	hl,bc
 125+ D1FB 38 FC                                jr	c,.Num2
 126+ D1FD ED 42                                sbc	hl,bc
 127+ D1FF 12                                   ld	(de),a
 128+ D200 13                                   inc	de
 129+ D201 C9                                   ret
 130+ D202              ;----------------------------------------------------------------------------------------------------------------------------------
 131+ D202 26 00        EQSHP_DispAtoDE:          ld h,0
 132+ D204 6F                                   ld l,a
 133+ D205 C3 DE D1                             jp EQSHP_DispHLtoDE
 134+ D208              ;----------------------------------------------------------------------------------------------------------------------------------
 135+ D208 26 00        EQSHP_DispPriceAtoDE:     ld h,0
 136+ D20A 6F                                   ld l,a
 137+ D20B 01 9C FF                             ld	bc,-100
 138+ D20E CD 1E D2                             call	.NumLeadBlank1
 139+ D211 0E F6                                ld	c,-10
 140+ D213 CD F7 D1                             call	EQSHP_Num1
 141+ D216 3E 2E                                ld		a,'.'					; we could assume preformat but
 142+ D218 12                                   ld		(de),a					; we can optimse that later TODO
 143+ D219 13                                   inc		de						; with just an inc De
 144+ D21A 0E FF                                ld	c,-1
 145+ D21C 18 D9                                jr		EQSHP_Num1
 146+ D21E 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 147+ D220 3C           .NumLeadBlank2:	        inc	a
 148+ D221 09                                   add	hl,bc
 149+ D222 38 FC                                jr	c,.NumLeadBlank2
 150+ D224 FE 30                                cp	'0'
 151+ D226 20 02                                jr	nz,.DontBlank
 152+ D228 3E 20        .Blank:                 ld	a,' '
 153+ D22A ED 42        .DontBlank:	            sbc	hl,bc
 154+ D22C 12                                   ld	(de),a
 155+ D22D 13                                   inc	de
 156+ D22E C9                                   ret
 157+ D22F              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ D22F FE 00        EQSHP_DispQtyAtoDE:      cp	0
 159+ D231 28 30                                jr	z,.NoStock
 160+ D233 26 00                                ld h,0
 161+ D235 6F                                   ld l,a
 162+ D236 01 9C FF                             ld	bc,-100
 163+ D239 CD 52 D2                             call	.NumLeadBlank1
 164+ D23C FE 20        .WasLead0:              cp      ' '
 165+ D23E 20 09                                jr      nz,.NotHundredsZero
 166+ D240 0E F6                                ld	c,-10
 167+ D242 CD 52 D2                             call	.NumLeadBlank1
 168+ D245 0E FF                                ld	c,-1
 169+ D247 18 AE                                jr		EQSHP_Num1
 170+ D249 0E F6        .NotHundredsZero:       ld	c,-10
 171+ D24B CD F7 D1                             call	EQSHP_Num1
 172+ D24E 0E FF                                ld	c,-1
 173+ D250 18 A5                                jr		EQSHP_Num1
 174+ D252 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 175+ D254 3C           .NumLeadBlank2:	        inc	a
 176+ D255 09                                   add	hl,bc
 177+ D256 38 FC                                jr	c,.NumLeadBlank2
 178+ D258 FE 30                                cp	'0'
 179+ D25A 20 02                                jr	nz,.DontBlank
 180+ D25C 3E 20        .Blank:                 ld	a,' '
 181+ D25E ED 42        .DontBlank:	            sbc	hl,bc
 182+ D260 12                                   ld	(de),a
 183+ D261 13                                   inc	de
 184+ D262 C9                                   ret
 185+ D263 3E 20        .NoStock:               ld	a,' '
 186+ D265 12                                   ld	(de),a
 187+ D266 13                                   inc	de
 188+ D267 12                                   ld	(de),a
 189+ D268 13                                   inc	de
 190+ D269 3E 2D                                ld	a,'-'
 191+ D26B 12                                   ld	(de),a
 192+ D26C 13                                   inc de
 193+ D26D C9                                   ret
 194+ D26E              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ D26E              EQSHP_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++D26E
   2++D26E              ;">print_boilder_text hl = text structure, b = message count"
   3++D26E              .BoilerTextLoop:
   4++D26E C5           	push		bc			; Save Message Count loop value
   5++D26F 4E           	ld			c,(hl)		; Get Row into b
   6++D270 23           	inc			hl
   7++D271 46           	ld			b,(hl)		; Get Col into b
   8++D272 23           	inc			hl
   9++D273 5E           	ld			e,(hl)		; Get text address Lo into E
  10++D274 23           	inc			hl
  11++D275 56           	ld			d,(hl)		; Get text address Hi into E
  12++D276 23           	inc			hl
  13++D277 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++D278 EB           	ex			de,hl		; now hl = address of text data
  15++D279 1E FF        	ld			e,txt_status_colour
  16++D27B C5           	push		bc
  17++D27C D1           	pop			de
  18++D27D                  MMUSelectLayer1
  18++D27D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++D281 CD C8 E0     	call		l1_print_at
  20++D284 E1           	pop			hl
  21++D285 C1           	pop			bc
  22++D286 10 E6        	djnz		.BoilerTextLoop
  23++D288 C9           	ret
  24++D289
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 196+ D289              ;----------------------------------------------------------------------------------------------------------------------------------
 197+ D289 2A 79 86     eqshp_GetCash:          ld		hl,(Cash+2)
 198+ D28C EB                                   ex      de,hl
 199+ D28D DD 2A 77 86                          ld      ix,(Cash)
 200+ D291 FD 21 70 C0                          ld		iy,eqshp_cash_amount
 201+ D295 CD 32 D1                             call 	eqshp_DispDEIXtoIY1DP
 202+ D298 FD E5                                push    IY
 203+ D29A D1                                   pop     de
 204+ D29B 21 84 C0                             ld      hl,eqshp_cash_UoM
 205+ D29E 01 0B 00                             ld      bc,11
 206+ D2A1 ED B0                                ldir
 207+ D2A3 C9                                   ret
 208+ D2A4              ;----------------------------------------------------------------------------------------------------------------------------------
 209+ D2A4 CD 89 D2     eqshp_DisplayCash:      call	eqshp_GetCash
 210+ D2A7 21 70 C0                             ld		hl,eqshp_cash_amount
 211+ D2AA 11 48 B0                             ld      de,eqshp_cash_position
 212+ D2AD                                      MMUSelectLayer1
 212+ D2AD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 213+ D2B1 CD C8 E0                             call	l1_print_at
 214+ D2B4 C9                                   ret
 215+ D2B5              ;----------------------------------------------------------------------------------------------------------------------------------
 216+ D2B5 7E           eqshp_expand_word:      ld      a,(hl)
 217+ D2B6 FE 00                                cp      0
 218+ D2B8 C8                                   ret     z
 219+ D2B9 12                                   ld      (de),a
 220+ D2BA 23                                   inc     hl
 221+ D2BB 13                                   inc     de
 222+ D2BC 18 F7                                jr      eqshp_expand_word
 223+ D2BE
 224+ D2BE              ; hl = list of words
 225+ D2BE              ; de = adress to expand to
 226+ D2BE 7E           eqshp_expand_name:      ld      a,(hl)
 227+ D2BF 47                                   ld      b,a
 228+ D2C0 23                                   inc     hl
 229+ D2C1 7E                                   ld      a,(hl)              ; its a 16 bit
 230+ D2C2 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 231+ D2C3 B0                                   or      b
 232+ D2C4 20 01                                jr      nz,.MoreToDo
 233+ D2C6              ;                        ld      (de),a we dont want the null marker now
 234+ D2C6 C9                                   ret
 235+ D2C7 E5 D5        .MoreToDo:              push    hl,,de
 236+ D2C9 7E                                   ld      a,(hl)              ; bodge for now no optimise
 237+ D2CA 5F                                   ld      e,a
 238+ D2CB 23                                   inc     hl
 239+ D2CC 7E                                   ld      a,(hl)
 240+ D2CD 57                                   ld      d,a
 241+ D2CE EB                                   ex      hl,de               ; hl is now Word... address
 242+ D2CF D1                                   pop     de                  ; de back to pointer to buffer
 243+ D2D0 CD B5 D2     .ProcessWord:           call    eqshp_expand_word
 244+ D2D3 3E 20                                ld      a," "               ; speculative space
 245+ D2D5 12                                   ld      (de),a
 246+ D2D6 13                                   inc     de
 247+ D2D7 E1                                   pop     hl                  ; get string pointer back
 248+ D2D8 23                                   inc     hl
 249+ D2D9 23                                   inc     hl                  ; on to next word
 250+ D2DA 18 E2                                jr      eqshp_expand_name
 251+ D2DC
 252+ D2DC 21 92 C0     eqshp_buffer_list:      ld      hl,eqship_display_buffer                    ; hl - target buffer
 253+ D2DF 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 254+ D2E1 11 00 10                             ld      de, eqship_display_buff_len
 255+ D2E4 CD A3 7C                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 256+ D2E7 21 B1 C0                             ld      hl,eqship_display_buffer+eqship_buffer_row_len-1
 257+ D2EA 11 20 00                             ld      de,eqship_buffer_row_len
 258+ D2ED 06 1A                                ld      b,ShipEquipTableSize
 259+ D2EF AF                                   xor     a
 260+ D2F0 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 261+ D2F1 19                                   add     hl,de
 262+ D2F2 10 FC                                djnz    .EoLLoop
 263+ D2F4 06 1A                                ld      b,ShipEquipTableSize                        ; CurrentGameMaxEquipment
 264+ D2F6 DD 21 D6 F4                          ld      ix,ShipEquipmentList                        ; ix = equipment master table
 265+ D2FA FD 21 92 C0                          ld      iy,eqship_display_buffer                    ; iy = target buffer
 266+ D2FE 0E 00                                ld      c,0                                         ; Current Row
 267+ D300 DD 7E 01     .ProcessRow:            ld      a,(ix+1)                                    ; get can buy
 268+ D303 FE FF                                cp      $FF                                         ; if its $FF then do not display
 269+ D305 C2 12 D3                             jp      nz,.BufferItem
 270+ D308 11 10 00     .DoNotDisplay:          ld      de,ShipEquipTableRowLen                     ; mov eto next equipment list, 7 =  row length
 271+ D30B DD 19                                add     ix,de
 272+ D30D 10 F1                                djnz    .ProcessRow
 273+ D30F C3 75 D3                             jp      .DoneProcess
 274+ D312 FD E5 DD E5  .BufferItem:            push    iy,,ix,,bc
 274+ D316 C5
 275+ D317 DD 7E 00                             ld      a,(ix+0)                                    ; get can buy
 276+ D31A 21 92 D0                             ld      hl,eqship_buyable_buffer                    ;
 277+ D31D 59                                   ld      e,c
 278+ D31E 16 00                                ld      d,0                                         ;
 279+ D320 19                                   add     hl,de                                       ;
 280+ D321 77                                   ld      (hl),a                                      ; set buyable to 0
 281+ D322 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 282+ D325 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length
 283+ D327 59                                   ld      e,c
 284+ D328 ED 30                                mul
 285+ D32A 19                                   add     hl,de                                       ; hl = dword list of work pointers
 286+ D32B FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 287+ D32F C5                                   push    bc
 288+ D330 CD BE D2                             call    eqshp_expand_name                           ; expand name
 289+ D333 C1                                   pop     bc
 290+ D334 11 15 00                             ld      de,eqship_buffer_cash_col                   ; move buffer column to 20
 291+ D337 FD 19                                add     iy,de
 292+ D339 FD E5                                push    iy
 293+ D33B DD 7E 04                             ld      a,(ix+4)
 294+ D33E 5F                                   ld      e,a
 295+ D33F DD 7E 05                             ld      a,(ix+5)
 296+ D342 57                                   ld      d,a                                         ; de = price
 297+ D343 DD 62 DD 6B                          ld      ix,de
 298+ D347                                      ;push    de
 299+ D347                                      ;pop     ix
 300+ D347 11 00 00                             ld      de,0                                        ; deix = price
 301+ D34A CD 49 D1                             call    eqshp_DispDEIXtoIY                          ; print it to pos IY
 302+ D34D 3E 20                                ld      a," "
 303+ D34F FD 77 00                             ld      (IY+0),a
 304+ D352 FD 77 01                             ld      (IY+1),a
 305+ D355 FD 77 02                             ld      (IY+2),a
 306+ D358 FD E1                                pop     iy
 307+ D35A CD 7A D3                             call    .RightJustify
 308+ D35D C1 DD E1 FD                          pop     iy,,ix,,bc
 308+ D361 E1
 309+ D362 DD 7E 07     .CheckFitted:           ld      a,(ix+7)
 310+ D365 FD 77 1D                             ld      (iy+eqship_fitted_module),a
 311+ D368 11 20 00                             ld      de,eqship_buffer_row_len
 312+ D36B FD 19                                add     iy,de                                       ; now iy = start of next column
 313+ D36D 11 10 00                             ld      de,ShipEquipTableRowLen
 314+ D370 DD 19                                add     ix,de
 315+ D372 0C                                   inc     c
 316+ D373 10 8B                                djnz    .ProcessRow
 317+ D375 79           .DoneProcess:           ld      a,c
 318+ D376 32 91 C0                             ld      (eqshp_current_end),a
 319+ D379 C9                                   ret
 320+ D37A CD 7D D3     .RightJustify:          call    .RightJustify2
 321+ D37D CD 80 D3     .RightJustify2:         call    .RightJustify3
 322+ D380 FD 7E 03     .RightJustify3:         ld      a,(iy+3)
 323+ D383 FE 20                                cp      " "
 324+ D385 CC 89 D3                             call    z,.ShuffleRight
 325+ D388 C9                                   ret
 326+ D389 FD E5        .ShuffleRight:          push    iy
 327+ D38B E1                                   pop     hl
 328+ D38C 3E 03                                ld      a,3
 329+ D38E ED 31                                add     hl,a
 330+ D390 FD 7E 02                             ld      a,(iy+2)
 331+ D393 77                                   ld      (hl),a
 332+ D394 2B                                   dec     hl
 333+ D395 FD 7E 01                             ld      a,(iy+1)
 334+ D398 77                                   ld      (hl),a
 335+ D399 2B                                   dec     hl
 336+ D39A FD 7E 00                             ld      a,(iy+0)
 337+ D39D 77                                   ld      (hl),a
 338+ D39E 2B                                   dec     hl
 339+ D39F 3E 20                                ld      a," "
 340+ D3A1 77                                   ld      (hl),a
 341+ D3A2 C9                                   ret
 342+ D3A3
 343+ D3A3
 344+ D3A3              draw_eqship_items:      MMUSelectLayer1
 344+ D3A3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 345+ D3A7 CD 80 E0                             call    l1_cls
 346+ D3AA 06 03                                ld		b,3
 347+ D3AC 21 0D C0                             ld		hl,eqshp_boiler_text
 348+ D3AF CD 6E D2                             call	EQSHP_print_boiler_text
 349+ D3B2 CD A4 D2                             call    eqshp_DisplayCash
 350+ D3B5 3A 90 C0                             ld      a,(eqshp_current_topItem)
 351+ D3B8 16 20                                ld      d,eqship_buffer_row_len
 352+ D3BA 5F                                   ld      e,a
 353+ D3BB ED 30                                mul
 354+ D3BD 21 92 C0                             ld      hl,eqship_display_buffer
 355+ D3C0 19                                   add     hl,de
 356+ D3C1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 357+ D3C4 47                                   ld      b,a
 358+ D3C5 3A 91 C0                             ld      a,(eqshp_current_end)
 359+ D3C8 90                                   sub     b
 360+ D3C9                                      JumpIfALTNusng  18, .FillScreen
 360+ D3C9 FE 12       >                        cp      18
 360+ D3CB DA D2 D3    >                        jp		c, .FillScreen
 361+ D3CE 06 12        .JustWindowing:         ld      b,18
 362+ D3D0 18 01                                jr      .ReadyToPrint
 363+ D3D2 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 364+ D3D3 11 08 18     .ReadyToPrint:          ld      de,eqshp_position
 365+ D3D6 D5 E5 C5     .DrawARow:              push    de,,hl,,bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 366+ D3D9 CD C8 E0                             call    l1_print_at
 366+ D3DC
 367+ D3DC C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 368+ D3DE 11 20 00                             ld      de,eqship_buffer_row_len
 369+ D3E1 19                                   add     hl,de
 370+ D3E2 D1                                   pop     de                          ; get output row back
 371+ D3E3 3E 08                                ld      a,8
 372+ D3E5 82                                   add     a,d
 373+ D3E6 57                                   ld      d,a
 374+ D3E7 10 ED                                djnz    .DrawARow
 375+ D3E9 C9                                   ret
 376+ D3EA
 377+ D3EA              draw_eqshp_menu:        InitNoDoubleBuffer
 377+ D3EA             >                            MMUSelectLayer1
 377+ D3EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 377+ D3EE CD 80 E0    >                            call	l1_cls
 377+ D3F1 3E 07       >                            ld		a,7
 377+ D3F3 CD 9B E0    >                            call	l1_attr_cls_to_a
 377+ D3F6             >                            MMUSelectLayer2
 377+ D3F6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 377+ D3FA CD 09 E0    >                            call    asm_l2_double_buffer_off
 377+ D3FD CD FF E0    >                            call	l2_cls	; Get some space
 377+ D400             >                            MMUSelectSpriteBank
 377+ D400 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 377+ D404 CD 6E E5    >                            call    sprite_cls_cursors
 378+ D407 3E 20                                ld      a,$20
 379+ D409 32 1E 81                             ld      (MenuIdMax),a
 380+ D40C 3A 08 82     .SetData:               ld      a,(Galaxy)
 381+ D40F                                      MMUSelectGalaxyA
 381+ D40F ED 92 57    >                     nextreg GalaxyDataMMU,       a
 382+ D412 CD 6D F9                             call    galaxy_planet_data
 383+ D415 CD F5 F8                             call    galaxy_equip_market
 384+ D418 ED 4B 1B 82                          ld      bc,(PresentSystemX)
 385+ D41C CD BB FA                             call    galaxy_name_at_bc
 386+ D41F CD 6D F9                             call    galaxy_planet_data
 387+ D422 AF                                   xor     a
 388+ D423 32 90 C0                             ld      (eqshp_current_topItem),a
 389+ D426 CD DC D2                             call    eqshp_buffer_list
 390+ D429 01 01 01     .Drawbox:               ld		bc,$0101
 391+ D42C 11 FD BE                             ld		de,$BEFD
 392+ D42F 3E C0                                ld		a,$C0
 393+ D431                                      MMUSelectLayer2
 393+ D431 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 394+ D435 CD 49 E2                             call	l2_draw_box
 395+ D438 01 01 0A                             ld		bc,$0A01
 396+ D43B 11 C0 FE                             ld		de,$FEC0
 397+ D43E CD B3 E2                             call	l2_draw_horz_line
 398+ D441 3A 08 82     .StaticText:	        ld      a,(Galaxy)
 399+ D444                                      MMUSelectGalaxyA
 399+ D444 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 400+ D447 3E 19                                ld		a,25
 401+ D449 CD B1 8E                             call	expandTokenToString
 402+ D44C CD 7A F6                             call	GetDigramGalaxySeed
 403+ D44F CD A3 D3                             call    draw_eqship_items
 404+ D452 AF           .InitialHighlight:      xor     a
 405+ D453 32 8F C0                             ld      (eqshp_selected_row),a        ; assume on row zero
 406+ D456 CD 12 D1                             call    eqshp_highlight_row
 407+ D459 CD A4 D2     .DisCash:               call    eqshp_DisplayCash
 408+ D45C C9                                   ret
 409+ D45D
 410+ D45D              ;----------------------------------------------------------------------------------------------------------------------------------
 411+ D45D CD DC D2     eqip_refesh_buffer:     call    eqshp_buffer_list
 412+ D460 3A 8F C0                             ld      a,(eqshp_selected_row)              ; get revised list length
 413+ D463 47                                   ld      b,a
 414+ D464 3A 90 C0                             ld      a,(eqshp_current_topItem)           ; get current top of screen
 415+ D467 4F                                   ld      c,a
 416+ D468 80                                   add     b                                   ; a = top + selected row
 417+ D469 21 91 C0                             ld      hl,eqshp_current_end
 418+ D46C                                      CallIfAGTENusng (hl), .NewListShorter       ; if a > new list len then rebuild
 418+ D46C BE          >                        cp      (hl)
 418+ D46D D4 73 D4    >                        call	nc,.NewListShorter
 419+ D470 C3 7F D4                             jp      .RedrawList
 420+ D473 C5           .NewListShorter:        push    bc
 421+ D474 CD 22 D1                             call    eqshp_lowlight_row
 422+ D477 C1                                   pop     bc
 423+ D478 3A 91 C0                             ld      a,(eqshp_current_end)               ; b = end of list
 424+ D47B 91                                   sub     c                                   ; minus current top
 425+ D47C 32 8F C0                             ld      (eqshp_selected_row),a
 426+ D47F CD 12 D1     .RedrawList:            call    eqshp_highlight_row
 427+ D482 CD A3 D3                             call    draw_eqship_items
 428+ D485 C9                                   ret
 429+ D486
 430+ D486              ;----------------------------------------------------------------------------------------------------------------------------------
 431+ D486              ; Handles all the input whilst in the market menu
 432+ D486 3E 4A        loop_eqshp_menu:        ld      a,c_Pressed_CursorUp
 433+ D488 CD 08 7E                             call    is_key_pressed
 434+ D48B CC A7 D4                             call    z,eqshp_UpPressed
 435+ D48E 3E 4C                                ld      a,c_Pressed_CursorDown
 436+ D490 CD 08 7E                             call    is_key_pressed
 437+ D493 CC C7 D4                             call    z,eqshp_DownPressed
 438+ D496 3E 08                                ld      a,c_Pressed_RollLeft
 439+ D498 CD 08 7E                             call    is_key_pressed
 440+ D49B CC F3 D4                             call    z,eqshp_LeftPressed
 441+ D49E 3E 0A                                ld      a,c_Pressed_RollRight
 442+ D4A0 CD 08 7E                             call    is_key_pressed
 443+ D4A3 CC 68 D5                             call    z,eqshp_RightPressed
 444+ D4A6 C9                                   ret
 445+ D4A7
 446+ D4A7              ;----------------------------------------------------------------------------------------------------------------------------------
 447+ D4A7 3A 8F C0     eqshp_UpPressed:        ld      a,(eqshp_selected_row)
 448+ D4AA FE 00                                cp      0
 449+ D4AC 28 0B                                jr      z,.check_scroll_up
 450+ D4AE CD 22 D1                             call    eqshp_lowlight_row
 451+ D4B1 21 8F C0                             ld      hl,eqshp_selected_row
 452+ D4B4 35                                   dec     (hl)
 453+ D4B5 CD 12 D1                             call    eqshp_highlight_row
 454+ D4B8 C9                                   ret
 455+ D4B9 3A 90 C0     .check_scroll_up:       ld      a,(eqshp_current_topItem)
 456+ D4BC FE 00                                cp      0
 457+ D4BE C8                                   ret     z
 458+ D4BF 3D                                   dec     a           ; chjange later to buffering step back 1
 459+ D4C0 32 90 C0                             ld      (eqshp_current_topItem),a
 460+ D4C3 CD A3 D3                             call    draw_eqship_items
 461+ D4C6 C9                                   ret
 462+ D4C7              ;----------------------------------------------------------------------------------------------------------------------------------
 463+ D4C7 3A 91 C0     eqshp_DownPressed:      ld      a,(eqshp_current_end)
 464+ D4CA 47                                   ld      b,a                             ; This check is if the current list is < one screen
 465+ D4CB 05                                   dec     b
 466+ D4CC 3A 8F C0                             ld      a,(eqshp_selected_row)
 467+ D4CF B8                                   cp      b
 468+ D4D0 C8                                   ret     z
 469+ D4D1 FE 11                                cp      17
 470+ D4D3 28 0B                                jr      z, .check_scroll_down
 471+ D4D5 CD 22 D1                             call    eqshp_lowlight_row
 472+ D4D8 21 8F C0                             ld      hl,eqshp_selected_row
 473+ D4DB 34                                   inc     (hl)
 474+ D4DC CD 12 D1                             call    eqshp_highlight_row
 475+ D4DF C9                                   ret
 476+ D4E0 47           .check_scroll_down:     ld      b,a
 477+ D4E1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 478+ D4E4 80                                   add     b
 479+ D4E5 3C                                   inc     a
 480+ D4E6 21 91 C0                             ld      hl,eqshp_current_end
 481+ D4E9                                      ReturnIfAGTEusng      (hl)
 481+ D4E9 BE          >                        cp    (hl)
 481+ D4EA D0          >                        ret	 nc
 482+ D4EB 21 90 C0     .can_scroll_down:       ld      hl,eqshp_current_topItem
 483+ D4EE 34                                   inc     (hl)
 484+ D4EF CD A3 D3                             call    draw_eqship_items
 485+ D4F2 C9                                   ret
 486+ D4F3              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ D4F3 3A 08 82     eqshp_LeftPressed:      ld      a,(Galaxy)
 488+ D4F6                                      MMUSelectGalaxyA
 488+ D4F6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 489+ D4F9 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 490+ D4FD 3A 90 C0     .IsItFuel:              ld      a,(eqshp_current_topItem)   ; Can't refund fuel
 491+ D500 47                                   ld      b,a
 492+ D501 3A 8F C0                             ld      a,(eqshp_selected_row)
 493+ D504 80                                   add     b
 494+ D505 FE 00                                cp      0
 495+ D507 C8                                   ret     z
 496+ D508 4F           .FuelNotSelected:       ld      c,a
 497+ D509 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 498+ D50B 5F                                   ld      e,a
 499+ D50C ED 30                                mul
 500+ D50E DD 19                                add     ix,de
 501+ D510 DD 7E 07                             ld      a,(ix+7)
 502+ D513 FE 2D                                cp      "-"
 503+ D515 C8                                   ret     z
 504+ D516 79           .CheckIfMissle:         ld      a,c
 505+ D517 FE 01                                cp      EQ_MISSILE
 506+ D519 28 2F                                jr      z,.RefundMissle
 507+ D51B DD 5E 04     .RefundItemCash:        ld      e,(ix+4)
 508+ D51E DD 56 05                             ld      d,(ix+5)
 509+ D521 E5 C5                                push    hl,,bc
 510+ D523 CD 71 91                             call    addDEtoCash         ; refund laser value
 511+ D526 C1 E1                                pop     hl,,bc
 512+ D528 3E 2D                                ld      a,"-"
 513+ D52A DD 77 07                             ld      (ix+7),a
 514+ D52D 21 96 86                             ld      hl,EquipmentFitted
 515+ D530 79                                   ld      a,c                 ; get back current laser ref
 516+ D531 ED 31                                add     hl,a
 517+ D533 36 00                                ld      (hl),EquipmentItemNotFitted; remove laser from equipment
 518+ D535 CD 5D D4                             call    eqip_refesh_buffer
 519+ D538 DD 7E 08                             ld      a,(ix+8)
 520+ D53B FE FF                                cp      $FF
 521+ D53D C8                                   ret     z
 522+ D53E 21 8E 86     .ItsALaser              ld      hl,LaserType        ; clear out respective current laser
 523+ D541 47                                   ld      b,a
 524+ D542 DD 7E 09                             ld      a,(ix+9)
 525+ D545 ED 31                                add     hl,a
 526+ D547 36 FF                                ld      (hl),$FF            ; $FF = not fitted
 527+ D549 C9                                   ret
 528+ D54A DD 5E 04     .RefundMissle           ld      e,(ix+4)
 529+ D54D DD 56 05                             ld      d,(ix+5)
 530+ D550 E5 C5                                push    hl,,bc
 531+ D552 CD 71 91                             call    addDEtoCash         ; refund laser value
 532+ D555 C1 E1                                pop     hl,,bc
 533+ D557 DD 7E 07                             ld      a,(ix+7)
 534+ D55A 3D                                   dec     a
 535+ D55B FE 30                                cp      "0"
 536+ D55D 20 02                                jr      nz,.NotAllSold
 537+ D55F 3E 2D        .AllSold:               ld      a,"-"
 538+ D561 DD 77 07     .NotAllSold:            ld      (ix+7),a
 539+ D564 CD 5D D4                             call    eqip_refesh_buffer
 540+ D567 C9                                   ret
 541+ D568              ;----------------------------------------------------------------------------------------------------------------------------------
 542+ D568 3A 08 82     eqshp_RightPressed:     ld      a,(Galaxy)
 543+ D56B                                      MMUSelectGalaxyA
 543+ D56B ED 92 57    >                     nextreg GalaxyDataMMU,       a
 544+ D56E DD 21 D6 F4                          ld      ix,ShipEquipmentList
 545+ D572 3A 90 C0                             ld      a,(eqshp_current_topItem)
 546+ D575 47                                   ld      b,a
 547+ D576 3A 8F C0                             ld      a,(eqshp_selected_row)
 548+ D579 80                                   add     a,b
 549+ D57A FE 01                                cp      EQ_MISSILE
 550+ D57C 20 0A                                jr      nz,.NotAMissileBuy
 551+ D57E 08           .ItsAMissile:           ex      af,af'
 552+ D57F 3E 34                                ld      a,"4"
 553+ D581 32 9A D5                             ld      (.CompareCheck+1),a
 554+ D584 08                                   ex      af,af'
 555+ D585 C3 8F D5                             jp      .FindInTable
 556+ D588 08           .NotAMissileBuy:        ex      af,af'
 557+ D589 3E 2A                                ld      a,"*"
 558+ D58B 32 9A D5                             ld      (.CompareCheck+1),a
 559+ D58E 08                                   ex      af,af'
 560+ D58F 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 561+ D591 5F                                   ld      e,a
 562+ D592 ED 30                                mul
 563+ D594 DD 19                                add     ix,de
 564+ D596 DD 7E 07                             ld      a,(ix+7)
 565+ D599 FE 2A        .CompareCheck:          cp      "*"; not true for missles astyou can buy 1 to 4
 566+ D59B C8                                   ret     z
 567+ D59C 47           .Purchasable:           ld      b,a
 568+ D59D DD 7E 06                             ld      a,(ix+6)
 569+ D5A0 FE 01                                cp      EQ_MISSILE
 570+ D5A2 20 06                                jr      nz,.NotMissleMax
 571+ D5A4 21 7E 81     .MissleQuanity:         ld      hl,NbrMissiles
 572+ D5A7 78                                   ld      a,b
 573+ D5A8 BE                                   cp      (hl)
 574+ D5A9 C8                                   ret     z
 575+ D5AA 4F           .NotMissleMax:          ld      c,a
 576+ D5AB DD 7E 01                             ld      a,(ix+1)
 577+ D5AE FE FF                                cp      $FF
 578+ D5B0 C8                                   ret     z
 579+ D5B1              .CheckCash:             JumpIfMemIsNotZero  Cash+2 , .MoreThanRequired      ; Nothing in game > 65535CR
 579+ D5B1 3A 79 86    >                        ld      a,(Cash+2)
 579+ D5B4 A7          >                        and     a
 579+ D5B5 C2 C5 D5    >                        jp	    nz,.MoreThanRequired
 580+ D5B8 2A 77 86                             ld      hl,(Cash)                                   ; hl = lower 16 bits of cash
 581+ D5BB DD 5E 04                             ld      e,(ix+4)
 582+ D5BE DD 56 05                             ld      d,(ix+5)
 583+ D5C1 CD F1 96                             call	compare16HLDE
 584+ D5C4 D8                                   ret     c                                           ; Insufficient Funds
 585+ D5C5 DD 7E 06     .MoreThanRequired:      ld      a,(ix+6)
 586+ D5C8 FE 00                                cp      0
 587+ D5CA 28 15                                jr      z,.MaxFuelOut
 588+ D5CC FE 01                                cp      1
 589+ D5CE 28 1B                                jr      z,.AddMissle
 590+ D5D0                                      JumpIfAGTENusng  EQ_FRONT_PULSE,.AddLaser
 590+ D5D0 FE 0A       >                        cp     EQ_FRONT_PULSE
 590+ D5D2 D2 F5 D5    >                        jp		nc,.AddLaser
 591+ D5D5 21 96 86     .AddNormalItem:         ld      hl,EquipmentFitted
 592+ D5D8 ED 31                                add     hl,a
 593+ D5DA 36 FF                                ld      (hl),EquipmentItemFitted
 594+ D5DC 3E 2A                                ld      a,"*"
 595+ D5DE C3 3D D6                             jp      .AddedItem
 596+ D5E1              .MaxFuelOut:            MaxFuelMacro
 596+ D5E1 3E 46       >						ld		a,MaxFuelLevel
 596+ D5E3 32 7B 86    >						ld		(Fuel),a
 597+ D5E6 3E 2A                                ld      a,"*"
 598+ D5E8 C3 3D D6                             jp      .AddedItem
 599+ D5EB 21 7E 81     .AddMissle:             ld      hl,NbrMissiles
 600+ D5EE 34                                   inc     (hl)
 601+ D5EF 7E                                   ld      a,(hl)
 602+ D5F0 C6 30                                add     "0"
 603+ D5F2 C3 3D D6                             jp      .AddedItem
 604+ D5F5 DD 7E 08     .AddLaser:              ld      a,(ix+8)            ; Get if its a laser, $FF = no laser
 605+ D5F8 FE FF                                cp      $FF
 606+ D5FA 20 29                                jr      nz,.BuyLaser
 607+ D5FC              .LargeCargoBay: ;TODO
 608+ D5FC 4F           .RefundExistingLaser:   ld      c,a                 ; retain current laser nbr
 609+ D5FD 21 D6 F4                             ld      hl,ShipEquipmentList
 610+ D600 16 10                                ld      d,ShipEquipTableRowLen
 611+ D602 5F                                   ld      e,a
 612+ D603 ED 30                                mul
 613+ D605 19                                   add     hl,de               ; now we have the row for the current laser
 614+ D606 3E 04                                ld      a,4
 615+ D608 ED 31                                add     hl,a
 616+ D60A 7E                                   ld      a,(hl)
 617+ D60B 5F                                   ld      e,a
 618+ D60C 23                                   inc     hl
 619+ D60D 7E                                   ld      a,(hl)
 620+ D60E 57                                   ld      d,a
 621+ D60F E5 C5                                push    hl,,bc
 622+ D611 CD 71 91                             call    addDEtoCash         ; refund laser value
 623+ D614 C1 E1                                pop     hl,,bc
 624+ D616 3E 02                                ld      a,2
 625+ D618 ED 31                                add     hl,a
 626+ D61A 3E 2D                                ld      a,"-"
 627+ D61C 77                                   ld      (hl),a              ; clear on ship equipment
 628+ D61D 21 96 86                             ld      hl,EquipmentFitted
 629+ D620 79                                   ld      a,c                 ; get back current laser ref
 630+ D621 ED 31                                add     hl,a
 631+ D623 36 00                                ld      (hl),EquipmentItemNotFitted  ; remove laser from equipment
 632+ D625 21 96 86     .BuyLaser:              ld      hl,EquipmentFitted
 633+ D628 DD 7E 06                             ld      a,(ix+6)
 634+ D62B ED 31                                add     hl,a
 635+ D62D 36 FF                                ld      (hl),EquipmentItemFitted
 636+ D62F DD 7E 09                             ld      a,(ix+9)            ; get laser position
 637+ D632 21 8E 86                             ld      hl,LaserType
 638+ D635 ED 31                                add     hl,a
 639+ D637 DD 7E 08                             ld      a,(ix+8)            ; get type
 640+ D63A 77                                   ld      (hl),a
 641+ D63B 3E 2A                                ld      a,"*"
 642+ D63D DD 77 07     .AddedItem              ld      (ix+7),a
 643+ D640 DD 5E 04                             ld      e,(ix+4)
 644+ D643 DD 56 05                             ld      d,(ix+5)
 645+ D646 CD 84 91                             call    subDEfromCash
 646+ D649 CD 5D D4                             call    eqip_refesh_buffer
 647+ D64C C9                                   ret
# file closed: ./Menus/equip_ship_menu.asm
 803  D64D                  DISPLAY "Bank ",BankMenuEquipS," - Bytes free ",/D, $2000 - ($-MenuEquipSAddr), " - BankMenuEquipS"
 804  D64D              ; Bank 65  ------------------------------------------------------------------------------------------------------------------------
 805  D64D                                  SLOT    LaunchShipAddr
 806  D64D                                  PAGE    BankLaunchShip
 807  D64D                                  ORG     LaunchShipAddr
 808  C000                                  INCLUDE "./Transitions/launch_ship.asm"
# file opened: ./Transitions/launch_ship.asm
   1+ C000 4C 61 75 6E  launchship_page_marker  DB "LaunchShipPG65"
   1+ C004 63 68 53 68
   1+ C008 69 70 50 47
   1+ C00C 36 35
   2+ C00E
   3+ C00E 7E 3F 04 02  launchdraw_table        DB $7E,$3F, $04,$02, $66            ; purple blue
   3+ C012 66
   4+ C013              launchdraw_rowsize      equ $-launchdraw_table
   5+ C013 7C 3E 08 04                          DB $7C,$3E, $08,$04, $66
   5+ C017 66
   6+ C018 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $66
   6+ C01C 66
   7+ C01D 78 3C 10 08                          DB $78,$3C, $10,$08, $66
   7+ C021 66
   8+ C022 76 3B 14 0A                          DB $76,$3B, $14,$0A, $66
   8+ C026 66
   9+ C027 74 3A 18 0C                          DB $74,$3A, $18,$0C, $66
   9+ C02B 66
  10+ C02C 70 38 20 10                          DB $70,$38, $20,$10, $66
  10+ C030 66
  11+ C031 6C 36 28 14                          DB $6C,$36, $28,$14, $05            ; Black Blue
  11+ C035 05
  12+ C036 68 34 30 18                          DB $68,$34, $30,$18, $05
  12+ C03A 05
  13+ C03B 64 32 38 1C                          DB $64,$32, $38,$1C, $05
  13+ C03F 05
  14+ C040 60 30 40 20                          DB $60,$30, $40,$20, $05
  14+ C044 05
  15+ C045 5C 2E 48 24                          DB $5C,$2E, $48,$24, $05            ; Dark Blue
  15+ C049 05
  16+ C04A 58 2C 50 28                          DB $58,$2C, $50,$28, $02
  16+ C04E 02
  17+ C04F 54 2A 58 2C                          DB $54,$2A, $58,$2C, $02
  17+ C053 02
  18+ C054 50 28 60 30                          DB $50,$28, $60,$30, $02
  18+ C058 02
  19+ C059 4C 26 68 34                          DB $4C,$26, $68,$34, $02
  19+ C05D 02
  20+ C05E 46 23 74 3A                          DB $46,$23, $74,$3A, $02
  20+ C062 02
  21+ C063 40 20 80 40                          DB $40,$20, $80,$40, $02
  21+ C067 02
  22+ C068 38 1C 90 48                          DB $38,$1C, $90,$48, $01            ;Very Dark Blue
  22+ C06C 01
  23+ C06D 30 18 A0 50                          DB $30,$18, $A0,$50, $01
  23+ C071 01
  24+ C072 26 13 B4 5A                          DB $26,$13, $B4,$5A, $01
  24+ C076 01
  25+ C077 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $01
  25+ C07B 01
  26+ C07C 10 08 E0 70                          DB $10,$08, $E0,$70, $00            ;Black
  26+ C080 00
  27+ C081 02 01 FC 7E                          DB $02,$01, $FC,$7E, $00
  27+ C085 00
  28+ C086 FF                                   DB $FF
  29+ C087
  30+ C087              launchtablesize         EQU ($ - launchdraw_table)/launchdraw_rowsize
  31+ C087
  32+ C087 7E 3F 04 02  dockingdraw_table       DB $7E,$3F, $04,$02, $00            ; purple blue
  32+ C08B 00
  33+ C08C              dockingdraw_rowsize     equ $-dockingdraw_table
  34+ C08C 7C 3E 08 04                          DB $7C,$3E, $08,$04, $00
  34+ C090 00
  35+ C091 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $00
  35+ C095 00
  36+ C096 78 3C 10 08                          DB $78,$3C, $10,$08, $04
  36+ C09A 04
  37+ C09B 76 3B 14 0A                          DB $76,$3B, $14,$0A, $04
  37+ C09F 04
  38+ C0A0 74 3A 18 0C                          DB $74,$3A, $18,$0C, $04
  38+ C0A4 04
  39+ C0A5 70 38 20 10                          DB $70,$38, $20,$10, $21
  39+ C0A9 21
  40+ C0AA 6C 36 28 14                          DB $6C,$36, $28,$14, $21            ; Black Blue
  40+ C0AE 21
  41+ C0AF 68 34 30 18                          DB $68,$34, $30,$18, $21
  41+ C0B3 21
  42+ C0B4 64 32 38 1C                          DB $64,$32, $38,$1C, $25
  42+ C0B8 25
  43+ C0B9 60 30 40 20                          DB $60,$30, $40,$20, $25
  43+ C0BD 25
  44+ C0BE 5C 2E 48 24                          DB $5C,$2E, $48,$24, $25            ; Dark Blue
  44+ C0C2 25
  45+ C0C3 58 2C 50 28                          DB $58,$2C, $50,$28, $25
  45+ C0C7 25
  46+ C0C8 54 2A 58 2C                          DB $54,$2A, $58,$2C, $25
  46+ C0CC 25
  47+ C0CD 50 28 60 30                          DB $50,$28, $60,$30, $4C
  47+ C0D1 4C
  48+ C0D2 4C 26 68 34                          DB $4C,$26, $68,$34, $4C
  48+ C0D6 4C
  49+ C0D7 46 23 74 3A                          DB $46,$23, $74,$3A, $4C
  49+ C0DB 4C
  50+ C0DC 40 20 80 40                          DB $40,$20, $80,$40, $4C
  50+ C0E0 4C
  51+ C0E1 38 1C 90 48                          DB $38,$1C, $90,$48, $6D            ;Very Dark Blue
  51+ C0E5 6D
  52+ C0E6 30 18 A0 50                          DB $30,$18, $A0,$50, $6D
  52+ C0EA 6D
  53+ C0EB 26 13 B4 5A                          DB $26,$13, $B4,$5A, $6D
  53+ C0EF 6D
  54+ C0F0 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $6D
  54+ C0F4 6D
  55+ C0F5 10 08 E0 70                          DB $10,$08, $E0,$70, $92            ;Black
  55+ C0F9 92
  56+ C0FA 02 01 FC 7E                          DB $02,$01, $FC,$7E, $92
  56+ C0FE 92
  57+ C0FF FF                                   DB $FF
  58+ C100
  59+ C100              dockingtablesize         EQU ($ - dockingdraw_table)/dockingdraw_rowsize
  60+ C100
  61+ C100              init_countdown          EQU $FF
  62+ C100 00           launch_countdown        DB  $0000
  63+ C101 0E C0        launch_table_idx        DW launchdraw_table
  64+ C103 87 C0        docking_table_idx       DW dockingdraw_table
  65+ C105 00           current_offsetX         db 0
  66+ C106 00           current_offsetY         db 0
  67+ C107
  68+ C107
  69+ C107              LaunchTubeEdges         MMUSelectLayer2
  69+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  70+ C10B 01 00 00                             ld      bc,$0000
  71+ C10E 11 92 01                             ld      de,$0192
  72+ C111 78           .drawLoop1              ld      a,b
  73+ C112 FE 80                                cp      128
  74+ C114 28 25                                jr      z,.DoneEdge
  75+ C116 F5                                   push    af
  76+ C117 C5 D5 C5 D5                          push    bc,,de,,bc,,de
  77+ C11B CD A6 E2                             call    l2_draw_horz_dma_bank           ;"bc = left side row,col, d = length, e = color"
  78+ C11E D1 C1                                pop     bc,,de
  79+ C120 3E FF                                ld      a,$FF
  80+ C122 92                                   sub     d
  81+ C123 4F                                   ld      c,a
  82+ C124 0C                                   inc     c
  83+ C125 CD A6 E2                             call    l2_draw_horz_dma_bank
  84+ C128 D1 C1                                pop     bc,,de
  85+ C12A 78                                   ld      a,b
  86+ C12B FE 40                                cp      64
  87+ C12D 30 06                                jr      nc,.ReduceLoop
  88+ C12F 14                                   inc     d
  89+ C130 14                                   inc     d
  90+ C131 F1                                   pop     af
  91+ C132 04                                   inc     b
  92+ C133 18 DC                                jr      .drawLoop1
  93+ C135 15           .ReduceLoop:            dec     d
  94+ C136 15                                   dec     d
  95+ C137 F1                                   pop     af
  96+ C138 04                                   inc     b
  97+ C139 18 D6                                jr      .drawLoop1
  98+ C13B 3E 80        .DoneEdge:              ld      a,$80
  99+ C13D 01 00 00                             ld      bc,$0000                        ; Top Left
 100+ C140 11 FF 80                             ld      de,$80FF                        ; Bottom Right
 101+ C143 CD 5C E6                             call    l2_draw_diagonal
 102+ C146 3E 80                                ld      a,$80
 103+ C148 01 00 80                             ld      bc,$8000                        ; Botom Left
 104+ C14B 11 FF 00                             ld      de,$00FF                        ; Top Right
 105+ C14E CD 5C E6                             call    l2_draw_diagonal
 106+ C151
 107+ C151 01 00 00                             ld      bc,$0000
 108+ C154 11 80 00                             ld      DE,$0080
 109+ C157 26 60                                ld      h,$60
 110+ C159 2E 55                                ld      l,$55
 111+ C15B C9                                   ret
 112+ C15C
 113+ C15C              LaunchConsole:          MMUSelectConsoleBank                    ; Draw Console
 113+ C15C ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 114+ C160 21 00 50                             ld      hl,ScreenL1Bottom
 115+ C163 11 00 E0                             ld      de,ConsoleImageData
 116+ C166 01 00 08                             ld      bc, ScreenL1BottomLen
 117+ C169 CD C9 7C                             call    memcopy_dma
 118+ C16C 21 00 5A                             ld      hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 119+ C16F 11 00 E8                             ld      de,ConsoleAttributes
 120+ C172 01 00 01                             ld      bc, ScreenL1AttrBtmLen
 121+ C175 CD C9 7C                             call    memcopy_dma
 122+ C178 C9                                   ret
 123+ C179
 124+ C179              CoriloisStation         equ     13
 125+ C179
 126+ C179
 127+ C179              draw_launch_ship:       MMUSelectLayer1
 127+ C179 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 128+ C17D CD 80 E0                             call    l1_cls
 129+ C180 CD 9A E0                             call    l1_attr_cls
 130+ C183                                      MMUSelectSpriteBank
 130+ C183 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 131+ C187 CD 6E E5                             call    sprite_cls_cursors
 132+ C18A                                      MMUSelectLayer2
 132+ C18A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 133+ C18E CD 03 E0                             call    asm_l2_double_buffer_on
 134+ C191 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 135+ C193 32 A8 E0                             ld      (l2_cls_byte),a
 136+ C196 CD C8 E0                             call    l2_set_color_upper2
 137+ C199 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 138+ C19B 32 A8 E0                             ld      (l2_cls_byte),a
 139+ C19E CD F4 E0                             call    l2_cls_lower_third
 140+ C1A1 CD 07 C1                             call    LaunchTubeEdges
 141+ C1A4 CD 5C C1                             call    LaunchConsole
 142+ C1A7              .NextBuffer:            MMUSelectLayer2
 142+ C1A7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 143+ C1AB CD 13 E1                             call    l2_flip_buffers
 144+ C1AE 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 145+ C1B0 32 A8 E0                             ld      (l2_cls_byte),a
 146+ C1B3 CD C8 E0                             call    l2_set_color_upper2
 147+ C1B6 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 148+ C1B8 32 A8 E0                             ld      (l2_cls_byte),a
 149+ C1BB CD F4 E0                             call    l2_cls_lower_third
 150+ C1BE CD 07 C1                             call    LaunchTubeEdges
 151+ C1C1 CD 5C C1                             call    LaunchConsole
 152+ C1C4 3E FF        .SetUpTimers:           ld      a,init_countdown
 153+ C1C6 32 00 C1                             ld      (launch_countdown),a
 154+ C1C9 21 0E C0                             ld      hl,launchdraw_table
 155+ C1CC 22 01 C1                             ld      (launch_table_idx),hl
 156+ C1CF AF                                   xor     a
 157+ C1D0 32 05 C1                             ld      (current_offsetX),a
 158+ C1D3 32 06 C1                             ld      (current_offsetY),a
 159+ C1D6              .SetupGalaxy:           MaxThrottle
 159+ C1D6 3A 0C 81    >                        ld      a,(SHIPMAXSPEED)
 159+ C1D9 32 0D 81    >                        ld      (DELTA),a
 159+ C1DC 57          >                        ld      d,a
 159+ C1DD 1E 04       >                        ld      e,4
 159+ C1DF ED 30       >                        mul
 159+ C1E1 ED 53 0E 81 >                        ld      (DELT4Lo),de
 160+ C1E5                                      ZeroThrottle; DEBUG
 160+ C1E5 AF          >                        xor     a
 160+ C1E6 32 0D 81    >                        ld      (DELTA),a
 160+ C1E9 32 0E 81    >                        ld      (DELT4Lo),a
 160+ C1EC 32 0F 81    >                        ld      (DELT4Lo+1),a
 161+ C1EF              ; To launch we need to set docked flag to transition FE and at teh end of the transition set to FD to rebuild universe
 162+ C1EF 3E FE                                ld      a,StateInTransition
 163+ C1F1 32 22 81                             ld      (DockedFlag),a
 164+ C1F4 C9                                   ret
 165+ C1F5
 166+ C1F5
 167+ C1F5              draw_docking_ship:      MMUSelectLayer1
 167+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 168+ C1F9 CD 80 E0                             call    l1_cls
 169+ C1FC CD 9A E0                             call    l1_attr_cls
 170+ C1FF                                      MMUSelectSpriteBank
 170+ C1FF ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 171+ C203 CD 6E E5                             call    sprite_cls_cursors
 172+ C206                                      MMUSelectLayer2
 172+ C206 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 173+ C20A CD 03 E0                             call    asm_l2_double_buffer_on
 174+ C20D 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 175+ C20F 32 A8 E0                             ld      (l2_cls_byte),a
 176+ C212 CD C8 E0                             call    l2_set_color_upper2
 177+ C215 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 178+ C217 32 A8 E0                             ld      (l2_cls_byte),a
 179+ C21A CD F4 E0                             call    l2_cls_lower_third
 180+ C21D CD 07 C1                             call    LaunchTubeEdges
 181+ C220 CD 5C C1                             call    LaunchConsole
 182+ C223              .NextBuffer:            MMUSelectLayer2
 182+ C223 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 183+ C227 CD 13 E1                             call    l2_flip_buffers
 184+ C22A 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 185+ C22C 32 A8 E0                             ld      (l2_cls_byte),a
 186+ C22F CD C8 E0                             call    l2_set_color_upper2
 187+ C232 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 188+ C234 32 A8 E0                             ld      (l2_cls_byte),a
 189+ C237 CD F4 E0                             call    l2_cls_lower_third
 190+ C23A CD 07 C1                             call    LaunchTubeEdges
 191+ C23D CD 5C C1                             call    LaunchConsole
 192+ C240 3E FF        .SetUpTimers:           ld      a,init_countdown
 193+ C242 32 00 C1                             ld      (launch_countdown),a
 194+ C245 21 87 C0                             ld      hl,dockingdraw_table
 195+ C248 22 03 C1                             ld      (docking_table_idx),hl
 196+ C24B AF                                   xor     a
 197+ C24C 32 05 C1                             ld      (current_offsetX),a
 198+ C24F 32 06 C1                             ld      (current_offsetY),a
 199+ C252 AF           .SetupGalaxy:           xor     a ; palcehodler as it would cause next macro to fail re initialise all universe banks
 200+ C253                                      ZeroThrottle
 200+ C253 AF          >                        xor     a
 200+ C254 32 0D 81    >                        ld      (DELTA),a
 200+ C257 32 0E 81    >                        ld      (DELT4Lo),a
 200+ C25A 32 0F 81    >                        ld      (DELT4Lo+1),a
 201+ C25D 3E FF                                ld      a,StatePlayerDocked
 202+ C25F 32 22 81                             ld      (DockedFlag),a ; we don't kill off shipts as we kill them on launch
 203+ C262 C9                                   ret
 204+ C263
 205+ C263 CD 07 C1     loop_launch_ship:       call    LaunchTubeEdges
 206+ C266 3E FF                                ld      a,init_countdown
 207+ C268 32 00 C1                             ld      (launch_countdown),a
 208+ C26B 2A 01 C1                             ld      hl,(launch_table_idx)
 209+ C26E 4E                                   ld      c,(hl)
 210+ C26F 79                                   ld      a,c
 211+ C270 FE FF                                cp      $FF
 212+ C272 28 1E                                jr      z,.FinishedLaunch
 213+ C274 23                                   inc     hl
 214+ C275 46                                   ld      b,(hl)                 ; bc = top left
 215+ C276 23                                   inc     hl
 216+ C277 5E                                   ld      e,(hl)
 217+ C278 23                                   inc     hl
 218+ C279 56                                   ld      d,(hl)                 ;de = width and height
 219+ C27A 23                                   inc     hl
 220+ C27B 7E                                   ld      a,(hl)                 ; a = colour
 221+ C27C 23                                   inc     hl
 222+ C27D 22 01 C1                             ld      (launch_table_idx),hl
 223+ C280 67                                   ld      h,a
 224+ C281 C5 D5                                push    bc,,de
 225+ C283                                      MMUSelectLayer2
 225+ C283 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ C287 CD 39 E2                             call    l2_draw_fill_box        ; ; "l2_draw_fill_box bc=rowcol, de=heightwidth h=color"
 227+ C28A D1 C1                                pop     bc,,de
 228+ C28C 3E 80                                ld      a,$80
 229+ C28E CD 49 E2                             call    l2_draw_box             ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
 230+ C291 C9                                   ret
 231+ C292 3E FD        .FinishedLaunch:        ld      a,StateCompletedLaunch  ; now seed that we need a universe rebuild post launch
 232+ C294 32 22 81                             ld      (DockedFlag),a
 233+ C297 C9                                   ret
 234+ C298
 235+ C298 CD 07 C1     loop_docking_ship:      call    LaunchTubeEdges
 236+ C29B 3E FF                                ld      a,init_countdown
 237+ C29D 32 00 C1                             ld      (launch_countdown),a
 238+ C2A0 2A 03 C1                             ld      hl,(docking_table_idx)
 239+ C2A3 4E                                   ld      c,(hl)
 240+ C2A4 79                                   ld      a,c
 241+ C2A5 FE FF                                cp      $FF
 242+ C2A7 28 1E                                jr      z,.FinishedDocking
 243+ C2A9 23                                   inc     hl
 244+ C2AA 46                                   ld      b,(hl)                 ; bc = top left
 245+ C2AB 23                                   inc     hl
 246+ C2AC 5E                                   ld      e,(hl)
 247+ C2AD 23                                   inc     hl
 248+ C2AE 56                                   ld      d,(hl)                 ;de = width and height
 249+ C2AF 23                                   inc     hl
 250+ C2B0 7E                                   ld      a,(hl)
 251+ C2B1 23                                   inc     hl
 252+ C2B2 22 03 C1                             ld      (docking_table_idx),hl
 253+ C2B5 67                                   ld      h,a
 254+ C2B6 C5 D5                                push    bc,,de
 255+ C2B8                                      MMUSelectLayer2
 255+ C2B8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ C2BC CD 39 E2                             call    l2_draw_fill_box
 257+ C2BF D1 C1                                pop     bc,,de
 258+ C2C1 3E 80                                ld      a,$80
 259+ C2C3 CD 49 E2                             call    l2_draw_box
 260+ C2C6 C9                                   ret
 261+ C2C7              .FinishedDocking        ForceTransition ScreenStatus              ; Force move to status screen
 261+ C2C7 3E 04       >                        ld      a,ScreenStatus
 261+ C2C9 32 86 6B    >                        ld      (ScreenTransitionForced), a
 262+ C2CC C9                                   ret
 263+ C2CD
 264+ C2CD
 265+ C2CD
# file closed: ./Transitions/launch_ship.asm
 809  C2CD                                  DISPLAY "Bank ",BankLaunchShip," - Bytes free ",/D, $2000 - ($-LaunchShipAddr), " - BankLaunchShip"
 810  C2CD              ; Bank 70  ------------------------------------------------------------------------------------------------------------------------
 811  C2CD                                  SLOT    UniverseBankAddr
 812  C2CD                                  PAGE    BankUNIVDATA0
 813  C2CD                                  ORG	    UniverseBankAddr,BankUNIVDATA0
 814  C000                                  INCLUDE "./Universe/Ships/univ_ship_data.asm"
# file opened: ./Universe/Ships/univ_ship_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; There can be upto &12 objects in flight.
   4+ C000              ; To avoid hassle of memory heap managment, the free list
   5+ C000              ; will correspond to a memory bank offset so data will be held in
   6+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
   9+ C000              ; This means each gets its own line list, inwork etc
  10+ C000
  11+ C000              ; "Runtime Ship Data paged into in Bank 7"
  12+ C000              ;                       1234567890123456
  13+ C000 55 6E 69 76  StartOfUniv:        DB "Universe PG"
  13+ C004 65 72 73 65
  13+ C008 20 50 47
  14+ C00B 58           StartOfUnivN:       DB "X"
  15+ C00C 00 00 00     ShipUnivBoilerPad   DS 3
  16+ C00F 00           ShipTypeCopy        DB 0
  17+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  18+ C010
  19+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  20+ C010              ; Universe map substibute for INWK
  21+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  22+ C010                                     INCLUDE "./Universe/Ships/AIRuntimeData.asm"
# file opened: ././Universe/Ships/AIRuntimeData.asm
   1++C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C010              StartOfShipRuntimeData      EQU $
   3++C010 00           UBnKxlo                     DB  0                       ; INWK+0
   4++C011 00           UBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   5++C012 00           UBnKxsgn                    DB  0                       ; INWK+2
   6++C013 00           UBnKylo                     DB  0                       ; INWK+3 \ ylo
   7++C014 00           UBnKyhi                     DB  0                       ; INWK+4 \ yHi
   8++C015 00           UBnKysgn                    DB  0                       ; INWK +5
   9++C016 00           UBnKzlo                     DB  0                       ; INWK +6
  10++C017 00           UBnKzhi                     DB  0                       ; INWK +7
  11++C018 00           UBnKzsgn                    DB  0                       ; INWK +8
  12++C019              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
  13++C019              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
  14++C019              ; Note they seem to have to be after camera position not quite found why yet, can only assume it does an iy or ix indexed copy? Bu oddly does not affect space station.
  15++C019 00 00        UBnkrotmatSidevX            DW  0                       ; INWK +21
  16++C01B              UBnkrotmatSidev             equ UBnkrotmatSidevX
  17++C01B 00 00        UBnkrotmatSidevY            DW  0                       ; INWK +23
  18++C01D 00 00        UBnkrotmatSidevZ            DW  0                       ; INWK +25
  19++C01F 00 00        UBnkrotmatRoofvX            DW  0                       ; INWK +15
  20++C021              UBnkrotmatRoofv             equ UBnkrotmatRoofvX
  21++C021 00 00        UBnkrotmatRoofvY            DW  0                       ; INWK +17
  22++C023 00 00        UBnkrotmatRoofvZ            DW  0                       ; INWK +19
  23++C025 00 00        UBnkrotmatNosevX            DW  0                       ; INWK +9
  24++C027              UBnkrotmatNosev             EQU UBnkrotmatNosevX
  25++C027 00 00        UBnkrotmatNosevY            DW  0                       ; INWK +11
  26++C029 00 00        UBnkrotmatNosevZ            DW  0                       ; INWK +13
  27++C02B              ; -- Note these must be here for initialise blast as it does a 12 byte ldir
  28++C02B              ; . Note missile explosion will have to have logic to cause linger if a blast is to be enqued
  29++C02B 00           UBnKMissileBlastRange:      DB  0                       ; copied in when setting up a missile
  30++C02C 00           UBnKMissileBlastDamage:     DB  0                       ; copied in when setting up a missile
  31++C02D 00           UBnKMissileDetonateRange:   DB  0                       ; copied in when setting up a missile, allows for proximity missiles
  32++C02E 00           UBnKMissileDetonateDamage:  DB  0                       ; copied in when setting up a missile
  33++C02F              ; -- Metadata for ship to help with bank managment
  34++C02F              UBnKStartOfRuntimeData:
  35++C02F 00           UBnKSlotNumber              DB  0
  36++C030 00           UbnKShipUnivBankNbr         DB  0                       ; Present ship universe bank number
  37++C031 00           UBnkShipModelBank           DB  0                       ; Bank nbr ship was from
  38++C032 00           UBnKShipModelNbr            DB  0                       ; Ship Id with in the bank
  39++C033 00           UBnKShipModeID              DB  0                       ; Absolute ship id
  40++C034              ; -- Ship AI data
  41++C034 00           UBnKMissleHitToProcess      DB  0                       ; This is used for enquing missle blasts as we can only do one missile at a time, could make it multi but neeed to smooth CPU usage
  42++C035 00           UBnKMissileTarget           DB  0                       ; This is the ship slot number for the target from 0 to n if the missile is not hostile to us, if the target is $FF then its us
  43++C036 00           UBnKSpeed                   DB  0                       ; INWK +27
  44++C037 00           UBnKAccel                   DB  0                       ; INWK +28
  45++C038 00           UBnKRotXCounter             DB  0                       ; INWK +29
  46++C039 00           UBnKRotZCounter             DB  0                       ; INWK +30
  47++C03A 00           UBnKRAT                     DB  0                       ; temporary for rotation magnitude or roll counter, for debugging state
  48++C03B 00           UBnKRAT2                    DB  0                       ; temporary for rotation threshold
  49++C03C 00           UBnKCNT                     DB  0                       ; temp for calculating roll and pitch
  50++C03D 00           UBnKCNT2                    DB  0                       ; roll threshold, max angle boynd ship will slow down
  51++C03E 00           univRAT                     DB  0               ; 99
  52++C03F 00           univRAT2                    DB  0               ; 9A
  53++C040 00           univRAT2Val                 DB  0               ; 9A
  54++C041 00           UBnKexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
  55++C042 00           UBnkDrawAllFaces            DB  0
  56++C043 00           UBnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
  57++C044 00           UBnKSpawnObject             DB  0
  58++C045 00           UBnkCam0yLo                 DB  0                       ; INWK +33 ????
  59++C046 00           UBnkCam0yHi                 DB  0                       ; INWK +34?????
  60++C047 00           UBnKEnergy                  DB  0                       ; INWK +35
  61++C048 00           UBnKECMCountDown            DB  0                       ; counts down ECM usage if activated reducing energy too in update loop
  62++C049 00           UBnKECMFitted               DB  0                       ; Does ship have ECM, true false
  63++C04A 00           UBnKMissilesLeft            DB  0
  64++C04B 00           UBnKCloudCounter            DB  0                       ; cloud pixels
  65++C04C 00           UBnKCloudRadius             DB  0                       ; cloud pixels
  66++C04D              UBnKRuntimeSize             EQU $-UBnKStartOfRuntimeData
  67++C04D              ; Flags work as follows:
  68++C04D              ; UBnKSpawnObject - signals on death to spawn cargo items
  69++C04D              ; 0 -                   Spawn Cargo 1
  70++C04D              ; 1 -                   Spawn Cargo 2
  71++C04D              ; 2 -                   Spawn Cargo 3
  72++C04D              ; 3 -                   Spawn Cargo 4
  73++C04D              ; 4 -                   Spawn Alloy 1
  74++C04D              ; 5 -                   Spawn Alloy 2
  75++C04D              ; 6 -                   Spawn Alloy 3
  76++C04D              ; 7 -                   Spawn Alloy 4
  77++C04D
  78++C04D              ; UBnkaiatkecm
  79++C04D              ; Bit	                Description
  80++C04D              ; 7 -                   AI Enabled Flag
  81++C04D              ; 6 -                   Ship Visible = ShipOnScreen/NotCloaked (cleared or set by check visible or cloaking override)
  82++C04D              ; 5 -                   Ship is exploding if set, note if its a missile and one already equeued this will have to linger
  83++C04D              ;                       linger can be done by not erasing ship unit missile equeue handled
  84++C04D              ; 4 -                   Ship marked as exploded, cleared once aknowledged then bit 5 takes over and UBnKCloudCounter
  85++C04D              ; 3 -                   Display state - Plot as a Dot
  86++C04D              ; 2 -                   Nbr of Missiles bit 2
  87++C04D              ; 1 -                   Nbr of Missiles bit 1
  88++C04D              ; 0 -                   ECM present flag
  89++C04D              ; ShipNewBitsAddr (in blueprint)
  90++C04D              ;Bit	                Description
  91++C04D              ;#0	Trader flag         * 0 = not a trader  * 1 = trader
  92++C04D              ;                       80% of traders are peaceful and mind their own business plying their trade between the planet and space station, but 20% of them moonlight as bounty hunters (see bit #1)
  93++C04D              ;                       Ships that are traders: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  94++C04D              ;#1 Bounty hunter flag  * 0 = not a bounty hunter* 1 = bounty hunter
  95++C04D              ;                       If we are a fugitive or a serious offender and we bump into a bounty hunter, they will become hostile and attack us (see bit #2)
  96++C04D              ;                       Ships that are bounty hunters: Viper, Fer-de-lance
  97++C04D              ;#2	Hostile flag        * 0 = not hostile  * 1 = hostile
  98++C04D              ;                       Hostile ships will attack us on sight; there are quite a few of them
  99++C04D              ;                       Ships that are hostile: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Worm, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid, Thargon, Constrictor
 100++C04D              ;#3	Pirate flag         * 0 = not a pirate * 1 = pirate
 101++C04D              ;                       Hostile pirates will attack us on sight, but once we get inside the space station safe zone, they will stop
 102++C04D              ;                       Ships that are pirates: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid
 103++C04D              ;#4	Docking flag        * 0 = not docking * 1 = docking
 104++C04D              ;                       Traders with their docking flag set fly towards the space station to try to dock, otherwise they aim for the planet
 105++C04D              ;                       This flag is randomly set for traders when they are spawned
 106++C04D              ;                       Ships that can be docking: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
 107++C04D              ;#5	Innocent bystander  * 0 = normal * 1 = innocent bystander
 108++C04D              ;                       If we attack an innocent ship within the space station safe zone, then the station will get angry with us and start spawning cops
 109++C04D              ;                       Ships that are innocent bystanders: Shuttle, Transporter, Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Cougar
 110++C04D              ;#6	Cop flag            * 0 = not a cop * 1 = cop
 111++C04D              ;                       If we destroy a cop, then we instantly become a fugitive (the Transporter isn't actually a cop, but it's clearly under police protection)
 112++C04D              ;                       Ships that are cops: Viper, Transporter
 113++C04D              ;#7	Scooped, docked, escape pod flag
 114++C04D              ;                       For spawned ships, this flag indicates that the ship been scooped or has docked (bit 7 is always clear on spawning)
 115++C04D              ;                       For blueprints, this flag indicates whether the ship type has an escape pod fitted, so it can launch it when in dire straits
 116++C04D              ;                       Ships that have escape pods: Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Viper, Mamba, Krait, Adder, Cobra Mk I, Cobra Mk III (pirate), Asp Mk II, Python (pirate), Fer-de-lance
 117++C04D
# file closed: ././Universe/Ships/AIRuntimeData.asm
  23+ C04D              ; moved to runtime asm
  24+ C04D              ;                        INCLUDE "./Universe/Ships/ShipPosVars.asm"
  25+ C04D              ;                        INCLUDE "./Universe/Ships/RotationMatrixVars.asm"
  26+ C04D
  27+ C04D              ; Orientation Matrix [nosev x y z ] nose vector ( forward) 19 to 26
  28+ C04D              ;                    [roofv x y z ] roof vector (up)
  29+ C04D              ;                    [sidev x y z ] side vector (right)
  30+ C04D              ;;rotXCounter                 equ UBnkrotXCounter         ; INWK +29
  31+ C04D              ;;rotZCounter                 equ UBnkrotZCounter         ; INWK +30UBnkDrawCam0xLo   DB  0               ; XX18+0
  32+ C04D
  33+ C04D
  34+ C04D                                      INCLUDE "./Universe/Ships/XX16Vars.asm"
# file opened: ././Universe/Ships/XX16Vars.asm
   1++C04D              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C04D 00 00        UBnkTransmatSidevX          DW  0               ; XX16+0
   3++C04F              UBnkTransmatSidev           EQU UBnkTransmatSidevX
   4++C04F 00 00        UBnkTransmatSidevY          DW 0                ; XX16+2
   5++C051 00 00        UBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C053 00 00        UBnkTransmatRoofvX          DW 0
   7++C055              UBnkTransmatRoofv           EQU UBnkTransmatRoofvX
   8++C055 00 00        UBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C057 00 00        UBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C059 00 00        UBnkTransmatNosevX          DW 0
  11++C05B              UBnkTransmatNosev           EQU UBnkTransmatNosevX
  12++C05B 00 00        UBnkTransmatNosevY          DW 0                ; XX16+2
  13++C05D 00 00        UBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C05F 00 00        UbnkTransmatTransX          DW 0
  15++C061 00 00        UbnkTransmatTransY          DW 0
  16++C063 00 00        UbnkTransmatTransZ          DW 0
  17++C065              XX16                        equ UBnkTransmatSidev
  18++C065              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C065 00 00        UbnkTransInvRow0x0          DW 0
  20++C067 00 00        UbnkTransInvRow0x1          DW 0
  21++C069 00 00        UbnkTransInvRow0x2          DW 0
  22++C06B 00 00        UbnkTransInvRow0x3          DW 0
  23++C06D 00 00        UbnkTransInvRow1y0          DW 0
  24++C06F 00 00        UbnkTransInvRow1y1          DW 0
  25++C071 00 00        UbnkTransInvRow1y2          DW 0
  26++C073 00 00        UbnkTransInvRow1y3          DW 0
  27++C075 00 00        UbnkTransInvRow2z0          DW 0
  28++C077 00 00        UbnkTransInvRow2z1          DW 0
  29++C079 00 00        UbnkTransInvRow2z2          DW 0
  30++C07B 00 00        UbnkTransInvRow2z3          DW 0
  31++C07D
  32++C07D              XX16Inv             equ UbnkTransInvRow0x0
  33++C07D
# file closed: ././Universe/Ships/XX16Vars.asm
  35+ C07D                                      INCLUDE "./Universe/Ships/XX25Vars.asm"
# file opened: ././Universe/Ships/XX25Vars.asm
   1++C07D              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C07D 00           UbnkProjxLo                 DB  0
   3++C07E 00           UbnkProjxHi                 DB  0
   4++C07F 00           UbnkProjxSgn                DB  0
   5++C080              UbnkProjx                   EQU UbnkProjxLo
   6++C080 00           UbnkProjyLo                 DB  0
   7++C081 00           UbnkProjyHi                 DB  0
   8++C082 00           UbnkProjySgn                DB  0
   9++C083              UbnkProjy                   EQU UbnkProjyLo
  10++C083 00           UbnkProjzLo                 DB  0
  11++C084 00           UbnkProjzHi                 DB  0
  12++C085 00           UbnkProjzSgn                DB  0
  13++C086              UbnkProjz                   EQU UbnkProjzLo
  14++C086              XX25                        EQU UbnkProjxLo
  15++C086
# file closed: ././Universe/Ships/XX25Vars.asm
  36+ C086                                      INCLUDE "./Universe/Ships/XX18Vars.asm"
# file opened: ././Universe/Ships/XX18Vars.asm
   1++C086              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C086 00           UBnkDrawCam0xLo             DB  0               ; XX18+0
   3++C087 00           UBnkDrawCam0xHi             DB  0               ; XX18+1
   4++C088 00           UBnkDrawCam0xSgn            DB  0               ; XX18+2
   5++C089              UBnkDrawCam0x               equ UBnkDrawCam0xLo
   6++C089 00           UBnkDrawCam0yLo             DB  0               ; XX18+3
   7++C08A 00           UBnkDrawCam0yHi             DB  0               ; XX18+4
   8++C08B 00           UBnkDrawCam0ySgn            DB  0               ; XX18+5
   9++C08C              UBnkDrawCam0y               equ UBnkDrawCam0yLo
  10++C08C 00           UBnkDrawCam0zLo             DB  0               ; XX18+6
  11++C08D 00           UBnkDrawCam0zHi             DB  0               ; XX18+7
  12++C08E 00           UBnkDrawCam0zSgn            DB  0               ; XX18+8
  13++C08F              UBnkDrawCam0z               equ UBnkDrawCam0zLo
  14++C08F              XX18                        equ UBnkDrawCam0xLo
  15++C08F
# file closed: ././Universe/Ships/XX18Vars.asm
  37+ C08F
  38+ C08F              ; Used to make 16 bit reads a little cleaner in source code
  39+ C08F 00 00 00     UbnkZPoint                  DS  3
  40+ C092              UbnkZPointLo                equ UbnkZPoint
  41+ C092              UbnkZPointHi                equ UbnkZPoint+1
  42+ C092              UbnkZPointSign              equ UbnkZPoint+2
  43+ C092                                      INCLUDE "./Universe/Ships/XX15Vars.asm"
# file opened: ././Universe/Ships/XX15Vars.asm
   1++C092              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C092 00           UBnkXScaled                 DB  0               ; XX15+0Xscaled
   3++C093 00           UBnkXScaledSign             DB  0               ; XX15+1xsign
   4++C094 00           UBnkYScaled                 DB  0               ; XX15+2yscaled
   5++C095 00           UBnkYScaledSign             DB  0               ; XX15+3ysign
   6++C096 00           UBnkZScaled                 DB  0               ; XX15+4zscaled
   7++C097 00           UBnkZScaledSign             DB  0               ; XX15+5zsign
   8++C098
   9++C098              XX15                        equ UBnkXScaled
  10++C098              XX15VecX                    equ XX15
  11++C098              XX15VecY                    equ XX15+1
  12++C098              XX15VecZ                    equ XX15+2
  13++C098              UbnkXPoint                  equ XX15
  14++C098              UbnkXPointLo                equ XX15+0
  15++C098              UbnkXPointHi                equ XX15+1
  16++C098              UbnkXPointSign              equ XX15+2
  17++C098              UbnkYPoint                  equ XX15+3
  18++C098              UbnkYPointLo                equ XX15+3
  19++C098              UbnkYPointHi                equ XX15+4
  20++C098              UbnkYPointSign              equ XX15+5
  21++C098              ; Repurposed XX15 pre clip plines
  22++C098              UbnkPreClipX1               equ XX15+0
  23++C098              UbnkPreClipY1               equ XX15+2
  24++C098              UbnkPreClipX2               equ XX15+4
  25++C098              UbnkPreClipY2               equ XX15+6
  26++C098              ; Repurposed XX15 post clip lines
  27++C098              UBnkNewX1                   equ XX15+0
  28++C098              UBnkNewY1                   equ XX15+1
  29++C098              UBnkNewX2                   equ XX15+2
  30++C098              UBnkNewY2                   equ XX15+3
  31++C098              ; Repurposed XX15
  32++C098              regXX15fx                   equ UBnkXScaled
  33++C098              regXX15fxSgn                equ UBnkXScaledSign
  34++C098              regXX15fy                   equ UBnkYScaled
  35++C098              regXX15fySgn                equ UBnkYScaledSign
  36++C098              regXX15fz                   equ UBnkZScaled
  37++C098              regXX15fzSgn                equ UBnkZScaledSign
  38++C098              ; Repurposed XX15
  39++C098              varX1                       equ UBnkXScaled       ; Reused, verify correct position
  40++C098              varY1                       equ UBnkXScaledSign   ; Reused, verify correct position
  41++C098              varZ1                       equ UBnkYScaled       ; Reused, verify correct position
  42++C098              ; After clipping the coords are two 8 bit pairs
  43++C098              UBnkPoint1Clipped           equ UBnkXScaled
  44++C098              UBnkPoint2Clipped           equ UBnkYScaled
  45++C098              ; Repurposed XX15 when plotting lines
  46++C098              ; Repurposed XX15 before calling clip routine
  47++C098              UBnkX1                      equ XX15
  48++C098              UBnKx1Lo                    equ XX15
  49++C098              UBnKx1Hi                    equ XX15+1
  50++C098              UBnkY1                      equ XX15+2
  51++C098              UbnKy1Lo                    equ XX15+2
  52++C098              UBnkY1Hi                    equ XX15+3
  53++C098              UBnkX2                      equ XX15+4
  54++C098              UBnkX2Lo                    equ XX15+4
  55++C098              UBnkX2Hi                    equ XX15+5
  56++C098
# file closed: ././Universe/Ships/XX15Vars.asm
  44+ C098                                      INCLUDE "./Universe/Ships/XX12Vars.asm"
# file opened: ././Universe/Ships/XX12Vars.asm
   1++C098              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C098              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C098 00           UBnkXX12xLo                 DB  0               ; XX12+0
   4++C099 00           UBnkXX12xSign               DB  0               ; XX12+1
   5++C09A 00           UBnkXX12yLo                 DB  0               ; XX12+2
   6++C09B 00           UBnkXX12ySign               DB  0               ; XX12+3
   7++C09C 00           UBnkXX12zLo                 DB  0               ; XX12+4
   8++C09D 00           UBnkXX12zSign               DB  0               ; XX12+5
   9++C09E 00 00 00...  XX12Save                    DS  6
  10++C0A4 00 00 00...  XX12Save2                   DS  6
  11++C0AA              XX12                        equ UBnkXX12xLo
  12++C0AA              varXX12                     equ UBnkXX12xLo
  13++C0AA              ; Repurposed XX12 when plotting lines
  14++C0AA              UBnkY2                      equ XX12+0
  15++C0AA              UbnKy2Lo                    equ XX12+0
  16++C0AA              UBnkY2Hi                    equ XX12+1
  17++C0AA              UBnkDeltaXLo                equ XX12+2
  18++C0AA              UBnkDeltaXHi                equ XX12+3
  19++C0AA              UBnkDeltaYLo                equ XX12+4
  20++C0AA              UBnkDeltaYHi                equ XX12+5
  21++C0AA              UbnkGradient                equ XX12+2
  22++C0AA              UBnkTemp1                   equ XX12+2
  23++C0AA              UBnkTemp1Lo                 equ XX12+2
  24++C0AA              UBnkTemp1Hi                 equ XX12+3
  25++C0AA              UBnkTemp2                   equ XX12+3
  26++C0AA              UBnkTemp2Lo                 equ XX12+3
  27++C0AA              UBnkTemp2Hi                 equ XX12+4
  28++C0AA
# file closed: ././Universe/Ships/XX12Vars.asm
  45+ C0AA
  46+ C0AA
  47+ C0AA              ; Post clipping the results are now 8 bit
  48+ C0AA 00           UBnkVisibility              DB  0               ; replaces general purpose xx4 in rendering
  49+ C0AB 00           UBnkProjectedY              DB  0
  50+ C0AC 00           UBnkProjectedX              DB  0
  51+ C0AD              UBnkProjected               equ UBnkProjectedY  ; resultant projected position
  52+ C0AD 00 00 00...  XX15Save                    DS  8
  53+ C0B5 00 00 00...  XX15Save2                   DS  8
  54+ C0BD 00           VarBackface                 DB 0
  55+ C0BE              ; Heap (or array) information for lines and normals
  56+ C0BE              ; Coords are stored XY,XY,XY,XY
  57+ C0BE              ; Normals
  58+ C0BE              ; This needs re-oprganising now.
  59+ C0BE              ; Runtime Calculation Store
  60+ C0BE
  61+ C0BE              FaceArraySize               equ 30
  62+ C0BE              EdgeHeapSize                equ 40
  63+ C0BE              NodeArraySize               equ 40
  64+ C0BE              LineArraySize               equ 50
  65+ C0BE              ; Storage arrays for data
  66+ C0BE              ; Structure of arrays
  67+ C0BE              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
  68+ C0BE              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
  69+ C0BE              ; NodeArray         -  4 bytes per element      0           1            2          3
  70+ C0BE              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
  71+ C0BE              ; Line Array        -  4 bytes per eleement     0           1            2          3
  72+ C0BE              ;                                               X1          Y1           X2         Y2
  73+ C0BE 00 00 00...  UbnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
  74+ C0DC 00 00 00...  UBnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  75+ C17C 00 00 00...  UBnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  76+ C21C 00 00 00...  UbnkLineArray               DS LineArraySize * 4        ; XX19 Holds the clipped line details
  77+ C2E4              UBnkLinesHeapMax            EQU $ - UbnkLineArray
  78+ C2E4 00 00 00...  UbnkEdgeProcessedList DS EdgeHeapSize
  79+ C30C              ; Array current Lengths
  80+ C30C 00           UbnkFaceVisArrayLen         DS 1
  81+ C30D 00           UBnkNodeArrayLen            DS 1
  82+ C30E 00           UbnkLineArrayLen            DS 1                        ; total number of lines loaded to array
  83+ C30F 00           UbnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
  84+ C310              XX20                        equ UbnkLineArrayLen
  85+ C310              varXX20                     equ UbnkLineArrayLen
  86+ C310
  87+ C310 00           UbnkEdgeHeapSize            DS 1
  88+ C311 00           UbnkEdgeHeapBytes           DS 1
  89+ C312 00           UBnkLinesHeapLen            DS 1
  90+ C313 00           UbnKEdgeHeapCounter         DS 1
  91+ C314 00           UbnKEdgeRadius              DS 1
  92+ C315 00           UbnKEdgeShipType            DS 1
  93+ C316 00           UbnKEdgeExplosionType       DS 1
  94+ C317
  95+ C317              ; Node heap is used to write out transformed Vertexs
  96+ C317
  97+ C317              ; Lines
  98+ C317 00 00 00     UBnkXX19                    DS  3
  99+ C31A
 100+ C31A 00 00 00...  UBnkHullCopy                DS  ShipDataLength
 101+ C335              ScoopDebrisAddr             equ UBnkHullCopy + ScoopDebrisOffset
 102+ C335              MissileLockLoAddr           equ UBnkHullCopy + MissileLockLoOffset
 103+ C335              MissileLockHiAddr           equ UBnkHullCopy + MissileLockHiOffset
 104+ C335              EdgeAddyAddr                equ UBnkHullCopy + EdgeAddyOffset
 105+ C335              LineX4Addr                  equ UBnkHullCopy + LineX4Offset
 106+ C335              GunVertexAddr               equ UBnkHullCopy + GunVertexOffset
 107+ C335              ExplosionCtAddr             equ UBnkHullCopy + ExplosionCtOffset
 108+ C335              VertexCountAddr             equ UBnkHullCopy + VertexCountOffset
 109+ C335              VertexCtX6Addr              equ UBnkHullCopy + VertexCtX6Offset
 110+ C335              EdgeCountAddr               equ UBnkHullCopy + EdgeCountOffset
 111+ C335              BountyLoAddr                equ UBnkHullCopy + BountyLoOffset
 112+ C335              BountyHiAddr                equ UBnkHullCopy + BountyHiOffset
 113+ C335              FaceCtX4Addr                equ UBnkHullCopy + FaceCtX4Offset
 114+ C335              DotAddr                     equ UBnkHullCopy + DotOffset
 115+ C335              EnergyAddr                  equ UBnkHullCopy + EnergyOffset
 116+ C335              SpeedAddr                   equ UBnkHullCopy + SpeedOffset
 117+ C335              FaceAddyAddr                equ UBnkHullCopy + FaceAddyOffset
 118+ C335              QAddr                       equ UBnkHullCopy + QOffset
 119+ C335              LaserAddr                   equ UBnkHullCopy + LaserOffset
 120+ C335              VerticesAddyAddr            equ UBnkHullCopy + VerticiesAddyOffset
 121+ C335              ShipTypeAddr                equ UBnkHullCopy + ShipTypeOffset
 122+ C335              ShipNewBitsAddr             equ UBnkHullCopy + ShipNewBitsOffset
 123+ C335              ShipAIFlagsAddr             equ UBnkHullCopy + ShipAIFlagsOffset
 124+ C335              ShipECMFittedChanceAddr     equ UBnkHullCopy + ShipECMFittedChanceOffset
 125+ C335              ; Static Ship Data. This is copied in when creating the universe object
 126+ C335              XX0                         equ UBnkHullCopy        ; general hull index pointer TODO find biggest ship design
 127+ C335
 128+ C335 00 00 00...  UBnkHullVerticies           DS  40 * 6              ; largetst is trasnport type 10 at 37 vericies so alows for 40 * 6 Bytes  =
 129+ C425 00 00 00...  UBnkHullEdges               DS  50 * 4              ; ype 10 is 46 edges so allow 50
 130+ C4ED 00 00 00...  UBnkHullNormals             DS  20 * 4              ; type 10 is 14 edges so 20 to be safe
 131+ C53D
 132+ C53D
 133+ C53D 0C           OrthagCountdown             DB  12
 134+ C53E
 135+ C53E              UBnkShipCopy                equ UBnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 136+ C53E              UBnk_Data_len               EQU $ - StartOfUniv
 137+ C53E
 138+ C53E              ZeroUnivPitchAndRoll:   MACRO
 139+ C53E ~                                    xor     a
 140+ C53E ~                                    ld      (UBnKRotXCounter),a
 141+ C53E ~                                    ld      (UBnKRotZCounter),a
 142+ C53E                                      ENDM
 143+ C53E
 144+ C53E              MaxUnivPitchAndRoll:    MACRO
 145+ C53E ~                                    ld      a,127
 146+ C53E ~                                    ld      (UBnKRotXCounter),a
 147+ C53E ~                                    ld      (UBnKRotZCounter),a
 148+ C53E                                      ENDM
 149+ C53E
 150+ C53E              RandomUnivPitchAndRoll: MACRO
 151+ C53E ~                                    call    doRandom
 152+ C53E ~                                    or      %01101111
 153+ C53E ~                                    ld      (UBnKRotXCounter),a
 154+ C53E ~                                    call    doRandom
 155+ C53E ~                                    or      %01101111
 156+ C53E ~                                    ld      (UBnKRotZCounter),a
 157+ C53E                                      ENDM
 158+ C53E
 159+ C53E              RandomUnivSpeed:        MACRO
 160+ C53E ~                                    call    doRandom
 161+ C53E ~                                    and     31
 162+ C53E ~                                    ld      (UBnKSpeed),a
 163+ C53E                                      ENDM
 164+ C53E
 165+ C53E              MaxUnivSpeed:           MACRO
 166+ C53E ~                                    ld      a,31
 167+ C53E ~                                    ld      (UBnKSpeed),a
 168+ C53E                                      ENDM
 169+ C53E
 170+ C53E              ZeroUnivAccelleration:  MACRO
 171+ C53E ~                                    xor     a
 172+ C53E ~                                    ld      (UBnKAccel),a
 173+ C53E                                      ENDM
 174+ C53E
 175+ C53E 3A 32 C3     SetShipHostile:         ld      a,(ShipNewBitsAddr)
 176+ C541 F6 04                                or      ShipIsHostile
 177+ C543 32 32 C3                             ld      (ShipNewBitsAddr),a
 178+ C546 C9                                   ret
 179+ C547
 180+ C547 3A 32 C3     ClearShipHostile:       ld      a,(ShipNewBitsAddr)
 181+ C54A E6 FB                                and     ShipNotHostile
 182+ C54C 32 32 C3                             ld      (ShipNewBitsAddr),a
 183+ C54F C9                                   ret
 184+ C550
 185+ C550
 186+ C550              ; --------------------------------------------------------------
 187+ C550 21 00 C0     ResetUBnkData:          ld      hl,StartOfUniv
 188+ C553 11 3E 05                             ld      de,UBnk_Data_len
 189+ C556 AF                                   xor     a
 190+ C557 CD A3 7C                             call    memfill_dma
 191+ C55A C9                                   ret
 192+ C55B              ; --------------------------------------------------------------
 193+ C55B 21 10 C0     ResetUbnkPosition:      ld      hl,UBnKxlo
 194+ C55E 06 09                                ld      b, 3*3
 195+ C560 AF                                   xor     a
 196+ C561 77           .zeroLoop:              ld      (hl),a
 197+ C562 23                                   inc     hl
 198+ C563 10 FC                                djnz    .zeroLoop
 199+ C565 C9                                   ret
 200+ C566
 201+ C566 3E 80        FireECM:                ld      a,ECMCounterMax                 ; set ECM time
 202+ C568 32 48 C0                             ld      (UBnKECMCountDown),a            ;
 203+ C56B 3A 23 80                             ld      a,(ECMCountDown)
 204+ C56E                                      ReturnIfALTNusng ECMCounterMax
 204+ C56E FE 80       >                        cp    ECMCounterMax
 204+ C570 D8          >                        ret	 c
 205+ C571 3E 80                                ld      a,ECMCounterMax
 206+ C573 32 23 80                             ld      (ECMCountDown),a
 207+ C576 C9                                   ret
 208+ C577
 209+ C577              ; A ship normally needs enough energy to fire ECM but if its shot then
 210+ C577              ; it may be too low, in which case the ECM does a saftey shutdown and returns 1 energy
 211+ C577              ; plus a 50% chance it will blow the ECM up
 212+ C577 3A 48 C0     UpdateECM:              ld      a,(UBnKECMCountDown)
 213+ C57A                                      ReturnIfAIsZero
 213+ C57A A7          >                        and     a
 213+ C57B C8          >                        ret     z
 214+ C57C 3D                                   dec     a
 215+ C57D 32 48 C0                             ld      (UBnKECMCountDown),a
 216+ C580 21 47 C0                             ld      hl,UBnKEnergy
 217+ C583 35                                   dec     (hl)
 218+ C584 F0                                   ret     p
 219+ C585 CD F5 C5     .ExhaustedEnergy:       call    UnivExplodeShip                 ; if it ran out of energy it was as it was also shot or collided as it checks in advance. Main ECM loop will continue as a compromise as multiple ships can fire ECM simultaneously
 220+ C588 C9                                   ret
 221+ C589
 222+ C589
 223+ C589              ; --------------------------------------------------------------
 224+ C589              ; update ship speed and pitch based on adjustments from AI Tactics
 225+ C589 3A 37 C0     UpdateSpeedAndPitch:    ld      a,(UBnKAccel)                   ; only apply non zero accelleration
 226+ C58C                                      JumpIfAIsZero .SkipAccelleration
 226+ C58C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 226+ C58D CA AB C5    >                        jp	    z, .SkipAccelleration
 227+ C590 47                                   ld      b,a                             ; b = accelleration in 2's c
 228+ C591 3A 36 C0                             ld      a,(UBnKSpeed)                   ; a = speed + accelleration
 229+ C594                                      ClearCarryFlag
 229+ C594 B7          >                        or a
 230+ C595 88                                   adc     a,b
 231+ C596                                      JumpIfPositive  .DoneAccelleration      ; if speed < 0
 231+ C596 F2 9A C5    >                        jp		p, .DoneAccelleration
 232+ C599              .SpeedNegative:         ZeroA                                   ;    then speed = 0
 232+ C599 AF          >                        xor a
 233+ C59A 47           .DoneAccelleration:     ld      b,a                             ; if speed > speed limit
 234+ C59B 3A 2A C3                             ld      a,(SpeedAddr)                   ;    speed = limit
 235+ C59E                                      JumpIfAGTENusng b, .SpeedInLimits       ; .
 235+ C59E B8          >                        cp     b
 235+ C59F D2 A3 C5    >                        jp		nc,.SpeedInLimits
 236+ C5A2 47                                   ld      b,a                             ; .
 237+ C5A3 78           .SpeedInLimits:         ld      a,b                             ; .
 238+ C5A4 32 36 C0                             ld      (UBnKSpeed),a                   ; .
 239+ C5A7                                      ZeroA                                   ; acclleration = 0
 239+ C5A7 AF          >                        xor a
 240+ C5A8 32 37 C0                             ld      (UBnKAccel),a                   ; for next AI update
 241+ C5AB              .SkipAccelleration:     ; handle roll and pitch rates
 242+ C5AB C9                                   ret
 243+ C5AC
 244+ C5AC              ; --------------------------------------------------------------
 245+ C5AC              ; This sets the position of the current ship if its a player launched missile
 246+ C5AC CD 37 C8     UnivSetPlayerMissile:   call    InitialisePlayerMissileOrientation  ; Copy in Player  facing
 247+ C5AF CD 5B C5                             call    ResetUbnkPosition               ; home position
 248+ C5B2 3E 05                                ld      a,MissileDropHeight             ; the missile launches from underneath
 249+ C5B4 32 13 C0                             ld      (UBnKylo),a                     ; so its -ve drop height
 250+ C5B7 3E 80                                ld      a,$80                           ;
 251+ C5B9 32 15 C0                             ld      (UBnKysgn),a                    ;
 252+ C5BC 3E 03                                ld      a,3                             ; set accelleration
 253+ C5BE 32 37 C0                             ld      (UBnKAccel),a                   ;
 254+ C5C1                                      ZeroA
 254+ C5C1 AF          >                        xor a
 255+ C5C2 32 38 C0                             ld      (UBnKRotXCounter),a
 256+ C5C5 32 39 C0                             ld      (UBnKRotZCounter),a
 257+ C5C8 3E 03                                ld      a,3
 258+ C5CA 32 3A C0                             ld      (UBnKRAT),a
 259+ C5CD 3C                                   inc     a
 260+ C5CE 32 3B C0                             ld      (UBnKRAT2),a
 261+ C5D1 3E 16                                ld      a,22
 262+ C5D3 32 3D C0                             ld      (UBnKCNT2),a
 263+ C5D6                                      MaxUnivSpeed                            ; and immediatley full speed (for now at least) TODO
 263+ C5D6 3E 1F       >                        ld      a,31
 263+ C5D8 32 36 C0    >                        ld      (UBnKSpeed),a
 264+ C5DB                                      SetMemFalse UBnKMissleHitToProcess
 264+ C5DB 3E FF       >                        ld      a,$FF
 264+ C5DD 32 34 C0    >                        ld      (UBnKMissleHitToProcess),a
 265+ C5E0                                      ;break
 266+ C5E0 CD 47 C5                             call    ClearShipHostile                ; its a player missile
 267+ C5E3
 268+ C5E3 C9                                   ret
 269+ C5E4              ; --------------------------------------------------------------
 270+ C5E4              ; this applies blast damage to ship
 271+ C5E4 3A D2 81     ShipMissileBlast:       ld      a,(CurrentMissileBlastDamage)
 272+ C5E7 47                                   ld      b,a
 273+ C5E8 3A 47 C0                             ld      a,(UBnKEnergy)                   ; Reduce Energy
 274+ C5EB 90                                   sub     b
 275+ C5EC C3 F5 C5                             jp      UnivExplodeShip
 276+ C5EF 18 04                                jr      UnivExplodeShip
 277+ C5F1 32 47 C0                             ld      (UBnKEnergy),a
 278+ C5F4 C9                                   ret
 279+ C5F5              ; --------------------------------------------------------------
 280+ C5F5              ; This sets the ship as a shower of explosiondwd
 281+ C5F5              UnivExplodeShip:        ;break
 282+ C5F5 3A 43 C0                             ld      a,(UBnkaiatkecm)
 283+ C5F8 F6 30                                or      ShipExploding | ShipKilled      ; Set Exlpoding flag and mark as just been killed
 284+ C5FA E6 7F                                and     Bit7Clear                       ; Remove AI
 285+ C5FC 32 43 C0                             ld      (UBnkaiatkecm),a
 286+ C5FF AF                                   xor     a
 287+ C600 32 47 C0                             ld      (UBnKEnergy),a
 288+ C603                                      ;TODO
 289+ C603 C9                                   ret
 290+ C604
 291+ C604 CD 3D C6     UnivSetDemoPostion:     call    UnivSetSpawnPosition
 292+ C607 3E 81                                ld      a,%10000001                     ; AI Enabled has 1 missile
 293+ C609 32 43 C0                             ld      (UBnkaiatkecm),a                ; set hostinle, no AI, has ECM
 294+ C60C 32 32 C3                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 295+ C60F 3E FF                                ld      a,$FF
 296+ C611 32 39 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 297+ C614 32 38 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 298+ C617                                      ZeroA
 298+ C617 AF          >                        xor a
 299+ C618 32 12 C0                             ld      (UBnKxsgn),a
 300+ C61B 32 15 C0                             ld      (UBnKysgn),a
 301+ C61E 32 18 C0                             ld      (UBnKzsgn),a
 302+ C621 21 00 00                             ld      hl,0
 303+ C624 22 10 C0                             ld      (UBnKxlo),hl
 304+ C627 22 13 C0                             ld      (UBnKylo),hl
 305+ C62A 3A 31 C3                             ld      a,(ShipTypeAddr)
 306+ C62D 21 B0 05                             ld      hl,$05B0                            ; so its a negative distance behind
 307+ C630                                      JumpIfANENusng ShipTypeStation, .SkipFurther
 307+ C630 FE 02       >                        cp     ShipTypeStation
 307+ C632 C2 39 C6    >                        jp      nz,.SkipFurther
 308+ C635 3E 05                                ld      a,5
 309+ C637 84                                   add     h
 310+ C638 67                                   ld      h,a
 311+ C639 22 16 C0     .SkipFurther            ld      (UBnKzlo),hl
 312+ C63C C9                                   ret
 313+ C63D              ; --------------------------------------------------------------
 314+ C63D              ; This sets the position of the current ship randomly, called after spawing
 315+ C63D CD 12 C8     UnivSetSpawnPosition:   call    InitialiseOrientation
 316+ C640                                      RandomUnivPitchAndRoll
 316+ C640 CD B2 86    >                        call    doRandom
 316+ C643 F6 6F       >                        or      %01101111
 316+ C645 32 38 C0    >                        ld      (UBnKRotXCounter),a
 316+ C648 CD B2 86    >                        call    doRandom
 316+ C64B F6 6F       >                        or      %01101111
 316+ C64D 32 39 C0    >                        ld      (UBnKRotZCounter),a
 317+ C650 CD B2 86                             call    doRandom                        ; set x lo and y lo to random
 318+ C653 32 10 C0     .setXlo:                ld      (UBnKxlo),a
 319+ C656 32 13 C0     .setYlo:                ld      (UBnKylo),a
 320+ C659 0F           .setXsign:              rrca                                    ; rotate by 1 bit right
 321+ C65A 47                                   ld      b,a
 322+ C65B E6 80                                and     SignOnly8Bit
 323+ C65D 32 12 C0                             ld      (UBnKxsgn),a
 324+ C660 78           .setYSign:              ld      a,b                             ; get random back again
 325+ C661 0F                                   rrca                                    ; rotate by 1 bit right
 326+ C662 47                                   ld      b,a
 327+ C663 E6 80                                and     SignOnly8Bit                    ; and set y sign
 328+ C665 32 15 C0                             ld      (UBnKysgn),a
 329+ C668 CB 08        .setYHigh:              rrc     b                               ; as value is in b rotate again
 330+ C66A 78                                   ld      a,b                             ;
 331+ C66B E6 1F                                and     31                              ; set y hi to random 0 to 31
 332+ C66D 32 14 C0                             ld      (UBnKyhi),a                     ;
 333+ C670 CB 08        .setXHigh:              rrc     b                               ; as value is in b rotate again
 334+ C672 78                                   ld      a,b
 335+ C673 E6 1F                                and     31                              ; set x hi to random 0 to 31
 336+ C675 4F                                   ld      c,a                             ; save shifted into c as well
 337+ C676 32 11 C0                             ld      (UBnKxhi),a
 338+ C679 3E 50        .setZHigh:              ld      a,80                            ; set z hi to 80 - xhi - yhi - carry
 339+ C67B 98                                   sbc     b
 340+ C67C 99                                   sbc     c
 341+ C67D 32 17 C0                             ld      (UBnKzhi),a
 342+ C680 3A 31 C3     .CheckIfBodyOrJunk:     ld      a,(ShipTypeAddr)
 343+ C683                                      ReturnIfAEqNusng ShipTypeJunk
 343+ C683 FE 03       >                        cp      ShipTypeJunk
 343+ C685 C8          >                        ret     z
 344+ C686                                      ReturnIfAEqNusng ShipTypeScoopable
 344+ C686 FE 04       >                        cp      ShipTypeScoopable
 344+ C688 C8          >                        ret     z
 345+ C689 78                                   ld      a,b                             ; its not junk to set z sign
 346+ C68A 0F                                   rrca                                    ; as it can jump in
 347+ C68B E6 80                                and     SignOnly8Bit
 348+ C68D 32 18 C0                             ld      (UBnKzsgn),a
 349+ C690 C9                                   ret
 350+ C691
 351+ C691              ; --------------------------------------------------------------
 352+ C691              ; This sets the cargo type or carryflag set for not cargo
 353+ C691              ; Later this will be done via a loadable lookup table
 354+ C691 3A 31 C3     ShipCargoType:          ld      a,(ShipTypeAddr)
 355+ C694                                      JumpIfAEqNusng ShipID_CargoType5, .CargoCanister
 355+ C694 FE 04       >                        cp     ShipID_CargoType5
 355+ C696 CA AD C6    >                        jp      z,.CargoCanister
 356+ C699              .IsItThargon:           JumpIfAEqNusng ShipID_Thargon,    .Thargon
 356+ C699 FE 27       >                        cp     ShipID_Thargon
 356+ C69B CA B3 C6    >                        jp      z,.Thargon
 357+ C69E              .IsItAlloy:             JumpIfAEqNusng ShipID_Plate,      .Plate
 357+ C69E FE 1D       >                        cp     ShipID_Plate
 357+ C6A0 CA B6 C6    >                        jp      z,.Plate
 358+ C6A3              .IsItSplinter:          JumpIfAEqNusng ShipID_Splinter,   .Splinter
 358+ C6A3 FE 24       >                        cp     ShipID_Splinter
 358+ C6A5 CA B9 C6    >                        jp      z,.Splinter
 359+ C6A8              .IsItEscapePod:         JumpIfAEqNusng ShipID_Escape_Pod, .EscapePod
 359+ C6A8 FE 11       >                        cp     ShipID_Escape_Pod
 359+ C6AA CA BC C6    >                        jp      z,.EscapePod
 360+ C6AD CD B2 86     .CargoCanister:         call    doRandom
 361+ C6B0 E6 0F                                and     15                      ; Limit stock from Food to Platinum
 362+ C6B2 C9                                   ret
 363+ C6B3 3E 11        .Thargon:               ld      a,AlienItemsIndex
 364+ C6B5 C9                                   ret
 365+ C6B6 3E 0A        .Plate:                 ld      a,AlloysIndex
 366+ C6B8 C9                                   ret
 367+ C6B9 3E 0D        .Splinter:              ld      a,MineralsIndex
 368+ C6BB C9                                   ret
 369+ C6BC 3E 04        .EscapePod:             ld      a,SlavesIndex
 370+ C6BE C9                                   ret
 371+ C6BF
 372+ C6BF              ; --------------------------------------------------------------
 373+ C6BF              ; This sets current univrse object to space station
 374+ C6BF 3E 81        ResetStationLaunch:     ld  a,%10000001                         ; Has AI and 1 Missile
 375+ C6C1 32 43 C0                             ld  (UBnkaiatkecm),a                    ; set hostinle, no AI, has ECM
 376+ C6C4 AF                                   xor a
 377+ C6C5 32 39 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 378+ C6C8 32 32 C3                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 379+ C6CB 3E FF                                ld      a,$FF
 380+ C6CD 32 38 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 381+ C6D0 21 00 00     .SetPosBehindUs:        ld      hl,$0000
 382+ C6D3 22 10 C0                             ld      (UBnKxlo),hl
 383+ C6D6 21 00 00                             ld      hl,$0000
 384+ C6D9 22 13 C0                             ld      (UBnKylo),hl
 385+ C6DC 21 B0 01                             ld      hl,$01B0                            ; so its a negative distance behind
 386+ C6DF 22 16 C0                             ld      (UBnKzlo),hl
 387+ C6E2 AF                                   xor     a
 388+ C6E3 32 12 C0                             ld      (UBnKxsgn),a
 389+ C6E6 32 15 C0                             ld      (UBnKysgn),a
 390+ C6E9 3E 80                                ld      a,$80
 391+ C6EB 32 18 C0                             ld      (UBnKzsgn),a
 392+ C6EE CD 41 C8     .SetOrientation:        call    LaunchedOrientation             ; set initial facing
 393+ C6F1 C9                                   ret
 394+ C6F2                  ;Input: BC = Dividend, DE = Divisor, HL = 0
 395+ C6F2              ;Output: BC = Quotient, HL = Remainder
 396+ C6F2
 397+ C6F2              ; Initialiase data, iyh must equal slot number
 398+ C6F2              ;                   iyl must be ship type
 399+ C6F2              ;                   a  = current bank number
 400+ C6F2 32 30 C0     UnivInitRuntime:        ld      (UbnKShipUnivBankNbr),a     ; actual bank nmber related to the slot
 401+ C6F5 01 1E 00                             ld      bc,UBnKRuntimeSize
 402+ C6F8 21 2F C0                             ld      hl,UBnKStartOfRuntimeData
 403+ C6FB                                      ZeroA
 403+ C6FB AF          >                        xor a
 404+ C6FC 32 48 C0                             ld      (UBnKECMCountDown),a
 405+ C6FF 77           .InitLoop:              ld      (hl),a
 406+ C700 23                                   inc     hl
 407+ C701 10 FC                                djnz    .InitLoop
 408+ C703              .SetEnergy:             ldCopyByte EnergyAddr, UBnKEnergy
 408+ C703 3A 29 C3    >                        ld       a,(EnergyAddr)
 408+ C706 32 47 C0    >                        ld       (UBnKEnergy),a
 409+ C709 FD 7C        .SetBankData:           ld      a,iyh
 410+ C70B 32 2F C0                             ld      (UBnKSlotNumber),a
 411+ C70E FD 7D                                ld      a,iyl
 412+ C710 32 33 C0                             ld      (UBnKShipModeID),a
 413+ C713 CD 0F E0                             call    GetShipBankId                ; this will mostly be debugging info
 414+ C716 32 31 C0                             ld      (UBnkShipModelBank),a        ; this will mostly be debugging info
 415+ C719 78                                   ld      a,b                          ; this will mostly be debugging info
 416+ C71A 32 32 C0                             ld      (UBnKShipModelNbr),a         ; this will mostly be debugging info
 417+ C71D 3A 33 C3                             ld      a,(ShipAIFlagsAddr)          ; get laser and missile details
 418+ C720 E6 07                                and     %00000111                    ; mask for missiles
 419+ C722 32 4A C0                             ld      (UBnKMissilesLeft),a
 420+ C725 3A 34 C3                             ld      a,(ShipECMFittedChanceAddr)
 421+ C728 47                                   ld      b,a
 422+ C729 3A 07 80     .FetchLatestRandom:     ld      a,(RandomSeed3)
 423+ C72C                                      JumpIfALTNusng b, .ECMFitted
 423+ C72C B8          >                        cp      b
 423+ C72D DA 38 C7    >                        jp		c, .ECMFitted
 424+ C730              .ECMNotFitted:          SetMemFalse UBnKECMFitted
 424+ C730 3E FF       >                        ld      a,$FF
 424+ C732 32 49 C0    >                        ld      (UBnKECMFitted),a
 425+ C735 C3 3C C7                             jp      .DoneECM
 426+ C738              .ECMFitted:             SetMemTrue  UBnKECMFitted
 426+ C738 AF          >                        xor     a
 426+ C739 32 49 C0    >                        ld      (UBnKECMFitted),a
 427+ C73C              .DoneECM:               ; TODO set up laser power
 428+ C73C C9                                   ret
 429+ C73D
 430+ C73D
 431+ C73D              ;;; moved to v4 in asm_add ADDHLDESignedv3:        ld      a,h
 432+ C73D              ;;; moved to v4 in asm_add                         and     SignOnly8Bit
 433+ C73D              ;;; moved to v4 in asm_add                         ld      b,a                         ;save sign bit in b
 434+ C73D              ;;; moved to v4 in asm_add                         xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 435+ C73D              ;;; moved to v4 in asm_add                         JumpIfNegative ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 436+ C73D              ;;; moved to v4 in asm_add ADDHLDESameSigns:       ld      a,b
 437+ C73D              ;;; moved to v4 in asm_add                         or      d
 438+ C73D              ;;; moved to v4 in asm_add                         JumpIfNegative ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 439+ C73D              ;;; moved to v4 in asm_add                         add     hl,de
 440+ C73D              ;;; moved to v4 in asm_add                         ret
 441+ C73D              ;;; moved to v4 in asm_add ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 442+ C73D              ;;; moved to v4 in asm_add                         and     SignMask8Bit                ; we could check the value of b for optimisation
 443+ C73D              ;;; moved to v4 in asm_add                         ld      h,a
 444+ C73D              ;;; moved to v4 in asm_add                         ld      a,d
 445+ C73D              ;;; moved to v4 in asm_add                         and     SignMask8Bit
 446+ C73D              ;;; moved to v4 in asm_add                         ld      d,a
 447+ C73D              ;;; moved to v4 in asm_add                         add     hl,de
 448+ C73D              ;;; moved to v4 in asm_add                         ld      a,SignOnly8Bit
 449+ C73D              ;;; moved to v4 in asm_add                         or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 450+ C73D              ;;; moved to v4 in asm_add                         ld      h,a
 451+ C73D              ;;; moved to v4 in asm_add                         ret
 452+ C73D              ;;; moved to v4 in asm_add ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 453+ C73D              ;;; moved to v4 in asm_add                         and     SignMask8Bit                ; we could check the value of b for optimisation
 454+ C73D              ;;; moved to v4 in asm_add                         ld      h,a
 455+ C73D              ;;; moved to v4 in asm_add                         ld      a,d
 456+ C73D              ;;; moved to v4 in asm_add                         and     SignMask8Bit
 457+ C73D              ;;; moved to v4 in asm_add                         ld      d,a
 458+ C73D              ;;; moved to v4 in asm_add                         or      a
 459+ C73D              ;;; moved to v4 in asm_add                         sbc     hl,de
 460+ C73D              ;;; moved to v4 in asm_add                         jr      c,ADDHLDEOppInvert
 461+ C73D              ;;; moved to v4 in asm_add ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 462+ C73D              ;;; moved to v4 in asm_add                         or      h
 463+ C73D              ;;; moved to v4 in asm_add                         ld      h,a                         ; set the previou sign value
 464+ C73D              ;;; moved to v4 in asm_add                         ret
 465+ C73D              ;;; moved to v4 in asm_add ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 466+ C73D              ;;; moved to v4 in asm_add                         ld      a,b
 467+ C73D              ;;; moved to v4 in asm_add                         xor     SignOnly8Bit                ; flip sign bit
 468+ C73D              ;;; moved to v4 in asm_add                         or      h
 469+ C73D              ;;; moved to v4 in asm_add                         ld      h,a                         ; recover sign
 470+ C73D              ;;; moved to v4 in asm_add                         ret
 471+ C73D              ;;; moved to v4 in asm_add
 472+ C73D              ; we could cheat, flip the sign of DE and just add but its not very optimised
 473+ C73D              ;;;moved into asm_subtract SUBHLDESignedv3:        ld      a,h
 474+ C73D              ;;;moved into asm_subtract                         and     SignOnly8Bit
 475+ C73D              ;;;moved into asm_subtract                         ld      b,a                         ;save sign bit in b
 476+ C73D              ;;;moved into asm_subtract                         xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 477+ C73D              ;;;moved into asm_subtract                         JumpIfNegative SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 478+ C73D              ;;;moved into asm_subtract SUBHLDESameSigns:       ld      a,b
 479+ C73D              ;;;moved into asm_subtract                         or      d
 480+ C73D              ;;;moved into asm_subtract                         JumpIfNegative SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 481+ C73D              ;;;moved into asm_subtract                         or      a
 482+ C73D              ;;;moved into asm_subtract                         sbc     hl,de
 483+ C73D              ;;;moved into asm_subtract                         JumpIfNegative SUBHLDESameOvrFlw
 484+ C73D              ;;;moved into asm_subtract                         ret
 485+ C73D              ;;;moved into asm_subtract SUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 486+ C73D              ;;;moved into asm_subtract                         and     SignMask8Bit                ; we could check the value of b for optimisation
 487+ C73D              ;;;moved into asm_subtract                         ld      h,a
 488+ C73D              ;;;moved into asm_subtract                         ld      a,d
 489+ C73D              ;;;moved into asm_subtract                         and     SignMask8Bit
 490+ C73D              ;;;moved into asm_subtract                         ld      d,a
 491+ C73D              ;;;moved into asm_subtract                         or      a
 492+ C73D              ;;;moved into asm_subtract                         sbc     hl,de
 493+ C73D              ;;;moved into asm_subtract                         JumpIfNegative SUBHLDESameOvrFlw
 494+ C73D              ;;;moved into asm_subtract                         ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 495+ C73D              ;;;moved into asm_subtract                         or      SignOnly8Bit
 496+ C73D              ;;;moved into asm_subtract                         ld      h,a
 497+ C73D              ;;;moved into asm_subtract                         ret
 498+ C73D              ;;;moved into asm_subtract SUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 499+ C73D              ;;;moved into asm_subtract                         ld      a,b
 500+ C73D              ;;;moved into asm_subtract                         xor     SignOnly8Bit                ; flip sign bit
 501+ C73D              ;;;moved into asm_subtract                         or      h
 502+ C73D              ;;;moved into asm_subtract                         ld      h,a                         ; recover sign
 503+ C73D              ;;;moved into asm_subtract                         ret
 504+ C73D              ;;;moved into asm_subtract SUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 505+ C73D              ;;;moved into asm_subtract                         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 506+ C73D              ;;;moved into asm_subtract                         and     SignMask8Bit                ; we could check the value of b for optimisation
 507+ C73D              ;;;moved into asm_subtract                         ld      h,a
 508+ C73D              ;;;moved into asm_subtract                         ld      a,d
 509+ C73D              ;;;moved into asm_subtract                         and     SignMask8Bit
 510+ C73D              ;;;moved into asm_subtract                         ld      d,a
 511+ C73D              ;;;moved into asm_subtract                         add     hl,de
 512+ C73D              ;;;moved into asm_subtract                         ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 513+ C73D              ;;;moved into asm_subtract                         or      h
 514+ C73D              ;;;moved into asm_subtract                         ld      h,a                         ; set the previou sign value
 515+ C73D              ;;;moved into asm_subtract                         ret
 516+ C73D
 517+ C73D
 518+ C73D              SBCHLDESigned:          JumpOnBitSet h,7,SBCHLDEhlNeg
 518+ C73D CB 7C       >                        bit 	7,h
 518+ C73F C2 50 C7    >                        jp      nz,SBCHLDEhlNeg
 519+ C742              SBCHLDEhlPos:           JumpOnBitSet h,7,SBCHLDEhlNeg
 519+ C742 CB 7C       >                        bit 	7,h
 519+ C744 C2 50 C7    >                        jp      nz,SBCHLDEhlNeg
 520+ C747 ED 52        SBCHLDEhlPosDePos:      sbc     hl,de                           ; ignore overflow for now will sort later TODO
 521+ C749 C9                                   ret
 522+ C74A CB BA        SBCHLDEhlPosDeNeg:      res     7,d
 523+ C74C 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 524+ C74D CB FA                                set     7,d
 525+ C74F C9                                   ret
 526+ C750 CB BC        SBCHLDEhlNeg:           res     7,h
 527+ C752                                      JumpOnBitSet d,7,SBCHLDEhlNegdeNeg
 527+ C752 CB 7A       >                        bit 	7,d
 527+ C754 C2 5C C7    >                        jp      nz,SBCHLDEhlNegdeNeg
 528+ C757 ED 52        SBCHLDEhlNegdePos:      sbc     hl,de                       ; ignore overflow for now will sort later TODO
 529+ C759 CB FC                                set     7,h
 530+ C75B C9                                   ret
 531+ C75C CB BA        SBCHLDEhlNegdeNeg:      res     7,d
 532+ C75E 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 533+ C75F CB FA                                set     7,d
 534+ C761 CB FC                                set     7,h
 535+ C763 C9                                   ret
 536+ C764
 537+ C764              ; Roate around axis
 538+ C764              ; varAxis1 and varAxis2 point to the address of the axis to rotate
 539+ C764              ; so the axis x1 points to roofv  x , y or z
 540+ C764              ;             x2           nosev or sidev  x, y or z
 541+ C764              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
 542+ C764              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
 543+ C764              ; var RAT2 gives direction
 544+ C764              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
 545+ C764              ;-Set up S R -----------------------------------------
 546+ C764              ; optimised we don't deal with sign here just the value of roof axis / 512
 547+ C764 2A F4 7F     MVS5RotateAxis:         ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
 548+ C767 5E                                   ld      e,(hl)
 549+ C768 23                                   inc     hl
 550+ C769 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
 551+ C76A EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
 552+ C76B 7C                                   ld      a,h
 553+ C76C E6 80                                and     SignOnly8Bit
 554+ C76E FD 67                                ld      iyh,a           ; iyh = sign Axis1
 555+ C770 7C                                   ld      a,h
 556+ C771 E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
 557+ C773 CB 3F                                srl     a               ; a = Axis1/2
 558+ C775 5F                                   ld      e,a             ;
 559+ C776 FD 7C                                ld      a,iyh           ; A = Axis 1 sign
 560+ C778 57                                   ld      d,a             ; de = signed Axis1 / 512
 561+ C779 B7                                   or      a               ; clear carry
 562+ C77A CD 30 91                             call    SUBHLDESigned ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
 563+ C77D              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
 564+ C77D E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
 565+ C77E 7D                                   ld      a,l
 566+ C77F 32 12 81                             ld      (varR),a
 567+ C782 7C                                   ld      a,h
 568+ C783 32 13 81                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
 569+ C786              ;-calculate roofv latter half of calc
 570+ C786 2A F6 7F                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
 571+ C789 5E                                   ld      e,(hl)
 572+ C78A 23                                   inc     hl
 573+ C78B 56                                   ld      d,(hl)          ; de = value of roof axis
 574+ C78C 7A                                   ld      a,d
 575+ C78D E6 80                                and     SignOnly8Bit
 576+ C78F FD 67                                ld      iyh,a           ; save sign
 577+ C791 7A                                   ld      a,d
 578+ C792 E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 579+ C794 57                                   ld      d,a             ; de = abs (nosev)
 580+ C795                                      ShiftDERight1
 580+ C795 CB 3A       >			   srl d
 580+ C797 CB 1B       >			   rr  e
 581+ C799                                      ShiftDERight1
 581+ C799 CB 3A       >			   srl d
 581+ C79B CB 1B       >			   rr  e
 582+ C79D                                      ShiftDERight1
 582+ C79D CB 3A       >			   srl d
 582+ C79F CB 1B       >			   rr  e
 583+ C7A1                                      ShiftDERight1           ; de = nosev /16 unsigned
 583+ C7A1 CB 3A       >			   srl d
 583+ C7A3 CB 1B       >			   rr  e
 584+ C7A5 3A 3F C0                             ld      a,(univRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
 585+ C7A8 FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
 586+ C7AA E6 80                                and     SignOnly8Bit
 587+ C7AC B2                                   or      d
 588+ C7AD 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
 589+ C7AE              ;;; ld      a,e
 590+ C7AE              ;;;     or      iyh
 591+ C7AE              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 592+ C7AE              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
 593+ C7AE E1                                   pop     hl              ; get back RS POP ID 1
 594+ C7AF                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 595+ C7AF              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
 596+ C7AF CD D4 8F                             call    ADDHLDESignedV4 ; do add using hl and de
 597+ C7B2 E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
 598+ C7B3              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
 599+ C7B3              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
 600+ C7B3 2A F6 7F                         ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
 601+ C7B6 5E                               ld      e,(hl)
 602+ C7B7 23                               inc     hl
 603+ C7B8 56                               ld      d,(hl)
 604+ C7B9 EB                               ex      de,hl
 605+ C7BA 7C                               ld      a,h
 606+ C7BB E6 80                            and     $80
 607+ C7BD FD 67                            ld      iyh,a
 608+ C7BF 7C                               ld      a,h
 609+ C7C0 E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 610+ C7C2 CB 3F                            srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
 611+ C7C4 5F                               ld      e,a
 612+ C7C5 FD 7C                            ld      a,iyh
 613+ C7C7 57                               ld      d,a
 614+ C7C8 B7                               or      a               ; clear carry
 615+ C7C9 CD 30 91                         call    SUBHLDESigned
 616+ C7CC              ;   sbc     hl,de           ; hl = nosev - novesv / 512
 617+ C7CC E5                               push    hl              ; save hl on stack  PUSH ID 3
 618+ C7CD 7D                               ld      a,l
 619+ C7CE 32 0F 80                         ld      (varP),a        ; p = low of resuilt
 620+ C7D1 7C                               ld      a,h
 621+ C7D2 E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 622+ C7D4 32 2F 81                         ld      (varT),a        ; t = high of result
 623+ C7D7              ;-- Set up TQ
 624+ C7D7 2A F4 7F                         ld      hl,(varAxis1)   ; now work on roofv axis / 16
 625+ C7DA              ;   ld      hl,(varAxis2)   ; work on nosev again
 626+ C7DA 5E                               ld      e,(hl)
 627+ C7DB 23                               inc     hl
 628+ C7DC 56                               ld      d,(hl)
 629+ C7DD 7A                               ld      a,d
 630+ C7DE E6 80                            and     $80
 631+ C7E0 FD 67                            ld      iyh,a           ; save sign
 632+ C7E2 7A                               ld      a,d
 633+ C7E3 E6 7F                            and     SignMask8Bit    ; a = nosev hi axis  unsigned
 634+ C7E5 57                               ld      d,a             ; de = abs (nosev)
 635+ C7E6                                  ShiftDERight1
 635+ C7E6 CB 3A       >			   srl d
 635+ C7E8 CB 1B       >			   rr  e
 636+ C7EA                                  ShiftDERight1
 636+ C7EA CB 3A       >			   srl d
 636+ C7EC CB 1B       >			   rr  e
 637+ C7EE                                  ShiftDERight1
 637+ C7EE CB 3A       >			   srl d
 637+ C7F0 CB 1B       >			   rr  e
 638+ C7F2                                  ShiftDERight1           ; de = nosev /16 unsigned
 638+ C7F2 CB 3A       >			   srl d
 638+ C7F4 CB 1B       >			   rr  e
 639+ C7F6 3A 3F C0                         ld      a,(univRAT2)
 640+ C7F9 FD AC                            xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 641+ C7FB E6 80                            and     $80
 642+ C7FD B2                               or      d
 643+ C7FE 57                               ld      d,a
 644+ C7FF              ;;; ld      a,e
 645+ C7FF              ;;;     or      iyh
 646+ C7FF              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 647+ C7FF E1                               pop     hl              ; get back RS   POP ID 3
 648+ C800              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 649+ C800 CD 30 91                         call    SUBHLDESigned ; do add using hl and de
 650+ C803              ;-- Update nosev ---------------------------------------
 651+ C803 EB                               ex      de,hl           ; save hl to de
 652+ C804 2A F6 7F                         ld      hl,(varAxis2)
 653+ C807 73                               ld      (hl),e
 654+ C808 23                               inc     hl
 655+ C809 72                               ld      (hl),d          ; copy result into nosev
 656+ C80A              ;-- Update roofv ---------------------------------------
 657+ C80A D1                               pop     de              ; get calc saved on stack POP ID 2
 658+ C80B 2A F4 7F                         ld      hl,(varAxis1)
 659+ C80E 73                               ld      (hl),e
 660+ C80F 23                               inc     hl
 661+ C810 72                               ld      (hl),d          ; copy result into nosev
 662+ C811 C9                               ret
 663+ C812
 664+ C812                                  include "Universe/Ships/InitialiseOrientation.asm"
# file opened: ./Universe/Ships/InitialiseOrientation.asm
   1++C812              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   2++C812              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   3++C812              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   4++C812              InitialiseOrientation:
   5++C812 21 00 00     ZI1:                    ld      hl, 0
   6++C815 22 1B C0                             ld      (UBnkrotmatSidevY),hl                ; set the zeroes
   7++C818 22 1D C0                             ld      (UBnkrotmatSidevZ),hl                ; set the zeroes
   8++C81B 22 1F C0                             ld      (UBnkrotmatRoofvX),hl                ; set the zeroes
   9++C81E 22 23 C0                             ld      (UBnkrotmatRoofvZ),hl                ; set the zeroes
  10++C821 22 25 C0                             ld      (UBnkrotmatNosevX),hl                ; set the zeroes
  11++C824 22 27 C0                             ld      (UBnkrotmatNosevY),hl                ; set the zeroes
  12++C827 21 00 60                             ld      hl, $6000					; 96 in hi byte
  13++C82A                                      ;ld      hl,1
  14++C82A 22 19 C0                             ld      (UBnkrotmatSidevX),hl
  15++C82D 22 21 C0                             ld      (UBnkrotmatRoofvY),hl
  16++C830 21 00 E0                             ld      hl, $E000					; -96 in hi byte which is +96 with hl bit 7 set
  17++C833 22 29 C0                             ld      (UBnkrotmatNosevZ),hl
  18++C836 C9                                   ret
  19++C837
  20++C837              InitialisePlayerMissileOrientation:
  21++C837 CD 12 C8                             call    InitialiseOrientation
  22++C83A 21 00 60                             ld      hl,$6000
  23++C83D 22 29 C0                             ld      (UBnkrotmatNosevZ),hl           ; mius
  24++C840 C9                                   ret
  25++C841
  26++C841
  27++C841              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
  28++C841              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
  29++C841              ;  nosev = (-0,  -0, 1) nosev = (0, 0, &6000)
  30++C841 CD 12 C8     LaunchedOrientation:    call    InitialiseOrientation
  31++C844                                      FlipSignMem UBnkrotmatNosevX+1;  as its 0 flipping will make no difference
  31++C844 3A 26 C0    >                        ld  a,(UBnkrotmatNosevX+1)
  31++C847 EE 80       >                        xor SignOnly8Bit
  31++C849 32 26 C0    >                        ld  (UBnkrotmatNosevX+1),a
  32++C84C                                      FlipSignMem UBnkrotmatNosevY+1;  as its 0 flipping will make no difference
  32++C84C 3A 28 C0    >                        ld  a,(UBnkrotmatNosevY+1)
  32++C84F EE 80       >                        xor SignOnly8Bit
  32++C851 32 28 C0    >                        ld  (UBnkrotmatNosevY+1),a
  33++C854                                      FlipSignMem UBnkrotmatNosevZ+1
  33++C854 3A 2A C0    >                        ld  a,(UBnkrotmatNosevZ+1)
  33++C857 EE 80       >                        xor SignOnly8Bit
  33++C859 32 2A C0    >                        ld  (UBnkrotmatNosevZ+1),a
  34++C85C C9                                   ret
  35++C85D
# file closed: ./Universe/Ships/InitialiseOrientation.asm
 665+ C85D
 666+ C85D              ;----------------------------------------------------------------------------------------------------------------------------------
 667+ C85D              OrientateVertex:
 668+ C85D
 669+ C85D              ;                      [ sidev_x sidev_y sidev_z ]   [ x ]
 670+ C85D              ;  projected [x y z] = [ roofv_x roofv_y roofv_z ] . [ y ]
 671+ C85D              ;                      [ nosev_x nosev_y nosev_z ]   [ z ]
 672+ C85D              ;
 673+ C85D
 674+ C85D              ;----------------------------------------------------------------------------------------------------------------------------------
 675+ C85D              TransposeVertex:
 676+ C85D              ;                      [ sidev_x roofv_x nosev_x ]   [ x ]
 677+ C85D              ;  projected [x y z] = [ sidev_y roofv_y nosev_y ] . [ y ]
 678+ C85D              ;                      [ sidev_z roofv_z nosev_z ]   [ z ]
 679+ C85D              VectorToVertex:
 680+ C85D              ;                     [ sidev_x roofv_x nosev_x ]   [ x ]   [ x ]
 681+ C85D              ;  vector to vertex = [ sidev_y roofv_y nosev_y ] . [ y ] + [ y ]
 682+ C85D              ;                     [ sidev_z roofv_z nosev_z ]   [ z ]   [ z ]
 683+ C85D              ;INPUTS:    bhl = dividend  cde = divisor where b and c are sign bytes
 684+ C85D              ;OUTPUTS:   cahl = quotient cde = divisor
 685+ C85D 32 11 80     DVID3B2:                ld      (varPhi2),a                     ;DVID3B2 \ Divide 3 bytes by 2, K = [P(HiLo).A]/[INWK_z HiLo], for planet radius, Xreg protected. ; P+2    \ num sg
 686+ C860                                      ldCopy2Byte UBnKzlo, varQ               ; [QR} = Ubnk zlohi  (i.e. Inwk_z HiLo)
 686+ C860 2A 16 C0    >                        ld       hl,(UBnKzlo)
 686+ C863 22 11 81    >                        ld       (varQ),hl
 687+ C866 3A 18 C0                             ld      a,(UBnKzsgn)                    ;
 688+ C869 32 13 81                             ld      (varS),a                        ; S = inkw z sign
 689+ C86C ED 5B 0F 80  DVID3B:                 ld      de,(varP)                       ; K (3bytes)=P(Lo Hi Hi2)/S.R.Q approx  Acc equiv K(0).; get P and P+1 into de
 690+ C870 7B                                   ld      a,e                             ; num lo
 691+ C871 F6 01                                or      1                               ; must be at least 1
 692+ C873 32 0F 80                             ld      (varP),a                        ; store
 693+ C876 5F                                   ld      e,a                             ; update DE too
 694+ C877 3A 11 80                             ld      a,(varPhi2)                     ; varP Sign     E.D.A = P Lo Hi Hi2
 695+ C87A 21 13 81                             ld      hl,varS                         ; hl = address of VarS
 696+ C87D AE                                   xor     (hl)                            ; A = PHi2 Xor S Signs
 697+ C87E E6 80                                and     $80                             ;
 698+ C880 32 2F 81                             ld      (varT),a                        ; T = Sign bit of A
 699+ C883 FD 2E 00                             ld      iyl,0                           ; iyl = yReg = counter
 700+ C886 3A 11 80                             ld      a,(varPhi2)                     ;
 701+ C889 E6 7F                                and     $7F                             ; A = Ph2 again but minus sign bit
 702+ C88B              DVL9:                   JumpIfAGTENusng $40,DV14                ; counter Y up; if object is over $40 away then scaled and exit Y count
 702+ C88B FE 40       >                        cp     $40
 702+ C88D D2 9B C8    >                        jp		nc,DV14
 703+ C890                                      ShiftDELeft1                            ; de (or P,P1) > 1
 703+ C890 CB 23       >			   sla e
 703+ C892 CB 12       >			   rl  d
 704+ C894 CB 17                                rl      a                               ; and accumulator as 3rd byte
 705+ C896 FD 2C                                inc     iyl
 706+ C898 C2 8B C8                             jp      nz,DVL9                         ; loop again with a max of 256 iterations
 707+ C89B 32 11 80     DV14:                   ld      (varPhi2),a                     ; scaled, exited Ycount
 708+ C89E ED 53 0F 80                          ld      (varP),de                       ; store off the value so far
 709+ C8A2 3A 13 81                             ld      a,(varS)                        ; zsign
 710+ C8A5 E6 7F                                and     $7F                             ; denom sg7
 711+ C8A7                                      ; jp mi,DV9                             ; this can never happen as bit 7 is and'ed out
 712+ C8A7 2A 11 81                             ld      hl,(varQ)                       ; demon lo
 713+ C8AA FD 2D        DVL6:                   dec     iyl                             ; counter Y back down, dddd S. ;  scale Y back
 714+ C8AC                                      ShiftHLLeft1
 714+ C8AC CB 25       >			   sla l
 714+ C8AE CB 14       >			   rl  h
 715+ C8B0 CB 17                                rl      a                               ; mulitply QRS by 2
 716+ C8B2 F2 AA C8                             jp      p,DVL6                          ; loop roll S until Abit7 set.
 717+ C8B5 22 11 81     DV9:                    ld      (varQ),hl                       ; bmi cant enter here from above ; save off so far
 718+ C8B8 32 11 81                             ld      (varQ),a                        ; Q \ mostly empty so now reuse as hi denom
 719+ C8BB 3E FE                                ld      a,$FE                           ;  Xreg protected so can't LL28+4
 720+ C8BD 32 12 81                             ld      (varR),a                        ;  R
 721+ C8C0 3A 11 80                             ld      a,(varPhi2)                     ; P+2 \ big numerator
 722+ C8C3 CD 0B 92                             call    PROJ256mulAdivQ                 ; TODO LL31\ R now =A*256/Q
 723+ C8C6 3E 00                                ld      a,0
 724+ C8C8 32 27 81                             ld      (varKp1),a
 725+ C8CB 32 28 81                             ld      (varKp2),a
 726+ C8CE 32 29 81                             ld      (varKp3),a                      ; clear out K+1 to K+3
 727+ C8D1 FD 7D                                ld      a,iyl                           ; Y counter for scale
 728+ C8D3                                      JumpOnBitClear a,7,DV12                 ; Ycount +ve
 728+ C8D3 CB 7F       >                        bit 	7,a
 728+ C8D5 CA 00 C9    >                        jp      z,DV12
 729+ C8D8 3A 12 81                             ld      a,(varR)                        ; R     \ else Y count is -ve, Acc = remainder.
 730+ C8DB ED 5B 26 81                          ld      de,(varK)                       ; d= k1
 731+ C8DF 2A 2A 81                             ld      hl,(varK2)                      ; h = k3, l = k2
 732+ C8E2 5F                                   ld      e,a                             ; use e to hold K0 pulled from a
 733+ C8E3 CB 27        DVL8:                   sla     a                               ; boost up a                     ;  counter Y up
 734+ C8E5 CB 12                                rl      d                               ; k1
 735+ C8E7 CB 15                                rl      l                               ; k2
 736+ C8E9 CB 14                                rl      h                               ; k3
 737+ C8EB FD 2C                                inc     iyl
 738+ C8ED 20 F4                                jr      nz,DVL8                         ;
 739+ C8EF ED 53 26 81  DVL8Save:               ld      (varK),de
 740+ C8F3 22 2A 81                             ld      (varK2),hl                      ; save back K0 to k3
 741+ C8F6 3A 2F 81                             ld      a,(varT)
 742+ C8F9 4F                                   ld      c,a                             ; get varT into c reg
 743+ C8FA 7C                                   ld      a,h                             ; a= k3 (sign)
 744+ C8FB B1                                   or      c                               ; merge in varT (sign)that was saved much earlier up)
 745+ C8FC 32 39 81                             ld      (varK3),a                       ; load sign bit back into K3
 746+ C8FF C9                                   ret
 747+ C900              DV12:                   JumpIfAIsZero   DV13                    ; Y Count zerp, go to DV13
 747+ C900 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 747+ C901 CA 18 C9    >                        jp	    z, DV13
 748+ C904 3A 12 81                             ld      a,(varR)                        ; Reduce Remainder
 749+ C907 CB 3F        DVL10:                  srl     a                               ; divide by 2                     ; counter Y reduce
 750+ C909 FD 2D                                dec     iyl
 751+ C90B C2 07 C9                             jp      nz,DVL10                        ; loop y reduce until y is zero
 752+ C90E 32 26 81                             ld      (varK),a                        ; k Lo
 753+ C911                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 753+ C911 3A 2F 81    >                        ld       a,(varT)
 753+ C914 32 29 81    >                        ld       (varKp3),a
 754+ C917 C9                                   ret
 755+ C918              DV13:                   ldCopyByte  varR,varK                   ; R \ already correct so copy to K lo;DV13   \ Ycount zero \ K(1to2) already = 0
 755+ C918 3A 12 81    >                        ld       a,(varR)
 755+ C91B 32 26 81    >                        ld       (varK),a
 756+ C91E                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 756+ C91E 3A 2F 81    >                        ld       a,(varT)
 756+ C921 32 29 81    >                        ld       (varKp3),a
 757+ C924 C9                                   ret
 758+ C925
 759+ C925 CD 5D C8     PLS6:                   call    DVID3B2                         ; Returns AHL K ( 2 1 0 )
 760+ C928 3A 29 81                             ld      a,(varKp3)
 761+ C92B E6 7F                                and     $7F
 762+ C92D 21 28 81                             ld      hl,varKp2
 763+ C930 B6                                   or      (hl)
 764+ C931 C2 46 C9                             jp      nz,PL44TooBig
 765+ C934 3A 27 81                             ld      a,(varKp1)
 766+ C937 FE 04                                cp      4                               ; if high byte > 4 then total > 1024 so too big
 767+ C939 30 0B                                jr      nc,PL44TooBig
 768+ C93B                                      ClearCarryFlag                          ; we have a good result regardless
 768+ C93B B7          >                        or a
 769+ C93C 2A 26 81                             ld      hl,(varK)                       ; get K (0 1)
 770+ C93F 3A 29 81                             ld      a,(varKp3)                      ; if sign bit high?
 771+ C942 CB 7F                                bit     7,a
 772+ C944 C8                                   ret     z                               ; no so we can just return
 773+ C945 C9           PL44:                   ret
 774+ C946 37           PL44TooBig:             scf
 775+ C947 C9                                   ret
 776+ C948              Project:
 777+ C948 2A 10 C0     PROJ:                   ld      hl,(UBnKxlo)                    ; Project K+INWK(x,y)/z to K3,K4 for center to screen
 778+ C94B 22 0F 80                             ld      (varP),hl
 779+ C94E 3A 12 C0                             ld      a,(UBnKxsgn)
 780+ C951 CD 25 C9                             call    PLS6                            ; returns result in K (0 1) (unsigned) and K (3) = sign note to no longer does 2's C
 781+ C954 D8                                   ret     c                               ; carry means don't print
 782+ C955 2A 26 81                             ld      hl,(varK)                       ; hl = k (0 1)
 783+ C958                                      ; Now the question is as hl is the fractional part, should this be multiplied by 127 to get the actual range
 784+ C958 3E 80                                ld      a,ViewCenterX
 785+ C95A ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 786+ C95C 22 39 81                             ld      (varK3),hl                      ; K3 = X position on screen
 787+ C95F 2A 13 C0     ProjectY:               ld      hl,(UBnKylo)
 788+ C962 22 0F 80                             ld      (varP),hl
 789+ C965 3A 15 C0                             ld      a,(UBnKysgn)
 790+ C968 CD 25 C9                             call    PLS6
 791+ C96B D8                                   ret     c
 792+ C96C 2A 26 81                             ld      hl,(varK)                       ; hl = k (0 1)
 793+ C96F 3E 40                                ld      a,ViewCenterY
 794+ C971 ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 795+ C973 22 3F 81                             ld      (varK4),hl                      ; K3 = X position on screen
 796+ C976 C9                                   ret
 797+ C977              ;--------------------------------------------------------------------------------------------------------
 798+ C977                                      include "./ModelRender/EraseOldLines-EE51.asm"
# file opened: ././ModelRender/EraseOldLines-EE51.asm
   1++C977              ;
   2++C977              ; EraseOldLines:
   3++C977              ;	Loop from 0 to UbnKEdgeHeapCounter (note this should be 4 * actual nbr of lines)
   4++C977              ;		draw line (black) UBnkLinesArray[0,1]+Loop to [2,3]+loop
   5++C977              ;	 	loop + 4
   6++C977              ; Return
   7++C977
   8++C977              EraseOldLines:
   9++C977              EE51:										; if bit3 set draw lines in XX19 heap
  10++C977              	ReturnOnMemBitClear UBnKexplDsp,3       ; bit 3 denotes that there is nothing to erase as its already done
  10++C977 3A 41 C0    >                        ld     a,(UBnKexplDsp)
  10++C97A CB 5F       >                        bit 	3,a
  10++C97C C8          >                        ret		z
  11++C97D CB DF        	set		3,a
  12++C97F 32 41 C0     	ld		(UBnKexplDsp),a  				; else toggle bit3 to allow lines (set will do as its 0 by now)
  13++C982 C3 AC EA     	jp		clearLines						; LL115	clear LINEstr. Draw lines in XX19 heap.  - note its an & not direct
  14++C985              ; We use the ret from the clearLines so not needed here
  15++C985
# file closed: ././ModelRender/EraseOldLines-EE51.asm
 799+ C985                                      include "./ModelRender/TrimToScreenGrad-LL118.asm"
# file opened: ././ModelRender/TrimToScreenGrad-LL118.asm
   1++C985              ;TrimToScreenGrad:
   2++C985              ;LL118:										; Trim XX15,XX15+2 to screen grad=XX12+2 for CLIP
   3++C985              ;ret
   4++C985              ;TODO        ld      hl,(UBnKx1Lo)               ; XX15+0,1 \ x1 hi
   5++C985              ;TODO        bit     7,a
   6++C985              ;TODO        jr      nz,LL119		            ; x1 hi+ve skip down
   7++C985              ;TODO        ld      a,h
   8++C985              ;TODO        ld      (varS),a                    ; S	 \ else x1 hi -ve
   9++C985              ;TODO        call    XYeqyx1loSmulMdiv256                       ; LL120	 \ X1<0  their comment \ X.Y = x1_lo.S *  M/2566
  10++C985              ;TODO        ld      bc,(UbnKy1Lo)               ; step Y1 lo
  11++C985
  12++C985              ;18                      CLC
  13++C985              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  14++C985              ;85 36                   STA &36			 \ XX15+2
  15++C985              ;98                      TYA 			 \ step Y1 hi
  16++C985              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  17++C985              ;85 37                   STA &37			 \ XX15+3
  18++C985              ;A9 00                   LDA #0			 \ xleft min
  19++C985              ;85 34                   STA &34		\ XX15+0 \ X1 lo
  20++C985              ;85 35                   STA &35		\ XX15+1 \ X1 = 0
  21++C985              ;AA                      TAX 			 \ Xreg = 0, will skip to Ytrim
  22++C985              ;	.LL119	\ x1 hi +ve from LL118
  23++C985              ;F0 19                   BEQ LL134		 \ if x1 hi = 0 skip to Ytrim
  24++C985              ;85 83                   STA &83		\ S	 \ else x1 hi > 0
  25++C985              ;C6 83                   DEC &83		\ S	 \ x1 hi-1
  26++C985              ;20 19 50                JSR &5019	\ LL120  \ X1>255 their comment \ X.Y = x1lo.S *  M/256
  27++C985              ;8A                      TXA 			 \ step Y1 lo
  28++C985              ;18                      CLC
  29++C985              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  30++C985              ;85 36                   STA &36			 \ XX15+2
  31++C985              ;98                      TYA 			 \ step Y1 hi
  32++C985              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  33++C985              ;85 37                   STA &37			 \ XX15+3
  34++C985              ;A2 FF                   LDX #&FF		 \ xright max
  35++C985              ;86 34                   STX &34		\ XX15+0 \ X1 lo
  36++C985              ;E8                      INX 			 \ X = 0
  37++C985              ;86 35                   STX &35		\ XX15+1 \ X1 = 255
  38++C985              ;	.LL134	\ Ytrim
  39++C985              ;A5 37                   LDA &37		\ XX15+3 \ y1 hi
  40++C985              ;10 1A                   BPL LL135		 \ y1 hi +ve
  41++C985              ;85 83                   STA &83		\ S	 \ else y1 hi -ve
  42++C985              ;A5 36                   LDA &36		\ XX15+2 \ y1 lo
  43++C985              ;85 82                   STA &82		\ R	 \ Y1<0 their comment
  44++C985              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  45++C985              ;8A                      TXA 			 \ step X1 lo
  46++C985              ;18                      CLC
  47++C985              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  48++C985              ;85 34                   STA &34			 \ XX15+0
  49++C985              ;98                      TYA 			 \ step X1 hi
  50++C985              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  51++C985              ;85 35                   STA &35			 \ XX15+1
  52++C985              ;A9 00                   LDA #0			 \ Y bottom min
  53++C985              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  54++C985              ;85 37                   STA &37		\ XX15+3 \ Y1 = 0
  55++C985              ;	.LL135	\ y1 hi +ve from LL134
  56++C985              ;A5 36                   LDA &36		\ XX15+2 \ Y1 lo
  57++C985              ;38                      SEC
  58++C985              ;E9 C0                   SBC #&C0		 \ #Y*2  screen y height
  59++C985              ;85 82                   STA &82		\ R	 \ Y1>191 their comment
  60++C985              ;A5 37                   LDA &37		\ XX15+3 \ Y1 hi
  61++C985              ;E9 00                   SBC #0			 \ any hi
  62++C985              ;85 83                   STA &83			 \ S
  63++C985              ;90 16                   BCC LL136		 \ failed, rts
  64++C985              ;	.LL139
  65++C985              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  66++C985              ;8A                      TXA 			 \ step X1 lo
  67++C985              ;18                      CLC
  68++C985              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  69++C985              ;85 34                   STA &34			 \ XX15+0
  70++C985              ;98                      TYA 			 \ step X1 hi
  71++C985              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  72++C985              ;85 35                   STA &35			 \ XX15+1
  73++C985              ;A9 BF                   LDA #&BF		 \ #Y*2-1 = y top max
  74++C985              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  75++C985              ;A9 00                   LDA #0			 \ Y1 hi = 0
  76++C985              ;85 37                   STA &37		\ XX15+3 \ Y1 = 191
  77++C985              ;	.LL136	\ rts
  78++C985              ;60                      RTS 		 	 \ -- trim for CLIP done
  79++C985              ;
  80++C985
# file closed: ././ModelRender/TrimToScreenGrad-LL118.asm
 800+ C985                                      include "./ModelRender/CLIP-LL145.asm"
# file opened: ././ModelRender/CLIP-LL145.asm
   1++C985              ;--------------------------------------------------------------------------------------------------------------------
   2++C985
   3++C985 00           clipDx                  DB      0           ; also XX12+2
   4++C986 00           clipDxHigh              DB      0           ; also XX12+3
   5++C987 00           clipDxHighNonABS        DB      0           ; also XX12+3
   6++C988 00           clipDy                  DB      0           ; also XX12+4
   7++C989 00           clipDyHigh              DB      0           ; also XX12+5
   8++C98A 00           clipGradient            DB      0
   9++C98B 00           clipDxySign             DB      0
  10++C98C              varX12p3                equ     clipDxySign
  11++C98C 00           clipXGTY                DB      0
  12++C98D 00           clipFlags               DB      0
  13++C98E 00           SWAP                    DB      0
  14++C98F 00 00        varYX                   DW      0
  15++C991              ;varRegX                 DB      0
  16++C991              ;varXX12p2               DB      0
  17++C991 00           clipXX13                 DB      0
  18++C992
  19++C992
  20++C992              ; bounds check and the start to avoid dxy calcs if off screen, eliminating off screens first saves a lot of uncessary mul/div
  21++C992              ;ClipXX15XX12Line:
  22++C992 ED 4B 94 C0  ClipLine:               ld      bc,(UbnkPreClipY1)          ; bc - XX15(2,3)
  23++C996 DD 2A 98 C0                          ld      ix,(UbnkPreClipY2)          ; ix - XX12(0,1)
  24++C99A 2A 92 C0                             ld      hl,(UbnkPreClipX1)          ; hl - XX15(0,1)
  25++C99D ED 5B 96 C0                          ld      de,(UbnkPreClipX2)          ; de - XX15(4,5)
  26++C9A1 AF                                   xor     a
  27++C9A2 32 8E C9                             ld      (SWAP),a                    ; SWAP = 0
  28++C9A5 7A                                   ld      a,d                         ; A = X2Hi
  29++C9A6 FD 26 BF     .LL147:                 ld      iyh,$BF                     ; we need to be 191 as its 128 + another bit set from 0 to 6, we are using iyh as regX
  30++C9A9                                      ;       push    af
  31++C9A9                                      ;       ld      a,iyh
  32++C9A9                                      ;       ld      (regX),a
  33++C9A9                                      ;       pop     af
  34++C9A9 DD B4                                or      ixh                         ; if (X2Hi L-OR Y2 Hi <> 0) goto LL107             -- X2Y2 off screen
  35++C9AB 20 0A                                jr      nz, .LL107
  36++C9AD DD 7D                                ld      a,ixl
  37++C9AF ED 27 80                             test    $80                         ; if screen hight < y2 lo, i.e y2 lo >127 goto LL107,
  38++C9B2 20 03                                jr      nz,.LL107
  39++C9B4 FD 26 00                             ld      iyh, 0                      ; else iyh = regX = 0                                                                        -- X2Y2 on screen
  40++C9B7                                      ;        push    af
  41++C9B7                                      ;        ld      a,iyh
  42++C9B7                                      ;        ld      (regX),a
  43++C9B7                                      ;        pop     af
  44++C9B7              ; XX13 = regX (i.e. iyh)      ( if XX13 = XX13 is 191 if (x2, y2) is off-screen else 0) we bin XX13 as not needed
  45++C9B7              ; so XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen,  XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lo is off the bottom of the screen
  46++C9B7 FD 7C        .LL107                  ld      a,iyh
  47++C9B9 32 91 C9                             ld      (clipXX13),a                ; debug copy iyh to xx13
  48++C9BC 7C                                   ld      a,h                         ; If (X1 hi L-OR Y1) hi  goto LL83                   -- X1Y1 off screen and maybe X2Y2
  49++C9BD B0                                   or      b                           ;
  50++C9BE 20 27                                jr      nz,.LL83                    ;
  51++C9C0 79                                   ld      a,c                         ; or (y1 lo > bottom of screen)
  52++C9C1 ED 27 80                             test    $80                         ; i.e  screen height < y1)
  53++C9C4 20 21                                jr      nz,.LL83
  54++C9C6              ; If we get here, (x1, y1) is on-screen
  55++C9C6 FD 7C                                ld      a,iyh                       ; iyh = xx13 at this point if  XX13 <> 0 goto LL108                                                        -- X1Y1 on screen, if we flagged X2Y2 off screen goto LL108
  56++C9C8 FE 00                                cp      0
  57++C9CA 20 15                                jr      nz, .LL108
  58++C9CC              ; Finished clipping exit point ----------------------------------------------------------------------------------------
  59++C9CC 79           .ClipDone:              ld      a,c                         ; LL146 (Clip Done)               Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
  60++C9CD 32 93 C0                             ld      (UBnkNewY1),a
  61++C9D0 DD 7D                                ld      a,ixl
  62++C9D2 32 95 C0                             ld      (UBnkNewY2),a
  63++C9D5 7D                                   ld      a,l
  64++C9D6 32 92 C0                             ld      (UBnkNewX1),a
  65++C9D9 7B                                   ld      a,e
  66++C9DA 32 94 C0                             ld      (UBnkNewX2),a
  67++C9DD                                      ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
  67++C9DD B7          >                        or a
  68++C9DE C9                                   ret                                 ; 2nd pro different, it swops based on swop flag around here.
  69++C9DF              ; Finished out of bounds exit point -----------------------------------------------------------------------------------
  70++C9DF 37           .PointsOutofBounds:     scf                                 ; LL109 (ClipFailed) carry flag set as not visible
  71++C9E0 C9                                   ret
  72++C9E1 FD 7C        .LL108:                 ld      a,iyh
  73++C9E3 B7                                   or      a
  74++C9E4 1F                                   rra
  75++C9E5 FD 67                                ld      iyh,a                       ; (X2Y2 Off Screen)         XX13 = 95 (i.e. divide it by 2)                                                 -- X1Y1 on screen X2Y2 off screen
  76++C9E7                                      ;        push    af                  ;OPTIMISATION 6/11/21 commented out
  77++C9E7                                      ;        ld      a,iyh               ;OPTIMISATION 6/11/21 commented out
  78++C9E7                                      ;        ld      (regX),a            ;OPTIMISATION 6/11/21 commented out
  79++C9E7                                      ;        pop     af                  ;OPTIMISATION 6/11/21 commented out
  80++C9E7 FD 7C        .LL83:                  ld      a,iyh                       ; (Line On screen Test)      if XX13 < 128 then only 1 point is on screen so goto LL115                      -- We only need to deal with X2Y2
  81++C9E9 ED 27 80                             test    $80                         ;
  82++C9EC 28 28                                jr      z, .LL115                   ;
  83++C9EE 7C                                   ld      a,h                         ; If both x1_hi and x2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  84++C9EF A2                                   and     d
  85++C9F0                                      JumpIfNegative  .PointsOutofBounds
  85++C9F0 FA DF C9    >                        jp		m, .PointsOutofBounds
  86++C9F3 78                                   ld      a,b                         ; If both y1_hi and y2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  87++C9F4 DD A4                                and     ixh
  88++C9F6                                      JumpIfNegative  .PointsOutofBounds
  88++C9F6 FA DF C9    >                        jp		m, .PointsOutofBounds
  89++C9F9 7C                                   ld      a,h                         ; If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set, jump to LL109 to return from the subroutine with the C  flag set, as the line doesn't fit on-screen
  90++C9FA 3D                                   dec     a
  91++C9FB FD 6F                                ld      iyl,a                       ; using iyl as XX12+2 var
  92++C9FD                                      ;        push    af                 ;OPTIMISATION 6/11/21 commented out
  93++C9FD                                      ;        ld      a,iyl              ;OPTIMISATION 6/11/21 commented out
  94++C9FD                                      ;        ld      (varXX12p2),a      ;OPTIMISATION 6/11/21 commented out
  95++C9FD                                      ;        pop     af                 ;OPTIMISATION 6/11/21 commented out
  96++C9FD 7A                                   ld      a,d                         ; a = x2 hi
  97++C9FE 3D                                   dec     a
  98++C9FF FD B5                                or      iyl                         ; (x2 hi -1 ) or (x1 hi -1)
  99++CA01                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  99++CA01 F2 DF C9    >                        jp		p, .PointsOutofBounds
 100++CA04              ;by here we have eliminated -ve Y1 bounds so can just test for positive high and bit 7 of lo
 101++CA04 DD 7C                                ld      a,ixh
 102++CA06 3D                                   dec     a
 103++CA07 FD 6F                                ld      iyl,a
 104++CA09 78                                   ld      a,b
 105++CA0A 3D                                   dec     a
 106++CA0B FD B5                                or      iyl
 107++CA0D                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
 107++CA0D F2 DF C9    >                        jp		p, .PointsOutofBounds
 108++CA10 79                                   ld      a,c
 109++CA11 DD A5                                and     ixl
 110++CA13                                      JumpIfNegative .PointsOutofBounds   ; really if both are > 127
 110++CA13 FA DF C9    >                        jp		m, .PointsOutofBounds
 111++CA16              ; Clip line: calulate the line's gradient
 112++CA16              ; here as an optimisation we make sure X1 is always < X2  later on
 113++CA16              .LL115:                 ClearCarryFlag
 113++CA16 B7          >                        or a
 114++CA17 E5 D5        .CalcDX:                push    hl,,de
 115++CA19 EB                                   ex      hl,de                       ; so hl is x2 and de = x1
 116++CA1A ED 52                                sbc     hl,de
 117++CA1C                                     ; pop     de                          ; we need de back
 118++CA1C 22 85 C9                             ld      (clipDx),hl
 119++CA1F 7C                                   ld      a,h
 120++CA20 32 87 C9                             ld      (clipDxHighNonABS),a
 121++CA23                                     ; ld      a,e                         ;a = x2 lo
 122++CA23                                     ; sbc     a,l                         ;a= a - x1
 123++CA23                                     ; ld      (clipDx),a
 124++CA23                                     ; ld      a,d
 125++CA23                                     ; sbc     a,h
 126++CA23                                     ; ld      (clipDxHigh),a                ; later we will just move to sub hl,de
 127++CA23                                     ; ld      (clipDxHighNonABS),a          ; it looks liek we need this later post scale loop
 128++CA23              .CalcDy:                ClearCarryFlag
 128++CA23 B7          >                        or a
 129++CA24 DD E5 E1                             ld      hl,ix
 130++CA27 ED 42                                sbc     hl,bc
 131++CA29 54 5D                                ld      de,hl           ;;OPTIMISATION 6/11/21
 132++CA2B 22 88 C9                             ld      (clipDy),hl     ;OPTIMISATION 6/11/21 commented out
 133++CA2E 7C           .CalcQuadrant:          ld      a,h
 134++CA2F                                     ; ld      a,ixl
 135++CA2F                                     ; sbc     c
 136++CA2F                                     ; ld      (clipDy),a
 137++CA2F                                     ; ld      a,ixh
 138++CA2F                                     ; sbc     a,b
 139++CA2F                                     ; ld      (clipDyHigh),a              ; so A = sign of deltay in effect
 140++CA2F                                     ; pop     hl
 141++CA2F
 142++CA2F              ;So we now have delta_x in XX12(3 2), delta_y in XX12(5 4)  where the delta is (x1, y1) - (x2, y2))
 143++CA2F                                    ;  push    hl                          ; Set S = the sign of delta_x * the sign of delta_y, so if bit 7 of S is set, the deltas have different signs
 144++CA2F 21 86 C9                             ld      hl,clipDxHigh
 145++CA32 AE                                   xor     (hl)                        ; now a = sign dx xor sign dy
 146++CA33 32 13 81                             ld      (varS),a                    ; DEBGU putting it in var S too for now
 147++CA36 32 8B C9                             ld      (clipDxySign),a
 148++CA39 3A 89 C9     .AbsDy:                 ld      a,(clipDyHigh)
 149++CA3C ED 27 80                             test    $80
 150++CA3F 28 0C                                jr      z,.LL110                    ; If delta_y_hi is positive, jump down to LL110 to skip the following
 151++CA41 2A 88 C9                             ld      hl,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 152++CA44                                      macronegate16de                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 152++CA44 AF          >					xor 	a
 152++CA45 93          >                    sub 	e
 152++CA46 5F          >                    ld 		e,a
 152++CA47 9F          >                    sbc 	a,a
 152++CA48 92          >                    sub 	d
 152++CA49 57          >                    ld 		d,a
 153++CA4A 22 88 C9                             ld      (clipDy),hl                 ;OPTIMISATION 6/11/21 commented out
 154++CA4D 2A 85 C9     .LL110:                 ld      hl,(clipDx)
 155++CA50 3A 86 C9                             ld      a,(clipDxHigh)
 156++CA53 ED 27 80                             test    $80                         ; is it a negative X
 157++CA56 28 06                                jr      z,.LL111                    ; If delta_x_hi is positive, jump down to LL110 to skip the following
 158++CA58                                      ;ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 159++CA58                                      macronegate16hl                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 159++CA58 AF          >					xor 	a
 159++CA59 95          >					sub 	l
 159++CA5A 6F          >					ld 		l,a
 159++CA5B 9F          >					sbc 	a,a
 159++CA5C 94          >					sub 	h
 159++CA5D 67          >					ld 		h,a
 160++CA5E                                     ; ld      (clipDx),hl                 ;OPTIMISATION 6/11/21 commented out; we still retain the old sign in NonABS version
 161++CA5E              .LL111:               ;  push    de
 162++CA5E                                     ; ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 163++CA5E                                     ; ld      de,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 164++CA5E 7C           .ScaleLoop:             ld      a,h                         ; At this point DX and DY are ABS values
 165++CA5F B2                                   or      d
 166++CA60 28 0A                                jr      z,.CalculateDelta
 166++CA62
 167++CA62                                      ShiftDERight1
 167++CA62 CB 3A       >			   srl d
 167++CA64 CB 1B       >			   rr  e
 168++CA66                                      ShiftHLRight1
 168++CA66 CB 3C       >			   srl h
 168++CA68 CB 1D       >			   rr  l
 169++CA6A 18 F2                                jr      .ScaleLoop                  ; scaled down Dx and Dy to 8 bit, Dy may have been negative
 170++CA6C              .CalculateDelta:        ;ld      (clipDx),hl                ;OPTIMISATION 6/11/21 commented out
 171++CA6C                                      ;ld      (clipDy),de                ;OPTIMISATION 6/11/21 commented out
 172++CA6C              ; By now, the high bytes of both |delta_x| and |delta_y| are zero We know that h and d are both = 0 as that's what we tested with a BEQ
 173++CA6C AF           .LL113:                 xor     a
 174++CA6D 32 2F 81                             ld      (varT),a                    ; t = 0
 175++CA70 7D                                   ld      a,l                         ; If delta_x_lo < delta_y_lo, so our line is more vertical than horizontal, jump to LL114
 176++CA71                                      JumpIfALTNusng  e, .LL114           ;
 176++CA71 BB          >                        cp      e
 176++CA72 DA 82 CA    >                        jp		c, .LL114
 177++CA75              ; Here Dx >= Dy sp calculate Delta Y / delta X
 178++CA75 32 11 81     .DxGTEDy:               ld      (varQ),a                    ; Set Q = delta_x_lo
 179++CA78 57                                   ld      d,a                         ; d = also Q for calc
 180++CA79 7B                                   ld      a,e                         ; Set A = delta_y_lo
 181++CA7A CD 49 94                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate:  R (actually a reg) = 256 * A / Q   = 256 * delta_y_lo / delta_x_lo
 182++CA7D 32 12 81                             ld      (varR),a                    ;
 183++CA80 18 10                                jr      .LL116                      ; Jump to LL116, as we now have the line's gradient in R
 184++CA82              ; Here Delta Y > Delta X so calulate delta X / delta Y
 185++CA82 7B           .LL114:                 ld      a,e                         ; Set Q = delta_y_lo
 186++CA83 57                                   ld      d,a
 187++CA84 32 11 81                             ld      (varQ),a
 188++CA87 7D                                   ld      a,l                         ; Set A = delta_x_lo
 189++CA88 CD 49 94                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate: R = 256 * A / Q  = 256 * delta_x_lo / delta_y_lo
 190++CA8B 32 12 81                             ld      (varR),a                    ;
 191++CA8E 21 2F 81                             ld      hl,varT                     ; T was set to 0 above, so this sets T = &FF
 192++CA91 35                                   dec     (hl)
 193++CA92 D1           .LL116:                 pop     de                          ; get back X2
 194++CA93 E1                                   pop     hl                          ; get back X1 into hl,
 195++CA94 3A 12 81                             ld      a,(varR)                    ; Store the gradient in XX12+2 this can be optimised later
 196++CA97 32 8A C9                             ld      (clipGradient),a
 197++CA9A FD 6F                                ld      iyl,a
 198++CA9C                                      ;       push    af                   ;OPTIMISATION 6/11/21 commented out
 199++CA9C                                      ;       ld      a,iyl                ;OPTIMISATION 6/11/21 commented out
 200++CA9C                                      ;       ld      (varXX12p2),a        ;OPTIMISATION 6/11/21 commented out
 201++CA9C                                      ;       pop     af                   ;OPTIMISATION 6/11/21 commented out
 202++CA9C 3A 13 81                             ld      a,(varS)
 203++CA9F 32 8B C9                             ld      (clipDxySign),a             ;  Store the type of slope in XX12+3, bit 7 clear means ?Not needed as clipDxySign is used for varS earlier?
 204++CAA2                                                                          ; top left to bottom right, bit 7 set means top right to bottom left **CODE IS WRONG HERE A TEST IS BL to TR
 205++CAA2 FD 7C                                ld      a,iyh                       ; iyh was XX13 from earlier
 206++CAA4 FE 00                                cp      0                           ; If XX13 = 0, skip the following instruction
 207++CAA6 28 05                                jr      z,.LL138                    ;
 208++CAA8 ED 27 80                             test    $80                         ; If XX13 is positive, it must be 95. This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump to LLX117 to swap the (x1, y1) and (x2, y2)
 209++CAAB 28 13                                jr      z,.LLX117                   ; coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 210++CAAD              ; If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 211++CAAD CD D4 CA     .LL138                  call    ClipPointHLBC               ; Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 212++CAB0 FD 7C                                ld      a,iyh                       ; If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to LL124 to return with a successfully clipped line
 213++CAB2 ED 27 80                             test    $80
 214++CAB5 28 1A                                jr      z,.LL124
 215++CAB7              ; If we get here, XX13 = 191 (both coordinates are off-screen)
 216++CAB7 7C           .LL117:                 ld      a,h                         ; If either of x1_hi or y1_hi are non-zero, jump to
 217++CAB8 B0                                   or      b                           ; LL137 to return from the subroutine with the C flag
 218++CAB9 C2 DF C9                             jp      nz, .PointsOutofBounds      ; set, as the line doesn't fit on-screen
 219++CABC B1                                   or      c                           ; if x1 and y1 hi are both zero test bit 8 or Y1 to see if its > 128
 220++CABD FA DF C9                             jp      m, .PointsOutofBounds       ; set, as the line doesn't fit on-screen
 221++CAC0              ; If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing
 222++CAC0              ; the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 223++CAC0 EB           .LLX117:                ex      de,hl                       ;  swap X1 and X2
 224++CAC1 DD E5                                push    ix                          ;  swap Y1 and Y2
 225++CAC3 C5                                   push    bc
 226++CAC4 DD E1                                pop     ix
 227++CAC6 C1                                   pop     bc
 228++CAC7 CD D4 CA                             call    ClipPointHLBC               ;  Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 229++CACA 3A 8E C9                             ld      a,(SWAP)
 230++CACD 3D                                   dec     a
 231++CACE 32 8E C9                             ld      (SWAP),a                    ; Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 232++CAD1 C3 CC C9     .LL124:                 jp      .ClipDone                    ; now put points in place
 233++CAD4
 234++CAD4              ; Move a point along a line until it is on-screen point is held in HL(X) BC(Y) LL118
 235++CAD4              ; iyh still holds XX13 iyl still holds gradient
 236++CAD4 7C           ClipPointHLBC:          ld      a,h                         ; If x1_hi is positive, jump down to LL119 to skip the following
 237++CAD5 ED 27 80                             test    $80
 238++CAD8 28 17                                jr      z,.LL119
 239++CADA 32 13 81     .X1isNegative:          ld      (varS),a                    ;  Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 240++CADD E5 D5 C5                             push    hl,,de,,bc
 241++CAE0 CD 56 CB                             call    LL120                       ;  Call LL120 to calculate:   (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 242++CAE3                                                                          ;                             (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 243++CAE3                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 244++CAE3 C1 D1 E1                             pop    hl,,de,,bc                   ;  get coordinates back
 245++CAE6 2A 8F C9                             ld      hl,(varYX)
 246++CAE9              ;                        ex      hl,de
 247++CAE9                                  ;    ld      hl,bc
 248++CAE9 09                                   add     hl,bc                       ; y1 = y1 + varYX
 249++CAEA 44 4D                                ld      bc,hl
 250++CAEC 21 00 00                             ld      hl,0                        ; Set x1 = 0
 251++CAEF               ;                       pop     de
 252++CAEF 18 1A                                jr      .LL134                      ; in BBC is set x to 0 to force jump, we will just jump
 253++CAF1 FE 00        .LL119:                 cp      0
 254++CAF3 28 16                                jr      z,.LL134                    ;  If x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen (as 0 <= (x_hi x_lo) <= 255)
 255++CAF5 3D                                   dec     a
 256++CAF6 32 13 81                             ld      (varS),a                    ;  Otherwise x1_hi is positive, i.e. x1 >= 256 and off the right side of the screen, so set S = x1_hi - 1
 257++CAF9 E5 D5 C5                             push    hl,,de,,bc
 258++CAFC CD 56 CB                             call    LL120                      ;  Call LL120 to calculate: (Y X) = (S x1_lo) * XX12+2      if T = 0  = (x1 - 256) * gradient
 259++CAFF                                                                          ;                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 260++CAFF                                                                          ;  with the sign of (Y X) set to the opposite of theline's direction of slope
 261++CAFF C1 D1 E1                             pop     hl,,de,,bc
 262++CB02                                    ;  push    de                          ; Set y1 = y1 + (Y X)
 263++CB02 2A 8F C9                             ld      hl,(varYX)
 264++CB05                                    ; ex      de,hl                       ;OPTIMISATION 6/11/21 commented out
 265++CB05 09                                   add     hl,bc                        ;OPTIMISATION 6/11/21 simplfied post debug
 266++CB06 44 4D                                ld      bc,hl                        ;OPTIMISATION 6/11/21 simplfied post debug
 267++CB08                                    ; ex      hl,de                       ;OPTIMISATION 6/11/21 commented out
 268++CB08                                    ; ld      hl,bc                       ;OPTIMISATION 6/11/21 commented out
 269++CB08                                    ; add     hl,de                       ; y1 = y1 + varYX
 270++CB08 21 FF 00                             ld      hl,255                      ; Set x1 = 255
 271++CB0B                                    ;  pop     de
 272++CB0B              ; We have moved the point so the x-coordinate is on screen (i.e. in the range 0-255), so now for they-coordinate
 273++CB0B 78           .LL134:                 ld      a,b                         ; If y1_hi is positive, jump down to LL135  to skip the following
 274++CB0C ED 27 80                             test    $80                         ;
 275++CB0F 28 1A                                jr      z,.LL135                    ;
 276++CB11 32 13 81                             ld      (varS),a                    ; Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 277++CB14 79                                   ld      a,c                         ; Set R = y1_lo
 278++CB15 32 12 81                             ld      (varR),a                    ;
 279++CB18 E5 D5 C5                             push    hl,,de,,bc
 280++CB1B CD 7D CB                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 281++CB1E                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 282++CB1E                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 283++CB1E C1 D1 E1                             pop     hl,,de,,bc
 284++CB21 D5                                   push    de
 285++CB22 EB                                   ex      hl,de                       ; de = x1
 286++CB23 2A 8F C9                             ld      hl,(varYX)                  ; hl = varYX
 287++CB26 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 288++CB27 D1                                   pop     de                          ; de = x2 again
 289++CB28 01 00 00                             ld      bc,0                        ; Set y1 = 0
 290++CB2B 79           .LL135:                 ld      a,c                         ; if bc < 128 then no work to do
 291++CB2C E6 80                                and     $80
 292++CB2E B0                                   or      b                           ; here we see if c bit 8 is set or anything in b as we know if its 0 this would mean there is no need to clip
 293++CB2F C8                                   ret     z
 294++CB30 E5                                   push    hl
 295++CB31 60 69                                ld      hl,bc
 296++CB33 01 80 00                             ld      bc,128
 297++CB36 B7                                   or      a
 298++CB37 ED 42                                sbc     hl,bc                       ; hl =  (S R) = (y1_hi y1_lo) - 128
 299++CB39 22 12 81                             ld      (varRS), hl                 ; and now RS (or SR)
 300++CB3C 7C                                   ld      a,h
 301++CB3D E1                                   pop     hl
 302++CB3E ED 27 80                             test    $80                         ; If the subtraction underflowed, i.e. if y1 < 192, then y1 is already on-screen, so jump to LL136 to return from the subroutine, as we are done
 303++CB41 C0                                   ret     nz
 304++CB42              ; If we get here then y1 >= 192, i.e. off the bottom of the screen
 305++CB42 E5 D5 C5     .LL139:                 push    hl,,de,,bc
 306++CB45 CD 7D CB                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 307++CB48                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 308++CB48                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 309++CB48 C1 D1 E1                             pop     hl,,de,,bc
 310++CB4B D5                                   push    de
 311++CB4C EB                                   ex      hl,de
 312++CB4D 2A 8F C9                             ld      hl,(varYX)
 313++CB50 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 314++CB51 01 7F 00                             ld      bc,127                      ; set bc to 127 bottom of screen
 315++CB54 D1                                   pop     de
 316++CB55 C9           .LL136:                 ret                                 ;  Return from the subroutine
 317++CB56
 318++CB56
 319++CB56              ; Calculate the following:   * If T = 0  (more vertical than horizontal), (Y X) = (S x1_lo) * XX12+2
 320++CB56              ;                            * If T <> 0 (more horizontal than vertical), (Y X) = (S x1_lo) / XX12+2
 321++CB56              ;                              giving (Y X) the opposite sign to the slope direction in XX12+3.
 322++CB56              ; Other entry points        LL122                Calculate (Y X) = (S R) * Q and set the sign to the opposite of the top byte on the stack
 323++CB56 7D           LL120:                  ld      a,l                          ; Set R = x1_lo
 324++CB57 32 12 81                             ld      (varR),a
 325++CB5A CD C5 CB                             call    LL129                        ;  Call LL129 to do the following:  Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 326++CB5D F5                                   push    af                           ;  Store A on the stack so we can use it later
 327++CB5E C5                                   push    bc
 328++CB5F 47                                   ld      b,a
 329++CB60 3A 2F 81                             ld      a,(varT)                     ; instead : (Y X) = (S R ) / Q
 330++CB63 FE 00                                cp      0
 331++CB65 78                                   ld      a,b
 332++CB66 C1                                   pop     bc                           ; we can't use af as that would disrupt the flags
 333++CB67 20 23                                jr      nz, LL121
 334++CB69              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 335++CB69 3A 8A C9     LL122:                  ld      a,(clipGradient)
 336++CB6C 32 11 81                             ld      (varQ),a; optimise
 337++CB6F CD 2C 92                             call    HLequSRmulQdiv256
 338++CB72 22 8F C9                             ld      (varYX),hl
 339++CB75 F1                                   pop     af
 340++CB76 ED 27 80                             test    $80
 341++CB79 CA B8 CB                             jp      z,LL133
 342++CB7C C9                                   ret
 343++CB7D              ; Calculate the following: * If T = 0,  calculate (Y X) = (S R) / XX12+2 (actually SR & XX12+2 /256)
 344++CB7D              ;                          * If T <> 0, calculate (Y X) = (S R) * XX12+2
 345++CB7D              ;                          giving (Y X) the opposite sign to the slope direction in XX12+3.
 346++CB7D              ;
 347++CB7D              ; Other entry points:      LL121                Calculate (Y X) = (S R) / Q and set the sign to the opposite of the top byte on the stack
 348++CB7D              ;                          LL133                Negate (Y X) and return from the subroutine
 349++CB7D              ;                          LL128                Contains an RTS
 350++CB7D CD C5 CB     LL123:                  call    LL129                       ; Call LL129 to do the following: Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 351++CB80 F5                                   push    af                          ; Store A on the stack so we can use it later
 352++CB81 C5                                   push    bc                          ; If T is non-zero, so it's more horizontal than vertical, jump down to LL121 to calculate this
 353++CB82 47                                   ld      b,a
 354++CB83 3A 2F 81                             ld      a,(varT)                    ; instead : (Y X) = (S R) * Q *** this looks to be the wrong way roudn for Y!!!!
 355++CB86 FE 00                                cp      0
 356++CB88 78                                   ld      a,b
 357++CB89 C1                                   pop     bc
 358++CB8A 20 DD                                jr      nz, LL122
 359++CB8C              ; The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2, its actually X.Y=R.S*256/Q
 360++CB8C 11 FE FF     LL121:                  ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 361++CB8F 2A 12 81                             ld      hl,(varRS)                  ; hl = RS
 362++CB92 3A 11 81                             ld      a,(varQ)
 363++CB95 47                                   ld      b,a                         ; b = q
 364++CB96              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 364++CB96 CB 25       >			   sla l
 364++CB98 CB 14       >			   rl  h
 365++CB9A 7C                                   ld      a,h
 366++CB9B 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 367++CB9D                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 367++CB9D B8          >                        cp      b
 367++CB9E DA A9 CB    >                        jp		c, .LL132
 368++CBA1 3F           .LL131:                 ccf                                 ; compliment carry
 369++CBA2 98                                   sbc     a,b                         ; q
 370++CBA3 67                                   ld      h,a                         ; h (s)
 371++CBA4 7D                                   ld      a,l                         ; r
 372++CBA5 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 373++CBA7 37                                   scf                                 ; set carry for next rolls
 374++CBA8 3F                                   ccf
 375++CBA9              .LL132:                 RollDELeft1                         ; Rotate de bits left
 375++CBA9 CB 13       >               rl  e
 375++CBAB CB 12       >               rl  d
 376++CBAD 38 E7                                jr      c,.LL130                    ;
 377++CBAF ED 53 8F C9                          ld      (varYX),de
 378++CBB3 F1                                   pop     af              ; get back sign
 379++CBB4 ED 27 80                             test    $80
 380++CBB7 C8                                   ret     z               ; if negative then return with value as is reversed sign
 381++CBB8 2A 8F C9     LL133:                  ld      hl,(varYX)      ; may not actually need this?
 382++CBBB                                      NegHL
 382++CBBB AF          >                    xor a
 382++CBBC 95          >                    sub l
 382++CBBD 6F          >                    ld l,a
 382++CBBE 9F          >                    sbc a,a
 382++CBBF 94          >                    sub h
 382++CBC0 67          >                    ld h,a
 383++CBC1 22 8F C9                             ld      (varYX),hl
 384++CBC4 C9           LL128:                  ret
 385++CBC5              ; Do the following, in this order:  Q = XX12+2
 386++CBC5              ;                                   A = S EOR XX12+3
 387++CBC5              ;                                   (S R) = |S R|
 388++CBC5              ; This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 389++CBC5 3A 8A C9     LL129:                  ld      a,(clipGradient)
 390++CBC8 32 11 81                             ld      (varQ),a                    ;Set Q = XX12+2
 391++CBCB 3A 13 81                             ld      a,(varS)                    ; If S is positive, jump to LL127
 392++CBCE E5 F5                                push    hl,,af
 393++CBD0 ED 27 80                             test    $80
 394++CBD3 28 0C                                jr      z,.LL127
 395++CBD5 2A 12 81                             ld      hl,(varRS)                  ; else SR = | SR|
 396++CBD8                                      NegHL
 396++CBD8 AF          >                    xor a
 396++CBD9 95          >                    sub l
 396++CBDA 6F          >                    ld l,a
 396++CBDB 9F          >                    sbc a,a
 396++CBDC 94          >                    sub h
 396++CBDD 67          >                    ld h,a
 397++CBDE 22 12 81                             ld      (varRS),hl
 398++CBE1 21 8B C9     .LL127:                 ld      hl,clipDxySign
 399++CBE4 F1                                   pop     af
 400++CBE5 AE                                   xor     (hl)                        ; a = S XOR clipDxySign
 401++CBE6 E1                                   pop     hl
 402++CBE7 C9                                   ret
 403++CBE8
# file closed: ././ModelRender/CLIP-LL145.asm
 801+ CBE8              ;--------------------------------------------------------------------------------------------------------
 802+ CBE8                                      include "./Universe/Ships/CopyRotmatToTransMat.asm"
# file opened: ././Universe/Ships/CopyRotmatToTransMat.asm
   1++CBE8              ; Set TransMatTo
   2++CBE8              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3++CBE8              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4++CBE8              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5++CBE8              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6++CBE8              CopyRotmatToTransMat:                       ; Tested
   7++CBE8 21 19 C0     LL15_CopyRotMat:        ld      hl,UBnkrotmatSidevX
   8++CBEB
   9++CBEB 11 4D C0                             ld      de,UBnkTransmatSidevX
  10++CBEE                                      SixLDIInstrunctions
  10++CBEE ED A0       >                        ldi
  10++CBF0 ED A0       >                        ldi
  10++CBF2 ED A0       >                        ldi
  10++CBF4 ED A0       >                        ldi
  10++CBF6 ED A0       >                        ldi
  10++CBF8 ED A0       >                        ldi
  11++CBFA 21 1F C0                             ld      hl,UBnkrotmatRoofvX
  12++CBFD 11 53 C0                             ld      de, UBnkTransmatRoofvX
  13++CC00                                      SixLDIInstrunctions
  13++CC00 ED A0       >                        ldi
  13++CC02 ED A0       >                        ldi
  13++CC04 ED A0       >                        ldi
  13++CC06 ED A0       >                        ldi
  13++CC08 ED A0       >                        ldi
  13++CC0A ED A0       >                        ldi
  14++CC0C 21 25 C0                             ld      hl,UBnkrotmatNosevX
  15++CC0F 11 59 C0                             ld      de, UBnkTransmatNosevX
  16++CC12                                      SixLDIInstrunctions
  16++CC12 ED A0       >                        ldi
  16++CC14 ED A0       >                        ldi
  16++CC16 ED A0       >                        ldi
  16++CC18 ED A0       >                        ldi
  16++CC1A ED A0       >                        ldi
  16++CC1C ED A0       >                        ldi
  17++CC1E C9                                   ret
  18++CC1F
  19++CC1F              CopyRotToTransMacro:    MACRO
  20++CC1F ~                                    ld      hl,UBnkrotmatSidevX
  21++CC1F ~                                    ld      de,UBnkTransmatSidevX
  22++CC1F ~                                    SixLDIInstrunctions
  23++CC1F ~                                    SixLDIInstrunctions
  24++CC1F ~                                    SixLDIInstrunctions
  25++CC1F                                      ENDM
  26++CC1F
# file closed: ././Universe/Ships/CopyRotmatToTransMat.asm
 803+ CC1F                                      include "./Universe/Ships/TransposeXX12ByShipToXX15.asm"
# file opened: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
   1++CC1F              TransposeXX12ByShipToXX15:
   2++CC1F 2A 98 C0             ld		hl,(UBnkXX12xLo)					; get X into HL
   3++CC22 7C           		ld		a,h			                        ; get XX12 Sign
   4++CC23 E6 80        		and		$80									; check sign bit on high byte
   5++CC25 47           		ld		b,a									; and put it in of 12xlo in b
   6++CC26                      ;110921 debugld      h,0
   7++CC26 7C                   ld      a,h
   8++CC27 E6 7F                and     $7F
   9++CC29 67                   ld      h,a
  10++CC2A                      ;110921 debugld      h,0
  11++CC2A ED 5B 10 C0  		ld		de,(UBnKxlo)						;
  12++CC2E 3A 12 C0     		ld		a,(UBnKxsgn)						; get Ship Pos (low,high,sign)
  13++CC31 E6 80        		and		$80									; make sure we only have bit 7
  14++CC33 4F           		ld		c,a									; and put sign of unkxsgn c
  15++CC34 CD B1 8F     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++CC37 B4           		or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++CC38 67           		ld		h,a
  18++CC39 22 92 C0     		ld		(UBnkXScaled),hl					; now write it out to XX15 X pos
  19++CC3C              ; ..................................
  20++CC3C 2A 9A C0     		ld		hl,(UBnkXX12yLo)					; Repeat above for Y coordinate
  21++CC3F 7C           		ld		a,h
  22++CC40 E6 80        		and		$80
  23++CC42 47           		ld		b,a
  24++CC43                      ;110921 debugld      h,0
  25++CC43 7C                   ld      a,h
  26++CC44 E6 7F                and     $7F
  27++CC46 67                   ld      h,a
  28++CC47                      ;110921 debugld      h,0
  29++CC47 ED 5B 13 C0  		ld		de,(UBnKylo)
  30++CC4B 3A 15 C0     		ld		a,(UBnKysgn)
  31++CC4E E6 80        		and		$80									; make sure we only have bit 7
  32++CC50 4F           		ld		c,a
  33++CC51 CD B1 8F     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++CC54 B4           		or		h									; combine sign in A with H
  35++CC55 67           		ld		h,a
  36++CC56 22 94 C0     		ld		(UBnkYScaled),hl
  37++CC59              ; ..................................
  38++CC59 2A 9C C0     		ld		hl,(UBnkXX12zLo)					; and now repeat for Z cooord
  39++CC5C 7C           		ld		a,h
  40++CC5D E6 80        		and		$80
  41++CC5F 47           		ld		b,a
  42++CC60                      ;110921 debugld      h,0
  43++CC60 7C                   ld      a,h
  44++CC61 E6 7F                and     $7F
  45++CC63 67                   ld      h,a
  46++CC64                      ;110921 debugld      h,0
  47++CC64 ED 5B 16 C0  		ld		de,(UBnKzlo)
  48++CC68 3A 18 C0     		ld		a,(UBnKzsgn)
  49++CC6B E6 80        		and		$80									; make sure we only have bit 7
  50++CC6D 4F           		ld		c,a
  51++CC6E CD B1 8F     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++CC71 B4           		or		h									; combine sign in A with H
  53++CC72 67           		ld		h,a
  54++CC73 CB 7C        		bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++CC75 20 16        		jr		nz,ClampZto4                        ; result was negative so we need to clamp to 4
  56++CC77 E6 7F                and     $7F                                 ; a = value unsigned
  57++CC79 20 06                jr      nz,NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++CC7B 7D                   ld      a,l                                 ; get low byte now
  59++CC7C              		JumpIfALTNusng 4,ClampZto4					; if its < 4 then fix at 4
  59++CC7C FE 04       >                        cp      4
  59++CC7E DA 8D CC    >                        jp		c, ClampZto4
  60++CC81              NoClampZto4:
  61++CC81 22 96 C0     		ld		(UBnkZScaled),hl					; hl = signed calculation and > 4
  62++CC84 7D           		ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  63++CC85 32 2F 81             ld      (varT),a
  64++CC88 7C           		ld		a,h
  65++CC89 32 10 81             ld      (varU),a
  66++CC8C C9           		ret
  67++CC8D              ClampZto4:											; This is where we limit 4 to a minimum of 4
  68++CC8D 21 04 00     		ld		hl,4
  69++CC90 22 96 C0     		ld		(UBnkZScaled),hl; BODGE FOR NOW
  70++CC93 7D           		ld		a,l
  71++CC94 32 2F 81             ld      (varT),a                            ;                                                                           ;;;
  72++CC97 7C           		ld		a,h
  73++CC98 32 10 81             ld      (varU),a 						; compatibility for now
  74++CC9B C9           		ret
  75++CC9C
# file closed: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
 804+ CC9C                                      include "./Maths/Utilities/ScaleNodeTo8Bit.asm"
# file opened: ././Maths/Utilities/ScaleNodeTo8Bit.asm
   1++CC9C              ScaleNodeTo8Bit:								; TODO make signed
   2++CC9C ED 4B 96 C0  	ld			bc,(UBnkZScaled)
   3++CCA0 2A 92 C0     	ld			hl,(UBnkXScaled)
   4++CCA3 ED 5B 94 C0  	ld			de,(UBnkYScaled)
   5++CCA7              SetABSbc:
   6++CCA7 78           	ld			a,b
   7++CCA8 DD 67        	ld			ixh,a
   8++CCAA E6 7F        	and			SignMask8Bit
   9++CCAC 47           	ld			b,a									; bc = ABS bc
  10++CCAD              SetABShl:
  11++CCAD 7C           	ld			a,h
  12++CCAE DD 6F        	ld			ixl,a
  13++CCB0 E6 7F        	and			SignMask8Bit
  14++CCB2 67           	ld			h,a									; hl = ABS hl
  15++CCB3              SetABSde:
  16++CCB3 7A           	ld			a,d
  17++CCB4 FD 67        	ld			iyh,a
  18++CCB6 E6 7F        	and			SignMask8Bit
  19++CCB8 57           	ld			d,a									; de = ABS de
  20++CCB9              ScaleNodeTo8BitLoop:
  21++CCB9 78               ld          a,b		                            ; U	\ z hi
  22++CCBA B4           	or			h                                   ; XX15+1	\ x hi
  23++CCBB B2           	or			d                                   ; XX15+4	\ y hi
  24++CCBC 28 0F            jr          z,ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
  25++CCBE                  ShiftHLRight1
  25++CCBE CB 3C       >			   srl h
  25++CCC0 CB 1D       >			   rr  l
  26++CCC2                  ShiftDERight1
  26++CCC2 CB 3A       >			   srl d
  26++CCC4 CB 1B       >			   rr  e
  27++CCC6              	ShiftBCRight1
  27++CCC6 CB 38       >			   srl b
  27++CCC8 CB 19       >			   rr  c
  28++CCCA C3 B9 CC         jp          ScaleNodeTo8BitLoop
  29++CCCD              ScaleNodeDone:										; now we have scaled values we have to deal with sign
  30++CCCD DD 7C        	ld			a,ixh								; get sign bit and or with b
  31++CCCF E6 80        	and			SignOnly8Bit
  32++CCD1 B0           	or			b
  33++CCD2 47           	ld			b,a
  34++CCD3              SignforHL:
  35++CCD3 DD 7D        	ld			a,ixl								; get sign bit and or with b
  36++CCD5 E6 80        	and			SignOnly8Bit
  37++CCD7 B4           	or			h
  38++CCD8 67           	ld			h,a
  39++CCD9              SignforDE:
  40++CCD9 FD 7C        	ld			a,iyh								; get sign bit and or with b
  41++CCDB E6 80        	and			SignOnly8Bit
  42++CCDD B2           	or			d
  43++CCDE 57           	ld			d,a
  44++CCDF              SignsDoneSaveResult:
  45++CCDF ED 43 96 C0  	ld			(UBnkZScaled),bc
  46++CCE3 22 92 C0     	ld			(UBnkXScaled),hl
  47++CCE6 ED 53 94 C0  	ld			(UBnkYScaled),de
  48++CCEA 78           	ld			a,b
  49++CCEB 32 10 81     	ld			(varU),a
  50++CCEE 79           	ld			a,c
  51++CCEF 32 2F 81     	ld			(varT),a
  52++CCF2 C9           	ret
  53++CCF3
# file closed: ././Maths/Utilities/ScaleNodeTo8Bit.asm
 805+ CCF3
 806+ CCF3              ;--------------------------------------------------------------------------------------------------------
 807+ CCF3 21 BE C0     SetFaceAVisible:        ld      hl,UbnkFaceVisArray
 808+ CCF6 ED 31                                add     hl,a
 809+ CCF8 3E FF                                ld      a,$FF
 810+ CCFA 77                                   ld      (hl),a
 811+ CCFB C9                                   ret
 812+ CCFC              ;--------------------------------------------------------------------------------------------------------
 813+ CCFC 21 BE C0     SetFaceAHidden:         ld      hl,UbnkFaceVisArray
 814+ CCFF ED 31                                add     hl,a
 815+ CD01 AF                                   xor     a
 816+ CD02 77                                   ld      (hl),a
 817+ CD03 C9                                   ret
 818+ CD04              ;--------------------------------------------------------------------------------------------------------
 819+ CD04 3A 27 C3     SetAllFacesVisible:     ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 820+ CD07 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 821+ CD09 CB 3F                                srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
 822+ CD0B 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 823+ CD0C 21 BE C0                             ld      hl,UbnkFaceVisArray
 824+ CD0F 3E FF                                ld      a,$FF
 825+ CD11              SetAllFacesVisibleLoop:
 826+ CD11 77           EE30:                   ld      (hl),a
 827+ CD12 23                                   inc     hl
 828+ CD13 10 FC                                djnz    SetAllFacesVisibleLoop
 829+ CD15 C9                                   ret
 830+ CD16              ;--------------------------------------------------------------------------------------------------------
 831+ CD16 3A 27 C3     SetAllFacesHidden:      ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 832+ CD19 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 833+ CD1B CB 3F                                srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
 834+ CD1D 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 835+ CD1E 06 10                                ld      b,16
 836+ CD20 21 BE C0                             ld      hl,UbnkFaceVisArray
 837+ CD23 3E 00                                ld      a,$00
 838+ CD25 77           SetAllFacesHiddenLoop:  ld      (hl),a
 839+ CD26 23                                   inc     hl
 840+ CD27 10 FC                                djnz    SetAllFacesHiddenLoop
 841+ CD29 C9                                   ret
 842+ CD2A
 843+ CD2A              ;;;;X = normal scale
 844+ CD2A              ;;;;ZtempHi = zhi
 845+ CD2A              ;;;;......................................................
 846+ CD2A              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 847+ CD2A              ;;;;  Loop                                              ::LL90
 848+ CD2A              ;;;;     inc X
 849+ CD2A              ;;;;     divide X, Y & ZtempHiLo by 2
 850+ CD2A              ;;;;  Until ZtempHi = 0
 851+ CD2A              ;;;;......................................................
 852+ CD2A              ;-LL21---------------------------------------------------------------------------------------------------
 853+ CD2A                                      include "Universe/Ships/NormaliseTransMat.asm"
# file opened: ./Universe/Ships/NormaliseTransMat.asm
   1++CD2A              ;divdide by 16 using undocumented instrunctions
   2++CD2A              Norm256mulAdivQ:
   3++CD2A 47               ld      b,a
   4++CD2B 0E 00            ld      c,0
   5++CD2D 16 00            ld      d,0
   6++CD2F 3A 11 81         ld      a,(varQ)
   7++CD32 5F               ld      e,a
   8++CD33              ;Input: BC = Dividend, DE = Divisor, HL = 0
   9++CD33              ;Output: BC = Quotient, HL = Remainder
  10++CD33              NormDIV16UNDOC:
  11++CD33 21 00 00         ld      hl,0
  12++CD36 78               ld      a,b
  13++CD37 06 10            ld      b,16
  14++CD39              NormDIV16UNDOCLOOP:
  15++CD39 CB 31        	sll	    c		; unroll 16 times
  16++CD3B 17           	rla	    		; ...
  17++CD3C ED 6A        	adc	    hl,hl		; ...
  18++CD3E ED 52        	sbc	    hl,de		; ...
  19++CD40 30 02        	jr	    nc,NormDIV16UNDOCSKIP		; ...
  20++CD42 19           	add	    hl,de		; ...
  21++CD43 0D           	dec	    c		; ...
  22++CD44              NormDIV16UNDOCSKIP:
  23++CD44 10 F3            djnz    NormDIV16UNDOCLOOP
  24++CD46 79               ld      a,c
  25++CD47 32 12 81         ld      (varR),a
  26++CD4A C9               ret
  27++CD4B
  28++CD4B FD 67        Norm256mulAdivQSignA:   ld      iyh,a
  29++CD4D                                      ClearSignBitA
  29++CD4D E6 7F       >                        and     SignMask8Bit
  30++CD4F CD 2A CD                             call    Norm256mulAdivQ              ; do 15 bit unsigned
  31++CD52 FD 7C                                ld      a,iyh                       ; now correct R reg
  32++CD54                                      SignBitOnlyA
  32++CD54 E6 80       >                        and     SignOnly8Bit
  33++CD56 B1                                   or      c
  34++CD57 32 12 81                             ld      (varR),a
  35++CD5A C9                                   ret
  36++CD5B
  37++CD5B              ; Tested OK
  38++CD5B              ;LL21
  39++CD5B              NormaliseTransMat:
  40++CD5B                      IFDEF LOGMATHS
  41++CD5B ~                            ld      hl,UBnkTransmatNosevZ+1     ; initialise loop
  42++CD5B ~                            ld      b,9                         ; total of 9 elements to transform
  43++CD5B ~                            MMUSelectMathsTables
  44++CD5B ~            .LL21Loop:      ld      d,(hl)
  45++CD5B ~                            dec     hl
  46++CD5B ~                            ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  47++CD5B ~                            ShiftDELeft1                        ; De = DE * 2
  48++CD5B ~                            ld      a,d                         ; a = hi byte after shifting
  49++CD5B ~                            push	hl
  50++CD5B ~                            push	bc
  51++CD5B ~                            call    AEquAmul256Div197Log        ; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  52++CD5B ~                            ;ld      a,c                         ; BFRDIV returns R also in l reg
  53++CD5B ~                            pop		bc
  54++CD5B ~                            pop		hl							; bc gets wrecked by BFRDIV
  55++CD5B ~                            ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  56++CD5B ~                            dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  57++CD5B ~                            djnz    .LL21Loop                   ; loop from 2zLo through to 0xLo
  58++CD5B ~                            MMUSelectROM0
  59++CD5B ~                            ret
  60++CD5B                      ELSE
  61++CD5B 21 5E C0                     ld      hl,UBnkTransmatNosevZ+1         ; initialise loop
  62++CD5E 0E C5                        ld      c,ConstNorm                 ; c = Q = norm = 197
  63++CD60 79                           ld      a,c
  64++CD61 32 11 81                     ld      (varQ),a                    ; set up varQ
  65++CD64 06 09                        ld      b,9                         ; total of 9 elements to transform
  66++CD66 56           LL21Loop:       ld      d,(hl)
  67++CD67 2B                           dec     hl
  68++CD68 5E                           ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  69++CD69                              ShiftDELeft1                        ; De = DE * 2
  69++CD69 CB 23       >			   sla e
  69++CD6B CB 12       >			   rl  d
  70++CD6D 7A                           ld      a,d                         ; a = hi byte after shifting
  71++CD6E E5                           push	hl
  72++CD6F C5                           push	bc
  73++CD70 CD 2A CD                     call    Norm256mulAdivQ
  74++CD73                              ;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  75++CD73 79                           ld      a,c                         ; BFRDIV returns R also in l reg
  76++CD74 C1                           pop		bc
  77++CD75 E1                           pop		hl							; bc gets wrecked by BFRDIV
  78++CD76 77                           ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  79++CD77 2B                           dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  80++CD78 10 EC                        djnz    LL21Loop                    ; loop from 2zLo through to 0xLo
  81++CD7A C9                           ret
  82++CD7B                      ENDIF
# file closed: ./Universe/Ships/NormaliseTransMat.asm
 854+ CD7B              ;;;                        include "Universe/Ships/NormaliseXX15.asm"
 855+ CD7B              ;-LL91---------------------------------------------------------------------------------------------------
 856+ CD7B
 857+ CD7B              ; Now we have
 858+ CD7B              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 859+ CD7B              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 860+ CD7B              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 861+ CD7B              ;
 862+ CD7B              ;--------------------------------------------------------------------------------------------------------
 863+ CD7B                                      include "Universe/Ships/InverseXX16.asm"
# file opened: ./Universe/Ships/InverseXX16.asm
   1++CD7B              ; TESTEDOK
   2++CD7B
   3++CD7B              ;ScaleOrientationXX16:                       ; DEBUG TODO will combine with inverse later
   4++CD7B              ;        ld      a,(XX17)
   5++CD7B              ;        ld      ixl,a
   6++CD7B              ;        ld      ixh,9
   7++CD7B              ;        ld      hl,UBnkTransInv0x
   8++CD7B              ;        ld      a,(hl)
   9++CD7B              ;ScaleNode:
  10++CD7B              ;        ld      b,ixl
  11++CD7B              ;ScaleNodeLoop:
  12++CD7B              ;        sla      a
  13++CD7B              ;        djnz    ScaleNodeLoop
  14++CD7B              ;        ld      (hl),a
  15++CD7B              ;        inc     hl
  16++CD7B              ;        inc     hl
  17++CD7B              ;        dec     ixh
  18++CD7B              ;        jr      nz,ScaleNode
  19++CD7B              ;        ret
  20++CD7B
  21++CD7B
  22++CD7B              InverseXX16:								; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  23++CD7B              ; we coudl combine this with move to transmat later as an optimisation
  24++CD7B              ; INPUT - All Scaled
  25++CD7B              ;  They transmat has already been put into side, roof nose order
  26++CD7B              ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  27++CD7B              ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  28++CD7B              ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  29++CD7B              ; OUTPUT
  30++CD7B              ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  31++CD7B              ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  32++CD7B              ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  33++CD7B              ; First all side values become compoment 0 of each vector
  34++CD7B 2A 4D C0             ld      hl,(UBnkTransmatSidevX)     ;
  35++CD7E ED 5B 53 C0          ld      de,(UBnkTransmatRoofvX)     ;
  36++CD82 ED 4B 59 C0          ld      bc,(UBnkTransmatNosevX)     ;
  37++CD86 22 65 C0             ld      (UbnkTransInvRow0x0),hl     ;
  38++CD89 ED 53 67 C0          ld      (UbnkTransInvRow0x1),de     ;
  39++CD8D ED 43 69 C0          ld      (UbnkTransInvRow0x2),bc     ;
  40++CD91 2A 4F C0             ld      hl,(UBnkTransmatSidevY)     ;
  41++CD94 ED 5B 55 C0          ld      de,(UBnkTransmatRoofvY)     ;
  42++CD98 ED 4B 5B C0          ld      bc,(UBnkTransmatNosevY)     ;
  43++CD9C 22 6D C0             ld      (UbnkTransInvRow1y0),hl     ;
  44++CD9F ED 53 6F C0          ld      (UbnkTransInvRow1y1),de     ;
  45++CDA3 ED 43 71 C0          ld      (UbnkTransInvRow1y2),bc     ;
  46++CDA7 2A 51 C0             ld      hl,(UBnkTransmatSidevZ)     ;
  47++CDAA ED 5B 57 C0          ld      de,(UBnkTransmatRoofvZ)     ;
  48++CDAE ED 4B 5D C0          ld      bc,(UBnkTransmatNosevZ)     ;
  49++CDB2 22 75 C0             ld      (UbnkTransInvRow2z0),hl     ;
  50++CDB5 ED 53 77 C0          ld      (UbnkTransInvRow2z1),de     ;
  51++CDB9 ED 43 79 C0          ld      (UbnkTransInvRow2z2),bc     ;
  52++CDBD C9                   ret
  53++CDBE
  54++CDBE
# file closed: ./Universe/Ships/InverseXX16.asm
 864+ CDBE              ;--------------------------------------------------------------------------------------------------------
 865+ CDBE              ;--------------------------------------------------------------------------------------------------------
 866+ CDBE              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 867+ CDBE              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 868+ CDBE              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 869+ CDBE              ; Returns
 870+ CDBE              ;
 871+ CDBE              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 872+ CDBE              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 873+ CDBE              ;
 874+ CDBE              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 875+ CDBE              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 876+ CDBE              ;
 877+ CDBE              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 878+ CDBE              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 879+ CDBE              XXCURRENTN0equN1byN2div256: MACRO param1, param2, param3
 880+ CDBE ~                                    ld      c,0
 881+ CDBE ~                                    ld      a,param3                      ;
 882+ CDBE ~                                    bit     7,a
 883+ CDBE ~                                    jr      z,.val2Pos
 884+ CDBE ~            ;HandleSignebits
 885+ CDBE ~                                    neg
 886+ CDBE ~                                    ld      c,$80
 887+ CDBE ~            .val2Pos:               ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 888+ CDBE ~                                    ld      a,param2                        ; A = XX16 element
 889+ CDBE ~                                    bit     7,a
 890+ CDBE ~                                    jr      z,.val1Pos
 891+ CDBE ~            ;HandleSignebits
 892+ CDBE ~                                    neg
 893+ CDBE ~                                    ld      b,a
 894+ CDBE ~                                    ld      a,c
 895+ CDBE ~                                    xor     $80
 896+ CDBE ~                                    ld      c,a
 897+ CDBE ~                                    ld      a,b
 898+ CDBE ~            .val1Pos:               ld      d,a
 899+ CDBE ~            ;AequAmulQdiv256:
 900+ CDBE ~                                    mul
 901+ CDBE ~                                    ld      a,c
 902+ CDBE ~                                    bit     7,a
 903+ CDBE ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 904+ CDBE ~                                    jr      z,.resultPos
 905+ CDBE ~                                    neg
 906+ CDBE ~            .resultPos:             ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 907+ CDBE                                      ENDM
 908+ CDBE
 909+ CDBE
 910+ CDBE               ; TESTEDOK
 911+ CDBE              XX12DotOneRow:
 912+ CDBE              XX12CalcX:              N0equN1byN2div256 varT, (hl), (UBnkXScaled)       ; T = (hl) * regXX15fx /256
 912+ CDBE 3A 92 C0    >                        ld      a,(UBnkXScaled)                        ;
 912+ CDC1 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 912+ CDC2 7E          >                        ld      a,(hl)                        ; A = XX16 element
 912+ CDC3 57          >                        ld      d,a
 912+ CDC4 ED 30       >                        mul
 912+ CDC6 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 912+ CDC7 32 2F 81    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 913+ CDCA 23                                   inc     hl                                  ; move to sign byte
 914+ CDCB              XX12CalcXSign:          AequN1xorN2 UBnkXScaledSign,(hl)             ;
 914+ CDCB 3A 93 C0    >                        ld      a,(UBnkXScaledSign)
 914+ CDCE AE          >                        xor     (hl)
 915+ CDCF 32 13 81                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 916+ CDD2 23                                   inc     hl
 917+ CDD3              XX12CalcY:              N0equN1byN2div256 varQ, (hl),(UBnkYScaled)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 917+ CDD3 3A 94 C0    >                        ld      a,(UBnkYScaled)                        ;
 917+ CDD6 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 917+ CDD7 7E          >                        ld      a,(hl)                        ; A = XX16 element
 917+ CDD8 57          >                        ld      d,a
 917+ CDD9 ED 30       >                        mul
 917+ CDDB 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 917+ CDDC 32 11 81    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 918+ CDDF                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 918+ CDDF 3A 2F 81    >                        ld       a,(varT)
 918+ CDE2 32 12 81    >                        ld       (varR),a
 919+ CDE5 23                                   inc     hl
 920+ CDE6                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 920+ CDE6 3A 95 C0    >                        ld      a,(UBnkYScaledSign)
 920+ CDE9 AE          >                        xor     (hl)
 921+ CDEA              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 922+ CDEA E5           STequSRplusAQ           push    hl
 923+ CDEB CD 3A 9A                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 924+ CDEE E1                                   pop     hl
 925+ CDEF 32 2F 81                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 926+ CDF2 23                                   inc     hl
 927+ CDF3              XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(UBnkZScaled)       ; Q = |sidev_z| * z_lo / 256
 927+ CDF3 3A 96 C0    >                        ld      a,(UBnkZScaled)                        ;
 927+ CDF6 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 927+ CDF7 7E          >                        ld      a,(hl)                        ; A = XX16 element
 927+ CDF8 57          >                        ld      d,a
 927+ CDF9 ED 30       >                        mul
 927+ CDFB 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 927+ CDFC 32 11 81    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 928+ CDFF                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 928+ CDFF 3A 2F 81    >                        ld       a,(varT)
 928+ CE02 32 12 81    >                        ld       (varR),a
 929+ CE05 23                                   inc     hl
 930+ CE06                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 930+ CE06 3A 97 C0    >                        ld      a,(UBnkZScaledSign)
 930+ CE09 AE          >                        xor     (hl)
 931+ CE0A              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 932+ CE0A CD 3A 9A                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 933+ CE0D              ; Now we exit with A = result S = Sign
 934+ CE0D C9                                   ret
 935+ CE0E
 936+ CE0E
 937+ CE0E
 938+ CE0E              ;-- LL51---------------------------------------------------------------------------------------------------------------------------
 939+ CE0E              ;TESTED OK
 940+ CE0E              XX12EquXX15DotProductXX16:
 941+ CE0E              XX12EquScaleDotOrientation:                         ; .LL51 \ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z
 942+ CE0E 01 00 00                             ld      bc,0                                ; LDX, LDY 0
 943+ CE11 21 4D C0                             ld      hl,UBnkTransmatSidevX
 944+ CE14 CD BE CD                             call    XX12DotOneRow
 945+ CE17 32 98 C0                             ld      (UBnkXX12xLo),a
 946+ CE1A 3A 13 81                             ld      a,(varS)
 947+ CE1D 32 99 C0                             ld      (UBnkXX12xSign),a
 948+ CE20 21 53 C0                             ld      hl,UBnkTransmatRoofvX
 949+ CE23 CD BE CD                             call    XX12DotOneRow
 950+ CE26 32 9A C0                             ld      (UBnkXX12yLo),a
 951+ CE29 3A 13 81                             ld      a,(varS)
 952+ CE2C 32 9B C0                             ld      (UBnkXX12ySign),a
 953+ CE2F 21 59 C0                             ld      hl,UBnkTransmatNosevX
 954+ CE32 CD BE CD                             call    XX12DotOneRow
 955+ CE35 32 9C C0                             ld      (UBnkXX12zLo),a
 956+ CE38 3A 13 81                             ld      a,(varS)
 957+ CE3B 32 9D C0                             ld      (UBnkXX12zSign),a
 958+ CE3E C9                                   ret
 959+ CE3F              ;--------------------------------------------------------------------------------------------------------
 960+ CE3F                                      include "./Universe/Ships/CopyXX12ScaledToXX18.asm"
# file opened: ././Universe/Ships/CopyXX12ScaledToXX18.asm
   1++CE3F              CopyXX12ScaledToXX18:
   2++CE3F              CopyResultToDrawCam:
   3++CE3F                      ldCopyByte XX12         ,XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++CE3F 3A 98 C0    >                        ld       a,(XX12)
   3++CE42 32 86 C0    >                        ld       (XX18),a
   4++CE45                      ldCopyByte XX12+1       ,XX18+2           ; XX12+1 => XX18+2
   4++CE45 3A 99 C0    >                        ld       a,(XX12+1)
   4++CE48 32 88 C0    >                        ld       (XX18+2),a
   5++CE4B                      ldCopyByte XX12+2       ,XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++CE4B 3A 9A C0    >                        ld       a,(XX12+2)
   5++CE4E 32 89 C0    >                        ld       (XX18+3),a
   6++CE51                      ldCopyByte XX12+3       ,XX18+5           ; XX12+3 => XX18+5
   6++CE51 3A 9B C0    >                        ld       a,(XX12+3)
   6++CE54 32 8B C0    >                        ld       (XX18+5),a
   7++CE57                      ldCopyByte XX12+4       ,XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++CE57 3A 9C C0    >                        ld       a,(XX12+4)
   7++CE5A 32 8C C0    >                        ld       (XX18+6),a
   8++CE5D                      ldCopyByte XX12+5       ,XX18+8           ; XX12+5 => XX18+8
   8++CE5D 3A 9D C0    >                        ld       a,(XX12+5)
   8++CE60 32 8E C0    >                        ld       (XX18+8),a
   9++CE63 C9                   ret
  10++CE64
# file closed: ././Universe/Ships/CopyXX12ScaledToXX18.asm
 961+ CE64                                      include "./Universe/Ships/CopyXX12toXX15.asm"
# file opened: ././Universe/Ships/CopyXX12toXX15.asm
   1++CE64              CopyXX12toXX15:         ldCopyByte  UBnkXX12xLo     ,UBnkXScaled        ; xlo
   1++CE64 3A 98 C0    >                        ld       a,(UBnkXX12xLo)
   1++CE67 32 92 C0    >                        ld       (UBnkXScaled),a
   2++CE6A                                      ldCopyByte  UBnkXX12xSign   ,UBnkXScaledSign    ; xsg
   2++CE6A 3A 99 C0    >                        ld       a,(UBnkXX12xSign)
   2++CE6D 32 93 C0    >                        ld       (UBnkXScaledSign),a
   3++CE70                                      ldCopyByte  UBnkXX12yLo     ,UBnkYScaled        ; xlo
   3++CE70 3A 9A C0    >                        ld       a,(UBnkXX12yLo)
   3++CE73 32 94 C0    >                        ld       (UBnkYScaled),a
   4++CE76                                      ldCopyByte  UBnkXX12ySign   ,UBnkYScaledSign    ; xsg
   4++CE76 3A 9B C0    >                        ld       a,(UBnkXX12ySign)
   4++CE79 32 95 C0    >                        ld       (UBnkYScaledSign),a
   5++CE7C                                      ldCopyByte  UBnkXX12zLo     ,UBnkZScaled        ; xlo
   5++CE7C 3A 9C C0    >                        ld       a,(UBnkXX12zLo)
   5++CE7F 32 96 C0    >                        ld       (UBnkZScaled),a
   6++CE82                                      ldCopyByte  UBnkXX12zSign   ,UBnkZScaledSign    ; xsg
   6++CE82 3A 9D C0    >                        ld       a,(UBnkXX12zSign)
   6++CE85 32 97 C0    >                        ld       (UBnkZScaledSign),a
   7++CE88 C9                                   ret
   8++CE89
# file closed: ././Universe/Ships/CopyXX12toXX15.asm
 962+ CE89                                      include "./Universe/Ships/CopyXX18toXX15.asm"
# file opened: ././Universe/Ships/CopyXX18toXX15.asm
   1++CE89              CopyXX18toXX15:
   2++CE89              CopyDrawCamToScaled:
   3++CE89                      ldCopyByte  UBnkDrawCam0xLo ,UBnkXScaled        ; xlo
   3++CE89 3A 86 C0    >                        ld       a,(UBnkDrawCam0xLo)
   3++CE8C 32 92 C0    >                        ld       (UBnkXScaled),a
   4++CE8F                      ldCopyByte  UBnkDrawCam0xSgn,UBnkXScaledSign    ; xsg
   4++CE8F 3A 88 C0    >                        ld       a,(UBnkDrawCam0xSgn)
   4++CE92 32 93 C0    >                        ld       (UBnkXScaledSign),a
   5++CE95                      ldCopyByte  UBnkDrawCam0yLo ,UBnkYScaled        ; xlo
   5++CE95 3A 89 C0    >                        ld       a,(UBnkDrawCam0yLo)
   5++CE98 32 94 C0    >                        ld       (UBnkYScaled),a
   6++CE9B                      ldCopyByte  UBnkDrawCam0ySgn,UBnkYScaledSign    ; xsg
   6++CE9B 3A 8B C0    >                        ld       a,(UBnkDrawCam0ySgn)
   6++CE9E 32 95 C0    >                        ld       (UBnkYScaledSign),a
   7++CEA1                      ldCopyByte  UBnkDrawCam0zLo ,UBnkZScaled        ; xlo
   7++CEA1 3A 8C C0    >                        ld       a,(UBnkDrawCam0zLo)
   7++CEA4 32 96 C0    >                        ld       (UBnkZScaled),a
   8++CEA7                      ldCopyByte  UBnkDrawCam0zSgn,UBnkZScaledSign    ; xsg
   8++CEA7 3A 8E C0    >                        ld       a,(UBnkDrawCam0zSgn)
   8++CEAA 32 97 C0    >                        ld       (UBnkZScaledSign),a
   9++CEAD C9                   ret
  10++CEAE
# file closed: ././Universe/Ships/CopyXX18toXX15.asm
 963+ CEAE                                      include "./Universe/Ships/CopyXX18ScaledToXX15.asm"
# file opened: ././Universe/Ships/CopyXX18ScaledToXX15.asm
   1++CEAE 21 10 C0     LoadCraftToCamera:      ld      hl,UBnKxlo
   2++CEB1 11 86 C0                             ld      de,UBnkDrawCam0xLo
   3++CEB4                                      NineLDIInstrunctions                ; transfer 9 bytes
   3++CEB4 ED A0       >		                ldi
   3++CEB6 ED A0       >		                ldi
   3++CEB8 ED A0       >		                ldi
   3++CEBA ED A0       >		                ldi
   3++CEBC ED A0       >		                ldi
   3++CEBE ED A0       >		                ldi
   3++CEC0 ED A0       >		                ldi
   3++CEC2 ED A0       >		                ldi
   3++CEC4 ED A0       >		                ldi
   4++CEC6 C9                                   ret
   5++CEC7
   6++CEC7              CopyCameraToXX15Signed:
   7++CEC7 2A 86 C0             ld  hl,(UBnkDrawCam0xLo)
   8++CECA 3A 88 C0             ld  a,(UBnkDrawCam0xSgn)
   9++CECD B4                   or  h
  10++CECE 67                   ld  h,a
  11++CECF 22 92 C0             ld  (UBnkXScaled),hl
  12++CED2 2A 89 C0             ld  hl,(UBnkDrawCam0yLo)
  13++CED5 3A 8B C0             ld  a,(UBnkDrawCam0ySgn)
  14++CED8 B4                   or  h
  15++CED9 67                   ld  h,a
  16++CEDA 22 94 C0             ld  (UBnkYScaled),hl
  17++CEDD 2A 8C C0             ld  hl,(UBnkDrawCam0zLo)
  18++CEE0 3A 8E C0             ld  a,(UBnkDrawCam0zSgn)
  19++CEE3 B4                   or  h
  20++CEE4 67                   ld  h,a
  21++CEE5 22 96 C0             ld  (UBnkZScaled),hl
  22++CEE8 C9                   ret
  23++CEE9
  24++CEE9              CopyXX18ScaledToXX15:
  25++CEE9              CopyDrawCamToScaledMatrix:
  26++CEE9                      ldCopyByte  UBnkDrawCam0zSgn, UBnkZScaledSign   ; XX18+8 => XX15+5
  26++CEE9 3A 8E C0    >                        ld       a,(UBnkDrawCam0zSgn)
  26++CEEC 32 97 C0    >                        ld       (UBnkZScaledSign),a
  27++CEEF                      ldCopyByte  UBnkDrawCam0xLo,  UBnkXScaled       ; XX18+0 => XX15+0
  27++CEEF 3A 86 C0    >                        ld       a,(UBnkDrawCam0xLo)
  27++CEF2 32 92 C0    >                        ld       (UBnkXScaled),a
  28++CEF5                      ldCopyByte  UBnkDrawCam0xSgn, UBnkXScaledSign   ; XX18+2 => XX15+1
  28++CEF5 3A 88 C0    >                        ld       a,(UBnkDrawCam0xSgn)
  28++CEF8 32 93 C0    >                        ld       (UBnkXScaledSign),a
  29++CEFB                      ldCopyByte  UBnkDrawCam0yLo,  UBnkYScaled       ; XX18+3 => XX15+2
  29++CEFB 3A 89 C0    >                        ld       a,(UBnkDrawCam0yLo)
  29++CEFE 32 94 C0    >                        ld       (UBnkYScaled),a
  30++CF01                      ldCopyByte  UBnkDrawCam0ySgn, UBnkYScaledSign   ; XX18+5 => XX15+3
  30++CF01 3A 8B C0    >                        ld       a,(UBnkDrawCam0ySgn)
  30++CF04 32 95 C0    >                        ld       (UBnkYScaledSign),a
  31++CF07                      ldCopyByte  UBnkDrawCam0zLo,  UBnkZScaled       ; XX18+6 => XX15+4
  31++CF07 3A 8C C0    >                        ld       a,(UBnkDrawCam0zLo)
  31++CF0A 32 96 C0    >                        ld       (UBnkZScaled),a
  32++CF0D C9                   ret
  33++CF0E
  34++CF0E              CopyXX15ToXX18Scaled:
  35++CF0E              CopyScaledMatrixToDrawCam:
  36++CF0E                      ldCopyByte UBnkZScaledSign,   UBnkDrawCam0zSgn  ; XX15+5 => XX18+8
  36++CF0E 3A 97 C0    >                        ld       a,(UBnkZScaledSign)
  36++CF11 32 8E C0    >                        ld       (UBnkDrawCam0zSgn),a
  37++CF14                      ldCopyByte UBnkXScaled,       UBnkDrawCam0xLo   ; XX15+0 => XX18+0
  37++CF14 3A 92 C0    >                        ld       a,(UBnkXScaled)
  37++CF17 32 86 C0    >                        ld       (UBnkDrawCam0xLo),a
  38++CF1A                      ldCopyByte UBnkXScaledSign,   UBnkDrawCam0xSgn  ; XX15+1 => XX18+2
  38++CF1A 3A 93 C0    >                        ld       a,(UBnkXScaledSign)
  38++CF1D 32 88 C0    >                        ld       (UBnkDrawCam0xSgn),a
  39++CF20                      ldCopyByte UBnkYScaled,       UBnkDrawCam0yLo   ; XX15+2 => XX18+3
  39++CF20 3A 94 C0    >                        ld       a,(UBnkYScaled)
  39++CF23 32 89 C0    >                        ld       (UBnkDrawCam0yLo),a
  40++CF26                      ldCopyByte UBnkYScaledSign,   UBnkDrawCam0ySgn  ; XX15+3 => XX18+5
  40++CF26 3A 95 C0    >                        ld       a,(UBnkYScaledSign)
  40++CF29 32 8B C0    >                        ld       (UBnkDrawCam0ySgn),a
  41++CF2C                      ldCopyByte UBnkZScaled,       UBnkDrawCam0zLo   ; XX15+4 => XX18+6
  41++CF2C 3A 96 C0    >                        ld       a,(UBnkZScaled)
  41++CF2F 32 8C C0    >                        ld       (UBnkDrawCam0zLo),a
  42++CF32 C9                   ret
  43++CF33
  44++CF33
  45++CF33              XX15EquXX15AddXX18:
  46++CF33              LL94Z:
  47++CF33 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  48++CF35 16 00                ld      d,0                                                     ;
  49++CF37 3A 96 C0             ld      a,(UBnkZScaled)                                         ;
  50++CF3A 6F                   ld      l,a                                                     ;
  51++CF3B 3A 97 C0             ld      a,(UBnkZScaledSign)                                     ;
  52++CF3E 47                   ld      b,a                                                     ;
  53++CF3F 3A 8C C0             ld      a,(UBnkDrawCam0zLo)                                     ;
  54++CF42 5F                   ld      e,a                                                     ;
  55++CF43 3A 8E C0             ld      a,(UBnkDrawCam0zSgn)                                    ;
  56++CF46 4F                   ld      c,a                                                     ;
  57++CF47 CD B1 8F             call    ADDHLDESignBC                                           ;
  58++CF4A 47                   ld      b,a                                                     ;
  59++CF4B 7C                   ld      a,h                                                     ;
  60++CF4C 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  61++CF4D 32 97 C0             ld      (UBnkZScaledSign),a                                     ;
  62++CF50 7D                   ld      a,l                                                     ;
  63++CF51 32 96 C0             ld      (UBnkZScaled),a                                         ;           endif
  64++CF54              LL94X:
  65++CF54 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  66++CF56 16 00                ld      d,0                                                     ;
  67++CF58 3A 92 C0             ld      a,(UBnkXScaled)                                         ;
  68++CF5B 6F                   ld      l,a                                                     ;
  69++CF5C 3A 93 C0             ld      a,(UBnkXScaledSign)                                     ;
  70++CF5F 47                   ld      b,a                                                     ;
  71++CF60 3A 86 C0             ld      a,(UBnkDrawCam0xLo)                                     ;
  72++CF63 5F                   ld      e,a                                                     ;
  73++CF64 3A 88 C0             ld      a,(UBnkDrawCam0xSgn)                                    ;
  74++CF67 4F                   ld      c,a                                                     ;
  75++CF68 CD B1 8F             call    ADDHLDESignBC                                           ;
  76++CF6B 47                   ld      b,a                                                     ;
  77++CF6C 7C                   ld      a,h                                                     ;
  78++CF6D 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  79++CF6E 32 93 C0             ld      (UBnkXScaledSign),a                                     ;
  80++CF71 7D                   ld      a,l                                                     ;
  81++CF72 32 92 C0             ld      (UBnkXScaled),a                                         ;           endif
  82++CF75              LL94Y:
  83++CF75 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  84++CF77 16 00                ld      d,0                                                     ;
  85++CF79 3A 94 C0             ld      a,(UBnkYScaled)                                         ;
  86++CF7C 6F                   ld      l,a                                                     ;
  87++CF7D 3A 95 C0             ld      a,(UBnkYScaledSign)                                     ;
  88++CF80 47                   ld      b,a                                                     ;
  89++CF81 3A 89 C0             ld      a,(UBnkDrawCam0yLo)                                     ;
  90++CF84 5F                   ld      e,a                                                     ;
  91++CF85 3A 8B C0             ld      a,(UBnkDrawCam0ySgn)                                    ;
  92++CF88 4F                   ld      c,a                                                     ;
  93++CF89 CD B1 8F             call    ADDHLDESignBC                                           ;
  94++CF8C 47                   ld      b,a                                                     ;
  95++CF8D 7C                   ld      a,h                                                     ;
  96++CF8E 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  97++CF8F 32 95 C0             ld      (UBnkYScaledSign),a                                     ;
  98++CF92 7D                   ld      a,l                                                     ;
  99++CF93 32 94 C0             ld      (UBnkYScaled),a                                         ;
 100++CF96 C9                   ret
 101++CF97
# file closed: ././Universe/Ships/CopyXX18ScaledToXX15.asm
 964+ CF97                                      include "./Universe/Ships/CopyXX12ToScaled.asm"
# file opened: ././Universe/Ships/CopyXX12ToScaled.asm
   1++CF97              CopyXX12ToScaled:
   2++CF97              CopyResultToScaled:
   3++CF97                      ldCopyByte  XX12+0,UBnkXScaled      ; xnormal lo
   3++CF97 3A 98 C0    >                        ld       a,(XX12+0)
   3++CF9A 32 92 C0    >                        ld       (UBnkXScaled),a
   4++CF9D                      ldCopyByte  XX12+2,UBnkYScaled      ; ynormal lo
   4++CF9D 3A 9A C0    >                        ld       a,(XX12+2)
   4++CFA0 32 94 C0    >                        ld       (UBnkYScaled),a
   5++CFA3                      ldCopyByte  XX12+4,UBnkZScaled      ; znormal lo and leaves a holding zscaled normal
   5++CFA3 3A 9C C0    >                        ld       a,(XX12+4)
   5++CFA6 32 96 C0    >                        ld       (UBnkZScaled),a
   6++CFA9 C9                   ret
   7++CFAA
# file closed: ././Universe/Ships/CopyXX12ToScaled.asm
 965+ CFAA              ;--------------------------------------------------------------------------------------------------------
 966+ CFAA                                      include "./Maths/Utilities/DotProductXX12XX15.asm"
# file opened: ././Maths/Utilities/DotProductXX12XX15.asm
   1++CFAA              ;;; Q = XX12 xLo ,A = XX15 xLo
   2++CFAA              ;;; T = A * Q/256 Usgined  (FMLTU)
   3++CFAA              ;;; S = XX12 XSign Xor XX15 XSign
   4++CFAA              ;;; Q = XX12 Ynormal Lo, A = XX15+2 (y lo)
   5++CFAA              ;;; Q = A * Q/256 Usigned (FMLTI)
   6++CFAA              ;;; R = T
   7++CFAA              ;;; A = XX12+3 (ySign) Xor XX15+3 (ySign)
   8++CFAA              ;;; T = BADD s(A) = R + Q(SA) (xdot + ydot)
   9++CFAA              ;;; Q = XX12+4 (znormal lo) A = XX15+4 z lo
  10++CFAA              ;;; Q = A * Q /256 usigned (zdot)
  11++CFAA              ;;; R = T
  12++CFAA              ;;; A - XX15+ 5 Zsign Xor XX12+5 Z Sign
  13++CFAA
  14++CFAA
  15++CFAA
  16++CFAA
  17++CFAA
  18++CFAA              MacroAequDxEdiv256usgn:	MACRO
  19++CFAA ~            						mul
  20++CFAA ~            						ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  21++CFAA              						ENDM
  22++CFAA              DotProductXX12XX15:
  23++CFAA 3A 98 C0             ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  24++CFAD                      JumpIfAIsZero dotxskipzero
  24++CFAD A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  24++CFAE CA CB CF    >                        jp	    z, dotxskipzero
  25++CFB1 5F                   ld          e,a
  26++CFB2 3A 92 C0             ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  27++CFB5 57                   ld          d,a                     ; de = xx12 x signed
  28++CFB6                      JumpIfAIsZero dotxskipzero
  28++CFB6 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  28++CFB7 CA CB CF    >                        jp	    z, dotxskipzero
  29++CFBA ED 30        		mul
  30++CFBC 42                   ld          b,d                     ; b = result
  31++CFBD 3A 99 C0             ld          a,(UBnkXX12xSign)
  32++CFC0 21 93 C0             ld          hl,UBnkXScaledSign
  33++CFC3 AE                   xor         (hl)
  34++CFC4 E6 80                and         $80                     ; so sign bit only
  35++CFC6 FD 67                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
  36++CFC8 C3 CF CF             jp          dotmuly
  37++CFCB              dotxskipzero:
  38++CFCB AF                   xor         a
  39++CFCC 47                   ld          b,a
  40++CFCD FD 67                ld          iyh,a
  41++CFCF              dotmuly:
  42++CFCF              ; now we have b = XX12 x &d  norm x signed
  43++CFCF 3A 9A C0             ld          a,(UBnkXX12yLo)
  44++CFD2                      JumpIfAIsZero dotyskipzero
  44++CFD2 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  44++CFD3 CA F2 CF    >                        jp	    z, dotyskipzero
  45++CFD6 5F                   ld          e,a
  46++CFD7 3A 94 C0             ld          a,(UBnkYScaled)         ; XX15+2
  47++CFDA                      JumpIfAIsZero dotyskipzero
  47++CFDA A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  47++CFDB CA F2 CF    >                        jp	    z, dotyskipzero
  48++CFDE 57                   ld          d,a                     ; de = xx12 x signed
  49++CFDF ED 30                mul
  50++CFE1 4A                   ld          c,d                     ; c = result
  51++CFE2 DD 69                ld          ixl,c
  52++CFE4 3A 9B C0             ld          a,(UBnkXX12ySign)       ; A = ysg
  53++CFE7 21 95 C0             ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
  54++CFEA AE                   xor         (hl)                    ; XX15+3
  55++CFEB E6 80                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
  56++CFED DD 67                ld          ixh,a
  57++CFEF C3 F6 CF             jp          dotaddxy
  58++CFF2              dotyskipzero:
  59++CFF2 AF                   xor         a
  60++CFF3 4F                   ld          c,a
  61++CFF4 DD 67                ld          ixh,a
  62++CFF6              dotaddxy:
  63++CFF6              ; Optimise later as this is 16 bit
  64++CFF6 26 00                ld          h,0                     ;
  65++CFF8 68                   ld          l,b                     ; hl = xlo + x scaled
  66++CFF9 16 00                ld          d,0                     ;
  67++CFFB 59                   ld          e,c                     ; de = ylo + yscaled
  68++CFFC FD 44                ld          b,iyh                   ; b = sign of xlo + xscaled
  69++CFFE 4F                   ld          c,a                     ; c = sign of ylo + yscaled
  70++CFFF CD B1 8F             call ADDHLDESignBC                  ; so now hl = result so will push sign to h
  71++D002 47                   ld          b,a                     ; b = resultant sign , hl = add so far
  72++D003 3A 9C C0             ld          a,(UBnkXX12zLo)         ;
  73++D006                      JumpIfAIsZero dotzskipzero
  73++D006 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  73++D007 CA 2C D0    >                        jp	    z, dotzskipzero
  74++D00A 5F                   ld          e,a                     ;
  75++D00B 3A 96 C0             ld          a,(UBnkZScaled)         ;
  76++D00E                      JumpIfAIsZero dotzskipzero
  76++D00E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  76++D00F CA 2C D0    >                        jp	    z, dotzskipzero
  77++D012 57                   ld          d,a
  78++D013 ED 30                mul
  79++D015 E5                   push        hl                      ; save prev result
  80++D016 3A 97 C0             ld          a,(UBnkZScaledSign)
  81++D019 21 9D C0             ld          hl, UBnkXX12zSign       ; XX15+5
  82++D01C AE                   xor         (hl)                    ; hi sign
  83++D01D E6 80                and         $80                     ; a = sign of multiply
  84++D01F 4F                   ld          c,a                     ; c = sign of z lo & z scaled
  85++D020 E1                   pop         hl
  86++D021 5A                   ld          e,d
  87++D022 16 00                ld          d,0
  88++D024 CD B1 8F             call ADDHLDESignBC
  89++D027 32 13 81             ld          (varS),a
  90++D02A 7D                   ld          a,l
  91++D02B C9                   ret                                 ; returns with A = value, varS = sign
  92++D02C              dotzskipzero:                               ; if we got here then z was zero so no component so just tidy up from last add
  93++D02C 78                   ld          a,b
  94++D02D 32 13 81             ld          (varS),a
  95++D030 7D                   ld          a,l
  96++D031 C9                   ret
  97++D032              ;;;;       DotProductXX12XX15:
  98++D032              ;;;;       ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  99++D032              ;;;;       ld          e,a
 100++D032              ;;;;       ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
 101++D032              ;;;;       ld          d,a                     ; de = xx12 x signed
 102++D032              ;;;;		; FMLTU	\ A=A*Q/256unsg using D as A and E as Q
 103++D032              ;;;;		mul
 104++D032              ;;;;       ld          b,d                     ; b as var T
 105++D032              ;;;;       ld          a,(UBnkXX12xSign)
 106++D032              ;;;;       ld          hl,UBnkXScaledSign
 107++D032              ;;;;       xor         (hl)
 108++D032              ;;;;       and         $80                     ; so sign bit only
 109++D032              ;;;;       ld          (varS),a                ; we did use c as S \ S	\ x-sign, but we actually need it in varS for BADD
 110++D032              ;;;; now we have b = XX12 x & norm x signed
 111++D032              ;;;; by here B = xlo & xscaled C = result sign
 112++D032              ;;;;       ld          a,(UBnkXX12yLo)
 113++D032              ;;;;       ld          e,a
 114++D032              ;;;;       ld          a,(UBnkYScaled)         ; XX15+2
 115++D032              ;;;;		ld          d,a						; MISSED THIS EARLIER BUG FIX
 116++D032              ;;;;       mul
 117++D032              ;;;;       ld          a,d
 118++D032              ;;;;       ld          (varQ),a                ; Q = Y y-dot
 119++D032              ;;;;       ld          a,b                     ; get back T from above held in b
 120++D032              ;;;;       ld          (varR),a                ; R= b \ T	\ x-dot
 121++D032              ;;;;       ld          a,(UBnkXX12ySign)       ; A = ysg
 122++D032              ;;;;       ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
 123++D032              ;;;;       xor         (hl)                    ; XX15+3
 124++D032              ;;;;       and         $80
 125++D032              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 126++D032              ;;;;       ld          (varT),a                ; var T	\ xdot+ydot
 127++D032              ;;;;       ld          a,(UBnkXX12zLo)         ; use d as  varQ        ; XX12+4	\ znormal lo to varQ
 128++D032              ;;;;       ld          e,a                     ; use e as var Q
 129++D032              ;;;;       ld          a,(UBnkZScaled)         ;
 130++D032              ;;;;       ld          d,a
 131++D032              ;;;;       mul
 132++D032              ;;;;       ld          a,d
 133++D032              ;;;;       ld          (varQ),a                ; Q	\ zdot
 134++D032              ;;;;       ldCopyByte  varT,varR               ; copy T to R so R = resutl of previous calc
 135++D032              ;;;;       ld          a,(UBnkZScaledSign)
 136++D032              ;;;;       ld          hl, UBnkXX12zSign       ; XX15+5
 137++D032              ;;;;       xor         (hl)                    ; hi sign
 138++D032              ;;;;       and         $80
 139++D032              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 140++D032              ;;;;       ret                                 ; returns with A = value, varS = sign
 141++D032
# file closed: ././Maths/Utilities/DotProductXX12XX15.asm
 967+ D032              ;--------------------------------------------------------------------------------------------------------
 968+ D032              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
 969+ D032              ; Not Used in code      include "Universe/Ships/ScaleNormal.asm"
 970+ D032              ;--------------------------------------------------------------------------------------------------------
 971+ D032                                      include "./Universe/Ships/ScaleObjectDistance.asm"
# file opened: ././Universe/Ships/ScaleObjectDistance.asm
   1++D032              ScaleObjectDistance:
   2++D032              ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3++D032 3A 2D C3             ld      a,(QAddr)                   ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4++D035 4F                   ld      c,a                         ; c = Q factor for scaling of normals
   5++D036              LL90:                                       ; scaling object distance
   6++D036 3A 8D C0             ld      a,(UBnkDrawCam0zHi)         ; z_hi
   7++D039 47                   ld      b,a                         ; z_hi (yReg)
   8++D03A                      ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   8++D03A A7          >                        and     a
   8++D03B C8          >                        ret     z
   9++D03C              LL90Loop:
  10++D03C              ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  11++D03C 0C                   inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  12++D03D                      ShiftMem16Right1 UBnkDrawCam0yLo    ; cam Y /= 2
  12++D03D 2A 89 C0    >                    ld    hl,(UBnkDrawCam0yLo)
  12++D040 CB 3C       >                    srl   h
  12++D042 CB 1D       >                    rr    l
  12++D044 22 89 C0    >                    ld    (UBnkDrawCam0yLo),hl
  13++D047                      ShiftMem16Right1 UBnkDrawCam0xLo    ; cam X /= 2
  13++D047 2A 86 C0    >                    ld    hl,(UBnkDrawCam0xLo)
  13++D04A CB 3C       >                    srl   h
  13++D04C CB 1D       >                    rr    l
  13++D04E 22 86 C0    >                    ld    (UBnkDrawCam0xLo),hl
  14++D051                      ShiftMem16Right1 UBnkDrawCam0zLo    ; cam Z /= 2
  14++D051 2A 8C C0    >                    ld    hl,(UBnkDrawCam0zLo)
  14++D054 CB 3C       >                    srl   h
  14++D056 CB 1D       >                    rr    l
  14++D058 22 8C C0    >                    ld    (UBnkDrawCam0zLo),hl
  15++D05B 7C                   ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  16++D05C                      JumpIfAIsNotZero LL90Loop           ; loop until z hi = 0 this gives scalinging in c
  16++D05C A7          >                        and     a
  16++D05D C2 3C D0    >                        jp	    nz,LL90Loop
  17++D060 C9                   ret
  18++D061
# file closed: ././Universe/Ships/ScaleObjectDistance.asm
 972+ D061              ;--------------------------------------------------------------------------------------------------------
 973+ D061
 974+ D061              ; Backface cull
 975+ D061              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
 976+ D061              ; normal vector = cross product of ship ccordinates
 977+ D061              ;
 978+ D061
 979+ D061                                      include "./Universe/Ships/CopyFaceToXX15.asm"
# file opened: ././Universe/Ships/CopyFaceToXX15.asm
   1++D061 7E           CopyFaceToXX15:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D062 47                                   ld      b,a                                                    ;;;
   3++D063 E6 80                                and     SignOnly8Bit
   4++D065 32 93 C0                             ld      (UBnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D068 78                                   ld      a,b
   6++D069 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D06B 47                                   ld      b,a
   8++D06C E6 80                                and     SignOnly8Bit
   9++D06E 32 95 C0                             ld      (UBnkYScaledSign),a           ;                                                                                      ;;;
  10++D071 78                                   ld      a,b
  11++D072 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D074 E6 80                                and     SignOnly8Bit
  13++D076 32 97 C0                             ld      (UBnkZScaledSign),a           ;                                                                                      ;;;
  14++D079 23                                   inc     hl                          ; move to X ccord
  15++D07A 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D07B 32 92 C0                             ld      (UBnkXScaled),a                                                                                                    ;;;
  17++D07E 23                                   inc     hl                                                                                                                 ;;;
  18++D07F 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D080 32 94 C0                             ld      (UBnkYScaled),a                                                                                                    ;;;
  20++D083 23                                   inc     hl                                                                                                                 ;;;
  21++D084 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D085 32 96 C0                             ld      (UBnkZScaled),a
  23++D088 C9                                   ret
  24++D089
# file closed: ././Universe/Ships/CopyFaceToXX15.asm
 980+ D089                                      include "./Universe/Ships/CopyFaceToXX12.asm"
# file opened: ././Universe/Ships/CopyFaceToXX12.asm
   1++D089 7E           CopyFaceToXX12:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D08A 47                                   ld      b,a                         ; save sign bits to b
   3++D08B E6 80                                and     SignOnly8Bit
   4++D08D 32 99 C0                             ld      (UBnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D090 78                                   ld      a,b
   6++D091 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D093 47                                   ld      b,a
   8++D094 E6 80                                and     SignOnly8Bit
   9++D096 32 9B C0                             ld      (UBnkXX12ySign),a           ;                                                                                      ;;;
  10++D099 78                                   ld      a,b
  11++D09A CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D09C E6 80                                and     SignOnly8Bit
  13++D09E 32 9D C0                             ld      (UBnkXX12zSign),a           ;                                                                                      ;;;
  14++D0A1 23                                   inc     hl                          ; move to X ccord
  15++D0A2 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D0A3 32 98 C0                             ld      (UBnkXX12xLo),a                                                                                                    ;;;
  17++D0A6 23                                   inc     hl                                                                                                                 ;;;
  18++D0A7 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D0A8 32 9A C0                             ld      (UBnkXX12yLo),a                                                                                                    ;;;
  20++D0AB 23                                   inc     hl                                                                                                                 ;;;
  21++D0AC 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D0AD 32 9C C0                             ld      (UBnkXX12zLo),a
  23++D0B0 C9                                   ret
  24++D0B1
# file closed: ././Universe/Ships/CopyFaceToXX12.asm
 981+ D0B1              ;--------------------------------------------------------------
 982+ D0B1              ; Original loginc in EE29 (LL9 4 of 12)
 983+ D0B1              ; Enters with XX4 = z distnace scaled to 1 .. 31
 984+ D0B1              ; get number of faces * 4      FaceCntX4
 985+ D0B1              ; return if no faces
 986+ D0B1              ; get Face Normal scale factor FaceScale (XX17)
 987+ D0B1              ; get ship pos z hi     (XX18)
 988+ D0B1              ; While Z hi <> 0
 989+ D0B1              ;    FaceScale = FaceScale + 1           (XX17)
 990+ D0B1              ;    Ship pos y = ship pos y / 2         (XX18)
 991+ D0B1              ;    ship pos x = ship pos x / 2         (XX18)
 992+ D0B1              ;    ship pos z = ship pos z / 2         (XX18)
 993+ D0B1              ; Loop
 994+ D0B1              ; Copy Ship Pos (XX18) to Scaled         (XX15)
 995+ D0B1              ; Get Dot Product of Scaled (XX15) and XX16 (pre inverted) into XX12
 996+ D0B1              ; Copy XX12 into XX18
 997+ D0B1              ; For each face
 998+ D0B1              ;     Get Face sign and visibility distance byte
 999+ D0B1              ;     if normal visibility range  < XX4
1000+ D0B1              ;        Get Face data into XX12
1001+ D0B1              ;        if FaceScale (XX17) >= 4
1002+ D0B1              ;            Copy Ship Pos (XX18) to scaled (XX15)                                                                  ::LL143
1003+ D0B1              ;        else
1004+ D0B1              ;           Copy FaceScale scaled to X  (XX17)
1005+ D0B1              ;LabelOverflowLoop:
1006+ D0B1              ;           Copy FaceData (XX12) to Scaled (XX15)                                                                   ::LL92
1007+ D0B1              ;           While X >= 0
1008+ D0B1              ;              X--                                                                                                  ::LL93
1009+ D0B1              ;              if  x >= 0
1010+ D0B1              ;                  XX15x = XX15x / 2
1011+ D0B1              ;                  XX15y = XX15y / 2
1012+ D0B1              ;                  XX15y = XX15y / 2
1013+ D0B1              ;           loop
1014+ D0B1              ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z                                                              ::LL94
1015+ D0B1              ;           if A > 256 (i.e. was overflow)
1016+ D0B1              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
1017+ D0B1              ;               X = 1
1018+ D0B1              ;               Goto LabelOverflowLoop
1019+ D0B1              ;           else
1020+ D0B1              ;              Scaled (XX15) Z = AddZ
1021+ D0B1              ;           endif
1022+ D0B1              ;           AddX = FaceData (XX12)x +  ShipPos (XX18)x
1023+ D0B1              ;           if A > 256 (i.e. was overflow)
1024+ D0B1              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
1025+ D0B1              ;               X = 1
1026+ D0B1              ;               Goto LabelOverflowLoop
1027+ D0B1              ;           else
1028+ D0B1              ;              Scaled (XX15) X = AddX
1029+ D0B1              ;           endif
1030+ D0B1              ;           AddY = FaceData (XX12)y +  ShipPos (XX18)y
1031+ D0B1              ;           if A > 256 (i.e. was overflow)
1032+ D0B1              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
1033+ D0B1              ;               X = 1
1034+ D0B1              ;               Goto LabelOverflowLoop
1035+ D0B1              ;           else
1036+ D0B1              ;              Scaled (XX15) Y = AddY
1037+ D0B1              ;           endif
1038+ D0B1              ;        endif
1039+ D0B1              ;        calculate dot product XX12.XX15  (XX15x * XX12x /256 + XX15y * XX12y /256 + XX15z * XX12z /256)        ::LL89
1040+ D0B1              ;        if dot product < 0
1041+ D0B1              ;           set face visible
1042+ D0B1              ;        else
1043+ D0B1              ;           set face invisible
1044+ D0B1              ;        end if
1045+ D0B1              ;     else
1046+ D0B1              ;       Set FaceVisibility to true
1047+ D0B1              ;     end if
1048+ D0B1              ; Next Face
1049+ D0B1
1050+ D0B1 DD 25        ScaleDownXX15byIXH:     dec     ixh
1051+ D0B3 F8                                   ret     m
1052+ D0B4 21 92 C0                             ld      hl,UBnkXScaled
1053+ D0B7 CB 3E                                srl     (hl)                        ; XX15  \ xnormal lo/2 \ LL93+3 \ counter X
1054+ D0B9 23                                   inc     hl                          ; looking at XX15 x sign now
1055+ D0BA 23                                   inc     hl                          ; looking at XX15 y Lo now
1056+ D0BB CB 3E                                srl     (hl)                        ; XX15+2    \ ynormal lo/2
1057+ D0BD 23                                   inc     hl                          ; looking at XX15 y sign now
1058+ D0BE 23                                   inc     hl                          ; looking at XX15 z Lo now
1059+ D0BF CB 3E                                srl     (hl)
1060+ D0C1 C3 B1 D0                             jp      ScaleDownXX15byIXH
1061+ D0C4 C9                                   ret
1062+ D0C5
1063+ D0C5 21 86 C0     DivideXX18By2:          ld      hl,UBnkDrawCam0xLo
1064+ D0C8 CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
1065+ D0CA 23                                   inc     hl                          ; looking at XX18 x sign now
1066+ D0CB 23                                   inc     hl                          ; looking at XX18 y Lo now
1067+ D0CC CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
1068+ D0CE 23                                   inc     hl                          ; looking at XX18 y sign now
1069+ D0CF 23                                   inc     hl                          ; looking at XX18 z Lo now
1070+ D0D0 CB 3E                                srl     (hl)
1071+ D0D2 C9                                   ret
1072+ D0D3
1073+ D0D3              ;line of sight vector = [x y z] + face normal vector
1074+ D0D3
1075+ D0D3              ;               [ [x y z] . sidev + normal_x ]   [ normal_x ]
1076+ D0D3              ;  visibility = [ [x y z] . roofv + normal_y ] . [ normal_y ]
1077+ D0D3              ;               [ [x y z] . nosev + normal_z ]   [ normal_z ]
1078+ D0D3              ;
1079+ D0D3              ;--------------------------------------------------------------
1080+ D0D3              ; line of sight (eye outwards dot face normal vector < 0
1081+ D0D3              ; So lin eof sight = vector from 0,0,0 to ship pos, now we need to consider teh ship's facing
1082+ D0D3              ; now if we add teh veector for teh normal(times magnitude)) to teh ship position we have the true center of the face
1083+ D0D3              ; now we can calcualt teh dot product of this caulated vector and teh normal which if < 0 is goot. this means we use rot mat not inverted rotmat.
1084+ D0D3
1085+ D0D3              RotateXX15ByTransMatXX16:
1086+ D0D3 21 4D C0                             ld      hl,UBnkTransmatSidevX               ; process orientation matrix row 0
1087+ D0D6 CD 5A 78                             call    XX12ProcessOneRow
1088+ D0D9 47                                   ld      b,a                                 ; get
1089+ D0DA 7D                                   ld      a,l
1090+ D0DB B0                                   or      b
1091+ D0DC 32 99 C0                             ld      (UBnkXX12xSign),a                   ; a = result with sign in bit 7
1092+ D0DF 7D                                   ld      a,l
1093+ D0E0 32 98 C0                             ld      (UBnkXX12xLo),a                     ; that is result done for
1094+ D0E3
1095+ D0E3 21 53 C0                             ld      hl,UBnkTransmatRoofvX               ; process orientation matrix row 0
1096+ D0E6 CD 5A 78                             call    XX12ProcessOneRow
1097+ D0E9 47                                   ld      b,a                                 ; get
1098+ D0EA 7D                                   ld      a,l
1099+ D0EB B0                                   or      b
1100+ D0EC 32 9B C0                             ld      (UBnkXX12ySign),a                   ; a = result with sign in bit 7
1101+ D0EF 7D                                   ld      a,l
1102+ D0F0 32 9A C0                             ld      (UBnkXX12yLo),a                     ; that is result done for
1103+ D0F3
1104+ D0F3 21 59 C0                             ld      hl,UBnkTransmatNosevX               ; process orientation matrix row 0
1105+ D0F6 CD 5A 78                             call    XX12ProcessOneRow
1106+ D0F9 47                                   ld      b,a                                 ; get
1107+ D0FA 7D                                   ld      a,l
1108+ D0FB B0                                   or      b
1109+ D0FC 32 9D C0                             ld      (UBnkXX12zSign),a                   ; a = result with sign in bit 7
1110+ D0FF 7D                                   ld      a,l
1111+ D100 32 9C C0                             ld      (UBnkXX12zLo),a                     ; that is result done for
1112+ D103 C9                                   ret
1113+ D104
1114+ D104                  include "./ModelRender/BackfaceCull.asm"
# file opened: ././ModelRender/BackfaceCull.asm
   1++D104 00           CurrentNormIdx  DB 0
   2++D105              ; SomeFacesVisible:
   3++D105              ; EE29:
   4++D105
   5++D105              ;   Backface cull logic  line of sight vector . face normal vector
   6++D105              ;       line of sight vector . face normal vector
   7++D105              ;       => line of sight vector = [x y z] + face normal vector
   8++D105              ;       Where [x y z] =
   9++D105              ;                                               [ [x y z] . sidev ]
  10++D105              ;                    projected [x y z] vector = [ [x y z] . roofv ]
  11++D105              ;                                               [ [x y z] . nosev ]
  12++D105              ;
  13++D105              ;   so project the [x y z] vector into the face's normal space
  14++D105              ;  line of sight vector = projected [x y z] vector + face normal vector
  15++D105              ;                         [ [x y z] . sidev ]   [ normal_x ]
  16++D105              ;                       = [ [x y z] . roofv ] + [ normal_y ]
  17++D105              ;                         [ [x y z] . nosev ]   [ normal_z ]
  18++D105              ;
  19++D105              ;                         [ [x y z] . sidev + normal_x ]
  20++D105              ;                       = [ [x y z] . roofv + normal_y ]
  21++D105              ;                         [ [x y z] . nosev + normal_z ]
  22++D105              ;
  23++D105              ; so
  24++D105              ;              visibility = [ [x y z] . sidev + normal_x ]   [ normal_x ]
  25++D105              ;                            [ [x y z] . roofv + normal_y ] . [ normal_y ]
  26++D105              ;                           [ [x y z] . nosev + normal_z ]   [ normal_z ]
  27++D105              ;
  28++D105              ; where face is visible if visibility < 0
  29++D105              ;
  30++D105              ;   so we set XX15 to [x y z] . sidev
  31++D105              ;                     [x y z] . roofv
  32++D105              ;                     [x y z] . nosev
  33++D105              ;
  34++D105
  35++D105
  36++D105
  37++D105 3A 8D C0     ScaleDrawcam:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
  38++D108                                      JumpIfAIsZero .ScaleDone            ;
  38++D108 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  38++D109 CA 35 D1    >                        jp	    z, .ScaleDone
  39++D10C 2A 86 C0                             ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
  40++D10F ED 5B 89 C0                          ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
  41++D113 ED 4B 8C C0                          ld      bc,(UBnkDrawCam0zLo)        ;
  42++D117 FD 2C        .ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
  43++D119                                      ShiftHLRight1                       ; divide cam position by 2
  43++D119 CB 3C       >			   srl h
  43++D11B CB 1D       >			   rr  l
  44++D11D                                      ShiftDERight1                       ;
  44++D11D CB 3A       >			   srl d
  44++D11F CB 1B       >			   rr  e
  45++D121                                      ShiftBCRight1                       ;
  45++D121 CB 38       >			   srl b
  45++D123 CB 19       >			   rr  c
  46++D125 78                                   ld      a,b                         ; loop if not scaled down
  47++D126                                      JumpIfAIsNotZero .ScaleNormalLoop     ;
  47++D126 A7          >                        and     a
  47++D127 C2 17 D1    >                        jp	    nz,.ScaleNormalLoop
  48++D12A 22 86 C0                             ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
  49++D12D ED 53 89 C0                          ld      (UBnkDrawCam0yLo),de        ;
  50++D131 ED 43 8C C0                          ld      (UBnkDrawCam0zLo),bc        ;
  51++D135 FD 7D        .ScaleDone:             ld      a,iyl
  52++D137 32 18 81                             ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
  53++D13A C9                                   ret
  54++D13B
  55++D13B              ;;--BackFaceCull:
  56++D13B              ;;--;debug:jp debug
  57++D13B              ;;--; DEBUG  force for now
  58++D13B              ;;--;                        ld     a,MaxVisibility                 ; max visibility                                               ;;;; default max visibility
  59++D13B              ;;--;                        ld     (LastNormalVisible),a           ; XX4                                                          ;;;;
  60++D13B              ;;--;
  61++D13B              ;;--; DEBUG
  62++D13B              ;;--                         ReturnIfMemisZero FaceCtX4Addr      ; get number of faces * 4      FaceCntX4 &  return if no faces
  63++D13B              ;;--                       ; break
  64++D13B              ;;--                        call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
  65++D13B              ;;--                        call    ScaleXX16Matrix197               ;#02; Normalise XX16
  66++D13B              ;;--                        call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
  67++D13B              ;;--                        call    InverseXX16                      ;#11; Invert rotation matrix
  68++D13B              ;;--
  69++D13B              ;;--.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
  70++D13B              ;;--                        ld      iyl,a                       ; iyl = scale factor
  71++D13B              ;;--; By this point XX18 = scaled draw cam and iyl = scale factor
  72++D13B              ;;--                        call    ScaleDrawcam
  73++D13B              ;;--                        call    CopyDrawCamToScaled
  74++D13B              ;;--.LL91:                  call    XX12EquNodeDotOrientation  ; xx12 = xx15 . XX16
  75++D13B              ;;--                        call    CopyXX12ScaledToXX18        ; now xx18 = xx15.xx16
  76++D13B              ;;--.PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
  77++D13B              ;;--                        ld      (varV),hl
  78++D13B              ;;--                        ld      a,(FaceCtX4Addr)                                        ; For each face
  79++D13B              ;;--                        srl     a                                                       ;
  80++D13B              ;;--                        srl     a                                                       ;
  81++D13B              ;;--                        ld      b,a                                                     ;
  82++D13B              ;;--                        xor     a
  83++D13B              ;;--                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
  84++D13B              ;;--ProcessNormalsLoop:     push    hl
  85++D13B              ;;--                        push    bc
  86++D13B              ;;--                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
  87++D13B              ;;--                        and     $1F                                                     ;     if normal visibility range  < XX4
  88++D13B              ;;--                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
  89++D13B              ;;--.LL86:                  jp  .LL87 ; force testing of normals
  90++D13B              ;;--                        jp      .FaceVisible
  91++D13B              ;;--; This bit needs to be added to force face visible
  92++D13B              ;;--.LL87:                  call    CopyFaceToXX12
  93++D13B              ;;--                        ld      a,(XX17)
  94++D13B              ;;--                        JumpIfALTNusng 4,.LL92
  95++D13B              ;;--.LL143:                 call    CopyXX18toXX15
  96++D13B              ;;--                        jp      .LL89
  97++D13B              ;;--.Ovflw:                 ld      a,(XX18)
  98++D13B              ;;--                        srl     a
  99++D13B              ;;--                        ld      (XX18),a
 100++D13B              ;;--                        ld      a,(XX18+6)
 101++D13B              ;;--                        srl     a
 102++D13B              ;;--                        ld      (XX18+6),a
 103++D13B              ;;--                        ld      a,(XX18+3)
 104++D13B              ;;--                        srl     a
 105++D13B              ;;--                        ld      (XX18+3),a
 106++D13B              ;;--                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 107++D13B              ;;--.LL92:                   ld      b,a
 108++D13B              ;;--                        ldCopyByte  XX12,   UBnkXScaled
 109++D13B              ;;--                        ldCopyByte  XX12+2, UBnkYScaled
 110++D13B              ;;--                        ldCopyByte  XX12+4, UBnkZScaled
 111++D13B              ;;--.LL93                   dec     b
 112++D13B              ;;--                        jp      m, .LL94
 113++D13B              ;;--.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 114++D13B              ;;--                        ShiftMem8Right1 UBnkYScaled
 115++D13B              ;;--                        ShiftMem8Right1 UBnkZScaled
 116++D13B              ;;--                        dec     b
 117++D13B              ;;--                        jp      p,.LL93Loop
 118++D13B              ;;--; Add normal to XX15
 119++D13B              ;;--.LL94:                  ldCopyByte  UBnkZScaled,     varR
 120++D13B              ;;--                        ldCopyByte  UBnkYScaled,     varS
 121++D13B              ;;--                        ldCopyByte  UBnkDrawCam0zLo, varQ
 122++D13B              ;;--                        ld      a,(XX18+8)
 123++D13B              ;;--                        call    SAEquSRPlusAQ
 124++D13B              ;;--                        jp      c,.Ovflw
 125++D13B              ;;--                        ld      (UBnkZScaled),a
 126++D13B              ;;--                        ldCopyByte  varS,            UBnkZScaledSign
 127++D13B              ;;--                        ldCopyByte  UBnkXScaled,     varR
 128++D13B              ;;--                        ldCopyByte  UBnkXScaledSign, varS
 129++D13B              ;;--                        ldCopyByte  UBnkDrawCam0xLo, varQ
 130++D13B              ;;--                        ld      a,(UBnkDrawCam0xSgn)
 131++D13B              ;;--                        call    SAEquSRPlusAQ
 132++D13B              ;;--                        jp      c,.Ovflw
 133++D13B              ;;--                        ld      (UBnkXScaled),a
 134++D13B              ;;--                        ldCopyByte  varS,            UBnkXScaledSign
 135++D13B              ;;--                        ldCopyByte  UBnkYScaled,     varR
 136++D13B              ;;--                        ldCopyByte  UBnkYScaledSign, varS
 137++D13B              ;;--                        ld      a,(UBnkDrawCam0ySgn)
 138++D13B              ;;--                        call    SAEquSRPlusAQ
 139++D13B              ;;--                        jp      c,.Ovflw
 140++D13B              ;;--                        ld      (UBnkYScaled),a
 141++D13B              ;;--                        ldCopyByte   varS, UBnkYScaledSign
 142++D13B              ;;--; calculate dot product:
 143++D13B              ;;--.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 144++D13B              ;;--                        ld      a,(UBnkXScaled)
 145++D13B              ;;--                        call    AequAmulQdiv256
 146++D13B              ;;--                        ld      (varT),a
 147++D13B              ;;--                        ld      a,(UBnkXX12xSign)
 148++D13B              ;;--                        ld      hl,UBnkXScaledSign
 149++D13B              ;;--                        xor     (hl)
 150++D13B              ;;--                        ld      (varS),a
 151++D13B              ;;--                        ldCopyByte  UBnkXX12yLo, varQ
 152++D13B              ;;--                        ld      a,(UBnkYScaled)
 153++D13B              ;;--                        call    AequAmulQdiv256
 154++D13B              ;;--                        ld      (varQ),a
 155++D13B              ;;--                        ldCopyByte  varT,varR
 156++D13B              ;;--                        ld      a,  (UBnkXX12ySign)
 157++D13B              ;;--                        ld      hl, UBnkYScaledSign
 158++D13B              ;;--                        xor     (hl)
 159++D13B              ;;--                        call    SAEquSRPlusAQ
 160++D13B              ;;--                        ld      (varT),a
 161++D13B              ;;--                        ldCopyByte  UBnkXX12zLo, varQ
 162++D13B              ;;--                        ld      a,  (UBnkZScaled)
 163++D13B              ;;--                        call    AequAmulQdiv256
 164++D13B              ;;--                        ld      (varQ),a
 165++D13B              ;;--                        ldCopyByte  varT, varR
 166++D13B              ;;--                        ld      a,  (UBnkZScaledSign)
 167++D13B              ;;--                        ld      hl, UBnkXX12zSign
 168++D13B              ;;--                        xor     (hl)
 169++D13B              ;;--                        call    SAEquSRPlusAQ           ; now A = dot product
 170++D13B              ;;--                        test    $80
 171++D13B              ;;--                        jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 172++D13B              ;;--.FaceNotVisible:         ld          a,(CurrentNormIdx)
 173++D13B              ;;--                        call        SetFaceAHidden                                      ;           set face invisible
 174++D13B              ;;--                        jp          ProcessNormalLoopEnd                                ;        end if
 175++D13B              ;;--.FaceVisible:            ld          a,(CurrentNormIdx)
 176++D13B              ;;--                        call        SetFaceAVisible
 177++D13B              ;;--ProcessNormalLoopEnd:   ld          hl, CurrentNormIdx
 178++D13B              ;;--                        inc         (hl)                    ; move index pointer up by one
 179++D13B              ;;--                        pop         bc
 180++D13B              ;;--                        pop         hl                      ; get normal data pointer back
 181++D13B              ;;--                        ld          a,4
 182++D13B              ;;--                        add         hl,a                    ; move to next normal entry
 183++D13B              ;;--                        ld          (varV),hl               ; save as we need it again
 184++D13B              ;;--                        dec         b
 185++D13B              ;;--                        jp          nz,ProcessNormalsLoop
 186++D13B              ;;--                        ret
 187++D13B
 188++D13B
 189++D13B
 190++D13B
 191++D13B              ;;;;;                        call    CopyFaceToXX15                                          ;        Get Face data into XX12
 192++D13B              ;;;;;                        ld      a,(UBnkXScaledSign)
 193++D13B              ;;;;;                        call    XX12EquNodeDotOrientation
 194++D13B              ;;;;;                        ld      a,(UBnkXX12zSign)
 195++D13B              ;;;;;                        test    $80
 196++D13B              ;;;;;                        jp      nz, FaceVisible
 197++D13B              ;;;;;.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
 198++D13B              ;;;;;                        ld      iyl,a                       ; iyl = scale factor
 199++D13B              ;;;;;.ScaleNormal:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
 200++D13B              ;;;;;                        JumpIfAIsZero .ScaleDone            ;
 201++D13B              ;;;;;                        ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
 202++D13B              ;;;;;                        ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
 203++D13B              ;;;;;                        ld      bc,(UBnkDrawCam0zLo)        ;
 204++D13B              ;;;;;.ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
 205++D13B              ;;;;;                        ShiftHLRight1                       ; divide cam position by 2
 206++D13B              ;;;;;                        ShiftDERight1                       ;
 207++D13B              ;;;;;                        ShiftBCRight1                       ;
 208++D13B              ;;;;;                        ld      a,b                         ; loop if not scaled down
 209++D13B              ;;;;;                        JumpIfAIsNotZero .ScaleNormalLoop     ;
 210++D13B              ;;;;;                        ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
 211++D13B              ;;;;;                        ld      (UBnkDrawCam0yLo),de        ;
 212++D13B              ;;;;;                        ld      (UBnkDrawCam0zLo),bc        ;
 213++D13B              ;;;;;; By this point XX18 = scaled draw cam and iyl = scale factor
 214++D13B              ;;;;;.ScaleDone:             ld      a,iyl
 215++D13B              ;;;;;                        ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
 216++D13B              ;;;;;    call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
 217++D13B              ;;;;;    call    ScaleXX16Matrix197               ;#02; Normalise XX16
 218++D13B              ;;;;;;    call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
 219++D13B              ;;;;;    call    InverseXX16                      ;#11; Invert rotation matrix
 220++D13B              ;;;;;
 221++D13B              ;;;;;
 222++D13B              ;;;;;
 223++D13B              ;;;;;                        call    CopyXX18toXX15              ; copy DrawCam to Xx15
 224++D13B              ;;;;;                        call    XX12EquNodeDotOrientation   ; Xx12 = XX15 (face normal) dot rotation matrix
 225++D13B              ;;;;;                        call    CopyXX12ScaledToXX18              ; now XX18 = dot product
 226++D13B              ;;;;;.ProcessNormals:        ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 227++D13B              ;;;;;                        ld      (varV),hl
 228++D13B              ;;;;;                        ld      a,(FaceCtX4Addr)                                        ; For each face
 229++D13B              ;;;;;                        srl     a                                                       ;
 230++D13B              ;;;;;                        srl     a                                                       ;
 231++D13B              ;;;;;                        ld      b,a                                                     ;
 232++D13B              ;;;;;                        xor     a
 233++D13B              ;;;;;                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
 234++D13B              ;;;;;.ProcessNormalsLoop:    push    hl
 235++D13B              ;;;;;                        push    bc
 236++D13B              ;;;;;                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
 237++D13B              ;;;;;                        and     $1F                                                     ;     if normal visibility range  < XX4
 238++D13B              ;;;;;                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
 239++D13B              ;;;;;.CheckFaceVisibility:   call    CopyFaceToXX12              ; Get Face data into XX12
 240++D13B              ;;;;;                        ld      a,(varXX17)                  ; if scale factor < 4 then skip next bit
 241++D13B              ;;;;;                        JumpIfALTNusng 4,.LL92
 242++D13B              ;;;;;.LargeScaleFactor:      call    CopyXX18toXX15
 243++D13B              ;;;;;                        jp      .LL89
 244++D13B              ;;;;;.Ovflw:                 ld      a,(XX18)
 245++D13B              ;;;;;                        srl     a
 246++D13B              ;;;;;                        ld      (XX18),a
 247++D13B              ;;;;;                        ld      a,(XX18+6)
 248++D13B              ;;;;;                        srl     a
 249++D13B              ;;;;;                        ld      (XX18+6),a
 250++D13B              ;;;;;                        ld      a,(XX18+3)
 251++D13B              ;;;;;                        srl     a
 252++D13B              ;;;;;                        ld      (XX18+3),a
 253++D13B              ;;;;;                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 254++D13B              ;;;;;.LL92:                  ld      b,a
 255++D13B              ;;;;;                        ldCopyByte  XX12,   UBnkXScaled
 256++D13B              ;;;;;                        ldCopyByte  XX12+2, UBnkYScaled
 257++D13B              ;;;;;                        ldCopyByte  XX12+4, UBnkZScaled
 258++D13B              ;;;;;.LL93                   dec     b
 259++D13B              ;;;;;                        jp      m, .LL94
 260++D13B              ;;;;;.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 261++D13B              ;;;;;                        ShiftMem8Right1 UBnkYScaled
 262++D13B              ;;;;;                        ShiftMem8Right1 UBnkZScaled
 263++D13B              ;;;;;                        dec     b
 264++D13B              ;;;;;                        jp      p,.LL93Loop
 265++D13B              ;;;;;.LL94:                  ldCopyByte  UBnkZScaled,     varR
 266++D13B              ;;;;;                        ldCopyByte  UBnkYScaled,     varS
 267++D13B              ;;;;;                        ldCopyByte  UBnkDrawCam0zLo, varQ
 268++D13B              ;;;;;                        ld      a,(XX18+8)
 269++D13B              ;;;;;                        call    SAEquSRPlusAQ
 270++D13B              ;;;;;                        jp      c,.Ovflw
 271++D13B              ;;;;;                        ld      (UBnkZScaled),a
 272++D13B              ;;;;;                        ldCopyByte  varS,            UBnkZScaledSign
 273++D13B              ;;;;;                        ldCopyByte  UBnkXScaled,     varR
 274++D13B              ;;;;;                        ldCopyByte  UBnkXScaledSign, varS
 275++D13B              ;;;;;                        ldCopyByte  UBnkDrawCam0xLo, varQ
 276++D13B              ;;;;;                        ld      a,(UBnkDrawCam0xSgn)
 277++D13B              ;;;;;                        call    SAEquSRPlusAQ
 278++D13B              ;;;;;                        jp      c,.Ovflw
 279++D13B              ;;;;;                        ld      (UBnkXScaled),a
 280++D13B              ;;;;;                        ldCopyByte  varS,            UBnkXScaledSign
 281++D13B              ;;;;;                        ldCopyByte  UBnkYScaled,     varR
 282++D13B              ;;;;;                        ldCopyByte  UBnkYScaledSign, varS
 283++D13B              ;;;;;                        ld      a,(UBnkDrawCam0ySgn)
 284++D13B              ;;;;;                        call    SAEquSRPlusAQ
 285++D13B              ;;;;;                        jp      c,.Ovflw
 286++D13B              ;;;;;                        ld      (UBnkYScaled),a
 287++D13B              ;;;;;                        ldCopyByte   varS, UBnkYScaledSign
 288++D13B              ;;;;;.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 289++D13B              ;;;;;                        ld      a,(UBnkXScaled)
 290++D13B              ;;;;;                        call    AequAmulQdiv256
 291++D13B              ;;;;;                        ld      (varT),a
 292++D13B              ;;;;;                        ld      a,(UBnkXX12xSign)
 293++D13B              ;;;;;                        ld      hl,UBnkXScaledSign
 294++D13B              ;;;;;                        xor     (hl)
 295++D13B              ;;;;;                        ld      (varS),a
 296++D13B              ;;;;;                        ldCopyByte  UBnkXX12yLo, varQ
 297++D13B              ;;;;;                        ld      a,(UBnkYScaled)
 298++D13B              ;;;;;                        call    AequAmulQdiv256
 299++D13B              ;;;;;                        ld      (varQ),a
 300++D13B              ;;;;;                        ldCopyByte  varT,varR
 301++D13B              ;;;;;                        ld      a,  (UBnkXX12ySign)
 302++D13B              ;;;;;                        ld      hl, UBnkYScaledSign
 303++D13B              ;;;;;                        xor     (hl)
 304++D13B              ;;;;;                        call    SAEquSRPlusAQ
 305++D13B              ;;;;;                        ld      (varT),a
 306++D13B              ;;;;;                        ldCopyByte  UBnkXX12zLo, varQ
 307++D13B              ;;;;;                        ld      a,  (UBnkZScaled)
 308++D13B              ;;;;;                        call    AequAmulQdiv256
 309++D13B              ;;;;;                        ld      (varQ),a
 310++D13B              ;;;;;                        ldCopyByte  varT, varR
 311++D13B              ;;;;;                        ld      a,  (UBnkZScaledSign)
 312++D13B              ;;;;;                        ld      hl, UBnkXX12zSign
 313++D13B              ;;;;;                        xor     (hl)
 314++D13B              ;;;;;                        call    SAEquSRPlusAQ           ; now A = dot product
 315++D13B              ;;;;;                        test    $80
 316++D13B              ;;;;;                        jr      nz,.FaceVisible
 317++D13B              ;;;;;.FaceNotVisible:        ld      a,(CurrentNormIdx)
 318++D13B              ;;;;;                        call    SetFaceAHidden                                      ;           set face invisible
 319++D13B              ;;;;;                        jp      .ProcessNormalLoopEnd                                ;        end if
 320++D13B              ;;;;;.FaceVisible:           ld      a,(CurrentNormIdx)
 321++D13B              ;;;;;                        call    SetFaceAVisible
 322++D13B              ;;;;;.ProcessNormalLoopEnd:   ld      hl, CurrentNormIdx
 323++D13B              ;;;;;                        inc         (hl)                    ; move index pointer up by one
 324++D13B              ;;;;;                        pop         bc
 325++D13B              ;;;;;                        pop         hl                      ; get normal data pointer back
 326++D13B              ;;;;;                        ld          a,4
 327++D13B              ;;;;;                        add         hl,a                    ; move to next normal entry
 328++D13B              ;;;;;                        ld          (varV),hl               ; save as we need it again
 329++D13B              ;;;;;                        dec         b
 330++D13B              ;;;;;                        jp          nz,.ProcessNormalsLoop
 331++D13B              ;;;;;                        ret                                 ; If Y >= XX20 all normals' visibilities set, onto Transpose. return
 332++D13B              ;;;;;
 333++D13B
 334++D13B
 335++D13B
 336++D13B 3A 18 C0     CheckVisible:           ld      a,(UBnKzsgn)                 ; Is the ship behind us
 337++D13E E6 80        .CheckBehind:           and     SignOnly8Bit                 ; which means z sign is negative
 338++D140 20 44                                jr      nz,.ShipNoDraw               ; .
 339++D142 2A 16 C0     .CheckViewPort:         ld      hl,(UBnKzlo)                 ; now check to see if its within 90 degree arc
 340++D145 7C                                   ld      a,h
 341++D146                                      JumpIfAGTENusng ShipMaxDistance, .ShipNoDraw
 341++D146 FE C0       >                        cp     ShipMaxDistance
 341++D148 D2 86 D1    >                        jp		nc,.ShipNoDraw
 342++D14B ED 5B 10 C0  .CheckXAxis:            ld      de,(UBnKxlo)                 ; if abs x > abx z then its out side of view port
 343++D14F CD F1 96                             call    compare16HLDE
 344++D152 38 32                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
 345++D154 ED 5B 13 C0  .CheckYAxis:            ld      de,(UBnKylo)                ; if abs y > abx z then its out side of view port
 346++D158 CD F1 96                             call    compare16HLDE
 347++D15B 38 29                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
 348++D15D              .CalculateXX4:          ShiftHLRight1                       ; hl = z pos / 8
 348++D15D CB 3C       >			   srl h
 348++D15F CB 1D       >			   rr  l
 349++D161                                      ShiftHLRight1                       ; .
 349++D161 CB 3C       >			   srl h
 349++D163 CB 1D       >			   rr  l
 350++D165                                      ShiftHLRight1                       ; .
 350++D165 CB 3C       >			   srl h
 350++D167 CB 1D       >			   rr  l
 351++D169 7C                                   ld      a,h
 352++D16A CB 3F                                srl     a                           ; if a / 16 <> 0 then ship is a dot
 353++D16C              .DrawAsDotCheck:        JumpIfNotZero   .ShipIsADot
 353++D16C C2 8C D1    >                        jp	nz,.ShipIsADot
 354++D16F                                      ; Check visbility distance
 355++D16F              .SetXX4Dist:            ;break
 356++D16F 7D                                   ld      a,l
 357++D170 1F                                   rra                                 ; l may have had bit 0 of h carried in
 358++D171 CB 3F                                srl     a                           ; so move it to bit 4 giving A as distance $000xxxxx
 359++D173 CB 3F                                srl     a
 360++D175 CB 3F                                srl     a
 361++D177 32 42 C0                             ld      (UBnkDrawAllFaces),a        ; XX4 = "all faces" distance
 362++D17A 3A 43 C0                             ld      a,(UBnkaiatkecm)            ; its visible but a dot
 363++D17D F6 40                                or      ShipIsVisible               ; Visible and not a dot
 364++D17F E6 F7                                and     ShipIsNotDot                ;
 365++D181 32 43 C0                             ld      (UBnkaiatkecm),a            ;
 366++D184                                      ClearCarryFlag
 366++D184 B7          >                        or a
 367++D185 C9                                   ret
 368++D186              .ShipNoDraw:            ClearMemBitN  UBnkaiatkecm  , ShipIsVisibleBitNbr ; Assume its hidden
 368++D186 21 43 C0    >                        ld      hl,UBnkaiatkecm
 368++D189 CB B6       >                        res     ShipIsVisibleBitNbr,(hl)
 369++D18B C9                                   ret
 370++D18C 3A 43 C0     .ShipIsADot:            ld      a,(UBnkaiatkecm)            ; its visible but a dot
 371++D18F F6 48                                or      ShipIsVisible | ShipIsDot   ;
 372++D191 32 43 C0                             ld      (UBnkaiatkecm),a            ;
 373++D194 C9                                   ret
 374++D195
 375++D195
 376++D195              ; TODO remove all teh processing of rotmat to load craft to camera as its already been done
 377++D195              CullV2:                 ReturnIfMemisZero FaceCtX4Addr      ;
 377++D195 3A 27 C3    >                        ld   a,(FaceCtX4Addr)
 377++D198 A7          >                        and a
 377++D199 C8          >                        ret    z
 378++D19A                                     ; break
 379++D19A CD E8 CB                             call    CopyRotmatToTransMat        ; XX16 = UBNKRotMat
 380++D19D CD EE 79                             call    ScaleXX16Matrix197          ; scale rotation matrix in XX16
 381++D1A0 CD AE CE                             call    LoadCraftToCamera           ; XX18 = camera
 382++D1A3                                      ;call    CopyCameraToXX15Signed      ; Copy the camera to XX15 as signed 15 bit
 383++D1A3 3A 2D C3     .BackfaceLoop:          ld      a,(QAddr)                   ;
 384++D1A6 FD 6F                                ld      iyl,a                       ; iyl = scale factor
 385++D1A8              ; By this point XX18 = scaled draw cam and iyl = scale factor
 386++D1A8 CD 05 D1                             call    ScaleDrawcam                ; XX18 = scaled camera XX17 = scale
 387++D1AB CD C7 CE                             call    CopyCameraToXX15Signed      ; Xx18 -> xx15 sign + 15 bit
 388++D1AE CD 45 79     .LL91:                  call    XX12EquNodeDotXX16          ; xx12 = Scaled Camera . Rotation matrix (Note Xx16 no Xx16 inv)
 389++D1B1 CD 3F CE                             call    CopyXX12ScaledToXX18        ; now xx18 = XX12 = xx15.xx16
 390++D1B4 21 ED C4     .PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 391++D1B7 22 14 80                             ld      (varV),hl
 392++D1BA 3A 27 C3                             ld      a,(FaceCtX4Addr)                                        ; For each face
 393++D1BD CB 3F                                srl     a                                              ;
 394++D1BF CB 3F                                srl     a                                              ;
 395++D1C1 47                                   ld      b,a                                            ;
 396++D1C2 AF                                   xor     a
 397++D1C3 32 04 D1                             ld      (CurrentNormIdx),a                                          ; used to increment up face incdex as b decrements
 398++D1C6 E5           .ProcessNormalsLoop:    push    hl
 399++D1C7 C5                                   push    bc
 400++D1C8 7E           .LL86:                  ld      a,(hl)                                         ; Get Face sign and visibility distance byte
 401++D1C9 E6 1F                                and     $1F                                            ; if normal visibility range  < XX4
 402++D1CB E5                                   push    hl
 403++D1CC 21 42 C0                             ld      hl,UBnkDrawAllFaces
 404++D1CF BE                                   cp      (hl)
 405++D1D0 E1                                   pop     hl
 406++D1D1 DA 16 D3                             jp      c,.FaceVisible              ; then we always draw
 407++D1D4              ; This bit needs to be added to force face visible
 408++D1D4 CD 89 D0     .LL87:                  call    CopyFaceToXX12              ; XX12 = normal (repolaced scale version) as a working copy
 409++D1D7 3A 18 81                             ld      a,(XX17)                    ; a = q scale XX17 cauclated by the call to ScaleDrawcam
 410++D1DA 47                                   ld      b,a
 411++D1DB                                      JumpIfALTNusng 4,.ScaleNormByXX17   ; if q >= 4 then is so big we don;t factor in + normal for dot product
 411++D1DB FE 04       >                        cp      4
 411++D1DD DA 18 D2    >                        jp		c, .ScaleNormByXX17
 412++D1E0 CD 89 CE     .LL143:                 call    CopyXX18toXX15              ; and we just set XX15 = scaled Camera dot rotation matrix
 413++D1E3 C3 A7 D2                             jp      .DoneScalingIntoXX15        ; Now Process XX12 normal
 414++D1E6 3A 86 C0     .Ovflw:                 ld      a,(UBnkDrawCam0xLo)         ; divide camera by 2 if overflow
 415++D1E9 CB 3F                                srl     a                           ; which is held in XX18
 416++D1EB 32 86 C0                             ld      (UBnkDrawCam0xLo),a         ; .
 417++D1EE 3A 8C C0                             ld      a,(UBnkDrawCam0zLo)         ; .
 418++D1F1 CB 3F                                srl     a                           ; .
 419++D1F3 32 8C C0                             ld      (UBnkDrawCam0zLo),a         ; .
 420++D1F6 3A 89 C0                             ld      a,(UBnkDrawCam0yLo)         ; .
 421++D1F9 CB 3F                                srl     a                           ; .
 422++D1FB 32 89 C0                             ld      (UBnkDrawCam0yLo),a        ; .
 423++D1FE 06 01        .ScaleXScaledAgain:     ld      b,1                         ; set scale to 1 so we divide original normal by 2 into face and try again and hope we didn't scaled down XX12 earlier so if we did then we must be in the do doo as the object was obscenely large and very close
 424++D200                                      ShiftMem8Right1 UBnkXScaled         ; Divide XX15 by 2^B
 424++D200 3A 92 C0    >                    ld      a,(UBnkXScaled)
 424++D203 CB 3F       >                    srl     a
 424++D205 32 92 C0    >                    ld      (UBnkXScaled),a
 425++D208                                      ShiftMem8Right1 UBnkYScaled         ;
 425++D208 3A 94 C0    >                    ld      a,(UBnkYScaled)
 425++D20B CB 3F       >                    srl     a
 425++D20D 32 94 C0    >                    ld      (UBnkYScaled),a
 426++D210                                      ShiftMem8Right1 UBnkZScaled         ;
 426++D210 3A 96 C0    >                    ld      a,(UBnkZScaled)
 426++D213 CB 3F       >                    srl     a
 426++D215 32 96 C0    >                    ld      (UBnkZScaled),a
 427++D218              ; if we jumped to here scale factor < 4 so we copy in normal to XX15 (scaled) LL92
 428++D218              .ScaleNormByXX17:       ;ld      b,a
 429++D218 CD 64 CE                             call    CopyXX12toXX15
 430++D21B 05           .LL93                   dec     b
 431++D21C FA 3B D2                             jp      m, .ScaledNorm
 432++D21F              .LL93Loop:              ShiftMem8Right1 UBnkXScaled        ; Divide XX15 by 2^B, I think this should be really XX12 and is a bug in the original code
 432++D21F 3A 92 C0    >                    ld      a,(UBnkXScaled)
 432++D222 CB 3F       >                    srl     a
 432++D224 32 92 C0    >                    ld      (UBnkXScaled),a
 433++D227                                      ShiftMem8Right1 UBnkYScaled        ;
 433++D227 3A 94 C0    >                    ld      a,(UBnkYScaled)
 433++D22A CB 3F       >                    srl     a
 433++D22C 32 94 C0    >                    ld      (UBnkYScaled),a
 434++D22F                                      ShiftMem8Right1 UBnkZScaled        ;
 434++D22F 3A 96 C0    >                    ld      a,(UBnkZScaled)
 434++D232 CB 3F       >                    srl     a
 434++D234 32 96 C0    >                    ld      (UBnkZScaled),a
 435++D237 05                                   dec     b                          ;
 436++D238 F2 1F D2                             jp      p,.LL93Loop                ; Now we have XX15 as scaled Normal, XX15 as camera, don;t really knwo why as cals work on XX12 and XX18
 437++D23B              .ScaledNorm:            ;ORIG CODE DOES NOT HAVE THIS call    CopyXX15ToXX12 ; DEBUG as XX15 shoudl be a sacled nromal
 438++D23B              ; Add normal to XX15
 439++D23B              ; if we jumped here direct from LL143 then XX15 = drawcam scaled by Q, XX12 = face normal unscaled, XX18 = drawcam scaled also
 440++D23B              ; if we jumped here via scaling       then XX15 = normal scaled by Q,  XX12 = face normal unscaled, XX16 = drawcam scaled
 441++D23B              ; if we hit an overflow               then XX15 = drawcam scaled by Q  XX12 = face normal unscaled, XX18 = (drawcam scaled / 2 ) / 2^ nbr overflows (if we cam in vai scaling then its a mess?
 442++D23B              ; So LL94 is wrong as it shoud be operating on XX12 not XX15
 443++D23B              .LL94:                  ldCopyByte UBnkZScaled, varR        ; ldCopyByte  UBnkZScaled,     varR  ; if we jumped direct XX15 = drawcam scaled, Xx12 = normal xx18 = drawcam
 443++D23B 3A 96 C0    >                        ld       a,(UBnkZScaled)
 443++D23E 32 12 81    >                        ld       (varR),a
 444++D241                                      ldCopyByte UBnkXX12zSign, varS      ; ldCopyByte  UBnkYScaled,     varS  ; if we did scaling then xx15 = norm scaled XX18 = drawcam
 444++D241 3A 9D C0    >                        ld       a,(UBnkXX12zSign)
 444++D244 32 13 81    >                        ld       (varS),a
 445++D247                                      ldCopyByte  UBnkDrawCam0zLo, varQ   ; AQ = drawcam Z signed
 445++D247 3A 8C C0    >                        ld       a,(UBnkDrawCam0zLo)
 445++D24A 32 11 81    >                        ld       (varQ),a
 446++D24D 3A 8E C0                             ld      a,(UBnkDrawCam0zSgn)        ; .
 447++D250 CD 3A 9A                             call    SAEquSRPlusAQ               ; SA = drawcam Z dot + z
 448++D253 DA E6 D1                             jp      c,.Ovflw
 449++D256 32 96 C0                             ld      (UBnkZScaled),a             ; XX15Z = SA
 450++D259                                      ldCopyByte  varS, UBnkZScaledSign   ;
 450++D259 3A 13 81    >                        ld       a,(varS)
 450++D25C 32 97 C0    >                        ld       (UBnkZScaledSign),a
 451++D25F                                      ldCopyByte  UBnkXScaled,     varR   ; SR = normal X
 451++D25F 3A 92 C0    >                        ld       a,(UBnkXScaled)
 451++D262 32 12 81    >                        ld       (varR),a
 452++D265                                      ldCopyByte  UBnkXX12xSign,   varS   ; .
 452++D265 3A 99 C0    >                        ld       a,(UBnkXX12xSign)
 452++D268 32 13 81    >                        ld       (varS),a
 453++D26B                                      ldCopyByte  UBnkDrawCam0xLo, varQ   ; AQ = drawcam x dot
 453++D26B 3A 86 C0    >                        ld       a,(UBnkDrawCam0xLo)
 453++D26E 32 11 81    >                        ld       (varQ),a
 454++D271 3A 88 C0                             ld      a,(UBnkDrawCam0xSgn)        ; .
 455++D274 CD 3A 9A                             call    SAEquSRPlusAQ               ; SA = normal x + drawcam x dot
 456++D277 DA E6 D1                             jp      c,.Ovflw
 457++D27A 32 92 C0                             ld      (UBnkXScaled),a             ; XX15Z = SA
 458++D27D                                      ldCopyByte  varS, UBnkXScaledSign   ; .
 458++D27D 3A 13 81    >                        ld       a,(varS)
 458++D280 32 93 C0    >                        ld       (UBnkXScaledSign),a
 459++D283                                      ldCopyByte  UBnkYScaled, varR       ; SR = normal Y
 459++D283 3A 94 C0    >                        ld       a,(UBnkYScaled)
 459++D286 32 12 81    >                        ld       (varR),a
 460++D289                                      ldCopyByte  UBnkXX12ySign, varS     ; .
 460++D289 3A 9B C0    >                        ld       a,(UBnkXX12ySign)
 460++D28C 32 13 81    >                        ld       (varS),a
 461++D28F                                      ldCopyByte  UBnkDrawCam0yLo, varQ   ; AQ = drawcam y dot
 461++D28F 3A 89 C0    >                        ld       a,(UBnkDrawCam0yLo)
 461++D292 32 11 81    >                        ld       (varQ),a
 462++D295 3A 8B C0                             ld      a,(UBnkDrawCam0ySgn)        ; .
 463++D298 CD 3A 9A                             call    SAEquSRPlusAQ               ; SA = normal y + drawcam y dot
 464++D29B DA E6 D1                             jp      c,.Ovflw                    ; .
 465++D29E 32 94 C0                             ld      (UBnkYScaled),a             ; XX15 Y = SA
 466++D2A1                                      ldCopyByte   varS, UBnkYScaledSign  ; .
 466++D2A1 3A 13 81    >                        ld       a,(varS)
 466++D2A4 32 95 C0    >                        ld       (UBnkYScaledSign),a
 467++D2A7              ; calculate dot product LL89
 468++D2A7              .DoneScalingIntoXX15:   ldCopyByte  UBnkXX12xLo, varQ       ; Q = norm X XX12
 468++D2A7 3A 98 C0    >                        ld       a,(UBnkXX12xLo)
 468++D2AA 32 11 81    >                        ld       (varQ),a
 469++D2AD 3A 92 C0                             ld      a,(UBnkXScaled)             ; A = XX15 X
 470++D2B0 CD A1 99                             call    AequAmulQdiv256             ; A = XX15 X * XX 12 X
 471++D2B3 32 2F 81                             ld      (varT),a                    ; T = XX15 X * XX 12 X
 472++D2B6 3A 99 C0                             ld      a,(UBnkXX12xSign)           ; S = sign of XX15 X * XX12 X
 473++D2B9 21 93 C0                             ld      hl,UBnkXScaledSign          ; .
 474++D2BC AE                                   xor     (hl)                        ; .
 475++D2BD 32 13 81                             ld      (varS),a                    ; .
 476++D2C0                                      ldCopyByte  UBnkXX12yLo, varQ       ; Q = norm Y XX12
 476++D2C0 3A 9A C0    >                        ld       a,(UBnkXX12yLo)
 476++D2C3 32 11 81    >                        ld       (varQ),a
 477++D2C6 3A 94 C0                             ld      a,(UBnkYScaled)             ; A = XX15 Y
 478++D2C9 CD A1 99                             call    AequAmulQdiv256             ; A = XX15 Y * XX 12 Y
 479++D2CC 32 11 81                             ld      (varQ),a                    ; Q = XX15 Y * XX 12 Y
 480++D2CF                                      ldCopyByte  varT,varR               ; R = XX15 X * XX 12 X
 480++D2CF 3A 2F 81    >                        ld       a,(varT)
 480++D2D2 32 12 81    >                        ld       (varR),a
 481++D2D5 3A 9B C0                             ld      a,  (UBnkXX12ySign)         ; A = sign of XX15 Y * XX 12 Y
 482++D2D8 21 95 C0                             ld      hl, UBnkYScaledSign         ; .
 483++D2DB AE                                   xor     (hl)                        ; .
 484++D2DC CD 3A 9A                             call    SAEquSRPlusAQ               ; SA = SR+AQ = (X calc) + (Y calc)
 485++D2DF 32 2F 81                             ld      (varT),a                    ; T = usigned (X calc) + (Y calc)
 486++D2E2                                      ldCopyByte  UBnkXX12zLo, varQ       ; Q = XX12 Z
 486++D2E2 3A 9C C0    >                        ld       a,(UBnkXX12zLo)
 486++D2E5 32 11 81    >                        ld       (varQ),a
 487++D2E8 3A 96 C0                             ld      a,  (UBnkZScaled)           ; A = XX15 Z
 488++D2EB CD A1 99                             call    AequAmulQdiv256             ; A = XX12 Z * XX15 Z
 489++D2EE 32 11 81                             ld      (varQ),a                    ; Q = XX12 Z * XX15 Z
 490++D2F1                                      ldCopyByte  varT, varR              ; R = usigned (X calc) + (Y calc)
 490++D2F1 3A 2F 81    >                        ld       a,(varT)
 490++D2F4 32 12 81    >                        ld       (varR),a
 491++D2F7 3A 97 C0                             ld      a,  (UBnkZScaledSign)       ; A = sign of XX12 Z * XX15 Z
 492++D2FA 21 9D C0                             ld      hl, UBnkXX12zSign           ; .
 493++D2FD AE                                   xor     (hl)                        ; .
 494++D2FE CD 3A 9A                             call    SAEquSRPlusAQ               ; SA = ((X+Y signed)) (Z signed)
 495++D301 FE 00                                cp      0                           ; was the result 0, if so then there are scenarios where SAEquSRPlusAQ can return -ve 0
 496++D303 28 08                                jr      z,.FaceNotVisible           ; in which case face is not visible
 497++D305 3A 13 81                             ld      a,(varS)                    ; if the cacl was a negative number then its visible
 498++D308 ED 27 80                             test    $80                         ; this should test S not A
 499++D30B 20 09                                jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 500++D30D 3A 04 D1     .FaceNotVisible:         ld          a,(CurrentNormIdx)
 501++D310 CD FC CC                             call        SetFaceAHidden                                      ;           set face invisible
 502++D313 C3 1C D3                             jp          .ProcessNormalLoopEnd                                ;        end if
 503++D316 3A 04 D1     .FaceVisible:            ld          a,(CurrentNormIdx)
 504++D319 CD F3 CC                             call        SetFaceAVisible
 505++D31C 21 04 D1     .ProcessNormalLoopEnd:  ld          hl, CurrentNormIdx
 506++D31F 34                                   inc         (hl)                    ; move index pointer up by one
 507++D320 C1                                   pop         bc
 508++D321 E1                                   pop         hl                      ; get normal data pointer back
 509++D322 3E 04                                ld          a,4
 510++D324 ED 31                                add         hl,a                    ; move to next normal entry
 511++D326 22 14 80                             ld          (varV),hl               ; save as we need it again
 512++D329 05                                   dec         b
 513++D32A C2 C6 D1                             jp          nz,.ProcessNormalsLoop
 514++D32D C9                                   ret
 515++D32E
# file closed: ././ModelRender/BackfaceCull.asm
1115+ D32E              ;--------------------------------------------------------------------------------------------------------
1116+ D32E              ; Process edges
1117+ D32E              ; .....................................................
1118+ D32E              TransposeNodeVal:   MACRO arg0?
1119+ D32E ~                    ldCopyByte  UBnK\0sgn,Ubnk\1PointSign           ; UBnkXSgn => XX15+2 x sign
1120+ D32E ~                    ld          bc,(UBnkXX12\0Lo)                   ; c = lo, b = sign   XX12XLoSign
1121+ D32E ~                    xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1122+ D32E ~                    jp          m,NodeNegative\1                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1123+ D32E ~            ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1124+ D32E ~            NodeXPositive\1
1124+ D32E ~
1125+ D32E ~                    ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1126+ D32E ~                    ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1127+ D32E ~                    ld          hl,(UBnK\0lo)                       ; hl = XX1 UBNKxLo
1128+ D32E ~                    ld          h,0                                 ; but we don;t want the sign
1129+ D32E ~                    add         hl,bc                               ; its a 16 bit add
1130+ D32E ~                    ld          (Ubnk\1Point),hl                    ; And written to XX15 0,1
1131+ D32E ~                    xor         a                                   ; we want to write 0 as sign bit (not in original code)
1132+ D32E ~                    ld          (UbnkXPointSign),a
1133+ D32E ~                    jp          FinishedThisNode\1
1134+ D32E ~            ; If we get here then _sign and vertv_ have different signs so do subtract
1135+ D32E ~            NodeNegative\1
1135+ D32E ~
1136+ D32E ~            LL52\1
1136+ D32E ~                                                              ;
1137+ D32E ~                    ld          hl,(UBnK\0lo)                       ; Coord
1138+ D32E ~                    ld          bc,(UBnkXX12\0Lo)                   ; XX12
1139+ D32E ~                    ld          b,0                                 ; XX12 lo byte only
1140+ D32E ~                    sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1141+ D32E ~                    jp          p,SetAndMop\1                       ; if result is positive skip to write back
1142+ D32E ~            NodeXNegSignChange\1
1142+ D32E ~
1143+ D32E ~            ; If we get here the result is 2'c compliment so we reverse it and flip sign
1144+ D32E ~                    call        negate16hl                          ; Convert back to positive and flip sign
1145+ D32E ~                    ld          a,(Ubnk\1PointSign)                 ; XX15+2
1146+ D32E ~                    xor         $80                                 ; Flip bit 7
1147+ D32E ~                    ld          (Ubnk\1PointSign),a                 ; XX15+2
1148+ D32E ~            SetAndMop\1
1148+ D32E ~
1149+ D32E ~                    ld          (UBnK\0lo),hl                       ; XX15+0
1150+ D32E ~            FinishedThisNode\1
1151+ D32E                                  ENDM
1152+ D32E
1153+ D32E              ;--LL52 to LL55-----------------------------------------------------------------------------------------------------------------
1154+ D32E
1155+ D32E              TransposeXX12NodeToXX15:
1156+ D32E                      ldCopyByte  UBnKxsgn,UbnkXPointSign           ; UBnkXSgn => XX15+2 x sign
1156+ D32E 3A 12 C0    >                        ld       a,(UBnKxsgn)
1156+ D331 32 94 C0    >                        ld       (UbnkXPointSign),a
1157+ D334 ED 4B 98 C0          ld          bc,(UBnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
1158+ D338 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1159+ D339 FA 4F D3             jp          m,NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1160+ D33C              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1161+ D33C              NodeXPositiveX:
1162+ D33C 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1163+ D33D 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1164+ D33F 2A 10 C0             ld          hl,(UBnKxlo)                       ; hl = XX1 UBNKxLo
1165+ D342 26 00                ld          h,0                                 ; but we don;t want the sign
1166+ D344 09                   add         hl,bc                               ; its a 16 bit add
1167+ D345 22 92 C0             ld          (UbnkXPoint),hl                    ; And written to XX15 0,1
1168+ D348 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
1169+ D349 32 94 C0             ld          (UbnkXPointSign),a
1170+ D34C C3 6B D3             jp          FinishedThisNodeX
1171+ D34F              ; If we get here then _sign and vertv_ have different signs so do subtract
1172+ D34F              NodeNegativeX:
1173+ D34F              LL52X:                                                 ;
1174+ D34F 2A 10 C0             ld          hl,(UBnKxlo)                       ; Coord
1175+ D352 ED 4B 98 C0          ld          bc,(UBnkXX12xLo)                   ; XX12
1176+ D356 06 00                ld          b,0                                 ; XX12 lo byte only
1177+ D358 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1178+ D35A F2 68 D3             jp          p,SetAndMopX                       ; if result is positive skip to write back
1179+ D35D              NodeXNegSignChangeX:
1180+ D35D              ; If we get here the result is 2'c compliment so we reverse it and flip sign
1181+ D35D CD 07 97             call        negate16hl                          ; Convert back to positive and flip sign
1182+ D360 3A 94 C0             ld          a,(UbnkXPointSign)                 ; XX15+2
1183+ D363 EE 80                xor         $80                                 ; Flip bit 7
1184+ D365 32 94 C0             ld          (UbnkXPointSign),a                 ; XX15+2
1185+ D368              SetAndMopX:
1186+ D368 22 10 C0             ld          (UBnKxlo),hl                       ; XX15+0
1187+ D36B              FinishedThisNodeX:
1188+ D36B
1189+ D36B              LL53:
1190+ D36B
1191+ D36B                      ldCopyByte  UBnKysgn,UbnkYPointSign           ; UBnkXSgn => XX15+2 x sign
1191+ D36B 3A 15 C0    >                        ld       a,(UBnKysgn)
1191+ D36E 32 97 C0    >                        ld       (UbnkYPointSign),a
1192+ D371 ED 4B 9A C0          ld          bc,(UBnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
1193+ D375 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1194+ D376 FA 8C D3             jp          m,NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1195+ D379              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1196+ D379              NodeXPositiveY:
1197+ D379 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1198+ D37A 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1199+ D37C 2A 13 C0             ld          hl,(UBnKylo)                       ; hl = XX1 UBNKxLo
1200+ D37F 26 00                ld          h,0                                 ; but we don;t want the sign
1201+ D381 09                   add         hl,bc                               ; its a 16 bit add
1202+ D382 22 95 C0             ld          (UbnkYPoint),hl                    ; And written to XX15 0,1
1203+ D385 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
1204+ D386 32 94 C0             ld          (UbnkXPointSign),a
1205+ D389 C3 A8 D3             jp          FinishedThisNodeY
1206+ D38C              ; If we get here then _sign and vertv_ have different signs so do subtract
1207+ D38C              NodeNegativeY:
1208+ D38C              LL52Y:                                                 ;
1209+ D38C 2A 13 C0             ld          hl,(UBnKylo)                       ; Coord
1210+ D38F ED 4B 9A C0          ld          bc,(UBnkXX12yLo)                   ; XX12
1211+ D393 06 00                ld          b,0                                 ; XX12 lo byte only
1212+ D395 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1213+ D397 F2 A5 D3             jp          p,SetAndMopY                       ; if result is positive skip to write back
1214+ D39A              NodeXNegSignChangeY:
1215+ D39A              ; If we get here the result is 2'c compliment so we reverse it and flip sign
1216+ D39A CD 07 97             call        negate16hl                          ; Convert back to positive and flip sign
1217+ D39D 3A 97 C0             ld          a,(UbnkYPointSign)                 ; XX15+2
1218+ D3A0 EE 80                xor         $80                                 ; Flip bit 7
1219+ D3A2 32 97 C0             ld          (UbnkYPointSign),a                 ; XX15+2
1220+ D3A5              SetAndMopY:
1221+ D3A5 22 13 C0             ld          (UBnKylo),hl                       ; XX15+0
1222+ D3A8              FinishedThisNodeY:
1223+ D3A8
1224+ D3A8
1225+ D3A8              TransposeZ:
1226+ D3A8              LL55:                                                   ; Both y signs arrive here, Onto z                                          ;;;
1227+ D3A8 3A 9D C0             ld          a,(UBnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
1228+ D3AB                      JumpOnBitSet a,7,NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
1228+ D3AB CB 7F       >                        bit 	7,a
1228+ D3AD C2 C1 D3    >                        jp      nz,NegativeNodeZ
1229+ D3B0 3A 9C C0             ld          a,(UBnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
1230+ D3B3 2A 16 C0             ld          hl,(UBnKzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
1231+ D3B6 ED 31                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
1232+ D3B8 7D                   ld          a,l
1233+ D3B9 32 2F 81             ld          (varT),a                            ;                                                                           ;;;
1234+ D3BC 7C                   ld          a,h
1235+ D3BD 32 10 81             ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
1236+ D3C0 C9                   ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
1237+ D3C1              ; Doing additions and scalings for each visible node around here                                                                    ;;;
1238+ D3C1              NegativeNodeZ:
1239+ D3C1              LL56:                                                   ; Enter XX12+5 -ve Z node case  from above                                  ;;;
1240+ D3C1 2A 16 C0             ld          hl,(UBnKzlo)                        ; INWK+6 \ z org lo                                                         ;;;
1241+ D3C4 ED 4B 9C C0          ld          bc,(UBnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
1242+ D3C8 06 00                ld          b,0                                 ; upper byte will be garbage
1243+ D3CA                      ClearCarryFlag
1243+ D3CA B7          >                        or a
1244+ D3CB ED 42                sbc         hl,bc                               ; 6502 used carry flag compliment
1245+ D3CD 7D                   ld          a,l
1246+ D3CE 32 2F 81             ld          (varT),a                            ; t = result low
1247+ D3D1 7C                   ld          a,h
1248+ D3D2 32 10 81             ld          (varU),a                            ; u = result high
1249+ D3D5 E2 E2 D3             jp          po,MakeNodeClose                    ; no overflow to parity would be clear
1250+ D3D8              LL56Overflow:
1251+ D3D8 FE 00                cp          0                                   ; is varU 0?
1252+ D3DA 20 16                jr          nz,NodeAdditionsDone                ; Enter Node additions done, UT=z
1253+ D3DC 3A 2F 81             ld          a,(varT)                            ; T \ restore z lo
1254+ D3DF                      ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
1254+ D3DF FE 04       >                        cp    4
1254+ D3E1 D0          >                        ret	 nc
1255+ D3E2              MakeNodeClose:
1256+ D3E2              LL140:                                                  ; else make node close
1257+ D3E2 AF                   xor         a                                   ; hi This needs tuning to use a 16 bit variable
1258+ D3E3 32 10 81             ld          (varU),a                            ; U
1259+ D3E6 3E 04                ld          a,4                                 ; lo
1260+ D3E8 32 2F 81             ld          (varT),a                            ; T
1261+ D3EB C9                   ret
1262+ D3EC              ;--LL49-------------------------------------------------------------------------------------------------------------------------
1263+ D3EC              ProcessVisibleNode:
1264+ D3EC              RotateNode:                                                                                                                         ;;;
1265+ D3EC CD 0E CE             call        XX12EquXX15DotProductXX16                                                                                       ;;;           call      XX12=XX15.XX16
1266+ D3EF              LL52LL53LL54LL55
1267+ D3EF              TransposeNode:
1268+ D3EF CD 2E D3             call        TransposeXX12NodeToXX15
1269+ D3F2
1270+ D3F2              ; ......................................................                                                         ;;;
1271+ D3F2              NodeAdditionsDone:
1272+ D3F2              Scale16BitTo8Bit:
1273+ D3F2              LL57:                                                   ; Enter Node additions done, z=T.U set up from LL55
1274+ D3F2 3A 10 81             ld          a,(varU)                            ; U \ z hi
1275+ D3F5 21 93 C0             ld          hl,UbnkXPointHi
1276+ D3F8 B6                   or          (hl)                                ; XX15+1    \ x hi
1277+ D3F9 21 96 C0             ld          hl,UbnkYPointHi
1278+ D3FC B6                   or          (hl)                                ; XX15+4    \ y hi
1279+ D3FD              AreXYZHiAllZero:
1280+ D3FD 28 2B                jr          z,NodeScalingDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
1281+ D3FF              DivideXYZBy2:
1282+ D3FF                      ShiftMem16Right1    UbnkXPoint                  ; XX15[0,1]
1282+ D3FF 2A 92 C0    >                    ld    hl,(UbnkXPoint)
1282+ D402 CB 3C       >                    srl   h
1282+ D404 CB 1D       >                    rr    l
1282+ D406 22 92 C0    >                    ld    (UbnkXPoint),hl
1283+ D409                      ShiftMem16Right1    UbnkYPoint                  ; XX15[3,4]
1283+ D409 2A 95 C0    >                    ld    hl,(UbnkYPoint)
1283+ D40C CB 3C       >                    srl   h
1283+ D40E CB 1D       >                    rr    l
1283+ D410 22 95 C0    >                    ld    (UbnkYPoint),hl
1284+ D413 3A 10 81             ld          a,(varU)                            ; U \ z hi
1285+ D416 67                   ld          h,a
1286+ D417 3A 2F 81             ld          a,(varT)                            ; T \ z lo
1287+ D41A 6F                   ld          l,a
1288+ D41B                      ShiftHLRight1
1288+ D41B CB 3C       >			   srl h
1288+ D41D CB 1D       >			   rr  l
1289+ D41F 7C                   ld          a,h
1290+ D420 32 10 81             ld          (varU),a
1291+ D423 7D                   ld          a,l
1292+ D424 32 2F 81             ld          (varT),a                            ; T \ z lo
1293+ D427 C3 F2 D3             jp          Scale16BitTo8Bit                    ; loop U
1294+ D42A              NodeScalingDone:
1295+ D42A              LL60:                                                   ; hi U rolled to 0, exited loop above.
1296+ D42A              ProjectNodeToScreen:
1297+ D42A                      ldCopyByte  varT,varQ                           ; T =>  Q   \ zdist lo
1297+ D42A 3A 2F 81    >                        ld       a,(varT)
1297+ D42D 32 11 81    >                        ld       (varQ),a
1298+ D430 3A 92 C0             ld          a,(UbnkXPointLo)                    ; XX15  \ rolled x lo
1299+ D433 21 11 81             ld          hl,varQ
1300+ D436 BE                   cp          (hl)                                ; Q
1301+ D437                      JumpIfALTusng DoSmallAngle                      ; LL69 if xdist < zdist hop over jmp to small x angle
1301+ D437 DA 40 D4    >                        jp		c,DoSmallAngle
1302+ D43A CD 41 9B             call        RequAdivQ                           ; LL61  \ visit up  R = A/Q = x/z
1303+ D43D C3 48 D4             jp          SkipSmallAngle                      ; LL65  \ hop over small xangle
1304+ D440              DoSmallAngle:                                           ; small x angle
1305+ D440              LL69:
1306+ D440              ; TODO check if we need to retain BC as this trashes it
1307+ D440              ;Input: BC = Dividend, DE = Divisor, HL = 0
1308+ D440              ;Output: BC = Quotient, HL = Remainder
1309+ D440 47                   ld      b,a
1310+ D441 CD 12 95             call    DIV16UNDOC
1311+ D444 79                   ld      a,c
1312+ D445 32 12 81             ld      (varR),a
1313+ D448               ;;;       call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1314+ D448              SkipSmallAngle:
1315+ D448              ScaleX:
1316+ D448              LL65:                                                   ; both continue for scaling based on z
1317+ D448 3A 94 C0             ld          a,(UbnkXPointSign)                  ; XX15+2 \ sign of X dist
1318+ D44B                      JumpOnBitSet a,7,NegativeXPoint                 ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1318+ D44B CB 7F       >                        bit 	7,a
1318+ D44D C2 60 D4    >                        jp      nz,NegativeXPoint
1319+ D450              ; ......................................................
1320+ D450              PositiveXPoint:
1321+ D450 3A 12 81             ld          a,(varR)
1322+ D453 6F                   ld          l,a
1323+ D454 3A 10 81             ld          a,(varU)
1324+ D457 67                   ld          h,a
1325+ D458 3E 80                ld          a,ScreenCenterX
1326+ D45A ED 31                add         hl,a
1327+ D45C EB                   ex          de,hl
1328+ D45D C3 70 D4             jp          StoreXPoint
1329+ D460              NegativeXPoint:
1330+ D460              LL62:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1331+ D460 3A 12 81             ld          a,(varR)
1332+ D463 6F                   ld          l,a
1333+ D464 3A 10 81             ld          a,(varU)
1334+ D467 67                   ld          h,a
1335+ D468 0E 80                ld          c,ScreenCenterX
1336+ D46A 06 00                ld          b,0
1337+ D46C                      ClearCarryFlag
1337+ D46C B7          >                        or a
1338+ D46D ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1339+ D46F EB                   ex          de,hl
1340+ D470              StoreXPoint:                                            ; also from LL62, XX3 node heap has xscreen node so far.
1341+ D470 FD 73 00             ld          (iy+0),e                            ; Update X Point
1342+ D473 FD 72 01             ld          (iy+1),d                            ; Update X Point
1343+ D476 FD 23                inc         iy
1344+ D478 FD 23                inc         iy
1345+ D47A              ; ......................................................
1346+ D47A              LL66:
1347+ D47A              ProcessYPoint:
1348+ D47A AF                   xor         a                                   ; y hi = 0
1349+ D47B 32 10 81             ld          (varU),a                            ; U
1350+ D47E                      ldCopyByte  varT,varQ                           ; Q \ zdist lo
1350+ D47E 3A 2F 81    >                        ld       a,(varT)
1350+ D481 32 11 81    >                        ld       (varQ),a
1351+ D484 3A 95 C0             ld          a,(UbnkYPointLo)                    ; XX15+3 \ rolled y low
1352+ D487 21 11 81             ld          hl,varQ
1353+ D48A BE                   cp          (hl)                                ; Q
1354+ D48B                      JumpIfALTusng SmallYHop                         ; if ydist < zdist hop to small yangle
1354+ D48B DA 94 D4    >                        jp		c,SmallYHop
1355+ D48E              SmallYPoint:
1356+ D48E CD 41 9B             call        RequAdivQ                           ; LL61  \ else visit up R = A/Q = y/z
1357+ D491 C3 97 D4             jp          SkipYScale                          ; LL68 hop over small y yangle
1358+ D494              SmallYHop:
1359+ D494              LL67:                                                   ; Arrive from LL66 above if XX15+3 < Q \ small yangle
1360+ D494 CD 1E 9B             call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1361+ D497              SkipYScale:
1362+ D497              LL68:                                                   ; both carry on, also arrive from LL66, yscaled based on z
1363+ D497 3A 97 C0             ld          a,(UbnkYPointSign)                  ; XX15+5 \ sign of X dist
1364+ D49A CB 7F                bit         7,a
1365+ D49C C2 AF D4             jp          nz,NegativeYPoint                   ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1366+ D49F              PositiveYPoint:
1367+ D49F 3A 12 81             ld          a,(varR)
1368+ D4A2 6F                   ld          l,a
1369+ D4A3 3A 10 81             ld          a,(varU)
1370+ D4A6 67                   ld          h,a
1371+ D4A7 3E 60                ld          a,ScreenHeightHalf
1372+ D4A9 ED 31                add         hl,a
1373+ D4AB EB                   ex          de,hl
1374+ D4AC C3 BF D4             jp          LL50
1375+ D4AF              NegativeYPoint:
1376+ D4AF              LL70:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1377+ D4AF 3A 12 81             ld          a,(varR)
1378+ D4B2 6F                   ld          l,a
1379+ D4B3 3A 10 81             ld          a,(varU)
1380+ D4B6 67                   ld          h,a
1381+ D4B7 0E 60                ld          c,ScreenHeightHalf
1382+ D4B9 06 00                ld          b,0
1383+ D4BB                      ClearCarryFlag
1383+ D4BB B7          >                        or a
1384+ D4BC ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1385+ D4BE EB                   ex          de,hl
1386+ D4BF              LL50:                                                   ; also from LL62, XX3 node heap has xscreen node so far.
1387+ D4BF FD 73 00             ld          (iy+0),e                            ; Update X Point
1388+ D4C2 FD 72 01             ld          (iy+1),d                            ; Update X Point
1389+ D4C5 FD 23                inc         iy
1390+ D4C7 FD 23                inc         iy
1391+ D4C9 C9                   ret
1392+ D4CA              ;--------------------------------------------------------------------------------------------------------
1393+ D4CA              ;;;     Byte 0 = X magnitide with origin at middle of ship
1394+ D4CA              ;;;     Byte 1 = Y magnitide with origin at middle of ship
1395+ D4CA              ;;;     Byte 2 = Z magnitide with origin at middle of ship
1396+ D4CA              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
1397+ D4CA              CopyNodeToXX15:
1398+ D4CA                      ldCopyByte  hl, UBnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1398+ D4CA 7E          >                        ld       a,(hl)
1398+ D4CB 32 92 C0    >                        ld       (UBnkXScaled),a
1399+ D4CE 23                   inc         hl
1400+ D4CF                      ldCopyByte  hl, UBnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1400+ D4CF 7E          >                        ld       a,(hl)
1400+ D4D0 32 94 C0    >                        ld       (UBnkYScaled),a
1401+ D4D3 23                   inc         hl
1402+ D4D4                      ldCopyByte  hl, UBnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1402+ D4D4 7E          >                        ld       a,(hl)
1402+ D4D5 32 96 C0    >                        ld       (UBnkZScaled),a
1403+ D4D8 23                   inc         hl
1404+ D4D9              PopulateXX15SignBits:
1405+ D4D9              ; Simplfied for debugging, needs optimising back to original DEBUG TODO
1406+ D4D9 7E                   ld          a,(hl)
1407+ D4DA 4F                   ld          c,a                                 ; copy sign and visibility to c
1408+ D4DB 47                   ld          b,a
1409+ D4DC E6 80                and         $80                                 ; keep high 3 bits
1410+ D4DE 32 93 C0             ld          (UBnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1411+ D4E1 78                   ld          a,b
1412+ D4E2 E6 40                and         $40
1413+ D4E4 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1414+ D4E6 32 95 C0             ld          (UBnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1415+ D4E9 78                   ld          a,b
1416+ D4EA E6 20                and         $20
1417+ D4EC CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1418+ D4EE CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1419+ D4F0 32 97 C0             ld          (UBnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1420+ D4F3 79                   ld          a,c                                 ; returns a with visibility sign byte
1421+ D4F4 E6 1F                and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
1422+ D4F6 32 2F 81             ld          (varT),a                            ; and store in varT as its needed later
1423+ D4F9 C9                   ret
1424+ D4FA
1425+ D4FA              ;;;     Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
1426+ D4FA              ;;;     Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
1427+ D4FA              ;..............................................................................................................................
1428+ D4FA              ProcessANode:                                           ; Start loop on Nodes for visibility, each node has 4 faces associated with ;;; For each node (point) in model                  ::LL48
1429+ D4FA              LL48GetScale:
1430+ D4FA 3A 00 80             ld          a,(LastNormalVisible)               ; get Normal visible range into e before we copy node
1431+ D4FD 5F                   ld          e,a
1432+ D4FE CD CA D4             call        CopyNodeToXX15
1433+ D501              LL48GetVertices:
1434+ D501              LL48GetVertSignAndVisDist:
1435+ D501                      JumpIfALTNusng e,NodeIsNotVisible               ; if XX4 > Visibility distance then vertext too far away , next vertex.                                             ;;;        goto LL50 (end of loop)
1435+ D501 BB          >                        cp      e
1435+ D502 DA 3F D5    >                        jp		c, NodeIsNotVisible
1436+ D505              CheckFace1:                                                                                                                         ;;;     if all FaceVisile[point face any of idx1,2,3 or 4] = 0
1437+ D505                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;     get point face idx from byte 4 & 5 of normal
1437+ D505 23          >                    inc         hl                                  ; vertex byte#1
1437+ D506 7E          >                    ld          a,(hl)                              ;
1437+ D507 32 0F 80    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1438+ D50A 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1439+ D50B E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1440+ D50D E5                   push        hl                                  ; we need to save HL                                                        ;;;
1441+ D50E                      ldHLIdxAToA UbnkFaceVisArray                    ; visibility at face 1                                                Byte 4;;;
1441+ D50E 21 BE C0    >                    ld          hl,UbnkFaceVisArray
1441+ D511 ED 31       >                    add         hl,a
1441+ D513 7E          >                    ld          a,(hl)
1442+ D514 E1                   pop         hl                                  ;                                                                           ;;;
1443+ D515                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1443+ D515 A7          >                        and     a
1443+ D516 C2 45 D5    >                        jp	    nz,NodeIsVisible
1444+ D519              CheckFace2:                                                                                                                         ;;;
1445+ D519 7A                   ld          a,d                                                                                                             ;;;
1446+ D51A ED 23                swapnib                                                                                                                     ;;;
1447+ D51C E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1448+ D51E                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1448+ D51E A7          >                        and     a
1448+ D51F C2 45 D5    >                        jp	    nz,NodeIsVisible
1449+ D522              CheckFace3:                                                                                                                         ;;;
1450+ D522                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;
1450+ D522 23          >                    inc         hl                                  ; vertex byte#1
1450+ D523 7E          >                    ld          a,(hl)                              ;
1450+ D524 32 0F 80    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1451+ D527 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1452+ D528 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1453+ D52A E5                   push        hl                                  ; we need to save HL                                                        ;;;
1454+ D52B                      ldHLIdxAToA UbnkFaceVisArray                  ; visibility at face 1                                                Byte 5;;;
1454+ D52B 21 BE C0    >                    ld          hl,UbnkFaceVisArray
1454+ D52E ED 31       >                    add         hl,a
1454+ D530 7E          >                    ld          a,(hl)
1455+ D531 E1                   pop         hl                                  ;                                                                           ;;;
1456+ D532                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1456+ D532 A7          >                        and     a
1456+ D533 C2 45 D5    >                        jp	    nz,NodeIsVisible
1457+ D536              CheckFace4:                                                                                                                         ;;;
1458+ D536 7A                   ld          a,d                                                                                                             ;;;
1459+ D537 ED 23                swapnib                                                                                                                     ;;;
1460+ D539 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1461+ D53B                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1461+ D53B A7          >                        and     a
1461+ D53C C2 45 D5    >                        jp	    nz,NodeIsVisible
1462+ D53F              NodeIsNotVisible:                                                                                                                   ;;;
1463+ D53F 01 04 00             ld          bc,4
1464+ D542 FD 09                add         iy,bc                               ; if not visible then move to next element in array anyway                  ;;;
1465+ D544                      ;;; Should we be loading FFFFFFFF into 4 bytes or just ignore?
1466+ D544 C9                   ret                                                                                                      ;;;        goto LL50 (end of loop)
1467+ D545              NodeIsVisible:
1468+ D545              LL49:
1469+ D545 CD EC D3             call        ProcessVisibleNode                  ; Process node to determine if it goes on heap
1470+ D548 C9                   ret
1471+ D549
1472+ D549
1473+ D549              ProjectNodeToEye:
1474+ D549 ED 4B 96 C0  	ld			bc,(UBnkZScaled)					; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
1475+ D54D 79           	ld			a,c                                 ;  so no need for a negative check
1476+ D54E 32 11 81     	ld			(varQ),a		                    ; VarQ = z
1477+ D551 3A 92 C0         ld          a,(UBnkXScaled)                     ; XX15	\ rolled x lo which is signed
1478+ D554 CD FB 94     	call		DIV16Amul256dCUNDOC					; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
1479+ D557 3A 93 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
1480+ D55A                  JumpOnBitSet a,7,EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1480+ D55A CB 7F       >                        bit 	7,a
1480+ D55C C2 67 D5    >                        jp      nz,EyeNegativeXPoint
1481+ D55F              EyePositiveXPoint:									; x was positive result
1482+ D55F 2E 80            ld          l,ScreenCenterX						;
1483+ D561 26 00            ld          h,0
1484+ D563 09               add         hl,bc								; hl = Screen Centre + X
1485+ D564 C3 6E D5         jp          EyeStoreXPoint
1486+ D567              EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
1487+ D567 2E 80            ld          l,ScreenCenterX
1488+ D569 26 00            ld          h,0
1489+ D56B                  ClearCarryFlag
1489+ D56B B7          >                        or a
1490+ D56C ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
1491+ D56E              EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1492+ D56E EB               ex          de,hl
1493+ D56F FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
1494+ D572 FD 72 01         ld          (iy+1),d                            ; Update X Point
1495+ D575              EyeProcessYPoint:
1496+ D575 ED 4B 96 C0  	ld			bc,(UBnkZScaled)					; Now process Y co-ordinate
1497+ D579 79           	ld			a,c
1498+ D57A 32 11 81     	ld			(varQ),a
1499+ D57D 3A 94 C0         ld          a,(UBnkYScaled)                     ; XX15	\ rolled x lo
1500+ D580 CD FB 94     	call		DIV16Amul256dCUNDOC	                ; a = Y scaled * 256 / zscaled
1501+ D583 3A 95 C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
1502+ D586                  JumpOnBitSet a,7,EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
1502+ D586 CB 7F       >                        bit 	7,a
1502+ D588 C2 93 D5    >                        jp      nz,EyeNegativeYPoint
1503+ D58B              EyePositiveYPoint:									; Y is positive so above the centre line
1504+ D58B 2E 60            ld          l,ScreenCenterY
1505+ D58D                  ClearCarryFlag
1505+ D58D B7          >                        or a
1506+ D58E ED 42            sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
1507+ D590 C3 98 D5         jp          EyeStoreYPoint
1508+ D593              EyeNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
1509+ D593 2E 60            ld          l,ScreenCenterY
1510+ D595 26 00            ld          h,0
1511+ D597 09               add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
1512+ D598              EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1513+ D598 EB               ex          de,hl
1514+ D599 FD 73 02         ld          (iy+2),e                            ; Update Y Point
1515+ D59C FD 72 03         ld          (iy+3),d                            ; Update Y Point
1516+ D59F C9               ret
1517+ D5A0
1518+ D5A0
1519+ D5A0
1520+ D5A0              ; Pitch and roll are 2 phases
1521+ D5A0              ; 1 - we apply our pitch and roll to the ship position
1522+ D5A0              ;       x -> x + alpha * (y - alpha * x)
1523+ D5A0              ;       y -> y - alpha * x - beta * z
1524+ D5A0              ;       z -> z + beta * (y - alpha * x - beta * z)
1525+ D5A0              ; which can be simplified as:
1526+ D5A0              ;       1. K2 = y - alpha * x
1527+ D5A0              ;       2. z = z + beta * K2
1528+ D5A0              ;       3. y = K2 - beta * z
1529+ D5A0              ;       4. x = x + alpha * y
1530+ D5A0              ; 2 - we apply our patch and roll to the ship orientation
1531+ D5A0              ;      Roll calculations:
1532+ D5A0              ;
1533+ D5A0              ;        nosev_y = nosev_y - alpha * nosev_x_hi
1534+ D5A0              ;        nosev_x = nosev_x + alpha * nosev_y_hi
1535+ D5A0              ;      Pitch calculations:
1536+ D5A0              ;
1537+ D5A0              ;        nosev_y = nosev_y - beta * nosev_z_hi
1538+ D5A0              ;        nosev_z = nosev_z + beta * nosev_y_hi
1539+ D5A0
1540+ D5A0
1541+ D5A0              ; ---------------------------------------------------------------------------------------------------------------------------------
1542+ D5A0                          INCLUDE "./Universe/Ships/ApplyMyRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyMyRollAndPitch.asm
   1++D5A0
   2++D5A0              ; Full version
   3++D5A0              ; 1. K2 = y - alpha * x
   4++D5A0              ; 2. z = z + beta * K2
   5++D5A0              ; 3. y = K2 - beta * z
   6++D5A0              ; 4. x = x + alpha * y
   7++D5A0
   8++D5A0
   9++D5A0              ApplyMyRollToNosev:     ApplyMyRollToVector ALPHA, UBnkrotmatNosevX, UBnkrotmatNosevY
   9++D5A0             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
   9++D5A0 3A 27 80    >                        ld       a,(ALPHA)
   9++D5A3 32 11 81    >                        ld       (varQ),a
   9++D5A6             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
   9++D5A6 2A 27 C0    >                        ld       hl,(UBnkrotmatNosevY)
   9++D5A9 22 12 81    >                        ld       (varR),hl
   9++D5AC             >                        ldCopyByte  UBnkrotmatNosevX, varP           ; set P to nosevX lo (may be redundant)
   9++D5AC 3A 25 C0    >                        ld       a,(UBnkrotmatNosevX)
   9++D5AF 32 0F 80    >                        ld       (varP),a
   9++D5B2 3A 26 C0    >                        ld a,(UBnkrotmatNosevX+1)                    ; Set A = -nosev_x_hi
   9++D5B5 EE 80       >                        xor $80                             ;
   9++D5B7 CD 51 92    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
   9++D5BA ED 53 27 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
   9++D5BE             >                        ldCopy2Byte UBnkrotmatNosevX, varR           ; Set (S R) = nosev_x
   9++D5BE 2A 25 C0    >                        ld       hl,(UBnkrotmatNosevX)
   9++D5C1 22 12 81    >                        ld       (varR),hl
   9++D5C4 3A 28 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
   9++D5C7 CD 51 92    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
   9++D5CA ED 53 25 C0 >                        ld  (UBnkrotmatNosevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  10++D5CE C9                                   ret
  11++D5CF              ApplyMyRollToSidev:     ApplyMyRollToVector ALPHA, UBnkrotmatSidevX, UBnkrotmatSidevY
  11++D5CF             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  11++D5CF 3A 27 80    >                        ld       a,(ALPHA)
  11++D5D2 32 11 81    >                        ld       (varQ),a
  11++D5D5             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
  11++D5D5 2A 1B C0    >                        ld       hl,(UBnkrotmatSidevY)
  11++D5D8 22 12 81    >                        ld       (varR),hl
  11++D5DB             >                        ldCopyByte  UBnkrotmatSidevX, varP           ; set P to nosevX lo (may be redundant)
  11++D5DB 3A 19 C0    >                        ld       a,(UBnkrotmatSidevX)
  11++D5DE 32 0F 80    >                        ld       (varP),a
  11++D5E1 3A 1A C0    >                        ld a,(UBnkrotmatSidevX+1)                    ; Set A = -nosev_x_hi
  11++D5E4 EE 80       >                        xor $80                             ;
  11++D5E6 CD 51 92    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  11++D5E9 ED 53 1B C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  11++D5ED             >                        ldCopy2Byte UBnkrotmatSidevX, varR           ; Set (S R) = nosev_x
  11++D5ED 2A 19 C0    >                        ld       hl,(UBnkrotmatSidevX)
  11++D5F0 22 12 81    >                        ld       (varR),hl
  11++D5F3 3A 1C C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
  11++D5F6 CD 51 92    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  11++D5F9 ED 53 19 C0 >                        ld  (UBnkrotmatSidevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  12++D5FD C9                                   ret
  13++D5FE              ApplyMyRollToRoofv:     ApplyMyRollToVector ALPHA, UBnkrotmatRoofvX, UBnkrotmatRoofvY
  13++D5FE             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  13++D5FE 3A 27 80    >                        ld       a,(ALPHA)
  13++D601 32 11 81    >                        ld       (varQ),a
  13++D604             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
  13++D604 2A 21 C0    >                        ld       hl,(UBnkrotmatRoofvY)
  13++D607 22 12 81    >                        ld       (varR),hl
  13++D60A             >                        ldCopyByte  UBnkrotmatRoofvX, varP           ; set P to nosevX lo (may be redundant)
  13++D60A 3A 1F C0    >                        ld       a,(UBnkrotmatRoofvX)
  13++D60D 32 0F 80    >                        ld       (varP),a
  13++D610 3A 20 C0    >                        ld a,(UBnkrotmatRoofvX+1)                    ; Set A = -nosev_x_hi
  13++D613 EE 80       >                        xor $80                             ;
  13++D615 CD 51 92    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  13++D618 ED 53 21 C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  13++D61C             >                        ldCopy2Byte UBnkrotmatRoofvX, varR           ; Set (S R) = nosev_x
  13++D61C 2A 1F C0    >                        ld       hl,(UBnkrotmatRoofvX)
  13++D61F 22 12 81    >                        ld       (varR),hl
  13++D622 3A 22 C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
  13++D625 CD 51 92    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  13++D628 ED 53 1F C0 >                        ld  (UBnkrotmatRoofvX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  14++D62C C9                                   ret
  15++D62D
  16++D62D              ApplyMyPitchToNosev:    ApplyMyRollToVector BETA, UBnkrotmatNosevZ, UBnkrotmatNosevY
  16++D62D             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  16++D62D 3A 1A 80    >                        ld       a,(BETA)
  16++D630 32 11 81    >                        ld       (varQ),a
  16++D633             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
  16++D633 2A 27 C0    >                        ld       hl,(UBnkrotmatNosevY)
  16++D636 22 12 81    >                        ld       (varR),hl
  16++D639             >                        ldCopyByte  UBnkrotmatNosevZ, varP           ; set P to nosevX lo (may be redundant)
  16++D639 3A 29 C0    >                        ld       a,(UBnkrotmatNosevZ)
  16++D63C 32 0F 80    >                        ld       (varP),a
  16++D63F 3A 2A C0    >                        ld a,(UBnkrotmatNosevZ+1)                    ; Set A = -nosev_x_hi
  16++D642 EE 80       >                        xor $80                             ;
  16++D644 CD 51 92    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  16++D647 ED 53 27 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  16++D64B             >                        ldCopy2Byte UBnkrotmatNosevZ, varR           ; Set (S R) = nosev_x
  16++D64B 2A 29 C0    >                        ld       hl,(UBnkrotmatNosevZ)
  16++D64E 22 12 81    >                        ld       (varR),hl
  16++D651 3A 28 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
  16++D654 CD 51 92    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  16++D657 ED 53 29 C0 >                        ld  (UBnkrotmatNosevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  17++D65B C9                                   ret
  18++D65C              ApplyMyPitchToSidev:    ApplyMyRollToVector BETA, UBnkrotmatSidevZ, UBnkrotmatSidevY
  18++D65C             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  18++D65C 3A 1A 80    >                        ld       a,(BETA)
  18++D65F 32 11 81    >                        ld       (varQ),a
  18++D662             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
  18++D662 2A 1B C0    >                        ld       hl,(UBnkrotmatSidevY)
  18++D665 22 12 81    >                        ld       (varR),hl
  18++D668             >                        ldCopyByte  UBnkrotmatSidevZ, varP           ; set P to nosevX lo (may be redundant)
  18++D668 3A 1D C0    >                        ld       a,(UBnkrotmatSidevZ)
  18++D66B 32 0F 80    >                        ld       (varP),a
  18++D66E 3A 1E C0    >                        ld a,(UBnkrotmatSidevZ+1)                    ; Set A = -nosev_x_hi
  18++D671 EE 80       >                        xor $80                             ;
  18++D673 CD 51 92    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  18++D676 ED 53 1B C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  18++D67A             >                        ldCopy2Byte UBnkrotmatSidevZ, varR           ; Set (S R) = nosev_x
  18++D67A 2A 1D C0    >                        ld       hl,(UBnkrotmatSidevZ)
  18++D67D 22 12 81    >                        ld       (varR),hl
  18++D680 3A 1C C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
  18++D683 CD 51 92    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  18++D686 ED 53 1D C0 >                        ld  (UBnkrotmatSidevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  19++D68A C9                                   ret
  20++D68B              ApplyMyPitchToRoofv:    ApplyMyRollToVector BETA, UBnkrotmatRoofvZ, UBnkrotmatRoofvY
  20++D68B             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  20++D68B 3A 1A 80    >                        ld       a,(BETA)
  20++D68E 32 11 81    >                        ld       (varQ),a
  20++D691             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
  20++D691 2A 21 C0    >                        ld       hl,(UBnkrotmatRoofvY)
  20++D694 22 12 81    >                        ld       (varR),hl
  20++D697             >                        ldCopyByte  UBnkrotmatRoofvZ, varP           ; set P to nosevX lo (may be redundant)
  20++D697 3A 23 C0    >                        ld       a,(UBnkrotmatRoofvZ)
  20++D69A 32 0F 80    >                        ld       (varP),a
  20++D69D 3A 24 C0    >                        ld a,(UBnkrotmatRoofvZ+1)                    ; Set A = -nosev_x_hi
  20++D6A0 EE 80       >                        xor $80                             ;
  20++D6A2 CD 51 92    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  20++D6A5 ED 53 21 C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  20++D6A9             >                        ldCopy2Byte UBnkrotmatRoofvZ, varR           ; Set (S R) = nosev_x
  20++D6A9 2A 23 C0    >                        ld       hl,(UBnkrotmatRoofvZ)
  20++D6AC 22 12 81    >                        ld       (varR),hl
  20++D6AF 3A 22 C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
  20++D6B2 CD 51 92    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  20++D6B5 ED 53 23 C0 >                        ld  (UBnkrotmatRoofvZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  21++D6B9 C9                                   ret
  22++D6BA
  23++D6BA
  24++D6BA              APPequPosPlusAPP:       MACRO    Position, PositionSign
  25++D6BA ~                                    push    bc
  26++D6BA ~                                    ld      c,a                         ; save original value of a into c
  27++D6BA ~                                    ld      a,(PositionSign)
  28++D6BA ~                                    ld      b,a
  29++D6BA ~                                    ld      a,c
  30++D6BA ~                                    xor     b                           ; a = a xor x postition sign
  31++D6BA ~                                    jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  32++D6BA ~            ; Signs are the same to we just add and take which ever sign
  33++D6BA ~                                    ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  34++D6BA ~                                    ld      hl,(Position)
  35++D6BA ~                                    add     hl,de
  36++D6BA ~                                    ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  37++D6BA ~                                    ld      a,c                         ; and a = original sign as they were both the same
  38++D6BA ~                                    pop     bc
  39++D6BA ~                                    ret
  40++D6BA ~            ; Signs are opposite so we subtract
  41++D6BA ~            .MV50:                  ld      de,(varPp1)
  42++D6BA ~                                    ld      hl,(Position)
  43++D6BA ~                                    or      a
  44++D6BA ~                                    sbc     hl,de
  45++D6BA ~                                    jr      c,.MV51                     ; if the result was negative then negate result
  46++D6BA ~                                    ld      a,c                         ; get back the original sign
  47++D6BA ~                                    ld      (varPp1),hl                 ; and save result to P[2][1]
  48++D6BA ~                                    xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  49++D6BA ~                                    pop     bc
  50++D6BA ~                                    ret
  51++D6BA ~            .MV51:                  NegHL
  52++D6BA ~                                    ld      (varPp1),hl
  53++D6BA ~                                    ld      a,c                         ; the original sign will still be good
  54++D6BA ~                                    pop     bc
  55++D6BA ~                                    ret
  56++D6BA                                      ENDM
  57++D6BA
  58++D6BA
  59++D6BA              APPequXPosPlusAPP:     APPequPosPlusAPP UBnKxlo, UBnKxsgn
  59++D6BA C5          >                        push    bc
  59++D6BB 4F          >                        ld      c,a                         ; save original value of a into c
  59++D6BC 3A 12 C0    >                        ld      a,(UBnKxsgn)
  59++D6BF 47          >                        ld      b,a
  59++D6C0 79          >                        ld      a,c
  59++D6C1 A8          >                        xor     b                           ; a = a xor x postition sign
  59++D6C2 FA D3 D6    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  59++D6C5             >; Signs are the same to we just add and take which ever sign
  59++D6C5 ED 5B 10 80 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  59++D6C9 2A 10 C0    >                        ld      hl,(UBnKxlo)
  59++D6CC 19          >                        add     hl,de
  59++D6CD 22 10 80    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  59++D6D0 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  59++D6D1 C1          >                        pop     bc
  59++D6D2 C9          >                        ret
  59++D6D3             >; Signs are opposite so we subtract
  59++D6D3 ED 5B 10 80 >.MV50:                  ld      de,(varPp1)
  59++D6D7 2A 10 C0    >                        ld      hl,(UBnKxlo)
  59++D6DA B7          >                        or      a
  59++D6DB ED 52       >                        sbc     hl,de
  59++D6DD 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  59++D6DF 79          >                        ld      a,c                         ; get back the original sign
  59++D6E0 22 10 80    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  59++D6E3 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  59++D6E5 C1          >                        pop     bc
  59++D6E6 C9          >                        ret
  59++D6E7             >.MV51:                  NegHL
  59++D6E7 AF          >                    xor a
  59++D6E8 95          >                    sub l
  59++D6E9 6F          >                    ld l,a
  59++D6EA 9F          >                    sbc a,a
  59++D6EB 94          >                    sub h
  59++D6EC 67          >                    ld h,a
  59++D6ED 22 10 80    >                        ld      (varPp1),hl
  59++D6F0 79          >                        ld      a,c                         ; the original sign will still be good
  59++D6F1 C1          >                        pop     bc
  59++D6F2 C9          >                        ret
  60++D6F3
  61++D6F3              APPequYPosPlusAPP:     APPequPosPlusAPP UBnKylo, UBnKysgn
  61++D6F3 C5          >                        push    bc
  61++D6F4 4F          >                        ld      c,a                         ; save original value of a into c
  61++D6F5 3A 15 C0    >                        ld      a,(UBnKysgn)
  61++D6F8 47          >                        ld      b,a
  61++D6F9 79          >                        ld      a,c
  61++D6FA A8          >                        xor     b                           ; a = a xor x postition sign
  61++D6FB FA 0C D7    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  61++D6FE             >; Signs are the same to we just add and take which ever sign
  61++D6FE ED 5B 10 80 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  61++D702 2A 13 C0    >                        ld      hl,(UBnKylo)
  61++D705 19          >                        add     hl,de
  61++D706 22 10 80    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  61++D709 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  61++D70A C1          >                        pop     bc
  61++D70B C9          >                        ret
  61++D70C             >; Signs are opposite so we subtract
  61++D70C ED 5B 10 80 >.MV50:                  ld      de,(varPp1)
  61++D710 2A 13 C0    >                        ld      hl,(UBnKylo)
  61++D713 B7          >                        or      a
  61++D714 ED 52       >                        sbc     hl,de
  61++D716 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  61++D718 79          >                        ld      a,c                         ; get back the original sign
  61++D719 22 10 80    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  61++D71C EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  61++D71E C1          >                        pop     bc
  61++D71F C9          >                        ret
  61++D720             >.MV51:                  NegHL
  61++D720 AF          >                    xor a
  61++D721 95          >                    sub l
  61++D722 6F          >                    ld l,a
  61++D723 9F          >                    sbc a,a
  61++D724 94          >                    sub h
  61++D725 67          >                    ld h,a
  61++D726 22 10 80    >                        ld      (varPp1),hl
  61++D729 79          >                        ld      a,c                         ; the original sign will still be good
  61++D72A C1          >                        pop     bc
  61++D72B C9          >                        ret
  62++D72C
  63++D72C              APPequZPosPlusAPP:     APPequPosPlusAPP UBnKzlo, UBnKzsgn
  63++D72C C5          >                        push    bc
  63++D72D 4F          >                        ld      c,a                         ; save original value of a into c
  63++D72E 3A 18 C0    >                        ld      a,(UBnKzsgn)
  63++D731 47          >                        ld      b,a
  63++D732 79          >                        ld      a,c
  63++D733 A8          >                        xor     b                           ; a = a xor x postition sign
  63++D734 FA 45 D7    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  63++D737             >; Signs are the same to we just add and take which ever sign
  63++D737 ED 5B 10 80 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  63++D73B 2A 16 C0    >                        ld      hl,(UBnKzlo)
  63++D73E 19          >                        add     hl,de
  63++D73F 22 10 80    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  63++D742 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  63++D743 C1          >                        pop     bc
  63++D744 C9          >                        ret
  63++D745             >; Signs are opposite so we subtract
  63++D745 ED 5B 10 80 >.MV50:                  ld      de,(varPp1)
  63++D749 2A 16 C0    >                        ld      hl,(UBnKzlo)
  63++D74C B7          >                        or      a
  63++D74D ED 52       >                        sbc     hl,de
  63++D74F 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  63++D751 79          >                        ld      a,c                         ; get back the original sign
  63++D752 22 10 80    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  63++D755 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  63++D757 C1          >                        pop     bc
  63++D758 C9          >                        ret
  63++D759             >.MV51:                  NegHL
  63++D759 AF          >                    xor a
  63++D75A 95          >                    sub l
  63++D75B 6F          >                    ld l,a
  63++D75C 9F          >                    sbc a,a
  63++D75D 94          >                    sub h
  63++D75E 67          >                    ld h,a
  63++D75F 22 10 80    >                        ld      (varPp1),hl
  63++D762 79          >                        ld      a,c                         ; the original sign will still be good
  63++D763 C1          >                        pop     bc
  63++D764 C9          >                        ret
  64++D765
  65++D765              ; rollWork holds Alpha intermidate results
  66++D765 00 00 00     rollWork      DS 3
  67++D768              rollWorkp1    equ rollWork
  68++D768              rollWorkp2    equ rollWork+1
  69++D768              rollWorkp3    equ rollWork+2
  70++D768
  71++D768              ;----------------------------------------------------------------------------------------------------------------------------------
  72++D768              ; based on MVEIT part 4 of 9
  73++D768 3A 28 80     ApplyMyRollAndPitch:    ld      a,(ALP1)                    ; get roll magnitude
  74++D76B 21 1C 80                             ld      hl,BET1                     ; and pitch
  75++D76E B6                                   or      (hl)
  76++D76F CA 29 D8                             jp      z,.NoRotation               ; if both zero then don't compute
  77++D772                                      ;break
  78++D772              ; P[210] = x * alph (we use P[2]P[1] later as result/256
  79++D772 5F                                   ld      e,a                         ; e = roll magnitude
  80++D773 2A 10 C0                             ld      hl,(UBnKxlo)                ; hl = ship x pos
  81++D776 CD AD 92                             call    AHLequHLmulE                ; MULTU2-2 AHL = UbnkXlo * Alp1 both unsigned
  82++D779 32 11 80                             ld      (varPhi2),a                 ; set P[2] to high byte to help with ./256
  83++D77C 22 0F 80                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo * Alph1
  84++D77F              ; A = Flip sign
  85++D77F 3A 2A 80                             ld      a,(ALP2FLIP)                ; flip the current roll angle alpha and xor with x sign
  86++D782 21 12 C0                             ld      hl,UBnKxsgn                 ; and xor with x pos sign
  87++D785 AE                                   xor     (hl)                        ; so now  (A P+2 P+1) = - (x_sign x_hi x_lo) * alpha / 256
  88++D786              ; AP[2]P[1] =Y + AP[2]P[1] (i.e. Previous APP/256)
  89++D786 CD F3 D6                             call    APPequYPosPlusAPP           ; MVT6 calculate APP = y - (x * alpha / 256)
  90++D789              ; K2 = AP[2][1] K2(3 2 1) = (A P+2 P+1) = y - x * alpha / 256
  91++D789 32 67 D7                             ld      (rollWorkp3),a               ; k2+3 = sign of result
  92++D78C 22 65 D7                             ld      (rollWorkp1),hl             ; k2+1,2 = result
  93++D78F              ; P[210] = K2[2 1] * Beta  = (A ~P) * X
  94++D78F 3A 1C 80                             ld      a,(BET1)                    ; a = magnitude of pitch
  95++D792 5F                                   ld      e,a
  96++D793 CD AD 92                             call    AHLequHLmulE                ; MLTU2-2 AHL = (P+2 P+1) * BET1 or by now ((UbnkXlo * Alph1)/256 * Bet1)
  97++D796 32 11 80                             ld      (varPp2),a                   ; save highest byte in P2
  98++D799 22 0F 80                             ld      (varP),hl
  99++D79C              ; Fetch sign of previosu cal and xor with BETA inverted
 100++D79C 3A 67 D7                             ld      a,(rollWorkp3)
 101++D79F 5F                                   ld      e,a
 102++D7A0 3A 1D 80                             ld      a,(BET2)
 103++D7A3 AB                                   xor     e                           ; so we get the sign of K3 and xor with pitch sign
 104++D7A4              ; Z = P[210] =Z + APP
 105++D7A4 CD 2C D7                             call    APPequZPosPlusAPP           ; MVT6
 106++D7A7 32 18 C0                             ld      (UBnKzsgn),a                ; save result back into z
 107++D7AA 22 16 C0                             ld      (UBnKzlo),hl
 108++D7AD              ; A[P1]P[0] = z * Beta
 109++D7AD 3A 1C 80                             ld      a,(BET1)                    ; get pitch back again for mulitply in original it was kept in Q so no fetch needed
 110++D7B0 5F                                   ld      e,a
 111++D7B1 CD AD 92                             call    AHLequHLmulE                ; MULTU2 P2 P1 was already in hl (A P+1 P) = (z_hi z_lo) * beta
 112++D7B4 32 11 80                             ld      (varPp2),a                  ; P2 = high byte of result
 113++D7B7 22 0F 80                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo & Alph1
 114++D7BA              ; A xor BET2,Zsign
 115++D7BA 3A 67 D7                             ld      a,(rollWorkp3)               ; get K3 (sign of y) and store it in y pos
 116++D7BD 32 15 C0                             ld      (UBnKysgn),a                ; save result back into y
 117++D7C0 5F                                   ld      e,a                         ; a = y sign Xor pitch rate sign
 118++D7C1 3A 1D 80                             ld      a,(BET2)                    ;
 119++D7C4 AB                                   xor     e                           ;
 120++D7C5 5F                                   ld      e,a                         ; now xor it with z sign too
 121++D7C6 3A 18 C0                             ld      a,(UBnKzsgn)                ;
 122++D7C9 AB                                   xor     e                           ; so now a = sign of y * beta * sign y * sign z
 123++D7CA F2 D9 D7                             jp      p,.MV43                     ; if result is pve beta * z and y have differetn signs
 124++D7CD 2A 10 80                             ld      hl,(varPp1)
 125++D7D0 ED 5B 65 D7                          ld      de,(rollWorkp1)
 126++D7D4 B7                                   or      a
 127++D7D5 19                                   add     hl,de
 128++D7D6 C3 F3 D7                             jp      .MV44
 129++D7D9 2A 65 D7     .MV43:                  ld      hl,(rollWorkp1)
 130++D7DC ED 5B 10 80                          ld      de,(varPp1)
 131++D7E0 B7                                   or      a
 132++D7E1 ED 52                                sbc     hl,de                       ; (y_hi y_lo) = K2(2 1) - P(2 1)
 133++D7E3 30 0E                                jr      nc,.MV44                    ; if there was no over flow carry on
 134++D7E5                                      NegHL
 134++D7E5 AF          >                    xor a
 134++D7E6 95          >                    sub l
 134++D7E7 6F          >                    ld l,a
 134++D7E8 9F          >                    sbc a,a
 134++D7E9 94          >                    sub h
 134++D7EA 67          >                    ld h,a
 135++D7EB 3A 15 C0                             ld      a,(UBnKysgn)                ; flip sign bit TODO, we may have to remove xor as planets and suns are sign + 23 bit xpos
 136++D7EE EE 80                                xor     SignOnly8Bit
 137++D7F0 32 15 C0                             ld      (UBnKysgn),a
 138++D7F3              ; by here we have (y_sign y_hi y_lo) = K2(2 1) - P(2 1) = K2 - beta * z
 139++D7F3 22 13 C0     .MV44:                  ld      (UBnKylo),hl                ; we do save here to avoid two writes if MV43 ended up with a 2s'c conversion
 140++D7F6 3A 28 80                             ld      a,(ALP1)                    ; get roll magnitude
 141++D7F9 5F                                   ld      e,a
 142++D7FA 2A 13 C0                             ld      hl,(UBnKylo)
 143++D7FD CD AD 92                             call    AHLequHLmulE                ; MLTU2-2 AHL = (y_hi y_lo) * alpha
 144++D800 32 11 80                             ld      (varPp2),a                  ; store high byte P(2 1 0) = (y_hi y_lo) * alpha
 145++D803 22 0F 80                             ld      (varP),hl
 146++D806 3A 29 80                             ld      a,(ALP2)
 147++D809 5F                                   ld      e,a
 148++D80A 3A 15 C0                             ld      a,(UBnKysgn)
 149++D80D AB                                   xor     e                           ; a = sign of roll xor y so now we have (A P+2 P+1) = (y_sign y_hi y_lo) * alpha / 256
 150++D80E CD BA D6                             call    APPequXPosPlusAPP           ; MVT6 Set (A P+2 P+1) = (x_sign x_hi x_lo) + (A P+2 P+1) = x + y * alpha / 256
 151++D811 32 12 C0                             ld      (UBnKxsgn),a                ; save resutl stright into X pos
 152++D814 22 10 C0                             ld      (UBnKxlo),hl
 153++D817                                      ;break
 154++D817                                      ; if its not a sun then apply to local orientation
 155++D817
 156++D817 CD A0 D5                             call    ApplyMyRollToNosev
 157++D81A CD CF D5                             call    ApplyMyRollToSidev
 158++D81D CD FE D5                             call    ApplyMyRollToRoofv
 159++D820 CD 2D D6                             call    ApplyMyPitchToNosev
 160++D823 CD 5C D6                             call    ApplyMyPitchToSidev
 161++D826 CD 8B D6                             call    ApplyMyPitchToRoofv
 162++D829 3A 0D 81     .NoRotation:            ld      a,(DELTA)                   ; get speed
 163++D82C 16 00                                ld      d,0
 164++D82E 5F                                   ld      e,a                         ; de = speed in low byte
 165++D82F 2A 16 C0                             ld      hl,(UBnKzlo)                ; hl = z position
 166++D832 3A 18 C0                             ld      a,(UBnKzsgn)                ; b = z sign
 167++D835 47                                   ld      b,a                         ;
 168++D836 0E 80                                ld      c,$80                       ; c = -ve as we are always moving forwards
 169++D838 CD B1 8F                             call    ADDHLDESignBC               ; update speed
 170++D83B 22 16 C0                             ld      (UBnKzlo),hl                ; write back to zpos
 171++D83E 32 18 C0                             ld      (UBnKzsgn),a                ;
 172++D841 C9                                   ret
# file closed: ././Universe/Ships/ApplyMyRollAndPitch.asm
1543+ D842                          INCLUDE "./Universe/Ships/ApplyShipRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyShipRollAndPitch.asm
   1++D842              ;----------------------------------------------------------------------------------------------------------------------------------
   2++D842              ; based on MVEIT part 4 of 9
   3++D842 3A 39 C0     ApplyShipRollAndPitch:  ld      a,(UBnKRotZCounter)             ; get roll magnitudeShip Pitch counter
   4++D845 47                                   ld      b,a
   5++D846 E6 80                                and     SignOnly8Bit
   6++D848 4F                                   ld      c,a
   7++D849 32 3F C0                             ld      (univRAT2),a                ; get sign of pitch
   8++D84C 78                                   ld      a,b
   9++D84D E6 7F                                and     SignMask8Bit                ; and magnitude
  10++D84F 28 3A                                jr      z,.ProcessRoll
  11++D851 FE 7F        .CheckPitchDamping:     cp      SignMask8Bit
  12++D853 28 01                                jr      z,.NoPitchDamping
  13++D855 3D           .ApplyPitchDamping:     dec     a                           ; pitch = pitch-1
  14++D856 32 40 C0     .NoPitchDamping         ld      (univRAT2Val),a
  15++D859 47                                   ld      b,a
  16++D85A B1                                   or      c                           ; bring sign back in
  17++D85B 32 39 C0                             ld      (UBnKRotZCounter),a             ; rotZCounter = updated value
  18++D85E 21 1F C0     .PitchSAxes:            ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevY
  19++D861 22 F4 7F                             ld	    (varAxis1),hl
  20++D864 21 25 C0                             ld	    hl,UBnkrotmatNosevX; UBnkrotmatSidevZ
  21++D867 22 F6 7F                             ld	    (varAxis2),hl
  22++D86A CD 64 C7                             call    MVS5RotateAxis
  23++D86D 21 21 C0     .PitchRAxes:            ld	    hl,UBnkrotmatRoofvY
  24++D870 22 F4 7F                             ld	    (varAxis1),hl
  25++D873 21 27 C0                             ld	    hl,UBnkrotmatNosevY;UBnkrotmatRoofvZ
  26++D876 22 F6 7F                             ld	    (varAxis2),hl
  27++D879 CD 64 C7                             call    MVS5RotateAxis
  28++D87C 21 23 C0     .PitchNAxes:            ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevY
  29++D87F 22 F4 7F                             ld	    (varAxis1),hl
  30++D882 21 29 C0                             ld	    hl,UBnkrotmatNosevZ
  31++D885 22 F6 7F                             ld	    (varAxis2),hl
  32++D888 CD 64 C7                             call    MVS5RotateAxis
  33++D88B 3A 38 C0     .ProcessRoll:           ld      a,(UBnKRotXCounter)
  34++D88E 47                                   ld      b,a
  35++D88F E6 80                                and     SignOnly8Bit
  36++D891 4F                                   ld      c,a
  37++D892 32 3F C0                             ld      (univRAT2),a                ; get sign of pitch
  38++D895 78                                   ld      a,b
  39++D896 E6 7F                                and     SignMask8Bit                ; and magnitude
  40++D898 C8                                   ret     z                           ; if no work to do then exit
  41++D899 FE 7F        .CheckRollDamping:      cp      SignMask8Bit
  42++D89B 28 01                                jr      z,.NoRollDamping
  43++D89D 3D           .ApplyRollDamping:      dec      a                     ; pitch = pitch-1
  44++D89E 32 40 C0     .NoRollDamping          ld      (univRAT2Val),a
  45++D8A1 47                                   ld      b,a
  46++D8A2 B1                                   or      c                           ; bring sign back in
  47++D8A3 32 38 C0                             ld      (UBnKRotXCounter),a             ; rotZCounter = updated value
  48++D8A6 21 1F C0     .RollSAxis:           	ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevX
  49++D8A9 22 F4 7F                             ld	    (varAxis1),hl
  50++D8AC 21 19 C0                             ld	    hl,UBnkrotmatSidevX; UBnkrotmatSidevY
  51++D8AF 22 F6 7F                             ld	    (varAxis2),hl
  52++D8B2 CD 64 C7                             call    MVS5RotateAxis
  53++D8B5 21 21 C0     .RollRAxis:             ld	    hl,UBnkrotmatRoofvY; UBnkrotmatRoofvX
  54++D8B8 22 F4 7F                             ld	    (varAxis1),hl
  55++D8BB 21 1B C0                             ld	    hl,UBnkrotmatSidevY; UBnkrotmatRoofvY
  56++D8BE 22 F6 7F                             ld	    (varAxis2),hl
  57++D8C1 CD 64 C7                             call    MVS5RotateAxis
  58++D8C4 21 23 C0     .RollNAxis:             ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevX
  59++D8C7 22 F4 7F                             ld	    (varAxis1),hl
  60++D8CA 21 1D C0                             ld	    hl,UBnkrotmatSidevZ; UBnkrotmatNosevY
  61++D8CD 22 F6 7F                             ld	    (varAxis2),hl
  62++D8D0 CD 64 C7                             call    MVS5RotateAxis
  63++D8D3 C9                                   ret
  64++D8D4
# file closed: ././Universe/Ships/ApplyShipRollAndPitch.asm
1544+ D8D4                          INCLUDE "./Universe/Ships/ApplyShipSpeed.asm"
# file opened: ././Universe/Ships/ApplyShipSpeed.asm
   1++D8D4              SpeedMulAxis:           MACRO   speedreg, axis
   2++D8D4 ~                                    ld      e,speedreg
   3++D8D4 ~                                    ld      hl,(axis)
   4++D8D4 ~                                    ld      a,h
   5++D8D4 ~                                    ClearSignBitA
   6++D8D4 ~                                    ld      d,a
   7++D8D4 ~                                    mul     de
   8++D8D4 ~                                    ld      a,h
   9++D8D4 ~                                    SignBitOnlyA
  10++D8D4 ~                                    ld      c,a
  11++D8D4 ~                                    ld      e,d
  12++D8D4 ~                                    ld      d,0
  13++D8D4                                      ENDM
  14++D8D4
  15++D8D4              AddSpeedToVert:         MACRO   vertex
  16++D8D4 ~                                    ld      hl,(vertex)
  17++D8D4 ~                                    ld      a,(vertex+2)
  18++D8D4 ~                                    ld      b,a
  19++D8D4 ~                                    call    AHLEquBHLaddCDE
  20++D8D4 ~                                    ld      (vertex),hl
  21++D8D4 ~                                    ld      (vertex+2),a
  22++D8D4                                      ENDM
  23++D8D4
  24++D8D4
  25++D8D4              ; ---------------------------------------------------------------------------------------------------------------------------------
  26++D8D4 3A 36 C0     ApplyShipSpeed:         ld      a,(UBnKSpeed)                   ; get speed * 4
  27++D8D7 CB 27                                sla     a
  28++D8D9 CB 27                                sla     a
  29++D8DB FD 6F                                ld      iyl,a                           ; save pre calculated speed
  30++D8DD              .ApplyToX:              SpeedMulAxis    a, UBnkrotmatNosevX     ; e =  ABS (nosev x hi) c = sign
  30++D8DD 5F          >                        ld      e,a
  30++D8DE 2A 25 C0    >                        ld      hl,(UBnkrotmatNosevX)
  30++D8E1 7C          >                        ld      a,h
  30++D8E2             >                        ClearSignBitA
  30++D8E2 E6 7F       >                        and     SignMask8Bit
  30++D8E4 57          >                        ld      d,a
  30++D8E5 ED 30       >                        mul     de
  30++D8E7 7C          >                        ld      a,h
  30++D8E8             >                        SignBitOnlyA
  30++D8E8 E6 80       >                        and     SignOnly8Bit
  30++D8EA 4F          >                        ld      c,a
  30++D8EB 5A          >                        ld      e,d
  30++D8EC 16 00       >                        ld      d,0
  31++D8EE              .AddSpeedToX:           AddSpeedToVert UBnKxlo
  31++D8EE 2A 10 C0    >                        ld      hl,(UBnKxlo)
  31++D8F1 3A 12 C0    >                        ld      a,(UBnKxlo+2)
  31++D8F4 47          >                        ld      b,a
  31++D8F5 CD 78 8F    >                        call    AHLEquBHLaddCDE
  31++D8F8 22 10 C0    >                        ld      (UBnKxlo),hl
  31++D8FB 32 12 C0    >                        ld      (UBnKxlo+2),a
  32++D8FE              .ApplyToY:              SpeedMulAxis    iyl, UBnkrotmatNosevY
  32++D8FE FD 5D       >                        ld      e,iyl
  32++D900 2A 27 C0    >                        ld      hl,(UBnkrotmatNosevY)
  32++D903 7C          >                        ld      a,h
  32++D904             >                        ClearSignBitA
  32++D904 E6 7F       >                        and     SignMask8Bit
  32++D906 57          >                        ld      d,a
  32++D907 ED 30       >                        mul     de
  32++D909 7C          >                        ld      a,h
  32++D90A             >                        SignBitOnlyA
  32++D90A E6 80       >                        and     SignOnly8Bit
  32++D90C 4F          >                        ld      c,a
  32++D90D 5A          >                        ld      e,d
  32++D90E 16 00       >                        ld      d,0
  33++D910              .AddSpeedToY:           AddSpeedToVert UBnKylo
  33++D910 2A 13 C0    >                        ld      hl,(UBnKylo)
  33++D913 3A 15 C0    >                        ld      a,(UBnKylo+2)
  33++D916 47          >                        ld      b,a
  33++D917 CD 78 8F    >                        call    AHLEquBHLaddCDE
  33++D91A 22 13 C0    >                        ld      (UBnKylo),hl
  33++D91D 32 15 C0    >                        ld      (UBnKylo+2),a
  34++D920              .ApplyToZ:              SpeedMulAxis    iyl, UBnkrotmatNosevZ
  34++D920 FD 5D       >                        ld      e,iyl
  34++D922 2A 29 C0    >                        ld      hl,(UBnkrotmatNosevZ)
  34++D925 7C          >                        ld      a,h
  34++D926             >                        ClearSignBitA
  34++D926 E6 7F       >                        and     SignMask8Bit
  34++D928 57          >                        ld      d,a
  34++D929 ED 30       >                        mul     de
  34++D92B 7C          >                        ld      a,h
  34++D92C             >                        SignBitOnlyA
  34++D92C E6 80       >                        and     SignOnly8Bit
  34++D92E 4F          >                        ld      c,a
  34++D92F 5A          >                        ld      e,d
  34++D930 16 00       >                        ld      d,0
  35++D932              .AddSpeedToZ:           AddSpeedToVert UBnKzlo
  35++D932 2A 16 C0    >                        ld      hl,(UBnKzlo)
  35++D935 3A 18 C0    >                        ld      a,(UBnKzlo+2)
  35++D938 47          >                        ld      b,a
  35++D939 CD 78 8F    >                        call    AHLEquBHLaddCDE
  35++D93C 22 16 C0    >                        ld      (UBnKzlo),hl
  35++D93F 32 18 C0    >                        ld      (UBnKzlo+2),a
  36++D942 C9                                   ret
  37++D943
# file closed: ././Universe/Ships/ApplyShipSpeed.asm
1545+ D943                          INCLUDE "./ModelRender/DrawLines.asm"
# file opened: ././ModelRender/DrawLines.asm
   1++D943
   2++D943              ; ---------------------------------------------------------------------------------------------------------------------------------
   3++D943 00           DrawLinesCounter		db	0
   4++D944              ; Initial tests look OK
   5++D944              LL155:;
   6++D944              ClearLine:                                  ; CLEAR LINEstr visited by EE31 when XX3 heap ready to draw/erase lines in XX19 heap.
   7++D944                    ;break                                                                             ; ObjectInFront:
   8++D944 3E 65        DrawLines:              ld	a,$65 ; DEBUG
   9++D946 FD 6F                                ld		iyl,a							; set ixl to colour (assuming we come in here with a = colour to draw)
  10++D948 3A 0E C3                             ld		a,(UbnkLineArrayLen)			; get number of lines
  11++D94B                                      ReturnIfAIsZero   						; No lines then bail out.
  11++D94B A7          >                        and     a
  11++D94C C8          >                        ret     z
  12++D94D FD 67                                ld		iyh,a			                ; number of lines still to draw
  13++D94F 21 1C C2                             ld		hl,UbnkLineArray
  14++D952              ;LL27:                                       ; counter Y, Draw clipped lines in XX19 ship lines heap
  15++D952 4E           DrawXX19ClippedLines:   ld      c,(hl)                          ; (XX19),Y c = varX1
  16++D953 23                                   inc     hl
  17++D954 46                                   ld      b,(hl)                          ; bc = point1 Y,X
  18++D955 23                                   inc     hl
  19++D956 5E                                   ld      e,(hl)                          ; c = varX1
  20++D957 23                                   inc     hl
  21++D958 56                                   ld      d,(hl)                          ; de = point2 Y,X
  22++D959 23                                   inc     hl
  23++D95A E5                                   push	hl
  24++D95B FD E5                                push    iy
  25++D95D 60                                   ld      h,b
  26++D95E 69                                   ld      l,c
  27++D95F                ;  call    l2_draw_any_line                ; call version of LOIN that used BCDE
  28++D95F FD 7D                                ld		a,iyl							; get colour back before calling line draw
  29++D961                                      MMUSelectLayer2
  29++D961 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  30++D965 CD CE EA                             call    LineHLtoDE
  31++D968 FD E1                                pop     iy
  32++D96A E1                                   pop	    hl
  33++D96B FD 25                                dec     iyh
  34++D96D 20 E3                                jr		nz,DrawXX19ClippedLines
  35++D96F C9                                   ret                                     ; --- Wireframe end  \ LL118-1
  36++D970
# file closed: ././ModelRender/DrawLines.asm
1546+ D970              ; ---------------------------------------------------------------------------------------------------------------------------------
1547+ D970
1548+ D970              ; DIot seem to lawyas have Y = 0???
1549+ D970              ProcessDot:            ; break
1550+ D970 CD E8 CB                             call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1551+ D973 CD EE 79                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1552+ D976 CD AE CE                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1553+ D979 CD 7B CD                             call    InverseXX16                      ;#11; Invert rotation matrix
1554+ D97C 21 00 00                             ld      hl,0
1555+ D97F 32 92 C0                             ld      (UBnkXScaled),a
1556+ D982 32 94 C0                             ld      (UBnkYScaled),a
1557+ D985 32 96 C0                             ld      (UBnkZScaled),a
1558+ D988 AF                                   xor     a
1559+ D989 CD 14 79                             call    XX12EquNodeDotOrientation
1560+ D98C CD 1F CC                             call    TransposeXX12ByShipToXX15
1561+ D98F CD 9C CC                             call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1562+ D992 FD 21 DC C0                          ld      iy,UBnkNodeArray
1563+ D996 CD 49 D5                             call    ProjectNodeToEye
1564+ D999 C9                                   ret
1565+ D99A
1566+ D99A              ; .....................................................
1567+ D99A              ; Process Nodes does the following:
1568+ D99A              ; for each node:
1569+ D99A              ;     see if node >
1570+ D99A 00           PNXX20DIV6          DB      0
1571+ D99B 00 00        PNVERTEXPTR         DW      0   ; DEBUG WILL USE LATER
1572+ D99D 00 00        PNNODEPRT           DW      0   ; DEBUG WILL USE LATER
1573+ D99F 00           PNLASTNORM          DB      0
1574+ D9A0              ProcessNodes:           ZeroA
1574+ D9A0 AF          >                        xor a
1575+ D9A1 32 0E C3                             ld      (UbnkLineArrayLen),a
1576+ D9A4 CD E8 CB                             call    CopyRotmatToTransMat ; CopyRotToTransMacro                      ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1577+ D9A7 CD EE 79                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1578+ D9AA CD AE CE                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1579+ D9AD CD 7B CD                             call    InverseXX16                      ;#11; Invert rotation matrix
1580+ D9B0 21 35 C3                             ld      hl,UBnkHullVerticies
1581+ D9B3 3A 23 C3                             ld      a,(VertexCtX6Addr)               ; get Hull byte#9 = number of vertices *6                                   ;;;
1582+ D9B6 4F           GetActualVertexCount:   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1583+ D9B7 4F                                   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1584+ D9B8 16 06                                ld      d,6
1585+ D9BA CD 2B 95                             call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1586+ D9BD 41                                   ld      b,c                              ; c = number of vertices
1587+ D9BE FD 21 DC C0                          ld      iy,UBnkNodeArray
1588+ D9C2              LL48:
1589+ D9C2 C5           PointLoop:	            push	bc                                  ; save counters
1590+ D9C3 E5                                   push	hl                                  ; save verticies list pointer
1591+ D9C4 FD E5                                push	iy                                  ; save Screen plot array pointer
1592+ D9C6 78                                   ld      a,b
1593+ D9C7                                      ;break
1594+ D9C7 CD CA D4                             call    CopyNodeToXX15                      ; copy verices at hl to xx15
1595+ D9CA 3A 93 C0                             ld		a,(UBnkXScaledSign)
1596+ D9CD CD 14 79                             call    XX12EquNodeDotOrientation
1597+ D9D0 CD 1F CC                             call    TransposeXX12ByShipToXX15
1598+ D9D3 CD 9C CC                             call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1599+ D9D6 FD E1                                pop		iy                                  ; get back screen plot array pointer
1600+ D9D8 CD 49 D5                             call    ProjectNodeToEye                     ; set up screen plot list entry
1601+ D9DB                 ; ld      hl,UbnkLineArrayLen
1602+ D9DB                ;  inc     (hl)                                ; another node done
1603+ D9DB FD E5        ReadyForNextPoint:      push	iy                                  ; copy screen plot pointer to hl
1604+ D9DD E1                                   pop		hl
1605+ D9DE 3E 04                                ld		a,4
1606+ D9E0 ED 31                                add		hl,a
1607+ D9E2 E5                                   push	hl                                  ; write it back at iy + 4
1608+ D9E3 FD E1                                pop		iy								    ; and put it in iy again
1609+ D9E5 E1                                   pop		hl                                  ; get hl back as vertex list
1610+ D9E6 3E 06                                ld		a,6
1611+ D9E8 ED 31                                add 	hl,a                                ; and move to next vertex
1612+ D9EA C1                                   pop		bc                                  ; get counter back
1613+ D9EB 10 D5                                djnz	PointLoop
1614+ D9ED              ; ......................................................
1615+ D9ED                                      ClearCarryFlag
1615+ D9ED B7          >                        or a
1616+ D9EE C9                                   ret
1617+ D9EF
1618+ D9EF              ; ...........................................................
1619+ D9EF CD 3B D1     ProcessShip:            call    CheckVisible                ; checks for z -ve and outside view frustrum, sets up flags for next bit
1620+ D9F2 3A 43 C0     .IsItADot:              ld      a,(UBnkaiatkecm)
1621+ D9F5 E6 68                                and     ShipIsVisible | ShipIsDot | ShipExploding  ; first off set if we can draw or need to update explosion
1622+ D9F7 C8                                   ret     z                           ; if none of these flags are set we can fast exit
1623+ D9F8                                      JumpOnABitSet ShipExplodingBitNbr, .ExplodingCloud; we always do the cloud processing even if invisible
1623+ D9F8 CB 6F       >                        bit 	ShipExplodingBitNbr, a
1623+ D9FA C2 36 DA    >                        jp      nz,.ExplodingCloud
1624+ D9FD              ;............................................................
1625+ D9FD              .DetermineDrawType:     ReturnOnBitClear    a, ShipIsVisibleBitNbr          ; if its not visible exit early
1625+ D9FD CB 77       >                        bit 	ShipIsVisibleBitNbr,a
1625+ D9FF C8          >                        ret		z
1626+ DA00                                      JumpOnABitClear ShipIsDotBitNbr, .CarryOnWithDraw   ; if not dot do normal draw
1626+ DA00 CB 5F       >                        bit 	ShipIsDotBitNbr, a
1626+ DA02 CA 29 DA    >                        jp      z,.CarryOnWithDraw
1627+ DA05              ;............................................................
1628+ DA05 CD 70 D9     .itsJustADot:           call    ProcessDot
1629+ DA08                                      SetMemBitN  UBnkaiatkecm , ShipIsDotBitNbr ; set is a dot flag
1629+ DA08 21 43 C0    >                        ld      hl,UBnkaiatkecm
1629+ DA0B CB DE       >                        set     ShipIsDotBitNbr,(hl)
1630+ DA0D ED 4B DC C0                          ld      bc,(UBnkNodeArray)          ; if its at dot range get X
1631+ DA11 ED 5B DE C0                          ld      de,(UBnkNodeArray+2)        ; and Y
1632+ DA15 78                                   ld      a,b                         ; if high byte components are not 0 then off screen
1633+ DA16 B2                                   or      d                           ;
1634+ DA17 C0                                   ret     nz                          ;
1635+ DA18 7B                                   ld      a,e
1636+ DA19 E6 80                                and     %10000000                   ; check to see if Y > 128
1637+ DA1B C0                                   ret     nz
1638+ DA1C 43                                   ld      b,e                         ; now b = y and c = x
1639+ DA1D 3E FF                                ld      a,L2ColourWHITE_1           ; just draw a pixel
1640+ DA1F 3E E0                                ld      a,224
1641+ DA21                                      MMUSelectLayer2                     ; then go to update radar
1641+ DA21 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1642+ DA25 CD 5C E1                             call    ShipPixel                   ;
1643+ DA28 C9                                   ret
1644+ DA29              ;............................................................
1645+ DA29 CD A0 D9     .CarryOnWithDraw:       call    ProcessNodes                ; process notes is the poor performer or check distnace is not culling
1646+ DA2C CD 95 D1                             call    CullV2
1647+ DA2F CD F3 DB                             call    PrepLines
1648+ DA32 CD 44 D9                             call    DrawLines
1649+ DA35 C9                                   ret
1650+ DA36              ;............................................................
1651+ DA36 CD A0 D9     .ExplodingCloud:        call    ProcessNodes
1652+ DA39                                      ClearMemBitN  UBnkaiatkecm, ShipKilledBitNbr ; acknowledge ship exploding
1652+ DA39 21 43 C0    >                        ld      hl,UBnkaiatkecm
1652+ DA3C CB A6       >                        res     ShipKilledBitNbr,(hl)
1653+ DA3E 3A 4B C0     .UpdateCloudCounter:    ld      a,(UBnKCloudCounter)        ; counter += 4 until > 255
1654+ DA41 C6 04                                add     4                           ; we do this early as we now have logic for
1655+ DA43 DA 05 DB                             jp      c,.FinishedExplosion        ; display or not later
1656+ DA46 32 4B C0                             ld      (UBnKCloudCounter),a        ; .
1657+ DA49              .SkipHiddenShip:        ReturnOnMemBitClear  UBnkaiatkecm , ShipIsVisibleBitNbr
1657+ DA49 3A 43 C0    >                        ld     a,(UBnkaiatkecm)
1657+ DA4C CB 77       >                        bit 	ShipIsVisibleBitNbr,a
1657+ DA4E C8          >                        ret		z
1658+ DA4F              .IsShipADot:            JumpOnABitSet ShipIsDotBitNbr, .itsJustADot ; if its dot distance then explosion is a dot, TODO later we will do as a coloured dot
1658+ DA4F CB 5F       >                        bit 	ShipIsDotBitNbr, a
1658+ DA51 C2 05 DA    >                        jp      nz,.itsJustADot
1659+ DA54 2A 16 C0     .CalculateZ:            ld      hl,(UBnKzlo)                ; al = hl = z
1660+ DA57 7C                                   ld      a,h                         ; .
1661+ DA58                                      JumpIfALTNusng 32,.CalcFromZ        ; if its >= 32 then set a to FE and we are done
1661+ DA58 FE 20       >                        cp      32
1661+ DA5A DA 62 DA    >                        jp		c, .CalcFromZ
1662+ DA5D 26 FE                                ld      h,$FE                       ; .
1663+ DA5F C3 6D DA                             jp      .DoneZDist                  ; .
1664+ DA62              .CalcFromZ:             ShiftHLLeft1                        ; else
1664+ DA62 CB 25       >			   sla l
1664+ DA64 CB 14       >			   rl  h
1665+ DA66                                      ShiftHLLeft1                        ; hl = hl * 2
1665+ DA66 CB 25       >			   sla l
1665+ DA68 CB 14       >			   rl  h
1666+ DA6A                                      SetCarryFlag                        ; h = h * 3 rolling in lower bit
1666+ DA6A 37          >                        scf
1667+ DA6B CB 14                                rl  h                               ;
1668+ DA6D 06 00        .DoneZDist:             ld      b,0                         ; bc = cloud z distance calculateed
1669+ DA6F 4C                                   ld      c,h                         ; .
1670+ DA70 3A 4B C0     .CalcCloudRadius:       ld      a,(UBnKCloudCounter)        ; de = cloud counter * 256
1671+ DA73                      IFDEF LOGMATHS
1672+ DA73 ~                                    MMUSelectMathsTables
1673+ DA73 ~                                    ld      b,h
1674+ DA73 ~                                    call    AEquAmul256DivBLog
1675+ DA73 ~                                    ld      d,a
1676+ DA73 ~                                    MMUSelectROM0
1677+ DA73                      ELSE
1678+ DA73 57                                   ld      d,a                         ;
1679+ DA74 1E 00                                ld      e,0                         ;
1680+ DA76 CD 6F 94                             call    DEequDEDivBC                ; de = cloud counter * 256 / z distance
1681+ DA79 7A                                   ld      a,d                         ; if radius >= 28
1682+ DA7A                      ENDIF
1683+ DA7A                                      JumpIfALTNusng  28,.SetCloudRadius  ; then set raidus in d to $FE
1683+ DA7A FE 1C       >                        cp      28
1683+ DA7C DA 84 DA    >                        jp		c, .SetCloudRadius
1684+ DA7F 16 FE        .MaxCloudRadius:        ld      d,$FE                       ;
1685+ DA81 C3 90 DA                             jp      .SizedUpCloud               ;
1686+ DA84              .SetCloudRadius:        ShiftDELeft1                        ; de = 8 * de
1686+ DA84 CB 23       >			   sla e
1686+ DA86 CB 12       >			   rl  d
1687+ DA88                                      ShiftDELeft1                        ; .
1687+ DA88 CB 23       >			   sla e
1687+ DA8A CB 12       >			   rl  d
1688+ DA8C                                      ShiftDELeft1                        ; .
1688+ DA8C CB 23       >			   sla e
1688+ DA8E CB 12       >			   rl  d
1689+ DA90 7A           .SizedUpCloud:          ld      a,d                         ; cloudradius = a = d or (cloudcounter * 8 / 256)
1690+ DA91 32 4C C0                             ld      (UBnKCloudRadius),a         ; .
1691+ DA94 DD 67                                ld      ixh,a                       ; ixh = a = calculated cloud radius
1692+ DA96 3A 4B C0     .CalcSubParticleColour: ld      a,(UBnKCloudCounter)        ; colur fades away
1693+ DA99 ED 23                                swapnib                             ; divive by 16
1694+ DA9B E6 0F                                and     $0F                         ; mask off upper bytes
1695+ DA9D CB 2F                                sra     a                           ; divide by 32
1696+ DA9F 21 11 DB                             ld      hl,DebrisColourTable
1697+ DAA2 ED 31                                add     hl,a
1698+ DAA4 7E                                   ld      a,(hl)
1699+ DAA5 FD 6F                                ld      iyl,a                       ; iyl = pixel colours
1700+ DAA7 3A 4B C0     .CalcSubParticleCount:  ld      a,(UBnKCloudCounter)        ; cloud counter = abs (cloud counter) in effect if > 127 then shrinks it
1701+ DAAA                                      ABSa2c                              ; a = abs a
1701+ DAAA CB 7F       >                        bit     7,a
1701+ DAAC CA B1 DA    >                        jp      z,.DoneABSa
1701+ DAAF ED 44       >                        neg
1701+ DAB1             >.DoneABSa:
1702+ DAB1 CB 2F        .ParticlePositive:      sra a                               ; iyh = (a /8)
1703+ DAB3 CB 2F                                sra a                               ; .
1704+ DAB5 CB 2F                                sra a                               ; .
1705+ DAB7 F6 01                                or  1                               ; bit 0 set so minimum 1
1706+ DAB9 DD 6F        .DoneSubParticleCount:  ld      ixl,a                       ; ixl = nbr particles per vertex
1707+ DABB 3A 22 C3     .ForEachVertex:         ld      a,(VertexCountAddr)         ; load vertex count into b
1708+ DABE 47                                   ld      b,a                         ; .
1709+ DABF 21 DC C0                             ld      hl,UBnkNodeArray            ; hl = list of vertices
1710+ DAC2 C5 E5        .ExplosionVertLoop:     push    bc,,hl                      ; save vertex counter in b and pointer to verticles in hl
1711+ DAC4 DD 68                                    ld      ixl,b                   ; save counter
1712+ DAC6 4E                                       ld      c,(hl)                  ; get vertex into bc and de
1713+ DAC7 23                                       inc     hl                      ; .
1714+ DAC8 46                                       ld      b,(hl)                  ; .
1715+ DAC9 23                                       inc     hl                      ; .
1716+ DACA 5E                                       ld      e,(hl)                  ; .
1717+ DACB 23                                       inc     hl                      ; .
1718+ DACC 56                                       ld      d,(hl)                  ; now hl is done with and we can use it
1719+ DACD DD 7D        .LoopSubParticles:          ld      a,ixl                   ; iyh = loop iterator for nbr of particles per vertex
1720+ DACF FD 67                                    ld      iyh,a                   ;
1721+ DAD1                                          ;break
1722+ DAD1 D5 C5        .ProcessAParticle:          push    de,,bc                  ; save y then x coordinates
1723+ DAD3 EB                                           ex      de,hl               ; hl = de (Y)
1724+ DAD4 DD 54                                        ld      d,ixh               ; d = cloud radius
1725+ DAD6 CD 19 DB                                     call    HLEquARandCloud     ; vertex = vertex +/- (random * projected cloud side /256)
1726+ DAD9 7C                                           ld      a,h                 ; if off screen skip
1727+ DADA                                              JumpIfAIsNotZero  .NextIteration
1727+ DADA A7          >                        and     a
1727+ DADB C2 F6 DA    >                        jp	    nz,.NextIteration
1728+ DADE EB                                           ex      de,hl               ; de = result for y which was put into hl
1729+ DADF E1                                           pop     hl                  ; get x back from bc on stack
1730+ DAE0 E5                                           push    hl                  ; put bc (which is now in hl) back on the stack
1731+ DAE1 D5                                           push    de                  ; save de
1732+ DAE2 DD 54                                        ld      d,ixh               ; d = cloud radius
1733+ DAE4 CD 19 DB                                     call    HLEquARandCloud     ; vertex = vertex +/- (random * projected cloud side /256)
1734+ DAE7 D1                                           pop     de                  ; get de back doing pop here clears stack up
1735+ DAE8 7C                                           ld      a,h                 ; if high byte has a value then off screen
1736+ DAE9                                              JumpIfAIsNotZero .NextIteration ;
1736+ DAE9 A7          >                        and     a
1736+ DAEA C2 F6 DA    >                        jp	    nz,.NextIteration
1737+ DAED 43                                           ld      b,e                 ; bc = y x of pixel from e and c regs
1738+ DAEE 4D                                           ld      c,l                 ; iyl already has colour
1739+ DAEF                                              MMUSelectLayer2             ; plot it with debris code as this can chop y > 128
1739+ DAEF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1740+ DAF3 CD 64 E1                                     call    DebrisPixel         ; .
1741+ DAF6 C1 D1        .NextIteration:             pop    de,,bc                   ; ready for next iteration, get back y and x coordinates
1742+ DAF8 FD 25                                    dec    iyh                      ; one partcile done
1743+ DAFA 20 D5                                    jr      nz,.ProcessAParticle    ; until all done
1744+ DAFC E1 C1        .NextVert:              pop     bc,,hl                      ; recover loop counter and source pointer
1745+ DAFE 3E 04                                ld      a,4                         ; move to next vertex group
1746+ DB00 ED 31                                add     hl,a                        ;
1747+ DB02 10 BE                                djnz    .ExplosionVertLoop          ;
1748+ DB04 C9                                   ret
1749+ DB05              .FinishedExplosion:     ;break
1750+ DB05 3A 2F C0                             ld      a,(UBnKSlotNumber)          ; get slot number
1751+ DB08 CD 26 86                             call    ClearSlotA                  ; gauranted to be in main memory as non bankables
1752+ DB0B                                      ClearMemBitN UBnkaiatkecm, ShipExplodingBitNbr
1752+ DB0B 21 43 C0    >                        ld      hl,UBnkaiatkecm
1752+ DB0E CB AE       >                        res     ShipExplodingBitNbr,(hl)
1753+ DB10 C9                                   ret
1754+ DB11
1755+ DB11
1756+ DB11 FC D8 B4 90  DebrisColourTable:      DB L2ColourYELLOW_1, L2ColourYELLOW_2, L2ColourYELLOW_3, L2ColourYELLOW_4, L2ColourYELLOW_5, L2ColourYELLOW_6, L2ColourYELLOW_7,L2ColourGREY_4
1756+ DB15 6C 48 24 25
1757+ DB19                                      ; set flags and signal to remove from slot list
1758+ DB19
1759+ DB19              ; Hl = HlL +/- (Random * projected cloud size)
1760+ DB19              ; In - d = z distance, hl = vert hi lo
1761+ DB19              ; Out hl = adjusted distance
1762+ DB19              ; uses registers hl, de
1763+ DB19 E5           HLEquARandCloud:        push    hl                          ; random number geneator upsets hl register
1764+ DB1A CD B2 86                             call    doRandom                    ; a= random * 2
1765+ DB1D E1                                   pop     hl
1766+ DB1E 17                                   rla                                 ;
1767+ DB1F 38 0A                                jr      c,.Negative                 ; if buit 7 went into carry
1768+ DB21 5F           .Positive:              ld  e,a
1769+ DB22 ED 30                                mul
1770+ DB24 5A                                   ld  e,d
1771+ DB25 16 00                                ld  d,0
1772+ DB27                                      ClearCarryFlag
1772+ DB27 B7          >                        or a
1773+ DB28 ED 5A                                adc     hl,de                       ; hl = hl + a
1774+ DB2A C9                                   ret
1775+ DB2B 5F           .Negative:              ld  e,a
1776+ DB2C ED 30                                mul
1777+ DB2E 5A                                   ld  e,d
1778+ DB2F 16 00                                ld  d,0
1779+ DB31                                      ClearCarryFlag
1779+ DB31 B7          >                        or a
1780+ DB32 ED 52                                sbc     hl,de                       ; hl = hl + a
1781+ DB34 C9                                   ret
1782+ DB35
1783+ DB35              GetExperiencePoints:    ; TODO calculate experience points
1784+ DB35                                      ; TODO mission updates check
1785+ DB35 C9                                   ret
1786+ DB36
1787+ DB36              ; ......................................................
1788+ DB36 3A 31 C3     KillShip:               ld      a,(ShipTypeAddr)            ; we can't destroy stations in a collision
1789+ DB39 FE 02                                cp      ShipTypeStation             ; for destructable one we will have a special type of ship
1790+ DB3B C8                                   ret     z
1791+ DB3C 3A 43 C0                             ld      a,(UBnkaiatkecm)            ; remove AI, mark killed, mark exploding
1792+ DB3F F6 30                                or      ShipExploding | ShipKilled  ; .
1793+ DB41 E6 7F                                and     ShipAIDisabled              ; .
1794+ DB43 32 43 C0                             ld      (UBnkaiatkecm),a            ; .
1795+ DB46                                      SetMemToN   UBnKexplDsp, ShipExplosionDuration ; set debris cloud timer, also usered in main to remove from slots
1795+ DB46 3E 4B       >                        ld      a,ShipExplosionDuration
1795+ DB48 32 41 C0    >                        ld      (UBnKexplDsp),a
1796+ DB4B                                      ldWriteZero UBnKEnergy              ; Zero ship energy
1796+ DB4B AF          >                        xor      a
1796+ DB4C 32 47 C0    >                        ld       (UBnKEnergy),a
1797+ DB4F 32 4C C0                             ld      (UBnKCloudRadius),a
1798+ DB52 3E 12                                ld      a,18
1799+ DB54 32 4B C0                             ld      (UBnKCloudCounter),a        ; Zero cloud
1800+ DB57                                      ; TODO logic to spawn cargo/plates goes here
1801+ DB57 C9                                   ret
1802+ DB58
1803+ DB58              ; in a = damage
1804+ DB58 47           DamageShip:             ld      b,a                         ; b = a = damage comming in
1805+ DB59 3A 31 C3                             ld      a,(ShipTypeAddr)            ; we can't destroy stations in a collision
1806+ DB5C FE 02                                cp      ShipTypeStation             ; for destructable one we will have a special type of ship
1807+ DB5E C8                                   ret     z
1808+ DB5F 3A 47 C0                             ld      a,(UBnKEnergy)              ; get current energy level
1809+ DB62                                      ClearCarryFlag
1809+ DB62 B7          >                        or a
1810+ DB63 98                                   sbc     a,b                         ; subtract damage
1811+ DB64 D2 6B DB     .Overkilled:            jp      nc,.DoneDamage              ; if no carry then its not gone negative
1812+ DB67 CD 36 DB                             call    KillShip                    ; else kill it
1813+ DB6A C9                                   ret
1814+ DB6B 32 47 C0     .DoneDamage:            ld      (UBnKEnergy),a
1815+ DB6E C9                                   ret
1816+ DB6F              ; need recovery for energy too
1817+ DB6F              ; Shall we have a "jolt ship off course routine for when it gets hit by a blast or collision)
1818+ DB6F
1819+ DB6F              ;-LL49-----------------------------------------------------------------------------------------------------------------------------
1820+ DB6F              ;  Entering Here we have the following:
1821+ DB6F              ;  XX15(1 0) = vertex x-coordinate but sign not populated
1822+ DB6F              ;  XX15(3 2) = vertex y-coordinate but sign not populated
1823+ DB6F              ;  XX15(5 4) = vertex z-coordinate but sign not populated
1824+ DB6F              ;
1825+ DB6F              ;  XX16(  1 0)sidev_x   (3 2)roofv_x   (5 4)nosev_x
1826+ DB6F              ;  XX16(  7 6)sidev_y   (9 8)roofv_y (11 10)nosev_y
1827+ DB6F              ;  XX16(13 12)sidev_z (15 14)roofv_z (17 16)nosev_z
1828+ DB6F              ;--------------------------------------------------------------------------------------------------------
1829+ DB6F              AddLaserBeamLine:
1830+ DB6F              ; this code is a bag of shit and needs re-writing
1831+ DB6F              GetGunVertexNode:
1832+ DB6F 3A 20 C3             ld          a,(GunVertexAddr)                   ; Hull byte#6, gun vertex*4 (XX0),Y
1833+ DB72 21 DC C0             ld          hl,UBnkNodeArray                    ; list of lines to read
1834+ DB75 ED 31                add         hl,a                                ; HL = address of GunVertexOnNodeArray
1835+ DB77 FD 2E 00             ld          iyl,0
1836+ DB7A              MoveX1PointToXX15:
1837+ DB7A 4E                   ld          c,(hl)                              ;
1838+ DB7B 23                   inc         hl
1839+ DB7C 46                   ld          b,(hl)                              ; bc = x1 of gun vertex
1840+ DB7D 23                   inc         hl
1841+ DB7E ED 43 92 C0          ld          (UBnkX1),bc
1842+ DB82 0C                   inc         c
1843+ DB83 C8                   ret         z                                   ; was c 255?
1844+ DB84 04                   inc         b
1845+ DB85 C8                   ret         z                                   ; was c 255?
1846+ DB86              MoveY1PointToXX15:
1847+ DB86 4E                   ld          c,(hl)                              ;
1848+ DB87 23                   inc         hl
1849+ DB88 46                   ld          b,(hl)                              ; bc = y1 of gun vertex
1850+ DB89 23                   inc         hl
1851+ DB8A ED 43 94 C0          ld          (UBnkY1),bc
1852+ DB8E              SetX2PointToXX15:
1853+ DB8E 01 00 00             ld          bc,0                                ; set X2 to 0
1854+ DB91 ED 43 96 C0          ld          (UBnkX2),bc
1855+ DB95 3A 16 C0             ld          a,(UBnKzlo)
1856+ DB98 4F                   ld          c,a
1857+ DB99              SetY2PointToXX15:
1858+ DB99 ED 43 98 C0          ld          (UBnkY2),bc                         ; set Y2to 0
1859+ DB9D 3A 12 C0             ld          a,(UBnKxsgn)
1860+ DBA0                      JumpOnBitClear a,7,LL74SkipDec
1860+ DBA0 CB 7F       >                        bit 	7,a
1860+ DBA2 CA AA DB    >                        jp      z,LL74SkipDec
1861+ DBA5              LL74DecX2:
1862+ DBA5 3E FF                ld          a,$FF
1863+ DBA7 32 96 C0             ld          (UBnkX2Lo),a                        ; rather than dec (hl) just load with 255 as it will always be that at this code point
1864+ DBAA              LL74SkipDec:
1865+ DBAA CD 92 C9             call        ClipLine                            ; LL145 \ clip test on XX15 XX12 vector, returns carry
1866+ DBAD 38 71                jr          c,CalculateNewLines                 ; LL170 clip returned carry set so not visibile if carry set skip the rest (laser not firing)
1867+ DBAF              ; Here we are usign hl to replace VarU as index
1868+ DBAF 2A 14 81             ld          hl,(varU16)
1869+ DBB2 3A 92 C0             ld          a,(UBnKx1Lo)
1870+ DBB5 77                   ld          (hl),a
1871+ DBB6 23                   inc         hl
1872+ DBB7 3A 94 C0             ld          a,(UbnKy1Lo)
1873+ DBBA 77                   ld          (hl),a
1874+ DBBB 23                   inc         hl
1875+ DBBC 3A 96 C0             ld          a,(UBnkX2Lo)
1876+ DBBF 77                   ld          (hl),a
1877+ DBC0 23                   inc         hl
1878+ DBC1 3A 98 C0             ld          a,(UbnKy2Lo)
1879+ DBC4 77                   ld          (hl),a
1880+ DBC5 FD 2C                inc         iyl                                 ; iyl holds as a counter to iterations
1881+ DBC7 23                   inc         hl
1882+ DBC8 FD 2C                inc         iyl                                 ; ready for next byte
1883+ DBCA 22 14 81             ld          (varU16),hl
1884+ DBCD C9                   ret
1885+ DBCE
1886+ DBCE                  INCLUDE "Universe/Ships/PrepLines.asm"
# file opened: ./Universe/Ships/PrepLines.asm
   1++DBCE              ;--------------------------------------------------------------------------------------------------------
   2++DBCE                  INCLUDE "./ModelRender/getVertexNodeAtAToX1Y1.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   1++DBCE              ;--------------------------------------------------------------------------------------------------------
   2++DBCE              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DBCE 21 DC C0     getVertexNodeAtAToX1Y1: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DBD1 ED 31                                add         hl,a                                ; hl = address of Node
   5++DBD3 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DBD4 11 92 C0                             ld          de,UBnkX1
   7++DBD7 ED A0                                ldi                                             ; x1 lo
   8++DBD9 ED A0                                ldi                                             ; x1 hi
   9++DBDB ED A0                                ldi                                             ; y1 lo
  10++DBDD ED A0                                ldi                                             ; y1 hi
  11++DBDF C9                                   ret
  12++DBE0
# file closed: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   3++DBE0                  INCLUDE "./ModelRender/getVertexNodeAtAToX2Y2.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   1++DBE0              ;--------------------------------------------------------------------------------------------------------
   2++DBE0              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DBE0 21 DC C0     getVertexNodeAtAToX2Y2: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DBE3 ED 31                                add         hl,a                                ; hl = address of Node
   5++DBE5 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DBE6 11 96 C0                             ld          de,UBnkX2
   7++DBE9 ED A0                                ldi                                             ; x1 lo
   8++DBEB ED A0                                ldi                                             ; x1 hi
   9++DBED ED A0                                ldi                                             ; y1 lo
  10++DBEF ED A0                                ldi                                             ; y1 hi
  11++DBF1 C9                                   ret
# file closed: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   4++DBF2                  INCLUDE "./ModelRender/GetFaceAtA.asm"
# file opened: ././ModelRender/GetFaceAtA.asm
   1++DBF2              ;--------------------------------------------------------------------------------------------------------
   2++DBF2              GetFaceAtA:         MACRO
   3++DBF2 ~                                ld          hl,UbnkFaceVisArray
   4++DBF2 ~                                add         hl,a
   5++DBF2 ~                                ld          a,(hl)                              ; get face visibility
   6++DBF2                                  ENDM
   7++DBF2
# file closed: ././ModelRender/GetFaceAtA.asm
   5++DBF2              ;--------------------------------------------------------------------------------------------------------
   6++DBF2              ; LL72 Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
   7++DBF2               ;   DEFINE NOBACKFACECULL 1
   8++DBF2 00           PLEDGECTR           DB          0
   9++DBF3
  10++DBF3              PrepLines:
  11++DBF3              ; FOR NOW BRUTE FORCE IF OFF SCREEN
  12++DBF3
  13++DBF3              ; TODO add in onced DOEXP is finished
  14++DBF3              ;        ld          a,(UBnkexplDsp)                     ; INWK+31  \ display/exploding state|missiles
  15++DBF3              ;        JumpOnBitClear  a,5,EE31                        ; bit5 of mask, if zero no explosion
  16++DBF3              ;        or          8
  17++DBF3              ;        ld          (UBnkexplDsp),a                     ; else else set bit3 to erase old line
  18++DBF3              ;        jp          DOEXP                               ; erase using Do Explosion and use implicit return
  19++DBF3              ;EE31:                                                   ; no explosion
  20++DBF3              ;        JumpOnBitClear  a,3,LL74                        ; clear is hop to do New lines
  21++DBF3              ;        call        ClearLine                           ; LL155    \ else erase lines in XX19 heap at LINEstr down
  22++DBF3              ;        ld          a, $08                              ; set bit 3 of a and fall into LL74
  23++DBF3              ;
  24++DBF3              ;--------------------------------------------------------------------------------------------------------
  25++DBF3              InitialiseLineRead:
  26++DBF3                      ;break
  27++DBF3                      ldWriteZero UbnkLineArrayLen                    ; current line array index = 0
  27++DBF3 AF          >                        xor      a
  27++DBF4 32 0E C3    >                        ld       (UbnkLineArrayLen),a
  28++DBF7                      ldWriteZero UbnkLineArrayBytes                  ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
  28++DBF7 AF          >                        xor      a
  28++DBF8 32 0F C3    >                        ld       (UbnkLineArrayBytes),a
  29++DBFB                      ldWriteZero PLEDGECTR
  29++DBFB AF          >                        xor      a
  29++DBFC 32 F2 DB    >                        ld       (PLEDGECTR),a
  30++DBFF 3A 24 C3             ld          a,(EdgeCountAddr)
  31++DC02 DD 67                ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
  32++DC04 FD 2E 00             ld          iyl,0                               ; ixl = current edge index
  33++DC07 21 1C C2             ld          hl,UbnkLineArray                    ; head of array
  34++DC0A 22 14 81             ld          (varU16),hl                         ; store current line array pointer un varU16
  35++DC0D                      ldCopyByte  EdgeCountAddr, XX17                 ; XX17  = total number of edges to traverse edge counter
  35++DC0D 3A 24 C3    >                        ld       a,(EdgeCountAddr)
  35++DC10 32 18 81    >                        ld       (XX17),a
  36++DC13 3A 41 C0             ld          a,(UBnKexplDsp)                     ; get explosion status
  37++DC16                      JumpOnBitClear a,6,CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
  37++DC16 CB 77       >                        bit 	6,a
  37++DC18 CA 20 DC    >                        jp      z,CalculateNewLines
  38++DC1B E6 BF                and         $BF                                 ; else laser is firing, clear bit6.
  39++DC1D 32 41 C0             ld          (UBnKexplDsp),a                     ; INWK+31
  40++DC20              ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
  41++DC20              ; NOw we can calculate hull after including laser line
  42++DC20              CalculateNewLines:
  43++DC20              LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
  44++DC20              CheckEdgesForVisibility:
  45++DC20 21 25 C4             ld          hl,UBnkHullEdges
  46++DC23                      ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
  47++DC23 22 14 80             ld          (varV),hl                           ; V \ is pointer to where edges data start
  48++DC26 3A 1F C3             ld          a,(LineX4Addr)
  49++DC29 47                   ld          b,a                                 ; nbr of bytes of edge data
  50++DC2A              LL75Loop:                                               ; count Visible edges
  51++DC2A              IsEdgeInVisibilityRange:
  52++DC2A 2A 14 80             ld          hl,(varV)
  53++DC2D E5                   push        hl
  54++DC2E FD E1                pop         iy
  55++DC30                      IFDEF NOBACKFACECULL
  56++DC30 ~                        jp          VisibileEdge; DEBUGTODO
  57++DC30                      ENDIF
  58++DC30 3A 00 80             ld          a,(LastNormalVisible)               ; XX4 is visibility range
  59++DC33 57                   ld          d,a                                 ; d holds copy of XX4
  60++DC34              ; Get Edge Byte 0
  61++DC34 FD 7E 00             ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
  62++DC37                      JumpIfALTNusng d,LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
  62++DC37 BA          >                        cp      d
  62++DC38 DA 8A DC    >                        jp		c, LL78EdgeNotVisible
  63++DC3B              EdgeMayBeVisibile:
  64++DC3B              ; Get Edge Byte 1
  65++DC3B              IsFace1Visibile:                                        ; edges have 2 faces to test
  66++DC3B FD 7E 01             ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
  67++DC3E 4F                   ld          c,a                                 ;  c = a copy of byte 1
  68++DC3F E6 0F                and         $0F                                 ;
  69++DC41                      GetFaceAtA
  69++DC41 21 BE C0    >                    ld          hl,UbnkFaceVisArray
  69++DC44 ED 31       >                    add         hl,a
  69++DC46 7E          >                    ld          a,(hl)                              ; get face visibility
  70++DC47              ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
  71++DC47                      JumpIfAIsNotZero VisibileEdge                     ; LL70 visible edge
  71++DC47 A7          >                        and     a
  71++DC48 C2 5C DC    >                        jp	    nz,VisibileEdge
  72++DC4B              IsFace2Visibile:
  73++DC4B 79                   ld          a,c                                 ; restore byte 1 from c register
  74++DC4C ED 23                swapnib                                         ;
  75++DC4E E6 0F                and         $0F                                 ; swap high byte into low byte
  76++DC50 E5                   push        hl
  77++DC51                      GetFaceAtA
  77++DC51 21 BE C0    >                    ld          hl,UbnkFaceVisArray
  77++DC54 ED 31       >                    add         hl,a
  77++DC56 7E          >                    ld          a,(hl)                              ; get face visibility
  78++DC57 E1                   pop         hl
  79++DC58                      JumpIfAIsZero LL78EdgeNotVisible                ; edge not visible
  79++DC58 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  79++DC59 CA 8A DC    >                        jp	    z, LL78EdgeNotVisible
  80++DC5C              VisibileEdge:                                           ; Now we need to node id from bytes 2 - start and 3 - end
  81++DC5C              ;LL79--Visible edge--------------------------------------
  82++DC5C              ; Get Edge Byte 2
  83++DC5C FD 7E 02             ld          a,(IY+2)                            ; get Node id
  84++DC5F CD CE DB             call        getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
  85++DC62 FD 7E 03             ld          a,(IY+3)
  86++DC65 CD E0 DB             call        getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
  87++DC68 CD 92 C9             call        ClipLine
  88++DC6B 38 1D                jr          c,LL78EdgeNotVisible                ; LL78 edge not visible
  89++DC6D              LL80:                                                   ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
  90++DC6D ED 5B 14 81          ld          de,(varU16)                         ; clipped edges heap address
  91++DC71 21 92 C0             ld          hl,UBnkNewX1
  92++DC74                      FourLDIInstrunctions
  92++DC74 ED A0       >                        ldi
  92++DC76 ED A0       >                        ldi
  92++DC78 ED A0       >                        ldi
  92++DC7A ED A0       >                        ldi
  93++DC7C ED 53 14 81          ld          (varU16),de                         ; update U16 with current address
  94++DC80 21 0E C3             ld          hl,UbnkLineArrayLen                 ; we have loaded one line
  95++DC83 34                   inc         (hl)
  96++DC84 7E                   ld          a,(hl)
  97++DC85                      JumpIfAGTENusng LineArraySize,CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
  97++DC85 FE 32       >                        cp     LineArraySize
  97++DC87 D2 A0 DC    >                        jp		nc,CompletedLineGeneration
  98++DC8A              ; If we hit here we skip the write of line arryay u16
  99++DC8A              LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
 100++DC8A              LL78:
 101++DC8A 2A 14 80             ld          hl,(varV)                           ; varV is current edge address
 102++DC8D 3E 04                ld          a,4
 103++DC8F ED 31                add         hl,a
 104++DC91 22 14 80             ld          (varV),hl
 105++DC94 21 F2 DB             ld          hl,PLEDGECTR                        ;
 106++DC97 34                   inc         (hl)                                ;
 107++DC98 7E                   ld          a,(hl)                              ; current edge index ++
 108++DC99                      JumpIfANEMemusng XX17,LL75Loop                  ; compare with total number of edges
 108++DC99 21 18 81    >                        ld    hl,XX17
 108++DC9C BE          >                        cp    (hl)
 108++DC9D C2 2A DC    >                        jp      nz,LL75Loop
 109++DCA0              CompletedLineGeneration:
 110++DCA0              LL81:
 111++DCA0              LL81SHPPT:                                              ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
 112++DCA0 3A 0E C3             ld          a,(UbnkLineArrayLen)                ; UbnkLineArrayLen = nbr of lines loaded
 113++DCA3 CB 27                sla         a
 114++DCA5 CB 27                sla         a                                   ; multiple by 4 to equal number of bytes
 115++DCA7 32 0F C3             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
 116++DCAA              ExitEdgeDataLoop:
 117++DCAA C9                   ret
 118++DCAB
# file closed: ./Universe/Ships/PrepLines.asm
1887+ DCAB
1888+ DCAB              UnivBankSize  EQU $ - StartOfUniv
1889+ DCAB
# file closed: ./Universe/Ships/univ_ship_data.asm
 815  DCAB                                  DISPLAY "Bank ",BankUNIVDATA0," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data A"
 816  DCAB              ; Bank 71  ------------------------------------------------------------------------------------------------------------------------
 817  DCAB                                  SLOT    UniverseBankAddr
 818  DCAB                                  PAGE    BankUNIVDATA1
 819  DCAB                                  ORG	UniverseBankAddr,BankUNIVDATA1
 820  C000 FF           UNIVDATABlock1      DB $FF
 821  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 822  E000                                  DISPLAY "Bank ",BankUNIVDATA1," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data B"
 823  E000              ; Bank 72  ------------------------------------------------------------------------------------------------------------------------
 824  E000                                  SLOT    UniverseBankAddr
 825  E000                                  PAGE    BankUNIVDATA2
 826  E000                                  ORG	UniverseBankAddr,BankUNIVDATA2
 827  C000 FF           UNIVDATABlock2      DB $FF
 828  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 829  E000                                  DISPLAY "Bank ",BankUNIVDATA2," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data C"
 830  E000              ; Bank 73  ------------------------------------------------------------------------------------------------------------------------
 831  E000                                  SLOT    UniverseBankAddr
 832  E000                                  PAGE    BankUNIVDATA3
 833  E000                                  ORG	UniverseBankAddr,BankUNIVDATA3
 834  C000 FF           UNIVDATABlock3      DB $FF
 835  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 836  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data D"
 837  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
 838  E000                                  SLOT    UniverseBankAddr
 839  E000                                  PAGE    BankUNIVDATA4
 840  E000                                  ORG	UniverseBankAddr,BankUNIVDATA4
 841  C000 FF           UNIVDATABlock4      DB $FF
 842  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 843  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data E"
 844  E000              ; Bank 75  ------------------------------------------------------------------------------------------------------------------------
 845  E000                                  SLOT    UniverseBankAddr
 846  E000                                  PAGE    BankUNIVDATA5
 847  E000                                  ORG	UniverseBankAddr,BankUNIVDATA5
 848  C000 FF           UNIVDATABlock5      DB $FF
 849  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 850  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data F"
 851  E000              ; Bank 76  ------------------------------------------------------------------------------------------------------------------------
 852  E000                                  SLOT    UniverseBankAddr
 853  E000                                  PAGE    BankUNIVDATA6
 854  E000                                  ORG	UniverseBankAddr,BankUNIVDATA6
 855  C000 FF           UNIVDATABlock6      DB $FF
 856  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 857  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data G"
 858  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
 859  E000                                  SLOT    UniverseBankAddr
 860  E000                                  PAGE    BankUNIVDATA7
 861  E000                                  ORG	UniverseBankAddr,BankUNIVDATA7
 862  C000 FF           UNIVDATABlock7      DB $FF
 863  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 864  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data H"
 865  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
 866  E000                                  SLOT    UniverseBankAddr
 867  E000                                  PAGE    BankUNIVDATA8
 868  E000                                  ORG	UniverseBankAddr,BankUNIVDATA8
 869  C000 FF           UNIVDATABlock8      DB $FF
 870  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 871  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data I"
 872  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
 873  E000                                  SLOT    UniverseBankAddr
 874  E000                                  PAGE    BankUNIVDATA9
 875  E000                                  ORG	UniverseBankAddr,BankUNIVDATA9
 876  C000 FF           UNIVDATABlock9      DB $FF
 877  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 878  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data J"
 879  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
 880  E000                                  SLOT    UniverseBankAddr
 881  E000                                  PAGE    BankUNIVDATA10
 882  E000                                  ORG	UniverseBankAddr,BankUNIVDATA10
 883  C000 FF           UNIVDATABlock10     DB $FF
 884  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 885  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data K"
 886  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
 887  E000                                  SLOT    UniverseBankAddr
 888  E000                                  PAGE    BankUNIVDATA11
 889  E000                                  ORG	UniverseBankAddr,BankUNIVDATA11
 890  C000 FF           UNIVDATABlock11     DB $FF
 891  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 892  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data L"
 893  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
 894  E000                                  SLOT    UniverseBankAddr
 895  E000                                  PAGE    BankUNIVDATA12
 896  E000                                  ORG	UniverseBankAddr,BankUNIVDATA12
 897  C000 FF           UNIVDATABlock12     DB $FF
 898  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 899  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data M"
 900  E000              ; Bank 83  ------------------------------------------------------------------------------------------------------------------------
 901  E000                                      SLOT    SunBankAddr
 902  E000                                      PAGE    BankSunData
 903  E000                                      ORG	    SunBankAddr,BankSunData
 904  C000                                      INCLUDE "./Universe/Sun/sun_data.asm"
# file opened: ./Universe/Sun/sun_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; In  flight ship data tables
   4+ C000              ; There can be upto &12 objects in flight.
   5+ C000              ; To avoid hassle of memory heap managment, the free list
   6+ C000              ; will correspond to a memory bank offset so data will be held in
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   9+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  10+ C000              ; This means each gets its own line list, inwork etc
  11+ C000
  12+ C000              ; "Runtime Ship Data paged into in Bank 7"
  13+ C000              ;                      0123456789ABCDEF
  14+ C000 53 75 6E 20  StartOfSun:        DB "Sun Data ......."
  14+ C004 44 61 74 61
  14+ C008 20 2E 2E 2E
  14+ C00C 2E 2E 2E 2E
  15+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  16+ C010              CheckRowHLOnScreen:     MACRO   failtarget
  17+ C010 ~                                    ld      a,h                             ; is h byte set, i.e > 256 or < 0
  18+ C010 ~                                    and     a                               ; .
  19+ C010 ~                                    jr      nz,failtarget                   ; h <> 0 so fails (covers <0 and > 255
  20+ C010 ~                                    ld      a,l                             ; l bit 7 0?
  21+ C010 ~                                    and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
  22+ C010 ~                                    jr      nz,failtarget                   ;
  23+ C010                                      ENDM
  24+ C010
  25+ C010              ; IY = SBnKLineArray + rowValue*2
  26+ C010              IYEquRowN:              MACRO   rowValue                        ; set up iy as target address
  27+ C010 ~                                    ld      a,rowValue
  28+ C010 ~                                    ld      hl,SBnKLineArray
  29+ C010 ~                                    add     hl,a
  30+ C010 ~                                    add     hl,a
  31+ C010 ~                                    push    hl
  32+ C010 ~                                    pop     iy
  33+ C010                                      ENDM
  34+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  35+ C010              ; Universe map substibute for INWK
  36+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  37+ C010              SBnKDataBlock:
  38+ C010                                      INCLUDE "./Universe/Sun/SunPosVars.asm"
# file opened: ././Universe/Sun/SunPosVars.asm
   1++C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C010 00           SBnKxlo                     DB  0                       ; INWK+0
   3++C011 00           SBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C012 00           SBnKxsgn                    DB  0                       ; INWK+2
   5++C013 00           SBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C014 00           SBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C015 00           SBnKysgn                    DB  0                       ; INWK +5
   8++C016 00           SBnKzlo                     DB  0                       ; INWK +6
   9++C017 00           SBnKzhi                     DB  0                       ; INWK +7
  10++C018 00           SBnKzsgn                    DB  0                       ; INWK +8
  11++C019 00 00        SunCompassX                 DW  0
  12++C01B 00 00        SunCompassY                 DW  0
  13++C01D
# file closed: ././Universe/Sun/SunPosVars.asm
  39+ C01D                                      INCLUDE "./Universe/Sun/SunRotationMatrixVars.asm"
# file opened: ././Universe/Sun/SunRotationMatrixVars.asm
   1++C01D              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C01D              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C01D 00 00        SBnKrotmatSidevX            DW  0                       ; INWK +21
   4++C01F              SBnKrotmatSidev             equ SBnKrotmatSidevX
   5++C01F 00 00        SBnKrotmatSidevY            DW  0                       ; INWK +23
   6++C021 00 00        SBnKrotmatSidevZ            DW  0                       ; INWK +25
   7++C023 00 00        SBnKrotmatRoofvX            DW  0                       ; INWK +15
   8++C025              SBnKrotmatRoofv             equ SBnKrotmatRoofvX
   9++C025 00 00        SBnKrotmatRoofvY            DW  0                       ; INWK +17
  10++C027 00 00        SBnKrotmatRoofvZ            DW  0                       ; INWK +19
  11++C029 00 00        SBnKrotmatNosevX            DW  0                       ; INWK +9
  12++C02B              SBnKrotmatNosev             EQU SBnKrotmatNosevX
  13++C02B 00 00        SBnKrotmatNosevY            DW  0                       ; INWK +11
  14++C02D 00 00        SBnKrotmatNosevZ            DW  0                       ; INWK +13
  15++C02F
# file closed: ././Universe/Sun/SunRotationMatrixVars.asm
  40+ C02F                                      INCLUDE "./Universe/Sun/SunAIRuntimeData.asm"
# file opened: ././Universe/Sun/SunAIRuntimeData.asm
   1++C02F              ; -- Ship AI data
   2++C02F 00           SBnKRotXCounter             DB  0                       ; INWK +29
   3++C030 00           SBnKRotZCounter             DB  0                       ; INWK +30
   4++C031 00           SBnkCam0yLo                 DB  0                       ; INWK +33 ????
   5++C032 00           SBnkCam0yHi                 DB  0                       ; INWK +34?????
   6++C033
# file closed: ././Universe/Sun/SunAIRuntimeData.asm
  41+ C033
  42+ C033
  43+ C033                                      INCLUDE "./Universe/Sun/SunXX16Vars.asm"
# file opened: ././Universe/Sun/SunXX16Vars.asm
   1++C033              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C033 00 00        SBnkTransmatSidevX          DW  0               ; XX16+0
   3++C035              SBnkTransmatSidev           EQU SBnkTransmatSidevX
   4++C035 00 00        SBnkTransmatSidevY          DW 0                ; XX16+2
   5++C037 00 00        SBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C039 00 00        SBnkTransmatRoofvX          DW 0
   7++C03B              SBnkTransmatRoofv           EQU SBnkTransmatRoofvX
   8++C03B 00 00        SBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C03D 00 00        SBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C03F 00 00        SBnkTransmatNosevX          DW 0
  11++C041              SBnkTransmatNosev           EQU SBnkTransmatNosevX
  12++C041 00 00        SBnkTransmatNosevY          DW 0                ; XX16+2
  13++C043 00 00        SBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C045 00 00        SBnkTransmatTransX          DW 0
  15++C047 00 00        SBnkTransmatTransY          DW 0
  16++C049 00 00        SBnkTransmatTransZ          DW 0
  17++C04B              SunXX16                      equ SBnkTransmatSidev
  18++C04B              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C04B 00 00        SBnkTransInvRow0x0          DW 0
  20++C04D 00 00        SBnkTransInvRow0x1          DW 0
  21++C04F 00 00        SBnkTransInvRow0x2          DW 0
  22++C051 00 00        SBnkTransInvRow0x3          DW 0
  23++C053 00 00        SBnkTransInvRow1y0          DW 0
  24++C055 00 00        SBnkTransInvRow1y1          DW 0
  25++C057 00 00        SBnkTransInvRow1y2          DW 0
  26++C059 00 00        SBnkTransInvRow1y3          DW 0
  27++C05B 00 00        SBnkTransInvRow2z0          DW 0
  28++C05D 00 00        SBnkTransInvRow2z1          DW 0
  29++C05F 00 00        SBnkTransInvRow2z2          DW 0
  30++C061 00 00        SBnkTransInvRow2z3          DW 0
  31++C063
  32++C063              SunXX16Inv             equ SBnkTransInvRow0x0
  33++C063
# file closed: ././Universe/Sun/SunXX16Vars.asm
  44+ C063                                      INCLUDE "./Universe/Sun/SunXX25Vars.asm"
# file opened: ././Universe/Sun/SunXX25Vars.asm
   1++C063              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C063 00           SBnKProjxLo                 DB  0
   3++C064 00           SBnKProjxHi                 DB  0
   4++C065 00           SBnKProjxSgn                DB  0
   5++C066              SBnKProjx                   EQU SBnKProjxLo
   6++C066 00           SBnKProjyLo                 DB  0
   7++C067 00           SBnKProjyHi                 DB  0
   8++C068 00           SBnKProjySgn                DB  0
   9++C069              SBnKProjy                   EQU SBnKProjyLo
  10++C069 00           SBnKProjzLo                 DB  0
  11++C06A 00           SBnKProjzHi                 DB  0
  12++C06B 00           SBnKProjzSgn                DB  0
  13++C06C              SBnKProjz                   EQU SBnKProjzLo
  14++C06C              SXX25                       EQU SBnKProjxLo
  15++C06C
# file closed: ././Universe/Sun/SunXX25Vars.asm
  45+ C06C                                      INCLUDE "./Universe/Sun/SunXX18Vars.asm"
# file opened: ././Universe/Sun/SunXX18Vars.asm
   1++C06C              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C06C 00           SBnKDrawCam0xLo             DB  0               ; XX18+0
   3++C06D 00           SBnKDrawCam0xHi             DB  0               ; XX18+1
   4++C06E 00           SBnKDrawCam0xSgn            DB  0               ; XX18+2
   5++C06F              SBnKDrawCam0x               equ SBnKDrawCam0xLo
   6++C06F 00           SBnKDrawCam0yLo             DB  0               ; XX18+3
   7++C070 00           SBnKDrawCam0yHi             DB  0               ; XX18+4
   8++C071 00           SBnKDrawCam0ySgn            DB  0               ; XX18+5
   9++C072              SBnKDrawCam0y               equ SBnKDrawCam0yLo
  10++C072 00           SBnKDrawCam0zLo             DB  0               ; XX18+6
  11++C073 00           SBnKDrawCam0zHi             DB  0               ; XX18+7
  12++C074 00           SBnKDrawCam0zSgn            DB  0               ; XX18+8
  13++C075              SBnKDrawCam0z               equ SBnKDrawCam0zLo
  14++C075              SXX18                       equ SBnKDrawCam0xLo
  15++C075
# file closed: ././Universe/Sun/SunXX18Vars.asm
  46+ C075
  47+ C075              ; Used to make 16 bit reads a little cleaner in source code
  48+ C075 00 00 00     SBnKzPoint                  DS  3
  49+ C078              SBnKzPointLo                equ SBnKzPoint
  50+ C078              SBnKzPointHi                equ SBnKzPoint+1
  51+ C078              SBnKzPointSign              equ SBnKzPoint+2
  52+ C078                                      INCLUDE "./Universe/Sun/SunXX15Vars.asm"
# file opened: ././Universe/Sun/SunXX15Vars.asm
   1++C078              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C078 00           SBnKXScaled                 DB  0               ; XX15+0Xscaled
   3++C079 00           SBnKXScaledSign             DB  0               ; XX15+1xsign
   4++C07A 00           SBnKYScaled                 DB  0               ; XX15+2yscaled
   5++C07B 00           SBnKYScaledSign             DB  0               ; XX15+3ysign
   6++C07C 00           SBnKZScaled                 DB  0               ; XX15+4zscaled
   7++C07D 00           SBnKZScaledSign             DB  0               ; XX15+5zsign
   8++C07E
   9++C07E              SXX15                       equ SBnKXScaled
  10++C07E              SXX15VecX                   equ SXX15
  11++C07E              SXX15VecY                   equ SXX15+1
  12++C07E              SXX15VecZ                   equ SXX15+2
  13++C07E              SBnKXPoint                  equ SXX15
  14++C07E              SBnKXPointLo                equ SXX15+0
  15++C07E              SBnKXPointHi                equ SXX15+1
  16++C07E              SBnKXPointSign              equ SXX15+2
  17++C07E              SBnKYPoint                  equ SXX15+3
  18++C07E              SBnKYPointLo                equ SXX15+3
  19++C07E              SBnKYPointHi                equ SXX15+4
  20++C07E              SBnKYPointSign              equ SXX15+5
  21++C07E
# file closed: ././Universe/Sun/SunXX15Vars.asm
  53+ C07E                                      INCLUDE "./Universe/Sun/SunXX12Vars.asm"
# file opened: ././Universe/Sun/SunXX12Vars.asm
   1++C07E              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07E              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07E 00           SBnKXX12xLo                 DB  0               ; XX12+0
   4++C07F 00           SBnKXX12xSign               DB  0               ; XX12+1
   5++C080 00           SBnKXX12yLo                 DB  0               ; XX12+2
   6++C081 00           SBnKXX12ySign               DB  0               ; XX12+3
   7++C082 00           SBnKXX12zLo                 DB  0               ; XX12+4
   8++C083 00           SBnKXX12zSign               DB  0               ; XX12+5
   9++C084 00 00 00...  SXX12Save                   DS  6
  10++C08A 00 00 00...  SXX12Save2                  DS  6
  11++C090              SXX12                       equ SBnKXX12xLo
  12++C090              varSXX12                    equ SBnKXX12xLo
  13++C090              ; Repurposed XX12 when plotting lines
  14++C090              SBnkY2                      equ SXX12+0
  15++C090              SbnKy2Lo                    equ SXX12+0
  16++C090              SBnkY2Hi                    equ SXX12+1
  17++C090              SBnkDeltaXLo                equ SXX12+2
  18++C090              SBnkDeltaXHi                equ SXX12+3
  19++C090              SBnkDeltaYLo                equ SXX12+4
  20++C090              SBnkDeltaYHi                equ SXX12+5
  21++C090              SbnkGradient                equ SXX12+2
  22++C090              SBnkTemp1                   equ SXX12+2
  23++C090              SBnkTemp1Lo                 equ SXX12+2
  24++C090              SBnkTemp1Hi                 equ SXX12+3
  25++C090              SBnkTemp2                   equ SXX12+3
  26++C090              SBnkTemp2Lo                 equ SXX12+3
  27++C090              SBnkTemp2Hi                 equ SXX12+4
  28++C090
# file closed: ././Universe/Sun/SunXX12Vars.asm
  54+ C090
  55+ C090
  56+ C090              ; Post clipping the results are now 8 bit
  57+ C090 00           SBnKVisibility              DB  0               ; replaces general purpose xx4 in rendering
  58+ C091 00           SBnKProjectedY              DB  0
  59+ C092 00           SBnKProjectedX              DB  0
  60+ C093              SBnKProjected               equ SBnKProjectedY  ; resultant projected position
  61+ C093 00 00 00...  SunXX15Save                 DS  8
  62+ C09B 00 00 00...  SunXX15Save2                DS  8
  63+ C0A3              ; Heap (or array) information for lines and normals
  64+ C0A3              ; Coords are stored XY,XY,XY,XY
  65+ C0A3              ; Normals
  66+ C0A3              ; This needs re-oprganising now.
  67+ C0A3              ; Runtime Calculation Store
  68+ C0A3
  69+ C0A3              SunLineArraySize            equ 128 * 2
  70+ C0A3              ; Storage arrays for data
  71+ C0A3
  72+ C0A3 00 00 00...  SBnKLineArray               DS SunLineArraySize ; XX19 Holds the clipped line details
  73+ C1A3              SBnKLinesHeapMax            EQU $ - SBnKLineArray
  74+ C1A3
  75+ C1A3 00 00        LineArrayPtr                DW  0
  76+ C1A5
  77+ C1A5              SBnK_Data_len               EQU $ - SBnKDataBlock
  78+ C1A5
  79+ C1A5              ; --------------------------------------------------------------
  80+ C1A5 21 10 C0     ResetSBnKData:          ld      hl,SBnKDataBlock
  81+ C1A8 11 95 01                             ld      de,SBnK_Data_len
  82+ C1AB AF                                   xor     a
  83+ C1AC CD A3 7C                             call    memfill_dma
  84+ C1AF C9                                   ret
  85+ C1B0              ; --------------------------------------------------------------
  86+ C1B0 21 10 C0     ResetSBnKPosition:      ld      hl,SBnKxlo
  87+ C1B3 06 09                                ld      b, 3*3
  88+ C1B5 AF                                   xor     a
  89+ C1B6 77           .zeroLoop:              ld      (hl),a
  90+ C1B7 23                                   inc     hl
  91+ C1B8 10 FC                                djnz    .zeroLoop
  92+ C1BA C9                                   ret
  93+ C1BB              ; This uses UBNKNodeArray as the list
  94+ C1BB              ; the array is 256 * 2 bytes
  95+ C1BB              ; counter is current row y pos
  96+ C1BB              ; byte 1 is start x pos
  97+ C1BB              ; byte 2 is end x pos
  98+ C1BB              ; if they are both 0 then skip
  99+ C1BB              ; its always horizontal, yellow
 100+ C1BB
 101+ C1BB              ; PLANET
 102+ C1BB
 103+ C1BB
 104+ C1BB              .SunNoDraw:             SetCarryFlag                    ; ship is behind so do not draw, so we don't care abour draw as dot
 104+ C1BB 37          >                        scf
 105+ C1BC C9                                   ret
 106+ C1BD
 107+ C1BD
 108+ C1BD
 109+ C1BD              SunBankDraw:            MACRO
 110+ C1BD ~            .drawLoop               ld      a,(hl)
 111+ C1BD ~                                    ld      c,a                     ; c = left column
 112+ C1BD ~                                    inc     hl
 113+ C1BD ~                                    ld      d,(hl)                  ; d = right col
 114+ C1BD ~                                    inc     hl                      ; now ready for next linel
 115+ C1BD ~                                    push    hl,,bc
 116+ C1BD ~                                    cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 117+ C1BD ~                                    IfResultZeroGoto .NoLineDraw
 118+ C1BD ~                                    ld      a,d                     ; get right col back
 119+ C1BD ~                                    sub     c                       ; subtract left so a = length
 120+ C1BD ~                                    inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 121+ C1BD ~                                    call    z, .FixWidth
 122+ C1BD ~                                    ld      d,a                     ; de = length (e - d)
 123+ C1BD ~                                    ld      e,216                   ; yellow
 124+ C1BD ~                                    call    l2_draw_horz_dma        ; draw without bank switch
 125+ C1BD ~            .NoLineDraw:            pop     hl,,bc
 126+ C1BD ~                                    inc     b
 127+ C1BD ~                                    dec     iyh
 128+ C1BD ~                                    IfResultNotZeroGoto  .drawLoop
 129+ C1BD                                      ENDM
 130+ C1BD
 131+ C1BD
 132+ C1BD
 133+ C1BD              SunDraw:                MMUSelectLayer2
 133+ C1BD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 134+ C1C1 3A A1 C5     .OptimiseStartPos:      ld      a,(MinYOffset)
 135+ C1C4                                      JumpIfAIsZero .OffsetIsZero     ; if offset is 0 then just initate as normal
 135+ C1C4 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 135+ C1C5 CA D5 C1    >                        jp	    z, .OffsetIsZero
 136+ C1C8                                      JumpIfALTNusng 64, .OffsetLT64  ; if offset >=64 then we adjust and mve to bank 0
 136+ C1C8 FE 40       >                        cp      64
 136+ C1CA DA E2 C1    >                        jp		c, .OffsetLT64
 137+ C1CD D6 40        .OffsetGTE64:           sub     64
 138+ C1CF 32 A1 C5                             ld      (MinYOffset),a          ; adjust offset for bank 2
 139+ C1D2 C3 1A C2                             jp      .StartBank2
 140+ C1D5 06 00        .OffsetIsZero:          ld      b,0                     ; row
 141+ C1D7 FD 26 40                             ld      iyh,64                  ; counter
 142+ C1DA 21 A3 C0                             ld      hl,SBnKLineArray        ; set hl to start of array
 143+ C1DD C3 F4 C1                             jp      .StartBank1
 144+ C1E0              ;-- Snuck routine in here so that the macro will be happier
 145+ C1E0 3D           .FixWidth:              dec     a                       ; if carry resulted in a value of zero then correct
 146+ C1E1 C9                                   ret
 147+ C1E2 21 A3 C0     .OffsetLT64:            ld      hl,SBnKLineArray        ; adjust hl for line array offset
 148+ C1E5 ED 31                                add     hl,a                    ; .
 149+ C1E7 ED 31                                add     hl,a                    ; .
 150+ C1E9 47                                   ld      b,a                     ; set b row to the actual offset
 151+ C1EA 4F                                   ld      c,a                     ; iyh = 64 - Y offset
 152+ C1EB 3E 40                                ld      a,64                    ; .
 153+ C1ED 91                                   sub     c                       ; .
 154+ C1EE FD 67                                ld      iyh,a
 155+ C1F0 AF                                   xor     a                       ; Ready bank 2 with no offset
 156+ C1F1 32 A1 C5                             ld      (MinYOffset),a          ; .
 157+ C1F4 D9           .StartBank1:            exx
 158+ C1F5 3E 00                                ld      a,LAYER2_SHIFTED_SCREEN_TOP
 159+ C1F7 CD 37 E0                             call    asm_l2_bank_select      ; get in the first bank, we will only then bank select when needed
 160+ C1FA D9                                   exx
 161+ C1FB                                      SunBankDraw
 161+ C1FB 7E          >.drawLoop               ld      a,(hl)
 161+ C1FC 4F          >                        ld      c,a                     ; c = left column
 161+ C1FD 23          >                        inc     hl
 161+ C1FE 56          >                        ld      d,(hl)                  ; d = right col
 161+ C1FF 23          >                        inc     hl                      ; now ready for next linel
 161+ C200 E5 C5       >                        push    hl,,bc
 161+ C202 BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 161+ C203             >                        IfResultZeroGoto .NoLineDraw
 161+ C203 CA 12 C2    >                        jp	z,.NoLineDraw
 161+ C206 7A          >                        ld      a,d                     ; get right col back
 161+ C207 91          >                        sub     c                       ; subtract left so a = length
 161+ C208 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 161+ C209 CC E0 C1    >                        call    z, .FixWidth
 161+ C20C 57          >                        ld      d,a                     ; de = length (e - d)
 161+ C20D 1E D8       >                        ld      e,216                   ; yellow
 161+ C20F CD 8D E2    >                        call    l2_draw_horz_dma        ; draw without bank switch
 161+ C212 C1 E1       >.NoLineDraw:            pop     hl,,bc
 161+ C214 04          >                        inc     b
 161+ C215 FD 25       >                        dec     iyh
 161+ C217             >                        IfResultNotZeroGoto  .drawLoop
 161+ C217 C2 FB C1    >                        jp	nz,.drawLoop
 162+ C21A 3A A1 C5     .StartBank2:            ld      a,(MinYOffset)
 163+ C21D                                      JumpIfAIsZero .OffsetBank2IsZero; if offset is 0 then we just continue, offset can never be >127 else there would be no draw
 163+ C21D A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 163+ C21E CA 32 C2    >                        jp	    z, .OffsetBank2IsZero
 164+ C221 21 23 C1     .NotZeroOffset:         ld      hl,SBnKLineArray + (64 * 2); adjust to correct offset
 165+ C224 ED 31                                add     hl,a
 166+ C226 ED 31                                add     hl,a
 167+ C228 4F                                   ld      c,a                     ; iyh = 64 - offset
 168+ C229 3E 40                                ld      a,64                    ; .
 169+ C22B 91                                   sub     c                       ; .
 170+ C22C FD 67                                ld      iyh,a                   ; .
 171+ C22E 41                                   ld      b,c                     ; b = offset row
 172+ C22F C3 3A C2                             jp      .drawLineBank2
 173+ C232 21 23 C1     .OffsetBank2IsZero:     ld      hl,SBnKLineArray + (64 * 2); start with offset adjusted
 174+ C235 06 00                                ld      b,0
 175+ C237 FD 26 40                             ld      iyh,64
 176+ C23A D9           .drawLineBank2:         exx
 177+ C23B 3E 40                                ld      a,LAYER2_SHIFTED_SCREEN_MIDDLE
 178+ C23D CD 37 E0                             call    asm_l2_bank_select      ; now do the lower bank
 179+ C240 D9                                   exx
 180+ C241              ; Could make this a sub routine but unwrapping saves a call
 181+ C241                                      SunBankDraw
 181+ C241 7E          >.drawLoop               ld      a,(hl)
 181+ C242 4F          >                        ld      c,a                     ; c = left column
 181+ C243 23          >                        inc     hl
 181+ C244 56          >                        ld      d,(hl)                  ; d = right col
 181+ C245 23          >                        inc     hl                      ; now ready for next linel
 181+ C246 E5 C5       >                        push    hl,,bc
 181+ C248 BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 181+ C249             >                        IfResultZeroGoto .NoLineDraw
 181+ C249 CA 58 C2    >                        jp	z,.NoLineDraw
 181+ C24C 7A          >                        ld      a,d                     ; get right col back
 181+ C24D 91          >                        sub     c                       ; subtract left so a = length
 181+ C24E 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 181+ C24F CC E0 C1    >                        call    z, .FixWidth
 181+ C252 57          >                        ld      d,a                     ; de = length (e - d)
 181+ C253 1E D8       >                        ld      e,216                   ; yellow
 181+ C255 CD 8D E2    >                        call    l2_draw_horz_dma        ; draw without bank switch
 181+ C258 C1 E1       >.NoLineDraw:            pop     hl,,bc
 181+ C25A 04          >                        inc     b
 181+ C25B FD 25       >                        dec     iyh
 181+ C25D             >                        IfResultNotZeroGoto  .drawLoop
 181+ C25D C2 41 C2    >                        jp	nz,.drawLoop
 182+ C260 C9                                   ret
 183+ C261
 184+ C261              ; --------------------------------------------------------------
 185+ C261              ; This sets current universe object to a star / sun, they use sign + 23 bit positions
 186+ C261 CD A5 C1     CreateSun:              call    ResetSBnKData
 187+ C264 3A 0C 82                             ld      a,(WorkingSeeds+3)
 188+ C267 E6 07                                and     %00000111
 189+ C269 F6 81                                or      %10000001
 190+ C26B 32 18 C0                             ld      (SBnKzsgn),a
 191+ C26E 3A 0E 82                             ld      a,(WorkingSeeds+5)
 192+ C271 E6 03                                and     %00000011
 193+ C273 32 12 C0                             ld      (SBnKxsgn),a
 194+ C276 32 15 C0                             ld      (SBnKysgn),a
 195+ C279 21 00 00                             ld      hl, $0000
 196+ C27C 22 17 C0                             ld      (SBnKzhi),hl
 197+ C27F 3E E3                                ld      a, $E3
 198+ C281 32 16 C0                             ld      (SBnKzlo),a
 199+ C284 C9                                   ret
 200+ C285              ; --------------------------------------------------------------
 201+ C285              ; This creates a sun relative to space station on launch
 202+ C285 CD A5 C1     CreateSunLaunched:      call    ResetSBnKData
 203+ C288 21 00 00                             ld      hl,0
 204+ C28B 3E 00                                ld      a,0
 205+ C28D 22 10 C0                             ld      (SBnKxlo),hl
 206+ C290 22 13 C0                             ld      (SBnKylo),hl
 207+ C293 21 00 E0                             ld      hl,$E000
 208+ C296 22 16 C0                             ld      (SBnKzlo),hl
 209+ C299 32 12 C0                             ld      (SBnKxsgn),a
 210+ C29C 32 18 C0                             ld      (SBnKzsgn),a
 211+ C29F 3E 06                                ld      a,$06
 212+ C2A1 32 15 C0                             ld      (SBnKysgn),a
 213+ C2A4 C9                                   ret
 214+ C2A5              ; --------------------------------------------------------------
 215+ C2A5              ; This sets current universe object to a planet,they use sign + 23 bit positions
 216+ C2A5              ;;TODOCreatePlanet:           call    ResetSBnKData
 217+ C2A5              ;;TODO                        ld      a,(DisplayTekLevel)
 218+ C2A5              ;;TODO                        and     $00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
 219+ C2A5              ;;TODO                        or      $10000000
 220+ C2A5              ;;TODO                        ld      (SBnKShipType),a
 221+ C2A5              ;;TODO                        xor     a
 222+ C2A5              ;;TODO                        ld      (SBnKaiatkecm),a
 223+ C2A5              ;;TODO                        MaxUnivPitchAndRoll
 224+ C2A5              ;;TODO                        ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
 225+ C2A5              ;;TODO                        and     %00000011               ; .
 226+ C2A5              ;;TODO                        adc     3                       ; .
 227+ C2A5              ;;TODO                        ld      (SBnKzsgn),a            ; set z sign to 3 + C + 0..3 bits
 228+ C2A5              ;;TODO                        rr      a
 229+ C2A5              ;;TODO                        ld      (PlanetXsgn),a
 230+ C2A5              ;;TODO                        ld      (PlanetYsgn),a
 231+ C2A5              ;;TODO                        ret
 232+ C2A5
 233+ C2A5
 234+ C2A5                                 ;     include "./Maths/ADDHLDESignBC.asm"
 235+ C2A5
 236+ C2A5 7C           SunADDHLDESignedv3:     ld      a,h
 237+ C2A6 E6 80                                and     SignOnly8Bit
 238+ C2A8 47                                   ld      b,a                         ;save sign bit in b
 239+ C2A9 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 240+ C2AA                                      JumpIfNegative .SunADDHLDEOppSGN    ;Signs are opposite there fore we can subtract to get difference
 240+ C2AA FA C5 C2    >                        jp		m, .SunADDHLDEOppSGN
 241+ C2AD 78           .SunADDHLDESameSigns:   ld      a,b
 242+ C2AE B2                                   or      d
 243+ C2AF                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 243+ C2AF FA B7 C2    >                        jp		m, .SunADDHLDESameNeg
 244+ C2B2                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 244+ C2B2 FA B7 C2    >                        jp		m, .SunADDHLDESameNeg
 245+ C2B5 19                                   add     hl,de
 246+ C2B6 C9                                   ret
 247+ C2B7 7C           .SunADDHLDESameNeg:     ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 248+ C2B8 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 249+ C2BA 67                                   ld      h,a
 250+ C2BB 7A                                   ld      a,d
 251+ C2BC E6 7F                                and     SignMask8Bit
 252+ C2BE 57                                   ld      d,a
 253+ C2BF 19                                   add     hl,de
 254+ C2C0 3E 80                                ld      a,SignOnly8Bit
 255+ C2C2 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 256+ C2C3 67                                   ld      h,a
 257+ C2C4 C9                                   ret
 258+ C2C5 7C           .SunADDHLDEOppSGN:      ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 259+ C2C6 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 260+ C2C8 67                                   ld      h,a
 261+ C2C9 7A                                   ld      a,d
 262+ C2CA E6 7F                                and     SignMask8Bit
 263+ C2CC 57                                   ld      d,a
 264+ C2CD B7                                   or      a
 265+ C2CE ED 52                                sbc     hl,de
 266+ C2D0 38 04                                jr      c,.SunADDHLDEOppInvert
 267+ C2D2 78           .SunADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 268+ C2D3 B4                                   or      h
 269+ C2D4 67                                   ld      h,a                         ; set the previou sign value
 270+ C2D5 C9                                   ret
 271+ C2D6              .SunADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 271+ C2D6 AF          >                    xor a
 271+ C2D7 95          >                    sub l
 271+ C2D8 6F          >                    ld l,a
 271+ C2D9 9F          >                    sbc a,a
 271+ C2DA 94          >                    sub h
 271+ C2DB 67          >                    ld h,a
 272+ C2DC 78                                   ld      a,b
 273+ C2DD EE 80                                xor     SignOnly8Bit                ; flip sign bit
 274+ C2DF B4                                   or      h
 275+ C2E0 67                                   ld      h,a                         ; recover sign
 276+ C2E1 C9                                   ret
 277+ C2E2
 278+ C2E2              ; we could cheat, flip the sign of DE and just add but its not very optimised
 279+ C2E2 7C           .SunSUBHLDESignedv3:        ld      a,h
 280+ C2E3 E6 80                                and     SignOnly8Bit
 281+ C2E5 47                                   ld      b,a                         ;save sign bit in b
 282+ C2E6 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 283+ C2E7                                      JumpIfNegative .SunSUBHLDEOppSGN        ;Signs are opposite therefore we can add
 283+ C2E7 FA 15 C3    >                        jp		m, .SunSUBHLDEOppSGN
 284+ C2EA 78           .SunSUBHLDESameSigns:       ld      a,b
 285+ C2EB B2                                   or      d
 286+ C2EC                                      JumpIfNegative .SunSUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 286+ C2EC FA F6 C2    >                        jp		m, .SunSUBHLDESameNeg
 287+ C2EF B7                                   or      a
 288+ C2F0 ED 52                                sbc     hl,de
 289+ C2F2                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 289+ C2F2 FA 09 C3    >                        jp		m, .SunSUBHLDESameOvrFlw
 290+ C2F5 C9                                   ret
 291+ C2F6 7C           .SunSUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 292+ C2F7 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 293+ C2F9 67                                   ld      h,a
 294+ C2FA 7A                                   ld      a,d
 295+ C2FB E6 7F                                and     SignMask8Bit
 296+ C2FD 57                                   ld      d,a
 297+ C2FE B7                                   or      a
 298+ C2FF ED 52                                sbc     hl,de
 299+ C301                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 299+ C301 FA 09 C3    >                        jp		m, .SunSUBHLDESameOvrFlw
 300+ C304 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 301+ C305 F6 80                                or      SignOnly8Bit
 302+ C307 67                                   ld      h,a
 303+ C308 C9                                   ret
 304+ C309              .SunSUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 304+ C309 AF          >                    xor a
 304+ C30A 95          >                    sub l
 304+ C30B 6F          >                    ld l,a
 304+ C30C 9F          >                    sbc a,a
 304+ C30D 94          >                    sub h
 304+ C30E 67          >                    ld h,a
 305+ C30F 78                                   ld      a,b
 306+ C310 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 307+ C312 B4                                   or      h
 308+ C313 67                                   ld      h,a                         ; recover sign
 309+ C314 C9                                   ret
 310+ C315 B7           .SunSUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 311+ C316 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 312+ C317 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 313+ C319 67                                   ld      h,a
 314+ C31A 7A                                   ld      a,d
 315+ C31B E6 7F                                and     SignMask8Bit
 316+ C31D 57                                   ld      d,a
 317+ C31E 19                                   add     hl,de
 318+ C31F 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 319+ C320 B4                                   or      h
 320+ C321 67                                   ld      h,a                         ; set the previou sign value
 321+ C322 C9                                   ret
 322+ C323
 323+ C323
 324+ C323              .SunSBCHLDESigned:      JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 324+ C323 CB 7C       >                        bit 	7,h
 324+ C325 C2 36 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 325+ C328              .SunSBCHLDEhlPos:       JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 325+ C328 CB 7C       >                        bit 	7,h
 325+ C32A C2 36 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 326+ C32D ED 52        .SunSBCHLDEhlPosDePos:  sbc     hl,de                           ; ignore overflow for now will sort later TODO
 327+ C32F C9                                   ret
 328+ C330 CB BA        .SunSBCHLDEhlPosDeNeg:  res     7,d
 329+ C332 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 330+ C333 CB FA                                set     7,d
 331+ C335 C9                                   ret
 332+ C336 CB BC        .SunSBCHLDEhlNeg:       res     7,h
 333+ C338                                      JumpOnBitSet d,7,.SunSBCHLDEhlNegdeNeg
 333+ C338 CB 7A       >                        bit 	7,d
 333+ C33A C2 42 C3    >                        jp      nz,.SunSBCHLDEhlNegdeNeg
 334+ C33D ED 52        .SunSBCHLDEhlNegdePos:  sbc     hl,de                       ; ignore overflow for now will sort later TODO
 335+ C33F CB FC                                set     7,h
 336+ C341 C9                                   ret
 337+ C342 CB BA        .SunSBCHLDEhlNegdeNeg:      res     7,d
 338+ C344 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 339+ C345 CB FA                                set     7,d
 340+ C347 CB FC                                set     7,h
 341+ C349 C9                                   ret
 342+ C34A
 343+ C34A
 344+ C34A                                      include "./Universe/Sun/TransposeSunXX12BySunToSunXX15.asm"
# file opened: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
   1++C34A              TransposeSXX12BySunToSXX15:
   2++C34A 2A 7E C0                             ld		hl,(SBnKXX12xLo)					; get X into HL
   3++C34D 7C                                   ld		a,h			                        ; get XX12 Sign
   4++C34E E6 80                                and		$80									; check sign bit on high byte
   5++C350 47                                   ld		b,a									; and put it in of 12xlo in b
   6++C351                                      ;110921 debugld      h,0
   7++C351 7C                                   ld      a,h
   8++C352 E6 7F                                and     $7F
   9++C354 67                                   ld      h,a
  10++C355                                      ;110921 debugld      h,0
  11++C355 ED 5B 10 C0                          ld		de,(SBnKxlo)						;
  12++C359 3A 12 C0                             ld		a,(SBnKxsgn)						; get Ship Pos (low,high,sign)
  13++C35C E6 80                                and		$80									; make sure we only have bit 7
  14++C35E 4F                                   ld		c,a									; and put sign of unkxsgn c
  15++C35F CD B1 8F                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++C362 B4                                   or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++C363 67                                   ld		h,a
  18++C364 22 78 C0                             ld		(SBnKXScaled),hl					; now write it out to XX15 X pos
  19++C367              ; ..................................
  20++C367 2A 80 C0                             ld		hl,(SBnKXX12yLo)					; Repeat above for Y coordinate
  21++C36A 7C                                   ld		a,h
  22++C36B E6 80                                and		$80
  23++C36D 47                                   ld		b,a
  24++C36E                                      ;110921 debugld      h,0
  25++C36E 7C                                   ld      a,h
  26++C36F E6 7F                                and     $7F
  27++C371 67                                   ld      h,a
  28++C372                                      ;110921 debugld      h,0
  29++C372 ED 5B 13 C0                          ld		de,(SBnKylo)
  30++C376 3A 15 C0                             ld		a,(SBnKysgn)
  31++C379 E6 80                                and		$80									; make sure we only have bit 7
  32++C37B 4F                                   ld		c,a
  33++C37C CD B1 8F                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++C37F B4                                   or		h									; combine sign in A with H
  35++C380 67                                   ld		h,a
  36++C381 22 7A C0                             ld		(SBnKYScaled),hl
  37++C384              ; ..................................
  38++C384 2A 82 C0                             ld		hl,(SBnKXX12zLo)					; and now repeat for Z cooord
  39++C387 7C                                   ld		a,h
  40++C388 E6 80                                and		$80
  41++C38A 47                                   ld		b,a
  42++C38B                                      ;110921 debugld      h,0
  43++C38B 7C                                   ld      a,h
  44++C38C E6 7F                                and     $7F
  45++C38E 67                                   ld      h,a
  46++C38F                                      ;110921 debugld      h,0
  47++C38F ED 5B 16 C0                          ld		de,(SBnKzlo)
  48++C393 3A 18 C0                             ld		a,(SBnKzsgn)
  49++C396 E6 80                                and		$80									; make sure we only have bit 7
  50++C398 4F                                   ld		c,a
  51++C399 CD B1 8F                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++C39C B4                                   or		h									; combine sign in A with H
  53++C39D 67                                   ld		h,a
  54++C39E CB 7C                                bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++C3A0 20 16                                jr		nz,.ClampZto4                        ; result was negative so we need to clamp to 4
  56++C3A2 E6 7F                                and     $7F                                 ; a = value unsigned
  57++C3A4 20 06                                jr      nz,.NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++C3A6 7D                                   ld      a,l                                 ; get low byte now
  59++C3A7                                      JumpIfALTNusng 4,.ClampZto4					; if its < 4 then fix at 4
  59++C3A7 FE 04       >                        cp      4
  59++C3A9 DA B8 C3    >                        jp		c, .ClampZto4
  60++C3AC 22 7C C0     .NoClampZto4:           ld		(SBnKZScaled),hl					; hl = signed calculation and > 4
  61++C3AF 7D                                   ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  62++C3B0 32 2F 81                             ld      (varT),a
  63++C3B3 7C                                   ld		a,h
  64++C3B4 32 10 81                             ld      (varU),a
  65++C3B7 C9                                   ret
  66++C3B8              ; This is where we limit 4 to a minimum of 4
  67++C3B8 21 04 00     .ClampZto4:             ld		hl,4
  68++C3BB 22 7C C0                             ld		(SBnKZScaled),hl; BODGE FOR NOW
  69++C3BE 7D                                   ld		a,l
  70++C3BF 32 2F 81                             ld      (varT),a                            ;                                                                           ;;;
  71++C3C2 7C                                   ld		a,h
  72++C3C3 32 10 81                             ld      (varU),a 						; compatibility for now
  73++C3C6 C9                                   ret
  74++C3C7
# file closed: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
 345+ C3C7
 346+ C3C7
 347+ C3C7 ED 4B 7C C0  ScaleSunTo8Bit:			ld			bc,(SBnKZScaled)
 348+ C3CB 2A 78 C0                             ld			hl,(SBnKXScaled)
 349+ C3CE ED 5B 7A C0                          ld			de,(SBnKYScaled)
 350+ C3D2 78           .SetABSbc:              ld			a,b
 351+ C3D3 DD 67                                ld			ixh,a
 352+ C3D5 E6 7F                                and			SignMask8Bit
 353+ C3D7 47                                   ld			b,a									; bc = ABS bc
 354+ C3D8 7C           .SetABShl:              ld			a,h
 355+ C3D9 DD 6F                                ld			ixl,a
 356+ C3DB E6 7F                                and			SignMask8Bit
 357+ C3DD 67                                   ld			h,a									; hl = ABS hl
 358+ C3DE 7A           .SetABSde:              ld			a,d
 359+ C3DF FD 67                                ld			iyh,a
 360+ C3E1 E6 7F                                and			SignMask8Bit
 361+ C3E3 57                                   ld			d,a									; de = ABS de
 362+ C3E4 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 363+ C3E5 B4                                   or			h                                   ; XX15+1	\ x hi
 364+ C3E6 B2                                   or			d                                   ; XX15+4	\ y hi
 365+ C3E7 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 366+ C3E9                                      ShiftHLRight1
 366+ C3E9 CB 3C       >			   srl h
 366+ C3EB CB 1D       >			   rr  l
 367+ C3ED                                      ShiftDERight1
 367+ C3ED CB 3A       >			   srl d
 367+ C3EF CB 1B       >			   rr  e
 368+ C3F1                                      ShiftBCRight1
 368+ C3F1 CB 38       >			   srl b
 368+ C3F3 CB 19       >			   rr  c
 369+ C3F5 C3 E4 C3                             jp          .ScaleNodeTo8BitLoop
 370+ C3F8              ; now we have scaled values we have to deal with sign
 371+ C3F8 DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 372+ C3FA E6 80                                and			SignOnly8Bit
 373+ C3FC B0                                   or			b
 374+ C3FD 47                                   ld			b,a
 375+ C3FE DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 376+ C400 E6 80                                and			SignOnly8Bit
 377+ C402 B4                                   or			h
 378+ C403 67                                   ld			h,a
 379+ C404 FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 380+ C406 E6 80                                and			SignOnly8Bit
 381+ C408 B2                                   or			d
 382+ C409 57                                   ld			d,a
 383+ C40A ED 43 7C C0  .SignsDoneSaveResult:	ld			(SBnKZScaled),bc
 384+ C40E 22 78 C0                             ld			(SBnKXScaled),hl
 385+ C411 ED 53 7A C0                          ld			(SBnKYScaled),de
 386+ C415 78                                   ld			a,b
 387+ C416 32 10 81                             ld			(varU),a
 388+ C419 79                                   ld			a,c
 389+ C41A 32 2F 81                             ld			(varT),a
 390+ C41D C9                                   ret
 391+ C41E
 392+ C41E              ;--------------------------------------------------------------------------------------------------------
 393+ C41E              ;;;;X = normal scale
 394+ C41E              ;;;;ZtempHi = zhi
 395+ C41E              ;;;;......................................................
 396+ C41E              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 397+ C41E              ;;;;  Loop                                              ::LL90
 398+ C41E              ;;;;     inc X
 399+ C41E              ;;;;     divide X, Y & ZtempHiLo by 2
 400+ C41E              ;;;;  Until ZtempHi = 0
 401+ C41E              ;;;;......................................................
 402+ C41E              ;-LL21---------------------------------------------------------------------------------------------------
 403+ C41E              ;                        include "./Universe/NormaliseTransMat.asm"
 404+ C41E              ;-LL91---------------------------------------------------------------------------------------------------
 405+ C41E
 406+ C41E              ; Now we have
 407+ C41E              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 408+ C41E              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 409+ C41E              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 410+ C41E              ;
 411+ C41E              ;--------------------------------------------------------------------------------------------------------
 412+ C41E              ;--------------------------------------------------------------------------------------------------------
 413+ C41E              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 414+ C41E              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 415+ C41E              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 416+ C41E              ; Returns
 417+ C41E              ;
 418+ C41E              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 419+ C41E              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 420+ C41E              ;
 421+ C41E              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 422+ C41E              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 423+ C41E              ;
 424+ C41E              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 425+ C41E              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 426+ C41E
 427+ C41E
 428+ C41E               ; TESTEDOK
 429+ C41E              SXX12DotOneRow:
 430+ C41E              SXX12CalcX:              N0equN1byN2div256 varT, (hl), (SBnKXScaled)       ; T = (hl) * regSunXX15fx /256
 430+ C41E 3A 78 C0    >                        ld      a,(SBnKXScaled)                        ;
 430+ C421 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 430+ C422 7E          >                        ld      a,(hl)                        ; A = XX16 element
 430+ C423 57          >                        ld      d,a
 430+ C424 ED 30       >                        mul
 430+ C426 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 430+ C427 32 2F 81    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 431+ C42A 23                                   inc     hl                                  ; move to sign byte
 432+ C42B              SXX12CalcXSign:          AequN1xorN2 SBnKXScaledSign,(hl)             ;
 432+ C42B 3A 79 C0    >                        ld      a,(SBnKXScaledSign)
 432+ C42E AE          >                        xor     (hl)
 433+ C42F 32 13 81                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 434+ C432 23                                   inc     hl
 435+ C433              SXX12CalcY:              N0equN1byN2div256 varQ, (hl),(SBnKYScaled)       ; Q = XX16 * SunXX15 /256 using varQ to hold regSunXX15fx
 435+ C433 3A 7A C0    >                        ld      a,(SBnKYScaled)                        ;
 435+ C436 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 435+ C437 7E          >                        ld      a,(hl)                        ; A = XX16 element
 435+ C438 57          >                        ld      d,a
 435+ C439 ED 30       >                        mul
 435+ C43B 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 435+ C43C 32 11 81    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 436+ C43F                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 436+ C43F 3A 2F 81    >                        ld       a,(varT)
 436+ C442 32 12 81    >                        ld       (varR),a
 437+ C445 23                                   inc     hl
 438+ C446                                      AequN1xorN2 SBnKYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 438+ C446 3A 7B C0    >                        ld      a,(SBnKYScaledSign)
 438+ C449 AE          >                        xor     (hl)
 439+ C44A              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 440+ C44A E5           SSTequSRplusAQ           push    hl
 441+ C44B CD 3A 9A                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 442+ C44E E1                                   pop     hl
 443+ C44F 32 2F 81                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 444+ C452 23                                   inc     hl
 445+ C453              SXX12CalcZ:              N0equN1byN2div256 varQ,(hl),(SBnKZScaled)       ; Q = |sidev_z| * z_lo / 256
 445+ C453 3A 7C C0    >                        ld      a,(SBnKZScaled)                        ;
 445+ C456 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 445+ C457 7E          >                        ld      a,(hl)                        ; A = XX16 element
 445+ C458 57          >                        ld      d,a
 445+ C459 ED 30       >                        mul
 445+ C45B 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 445+ C45C 32 11 81    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 446+ C45F                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 446+ C45F 3A 2F 81    >                        ld       a,(varT)
 446+ C462 32 12 81    >                        ld       (varR),a
 447+ C465 23                                   inc     hl
 448+ C466                                      AequN1xorN2 SBnKZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 448+ C466 3A 7D C0    >                        ld      a,(SBnKZScaledSign)
 448+ C469 AE          >                        xor     (hl)
 449+ C46A              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 450+ C46A CD 3A 9A                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 451+ C46D              ; Now we exit with A = result S = Sign
 452+ C46D C9                                   ret
 453+ C46E
 454+ C46E
 455+ C46E
 456+ C46E              ;--------------------------------------------------------------------------------------------------------
 457+ C46E                                      include "./Universe/Sun/CopySunXX12ScaledToSunXX18.asm"
# file opened: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
   1++C46E              CopySXX12ScaledToSXX18:
   2++C46E              CopyResultToSDrawCam:
   3++C46E                      ldCopyByte SXX12         ,SXX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C46E 3A 7E C0    >                        ld       a,(SXX12)
   3++C471 32 6C C0    >                        ld       (SXX18),a
   4++C474                      ldCopyByte SXX12+1       ,SXX18+2           ; XX12+1 => XX18+2
   4++C474 3A 7F C0    >                        ld       a,(SXX12+1)
   4++C477 32 6E C0    >                        ld       (SXX18+2),a
   5++C47A                      ldCopyByte SXX12+2       ,SXX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C47A 3A 80 C0    >                        ld       a,(SXX12+2)
   5++C47D 32 6F C0    >                        ld       (SXX18+3),a
   6++C480                      ldCopyByte SXX12+3       ,SXX18+5           ; XX12+3 => XX18+5
   6++C480 3A 81 C0    >                        ld       a,(SXX12+3)
   6++C483 32 71 C0    >                        ld       (SXX18+5),a
   7++C486                      ldCopyByte SXX12+4       ,SXX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C486 3A 82 C0    >                        ld       a,(SXX12+4)
   7++C489 32 72 C0    >                        ld       (SXX18+6),a
   8++C48C                      ldCopyByte SXX12+5       ,SXX18+8           ; XX12+5 => XX18+8
   8++C48C 3A 83 C0    >                        ld       a,(SXX12+5)
   8++C48F 32 74 C0    >                        ld       (SXX18+8),a
   9++C492 C9                   ret
  10++C493
# file closed: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
 458+ C493              ;                        include "./Variables/CopySunXX12toSunXX15.asm"
 459+ C493              ;                       include "./Variables/CopySunXX18toSunXX15.asm"
 460+ C493              ;                       include "./Variables/CopySunXX18ScaledToSunXX15.asm"
 461+ C493              ;                       include "./Variables/CopySunXX12ToScaled.asm"
 462+ C493              ;--------------------------------------------------------------------------------------------------------
 463+ C493              ;                        include "./Maths/Utilities/DotProductXX12SunXX15.asm"
 464+ C493              ;--------------------------------------------------------------------------------------------------------
 465+ C493
 466+ C493 DD 25        ScaleDownSXX15byIXH:    dec     ixh
 467+ C495 F8                                   ret     m
 468+ C496 21 78 C0                             ld      hl,SBnKXScaled
 469+ C499 CB 3E                                srl     (hl)                        ; SunXX15  \ xnormal lo/2 \ LL93+3 \ counter X
 470+ C49B 23                                   inc     hl                          ; looking at SunXX15 x sign now
 471+ C49C 23                                   inc     hl                          ; looking at SunXX15 y Lo now
 472+ C49D CB 3E                                srl     (hl)                        ; SunXX15+2    \ ynormal lo/2
 473+ C49F 23                                   inc     hl                          ; looking at SunXX15 y sign now
 474+ C4A0 23                                   inc     hl                          ; looking at SunXX15 z Lo now
 475+ C4A1 CB 3E                                srl     (hl)
 476+ C4A3 C3 93 C4                             jp      ScaleDownSXX15byIXH
 477+ C4A6 C9                                   ret
 478+ C4A7
 479+ C4A7 21 6C C0     DivideSXX18By2:         ld      hl,SBnKDrawCam0xLo
 480+ C4AA CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 481+ C4AC 23                                   inc     hl                          ; looking at XX18 x sign now
 482+ C4AD 23                                   inc     hl                          ; looking at XX18 y Lo now
 483+ C4AE CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 484+ C4B0 23                                   inc     hl                          ; looking at XX18 y sign now
 485+ C4B1 23                                   inc     hl                          ; looking at XX18 z Lo now
 486+ C4B2 CB 3E                                srl     (hl)
 487+ C4B4 C9                                   ret
 488+ C4B5
 489+ C4B5              ; ......................................................                                                         ;;;
 490+ C4B5
 491+ C4B5
 492+ C4B5
 493+ C4B5
 494+ C4B5              ; Pitch and roll are 2 phases
 495+ C4B5              ; 1 - we apply our pitch and roll to the ship position
 496+ C4B5              ;       x -> x + alpha * (y - alpha * x)
 497+ C4B5              ;       y -> y - alpha * x - beta * z
 498+ C4B5              ;       z -> z + beta * (y - alpha * x - beta * z)
 499+ C4B5              ; which can be simplified as:
 500+ C4B5              ;       1. K2 = y - alpha * x
 501+ C4B5              ;       2. z = z + beta * K2
 502+ C4B5              ;       3. y = K2 - beta * z
 503+ C4B5              ;       4. x = x + alpha * y
 504+ C4B5              ; 2 - we apply our patch and roll to the ship orientation
 505+ C4B5              ;      Roll calculations:
 506+ C4B5              ;
 507+ C4B5              ;        nosev_y = nosev_y - alpha * nosev_x_hi
 508+ C4B5              ;        nosev_x = nosev_x + alpha * nosev_y_hi
 509+ C4B5              ;      Pitch calculations:
 510+ C4B5              ;
 511+ C4B5              ;        nosev_y = nosev_y - beta * nosev_z_hi
 512+ C4B5              ;        nosev_z = nosev_z + beta * nosev_y_hi
 513+ C4B5
 514+ C4B5
 515+ C4B5                          INCLUDE "./Universe/Sun/SunApplyMyRollAndPitch.asm"
# file opened: ././Universe/Sun/SunApplyMyRollAndPitch.asm
   1++C4B5
   2++C4B5              ; Full version
   3++C4B5              ; 1. K2 = y - alpha * x
   4++C4B5              ; 2. z = z + beta * K2
   5++C4B5              ; 3. y = K2 - beta * z
   6++C4B5              ; 4. x = x + alpha * y
   7++C4B5
   8++C4B5
   9++C4B5
  10++C4B5              ; SunrollWork holds Alpha intermidate results
  11++C4B5              ;  1. K2 = y - alpha * x
  12++C4B5              ;  2. z = z + beta * K2
  13++C4B5              ;  3. y = K2 - beta * z
  14++C4B5              ;  4. x = x + alpha * y
  15++C4B5              ;.... or
  16++C4B5              ;  2. z = z + (beta * (y - alpha * x))
  17++C4B5              ;  3. y = (y - alpha * x) - (beta * z)
  18++C4B5              ;  4. x = x + (alpha * y)
  19++C4B5
  20++C4B5
  21++C4B5              ;----------------------------------------------------------------------------------------------------------------------------------
  22++C4B5              ; Sun version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
  23++C4B5              ; Need to write a test routine for roll and pitchs
  24++C4B5 00 00 00 00  SunAlphaMulX            DS 4
  25++C4B9 00 00 00 00  SunAlphaMulY            DS 4
  26++C4BD 00 00 00 00  SunBetaMulZ             DS 4
  27++C4C1 00 00 00     SunK2                   DS 3
  28++C4C4
  29++C4C4 3A 27 80     SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  30++C4C7 21 1A 80                             ld      hl,BETA
  31++C4CA B6                                   or      (hl)
  32++C4CB E6 7F                                and     SignMask8Bit
  33++C4CD CA 7E C5                             jp      z,.NoRotation
  34++C4D0 3A 27 80     .CalcAlphaMulX:         ld      a,(ALPHA)                   ; get roll magnitude
  35++C4D3 EE 80                                xor     SignOnly8Bit                ; d = -alpha (Q value)
  36++C4D5 57                                   ld      d,a                         ; .
  37++C4D6 3A 10 C0                             ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
  38++C4D9 5F                                   ld      e,a                         ; .
  39++C4DA 2A 11 C0                             ld      hl,(SBnKxhi)                ; .
  40++C4DD CD 21 93                             call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256 where d = sign byte
  41++C4E0              .SaveAlphaMulX:         ;ld      a,c                         ; a = upper byte of results which will have the sign               ONLY NEEDED FOR DEBUGGING TEST
  42++C4E0                                      ;ld      (SunAlphaMulX),a            ; save sign from result, ELC holds actual result                   ONLY NEEDED FOR DEBUGGING TEST
  43++C4E0 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
  44++C4E1 32 B6 C4                             ld      (SunAlphaMulX+1),a
  45++C4E4 7B                                   ld      a,e
  46++C4E5 32 B7 C4                             ld      (SunAlphaMulX+2),a
  47++C4E8 7A                                   ld      a,d
  48++C4E9 32 B8 C4                             ld      (SunAlphaMulX+3),a          ; we actually only want X1 X2 X3 later as its /256
  49++C4EC ED 5B 14 C0  .CalcK2:                ld      de,(SBnKyhi)                ; DEL = Y
  50++C4F0 3A 13 C0                             ld      a,(SBnKylo)                 ; .
  51++C4F3 6F                                   ld      l,a                         ; .
  52++C4F4 ED 4B B7 C4                          ld      bc,(SunAlphaMulX+2)         ; BCH = Y sgn, hi, lo, we loose the C from result
  53++C4F8 3A B6 C4                             ld      a,(SunAlphaMulX+1)          ; Deal with sign in byte 4
  54++C4FB 67                                   ld      h,a                         ; .
  55++C4FC CD 6A 90                             call    AddBCHtoDELsigned           ; DEL = y - (alpha * x)
  56++C4FF 7D                                   ld      a,l                         ; K2  = DEA = DEL = y - (alpha * x)
  57++C500 32 C1 C4                             ld      (SunK2),a                   ; we also need to save l for teh beta k2 calc
  58++C503 ED 53 C2 C4                          ld      (SunK2+1),de                ;
  59++C507 EB           .CalcBetaMulK2:         ex      de,hl                       ; HLE == DEA
  60++C508 5F                                   ld      e,a                         ; .
  61++C509 3A 1A 80                             ld      a,(BETA)                    ; D = BETA
  62++C50C 57                                   ld      d,a                         ; .
  63++C50D CD 21 93                             call    mulHLEbyDSigned             ; DELC = Beta * K2, DEL = Beta/256 * K2
  64++C510 ED 4B 17 C0  .CalcZ:                 ld      bc,(SBnKzhi)                ; BCH = z
  65++C514 3A 16 C0                             ld      a,(SBnKzlo)                 ;
  66++C517 67                                   ld      h,a                         ;
  67++C518 CD 6A 90                             call    AddBCHtoDELsigned           ; DEL still = Beta * K2 so its z + Beta * K2
  68++C51B ED 53 17 C0                          ld      (SBnKzhi),de                ; z = resuklt
  69++C51F 7D                                   ld      a,l                         ; .
  70++C520 32 16 C0                             ld      (SBnKzlo),a                 ; .
  71++C523 3A 1A 80     .CalcBetaZ:             ld      a,(BETA)
  72++C526 EE 80                                xor     SignOnly8Bit                ; d = -beta (Q value)
  73++C528 57                                   ld      d,a                         ; .
  74++C529 3A 16 C0                             ld      a,(SBnKzlo)                 ; HLE = z
  75++C52C 5F                                   ld      e,a                         ; .
  76++C52D 2A 17 C0                             ld      hl,(SBnKzhi)                ; .
  77++C530 CD 21 93                             call    mulHLEbyDSigned             ; DELC = z * -beta, so DEL = Z * -beta / 256 where d = sign byte
  78++C533              .SaveAlphaMulZ:         ;ld      a,c                         ; a = upper byte of results which will have the sign             ONLY NEEDED FOR DEBUGGING TEST
  79++C533                                      ;ld      (SunBetaMulZ),a             ; save sign from result, ELC holds actual result                 ONLY NEEDED FOR DEBUGGING TEST
  80++C533                                      ;ld      a,l                         ; also save all of alpha *X as we will need it later             ONLY NEEDED FOR DEBUGGING TEST
  81++C533                                      ;ld      (SunBetaMulZ+1),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  82++C533                                      ;ld      a,e                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  83++C533                                      ;ld      (SunBetaMulZ+2),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  84++C533                                      ;ld      a,d                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  85++C533                                      ;ld      (SunBetaMulZ+3),a           ; we actually only want X1 X2 X3 later as its /256               ONLY NEEDED FOR DEBUGGING TEST
  86++C533 42 4B        .CalcY:                 ld      bc,de                       ; bch = - Beta * z
  87++C535 65                                   ld      h,l
  88++C536 ED 5B C2 C4                          ld      de,(SunK2+1)                ; DEL = k2
  89++C53A 3A C1 C4                             ld      a,(SunK2)
  90++C53D 6F                                   ld      l,a
  91++C53E CD 6A 90                             call    AddBCHtoDELsigned           ; DEL = K2 - Beta * Z
  92++C541 ED 53 14 C0                          ld      (SBnKyhi),de                ; y = DEL = K2 - Beta * Z
  93++C545 7D                                   ld      a,l                         ; .
  94++C546 32 13 C0                             ld      (SBnKylo),a                 ; .
  95++C549 3A 27 80     .CalcAlphaMulY:         ld      a,(ALPHA)
  96++C54C 57                                   ld      d,a                         ; d = alpha (Q value)
  97++C54D 3A 13 C0                             ld      a,(SBnKylo)                 ; HLE = x sgn, hi, lo
  98++C550 5F                                   ld      e,a                         ; .
  99++C551 2A 14 C0                             ld      hl,(SBnKyhi)                ; .
 100++C554 CD 21 93                             call    mulHLEbyDSigned             ; DELC = y * alpha, so DEL = Y * alpha / 256 where d = sign byte
 101++C557 79           .SaveAlphaMulY:         ld      a,c                         ; a = upper byte of results which will have the sign
 102++C558 32 B9 C4                             ld      (SunAlphaMulY),a            ; save sign from result, ELC holds actual result
 103++C55B 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
 104++C55C 32 BA C4                             ld      (SunAlphaMulY+1),a
 105++C55F 7B                                   ld      a,e
 106++C560 32 BB C4                             ld      (SunAlphaMulY+2),a
 107++C563 7A                                   ld      a,d
 108++C564 32 BC C4                             ld      (SunAlphaMulY+3),a
 109++C567 42 4B        .CalcxPLusAlphaY:       ld      bc,de                        ; BCH = Y sgn, hi, lo, we loose the C from result Deal with sign in byte 4
 110++C569 65                                   ld      h,l                         ; .
 111++C56A ED 5B 11 C0                          ld      de,(SBnKxhi)                ; DEL = Y
 112++C56E 3A 10 C0                             ld      a,(SBnKxlo)                 ; .
 113++C571 6F                                   ld      l,a                         ; .
 114++C572 CD 6A 90                             call    AddBCHtoDELsigned           ; DEL = x + alpha * Y
 115++C575 7A           .SaveResult1:           ld      a,d                         ; Result 1 (X) = AHL + DEL
 116++C576 63                                   ld      h,e                         ;
 117++C577 32 12 C0     .CopyResultTo2:         ld      (SBnKxlo+2),a               ; .
 118++C57A 22 10 C0                             ld      (SBnKxlo) ,hl               ; .
 119++C57D C9                                   ret
 120++C57E 3A 0D 81     .NoRotation:            ld      a,(DELTA)                   ; BCH = - Delta
 121++C581                                      ReturnIfAIsZero
 121++C581 A7          >                        and     a
 121++C582 C8          >                        ret     z
 122++C583 0E 00                                ld      c,0                         ;
 123++C585 67                                   ld      h,a                         ;
 124++C586 06 80                                ld      b,$80                       ;
 125++C588 ED 5B 17 C0                          ld      de,(SBnKzhi)                ; DEL = z position
 126++C58C 3A 16 C0                             ld      a,(SBnKzlo)                 ; .
 127++C58F 6F                                   ld      l,a                         ; .
 128++C590 CD 6A 90                             call    AddBCHtoDELsigned           ; update speed
 129++C593 ED 53 17 C0                          ld      (SBnKzhi),DE                ; write back to zpos
 130++C597 7D                                   ld      a,l
 131++C598 32 16 C0                             ld      (SBnKzlo),a                ;
 132++C59B C9                                   ret
 133++C59C              ;
 134++C59C              ;SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
 135++C59C              ;                        ld      hl,BETA
 136++C59C              ;                        or      (hl)
 137++C59C              ;                        and     SignMask8Bit
 138++C59C              ;                        ret     z
 139++C59C              ;.CalcZ:                 ;break
 140++C59C              ;                        ld      a,(ALPHA)                   ; get roll magnitude
 141++C59C              ;                        xor     SignOnly8Bit                ; get Q = -alpha
 142++C59C              ;                        ld      d,a                         ; d reg represents Q (abount to roll)
 143++C59C              ;                        ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
 144++C59C              ;                        ld      e,a                         ;
 145++C59C              ;                        ld      hl,(SBnKxhi)                ;
 146++C59C              ;                        call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256
 147++C59C              ;                        ld      a,d
 148++C59C              ;                        ld      (SunRollResultp4),a         ; save D (I guess we need the sign?)
 149++C59C              ;.CalcYPlusDEL:          ld      a,(SBnKylo)                 ; BCH = Y sgn, hi, lo
 150++C59C              ;                        ld      h,a
 151++C59C              ;                        ld      bc,(SBnKyhi)
 152++C59C              ;                        call    AddBCHtoDELsigned           ; DEL = Y - ( X *  alpha /256)
 153++C59C              ;.SaveResult1:           ld      a,l                         ; SunPitchWork = DEL
 154++C59C              ;                        ;ld      (SunRollResult), a          ; SunPitchWork + 0 = L
 155++C59C              ;                        ex      de,hl                       ; SunPitchWork + 1 = E
 156++C59C              ;.CopyResultTo2:         ld      (SunRollResult+1),a         ; SunPitchWork + 2 = D
 157++C59C              ;                        ld      (SunRollResult+1) ,hl       ; Copy K to K2 (y - alpha * x)
 158++C59C              ;                        ;ld      (SunRollResult2+1),hl       ; also HLA = result
 159++C59C              ;                        ld      a,(SunRollResult)           ; .
 160++C59C              ;                        ;ld      (SunRollResult2),a          ; .
 161++C59C              ;.CalcY:                 ld      e,a                         ; so now HLE = result
 162++C59C              ;                        ld      a,(BETA)                    ; get pitch
 163++C59C              ;                        ld      d,a                         ; now D = BETA
 164++C59C              ;                        call    mulHLEbyDSigned             ; DELC = (y - alpha * x /256 ) * Beta
 165++C59C              ;                        ld      bc,(SBnKzhi)                ; BCH = z
 166++C59C              ;                        ld      a,(SBnKzlo)                 ;
 167++C59C              ;                        ld      h,a                         ;
 168++C59C              ;                        call    AddBCHtoDELsigned           ; DEL = z + ((y - alpha * x /256 ) * Beta) /256
 169++C59C              ;.SaveZResult:           ld      (SunZResult+1),de           ; We now have a z result which we save
 170++C59C              ;                        ld      (SBnKzhi),de                ; .
 171++C59C              ;                        ld      a,l                         ; .
 172++C59C              ;                        ld      (SunZResult),a              ; .
 173++C59C              ;                        ld      (SBnKzlo),a                 ; .
 174++C59C              ;.CalcMinusBetaMulZ:     ex      de,hl                       ; HLE = DEL = z post calculation
 175++C59C              ;                        ld      e,l                         ;
 176++C59C              ;                        ld      a,(BETA)                    ; d = - BETA
 177++C59C              ;                        ld      d,a                         ;
 178++C59C              ;                        xor     SignOnly8Bit                ;
 179++C59C              ;                        call    mulHLEbyDSigned             ; DELC = z * - BETA
 180++C59C              ;                        ld      bc, (SunRollResult+1)       ; BCH = (y - alpha * x) (or K2)
 181++C59C              ;                        ld      a,(SunRollResult)           ;
 182++C59C              ;                        ld      h,a                         ;
 183++C59C              ;                        call    AddBCHtoDELsigned           ; DEL = (y - alpha * x) - (Z * BETA)
 184++C59C              ;                        ld      (SBnKyhi),de                ; y = (y - alpha * x) - (Z * BETA)
 185++C59C              ;                        ld      a,l                         ;
 186++C59C              ;                        ld      (SBnKylo),a                 ;
 187++C59C              ;.CalcX:                 ex      de,hl                       ; HLE = DEL = Y
 188++C59C              ;                        ld      e,l                         ;
 189++C59C              ;                        ld      a,(ALPHA)
 190++C59C              ;                        ld      d,a                         ; D = alpha
 191++C59C              ;                        call    mulHLEbyDSigned             ; DELC = Y * alpha
 192++C59C              ;                        ld      bc,(SBnKxhi)                ; BCH = x
 193++C59C              ;                        ld      a,(SBnKxlo)                 ;
 194++C59C              ;                        ld      h,a                         ;
 195++C59C              ;                        call    AddBCHtoDELsigned           ; DEL = x + (alpha * y /256 )
 196++C59C              ;                        ld      (SBnKxhi),de                ; x = x + (alpha * y /256 )
 197++C59C              ;                        ld      a,h                         ;
 198++C59C              ;                        ld      (SBnKxlo),a                 ;
 199++C59C              ;                        ret
 200++C59C              ;
# file closed: ././Universe/Sun/SunApplyMyRollAndPitch.asm
 516+ C59C              ;            INCLUDE "./Universe/SunApplyShipRollAndPitch.asm"
 517+ C59C
 518+ C59C 00           SunOnScreen             DB 0
 519+ C59D 00 00        cLineArrayPtr            DW 0
 520+ C59F 00           LineCount               DB 0
 521+ C5A0 00           RaggedSize              DB 0
 522+ C5A1 00           MinYOffset              DB 0
 523+ C5A2 00           MaxYOffSet              DB 0
 524+ C5A3 00 00        SunScrnX                DW  0       ; signed
 525+ C5A5 00 00        SunScrnY                DW  0       ; signed
 526+ C5A7 00           SunRadius               DB  0       ; unsigned
 527+ C5A8              ; draw circle
 528+ C5A8
 529+ C5A8              ;
 530+ C5A8              ;DIVD3B2 K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo)
 531+ C5A8
 532+ C5A8 00 00 00 00  SunVarK                 DS 4
 533+ C5AC 00 00 00     SunVarP                 DS 3
 534+ C5AF 00           SunVarQ                 DS 1
 535+ C5B0 00           SunVarR                 DS 1
 536+ C5B1 00           SunVarS                 DS 1
 537+ C5B2 00           SunVarT                 DS 1
 538+ C5B3
 539+ C5B3              ; Optimisation
 540+ C5B3              ; if a <> 0
 541+ C5B3              ;       divide AH by CD
 542+ C5B3              ; if h <> 0
 543+ C5B3              ;      if c <> 0 return 0
 544+ C5B3              ;      else
 545+ C5B3              ;        divide HL by DE
 546+ C5B3              ; if l <>0
 547+ C5B3              ;      if c or d <> 0 return 0
 548+ C5B3              ;      else
 549+ C5B3              ;        divide l by e
 550+ C5B3              ;
 551+ C5B3 47           SunAHLequAHLDivCDE:     ld      b,a                         ; save a reg
 552+ C5B4 79                                   ld      a,c                         ; check for divide by zero
 553+ C5B5 B2                                   or      d                           ; .
 554+ C5B6 B3                                   or      e                           ; .
 555+ C5B7                                      JumpIfZero      .divideByZero       ; .
 555+ C5B7 CA D0 C5    >                        jp	z,.divideByZero
 556+ C5BA 78                                   ld      a,b                         ; get a back
 557+ C5BB                                      JumpIfAIsNotZero    .divideAHLbyCDE
 557+ C5BB A7          >                        and     a
 557+ C5BC C2 D7 C5    >                        jp	    nz,.divideAHLbyCDE
 558+ C5BF 7C           .AIsZero:               ld      a,h
 559+ C5C0                                      JumpIfAIsNotZero    .divideHLbyDE
 559+ C5C0 A7          >                        and     a
 559+ C5C1 C2 DE C5    >                        jp	    nz,.divideHLbyDE
 560+ C5C4 7D           .HIsZero:               ld      a,l
 561+ C5C5                                      JumpIfAIsNotZero    .divideLbyE
 561+ C5C5 A7          >                        and     a
 561+ C5C6 C2 ED C5    >                        jp	    nz,.divideLbyE
 562+ C5C9              .resultIsZero:          ZeroA
 562+ C5C9 AF          >                        xor a
 563+ C5CA 67                                   ld      h,a                        ; result is zero so set hlde
 564+ C5CB 6F                                   ld      l,a                        ; result is zero so set hlde
 565+ C5CC 54 5D                                ld      de,hl
 566+ C5CE                                      ClearCarryFlag
 566+ C5CE B7          >                        or a
 567+ C5CF C9                                   ret
 568+ C5D0 3E FF        .divideByZero:          ld      a,$FF
 569+ C5D2 67                                   ld      h,a
 570+ C5D3 6F                                   ld      l,a
 571+ C5D4 54 5D                                ld      de,hl
 572+ C5D6                                      SetCarryFlag
 572+ C5D6 37          >                        scf
 573+ C5D7              ; AHL = ahl/cde, this could be a genuine 24 bit divide
 574+ C5D7              ; if AHL is large and cde small then the value will be big so will be off screen so we can risk 16 bit divide
 575+ C5D7 CD B3 91     .divideAHLbyCDE:        call    Div24by24
 576+ C5DA EB                                   ex      hl,de                         ; ahl is result
 577+ C5DB 79                                   ld      a,c                           ; ahl is result
 578+ C5DC                                      ClearCarryFlag
 578+ C5DC B7          >                        or a
 579+ C5DD              ;.divideAHLbyCDE:        ld      b,a                         ; we need to set BC to AH
 580+ C5DD              ;                        ld      e,d                         ; and DE to CD
 581+ C5DD              ;                        ld      d,c                         ; but make sure we do it in the right
 582+ C5DD              ;                        ld      c,h                         ; order so we don't trash values
 583+ C5DD              ;                        call    BC_Div_DE                   ; bc = result
 584+ C5DD              ;                        ld      a,b
 585+ C5DD              ;                        ld      h,c
 586+ C5DD              ;                        ld      l,0
 587+ C5DD C9                                   ret
 588+ C5DE              ; AHL = 0hl/0de as A is zero
 589+ C5DE 79           .divideHLbyDE:          ld      a,c                         ;'if c = 0 then result must be zero
 590+ C5DF                                      JumpIfAIsNotZero   .resultIsZero
 590+ C5DF A7          >                        and     a
 590+ C5E0 C2 C9 C5    >                        jp	    nz,.resultIsZero
 591+ C5E3 44 4D                                ld      bc,hl
 592+ C5E5 CD AD 95                             call    BC_Div_DE                   ; BC = HL/DE
 593+ C5E8 60 69                                ld      hl,bc
 594+ C5EA                                      ZeroA                               ; so we can set A to Zero
 594+ C5EA AF          >                        xor a
 595+ C5EB                                      ClearCarryFlag
 595+ C5EB B7          >                        or a
 596+ C5EC C9                                   ret
 597+ C5ED              ; AHL = 00l/00e as A and H are zero
 598+ C5ED 79           .divideLbyE:            ld      a,c                         ; if d = 0 then result must be zero
 599+ C5EE B2                                   or      d
 600+ C5EF                                      JumpIfAIsNotZero   .resultIsZero
 600+ C5EF A7          >                        and     a
 600+ C5F0 C2 C9 C5    >                        jp	    nz,.resultIsZero
 601+ C5F3 4B                                   ld      c,e
 602+ C5F4 5D                                   ld      e,l
 603+ C5F5 CD 6F 95                             call    E_Div_C
 604+ C5F8 6F                                   ld      l,a
 605+ C5F9                                      ZeroA
 605+ C5F9 AF          >                        xor a
 606+ C5FA 67                                   ld      h,a
 607+ C5FB                                      ClearCarryFlag
 607+ C5FB B7          >                        or a
 608+ C5FC C9                                   ret
 609+ C5FD
 610+ C5FD
 611+ C5FD              ; Needs tuning for registers vs memroy
 612+ C5FD 22 AC C5     SunKEquAHLDivCDE:       ld      (SunVarP),hl
 613+ C600 32 AE C5                             ld      (SunVarP+2),a
 614+ C603 ED 53 AF C5                          ld      (SunVarQ),de
 615+ C607 79                                   ld      a,c
 616+ C608 32 B1 C5                             ld      (SunVarS),a
 617+ C60B 3A AC C5     SunDivD3B:              ld      a,(SunVarP)                 ; Ensure P is at least 1
 618+ C60E F6 01                                or      1
 619+ C610 32 AC C5                             ld      (SunVarP),a
 620+ C613 3A AE C5                             ld      a,(SunVarP+2)               ; T = Sign xor Sign
 621+ C616 21 B1 C5                             ld      hl,SunVarS
 622+ C619 AE                                   xor     (hl)
 623+ C61A E6 80                                and     SignOnly8Bit
 624+ C61C 32 B2 C5                             ld      (SunVarT),a
 625+ C61F 06 00                                ld      b,0                         ; b = y counter
 626+ C621 3A AE C5                             ld      a,(SunVarP+2)               ; a = abs high byte of p
 627+ C624 E6 7F                                and     SignMask8Bit                ; .
 628+ C626 2A AC C5                             ld      hl,(SunVarP)                ; shift P left
 629+ C629              .SunDVL9:               JumpIfAGTENusng   64, .SunDV14      ; if high p > 64 then go to DV14
 629+ C629 FE 40       >                        cp     64
 629+ C62B D2 38 C6    >                        jp		nc,.SunDV14
 630+ C62E                                      ShiftHLLeft1                        ;
 630+ C62E CB 25       >			   sla l
 630+ C630 CB 14       >			   rl  h
 631+ C632 CB 17                                rl      a                           ;
 632+ C634 04                                   inc     b                           ; increase shift count
 633+ C635 C3 29 C6                             jp      .SunDVL9
 634+ C638 22 AC C5     .SunDV14:               ld      (SunVarP),hl                ; save off var P
 635+ C63B 32 AE C5                             ld      (SunVarP+2),a
 636+ C63E 3A B1 C5                             ld      a,(SunVarS)                 ; a= ABS varS
 637+ C641 E6 7F                                and     SignMask8Bit
 638+ C643 2A AF C5                             ld      hl,(SunVarQ)                ; HL = vars Q & R
 639+ C646 05           .SunDVL6:               dec     b                           ; reduce b counter by 1
 640+ C647                                      ShiftHLLeft1                        ; varQRA  shift left
 640+ C647 CB 25       >			   sla l
 640+ C649 CB 14       >			   rl  h
 641+ C64B CB 17                                rl      a                           ;
 642+ C64D F2 46 C6                             jp      p, .SunDVL6                 ; keep shifting until bit 7 of a is set
 643+ C650 22 AF C5                             ld      (SunVarQ),hl                ; save QR
 644+ C653 32 B1 C5     .SunDV9:                ld      (SunVarS),a                 ; save S
 645+ C656                                      ;ld      a,h
 646+ C656                                      ;ld      (varQ),a
 647+ C656 4F                                   ld      c,a
 648+ C657 3A AE C5                             ld      a,(SunVarP+2)
 649+ C65A C5                                   push    bc                          ; save shift counter in b
 650+ C65B CD FB 94                             call    DIV16Amul256dCUNDOC
 651+ C65E                                      ;call    RequAmul256divQ
 652+ C65E 79                                   ld      a, c
 653+ C65F 32 12 81                             ld      (varR),a
 654+ C662 C1                                   pop     bc                          ; retrieve shift counter
 655+ C663 21 00 00                             ld      hl,0                        ; set K to 0
 656+ C666 22 A8 C5                             ld      (SunVarK),hl                ; .
 657+ C669 22 AA C5                             ld      (SunVarK+2),hl              ; .
 658+ C66C CB 78                                bit     7,b                         ; is counter positive
 659+ C66E 28 32                                jr      z,.SunDV12                  ; .
 660+ C670 3A 12 81                             ld      a,(varR)                    ;
 661+ C673 CB 27        .SunDVL8:               sla     a                           ; Shift K by 1 left
 662+ C675 21 A9 C5                             ld      hl,SunVarK+1                ; .
 663+ C678 CB 16                                rl      (hl)                        ; .
 664+ C67A 23                                   inc     hl                          ; .
 665+ C67B CB 16                                rl      (hl)                        ; .
 666+ C67D 23                                   inc     hl                          ; .
 667+ C67E CB 16                                rl      (hl)                        ; .
 668+ C680 04                                   inc     b
 669+ C681 20 F0                                jr      nz,.SunDVL8                 ; loop until K is shifted
 670+ C683 32 A8 C5                             ld      (SunVarK),a
 671+ C686 3A AB C5                             ld      a,(SunVarK+3)
 672+ C689 21 B2 C5                             ld      hl,SunVarT
 673+ C68C B6                                   or      (hl)
 674+ C68D 32 AB C5                             ld      (SunVarK+3),a
 675+ C690 C9                                   ret
 676+ C691 3A 12 81     .SunDV13:               ld      a,(varR)                    ; when we get here, shift is zero
 677+ C694 32 A8 C5                             ld      (SunVarK),a
 678+ C697 3A AB C5                             ld      a,(SunVarK+3)
 679+ C69A 21 B2 C5                             ld      hl,SunVarT
 680+ C69D B6                                   or      (hl)
 681+ C69E 32 AB C5                             ld      (SunVarK+3),a
 682+ C6A1 C9                                   ret
 683+ C6A2 78           .SunDV12:               ld      a,b
 684+ C6A3 A7                                   and     a
 685+ C6A4 28 EB                                jr      z,.SunDV13
 686+ C6A6 3A 12 81                             ld      a,(varR)                    ; it probably is already R so need to test
 687+ C6A9 CB 2F        .SunDVL10:              sra     a                           ; Shift K by 1 left
 688+ C6AB 05                                   dec     b
 689+ C6AC 20 FB                                jr      nz,.SunDVL10
 690+ C6AE 32 A8 C5                             ld      (SunVarK),a                 ; as original divide was onyl 8 bits K 1,2,3 don;t matter
 691+ C6B1 3A B2 C5                             ld      a,(SunVarT)
 692+ C6B4 32 AB C5                             ld      (SunVarK+3),a
 693+ C6B7 C9                                   ret
 694+ C6B8
 695+ C6B8
 696+ C6B8
 697+ C6B8 47           SunProcessVertex:       ld      b,a                         ; save sign byte
 698+ C6B9 ED 5B 16 C0  .SunProjectToEye:       ld      de,(SBnKzlo)                ; X Pos = X / Z
 699+ C6BD 3A 18 C0                             ld      a,(SBnKzsgn)                ; CDE = z
 700+ C6C0 FD 67                                ld      iyh,a                       ; save sign
 701+ C6C2                                      ClearSignBitA
 701+ C6C2 E6 7F       >                        and     SignMask8Bit
 702+ C6C4                                      ; Addeed as it neds to be AHL/0CD to force * 256 and get correct screen position on scaling
 703+ C6C4              ;                        ld      c,a                         ;
 704+ C6C4 5A                                   ld      e,d
 705+ C6C5 57                                   ld      d,a
 706+ C6C6 0E 00                                ld      c,0
 707+ C6C8                                      ; added above to correct positioning as in reality its X/(Z/256)
 708+ C6C8 78                                   ld      a,b                         ; restore sign byte
 709+ C6C9 FD 6F                                ld      iyl,a                       ; save sign
 710+ C6CB                                      ClearSignBitA
 710+ C6CB E6 7F       >                        and     SignMask8Bit
 711+ C6CD CD B3 C5                             call SunAHLequAHLDivCDE             ; AHL = AHL/CDE unsigned
 712+ C6D0              .CheckPosOnScreenX:     JumpIfAIsNotZero .IsOffScreen         ; if A has a value then its way too large regardless of sign
 712+ C6D0 A7          >                        and     a
 712+ C6D1 C2 EE C6    >                        jp	    nz,.IsOffScreen
 713+ C6D4                                      JumpOnLeadSignSet h, .IsOffScreen      ; or bit 7 set of h
 713+ C6D4 7C          >                        ld      a,h
 713+ C6D5 E6 80       >                        and     SignOnly8Bit
 713+ C6D7 C2 EE C6    >                        jp      nz,.IsOffScreen
 714+ C6DA 7C                                   ld      a,h
 715+ C6DB                                      ReturnIfAGTEusng 4                  ; if a > 1024 then its way too large regardless of sign
 715+ C6DB FE 04       >                        cp    4
 715+ C6DD D0          >                        ret	 nc
 716+ C6DE FD 7C                                ld      a,iyh                       ; now deal with the sign
 717+ C6E0 FD AD                                xor     iyl
 718+ C6E2                                      SignBitOnlyA                        ; a= resultant sign
 718+ C6E2 E6 80       >                        and     SignOnly8Bit
 719+ C6E4 28 06                                jr      z,.calculatedVert           ; result is positive so we don't 2's compliment it
 720+ C6E6              .XIsNegative:           NegHL                               ; make 2's c as negative
 720+ C6E6 AF          >                    xor a
 720+ C6E7 95          >                    sub l
 720+ C6E8 6F          >                    ld l,a
 720+ C6E9 9F          >                    sbc a,a
 720+ C6EA 94          >                    sub h
 720+ C6EB 67          >                    ld h,a
 721+ C6EC              .calculatedVert:        ClearCarryFlag
 721+ C6EC B7          >                        or a
 722+ C6ED C9                                   ret
 723+ C6EE 21 FF 7F     .IsOffScreen:           ld      hl,$7FFF
 724+ C6F1 FD 7C                                ld      a,iyh
 725+ C6F3 FD AD                                xor     iyl
 726+ C6F5                                      SignBitOnlyA
 726+ C6F5 E6 80       >                        and     SignOnly8Bit
 727+ C6F7 28 02                                jr      z,.calculatedOffScreen
 728+ C6F9 23                                   inc     hl                          ; set hl to $8001 i.e. -32768
 729+ C6FA 23                                   inc     hl                          ; .
 730+ C6FB              .calculatedOffScreen:   SetCarryFlag
 730+ C6FB 37          >                        scf
 731+ C6FC C9                                   ret
 732+ C6FD
 733+ C6FD
 734+ C6FD              ; .........................................................................................................................
 735+ C6FD              ; we only hit this if z is positive so we can ignore signs
 736+ C6FD ED 4B 16 C0  SunCalculateRadius:     ld      bc,(SBnKzlo)                ; DBC = z position
 737+ C701 3A 18 C0                             ld      a,(SBnKzsgn)                ;
 738+ C704 57                                   ld      d,a                         ;
 739+ C705 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 740+ C708 CD F4 93                             call    Div16by24usgn               ; radius = HL/DBC = 24576 / distance z
 741+ C70B B4                                   or      h                           ; if A or H are not 0 then max Radius
 742+ C70C                                      JumpIfAIsZero  .SaveRadius
 742+ C70C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 742+ C70D CA 12 C7    >                        jp	    z, .SaveRadius
 743+ C710 1E F8        .MaxRadius:             ld      e,248                       ;set radius to 248 as maxed out
 744+ C712 7D           .SaveRadius:            ld      a,l                         ; l = resultant radius
 745+ C713 F6 01                                or      1                           ; at least radius 1 (never even so need to test)
 746+ C715 32 A7 C5                             ld      (SunRadius),a               ; save a copy of radius now for later
 747+ C718 5F                                   ld      e,a                         ; as later code expects it to be in e
 748+ C719 C9                                   ret
 749+ C71A
 750+ C71A              ; Shorter version when sun does not need to be processed to screen
 751+ C71A 3A 12 C0     SunUpdateCompass:       ld      a,(SBnKxsgn)
 752+ C71D 2A 10 C0                             ld      hl,(SBnKxlo)
 753+ C720 CD B8 C6                             call    SunProcessVertex
 754+ C723 22 19 C0                             ld      (SunCompassX),hl
 755+ C726 3A 15 C0                             ld      a,(SBnKysgn)
 756+ C729 2A 13 C0                             ld      hl,(SBnKylo)
 757+ C72C CD B8 C6                             call    SunProcessVertex
 758+ C72F 22 1B C0                             ld      (SunCompassY),hl
 759+ C732 C9                                   ret
 760+ C733
 761+ C733                                 ; could probabyl set a variable say "varGood", default as 1 then set to 0 if we end up with a good calulation?? may not need it as we draw here
 762+ C733 CD C4 C4     SunUpdateAndRender:     call    SunApplyMyRollAndPitch
 763+ C736 3A 18 C0     .CheckDrawable:         ld      a,(SBnKzsgn)
 764+ C739                                      JumpIfAGTENusng 48,  SunUpdateCompass ; at a distance over 48 its too far away
 764+ C739 FE 30       >                        cp     48
 764+ C73B D2 1A C7    >                        jp		nc,SunUpdateCompass
 765+ C73E 21 17 C0                             ld      hl,SBnKzhi                  ; if the two high bytes are zero then its too close
 766+ C741 B6                                   or      (hl)
 767+ C742                                      JumpIfAIsZero       SunUpdateCompass
 767+ C742 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 767+ C743 CA 1A C7    >                        jp	    z, SunUpdateCompass
 768+ C746 3A 12 C0     .calculateX:            ld      a,(SBnKxsgn)
 769+ C749 2A 10 C0                             ld      hl,(SBnKxlo)
 770+ C74C CD B8 C6                             call    SunProcessVertex            ; now returns carry set for failure
 771+ C74F 22 19 C0                             ld      (SunCompassX),hl
 772+ C752 D8                                   ret     c
 773+ C753 1E 80        .calculatedX:           ld      e,ScreenCenterX
 774+ C755 16 00                                ld      d,0
 775+ C757                                      ClearCarryFlag
 775+ C757 B7          >                        or a
 776+ C758 ED 5A                                adc     hl,de
 777+ C75A                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 778+ C75A 22 A3 C5                             ld      (SunScrnX),hl               ; save projected X Position, 2's compliment
 779+ C75D 3A 15 C0     .calculateY:            ld      a,(SBnKysgn)
 780+ C760 2A 13 C0                             ld      hl,(SBnKylo)
 781+ C763 CD B8 C6                             call    SunProcessVertex            ; now returns carry set for failure
 782+ C766 22 1B C0                             ld      (SunCompassY),hl
 783+ C769 D8                                   ret     c
 784+ C76A 1E 60        .calculatedY:           ld      e,ScreenCenterY
 785+ C76C 16 00                                ld      d,0
 786+ C76E EB                                   ex      de,hl
 787+ C76F                                      ClearCarryFlag
 787+ C76F B7          >                        or a
 788+ C770 ED 52                                sbc     hl,de
 789+ C772                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 790+ C772 22 A5 C5                             ld      (SunScrnY),hl               ; save projected Y Position, 2's compliment
 791+ C775              ; .........................................................................................................................
 792+ C775 CD FD C6                             call    SunCalculateRadius
 793+ C778              ; .........................................................................................................................
 794+ C778 2A A3 C5     .CheckIfSunOnScreen:    ld      hl,(SunScrnX)               ; get x pixel position
 795+ C77B FD 26 00                             ld      iyh,0                       ; iyh holds draw status, 0= OK
 796+ C77E 16 00                                ld      d,0                         ; e still holds radius
 797+ C780 7C                                   ld      a,h
 798+ C781                                      JumpOnLeadSignSet   h,.CheckXNegative
 798+ C781 7C          >                        ld      a,h
 798+ C782 E6 80       >                        and     SignOnly8Bit
 798+ C784 C2 9A C7    >                        jp      nz,.CheckXNegative
 799+ C787 7C           .CheckXPositive:        ld      a,h
 800+ C788                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero its definitly on screen
 800+ C788 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 800+ C789 CA A3 C7    >                        jp	    z, .XOnScreen
 801+ C78C 16 00                                ld      d,0                         ; de = radius
 802+ C78E                                      ClearCarryFlag
 802+ C78E B7          >                        or a
 803+ C78F ED 52                                sbc     hl,de
 804+ C791 FA A3 C7                             jp      m   ,.XOnScreen             ; if result was negative then it spans screen
 805+ C794 7C                                   ld      a,h
 806+ C795                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero then its partially on screen at least
 806+ C795 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 806+ C796 CA A3 C7    >                        jp	    z, .XOnScreen
 807+ C799 C9                                   ret                                 ; None of the X coordinates are on screen
 808+ C79A 16 00        .CheckXNegative:        ld      d,0                         ; de = radius
 809+ C79C                                      ClearCarryFlag
 809+ C79C B7          >                        or a
 810+ C79D ED 5A                                adc     hl,de                       ; so we have hl - de
 811+ C79F F2 A3 C7                             jp      p,.XOnScreen                ; if result was positive then it spans screen so we are good
 812+ C7A2 C9                                   ret                                 ; else x is totally off the left side of the screen
 813+ C7A3              ; .........................................................................................................................
 814+ C7A3 2A A5 C5     .XOnScreen:             ld      hl,(SunScrnY)               ; now Check Y coordinate
 815+ C7A6                                      JumpOnLeadSignSet   h,.CheckYNegative
 815+ C7A6 7C          >                        ld      a,h
 815+ C7A7 E6 80       >                        and     SignOnly8Bit
 815+ C7A9 C2 CA C7    >                        jp      nz,.CheckYNegative
 816+ C7AC 7C           .CheckYPositive:        ld      a,h
 817+ C7AD                                      JumpIfAIsNotZero   .PosYCheck2
 817+ C7AD A7          >                        and     a
 817+ C7AE C2 B7 C7    >                        jp	    nz,.PosYCheck2
 818+ C7B1 7D                                   ld      a,l
 819+ C7B2 E6 80                                and     %10000000
 820+ C7B4 CA D3 C7                             jp      z,YOnScreen                ; at least 1 row is on screen as > 128
 821+ C7B7 16 00        .PosYCheck2:            ld      d,0                         ; de = radius
 822+ C7B9                                      ClearCarryFlag
 822+ C7B9 B7          >                        or a
 823+ C7BA ED 52                                sbc     hl,de
 824+ C7BC FA D3 C7                             jp      m,YOnScreen                ; so if its -ve then it spans screen
 825+ C7BF 7C                                   ld      a,h                         ; if h > 0 then off screen so did not span
 826+ C7C0                                      ReturnIfANotZero                    ; .
 826+ C7C0 A7          >                        and     a
 826+ C7C1 C0          >                        ret     nz
 827+ C7C2 7D                                   ld      a,l                         ; if l > 128 then off screen so did not span
 828+ C7C3 E6 80                                and     %10000000                   ; .
 829+ C7C5                                      ReturnIfANotZero                    ; .
 829+ C7C5 A7          >                        and     a
 829+ C7C6 C0          >                        ret     nz
 830+ C7C7 C3 D3 C7                             jp      YOnScreen                  ; so Y at least spans
 831+ C7CA 16 00        .CheckYNegative:        ld      d,0                         ; de = radius
 832+ C7CC                                      ClearCarryFlag
 832+ C7CC B7          >                        or a
 833+ C7CD ED 5A                                adc     hl,de                       ; so we have hl - de
 834+ C7CF F2 D3 C7                             jp      p,YOnScreen                ; if result was positive then it spans screen so we are good
 835+ C7D2 C9                                   ret                                 ; else never gets above 0 so return
 836+ C7D3              ; .........................................................................................................................
 837+ C7D3 21 A3 C0     YOnScreen:             ld      hl,SBnKLineArray            ; we load start and end as 0
 838+ C7D6 11 00 01                             ld		de, SunLineArraySize        ; just if we get a 0,0 genuine we will not plot it
 839+ C7D9 3E 00                                ld		a,0
 840+ C7DB CD A3 7C                             call	memfill_dma
 841+ C7DE              ; .........................................................................................................................
 842+ C7DE 11 00 00     .SetRaggedEdgeMax:      ld      de,0
 843+ C7E1 3A A7 C5                             ld      a,(SunRadius)               ; get readius
 844+ C7E4 FE 60                                cp      96                          ; if > 96 then roll carry flag into e
 845+ C7E6                                      FlipCarryFlag
 845+ C7E6 3F          >                        ccf
 846+ C7E7 CB 13                                rl      e                           ; if > 40 then roll carry flag into e
 847+ C7E9 FE 28                                cp      40
 848+ C7EB                                      FlipCarryFlag
 848+ C7EB 3F          >                        ccf
 849+ C7EC CB 13                                rl      e
 850+ C7EE FE 10                                cp      16                          ; if > 16 then roll carry flag into e
 851+ C7F0                                      FlipCarryFlag
 851+ C7F0 3F          >                        ccf
 852+ C7F1 CB 13                                rl     e
 853+ C7F3 7B                                   ld      a,e                         ; a = ragged size from %00000111 to %00000000
 854+ C7F4 32 A0 C5                             ld      (RaggedSize),a
 855+ C7F7              ; .........................................................................................................................
 856+ C7F7 21 A3 C0     .SkipSetK:              ld      hl,SBnKLineArray            ; prep line array details ready for filling
 857+ C7FA 22 A3 C1                             ld      (LineArrayPtr),hl
 858+ C7FD AF                                   xor     a
 859+ C7FE 32 9F C5                             ld      (LineCount),a
 860+ C801              ; .........................................................................................................................
 861+ C801 2A A5 C5     .GetMinY:               ld      hl,(SunScrnY)               ; now calculate start Y position
 862+ C804 3A A7 C5                             ld      a,(SunRadius)
 863+ C807 5F                                   ld      e,a
 864+ C808 16 00                                ld      d,0
 865+ C80A                                      ClearCarryFlag
 865+ C80A B7          >                        or a
 866+ C80B ED 52                                sbc     hl,de
 867+ C80D F2 13 C8                             jp      p,.DoneMinY
 868+ C810 21 00 00                             ld      hl,0                        ; if its negative then we start with 0 as it can only go up screen after radius
 869+ C813              .DoneMinY:              ReturnIfRegNotZero h                ; if h > 0 then off the screen
 869+ C813 7C          >                        ld      a, h
 869+ C814 A7          >                        and     a
 869+ C815 C0          >                        ret     nz
 870+ C816 7D                                   ld      a,l                         ; check if l > 127
 871+ C817 E6 80                                and     SignOnly8Bit                ; .
 872+ C819 C0                                   ret     nz                          ; if bit is set then > 128
 873+ C81A 7D           .SetMinY:               ld      a,l
 874+ C81B 32 A1 C5                             ld      (MinYOffset),a              ; so now we have Y top of screen
 875+ C81E 2A A5 C5     .GetMaxY:               ld      hl,(SunScrnY)               ; get hl = Y + radius, note if we got here then this can never be a negative result but can go from -ve hl to +ve result
 876+ C821 3A A7 C5                             ld      a,(SunRadius)               ; hl = hl + radius
 877+ C824 16 00                                ld      d,0                         ; .
 878+ C826 5F                                   ld      e,a                         ; .
 879+ C827                                      ClearCarryFlag                      ; .
 879+ C827 B7          >                        or a
 880+ C828 ED 5A                                adc     hl,de                       ; .
 881+ C82A 7C                                   ld      a,h
 882+ C82B A7                                   and     a
 883+ C82C 28 06                                jr      z,.YHiOK
 884+ C82E 21 7F 00     .YHiGTE127:             ld      hl,127
 885+ C831 C3 3D C8                             jp      .SetMaxY
 886+ C834 7D           .YHiOK:                 ld      a,l                         ; clamp at 127
 887+ C835 E6 80                                and     SignOnly8Bit                ; .
 888+ C837 CA 3D C8                             jp      z,.SetMaxY
 889+ C83A 21 7F 00                             ld      hl,127
 890+ C83D 7D           .SetMaxY                ld      a,l
 891+ C83E 32 A2 C5                             ld      (MaxYOffSet),a              ; so now we have min and max Y coordinates and SunScrnX & Y holds center
 892+ C841 CD 48 C8                             call    SunDrawCircle
 893+ C844 CD BD C1                             call    SunDraw
 894+ C847 C9                                   ret
 895+ C848                                      ; b8 04 00 02 00 00 60 01 00 gives a 0.5 so we have the cal wrong as its +-1 so should be * result of divide by 128
 896+ C848              ;.. Now we caluclate the circle of the star
 897+ C848              ;.. its from MinY down the screen to MaxY center ProjX,ProjY.
 898+ C848              ;.. We can use the circle draw logic gtom Bressenham's algorithm
 899+ C848              ; so now there are the following conditions to consider
 900+ C848              ; y min = 0   y center is negative radius <= ABS (Y center)             => Don't draw
 901+ C848              ; y min = 0   y center is negative radius > ABS (Y center)+1            => Draw bottom half only
 902+ C848              ; y max = 127 y center is > 127    radius <= y center - 127             => Don't draw
 903+ C848              ; y max = 127 y center is > 127    radius > y center - 127              => Draw top half only
 904+ C848              ; y min >= 0  y center > y min     we don't need to worry about radius  => Draw both halves
 905+ C848              ; x center + radius < 0                                                 => Don't draw
 906+ C848              ; x center - radius > 255                                               => Don't draw
 907+ C848              ; we won't consider x more here as the driver is the y coordinate but we will check if x is vaiable
 908+ C848              ; x point = max (x point, 0)   on left
 909+ C848              ; x point = min (x point, 255) on right
 910+ C848
 911+ C848              SetIYPlusOffset:        MACRO   reg
 912+ C848 ~                                    push    hl,,iy                          ; save hl, then hl = iy
 913+ C848 ~                                    pop     hl                              ;
 914+ C848 ~                                    ld      a,reg
 915+ C848 ~                                    add     hl,a
 916+ C848 ~                                    add     hl,a
 917+ C848 ~                                    push    hl
 918+ C848 ~                                    pop     iy
 919+ C848 ~                                    pop     hl
 920+ C848                                      ENDM
 921+ C848
 922+ C848              SetIYMinusOffset:       MACRO   reg
 923+ C848 ~                                    push    de,,hl,,iy                      ; save hl, then hl = iy
 924+ C848 ~                                    pop     hl                              ;
 925+ C848 ~                                    ld      a,reg
 926+ C848 ~                                    add     a,a
 927+ C848 ~                                    ld      e,a
 928+ C848 ~                                    ld      d,0
 929+ C848 ~                                    ClearCarryFlag
 930+ C848 ~                                    sbc     hl,de
 931+ C848 ~                                    push    hl
 932+ C848 ~                                    pop     iy
 933+ C848 ~                                    pop     de,,hl
 934+ C848                                      ENDM
 935+ C848
 936+ C848
 937+ C848              ;;;-SunDrawCircle:          ld      a,(SunRadius)
 938+ C848              ;;;-.CheckRadius:           ReturnIfAIsZero                         ; elimiate zero or single pixel
 939+ C848              ;;;-                        JumpIfAEqNusng  1, SunCircleSinglePixel
 940+ C848              ;;;-                       ; JumpIfAGTENusng 127, SunFullScreen      ; if its covering whole then just make it yellow
 941+ C848              ;;;-; already done .MakeCentreX2C:         MemSignedTo2C SunScrnX                   ; convert 16 bit signed to 2's compliment
 942+ C848              ;;;-; already done .MakeCentreY2C:         MemSignedTo2C SunScrnY                   ; .
 943+ C848              ;;;-.BoundsCheck            ld      hl,(SunScrnY)
 944+ C848              ;;;-                        push    hl
 945+ C848              ;;;-                        ld      a,(SunRadius)
 946+ C848              ;;;-                        add     hl,a
 947+ C848              ;;;-                        bit     7,h
 948+ C848              ;;;-                        ret     nz                              ; if Y + radius is negative then off the screen
 949+ C848              ;;;-                        pop     hl
 950+ C848              ;;;-                        ld      d,0
 951+ C848              ;;;-                        ld      e,a
 952+ C848              ;;;-                        ClearCarryFlag
 953+ C848              ;;;-                        sbc     hl,de
 954+ C848              ;;;-                        ld      a,h
 955+ C848              ;;;-                        ReturnIfAGTENusng  1                     ; really shoudl be signed TODO
 956+ C848              ;;;-
 957+ C848              ;;;-                        ld      hl,(SunScrnX)
 958+ C848              ;;;-                        push    hl
 959+ C848              ;;;-                        ld      a,(SunRadius)
 960+ C848              ;;;-                        add     hl,a
 961+ C848              ;;;-                        bit     7,h
 962+ C848              ;;;-                        ret     nz                              ; if Y + radius is negative then off the screen
 963+ C848              ;;;-                        pop     hl
 964+ C848              ;;;-                        ld      d,0
 965+ C848              ;;;-                        ld      e,a
 966+ C848              ;;;-                        ClearCarryFlag
 967+ C848              ;;;-                        sbc     hl,de
 968+ C848              ;;;-                        ld      a,h
 969+ C848              ;;;-
 970+ C848              ;;;-                        ReturnIfAGTENusng 1                      ; really shoudl be signed TODO
 971+ C848              SunDrawCircle
 972+ C848                                      ; ** BNOTE Ptuichj abnd roll has a bug as piitch increases z axis value
 973+ C848              .PrepCircleData:       ; ld      ixl,0
 974+ C848                                     ; ld		(.Plot1+1),bc			        ; save origin into DE reg in code
 975+ C848 3A A7 C5                             ld      a,(SunRadius)
 976+ C84B DD 67                                ld		ixh,a							; ixh = radius
 977+ C84D DD 2E 00                             ld		ixl,0						    ; ixl = delta (y)
 978+ C850 26 00        .calcd:	                ld		h,0                             ; de = radius * 2
 979+ C852 6F                                   ld		l,a                             ; .
 980+ C853 29                                   add		hl,hl							; .
 981+ C854 EB                                   ex		de,hl							; .
 982+ C855 21 03 00                             ld		hl,3                            ; hl = 3 - (r * 2)
 983+ C858 A7                                   and		a                               ; .
 984+ C859 ED 52                                sbc		hl,de							; .
 985+ C85B 44                                   ld		b,h                             ; bc = 3 - (r * 2) : d = 3 - 2r
 986+ C85C 4D                                   ld		c,l								; .
 987+ C85D 21 01 00     .calcdelta:             ld		hl,1                            ; set hl to 1
 988+ C860 16 00                                ld		d,0                             ; de = ixl
 989+ C862 DD 5D                                ld		e,ixl                           ;
 990+ C864                                      ClearCarryFlag                          ;
 990+ C864 B7          >                        or a
 991+ C865 ED 52                                sbc		hl,de                           ; hl = 1 - ixl
 992+ C867 11 01 00     .Setde1:                ld		de,1                            ; del = 1
 993+ C86A DD 7C        .CircleLoop:            ld		a,ixh                           ; if x = y then exit
 994+ C86C DD BD                                cp		ixl                             ;
 995+ C86E D8                                   ret		c                               ;
 996+ C86F D9           .ProcessLoop:	        exx                                     ; save out registers
 997+ C870              ; Process CY+Y CX+X & CY+Y CX-X..................................
 998+ C870 2A A5 C5     .Plot1:                 ld      hl, (SunScrnY)
 999+ C873 DD 7C        .Get1YRow:              ld      a,ixh
1000+ C875 ED 31                                add     hl,a                            ; Check to see if CY+Y (note is add hl ,a usginedf only??)
1001+ C877              .Check1YRowOnScreen:    CheckRowHLOnScreen .NoTopPixelPair
1001+ C877 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1001+ C878 A7          >                        and     a                               ; .
1001+ C879 20 26       >                        jr      nz,.NoTopPixelPair                   ; h <> 0 so fails (covers <0 and > 255
1001+ C87B 7D          >                        ld      a,l                             ; l bit 7 0?
1001+ C87C E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1001+ C87E 20 21       >                        jr      nz,.NoTopPixelPair                   ;
1002+ C880              .Write1YCoord:          SetIYPlusOffset ixh                     ; IY = IY + ixh
1002+ C880 E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
1002+ C883 E1          >                        pop     hl                              ;
1002+ C884 DD 7C       >                        ld      a,ixh
1002+ C886 ED 31       >                        add     hl,a
1002+ C888 ED 31       >                        add     hl,a
1002+ C88A E5          >                        push    hl
1002+ C88B FD E1       >                        pop     iy
1002+ C88D E1          >                        pop     hl
1003+ C88E                                      IYEquRowN l                             ; IY = SBnkLineArray + (2 * l) - set up iy as target address
1003+ C88E 7D          >                        ld      a,l
1003+ C88F 21 A3 C0    >                        ld      hl,SBnKLineArray
1003+ C892 ED 31       >                        add     hl,a
1003+ C894 ED 31       >                        add     hl,a
1003+ C896 E5          >                        push    hl
1003+ C897 FD E1       >                        pop     iy
1004+ C899 DD 7D                                ld      a,ixl
1005+ C89B CD 6E C9                             call    ProcessXRowA
1006+ C89E C3 A1 C8                             jp      .Plot2
1007+ C8A1              .NoTopPixelPair:        ;break
1008+ C8A1              ; Process CY-Y CX+X & CY-Y CX-X..................................
1009+ C8A1 2A A5 C5     .Plot2:                 ld      hl, (SunScrnY)
1010+ C8A4 16 00        .Get2YRow:              ld      d,0
1011+ C8A6 DD 5C                                ld      e,ixh
1012+ C8A8                                      ClearCarryFlag
1012+ C8A8 B7          >                        or a
1013+ C8A9 ED 52                                sbc     hl,de
1014+ C8AB              .Check2YRowOnScreen:    CheckRowHLOnScreen .NoBottomPixelPair
1014+ C8AB 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1014+ C8AC A7          >                        and     a                               ; .
1014+ C8AD 20 2B       >                        jr      nz,.NoBottomPixelPair                   ; h <> 0 so fails (covers <0 and > 255
1014+ C8AF 7D          >                        ld      a,l                             ; l bit 7 0?
1014+ C8B0 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1014+ C8B2 20 26       >                        jr      nz,.NoBottomPixelPair                   ;
1015+ C8B4                                      SetIYMinusOffset ixh
1015+ C8B4 D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
1015+ C8B8 E1          >                        pop     hl                              ;
1015+ C8B9 DD 7C       >                        ld      a,ixh
1015+ C8BB 87          >                        add     a,a
1015+ C8BC 5F          >                        ld      e,a
1015+ C8BD 16 00       >                        ld      d,0
1015+ C8BF             >                        ClearCarryFlag
1015+ C8BF B7          >                        or a
1015+ C8C0 ED 52       >                        sbc     hl,de
1015+ C8C2 E5          >                        push    hl
1015+ C8C3 FD E1       >                        pop     iy
1015+ C8C5 E1 D1       >                        pop     de,,hl
1016+ C8C7              .Write2YCoord:          IYEquRowN l                             ; set up iy as target address
1016+ C8C7 7D          >                        ld      a,l
1016+ C8C8 21 A3 C0    >                        ld      hl,SBnKLineArray
1016+ C8CB ED 31       >                        add     hl,a
1016+ C8CD ED 31       >                        add     hl,a
1016+ C8CF E5          >                        push    hl
1016+ C8D0 FD E1       >                        pop     iy
1017+ C8D2 DD 7D                                ld      a,ixl
1018+ C8D4 CD 6E C9                             call    ProcessXRowA
1019+ C8D7 C3 DA C8                             jp      .Plot3
1020+ C8DA              .NoBottomPixelPair:     ;break
1021+ C8DA              ; Process CY+X CX+Y & CY+X CX-Y..................................
1022+ C8DA 2A A5 C5     .Plot3:                 ld      hl, (SunScrnY)
1023+ C8DD DD 7D        .Get3YRow:              ld      a,ixl
1024+ C8DF ED 31                                add     hl,a                            ; Check to see if CY+Y
1025+ C8E1              .Check3YRowOnScreen:    CheckRowHLOnScreen .NoTop3PixelPair
1025+ C8E1 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1025+ C8E2 A7          >                        and     a                               ; .
1025+ C8E3 20 26       >                        jr      nz,.NoTop3PixelPair                   ; h <> 0 so fails (covers <0 and > 255
1025+ C8E5 7D          >                        ld      a,l                             ; l bit 7 0?
1025+ C8E6 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1025+ C8E8 20 21       >                        jr      nz,.NoTop3PixelPair                   ;
1026+ C8EA                                      SetIYPlusOffset ixl
1026+ C8EA E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
1026+ C8ED E1          >                        pop     hl                              ;
1026+ C8EE DD 7D       >                        ld      a,ixl
1026+ C8F0 ED 31       >                        add     hl,a
1026+ C8F2 ED 31       >                        add     hl,a
1026+ C8F4 E5          >                        push    hl
1026+ C8F5 FD E1       >                        pop     iy
1026+ C8F7 E1          >                        pop     hl
1027+ C8F8              .Write3YCoord:          IYEquRowN l                             ; set up iy as target address
1027+ C8F8 7D          >                        ld      a,l
1027+ C8F9 21 A3 C0    >                        ld      hl,SBnKLineArray
1027+ C8FC ED 31       >                        add     hl,a
1027+ C8FE ED 31       >                        add     hl,a
1027+ C900 E5          >                        push    hl
1027+ C901 FD E1       >                        pop     iy
1028+ C903 DD 7C                                ld      a,ixh
1029+ C905 CD 6E C9                             call    ProcessXRowA
1030+ C908 C3 0B C9                             jp      .Plot4
1031+ C90B              .NoTop3PixelPair:       ;break
1032+ C90B              ; Process CY-X CX+Y & CY-X CX-Y..................................
1033+ C90B 2A A5 C5     .Plot4:                 ld      hl, (SunScrnY)
1034+ C90E 16 00        .Get4YRow:              ld      d,0
1035+ C910 DD 5D                                ld      e,ixl
1036+ C912                                      ClearCarryFlag
1036+ C912 B7          >                        or a
1037+ C913 ED 52                                sbc     hl,de
1038+ C915              .Check4YRowOnScreen:    CheckRowHLOnScreen .NoBottom4PixelPair
1038+ C915 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1038+ C916 A7          >                        and     a                               ; .
1038+ C917 20 28       >                        jr      nz,.NoBottom4PixelPair                   ; h <> 0 so fails (covers <0 and > 255
1038+ C919 7D          >                        ld      a,l                             ; l bit 7 0?
1038+ C91A E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1038+ C91C 20 23       >                        jr      nz,.NoBottom4PixelPair                   ;
1039+ C91E                                      SetIYMinusOffset ixl
1039+ C91E D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
1039+ C922 E1          >                        pop     hl                              ;
1039+ C923 DD 7D       >                        ld      a,ixl
1039+ C925 87          >                        add     a,a
1039+ C926 5F          >                        ld      e,a
1039+ C927 16 00       >                        ld      d,0
1039+ C929             >                        ClearCarryFlag
1039+ C929 B7          >                        or a
1039+ C92A ED 52       >                        sbc     hl,de
1039+ C92C E5          >                        push    hl
1039+ C92D FD E1       >                        pop     iy
1039+ C92F E1 D1       >                        pop     de,,hl
1040+ C931              .Write4YCoord:          IYEquRowN l                             ; set up iy as target address
1040+ C931 7D          >                        ld      a,l
1040+ C932 21 A3 C0    >                        ld      hl,SBnKLineArray
1040+ C935 ED 31       >                        add     hl,a
1040+ C937 ED 31       >                        add     hl,a
1040+ C939 E5          >                        push    hl
1040+ C93A FD E1       >                        pop     iy
1041+ C93C DD 7C                                ld      a,ixh
1042+ C93E CD 6E C9                             call    ProcessXRowA
1043+ C941              .NoBottom4PixelPair:
1044+ C941              ; Completed one iteration........................................
1045+ C941 D9                                   exx
1046+ C942 CB 7C        .IncrementCircle:	    bit     7,h				; Check for Hl<=0
1047+ C944 28 03                                jr z,   .draw_circle_1
1048+ C946 19                                   add hl,de			; Delta=Delta+D1
1049+ C947 18 05                                jr      .draw_circle_2		;
1050+ C949 09           .draw_circle_1:		    add     hl,bc			; Delta=Delta+D2
1051+ C94A 03                                   inc     bc
1052+ C94B 03                                   inc     bc				; D2=D2+2
1053+ C94C DD 25                                dec     ixh				; Y=Y-1
1054+ C94E 03           .draw_circle_2:		    inc bc				    ; D2=D2+2
1055+ C94F 03                                   inc bc
1056+ C950 13                                   inc de				    ; D1=D1+2
1057+ C951 13                                   inc de
1058+ C952 DD 2C                                inc ixl				    ; X=X+1
1059+ C954 C3 6A C8                             jp      .CircleLoop
1060+ C957 2A A3 C5     SunCircleSinglePixel:     ld      hl,(SunScrnX)
1061+ C95A 7C                                   ld      a,h
1062+ C95B A7                                   and     a
1063+ C95C C0                                   ret     nz                  ; if the high byte is set then no pixel
1064+ C95D 4D                                   ld      c,l
1065+ C95E 2A A5 C5                             ld      hl,(SunScrnY)
1066+ C961 7C                                   ld      a,h
1067+ C962 A7                                   and     a
1068+ C963 C0                                   ret     nz                  ; if the high byte is set then no pixel
1069+ C964 7D                                   ld      a,l
1070+ C965 CB 7F                                bit     7,a
1071+ C967 C0                                   ret     nz                  ; if l > 127 then no pixel
1072+ C968 47                                   ld      b,a
1073+ C969 7B                                   ld		a,e
1074+ C96A CD 6C E1                             call	l2_plot_pixel_y_test
1075+ C96D C9                                   ret
1076+ C96E
1077+ C96E              ProcessXRowA:           ;break
1078+ C96E 2A A3 C5                             ld      hl,(SunScrnX)                    ; get X Center
1079+ C971 F5                                   push    af                              ; save A (curent offset +/- value
1080+ C972 ED 31                                add     hl,a                            ; Hl = HL + offset
1081+ C974 7C                                   ld      a,h                             ; is HL negative?, if so then set C to 0
1082+ C975 CB 7F                                bit     7,a                             ;
1083+ C977 20 14                                jr      nz,.XCoordNegative              ; We can have this for non X + Radius i.e. the equater
1084+ C979 A7                                   and     a                               ; if H <> 0? (why by here must be +ve), set c to $FF
1085+ C97A 20 16                                jr      nz,.XCoordMaxed                 ; .
1086+ C97C 4D                                   ld      c,l                             ; else set c to l and do the -ve offset
1087+ C97D C5           .AddFuzz:               push    bc
1088+ C97E CD B2 86                             call    doRandom                        ; c = c - random AND ragged Size
1089+ C981 C1                                   pop     bc
1090+ C982 21 A0 C5                             ld      hl,RaggedSize                   ;
1091+ C985 A6                                   and     (hl)                            ;
1092+ C986 81                                   add     c                               ;
1093+ C987 4F                                   ld      c,a                             ;
1094+ C988 38 08                                jr      c,.XCoordMaxed                  ; has fuzz caused a carry, if so > 255 to make 255
1095+ C98A C3 94 C9                             jp      .ProcessSubtract                ;
1096+ C98D 0E 00        .XCoordNegative:        ld      c,0                             ; if it was negative then 0
1097+ C98F C3 94 C9                             jp      .ProcessSubtract
1098+ C992 0E FF        .XCoordMaxed:           ld      c,255                           ; if it was +ve then 255
1099+ C994 F1           .ProcessSubtract:       pop     af                              ; get offset back
1100+ C995 5F                                   ld      e,a                             ; but goes into DE as its a subtract
1101+ C996 16 00                                ld      d,0
1102+ C998 2A A3 C5                             ld      hl,(SunScrnX)                    ; so do subtract
1103+ C99B                                      ClearCarryFlag                          ; .
1103+ C99B B7          >                        or a
1104+ C99C ED 52                                sbc     hl,de                           ; .
1105+ C99E FA BB C9                             jp      m,.XCoordLeftNegative           ; again test for min max
1106+ C9A1 E5 C5        .AddFuzzSubtract:       push    hl,,bc
1107+ C9A3 CD B2 86                             call    doRandom                        ; c = c - random AND ragged Size
1108+ C9A6 C1                                   pop     bc
1109+ C9A7 21 A0 C5                             ld      hl,RaggedSize                   ;
1110+ C9AA A6                                   and     (hl)                            ;
1111+ C9AB 5F                                   ld      e,a
1112+ C9AC E1                                   pop     hl
1113+ C9AD ED 52                                sbc     hl,de
1114+ C9AF FA BB C9                             jp      m,.XCoordLeftNegative           ; again test for min max
1115+ C9B2 7C                                   ld      a,h
1116+ C9B3 A7                                   and     a
1117+ C9B4 C2 C0 C9                             jp      nz,.XCordLeftMaxed
1118+ C9B7 45                                   ld      b,l
1119+ C9B8 C3 C2 C9                             jp      .CompletedXCoords
1120+ C9BB 06 00        .XCoordLeftNegative:    ld      b,0
1121+ C9BD C3 C2 C9                             jp      .CompletedXCoords
1122+ C9C0 06 FF        .XCordLeftMaxed:        ld      b,255
1123+ C9C2 78           .CompletedXCoords:      ld      a,b
1124+ C9C3 FD 77 00     .RowSaveIY1             ld      (iy+0),a                        ; iy holds current line array index
1125+ C9C6 79                                   ld      a,c
1126+ C9C7 FD 77 01     .RowSaveIY3             ld      (iy+1),a
1127+ C9CA C9                                   ret
1128+ C9CB
1129+ C9CB              ; .....................................................
1130+ C9CB              ; if the universe object is a planet or sun then do that instead
1131+ C9CB              ;;TODOProcessPlanet:          cp      129
1132+ C9CB              ;;TODO                        jr      nz, .ItsAPlanet
1133+ C9CB              ;;TODO.ItsAStar:              ld      a,(SBnKzsgn)
1134+ C9CB              ;;TODO                        cp      48                               ; if z > 48 (it must be positive to enter this routine)
1135+ C9CB
1136+ C9CB
1137+ C9CB              ; Square Root using tables
1138+ C9CB              ; DE = number to find
1139+ C9CB 21 EB CB     SunLookupSqrtDE:        ld      hl,SunSquareRootTable
1140+ C9CE 7A           .LookupCorseJump:       ld      a,d
1141+ C9CF ED 31                                add     hl,a
1142+ C9D1 ED 31                                add     hl,a
1143+ C9D3 7E                                   ld      a,(hl)
1144+ C9D4 23                                   inc     hl
1145+ C9D5 66                                   ld      h,(hl)
1146+ C9D6 6F                                   ld      l,a
1147+ C9D7 7E           .FineSearchLoop:        ld      a,(hl)
1148+ C9D8                                      JumpIfAEqNusng  e, .FoundByte
1148+ C9D8 BB          >                        cp     e
1148+ C9D9 CA E5 C9    >                        jp      z,.FoundByte
1149+ C9DC                                      JumpIfAGTENusng e, .PreviousByte
1149+ C9DC BB          >                        cp     e
1149+ C9DD D2 E8 C9    >                        jp		nc,.PreviousByte
1150+ C9E0 23           .NotFound:              inc     hl
1151+ C9E1 23                                   inc     hl
1152+ C9E2 C3 D7 C9                             jp      .FineSearchLoop
1153+ C9E5 23           .FoundByte:             inc     hl
1154+ C9E6 7E                                   ld      a,(hl)
1155+ C9E7 C9                                   ret
1156+ C9E8 2B           .PreviousByte:          dec     hl
1157+ C9E9 7E                                   ld      a,(hl)
1158+ C9EA C9                                   ret
1159+ C9EB
1160+ C9EB EB CB FD CB  SunRootHighIndex:       DW SunSqr00,SunSqr01,SunSqr02,SunSqr03,SunSqr04,SunSqr05,SunSqr06,SunSqr07,SunSqr08,SunSqr09,SunSqr0A,SunSqr0B,SunSqr0C,SunSqr0D,SunSqr0E,SunSqr0F
1160+ C9EF 0B CC 17 CC
1160+ C9F3 21 CC 29 CC
1160+ C9F7 31 CC 39 CC
1160+ C9FB 41 CC 47 CC
1160+ C9FF 4F CC 55 CC
1160+ CA03 59 CC 5F CC
1160+ CA07 65 CC 6B CC
1161+ CA0B 71 CC 77 CC                          DW SunSqr10,SunSqr11,SunSqr12,SunSqr13,SunSqr14,SunSqr15,SunSqr16,SunSqr17,SunSqr18,SunSqr19,SunSqr1A,SunSqr1B,SunSqr1C,SunSqr1D,SunSqr1E,SunSqr1F
1161+ CA0F 7D CC 83 CC
1161+ CA13 89 CC 8D CC
1161+ CA17 91 CC 93 CC
1161+ CA1B 97 CC 9B CC
1161+ CA1F 9F CC A3 CC
1161+ CA23 A7 CC AB CC
1161+ CA27 AD CC B1 CC
1162+ CA2B B3 CC B7 CC                          DW SunSqr20,SunSqr21,SunSqr22,SunSqr23,SunSqr24,SunSqr25,SunSqr26,SunSqr27,SunSqr28,SunSqr29,SunSqr2A,SunSqr2B,SunSqr2C,SunSqr2D,SunSqr2E,SunSqr2F
1162+ CA2F BB CC BD CC
1162+ CA33 BF CC C3 CC
1162+ CA37 C5 CC C7 CC
1162+ CA3B CB CC CD CC
1162+ CA3F CF CC D1 CC
1162+ CA43 D5 CC D7 CC
1162+ CA47 D9 CC DD CC
1163+ CA4B E1 CC E5 CC                          DW SunSqr30,SunSqr31,SunSqr32,SunSqr33,SunSqr34,SunSqr35,SunSqr36,SunSqr37,SunSqr38,SunSqr39,SunSqr3A,SunSqr3B,SunSqr3C,SunSqr3D,SunSqr3E,SunSqr3F
1163+ CA4F E9 CC ED CC
1163+ CA53 EF CC F3 CC
1163+ CA57 F7 CC FB CC
1163+ CA5B FD CC 01 CD
1163+ CA5F 05 CD 09 CD
1163+ CA63 0D CD 11 CD
1163+ CA67 15 CD 19 CD
1164+ CA6B 1D CD 21 CD                          DW SunSqr40,SunSqr41,SunSqr42,SunSqr43,SunSqr44,SunSqr45,SunSqr46,SunSqr47,SunSqr48,SunSqr49,SunSqr4A,SunSqr4B,SunSqr4C,SunSqr4D,SunSqr4E,SunSqr4F
1164+ CA6F 25 CD 29 CD
1164+ CA73 2D CD 31 CD
1164+ CA77 35 CD 39 CD
1164+ CA7B 3D CD 41 CD
1164+ CA7F 45 CD 49 CD
1164+ CA83 4D CD 51 CD
1164+ CA87 55 CD 59 CD
1165+ CA8B 5D CD 5F CD                          DW SunSqr50,SunSqr51,SunSqr52,SunSqr53,SunSqr54,SunSqr55,SunSqr56,SunSqr57,SunSqr58,SunSqr59,SunSqr5A,SunSqr5B,SunSqr5C,SunSqr5D,SunSqr5E,SunSqr5F
1165+ CA8F 63 CD 67 CD
1165+ CA93 6B CD 6F CD
1165+ CA97 73 CD 77 CD
1165+ CA9B 7B CD 7D CD
1165+ CA9F 81 CD 85 CD
1165+ CAA3 89 CD 8D CD
1165+ CAA7 91 CD 93 CD
1166+ CAAB 97 CD 9B CD                          DW SunSqr60,SunSqr61,SunSqr62,SunSqr63,SunSqr64,SunSqr65,SunSqr66,SunSqr67,SunSqr68,SunSqr69,SunSqr6A,SunSqr6B,SunSqr6C,SunSqr6D,SunSqr6E,SunSqr6F
1166+ CAAF 9F CD A3 CD
1166+ CAB3 A5 CD A9 CD
1166+ CAB7 AD CD B1 CD
1166+ CABB B5 CD B7 CD
1166+ CABF BB CD BF CD
1166+ CAC3 C3 CD C5 CD
1166+ CAC7 C7 CD CB CD
1167+ CACB CF CD D3 CD                          DW SunSqr70,SunSqr71,SunSqr72,SunSqr73,SunSqr74,SunSqr75,SunSqr76,SunSqr77,SunSqr78,SunSqr79,SunSqr7A,SunSqr7B,SunSqr7C,SunSqr7D,SunSqr7E,SunSqr7F
1167+ CACF D7 CD DB CD
1167+ CAD3 DF CD E3 CD
1167+ CAD7 E5 CD E9 CD
1167+ CADB ED CD EF CD
1167+ CADF F3 CD F7 CD
1167+ CAE3 FB CD FD CD
1167+ CAE7 01 CE 05 CE
1168+ CAEB 09 CE 0B CE                          DW SunSqr80,SunSqr81,SunSqr82,SunSqr83,SunSqr84,SunSqr85,SunSqr86,SunSqr87,SunSqr88,SunSqr89,SunSqr8A,SunSqr8B,SunSqr8C,SunSqr8D,SunSqr8E,SunSqr8F
1168+ CAEF 0F CE 11 CE
1168+ CAF3 15 CE 19 CE
1168+ CAF7 1D CE 1F CE
1168+ CAFB 23 CE 27 CE
1168+ CAFF 29 CE 2D CE
1168+ CB03 31 CE 33 CE
1168+ CB07 37 CE 3B CE
1169+ CB0B 3D CE 41 CE                          DW SunSqr90,SunSqr91,SunSqr92,SunSqr93,SunSqr94,SunSqr95,SunSqr96,SunSqr97,SunSqr98,SunSqr99,SunSqr9A,SunSqr9B,SunSqr9C,SunSqr9D,SunSqr9E,SunSqr9F
1169+ CB0F 45 CE 47 CE
1169+ CB13 4B CE 4F CE
1169+ CB17 51 CE 55 CE
1169+ CB1B 59 CE 5B CE
1169+ CB1F 5F CE 63 CE
1169+ CB23 65 CE 69 CE
1169+ CB27 6D CE 6F CE
1170+ CB2B 73 CE 77 CE                          DW SunSqrA0,SunSqrA1,SunSqrA2,SunSqrA3,SunSqrA4,SunSqrA5,SunSqrA6,SunSqrA7,SunSqrA8,SunSqrA9,SunSqrAA,SunSqrAB,SunSqrAC,SunSqrAD,SunSqrAE,SunSqrAF
1170+ CB2F 79 CE 7D CE
1170+ CB33 7F CE 83 CE
1170+ CB37 87 CE 89 CE
1170+ CB3B 8D CE 8F CE
1170+ CB3F 93 CE 97 CE
1170+ CB43 99 CE 9D CE
1170+ CB47 A1 CE A3 CE
1171+ CB4B A5 CE A7 CE                          DW SunSqrB0,SunSqrB1,SunSqrB2,SunSqrB3,SunSqrB4,SunSqrB5,SunSqrB6,SunSqrB7,SunSqrB8,SunSqrB9,SunSqrBA,SunSqrBB,SunSqrBC,SunSqrBD,SunSqrBE,SunSqrBF
1171+ CB4F AB CE AF CE
1171+ CB53 B1 CE B5 CE
1171+ CB57 B7 CE BB CE
1171+ CB5B BF CE C3 CE
1171+ CB5F C5 CE C7 CE
1171+ CB63 CB CE CD CE
1171+ CB67 D1 CE D5 CE
1172+ CB6B D7 CE DB CE                          DW SunSqrC0,SunSqrC1,SunSqrC2,SunSqrC3,SunSqrC4,SunSqrC5,SunSqrC6,SunSqrC7,SunSqrC8,SunSqrC9,SunSqrCA,SunSqrCB,SunSqrCC,SunSqrCD,SunSqrCE,SunSqrCF
1172+ CB6F DD CE E1 CE
1172+ CB73 E3 CE E7 CE
1172+ CB77 EB CE ED CE
1172+ CB7B EF CE F1 CE
1172+ CB7F F5 CE F7 CE
1172+ CB83 FB CE FF CE
1172+ CB87 01 CF 05 CF
1173+ CB8B 07 CF 0B CF                          DW SunSqrD0,SunSqrD1,SunSqrD2,SunSqrD3,SunSqrD4,SunSqrD5,SunSqrD6,SunSqrD7,SunSqrD8,SunSqrD9,SunSqrDA,SunSqrDB,SunSqrDC,SunSqrDD,SunSqrDE,SunSqrDF
1173+ CB8F 0D CF 11 CF
1173+ CB93 13 CF 17 CF
1173+ CB97 1B CF 1D CF
1173+ CB9B 21 CF 23 CF
1173+ CB9F 27 CF 29 CF
1173+ CBA3 2D CF 2F CF
1173+ CBA7 31 CF 33 CF
1174+ CBAB 37 CF 3B CF                          DW SunSqrE0,SunSqrE1,SunSqrE2,SunSqrE3,SunSqrE4,SunSqrE5,SunSqrE6,SunSqrE7,SunSqrE8,SunSqrE9,SunSqrEA,SunSqrEB,SunSqrEC,SunSqrED,SunSqrEE,SunSqrEF
1174+ CBAF 3F CF 43 CF
1174+ CBB3 47 CF 4B CF
1174+ CBB7 4D CF 51 CF
1174+ CBBB 55 CF 59 CF
1174+ CBBF 5B CF 5F CF
1174+ CBC3 61 CF 63 CF
1174+ CBC7 65 CF 69 CF
1175+ CBCB 6B CF 6D CF                          DW SunSqrF0,SunSqrF1,SunSqrF2,SunSqrF3,SunSqrF4,SunSqrF5,SunSqrF6,SunSqrF7,SunSqrF8,SunSqrF9,SunSqrFA,SunSqrFB,SunSqrFC,SunSqrFD,SunSqrFE,SunSqrFF
1175+ CBCF 6F CF 73 CF
1175+ CBD3 75 CF 79 CF
1175+ CBD7 7B CF 7F CF
1175+ CBDB 81 CF 85 CF
1175+ CBDF 87 CF 8B CF
1175+ CBE3 8D CF 91 CF
1175+ CBE7 93 CF 95 CF
1176+ CBEB
1177+ CBEB              SunSquareRootTable:
1178+ CBEB 00 00        SunSqr00:               DB $00,   0
1179+ CBED 04 02                                DB $04,   2
1180+ CBEF 10 04                                DB $10,   4
1181+ CBF1 24 06                                DB $24,   6
1182+ CBF3 40 08                                DB $40,   8
1183+ CBF5 64 0A                                DB $64,  10
1184+ CBF7 90 0C                                DB $90,  12
1185+ CBF9 C4 0E                                DB $C4,  14
1186+ CBFB FF 0F                                DB $FF,  15
1187+ CBFD 00 10        SunSqr01:               DB $00,  16
1188+ CBFF 21 11                                DB $21,  17
1189+ CC01 44 12                                DB $44,  18
1190+ CC03 69 13                                DB $69,  19
1191+ CC05 90 14                                DB $90,  20
1192+ CC07 B9 15                                DB $B9,  21
1193+ CC09 FF 16                                DB $FF,  22
1194+ CC0B 11 17        SunSqr02:               DB $11,  23
1195+ CC0D 40 18                                DB $40,  24
1196+ CC0F 71 19                                DB $71,  25
1197+ CC11 A4 1A                                DB $A4,  26
1198+ CC13 D9 1B                                DB $D9,  27
1199+ CC15 FF 1B                                DB $FF,  27
1200+ CC17 10 1C        SunSqr03:               DB $10,  28
1201+ CC19 49 1D                                DB $49,  29
1202+ CC1B 84 1E                                DB $84,  30
1203+ CC1D C1 1F                                DB $C1,  31
1204+ CC1F FF 1F                                DB $FF,  31
1205+ CC21 00 20        SunSqr04:               DB $00,  32
1206+ CC23 41 21                                DB $41,  33
1207+ CC25 84 22                                DB $84,  34
1208+ CC27 FF 23                                DB $FF,  35
1209+ CC29 10 24        SunSqr05:               DB $10,  36
1210+ CC2B 59 25                                DB $59,  37
1211+ CC2D A4 26                                DB $A4,  38
1212+ CC2F FF 27                                DB $FF,  39
1213+ CC31 40 28        SunSqr06:               DB $40,  40
1214+ CC33 91 29                                DB $91,  41
1215+ CC35 E4 2A                                DB $E4,  42
1216+ CC37 FF 2A                                DB $FF,  42
1217+ CC39 39 2B        SunSqr07:               DB $39,  43
1218+ CC3B 90 2C                                DB $90,  44
1219+ CC3D E9 2D                                DB $E9,  45
1220+ CC3F FF 2D                                DB $FF,  45
1221+ CC41 44 2E        SunSqr08:               DB $44,  46
1222+ CC43 A1 2F                                DB $A1,  47
1223+ CC45 FF 2F                                DB $FF,  47
1224+ CC47 00 30        SunSqr09:               DB $00,  48
1225+ CC49 61 31                                DB $61,  49
1226+ CC4B C4 32                                DB $C4,  50
1227+ CC4D FF 32                                DB $FF,  50
1228+ CC4F 29 33        SunSqr0A:               DB $29,  51
1229+ CC51 90 34                                DB $90,  52
1230+ CC53 FF 35                                DB $FF,  53
1231+ CC55 64 36        SunSqr0B:               DB $64,  54
1232+ CC57 FF 37                                DB $FF,  55
1233+ CC59 40 38        SunSqr0C:               DB $40,  56
1234+ CC5B B1 39                                DB $B1,  57
1235+ CC5D FF 39                                DB $FF,  57
1236+ CC5F 24 3A        SunSqr0D:               DB $24,  58
1237+ CC61 99 3B                                DB $99,  59
1238+ CC63 FF 3B                                DB $FF,  59
1239+ CC65 10 3C        SunSqr0E:               DB $10,  60
1240+ CC67 89 3D                                DB $89,  61
1241+ CC69 FF 3D                                DB $FF,  61
1242+ CC6B 04 3E        SunSqr0F:               DB $04,  62
1243+ CC6D 81 3F                                DB $81,  63
1244+ CC6F FF 3F                                DB $FF,  63
1245+ CC71 00 40        SunSqr10:               DB $00,  64
1246+ CC73 81 41                                DB $81,  65
1247+ CC75 FF 41                                DB $FF,  65
1248+ CC77 04 42        SunSqr11:               DB $04,  66
1249+ CC79 89 43                                DB $89,  67
1250+ CC7B FF 43                                DB $FF,  67
1251+ CC7D 10 44        SunSqr12:               DB $10,  68
1252+ CC7F 99 45                                DB $99,  69
1253+ CC81 FF 45                                DB $FF,  69
1254+ CC83 24 46        SunSqr13:               DB $24,  70
1255+ CC85 B1 47                                DB $B1,  71
1256+ CC87 FF 47                                DB $FF,  71
1257+ CC89 40 48        SunSqr14:               DB $40,  72
1258+ CC8B FF 49                                DB $FF,  73
1259+ CC8D 64 4A        SunSqr15:               DB $64,  74
1260+ CC8F FF 4B                                DB $FF,  75
1261+ CC91 FF 4C        SunSqr16:               DB $FF,  76
1262+ CC93 C4 4D        SunSqr17:               DB $C4,  77
1263+ CC95 FF 4E                                DB $FF,  78
1264+ CC97 61 4F        SunSqr18:               DB $61,  79
1265+ CC99 FF 4F                                DB $FF,  79
1266+ CC9B 00 50        SunSqr19:               DB $00,  80
1267+ CC9D FF 51                                DB $FF,  81
1268+ CC9F 44 52        SunSqr1A:               DB $44,  82
1269+ CCA1 FF 53                                DB $FF,  83
1270+ CCA3 90 54        SunSqr1B:               DB $90,  84
1271+ CCA5 FF 54                                DB $FF,  84
1272+ CCA7 39 55        SunSqr1C:               DB $39,  85
1273+ CCA9 FF 56                                DB $FF,  86
1274+ CCAB FF 57        SunSqr1D:               DB $FF,  87
1275+ CCAD 40 58        SunSqr1E:               DB $40,  88
1276+ CCAF FF 59                                DB $FF,  89
1277+ CCB1 FF 5A        SunSqr1F:               DB $FF,  90
1278+ CCB3 59 5B        SunSqr20:               DB $59,  91
1279+ CCB5 FF 5B                                DB $FF,  91
1280+ CCB7 10 5C        SunSqr21:               DB $10,  92
1281+ CCB9 FF 5D                                DB $FF,  93
1282+ CCBB FF 5E        SunSqr22:               DB $FF,  94
1283+ CCBD FF 5F        SunSqr23:               DB $FF,  95
1284+ CCBF 00 60        SunSqr24:               DB $00,  96
1285+ CCC1 FF 61                                DB $FF,  97
1286+ CCC3 84 62        SunSqr25:               DB $84,  98
1287+ CCC5 49 63        SunSqr26:               DB $49,  99
1288+ CCC7 10 64        SunSqr27:               DB $10, 100
1289+ CCC9 FF 65                                DB $FF, 101
1290+ CCCB FF 66        SunSqr28:               DB $FF, 102
1291+ CCCD FF 67        SunSqr29:               DB $FF, 103
1292+ CCCF FF 68        SunSqr2A:               DB $FF, 104
1293+ CCD1 11 69        SunSqr2B:               DB $11, 105
1294+ CCD3 FF 6A                                DB $FF, 106
1295+ CCD5 FF 6B        SunSqr2C:               DB $FF, 107
1296+ CCD7 FF 6C        SunSqr2D:               DB $FF, 108
1297+ CCD9 69 6D        SunSqr2E:               DB $69, 109
1298+ CCDB FF 6E                                DB $FF, 110
1299+ CCDD 44 6E        SunSqr2F:               DB $44, 110
1300+ CCDF FF 6F                                DB $FF, 111
1301+ CCE1 21 6F        SunSqr30:               DB $21, 111
1302+ CCE3 FF 70                                DB $FF, 112
1303+ CCE5 00 70        SunSqr31:               DB $00, 112
1304+ CCE7 FF 71                                DB $FF, 113
1305+ CCE9 C4 72        SunSqr32:               DB $C4, 114
1306+ CCEB FF 72                                DB $FF, 114
1307+ CCED FF 73        SunSqr33:               DB $FF, 115
1308+ CCEF 90 74        SunSqr34:               DB $90, 116
1309+ CCF1 FF 75                                DB $FF, 117
1310+ CCF3 79 75        SunSqr35:               DB $79, 117
1311+ CCF5 FF 76                                DB $FF, 118
1312+ CCF7 64 76        SunSqr36:               DB $64, 118
1313+ CCF9 64 77                                DB $64, 119
1314+ CCFB 51 77        SunSqr37:               DB $51, 119
1315+ CCFD 40 78        SunSqr38:               DB $40, 120
1316+ CCFF FF 79                                DB $FF, 121
1317+ CD01 31 79        SunSqr39:               DB $31, 121
1318+ CD03 FF 7A                                DB $FF, 122
1319+ CD05 24 7A        SunSqr3A:               DB $24, 122
1320+ CD07 FF 7B                                DB $FF, 123
1321+ CD09 19 7B        SunSqr3B:               DB $19, 123
1322+ CD0B FF 7C                                DB $FF, 124
1323+ CD0D 10 7C        SunSqr3C:               DB $10, 124
1324+ CD0F FF 7D                                DB $FF, 125
1325+ CD11 09 7D        SunSqr3D:               DB $09, 125
1326+ CD13 FF 7D                                DB $FF, 125
1327+ CD15 04 7E        SunSqr3E:               DB $04, 126
1328+ CD17 FF 7E                                DB $FF, 126
1329+ CD19 01 7F        SunSqr3F:               DB $01, 127
1330+ CD1B FF 7F                                DB $FF, 127
1331+ CD1D 00 80        SunSqr40:               DB $00, 128
1332+ CD1F FF 80                                DB $FF, 128
1333+ CD21 01 81        SunSqr41:               DB $01, 129
1334+ CD23 FF 82                                DB $FF, 130
1335+ CD25 04 82        SunSqr42:               DB $04, 130
1336+ CD27 FF 83                                DB $FF, 131
1337+ CD29 09 83        SunSqr43:               DB $09, 131
1338+ CD2B FF 84                                DB $FF, 132
1339+ CD2D 10 84        SunSqr44:               DB $10, 132
1340+ CD2F FF 85                                DB $FF, 133
1341+ CD31 19 85        SunSqr45:               DB $19, 133
1342+ CD33 FF 86                                DB $FF, 134
1343+ CD35 24 86        SunSqr46:               DB $24, 134
1344+ CD37 FF 87                                DB $FF, 135
1345+ CD39 31 87        SunSqr47:               DB $31, 135
1346+ CD3B FF 88                                DB $FF, 136
1347+ CD3D 40 88        SunSqr48:               DB $40, 136
1348+ CD3F FF 89                                DB $FF, 137
1349+ CD41 51 89        SunSqr49:               DB $51, 137
1350+ CD43 FF 8A                                DB $FF, 138
1351+ CD45 64 8A        SunSqr4A:               DB $64, 138
1352+ CD47 FF 8A                                DB $FF, 138
1353+ CD49 79 8B        SunSqr4B:               DB $79, 139
1354+ CD4B FF 8B                                DB $FF, 139
1355+ CD4D 90 8C        SunSqr4C:               DB $90, 140
1356+ CD4F FF 8C                                DB $FF, 140
1357+ CD51 A9 8D        SunSqr4D:               DB $A9, 141
1358+ CD53 FF 8D                                DB $FF, 141
1359+ CD55 C4 8E        SunSqr4E:               DB $C4, 142
1360+ CD57 FF 8E                                DB $FF, 142
1361+ CD59 E1 8F        SunSqr4F:               DB $E1, 143
1362+ CD5B FF 8F                                DB $FF, 143
1363+ CD5D FF 8F        SunSqr50:               DB $FF, 143
1364+ CD5F 00 90        SunSqr51:               DB $00, 144
1365+ CD61 FF 90                                DB $FF, 144
1366+ CD63 21 91        SunSqr52:               DB $21, 145
1367+ CD65 FF 91                                DB $FF, 145
1368+ CD67 44 92        SunSqr53:               DB $44, 146
1369+ CD69 FF 92                                DB $FF, 146
1370+ CD6B 69 93        SunSqr54:               DB $69, 147
1371+ CD6D FF 93                                DB $FF, 147
1372+ CD6F 90 94        SunSqr55:               DB $90, 148
1373+ CD71 FF 94                                DB $FF, 148
1374+ CD73 B9 95        SunSqr56:               DB $B9, 149
1375+ CD75 FF 95                                DB $FF, 149
1376+ CD77 E4 96        SunSqr57:               DB $E4, 150
1377+ CD79 FF 96                                DB $FF, 150
1378+ CD7B FF 96        SunSqr58:               DB $FF, 150
1379+ CD7D 11 97        SunSqr59:               DB $11, 151
1380+ CD7F FF 97                                DB $FF, 151
1381+ CD81 40 98        SunSqr5A:               DB $40, 152
1382+ CD83 FF 98                                DB $FF, 152
1383+ CD85 71 99        SunSqr5B:               DB $71, 153
1384+ CD87 FF 99                                DB $FF, 153
1385+ CD89 A4 9A        SunSqr5C:               DB $A4, 154
1386+ CD8B FF 9A                                DB $FF, 154
1387+ CD8D D9 9B        SunSqr5D:               DB $D9, 155
1388+ CD8F FF 9B                                DB $FF, 155
1389+ CD91 FF 9B        SunSqr5E:               DB $FF, 155
1390+ CD93 10 9C        SunSqr5F:               DB $10, 156
1391+ CD95 FF 9C                                DB $FF, 156
1392+ CD97 49 9D        SunSqr60:               DB $49, 157
1393+ CD99 FF 9D                                DB $FF, 157
1394+ CD9B 84 9E        SunSqr61:               DB $84, 158
1395+ CD9D FF 9E                                DB $FF, 158
1396+ CD9F C1 9F        SunSqr62:               DB $C1, 159
1397+ CDA1 FF 9F                                DB $FF, 159
1398+ CDA3 FF 9F        SunSqr63:               DB $FF, 159
1399+ CDA5 00 A0        SunSqr64:               DB $00, 160
1400+ CDA7 FF A0                                DB $FF, 160
1401+ CDA9 41 A1        SunSqr65:               DB $41, 161
1402+ CDAB FF A1                                DB $FF, 161
1403+ CDAD 84 A2        SunSqr66:               DB $84, 162
1404+ CDAF FF A2                                DB $FF, 162
1405+ CDB1 C9 A3        SunSqr67:               DB $C9, 163
1406+ CDB3 FF A3                                DB $FF, 163
1407+ CDB5 FF A3        SunSqr68:               DB $FF, 163
1408+ CDB7 10 A4        SunSqr69:               DB $10, 164
1409+ CDB9 FF A4                                DB $FF, 164
1410+ CDBB 59 A5        SunSqr6A:               DB $59, 165
1411+ CDBD FF A5                                DB $FF, 165
1412+ CDBF A4 A6        SunSqr6B:               DB $A4, 166
1413+ CDC1 FF A6                                DB $FF, 166
1414+ CDC3 FF A7        SunSqr6C:               DB $FF, 167
1415+ CDC5 FF A7        SunSqr6D:               DB $FF, 167
1416+ CDC7 40 A8        SunSqr6E:               DB $40, 168
1417+ CDC9 FF A8                                DB $FF, 168
1418+ CDCB 91 A9        SunSqr6F:               DB $91, 169
1419+ CDCD FF A9                                DB $FF, 169
1420+ CDCF E4 AA        SunSqr70:               DB $E4, 170
1421+ CDD1 FF AA                                DB $FF, 170
1422+ CDD3 00 AA        SunSqr71:               DB $00, 170
1423+ CDD5 FF AA                                DB $FF, 170
1424+ CDD7 39 AB        SunSqr72:               DB $39, 171
1425+ CDD9 FF AB                                DB $FF, 171
1426+ CDDB 90 AC        SunSqr73:               DB $90, 172
1427+ CDDD FF AC                                DB $FF, 172
1428+ CDDF E9 AD        SunSqr74:               DB $E9, 173
1429+ CDE1 FF AD                                DB $FF, 173
1430+ CDE3 FF AD        SunSqr75:               DB $FF, 173
1431+ CDE5 44 AE        SunSqr76:               DB $44, 174
1432+ CDE7 FF AE                                DB $FF, 174
1433+ CDE9 A1 AF        SunSqr77:               DB $A1, 175
1434+ CDEB FF AF                                DB $FF, 175
1435+ CDED FF AF        SunSqr78:               DB $FF, 175
1436+ CDEF 00 B0        SunSqr79:               DB $00, 176
1437+ CDF1 FF B0                                DB $FF, 176
1438+ CDF3 61 B1        SunSqr7A:               DB $61, 177
1439+ CDF5 FF B1                                DB $FF, 177
1440+ CDF7 C4 B2        SunSqr7B:               DB $C4, 178
1441+ CDF9 FF B2                                DB $FF, 178
1442+ CDFB FF B2        SunSqr7C:               DB $FF, 178
1443+ CDFD 29 B3        SunSqr7D:               DB $29, 179
1444+ CDFF FF B3                                DB $FF, 179
1445+ CE01 90 B4        SunSqr7E:               DB $90, 180
1446+ CE03 FF B4                                DB $FF, 180
1447+ CE05 F9 B5        SunSqr7F:               DB $F9, 181
1448+ CE07 FF B5                                DB $FF, 181
1449+ CE09 FF B5        SunSqr80:               DB $FF, 181
1450+ CE0B 64 B6        SunSqr81:               DB $64, 182
1451+ CE0D FF B6                                DB $FF, 182
1452+ CE0F D1 B7        SunSqr82:               DB $D1, 183
1453+ CE11 FF B7        SunSqr83:               DB $FF, 183
1454+ CE13 FF B7                                DB $FF, 183
1455+ CE15 40 B8        SunSqr84:               DB $40, 184
1456+ CE17 FF B8                                DB $FF, 184
1457+ CE19 B1 B9        SunSqr85:               DB $B1, 185
1458+ CE1B FF B9                                DB $FF, 185
1459+ CE1D FF B9        SunSqr86:               DB $FF, 185
1460+ CE1F 24 BA        SunSqr87:               DB $24, 186
1461+ CE21 FF BA                                DB $FF, 186
1462+ CE23 99 BB        SunSqr88:               DB $99, 187
1463+ CE25 FF BB                                DB $FF, 187
1464+ CE27 FF BB        SunSqr89:               DB $FF, 187
1465+ CE29 10 BC        SunSqr8A:               DB $10, 188
1466+ CE2B FF BC                                DB $FF, 188
1467+ CE2D 89 BD        SunSqr8B:               DB $89, 189
1468+ CE2F FF BD                                DB $FF, 189
1469+ CE31 FF BD        SunSqr8C:               DB $FF, 189
1470+ CE33 04 BE        SunSqr8D:               DB $04, 190
1471+ CE35 FF BE                                DB $FF, 190
1472+ CE37 81 BF        SunSqr8E:               DB $81, 191
1473+ CE39 FF BF                                DB $FF, 191
1474+ CE3B FF BF        SunSqr8F:               DB $FF, 191
1475+ CE3D 00 C0        SunSqr90:               DB $00, 192
1476+ CE3F FF C0                                DB $FF, 192
1477+ CE41 81 C1        SunSqr91:               DB $81, 193
1478+ CE43 FF C1                                DB $FF, 193
1479+ CE45 FF C1        SunSqr92:               DB $FF, 193
1480+ CE47 04 C2        SunSqr93:               DB $04, 194
1481+ CE49 FF C2                                DB $FF, 194
1482+ CE4B 89 C3        SunSqr94:               DB $89, 195
1483+ CE4D FF C3                                DB $FF, 195
1484+ CE4F FF C3        SunSqr95:               DB $FF, 195
1485+ CE51 10 C4        SunSqr96:               DB $10, 196
1486+ CE53 FF C4                                DB $FF, 196
1487+ CE55 99 C5        SunSqr97:               DB $99, 197
1488+ CE57 FF C5                                DB $FF, 197
1489+ CE59 FF C5        SunSqr98:               DB $FF, 197
1490+ CE5B 24 C6        SunSqr99:               DB $24, 198
1491+ CE5D FF C6                                DB $FF, 198
1492+ CE5F B1 C7        SunSqr9A:               DB $B1, 199
1493+ CE61 FF C7                                DB $FF, 199
1494+ CE63 FF C7        SunSqr9B:               DB $FF, 199
1495+ CE65 40 C8        SunSqr9C:               DB $40, 200
1496+ CE67 FF C8                                DB $FF, 200
1497+ CE69 D1 C9        SunSqr9D:               DB $D1, 201
1498+ CE6B FF C9                                DB $FF, 201
1499+ CE6D FF C9        SunSqr9E:               DB $FF, 201
1500+ CE6F 64 CA        SunSqr9F:               DB $64, 202
1501+ CE71 FF CA                                DB $FF, 202
1502+ CE73 F9 CB        SunSqrA0:               DB $F9, 203
1503+ CE75 FF CB                                DB $FF, 203
1504+ CE77 FF CB        SunSqrA1:               DB $FF, 203
1505+ CE79 90 CC        SunSqrA2:               DB $90, 204
1506+ CE7B FF CC                                DB $FF, 204
1507+ CE7D FF CC        SunSqrA3:               DB $FF, 204
1508+ CE7F 29 CD        SunSqrA4:               DB $29, 205
1509+ CE81 FF CD                                DB $FF, 205
1510+ CE83 C4 CE        SunSqrA5:               DB $C4, 206
1511+ CE85 FF CE                                DB $FF, 206
1512+ CE87 FF CE        SunSqrA6:               DB $FF, 206
1513+ CE89 61 CF        SunSqrA7:               DB $61, 207
1514+ CE8B FF CF                                DB $FF, 207
1515+ CE8D FF CF        SunSqrA8:               DB $FF, 207
1516+ CE8F 00 D0        SunSqrA9:               DB $00, 208
1517+ CE91 FF D0                                DB $FF, 208
1518+ CE93 A1 D1        SunSqrAA:               DB $A1, 209
1519+ CE95 FF D1                                DB $FF, 209
1520+ CE97 FF D1        SunSqrAB:               DB $FF, 209
1521+ CE99 44 D2        SunSqrAC:               DB $44, 210
1522+ CE9B FF D2                                DB $FF, 210
1523+ CE9D E9 D3        SunSqrAD:               DB $E9, 211
1524+ CE9F FF D3                                DB $FF, 211
1525+ CEA1 FF D3        SunSqrAE:               DB $FF, 211
1526+ CEA3 90 D4        SunSqrAF:               DB $90, 212
1527+ CEA5 FF D4        SunSqrB0:               DB $FF, 212
1528+ CEA7 39 D5        SunSqrB1:               DB $39, 213
1529+ CEA9 FF D5                                DB $FF, 213
1530+ CEAB E4 D6        SunSqrB2:               DB $E4, 214
1531+ CEAD FF D6                                DB $FF, 214
1532+ CEAF FF D6        SunSqrB3:               DB $FF, 214
1533+ CEB1 91 D7        SunSqrB4:               DB $91, 215
1534+ CEB3 FF D7                                DB $FF, 215
1535+ CEB5 FF D7        SunSqrB5:               DB $FF, 215
1536+ CEB7 40 D8        SunSqrB6:               DB $40, 216
1537+ CEB9 FF D8                                DB $FF, 216
1538+ CEBB F1 D9        SunSqrB7:               DB $F1, 217
1539+ CEBD FF D9                                DB $FF, 217
1540+ CEBF FF D9        SunSqrB8:               DB $FF, 217
1541+ CEC1 FF D9                                DB $FF, 217
1542+ CEC3 A4 DA        SunSqrB9:               DB $A4, 218
1543+ CEC5 FF DA        SunSqrBA:               DB $FF, 218 ; we can reuse SunSeqrBA as  $FF for B9 terminator as well as they have the same target
1544+ CEC7 59 DB        SunSqrBB:               DB $59, 219
1545+ CEC9 FF DB                                DB $FF, 219
1546+ CECB FF DB        SunSqrBC:               DB $FF, 219
1547+ CECD 10 DC        SunSqrBD:               DB $10, 220
1548+ CECF FF DC                                DB $FF, 220
1549+ CED1 C9 DD        SunSqrBE:               DB $C9, 221
1550+ CED3 FF DD                                DB $FF, 221
1551+ CED5 FF DD        SunSqrBF:               DB $FF, 221
1552+ CED7 84 DE        SunSqrC0:               DB $84, 222
1553+ CED9 FF DE                                DB $FF, 222
1554+ CEDB FF DE        SunSqrC1:               DB $FF, 222
1555+ CEDD 41 DF        SunSqrC2:               DB $41, 223
1556+ CEDF FF DF                                DB $FF, 223
1557+ CEE1 FF DF        SunSqrC3:               DB $FF, 223
1558+ CEE3 00 E0        SunSqrC4:               DB $00, 224
1559+ CEE5 FF E0                                DB $FF, 224
1560+ CEE7 C1 E1        SunSqrC5:               DB $C1, 225
1561+ CEE9 FF E1                                DB $FF, 225
1562+ CEEB FF E1        SunSqrC6:               DB $FF, 225
1563+ CEED 84 E2        SunSqrC7:               DB $84, 226
1564+ CEEF FF E2        SunSqrC8:               DB $FF, 226
1565+ CEF1 49 E3        SunSqrC9:               DB $49, 227
1566+ CEF3 FF E3                                DB $FF, 227
1567+ CEF5 FF E4        SunSqrCA:               DB $FF, 228
1568+ CEF7 10 E4        SunSqrCB:               DB $10, 228
1569+ CEF9 FF E4                                DB $FF, 228
1570+ CEFB D9 E5        SunSqrCC:               DB $D9, 229
1571+ CEFD FF E5                                DB $FF, 229
1572+ CEFF FF E5        SunSqrCD:               DB $FF, 229
1573+ CF01 A4 E6        SunSqrCE:               DB $A4, 230
1574+ CF03 FF E6                                DB $FF, 230
1575+ CF05 FF E6        SunSqrCF:               DB $FF, 230
1576+ CF07 71 E7        SunSqrD0:               DB $71, 231
1577+ CF09 FF E7                                DB $FF, 231
1578+ CF0B FF E7        SunSqrD1:               DB $FF, 231
1579+ CF0D 40 E8        SunSqrD2:               DB $40, 232
1580+ CF0F FF E8                                DB $FF, 232
1581+ CF11 FF E8        SunSqrD3:               DB $FF, 232
1582+ CF13 11 E9        SunSqrD4:               DB $11, 233
1583+ CF15 FF E9                                DB $FF, 233
1584+ CF17 E4 EA        SunSqrD5:               DB $E4, 234
1585+ CF19 FF EA                                DB $FF, 234
1586+ CF1B FF EA        SunSqrD6:               DB $FF, 234
1587+ CF1D B9 EB        SunSqrD7:               DB $B9, 235
1588+ CF1F FF EB                                DB $FF, 235
1589+ CF21 FF EB        SunSqrD8:               DB $FF, 235
1590+ CF23 90 EC        SunSqrD9:               DB $90, 236
1591+ CF25 FF EC                                DB $FF, 236
1592+ CF27 FF EC        SunSqrDA:               DB $FF, 236
1593+ CF29 69 ED        SunSqrDB:               DB $69, 237
1594+ CF2B FF ED                                DB $FF, 237
1595+ CF2D FF ED        SunSqrDC:               DB $FF, 237
1596+ CF2F 44 EE        SunSqrDD:               DB $44, 238
1597+ CF31 FF EE        SunSqrDE:               DB $FF, 238
1598+ CF33 21 EF        SunSqrDF:               DB $21, 239
1599+ CF35 FF EF                                DB $FF, 239
1600+ CF37 00 F0        SunSqrE0:               DB $00, 240
1601+ CF39 FF F0                                DB $FF, 240
1602+ CF3B 00 F0        SunSqrE1:               DB $00, 240
1603+ CF3D FF F0                                DB $FF, 240
1604+ CF3F E1 F1        SunSqrE2:               DB $E1, 241
1605+ CF41 FF F1                                DB $FF, 241
1606+ CF43 E1 F1        SunSqrE3:               DB $E1, 241
1607+ CF45 FF F1                                DB $FF, 241
1608+ CF47 C4 F2        SunSqrE4:               DB $C4, 242
1609+ CF49 FF F2                                DB $FF, 242
1610+ CF4B FF F2        SunSqrE5:               DB $FF, 242
1611+ CF4D A9 F3        SunSqrE6:               DB $A9, 243
1612+ CF4F FF F3                                DB $FF, 243
1613+ CF51 FF F3        SunSqrE7:               DB $FF, 243
1614+ CF53 FF F3                                DB $FF, 243
1615+ CF55 90 F3        SunSqrE8:               DB $90, 243
1616+ CF57 FF F4                                DB $FF, 244
1617+ CF59 FF F4        SunSqrE9:               DB $FF, 244
1618+ CF5B 79 F5        SunSqrEA:               DB $79, 245
1619+ CF5D FF F5                                DB $FF, 245
1620+ CF5F FF F5        SunSqrEB:               DB $FF, 245
1621+ CF61 64 F6        SunSqrEC:               DB $64, 246
1622+ CF63 FF F6        SunSqrED:               DB $FF, 246
1623+ CF65 51 F7        SunSqrEE:               DB $51, 247
1624+ CF67 FF F7                                DB $FF, 247
1625+ CF69 FF F7        SunSqrEF:               DB $FF, 247
1626+ CF6B 40 F8        SunSqrF0:               DB $40, 248
1627+ CF6D FF F8        SunSqrF1:               DB $FF, 248
1628+ CF6F 31 F9        SunSqrF2:               DB $31, 249
1629+ CF71 FF F9                                DB $FF, 249
1630+ CF73 FF F9        SunSqrF3:               DB $FF, 249
1631+ CF75 24 FA        SunSqrF4:               DB $24, 250
1632+ CF77 FF FA                                DB $FF, 250
1633+ CF79 FF FA        SunSqrF5:               DB $FF, 250
1634+ CF7B 19 FB        SunSqrF6:               DB $19, 251
1635+ CF7D FF FB                                DB $FF, 251
1636+ CF7F FF FB        SunSqrF7:               DB $FF, 251
1637+ CF81 10 FC        SunSqrF8:               DB $10, 252
1638+ CF83 FF FC                                DB $FF, 252
1639+ CF85 FF FC        SunSqrF9:               DB $FF, 252
1640+ CF87 09 FD        SunSqrFA:               DB $09, 253
1641+ CF89 FF FD                                DB $FF, 253
1642+ CF8B FF FD        SunSqrFB:               DB $FF, 253
1643+ CF8D 04 FE        SunSqrFC:               DB $04, 254
1644+ CF8F FF FE                                DB $FF, 254
1645+ CF91 FF FE        SunSqrFD:               DB $FF, 254
1646+ CF93 01 FF        SunSqrFE:               DB $01, 255
1647+ CF95 FF FF        SunSqrFF:               DB $FF, 255
1648+ CF97
1649+ CF97
1650+ CF97
1651+ CF97              SunBankSize  EQU $ - StartOfSun
1652+ CF97
1653+ CF97
# file closed: ./Universe/Sun/sun_data.asm
 905  CF97                                      DISPLAY "Bank ",BankSunData," - Bytes free ",/D, $2000 - ($-SunBankAddr), " - BankSunData"
 906  CF97              ; Bank 84  ------------------------------------------------------------------------------------------------------------------------
 907  CF97                                      SLOT    PlanetBankAddr
 908  CF97                                      PAGE    BankPlanetData
 909  CF97                                      ORG	    PlanetBankAddr,BankPlanetData
 910  C000                                      INCLUDE "./Universe/Planet/planet_data.asm"
# file opened: ./Universe/Planet/planet_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; In  flight ship data tables
   4+ C000              ; There can be upto &12 objects in flight.
   5+ C000              ; To avoid hassle of memory heap managment, the free list
   6+ C000              ; will correspond to a memory bank offset so data will be held in
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   9+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  10+ C000              ; This means each gets its own line list, inwork etc
  11+ C000
  12+ C000              ; "Runtime Ship Data paged into in Bank 7"
  13+ C000              ;                      0123456789ABCDEF
  14+ C000 50 6C 61 6E  StartOfPlanet:     DB "Planet Data....."
  14+ C004 65 74 20 44
  14+ C008 61 74 61 2E
  14+ C00C 2E 2E 2E 2E
  15+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  16+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  17+ C010              ; Universe map substibute for INWK
  18+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  19+ C010              PBnKDataBlock:
  20+ C010                                      INCLUDE "./Universe/Planet/PlanetPosVars.asm"
# file opened: ././Universe/Planet/PlanetPosVars.asm
   1++C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C010 00           PBnKxlo                     DB  0                       ; INWK+0
   3++C011 00           PBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C012 00           PBnKxsgn                    DB  0                       ; INWK+2
   5++C013 00           PBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C014 00           PBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C015 00           PBnKysgn                    DB  0                       ; INWK +5
   8++C016 00           PBnKzlo                     DB  0                       ; INWK +6
   9++C017 00           PBnKzhi                     DB  0                       ; INWK +7
  10++C018 00           PBnKzsgn                    DB  0                       ; INWK +8
  11++C019 00 00        PlanetCompassX              DW  0
  12++C01B 00 00        PlanetCompassY              DW  0
  13++C01D
# file closed: ././Universe/Planet/PlanetPosVars.asm
  21+ C01D                                      INCLUDE "./Universe/Planet/PlanetRotationMatrixVars.asm"
# file opened: ././Universe/Planet/PlanetRotationMatrixVars.asm
   1++C01D              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C01D              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C01D 00 00        PBnKrotmatSidevX            DW  0                       ; INWK +21
   4++C01F              PBnKrotmatSidev             equ PBnKrotmatSidevX
   5++C01F 00 00        PBnKrotmatSidevY            DW  0                       ; INWK +23
   6++C021 00 00        PBnKrotmatSidevZ            DW  0                       ; INWK +25
   7++C023 00 00        PBnKrotmatRoofvX            DW  0                       ; INWK +15
   8++C025              PBnKrotmatRoofv             equ PBnKrotmatRoofvX
   9++C025 00 00        PBnKrotmatRoofvY            DW  0                       ; INWK +17
  10++C027 00 00        PBnKrotmatRoofvZ            DW  0                       ; INWK +19
  11++C029 00 00        PBnKrotmatNosevX            DW  0                       ; INWK +9
  12++C02B              PBnKrotmatNosev             EQU PBnKrotmatNosevX
  13++C02B 00 00        PBnKrotmatNosevY            DW  0                       ; INWK +11
  14++C02D 00 00        PBnKrotmatNosevZ            DW  0                       ; INWK +13
  15++C02F
# file closed: ././Universe/Planet/PlanetRotationMatrixVars.asm
  22+ C02F                                      INCLUDE "./Universe/Planet/PlanetAIRuntimeData.asm"
# file opened: ././Universe/Planet/PlanetAIRuntimeData.asm
   1++C02F              ; -- Ship AI data
   2++C02F 00           PBnKRotXCounter             DB  0                       ; INWK +29
   3++C030 00           PBnKRotZCounter             DB  0                       ; INWK +30
   4++C031 00           PBnkCam0yLo                 DB  0                       ; INWK +33 ????
   5++C032 00           PBnkCam0yHi                 DB  0                       ; INWK +34?????
   6++C033 00           PBnKShipType                DB  0
# file closed: ././Universe/Planet/PlanetAIRuntimeData.asm
  23+ C034
  24+ C034
  25+ C034                                      INCLUDE "./Universe/Planet/PlanetXX16Vars.asm"
# file opened: ././Universe/Planet/PlanetXX16Vars.asm
   1++C034              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C034 00 00        PBnkTransmatSidevX          DW  0               ; XX16+0
   3++C036              PBnkTransmatSidev           EQU PBnkTransmatSidevX
   4++C036 00 00        PBnkTransmatSidevY          DW 0                ; XX16+2
   5++C038 00 00        PBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C03A 00 00        PBnkTransmatRoofvX          DW 0
   7++C03C              PBnkTransmatRoofv           EQU PBnkTransmatRoofvX
   8++C03C 00 00        PBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C03E 00 00        PBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C040 00 00        PBnkTransmatNosevX          DW 0
  11++C042              PBnkTransmatNosev           EQU PBnkTransmatNosevX
  12++C042 00 00        PBnkTransmatNosevY          DW 0                ; XX16+2
  13++C044 00 00        PBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C046 00 00        PBnkTransmatTransX          DW 0
  15++C048 00 00        PBnkTransmatTransY          DW 0
  16++C04A 00 00        PBnkTransmatTransZ          DW 0
  17++C04C              PlanetXX16                      equ PBnkTransmatSidev
  18++C04C              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C04C 00 00        PBnkTransInvRow0x0          DW 0
  20++C04E 00 00        PBnkTransInvRow0x1          DW 0
  21++C050 00 00        PBnkTransInvRow0x2          DW 0
  22++C052 00 00        PBnkTransInvRow0x3          DW 0
  23++C054 00 00        PBnkTransInvRow1y0          DW 0
  24++C056 00 00        PBnkTransInvRow1y1          DW 0
  25++C058 00 00        PBnkTransInvRow1y2          DW 0
  26++C05A 00 00        PBnkTransInvRow1y3          DW 0
  27++C05C 00 00        PBnkTransInvRow2z0          DW 0
  28++C05E 00 00        PBnkTransInvRow2z1          DW 0
  29++C060 00 00        PBnkTransInvRow2z2          DW 0
  30++C062 00 00        PBnkTransInvRow2z3          DW 0
  31++C064
  32++C064              PlanetXX16Inv             equ PBnkTransInvRow0x0
  33++C064
# file closed: ././Universe/Planet/PlanetXX16Vars.asm
  26+ C064                                      INCLUDE "./Universe/Planet/PlanetXX25Vars.asm"
# file opened: ././Universe/Planet/PlanetXX25Vars.asm
   1++C064              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C064 00           PBnKProjxLo                 DB  0
   3++C065 00           PBnKProjxHi                 DB  0
   4++C066 00           PBnKProjxSgn                DB  0
   5++C067              PBnKProjx                   EQU PBnKProjxLo
   6++C067 00           PBnKProjyLo                 DB  0
   7++C068 00           PBnKProjyHi                 DB  0
   8++C069 00           PBnKProjySgn                DB  0
   9++C06A              PBnKProjy                   EQU PBnKProjyLo
  10++C06A 00           PBnKProjzLo                 DB  0
  11++C06B 00           PBnKProjzHi                 DB  0
  12++C06C 00           PBnKProjzSgn                DB  0
  13++C06D              PBnKProjz                   EQU PBnKProjzLo
  14++C06D              PXX25                       EQU PBnKProjxLo
  15++C06D
# file closed: ././Universe/Planet/PlanetXX25Vars.asm
  27+ C06D                                      INCLUDE "./Universe/Planet/PlanetXX18Vars.asm"
# file opened: ././Universe/Planet/PlanetXX18Vars.asm
   1++C06D              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C06D 00           PBnKDrawCam0xLo             DB  0               ; XX18+0
   3++C06E 00           PBnKDrawCam0xHi             DB  0               ; XX18+1
   4++C06F 00           PBnKDrawCam0xSgn            DB  0               ; XX18+2
   5++C070              PBnKDrawCam0x               equ PBnKDrawCam0xLo
   6++C070 00           PBnKDrawCam0yLo             DB  0               ; XX18+3
   7++C071 00           PBnKDrawCam0yHi             DB  0               ; XX18+4
   8++C072 00           PBnKDrawCam0ySgn            DB  0               ; XX18+5
   9++C073              PBnKDrawCam0y               equ PBnKDrawCam0yLo
  10++C073 00           PBnKDrawCam0zLo             DB  0               ; XX18+6
  11++C074 00           PBnKDrawCam0zHi             DB  0               ; XX18+7
  12++C075 00           PBnKDrawCam0zSgn            DB  0               ; XX18+8
  13++C076              PBnKDrawCam0z               equ PBnKDrawCam0zLo
  14++C076              PXX18                       equ PBnKDrawCam0xLo
  15++C076
# file closed: ././Universe/Planet/PlanetXX18Vars.asm
  28+ C076
  29+ C076              ; Used to make 16 bit reads a little cleaner in source code
  30+ C076 00 00 00     PBnKzPoint                  DS  3
  31+ C079              PBnKzPointLo                equ PBnKzPoint
  32+ C079              PBnKzPointHi                equ PBnKzPoint+1
  33+ C079              PBnKzPointSign              equ PBnKzPoint+2
  34+ C079                                      INCLUDE "./Universe/Planet/PlanetXX15Vars.asm"
# file opened: ././Universe/Planet/PlanetXX15Vars.asm
   1++C079              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C079 00           PBnKXScaled                 DB  0               ; XX15+0Xscaled
   3++C07A 00           PBnKXScaledSign             DB  0               ; XX15+1xsign
   4++C07B 00           PBnKYScaled                 DB  0               ; XX15+2yscaled
   5++C07C 00           PBnKYScaledSign             DB  0               ; XX15+3ysign
   6++C07D 00           PBnKZScaled                 DB  0               ; XX15+4zscaled
   7++C07E 00           PBnKZScaledSign             DB  0               ; XX15+5zsign
   8++C07F
   9++C07F              PXX15                       equ PBnKXScaled
  10++C07F              PXX15VecX                   equ PXX15
  11++C07F              PXX15VecY                   equ PXX15+1
  12++C07F              PXX15VecZ                   equ PXX15+2
  13++C07F              PBnKXPoint                  equ PXX15
  14++C07F              PBnKXPointLo                equ PXX15+0
  15++C07F              PBnKXPointHi                equ PXX15+1
  16++C07F              PBnKXPointSign              equ PXX15+2
  17++C07F              PBnKYPoint                  equ PXX15+3
  18++C07F              PBnKYPointLo                equ PXX15+3
  19++C07F              PBnKYPointHi                equ PXX15+4
  20++C07F              PBnKYPointSign              equ PXX15+5
  21++C07F
# file closed: ././Universe/Planet/PlanetXX15Vars.asm
  35+ C07F                                      INCLUDE "./Universe/Planet/PlanetXX12Vars.asm"
# file opened: ././Universe/Planet/PlanetXX12Vars.asm
   1++C07F              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07F              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07F 00           PBnKXX12xLo                 DB  0               ; XX12+0
   4++C080 00           PBnKXX12xSign               DB  0               ; XX12+1
   5++C081 00           PBnKXX12yLo                 DB  0               ; XX12+2
   6++C082 00           PBnKXX12ySign               DB  0               ; XX12+3
   7++C083 00           PBnKXX12zLo                 DB  0               ; XX12+4
   8++C084 00           PBnKXX12zSign               DB  0               ; XX12+5
   9++C085 00 00 00...  PXX12Save                   DS  6
  10++C08B 00 00 00...  PXX12Save2                  DS  6
  11++C091              PXX12                       equ PBnKXX12xLo
  12++C091              varPXX12                    equ PBnKXX12xLo
  13++C091              ; Repurposed XX12 when plotting lines
  14++C091              PBnkY2                      equ PXX12+0
  15++C091              PbnKy2Lo                    equ PXX12+0
  16++C091              PBnkY2Hi                    equ PXX12+1
  17++C091              PBnkDeltaXLo                equ PXX12+2
  18++C091              PBnkDeltaXHi                equ PXX12+3
  19++C091              PBnkDeltaYLo                equ PXX12+4
  20++C091              PBnkDeltaYHi                equ PXX12+5
  21++C091              PbnkGradient                equ PXX12+2
  22++C091              PBnkTemp1                   equ PXX12+2
  23++C091              PBnkTemp1Lo                 equ PXX12+2
  24++C091              PBnkTemp1Hi                 equ PXX12+3
  25++C091              PBnkTemp2                   equ PXX12+3
  26++C091              PBnkTemp2Lo                 equ PXX12+3
  27++C091              PBnkTemp2Hi                 equ PXX12+4
  28++C091
# file closed: ././Universe/Planet/PlanetXX12Vars.asm
  36+ C091
  37+ C091
  38+ C091              ; Post clipping the results are now 8 bit
  39+ C091 00           PBnKVisibility              DB  0               ; replaces general purpose xx4 in rendering
  40+ C092 00           PBnKProjectedY              DB  0
  41+ C093 00           PBnKProjectedX              DB  0
  42+ C094              PBnKProjected               equ PBnKProjectedY  ; resultant projected position
  43+ C094 00 00 00...  PLanetXX15Save              DS  8
  44+ C09C 00 00 00...  PLanetXX15Save2             DS  8
  45+ C0A4
  46+ C0A4              PBnK_Data_len               EQU $ - PBnKDataBlock
  47+ C0A4
  48+ C0A4              ; --------------------------------------------------------------
  49+ C0A4 21 10 C0     ResetPBnKData:          ld      hl,PBnKDataBlock
  50+ C0A7 11 94 00                             ld      de,PBnK_Data_len
  51+ C0AA AF                                   xor     a
  52+ C0AB CD A3 7C                             call    memfill_dma
  53+ C0AE C9                                   ret
  54+ C0AF              ; --------------------------------------------------------------
  55+ C0AF 21 10 C0     ResetPBnKPosition:      ld      hl,PBnKxlo
  56+ C0B2 06 09                                ld      b, 3*3
  57+ C0B4 AF                                   xor     a
  58+ C0B5 77           .zeroLoop:              ld      (hl),a
  59+ C0B6 23                                   inc     hl
  60+ C0B7 10 FC                                djnz    .zeroLoop
  61+ C0B9 C9                                   ret
  62+ C0BA              ; This uses UBNKNodeArray as the list
  63+ C0BA              ; the array is 256 * 2 bytes
  64+ C0BA              ; counter is current row y pos
  65+ C0BA              ; byte 1 is start x pos
  66+ C0BA              ; byte 2 is end x pos
  67+ C0BA              ; if they are both 0 then skip
  68+ C0BA              ; its always horizontal, yellow
  69+ C0BA
  70+ C0BA              ; PLANET
  71+ C0BA
  72+ C0BA              ; --------------------------------------------------------------
  73+ C0BA              ; This sets current universe object to a planet,they use sign + 23 bit positions
  74+ C0BA CD A4 C0     CreatePlanet:           call    ResetPBnKData
  75+ C0BD 3A 9F 81                             ld      a,(DisplayTekLevel)
  76+ C0C0 E6 02                                and     %00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
  77+ C0C2 F6 80                                or      %10000000
  78+ C0C4 32 33 C0                             ld      (PBnKShipType),a
  79+ C0C7                                      MaxUnivPitchAndRoll
  79+ C0C7 3E 7F       >                        ld      a,127
  79+ C0C9 32 38 C0    >                        ld      (UBnKRotXCounter),a
  79+ C0CC 32 39 C0    >                        ld      (UBnKRotZCounter),a
  80+ C0CF 3A 0A 82                             ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
  81+ C0D2 E6 03                                and     %00000011               ; .
  82+ C0D4 CE 03                                adc     3                       ; .
  83+ C0D6 32 18 C0                             ld      (PBnKzsgn),a            ; set z sign to 3 + C + 0..3 bits
  84+ C0D9 CB 1F                                rr      a
  85+ C0DB 32 12 C0                             ld      (PBnKxsgn),a
  86+ C0DE 32 15 C0                             ld      (PBnKysgn),a
  87+ C0E1 C9                                   ret
  88+ C0E2
  89+ C0E2 CD A4 C0     CreatePlanetLaunched:   call    ResetPBnKData
  90+ C0E5 21 00 00                             ld      hl,0
  91+ C0E8                                      ZeroA
  91+ C0E8 AF          >                        xor a
  92+ C0E9 22 10 C0                             ld      (PBnKxlo),hl
  93+ C0EC 22 13 C0                             ld      (PBnKylo),hl
  94+ C0EF 21 FF FF                             ld      hl,$FFFF
  95+ C0F2 22 16 C0                             ld      (PBnKzlo),hl
  96+ C0F5 32 12 C0                             ld      (PBnKxsgn),a
  97+ C0F8 32 15 C0                             ld      (PBnKysgn),a
  98+ C0FB 32 18 C0                             ld      (PBnKzsgn),a
  99+ C0FE                                      MaxUnivPitchAndRoll
  99+ C0FE 3E 7F       >                        ld      a,127
  99+ C100 32 38 C0    >                        ld      (UBnKRotXCounter),a
  99+ C103 32 39 C0    >                        ld      (UBnKRotZCounter),a
 100+ C106 C9                                   ret
 101+ C107              ; NEED FINSIHGING
 102+ C107
 103+ C107
 104+ C107 ED 4B 7D C0  ScalePlanetTo8Bit:		ld			bc,(PBnKZScaled)
 105+ C10B 2A 79 C0                             ld			hl,(PBnKXScaled)
 106+ C10E ED 5B 7B C0                          ld			de,(PBnKYScaled)
 107+ C112 78           .SetABSbc:              ld			a,b
 108+ C113 DD 67                                ld			ixh,a
 109+ C115 E6 7F                                and			SignMask8Bit
 110+ C117 47                                   ld			b,a									; bc = ABS bc
 111+ C118 7C           .SetABShl:              ld			a,h
 112+ C119 DD 6F                                ld			ixl,a
 113+ C11B E6 7F                                and			SignMask8Bit
 114+ C11D 67                                   ld			h,a									; hl = ABS hl
 115+ C11E 7A           .SetABSde:              ld			a,d
 116+ C11F FD 67                                ld			iyh,a
 117+ C121 E6 7F                                and			SignMask8Bit
 118+ C123 57                                   ld			d,a									; de = ABS de
 119+ C124 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 120+ C125 B4                                   or			h                                   ; XX15+1	\ x hi
 121+ C126 B2                                   or			d                                   ; XX15+4	\ y hi
 122+ C127 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 123+ C129                                      ShiftHLRight1
 123+ C129 CB 3C       >			   srl h
 123+ C12B CB 1D       >			   rr  l
 124+ C12D                                      ShiftDERight1
 124+ C12D CB 3A       >			   srl d
 124+ C12F CB 1B       >			   rr  e
 125+ C131                                      ShiftBCRight1
 125+ C131 CB 38       >			   srl b
 125+ C133 CB 19       >			   rr  c
 126+ C135 C3 24 C1                             jp          .ScaleNodeTo8BitLoop
 127+ C138              ; now we have scaled values we have to deal with sign
 128+ C138 DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 129+ C13A E6 80                                and			SignOnly8Bit
 130+ C13C B0                                   or			b
 131+ C13D 47                                   ld			b,a
 132+ C13E DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 133+ C140 E6 80                                and			SignOnly8Bit
 134+ C142 B4                                   or			h
 135+ C143 67                                   ld			h,a
 136+ C144 FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 137+ C146 E6 80                                and			SignOnly8Bit
 138+ C148 B2                                   or			d
 139+ C149 57                                   ld			d,a
 140+ C14A ED 43 7D C0  .SignsDoneSaveResult:	ld			(PBnKZScaled),bc
 141+ C14E 22 79 C0                             ld			(PBnKXScaled),hl
 142+ C151 ED 53 7B C0                          ld			(PBnKYScaled),de
 143+ C155 78                                   ld			a,b
 144+ C156 32 10 81                             ld			(varU),a
 145+ C159 79                                   ld			a,c
 146+ C15A 32 2F 81                             ld			(varT),a
 147+ C15D C9                                   ret
 148+ C15E
 149+ C15E              ;--------------------------------------------------------------------------------------------------------
 150+ C15E                                      include "./Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm"
# file opened: ././Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm
   1++C15E              CopyPSXX12ScaledToPXX18:
   2++C15E              CopyResultToPDrawCam:
   3++C15E                      ldCopyByte PXX12         ,PXX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C15E 3A 7F C0    >                        ld       a,(PXX12)
   3++C161 32 6D C0    >                        ld       (PXX18),a
   4++C164                      ldCopyByte PXX12+1       ,PXX18+2           ; XX12+1 => XX18+2
   4++C164 3A 80 C0    >                        ld       a,(PXX12+1)
   4++C167 32 6F C0    >                        ld       (PXX18+2),a
   5++C16A                      ldCopyByte PXX12+2       ,PXX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C16A 3A 81 C0    >                        ld       a,(PXX12+2)
   5++C16D 32 70 C0    >                        ld       (PXX18+3),a
   6++C170                      ldCopyByte PXX12+3       ,PXX18+5           ; XX12+3 => XX18+5
   6++C170 3A 82 C0    >                        ld       a,(PXX12+3)
   6++C173 32 72 C0    >                        ld       (PXX18+5),a
   7++C176                      ldCopyByte PXX12+4       ,PXX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C176 3A 83 C0    >                        ld       a,(PXX12+4)
   7++C179 32 73 C0    >                        ld       (PXX18+6),a
   8++C17C                      ldCopyByte PXX12+5       ,PXX18+8           ; XX12+5 => XX18+8
   8++C17C 3A 84 C0    >                        ld       a,(PXX12+5)
   8++C17F 32 75 C0    >                        ld       (PXX18+8),a
   9++C182 C9                   ret
  10++C183
# file closed: ././Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm
 151+ C183
 152+ C183              ; ......................................................                                                         ;;;
 153+ C183                          INCLUDE "./Universe/Planet/PlanetApplyMyRollAndPitch.asm"
# file opened: ././Universe/Planet/PlanetApplyMyRollAndPitch.asm
   1++C183
   2++C183              ;----------------------------------------------------------------------------------------------------------------------------------
   3++C183              ; Planet version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
   4++C183              ; Need to write a test routine for roll and pitchs
   5++C183 00 00 00 00  PlanetAlphaMulX            DS 4
   6++C187 00 00 00 00  PlanetAlphaMulY            DS 4
   7++C18B 00 00 00 00  PlanetBetaMulZ             DS 4
   8++C18F 00 00 00     PlanetK2                   DS 3
   9++C192
  10++C192 3A 27 80     PlanetApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  11++C195 21 1A 80                             ld      hl,BETA
  12++C198 B6                                   or      (hl)
  13++C199 E6 7F                                and     SignMask8Bit
  14++C19B CA 4C C2                             jp      z,.NoRotation
  15++C19E 3A 27 80     .CalcAlphaMulX:         ld      a,(ALPHA)                   ; get roll magnitude
  16++C1A1 EE 80                                xor     SignOnly8Bit                ; d = -alpha (Q value)
  17++C1A3 57                                   ld      d,a                         ; .
  18++C1A4 3A 10 C0                             ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
  19++C1A7 5F                                   ld      e,a                         ; .
  20++C1A8 2A 11 C0                             ld      hl,(SBnKxhi)                ; .
  21++C1AB CD 21 93                             call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256 where d = sign byte
  22++C1AE              .SaveAlphaMulX:         ;ld      a,c                         ; a = upper byte of results which will have the sign               ONLY NEEDED FOR DEBUGGING TEST
  23++C1AE                                      ;ld      (PlanetAlphaMulX),a            ; save sign from result, ELC holds actual result                   ONLY NEEDED FOR DEBUGGING TEST
  24++C1AE 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
  25++C1AF 32 84 C1                             ld      (PlanetAlphaMulX+1),a
  26++C1B2 7B                                   ld      a,e
  27++C1B3 32 85 C1                             ld      (PlanetAlphaMulX+2),a
  28++C1B6 7A                                   ld      a,d
  29++C1B7 32 86 C1                             ld      (PlanetAlphaMulX+3),a          ; we actually only want X1 X2 X3 later as its /256
  30++C1BA ED 5B 14 C0  .CalcK2:                ld      de,(SBnKyhi)                ; DEL = Y
  31++C1BE 3A 13 C0                             ld      a,(SBnKylo)                 ; .
  32++C1C1 6F                                   ld      l,a                         ; .
  33++C1C2 ED 4B 85 C1                          ld      bc,(PlanetAlphaMulX+2)         ; BCH = Y sgn, hi, lo, we loose the C from result
  34++C1C6 3A 84 C1                             ld      a,(PlanetAlphaMulX+1)          ; Deal with sign in byte 4
  35++C1C9 67                                   ld      h,a                         ; .
  36++C1CA CD 6A 90                             call    AddBCHtoDELsigned           ; DEL = y - (alpha * x)
  37++C1CD 7D                                   ld      a,l                         ; K2  = DEA = DEL = y - (alpha * x)
  38++C1CE 32 8F C1                             ld      (PlanetK2),a                   ; we also need to save l for teh beta k2 calc
  39++C1D1 ED 53 90 C1                          ld      (PlanetK2+1),de                ;
  40++C1D5 EB           .CalcBetaMulK2:         ex      de,hl                       ; HLE == DEA
  41++C1D6 5F                                   ld      e,a                         ; .
  42++C1D7 3A 1A 80                             ld      a,(BETA)                    ; D = BETA
  43++C1DA 57                                   ld      d,a                         ; .
  44++C1DB CD 21 93                             call    mulHLEbyDSigned             ; DELC = Beta * K2, DEL = Beta/256 * K2
  45++C1DE ED 4B 17 C0  .CalcZ:                 ld      bc,(SBnKzhi)                ; BCH = z
  46++C1E2 3A 16 C0                             ld      a,(SBnKzlo)                 ;
  47++C1E5 67                                   ld      h,a                         ;
  48++C1E6 CD 6A 90                             call    AddBCHtoDELsigned           ; DEL still = Beta * K2 so its z + Beta * K2
  49++C1E9 ED 53 17 C0                          ld      (SBnKzhi),de                ; z = resuklt
  50++C1ED 7D                                   ld      a,l                         ; .
  51++C1EE 32 16 C0                             ld      (SBnKzlo),a                 ; .
  52++C1F1 3A 1A 80     .CalcBetaZ:             ld      a,(BETA)
  53++C1F4 EE 80                                xor     SignOnly8Bit                ; d = -beta (Q value)
  54++C1F6 57                                   ld      d,a                         ; .
  55++C1F7 3A 16 C0                             ld      a,(SBnKzlo)                 ; HLE = z
  56++C1FA 5F                                   ld      e,a                         ; .
  57++C1FB 2A 17 C0                             ld      hl,(SBnKzhi)                ; .
  58++C1FE CD 21 93                             call    mulHLEbyDSigned             ; DELC = z * -beta, so DEL = Z * -beta / 256 where d = sign byte
  59++C201              .SaveAlphaMulZ:         ;ld      a,c                         ; a = upper byte of results which will have the sign             ONLY NEEDED FOR DEBUGGING TEST
  60++C201                                      ;ld      (PlanetBetaMulZ),a             ; save sign from result, ELC holds actual result                 ONLY NEEDED FOR DEBUGGING TEST
  61++C201                                      ;ld      a,l                         ; also save all of alpha *X as we will need it later             ONLY NEEDED FOR DEBUGGING TEST
  62++C201                                      ;ld      (PlanetBetaMulZ+1),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  63++C201                                      ;ld      a,e                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  64++C201                                      ;ld      (PlanetBetaMulZ+2),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  65++C201                                      ;ld      a,d                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  66++C201                                      ;ld      (PlanetBetaMulZ+3),a           ; we actually only want X1 X2 X3 later as its /256               ONLY NEEDED FOR DEBUGGING TEST
  67++C201 42 4B        .CalcY:                 ld      bc,de                       ; bch = - Beta * z
  68++C203 65                                   ld      h,l
  69++C204 ED 5B 90 C1                          ld      de,(PlanetK2+1)                ; DEL = k2
  70++C208 3A 8F C1                             ld      a,(PlanetK2)
  71++C20B 6F                                   ld      l,a
  72++C20C CD 6A 90                             call    AddBCHtoDELsigned           ; DEL = K2 - Beta * Z
  73++C20F ED 53 14 C0                          ld      (SBnKyhi),de                ; y = DEL = K2 - Beta * Z
  74++C213 7D                                   ld      a,l                         ; .
  75++C214 32 13 C0                             ld      (SBnKylo),a                 ; .
  76++C217 3A 27 80     .CalcAlphaMulY:         ld      a,(ALPHA)
  77++C21A 57                                   ld      d,a                         ; d = alpha (Q value)
  78++C21B 3A 13 C0                             ld      a,(SBnKylo)                 ; HLE = x sgn, hi, lo
  79++C21E 5F                                   ld      e,a                         ; .
  80++C21F 2A 14 C0                             ld      hl,(SBnKyhi)                ; .
  81++C222 CD 21 93                             call    mulHLEbyDSigned             ; DELC = y * alpha, so DEL = Y * alpha / 256 where d = sign byte
  82++C225 79           .SaveAlphaMulY:         ld      a,c                         ; a = upper byte of results which will have the sign
  83++C226 32 87 C1                             ld      (PlanetAlphaMulY),a            ; save sign from result, ELC holds actual result
  84++C229 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
  85++C22A 32 88 C1                             ld      (PlanetAlphaMulY+1),a
  86++C22D 7B                                   ld      a,e
  87++C22E 32 89 C1                             ld      (PlanetAlphaMulY+2),a
  88++C231 7A                                   ld      a,d
  89++C232 32 8A C1                             ld      (PlanetAlphaMulY+3),a
  90++C235 42 4B        .CalcxPLusAlphaY:       ld      bc,de                        ; BCH = Y sgn, hi, lo, we loose the C from result Deal with sign in byte 4
  91++C237 65                                   ld      h,l                         ; .
  92++C238 ED 5B 11 C0                          ld      de,(SBnKxhi)                ; DEL = Y
  93++C23C 3A 10 C0                             ld      a,(SBnKxlo)                 ; .
  94++C23F 6F                                   ld      l,a                         ; .
  95++C240 CD 6A 90                             call    AddBCHtoDELsigned           ; DEL = x + alpha * Y
  96++C243 7A           .SaveResult1:           ld      a,d                         ; Result 1 (X) = AHL + DEL
  97++C244 63                                   ld      h,e                         ;
  98++C245 32 12 C0     .CopyResultTo2:         ld      (SBnKxlo+2),a               ; .
  99++C248 22 10 C0                             ld      (SBnKxlo) ,hl               ; .
 100++C24B C9                                   ret
 101++C24C 3A 0D 81     .NoRotation:            ld      a,(DELTA)                   ; BCH = - Delta
 102++C24F                                      ReturnIfAIsZero
 102++C24F A7          >                        and     a
 102++C250 C8          >                        ret     z
 103++C251 0E 00                                ld      c,0                         ;
 104++C253 67                                   ld      h,a                         ;
 105++C254 06 80                                ld      b,$80                       ;
 106++C256 ED 5B 17 C0                          ld      de,(SBnKzhi)                ; DEL = z position
 107++C25A 3A 16 C0                             ld      a,(SBnKzlo)                 ; .
 108++C25D 6F                                   ld      l,a                         ; .
 109++C25E CD 6A 90                             call    AddBCHtoDELsigned           ; update speed
 110++C261 ED 53 17 C0                          ld      (SBnKzhi),DE                ; write back to zpos
 111++C265 7D                                   ld      a,l
 112++C266 32 16 C0                             ld      (SBnKzlo),a                ;
 113++C269 C9                                   ret
 114++C26A
# file closed: ././Universe/Planet/PlanetApplyMyRollAndPitch.asm
 154+ C26A
 155+ C26A 00           PlanetOnScreen          DB 0
 156+ C26B 00 00        PlanetScrnX             DW  0       ; signed
 157+ C26D 00 00        PlanetScrnY             DW  0       ; signed
 158+ C26F 00           PlanetRadius            DB  0       ; unsigned
 159+ C270              ; draw circle
 160+ C270
 161+ C270              ;
 162+ C270              ;DIVD3B2 K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo)
 163+ C270
 164+ C270 00 00 00 00  PlanetVarK                 DS 4
 165+ C274 00 00 00     PlanetVarP                 DS 3
 166+ C277 00           PlanetVarQ                 DS 1
 167+ C278 00           PlanetVarR                 DS 1
 168+ C279 00           PlanetVarS                 DS 1
 169+ C27A 00           PlanetVarT                 DS 1
 170+ C27B
 171+ C27B              ; Optimisation
 172+ C27B              ; if a <> 0
 173+ C27B              ;       divide AH by CD
 174+ C27B              ; if h <> 0
 175+ C27B              ;      if c <> 0 return 0
 176+ C27B              ;      else
 177+ C27B              ;        divide HL by DE
 178+ C27B              ; if l <>0
 179+ C27B              ;      if c or d <> 0 return 0
 180+ C27B              ;      else
 181+ C27B              ;        divide l by e
 182+ C27B              ;
 183+ C27B 47           PLanetAHLequAHLDivCDE:  ld      b,a                         ; save a reg
 184+ C27C 79                                   ld      a,c                         ; check for divide by zero
 185+ C27D B2                                   or      d                           ; .
 186+ C27E B3                                   or      e                           ; .
 187+ C27F                                      JumpIfZero      .divideByZero       ; .
 187+ C27F CA 98 C2    >                        jp	z,.divideByZero
 188+ C282 78                                   ld      a,b                         ; get a back
 189+ C283                                      JumpIfAIsNotZero    .divideAHLbyCDE
 189+ C283 A7          >                        and     a
 189+ C284 C2 9F C2    >                        jp	    nz,.divideAHLbyCDE
 190+ C287 7C           .AIsZero:               ld      a,h
 191+ C288                                      JumpIfAIsNotZero    .divideHLbyDE
 191+ C288 A7          >                        and     a
 191+ C289 C2 A6 C2    >                        jp	    nz,.divideHLbyDE
 192+ C28C 7D           .HIsZero:               ld      a,l
 193+ C28D                                      JumpIfAIsNotZero    .divideLbyE
 193+ C28D A7          >                        and     a
 193+ C28E C2 B5 C2    >                        jp	    nz,.divideLbyE
 194+ C291              .resultIsZero:          ZeroA
 194+ C291 AF          >                        xor a
 195+ C292 67                                   ld      h,a                        ; result is zero so set hlde
 196+ C293 6F                                   ld      l,a                        ; result is zero so set hlde
 197+ C294 54 5D                                ld      de,hl
 198+ C296                                      ClearCarryFlag
 198+ C296 B7          >                        or a
 199+ C297 C9                                   ret
 200+ C298 3E FF        .divideByZero:          ld      a,$FF
 201+ C29A 67                                   ld      h,a
 202+ C29B 6F                                   ld      l,a
 203+ C29C 54 5D                                ld      de,hl
 204+ C29E                                      SetCarryFlag
 204+ C29E 37          >                        scf
 205+ C29F              ; AHL = ahl/cde, this could be a genuine 24 bit divide
 206+ C29F              ; if AHL is large and cde small then the value will be big so will be off screen so we can risk 16 bit divide
 207+ C29F CD B3 91     .divideAHLbyCDE:        call    Div24by24
 208+ C2A2 EB                                   ex      hl,de                         ; ahl is result
 209+ C2A3 79                                   ld      a,c                           ; ahl is result
 210+ C2A4                                      ClearCarryFlag
 210+ C2A4 B7          >                        or a
 211+ C2A5              ;.divideAHLbyCDE:        ld      b,a                         ; we need to set BC to AH
 212+ C2A5              ;                        ld      e,d                         ; and DE to CD
 213+ C2A5              ;                        ld      d,c                         ; but make sure we do it in the right
 214+ C2A5              ;                        ld      c,h                         ; order so we don't trash values
 215+ C2A5              ;                        call    BC_Div_DE                   ; bc = result
 216+ C2A5              ;                        ld      a,b
 217+ C2A5              ;                        ld      h,c
 218+ C2A5              ;                        ld      l,0
 219+ C2A5 C9                                   ret
 220+ C2A6              ; AHL = 0hl/0de as A is zero
 221+ C2A6 79           .divideHLbyDE:          ld      a,c                         ;'if c = 0 then result must be zero
 222+ C2A7                                      JumpIfAIsNotZero   .resultIsZero
 222+ C2A7 A7          >                        and     a
 222+ C2A8 C2 91 C2    >                        jp	    nz,.resultIsZero
 223+ C2AB 44 4D                                ld      bc,hl
 224+ C2AD CD AD 95                             call    BC_Div_DE                   ; BC = HL/DE
 225+ C2B0 60 69                                ld      hl,bc
 226+ C2B2                                      ZeroA                               ; so we can set A to Zero
 226+ C2B2 AF          >                        xor a
 227+ C2B3                                      ClearCarryFlag
 227+ C2B3 B7          >                        or a
 228+ C2B4 C9                                   ret
 229+ C2B5              ; AHL = 00l/00e as A and H are zero
 230+ C2B5 79           .divideLbyE:            ld      a,c                         ; if d = 0 then result must be zero
 231+ C2B6 B2                                   or      d
 232+ C2B7                                      JumpIfAIsNotZero   .resultIsZero
 232+ C2B7 A7          >                        and     a
 232+ C2B8 C2 91 C2    >                        jp	    nz,.resultIsZero
 233+ C2BB 4B                                   ld      c,e
 234+ C2BC 5D                                   ld      e,l
 235+ C2BD CD 6F 95                             call    E_Div_C
 236+ C2C0 6F                                   ld      l,a
 237+ C2C1                                      ZeroA
 237+ C2C1 AF          >                        xor a
 238+ C2C2 67                                   ld      h,a
 239+ C2C3                                      ClearCarryFlag
 239+ C2C3 B7          >                        or a
 240+ C2C4 C9                                   ret
 241+ C2C5
 242+ C2C5
 243+ C2C5 47           PlanetProcessVertex:    ld      b,a                         ; save sign byte
 244+ C2C6 ED 5B 16 C0  .PlanetProjectToEye:    ld      de,(PBnKzlo)                ; X Pos = X / Z
 245+ C2CA 3A 18 C0                             ld      a,(PBnKzsgn)                ; CDE = z
 246+ C2CD FD 67                                ld      iyh,a                       ; save sign
 247+ C2CF                                      ClearSignBitA
 247+ C2CF E6 7F       >                        and     SignMask8Bit
 248+ C2D1                                      ; Addeed as it neds to be AHL/0CD to force * 256 and get correct screen position on scaling
 249+ C2D1              ;                        ld      c,a                         ;
 250+ C2D1 5A                                   ld      e,d
 251+ C2D2 57                                   ld      d,a
 252+ C2D3 0E 00                                ld      c,0
 253+ C2D5                                      ; added above to correct positioning as in reality its X/(Z/256)
 254+ C2D5 78                                   ld      a,b                         ; restore sign byte
 255+ C2D6 FD 6F                                ld      iyl,a                       ; save sign
 256+ C2D8                                      ClearSignBitA
 256+ C2D8 E6 7F       >                        and     SignMask8Bit
 257+ C2DA CD 7B C2                             call PLanetAHLequAHLDivCDE             ; AHL = AHL/CDE unsigned
 258+ C2DD              .CheckPosOnScreenX:     JumpIfAIsNotZero .IsOffScreen         ; if A has a value then its way too large regardless of sign
 258+ C2DD A7          >                        and     a
 258+ C2DE C2 FB C2    >                        jp	    nz,.IsOffScreen
 259+ C2E1                                      JumpOnLeadSignSet h, .IsOffScreen      ; or bit 7 set of h
 259+ C2E1 7C          >                        ld      a,h
 259+ C2E2 E6 80       >                        and     SignOnly8Bit
 259+ C2E4 C2 FB C2    >                        jp      nz,.IsOffScreen
 260+ C2E7 7C                                   ld      a,h
 261+ C2E8                                      ReturnIfAGTEusng 4                  ; if a > 1024 then its way too large regardless of sign
 261+ C2E8 FE 04       >                        cp    4
 261+ C2EA D0          >                        ret	 nc
 262+ C2EB FD 7C                                ld      a,iyh                       ; now deal with the sign
 263+ C2ED FD AD                                xor     iyl
 264+ C2EF                                      SignBitOnlyA                        ; a= resultant sign
 264+ C2EF E6 80       >                        and     SignOnly8Bit
 265+ C2F1 28 06                                jr      z,.calculatedVert           ; result is positive so we don't 2's compliment it
 266+ C2F3              .XIsNegative:           NegHL                               ; make 2's c as negative
 266+ C2F3 AF          >                    xor a
 266+ C2F4 95          >                    sub l
 266+ C2F5 6F          >                    ld l,a
 266+ C2F6 9F          >                    sbc a,a
 266+ C2F7 94          >                    sub h
 266+ C2F8 67          >                    ld h,a
 267+ C2F9              .calculatedVert:        ClearCarryFlag
 267+ C2F9 B7          >                        or a
 268+ C2FA C9                                   ret
 269+ C2FB 21 FF 7F     .IsOffScreen:           ld      hl,$7FFF
 270+ C2FE FD 7C                                ld      a,iyh
 271+ C300 FD AD                                xor     iyl
 272+ C302                                      SignBitOnlyA
 272+ C302 E6 80       >                        and     SignOnly8Bit
 273+ C304 28 02                                jr      z,.calculatedOffScreen
 274+ C306 23                                   inc     hl                          ; set hl to $8001 i.e. -32768
 275+ C307 23                                   inc     hl                          ; .
 276+ C308              .calculatedOffScreen:   SetCarryFlag
 276+ C308 37          >                        scf
 277+ C309 C9                                   ret
 278+ C30A
 279+ C30A
 280+ C30A              ; .........................................................................................................................
 281+ C30A              ; we only hit this if z is positive so we can ignore signs
 282+ C30A ED 4B 16 C0  PlanetCalculateRadius:  ld      bc,(PBnKzlo)                ; DBC = z position
 283+ C30E 3A 18 C0                             ld      a,(PBnKzsgn)                ;
 284+ C311 57                                   ld      d,a                         ;
 285+ C312 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 286+ C315 CD F4 93                             call    Div16by24usgn               ; radius = HL/DBC = 24576 / distance z
 287+ C318 B4                                   or      h                           ; if A or H are not 0 then max Radius
 288+ C319                                      JumpIfAIsZero  .SaveRadius
 288+ C319 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 288+ C31A CA 1F C3    >                        jp	    z, .SaveRadius
 289+ C31D 1E F8        .MaxRadius:             ld      e,248                       ;set radius to 248 as maxed out
 290+ C31F 7D           .SaveRadius:            ld      a,l                         ; l = resultant radius
 291+ C320 F6 01                                or      1                           ; at least radius 1 (never even so need to test)
 292+ C322 32 6F C2                             ld      (PlanetRadius),a               ; save a copy of radius now for later
 293+ C325 5F                                   ld      e,a                         ; as later code expects it to be in e
 294+ C326 C9                                   ret
 295+ C327
 296+ C327              ; Shorter version when sun does not need to be processed to screen
 297+ C327 3A 12 C0     PlanetUpdateCompass:    ld      a,(PBnKxsgn)
 298+ C32A 2A 10 C0                             ld      hl,(PBnKxlo)
 299+ C32D CD C5 C2                             call    PlanetProcessVertex
 300+ C330 22 19 C0                             ld      (PlanetCompassX),hl
 301+ C333 3A 15 C0                             ld      a,(PBnKysgn)
 302+ C336 2A 13 C0                             ld      hl,(PBnKylo)
 303+ C339 CD C5 C2                             call    PlanetProcessVertex
 304+ C33C 22 1B C0                             ld      (PlanetCompassY),hl
 305+ C33F C9                                   ret
 306+ C340
 307+ C340                                 ; could probabyl set a variable say "varGood", default as 1 then set to 0 if we end up with a good calulation?? may not need it as we draw here
 308+ C340 CD 92 C1     PlanetUpdateAndRender:     call    PlanetApplyMyRollAndPitch
 309+ C343 3A 18 C0     .CheckDrawable:         ld      a,(PBnKzsgn)
 310+ C346                                      JumpIfAGTENusng 48,  PlanetUpdateCompass ; at a distance over 48 its too far away
 310+ C346 FE 30       >                        cp     48
 310+ C348 D2 27 C3    >                        jp		nc,PlanetUpdateCompass
 311+ C34B 21 17 C0                             ld      hl,PBnKzhi                  ; if the two high bytes are zero then its too close
 312+ C34E B6                                   or      (hl)
 313+ C34F                                      JumpIfAIsZero       PlanetUpdateCompass
 313+ C34F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 313+ C350 CA 27 C3    >                        jp	    z, PlanetUpdateCompass
 314+ C353 3A 12 C0     .calculateX:            ld      a,(PBnKxsgn)
 315+ C356 2A 10 C0                             ld      hl,(PBnKxlo)
 316+ C359 CD C5 C2                             call    PlanetProcessVertex            ; now returns carry set for failure
 317+ C35C 22 19 C0                             ld      (PlanetCompassX),hl
 318+ C35F D8                                   ret     c
 319+ C360 1E 80        .calculatedX:           ld      e,ScreenCenterX
 320+ C362 16 00                                ld      d,0
 321+ C364                                      ClearCarryFlag
 321+ C364 B7          >                        or a
 322+ C365 ED 5A                                adc     hl,de
 323+ C367                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 324+ C367 22 6B C2                             ld      (PlanetScrnX),hl               ; save projected X Position, 2's compliment
 325+ C36A 3A 15 C0     .calculateY:            ld      a,(PBnKysgn)
 326+ C36D 2A 13 C0                             ld      hl,(PBnKylo)
 327+ C370 CD C5 C2                             call    PlanetProcessVertex            ; now returns carry set for failure
 328+ C373 22 1B C0                             ld      (PlanetCompassY),hl
 329+ C376 D8                                   ret     c
 330+ C377 1E 60        .calculatedY:           ld      e,ScreenCenterY
 331+ C379 16 00                                ld      d,0
 332+ C37B EB                                   ex      de,hl
 333+ C37C                                      ClearCarryFlag
 333+ C37C B7          >                        or a
 334+ C37D ED 52                                sbc     hl,de
 335+ C37F                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 336+ C37F 22 6D C2                             ld      (PlanetScrnY),hl               ; save projected Y Position, 2's compliment
 337+ C382              ; .........................................................................................................................
 338+ C382 CD 0A C3                             call    PlanetCalculateRadius
 339+ C385              ; .........................................................................................................................
 340+ C385 2A 6B C2     .CheckIfSunOnScreen:    ld      hl,(PlanetScrnX)               ; get x pixel position
 341+ C388 FD 26 00                             ld      iyh,0                       ; iyh holds draw status, 0= OK
 342+ C38B 16 00                                ld      d,0                         ; e still holds radius
 343+ C38D 7C                                   ld      a,h
 344+ C38E                                      JumpOnLeadSignSet   h,.CheckXNegative
 344+ C38E 7C          >                        ld      a,h
 344+ C38F E6 80       >                        and     SignOnly8Bit
 344+ C391 C2 A7 C3    >                        jp      nz,.CheckXNegative
 345+ C394 7C           .CheckXPositive:        ld      a,h
 346+ C395                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero its definitly on screen
 346+ C395 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 346+ C396 CA B0 C3    >                        jp	    z, .XOnScreen
 347+ C399 16 00                                ld      d,0                         ; de = radius
 348+ C39B                                      ClearCarryFlag
 348+ C39B B7          >                        or a
 349+ C39C ED 52                                sbc     hl,de
 350+ C39E FA B0 C3                             jp      m   ,.XOnScreen             ; if result was negative then it spans screen
 351+ C3A1 7C                                   ld      a,h
 352+ C3A2                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero then its partially on screen at least
 352+ C3A2 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 352+ C3A3 CA B0 C3    >                        jp	    z, .XOnScreen
 353+ C3A6 C9                                   ret                                 ; None of the X coordinates are on screen
 354+ C3A7 16 00        .CheckXNegative:        ld      d,0                         ; de = radius
 355+ C3A9                                      ClearCarryFlag
 355+ C3A9 B7          >                        or a
 356+ C3AA ED 5A                                adc     hl,de                       ; so we have hl - de
 357+ C3AC F2 B0 C3                             jp      p,.XOnScreen                ; if result was positive then it spans screen so we are good
 358+ C3AF C9                                   ret                                 ; else x is totally off the left side of the screen
 359+ C3B0              ; .........................................................................................................................
 360+ C3B0 2A 6D C2     .XOnScreen:             ld      hl,(PlanetScrnY)               ; now Check Y coordinate
 361+ C3B3                                      JumpOnLeadSignSet   h,.CheckYNegative
 361+ C3B3 7C          >                        ld      a,h
 361+ C3B4 E6 80       >                        and     SignOnly8Bit
 361+ C3B6 C2 D7 C3    >                        jp      nz,.CheckYNegative
 362+ C3B9 7C           .CheckYPositive:        ld      a,h
 363+ C3BA                                      JumpIfAIsNotZero   .PosYCheck2
 363+ C3BA A7          >                        and     a
 363+ C3BB C2 C4 C3    >                        jp	    nz,.PosYCheck2
 364+ C3BE 7D                                   ld      a,l
 365+ C3BF E6 80                                and     %10000000
 366+ C3C1 CA E0 C3                             jp      z,.YOnScreen                ; at least 1 row is on screen as > 128
 367+ C3C4 16 00        .PosYCheck2:            ld      d,0                         ; de = radius
 368+ C3C6                                      ClearCarryFlag
 368+ C3C6 B7          >                        or a
 369+ C3C7 ED 52                                sbc     hl,de
 370+ C3C9 FA E0 C3                             jp      m,.YOnScreen                ; so if its -ve then it spans screen
 371+ C3CC 7C                                   ld      a,h                         ; if h > 0 then off screen so did not span
 372+ C3CD                                      ReturnIfANotZero                    ; .
 372+ C3CD A7          >                        and     a
 372+ C3CE C0          >                        ret     nz
 373+ C3CF 7D                                   ld      a,l                         ; if l > 128 then off screen so did not span
 374+ C3D0 E6 80                                and     %10000000                   ; .
 375+ C3D2                                      ReturnIfANotZero                    ; .
 375+ C3D2 A7          >                        and     a
 375+ C3D3 C0          >                        ret     nz
 376+ C3D4 C3 D3 C7                             jp      YOnScreen                  ; so Y at least spans
 377+ C3D7 16 00        .CheckYNegative:        ld      d,0                         ; de = radius
 378+ C3D9                                      ClearCarryFlag
 378+ C3D9 B7          >                        or a
 379+ C3DA ED 5A                                adc     hl,de                       ; so we have hl - de
 380+ C3DC F2 E0 C3                             jp      p,.YOnScreen                ; if result was positive then it spans screen so we are good
 381+ C3DF C9                                   ret                                 ; else never gets above 0 so return
 382+ C3E0              ; .........................................................................................................................
 383+ C3E0 CD E4 C3     .YOnScreen:             call    PlanetDraw
 384+ C3E3 C9                                   ret
 385+ C3E4
 386+ C3E4              PlanetDraw:             MMUSelectLayer2
 386+ C3E4 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 387+ C3E8 2A 6B C2                             ld      hl,(PlanetScrnX)
 388+ C3EB ED 5B 6D C2                          ld      de,(PlanetScrnY)
 389+ C3EF 3A 6F C2                             ld      a,(PlanetRadius)
 390+ C3F2 4F                                   ld      c,a
 391+ C3F3 3E 0C                                ld      a,L2ColourGREEN_4
 392+ C3F5 CD 5E E8                             call    l2_draw_clipped_circle
 393+ C3F8 C9                                   ret
 394+ C3F9
 395+ C3F9
 396+ C3F9              PlanetBankSize  EQU $ - StartOfPlanet
 397+ C3F9
 398+ C3F9
# file closed: ./Universe/Planet/planet_data.asm
 911  C3F9                                      DISPLAY "Bank ",BankPlanetData," - Bytes free ",/D, $2000 - ($-PlanetBankAddr), " - BankPlanetData"
 912  C3F9              ;;;***; Bank 85  ------------------------------------------------------------------------------------------------------------------------
 913  C3F9              ;;;***                        SLOT    SpriteDataAAddr
 914  C3F9              ;;;***                        PAGE    BankSpriteDataA
 915  C3F9              ;;;***                        ORG     SpriteDataAAddr, BankSpriteDataA
 916  C3F9              ;;;***                        INCLUDE "./Layer3Sprites/sprite_loadA.asm"
 917  C3F9              ;;;***                        INCLUDE "./Layer3Sprites/SpriteSheetA.asm"
 918  C3F9              ;;;***                        DISPLAY "Bank ",BankSpriteDataA," - Bytes free ",/D, $2000 - ($-SpriteDataAAddr), " - BankSpriteDataA"
 919  C3F9              ;;;***; Bank 86  ------------------------------------------------------------------------------------------------------------------------
 920  C3F9              ;;;***                        SLOT    SpriteDataBAddr
 921  C3F9              ;;;***                        PAGE    BankSpriteDataB
 922  C3F9              ;;;***                        ORG     SpriteDataBAddr, BankSpriteDataB
 923  C3F9              ;;;***                        INCLUDE "./Layer3Sprites/sprite_loadB.asm"
 924  C3F9              ;;;***                        INCLUDE "./Layer3Sprites/SpriteSheetB.asm"
 925  C3F9              ;;;***                        DISPLAY "Bank ",BankSpriteDataB," - Bytes free ",/D, $2000 - ($-SpriteDataBAddr), " - BankSpriteDataB"
 926  C3F9              ; Bank 91  ------------------------------------------------------------------------------------------------------------------------
 927  C3F9                                      SLOT    GalaxyDataAddr
 928  C3F9                                      PAGE    BankGalaxyData0
 929  C3F9                                      ORG GalaxyDataAddr, BankGalaxyData0
 930  E000                                      INCLUDE "./Universe/Galaxy/galaxy_data.asm"
# file opened: ./Universe/Galaxy/galaxy_data.asm
   1+ E000 47 61 6C 61  galaxy_page_marker  DB "Galaxy      PG9"
   1+ E004 78 79 20 20
   1+ E008 20 20 20 20
   1+ E00C 50 47 39
   2+ E00F 30           galaxy_pg_cnt       DB "0"
   3+ E010 00 00 00...  galaxy_master_seed  DS 6
   4+ E016 00 00 00...  galaxy_data DS 8*256
   5+ E816 2D 2D 2D 2D  galaxy_code_end DB "-----------------------------------------------------------------"
   5+ E81A 2D 2D 2D 2D
   5+ E81E 2D 2D 2D 2D
   5+ E822 2D 2D 2D 2D
   5+ E826 2D 2D 2D 2D
   5+ E82A 2D 2D 2D 2D
   5+ E82E 2D 2D 2D 2D
   5+ E832 2D 2D 2D 2D
   5+ E836 2D 2D 2D 2D
   5+ E83A 2D 2D 2D 2D
   5+ E83E 2D 2D 2D 2D
   5+ E842 2D 2D 2D 2D
   5+ E846 2D 2D 2D 2D
   5+ E84A 2D 2D 2D 2D
   5+ E84E 2D 2D 2D 2D
   5+ E852 2D 2D 2D 2D
   5+ E856 2D
   6+ E857 00 00        GalaxyPresentSystem:     DW 0
   7+ E859 00 00        GalaxyDestinationSystem: DW 0
   8+ E85B 00 00        GalaxyTargetSystem:      DW 0
   9+ E85D              ; including a DB 0 as a catcher
  10+ E85D 00           GalaxySearchLength:      DB 0
  11+ E85E 00 00 00...  GalaxySearchString:      DS 32
  12+ E87E 00                                    DB 0
  13+ E87F 00 00 00...  GalaxyExpandedName:      DS 32
  14+ E89F 00                                    DB 0
  15+ E8A0 41 42 4F 55  GalaxyName_digrams	     DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION"
  15+ E8A4 53 45 49 54
  15+ E8A8 49 4C 45 54
  15+ E8AC 53 54 4F 4E
  15+ E8B0 4C 4F 4E 55
  15+ E8B4 54 48 4E 4F
  15+ E8B8 41 4C 4C 45
  15+ E8BC 58 45 47 45
  15+ E8C0 5A 41 43 45
  15+ E8C4 42 49 53 4F
  15+ E8C8 55 53 45 53
  15+ E8CC 41 52 4D 41
  15+ E8D0 49 4E 44 49
  15+ E8D4 52 45 41 3F
  15+ E8D8 45 52 41 54
  15+ E8DC 45 4E 42 45
  15+ E8E0 52 41 4C 41
  15+ E8E4 56 45 54 49
  15+ E8E8 45 44 4F 52
  15+ E8EC 51 55 41 4E
  15+ E8F0 54 45 49 53
  15+ E8F4 52 49 4F 4E
  16+ E8F8 00 00 00...  GalaxyWorkingSeed        DS 6
  17+ E8FE 00 00 00...  GalaxyNamingSeed         DS 6
  18+ E904 00 00 00...  GalaxySavedRandomSeed    DS 6
  19+ E90A
  20+ E90A 00           GalaxyDisplayGovernment         DB 0
  21+ E90B 00           GalaxyDisplayEconomy            DB 0
  22+ E90C 00           GalaxyDisplayTekLevel           DB 0
  23+ E90D 00           GalaxyDisplayPopulation         DB 0
  24+ E90E 00 00        GalaxyDisplayProductivity       DW 0
  25+ E910 00 00        GalaxyDisplayRadius             DW 0
  26+ E912
  27+ E912 66 61 62 6C  GalaxyDescList01A       DB "fabled",0
  27+ E916 65 64 00
  28+ E919 6E 6F 74 61  GalaxyDescList01B       DB "notable",0
  28+ E91D 62 6C 65 00
  29+ E921 77 65 6C 6C  GalaxyDescList01C       DB "well known",0
  29+ E925 20 6B 6E 6F
  29+ E929 77 6E 00
  30+ E92C 66 61 6D 6F  GalaxyDescList01D       DB "famous",0
  30+ E930 75 73 00
  31+ E933 6E 6F 74 65  GalaxyDescList01E       DB "noted",0
  31+ E937 64 00
  32+ E939 76 65 72 79  GalaxyDescList02A       DB "very",0
  32+ E93D 00
  33+ E93E 6D 69 6C 64  GalaxyDescList02B       DB "mildly",0
  33+ E942 6C 79 00
  34+ E945 6D 6F 73 74  GalaxyDescList02C       DB "most",0
  34+ E949 00
  35+ E94A 72 65 61 73  GalaxyDescList02D       DB "reasonably",0
  35+ E94E 6F 6E 61 62
  35+ E952 6C 79 00
  36+ E955 00           GalaxyDescList02E       DB 0
  37+ E956 61 6E 63 69  GalaxyDescList03A       DB "ancient",0
  37+ E95A 65 6E 74 00
  38+ E95E 3C 32 30 3E  GalaxyDescList03B       DB "<20>",0
  38+ E962 00
  39+ E963 67 72 65 61  GalaxyDescList03C       DB "great",0
  39+ E967 74 00
  40+ E969 76 61 73 74  GalaxyDescList03D       DB "vast",0
  40+ E96D 00
  41+ E96E 70 69 6E 6B  GalaxyDescList03E       DB "pink",0
  41+ E972 00
  42+ E973 3C 32 39 3E  GalaxyDescList04A       DB "<29> <28> plantations",0
  42+ E977 20 3C 32 38
  42+ E97B 3E 20 70 6C
  42+ E97F 61 6E 74 61
  42+ E983 74 69 6F 6E
  42+ E987 73 00
  43+ E989 6D 6F 75 6E  GalaxyDescList04B       DB "mountains",0
  43+ E98D 74 61 69 6E
  43+ E991 73 00
  44+ E993 3C 32 37 3E  GalaxyDescList04C       DB "<27>",0
  44+ E997 00
  45+ E998 3C 31 39 3E  GalaxyDescList04D       DB "<19> forests",0
  45+ E99C 20 66 6F 72
  45+ E9A0 65 73 74 73
  45+ E9A4 00
  46+ E9A5 6F 63 65 61  GalaxyDescList04E       DB "oceans",0
  46+ E9A9 6E 73 00
  47+ E9AC 73 68 79 6E  GalaxyDescList05A       DB "shyness",0
  47+ E9B0 65 73 73 00
  48+ E9B4 73 69 6C 6C  GalaxyDescList05B       DB "silliness",0
  48+ E9B8 69 6E 65 73
  48+ E9BC 73 00
  49+ E9BE 6D 61 74 69  GalaxyDescList05C       DB "mating traditions",0
  49+ E9C2 6E 67 20 74
  49+ E9C6 72 61 64 69
  49+ E9CA 74 69 6F 6E
  49+ E9CE 73 00
  50+ E9D0 6C 6F 61 74  GalaxyDescList05D       DB "loathing of <5>",0
  50+ E9D4 68 69 6E 67
  50+ E9D8 20 6F 66 20
  50+ E9DC 3C 35 3E 00
  51+ E9E0 6C 6F 76 65  GalaxyDescList05E       DB "love for <5>",0
  51+ E9E4 20 66 6F 72
  51+ E9E8 20 3C 35 3E
  51+ E9EC 00
  52+ E9ED 66 6F 6F 64  GalaxyDescList06A       DB "food blenders",0
  52+ E9F1 20 62 6C 65
  52+ E9F5 6E 64 65 72
  52+ E9F9 73 00
  53+ E9FB 74 6F 75 72  GalaxyDescList06B       DB "tourists",0
  53+ E9FF 69 73 74 73
  53+ EA03 00
  54+ EA04 70 6F 65 74  GalaxyDescList06C       DB "poetry",0
  54+ EA08 72 79 00
  55+ EA0B 64 69 73 63  GalaxyDescList06D       DB "discos",0
  55+ EA0F 6F 73 00
  56+ EA12 3C 31 33 3E  GalaxyDescList06E       DB "<13>",0
  56+ EA16 00
  57+ EA17 74 61 6C 6B  GalaxyDescList07A       DB "talking tree",0
  57+ EA1B 69 6E 67 20
  57+ EA1F 74 72 65 65
  57+ EA23 00
  58+ EA24 63 72 61 62  GalaxyDescList07B       DB "crab",0
  58+ EA28 00
  59+ EA29 62 61 74 00  GalaxyDescList07C       DB "bat",0
  60+ EA2D 6C 6F 62 73  GalaxyDescList07D       DB "lobst",0
  60+ EA31 74 00
  61+ EA33 25 52 00     GalaxyDescList07E       DB "%R",0
  62+ EA36 62 65 73 65  GalaxyDescList08A       DB "beset",0
  62+ EA3A 74 00
  63+ EA3C 70 6C 61 67  GalaxyDescList08B       DB "plagued",0
  63+ EA40 75 65 64 00
  64+ EA44 72 61 76 61  GalaxyDescList08C       DB "ravaged",0
  64+ EA48 67 65 64 00
  65+ EA4C 63 75 72 73  GalaxyDescList08D       DB "cursed",0
  65+ EA50 65 64 00
  66+ EA53 73 63 6F 75  GalaxyDescList08E       DB "scourged",0
  66+ EA57 72 67 65 64
  66+ EA5B 00
  67+ EA5C 3C 32 31 3E  GalaxyDescList09A       DB "<21> civil war",0
  67+ EA60 20 63 69 76
  67+ EA64 69 6C 20 77
  67+ EA68 61 72 00
  68+ EA6B 3C 32 36 3E  GalaxyDescList09B       DB "<26> <23> <24>s",0
  68+ EA6F 20 3C 32 33
  68+ EA73 3E 20 3C 32
  68+ EA77 34 3E 73 00
  69+ EA7B 61 20 3C 32  GalaxyDescList09C       DB "a <26> disease",0
  69+ EA7F 36 3E 20 64
  69+ EA83 69 73 65 61
  69+ EA87 73 65 00
  70+ EA8A 3C 32 31 3E  GalaxyDescList09D       DB "<21> earthquakes",0
  70+ EA8E 20 65 61 72
  70+ EA92 74 68 71 75
  70+ EA96 61 6B 65 73
  70+ EA9A 00
  71+ EA9B 3C 32 31 3E  GalaxyDescList09E       DB "<21> solar activity",0
  71+ EA9F 20 73 6F 6C
  71+ EAA3 61 72 20 61
  71+ EAA7 63 74 69 76
  71+ EAAB 69 74 79 00
  72+ EAAF 69 74 73 20  GalaxyDescList10A       DB "its <2> <3>",0
  72+ EAB3 3C 32 3E 20
  72+ EAB7 3C 33 3E 00
  73+ EABB 74 68 65 20  GalaxyDescList10B       DB "the %I <23> <24>",0
  73+ EABF 25 49 20 3C
  73+ EAC3 32 33 3E 20
  73+ EAC7 3C 32 34 3E
  73+ EACB 00
  74+ EACC 69 74 73 20  GalaxyDescList10C       DB "its inhabitants' <25> <4>",0
  74+ EAD0 69 6E 68 61
  74+ EAD4 62 69 74 61
  74+ EAD8 6E 74 73 27
  74+ EADC 20 3C 32 35
  74+ EAE0 3E 20 3C 34
  74+ EAE4 3E 00
  75+ EAE6 3C 33 32 3E  GalaxyDescList10D       DB "<32>",0
  75+ EAEA 00
  76+ EAEB 69 74 73 20  GalaxyDescList10E       DB "its <12> <13>",0
  76+ EAEF 3C 31 32 3E
  76+ EAF3 20 3C 31 33
  76+ EAF7 3E 00
  77+ EAF9 6A 75 69 63  GalaxyDescList11A       DB "juice",0
  77+ EAFD 65 00
  78+ EAFF 62 72 61 6E  GalaxyDescList11B       DB "brandy",0
  78+ EB03 64 79 00
  79+ EB06 77 61 74 65  GalaxyDescList11C       DB "water",0
  79+ EB0A 72 00
  80+ EB0C 62 72 65 77  GalaxyDescList11D       DB "brew",0
  80+ EB10 00
  81+ EB11 67 61 72 67  GalaxyDescList11E       DB "gargle blasters",0
  81+ EB15 6C 65 20 62
  81+ EB19 6C 61 73 74
  81+ EB1D 65 72 73 00
  82+ EB21 25 52 00     GalaxyDescList12A       DB "%R",0
  83+ EB24 25 49 20 3C  GalaxyDescList12B       DB "%I <24>",0
  83+ EB28 32 34 3E 00
  84+ EB2C 25 49 20 25  GalaxyDescList12C       DB "%I %R",0
  84+ EB30 52 00
  85+ EB32 25 49 20 3C  GalaxyDescList12D       DB "%I <26>",0
  85+ EB36 32 36 3E 00
  86+ EB3A 3C 32 36 3E  GalaxyDescList12E       DB "<26> %R",0
  86+ EB3E 20 25 52 00
  87+ EB42 66 61 62 75  GalaxyDescList13A       DB "fabulous",0
  87+ EB46 6C 6F 75 73
  87+ EB4A 00
  88+ EB4B 65 78 6F 74  GalaxyDescList13B       DB "exotic",0
  88+ EB4F 69 63 00
  89+ EB52 68 6F 6F 70  GalaxyDescList13C       DB "hoopy",0
  89+ EB56 79 00
  90+ EB58 75 6E 75 73  GalaxyDescList13D       DB "unusual",0
  90+ EB5C 75 61 6C 00
  91+ EB60 65 78 63 69  GalaxyDescList13E       DB "exciting",0
  91+ EB64 74 69 6E 67
  91+ EB68 00
  92+ EB69 63 75 69 73  GalaxyDescList14A       DB "cuisine",0
  92+ EB6D 69 6E 65 00
  93+ EB71 6E 69 67 68  GalaxyDescList14B       DB "night life",0
  93+ EB75 74 20 6C 69
  93+ EB79 66 65 00
  94+ EB7C 63 61 73 69  GalaxyDescList14C       DB "casinos",0
  94+ EB80 6E 6F 73 00
  95+ EB84 73 69 74 20  GalaxyDescList14D       DB "sit coms",0
  95+ EB88 63 6F 6D 73
  95+ EB8C 00
  96+ EB8D 20 3C 33 32  GalaxyDescList14E       DB " <32> ",0
  96+ EB91 3E 20 00
  97+ EB94 25 48 00     GalaxyDescList15A       DB "%H",0
  98+ EB97 54 68 65 20  GalaxyDescList15B       DB "The planet %H",0
  98+ EB9B 70 6C 61 6E
  98+ EB9F 65 74 20 25
  98+ EBA3 48 00
  99+ EBA5 54 68 65 20  GalaxyDescList15C       DB "The world %H",0
  99+ EBA9 77 6F 72 6C
  99+ EBAD 64 20 25 48
  99+ EBB1 00
 100+ EBB2 54 68 69 73  GalaxyDescList15D       DB "This planet",0
 100+ EBB6 20 70 6C 61
 100+ EBBA 6E 65 74 00
 101+ EBBE 54 68 69 73  GalaxyDescList15E       DB "This world",0
 101+ EBC2 20 77 6F 72
 101+ EBC6 6C 64 00
 102+ EBC9 6E 20 75 6E  GalaxyDescList16A       DB "n unremarkable",0
 102+ EBCD 72 65 6D 61
 102+ EBD1 72 6B 61 62
 102+ EBD5 6C 65 00
 103+ EBD8 20 62 6F 72  GalaxyDescList16B       DB " boring",0
 103+ EBDC 69 6E 67 00
 104+ EBE0 20 64 75 6C  GalaxyDescList16C       DB " dull",0
 104+ EBE4 6C 00
 105+ EBE6 20 74 65 64  GalaxyDescList16D       DB " tedious",0
 105+ EBEA 69 6F 75 73
 105+ EBEE 00
 106+ EBEF 20 72 65 76  GalaxyDescList16E       DB " revolting",0
 106+ EBF3 6F 6C 74 69
 106+ EBF7 6E 67 00
 107+ EBFA 70 6C 61 6E  GalaxyDescList17A       DB "planet",0
 107+ EBFE 65 74 00
 108+ EC01 77 6F 72 6C  GalaxyDescList17B       DB "world",0
 108+ EC05 64 00
 109+ EC07 70 6C 61 63  GalaxyDescList17C       DB "place",0
 109+ EC0B 65 00
 110+ EC0D 6C 69 74 74  GalaxyDescList17D       DB "little planet",0
 110+ EC11 6C 65 20 70
 110+ EC15 6C 61 6E 65
 110+ EC19 74 00
 111+ EC1B 64 75 6D 70  GalaxyDescList17E       DB "dump",0
 111+ EC1F 00
 112+ EC20 77 61 73 70  GalaxyDescList18A       DB "wasp",0
 112+ EC24 00
 113+ EC25 6D 6F 74 68  GalaxyDescList18B       DB "moth",0
 113+ EC29 00
 114+ EC2A 67 72 75 62  GalaxyDescList18C       DB "grub",0
 114+ EC2E 00
 115+ EC2F 61 6E 74 00  GalaxyDescList18D       DB "ant",0
 116+ EC33 25 52 00     GalaxyDescList18E       DB "%R",0
 117+ EC36 70 6F 65 74  GalaxyDescList19A       DB "poet",0
 117+ EC3A 00
 118+ EC3B 61 72 74 73  GalaxyDescList19B       DB "arts graduate",0
 118+ EC3F 20 67 72 61
 118+ EC43 64 75 61 74
 118+ EC47 65 00
 119+ EC49 79 61 6B 00  GalaxyDescList19C       DB "yak",0
 120+ EC4D 73 6E 61 69  GalaxyDescList19D       DB "snail",0
 120+ EC51 6C 00
 121+ EC53 73 6C 75 67  GalaxyDescList19E       DB "slug",0
 121+ EC57 00
 122+ EC58 74 72 6F 70  GalaxyDescList20A       DB "tropical",0
 122+ EC5C 69 63 61 6C
 122+ EC60 00
 123+ EC61 64 65 6E 73  GalaxyDescList20B       DB "dense",0
 123+ EC65 65 00
 124+ EC67 72 61 69 6E  GalaxyDescList20C       DB "rain",0
 124+ EC6B 00
 125+ EC6C 69 6D 70 65  GalaxyDescList20D       DB "impenetrable",0
 125+ EC70 6E 65 74 72
 125+ EC74 61 62 6C 65
 125+ EC78 00
 126+ EC79 65 78 75 62  GalaxyDescList20E       DB "exuberant",0
 126+ EC7D 65 72 61 6E
 126+ EC81 74 00
 127+ EC83 66 75 6E 6E  GalaxyDescList21A       DB "funny",0
 127+ EC87 79 00
 128+ EC89 77 69 65 72  GalaxyDescList21B       DB "wierd",0
 128+ EC8D 64 00
 129+ EC8F 75 6E 75 73  GalaxyDescList21C       DB "unusual",0
 129+ EC93 75 61 6C 00
 130+ EC97 73 74 72 61  GalaxyDescList21D       DB "strange",0
 130+ EC9B 6E 67 65 00
 131+ EC9F 70 65 63 75  GalaxyDescList21E       DB "peculiar",0
 131+ ECA3 6C 69 61 72
 131+ ECA7 00
 132+ ECA8 66 72 65 71  GalaxyDescList22A       DB "frequent",0
 132+ ECAC 75 65 6E 74
 132+ ECB0 00
 133+ ECB1 6F 63 63 61  GalaxyDescList22B       DB "occasional",0
 133+ ECB5 73 69 6F 6E
 133+ ECB9 61 6C 00
 134+ ECBC 75 6E 70 72  GalaxyDescList22C       DB "unpredictable",0
 134+ ECC0 65 64 69 63
 134+ ECC4 74 61 62 6C
 134+ ECC8 65 00
 135+ ECCA 64 72 65 61  GalaxyDescList22D       DB "dreadful",0
 135+ ECCE 64 66 75 6C
 135+ ECD2 00
 136+ ECD3 64 65 61 64  GalaxyDescList22E       DB "deadly",0
 136+ ECD7 6C 79 00
 137+ ECDA 3C 31 3E 20  GalaxyDescList23A       DB "<1> <0> for <9>",0
 137+ ECDE 3C 30 3E 20
 137+ ECE2 66 6F 72 20
 137+ ECE6 3C 39 3E 00
 138+ ECEA 3C 31 3E 20  GalaxyDescList23B       DB "<1> <0> for <9> and <9>",0
 138+ ECEE 3C 30 3E 20
 138+ ECF2 66 6F 72 20
 138+ ECF6 3C 39 3E 20
 138+ ECFA 61 6E 64 20
 138+ ECFE 3C 39 3E 00
 139+ ED02 3C 37 3E 20  GalaxyDescList23C       DB "<7> by <8>",0
 139+ ED06 62 79 20 3C
 139+ ED0A 38 3E 00
 140+ ED0D 3C 31 3E 20  GalaxyDescList23D       DB "<1> <0> for <9> but <7> by <8>",0
 140+ ED11 3C 30 3E 20
 140+ ED15 66 6F 72 20
 140+ ED19 3C 39 3E 20
 140+ ED1D 62 75 74 20
 140+ ED21 3C 37 3E 20
 140+ ED25 62 79 20 3C
 140+ ED29 38 3E 00
 141+ ED2C 61 3C 31 35  GalaxyDescList23E       DB "a<15> <16>",0
 141+ ED30 3E 20 3C 31
 141+ ED34 36 3E 00
 142+ ED37 3C 32 36 3E  GalaxyDescList24A       DB "<26>",0
 142+ ED3B 00
 143+ ED3C 6D 6F 75 6E  GalaxyDescList24B       DB "mountain",0
 143+ ED40 74 61 69 6E
 143+ ED44 00
 144+ ED45 65 64 69 62  GalaxyDescList24C       DB "edible",0
 144+ ED49 6C 65 00
 145+ ED4C 74 72 65 65  GalaxyDescList24D       DB "tree",0
 145+ ED50 00
 146+ ED51 73 70 6F 74  GalaxyDescList24E       DB "spotted",0
 146+ ED55 74 65 64 00
 147+ ED59 3C 33 30 3E  GalaxyDescList25A       DB "<30>",0
 147+ ED5D 00
 148+ ED5E 3C 33 31 3E  GalaxyDescList25B       DB "<31>",0
 148+ ED62 00
 149+ ED63 3C 36 3E 6F  GalaxyDescList25C       DB "<6>oid",0
 149+ ED67 69 64 00
 150+ ED6A 3C 31 38 3E  GalaxyDescList25D       DB "<18>",0
 150+ ED6E 00
 151+ ED6F 3C 31 37 3E  GalaxyDescList25E       DB "<17>",0
 151+ ED73 00
 152+ ED74 61 6E 63 69  GalaxyDescList26A       DB "ancient",0
 152+ ED78 65 6E 74 00
 153+ ED7C 65 78 63 65  GalaxyDescList26B       DB "exceptional",0
 153+ ED80 70 74 69 6F
 153+ ED84 6E 61 6C 00
 154+ ED88 65 63 63 65  GalaxyDescList26C       DB "eccentric",0
 154+ ED8C 6E 74 72 69
 154+ ED90 63 00
 155+ ED92 69 6E 67 72  GalaxyDescList26D       DB "ingrained",0
 155+ ED96 61 69 6E 65
 155+ ED9A 64 00
 156+ ED9C 3C 32 30 3E  GalaxyDescList26E       DB "<20>",0
 156+ EDA0 00
 157+ EDA1 6B 69 6C 6C  GalaxyDescList27A       DB "killer",0
 157+ EDA5 65 72 00
 158+ EDA8 64 65 61 64  GalaxyDescList27B       DB "deadly",0
 158+ EDAC 6C 79 00
 159+ EDAF 65 76 69 6C  GalaxyDescList27C       DB "evil",0
 159+ EDB3 00
 160+ EDB4 6C 65 74 68  GalaxyDescList27D       DB "lethal",0
 160+ EDB8 61 6C 00
 161+ EDBB 76 69 63 69  GalaxyDescList27E       DB "vicious",0
 161+ EDBF 6F 75 73 00
 162+ EDC3 70 61 72 6B  GalaxyDescList28A       DB "parking meters",0
 162+ EDC7 69 6E 67 20
 162+ EDCB 6D 65 74 65
 162+ EDCF 72 73 00
 163+ EDD2 64 75 73 74  GalaxyDescList28B       DB "dust clouds",0
 163+ EDD6 20 63 6C 6F
 163+ EDDA 75 64 73 00
 164+ EDDE 69 63 65 20  GalaxyDescList28C       DB "ice bergs",0
 164+ EDE2 62 65 72 67
 164+ EDE6 73 00
 165+ EDE8 72 6F 63 6B  GalaxyDescList28D       DB "rock formations",0
 165+ EDEC 20 66 6F 72
 165+ EDF0 6D 61 74 69
 165+ EDF4 6F 6E 73 00
 166+ EDF8 76 6F 6C 63  GalaxyDescList28E       DB "volcanoes",0
 166+ EDFC 61 6E 6F 65
 166+ EE00 73 00
 167+ EE02 70 6C 61 6E  GalaxyDescList29A       DB "plant",0
 167+ EE06 74 00
 168+ EE08 74 75 6C 69  GalaxyDescList29B       DB "tulip",0
 168+ EE0C 70 00
 169+ EE0E 62 61 6E 61  GalaxyDescList29C       DB "banana",0
 169+ EE12 6E 61 00
 170+ EE15 63 6F 72 6E  GalaxyDescList29D       DB "corn",0
 170+ EE19 00
 171+ EE1A 25 52 77 65  GalaxyDescList29E       DB "%Rweed",0
 171+ EE1E 65 64 00
 172+ EE21 25 52 00     GalaxyDescList30A       DB "%R",0
 173+ EE24 23 49 20 25  GalaxyDescList30B       DB "#I %R",0
 173+ EE28 52 00
 174+ EE2A 23 49 20 3C  GalaxyDescList30C       DB "#I <26>",0
 174+ EE2E 32 36 3E 00
 175+ EE32 69 6E 68 61  GalaxyDescList30D       DB "inhabitant",0
 175+ EE36 62 69 74 61
 175+ EE3A 6E 74 00
 176+ EE3D 25 49 20 25  GalaxyDescList30E       DB "%I %R",0
 176+ EE41 52 00
 177+ EE43 73 68 72 65  GalaxyDescList31A       DB "shrew",0
 177+ EE47 77 00
 178+ EE49 62 65 61 73  GalaxyDescList31B       DB "beast",0
 178+ EE4D 74 00
 179+ EE4F 62 69 73 6F  GalaxyDescList31C       DB "bison",0
 179+ EE53 6E 00
 180+ EE55 73 6E 61 6B  GalaxyDescList31D       DB "snake",0
 180+ EE59 65 00
 181+ EE5B 77 6F 6C 66  GalaxyDescList31E       DB "wolf",0
 181+ EE5F 00
 182+ EE60 6C 65 6F 70  GalaxyDescList32A       DB "leopard",0
 182+ EE64 61 72 64 00
 183+ EE68 63 61 74 00  GalaxyDescList32B       DB "cat",0
 184+ EE6C 6D 6F 6E 6B  GalaxyDescList32C       DB "monkey",0
 184+ EE70 65 79 00
 185+ EE73 67 6F 61 74  GalaxyDescList32D       DB "goat",0
 185+ EE77 00
 186+ EE78 66 69 73 68  GalaxyDescList32E       DB "fish",0
 186+ EE7C 00
 187+ EE7D 3C 31 31 3E  GalaxyDescList33A       DB "<11> <10>",0
 187+ EE81 20 3C 31 30
 187+ EE85 3E 00
 188+ EE87 23 49 20 3C  GalaxyDescList33B       DB "#I <30> <33>",0
 188+ EE8B 33 30 3E 20
 188+ EE8F 3C 33 33 3E
 188+ EE93 00
 189+ EE94 69 74 73 20  GalaxyDescList33C       DB "its <12> <31> <33>",0
 189+ EE98 3C 31 32 3E
 189+ EE9C 20 3C 33 31
 189+ EEA0 3E 20 3C 33
 189+ EEA4 33 3E 00
 190+ EEA7 3C 33 34 3E  GalaxyDescList33D       DB "<34> <35>",0
 190+ EEAB 20 3C 33 35
 190+ EEAF 3E 00
 191+ EEB1 3C 31 31 3E  GalaxyDescList33E       DB "<11> <10>",0
 191+ EEB5 20 3C 31 30
 191+ EEB9 3E 00
 192+ EEBB 6D 65 61 74  GalaxyDescList34A       DB "meat",0
 192+ EEBF 00
 193+ EEC0 63 75 74 6C  GalaxyDescList34B       DB "cutlet",0
 193+ EEC4 65 74 00
 194+ EEC7 73 74 65 61  GalaxyDescList34C       DB "steak",0
 194+ EECB 6B 00
 195+ EECD 62 75 72 67  GalaxyDescList34D       DB "burgers",0
 195+ EED1 65 72 73 00
 196+ EED5 73 6F 75 70  GalaxyDescList34E       DB "soup",0
 196+ EED9 00
 197+ EEDA 69 63 65 00  GalaxyDescList35A       DB "ice",0
 198+ EEDE 6D 75 64 00  GalaxyDescList35B       DB "mud",0
 199+ EEE2 5A 65 72 6F  GalaxyDescList35C       DB "Zero-G",0
 199+ EEE6 2D 47 00
 200+ EEE9 76 61 63 75  GalaxyDescList35D       DB "vacuum",0
 200+ EEED 75 6D 00
 201+ EEF0 25 49 20 75  GalaxyDescList35E       DB "%I ultra",0
 201+ EEF4 6C 74 72 61
 201+ EEF8 00
 202+ EEF9 68 6F 63 6B  GalaxyDescList36A       DB "hockey",0
 202+ EEFD 65 79 00
 203+ EF00 63 72 69 63  GalaxyDescList36B       DB "cricket",0
 203+ EF04 6B 65 74 00
 204+ EF08 6B 61 72 61  GalaxyDescList36C       DB "karate",0
 204+ EF0C 74 65 00
 205+ EF0F 70 6F 6C 6F  GalaxyDescList36D       DB "polo",0
 205+ EF13 00
 206+ EF14 74 65 6E 6E  GalaxyDescList36E       DB "tennis",0
 206+ EF18 69 73 00
 207+ EF1B
 208+ EF1B 12 E9 19 E9  GalaxyDescList          DW GalaxyDescList01A, GalaxyDescList01B, GalaxyDescList01C, GalaxyDescList01D, GalaxyDescList01E
 208+ EF1F 21 E9 2C E9
 208+ EF23 33 E9
 209+ EF25 39 E9 3E E9                          DW GalaxyDescList02A, GalaxyDescList02B, GalaxyDescList02C, GalaxyDescList02D, GalaxyDescList02E
 209+ EF29 45 E9 4A E9
 209+ EF2D 55 E9
 210+ EF2F 56 E9 5E E9                          DW GalaxyDescList03A, GalaxyDescList03B, GalaxyDescList03C, GalaxyDescList03D, GalaxyDescList03E
 210+ EF33 63 E9 69 E9
 210+ EF37 6E E9
 211+ EF39 73 E9 89 E9                          DW GalaxyDescList04A, GalaxyDescList04B, GalaxyDescList04C, GalaxyDescList04D, GalaxyDescList04E
 211+ EF3D 93 E9 98 E9
 211+ EF41 A5 E9
 212+ EF43 AC E9 B4 E9                          DW GalaxyDescList05A, GalaxyDescList05B, GalaxyDescList05C, GalaxyDescList05D, GalaxyDescList05E
 212+ EF47 BE E9 D0 E9
 212+ EF4B E0 E9
 213+ EF4D ED E9 FB E9                          DW GalaxyDescList06A, GalaxyDescList06B, GalaxyDescList06C, GalaxyDescList06D, GalaxyDescList06E
 213+ EF51 04 EA 0B EA
 213+ EF55 12 EA
 214+ EF57 17 EA 24 EA                          DW GalaxyDescList07A, GalaxyDescList07B, GalaxyDescList07C, GalaxyDescList07D, GalaxyDescList07E
 214+ EF5B 29 EA 2D EA
 214+ EF5F 33 EA
 215+ EF61 36 EA 3C EA                          DW GalaxyDescList08A, GalaxyDescList08B, GalaxyDescList08C, GalaxyDescList08D, GalaxyDescList08E
 215+ EF65 44 EA 4C EA
 215+ EF69 53 EA
 216+ EF6B 5C EA 6B EA                          DW GalaxyDescList09A, GalaxyDescList09B, GalaxyDescList09C, GalaxyDescList09D, GalaxyDescList09E
 216+ EF6F 7B EA 8A EA
 216+ EF73 9B EA
 217+ EF75 AF EA BB EA                          DW GalaxyDescList10A, GalaxyDescList10B, GalaxyDescList10C, GalaxyDescList10D, GalaxyDescList10E
 217+ EF79 CC EA E6 EA
 217+ EF7D EB EA
 218+ EF7F F9 EA FF EA                          DW GalaxyDescList11A, GalaxyDescList11B, GalaxyDescList11C, GalaxyDescList11D, GalaxyDescList11E
 218+ EF83 06 EB 0C EB
 218+ EF87 11 EB
 219+ EF89 21 EB 24 EB                          DW GalaxyDescList12A, GalaxyDescList12B, GalaxyDescList12C, GalaxyDescList12D, GalaxyDescList12E
 219+ EF8D 2C EB 32 EB
 219+ EF91 3A EB
 220+ EF93 42 EB 4B EB                          DW GalaxyDescList13A, GalaxyDescList13B, GalaxyDescList13C, GalaxyDescList13D, GalaxyDescList13E
 220+ EF97 52 EB 58 EB
 220+ EF9B 60 EB
 221+ EF9D 69 EB 71 EB                          DW GalaxyDescList14A, GalaxyDescList14B, GalaxyDescList14C, GalaxyDescList14D, GalaxyDescList14E
 221+ EFA1 7C EB 84 EB
 221+ EFA5 8D EB
 222+ EFA7 94 EB 97 EB                          DW GalaxyDescList15A, GalaxyDescList15B, GalaxyDescList15C, GalaxyDescList15D, GalaxyDescList15E
 222+ EFAB A5 EB B2 EB
 222+ EFAF BE EB
 223+ EFB1 C9 EB D8 EB                          DW GalaxyDescList16A, GalaxyDescList16B, GalaxyDescList16C, GalaxyDescList16D, GalaxyDescList16E
 223+ EFB5 E0 EB E6 EB
 223+ EFB9 EF EB
 224+ EFBB FA EB 01 EC                          DW GalaxyDescList17A, GalaxyDescList17B, GalaxyDescList17C, GalaxyDescList17D, GalaxyDescList17E
 224+ EFBF 07 EC 0D EC
 224+ EFC3 1B EC
 225+ EFC5 20 EC 25 EC                          DW GalaxyDescList18A, GalaxyDescList18B, GalaxyDescList18C, GalaxyDescList18D, GalaxyDescList18E
 225+ EFC9 2A EC 2F EC
 225+ EFCD 33 EC
 226+ EFCF 36 EC 3B EC                          DW GalaxyDescList19A, GalaxyDescList19B, GalaxyDescList19C, GalaxyDescList19D, GalaxyDescList19E
 226+ EFD3 49 EC 4D EC
 226+ EFD7 53 EC
 227+ EFD9 58 EC 61 EC                          DW GalaxyDescList20A, GalaxyDescList20B, GalaxyDescList20C, GalaxyDescList20D, GalaxyDescList20E
 227+ EFDD 67 EC 6C EC
 227+ EFE1 79 EC
 228+ EFE3 83 EC 89 EC                          DW GalaxyDescList21A, GalaxyDescList21B, GalaxyDescList21C, GalaxyDescList21D, GalaxyDescList21E
 228+ EFE7 8F EC 97 EC
 228+ EFEB 9F EC
 229+ EFED A8 EC B1 EC                          DW GalaxyDescList22A, GalaxyDescList22B, GalaxyDescList22C, GalaxyDescList22D, GalaxyDescList22E
 229+ EFF1 BC EC CA EC
 229+ EFF5 D3 EC
 230+ EFF7 DA EC EA EC                          DW GalaxyDescList23A, GalaxyDescList23B, GalaxyDescList23C, GalaxyDescList23D, GalaxyDescList23E
 230+ EFFB 02 ED 0D ED
 230+ EFFF 2C ED
 231+ F001 37 ED 3C ED                          DW GalaxyDescList24A, GalaxyDescList24B, GalaxyDescList24C, GalaxyDescList24D, GalaxyDescList24E
 231+ F005 45 ED 4C ED
 231+ F009 51 ED
 232+ F00B 59 ED 5E ED                          DW GalaxyDescList25A, GalaxyDescList25B, GalaxyDescList25C, GalaxyDescList25D, GalaxyDescList25E
 232+ F00F 63 ED 6A ED
 232+ F013 6F ED
 233+ F015 74 ED 7C ED                          DW GalaxyDescList26A, GalaxyDescList26B, GalaxyDescList26C, GalaxyDescList26D, GalaxyDescList26E
 233+ F019 88 ED 92 ED
 233+ F01D 9C ED
 234+ F01F A1 ED A8 ED                          DW GalaxyDescList27A, GalaxyDescList27B, GalaxyDescList27C, GalaxyDescList27D, GalaxyDescList27E
 234+ F023 AF ED B4 ED
 234+ F027 BB ED
 235+ F029 C3 ED D2 ED                          DW GalaxyDescList28A, GalaxyDescList28B, GalaxyDescList28C, GalaxyDescList28D, GalaxyDescList28E
 235+ F02D DE ED E8 ED
 235+ F031 F8 ED
 236+ F033 02 EE 08 EE                          DW GalaxyDescList29A, GalaxyDescList29B, GalaxyDescList29C, GalaxyDescList29D, GalaxyDescList29E
 236+ F037 0E EE 15 EE
 236+ F03B 1A EE
 237+ F03D 21 EE 24 EE                          DW GalaxyDescList30A, GalaxyDescList30B, GalaxyDescList30C, GalaxyDescList30D, GalaxyDescList30E
 237+ F041 2A EE 32 EE
 237+ F045 3D EE
 238+ F047 43 EE 49 EE                          DW GalaxyDescList31A, GalaxyDescList31B, GalaxyDescList31C, GalaxyDescList31D, GalaxyDescList31E
 238+ F04B 4F EE 55 EE
 238+ F04F 5B EE
 239+ F051 60 EE 68 EE                          DW GalaxyDescList32A, GalaxyDescList32B, GalaxyDescList32C, GalaxyDescList32D, GalaxyDescList32E
 239+ F055 6C EE 73 EE
 239+ F059 78 EE
 240+ F05B 7D EE 87 EE                          DW GalaxyDescList33A, GalaxyDescList33B, GalaxyDescList33C, GalaxyDescList33D, GalaxyDescList33E
 240+ F05F 94 EE A7 EE
 240+ F063 B1 EE
 241+ F065 BB EE C0 EE                          DW GalaxyDescList34A, GalaxyDescList34B, GalaxyDescList34C, GalaxyDescList34D, GalaxyDescList34E
 241+ F069 C7 EE CD EE
 241+ F06D D5 EE
 242+ F06F DA EE DE EE                          DW GalaxyDescList35A, GalaxyDescList35B, GalaxyDescList35C, GalaxyDescList35D, GalaxyDescList35E
 242+ F073 E2 EE E9 EE
 242+ F077 F0 EE
 243+ F079 F9 EE 00 EF                          DW GalaxyDescList36A, GalaxyDescList36B, GalaxyDescList36C, GalaxyDescList36D, GalaxyDescList36E
 243+ F07D 08 EF 0F EF
 243+ F081 14 EF
 244+ F083
 245+ F083 4C 61 72 67  GalaxyInhabitantDesc1   DB "Large ",0
 245+ F087 65 20 00
 246+ F08A 46 69 65 72  GalaxyInhabitantDesc1A  DB "Fierce ",0
 246+ F08E 63 65 20 00
 247+ F092 53 6D 61 6C  GalaxyInhabitantDesc1B  DB "Small ", 0
 247+ F096 6C 20 00
 248+ F099 47 72 65 65  GalaxyInhabitantDesc2   DB "Green ",0
 248+ F09D 6E 20 00
 249+ F0A0 52 65 64 20  GalaxyInhabitantDesc2A  DB "Red ",  0
 249+ F0A4 00
 250+ F0A5 59 65 6C 6C  GalaxyInhabitantDesc2B  DB "Yellow ",0
 250+ F0A9 6F 77 20 00
 251+ F0AD 42 6C 75 65  GalaxyInhabitantDesc2C  DB "Blue ",  0
 251+ F0B1 20 00
 252+ F0B3 42 6C 61 63  GalaxyInhabitantDesc2D  DB "Black ",0
 252+ F0B7 6B 20 00
 253+ F0BA 48 61 72 6D  GalaxyInhabitantDesc2E  DB "Harmless ",0
 253+ F0BE 6C 65 73 73
 253+ F0C2 20 00
 254+ F0C4 53 6C 69 6D  GalaxyInhabitantDesc3   DB "Slimy ",0
 254+ F0C8 79 20 00
 255+ F0CB 42 75 67 2D  GalaxyInhabitantDesc3A  DB "Bug-Eyed ", 0
 255+ F0CF 45 79 65 64
 255+ F0D3 20 00
 256+ F0D5 48 6F 72 6E  GalaxyInhabitantDesc3B  DB "Horned ",0
 256+ F0D9 65 64 20 00
 257+ F0DD 42 6F 6E 79  GalaxyInhabitantDesc3C  DB "Bony ",  0
 257+ F0E1 20 00
 258+ F0E3 46 61 74 20  GalaxyInhabitantDesc3D  DB "Fat ",  0
 258+ F0E7 00
 259+ F0E8 46 75 72 72  GalaxyInhabitantDesc3E  DB "Furry ",  0
 259+ F0EC 79 20 00
 260+ F0EF 52 6F 64 65  GalaxyInhabitantDesc4   DB "Rodent",0
 260+ F0F3 6E 74 00
 261+ F0F6 46 72 6F 67  GalaxyInhabitantDesc4A  DB "Frog",      0
 261+ F0FA 00
 262+ F0FB 4C 69 7A 61  GalaxyInhabitantDesc4B  DB "Lizard", 0
 262+ F0FF 72 64 00
 263+ F102 4C 6F 62 73  GalaxyInhabitantDesc4C  DB "Lobster",0
 263+ F106 74 65 72 00
 264+ F10A 42 69 72 64  GalaxyInhabitantDesc4D  DB "Bird",  0
 264+ F10E 00
 265+ F10F 48 75 6D 61  GalaxyInhabitantDesc4E  DB "Humanoid", 0
 265+ F113 6E 6F 69 64
 265+ F117 00
 266+ F118 46 65 6C 69  GalaxyInhabitantDesc4F  DB "Feline", 0
 266+ F11C 6E 65 00
 267+ F11F 49 6E 73 65  GalaxyInhabitantDesc4G  DB "Insect",0
 267+ F123 63 74 00
 268+ F126 48 75 6D 61  GalaxyInhabitantHuman   DB "Human Colonal",0
 268+ F12A 6E 20 43 6F
 268+ F12E 6C 6F 6E 61
 268+ F132 6C 00
 269+ F134
 270+ F134 83 F0 8A F0  GalaxyInhabitantDesc1Ix DW GalaxyInhabitantDesc1,GalaxyInhabitantDesc1A,GalaxyInhabitantDesc1B
 270+ F138 92 F0
 271+ F13A 99 F0 A0 F0  GalaxyInhabitantDesc2Ix DW GalaxyInhabitantDesc2,GalaxyInhabitantDesc2A,GalaxyInhabitantDesc2B,GalaxyInhabitantDesc2C,GalaxyInhabitantDesc2D,GalaxyInhabitantDesc2E
 271+ F13E A5 F0 AD F0
 271+ F142 B3 F0 BA F0
 272+ F146 C4 F0 CB F0  GalaxyInhabitantDesc3Ix DW GalaxyInhabitantDesc3,GalaxyInhabitantDesc3A,GalaxyInhabitantDesc3B,GalaxyInhabitantDesc3C,GalaxyInhabitantDesc3D,GalaxyInhabitantDesc3E
 272+ F14A D5 F0 DD F0
 272+ F14E E3 F0 E8 F0
 273+ F152 EF F0 F6 F0  GalaxyInhabitantDesc4Ix DW GalaxyInhabitantDesc4,GalaxyInhabitantDesc4A,GalaxyInhabitantDesc4B,GalaxyInhabitantDesc4C,GalaxyInhabitantDesc4D,GalaxyInhabitantDesc4E,GalaxyInhabitantDesc4F,GalaxyInhabitantDesc4G
 273+ F156 FB F0 02 F1
 273+ F15A 0A F1 0F F1
 273+ F15E 18 F1 1F F1
 274+ F162 26 F1        GalaxyInhabitantHumanIx DW GalaxyInhabitantHuman
 275+ F164 00 00 00...  GalaxySpecies           DS 32
 276+ F184 00                                   DB 0
 277+ F185 00 00 00...  GalaxyPlanetDescription DS 300
 278+ F2B1 00                                   DB 0
 279+ F2B2 00 00 00...  GalaxyPlanetSource      DS 300,0
 280+ F3DE 3C 31 34 3E  GalaxyPlanetDescStarter DB "<14> is <22>",0
 280+ F3E2 20 69 73 20
 280+ F3E6 3C 32 32 3E
 280+ F3EA 00
 281+ F3EB
 282+ F3EB
 283+ F3EB D3           GalaxyExtendedDescs:    DB 211                                                  ; System 211, Galaxy 0                Teorge = Token  1
 284+ F3EC 96                                   DB 150                                                  ; System 150, Galaxy 0, Mission 1       Xeer = Token  2
 285+ F3ED 24                                   DB 36                                                   ; System  36, Galaxy 0, Mission 1   Reesdice = Token  3
 286+ F3EE 1C                                   DB 28                                                   ; System  28, Galaxy 0, Mission 1      Arexe = Token  4
 287+ F3EF FD                                   DB 253                                                  ; System 253, Galaxy 1, Mission 1     Errius = Token  5
 288+ F3F0 4F                                   DB 79                                                   ; System  79, Galaxy 1, Mission 1     Inbibe = Token  6
 289+ F3F1 35                                   DB 53                                                   ; System  53, Galaxy 1, Mission 1      Ausar = Token  7
 290+ F3F2 76                                   DB 118                                                  ; System 118, Galaxy 1, Mission 1     Usleri = Token  8
 291+ F3F3 64                                   DB 100                                                  ; System 100, Galaxy 2                Arredi = Token  9
 292+ F3F4 20                                   DB 32                                                   ; System  32, Galaxy 1, Mission 1     Bebege = Token 10
 293+ F3F5 44                                   DB 68                                                   ; System  68, Galaxy 1, Mission 1     Cearso = Token 11
 294+ F3F6 A4                                   DB 164                                                  ; System 164, Galaxy 1, Mission 1     Dicela = Token 12
 295+ F3F7 DC                                   DB 220                                                  ; System 220, Galaxy 1, Mission 1     Eringe = Token 13
 296+ F3F8 6A                                   DB 106                                                  ; System 106, Galaxy 1, Mission 1     Gexein = Token 14
 297+ F3F9 10                                   DB 16                                                   ; System  16, Galaxy 1, Mission 1     Isarin = Token 15
 298+ F3FA A2                                   DB 162                                                  ; System 162, Galaxy 1, Mission 1   Letibema = Token 16
 299+ F3FB 03                                   DB 3                                                    ; System   3, Galaxy 1, Mission 1     Maisso = Token 17
 300+ F3FC 6B                                   DB 107                                                  ; System 107, Galaxy 1, Mission 1       Onen = Token 18
 301+ F3FD 1A                                   DB 26                                                   ; System  26, Galaxy 1, Mission 1     Ramaza = Token 19
 302+ F3FE C0                                   DB 192                                                  ; System 192, Galaxy 1, Mission 1     Sosole = Token 20
 303+ F3FF B8                                   DB 184                                                  ; System 184, Galaxy 1, Mission 1     Tivere = Token 21
 304+ F400 05                                   DB 5                                                    ; System   5, Galaxy 1, Mission 1     Veriar = Token 22
 305+ F401 65                                   DB 101                                                  ; System 101, Galaxy 2, Mission 1     Xeveon = Token 23
 306+ F402 C1                                   DB 193                                                  ; System 193, Galaxy 1, Mission 1     Orarra = Token 24
 307+ F403 29                                   DB 41                                                   ; System  41, Galaxy 2                Anreer = Token 25
 308+ F404 07                                   DB 7                                                    ; System   7, Galaxy 0                  Lave = Token 26
 309+ F405 2E                                   DB 46                                                   ; System  46, Galaxy 0              Riedquat = Token 27
 310+ F406
 311+ F406                  INCLUDE "./Data/EquipmentEquates.asm"
# file opened: ././Data/EquipmentEquates.asm
   1++F406
   2++F406              EQ_FUEL                 EQU 0
   3++F406              EQ_MISSILE              EQU 1
   4++F406              EQ_CARGO_BAY            EQU 2
   5++F406              EQ_ECM                  EQU 3
   6++F406              EQ_FUEL_SCOOPS          EQU 4
   7++F406              EQ_ESCAPE_POD           EQU 5
   8++F406              EQ_ENERGY_BOMB          EQU 6
   9++F406              EQ_ENERGY_UNIT          EQU 7
  10++F406              EQ_DOCK_COMP            EQU 8
  11++F406              EQ_GAL_DRIVE            EQU 9
  12++F406              EQ_FRONT_PULSE          EQU 10
  13++F406              EQ_REAR_PULSE           EQU 11
  14++F406              EQ_LEFT_PULSE           EQU 12
  15++F406              EQ_RIGHT_PULSE          EQU 13
  16++F406              EQ_FRONT_BEAM           EQU 14
  17++F406              EQ_REAR_BEAM            EQU 15
  18++F406              EQ_LEFT_BEAM            EQU 16
  19++F406              EQ_RIGHT_BEAM           EQU 17
  20++F406              EQ_FRONT_MINING         EQU 18
  21++F406              EQ_REAR_MINING          EQU 19
  22++F406              EQ_LEFT_MINING          EQU 20
  23++F406              EQ_RIGHT_MINING         EQU 21
  24++F406              EQ_FRONT_MILITARY       EQU 22
  25++F406              EQ_REAR_MILITARY        EQU 23
  26++F406              EQ_LEFT_MILITARY        EQU 24
  27++F406              EQ_RIGHT_MILITARY       EQU 25
  28++F406
  29++F406              EQ_ITEM_COUNT           EQU EQ_RIGHT_MILITARY+1
  30++F406
# file closed: ././Data/EquipmentEquates.asm
 312+ F406
 313+ F406              EquipNameTableRowLen    EQU 8
 314+ F406 43 8A 00 00  ShipEquipNameTable      DW  WordFuel,       0,              0,          0
 314+ F40A 00 00 00 00
 315+ F40E F8 8C 00 00                          DW  WordMissile,    0,              0,          0
 315+ F412 00 00 00 00
 316+ F416 28 8A 39 8A                          DW  WordLarge,      WordCargo,      WordBay,    0
 316+ F41A 3F 8A 00 00
 317+ F41E 4F 8A 56 8A                          DW  WordECM,        WordSystem,     0,          0
 317+ F422 00 00 00 00
 318+ F426 43 8A 48 8A                          DW  WordFuel,       WordScoops,     0,          0
 318+ F42A 00 00 00 00
 319+ F42E 2E 8A 35 8A                          DW  WordEscape,     WordPod,        0,          0
 319+ F432 00 00 00 00
 320+ F436 5D 8A 64 8A                          DW  WordEnergy,     WordBomb,       0,          0
 320+ F43A 00 00 00 00
 321+ F43E C2 8A 5D 8A                          DW  WordExtra,      WordEnergy,     WordUnit,   0
 321+ F442 90 8A 00 00
 322+ F446 9C 8A A4 8A                          DW  WordDocking,    WordComputers,  0,          0
 322+ F44A 00 00 00 00
 323+ F44E B9 8A 00 8D                          DW  WordGalactic,   WordHyperdrive, 0,          0
 323+ F452 00 00 00 00
 324+ F456 12 8A 6F 8A                          DW  WordFront,      WordPulse,      WordLaser,  0
 324+ F45A 69 8A 00 00
 325+ F45E 23 8A 6F 8A                          DW  WordRear,       WordPulse,      WordLaser,  0
 325+ F462 69 8A 00 00
 326+ F466 1E 8A 6F 8A                          DW  WordLeft,       WordPulse,      WordLaser,  0
 326+ F46A 69 8A 00 00
 327+ F46E 18 8A 6F 8A                          DW  WordRight,      WordPulse,      WordLaser,  0
 327+ F472 69 8A 00 00
 328+ F476 12 8A 75 8A                          DW  WordFront,      WordBeam,       WordLaser,  0
 328+ F47A 69 8A 00 00
 329+ F47E 23 8A 75 8A                          DW  WordRear,       WordBeam,       WordLaser,  0
 329+ F482 69 8A 00 00
 330+ F486 1E 8A 75 8A                          DW  WordLeft,       WordBeam,       WordLaser,  0
 330+ F48A 69 8A 00 00
 331+ F48E 18 8A 75 8A                          DW  WordRight,      WordBeam,       WordLaser,  0
 331+ F492 69 8A 00 00
 332+ F496 12 8A 82 8A                          DW  WordFront,      WordMining,     WordLaser,  0
 332+ F49A 69 8A 00 00
 333+ F49E 23 8A 82 8A                          DW  WordRear,       WordMining,     WordLaser,  0
 333+ F4A2 69 8A 00 00
 334+ F4A6 1E 8A 82 8A                          DW  WordLeft,       WordMining,     WordLaser,  0
 334+ F4AA 69 8A 00 00
 335+ F4AE 18 8A 82 8A                          DW  WordRight,      WordMining,     WordLaser,  0
 335+ F4B2 69 8A 00 00
 336+ F4B6 12 8A 0B 8D                          DW  WordFront,      WordMilitary,   WordLaser,  0
 336+ F4BA 69 8A 00 00
 337+ F4BE 23 8A 0B 8D                          DW  WordRear,       WordMilitary,   WordLaser,  0
 337+ F4C2 69 8A 00 00
 338+ F4C6 1E 8A 0B 8D                          DW  WordLeft,       WordMilitary,   WordLaser,  0
 338+ F4CA 69 8A 00 00
 339+ F4CE 18 8A 0B 8D                          DW  WordRight,      WordMilitary,   WordLaser,  0
 339+ F4D2 69 8A 00 00
 340+ F4D6
 341+ F4D6              ;Each row is 7 bytes
 342+ F4D6              ;                                                               12345  6  789012345678901
 343+ F4D6              ;	canbuy;
 344+ F4D6              ;	y;
 345+ F4D6              ;	show;
 346+ F4D6              ;	level;
 347+ F4D6              ;	price 2 bytes;
 348+ F4D6              ;	type;
 349+ F4D6              ;ShipFrontWeapons        DB EQ_FRONT_PULSE,  EQ_FRONT_PULSE,     EQ_FRONT_MINING,    EQ_FRONT_MINING
 350+ F4D6              ;ShipRearWeapons         DB EQ_REAR_PULSE,   EQ_REAR_PULSE,      EQ_REAR_MINING,     EQ_REAR_MINING
 351+ F4D6              ;ShipLeftWeapons         DB EQ_LEFT_PULSE,   EQ_LEFT_PULSE,      EQ_LEFT_MINING,     EQ_LEFT_MINING
 352+ F4D6              ;ShipRightWeapons        DB EQ_RIGHT_PULSE,  EQ_RIGHT_PULSE,     EQ_RIGHT_MINING,    EQ_RIGHT_MINING
 353+ F4D6              ;                           c  y  s  t
 354+ F4D6              ;                           a  p  h  e                                            fi     P     Vi
 355+ F4D6              ;                           n  o  o  c                                            tt     o     ew
 356+ F4D6              ;                           B  s  w  h  price                  type               ed     s
 357+ F4D6 00 00 01 01  ShipEquipmentList       DB  0, 0, 1, 1, low     2, high     2, EQ_FUEL          , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 357+ F4DA 02 00 00 00
 357+ F4DE FF 00 00 00
 357+ F4E2 00 00 00 00
 358+ F4E6 00 01 01 01                          DB  0, 1, 1, 1, low   300, high   300, EQ_MISSILE       , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 358+ F4EA 2C 01 01 00
 358+ F4EE FF 00 00 00
 358+ F4F2 00 00 00 00
 359+ F4F6 00 02 01 01                          DB  0, 2, 1, 1, low  4000, high  4000, EQ_CARGO_BAY     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 359+ F4FA A0 0F 02 00
 359+ F4FE FF 00 00 00
 359+ F502 00 00 00 00
 360+ F506 00 03 01 02                          DB  0, 3, 1, 2, low  6000, high  6000, EQ_ECM           , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 360+ F50A 70 17 03 00
 360+ F50E FF 00 00 00
 360+ F512 00 00 00 00
 361+ F516 00 04 01 05                          DB  0, 4, 1, 5, low  5250, high  5250, EQ_FUEL_SCOOPS   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 361+ F51A 82 14 04 00
 361+ F51E FF 00 00 00
 361+ F522 00 00 00 00
 362+ F526 00 05 01 06                          DB  0, 5, 1, 6, low 10000, high 10000, EQ_ESCAPE_POD    , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 362+ F52A 10 27 05 00
 362+ F52E FF 00 00 00
 362+ F532 00 00 00 00
 363+ F536 00 06 01 07                          DB  0, 6, 1, 7, low  9000, high  9000, EQ_ENERGY_BOMB   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 363+ F53A 28 23 06 00
 363+ F53E FF 00 00 00
 363+ F542 00 00 00 00
 364+ F546 00 07 01 08                          DB  0, 7, 1, 8, low 15000, high 15000, EQ_ENERGY_UNIT   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 364+ F54A 98 3A 07 00
 364+ F54E FF 00 00 00
 364+ F552 00 00 00 00
 365+ F556 00 08 01 09                          DB  0, 8, 1, 9, low 15000, high 15000, EQ_DOCK_COMP     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 365+ F55A 98 3A 08 00
 365+ F55E FF 00 00 00
 365+ F562 00 00 00 00
 366+ F566 00 09 01 0A                          DB  0, 9, 1,10, low 50000, high 50000, EQ_GAL_DRIVE     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 366+ F56A 50 C3 09 00
 366+ F56E FF 00 00 00
 366+ F572 00 00 00 00
 367+ F576 00 0A 01 03                          DB  0,10, 1, 3, low  4000, high  4000, EQ_FRONT_PULSE   , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 367+ F57A A0 0F 0A 00
 367+ F57E 00 00 00 00
 367+ F582 00 00 00 00
 368+ F586 00 0B 01 03                          DB  0,11, 1, 3, low  4000, high  4000, EQ_REAR_PULSE    , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 368+ F58A A0 0F 0B 00
 368+ F58E 01 01 00 00
 368+ F592 00 00 00 00
 369+ F596 00 0C 01 03                          DB  0,12, 1, 3, low  4000, high  4000, EQ_LEFT_PULSE    , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 369+ F59A A0 0F 0C 00
 369+ F59E 02 02 00 00
 369+ F5A2 00 00 00 00
 370+ F5A6 00 0D 01 03                          DB  0,13, 1, 3, low  4000, high  4000, EQ_RIGHT_PULSE   , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 370+ F5AA A0 0F 0D 00
 370+ F5AE 03 03 00 00
 370+ F5B2 00 00 00 00
 371+ F5B6 00 0E 00 04                          DB  0,14, 0, 4, low 10000, high 10000, EQ_FRONT_BEAM    , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 371+ F5BA 10 27 0E 00
 371+ F5BE 00 00 00 00
 371+ F5C2 00 00 00 00
 372+ F5C6 00 0F 00 04                          DB  0,15, 0, 4, low 10000, high 10000, EQ_REAR_BEAM     , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 372+ F5CA 10 27 0F 00
 372+ F5CE 01 01 00 00
 372+ F5D2 00 00 00 00
 373+ F5D6 00 10 00 04                          DB  0,16, 0, 4, low 10000, high 10000, EQ_LEFT_BEAM     , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 373+ F5DA 10 27 10 00
 373+ F5DE 02 02 00 00
 373+ F5E2 00 00 00 00
 374+ F5E6 00 11 00 04                          DB  0,17, 0, 4, low 10000, high 10000, EQ_RIGHT_BEAM    , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 374+ F5EA 10 27 11 00
 374+ F5EE 03 03 00 00
 374+ F5F2 00 00 00 00
 375+ F5F6 00 12 00 0A                          DB  0,18, 0,10, low  8000, high  8000, EQ_FRONT_MINING  , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 375+ F5FA 40 1F 12 00
 375+ F5FE 00 00 00 00
 375+ F602 00 00 00 00
 376+ F606 00 13 00 0A                          DB  0,19, 0,10, low  8000, high  8000, EQ_REAR_MINING   , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 376+ F60A 40 1F 13 00
 376+ F60E 01 01 00 00
 376+ F612 00 00 00 00
 377+ F616 00 14 00 0A                          DB  0,20, 0,10, low  8000, high  8000, EQ_LEFT_MINING   , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 377+ F61A 40 1F 14 00
 377+ F61E 02 02 00 00
 377+ F622 00 00 00 00
 378+ F626 00 15 00 0A                          DB  0,21, 0,10, low  8000, high  8000, EQ_RIGHT_MINING  , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 378+ F62A 40 1F 15 00
 378+ F62E 03 03 00 00
 378+ F632 00 00 00 00
 379+ F636 00 16 00 0A                          DB  0,22, 0,10, low 60000, high 60000, EQ_FRONT_MILITARY, 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 379+ F63A 60 EA 16 00
 379+ F63E 00 00 00 00
 379+ F642 00 00 00 00
 380+ F646 00 17 00 0A                          DB  0,23, 0,10, low 60000, high 60000, EQ_REAR_MILITARY , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 380+ F64A 60 EA 17 00
 380+ F64E 01 01 00 00
 380+ F652 00 00 00 00
 381+ F656 00 18 00 0A                          DB  0,24, 0,10, low 60000, high 60000, EQ_LEFT_MILITARY , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 381+ F65A 60 EA 18 00
 381+ F65E 02 02 00 00
 381+ F662 00 00 00 00
 382+ F666 00 19 00 0A                          DB  0,25, 0,10, low 60000, high 60000, EQ_RIGHT_MILITARY, 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 382+ F66A 60 EA 19 00
 382+ F66E 03 03 00 00
 382+ F672 00 00 00 00
 383+ F676              ShipEquipTableRowLen    EQU 16
 384+ F676              ShipEquipTableSize      EQU ($-ShipEquipmentList)/ShipEquipTableRowLen
 385+ F676
 386+ F676              ;------------------------------------------------------------------------------------------------------------------------------------
 387+ F676 2B           GalaxyRandSeed			DB	43	            ; Just some start values
 388+ F677 20           GalaxyRandSeed1			DB	32	            ; Just some start values
 389+ F678 0C           GalaxyRandSeed2			DB	12	            ; Just some start values
 390+ F679 42           GalaxyRandSeed3			DB	66	            ; Just some start values
 391+ F67A              GalaxySeedRandom:
 392+ F67A              ;------------------------------------------------------------------------------------------------------------------------------------
 393+ F67A CD 20 87     GetDigramGalaxySeed:    call	copy_galaxy_to_working
 394+ F67D 18 03                                jr		GetDigramWorkingSeed
 395+ F67F CD 38 87     GetDigramSystemSeed:    call	copy_system_to_working
 396+ F682 11 36 8F     GetDigramWorkingSeed:   ld		de,name_expanded    ; ">GetDigram a = digram seed"
 397+ F685 06 03                                ld		b,3
 398+ F687 3A 09 82                             ld		a,(WorkingSeeds)
 399+ F68A E6 40                                and		$40
 400+ F68C 28 03                                jr		z,.SmallSizeName
 401+ F68E CD 57 8F     .LargeSizeName:         call	NamingLoop
 402+ F691 CD 57 8F     .SmallSizeName:         call	NamingLoop
 403+ F694 CD 57 8F                             call	NamingLoop
 404+ F697 CD 57 8F                             call	NamingLoop
 405+ F69A EB           .DoneName:              ex		de,hl
 406+ F69B 36 00                                ld		(hl),0
 407+ F69D EB                                   ex		de,hl
 408+ F69E C9                                   ret
 409+ F69F
 410+ F69F 11 76 F6     GalaxySetSeedFromHL:    ld      de,GalaxyRandSeed
 411+ F6A2              ; Uses registers a,b and hl
 412+ F6A2 B7           GalaxyDoRandom:         or      a                                               ; in 6502 this is called after a bcc instruction to will always be clear (see .detok2 and .dt6)
 413+ F6A3 3A 76 F6                             ld      a,(GalaxyRandSeed)
 414+ F6A6 CB 17        .Seed0Rolled:           rl      a                                               ; r0 << 1
 415+ F6A8 47                                   ld      b,a                                             ; b = reg x in 6502 so x = r0 << 1
 416+ F6A9 21 78 F6     .AddSeed2               ld      hl,GalaxyRandSeed2                              ;
 417+ F6AC 8E                                   adc     a,(hl)                                          ; a = r0 << 1 + r2
 418+ F6AD 32 76 F6     .SetRandSeed0:          ld		(GalaxyRandSeed),a					            ; set r0' = (r0 << 1) +  r2 + (r0 bit 7)
 419+ F6B0 78                                   ld      a,b
 420+ F6B1 32 78 F6     .SetRandSeed2:          ld      (GalaxyRandSeed2),a                             ; set r2' =  r0 << 1
 421+ F6B4 3A 77 F6     .GetRandSeed1:          ld      a,(GalaxyRandSeed1)
 422+ F6B7 47                                   ld      b,a                                             ; b = r1
 423+ F6B8 21 79 F6                             ld      hl,GalaxyRandSeed3
 424+ F6BB 8E                                   adc     a,(hl)                                          ; Adc from before may have set carry flag or may not, will be set if r0 << 1 + r2 + carry > 256
 425+ F6BC 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; set r1' = r1 + r3 + carry
 426+ F6BF 4F                                   ld      c,a
 427+ F6C0 78                                   ld      a,b
 428+ F6C1 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; set r3 = r1
 429+ F6C4 79                                   ld      a,c
 430+ F6C5 C9                                   ret
 431+ F6C6
 432+ F6C6              ;------------------------------------------------------------------------------------------------------------------------------------
 433+ F6C6 ED 31        galaxy_cpy_str_a_at_hl_to_de:add     hl,a
 434+ F6C8 ED 31                                add     hl,a
 435+ F6CA 7E                                   ld      a,(hl)              ;  Fetch low byte
 436+ F6CB 47                                   ld      b,a
 437+ F6CC 23                                   inc     hl
 438+ F6CD 7E                                   ld      a,(hl)              ;  Fetch high byte
 439+ F6CE 68                                   ld      l,b
 440+ F6CF 67                                   ld      h,a
 441+ F6D0 7E           GalaxyCopyLoop:         ld      a,(hl)
 442+ F6D1 FE 00                                cp      0
 443+ F6D3 28 05                                jr      z,.CopyDone
 444+ F6D5 12                                   ld      (de),a
 445+ F6D6 23                                   inc     hl
 446+ F6D7 13                                   inc     de
 447+ F6D8 18 F6                                jr      GalaxyCopyLoop
 448+ F6DA 12           .CopyDone:              ld      (de),a
 449+ F6DB C9                                   ret
 450+ F6DC              ;------------------------------------------------------------------------------------------------------------------------------------
 451+ F6DC 11 64 F1     galaxy_get_species:     ld      de,GalaxySpecies
 452+ F6DF 3E 28                                ld      a,"("
 453+ F6E1 12                                   ld      (de),a
 454+ F6E2 13                                   inc     de
 455+ F6E3 3A FC E8                             ld      a,(GalaxyWorkingSeed+4)
 456+ F6E6 CB 7F                                bit     7,a
 457+ F6E8 20 0A                                jr      nz,.NonHuman
 458+ F6EA 21 62 F1                             ld      hl,GalaxyInhabitantHumanIx
 459+ F6ED AF                                   xor     a
 460+ F6EE CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 461+ F6F1 C3 4F F7                             jp      .galaxy_species_exit
 462+ F6F4 3A FD E8     .NonHuman:              ld      a,(GalaxyWorkingSeed+5)
 463+ F6F7 CB 3F                                srl     a
 464+ F6F9 CB 3F                                srl     a
 465+ F6FB E6 07                                and     $07
 466+ F6FD FE 03                                cp      3
 467+ F6FF 30 0A                                jr      nc,.NotDesc1
 468+ F701 21 34 F1                             ld      hl,GalaxyInhabitantDesc1Ix
 469+ F704 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 470+ F707 3E 20                                ld      a," "
 471+ F709 12                                   ld      (de),a
 472+ F70A 13                                   inc     de
 473+ F70B 3A FD E8     .NotDesc1:              ld      a,(GalaxyWorkingSeed+5)
 474+ F70E CB 3F                                srl     a
 475+ F710 CB 3F                                srl     a
 476+ F712 CB 3F                                srl     a
 477+ F714 CB 3F                                srl     a
 478+ F716 CB 3F                                srl     a
 479+ F718 FE 06                                cp      6
 480+ F71A 30 0A                                jr      nc,.NotDesc2
 481+ F71C 21 3A F1                             ld      hl,GalaxyInhabitantDesc2Ix
 482+ F71F CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 483+ F722 3E 20                                ld      a," "
 484+ F724 12                                   ld      (de),a
 485+ F725 13                                   inc     de
 486+ F726 3A F9 E8     .NotDesc2:              ld      a,(GalaxyWorkingSeed+1)
 487+ F729 47                                   ld      b,a
 488+ F72A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 489+ F72D A8                                   xor     b
 490+ F72E E6 07                                and     $07
 491+ F730 F5                                   push    af
 492+ F731 FE 06                                cp      6
 493+ F733 30 0A                                jr      nc,.NotDesc3
 494+ F735 21 46 F1                             ld      hl,GalaxyInhabitantDesc3Ix
 495+ F738 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 496+ F73B 3E 20                                ld      a," "
 497+ F73D 12                                   ld      (de),a
 498+ F73E 13                                   inc     de
 499+ F73F F1           .NotDesc3:              pop     af
 500+ F740 47                                   ld      b,a
 501+ F741 3A FD E8                             ld      a,(GalaxyWorkingSeed+5)
 502+ F744 E6 03                                and     $03
 503+ F746 80                                   add     a,b
 504+ F747 E6 07                                and     $07
 505+ F749 21 52 F1                             ld      hl,GalaxyInhabitantDesc4Ix
 506+ F74C CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 507+ F74F 3E 73        .galaxy_species_exit:   ld      a,"s"
 508+ F751 12                                   ld      (de),a
 509+ F752 13                                   inc     de
 510+ F753 3E 29                                ld      a,")"
 511+ F755 12                                   ld      (de),a
 512+ F756 13                                   inc     de
 513+ F757 AF                                   xor     a
 514+ F758 12                                   ld      (de),a
 515+ F759 C9                                   ret
 516+ F75A
 517+ F75A
 518+ F75A              ; To copy seed, loops from 3 to 0
 519+ F75A              ; copy seed X + 2 to target X
 520+ F75A              ; x = x -1
 521+ F75A
 522+ F75A              ; For lave we shoudl have "Lave is most famous for its vast rain forests and the Lavian tree grub"
 523+ F75A
 524+ F75A              GalaxyCapitaliseString: ; ">CapitaliseString hl = address"
 525+ F75A 23                                   inc		hl
 526+ F75B 7E                                   ld		a,(hl)
 527+ F75C FE 00                                cp		0
 528+ F75E C8                                   ret		z
 529+ F75F FE 5B                                cp		'Z'+1
 530+ F761 30 F7                                jr		nc,GalaxyCapitaliseString
 531+ F763 FE 41                                cp		'A'
 532+ F765 38 F3                                jr		c,GalaxyCapitaliseString
 533+ F767 C6 20        .LowerCase:             add		a,'a'-'A'
 534+ F769 77                                   ld		(hl),a
 535+ F76A 18 EE                                jr		GalaxyCapitaliseString
 536+ F76C
 537+ F76C
 538+ F76C              GalaxyGoatSoup:         ;ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 539+ F76C                                      ;call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 540+ F76C                                      ;cp      $FF
 541+ F76C                                      ;jr      z,.NoSystemFound
 542+ F76C 3A 0B 82     .SeedGalaxy             ld      a,(WorkingSeeds+2)                              ;
 543+ F76F 32 76 F6                             ld      (GalaxyRandSeed),a                              ; r0 = Seed C
 544+ F772 3A 0C 82                             ld      a,(WorkingSeeds+3)                              ;
 545+ F775 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; r1 = Seeed D
 546+ F778 3A 0D 82                             ld      a,(WorkingSeeds+4)                              ;
 547+ F77B 32 78 F6                             ld      (GalaxyRandSeed2),a                             ; r2 = Seed E
 548+ F77E 3A 0E 82                             ld      a,(WorkingSeeds+5)                              ;
 549+ F781 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; r3 = Seed F
 550+ F784 C9                                   ret
 551+ F785              ; For later......
 552+ F785 3E 05        .MarkExtendedDesc:      ld      a,5                                             ;  ("{lower case}{justify}{single cap}[86-90] IS [140-144].{cr}{left align}"
 553+ F787 F5           .GalaxyExpandDesc:      push    af
 554+ F788 47                                   ld      b,a                                             ; b = 6502 X reg
 555+ F789 C5                                   push    bc                                              ; save Y reg
 556+ F78A
 557+ F78A              ;------------------------------------------------------------------------------------------------------------------------------------
 558+ F78A              ; We enter here with BC = the Y and X Coordinates of the system to select in this galaxy
 559+ F78A              ; This is based on the docked BBC PDesc Pink Volcanoes version ratehr tha goat soup
 560+ F78A ED 43 5B E8  GalaxyPinkVolcano:      ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 561+ F78E CD 64 FC                             call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 562+ F791                                      ;cp      $FF
 563+ F791                                      ;jr      z,.NoSystemFound
 564+ F791              .SpecialDescs:          ; this is not implemented yet to read GalaxyExtendedDescs look at .PDL1
 565+ F791
 566+ F791
 567+ F791
 568+ F791              ;.NoSytemFound:          Print the "Unable to identify a system at present position"
 569+ F791
 570+ F791 00 00 00...  GalaxyNameCopy          DS      30
 571+ F7AF
 572+ F7AF 1E 00        ExpandAtHLToE:          ld      e,0
 573+ F7B1 7E           .ExpandTokenLoop:       ld      a,(hl)
 574+ F7B2 FE 3E                                cp      ">"
 575+ F7B4 C8                                   ret     z
 576+ F7B5 23                                   inc     hl
 577+ F7B6 16 0A                                ld      d,10
 578+ F7B8 ED 30                                mul
 579+ F7BA D6 30                                sub     "0"
 580+ F7BC 83                                   add     a,e
 581+ F7BD 5F                                   ld      e,a
 582+ F7BE 18 F1                                jr      .ExpandTokenLoop
 583+ F7C0
 584+ F7C0 E5           SelectTokenToHL:        push    hl                                          ;+1
 585+ F7C1 C5                                   push    bc                                          ;+2
 586+ F7C2 CD A2 F6                             call    GalaxyDoRandom
 587+ F7C5 C1                                   pop     bc                                          ;+1
 588+ F7C6 E1                                   pop     hl                                          ;+0
 589+ F7C7 16 00        .CalcOptionAToD:        ld      d,0
 590+ F7C9 FE 33                                cp      $33
 591+ F7CB DA CF F7                             jp      c,.Check66
 592+ F7CE 14           .IsGTE33:               inc     d
 593+ F7CF FE 66        .Check66:               cp      $66
 594+ F7D1 DA D5 F7                             jp      c,.Check99
 595+ F7D4 14           .IsGTE66:               inc     d
 596+ F7D5 FE 99        .Check99:               cp      $99
 597+ F7D7 DA DB F7     .IsGTE99:               jp      c,.CheckCC
 598+ F7DA 14                                   inc     d
 599+ F7DB FE CC        .CheckCC:               cp      $CC
 600+ F7DD 38 01                                jr      c,.TokenIdToAddress
 601+ F7DF 14           .ItGETCC:               inc     d
 602+ F7E0 21 1B EF     .TokenIdToAddress:      ld      hl,GalaxyDescList
 603+ F7E3 7B                                   ld      a,e
 604+ F7E4 CB 27                                sla     a                                               ; x 2
 605+ F7E6 ED 31                                add     hl,a                                            ; hl + a * 2
 606+ F7E8 ED 31                                add     hl,a                                            ; hl + a * 4
 607+ F7EA ED 31                                add     hl,a                                            ; hl + a * 6
 608+ F7EC ED 31                                add     hl,a                                            ; hl + a * 8
 609+ F7EE ED 31                                add     hl,a                                            ; hl + a * 10
 610+ F7F0 7A                                   ld      a,d
 611+ F7F1 ED 31                                add     hl,a
 612+ F7F3 ED 31                                add     hl,a                                            ; hl = desc array [e][d]
 613+ F7F5 7E           .LookUpDataFromTable:   ld      a,(hl)
 614+ F7F6 DD 6F                                ld      ixl,a
 615+ F7F8 23                                   inc     hl
 616+ F7F9 7E                                   ld      a,(hl)
 617+ F7FA DD 67                                ld      ixh,a                                           ; ix = address at (hl)
 618+ F7FC DD E5                                push    ix                                              ;+2
 619+ F7FE E1                                   pop     hl                                              ;+1
 620+ F7FF C9                                   ret
 621+ F800              ;------------------------------------------------------------------------------------------------------------------------------------
 622+ F800 E5           ProcessHSymbol:         push    hl                                              ;+1
 623+ F801 D5                                   push    de                                              ;+2
 624+ F802 C5                                   push    bc                                              ;+3
 625+ F803 21 91 F7     .CopyInNameH:           ld      hl, GalaxyNameCopy
 626+ F806 FD 54                                ld      d,iyh
 627+ F808 FD 5D                                ld      e,iyl
 628+ F80A CD D0 F6                             call    GalaxyCopyLoop
 629+ F80D FD 62                                ld      iyh,d
 630+ F80F FD 6B                                ld      iyl,e
 631+ F811 C1                                   pop     bc                                              ;+2
 632+ F812 D1                                   pop     de                                              ;+1
 633+ F813 E1                                   pop     hl
 634+ F814 C9                                   ret
 635+ F815              ;------------------------------------------------------------------------------------------------------------------------------------
 636+ F815 E5           ProcessISymbol:         push    hl                                              ;+1
 637+ F816 D5                                   push    de                                              ;+2
 638+ F817 C5                                   push    bc                                              ;+3
 639+ F818 21 91 F7     .CopyInNameI:           ld      hl, GalaxyNameCopy
 640+ F81B FD 54                                ld      d,iyh
 641+ F81D FD 5D                                ld      e,iyl
 642+ F81F CD D0 F6                             call    GalaxyCopyLoop
 643+ F822 FD 62                                ld      iyh,d
 644+ F824 FD 6B                                ld      iyl,e
 645+ F826 3E 69                                ld      a,"i"
 646+ F828 EB                                   ex      de,hl
 647+ F829 77                                   ld      (hl),a
 648+ F82A 23                                   inc     hl
 649+ F82B 3E 61                                ld      a,"a"
 650+ F82D 77                                   ld      (hl),a
 651+ F82E 23                                   inc     hl
 652+ F82F 3E 6E                                ld      a,"n"
 653+ F831 77                                   ld      (hl),a
 654+ F832 23                                   inc     hl
 655+ F833 E5                                   push    hl
 656+ F834 FD E1                                pop     iy
 657+ F836 C1                                   pop     bc                                              ;+2
 658+ F837 D1                                   pop     de                                              ;+1
 659+ F838 E1                                   pop     hl                                              ;+0
 660+ F839 C9                                   ret
 661+ F83A              ;------------------------------------------------------------------------------------------------------------------------------------
 662+ F83A E5           ProcessRSymbol:         push    hl                                              ;+1
 663+ F83B D5                                   push    de                                              ;+2
 664+ F83C CD A2 F6                             call    GalaxyDoRandom ;(Correct one or do we use teh clear carry version?)
 665+ F83F E6 03                                and     $03
 666+ F841 47                                   ld      b,a
 667+ F842 04                                   inc     b
 668+ F843 AF                                   xor     a
 669+ F844 4F                                   ld      c,a
 670+ F845 C5           .RLoop:                 push    bc                                              ;+3
 671+ F846 CD A2 F6                             call    GalaxyDoRandom
 672+ F849 C1                                   pop     bc                                              ;+2
 673+ F84A E6 3E                                and     $3E
 674+ F84C 21 A0 E8                             ld      hl,GalaxyName_digrams
 675+ F84F ED 31                                add     hl,a
 676+ F851 7E                                   ld      a,(hl)
 677+ F852 FE 41                                cp      "A"
 678+ F854 38 01                                jr      c,.NotLowercase
 679+ F856 81                                   add     a,c
 680+ F857 FD 77 00     .NotLowercase:          ld      (iy+0),a
 681+ F85A 23                                   inc     hl
 682+ F85B FD 23                                inc     iy
 683+ F85D 0E 20                                ld      c,$20               ; fixed force to lower case
 684+ F85F 7E                                   ld      a,(hl)
 685+ F860 FE 41                                cp      "A"
 686+ F862 38 01                                jr      c,.NotLowercase2
 687+ F864 81                                   add     a,c
 688+ F865 FD 77 00     .NotLowercase2:         ld      (iy+0),a
 689+ F868 FD 23                                inc     iy
 690+ F86A 10 D9                                djnz    .RLoop
 691+ F86C D1                                   pop     de                                              ;+1
 692+ F86D E1                                   pop     hl                                              ;+0
 693+ F86E C9                                   ret
 694+ F86F              ;------------------------------------------------------------------------------------------------------------------------------------
 695+ F86F ED 43 5B E8  GalaxyGenerateDesc:     ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 696+ F873 CD 64 FC                             call    galaxy_system_under_cursor
 697+ F876 CD BF FA     .CopySystemName:        call    galaxy_digram_seed                              ; make a local copy of system name
 698+ F879 21 7F E8                             ld      hl,GalaxyExpandedName
 699+ F87C 11 91 F7                             ld      de,GalaxyNameCopy
 700+ F87F CD D0 F6                             call    GalaxyCopyLoop
 701+ F882 21 91 F7     .CapitaliseName:        ld      hl,GalaxyNameCopy
 702+ F885 CD 5A F7                             call    GalaxyCapitaliseString
 703+ F888                                      ; we will also capitalise the local copy here later
 704+ F888 21 DE F3     .InitDescription:       ld      hl,GalaxyPlanetDescStarter                      ; Initialise galaxy description to  <14> is <22>
 705+ F88B 11 B2 F2                             ld      de,GalaxyPlanetSource
 706+ F88E CD D0 F6                             call    GalaxyCopyLoop
 707+ F891 AF           .ClearOutDescription:   xor     a
 708+ F892 21 85 F1                             ld      hl,GalaxyPlanetDescription
 709+ F895 77                                   ld      (hl),a
 710+ F896 11 86 F1                             ld      de,GalaxyPlanetDescription+1
 711+ F899 01 2C 01                             ld      bc,300                                          ; copy previous byte to current for 300 bytes (as we have DS 300 + 1)
 712+ F89C ED B0                                ldir                                                    ; zero it out, don't need this at the end but simplifies debugging
 713+ F89E CD 6C F7     .CopySeedToRandom:      call    GalaxyGoatSoup
 714+ F8A1 21 B2 F2                             ld      hl,GalaxyPlanetSource
 715+ F8A4 FD 21 85 F1                          ld      iy,GalaxyPlanetDescription
 716+ F8A8              ; At this point we are now prepped ready to expand the string to a full description
 717+ F8A8              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 718+ F8A8 7E           .ExpRecursive:          ld      a,(hl)
 719+ F8A9 FE 00                                cp      0
 720+ F8AB CA F0 F8                             jp      z,.ExpansionComplete
 721+ F8AE FE 3C                                cp      "<"
 722+ F8B0 C2 C3 F8                             jp      nz,.NotToken
 723+ F8B3 23           .ItIsAToken:            inc     hl
 724+ F8B4 CD AF F7     .ReadToken:             call    ExpandAtHLToE                                   ; here we have a <X> token
 725+ F8B7 23                                   inc     hl
 726+ F8B8 E5           .SaveCurrentPosition:   push    hl                                              ;+1 Save the current pointer to the text as we are now diverting off to another address
 727+ F8B9 CD C0 F7     .LookUpToken:           call    SelectTokenToHL                                 ; Get random token id by using d as list and e as offest against galaxydesc list and return address in hl
 728+ F8BC CD A8 F8                             call    .ExpRecursive
 729+ F8BF E1           .RestoreCurrentPosition:pop     hl                                              ;+0 get back our old HL we saved off
 730+ F8C0 C3 A8 F8     .TokenNextIteration:    jp      .ExpRecursive
 731+ F8C3              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 732+ F8C3 FE 25        .NotToken:              cp      "%"
 733+ F8C5 C2 E7 F8                             jp      nz,.RegularCharacter
 734+ F8C8 23                                   inc     hl                                              ; issue was that it was stuck on "%" and not reading the next character for the token to expand
 735+ F8C9 7E                                   ld      a,(hl)
 736+ F8CA FE 48                                cp      "H"
 737+ F8CC 20 07                                jr      nz,.IsItI
 738+ F8CE 23           .ItIsAnH:               inc     hl
 739+ F8CF CD 00 F8                             call    ProcessHSymbol
 740+ F8D2 C3 A8 F8                             jp      .ExpRecursive
 741+ F8D5 FE 49        .IsItI:                 cp      "I"
 742+ F8D7 20 07                                jr      nz,.ItIsR
 743+ F8D9 23           .ItIsAnI:               inc     hl
 744+ F8DA CD 15 F8                             call    ProcessISymbol
 745+ F8DD C3 A8 F8                             jp      .ExpRecursive
 746+ F8E0 CD 3A F8     .ItIsR:                 call    ProcessRSymbol
 747+ F8E3 23                                   inc     hl
 748+ F8E4 C3 A8 F8     .SystemNextIteration:   jp      .ExpRecursive
 749+ F8E7 FD 77 00     .RegularCharacter:      ld      (iy+0),a
 750+ F8EA FD 23                                inc     iy
 751+ F8EC 23                                   inc     hl
 752+ F8ED C3 A8 F8     .RegularNextIteration:  jp      .ExpRecursive
 753+ F8F0 AF           .ExpansionComplete:     xor     a
 754+ F8F1 FD 77 01                             ld      (iy+1),a    ; will thsi work as a bodge
 755+ F8F4 C9                                   ret
 756+ F8F5              ;----------------------------------------------------------------------------------------------------------------------------------
 757+ F8F5 3A 0C E9     galaxy_equip_market:    ld      a,(GalaxyDisplayTekLevel)
 758+ F8F8 3C                                   inc     a
 759+ F8F9 67                                   ld      h,a
 760+ F8FA 0E 00                                ld      c,0
 761+ F8FC 06 1A                                ld      b,ShipEquipTableSize            ;NO_OF_EQUIP_ITEMS
 762+ F8FE 11 10 00                             ld      de,ShipEquipTableRowLen         ; Bytes per row
 763+ F901 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 764+ F905 DD 7E 06     .ItemCheckLoop:         ld      a,(ix+6)                        ; is it type fuel
 765+ F908 FE 00                                cp      0
 766+ F90A                                      ; Check Cash TODO
 767+ F90A 28 00                                jr      z,.CheckTechLevel
 768+ F90C DD 7E 03     .CheckTechLevel:        ld      a,(ix+3)                        ; ItemTech Level
 769+ F90F BC                                   cp      h
 770+ F910                                      ;jr      nc,.DoNotShowItem
 771+ F910 DD 7E 02     .CheckShowItem:         ld      a,(ix+2)
 772+ F913 FE 00                                cp      0
 773+ F915                                    ;  jr      z,.DoNotShowItem
 774+ F915 79           .ShowItem:              ld      a,c
 775+ F916 DD 71 01                             ld      (ix+1),c                        ; Show Item Row Id
 776+ F919 DD 7E 06     .CheckFitted:           ld      a,(ix+6)
 777+ F91C FE 00                                cp      EQ_FUEL
 778+ F91E 28 18                                jr      z,.FuelLevel
 779+ F920 FE 01                                cp      EQ_MISSILE
 780+ F922 28 25                                jr      z,.CountMissiles
 781+ F924 21 96 86     .IsFitted:              ld      hl,EquipmentFitted
 782+ F927 ED 31                                add     hl,a
 783+ F929 7E                                   ld      a,(hl)
 784+ F92A FE 00                                cp      0
 785+ F92C 28 05                                jr      z,.NotFittedItem
 786+ F92E 3E 2A        .FittedItem:            ld      a,"*"
 787+ F930 C3 5A F9                             jp      .MoreToDoCheck
 788+ F933 3E 2D        .NotFittedItem:         ld      a,"-"
 789+ F935 C3 5A F9                             jp      .MoreToDoCheck
 790+ F938 3A 7B 86     .FuelLevel:             ld      a,(Fuel)
 791+ F93B FE 46                                cp      MaxFuelLevel
 792+ F93D 28 05                                jr      z,.FullFuel
 793+ F93F 3E 2D        .NotFullFuel:           ld      a,"-"
 794+ F941 C3 5A F9                             jp      .MoreToDoCheck
 795+ F944 3E 2A        .FullFuel               ld      a,"*"                           ; later on do 3 starts low, med,full
 796+ F946 C3 5A F9                             jp      .MoreToDoCheck
 797+ F949 3A 7E 81     .CountMissiles:         ld      a,(NbrMissiles)
 798+ F94C FE 00                                cp      0
 799+ F94E 28 05                                jr      z,.NoMissiles
 800+ F950 C6 30                                add     "0"
 801+ F952 C3 5A F9                             jp      .MoreToDoCheck
 802+ F955 3E 2D        .NoMissiles:            ld      a,"-"
 803+ F957 C3 5A F9                             jp      .MoreToDoCheck
 804+ F95A DD 77 07     .MoreToDoCheck:         ld      (ix+7),a                        ; update fitted status
 805+ F95D 0C                                   inc     c
 806+ F95E DD 19                                add     ix,de
 807+ F960 10 A3                                djnz    .ItemCheckLoop
 808+ F962 C9                                   ret
 809+ F963 3E FF        .DoNotShowItem          ld      a,$FF                           ; $FF = hide
 810+ F965 DD 77 01                             ld      (ix+1),a
 811+ F968 DD 19                                add     ix,de
 812+ F96A 10 99                                djnz    .ItemCheckLoop
 813+ F96C C9                                   ret
 814+ F96D              ;----------------------------------------------------------------------------------------------------------------------------------
 815+ F96D 3A FA E8     galaxy_planet_data:     ld      a,(GalaxyWorkingSeed+2)
 816+ F970 B7           .GenerateGovernment:    or      a
 817+ F971 CB 3F                                srl	    a                                               ; Government = seed2 / 8 & 7
 818+ F973 CB 3F                                srl	    a
 819+ F975 CB 3F                                srl	    a                                                   ;
 820+ F977 E6 07                                and     $07                                             ;
 821+ F979 32 0A E9                             ld      (GalaxyDisplayGovernment),a                     ;
 822+ F97C 3A F9 E8     .GenerateEconomy:       ld      a,(GalaxyWorkingSeed+1)
 823+ F97F E6 07                                and     $07
 824+ F981 47                                   ld      b,a
 825+ F982 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 826+ F985                                      JumpIfAGTENusng 1, .GreaterThan1
 826+ F985 FE 01       >                        cp     1
 826+ F987 D2 93 F9    >                        jp		nc,.GreaterThan1
 827+ F98A 78           .OneOrZero:             ld      a,b
 828+ F98B F6 02                                or      2
 829+ F98D 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 830+ F990 C3 97 F9                             jp      .GenerateTechLevel
 831+ F993 78           .GreaterThan1:          ld      a,b
 832+ F994 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 833+ F997 EE 07        .GenerateTechLevel:     xor     $07                                             ; tech = economy xor 7 + seed3 & 3 + government /2 + fovernemnt & 1
 834+ F999 47                                   ld      b,a
 835+ F99A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 836+ F99D E6 03                                and     $03
 837+ F99F 80                                   add     b
 838+ F9A0 47                                   ld      b,a
 839+ F9A1 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 840+ F9A4 4F                                   ld      c,a
 841+ F9A5 CB 2F                                sra     a
 842+ F9A7 80                                   add     b
 843+ F9A8 47                                   ld      b,a
 844+ F9A9 79                                   ld      a,c
 845+ F9AA E6 01                                and     $1
 846+ F9AC 80                                   add     b
 847+ F9AD 32 0C E9                             ld      (GalaxyDisplayTekLevel),a
 848+ F9B0 CB 27        .GeneratePopulation:    sla     a                                               ; population = tech level * 4 + government + economy + 1
 849+ F9B2 CB 27                                sla     a
 850+ F9B4 21 0A E9                             ld      hl,GalaxyDisplayGovernment
 851+ F9B7 86                                   add     a,(hl)
 852+ F9B8 47                                   ld      b,a
 853+ F9B9 3A 0B E9                             ld      a,(GalaxyDisplayEconomy)
 854+ F9BC 80                                   add     a,b
 855+ F9BD 3C                                   inc     a
 856+ F9BE 32 0D E9                             ld      (GalaxyDisplayPopulation),a
 857+ F9C1 3A 0B E9     .GenerateProductivity:  ld      a,(GalaxyDisplayEconomy)
 858+ F9C4 EE 07                                xor     7
 859+ F9C6 C6 03                                add     3
 860+ F9C8 57                                   ld      d,a
 861+ F9C9 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 862+ F9CC C6 04                                add     4
 863+ F9CE 5F                                   ld      e,a
 864+ F9CF ED 30                                mul                                                     ; the next mulitply will be a 16 bit value
 865+ F9D1 3A 0D E9                             ld      a,(GalaxyDisplayPopulation)
 866+ F9D4 26 00                                ld      h,0
 867+ F9D6 6F                                   ld      l,a
 868+ F9D7 CD E2 92                             call    mulDEbyHL
 869+ F9DA EB                                   ex      de,hl
 870+ F9DB                                      ShiftDELeft1
 870+ F9DB CB 23       >			   sla e
 870+ F9DD CB 12       >			   rl  d
 871+ F9DF                                      ShiftDELeft1
 871+ F9DF CB 23       >			   sla e
 871+ F9E1 CB 12       >			   rl  d
 872+ F9E3                                      ShiftDELeft1
 872+ F9E3 CB 23       >			   sla e
 872+ F9E5 CB 12       >			   rl  d
 873+ F9E7 ED 53 0E E9                          ld      (GalaxyDisplayProductivity),de
 874+ F9EB 3A FD E8     .GenerateRadius:        ld		a,(GalaxyWorkingSeed+5)                         ;radius min = 256*11 = 2816 km
 875+ F9EE E6 0F                                and		$0F
 876+ F9F0 C6 0B                                add     11
 877+ F9F2 47                                   ld      b,a
 878+ F9F3 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 879+ F9F6 4F                                   ld      c,a
 880+ F9F7 ED 43 10 E9                          ld      (GalaxyDisplayRadius),bc
 881+ F9FB C9                                   ret
 882+ F9FC
 883+ F9FC              galaxy_master_seed_to_system:
 884+ F9FC 21 10 E0     		ld		hl,galaxy_master_seed
 885+ F9FF 11 FD 80     		ld		de,SystemSeed
 886+ FA02              galaxy_copy_seed:
 887+ FA02 ED A0        		ldi
 888+ FA04 ED A0        		ldi
 889+ FA06 ED A0        		ldi
 890+ FA08 ED A0        		ldi
 891+ FA0A ED A0        		ldi
 892+ FA0C ED A0        		ldi
 893+ FA0E C9           		ret
 894+ FA0F
 895+ FA0F              galaxy_master_to_galaxy_working:
 896+ FA0F 21 10 E0     		ld		hl,galaxy_master_seed
 897+ FA12 11 F8 E8     		ld		de,GalaxyWorkingSeed
 898+ FA15 18 EB        		jr		galaxy_copy_seed
 899+ FA17
 900+ FA17              galaxy_master_to_galaxy_naming:
 901+ FA17 21 10 E0     		ld		hl,galaxy_master_seed
 902+ FA1A 11 FE E8     		ld		de,GalaxyNamingSeed
 903+ FA1D 18 E3        		jr		galaxy_copy_seed
 904+ FA1F
 905+ FA1F              working_seed_to_galaxy_working:
 906+ FA1F 21 09 82             ld      hl,WorkingSeeds
 907+ FA22 11 F8 E8     		ld		de,GalaxyWorkingSeed
 908+ FA25 18 DB        		jr		galaxy_copy_seed
 909+ FA27
 910+ FA27              working_seed_to_galaxy_naming:
 911+ FA27 21 09 82             ld      hl,WorkingSeeds
 912+ FA2A 11 FE E8     		ld		de,GalaxyNamingSeed
 913+ FA2D 18 D3        		jr		galaxy_copy_seed
 914+ FA2F
 915+ FA2F              galaxy_ix_seed_to_galaxy_naming:
 916+ FA2F DD E5                push    ix
 917+ FA31 E1                   pop     hl
 918+ FA32 11 FE E8     		ld		de,GalaxyNamingSeed
 919+ FA35 18 CB        		jr		galaxy_copy_seed
 920+ FA37
 921+ FA37
 922+ FA37              galaxy_working_seed_to_galaxy_naming:
 923+ FA37 21 F8 E8             ld      hl,GalaxyWorkingSeed
 924+ FA3A 11 FE E8     		ld		de,GalaxyNamingSeed
 925+ FA3D 18 C3        		jr		galaxy_copy_seed
 926+ FA3F
 927+ FA3F              galaxy_working_seed_to_system:
 928+ FA3F 21 F8 E8     		ld		hl,GalaxyWorkingSeed
 929+ FA42 11 FD 80     		ld		de,SystemSeed
 930+ FA45 18 BB        		jr		galaxy_copy_seed
 931+ FA47
 932+ FA47              system_seed_to_galaxy_working:
 933+ FA47 21 FD 80     		ld		hl,SystemSeed
 934+ FA4A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 935+ FA4D 18 B3        		jr		galaxy_copy_seed
 936+ FA4F
 937+ FA4F
 938+ FA4F              system_seed_to_galaxy_naming:
 939+ FA4F 21 FD 80     		ld		hl,SystemSeed
 940+ FA52 11 FE E8     		ld		de,GalaxyNamingSeed
 941+ FA55 18 AB        		jr		galaxy_copy_seed
 942+ FA57
 943+ FA57              ix_seed_to_galaxy_working:
 944+ FA57 DD E5                push    ix
 945+ FA59 E1                   pop     hl
 946+ FA5A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 947+ FA5D 18 A3        		jr		galaxy_copy_seed
 948+ FA5F
 949+ FA5F              ; Here we twist just once rather than the usual4 for a system
 950+ FA5F 3A FE E8     NextGalaxyNamingSeed:   ld		a,(GalaxyNamingSeed)			; QQ15 ; x = a + c
 951+ FA62 B7                                   or		a							; clear carry flag
 952+ FA63 21 00 E9                             ld		hl,GalaxyNamingSeed+2			; hl -> qq+2 [c]
 953+ FA66 86                                   add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
 954+ FA67 47                                   ld		b,a							; partial sum lo [x]
 955+ FA68              ; y = b + d	+ carry
 956+ FA68 3A FF E8                             ld		a,(GalaxyNamingSeed+1)          ; [b]
 957+ FA6B 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
 958+ FA6E 8E                                   adc		a,(hl)						; note add with carry
 959+ FA6F 4F                                   ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
 960+ FA70 3A 00 E9                             ld		a,(GalaxyNamingSeed+2)
 961+ FA73 32 FE E8                             ld		(GalaxyNamingSeed+0),a			; copy qq152 to qq150 [a] = [c]
 962+ FA76 3A 01 E9                             ld		a,(GalaxyNamingSeed+3)
 963+ FA79 32 FF E8                             ld		(GalaxyNamingSeed+1),a			; copy qq153 to qq151 [b] = [d]
 964+ FA7C 3A 03 E9                             ld		a,(GalaxyNamingSeed+5)
 965+ FA7F 32 01 E9                             ld		(GalaxyNamingSeed+3),a			; copy qq155 to qq153 [d] = [f]
 966+ FA82 3A 02 E9                             ld		a,(GalaxyNamingSeed+4)
 967+ FA85 32 00 E9                             ld		(GalaxyNamingSeed+2),a			; copy qq154 to qq152 [c] = [e]
 968+ FA88 B7                                   or		a
 969+ FA89 78                                   ld		a,b
 970+ FA8A 21 00 E9                             ld		hl,GalaxyNamingSeed+2		    ; hl -> qq+2
 971+ FA8D 86                                   add	    a,(hl)
 972+ FA8E 32 02 E9                             ld		(GalaxyNamingSeed+4),a			; e = x + [c]
 973+ FA91 79                                   ld		a,c
 974+ FA92 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 )we don't inc as it affects carry)
 975+ FA95 8E                                   adc		a,(hl)
 976+ FA96 32 03 E9                             ld		(GalaxyNamingSeed+5),a			; f = y + [d] + carry
 977+ FA99 C9                                   ret
 978+ FA9A
 979+ FA9A
 980+ FA9A 3A 03 E9     GalaxyNamingLoop:       ld		a,(GalaxyNamingSeed+5)	        ; a = first byte of name seed
 981+ FA9D E6 1F                                and 	$1F					            ; Keep bottom 5 bits only
 982+ FA9F FE 00                                cp		0					            ; 0 = skip 2 chars
 983+ FAA1 28 12                                jr		z,.SkipPhrase
 984+ FAA3 C6 0C                                add		a,12
 985+ FAA5 CB 27                                sla		a					            ; phrase = (a+12)*2
 986+ FAA7 21 A0 E8                             ld		hl,GalaxyName_digrams
 987+ FAAA ED 31                                add		hl,a
 988+ FAAC ED A0                                ldi
 989+ FAAE 7E                                   ld		a,(hl)
 990+ FAAF FE 3F                                cp		'?'
 991+ FAB1 28 02                                jr		z,.SkipPhrase
 992+ FAB3 ED A0        .AddExtra:              ldi
 993+ FAB5 D5           .SkipPhrase:            push	de
 994+ FAB6 CD 5F FA                             call	NextGalaxyNamingSeed
 995+ FAB9 D1                                   pop		de
 996+ FABA C9                                   ret
 997+ FABB
 998+ FABB              ; takes location in BC, finds seed and expands the name
 999+ FABB ED 43 5B E8  galaxy_name_at_bc:      ld      (GalaxyTargetSystem),bc
1000+ FABF CD 64 FC     galaxy_digram_seed:     call    galaxy_system_under_cursor
1001+ FAC2 FE 00                                cp      0
1002+ FAC4 C8                                   ret     z
1003+ FAC5
1004+ FAC5 CD 27 FA     GalaxyDigramWorkings:   call    working_seed_to_galaxy_naming
1005+ FAC8 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1006+ FACB
1007+ FACB CD 17 FA     GalaxyDigramSeed:       call    galaxy_master_to_galaxy_naming
1008+ FACE C3 E0 FA                             jp      GalaxyDigramNamingSeed
1009+ FAD1
1010+ FAD1 CD 37 FA     GalaxyDigramWorkingSeed:call    galaxy_working_seed_to_galaxy_naming
1011+ FAD4 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1012+ FAD7
1013+ FAD7 CD 2F FA     GalaxyDigramWIXSeed:    call    galaxy_ix_seed_to_galaxy_naming
1014+ FADA C3 E0 FA                             jp      GalaxyDigramNamingSeed
1015+ FADD
1016+ FADD CD 4F FA     SystemGetDigramSeed:    call    system_seed_to_galaxy_naming
1017+ FAE0
1018+ FAE0 11 7F E8     GalaxyDigramNamingSeed: ld		de,GalaxyExpandedName
1019+ FAE3 06 03        GalaxyDigramToDE:       ld		b,3
1020+ FAE5 3A FE E8                             ld		a,(GalaxyNamingSeed)
1021+ FAE8 E6 40                                and		$40
1022+ FAEA 28 03                                jr		z,.SmallSizeName
1023+ FAEC CD 9A FA     .LargeSizeName:         call	GalaxyNamingLoop
1024+ FAEF CD 9A FA     .SmallSizeName:         call	GalaxyNamingLoop
1025+ FAF2 CD 9A FA                             call	GalaxyNamingLoop
1026+ FAF5 CD 9A FA                             call	GalaxyNamingLoop
1027+ FAF8 EB           .DoneName:              ex		de,hl
1028+ FAF9 36 00                                ld		(hl),0
1029+ FAFB EB                                   ex		de,hl
1030+ FAFC AF                                   xor     a
1031+ FAFD 3D                                   dec     a
1032+ FAFE C9                                   ret
1033+ FAFF              ;reorte X 13 Y 97
1034+ FAFF
1035+ FAFF              ;----------------------------------------------------------------------------------------------------------------------------------
1036+ FAFF 3A 5D E8     is_system_found:        ld      a,(GalaxySearchLength)
1037+ FB02                                      ;dec     a                       ; as we won't check the /0 just first match
1038+ FB02 4F                                   ld      c,a                     ; will always be max of 32 as that is what length routine does
1039+ FB03 06 00                                ld      b,0                     ; so we can use cpir
1040+ FB05 11 5E E8     .readyToSearch:         ld      de,GalaxySearchString   ; hl = string we are serching
1041+ FB08 21 7F E8                             ld      hl,GalaxyExpandedName   ; de = the expanded galaxy name
1042+ FB0B 7E           .searchLoop:            ld      a,(hl)                  ; if the string is too short then maybe there is a longer one to find
1043+ FB0C                                      JumpIfAIsZero   .noMatch        ; but
1043+ FB0C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1043+ FB0D CA 1B FB    >                        jp	    z, .noMatch
1044+ FB10 1A                                   ld      a,(de)                  ; get the character to search for
1045+ FB11 ED A1                                cpi                             ; compare with value in A from HL
1046+ FB13 20 06                                jr      nz,.noMatch
1047+ FB15 13                                   inc     de                      ; move to next search character
1048+ FB16 E2 1E FB                             jp      po, .matched            ; if c = 0 then we have hit the bingpot
1049+ FB19 18 F0                                jr      .searchLoop             ; else keep looping
1050+ FB1B              .noMatch:               SetAFalse
1050+ FB1B 3E FF       >                        ld      a,$FF
1051+ FB1D C9                                   ret
1052+ FB1E              .matched:               SetATrue
1052+ FB1E AF          >                        xor     a
1053+ FB1F C9                                   ret
1054+ FB20
1055+ FB20 21 5E E8     set_galaxy_search_len:  ld      hl,GalaxySearchString
1056+ FB23 06 00                                ld      b,0
1057+ FB25 0E 20                                ld      c,32                    ; limiter for missing /0
1058+ FB27 7E           .SearchLoop:            ld      a,(hl)
1059+ FB28                                      JumpIfAIsZero .foundLength
1059+ FB28 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1059+ FB29 CA 34 FB    >                        jp	    z, .foundLength
1060+ FB2C 04                                   inc     b
1061+ FB2D 0D                                   dec     c
1062+ FB2E 28 04                                jr      z,.foundLength
1063+ FB30 23                                   inc     hl
1064+ FB31 C3 27 FB                             jp      .SearchLoop
1065+ FB34 78           .foundLength:           ld      a,b
1066+ FB35 32 5D E8                             ld      (GalaxySearchLength),a
1067+ FB38 C9                                   ret
1068+ FB39
1069+ FB39              ; find system by searching for GalaxySearchString
1070+ FB39 CD 20 FB     find_system_by_name:    call    set_galaxy_search_len
1071+ FB3C AF                                   xor     a
1072+ FB3D 32 16 81                             ld      (XSAV),a
1073+ FB40 DD 21 16 E0                          ld      ix,galaxy_data
1074+ FB44 CD 57 FA     .nextSystem:            call    ix_seed_to_galaxy_working
1075+ FB47 CD D1 FA                             call    GalaxyDigramWorkingSeed
1076+ FB4A CD FF FA                             call    is_system_found
1077+ FB4D                                      JumpIfATrue .FoundAtIX
1077+ FB4D A7          >                        and     a
1077+ FB4E CA 6A FB    >                        jp      z, .FoundAtIX
1078+ FB51 3A 16 81     .notFoundYet:           ld      a,(XSAV)
1079+ FB54 3D                                   dec     a
1080+ FB55 28 10                                jr      z,.NoMoreSystems
1081+ FB57 32 16 81     .moreToSearch:          ld      (XSAV),a
1082+ FB5A DD E5                                push    ix
1083+ FB5C E1                                   pop     hl
1084+ FB5D ED 34 08 00                          add     hl,8
1085+ FB61 E5                                   push    hl
1086+ FB62 DD E1                                pop     ix
1087+ FB64 C3 44 FB                             jp      .nextSystem
1088+ FB67 3E FF        .NoMoreSystems:         ld      a,$FF
1089+ FB69 C9                                   ret
1090+ FB6A CD 57 FA     .FoundAtIX              call    ix_seed_to_galaxy_working
1091+ FB6D C9                                   ret
1092+ FB6E              ;----------------------------------------------------------------------------------------------------------------------------------
1093+ FB6E 00 00        nearestfound:           DW 0
1094+ FB70              ; In here de carries current nearest and loads into nearest found
1095+ FB70              ; does a basic distance check for x then y each under threshold, then does x+y under threshold  jsut in case we have an extreme like 0 x and high dist y
1096+ FB70 DD 21 16 E0  find_nearest_to_bc:     ld      ix,galaxy_data
1097+ FB74 FD 26 00                             ld      iyh,0
1098+ FB77 FD 2E 78                             ld      iyl,120
1099+ FB7A ED 43 6E FB                          ld      (nearestfound),bc
1100+ FB7E DD 7E 03     find_nearest_loop:      ld      a,(ix+3)                        ;
1101+ FB81 5F                                   ld      e,a                             ; e= current seed x
1102+ FB82                                      JumpIfALTNusng c, nearestXPosLT         ; not we need to know if its e - c or c - e we coudl do 2's compliement of course
1102+ FB82 B9          >                        cp      c
1102+ FB83 DA 94 FB    >                        jp		c, nearestXPosLT
1103+ FB86 D5           nearestXPosGTE:         push    de                              ;
1104+ FB87 26 00                                ld      h,0                             ;
1105+ FB89 6F                                   ld      l,a                             ; hl = seed x
1106+ FB8A 16 00                                ld      d,0                             ;
1107+ FB8C 59                                   ld      e,c                             ; de = nearest x
1108+ FB8D B7                                   or      a                               ;
1109+ FB8E ED 52                                sbc     hl,de                           ; hl = distance between the two
1110+ FB90 D1                                   pop     de
1111+ FB91 C3 9E FB                             jp      nearestDistXPos
1112+ FB94 D5           nearestXPosLT:          push    de                              ;
1113+ FB95 26 00                                ld      h,0                             ;
1114+ FB97 69                                   ld      l,c                             ; hl = nearest x
1115+ FB98 16 00                                ld      d,0                             ;
1116+ FB9A B7                                   or      a                               ; de = seed x
1117+ FB9B ED 52                                sbc     hl,de                           ;
1118+ FB9D D1                                   pop     de                              ; hl = distance between the two
1119+ FB9E 7D           nearestDistXPos:        ld      a,l                             ; so l = abs distance as does a
1120+ FB9F FD BD                                cp      iyl                             ; under initial threshold?
1121+ FBA1 30 3D                                jr      nc,find_nearest_miss            ; no so its a miss
1122+ FBA3               ;DEBUG                       ld      l,a                             ; l = distance (we can drop thsi as it was done above!)
1123+ FBA3 DD 7E 01                             ld      a,(ix+1)                        ;
1124+ FBA6 57                                   ld      d,a                             ; d = seed y
1125+ FBA7                                      JumpIfALTNusng b, nearestYPosLT         ; determine abs calc
1125+ FBA7 B8          >                        cp      b
1125+ FBA8 DA BC FB    >                        jp		c, nearestYPosLT
1126+ FBAB E5           nearestYPosGTE:         push    hl                              ; save current x distance
1127+ FBAC D5                                   push    de                              ;
1128+ FBAD 26 00                                ld      h,0                             ;
1129+ FBAF 6F                                   ld      l,a                             ; hl = seed y
1130+ FBB0 16 00                                ld      d,0                             ;
1131+ FBB2 58                                   ld      e,b                             ; de = nearest y
1132+ FBB3 B7                                   or      a                               ;
1133+ FBB4 ED 52                                sbc     hl,de                           ; hl = distance between the two
1134+ FBB6 7D                                   ld      a,l
1135+ FBB7 D1                                   pop     de
1136+ FBB8 E1                                   pop     hl
1137+ FBB9 C3 CA FB                             jp      nearestDistYPos
1138+ FBBC E5           nearestYPosLT:          push    hl                              ; save current x distance
1139+ FBBD D5                                   push    de                              ;
1140+ FBBE 26 00                                ld      h,0                             ;
1141+ FBC0 68                                   ld      l,b                             ; hl = nearest y
1142+ FBC1 5A                                   ld      e,d                             ;
1143+ FBC2 16 00                                ld      d,0                             ; de = seed y
1144+ FBC4 B7                                   or      a                               ;
1145+ FBC5 ED 52                                sbc     hl,de                           ; hl = distance between the two
1146+ FBC7 7D                                   ld      a,l
1147+ FBC8 D1                                   pop     de
1148+ FBC9 E1                                   pop     hl                              ; now we get distance in l back into hl, distance y is in a
1149+ FBCA FD BD        nearestDistYPos:        cp      iyl                             ; under initial threshold?
1150+ FBCC 30 12                                jr      nc, find_nearest_miss
1151+ FBCE 26 00                                ld      h,0                             ; hl = distance for x
1152+ FBD0 ED 31                                add     hl,a                            ; adding distance y
1153+ FBD2 7D                                   ld      a,l                             ; and copy it to l
1154+ FBD3 FD BD                                cp      iyl                             ; is the pair under distance
1155+ FBD5 30 09                                jr      nc, find_nearest_miss           ;
1156+ FBD7 FD 6F        nearest_found_a_hit:    ld      iyl,a                           ; so we have a hit
1157+ FBD9 ED 53 6E FB                          ld      (nearestfound),de               ;
1158+ FBDD                                      ReturnIfALTNusng 2                      ; exact match bail out, note 1 can be an exact match due to Y axis, as we are looking at seed pos then this is accurate enough and we won't hit dx 1 and dy 0 hopefully in any galaxy :)
1158+ FBDD FE 02       >                        cp    2
1158+ FBDF D8          >                        ret	 c
1159+ FBE0 DD E5        find_nearest_miss:      push     ix
1160+ FBE2 E1                                   pop      hl
1161+ FBE3 ED 34 08 00                          add      hl,8
1162+ FBE7 E5                                   push     hl
1163+ FBE8 DD E1                                pop      ix
1164+ FBEA FD 25                                dec     iyh
1165+ FBEC FD 7C                                ld      a,iyh
1166+ FBEE                                      JumpIfAIsNotZero find_nearest_loop
1166+ FBEE A7          >                        and     a
1166+ FBEF C2 7E FB    >                        jp	    nz,find_nearest_loop
1167+ FBF2 ED 4B 6E FB                          ld      bc ,(nearestfound)              ; if we hit here then after searching we have found a nearest
1168+ FBF6 C9                                   ret
1169+ FBF7              ;----------------------------------------------------------------------------------------------------------------------------------
1170+ FBF7              ; Does a sqare root distance
1171+ FBF7 16 00        galaxy_find_distance:   ld      d,0
1172+ FBF9 26 00                                ld      h,0
1173+ FBFB 3A 57 E8                             ld      a,(GalaxyPresentSystem)
1174+ FBFE 47                                   ld      b,a
1175+ FBFF 3A 59 E8                             ld      a,(GalaxyDestinationSystem)
1176+ FC02 B8                                   cp      b
1177+ FC03 20 0E                                jr      nz,.NotSame
1178+ FC05 C5           .XSame:                 push    bc
1179+ FC06 F5                                   push    af
1180+ FC07 3A 58 E8                             ld      a,(GalaxyPresentSystem+1)
1181+ FC0A 47                                   ld      b,a
1182+ FC0B 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1183+ FC0E B8                                   cp      b
1184+ FC0F C1                                   pop     bc
1185+ FC10 F1                                   pop     af
1186+ FC11 28 49                                jr      z,.ZeroDistance
1187+ FC13 30 08        .NotSame:               jr      nc,.DestinationGTEPresentX
1188+ FC15 68           .DestinationLTPresentX: ld      l,b
1189+ FC16 5F                                   ld      e,a
1190+ FC17 B7                                   or      a
1191+ FC18 ED 52                                sbc     hl,de
1192+ FC1A C3 22 FC                             jp      .SquareXDist
1193+ FC1D 6F           .DestinationGTEPresentX:ld      l,a
1194+ FC1E 58                                   ld      e,b
1195+ FC1F B7                                   or      a
1196+ FC20 ED 52                                sbc     hl,de
1197+ FC22 55           .SquareXDist:           ld      d,l
1198+ FC23 5D                                   ld      e,l
1199+ FC24 ED 30                                mul
1200+ FC26 3A 58 E8     .CalcYDistSq            ld      a,(GalaxyPresentSystem+1)
1201+ FC29 47                                   ld      b,a
1202+ FC2A 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1203+ FC2D B8                                   cp      b
1204+ FC2E 30 0B                                jr      nc,.DestinationGTEPresentY
1205+ FC30 4F           .DestinationLTPresentY: ld      c,a
1206+ FC31 68                                   ld      l,b
1207+ FC32 06 00                                ld      b,0
1208+ FC34 26 00                                ld      h,0
1209+ FC36 ED 42                                sbc     hl,bc
1210+ FC38 C3 43 FC                             jp      .DestinationYDone
1211+ FC3B 48           .DestinationGTEPresentY:ld      c,b
1212+ FC3C 6F                                   ld      l,a
1213+ FC3D 06 00                                ld      b,0
1214+ FC3F 26 00                                ld      h,0
1215+ FC41 ED 42                                sbc     hl,bc
1216+ FC43 CB 2D        .DestinationYDone:      sra     l                   ; divide L by 2 for galaxy size
1217+ FC45 7D                                   ld      a,l
1218+ FC46 EB                                   ex      de,hl
1219+ FC47 57                                   ld      d,a
1220+ FC48 5F                                   ld      e,a
1221+ FC49 ED 30        .SquareYDist:           mul
1222+ FC4B 19                                   add     hl,de
1223+ FC4C EB                                   ex      de,hl
1224+ FC4D CD C1 93                             call    asm_sqrt            ; distance via pythagoras in hl
1225+ FC50                                      ShiftHLLeft1
1225+ FC50 CB 25       >			   sla l
1225+ FC52 CB 14       >			   rl  h
1226+ FC54                                      ShiftHLLeft1                ; Multiply by 4 to get distance
1226+ FC54 CB 25       >			   sla l
1226+ FC56 CB 14       >			   rl  h
1227+ FC58 22 A4 81                             ld      (Distance),hl       ; Distance is now caulated distance
1228+ FC5B C9                                   ret
1229+ FC5C AF           .ZeroDistance:          xor     a
1230+ FC5D 32 A4 81                             ld      (Distance),a
1231+ FC60 32 A5 81                             ld      (Distance+1),a
1232+ FC63 C9                                   ret
1233+ FC64              ;----------------------------------------------------------------------------------------------------------------------------------
1234+ FC64              ; Find the systems pointed to by GalaxyTargetSystem and loads it into WorkingSeeds
1235+ FC64              ; this needs to chagne to galaxyresultseed or galayxworkingseed
1236+ FC64 AF           galaxy_system_under_cursor:xor     a
1237+ FC65 32 16 81                             ld		(XSAV),a
1238+ FC68 DD 21 16 E0                          ld      ix,galaxy_data
1239+ FC6C 2A 5B E8     .GCCounterLoop:         ld      hl,(GalaxyTargetSystem)
1240+ FC6F DD E5                                push    ix
1241+ FC71 7D                                   ld      a,l
1242+ FC72 DD BE 03                             cp      (ix+3)                          ; seed x
1243+ FC75 20 14                                jr      nz,.ItsNotThisX
1244+ FC77 7C                                   ld      a,h
1245+ FC78 DD BE 01                             cp      (ix+1)                          ; seed x
1246+ FC7B 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
1247+ FC7D DD E5                                push    ix
1248+ FC7F E1                                   pop     hl
1249+ FC80 11 09 82                             ld      de,WorkingSeeds                 ;' copy to wkring Seeds
1250+ FC83 CD 0B 87                             call    copy_seed
1251+ FC86 3E FF                                ld      a,$FF
1252+ FC88 DD E1                                pop     ix
1253+ FC8A C9                                   ret
1254+ FC8B E1           .ItsNotThisX:           pop     hl
1255+ FC8C ED 34 08 00                          add     hl,8
1256+ FC90 E5                                   push    hl
1257+ FC91 DD E1                                pop     ix
1258+ FC93 3A 16 81                             ld		a,(XSAV)
1259+ FC96 3D                                   dec		a
1260+ FC97 32 16 81                             ld      (XSAV),a
1261+ FC9A FE 00                                cp		0
1262+ FC9C C8                                   ret		z
1263+ FC9D 18 CD                                jr		.GCCounterLoop
1264+ FC9F              ;----------------------------------------------------------------------------------------------------------------------------------
1265+ FC9F 21 FD 80     SeedGalaxy:             ld      hl,SystemSeed                   ; First copy system seed to galaxy master
1266+ FCA2 11 10 E0                             ld      de,galaxy_master_seed           ; .
1267+ FCA5 ED A0                                ldi                                     ; .
1268+ FCA7 ED A0                                ldi                                     ; .
1269+ FCA9 ED A0                                ldi                                     ; .
1270+ FCAB ED A0                                ldi                                     ; .
1271+ FCAD ED A0                                ldi                                     ; .
1272+ FCAF ED A0                                ldi                                     ; .
1273+ FCB1 DD 21 16 E0                          ld      ix,galaxy_data                  ; Generate system seed data for each planet
1274+ FCB5 AF                                   xor		a                               ; .
1275+ FCB6 32 16 81                             ld		(XSAV),a                        ; .
1276+ FCB9 DD E5        SeedGalaxyLoop:         push    ix                              ; .
1277+ FCBB D1                                   pop     de                              ; .
1278+ FCBC 21 FD 80                             ld      hl,SystemSeed                   ; .
1279+ FCBF CD 0B 87                             call    copy_seed                       ; .
1280+ FCC2 DD E5                                push    ix                              ; .
1281+ FCC4 E1                                   pop     hl                              ; .
1282+ FCC5 ED 34 08 00                          add     hl,8                            ; .
1283+ FCC9 E5                                   push    hl                              ; .
1284+ FCCA DD E1                                pop     ix                              ; .
1285+ FCCC CD 40 87                             call    next_system_seed                ; .
1286+ FCCF 3A 16 81                             ld		a,(XSAV)                        ; .
1287+ FCD2 3D                                   dec		a                               ; .
1288+ FCD3 FE 00                                cp		0                               ; .
1289+ FCD5 C8                                   ret		z                               ; .
1290+ FCD6 32 16 81                             ld		(XSAV),a                        ; .
1291+ FCD9 18 DE                                jr      SeedGalaxyLoop                  ; .
1292+ FCDB C9                                   ret
1293+ FCDC
1294+ FCDC              GalaxyBankSize   EQU $ - galaxy_page_marker
1295+ FCDC
# file closed: ./Universe/Galaxy/galaxy_data.asm
 931  FCDC                                      DISPLAY "Bank ",BankGalaxyData0," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData0"
 932  FCDC              ; Bank 92  ------------------------------------------------------------------------------------------------------------------------
 933  FCDC                                      SLOT    GalaxyDataAddr
 934  FCDC                                      PAGE    BankGalaxyData1
 935  FCDC                                      ORG GalaxyDataAddr, BankGalaxyData1
 936  E000 FF           GALAXYDATABlock1         DB $FF
 937  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
 938  0000                                      DISPLAY "Bank ",BankGalaxyData1," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData1"
 939  0000              ; Bank 93  ------------------------------------------------------------------------------------------------------------------------
 940  0000                                      SLOT    GalaxyDataAddr
 941  0000                                      PAGE    BankGalaxyData2
 942  0000                                      ORG GalaxyDataAddr, BankGalaxyData2
 943  E000 FF           GALAXYDATABlock2        DB $FF
 944  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
 945  0000                                      DISPLAY "Bank ",BankGalaxyData2," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData2"
 946  0000              ; Bank 94  ------------------------------------------------------------------------------------------------------------------------
 947  0000                                      SLOT    GalaxyDataAddr
 948  0000                                      PAGE    BankGalaxyData3
 949  0000                                      ORG GalaxyDataAddr, BankGalaxyData3
 950  E000 FF           GALAXYDATABlock3        DB $FF
 951  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
 952  0000                                      DISPLAY "Bank ",BankGalaxyData3," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData3"
 953  0000              ; Bank 95  ------------------------------------------------------------------------------------------------------------------------
 954  0000                                      SLOT    GalaxyDataAddr
 955  0000                                      PAGE    BankGalaxyData4
 956  0000                                      ORG GalaxyDataAddr, BankGalaxyData4
 957  E000 FF           GALAXYDATABlock4        DB $FF
 958  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
 959  0000                                      DISPLAY "Bank ",BankGalaxyData4," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData4"
 960  0000              ; Bank 96  ------------------------------------------------------------------------------------------------------------------------
 961  0000                                      SLOT    GalaxyDataAddr
 962  0000                                      PAGE    BankGalaxyData5
 963  0000                                      ORG GalaxyDataAddr,BankGalaxyData5
 964  E000 FF           GALAXYDATABlock5        DB $FF
 965  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
 966  0000                                      DISPLAY "Bank ",BankGalaxyData5," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData5"
 967  0000              ; Bank 97  ------------------------------------------------------------------------------------------------------------------------
 968  0000                                      SLOT    GalaxyDataAddr
 969  0000                                      PAGE    BankGalaxyData6
 970  0000                                      ORG GalaxyDataAddr,BankGalaxyData6
 971  E000 FF           GALAXYDATABlock6        DB $FF
 972  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
 973  0000                                      DISPLAY "Bank ",BankGalaxyData6," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData6"
 974  0000              ; Bank 98  ------------------------------------------------------------------------------------------------------------------------
 975  0000                                      SLOT    GalaxyDataAddr
 976  0000                                      PAGE    BankGalaxyData7
 977  0000                                      ORG GalaxyDataAddr,BankGalaxyData7
 978  E000 FF           GALAXYDATABlock7        DB $FF
 979  E001 00 00 00...                          DS $1FFF                 ; just allocate 8000 bytes for now
 980  0000                                      DISPLAY "Bank ",BankGalaxyData7," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData7"
 981  0000              ; Bank 99  ------------------------------------------------------------------------------------------------------------------------
 982  0000                                      SLOT    MathsTablesAddr
 983  0000                                      PAGE    BankMathsTables
 984  0000                                      ORG     MathsTablesAddr,BankMathsTables
 985  0000                                      INCLUDE "./Maths/logmaths.asm"
# file opened: ./Maths/logmaths.asm
   1+ 0000 4C 6F 67 4D  logmaths_page_marker    DB "LogMaths   PG99"
   1+ 0004 61 74 68 73
   1+ 0008 20 20 20 50
   1+ 000C 47 39 39
   2+ 000F
   3+ 000F EB           AntiLogHL:              ex      de,hl
   4+ 0010 21 05 07                             ld      hl,LogReverseHighByte
   5+ 0013 01 14 02                             ld      bc,LogReverseTableLen
   6+ 0016 7A                                   ld      a,d
   7+ 0017 ED A1        .SearchLoop:            cpi                                     ; first pass index into high byte
   8+ 0019 28 03                                jr      z,.FoundHighByte
   9+ 001B 23                                   inc     hl
  10+ 001C 18 F9                                jr      .SearchLoop
  11+ 001E 23           .FoundHighByte:         inc     hl                              ; now we have high double it for table of words
  12+ 001F 7E                                   ld      a,(hl)                          ; .
  13+ 0020 21 05 05                             ld      hl,LogTable                     ; .
  14+ 0023 ED 31                                add     hl,a                            ; .
  15+ 0025 ED 31                                add     hl,a                            ; .
  16+ 0027 7A           .LookForLowByteLoop:    ld      a,d                             ; search for low byte or change in high byte
  17+ 0028 BE                                   cp      (hl)
  18+ 0029 20 09                                jr      nz,.SkippedPastHigh
  19+ 002B 23                                   inc     hl
  20+ 002C 7B                                   ld      a,e
  21+ 002D                                      JumpIfAGTENusng (hl), .SkippedPastLow
  21+ 002D BE          >                        cp     (hl)
  21+ 002E D2 35 00    >                        jp		nc,.SkippedPastLow
  22+ 0031 C3 27 00                             jp      .LookForLowByteLoop
  23+ 0034
  24+ 0034 2B           .SkippedPastHigh:       dec     hl                              ; for high we are on next word
  25+ 0035 2B           .SkippedPastLow:        dec     hl                              ; for low we are no next byte
  26+ 0036 EB                                   ex      de,hl                           ; move address to de for subtract
  27+ 0037 21 05 05                             ld      hl,LogTable                     ; subtract from log table address
  28+ 003A                                      ClearCarryFlag
  28+ 003A B7          >                        or a
  29+ 003B ED 52                                sbc     hl,de                           ; so nwo we have nbr of words, i.e anito log * 2
  30+ 003D                                      ShiftHLRight1                           ; now must be >= 255
  30+ 003D CB 3C       >			   srl h
  30+ 003F CB 1D       >			   rr  l
  31+ 0041 7D                                   ld      a,l
  32+ 0042 C9                                   ret
  33+ 0043
  34+ 0043              AEquAmul256DivBLogLT:   JumpIfAIsZero   .ResultIsZero
  34+ 0043 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  34+ 0044 CA 6C 00    >                        jp	    z, .ResultIsZero
  35+ 0047 21 05 05                             ld      hl,LogTable                     ; de = log a
  36+ 004A ED 31                                add     hl,a                            ; .
  37+ 004C ED 31                                add     hl,a                            ; .
  38+ 004E 5E                                   ld      e,(hl)                          ; .
  39+ 004F 23                                   inc     hl                              ; .
  40+ 0050 56                                   ld      d,(hl)                          ; .
  41+ 0051 21 05 05                             ld      hl,LogTable                     ; hl = log b
  42+ 0054 78                                   ld      a,b                             ; .
  43+ 0055 ED 31                                add     hl,a                            ; .
  44+ 0057 ED 31                                add     hl,a                            ; .
  45+ 0059 7E                                   ld      a,(hl)                          ; .
  46+ 005A 23                                   inc     hl                              ; .
  47+ 005B 66                                   ld      h,(hl)                          ; .
  48+ 005C 6F                                   ld      l,a                             ; .
  49+ 005D                                      ClearCarryFlag                          ;
  49+ 005D B7          >                        or a
  50+ 005E EB                                   ex      de,hl                           ; now hl = log a and de = log b
  51+ 005F ED 52                                sbc     hl,de                           ; hl = log a - log b
  52+ 0061 7C                                   ld      a,h                             ; .
  53+ 0062 21 05 03                             ld      hl,AnitLogODDTable               ; hl = anti log (log a - log b)
  54+ 0065 ED 31                                add     hl,a                            ; which is also a / b
  55+ 0067 ED 31                                add     hl,a                            ; .
  56+ 0069 7E                                   ld      a,(hl)                          ; .
  57+ 006A                                      ClearCarryFlag                          ;
  57+ 006A B7          >                        or a
  58+ 006B C9                                   ret
  59+ 006C              .ResultIsZero:          ClearCarryFlag
  59+ 006C B7          >                        or a
  60+ 006D                                      ZeroA
  60+ 006D AF          >                        xor a
  61+ 006E C9                                   ret
  62+ 006F
  63+ 006F              AEquAmul256DivBLog:     JumpIfAIsZero   .ResultIsZero
  63+ 006F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  63+ 0070 CA A6 00    >                        jp	    z, .ResultIsZero
  64+ 0073                                      JumpIfAGTENusng d, AEquAmul256DivBLogLT
  64+ 0073 BA          >                        cp     d
  64+ 0074 D2 43 00    >                        jp		nc,AEquAmul256DivBLogLT
  65+ 0077 21 05 05                             ld      hl,LogTable                     ; de = log a
  66+ 007A ED 31                                add     hl,a                            ; .
  67+ 007C ED 31                                add     hl,a                            ; .
  68+ 007E 5E                                   ld      e,(hl)                          ; .
  69+ 007F 23                                   inc     hl                              ; .
  70+ 0080 56                                   ld      d,(hl)                          ; .
  71+ 0081 21 05 05                             ld      hl,LogTable                     ; hl = log b
  72+ 0084 78                                   ld      a,b                             ; .
  73+ 0085 ED 31                                add     hl,a                            ; .
  74+ 0087 ED 31                                add     hl,a                            ; .
  75+ 0089 7E                                   ld      a,(hl)                          ; .
  76+ 008A 23                                   inc     hl                              ; .
  77+ 008B 66                                   ld      h,(hl)                          ; .
  78+ 008C 6F                                   ld      l,a                             ; .
  79+ 008D                                      ClearCarryFlag                          ;
  79+ 008D B7          >                        or a
  80+ 008E EB                                   ex      de,hl                           ; now hl = log a and de = log b
  81+ 008F ED 52                                sbc     hl,de                           ; hl = log a - log b
  82+ 0091 38 0B                                jr      c,.ResultIsOne                  ; .
  83+ 0093 7C                                   ld      a,h                             ; .
  84+ 0094 21 05 01                             ld      hl,AntiLogTable                 ; hl = anti log (log a - log b)
  85+ 0097 ED 31                                add     hl,a                            ; which is also a / b
  86+ 0099 ED 31                                add     hl,a                            ; .
  87+ 009B 7E                                   ld      a,(hl)                          ; .
  88+ 009C                                      ClearCarryFlag                          ;
  88+ 009C B7          >                        or a
  89+ 009D C9                                   ret
  90+ 009E              .ResultIsOne:           ClearCarryFlag
  90+ 009E B7          >                        or a
  91+ 009F 3E FF                                ld      a,$FF
  92+ 00A1 C9                                   ret
  93+ 00A2              .ResultIsInfinte:       SetCarryFlag
  93+ 00A2 37          >                        scf
  94+ 00A3 3E FF                                ld      a,$FF
  95+ 00A5 C9                                   ret
  96+ 00A6              .ResultIsZero:          ClearCarryFlag
  96+ 00A6 B7          >                        or a
  97+ 00A7 C9                                   ret
  98+ 00A8
  99+ 00A8              AEquAmul256Div197LogLT: JumpIfAIsZero   .ResultIsZero
  99+ 00A8 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  99+ 00A9 CA C8 00    >                        jp	    z, .ResultIsZero
 100+ 00AC 21 05 05                             ld      hl,LogTable                     ; point to log a in LogTable
 101+ 00AF ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
 102+ 00B1 ED 31                                add     hl,a
 103+ 00B3 5E                                   ld      e,(hl)                          ; de = log a
 104+ 00B4 23                                   inc     hl                              ; .
 105+ 00B5 56                                   ld      d,(hl)                          ; .
 106+ 00B6 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
 107+ 00B9                                      ClearCarryFlag
 107+ 00B9 B7          >                        or a
 108+ 00BA EB                                   ex      hl,de                           ; hl = log a, de = log 197
 109+ 00BB ED 52                                sbc     hl,de
 110+ 00BD 7C                                   ld      a,h
 111+ 00BE 21 05 03                             ld      hl,AnitLogODDTable
 112+ 00C1 ED 31                                add     hl,a
 113+ 00C3 ED 31                                add     hl,a
 114+ 00C5 7E                                   ld      a,(hl)
 115+ 00C6                                      ClearCarryFlag
 115+ 00C6 B7          >                        or a
 116+ 00C7 C9                                   ret
 117+ 00C8              .ResultIsZero:          ClearCarryFlag
 117+ 00C8 B7          >                        or a
 118+ 00C9                                      ZeroA
 118+ 00C9 AF          >                        xor a
 119+ 00CA C9                                   ret
 120+ 00CB
 121+ 00CB
 122+ 00CB              AEquAmul256Div197Log:   JumpIfAIsZero   .ResultIsZero
 122+ 00CB A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 122+ 00CC CA F5 00    >                        jp	    z, .ResultIsZero
 123+ 00CF                                      JumpIfAGTENusng d, AEquAmul256Div197LogLT
 123+ 00CF BA          >                        cp     d
 123+ 00D0 D2 A8 00    >                        jp		nc,AEquAmul256Div197LogLT
 124+ 00D3 21 05 05                             ld      hl,LogTable                     ; point to log a in LogTable
 125+ 00D6 ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
 126+ 00D8 ED 31                                add     hl,a
 127+ 00DA 5E                                   ld      e,(hl)                          ; de = log a
 128+ 00DB 23                                   inc     hl                              ; .
 129+ 00DC 56                                   ld      d,(hl)                          ; .
 130+ 00DD 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
 131+ 00E0                                      ClearCarryFlag
 131+ 00E0 B7          >                        or a
 132+ 00E1 EB                                   ex      hl,de                           ; hl = log a, de = log 197
 133+ 00E2 ED 52                                sbc     hl,de
 134+ 00E4 38 0B                                jr      c,.ResultIsOne
 135+ 00E6 7C                                   ld      a,h
 136+ 00E7 21 05 01                             ld      hl,AntiLogTable
 137+ 00EA ED 31                                add     hl,a
 138+ 00EC ED 31                                add     hl,a
 139+ 00EE 7E                                   ld      a,(hl)
 140+ 00EF                                      ClearCarryFlag
 140+ 00EF B7          >                        or a
 141+ 00F0 C9                                   ret
 142+ 00F1              .ResultIsOne:           ClearCarryFlag
 142+ 00F1 B7          >                        or a
 143+ 00F2 3E FF                                ld      a,$FF
 144+ 00F4 C9                                   ret
 145+ 00F5              .ResultIsZero:          ClearCarryFlag
 145+ 00F5 B7          >                        or a
 146+ 00F6 C9                                   ret
 147+ 00F7
 148+ 00F7              AEquAmul256Div197LogSignA:
 149+ 00F7 FD 67                                ld      iyh,a
 150+ 00F9                                      ClearSignBitA
 150+ 00F9 E6 7F       >                        and     SignMask8Bit
 151+ 00FB CD CB 00                             call    AEquAmul256Div197Log
 152+ 00FE 47                                   ld      b,a
 153+ 00FF FD 7C                                ld      a,iyh
 154+ 0101                                      SignBitOnlyA
 154+ 0101 E6 80       >                        and     SignOnly8Bit
 155+ 0103 B0                                   or      b
 156+ 0104 C9                                   ret
# file closed: ./Maths/logmaths.asm
 986  0105                                      INCLUDE "./Tables/antilogtable.asm"
# file opened: ./Tables/antilogtable.asm
   1+ 0105 01 00 01 00  AntiLogTable:           DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
   1+ 0109 01 00 01 00
   1+ 010D 01 00 01 00
   1+ 0111 01 00 01 00
   1+ 0115 01 00 01 00
   1+ 0119 01 00 01 00
   1+ 011D 01 00 01 00
   1+ 0121 01 00 01 00
   2+ 0125 01 00 01 00                          DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
   2+ 0129 01 00 01 00
   2+ 012D 01 00 01 00
   2+ 0131 01 00 01 00
   2+ 0135 01 00 01 00
   2+ 0139 01 00 01 00
   2+ 013D 01 00 01 00
   2+ 0141 01 00 01 00
   3+ 0145 02 00 02 00                          DW $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
   3+ 0149 02 00 02 00
   3+ 014D 02 00 02 00
   3+ 0151 02 00 02 00
   3+ 0155 02 00 02 00
   3+ 0159 02 00 02 00
   3+ 015D 02 00 02 00
   3+ 0161 02 00 02 00
   4+ 0165 02 00 02 00                          DW $02, $02, $02, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03
   4+ 0169 02 00 03 00
   4+ 016D 03 00 03 00
   4+ 0171 03 00 03 00
   4+ 0175 03 00 03 00
   4+ 0179 03 00 03 00
   4+ 017D 03 00 03 00
   4+ 0181 03 00 03 00
   5+ 0185 04 00 04 00                          DW $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $05, $05, $05, $05, $05
   5+ 0189 04 00 04 00
   5+ 018D 04 00 04 00
   5+ 0191 04 00 04 00
   5+ 0195 04 00 04 00
   5+ 0199 04 00 05 00
   5+ 019D 05 00 05 00
   5+ 01A1 05 00 05 00
   6+ 01A5 05 00 05 00                          DW $05, $05, $05, $06, $06, $06, $06, $06, $06, $06, $07, $07, $07, $07, $07, $07
   6+ 01A9 05 00 06 00
   6+ 01AD 06 00 06 00
   6+ 01B1 06 00 06 00
   6+ 01B5 06 00 06 00
   6+ 01B9 07 00 07 00
   6+ 01BD 07 00 07 00
   6+ 01C1 07 00 07 00
   7+ 01C5 08 00 08 00                          DW $08, $08, $08, $08, $08, $08, $09, $09, $09, $09, $09, $0A, $0A, $0A, $0A, $0B
   7+ 01C9 08 00 08 00
   7+ 01CD 08 00 08 00
   7+ 01D1 09 00 09 00
   7+ 01D5 09 00 09 00
   7+ 01D9 09 00 0A 00
   7+ 01DD 0A 00 0A 00
   7+ 01E1 0A 00 0B 00
   8+ 01E5 0B 00 0B 00                          DW $0B, $0B, $0B, $0C, $0C, $0C, $0C, $0D, $0D, $0D, $0E, $0E, $0E, $0E, $0F, $0F
   8+ 01E9 0B 00 0C 00
   8+ 01ED 0C 00 0C 00
   8+ 01F1 0C 00 0D 00
   8+ 01F5 0D 00 0D 00
   8+ 01F9 0E 00 0E 00
   8+ 01FD 0E 00 0E 00
   8+ 0201 0F 00 0F 00
   9+ 0205 10 00 10 00                          DW $10, $10, $10, $11, $11, $11, $12, $12, $13, $13, $13, $14, $14, $15, $15, $16
   9+ 0209 10 00 11 00
   9+ 020D 11 00 11 00
   9+ 0211 12 00 12 00
   9+ 0215 13 00 13 00
   9+ 0219 13 00 14 00
   9+ 021D 14 00 15 00
   9+ 0221 15 00 16 00
  10+ 0225 16 00 17 00                          DW $16, $17, $17, $18, $18, $19, $19, $1A, $1A, $1B, $1C, $1C, $1D, $1D, $1E, $1F
  10+ 0229 17 00 18 00
  10+ 022D 18 00 19 00
  10+ 0231 19 00 1A 00
  10+ 0235 1A 00 1B 00
  10+ 0239 1C 00 1C 00
  10+ 023D 1D 00 1D 00
  10+ 0241 1E 00 1F 00
  11+ 0245 20 00 20 00                          DW $20, $20, $21, $22, $22, $23, $24, $25, $26, $26, $27, $28, $29, $2A, $2B, $2C
  11+ 0249 21 00 22 00
  11+ 024D 22 00 23 00
  11+ 0251 24 00 25 00
  11+ 0255 26 00 26 00
  11+ 0259 27 00 28 00
  11+ 025D 29 00 2A 00
  11+ 0261 2B 00 2C 00
  12+ 0265 2D 00 2E 00                          DW $2D, $2E, $2F, $30, $31, $32, $33, $34, $35, $36, $38, $39, $3A, $3B, $3D, $3E
  12+ 0269 2F 00 30 00
  12+ 026D 31 00 32 00
  12+ 0271 33 00 34 00
  12+ 0275 35 00 36 00
  12+ 0279 38 00 39 00
  12+ 027D 3A 00 3B 00
  12+ 0281 3D 00 3E 00
  13+ 0285 40 00 41 00                          DW $40, $41, $42, $44, $45, $47, $48, $4A, $4C, $4D, $4F, $51, $52, $54, $56, $58
  13+ 0289 42 00 44 00
  13+ 028D 45 00 47 00
  13+ 0291 48 00 4A 00
  13+ 0295 4C 00 4D 00
  13+ 0299 4F 00 51 00
  13+ 029D 52 00 54 00
  13+ 02A1 56 00 58 00
  14+ 02A5 5A 00 5C 00                          DW $5A, $5C, $5E, $60, $62, $64, $67, $69, $6B, $6D, $70, $72, $75, $77, $7A, $7D
  14+ 02A9 5E 00 60 00
  14+ 02AD 62 00 64 00
  14+ 02B1 67 00 69 00
  14+ 02B5 6B 00 6D 00
  14+ 02B9 70 00 72 00
  14+ 02BD 75 00 77 00
  14+ 02C1 7A 00 7D 00
  15+ 02C5 80 00 82 00                          DW $80, $82, $85, $88, $8B, $8E, $91, $94, $98, $9B, $9E, $A2, $A5, $A9, $AD, $B1
  15+ 02C9 85 00 88 00
  15+ 02CD 8B 00 8E 00
  15+ 02D1 91 00 94 00
  15+ 02D5 98 00 9B 00
  15+ 02D9 9E 00 A2 00
  15+ 02DD A5 00 A9 00
  15+ 02E1 AD 00 B1 00
  16+ 02E5 B5 00 B8 00                          DW $B5, $B8, $BD, $C1, $C5, $C9, $CE, $D2, $D7, $DB, $E0, $E5, $EA, $EF, $F5, $FA
  16+ 02E9 BD 00 C1 00
  16+ 02ED C5 00 C9 00
  16+ 02F1 CE 00 D2 00
  16+ 02F5 D7 00 DB 00
  16+ 02F9 E0 00 E5 00
  16+ 02FD EA 00 EF 00
  16+ 0301 F5 00 FA 00
  17+ 0305
  18+ 0305 01 00 01 00  AnitLogODDTable:        DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ;  0 - 15
  18+ 0309 01 00 01 00
  18+ 030D 01 00 01 00
  18+ 0311 01 00 01 00
  18+ 0315 01 00 01 00
  18+ 0319 01 00 01 00
  18+ 031D 01 00 01 00
  18+ 0321 01 00 01 00
  19+ 0325 01 00 01 00                          DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 16 - 31
  19+ 0329 01 00 01 00
  19+ 032D 01 00 01 00
  19+ 0331 01 00 01 00
  19+ 0335 01 00 01 00
  19+ 0339 01 00 01 00
  19+ 033D 01 00 01 00
  19+ 0341 01 00 01 00
  20+ 0345 02 00 02 00                          DW $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02 ; 32 - 47
  20+ 0349 02 00 02 00
  20+ 034D 02 00 02 00
  20+ 0351 02 00 02 00
  20+ 0355 02 00 02 00
  20+ 0359 02 00 02 00
  20+ 035D 02 00 02 00
  20+ 0361 02 00 02 00
  21+ 0365 02 00 02 00                          DW $02, $02, $02, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03 ; 48 - 55
  21+ 0369 02 00 03 00
  21+ 036D 03 00 03 00
  21+ 0371 03 00 03 00
  21+ 0375 03 00 03 00
  21+ 0379 03 00 03 00
  21+ 037D 03 00 03 00
  21+ 0381 03 00 03 00
  22+ 0385 04 00 04 00                          DW $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $05, $05, $05, $05, $05, $05 ; 64 - 71
  22+ 0389 04 00 04 00
  22+ 038D 04 00 04 00
  22+ 0391 04 00 04 00
  22+ 0395 04 00 04 00
  22+ 0399 05 00 05 00
  22+ 039D 05 00 05 00
  22+ 03A1 05 00 05 00
  23+ 03A5 05 00 05 00                          DW $05, $05, $05, $06, $06, $06, $06, $06, $06, $06, $07, $07, $07, $07, $07, $07 ; 80 - 87
  23+ 03A9 05 00 06 00
  23+ 03AD 06 00 06 00
  23+ 03B1 06 00 06 00
  23+ 03B5 06 00 06 00
  23+ 03B9 07 00 07 00
  23+ 03BD 07 00 07 00
  23+ 03C1 07 00 07 00
  24+ 03C5 08 00 08 00                          DW $08, $08, $08, $08, $08, $09, $09, $09, $09, $09, $0A, $0A, $0A, $0A, $0A, $0B ; 96 -
  24+ 03C9 08 00 08 00
  24+ 03CD 08 00 09 00
  24+ 03D1 09 00 09 00
  24+ 03D5 09 00 09 00
  24+ 03D9 0A 00 0A 00
  24+ 03DD 0A 00 0A 00
  24+ 03E1 0A 00 0B 00
  25+ 03E5 0B 00 0B 00                          DW $0B, $0B, $0B, $0C, $0C, $0C, $0D, $0D, $0D, $0D, $0E, $0E, $0E, $0F, $0F, $0F ; 112
  25+ 03E9 0B 00 0C 00
  25+ 03ED 0C 00 0C 00
  25+ 03F1 0D 00 0D 00
  25+ 03F5 0D 00 0D 00
  25+ 03F9 0E 00 0E 00
  25+ 03FD 0E 00 0F 00
  25+ 0401 0F 00 0F 00
  26+ 0405 10 00 10 00                          DW $10, $10, $10, $11, $11, $12, $12, $12, $13, $13, $14, $14, $14, $15, $15, $16 ; 128
  26+ 0409 10 00 11 00
  26+ 040D 11 00 12 00
  26+ 0411 12 00 12 00
  26+ 0415 13 00 13 00
  26+ 0419 14 00 14 00
  26+ 041D 14 00 15 00
  26+ 0421 15 00 16 00
  27+ 0425 16 00 17 00                          DW $16, $17, $17, $18, $18, $19, $1A, $1A, $1B, $1B, $1C, $1D, $1D, $1E, $1E, $1F ; 144
  27+ 0429 17 00 18 00
  27+ 042D 18 00 19 00
  27+ 0431 1A 00 1A 00
  27+ 0435 1B 00 1B 00
  27+ 0439 1C 00 1D 00
  27+ 043D 1D 00 1E 00
  27+ 0441 1E 00 1F 00
  28+ 0445 20 00 21 00                          DW $20, $21, $21, $22, $23, $24, $24, $25, $26, $27, $28, $29, $29, $2A, $2B, $2C ; 160
  28+ 0449 21 00 22 00
  28+ 044D 23 00 24 00
  28+ 0451 24 00 25 00
  28+ 0455 26 00 27 00
  28+ 0459 28 00 29 00
  28+ 045D 29 00 2A 00
  28+ 0461 2B 00 2C 00
  29+ 0465 2D 00 2E 00                          DW $2D, $2E, $2F, $30, $31, $32, $34, $35, $36, $37, $38, $3A, $3B, $3C, $3D, $3F ; 176
  29+ 0469 2F 00 30 00
  29+ 046D 31 00 32 00
  29+ 0471 34 00 35 00
  29+ 0475 36 00 37 00
  29+ 0479 38 00 3A 00
  29+ 047D 3B 00 3C 00
  29+ 0481 3D 00 3F 00
  30+ 0485 40 00 42 00                          DW $40, $42, $43, $45, $46, $48, $49, $4B, $4C, $4E, $50, $52, $53, $55, $57, $59 ; 192
  30+ 0489 43 00 45 00
  30+ 048D 46 00 48 00
  30+ 0491 49 00 4B 00
  30+ 0495 4C 00 4E 00
  30+ 0499 50 00 52 00
  30+ 049D 53 00 55 00
  30+ 04A1 57 00 59 00
  31+ 04A5 5B 00 5D 00                          DW $5B, $5D, $5F, $61, $63, $65, $68, $6A, $6C, $6F, $71, $74, $76, $79, $7B, $7E ; 208
  31+ 04A9 5F 00 61 00
  31+ 04AD 63 00 65 00
  31+ 04B1 68 00 6A 00
  31+ 04B5 6C 00 6F 00
  31+ 04B9 71 00 74 00
  31+ 04BD 76 00 79 00
  31+ 04C1 7B 00 7E 00
  32+ 04C5 81 00 84 00                          DW $81, $84, $87, $8A, $8D, $90, $93, $96, $99, $9D, $A0, $A4, $A7, $AB, $AF, $B3 ; 224
  32+ 04C9 87 00 8A 00
  32+ 04CD 8D 00 90 00
  32+ 04D1 93 00 96 00
  32+ 04D5 99 00 9D 00
  32+ 04D9 A0 00 A4 00
  32+ 04DD A7 00 AB 00
  32+ 04E1 AF 00 B3 00
  33+ 04E5 B6 00 BA 00                          DW $B6, $BA, $BF, $C3, $C7, $CB, $D0, $D4, $D9, $DE, $E3, $E8, $ED, $F2, $F7, $FD ; 240 - 255
  33+ 04E9 BF 00 C3 00
  33+ 04ED C7 00 CB 00
  33+ 04F1 D0 00 D4 00
  33+ 04F5 D9 00 DE 00
  33+ 04F9 E3 00 E8 00
  33+ 04FD ED 00 F2 00
  33+ 0501 F7 00 FD 00
  34+ 0505
# file closed: ./Tables/antilogtable.asm
 987  0505                                      INCLUDE "./Tables/logtable.asm"
# file opened: ./Tables/logtable.asm
   1+ 0505 00 00        LogTable:               DW $0000                                                            ; 0
   2+ 0507 00 00 06 20                          DW $0000, $2006, $320F, $400D, $4AEC, $5216, $59C2, $6013           ; 8
   2+ 050B 0F 32 0D 40
   2+ 050F EC 4A 16 52
   2+ 0513 C2 59 13 60
   3+ 0517 1E 65 F2 6A                          DW $651E, $6AF2, $6E9A, $721C, $7680, $79C9, $7DFB, $801A           ; 16
   3+ 051B 9A 6E 1C 72
   3+ 051F 80 76 C9 79
   3+ 0523 FB 7D 1A 80
   4+ 0527 27 82 25 85                          DW $8227, $8525, $8715, $8AF9, $8CD2, $8EA0, $9066, $9223           ; 24
   4+ 052B 15 87 F9 8A
   4+ 052F D2 8C A0 8E
   4+ 0533 66 90 23 92
   5+ 0537 D8 94 86 96                          DW $94D8, $9686, $982E, $99CF, $9B6B, $9D02, $9E93, $A020           ; 32
   5+ 053B 2E 98 CF 99
   5+ 053F 6B 9B 02 9D
   5+ 0543 93 9E 20 A0
   6+ 0547 A9 A1 2E A2                          DW $A1A9, $A22E, $A4AE, $A52C, $A6A5, $A71C, $A98F, $AA00           ; 40
   6+ 054B AE A4 2C A5
   6+ 054F A5 A6 1C A7
   6+ 0553 8F A9 00 AA
   7+ 0557 6D AB D8 AC                          DW $AB6D, $ACD8, $AD41, $AEA7, $AF0B, $B06C, $B1CC, $B229           ; 48
   7+ 055B 41 AD A7 AE
   7+ 055F 0B AF 6C B0
   7+ 0563 CC B1 29 B2
   8+ 0567 85 B3 DF B4                          DW $B385, $B4DF, $B537, $B68D, $B7E1, $B834, $B986, $B9D6           ; 56
   8+ 056B 37 B5 8D B6
   8+ 056F E1 B7 34 B8
   8+ 0573 86 B9 D6 B9
   9+ 0577 25 BA 72 BB                          DW $BA25, $BB72, $BCBE, $BD08, $BD52, $BE9A, $BFE1, $C027           ; 64
   9+ 057B BE BC 08 BD
   9+ 057F 52 BD 9A BE
   9+ 0583 E1 BF 27 C0
  10+ 0587 6C C0 B0 C1                          DW $C06C, $C1B0, $C2F2, $C234, $C375, $C4B5, $C4F4, $C532           ; 72
  10+ 058B F2 C2 34 C2
  10+ 058F 75 C3 B5 C4
  10+ 0593 F4 C4 32 C5
  11+ 0597 6F C6 AC C6                          DW $C66F, $C6AC, $C7E7, $C722, $C85C, $C996, $C9CE, $CA06           ; 80
  11+ 059B E7 C7 22 C7
  11+ 059F 5C C8 96 C9
  11+ 05A3 CE C9 06 CA
  12+ 05A7 3D CA 74 CB                          DW $CA3D, $CB74, $CCAA, $CCDF, $CD13, $CD47, $CE7B, $CEAD           ; 88
  12+ 05AB AA CC DF CC
  12+ 05AF 13 CD 47 CD
  12+ 05B3 7B CE AD CE
  13+ 05B7 E0 CF 11 CF                          DW $CFE0, $CF11, $D042, $D073, $D1A3, $D1D2, $D201, $D230           ; 96
  13+ 05BB 42 D0 73 D0
  13+ 05BF A3 D1 D2 D1
  13+ 05C3 01 D2 30 D2
  14+ 05C7 5E D3 8B D3                          DW $D35E, $D38B, $D4B9, $D4E5, $D511, $D53D, $D568, $D693           ; 104
  14+ 05CB B9 D4 E5 D4
  14+ 05CF 11 D5 3D D5
  14+ 05D3 68 D5 93 D6
  15+ 05D7 BE D6 E8 D7                          DW $D6BE, $D7E8, $D712, $D83B, $D864, $D98C, $D9B5, $D9DD           ; 112
  15+ 05DB 12 D7 3B D8
  15+ 05DF 64 D8 8C D9
  15+ 05E3 B5 D9 DD D9
  16+ 05E7 04 DA 2B DA                          DW $DA04, $DA2B, $DB52, $DB78, $DB9E, $DCC4, $DCEA, $DD0F           ; 120
  16+ 05EB 52 DB 78 DB
  16+ 05EF 9E DB C4 DC
  16+ 05F3 EA DC 0F DD
  17+ 05F7 34 DD 58 DD                          DW $DD34, $DD58, $DE7D, $DEA1, $DEC4, $DFE8, $DF0B, $E02E           ; 128
  17+ 05FB 7D DE A1 DE
  17+ 05FF C4 DE E8 DF
  17+ 0603 0B DF 2E E0
  18+ 0607 50 E0 72 E0                          DW $E050, $E072, $E194, $E1B6, $E1D8, $E2F9, $E21A, $E23B           ; 136
  18+ 060B 94 E1 B6 E1
  18+ 060F D8 E1 F9 E2
  18+ 0613 1A E2 3B E2
  19+ 0617 5B E3 7C E3                          DW $E35B, $E37C, $E39C, $E4BC, $E4DB, $E4FB, $E51A, $E539           ; 144
  19+ 061B 9C E3 BC E4
  19+ 061F DB E4 FB E4
  19+ 0623 1A E5 39 E5
  20+ 0627 57 E5 76 E6                          DW $E557, $E676, $E694, $E6B2, $E7D0, $E7EE, $E70C, $E729           ; 152
  20+ 062B 94 E6 B2 E6
  20+ 062F D0 E7 EE E7
  20+ 0633 0C E7 29 E7
  21+ 0637 46 E8 63 E8                          DW $E846, $E863, $E880, $E99C, $E9B9, $E9D5, $EAF1, $EA0D           ; 160
  21+ 063B 80 E8 9C E9
  21+ 063F B9 E9 D5 E9
  21+ 0643 F1 EA 0D EA
  22+ 0647 28 EA 44 EA                          DW $EA28, $EA44, $EB5F, $EB7A, $EB95, $ECB0, $ECCB, $ECE5           ; 168
  22+ 064B 5F EB 7A EB
  22+ 064F 95 EB B0 EC
  22+ 0653 CB EC E5 EC
  23+ 0657 00 EC 1A ED                          DW $EC00, $ED1A, $ED34, $ED4E, $ED68, $EE81, $EE9B, $EEB4           ; 176
  23+ 065B 34 ED 4E ED
  23+ 065F 68 ED 81 EE
  23+ 0663 9B EE B4 EE
  24+ 0667 CD EE E6 EF                          DW $EECD, $EFE6, $EFFF, $EF18, $EF30, $F049, $F061, $F079           ; 184
  24+ 066B FF EF 18 EF
  24+ 066F 30 EF 49 F0
  24+ 0673 61 F0 79 F0
  25+ 0677 91 F1 A9 F1                          DW $F191, $F1A9, $F1C1, $F1D9, $F1F0, $F208, $F21F, $F236           ; 192
  25+ 067B C1 F1 D9 F1
  25+ 067F F0 F1 08 F2
  25+ 0683 1F F2 36 F2
  26+ 0687 4E F2 64 F3                          DW $F24E, $F364, $F37B, $F392, $F3A9, $F4BF, $F4D5, $F4EC           ; 200
  26+ 068B 7B F3 92 F3
  26+ 068F A9 F3 BF F4
  26+ 0693 D5 F4 EC F4
  27+ 0697 02 F4 18 F5                          DW $F402, $F518, $F52E, $F544, $F559, $F56F, $F685, $F69A           ; 208
  27+ 069B 2E F5 44 F5
  27+ 069F 59 F5 6F F5
  27+ 06A3 85 F6 9A F6
  28+ 06A7 AF F6 C4 F6                          DW $F6AF, $F6C4, $F7DA, $F7EF, $F703, $F718, $F72D, $F842           ; 216
  28+ 06AB DA F7 EF F7
  28+ 06AF 03 F7 18 F7
  28+ 06B3 2D F7 42 F8
  29+ 06B7 56 F8 6B F8                          DW $F856, $F86B, $F87F, $F993, $F9A7, $F9BB, $F9CF, $F9E3           ; 224
  29+ 06BB 7F F8 93 F9
  29+ 06BF A7 F9 BB F9
  29+ 06C3 CF F9 E3 F9
  30+ 06C7 F7 FA 0B FA                          DW $FAF7, $FA0B, $FA1E, $FA32, $FA45, $FB58, $FB6C, $FB7F           ; 232
  30+ 06CB 1E FA 32 FA
  30+ 06CF 45 FA 58 FB
  30+ 06D3 6C FB 7F FB
  31+ 06D7 92 FB A5 FB                          DW $FB92, $FBA5, $FCB8, $FCCB, $FCDE, $FCF0, $FC03, $FD16           ; 240
  31+ 06DB B8 FC CB FC
  31+ 06DF DE FC F0 FC
  31+ 06E3 03 FC 16 FD
  32+ 06E7 28 FD 3A FD                          DW $FD28, $FD3A, $FD4D, $FD5F, $FD71, $FE83, $FE95, $FEA7           ; 248
  32+ 06EB 4D FD 5F FD
  32+ 06EF 71 FD 83 FE
  32+ 06F3 95 FE A7 FE
  33+ 06F7 B9 FE CB FE                          DW $FEB9, $FECB, $FFDD, $FFEE, $FF00, $FF11, $FF23                  ; 255
  33+ 06FB DD FF EE FF
  33+ 06FF 00 FF 11 FF
  33+ 0703 23 FF
  34+ 0705
  35+ 0705 00 00 00 00  LogReverseHighByte:     DW $00, 000, $20, 002, $32, 003, $40, 004, $4A, 005, $52, 006
  35+ 0709 20 00 02 00
  35+ 070D 32 00 03 00
  35+ 0711 40 00 04 00
  35+ 0715 4A 00 05 00
  35+ 0719 52 00 06 00
  36+ 071D 59 00 07 00                          DW $59, 007, $60, 008, $65, 009, $6A, 010, $6E, 011, $72, 012
  36+ 0721 60 00 08 00
  36+ 0725 65 00 09 00
  36+ 0729 6A 00 0A 00
  36+ 072D 6E 00 0B 00
  36+ 0731 72 00 0C 00
  37+ 0735 76 00 0D 00                          DW $76, 013, $79, 014, $7D, 015, $80, 016, $82, 017, $85, 018
  37+ 0739 79 00 0E 00
  37+ 073D 7D 00 0F 00
  37+ 0741 80 00 10 00
  37+ 0745 82 00 11 00
  37+ 0749 85 00 12 00
  38+ 074D 87 00 13 00                          DW $87, 019, $8A, 020, $8C, 021, $8E, 022, $90, 023, $92, 024
  38+ 0751 8A 00 14 00
  38+ 0755 8C 00 15 00
  38+ 0759 8E 00 16 00
  38+ 075D 90 00 17 00
  38+ 0761 92 00 18 00
  39+ 0765 94 00 19 00                          DW $94, 025, $96, 026, $98, 027, $99, 028, $9B, 029, $9D, 030
  39+ 0769 96 00 1A 00
  39+ 076D 98 00 1B 00
  39+ 0771 99 00 1C 00
  39+ 0775 9B 00 1D 00
  39+ 0779 9D 00 1E 00
  40+ 077D 9E 00 1F 00                          DW $9E, 031, $A0, 032, $A1, 033, $A2, 034, $A4, 035, $A5, 036
  40+ 0781 A0 00 20 00
  40+ 0785 A1 00 21 00
  40+ 0789 A2 00 22 00
  40+ 078D A4 00 23 00
  40+ 0791 A5 00 24 00
  41+ 0795 A6 00 25 00                          DW $A6, 037, $A7, 038, $A9, 039, $AA, 040, $AB, 041, $AC, 042
  41+ 0799 A7 00 26 00
  41+ 079D A9 00 27 00
  41+ 07A1 AA 00 28 00
  41+ 07A5 AB 00 29 00
  41+ 07A9 AC 00 2A 00
  42+ 07AD AD 00 2B 00                          DW $AD, 043, $AE, 044, $AF, 045, $B0, 046, $B1, 047, $B2, 048
  42+ 07B1 AE 00 2C 00
  42+ 07B5 AF 00 2D 00
  42+ 07B9 B0 00 2E 00
  42+ 07BD B1 00 2F 00
  42+ 07C1 B2 00 30 00
  43+ 07C5 B3 00 31 00                          DW $B3, 049, $B4, 050, $B5, 051, $B6, 052, $B7, 053, $B8, 054
  43+ 07C9 B4 00 32 00
  43+ 07CD B5 00 33 00
  43+ 07D1 B6 00 34 00
  43+ 07D5 B7 00 35 00
  43+ 07D9 B8 00 36 00
  44+ 07DD B9 00 38 00                          DW $B9, 056, $B9, 056, $BA, 057, $BB, 058, $BC, 059, $BD, 060
  44+ 07E1 B9 00 38 00
  44+ 07E5 BA 00 39 00
  44+ 07E9 BB 00 3A 00
  44+ 07ED BC 00 3B 00
  44+ 07F1 BD 00 3C 00
  45+ 07F5 BE 00 3E 00                          DW $BE, 062, $BF, 063, $C0, 064, $C1, 066, $C2, 067, $C3, 069
  45+ 07F9 BF 00 3F 00
  45+ 07FD C0 00 40 00
  45+ 0801 C1 00 42 00
  45+ 0805 C2 00 43 00
  45+ 0809 C3 00 45 00
  46+ 080D C4 00 46 00                          DW $C4, 070, $C5, 072, $C6, 072, $C7, 074, $C8, 076, $C9, 077
  46+ 0811 C5 00 48 00
  46+ 0815 C6 00 48 00
  46+ 0819 C7 00 4A 00
  46+ 081D C8 00 4C 00
  46+ 0821 C9 00 4D 00
  47+ 0825 CA 00 50 00                          DW $CA, 080, $CB, 082, $CC, 083, $CD, 085, $CE, 087, $CF, 088
  47+ 0829 CB 00 52 00
  47+ 082D CC 00 53 00
  47+ 0831 CD 00 55 00
  47+ 0835 CE 00 57 00
  47+ 0839 CF 00 58 00
  48+ 083D D0 00 5A 00                          DW $D0, 090, $D1, 092, $D2, 094, $D3, 097, $D4, 100, $D5, 102
  48+ 0841 D1 00 5C 00
  48+ 0845 D2 00 5E 00
  48+ 0849 D3 00 61 00
  48+ 084D D4 00 64 00
  48+ 0851 D5 00 66 00
  49+ 0855 D6 00 68 00                          DW $D6, 104, $D6, 105, $D7, 106, $D7, 107, $D8, 108, $D8, 109
  49+ 0859 D6 00 69 00
  49+ 085D D7 00 6A 00
  49+ 0861 D7 00 6B 00
  49+ 0865 D8 00 6C 00
  49+ 0869 D8 00 6D 00
  50+ 086D D9 00 6E 00                          DW $D9, 110, $D9, 111, $D9, 112, $DA, 113, $DB, 114, $DC, 117
  50+ 0871 D9 00 6F 00
  50+ 0875 D9 00 70 00
  50+ 0879 DA 00 71 00
  50+ 087D DB 00 72 00
  50+ 0881 DC 00 75 00
  51+ 0885 DD 00 78 00                          DW $DD, 120, $DE, 123, $DF, 126, $E0, 128, $E1, 131, $E2, 134
  51+ 0889 DE 00 7B 00
  51+ 088D DF 00 7E 00
  51+ 0891 E0 00 80 00
  51+ 0895 E1 00 83 00
  51+ 0899 E2 00 86 00
  52+ 089D E3 00 89 00                          DW $E3, 137, $E4, 140, $E5, 143, $E6, 146, $E7, 149, $E8, 153
  52+ 08A1 E4 00 8C 00
  52+ 08A5 E5 00 8F 00
  52+ 08A9 E6 00 92 00
  52+ 08AD E7 00 95 00
  52+ 08B1 E8 00 99 00
  53+ 08B5 E9 00 9C 00                          DW $E9, 156, $EA, 159, $EB, 163, $EC, 166, $ED, 170, $EE, 174
  53+ 08B9 EA 00 9F 00
  53+ 08BD EB 00 A3 00
  53+ 08C1 EC 00 A6 00
  53+ 08C5 ED 00 AA 00
  53+ 08C9 EE 00 AE 00
  54+ 08CD EF 00 B2 00                          DW $EF, 178, $F0, 182, $F1, 185, $F2, 190, $F3, 194, $F4, 198
  54+ 08D1 F0 00 B6 00
  54+ 08D5 F1 00 B9 00
  54+ 08D9 F2 00 BE 00
  54+ 08DD F3 00 C2 00
  54+ 08E1 F4 00 C6 00
  55+ 08E5 F5 00 CA 00                          DW $F5, 202, $F6, 207, $F7, 211, $F8, 216, $F8, 217, $F9, 220
  55+ 08E9 F6 00 CF 00
  55+ 08ED F7 00 D3 00
  55+ 08F1 F8 00 D8 00
  55+ 08F5 F8 00 D9 00
  55+ 08F9 F9 00 DC 00
  56+ 08FD FA 00 E1 00                          DW $FA, 225, $FB, 230, $FB, 233, $FC, 235, $FD, 240, $FE, 246
  56+ 0901 FB 00 E6 00
  56+ 0905 FB 00 E9 00
  56+ 0909 FC 00 EB 00
  56+ 090D FD 00 F0 00
  56+ 0911 FE 00 F6 00
  57+ 0915 FF 00 FB 00                          DW $FF, 251
  58+ 0919              LogReverseTableLen:     EQU $ - LogReverseHighByte
# file closed: ./Tables/logtable.asm
 988  0919                                      DISPLAY "Bank ",BankMathsTables," - Bytes free ",/D, $2000 - ($-MathsTablesAddr), " - BankMathsTables"
 989  0919
 990  0919                  SAVENEX OPEN "EliteN.nex", EliteNextStartup , TopOfStack
 991  0919                  SAVENEX CFG  0,0,0,1
 992  0919                  SAVENEX AUTO
 993  0919                  SAVENEX CLOSE
 994  0919
# file closed: eliteNext.asm
